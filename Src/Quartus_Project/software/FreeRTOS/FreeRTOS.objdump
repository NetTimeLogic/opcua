
FreeRTOS.elf:     file format elf32-littlenios2
FreeRTOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01800414

Program Header:
    LOAD off    0x00001000 vaddr 0x01800000 paddr 0x01800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01800020 paddr 0x01800020 align 2**12
         filesz 0x0004358c memsz 0x0004358c flags r-x
    LOAD off    0x000445ac vaddr 0x018435ac paddr 0x01845444 align 2**12
         filesz 0x00001e98 memsz 0x00001e98 flags rw-
    LOAD off    0x000472dc vaddr 0x018472dc paddr 0x018472dc align 2**12
         filesz 0x00000000 memsz 0x00022e9c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01800000  01800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000003f4  01800020  01800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000400e0  01800414  01800414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000030b8  018404f4  018404f4  000414f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e98  018435ac  01845444  000445ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00022e9c  018472dc  018472dc  000472dc  2**2
                  ALLOC, SMALL_DATA
  6 .tse_descriptor_memory_0 00000000  00000000  00000000  00046444  2**0
                  CONTENTS
  7 .sdram_controller_0 00000000  0186a178  0186a178  00046444  2**0
                  CONTENTS
  8 .mem_0        00000000  02020000  02020000  00046444  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00046444  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001600  00000000  00000000  00046468  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0004a4b3  00000000  00000000  00047a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000f553  00000000  00000000  00091f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000179e2  00000000  00000000  000a146e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000812c  00000000  00000000  000b8e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a86e  00000000  00000000  000c0f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001cc6c  00000000  00000000  000cb7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000050  00000000  00000000  000e8458  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001bb0  00000000  00000000  000e84a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000008  00000000  00000000  000f35c2  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  000f35ca  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000f35cf  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000f35d0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000006  00000000  00000000  000f35d1  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000006  00000000  00000000  000f35d7  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000006  00000000  00000000  000f35dd  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  000f35e3  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  000f35e7  2**0
                  CONTENTS, READONLY
 28 .jdi          0000495a  00000000  00000000  000f3603  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0009c7dc  00000000  00000000  000f7f5d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01800000 l    d  .entry	00000000 .entry
01800020 l    d  .exceptions	00000000 .exceptions
01800414 l    d  .text	00000000 .text
018404f4 l    d  .rodata	00000000 .rodata
018435ac l    d  .rwdata	00000000 .rwdata
018472dc l    d  .bss	00000000 .bss
00000000 l    d  .tse_descriptor_memory_0	00000000 .tse_descriptor_memory_0
0186a178 l    d  .sdram_controller_0	00000000 .sdram_controller_0
02020000 l    d  .mem_0	00000000 .mem_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FreeRTOS_bsp//obj/HAL/src/crt0.o
0180044c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 port_asm.o
01800020 l       .exceptions	00000000 save_context
0180009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
018000ac l       .exceptions	00000000 hw_irq_test
0180031c l       .exceptions	00000000 soft_exceptions
018000c0 l       .exceptions	00000000 hw_irq_handler
018000d4 l       .exceptions	00000000 restore_context
01800338 l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
018472dc l     O .bss	00000004 nw_ready
018472e0 l     O .bss	00000004 main_thread_handle
018004a8 l     F .text	000000b0 StatusCallback
01800558 l     F .text	00000044 LinkCallback
018005e4 l     F .text	000001c8 WaitOnPHY
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
01840a32 l     O .rodata	00000010 zeroes.4404
01802e28 l     F .text	000000bc __sbprintf
01840a42 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01803038 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01804b68 l     F .text	00000008 __fp_unlock
01804b7c l     F .text	0000019c __sinit.part.1
01804d18 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
018435ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
018439f0 l     O .rwdata	00000020 lc_ctype_charset
018439d0 l     O .rwdata	00000020 lc_message_charset
01843a10 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
01840a74 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01807630 l     F .text	000000fc __sprint_r.part.0
01840ba8 l     O .rodata	00000010 blanks.4348
01840b98 l     O .rodata	00000010 zeroes.4349
01808bbc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 queue.c
0180d75c l     F .text	00000090 prvInitialiseNewQueue
0180d7ec l     F .text	00000060 prvInitialiseMutex
0180e654 l     F .text	0000018c prvCopyDataToQueue
0180ea08 l     F .text	00000058 prvIsQueueFull
0180e87c l     F .text	000000f4 prvUnlockQueue
0180e7e0 l     F .text	0000009c prvCopyDataFromQueue
0180e970 l     F .text	00000050 prvIsQueueEmpty
0180e604 l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 tasks.c
01847470 l     O .bss	00000064 pxReadyTasksLists
018474d4 l     O .bss	00000014 xDelayedTaskList1
018474e8 l     O .bss	00000014 xDelayedTaskList2
0184731c l     O .bss	00000004 pxDelayedTaskList
01847320 l     O .bss	00000004 pxOverflowDelayedTaskList
018474fc l     O .bss	00000014 xPendingReadyList
01847510 l     O .bss	00000014 xTasksWaitingTermination
01847324 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
01847524 l     O .bss	00000014 xSuspendedTaskList
01847328 l     O .bss	00000004 uxCurrentNumberOfTasks
0184732c l     O .bss	00000004 xTickCount
01847330 l     O .bss	00000004 uxTopReadyPriority
01847334 l     O .bss	00000004 xSchedulerRunning
01847338 l     O .bss	00000004 xPendedTicks
0184733c l     O .bss	00000004 xYieldPending
01847340 l     O .bss	00000004 xNumOfOverflows
01847344 l     O .bss	00000004 uxTaskNumber
01847348 l     O .bss	00000004 xNextTaskUnblockTime
0184734c l     O .bss	00000004 xIdleTaskHandle
01847350 l     O .bss	00000004 uxSchedulerSuspended
0180ec48 l     F .text	000001e4 prvInitialiseNewTask
0180ee2c l     F .text	00000108 prvAddNewTaskToReadyList
018104e4 l     F .text	000000b8 prvInitialiseTaskLists
0181095c l     F .text	00000044 prvDeleteTCB
018109a0 l     F .text	00000054 prvResetNextTaskUnblockTime
01811658 l     F .text	000000e8 prvAddCurrentTaskToDelayedList
0180f5bc l     F .text	0000006c prvTaskIsTaskSuspended
018104c8 l     F .text	0000001c prvIdleTask
01810774 l     F .text	00000128 prvListTasksWithinSingleList
0181059c l     F .text	00000080 prvCheckTasksWaitingTermination
0181089c l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
01847538 l     O .bss	00000014 xActiveTimerList1
0184754c l     O .bss	00000014 xActiveTimerList2
01847354 l     O .bss	00000004 pxCurrentTimerList
01847358 l     O .bss	00000004 pxOverflowTimerList
0184735c l     O .bss	00000004 xTimerQueue
01847360 l     O .bss	00000004 xTimerTaskHandle
018121e8 l     F .text	0000007c prvCheckForValidListAndQueue
01811c10 l     F .text	0000003c prvTimerTask
01811820 l     F .text	000000a4 prvInitialiseNewTimer
01811b38 l     F .text	000000d8 prvProcessExpiredTimer
01811de0 l     F .text	000000dc prvInsertTimerInActiveList
01811d14 l     F .text	00000068 prvGetNextExpireTime
01811c4c l     F .text	000000c8 prvProcessTimerOrBlockTask
01811ebc l     F .text	00000218 prvProcessReceivedCommands
01811d7c l     F .text	00000064 prvSampleTimeNow
01847364 l     O .bss	00000004 xLastTime.2913
018120d4 l     F .text	00000114 prvSwitchTimerLists
00000000 l    df *ABS*	00000000 alt_dev.c
018123b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fstat.c
018124a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0181258c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_isatty.c
018126cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
018127ac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01812898 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
018129a8 l     F .text	0000003c alt_get_errno
018129e4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
018453f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_lwip_close.c
00000000 l    df *ABS*	00000000 alt_lwip_read.c
00000000 l    df *ABS*	00000000 alt_lwip_write.c
00000000 l    df *ABS*	00000000 altera_tse_ethernetif.c
01813090 l     F .text	00000074 low_level_init
01813104 l     F .text	00000154 low_level_input
00000000 l    df *ABS*	00000000 lwip_main.c
0184736c l     O .bss	00000004 status_callback
01847370 l     O .bss	00000004 link_callback
018136a4 l     F .text	0000025c lwip_handle_interfaces
01813c98 l     F .text	00000040 lwip_status_callback
01813b10 l     F .text	000000d0 lwip_handle_ethernet_input
01813a5c l     F .text	000000b4 lwip_check_link_status
00000000 l    df *ABS*	00000000 lwip_tse_mac.c
00000000 l    df *ABS*	00000000 sys_arch.c
00000000 l    df *ABS*	00000000 dhcp.c
018153d0 l     F .text	00000058 dhcp_clear_assignment
01815428 l     F .text	00000054 dhcp_handle_nak
0181703c l     F .text	0000005c dhcp_set_state
01816550 l     F .text	000001a0 dhcp_discover
0181547c l     F .text	000000a0 dhcp_check
0181551c l     F .text	000000ec dhcp_handle_offer
01815608 l     F .text	00000260 dhcp_select
01818014 l     F .text	00000584 dhcp_create_msg
01817098 l     F .text	0000009c dhcp_option
01817194 l     F .text	00000098 dhcp_option_short
0181722c l     F .text	0000010c dhcp_option_long
01817134 l     F .text	00000060 dhcp_option_byte
01817338 l     F .text	000000dc dhcp_option_hostname
0181861c l     F .text	000000fc dhcp_option_trailer
01818598 l     F .text	00000084 dhcp_delete_msg
01815bdc l     F .text	0000007c dhcp_t2_timeout
01815b60 l     F .text	0000007c dhcp_t1_timeout
018159c8 l     F .text	00000198 dhcp_timeout
018166f0 l     F .text	0000028c dhcp_bind
01816ae0 l     F .text	0000015c dhcp_rebind
01816c3c l     F .text	000001a4 dhcp_reboot
01815c58 l     F .text	00000218 dhcp_handle_ack
01817cbc l     F .text	00000358 dhcp_recv
018163ec l     F .text	00000164 dhcp_decline
01817414 l     F .text	000008a8 dhcp_parse_reply
018453fc l     O .rwdata	00000004 xid.3993
00000000 l    df *ABS*	00000000 ip_addr.c
01847560 l     O .bss	00000010 str.3409
00000000 l    df *ABS*	00000000 mem.c
01847384 l     O .bss	00000004 ram
01847388 l     O .bss	00000004 ram_end
0184738c l     O .bss	00000004 lfree
01847390 l     O .bss	00000004 mem_mutex
01818eb4 l     F .text	00000128 plug_holes
00000000 l    df *ABS*	00000000 netif.c
01847394 l     O .bss	00000001 netif_num
00000000 l    df *ABS*	00000000 pbuf.c
0181a028 l     F .text	00000078 pbuf_free_ooseq
0181a0a0 l     F .text	00000030 pbuf_free_ooseq_callback
0181a0d0 l     F .text	00000078 pbuf_pool_is_empty
00000000 l    df *ABS*	00000000 stats.c
00000000 l    df *ABS*	00000000 tcp.c
01845408 l     O .rwdata	00000002 tcp_port
018473a4 l     O .bss	00000001 tcp_timer
018473a5 l     O .bss	00000001 tcp_timer_ctr
0181b738 l     F .text	0000034c tcp_close_shutdown
0181c368 l     F .text	000000d8 tcp_new_port
0181bf38 l     F .text	00000030 tcp_accept_null
0181d324 l     F .text	000000d8 tcp_kill_prio
0181d3fc l     F .text	00000094 tcp_kill_timewait
01845414 l     O .rwdata	00000004 iss.4104
00000000 l    df *ABS*	00000000 tcp_out.c
0181db7c l     F .text	000003e8 tcp_output_alloc_header
0181e0ac l     F .text	000003a0 tcp_create_segment
0181e44c l     F .text	00000120 tcp_pbuf_prealloc
0181e56c l     F .text	000000b8 tcp_seg_add_chksum
0181e624 l     F .text	00000124 tcp_write_checks
0181ffa8 l     F .text	00000600 tcp_output_segment
00000000 l    df *ABS*	00000000 timers.c
018473c0 l     O .bss	00000004 next_timeout
018473c4 l     O .bss	00000004 tcpip_tcp_timer_active
01821274 l     F .text	0000005c tcpip_tcp_timer
0182132c l     F .text	00000044 ip_reass_timer
01821370 l     F .text	00000044 arp_timer
018213b4 l     F .text	00000044 dhcp_timer_coarse
018213f8 l     F .text	00000044 dhcp_timer_fine
00000000 l    df *ABS*	00000000 udp.c
01845418 l     O .rwdata	00000002 udp_port
01821858 l     F .text	0000009c udp_new_port
00000000 l    df *ABS*	00000000 etharp.c
01847570 l     O .bss	000001f4 arp_table
018228f0 l     F .text	00000068 free_etharp_q
01822958 l     F .text	0000009c etharp_free_entry
01822b70 l     F .text	00000318 etharp_find_entry
01822e88 l     F .text	000000a4 etharp_send_ip
01822f2c l     F .text	000001c8 etharp_update_arp_entry
01823258 l     F .text	000000e8 etharp_ip_input
01823340 l     F .text	0000038c etharp_arp_input
018236cc l     F .text	0000010c etharp_output_to_arp_index
01823e78 l     F .text	0000024c etharp_raw
00000000 l    df *ABS*	00000000 alt_sys_init.c
01824380 l     F .text	00000034 alt_dev_reg
01843ff8 l     O .rwdata	00001068 jtag_uart_0
01845060 l     O .rwdata	00000030 sgdma_tse_rx_0
01845090 l     O .rwdata	00000030 sgdma_tse_tx_0
018450c0 l     O .rwdata	000000cc uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01824744 l     F .text	0000020c altera_avalon_jtag_uart_irq
01824950 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
01825000 l     F .text	0000003c alt_get_errno
01825c30 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01825d94 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
018260f4 l     F .text	0000009c altera_avalon_uart_irq
01826190 l     F .text	000000e4 altera_avalon_uart_rxirq
01826274 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
01826410 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
01826664 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 heap_3.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
01826c4c l     F .text	0000002c prvReadGp
018473d0 l     O .bss	00000004 lastContext
01826e3c l     F .text	0000009c prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 tse_ethernet_phys.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
018271c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01827314 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_read.c
01827b34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01827e70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 sockets.c
01847764 l     O .bss	000003f0 sockets
018473f0 l     O .bss	00000004 select_cb_list
018473f4 l     O .bss	00000004 select_cb_ctr
01841400 l     O .rodata	00000040 err_to_errno_table
01827fe8 l     F .text	00000078 get_socket
01828060 l     F .text	00000080 tryget_socket
018280e0 l     F .text	00000188 alloc_socket
01828268 l     F .text	00000088 free_socket
01829c9c l     F .text	0000035c event_callback
0182948c l     F .text	00000370 lwip_selscan
0182a16c l     F .text	00000114 lwip_getaddrname
0182a5cc l     F .text	000003fc lwip_getsockopt_internal
0182ac5c l     F .text	00000338 lwip_setsockopt_internal
00000000 l    df *ABS*	00000000 tcpip.c
018473f8 l     O .bss	00000004 tcpip_init_done
018473fc l     O .bss	00000004 tcpip_init_done_arg
01847400 l     O .bss	00000004 mbox
0182b17c l     F .text	000001c0 tcpip_thread
0182b7b4 l     F .text	0000003c pbuf_free_int
00000000 l    df *ABS*	00000000 altera_avalon_tse.c
01847406 l     O .bss	00000001 tse_system_count.4134
01847407 l     O .bss	00000001 is_init.4216
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 icmp.c
01830f1c l     F .text	000001e0 icmp_send_response
00000000 l    df *ABS*	00000000 inet_chksum.c
018310fc l     F .text	00000234 lwip_standard_chksum
00000000 l    df *ABS*	00000000 ip.c
01847408 l     O .bss	00000002 ip_id
00000000 l    df *ABS*	00000000 ip_frag.c
0184741c l     O .bss	00000004 reassdatagrams
01847420 l     O .bss	00000002 ip_reass_pbufcount
018327ac l     F .text	00000190 ip_reass_free_complete_datagram
01832ba8 l     F .text	00000068 ip_reass_dequeue_datagram
0183293c l     F .text	00000190 ip_reass_remove_oldest_datagram
01832acc l     F .text	000000dc ip_reass_enqueue_new_datagram
01832c10 l     F .text	00000700 ip_reass_chain_frag_into_datagram_and_validate
0183391c l     F .text	0000002c ip_frag_alloc_pbuf_custom_ref
01833948 l     F .text	00000038 ip_frag_free_pbuf_custom_ref
01833980 l     F .text	00000058 ipfrag_free_pbuf_custom
00000000 l    df *ABS*	00000000 memp.c
01847b54 l     O .bss	0000003c memp_tab
018430d8 l     O .rodata	0000001e memp_sizes
018430f6 l     O .rodata	0000001e memp_num
01847b90 l     O .bss	0001a16f memp_memory
00000000 l    df *ABS*	00000000 raw.c
01847424 l     O .bss	00000004 raw_pcbs
00000000 l    df *ABS*	00000000 tcp_in.c
01861d00 l     O .bss	00000014 inseg
01847428 l     O .bss	00000004 tcphdr
0184742c l     O .bss	00000004 iphdr
01847430 l     O .bss	00000004 seqno
01847434 l     O .bss	00000004 ackno
01847438 l     O .bss	00000001 flags
0184743a l     O .bss	00000002 tcplen
0184743c l     O .bss	00000001 recv_flags
01847440 l     O .bss	00000004 recv_data
0183590c l     F .text	0000013c tcp_timewait_input
01835624 l     F .text	000002e8 tcp_listen_input
01835a48 l     F .text	00000ab4 tcp_process
01838790 l     F .text	00000228 tcp_parseopt
0183679c l     F .text	00001ff4 tcp_receive
018364fc l     F .text	000002a0 tcp_oos_insert_segment
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 api_lib.c
018392b8 l     F .text	00000274 netconn_recv_data
01839a84 l     F .text	000000bc netconn_close_shutdown
00000000 l    df *ABS*	00000000 api_msg.c
01839be0 l     F .text	00000170 recv_raw
01839d50 l     F .text	0000012c recv_udp
01839e7c l     F .text	00000130 recv_tcp
01839fac l     F .text	000000fc poll_tcp
0183b95c l     F .text	0000030c do_writemore
0183aa34 l     F .text	00000290 do_close_internal
0183a0a8 l     F .text	000000fc sent_tcp
0183a1a4 l     F .text	000001a4 err_tcp
0183a348 l     F .text	00000088 setup_tcp
0183a3d0 l     F .text	00000168 accept_function
0183a538 l     F .text	000001a4 pcb_new
0183a8b8 l     F .text	0000017c netconn_drain
0183b008 l     F .text	00000144 do_connected
00000000 l    df *ABS*	00000000 netbuf.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
0184356c l     O .rodata	00000010 zeroes.4389
0184357c l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 vfprintf.c
0184359c l     O .rodata	00000010 blanks.4332
0184358c l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
01827fc8 g     F .text	00000020 lwip_socket_init
0183ae98 g     F .text	00000170 do_bind
0184740c g     O .bss	00000004 current_iphdr_src
01831768 g     F .text	00000044 inet_chksum
018343e8 g     F .text	00000048 raw_bind
01807140 g     F .text	00000074 _mprec_log10
01833310 g     F .text	0000060c ip_reass
0182cae0 g     F .text	000000d8 alt_tse_get_mac_info
0181a5f4 g     F .text	00000160 pbuf_realloc
0180722c g     F .text	0000008c __any_on
01809614 g     F .text	00000054 _isatty_r
01840a80 g     O .rodata	00000028 __mprec_tinytens
0180d434 g     F .text	000000d8 alt_main
0183cb58 g     F .text	00000090 strcpy
0181da84 g     F .text	00000030 tcp_next_iss
0183c8c8 g     F .text	000000c0 _puts_r
0186a038 g     O .bss	00000100 alt_irq
0181c1d0 g     F .text	000000f0 tcp_update_rcv_ann_wnd
01809668 g     F .text	00000060 _lseek_r
018000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
01810028 g     F .text	00000064 vTaskPlaceOnUnorderedEventList
01847398 g     O .bss	00000004 netif_list
01815ebc g     F .text	00000050 dhcp_cleanup
018306dc g     F .text	000000f0 marvell_cfg_rgmii
01845444 g       *ABS*	00000000 __flash_rwdata_start
01826cc8 g     F .text	0000003c enh_alt_irq_enable_all
01813be0 g     F .text	000000b8 print_ipad
0180bf20 g     F .text	00000088 .hidden __eqdf2
018205a8 g     F .text	000003cc tcp_rst
0181b540 g     F .text	000000c8 pbuf_memfind
0182dcd0 g     F .text	00000210 alt_tse_phy_print_profile
0186a178 g       *ABS*	00000000 __alt_heap_start
0183047c g     F .text	00000098 marvell_phy_cfg
0180f278 g     F .text	00000058 uxTaskPriorityGet
018117a8 g     F .text	00000078 xTimerCreate
018240c4 g     F .text	00000074 etharp_request
01821ec8 g     F .text	00000074 udp_send_chksum
0183a868 g     F .text	00000050 netconn_free
01800bd8 g     F .text	0000003c printf
01815f0c g     F .text	000001ec dhcp_start
01825160 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
01809f40 g     F .text	0000009c _wcrtomb_r
0181d758 g     F .text	00000034 tcp_err
01845400 g     O .rwdata	00000004 ip_addr_any
01831330 g     F .text	00000200 inet_chksum_pseudo
018162a4 g     F .text	000000a8 dhcp_network_changed
01807458 g     F .text	0000005c __sseek
018227f8 g     F .text	000000a0 udp_remove
01804eb8 g     F .text	00000010 __sinit
0181061c g     F .text	00000158 vTaskGetInfo
01809de8 g     F .text	00000140 __swbuf_r
0180eab0 g     F .text	000000b8 vQueueWaitForMessageRestricted
01831f3c g     F .text	0000064c ip_output_if
018054c4 g     F .text	0000007c _setlocale_r
01804d20 g     F .text	00000068 __sfmoreglue
018341e4 g     F .text	000000d8 memp_free
0180d56c g     F .text	00000044 __malloc_unlock
018139b4 g     F .text	00000034 lwip_set_status_callback
0181a904 g     F .text	00000134 pbuf_free
0181d6f0 g     F .text	00000034 tcp_recv
0183acc4 g     F .text	000001d4 do_delconn
0182cd24 g     F .text	00000a7c getPHYSpeed
0181aad8 g     F .text	000000d4 pbuf_cat
0180093c g     F .text	000000b8 get_ip_addr
01825878 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
01828a50 g     F .text	000004d8 lwip_recvfrom
018096c8 g     F .text	0000015c memmove
01832588 g     F .text	000000b4 ip_output
018230f4 g     F .text	000000a4 etharp_cleanup_netif
01821f3c g     F .text	00000058 udp_sendto
01810de4 g     F .text	00000054 vTaskEnterCritical
01813618 g     F .text	0000008c lwip_wait_for_an
01804ea0 g     F .text	00000018 _cleanup
0183ca74 g     F .text	000000e4 snprintf
0180dbe0 g     F .text	000000f4 xQueueGenericSendFromISR
0180fab8 g     F .text	00000040 pcTaskGetName
018062bc g     F .text	000000a8 _Balloc
018188a8 g     F .text	00000044 ipaddr_addr
01820df8 g     F .text	00000194 tcp_keepalive
018229f4 g     F .text	0000017c etharp_tmr
0182f6e0 g     F .text	000001c4 alt_tse_phy_set_adv_1000
0183c0f8 g     F .text	00000074 netbuf_delete
01845440 g     O .rwdata	00000001 max_mac_system
0181d490 g     F .text	00000200 tcp_alloc
0182bd94 g     F .text	000009fc alt_tse_system_add_sys
0180bfa8 g     F .text	000000dc .hidden __gtdf2
01827fa4 g     F .text	00000024 altera_nios2_gen2_irq_init
0183c16c g     F .text	000000c8 netbuf_alloc
0182b654 g     F .text	00000070 tcpip_callbackmsg_new
0182204c g     F .text	00000060 udp_sendto_if
01800000 g     F .entry	0000001c __reset
0180d8a8 g     F .text	00000090 xQueueGiveMutexRecursive
01839b74 g     F .text	0000006c netconn_shutdown
0181d6bc g     F .text	00000034 tcp_arg
01847318 g     O .bss	00000004 pxCurrentTCB
0182143c g     F .text	00000078 sys_timeouts_init
018473a6 g     O .bss	00000001 tcp_active_pcbs_changed
01813a1c  w    F .text	00000040 lwip_is_interface_up
01814fa4 g     F .text	00000058 sys_mutex_free
018473a8 g     O .bss	00000004 tcp_active_pcbs
018253c8 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
01819fec g     F .text	0000003c netif_set_link_callback
01800020 g       *ABS*	00000000 __flash_exceptions_start
018473c8 g     O .bss	00000004 udp_pcbs
018090fc g     F .text	0000005c _fstat_r
0184518c g     O .rwdata	00000240 tse_mac_device
01847304 g     O .bss	00000004 errno
01824138 g     F .text	00000248 ethernet_input
0181bae0 g     F .text	000000f0 tcp_shutdown
018073d4 g     F .text	00000008 __seofread
01839738 g     F .text	00000080 netconn_recved
0183f228 g     F .text	0000123c ___svfiprintf_internal_r
0182ffc8 g     F .text	000004b4 alt_tse_phy_set_common_speed
0181aa84 g     F .text	00000054 pbuf_ref
0180d3f4  w    F .text	00000020 pre_constructors
0186a138 g     O .bss	00000020 pmac_groups
01819cbc g     F .text	00000048 netif_set_netmask
0181518c g     F .text	00000060 sys_mbox_trypost
0184730c g     O .bss	00000004 alt_argv
0184d3cc g       *ABS*	00000000 _gp
0181d2a8 g     F .text	0000007c tcp_recv_null
01827e40 g     F .text	00000030 usleep
01847410 g     O .bss	00000004 current_netif
01839b40 g     F .text	00000034 netconn_close
0181f078 g     F .text	000002e8 tcp_enqueue_flags
0183c084 g     F .text	00000074 netbuf_new
0180f31c g     F .text	000001a4 vTaskPrioritySet
01847314 g     O .bss	00000004 alt_heapsem
018102f8 g     F .text	0000003c vTaskInternalSetTimeOutState
0181ba84 g     F .text	0000005c tcp_close
0181c2c0 g     F .text	000000a8 tcp_recved
01827e10 g     F .text	00000030 alt_uncached_malloc
0181d808 g     F .text	00000170 tcp_pcb_purge
0182b898 g     F .text	00000060 tse_mac_initTransInfo2
01813504 g     F .text	00000114 lwip_initialize
01843e78 g     O .rwdata	00000180 alt_fd_list
01838f78 g     F .text	000000ac netconn_disconnect
01818ce4 g     F .text	0000003c ipaddr_ntoa
01800a2c g     F .text	00000048 get_iface_name
0184540a g     O .rwdata	00000007 tcp_persist_backoff
01826de4 g     F .text	00000038 xPortStartScheduler
018115e0 g     F .text	00000078 ulTaskNotifyValueClear
0180f878 g     F .text	00000048 vTaskEndScheduler
018273f4 g     F .text	00000090 alt_find_dev
0180604c g     F .text	00000148 memcpy
01819094 g     F .text	000000f4 mem_free
0182bb0c g     F .text	00000054 tse_mac_setMIImode
0180ffd8 g     F .text	00000050 vTaskPlaceOnEventList
0181b264 g     F .text	0000010c pbuf_fill_chksum
018101e4 g     F .text	000000c8 vTaskRemoveFromUnorderedEventList
018473ac g     O .bss	00000004 tcp_ticks
018473b0 g     O .bss	00000004 tcp_listen_pcbs
0182d7a0 g     F .text	00000048 alt_tse_phy_rd_mdio_addr
018220ac g     F .text	00000454 udp_sendto_if_chksum
01820974 g     F .text	000000b4 tcp_rexmit_rto
01804b70 g     F .text	0000000c _cleanup_r
0180d20c g     F .text	000000dc .hidden __floatsidf
0182b8f8 g     F .text	000000e4 tse_mac_sTxWrite
01812650 g     F .text	0000007c alt_io_redirect
0181d690 g     F .text	0000002c tcp_new
0180c084 g     F .text	000000f4 .hidden __ltdf2
0180e3fc g     F .text	0000007c xQueuePeekFromISR
01822764 g     F .text	00000050 udp_disconnect
0181aee8 g     F .text	0000019c pbuf_copy_partial
01814b7c g     F .text	00000020 sys_init
01814d2c g     F .text	00000048 sys_sem_signal
018404f4 g       *ABS*	00000000 __DTOR_END__
0180d414  w    F .text	00000020 post_constructors
018271fc g     F .text	000000d0 alt_close
018214b4 g     F .text	0000017c sys_timeout
0183c988 g     F .text	00000014 puts
01826978 g     F .text	00000044 vPortFree
01811b08 g     F .text	00000030 pcTimerGetName
01816de0 g     F .text	000001a4 dhcp_release
018072b8 g     F .text	00000074 __fpclassifyd
018411b0 g     O .rodata	0000002c tcp_state_str
0180709c g     F .text	000000a4 __ratio
01834644 g     F .text	00000044 raw_send
018317ac g     F .text	0000010c inet_chksum_pbuf
01808ba0 g     F .text	0000001c __vfiprintf_internal
0181b084 g     F .text	00000154 pbuf_take
0180df58 g     F .text	00000210 xQueueSemaphoreTake
018254c0 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0180e580 g     F .text	00000028 uxQueueGetQueueNumber
01824b48 g     F .text	00000258 altera_avalon_jtag_uart_read
0183c6bc g     F .text	00000014 malloc
01800ba8 g     F .text	00000030 _printf_r
01847414 g     O .bss	00000004 current_iphdr_dest
0180acd0 g     F .text	00000064 .hidden __udivsi3
01861d58 g     O .bss	00000024 tse
01812708 g     F .text	000000a4 isatty
0182c790 g     F .text	00000168 alt_tse_sys_enable_mdio_sharing
01830890 g     F .text	000005fc icmp_input
01840ad0 g     O .rodata	000000c8 __mprec_tens
0182ca60 g     F .text	00000080 alt_tse_get_mac_info_index
01810900 g     F .text	0000005c uxTaskGetStackHighWaterMark
01819848 g     F .text	000000f0 netif_add
01805540 g     F .text	0000000c __locale_charset
0182b6fc g     F .text	00000044 tcpip_trycallback
018473d4 g     O .bss	00000008 alt_timezone
01814e50 g     F .text	000000c0 sys_mutex_new
0181d158 g     F .text	00000054 tcp_segs_free
01826a50 g     F .text	0000008c vListInsertEnd
01838b10 g     F .text	00000090 alt_icache_flush
01828fc4 g     F .text	00000144 lwip_send
01847300 g     O .bss	00000004 __malloc_top_pad
01847368 g     O .bss	00000004 alt_fd_list_lock
018472e4 g     O .bss	00000004 PingIp
018453d4 g     O .rwdata	00000004 __mb_cur_max
01805570 g     F .text	0000000c _localeconv_r
0182b6c4 g     F .text	00000038 tcpip_callbackmsg_delete
0183263c g     F .text	000000d0 ip_output_hinted
01819b4c g     F .text	00000128 netif_set_ipaddr
01809158 g     F .text	000004bc __sfvwrite_r
018066c8 g     F .text	0000003c __i2b
018255f8 g     F .text	0000005c alt_avalon_sgdma_stop
0182d840 g     F .text	00000128 alt_tse_phy_wr_mdio_reg
0180732c g     F .text	00000054 _sbrk_r
0182dee0 g     F .text	000006a4 alt_tse_mac_group_init
0181e748 g     F .text	00000930 tcp_write
01813ec8 g     F .text	0000084c tse_mac_init
0180f6f4 g     F .text	000000e0 xTaskResumeFromISR
01823198 g     F .text	000000c0 etharp_find_addr
018151ec g     F .text	00000100 sys_arch_mbox_fetch
01829ff8 g     F .text	00000174 lwip_shutdown
0181396c g     F .text	00000048 get_netif
01809824 g     F .text	00000060 _read_r
01826a24 g     F .text	0000002c vListInitialiseItem
018272cc g     F .text	00000028 alt_dcache_flush
018453f4 g     O .rwdata	00000004 alt_max_fd
01826ed8 g     F .text	0000004c vPortSysTickHandler
01808df0 g     F .text	000000f0 _fclose_r
0180ddb0 g     F .text	000001a8 xQueueReceive
0181bd68 g     F .text	000001d0 tcp_bind
01804b38 g     F .text	00000030 fflush
018472fc g     O .bss	00000004 __malloc_max_sbrked_mem
01830ed4 g     F .text	00000048 icmp_time_exceeded
0181bd30 g     F .text	00000038 tcp_abort
0180f2d0 g     F .text	0000004c uxTaskPriorityGetFromISR
018390e0 g     F .text	000001d8 netconn_accept
01826f24 g     F .text	00000170 alt_irq_register
018339d8 g     F .text	0000048c ip_frag
0180ad8c g     F .text	000008ac .hidden __adddf3
01828940 g     F .text	00000110 lwip_listen
01811a70 g     F .text	00000060 uxTimerGetReloadMode
01806e44 g     F .text	0000010c __b2d
0180a6a0 g     F .text	00000538 .hidden __umoddi3
018128d4 g     F .text	000000d4 lseek
018344bc g     F .text	00000188 raw_sendto
0182da34 g     F .text	0000029c alt_tse_phy_add_profile_default
0182f14c g     F .text	00000594 alt_tse_phy_get_cap
01800000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
018119c0 g     F .text	00000030 xTimerGetPeriod
018453cc g     O .rwdata	00000004 _global_impure_ptr
0183bf54 g     F .text	00000130 do_close
01827b70 g     F .text	000000fc alt_read
01809884 g     F .text	00000564 _realloc_r
0186a178 g       *ABS*	00000000 __bss_end
01827a44 g     F .text	000000f0 alt_iic_isr_register
0182503c g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
01827d08 g     F .text	00000108 alt_tick
018285e4 g     F .text	00000154 lwip_bind
0180a128 g     F .text	00000578 .hidden __udivdi3
01816f84 g     F .text	000000b8 dhcp_stop
01809058 g     F .text	00000024 _fputwc_r
0182efec g     F .text	00000160 alt_tse_phy_check_link
01840aa8 g     O .rodata	00000028 __mprec_bigtens
018064ac g     F .text	00000104 __s2b
0182a280 g     F .text	00000044 lwip_getpeername
0180d2e8 g     F .text	000000a8 .hidden __floatunsidf
018305f8 g     F .text	000000e4 marvell_cfg_sgmii
0181ac8c g     F .text	0000025c pbuf_copy
0182ee30 g     F .text	000001bc alt_tse_phy_restart_an
01820a28 g     F .text	000002a8 tcp_rexmit
01806b84 g     F .text	00000060 __mcmp
0182692c g     F .text	0000004c pvPortMalloc
01825f98 g     F .text	0000015c altera_avalon_uart_init
0183c478 g     F .text	000000f4 netbuf_data
01804ed8 g     F .text	00000018 __fp_lock_all
01838cbc g     F .text	0000012c netconn_getaddr
018279f8 g     F .text	0000004c alt_ic_irq_enabled
0186a158 g     O .bss	00000020 pphy_profiles
0180e544 g     F .text	0000003c vQueueDelete
01826e1c g     F .text	00000020 vPortEndScheduler
01819d30 g     F .text	000000b0 netif_set_up
018269bc g     F .text	00000068 vListInitialise
01827c6c g     F .text	0000009c alt_alarm_stop
018139e8 g     F .text	00000034 lwip_set_link_callback
018473e4 g     O .bss	00000004 alt_irq_active
01829300 g     F .text	00000148 lwip_socket
018411ec g     O .rodata	00000010 tcp_pcb_lists
0182b740 g     F .text	00000074 tcpip_init
01800348 g     F .exceptions	000000cc alt_irq_handler
01843e50 g     O .rwdata	00000028 alt_dev_null
0180fa44 g     F .text	00000028 xTaskGetTickCount
0180da2c g     F .text	000001b4 xQueueGenericSend
01800a74 g     F .text	00000024 is_interface_active
018187e4 g     F .text	000000c4 ip4_addr_netmask_valid
018473b4 g     O .bss	00000004 tcp_tmp_pcb
01838eb0 g     F .text	000000c8 netconn_connect
0182ed18 g     F .text	00000118 alt_tse_phy_init
01825654 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
00000000 g       .debug_aranges	00000000 alt_exception_muldiv
018397b8 g     F .text	00000080 netconn_sendto
018272f4 g     F .text	00000020 alt_dcache_flush_all
018065b0 g     F .text	00000068 __hi0bits
0180faf8 g     F .text	00000188 uxTaskGetSystemState
0181484c g     F .text	00000160 tse_mac_raw_send
0180d18c g     F .text	00000080 .hidden __fixdfsi
018147b8 g     F .text	00000094 tse_sgdma_rx_isr
01810ba8 g     F .text	000000fc xTaskPriorityDisinherit
01818fdc g     F .text	000000b8 mem_init
01827eac g     F .text	000000f8 alt_write
018287c4 g     F .text	0000017c lwip_connect
0181df64 g     F .text	00000148 tcp_send_fin
01845444 g       *ABS*	00000000 __ram_rwdata_end
0181f4fc g     F .text	00000aac tcp_output
01847374 g     O .bss	00000004 tx_counter
018453ec g     O .rwdata	00000008 alt_dev_list
01819188 g     F .text	000002f8 mem_trim
0181302c g     F .text	00000064 write
01825798 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
0183c760 g     F .text	000000a0 _putc_r
018100f0 g     F .text	000000f4 xTaskRemoveFromEventList
01800450 g     F .text	00000028 vApplicationMallocFailedHook
018435ac g       *ABS*	00000000 __ram_rodata_end
0183c234 g     F .text	0000008c netbuf_free
018124dc g     F .text	000000b0 fstat
01839024 g     F .text	000000bc netconn_listen_with_backlog
01847444 g     O .bss	00000004 tcp_input_pcb
018342bc g     F .text	0000012c raw_input
0180c084 g     F .text	000000f4 .hidden __ledf2
018307cc g     F .text	00000078 DP83848C_link_status_read
0181f360 g     F .text	0000019c tcp_send_empty_ack
0180e168 g     F .text	000001b0 xQueuePeek
01820cd0 g     F .text	00000128 tcp_rexmit_fast
01814bf0 g     F .text	000000e4 sys_sem_new
018068fc g     F .text	00000140 __pow5mult
01807744 g     F .text	0000145c ___vfiprintf_internal_r
018472f4 g     O .bss	00000004 __nlocale_changed
0182b558 g     F .text	0000008c tcpip_untimeout
0180ad34 g     F .text	00000058 .hidden __umodsi3
018188ec g     F .text	000003f8 ipaddr_aton
01818718 g     F .text	000000cc ip4_addr_isbroadcast
01819d04 g     F .text	0000002c netif_set_default
018227b4 g     F .text	00000044 udp_recv
01825440 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
0182554c g     F .text	00000054 alt_avalon_sgdma_register_callback
0186a178 g       *ABS*	00000000 end
0180ef34 g     F .text	000000e8 vTaskDelete
01821724 g     F .text	00000114 sys_timeouts_mbox_fetch
01819de0 g     F .text	00000094 netif_set_down
01847378 g     O .bss	00000004 rx_counter
0181a148 g     F .text	0000036c pbuf_alloc
01819eb0 g     F .text	000000c4 netif_set_link_up
018150cc g     F .text	00000070 sys_mbox_free
018266a0 g     F .text	000001e8 altera_avalon_uart_write
0182bbb0 g     F .text	000001e4 alt_tse_phy_add_profile
018245fc g     F .text	00000148 altera_avalon_jtag_uart_init
01810edc g     F .text	00000038 pvTaskIncrementMutexHeldCount
018404f4 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
01838c5c g     F .text	00000060 netconn_delete
01825818 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
01825e0c g     F .text	0000007c alt_avalon_timer_sc_init
01825ee8 g     F .text	00000060 altera_avalon_uart_write_fd
0180d390 g     F .text	00000064 .hidden __clzsi2
0183c99c g     F .text	000000d8 _snprintf_r
01825f48 g     F .text	00000050 altera_avalon_uart_close_fd
0183c56c g     F .text	0000009c netbuf_next
01824da0 g     F .text	00000260 altera_avalon_jtag_uart_write
01825270 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
0183c608 g     F .text	00000068 netbuf_first
01804ec8 g     F .text	00000004 __sfp_lock_acquire
01805f68 g     F .text	000000e4 memchr
01845404 g     O .rwdata	00000004 ip_addr_broadcast
01800c14 g     F .text	000021f8 ___vfprintf_internal_r
01829108 g     F .text	000001f8 lwip_sendto
0183270c g     F .text	000000a0 ip_reass_tmr
01810334 g     F .text	000000e0 xTaskCheckForTimeOut
01825368 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
0180502c g     F .text	00000310 _free_r
01812bfc g     F .text	0000022c alt_printf
01810a68 g     F .text	00000140 xTaskPriorityInherit
01812358 g     F .text	00000028 uxTimerGetTimerNumber
0180554c g     F .text	00000010 __locale_mb_cur_max
0182265c g     F .text	00000108 udp_connect
0183eed8 g     F .text	00000180 __call_exitprocs
0183a73c g     F .text	0000012c netconn_alloc
01847418 g     O .bss	00000004 current_header
018297fc g     F .text	000004a0 lwip_select
01828f28 g     F .text	0000004c lwip_read
01847380 g     O .bss	00000004 rx_faulty_packets
018472f0 g     O .bss	00000004 __mlocale_changed
018149ac g     F .text	000001d0 tse_mac_rcv
01810f14 g     F .text	000000b0 ulTaskNotifyTake
01819938 g     F .text	0000005c netif_set_addr
0181634c g     F .text	000000a0 dhcp_arp_reply
018453d8 g     O .rwdata	00000004 __malloc_sbrk_base
01800414 g     F .text	0000003c _start
018473e8 g     O .bss	00000004 _alt_tick_rate
0180f8c0 g     F .text	0000002c vTaskSuspendAll
0180f168 g     F .text	00000110 eTaskGetState
0181b608 g     F .text	000000a4 pbuf_strstr
018256b8 g     F .text	00000054 alt_avalon_sgdma_open
0180fa6c g     F .text	0000002c xTaskGetTickCountFromISR
01800820 g     F .text	0000011c get_mac_addr
01834028 g     F .text	000001bc memp_malloc
01806a3c g     F .text	00000148 __lshift
01820f8c g     F .text	000002e8 tcp_zero_window_probe
018473ec g     O .bss	00000004 _alt_nticks
0182d968 g     F .text	000000cc alt_tse_phy_rd_mdio_reg
01812fc0 g     F .text	0000006c read
0183bc68 g     F .text	00000114 do_write
018243ec g     F .text	000000ac alt_sys_init
0183f058 g     F .text	000001d0 __ssprint_r
01815910 g     F .text	000000b8 dhcp_fine_tmr
01861d7c g     O .bss	0000000a dhcp_rx_options_given
01826bb4 g     F .text	00000098 uxListRemove
0183edc0 g     F .text	00000118 __register_exitproc
01847404 g     O .bss	00000001 phy_profile_count
0182c9ec g     F .text	00000074 alt_tse_get_mac_group_index
01818d20 g     F .text	00000194 ipaddr_ntoa_r
01806704 g     F .text	000001f8 __multiply
018249f0 g     F .text	00000068 altera_avalon_jtag_uart_close
018435ac g       *ABS*	00000000 __ram_rwdata_start
018404f4 g       *ABS*	00000000 __ram_rodata_start
01847448 g     O .bss	00000028 __malloc_current_mallinfo
01811568 g     F .text	00000078 xTaskNotifyStateClear
018473b8 g     O .bss	00000004 tcp_bound_pcbs
0180f628 g     F .text	000000cc vTaskResume
01806f50 g     F .text	0000014c __d2b
01814cd4 g     F .text	00000058 sys_sem_free
0181d1ac g     F .text	0000005c tcp_seg_free
0180fe7c g     F .text	0000015c vTaskSwitchContext
0181b420 g     F .text	00000120 pbuf_memcmp
018119f0 g     F .text	00000080 vTimerSetReloadMode
0182b82c g     F .text	0000003c mem_free_callback
0182d7e8 g     F .text	00000058 alt_tse_phy_wr_mdio_addr
01824498 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0182758c g     F .text	000000e0 alt_get_fd
0181008c g     F .text	00000064 vTaskPlaceOnEventListRestricted
0183bd7c g     F .text	000001d8 do_getaddr
018389b8 g     F .text	00000158 alt_busy_sleep
0183c3b8 g     F .text	000000c0 netbuf_chain
0181b6cc g     F .text	00000020 tcp_init
0181c440 g     F .text	00000398 tcp_connect
01831530 g     F .text	00000238 inet_chksum_pseudo_partial
01808cd8 g     F .text	00000054 _close_r
01819480 g     F .text	00000330 mem_malloc
01810fc4 g     F .text	000000f4 xTaskNotifyWait
0182fca0 g     F .text	00000328 alt_tse_phy_get_common_speed
0183c6e4 g     F .text	0000007c memcmp
01824558 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0186a178 g       *ABS*	00000000 __alt_stack_base
018245a8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01847405 g     O .bss	00000001 mac_group_count
01819f74 g     F .text	00000078 netif_set_link_down
0181697c g     F .text	00000164 dhcp_renew
018118c4 g     F .text	000000dc xTimerGenericCommand
01810484 g     F .text	00000044 vTaskSetTaskNumber
0183b398 g     F .text	00000084 do_disconnect
01802ee4 g     F .text	00000154 __swsetup_r
01800478 g     F .text	00000030 vApplicationStackOverflowHook
01814714 g     F .text	000000a4 tse_sgdma_read_init
0180f4c0 g     F .text	000000fc vTaskSuspend
0180b638 g     F .text	000008e8 .hidden __divdf3
01804d88 g     F .text	00000118 __sfp
0180fc80 g     F .text	0000004c xTaskCatchUpTicks
018071b4 g     F .text	00000078 __copybits
0180fa98 g     F .text	00000020 uxTaskGetNumberOfTasks
0181dab4 g     F .text	0000008c tcp_eff_send_mss
01843a48 g     O .rwdata	00000408 __malloc_av_
01804ed4 g     F .text	00000004 __sinit_lock_release
0180c178 g     F .text	00000718 .hidden __muldf3
01861d14 g     O .bss	00000044 eth_tse
01807380 g     F .text	00000054 __sread
0182e584 g     F .text	00000424 alt_tse_mac_get_phy
01827484 g     F .text	00000108 alt_find_file
0182a9c8 g     F .text	00000294 lwip_setsockopt
01827350 g     F .text	000000a4 alt_dev_llist_insert
0180d50c g     F .text	00000060 __malloc_lock
01812ec8 g     F .text	000000b0 sbrk
0183cbe8 g     F .text	000021d8 ___svfprintf_internal_r
0180d938 g     F .text	0000009c xQueueTakeMutexRecursive
018255a0 g     F .text	00000058 alt_avalon_sgdma_start
018160f8 g     F .text	000001ac dhcp_inform
0182b4bc g     F .text	0000009c tcpip_timeout
01804adc g     F .text	0000005c _fflush_r
0182cc98 g     F .text	0000008c alt_tse_mac_set_duplex
01808d2c g     F .text	000000c4 _calloc_r
01834430 g     F .text	00000048 raw_connect
0183952c g     F .text	00000074 netconn_recv_tcp_pbuf
018110b8 g     F .text	000001ac xTaskGenericNotify
0182766c g     F .text	000001f4 gettimeofday
01814ffc g     F .text	000000d0 sys_mbox_new
01813cd8 g     F .text	000001f0 lwip_initialize_phys
018472dc g       *ABS*	00000000 __bss_start
0181043c g     F .text	00000048 uxTaskGetTaskNumber
01806194 g     F .text	00000128 memset
01800a98 g     F .text	00000040 main
01847310 g     O .bss	00000004 alt_envp
018472f8 g     O .bss	00000004 __malloc_max_total_mem
018244f8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01809f28 g     F .text	00000018 __swbuf
01826adc g     F .text	000000d8 vListInsert
01830e8c g     F .text	00000048 icmp_dest_unreach
01845428 g     O .rwdata	00000008 alt_sgdma_list
0181d724 g     F .text	00000034 tcp_sent
018074b4 g     F .text	00000008 __sclose
0181b370 g     F .text	000000b0 pbuf_get_at
02000000 g       *ABS*	00000000 __alt_heap_limit
02020000 g       *ABS*	00000000 __alt_mem_mem_0
01808ee0 g     F .text	00000014 fclose
01811740 g     F .text	00000068 xTimerCreateTimerTask
01803238 g     F .text	00001688 _dtoa_r
01834728 g     F .text	00000080 raw_new
0180575c g     F .text	0000080c _malloc_r
0182ba84 g     F .text	00000088 tse_mac_SwReset
0180a09c g     F .text	00000030 __ascii_wctomb
0182a2c4 g     F .text	00000044 lwip_getsockname
0180e5dc g     F .text	00000028 ucQueueGetQueueType
01813258 g     F .text	000000fc ethernetif_input
01845430 g     O .rwdata	00000004 alt_errno
0180f01c g     F .text	000000f0 vTaskDelayUntil
0182b7f0 g     F .text	0000003c pbuf_free_callback
018268e8 g     F .text	00000044 __env_unlock
01819e74 g     F .text	0000003c netif_set_status_callback
0180533c g     F .text	000000c4 _fwalk
01839838 g     F .text	000000b8 netconn_send
0180e318 g     F .text	000000e4 xQueueReceiveFromISR
01838ba0 g     F .text	000000bc netconn_new_with_proto_and_callback
018109f4 g     F .text	00000028 xTaskGetCurrentTaskHandle
018398f0 g     F .text	00000194 netconn_write_partly
0183c800 g     F .text	000000c8 putc
0180abd8 g     F .text	00000084 .hidden __divsi3
0182c938 g     F .text	00000048 alt_tse_mac_set_common_speed
01834688 g     F .text	000000a0 raw_remove
0180d6c4 g     F .text	00000098 xQueueGenericCreate
01804f08 g     F .text	00000124 _malloc_trim_r
018404f4 g       *ABS*	00000000 __CTOR_END__
01813920 g     F .text	0000004c get_mac_base
018473a0 g     O .bss	00000001 pbuf_free_ooseq_pending
01822500 g     F .text	0000015c udp_bind
0181b6ec g     F .text	0000004c tcp_tmr
01823ac4 g     F .text	000003b4 etharp_query
018074bc g     F .text	000000dc strcmp
01830844 g     F .text	0000004c lwip_init
0180d9d4 g     F .text	00000058 xQueueCreateCountingSemaphore
018404f4 g       *ABS*	00000000 __flash_rodata_start
01815354 g     F .text	0000007c sys_thread_new
018404f4 g       *ABS*	00000000 __DTOR_LIST__
018237d8 g     F .text	000002ec etharp_output
01821f94 g     F .text	000000b8 udp_sendto_chksum
01811264 g     F .text	000001e4 xTaskGenericNotifyFromISR
0180bf20 g     F .text	00000088 .hidden __nedf2
0180e5a8 g     F .text	00000034 vQueueSetQueueNumber
018243b4 g     F .text	00000038 alt_irq_init
0182c8f8 g     F .text	00000040 alt_tse_mac_get_common_speed
01812e64 g     F .text	00000064 alt_release_fd
0180f8ec g     F .text	00000158 xTaskResumeAll
0182b5e4 g     F .text	00000070 tcpip_apimsg
0181a4b4 g     F .text	00000140 pbuf_alloced_custom
0180e4b8 g     F .text	00000054 uxQueueSpacesAvailable
01819c74 g     F .text	00000048 netif_set_gw
01840bb8 g     O .rodata	00000100 .hidden __clz_tab
0180f7d4 g     F .text	000000a4 vTaskStartScheduler
0181aa38 g     F .text	0000004c pbuf_clen
018472ec g     O .bss	00000004 _PathLocale
0183c670 g     F .text	00000014 atexit
01813900 g     F .text	00000020 get_mac_count
01808c78 g     F .text	00000060 _write_r
0181d208 g     F .text	00000038 tcp_setprio
01821e74 g     F .text	00000054 udp_send
0182a308 g     F .text	000002c4 lwip_getsockopt
0180557c g     F .text	00000018 setlocale
0180ea60 g     F .text	00000050 xQueueIsQueueFullFromISR
0181b1d8 g     F .text	0000008c pbuf_coalesce
01834478 g     F .text	00000044 raw_recv
018122c4 g     F .text	00000048 pvTimerGetTimerID
01814f5c g     F .text	00000048 sys_mutex_unlock
01800ad8 g     F .text	000000d0 main_thread
01819994 g     F .text	000000d8 netif_remove
01814f10 g     F .text	0000004c sys_mutex_lock
01814d74 g     F .text	000000dc sys_arch_sem_wait
018453d0 g     O .rwdata	00000004 _impure_ptr
01847308 g     O .bss	00000004 alt_argc
0181c7d8 g     F .text	00000738 tcp_slowtmr
01811ad0 g     F .text	00000038 xTimerGetExpiryTime
018048c0 g     F .text	0000021c __sflush_r
01812440 g     F .text	00000060 _do_dtors
01805568 g     F .text	00000008 __locale_cjk_lang
01806de0 g     F .text	00000064 __ulp
0181d78c g     F .text	00000034 tcp_accept
01804ef0 g     F .text	00000018 __fp_unlock_all
0183b41c g     F .text	00000200 do_listen
01810414 g     F .text	00000028 vTaskMissedYield
01813354 g     F .text	000001b0 ethernetif_init
018453e4 g     O .rwdata	00000008 alt_fs_list
0180e478 g     F .text	00000040 uxQueueMessagesWaiting
018473dc g     O .bss	00000008 alt_resettime
0180fccc g     F .text	000001b0 xTaskIncrementTick
01800020 g       *ABS*	00000000 __ram_exceptions_start
01805594 g     F .text	0000000c localeconv
0182b33c g     F .text	000000b0 tcpip_input
018473bc g     O .bss	00000004 tcp_tw_pcbs
0182faf8 g     F .text	000001a8 alt_tse_phy_set_adv_10
0180059c g     F .text	00000048 InitNetwork
01827894 g     F .text	00000050 alt_ic_isr_register
01814b9c g     F .text	00000054 sys_now
018218f4 g     F .text	00000580 udp_input
0180d5b0 g     F .text	00000114 xQueueGenericReset
0181230c g     F .text	0000004c vTimerSetTimerID
01845444 g       *ABS*	00000000 _edata
01825e88 g     F .text	00000060 altera_avalon_uart_read_fd
0186a178 g       *ABS*	00000000 _end
0182e9a8 g     F .text	00000248 alt_tse_mac_associate_phy
01819828 g     F .text	00000020 netif_init
01808ef4 g     F .text	00000164 __fputwc
01800414 g       *ABS*	00000000 __ram_exceptions_end
01824a58 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01831910 g     F .text	000000f0 ip_route
0181bf68 g     F .text	00000268 tcp_listen_with_backlog
01869dc4 g     O .bss	00000274 lwip_stats
0180eb68 g     F .text	000000e0 xTaskCreate
0183b860 g     F .text	000000fc do_recv
0181a754 g     F .text	000001b0 pbuf_header
01812264 g     F .text	00000060 xTimerIsTimerActive
0184739c g     O .bss	00000004 netif_default
0182796c g     F .text	0000008c alt_ic_irq_disable
0181d978 g     F .text	0000010c tcp_pcb_remove
018472e8 g     O .bss	00000004 lwipStaticIp
0184737c g     O .bss	00000004 rx_missed_packets
0182570c g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
018073dc g     F .text	0000007c __swrite
018318b8 g     F .text	00000058 lwip_chksum_copy
018453dc g     O .rwdata	00000004 __malloc_trim_threshold
0181abac g     F .text	00000044 pbuf_chain
0180555c g     F .text	0000000c __locale_msgcharset
0181bbd0 g     F .text	00000160 tcp_abandon
0183c684 g     F .text	00000038 exit
0181db40 g     F .text	0000003c tcp_debug_state_str
018212d0 g     F .text	0000005c tcp_timer_needed
01805400 g     F .text	000000c4 _fwalk_reent
01833e64 g     F .text	000001c4 memp_init
01815e70 g     F .text	0000004c dhcp_set_struct
018197b0 g     F .text	00000078 mem_calloc
01806be4 g     F .text	000001fc __mdiff
0181cf10 g     F .text	000000f8 tcp_fasttmr
0180ac5c g     F .text	00000074 .hidden __modsi3
0181d008 g     F .text	00000150 tcp_process_refused_data
0182bb60 g     F .text	00000050 tse_mac_setGMIImode
0180f10c g     F .text	0000005c vTaskDelay
01830514 g     F .text	000000e4 marvell_cfg_gmii
02000000 g       *ABS*	00000000 __alt_data_end
01804ecc g     F .text	00000004 __sfp_lock_release
01838de8 g     F .text	000000c8 netconn_bind
01829448 g     F .text	00000044 lwip_write
0182ebf0 g     F .text	00000128 alt_tse_phy_cfg_pcs
01861d88 g     O .bss	00000028 dhcp_rx_options_val
00000000 g       *ABS*	00000000 __alt_mem_tse_descriptor_memory_0
01810a1c g     F .text	0000004c xTaskGetSchedulerState
01828f74 g     F .text	00000050 lwip_recv
01810ca4 g     F .text	00000140 vTaskPriorityDisinheritAfterTimeout
018263bc g     F .text	00000054 altera_avalon_uart_close
0182af94 g     F .text	000000e4 lwip_ioctl
018404c4 g     F .text	00000030 _exit
01815868 g     F .text	000000a8 dhcp_coarse_tmr
01827094 g     F .text	0000012c alt_alarm_start
0181d240 g     F .text	00000068 tcp_seg_copy
01840464 g     F .text	00000060 .hidden __muldi3
018055a0 g     F .text	000001bc __smakebuf_r
01810e38 g     F .text	00000060 vTaskExitCritical
0181d7c0 g     F .text	00000048 tcp_poll
01807598 g     F .text	00000098 strlen
01826d04 g     F .text	000000e0 pxPortInitialiseStack
0182b078 g     F .text	00000104 lwip_fcntl
01812aa8 g     F .text	00000154 open
01821838 g     F .text	00000020 udp_init
01861db0 g     O .bss	00008014 ram_heap
0180bfa8 g     F .text	000000dc .hidden __gedf2
01822898 g     F .text	00000058 udp_new
01812e28 g     F .text	0000003c alt_putchar
018453e0 g     O .rwdata	00000004 __wctomb
01826c78 g     F .text	00000050 enh_alt_irq_disable_all
01828738 g     F .text	0000008c lwip_close
0180772c g     F .text	00000018 __sprint_r
0182b9dc g     F .text	000000a8 tse_mac_aRxRead
01827860 g     F .text	00000034 alt_icache_flush_all
0183c2c0 g     F .text	000000f8 netbuf_ref
0184541a g     O .rwdata	00000006 ethbroadcast
018102ac g     F .text	0000004c vTaskSetTimeOutState
018119a0 g     F .text	00000020 xTimerGetTimerDaemonTaskHandle
018411dc g     O .rodata	0000000d tcp_backoff
01812380 g     F .text	00000034 vTimerSetTimerNumber
01845434 g     O .rwdata	00000004 alt_priority_mask
018152ec g     F .text	00000068 sys_arch_mbox_tryfetch
018278e4 g     F .text	00000088 alt_ic_irq_enable
01802e0c g     F .text	0000001c __vfprintf_internal
018282f0 g     F .text	000002f4 lwip_accept
0182644c g     F .text	00000218 altera_avalon_uart_read
0180e50c g     F .text	00000038 uxQueueMessagesWaitingFromISR
0180a0cc g     F .text	0000005c _wctomb_r
01826888 g     F .text	00000060 __env_lock
018395a0 g     F .text	00000198 netconn_recv
0180e9c0 g     F .text	00000048 xQueueIsQueueEmptyFromISR
0183a6dc g     F .text	00000060 do_newconn
0182cbb8 g     F .text	000000e0 alt_tse_mac_set_speed
0181513c g     F .text	00000050 sys_mbox_post
018252e4 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0180c890 g     F .text	000008fc .hidden __subdf3
01806618 g     F .text	000000b0 __lo0bits
0183b14c g     F .text	0000024c do_connect
01845438 g     O .rwdata	00000008 alt_alarm_list
018123e0 g     F .text	00000060 _do_ctors
0182f8a4 g     F .text	00000254 alt_tse_phy_set_adv_100
01810e98 g     F .text	00000044 uxTaskResetEventItemValue
01821630 g     F .text	000000f4 sys_untimeout
01809fdc g     F .text	000000c0 wcrtomb
018347a8 g     F .text	00000e7c tcp_input
0180d84c g     F .text	0000005c xQueueCreateMutex
01812f78 g     F .text	00000048 close
018473cc g     O .bss	00000004 alt_envsem
01831a00 g     F .text	0000053c ip_input
01811448 g     F .text	00000120 vTaskNotifyGiveFromISR
018009f4 g     F .text	00000038 get_hostname
0183b61c g     F .text	00000244 do_send
01812814 g     F .text	00000084 alt_load
01845420 g     O .rwdata	00000006 ethzero
0181b6ac g     F .text	00000020 stats_init
0182c980 g     F .text	0000006c alt_tse_get_system_index
01825cec g     F .text	000000a8 alt_avalon_sgdma_init
0180dcd4 g     F .text	000000dc xQueueGiveFromISR
0180907c g     F .text	00000080 fputwc
0183c6d0 g     F .text	00000014 free
01819a6c g     F .text	000000e0 netif_find
01804ed0 g     F .text	00000004 __sinit_lock_acquire
018007ac g     F .text	00000074 xEthernetRun
0180638c g     F .text	00000120 __multadd
0182b3ec g     F .text	000000d0 tcpip_callback_with_block
01806364 g     F .text	00000028 _Bfree
0182b868 g     F .text	00000030 no_printf
0181abf0 g     F .text	0000009c pbuf_dechain



Disassembly of section .entry:

01800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1800000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 1800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 180000c:	00bffd16 	blt	zero,r2,1800004 <__alt_mem_mem_0+0xff7e0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1800010:	00406034 	movhi	at,384
    ori r1, r1, %lo(_start)
 1800014:	08410514 	ori	at,at,1044
    jmp r1
 1800018:	0800683a 	jmp	at
 180001c:	00000000 	call	0 <__alt_mem_tse_descriptor_memory_0>

Disassembly of section .exceptions:

01800020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 1800020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
 1800024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 1800028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 180002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 1800030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 1800034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 1800038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 180003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 1800040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 1800044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 1800048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 180004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 1800050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 1800054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 1800058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 180005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 1800060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 1800064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 1800068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 180006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 1800070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 1800074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 1800078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 180007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 1800080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 1800084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 1800088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 180008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 1800090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 1800094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 1800098:	df001c15 	stw	fp,112(sp)

0180009c <save_sp_to_pxCurrentTCB>:
 180009c:	06006134 	movhi	et,388

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 18000a0:	c61cc604 	addi	et,et,29464
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 18000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 18000a8:	c6c00015 	stw	sp,0(et)

018000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
 18000ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
 18000b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
 18000b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 18000b8:	10009826 	beq	r2,zero,180031c <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 18000bc:	20009726 	beq	r4,zero,180031c <soft_exceptions>

018000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 18000c0:	18003480 	call	1800348 <alt_irq_handler>

018000c4 <restore_sp_from_pxCurrentTCB>:
 18000c4:	06006134 	movhi	et,388

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 18000c8:	c61cc604 	addi	et,et,29464
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 18000cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 18000d0:	c6c00017 	ldw	sp,0(et)

018000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 18000d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 18000d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 18000dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 18000e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 18000e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 18000e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 18000ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 18000f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 18000f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 18000f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 18000fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 1800100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 1800104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 1800108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 180010c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 1800110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 1800114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 1800118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 180011c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 1800120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 1800124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 1800128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 180012c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 1800130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 1800134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 1800138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 180013c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 1800140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 1800144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 1800148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 180014c:	ef80083a 	eret
        /*
         * Split the instruction into its fields.  We need 4*A, 4*B, and 4*C as
         * offsets to the stack pointer for access to the stored register values.
         */
                             /* r2 = AAAAA,BBBBB,IIIIIIIIIIIIIIII,PPPPPP    */
        roli  r3, r2, 7      /* r3 = BBB,IIIIIIIIIIIIIIII,PPPPPP,AAAAA,BB   */
 1800150:	100611fa 	roli	r3,r2,7
        roli  r4, r3, 3      /* r4 = IIIIIIIIIIIIIIII,PPPPPP,AAAAA,BBBBB    */
 1800154:	180810fa 	roli	r4,r3,3
        roli  r6, r4, 2      /* r6 = IIIIIIIIIIIIII,PPPPPP,AAAAA,BBBBB,II   */
 1800158:	200c10ba 	roli	r6,r4,2
        srai  r4, r4, 16     /* r4 = (sign-extended) IMM16                  */
 180015c:	2009d43a 	srai	r4,r4,16
        xori  r6, r6, 0x42   /* r6 = CCC,XXXXXX,NNNNN,PPPPPP,AAAAA,bBBBB,cC */
 1800160:	3180109c 	xori	r6,r6,66
        roli  r7, r6, 5      /* r7 = XXXX,NNNNN,PPPPPP,AAAAA,bBBBB,cCCCC,XX */
 1800164:	300e117a 	roli	r7,r6,5
        andi  r5, r2, 0x3f   /* r5 = 00000000000000000000000000,PPPPPP      */
 1800168:	11400fcc 	andi	r5,r2,63
        xori  r3, r3, 0x40
 180016c:	18c0101c 	xori	r3,r3,64
        andi  r3, r3, 0x7c   /* r3 = 0000000000000000000000000,aAAAA,00     */
 1800170:	18c01f0c 	andi	r3,r3,124
        andi  r6, r6, 0x7c   /* r6 = 0000000000000000000000000,bBBBB,00     */
 1800174:	31801f0c 	andi	r6,r6,124
        andi  r7, r7, 0x7c   /* r7 = 0000000000000000000000000,cCCCC,00     */
 1800178:	39c01f0c 	andi	r7,r7,124
         * Save everything on the stack to make it easy for the emulation routines
         * to retrieve the source register operands.  The exception entry code has
         * already saved some of this so we don't need to do it all again.
         */

        addi  sp, sp, -60
 180017c:	defff104 	addi	sp,sp,-60
        stw   zero, 64(sp)   /* Save zero on stack to avoid special case for r0. */
 1800180:	d8001015 	stw	zero,64(sp)
                             /* Register at and r2-r15 have already been saved.  */

        stw   r16,  0(sp)
 1800184:	dc000015 	stw	r16,0(sp)
        stw   r17,  4(sp)
 1800188:	dc400115 	stw	r17,4(sp)
        stw   r18,  8(sp)
 180018c:	dc800215 	stw	r18,8(sp)
        stw   r19, 12(sp)
 1800190:	dcc00315 	stw	r19,12(sp)
        stw   r20, 16(sp)
 1800194:	dd000415 	stw	r20,16(sp)
        stw   r21, 20(sp)
 1800198:	dd400515 	stw	r21,20(sp)
        stw   r22, 24(sp)
 180019c:	dd800615 	stw	r22,24(sp)
        stw   r23, 28(sp)
 18001a0:	ddc00715 	stw	r23,28(sp)
                            /* et @ 32 - Has already been changed.*/
                            /* bt @ 36 - Usually isn't an operand.   */
        stw   gp,  40(sp)
 18001a4:	de800a15 	stw	gp,40(sp)
        stw   sp,  44(sp)
 18001a8:	dec00b15 	stw	sp,44(sp)
        stw   fp,  48(sp)
 18001ac:	df000c15 	stw	fp,48(sp)

        /*
         *  Prepare for either multiplication or division loop.
         *  They both loop 32 times.
         */
        movi   r14, 32
 18001b0:	03800804 	movi	r14,32
         * Get the operands.
         *
         * It is necessary to check for muli because it uses an I-type instruction
         * format, while the other instructions are have an R-type format.
         */
        add    r3, r3, sp     /* r3 = address of A-operand. */
 18001b4:	1ec7883a 	add	r3,r3,sp
        ldw    r3, 0(r3)      /* r3 = A-operand. */
 18001b8:	18c00017 	ldw	r3,0(r3)
        movi   r15, 0x24      /* muli opcode (I-type instruction format) */
 18001bc:	03c00904 	movi	r15,36
        beq    r5, r15, .Lmul_immed /* muli doesn't use the B register as a source */
 18001c0:	2bc02726 	beq	r5,r15,1800260 <restore_context+0x18c>

        add    r6, r6, sp     /* r6 = address of B-operand.               */
 18001c4:	36cd883a 	add	r6,r6,sp
        ldw    r6, 0(r6)      /* r6 = B-operand.                          */
 18001c8:	31800017 	ldw	r6,0(r6)
                              /* r4 = SSSSSSSSSSSSSSSS,-----IMM16------   */
                              /* IMM16 not needed, align OPX portion      */
                              /* r4 = SSSSSSSSSSSSSSSS,CCCCC,-OPX--,00000 */
        srli   r4, r4, 5      /* r4 = 00000,SSSSSSSSSSSSSSSS,CCCCC,-OPX-- */
 18001cc:	2008d17a 	srli	r4,r4,5
        andi   r4, r4, 0x3f   /* r4 = 00000000000000000000000000,-OPX--   */
 18001d0:	21000fcc 	andi	r4,r4,63
         *
         *  This code assumes that OP is not muli (because muli was tested above).
         *  All other multiplies and divides are legal.  Anything else is illegal.
         */

        movi  r8, 0x3a                        /* OP for R-type mul* and div* */
 18001d4:	02000e84 	movi	r8,58
        bne   r5, r8, .Lnot_muldiv
 18001d8:	2a004f1e 	bne	r5,r8,1800318 <restore_context+0x244>

        /* r15 already is 0x24 */            /* OPX of divu */
        beq   r4, r15, .Ldivide
 18001dc:	23c00a26 	beq	r4,r15,1800208 <restore_context+0x134>

        movi  r15,0x27                        /* OPX of mul */
 18001e0:	03c009c4 	movi	r15,39
        beq   r4, r15, .Lmultiply
 18001e4:	23c02126 	beq	r4,r15,180026c <restore_context+0x198>

        movi  r15,0x07                        /* OPX of mulxuu */
 18001e8:	03c001c4 	movi	r15,7
        beq   r4, r15, .Lmultiply
 18001ec:	23c01f26 	beq	r4,r15,180026c <restore_context+0x198>

        movi  r15,0x17                        /* OPX of mulxsu */
 18001f0:	03c005c4 	movi	r15,23
        beq   r4, r15, .Lmultiply
 18001f4:	23c01d26 	beq	r4,r15,180026c <restore_context+0x198>

        movi  r15,0x1f                        /* OPX of mulxss */
 18001f8:	03c007c4 	movi	r15,31
        beq   r4, r15, .Lmultiply
 18001fc:	23c01b26 	beq	r4,r15,180026c <restore_context+0x198>

        movi  r15,0x25                        /* OPX of div */
 1800200:	03c00944 	movi	r15,37
        bne   r4, r15, .Lnot_muldiv
 1800204:	23c0441e 	bne	r4,r15,1800318 <restore_context+0x244>
.Ldivide:
        /*
         *  Prepare for division by assuming the result
         *  is unsigned, and storing its "sign" as 0.
         */
        movi   r17, 0
 1800208:	04400004 	movi	r17,0


        /* Which division opcode? */
        xori   r15, r4, 0x25         /* OPX of div */
 180020c:	23c0095c 	xori	r15,r4,37
        bne    r15, zero, .Lunsigned_division
 1800210:	7800051e 	bne	r15,zero,1800228 <restore_context+0x154>

        /*
         *  OPX is div.  Determine and store the sign of the quotient.
         *  Then take the absolute value of both operands.
         */
        xor   r17, r3, r6      /* MSB contains sign of quotient */
 1800214:	19a2f03a 	xor	r17,r3,r6
        bge   r3, zero, 0f
 1800218:	1800010e 	bge	r3,zero,1800220 <restore_context+0x14c>
        sub   r3, zero, r3     /* -r3 */
 180021c:	00c7c83a 	sub	r3,zero,r3
0:
        bge   r6, zero, 0f
 1800220:	3000010e 	bge	r6,zero,1800228 <restore_context+0x154>
        sub   r6, zero, r6     /* -r6 */
 1800224:	018dc83a 	sub	r6,zero,r6
0:


.Lunsigned_division:
        /* Initialize the unsigned-division loop. */
        movi  r13, 0          /* remainder = 0 */
 1800228:	03400004 	movi	r13,0
        /*
        *       Division:
        *
        *       (remainder:dividend:quotient) <<= 1;
        */
        slli  r13, r13, 1
 180022c:	681a907a 	slli	r13,r13,1
        cmplt r15, r3, zero        /* r15 = MSB of r3 */
 1800230:	181e803a 	cmplt	r15,r3,zero
        or    r13, r13, r15
 1800234:	6bdab03a 	or	r13,r13,r15
        slli  r3, r3, 1
 1800238:	1806907a 	slli	r3,r3,1
        *       {
        *           set LSB of quotient
        *           remainder -= divisor;
        *       }
        */
        bltu  r13, r6, .Ldiv_skip
 180023c:	69800236 	bltu	r13,r6,1800248 <restore_context+0x174>
        ori   r3, r3, 1
 1800240:	18c00054 	ori	r3,r3,1
        sub   r13, r13, r6
 1800244:	699bc83a 	sub	r13,r13,r6
.Ldiv_skip:

        /*
        *   }
        */
        subi  r14, r14, 1
 1800248:	73bfffc4 	addi	r14,r14,-1
        bne   r14, zero, .Ldivide_loop
 180024c:	703ff71e 	bne	r14,zero,180022c <__alt_mem_mem_0+0xff7e022c>

        mov   r9, r3
 1800250:	1813883a 	mov	r9,r3
    
        /*
        *  Conditionally negate signed quotient.  If quotient is unsigned,
        *  the sign already is initialized to 0.
        */
        bge   r17, zero, .Lstore_result
 1800254:	8800230e 	bge	r17,zero,18002e4 <restore_context+0x210>
        sub   r9, zero, r9     /* -r9 */
 1800258:	0253c83a 	sub	r9,zero,r9

        br    .Lstore_result
 180025c:	00002106 	br	18002e4 <restore_context+0x210>
        *
        */

.Lmul_immed:
        /* Opcode is muli.  Change it into mul for remainder of algorithm. */
        mov   r7, r6         /* Field B is dest register, not field C. */
 1800260:	300f883a 	mov	r7,r6
        mov   r6, r4         /* Field IMM16 is src2, not field B. */
 1800264:	200d883a 	mov	r6,r4
        movi  r4, 0x27       /* OPX of mul is 0x27 */
 1800268:	010009c4 	movi	r4,39

.Lmultiply:
        /* Initialize the multiplication loop. */
        movi  r9, 0          /* mul_product    = 0 */
 180026c:	02400004 	movi	r9,0
        movi  r10, 0         /* mulxuu_product = 0 */
 1800270:	02800004 	movi	r10,0
        mov   r11, r6        /* save original multiplier for mulxsu and mulxss */
 1800274:	3017883a 	mov	r11,r6
        mov   r12, r6        /* mulxuu_multiplier (will be shifted) */
 1800278:	3019883a 	mov	r12,r6
        movi  r16, 1         /* used to create "rori B,A,1" from "ror B,A,r16" */
 180027c:	04000044 	movi	r16,1

        /*
        *       mul_product <<= 1;
        *       lsb = multiplier & 1;
        */
        slli   r9, r9, 1
 1800280:	4812907a 	slli	r9,r9,1
        andi   r15, r12, 1
 1800284:	63c0004c 	andi	r15,r12,1
        *       if (lsb == 1)
        *       {
        *           mulxuu_product += multiplicand;
        *       }
        */
        beq   r15, zero, .Lmulx_skip
 1800288:	78000326 	beq	r15,zero,1800298 <restore_context+0x1c4>
        add   r10, r10, r3
 180028c:	50d5883a 	add	r10,r10,r3
        cmpltu r15, r10, r3  /* Save the carry from the MSB of mulxuu_product. */
 1800290:	50df803a 	cmpltu	r15,r10,r3
        ror   r15, r15, r16  /* r15 = 0x80000000 on carry, or else 0x00000000 */
 1800294:	7c1e583a 	ror	r15,r15,r16
        *       if (MSB of mul_multiplier == 1)
        *       {
        *           mul_product += multiplicand;
        *       }
        */
        bge   r6, zero, .Lmul_skip
 1800298:	3000010e 	bge	r6,zero,18002a0 <restore_context+0x1cc>
        add   r9, r9, r3
 180029c:	48d3883a 	add	r9,r9,r3
        /*
        *       mulxuu_product >>= 1;           logical shift
        *       mul_multiplier <<= 1;           done with MSB
        *       mulx_multiplier >>= 1;          done with LSB
        */
        srli   r10, r10, 1
 18002a0:	5014d07a 	srli	r10,r10,1
        or     r10, r10, r15           /* OR in the saved carry bit. */
 18002a4:	53d4b03a 	or	r10,r10,r15
        slli   r6, r6, 1
 18002a8:	300c907a 	slli	r6,r6,1
        srli   r12, r12, 1
 18002ac:	6018d07a 	srli	r12,r12,1


        /*
        *   }
        */
        subi   r14, r14, 1
 18002b0:	73bfffc4 	addi	r14,r14,-1
        bne    r14, zero, .Lmultiply_loop
 18002b4:	703ff21e 	bne	r14,zero,1800280 <__alt_mem_mem_0+0xff7e0280>
        *  Select/compute the result based on OPX.
        */


        /* OPX == mul?  Then store. */
        xori  r15, r4, 0x27
 18002b8:	23c009dc 	xori	r15,r4,39
        beq   r15, zero, .Lstore_result
 18002bc:	78000926 	beq	r15,zero,18002e4 <restore_context+0x210>

        /* It's one of the mulx.. opcodes.  Move over the result. */
        mov   r9, r10
 18002c0:	5013883a 	mov	r9,r10

        /* OPX == mulxuu?  Then store. */
        xori  r15, r4, 0x07
 18002c4:	23c001dc 	xori	r15,r4,7
        beq   r15, zero, .Lstore_result
 18002c8:	78000626 	beq	r15,zero,18002e4 <restore_context+0x210>

        /* Compute mulxsu
         *
         * mulxsu = mulxuu - ((rA < 0) ? rB : 0);
         */
        bge   r3, zero, .Lmulxsu_skip
 18002cc:	1800010e 	bge	r3,zero,18002d4 <restore_context+0x200>
        sub   r9, r9, r11
 18002d0:	4ad3c83a 	sub	r9,r9,r11
.Lmulxsu_skip:

        /* OPX == mulxsu?  Then store. */
        xori  r15, r4, 0x17
 18002d4:	23c005dc 	xori	r15,r4,23
        beq   r15, zero, .Lstore_result
 18002d8:	78000226 	beq	r15,zero,18002e4 <restore_context+0x210>

        /* Compute mulxss
         *
         * mulxss = mulxsu - ((rB < 0) ? rA : 0);
         */
        bge   r11, zero, .Lmulxss_skip
 18002dc:	5800010e 	bge	r11,zero,18002e4 <restore_context+0x210>
        sub   r9, r9, r3
 18002e0:	48d3c83a 	sub	r9,r9,r3
.Lmulxss_skip:
        /* At this point, assume that OPX is mulxss, so store */


.Lstore_result:
        add   r7, r7, sp
 18002e4:	3ecf883a 	add	r7,r7,sp
        stw   r9, 0(r7)
 18002e8:	3a400015 	stw	r9,0(r7)

        ldw   r16,  0(sp)
 18002ec:	dc000017 	ldw	r16,0(sp)
        ldw   r17,  4(sp)
 18002f0:	dc400117 	ldw	r17,4(sp)
        ldw   r18,  8(sp)
 18002f4:	dc800217 	ldw	r18,8(sp)
        ldw   r19, 12(sp)
 18002f8:	dcc00317 	ldw	r19,12(sp)
        ldw   r20, 16(sp)
 18002fc:	dd000417 	ldw	r20,16(sp)
        ldw   r21, 20(sp)
 1800300:	dd400517 	ldw	r21,20(sp)
        ldw   r22, 24(sp)
 1800304:	dd800617 	ldw	r22,24(sp)
        ldw   r23, 28(sp)
 1800308:	ddc00717 	ldw	r23,28(sp)

                            /* bt @ 32 - Breakpoint register usually isn't an operand. */
                            /* et @ 36 - Don't corrupt et. */
                            /* gp @ 40 - Don't corrupt gp. */
                            /* sp @ 44 - Don't corrupt sp. */
        ldw   fp,  48(sp)
 180030c:	df000c17 	ldw	fp,48(sp)
                            /* ea @ 52 - Don't corrupt ea. */
                            /* ba @ 56 - Breakpoint register usually isn't an operand. */

        addi  sp, sp, 60
 1800310:	dec00f04 	addi	sp,sp,60

        br    .Lexception_exit
 1800314:	00000c06 	br	1800348 <alt_irq_handler>


.Lnot_muldiv:

        addi  sp, sp, 60
 1800318:	dec00f04 	addi	sp,sp,60

0180031c <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 180031c:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 1800320:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 1800324:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 1800328:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 180032c:	c0000226 	beq	et,zero,1800338 <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 1800330:	003da03a 	break	0
  	br		restore_context			# its something else
 1800334:	003f6706 	br	18000d4 <__alt_mem_mem_0+0xff7e00d4>

01800338 <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 1800338:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 180033c:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 1800340:	180fe7c0 	call	180fe7c <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 1800344:	003f5f06 	br	18000c4 <__alt_mem_mem_0+0xff7e00c4>

01800348 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 1800348:	defff904 	addi	sp,sp,-28
 180034c:	dfc00615 	stw	ra,24(sp)
 1800350:	df000515 	stw	fp,20(sp)
 1800354:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1800358:	0005313a 	rdctl	r2,ipending
 180035c:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1800360:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1800364:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1800368:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 180036c:	00800044 	movi	r2,1
 1800370:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1800374:	e0fffb17 	ldw	r3,-20(fp)
 1800378:	e0bffc17 	ldw	r2,-16(fp)
 180037c:	1884703a 	and	r2,r3,r2
 1800380:	10001426 	beq	r2,zero,18003d4 <alt_irq_handler+0x8c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1800384:	008061f4 	movhi	r2,391
 1800388:	10a80e04 	addi	r2,r2,-24520
 180038c:	e0fffd17 	ldw	r3,-12(fp)
 1800390:	180690fa 	slli	r3,r3,3
 1800394:	10c5883a 	add	r2,r2,r3
 1800398:	10c00017 	ldw	r3,0(r2)
 180039c:	008061f4 	movhi	r2,391
 18003a0:	10a80e04 	addi	r2,r2,-24520
 18003a4:	e13ffd17 	ldw	r4,-12(fp)
 18003a8:	200890fa 	slli	r4,r4,3
 18003ac:	1105883a 	add	r2,r2,r4
 18003b0:	10800104 	addi	r2,r2,4
 18003b4:	10800017 	ldw	r2,0(r2)
 18003b8:	1009883a 	mov	r4,r2
 18003bc:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 18003c0:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 18003c4:	0005313a 	rdctl	r2,ipending
 18003c8:	e0bfff15 	stw	r2,-4(fp)

  return active;
 18003cc:	e0bfff17 	ldw	r2,-4(fp)
 18003d0:	00000706 	br	18003f0 <alt_irq_handler+0xa8>
      }
      mask <<= 1;
 18003d4:	e0bffc17 	ldw	r2,-16(fp)
 18003d8:	1085883a 	add	r2,r2,r2
 18003dc:	e0bffc15 	stw	r2,-16(fp)
      i++;
 18003e0:	e0bffd17 	ldw	r2,-12(fp)
 18003e4:	10800044 	addi	r2,r2,1
 18003e8:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 18003ec:	003fe106 	br	1800374 <__alt_mem_mem_0+0xff7e0374>

    active = alt_irq_pending ();
 18003f0:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 18003f4:	e0bffb17 	ldw	r2,-20(fp)
 18003f8:	103fdb1e 	bne	r2,zero,1800368 <__alt_mem_mem_0+0xff7e0368>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 18003fc:	0001883a 	nop
 1800400:	e037883a 	mov	sp,fp
 1800404:	dfc00117 	ldw	ra,4(sp)
 1800408:	df000017 	ldw	fp,0(sp)
 180040c:	dec00204 	addi	sp,sp,8
 1800410:	f800283a 	ret

Disassembly of section .text:

01800414 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1800414:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 1800418:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 180041c:	06806134 	movhi	gp,388
    ori gp, gp, %lo(_gp)
 1800420:	d6b4f314 	ori	gp,gp,54220
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1800424:	00806134 	movhi	r2,388
    ori r2, r2, %lo(__bss_start)
 1800428:	109cb714 	ori	r2,r2,29404

    movhi r3, %hi(__bss_end)
 180042c:	00c061b4 	movhi	r3,390
    ori r3, r3, %lo(__bss_end)
 1800430:	18e85e14 	ori	r3,r3,41336

    beq r2, r3, 1f
 1800434:	10c00326 	beq	r2,r3,1800444 <_start+0x30>

0:
    stw zero, (r2)
 1800438:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 180043c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1800440:	10fffd36 	bltu	r2,r3,1800438 <__alt_mem_mem_0+0xff7e0438>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1800444:	18128140 	call	1812814 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1800448:	180d4340 	call	180d434 <alt_main>

0180044c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 180044c:	003fff06 	br	180044c <__alt_mem_mem_0+0xff7e044c>

01800450 <vApplicationMallocFailedHook>:

static int nw_ready;
static sys_thread_t main_thread_handle;

// hook functions
void vApplicationMallocFailedHook(){
 1800450:	defffe04 	addi	sp,sp,-8
 1800454:	dfc00115 	stw	ra,4(sp)
 1800458:	df000015 	stw	fp,0(sp)
 180045c:	d839883a 	mov	fp,sp
    for(;;){
        vTaskDelay(pdMS_TO_TICKS(1000));
 1800460:	0100fa04 	movi	r4,1000
 1800464:	180f10c0 	call	180f10c <vTaskDelay>
        alt_printf("vApplicationMallocFailedHook \r\n");
 1800468:	01006134 	movhi	r4,388
 180046c:	21013d04 	addi	r4,r4,1268
 1800470:	1812bfc0 	call	1812bfc <alt_printf>
    }
 1800474:	003ffa06 	br	1800460 <__alt_mem_mem_0+0xff7e0460>

01800478 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName ){
 1800478:	defffc04 	addi	sp,sp,-16
 180047c:	dfc00315 	stw	ra,12(sp)
 1800480:	df000215 	stw	fp,8(sp)
 1800484:	df000204 	addi	fp,sp,8
 1800488:	e13ffe15 	stw	r4,-8(fp)
 180048c:	e17fff15 	stw	r5,-4(fp)
    for(;;){
        vTaskDelay(pdMS_TO_TICKS(1000));
 1800490:	0100fa04 	movi	r4,1000
 1800494:	180f10c0 	call	180f10c <vTaskDelay>
        alt_printf("vApplicationStackOverflowHook \r\n");
 1800498:	01006134 	movhi	r4,388
 180049c:	21014504 	addi	r4,r4,1300
 18004a0:	1812bfc0 	call	1812bfc <alt_printf>
    }
 18004a4:	003ffa06 	br	1800490 <__alt_mem_mem_0+0xff7e0490>

018004a8 <StatusCallback>:
}

// callback function for when the DHCP subsystem acquires an IP address.
static void StatusCallback(struct netif* netif)
{
 18004a8:	deffbd04 	addi	sp,sp,-268
 18004ac:	dfc04215 	stw	ra,264(sp)
 18004b0:	df004115 	stw	fp,260(sp)
 18004b4:	df004104 	addi	fp,sp,260
 18004b8:	e13fff15 	stw	r4,-4(fp)
	// get IP and stuff
	printf("[ethernet] Acquired IP address via DHCP client for interface: %s\n", netif->name);
 18004bc:	e0bfff17 	ldw	r2,-4(fp)
 18004c0:	10800e84 	addi	r2,r2,58
 18004c4:	100b883a 	mov	r5,r2
 18004c8:	01006134 	movhi	r4,388
 18004cc:	21014e04 	addi	r4,r4,1336
 18004d0:	1800bd80 	call	1800bd8 <printf>

	char buf[255];

	print_ipad(netif->ip_addr.addr, buf);
 18004d4:	e0bfff17 	ldw	r2,-4(fp)
 18004d8:	10800117 	ldw	r2,4(r2)
 18004dc:	e17fbf04 	addi	r5,fp,-260
 18004e0:	1009883a 	mov	r4,r2
 18004e4:	1813be00 	call	1813be0 <print_ipad>
	printf("[ethernet] IP address : %s\n", buf);
 18004e8:	e17fbf04 	addi	r5,fp,-260
 18004ec:	01006134 	movhi	r4,388
 18004f0:	21015f04 	addi	r4,r4,1404
 18004f4:	1800bd80 	call	1800bd8 <printf>

	print_ipad(netif->netmask.addr, buf);
 18004f8:	e0bfff17 	ldw	r2,-4(fp)
 18004fc:	10800217 	ldw	r2,8(r2)
 1800500:	e17fbf04 	addi	r5,fp,-260
 1800504:	1009883a 	mov	r4,r2
 1800508:	1813be00 	call	1813be0 <print_ipad>
	printf("[ethernet] Subnet     : %s\n", buf);
 180050c:	e17fbf04 	addi	r5,fp,-260
 1800510:	01006134 	movhi	r4,388
 1800514:	21016604 	addi	r4,r4,1432
 1800518:	1800bd80 	call	1800bd8 <printf>

    print_ipad(netif->gw.addr, buf);
 180051c:	e0bfff17 	ldw	r2,-4(fp)
 1800520:	10800317 	ldw	r2,12(r2)
 1800524:	e17fbf04 	addi	r5,fp,-260
 1800528:	1009883a 	mov	r4,r2
 180052c:	1813be00 	call	1813be0 <print_ipad>
	printf("[ethernet] Gateway    : %s\n", buf);
 1800530:	e17fbf04 	addi	r5,fp,-260
 1800534:	01006134 	movhi	r4,388
 1800538:	21016d04 	addi	r4,r4,1460
 180053c:	1800bd80 	call	1800bd8 <printf>
}
 1800540:	0001883a 	nop
 1800544:	e037883a 	mov	sp,fp
 1800548:	dfc00117 	ldw	ra,4(sp)
 180054c:	df000017 	ldw	fp,0(sp)
 1800550:	dec00204 	addi	sp,sp,8
 1800554:	f800283a 	ret

01800558 <LinkCallback>:

static void LinkCallback(struct netif* netif)
{
 1800558:	defffd04 	addi	sp,sp,-12
 180055c:	dfc00215 	stw	ra,8(sp)
 1800560:	df000115 	stw	fp,4(sp)
 1800564:	df000104 	addi	fp,sp,4
 1800568:	e13fff15 	stw	r4,-4(fp)
	// link change callback
	// TODO release semaphore
	// TODO switch context

	alt_printf("[ethernet] Link Callback for interface: %s\n", netif->name);
 180056c:	e0bfff17 	ldw	r2,-4(fp)
 1800570:	10800e84 	addi	r2,r2,58
 1800574:	100b883a 	mov	r5,r2
 1800578:	01006134 	movhi	r4,388
 180057c:	21017404 	addi	r4,r4,1488
 1800580:	1812bfc0 	call	1812bfc <alt_printf>
}
 1800584:	0001883a 	nop
 1800588:	e037883a 	mov	sp,fp
 180058c:	dfc00117 	ldw	ra,4(sp)
 1800590:	df000017 	ldw	fp,0(sp)
 1800594:	dec00204 	addi	sp,sp,8
 1800598:	f800283a 	ret

0180059c <InitNetwork>:

int InitNetwork(void)
{
 180059c:	defffe04 	addi	sp,sp,-8
 18005a0:	dfc00115 	stw	ra,4(sp)
 18005a4:	df000015 	stw	fp,0(sp)
 18005a8:	d839883a 	mov	fp,sp
	// register new DHCP "IP attained" callback function.
	// if DHCP is acquired, ws_ipset will be called instead of dhc_main_ipset().
	lwip_set_status_callback(StatusCallback);
 18005ac:	01006034 	movhi	r4,384
 18005b0:	21012a04 	addi	r4,r4,1192
 18005b4:	18139b40 	call	18139b4 <lwip_set_status_callback>
	lwip_set_link_callback(LinkCallback);
 18005b8:	01006034 	movhi	r4,384
 18005bc:	21015604 	addi	r4,r4,1368
 18005c0:	18139e80 	call	18139e8 <lwip_set_link_callback>

	// Initialize LwIP TCP/IP stack.
	// This function is blocking till the the interface is up.
	lwip_initialize(1);
 18005c4:	01000044 	movi	r4,1
 18005c8:	18135040 	call	1813504 <lwip_initialize>

	return EXIT_SUCCESS;
 18005cc:	0005883a 	mov	r2,zero
}
 18005d0:	e037883a 	mov	sp,fp
 18005d4:	dfc00117 	ldw	ra,4(sp)
 18005d8:	df000017 	ldw	fp,0(sp)
 18005dc:	dec00204 	addi	sp,sp,8
 18005e0:	f800283a 	ret

018005e4 <WaitOnPHY>:

static int WaitOnPHY(void)
{
 18005e4:	defff904 	addi	sp,sp,-28
 18005e8:	dfc00615 	stw	ra,24(sp)
 18005ec:	df000515 	stw	fp,20(sp)
 18005f0:	df000504 	addi	fp,sp,20
	int phyadd;
	int phyid;
	int phyid2 = 0;
 18005f4:	e03ffd15 	stw	zero,-12(fp)

	np_tse_mac* pmac;
	bool bInitialized = false;
 18005f8:	e03fff05 	stb	zero,-4(fp)

	while (!bInitialized) {
 18005fc:	00003506 	br	18006d4 <WaitOnPHY+0xf0>
		alt_printf("[ethernet] PHY INFO: Interface: %d Waiting for PHY\n", 0);
 1800600:	000b883a 	mov	r5,zero
 1800604:	01006134 	movhi	r4,388
 1800608:	21017f04 	addi	r4,r4,1532
 180060c:	1812bfc0 	call	1812bfc <alt_printf>

		// initialize the structure necessary for "pmac" to function.
		pmac = (np_tse_mac*)TSE_MAC_0_BASE;
 1800610:	00880004 	movi	r2,8192
 1800614:	e0bffe15 	stw	r2,-8(fp)


		for (phyadd = 0x00; phyadd < 0xff; phyadd++) {
 1800618:	e03ffb15 	stw	zero,-20(fp)
 180061c:	00001a06 	br	1800688 <WaitOnPHY+0xa4>
			IOWR(&pmac->MDIO_ADDR0, 0, phyadd);
 1800620:	e0bffe17 	ldw	r2,-8(fp)
 1800624:	10800f04 	addi	r2,r2,60
 1800628:	e0fffb17 	ldw	r3,-20(fp)
 180062c:	10c00035 	stwio	r3,0(r2)

			phyid = IORD(&pmac->MDIO_IFACE.PHY_ID1, 0);
 1800630:	e0bffe17 	ldw	r2,-8(fp)
 1800634:	1080a204 	addi	r2,r2,648
 1800638:	10800037 	ldwio	r2,0(r2)
 180063c:	e0bffc15 	stw	r2,-16(fp)
			phyid2 = IORD(&pmac->MDIO_IFACE.PHY_ID2, 0);
 1800640:	e0bffe17 	ldw	r2,-8(fp)
 1800644:	1080a304 	addi	r2,r2,652
 1800648:	10800037 	ldwio	r2,0(r2)
 180064c:	e0bffd15 	stw	r2,-12(fp)

			if (phyid != phyid2) {
 1800650:	e0fffc17 	ldw	r3,-16(fp)
 1800654:	e0bffd17 	ldw	r2,-12(fp)
 1800658:	18800826 	beq	r3,r2,180067c <WaitOnPHY+0x98>
				alt_printf("[ethernet] PHY INFO: [PHY ID] 0x%x %x %x\n", phyadd, phyid, phyid2);
 180065c:	e1fffd17 	ldw	r7,-12(fp)
 1800660:	e1bffc17 	ldw	r6,-16(fp)
 1800664:	e17ffb17 	ldw	r5,-20(fp)
 1800668:	01006134 	movhi	r4,388
 180066c:	21018c04 	addi	r4,r4,1584
 1800670:	1812bfc0 	call	1812bfc <alt_printf>
				phyadd = 0xff;
 1800674:	00803fc4 	movi	r2,255
 1800678:	e0bffb15 	stw	r2,-20(fp)

		// initialize the structure necessary for "pmac" to function.
		pmac = (np_tse_mac*)TSE_MAC_0_BASE;


		for (phyadd = 0x00; phyadd < 0xff; phyadd++) {
 180067c:	e0bffb17 	ldw	r2,-20(fp)
 1800680:	10800044 	addi	r2,r2,1
 1800684:	e0bffb15 	stw	r2,-20(fp)
 1800688:	e0bffb17 	ldw	r2,-20(fp)
 180068c:	10803fd0 	cmplti	r2,r2,255
 1800690:	103fe31e 	bne	r2,zero,1800620 <__alt_mem_mem_0+0xff7e0620>
				alt_printf("[ethernet] PHY INFO: [PHY ID] 0x%x %x %x\n", phyadd, phyid, phyid2);
				phyadd = 0xff;
			}
		}

		if ((phyadd == 0xff) && (phyid == phyid2)) {
 1800694:	e0bffb17 	ldw	r2,-20(fp)
 1800698:	10803fd8 	cmpnei	r2,r2,255
 180069c:	10000b1e 	bne	r2,zero,18006cc <WaitOnPHY+0xe8>
 18006a0:	e0fffc17 	ldw	r3,-16(fp)
 18006a4:	e0bffd17 	ldw	r2,-12(fp)
 18006a8:	1880081e 	bne	r3,r2,18006cc <WaitOnPHY+0xe8>
			alt_printf("[ethernet] PHY INFO: No PHY found... restart detect\n");
 18006ac:	01006134 	movhi	r4,388
 18006b0:	21019704 	addi	r4,r4,1628
 18006b4:	1812bfc0 	call	1812bfc <alt_printf>
			bInitialized = true;
 18006b8:	00800044 	movi	r2,1
 18006bc:	e0bfff05 	stb	r2,-4(fp)
			mssleep(1000);
 18006c0:	0100fa04 	movi	r4,1000
 18006c4:	180f10c0 	call	180f10c <vTaskDelay>
 18006c8:	00000206 	br	18006d4 <WaitOnPHY+0xf0>
		}
		else
			bInitialized = true;
 18006cc:	00800044 	movi	r2,1
 18006d0:	e0bfff05 	stb	r2,-4(fp)
	int phyid2 = 0;

	np_tse_mac* pmac;
	bool bInitialized = false;

	while (!bInitialized) {
 18006d4:	e0bfff03 	ldbu	r2,-4(fp)
 18006d8:	1080005c 	xori	r2,r2,1
 18006dc:	10803fcc 	andi	r2,r2,255
 18006e0:	103fc71e 	bne	r2,zero,1800600 <__alt_mem_mem_0+0xff7e0600>
		else
			bInitialized = true;
	}

	// issue a PHY reset.
	IOWR(&pmac->MDIO_IFACE.CONTROL, 0, PCS_CTL_an_enable | PCS_CTL_sw_reset);
 18006e4:	e0bffe17 	ldw	r2,-8(fp)
 18006e8:	1080a004 	addi	r2,r2,640
 18006ec:	00e40014 	movui	r3,36864
 18006f0:	10c00035 	stwio	r3,0(r2)
	if (((IORD(&pmac->MDIO_IFACE.CONTROL, 0) & PCS_CTL_rx_slpbk) != 0) || ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0)) {
 18006f4:	e0bffe17 	ldw	r2,-8(fp)
 18006f8:	1080a004 	addi	r2,r2,640
 18006fc:	10800037 	ldwio	r2,0(r2)
 1800700:	1090000c 	andi	r2,r2,16384
 1800704:	1000051e 	bne	r2,zero,180071c <WaitOnPHY+0x138>
 1800708:	e0bffe17 	ldw	r2,-8(fp)
 180070c:	1080a104 	addi	r2,r2,644
 1800710:	10800037 	ldwio	r2,0(r2)
 1800714:	1080080c 	andi	r2,r2,32
 1800718:	1000071e 	bne	r2,zero,1800738 <WaitOnPHY+0x154>
		IOWR(&pmac->MDIO_IFACE.CONTROL, 0, PCS_CTL_an_enable | PCS_CTL_sw_reset);
 180071c:	e0bffe17 	ldw	r2,-8(fp)
 1800720:	1080a004 	addi	r2,r2,640
 1800724:	00e40014 	movui	r3,36864
 1800728:	10c00035 	stwio	r3,0(r2)
		alt_printf("[ethernet] PHY INFO: Issuing PHY Reset\n");
 180072c:	01006134 	movhi	r4,388
 1800730:	2101a504 	addi	r4,r4,1684
 1800734:	1812bfc0 	call	1812bfc <alt_printf>
	}

	// holding pattern until autonegotiation completes.
	if ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0) {
 1800738:	e0bffe17 	ldw	r2,-8(fp)
 180073c:	1080a104 	addi	r2,r2,644
 1800740:	10800037 	ldwio	r2,0(r2)
 1800744:	1080080c 	andi	r2,r2,32
 1800748:	1000101e 	bne	r2,zero,180078c <WaitOnPHY+0x1a8>
		alt_printf("[ethernet] PHY INFO: Waiting on PHY link...\n");
 180074c:	01006134 	movhi	r4,388
 1800750:	2101af04 	addi	r4,r4,1724
 1800754:	1812bfc0 	call	1812bfc <alt_printf>

		while ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0)
 1800758:	00000206 	br	1800764 <WaitOnPHY+0x180>
			mssleep(10);
 180075c:	01000284 	movi	r4,10
 1800760:	180f10c0 	call	180f10c <vTaskDelay>

	// holding pattern until autonegotiation completes.
	if ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0) {
		alt_printf("[ethernet] PHY INFO: Waiting on PHY link...\n");

		while ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0)
 1800764:	e0bffe17 	ldw	r2,-8(fp)
 1800768:	1080a104 	addi	r2,r2,644
 180076c:	10800037 	ldwio	r2,0(r2)
 1800770:	1080080c 	andi	r2,r2,32
 1800774:	103ff926 	beq	r2,zero,180075c <__alt_mem_mem_0+0xff7e075c>
			mssleep(10);

		alt_printf("[ethernet] PHY INFO: PHY link detected, allowing network to start.\n");
 1800778:	01006134 	movhi	r4,388
 180077c:	2101bb04 	addi	r4,r4,1772
 1800780:	1812bfc0 	call	1812bfc <alt_printf>
		
		mssleep(1000);
 1800784:	0100fa04 	movi	r4,1000
 1800788:	180f10c0 	call	180f10c <vTaskDelay>
	}

	mssleep(10);
 180078c:	01000284 	movi	r4,10
 1800790:	180f10c0 	call	180f10c <vTaskDelay>

	return 0;
 1800794:	0005883a 	mov	r2,zero
}
 1800798:	e037883a 	mov	sp,fp
 180079c:	dfc00117 	ldw	ra,4(sp)
 18007a0:	df000017 	ldw	fp,0(sp)
 18007a4:	dec00204 	addi	sp,sp,8
 18007a8:	f800283a 	ret

018007ac <xEthernetRun>:


void xEthernetRun()
{
 18007ac:	defffd04 	addi	sp,sp,-12
 18007b0:	dfc00215 	stw	ra,8(sp)
 18007b4:	df000115 	stw	fp,4(sp)
 18007b8:	df000104 	addi	fp,sp,4
    alt_printf("--------- Init Network ---------\r\n");
 18007bc:	01006134 	movhi	r4,388
 18007c0:	2101cc04 	addi	r4,r4,1840
 18007c4:	1812bfc0 	call	1812bfc <alt_printf>

	// initialize PHY
	WaitOnPHY();
 18007c8:	18005e40 	call	18005e4 <WaitOnPHY>

	if (InitNetwork() != EXIT_SUCCESS) {
 18007cc:	180059c0 	call	180059c <InitNetwork>
 18007d0:	10000326 	beq	r2,zero,18007e0 <xEthernetRun+0x34>
		// the network initialization has failed.
		alt_printf("[ethernet] Network initialize failed!\n");
 18007d4:	01006134 	movhi	r4,388
 18007d8:	2101d504 	addi	r4,r4,1876
 18007dc:	1812bfc0 	call	1812bfc <alt_printf>
	}

    nw_ready = 1;
 18007e0:	00800044 	movi	r2,1
 18007e4:	d0a7c415 	stw	r2,-24816(gp)
	alt_printf("--------- Init Done ---------\r\n");
 18007e8:	01006134 	movhi	r4,388
 18007ec:	2101df04 	addi	r4,r4,1916
 18007f0:	1812bfc0 	call	1812bfc <alt_printf>
    /*sys_thread_new("ping", PingThread, NULL,
    		THREAD_STACKSIZE,
            DEFAULT_THREAD_PRIO);*/

	struct netif* ethif;
	ethif = get_netif(0);
 18007f4:	0009883a 	mov	r4,zero
 18007f8:	181396c0 	call	181396c <get_netif>
 18007fc:	e0bfff15 	stw	r2,-4(fp)

	IP4_ADDR(&PingIp, 192, 168, 1, 100);
 1800800:	009900b4 	movhi	r2,25602
 1800804:	10aa3004 	addi	r2,r2,-22336
 1800808:	d0a7c615 	stw	r2,-24808(gp)
	while(1) {

        //lwip_ping_target(PingIp.addr, 1, 0, 100);
		// sleep for 1 second
		//lwip_ping_target(PingIp.addr, 10, 0, 100);
        ethernetif_input(ethif);
 180080c:	e13fff17 	ldw	r4,-4(fp)
 1800810:	18132580 	call	1813258 <ethernetif_input>
        vTaskDelay(10);
 1800814:	01000284 	movi	r4,10
 1800818:	180f10c0 	call	180f10c <vTaskDelay>
	}
 180081c:	003ffb06 	br	180080c <__alt_mem_mem_0+0xff7e080c>

01800820 <get_mac_addr>:
    //vTaskDelete(NULL);
}

// callback wrapper for lwip to get the interface configurations
int get_mac_addr(int iface, struct netif* ethif, unsigned char mac_addr[6])
{
 1800820:	defff704 	addi	sp,sp,-36
 1800824:	dfc00815 	stw	ra,32(sp)
 1800828:	df000715 	stw	fp,28(sp)
 180082c:	df000704 	addi	fp,sp,28
 1800830:	e13ffd15 	stw	r4,-12(fp)
 1800834:	e17ffe15 	stw	r5,-8(fp)
 1800838:	e1bfff15 	stw	r6,-4(fp)
	mac_addr[0] = 0x12;
 180083c:	e0bfff17 	ldw	r2,-4(fp)
 1800840:	00c00484 	movi	r3,18
 1800844:	10c00005 	stb	r3,0(r2)
	mac_addr[1] = 0x23;
 1800848:	e0bfff17 	ldw	r2,-4(fp)
 180084c:	10800044 	addi	r2,r2,1
 1800850:	00c008c4 	movi	r3,35
 1800854:	10c00005 	stb	r3,0(r2)
	mac_addr[2] = 0x45;
 1800858:	e0bfff17 	ldw	r2,-4(fp)
 180085c:	10800084 	addi	r2,r2,2
 1800860:	00c01144 	movi	r3,69
 1800864:	10c00005 	stb	r3,0(r2)
	mac_addr[3] = 0xFF;
 1800868:	e0bfff17 	ldw	r2,-4(fp)
 180086c:	108000c4 	addi	r2,r2,3
 1800870:	00ffffc4 	movi	r3,-1
 1800874:	10c00005 	stb	r3,0(r2)
	mac_addr[4] = 0xFF;
 1800878:	e0bfff17 	ldw	r2,-4(fp)
 180087c:	10800104 	addi	r2,r2,4
 1800880:	00ffffc4 	movi	r3,-1
 1800884:	10c00005 	stb	r3,0(r2)
	mac_addr[5] = 0xF0 + iface;
 1800888:	e0bfff17 	ldw	r2,-4(fp)
 180088c:	10800144 	addi	r2,r2,5
 1800890:	e0fffd17 	ldw	r3,-12(fp)
 1800894:	18fffc04 	addi	r3,r3,-16
 1800898:	10c00005 	stb	r3,0(r2)

	// only show info if net is not NULL
	if (ethif)
 180089c:	e0bffe17 	ldw	r2,-8(fp)
 18008a0:	10002026 	beq	r2,zero,1800924 <get_mac_addr+0x104>
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 18008a4:	e0bfff17 	ldw	r2,-4(fp)
 18008a8:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 18008ac:	12003fcc 	andi	r8,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 18008b0:	e0bfff17 	ldw	r2,-4(fp)
 18008b4:	10800044 	addi	r2,r2,1
 18008b8:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 18008bc:	11803fcc 	andi	r6,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 18008c0:	e0bfff17 	ldw	r2,-4(fp)
 18008c4:	10800084 	addi	r2,r2,2
 18008c8:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 18008cc:	11c03fcc 	andi	r7,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 18008d0:	e0bfff17 	ldw	r2,-4(fp)
 18008d4:	108000c4 	addi	r2,r2,3
 18008d8:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 18008dc:	10803fcc 	andi	r2,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 18008e0:	e0ffff17 	ldw	r3,-4(fp)
 18008e4:	18c00104 	addi	r3,r3,4
 18008e8:	18c00003 	ldbu	r3,0(r3)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 18008ec:	18c03fcc 	andi	r3,r3,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 18008f0:	e13fff17 	ldw	r4,-4(fp)
 18008f4:	21000144 	addi	r4,r4,5
 18008f8:	21000003 	ldbu	r4,0(r4)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 18008fc:	21003fcc 	andi	r4,r4,255
 1800900:	e17ffd17 	ldw	r5,-12(fp)
 1800904:	d9400315 	stw	r5,12(sp)
 1800908:	d9000215 	stw	r4,8(sp)
 180090c:	d8c00115 	stw	r3,4(sp)
 1800910:	d8800015 	stw	r2,0(sp)
 1800914:	400b883a 	mov	r5,r8
 1800918:	01006134 	movhi	r4,388
 180091c:	2101e704 	addi	r4,r4,1948
 1800920:	1800bd80 	call	1800bd8 <printf>
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);

	return EXIT_SUCCESS;
 1800924:	0005883a 	mov	r2,zero
}
 1800928:	e037883a 	mov	sp,fp
 180092c:	dfc00117 	ldw	ra,4(sp)
 1800930:	df000017 	ldw	fp,0(sp)
 1800934:	dec00204 	addi	sp,sp,8
 1800938:	f800283a 	ret

0180093c <get_ip_addr>:

// callback wrapper for lwip to get the IP configurations
int get_ip_addr(int iface, ip_addr_t* ipaddr, ip_addr_t* netmask, ip_addr_t* gw, int* use_dhcp)
{
 180093c:	deffba04 	addi	sp,sp,-280
 1800940:	dfc04515 	stw	ra,276(sp)
 1800944:	df004415 	stw	fp,272(sp)
 1800948:	df004404 	addi	fp,sp,272
 180094c:	e13ffc15 	stw	r4,-16(fp)
 1800950:	e17ffd15 	stw	r5,-12(fp)
 1800954:	e1bffe15 	stw	r6,-8(fp)
 1800958:	e1ffff15 	stw	r7,-4(fp)
	// set configuration
	IP4_ADDR(ipaddr, 192, 168, 1, 218);
 180095c:	e0fffd17 	ldw	r3,-12(fp)
 1800960:	00b680b4 	movhi	r2,55810
 1800964:	10aa3004 	addi	r2,r2,-22336
 1800968:	18800015 	stw	r2,0(r3)
	IP4_ADDR(netmask, 255, 255, 255, 0);
 180096c:	e0fffe17 	ldw	r3,-8(fp)
 1800970:	00804034 	movhi	r2,256
 1800974:	10bfffc4 	addi	r2,r2,-1
 1800978:	18800015 	stw	r2,0(r3)
	IP4_ADDR(gw, 192, 168, 1, 1);
 180097c:	e0ffff17 	ldw	r3,-4(fp)
 1800980:	008040b4 	movhi	r2,258
 1800984:	10aa3004 	addi	r2,r2,-22336
 1800988:	18800015 	stw	r2,0(r3)
	*use_dhcp = 0;
 180098c:	e0800217 	ldw	r2,8(fp)
 1800990:	10000015 	stw	zero,0(r2)

	if (*use_dhcp == 0){
 1800994:	e0800217 	ldw	r2,8(fp)
 1800998:	10800017 	ldw	r2,0(r2)
 180099c:	10000b1e 	bne	r2,zero,18009cc <get_ip_addr+0x90>
		char buf[255];
		print_ipad(ipaddr->addr, buf);
 18009a0:	e0bffd17 	ldw	r2,-12(fp)
 18009a4:	10800017 	ldw	r2,0(r2)
 18009a8:	e17fbc04 	addi	r5,fp,-272
 18009ac:	1009883a 	mov	r4,r2
 18009b0:	1813be00 	call	1813be0 <print_ipad>
		printf("[ethernet] Static IP Address for interface %d %s\n", iface, buf);
 18009b4:	e1bfbc04 	addi	r6,fp,-272
 18009b8:	e17ffc17 	ldw	r5,-16(fp)
 18009bc:	01006134 	movhi	r4,388
 18009c0:	2101fd04 	addi	r4,r4,2036
 18009c4:	1800bd80 	call	1800bd8 <printf>
 18009c8:	00000406 	br	18009dc <get_ip_addr+0xa0>
	}
	else
		printf("[ethernet] Starting get IP via DHCP for interface %d\n", iface);
 18009cc:	e17ffc17 	ldw	r5,-16(fp)
 18009d0:	01006134 	movhi	r4,388
 18009d4:	21020a04 	addi	r4,r4,2088
 18009d8:	1800bd80 	call	1800bd8 <printf>

	return EXIT_SUCCESS;
 18009dc:	0005883a 	mov	r2,zero
}
 18009e0:	e037883a 	mov	sp,fp
 18009e4:	dfc00117 	ldw	ra,4(sp)
 18009e8:	df000017 	ldw	fp,0(sp)
 18009ec:	dec00204 	addi	sp,sp,8
 18009f0:	f800283a 	ret

018009f4 <get_hostname>:

int get_hostname(int iface, const char **hostname)
{
 18009f4:	defffd04 	addi	sp,sp,-12
 18009f8:	df000215 	stw	fp,8(sp)
 18009fc:	df000204 	addi	fp,sp,8
 1800a00:	e13ffe15 	stw	r4,-8(fp)
 1800a04:	e17fff15 	stw	r5,-4(fp)
	*hostname = "LwIP";
 1800a08:	e0ffff17 	ldw	r3,-4(fp)
 1800a0c:	00806134 	movhi	r2,388
 1800a10:	10821804 	addi	r2,r2,2144
 1800a14:	18800015 	stw	r2,0(r3)

	return ERR_OK;
 1800a18:	0005883a 	mov	r2,zero
}
 1800a1c:	e037883a 	mov	sp,fp
 1800a20:	df000017 	ldw	fp,0(sp)
 1800a24:	dec00104 	addi	sp,sp,4
 1800a28:	f800283a 	ret

01800a2c <get_iface_name>:

int get_iface_name(int iface, char name[ETH_IFACE_NAME_LENGTH])
{
 1800a2c:	defffd04 	addi	sp,sp,-12
 1800a30:	df000215 	stw	fp,8(sp)
 1800a34:	df000204 	addi	fp,sp,8
 1800a38:	e13ffe15 	stw	r4,-8(fp)
 1800a3c:	e17fff15 	stw	r5,-4(fp)
	name[0] = 'e';
 1800a40:	e0bfff17 	ldw	r2,-4(fp)
 1800a44:	00c01944 	movi	r3,101
 1800a48:	10c00005 	stb	r3,0(r2)
	name[1] = (iface + 0x30);
 1800a4c:	e0bfff17 	ldw	r2,-4(fp)
 1800a50:	10800044 	addi	r2,r2,1
 1800a54:	e0fffe17 	ldw	r3,-8(fp)
 1800a58:	18c00c04 	addi	r3,r3,48
 1800a5c:	10c00005 	stb	r3,0(r2)

	return ERR_OK;
 1800a60:	0005883a 	mov	r2,zero
}
 1800a64:	e037883a 	mov	sp,fp
 1800a68:	df000017 	ldw	fp,0(sp)
 1800a6c:	dec00104 	addi	sp,sp,4
 1800a70:	f800283a 	ret

01800a74 <is_interface_active>:

int is_interface_active(int iface)
{
 1800a74:	defffe04 	addi	sp,sp,-8
 1800a78:	df000115 	stw	fp,4(sp)
 1800a7c:	df000104 	addi	fp,sp,4
 1800a80:	e13fff15 	stw	r4,-4(fp)
	return 1;
 1800a84:	00800044 	movi	r2,1
}
 1800a88:	e037883a 	mov	sp,fp
 1800a8c:	df000017 	ldw	fp,0(sp)
 1800a90:	dec00104 	addi	sp,sp,4
 1800a94:	f800283a 	ret

01800a98 <main>:


int main(){
 1800a98:	defffd04 	addi	sp,sp,-12
 1800a9c:	dfc00215 	stw	ra,8(sp)
 1800aa0:	df000115 	stw	fp,4(sp)
 1800aa4:	df000104 	addi	fp,sp,4
    main_thread_handle = sys_thread_new("main_thrd", (void(*)(void*))main_thread, 0,
 1800aa8:	008000c4 	movi	r2,3
 1800aac:	d8800015 	stw	r2,0(sp)
 1800ab0:	01c40004 	movi	r7,4096
 1800ab4:	000d883a 	mov	r6,zero
 1800ab8:	01406034 	movhi	r5,384
 1800abc:	2942b604 	addi	r5,r5,2776
 1800ac0:	01006134 	movhi	r4,388
 1800ac4:	21021a04 	addi	r4,r4,2152
 1800ac8:	18153540 	call	1815354 <sys_thread_new>
 1800acc:	d0a7c515 	stw	r2,-24812(gp)
                    THREAD_STACKSIZE,
					DEFAULT_THREAD_PRIO);
    vTaskStartScheduler();
 1800ad0:	180f7d40 	call	180f7d4 <vTaskStartScheduler>
    while(1);
 1800ad4:	003fff06 	br	1800ad4 <__alt_mem_mem_0+0xff7e0ad4>

01800ad8 <main_thread>:
    return 0;
}


int main_thread(){
 1800ad8:	defffc04 	addi	sp,sp,-16
 1800adc:	dfc00315 	stw	ra,12(sp)
 1800ae0:	df000215 	stw	fp,8(sp)
 1800ae4:	df000204 	addi	fp,sp,8
	alt_printf("------------------------------------------------------\r\n");
 1800ae8:	01006134 	movhi	r4,388
 1800aec:	21021d04 	addi	r4,r4,2164
 1800af0:	1812bfc0 	call	1812bfc <alt_printf>
	alt_printf("--------- Starting OPC UA Server application ---------\r\n");
 1800af4:	01006134 	movhi	r4,388
 1800af8:	21022c04 	addi	r4,r4,2224
 1800afc:	1812bfc0 	call	1812bfc <alt_printf>
	alt_printf("------------------------------------------------------\r\n");
 1800b00:	01006134 	movhi	r4,388
 1800b04:	21021d04 	addi	r4,r4,2164
 1800b08:	1812bfc0 	call	1812bfc <alt_printf>
	alt_printf("--------- open62541 example created for a    ---------\r\n");
 1800b0c:	01006134 	movhi	r4,388
 1800b10:	21023b04 	addi	r4,r4,2284
 1800b14:	1812bfc0 	call	1812bfc <alt_printf>
    alt_printf("--------- MicroBlaze design on a Artix7 FPGA ---------\r\n");
 1800b18:	01006134 	movhi	r4,388
 1800b1c:	21024a04 	addi	r4,r4,2344
 1800b20:	1812bfc0 	call	1812bfc <alt_printf>
    alt_printf("------------------------------------------------------\r\n");
 1800b24:	01006134 	movhi	r4,388
 1800b28:	21021d04 	addi	r4,r4,2164
 1800b2c:	1812bfc0 	call	1812bfc <alt_printf>
    alt_printf("--------- NetTImeLogic GmbH, Switzerland     ---------\r\n");
 1800b30:	01006134 	movhi	r4,388
 1800b34:	21025904 	addi	r4,r4,2404
 1800b38:	1812bfc0 	call	1812bfc <alt_printf>
    alt_printf("--------- contact@nettimelogic.com           ---------\r\n");
 1800b3c:	01006134 	movhi	r4,388
 1800b40:	21026804 	addi	r4,r4,2464
 1800b44:	1812bfc0 	call	1812bfc <alt_printf>
    alt_printf("------------------------------------------------------\r\n");
 1800b48:	01006134 	movhi	r4,388
 1800b4c:	21021d04 	addi	r4,r4,2164
 1800b50:	1812bfc0 	call	1812bfc <alt_printf>

	xTaskCreate(xEthernetRun, "eth0", KB(4), NULL, tskIDLE_PRIORITY + 2, NULL);
 1800b54:	d8000115 	stw	zero,4(sp)
 1800b58:	00800084 	movi	r2,2
 1800b5c:	d8800015 	stw	r2,0(sp)
 1800b60:	000f883a 	mov	r7,zero
 1800b64:	01840004 	movi	r6,4096
 1800b68:	01406134 	movhi	r5,388
 1800b6c:	29427704 	addi	r5,r5,2524
 1800b70:	01006034 	movhi	r4,384
 1800b74:	2101eb04 	addi	r4,r4,1964
 1800b78:	180eb680 	call	180eb68 <xTaskCreate>

	sys_thread_new("NetworkInit", xEthernetRun, NULL,
 1800b7c:	008000c4 	movi	r2,3
 1800b80:	d8800015 	stw	r2,0(sp)
 1800b84:	01c40004 	movi	r7,4096
 1800b88:	000d883a 	mov	r6,zero
 1800b8c:	01406034 	movhi	r5,384
 1800b90:	2941eb04 	addi	r5,r5,1964
 1800b94:	01006134 	movhi	r4,388
 1800b98:	21027904 	addi	r4,r4,2532
 1800b9c:	18153540 	call	1815354 <sys_thread_new>
    		THREAD_STACKSIZE,
            DEFAULT_THREAD_PRIO);



    vTaskStartScheduler();
 1800ba0:	180f7d40 	call	180f7d4 <vTaskStartScheduler>
    while(1);
 1800ba4:	003fff06 	br	1800ba4 <__alt_mem_mem_0+0xff7e0ba4>

01800ba8 <_printf_r>:
 1800ba8:	defffd04 	addi	sp,sp,-12
 1800bac:	2805883a 	mov	r2,r5
 1800bb0:	dfc00015 	stw	ra,0(sp)
 1800bb4:	d9800115 	stw	r6,4(sp)
 1800bb8:	d9c00215 	stw	r7,8(sp)
 1800bbc:	21400217 	ldw	r5,8(r4)
 1800bc0:	d9c00104 	addi	r7,sp,4
 1800bc4:	100d883a 	mov	r6,r2
 1800bc8:	1800c140 	call	1800c14 <___vfprintf_internal_r>
 1800bcc:	dfc00017 	ldw	ra,0(sp)
 1800bd0:	dec00304 	addi	sp,sp,12
 1800bd4:	f800283a 	ret

01800bd8 <printf>:
 1800bd8:	defffc04 	addi	sp,sp,-16
 1800bdc:	dfc00015 	stw	ra,0(sp)
 1800be0:	d9400115 	stw	r5,4(sp)
 1800be4:	d9800215 	stw	r6,8(sp)
 1800be8:	d9c00315 	stw	r7,12(sp)
 1800bec:	00806134 	movhi	r2,388
 1800bf0:	1094f404 	addi	r2,r2,21456
 1800bf4:	10800017 	ldw	r2,0(r2)
 1800bf8:	200b883a 	mov	r5,r4
 1800bfc:	d9800104 	addi	r6,sp,4
 1800c00:	11000217 	ldw	r4,8(r2)
 1800c04:	1802e0c0 	call	1802e0c <__vfprintf_internal>
 1800c08:	dfc00017 	ldw	ra,0(sp)
 1800c0c:	dec00404 	addi	sp,sp,16
 1800c10:	f800283a 	ret

01800c14 <___vfprintf_internal_r>:
 1800c14:	deffb804 	addi	sp,sp,-288
 1800c18:	dfc04715 	stw	ra,284(sp)
 1800c1c:	ddc04515 	stw	r23,276(sp)
 1800c20:	dd404315 	stw	r21,268(sp)
 1800c24:	d9002c15 	stw	r4,176(sp)
 1800c28:	282f883a 	mov	r23,r5
 1800c2c:	302b883a 	mov	r21,r6
 1800c30:	d9c02d15 	stw	r7,180(sp)
 1800c34:	df004615 	stw	fp,280(sp)
 1800c38:	dd804415 	stw	r22,272(sp)
 1800c3c:	dd004215 	stw	r20,264(sp)
 1800c40:	dcc04115 	stw	r19,260(sp)
 1800c44:	dc804015 	stw	r18,256(sp)
 1800c48:	dc403f15 	stw	r17,252(sp)
 1800c4c:	dc003e15 	stw	r16,248(sp)
 1800c50:	18055700 	call	1805570 <_localeconv_r>
 1800c54:	10800017 	ldw	r2,0(r2)
 1800c58:	1009883a 	mov	r4,r2
 1800c5c:	d8803415 	stw	r2,208(sp)
 1800c60:	18075980 	call	1807598 <strlen>
 1800c64:	d8803715 	stw	r2,220(sp)
 1800c68:	d8802c17 	ldw	r2,176(sp)
 1800c6c:	10000226 	beq	r2,zero,1800c78 <___vfprintf_internal_r+0x64>
 1800c70:	10800e17 	ldw	r2,56(r2)
 1800c74:	1000f926 	beq	r2,zero,180105c <___vfprintf_internal_r+0x448>
 1800c78:	b880030b 	ldhu	r2,12(r23)
 1800c7c:	10c8000c 	andi	r3,r2,8192
 1800c80:	1800061e 	bne	r3,zero,1800c9c <___vfprintf_internal_r+0x88>
 1800c84:	b9001917 	ldw	r4,100(r23)
 1800c88:	00f7ffc4 	movi	r3,-8193
 1800c8c:	10880014 	ori	r2,r2,8192
 1800c90:	20c6703a 	and	r3,r4,r3
 1800c94:	b880030d 	sth	r2,12(r23)
 1800c98:	b8c01915 	stw	r3,100(r23)
 1800c9c:	10c0020c 	andi	r3,r2,8
 1800ca0:	1800c126 	beq	r3,zero,1800fa8 <___vfprintf_internal_r+0x394>
 1800ca4:	b8c00417 	ldw	r3,16(r23)
 1800ca8:	1800bf26 	beq	r3,zero,1800fa8 <___vfprintf_internal_r+0x394>
 1800cac:	1080068c 	andi	r2,r2,26
 1800cb0:	00c00284 	movi	r3,10
 1800cb4:	10c0c426 	beq	r2,r3,1800fc8 <___vfprintf_internal_r+0x3b4>
 1800cb8:	d8c00404 	addi	r3,sp,16
 1800cbc:	05006134 	movhi	r20,388
 1800cc0:	d9001e04 	addi	r4,sp,120
 1800cc4:	a5028c84 	addi	r20,r20,2610
 1800cc8:	d8c01e15 	stw	r3,120(sp)
 1800ccc:	d8002015 	stw	zero,128(sp)
 1800cd0:	d8001f15 	stw	zero,124(sp)
 1800cd4:	d8003315 	stw	zero,204(sp)
 1800cd8:	d8003615 	stw	zero,216(sp)
 1800cdc:	d8003815 	stw	zero,224(sp)
 1800ce0:	1811883a 	mov	r8,r3
 1800ce4:	d8003915 	stw	zero,228(sp)
 1800ce8:	d8003a15 	stw	zero,232(sp)
 1800cec:	d8002f15 	stw	zero,188(sp)
 1800cf0:	d9002815 	stw	r4,160(sp)
 1800cf4:	a8800007 	ldb	r2,0(r21)
 1800cf8:	10027b26 	beq	r2,zero,18016e8 <___vfprintf_internal_r+0xad4>
 1800cfc:	00c00944 	movi	r3,37
 1800d00:	a821883a 	mov	r16,r21
 1800d04:	10c0021e 	bne	r2,r3,1800d10 <___vfprintf_internal_r+0xfc>
 1800d08:	00001406 	br	1800d5c <___vfprintf_internal_r+0x148>
 1800d0c:	10c00326 	beq	r2,r3,1800d1c <___vfprintf_internal_r+0x108>
 1800d10:	84000044 	addi	r16,r16,1
 1800d14:	80800007 	ldb	r2,0(r16)
 1800d18:	103ffc1e 	bne	r2,zero,1800d0c <__alt_mem_mem_0+0xff7e0d0c>
 1800d1c:	8563c83a 	sub	r17,r16,r21
 1800d20:	88000e26 	beq	r17,zero,1800d5c <___vfprintf_internal_r+0x148>
 1800d24:	d8c02017 	ldw	r3,128(sp)
 1800d28:	d8801f17 	ldw	r2,124(sp)
 1800d2c:	45400015 	stw	r21,0(r8)
 1800d30:	1c47883a 	add	r3,r3,r17
 1800d34:	10800044 	addi	r2,r2,1
 1800d38:	d8c02015 	stw	r3,128(sp)
 1800d3c:	44400115 	stw	r17,4(r8)
 1800d40:	d8801f15 	stw	r2,124(sp)
 1800d44:	00c001c4 	movi	r3,7
 1800d48:	1880a716 	blt	r3,r2,1800fe8 <___vfprintf_internal_r+0x3d4>
 1800d4c:	42000204 	addi	r8,r8,8
 1800d50:	d9402f17 	ldw	r5,188(sp)
 1800d54:	2c4b883a 	add	r5,r5,r17
 1800d58:	d9402f15 	stw	r5,188(sp)
 1800d5c:	80800007 	ldb	r2,0(r16)
 1800d60:	1000a826 	beq	r2,zero,1801004 <___vfprintf_internal_r+0x3f0>
 1800d64:	84400047 	ldb	r17,1(r16)
 1800d68:	00bfffc4 	movi	r2,-1
 1800d6c:	85400044 	addi	r21,r16,1
 1800d70:	d8002785 	stb	zero,158(sp)
 1800d74:	0007883a 	mov	r3,zero
 1800d78:	000f883a 	mov	r7,zero
 1800d7c:	d8802915 	stw	r2,164(sp)
 1800d80:	d8003115 	stw	zero,196(sp)
 1800d84:	0025883a 	mov	r18,zero
 1800d88:	01401604 	movi	r5,88
 1800d8c:	01800244 	movi	r6,9
 1800d90:	02800a84 	movi	r10,42
 1800d94:	02401b04 	movi	r9,108
 1800d98:	ad400044 	addi	r21,r21,1
 1800d9c:	88bff804 	addi	r2,r17,-32
 1800da0:	28830436 	bltu	r5,r2,18019b4 <___vfprintf_internal_r+0xda0>
 1800da4:	100490ba 	slli	r2,r2,2
 1800da8:	01006034 	movhi	r4,384
 1800dac:	21036f04 	addi	r4,r4,3516
 1800db0:	1105883a 	add	r2,r2,r4
 1800db4:	10800017 	ldw	r2,0(r2)
 1800db8:	1000683a 	jmp	r2
 1800dbc:	018018d4 	movui	r6,99
 1800dc0:	018019b4 	movhi	r6,102
 1800dc4:	018019b4 	movhi	r6,102
 1800dc8:	018018f4 	movhi	r6,99
 1800dcc:	018019b4 	movhi	r6,102
 1800dd0:	018019b4 	movhi	r6,102
 1800dd4:	018019b4 	movhi	r6,102
 1800dd8:	018019b4 	movhi	r6,102
 1800ddc:	018019b4 	movhi	r6,102
 1800de0:	018019b4 	movhi	r6,102
 1800de4:	01801068 	cmpgeui	r6,zero,65
 1800de8:	01801810 	cmplti	r6,zero,96
 1800dec:	018019b4 	movhi	r6,102
 1800df0:	01800f30 	cmpltui	r6,zero,60
 1800df4:	01801090 	cmplti	r6,zero,66
 1800df8:	018019b4 	movhi	r6,102
 1800dfc:	018010d0 	cmplti	r6,zero,67
 1800e00:	018010dc 	xori	r6,zero,67
 1800e04:	018010dc 	xori	r6,zero,67
 1800e08:	018010dc 	xori	r6,zero,67
 1800e0c:	018010dc 	xori	r6,zero,67
 1800e10:	018010dc 	xori	r6,zero,67
 1800e14:	018010dc 	xori	r6,zero,67
 1800e18:	018010dc 	xori	r6,zero,67
 1800e1c:	018010dc 	xori	r6,zero,67
 1800e20:	018010dc 	xori	r6,zero,67
 1800e24:	018019b4 	movhi	r6,102
 1800e28:	018019b4 	movhi	r6,102
 1800e2c:	018019b4 	movhi	r6,102
 1800e30:	018019b4 	movhi	r6,102
 1800e34:	018019b4 	movhi	r6,102
 1800e38:	018019b4 	movhi	r6,102
 1800e3c:	018019b4 	movhi	r6,102
 1800e40:	018019b4 	movhi	r6,102
 1800e44:	018019b4 	movhi	r6,102
 1800e48:	018019b4 	movhi	r6,102
 1800e4c:	01801110 	cmplti	r6,zero,68
 1800e50:	018011cc 	andi	r6,zero,71
 1800e54:	018019b4 	movhi	r6,102
 1800e58:	018011cc 	andi	r6,zero,71
 1800e5c:	018019b4 	movhi	r6,102
 1800e60:	018019b4 	movhi	r6,102
 1800e64:	018019b4 	movhi	r6,102
 1800e68:	018019b4 	movhi	r6,102
 1800e6c:	0180126c 	andhi	r6,zero,73
 1800e70:	018019b4 	movhi	r6,102
 1800e74:	018019b4 	movhi	r6,102
 1800e78:	01801278 	rdprs	r6,zero,73
 1800e7c:	018019b4 	movhi	r6,102
 1800e80:	018019b4 	movhi	r6,102
 1800e84:	018019b4 	movhi	r6,102
 1800e88:	018019b4 	movhi	r6,102
 1800e8c:	018019b4 	movhi	r6,102
 1800e90:	018016f0 	cmpltui	r6,zero,91
 1800e94:	018019b4 	movhi	r6,102
 1800e98:	018019b4 	movhi	r6,102
 1800e9c:	01801750 	cmplti	r6,zero,93
 1800ea0:	018019b4 	movhi	r6,102
 1800ea4:	018019b4 	movhi	r6,102
 1800ea8:	018019b4 	movhi	r6,102
 1800eac:	018019b4 	movhi	r6,102
 1800eb0:	018019b4 	movhi	r6,102
 1800eb4:	018019b4 	movhi	r6,102
 1800eb8:	018019b4 	movhi	r6,102
 1800ebc:	018019b4 	movhi	r6,102
 1800ec0:	018019b4 	movhi	r6,102
 1800ec4:	018019b4 	movhi	r6,102
 1800ec8:	01801960 	cmpeqi	r6,zero,101
 1800ecc:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800ed0:	018011cc 	andi	r6,zero,71
 1800ed4:	018011cc 	andi	r6,zero,71
 1800ed8:	018011cc 	andi	r6,zero,71
 1800edc:	01801910 	cmplti	r6,zero,100
 1800ee0:	01801900 	call	180190 <__alt_mem_tse_descriptor_memory_0+0x180190>
 1800ee4:	018019b4 	movhi	r6,102
 1800ee8:	018019b4 	movhi	r6,102
 1800eec:	0180191c 	xori	r6,zero,100
 1800ef0:	018019b4 	movhi	r6,102
 1800ef4:	0180192c 	andhi	r6,zero,100
 1800ef8:	01801800 	call	180180 <__alt_mem_tse_descriptor_memory_0+0x180180>
 1800efc:	01800f3c 	xorhi	r6,zero,60
 1800f00:	01801820 	cmpeqi	r6,zero,96
 1800f04:	018019b4 	movhi	r6,102
 1800f08:	0180182c 	andhi	r6,zero,96
 1800f0c:	018019b4 	movhi	r6,102
 1800f10:	01801888 	cmpgei	r6,zero,98
 1800f14:	018019b4 	movhi	r6,102
 1800f18:	018019b4 	movhi	r6,102
 1800f1c:	01801898 	cmpnei	r6,zero,98
 1800f20:	d9003117 	ldw	r4,196(sp)
 1800f24:	d8802d15 	stw	r2,180(sp)
 1800f28:	0109c83a 	sub	r4,zero,r4
 1800f2c:	d9003115 	stw	r4,196(sp)
 1800f30:	94800114 	ori	r18,r18,4
 1800f34:	ac400007 	ldb	r17,0(r21)
 1800f38:	003f9706 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 1800f3c:	00800c04 	movi	r2,48
 1800f40:	d9002d17 	ldw	r4,180(sp)
 1800f44:	d9402917 	ldw	r5,164(sp)
 1800f48:	d8802705 	stb	r2,156(sp)
 1800f4c:	00801e04 	movi	r2,120
 1800f50:	d8802745 	stb	r2,157(sp)
 1800f54:	d8002785 	stb	zero,158(sp)
 1800f58:	20c00104 	addi	r3,r4,4
 1800f5c:	24c00017 	ldw	r19,0(r4)
 1800f60:	002d883a 	mov	r22,zero
 1800f64:	90800094 	ori	r2,r18,2
 1800f68:	28029a16 	blt	r5,zero,18019d4 <___vfprintf_internal_r+0xdc0>
 1800f6c:	00bfdfc4 	movi	r2,-129
 1800f70:	90a4703a 	and	r18,r18,r2
 1800f74:	d8c02d15 	stw	r3,180(sp)
 1800f78:	94800094 	ori	r18,r18,2
 1800f7c:	9802871e 	bne	r19,zero,180199c <___vfprintf_internal_r+0xd88>
 1800f80:	00806134 	movhi	r2,388
 1800f84:	10828504 	addi	r2,r2,2580
 1800f88:	d8803915 	stw	r2,228(sp)
 1800f8c:	04401e04 	movi	r17,120
 1800f90:	d8802917 	ldw	r2,164(sp)
 1800f94:	0039883a 	mov	fp,zero
 1800f98:	1001e926 	beq	r2,zero,1801740 <___vfprintf_internal_r+0xb2c>
 1800f9c:	0027883a 	mov	r19,zero
 1800fa0:	002d883a 	mov	r22,zero
 1800fa4:	00020506 	br	18017bc <___vfprintf_internal_r+0xba8>
 1800fa8:	d9002c17 	ldw	r4,176(sp)
 1800fac:	b80b883a 	mov	r5,r23
 1800fb0:	1802ee40 	call	1802ee4 <__swsetup_r>
 1800fb4:	1005ac1e 	bne	r2,zero,1802668 <___vfprintf_internal_r+0x1a54>
 1800fb8:	b880030b 	ldhu	r2,12(r23)
 1800fbc:	00c00284 	movi	r3,10
 1800fc0:	1080068c 	andi	r2,r2,26
 1800fc4:	10ff3c1e 	bne	r2,r3,1800cb8 <__alt_mem_mem_0+0xff7e0cb8>
 1800fc8:	b880038f 	ldh	r2,14(r23)
 1800fcc:	103f3a16 	blt	r2,zero,1800cb8 <__alt_mem_mem_0+0xff7e0cb8>
 1800fd0:	d9c02d17 	ldw	r7,180(sp)
 1800fd4:	d9002c17 	ldw	r4,176(sp)
 1800fd8:	a80d883a 	mov	r6,r21
 1800fdc:	b80b883a 	mov	r5,r23
 1800fe0:	1802e280 	call	1802e28 <__sbprintf>
 1800fe4:	00001106 	br	180102c <___vfprintf_internal_r+0x418>
 1800fe8:	d9002c17 	ldw	r4,176(sp)
 1800fec:	d9801e04 	addi	r6,sp,120
 1800ff0:	b80b883a 	mov	r5,r23
 1800ff4:	180772c0 	call	180772c <__sprint_r>
 1800ff8:	1000081e 	bne	r2,zero,180101c <___vfprintf_internal_r+0x408>
 1800ffc:	da000404 	addi	r8,sp,16
 1801000:	003f5306 	br	1800d50 <__alt_mem_mem_0+0xff7e0d50>
 1801004:	d8802017 	ldw	r2,128(sp)
 1801008:	10000426 	beq	r2,zero,180101c <___vfprintf_internal_r+0x408>
 180100c:	d9002c17 	ldw	r4,176(sp)
 1801010:	d9801e04 	addi	r6,sp,120
 1801014:	b80b883a 	mov	r5,r23
 1801018:	180772c0 	call	180772c <__sprint_r>
 180101c:	b880030b 	ldhu	r2,12(r23)
 1801020:	1080100c 	andi	r2,r2,64
 1801024:	1005901e 	bne	r2,zero,1802668 <___vfprintf_internal_r+0x1a54>
 1801028:	d8802f17 	ldw	r2,188(sp)
 180102c:	dfc04717 	ldw	ra,284(sp)
 1801030:	df004617 	ldw	fp,280(sp)
 1801034:	ddc04517 	ldw	r23,276(sp)
 1801038:	dd804417 	ldw	r22,272(sp)
 180103c:	dd404317 	ldw	r21,268(sp)
 1801040:	dd004217 	ldw	r20,264(sp)
 1801044:	dcc04117 	ldw	r19,260(sp)
 1801048:	dc804017 	ldw	r18,256(sp)
 180104c:	dc403f17 	ldw	r17,252(sp)
 1801050:	dc003e17 	ldw	r16,248(sp)
 1801054:	dec04804 	addi	sp,sp,288
 1801058:	f800283a 	ret
 180105c:	d9002c17 	ldw	r4,176(sp)
 1801060:	1804eb80 	call	1804eb8 <__sinit>
 1801064:	003f0406 	br	1800c78 <__alt_mem_mem_0+0xff7e0c78>
 1801068:	d8802d17 	ldw	r2,180(sp)
 180106c:	d9002d17 	ldw	r4,180(sp)
 1801070:	10800017 	ldw	r2,0(r2)
 1801074:	d8803115 	stw	r2,196(sp)
 1801078:	20800104 	addi	r2,r4,4
 180107c:	d9003117 	ldw	r4,196(sp)
 1801080:	203fa716 	blt	r4,zero,1800f20 <__alt_mem_mem_0+0xff7e0f20>
 1801084:	d8802d15 	stw	r2,180(sp)
 1801088:	ac400007 	ldb	r17,0(r21)
 180108c:	003f4206 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 1801090:	ac400007 	ldb	r17,0(r21)
 1801094:	aac00044 	addi	r11,r21,1
 1801098:	8a872826 	beq	r17,r10,1802d3c <___vfprintf_internal_r+0x2128>
 180109c:	88bff404 	addi	r2,r17,-48
 18010a0:	0009883a 	mov	r4,zero
 18010a4:	30867d36 	bltu	r6,r2,1802a9c <___vfprintf_internal_r+0x1e88>
 18010a8:	5c400007 	ldb	r17,0(r11)
 18010ac:	210002a4 	muli	r4,r4,10
 18010b0:	5d400044 	addi	r21,r11,1
 18010b4:	a817883a 	mov	r11,r21
 18010b8:	2089883a 	add	r4,r4,r2
 18010bc:	88bff404 	addi	r2,r17,-48
 18010c0:	30bff92e 	bgeu	r6,r2,18010a8 <__alt_mem_mem_0+0xff7e10a8>
 18010c4:	2005c916 	blt	r4,zero,18027ec <___vfprintf_internal_r+0x1bd8>
 18010c8:	d9002915 	stw	r4,164(sp)
 18010cc:	003f3306 	br	1800d9c <__alt_mem_mem_0+0xff7e0d9c>
 18010d0:	94802014 	ori	r18,r18,128
 18010d4:	ac400007 	ldb	r17,0(r21)
 18010d8:	003f2f06 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 18010dc:	a809883a 	mov	r4,r21
 18010e0:	d8003115 	stw	zero,196(sp)
 18010e4:	88bff404 	addi	r2,r17,-48
 18010e8:	0017883a 	mov	r11,zero
 18010ec:	24400007 	ldb	r17,0(r4)
 18010f0:	5ac002a4 	muli	r11,r11,10
 18010f4:	ad400044 	addi	r21,r21,1
 18010f8:	a809883a 	mov	r4,r21
 18010fc:	12d7883a 	add	r11,r2,r11
 1801100:	88bff404 	addi	r2,r17,-48
 1801104:	30bff92e 	bgeu	r6,r2,18010ec <__alt_mem_mem_0+0xff7e10ec>
 1801108:	dac03115 	stw	r11,196(sp)
 180110c:	003f2306 	br	1800d9c <__alt_mem_mem_0+0xff7e0d9c>
 1801110:	18c03fcc 	andi	r3,r3,255
 1801114:	18072b1e 	bne	r3,zero,1802dc4 <___vfprintf_internal_r+0x21b0>
 1801118:	94800414 	ori	r18,r18,16
 180111c:	9080080c 	andi	r2,r18,32
 1801120:	10037b26 	beq	r2,zero,1801f10 <___vfprintf_internal_r+0x12fc>
 1801124:	d9402d17 	ldw	r5,180(sp)
 1801128:	28800117 	ldw	r2,4(r5)
 180112c:	2cc00017 	ldw	r19,0(r5)
 1801130:	29400204 	addi	r5,r5,8
 1801134:	d9402d15 	stw	r5,180(sp)
 1801138:	102d883a 	mov	r22,r2
 180113c:	10044b16 	blt	r2,zero,180226c <___vfprintf_internal_r+0x1658>
 1801140:	d9402917 	ldw	r5,164(sp)
 1801144:	df002783 	ldbu	fp,158(sp)
 1801148:	2803bc16 	blt	r5,zero,180203c <___vfprintf_internal_r+0x1428>
 180114c:	00ffdfc4 	movi	r3,-129
 1801150:	9d84b03a 	or	r2,r19,r22
 1801154:	90e4703a 	and	r18,r18,r3
 1801158:	10017726 	beq	r2,zero,1801738 <___vfprintf_internal_r+0xb24>
 180115c:	b0038326 	beq	r22,zero,1801f6c <___vfprintf_internal_r+0x1358>
 1801160:	dc402a15 	stw	r17,168(sp)
 1801164:	dc001e04 	addi	r16,sp,120
 1801168:	b023883a 	mov	r17,r22
 180116c:	402d883a 	mov	r22,r8
 1801170:	9809883a 	mov	r4,r19
 1801174:	880b883a 	mov	r5,r17
 1801178:	01800284 	movi	r6,10
 180117c:	000f883a 	mov	r7,zero
 1801180:	180a6a00 	call	180a6a0 <__umoddi3>
 1801184:	10800c04 	addi	r2,r2,48
 1801188:	843fffc4 	addi	r16,r16,-1
 180118c:	9809883a 	mov	r4,r19
 1801190:	880b883a 	mov	r5,r17
 1801194:	80800005 	stb	r2,0(r16)
 1801198:	01800284 	movi	r6,10
 180119c:	000f883a 	mov	r7,zero
 18011a0:	180a1280 	call	180a128 <__udivdi3>
 18011a4:	1027883a 	mov	r19,r2
 18011a8:	10c4b03a 	or	r2,r2,r3
 18011ac:	1823883a 	mov	r17,r3
 18011b0:	103fef1e 	bne	r2,zero,1801170 <__alt_mem_mem_0+0xff7e1170>
 18011b4:	d8c02817 	ldw	r3,160(sp)
 18011b8:	dc402a17 	ldw	r17,168(sp)
 18011bc:	b011883a 	mov	r8,r22
 18011c0:	1c07c83a 	sub	r3,r3,r16
 18011c4:	d8c02e15 	stw	r3,184(sp)
 18011c8:	00005906 	br	1801330 <___vfprintf_internal_r+0x71c>
 18011cc:	18c03fcc 	andi	r3,r3,255
 18011d0:	1806fa1e 	bne	r3,zero,1802dbc <___vfprintf_internal_r+0x21a8>
 18011d4:	9080020c 	andi	r2,r18,8
 18011d8:	10048a26 	beq	r2,zero,1802404 <___vfprintf_internal_r+0x17f0>
 18011dc:	d8c02d17 	ldw	r3,180(sp)
 18011e0:	d9002d17 	ldw	r4,180(sp)
 18011e4:	d9402d17 	ldw	r5,180(sp)
 18011e8:	18c00017 	ldw	r3,0(r3)
 18011ec:	21000117 	ldw	r4,4(r4)
 18011f0:	29400204 	addi	r5,r5,8
 18011f4:	d8c03615 	stw	r3,216(sp)
 18011f8:	d9003815 	stw	r4,224(sp)
 18011fc:	d9402d15 	stw	r5,180(sp)
 1801200:	d9003617 	ldw	r4,216(sp)
 1801204:	d9403817 	ldw	r5,224(sp)
 1801208:	da003d15 	stw	r8,244(sp)
 180120c:	04000044 	movi	r16,1
 1801210:	18072b80 	call	18072b8 <__fpclassifyd>
 1801214:	da003d17 	ldw	r8,244(sp)
 1801218:	14041f1e 	bne	r2,r16,1802298 <___vfprintf_internal_r+0x1684>
 180121c:	d9003617 	ldw	r4,216(sp)
 1801220:	d9403817 	ldw	r5,224(sp)
 1801224:	000d883a 	mov	r6,zero
 1801228:	000f883a 	mov	r7,zero
 180122c:	180c0840 	call	180c084 <__ledf2>
 1801230:	da003d17 	ldw	r8,244(sp)
 1801234:	1005be16 	blt	r2,zero,1802930 <___vfprintf_internal_r+0x1d1c>
 1801238:	df002783 	ldbu	fp,158(sp)
 180123c:	008011c4 	movi	r2,71
 1801240:	1445330e 	bge	r2,r17,1802710 <___vfprintf_internal_r+0x1afc>
 1801244:	04006134 	movhi	r16,388
 1801248:	84027d04 	addi	r16,r16,2548
 180124c:	00c000c4 	movi	r3,3
 1801250:	00bfdfc4 	movi	r2,-129
 1801254:	d8c02a15 	stw	r3,168(sp)
 1801258:	90a4703a 	and	r18,r18,r2
 180125c:	d8c02e15 	stw	r3,184(sp)
 1801260:	d8002915 	stw	zero,164(sp)
 1801264:	d8003215 	stw	zero,200(sp)
 1801268:	00003706 	br	1801348 <___vfprintf_internal_r+0x734>
 180126c:	94800214 	ori	r18,r18,8
 1801270:	ac400007 	ldb	r17,0(r21)
 1801274:	003ec806 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 1801278:	18c03fcc 	andi	r3,r3,255
 180127c:	1806db1e 	bne	r3,zero,1802dec <___vfprintf_internal_r+0x21d8>
 1801280:	94800414 	ori	r18,r18,16
 1801284:	9080080c 	andi	r2,r18,32
 1801288:	1002d826 	beq	r2,zero,1801dec <___vfprintf_internal_r+0x11d8>
 180128c:	d9402d17 	ldw	r5,180(sp)
 1801290:	d8c02917 	ldw	r3,164(sp)
 1801294:	d8002785 	stb	zero,158(sp)
 1801298:	28800204 	addi	r2,r5,8
 180129c:	2cc00017 	ldw	r19,0(r5)
 18012a0:	2d800117 	ldw	r22,4(r5)
 18012a4:	18048f16 	blt	r3,zero,18024e4 <___vfprintf_internal_r+0x18d0>
 18012a8:	013fdfc4 	movi	r4,-129
 18012ac:	9d86b03a 	or	r3,r19,r22
 18012b0:	d8802d15 	stw	r2,180(sp)
 18012b4:	9124703a 	and	r18,r18,r4
 18012b8:	1802d91e 	bne	r3,zero,1801e20 <___vfprintf_internal_r+0x120c>
 18012bc:	d8c02917 	ldw	r3,164(sp)
 18012c0:	0039883a 	mov	fp,zero
 18012c4:	1805c326 	beq	r3,zero,18029d4 <___vfprintf_internal_r+0x1dc0>
 18012c8:	0027883a 	mov	r19,zero
 18012cc:	002d883a 	mov	r22,zero
 18012d0:	dc001e04 	addi	r16,sp,120
 18012d4:	9806d0fa 	srli	r3,r19,3
 18012d8:	b008977a 	slli	r4,r22,29
 18012dc:	b02cd0fa 	srli	r22,r22,3
 18012e0:	9cc001cc 	andi	r19,r19,7
 18012e4:	98800c04 	addi	r2,r19,48
 18012e8:	843fffc4 	addi	r16,r16,-1
 18012ec:	20e6b03a 	or	r19,r4,r3
 18012f0:	80800005 	stb	r2,0(r16)
 18012f4:	9d86b03a 	or	r3,r19,r22
 18012f8:	183ff61e 	bne	r3,zero,18012d4 <__alt_mem_mem_0+0xff7e12d4>
 18012fc:	90c0004c 	andi	r3,r18,1
 1801300:	18013b26 	beq	r3,zero,18017f0 <___vfprintf_internal_r+0xbdc>
 1801304:	10803fcc 	andi	r2,r2,255
 1801308:	1080201c 	xori	r2,r2,128
 180130c:	10bfe004 	addi	r2,r2,-128
 1801310:	00c00c04 	movi	r3,48
 1801314:	10c13626 	beq	r2,r3,18017f0 <___vfprintf_internal_r+0xbdc>
 1801318:	80ffffc5 	stb	r3,-1(r16)
 180131c:	d8c02817 	ldw	r3,160(sp)
 1801320:	80bfffc4 	addi	r2,r16,-1
 1801324:	1021883a 	mov	r16,r2
 1801328:	1887c83a 	sub	r3,r3,r2
 180132c:	d8c02e15 	stw	r3,184(sp)
 1801330:	d8802e17 	ldw	r2,184(sp)
 1801334:	d9002917 	ldw	r4,164(sp)
 1801338:	1100010e 	bge	r2,r4,1801340 <___vfprintf_internal_r+0x72c>
 180133c:	2005883a 	mov	r2,r4
 1801340:	d8802a15 	stw	r2,168(sp)
 1801344:	d8003215 	stw	zero,200(sp)
 1801348:	e7003fcc 	andi	fp,fp,255
 180134c:	e700201c 	xori	fp,fp,128
 1801350:	e73fe004 	addi	fp,fp,-128
 1801354:	e0000326 	beq	fp,zero,1801364 <___vfprintf_internal_r+0x750>
 1801358:	d8c02a17 	ldw	r3,168(sp)
 180135c:	18c00044 	addi	r3,r3,1
 1801360:	d8c02a15 	stw	r3,168(sp)
 1801364:	90c0008c 	andi	r3,r18,2
 1801368:	d8c02b15 	stw	r3,172(sp)
 180136c:	18000326 	beq	r3,zero,180137c <___vfprintf_internal_r+0x768>
 1801370:	d8c02a17 	ldw	r3,168(sp)
 1801374:	18c00084 	addi	r3,r3,2
 1801378:	d8c02a15 	stw	r3,168(sp)
 180137c:	90c0210c 	andi	r3,r18,132
 1801380:	d8c03015 	stw	r3,192(sp)
 1801384:	1801a31e 	bne	r3,zero,1801a14 <___vfprintf_internal_r+0xe00>
 1801388:	d9003117 	ldw	r4,196(sp)
 180138c:	d8c02a17 	ldw	r3,168(sp)
 1801390:	20e7c83a 	sub	r19,r4,r3
 1801394:	04c19f0e 	bge	zero,r19,1801a14 <___vfprintf_internal_r+0xe00>
 1801398:	02400404 	movi	r9,16
 180139c:	d8c02017 	ldw	r3,128(sp)
 18013a0:	d8801f17 	ldw	r2,124(sp)
 18013a4:	4cc50d0e 	bge	r9,r19,18027dc <___vfprintf_internal_r+0x1bc8>
 18013a8:	01406134 	movhi	r5,388
 18013ac:	29429084 	addi	r5,r5,2626
 18013b0:	dc403b15 	stw	r17,236(sp)
 18013b4:	d9403515 	stw	r5,212(sp)
 18013b8:	9823883a 	mov	r17,r19
 18013bc:	482d883a 	mov	r22,r9
 18013c0:	9027883a 	mov	r19,r18
 18013c4:	070001c4 	movi	fp,7
 18013c8:	8025883a 	mov	r18,r16
 18013cc:	dc002c17 	ldw	r16,176(sp)
 18013d0:	00000306 	br	18013e0 <___vfprintf_internal_r+0x7cc>
 18013d4:	8c7ffc04 	addi	r17,r17,-16
 18013d8:	42000204 	addi	r8,r8,8
 18013dc:	b440130e 	bge	r22,r17,180142c <___vfprintf_internal_r+0x818>
 18013e0:	01006134 	movhi	r4,388
 18013e4:	18c00404 	addi	r3,r3,16
 18013e8:	10800044 	addi	r2,r2,1
 18013ec:	21029084 	addi	r4,r4,2626
 18013f0:	41000015 	stw	r4,0(r8)
 18013f4:	45800115 	stw	r22,4(r8)
 18013f8:	d8c02015 	stw	r3,128(sp)
 18013fc:	d8801f15 	stw	r2,124(sp)
 1801400:	e0bff40e 	bge	fp,r2,18013d4 <__alt_mem_mem_0+0xff7e13d4>
 1801404:	d9801e04 	addi	r6,sp,120
 1801408:	b80b883a 	mov	r5,r23
 180140c:	8009883a 	mov	r4,r16
 1801410:	180772c0 	call	180772c <__sprint_r>
 1801414:	103f011e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1801418:	8c7ffc04 	addi	r17,r17,-16
 180141c:	d8c02017 	ldw	r3,128(sp)
 1801420:	d8801f17 	ldw	r2,124(sp)
 1801424:	da000404 	addi	r8,sp,16
 1801428:	b47fed16 	blt	r22,r17,18013e0 <__alt_mem_mem_0+0xff7e13e0>
 180142c:	9021883a 	mov	r16,r18
 1801430:	9825883a 	mov	r18,r19
 1801434:	8827883a 	mov	r19,r17
 1801438:	dc403b17 	ldw	r17,236(sp)
 180143c:	d9403517 	ldw	r5,212(sp)
 1801440:	98c7883a 	add	r3,r19,r3
 1801444:	10800044 	addi	r2,r2,1
 1801448:	41400015 	stw	r5,0(r8)
 180144c:	44c00115 	stw	r19,4(r8)
 1801450:	d8c02015 	stw	r3,128(sp)
 1801454:	d8801f15 	stw	r2,124(sp)
 1801458:	010001c4 	movi	r4,7
 180145c:	2082a316 	blt	r4,r2,1801eec <___vfprintf_internal_r+0x12d8>
 1801460:	df002787 	ldb	fp,158(sp)
 1801464:	42000204 	addi	r8,r8,8
 1801468:	e0000c26 	beq	fp,zero,180149c <___vfprintf_internal_r+0x888>
 180146c:	d8801f17 	ldw	r2,124(sp)
 1801470:	d9002784 	addi	r4,sp,158
 1801474:	18c00044 	addi	r3,r3,1
 1801478:	10800044 	addi	r2,r2,1
 180147c:	41000015 	stw	r4,0(r8)
 1801480:	01000044 	movi	r4,1
 1801484:	41000115 	stw	r4,4(r8)
 1801488:	d8c02015 	stw	r3,128(sp)
 180148c:	d8801f15 	stw	r2,124(sp)
 1801490:	010001c4 	movi	r4,7
 1801494:	20823c16 	blt	r4,r2,1801d88 <___vfprintf_internal_r+0x1174>
 1801498:	42000204 	addi	r8,r8,8
 180149c:	d8802b17 	ldw	r2,172(sp)
 18014a0:	10000c26 	beq	r2,zero,18014d4 <___vfprintf_internal_r+0x8c0>
 18014a4:	d8801f17 	ldw	r2,124(sp)
 18014a8:	d9002704 	addi	r4,sp,156
 18014ac:	18c00084 	addi	r3,r3,2
 18014b0:	10800044 	addi	r2,r2,1
 18014b4:	41000015 	stw	r4,0(r8)
 18014b8:	01000084 	movi	r4,2
 18014bc:	41000115 	stw	r4,4(r8)
 18014c0:	d8c02015 	stw	r3,128(sp)
 18014c4:	d8801f15 	stw	r2,124(sp)
 18014c8:	010001c4 	movi	r4,7
 18014cc:	20823616 	blt	r4,r2,1801da8 <___vfprintf_internal_r+0x1194>
 18014d0:	42000204 	addi	r8,r8,8
 18014d4:	d9003017 	ldw	r4,192(sp)
 18014d8:	00802004 	movi	r2,128
 18014dc:	20819926 	beq	r4,r2,1801b44 <___vfprintf_internal_r+0xf30>
 18014e0:	d9402917 	ldw	r5,164(sp)
 18014e4:	d8802e17 	ldw	r2,184(sp)
 18014e8:	28adc83a 	sub	r22,r5,r2
 18014ec:	0580310e 	bge	zero,r22,18015b4 <___vfprintf_internal_r+0x9a0>
 18014f0:	07000404 	movi	fp,16
 18014f4:	d8801f17 	ldw	r2,124(sp)
 18014f8:	e584140e 	bge	fp,r22,180254c <___vfprintf_internal_r+0x1938>
 18014fc:	01406134 	movhi	r5,388
 1801500:	29428c84 	addi	r5,r5,2610
 1801504:	dc402915 	stw	r17,164(sp)
 1801508:	d9402b15 	stw	r5,172(sp)
 180150c:	b023883a 	mov	r17,r22
 1801510:	04c001c4 	movi	r19,7
 1801514:	a82d883a 	mov	r22,r21
 1801518:	902b883a 	mov	r21,r18
 180151c:	8025883a 	mov	r18,r16
 1801520:	dc002c17 	ldw	r16,176(sp)
 1801524:	00000306 	br	1801534 <___vfprintf_internal_r+0x920>
 1801528:	8c7ffc04 	addi	r17,r17,-16
 180152c:	42000204 	addi	r8,r8,8
 1801530:	e440110e 	bge	fp,r17,1801578 <___vfprintf_internal_r+0x964>
 1801534:	18c00404 	addi	r3,r3,16
 1801538:	10800044 	addi	r2,r2,1
 180153c:	45000015 	stw	r20,0(r8)
 1801540:	47000115 	stw	fp,4(r8)
 1801544:	d8c02015 	stw	r3,128(sp)
 1801548:	d8801f15 	stw	r2,124(sp)
 180154c:	98bff60e 	bge	r19,r2,1801528 <__alt_mem_mem_0+0xff7e1528>
 1801550:	d9801e04 	addi	r6,sp,120
 1801554:	b80b883a 	mov	r5,r23
 1801558:	8009883a 	mov	r4,r16
 180155c:	180772c0 	call	180772c <__sprint_r>
 1801560:	103eae1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1801564:	8c7ffc04 	addi	r17,r17,-16
 1801568:	d8c02017 	ldw	r3,128(sp)
 180156c:	d8801f17 	ldw	r2,124(sp)
 1801570:	da000404 	addi	r8,sp,16
 1801574:	e47fef16 	blt	fp,r17,1801534 <__alt_mem_mem_0+0xff7e1534>
 1801578:	9021883a 	mov	r16,r18
 180157c:	a825883a 	mov	r18,r21
 1801580:	b02b883a 	mov	r21,r22
 1801584:	882d883a 	mov	r22,r17
 1801588:	dc402917 	ldw	r17,164(sp)
 180158c:	d9002b17 	ldw	r4,172(sp)
 1801590:	1d87883a 	add	r3,r3,r22
 1801594:	10800044 	addi	r2,r2,1
 1801598:	41000015 	stw	r4,0(r8)
 180159c:	45800115 	stw	r22,4(r8)
 18015a0:	d8c02015 	stw	r3,128(sp)
 18015a4:	d8801f15 	stw	r2,124(sp)
 18015a8:	010001c4 	movi	r4,7
 18015ac:	2081ee16 	blt	r4,r2,1801d68 <___vfprintf_internal_r+0x1154>
 18015b0:	42000204 	addi	r8,r8,8
 18015b4:	9080400c 	andi	r2,r18,256
 18015b8:	1001181e 	bne	r2,zero,1801a1c <___vfprintf_internal_r+0xe08>
 18015bc:	d9402e17 	ldw	r5,184(sp)
 18015c0:	d8801f17 	ldw	r2,124(sp)
 18015c4:	44000015 	stw	r16,0(r8)
 18015c8:	1947883a 	add	r3,r3,r5
 18015cc:	10800044 	addi	r2,r2,1
 18015d0:	41400115 	stw	r5,4(r8)
 18015d4:	d8c02015 	stw	r3,128(sp)
 18015d8:	d8801f15 	stw	r2,124(sp)
 18015dc:	010001c4 	movi	r4,7
 18015e0:	2081d316 	blt	r4,r2,1801d30 <___vfprintf_internal_r+0x111c>
 18015e4:	42000204 	addi	r8,r8,8
 18015e8:	9480010c 	andi	r18,r18,4
 18015ec:	90003226 	beq	r18,zero,18016b8 <___vfprintf_internal_r+0xaa4>
 18015f0:	d9403117 	ldw	r5,196(sp)
 18015f4:	d8802a17 	ldw	r2,168(sp)
 18015f8:	28a1c83a 	sub	r16,r5,r2
 18015fc:	04002e0e 	bge	zero,r16,18016b8 <___vfprintf_internal_r+0xaa4>
 1801600:	04400404 	movi	r17,16
 1801604:	d8801f17 	ldw	r2,124(sp)
 1801608:	8c04a20e 	bge	r17,r16,1802894 <___vfprintf_internal_r+0x1c80>
 180160c:	01406134 	movhi	r5,388
 1801610:	29429084 	addi	r5,r5,2626
 1801614:	d9403515 	stw	r5,212(sp)
 1801618:	048001c4 	movi	r18,7
 180161c:	dcc02c17 	ldw	r19,176(sp)
 1801620:	00000306 	br	1801630 <___vfprintf_internal_r+0xa1c>
 1801624:	843ffc04 	addi	r16,r16,-16
 1801628:	42000204 	addi	r8,r8,8
 180162c:	8c00130e 	bge	r17,r16,180167c <___vfprintf_internal_r+0xa68>
 1801630:	01006134 	movhi	r4,388
 1801634:	18c00404 	addi	r3,r3,16
 1801638:	10800044 	addi	r2,r2,1
 180163c:	21029084 	addi	r4,r4,2626
 1801640:	41000015 	stw	r4,0(r8)
 1801644:	44400115 	stw	r17,4(r8)
 1801648:	d8c02015 	stw	r3,128(sp)
 180164c:	d8801f15 	stw	r2,124(sp)
 1801650:	90bff40e 	bge	r18,r2,1801624 <__alt_mem_mem_0+0xff7e1624>
 1801654:	d9801e04 	addi	r6,sp,120
 1801658:	b80b883a 	mov	r5,r23
 180165c:	9809883a 	mov	r4,r19
 1801660:	180772c0 	call	180772c <__sprint_r>
 1801664:	103e6d1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1801668:	843ffc04 	addi	r16,r16,-16
 180166c:	d8c02017 	ldw	r3,128(sp)
 1801670:	d8801f17 	ldw	r2,124(sp)
 1801674:	da000404 	addi	r8,sp,16
 1801678:	8c3fed16 	blt	r17,r16,1801630 <__alt_mem_mem_0+0xff7e1630>
 180167c:	d9403517 	ldw	r5,212(sp)
 1801680:	1c07883a 	add	r3,r3,r16
 1801684:	10800044 	addi	r2,r2,1
 1801688:	41400015 	stw	r5,0(r8)
 180168c:	44000115 	stw	r16,4(r8)
 1801690:	d8c02015 	stw	r3,128(sp)
 1801694:	d8801f15 	stw	r2,124(sp)
 1801698:	010001c4 	movi	r4,7
 180169c:	2080060e 	bge	r4,r2,18016b8 <___vfprintf_internal_r+0xaa4>
 18016a0:	d9002c17 	ldw	r4,176(sp)
 18016a4:	d9801e04 	addi	r6,sp,120
 18016a8:	b80b883a 	mov	r5,r23
 18016ac:	180772c0 	call	180772c <__sprint_r>
 18016b0:	103e5a1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 18016b4:	d8c02017 	ldw	r3,128(sp)
 18016b8:	d8803117 	ldw	r2,196(sp)
 18016bc:	d9002a17 	ldw	r4,168(sp)
 18016c0:	1100010e 	bge	r2,r4,18016c8 <___vfprintf_internal_r+0xab4>
 18016c4:	2005883a 	mov	r2,r4
 18016c8:	d9402f17 	ldw	r5,188(sp)
 18016cc:	288b883a 	add	r5,r5,r2
 18016d0:	d9402f15 	stw	r5,188(sp)
 18016d4:	18019e1e 	bne	r3,zero,1801d50 <___vfprintf_internal_r+0x113c>
 18016d8:	a8800007 	ldb	r2,0(r21)
 18016dc:	d8001f15 	stw	zero,124(sp)
 18016e0:	da000404 	addi	r8,sp,16
 18016e4:	103d851e 	bne	r2,zero,1800cfc <__alt_mem_mem_0+0xff7e0cfc>
 18016e8:	a821883a 	mov	r16,r21
 18016ec:	003d9b06 	br	1800d5c <__alt_mem_mem_0+0xff7e0d5c>
 18016f0:	18c03fcc 	andi	r3,r3,255
 18016f4:	1805c11e 	bne	r3,zero,1802dfc <___vfprintf_internal_r+0x21e8>
 18016f8:	94800414 	ori	r18,r18,16
 18016fc:	9080080c 	andi	r2,r18,32
 1801700:	10020c26 	beq	r2,zero,1801f34 <___vfprintf_internal_r+0x1320>
 1801704:	d8802d17 	ldw	r2,180(sp)
 1801708:	d9002917 	ldw	r4,164(sp)
 180170c:	d8002785 	stb	zero,158(sp)
 1801710:	10c00204 	addi	r3,r2,8
 1801714:	14c00017 	ldw	r19,0(r2)
 1801718:	15800117 	ldw	r22,4(r2)
 180171c:	20040f16 	blt	r4,zero,180275c <___vfprintf_internal_r+0x1b48>
 1801720:	013fdfc4 	movi	r4,-129
 1801724:	9d84b03a 	or	r2,r19,r22
 1801728:	d8c02d15 	stw	r3,180(sp)
 180172c:	9124703a 	and	r18,r18,r4
 1801730:	0039883a 	mov	fp,zero
 1801734:	103e891e 	bne	r2,zero,180115c <__alt_mem_mem_0+0xff7e115c>
 1801738:	d9002917 	ldw	r4,164(sp)
 180173c:	2002c11e 	bne	r4,zero,1802244 <___vfprintf_internal_r+0x1630>
 1801740:	d8002915 	stw	zero,164(sp)
 1801744:	d8002e15 	stw	zero,184(sp)
 1801748:	dc001e04 	addi	r16,sp,120
 180174c:	003ef806 	br	1801330 <__alt_mem_mem_0+0xff7e1330>
 1801750:	18c03fcc 	andi	r3,r3,255
 1801754:	18059d1e 	bne	r3,zero,1802dcc <___vfprintf_internal_r+0x21b8>
 1801758:	01406134 	movhi	r5,388
 180175c:	29428004 	addi	r5,r5,2560
 1801760:	d9403915 	stw	r5,228(sp)
 1801764:	9080080c 	andi	r2,r18,32
 1801768:	10005226 	beq	r2,zero,18018b4 <___vfprintf_internal_r+0xca0>
 180176c:	d8802d17 	ldw	r2,180(sp)
 1801770:	14c00017 	ldw	r19,0(r2)
 1801774:	15800117 	ldw	r22,4(r2)
 1801778:	10800204 	addi	r2,r2,8
 180177c:	d8802d15 	stw	r2,180(sp)
 1801780:	9080004c 	andi	r2,r18,1
 1801784:	10019026 	beq	r2,zero,1801dc8 <___vfprintf_internal_r+0x11b4>
 1801788:	9d84b03a 	or	r2,r19,r22
 180178c:	10036926 	beq	r2,zero,1802534 <___vfprintf_internal_r+0x1920>
 1801790:	d8c02917 	ldw	r3,164(sp)
 1801794:	00800c04 	movi	r2,48
 1801798:	d8802705 	stb	r2,156(sp)
 180179c:	dc402745 	stb	r17,157(sp)
 18017a0:	d8002785 	stb	zero,158(sp)
 18017a4:	90800094 	ori	r2,r18,2
 18017a8:	18045d16 	blt	r3,zero,1802920 <___vfprintf_internal_r+0x1d0c>
 18017ac:	00bfdfc4 	movi	r2,-129
 18017b0:	90a4703a 	and	r18,r18,r2
 18017b4:	94800094 	ori	r18,r18,2
 18017b8:	0039883a 	mov	fp,zero
 18017bc:	d9003917 	ldw	r4,228(sp)
 18017c0:	dc001e04 	addi	r16,sp,120
 18017c4:	988003cc 	andi	r2,r19,15
 18017c8:	b006973a 	slli	r3,r22,28
 18017cc:	2085883a 	add	r2,r4,r2
 18017d0:	9826d13a 	srli	r19,r19,4
 18017d4:	10800003 	ldbu	r2,0(r2)
 18017d8:	b02cd13a 	srli	r22,r22,4
 18017dc:	843fffc4 	addi	r16,r16,-1
 18017e0:	1ce6b03a 	or	r19,r3,r19
 18017e4:	80800005 	stb	r2,0(r16)
 18017e8:	9d84b03a 	or	r2,r19,r22
 18017ec:	103ff51e 	bne	r2,zero,18017c4 <__alt_mem_mem_0+0xff7e17c4>
 18017f0:	d8c02817 	ldw	r3,160(sp)
 18017f4:	1c07c83a 	sub	r3,r3,r16
 18017f8:	d8c02e15 	stw	r3,184(sp)
 18017fc:	003ecc06 	br	1801330 <__alt_mem_mem_0+0xff7e1330>
 1801800:	18c03fcc 	andi	r3,r3,255
 1801804:	183e9f26 	beq	r3,zero,1801284 <__alt_mem_mem_0+0xff7e1284>
 1801808:	d9c02785 	stb	r7,158(sp)
 180180c:	003e9d06 	br	1801284 <__alt_mem_mem_0+0xff7e1284>
 1801810:	00c00044 	movi	r3,1
 1801814:	01c00ac4 	movi	r7,43
 1801818:	ac400007 	ldb	r17,0(r21)
 180181c:	003d5e06 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 1801820:	94800814 	ori	r18,r18,32
 1801824:	ac400007 	ldb	r17,0(r21)
 1801828:	003d5b06 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 180182c:	d8c02d17 	ldw	r3,180(sp)
 1801830:	d8002785 	stb	zero,158(sp)
 1801834:	1c000017 	ldw	r16,0(r3)
 1801838:	1cc00104 	addi	r19,r3,4
 180183c:	80041926 	beq	r16,zero,18028a4 <___vfprintf_internal_r+0x1c90>
 1801840:	d9002917 	ldw	r4,164(sp)
 1801844:	2003d016 	blt	r4,zero,1802788 <___vfprintf_internal_r+0x1b74>
 1801848:	200d883a 	mov	r6,r4
 180184c:	000b883a 	mov	r5,zero
 1801850:	8009883a 	mov	r4,r16
 1801854:	da003d15 	stw	r8,244(sp)
 1801858:	1805f680 	call	1805f68 <memchr>
 180185c:	da003d17 	ldw	r8,244(sp)
 1801860:	10045426 	beq	r2,zero,18029b4 <___vfprintf_internal_r+0x1da0>
 1801864:	1405c83a 	sub	r2,r2,r16
 1801868:	d8802e15 	stw	r2,184(sp)
 180186c:	1003cc16 	blt	r2,zero,18027a0 <___vfprintf_internal_r+0x1b8c>
 1801870:	df002783 	ldbu	fp,158(sp)
 1801874:	d8802a15 	stw	r2,168(sp)
 1801878:	dcc02d15 	stw	r19,180(sp)
 180187c:	d8002915 	stw	zero,164(sp)
 1801880:	d8003215 	stw	zero,200(sp)
 1801884:	003eb006 	br	1801348 <__alt_mem_mem_0+0xff7e1348>
 1801888:	18c03fcc 	andi	r3,r3,255
 180188c:	183f9b26 	beq	r3,zero,18016fc <__alt_mem_mem_0+0xff7e16fc>
 1801890:	d9c02785 	stb	r7,158(sp)
 1801894:	003f9906 	br	18016fc <__alt_mem_mem_0+0xff7e16fc>
 1801898:	18c03fcc 	andi	r3,r3,255
 180189c:	1805551e 	bne	r3,zero,1802df4 <___vfprintf_internal_r+0x21e0>
 18018a0:	01406134 	movhi	r5,388
 18018a4:	29428504 	addi	r5,r5,2580
 18018a8:	d9403915 	stw	r5,228(sp)
 18018ac:	9080080c 	andi	r2,r18,32
 18018b0:	103fae1e 	bne	r2,zero,180176c <__alt_mem_mem_0+0xff7e176c>
 18018b4:	9080040c 	andi	r2,r18,16
 18018b8:	1002de26 	beq	r2,zero,1802434 <___vfprintf_internal_r+0x1820>
 18018bc:	d8c02d17 	ldw	r3,180(sp)
 18018c0:	002d883a 	mov	r22,zero
 18018c4:	1cc00017 	ldw	r19,0(r3)
 18018c8:	18c00104 	addi	r3,r3,4
 18018cc:	d8c02d15 	stw	r3,180(sp)
 18018d0:	003fab06 	br	1801780 <__alt_mem_mem_0+0xff7e1780>
 18018d4:	38803fcc 	andi	r2,r7,255
 18018d8:	1080201c 	xori	r2,r2,128
 18018dc:	10bfe004 	addi	r2,r2,-128
 18018e0:	1002d21e 	bne	r2,zero,180242c <___vfprintf_internal_r+0x1818>
 18018e4:	00c00044 	movi	r3,1
 18018e8:	01c00804 	movi	r7,32
 18018ec:	ac400007 	ldb	r17,0(r21)
 18018f0:	003d2906 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 18018f4:	94800054 	ori	r18,r18,1
 18018f8:	ac400007 	ldb	r17,0(r21)
 18018fc:	003d2606 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 1801900:	18c03fcc 	andi	r3,r3,255
 1801904:	183e0526 	beq	r3,zero,180111c <__alt_mem_mem_0+0xff7e111c>
 1801908:	d9c02785 	stb	r7,158(sp)
 180190c:	003e0306 	br	180111c <__alt_mem_mem_0+0xff7e111c>
 1801910:	94801014 	ori	r18,r18,64
 1801914:	ac400007 	ldb	r17,0(r21)
 1801918:	003d1f06 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 180191c:	ac400007 	ldb	r17,0(r21)
 1801920:	8a438726 	beq	r17,r9,1802740 <___vfprintf_internal_r+0x1b2c>
 1801924:	94800414 	ori	r18,r18,16
 1801928:	003d1b06 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 180192c:	18c03fcc 	andi	r3,r3,255
 1801930:	1805341e 	bne	r3,zero,1802e04 <___vfprintf_internal_r+0x21f0>
 1801934:	9080080c 	andi	r2,r18,32
 1801938:	1002cd26 	beq	r2,zero,1802470 <___vfprintf_internal_r+0x185c>
 180193c:	d9402d17 	ldw	r5,180(sp)
 1801940:	d9002f17 	ldw	r4,188(sp)
 1801944:	28800017 	ldw	r2,0(r5)
 1801948:	2007d7fa 	srai	r3,r4,31
 180194c:	29400104 	addi	r5,r5,4
 1801950:	d9402d15 	stw	r5,180(sp)
 1801954:	11000015 	stw	r4,0(r2)
 1801958:	10c00115 	stw	r3,4(r2)
 180195c:	003ce506 	br	1800cf4 <__alt_mem_mem_0+0xff7e0cf4>
 1801960:	d8c02d17 	ldw	r3,180(sp)
 1801964:	d9002d17 	ldw	r4,180(sp)
 1801968:	d8002785 	stb	zero,158(sp)
 180196c:	18800017 	ldw	r2,0(r3)
 1801970:	21000104 	addi	r4,r4,4
 1801974:	00c00044 	movi	r3,1
 1801978:	d8c02a15 	stw	r3,168(sp)
 180197c:	d8801405 	stb	r2,80(sp)
 1801980:	d9002d15 	stw	r4,180(sp)
 1801984:	d8c02e15 	stw	r3,184(sp)
 1801988:	d8002915 	stw	zero,164(sp)
 180198c:	d8003215 	stw	zero,200(sp)
 1801990:	dc001404 	addi	r16,sp,80
 1801994:	0039883a 	mov	fp,zero
 1801998:	003e7206 	br	1801364 <__alt_mem_mem_0+0xff7e1364>
 180199c:	01006134 	movhi	r4,388
 18019a0:	21028504 	addi	r4,r4,2580
 18019a4:	0039883a 	mov	fp,zero
 18019a8:	d9003915 	stw	r4,228(sp)
 18019ac:	04401e04 	movi	r17,120
 18019b0:	003f8206 	br	18017bc <__alt_mem_mem_0+0xff7e17bc>
 18019b4:	18c03fcc 	andi	r3,r3,255
 18019b8:	1805061e 	bne	r3,zero,1802dd4 <___vfprintf_internal_r+0x21c0>
 18019bc:	883d9126 	beq	r17,zero,1801004 <__alt_mem_mem_0+0xff7e1004>
 18019c0:	00c00044 	movi	r3,1
 18019c4:	d8c02a15 	stw	r3,168(sp)
 18019c8:	dc401405 	stb	r17,80(sp)
 18019cc:	d8002785 	stb	zero,158(sp)
 18019d0:	003fec06 	br	1801984 <__alt_mem_mem_0+0xff7e1984>
 18019d4:	01406134 	movhi	r5,388
 18019d8:	29428504 	addi	r5,r5,2580
 18019dc:	d9403915 	stw	r5,228(sp)
 18019e0:	d8c02d15 	stw	r3,180(sp)
 18019e4:	1025883a 	mov	r18,r2
 18019e8:	04401e04 	movi	r17,120
 18019ec:	9d84b03a 	or	r2,r19,r22
 18019f0:	1000fc1e 	bne	r2,zero,1801de4 <___vfprintf_internal_r+0x11d0>
 18019f4:	0039883a 	mov	fp,zero
 18019f8:	00800084 	movi	r2,2
 18019fc:	10803fcc 	andi	r2,r2,255
 1801a00:	00c00044 	movi	r3,1
 1801a04:	10c20f26 	beq	r2,r3,1802244 <___vfprintf_internal_r+0x1630>
 1801a08:	00c00084 	movi	r3,2
 1801a0c:	10fd6326 	beq	r2,r3,1800f9c <__alt_mem_mem_0+0xff7e0f9c>
 1801a10:	003e2d06 	br	18012c8 <__alt_mem_mem_0+0xff7e12c8>
 1801a14:	d8c02017 	ldw	r3,128(sp)
 1801a18:	003e9306 	br	1801468 <__alt_mem_mem_0+0xff7e1468>
 1801a1c:	00801944 	movi	r2,101
 1801a20:	14407e0e 	bge	r2,r17,1801c1c <___vfprintf_internal_r+0x1008>
 1801a24:	d9003617 	ldw	r4,216(sp)
 1801a28:	d9403817 	ldw	r5,224(sp)
 1801a2c:	000d883a 	mov	r6,zero
 1801a30:	000f883a 	mov	r7,zero
 1801a34:	d8c03c15 	stw	r3,240(sp)
 1801a38:	da003d15 	stw	r8,244(sp)
 1801a3c:	180bf200 	call	180bf20 <__eqdf2>
 1801a40:	d8c03c17 	ldw	r3,240(sp)
 1801a44:	da003d17 	ldw	r8,244(sp)
 1801a48:	1000f71e 	bne	r2,zero,1801e28 <___vfprintf_internal_r+0x1214>
 1801a4c:	d8801f17 	ldw	r2,124(sp)
 1801a50:	01006134 	movhi	r4,388
 1801a54:	21028c04 	addi	r4,r4,2608
 1801a58:	18c00044 	addi	r3,r3,1
 1801a5c:	10800044 	addi	r2,r2,1
 1801a60:	41000015 	stw	r4,0(r8)
 1801a64:	01000044 	movi	r4,1
 1801a68:	41000115 	stw	r4,4(r8)
 1801a6c:	d8c02015 	stw	r3,128(sp)
 1801a70:	d8801f15 	stw	r2,124(sp)
 1801a74:	010001c4 	movi	r4,7
 1801a78:	2082b816 	blt	r4,r2,180255c <___vfprintf_internal_r+0x1948>
 1801a7c:	42000204 	addi	r8,r8,8
 1801a80:	d8802617 	ldw	r2,152(sp)
 1801a84:	d9403317 	ldw	r5,204(sp)
 1801a88:	11400216 	blt	r2,r5,1801a94 <___vfprintf_internal_r+0xe80>
 1801a8c:	9080004c 	andi	r2,r18,1
 1801a90:	103ed526 	beq	r2,zero,18015e8 <__alt_mem_mem_0+0xff7e15e8>
 1801a94:	d8803717 	ldw	r2,220(sp)
 1801a98:	d9003417 	ldw	r4,208(sp)
 1801a9c:	d9403717 	ldw	r5,220(sp)
 1801aa0:	1887883a 	add	r3,r3,r2
 1801aa4:	d8801f17 	ldw	r2,124(sp)
 1801aa8:	41000015 	stw	r4,0(r8)
 1801aac:	41400115 	stw	r5,4(r8)
 1801ab0:	10800044 	addi	r2,r2,1
 1801ab4:	d8c02015 	stw	r3,128(sp)
 1801ab8:	d8801f15 	stw	r2,124(sp)
 1801abc:	010001c4 	movi	r4,7
 1801ac0:	20832916 	blt	r4,r2,1802768 <___vfprintf_internal_r+0x1b54>
 1801ac4:	42000204 	addi	r8,r8,8
 1801ac8:	d8803317 	ldw	r2,204(sp)
 1801acc:	143fffc4 	addi	r16,r2,-1
 1801ad0:	043ec50e 	bge	zero,r16,18015e8 <__alt_mem_mem_0+0xff7e15e8>
 1801ad4:	04400404 	movi	r17,16
 1801ad8:	d8801f17 	ldw	r2,124(sp)
 1801adc:	8c00880e 	bge	r17,r16,1801d00 <___vfprintf_internal_r+0x10ec>
 1801ae0:	01406134 	movhi	r5,388
 1801ae4:	29428c84 	addi	r5,r5,2610
 1801ae8:	d9402b15 	stw	r5,172(sp)
 1801aec:	058001c4 	movi	r22,7
 1801af0:	dcc02c17 	ldw	r19,176(sp)
 1801af4:	00000306 	br	1801b04 <___vfprintf_internal_r+0xef0>
 1801af8:	42000204 	addi	r8,r8,8
 1801afc:	843ffc04 	addi	r16,r16,-16
 1801b00:	8c00820e 	bge	r17,r16,1801d0c <___vfprintf_internal_r+0x10f8>
 1801b04:	18c00404 	addi	r3,r3,16
 1801b08:	10800044 	addi	r2,r2,1
 1801b0c:	45000015 	stw	r20,0(r8)
 1801b10:	44400115 	stw	r17,4(r8)
 1801b14:	d8c02015 	stw	r3,128(sp)
 1801b18:	d8801f15 	stw	r2,124(sp)
 1801b1c:	b0bff60e 	bge	r22,r2,1801af8 <__alt_mem_mem_0+0xff7e1af8>
 1801b20:	d9801e04 	addi	r6,sp,120
 1801b24:	b80b883a 	mov	r5,r23
 1801b28:	9809883a 	mov	r4,r19
 1801b2c:	180772c0 	call	180772c <__sprint_r>
 1801b30:	103d3a1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1801b34:	d8c02017 	ldw	r3,128(sp)
 1801b38:	d8801f17 	ldw	r2,124(sp)
 1801b3c:	da000404 	addi	r8,sp,16
 1801b40:	003fee06 	br	1801afc <__alt_mem_mem_0+0xff7e1afc>
 1801b44:	d9403117 	ldw	r5,196(sp)
 1801b48:	d8802a17 	ldw	r2,168(sp)
 1801b4c:	28adc83a 	sub	r22,r5,r2
 1801b50:	05be630e 	bge	zero,r22,18014e0 <__alt_mem_mem_0+0xff7e14e0>
 1801b54:	07000404 	movi	fp,16
 1801b58:	d8801f17 	ldw	r2,124(sp)
 1801b5c:	e5838f0e 	bge	fp,r22,180299c <___vfprintf_internal_r+0x1d88>
 1801b60:	01406134 	movhi	r5,388
 1801b64:	29428c84 	addi	r5,r5,2610
 1801b68:	dc403015 	stw	r17,192(sp)
 1801b6c:	d9402b15 	stw	r5,172(sp)
 1801b70:	b023883a 	mov	r17,r22
 1801b74:	04c001c4 	movi	r19,7
 1801b78:	a82d883a 	mov	r22,r21
 1801b7c:	902b883a 	mov	r21,r18
 1801b80:	8025883a 	mov	r18,r16
 1801b84:	dc002c17 	ldw	r16,176(sp)
 1801b88:	00000306 	br	1801b98 <___vfprintf_internal_r+0xf84>
 1801b8c:	8c7ffc04 	addi	r17,r17,-16
 1801b90:	42000204 	addi	r8,r8,8
 1801b94:	e440110e 	bge	fp,r17,1801bdc <___vfprintf_internal_r+0xfc8>
 1801b98:	18c00404 	addi	r3,r3,16
 1801b9c:	10800044 	addi	r2,r2,1
 1801ba0:	45000015 	stw	r20,0(r8)
 1801ba4:	47000115 	stw	fp,4(r8)
 1801ba8:	d8c02015 	stw	r3,128(sp)
 1801bac:	d8801f15 	stw	r2,124(sp)
 1801bb0:	98bff60e 	bge	r19,r2,1801b8c <__alt_mem_mem_0+0xff7e1b8c>
 1801bb4:	d9801e04 	addi	r6,sp,120
 1801bb8:	b80b883a 	mov	r5,r23
 1801bbc:	8009883a 	mov	r4,r16
 1801bc0:	180772c0 	call	180772c <__sprint_r>
 1801bc4:	103d151e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1801bc8:	8c7ffc04 	addi	r17,r17,-16
 1801bcc:	d8c02017 	ldw	r3,128(sp)
 1801bd0:	d8801f17 	ldw	r2,124(sp)
 1801bd4:	da000404 	addi	r8,sp,16
 1801bd8:	e47fef16 	blt	fp,r17,1801b98 <__alt_mem_mem_0+0xff7e1b98>
 1801bdc:	9021883a 	mov	r16,r18
 1801be0:	a825883a 	mov	r18,r21
 1801be4:	b02b883a 	mov	r21,r22
 1801be8:	882d883a 	mov	r22,r17
 1801bec:	dc403017 	ldw	r17,192(sp)
 1801bf0:	d9002b17 	ldw	r4,172(sp)
 1801bf4:	1d87883a 	add	r3,r3,r22
 1801bf8:	10800044 	addi	r2,r2,1
 1801bfc:	41000015 	stw	r4,0(r8)
 1801c00:	45800115 	stw	r22,4(r8)
 1801c04:	d8c02015 	stw	r3,128(sp)
 1801c08:	d8801f15 	stw	r2,124(sp)
 1801c0c:	010001c4 	movi	r4,7
 1801c10:	20818e16 	blt	r4,r2,180224c <___vfprintf_internal_r+0x1638>
 1801c14:	42000204 	addi	r8,r8,8
 1801c18:	003e3106 	br	18014e0 <__alt_mem_mem_0+0xff7e14e0>
 1801c1c:	d9403317 	ldw	r5,204(sp)
 1801c20:	00800044 	movi	r2,1
 1801c24:	18c00044 	addi	r3,r3,1
 1801c28:	1141530e 	bge	r2,r5,1802178 <___vfprintf_internal_r+0x1564>
 1801c2c:	dc401f17 	ldw	r17,124(sp)
 1801c30:	00800044 	movi	r2,1
 1801c34:	40800115 	stw	r2,4(r8)
 1801c38:	8c400044 	addi	r17,r17,1
 1801c3c:	44000015 	stw	r16,0(r8)
 1801c40:	d8c02015 	stw	r3,128(sp)
 1801c44:	dc401f15 	stw	r17,124(sp)
 1801c48:	008001c4 	movi	r2,7
 1801c4c:	14416b16 	blt	r2,r17,18021fc <___vfprintf_internal_r+0x15e8>
 1801c50:	42000204 	addi	r8,r8,8
 1801c54:	d8803717 	ldw	r2,220(sp)
 1801c58:	d9003417 	ldw	r4,208(sp)
 1801c5c:	8c400044 	addi	r17,r17,1
 1801c60:	10c7883a 	add	r3,r2,r3
 1801c64:	40800115 	stw	r2,4(r8)
 1801c68:	41000015 	stw	r4,0(r8)
 1801c6c:	d8c02015 	stw	r3,128(sp)
 1801c70:	dc401f15 	stw	r17,124(sp)
 1801c74:	008001c4 	movi	r2,7
 1801c78:	14416916 	blt	r2,r17,1802220 <___vfprintf_internal_r+0x160c>
 1801c7c:	45800204 	addi	r22,r8,8
 1801c80:	d9003617 	ldw	r4,216(sp)
 1801c84:	d9403817 	ldw	r5,224(sp)
 1801c88:	000d883a 	mov	r6,zero
 1801c8c:	000f883a 	mov	r7,zero
 1801c90:	d8c03c15 	stw	r3,240(sp)
 1801c94:	180bf200 	call	180bf20 <__eqdf2>
 1801c98:	d8c03c17 	ldw	r3,240(sp)
 1801c9c:	1000bc26 	beq	r2,zero,1801f90 <___vfprintf_internal_r+0x137c>
 1801ca0:	d9403317 	ldw	r5,204(sp)
 1801ca4:	84000044 	addi	r16,r16,1
 1801ca8:	8c400044 	addi	r17,r17,1
 1801cac:	28bfffc4 	addi	r2,r5,-1
 1801cb0:	1887883a 	add	r3,r3,r2
 1801cb4:	b0800115 	stw	r2,4(r22)
 1801cb8:	b4000015 	stw	r16,0(r22)
 1801cbc:	d8c02015 	stw	r3,128(sp)
 1801cc0:	dc401f15 	stw	r17,124(sp)
 1801cc4:	008001c4 	movi	r2,7
 1801cc8:	14414316 	blt	r2,r17,18021d8 <___vfprintf_internal_r+0x15c4>
 1801ccc:	b5800204 	addi	r22,r22,8
 1801cd0:	d9003a17 	ldw	r4,232(sp)
 1801cd4:	df0022c4 	addi	fp,sp,139
 1801cd8:	8c400044 	addi	r17,r17,1
 1801cdc:	20c7883a 	add	r3,r4,r3
 1801ce0:	b7000015 	stw	fp,0(r22)
 1801ce4:	b1000115 	stw	r4,4(r22)
 1801ce8:	d8c02015 	stw	r3,128(sp)
 1801cec:	dc401f15 	stw	r17,124(sp)
 1801cf0:	008001c4 	movi	r2,7
 1801cf4:	14400e16 	blt	r2,r17,1801d30 <___vfprintf_internal_r+0x111c>
 1801cf8:	b2000204 	addi	r8,r22,8
 1801cfc:	003e3a06 	br	18015e8 <__alt_mem_mem_0+0xff7e15e8>
 1801d00:	01006134 	movhi	r4,388
 1801d04:	21028c84 	addi	r4,r4,2610
 1801d08:	d9002b15 	stw	r4,172(sp)
 1801d0c:	d9002b17 	ldw	r4,172(sp)
 1801d10:	1c07883a 	add	r3,r3,r16
 1801d14:	44000115 	stw	r16,4(r8)
 1801d18:	41000015 	stw	r4,0(r8)
 1801d1c:	10800044 	addi	r2,r2,1
 1801d20:	d8c02015 	stw	r3,128(sp)
 1801d24:	d8801f15 	stw	r2,124(sp)
 1801d28:	010001c4 	movi	r4,7
 1801d2c:	20be2d0e 	bge	r4,r2,18015e4 <__alt_mem_mem_0+0xff7e15e4>
 1801d30:	d9002c17 	ldw	r4,176(sp)
 1801d34:	d9801e04 	addi	r6,sp,120
 1801d38:	b80b883a 	mov	r5,r23
 1801d3c:	180772c0 	call	180772c <__sprint_r>
 1801d40:	103cb61e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1801d44:	d8c02017 	ldw	r3,128(sp)
 1801d48:	da000404 	addi	r8,sp,16
 1801d4c:	003e2606 	br	18015e8 <__alt_mem_mem_0+0xff7e15e8>
 1801d50:	d9002c17 	ldw	r4,176(sp)
 1801d54:	d9801e04 	addi	r6,sp,120
 1801d58:	b80b883a 	mov	r5,r23
 1801d5c:	180772c0 	call	180772c <__sprint_r>
 1801d60:	103e5d26 	beq	r2,zero,18016d8 <__alt_mem_mem_0+0xff7e16d8>
 1801d64:	003cad06 	br	180101c <__alt_mem_mem_0+0xff7e101c>
 1801d68:	d9002c17 	ldw	r4,176(sp)
 1801d6c:	d9801e04 	addi	r6,sp,120
 1801d70:	b80b883a 	mov	r5,r23
 1801d74:	180772c0 	call	180772c <__sprint_r>
 1801d78:	103ca81e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1801d7c:	d8c02017 	ldw	r3,128(sp)
 1801d80:	da000404 	addi	r8,sp,16
 1801d84:	003e0b06 	br	18015b4 <__alt_mem_mem_0+0xff7e15b4>
 1801d88:	d9002c17 	ldw	r4,176(sp)
 1801d8c:	d9801e04 	addi	r6,sp,120
 1801d90:	b80b883a 	mov	r5,r23
 1801d94:	180772c0 	call	180772c <__sprint_r>
 1801d98:	103ca01e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1801d9c:	d8c02017 	ldw	r3,128(sp)
 1801da0:	da000404 	addi	r8,sp,16
 1801da4:	003dbd06 	br	180149c <__alt_mem_mem_0+0xff7e149c>
 1801da8:	d9002c17 	ldw	r4,176(sp)
 1801dac:	d9801e04 	addi	r6,sp,120
 1801db0:	b80b883a 	mov	r5,r23
 1801db4:	180772c0 	call	180772c <__sprint_r>
 1801db8:	103c981e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1801dbc:	d8c02017 	ldw	r3,128(sp)
 1801dc0:	da000404 	addi	r8,sp,16
 1801dc4:	003dc306 	br	18014d4 <__alt_mem_mem_0+0xff7e14d4>
 1801dc8:	d8802917 	ldw	r2,164(sp)
 1801dcc:	d8002785 	stb	zero,158(sp)
 1801dd0:	103f0616 	blt	r2,zero,18019ec <__alt_mem_mem_0+0xff7e19ec>
 1801dd4:	00ffdfc4 	movi	r3,-129
 1801dd8:	9d84b03a 	or	r2,r19,r22
 1801ddc:	90e4703a 	and	r18,r18,r3
 1801de0:	103c6b26 	beq	r2,zero,1800f90 <__alt_mem_mem_0+0xff7e0f90>
 1801de4:	0039883a 	mov	fp,zero
 1801de8:	003e7406 	br	18017bc <__alt_mem_mem_0+0xff7e17bc>
 1801dec:	9080040c 	andi	r2,r18,16
 1801df0:	1001b326 	beq	r2,zero,18024c0 <___vfprintf_internal_r+0x18ac>
 1801df4:	d9002d17 	ldw	r4,180(sp)
 1801df8:	d9402917 	ldw	r5,164(sp)
 1801dfc:	d8002785 	stb	zero,158(sp)
 1801e00:	20800104 	addi	r2,r4,4
 1801e04:	24c00017 	ldw	r19,0(r4)
 1801e08:	002d883a 	mov	r22,zero
 1801e0c:	2801b516 	blt	r5,zero,18024e4 <___vfprintf_internal_r+0x18d0>
 1801e10:	00ffdfc4 	movi	r3,-129
 1801e14:	d8802d15 	stw	r2,180(sp)
 1801e18:	90e4703a 	and	r18,r18,r3
 1801e1c:	983d2726 	beq	r19,zero,18012bc <__alt_mem_mem_0+0xff7e12bc>
 1801e20:	0039883a 	mov	fp,zero
 1801e24:	003d2a06 	br	18012d0 <__alt_mem_mem_0+0xff7e12d0>
 1801e28:	dc402617 	ldw	r17,152(sp)
 1801e2c:	0441d30e 	bge	zero,r17,180257c <___vfprintf_internal_r+0x1968>
 1801e30:	dc403217 	ldw	r17,200(sp)
 1801e34:	d8803317 	ldw	r2,204(sp)
 1801e38:	1440010e 	bge	r2,r17,1801e40 <___vfprintf_internal_r+0x122c>
 1801e3c:	1023883a 	mov	r17,r2
 1801e40:	04400a0e 	bge	zero,r17,1801e6c <___vfprintf_internal_r+0x1258>
 1801e44:	d8801f17 	ldw	r2,124(sp)
 1801e48:	1c47883a 	add	r3,r3,r17
 1801e4c:	44000015 	stw	r16,0(r8)
 1801e50:	10800044 	addi	r2,r2,1
 1801e54:	44400115 	stw	r17,4(r8)
 1801e58:	d8c02015 	stw	r3,128(sp)
 1801e5c:	d8801f15 	stw	r2,124(sp)
 1801e60:	010001c4 	movi	r4,7
 1801e64:	20826516 	blt	r4,r2,18027fc <___vfprintf_internal_r+0x1be8>
 1801e68:	42000204 	addi	r8,r8,8
 1801e6c:	88026116 	blt	r17,zero,18027f4 <___vfprintf_internal_r+0x1be0>
 1801e70:	d9003217 	ldw	r4,200(sp)
 1801e74:	2463c83a 	sub	r17,r4,r17
 1801e78:	04407b0e 	bge	zero,r17,1802068 <___vfprintf_internal_r+0x1454>
 1801e7c:	05800404 	movi	r22,16
 1801e80:	d8801f17 	ldw	r2,124(sp)
 1801e84:	b4419d0e 	bge	r22,r17,18024fc <___vfprintf_internal_r+0x18e8>
 1801e88:	01006134 	movhi	r4,388
 1801e8c:	21028c84 	addi	r4,r4,2610
 1801e90:	d9002b15 	stw	r4,172(sp)
 1801e94:	070001c4 	movi	fp,7
 1801e98:	dcc02c17 	ldw	r19,176(sp)
 1801e9c:	00000306 	br	1801eac <___vfprintf_internal_r+0x1298>
 1801ea0:	42000204 	addi	r8,r8,8
 1801ea4:	8c7ffc04 	addi	r17,r17,-16
 1801ea8:	b441970e 	bge	r22,r17,1802508 <___vfprintf_internal_r+0x18f4>
 1801eac:	18c00404 	addi	r3,r3,16
 1801eb0:	10800044 	addi	r2,r2,1
 1801eb4:	45000015 	stw	r20,0(r8)
 1801eb8:	45800115 	stw	r22,4(r8)
 1801ebc:	d8c02015 	stw	r3,128(sp)
 1801ec0:	d8801f15 	stw	r2,124(sp)
 1801ec4:	e0bff60e 	bge	fp,r2,1801ea0 <__alt_mem_mem_0+0xff7e1ea0>
 1801ec8:	d9801e04 	addi	r6,sp,120
 1801ecc:	b80b883a 	mov	r5,r23
 1801ed0:	9809883a 	mov	r4,r19
 1801ed4:	180772c0 	call	180772c <__sprint_r>
 1801ed8:	103c501e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1801edc:	d8c02017 	ldw	r3,128(sp)
 1801ee0:	d8801f17 	ldw	r2,124(sp)
 1801ee4:	da000404 	addi	r8,sp,16
 1801ee8:	003fee06 	br	1801ea4 <__alt_mem_mem_0+0xff7e1ea4>
 1801eec:	d9002c17 	ldw	r4,176(sp)
 1801ef0:	d9801e04 	addi	r6,sp,120
 1801ef4:	b80b883a 	mov	r5,r23
 1801ef8:	180772c0 	call	180772c <__sprint_r>
 1801efc:	103c471e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1801f00:	d8c02017 	ldw	r3,128(sp)
 1801f04:	df002787 	ldb	fp,158(sp)
 1801f08:	da000404 	addi	r8,sp,16
 1801f0c:	003d5606 	br	1801468 <__alt_mem_mem_0+0xff7e1468>
 1801f10:	9080040c 	andi	r2,r18,16
 1801f14:	10016126 	beq	r2,zero,180249c <___vfprintf_internal_r+0x1888>
 1801f18:	d8802d17 	ldw	r2,180(sp)
 1801f1c:	14c00017 	ldw	r19,0(r2)
 1801f20:	10800104 	addi	r2,r2,4
 1801f24:	d8802d15 	stw	r2,180(sp)
 1801f28:	982dd7fa 	srai	r22,r19,31
 1801f2c:	b005883a 	mov	r2,r22
 1801f30:	003c8206 	br	180113c <__alt_mem_mem_0+0xff7e113c>
 1801f34:	9080040c 	andi	r2,r18,16
 1801f38:	10003526 	beq	r2,zero,1802010 <___vfprintf_internal_r+0x13fc>
 1801f3c:	d9402d17 	ldw	r5,180(sp)
 1801f40:	d8c02917 	ldw	r3,164(sp)
 1801f44:	d8002785 	stb	zero,158(sp)
 1801f48:	28800104 	addi	r2,r5,4
 1801f4c:	2cc00017 	ldw	r19,0(r5)
 1801f50:	002d883a 	mov	r22,zero
 1801f54:	18003716 	blt	r3,zero,1802034 <___vfprintf_internal_r+0x1420>
 1801f58:	00ffdfc4 	movi	r3,-129
 1801f5c:	d8802d15 	stw	r2,180(sp)
 1801f60:	90e4703a 	and	r18,r18,r3
 1801f64:	0039883a 	mov	fp,zero
 1801f68:	983df326 	beq	r19,zero,1801738 <__alt_mem_mem_0+0xff7e1738>
 1801f6c:	00800244 	movi	r2,9
 1801f70:	14fc7b36 	bltu	r2,r19,1801160 <__alt_mem_mem_0+0xff7e1160>
 1801f74:	d8c02817 	ldw	r3,160(sp)
 1801f78:	dc001dc4 	addi	r16,sp,119
 1801f7c:	9cc00c04 	addi	r19,r19,48
 1801f80:	1c07c83a 	sub	r3,r3,r16
 1801f84:	dcc01dc5 	stb	r19,119(sp)
 1801f88:	d8c02e15 	stw	r3,184(sp)
 1801f8c:	003ce806 	br	1801330 <__alt_mem_mem_0+0xff7e1330>
 1801f90:	d8803317 	ldw	r2,204(sp)
 1801f94:	143fffc4 	addi	r16,r2,-1
 1801f98:	043f4d0e 	bge	zero,r16,1801cd0 <__alt_mem_mem_0+0xff7e1cd0>
 1801f9c:	07000404 	movi	fp,16
 1801fa0:	e400810e 	bge	fp,r16,18021a8 <___vfprintf_internal_r+0x1594>
 1801fa4:	01406134 	movhi	r5,388
 1801fa8:	29428c84 	addi	r5,r5,2610
 1801fac:	d9402b15 	stw	r5,172(sp)
 1801fb0:	01c001c4 	movi	r7,7
 1801fb4:	dcc02c17 	ldw	r19,176(sp)
 1801fb8:	00000306 	br	1801fc8 <___vfprintf_internal_r+0x13b4>
 1801fbc:	b5800204 	addi	r22,r22,8
 1801fc0:	843ffc04 	addi	r16,r16,-16
 1801fc4:	e4007b0e 	bge	fp,r16,18021b4 <___vfprintf_internal_r+0x15a0>
 1801fc8:	18c00404 	addi	r3,r3,16
 1801fcc:	8c400044 	addi	r17,r17,1
 1801fd0:	b5000015 	stw	r20,0(r22)
 1801fd4:	b7000115 	stw	fp,4(r22)
 1801fd8:	d8c02015 	stw	r3,128(sp)
 1801fdc:	dc401f15 	stw	r17,124(sp)
 1801fe0:	3c7ff60e 	bge	r7,r17,1801fbc <__alt_mem_mem_0+0xff7e1fbc>
 1801fe4:	d9801e04 	addi	r6,sp,120
 1801fe8:	b80b883a 	mov	r5,r23
 1801fec:	9809883a 	mov	r4,r19
 1801ff0:	d9c03c15 	stw	r7,240(sp)
 1801ff4:	180772c0 	call	180772c <__sprint_r>
 1801ff8:	d9c03c17 	ldw	r7,240(sp)
 1801ffc:	103c071e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802000:	d8c02017 	ldw	r3,128(sp)
 1802004:	dc401f17 	ldw	r17,124(sp)
 1802008:	dd800404 	addi	r22,sp,16
 180200c:	003fec06 	br	1801fc0 <__alt_mem_mem_0+0xff7e1fc0>
 1802010:	9080100c 	andi	r2,r18,64
 1802014:	d8002785 	stb	zero,158(sp)
 1802018:	10010e26 	beq	r2,zero,1802454 <___vfprintf_internal_r+0x1840>
 180201c:	d9002d17 	ldw	r4,180(sp)
 1802020:	d9402917 	ldw	r5,164(sp)
 1802024:	002d883a 	mov	r22,zero
 1802028:	20800104 	addi	r2,r4,4
 180202c:	24c0000b 	ldhu	r19,0(r4)
 1802030:	283fc90e 	bge	r5,zero,1801f58 <__alt_mem_mem_0+0xff7e1f58>
 1802034:	d8802d15 	stw	r2,180(sp)
 1802038:	0039883a 	mov	fp,zero
 180203c:	9d84b03a 	or	r2,r19,r22
 1802040:	103c461e 	bne	r2,zero,180115c <__alt_mem_mem_0+0xff7e115c>
 1802044:	00800044 	movi	r2,1
 1802048:	003e6c06 	br	18019fc <__alt_mem_mem_0+0xff7e19fc>
 180204c:	d9002c17 	ldw	r4,176(sp)
 1802050:	d9801e04 	addi	r6,sp,120
 1802054:	b80b883a 	mov	r5,r23
 1802058:	180772c0 	call	180772c <__sprint_r>
 180205c:	103bef1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802060:	d8c02017 	ldw	r3,128(sp)
 1802064:	da000404 	addi	r8,sp,16
 1802068:	d9003217 	ldw	r4,200(sp)
 180206c:	d8802617 	ldw	r2,152(sp)
 1802070:	d9403317 	ldw	r5,204(sp)
 1802074:	8123883a 	add	r17,r16,r4
 1802078:	11400216 	blt	r2,r5,1802084 <___vfprintf_internal_r+0x1470>
 180207c:	9100004c 	andi	r4,r18,1
 1802080:	20000d26 	beq	r4,zero,18020b8 <___vfprintf_internal_r+0x14a4>
 1802084:	d9003717 	ldw	r4,220(sp)
 1802088:	d9403417 	ldw	r5,208(sp)
 180208c:	1907883a 	add	r3,r3,r4
 1802090:	d9001f17 	ldw	r4,124(sp)
 1802094:	41400015 	stw	r5,0(r8)
 1802098:	d9403717 	ldw	r5,220(sp)
 180209c:	21000044 	addi	r4,r4,1
 18020a0:	d8c02015 	stw	r3,128(sp)
 18020a4:	41400115 	stw	r5,4(r8)
 18020a8:	d9001f15 	stw	r4,124(sp)
 18020ac:	014001c4 	movi	r5,7
 18020b0:	2901e816 	blt	r5,r4,1802854 <___vfprintf_internal_r+0x1c40>
 18020b4:	42000204 	addi	r8,r8,8
 18020b8:	d9003317 	ldw	r4,204(sp)
 18020bc:	8121883a 	add	r16,r16,r4
 18020c0:	2085c83a 	sub	r2,r4,r2
 18020c4:	8461c83a 	sub	r16,r16,r17
 18020c8:	1400010e 	bge	r2,r16,18020d0 <___vfprintf_internal_r+0x14bc>
 18020cc:	1021883a 	mov	r16,r2
 18020d0:	04000a0e 	bge	zero,r16,18020fc <___vfprintf_internal_r+0x14e8>
 18020d4:	d9001f17 	ldw	r4,124(sp)
 18020d8:	1c07883a 	add	r3,r3,r16
 18020dc:	44400015 	stw	r17,0(r8)
 18020e0:	21000044 	addi	r4,r4,1
 18020e4:	44000115 	stw	r16,4(r8)
 18020e8:	d8c02015 	stw	r3,128(sp)
 18020ec:	d9001f15 	stw	r4,124(sp)
 18020f0:	014001c4 	movi	r5,7
 18020f4:	2901fb16 	blt	r5,r4,18028e4 <___vfprintf_internal_r+0x1cd0>
 18020f8:	42000204 	addi	r8,r8,8
 18020fc:	8001f716 	blt	r16,zero,18028dc <___vfprintf_internal_r+0x1cc8>
 1802100:	1421c83a 	sub	r16,r2,r16
 1802104:	043d380e 	bge	zero,r16,18015e8 <__alt_mem_mem_0+0xff7e15e8>
 1802108:	04400404 	movi	r17,16
 180210c:	d8801f17 	ldw	r2,124(sp)
 1802110:	8c3efb0e 	bge	r17,r16,1801d00 <__alt_mem_mem_0+0xff7e1d00>
 1802114:	01406134 	movhi	r5,388
 1802118:	29428c84 	addi	r5,r5,2610
 180211c:	d9402b15 	stw	r5,172(sp)
 1802120:	058001c4 	movi	r22,7
 1802124:	dcc02c17 	ldw	r19,176(sp)
 1802128:	00000306 	br	1802138 <___vfprintf_internal_r+0x1524>
 180212c:	42000204 	addi	r8,r8,8
 1802130:	843ffc04 	addi	r16,r16,-16
 1802134:	8c3ef50e 	bge	r17,r16,1801d0c <__alt_mem_mem_0+0xff7e1d0c>
 1802138:	18c00404 	addi	r3,r3,16
 180213c:	10800044 	addi	r2,r2,1
 1802140:	45000015 	stw	r20,0(r8)
 1802144:	44400115 	stw	r17,4(r8)
 1802148:	d8c02015 	stw	r3,128(sp)
 180214c:	d8801f15 	stw	r2,124(sp)
 1802150:	b0bff60e 	bge	r22,r2,180212c <__alt_mem_mem_0+0xff7e212c>
 1802154:	d9801e04 	addi	r6,sp,120
 1802158:	b80b883a 	mov	r5,r23
 180215c:	9809883a 	mov	r4,r19
 1802160:	180772c0 	call	180772c <__sprint_r>
 1802164:	103bad1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802168:	d8c02017 	ldw	r3,128(sp)
 180216c:	d8801f17 	ldw	r2,124(sp)
 1802170:	da000404 	addi	r8,sp,16
 1802174:	003fee06 	br	1802130 <__alt_mem_mem_0+0xff7e2130>
 1802178:	9088703a 	and	r4,r18,r2
 180217c:	203eab1e 	bne	r4,zero,1801c2c <__alt_mem_mem_0+0xff7e1c2c>
 1802180:	dc401f17 	ldw	r17,124(sp)
 1802184:	40800115 	stw	r2,4(r8)
 1802188:	44000015 	stw	r16,0(r8)
 180218c:	8c400044 	addi	r17,r17,1
 1802190:	d8c02015 	stw	r3,128(sp)
 1802194:	dc401f15 	stw	r17,124(sp)
 1802198:	008001c4 	movi	r2,7
 180219c:	14400e16 	blt	r2,r17,18021d8 <___vfprintf_internal_r+0x15c4>
 18021a0:	45800204 	addi	r22,r8,8
 18021a4:	003eca06 	br	1801cd0 <__alt_mem_mem_0+0xff7e1cd0>
 18021a8:	01006134 	movhi	r4,388
 18021ac:	21028c84 	addi	r4,r4,2610
 18021b0:	d9002b15 	stw	r4,172(sp)
 18021b4:	d8802b17 	ldw	r2,172(sp)
 18021b8:	1c07883a 	add	r3,r3,r16
 18021bc:	8c400044 	addi	r17,r17,1
 18021c0:	b0800015 	stw	r2,0(r22)
 18021c4:	b4000115 	stw	r16,4(r22)
 18021c8:	d8c02015 	stw	r3,128(sp)
 18021cc:	dc401f15 	stw	r17,124(sp)
 18021d0:	008001c4 	movi	r2,7
 18021d4:	147ebd0e 	bge	r2,r17,1801ccc <__alt_mem_mem_0+0xff7e1ccc>
 18021d8:	d9002c17 	ldw	r4,176(sp)
 18021dc:	d9801e04 	addi	r6,sp,120
 18021e0:	b80b883a 	mov	r5,r23
 18021e4:	180772c0 	call	180772c <__sprint_r>
 18021e8:	103b8c1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 18021ec:	d8c02017 	ldw	r3,128(sp)
 18021f0:	dc401f17 	ldw	r17,124(sp)
 18021f4:	dd800404 	addi	r22,sp,16
 18021f8:	003eb506 	br	1801cd0 <__alt_mem_mem_0+0xff7e1cd0>
 18021fc:	d9002c17 	ldw	r4,176(sp)
 1802200:	d9801e04 	addi	r6,sp,120
 1802204:	b80b883a 	mov	r5,r23
 1802208:	180772c0 	call	180772c <__sprint_r>
 180220c:	103b831e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802210:	d8c02017 	ldw	r3,128(sp)
 1802214:	dc401f17 	ldw	r17,124(sp)
 1802218:	da000404 	addi	r8,sp,16
 180221c:	003e8d06 	br	1801c54 <__alt_mem_mem_0+0xff7e1c54>
 1802220:	d9002c17 	ldw	r4,176(sp)
 1802224:	d9801e04 	addi	r6,sp,120
 1802228:	b80b883a 	mov	r5,r23
 180222c:	180772c0 	call	180772c <__sprint_r>
 1802230:	103b7a1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802234:	d8c02017 	ldw	r3,128(sp)
 1802238:	dc401f17 	ldw	r17,124(sp)
 180223c:	dd800404 	addi	r22,sp,16
 1802240:	003e8f06 	br	1801c80 <__alt_mem_mem_0+0xff7e1c80>
 1802244:	0027883a 	mov	r19,zero
 1802248:	003f4a06 	br	1801f74 <__alt_mem_mem_0+0xff7e1f74>
 180224c:	d9002c17 	ldw	r4,176(sp)
 1802250:	d9801e04 	addi	r6,sp,120
 1802254:	b80b883a 	mov	r5,r23
 1802258:	180772c0 	call	180772c <__sprint_r>
 180225c:	103b6f1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802260:	d8c02017 	ldw	r3,128(sp)
 1802264:	da000404 	addi	r8,sp,16
 1802268:	003c9d06 	br	18014e0 <__alt_mem_mem_0+0xff7e14e0>
 180226c:	04e7c83a 	sub	r19,zero,r19
 1802270:	9804c03a 	cmpne	r2,r19,zero
 1802274:	05adc83a 	sub	r22,zero,r22
 1802278:	b0adc83a 	sub	r22,r22,r2
 180227c:	d8802917 	ldw	r2,164(sp)
 1802280:	07000b44 	movi	fp,45
 1802284:	df002785 	stb	fp,158(sp)
 1802288:	10017b16 	blt	r2,zero,1802878 <___vfprintf_internal_r+0x1c64>
 180228c:	00bfdfc4 	movi	r2,-129
 1802290:	90a4703a 	and	r18,r18,r2
 1802294:	003bb106 	br	180115c <__alt_mem_mem_0+0xff7e115c>
 1802298:	d9003617 	ldw	r4,216(sp)
 180229c:	d9403817 	ldw	r5,224(sp)
 18022a0:	da003d15 	stw	r8,244(sp)
 18022a4:	18072b80 	call	18072b8 <__fpclassifyd>
 18022a8:	da003d17 	ldw	r8,244(sp)
 18022ac:	1000f026 	beq	r2,zero,1802670 <___vfprintf_internal_r+0x1a5c>
 18022b0:	d9002917 	ldw	r4,164(sp)
 18022b4:	05bff7c4 	movi	r22,-33
 18022b8:	00bfffc4 	movi	r2,-1
 18022bc:	8dac703a 	and	r22,r17,r22
 18022c0:	20820026 	beq	r4,r2,1802ac4 <___vfprintf_internal_r+0x1eb0>
 18022c4:	008011c4 	movi	r2,71
 18022c8:	b081f726 	beq	r22,r2,1802aa8 <___vfprintf_internal_r+0x1e94>
 18022cc:	d9003817 	ldw	r4,224(sp)
 18022d0:	90c04014 	ori	r3,r18,256
 18022d4:	d8c02b15 	stw	r3,172(sp)
 18022d8:	20021516 	blt	r4,zero,1802b30 <___vfprintf_internal_r+0x1f1c>
 18022dc:	dcc03817 	ldw	r19,224(sp)
 18022e0:	d8002a05 	stb	zero,168(sp)
 18022e4:	00801984 	movi	r2,102
 18022e8:	8881f926 	beq	r17,r2,1802ad0 <___vfprintf_internal_r+0x1ebc>
 18022ec:	00801184 	movi	r2,70
 18022f0:	88821c26 	beq	r17,r2,1802b64 <___vfprintf_internal_r+0x1f50>
 18022f4:	00801144 	movi	r2,69
 18022f8:	b081ef26 	beq	r22,r2,1802ab8 <___vfprintf_internal_r+0x1ea4>
 18022fc:	d8c02917 	ldw	r3,164(sp)
 1802300:	d8802104 	addi	r2,sp,132
 1802304:	d8800315 	stw	r2,12(sp)
 1802308:	d9403617 	ldw	r5,216(sp)
 180230c:	d8802504 	addi	r2,sp,148
 1802310:	d9002c17 	ldw	r4,176(sp)
 1802314:	d8800215 	stw	r2,8(sp)
 1802318:	d8802604 	addi	r2,sp,152
 180231c:	d8c00015 	stw	r3,0(sp)
 1802320:	d8800115 	stw	r2,4(sp)
 1802324:	01c00084 	movi	r7,2
 1802328:	980d883a 	mov	r6,r19
 180232c:	d8c03c15 	stw	r3,240(sp)
 1802330:	da003d15 	stw	r8,244(sp)
 1802334:	18032380 	call	1803238 <_dtoa_r>
 1802338:	1021883a 	mov	r16,r2
 180233c:	008019c4 	movi	r2,103
 1802340:	d8c03c17 	ldw	r3,240(sp)
 1802344:	da003d17 	ldw	r8,244(sp)
 1802348:	88817126 	beq	r17,r2,1802910 <___vfprintf_internal_r+0x1cfc>
 180234c:	008011c4 	movi	r2,71
 1802350:	88829226 	beq	r17,r2,1802d9c <___vfprintf_internal_r+0x2188>
 1802354:	80f9883a 	add	fp,r16,r3
 1802358:	d9003617 	ldw	r4,216(sp)
 180235c:	000d883a 	mov	r6,zero
 1802360:	000f883a 	mov	r7,zero
 1802364:	980b883a 	mov	r5,r19
 1802368:	da003d15 	stw	r8,244(sp)
 180236c:	180bf200 	call	180bf20 <__eqdf2>
 1802370:	da003d17 	ldw	r8,244(sp)
 1802374:	10018d26 	beq	r2,zero,18029ac <___vfprintf_internal_r+0x1d98>
 1802378:	d8802117 	ldw	r2,132(sp)
 180237c:	1700062e 	bgeu	r2,fp,1802398 <___vfprintf_internal_r+0x1784>
 1802380:	01000c04 	movi	r4,48
 1802384:	10c00044 	addi	r3,r2,1
 1802388:	d8c02115 	stw	r3,132(sp)
 180238c:	11000005 	stb	r4,0(r2)
 1802390:	d8802117 	ldw	r2,132(sp)
 1802394:	173ffb36 	bltu	r2,fp,1802384 <__alt_mem_mem_0+0xff7e2384>
 1802398:	1405c83a 	sub	r2,r2,r16
 180239c:	d8803315 	stw	r2,204(sp)
 18023a0:	008011c4 	movi	r2,71
 18023a4:	b0817626 	beq	r22,r2,1802980 <___vfprintf_internal_r+0x1d6c>
 18023a8:	00801944 	movi	r2,101
 18023ac:	1442810e 	bge	r2,r17,1802db4 <___vfprintf_internal_r+0x21a0>
 18023b0:	d8c02617 	ldw	r3,152(sp)
 18023b4:	00801984 	movi	r2,102
 18023b8:	d8c03215 	stw	r3,200(sp)
 18023bc:	8881fe26 	beq	r17,r2,1802bb8 <___vfprintf_internal_r+0x1fa4>
 18023c0:	d8c03217 	ldw	r3,200(sp)
 18023c4:	d9003317 	ldw	r4,204(sp)
 18023c8:	1901dd16 	blt	r3,r4,1802b40 <___vfprintf_internal_r+0x1f2c>
 18023cc:	9480004c 	andi	r18,r18,1
 18023d0:	90022b1e 	bne	r18,zero,1802c80 <___vfprintf_internal_r+0x206c>
 18023d4:	1805883a 	mov	r2,r3
 18023d8:	18028016 	blt	r3,zero,1802ddc <___vfprintf_internal_r+0x21c8>
 18023dc:	d8c03217 	ldw	r3,200(sp)
 18023e0:	044019c4 	movi	r17,103
 18023e4:	d8c02e15 	stw	r3,184(sp)
 18023e8:	df002a07 	ldb	fp,168(sp)
 18023ec:	e001531e 	bne	fp,zero,180293c <___vfprintf_internal_r+0x1d28>
 18023f0:	df002783 	ldbu	fp,158(sp)
 18023f4:	d8802a15 	stw	r2,168(sp)
 18023f8:	dc802b17 	ldw	r18,172(sp)
 18023fc:	d8002915 	stw	zero,164(sp)
 1802400:	003bd106 	br	1801348 <__alt_mem_mem_0+0xff7e1348>
 1802404:	d8802d17 	ldw	r2,180(sp)
 1802408:	d8c02d17 	ldw	r3,180(sp)
 180240c:	d9002d17 	ldw	r4,180(sp)
 1802410:	10800017 	ldw	r2,0(r2)
 1802414:	18c00117 	ldw	r3,4(r3)
 1802418:	21000204 	addi	r4,r4,8
 180241c:	d8803615 	stw	r2,216(sp)
 1802420:	d8c03815 	stw	r3,224(sp)
 1802424:	d9002d15 	stw	r4,180(sp)
 1802428:	003b7506 	br	1801200 <__alt_mem_mem_0+0xff7e1200>
 180242c:	ac400007 	ldb	r17,0(r21)
 1802430:	003a5906 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 1802434:	9080100c 	andi	r2,r18,64
 1802438:	1000a826 	beq	r2,zero,18026dc <___vfprintf_internal_r+0x1ac8>
 180243c:	d9002d17 	ldw	r4,180(sp)
 1802440:	002d883a 	mov	r22,zero
 1802444:	24c0000b 	ldhu	r19,0(r4)
 1802448:	21000104 	addi	r4,r4,4
 180244c:	d9002d15 	stw	r4,180(sp)
 1802450:	003ccb06 	br	1801780 <__alt_mem_mem_0+0xff7e1780>
 1802454:	d8c02d17 	ldw	r3,180(sp)
 1802458:	d9002917 	ldw	r4,164(sp)
 180245c:	002d883a 	mov	r22,zero
 1802460:	18800104 	addi	r2,r3,4
 1802464:	1cc00017 	ldw	r19,0(r3)
 1802468:	203ebb0e 	bge	r4,zero,1801f58 <__alt_mem_mem_0+0xff7e1f58>
 180246c:	003ef106 	br	1802034 <__alt_mem_mem_0+0xff7e2034>
 1802470:	9080040c 	andi	r2,r18,16
 1802474:	1000921e 	bne	r2,zero,18026c0 <___vfprintf_internal_r+0x1aac>
 1802478:	9480100c 	andi	r18,r18,64
 180247c:	90013926 	beq	r18,zero,1802964 <___vfprintf_internal_r+0x1d50>
 1802480:	d9002d17 	ldw	r4,180(sp)
 1802484:	d9402f17 	ldw	r5,188(sp)
 1802488:	20800017 	ldw	r2,0(r4)
 180248c:	21000104 	addi	r4,r4,4
 1802490:	d9002d15 	stw	r4,180(sp)
 1802494:	1140000d 	sth	r5,0(r2)
 1802498:	003a1606 	br	1800cf4 <__alt_mem_mem_0+0xff7e0cf4>
 180249c:	9080100c 	andi	r2,r18,64
 18024a0:	10008026 	beq	r2,zero,18026a4 <___vfprintf_internal_r+0x1a90>
 18024a4:	d8c02d17 	ldw	r3,180(sp)
 18024a8:	1cc0000f 	ldh	r19,0(r3)
 18024ac:	18c00104 	addi	r3,r3,4
 18024b0:	d8c02d15 	stw	r3,180(sp)
 18024b4:	982dd7fa 	srai	r22,r19,31
 18024b8:	b005883a 	mov	r2,r22
 18024bc:	003b1f06 	br	180113c <__alt_mem_mem_0+0xff7e113c>
 18024c0:	9080100c 	andi	r2,r18,64
 18024c4:	d8002785 	stb	zero,158(sp)
 18024c8:	10008a1e 	bne	r2,zero,18026f4 <___vfprintf_internal_r+0x1ae0>
 18024cc:	d9402d17 	ldw	r5,180(sp)
 18024d0:	d8c02917 	ldw	r3,164(sp)
 18024d4:	002d883a 	mov	r22,zero
 18024d8:	28800104 	addi	r2,r5,4
 18024dc:	2cc00017 	ldw	r19,0(r5)
 18024e0:	183e4b0e 	bge	r3,zero,1801e10 <__alt_mem_mem_0+0xff7e1e10>
 18024e4:	9d86b03a 	or	r3,r19,r22
 18024e8:	d8802d15 	stw	r2,180(sp)
 18024ec:	183e4c1e 	bne	r3,zero,1801e20 <__alt_mem_mem_0+0xff7e1e20>
 18024f0:	0039883a 	mov	fp,zero
 18024f4:	0005883a 	mov	r2,zero
 18024f8:	003d4006 	br	18019fc <__alt_mem_mem_0+0xff7e19fc>
 18024fc:	01406134 	movhi	r5,388
 1802500:	29428c84 	addi	r5,r5,2610
 1802504:	d9402b15 	stw	r5,172(sp)
 1802508:	d9402b17 	ldw	r5,172(sp)
 180250c:	1c47883a 	add	r3,r3,r17
 1802510:	10800044 	addi	r2,r2,1
 1802514:	41400015 	stw	r5,0(r8)
 1802518:	44400115 	stw	r17,4(r8)
 180251c:	d8c02015 	stw	r3,128(sp)
 1802520:	d8801f15 	stw	r2,124(sp)
 1802524:	010001c4 	movi	r4,7
 1802528:	20bec816 	blt	r4,r2,180204c <__alt_mem_mem_0+0xff7e204c>
 180252c:	42000204 	addi	r8,r8,8
 1802530:	003ecd06 	br	1802068 <__alt_mem_mem_0+0xff7e2068>
 1802534:	d9002917 	ldw	r4,164(sp)
 1802538:	d8002785 	stb	zero,158(sp)
 180253c:	203d2d16 	blt	r4,zero,18019f4 <__alt_mem_mem_0+0xff7e19f4>
 1802540:	00bfdfc4 	movi	r2,-129
 1802544:	90a4703a 	and	r18,r18,r2
 1802548:	003a9106 	br	1800f90 <__alt_mem_mem_0+0xff7e0f90>
 180254c:	01006134 	movhi	r4,388
 1802550:	21028c84 	addi	r4,r4,2610
 1802554:	d9002b15 	stw	r4,172(sp)
 1802558:	003c0c06 	br	180158c <__alt_mem_mem_0+0xff7e158c>
 180255c:	d9002c17 	ldw	r4,176(sp)
 1802560:	d9801e04 	addi	r6,sp,120
 1802564:	b80b883a 	mov	r5,r23
 1802568:	180772c0 	call	180772c <__sprint_r>
 180256c:	103aab1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802570:	d8c02017 	ldw	r3,128(sp)
 1802574:	da000404 	addi	r8,sp,16
 1802578:	003d4106 	br	1801a80 <__alt_mem_mem_0+0xff7e1a80>
 180257c:	d8801f17 	ldw	r2,124(sp)
 1802580:	01406134 	movhi	r5,388
 1802584:	01000044 	movi	r4,1
 1802588:	18c00044 	addi	r3,r3,1
 180258c:	10800044 	addi	r2,r2,1
 1802590:	29428c04 	addi	r5,r5,2608
 1802594:	41000115 	stw	r4,4(r8)
 1802598:	41400015 	stw	r5,0(r8)
 180259c:	d8c02015 	stw	r3,128(sp)
 18025a0:	d8801f15 	stw	r2,124(sp)
 18025a4:	010001c4 	movi	r4,7
 18025a8:	20805c16 	blt	r4,r2,180271c <___vfprintf_internal_r+0x1b08>
 18025ac:	42000204 	addi	r8,r8,8
 18025b0:	8800041e 	bne	r17,zero,18025c4 <___vfprintf_internal_r+0x19b0>
 18025b4:	d8803317 	ldw	r2,204(sp)
 18025b8:	1000021e 	bne	r2,zero,18025c4 <___vfprintf_internal_r+0x19b0>
 18025bc:	9080004c 	andi	r2,r18,1
 18025c0:	103c0926 	beq	r2,zero,18015e8 <__alt_mem_mem_0+0xff7e15e8>
 18025c4:	d9003717 	ldw	r4,220(sp)
 18025c8:	d8801f17 	ldw	r2,124(sp)
 18025cc:	d9403417 	ldw	r5,208(sp)
 18025d0:	20c7883a 	add	r3,r4,r3
 18025d4:	10800044 	addi	r2,r2,1
 18025d8:	41000115 	stw	r4,4(r8)
 18025dc:	41400015 	stw	r5,0(r8)
 18025e0:	d8c02015 	stw	r3,128(sp)
 18025e4:	d8801f15 	stw	r2,124(sp)
 18025e8:	010001c4 	movi	r4,7
 18025ec:	20812116 	blt	r4,r2,1802a74 <___vfprintf_internal_r+0x1e60>
 18025f0:	42000204 	addi	r8,r8,8
 18025f4:	0463c83a 	sub	r17,zero,r17
 18025f8:	0440730e 	bge	zero,r17,18027c8 <___vfprintf_internal_r+0x1bb4>
 18025fc:	05800404 	movi	r22,16
 1802600:	b440860e 	bge	r22,r17,180281c <___vfprintf_internal_r+0x1c08>
 1802604:	01406134 	movhi	r5,388
 1802608:	29428c84 	addi	r5,r5,2610
 180260c:	d9402b15 	stw	r5,172(sp)
 1802610:	070001c4 	movi	fp,7
 1802614:	dcc02c17 	ldw	r19,176(sp)
 1802618:	00000306 	br	1802628 <___vfprintf_internal_r+0x1a14>
 180261c:	42000204 	addi	r8,r8,8
 1802620:	8c7ffc04 	addi	r17,r17,-16
 1802624:	b440800e 	bge	r22,r17,1802828 <___vfprintf_internal_r+0x1c14>
 1802628:	18c00404 	addi	r3,r3,16
 180262c:	10800044 	addi	r2,r2,1
 1802630:	45000015 	stw	r20,0(r8)
 1802634:	45800115 	stw	r22,4(r8)
 1802638:	d8c02015 	stw	r3,128(sp)
 180263c:	d8801f15 	stw	r2,124(sp)
 1802640:	e0bff60e 	bge	fp,r2,180261c <__alt_mem_mem_0+0xff7e261c>
 1802644:	d9801e04 	addi	r6,sp,120
 1802648:	b80b883a 	mov	r5,r23
 180264c:	9809883a 	mov	r4,r19
 1802650:	180772c0 	call	180772c <__sprint_r>
 1802654:	103a711e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802658:	d8c02017 	ldw	r3,128(sp)
 180265c:	d8801f17 	ldw	r2,124(sp)
 1802660:	da000404 	addi	r8,sp,16
 1802664:	003fee06 	br	1802620 <__alt_mem_mem_0+0xff7e2620>
 1802668:	00bfffc4 	movi	r2,-1
 180266c:	003a6f06 	br	180102c <__alt_mem_mem_0+0xff7e102c>
 1802670:	008011c4 	movi	r2,71
 1802674:	1440b816 	blt	r2,r17,1802958 <___vfprintf_internal_r+0x1d44>
 1802678:	04006134 	movhi	r16,388
 180267c:	84027e04 	addi	r16,r16,2552
 1802680:	00c000c4 	movi	r3,3
 1802684:	00bfdfc4 	movi	r2,-129
 1802688:	d8c02a15 	stw	r3,168(sp)
 180268c:	90a4703a 	and	r18,r18,r2
 1802690:	df002783 	ldbu	fp,158(sp)
 1802694:	d8c02e15 	stw	r3,184(sp)
 1802698:	d8002915 	stw	zero,164(sp)
 180269c:	d8003215 	stw	zero,200(sp)
 18026a0:	003b2906 	br	1801348 <__alt_mem_mem_0+0xff7e1348>
 18026a4:	d9002d17 	ldw	r4,180(sp)
 18026a8:	24c00017 	ldw	r19,0(r4)
 18026ac:	21000104 	addi	r4,r4,4
 18026b0:	d9002d15 	stw	r4,180(sp)
 18026b4:	982dd7fa 	srai	r22,r19,31
 18026b8:	b005883a 	mov	r2,r22
 18026bc:	003a9f06 	br	180113c <__alt_mem_mem_0+0xff7e113c>
 18026c0:	d9402d17 	ldw	r5,180(sp)
 18026c4:	d8c02f17 	ldw	r3,188(sp)
 18026c8:	28800017 	ldw	r2,0(r5)
 18026cc:	29400104 	addi	r5,r5,4
 18026d0:	d9402d15 	stw	r5,180(sp)
 18026d4:	10c00015 	stw	r3,0(r2)
 18026d8:	00398606 	br	1800cf4 <__alt_mem_mem_0+0xff7e0cf4>
 18026dc:	d9402d17 	ldw	r5,180(sp)
 18026e0:	002d883a 	mov	r22,zero
 18026e4:	2cc00017 	ldw	r19,0(r5)
 18026e8:	29400104 	addi	r5,r5,4
 18026ec:	d9402d15 	stw	r5,180(sp)
 18026f0:	003c2306 	br	1801780 <__alt_mem_mem_0+0xff7e1780>
 18026f4:	d8c02d17 	ldw	r3,180(sp)
 18026f8:	d9002917 	ldw	r4,164(sp)
 18026fc:	002d883a 	mov	r22,zero
 1802700:	18800104 	addi	r2,r3,4
 1802704:	1cc0000b 	ldhu	r19,0(r3)
 1802708:	203dc10e 	bge	r4,zero,1801e10 <__alt_mem_mem_0+0xff7e1e10>
 180270c:	003f7506 	br	18024e4 <__alt_mem_mem_0+0xff7e24e4>
 1802710:	04006134 	movhi	r16,388
 1802714:	84027c04 	addi	r16,r16,2544
 1802718:	003acc06 	br	180124c <__alt_mem_mem_0+0xff7e124c>
 180271c:	d9002c17 	ldw	r4,176(sp)
 1802720:	d9801e04 	addi	r6,sp,120
 1802724:	b80b883a 	mov	r5,r23
 1802728:	180772c0 	call	180772c <__sprint_r>
 180272c:	103a3b1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802730:	dc402617 	ldw	r17,152(sp)
 1802734:	d8c02017 	ldw	r3,128(sp)
 1802738:	da000404 	addi	r8,sp,16
 180273c:	003f9c06 	br	18025b0 <__alt_mem_mem_0+0xff7e25b0>
 1802740:	ac400043 	ldbu	r17,1(r21)
 1802744:	94800814 	ori	r18,r18,32
 1802748:	ad400044 	addi	r21,r21,1
 180274c:	8c403fcc 	andi	r17,r17,255
 1802750:	8c40201c 	xori	r17,r17,128
 1802754:	8c7fe004 	addi	r17,r17,-128
 1802758:	00398f06 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 180275c:	d8c02d15 	stw	r3,180(sp)
 1802760:	0039883a 	mov	fp,zero
 1802764:	003e3506 	br	180203c <__alt_mem_mem_0+0xff7e203c>
 1802768:	d9002c17 	ldw	r4,176(sp)
 180276c:	d9801e04 	addi	r6,sp,120
 1802770:	b80b883a 	mov	r5,r23
 1802774:	180772c0 	call	180772c <__sprint_r>
 1802778:	103a281e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 180277c:	d8c02017 	ldw	r3,128(sp)
 1802780:	da000404 	addi	r8,sp,16
 1802784:	003cd006 	br	1801ac8 <__alt_mem_mem_0+0xff7e1ac8>
 1802788:	8009883a 	mov	r4,r16
 180278c:	da003d15 	stw	r8,244(sp)
 1802790:	18075980 	call	1807598 <strlen>
 1802794:	d8802e15 	stw	r2,184(sp)
 1802798:	da003d17 	ldw	r8,244(sp)
 180279c:	103c340e 	bge	r2,zero,1801870 <__alt_mem_mem_0+0xff7e1870>
 18027a0:	0005883a 	mov	r2,zero
 18027a4:	003c3206 	br	1801870 <__alt_mem_mem_0+0xff7e1870>
 18027a8:	d9002c17 	ldw	r4,176(sp)
 18027ac:	d9801e04 	addi	r6,sp,120
 18027b0:	b80b883a 	mov	r5,r23
 18027b4:	180772c0 	call	180772c <__sprint_r>
 18027b8:	103a181e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 18027bc:	d8c02017 	ldw	r3,128(sp)
 18027c0:	d8801f17 	ldw	r2,124(sp)
 18027c4:	da000404 	addi	r8,sp,16
 18027c8:	d9403317 	ldw	r5,204(sp)
 18027cc:	10800044 	addi	r2,r2,1
 18027d0:	44000015 	stw	r16,0(r8)
 18027d4:	28c7883a 	add	r3,r5,r3
 18027d8:	003b7d06 	br	18015d0 <__alt_mem_mem_0+0xff7e15d0>
 18027dc:	01006134 	movhi	r4,388
 18027e0:	21029084 	addi	r4,r4,2626
 18027e4:	d9003515 	stw	r4,212(sp)
 18027e8:	003b1406 	br	180143c <__alt_mem_mem_0+0xff7e143c>
 18027ec:	013fffc4 	movi	r4,-1
 18027f0:	003a3506 	br	18010c8 <__alt_mem_mem_0+0xff7e10c8>
 18027f4:	0023883a 	mov	r17,zero
 18027f8:	003d9d06 	br	1801e70 <__alt_mem_mem_0+0xff7e1e70>
 18027fc:	d9002c17 	ldw	r4,176(sp)
 1802800:	d9801e04 	addi	r6,sp,120
 1802804:	b80b883a 	mov	r5,r23
 1802808:	180772c0 	call	180772c <__sprint_r>
 180280c:	103a031e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802810:	d8c02017 	ldw	r3,128(sp)
 1802814:	da000404 	addi	r8,sp,16
 1802818:	003d9406 	br	1801e6c <__alt_mem_mem_0+0xff7e1e6c>
 180281c:	01006134 	movhi	r4,388
 1802820:	21028c84 	addi	r4,r4,2610
 1802824:	d9002b15 	stw	r4,172(sp)
 1802828:	d9002b17 	ldw	r4,172(sp)
 180282c:	1c47883a 	add	r3,r3,r17
 1802830:	10800044 	addi	r2,r2,1
 1802834:	41000015 	stw	r4,0(r8)
 1802838:	44400115 	stw	r17,4(r8)
 180283c:	d8c02015 	stw	r3,128(sp)
 1802840:	d8801f15 	stw	r2,124(sp)
 1802844:	010001c4 	movi	r4,7
 1802848:	20bfd716 	blt	r4,r2,18027a8 <__alt_mem_mem_0+0xff7e27a8>
 180284c:	42000204 	addi	r8,r8,8
 1802850:	003fdd06 	br	18027c8 <__alt_mem_mem_0+0xff7e27c8>
 1802854:	d9002c17 	ldw	r4,176(sp)
 1802858:	d9801e04 	addi	r6,sp,120
 180285c:	b80b883a 	mov	r5,r23
 1802860:	180772c0 	call	180772c <__sprint_r>
 1802864:	1039ed1e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802868:	d8802617 	ldw	r2,152(sp)
 180286c:	d8c02017 	ldw	r3,128(sp)
 1802870:	da000404 	addi	r8,sp,16
 1802874:	003e1006 	br	18020b8 <__alt_mem_mem_0+0xff7e20b8>
 1802878:	00800044 	movi	r2,1
 180287c:	10803fcc 	andi	r2,r2,255
 1802880:	00c00044 	movi	r3,1
 1802884:	10fa3526 	beq	r2,r3,180115c <__alt_mem_mem_0+0xff7e115c>
 1802888:	00c00084 	movi	r3,2
 180288c:	10fbcb26 	beq	r2,r3,18017bc <__alt_mem_mem_0+0xff7e17bc>
 1802890:	003a8f06 	br	18012d0 <__alt_mem_mem_0+0xff7e12d0>
 1802894:	01006134 	movhi	r4,388
 1802898:	21029084 	addi	r4,r4,2626
 180289c:	d9003515 	stw	r4,212(sp)
 18028a0:	003b7606 	br	180167c <__alt_mem_mem_0+0xff7e167c>
 18028a4:	d8802917 	ldw	r2,164(sp)
 18028a8:	00c00184 	movi	r3,6
 18028ac:	1880012e 	bgeu	r3,r2,18028b4 <___vfprintf_internal_r+0x1ca0>
 18028b0:	1805883a 	mov	r2,r3
 18028b4:	d8802e15 	stw	r2,184(sp)
 18028b8:	1000ef16 	blt	r2,zero,1802c78 <___vfprintf_internal_r+0x2064>
 18028bc:	04006134 	movhi	r16,388
 18028c0:	d8802a15 	stw	r2,168(sp)
 18028c4:	dcc02d15 	stw	r19,180(sp)
 18028c8:	d8002915 	stw	zero,164(sp)
 18028cc:	d8003215 	stw	zero,200(sp)
 18028d0:	84028a04 	addi	r16,r16,2600
 18028d4:	0039883a 	mov	fp,zero
 18028d8:	003aa206 	br	1801364 <__alt_mem_mem_0+0xff7e1364>
 18028dc:	0021883a 	mov	r16,zero
 18028e0:	003e0706 	br	1802100 <__alt_mem_mem_0+0xff7e2100>
 18028e4:	d9002c17 	ldw	r4,176(sp)
 18028e8:	d9801e04 	addi	r6,sp,120
 18028ec:	b80b883a 	mov	r5,r23
 18028f0:	180772c0 	call	180772c <__sprint_r>
 18028f4:	1039c91e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 18028f8:	d8802617 	ldw	r2,152(sp)
 18028fc:	d9403317 	ldw	r5,204(sp)
 1802900:	d8c02017 	ldw	r3,128(sp)
 1802904:	da000404 	addi	r8,sp,16
 1802908:	2885c83a 	sub	r2,r5,r2
 180290c:	003dfb06 	br	18020fc <__alt_mem_mem_0+0xff7e20fc>
 1802910:	9080004c 	andi	r2,r18,1
 1802914:	103e8f1e 	bne	r2,zero,1802354 <__alt_mem_mem_0+0xff7e2354>
 1802918:	d8802117 	ldw	r2,132(sp)
 180291c:	003e9e06 	br	1802398 <__alt_mem_mem_0+0xff7e2398>
 1802920:	1025883a 	mov	r18,r2
 1802924:	0039883a 	mov	fp,zero
 1802928:	00800084 	movi	r2,2
 180292c:	003fd306 	br	180287c <__alt_mem_mem_0+0xff7e287c>
 1802930:	07000b44 	movi	fp,45
 1802934:	df002785 	stb	fp,158(sp)
 1802938:	003a4006 	br	180123c <__alt_mem_mem_0+0xff7e123c>
 180293c:	00c00b44 	movi	r3,45
 1802940:	d8c02785 	stb	r3,158(sp)
 1802944:	d8802a15 	stw	r2,168(sp)
 1802948:	dc802b17 	ldw	r18,172(sp)
 180294c:	d8002915 	stw	zero,164(sp)
 1802950:	07000b44 	movi	fp,45
 1802954:	003a8006 	br	1801358 <__alt_mem_mem_0+0xff7e1358>
 1802958:	04006134 	movhi	r16,388
 180295c:	84027f04 	addi	r16,r16,2556
 1802960:	003f4706 	br	1802680 <__alt_mem_mem_0+0xff7e2680>
 1802964:	d8c02d17 	ldw	r3,180(sp)
 1802968:	d9002f17 	ldw	r4,188(sp)
 180296c:	18800017 	ldw	r2,0(r3)
 1802970:	18c00104 	addi	r3,r3,4
 1802974:	d8c02d15 	stw	r3,180(sp)
 1802978:	11000015 	stw	r4,0(r2)
 180297c:	0038dd06 	br	1800cf4 <__alt_mem_mem_0+0xff7e0cf4>
 1802980:	dd802617 	ldw	r22,152(sp)
 1802984:	00bfff44 	movi	r2,-3
 1802988:	b0801c16 	blt	r22,r2,18029fc <___vfprintf_internal_r+0x1de8>
 180298c:	d9402917 	ldw	r5,164(sp)
 1802990:	2d801a16 	blt	r5,r22,18029fc <___vfprintf_internal_r+0x1de8>
 1802994:	dd803215 	stw	r22,200(sp)
 1802998:	003e8906 	br	18023c0 <__alt_mem_mem_0+0xff7e23c0>
 180299c:	01006134 	movhi	r4,388
 18029a0:	21028c84 	addi	r4,r4,2610
 18029a4:	d9002b15 	stw	r4,172(sp)
 18029a8:	003c9106 	br	1801bf0 <__alt_mem_mem_0+0xff7e1bf0>
 18029ac:	e005883a 	mov	r2,fp
 18029b0:	003e7906 	br	1802398 <__alt_mem_mem_0+0xff7e2398>
 18029b4:	d9402917 	ldw	r5,164(sp)
 18029b8:	df002783 	ldbu	fp,158(sp)
 18029bc:	dcc02d15 	stw	r19,180(sp)
 18029c0:	d9402a15 	stw	r5,168(sp)
 18029c4:	d9402e15 	stw	r5,184(sp)
 18029c8:	d8002915 	stw	zero,164(sp)
 18029cc:	d8003215 	stw	zero,200(sp)
 18029d0:	003a5d06 	br	1801348 <__alt_mem_mem_0+0xff7e1348>
 18029d4:	9080004c 	andi	r2,r18,1
 18029d8:	0039883a 	mov	fp,zero
 18029dc:	10000426 	beq	r2,zero,18029f0 <___vfprintf_internal_r+0x1ddc>
 18029e0:	00800c04 	movi	r2,48
 18029e4:	dc001dc4 	addi	r16,sp,119
 18029e8:	d8801dc5 	stb	r2,119(sp)
 18029ec:	003b8006 	br	18017f0 <__alt_mem_mem_0+0xff7e17f0>
 18029f0:	d8002e15 	stw	zero,184(sp)
 18029f4:	dc001e04 	addi	r16,sp,120
 18029f8:	003a4d06 	br	1801330 <__alt_mem_mem_0+0xff7e1330>
 18029fc:	8c7fff84 	addi	r17,r17,-2
 1802a00:	b5bfffc4 	addi	r22,r22,-1
 1802a04:	dd802615 	stw	r22,152(sp)
 1802a08:	dc4022c5 	stb	r17,139(sp)
 1802a0c:	b000bf16 	blt	r22,zero,1802d0c <___vfprintf_internal_r+0x20f8>
 1802a10:	00800ac4 	movi	r2,43
 1802a14:	d8802305 	stb	r2,140(sp)
 1802a18:	00800244 	movi	r2,9
 1802a1c:	15807016 	blt	r2,r22,1802be0 <___vfprintf_internal_r+0x1fcc>
 1802a20:	00800c04 	movi	r2,48
 1802a24:	b5800c04 	addi	r22,r22,48
 1802a28:	d8802345 	stb	r2,141(sp)
 1802a2c:	dd802385 	stb	r22,142(sp)
 1802a30:	d88023c4 	addi	r2,sp,143
 1802a34:	df0022c4 	addi	fp,sp,139
 1802a38:	d8c03317 	ldw	r3,204(sp)
 1802a3c:	1739c83a 	sub	fp,r2,fp
 1802a40:	d9003317 	ldw	r4,204(sp)
 1802a44:	e0c7883a 	add	r3,fp,r3
 1802a48:	df003a15 	stw	fp,232(sp)
 1802a4c:	d8c02e15 	stw	r3,184(sp)
 1802a50:	00800044 	movi	r2,1
 1802a54:	1100b30e 	bge	r2,r4,1802d24 <___vfprintf_internal_r+0x2110>
 1802a58:	d8c02e17 	ldw	r3,184(sp)
 1802a5c:	18c00044 	addi	r3,r3,1
 1802a60:	d8c02e15 	stw	r3,184(sp)
 1802a64:	1805883a 	mov	r2,r3
 1802a68:	1800ac16 	blt	r3,zero,1802d1c <___vfprintf_internal_r+0x2108>
 1802a6c:	d8003215 	stw	zero,200(sp)
 1802a70:	003e5d06 	br	18023e8 <__alt_mem_mem_0+0xff7e23e8>
 1802a74:	d9002c17 	ldw	r4,176(sp)
 1802a78:	d9801e04 	addi	r6,sp,120
 1802a7c:	b80b883a 	mov	r5,r23
 1802a80:	180772c0 	call	180772c <__sprint_r>
 1802a84:	1039651e 	bne	r2,zero,180101c <__alt_mem_mem_0+0xff7e101c>
 1802a88:	dc402617 	ldw	r17,152(sp)
 1802a8c:	d8c02017 	ldw	r3,128(sp)
 1802a90:	d8801f17 	ldw	r2,124(sp)
 1802a94:	da000404 	addi	r8,sp,16
 1802a98:	003ed606 	br	18025f4 <__alt_mem_mem_0+0xff7e25f4>
 1802a9c:	582b883a 	mov	r21,r11
 1802aa0:	d8002915 	stw	zero,164(sp)
 1802aa4:	0038bd06 	br	1800d9c <__alt_mem_mem_0+0xff7e0d9c>
 1802aa8:	d8802917 	ldw	r2,164(sp)
 1802aac:	103e071e 	bne	r2,zero,18022cc <__alt_mem_mem_0+0xff7e22cc>
 1802ab0:	dc002915 	stw	r16,164(sp)
 1802ab4:	003e0506 	br	18022cc <__alt_mem_mem_0+0xff7e22cc>
 1802ab8:	d9002917 	ldw	r4,164(sp)
 1802abc:	20c00044 	addi	r3,r4,1
 1802ac0:	003e0f06 	br	1802300 <__alt_mem_mem_0+0xff7e2300>
 1802ac4:	01400184 	movi	r5,6
 1802ac8:	d9402915 	stw	r5,164(sp)
 1802acc:	003dff06 	br	18022cc <__alt_mem_mem_0+0xff7e22cc>
 1802ad0:	d8802104 	addi	r2,sp,132
 1802ad4:	d8800315 	stw	r2,12(sp)
 1802ad8:	d8802504 	addi	r2,sp,148
 1802adc:	d8800215 	stw	r2,8(sp)
 1802ae0:	d8802604 	addi	r2,sp,152
 1802ae4:	d8800115 	stw	r2,4(sp)
 1802ae8:	d8802917 	ldw	r2,164(sp)
 1802aec:	d9403617 	ldw	r5,216(sp)
 1802af0:	d9002c17 	ldw	r4,176(sp)
 1802af4:	d8800015 	stw	r2,0(sp)
 1802af8:	01c000c4 	movi	r7,3
 1802afc:	980d883a 	mov	r6,r19
 1802b00:	da003d15 	stw	r8,244(sp)
 1802b04:	18032380 	call	1803238 <_dtoa_r>
 1802b08:	d8c02917 	ldw	r3,164(sp)
 1802b0c:	da003d17 	ldw	r8,244(sp)
 1802b10:	1021883a 	mov	r16,r2
 1802b14:	10f9883a 	add	fp,r2,r3
 1802b18:	81000007 	ldb	r4,0(r16)
 1802b1c:	00800c04 	movi	r2,48
 1802b20:	20805e26 	beq	r4,r2,1802c9c <___vfprintf_internal_r+0x2088>
 1802b24:	d8c02617 	ldw	r3,152(sp)
 1802b28:	e0f9883a 	add	fp,fp,r3
 1802b2c:	003e0a06 	br	1802358 <__alt_mem_mem_0+0xff7e2358>
 1802b30:	00c00b44 	movi	r3,45
 1802b34:	24e0003c 	xorhi	r19,r4,32768
 1802b38:	d8c02a05 	stb	r3,168(sp)
 1802b3c:	003de906 	br	18022e4 <__alt_mem_mem_0+0xff7e22e4>
 1802b40:	d8c03217 	ldw	r3,200(sp)
 1802b44:	00c07a0e 	bge	zero,r3,1802d30 <___vfprintf_internal_r+0x211c>
 1802b48:	00800044 	movi	r2,1
 1802b4c:	d9003317 	ldw	r4,204(sp)
 1802b50:	1105883a 	add	r2,r2,r4
 1802b54:	d8802e15 	stw	r2,184(sp)
 1802b58:	10004e16 	blt	r2,zero,1802c94 <___vfprintf_internal_r+0x2080>
 1802b5c:	044019c4 	movi	r17,103
 1802b60:	003e2106 	br	18023e8 <__alt_mem_mem_0+0xff7e23e8>
 1802b64:	d9002917 	ldw	r4,164(sp)
 1802b68:	d8802104 	addi	r2,sp,132
 1802b6c:	d8800315 	stw	r2,12(sp)
 1802b70:	d9000015 	stw	r4,0(sp)
 1802b74:	d8802504 	addi	r2,sp,148
 1802b78:	d9403617 	ldw	r5,216(sp)
 1802b7c:	d9002c17 	ldw	r4,176(sp)
 1802b80:	d8800215 	stw	r2,8(sp)
 1802b84:	d8802604 	addi	r2,sp,152
 1802b88:	d8800115 	stw	r2,4(sp)
 1802b8c:	01c000c4 	movi	r7,3
 1802b90:	980d883a 	mov	r6,r19
 1802b94:	da003d15 	stw	r8,244(sp)
 1802b98:	18032380 	call	1803238 <_dtoa_r>
 1802b9c:	d8c02917 	ldw	r3,164(sp)
 1802ba0:	da003d17 	ldw	r8,244(sp)
 1802ba4:	1021883a 	mov	r16,r2
 1802ba8:	00801184 	movi	r2,70
 1802bac:	80f9883a 	add	fp,r16,r3
 1802bb0:	88bfd926 	beq	r17,r2,1802b18 <__alt_mem_mem_0+0xff7e2b18>
 1802bb4:	003de806 	br	1802358 <__alt_mem_mem_0+0xff7e2358>
 1802bb8:	d9002917 	ldw	r4,164(sp)
 1802bbc:	00c04d0e 	bge	zero,r3,1802cf4 <___vfprintf_internal_r+0x20e0>
 1802bc0:	2000441e 	bne	r4,zero,1802cd4 <___vfprintf_internal_r+0x20c0>
 1802bc4:	9480004c 	andi	r18,r18,1
 1802bc8:	9000421e 	bne	r18,zero,1802cd4 <___vfprintf_internal_r+0x20c0>
 1802bcc:	1805883a 	mov	r2,r3
 1802bd0:	18007016 	blt	r3,zero,1802d94 <___vfprintf_internal_r+0x2180>
 1802bd4:	d8c03217 	ldw	r3,200(sp)
 1802bd8:	d8c02e15 	stw	r3,184(sp)
 1802bdc:	003e0206 	br	18023e8 <__alt_mem_mem_0+0xff7e23e8>
 1802be0:	df0022c4 	addi	fp,sp,139
 1802be4:	dc002915 	stw	r16,164(sp)
 1802be8:	4027883a 	mov	r19,r8
 1802bec:	e021883a 	mov	r16,fp
 1802bf0:	b009883a 	mov	r4,r22
 1802bf4:	01400284 	movi	r5,10
 1802bf8:	180ac5c0 	call	180ac5c <__modsi3>
 1802bfc:	10800c04 	addi	r2,r2,48
 1802c00:	843fffc4 	addi	r16,r16,-1
 1802c04:	b009883a 	mov	r4,r22
 1802c08:	01400284 	movi	r5,10
 1802c0c:	80800005 	stb	r2,0(r16)
 1802c10:	180abd80 	call	180abd8 <__divsi3>
 1802c14:	102d883a 	mov	r22,r2
 1802c18:	00800244 	movi	r2,9
 1802c1c:	15bff416 	blt	r2,r22,1802bf0 <__alt_mem_mem_0+0xff7e2bf0>
 1802c20:	9811883a 	mov	r8,r19
 1802c24:	b0800c04 	addi	r2,r22,48
 1802c28:	8027883a 	mov	r19,r16
 1802c2c:	997fffc4 	addi	r5,r19,-1
 1802c30:	98bfffc5 	stb	r2,-1(r19)
 1802c34:	dc002917 	ldw	r16,164(sp)
 1802c38:	2f006a2e 	bgeu	r5,fp,1802de4 <___vfprintf_internal_r+0x21d0>
 1802c3c:	d9c02384 	addi	r7,sp,142
 1802c40:	3ccfc83a 	sub	r7,r7,r19
 1802c44:	d9002344 	addi	r4,sp,141
 1802c48:	e1cf883a 	add	r7,fp,r7
 1802c4c:	00000106 	br	1802c54 <___vfprintf_internal_r+0x2040>
 1802c50:	28800003 	ldbu	r2,0(r5)
 1802c54:	20800005 	stb	r2,0(r4)
 1802c58:	21000044 	addi	r4,r4,1
 1802c5c:	29400044 	addi	r5,r5,1
 1802c60:	393ffb1e 	bne	r7,r4,1802c50 <__alt_mem_mem_0+0xff7e2c50>
 1802c64:	d8802304 	addi	r2,sp,140
 1802c68:	14c5c83a 	sub	r2,r2,r19
 1802c6c:	d8c02344 	addi	r3,sp,141
 1802c70:	1885883a 	add	r2,r3,r2
 1802c74:	003f7006 	br	1802a38 <__alt_mem_mem_0+0xff7e2a38>
 1802c78:	0005883a 	mov	r2,zero
 1802c7c:	003f0f06 	br	18028bc <__alt_mem_mem_0+0xff7e28bc>
 1802c80:	d8c03217 	ldw	r3,200(sp)
 1802c84:	18c00044 	addi	r3,r3,1
 1802c88:	d8c02e15 	stw	r3,184(sp)
 1802c8c:	1805883a 	mov	r2,r3
 1802c90:	183fb20e 	bge	r3,zero,1802b5c <__alt_mem_mem_0+0xff7e2b5c>
 1802c94:	0005883a 	mov	r2,zero
 1802c98:	003fb006 	br	1802b5c <__alt_mem_mem_0+0xff7e2b5c>
 1802c9c:	d9003617 	ldw	r4,216(sp)
 1802ca0:	000d883a 	mov	r6,zero
 1802ca4:	000f883a 	mov	r7,zero
 1802ca8:	980b883a 	mov	r5,r19
 1802cac:	d8c03c15 	stw	r3,240(sp)
 1802cb0:	da003d15 	stw	r8,244(sp)
 1802cb4:	180bf200 	call	180bf20 <__eqdf2>
 1802cb8:	d8c03c17 	ldw	r3,240(sp)
 1802cbc:	da003d17 	ldw	r8,244(sp)
 1802cc0:	103f9826 	beq	r2,zero,1802b24 <__alt_mem_mem_0+0xff7e2b24>
 1802cc4:	00800044 	movi	r2,1
 1802cc8:	10c7c83a 	sub	r3,r2,r3
 1802ccc:	d8c02615 	stw	r3,152(sp)
 1802cd0:	003f9506 	br	1802b28 <__alt_mem_mem_0+0xff7e2b28>
 1802cd4:	d9002917 	ldw	r4,164(sp)
 1802cd8:	d8c03217 	ldw	r3,200(sp)
 1802cdc:	20800044 	addi	r2,r4,1
 1802ce0:	1885883a 	add	r2,r3,r2
 1802ce4:	d8802e15 	stw	r2,184(sp)
 1802ce8:	103dbf0e 	bge	r2,zero,18023e8 <__alt_mem_mem_0+0xff7e23e8>
 1802cec:	0005883a 	mov	r2,zero
 1802cf0:	003dbd06 	br	18023e8 <__alt_mem_mem_0+0xff7e23e8>
 1802cf4:	2000211e 	bne	r4,zero,1802d7c <___vfprintf_internal_r+0x2168>
 1802cf8:	9480004c 	andi	r18,r18,1
 1802cfc:	90001f1e 	bne	r18,zero,1802d7c <___vfprintf_internal_r+0x2168>
 1802d00:	00800044 	movi	r2,1
 1802d04:	d8802e15 	stw	r2,184(sp)
 1802d08:	003db706 	br	18023e8 <__alt_mem_mem_0+0xff7e23e8>
 1802d0c:	00800b44 	movi	r2,45
 1802d10:	05adc83a 	sub	r22,zero,r22
 1802d14:	d8802305 	stb	r2,140(sp)
 1802d18:	003f3f06 	br	1802a18 <__alt_mem_mem_0+0xff7e2a18>
 1802d1c:	0005883a 	mov	r2,zero
 1802d20:	003f5206 	br	1802a6c <__alt_mem_mem_0+0xff7e2a6c>
 1802d24:	90a4703a 	and	r18,r18,r2
 1802d28:	903f4e26 	beq	r18,zero,1802a64 <__alt_mem_mem_0+0xff7e2a64>
 1802d2c:	003f4a06 	br	1802a58 <__alt_mem_mem_0+0xff7e2a58>
 1802d30:	00800084 	movi	r2,2
 1802d34:	10c5c83a 	sub	r2,r2,r3
 1802d38:	003f8406 	br	1802b4c <__alt_mem_mem_0+0xff7e2b4c>
 1802d3c:	d8802d17 	ldw	r2,180(sp)
 1802d40:	d9002d17 	ldw	r4,180(sp)
 1802d44:	ac400043 	ldbu	r17,1(r21)
 1802d48:	10800017 	ldw	r2,0(r2)
 1802d4c:	582b883a 	mov	r21,r11
 1802d50:	d8802915 	stw	r2,164(sp)
 1802d54:	20800104 	addi	r2,r4,4
 1802d58:	d9002917 	ldw	r4,164(sp)
 1802d5c:	d8802d15 	stw	r2,180(sp)
 1802d60:	203e7a0e 	bge	r4,zero,180274c <__alt_mem_mem_0+0xff7e274c>
 1802d64:	8c403fcc 	andi	r17,r17,255
 1802d68:	00bfffc4 	movi	r2,-1
 1802d6c:	8c40201c 	xori	r17,r17,128
 1802d70:	d8802915 	stw	r2,164(sp)
 1802d74:	8c7fe004 	addi	r17,r17,-128
 1802d78:	00380706 	br	1800d98 <__alt_mem_mem_0+0xff7e0d98>
 1802d7c:	d8c02917 	ldw	r3,164(sp)
 1802d80:	18c00084 	addi	r3,r3,2
 1802d84:	d8c02e15 	stw	r3,184(sp)
 1802d88:	1805883a 	mov	r2,r3
 1802d8c:	183d960e 	bge	r3,zero,18023e8 <__alt_mem_mem_0+0xff7e23e8>
 1802d90:	003fd606 	br	1802cec <__alt_mem_mem_0+0xff7e2cec>
 1802d94:	0005883a 	mov	r2,zero
 1802d98:	003f8e06 	br	1802bd4 <__alt_mem_mem_0+0xff7e2bd4>
 1802d9c:	9080004c 	andi	r2,r18,1
 1802da0:	103f811e 	bne	r2,zero,1802ba8 <__alt_mem_mem_0+0xff7e2ba8>
 1802da4:	d8802117 	ldw	r2,132(sp)
 1802da8:	1405c83a 	sub	r2,r2,r16
 1802dac:	d8803315 	stw	r2,204(sp)
 1802db0:	b47ef326 	beq	r22,r17,1802980 <__alt_mem_mem_0+0xff7e2980>
 1802db4:	dd802617 	ldw	r22,152(sp)
 1802db8:	003f1106 	br	1802a00 <__alt_mem_mem_0+0xff7e2a00>
 1802dbc:	d9c02785 	stb	r7,158(sp)
 1802dc0:	00390406 	br	18011d4 <__alt_mem_mem_0+0xff7e11d4>
 1802dc4:	d9c02785 	stb	r7,158(sp)
 1802dc8:	0038d306 	br	1801118 <__alt_mem_mem_0+0xff7e1118>
 1802dcc:	d9c02785 	stb	r7,158(sp)
 1802dd0:	003a6106 	br	1801758 <__alt_mem_mem_0+0xff7e1758>
 1802dd4:	d9c02785 	stb	r7,158(sp)
 1802dd8:	003af806 	br	18019bc <__alt_mem_mem_0+0xff7e19bc>
 1802ddc:	0005883a 	mov	r2,zero
 1802de0:	003d7e06 	br	18023dc <__alt_mem_mem_0+0xff7e23dc>
 1802de4:	d8802344 	addi	r2,sp,141
 1802de8:	003f1306 	br	1802a38 <__alt_mem_mem_0+0xff7e2a38>
 1802dec:	d9c02785 	stb	r7,158(sp)
 1802df0:	00392306 	br	1801280 <__alt_mem_mem_0+0xff7e1280>
 1802df4:	d9c02785 	stb	r7,158(sp)
 1802df8:	003aa906 	br	18018a0 <__alt_mem_mem_0+0xff7e18a0>
 1802dfc:	d9c02785 	stb	r7,158(sp)
 1802e00:	003a3d06 	br	18016f8 <__alt_mem_mem_0+0xff7e16f8>
 1802e04:	d9c02785 	stb	r7,158(sp)
 1802e08:	003aca06 	br	1801934 <__alt_mem_mem_0+0xff7e1934>

01802e0c <__vfprintf_internal>:
 1802e0c:	00806134 	movhi	r2,388
 1802e10:	1094f404 	addi	r2,r2,21456
 1802e14:	300f883a 	mov	r7,r6
 1802e18:	280d883a 	mov	r6,r5
 1802e1c:	200b883a 	mov	r5,r4
 1802e20:	11000017 	ldw	r4,0(r2)
 1802e24:	1800c141 	jmpi	1800c14 <___vfprintf_internal_r>

01802e28 <__sbprintf>:
 1802e28:	2880030b 	ldhu	r2,12(r5)
 1802e2c:	2ac01917 	ldw	r11,100(r5)
 1802e30:	2a80038b 	ldhu	r10,14(r5)
 1802e34:	2a400717 	ldw	r9,28(r5)
 1802e38:	2a000917 	ldw	r8,36(r5)
 1802e3c:	defee204 	addi	sp,sp,-1144
 1802e40:	00c10004 	movi	r3,1024
 1802e44:	dc011a15 	stw	r16,1128(sp)
 1802e48:	10bfff4c 	andi	r2,r2,65533
 1802e4c:	2821883a 	mov	r16,r5
 1802e50:	d8cb883a 	add	r5,sp,r3
 1802e54:	dc811c15 	stw	r18,1136(sp)
 1802e58:	dc411b15 	stw	r17,1132(sp)
 1802e5c:	dfc11d15 	stw	ra,1140(sp)
 1802e60:	2025883a 	mov	r18,r4
 1802e64:	d881030d 	sth	r2,1036(sp)
 1802e68:	dac11915 	stw	r11,1124(sp)
 1802e6c:	da81038d 	sth	r10,1038(sp)
 1802e70:	da410715 	stw	r9,1052(sp)
 1802e74:	da010915 	stw	r8,1060(sp)
 1802e78:	dec10015 	stw	sp,1024(sp)
 1802e7c:	dec10415 	stw	sp,1040(sp)
 1802e80:	d8c10215 	stw	r3,1032(sp)
 1802e84:	d8c10515 	stw	r3,1044(sp)
 1802e88:	d8010615 	stw	zero,1048(sp)
 1802e8c:	1800c140 	call	1800c14 <___vfprintf_internal_r>
 1802e90:	1023883a 	mov	r17,r2
 1802e94:	10000416 	blt	r2,zero,1802ea8 <__sbprintf+0x80>
 1802e98:	d9410004 	addi	r5,sp,1024
 1802e9c:	9009883a 	mov	r4,r18
 1802ea0:	1804adc0 	call	1804adc <_fflush_r>
 1802ea4:	10000d1e 	bne	r2,zero,1802edc <__sbprintf+0xb4>
 1802ea8:	d881030b 	ldhu	r2,1036(sp)
 1802eac:	1080100c 	andi	r2,r2,64
 1802eb0:	10000326 	beq	r2,zero,1802ec0 <__sbprintf+0x98>
 1802eb4:	8080030b 	ldhu	r2,12(r16)
 1802eb8:	10801014 	ori	r2,r2,64
 1802ebc:	8080030d 	sth	r2,12(r16)
 1802ec0:	8805883a 	mov	r2,r17
 1802ec4:	dfc11d17 	ldw	ra,1140(sp)
 1802ec8:	dc811c17 	ldw	r18,1136(sp)
 1802ecc:	dc411b17 	ldw	r17,1132(sp)
 1802ed0:	dc011a17 	ldw	r16,1128(sp)
 1802ed4:	dec11e04 	addi	sp,sp,1144
 1802ed8:	f800283a 	ret
 1802edc:	047fffc4 	movi	r17,-1
 1802ee0:	003ff106 	br	1802ea8 <__alt_mem_mem_0+0xff7e2ea8>

01802ee4 <__swsetup_r>:
 1802ee4:	00806134 	movhi	r2,388
 1802ee8:	defffd04 	addi	sp,sp,-12
 1802eec:	1094f404 	addi	r2,r2,21456
 1802ef0:	dc400115 	stw	r17,4(sp)
 1802ef4:	2023883a 	mov	r17,r4
 1802ef8:	11000017 	ldw	r4,0(r2)
 1802efc:	dc000015 	stw	r16,0(sp)
 1802f00:	dfc00215 	stw	ra,8(sp)
 1802f04:	2821883a 	mov	r16,r5
 1802f08:	20000226 	beq	r4,zero,1802f14 <__swsetup_r+0x30>
 1802f0c:	20800e17 	ldw	r2,56(r4)
 1802f10:	10003126 	beq	r2,zero,1802fd8 <__swsetup_r+0xf4>
 1802f14:	8080030b 	ldhu	r2,12(r16)
 1802f18:	10c0020c 	andi	r3,r2,8
 1802f1c:	1009883a 	mov	r4,r2
 1802f20:	18000f26 	beq	r3,zero,1802f60 <__swsetup_r+0x7c>
 1802f24:	80c00417 	ldw	r3,16(r16)
 1802f28:	18001526 	beq	r3,zero,1802f80 <__swsetup_r+0x9c>
 1802f2c:	1100004c 	andi	r4,r2,1
 1802f30:	20001c1e 	bne	r4,zero,1802fa4 <__swsetup_r+0xc0>
 1802f34:	1080008c 	andi	r2,r2,2
 1802f38:	1000291e 	bne	r2,zero,1802fe0 <__swsetup_r+0xfc>
 1802f3c:	80800517 	ldw	r2,20(r16)
 1802f40:	80800215 	stw	r2,8(r16)
 1802f44:	18001c26 	beq	r3,zero,1802fb8 <__swsetup_r+0xd4>
 1802f48:	0005883a 	mov	r2,zero
 1802f4c:	dfc00217 	ldw	ra,8(sp)
 1802f50:	dc400117 	ldw	r17,4(sp)
 1802f54:	dc000017 	ldw	r16,0(sp)
 1802f58:	dec00304 	addi	sp,sp,12
 1802f5c:	f800283a 	ret
 1802f60:	2080040c 	andi	r2,r4,16
 1802f64:	10002e26 	beq	r2,zero,1803020 <__swsetup_r+0x13c>
 1802f68:	2080010c 	andi	r2,r4,4
 1802f6c:	10001e1e 	bne	r2,zero,1802fe8 <__swsetup_r+0x104>
 1802f70:	80c00417 	ldw	r3,16(r16)
 1802f74:	20800214 	ori	r2,r4,8
 1802f78:	8080030d 	sth	r2,12(r16)
 1802f7c:	183feb1e 	bne	r3,zero,1802f2c <__alt_mem_mem_0+0xff7e2f2c>
 1802f80:	1100a00c 	andi	r4,r2,640
 1802f84:	01408004 	movi	r5,512
 1802f88:	217fe826 	beq	r4,r5,1802f2c <__alt_mem_mem_0+0xff7e2f2c>
 1802f8c:	800b883a 	mov	r5,r16
 1802f90:	8809883a 	mov	r4,r17
 1802f94:	18055a00 	call	18055a0 <__smakebuf_r>
 1802f98:	8080030b 	ldhu	r2,12(r16)
 1802f9c:	80c00417 	ldw	r3,16(r16)
 1802fa0:	003fe206 	br	1802f2c <__alt_mem_mem_0+0xff7e2f2c>
 1802fa4:	80800517 	ldw	r2,20(r16)
 1802fa8:	80000215 	stw	zero,8(r16)
 1802fac:	0085c83a 	sub	r2,zero,r2
 1802fb0:	80800615 	stw	r2,24(r16)
 1802fb4:	183fe41e 	bne	r3,zero,1802f48 <__alt_mem_mem_0+0xff7e2f48>
 1802fb8:	80c0030b 	ldhu	r3,12(r16)
 1802fbc:	0005883a 	mov	r2,zero
 1802fc0:	1900200c 	andi	r4,r3,128
 1802fc4:	203fe126 	beq	r4,zero,1802f4c <__alt_mem_mem_0+0xff7e2f4c>
 1802fc8:	18c01014 	ori	r3,r3,64
 1802fcc:	80c0030d 	sth	r3,12(r16)
 1802fd0:	00bfffc4 	movi	r2,-1
 1802fd4:	003fdd06 	br	1802f4c <__alt_mem_mem_0+0xff7e2f4c>
 1802fd8:	1804eb80 	call	1804eb8 <__sinit>
 1802fdc:	003fcd06 	br	1802f14 <__alt_mem_mem_0+0xff7e2f14>
 1802fe0:	0005883a 	mov	r2,zero
 1802fe4:	003fd606 	br	1802f40 <__alt_mem_mem_0+0xff7e2f40>
 1802fe8:	81400c17 	ldw	r5,48(r16)
 1802fec:	28000626 	beq	r5,zero,1803008 <__swsetup_r+0x124>
 1802ff0:	80801004 	addi	r2,r16,64
 1802ff4:	28800326 	beq	r5,r2,1803004 <__swsetup_r+0x120>
 1802ff8:	8809883a 	mov	r4,r17
 1802ffc:	180502c0 	call	180502c <_free_r>
 1803000:	8100030b 	ldhu	r4,12(r16)
 1803004:	80000c15 	stw	zero,48(r16)
 1803008:	80c00417 	ldw	r3,16(r16)
 180300c:	00bff6c4 	movi	r2,-37
 1803010:	1108703a 	and	r4,r2,r4
 1803014:	80000115 	stw	zero,4(r16)
 1803018:	80c00015 	stw	r3,0(r16)
 180301c:	003fd506 	br	1802f74 <__alt_mem_mem_0+0xff7e2f74>
 1803020:	00800244 	movi	r2,9
 1803024:	88800015 	stw	r2,0(r17)
 1803028:	20801014 	ori	r2,r4,64
 180302c:	8080030d 	sth	r2,12(r16)
 1803030:	00bfffc4 	movi	r2,-1
 1803034:	003fc506 	br	1802f4c <__alt_mem_mem_0+0xff7e2f4c>

01803038 <quorem>:
 1803038:	defff704 	addi	sp,sp,-36
 180303c:	dc800215 	stw	r18,8(sp)
 1803040:	20800417 	ldw	r2,16(r4)
 1803044:	2c800417 	ldw	r18,16(r5)
 1803048:	dfc00815 	stw	ra,32(sp)
 180304c:	ddc00715 	stw	r23,28(sp)
 1803050:	dd800615 	stw	r22,24(sp)
 1803054:	dd400515 	stw	r21,20(sp)
 1803058:	dd000415 	stw	r20,16(sp)
 180305c:	dcc00315 	stw	r19,12(sp)
 1803060:	dc400115 	stw	r17,4(sp)
 1803064:	dc000015 	stw	r16,0(sp)
 1803068:	14807116 	blt	r2,r18,1803230 <quorem+0x1f8>
 180306c:	94bfffc4 	addi	r18,r18,-1
 1803070:	94ad883a 	add	r22,r18,r18
 1803074:	b5ad883a 	add	r22,r22,r22
 1803078:	2c400504 	addi	r17,r5,20
 180307c:	8da9883a 	add	r20,r17,r22
 1803080:	25400504 	addi	r21,r4,20
 1803084:	282f883a 	mov	r23,r5
 1803088:	adad883a 	add	r22,r21,r22
 180308c:	a1400017 	ldw	r5,0(r20)
 1803090:	2021883a 	mov	r16,r4
 1803094:	b1000017 	ldw	r4,0(r22)
 1803098:	29400044 	addi	r5,r5,1
 180309c:	180acd00 	call	180acd0 <__udivsi3>
 18030a0:	1027883a 	mov	r19,r2
 18030a4:	10002c26 	beq	r2,zero,1803158 <quorem+0x120>
 18030a8:	a813883a 	mov	r9,r21
 18030ac:	880b883a 	mov	r5,r17
 18030b0:	0009883a 	mov	r4,zero
 18030b4:	000d883a 	mov	r6,zero
 18030b8:	2a000017 	ldw	r8,0(r5)
 18030bc:	49c00017 	ldw	r7,0(r9)
 18030c0:	29400104 	addi	r5,r5,4
 18030c4:	40bfffcc 	andi	r2,r8,65535
 18030c8:	14c5383a 	mul	r2,r2,r19
 18030cc:	4010d43a 	srli	r8,r8,16
 18030d0:	38ffffcc 	andi	r3,r7,65535
 18030d4:	1105883a 	add	r2,r2,r4
 18030d8:	1008d43a 	srli	r4,r2,16
 18030dc:	44d1383a 	mul	r8,r8,r19
 18030e0:	198d883a 	add	r6,r3,r6
 18030e4:	10ffffcc 	andi	r3,r2,65535
 18030e8:	30c7c83a 	sub	r3,r6,r3
 18030ec:	380ed43a 	srli	r7,r7,16
 18030f0:	4105883a 	add	r2,r8,r4
 18030f4:	180dd43a 	srai	r6,r3,16
 18030f8:	113fffcc 	andi	r4,r2,65535
 18030fc:	390fc83a 	sub	r7,r7,r4
 1803100:	398d883a 	add	r6,r7,r6
 1803104:	300e943a 	slli	r7,r6,16
 1803108:	18ffffcc 	andi	r3,r3,65535
 180310c:	1008d43a 	srli	r4,r2,16
 1803110:	38ceb03a 	or	r7,r7,r3
 1803114:	49c00015 	stw	r7,0(r9)
 1803118:	300dd43a 	srai	r6,r6,16
 180311c:	4a400104 	addi	r9,r9,4
 1803120:	a17fe52e 	bgeu	r20,r5,18030b8 <__alt_mem_mem_0+0xff7e30b8>
 1803124:	b0800017 	ldw	r2,0(r22)
 1803128:	10000b1e 	bne	r2,zero,1803158 <quorem+0x120>
 180312c:	b0bfff04 	addi	r2,r22,-4
 1803130:	a880082e 	bgeu	r21,r2,1803154 <quorem+0x11c>
 1803134:	b0ffff17 	ldw	r3,-4(r22)
 1803138:	18000326 	beq	r3,zero,1803148 <quorem+0x110>
 180313c:	00000506 	br	1803154 <quorem+0x11c>
 1803140:	10c00017 	ldw	r3,0(r2)
 1803144:	1800031e 	bne	r3,zero,1803154 <quorem+0x11c>
 1803148:	10bfff04 	addi	r2,r2,-4
 180314c:	94bfffc4 	addi	r18,r18,-1
 1803150:	a8bffb36 	bltu	r21,r2,1803140 <__alt_mem_mem_0+0xff7e3140>
 1803154:	84800415 	stw	r18,16(r16)
 1803158:	b80b883a 	mov	r5,r23
 180315c:	8009883a 	mov	r4,r16
 1803160:	1806b840 	call	1806b84 <__mcmp>
 1803164:	10002616 	blt	r2,zero,1803200 <quorem+0x1c8>
 1803168:	9cc00044 	addi	r19,r19,1
 180316c:	a805883a 	mov	r2,r21
 1803170:	000b883a 	mov	r5,zero
 1803174:	11000017 	ldw	r4,0(r2)
 1803178:	89800017 	ldw	r6,0(r17)
 180317c:	10800104 	addi	r2,r2,4
 1803180:	20ffffcc 	andi	r3,r4,65535
 1803184:	194b883a 	add	r5,r3,r5
 1803188:	30ffffcc 	andi	r3,r6,65535
 180318c:	28c7c83a 	sub	r3,r5,r3
 1803190:	300cd43a 	srli	r6,r6,16
 1803194:	2008d43a 	srli	r4,r4,16
 1803198:	180bd43a 	srai	r5,r3,16
 180319c:	18ffffcc 	andi	r3,r3,65535
 18031a0:	2189c83a 	sub	r4,r4,r6
 18031a4:	2149883a 	add	r4,r4,r5
 18031a8:	200c943a 	slli	r6,r4,16
 18031ac:	8c400104 	addi	r17,r17,4
 18031b0:	200bd43a 	srai	r5,r4,16
 18031b4:	30c6b03a 	or	r3,r6,r3
 18031b8:	10ffff15 	stw	r3,-4(r2)
 18031bc:	a47fed2e 	bgeu	r20,r17,1803174 <__alt_mem_mem_0+0xff7e3174>
 18031c0:	9485883a 	add	r2,r18,r18
 18031c4:	1085883a 	add	r2,r2,r2
 18031c8:	a887883a 	add	r3,r21,r2
 18031cc:	18800017 	ldw	r2,0(r3)
 18031d0:	10000b1e 	bne	r2,zero,1803200 <quorem+0x1c8>
 18031d4:	18bfff04 	addi	r2,r3,-4
 18031d8:	a880082e 	bgeu	r21,r2,18031fc <quorem+0x1c4>
 18031dc:	18ffff17 	ldw	r3,-4(r3)
 18031e0:	18000326 	beq	r3,zero,18031f0 <quorem+0x1b8>
 18031e4:	00000506 	br	18031fc <quorem+0x1c4>
 18031e8:	10c00017 	ldw	r3,0(r2)
 18031ec:	1800031e 	bne	r3,zero,18031fc <quorem+0x1c4>
 18031f0:	10bfff04 	addi	r2,r2,-4
 18031f4:	94bfffc4 	addi	r18,r18,-1
 18031f8:	a8bffb36 	bltu	r21,r2,18031e8 <__alt_mem_mem_0+0xff7e31e8>
 18031fc:	84800415 	stw	r18,16(r16)
 1803200:	9805883a 	mov	r2,r19
 1803204:	dfc00817 	ldw	ra,32(sp)
 1803208:	ddc00717 	ldw	r23,28(sp)
 180320c:	dd800617 	ldw	r22,24(sp)
 1803210:	dd400517 	ldw	r21,20(sp)
 1803214:	dd000417 	ldw	r20,16(sp)
 1803218:	dcc00317 	ldw	r19,12(sp)
 180321c:	dc800217 	ldw	r18,8(sp)
 1803220:	dc400117 	ldw	r17,4(sp)
 1803224:	dc000017 	ldw	r16,0(sp)
 1803228:	dec00904 	addi	sp,sp,36
 180322c:	f800283a 	ret
 1803230:	0005883a 	mov	r2,zero
 1803234:	003ff306 	br	1803204 <__alt_mem_mem_0+0xff7e3204>

01803238 <_dtoa_r>:
 1803238:	20801017 	ldw	r2,64(r4)
 180323c:	deffde04 	addi	sp,sp,-136
 1803240:	df002015 	stw	fp,128(sp)
 1803244:	dcc01b15 	stw	r19,108(sp)
 1803248:	dc801a15 	stw	r18,104(sp)
 180324c:	dc401915 	stw	r17,100(sp)
 1803250:	dc001815 	stw	r16,96(sp)
 1803254:	dfc02115 	stw	ra,132(sp)
 1803258:	ddc01f15 	stw	r23,124(sp)
 180325c:	dd801e15 	stw	r22,120(sp)
 1803260:	dd401d15 	stw	r21,116(sp)
 1803264:	dd001c15 	stw	r20,112(sp)
 1803268:	d9c00315 	stw	r7,12(sp)
 180326c:	2039883a 	mov	fp,r4
 1803270:	3023883a 	mov	r17,r6
 1803274:	2825883a 	mov	r18,r5
 1803278:	dc002417 	ldw	r16,144(sp)
 180327c:	3027883a 	mov	r19,r6
 1803280:	10000826 	beq	r2,zero,18032a4 <_dtoa_r+0x6c>
 1803284:	21801117 	ldw	r6,68(r4)
 1803288:	00c00044 	movi	r3,1
 180328c:	100b883a 	mov	r5,r2
 1803290:	1986983a 	sll	r3,r3,r6
 1803294:	11800115 	stw	r6,4(r2)
 1803298:	10c00215 	stw	r3,8(r2)
 180329c:	18063640 	call	1806364 <_Bfree>
 18032a0:	e0001015 	stw	zero,64(fp)
 18032a4:	88002e16 	blt	r17,zero,1803360 <_dtoa_r+0x128>
 18032a8:	80000015 	stw	zero,0(r16)
 18032ac:	889ffc2c 	andhi	r2,r17,32752
 18032b0:	00dffc34 	movhi	r3,32752
 18032b4:	10c01c26 	beq	r2,r3,1803328 <_dtoa_r+0xf0>
 18032b8:	000d883a 	mov	r6,zero
 18032bc:	000f883a 	mov	r7,zero
 18032c0:	9009883a 	mov	r4,r18
 18032c4:	980b883a 	mov	r5,r19
 18032c8:	180bf200 	call	180bf20 <__eqdf2>
 18032cc:	10002b1e 	bne	r2,zero,180337c <_dtoa_r+0x144>
 18032d0:	d9c02317 	ldw	r7,140(sp)
 18032d4:	00800044 	movi	r2,1
 18032d8:	38800015 	stw	r2,0(r7)
 18032dc:	d8802517 	ldw	r2,148(sp)
 18032e0:	10019e26 	beq	r2,zero,180395c <_dtoa_r+0x724>
 18032e4:	d8c02517 	ldw	r3,148(sp)
 18032e8:	00806134 	movhi	r2,388
 18032ec:	10828c44 	addi	r2,r2,2609
 18032f0:	18800015 	stw	r2,0(r3)
 18032f4:	10bfffc4 	addi	r2,r2,-1
 18032f8:	dfc02117 	ldw	ra,132(sp)
 18032fc:	df002017 	ldw	fp,128(sp)
 1803300:	ddc01f17 	ldw	r23,124(sp)
 1803304:	dd801e17 	ldw	r22,120(sp)
 1803308:	dd401d17 	ldw	r21,116(sp)
 180330c:	dd001c17 	ldw	r20,112(sp)
 1803310:	dcc01b17 	ldw	r19,108(sp)
 1803314:	dc801a17 	ldw	r18,104(sp)
 1803318:	dc401917 	ldw	r17,100(sp)
 180331c:	dc001817 	ldw	r16,96(sp)
 1803320:	dec02204 	addi	sp,sp,136
 1803324:	f800283a 	ret
 1803328:	d8c02317 	ldw	r3,140(sp)
 180332c:	0089c3c4 	movi	r2,9999
 1803330:	18800015 	stw	r2,0(r3)
 1803334:	90017726 	beq	r18,zero,1803914 <_dtoa_r+0x6dc>
 1803338:	00806134 	movhi	r2,388
 180333c:	10829804 	addi	r2,r2,2656
 1803340:	d9002517 	ldw	r4,148(sp)
 1803344:	203fec26 	beq	r4,zero,18032f8 <__alt_mem_mem_0+0xff7e32f8>
 1803348:	10c000c7 	ldb	r3,3(r2)
 180334c:	1801781e 	bne	r3,zero,1803930 <_dtoa_r+0x6f8>
 1803350:	10c000c4 	addi	r3,r2,3
 1803354:	d9802517 	ldw	r6,148(sp)
 1803358:	30c00015 	stw	r3,0(r6)
 180335c:	003fe606 	br	18032f8 <__alt_mem_mem_0+0xff7e32f8>
 1803360:	04e00034 	movhi	r19,32768
 1803364:	9cffffc4 	addi	r19,r19,-1
 1803368:	00800044 	movi	r2,1
 180336c:	8ce6703a 	and	r19,r17,r19
 1803370:	80800015 	stw	r2,0(r16)
 1803374:	9823883a 	mov	r17,r19
 1803378:	003fcc06 	br	18032ac <__alt_mem_mem_0+0xff7e32ac>
 180337c:	d8800204 	addi	r2,sp,8
 1803380:	d8800015 	stw	r2,0(sp)
 1803384:	d9c00104 	addi	r7,sp,4
 1803388:	900b883a 	mov	r5,r18
 180338c:	980d883a 	mov	r6,r19
 1803390:	e009883a 	mov	r4,fp
 1803394:	8820d53a 	srli	r16,r17,20
 1803398:	1806f500 	call	1806f50 <__d2b>
 180339c:	d8800915 	stw	r2,36(sp)
 18033a0:	8001651e 	bne	r16,zero,1803938 <_dtoa_r+0x700>
 18033a4:	dd800217 	ldw	r22,8(sp)
 18033a8:	dc000117 	ldw	r16,4(sp)
 18033ac:	00800804 	movi	r2,32
 18033b0:	b421883a 	add	r16,r22,r16
 18033b4:	80c10c84 	addi	r3,r16,1074
 18033b8:	10c2d10e 	bge	r2,r3,1803f00 <_dtoa_r+0xcc8>
 18033bc:	00801004 	movi	r2,64
 18033c0:	81010484 	addi	r4,r16,1042
 18033c4:	10c7c83a 	sub	r3,r2,r3
 18033c8:	9108d83a 	srl	r4,r18,r4
 18033cc:	88e2983a 	sll	r17,r17,r3
 18033d0:	2448b03a 	or	r4,r4,r17
 18033d4:	180d2e80 	call	180d2e8 <__floatunsidf>
 18033d8:	017f8434 	movhi	r5,65040
 18033dc:	01800044 	movi	r6,1
 18033e0:	1009883a 	mov	r4,r2
 18033e4:	194b883a 	add	r5,r3,r5
 18033e8:	843fffc4 	addi	r16,r16,-1
 18033ec:	d9801115 	stw	r6,68(sp)
 18033f0:	000d883a 	mov	r6,zero
 18033f4:	01cffe34 	movhi	r7,16376
 18033f8:	180c8900 	call	180c890 <__subdf3>
 18033fc:	0198dbf4 	movhi	r6,25455
 1803400:	01cff4f4 	movhi	r7,16339
 1803404:	3190d844 	addi	r6,r6,17249
 1803408:	39e1e9c4 	addi	r7,r7,-30809
 180340c:	1009883a 	mov	r4,r2
 1803410:	180b883a 	mov	r5,r3
 1803414:	180c1780 	call	180c178 <__muldf3>
 1803418:	01a2d874 	movhi	r6,35681
 180341c:	01cff1f4 	movhi	r7,16327
 1803420:	31b22cc4 	addi	r6,r6,-14157
 1803424:	39e28a04 	addi	r7,r7,-30168
 1803428:	180b883a 	mov	r5,r3
 180342c:	1009883a 	mov	r4,r2
 1803430:	180ad8c0 	call	180ad8c <__adddf3>
 1803434:	8009883a 	mov	r4,r16
 1803438:	1029883a 	mov	r20,r2
 180343c:	1823883a 	mov	r17,r3
 1803440:	180d20c0 	call	180d20c <__floatsidf>
 1803444:	019427f4 	movhi	r6,20639
 1803448:	01cff4f4 	movhi	r7,16339
 180344c:	319e7ec4 	addi	r6,r6,31227
 1803450:	39d104c4 	addi	r7,r7,17427
 1803454:	1009883a 	mov	r4,r2
 1803458:	180b883a 	mov	r5,r3
 180345c:	180c1780 	call	180c178 <__muldf3>
 1803460:	100d883a 	mov	r6,r2
 1803464:	180f883a 	mov	r7,r3
 1803468:	a009883a 	mov	r4,r20
 180346c:	880b883a 	mov	r5,r17
 1803470:	180ad8c0 	call	180ad8c <__adddf3>
 1803474:	1009883a 	mov	r4,r2
 1803478:	180b883a 	mov	r5,r3
 180347c:	1029883a 	mov	r20,r2
 1803480:	1823883a 	mov	r17,r3
 1803484:	180d18c0 	call	180d18c <__fixdfsi>
 1803488:	000d883a 	mov	r6,zero
 180348c:	000f883a 	mov	r7,zero
 1803490:	a009883a 	mov	r4,r20
 1803494:	880b883a 	mov	r5,r17
 1803498:	d8800515 	stw	r2,20(sp)
 180349c:	180c0840 	call	180c084 <__ledf2>
 18034a0:	10028716 	blt	r2,zero,1803ec0 <_dtoa_r+0xc88>
 18034a4:	d8c00517 	ldw	r3,20(sp)
 18034a8:	00800584 	movi	r2,22
 18034ac:	10c27536 	bltu	r2,r3,1803e84 <_dtoa_r+0xc4c>
 18034b0:	180490fa 	slli	r2,r3,3
 18034b4:	00c06134 	movhi	r3,388
 18034b8:	18c2b404 	addi	r3,r3,2768
 18034bc:	1885883a 	add	r2,r3,r2
 18034c0:	11000017 	ldw	r4,0(r2)
 18034c4:	11400117 	ldw	r5,4(r2)
 18034c8:	900d883a 	mov	r6,r18
 18034cc:	980f883a 	mov	r7,r19
 18034d0:	180bfa80 	call	180bfa8 <__gedf2>
 18034d4:	00828d0e 	bge	zero,r2,1803f0c <_dtoa_r+0xcd4>
 18034d8:	d9000517 	ldw	r4,20(sp)
 18034dc:	d8000e15 	stw	zero,56(sp)
 18034e0:	213fffc4 	addi	r4,r4,-1
 18034e4:	d9000515 	stw	r4,20(sp)
 18034e8:	b42dc83a 	sub	r22,r22,r16
 18034ec:	b5bfffc4 	addi	r22,r22,-1
 18034f0:	b0026f16 	blt	r22,zero,1803eb0 <_dtoa_r+0xc78>
 18034f4:	d8000815 	stw	zero,32(sp)
 18034f8:	d9c00517 	ldw	r7,20(sp)
 18034fc:	38026416 	blt	r7,zero,1803e90 <_dtoa_r+0xc58>
 1803500:	b1ed883a 	add	r22,r22,r7
 1803504:	d9c00d15 	stw	r7,52(sp)
 1803508:	d8000a15 	stw	zero,40(sp)
 180350c:	d9800317 	ldw	r6,12(sp)
 1803510:	00800244 	movi	r2,9
 1803514:	11811436 	bltu	r2,r6,1803968 <_dtoa_r+0x730>
 1803518:	00800144 	movi	r2,5
 180351c:	1184e10e 	bge	r2,r6,18048a4 <_dtoa_r+0x166c>
 1803520:	31bfff04 	addi	r6,r6,-4
 1803524:	d9800315 	stw	r6,12(sp)
 1803528:	0023883a 	mov	r17,zero
 180352c:	d9800317 	ldw	r6,12(sp)
 1803530:	008000c4 	movi	r2,3
 1803534:	30836726 	beq	r6,r2,18042d4 <_dtoa_r+0x109c>
 1803538:	1183410e 	bge	r2,r6,1804240 <_dtoa_r+0x1008>
 180353c:	d9c00317 	ldw	r7,12(sp)
 1803540:	00800104 	movi	r2,4
 1803544:	38827c26 	beq	r7,r2,1803f38 <_dtoa_r+0xd00>
 1803548:	00800144 	movi	r2,5
 180354c:	3884c41e 	bne	r7,r2,1804860 <_dtoa_r+0x1628>
 1803550:	00800044 	movi	r2,1
 1803554:	d8800b15 	stw	r2,44(sp)
 1803558:	d8c00517 	ldw	r3,20(sp)
 180355c:	d9002217 	ldw	r4,136(sp)
 1803560:	1907883a 	add	r3,r3,r4
 1803564:	19800044 	addi	r6,r3,1
 1803568:	d8c00c15 	stw	r3,48(sp)
 180356c:	d9800615 	stw	r6,24(sp)
 1803570:	0183a40e 	bge	zero,r6,1804404 <_dtoa_r+0x11cc>
 1803574:	d9800617 	ldw	r6,24(sp)
 1803578:	3021883a 	mov	r16,r6
 180357c:	e0001115 	stw	zero,68(fp)
 1803580:	008005c4 	movi	r2,23
 1803584:	1184c92e 	bgeu	r2,r6,18048ac <_dtoa_r+0x1674>
 1803588:	00c00044 	movi	r3,1
 180358c:	00800104 	movi	r2,4
 1803590:	1085883a 	add	r2,r2,r2
 1803594:	11000504 	addi	r4,r2,20
 1803598:	180b883a 	mov	r5,r3
 180359c:	18c00044 	addi	r3,r3,1
 18035a0:	313ffb2e 	bgeu	r6,r4,1803590 <__alt_mem_mem_0+0xff7e3590>
 18035a4:	e1401115 	stw	r5,68(fp)
 18035a8:	e009883a 	mov	r4,fp
 18035ac:	18062bc0 	call	18062bc <_Balloc>
 18035b0:	d8800715 	stw	r2,28(sp)
 18035b4:	e0801015 	stw	r2,64(fp)
 18035b8:	00800384 	movi	r2,14
 18035bc:	1400f736 	bltu	r2,r16,180399c <_dtoa_r+0x764>
 18035c0:	8800f626 	beq	r17,zero,180399c <_dtoa_r+0x764>
 18035c4:	d9c00517 	ldw	r7,20(sp)
 18035c8:	01c39a0e 	bge	zero,r7,1804434 <_dtoa_r+0x11fc>
 18035cc:	388003cc 	andi	r2,r7,15
 18035d0:	100490fa 	slli	r2,r2,3
 18035d4:	382bd13a 	srai	r21,r7,4
 18035d8:	00c06134 	movhi	r3,388
 18035dc:	18c2b404 	addi	r3,r3,2768
 18035e0:	1885883a 	add	r2,r3,r2
 18035e4:	a8c0040c 	andi	r3,r21,16
 18035e8:	12400017 	ldw	r9,0(r2)
 18035ec:	12000117 	ldw	r8,4(r2)
 18035f0:	18037926 	beq	r3,zero,18043d8 <_dtoa_r+0x11a0>
 18035f4:	00806134 	movhi	r2,388
 18035f8:	1082aa04 	addi	r2,r2,2728
 18035fc:	11800817 	ldw	r6,32(r2)
 1803600:	11c00917 	ldw	r7,36(r2)
 1803604:	9009883a 	mov	r4,r18
 1803608:	980b883a 	mov	r5,r19
 180360c:	da001715 	stw	r8,92(sp)
 1803610:	da401615 	stw	r9,88(sp)
 1803614:	180b6380 	call	180b638 <__divdf3>
 1803618:	da001717 	ldw	r8,92(sp)
 180361c:	da401617 	ldw	r9,88(sp)
 1803620:	ad4003cc 	andi	r21,r21,15
 1803624:	040000c4 	movi	r16,3
 1803628:	1023883a 	mov	r17,r2
 180362c:	1829883a 	mov	r20,r3
 1803630:	a8001126 	beq	r21,zero,1803678 <_dtoa_r+0x440>
 1803634:	05c06134 	movhi	r23,388
 1803638:	bdc2aa04 	addi	r23,r23,2728
 180363c:	4805883a 	mov	r2,r9
 1803640:	4007883a 	mov	r3,r8
 1803644:	a980004c 	andi	r6,r21,1
 1803648:	1009883a 	mov	r4,r2
 180364c:	a82bd07a 	srai	r21,r21,1
 1803650:	180b883a 	mov	r5,r3
 1803654:	30000426 	beq	r6,zero,1803668 <_dtoa_r+0x430>
 1803658:	b9800017 	ldw	r6,0(r23)
 180365c:	b9c00117 	ldw	r7,4(r23)
 1803660:	84000044 	addi	r16,r16,1
 1803664:	180c1780 	call	180c178 <__muldf3>
 1803668:	bdc00204 	addi	r23,r23,8
 180366c:	a83ff51e 	bne	r21,zero,1803644 <__alt_mem_mem_0+0xff7e3644>
 1803670:	1013883a 	mov	r9,r2
 1803674:	1811883a 	mov	r8,r3
 1803678:	480d883a 	mov	r6,r9
 180367c:	400f883a 	mov	r7,r8
 1803680:	8809883a 	mov	r4,r17
 1803684:	a00b883a 	mov	r5,r20
 1803688:	180b6380 	call	180b638 <__divdf3>
 180368c:	d8800f15 	stw	r2,60(sp)
 1803690:	d8c01015 	stw	r3,64(sp)
 1803694:	d8c00e17 	ldw	r3,56(sp)
 1803698:	18000626 	beq	r3,zero,18036b4 <_dtoa_r+0x47c>
 180369c:	d9000f17 	ldw	r4,60(sp)
 18036a0:	d9401017 	ldw	r5,64(sp)
 18036a4:	000d883a 	mov	r6,zero
 18036a8:	01cffc34 	movhi	r7,16368
 18036ac:	180c0840 	call	180c084 <__ledf2>
 18036b0:	10040b16 	blt	r2,zero,18046e0 <_dtoa_r+0x14a8>
 18036b4:	8009883a 	mov	r4,r16
 18036b8:	180d20c0 	call	180d20c <__floatsidf>
 18036bc:	d9800f17 	ldw	r6,60(sp)
 18036c0:	d9c01017 	ldw	r7,64(sp)
 18036c4:	1009883a 	mov	r4,r2
 18036c8:	180b883a 	mov	r5,r3
 18036cc:	180c1780 	call	180c178 <__muldf3>
 18036d0:	000d883a 	mov	r6,zero
 18036d4:	01d00734 	movhi	r7,16412
 18036d8:	1009883a 	mov	r4,r2
 18036dc:	180b883a 	mov	r5,r3
 18036e0:	180ad8c0 	call	180ad8c <__adddf3>
 18036e4:	1021883a 	mov	r16,r2
 18036e8:	d8800617 	ldw	r2,24(sp)
 18036ec:	047f3034 	movhi	r17,64704
 18036f0:	1c63883a 	add	r17,r3,r17
 18036f4:	10031826 	beq	r2,zero,1804358 <_dtoa_r+0x1120>
 18036f8:	d8c00517 	ldw	r3,20(sp)
 18036fc:	db000617 	ldw	r12,24(sp)
 1803700:	d8c01315 	stw	r3,76(sp)
 1803704:	d9000b17 	ldw	r4,44(sp)
 1803708:	20038f26 	beq	r4,zero,1804548 <_dtoa_r+0x1310>
 180370c:	60bfffc4 	addi	r2,r12,-1
 1803710:	100490fa 	slli	r2,r2,3
 1803714:	00c06134 	movhi	r3,388
 1803718:	18c2b404 	addi	r3,r3,2768
 180371c:	1885883a 	add	r2,r3,r2
 1803720:	11800017 	ldw	r6,0(r2)
 1803724:	11c00117 	ldw	r7,4(r2)
 1803728:	d8800717 	ldw	r2,28(sp)
 180372c:	0009883a 	mov	r4,zero
 1803730:	014ff834 	movhi	r5,16352
 1803734:	db001615 	stw	r12,88(sp)
 1803738:	15c00044 	addi	r23,r2,1
 180373c:	180b6380 	call	180b638 <__divdf3>
 1803740:	800d883a 	mov	r6,r16
 1803744:	880f883a 	mov	r7,r17
 1803748:	1009883a 	mov	r4,r2
 180374c:	180b883a 	mov	r5,r3
 1803750:	180c8900 	call	180c890 <__subdf3>
 1803754:	d9401017 	ldw	r5,64(sp)
 1803758:	d9000f17 	ldw	r4,60(sp)
 180375c:	102b883a 	mov	r21,r2
 1803760:	d8c01215 	stw	r3,72(sp)
 1803764:	180d18c0 	call	180d18c <__fixdfsi>
 1803768:	1009883a 	mov	r4,r2
 180376c:	1029883a 	mov	r20,r2
 1803770:	180d20c0 	call	180d20c <__floatsidf>
 1803774:	d9000f17 	ldw	r4,60(sp)
 1803778:	d9401017 	ldw	r5,64(sp)
 180377c:	100d883a 	mov	r6,r2
 1803780:	180f883a 	mov	r7,r3
 1803784:	180c8900 	call	180c890 <__subdf3>
 1803788:	1823883a 	mov	r17,r3
 180378c:	d8c00717 	ldw	r3,28(sp)
 1803790:	d9401217 	ldw	r5,72(sp)
 1803794:	a2000c04 	addi	r8,r20,48
 1803798:	1021883a 	mov	r16,r2
 180379c:	1a000005 	stb	r8,0(r3)
 18037a0:	800d883a 	mov	r6,r16
 18037a4:	880f883a 	mov	r7,r17
 18037a8:	a809883a 	mov	r4,r21
 18037ac:	4029883a 	mov	r20,r8
 18037b0:	180bfa80 	call	180bfa8 <__gedf2>
 18037b4:	00841d16 	blt	zero,r2,180482c <_dtoa_r+0x15f4>
 18037b8:	800d883a 	mov	r6,r16
 18037bc:	880f883a 	mov	r7,r17
 18037c0:	0009883a 	mov	r4,zero
 18037c4:	014ffc34 	movhi	r5,16368
 18037c8:	180c8900 	call	180c890 <__subdf3>
 18037cc:	d9401217 	ldw	r5,72(sp)
 18037d0:	100d883a 	mov	r6,r2
 18037d4:	180f883a 	mov	r7,r3
 18037d8:	a809883a 	mov	r4,r21
 18037dc:	180bfa80 	call	180bfa8 <__gedf2>
 18037e0:	db001617 	ldw	r12,88(sp)
 18037e4:	00840e16 	blt	zero,r2,1804820 <_dtoa_r+0x15e8>
 18037e8:	00800044 	movi	r2,1
 18037ec:	13006b0e 	bge	r2,r12,180399c <_dtoa_r+0x764>
 18037f0:	d9000717 	ldw	r4,28(sp)
 18037f4:	dd800f15 	stw	r22,60(sp)
 18037f8:	dcc01015 	stw	r19,64(sp)
 18037fc:	2319883a 	add	r12,r4,r12
 1803800:	dcc01217 	ldw	r19,72(sp)
 1803804:	602d883a 	mov	r22,r12
 1803808:	dc801215 	stw	r18,72(sp)
 180380c:	b825883a 	mov	r18,r23
 1803810:	00000906 	br	1803838 <_dtoa_r+0x600>
 1803814:	180c8900 	call	180c890 <__subdf3>
 1803818:	a80d883a 	mov	r6,r21
 180381c:	980f883a 	mov	r7,r19
 1803820:	1009883a 	mov	r4,r2
 1803824:	180b883a 	mov	r5,r3
 1803828:	180c0840 	call	180c084 <__ledf2>
 180382c:	1003e816 	blt	r2,zero,18047d0 <_dtoa_r+0x1598>
 1803830:	b825883a 	mov	r18,r23
 1803834:	bd83e926 	beq	r23,r22,18047dc <_dtoa_r+0x15a4>
 1803838:	a809883a 	mov	r4,r21
 180383c:	980b883a 	mov	r5,r19
 1803840:	000d883a 	mov	r6,zero
 1803844:	01d00934 	movhi	r7,16420
 1803848:	180c1780 	call	180c178 <__muldf3>
 180384c:	000d883a 	mov	r6,zero
 1803850:	01d00934 	movhi	r7,16420
 1803854:	8009883a 	mov	r4,r16
 1803858:	880b883a 	mov	r5,r17
 180385c:	102b883a 	mov	r21,r2
 1803860:	1827883a 	mov	r19,r3
 1803864:	180c1780 	call	180c178 <__muldf3>
 1803868:	180b883a 	mov	r5,r3
 180386c:	1009883a 	mov	r4,r2
 1803870:	1821883a 	mov	r16,r3
 1803874:	1023883a 	mov	r17,r2
 1803878:	180d18c0 	call	180d18c <__fixdfsi>
 180387c:	1009883a 	mov	r4,r2
 1803880:	1029883a 	mov	r20,r2
 1803884:	180d20c0 	call	180d20c <__floatsidf>
 1803888:	8809883a 	mov	r4,r17
 180388c:	800b883a 	mov	r5,r16
 1803890:	100d883a 	mov	r6,r2
 1803894:	180f883a 	mov	r7,r3
 1803898:	180c8900 	call	180c890 <__subdf3>
 180389c:	a5000c04 	addi	r20,r20,48
 18038a0:	a80d883a 	mov	r6,r21
 18038a4:	980f883a 	mov	r7,r19
 18038a8:	1009883a 	mov	r4,r2
 18038ac:	180b883a 	mov	r5,r3
 18038b0:	95000005 	stb	r20,0(r18)
 18038b4:	1021883a 	mov	r16,r2
 18038b8:	1823883a 	mov	r17,r3
 18038bc:	180c0840 	call	180c084 <__ledf2>
 18038c0:	bdc00044 	addi	r23,r23,1
 18038c4:	800d883a 	mov	r6,r16
 18038c8:	880f883a 	mov	r7,r17
 18038cc:	0009883a 	mov	r4,zero
 18038d0:	014ffc34 	movhi	r5,16368
 18038d4:	103fcf0e 	bge	r2,zero,1803814 <__alt_mem_mem_0+0xff7e3814>
 18038d8:	d8c01317 	ldw	r3,76(sp)
 18038dc:	d8c00515 	stw	r3,20(sp)
 18038e0:	d9400917 	ldw	r5,36(sp)
 18038e4:	e009883a 	mov	r4,fp
 18038e8:	18063640 	call	1806364 <_Bfree>
 18038ec:	d9000517 	ldw	r4,20(sp)
 18038f0:	d9802317 	ldw	r6,140(sp)
 18038f4:	d9c02517 	ldw	r7,148(sp)
 18038f8:	b8000005 	stb	zero,0(r23)
 18038fc:	20800044 	addi	r2,r4,1
 1803900:	30800015 	stw	r2,0(r6)
 1803904:	3802aa26 	beq	r7,zero,18043b0 <_dtoa_r+0x1178>
 1803908:	3dc00015 	stw	r23,0(r7)
 180390c:	d8800717 	ldw	r2,28(sp)
 1803910:	003e7906 	br	18032f8 <__alt_mem_mem_0+0xff7e32f8>
 1803914:	00800434 	movhi	r2,16
 1803918:	10bfffc4 	addi	r2,r2,-1
 180391c:	88a2703a 	and	r17,r17,r2
 1803920:	883e851e 	bne	r17,zero,1803338 <__alt_mem_mem_0+0xff7e3338>
 1803924:	00806134 	movhi	r2,388
 1803928:	10829504 	addi	r2,r2,2644
 180392c:	003e8406 	br	1803340 <__alt_mem_mem_0+0xff7e3340>
 1803930:	10c00204 	addi	r3,r2,8
 1803934:	003e8706 	br	1803354 <__alt_mem_mem_0+0xff7e3354>
 1803938:	01400434 	movhi	r5,16
 180393c:	297fffc4 	addi	r5,r5,-1
 1803940:	994a703a 	and	r5,r19,r5
 1803944:	9009883a 	mov	r4,r18
 1803948:	843f0044 	addi	r16,r16,-1023
 180394c:	294ffc34 	orhi	r5,r5,16368
 1803950:	dd800217 	ldw	r22,8(sp)
 1803954:	d8001115 	stw	zero,68(sp)
 1803958:	003ea506 	br	18033f0 <__alt_mem_mem_0+0xff7e33f0>
 180395c:	00806134 	movhi	r2,388
 1803960:	10828c04 	addi	r2,r2,2608
 1803964:	003e6406 	br	18032f8 <__alt_mem_mem_0+0xff7e32f8>
 1803968:	e0001115 	stw	zero,68(fp)
 180396c:	000b883a 	mov	r5,zero
 1803970:	e009883a 	mov	r4,fp
 1803974:	18062bc0 	call	18062bc <_Balloc>
 1803978:	01bfffc4 	movi	r6,-1
 180397c:	01c00044 	movi	r7,1
 1803980:	d8800715 	stw	r2,28(sp)
 1803984:	d9800c15 	stw	r6,48(sp)
 1803988:	e0801015 	stw	r2,64(fp)
 180398c:	d8000315 	stw	zero,12(sp)
 1803990:	d9c00b15 	stw	r7,44(sp)
 1803994:	d9800615 	stw	r6,24(sp)
 1803998:	d8002215 	stw	zero,136(sp)
 180399c:	d8800117 	ldw	r2,4(sp)
 18039a0:	10008916 	blt	r2,zero,1803bc8 <_dtoa_r+0x990>
 18039a4:	d9000517 	ldw	r4,20(sp)
 18039a8:	00c00384 	movi	r3,14
 18039ac:	19008616 	blt	r3,r4,1803bc8 <_dtoa_r+0x990>
 18039b0:	200490fa 	slli	r2,r4,3
 18039b4:	00c06134 	movhi	r3,388
 18039b8:	d9802217 	ldw	r6,136(sp)
 18039bc:	18c2b404 	addi	r3,r3,2768
 18039c0:	1885883a 	add	r2,r3,r2
 18039c4:	14000017 	ldw	r16,0(r2)
 18039c8:	14400117 	ldw	r17,4(r2)
 18039cc:	30016316 	blt	r6,zero,1803f5c <_dtoa_r+0xd24>
 18039d0:	800d883a 	mov	r6,r16
 18039d4:	880f883a 	mov	r7,r17
 18039d8:	9009883a 	mov	r4,r18
 18039dc:	980b883a 	mov	r5,r19
 18039e0:	180b6380 	call	180b638 <__divdf3>
 18039e4:	180b883a 	mov	r5,r3
 18039e8:	1009883a 	mov	r4,r2
 18039ec:	180d18c0 	call	180d18c <__fixdfsi>
 18039f0:	1009883a 	mov	r4,r2
 18039f4:	102b883a 	mov	r21,r2
 18039f8:	180d20c0 	call	180d20c <__floatsidf>
 18039fc:	800d883a 	mov	r6,r16
 1803a00:	880f883a 	mov	r7,r17
 1803a04:	1009883a 	mov	r4,r2
 1803a08:	180b883a 	mov	r5,r3
 1803a0c:	180c1780 	call	180c178 <__muldf3>
 1803a10:	100d883a 	mov	r6,r2
 1803a14:	180f883a 	mov	r7,r3
 1803a18:	9009883a 	mov	r4,r18
 1803a1c:	980b883a 	mov	r5,r19
 1803a20:	180c8900 	call	180c890 <__subdf3>
 1803a24:	d9c00717 	ldw	r7,28(sp)
 1803a28:	1009883a 	mov	r4,r2
 1803a2c:	a8800c04 	addi	r2,r21,48
 1803a30:	38800005 	stb	r2,0(r7)
 1803a34:	3dc00044 	addi	r23,r7,1
 1803a38:	d9c00617 	ldw	r7,24(sp)
 1803a3c:	01800044 	movi	r6,1
 1803a40:	180b883a 	mov	r5,r3
 1803a44:	2005883a 	mov	r2,r4
 1803a48:	39803826 	beq	r7,r6,1803b2c <_dtoa_r+0x8f4>
 1803a4c:	000d883a 	mov	r6,zero
 1803a50:	01d00934 	movhi	r7,16420
 1803a54:	180c1780 	call	180c178 <__muldf3>
 1803a58:	000d883a 	mov	r6,zero
 1803a5c:	000f883a 	mov	r7,zero
 1803a60:	1009883a 	mov	r4,r2
 1803a64:	180b883a 	mov	r5,r3
 1803a68:	1025883a 	mov	r18,r2
 1803a6c:	1827883a 	mov	r19,r3
 1803a70:	180bf200 	call	180bf20 <__eqdf2>
 1803a74:	103f9a26 	beq	r2,zero,18038e0 <__alt_mem_mem_0+0xff7e38e0>
 1803a78:	d9c00617 	ldw	r7,24(sp)
 1803a7c:	d8c00717 	ldw	r3,28(sp)
 1803a80:	b829883a 	mov	r20,r23
 1803a84:	38bfffc4 	addi	r2,r7,-1
 1803a88:	18ad883a 	add	r22,r3,r2
 1803a8c:	00000a06 	br	1803ab8 <_dtoa_r+0x880>
 1803a90:	180c1780 	call	180c178 <__muldf3>
 1803a94:	000d883a 	mov	r6,zero
 1803a98:	000f883a 	mov	r7,zero
 1803a9c:	1009883a 	mov	r4,r2
 1803aa0:	180b883a 	mov	r5,r3
 1803aa4:	1025883a 	mov	r18,r2
 1803aa8:	1827883a 	mov	r19,r3
 1803aac:	b829883a 	mov	r20,r23
 1803ab0:	180bf200 	call	180bf20 <__eqdf2>
 1803ab4:	103f8a26 	beq	r2,zero,18038e0 <__alt_mem_mem_0+0xff7e38e0>
 1803ab8:	800d883a 	mov	r6,r16
 1803abc:	880f883a 	mov	r7,r17
 1803ac0:	9009883a 	mov	r4,r18
 1803ac4:	980b883a 	mov	r5,r19
 1803ac8:	180b6380 	call	180b638 <__divdf3>
 1803acc:	180b883a 	mov	r5,r3
 1803ad0:	1009883a 	mov	r4,r2
 1803ad4:	180d18c0 	call	180d18c <__fixdfsi>
 1803ad8:	1009883a 	mov	r4,r2
 1803adc:	102b883a 	mov	r21,r2
 1803ae0:	180d20c0 	call	180d20c <__floatsidf>
 1803ae4:	800d883a 	mov	r6,r16
 1803ae8:	880f883a 	mov	r7,r17
 1803aec:	1009883a 	mov	r4,r2
 1803af0:	180b883a 	mov	r5,r3
 1803af4:	180c1780 	call	180c178 <__muldf3>
 1803af8:	100d883a 	mov	r6,r2
 1803afc:	180f883a 	mov	r7,r3
 1803b00:	9009883a 	mov	r4,r18
 1803b04:	980b883a 	mov	r5,r19
 1803b08:	180c8900 	call	180c890 <__subdf3>
 1803b0c:	aa000c04 	addi	r8,r21,48
 1803b10:	a2000005 	stb	r8,0(r20)
 1803b14:	000d883a 	mov	r6,zero
 1803b18:	01d00934 	movhi	r7,16420
 1803b1c:	1009883a 	mov	r4,r2
 1803b20:	180b883a 	mov	r5,r3
 1803b24:	a5c00044 	addi	r23,r20,1
 1803b28:	b53fd91e 	bne	r22,r20,1803a90 <__alt_mem_mem_0+0xff7e3a90>
 1803b2c:	100d883a 	mov	r6,r2
 1803b30:	180f883a 	mov	r7,r3
 1803b34:	1009883a 	mov	r4,r2
 1803b38:	180b883a 	mov	r5,r3
 1803b3c:	180ad8c0 	call	180ad8c <__adddf3>
 1803b40:	100d883a 	mov	r6,r2
 1803b44:	180f883a 	mov	r7,r3
 1803b48:	8009883a 	mov	r4,r16
 1803b4c:	880b883a 	mov	r5,r17
 1803b50:	1027883a 	mov	r19,r2
 1803b54:	1825883a 	mov	r18,r3
 1803b58:	180c0840 	call	180c084 <__ledf2>
 1803b5c:	10000816 	blt	r2,zero,1803b80 <_dtoa_r+0x948>
 1803b60:	980d883a 	mov	r6,r19
 1803b64:	900f883a 	mov	r7,r18
 1803b68:	8009883a 	mov	r4,r16
 1803b6c:	880b883a 	mov	r5,r17
 1803b70:	180bf200 	call	180bf20 <__eqdf2>
 1803b74:	103f5a1e 	bne	r2,zero,18038e0 <__alt_mem_mem_0+0xff7e38e0>
 1803b78:	ad40004c 	andi	r21,r21,1
 1803b7c:	a83f5826 	beq	r21,zero,18038e0 <__alt_mem_mem_0+0xff7e38e0>
 1803b80:	bd3fffc3 	ldbu	r20,-1(r23)
 1803b84:	b8bfffc4 	addi	r2,r23,-1
 1803b88:	1007883a 	mov	r3,r2
 1803b8c:	01400e44 	movi	r5,57
 1803b90:	d9800717 	ldw	r6,28(sp)
 1803b94:	00000506 	br	1803bac <_dtoa_r+0x974>
 1803b98:	18ffffc4 	addi	r3,r3,-1
 1803b9c:	11824726 	beq	r2,r6,18044bc <_dtoa_r+0x1284>
 1803ba0:	1d000003 	ldbu	r20,0(r3)
 1803ba4:	102f883a 	mov	r23,r2
 1803ba8:	10bfffc4 	addi	r2,r2,-1
 1803bac:	a1003fcc 	andi	r4,r20,255
 1803bb0:	2100201c 	xori	r4,r4,128
 1803bb4:	213fe004 	addi	r4,r4,-128
 1803bb8:	217ff726 	beq	r4,r5,1803b98 <__alt_mem_mem_0+0xff7e3b98>
 1803bbc:	a2000044 	addi	r8,r20,1
 1803bc0:	12000005 	stb	r8,0(r2)
 1803bc4:	003f4606 	br	18038e0 <__alt_mem_mem_0+0xff7e38e0>
 1803bc8:	d9000b17 	ldw	r4,44(sp)
 1803bcc:	2000c826 	beq	r4,zero,1803ef0 <_dtoa_r+0xcb8>
 1803bd0:	d9800317 	ldw	r6,12(sp)
 1803bd4:	00c00044 	movi	r3,1
 1803bd8:	1980f90e 	bge	r3,r6,1803fc0 <_dtoa_r+0xd88>
 1803bdc:	d8800617 	ldw	r2,24(sp)
 1803be0:	d8c00a17 	ldw	r3,40(sp)
 1803be4:	157fffc4 	addi	r21,r2,-1
 1803be8:	1d41f316 	blt	r3,r21,18043b8 <_dtoa_r+0x1180>
 1803bec:	1d6bc83a 	sub	r21,r3,r21
 1803bf0:	d9c00617 	ldw	r7,24(sp)
 1803bf4:	3802aa16 	blt	r7,zero,18046a0 <_dtoa_r+0x1468>
 1803bf8:	dd000817 	ldw	r20,32(sp)
 1803bfc:	d8800617 	ldw	r2,24(sp)
 1803c00:	d8c00817 	ldw	r3,32(sp)
 1803c04:	01400044 	movi	r5,1
 1803c08:	e009883a 	mov	r4,fp
 1803c0c:	1887883a 	add	r3,r3,r2
 1803c10:	d8c00815 	stw	r3,32(sp)
 1803c14:	b0ad883a 	add	r22,r22,r2
 1803c18:	18066c80 	call	18066c8 <__i2b>
 1803c1c:	1023883a 	mov	r17,r2
 1803c20:	a0000826 	beq	r20,zero,1803c44 <_dtoa_r+0xa0c>
 1803c24:	0580070e 	bge	zero,r22,1803c44 <_dtoa_r+0xa0c>
 1803c28:	a005883a 	mov	r2,r20
 1803c2c:	b500b916 	blt	r22,r20,1803f14 <_dtoa_r+0xcdc>
 1803c30:	d9000817 	ldw	r4,32(sp)
 1803c34:	a0a9c83a 	sub	r20,r20,r2
 1803c38:	b0adc83a 	sub	r22,r22,r2
 1803c3c:	2089c83a 	sub	r4,r4,r2
 1803c40:	d9000815 	stw	r4,32(sp)
 1803c44:	d9800a17 	ldw	r6,40(sp)
 1803c48:	0181810e 	bge	zero,r6,1804250 <_dtoa_r+0x1018>
 1803c4c:	d9c00b17 	ldw	r7,44(sp)
 1803c50:	3800b326 	beq	r7,zero,1803f20 <_dtoa_r+0xce8>
 1803c54:	a800b226 	beq	r21,zero,1803f20 <_dtoa_r+0xce8>
 1803c58:	880b883a 	mov	r5,r17
 1803c5c:	a80d883a 	mov	r6,r21
 1803c60:	e009883a 	mov	r4,fp
 1803c64:	18068fc0 	call	18068fc <__pow5mult>
 1803c68:	d9800917 	ldw	r6,36(sp)
 1803c6c:	100b883a 	mov	r5,r2
 1803c70:	e009883a 	mov	r4,fp
 1803c74:	1023883a 	mov	r17,r2
 1803c78:	18067040 	call	1806704 <__multiply>
 1803c7c:	1021883a 	mov	r16,r2
 1803c80:	d8800a17 	ldw	r2,40(sp)
 1803c84:	d9400917 	ldw	r5,36(sp)
 1803c88:	e009883a 	mov	r4,fp
 1803c8c:	1545c83a 	sub	r2,r2,r21
 1803c90:	d8800a15 	stw	r2,40(sp)
 1803c94:	18063640 	call	1806364 <_Bfree>
 1803c98:	d8c00a17 	ldw	r3,40(sp)
 1803c9c:	18009f1e 	bne	r3,zero,1803f1c <_dtoa_r+0xce4>
 1803ca0:	05c00044 	movi	r23,1
 1803ca4:	e009883a 	mov	r4,fp
 1803ca8:	b80b883a 	mov	r5,r23
 1803cac:	18066c80 	call	18066c8 <__i2b>
 1803cb0:	d9000d17 	ldw	r4,52(sp)
 1803cb4:	102b883a 	mov	r21,r2
 1803cb8:	2000ce26 	beq	r4,zero,1803ff4 <_dtoa_r+0xdbc>
 1803cbc:	200d883a 	mov	r6,r4
 1803cc0:	100b883a 	mov	r5,r2
 1803cc4:	e009883a 	mov	r4,fp
 1803cc8:	18068fc0 	call	18068fc <__pow5mult>
 1803ccc:	d9800317 	ldw	r6,12(sp)
 1803cd0:	102b883a 	mov	r21,r2
 1803cd4:	b981810e 	bge	r23,r6,18042dc <_dtoa_r+0x10a4>
 1803cd8:	0027883a 	mov	r19,zero
 1803cdc:	a8800417 	ldw	r2,16(r21)
 1803ce0:	05c00804 	movi	r23,32
 1803ce4:	10800104 	addi	r2,r2,4
 1803ce8:	1085883a 	add	r2,r2,r2
 1803cec:	1085883a 	add	r2,r2,r2
 1803cf0:	a885883a 	add	r2,r21,r2
 1803cf4:	11000017 	ldw	r4,0(r2)
 1803cf8:	18065b00 	call	18065b0 <__hi0bits>
 1803cfc:	b885c83a 	sub	r2,r23,r2
 1803d00:	1585883a 	add	r2,r2,r22
 1803d04:	108007cc 	andi	r2,r2,31
 1803d08:	1000b326 	beq	r2,zero,1803fd8 <_dtoa_r+0xda0>
 1803d0c:	00c00804 	movi	r3,32
 1803d10:	1887c83a 	sub	r3,r3,r2
 1803d14:	01000104 	movi	r4,4
 1803d18:	20c2cd0e 	bge	r4,r3,1804850 <_dtoa_r+0x1618>
 1803d1c:	00c00704 	movi	r3,28
 1803d20:	1885c83a 	sub	r2,r3,r2
 1803d24:	d8c00817 	ldw	r3,32(sp)
 1803d28:	a0a9883a 	add	r20,r20,r2
 1803d2c:	b0ad883a 	add	r22,r22,r2
 1803d30:	1887883a 	add	r3,r3,r2
 1803d34:	d8c00815 	stw	r3,32(sp)
 1803d38:	d9800817 	ldw	r6,32(sp)
 1803d3c:	0180040e 	bge	zero,r6,1803d50 <_dtoa_r+0xb18>
 1803d40:	800b883a 	mov	r5,r16
 1803d44:	e009883a 	mov	r4,fp
 1803d48:	1806a3c0 	call	1806a3c <__lshift>
 1803d4c:	1021883a 	mov	r16,r2
 1803d50:	0580050e 	bge	zero,r22,1803d68 <_dtoa_r+0xb30>
 1803d54:	a80b883a 	mov	r5,r21
 1803d58:	b00d883a 	mov	r6,r22
 1803d5c:	e009883a 	mov	r4,fp
 1803d60:	1806a3c0 	call	1806a3c <__lshift>
 1803d64:	102b883a 	mov	r21,r2
 1803d68:	d9c00e17 	ldw	r7,56(sp)
 1803d6c:	3801211e 	bne	r7,zero,18041f4 <_dtoa_r+0xfbc>
 1803d70:	d9800617 	ldw	r6,24(sp)
 1803d74:	0181380e 	bge	zero,r6,1804258 <_dtoa_r+0x1020>
 1803d78:	d8c00b17 	ldw	r3,44(sp)
 1803d7c:	1800ab1e 	bne	r3,zero,180402c <_dtoa_r+0xdf4>
 1803d80:	dc800717 	ldw	r18,28(sp)
 1803d84:	dcc00617 	ldw	r19,24(sp)
 1803d88:	9029883a 	mov	r20,r18
 1803d8c:	00000206 	br	1803d98 <_dtoa_r+0xb60>
 1803d90:	180638c0 	call	180638c <__multadd>
 1803d94:	1021883a 	mov	r16,r2
 1803d98:	a80b883a 	mov	r5,r21
 1803d9c:	8009883a 	mov	r4,r16
 1803da0:	18030380 	call	1803038 <quorem>
 1803da4:	10800c04 	addi	r2,r2,48
 1803da8:	90800005 	stb	r2,0(r18)
 1803dac:	94800044 	addi	r18,r18,1
 1803db0:	9507c83a 	sub	r3,r18,r20
 1803db4:	000f883a 	mov	r7,zero
 1803db8:	01800284 	movi	r6,10
 1803dbc:	800b883a 	mov	r5,r16
 1803dc0:	e009883a 	mov	r4,fp
 1803dc4:	1cfff216 	blt	r3,r19,1803d90 <__alt_mem_mem_0+0xff7e3d90>
 1803dc8:	1011883a 	mov	r8,r2
 1803dcc:	d8800617 	ldw	r2,24(sp)
 1803dd0:	0082370e 	bge	zero,r2,18046b0 <_dtoa_r+0x1478>
 1803dd4:	d9000717 	ldw	r4,28(sp)
 1803dd8:	0025883a 	mov	r18,zero
 1803ddc:	20af883a 	add	r23,r4,r2
 1803de0:	01800044 	movi	r6,1
 1803de4:	800b883a 	mov	r5,r16
 1803de8:	e009883a 	mov	r4,fp
 1803dec:	da001715 	stw	r8,92(sp)
 1803df0:	1806a3c0 	call	1806a3c <__lshift>
 1803df4:	a80b883a 	mov	r5,r21
 1803df8:	1009883a 	mov	r4,r2
 1803dfc:	d8800915 	stw	r2,36(sp)
 1803e00:	1806b840 	call	1806b84 <__mcmp>
 1803e04:	da001717 	ldw	r8,92(sp)
 1803e08:	0081800e 	bge	zero,r2,180440c <_dtoa_r+0x11d4>
 1803e0c:	b93fffc3 	ldbu	r4,-1(r23)
 1803e10:	b8bfffc4 	addi	r2,r23,-1
 1803e14:	1007883a 	mov	r3,r2
 1803e18:	01800e44 	movi	r6,57
 1803e1c:	d9c00717 	ldw	r7,28(sp)
 1803e20:	00000506 	br	1803e38 <_dtoa_r+0xc00>
 1803e24:	18ffffc4 	addi	r3,r3,-1
 1803e28:	11c12326 	beq	r2,r7,18042b8 <_dtoa_r+0x1080>
 1803e2c:	19000003 	ldbu	r4,0(r3)
 1803e30:	102f883a 	mov	r23,r2
 1803e34:	10bfffc4 	addi	r2,r2,-1
 1803e38:	21403fcc 	andi	r5,r4,255
 1803e3c:	2940201c 	xori	r5,r5,128
 1803e40:	297fe004 	addi	r5,r5,-128
 1803e44:	29bff726 	beq	r5,r6,1803e24 <__alt_mem_mem_0+0xff7e3e24>
 1803e48:	21000044 	addi	r4,r4,1
 1803e4c:	11000005 	stb	r4,0(r2)
 1803e50:	a80b883a 	mov	r5,r21
 1803e54:	e009883a 	mov	r4,fp
 1803e58:	18063640 	call	1806364 <_Bfree>
 1803e5c:	883ea026 	beq	r17,zero,18038e0 <__alt_mem_mem_0+0xff7e38e0>
 1803e60:	90000426 	beq	r18,zero,1803e74 <_dtoa_r+0xc3c>
 1803e64:	94400326 	beq	r18,r17,1803e74 <_dtoa_r+0xc3c>
 1803e68:	900b883a 	mov	r5,r18
 1803e6c:	e009883a 	mov	r4,fp
 1803e70:	18063640 	call	1806364 <_Bfree>
 1803e74:	880b883a 	mov	r5,r17
 1803e78:	e009883a 	mov	r4,fp
 1803e7c:	18063640 	call	1806364 <_Bfree>
 1803e80:	003e9706 	br	18038e0 <__alt_mem_mem_0+0xff7e38e0>
 1803e84:	01800044 	movi	r6,1
 1803e88:	d9800e15 	stw	r6,56(sp)
 1803e8c:	003d9606 	br	18034e8 <__alt_mem_mem_0+0xff7e34e8>
 1803e90:	d8800817 	ldw	r2,32(sp)
 1803e94:	d8c00517 	ldw	r3,20(sp)
 1803e98:	d8000d15 	stw	zero,52(sp)
 1803e9c:	10c5c83a 	sub	r2,r2,r3
 1803ea0:	00c9c83a 	sub	r4,zero,r3
 1803ea4:	d8800815 	stw	r2,32(sp)
 1803ea8:	d9000a15 	stw	r4,40(sp)
 1803eac:	003d9706 	br	180350c <__alt_mem_mem_0+0xff7e350c>
 1803eb0:	05adc83a 	sub	r22,zero,r22
 1803eb4:	dd800815 	stw	r22,32(sp)
 1803eb8:	002d883a 	mov	r22,zero
 1803ebc:	003d8e06 	br	18034f8 <__alt_mem_mem_0+0xff7e34f8>
 1803ec0:	d9000517 	ldw	r4,20(sp)
 1803ec4:	180d20c0 	call	180d20c <__floatsidf>
 1803ec8:	100d883a 	mov	r6,r2
 1803ecc:	180f883a 	mov	r7,r3
 1803ed0:	a009883a 	mov	r4,r20
 1803ed4:	880b883a 	mov	r5,r17
 1803ed8:	180bf200 	call	180bf20 <__eqdf2>
 1803edc:	103d7126 	beq	r2,zero,18034a4 <__alt_mem_mem_0+0xff7e34a4>
 1803ee0:	d9c00517 	ldw	r7,20(sp)
 1803ee4:	39ffffc4 	addi	r7,r7,-1
 1803ee8:	d9c00515 	stw	r7,20(sp)
 1803eec:	003d6d06 	br	18034a4 <__alt_mem_mem_0+0xff7e34a4>
 1803ef0:	dd400a17 	ldw	r21,40(sp)
 1803ef4:	dd000817 	ldw	r20,32(sp)
 1803ef8:	0023883a 	mov	r17,zero
 1803efc:	003f4806 	br	1803c20 <__alt_mem_mem_0+0xff7e3c20>
 1803f00:	10e3c83a 	sub	r17,r2,r3
 1803f04:	9448983a 	sll	r4,r18,r17
 1803f08:	003d3206 	br	18033d4 <__alt_mem_mem_0+0xff7e33d4>
 1803f0c:	d8000e15 	stw	zero,56(sp)
 1803f10:	003d7506 	br	18034e8 <__alt_mem_mem_0+0xff7e34e8>
 1803f14:	b005883a 	mov	r2,r22
 1803f18:	003f4506 	br	1803c30 <__alt_mem_mem_0+0xff7e3c30>
 1803f1c:	dc000915 	stw	r16,36(sp)
 1803f20:	d9800a17 	ldw	r6,40(sp)
 1803f24:	d9400917 	ldw	r5,36(sp)
 1803f28:	e009883a 	mov	r4,fp
 1803f2c:	18068fc0 	call	18068fc <__pow5mult>
 1803f30:	1021883a 	mov	r16,r2
 1803f34:	003f5a06 	br	1803ca0 <__alt_mem_mem_0+0xff7e3ca0>
 1803f38:	01c00044 	movi	r7,1
 1803f3c:	d9c00b15 	stw	r7,44(sp)
 1803f40:	d8802217 	ldw	r2,136(sp)
 1803f44:	0081280e 	bge	zero,r2,18043e8 <_dtoa_r+0x11b0>
 1803f48:	100d883a 	mov	r6,r2
 1803f4c:	1021883a 	mov	r16,r2
 1803f50:	d8800c15 	stw	r2,48(sp)
 1803f54:	d8800615 	stw	r2,24(sp)
 1803f58:	003d8806 	br	180357c <__alt_mem_mem_0+0xff7e357c>
 1803f5c:	d8800617 	ldw	r2,24(sp)
 1803f60:	00be9b16 	blt	zero,r2,18039d0 <__alt_mem_mem_0+0xff7e39d0>
 1803f64:	10010f1e 	bne	r2,zero,18043a4 <_dtoa_r+0x116c>
 1803f68:	880b883a 	mov	r5,r17
 1803f6c:	000d883a 	mov	r6,zero
 1803f70:	01d00534 	movhi	r7,16404
 1803f74:	8009883a 	mov	r4,r16
 1803f78:	180c1780 	call	180c178 <__muldf3>
 1803f7c:	900d883a 	mov	r6,r18
 1803f80:	980f883a 	mov	r7,r19
 1803f84:	1009883a 	mov	r4,r2
 1803f88:	180b883a 	mov	r5,r3
 1803f8c:	180bfa80 	call	180bfa8 <__gedf2>
 1803f90:	002b883a 	mov	r21,zero
 1803f94:	0023883a 	mov	r17,zero
 1803f98:	1000bf16 	blt	r2,zero,1804298 <_dtoa_r+0x1060>
 1803f9c:	d9802217 	ldw	r6,136(sp)
 1803fa0:	ddc00717 	ldw	r23,28(sp)
 1803fa4:	018c303a 	nor	r6,zero,r6
 1803fa8:	d9800515 	stw	r6,20(sp)
 1803fac:	a80b883a 	mov	r5,r21
 1803fb0:	e009883a 	mov	r4,fp
 1803fb4:	18063640 	call	1806364 <_Bfree>
 1803fb8:	883e4926 	beq	r17,zero,18038e0 <__alt_mem_mem_0+0xff7e38e0>
 1803fbc:	003fad06 	br	1803e74 <__alt_mem_mem_0+0xff7e3e74>
 1803fc0:	d9c01117 	ldw	r7,68(sp)
 1803fc4:	3801bc26 	beq	r7,zero,18046b8 <_dtoa_r+0x1480>
 1803fc8:	10810cc4 	addi	r2,r2,1075
 1803fcc:	dd400a17 	ldw	r21,40(sp)
 1803fd0:	dd000817 	ldw	r20,32(sp)
 1803fd4:	003f0a06 	br	1803c00 <__alt_mem_mem_0+0xff7e3c00>
 1803fd8:	00800704 	movi	r2,28
 1803fdc:	d9000817 	ldw	r4,32(sp)
 1803fe0:	a0a9883a 	add	r20,r20,r2
 1803fe4:	b0ad883a 	add	r22,r22,r2
 1803fe8:	2089883a 	add	r4,r4,r2
 1803fec:	d9000815 	stw	r4,32(sp)
 1803ff0:	003f5106 	br	1803d38 <__alt_mem_mem_0+0xff7e3d38>
 1803ff4:	d8c00317 	ldw	r3,12(sp)
 1803ff8:	b8c1fc0e 	bge	r23,r3,18047ec <_dtoa_r+0x15b4>
 1803ffc:	0027883a 	mov	r19,zero
 1804000:	b805883a 	mov	r2,r23
 1804004:	003f3e06 	br	1803d00 <__alt_mem_mem_0+0xff7e3d00>
 1804008:	880b883a 	mov	r5,r17
 180400c:	e009883a 	mov	r4,fp
 1804010:	000f883a 	mov	r7,zero
 1804014:	01800284 	movi	r6,10
 1804018:	180638c0 	call	180638c <__multadd>
 180401c:	d9000c17 	ldw	r4,48(sp)
 1804020:	1023883a 	mov	r17,r2
 1804024:	0102040e 	bge	zero,r4,1804838 <_dtoa_r+0x1600>
 1804028:	d9000615 	stw	r4,24(sp)
 180402c:	0500050e 	bge	zero,r20,1804044 <_dtoa_r+0xe0c>
 1804030:	880b883a 	mov	r5,r17
 1804034:	a00d883a 	mov	r6,r20
 1804038:	e009883a 	mov	r4,fp
 180403c:	1806a3c0 	call	1806a3c <__lshift>
 1804040:	1023883a 	mov	r17,r2
 1804044:	9801241e 	bne	r19,zero,18044d8 <_dtoa_r+0x12a0>
 1804048:	8829883a 	mov	r20,r17
 180404c:	d9000617 	ldw	r4,24(sp)
 1804050:	dcc00717 	ldw	r19,28(sp)
 1804054:	9480004c 	andi	r18,r18,1
 1804058:	20bfffc4 	addi	r2,r4,-1
 180405c:	9885883a 	add	r2,r19,r2
 1804060:	d8800415 	stw	r2,16(sp)
 1804064:	dc800615 	stw	r18,24(sp)
 1804068:	a80b883a 	mov	r5,r21
 180406c:	8009883a 	mov	r4,r16
 1804070:	18030380 	call	1803038 <quorem>
 1804074:	880b883a 	mov	r5,r17
 1804078:	8009883a 	mov	r4,r16
 180407c:	102f883a 	mov	r23,r2
 1804080:	1806b840 	call	1806b84 <__mcmp>
 1804084:	a80b883a 	mov	r5,r21
 1804088:	a00d883a 	mov	r6,r20
 180408c:	e009883a 	mov	r4,fp
 1804090:	102d883a 	mov	r22,r2
 1804094:	1806be40 	call	1806be4 <__mdiff>
 1804098:	1007883a 	mov	r3,r2
 180409c:	10800317 	ldw	r2,12(r2)
 18040a0:	bc800c04 	addi	r18,r23,48
 18040a4:	180b883a 	mov	r5,r3
 18040a8:	10004e1e 	bne	r2,zero,18041e4 <_dtoa_r+0xfac>
 18040ac:	8009883a 	mov	r4,r16
 18040b0:	d8c01615 	stw	r3,88(sp)
 18040b4:	1806b840 	call	1806b84 <__mcmp>
 18040b8:	d8c01617 	ldw	r3,88(sp)
 18040bc:	e009883a 	mov	r4,fp
 18040c0:	d8801615 	stw	r2,88(sp)
 18040c4:	180b883a 	mov	r5,r3
 18040c8:	18063640 	call	1806364 <_Bfree>
 18040cc:	d8801617 	ldw	r2,88(sp)
 18040d0:	1000041e 	bne	r2,zero,18040e4 <_dtoa_r+0xeac>
 18040d4:	d9800317 	ldw	r6,12(sp)
 18040d8:	3000021e 	bne	r6,zero,18040e4 <_dtoa_r+0xeac>
 18040dc:	d8c00617 	ldw	r3,24(sp)
 18040e0:	18003726 	beq	r3,zero,18041c0 <_dtoa_r+0xf88>
 18040e4:	b0002016 	blt	r22,zero,1804168 <_dtoa_r+0xf30>
 18040e8:	b000041e 	bne	r22,zero,18040fc <_dtoa_r+0xec4>
 18040ec:	d9000317 	ldw	r4,12(sp)
 18040f0:	2000021e 	bne	r4,zero,18040fc <_dtoa_r+0xec4>
 18040f4:	d8c00617 	ldw	r3,24(sp)
 18040f8:	18001b26 	beq	r3,zero,1804168 <_dtoa_r+0xf30>
 18040fc:	00810716 	blt	zero,r2,180451c <_dtoa_r+0x12e4>
 1804100:	d8c00417 	ldw	r3,16(sp)
 1804104:	9d800044 	addi	r22,r19,1
 1804108:	9c800005 	stb	r18,0(r19)
 180410c:	b02f883a 	mov	r23,r22
 1804110:	98c10626 	beq	r19,r3,180452c <_dtoa_r+0x12f4>
 1804114:	800b883a 	mov	r5,r16
 1804118:	000f883a 	mov	r7,zero
 180411c:	01800284 	movi	r6,10
 1804120:	e009883a 	mov	r4,fp
 1804124:	180638c0 	call	180638c <__multadd>
 1804128:	1021883a 	mov	r16,r2
 180412c:	000f883a 	mov	r7,zero
 1804130:	01800284 	movi	r6,10
 1804134:	880b883a 	mov	r5,r17
 1804138:	e009883a 	mov	r4,fp
 180413c:	8d002526 	beq	r17,r20,18041d4 <_dtoa_r+0xf9c>
 1804140:	180638c0 	call	180638c <__multadd>
 1804144:	a00b883a 	mov	r5,r20
 1804148:	000f883a 	mov	r7,zero
 180414c:	01800284 	movi	r6,10
 1804150:	e009883a 	mov	r4,fp
 1804154:	1023883a 	mov	r17,r2
 1804158:	180638c0 	call	180638c <__multadd>
 180415c:	1029883a 	mov	r20,r2
 1804160:	b027883a 	mov	r19,r22
 1804164:	003fc006 	br	1804068 <__alt_mem_mem_0+0xff7e4068>
 1804168:	9011883a 	mov	r8,r18
 180416c:	00800e0e 	bge	zero,r2,18041a8 <_dtoa_r+0xf70>
 1804170:	800b883a 	mov	r5,r16
 1804174:	01800044 	movi	r6,1
 1804178:	e009883a 	mov	r4,fp
 180417c:	da001715 	stw	r8,92(sp)
 1804180:	1806a3c0 	call	1806a3c <__lshift>
 1804184:	a80b883a 	mov	r5,r21
 1804188:	1009883a 	mov	r4,r2
 180418c:	1021883a 	mov	r16,r2
 1804190:	1806b840 	call	1806b84 <__mcmp>
 1804194:	da001717 	ldw	r8,92(sp)
 1804198:	0081960e 	bge	zero,r2,18047f4 <_dtoa_r+0x15bc>
 180419c:	00800e44 	movi	r2,57
 18041a0:	40817026 	beq	r8,r2,1804764 <_dtoa_r+0x152c>
 18041a4:	ba000c44 	addi	r8,r23,49
 18041a8:	8825883a 	mov	r18,r17
 18041ac:	9dc00044 	addi	r23,r19,1
 18041b0:	9a000005 	stb	r8,0(r19)
 18041b4:	a023883a 	mov	r17,r20
 18041b8:	dc000915 	stw	r16,36(sp)
 18041bc:	003f2406 	br	1803e50 <__alt_mem_mem_0+0xff7e3e50>
 18041c0:	00800e44 	movi	r2,57
 18041c4:	9011883a 	mov	r8,r18
 18041c8:	90816626 	beq	r18,r2,1804764 <_dtoa_r+0x152c>
 18041cc:	05bff516 	blt	zero,r22,18041a4 <__alt_mem_mem_0+0xff7e41a4>
 18041d0:	003ff506 	br	18041a8 <__alt_mem_mem_0+0xff7e41a8>
 18041d4:	180638c0 	call	180638c <__multadd>
 18041d8:	1023883a 	mov	r17,r2
 18041dc:	1029883a 	mov	r20,r2
 18041e0:	003fdf06 	br	1804160 <__alt_mem_mem_0+0xff7e4160>
 18041e4:	e009883a 	mov	r4,fp
 18041e8:	18063640 	call	1806364 <_Bfree>
 18041ec:	00800044 	movi	r2,1
 18041f0:	003fbc06 	br	18040e4 <__alt_mem_mem_0+0xff7e40e4>
 18041f4:	a80b883a 	mov	r5,r21
 18041f8:	8009883a 	mov	r4,r16
 18041fc:	1806b840 	call	1806b84 <__mcmp>
 1804200:	103edb0e 	bge	r2,zero,1803d70 <__alt_mem_mem_0+0xff7e3d70>
 1804204:	800b883a 	mov	r5,r16
 1804208:	000f883a 	mov	r7,zero
 180420c:	01800284 	movi	r6,10
 1804210:	e009883a 	mov	r4,fp
 1804214:	180638c0 	call	180638c <__multadd>
 1804218:	1021883a 	mov	r16,r2
 180421c:	d8800517 	ldw	r2,20(sp)
 1804220:	d8c00b17 	ldw	r3,44(sp)
 1804224:	10bfffc4 	addi	r2,r2,-1
 1804228:	d8800515 	stw	r2,20(sp)
 180422c:	183f761e 	bne	r3,zero,1804008 <__alt_mem_mem_0+0xff7e4008>
 1804230:	d9000c17 	ldw	r4,48(sp)
 1804234:	0101730e 	bge	zero,r4,1804804 <_dtoa_r+0x15cc>
 1804238:	d9000615 	stw	r4,24(sp)
 180423c:	003ed006 	br	1803d80 <__alt_mem_mem_0+0xff7e3d80>
 1804240:	00800084 	movi	r2,2
 1804244:	3081861e 	bne	r6,r2,1804860 <_dtoa_r+0x1628>
 1804248:	d8000b15 	stw	zero,44(sp)
 180424c:	003f3c06 	br	1803f40 <__alt_mem_mem_0+0xff7e3f40>
 1804250:	dc000917 	ldw	r16,36(sp)
 1804254:	003e9206 	br	1803ca0 <__alt_mem_mem_0+0xff7e3ca0>
 1804258:	d9c00317 	ldw	r7,12(sp)
 180425c:	00800084 	movi	r2,2
 1804260:	11fec50e 	bge	r2,r7,1803d78 <__alt_mem_mem_0+0xff7e3d78>
 1804264:	d9000617 	ldw	r4,24(sp)
 1804268:	20013c1e 	bne	r4,zero,180475c <_dtoa_r+0x1524>
 180426c:	a80b883a 	mov	r5,r21
 1804270:	000f883a 	mov	r7,zero
 1804274:	01800144 	movi	r6,5
 1804278:	e009883a 	mov	r4,fp
 180427c:	180638c0 	call	180638c <__multadd>
 1804280:	100b883a 	mov	r5,r2
 1804284:	8009883a 	mov	r4,r16
 1804288:	102b883a 	mov	r21,r2
 180428c:	1806b840 	call	1806b84 <__mcmp>
 1804290:	dc000915 	stw	r16,36(sp)
 1804294:	00bf410e 	bge	zero,r2,1803f9c <__alt_mem_mem_0+0xff7e3f9c>
 1804298:	d9c00717 	ldw	r7,28(sp)
 180429c:	00800c44 	movi	r2,49
 18042a0:	38800005 	stb	r2,0(r7)
 18042a4:	d8800517 	ldw	r2,20(sp)
 18042a8:	3dc00044 	addi	r23,r7,1
 18042ac:	10800044 	addi	r2,r2,1
 18042b0:	d8800515 	stw	r2,20(sp)
 18042b4:	003f3d06 	br	1803fac <__alt_mem_mem_0+0xff7e3fac>
 18042b8:	d9800517 	ldw	r6,20(sp)
 18042bc:	d9c00717 	ldw	r7,28(sp)
 18042c0:	00800c44 	movi	r2,49
 18042c4:	31800044 	addi	r6,r6,1
 18042c8:	d9800515 	stw	r6,20(sp)
 18042cc:	38800005 	stb	r2,0(r7)
 18042d0:	003edf06 	br	1803e50 <__alt_mem_mem_0+0xff7e3e50>
 18042d4:	d8000b15 	stw	zero,44(sp)
 18042d8:	003c9f06 	br	1803558 <__alt_mem_mem_0+0xff7e3558>
 18042dc:	903e7e1e 	bne	r18,zero,1803cd8 <__alt_mem_mem_0+0xff7e3cd8>
 18042e0:	00800434 	movhi	r2,16
 18042e4:	10bfffc4 	addi	r2,r2,-1
 18042e8:	9884703a 	and	r2,r19,r2
 18042ec:	1000ea1e 	bne	r2,zero,1804698 <_dtoa_r+0x1460>
 18042f0:	9cdffc2c 	andhi	r19,r19,32752
 18042f4:	9800e826 	beq	r19,zero,1804698 <_dtoa_r+0x1460>
 18042f8:	d9c00817 	ldw	r7,32(sp)
 18042fc:	b5800044 	addi	r22,r22,1
 1804300:	04c00044 	movi	r19,1
 1804304:	39c00044 	addi	r7,r7,1
 1804308:	d9c00815 	stw	r7,32(sp)
 180430c:	d8800d17 	ldw	r2,52(sp)
 1804310:	103e721e 	bne	r2,zero,1803cdc <__alt_mem_mem_0+0xff7e3cdc>
 1804314:	00800044 	movi	r2,1
 1804318:	003e7906 	br	1803d00 <__alt_mem_mem_0+0xff7e3d00>
 180431c:	8009883a 	mov	r4,r16
 1804320:	180d20c0 	call	180d20c <__floatsidf>
 1804324:	d9800f17 	ldw	r6,60(sp)
 1804328:	d9c01017 	ldw	r7,64(sp)
 180432c:	1009883a 	mov	r4,r2
 1804330:	180b883a 	mov	r5,r3
 1804334:	180c1780 	call	180c178 <__muldf3>
 1804338:	000d883a 	mov	r6,zero
 180433c:	01d00734 	movhi	r7,16412
 1804340:	1009883a 	mov	r4,r2
 1804344:	180b883a 	mov	r5,r3
 1804348:	180ad8c0 	call	180ad8c <__adddf3>
 180434c:	047f3034 	movhi	r17,64704
 1804350:	1021883a 	mov	r16,r2
 1804354:	1c63883a 	add	r17,r3,r17
 1804358:	d9000f17 	ldw	r4,60(sp)
 180435c:	d9401017 	ldw	r5,64(sp)
 1804360:	000d883a 	mov	r6,zero
 1804364:	01d00534 	movhi	r7,16404
 1804368:	180c8900 	call	180c890 <__subdf3>
 180436c:	800d883a 	mov	r6,r16
 1804370:	880f883a 	mov	r7,r17
 1804374:	1009883a 	mov	r4,r2
 1804378:	180b883a 	mov	r5,r3
 180437c:	102b883a 	mov	r21,r2
 1804380:	1829883a 	mov	r20,r3
 1804384:	180bfa80 	call	180bfa8 <__gedf2>
 1804388:	00806c16 	blt	zero,r2,180453c <_dtoa_r+0x1304>
 180438c:	89e0003c 	xorhi	r7,r17,32768
 1804390:	800d883a 	mov	r6,r16
 1804394:	a809883a 	mov	r4,r21
 1804398:	a00b883a 	mov	r5,r20
 180439c:	180c0840 	call	180c084 <__ledf2>
 18043a0:	103d7e0e 	bge	r2,zero,180399c <__alt_mem_mem_0+0xff7e399c>
 18043a4:	002b883a 	mov	r21,zero
 18043a8:	0023883a 	mov	r17,zero
 18043ac:	003efb06 	br	1803f9c <__alt_mem_mem_0+0xff7e3f9c>
 18043b0:	d8800717 	ldw	r2,28(sp)
 18043b4:	003bd006 	br	18032f8 <__alt_mem_mem_0+0xff7e32f8>
 18043b8:	d9000a17 	ldw	r4,40(sp)
 18043bc:	d9800d17 	ldw	r6,52(sp)
 18043c0:	dd400a15 	stw	r21,40(sp)
 18043c4:	a905c83a 	sub	r2,r21,r4
 18043c8:	308d883a 	add	r6,r6,r2
 18043cc:	d9800d15 	stw	r6,52(sp)
 18043d0:	002b883a 	mov	r21,zero
 18043d4:	003e0606 	br	1803bf0 <__alt_mem_mem_0+0xff7e3bf0>
 18043d8:	9023883a 	mov	r17,r18
 18043dc:	9829883a 	mov	r20,r19
 18043e0:	04000084 	movi	r16,2
 18043e4:	003c9206 	br	1803630 <__alt_mem_mem_0+0xff7e3630>
 18043e8:	04000044 	movi	r16,1
 18043ec:	dc000c15 	stw	r16,48(sp)
 18043f0:	dc000615 	stw	r16,24(sp)
 18043f4:	dc002215 	stw	r16,136(sp)
 18043f8:	e0001115 	stw	zero,68(fp)
 18043fc:	000b883a 	mov	r5,zero
 1804400:	003c6906 	br	18035a8 <__alt_mem_mem_0+0xff7e35a8>
 1804404:	3021883a 	mov	r16,r6
 1804408:	003ffb06 	br	18043f8 <__alt_mem_mem_0+0xff7e43f8>
 180440c:	1000021e 	bne	r2,zero,1804418 <_dtoa_r+0x11e0>
 1804410:	4200004c 	andi	r8,r8,1
 1804414:	403e7d1e 	bne	r8,zero,1803e0c <__alt_mem_mem_0+0xff7e3e0c>
 1804418:	01000c04 	movi	r4,48
 180441c:	00000106 	br	1804424 <_dtoa_r+0x11ec>
 1804420:	102f883a 	mov	r23,r2
 1804424:	b8bfffc4 	addi	r2,r23,-1
 1804428:	10c00007 	ldb	r3,0(r2)
 180442c:	193ffc26 	beq	r3,r4,1804420 <__alt_mem_mem_0+0xff7e4420>
 1804430:	003e8706 	br	1803e50 <__alt_mem_mem_0+0xff7e3e50>
 1804434:	d8800517 	ldw	r2,20(sp)
 1804438:	00a3c83a 	sub	r17,zero,r2
 180443c:	8800a426 	beq	r17,zero,18046d0 <_dtoa_r+0x1498>
 1804440:	888003cc 	andi	r2,r17,15
 1804444:	100490fa 	slli	r2,r2,3
 1804448:	00c06134 	movhi	r3,388
 180444c:	18c2b404 	addi	r3,r3,2768
 1804450:	1885883a 	add	r2,r3,r2
 1804454:	11800017 	ldw	r6,0(r2)
 1804458:	11c00117 	ldw	r7,4(r2)
 180445c:	9009883a 	mov	r4,r18
 1804460:	980b883a 	mov	r5,r19
 1804464:	8823d13a 	srai	r17,r17,4
 1804468:	180c1780 	call	180c178 <__muldf3>
 180446c:	d8800f15 	stw	r2,60(sp)
 1804470:	d8c01015 	stw	r3,64(sp)
 1804474:	8800e826 	beq	r17,zero,1804818 <_dtoa_r+0x15e0>
 1804478:	05006134 	movhi	r20,388
 180447c:	a502aa04 	addi	r20,r20,2728
 1804480:	04000084 	movi	r16,2
 1804484:	8980004c 	andi	r6,r17,1
 1804488:	1009883a 	mov	r4,r2
 180448c:	8823d07a 	srai	r17,r17,1
 1804490:	180b883a 	mov	r5,r3
 1804494:	30000426 	beq	r6,zero,18044a8 <_dtoa_r+0x1270>
 1804498:	a1800017 	ldw	r6,0(r20)
 180449c:	a1c00117 	ldw	r7,4(r20)
 18044a0:	84000044 	addi	r16,r16,1
 18044a4:	180c1780 	call	180c178 <__muldf3>
 18044a8:	a5000204 	addi	r20,r20,8
 18044ac:	883ff51e 	bne	r17,zero,1804484 <__alt_mem_mem_0+0xff7e4484>
 18044b0:	d8800f15 	stw	r2,60(sp)
 18044b4:	d8c01015 	stw	r3,64(sp)
 18044b8:	003c7606 	br	1803694 <__alt_mem_mem_0+0xff7e3694>
 18044bc:	00c00c04 	movi	r3,48
 18044c0:	10c00005 	stb	r3,0(r2)
 18044c4:	d8c00517 	ldw	r3,20(sp)
 18044c8:	bd3fffc3 	ldbu	r20,-1(r23)
 18044cc:	18c00044 	addi	r3,r3,1
 18044d0:	d8c00515 	stw	r3,20(sp)
 18044d4:	003db906 	br	1803bbc <__alt_mem_mem_0+0xff7e3bbc>
 18044d8:	89400117 	ldw	r5,4(r17)
 18044dc:	e009883a 	mov	r4,fp
 18044e0:	18062bc0 	call	18062bc <_Balloc>
 18044e4:	89800417 	ldw	r6,16(r17)
 18044e8:	89400304 	addi	r5,r17,12
 18044ec:	11000304 	addi	r4,r2,12
 18044f0:	31800084 	addi	r6,r6,2
 18044f4:	318d883a 	add	r6,r6,r6
 18044f8:	318d883a 	add	r6,r6,r6
 18044fc:	1027883a 	mov	r19,r2
 1804500:	180604c0 	call	180604c <memcpy>
 1804504:	01800044 	movi	r6,1
 1804508:	980b883a 	mov	r5,r19
 180450c:	e009883a 	mov	r4,fp
 1804510:	1806a3c0 	call	1806a3c <__lshift>
 1804514:	1029883a 	mov	r20,r2
 1804518:	003ecc06 	br	180404c <__alt_mem_mem_0+0xff7e404c>
 180451c:	00800e44 	movi	r2,57
 1804520:	90809026 	beq	r18,r2,1804764 <_dtoa_r+0x152c>
 1804524:	92000044 	addi	r8,r18,1
 1804528:	003f1f06 	br	18041a8 <__alt_mem_mem_0+0xff7e41a8>
 180452c:	9011883a 	mov	r8,r18
 1804530:	8825883a 	mov	r18,r17
 1804534:	a023883a 	mov	r17,r20
 1804538:	003e2906 	br	1803de0 <__alt_mem_mem_0+0xff7e3de0>
 180453c:	002b883a 	mov	r21,zero
 1804540:	0023883a 	mov	r17,zero
 1804544:	003f5406 	br	1804298 <__alt_mem_mem_0+0xff7e4298>
 1804548:	61bfffc4 	addi	r6,r12,-1
 180454c:	300490fa 	slli	r2,r6,3
 1804550:	00c06134 	movhi	r3,388
 1804554:	18c2b404 	addi	r3,r3,2768
 1804558:	1885883a 	add	r2,r3,r2
 180455c:	11000017 	ldw	r4,0(r2)
 1804560:	11400117 	ldw	r5,4(r2)
 1804564:	d8800717 	ldw	r2,28(sp)
 1804568:	880f883a 	mov	r7,r17
 180456c:	d9801215 	stw	r6,72(sp)
 1804570:	800d883a 	mov	r6,r16
 1804574:	db001615 	stw	r12,88(sp)
 1804578:	15c00044 	addi	r23,r2,1
 180457c:	180c1780 	call	180c178 <__muldf3>
 1804580:	d9401017 	ldw	r5,64(sp)
 1804584:	d9000f17 	ldw	r4,60(sp)
 1804588:	d8c01515 	stw	r3,84(sp)
 180458c:	d8801415 	stw	r2,80(sp)
 1804590:	180d18c0 	call	180d18c <__fixdfsi>
 1804594:	1009883a 	mov	r4,r2
 1804598:	1021883a 	mov	r16,r2
 180459c:	180d20c0 	call	180d20c <__floatsidf>
 18045a0:	d9000f17 	ldw	r4,60(sp)
 18045a4:	d9401017 	ldw	r5,64(sp)
 18045a8:	100d883a 	mov	r6,r2
 18045ac:	180f883a 	mov	r7,r3
 18045b0:	180c8900 	call	180c890 <__subdf3>
 18045b4:	1829883a 	mov	r20,r3
 18045b8:	d8c00717 	ldw	r3,28(sp)
 18045bc:	84000c04 	addi	r16,r16,48
 18045c0:	1023883a 	mov	r17,r2
 18045c4:	1c000005 	stb	r16,0(r3)
 18045c8:	db001617 	ldw	r12,88(sp)
 18045cc:	00800044 	movi	r2,1
 18045d0:	60802226 	beq	r12,r2,180465c <_dtoa_r+0x1424>
 18045d4:	d9c00717 	ldw	r7,28(sp)
 18045d8:	8805883a 	mov	r2,r17
 18045dc:	b82b883a 	mov	r21,r23
 18045e0:	3b19883a 	add	r12,r7,r12
 18045e4:	6023883a 	mov	r17,r12
 18045e8:	a007883a 	mov	r3,r20
 18045ec:	dc800f15 	stw	r18,60(sp)
 18045f0:	000d883a 	mov	r6,zero
 18045f4:	01d00934 	movhi	r7,16420
 18045f8:	1009883a 	mov	r4,r2
 18045fc:	180b883a 	mov	r5,r3
 1804600:	180c1780 	call	180c178 <__muldf3>
 1804604:	180b883a 	mov	r5,r3
 1804608:	1009883a 	mov	r4,r2
 180460c:	1829883a 	mov	r20,r3
 1804610:	1025883a 	mov	r18,r2
 1804614:	180d18c0 	call	180d18c <__fixdfsi>
 1804618:	1009883a 	mov	r4,r2
 180461c:	1021883a 	mov	r16,r2
 1804620:	180d20c0 	call	180d20c <__floatsidf>
 1804624:	100d883a 	mov	r6,r2
 1804628:	180f883a 	mov	r7,r3
 180462c:	9009883a 	mov	r4,r18
 1804630:	a00b883a 	mov	r5,r20
 1804634:	84000c04 	addi	r16,r16,48
 1804638:	180c8900 	call	180c890 <__subdf3>
 180463c:	ad400044 	addi	r21,r21,1
 1804640:	ac3fffc5 	stb	r16,-1(r21)
 1804644:	ac7fea1e 	bne	r21,r17,18045f0 <__alt_mem_mem_0+0xff7e45f0>
 1804648:	1023883a 	mov	r17,r2
 180464c:	d8801217 	ldw	r2,72(sp)
 1804650:	dc800f17 	ldw	r18,60(sp)
 1804654:	1829883a 	mov	r20,r3
 1804658:	b8af883a 	add	r23,r23,r2
 180465c:	d9001417 	ldw	r4,80(sp)
 1804660:	d9401517 	ldw	r5,84(sp)
 1804664:	000d883a 	mov	r6,zero
 1804668:	01cff834 	movhi	r7,16352
 180466c:	180ad8c0 	call	180ad8c <__adddf3>
 1804670:	880d883a 	mov	r6,r17
 1804674:	a00f883a 	mov	r7,r20
 1804678:	1009883a 	mov	r4,r2
 180467c:	180b883a 	mov	r5,r3
 1804680:	180c0840 	call	180c084 <__ledf2>
 1804684:	10003e0e 	bge	r2,zero,1804780 <_dtoa_r+0x1548>
 1804688:	d9001317 	ldw	r4,76(sp)
 180468c:	bd3fffc3 	ldbu	r20,-1(r23)
 1804690:	d9000515 	stw	r4,20(sp)
 1804694:	003d3b06 	br	1803b84 <__alt_mem_mem_0+0xff7e3b84>
 1804698:	0027883a 	mov	r19,zero
 180469c:	003f1b06 	br	180430c <__alt_mem_mem_0+0xff7e430c>
 18046a0:	d8800817 	ldw	r2,32(sp)
 18046a4:	11e9c83a 	sub	r20,r2,r7
 18046a8:	0005883a 	mov	r2,zero
 18046ac:	003d5406 	br	1803c00 <__alt_mem_mem_0+0xff7e3c00>
 18046b0:	00800044 	movi	r2,1
 18046b4:	003dc706 	br	1803dd4 <__alt_mem_mem_0+0xff7e3dd4>
 18046b8:	d8c00217 	ldw	r3,8(sp)
 18046bc:	00800d84 	movi	r2,54
 18046c0:	dd400a17 	ldw	r21,40(sp)
 18046c4:	10c5c83a 	sub	r2,r2,r3
 18046c8:	dd000817 	ldw	r20,32(sp)
 18046cc:	003d4c06 	br	1803c00 <__alt_mem_mem_0+0xff7e3c00>
 18046d0:	dc800f15 	stw	r18,60(sp)
 18046d4:	dcc01015 	stw	r19,64(sp)
 18046d8:	04000084 	movi	r16,2
 18046dc:	003bed06 	br	1803694 <__alt_mem_mem_0+0xff7e3694>
 18046e0:	d9000617 	ldw	r4,24(sp)
 18046e4:	203f0d26 	beq	r4,zero,180431c <__alt_mem_mem_0+0xff7e431c>
 18046e8:	d9800c17 	ldw	r6,48(sp)
 18046ec:	01bcab0e 	bge	zero,r6,180399c <__alt_mem_mem_0+0xff7e399c>
 18046f0:	d9401017 	ldw	r5,64(sp)
 18046f4:	d9000f17 	ldw	r4,60(sp)
 18046f8:	000d883a 	mov	r6,zero
 18046fc:	01d00934 	movhi	r7,16420
 1804700:	180c1780 	call	180c178 <__muldf3>
 1804704:	81000044 	addi	r4,r16,1
 1804708:	d8800f15 	stw	r2,60(sp)
 180470c:	d8c01015 	stw	r3,64(sp)
 1804710:	180d20c0 	call	180d20c <__floatsidf>
 1804714:	d9800f17 	ldw	r6,60(sp)
 1804718:	d9c01017 	ldw	r7,64(sp)
 180471c:	1009883a 	mov	r4,r2
 1804720:	180b883a 	mov	r5,r3
 1804724:	180c1780 	call	180c178 <__muldf3>
 1804728:	01d00734 	movhi	r7,16412
 180472c:	000d883a 	mov	r6,zero
 1804730:	1009883a 	mov	r4,r2
 1804734:	180b883a 	mov	r5,r3
 1804738:	180ad8c0 	call	180ad8c <__adddf3>
 180473c:	d9c00517 	ldw	r7,20(sp)
 1804740:	047f3034 	movhi	r17,64704
 1804744:	1021883a 	mov	r16,r2
 1804748:	39ffffc4 	addi	r7,r7,-1
 180474c:	d9c01315 	stw	r7,76(sp)
 1804750:	1c63883a 	add	r17,r3,r17
 1804754:	db000c17 	ldw	r12,48(sp)
 1804758:	003bea06 	br	1803704 <__alt_mem_mem_0+0xff7e3704>
 180475c:	dc000915 	stw	r16,36(sp)
 1804760:	003e0e06 	br	1803f9c <__alt_mem_mem_0+0xff7e3f9c>
 1804764:	01000e44 	movi	r4,57
 1804768:	8825883a 	mov	r18,r17
 180476c:	9dc00044 	addi	r23,r19,1
 1804770:	99000005 	stb	r4,0(r19)
 1804774:	a023883a 	mov	r17,r20
 1804778:	dc000915 	stw	r16,36(sp)
 180477c:	003da406 	br	1803e10 <__alt_mem_mem_0+0xff7e3e10>
 1804780:	d9801417 	ldw	r6,80(sp)
 1804784:	d9c01517 	ldw	r7,84(sp)
 1804788:	0009883a 	mov	r4,zero
 180478c:	014ff834 	movhi	r5,16352
 1804790:	180c8900 	call	180c890 <__subdf3>
 1804794:	880d883a 	mov	r6,r17
 1804798:	a00f883a 	mov	r7,r20
 180479c:	1009883a 	mov	r4,r2
 18047a0:	180b883a 	mov	r5,r3
 18047a4:	180bfa80 	call	180bfa8 <__gedf2>
 18047a8:	00bc7c0e 	bge	zero,r2,180399c <__alt_mem_mem_0+0xff7e399c>
 18047ac:	01000c04 	movi	r4,48
 18047b0:	00000106 	br	18047b8 <_dtoa_r+0x1580>
 18047b4:	102f883a 	mov	r23,r2
 18047b8:	b8bfffc4 	addi	r2,r23,-1
 18047bc:	10c00007 	ldb	r3,0(r2)
 18047c0:	193ffc26 	beq	r3,r4,18047b4 <__alt_mem_mem_0+0xff7e47b4>
 18047c4:	d9801317 	ldw	r6,76(sp)
 18047c8:	d9800515 	stw	r6,20(sp)
 18047cc:	003c4406 	br	18038e0 <__alt_mem_mem_0+0xff7e38e0>
 18047d0:	d9801317 	ldw	r6,76(sp)
 18047d4:	d9800515 	stw	r6,20(sp)
 18047d8:	003cea06 	br	1803b84 <__alt_mem_mem_0+0xff7e3b84>
 18047dc:	dd800f17 	ldw	r22,60(sp)
 18047e0:	dcc01017 	ldw	r19,64(sp)
 18047e4:	dc801217 	ldw	r18,72(sp)
 18047e8:	003c6c06 	br	180399c <__alt_mem_mem_0+0xff7e399c>
 18047ec:	903e031e 	bne	r18,zero,1803ffc <__alt_mem_mem_0+0xff7e3ffc>
 18047f0:	003ebb06 	br	18042e0 <__alt_mem_mem_0+0xff7e42e0>
 18047f4:	103e6c1e 	bne	r2,zero,18041a8 <__alt_mem_mem_0+0xff7e41a8>
 18047f8:	4080004c 	andi	r2,r8,1
 18047fc:	103e6a26 	beq	r2,zero,18041a8 <__alt_mem_mem_0+0xff7e41a8>
 1804800:	003e6606 	br	180419c <__alt_mem_mem_0+0xff7e419c>
 1804804:	d8c00317 	ldw	r3,12(sp)
 1804808:	00800084 	movi	r2,2
 180480c:	10c02916 	blt	r2,r3,18048b4 <_dtoa_r+0x167c>
 1804810:	d9000c17 	ldw	r4,48(sp)
 1804814:	003e8806 	br	1804238 <__alt_mem_mem_0+0xff7e4238>
 1804818:	04000084 	movi	r16,2
 180481c:	003b9d06 	br	1803694 <__alt_mem_mem_0+0xff7e3694>
 1804820:	d9001317 	ldw	r4,76(sp)
 1804824:	d9000515 	stw	r4,20(sp)
 1804828:	003cd606 	br	1803b84 <__alt_mem_mem_0+0xff7e3b84>
 180482c:	d8801317 	ldw	r2,76(sp)
 1804830:	d8800515 	stw	r2,20(sp)
 1804834:	003c2a06 	br	18038e0 <__alt_mem_mem_0+0xff7e38e0>
 1804838:	d9800317 	ldw	r6,12(sp)
 180483c:	00800084 	movi	r2,2
 1804840:	11801516 	blt	r2,r6,1804898 <_dtoa_r+0x1660>
 1804844:	d9c00c17 	ldw	r7,48(sp)
 1804848:	d9c00615 	stw	r7,24(sp)
 180484c:	003df706 	br	180402c <__alt_mem_mem_0+0xff7e402c>
 1804850:	193d3926 	beq	r3,r4,1803d38 <__alt_mem_mem_0+0xff7e3d38>
 1804854:	00c00f04 	movi	r3,60
 1804858:	1885c83a 	sub	r2,r3,r2
 180485c:	003ddf06 	br	1803fdc <__alt_mem_mem_0+0xff7e3fdc>
 1804860:	e009883a 	mov	r4,fp
 1804864:	e0001115 	stw	zero,68(fp)
 1804868:	000b883a 	mov	r5,zero
 180486c:	18062bc0 	call	18062bc <_Balloc>
 1804870:	d8800715 	stw	r2,28(sp)
 1804874:	d8c00717 	ldw	r3,28(sp)
 1804878:	00bfffc4 	movi	r2,-1
 180487c:	01000044 	movi	r4,1
 1804880:	d8800c15 	stw	r2,48(sp)
 1804884:	e0c01015 	stw	r3,64(fp)
 1804888:	d9000b15 	stw	r4,44(sp)
 180488c:	d8800615 	stw	r2,24(sp)
 1804890:	d8002215 	stw	zero,136(sp)
 1804894:	003c4106 	br	180399c <__alt_mem_mem_0+0xff7e399c>
 1804898:	d8c00c17 	ldw	r3,48(sp)
 180489c:	d8c00615 	stw	r3,24(sp)
 18048a0:	003e7006 	br	1804264 <__alt_mem_mem_0+0xff7e4264>
 18048a4:	04400044 	movi	r17,1
 18048a8:	003b2006 	br	180352c <__alt_mem_mem_0+0xff7e352c>
 18048ac:	000b883a 	mov	r5,zero
 18048b0:	003b3d06 	br	18035a8 <__alt_mem_mem_0+0xff7e35a8>
 18048b4:	d8800c17 	ldw	r2,48(sp)
 18048b8:	d8800615 	stw	r2,24(sp)
 18048bc:	003e6906 	br	1804264 <__alt_mem_mem_0+0xff7e4264>

018048c0 <__sflush_r>:
 18048c0:	2880030b 	ldhu	r2,12(r5)
 18048c4:	defffb04 	addi	sp,sp,-20
 18048c8:	dcc00315 	stw	r19,12(sp)
 18048cc:	dc400115 	stw	r17,4(sp)
 18048d0:	dfc00415 	stw	ra,16(sp)
 18048d4:	dc800215 	stw	r18,8(sp)
 18048d8:	dc000015 	stw	r16,0(sp)
 18048dc:	10c0020c 	andi	r3,r2,8
 18048e0:	2823883a 	mov	r17,r5
 18048e4:	2027883a 	mov	r19,r4
 18048e8:	1800311e 	bne	r3,zero,18049b0 <__sflush_r+0xf0>
 18048ec:	28c00117 	ldw	r3,4(r5)
 18048f0:	10820014 	ori	r2,r2,2048
 18048f4:	2880030d 	sth	r2,12(r5)
 18048f8:	00c04b0e 	bge	zero,r3,1804a28 <__sflush_r+0x168>
 18048fc:	8a000a17 	ldw	r8,40(r17)
 1804900:	40002326 	beq	r8,zero,1804990 <__sflush_r+0xd0>
 1804904:	9c000017 	ldw	r16,0(r19)
 1804908:	10c4000c 	andi	r3,r2,4096
 180490c:	98000015 	stw	zero,0(r19)
 1804910:	18004826 	beq	r3,zero,1804a34 <__sflush_r+0x174>
 1804914:	89801417 	ldw	r6,80(r17)
 1804918:	10c0010c 	andi	r3,r2,4
 180491c:	18000626 	beq	r3,zero,1804938 <__sflush_r+0x78>
 1804920:	88c00117 	ldw	r3,4(r17)
 1804924:	88800c17 	ldw	r2,48(r17)
 1804928:	30cdc83a 	sub	r6,r6,r3
 180492c:	10000226 	beq	r2,zero,1804938 <__sflush_r+0x78>
 1804930:	88800f17 	ldw	r2,60(r17)
 1804934:	308dc83a 	sub	r6,r6,r2
 1804938:	89400717 	ldw	r5,28(r17)
 180493c:	000f883a 	mov	r7,zero
 1804940:	9809883a 	mov	r4,r19
 1804944:	403ee83a 	callr	r8
 1804948:	00ffffc4 	movi	r3,-1
 180494c:	10c04426 	beq	r2,r3,1804a60 <__sflush_r+0x1a0>
 1804950:	88c0030b 	ldhu	r3,12(r17)
 1804954:	89000417 	ldw	r4,16(r17)
 1804958:	88000115 	stw	zero,4(r17)
 180495c:	197dffcc 	andi	r5,r3,63487
 1804960:	8940030d 	sth	r5,12(r17)
 1804964:	89000015 	stw	r4,0(r17)
 1804968:	18c4000c 	andi	r3,r3,4096
 180496c:	18002c1e 	bne	r3,zero,1804a20 <__sflush_r+0x160>
 1804970:	89400c17 	ldw	r5,48(r17)
 1804974:	9c000015 	stw	r16,0(r19)
 1804978:	28000526 	beq	r5,zero,1804990 <__sflush_r+0xd0>
 180497c:	88801004 	addi	r2,r17,64
 1804980:	28800226 	beq	r5,r2,180498c <__sflush_r+0xcc>
 1804984:	9809883a 	mov	r4,r19
 1804988:	180502c0 	call	180502c <_free_r>
 180498c:	88000c15 	stw	zero,48(r17)
 1804990:	0005883a 	mov	r2,zero
 1804994:	dfc00417 	ldw	ra,16(sp)
 1804998:	dcc00317 	ldw	r19,12(sp)
 180499c:	dc800217 	ldw	r18,8(sp)
 18049a0:	dc400117 	ldw	r17,4(sp)
 18049a4:	dc000017 	ldw	r16,0(sp)
 18049a8:	dec00504 	addi	sp,sp,20
 18049ac:	f800283a 	ret
 18049b0:	2c800417 	ldw	r18,16(r5)
 18049b4:	903ff626 	beq	r18,zero,1804990 <__alt_mem_mem_0+0xff7e4990>
 18049b8:	2c000017 	ldw	r16,0(r5)
 18049bc:	108000cc 	andi	r2,r2,3
 18049c0:	2c800015 	stw	r18,0(r5)
 18049c4:	84a1c83a 	sub	r16,r16,r18
 18049c8:	1000131e 	bne	r2,zero,1804a18 <__sflush_r+0x158>
 18049cc:	28800517 	ldw	r2,20(r5)
 18049d0:	88800215 	stw	r2,8(r17)
 18049d4:	04000316 	blt	zero,r16,18049e4 <__sflush_r+0x124>
 18049d8:	003fed06 	br	1804990 <__alt_mem_mem_0+0xff7e4990>
 18049dc:	90a5883a 	add	r18,r18,r2
 18049e0:	043feb0e 	bge	zero,r16,1804990 <__alt_mem_mem_0+0xff7e4990>
 18049e4:	88800917 	ldw	r2,36(r17)
 18049e8:	89400717 	ldw	r5,28(r17)
 18049ec:	800f883a 	mov	r7,r16
 18049f0:	900d883a 	mov	r6,r18
 18049f4:	9809883a 	mov	r4,r19
 18049f8:	103ee83a 	callr	r2
 18049fc:	80a1c83a 	sub	r16,r16,r2
 1804a00:	00bff616 	blt	zero,r2,18049dc <__alt_mem_mem_0+0xff7e49dc>
 1804a04:	88c0030b 	ldhu	r3,12(r17)
 1804a08:	00bfffc4 	movi	r2,-1
 1804a0c:	18c01014 	ori	r3,r3,64
 1804a10:	88c0030d 	sth	r3,12(r17)
 1804a14:	003fdf06 	br	1804994 <__alt_mem_mem_0+0xff7e4994>
 1804a18:	0005883a 	mov	r2,zero
 1804a1c:	003fec06 	br	18049d0 <__alt_mem_mem_0+0xff7e49d0>
 1804a20:	88801415 	stw	r2,80(r17)
 1804a24:	003fd206 	br	1804970 <__alt_mem_mem_0+0xff7e4970>
 1804a28:	28c00f17 	ldw	r3,60(r5)
 1804a2c:	00ffb316 	blt	zero,r3,18048fc <__alt_mem_mem_0+0xff7e48fc>
 1804a30:	003fd706 	br	1804990 <__alt_mem_mem_0+0xff7e4990>
 1804a34:	89400717 	ldw	r5,28(r17)
 1804a38:	000d883a 	mov	r6,zero
 1804a3c:	01c00044 	movi	r7,1
 1804a40:	9809883a 	mov	r4,r19
 1804a44:	403ee83a 	callr	r8
 1804a48:	100d883a 	mov	r6,r2
 1804a4c:	00bfffc4 	movi	r2,-1
 1804a50:	30801426 	beq	r6,r2,1804aa4 <__sflush_r+0x1e4>
 1804a54:	8880030b 	ldhu	r2,12(r17)
 1804a58:	8a000a17 	ldw	r8,40(r17)
 1804a5c:	003fae06 	br	1804918 <__alt_mem_mem_0+0xff7e4918>
 1804a60:	98c00017 	ldw	r3,0(r19)
 1804a64:	183fba26 	beq	r3,zero,1804950 <__alt_mem_mem_0+0xff7e4950>
 1804a68:	01000744 	movi	r4,29
 1804a6c:	19000626 	beq	r3,r4,1804a88 <__sflush_r+0x1c8>
 1804a70:	01000584 	movi	r4,22
 1804a74:	19000426 	beq	r3,r4,1804a88 <__sflush_r+0x1c8>
 1804a78:	88c0030b 	ldhu	r3,12(r17)
 1804a7c:	18c01014 	ori	r3,r3,64
 1804a80:	88c0030d 	sth	r3,12(r17)
 1804a84:	003fc306 	br	1804994 <__alt_mem_mem_0+0xff7e4994>
 1804a88:	8880030b 	ldhu	r2,12(r17)
 1804a8c:	88c00417 	ldw	r3,16(r17)
 1804a90:	88000115 	stw	zero,4(r17)
 1804a94:	10bdffcc 	andi	r2,r2,63487
 1804a98:	8880030d 	sth	r2,12(r17)
 1804a9c:	88c00015 	stw	r3,0(r17)
 1804aa0:	003fb306 	br	1804970 <__alt_mem_mem_0+0xff7e4970>
 1804aa4:	98800017 	ldw	r2,0(r19)
 1804aa8:	103fea26 	beq	r2,zero,1804a54 <__alt_mem_mem_0+0xff7e4a54>
 1804aac:	00c00744 	movi	r3,29
 1804ab0:	10c00226 	beq	r2,r3,1804abc <__sflush_r+0x1fc>
 1804ab4:	00c00584 	movi	r3,22
 1804ab8:	10c0031e 	bne	r2,r3,1804ac8 <__sflush_r+0x208>
 1804abc:	9c000015 	stw	r16,0(r19)
 1804ac0:	0005883a 	mov	r2,zero
 1804ac4:	003fb306 	br	1804994 <__alt_mem_mem_0+0xff7e4994>
 1804ac8:	88c0030b 	ldhu	r3,12(r17)
 1804acc:	3005883a 	mov	r2,r6
 1804ad0:	18c01014 	ori	r3,r3,64
 1804ad4:	88c0030d 	sth	r3,12(r17)
 1804ad8:	003fae06 	br	1804994 <__alt_mem_mem_0+0xff7e4994>

01804adc <_fflush_r>:
 1804adc:	defffd04 	addi	sp,sp,-12
 1804ae0:	dc000115 	stw	r16,4(sp)
 1804ae4:	dfc00215 	stw	ra,8(sp)
 1804ae8:	2021883a 	mov	r16,r4
 1804aec:	20000226 	beq	r4,zero,1804af8 <_fflush_r+0x1c>
 1804af0:	20800e17 	ldw	r2,56(r4)
 1804af4:	10000c26 	beq	r2,zero,1804b28 <_fflush_r+0x4c>
 1804af8:	2880030f 	ldh	r2,12(r5)
 1804afc:	1000051e 	bne	r2,zero,1804b14 <_fflush_r+0x38>
 1804b00:	0005883a 	mov	r2,zero
 1804b04:	dfc00217 	ldw	ra,8(sp)
 1804b08:	dc000117 	ldw	r16,4(sp)
 1804b0c:	dec00304 	addi	sp,sp,12
 1804b10:	f800283a 	ret
 1804b14:	8009883a 	mov	r4,r16
 1804b18:	dfc00217 	ldw	ra,8(sp)
 1804b1c:	dc000117 	ldw	r16,4(sp)
 1804b20:	dec00304 	addi	sp,sp,12
 1804b24:	18048c01 	jmpi	18048c0 <__sflush_r>
 1804b28:	d9400015 	stw	r5,0(sp)
 1804b2c:	1804eb80 	call	1804eb8 <__sinit>
 1804b30:	d9400017 	ldw	r5,0(sp)
 1804b34:	003ff006 	br	1804af8 <__alt_mem_mem_0+0xff7e4af8>

01804b38 <fflush>:
 1804b38:	20000526 	beq	r4,zero,1804b50 <fflush+0x18>
 1804b3c:	00806134 	movhi	r2,388
 1804b40:	1094f404 	addi	r2,r2,21456
 1804b44:	200b883a 	mov	r5,r4
 1804b48:	11000017 	ldw	r4,0(r2)
 1804b4c:	1804adc1 	jmpi	1804adc <_fflush_r>
 1804b50:	00806134 	movhi	r2,388
 1804b54:	1094f304 	addi	r2,r2,21452
 1804b58:	11000017 	ldw	r4,0(r2)
 1804b5c:	01406034 	movhi	r5,384
 1804b60:	2952b704 	addi	r5,r5,19164
 1804b64:	18054001 	jmpi	1805400 <_fwalk_reent>

01804b68 <__fp_unlock>:
 1804b68:	0005883a 	mov	r2,zero
 1804b6c:	f800283a 	ret

01804b70 <_cleanup_r>:
 1804b70:	01406074 	movhi	r5,385
 1804b74:	29637c04 	addi	r5,r5,-29200
 1804b78:	18054001 	jmpi	1805400 <_fwalk_reent>

01804b7c <__sinit.part.1>:
 1804b7c:	defff704 	addi	sp,sp,-36
 1804b80:	00c06034 	movhi	r3,384
 1804b84:	dfc00815 	stw	ra,32(sp)
 1804b88:	ddc00715 	stw	r23,28(sp)
 1804b8c:	dd800615 	stw	r22,24(sp)
 1804b90:	dd400515 	stw	r21,20(sp)
 1804b94:	dd000415 	stw	r20,16(sp)
 1804b98:	dcc00315 	stw	r19,12(sp)
 1804b9c:	dc800215 	stw	r18,8(sp)
 1804ba0:	dc400115 	stw	r17,4(sp)
 1804ba4:	dc000015 	stw	r16,0(sp)
 1804ba8:	18d2dc04 	addi	r3,r3,19312
 1804bac:	24000117 	ldw	r16,4(r4)
 1804bb0:	20c00f15 	stw	r3,60(r4)
 1804bb4:	2080bb04 	addi	r2,r4,748
 1804bb8:	00c000c4 	movi	r3,3
 1804bbc:	20c0b915 	stw	r3,740(r4)
 1804bc0:	2080ba15 	stw	r2,744(r4)
 1804bc4:	2000b815 	stw	zero,736(r4)
 1804bc8:	05c00204 	movi	r23,8
 1804bcc:	00800104 	movi	r2,4
 1804bd0:	2025883a 	mov	r18,r4
 1804bd4:	b80d883a 	mov	r6,r23
 1804bd8:	81001704 	addi	r4,r16,92
 1804bdc:	000b883a 	mov	r5,zero
 1804be0:	80000015 	stw	zero,0(r16)
 1804be4:	80000115 	stw	zero,4(r16)
 1804be8:	80000215 	stw	zero,8(r16)
 1804bec:	8080030d 	sth	r2,12(r16)
 1804bf0:	80001915 	stw	zero,100(r16)
 1804bf4:	8000038d 	sth	zero,14(r16)
 1804bf8:	80000415 	stw	zero,16(r16)
 1804bfc:	80000515 	stw	zero,20(r16)
 1804c00:	80000615 	stw	zero,24(r16)
 1804c04:	18061940 	call	1806194 <memset>
 1804c08:	05806034 	movhi	r22,384
 1804c0c:	94400217 	ldw	r17,8(r18)
 1804c10:	05406034 	movhi	r21,384
 1804c14:	05006034 	movhi	r20,384
 1804c18:	04c06034 	movhi	r19,384
 1804c1c:	b59ce004 	addi	r22,r22,29568
 1804c20:	ad5cf704 	addi	r21,r21,29660
 1804c24:	a51d1604 	addi	r20,r20,29784
 1804c28:	9cdd2d04 	addi	r19,r19,29876
 1804c2c:	85800815 	stw	r22,32(r16)
 1804c30:	85400915 	stw	r21,36(r16)
 1804c34:	85000a15 	stw	r20,40(r16)
 1804c38:	84c00b15 	stw	r19,44(r16)
 1804c3c:	84000715 	stw	r16,28(r16)
 1804c40:	00800284 	movi	r2,10
 1804c44:	8880030d 	sth	r2,12(r17)
 1804c48:	00800044 	movi	r2,1
 1804c4c:	b80d883a 	mov	r6,r23
 1804c50:	89001704 	addi	r4,r17,92
 1804c54:	000b883a 	mov	r5,zero
 1804c58:	88000015 	stw	zero,0(r17)
 1804c5c:	88000115 	stw	zero,4(r17)
 1804c60:	88000215 	stw	zero,8(r17)
 1804c64:	88001915 	stw	zero,100(r17)
 1804c68:	8880038d 	sth	r2,14(r17)
 1804c6c:	88000415 	stw	zero,16(r17)
 1804c70:	88000515 	stw	zero,20(r17)
 1804c74:	88000615 	stw	zero,24(r17)
 1804c78:	18061940 	call	1806194 <memset>
 1804c7c:	94000317 	ldw	r16,12(r18)
 1804c80:	00800484 	movi	r2,18
 1804c84:	8c400715 	stw	r17,28(r17)
 1804c88:	8d800815 	stw	r22,32(r17)
 1804c8c:	8d400915 	stw	r21,36(r17)
 1804c90:	8d000a15 	stw	r20,40(r17)
 1804c94:	8cc00b15 	stw	r19,44(r17)
 1804c98:	8080030d 	sth	r2,12(r16)
 1804c9c:	00800084 	movi	r2,2
 1804ca0:	80000015 	stw	zero,0(r16)
 1804ca4:	80000115 	stw	zero,4(r16)
 1804ca8:	80000215 	stw	zero,8(r16)
 1804cac:	80001915 	stw	zero,100(r16)
 1804cb0:	8080038d 	sth	r2,14(r16)
 1804cb4:	80000415 	stw	zero,16(r16)
 1804cb8:	80000515 	stw	zero,20(r16)
 1804cbc:	80000615 	stw	zero,24(r16)
 1804cc0:	b80d883a 	mov	r6,r23
 1804cc4:	000b883a 	mov	r5,zero
 1804cc8:	81001704 	addi	r4,r16,92
 1804ccc:	18061940 	call	1806194 <memset>
 1804cd0:	00800044 	movi	r2,1
 1804cd4:	84000715 	stw	r16,28(r16)
 1804cd8:	85800815 	stw	r22,32(r16)
 1804cdc:	85400915 	stw	r21,36(r16)
 1804ce0:	85000a15 	stw	r20,40(r16)
 1804ce4:	84c00b15 	stw	r19,44(r16)
 1804ce8:	90800e15 	stw	r2,56(r18)
 1804cec:	dfc00817 	ldw	ra,32(sp)
 1804cf0:	ddc00717 	ldw	r23,28(sp)
 1804cf4:	dd800617 	ldw	r22,24(sp)
 1804cf8:	dd400517 	ldw	r21,20(sp)
 1804cfc:	dd000417 	ldw	r20,16(sp)
 1804d00:	dcc00317 	ldw	r19,12(sp)
 1804d04:	dc800217 	ldw	r18,8(sp)
 1804d08:	dc400117 	ldw	r17,4(sp)
 1804d0c:	dc000017 	ldw	r16,0(sp)
 1804d10:	dec00904 	addi	sp,sp,36
 1804d14:	f800283a 	ret

01804d18 <__fp_lock>:
 1804d18:	0005883a 	mov	r2,zero
 1804d1c:	f800283a 	ret

01804d20 <__sfmoreglue>:
 1804d20:	defffc04 	addi	sp,sp,-16
 1804d24:	dc400115 	stw	r17,4(sp)
 1804d28:	2c7fffc4 	addi	r17,r5,-1
 1804d2c:	8c401a24 	muli	r17,r17,104
 1804d30:	dc800215 	stw	r18,8(sp)
 1804d34:	2825883a 	mov	r18,r5
 1804d38:	89401d04 	addi	r5,r17,116
 1804d3c:	dc000015 	stw	r16,0(sp)
 1804d40:	dfc00315 	stw	ra,12(sp)
 1804d44:	180575c0 	call	180575c <_malloc_r>
 1804d48:	1021883a 	mov	r16,r2
 1804d4c:	10000726 	beq	r2,zero,1804d6c <__sfmoreglue+0x4c>
 1804d50:	11000304 	addi	r4,r2,12
 1804d54:	10000015 	stw	zero,0(r2)
 1804d58:	14800115 	stw	r18,4(r2)
 1804d5c:	11000215 	stw	r4,8(r2)
 1804d60:	89801a04 	addi	r6,r17,104
 1804d64:	000b883a 	mov	r5,zero
 1804d68:	18061940 	call	1806194 <memset>
 1804d6c:	8005883a 	mov	r2,r16
 1804d70:	dfc00317 	ldw	ra,12(sp)
 1804d74:	dc800217 	ldw	r18,8(sp)
 1804d78:	dc400117 	ldw	r17,4(sp)
 1804d7c:	dc000017 	ldw	r16,0(sp)
 1804d80:	dec00404 	addi	sp,sp,16
 1804d84:	f800283a 	ret

01804d88 <__sfp>:
 1804d88:	defffb04 	addi	sp,sp,-20
 1804d8c:	dc000015 	stw	r16,0(sp)
 1804d90:	04006134 	movhi	r16,388
 1804d94:	8414f304 	addi	r16,r16,21452
 1804d98:	dcc00315 	stw	r19,12(sp)
 1804d9c:	2027883a 	mov	r19,r4
 1804da0:	81000017 	ldw	r4,0(r16)
 1804da4:	dfc00415 	stw	ra,16(sp)
 1804da8:	dc800215 	stw	r18,8(sp)
 1804dac:	20800e17 	ldw	r2,56(r4)
 1804db0:	dc400115 	stw	r17,4(sp)
 1804db4:	1000021e 	bne	r2,zero,1804dc0 <__sfp+0x38>
 1804db8:	1804b7c0 	call	1804b7c <__sinit.part.1>
 1804dbc:	81000017 	ldw	r4,0(r16)
 1804dc0:	2480b804 	addi	r18,r4,736
 1804dc4:	047fffc4 	movi	r17,-1
 1804dc8:	91000117 	ldw	r4,4(r18)
 1804dcc:	94000217 	ldw	r16,8(r18)
 1804dd0:	213fffc4 	addi	r4,r4,-1
 1804dd4:	20000a16 	blt	r4,zero,1804e00 <__sfp+0x78>
 1804dd8:	8080030f 	ldh	r2,12(r16)
 1804ddc:	10000c26 	beq	r2,zero,1804e10 <__sfp+0x88>
 1804de0:	80c01d04 	addi	r3,r16,116
 1804de4:	00000206 	br	1804df0 <__sfp+0x68>
 1804de8:	18bfe60f 	ldh	r2,-104(r3)
 1804dec:	10000826 	beq	r2,zero,1804e10 <__sfp+0x88>
 1804df0:	213fffc4 	addi	r4,r4,-1
 1804df4:	1c3ffd04 	addi	r16,r3,-12
 1804df8:	18c01a04 	addi	r3,r3,104
 1804dfc:	247ffa1e 	bne	r4,r17,1804de8 <__alt_mem_mem_0+0xff7e4de8>
 1804e00:	90800017 	ldw	r2,0(r18)
 1804e04:	10001d26 	beq	r2,zero,1804e7c <__sfp+0xf4>
 1804e08:	1025883a 	mov	r18,r2
 1804e0c:	003fee06 	br	1804dc8 <__alt_mem_mem_0+0xff7e4dc8>
 1804e10:	00bfffc4 	movi	r2,-1
 1804e14:	8080038d 	sth	r2,14(r16)
 1804e18:	00800044 	movi	r2,1
 1804e1c:	8080030d 	sth	r2,12(r16)
 1804e20:	80001915 	stw	zero,100(r16)
 1804e24:	80000015 	stw	zero,0(r16)
 1804e28:	80000215 	stw	zero,8(r16)
 1804e2c:	80000115 	stw	zero,4(r16)
 1804e30:	80000415 	stw	zero,16(r16)
 1804e34:	80000515 	stw	zero,20(r16)
 1804e38:	80000615 	stw	zero,24(r16)
 1804e3c:	01800204 	movi	r6,8
 1804e40:	000b883a 	mov	r5,zero
 1804e44:	81001704 	addi	r4,r16,92
 1804e48:	18061940 	call	1806194 <memset>
 1804e4c:	8005883a 	mov	r2,r16
 1804e50:	80000c15 	stw	zero,48(r16)
 1804e54:	80000d15 	stw	zero,52(r16)
 1804e58:	80001115 	stw	zero,68(r16)
 1804e5c:	80001215 	stw	zero,72(r16)
 1804e60:	dfc00417 	ldw	ra,16(sp)
 1804e64:	dcc00317 	ldw	r19,12(sp)
 1804e68:	dc800217 	ldw	r18,8(sp)
 1804e6c:	dc400117 	ldw	r17,4(sp)
 1804e70:	dc000017 	ldw	r16,0(sp)
 1804e74:	dec00504 	addi	sp,sp,20
 1804e78:	f800283a 	ret
 1804e7c:	01400104 	movi	r5,4
 1804e80:	9809883a 	mov	r4,r19
 1804e84:	1804d200 	call	1804d20 <__sfmoreglue>
 1804e88:	90800015 	stw	r2,0(r18)
 1804e8c:	103fde1e 	bne	r2,zero,1804e08 <__alt_mem_mem_0+0xff7e4e08>
 1804e90:	00800304 	movi	r2,12
 1804e94:	98800015 	stw	r2,0(r19)
 1804e98:	0005883a 	mov	r2,zero
 1804e9c:	003ff006 	br	1804e60 <__alt_mem_mem_0+0xff7e4e60>

01804ea0 <_cleanup>:
 1804ea0:	00806134 	movhi	r2,388
 1804ea4:	1094f304 	addi	r2,r2,21452
 1804ea8:	11000017 	ldw	r4,0(r2)
 1804eac:	01406074 	movhi	r5,385
 1804eb0:	29637c04 	addi	r5,r5,-29200
 1804eb4:	18054001 	jmpi	1805400 <_fwalk_reent>

01804eb8 <__sinit>:
 1804eb8:	20800e17 	ldw	r2,56(r4)
 1804ebc:	10000126 	beq	r2,zero,1804ec4 <__sinit+0xc>
 1804ec0:	f800283a 	ret
 1804ec4:	1804b7c1 	jmpi	1804b7c <__sinit.part.1>

01804ec8 <__sfp_lock_acquire>:
 1804ec8:	f800283a 	ret

01804ecc <__sfp_lock_release>:
 1804ecc:	f800283a 	ret

01804ed0 <__sinit_lock_acquire>:
 1804ed0:	f800283a 	ret

01804ed4 <__sinit_lock_release>:
 1804ed4:	f800283a 	ret

01804ed8 <__fp_lock_all>:
 1804ed8:	00806134 	movhi	r2,388
 1804edc:	1094f404 	addi	r2,r2,21456
 1804ee0:	11000017 	ldw	r4,0(r2)
 1804ee4:	01406034 	movhi	r5,384
 1804ee8:	29534604 	addi	r5,r5,19736
 1804eec:	180533c1 	jmpi	180533c <_fwalk>

01804ef0 <__fp_unlock_all>:
 1804ef0:	00806134 	movhi	r2,388
 1804ef4:	1094f404 	addi	r2,r2,21456
 1804ef8:	11000017 	ldw	r4,0(r2)
 1804efc:	01406034 	movhi	r5,384
 1804f00:	2952da04 	addi	r5,r5,19304
 1804f04:	180533c1 	jmpi	180533c <_fwalk>

01804f08 <_malloc_trim_r>:
 1804f08:	defffb04 	addi	sp,sp,-20
 1804f0c:	dcc00315 	stw	r19,12(sp)
 1804f10:	04c06134 	movhi	r19,388
 1804f14:	dc800215 	stw	r18,8(sp)
 1804f18:	dc400115 	stw	r17,4(sp)
 1804f1c:	dc000015 	stw	r16,0(sp)
 1804f20:	dfc00415 	stw	ra,16(sp)
 1804f24:	2821883a 	mov	r16,r5
 1804f28:	9cce9204 	addi	r19,r19,14920
 1804f2c:	2025883a 	mov	r18,r4
 1804f30:	180d50c0 	call	180d50c <__malloc_lock>
 1804f34:	98800217 	ldw	r2,8(r19)
 1804f38:	14400117 	ldw	r17,4(r2)
 1804f3c:	00bfff04 	movi	r2,-4
 1804f40:	88a2703a 	and	r17,r17,r2
 1804f44:	8c21c83a 	sub	r16,r17,r16
 1804f48:	8403fbc4 	addi	r16,r16,4079
 1804f4c:	8020d33a 	srli	r16,r16,12
 1804f50:	0083ffc4 	movi	r2,4095
 1804f54:	843fffc4 	addi	r16,r16,-1
 1804f58:	8020933a 	slli	r16,r16,12
 1804f5c:	1400060e 	bge	r2,r16,1804f78 <_malloc_trim_r+0x70>
 1804f60:	000b883a 	mov	r5,zero
 1804f64:	9009883a 	mov	r4,r18
 1804f68:	180732c0 	call	180732c <_sbrk_r>
 1804f6c:	98c00217 	ldw	r3,8(r19)
 1804f70:	1c47883a 	add	r3,r3,r17
 1804f74:	10c00a26 	beq	r2,r3,1804fa0 <_malloc_trim_r+0x98>
 1804f78:	9009883a 	mov	r4,r18
 1804f7c:	180d56c0 	call	180d56c <__malloc_unlock>
 1804f80:	0005883a 	mov	r2,zero
 1804f84:	dfc00417 	ldw	ra,16(sp)
 1804f88:	dcc00317 	ldw	r19,12(sp)
 1804f8c:	dc800217 	ldw	r18,8(sp)
 1804f90:	dc400117 	ldw	r17,4(sp)
 1804f94:	dc000017 	ldw	r16,0(sp)
 1804f98:	dec00504 	addi	sp,sp,20
 1804f9c:	f800283a 	ret
 1804fa0:	040bc83a 	sub	r5,zero,r16
 1804fa4:	9009883a 	mov	r4,r18
 1804fa8:	180732c0 	call	180732c <_sbrk_r>
 1804fac:	00ffffc4 	movi	r3,-1
 1804fb0:	10c00d26 	beq	r2,r3,1804fe8 <_malloc_trim_r+0xe0>
 1804fb4:	00c06134 	movhi	r3,388
 1804fb8:	18dd1204 	addi	r3,r3,29768
 1804fbc:	18800017 	ldw	r2,0(r3)
 1804fc0:	99000217 	ldw	r4,8(r19)
 1804fc4:	8c23c83a 	sub	r17,r17,r16
 1804fc8:	8c400054 	ori	r17,r17,1
 1804fcc:	1421c83a 	sub	r16,r2,r16
 1804fd0:	24400115 	stw	r17,4(r4)
 1804fd4:	9009883a 	mov	r4,r18
 1804fd8:	1c000015 	stw	r16,0(r3)
 1804fdc:	180d56c0 	call	180d56c <__malloc_unlock>
 1804fe0:	00800044 	movi	r2,1
 1804fe4:	003fe706 	br	1804f84 <__alt_mem_mem_0+0xff7e4f84>
 1804fe8:	000b883a 	mov	r5,zero
 1804fec:	9009883a 	mov	r4,r18
 1804ff0:	180732c0 	call	180732c <_sbrk_r>
 1804ff4:	99000217 	ldw	r4,8(r19)
 1804ff8:	014003c4 	movi	r5,15
 1804ffc:	1107c83a 	sub	r3,r2,r4
 1805000:	28ffdd0e 	bge	r5,r3,1804f78 <__alt_mem_mem_0+0xff7e4f78>
 1805004:	01406134 	movhi	r5,388
 1805008:	2954f604 	addi	r5,r5,21464
 180500c:	29400017 	ldw	r5,0(r5)
 1805010:	18c00054 	ori	r3,r3,1
 1805014:	20c00115 	stw	r3,4(r4)
 1805018:	00c06134 	movhi	r3,388
 180501c:	1145c83a 	sub	r2,r2,r5
 1805020:	18dd1204 	addi	r3,r3,29768
 1805024:	18800015 	stw	r2,0(r3)
 1805028:	003fd306 	br	1804f78 <__alt_mem_mem_0+0xff7e4f78>

0180502c <_free_r>:
 180502c:	28004126 	beq	r5,zero,1805134 <_free_r+0x108>
 1805030:	defffd04 	addi	sp,sp,-12
 1805034:	dc400115 	stw	r17,4(sp)
 1805038:	dc000015 	stw	r16,0(sp)
 180503c:	2023883a 	mov	r17,r4
 1805040:	2821883a 	mov	r16,r5
 1805044:	dfc00215 	stw	ra,8(sp)
 1805048:	180d50c0 	call	180d50c <__malloc_lock>
 180504c:	81ffff17 	ldw	r7,-4(r16)
 1805050:	00bfff84 	movi	r2,-2
 1805054:	01006134 	movhi	r4,388
 1805058:	81bffe04 	addi	r6,r16,-8
 180505c:	3884703a 	and	r2,r7,r2
 1805060:	210e9204 	addi	r4,r4,14920
 1805064:	308b883a 	add	r5,r6,r2
 1805068:	2a400117 	ldw	r9,4(r5)
 180506c:	22000217 	ldw	r8,8(r4)
 1805070:	00ffff04 	movi	r3,-4
 1805074:	48c6703a 	and	r3,r9,r3
 1805078:	2a005726 	beq	r5,r8,18051d8 <_free_r+0x1ac>
 180507c:	28c00115 	stw	r3,4(r5)
 1805080:	39c0004c 	andi	r7,r7,1
 1805084:	3800091e 	bne	r7,zero,18050ac <_free_r+0x80>
 1805088:	823ffe17 	ldw	r8,-8(r16)
 180508c:	22400204 	addi	r9,r4,8
 1805090:	320dc83a 	sub	r6,r6,r8
 1805094:	31c00217 	ldw	r7,8(r6)
 1805098:	1205883a 	add	r2,r2,r8
 180509c:	3a406526 	beq	r7,r9,1805234 <_free_r+0x208>
 18050a0:	32000317 	ldw	r8,12(r6)
 18050a4:	3a000315 	stw	r8,12(r7)
 18050a8:	41c00215 	stw	r7,8(r8)
 18050ac:	28cf883a 	add	r7,r5,r3
 18050b0:	39c00117 	ldw	r7,4(r7)
 18050b4:	39c0004c 	andi	r7,r7,1
 18050b8:	38003a26 	beq	r7,zero,18051a4 <_free_r+0x178>
 18050bc:	10c00054 	ori	r3,r2,1
 18050c0:	30c00115 	stw	r3,4(r6)
 18050c4:	3087883a 	add	r3,r6,r2
 18050c8:	18800015 	stw	r2,0(r3)
 18050cc:	00c07fc4 	movi	r3,511
 18050d0:	18801936 	bltu	r3,r2,1805138 <_free_r+0x10c>
 18050d4:	1004d0fa 	srli	r2,r2,3
 18050d8:	01c00044 	movi	r7,1
 18050dc:	21400117 	ldw	r5,4(r4)
 18050e0:	10c00044 	addi	r3,r2,1
 18050e4:	18c7883a 	add	r3,r3,r3
 18050e8:	1005d0ba 	srai	r2,r2,2
 18050ec:	18c7883a 	add	r3,r3,r3
 18050f0:	18c7883a 	add	r3,r3,r3
 18050f4:	1907883a 	add	r3,r3,r4
 18050f8:	3884983a 	sll	r2,r7,r2
 18050fc:	19c00017 	ldw	r7,0(r3)
 1805100:	1a3ffe04 	addi	r8,r3,-8
 1805104:	1144b03a 	or	r2,r2,r5
 1805108:	32000315 	stw	r8,12(r6)
 180510c:	31c00215 	stw	r7,8(r6)
 1805110:	20800115 	stw	r2,4(r4)
 1805114:	19800015 	stw	r6,0(r3)
 1805118:	39800315 	stw	r6,12(r7)
 180511c:	8809883a 	mov	r4,r17
 1805120:	dfc00217 	ldw	ra,8(sp)
 1805124:	dc400117 	ldw	r17,4(sp)
 1805128:	dc000017 	ldw	r16,0(sp)
 180512c:	dec00304 	addi	sp,sp,12
 1805130:	180d56c1 	jmpi	180d56c <__malloc_unlock>
 1805134:	f800283a 	ret
 1805138:	100ad27a 	srli	r5,r2,9
 180513c:	00c00104 	movi	r3,4
 1805140:	19404a36 	bltu	r3,r5,180526c <_free_r+0x240>
 1805144:	100ad1ba 	srli	r5,r2,6
 1805148:	28c00e44 	addi	r3,r5,57
 180514c:	18c7883a 	add	r3,r3,r3
 1805150:	29400e04 	addi	r5,r5,56
 1805154:	18c7883a 	add	r3,r3,r3
 1805158:	18c7883a 	add	r3,r3,r3
 180515c:	1909883a 	add	r4,r3,r4
 1805160:	20c00017 	ldw	r3,0(r4)
 1805164:	01c06134 	movhi	r7,388
 1805168:	213ffe04 	addi	r4,r4,-8
 180516c:	39ce9204 	addi	r7,r7,14920
 1805170:	20c04426 	beq	r4,r3,1805284 <_free_r+0x258>
 1805174:	01ffff04 	movi	r7,-4
 1805178:	19400117 	ldw	r5,4(r3)
 180517c:	29ca703a 	and	r5,r5,r7
 1805180:	1140022e 	bgeu	r2,r5,180518c <_free_r+0x160>
 1805184:	18c00217 	ldw	r3,8(r3)
 1805188:	20fffb1e 	bne	r4,r3,1805178 <__alt_mem_mem_0+0xff7e5178>
 180518c:	19000317 	ldw	r4,12(r3)
 1805190:	31000315 	stw	r4,12(r6)
 1805194:	30c00215 	stw	r3,8(r6)
 1805198:	21800215 	stw	r6,8(r4)
 180519c:	19800315 	stw	r6,12(r3)
 18051a0:	003fde06 	br	180511c <__alt_mem_mem_0+0xff7e511c>
 18051a4:	29c00217 	ldw	r7,8(r5)
 18051a8:	10c5883a 	add	r2,r2,r3
 18051ac:	00c06134 	movhi	r3,388
 18051b0:	18ce9404 	addi	r3,r3,14928
 18051b4:	38c03b26 	beq	r7,r3,18052a4 <_free_r+0x278>
 18051b8:	2a000317 	ldw	r8,12(r5)
 18051bc:	11400054 	ori	r5,r2,1
 18051c0:	3087883a 	add	r3,r6,r2
 18051c4:	3a000315 	stw	r8,12(r7)
 18051c8:	41c00215 	stw	r7,8(r8)
 18051cc:	31400115 	stw	r5,4(r6)
 18051d0:	18800015 	stw	r2,0(r3)
 18051d4:	003fbd06 	br	18050cc <__alt_mem_mem_0+0xff7e50cc>
 18051d8:	39c0004c 	andi	r7,r7,1
 18051dc:	10c5883a 	add	r2,r2,r3
 18051e0:	3800071e 	bne	r7,zero,1805200 <_free_r+0x1d4>
 18051e4:	81fffe17 	ldw	r7,-8(r16)
 18051e8:	31cdc83a 	sub	r6,r6,r7
 18051ec:	30c00317 	ldw	r3,12(r6)
 18051f0:	31400217 	ldw	r5,8(r6)
 18051f4:	11c5883a 	add	r2,r2,r7
 18051f8:	28c00315 	stw	r3,12(r5)
 18051fc:	19400215 	stw	r5,8(r3)
 1805200:	10c00054 	ori	r3,r2,1
 1805204:	30c00115 	stw	r3,4(r6)
 1805208:	00c06134 	movhi	r3,388
 180520c:	18d4f704 	addi	r3,r3,21468
 1805210:	18c00017 	ldw	r3,0(r3)
 1805214:	21800215 	stw	r6,8(r4)
 1805218:	10ffc036 	bltu	r2,r3,180511c <__alt_mem_mem_0+0xff7e511c>
 180521c:	00806134 	movhi	r2,388
 1805220:	109cc004 	addi	r2,r2,29440
 1805224:	11400017 	ldw	r5,0(r2)
 1805228:	8809883a 	mov	r4,r17
 180522c:	1804f080 	call	1804f08 <_malloc_trim_r>
 1805230:	003fba06 	br	180511c <__alt_mem_mem_0+0xff7e511c>
 1805234:	28c9883a 	add	r4,r5,r3
 1805238:	21000117 	ldw	r4,4(r4)
 180523c:	2100004c 	andi	r4,r4,1
 1805240:	2000391e 	bne	r4,zero,1805328 <_free_r+0x2fc>
 1805244:	29c00217 	ldw	r7,8(r5)
 1805248:	29000317 	ldw	r4,12(r5)
 180524c:	1885883a 	add	r2,r3,r2
 1805250:	10c00054 	ori	r3,r2,1
 1805254:	39000315 	stw	r4,12(r7)
 1805258:	21c00215 	stw	r7,8(r4)
 180525c:	30c00115 	stw	r3,4(r6)
 1805260:	308d883a 	add	r6,r6,r2
 1805264:	30800015 	stw	r2,0(r6)
 1805268:	003fac06 	br	180511c <__alt_mem_mem_0+0xff7e511c>
 180526c:	00c00504 	movi	r3,20
 1805270:	19401536 	bltu	r3,r5,18052c8 <_free_r+0x29c>
 1805274:	28c01704 	addi	r3,r5,92
 1805278:	18c7883a 	add	r3,r3,r3
 180527c:	294016c4 	addi	r5,r5,91
 1805280:	003fb406 	br	1805154 <__alt_mem_mem_0+0xff7e5154>
 1805284:	280bd0ba 	srai	r5,r5,2
 1805288:	00c00044 	movi	r3,1
 180528c:	38800117 	ldw	r2,4(r7)
 1805290:	194a983a 	sll	r5,r3,r5
 1805294:	2007883a 	mov	r3,r4
 1805298:	2884b03a 	or	r2,r5,r2
 180529c:	38800115 	stw	r2,4(r7)
 18052a0:	003fbb06 	br	1805190 <__alt_mem_mem_0+0xff7e5190>
 18052a4:	21800515 	stw	r6,20(r4)
 18052a8:	21800415 	stw	r6,16(r4)
 18052ac:	10c00054 	ori	r3,r2,1
 18052b0:	31c00315 	stw	r7,12(r6)
 18052b4:	31c00215 	stw	r7,8(r6)
 18052b8:	30c00115 	stw	r3,4(r6)
 18052bc:	308d883a 	add	r6,r6,r2
 18052c0:	30800015 	stw	r2,0(r6)
 18052c4:	003f9506 	br	180511c <__alt_mem_mem_0+0xff7e511c>
 18052c8:	00c01504 	movi	r3,84
 18052cc:	19400536 	bltu	r3,r5,18052e4 <_free_r+0x2b8>
 18052d0:	100ad33a 	srli	r5,r2,12
 18052d4:	28c01bc4 	addi	r3,r5,111
 18052d8:	18c7883a 	add	r3,r3,r3
 18052dc:	29401b84 	addi	r5,r5,110
 18052e0:	003f9c06 	br	1805154 <__alt_mem_mem_0+0xff7e5154>
 18052e4:	00c05504 	movi	r3,340
 18052e8:	19400536 	bltu	r3,r5,1805300 <_free_r+0x2d4>
 18052ec:	100ad3fa 	srli	r5,r2,15
 18052f0:	28c01e04 	addi	r3,r5,120
 18052f4:	18c7883a 	add	r3,r3,r3
 18052f8:	29401dc4 	addi	r5,r5,119
 18052fc:	003f9506 	br	1805154 <__alt_mem_mem_0+0xff7e5154>
 1805300:	00c15504 	movi	r3,1364
 1805304:	19400536 	bltu	r3,r5,180531c <_free_r+0x2f0>
 1805308:	100ad4ba 	srli	r5,r2,18
 180530c:	28c01f44 	addi	r3,r5,125
 1805310:	18c7883a 	add	r3,r3,r3
 1805314:	29401f04 	addi	r5,r5,124
 1805318:	003f8e06 	br	1805154 <__alt_mem_mem_0+0xff7e5154>
 180531c:	00c03f84 	movi	r3,254
 1805320:	01401f84 	movi	r5,126
 1805324:	003f8b06 	br	1805154 <__alt_mem_mem_0+0xff7e5154>
 1805328:	10c00054 	ori	r3,r2,1
 180532c:	30c00115 	stw	r3,4(r6)
 1805330:	308d883a 	add	r6,r6,r2
 1805334:	30800015 	stw	r2,0(r6)
 1805338:	003f7806 	br	180511c <__alt_mem_mem_0+0xff7e511c>

0180533c <_fwalk>:
 180533c:	defff704 	addi	sp,sp,-36
 1805340:	dd000415 	stw	r20,16(sp)
 1805344:	dfc00815 	stw	ra,32(sp)
 1805348:	ddc00715 	stw	r23,28(sp)
 180534c:	dd800615 	stw	r22,24(sp)
 1805350:	dd400515 	stw	r21,20(sp)
 1805354:	dcc00315 	stw	r19,12(sp)
 1805358:	dc800215 	stw	r18,8(sp)
 180535c:	dc400115 	stw	r17,4(sp)
 1805360:	dc000015 	stw	r16,0(sp)
 1805364:	2500b804 	addi	r20,r4,736
 1805368:	a0002326 	beq	r20,zero,18053f8 <_fwalk+0xbc>
 180536c:	282b883a 	mov	r21,r5
 1805370:	002f883a 	mov	r23,zero
 1805374:	05800044 	movi	r22,1
 1805378:	04ffffc4 	movi	r19,-1
 180537c:	a4400117 	ldw	r17,4(r20)
 1805380:	a4800217 	ldw	r18,8(r20)
 1805384:	8c7fffc4 	addi	r17,r17,-1
 1805388:	88000d16 	blt	r17,zero,18053c0 <_fwalk+0x84>
 180538c:	94000304 	addi	r16,r18,12
 1805390:	94800384 	addi	r18,r18,14
 1805394:	8080000b 	ldhu	r2,0(r16)
 1805398:	8c7fffc4 	addi	r17,r17,-1
 180539c:	813ffd04 	addi	r4,r16,-12
 18053a0:	b080042e 	bgeu	r22,r2,18053b4 <_fwalk+0x78>
 18053a4:	9080000f 	ldh	r2,0(r18)
 18053a8:	14c00226 	beq	r2,r19,18053b4 <_fwalk+0x78>
 18053ac:	a83ee83a 	callr	r21
 18053b0:	b8aeb03a 	or	r23,r23,r2
 18053b4:	84001a04 	addi	r16,r16,104
 18053b8:	94801a04 	addi	r18,r18,104
 18053bc:	8cfff51e 	bne	r17,r19,1805394 <__alt_mem_mem_0+0xff7e5394>
 18053c0:	a5000017 	ldw	r20,0(r20)
 18053c4:	a03fed1e 	bne	r20,zero,180537c <__alt_mem_mem_0+0xff7e537c>
 18053c8:	b805883a 	mov	r2,r23
 18053cc:	dfc00817 	ldw	ra,32(sp)
 18053d0:	ddc00717 	ldw	r23,28(sp)
 18053d4:	dd800617 	ldw	r22,24(sp)
 18053d8:	dd400517 	ldw	r21,20(sp)
 18053dc:	dd000417 	ldw	r20,16(sp)
 18053e0:	dcc00317 	ldw	r19,12(sp)
 18053e4:	dc800217 	ldw	r18,8(sp)
 18053e8:	dc400117 	ldw	r17,4(sp)
 18053ec:	dc000017 	ldw	r16,0(sp)
 18053f0:	dec00904 	addi	sp,sp,36
 18053f4:	f800283a 	ret
 18053f8:	002f883a 	mov	r23,zero
 18053fc:	003ff206 	br	18053c8 <__alt_mem_mem_0+0xff7e53c8>

01805400 <_fwalk_reent>:
 1805400:	defff704 	addi	sp,sp,-36
 1805404:	dd000415 	stw	r20,16(sp)
 1805408:	dfc00815 	stw	ra,32(sp)
 180540c:	ddc00715 	stw	r23,28(sp)
 1805410:	dd800615 	stw	r22,24(sp)
 1805414:	dd400515 	stw	r21,20(sp)
 1805418:	dcc00315 	stw	r19,12(sp)
 180541c:	dc800215 	stw	r18,8(sp)
 1805420:	dc400115 	stw	r17,4(sp)
 1805424:	dc000015 	stw	r16,0(sp)
 1805428:	2500b804 	addi	r20,r4,736
 180542c:	a0002326 	beq	r20,zero,18054bc <_fwalk_reent+0xbc>
 1805430:	282b883a 	mov	r21,r5
 1805434:	2027883a 	mov	r19,r4
 1805438:	002f883a 	mov	r23,zero
 180543c:	05800044 	movi	r22,1
 1805440:	04bfffc4 	movi	r18,-1
 1805444:	a4400117 	ldw	r17,4(r20)
 1805448:	a4000217 	ldw	r16,8(r20)
 180544c:	8c7fffc4 	addi	r17,r17,-1
 1805450:	88000c16 	blt	r17,zero,1805484 <_fwalk_reent+0x84>
 1805454:	84000304 	addi	r16,r16,12
 1805458:	8080000b 	ldhu	r2,0(r16)
 180545c:	8c7fffc4 	addi	r17,r17,-1
 1805460:	817ffd04 	addi	r5,r16,-12
 1805464:	b080052e 	bgeu	r22,r2,180547c <_fwalk_reent+0x7c>
 1805468:	8080008f 	ldh	r2,2(r16)
 180546c:	9809883a 	mov	r4,r19
 1805470:	14800226 	beq	r2,r18,180547c <_fwalk_reent+0x7c>
 1805474:	a83ee83a 	callr	r21
 1805478:	b8aeb03a 	or	r23,r23,r2
 180547c:	84001a04 	addi	r16,r16,104
 1805480:	8cbff51e 	bne	r17,r18,1805458 <__alt_mem_mem_0+0xff7e5458>
 1805484:	a5000017 	ldw	r20,0(r20)
 1805488:	a03fee1e 	bne	r20,zero,1805444 <__alt_mem_mem_0+0xff7e5444>
 180548c:	b805883a 	mov	r2,r23
 1805490:	dfc00817 	ldw	ra,32(sp)
 1805494:	ddc00717 	ldw	r23,28(sp)
 1805498:	dd800617 	ldw	r22,24(sp)
 180549c:	dd400517 	ldw	r21,20(sp)
 18054a0:	dd000417 	ldw	r20,16(sp)
 18054a4:	dcc00317 	ldw	r19,12(sp)
 18054a8:	dc800217 	ldw	r18,8(sp)
 18054ac:	dc400117 	ldw	r17,4(sp)
 18054b0:	dc000017 	ldw	r16,0(sp)
 18054b4:	dec00904 	addi	sp,sp,36
 18054b8:	f800283a 	ret
 18054bc:	002f883a 	mov	r23,zero
 18054c0:	003ff206 	br	180548c <__alt_mem_mem_0+0xff7e548c>

018054c4 <_setlocale_r>:
 18054c4:	30001b26 	beq	r6,zero,1805534 <_setlocale_r+0x70>
 18054c8:	01406134 	movhi	r5,388
 18054cc:	defffe04 	addi	sp,sp,-8
 18054d0:	29429a04 	addi	r5,r5,2664
 18054d4:	3009883a 	mov	r4,r6
 18054d8:	dc000015 	stw	r16,0(sp)
 18054dc:	dfc00115 	stw	ra,4(sp)
 18054e0:	3021883a 	mov	r16,r6
 18054e4:	18074bc0 	call	18074bc <strcmp>
 18054e8:	1000061e 	bne	r2,zero,1805504 <_setlocale_r+0x40>
 18054ec:	00806134 	movhi	r2,388
 18054f0:	10829904 	addi	r2,r2,2660
 18054f4:	dfc00117 	ldw	ra,4(sp)
 18054f8:	dc000017 	ldw	r16,0(sp)
 18054fc:	dec00204 	addi	sp,sp,8
 1805500:	f800283a 	ret
 1805504:	01406134 	movhi	r5,388
 1805508:	29429904 	addi	r5,r5,2660
 180550c:	8009883a 	mov	r4,r16
 1805510:	18074bc0 	call	18074bc <strcmp>
 1805514:	103ff526 	beq	r2,zero,18054ec <__alt_mem_mem_0+0xff7e54ec>
 1805518:	01406134 	movhi	r5,388
 180551c:	29428404 	addi	r5,r5,2576
 1805520:	8009883a 	mov	r4,r16
 1805524:	18074bc0 	call	18074bc <strcmp>
 1805528:	103ff026 	beq	r2,zero,18054ec <__alt_mem_mem_0+0xff7e54ec>
 180552c:	0005883a 	mov	r2,zero
 1805530:	003ff006 	br	18054f4 <__alt_mem_mem_0+0xff7e54f4>
 1805534:	00806134 	movhi	r2,388
 1805538:	10829904 	addi	r2,r2,2660
 180553c:	f800283a 	ret

01805540 <__locale_charset>:
 1805540:	00806134 	movhi	r2,388
 1805544:	108e7c04 	addi	r2,r2,14832
 1805548:	f800283a 	ret

0180554c <__locale_mb_cur_max>:
 180554c:	00806134 	movhi	r2,388
 1805550:	1094f504 	addi	r2,r2,21460
 1805554:	10800017 	ldw	r2,0(r2)
 1805558:	f800283a 	ret

0180555c <__locale_msgcharset>:
 180555c:	00806134 	movhi	r2,388
 1805560:	108e7404 	addi	r2,r2,14800
 1805564:	f800283a 	ret

01805568 <__locale_cjk_lang>:
 1805568:	0005883a 	mov	r2,zero
 180556c:	f800283a 	ret

01805570 <_localeconv_r>:
 1805570:	00806134 	movhi	r2,388
 1805574:	108e8404 	addi	r2,r2,14864
 1805578:	f800283a 	ret

0180557c <setlocale>:
 180557c:	00806134 	movhi	r2,388
 1805580:	1094f404 	addi	r2,r2,21456
 1805584:	280d883a 	mov	r6,r5
 1805588:	200b883a 	mov	r5,r4
 180558c:	11000017 	ldw	r4,0(r2)
 1805590:	18054c41 	jmpi	18054c4 <_setlocale_r>

01805594 <localeconv>:
 1805594:	00806134 	movhi	r2,388
 1805598:	108e8404 	addi	r2,r2,14864
 180559c:	f800283a 	ret

018055a0 <__smakebuf_r>:
 18055a0:	2880030b 	ldhu	r2,12(r5)
 18055a4:	10c0008c 	andi	r3,r2,2
 18055a8:	1800411e 	bne	r3,zero,18056b0 <__smakebuf_r+0x110>
 18055ac:	deffec04 	addi	sp,sp,-80
 18055b0:	dc000f15 	stw	r16,60(sp)
 18055b4:	2821883a 	mov	r16,r5
 18055b8:	2940038f 	ldh	r5,14(r5)
 18055bc:	dc401015 	stw	r17,64(sp)
 18055c0:	dfc01315 	stw	ra,76(sp)
 18055c4:	dcc01215 	stw	r19,72(sp)
 18055c8:	dc801115 	stw	r18,68(sp)
 18055cc:	2023883a 	mov	r17,r4
 18055d0:	28001c16 	blt	r5,zero,1805644 <__smakebuf_r+0xa4>
 18055d4:	d80d883a 	mov	r6,sp
 18055d8:	18090fc0 	call	18090fc <_fstat_r>
 18055dc:	10001816 	blt	r2,zero,1805640 <__smakebuf_r+0xa0>
 18055e0:	d8800117 	ldw	r2,4(sp)
 18055e4:	00e00014 	movui	r3,32768
 18055e8:	10bc000c 	andi	r2,r2,61440
 18055ec:	14c80020 	cmpeqi	r19,r2,8192
 18055f0:	10c03726 	beq	r2,r3,18056d0 <__smakebuf_r+0x130>
 18055f4:	80c0030b 	ldhu	r3,12(r16)
 18055f8:	18c20014 	ori	r3,r3,2048
 18055fc:	80c0030d 	sth	r3,12(r16)
 1805600:	00c80004 	movi	r3,8192
 1805604:	10c0521e 	bne	r2,r3,1805750 <__smakebuf_r+0x1b0>
 1805608:	8140038f 	ldh	r5,14(r16)
 180560c:	8809883a 	mov	r4,r17
 1805610:	18096140 	call	1809614 <_isatty_r>
 1805614:	10004c26 	beq	r2,zero,1805748 <__smakebuf_r+0x1a8>
 1805618:	8080030b 	ldhu	r2,12(r16)
 180561c:	80c010c4 	addi	r3,r16,67
 1805620:	80c00015 	stw	r3,0(r16)
 1805624:	10800054 	ori	r2,r2,1
 1805628:	8080030d 	sth	r2,12(r16)
 180562c:	00800044 	movi	r2,1
 1805630:	80c00415 	stw	r3,16(r16)
 1805634:	80800515 	stw	r2,20(r16)
 1805638:	04810004 	movi	r18,1024
 180563c:	00000706 	br	180565c <__smakebuf_r+0xbc>
 1805640:	8080030b 	ldhu	r2,12(r16)
 1805644:	10c0200c 	andi	r3,r2,128
 1805648:	18001f1e 	bne	r3,zero,18056c8 <__smakebuf_r+0x128>
 180564c:	04810004 	movi	r18,1024
 1805650:	10820014 	ori	r2,r2,2048
 1805654:	8080030d 	sth	r2,12(r16)
 1805658:	0027883a 	mov	r19,zero
 180565c:	900b883a 	mov	r5,r18
 1805660:	8809883a 	mov	r4,r17
 1805664:	180575c0 	call	180575c <_malloc_r>
 1805668:	10002c26 	beq	r2,zero,180571c <__smakebuf_r+0x17c>
 180566c:	80c0030b 	ldhu	r3,12(r16)
 1805670:	01006034 	movhi	r4,384
 1805674:	2112dc04 	addi	r4,r4,19312
 1805678:	89000f15 	stw	r4,60(r17)
 180567c:	18c02014 	ori	r3,r3,128
 1805680:	80c0030d 	sth	r3,12(r16)
 1805684:	80800015 	stw	r2,0(r16)
 1805688:	80800415 	stw	r2,16(r16)
 180568c:	84800515 	stw	r18,20(r16)
 1805690:	98001a1e 	bne	r19,zero,18056fc <__smakebuf_r+0x15c>
 1805694:	dfc01317 	ldw	ra,76(sp)
 1805698:	dcc01217 	ldw	r19,72(sp)
 180569c:	dc801117 	ldw	r18,68(sp)
 18056a0:	dc401017 	ldw	r17,64(sp)
 18056a4:	dc000f17 	ldw	r16,60(sp)
 18056a8:	dec01404 	addi	sp,sp,80
 18056ac:	f800283a 	ret
 18056b0:	288010c4 	addi	r2,r5,67
 18056b4:	28800015 	stw	r2,0(r5)
 18056b8:	28800415 	stw	r2,16(r5)
 18056bc:	00800044 	movi	r2,1
 18056c0:	28800515 	stw	r2,20(r5)
 18056c4:	f800283a 	ret
 18056c8:	04801004 	movi	r18,64
 18056cc:	003fe006 	br	1805650 <__alt_mem_mem_0+0xff7e5650>
 18056d0:	81000a17 	ldw	r4,40(r16)
 18056d4:	00c06034 	movhi	r3,384
 18056d8:	18dd1604 	addi	r3,r3,29784
 18056dc:	20ffc51e 	bne	r4,r3,18055f4 <__alt_mem_mem_0+0xff7e55f4>
 18056e0:	8080030b 	ldhu	r2,12(r16)
 18056e4:	04810004 	movi	r18,1024
 18056e8:	84801315 	stw	r18,76(r16)
 18056ec:	1484b03a 	or	r2,r2,r18
 18056f0:	8080030d 	sth	r2,12(r16)
 18056f4:	0027883a 	mov	r19,zero
 18056f8:	003fd806 	br	180565c <__alt_mem_mem_0+0xff7e565c>
 18056fc:	8140038f 	ldh	r5,14(r16)
 1805700:	8809883a 	mov	r4,r17
 1805704:	18096140 	call	1809614 <_isatty_r>
 1805708:	103fe226 	beq	r2,zero,1805694 <__alt_mem_mem_0+0xff7e5694>
 180570c:	8080030b 	ldhu	r2,12(r16)
 1805710:	10800054 	ori	r2,r2,1
 1805714:	8080030d 	sth	r2,12(r16)
 1805718:	003fde06 	br	1805694 <__alt_mem_mem_0+0xff7e5694>
 180571c:	8080030b 	ldhu	r2,12(r16)
 1805720:	10c0800c 	andi	r3,r2,512
 1805724:	183fdb1e 	bne	r3,zero,1805694 <__alt_mem_mem_0+0xff7e5694>
 1805728:	10800094 	ori	r2,r2,2
 180572c:	80c010c4 	addi	r3,r16,67
 1805730:	8080030d 	sth	r2,12(r16)
 1805734:	00800044 	movi	r2,1
 1805738:	80c00015 	stw	r3,0(r16)
 180573c:	80c00415 	stw	r3,16(r16)
 1805740:	80800515 	stw	r2,20(r16)
 1805744:	003fd306 	br	1805694 <__alt_mem_mem_0+0xff7e5694>
 1805748:	04810004 	movi	r18,1024
 180574c:	003fc306 	br	180565c <__alt_mem_mem_0+0xff7e565c>
 1805750:	0027883a 	mov	r19,zero
 1805754:	04810004 	movi	r18,1024
 1805758:	003fc006 	br	180565c <__alt_mem_mem_0+0xff7e565c>

0180575c <_malloc_r>:
 180575c:	defff504 	addi	sp,sp,-44
 1805760:	dc800315 	stw	r18,12(sp)
 1805764:	dfc00a15 	stw	ra,40(sp)
 1805768:	df000915 	stw	fp,36(sp)
 180576c:	ddc00815 	stw	r23,32(sp)
 1805770:	dd800715 	stw	r22,28(sp)
 1805774:	dd400615 	stw	r21,24(sp)
 1805778:	dd000515 	stw	r20,20(sp)
 180577c:	dcc00415 	stw	r19,16(sp)
 1805780:	dc400215 	stw	r17,8(sp)
 1805784:	dc000115 	stw	r16,4(sp)
 1805788:	288002c4 	addi	r2,r5,11
 180578c:	00c00584 	movi	r3,22
 1805790:	2025883a 	mov	r18,r4
 1805794:	18807f2e 	bgeu	r3,r2,1805994 <_malloc_r+0x238>
 1805798:	047ffe04 	movi	r17,-8
 180579c:	1462703a 	and	r17,r2,r17
 18057a0:	8800a316 	blt	r17,zero,1805a30 <_malloc_r+0x2d4>
 18057a4:	8940a236 	bltu	r17,r5,1805a30 <_malloc_r+0x2d4>
 18057a8:	180d50c0 	call	180d50c <__malloc_lock>
 18057ac:	00807dc4 	movi	r2,503
 18057b0:	1441e92e 	bgeu	r2,r17,1805f58 <_malloc_r+0x7fc>
 18057b4:	8804d27a 	srli	r2,r17,9
 18057b8:	1000a126 	beq	r2,zero,1805a40 <_malloc_r+0x2e4>
 18057bc:	00c00104 	movi	r3,4
 18057c0:	18811e36 	bltu	r3,r2,1805c3c <_malloc_r+0x4e0>
 18057c4:	8804d1ba 	srli	r2,r17,6
 18057c8:	12000e44 	addi	r8,r2,57
 18057cc:	11c00e04 	addi	r7,r2,56
 18057d0:	4209883a 	add	r4,r8,r8
 18057d4:	04c06134 	movhi	r19,388
 18057d8:	2109883a 	add	r4,r4,r4
 18057dc:	9cce9204 	addi	r19,r19,14920
 18057e0:	2109883a 	add	r4,r4,r4
 18057e4:	9909883a 	add	r4,r19,r4
 18057e8:	24000117 	ldw	r16,4(r4)
 18057ec:	213ffe04 	addi	r4,r4,-8
 18057f0:	24009726 	beq	r4,r16,1805a50 <_malloc_r+0x2f4>
 18057f4:	80800117 	ldw	r2,4(r16)
 18057f8:	01bfff04 	movi	r6,-4
 18057fc:	014003c4 	movi	r5,15
 1805800:	1184703a 	and	r2,r2,r6
 1805804:	1447c83a 	sub	r3,r2,r17
 1805808:	28c00716 	blt	r5,r3,1805828 <_malloc_r+0xcc>
 180580c:	1800920e 	bge	r3,zero,1805a58 <_malloc_r+0x2fc>
 1805810:	84000317 	ldw	r16,12(r16)
 1805814:	24008e26 	beq	r4,r16,1805a50 <_malloc_r+0x2f4>
 1805818:	80800117 	ldw	r2,4(r16)
 180581c:	1184703a 	and	r2,r2,r6
 1805820:	1447c83a 	sub	r3,r2,r17
 1805824:	28fff90e 	bge	r5,r3,180580c <__alt_mem_mem_0+0xff7e580c>
 1805828:	3809883a 	mov	r4,r7
 180582c:	01806134 	movhi	r6,388
 1805830:	9c000417 	ldw	r16,16(r19)
 1805834:	318e9204 	addi	r6,r6,14920
 1805838:	32000204 	addi	r8,r6,8
 180583c:	82013426 	beq	r16,r8,1805d10 <_malloc_r+0x5b4>
 1805840:	80c00117 	ldw	r3,4(r16)
 1805844:	00bfff04 	movi	r2,-4
 1805848:	188e703a 	and	r7,r3,r2
 180584c:	3c45c83a 	sub	r2,r7,r17
 1805850:	00c003c4 	movi	r3,15
 1805854:	18811f16 	blt	r3,r2,1805cd4 <_malloc_r+0x578>
 1805858:	32000515 	stw	r8,20(r6)
 180585c:	32000415 	stw	r8,16(r6)
 1805860:	10007f0e 	bge	r2,zero,1805a60 <_malloc_r+0x304>
 1805864:	00807fc4 	movi	r2,511
 1805868:	11c0fd36 	bltu	r2,r7,1805c60 <_malloc_r+0x504>
 180586c:	3806d0fa 	srli	r3,r7,3
 1805870:	01c00044 	movi	r7,1
 1805874:	30800117 	ldw	r2,4(r6)
 1805878:	19400044 	addi	r5,r3,1
 180587c:	294b883a 	add	r5,r5,r5
 1805880:	1807d0ba 	srai	r3,r3,2
 1805884:	294b883a 	add	r5,r5,r5
 1805888:	294b883a 	add	r5,r5,r5
 180588c:	298b883a 	add	r5,r5,r6
 1805890:	38c6983a 	sll	r3,r7,r3
 1805894:	29c00017 	ldw	r7,0(r5)
 1805898:	2a7ffe04 	addi	r9,r5,-8
 180589c:	1886b03a 	or	r3,r3,r2
 18058a0:	82400315 	stw	r9,12(r16)
 18058a4:	81c00215 	stw	r7,8(r16)
 18058a8:	30c00115 	stw	r3,4(r6)
 18058ac:	2c000015 	stw	r16,0(r5)
 18058b0:	3c000315 	stw	r16,12(r7)
 18058b4:	2005d0ba 	srai	r2,r4,2
 18058b8:	01400044 	movi	r5,1
 18058bc:	288a983a 	sll	r5,r5,r2
 18058c0:	19406f36 	bltu	r3,r5,1805a80 <_malloc_r+0x324>
 18058c4:	28c4703a 	and	r2,r5,r3
 18058c8:	10000a1e 	bne	r2,zero,18058f4 <_malloc_r+0x198>
 18058cc:	00bfff04 	movi	r2,-4
 18058d0:	294b883a 	add	r5,r5,r5
 18058d4:	2088703a 	and	r4,r4,r2
 18058d8:	28c4703a 	and	r2,r5,r3
 18058dc:	21000104 	addi	r4,r4,4
 18058e0:	1000041e 	bne	r2,zero,18058f4 <_malloc_r+0x198>
 18058e4:	294b883a 	add	r5,r5,r5
 18058e8:	28c4703a 	and	r2,r5,r3
 18058ec:	21000104 	addi	r4,r4,4
 18058f0:	103ffc26 	beq	r2,zero,18058e4 <__alt_mem_mem_0+0xff7e58e4>
 18058f4:	02bfff04 	movi	r10,-4
 18058f8:	024003c4 	movi	r9,15
 18058fc:	21800044 	addi	r6,r4,1
 1805900:	318d883a 	add	r6,r6,r6
 1805904:	318d883a 	add	r6,r6,r6
 1805908:	318d883a 	add	r6,r6,r6
 180590c:	998d883a 	add	r6,r19,r6
 1805910:	333ffe04 	addi	r12,r6,-8
 1805914:	2017883a 	mov	r11,r4
 1805918:	31800104 	addi	r6,r6,4
 180591c:	34000017 	ldw	r16,0(r6)
 1805920:	31fffd04 	addi	r7,r6,-12
 1805924:	81c0041e 	bne	r16,r7,1805938 <_malloc_r+0x1dc>
 1805928:	0000fb06 	br	1805d18 <_malloc_r+0x5bc>
 180592c:	1801030e 	bge	r3,zero,1805d3c <_malloc_r+0x5e0>
 1805930:	84000317 	ldw	r16,12(r16)
 1805934:	81c0f826 	beq	r16,r7,1805d18 <_malloc_r+0x5bc>
 1805938:	80800117 	ldw	r2,4(r16)
 180593c:	1284703a 	and	r2,r2,r10
 1805940:	1447c83a 	sub	r3,r2,r17
 1805944:	48fff90e 	bge	r9,r3,180592c <__alt_mem_mem_0+0xff7e592c>
 1805948:	80800317 	ldw	r2,12(r16)
 180594c:	81000217 	ldw	r4,8(r16)
 1805950:	89400054 	ori	r5,r17,1
 1805954:	81400115 	stw	r5,4(r16)
 1805958:	20800315 	stw	r2,12(r4)
 180595c:	11000215 	stw	r4,8(r2)
 1805960:	8463883a 	add	r17,r16,r17
 1805964:	9c400515 	stw	r17,20(r19)
 1805968:	9c400415 	stw	r17,16(r19)
 180596c:	18800054 	ori	r2,r3,1
 1805970:	88800115 	stw	r2,4(r17)
 1805974:	8a000315 	stw	r8,12(r17)
 1805978:	8a000215 	stw	r8,8(r17)
 180597c:	88e3883a 	add	r17,r17,r3
 1805980:	88c00015 	stw	r3,0(r17)
 1805984:	9009883a 	mov	r4,r18
 1805988:	180d56c0 	call	180d56c <__malloc_unlock>
 180598c:	80800204 	addi	r2,r16,8
 1805990:	00001b06 	br	1805a00 <_malloc_r+0x2a4>
 1805994:	04400404 	movi	r17,16
 1805998:	89402536 	bltu	r17,r5,1805a30 <_malloc_r+0x2d4>
 180599c:	180d50c0 	call	180d50c <__malloc_lock>
 18059a0:	00800184 	movi	r2,6
 18059a4:	01000084 	movi	r4,2
 18059a8:	04c06134 	movhi	r19,388
 18059ac:	1085883a 	add	r2,r2,r2
 18059b0:	9cce9204 	addi	r19,r19,14920
 18059b4:	1085883a 	add	r2,r2,r2
 18059b8:	9885883a 	add	r2,r19,r2
 18059bc:	14000117 	ldw	r16,4(r2)
 18059c0:	10fffe04 	addi	r3,r2,-8
 18059c4:	80c0d926 	beq	r16,r3,1805d2c <_malloc_r+0x5d0>
 18059c8:	80c00117 	ldw	r3,4(r16)
 18059cc:	81000317 	ldw	r4,12(r16)
 18059d0:	00bfff04 	movi	r2,-4
 18059d4:	1884703a 	and	r2,r3,r2
 18059d8:	81400217 	ldw	r5,8(r16)
 18059dc:	8085883a 	add	r2,r16,r2
 18059e0:	10c00117 	ldw	r3,4(r2)
 18059e4:	29000315 	stw	r4,12(r5)
 18059e8:	21400215 	stw	r5,8(r4)
 18059ec:	18c00054 	ori	r3,r3,1
 18059f0:	10c00115 	stw	r3,4(r2)
 18059f4:	9009883a 	mov	r4,r18
 18059f8:	180d56c0 	call	180d56c <__malloc_unlock>
 18059fc:	80800204 	addi	r2,r16,8
 1805a00:	dfc00a17 	ldw	ra,40(sp)
 1805a04:	df000917 	ldw	fp,36(sp)
 1805a08:	ddc00817 	ldw	r23,32(sp)
 1805a0c:	dd800717 	ldw	r22,28(sp)
 1805a10:	dd400617 	ldw	r21,24(sp)
 1805a14:	dd000517 	ldw	r20,20(sp)
 1805a18:	dcc00417 	ldw	r19,16(sp)
 1805a1c:	dc800317 	ldw	r18,12(sp)
 1805a20:	dc400217 	ldw	r17,8(sp)
 1805a24:	dc000117 	ldw	r16,4(sp)
 1805a28:	dec00b04 	addi	sp,sp,44
 1805a2c:	f800283a 	ret
 1805a30:	00800304 	movi	r2,12
 1805a34:	90800015 	stw	r2,0(r18)
 1805a38:	0005883a 	mov	r2,zero
 1805a3c:	003ff006 	br	1805a00 <__alt_mem_mem_0+0xff7e5a00>
 1805a40:	01002004 	movi	r4,128
 1805a44:	02001004 	movi	r8,64
 1805a48:	01c00fc4 	movi	r7,63
 1805a4c:	003f6106 	br	18057d4 <__alt_mem_mem_0+0xff7e57d4>
 1805a50:	4009883a 	mov	r4,r8
 1805a54:	003f7506 	br	180582c <__alt_mem_mem_0+0xff7e582c>
 1805a58:	81000317 	ldw	r4,12(r16)
 1805a5c:	003fde06 	br	18059d8 <__alt_mem_mem_0+0xff7e59d8>
 1805a60:	81c5883a 	add	r2,r16,r7
 1805a64:	11400117 	ldw	r5,4(r2)
 1805a68:	9009883a 	mov	r4,r18
 1805a6c:	29400054 	ori	r5,r5,1
 1805a70:	11400115 	stw	r5,4(r2)
 1805a74:	180d56c0 	call	180d56c <__malloc_unlock>
 1805a78:	80800204 	addi	r2,r16,8
 1805a7c:	003fe006 	br	1805a00 <__alt_mem_mem_0+0xff7e5a00>
 1805a80:	9c000217 	ldw	r16,8(r19)
 1805a84:	00bfff04 	movi	r2,-4
 1805a88:	85800117 	ldw	r22,4(r16)
 1805a8c:	b0ac703a 	and	r22,r22,r2
 1805a90:	b4400336 	bltu	r22,r17,1805aa0 <_malloc_r+0x344>
 1805a94:	b445c83a 	sub	r2,r22,r17
 1805a98:	00c003c4 	movi	r3,15
 1805a9c:	18805d16 	blt	r3,r2,1805c14 <_malloc_r+0x4b8>
 1805aa0:	05c06134 	movhi	r23,388
 1805aa4:	00806134 	movhi	r2,388
 1805aa8:	109cc004 	addi	r2,r2,29440
 1805aac:	bdd4f604 	addi	r23,r23,21464
 1805ab0:	15400017 	ldw	r21,0(r2)
 1805ab4:	b8c00017 	ldw	r3,0(r23)
 1805ab8:	00bfffc4 	movi	r2,-1
 1805abc:	858d883a 	add	r6,r16,r22
 1805ac0:	8d6b883a 	add	r21,r17,r21
 1805ac4:	1880ea26 	beq	r3,r2,1805e70 <_malloc_r+0x714>
 1805ac8:	ad4403c4 	addi	r21,r21,4111
 1805acc:	00bc0004 	movi	r2,-4096
 1805ad0:	a8aa703a 	and	r21,r21,r2
 1805ad4:	a80b883a 	mov	r5,r21
 1805ad8:	9009883a 	mov	r4,r18
 1805adc:	d9800015 	stw	r6,0(sp)
 1805ae0:	180732c0 	call	180732c <_sbrk_r>
 1805ae4:	1029883a 	mov	r20,r2
 1805ae8:	00bfffc4 	movi	r2,-1
 1805aec:	d9800017 	ldw	r6,0(sp)
 1805af0:	a080e826 	beq	r20,r2,1805e94 <_malloc_r+0x738>
 1805af4:	a180a636 	bltu	r20,r6,1805d90 <_malloc_r+0x634>
 1805af8:	07006134 	movhi	fp,388
 1805afc:	e71d1204 	addi	fp,fp,29768
 1805b00:	e0800017 	ldw	r2,0(fp)
 1805b04:	a887883a 	add	r3,r21,r2
 1805b08:	e0c00015 	stw	r3,0(fp)
 1805b0c:	3500e626 	beq	r6,r20,1805ea8 <_malloc_r+0x74c>
 1805b10:	b9000017 	ldw	r4,0(r23)
 1805b14:	00bfffc4 	movi	r2,-1
 1805b18:	2080ee26 	beq	r4,r2,1805ed4 <_malloc_r+0x778>
 1805b1c:	a185c83a 	sub	r2,r20,r6
 1805b20:	10c5883a 	add	r2,r2,r3
 1805b24:	e0800015 	stw	r2,0(fp)
 1805b28:	a0c001cc 	andi	r3,r20,7
 1805b2c:	1800bc26 	beq	r3,zero,1805e20 <_malloc_r+0x6c4>
 1805b30:	a0e9c83a 	sub	r20,r20,r3
 1805b34:	00840204 	movi	r2,4104
 1805b38:	a5000204 	addi	r20,r20,8
 1805b3c:	10c7c83a 	sub	r3,r2,r3
 1805b40:	a545883a 	add	r2,r20,r21
 1805b44:	1083ffcc 	andi	r2,r2,4095
 1805b48:	18abc83a 	sub	r21,r3,r2
 1805b4c:	a80b883a 	mov	r5,r21
 1805b50:	9009883a 	mov	r4,r18
 1805b54:	180732c0 	call	180732c <_sbrk_r>
 1805b58:	00ffffc4 	movi	r3,-1
 1805b5c:	10c0e126 	beq	r2,r3,1805ee4 <_malloc_r+0x788>
 1805b60:	1505c83a 	sub	r2,r2,r20
 1805b64:	1545883a 	add	r2,r2,r21
 1805b68:	10800054 	ori	r2,r2,1
 1805b6c:	e0c00017 	ldw	r3,0(fp)
 1805b70:	9d000215 	stw	r20,8(r19)
 1805b74:	a0800115 	stw	r2,4(r20)
 1805b78:	a8c7883a 	add	r3,r21,r3
 1805b7c:	e0c00015 	stw	r3,0(fp)
 1805b80:	84c00e26 	beq	r16,r19,1805bbc <_malloc_r+0x460>
 1805b84:	018003c4 	movi	r6,15
 1805b88:	3580a72e 	bgeu	r6,r22,1805e28 <_malloc_r+0x6cc>
 1805b8c:	81400117 	ldw	r5,4(r16)
 1805b90:	013ffe04 	movi	r4,-8
 1805b94:	b0bffd04 	addi	r2,r22,-12
 1805b98:	1104703a 	and	r2,r2,r4
 1805b9c:	2900004c 	andi	r4,r5,1
 1805ba0:	2088b03a 	or	r4,r4,r2
 1805ba4:	81000115 	stw	r4,4(r16)
 1805ba8:	01400144 	movi	r5,5
 1805bac:	8089883a 	add	r4,r16,r2
 1805bb0:	21400115 	stw	r5,4(r4)
 1805bb4:	21400215 	stw	r5,8(r4)
 1805bb8:	3080cd36 	bltu	r6,r2,1805ef0 <_malloc_r+0x794>
 1805bbc:	00806134 	movhi	r2,388
 1805bc0:	109cbf04 	addi	r2,r2,29436
 1805bc4:	11000017 	ldw	r4,0(r2)
 1805bc8:	20c0012e 	bgeu	r4,r3,1805bd0 <_malloc_r+0x474>
 1805bcc:	10c00015 	stw	r3,0(r2)
 1805bd0:	00806134 	movhi	r2,388
 1805bd4:	109cbe04 	addi	r2,r2,29432
 1805bd8:	11000017 	ldw	r4,0(r2)
 1805bdc:	9c000217 	ldw	r16,8(r19)
 1805be0:	20c0012e 	bgeu	r4,r3,1805be8 <_malloc_r+0x48c>
 1805be4:	10c00015 	stw	r3,0(r2)
 1805be8:	80c00117 	ldw	r3,4(r16)
 1805bec:	00bfff04 	movi	r2,-4
 1805bf0:	1886703a 	and	r3,r3,r2
 1805bf4:	1c45c83a 	sub	r2,r3,r17
 1805bf8:	1c400236 	bltu	r3,r17,1805c04 <_malloc_r+0x4a8>
 1805bfc:	00c003c4 	movi	r3,15
 1805c00:	18800416 	blt	r3,r2,1805c14 <_malloc_r+0x4b8>
 1805c04:	9009883a 	mov	r4,r18
 1805c08:	180d56c0 	call	180d56c <__malloc_unlock>
 1805c0c:	0005883a 	mov	r2,zero
 1805c10:	003f7b06 	br	1805a00 <__alt_mem_mem_0+0xff7e5a00>
 1805c14:	88c00054 	ori	r3,r17,1
 1805c18:	80c00115 	stw	r3,4(r16)
 1805c1c:	8463883a 	add	r17,r16,r17
 1805c20:	10800054 	ori	r2,r2,1
 1805c24:	9c400215 	stw	r17,8(r19)
 1805c28:	88800115 	stw	r2,4(r17)
 1805c2c:	9009883a 	mov	r4,r18
 1805c30:	180d56c0 	call	180d56c <__malloc_unlock>
 1805c34:	80800204 	addi	r2,r16,8
 1805c38:	003f7106 	br	1805a00 <__alt_mem_mem_0+0xff7e5a00>
 1805c3c:	00c00504 	movi	r3,20
 1805c40:	18804a2e 	bgeu	r3,r2,1805d6c <_malloc_r+0x610>
 1805c44:	00c01504 	movi	r3,84
 1805c48:	18806e36 	bltu	r3,r2,1805e04 <_malloc_r+0x6a8>
 1805c4c:	8804d33a 	srli	r2,r17,12
 1805c50:	12001bc4 	addi	r8,r2,111
 1805c54:	11c01b84 	addi	r7,r2,110
 1805c58:	4209883a 	add	r4,r8,r8
 1805c5c:	003edd06 	br	18057d4 <__alt_mem_mem_0+0xff7e57d4>
 1805c60:	3804d27a 	srli	r2,r7,9
 1805c64:	00c00104 	movi	r3,4
 1805c68:	1880442e 	bgeu	r3,r2,1805d7c <_malloc_r+0x620>
 1805c6c:	00c00504 	movi	r3,20
 1805c70:	18808136 	bltu	r3,r2,1805e78 <_malloc_r+0x71c>
 1805c74:	11401704 	addi	r5,r2,92
 1805c78:	10c016c4 	addi	r3,r2,91
 1805c7c:	294b883a 	add	r5,r5,r5
 1805c80:	294b883a 	add	r5,r5,r5
 1805c84:	294b883a 	add	r5,r5,r5
 1805c88:	994b883a 	add	r5,r19,r5
 1805c8c:	28800017 	ldw	r2,0(r5)
 1805c90:	01806134 	movhi	r6,388
 1805c94:	297ffe04 	addi	r5,r5,-8
 1805c98:	318e9204 	addi	r6,r6,14920
 1805c9c:	28806526 	beq	r5,r2,1805e34 <_malloc_r+0x6d8>
 1805ca0:	01bfff04 	movi	r6,-4
 1805ca4:	10c00117 	ldw	r3,4(r2)
 1805ca8:	1986703a 	and	r3,r3,r6
 1805cac:	38c0022e 	bgeu	r7,r3,1805cb8 <_malloc_r+0x55c>
 1805cb0:	10800217 	ldw	r2,8(r2)
 1805cb4:	28bffb1e 	bne	r5,r2,1805ca4 <__alt_mem_mem_0+0xff7e5ca4>
 1805cb8:	11400317 	ldw	r5,12(r2)
 1805cbc:	98c00117 	ldw	r3,4(r19)
 1805cc0:	81400315 	stw	r5,12(r16)
 1805cc4:	80800215 	stw	r2,8(r16)
 1805cc8:	2c000215 	stw	r16,8(r5)
 1805ccc:	14000315 	stw	r16,12(r2)
 1805cd0:	003ef806 	br	18058b4 <__alt_mem_mem_0+0xff7e58b4>
 1805cd4:	88c00054 	ori	r3,r17,1
 1805cd8:	80c00115 	stw	r3,4(r16)
 1805cdc:	8463883a 	add	r17,r16,r17
 1805ce0:	34400515 	stw	r17,20(r6)
 1805ce4:	34400415 	stw	r17,16(r6)
 1805ce8:	10c00054 	ori	r3,r2,1
 1805cec:	8a000315 	stw	r8,12(r17)
 1805cf0:	8a000215 	stw	r8,8(r17)
 1805cf4:	88c00115 	stw	r3,4(r17)
 1805cf8:	88a3883a 	add	r17,r17,r2
 1805cfc:	88800015 	stw	r2,0(r17)
 1805d00:	9009883a 	mov	r4,r18
 1805d04:	180d56c0 	call	180d56c <__malloc_unlock>
 1805d08:	80800204 	addi	r2,r16,8
 1805d0c:	003f3c06 	br	1805a00 <__alt_mem_mem_0+0xff7e5a00>
 1805d10:	30c00117 	ldw	r3,4(r6)
 1805d14:	003ee706 	br	18058b4 <__alt_mem_mem_0+0xff7e58b4>
 1805d18:	5ac00044 	addi	r11,r11,1
 1805d1c:	588000cc 	andi	r2,r11,3
 1805d20:	31800204 	addi	r6,r6,8
 1805d24:	103efd1e 	bne	r2,zero,180591c <__alt_mem_mem_0+0xff7e591c>
 1805d28:	00002406 	br	1805dbc <_malloc_r+0x660>
 1805d2c:	14000317 	ldw	r16,12(r2)
 1805d30:	143f251e 	bne	r2,r16,18059c8 <__alt_mem_mem_0+0xff7e59c8>
 1805d34:	21000084 	addi	r4,r4,2
 1805d38:	003ebc06 	br	180582c <__alt_mem_mem_0+0xff7e582c>
 1805d3c:	8085883a 	add	r2,r16,r2
 1805d40:	10c00117 	ldw	r3,4(r2)
 1805d44:	81000317 	ldw	r4,12(r16)
 1805d48:	81400217 	ldw	r5,8(r16)
 1805d4c:	18c00054 	ori	r3,r3,1
 1805d50:	10c00115 	stw	r3,4(r2)
 1805d54:	29000315 	stw	r4,12(r5)
 1805d58:	21400215 	stw	r5,8(r4)
 1805d5c:	9009883a 	mov	r4,r18
 1805d60:	180d56c0 	call	180d56c <__malloc_unlock>
 1805d64:	80800204 	addi	r2,r16,8
 1805d68:	003f2506 	br	1805a00 <__alt_mem_mem_0+0xff7e5a00>
 1805d6c:	12001704 	addi	r8,r2,92
 1805d70:	11c016c4 	addi	r7,r2,91
 1805d74:	4209883a 	add	r4,r8,r8
 1805d78:	003e9606 	br	18057d4 <__alt_mem_mem_0+0xff7e57d4>
 1805d7c:	3804d1ba 	srli	r2,r7,6
 1805d80:	11400e44 	addi	r5,r2,57
 1805d84:	10c00e04 	addi	r3,r2,56
 1805d88:	294b883a 	add	r5,r5,r5
 1805d8c:	003fbc06 	br	1805c80 <__alt_mem_mem_0+0xff7e5c80>
 1805d90:	84ff5926 	beq	r16,r19,1805af8 <__alt_mem_mem_0+0xff7e5af8>
 1805d94:	00806134 	movhi	r2,388
 1805d98:	108e9204 	addi	r2,r2,14920
 1805d9c:	14000217 	ldw	r16,8(r2)
 1805da0:	00bfff04 	movi	r2,-4
 1805da4:	80c00117 	ldw	r3,4(r16)
 1805da8:	1886703a 	and	r3,r3,r2
 1805dac:	003f9106 	br	1805bf4 <__alt_mem_mem_0+0xff7e5bf4>
 1805db0:	60800217 	ldw	r2,8(r12)
 1805db4:	213fffc4 	addi	r4,r4,-1
 1805db8:	1300651e 	bne	r2,r12,1805f50 <_malloc_r+0x7f4>
 1805dbc:	208000cc 	andi	r2,r4,3
 1805dc0:	633ffe04 	addi	r12,r12,-8
 1805dc4:	103ffa1e 	bne	r2,zero,1805db0 <__alt_mem_mem_0+0xff7e5db0>
 1805dc8:	98800117 	ldw	r2,4(r19)
 1805dcc:	0146303a 	nor	r3,zero,r5
 1805dd0:	1884703a 	and	r2,r3,r2
 1805dd4:	98800115 	stw	r2,4(r19)
 1805dd8:	294b883a 	add	r5,r5,r5
 1805ddc:	117f2836 	bltu	r2,r5,1805a80 <__alt_mem_mem_0+0xff7e5a80>
 1805de0:	283f2726 	beq	r5,zero,1805a80 <__alt_mem_mem_0+0xff7e5a80>
 1805de4:	2886703a 	and	r3,r5,r2
 1805de8:	5809883a 	mov	r4,r11
 1805dec:	183ec31e 	bne	r3,zero,18058fc <__alt_mem_mem_0+0xff7e58fc>
 1805df0:	294b883a 	add	r5,r5,r5
 1805df4:	2886703a 	and	r3,r5,r2
 1805df8:	21000104 	addi	r4,r4,4
 1805dfc:	183ffc26 	beq	r3,zero,1805df0 <__alt_mem_mem_0+0xff7e5df0>
 1805e00:	003ebe06 	br	18058fc <__alt_mem_mem_0+0xff7e58fc>
 1805e04:	00c05504 	movi	r3,340
 1805e08:	18801236 	bltu	r3,r2,1805e54 <_malloc_r+0x6f8>
 1805e0c:	8804d3fa 	srli	r2,r17,15
 1805e10:	12001e04 	addi	r8,r2,120
 1805e14:	11c01dc4 	addi	r7,r2,119
 1805e18:	4209883a 	add	r4,r8,r8
 1805e1c:	003e6d06 	br	18057d4 <__alt_mem_mem_0+0xff7e57d4>
 1805e20:	00c40004 	movi	r3,4096
 1805e24:	003f4606 	br	1805b40 <__alt_mem_mem_0+0xff7e5b40>
 1805e28:	00800044 	movi	r2,1
 1805e2c:	a0800115 	stw	r2,4(r20)
 1805e30:	003f7406 	br	1805c04 <__alt_mem_mem_0+0xff7e5c04>
 1805e34:	1805d0ba 	srai	r2,r3,2
 1805e38:	01c00044 	movi	r7,1
 1805e3c:	30c00117 	ldw	r3,4(r6)
 1805e40:	388e983a 	sll	r7,r7,r2
 1805e44:	2805883a 	mov	r2,r5
 1805e48:	38c6b03a 	or	r3,r7,r3
 1805e4c:	30c00115 	stw	r3,4(r6)
 1805e50:	003f9b06 	br	1805cc0 <__alt_mem_mem_0+0xff7e5cc0>
 1805e54:	00c15504 	movi	r3,1364
 1805e58:	18801a36 	bltu	r3,r2,1805ec4 <_malloc_r+0x768>
 1805e5c:	8804d4ba 	srli	r2,r17,18
 1805e60:	12001f44 	addi	r8,r2,125
 1805e64:	11c01f04 	addi	r7,r2,124
 1805e68:	4209883a 	add	r4,r8,r8
 1805e6c:	003e5906 	br	18057d4 <__alt_mem_mem_0+0xff7e57d4>
 1805e70:	ad400404 	addi	r21,r21,16
 1805e74:	003f1706 	br	1805ad4 <__alt_mem_mem_0+0xff7e5ad4>
 1805e78:	00c01504 	movi	r3,84
 1805e7c:	18802336 	bltu	r3,r2,1805f0c <_malloc_r+0x7b0>
 1805e80:	3804d33a 	srli	r2,r7,12
 1805e84:	11401bc4 	addi	r5,r2,111
 1805e88:	10c01b84 	addi	r3,r2,110
 1805e8c:	294b883a 	add	r5,r5,r5
 1805e90:	003f7b06 	br	1805c80 <__alt_mem_mem_0+0xff7e5c80>
 1805e94:	9c000217 	ldw	r16,8(r19)
 1805e98:	00bfff04 	movi	r2,-4
 1805e9c:	80c00117 	ldw	r3,4(r16)
 1805ea0:	1886703a 	and	r3,r3,r2
 1805ea4:	003f5306 	br	1805bf4 <__alt_mem_mem_0+0xff7e5bf4>
 1805ea8:	3083ffcc 	andi	r2,r6,4095
 1805eac:	103f181e 	bne	r2,zero,1805b10 <__alt_mem_mem_0+0xff7e5b10>
 1805eb0:	99000217 	ldw	r4,8(r19)
 1805eb4:	b545883a 	add	r2,r22,r21
 1805eb8:	10800054 	ori	r2,r2,1
 1805ebc:	20800115 	stw	r2,4(r4)
 1805ec0:	003f3e06 	br	1805bbc <__alt_mem_mem_0+0xff7e5bbc>
 1805ec4:	01003f84 	movi	r4,254
 1805ec8:	02001fc4 	movi	r8,127
 1805ecc:	01c01f84 	movi	r7,126
 1805ed0:	003e4006 	br	18057d4 <__alt_mem_mem_0+0xff7e57d4>
 1805ed4:	00806134 	movhi	r2,388
 1805ed8:	1094f604 	addi	r2,r2,21464
 1805edc:	15000015 	stw	r20,0(r2)
 1805ee0:	003f1106 	br	1805b28 <__alt_mem_mem_0+0xff7e5b28>
 1805ee4:	00800044 	movi	r2,1
 1805ee8:	002b883a 	mov	r21,zero
 1805eec:	003f1f06 	br	1805b6c <__alt_mem_mem_0+0xff7e5b6c>
 1805ef0:	81400204 	addi	r5,r16,8
 1805ef4:	9009883a 	mov	r4,r18
 1805ef8:	180502c0 	call	180502c <_free_r>
 1805efc:	00806134 	movhi	r2,388
 1805f00:	109d1204 	addi	r2,r2,29768
 1805f04:	10c00017 	ldw	r3,0(r2)
 1805f08:	003f2c06 	br	1805bbc <__alt_mem_mem_0+0xff7e5bbc>
 1805f0c:	00c05504 	movi	r3,340
 1805f10:	18800536 	bltu	r3,r2,1805f28 <_malloc_r+0x7cc>
 1805f14:	3804d3fa 	srli	r2,r7,15
 1805f18:	11401e04 	addi	r5,r2,120
 1805f1c:	10c01dc4 	addi	r3,r2,119
 1805f20:	294b883a 	add	r5,r5,r5
 1805f24:	003f5606 	br	1805c80 <__alt_mem_mem_0+0xff7e5c80>
 1805f28:	00c15504 	movi	r3,1364
 1805f2c:	18800536 	bltu	r3,r2,1805f44 <_malloc_r+0x7e8>
 1805f30:	3804d4ba 	srli	r2,r7,18
 1805f34:	11401f44 	addi	r5,r2,125
 1805f38:	10c01f04 	addi	r3,r2,124
 1805f3c:	294b883a 	add	r5,r5,r5
 1805f40:	003f4f06 	br	1805c80 <__alt_mem_mem_0+0xff7e5c80>
 1805f44:	01403f84 	movi	r5,254
 1805f48:	00c01f84 	movi	r3,126
 1805f4c:	003f4c06 	br	1805c80 <__alt_mem_mem_0+0xff7e5c80>
 1805f50:	98800117 	ldw	r2,4(r19)
 1805f54:	003fa006 	br	1805dd8 <__alt_mem_mem_0+0xff7e5dd8>
 1805f58:	8808d0fa 	srli	r4,r17,3
 1805f5c:	20800044 	addi	r2,r4,1
 1805f60:	1085883a 	add	r2,r2,r2
 1805f64:	003e9006 	br	18059a8 <__alt_mem_mem_0+0xff7e59a8>

01805f68 <memchr>:
 1805f68:	208000cc 	andi	r2,r4,3
 1805f6c:	280f883a 	mov	r7,r5
 1805f70:	10003426 	beq	r2,zero,1806044 <memchr+0xdc>
 1805f74:	30bfffc4 	addi	r2,r6,-1
 1805f78:	30001a26 	beq	r6,zero,1805fe4 <memchr+0x7c>
 1805f7c:	20c00003 	ldbu	r3,0(r4)
 1805f80:	29803fcc 	andi	r6,r5,255
 1805f84:	30c0051e 	bne	r6,r3,1805f9c <memchr+0x34>
 1805f88:	00001806 	br	1805fec <memchr+0x84>
 1805f8c:	10001526 	beq	r2,zero,1805fe4 <memchr+0x7c>
 1805f90:	20c00003 	ldbu	r3,0(r4)
 1805f94:	10bfffc4 	addi	r2,r2,-1
 1805f98:	30c01426 	beq	r6,r3,1805fec <memchr+0x84>
 1805f9c:	21000044 	addi	r4,r4,1
 1805fa0:	20c000cc 	andi	r3,r4,3
 1805fa4:	183ff91e 	bne	r3,zero,1805f8c <__alt_mem_mem_0+0xff7e5f8c>
 1805fa8:	020000c4 	movi	r8,3
 1805fac:	40801136 	bltu	r8,r2,1805ff4 <memchr+0x8c>
 1805fb0:	10000c26 	beq	r2,zero,1805fe4 <memchr+0x7c>
 1805fb4:	20c00003 	ldbu	r3,0(r4)
 1805fb8:	29403fcc 	andi	r5,r5,255
 1805fbc:	28c00b26 	beq	r5,r3,1805fec <memchr+0x84>
 1805fc0:	20c00044 	addi	r3,r4,1
 1805fc4:	39803fcc 	andi	r6,r7,255
 1805fc8:	2089883a 	add	r4,r4,r2
 1805fcc:	00000306 	br	1805fdc <memchr+0x74>
 1805fd0:	18c00044 	addi	r3,r3,1
 1805fd4:	197fffc3 	ldbu	r5,-1(r3)
 1805fd8:	31400526 	beq	r6,r5,1805ff0 <memchr+0x88>
 1805fdc:	1805883a 	mov	r2,r3
 1805fe0:	20fffb1e 	bne	r4,r3,1805fd0 <__alt_mem_mem_0+0xff7e5fd0>
 1805fe4:	0005883a 	mov	r2,zero
 1805fe8:	f800283a 	ret
 1805fec:	2005883a 	mov	r2,r4
 1805ff0:	f800283a 	ret
 1805ff4:	28c03fcc 	andi	r3,r5,255
 1805ff8:	1812923a 	slli	r9,r3,8
 1805ffc:	02ffbff4 	movhi	r11,65279
 1806000:	02a02074 	movhi	r10,32897
 1806004:	48d2b03a 	or	r9,r9,r3
 1806008:	4806943a 	slli	r3,r9,16
 180600c:	5affbfc4 	addi	r11,r11,-257
 1806010:	52a02004 	addi	r10,r10,-32640
 1806014:	48d2b03a 	or	r9,r9,r3
 1806018:	20c00017 	ldw	r3,0(r4)
 180601c:	48c6f03a 	xor	r3,r9,r3
 1806020:	1acd883a 	add	r6,r3,r11
 1806024:	00c6303a 	nor	r3,zero,r3
 1806028:	30c6703a 	and	r3,r6,r3
 180602c:	1a86703a 	and	r3,r3,r10
 1806030:	183fe01e 	bne	r3,zero,1805fb4 <__alt_mem_mem_0+0xff7e5fb4>
 1806034:	10bfff04 	addi	r2,r2,-4
 1806038:	21000104 	addi	r4,r4,4
 180603c:	40bff636 	bltu	r8,r2,1806018 <__alt_mem_mem_0+0xff7e6018>
 1806040:	003fdb06 	br	1805fb0 <__alt_mem_mem_0+0xff7e5fb0>
 1806044:	3005883a 	mov	r2,r6
 1806048:	003fd706 	br	1805fa8 <__alt_mem_mem_0+0xff7e5fa8>

0180604c <memcpy>:
 180604c:	defffd04 	addi	sp,sp,-12
 1806050:	dfc00215 	stw	ra,8(sp)
 1806054:	dc400115 	stw	r17,4(sp)
 1806058:	dc000015 	stw	r16,0(sp)
 180605c:	00c003c4 	movi	r3,15
 1806060:	2005883a 	mov	r2,r4
 1806064:	1980452e 	bgeu	r3,r6,180617c <memcpy+0x130>
 1806068:	2906b03a 	or	r3,r5,r4
 180606c:	18c000cc 	andi	r3,r3,3
 1806070:	1800441e 	bne	r3,zero,1806184 <memcpy+0x138>
 1806074:	347ffc04 	addi	r17,r6,-16
 1806078:	8822d13a 	srli	r17,r17,4
 180607c:	28c00104 	addi	r3,r5,4
 1806080:	23400104 	addi	r13,r4,4
 1806084:	8820913a 	slli	r16,r17,4
 1806088:	2b000204 	addi	r12,r5,8
 180608c:	22c00204 	addi	r11,r4,8
 1806090:	84000504 	addi	r16,r16,20
 1806094:	2a800304 	addi	r10,r5,12
 1806098:	22400304 	addi	r9,r4,12
 180609c:	2c21883a 	add	r16,r5,r16
 18060a0:	2811883a 	mov	r8,r5
 18060a4:	200f883a 	mov	r7,r4
 18060a8:	41000017 	ldw	r4,0(r8)
 18060ac:	1fc00017 	ldw	ra,0(r3)
 18060b0:	63c00017 	ldw	r15,0(r12)
 18060b4:	39000015 	stw	r4,0(r7)
 18060b8:	53800017 	ldw	r14,0(r10)
 18060bc:	6fc00015 	stw	ra,0(r13)
 18060c0:	5bc00015 	stw	r15,0(r11)
 18060c4:	4b800015 	stw	r14,0(r9)
 18060c8:	18c00404 	addi	r3,r3,16
 18060cc:	39c00404 	addi	r7,r7,16
 18060d0:	42000404 	addi	r8,r8,16
 18060d4:	6b400404 	addi	r13,r13,16
 18060d8:	63000404 	addi	r12,r12,16
 18060dc:	5ac00404 	addi	r11,r11,16
 18060e0:	52800404 	addi	r10,r10,16
 18060e4:	4a400404 	addi	r9,r9,16
 18060e8:	1c3fef1e 	bne	r3,r16,18060a8 <__alt_mem_mem_0+0xff7e60a8>
 18060ec:	89c00044 	addi	r7,r17,1
 18060f0:	380e913a 	slli	r7,r7,4
 18060f4:	310003cc 	andi	r4,r6,15
 18060f8:	02c000c4 	movi	r11,3
 18060fc:	11c7883a 	add	r3,r2,r7
 1806100:	29cb883a 	add	r5,r5,r7
 1806104:	5900212e 	bgeu	r11,r4,180618c <memcpy+0x140>
 1806108:	1813883a 	mov	r9,r3
 180610c:	2811883a 	mov	r8,r5
 1806110:	200f883a 	mov	r7,r4
 1806114:	42800017 	ldw	r10,0(r8)
 1806118:	4a400104 	addi	r9,r9,4
 180611c:	39ffff04 	addi	r7,r7,-4
 1806120:	4abfff15 	stw	r10,-4(r9)
 1806124:	42000104 	addi	r8,r8,4
 1806128:	59fffa36 	bltu	r11,r7,1806114 <__alt_mem_mem_0+0xff7e6114>
 180612c:	213fff04 	addi	r4,r4,-4
 1806130:	2008d0ba 	srli	r4,r4,2
 1806134:	318000cc 	andi	r6,r6,3
 1806138:	21000044 	addi	r4,r4,1
 180613c:	2109883a 	add	r4,r4,r4
 1806140:	2109883a 	add	r4,r4,r4
 1806144:	1907883a 	add	r3,r3,r4
 1806148:	290b883a 	add	r5,r5,r4
 180614c:	30000626 	beq	r6,zero,1806168 <memcpy+0x11c>
 1806150:	198d883a 	add	r6,r3,r6
 1806154:	29c00003 	ldbu	r7,0(r5)
 1806158:	18c00044 	addi	r3,r3,1
 180615c:	29400044 	addi	r5,r5,1
 1806160:	19ffffc5 	stb	r7,-1(r3)
 1806164:	19bffb1e 	bne	r3,r6,1806154 <__alt_mem_mem_0+0xff7e6154>
 1806168:	dfc00217 	ldw	ra,8(sp)
 180616c:	dc400117 	ldw	r17,4(sp)
 1806170:	dc000017 	ldw	r16,0(sp)
 1806174:	dec00304 	addi	sp,sp,12
 1806178:	f800283a 	ret
 180617c:	2007883a 	mov	r3,r4
 1806180:	003ff206 	br	180614c <__alt_mem_mem_0+0xff7e614c>
 1806184:	2007883a 	mov	r3,r4
 1806188:	003ff106 	br	1806150 <__alt_mem_mem_0+0xff7e6150>
 180618c:	200d883a 	mov	r6,r4
 1806190:	003fee06 	br	180614c <__alt_mem_mem_0+0xff7e614c>

01806194 <memset>:
 1806194:	20c000cc 	andi	r3,r4,3
 1806198:	2005883a 	mov	r2,r4
 180619c:	18004426 	beq	r3,zero,18062b0 <memset+0x11c>
 18061a0:	31ffffc4 	addi	r7,r6,-1
 18061a4:	30004026 	beq	r6,zero,18062a8 <memset+0x114>
 18061a8:	2813883a 	mov	r9,r5
 18061ac:	200d883a 	mov	r6,r4
 18061b0:	2007883a 	mov	r3,r4
 18061b4:	00000406 	br	18061c8 <memset+0x34>
 18061b8:	3a3fffc4 	addi	r8,r7,-1
 18061bc:	31800044 	addi	r6,r6,1
 18061c0:	38003926 	beq	r7,zero,18062a8 <memset+0x114>
 18061c4:	400f883a 	mov	r7,r8
 18061c8:	18c00044 	addi	r3,r3,1
 18061cc:	32400005 	stb	r9,0(r6)
 18061d0:	1a0000cc 	andi	r8,r3,3
 18061d4:	403ff81e 	bne	r8,zero,18061b8 <__alt_mem_mem_0+0xff7e61b8>
 18061d8:	010000c4 	movi	r4,3
 18061dc:	21c02d2e 	bgeu	r4,r7,1806294 <memset+0x100>
 18061e0:	29003fcc 	andi	r4,r5,255
 18061e4:	200c923a 	slli	r6,r4,8
 18061e8:	3108b03a 	or	r4,r6,r4
 18061ec:	200c943a 	slli	r6,r4,16
 18061f0:	218cb03a 	or	r6,r4,r6
 18061f4:	010003c4 	movi	r4,15
 18061f8:	21c0182e 	bgeu	r4,r7,180625c <memset+0xc8>
 18061fc:	3b3ffc04 	addi	r12,r7,-16
 1806200:	6018d13a 	srli	r12,r12,4
 1806204:	1a000104 	addi	r8,r3,4
 1806208:	1ac00204 	addi	r11,r3,8
 180620c:	6008913a 	slli	r4,r12,4
 1806210:	1a800304 	addi	r10,r3,12
 1806214:	1813883a 	mov	r9,r3
 1806218:	21000504 	addi	r4,r4,20
 180621c:	1909883a 	add	r4,r3,r4
 1806220:	49800015 	stw	r6,0(r9)
 1806224:	41800015 	stw	r6,0(r8)
 1806228:	59800015 	stw	r6,0(r11)
 180622c:	51800015 	stw	r6,0(r10)
 1806230:	42000404 	addi	r8,r8,16
 1806234:	4a400404 	addi	r9,r9,16
 1806238:	5ac00404 	addi	r11,r11,16
 180623c:	52800404 	addi	r10,r10,16
 1806240:	413ff71e 	bne	r8,r4,1806220 <__alt_mem_mem_0+0xff7e6220>
 1806244:	63000044 	addi	r12,r12,1
 1806248:	6018913a 	slli	r12,r12,4
 180624c:	39c003cc 	andi	r7,r7,15
 1806250:	010000c4 	movi	r4,3
 1806254:	1b07883a 	add	r3,r3,r12
 1806258:	21c00e2e 	bgeu	r4,r7,1806294 <memset+0x100>
 180625c:	1813883a 	mov	r9,r3
 1806260:	3811883a 	mov	r8,r7
 1806264:	010000c4 	movi	r4,3
 1806268:	49800015 	stw	r6,0(r9)
 180626c:	423fff04 	addi	r8,r8,-4
 1806270:	4a400104 	addi	r9,r9,4
 1806274:	223ffc36 	bltu	r4,r8,1806268 <__alt_mem_mem_0+0xff7e6268>
 1806278:	393fff04 	addi	r4,r7,-4
 180627c:	2008d0ba 	srli	r4,r4,2
 1806280:	39c000cc 	andi	r7,r7,3
 1806284:	21000044 	addi	r4,r4,1
 1806288:	2109883a 	add	r4,r4,r4
 180628c:	2109883a 	add	r4,r4,r4
 1806290:	1907883a 	add	r3,r3,r4
 1806294:	38000526 	beq	r7,zero,18062ac <memset+0x118>
 1806298:	19cf883a 	add	r7,r3,r7
 180629c:	19400005 	stb	r5,0(r3)
 18062a0:	18c00044 	addi	r3,r3,1
 18062a4:	38fffd1e 	bne	r7,r3,180629c <__alt_mem_mem_0+0xff7e629c>
 18062a8:	f800283a 	ret
 18062ac:	f800283a 	ret
 18062b0:	2007883a 	mov	r3,r4
 18062b4:	300f883a 	mov	r7,r6
 18062b8:	003fc706 	br	18061d8 <__alt_mem_mem_0+0xff7e61d8>

018062bc <_Balloc>:
 18062bc:	20801317 	ldw	r2,76(r4)
 18062c0:	defffc04 	addi	sp,sp,-16
 18062c4:	dc400115 	stw	r17,4(sp)
 18062c8:	dc000015 	stw	r16,0(sp)
 18062cc:	dfc00315 	stw	ra,12(sp)
 18062d0:	dc800215 	stw	r18,8(sp)
 18062d4:	2023883a 	mov	r17,r4
 18062d8:	2821883a 	mov	r16,r5
 18062dc:	10000f26 	beq	r2,zero,180631c <_Balloc+0x60>
 18062e0:	8407883a 	add	r3,r16,r16
 18062e4:	18c7883a 	add	r3,r3,r3
 18062e8:	10c7883a 	add	r3,r2,r3
 18062ec:	18800017 	ldw	r2,0(r3)
 18062f0:	10001126 	beq	r2,zero,1806338 <_Balloc+0x7c>
 18062f4:	11000017 	ldw	r4,0(r2)
 18062f8:	19000015 	stw	r4,0(r3)
 18062fc:	10000415 	stw	zero,16(r2)
 1806300:	10000315 	stw	zero,12(r2)
 1806304:	dfc00317 	ldw	ra,12(sp)
 1806308:	dc800217 	ldw	r18,8(sp)
 180630c:	dc400117 	ldw	r17,4(sp)
 1806310:	dc000017 	ldw	r16,0(sp)
 1806314:	dec00404 	addi	sp,sp,16
 1806318:	f800283a 	ret
 180631c:	01800844 	movi	r6,33
 1806320:	01400104 	movi	r5,4
 1806324:	1808d2c0 	call	1808d2c <_calloc_r>
 1806328:	88801315 	stw	r2,76(r17)
 180632c:	103fec1e 	bne	r2,zero,18062e0 <__alt_mem_mem_0+0xff7e62e0>
 1806330:	0005883a 	mov	r2,zero
 1806334:	003ff306 	br	1806304 <__alt_mem_mem_0+0xff7e6304>
 1806338:	01400044 	movi	r5,1
 180633c:	2c24983a 	sll	r18,r5,r16
 1806340:	8809883a 	mov	r4,r17
 1806344:	91800144 	addi	r6,r18,5
 1806348:	318d883a 	add	r6,r6,r6
 180634c:	318d883a 	add	r6,r6,r6
 1806350:	1808d2c0 	call	1808d2c <_calloc_r>
 1806354:	103ff626 	beq	r2,zero,1806330 <__alt_mem_mem_0+0xff7e6330>
 1806358:	14000115 	stw	r16,4(r2)
 180635c:	14800215 	stw	r18,8(r2)
 1806360:	003fe606 	br	18062fc <__alt_mem_mem_0+0xff7e62fc>

01806364 <_Bfree>:
 1806364:	28000826 	beq	r5,zero,1806388 <_Bfree+0x24>
 1806368:	28c00117 	ldw	r3,4(r5)
 180636c:	20801317 	ldw	r2,76(r4)
 1806370:	18c7883a 	add	r3,r3,r3
 1806374:	18c7883a 	add	r3,r3,r3
 1806378:	10c5883a 	add	r2,r2,r3
 180637c:	10c00017 	ldw	r3,0(r2)
 1806380:	28c00015 	stw	r3,0(r5)
 1806384:	11400015 	stw	r5,0(r2)
 1806388:	f800283a 	ret

0180638c <__multadd>:
 180638c:	defffa04 	addi	sp,sp,-24
 1806390:	dc800315 	stw	r18,12(sp)
 1806394:	dc400215 	stw	r17,8(sp)
 1806398:	dc000115 	stw	r16,4(sp)
 180639c:	2823883a 	mov	r17,r5
 18063a0:	2c000417 	ldw	r16,16(r5)
 18063a4:	dfc00515 	stw	ra,20(sp)
 18063a8:	dcc00415 	stw	r19,16(sp)
 18063ac:	2025883a 	mov	r18,r4
 18063b0:	29400504 	addi	r5,r5,20
 18063b4:	0011883a 	mov	r8,zero
 18063b8:	28c00017 	ldw	r3,0(r5)
 18063bc:	29400104 	addi	r5,r5,4
 18063c0:	42000044 	addi	r8,r8,1
 18063c4:	18bfffcc 	andi	r2,r3,65535
 18063c8:	1185383a 	mul	r2,r2,r6
 18063cc:	1806d43a 	srli	r3,r3,16
 18063d0:	11cf883a 	add	r7,r2,r7
 18063d4:	3808d43a 	srli	r4,r7,16
 18063d8:	1987383a 	mul	r3,r3,r6
 18063dc:	38bfffcc 	andi	r2,r7,65535
 18063e0:	1907883a 	add	r3,r3,r4
 18063e4:	1808943a 	slli	r4,r3,16
 18063e8:	180ed43a 	srli	r7,r3,16
 18063ec:	2085883a 	add	r2,r4,r2
 18063f0:	28bfff15 	stw	r2,-4(r5)
 18063f4:	443ff016 	blt	r8,r16,18063b8 <__alt_mem_mem_0+0xff7e63b8>
 18063f8:	38000926 	beq	r7,zero,1806420 <__multadd+0x94>
 18063fc:	88800217 	ldw	r2,8(r17)
 1806400:	80800f0e 	bge	r16,r2,1806440 <__multadd+0xb4>
 1806404:	80800144 	addi	r2,r16,5
 1806408:	1085883a 	add	r2,r2,r2
 180640c:	1085883a 	add	r2,r2,r2
 1806410:	8885883a 	add	r2,r17,r2
 1806414:	11c00015 	stw	r7,0(r2)
 1806418:	84000044 	addi	r16,r16,1
 180641c:	8c000415 	stw	r16,16(r17)
 1806420:	8805883a 	mov	r2,r17
 1806424:	dfc00517 	ldw	ra,20(sp)
 1806428:	dcc00417 	ldw	r19,16(sp)
 180642c:	dc800317 	ldw	r18,12(sp)
 1806430:	dc400217 	ldw	r17,8(sp)
 1806434:	dc000117 	ldw	r16,4(sp)
 1806438:	dec00604 	addi	sp,sp,24
 180643c:	f800283a 	ret
 1806440:	89400117 	ldw	r5,4(r17)
 1806444:	9009883a 	mov	r4,r18
 1806448:	d9c00015 	stw	r7,0(sp)
 180644c:	29400044 	addi	r5,r5,1
 1806450:	18062bc0 	call	18062bc <_Balloc>
 1806454:	89800417 	ldw	r6,16(r17)
 1806458:	89400304 	addi	r5,r17,12
 180645c:	11000304 	addi	r4,r2,12
 1806460:	31800084 	addi	r6,r6,2
 1806464:	318d883a 	add	r6,r6,r6
 1806468:	318d883a 	add	r6,r6,r6
 180646c:	1027883a 	mov	r19,r2
 1806470:	180604c0 	call	180604c <memcpy>
 1806474:	d9c00017 	ldw	r7,0(sp)
 1806478:	88000a26 	beq	r17,zero,18064a4 <__multadd+0x118>
 180647c:	88c00117 	ldw	r3,4(r17)
 1806480:	90801317 	ldw	r2,76(r18)
 1806484:	18c7883a 	add	r3,r3,r3
 1806488:	18c7883a 	add	r3,r3,r3
 180648c:	10c5883a 	add	r2,r2,r3
 1806490:	10c00017 	ldw	r3,0(r2)
 1806494:	88c00015 	stw	r3,0(r17)
 1806498:	14400015 	stw	r17,0(r2)
 180649c:	9823883a 	mov	r17,r19
 18064a0:	003fd806 	br	1806404 <__alt_mem_mem_0+0xff7e6404>
 18064a4:	9823883a 	mov	r17,r19
 18064a8:	003fd606 	br	1806404 <__alt_mem_mem_0+0xff7e6404>

018064ac <__s2b>:
 18064ac:	defff904 	addi	sp,sp,-28
 18064b0:	dc400115 	stw	r17,4(sp)
 18064b4:	dc000015 	stw	r16,0(sp)
 18064b8:	2023883a 	mov	r17,r4
 18064bc:	2821883a 	mov	r16,r5
 18064c0:	39000204 	addi	r4,r7,8
 18064c4:	01400244 	movi	r5,9
 18064c8:	dcc00315 	stw	r19,12(sp)
 18064cc:	dc800215 	stw	r18,8(sp)
 18064d0:	dfc00615 	stw	ra,24(sp)
 18064d4:	dd400515 	stw	r21,20(sp)
 18064d8:	dd000415 	stw	r20,16(sp)
 18064dc:	3825883a 	mov	r18,r7
 18064e0:	3027883a 	mov	r19,r6
 18064e4:	180abd80 	call	180abd8 <__divsi3>
 18064e8:	00c00044 	movi	r3,1
 18064ec:	000b883a 	mov	r5,zero
 18064f0:	1880030e 	bge	r3,r2,1806500 <__s2b+0x54>
 18064f4:	18c7883a 	add	r3,r3,r3
 18064f8:	29400044 	addi	r5,r5,1
 18064fc:	18bffd16 	blt	r3,r2,18064f4 <__alt_mem_mem_0+0xff7e64f4>
 1806500:	8809883a 	mov	r4,r17
 1806504:	18062bc0 	call	18062bc <_Balloc>
 1806508:	d8c00717 	ldw	r3,28(sp)
 180650c:	10c00515 	stw	r3,20(r2)
 1806510:	00c00044 	movi	r3,1
 1806514:	10c00415 	stw	r3,16(r2)
 1806518:	00c00244 	movi	r3,9
 180651c:	1cc0210e 	bge	r3,r19,18065a4 <__s2b+0xf8>
 1806520:	80eb883a 	add	r21,r16,r3
 1806524:	a829883a 	mov	r20,r21
 1806528:	84e1883a 	add	r16,r16,r19
 180652c:	a1c00007 	ldb	r7,0(r20)
 1806530:	01800284 	movi	r6,10
 1806534:	a5000044 	addi	r20,r20,1
 1806538:	100b883a 	mov	r5,r2
 180653c:	39fff404 	addi	r7,r7,-48
 1806540:	8809883a 	mov	r4,r17
 1806544:	180638c0 	call	180638c <__multadd>
 1806548:	a43ff81e 	bne	r20,r16,180652c <__alt_mem_mem_0+0xff7e652c>
 180654c:	ace1883a 	add	r16,r21,r19
 1806550:	843ffe04 	addi	r16,r16,-8
 1806554:	9c800a0e 	bge	r19,r18,1806580 <__s2b+0xd4>
 1806558:	94e5c83a 	sub	r18,r18,r19
 180655c:	84a5883a 	add	r18,r16,r18
 1806560:	81c00007 	ldb	r7,0(r16)
 1806564:	01800284 	movi	r6,10
 1806568:	84000044 	addi	r16,r16,1
 180656c:	100b883a 	mov	r5,r2
 1806570:	39fff404 	addi	r7,r7,-48
 1806574:	8809883a 	mov	r4,r17
 1806578:	180638c0 	call	180638c <__multadd>
 180657c:	84bff81e 	bne	r16,r18,1806560 <__alt_mem_mem_0+0xff7e6560>
 1806580:	dfc00617 	ldw	ra,24(sp)
 1806584:	dd400517 	ldw	r21,20(sp)
 1806588:	dd000417 	ldw	r20,16(sp)
 180658c:	dcc00317 	ldw	r19,12(sp)
 1806590:	dc800217 	ldw	r18,8(sp)
 1806594:	dc400117 	ldw	r17,4(sp)
 1806598:	dc000017 	ldw	r16,0(sp)
 180659c:	dec00704 	addi	sp,sp,28
 18065a0:	f800283a 	ret
 18065a4:	84000284 	addi	r16,r16,10
 18065a8:	1827883a 	mov	r19,r3
 18065ac:	003fe906 	br	1806554 <__alt_mem_mem_0+0xff7e6554>

018065b0 <__hi0bits>:
 18065b0:	20bfffec 	andhi	r2,r4,65535
 18065b4:	1000141e 	bne	r2,zero,1806608 <__hi0bits+0x58>
 18065b8:	2008943a 	slli	r4,r4,16
 18065bc:	00800404 	movi	r2,16
 18065c0:	20ffc02c 	andhi	r3,r4,65280
 18065c4:	1800021e 	bne	r3,zero,18065d0 <__hi0bits+0x20>
 18065c8:	2008923a 	slli	r4,r4,8
 18065cc:	10800204 	addi	r2,r2,8
 18065d0:	20fc002c 	andhi	r3,r4,61440
 18065d4:	1800021e 	bne	r3,zero,18065e0 <__hi0bits+0x30>
 18065d8:	2008913a 	slli	r4,r4,4
 18065dc:	10800104 	addi	r2,r2,4
 18065e0:	20f0002c 	andhi	r3,r4,49152
 18065e4:	1800031e 	bne	r3,zero,18065f4 <__hi0bits+0x44>
 18065e8:	2109883a 	add	r4,r4,r4
 18065ec:	10800084 	addi	r2,r2,2
 18065f0:	2109883a 	add	r4,r4,r4
 18065f4:	20000316 	blt	r4,zero,1806604 <__hi0bits+0x54>
 18065f8:	2110002c 	andhi	r4,r4,16384
 18065fc:	2000041e 	bne	r4,zero,1806610 <__hi0bits+0x60>
 1806600:	00800804 	movi	r2,32
 1806604:	f800283a 	ret
 1806608:	0005883a 	mov	r2,zero
 180660c:	003fec06 	br	18065c0 <__alt_mem_mem_0+0xff7e65c0>
 1806610:	10800044 	addi	r2,r2,1
 1806614:	f800283a 	ret

01806618 <__lo0bits>:
 1806618:	20c00017 	ldw	r3,0(r4)
 180661c:	188001cc 	andi	r2,r3,7
 1806620:	10000826 	beq	r2,zero,1806644 <__lo0bits+0x2c>
 1806624:	1880004c 	andi	r2,r3,1
 1806628:	1000211e 	bne	r2,zero,18066b0 <__lo0bits+0x98>
 180662c:	1880008c 	andi	r2,r3,2
 1806630:	1000211e 	bne	r2,zero,18066b8 <__lo0bits+0xa0>
 1806634:	1806d0ba 	srli	r3,r3,2
 1806638:	00800084 	movi	r2,2
 180663c:	20c00015 	stw	r3,0(r4)
 1806640:	f800283a 	ret
 1806644:	18bfffcc 	andi	r2,r3,65535
 1806648:	10001326 	beq	r2,zero,1806698 <__lo0bits+0x80>
 180664c:	0005883a 	mov	r2,zero
 1806650:	19403fcc 	andi	r5,r3,255
 1806654:	2800021e 	bne	r5,zero,1806660 <__lo0bits+0x48>
 1806658:	1806d23a 	srli	r3,r3,8
 180665c:	10800204 	addi	r2,r2,8
 1806660:	194003cc 	andi	r5,r3,15
 1806664:	2800021e 	bne	r5,zero,1806670 <__lo0bits+0x58>
 1806668:	1806d13a 	srli	r3,r3,4
 180666c:	10800104 	addi	r2,r2,4
 1806670:	194000cc 	andi	r5,r3,3
 1806674:	2800021e 	bne	r5,zero,1806680 <__lo0bits+0x68>
 1806678:	1806d0ba 	srli	r3,r3,2
 180667c:	10800084 	addi	r2,r2,2
 1806680:	1940004c 	andi	r5,r3,1
 1806684:	2800081e 	bne	r5,zero,18066a8 <__lo0bits+0x90>
 1806688:	1806d07a 	srli	r3,r3,1
 180668c:	1800051e 	bne	r3,zero,18066a4 <__lo0bits+0x8c>
 1806690:	00800804 	movi	r2,32
 1806694:	f800283a 	ret
 1806698:	1806d43a 	srli	r3,r3,16
 180669c:	00800404 	movi	r2,16
 18066a0:	003feb06 	br	1806650 <__alt_mem_mem_0+0xff7e6650>
 18066a4:	10800044 	addi	r2,r2,1
 18066a8:	20c00015 	stw	r3,0(r4)
 18066ac:	f800283a 	ret
 18066b0:	0005883a 	mov	r2,zero
 18066b4:	f800283a 	ret
 18066b8:	1806d07a 	srli	r3,r3,1
 18066bc:	00800044 	movi	r2,1
 18066c0:	20c00015 	stw	r3,0(r4)
 18066c4:	f800283a 	ret

018066c8 <__i2b>:
 18066c8:	defffd04 	addi	sp,sp,-12
 18066cc:	dc000015 	stw	r16,0(sp)
 18066d0:	04000044 	movi	r16,1
 18066d4:	dc400115 	stw	r17,4(sp)
 18066d8:	2823883a 	mov	r17,r5
 18066dc:	800b883a 	mov	r5,r16
 18066e0:	dfc00215 	stw	ra,8(sp)
 18066e4:	18062bc0 	call	18062bc <_Balloc>
 18066e8:	14400515 	stw	r17,20(r2)
 18066ec:	14000415 	stw	r16,16(r2)
 18066f0:	dfc00217 	ldw	ra,8(sp)
 18066f4:	dc400117 	ldw	r17,4(sp)
 18066f8:	dc000017 	ldw	r16,0(sp)
 18066fc:	dec00304 	addi	sp,sp,12
 1806700:	f800283a 	ret

01806704 <__multiply>:
 1806704:	defffa04 	addi	sp,sp,-24
 1806708:	dcc00315 	stw	r19,12(sp)
 180670c:	dc800215 	stw	r18,8(sp)
 1806710:	34c00417 	ldw	r19,16(r6)
 1806714:	2c800417 	ldw	r18,16(r5)
 1806718:	dd000415 	stw	r20,16(sp)
 180671c:	dc400115 	stw	r17,4(sp)
 1806720:	dfc00515 	stw	ra,20(sp)
 1806724:	dc000015 	stw	r16,0(sp)
 1806728:	2829883a 	mov	r20,r5
 180672c:	3023883a 	mov	r17,r6
 1806730:	94c0050e 	bge	r18,r19,1806748 <__multiply+0x44>
 1806734:	9007883a 	mov	r3,r18
 1806738:	3029883a 	mov	r20,r6
 180673c:	9825883a 	mov	r18,r19
 1806740:	2823883a 	mov	r17,r5
 1806744:	1827883a 	mov	r19,r3
 1806748:	a0800217 	ldw	r2,8(r20)
 180674c:	94e1883a 	add	r16,r18,r19
 1806750:	a1400117 	ldw	r5,4(r20)
 1806754:	1400010e 	bge	r2,r16,180675c <__multiply+0x58>
 1806758:	29400044 	addi	r5,r5,1
 180675c:	18062bc0 	call	18062bc <_Balloc>
 1806760:	8415883a 	add	r10,r16,r16
 1806764:	12c00504 	addi	r11,r2,20
 1806768:	5295883a 	add	r10,r10,r10
 180676c:	5a95883a 	add	r10,r11,r10
 1806770:	5807883a 	mov	r3,r11
 1806774:	5a80032e 	bgeu	r11,r10,1806784 <__multiply+0x80>
 1806778:	18000015 	stw	zero,0(r3)
 180677c:	18c00104 	addi	r3,r3,4
 1806780:	1abffd36 	bltu	r3,r10,1806778 <__alt_mem_mem_0+0xff7e6778>
 1806784:	9ce7883a 	add	r19,r19,r19
 1806788:	94a5883a 	add	r18,r18,r18
 180678c:	89800504 	addi	r6,r17,20
 1806790:	9ce7883a 	add	r19,r19,r19
 1806794:	a3400504 	addi	r13,r20,20
 1806798:	94a5883a 	add	r18,r18,r18
 180679c:	34d9883a 	add	r12,r6,r19
 18067a0:	6c93883a 	add	r9,r13,r18
 18067a4:	3300422e 	bgeu	r6,r12,18068b0 <__multiply+0x1ac>
 18067a8:	37c00017 	ldw	ra,0(r6)
 18067ac:	fbffffcc 	andi	r15,ra,65535
 18067b0:	78001b26 	beq	r15,zero,1806820 <__multiply+0x11c>
 18067b4:	5811883a 	mov	r8,r11
 18067b8:	681d883a 	mov	r14,r13
 18067bc:	000f883a 	mov	r7,zero
 18067c0:	71000017 	ldw	r4,0(r14)
 18067c4:	40c00017 	ldw	r3,0(r8)
 18067c8:	73800104 	addi	r14,r14,4
 18067cc:	217fffcc 	andi	r5,r4,65535
 18067d0:	2bcb383a 	mul	r5,r5,r15
 18067d4:	2008d43a 	srli	r4,r4,16
 18067d8:	1c7fffcc 	andi	r17,r3,65535
 18067dc:	2c4b883a 	add	r5,r5,r17
 18067e0:	29cb883a 	add	r5,r5,r7
 18067e4:	23c9383a 	mul	r4,r4,r15
 18067e8:	1806d43a 	srli	r3,r3,16
 18067ec:	280ed43a 	srli	r7,r5,16
 18067f0:	297fffcc 	andi	r5,r5,65535
 18067f4:	20c7883a 	add	r3,r4,r3
 18067f8:	19c7883a 	add	r3,r3,r7
 18067fc:	1808943a 	slli	r4,r3,16
 1806800:	4023883a 	mov	r17,r8
 1806804:	180ed43a 	srli	r7,r3,16
 1806808:	214ab03a 	or	r5,r4,r5
 180680c:	41400015 	stw	r5,0(r8)
 1806810:	42000104 	addi	r8,r8,4
 1806814:	727fea36 	bltu	r14,r9,18067c0 <__alt_mem_mem_0+0xff7e67c0>
 1806818:	89c00115 	stw	r7,4(r17)
 180681c:	37c00017 	ldw	ra,0(r6)
 1806820:	f83ed43a 	srli	ra,ra,16
 1806824:	f8001f26 	beq	ra,zero,18068a4 <__multiply+0x1a0>
 1806828:	58c00017 	ldw	r3,0(r11)
 180682c:	681d883a 	mov	r14,r13
 1806830:	581f883a 	mov	r15,r11
 1806834:	1811883a 	mov	r8,r3
 1806838:	5825883a 	mov	r18,r11
 180683c:	000f883a 	mov	r7,zero
 1806840:	00000106 	br	1806848 <__multiply+0x144>
 1806844:	8825883a 	mov	r18,r17
 1806848:	7140000b 	ldhu	r5,0(r14)
 180684c:	4010d43a 	srli	r8,r8,16
 1806850:	193fffcc 	andi	r4,r3,65535
 1806854:	2fcb383a 	mul	r5,r5,ra
 1806858:	7bc00104 	addi	r15,r15,4
 180685c:	73800104 	addi	r14,r14,4
 1806860:	2a0b883a 	add	r5,r5,r8
 1806864:	29cb883a 	add	r5,r5,r7
 1806868:	2806943a 	slli	r3,r5,16
 180686c:	94400104 	addi	r17,r18,4
 1806870:	280ad43a 	srli	r5,r5,16
 1806874:	1908b03a 	or	r4,r3,r4
 1806878:	793fff15 	stw	r4,-4(r15)
 180687c:	70ffff17 	ldw	r3,-4(r14)
 1806880:	8a000017 	ldw	r8,0(r17)
 1806884:	1806d43a 	srli	r3,r3,16
 1806888:	413fffcc 	andi	r4,r8,65535
 180688c:	1fc7383a 	mul	r3,r3,ra
 1806890:	1907883a 	add	r3,r3,r4
 1806894:	1947883a 	add	r3,r3,r5
 1806898:	180ed43a 	srli	r7,r3,16
 180689c:	727fe936 	bltu	r14,r9,1806844 <__alt_mem_mem_0+0xff7e6844>
 18068a0:	90c00115 	stw	r3,4(r18)
 18068a4:	31800104 	addi	r6,r6,4
 18068a8:	5ac00104 	addi	r11,r11,4
 18068ac:	333fbe36 	bltu	r6,r12,18067a8 <__alt_mem_mem_0+0xff7e67a8>
 18068b0:	0400090e 	bge	zero,r16,18068d8 <__multiply+0x1d4>
 18068b4:	50ffff17 	ldw	r3,-4(r10)
 18068b8:	52bfff04 	addi	r10,r10,-4
 18068bc:	18000326 	beq	r3,zero,18068cc <__multiply+0x1c8>
 18068c0:	00000506 	br	18068d8 <__multiply+0x1d4>
 18068c4:	50c00017 	ldw	r3,0(r10)
 18068c8:	1800031e 	bne	r3,zero,18068d8 <__multiply+0x1d4>
 18068cc:	843fffc4 	addi	r16,r16,-1
 18068d0:	52bfff04 	addi	r10,r10,-4
 18068d4:	803ffb1e 	bne	r16,zero,18068c4 <__alt_mem_mem_0+0xff7e68c4>
 18068d8:	14000415 	stw	r16,16(r2)
 18068dc:	dfc00517 	ldw	ra,20(sp)
 18068e0:	dd000417 	ldw	r20,16(sp)
 18068e4:	dcc00317 	ldw	r19,12(sp)
 18068e8:	dc800217 	ldw	r18,8(sp)
 18068ec:	dc400117 	ldw	r17,4(sp)
 18068f0:	dc000017 	ldw	r16,0(sp)
 18068f4:	dec00604 	addi	sp,sp,24
 18068f8:	f800283a 	ret

018068fc <__pow5mult>:
 18068fc:	defffa04 	addi	sp,sp,-24
 1806900:	dcc00315 	stw	r19,12(sp)
 1806904:	dc000015 	stw	r16,0(sp)
 1806908:	dfc00515 	stw	ra,20(sp)
 180690c:	dd000415 	stw	r20,16(sp)
 1806910:	dc800215 	stw	r18,8(sp)
 1806914:	dc400115 	stw	r17,4(sp)
 1806918:	308000cc 	andi	r2,r6,3
 180691c:	3021883a 	mov	r16,r6
 1806920:	2027883a 	mov	r19,r4
 1806924:	10002f1e 	bne	r2,zero,18069e4 <__pow5mult+0xe8>
 1806928:	2825883a 	mov	r18,r5
 180692c:	8021d0ba 	srai	r16,r16,2
 1806930:	80001a26 	beq	r16,zero,180699c <__pow5mult+0xa0>
 1806934:	9c401217 	ldw	r17,72(r19)
 1806938:	8800061e 	bne	r17,zero,1806954 <__pow5mult+0x58>
 180693c:	00003406 	br	1806a10 <__pow5mult+0x114>
 1806940:	8021d07a 	srai	r16,r16,1
 1806944:	80001526 	beq	r16,zero,180699c <__pow5mult+0xa0>
 1806948:	88800017 	ldw	r2,0(r17)
 180694c:	10001c26 	beq	r2,zero,18069c0 <__pow5mult+0xc4>
 1806950:	1023883a 	mov	r17,r2
 1806954:	8080004c 	andi	r2,r16,1
 1806958:	103ff926 	beq	r2,zero,1806940 <__alt_mem_mem_0+0xff7e6940>
 180695c:	880d883a 	mov	r6,r17
 1806960:	900b883a 	mov	r5,r18
 1806964:	9809883a 	mov	r4,r19
 1806968:	18067040 	call	1806704 <__multiply>
 180696c:	90001b26 	beq	r18,zero,18069dc <__pow5mult+0xe0>
 1806970:	91000117 	ldw	r4,4(r18)
 1806974:	98c01317 	ldw	r3,76(r19)
 1806978:	8021d07a 	srai	r16,r16,1
 180697c:	2109883a 	add	r4,r4,r4
 1806980:	2109883a 	add	r4,r4,r4
 1806984:	1907883a 	add	r3,r3,r4
 1806988:	19000017 	ldw	r4,0(r3)
 180698c:	91000015 	stw	r4,0(r18)
 1806990:	1c800015 	stw	r18,0(r3)
 1806994:	1025883a 	mov	r18,r2
 1806998:	803feb1e 	bne	r16,zero,1806948 <__alt_mem_mem_0+0xff7e6948>
 180699c:	9005883a 	mov	r2,r18
 18069a0:	dfc00517 	ldw	ra,20(sp)
 18069a4:	dd000417 	ldw	r20,16(sp)
 18069a8:	dcc00317 	ldw	r19,12(sp)
 18069ac:	dc800217 	ldw	r18,8(sp)
 18069b0:	dc400117 	ldw	r17,4(sp)
 18069b4:	dc000017 	ldw	r16,0(sp)
 18069b8:	dec00604 	addi	sp,sp,24
 18069bc:	f800283a 	ret
 18069c0:	880d883a 	mov	r6,r17
 18069c4:	880b883a 	mov	r5,r17
 18069c8:	9809883a 	mov	r4,r19
 18069cc:	18067040 	call	1806704 <__multiply>
 18069d0:	88800015 	stw	r2,0(r17)
 18069d4:	10000015 	stw	zero,0(r2)
 18069d8:	003fdd06 	br	1806950 <__alt_mem_mem_0+0xff7e6950>
 18069dc:	1025883a 	mov	r18,r2
 18069e0:	003fd706 	br	1806940 <__alt_mem_mem_0+0xff7e6940>
 18069e4:	10bfffc4 	addi	r2,r2,-1
 18069e8:	1085883a 	add	r2,r2,r2
 18069ec:	00c06134 	movhi	r3,388
 18069f0:	18c29d04 	addi	r3,r3,2676
 18069f4:	1085883a 	add	r2,r2,r2
 18069f8:	1885883a 	add	r2,r3,r2
 18069fc:	11800017 	ldw	r6,0(r2)
 1806a00:	000f883a 	mov	r7,zero
 1806a04:	180638c0 	call	180638c <__multadd>
 1806a08:	1025883a 	mov	r18,r2
 1806a0c:	003fc706 	br	180692c <__alt_mem_mem_0+0xff7e692c>
 1806a10:	05000044 	movi	r20,1
 1806a14:	a00b883a 	mov	r5,r20
 1806a18:	9809883a 	mov	r4,r19
 1806a1c:	18062bc0 	call	18062bc <_Balloc>
 1806a20:	1023883a 	mov	r17,r2
 1806a24:	00809c44 	movi	r2,625
 1806a28:	88800515 	stw	r2,20(r17)
 1806a2c:	8d000415 	stw	r20,16(r17)
 1806a30:	9c401215 	stw	r17,72(r19)
 1806a34:	88000015 	stw	zero,0(r17)
 1806a38:	003fc606 	br	1806954 <__alt_mem_mem_0+0xff7e6954>

01806a3c <__lshift>:
 1806a3c:	defff904 	addi	sp,sp,-28
 1806a40:	dd400515 	stw	r21,20(sp)
 1806a44:	dcc00315 	stw	r19,12(sp)
 1806a48:	302bd17a 	srai	r21,r6,5
 1806a4c:	2cc00417 	ldw	r19,16(r5)
 1806a50:	28800217 	ldw	r2,8(r5)
 1806a54:	dd000415 	stw	r20,16(sp)
 1806a58:	ace7883a 	add	r19,r21,r19
 1806a5c:	dc800215 	stw	r18,8(sp)
 1806a60:	dc400115 	stw	r17,4(sp)
 1806a64:	dc000015 	stw	r16,0(sp)
 1806a68:	dfc00615 	stw	ra,24(sp)
 1806a6c:	9c000044 	addi	r16,r19,1
 1806a70:	2823883a 	mov	r17,r5
 1806a74:	3029883a 	mov	r20,r6
 1806a78:	2025883a 	mov	r18,r4
 1806a7c:	29400117 	ldw	r5,4(r5)
 1806a80:	1400030e 	bge	r2,r16,1806a90 <__lshift+0x54>
 1806a84:	1085883a 	add	r2,r2,r2
 1806a88:	29400044 	addi	r5,r5,1
 1806a8c:	143ffd16 	blt	r2,r16,1806a84 <__alt_mem_mem_0+0xff7e6a84>
 1806a90:	9009883a 	mov	r4,r18
 1806a94:	18062bc0 	call	18062bc <_Balloc>
 1806a98:	10c00504 	addi	r3,r2,20
 1806a9c:	0540070e 	bge	zero,r21,1806abc <__lshift+0x80>
 1806aa0:	ad6b883a 	add	r21,r21,r21
 1806aa4:	ad6b883a 	add	r21,r21,r21
 1806aa8:	1809883a 	mov	r4,r3
 1806aac:	1d47883a 	add	r3,r3,r21
 1806ab0:	20000015 	stw	zero,0(r4)
 1806ab4:	21000104 	addi	r4,r4,4
 1806ab8:	193ffd1e 	bne	r3,r4,1806ab0 <__alt_mem_mem_0+0xff7e6ab0>
 1806abc:	8a000417 	ldw	r8,16(r17)
 1806ac0:	89000504 	addi	r4,r17,20
 1806ac4:	a18007cc 	andi	r6,r20,31
 1806ac8:	4211883a 	add	r8,r8,r8
 1806acc:	4211883a 	add	r8,r8,r8
 1806ad0:	2211883a 	add	r8,r4,r8
 1806ad4:	30002326 	beq	r6,zero,1806b64 <__lshift+0x128>
 1806ad8:	02400804 	movi	r9,32
 1806adc:	4993c83a 	sub	r9,r9,r6
 1806ae0:	000b883a 	mov	r5,zero
 1806ae4:	21c00017 	ldw	r7,0(r4)
 1806ae8:	1815883a 	mov	r10,r3
 1806aec:	18c00104 	addi	r3,r3,4
 1806af0:	398e983a 	sll	r7,r7,r6
 1806af4:	21000104 	addi	r4,r4,4
 1806af8:	394ab03a 	or	r5,r7,r5
 1806afc:	197fff15 	stw	r5,-4(r3)
 1806b00:	217fff17 	ldw	r5,-4(r4)
 1806b04:	2a4ad83a 	srl	r5,r5,r9
 1806b08:	223ff636 	bltu	r4,r8,1806ae4 <__alt_mem_mem_0+0xff7e6ae4>
 1806b0c:	51400115 	stw	r5,4(r10)
 1806b10:	28001a1e 	bne	r5,zero,1806b7c <__lshift+0x140>
 1806b14:	843fffc4 	addi	r16,r16,-1
 1806b18:	14000415 	stw	r16,16(r2)
 1806b1c:	88000826 	beq	r17,zero,1806b40 <__lshift+0x104>
 1806b20:	89000117 	ldw	r4,4(r17)
 1806b24:	90c01317 	ldw	r3,76(r18)
 1806b28:	2109883a 	add	r4,r4,r4
 1806b2c:	2109883a 	add	r4,r4,r4
 1806b30:	1907883a 	add	r3,r3,r4
 1806b34:	19000017 	ldw	r4,0(r3)
 1806b38:	89000015 	stw	r4,0(r17)
 1806b3c:	1c400015 	stw	r17,0(r3)
 1806b40:	dfc00617 	ldw	ra,24(sp)
 1806b44:	dd400517 	ldw	r21,20(sp)
 1806b48:	dd000417 	ldw	r20,16(sp)
 1806b4c:	dcc00317 	ldw	r19,12(sp)
 1806b50:	dc800217 	ldw	r18,8(sp)
 1806b54:	dc400117 	ldw	r17,4(sp)
 1806b58:	dc000017 	ldw	r16,0(sp)
 1806b5c:	dec00704 	addi	sp,sp,28
 1806b60:	f800283a 	ret
 1806b64:	21400017 	ldw	r5,0(r4)
 1806b68:	18c00104 	addi	r3,r3,4
 1806b6c:	21000104 	addi	r4,r4,4
 1806b70:	197fff15 	stw	r5,-4(r3)
 1806b74:	223ffb36 	bltu	r4,r8,1806b64 <__alt_mem_mem_0+0xff7e6b64>
 1806b78:	003fe606 	br	1806b14 <__alt_mem_mem_0+0xff7e6b14>
 1806b7c:	9c000084 	addi	r16,r19,2
 1806b80:	003fe406 	br	1806b14 <__alt_mem_mem_0+0xff7e6b14>

01806b84 <__mcmp>:
 1806b84:	20800417 	ldw	r2,16(r4)
 1806b88:	28c00417 	ldw	r3,16(r5)
 1806b8c:	10c5c83a 	sub	r2,r2,r3
 1806b90:	1000111e 	bne	r2,zero,1806bd8 <__mcmp+0x54>
 1806b94:	18c7883a 	add	r3,r3,r3
 1806b98:	18c7883a 	add	r3,r3,r3
 1806b9c:	21000504 	addi	r4,r4,20
 1806ba0:	29400504 	addi	r5,r5,20
 1806ba4:	20c5883a 	add	r2,r4,r3
 1806ba8:	28cb883a 	add	r5,r5,r3
 1806bac:	00000106 	br	1806bb4 <__mcmp+0x30>
 1806bb0:	20800a2e 	bgeu	r4,r2,1806bdc <__mcmp+0x58>
 1806bb4:	10bfff04 	addi	r2,r2,-4
 1806bb8:	297fff04 	addi	r5,r5,-4
 1806bbc:	11800017 	ldw	r6,0(r2)
 1806bc0:	28c00017 	ldw	r3,0(r5)
 1806bc4:	30fffa26 	beq	r6,r3,1806bb0 <__alt_mem_mem_0+0xff7e6bb0>
 1806bc8:	30c00236 	bltu	r6,r3,1806bd4 <__mcmp+0x50>
 1806bcc:	00800044 	movi	r2,1
 1806bd0:	f800283a 	ret
 1806bd4:	00bfffc4 	movi	r2,-1
 1806bd8:	f800283a 	ret
 1806bdc:	0005883a 	mov	r2,zero
 1806be0:	f800283a 	ret

01806be4 <__mdiff>:
 1806be4:	28c00417 	ldw	r3,16(r5)
 1806be8:	30800417 	ldw	r2,16(r6)
 1806bec:	defffa04 	addi	sp,sp,-24
 1806bf0:	dcc00315 	stw	r19,12(sp)
 1806bf4:	dc800215 	stw	r18,8(sp)
 1806bf8:	dfc00515 	stw	ra,20(sp)
 1806bfc:	dd000415 	stw	r20,16(sp)
 1806c00:	dc400115 	stw	r17,4(sp)
 1806c04:	dc000015 	stw	r16,0(sp)
 1806c08:	1887c83a 	sub	r3,r3,r2
 1806c0c:	2825883a 	mov	r18,r5
 1806c10:	3027883a 	mov	r19,r6
 1806c14:	1800141e 	bne	r3,zero,1806c68 <__mdiff+0x84>
 1806c18:	1085883a 	add	r2,r2,r2
 1806c1c:	1085883a 	add	r2,r2,r2
 1806c20:	2a000504 	addi	r8,r5,20
 1806c24:	34000504 	addi	r16,r6,20
 1806c28:	4087883a 	add	r3,r8,r2
 1806c2c:	8085883a 	add	r2,r16,r2
 1806c30:	00000106 	br	1806c38 <__mdiff+0x54>
 1806c34:	40c0592e 	bgeu	r8,r3,1806d9c <__mdiff+0x1b8>
 1806c38:	18ffff04 	addi	r3,r3,-4
 1806c3c:	10bfff04 	addi	r2,r2,-4
 1806c40:	19c00017 	ldw	r7,0(r3)
 1806c44:	11400017 	ldw	r5,0(r2)
 1806c48:	397ffa26 	beq	r7,r5,1806c34 <__alt_mem_mem_0+0xff7e6c34>
 1806c4c:	3940592e 	bgeu	r7,r5,1806db4 <__mdiff+0x1d0>
 1806c50:	9005883a 	mov	r2,r18
 1806c54:	4023883a 	mov	r17,r8
 1806c58:	9825883a 	mov	r18,r19
 1806c5c:	05000044 	movi	r20,1
 1806c60:	1027883a 	mov	r19,r2
 1806c64:	00000406 	br	1806c78 <__mdiff+0x94>
 1806c68:	18005616 	blt	r3,zero,1806dc4 <__mdiff+0x1e0>
 1806c6c:	34400504 	addi	r17,r6,20
 1806c70:	2c000504 	addi	r16,r5,20
 1806c74:	0029883a 	mov	r20,zero
 1806c78:	91400117 	ldw	r5,4(r18)
 1806c7c:	18062bc0 	call	18062bc <_Balloc>
 1806c80:	92400417 	ldw	r9,16(r18)
 1806c84:	9b000417 	ldw	r12,16(r19)
 1806c88:	12c00504 	addi	r11,r2,20
 1806c8c:	4a51883a 	add	r8,r9,r9
 1806c90:	6319883a 	add	r12,r12,r12
 1806c94:	4211883a 	add	r8,r8,r8
 1806c98:	6319883a 	add	r12,r12,r12
 1806c9c:	15000315 	stw	r20,12(r2)
 1806ca0:	8211883a 	add	r8,r16,r8
 1806ca4:	8b19883a 	add	r12,r17,r12
 1806ca8:	0007883a 	mov	r3,zero
 1806cac:	81400017 	ldw	r5,0(r16)
 1806cb0:	89c00017 	ldw	r7,0(r17)
 1806cb4:	59800104 	addi	r6,r11,4
 1806cb8:	293fffcc 	andi	r4,r5,65535
 1806cbc:	20c7883a 	add	r3,r4,r3
 1806cc0:	393fffcc 	andi	r4,r7,65535
 1806cc4:	1909c83a 	sub	r4,r3,r4
 1806cc8:	280ad43a 	srli	r5,r5,16
 1806ccc:	380ed43a 	srli	r7,r7,16
 1806cd0:	2007d43a 	srai	r3,r4,16
 1806cd4:	213fffcc 	andi	r4,r4,65535
 1806cd8:	29cbc83a 	sub	r5,r5,r7
 1806cdc:	28c7883a 	add	r3,r5,r3
 1806ce0:	180a943a 	slli	r5,r3,16
 1806ce4:	8c400104 	addi	r17,r17,4
 1806ce8:	84000104 	addi	r16,r16,4
 1806cec:	2908b03a 	or	r4,r5,r4
 1806cf0:	59000015 	stw	r4,0(r11)
 1806cf4:	1807d43a 	srai	r3,r3,16
 1806cf8:	3015883a 	mov	r10,r6
 1806cfc:	3017883a 	mov	r11,r6
 1806d00:	8b3fea36 	bltu	r17,r12,1806cac <__alt_mem_mem_0+0xff7e6cac>
 1806d04:	8200162e 	bgeu	r16,r8,1806d60 <__mdiff+0x17c>
 1806d08:	8017883a 	mov	r11,r16
 1806d0c:	59400017 	ldw	r5,0(r11)
 1806d10:	31800104 	addi	r6,r6,4
 1806d14:	5ac00104 	addi	r11,r11,4
 1806d18:	293fffcc 	andi	r4,r5,65535
 1806d1c:	20c7883a 	add	r3,r4,r3
 1806d20:	280ed43a 	srli	r7,r5,16
 1806d24:	180bd43a 	srai	r5,r3,16
 1806d28:	193fffcc 	andi	r4,r3,65535
 1806d2c:	3947883a 	add	r3,r7,r5
 1806d30:	180a943a 	slli	r5,r3,16
 1806d34:	1807d43a 	srai	r3,r3,16
 1806d38:	2908b03a 	or	r4,r5,r4
 1806d3c:	313fff15 	stw	r4,-4(r6)
 1806d40:	5a3ff236 	bltu	r11,r8,1806d0c <__alt_mem_mem_0+0xff7e6d0c>
 1806d44:	0406303a 	nor	r3,zero,r16
 1806d48:	1a07883a 	add	r3,r3,r8
 1806d4c:	1806d0ba 	srli	r3,r3,2
 1806d50:	18c00044 	addi	r3,r3,1
 1806d54:	18c7883a 	add	r3,r3,r3
 1806d58:	18c7883a 	add	r3,r3,r3
 1806d5c:	50d5883a 	add	r10,r10,r3
 1806d60:	50ffff04 	addi	r3,r10,-4
 1806d64:	2000041e 	bne	r4,zero,1806d78 <__mdiff+0x194>
 1806d68:	18ffff04 	addi	r3,r3,-4
 1806d6c:	19000017 	ldw	r4,0(r3)
 1806d70:	4a7fffc4 	addi	r9,r9,-1
 1806d74:	203ffc26 	beq	r4,zero,1806d68 <__alt_mem_mem_0+0xff7e6d68>
 1806d78:	12400415 	stw	r9,16(r2)
 1806d7c:	dfc00517 	ldw	ra,20(sp)
 1806d80:	dd000417 	ldw	r20,16(sp)
 1806d84:	dcc00317 	ldw	r19,12(sp)
 1806d88:	dc800217 	ldw	r18,8(sp)
 1806d8c:	dc400117 	ldw	r17,4(sp)
 1806d90:	dc000017 	ldw	r16,0(sp)
 1806d94:	dec00604 	addi	sp,sp,24
 1806d98:	f800283a 	ret
 1806d9c:	000b883a 	mov	r5,zero
 1806da0:	18062bc0 	call	18062bc <_Balloc>
 1806da4:	00c00044 	movi	r3,1
 1806da8:	10c00415 	stw	r3,16(r2)
 1806dac:	10000515 	stw	zero,20(r2)
 1806db0:	003ff206 	br	1806d7c <__alt_mem_mem_0+0xff7e6d7c>
 1806db4:	8023883a 	mov	r17,r16
 1806db8:	0029883a 	mov	r20,zero
 1806dbc:	4021883a 	mov	r16,r8
 1806dc0:	003fad06 	br	1806c78 <__alt_mem_mem_0+0xff7e6c78>
 1806dc4:	9005883a 	mov	r2,r18
 1806dc8:	94400504 	addi	r17,r18,20
 1806dcc:	9c000504 	addi	r16,r19,20
 1806dd0:	9825883a 	mov	r18,r19
 1806dd4:	05000044 	movi	r20,1
 1806dd8:	1027883a 	mov	r19,r2
 1806ddc:	003fa606 	br	1806c78 <__alt_mem_mem_0+0xff7e6c78>

01806de0 <__ulp>:
 1806de0:	295ffc2c 	andhi	r5,r5,32752
 1806de4:	00bf3034 	movhi	r2,64704
 1806de8:	2887883a 	add	r3,r5,r2
 1806dec:	00c0020e 	bge	zero,r3,1806df8 <__ulp+0x18>
 1806df0:	0005883a 	mov	r2,zero
 1806df4:	f800283a 	ret
 1806df8:	00c7c83a 	sub	r3,zero,r3
 1806dfc:	1807d53a 	srai	r3,r3,20
 1806e00:	008004c4 	movi	r2,19
 1806e04:	10c00b0e 	bge	r2,r3,1806e34 <__ulp+0x54>
 1806e08:	18bffb04 	addi	r2,r3,-20
 1806e0c:	01000784 	movi	r4,30
 1806e10:	0007883a 	mov	r3,zero
 1806e14:	20800516 	blt	r4,r2,1806e2c <__ulp+0x4c>
 1806e18:	010007c4 	movi	r4,31
 1806e1c:	2089c83a 	sub	r4,r4,r2
 1806e20:	00800044 	movi	r2,1
 1806e24:	1104983a 	sll	r2,r2,r4
 1806e28:	f800283a 	ret
 1806e2c:	00800044 	movi	r2,1
 1806e30:	f800283a 	ret
 1806e34:	01400234 	movhi	r5,8
 1806e38:	28c7d83a 	sra	r3,r5,r3
 1806e3c:	0005883a 	mov	r2,zero
 1806e40:	f800283a 	ret

01806e44 <__b2d>:
 1806e44:	defffa04 	addi	sp,sp,-24
 1806e48:	dc000015 	stw	r16,0(sp)
 1806e4c:	24000417 	ldw	r16,16(r4)
 1806e50:	dc400115 	stw	r17,4(sp)
 1806e54:	24400504 	addi	r17,r4,20
 1806e58:	8421883a 	add	r16,r16,r16
 1806e5c:	8421883a 	add	r16,r16,r16
 1806e60:	8c21883a 	add	r16,r17,r16
 1806e64:	dc800215 	stw	r18,8(sp)
 1806e68:	84bfff17 	ldw	r18,-4(r16)
 1806e6c:	dd000415 	stw	r20,16(sp)
 1806e70:	dcc00315 	stw	r19,12(sp)
 1806e74:	9009883a 	mov	r4,r18
 1806e78:	2829883a 	mov	r20,r5
 1806e7c:	dfc00515 	stw	ra,20(sp)
 1806e80:	18065b00 	call	18065b0 <__hi0bits>
 1806e84:	00c00804 	movi	r3,32
 1806e88:	1889c83a 	sub	r4,r3,r2
 1806e8c:	a1000015 	stw	r4,0(r20)
 1806e90:	01000284 	movi	r4,10
 1806e94:	84ffff04 	addi	r19,r16,-4
 1806e98:	20801216 	blt	r4,r2,1806ee4 <__b2d+0xa0>
 1806e9c:	018002c4 	movi	r6,11
 1806ea0:	308dc83a 	sub	r6,r6,r2
 1806ea4:	9186d83a 	srl	r3,r18,r6
 1806ea8:	18cffc34 	orhi	r3,r3,16368
 1806eac:	8cc0212e 	bgeu	r17,r19,1806f34 <__b2d+0xf0>
 1806eb0:	813ffe17 	ldw	r4,-8(r16)
 1806eb4:	218cd83a 	srl	r6,r4,r6
 1806eb8:	10800544 	addi	r2,r2,21
 1806ebc:	9084983a 	sll	r2,r18,r2
 1806ec0:	1184b03a 	or	r2,r2,r6
 1806ec4:	dfc00517 	ldw	ra,20(sp)
 1806ec8:	dd000417 	ldw	r20,16(sp)
 1806ecc:	dcc00317 	ldw	r19,12(sp)
 1806ed0:	dc800217 	ldw	r18,8(sp)
 1806ed4:	dc400117 	ldw	r17,4(sp)
 1806ed8:	dc000017 	ldw	r16,0(sp)
 1806edc:	dec00604 	addi	sp,sp,24
 1806ee0:	f800283a 	ret
 1806ee4:	8cc00f2e 	bgeu	r17,r19,1806f24 <__b2d+0xe0>
 1806ee8:	117ffd44 	addi	r5,r2,-11
 1806eec:	80bffe17 	ldw	r2,-8(r16)
 1806ef0:	28000e26 	beq	r5,zero,1806f2c <__b2d+0xe8>
 1806ef4:	1949c83a 	sub	r4,r3,r5
 1806ef8:	9164983a 	sll	r18,r18,r5
 1806efc:	1106d83a 	srl	r3,r2,r4
 1806f00:	81bffe04 	addi	r6,r16,-8
 1806f04:	948ffc34 	orhi	r18,r18,16368
 1806f08:	90c6b03a 	or	r3,r18,r3
 1806f0c:	89800e2e 	bgeu	r17,r6,1806f48 <__b2d+0x104>
 1806f10:	81bffd17 	ldw	r6,-12(r16)
 1806f14:	1144983a 	sll	r2,r2,r5
 1806f18:	310ad83a 	srl	r5,r6,r4
 1806f1c:	2884b03a 	or	r2,r5,r2
 1806f20:	003fe806 	br	1806ec4 <__alt_mem_mem_0+0xff7e6ec4>
 1806f24:	10bffd44 	addi	r2,r2,-11
 1806f28:	1000041e 	bne	r2,zero,1806f3c <__b2d+0xf8>
 1806f2c:	90cffc34 	orhi	r3,r18,16368
 1806f30:	003fe406 	br	1806ec4 <__alt_mem_mem_0+0xff7e6ec4>
 1806f34:	000d883a 	mov	r6,zero
 1806f38:	003fdf06 	br	1806eb8 <__alt_mem_mem_0+0xff7e6eb8>
 1806f3c:	90a4983a 	sll	r18,r18,r2
 1806f40:	0005883a 	mov	r2,zero
 1806f44:	003ff906 	br	1806f2c <__alt_mem_mem_0+0xff7e6f2c>
 1806f48:	1144983a 	sll	r2,r2,r5
 1806f4c:	003fdd06 	br	1806ec4 <__alt_mem_mem_0+0xff7e6ec4>

01806f50 <__d2b>:
 1806f50:	defff804 	addi	sp,sp,-32
 1806f54:	dc000215 	stw	r16,8(sp)
 1806f58:	3021883a 	mov	r16,r6
 1806f5c:	dc400315 	stw	r17,12(sp)
 1806f60:	8022907a 	slli	r17,r16,1
 1806f64:	dd000615 	stw	r20,24(sp)
 1806f68:	2829883a 	mov	r20,r5
 1806f6c:	01400044 	movi	r5,1
 1806f70:	dcc00515 	stw	r19,20(sp)
 1806f74:	dc800415 	stw	r18,16(sp)
 1806f78:	dfc00715 	stw	ra,28(sp)
 1806f7c:	3825883a 	mov	r18,r7
 1806f80:	8822d57a 	srli	r17,r17,21
 1806f84:	18062bc0 	call	18062bc <_Balloc>
 1806f88:	1027883a 	mov	r19,r2
 1806f8c:	00800434 	movhi	r2,16
 1806f90:	10bfffc4 	addi	r2,r2,-1
 1806f94:	808c703a 	and	r6,r16,r2
 1806f98:	88000126 	beq	r17,zero,1806fa0 <__d2b+0x50>
 1806f9c:	31800434 	orhi	r6,r6,16
 1806fa0:	d9800015 	stw	r6,0(sp)
 1806fa4:	a0002426 	beq	r20,zero,1807038 <__d2b+0xe8>
 1806fa8:	d9000104 	addi	r4,sp,4
 1806fac:	dd000115 	stw	r20,4(sp)
 1806fb0:	18066180 	call	1806618 <__lo0bits>
 1806fb4:	d8c00017 	ldw	r3,0(sp)
 1806fb8:	10002f1e 	bne	r2,zero,1807078 <__d2b+0x128>
 1806fbc:	d9000117 	ldw	r4,4(sp)
 1806fc0:	99000515 	stw	r4,20(r19)
 1806fc4:	1821003a 	cmpeq	r16,r3,zero
 1806fc8:	01000084 	movi	r4,2
 1806fcc:	2421c83a 	sub	r16,r4,r16
 1806fd0:	98c00615 	stw	r3,24(r19)
 1806fd4:	9c000415 	stw	r16,16(r19)
 1806fd8:	88001f1e 	bne	r17,zero,1807058 <__d2b+0x108>
 1806fdc:	10bef384 	addi	r2,r2,-1074
 1806fe0:	90800015 	stw	r2,0(r18)
 1806fe4:	00900034 	movhi	r2,16384
 1806fe8:	10bfffc4 	addi	r2,r2,-1
 1806fec:	8085883a 	add	r2,r16,r2
 1806ff0:	1085883a 	add	r2,r2,r2
 1806ff4:	1085883a 	add	r2,r2,r2
 1806ff8:	9885883a 	add	r2,r19,r2
 1806ffc:	11000517 	ldw	r4,20(r2)
 1807000:	8020917a 	slli	r16,r16,5
 1807004:	18065b00 	call	18065b0 <__hi0bits>
 1807008:	d8c00817 	ldw	r3,32(sp)
 180700c:	8085c83a 	sub	r2,r16,r2
 1807010:	18800015 	stw	r2,0(r3)
 1807014:	9805883a 	mov	r2,r19
 1807018:	dfc00717 	ldw	ra,28(sp)
 180701c:	dd000617 	ldw	r20,24(sp)
 1807020:	dcc00517 	ldw	r19,20(sp)
 1807024:	dc800417 	ldw	r18,16(sp)
 1807028:	dc400317 	ldw	r17,12(sp)
 180702c:	dc000217 	ldw	r16,8(sp)
 1807030:	dec00804 	addi	sp,sp,32
 1807034:	f800283a 	ret
 1807038:	d809883a 	mov	r4,sp
 180703c:	18066180 	call	1806618 <__lo0bits>
 1807040:	d8c00017 	ldw	r3,0(sp)
 1807044:	04000044 	movi	r16,1
 1807048:	9c000415 	stw	r16,16(r19)
 180704c:	98c00515 	stw	r3,20(r19)
 1807050:	10800804 	addi	r2,r2,32
 1807054:	883fe126 	beq	r17,zero,1806fdc <__alt_mem_mem_0+0xff7e6fdc>
 1807058:	00c00d44 	movi	r3,53
 180705c:	8c7ef344 	addi	r17,r17,-1075
 1807060:	88a3883a 	add	r17,r17,r2
 1807064:	1885c83a 	sub	r2,r3,r2
 1807068:	d8c00817 	ldw	r3,32(sp)
 180706c:	94400015 	stw	r17,0(r18)
 1807070:	18800015 	stw	r2,0(r3)
 1807074:	003fe706 	br	1807014 <__alt_mem_mem_0+0xff7e7014>
 1807078:	01000804 	movi	r4,32
 180707c:	2089c83a 	sub	r4,r4,r2
 1807080:	1908983a 	sll	r4,r3,r4
 1807084:	d9400117 	ldw	r5,4(sp)
 1807088:	1886d83a 	srl	r3,r3,r2
 180708c:	2148b03a 	or	r4,r4,r5
 1807090:	99000515 	stw	r4,20(r19)
 1807094:	d8c00015 	stw	r3,0(sp)
 1807098:	003fca06 	br	1806fc4 <__alt_mem_mem_0+0xff7e6fc4>

0180709c <__ratio>:
 180709c:	defff904 	addi	sp,sp,-28
 18070a0:	dc400315 	stw	r17,12(sp)
 18070a4:	2823883a 	mov	r17,r5
 18070a8:	d9400104 	addi	r5,sp,4
 18070ac:	dfc00615 	stw	ra,24(sp)
 18070b0:	dcc00515 	stw	r19,20(sp)
 18070b4:	dc800415 	stw	r18,16(sp)
 18070b8:	2027883a 	mov	r19,r4
 18070bc:	dc000215 	stw	r16,8(sp)
 18070c0:	1806e440 	call	1806e44 <__b2d>
 18070c4:	d80b883a 	mov	r5,sp
 18070c8:	8809883a 	mov	r4,r17
 18070cc:	1025883a 	mov	r18,r2
 18070d0:	1821883a 	mov	r16,r3
 18070d4:	1806e440 	call	1806e44 <__b2d>
 18070d8:	8a000417 	ldw	r8,16(r17)
 18070dc:	99000417 	ldw	r4,16(r19)
 18070e0:	d9400117 	ldw	r5,4(sp)
 18070e4:	2209c83a 	sub	r4,r4,r8
 18070e8:	2010917a 	slli	r8,r4,5
 18070ec:	d9000017 	ldw	r4,0(sp)
 18070f0:	2909c83a 	sub	r4,r5,r4
 18070f4:	4109883a 	add	r4,r8,r4
 18070f8:	01000e0e 	bge	zero,r4,1807134 <__ratio+0x98>
 18070fc:	2008953a 	slli	r4,r4,20
 1807100:	2421883a 	add	r16,r4,r16
 1807104:	100d883a 	mov	r6,r2
 1807108:	180f883a 	mov	r7,r3
 180710c:	9009883a 	mov	r4,r18
 1807110:	800b883a 	mov	r5,r16
 1807114:	180b6380 	call	180b638 <__divdf3>
 1807118:	dfc00617 	ldw	ra,24(sp)
 180711c:	dcc00517 	ldw	r19,20(sp)
 1807120:	dc800417 	ldw	r18,16(sp)
 1807124:	dc400317 	ldw	r17,12(sp)
 1807128:	dc000217 	ldw	r16,8(sp)
 180712c:	dec00704 	addi	sp,sp,28
 1807130:	f800283a 	ret
 1807134:	2008953a 	slli	r4,r4,20
 1807138:	1907c83a 	sub	r3,r3,r4
 180713c:	003ff106 	br	1807104 <__alt_mem_mem_0+0xff7e7104>

01807140 <_mprec_log10>:
 1807140:	defffe04 	addi	sp,sp,-8
 1807144:	dc000015 	stw	r16,0(sp)
 1807148:	dfc00115 	stw	ra,4(sp)
 180714c:	008005c4 	movi	r2,23
 1807150:	2021883a 	mov	r16,r4
 1807154:	11000d0e 	bge	r2,r4,180718c <_mprec_log10+0x4c>
 1807158:	0005883a 	mov	r2,zero
 180715c:	00cffc34 	movhi	r3,16368
 1807160:	843fffc4 	addi	r16,r16,-1
 1807164:	000d883a 	mov	r6,zero
 1807168:	01d00934 	movhi	r7,16420
 180716c:	1009883a 	mov	r4,r2
 1807170:	180b883a 	mov	r5,r3
 1807174:	180c1780 	call	180c178 <__muldf3>
 1807178:	803ff91e 	bne	r16,zero,1807160 <__alt_mem_mem_0+0xff7e7160>
 180717c:	dfc00117 	ldw	ra,4(sp)
 1807180:	dc000017 	ldw	r16,0(sp)
 1807184:	dec00204 	addi	sp,sp,8
 1807188:	f800283a 	ret
 180718c:	202090fa 	slli	r16,r4,3
 1807190:	00806134 	movhi	r2,388
 1807194:	1082b404 	addi	r2,r2,2768
 1807198:	1421883a 	add	r16,r2,r16
 180719c:	80800017 	ldw	r2,0(r16)
 18071a0:	80c00117 	ldw	r3,4(r16)
 18071a4:	dfc00117 	ldw	ra,4(sp)
 18071a8:	dc000017 	ldw	r16,0(sp)
 18071ac:	dec00204 	addi	sp,sp,8
 18071b0:	f800283a 	ret

018071b4 <__copybits>:
 18071b4:	297fffc4 	addi	r5,r5,-1
 18071b8:	280fd17a 	srai	r7,r5,5
 18071bc:	30c00417 	ldw	r3,16(r6)
 18071c0:	30800504 	addi	r2,r6,20
 18071c4:	39c00044 	addi	r7,r7,1
 18071c8:	18c7883a 	add	r3,r3,r3
 18071cc:	39cf883a 	add	r7,r7,r7
 18071d0:	18c7883a 	add	r3,r3,r3
 18071d4:	39cf883a 	add	r7,r7,r7
 18071d8:	10c7883a 	add	r3,r2,r3
 18071dc:	21cf883a 	add	r7,r4,r7
 18071e0:	10c00d2e 	bgeu	r2,r3,1807218 <__copybits+0x64>
 18071e4:	200b883a 	mov	r5,r4
 18071e8:	12000017 	ldw	r8,0(r2)
 18071ec:	29400104 	addi	r5,r5,4
 18071f0:	10800104 	addi	r2,r2,4
 18071f4:	2a3fff15 	stw	r8,-4(r5)
 18071f8:	10fffb36 	bltu	r2,r3,18071e8 <__alt_mem_mem_0+0xff7e71e8>
 18071fc:	1985c83a 	sub	r2,r3,r6
 1807200:	10bffac4 	addi	r2,r2,-21
 1807204:	1004d0ba 	srli	r2,r2,2
 1807208:	10800044 	addi	r2,r2,1
 180720c:	1085883a 	add	r2,r2,r2
 1807210:	1085883a 	add	r2,r2,r2
 1807214:	2089883a 	add	r4,r4,r2
 1807218:	21c0032e 	bgeu	r4,r7,1807228 <__copybits+0x74>
 180721c:	20000015 	stw	zero,0(r4)
 1807220:	21000104 	addi	r4,r4,4
 1807224:	21fffd36 	bltu	r4,r7,180721c <__alt_mem_mem_0+0xff7e721c>
 1807228:	f800283a 	ret

0180722c <__any_on>:
 180722c:	20c00417 	ldw	r3,16(r4)
 1807230:	2805d17a 	srai	r2,r5,5
 1807234:	21000504 	addi	r4,r4,20
 1807238:	18800d0e 	bge	r3,r2,1807270 <__any_on+0x44>
 180723c:	18c7883a 	add	r3,r3,r3
 1807240:	18c7883a 	add	r3,r3,r3
 1807244:	20c7883a 	add	r3,r4,r3
 1807248:	20c0192e 	bgeu	r4,r3,18072b0 <__any_on+0x84>
 180724c:	18bfff17 	ldw	r2,-4(r3)
 1807250:	18ffff04 	addi	r3,r3,-4
 1807254:	1000041e 	bne	r2,zero,1807268 <__any_on+0x3c>
 1807258:	20c0142e 	bgeu	r4,r3,18072ac <__any_on+0x80>
 180725c:	18ffff04 	addi	r3,r3,-4
 1807260:	19400017 	ldw	r5,0(r3)
 1807264:	283ffc26 	beq	r5,zero,1807258 <__alt_mem_mem_0+0xff7e7258>
 1807268:	00800044 	movi	r2,1
 180726c:	f800283a 	ret
 1807270:	10c00a0e 	bge	r2,r3,180729c <__any_on+0x70>
 1807274:	1085883a 	add	r2,r2,r2
 1807278:	1085883a 	add	r2,r2,r2
 180727c:	294007cc 	andi	r5,r5,31
 1807280:	2087883a 	add	r3,r4,r2
 1807284:	283ff026 	beq	r5,zero,1807248 <__alt_mem_mem_0+0xff7e7248>
 1807288:	19800017 	ldw	r6,0(r3)
 180728c:	3144d83a 	srl	r2,r6,r5
 1807290:	114a983a 	sll	r5,r2,r5
 1807294:	317ff41e 	bne	r6,r5,1807268 <__alt_mem_mem_0+0xff7e7268>
 1807298:	003feb06 	br	1807248 <__alt_mem_mem_0+0xff7e7248>
 180729c:	1085883a 	add	r2,r2,r2
 18072a0:	1085883a 	add	r2,r2,r2
 18072a4:	2087883a 	add	r3,r4,r2
 18072a8:	003fe706 	br	1807248 <__alt_mem_mem_0+0xff7e7248>
 18072ac:	f800283a 	ret
 18072b0:	0005883a 	mov	r2,zero
 18072b4:	f800283a 	ret

018072b8 <__fpclassifyd>:
 18072b8:	00a00034 	movhi	r2,32768
 18072bc:	10bfffc4 	addi	r2,r2,-1
 18072c0:	2884703a 	and	r2,r5,r2
 18072c4:	10000726 	beq	r2,zero,18072e4 <__fpclassifyd+0x2c>
 18072c8:	00fffc34 	movhi	r3,65520
 18072cc:	019ff834 	movhi	r6,32736
 18072d0:	28c7883a 	add	r3,r5,r3
 18072d4:	31bfffc4 	addi	r6,r6,-1
 18072d8:	30c00536 	bltu	r6,r3,18072f0 <__fpclassifyd+0x38>
 18072dc:	00800104 	movi	r2,4
 18072e0:	f800283a 	ret
 18072e4:	2000021e 	bne	r4,zero,18072f0 <__fpclassifyd+0x38>
 18072e8:	00800084 	movi	r2,2
 18072ec:	f800283a 	ret
 18072f0:	00dffc34 	movhi	r3,32752
 18072f4:	019ff834 	movhi	r6,32736
 18072f8:	28cb883a 	add	r5,r5,r3
 18072fc:	31bfffc4 	addi	r6,r6,-1
 1807300:	317ff62e 	bgeu	r6,r5,18072dc <__alt_mem_mem_0+0xff7e72dc>
 1807304:	01400434 	movhi	r5,16
 1807308:	297fffc4 	addi	r5,r5,-1
 180730c:	28800236 	bltu	r5,r2,1807318 <__fpclassifyd+0x60>
 1807310:	008000c4 	movi	r2,3
 1807314:	f800283a 	ret
 1807318:	10c00226 	beq	r2,r3,1807324 <__fpclassifyd+0x6c>
 180731c:	0005883a 	mov	r2,zero
 1807320:	f800283a 	ret
 1807324:	2005003a 	cmpeq	r2,r4,zero
 1807328:	f800283a 	ret

0180732c <_sbrk_r>:
 180732c:	defffd04 	addi	sp,sp,-12
 1807330:	dc000015 	stw	r16,0(sp)
 1807334:	04006134 	movhi	r16,388
 1807338:	dc400115 	stw	r17,4(sp)
 180733c:	841cc104 	addi	r16,r16,29444
 1807340:	2023883a 	mov	r17,r4
 1807344:	2809883a 	mov	r4,r5
 1807348:	dfc00215 	stw	ra,8(sp)
 180734c:	80000015 	stw	zero,0(r16)
 1807350:	1812ec80 	call	1812ec8 <sbrk>
 1807354:	00ffffc4 	movi	r3,-1
 1807358:	10c00526 	beq	r2,r3,1807370 <_sbrk_r+0x44>
 180735c:	dfc00217 	ldw	ra,8(sp)
 1807360:	dc400117 	ldw	r17,4(sp)
 1807364:	dc000017 	ldw	r16,0(sp)
 1807368:	dec00304 	addi	sp,sp,12
 180736c:	f800283a 	ret
 1807370:	80c00017 	ldw	r3,0(r16)
 1807374:	183ff926 	beq	r3,zero,180735c <__alt_mem_mem_0+0xff7e735c>
 1807378:	88c00015 	stw	r3,0(r17)
 180737c:	003ff706 	br	180735c <__alt_mem_mem_0+0xff7e735c>

01807380 <__sread>:
 1807380:	defffe04 	addi	sp,sp,-8
 1807384:	dc000015 	stw	r16,0(sp)
 1807388:	2821883a 	mov	r16,r5
 180738c:	2940038f 	ldh	r5,14(r5)
 1807390:	dfc00115 	stw	ra,4(sp)
 1807394:	18098240 	call	1809824 <_read_r>
 1807398:	10000716 	blt	r2,zero,18073b8 <__sread+0x38>
 180739c:	80c01417 	ldw	r3,80(r16)
 18073a0:	1887883a 	add	r3,r3,r2
 18073a4:	80c01415 	stw	r3,80(r16)
 18073a8:	dfc00117 	ldw	ra,4(sp)
 18073ac:	dc000017 	ldw	r16,0(sp)
 18073b0:	dec00204 	addi	sp,sp,8
 18073b4:	f800283a 	ret
 18073b8:	80c0030b 	ldhu	r3,12(r16)
 18073bc:	18fbffcc 	andi	r3,r3,61439
 18073c0:	80c0030d 	sth	r3,12(r16)
 18073c4:	dfc00117 	ldw	ra,4(sp)
 18073c8:	dc000017 	ldw	r16,0(sp)
 18073cc:	dec00204 	addi	sp,sp,8
 18073d0:	f800283a 	ret

018073d4 <__seofread>:
 18073d4:	0005883a 	mov	r2,zero
 18073d8:	f800283a 	ret

018073dc <__swrite>:
 18073dc:	2880030b 	ldhu	r2,12(r5)
 18073e0:	defffb04 	addi	sp,sp,-20
 18073e4:	dcc00315 	stw	r19,12(sp)
 18073e8:	dc800215 	stw	r18,8(sp)
 18073ec:	dc400115 	stw	r17,4(sp)
 18073f0:	dc000015 	stw	r16,0(sp)
 18073f4:	dfc00415 	stw	ra,16(sp)
 18073f8:	10c0400c 	andi	r3,r2,256
 18073fc:	2821883a 	mov	r16,r5
 1807400:	2023883a 	mov	r17,r4
 1807404:	3025883a 	mov	r18,r6
 1807408:	3827883a 	mov	r19,r7
 180740c:	18000526 	beq	r3,zero,1807424 <__swrite+0x48>
 1807410:	2940038f 	ldh	r5,14(r5)
 1807414:	01c00084 	movi	r7,2
 1807418:	000d883a 	mov	r6,zero
 180741c:	18096680 	call	1809668 <_lseek_r>
 1807420:	8080030b 	ldhu	r2,12(r16)
 1807424:	8140038f 	ldh	r5,14(r16)
 1807428:	10bbffcc 	andi	r2,r2,61439
 180742c:	980f883a 	mov	r7,r19
 1807430:	900d883a 	mov	r6,r18
 1807434:	8809883a 	mov	r4,r17
 1807438:	8080030d 	sth	r2,12(r16)
 180743c:	dfc00417 	ldw	ra,16(sp)
 1807440:	dcc00317 	ldw	r19,12(sp)
 1807444:	dc800217 	ldw	r18,8(sp)
 1807448:	dc400117 	ldw	r17,4(sp)
 180744c:	dc000017 	ldw	r16,0(sp)
 1807450:	dec00504 	addi	sp,sp,20
 1807454:	1808c781 	jmpi	1808c78 <_write_r>

01807458 <__sseek>:
 1807458:	defffe04 	addi	sp,sp,-8
 180745c:	dc000015 	stw	r16,0(sp)
 1807460:	2821883a 	mov	r16,r5
 1807464:	2940038f 	ldh	r5,14(r5)
 1807468:	dfc00115 	stw	ra,4(sp)
 180746c:	18096680 	call	1809668 <_lseek_r>
 1807470:	00ffffc4 	movi	r3,-1
 1807474:	10c00826 	beq	r2,r3,1807498 <__sseek+0x40>
 1807478:	80c0030b 	ldhu	r3,12(r16)
 180747c:	80801415 	stw	r2,80(r16)
 1807480:	18c40014 	ori	r3,r3,4096
 1807484:	80c0030d 	sth	r3,12(r16)
 1807488:	dfc00117 	ldw	ra,4(sp)
 180748c:	dc000017 	ldw	r16,0(sp)
 1807490:	dec00204 	addi	sp,sp,8
 1807494:	f800283a 	ret
 1807498:	80c0030b 	ldhu	r3,12(r16)
 180749c:	18fbffcc 	andi	r3,r3,61439
 18074a0:	80c0030d 	sth	r3,12(r16)
 18074a4:	dfc00117 	ldw	ra,4(sp)
 18074a8:	dc000017 	ldw	r16,0(sp)
 18074ac:	dec00204 	addi	sp,sp,8
 18074b0:	f800283a 	ret

018074b4 <__sclose>:
 18074b4:	2940038f 	ldh	r5,14(r5)
 18074b8:	1808cd81 	jmpi	1808cd8 <_close_r>

018074bc <strcmp>:
 18074bc:	2144b03a 	or	r2,r4,r5
 18074c0:	108000cc 	andi	r2,r2,3
 18074c4:	1000171e 	bne	r2,zero,1807524 <strcmp+0x68>
 18074c8:	20800017 	ldw	r2,0(r4)
 18074cc:	28c00017 	ldw	r3,0(r5)
 18074d0:	10c0141e 	bne	r2,r3,1807524 <strcmp+0x68>
 18074d4:	027fbff4 	movhi	r9,65279
 18074d8:	4a7fbfc4 	addi	r9,r9,-257
 18074dc:	0086303a 	nor	r3,zero,r2
 18074e0:	02202074 	movhi	r8,32897
 18074e4:	1245883a 	add	r2,r2,r9
 18074e8:	42202004 	addi	r8,r8,-32640
 18074ec:	10c4703a 	and	r2,r2,r3
 18074f0:	1204703a 	and	r2,r2,r8
 18074f4:	10000226 	beq	r2,zero,1807500 <strcmp+0x44>
 18074f8:	00002306 	br	1807588 <strcmp+0xcc>
 18074fc:	1000221e 	bne	r2,zero,1807588 <strcmp+0xcc>
 1807500:	21000104 	addi	r4,r4,4
 1807504:	20c00017 	ldw	r3,0(r4)
 1807508:	29400104 	addi	r5,r5,4
 180750c:	29800017 	ldw	r6,0(r5)
 1807510:	1a4f883a 	add	r7,r3,r9
 1807514:	00c4303a 	nor	r2,zero,r3
 1807518:	3884703a 	and	r2,r7,r2
 180751c:	1204703a 	and	r2,r2,r8
 1807520:	19bff626 	beq	r3,r6,18074fc <__alt_mem_mem_0+0xff7e74fc>
 1807524:	20800003 	ldbu	r2,0(r4)
 1807528:	10c03fcc 	andi	r3,r2,255
 180752c:	18c0201c 	xori	r3,r3,128
 1807530:	18ffe004 	addi	r3,r3,-128
 1807534:	18000c26 	beq	r3,zero,1807568 <strcmp+0xac>
 1807538:	29800007 	ldb	r6,0(r5)
 180753c:	19800326 	beq	r3,r6,180754c <strcmp+0x90>
 1807540:	00001306 	br	1807590 <strcmp+0xd4>
 1807544:	29800007 	ldb	r6,0(r5)
 1807548:	11800b1e 	bne	r2,r6,1807578 <strcmp+0xbc>
 180754c:	21000044 	addi	r4,r4,1
 1807550:	20c00003 	ldbu	r3,0(r4)
 1807554:	29400044 	addi	r5,r5,1
 1807558:	18803fcc 	andi	r2,r3,255
 180755c:	1080201c 	xori	r2,r2,128
 1807560:	10bfe004 	addi	r2,r2,-128
 1807564:	103ff71e 	bne	r2,zero,1807544 <__alt_mem_mem_0+0xff7e7544>
 1807568:	0007883a 	mov	r3,zero
 180756c:	28800003 	ldbu	r2,0(r5)
 1807570:	1885c83a 	sub	r2,r3,r2
 1807574:	f800283a 	ret
 1807578:	28800003 	ldbu	r2,0(r5)
 180757c:	18c03fcc 	andi	r3,r3,255
 1807580:	1885c83a 	sub	r2,r3,r2
 1807584:	f800283a 	ret
 1807588:	0005883a 	mov	r2,zero
 180758c:	f800283a 	ret
 1807590:	10c03fcc 	andi	r3,r2,255
 1807594:	003ff506 	br	180756c <__alt_mem_mem_0+0xff7e756c>

01807598 <strlen>:
 1807598:	208000cc 	andi	r2,r4,3
 180759c:	10002026 	beq	r2,zero,1807620 <strlen+0x88>
 18075a0:	20800007 	ldb	r2,0(r4)
 18075a4:	10002026 	beq	r2,zero,1807628 <strlen+0x90>
 18075a8:	2005883a 	mov	r2,r4
 18075ac:	00000206 	br	18075b8 <strlen+0x20>
 18075b0:	10c00007 	ldb	r3,0(r2)
 18075b4:	18001826 	beq	r3,zero,1807618 <strlen+0x80>
 18075b8:	10800044 	addi	r2,r2,1
 18075bc:	10c000cc 	andi	r3,r2,3
 18075c0:	183ffb1e 	bne	r3,zero,18075b0 <__alt_mem_mem_0+0xff7e75b0>
 18075c4:	10c00017 	ldw	r3,0(r2)
 18075c8:	01ffbff4 	movhi	r7,65279
 18075cc:	39ffbfc4 	addi	r7,r7,-257
 18075d0:	00ca303a 	nor	r5,zero,r3
 18075d4:	01a02074 	movhi	r6,32897
 18075d8:	19c7883a 	add	r3,r3,r7
 18075dc:	31a02004 	addi	r6,r6,-32640
 18075e0:	1946703a 	and	r3,r3,r5
 18075e4:	1986703a 	and	r3,r3,r6
 18075e8:	1800091e 	bne	r3,zero,1807610 <strlen+0x78>
 18075ec:	10800104 	addi	r2,r2,4
 18075f0:	10c00017 	ldw	r3,0(r2)
 18075f4:	19cb883a 	add	r5,r3,r7
 18075f8:	00c6303a 	nor	r3,zero,r3
 18075fc:	28c6703a 	and	r3,r5,r3
 1807600:	1986703a 	and	r3,r3,r6
 1807604:	183ff926 	beq	r3,zero,18075ec <__alt_mem_mem_0+0xff7e75ec>
 1807608:	00000106 	br	1807610 <strlen+0x78>
 180760c:	10800044 	addi	r2,r2,1
 1807610:	10c00007 	ldb	r3,0(r2)
 1807614:	183ffd1e 	bne	r3,zero,180760c <__alt_mem_mem_0+0xff7e760c>
 1807618:	1105c83a 	sub	r2,r2,r4
 180761c:	f800283a 	ret
 1807620:	2005883a 	mov	r2,r4
 1807624:	003fe706 	br	18075c4 <__alt_mem_mem_0+0xff7e75c4>
 1807628:	0005883a 	mov	r2,zero
 180762c:	f800283a 	ret

01807630 <__sprint_r.part.0>:
 1807630:	28801917 	ldw	r2,100(r5)
 1807634:	defff604 	addi	sp,sp,-40
 1807638:	dd400515 	stw	r21,20(sp)
 180763c:	dfc00915 	stw	ra,36(sp)
 1807640:	df000815 	stw	fp,32(sp)
 1807644:	ddc00715 	stw	r23,28(sp)
 1807648:	dd800615 	stw	r22,24(sp)
 180764c:	dd000415 	stw	r20,16(sp)
 1807650:	dcc00315 	stw	r19,12(sp)
 1807654:	dc800215 	stw	r18,8(sp)
 1807658:	dc400115 	stw	r17,4(sp)
 180765c:	dc000015 	stw	r16,0(sp)
 1807660:	1088000c 	andi	r2,r2,8192
 1807664:	302b883a 	mov	r21,r6
 1807668:	10002e26 	beq	r2,zero,1807724 <__sprint_r.part.0+0xf4>
 180766c:	30800217 	ldw	r2,8(r6)
 1807670:	35800017 	ldw	r22,0(r6)
 1807674:	10002926 	beq	r2,zero,180771c <__sprint_r.part.0+0xec>
 1807678:	2827883a 	mov	r19,r5
 180767c:	2029883a 	mov	r20,r4
 1807680:	b5c00104 	addi	r23,r22,4
 1807684:	04bfffc4 	movi	r18,-1
 1807688:	bc400017 	ldw	r17,0(r23)
 180768c:	b4000017 	ldw	r16,0(r22)
 1807690:	0039883a 	mov	fp,zero
 1807694:	8822d0ba 	srli	r17,r17,2
 1807698:	8800031e 	bne	r17,zero,18076a8 <__sprint_r.part.0+0x78>
 180769c:	00001806 	br	1807700 <__sprint_r.part.0+0xd0>
 18076a0:	84000104 	addi	r16,r16,4
 18076a4:	8f001526 	beq	r17,fp,18076fc <__sprint_r.part.0+0xcc>
 18076a8:	81400017 	ldw	r5,0(r16)
 18076ac:	980d883a 	mov	r6,r19
 18076b0:	a009883a 	mov	r4,r20
 18076b4:	18090580 	call	1809058 <_fputwc_r>
 18076b8:	e7000044 	addi	fp,fp,1
 18076bc:	14bff81e 	bne	r2,r18,18076a0 <__alt_mem_mem_0+0xff7e76a0>
 18076c0:	9005883a 	mov	r2,r18
 18076c4:	a8000215 	stw	zero,8(r21)
 18076c8:	a8000115 	stw	zero,4(r21)
 18076cc:	dfc00917 	ldw	ra,36(sp)
 18076d0:	df000817 	ldw	fp,32(sp)
 18076d4:	ddc00717 	ldw	r23,28(sp)
 18076d8:	dd800617 	ldw	r22,24(sp)
 18076dc:	dd400517 	ldw	r21,20(sp)
 18076e0:	dd000417 	ldw	r20,16(sp)
 18076e4:	dcc00317 	ldw	r19,12(sp)
 18076e8:	dc800217 	ldw	r18,8(sp)
 18076ec:	dc400117 	ldw	r17,4(sp)
 18076f0:	dc000017 	ldw	r16,0(sp)
 18076f4:	dec00a04 	addi	sp,sp,40
 18076f8:	f800283a 	ret
 18076fc:	a8800217 	ldw	r2,8(r21)
 1807700:	8c63883a 	add	r17,r17,r17
 1807704:	8c63883a 	add	r17,r17,r17
 1807708:	1445c83a 	sub	r2,r2,r17
 180770c:	a8800215 	stw	r2,8(r21)
 1807710:	b5800204 	addi	r22,r22,8
 1807714:	bdc00204 	addi	r23,r23,8
 1807718:	103fdb1e 	bne	r2,zero,1807688 <__alt_mem_mem_0+0xff7e7688>
 180771c:	0005883a 	mov	r2,zero
 1807720:	003fe806 	br	18076c4 <__alt_mem_mem_0+0xff7e76c4>
 1807724:	18091580 	call	1809158 <__sfvwrite_r>
 1807728:	003fe606 	br	18076c4 <__alt_mem_mem_0+0xff7e76c4>

0180772c <__sprint_r>:
 180772c:	30c00217 	ldw	r3,8(r6)
 1807730:	18000126 	beq	r3,zero,1807738 <__sprint_r+0xc>
 1807734:	18076301 	jmpi	1807630 <__sprint_r.part.0>
 1807738:	30000115 	stw	zero,4(r6)
 180773c:	0005883a 	mov	r2,zero
 1807740:	f800283a 	ret

01807744 <___vfiprintf_internal_r>:
 1807744:	deffc904 	addi	sp,sp,-220
 1807748:	df003515 	stw	fp,212(sp)
 180774c:	dd003115 	stw	r20,196(sp)
 1807750:	dfc03615 	stw	ra,216(sp)
 1807754:	ddc03415 	stw	r23,208(sp)
 1807758:	dd803315 	stw	r22,204(sp)
 180775c:	dd403215 	stw	r21,200(sp)
 1807760:	dcc03015 	stw	r19,192(sp)
 1807764:	dc802f15 	stw	r18,188(sp)
 1807768:	dc402e15 	stw	r17,184(sp)
 180776c:	dc002d15 	stw	r16,180(sp)
 1807770:	d9002015 	stw	r4,128(sp)
 1807774:	d9c02215 	stw	r7,136(sp)
 1807778:	2829883a 	mov	r20,r5
 180777c:	3039883a 	mov	fp,r6
 1807780:	20000226 	beq	r4,zero,180778c <___vfiprintf_internal_r+0x48>
 1807784:	20800e17 	ldw	r2,56(r4)
 1807788:	1000cf26 	beq	r2,zero,1807ac8 <___vfiprintf_internal_r+0x384>
 180778c:	a080030b 	ldhu	r2,12(r20)
 1807790:	10c8000c 	andi	r3,r2,8192
 1807794:	1800061e 	bne	r3,zero,18077b0 <___vfiprintf_internal_r+0x6c>
 1807798:	a1001917 	ldw	r4,100(r20)
 180779c:	00f7ffc4 	movi	r3,-8193
 18077a0:	10880014 	ori	r2,r2,8192
 18077a4:	20c6703a 	and	r3,r4,r3
 18077a8:	a080030d 	sth	r2,12(r20)
 18077ac:	a0c01915 	stw	r3,100(r20)
 18077b0:	10c0020c 	andi	r3,r2,8
 18077b4:	1800a926 	beq	r3,zero,1807a5c <___vfiprintf_internal_r+0x318>
 18077b8:	a0c00417 	ldw	r3,16(r20)
 18077bc:	1800a726 	beq	r3,zero,1807a5c <___vfiprintf_internal_r+0x318>
 18077c0:	1080068c 	andi	r2,r2,26
 18077c4:	00c00284 	movi	r3,10
 18077c8:	10c0ac26 	beq	r2,r3,1807a7c <___vfiprintf_internal_r+0x338>
 18077cc:	da801a04 	addi	r10,sp,104
 18077d0:	da801e15 	stw	r10,120(sp)
 18077d4:	d8801e17 	ldw	r2,120(sp)
 18077d8:	da8019c4 	addi	r10,sp,103
 18077dc:	05806134 	movhi	r22,388
 18077e0:	05c06134 	movhi	r23,388
 18077e4:	da801f15 	stw	r10,124(sp)
 18077e8:	1295c83a 	sub	r10,r2,r10
 18077ec:	b582ea04 	addi	r22,r22,2984
 18077f0:	bdc2e604 	addi	r23,r23,2968
 18077f4:	dec01a15 	stw	sp,104(sp)
 18077f8:	d8001c15 	stw	zero,112(sp)
 18077fc:	d8001b15 	stw	zero,108(sp)
 1807800:	d8002615 	stw	zero,152(sp)
 1807804:	d8002315 	stw	zero,140(sp)
 1807808:	da802715 	stw	r10,156(sp)
 180780c:	d811883a 	mov	r8,sp
 1807810:	dd002115 	stw	r20,132(sp)
 1807814:	e021883a 	mov	r16,fp
 1807818:	80800007 	ldb	r2,0(r16)
 180781c:	1003ea26 	beq	r2,zero,18087c8 <___vfiprintf_internal_r+0x1084>
 1807820:	00c00944 	movi	r3,37
 1807824:	8025883a 	mov	r18,r16
 1807828:	10c0021e 	bne	r2,r3,1807834 <___vfiprintf_internal_r+0xf0>
 180782c:	00001606 	br	1807888 <___vfiprintf_internal_r+0x144>
 1807830:	10c00326 	beq	r2,r3,1807840 <___vfiprintf_internal_r+0xfc>
 1807834:	94800044 	addi	r18,r18,1
 1807838:	90800007 	ldb	r2,0(r18)
 180783c:	103ffc1e 	bne	r2,zero,1807830 <__alt_mem_mem_0+0xff7e7830>
 1807840:	9423c83a 	sub	r17,r18,r16
 1807844:	88001026 	beq	r17,zero,1807888 <___vfiprintf_internal_r+0x144>
 1807848:	d8c01c17 	ldw	r3,112(sp)
 180784c:	d8801b17 	ldw	r2,108(sp)
 1807850:	44000015 	stw	r16,0(r8)
 1807854:	88c7883a 	add	r3,r17,r3
 1807858:	10800044 	addi	r2,r2,1
 180785c:	44400115 	stw	r17,4(r8)
 1807860:	d8c01c15 	stw	r3,112(sp)
 1807864:	d8801b15 	stw	r2,108(sp)
 1807868:	010001c4 	movi	r4,7
 180786c:	2080760e 	bge	r4,r2,1807a48 <___vfiprintf_internal_r+0x304>
 1807870:	1803821e 	bne	r3,zero,180867c <___vfiprintf_internal_r+0xf38>
 1807874:	da802317 	ldw	r10,140(sp)
 1807878:	d8001b15 	stw	zero,108(sp)
 180787c:	d811883a 	mov	r8,sp
 1807880:	5455883a 	add	r10,r10,r17
 1807884:	da802315 	stw	r10,140(sp)
 1807888:	90800007 	ldb	r2,0(r18)
 180788c:	10044626 	beq	r2,zero,18089a8 <___vfiprintf_internal_r+0x1264>
 1807890:	90c00047 	ldb	r3,1(r18)
 1807894:	94000044 	addi	r16,r18,1
 1807898:	d8001d85 	stb	zero,118(sp)
 180789c:	0009883a 	mov	r4,zero
 18078a0:	000f883a 	mov	r7,zero
 18078a4:	027fffc4 	movi	r9,-1
 18078a8:	0023883a 	mov	r17,zero
 18078ac:	0029883a 	mov	r20,zero
 18078b0:	01401604 	movi	r5,88
 18078b4:	01800244 	movi	r6,9
 18078b8:	03400a84 	movi	r13,42
 18078bc:	03001b04 	movi	r12,108
 18078c0:	84000044 	addi	r16,r16,1
 18078c4:	18bff804 	addi	r2,r3,-32
 18078c8:	28827336 	bltu	r5,r2,1808298 <___vfiprintf_internal_r+0xb54>
 18078cc:	100490ba 	slli	r2,r2,2
 18078d0:	02806034 	movhi	r10,384
 18078d4:	529e3904 	addi	r10,r10,30948
 18078d8:	1285883a 	add	r2,r2,r10
 18078dc:	10800017 	ldw	r2,0(r2)
 18078e0:	1000683a 	jmp	r2
 18078e4:	01807fcc 	andi	r6,zero,511
 18078e8:	01808298 	cmpnei	r6,zero,522
 18078ec:	01808298 	cmpnei	r6,zero,522
 18078f0:	01807fec 	andhi	r6,zero,511
 18078f4:	01808298 	cmpnei	r6,zero,522
 18078f8:	01808298 	cmpnei	r6,zero,522
 18078fc:	01808298 	cmpnei	r6,zero,522
 1807900:	01808298 	cmpnei	r6,zero,522
 1807904:	01808298 	cmpnei	r6,zero,522
 1807908:	01808298 	cmpnei	r6,zero,522
 180790c:	018081d4 	movui	r6,519
 1807910:	018081f0 	cmpltui	r6,zero,519
 1807914:	01808298 	cmpnei	r6,zero,522
 1807918:	01807ad8 	cmpnei	r6,zero,491
 180791c:	01808200 	call	180820 <__alt_mem_tse_descriptor_memory_0+0x180820>
 1807920:	01808298 	cmpnei	r6,zero,522
 1807924:	01807ff8 	rdprs	r6,zero,511
 1807928:	01808004 	movi	r6,512
 180792c:	01808004 	movi	r6,512
 1807930:	01808004 	movi	r6,512
 1807934:	01808004 	movi	r6,512
 1807938:	01808004 	movi	r6,512
 180793c:	01808004 	movi	r6,512
 1807940:	01808004 	movi	r6,512
 1807944:	01808004 	movi	r6,512
 1807948:	01808004 	movi	r6,512
 180794c:	01808298 	cmpnei	r6,zero,522
 1807950:	01808298 	cmpnei	r6,zero,522
 1807954:	01808298 	cmpnei	r6,zero,522
 1807958:	01808298 	cmpnei	r6,zero,522
 180795c:	01808298 	cmpnei	r6,zero,522
 1807960:	01808298 	cmpnei	r6,zero,522
 1807964:	01808298 	cmpnei	r6,zero,522
 1807968:	01808298 	cmpnei	r6,zero,522
 180796c:	01808298 	cmpnei	r6,zero,522
 1807970:	01808298 	cmpnei	r6,zero,522
 1807974:	01808030 	cmpltui	r6,zero,512
 1807978:	01808298 	cmpnei	r6,zero,522
 180797c:	01808298 	cmpnei	r6,zero,522
 1807980:	01808298 	cmpnei	r6,zero,522
 1807984:	01808298 	cmpnei	r6,zero,522
 1807988:	01808298 	cmpnei	r6,zero,522
 180798c:	01808298 	cmpnei	r6,zero,522
 1807990:	01808298 	cmpnei	r6,zero,522
 1807994:	01808298 	cmpnei	r6,zero,522
 1807998:	01808298 	cmpnei	r6,zero,522
 180799c:	01808298 	cmpnei	r6,zero,522
 18079a0:	01808068 	cmpgeui	r6,zero,513
 18079a4:	01808298 	cmpnei	r6,zero,522
 18079a8:	01808298 	cmpnei	r6,zero,522
 18079ac:	01808298 	cmpnei	r6,zero,522
 18079b0:	01808298 	cmpnei	r6,zero,522
 18079b4:	01808298 	cmpnei	r6,zero,522
 18079b8:	018080c0 	call	18080c <__alt_mem_tse_descriptor_memory_0+0x18080c>
 18079bc:	01808298 	cmpnei	r6,zero,522
 18079c0:	01808298 	cmpnei	r6,zero,522
 18079c4:	01808130 	cmpltui	r6,zero,516
 18079c8:	01808298 	cmpnei	r6,zero,522
 18079cc:	01808298 	cmpnei	r6,zero,522
 18079d0:	01808298 	cmpnei	r6,zero,522
 18079d4:	01808298 	cmpnei	r6,zero,522
 18079d8:	01808298 	cmpnei	r6,zero,522
 18079dc:	01808298 	cmpnei	r6,zero,522
 18079e0:	01808298 	cmpnei	r6,zero,522
 18079e4:	01808298 	cmpnei	r6,zero,522
 18079e8:	01808298 	cmpnei	r6,zero,522
 18079ec:	01808298 	cmpnei	r6,zero,522
 18079f0:	01807edc 	xori	r6,zero,507
 18079f4:	01807f08 	cmpgei	r6,zero,508
 18079f8:	01808298 	cmpnei	r6,zero,522
 18079fc:	01808298 	cmpnei	r6,zero,522
 1807a00:	01808298 	cmpnei	r6,zero,522
 1807a04:	01808240 	call	180824 <__alt_mem_tse_descriptor_memory_0+0x180824>
 1807a08:	01807f08 	cmpgei	r6,zero,508
 1807a0c:	01808298 	cmpnei	r6,zero,522
 1807a10:	01808298 	cmpnei	r6,zero,522
 1807a14:	01807d9c 	xori	r6,zero,502
 1807a18:	01808298 	cmpnei	r6,zero,522
 1807a1c:	01807dac 	andhi	r6,zero,502
 1807a20:	01807de8 	cmpgeui	r6,zero,503
 1807a24:	01807ae4 	muli	r6,zero,491
 1807a28:	01807d90 	cmplti	r6,zero,502
 1807a2c:	01808298 	cmpnei	r6,zero,522
 1807a30:	0180816c 	andhi	r6,zero,517
 1807a34:	01808298 	cmpnei	r6,zero,522
 1807a38:	018081c4 	movi	r6,519
 1807a3c:	01808298 	cmpnei	r6,zero,522
 1807a40:	01808298 	cmpnei	r6,zero,522
 1807a44:	01807e88 	cmpgei	r6,zero,506
 1807a48:	42000204 	addi	r8,r8,8
 1807a4c:	da802317 	ldw	r10,140(sp)
 1807a50:	5455883a 	add	r10,r10,r17
 1807a54:	da802315 	stw	r10,140(sp)
 1807a58:	003f8b06 	br	1807888 <__alt_mem_mem_0+0xff7e7888>
 1807a5c:	d9002017 	ldw	r4,128(sp)
 1807a60:	a00b883a 	mov	r5,r20
 1807a64:	1802ee40 	call	1802ee4 <__swsetup_r>
 1807a68:	1003b11e 	bne	r2,zero,1808930 <___vfiprintf_internal_r+0x11ec>
 1807a6c:	a080030b 	ldhu	r2,12(r20)
 1807a70:	00c00284 	movi	r3,10
 1807a74:	1080068c 	andi	r2,r2,26
 1807a78:	10ff541e 	bne	r2,r3,18077cc <__alt_mem_mem_0+0xff7e77cc>
 1807a7c:	a080038f 	ldh	r2,14(r20)
 1807a80:	103f5216 	blt	r2,zero,18077cc <__alt_mem_mem_0+0xff7e77cc>
 1807a84:	d9c02217 	ldw	r7,136(sp)
 1807a88:	d9002017 	ldw	r4,128(sp)
 1807a8c:	e00d883a 	mov	r6,fp
 1807a90:	a00b883a 	mov	r5,r20
 1807a94:	1808bbc0 	call	1808bbc <__sbprintf>
 1807a98:	dfc03617 	ldw	ra,216(sp)
 1807a9c:	df003517 	ldw	fp,212(sp)
 1807aa0:	ddc03417 	ldw	r23,208(sp)
 1807aa4:	dd803317 	ldw	r22,204(sp)
 1807aa8:	dd403217 	ldw	r21,200(sp)
 1807aac:	dd003117 	ldw	r20,196(sp)
 1807ab0:	dcc03017 	ldw	r19,192(sp)
 1807ab4:	dc802f17 	ldw	r18,188(sp)
 1807ab8:	dc402e17 	ldw	r17,184(sp)
 1807abc:	dc002d17 	ldw	r16,180(sp)
 1807ac0:	dec03704 	addi	sp,sp,220
 1807ac4:	f800283a 	ret
 1807ac8:	1804eb80 	call	1804eb8 <__sinit>
 1807acc:	003f2f06 	br	180778c <__alt_mem_mem_0+0xff7e778c>
 1807ad0:	0463c83a 	sub	r17,zero,r17
 1807ad4:	d8802215 	stw	r2,136(sp)
 1807ad8:	a5000114 	ori	r20,r20,4
 1807adc:	80c00007 	ldb	r3,0(r16)
 1807ae0:	003f7706 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 1807ae4:	00800c04 	movi	r2,48
 1807ae8:	da802217 	ldw	r10,136(sp)
 1807aec:	d8801d05 	stb	r2,116(sp)
 1807af0:	00801e04 	movi	r2,120
 1807af4:	d8801d45 	stb	r2,117(sp)
 1807af8:	d8001d85 	stb	zero,118(sp)
 1807afc:	50c00104 	addi	r3,r10,4
 1807b00:	54800017 	ldw	r18,0(r10)
 1807b04:	0027883a 	mov	r19,zero
 1807b08:	a0800094 	ori	r2,r20,2
 1807b0c:	48030b16 	blt	r9,zero,180873c <___vfiprintf_internal_r+0xff8>
 1807b10:	00bfdfc4 	movi	r2,-129
 1807b14:	a096703a 	and	r11,r20,r2
 1807b18:	d8c02215 	stw	r3,136(sp)
 1807b1c:	5d000094 	ori	r20,r11,2
 1807b20:	90032b1e 	bne	r18,zero,18087d0 <___vfiprintf_internal_r+0x108c>
 1807b24:	00806134 	movhi	r2,388
 1807b28:	10828504 	addi	r2,r2,2580
 1807b2c:	d8802615 	stw	r2,152(sp)
 1807b30:	0039883a 	mov	fp,zero
 1807b34:	48017b1e 	bne	r9,zero,1808124 <___vfiprintf_internal_r+0x9e0>
 1807b38:	0013883a 	mov	r9,zero
 1807b3c:	0027883a 	mov	r19,zero
 1807b40:	dd401a04 	addi	r21,sp,104
 1807b44:	4825883a 	mov	r18,r9
 1807b48:	4cc0010e 	bge	r9,r19,1807b50 <___vfiprintf_internal_r+0x40c>
 1807b4c:	9825883a 	mov	r18,r19
 1807b50:	e7003fcc 	andi	fp,fp,255
 1807b54:	e700201c 	xori	fp,fp,128
 1807b58:	e73fe004 	addi	fp,fp,-128
 1807b5c:	e0000126 	beq	fp,zero,1807b64 <___vfiprintf_internal_r+0x420>
 1807b60:	94800044 	addi	r18,r18,1
 1807b64:	a380008c 	andi	r14,r20,2
 1807b68:	70000126 	beq	r14,zero,1807b70 <___vfiprintf_internal_r+0x42c>
 1807b6c:	94800084 	addi	r18,r18,2
 1807b70:	a700210c 	andi	fp,r20,132
 1807b74:	e001df1e 	bne	fp,zero,18082f4 <___vfiprintf_internal_r+0xbb0>
 1807b78:	8c87c83a 	sub	r3,r17,r18
 1807b7c:	00c1dd0e 	bge	zero,r3,18082f4 <___vfiprintf_internal_r+0xbb0>
 1807b80:	01c00404 	movi	r7,16
 1807b84:	d8801c17 	ldw	r2,112(sp)
 1807b88:	38c3ad0e 	bge	r7,r3,1808a40 <___vfiprintf_internal_r+0x12fc>
 1807b8c:	02806134 	movhi	r10,388
 1807b90:	5282ea04 	addi	r10,r10,2984
 1807b94:	dc002915 	stw	r16,164(sp)
 1807b98:	d9801b17 	ldw	r6,108(sp)
 1807b9c:	da802415 	stw	r10,144(sp)
 1807ba0:	03c001c4 	movi	r15,7
 1807ba4:	da402515 	stw	r9,148(sp)
 1807ba8:	db802815 	stw	r14,160(sp)
 1807bac:	1821883a 	mov	r16,r3
 1807bb0:	00000506 	br	1807bc8 <___vfiprintf_internal_r+0x484>
 1807bb4:	31400084 	addi	r5,r6,2
 1807bb8:	42000204 	addi	r8,r8,8
 1807bbc:	200d883a 	mov	r6,r4
 1807bc0:	843ffc04 	addi	r16,r16,-16
 1807bc4:	3c000d0e 	bge	r7,r16,1807bfc <___vfiprintf_internal_r+0x4b8>
 1807bc8:	10800404 	addi	r2,r2,16
 1807bcc:	31000044 	addi	r4,r6,1
 1807bd0:	45800015 	stw	r22,0(r8)
 1807bd4:	41c00115 	stw	r7,4(r8)
 1807bd8:	d8801c15 	stw	r2,112(sp)
 1807bdc:	d9001b15 	stw	r4,108(sp)
 1807be0:	793ff40e 	bge	r15,r4,1807bb4 <__alt_mem_mem_0+0xff7e7bb4>
 1807be4:	1001b51e 	bne	r2,zero,18082bc <___vfiprintf_internal_r+0xb78>
 1807be8:	843ffc04 	addi	r16,r16,-16
 1807bec:	000d883a 	mov	r6,zero
 1807bf0:	01400044 	movi	r5,1
 1807bf4:	d811883a 	mov	r8,sp
 1807bf8:	3c3ff316 	blt	r7,r16,1807bc8 <__alt_mem_mem_0+0xff7e7bc8>
 1807bfc:	8007883a 	mov	r3,r16
 1807c00:	da402517 	ldw	r9,148(sp)
 1807c04:	db802817 	ldw	r14,160(sp)
 1807c08:	dc002917 	ldw	r16,164(sp)
 1807c0c:	da802417 	ldw	r10,144(sp)
 1807c10:	1885883a 	add	r2,r3,r2
 1807c14:	40c00115 	stw	r3,4(r8)
 1807c18:	42800015 	stw	r10,0(r8)
 1807c1c:	d8801c15 	stw	r2,112(sp)
 1807c20:	d9401b15 	stw	r5,108(sp)
 1807c24:	00c001c4 	movi	r3,7
 1807c28:	19426016 	blt	r3,r5,18085ac <___vfiprintf_internal_r+0xe68>
 1807c2c:	d8c01d87 	ldb	r3,118(sp)
 1807c30:	42000204 	addi	r8,r8,8
 1807c34:	29000044 	addi	r4,r5,1
 1807c38:	1801b31e 	bne	r3,zero,1808308 <___vfiprintf_internal_r+0xbc4>
 1807c3c:	7001c026 	beq	r14,zero,1808340 <___vfiprintf_internal_r+0xbfc>
 1807c40:	d8c01d04 	addi	r3,sp,116
 1807c44:	10800084 	addi	r2,r2,2
 1807c48:	40c00015 	stw	r3,0(r8)
 1807c4c:	00c00084 	movi	r3,2
 1807c50:	40c00115 	stw	r3,4(r8)
 1807c54:	d8801c15 	stw	r2,112(sp)
 1807c58:	d9001b15 	stw	r4,108(sp)
 1807c5c:	00c001c4 	movi	r3,7
 1807c60:	1902650e 	bge	r3,r4,18085f8 <___vfiprintf_internal_r+0xeb4>
 1807c64:	10029a1e 	bne	r2,zero,18086d0 <___vfiprintf_internal_r+0xf8c>
 1807c68:	00c02004 	movi	r3,128
 1807c6c:	01000044 	movi	r4,1
 1807c70:	000b883a 	mov	r5,zero
 1807c74:	d811883a 	mov	r8,sp
 1807c78:	e0c1b31e 	bne	fp,r3,1808348 <___vfiprintf_internal_r+0xc04>
 1807c7c:	8cb9c83a 	sub	fp,r17,r18
 1807c80:	0701b10e 	bge	zero,fp,1808348 <___vfiprintf_internal_r+0xc04>
 1807c84:	01c00404 	movi	r7,16
 1807c88:	3f03890e 	bge	r7,fp,1808ab0 <___vfiprintf_internal_r+0x136c>
 1807c8c:	00c06134 	movhi	r3,388
 1807c90:	18c2e604 	addi	r3,r3,2968
 1807c94:	d8c02415 	stw	r3,144(sp)
 1807c98:	8007883a 	mov	r3,r16
 1807c9c:	034001c4 	movi	r13,7
 1807ca0:	e021883a 	mov	r16,fp
 1807ca4:	da402515 	stw	r9,148(sp)
 1807ca8:	1839883a 	mov	fp,r3
 1807cac:	00000506 	br	1807cc4 <___vfiprintf_internal_r+0x580>
 1807cb0:	29800084 	addi	r6,r5,2
 1807cb4:	42000204 	addi	r8,r8,8
 1807cb8:	180b883a 	mov	r5,r3
 1807cbc:	843ffc04 	addi	r16,r16,-16
 1807cc0:	3c000d0e 	bge	r7,r16,1807cf8 <___vfiprintf_internal_r+0x5b4>
 1807cc4:	10800404 	addi	r2,r2,16
 1807cc8:	28c00044 	addi	r3,r5,1
 1807ccc:	45c00015 	stw	r23,0(r8)
 1807cd0:	41c00115 	stw	r7,4(r8)
 1807cd4:	d8801c15 	stw	r2,112(sp)
 1807cd8:	d8c01b15 	stw	r3,108(sp)
 1807cdc:	68fff40e 	bge	r13,r3,1807cb0 <__alt_mem_mem_0+0xff7e7cb0>
 1807ce0:	1002241e 	bne	r2,zero,1808574 <___vfiprintf_internal_r+0xe30>
 1807ce4:	843ffc04 	addi	r16,r16,-16
 1807ce8:	01800044 	movi	r6,1
 1807cec:	000b883a 	mov	r5,zero
 1807cf0:	d811883a 	mov	r8,sp
 1807cf4:	3c3ff316 	blt	r7,r16,1807cc4 <__alt_mem_mem_0+0xff7e7cc4>
 1807cf8:	da402517 	ldw	r9,148(sp)
 1807cfc:	e007883a 	mov	r3,fp
 1807d00:	8039883a 	mov	fp,r16
 1807d04:	1821883a 	mov	r16,r3
 1807d08:	d8c02417 	ldw	r3,144(sp)
 1807d0c:	1705883a 	add	r2,r2,fp
 1807d10:	47000115 	stw	fp,4(r8)
 1807d14:	40c00015 	stw	r3,0(r8)
 1807d18:	d8801c15 	stw	r2,112(sp)
 1807d1c:	d9801b15 	stw	r6,108(sp)
 1807d20:	00c001c4 	movi	r3,7
 1807d24:	19827616 	blt	r3,r6,1808700 <___vfiprintf_internal_r+0xfbc>
 1807d28:	4cf9c83a 	sub	fp,r9,r19
 1807d2c:	42000204 	addi	r8,r8,8
 1807d30:	31000044 	addi	r4,r6,1
 1807d34:	300b883a 	mov	r5,r6
 1807d38:	07018516 	blt	zero,fp,1808350 <___vfiprintf_internal_r+0xc0c>
 1807d3c:	9885883a 	add	r2,r19,r2
 1807d40:	45400015 	stw	r21,0(r8)
 1807d44:	44c00115 	stw	r19,4(r8)
 1807d48:	d8801c15 	stw	r2,112(sp)
 1807d4c:	d9001b15 	stw	r4,108(sp)
 1807d50:	00c001c4 	movi	r3,7
 1807d54:	1901dd0e 	bge	r3,r4,18084cc <___vfiprintf_internal_r+0xd88>
 1807d58:	1002401e 	bne	r2,zero,180865c <___vfiprintf_internal_r+0xf18>
 1807d5c:	d8001b15 	stw	zero,108(sp)
 1807d60:	a2c0010c 	andi	r11,r20,4
 1807d64:	58000226 	beq	r11,zero,1807d70 <___vfiprintf_internal_r+0x62c>
 1807d68:	8ca7c83a 	sub	r19,r17,r18
 1807d6c:	04c2f216 	blt	zero,r19,1808938 <___vfiprintf_internal_r+0x11f4>
 1807d70:	8c80010e 	bge	r17,r18,1807d78 <___vfiprintf_internal_r+0x634>
 1807d74:	9023883a 	mov	r17,r18
 1807d78:	da802317 	ldw	r10,140(sp)
 1807d7c:	5455883a 	add	r10,r10,r17
 1807d80:	da802315 	stw	r10,140(sp)
 1807d84:	d8001b15 	stw	zero,108(sp)
 1807d88:	d811883a 	mov	r8,sp
 1807d8c:	003ea206 	br	1807818 <__alt_mem_mem_0+0xff7e7818>
 1807d90:	a5000814 	ori	r20,r20,32
 1807d94:	80c00007 	ldb	r3,0(r16)
 1807d98:	003ec906 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 1807d9c:	80c00007 	ldb	r3,0(r16)
 1807da0:	1b030926 	beq	r3,r12,18089c8 <___vfiprintf_internal_r+0x1284>
 1807da4:	a5000414 	ori	r20,r20,16
 1807da8:	003ec506 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 1807dac:	21003fcc 	andi	r4,r4,255
 1807db0:	20035e1e 	bne	r4,zero,1808b2c <___vfiprintf_internal_r+0x13e8>
 1807db4:	a080080c 	andi	r2,r20,32
 1807db8:	1002a526 	beq	r2,zero,1808850 <___vfiprintf_internal_r+0x110c>
 1807dbc:	da802217 	ldw	r10,136(sp)
 1807dc0:	50800017 	ldw	r2,0(r10)
 1807dc4:	da802317 	ldw	r10,140(sp)
 1807dc8:	5007d7fa 	srai	r3,r10,31
 1807dcc:	da802217 	ldw	r10,136(sp)
 1807dd0:	10c00115 	stw	r3,4(r2)
 1807dd4:	52800104 	addi	r10,r10,4
 1807dd8:	da802215 	stw	r10,136(sp)
 1807ddc:	da802317 	ldw	r10,140(sp)
 1807de0:	12800015 	stw	r10,0(r2)
 1807de4:	003e8c06 	br	1807818 <__alt_mem_mem_0+0xff7e7818>
 1807de8:	21003fcc 	andi	r4,r4,255
 1807dec:	2003511e 	bne	r4,zero,1808b34 <___vfiprintf_internal_r+0x13f0>
 1807df0:	a080080c 	andi	r2,r20,32
 1807df4:	1000a126 	beq	r2,zero,180807c <___vfiprintf_internal_r+0x938>
 1807df8:	da802217 	ldw	r10,136(sp)
 1807dfc:	d8001d85 	stb	zero,118(sp)
 1807e00:	50800204 	addi	r2,r10,8
 1807e04:	54800017 	ldw	r18,0(r10)
 1807e08:	54c00117 	ldw	r19,4(r10)
 1807e0c:	4802b416 	blt	r9,zero,18088e0 <___vfiprintf_internal_r+0x119c>
 1807e10:	013fdfc4 	movi	r4,-129
 1807e14:	94c6b03a 	or	r3,r18,r19
 1807e18:	d8802215 	stw	r2,136(sp)
 1807e1c:	a128703a 	and	r20,r20,r4
 1807e20:	1800a226 	beq	r3,zero,18080ac <___vfiprintf_internal_r+0x968>
 1807e24:	0039883a 	mov	fp,zero
 1807e28:	dd401a04 	addi	r21,sp,104
 1807e2c:	9006d0fa 	srli	r3,r18,3
 1807e30:	9808977a 	slli	r4,r19,29
 1807e34:	9826d0fa 	srli	r19,r19,3
 1807e38:	948001cc 	andi	r18,r18,7
 1807e3c:	90800c04 	addi	r2,r18,48
 1807e40:	ad7fffc4 	addi	r21,r21,-1
 1807e44:	20e4b03a 	or	r18,r4,r3
 1807e48:	a8800005 	stb	r2,0(r21)
 1807e4c:	94c6b03a 	or	r3,r18,r19
 1807e50:	183ff61e 	bne	r3,zero,1807e2c <__alt_mem_mem_0+0xff7e7e2c>
 1807e54:	a0c0004c 	andi	r3,r20,1
 1807e58:	18005926 	beq	r3,zero,1807fc0 <___vfiprintf_internal_r+0x87c>
 1807e5c:	10803fcc 	andi	r2,r2,255
 1807e60:	1080201c 	xori	r2,r2,128
 1807e64:	10bfe004 	addi	r2,r2,-128
 1807e68:	00c00c04 	movi	r3,48
 1807e6c:	10c05426 	beq	r2,r3,1807fc0 <___vfiprintf_internal_r+0x87c>
 1807e70:	da801e17 	ldw	r10,120(sp)
 1807e74:	a8bfffc4 	addi	r2,r21,-1
 1807e78:	a8ffffc5 	stb	r3,-1(r21)
 1807e7c:	50a7c83a 	sub	r19,r10,r2
 1807e80:	102b883a 	mov	r21,r2
 1807e84:	003f2f06 	br	1807b44 <__alt_mem_mem_0+0xff7e7b44>
 1807e88:	21003fcc 	andi	r4,r4,255
 1807e8c:	2003421e 	bne	r4,zero,1808b98 <___vfiprintf_internal_r+0x1454>
 1807e90:	00806134 	movhi	r2,388
 1807e94:	10828504 	addi	r2,r2,2580
 1807e98:	d8802615 	stw	r2,152(sp)
 1807e9c:	a080080c 	andi	r2,r20,32
 1807ea0:	1000aa26 	beq	r2,zero,180814c <___vfiprintf_internal_r+0xa08>
 1807ea4:	da802217 	ldw	r10,136(sp)
 1807ea8:	54800017 	ldw	r18,0(r10)
 1807eac:	54c00117 	ldw	r19,4(r10)
 1807eb0:	52800204 	addi	r10,r10,8
 1807eb4:	da802215 	stw	r10,136(sp)
 1807eb8:	a080004c 	andi	r2,r20,1
 1807ebc:	1001d226 	beq	r2,zero,1808608 <___vfiprintf_internal_r+0xec4>
 1807ec0:	94c4b03a 	or	r2,r18,r19
 1807ec4:	1002351e 	bne	r2,zero,180879c <___vfiprintf_internal_r+0x1058>
 1807ec8:	d8001d85 	stb	zero,118(sp)
 1807ecc:	48022216 	blt	r9,zero,1808758 <___vfiprintf_internal_r+0x1014>
 1807ed0:	00bfdfc4 	movi	r2,-129
 1807ed4:	a0a8703a 	and	r20,r20,r2
 1807ed8:	003f1506 	br	1807b30 <__alt_mem_mem_0+0xff7e7b30>
 1807edc:	da802217 	ldw	r10,136(sp)
 1807ee0:	04800044 	movi	r18,1
 1807ee4:	d8001d85 	stb	zero,118(sp)
 1807ee8:	50800017 	ldw	r2,0(r10)
 1807eec:	52800104 	addi	r10,r10,4
 1807ef0:	da802215 	stw	r10,136(sp)
 1807ef4:	d8801005 	stb	r2,64(sp)
 1807ef8:	9027883a 	mov	r19,r18
 1807efc:	dd401004 	addi	r21,sp,64
 1807f00:	0013883a 	mov	r9,zero
 1807f04:	003f1706 	br	1807b64 <__alt_mem_mem_0+0xff7e7b64>
 1807f08:	21003fcc 	andi	r4,r4,255
 1807f0c:	2003201e 	bne	r4,zero,1808b90 <___vfiprintf_internal_r+0x144c>
 1807f10:	a080080c 	andi	r2,r20,32
 1807f14:	10004b26 	beq	r2,zero,1808044 <___vfiprintf_internal_r+0x900>
 1807f18:	da802217 	ldw	r10,136(sp)
 1807f1c:	50800117 	ldw	r2,4(r10)
 1807f20:	54800017 	ldw	r18,0(r10)
 1807f24:	52800204 	addi	r10,r10,8
 1807f28:	da802215 	stw	r10,136(sp)
 1807f2c:	1027883a 	mov	r19,r2
 1807f30:	10022c16 	blt	r2,zero,18087e4 <___vfiprintf_internal_r+0x10a0>
 1807f34:	df001d83 	ldbu	fp,118(sp)
 1807f38:	48007216 	blt	r9,zero,1808104 <___vfiprintf_internal_r+0x9c0>
 1807f3c:	00ffdfc4 	movi	r3,-129
 1807f40:	94c4b03a 	or	r2,r18,r19
 1807f44:	a0e8703a 	and	r20,r20,r3
 1807f48:	1000cc26 	beq	r2,zero,180827c <___vfiprintf_internal_r+0xb38>
 1807f4c:	98021026 	beq	r19,zero,1808790 <___vfiprintf_internal_r+0x104c>
 1807f50:	dc402415 	stw	r17,144(sp)
 1807f54:	dc002515 	stw	r16,148(sp)
 1807f58:	9823883a 	mov	r17,r19
 1807f5c:	9021883a 	mov	r16,r18
 1807f60:	dd401a04 	addi	r21,sp,104
 1807f64:	4825883a 	mov	r18,r9
 1807f68:	4027883a 	mov	r19,r8
 1807f6c:	8009883a 	mov	r4,r16
 1807f70:	880b883a 	mov	r5,r17
 1807f74:	01800284 	movi	r6,10
 1807f78:	000f883a 	mov	r7,zero
 1807f7c:	180a6a00 	call	180a6a0 <__umoddi3>
 1807f80:	10800c04 	addi	r2,r2,48
 1807f84:	ad7fffc4 	addi	r21,r21,-1
 1807f88:	8009883a 	mov	r4,r16
 1807f8c:	880b883a 	mov	r5,r17
 1807f90:	a8800005 	stb	r2,0(r21)
 1807f94:	01800284 	movi	r6,10
 1807f98:	000f883a 	mov	r7,zero
 1807f9c:	180a1280 	call	180a128 <__udivdi3>
 1807fa0:	1021883a 	mov	r16,r2
 1807fa4:	10c4b03a 	or	r2,r2,r3
 1807fa8:	1823883a 	mov	r17,r3
 1807fac:	103fef1e 	bne	r2,zero,1807f6c <__alt_mem_mem_0+0xff7e7f6c>
 1807fb0:	dc402417 	ldw	r17,144(sp)
 1807fb4:	dc002517 	ldw	r16,148(sp)
 1807fb8:	9013883a 	mov	r9,r18
 1807fbc:	9811883a 	mov	r8,r19
 1807fc0:	da801e17 	ldw	r10,120(sp)
 1807fc4:	5567c83a 	sub	r19,r10,r21
 1807fc8:	003ede06 	br	1807b44 <__alt_mem_mem_0+0xff7e7b44>
 1807fcc:	38803fcc 	andi	r2,r7,255
 1807fd0:	1080201c 	xori	r2,r2,128
 1807fd4:	10bfe004 	addi	r2,r2,-128
 1807fd8:	1002371e 	bne	r2,zero,18088b8 <___vfiprintf_internal_r+0x1174>
 1807fdc:	01000044 	movi	r4,1
 1807fe0:	01c00804 	movi	r7,32
 1807fe4:	80c00007 	ldb	r3,0(r16)
 1807fe8:	003e3506 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 1807fec:	a5000054 	ori	r20,r20,1
 1807ff0:	80c00007 	ldb	r3,0(r16)
 1807ff4:	003e3206 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 1807ff8:	a5002014 	ori	r20,r20,128
 1807ffc:	80c00007 	ldb	r3,0(r16)
 1808000:	003e2f06 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 1808004:	8015883a 	mov	r10,r16
 1808008:	0023883a 	mov	r17,zero
 180800c:	18bff404 	addi	r2,r3,-48
 1808010:	50c00007 	ldb	r3,0(r10)
 1808014:	8c4002a4 	muli	r17,r17,10
 1808018:	84000044 	addi	r16,r16,1
 180801c:	8015883a 	mov	r10,r16
 1808020:	1463883a 	add	r17,r2,r17
 1808024:	18bff404 	addi	r2,r3,-48
 1808028:	30bff92e 	bgeu	r6,r2,1808010 <__alt_mem_mem_0+0xff7e8010>
 180802c:	003e2506 	br	18078c4 <__alt_mem_mem_0+0xff7e78c4>
 1808030:	21003fcc 	andi	r4,r4,255
 1808034:	2002d41e 	bne	r4,zero,1808b88 <___vfiprintf_internal_r+0x1444>
 1808038:	a5000414 	ori	r20,r20,16
 180803c:	a080080c 	andi	r2,r20,32
 1808040:	103fb51e 	bne	r2,zero,1807f18 <__alt_mem_mem_0+0xff7e7f18>
 1808044:	a080040c 	andi	r2,r20,16
 1808048:	1001f826 	beq	r2,zero,180882c <___vfiprintf_internal_r+0x10e8>
 180804c:	da802217 	ldw	r10,136(sp)
 1808050:	54800017 	ldw	r18,0(r10)
 1808054:	52800104 	addi	r10,r10,4
 1808058:	da802215 	stw	r10,136(sp)
 180805c:	9027d7fa 	srai	r19,r18,31
 1808060:	9805883a 	mov	r2,r19
 1808064:	003fb206 	br	1807f30 <__alt_mem_mem_0+0xff7e7f30>
 1808068:	21003fcc 	andi	r4,r4,255
 180806c:	2002c41e 	bne	r4,zero,1808b80 <___vfiprintf_internal_r+0x143c>
 1808070:	a5000414 	ori	r20,r20,16
 1808074:	a080080c 	andi	r2,r20,32
 1808078:	103f5f1e 	bne	r2,zero,1807df8 <__alt_mem_mem_0+0xff7e7df8>
 180807c:	a080040c 	andi	r2,r20,16
 1808080:	10020f26 	beq	r2,zero,18088c0 <___vfiprintf_internal_r+0x117c>
 1808084:	da802217 	ldw	r10,136(sp)
 1808088:	d8001d85 	stb	zero,118(sp)
 180808c:	0027883a 	mov	r19,zero
 1808090:	50800104 	addi	r2,r10,4
 1808094:	54800017 	ldw	r18,0(r10)
 1808098:	48021116 	blt	r9,zero,18088e0 <___vfiprintf_internal_r+0x119c>
 180809c:	00ffdfc4 	movi	r3,-129
 18080a0:	d8802215 	stw	r2,136(sp)
 18080a4:	a0e8703a 	and	r20,r20,r3
 18080a8:	903f5e1e 	bne	r18,zero,1807e24 <__alt_mem_mem_0+0xff7e7e24>
 18080ac:	0039883a 	mov	fp,zero
 18080b0:	4802a626 	beq	r9,zero,1808b4c <___vfiprintf_internal_r+0x1408>
 18080b4:	0025883a 	mov	r18,zero
 18080b8:	0027883a 	mov	r19,zero
 18080bc:	003f5a06 	br	1807e28 <__alt_mem_mem_0+0xff7e7e28>
 18080c0:	21003fcc 	andi	r4,r4,255
 18080c4:	20029f1e 	bne	r4,zero,1808b44 <___vfiprintf_internal_r+0x1400>
 18080c8:	a5000414 	ori	r20,r20,16
 18080cc:	a080080c 	andi	r2,r20,32
 18080d0:	10005e1e 	bne	r2,zero,180824c <___vfiprintf_internal_r+0xb08>
 18080d4:	a080040c 	andi	r2,r20,16
 18080d8:	1001a21e 	bne	r2,zero,1808764 <___vfiprintf_internal_r+0x1020>
 18080dc:	a080100c 	andi	r2,r20,64
 18080e0:	d8001d85 	stb	zero,118(sp)
 18080e4:	da802217 	ldw	r10,136(sp)
 18080e8:	1002231e 	bne	r2,zero,1808978 <___vfiprintf_internal_r+0x1234>
 18080ec:	50800104 	addi	r2,r10,4
 18080f0:	54800017 	ldw	r18,0(r10)
 18080f4:	0027883a 	mov	r19,zero
 18080f8:	4801a00e 	bge	r9,zero,180877c <___vfiprintf_internal_r+0x1038>
 18080fc:	d8802215 	stw	r2,136(sp)
 1808100:	0039883a 	mov	fp,zero
 1808104:	94c4b03a 	or	r2,r18,r19
 1808108:	103f901e 	bne	r2,zero,1807f4c <__alt_mem_mem_0+0xff7e7f4c>
 180810c:	00800044 	movi	r2,1
 1808110:	10803fcc 	andi	r2,r2,255
 1808114:	00c00044 	movi	r3,1
 1808118:	10c05926 	beq	r2,r3,1808280 <___vfiprintf_internal_r+0xb3c>
 180811c:	00c00084 	movi	r3,2
 1808120:	10ffe41e 	bne	r2,r3,18080b4 <__alt_mem_mem_0+0xff7e80b4>
 1808124:	0025883a 	mov	r18,zero
 1808128:	0027883a 	mov	r19,zero
 180812c:	00013d06 	br	1808624 <___vfiprintf_internal_r+0xee0>
 1808130:	21003fcc 	andi	r4,r4,255
 1808134:	2002811e 	bne	r4,zero,1808b3c <___vfiprintf_internal_r+0x13f8>
 1808138:	00806134 	movhi	r2,388
 180813c:	10828004 	addi	r2,r2,2560
 1808140:	d8802615 	stw	r2,152(sp)
 1808144:	a080080c 	andi	r2,r20,32
 1808148:	103f561e 	bne	r2,zero,1807ea4 <__alt_mem_mem_0+0xff7e7ea4>
 180814c:	a080040c 	andi	r2,r20,16
 1808150:	1001d126 	beq	r2,zero,1808898 <___vfiprintf_internal_r+0x1154>
 1808154:	da802217 	ldw	r10,136(sp)
 1808158:	0027883a 	mov	r19,zero
 180815c:	54800017 	ldw	r18,0(r10)
 1808160:	52800104 	addi	r10,r10,4
 1808164:	da802215 	stw	r10,136(sp)
 1808168:	003f5306 	br	1807eb8 <__alt_mem_mem_0+0xff7e7eb8>
 180816c:	da802217 	ldw	r10,136(sp)
 1808170:	d8001d85 	stb	zero,118(sp)
 1808174:	55400017 	ldw	r21,0(r10)
 1808178:	50c00104 	addi	r3,r10,4
 180817c:	a8024226 	beq	r21,zero,1808a88 <___vfiprintf_internal_r+0x1344>
 1808180:	48021816 	blt	r9,zero,18089e4 <___vfiprintf_internal_r+0x12a0>
 1808184:	480d883a 	mov	r6,r9
 1808188:	000b883a 	mov	r5,zero
 180818c:	a809883a 	mov	r4,r21
 1808190:	d8c02a15 	stw	r3,168(sp)
 1808194:	da002b15 	stw	r8,172(sp)
 1808198:	da402c15 	stw	r9,176(sp)
 180819c:	1805f680 	call	1805f68 <memchr>
 18081a0:	d8c02a17 	ldw	r3,168(sp)
 18081a4:	da002b17 	ldw	r8,172(sp)
 18081a8:	da402c17 	ldw	r9,176(sp)
 18081ac:	10024826 	beq	r2,zero,1808ad0 <___vfiprintf_internal_r+0x138c>
 18081b0:	1567c83a 	sub	r19,r2,r21
 18081b4:	df001d83 	ldbu	fp,118(sp)
 18081b8:	d8c02215 	stw	r3,136(sp)
 18081bc:	0013883a 	mov	r9,zero
 18081c0:	003e6006 	br	1807b44 <__alt_mem_mem_0+0xff7e7b44>
 18081c4:	21003fcc 	andi	r4,r4,255
 18081c8:	203fc026 	beq	r4,zero,18080cc <__alt_mem_mem_0+0xff7e80cc>
 18081cc:	d9c01d85 	stb	r7,118(sp)
 18081d0:	003fbe06 	br	18080cc <__alt_mem_mem_0+0xff7e80cc>
 18081d4:	da802217 	ldw	r10,136(sp)
 18081d8:	54400017 	ldw	r17,0(r10)
 18081dc:	50800104 	addi	r2,r10,4
 18081e0:	883e3b16 	blt	r17,zero,1807ad0 <__alt_mem_mem_0+0xff7e7ad0>
 18081e4:	d8802215 	stw	r2,136(sp)
 18081e8:	80c00007 	ldb	r3,0(r16)
 18081ec:	003db406 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 18081f0:	01000044 	movi	r4,1
 18081f4:	01c00ac4 	movi	r7,43
 18081f8:	80c00007 	ldb	r3,0(r16)
 18081fc:	003db006 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 1808200:	80c00007 	ldb	r3,0(r16)
 1808204:	82800044 	addi	r10,r16,1
 1808208:	1b423c26 	beq	r3,r13,1808afc <___vfiprintf_internal_r+0x13b8>
 180820c:	18bff404 	addi	r2,r3,-48
 1808210:	0013883a 	mov	r9,zero
 1808214:	30822b36 	bltu	r6,r2,1808ac4 <___vfiprintf_internal_r+0x1380>
 1808218:	50c00007 	ldb	r3,0(r10)
 180821c:	4a4002a4 	muli	r9,r9,10
 1808220:	54000044 	addi	r16,r10,1
 1808224:	8015883a 	mov	r10,r16
 1808228:	4893883a 	add	r9,r9,r2
 180822c:	18bff404 	addi	r2,r3,-48
 1808230:	30bff92e 	bgeu	r6,r2,1808218 <__alt_mem_mem_0+0xff7e8218>
 1808234:	483da30e 	bge	r9,zero,18078c4 <__alt_mem_mem_0+0xff7e78c4>
 1808238:	027fffc4 	movi	r9,-1
 180823c:	003da106 	br	18078c4 <__alt_mem_mem_0+0xff7e78c4>
 1808240:	a5001014 	ori	r20,r20,64
 1808244:	80c00007 	ldb	r3,0(r16)
 1808248:	003d9d06 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 180824c:	da802217 	ldw	r10,136(sp)
 1808250:	d8001d85 	stb	zero,118(sp)
 1808254:	50c00204 	addi	r3,r10,8
 1808258:	54800017 	ldw	r18,0(r10)
 180825c:	54c00117 	ldw	r19,4(r10)
 1808260:	4801ca16 	blt	r9,zero,180898c <___vfiprintf_internal_r+0x1248>
 1808264:	013fdfc4 	movi	r4,-129
 1808268:	94c4b03a 	or	r2,r18,r19
 180826c:	d8c02215 	stw	r3,136(sp)
 1808270:	a128703a 	and	r20,r20,r4
 1808274:	0039883a 	mov	fp,zero
 1808278:	103f341e 	bne	r2,zero,1807f4c <__alt_mem_mem_0+0xff7e7f4c>
 180827c:	483e2e26 	beq	r9,zero,1807b38 <__alt_mem_mem_0+0xff7e7b38>
 1808280:	0025883a 	mov	r18,zero
 1808284:	94800c04 	addi	r18,r18,48
 1808288:	dc8019c5 	stb	r18,103(sp)
 180828c:	dcc02717 	ldw	r19,156(sp)
 1808290:	dd4019c4 	addi	r21,sp,103
 1808294:	003e2b06 	br	1807b44 <__alt_mem_mem_0+0xff7e7b44>
 1808298:	21003fcc 	andi	r4,r4,255
 180829c:	2002361e 	bne	r4,zero,1808b78 <___vfiprintf_internal_r+0x1434>
 18082a0:	1801c126 	beq	r3,zero,18089a8 <___vfiprintf_internal_r+0x1264>
 18082a4:	04800044 	movi	r18,1
 18082a8:	d8c01005 	stb	r3,64(sp)
 18082ac:	d8001d85 	stb	zero,118(sp)
 18082b0:	9027883a 	mov	r19,r18
 18082b4:	dd401004 	addi	r21,sp,64
 18082b8:	003f1106 	br	1807f00 <__alt_mem_mem_0+0xff7e7f00>
 18082bc:	d9402117 	ldw	r5,132(sp)
 18082c0:	d9002017 	ldw	r4,128(sp)
 18082c4:	d9801a04 	addi	r6,sp,104
 18082c8:	d9c02b15 	stw	r7,172(sp)
 18082cc:	dbc02a15 	stw	r15,168(sp)
 18082d0:	18076300 	call	1807630 <__sprint_r.part.0>
 18082d4:	d9c02b17 	ldw	r7,172(sp)
 18082d8:	dbc02a17 	ldw	r15,168(sp)
 18082dc:	10006d1e 	bne	r2,zero,1808494 <___vfiprintf_internal_r+0xd50>
 18082e0:	d9801b17 	ldw	r6,108(sp)
 18082e4:	d8801c17 	ldw	r2,112(sp)
 18082e8:	d811883a 	mov	r8,sp
 18082ec:	31400044 	addi	r5,r6,1
 18082f0:	003e3306 	br	1807bc0 <__alt_mem_mem_0+0xff7e7bc0>
 18082f4:	d9401b17 	ldw	r5,108(sp)
 18082f8:	d8801c17 	ldw	r2,112(sp)
 18082fc:	29000044 	addi	r4,r5,1
 1808300:	d8c01d87 	ldb	r3,118(sp)
 1808304:	183e4d26 	beq	r3,zero,1807c3c <__alt_mem_mem_0+0xff7e7c3c>
 1808308:	00c00044 	movi	r3,1
 180830c:	d9401d84 	addi	r5,sp,118
 1808310:	10c5883a 	add	r2,r2,r3
 1808314:	41400015 	stw	r5,0(r8)
 1808318:	40c00115 	stw	r3,4(r8)
 180831c:	d8801c15 	stw	r2,112(sp)
 1808320:	d9001b15 	stw	r4,108(sp)
 1808324:	014001c4 	movi	r5,7
 1808328:	2900a90e 	bge	r5,r4,18085d0 <___vfiprintf_internal_r+0xe8c>
 180832c:	1000da1e 	bne	r2,zero,1808698 <___vfiprintf_internal_r+0xf54>
 1808330:	7000ab1e 	bne	r14,zero,18085e0 <___vfiprintf_internal_r+0xe9c>
 1808334:	000b883a 	mov	r5,zero
 1808338:	1809883a 	mov	r4,r3
 180833c:	d811883a 	mov	r8,sp
 1808340:	00c02004 	movi	r3,128
 1808344:	e0fe4d26 	beq	fp,r3,1807c7c <__alt_mem_mem_0+0xff7e7c7c>
 1808348:	4cf9c83a 	sub	fp,r9,r19
 180834c:	073e7b0e 	bge	zero,fp,1807d3c <__alt_mem_mem_0+0xff7e7d3c>
 1808350:	01c00404 	movi	r7,16
 1808354:	3f01900e 	bge	r7,fp,1808998 <___vfiprintf_internal_r+0x1254>
 1808358:	00c06134 	movhi	r3,388
 180835c:	18c2e604 	addi	r3,r3,2968
 1808360:	d8c02415 	stw	r3,144(sp)
 1808364:	034001c4 	movi	r13,7
 1808368:	00000506 	br	1808380 <___vfiprintf_internal_r+0xc3c>
 180836c:	29000084 	addi	r4,r5,2
 1808370:	42000204 	addi	r8,r8,8
 1808374:	180b883a 	mov	r5,r3
 1808378:	e73ffc04 	addi	fp,fp,-16
 180837c:	3f000d0e 	bge	r7,fp,18083b4 <___vfiprintf_internal_r+0xc70>
 1808380:	10800404 	addi	r2,r2,16
 1808384:	28c00044 	addi	r3,r5,1
 1808388:	45c00015 	stw	r23,0(r8)
 180838c:	41c00115 	stw	r7,4(r8)
 1808390:	d8801c15 	stw	r2,112(sp)
 1808394:	d8c01b15 	stw	r3,108(sp)
 1808398:	68fff40e 	bge	r13,r3,180836c <__alt_mem_mem_0+0xff7e836c>
 180839c:	1000101e 	bne	r2,zero,18083e0 <___vfiprintf_internal_r+0xc9c>
 18083a0:	e73ffc04 	addi	fp,fp,-16
 18083a4:	01000044 	movi	r4,1
 18083a8:	000b883a 	mov	r5,zero
 18083ac:	d811883a 	mov	r8,sp
 18083b0:	3f3ff316 	blt	r7,fp,1808380 <__alt_mem_mem_0+0xff7e8380>
 18083b4:	da802417 	ldw	r10,144(sp)
 18083b8:	1705883a 	add	r2,r2,fp
 18083bc:	47000115 	stw	fp,4(r8)
 18083c0:	42800015 	stw	r10,0(r8)
 18083c4:	d8801c15 	stw	r2,112(sp)
 18083c8:	d9001b15 	stw	r4,108(sp)
 18083cc:	00c001c4 	movi	r3,7
 18083d0:	19003616 	blt	r3,r4,18084ac <___vfiprintf_internal_r+0xd68>
 18083d4:	42000204 	addi	r8,r8,8
 18083d8:	21000044 	addi	r4,r4,1
 18083dc:	003e5706 	br	1807d3c <__alt_mem_mem_0+0xff7e7d3c>
 18083e0:	d9402117 	ldw	r5,132(sp)
 18083e4:	d9002017 	ldw	r4,128(sp)
 18083e8:	d9801a04 	addi	r6,sp,104
 18083ec:	d9c02b15 	stw	r7,172(sp)
 18083f0:	db402a15 	stw	r13,168(sp)
 18083f4:	18076300 	call	1807630 <__sprint_r.part.0>
 18083f8:	d9c02b17 	ldw	r7,172(sp)
 18083fc:	db402a17 	ldw	r13,168(sp)
 1808400:	1000241e 	bne	r2,zero,1808494 <___vfiprintf_internal_r+0xd50>
 1808404:	d9401b17 	ldw	r5,108(sp)
 1808408:	d8801c17 	ldw	r2,112(sp)
 180840c:	d811883a 	mov	r8,sp
 1808410:	29000044 	addi	r4,r5,1
 1808414:	003fd806 	br	1808378 <__alt_mem_mem_0+0xff7e8378>
 1808418:	d9401b17 	ldw	r5,108(sp)
 180841c:	00c06134 	movhi	r3,388
 1808420:	18c2ea04 	addi	r3,r3,2984
 1808424:	d8c02415 	stw	r3,144(sp)
 1808428:	29400044 	addi	r5,r5,1
 180842c:	d8c02417 	ldw	r3,144(sp)
 1808430:	14c5883a 	add	r2,r2,r19
 1808434:	44c00115 	stw	r19,4(r8)
 1808438:	40c00015 	stw	r3,0(r8)
 180843c:	d8801c15 	stw	r2,112(sp)
 1808440:	d9401b15 	stw	r5,108(sp)
 1808444:	00c001c4 	movi	r3,7
 1808448:	1940070e 	bge	r3,r5,1808468 <___vfiprintf_internal_r+0xd24>
 180844c:	103e4826 	beq	r2,zero,1807d70 <__alt_mem_mem_0+0xff7e7d70>
 1808450:	d9402117 	ldw	r5,132(sp)
 1808454:	d9002017 	ldw	r4,128(sp)
 1808458:	d9801a04 	addi	r6,sp,104
 180845c:	18076300 	call	1807630 <__sprint_r.part.0>
 1808460:	10000c1e 	bne	r2,zero,1808494 <___vfiprintf_internal_r+0xd50>
 1808464:	d8801c17 	ldw	r2,112(sp)
 1808468:	8c80010e 	bge	r17,r18,1808470 <___vfiprintf_internal_r+0xd2c>
 180846c:	9023883a 	mov	r17,r18
 1808470:	da802317 	ldw	r10,140(sp)
 1808474:	5455883a 	add	r10,r10,r17
 1808478:	da802315 	stw	r10,140(sp)
 180847c:	103e4126 	beq	r2,zero,1807d84 <__alt_mem_mem_0+0xff7e7d84>
 1808480:	d9402117 	ldw	r5,132(sp)
 1808484:	d9002017 	ldw	r4,128(sp)
 1808488:	d9801a04 	addi	r6,sp,104
 180848c:	18076300 	call	1807630 <__sprint_r.part.0>
 1808490:	103e3c26 	beq	r2,zero,1807d84 <__alt_mem_mem_0+0xff7e7d84>
 1808494:	dd002117 	ldw	r20,132(sp)
 1808498:	a080030b 	ldhu	r2,12(r20)
 180849c:	1080100c 	andi	r2,r2,64
 18084a0:	1001231e 	bne	r2,zero,1808930 <___vfiprintf_internal_r+0x11ec>
 18084a4:	d8802317 	ldw	r2,140(sp)
 18084a8:	003d7b06 	br	1807a98 <__alt_mem_mem_0+0xff7e7a98>
 18084ac:	1000991e 	bne	r2,zero,1808714 <___vfiprintf_internal_r+0xfd0>
 18084b0:	00c00044 	movi	r3,1
 18084b4:	9805883a 	mov	r2,r19
 18084b8:	dd400015 	stw	r21,0(sp)
 18084bc:	dcc00115 	stw	r19,4(sp)
 18084c0:	dcc01c15 	stw	r19,112(sp)
 18084c4:	d8c01b15 	stw	r3,108(sp)
 18084c8:	d811883a 	mov	r8,sp
 18084cc:	42000204 	addi	r8,r8,8
 18084d0:	a2c0010c 	andi	r11,r20,4
 18084d4:	583fe426 	beq	r11,zero,1808468 <__alt_mem_mem_0+0xff7e8468>
 18084d8:	8ca7c83a 	sub	r19,r17,r18
 18084dc:	04ffe20e 	bge	zero,r19,1808468 <__alt_mem_mem_0+0xff7e8468>
 18084e0:	01c00404 	movi	r7,16
 18084e4:	3cffcc0e 	bge	r7,r19,1808418 <__alt_mem_mem_0+0xff7e8418>
 18084e8:	02806134 	movhi	r10,388
 18084ec:	5282ea04 	addi	r10,r10,2984
 18084f0:	d9001b17 	ldw	r4,108(sp)
 18084f4:	da802415 	stw	r10,144(sp)
 18084f8:	382b883a 	mov	r21,r7
 18084fc:	050001c4 	movi	r20,7
 1808500:	df002017 	ldw	fp,128(sp)
 1808504:	00000506 	br	180851c <___vfiprintf_internal_r+0xdd8>
 1808508:	21400084 	addi	r5,r4,2
 180850c:	42000204 	addi	r8,r8,8
 1808510:	1809883a 	mov	r4,r3
 1808514:	9cfffc04 	addi	r19,r19,-16
 1808518:	acffc40e 	bge	r21,r19,180842c <__alt_mem_mem_0+0xff7e842c>
 180851c:	10800404 	addi	r2,r2,16
 1808520:	20c00044 	addi	r3,r4,1
 1808524:	45800015 	stw	r22,0(r8)
 1808528:	45400115 	stw	r21,4(r8)
 180852c:	d8801c15 	stw	r2,112(sp)
 1808530:	d8c01b15 	stw	r3,108(sp)
 1808534:	a0fff40e 	bge	r20,r3,1808508 <__alt_mem_mem_0+0xff7e8508>
 1808538:	1000041e 	bne	r2,zero,180854c <___vfiprintf_internal_r+0xe08>
 180853c:	01400044 	movi	r5,1
 1808540:	0009883a 	mov	r4,zero
 1808544:	d811883a 	mov	r8,sp
 1808548:	003ff206 	br	1808514 <__alt_mem_mem_0+0xff7e8514>
 180854c:	d9402117 	ldw	r5,132(sp)
 1808550:	d9801a04 	addi	r6,sp,104
 1808554:	e009883a 	mov	r4,fp
 1808558:	18076300 	call	1807630 <__sprint_r.part.0>
 180855c:	103fcd1e 	bne	r2,zero,1808494 <__alt_mem_mem_0+0xff7e8494>
 1808560:	d9001b17 	ldw	r4,108(sp)
 1808564:	d8801c17 	ldw	r2,112(sp)
 1808568:	d811883a 	mov	r8,sp
 180856c:	21400044 	addi	r5,r4,1
 1808570:	003fe806 	br	1808514 <__alt_mem_mem_0+0xff7e8514>
 1808574:	d9402117 	ldw	r5,132(sp)
 1808578:	d9002017 	ldw	r4,128(sp)
 180857c:	d9801a04 	addi	r6,sp,104
 1808580:	d9c02b15 	stw	r7,172(sp)
 1808584:	db402a15 	stw	r13,168(sp)
 1808588:	18076300 	call	1807630 <__sprint_r.part.0>
 180858c:	d9c02b17 	ldw	r7,172(sp)
 1808590:	db402a17 	ldw	r13,168(sp)
 1808594:	103fbf1e 	bne	r2,zero,1808494 <__alt_mem_mem_0+0xff7e8494>
 1808598:	d9401b17 	ldw	r5,108(sp)
 180859c:	d8801c17 	ldw	r2,112(sp)
 18085a0:	d811883a 	mov	r8,sp
 18085a4:	29800044 	addi	r6,r5,1
 18085a8:	003dc406 	br	1807cbc <__alt_mem_mem_0+0xff7e7cbc>
 18085ac:	1000d21e 	bne	r2,zero,18088f8 <___vfiprintf_internal_r+0x11b4>
 18085b0:	d8c01d87 	ldb	r3,118(sp)
 18085b4:	18009526 	beq	r3,zero,180880c <___vfiprintf_internal_r+0x10c8>
 18085b8:	00800044 	movi	r2,1
 18085bc:	d8c01d84 	addi	r3,sp,118
 18085c0:	1009883a 	mov	r4,r2
 18085c4:	d8c00015 	stw	r3,0(sp)
 18085c8:	d8800115 	stw	r2,4(sp)
 18085cc:	d811883a 	mov	r8,sp
 18085d0:	200b883a 	mov	r5,r4
 18085d4:	42000204 	addi	r8,r8,8
 18085d8:	21000044 	addi	r4,r4,1
 18085dc:	003d9706 	br	1807c3c <__alt_mem_mem_0+0xff7e7c3c>
 18085e0:	d9001d04 	addi	r4,sp,116
 18085e4:	00800084 	movi	r2,2
 18085e8:	d9000015 	stw	r4,0(sp)
 18085ec:	d8800115 	stw	r2,4(sp)
 18085f0:	1809883a 	mov	r4,r3
 18085f4:	d811883a 	mov	r8,sp
 18085f8:	200b883a 	mov	r5,r4
 18085fc:	42000204 	addi	r8,r8,8
 1808600:	21000044 	addi	r4,r4,1
 1808604:	003f4e06 	br	1808340 <__alt_mem_mem_0+0xff7e8340>
 1808608:	d8001d85 	stb	zero,118(sp)
 180860c:	48005016 	blt	r9,zero,1808750 <___vfiprintf_internal_r+0x100c>
 1808610:	00ffdfc4 	movi	r3,-129
 1808614:	94c4b03a 	or	r2,r18,r19
 1808618:	a0e8703a 	and	r20,r20,r3
 180861c:	103d4426 	beq	r2,zero,1807b30 <__alt_mem_mem_0+0xff7e7b30>
 1808620:	0039883a 	mov	fp,zero
 1808624:	d9002617 	ldw	r4,152(sp)
 1808628:	dd401a04 	addi	r21,sp,104
 180862c:	908003cc 	andi	r2,r18,15
 1808630:	9806973a 	slli	r3,r19,28
 1808634:	2085883a 	add	r2,r4,r2
 1808638:	9024d13a 	srli	r18,r18,4
 180863c:	10800003 	ldbu	r2,0(r2)
 1808640:	9826d13a 	srli	r19,r19,4
 1808644:	ad7fffc4 	addi	r21,r21,-1
 1808648:	1ca4b03a 	or	r18,r3,r18
 180864c:	a8800005 	stb	r2,0(r21)
 1808650:	94c4b03a 	or	r2,r18,r19
 1808654:	103ff51e 	bne	r2,zero,180862c <__alt_mem_mem_0+0xff7e862c>
 1808658:	003e5906 	br	1807fc0 <__alt_mem_mem_0+0xff7e7fc0>
 180865c:	d9402117 	ldw	r5,132(sp)
 1808660:	d9002017 	ldw	r4,128(sp)
 1808664:	d9801a04 	addi	r6,sp,104
 1808668:	18076300 	call	1807630 <__sprint_r.part.0>
 180866c:	103f891e 	bne	r2,zero,1808494 <__alt_mem_mem_0+0xff7e8494>
 1808670:	d8801c17 	ldw	r2,112(sp)
 1808674:	d811883a 	mov	r8,sp
 1808678:	003f9506 	br	18084d0 <__alt_mem_mem_0+0xff7e84d0>
 180867c:	d9402117 	ldw	r5,132(sp)
 1808680:	d9002017 	ldw	r4,128(sp)
 1808684:	d9801a04 	addi	r6,sp,104
 1808688:	18076300 	call	1807630 <__sprint_r.part.0>
 180868c:	103f811e 	bne	r2,zero,1808494 <__alt_mem_mem_0+0xff7e8494>
 1808690:	d811883a 	mov	r8,sp
 1808694:	003ced06 	br	1807a4c <__alt_mem_mem_0+0xff7e7a4c>
 1808698:	d9402117 	ldw	r5,132(sp)
 180869c:	d9002017 	ldw	r4,128(sp)
 18086a0:	d9801a04 	addi	r6,sp,104
 18086a4:	da402c15 	stw	r9,176(sp)
 18086a8:	db802a15 	stw	r14,168(sp)
 18086ac:	18076300 	call	1807630 <__sprint_r.part.0>
 18086b0:	da402c17 	ldw	r9,176(sp)
 18086b4:	db802a17 	ldw	r14,168(sp)
 18086b8:	103f761e 	bne	r2,zero,1808494 <__alt_mem_mem_0+0xff7e8494>
 18086bc:	d9401b17 	ldw	r5,108(sp)
 18086c0:	d8801c17 	ldw	r2,112(sp)
 18086c4:	d811883a 	mov	r8,sp
 18086c8:	29000044 	addi	r4,r5,1
 18086cc:	003d5b06 	br	1807c3c <__alt_mem_mem_0+0xff7e7c3c>
 18086d0:	d9402117 	ldw	r5,132(sp)
 18086d4:	d9002017 	ldw	r4,128(sp)
 18086d8:	d9801a04 	addi	r6,sp,104
 18086dc:	da402c15 	stw	r9,176(sp)
 18086e0:	18076300 	call	1807630 <__sprint_r.part.0>
 18086e4:	da402c17 	ldw	r9,176(sp)
 18086e8:	103f6a1e 	bne	r2,zero,1808494 <__alt_mem_mem_0+0xff7e8494>
 18086ec:	d9401b17 	ldw	r5,108(sp)
 18086f0:	d8801c17 	ldw	r2,112(sp)
 18086f4:	d811883a 	mov	r8,sp
 18086f8:	29000044 	addi	r4,r5,1
 18086fc:	003f1006 	br	1808340 <__alt_mem_mem_0+0xff7e8340>
 1808700:	1000c31e 	bne	r2,zero,1808a10 <___vfiprintf_internal_r+0x12cc>
 1808704:	01000044 	movi	r4,1
 1808708:	000b883a 	mov	r5,zero
 180870c:	d811883a 	mov	r8,sp
 1808710:	003f0d06 	br	1808348 <__alt_mem_mem_0+0xff7e8348>
 1808714:	d9402117 	ldw	r5,132(sp)
 1808718:	d9002017 	ldw	r4,128(sp)
 180871c:	d9801a04 	addi	r6,sp,104
 1808720:	18076300 	call	1807630 <__sprint_r.part.0>
 1808724:	103f5b1e 	bne	r2,zero,1808494 <__alt_mem_mem_0+0xff7e8494>
 1808728:	d9001b17 	ldw	r4,108(sp)
 180872c:	d8801c17 	ldw	r2,112(sp)
 1808730:	d811883a 	mov	r8,sp
 1808734:	21000044 	addi	r4,r4,1
 1808738:	003d8006 	br	1807d3c <__alt_mem_mem_0+0xff7e7d3c>
 180873c:	01006134 	movhi	r4,388
 1808740:	21028504 	addi	r4,r4,2580
 1808744:	d9002615 	stw	r4,152(sp)
 1808748:	d8c02215 	stw	r3,136(sp)
 180874c:	1029883a 	mov	r20,r2
 1808750:	94c4b03a 	or	r2,r18,r19
 1808754:	103fb21e 	bne	r2,zero,1808620 <__alt_mem_mem_0+0xff7e8620>
 1808758:	0039883a 	mov	fp,zero
 180875c:	00800084 	movi	r2,2
 1808760:	003e6b06 	br	1808110 <__alt_mem_mem_0+0xff7e8110>
 1808764:	da802217 	ldw	r10,136(sp)
 1808768:	d8001d85 	stb	zero,118(sp)
 180876c:	0027883a 	mov	r19,zero
 1808770:	50800104 	addi	r2,r10,4
 1808774:	54800017 	ldw	r18,0(r10)
 1808778:	483e6016 	blt	r9,zero,18080fc <__alt_mem_mem_0+0xff7e80fc>
 180877c:	00ffdfc4 	movi	r3,-129
 1808780:	d8802215 	stw	r2,136(sp)
 1808784:	a0e8703a 	and	r20,r20,r3
 1808788:	0039883a 	mov	fp,zero
 180878c:	903ebb26 	beq	r18,zero,180827c <__alt_mem_mem_0+0xff7e827c>
 1808790:	00800244 	movi	r2,9
 1808794:	14bdee36 	bltu	r2,r18,1807f50 <__alt_mem_mem_0+0xff7e7f50>
 1808798:	003eba06 	br	1808284 <__alt_mem_mem_0+0xff7e8284>
 180879c:	00800c04 	movi	r2,48
 18087a0:	d8c01d45 	stb	r3,117(sp)
 18087a4:	d8801d05 	stb	r2,116(sp)
 18087a8:	d8001d85 	stb	zero,118(sp)
 18087ac:	a0c00094 	ori	r3,r20,2
 18087b0:	4800a916 	blt	r9,zero,1808a58 <___vfiprintf_internal_r+0x1314>
 18087b4:	00bfdfc4 	movi	r2,-129
 18087b8:	a096703a 	and	r11,r20,r2
 18087bc:	5d000094 	ori	r20,r11,2
 18087c0:	0039883a 	mov	fp,zero
 18087c4:	003f9706 	br	1808624 <__alt_mem_mem_0+0xff7e8624>
 18087c8:	8025883a 	mov	r18,r16
 18087cc:	003c2e06 	br	1807888 <__alt_mem_mem_0+0xff7e7888>
 18087d0:	00806134 	movhi	r2,388
 18087d4:	10828504 	addi	r2,r2,2580
 18087d8:	0039883a 	mov	fp,zero
 18087dc:	d8802615 	stw	r2,152(sp)
 18087e0:	003f9006 	br	1808624 <__alt_mem_mem_0+0xff7e8624>
 18087e4:	04a5c83a 	sub	r18,zero,r18
 18087e8:	07000b44 	movi	fp,45
 18087ec:	9004c03a 	cmpne	r2,r18,zero
 18087f0:	04e7c83a 	sub	r19,zero,r19
 18087f4:	df001d85 	stb	fp,118(sp)
 18087f8:	98a7c83a 	sub	r19,r19,r2
 18087fc:	48009f16 	blt	r9,zero,1808a7c <___vfiprintf_internal_r+0x1338>
 1808800:	00bfdfc4 	movi	r2,-129
 1808804:	a0a8703a 	and	r20,r20,r2
 1808808:	003dd006 	br	1807f4c <__alt_mem_mem_0+0xff7e7f4c>
 180880c:	70004c26 	beq	r14,zero,1808940 <___vfiprintf_internal_r+0x11fc>
 1808810:	00800084 	movi	r2,2
 1808814:	d8c01d04 	addi	r3,sp,116
 1808818:	d8c00015 	stw	r3,0(sp)
 180881c:	d8800115 	stw	r2,4(sp)
 1808820:	01000044 	movi	r4,1
 1808824:	d811883a 	mov	r8,sp
 1808828:	003f7306 	br	18085f8 <__alt_mem_mem_0+0xff7e85f8>
 180882c:	a080100c 	andi	r2,r20,64
 1808830:	da802217 	ldw	r10,136(sp)
 1808834:	103e0626 	beq	r2,zero,1808050 <__alt_mem_mem_0+0xff7e8050>
 1808838:	5480000f 	ldh	r18,0(r10)
 180883c:	52800104 	addi	r10,r10,4
 1808840:	da802215 	stw	r10,136(sp)
 1808844:	9027d7fa 	srai	r19,r18,31
 1808848:	9805883a 	mov	r2,r19
 180884c:	003db806 	br	1807f30 <__alt_mem_mem_0+0xff7e7f30>
 1808850:	a080040c 	andi	r2,r20,16
 1808854:	1000091e 	bne	r2,zero,180887c <___vfiprintf_internal_r+0x1138>
 1808858:	a2c0100c 	andi	r11,r20,64
 180885c:	58000726 	beq	r11,zero,180887c <___vfiprintf_internal_r+0x1138>
 1808860:	da802217 	ldw	r10,136(sp)
 1808864:	50800017 	ldw	r2,0(r10)
 1808868:	52800104 	addi	r10,r10,4
 180886c:	da802215 	stw	r10,136(sp)
 1808870:	da802317 	ldw	r10,140(sp)
 1808874:	1280000d 	sth	r10,0(r2)
 1808878:	003be706 	br	1807818 <__alt_mem_mem_0+0xff7e7818>
 180887c:	da802217 	ldw	r10,136(sp)
 1808880:	50800017 	ldw	r2,0(r10)
 1808884:	52800104 	addi	r10,r10,4
 1808888:	da802215 	stw	r10,136(sp)
 180888c:	da802317 	ldw	r10,140(sp)
 1808890:	12800015 	stw	r10,0(r2)
 1808894:	003be006 	br	1807818 <__alt_mem_mem_0+0xff7e7818>
 1808898:	a080100c 	andi	r2,r20,64
 180889c:	da802217 	ldw	r10,136(sp)
 18088a0:	10003026 	beq	r2,zero,1808964 <___vfiprintf_internal_r+0x1220>
 18088a4:	5480000b 	ldhu	r18,0(r10)
 18088a8:	52800104 	addi	r10,r10,4
 18088ac:	0027883a 	mov	r19,zero
 18088b0:	da802215 	stw	r10,136(sp)
 18088b4:	003d8006 	br	1807eb8 <__alt_mem_mem_0+0xff7e7eb8>
 18088b8:	80c00007 	ldb	r3,0(r16)
 18088bc:	003c0006 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 18088c0:	a080100c 	andi	r2,r20,64
 18088c4:	d8001d85 	stb	zero,118(sp)
 18088c8:	da802217 	ldw	r10,136(sp)
 18088cc:	1000201e 	bne	r2,zero,1808950 <___vfiprintf_internal_r+0x120c>
 18088d0:	50800104 	addi	r2,r10,4
 18088d4:	54800017 	ldw	r18,0(r10)
 18088d8:	0027883a 	mov	r19,zero
 18088dc:	483def0e 	bge	r9,zero,180809c <__alt_mem_mem_0+0xff7e809c>
 18088e0:	94c6b03a 	or	r3,r18,r19
 18088e4:	d8802215 	stw	r2,136(sp)
 18088e8:	183d4e1e 	bne	r3,zero,1807e24 <__alt_mem_mem_0+0xff7e7e24>
 18088ec:	0039883a 	mov	fp,zero
 18088f0:	0005883a 	mov	r2,zero
 18088f4:	003e0606 	br	1808110 <__alt_mem_mem_0+0xff7e8110>
 18088f8:	d9402117 	ldw	r5,132(sp)
 18088fc:	d9002017 	ldw	r4,128(sp)
 1808900:	d9801a04 	addi	r6,sp,104
 1808904:	da402c15 	stw	r9,176(sp)
 1808908:	db802a15 	stw	r14,168(sp)
 180890c:	18076300 	call	1807630 <__sprint_r.part.0>
 1808910:	da402c17 	ldw	r9,176(sp)
 1808914:	db802a17 	ldw	r14,168(sp)
 1808918:	103ede1e 	bne	r2,zero,1808494 <__alt_mem_mem_0+0xff7e8494>
 180891c:	d9401b17 	ldw	r5,108(sp)
 1808920:	d8801c17 	ldw	r2,112(sp)
 1808924:	d811883a 	mov	r8,sp
 1808928:	29000044 	addi	r4,r5,1
 180892c:	003e7406 	br	1808300 <__alt_mem_mem_0+0xff7e8300>
 1808930:	00bfffc4 	movi	r2,-1
 1808934:	003c5806 	br	1807a98 <__alt_mem_mem_0+0xff7e7a98>
 1808938:	d811883a 	mov	r8,sp
 180893c:	003ee806 	br	18084e0 <__alt_mem_mem_0+0xff7e84e0>
 1808940:	000b883a 	mov	r5,zero
 1808944:	01000044 	movi	r4,1
 1808948:	d811883a 	mov	r8,sp
 180894c:	003e7c06 	br	1808340 <__alt_mem_mem_0+0xff7e8340>
 1808950:	50800104 	addi	r2,r10,4
 1808954:	5480000b 	ldhu	r18,0(r10)
 1808958:	0027883a 	mov	r19,zero
 180895c:	483dcf0e 	bge	r9,zero,180809c <__alt_mem_mem_0+0xff7e809c>
 1808960:	003fdf06 	br	18088e0 <__alt_mem_mem_0+0xff7e88e0>
 1808964:	54800017 	ldw	r18,0(r10)
 1808968:	52800104 	addi	r10,r10,4
 180896c:	0027883a 	mov	r19,zero
 1808970:	da802215 	stw	r10,136(sp)
 1808974:	003d5006 	br	1807eb8 <__alt_mem_mem_0+0xff7e7eb8>
 1808978:	50800104 	addi	r2,r10,4
 180897c:	5480000b 	ldhu	r18,0(r10)
 1808980:	0027883a 	mov	r19,zero
 1808984:	483f7d0e 	bge	r9,zero,180877c <__alt_mem_mem_0+0xff7e877c>
 1808988:	003ddc06 	br	18080fc <__alt_mem_mem_0+0xff7e80fc>
 180898c:	d8c02215 	stw	r3,136(sp)
 1808990:	0039883a 	mov	fp,zero
 1808994:	003ddb06 	br	1808104 <__alt_mem_mem_0+0xff7e8104>
 1808998:	02806134 	movhi	r10,388
 180899c:	5282e604 	addi	r10,r10,2968
 18089a0:	da802415 	stw	r10,144(sp)
 18089a4:	003e8306 	br	18083b4 <__alt_mem_mem_0+0xff7e83b4>
 18089a8:	d8801c17 	ldw	r2,112(sp)
 18089ac:	dd002117 	ldw	r20,132(sp)
 18089b0:	103eb926 	beq	r2,zero,1808498 <__alt_mem_mem_0+0xff7e8498>
 18089b4:	d9002017 	ldw	r4,128(sp)
 18089b8:	d9801a04 	addi	r6,sp,104
 18089bc:	a00b883a 	mov	r5,r20
 18089c0:	18076300 	call	1807630 <__sprint_r.part.0>
 18089c4:	003eb406 	br	1808498 <__alt_mem_mem_0+0xff7e8498>
 18089c8:	80c00043 	ldbu	r3,1(r16)
 18089cc:	a5000814 	ori	r20,r20,32
 18089d0:	84000044 	addi	r16,r16,1
 18089d4:	18c03fcc 	andi	r3,r3,255
 18089d8:	18c0201c 	xori	r3,r3,128
 18089dc:	18ffe004 	addi	r3,r3,-128
 18089e0:	003bb706 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 18089e4:	a809883a 	mov	r4,r21
 18089e8:	d8c02a15 	stw	r3,168(sp)
 18089ec:	da002b15 	stw	r8,172(sp)
 18089f0:	18075980 	call	1807598 <strlen>
 18089f4:	d8c02a17 	ldw	r3,168(sp)
 18089f8:	1027883a 	mov	r19,r2
 18089fc:	df001d83 	ldbu	fp,118(sp)
 1808a00:	d8c02215 	stw	r3,136(sp)
 1808a04:	0013883a 	mov	r9,zero
 1808a08:	da002b17 	ldw	r8,172(sp)
 1808a0c:	003c4d06 	br	1807b44 <__alt_mem_mem_0+0xff7e7b44>
 1808a10:	d9402117 	ldw	r5,132(sp)
 1808a14:	d9002017 	ldw	r4,128(sp)
 1808a18:	d9801a04 	addi	r6,sp,104
 1808a1c:	da402c15 	stw	r9,176(sp)
 1808a20:	18076300 	call	1807630 <__sprint_r.part.0>
 1808a24:	da402c17 	ldw	r9,176(sp)
 1808a28:	103e9a1e 	bne	r2,zero,1808494 <__alt_mem_mem_0+0xff7e8494>
 1808a2c:	d9401b17 	ldw	r5,108(sp)
 1808a30:	d8801c17 	ldw	r2,112(sp)
 1808a34:	d811883a 	mov	r8,sp
 1808a38:	29000044 	addi	r4,r5,1
 1808a3c:	003e4206 	br	1808348 <__alt_mem_mem_0+0xff7e8348>
 1808a40:	d9401b17 	ldw	r5,108(sp)
 1808a44:	01006134 	movhi	r4,388
 1808a48:	2102ea04 	addi	r4,r4,2984
 1808a4c:	d9002415 	stw	r4,144(sp)
 1808a50:	29400044 	addi	r5,r5,1
 1808a54:	003c6d06 	br	1807c0c <__alt_mem_mem_0+0xff7e7c0c>
 1808a58:	0039883a 	mov	fp,zero
 1808a5c:	00800084 	movi	r2,2
 1808a60:	10803fcc 	andi	r2,r2,255
 1808a64:	01000044 	movi	r4,1
 1808a68:	11001e26 	beq	r2,r4,1808ae4 <___vfiprintf_internal_r+0x13a0>
 1808a6c:	01000084 	movi	r4,2
 1808a70:	11001e1e 	bne	r2,r4,1808aec <___vfiprintf_internal_r+0x13a8>
 1808a74:	1829883a 	mov	r20,r3
 1808a78:	003eea06 	br	1808624 <__alt_mem_mem_0+0xff7e8624>
 1808a7c:	a007883a 	mov	r3,r20
 1808a80:	00800044 	movi	r2,1
 1808a84:	003ff606 	br	1808a60 <__alt_mem_mem_0+0xff7e8a60>
 1808a88:	00800184 	movi	r2,6
 1808a8c:	1240012e 	bgeu	r2,r9,1808a94 <___vfiprintf_internal_r+0x1350>
 1808a90:	1013883a 	mov	r9,r2
 1808a94:	4827883a 	mov	r19,r9
 1808a98:	4825883a 	mov	r18,r9
 1808a9c:	48001516 	blt	r9,zero,1808af4 <___vfiprintf_internal_r+0x13b0>
 1808aa0:	05406134 	movhi	r21,388
 1808aa4:	d8c02215 	stw	r3,136(sp)
 1808aa8:	ad428a04 	addi	r21,r21,2600
 1808aac:	003d1406 	br	1807f00 <__alt_mem_mem_0+0xff7e7f00>
 1808ab0:	02806134 	movhi	r10,388
 1808ab4:	5282e604 	addi	r10,r10,2968
 1808ab8:	da802415 	stw	r10,144(sp)
 1808abc:	200d883a 	mov	r6,r4
 1808ac0:	003c9106 	br	1807d08 <__alt_mem_mem_0+0xff7e7d08>
 1808ac4:	5021883a 	mov	r16,r10
 1808ac8:	0013883a 	mov	r9,zero
 1808acc:	003b7d06 	br	18078c4 <__alt_mem_mem_0+0xff7e78c4>
 1808ad0:	4827883a 	mov	r19,r9
 1808ad4:	df001d83 	ldbu	fp,118(sp)
 1808ad8:	d8c02215 	stw	r3,136(sp)
 1808adc:	0013883a 	mov	r9,zero
 1808ae0:	003c1806 	br	1807b44 <__alt_mem_mem_0+0xff7e7b44>
 1808ae4:	1829883a 	mov	r20,r3
 1808ae8:	003d1806 	br	1807f4c <__alt_mem_mem_0+0xff7e7f4c>
 1808aec:	1829883a 	mov	r20,r3
 1808af0:	003ccd06 	br	1807e28 <__alt_mem_mem_0+0xff7e7e28>
 1808af4:	0025883a 	mov	r18,zero
 1808af8:	003fe906 	br	1808aa0 <__alt_mem_mem_0+0xff7e8aa0>
 1808afc:	d8802217 	ldw	r2,136(sp)
 1808b00:	80c00043 	ldbu	r3,1(r16)
 1808b04:	5021883a 	mov	r16,r10
 1808b08:	12400017 	ldw	r9,0(r2)
 1808b0c:	10800104 	addi	r2,r2,4
 1808b10:	d8802215 	stw	r2,136(sp)
 1808b14:	483faf0e 	bge	r9,zero,18089d4 <__alt_mem_mem_0+0xff7e89d4>
 1808b18:	18c03fcc 	andi	r3,r3,255
 1808b1c:	18c0201c 	xori	r3,r3,128
 1808b20:	027fffc4 	movi	r9,-1
 1808b24:	18ffe004 	addi	r3,r3,-128
 1808b28:	003b6506 	br	18078c0 <__alt_mem_mem_0+0xff7e78c0>
 1808b2c:	d9c01d85 	stb	r7,118(sp)
 1808b30:	003ca006 	br	1807db4 <__alt_mem_mem_0+0xff7e7db4>
 1808b34:	d9c01d85 	stb	r7,118(sp)
 1808b38:	003cad06 	br	1807df0 <__alt_mem_mem_0+0xff7e7df0>
 1808b3c:	d9c01d85 	stb	r7,118(sp)
 1808b40:	003d7d06 	br	1808138 <__alt_mem_mem_0+0xff7e8138>
 1808b44:	d9c01d85 	stb	r7,118(sp)
 1808b48:	003d5f06 	br	18080c8 <__alt_mem_mem_0+0xff7e80c8>
 1808b4c:	a080004c 	andi	r2,r20,1
 1808b50:	0039883a 	mov	fp,zero
 1808b54:	10000526 	beq	r2,zero,1808b6c <___vfiprintf_internal_r+0x1428>
 1808b58:	00800c04 	movi	r2,48
 1808b5c:	d88019c5 	stb	r2,103(sp)
 1808b60:	dcc02717 	ldw	r19,156(sp)
 1808b64:	dd4019c4 	addi	r21,sp,103
 1808b68:	003bf606 	br	1807b44 <__alt_mem_mem_0+0xff7e7b44>
 1808b6c:	0027883a 	mov	r19,zero
 1808b70:	dd401a04 	addi	r21,sp,104
 1808b74:	003bf306 	br	1807b44 <__alt_mem_mem_0+0xff7e7b44>
 1808b78:	d9c01d85 	stb	r7,118(sp)
 1808b7c:	003dc806 	br	18082a0 <__alt_mem_mem_0+0xff7e82a0>
 1808b80:	d9c01d85 	stb	r7,118(sp)
 1808b84:	003d3a06 	br	1808070 <__alt_mem_mem_0+0xff7e8070>
 1808b88:	d9c01d85 	stb	r7,118(sp)
 1808b8c:	003d2a06 	br	1808038 <__alt_mem_mem_0+0xff7e8038>
 1808b90:	d9c01d85 	stb	r7,118(sp)
 1808b94:	003cde06 	br	1807f10 <__alt_mem_mem_0+0xff7e7f10>
 1808b98:	d9c01d85 	stb	r7,118(sp)
 1808b9c:	003cbc06 	br	1807e90 <__alt_mem_mem_0+0xff7e7e90>

01808ba0 <__vfiprintf_internal>:
 1808ba0:	00806134 	movhi	r2,388
 1808ba4:	1094f404 	addi	r2,r2,21456
 1808ba8:	300f883a 	mov	r7,r6
 1808bac:	280d883a 	mov	r6,r5
 1808bb0:	200b883a 	mov	r5,r4
 1808bb4:	11000017 	ldw	r4,0(r2)
 1808bb8:	18077441 	jmpi	1807744 <___vfiprintf_internal_r>

01808bbc <__sbprintf>:
 1808bbc:	2880030b 	ldhu	r2,12(r5)
 1808bc0:	2ac01917 	ldw	r11,100(r5)
 1808bc4:	2a80038b 	ldhu	r10,14(r5)
 1808bc8:	2a400717 	ldw	r9,28(r5)
 1808bcc:	2a000917 	ldw	r8,36(r5)
 1808bd0:	defee204 	addi	sp,sp,-1144
 1808bd4:	00c10004 	movi	r3,1024
 1808bd8:	dc011a15 	stw	r16,1128(sp)
 1808bdc:	10bfff4c 	andi	r2,r2,65533
 1808be0:	2821883a 	mov	r16,r5
 1808be4:	d8cb883a 	add	r5,sp,r3
 1808be8:	dc811c15 	stw	r18,1136(sp)
 1808bec:	dc411b15 	stw	r17,1132(sp)
 1808bf0:	dfc11d15 	stw	ra,1140(sp)
 1808bf4:	2025883a 	mov	r18,r4
 1808bf8:	d881030d 	sth	r2,1036(sp)
 1808bfc:	dac11915 	stw	r11,1124(sp)
 1808c00:	da81038d 	sth	r10,1038(sp)
 1808c04:	da410715 	stw	r9,1052(sp)
 1808c08:	da010915 	stw	r8,1060(sp)
 1808c0c:	dec10015 	stw	sp,1024(sp)
 1808c10:	dec10415 	stw	sp,1040(sp)
 1808c14:	d8c10215 	stw	r3,1032(sp)
 1808c18:	d8c10515 	stw	r3,1044(sp)
 1808c1c:	d8010615 	stw	zero,1048(sp)
 1808c20:	18077440 	call	1807744 <___vfiprintf_internal_r>
 1808c24:	1023883a 	mov	r17,r2
 1808c28:	10000416 	blt	r2,zero,1808c3c <__sbprintf+0x80>
 1808c2c:	d9410004 	addi	r5,sp,1024
 1808c30:	9009883a 	mov	r4,r18
 1808c34:	1804adc0 	call	1804adc <_fflush_r>
 1808c38:	10000d1e 	bne	r2,zero,1808c70 <__sbprintf+0xb4>
 1808c3c:	d881030b 	ldhu	r2,1036(sp)
 1808c40:	1080100c 	andi	r2,r2,64
 1808c44:	10000326 	beq	r2,zero,1808c54 <__sbprintf+0x98>
 1808c48:	8080030b 	ldhu	r2,12(r16)
 1808c4c:	10801014 	ori	r2,r2,64
 1808c50:	8080030d 	sth	r2,12(r16)
 1808c54:	8805883a 	mov	r2,r17
 1808c58:	dfc11d17 	ldw	ra,1140(sp)
 1808c5c:	dc811c17 	ldw	r18,1136(sp)
 1808c60:	dc411b17 	ldw	r17,1132(sp)
 1808c64:	dc011a17 	ldw	r16,1128(sp)
 1808c68:	dec11e04 	addi	sp,sp,1144
 1808c6c:	f800283a 	ret
 1808c70:	047fffc4 	movi	r17,-1
 1808c74:	003ff106 	br	1808c3c <__alt_mem_mem_0+0xff7e8c3c>

01808c78 <_write_r>:
 1808c78:	defffd04 	addi	sp,sp,-12
 1808c7c:	2805883a 	mov	r2,r5
 1808c80:	dc000015 	stw	r16,0(sp)
 1808c84:	04006134 	movhi	r16,388
 1808c88:	dc400115 	stw	r17,4(sp)
 1808c8c:	300b883a 	mov	r5,r6
 1808c90:	841cc104 	addi	r16,r16,29444
 1808c94:	2023883a 	mov	r17,r4
 1808c98:	380d883a 	mov	r6,r7
 1808c9c:	1009883a 	mov	r4,r2
 1808ca0:	dfc00215 	stw	ra,8(sp)
 1808ca4:	80000015 	stw	zero,0(r16)
 1808ca8:	181302c0 	call	181302c <write>
 1808cac:	00ffffc4 	movi	r3,-1
 1808cb0:	10c00526 	beq	r2,r3,1808cc8 <_write_r+0x50>
 1808cb4:	dfc00217 	ldw	ra,8(sp)
 1808cb8:	dc400117 	ldw	r17,4(sp)
 1808cbc:	dc000017 	ldw	r16,0(sp)
 1808cc0:	dec00304 	addi	sp,sp,12
 1808cc4:	f800283a 	ret
 1808cc8:	80c00017 	ldw	r3,0(r16)
 1808ccc:	183ff926 	beq	r3,zero,1808cb4 <__alt_mem_mem_0+0xff7e8cb4>
 1808cd0:	88c00015 	stw	r3,0(r17)
 1808cd4:	003ff706 	br	1808cb4 <__alt_mem_mem_0+0xff7e8cb4>

01808cd8 <_close_r>:
 1808cd8:	defffd04 	addi	sp,sp,-12
 1808cdc:	dc000015 	stw	r16,0(sp)
 1808ce0:	04006134 	movhi	r16,388
 1808ce4:	dc400115 	stw	r17,4(sp)
 1808ce8:	841cc104 	addi	r16,r16,29444
 1808cec:	2023883a 	mov	r17,r4
 1808cf0:	2809883a 	mov	r4,r5
 1808cf4:	dfc00215 	stw	ra,8(sp)
 1808cf8:	80000015 	stw	zero,0(r16)
 1808cfc:	1812f780 	call	1812f78 <close>
 1808d00:	00ffffc4 	movi	r3,-1
 1808d04:	10c00526 	beq	r2,r3,1808d1c <_close_r+0x44>
 1808d08:	dfc00217 	ldw	ra,8(sp)
 1808d0c:	dc400117 	ldw	r17,4(sp)
 1808d10:	dc000017 	ldw	r16,0(sp)
 1808d14:	dec00304 	addi	sp,sp,12
 1808d18:	f800283a 	ret
 1808d1c:	80c00017 	ldw	r3,0(r16)
 1808d20:	183ff926 	beq	r3,zero,1808d08 <__alt_mem_mem_0+0xff7e8d08>
 1808d24:	88c00015 	stw	r3,0(r17)
 1808d28:	003ff706 	br	1808d08 <__alt_mem_mem_0+0xff7e8d08>

01808d2c <_calloc_r>:
 1808d2c:	298b383a 	mul	r5,r5,r6
 1808d30:	defffe04 	addi	sp,sp,-8
 1808d34:	dfc00115 	stw	ra,4(sp)
 1808d38:	dc000015 	stw	r16,0(sp)
 1808d3c:	180575c0 	call	180575c <_malloc_r>
 1808d40:	10002926 	beq	r2,zero,1808de8 <_calloc_r+0xbc>
 1808d44:	11bfff17 	ldw	r6,-4(r2)
 1808d48:	1021883a 	mov	r16,r2
 1808d4c:	00bfff04 	movi	r2,-4
 1808d50:	308c703a 	and	r6,r6,r2
 1808d54:	00c00904 	movi	r3,36
 1808d58:	308d883a 	add	r6,r6,r2
 1808d5c:	19801636 	bltu	r3,r6,1808db8 <_calloc_r+0x8c>
 1808d60:	008004c4 	movi	r2,19
 1808d64:	11800b2e 	bgeu	r2,r6,1808d94 <_calloc_r+0x68>
 1808d68:	80000015 	stw	zero,0(r16)
 1808d6c:	80000115 	stw	zero,4(r16)
 1808d70:	008006c4 	movi	r2,27
 1808d74:	11801a2e 	bgeu	r2,r6,1808de0 <_calloc_r+0xb4>
 1808d78:	80000215 	stw	zero,8(r16)
 1808d7c:	80000315 	stw	zero,12(r16)
 1808d80:	30c0151e 	bne	r6,r3,1808dd8 <_calloc_r+0xac>
 1808d84:	80000415 	stw	zero,16(r16)
 1808d88:	80800604 	addi	r2,r16,24
 1808d8c:	80000515 	stw	zero,20(r16)
 1808d90:	00000106 	br	1808d98 <_calloc_r+0x6c>
 1808d94:	8005883a 	mov	r2,r16
 1808d98:	10000015 	stw	zero,0(r2)
 1808d9c:	10000115 	stw	zero,4(r2)
 1808da0:	10000215 	stw	zero,8(r2)
 1808da4:	8005883a 	mov	r2,r16
 1808da8:	dfc00117 	ldw	ra,4(sp)
 1808dac:	dc000017 	ldw	r16,0(sp)
 1808db0:	dec00204 	addi	sp,sp,8
 1808db4:	f800283a 	ret
 1808db8:	000b883a 	mov	r5,zero
 1808dbc:	8009883a 	mov	r4,r16
 1808dc0:	18061940 	call	1806194 <memset>
 1808dc4:	8005883a 	mov	r2,r16
 1808dc8:	dfc00117 	ldw	ra,4(sp)
 1808dcc:	dc000017 	ldw	r16,0(sp)
 1808dd0:	dec00204 	addi	sp,sp,8
 1808dd4:	f800283a 	ret
 1808dd8:	80800404 	addi	r2,r16,16
 1808ddc:	003fee06 	br	1808d98 <__alt_mem_mem_0+0xff7e8d98>
 1808de0:	80800204 	addi	r2,r16,8
 1808de4:	003fec06 	br	1808d98 <__alt_mem_mem_0+0xff7e8d98>
 1808de8:	0005883a 	mov	r2,zero
 1808dec:	003fee06 	br	1808da8 <__alt_mem_mem_0+0xff7e8da8>

01808df0 <_fclose_r>:
 1808df0:	28003926 	beq	r5,zero,1808ed8 <_fclose_r+0xe8>
 1808df4:	defffc04 	addi	sp,sp,-16
 1808df8:	dc400115 	stw	r17,4(sp)
 1808dfc:	dc000015 	stw	r16,0(sp)
 1808e00:	dfc00315 	stw	ra,12(sp)
 1808e04:	dc800215 	stw	r18,8(sp)
 1808e08:	2023883a 	mov	r17,r4
 1808e0c:	2821883a 	mov	r16,r5
 1808e10:	20000226 	beq	r4,zero,1808e1c <_fclose_r+0x2c>
 1808e14:	20800e17 	ldw	r2,56(r4)
 1808e18:	10002726 	beq	r2,zero,1808eb8 <_fclose_r+0xc8>
 1808e1c:	8080030f 	ldh	r2,12(r16)
 1808e20:	1000071e 	bne	r2,zero,1808e40 <_fclose_r+0x50>
 1808e24:	0005883a 	mov	r2,zero
 1808e28:	dfc00317 	ldw	ra,12(sp)
 1808e2c:	dc800217 	ldw	r18,8(sp)
 1808e30:	dc400117 	ldw	r17,4(sp)
 1808e34:	dc000017 	ldw	r16,0(sp)
 1808e38:	dec00404 	addi	sp,sp,16
 1808e3c:	f800283a 	ret
 1808e40:	800b883a 	mov	r5,r16
 1808e44:	8809883a 	mov	r4,r17
 1808e48:	18048c00 	call	18048c0 <__sflush_r>
 1808e4c:	1025883a 	mov	r18,r2
 1808e50:	80800b17 	ldw	r2,44(r16)
 1808e54:	10000426 	beq	r2,zero,1808e68 <_fclose_r+0x78>
 1808e58:	81400717 	ldw	r5,28(r16)
 1808e5c:	8809883a 	mov	r4,r17
 1808e60:	103ee83a 	callr	r2
 1808e64:	10001616 	blt	r2,zero,1808ec0 <_fclose_r+0xd0>
 1808e68:	8080030b 	ldhu	r2,12(r16)
 1808e6c:	1080200c 	andi	r2,r2,128
 1808e70:	1000151e 	bne	r2,zero,1808ec8 <_fclose_r+0xd8>
 1808e74:	81400c17 	ldw	r5,48(r16)
 1808e78:	28000526 	beq	r5,zero,1808e90 <_fclose_r+0xa0>
 1808e7c:	80801004 	addi	r2,r16,64
 1808e80:	28800226 	beq	r5,r2,1808e8c <_fclose_r+0x9c>
 1808e84:	8809883a 	mov	r4,r17
 1808e88:	180502c0 	call	180502c <_free_r>
 1808e8c:	80000c15 	stw	zero,48(r16)
 1808e90:	81401117 	ldw	r5,68(r16)
 1808e94:	28000326 	beq	r5,zero,1808ea4 <_fclose_r+0xb4>
 1808e98:	8809883a 	mov	r4,r17
 1808e9c:	180502c0 	call	180502c <_free_r>
 1808ea0:	80001115 	stw	zero,68(r16)
 1808ea4:	1804ec80 	call	1804ec8 <__sfp_lock_acquire>
 1808ea8:	8000030d 	sth	zero,12(r16)
 1808eac:	1804ecc0 	call	1804ecc <__sfp_lock_release>
 1808eb0:	9005883a 	mov	r2,r18
 1808eb4:	003fdc06 	br	1808e28 <__alt_mem_mem_0+0xff7e8e28>
 1808eb8:	1804eb80 	call	1804eb8 <__sinit>
 1808ebc:	003fd706 	br	1808e1c <__alt_mem_mem_0+0xff7e8e1c>
 1808ec0:	04bfffc4 	movi	r18,-1
 1808ec4:	003fe806 	br	1808e68 <__alt_mem_mem_0+0xff7e8e68>
 1808ec8:	81400417 	ldw	r5,16(r16)
 1808ecc:	8809883a 	mov	r4,r17
 1808ed0:	180502c0 	call	180502c <_free_r>
 1808ed4:	003fe706 	br	1808e74 <__alt_mem_mem_0+0xff7e8e74>
 1808ed8:	0005883a 	mov	r2,zero
 1808edc:	f800283a 	ret

01808ee0 <fclose>:
 1808ee0:	00806134 	movhi	r2,388
 1808ee4:	1094f404 	addi	r2,r2,21456
 1808ee8:	200b883a 	mov	r5,r4
 1808eec:	11000017 	ldw	r4,0(r2)
 1808ef0:	1808df01 	jmpi	1808df0 <_fclose_r>

01808ef4 <__fputwc>:
 1808ef4:	defff804 	addi	sp,sp,-32
 1808ef8:	dcc00415 	stw	r19,16(sp)
 1808efc:	dc800315 	stw	r18,12(sp)
 1808f00:	dc000115 	stw	r16,4(sp)
 1808f04:	dfc00715 	stw	ra,28(sp)
 1808f08:	dd400615 	stw	r21,24(sp)
 1808f0c:	dd000515 	stw	r20,20(sp)
 1808f10:	dc400215 	stw	r17,8(sp)
 1808f14:	2027883a 	mov	r19,r4
 1808f18:	2825883a 	mov	r18,r5
 1808f1c:	3021883a 	mov	r16,r6
 1808f20:	180554c0 	call	180554c <__locale_mb_cur_max>
 1808f24:	00c00044 	movi	r3,1
 1808f28:	10c03e26 	beq	r2,r3,1809024 <__fputwc+0x130>
 1808f2c:	81c01704 	addi	r7,r16,92
 1808f30:	900d883a 	mov	r6,r18
 1808f34:	d80b883a 	mov	r5,sp
 1808f38:	9809883a 	mov	r4,r19
 1808f3c:	1809f400 	call	1809f40 <_wcrtomb_r>
 1808f40:	1029883a 	mov	r20,r2
 1808f44:	00bfffc4 	movi	r2,-1
 1808f48:	a0802026 	beq	r20,r2,1808fcc <__fputwc+0xd8>
 1808f4c:	d9400003 	ldbu	r5,0(sp)
 1808f50:	a0001c26 	beq	r20,zero,1808fc4 <__fputwc+0xd0>
 1808f54:	0023883a 	mov	r17,zero
 1808f58:	05400284 	movi	r21,10
 1808f5c:	00000906 	br	1808f84 <__fputwc+0x90>
 1808f60:	80800017 	ldw	r2,0(r16)
 1808f64:	11400005 	stb	r5,0(r2)
 1808f68:	80c00017 	ldw	r3,0(r16)
 1808f6c:	18c00044 	addi	r3,r3,1
 1808f70:	80c00015 	stw	r3,0(r16)
 1808f74:	8c400044 	addi	r17,r17,1
 1808f78:	dc45883a 	add	r2,sp,r17
 1808f7c:	8d00112e 	bgeu	r17,r20,1808fc4 <__fputwc+0xd0>
 1808f80:	11400003 	ldbu	r5,0(r2)
 1808f84:	80c00217 	ldw	r3,8(r16)
 1808f88:	18ffffc4 	addi	r3,r3,-1
 1808f8c:	80c00215 	stw	r3,8(r16)
 1808f90:	183ff30e 	bge	r3,zero,1808f60 <__alt_mem_mem_0+0xff7e8f60>
 1808f94:	80800617 	ldw	r2,24(r16)
 1808f98:	18801916 	blt	r3,r2,1809000 <__fputwc+0x10c>
 1808f9c:	80800017 	ldw	r2,0(r16)
 1808fa0:	11400005 	stb	r5,0(r2)
 1808fa4:	80800017 	ldw	r2,0(r16)
 1808fa8:	10c00003 	ldbu	r3,0(r2)
 1808fac:	10800044 	addi	r2,r2,1
 1808fb0:	1d402326 	beq	r3,r21,1809040 <__fputwc+0x14c>
 1808fb4:	80800015 	stw	r2,0(r16)
 1808fb8:	8c400044 	addi	r17,r17,1
 1808fbc:	dc45883a 	add	r2,sp,r17
 1808fc0:	8d3fef36 	bltu	r17,r20,1808f80 <__alt_mem_mem_0+0xff7e8f80>
 1808fc4:	9005883a 	mov	r2,r18
 1808fc8:	00000406 	br	1808fdc <__fputwc+0xe8>
 1808fcc:	80c0030b 	ldhu	r3,12(r16)
 1808fd0:	a005883a 	mov	r2,r20
 1808fd4:	18c01014 	ori	r3,r3,64
 1808fd8:	80c0030d 	sth	r3,12(r16)
 1808fdc:	dfc00717 	ldw	ra,28(sp)
 1808fe0:	dd400617 	ldw	r21,24(sp)
 1808fe4:	dd000517 	ldw	r20,20(sp)
 1808fe8:	dcc00417 	ldw	r19,16(sp)
 1808fec:	dc800317 	ldw	r18,12(sp)
 1808ff0:	dc400217 	ldw	r17,8(sp)
 1808ff4:	dc000117 	ldw	r16,4(sp)
 1808ff8:	dec00804 	addi	sp,sp,32
 1808ffc:	f800283a 	ret
 1809000:	800d883a 	mov	r6,r16
 1809004:	29403fcc 	andi	r5,r5,255
 1809008:	9809883a 	mov	r4,r19
 180900c:	1809de80 	call	1809de8 <__swbuf_r>
 1809010:	10bfffe0 	cmpeqi	r2,r2,-1
 1809014:	10803fcc 	andi	r2,r2,255
 1809018:	103fd626 	beq	r2,zero,1808f74 <__alt_mem_mem_0+0xff7e8f74>
 180901c:	00bfffc4 	movi	r2,-1
 1809020:	003fee06 	br	1808fdc <__alt_mem_mem_0+0xff7e8fdc>
 1809024:	90ffffc4 	addi	r3,r18,-1
 1809028:	01003f84 	movi	r4,254
 180902c:	20ffbf36 	bltu	r4,r3,1808f2c <__alt_mem_mem_0+0xff7e8f2c>
 1809030:	900b883a 	mov	r5,r18
 1809034:	dc800005 	stb	r18,0(sp)
 1809038:	1029883a 	mov	r20,r2
 180903c:	003fc506 	br	1808f54 <__alt_mem_mem_0+0xff7e8f54>
 1809040:	800d883a 	mov	r6,r16
 1809044:	a80b883a 	mov	r5,r21
 1809048:	9809883a 	mov	r4,r19
 180904c:	1809de80 	call	1809de8 <__swbuf_r>
 1809050:	10bfffe0 	cmpeqi	r2,r2,-1
 1809054:	003fef06 	br	1809014 <__alt_mem_mem_0+0xff7e9014>

01809058 <_fputwc_r>:
 1809058:	3080030b 	ldhu	r2,12(r6)
 180905c:	10c8000c 	andi	r3,r2,8192
 1809060:	1800051e 	bne	r3,zero,1809078 <_fputwc_r+0x20>
 1809064:	30c01917 	ldw	r3,100(r6)
 1809068:	10880014 	ori	r2,r2,8192
 180906c:	3080030d 	sth	r2,12(r6)
 1809070:	18880014 	ori	r2,r3,8192
 1809074:	30801915 	stw	r2,100(r6)
 1809078:	1808ef41 	jmpi	1808ef4 <__fputwc>

0180907c <fputwc>:
 180907c:	00806134 	movhi	r2,388
 1809080:	defffc04 	addi	sp,sp,-16
 1809084:	1094f404 	addi	r2,r2,21456
 1809088:	dc000115 	stw	r16,4(sp)
 180908c:	14000017 	ldw	r16,0(r2)
 1809090:	dc400215 	stw	r17,8(sp)
 1809094:	dfc00315 	stw	ra,12(sp)
 1809098:	2023883a 	mov	r17,r4
 180909c:	80000226 	beq	r16,zero,18090a8 <fputwc+0x2c>
 18090a0:	80800e17 	ldw	r2,56(r16)
 18090a4:	10001026 	beq	r2,zero,18090e8 <fputwc+0x6c>
 18090a8:	2880030b 	ldhu	r2,12(r5)
 18090ac:	10c8000c 	andi	r3,r2,8192
 18090b0:	1800051e 	bne	r3,zero,18090c8 <fputwc+0x4c>
 18090b4:	28c01917 	ldw	r3,100(r5)
 18090b8:	10880014 	ori	r2,r2,8192
 18090bc:	2880030d 	sth	r2,12(r5)
 18090c0:	18880014 	ori	r2,r3,8192
 18090c4:	28801915 	stw	r2,100(r5)
 18090c8:	280d883a 	mov	r6,r5
 18090cc:	8009883a 	mov	r4,r16
 18090d0:	880b883a 	mov	r5,r17
 18090d4:	dfc00317 	ldw	ra,12(sp)
 18090d8:	dc400217 	ldw	r17,8(sp)
 18090dc:	dc000117 	ldw	r16,4(sp)
 18090e0:	dec00404 	addi	sp,sp,16
 18090e4:	1808ef41 	jmpi	1808ef4 <__fputwc>
 18090e8:	8009883a 	mov	r4,r16
 18090ec:	d9400015 	stw	r5,0(sp)
 18090f0:	1804eb80 	call	1804eb8 <__sinit>
 18090f4:	d9400017 	ldw	r5,0(sp)
 18090f8:	003feb06 	br	18090a8 <__alt_mem_mem_0+0xff7e90a8>

018090fc <_fstat_r>:
 18090fc:	defffd04 	addi	sp,sp,-12
 1809100:	2805883a 	mov	r2,r5
 1809104:	dc000015 	stw	r16,0(sp)
 1809108:	04006134 	movhi	r16,388
 180910c:	dc400115 	stw	r17,4(sp)
 1809110:	841cc104 	addi	r16,r16,29444
 1809114:	2023883a 	mov	r17,r4
 1809118:	300b883a 	mov	r5,r6
 180911c:	1009883a 	mov	r4,r2
 1809120:	dfc00215 	stw	ra,8(sp)
 1809124:	80000015 	stw	zero,0(r16)
 1809128:	18124dc0 	call	18124dc <fstat>
 180912c:	00ffffc4 	movi	r3,-1
 1809130:	10c00526 	beq	r2,r3,1809148 <_fstat_r+0x4c>
 1809134:	dfc00217 	ldw	ra,8(sp)
 1809138:	dc400117 	ldw	r17,4(sp)
 180913c:	dc000017 	ldw	r16,0(sp)
 1809140:	dec00304 	addi	sp,sp,12
 1809144:	f800283a 	ret
 1809148:	80c00017 	ldw	r3,0(r16)
 180914c:	183ff926 	beq	r3,zero,1809134 <__alt_mem_mem_0+0xff7e9134>
 1809150:	88c00015 	stw	r3,0(r17)
 1809154:	003ff706 	br	1809134 <__alt_mem_mem_0+0xff7e9134>

01809158 <__sfvwrite_r>:
 1809158:	30800217 	ldw	r2,8(r6)
 180915c:	10006726 	beq	r2,zero,18092fc <__sfvwrite_r+0x1a4>
 1809160:	28c0030b 	ldhu	r3,12(r5)
 1809164:	defff404 	addi	sp,sp,-48
 1809168:	dd400715 	stw	r21,28(sp)
 180916c:	dd000615 	stw	r20,24(sp)
 1809170:	dc000215 	stw	r16,8(sp)
 1809174:	dfc00b15 	stw	ra,44(sp)
 1809178:	df000a15 	stw	fp,40(sp)
 180917c:	ddc00915 	stw	r23,36(sp)
 1809180:	dd800815 	stw	r22,32(sp)
 1809184:	dcc00515 	stw	r19,20(sp)
 1809188:	dc800415 	stw	r18,16(sp)
 180918c:	dc400315 	stw	r17,12(sp)
 1809190:	1880020c 	andi	r2,r3,8
 1809194:	2821883a 	mov	r16,r5
 1809198:	202b883a 	mov	r21,r4
 180919c:	3029883a 	mov	r20,r6
 18091a0:	10002726 	beq	r2,zero,1809240 <__sfvwrite_r+0xe8>
 18091a4:	28800417 	ldw	r2,16(r5)
 18091a8:	10002526 	beq	r2,zero,1809240 <__sfvwrite_r+0xe8>
 18091ac:	1880008c 	andi	r2,r3,2
 18091b0:	a4400017 	ldw	r17,0(r20)
 18091b4:	10002a26 	beq	r2,zero,1809260 <__sfvwrite_r+0x108>
 18091b8:	05a00034 	movhi	r22,32768
 18091bc:	0027883a 	mov	r19,zero
 18091c0:	0025883a 	mov	r18,zero
 18091c4:	b5bf0004 	addi	r22,r22,-1024
 18091c8:	980d883a 	mov	r6,r19
 18091cc:	a809883a 	mov	r4,r21
 18091d0:	90004626 	beq	r18,zero,18092ec <__sfvwrite_r+0x194>
 18091d4:	900f883a 	mov	r7,r18
 18091d8:	b480022e 	bgeu	r22,r18,18091e4 <__sfvwrite_r+0x8c>
 18091dc:	01e00034 	movhi	r7,32768
 18091e0:	39ff0004 	addi	r7,r7,-1024
 18091e4:	80800917 	ldw	r2,36(r16)
 18091e8:	81400717 	ldw	r5,28(r16)
 18091ec:	103ee83a 	callr	r2
 18091f0:	0080570e 	bge	zero,r2,1809350 <__sfvwrite_r+0x1f8>
 18091f4:	a0c00217 	ldw	r3,8(r20)
 18091f8:	98a7883a 	add	r19,r19,r2
 18091fc:	90a5c83a 	sub	r18,r18,r2
 1809200:	1885c83a 	sub	r2,r3,r2
 1809204:	a0800215 	stw	r2,8(r20)
 1809208:	103fef1e 	bne	r2,zero,18091c8 <__alt_mem_mem_0+0xff7e91c8>
 180920c:	0005883a 	mov	r2,zero
 1809210:	dfc00b17 	ldw	ra,44(sp)
 1809214:	df000a17 	ldw	fp,40(sp)
 1809218:	ddc00917 	ldw	r23,36(sp)
 180921c:	dd800817 	ldw	r22,32(sp)
 1809220:	dd400717 	ldw	r21,28(sp)
 1809224:	dd000617 	ldw	r20,24(sp)
 1809228:	dcc00517 	ldw	r19,20(sp)
 180922c:	dc800417 	ldw	r18,16(sp)
 1809230:	dc400317 	ldw	r17,12(sp)
 1809234:	dc000217 	ldw	r16,8(sp)
 1809238:	dec00c04 	addi	sp,sp,48
 180923c:	f800283a 	ret
 1809240:	800b883a 	mov	r5,r16
 1809244:	a809883a 	mov	r4,r21
 1809248:	1802ee40 	call	1802ee4 <__swsetup_r>
 180924c:	1000eb1e 	bne	r2,zero,18095fc <__sfvwrite_r+0x4a4>
 1809250:	80c0030b 	ldhu	r3,12(r16)
 1809254:	a4400017 	ldw	r17,0(r20)
 1809258:	1880008c 	andi	r2,r3,2
 180925c:	103fd61e 	bne	r2,zero,18091b8 <__alt_mem_mem_0+0xff7e91b8>
 1809260:	1880004c 	andi	r2,r3,1
 1809264:	10003f1e 	bne	r2,zero,1809364 <__sfvwrite_r+0x20c>
 1809268:	0039883a 	mov	fp,zero
 180926c:	0025883a 	mov	r18,zero
 1809270:	90001a26 	beq	r18,zero,18092dc <__sfvwrite_r+0x184>
 1809274:	1880800c 	andi	r2,r3,512
 1809278:	84c00217 	ldw	r19,8(r16)
 180927c:	10002126 	beq	r2,zero,1809304 <__sfvwrite_r+0x1ac>
 1809280:	982f883a 	mov	r23,r19
 1809284:	94c09336 	bltu	r18,r19,18094d4 <__sfvwrite_r+0x37c>
 1809288:	1881200c 	andi	r2,r3,1152
 180928c:	10009e1e 	bne	r2,zero,1809508 <__sfvwrite_r+0x3b0>
 1809290:	81000017 	ldw	r4,0(r16)
 1809294:	b80d883a 	mov	r6,r23
 1809298:	e00b883a 	mov	r5,fp
 180929c:	18096c80 	call	18096c8 <memmove>
 18092a0:	80c00217 	ldw	r3,8(r16)
 18092a4:	81000017 	ldw	r4,0(r16)
 18092a8:	9005883a 	mov	r2,r18
 18092ac:	1ce7c83a 	sub	r19,r3,r19
 18092b0:	25cf883a 	add	r7,r4,r23
 18092b4:	84c00215 	stw	r19,8(r16)
 18092b8:	81c00015 	stw	r7,0(r16)
 18092bc:	a0c00217 	ldw	r3,8(r20)
 18092c0:	e0b9883a 	add	fp,fp,r2
 18092c4:	90a5c83a 	sub	r18,r18,r2
 18092c8:	18a7c83a 	sub	r19,r3,r2
 18092cc:	a4c00215 	stw	r19,8(r20)
 18092d0:	983fce26 	beq	r19,zero,180920c <__alt_mem_mem_0+0xff7e920c>
 18092d4:	80c0030b 	ldhu	r3,12(r16)
 18092d8:	903fe61e 	bne	r18,zero,1809274 <__alt_mem_mem_0+0xff7e9274>
 18092dc:	8f000017 	ldw	fp,0(r17)
 18092e0:	8c800117 	ldw	r18,4(r17)
 18092e4:	8c400204 	addi	r17,r17,8
 18092e8:	003fe106 	br	1809270 <__alt_mem_mem_0+0xff7e9270>
 18092ec:	8cc00017 	ldw	r19,0(r17)
 18092f0:	8c800117 	ldw	r18,4(r17)
 18092f4:	8c400204 	addi	r17,r17,8
 18092f8:	003fb306 	br	18091c8 <__alt_mem_mem_0+0xff7e91c8>
 18092fc:	0005883a 	mov	r2,zero
 1809300:	f800283a 	ret
 1809304:	81000017 	ldw	r4,0(r16)
 1809308:	80800417 	ldw	r2,16(r16)
 180930c:	11005736 	bltu	r2,r4,180946c <__sfvwrite_r+0x314>
 1809310:	85c00517 	ldw	r23,20(r16)
 1809314:	95c05536 	bltu	r18,r23,180946c <__sfvwrite_r+0x314>
 1809318:	00a00034 	movhi	r2,32768
 180931c:	10bfffc4 	addi	r2,r2,-1
 1809320:	9009883a 	mov	r4,r18
 1809324:	1480012e 	bgeu	r2,r18,180932c <__sfvwrite_r+0x1d4>
 1809328:	1009883a 	mov	r4,r2
 180932c:	b80b883a 	mov	r5,r23
 1809330:	180abd80 	call	180abd8 <__divsi3>
 1809334:	15cf383a 	mul	r7,r2,r23
 1809338:	81400717 	ldw	r5,28(r16)
 180933c:	80800917 	ldw	r2,36(r16)
 1809340:	e00d883a 	mov	r6,fp
 1809344:	a809883a 	mov	r4,r21
 1809348:	103ee83a 	callr	r2
 180934c:	00bfdb16 	blt	zero,r2,18092bc <__alt_mem_mem_0+0xff7e92bc>
 1809350:	8080030b 	ldhu	r2,12(r16)
 1809354:	10801014 	ori	r2,r2,64
 1809358:	8080030d 	sth	r2,12(r16)
 180935c:	00bfffc4 	movi	r2,-1
 1809360:	003fab06 	br	1809210 <__alt_mem_mem_0+0xff7e9210>
 1809364:	0027883a 	mov	r19,zero
 1809368:	0011883a 	mov	r8,zero
 180936c:	0039883a 	mov	fp,zero
 1809370:	0025883a 	mov	r18,zero
 1809374:	90001f26 	beq	r18,zero,18093f4 <__sfvwrite_r+0x29c>
 1809378:	40005a26 	beq	r8,zero,18094e4 <__sfvwrite_r+0x38c>
 180937c:	982d883a 	mov	r22,r19
 1809380:	94c0012e 	bgeu	r18,r19,1809388 <__sfvwrite_r+0x230>
 1809384:	902d883a 	mov	r22,r18
 1809388:	81000017 	ldw	r4,0(r16)
 180938c:	80800417 	ldw	r2,16(r16)
 1809390:	b02f883a 	mov	r23,r22
 1809394:	81c00517 	ldw	r7,20(r16)
 1809398:	1100032e 	bgeu	r2,r4,18093a8 <__sfvwrite_r+0x250>
 180939c:	80c00217 	ldw	r3,8(r16)
 18093a0:	38c7883a 	add	r3,r7,r3
 18093a4:	1d801816 	blt	r3,r22,1809408 <__sfvwrite_r+0x2b0>
 18093a8:	b1c03e16 	blt	r22,r7,18094a4 <__sfvwrite_r+0x34c>
 18093ac:	80800917 	ldw	r2,36(r16)
 18093b0:	81400717 	ldw	r5,28(r16)
 18093b4:	e00d883a 	mov	r6,fp
 18093b8:	da000115 	stw	r8,4(sp)
 18093bc:	a809883a 	mov	r4,r21
 18093c0:	103ee83a 	callr	r2
 18093c4:	102f883a 	mov	r23,r2
 18093c8:	da000117 	ldw	r8,4(sp)
 18093cc:	00bfe00e 	bge	zero,r2,1809350 <__alt_mem_mem_0+0xff7e9350>
 18093d0:	9de7c83a 	sub	r19,r19,r23
 18093d4:	98001f26 	beq	r19,zero,1809454 <__sfvwrite_r+0x2fc>
 18093d8:	a0800217 	ldw	r2,8(r20)
 18093dc:	e5f9883a 	add	fp,fp,r23
 18093e0:	95e5c83a 	sub	r18,r18,r23
 18093e4:	15efc83a 	sub	r23,r2,r23
 18093e8:	a5c00215 	stw	r23,8(r20)
 18093ec:	b83f8726 	beq	r23,zero,180920c <__alt_mem_mem_0+0xff7e920c>
 18093f0:	903fe11e 	bne	r18,zero,1809378 <__alt_mem_mem_0+0xff7e9378>
 18093f4:	8f000017 	ldw	fp,0(r17)
 18093f8:	8c800117 	ldw	r18,4(r17)
 18093fc:	0011883a 	mov	r8,zero
 1809400:	8c400204 	addi	r17,r17,8
 1809404:	003fdb06 	br	1809374 <__alt_mem_mem_0+0xff7e9374>
 1809408:	180d883a 	mov	r6,r3
 180940c:	e00b883a 	mov	r5,fp
 1809410:	da000115 	stw	r8,4(sp)
 1809414:	d8c00015 	stw	r3,0(sp)
 1809418:	18096c80 	call	18096c8 <memmove>
 180941c:	d8c00017 	ldw	r3,0(sp)
 1809420:	80800017 	ldw	r2,0(r16)
 1809424:	800b883a 	mov	r5,r16
 1809428:	a809883a 	mov	r4,r21
 180942c:	10c5883a 	add	r2,r2,r3
 1809430:	80800015 	stw	r2,0(r16)
 1809434:	d8c00015 	stw	r3,0(sp)
 1809438:	1804adc0 	call	1804adc <_fflush_r>
 180943c:	d8c00017 	ldw	r3,0(sp)
 1809440:	da000117 	ldw	r8,4(sp)
 1809444:	103fc21e 	bne	r2,zero,1809350 <__alt_mem_mem_0+0xff7e9350>
 1809448:	182f883a 	mov	r23,r3
 180944c:	9de7c83a 	sub	r19,r19,r23
 1809450:	983fe11e 	bne	r19,zero,18093d8 <__alt_mem_mem_0+0xff7e93d8>
 1809454:	800b883a 	mov	r5,r16
 1809458:	a809883a 	mov	r4,r21
 180945c:	1804adc0 	call	1804adc <_fflush_r>
 1809460:	103fbb1e 	bne	r2,zero,1809350 <__alt_mem_mem_0+0xff7e9350>
 1809464:	0011883a 	mov	r8,zero
 1809468:	003fdb06 	br	18093d8 <__alt_mem_mem_0+0xff7e93d8>
 180946c:	94c0012e 	bgeu	r18,r19,1809474 <__sfvwrite_r+0x31c>
 1809470:	9027883a 	mov	r19,r18
 1809474:	980d883a 	mov	r6,r19
 1809478:	e00b883a 	mov	r5,fp
 180947c:	18096c80 	call	18096c8 <memmove>
 1809480:	80800217 	ldw	r2,8(r16)
 1809484:	80c00017 	ldw	r3,0(r16)
 1809488:	14c5c83a 	sub	r2,r2,r19
 180948c:	1cc7883a 	add	r3,r3,r19
 1809490:	80800215 	stw	r2,8(r16)
 1809494:	80c00015 	stw	r3,0(r16)
 1809498:	10004326 	beq	r2,zero,18095a8 <__sfvwrite_r+0x450>
 180949c:	9805883a 	mov	r2,r19
 18094a0:	003f8606 	br	18092bc <__alt_mem_mem_0+0xff7e92bc>
 18094a4:	b00d883a 	mov	r6,r22
 18094a8:	e00b883a 	mov	r5,fp
 18094ac:	da000115 	stw	r8,4(sp)
 18094b0:	18096c80 	call	18096c8 <memmove>
 18094b4:	80800217 	ldw	r2,8(r16)
 18094b8:	80c00017 	ldw	r3,0(r16)
 18094bc:	da000117 	ldw	r8,4(sp)
 18094c0:	1585c83a 	sub	r2,r2,r22
 18094c4:	1dad883a 	add	r22,r3,r22
 18094c8:	80800215 	stw	r2,8(r16)
 18094cc:	85800015 	stw	r22,0(r16)
 18094d0:	003fbf06 	br	18093d0 <__alt_mem_mem_0+0xff7e93d0>
 18094d4:	81000017 	ldw	r4,0(r16)
 18094d8:	9027883a 	mov	r19,r18
 18094dc:	902f883a 	mov	r23,r18
 18094e0:	003f6c06 	br	1809294 <__alt_mem_mem_0+0xff7e9294>
 18094e4:	900d883a 	mov	r6,r18
 18094e8:	01400284 	movi	r5,10
 18094ec:	e009883a 	mov	r4,fp
 18094f0:	1805f680 	call	1805f68 <memchr>
 18094f4:	10003e26 	beq	r2,zero,18095f0 <__sfvwrite_r+0x498>
 18094f8:	10800044 	addi	r2,r2,1
 18094fc:	1727c83a 	sub	r19,r2,fp
 1809500:	02000044 	movi	r8,1
 1809504:	003f9d06 	br	180937c <__alt_mem_mem_0+0xff7e937c>
 1809508:	80800517 	ldw	r2,20(r16)
 180950c:	81400417 	ldw	r5,16(r16)
 1809510:	81c00017 	ldw	r7,0(r16)
 1809514:	10a7883a 	add	r19,r2,r2
 1809518:	9885883a 	add	r2,r19,r2
 180951c:	1026d7fa 	srli	r19,r2,31
 1809520:	396dc83a 	sub	r22,r7,r5
 1809524:	b1000044 	addi	r4,r22,1
 1809528:	9885883a 	add	r2,r19,r2
 180952c:	1027d07a 	srai	r19,r2,1
 1809530:	2485883a 	add	r2,r4,r18
 1809534:	980d883a 	mov	r6,r19
 1809538:	9880022e 	bgeu	r19,r2,1809544 <__sfvwrite_r+0x3ec>
 180953c:	1027883a 	mov	r19,r2
 1809540:	100d883a 	mov	r6,r2
 1809544:	18c1000c 	andi	r3,r3,1024
 1809548:	18001c26 	beq	r3,zero,18095bc <__sfvwrite_r+0x464>
 180954c:	300b883a 	mov	r5,r6
 1809550:	a809883a 	mov	r4,r21
 1809554:	180575c0 	call	180575c <_malloc_r>
 1809558:	102f883a 	mov	r23,r2
 180955c:	10002926 	beq	r2,zero,1809604 <__sfvwrite_r+0x4ac>
 1809560:	81400417 	ldw	r5,16(r16)
 1809564:	b00d883a 	mov	r6,r22
 1809568:	1009883a 	mov	r4,r2
 180956c:	180604c0 	call	180604c <memcpy>
 1809570:	8080030b 	ldhu	r2,12(r16)
 1809574:	00fedfc4 	movi	r3,-1153
 1809578:	10c4703a 	and	r2,r2,r3
 180957c:	10802014 	ori	r2,r2,128
 1809580:	8080030d 	sth	r2,12(r16)
 1809584:	bd89883a 	add	r4,r23,r22
 1809588:	9d8fc83a 	sub	r7,r19,r22
 180958c:	85c00415 	stw	r23,16(r16)
 1809590:	84c00515 	stw	r19,20(r16)
 1809594:	81000015 	stw	r4,0(r16)
 1809598:	9027883a 	mov	r19,r18
 180959c:	81c00215 	stw	r7,8(r16)
 18095a0:	902f883a 	mov	r23,r18
 18095a4:	003f3b06 	br	1809294 <__alt_mem_mem_0+0xff7e9294>
 18095a8:	800b883a 	mov	r5,r16
 18095ac:	a809883a 	mov	r4,r21
 18095b0:	1804adc0 	call	1804adc <_fflush_r>
 18095b4:	103fb926 	beq	r2,zero,180949c <__alt_mem_mem_0+0xff7e949c>
 18095b8:	003f6506 	br	1809350 <__alt_mem_mem_0+0xff7e9350>
 18095bc:	a809883a 	mov	r4,r21
 18095c0:	18098840 	call	1809884 <_realloc_r>
 18095c4:	102f883a 	mov	r23,r2
 18095c8:	103fee1e 	bne	r2,zero,1809584 <__alt_mem_mem_0+0xff7e9584>
 18095cc:	81400417 	ldw	r5,16(r16)
 18095d0:	a809883a 	mov	r4,r21
 18095d4:	180502c0 	call	180502c <_free_r>
 18095d8:	8080030b 	ldhu	r2,12(r16)
 18095dc:	00ffdfc4 	movi	r3,-129
 18095e0:	1884703a 	and	r2,r3,r2
 18095e4:	00c00304 	movi	r3,12
 18095e8:	a8c00015 	stw	r3,0(r21)
 18095ec:	003f5906 	br	1809354 <__alt_mem_mem_0+0xff7e9354>
 18095f0:	94c00044 	addi	r19,r18,1
 18095f4:	02000044 	movi	r8,1
 18095f8:	003f6006 	br	180937c <__alt_mem_mem_0+0xff7e937c>
 18095fc:	00bfffc4 	movi	r2,-1
 1809600:	003f0306 	br	1809210 <__alt_mem_mem_0+0xff7e9210>
 1809604:	00800304 	movi	r2,12
 1809608:	a8800015 	stw	r2,0(r21)
 180960c:	8080030b 	ldhu	r2,12(r16)
 1809610:	003f5006 	br	1809354 <__alt_mem_mem_0+0xff7e9354>

01809614 <_isatty_r>:
 1809614:	defffd04 	addi	sp,sp,-12
 1809618:	dc000015 	stw	r16,0(sp)
 180961c:	04006134 	movhi	r16,388
 1809620:	dc400115 	stw	r17,4(sp)
 1809624:	841cc104 	addi	r16,r16,29444
 1809628:	2023883a 	mov	r17,r4
 180962c:	2809883a 	mov	r4,r5
 1809630:	dfc00215 	stw	ra,8(sp)
 1809634:	80000015 	stw	zero,0(r16)
 1809638:	18127080 	call	1812708 <isatty>
 180963c:	00ffffc4 	movi	r3,-1
 1809640:	10c00526 	beq	r2,r3,1809658 <_isatty_r+0x44>
 1809644:	dfc00217 	ldw	ra,8(sp)
 1809648:	dc400117 	ldw	r17,4(sp)
 180964c:	dc000017 	ldw	r16,0(sp)
 1809650:	dec00304 	addi	sp,sp,12
 1809654:	f800283a 	ret
 1809658:	80c00017 	ldw	r3,0(r16)
 180965c:	183ff926 	beq	r3,zero,1809644 <__alt_mem_mem_0+0xff7e9644>
 1809660:	88c00015 	stw	r3,0(r17)
 1809664:	003ff706 	br	1809644 <__alt_mem_mem_0+0xff7e9644>

01809668 <_lseek_r>:
 1809668:	defffd04 	addi	sp,sp,-12
 180966c:	2805883a 	mov	r2,r5
 1809670:	dc000015 	stw	r16,0(sp)
 1809674:	04006134 	movhi	r16,388
 1809678:	dc400115 	stw	r17,4(sp)
 180967c:	300b883a 	mov	r5,r6
 1809680:	841cc104 	addi	r16,r16,29444
 1809684:	2023883a 	mov	r17,r4
 1809688:	380d883a 	mov	r6,r7
 180968c:	1009883a 	mov	r4,r2
 1809690:	dfc00215 	stw	ra,8(sp)
 1809694:	80000015 	stw	zero,0(r16)
 1809698:	18128d40 	call	18128d4 <lseek>
 180969c:	00ffffc4 	movi	r3,-1
 18096a0:	10c00526 	beq	r2,r3,18096b8 <_lseek_r+0x50>
 18096a4:	dfc00217 	ldw	ra,8(sp)
 18096a8:	dc400117 	ldw	r17,4(sp)
 18096ac:	dc000017 	ldw	r16,0(sp)
 18096b0:	dec00304 	addi	sp,sp,12
 18096b4:	f800283a 	ret
 18096b8:	80c00017 	ldw	r3,0(r16)
 18096bc:	183ff926 	beq	r3,zero,18096a4 <__alt_mem_mem_0+0xff7e96a4>
 18096c0:	88c00015 	stw	r3,0(r17)
 18096c4:	003ff706 	br	18096a4 <__alt_mem_mem_0+0xff7e96a4>

018096c8 <memmove>:
 18096c8:	2005883a 	mov	r2,r4
 18096cc:	29000b2e 	bgeu	r5,r4,18096fc <memmove+0x34>
 18096d0:	298f883a 	add	r7,r5,r6
 18096d4:	21c0092e 	bgeu	r4,r7,18096fc <memmove+0x34>
 18096d8:	2187883a 	add	r3,r4,r6
 18096dc:	198bc83a 	sub	r5,r3,r6
 18096e0:	30004826 	beq	r6,zero,1809804 <memmove+0x13c>
 18096e4:	39ffffc4 	addi	r7,r7,-1
 18096e8:	39000003 	ldbu	r4,0(r7)
 18096ec:	18ffffc4 	addi	r3,r3,-1
 18096f0:	19000005 	stb	r4,0(r3)
 18096f4:	28fffb1e 	bne	r5,r3,18096e4 <__alt_mem_mem_0+0xff7e96e4>
 18096f8:	f800283a 	ret
 18096fc:	00c003c4 	movi	r3,15
 1809700:	1980412e 	bgeu	r3,r6,1809808 <memmove+0x140>
 1809704:	2886b03a 	or	r3,r5,r2
 1809708:	18c000cc 	andi	r3,r3,3
 180970c:	1800401e 	bne	r3,zero,1809810 <memmove+0x148>
 1809710:	33fffc04 	addi	r15,r6,-16
 1809714:	781ed13a 	srli	r15,r15,4
 1809718:	28c00104 	addi	r3,r5,4
 180971c:	13400104 	addi	r13,r2,4
 1809720:	781c913a 	slli	r14,r15,4
 1809724:	2b000204 	addi	r12,r5,8
 1809728:	12c00204 	addi	r11,r2,8
 180972c:	73800504 	addi	r14,r14,20
 1809730:	2a800304 	addi	r10,r5,12
 1809734:	12400304 	addi	r9,r2,12
 1809738:	2b9d883a 	add	r14,r5,r14
 180973c:	2811883a 	mov	r8,r5
 1809740:	100f883a 	mov	r7,r2
 1809744:	41000017 	ldw	r4,0(r8)
 1809748:	39c00404 	addi	r7,r7,16
 180974c:	18c00404 	addi	r3,r3,16
 1809750:	393ffc15 	stw	r4,-16(r7)
 1809754:	193ffc17 	ldw	r4,-16(r3)
 1809758:	6b400404 	addi	r13,r13,16
 180975c:	5ac00404 	addi	r11,r11,16
 1809760:	693ffc15 	stw	r4,-16(r13)
 1809764:	61000017 	ldw	r4,0(r12)
 1809768:	4a400404 	addi	r9,r9,16
 180976c:	42000404 	addi	r8,r8,16
 1809770:	593ffc15 	stw	r4,-16(r11)
 1809774:	51000017 	ldw	r4,0(r10)
 1809778:	63000404 	addi	r12,r12,16
 180977c:	52800404 	addi	r10,r10,16
 1809780:	493ffc15 	stw	r4,-16(r9)
 1809784:	1bbfef1e 	bne	r3,r14,1809744 <__alt_mem_mem_0+0xff7e9744>
 1809788:	79000044 	addi	r4,r15,1
 180978c:	2008913a 	slli	r4,r4,4
 1809790:	328003cc 	andi	r10,r6,15
 1809794:	02c000c4 	movi	r11,3
 1809798:	1107883a 	add	r3,r2,r4
 180979c:	290b883a 	add	r5,r5,r4
 18097a0:	5a801e2e 	bgeu	r11,r10,180981c <memmove+0x154>
 18097a4:	1813883a 	mov	r9,r3
 18097a8:	2811883a 	mov	r8,r5
 18097ac:	500f883a 	mov	r7,r10
 18097b0:	41000017 	ldw	r4,0(r8)
 18097b4:	4a400104 	addi	r9,r9,4
 18097b8:	39ffff04 	addi	r7,r7,-4
 18097bc:	493fff15 	stw	r4,-4(r9)
 18097c0:	42000104 	addi	r8,r8,4
 18097c4:	59fffa36 	bltu	r11,r7,18097b0 <__alt_mem_mem_0+0xff7e97b0>
 18097c8:	513fff04 	addi	r4,r10,-4
 18097cc:	2008d0ba 	srli	r4,r4,2
 18097d0:	318000cc 	andi	r6,r6,3
 18097d4:	21000044 	addi	r4,r4,1
 18097d8:	2109883a 	add	r4,r4,r4
 18097dc:	2109883a 	add	r4,r4,r4
 18097e0:	1907883a 	add	r3,r3,r4
 18097e4:	290b883a 	add	r5,r5,r4
 18097e8:	30000b26 	beq	r6,zero,1809818 <memmove+0x150>
 18097ec:	198d883a 	add	r6,r3,r6
 18097f0:	29c00003 	ldbu	r7,0(r5)
 18097f4:	18c00044 	addi	r3,r3,1
 18097f8:	29400044 	addi	r5,r5,1
 18097fc:	19ffffc5 	stb	r7,-1(r3)
 1809800:	19bffb1e 	bne	r3,r6,18097f0 <__alt_mem_mem_0+0xff7e97f0>
 1809804:	f800283a 	ret
 1809808:	1007883a 	mov	r3,r2
 180980c:	003ff606 	br	18097e8 <__alt_mem_mem_0+0xff7e97e8>
 1809810:	1007883a 	mov	r3,r2
 1809814:	003ff506 	br	18097ec <__alt_mem_mem_0+0xff7e97ec>
 1809818:	f800283a 	ret
 180981c:	500d883a 	mov	r6,r10
 1809820:	003ff106 	br	18097e8 <__alt_mem_mem_0+0xff7e97e8>

01809824 <_read_r>:
 1809824:	defffd04 	addi	sp,sp,-12
 1809828:	2805883a 	mov	r2,r5
 180982c:	dc000015 	stw	r16,0(sp)
 1809830:	04006134 	movhi	r16,388
 1809834:	dc400115 	stw	r17,4(sp)
 1809838:	300b883a 	mov	r5,r6
 180983c:	841cc104 	addi	r16,r16,29444
 1809840:	2023883a 	mov	r17,r4
 1809844:	380d883a 	mov	r6,r7
 1809848:	1009883a 	mov	r4,r2
 180984c:	dfc00215 	stw	ra,8(sp)
 1809850:	80000015 	stw	zero,0(r16)
 1809854:	1812fc00 	call	1812fc0 <read>
 1809858:	00ffffc4 	movi	r3,-1
 180985c:	10c00526 	beq	r2,r3,1809874 <_read_r+0x50>
 1809860:	dfc00217 	ldw	ra,8(sp)
 1809864:	dc400117 	ldw	r17,4(sp)
 1809868:	dc000017 	ldw	r16,0(sp)
 180986c:	dec00304 	addi	sp,sp,12
 1809870:	f800283a 	ret
 1809874:	80c00017 	ldw	r3,0(r16)
 1809878:	183ff926 	beq	r3,zero,1809860 <__alt_mem_mem_0+0xff7e9860>
 180987c:	88c00015 	stw	r3,0(r17)
 1809880:	003ff706 	br	1809860 <__alt_mem_mem_0+0xff7e9860>

01809884 <_realloc_r>:
 1809884:	defff604 	addi	sp,sp,-40
 1809888:	dc800215 	stw	r18,8(sp)
 180988c:	dfc00915 	stw	ra,36(sp)
 1809890:	df000815 	stw	fp,32(sp)
 1809894:	ddc00715 	stw	r23,28(sp)
 1809898:	dd800615 	stw	r22,24(sp)
 180989c:	dd400515 	stw	r21,20(sp)
 18098a0:	dd000415 	stw	r20,16(sp)
 18098a4:	dcc00315 	stw	r19,12(sp)
 18098a8:	dc400115 	stw	r17,4(sp)
 18098ac:	dc000015 	stw	r16,0(sp)
 18098b0:	3025883a 	mov	r18,r6
 18098b4:	2800b726 	beq	r5,zero,1809b94 <_realloc_r+0x310>
 18098b8:	282b883a 	mov	r21,r5
 18098bc:	2029883a 	mov	r20,r4
 18098c0:	180d50c0 	call	180d50c <__malloc_lock>
 18098c4:	a8bfff17 	ldw	r2,-4(r21)
 18098c8:	043fff04 	movi	r16,-4
 18098cc:	90c002c4 	addi	r3,r18,11
 18098d0:	01000584 	movi	r4,22
 18098d4:	acfffe04 	addi	r19,r21,-8
 18098d8:	1420703a 	and	r16,r2,r16
 18098dc:	20c0332e 	bgeu	r4,r3,18099ac <_realloc_r+0x128>
 18098e0:	047ffe04 	movi	r17,-8
 18098e4:	1c62703a 	and	r17,r3,r17
 18098e8:	8807883a 	mov	r3,r17
 18098ec:	88005816 	blt	r17,zero,1809a50 <_realloc_r+0x1cc>
 18098f0:	8c805736 	bltu	r17,r18,1809a50 <_realloc_r+0x1cc>
 18098f4:	80c0300e 	bge	r16,r3,18099b8 <_realloc_r+0x134>
 18098f8:	07006134 	movhi	fp,388
 18098fc:	e70e9204 	addi	fp,fp,14920
 1809900:	e1c00217 	ldw	r7,8(fp)
 1809904:	9c09883a 	add	r4,r19,r16
 1809908:	22000117 	ldw	r8,4(r4)
 180990c:	21c06326 	beq	r4,r7,1809a9c <_realloc_r+0x218>
 1809910:	017fff84 	movi	r5,-2
 1809914:	414a703a 	and	r5,r8,r5
 1809918:	214b883a 	add	r5,r4,r5
 180991c:	29800117 	ldw	r6,4(r5)
 1809920:	3180004c 	andi	r6,r6,1
 1809924:	30003f26 	beq	r6,zero,1809a24 <_realloc_r+0x1a0>
 1809928:	1080004c 	andi	r2,r2,1
 180992c:	10008326 	beq	r2,zero,1809b3c <_realloc_r+0x2b8>
 1809930:	900b883a 	mov	r5,r18
 1809934:	a009883a 	mov	r4,r20
 1809938:	180575c0 	call	180575c <_malloc_r>
 180993c:	1025883a 	mov	r18,r2
 1809940:	10011e26 	beq	r2,zero,1809dbc <_realloc_r+0x538>
 1809944:	a93fff17 	ldw	r4,-4(r21)
 1809948:	10fffe04 	addi	r3,r2,-8
 180994c:	00bfff84 	movi	r2,-2
 1809950:	2084703a 	and	r2,r4,r2
 1809954:	9885883a 	add	r2,r19,r2
 1809958:	1880ee26 	beq	r3,r2,1809d14 <_realloc_r+0x490>
 180995c:	81bfff04 	addi	r6,r16,-4
 1809960:	00800904 	movi	r2,36
 1809964:	1180b836 	bltu	r2,r6,1809c48 <_realloc_r+0x3c4>
 1809968:	00c004c4 	movi	r3,19
 180996c:	19809636 	bltu	r3,r6,1809bc8 <_realloc_r+0x344>
 1809970:	9005883a 	mov	r2,r18
 1809974:	a807883a 	mov	r3,r21
 1809978:	19000017 	ldw	r4,0(r3)
 180997c:	11000015 	stw	r4,0(r2)
 1809980:	19000117 	ldw	r4,4(r3)
 1809984:	11000115 	stw	r4,4(r2)
 1809988:	18c00217 	ldw	r3,8(r3)
 180998c:	10c00215 	stw	r3,8(r2)
 1809990:	a80b883a 	mov	r5,r21
 1809994:	a009883a 	mov	r4,r20
 1809998:	180502c0 	call	180502c <_free_r>
 180999c:	a009883a 	mov	r4,r20
 18099a0:	180d56c0 	call	180d56c <__malloc_unlock>
 18099a4:	9005883a 	mov	r2,r18
 18099a8:	00001206 	br	18099f4 <_realloc_r+0x170>
 18099ac:	00c00404 	movi	r3,16
 18099b0:	1823883a 	mov	r17,r3
 18099b4:	003fce06 	br	18098f0 <__alt_mem_mem_0+0xff7e98f0>
 18099b8:	a825883a 	mov	r18,r21
 18099bc:	8445c83a 	sub	r2,r16,r17
 18099c0:	00c003c4 	movi	r3,15
 18099c4:	18802636 	bltu	r3,r2,1809a60 <_realloc_r+0x1dc>
 18099c8:	99800117 	ldw	r6,4(r19)
 18099cc:	9c07883a 	add	r3,r19,r16
 18099d0:	3180004c 	andi	r6,r6,1
 18099d4:	3420b03a 	or	r16,r6,r16
 18099d8:	9c000115 	stw	r16,4(r19)
 18099dc:	18800117 	ldw	r2,4(r3)
 18099e0:	10800054 	ori	r2,r2,1
 18099e4:	18800115 	stw	r2,4(r3)
 18099e8:	a009883a 	mov	r4,r20
 18099ec:	180d56c0 	call	180d56c <__malloc_unlock>
 18099f0:	9005883a 	mov	r2,r18
 18099f4:	dfc00917 	ldw	ra,36(sp)
 18099f8:	df000817 	ldw	fp,32(sp)
 18099fc:	ddc00717 	ldw	r23,28(sp)
 1809a00:	dd800617 	ldw	r22,24(sp)
 1809a04:	dd400517 	ldw	r21,20(sp)
 1809a08:	dd000417 	ldw	r20,16(sp)
 1809a0c:	dcc00317 	ldw	r19,12(sp)
 1809a10:	dc800217 	ldw	r18,8(sp)
 1809a14:	dc400117 	ldw	r17,4(sp)
 1809a18:	dc000017 	ldw	r16,0(sp)
 1809a1c:	dec00a04 	addi	sp,sp,40
 1809a20:	f800283a 	ret
 1809a24:	017fff04 	movi	r5,-4
 1809a28:	414a703a 	and	r5,r8,r5
 1809a2c:	814d883a 	add	r6,r16,r5
 1809a30:	30c01f16 	blt	r6,r3,1809ab0 <_realloc_r+0x22c>
 1809a34:	20800317 	ldw	r2,12(r4)
 1809a38:	20c00217 	ldw	r3,8(r4)
 1809a3c:	a825883a 	mov	r18,r21
 1809a40:	3021883a 	mov	r16,r6
 1809a44:	18800315 	stw	r2,12(r3)
 1809a48:	10c00215 	stw	r3,8(r2)
 1809a4c:	003fdb06 	br	18099bc <__alt_mem_mem_0+0xff7e99bc>
 1809a50:	00800304 	movi	r2,12
 1809a54:	a0800015 	stw	r2,0(r20)
 1809a58:	0005883a 	mov	r2,zero
 1809a5c:	003fe506 	br	18099f4 <__alt_mem_mem_0+0xff7e99f4>
 1809a60:	98c00117 	ldw	r3,4(r19)
 1809a64:	9c4b883a 	add	r5,r19,r17
 1809a68:	11000054 	ori	r4,r2,1
 1809a6c:	18c0004c 	andi	r3,r3,1
 1809a70:	1c62b03a 	or	r17,r3,r17
 1809a74:	9c400115 	stw	r17,4(r19)
 1809a78:	29000115 	stw	r4,4(r5)
 1809a7c:	2885883a 	add	r2,r5,r2
 1809a80:	10c00117 	ldw	r3,4(r2)
 1809a84:	29400204 	addi	r5,r5,8
 1809a88:	a009883a 	mov	r4,r20
 1809a8c:	18c00054 	ori	r3,r3,1
 1809a90:	10c00115 	stw	r3,4(r2)
 1809a94:	180502c0 	call	180502c <_free_r>
 1809a98:	003fd306 	br	18099e8 <__alt_mem_mem_0+0xff7e99e8>
 1809a9c:	017fff04 	movi	r5,-4
 1809aa0:	414a703a 	and	r5,r8,r5
 1809aa4:	89800404 	addi	r6,r17,16
 1809aa8:	8151883a 	add	r8,r16,r5
 1809aac:	4180590e 	bge	r8,r6,1809c14 <_realloc_r+0x390>
 1809ab0:	1080004c 	andi	r2,r2,1
 1809ab4:	103f9e1e 	bne	r2,zero,1809930 <__alt_mem_mem_0+0xff7e9930>
 1809ab8:	adbffe17 	ldw	r22,-8(r21)
 1809abc:	00bfff04 	movi	r2,-4
 1809ac0:	9dadc83a 	sub	r22,r19,r22
 1809ac4:	b1800117 	ldw	r6,4(r22)
 1809ac8:	3084703a 	and	r2,r6,r2
 1809acc:	20002026 	beq	r4,zero,1809b50 <_realloc_r+0x2cc>
 1809ad0:	80af883a 	add	r23,r16,r2
 1809ad4:	b96f883a 	add	r23,r23,r5
 1809ad8:	21c05f26 	beq	r4,r7,1809c58 <_realloc_r+0x3d4>
 1809adc:	b8c01c16 	blt	r23,r3,1809b50 <_realloc_r+0x2cc>
 1809ae0:	20800317 	ldw	r2,12(r4)
 1809ae4:	20c00217 	ldw	r3,8(r4)
 1809ae8:	81bfff04 	addi	r6,r16,-4
 1809aec:	01000904 	movi	r4,36
 1809af0:	18800315 	stw	r2,12(r3)
 1809af4:	10c00215 	stw	r3,8(r2)
 1809af8:	b0c00217 	ldw	r3,8(r22)
 1809afc:	b0800317 	ldw	r2,12(r22)
 1809b00:	b4800204 	addi	r18,r22,8
 1809b04:	18800315 	stw	r2,12(r3)
 1809b08:	10c00215 	stw	r3,8(r2)
 1809b0c:	21801b36 	bltu	r4,r6,1809b7c <_realloc_r+0x2f8>
 1809b10:	008004c4 	movi	r2,19
 1809b14:	1180352e 	bgeu	r2,r6,1809bec <_realloc_r+0x368>
 1809b18:	a8800017 	ldw	r2,0(r21)
 1809b1c:	b0800215 	stw	r2,8(r22)
 1809b20:	a8800117 	ldw	r2,4(r21)
 1809b24:	b0800315 	stw	r2,12(r22)
 1809b28:	008006c4 	movi	r2,27
 1809b2c:	11807f36 	bltu	r2,r6,1809d2c <_realloc_r+0x4a8>
 1809b30:	b0800404 	addi	r2,r22,16
 1809b34:	ad400204 	addi	r21,r21,8
 1809b38:	00002d06 	br	1809bf0 <_realloc_r+0x36c>
 1809b3c:	adbffe17 	ldw	r22,-8(r21)
 1809b40:	00bfff04 	movi	r2,-4
 1809b44:	9dadc83a 	sub	r22,r19,r22
 1809b48:	b1000117 	ldw	r4,4(r22)
 1809b4c:	2084703a 	and	r2,r4,r2
 1809b50:	b03f7726 	beq	r22,zero,1809930 <__alt_mem_mem_0+0xff7e9930>
 1809b54:	80af883a 	add	r23,r16,r2
 1809b58:	b8ff7516 	blt	r23,r3,1809930 <__alt_mem_mem_0+0xff7e9930>
 1809b5c:	b0800317 	ldw	r2,12(r22)
 1809b60:	b0c00217 	ldw	r3,8(r22)
 1809b64:	81bfff04 	addi	r6,r16,-4
 1809b68:	01000904 	movi	r4,36
 1809b6c:	18800315 	stw	r2,12(r3)
 1809b70:	10c00215 	stw	r3,8(r2)
 1809b74:	b4800204 	addi	r18,r22,8
 1809b78:	21bfe52e 	bgeu	r4,r6,1809b10 <__alt_mem_mem_0+0xff7e9b10>
 1809b7c:	a80b883a 	mov	r5,r21
 1809b80:	9009883a 	mov	r4,r18
 1809b84:	18096c80 	call	18096c8 <memmove>
 1809b88:	b821883a 	mov	r16,r23
 1809b8c:	b027883a 	mov	r19,r22
 1809b90:	003f8a06 	br	18099bc <__alt_mem_mem_0+0xff7e99bc>
 1809b94:	300b883a 	mov	r5,r6
 1809b98:	dfc00917 	ldw	ra,36(sp)
 1809b9c:	df000817 	ldw	fp,32(sp)
 1809ba0:	ddc00717 	ldw	r23,28(sp)
 1809ba4:	dd800617 	ldw	r22,24(sp)
 1809ba8:	dd400517 	ldw	r21,20(sp)
 1809bac:	dd000417 	ldw	r20,16(sp)
 1809bb0:	dcc00317 	ldw	r19,12(sp)
 1809bb4:	dc800217 	ldw	r18,8(sp)
 1809bb8:	dc400117 	ldw	r17,4(sp)
 1809bbc:	dc000017 	ldw	r16,0(sp)
 1809bc0:	dec00a04 	addi	sp,sp,40
 1809bc4:	180575c1 	jmpi	180575c <_malloc_r>
 1809bc8:	a8c00017 	ldw	r3,0(r21)
 1809bcc:	90c00015 	stw	r3,0(r18)
 1809bd0:	a8c00117 	ldw	r3,4(r21)
 1809bd4:	90c00115 	stw	r3,4(r18)
 1809bd8:	00c006c4 	movi	r3,27
 1809bdc:	19804536 	bltu	r3,r6,1809cf4 <_realloc_r+0x470>
 1809be0:	90800204 	addi	r2,r18,8
 1809be4:	a8c00204 	addi	r3,r21,8
 1809be8:	003f6306 	br	1809978 <__alt_mem_mem_0+0xff7e9978>
 1809bec:	9005883a 	mov	r2,r18
 1809bf0:	a8c00017 	ldw	r3,0(r21)
 1809bf4:	b821883a 	mov	r16,r23
 1809bf8:	b027883a 	mov	r19,r22
 1809bfc:	10c00015 	stw	r3,0(r2)
 1809c00:	a8c00117 	ldw	r3,4(r21)
 1809c04:	10c00115 	stw	r3,4(r2)
 1809c08:	a8c00217 	ldw	r3,8(r21)
 1809c0c:	10c00215 	stw	r3,8(r2)
 1809c10:	003f6a06 	br	18099bc <__alt_mem_mem_0+0xff7e99bc>
 1809c14:	9c67883a 	add	r19,r19,r17
 1809c18:	4445c83a 	sub	r2,r8,r17
 1809c1c:	e4c00215 	stw	r19,8(fp)
 1809c20:	10800054 	ori	r2,r2,1
 1809c24:	98800115 	stw	r2,4(r19)
 1809c28:	a8bfff17 	ldw	r2,-4(r21)
 1809c2c:	a009883a 	mov	r4,r20
 1809c30:	1080004c 	andi	r2,r2,1
 1809c34:	1462b03a 	or	r17,r2,r17
 1809c38:	ac7fff15 	stw	r17,-4(r21)
 1809c3c:	180d56c0 	call	180d56c <__malloc_unlock>
 1809c40:	a805883a 	mov	r2,r21
 1809c44:	003f6b06 	br	18099f4 <__alt_mem_mem_0+0xff7e99f4>
 1809c48:	a80b883a 	mov	r5,r21
 1809c4c:	9009883a 	mov	r4,r18
 1809c50:	18096c80 	call	18096c8 <memmove>
 1809c54:	003f4e06 	br	1809990 <__alt_mem_mem_0+0xff7e9990>
 1809c58:	89000404 	addi	r4,r17,16
 1809c5c:	b93fbc16 	blt	r23,r4,1809b50 <__alt_mem_mem_0+0xff7e9b50>
 1809c60:	b0800317 	ldw	r2,12(r22)
 1809c64:	b0c00217 	ldw	r3,8(r22)
 1809c68:	81bfff04 	addi	r6,r16,-4
 1809c6c:	01000904 	movi	r4,36
 1809c70:	18800315 	stw	r2,12(r3)
 1809c74:	10c00215 	stw	r3,8(r2)
 1809c78:	b4800204 	addi	r18,r22,8
 1809c7c:	21804336 	bltu	r4,r6,1809d8c <_realloc_r+0x508>
 1809c80:	008004c4 	movi	r2,19
 1809c84:	11803f2e 	bgeu	r2,r6,1809d84 <_realloc_r+0x500>
 1809c88:	a8800017 	ldw	r2,0(r21)
 1809c8c:	b0800215 	stw	r2,8(r22)
 1809c90:	a8800117 	ldw	r2,4(r21)
 1809c94:	b0800315 	stw	r2,12(r22)
 1809c98:	008006c4 	movi	r2,27
 1809c9c:	11803f36 	bltu	r2,r6,1809d9c <_realloc_r+0x518>
 1809ca0:	b0800404 	addi	r2,r22,16
 1809ca4:	ad400204 	addi	r21,r21,8
 1809ca8:	a8c00017 	ldw	r3,0(r21)
 1809cac:	10c00015 	stw	r3,0(r2)
 1809cb0:	a8c00117 	ldw	r3,4(r21)
 1809cb4:	10c00115 	stw	r3,4(r2)
 1809cb8:	a8c00217 	ldw	r3,8(r21)
 1809cbc:	10c00215 	stw	r3,8(r2)
 1809cc0:	b447883a 	add	r3,r22,r17
 1809cc4:	bc45c83a 	sub	r2,r23,r17
 1809cc8:	e0c00215 	stw	r3,8(fp)
 1809ccc:	10800054 	ori	r2,r2,1
 1809cd0:	18800115 	stw	r2,4(r3)
 1809cd4:	b0800117 	ldw	r2,4(r22)
 1809cd8:	a009883a 	mov	r4,r20
 1809cdc:	1080004c 	andi	r2,r2,1
 1809ce0:	1462b03a 	or	r17,r2,r17
 1809ce4:	b4400115 	stw	r17,4(r22)
 1809ce8:	180d56c0 	call	180d56c <__malloc_unlock>
 1809cec:	9005883a 	mov	r2,r18
 1809cf0:	003f4006 	br	18099f4 <__alt_mem_mem_0+0xff7e99f4>
 1809cf4:	a8c00217 	ldw	r3,8(r21)
 1809cf8:	90c00215 	stw	r3,8(r18)
 1809cfc:	a8c00317 	ldw	r3,12(r21)
 1809d00:	90c00315 	stw	r3,12(r18)
 1809d04:	30801126 	beq	r6,r2,1809d4c <_realloc_r+0x4c8>
 1809d08:	90800404 	addi	r2,r18,16
 1809d0c:	a8c00404 	addi	r3,r21,16
 1809d10:	003f1906 	br	1809978 <__alt_mem_mem_0+0xff7e9978>
 1809d14:	90ffff17 	ldw	r3,-4(r18)
 1809d18:	00bfff04 	movi	r2,-4
 1809d1c:	a825883a 	mov	r18,r21
 1809d20:	1884703a 	and	r2,r3,r2
 1809d24:	80a1883a 	add	r16,r16,r2
 1809d28:	003f2406 	br	18099bc <__alt_mem_mem_0+0xff7e99bc>
 1809d2c:	a8800217 	ldw	r2,8(r21)
 1809d30:	b0800415 	stw	r2,16(r22)
 1809d34:	a8800317 	ldw	r2,12(r21)
 1809d38:	b0800515 	stw	r2,20(r22)
 1809d3c:	31000a26 	beq	r6,r4,1809d68 <_realloc_r+0x4e4>
 1809d40:	b0800604 	addi	r2,r22,24
 1809d44:	ad400404 	addi	r21,r21,16
 1809d48:	003fa906 	br	1809bf0 <__alt_mem_mem_0+0xff7e9bf0>
 1809d4c:	a9000417 	ldw	r4,16(r21)
 1809d50:	90800604 	addi	r2,r18,24
 1809d54:	a8c00604 	addi	r3,r21,24
 1809d58:	91000415 	stw	r4,16(r18)
 1809d5c:	a9000517 	ldw	r4,20(r21)
 1809d60:	91000515 	stw	r4,20(r18)
 1809d64:	003f0406 	br	1809978 <__alt_mem_mem_0+0xff7e9978>
 1809d68:	a8c00417 	ldw	r3,16(r21)
 1809d6c:	ad400604 	addi	r21,r21,24
 1809d70:	b0800804 	addi	r2,r22,32
 1809d74:	b0c00615 	stw	r3,24(r22)
 1809d78:	a8ffff17 	ldw	r3,-4(r21)
 1809d7c:	b0c00715 	stw	r3,28(r22)
 1809d80:	003f9b06 	br	1809bf0 <__alt_mem_mem_0+0xff7e9bf0>
 1809d84:	9005883a 	mov	r2,r18
 1809d88:	003fc706 	br	1809ca8 <__alt_mem_mem_0+0xff7e9ca8>
 1809d8c:	a80b883a 	mov	r5,r21
 1809d90:	9009883a 	mov	r4,r18
 1809d94:	18096c80 	call	18096c8 <memmove>
 1809d98:	003fc906 	br	1809cc0 <__alt_mem_mem_0+0xff7e9cc0>
 1809d9c:	a8800217 	ldw	r2,8(r21)
 1809da0:	b0800415 	stw	r2,16(r22)
 1809da4:	a8800317 	ldw	r2,12(r21)
 1809da8:	b0800515 	stw	r2,20(r22)
 1809dac:	31000726 	beq	r6,r4,1809dcc <_realloc_r+0x548>
 1809db0:	b0800604 	addi	r2,r22,24
 1809db4:	ad400404 	addi	r21,r21,16
 1809db8:	003fbb06 	br	1809ca8 <__alt_mem_mem_0+0xff7e9ca8>
 1809dbc:	a009883a 	mov	r4,r20
 1809dc0:	180d56c0 	call	180d56c <__malloc_unlock>
 1809dc4:	0005883a 	mov	r2,zero
 1809dc8:	003f0a06 	br	18099f4 <__alt_mem_mem_0+0xff7e99f4>
 1809dcc:	a8c00417 	ldw	r3,16(r21)
 1809dd0:	ad400604 	addi	r21,r21,24
 1809dd4:	b0800804 	addi	r2,r22,32
 1809dd8:	b0c00615 	stw	r3,24(r22)
 1809ddc:	a8ffff17 	ldw	r3,-4(r21)
 1809de0:	b0c00715 	stw	r3,28(r22)
 1809de4:	003fb006 	br	1809ca8 <__alt_mem_mem_0+0xff7e9ca8>

01809de8 <__swbuf_r>:
 1809de8:	defffb04 	addi	sp,sp,-20
 1809dec:	dcc00315 	stw	r19,12(sp)
 1809df0:	dc800215 	stw	r18,8(sp)
 1809df4:	dc000015 	stw	r16,0(sp)
 1809df8:	dfc00415 	stw	ra,16(sp)
 1809dfc:	dc400115 	stw	r17,4(sp)
 1809e00:	2025883a 	mov	r18,r4
 1809e04:	2827883a 	mov	r19,r5
 1809e08:	3021883a 	mov	r16,r6
 1809e0c:	20000226 	beq	r4,zero,1809e18 <__swbuf_r+0x30>
 1809e10:	20800e17 	ldw	r2,56(r4)
 1809e14:	10004226 	beq	r2,zero,1809f20 <__swbuf_r+0x138>
 1809e18:	80800617 	ldw	r2,24(r16)
 1809e1c:	8100030b 	ldhu	r4,12(r16)
 1809e20:	80800215 	stw	r2,8(r16)
 1809e24:	2080020c 	andi	r2,r4,8
 1809e28:	10003626 	beq	r2,zero,1809f04 <__swbuf_r+0x11c>
 1809e2c:	80c00417 	ldw	r3,16(r16)
 1809e30:	18003426 	beq	r3,zero,1809f04 <__swbuf_r+0x11c>
 1809e34:	2088000c 	andi	r2,r4,8192
 1809e38:	9c403fcc 	andi	r17,r19,255
 1809e3c:	10001a26 	beq	r2,zero,1809ea8 <__swbuf_r+0xc0>
 1809e40:	80800017 	ldw	r2,0(r16)
 1809e44:	81000517 	ldw	r4,20(r16)
 1809e48:	10c7c83a 	sub	r3,r2,r3
 1809e4c:	1900200e 	bge	r3,r4,1809ed0 <__swbuf_r+0xe8>
 1809e50:	18c00044 	addi	r3,r3,1
 1809e54:	81000217 	ldw	r4,8(r16)
 1809e58:	11400044 	addi	r5,r2,1
 1809e5c:	81400015 	stw	r5,0(r16)
 1809e60:	213fffc4 	addi	r4,r4,-1
 1809e64:	81000215 	stw	r4,8(r16)
 1809e68:	14c00005 	stb	r19,0(r2)
 1809e6c:	80800517 	ldw	r2,20(r16)
 1809e70:	10c01e26 	beq	r2,r3,1809eec <__swbuf_r+0x104>
 1809e74:	8080030b 	ldhu	r2,12(r16)
 1809e78:	1080004c 	andi	r2,r2,1
 1809e7c:	10000226 	beq	r2,zero,1809e88 <__swbuf_r+0xa0>
 1809e80:	00800284 	movi	r2,10
 1809e84:	88801926 	beq	r17,r2,1809eec <__swbuf_r+0x104>
 1809e88:	8805883a 	mov	r2,r17
 1809e8c:	dfc00417 	ldw	ra,16(sp)
 1809e90:	dcc00317 	ldw	r19,12(sp)
 1809e94:	dc800217 	ldw	r18,8(sp)
 1809e98:	dc400117 	ldw	r17,4(sp)
 1809e9c:	dc000017 	ldw	r16,0(sp)
 1809ea0:	dec00504 	addi	sp,sp,20
 1809ea4:	f800283a 	ret
 1809ea8:	81401917 	ldw	r5,100(r16)
 1809eac:	00b7ffc4 	movi	r2,-8193
 1809eb0:	21080014 	ori	r4,r4,8192
 1809eb4:	2884703a 	and	r2,r5,r2
 1809eb8:	80801915 	stw	r2,100(r16)
 1809ebc:	80800017 	ldw	r2,0(r16)
 1809ec0:	8100030d 	sth	r4,12(r16)
 1809ec4:	81000517 	ldw	r4,20(r16)
 1809ec8:	10c7c83a 	sub	r3,r2,r3
 1809ecc:	193fe016 	blt	r3,r4,1809e50 <__alt_mem_mem_0+0xff7e9e50>
 1809ed0:	800b883a 	mov	r5,r16
 1809ed4:	9009883a 	mov	r4,r18
 1809ed8:	1804adc0 	call	1804adc <_fflush_r>
 1809edc:	1000071e 	bne	r2,zero,1809efc <__swbuf_r+0x114>
 1809ee0:	80800017 	ldw	r2,0(r16)
 1809ee4:	00c00044 	movi	r3,1
 1809ee8:	003fda06 	br	1809e54 <__alt_mem_mem_0+0xff7e9e54>
 1809eec:	800b883a 	mov	r5,r16
 1809ef0:	9009883a 	mov	r4,r18
 1809ef4:	1804adc0 	call	1804adc <_fflush_r>
 1809ef8:	103fe326 	beq	r2,zero,1809e88 <__alt_mem_mem_0+0xff7e9e88>
 1809efc:	00bfffc4 	movi	r2,-1
 1809f00:	003fe206 	br	1809e8c <__alt_mem_mem_0+0xff7e9e8c>
 1809f04:	800b883a 	mov	r5,r16
 1809f08:	9009883a 	mov	r4,r18
 1809f0c:	1802ee40 	call	1802ee4 <__swsetup_r>
 1809f10:	103ffa1e 	bne	r2,zero,1809efc <__alt_mem_mem_0+0xff7e9efc>
 1809f14:	8100030b 	ldhu	r4,12(r16)
 1809f18:	80c00417 	ldw	r3,16(r16)
 1809f1c:	003fc506 	br	1809e34 <__alt_mem_mem_0+0xff7e9e34>
 1809f20:	1804eb80 	call	1804eb8 <__sinit>
 1809f24:	003fbc06 	br	1809e18 <__alt_mem_mem_0+0xff7e9e18>

01809f28 <__swbuf>:
 1809f28:	00806134 	movhi	r2,388
 1809f2c:	1094f404 	addi	r2,r2,21456
 1809f30:	280d883a 	mov	r6,r5
 1809f34:	200b883a 	mov	r5,r4
 1809f38:	11000017 	ldw	r4,0(r2)
 1809f3c:	1809de81 	jmpi	1809de8 <__swbuf_r>

01809f40 <_wcrtomb_r>:
 1809f40:	defff604 	addi	sp,sp,-40
 1809f44:	00806134 	movhi	r2,388
 1809f48:	dc800815 	stw	r18,32(sp)
 1809f4c:	dc400715 	stw	r17,28(sp)
 1809f50:	dc000615 	stw	r16,24(sp)
 1809f54:	1094f804 	addi	r2,r2,21472
 1809f58:	dfc00915 	stw	ra,36(sp)
 1809f5c:	2021883a 	mov	r16,r4
 1809f60:	3823883a 	mov	r17,r7
 1809f64:	14800017 	ldw	r18,0(r2)
 1809f68:	28001426 	beq	r5,zero,1809fbc <_wcrtomb_r+0x7c>
 1809f6c:	d9400415 	stw	r5,16(sp)
 1809f70:	d9800515 	stw	r6,20(sp)
 1809f74:	18055400 	call	1805540 <__locale_charset>
 1809f78:	d9800517 	ldw	r6,20(sp)
 1809f7c:	d9400417 	ldw	r5,16(sp)
 1809f80:	100f883a 	mov	r7,r2
 1809f84:	dc400015 	stw	r17,0(sp)
 1809f88:	8009883a 	mov	r4,r16
 1809f8c:	903ee83a 	callr	r18
 1809f90:	00ffffc4 	movi	r3,-1
 1809f94:	10c0031e 	bne	r2,r3,1809fa4 <_wcrtomb_r+0x64>
 1809f98:	88000015 	stw	zero,0(r17)
 1809f9c:	00c02284 	movi	r3,138
 1809fa0:	80c00015 	stw	r3,0(r16)
 1809fa4:	dfc00917 	ldw	ra,36(sp)
 1809fa8:	dc800817 	ldw	r18,32(sp)
 1809fac:	dc400717 	ldw	r17,28(sp)
 1809fb0:	dc000617 	ldw	r16,24(sp)
 1809fb4:	dec00a04 	addi	sp,sp,40
 1809fb8:	f800283a 	ret
 1809fbc:	18055400 	call	1805540 <__locale_charset>
 1809fc0:	100f883a 	mov	r7,r2
 1809fc4:	dc400015 	stw	r17,0(sp)
 1809fc8:	000d883a 	mov	r6,zero
 1809fcc:	d9400104 	addi	r5,sp,4
 1809fd0:	8009883a 	mov	r4,r16
 1809fd4:	903ee83a 	callr	r18
 1809fd8:	003fed06 	br	1809f90 <__alt_mem_mem_0+0xff7e9f90>

01809fdc <wcrtomb>:
 1809fdc:	defff604 	addi	sp,sp,-40
 1809fe0:	00806134 	movhi	r2,388
 1809fe4:	dc800615 	stw	r18,24(sp)
 1809fe8:	dc400515 	stw	r17,20(sp)
 1809fec:	1094f404 	addi	r2,r2,21456
 1809ff0:	dfc00915 	stw	ra,36(sp)
 1809ff4:	dd000815 	stw	r20,32(sp)
 1809ff8:	dcc00715 	stw	r19,28(sp)
 1809ffc:	dc000415 	stw	r16,16(sp)
 180a000:	3025883a 	mov	r18,r6
 180a004:	14400017 	ldw	r17,0(r2)
 180a008:	20001926 	beq	r4,zero,180a070 <wcrtomb+0x94>
 180a00c:	00806134 	movhi	r2,388
 180a010:	1094f804 	addi	r2,r2,21472
 180a014:	15000017 	ldw	r20,0(r2)
 180a018:	2021883a 	mov	r16,r4
 180a01c:	2827883a 	mov	r19,r5
 180a020:	18055400 	call	1805540 <__locale_charset>
 180a024:	100f883a 	mov	r7,r2
 180a028:	dc800015 	stw	r18,0(sp)
 180a02c:	980d883a 	mov	r6,r19
 180a030:	800b883a 	mov	r5,r16
 180a034:	8809883a 	mov	r4,r17
 180a038:	a03ee83a 	callr	r20
 180a03c:	00ffffc4 	movi	r3,-1
 180a040:	10c0031e 	bne	r2,r3,180a050 <wcrtomb+0x74>
 180a044:	90000015 	stw	zero,0(r18)
 180a048:	00c02284 	movi	r3,138
 180a04c:	88c00015 	stw	r3,0(r17)
 180a050:	dfc00917 	ldw	ra,36(sp)
 180a054:	dd000817 	ldw	r20,32(sp)
 180a058:	dcc00717 	ldw	r19,28(sp)
 180a05c:	dc800617 	ldw	r18,24(sp)
 180a060:	dc400517 	ldw	r17,20(sp)
 180a064:	dc000417 	ldw	r16,16(sp)
 180a068:	dec00a04 	addi	sp,sp,40
 180a06c:	f800283a 	ret
 180a070:	00806134 	movhi	r2,388
 180a074:	1094f804 	addi	r2,r2,21472
 180a078:	14000017 	ldw	r16,0(r2)
 180a07c:	18055400 	call	1805540 <__locale_charset>
 180a080:	100f883a 	mov	r7,r2
 180a084:	dc800015 	stw	r18,0(sp)
 180a088:	000d883a 	mov	r6,zero
 180a08c:	d9400104 	addi	r5,sp,4
 180a090:	8809883a 	mov	r4,r17
 180a094:	803ee83a 	callr	r16
 180a098:	003fe806 	br	180a03c <__alt_mem_mem_0+0xff7ea03c>

0180a09c <__ascii_wctomb>:
 180a09c:	28000526 	beq	r5,zero,180a0b4 <__ascii_wctomb+0x18>
 180a0a0:	00803fc4 	movi	r2,255
 180a0a4:	11800536 	bltu	r2,r6,180a0bc <__ascii_wctomb+0x20>
 180a0a8:	29800005 	stb	r6,0(r5)
 180a0ac:	00800044 	movi	r2,1
 180a0b0:	f800283a 	ret
 180a0b4:	0005883a 	mov	r2,zero
 180a0b8:	f800283a 	ret
 180a0bc:	00802284 	movi	r2,138
 180a0c0:	20800015 	stw	r2,0(r4)
 180a0c4:	00bfffc4 	movi	r2,-1
 180a0c8:	f800283a 	ret

0180a0cc <_wctomb_r>:
 180a0cc:	00806134 	movhi	r2,388
 180a0d0:	defff904 	addi	sp,sp,-28
 180a0d4:	1094f804 	addi	r2,r2,21472
 180a0d8:	dfc00615 	stw	ra,24(sp)
 180a0dc:	dc400515 	stw	r17,20(sp)
 180a0e0:	dc000415 	stw	r16,16(sp)
 180a0e4:	3823883a 	mov	r17,r7
 180a0e8:	14000017 	ldw	r16,0(r2)
 180a0ec:	d9000115 	stw	r4,4(sp)
 180a0f0:	d9400215 	stw	r5,8(sp)
 180a0f4:	d9800315 	stw	r6,12(sp)
 180a0f8:	18055400 	call	1805540 <__locale_charset>
 180a0fc:	d9800317 	ldw	r6,12(sp)
 180a100:	d9400217 	ldw	r5,8(sp)
 180a104:	d9000117 	ldw	r4,4(sp)
 180a108:	100f883a 	mov	r7,r2
 180a10c:	dc400015 	stw	r17,0(sp)
 180a110:	803ee83a 	callr	r16
 180a114:	dfc00617 	ldw	ra,24(sp)
 180a118:	dc400517 	ldw	r17,20(sp)
 180a11c:	dc000417 	ldw	r16,16(sp)
 180a120:	dec00704 	addi	sp,sp,28
 180a124:	f800283a 	ret

0180a128 <__udivdi3>:
 180a128:	defff504 	addi	sp,sp,-44
 180a12c:	dcc00415 	stw	r19,16(sp)
 180a130:	dc000115 	stw	r16,4(sp)
 180a134:	dfc00a15 	stw	ra,40(sp)
 180a138:	df000915 	stw	fp,36(sp)
 180a13c:	ddc00815 	stw	r23,32(sp)
 180a140:	dd800715 	stw	r22,28(sp)
 180a144:	dd400615 	stw	r21,24(sp)
 180a148:	dd000515 	stw	r20,20(sp)
 180a14c:	dc800315 	stw	r18,12(sp)
 180a150:	dc400215 	stw	r17,8(sp)
 180a154:	2027883a 	mov	r19,r4
 180a158:	2821883a 	mov	r16,r5
 180a15c:	3800411e 	bne	r7,zero,180a264 <__udivdi3+0x13c>
 180a160:	3023883a 	mov	r17,r6
 180a164:	2025883a 	mov	r18,r4
 180a168:	2980522e 	bgeu	r5,r6,180a2b4 <__udivdi3+0x18c>
 180a16c:	00bfffd4 	movui	r2,65535
 180a170:	282d883a 	mov	r22,r5
 180a174:	1180a836 	bltu	r2,r6,180a418 <__udivdi3+0x2f0>
 180a178:	00803fc4 	movi	r2,255
 180a17c:	1185803a 	cmpltu	r2,r2,r6
 180a180:	100490fa 	slli	r2,r2,3
 180a184:	3086d83a 	srl	r3,r6,r2
 180a188:	01006134 	movhi	r4,388
 180a18c:	2102ee04 	addi	r4,r4,3000
 180a190:	20c7883a 	add	r3,r4,r3
 180a194:	18c00003 	ldbu	r3,0(r3)
 180a198:	1885883a 	add	r2,r3,r2
 180a19c:	00c00804 	movi	r3,32
 180a1a0:	1887c83a 	sub	r3,r3,r2
 180a1a4:	18000526 	beq	r3,zero,180a1bc <__udivdi3+0x94>
 180a1a8:	80e0983a 	sll	r16,r16,r3
 180a1ac:	9884d83a 	srl	r2,r19,r2
 180a1b0:	30e2983a 	sll	r17,r6,r3
 180a1b4:	98e4983a 	sll	r18,r19,r3
 180a1b8:	142cb03a 	or	r22,r2,r16
 180a1bc:	882ad43a 	srli	r21,r17,16
 180a1c0:	b009883a 	mov	r4,r22
 180a1c4:	8d3fffcc 	andi	r20,r17,65535
 180a1c8:	a80b883a 	mov	r5,r21
 180a1cc:	180ad340 	call	180ad34 <__umodsi3>
 180a1d0:	b009883a 	mov	r4,r22
 180a1d4:	a80b883a 	mov	r5,r21
 180a1d8:	1027883a 	mov	r19,r2
 180a1dc:	180acd00 	call	180acd0 <__udivsi3>
 180a1e0:	102d883a 	mov	r22,r2
 180a1e4:	9826943a 	slli	r19,r19,16
 180a1e8:	9004d43a 	srli	r2,r18,16
 180a1ec:	a5a1383a 	mul	r16,r20,r22
 180a1f0:	14c4b03a 	or	r2,r2,r19
 180a1f4:	1400052e 	bgeu	r2,r16,180a20c <__udivdi3+0xe4>
 180a1f8:	1445883a 	add	r2,r2,r17
 180a1fc:	b0ffffc4 	addi	r3,r22,-1
 180a200:	14400136 	bltu	r2,r17,180a208 <__udivdi3+0xe0>
 180a204:	14012336 	bltu	r2,r16,180a694 <__udivdi3+0x56c>
 180a208:	182d883a 	mov	r22,r3
 180a20c:	1421c83a 	sub	r16,r2,r16
 180a210:	a80b883a 	mov	r5,r21
 180a214:	8009883a 	mov	r4,r16
 180a218:	180ad340 	call	180ad34 <__umodsi3>
 180a21c:	1027883a 	mov	r19,r2
 180a220:	a80b883a 	mov	r5,r21
 180a224:	8009883a 	mov	r4,r16
 180a228:	180acd00 	call	180acd0 <__udivsi3>
 180a22c:	9826943a 	slli	r19,r19,16
 180a230:	a0a9383a 	mul	r20,r20,r2
 180a234:	94bfffcc 	andi	r18,r18,65535
 180a238:	94e4b03a 	or	r18,r18,r19
 180a23c:	9500052e 	bgeu	r18,r20,180a254 <__udivdi3+0x12c>
 180a240:	8ca5883a 	add	r18,r17,r18
 180a244:	10ffffc4 	addi	r3,r2,-1
 180a248:	9440f136 	bltu	r18,r17,180a610 <__udivdi3+0x4e8>
 180a24c:	9500f02e 	bgeu	r18,r20,180a610 <__udivdi3+0x4e8>
 180a250:	10bfff84 	addi	r2,r2,-2
 180a254:	b00c943a 	slli	r6,r22,16
 180a258:	0007883a 	mov	r3,zero
 180a25c:	3084b03a 	or	r2,r6,r2
 180a260:	00005906 	br	180a3c8 <__udivdi3+0x2a0>
 180a264:	29c05636 	bltu	r5,r7,180a3c0 <__udivdi3+0x298>
 180a268:	00bfffd4 	movui	r2,65535
 180a26c:	11c0622e 	bgeu	r2,r7,180a3f8 <__udivdi3+0x2d0>
 180a270:	00804034 	movhi	r2,256
 180a274:	10bfffc4 	addi	r2,r2,-1
 180a278:	11c0ee36 	bltu	r2,r7,180a634 <__udivdi3+0x50c>
 180a27c:	00800404 	movi	r2,16
 180a280:	3886d83a 	srl	r3,r7,r2
 180a284:	01006134 	movhi	r4,388
 180a288:	2102ee04 	addi	r4,r4,3000
 180a28c:	20c7883a 	add	r3,r4,r3
 180a290:	18c00003 	ldbu	r3,0(r3)
 180a294:	05400804 	movi	r21,32
 180a298:	1885883a 	add	r2,r3,r2
 180a29c:	a8abc83a 	sub	r21,r21,r2
 180a2a0:	a800621e 	bne	r21,zero,180a42c <__udivdi3+0x304>
 180a2a4:	3c00e936 	bltu	r7,r16,180a64c <__udivdi3+0x524>
 180a2a8:	9985403a 	cmpgeu	r2,r19,r6
 180a2ac:	0007883a 	mov	r3,zero
 180a2b0:	00004506 	br	180a3c8 <__udivdi3+0x2a0>
 180a2b4:	3000041e 	bne	r6,zero,180a2c8 <__udivdi3+0x1a0>
 180a2b8:	000b883a 	mov	r5,zero
 180a2bc:	01000044 	movi	r4,1
 180a2c0:	180acd00 	call	180acd0 <__udivsi3>
 180a2c4:	1023883a 	mov	r17,r2
 180a2c8:	00bfffd4 	movui	r2,65535
 180a2cc:	14404e2e 	bgeu	r2,r17,180a408 <__udivdi3+0x2e0>
 180a2d0:	00804034 	movhi	r2,256
 180a2d4:	10bfffc4 	addi	r2,r2,-1
 180a2d8:	1440d836 	bltu	r2,r17,180a63c <__udivdi3+0x514>
 180a2dc:	00800404 	movi	r2,16
 180a2e0:	8886d83a 	srl	r3,r17,r2
 180a2e4:	01006134 	movhi	r4,388
 180a2e8:	2102ee04 	addi	r4,r4,3000
 180a2ec:	20c7883a 	add	r3,r4,r3
 180a2f0:	18c00003 	ldbu	r3,0(r3)
 180a2f4:	1885883a 	add	r2,r3,r2
 180a2f8:	00c00804 	movi	r3,32
 180a2fc:	1887c83a 	sub	r3,r3,r2
 180a300:	18008f1e 	bne	r3,zero,180a540 <__udivdi3+0x418>
 180a304:	882ad43a 	srli	r21,r17,16
 180a308:	8461c83a 	sub	r16,r16,r17
 180a30c:	8d3fffcc 	andi	r20,r17,65535
 180a310:	00c00044 	movi	r3,1
 180a314:	8009883a 	mov	r4,r16
 180a318:	a80b883a 	mov	r5,r21
 180a31c:	d8c00015 	stw	r3,0(sp)
 180a320:	180ad340 	call	180ad34 <__umodsi3>
 180a324:	8009883a 	mov	r4,r16
 180a328:	a80b883a 	mov	r5,r21
 180a32c:	1027883a 	mov	r19,r2
 180a330:	180acd00 	call	180acd0 <__udivsi3>
 180a334:	9826943a 	slli	r19,r19,16
 180a338:	9008d43a 	srli	r4,r18,16
 180a33c:	1521383a 	mul	r16,r2,r20
 180a340:	102d883a 	mov	r22,r2
 180a344:	24c8b03a 	or	r4,r4,r19
 180a348:	d8c00017 	ldw	r3,0(sp)
 180a34c:	2400052e 	bgeu	r4,r16,180a364 <__udivdi3+0x23c>
 180a350:	2449883a 	add	r4,r4,r17
 180a354:	b0bfffc4 	addi	r2,r22,-1
 180a358:	24400136 	bltu	r4,r17,180a360 <__udivdi3+0x238>
 180a35c:	2400ca36 	bltu	r4,r16,180a688 <__udivdi3+0x560>
 180a360:	102d883a 	mov	r22,r2
 180a364:	2421c83a 	sub	r16,r4,r16
 180a368:	a80b883a 	mov	r5,r21
 180a36c:	8009883a 	mov	r4,r16
 180a370:	d8c00015 	stw	r3,0(sp)
 180a374:	180ad340 	call	180ad34 <__umodsi3>
 180a378:	1027883a 	mov	r19,r2
 180a37c:	a80b883a 	mov	r5,r21
 180a380:	8009883a 	mov	r4,r16
 180a384:	180acd00 	call	180acd0 <__udivsi3>
 180a388:	9826943a 	slli	r19,r19,16
 180a38c:	1529383a 	mul	r20,r2,r20
 180a390:	94bfffcc 	andi	r18,r18,65535
 180a394:	94e4b03a 	or	r18,r18,r19
 180a398:	d8c00017 	ldw	r3,0(sp)
 180a39c:	9500052e 	bgeu	r18,r20,180a3b4 <__udivdi3+0x28c>
 180a3a0:	8ca5883a 	add	r18,r17,r18
 180a3a4:	113fffc4 	addi	r4,r2,-1
 180a3a8:	94409736 	bltu	r18,r17,180a608 <__udivdi3+0x4e0>
 180a3ac:	9500962e 	bgeu	r18,r20,180a608 <__udivdi3+0x4e0>
 180a3b0:	10bfff84 	addi	r2,r2,-2
 180a3b4:	b00c943a 	slli	r6,r22,16
 180a3b8:	3084b03a 	or	r2,r6,r2
 180a3bc:	00000206 	br	180a3c8 <__udivdi3+0x2a0>
 180a3c0:	0007883a 	mov	r3,zero
 180a3c4:	0005883a 	mov	r2,zero
 180a3c8:	dfc00a17 	ldw	ra,40(sp)
 180a3cc:	df000917 	ldw	fp,36(sp)
 180a3d0:	ddc00817 	ldw	r23,32(sp)
 180a3d4:	dd800717 	ldw	r22,28(sp)
 180a3d8:	dd400617 	ldw	r21,24(sp)
 180a3dc:	dd000517 	ldw	r20,20(sp)
 180a3e0:	dcc00417 	ldw	r19,16(sp)
 180a3e4:	dc800317 	ldw	r18,12(sp)
 180a3e8:	dc400217 	ldw	r17,8(sp)
 180a3ec:	dc000117 	ldw	r16,4(sp)
 180a3f0:	dec00b04 	addi	sp,sp,44
 180a3f4:	f800283a 	ret
 180a3f8:	00803fc4 	movi	r2,255
 180a3fc:	11c5803a 	cmpltu	r2,r2,r7
 180a400:	100490fa 	slli	r2,r2,3
 180a404:	003f9e06 	br	180a280 <__alt_mem_mem_0+0xff7ea280>
 180a408:	00803fc4 	movi	r2,255
 180a40c:	1445803a 	cmpltu	r2,r2,r17
 180a410:	100490fa 	slli	r2,r2,3
 180a414:	003fb206 	br	180a2e0 <__alt_mem_mem_0+0xff7ea2e0>
 180a418:	00804034 	movhi	r2,256
 180a41c:	10bfffc4 	addi	r2,r2,-1
 180a420:	11808836 	bltu	r2,r6,180a644 <__udivdi3+0x51c>
 180a424:	00800404 	movi	r2,16
 180a428:	003f5606 	br	180a184 <__alt_mem_mem_0+0xff7ea184>
 180a42c:	30aed83a 	srl	r23,r6,r2
 180a430:	3d4e983a 	sll	r7,r7,r21
 180a434:	80acd83a 	srl	r22,r16,r2
 180a438:	9884d83a 	srl	r2,r19,r2
 180a43c:	3deeb03a 	or	r23,r7,r23
 180a440:	b824d43a 	srli	r18,r23,16
 180a444:	8560983a 	sll	r16,r16,r21
 180a448:	b009883a 	mov	r4,r22
 180a44c:	900b883a 	mov	r5,r18
 180a450:	3568983a 	sll	r20,r6,r21
 180a454:	1420b03a 	or	r16,r2,r16
 180a458:	180ad340 	call	180ad34 <__umodsi3>
 180a45c:	b009883a 	mov	r4,r22
 180a460:	900b883a 	mov	r5,r18
 180a464:	1023883a 	mov	r17,r2
 180a468:	180acd00 	call	180acd0 <__udivsi3>
 180a46c:	8808943a 	slli	r4,r17,16
 180a470:	bf3fffcc 	andi	fp,r23,65535
 180a474:	8006d43a 	srli	r3,r16,16
 180a478:	e0a3383a 	mul	r17,fp,r2
 180a47c:	100d883a 	mov	r6,r2
 180a480:	1906b03a 	or	r3,r3,r4
 180a484:	1c40042e 	bgeu	r3,r17,180a498 <__udivdi3+0x370>
 180a488:	1dc7883a 	add	r3,r3,r23
 180a48c:	10bfffc4 	addi	r2,r2,-1
 180a490:	1dc0752e 	bgeu	r3,r23,180a668 <__udivdi3+0x540>
 180a494:	100d883a 	mov	r6,r2
 180a498:	1c63c83a 	sub	r17,r3,r17
 180a49c:	900b883a 	mov	r5,r18
 180a4a0:	8809883a 	mov	r4,r17
 180a4a4:	d9800015 	stw	r6,0(sp)
 180a4a8:	180ad340 	call	180ad34 <__umodsi3>
 180a4ac:	102d883a 	mov	r22,r2
 180a4b0:	8809883a 	mov	r4,r17
 180a4b4:	900b883a 	mov	r5,r18
 180a4b8:	180acd00 	call	180acd0 <__udivsi3>
 180a4bc:	b02c943a 	slli	r22,r22,16
 180a4c0:	e089383a 	mul	r4,fp,r2
 180a4c4:	843fffcc 	andi	r16,r16,65535
 180a4c8:	85a0b03a 	or	r16,r16,r22
 180a4cc:	d9800017 	ldw	r6,0(sp)
 180a4d0:	8100042e 	bgeu	r16,r4,180a4e4 <__udivdi3+0x3bc>
 180a4d4:	85e1883a 	add	r16,r16,r23
 180a4d8:	10ffffc4 	addi	r3,r2,-1
 180a4dc:	85c05e2e 	bgeu	r16,r23,180a658 <__udivdi3+0x530>
 180a4e0:	1805883a 	mov	r2,r3
 180a4e4:	300c943a 	slli	r6,r6,16
 180a4e8:	a17fffcc 	andi	r5,r20,65535
 180a4ec:	a028d43a 	srli	r20,r20,16
 180a4f0:	3084b03a 	or	r2,r6,r2
 180a4f4:	10ffffcc 	andi	r3,r2,65535
 180a4f8:	100cd43a 	srli	r6,r2,16
 180a4fc:	194f383a 	mul	r7,r3,r5
 180a500:	1d07383a 	mul	r3,r3,r20
 180a504:	314b383a 	mul	r5,r6,r5
 180a508:	3810d43a 	srli	r8,r7,16
 180a50c:	8121c83a 	sub	r16,r16,r4
 180a510:	1947883a 	add	r3,r3,r5
 180a514:	40c7883a 	add	r3,r8,r3
 180a518:	350d383a 	mul	r6,r6,r20
 180a51c:	1940022e 	bgeu	r3,r5,180a528 <__udivdi3+0x400>
 180a520:	01000074 	movhi	r4,1
 180a524:	310d883a 	add	r6,r6,r4
 180a528:	1828d43a 	srli	r20,r3,16
 180a52c:	a18d883a 	add	r6,r20,r6
 180a530:	81803e36 	bltu	r16,r6,180a62c <__udivdi3+0x504>
 180a534:	81803826 	beq	r16,r6,180a618 <__udivdi3+0x4f0>
 180a538:	0007883a 	mov	r3,zero
 180a53c:	003fa206 	br	180a3c8 <__alt_mem_mem_0+0xff7ea3c8>
 180a540:	88e2983a 	sll	r17,r17,r3
 180a544:	80a8d83a 	srl	r20,r16,r2
 180a548:	80e0983a 	sll	r16,r16,r3
 180a54c:	882ad43a 	srli	r21,r17,16
 180a550:	9884d83a 	srl	r2,r19,r2
 180a554:	a009883a 	mov	r4,r20
 180a558:	a80b883a 	mov	r5,r21
 180a55c:	142eb03a 	or	r23,r2,r16
 180a560:	98e4983a 	sll	r18,r19,r3
 180a564:	180ad340 	call	180ad34 <__umodsi3>
 180a568:	a009883a 	mov	r4,r20
 180a56c:	a80b883a 	mov	r5,r21
 180a570:	1021883a 	mov	r16,r2
 180a574:	180acd00 	call	180acd0 <__udivsi3>
 180a578:	1039883a 	mov	fp,r2
 180a57c:	8d3fffcc 	andi	r20,r17,65535
 180a580:	8020943a 	slli	r16,r16,16
 180a584:	b804d43a 	srli	r2,r23,16
 180a588:	a72d383a 	mul	r22,r20,fp
 180a58c:	1404b03a 	or	r2,r2,r16
 180a590:	1580062e 	bgeu	r2,r22,180a5ac <__udivdi3+0x484>
 180a594:	1445883a 	add	r2,r2,r17
 180a598:	e0ffffc4 	addi	r3,fp,-1
 180a59c:	14403836 	bltu	r2,r17,180a680 <__udivdi3+0x558>
 180a5a0:	1580372e 	bgeu	r2,r22,180a680 <__udivdi3+0x558>
 180a5a4:	e73fff84 	addi	fp,fp,-2
 180a5a8:	1445883a 	add	r2,r2,r17
 180a5ac:	15adc83a 	sub	r22,r2,r22
 180a5b0:	a80b883a 	mov	r5,r21
 180a5b4:	b009883a 	mov	r4,r22
 180a5b8:	180ad340 	call	180ad34 <__umodsi3>
 180a5bc:	1027883a 	mov	r19,r2
 180a5c0:	b009883a 	mov	r4,r22
 180a5c4:	a80b883a 	mov	r5,r21
 180a5c8:	180acd00 	call	180acd0 <__udivsi3>
 180a5cc:	9826943a 	slli	r19,r19,16
 180a5d0:	a0a1383a 	mul	r16,r20,r2
 180a5d4:	b93fffcc 	andi	r4,r23,65535
 180a5d8:	24c8b03a 	or	r4,r4,r19
 180a5dc:	2400062e 	bgeu	r4,r16,180a5f8 <__udivdi3+0x4d0>
 180a5e0:	2449883a 	add	r4,r4,r17
 180a5e4:	10ffffc4 	addi	r3,r2,-1
 180a5e8:	24402336 	bltu	r4,r17,180a678 <__udivdi3+0x550>
 180a5ec:	2400222e 	bgeu	r4,r16,180a678 <__udivdi3+0x550>
 180a5f0:	10bfff84 	addi	r2,r2,-2
 180a5f4:	2449883a 	add	r4,r4,r17
 180a5f8:	e038943a 	slli	fp,fp,16
 180a5fc:	2421c83a 	sub	r16,r4,r16
 180a600:	e086b03a 	or	r3,fp,r2
 180a604:	003f4306 	br	180a314 <__alt_mem_mem_0+0xff7ea314>
 180a608:	2005883a 	mov	r2,r4
 180a60c:	003f6906 	br	180a3b4 <__alt_mem_mem_0+0xff7ea3b4>
 180a610:	1805883a 	mov	r2,r3
 180a614:	003f0f06 	br	180a254 <__alt_mem_mem_0+0xff7ea254>
 180a618:	1806943a 	slli	r3,r3,16
 180a61c:	9d66983a 	sll	r19,r19,r21
 180a620:	39ffffcc 	andi	r7,r7,65535
 180a624:	19c7883a 	add	r3,r3,r7
 180a628:	98ffc32e 	bgeu	r19,r3,180a538 <__alt_mem_mem_0+0xff7ea538>
 180a62c:	10bfffc4 	addi	r2,r2,-1
 180a630:	003fc106 	br	180a538 <__alt_mem_mem_0+0xff7ea538>
 180a634:	00800604 	movi	r2,24
 180a638:	003f1106 	br	180a280 <__alt_mem_mem_0+0xff7ea280>
 180a63c:	00800604 	movi	r2,24
 180a640:	003f2706 	br	180a2e0 <__alt_mem_mem_0+0xff7ea2e0>
 180a644:	00800604 	movi	r2,24
 180a648:	003ece06 	br	180a184 <__alt_mem_mem_0+0xff7ea184>
 180a64c:	0007883a 	mov	r3,zero
 180a650:	00800044 	movi	r2,1
 180a654:	003f5c06 	br	180a3c8 <__alt_mem_mem_0+0xff7ea3c8>
 180a658:	813fa12e 	bgeu	r16,r4,180a4e0 <__alt_mem_mem_0+0xff7ea4e0>
 180a65c:	10bfff84 	addi	r2,r2,-2
 180a660:	85e1883a 	add	r16,r16,r23
 180a664:	003f9f06 	br	180a4e4 <__alt_mem_mem_0+0xff7ea4e4>
 180a668:	1c7f8a2e 	bgeu	r3,r17,180a494 <__alt_mem_mem_0+0xff7ea494>
 180a66c:	31bfff84 	addi	r6,r6,-2
 180a670:	1dc7883a 	add	r3,r3,r23
 180a674:	003f8806 	br	180a498 <__alt_mem_mem_0+0xff7ea498>
 180a678:	1805883a 	mov	r2,r3
 180a67c:	003fde06 	br	180a5f8 <__alt_mem_mem_0+0xff7ea5f8>
 180a680:	1839883a 	mov	fp,r3
 180a684:	003fc906 	br	180a5ac <__alt_mem_mem_0+0xff7ea5ac>
 180a688:	b5bfff84 	addi	r22,r22,-2
 180a68c:	2449883a 	add	r4,r4,r17
 180a690:	003f3406 	br	180a364 <__alt_mem_mem_0+0xff7ea364>
 180a694:	b5bfff84 	addi	r22,r22,-2
 180a698:	1445883a 	add	r2,r2,r17
 180a69c:	003edb06 	br	180a20c <__alt_mem_mem_0+0xff7ea20c>

0180a6a0 <__umoddi3>:
 180a6a0:	defff404 	addi	sp,sp,-48
 180a6a4:	df000a15 	stw	fp,40(sp)
 180a6a8:	dc400315 	stw	r17,12(sp)
 180a6ac:	dc000215 	stw	r16,8(sp)
 180a6b0:	dfc00b15 	stw	ra,44(sp)
 180a6b4:	ddc00915 	stw	r23,36(sp)
 180a6b8:	dd800815 	stw	r22,32(sp)
 180a6bc:	dd400715 	stw	r21,28(sp)
 180a6c0:	dd000615 	stw	r20,24(sp)
 180a6c4:	dcc00515 	stw	r19,20(sp)
 180a6c8:	dc800415 	stw	r18,16(sp)
 180a6cc:	2021883a 	mov	r16,r4
 180a6d0:	2823883a 	mov	r17,r5
 180a6d4:	2839883a 	mov	fp,r5
 180a6d8:	38003c1e 	bne	r7,zero,180a7cc <__umoddi3+0x12c>
 180a6dc:	3027883a 	mov	r19,r6
 180a6e0:	2029883a 	mov	r20,r4
 180a6e4:	2980512e 	bgeu	r5,r6,180a82c <__umoddi3+0x18c>
 180a6e8:	00bfffd4 	movui	r2,65535
 180a6ec:	11809a36 	bltu	r2,r6,180a958 <__umoddi3+0x2b8>
 180a6f0:	01003fc4 	movi	r4,255
 180a6f4:	2189803a 	cmpltu	r4,r4,r6
 180a6f8:	200890fa 	slli	r4,r4,3
 180a6fc:	3104d83a 	srl	r2,r6,r4
 180a700:	00c06134 	movhi	r3,388
 180a704:	18c2ee04 	addi	r3,r3,3000
 180a708:	1885883a 	add	r2,r3,r2
 180a70c:	10c00003 	ldbu	r3,0(r2)
 180a710:	00800804 	movi	r2,32
 180a714:	1909883a 	add	r4,r3,r4
 180a718:	1125c83a 	sub	r18,r2,r4
 180a71c:	90000526 	beq	r18,zero,180a734 <__umoddi3+0x94>
 180a720:	8ca2983a 	sll	r17,r17,r18
 180a724:	8108d83a 	srl	r4,r16,r4
 180a728:	34a6983a 	sll	r19,r6,r18
 180a72c:	84a8983a 	sll	r20,r16,r18
 180a730:	2478b03a 	or	fp,r4,r17
 180a734:	982ed43a 	srli	r23,r19,16
 180a738:	e009883a 	mov	r4,fp
 180a73c:	9dbfffcc 	andi	r22,r19,65535
 180a740:	b80b883a 	mov	r5,r23
 180a744:	180ad340 	call	180ad34 <__umodsi3>
 180a748:	e009883a 	mov	r4,fp
 180a74c:	b80b883a 	mov	r5,r23
 180a750:	102b883a 	mov	r21,r2
 180a754:	180acd00 	call	180acd0 <__udivsi3>
 180a758:	a806943a 	slli	r3,r21,16
 180a75c:	a008d43a 	srli	r4,r20,16
 180a760:	b085383a 	mul	r2,r22,r2
 180a764:	20c8b03a 	or	r4,r4,r3
 180a768:	2080032e 	bgeu	r4,r2,180a778 <__umoddi3+0xd8>
 180a76c:	24c9883a 	add	r4,r4,r19
 180a770:	24c00136 	bltu	r4,r19,180a778 <__umoddi3+0xd8>
 180a774:	20811036 	bltu	r4,r2,180abb8 <__umoddi3+0x518>
 180a778:	20abc83a 	sub	r21,r4,r2
 180a77c:	b80b883a 	mov	r5,r23
 180a780:	a809883a 	mov	r4,r21
 180a784:	180ad340 	call	180ad34 <__umodsi3>
 180a788:	1023883a 	mov	r17,r2
 180a78c:	b80b883a 	mov	r5,r23
 180a790:	a809883a 	mov	r4,r21
 180a794:	180acd00 	call	180acd0 <__udivsi3>
 180a798:	8822943a 	slli	r17,r17,16
 180a79c:	b085383a 	mul	r2,r22,r2
 180a7a0:	a0ffffcc 	andi	r3,r20,65535
 180a7a4:	1c46b03a 	or	r3,r3,r17
 180a7a8:	1880042e 	bgeu	r3,r2,180a7bc <__umoddi3+0x11c>
 180a7ac:	1cc7883a 	add	r3,r3,r19
 180a7b0:	1cc00236 	bltu	r3,r19,180a7bc <__umoddi3+0x11c>
 180a7b4:	1880012e 	bgeu	r3,r2,180a7bc <__umoddi3+0x11c>
 180a7b8:	1cc7883a 	add	r3,r3,r19
 180a7bc:	1885c83a 	sub	r2,r3,r2
 180a7c0:	1484d83a 	srl	r2,r2,r18
 180a7c4:	0007883a 	mov	r3,zero
 180a7c8:	00004f06 	br	180a908 <__umoddi3+0x268>
 180a7cc:	29c04c36 	bltu	r5,r7,180a900 <__umoddi3+0x260>
 180a7d0:	00bfffd4 	movui	r2,65535
 180a7d4:	11c0582e 	bgeu	r2,r7,180a938 <__umoddi3+0x298>
 180a7d8:	00804034 	movhi	r2,256
 180a7dc:	10bfffc4 	addi	r2,r2,-1
 180a7e0:	11c0e736 	bltu	r2,r7,180ab80 <__umoddi3+0x4e0>
 180a7e4:	01000404 	movi	r4,16
 180a7e8:	3904d83a 	srl	r2,r7,r4
 180a7ec:	00c06134 	movhi	r3,388
 180a7f0:	18c2ee04 	addi	r3,r3,3000
 180a7f4:	1885883a 	add	r2,r3,r2
 180a7f8:	14c00003 	ldbu	r19,0(r2)
 180a7fc:	00c00804 	movi	r3,32
 180a800:	9927883a 	add	r19,r19,r4
 180a804:	1ce9c83a 	sub	r20,r3,r19
 180a808:	a000581e 	bne	r20,zero,180a96c <__umoddi3+0x2cc>
 180a80c:	3c400136 	bltu	r7,r17,180a814 <__umoddi3+0x174>
 180a810:	8180eb36 	bltu	r16,r6,180abc0 <__umoddi3+0x520>
 180a814:	8185c83a 	sub	r2,r16,r6
 180a818:	89e3c83a 	sub	r17,r17,r7
 180a81c:	8089803a 	cmpltu	r4,r16,r2
 180a820:	8939c83a 	sub	fp,r17,r4
 180a824:	e007883a 	mov	r3,fp
 180a828:	00003706 	br	180a908 <__umoddi3+0x268>
 180a82c:	3000041e 	bne	r6,zero,180a840 <__umoddi3+0x1a0>
 180a830:	000b883a 	mov	r5,zero
 180a834:	01000044 	movi	r4,1
 180a838:	180acd00 	call	180acd0 <__udivsi3>
 180a83c:	1027883a 	mov	r19,r2
 180a840:	00bfffd4 	movui	r2,65535
 180a844:	14c0402e 	bgeu	r2,r19,180a948 <__umoddi3+0x2a8>
 180a848:	00804034 	movhi	r2,256
 180a84c:	10bfffc4 	addi	r2,r2,-1
 180a850:	14c0cd36 	bltu	r2,r19,180ab88 <__umoddi3+0x4e8>
 180a854:	00800404 	movi	r2,16
 180a858:	9886d83a 	srl	r3,r19,r2
 180a85c:	01006134 	movhi	r4,388
 180a860:	2102ee04 	addi	r4,r4,3000
 180a864:	20c7883a 	add	r3,r4,r3
 180a868:	18c00003 	ldbu	r3,0(r3)
 180a86c:	1887883a 	add	r3,r3,r2
 180a870:	00800804 	movi	r2,32
 180a874:	10e5c83a 	sub	r18,r2,r3
 180a878:	9000901e 	bne	r18,zero,180aabc <__umoddi3+0x41c>
 180a87c:	982cd43a 	srli	r22,r19,16
 180a880:	8ce3c83a 	sub	r17,r17,r19
 180a884:	9d7fffcc 	andi	r21,r19,65535
 180a888:	b00b883a 	mov	r5,r22
 180a88c:	8809883a 	mov	r4,r17
 180a890:	180ad340 	call	180ad34 <__umodsi3>
 180a894:	8809883a 	mov	r4,r17
 180a898:	b00b883a 	mov	r5,r22
 180a89c:	1021883a 	mov	r16,r2
 180a8a0:	180acd00 	call	180acd0 <__udivsi3>
 180a8a4:	8006943a 	slli	r3,r16,16
 180a8a8:	a008d43a 	srli	r4,r20,16
 180a8ac:	1545383a 	mul	r2,r2,r21
 180a8b0:	20c8b03a 	or	r4,r4,r3
 180a8b4:	2080042e 	bgeu	r4,r2,180a8c8 <__umoddi3+0x228>
 180a8b8:	24c9883a 	add	r4,r4,r19
 180a8bc:	24c00236 	bltu	r4,r19,180a8c8 <__umoddi3+0x228>
 180a8c0:	2080012e 	bgeu	r4,r2,180a8c8 <__umoddi3+0x228>
 180a8c4:	24c9883a 	add	r4,r4,r19
 180a8c8:	20a1c83a 	sub	r16,r4,r2
 180a8cc:	b00b883a 	mov	r5,r22
 180a8d0:	8009883a 	mov	r4,r16
 180a8d4:	180ad340 	call	180ad34 <__umodsi3>
 180a8d8:	1023883a 	mov	r17,r2
 180a8dc:	b00b883a 	mov	r5,r22
 180a8e0:	8009883a 	mov	r4,r16
 180a8e4:	180acd00 	call	180acd0 <__udivsi3>
 180a8e8:	8822943a 	slli	r17,r17,16
 180a8ec:	1545383a 	mul	r2,r2,r21
 180a8f0:	a53fffcc 	andi	r20,r20,65535
 180a8f4:	a446b03a 	or	r3,r20,r17
 180a8f8:	18bfb02e 	bgeu	r3,r2,180a7bc <__alt_mem_mem_0+0xff7ea7bc>
 180a8fc:	003fab06 	br	180a7ac <__alt_mem_mem_0+0xff7ea7ac>
 180a900:	2005883a 	mov	r2,r4
 180a904:	2807883a 	mov	r3,r5
 180a908:	dfc00b17 	ldw	ra,44(sp)
 180a90c:	df000a17 	ldw	fp,40(sp)
 180a910:	ddc00917 	ldw	r23,36(sp)
 180a914:	dd800817 	ldw	r22,32(sp)
 180a918:	dd400717 	ldw	r21,28(sp)
 180a91c:	dd000617 	ldw	r20,24(sp)
 180a920:	dcc00517 	ldw	r19,20(sp)
 180a924:	dc800417 	ldw	r18,16(sp)
 180a928:	dc400317 	ldw	r17,12(sp)
 180a92c:	dc000217 	ldw	r16,8(sp)
 180a930:	dec00c04 	addi	sp,sp,48
 180a934:	f800283a 	ret
 180a938:	04c03fc4 	movi	r19,255
 180a93c:	99c9803a 	cmpltu	r4,r19,r7
 180a940:	200890fa 	slli	r4,r4,3
 180a944:	003fa806 	br	180a7e8 <__alt_mem_mem_0+0xff7ea7e8>
 180a948:	00803fc4 	movi	r2,255
 180a94c:	14c5803a 	cmpltu	r2,r2,r19
 180a950:	100490fa 	slli	r2,r2,3
 180a954:	003fc006 	br	180a858 <__alt_mem_mem_0+0xff7ea858>
 180a958:	00804034 	movhi	r2,256
 180a95c:	10bfffc4 	addi	r2,r2,-1
 180a960:	11808b36 	bltu	r2,r6,180ab90 <__umoddi3+0x4f0>
 180a964:	01000404 	movi	r4,16
 180a968:	003f6406 	br	180a6fc <__alt_mem_mem_0+0xff7ea6fc>
 180a96c:	34c4d83a 	srl	r2,r6,r19
 180a970:	3d0e983a 	sll	r7,r7,r20
 180a974:	8cf8d83a 	srl	fp,r17,r19
 180a978:	8d10983a 	sll	r8,r17,r20
 180a97c:	38aab03a 	or	r21,r7,r2
 180a980:	a82cd43a 	srli	r22,r21,16
 180a984:	84e2d83a 	srl	r17,r16,r19
 180a988:	e009883a 	mov	r4,fp
 180a98c:	b00b883a 	mov	r5,r22
 180a990:	8a22b03a 	or	r17,r17,r8
 180a994:	3524983a 	sll	r18,r6,r20
 180a998:	180ad340 	call	180ad34 <__umodsi3>
 180a99c:	e009883a 	mov	r4,fp
 180a9a0:	b00b883a 	mov	r5,r22
 180a9a4:	102f883a 	mov	r23,r2
 180a9a8:	180acd00 	call	180acd0 <__udivsi3>
 180a9ac:	100d883a 	mov	r6,r2
 180a9b0:	b808943a 	slli	r4,r23,16
 180a9b4:	aa3fffcc 	andi	r8,r21,65535
 180a9b8:	8804d43a 	srli	r2,r17,16
 180a9bc:	41af383a 	mul	r23,r8,r6
 180a9c0:	8520983a 	sll	r16,r16,r20
 180a9c4:	1104b03a 	or	r2,r2,r4
 180a9c8:	15c0042e 	bgeu	r2,r23,180a9dc <__umoddi3+0x33c>
 180a9cc:	1545883a 	add	r2,r2,r21
 180a9d0:	30ffffc4 	addi	r3,r6,-1
 180a9d4:	1540742e 	bgeu	r2,r21,180aba8 <__umoddi3+0x508>
 180a9d8:	180d883a 	mov	r6,r3
 180a9dc:	15efc83a 	sub	r23,r2,r23
 180a9e0:	b00b883a 	mov	r5,r22
 180a9e4:	b809883a 	mov	r4,r23
 180a9e8:	d9800115 	stw	r6,4(sp)
 180a9ec:	da000015 	stw	r8,0(sp)
 180a9f0:	180ad340 	call	180ad34 <__umodsi3>
 180a9f4:	b00b883a 	mov	r5,r22
 180a9f8:	b809883a 	mov	r4,r23
 180a9fc:	1039883a 	mov	fp,r2
 180aa00:	180acd00 	call	180acd0 <__udivsi3>
 180aa04:	da000017 	ldw	r8,0(sp)
 180aa08:	e038943a 	slli	fp,fp,16
 180aa0c:	100b883a 	mov	r5,r2
 180aa10:	4089383a 	mul	r4,r8,r2
 180aa14:	8a3fffcc 	andi	r8,r17,65535
 180aa18:	4710b03a 	or	r8,r8,fp
 180aa1c:	d9800117 	ldw	r6,4(sp)
 180aa20:	4100042e 	bgeu	r8,r4,180aa34 <__umoddi3+0x394>
 180aa24:	4551883a 	add	r8,r8,r21
 180aa28:	10bfffc4 	addi	r2,r2,-1
 180aa2c:	45405a2e 	bgeu	r8,r21,180ab98 <__umoddi3+0x4f8>
 180aa30:	100b883a 	mov	r5,r2
 180aa34:	300c943a 	slli	r6,r6,16
 180aa38:	91ffffcc 	andi	r7,r18,65535
 180aa3c:	9004d43a 	srli	r2,r18,16
 180aa40:	314cb03a 	or	r6,r6,r5
 180aa44:	317fffcc 	andi	r5,r6,65535
 180aa48:	300cd43a 	srli	r6,r6,16
 180aa4c:	29d3383a 	mul	r9,r5,r7
 180aa50:	288b383a 	mul	r5,r5,r2
 180aa54:	31cf383a 	mul	r7,r6,r7
 180aa58:	4806d43a 	srli	r3,r9,16
 180aa5c:	4111c83a 	sub	r8,r8,r4
 180aa60:	29cb883a 	add	r5,r5,r7
 180aa64:	194b883a 	add	r5,r3,r5
 180aa68:	3085383a 	mul	r2,r6,r2
 180aa6c:	29c0022e 	bgeu	r5,r7,180aa78 <__umoddi3+0x3d8>
 180aa70:	00c00074 	movhi	r3,1
 180aa74:	10c5883a 	add	r2,r2,r3
 180aa78:	2808d43a 	srli	r4,r5,16
 180aa7c:	280a943a 	slli	r5,r5,16
 180aa80:	4a7fffcc 	andi	r9,r9,65535
 180aa84:	2085883a 	add	r2,r4,r2
 180aa88:	2a4b883a 	add	r5,r5,r9
 180aa8c:	40803636 	bltu	r8,r2,180ab68 <__umoddi3+0x4c8>
 180aa90:	40804d26 	beq	r8,r2,180abc8 <__umoddi3+0x528>
 180aa94:	4089c83a 	sub	r4,r8,r2
 180aa98:	280f883a 	mov	r7,r5
 180aa9c:	81cfc83a 	sub	r7,r16,r7
 180aaa0:	81c7803a 	cmpltu	r3,r16,r7
 180aaa4:	20c7c83a 	sub	r3,r4,r3
 180aaa8:	1cc4983a 	sll	r2,r3,r19
 180aaac:	3d0ed83a 	srl	r7,r7,r20
 180aab0:	1d06d83a 	srl	r3,r3,r20
 180aab4:	11c4b03a 	or	r2,r2,r7
 180aab8:	003f9306 	br	180a908 <__alt_mem_mem_0+0xff7ea908>
 180aabc:	9ca6983a 	sll	r19,r19,r18
 180aac0:	88e8d83a 	srl	r20,r17,r3
 180aac4:	80c4d83a 	srl	r2,r16,r3
 180aac8:	982cd43a 	srli	r22,r19,16
 180aacc:	8ca2983a 	sll	r17,r17,r18
 180aad0:	a009883a 	mov	r4,r20
 180aad4:	b00b883a 	mov	r5,r22
 180aad8:	1478b03a 	or	fp,r2,r17
 180aadc:	180ad340 	call	180ad34 <__umodsi3>
 180aae0:	a009883a 	mov	r4,r20
 180aae4:	b00b883a 	mov	r5,r22
 180aae8:	1023883a 	mov	r17,r2
 180aaec:	180acd00 	call	180acd0 <__udivsi3>
 180aaf0:	9d7fffcc 	andi	r21,r19,65535
 180aaf4:	880a943a 	slli	r5,r17,16
 180aaf8:	e008d43a 	srli	r4,fp,16
 180aafc:	a885383a 	mul	r2,r21,r2
 180ab00:	84a8983a 	sll	r20,r16,r18
 180ab04:	2148b03a 	or	r4,r4,r5
 180ab08:	2080042e 	bgeu	r4,r2,180ab1c <__umoddi3+0x47c>
 180ab0c:	24c9883a 	add	r4,r4,r19
 180ab10:	24c00236 	bltu	r4,r19,180ab1c <__umoddi3+0x47c>
 180ab14:	2080012e 	bgeu	r4,r2,180ab1c <__umoddi3+0x47c>
 180ab18:	24c9883a 	add	r4,r4,r19
 180ab1c:	20a3c83a 	sub	r17,r4,r2
 180ab20:	b00b883a 	mov	r5,r22
 180ab24:	8809883a 	mov	r4,r17
 180ab28:	180ad340 	call	180ad34 <__umodsi3>
 180ab2c:	102f883a 	mov	r23,r2
 180ab30:	8809883a 	mov	r4,r17
 180ab34:	b00b883a 	mov	r5,r22
 180ab38:	180acd00 	call	180acd0 <__udivsi3>
 180ab3c:	b82e943a 	slli	r23,r23,16
 180ab40:	a885383a 	mul	r2,r21,r2
 180ab44:	e13fffcc 	andi	r4,fp,65535
 180ab48:	25c8b03a 	or	r4,r4,r23
 180ab4c:	2080042e 	bgeu	r4,r2,180ab60 <__umoddi3+0x4c0>
 180ab50:	24c9883a 	add	r4,r4,r19
 180ab54:	24c00236 	bltu	r4,r19,180ab60 <__umoddi3+0x4c0>
 180ab58:	2080012e 	bgeu	r4,r2,180ab60 <__umoddi3+0x4c0>
 180ab5c:	24c9883a 	add	r4,r4,r19
 180ab60:	20a3c83a 	sub	r17,r4,r2
 180ab64:	003f4806 	br	180a888 <__alt_mem_mem_0+0xff7ea888>
 180ab68:	2c8fc83a 	sub	r7,r5,r18
 180ab6c:	1545c83a 	sub	r2,r2,r21
 180ab70:	29cb803a 	cmpltu	r5,r5,r7
 180ab74:	1145c83a 	sub	r2,r2,r5
 180ab78:	4089c83a 	sub	r4,r8,r2
 180ab7c:	003fc706 	br	180aa9c <__alt_mem_mem_0+0xff7eaa9c>
 180ab80:	01000604 	movi	r4,24
 180ab84:	003f1806 	br	180a7e8 <__alt_mem_mem_0+0xff7ea7e8>
 180ab88:	00800604 	movi	r2,24
 180ab8c:	003f3206 	br	180a858 <__alt_mem_mem_0+0xff7ea858>
 180ab90:	01000604 	movi	r4,24
 180ab94:	003ed906 	br	180a6fc <__alt_mem_mem_0+0xff7ea6fc>
 180ab98:	413fa52e 	bgeu	r8,r4,180aa30 <__alt_mem_mem_0+0xff7eaa30>
 180ab9c:	297fff84 	addi	r5,r5,-2
 180aba0:	4551883a 	add	r8,r8,r21
 180aba4:	003fa306 	br	180aa34 <__alt_mem_mem_0+0xff7eaa34>
 180aba8:	15ff8b2e 	bgeu	r2,r23,180a9d8 <__alt_mem_mem_0+0xff7ea9d8>
 180abac:	31bfff84 	addi	r6,r6,-2
 180abb0:	1545883a 	add	r2,r2,r21
 180abb4:	003f8906 	br	180a9dc <__alt_mem_mem_0+0xff7ea9dc>
 180abb8:	24c9883a 	add	r4,r4,r19
 180abbc:	003eee06 	br	180a778 <__alt_mem_mem_0+0xff7ea778>
 180abc0:	8005883a 	mov	r2,r16
 180abc4:	003f1706 	br	180a824 <__alt_mem_mem_0+0xff7ea824>
 180abc8:	817fe736 	bltu	r16,r5,180ab68 <__alt_mem_mem_0+0xff7eab68>
 180abcc:	280f883a 	mov	r7,r5
 180abd0:	0009883a 	mov	r4,zero
 180abd4:	003fb106 	br	180aa9c <__alt_mem_mem_0+0xff7eaa9c>

0180abd8 <__divsi3>:
 180abd8:	20001b16 	blt	r4,zero,180ac48 <__divsi3+0x70>
 180abdc:	000f883a 	mov	r7,zero
 180abe0:	28001616 	blt	r5,zero,180ac3c <__divsi3+0x64>
 180abe4:	200d883a 	mov	r6,r4
 180abe8:	29001a2e 	bgeu	r5,r4,180ac54 <__divsi3+0x7c>
 180abec:	00800804 	movi	r2,32
 180abf0:	00c00044 	movi	r3,1
 180abf4:	00000106 	br	180abfc <__divsi3+0x24>
 180abf8:	10000d26 	beq	r2,zero,180ac30 <__divsi3+0x58>
 180abfc:	294b883a 	add	r5,r5,r5
 180ac00:	10bfffc4 	addi	r2,r2,-1
 180ac04:	18c7883a 	add	r3,r3,r3
 180ac08:	293ffb36 	bltu	r5,r4,180abf8 <__alt_mem_mem_0+0xff7eabf8>
 180ac0c:	0005883a 	mov	r2,zero
 180ac10:	18000726 	beq	r3,zero,180ac30 <__divsi3+0x58>
 180ac14:	0005883a 	mov	r2,zero
 180ac18:	31400236 	bltu	r6,r5,180ac24 <__divsi3+0x4c>
 180ac1c:	314dc83a 	sub	r6,r6,r5
 180ac20:	10c4b03a 	or	r2,r2,r3
 180ac24:	1806d07a 	srli	r3,r3,1
 180ac28:	280ad07a 	srli	r5,r5,1
 180ac2c:	183ffa1e 	bne	r3,zero,180ac18 <__alt_mem_mem_0+0xff7eac18>
 180ac30:	38000126 	beq	r7,zero,180ac38 <__divsi3+0x60>
 180ac34:	0085c83a 	sub	r2,zero,r2
 180ac38:	f800283a 	ret
 180ac3c:	014bc83a 	sub	r5,zero,r5
 180ac40:	39c0005c 	xori	r7,r7,1
 180ac44:	003fe706 	br	180abe4 <__alt_mem_mem_0+0xff7eabe4>
 180ac48:	0109c83a 	sub	r4,zero,r4
 180ac4c:	01c00044 	movi	r7,1
 180ac50:	003fe306 	br	180abe0 <__alt_mem_mem_0+0xff7eabe0>
 180ac54:	00c00044 	movi	r3,1
 180ac58:	003fee06 	br	180ac14 <__alt_mem_mem_0+0xff7eac14>

0180ac5c <__modsi3>:
 180ac5c:	20001716 	blt	r4,zero,180acbc <__modsi3+0x60>
 180ac60:	000f883a 	mov	r7,zero
 180ac64:	2005883a 	mov	r2,r4
 180ac68:	28001216 	blt	r5,zero,180acb4 <__modsi3+0x58>
 180ac6c:	2900162e 	bgeu	r5,r4,180acc8 <__modsi3+0x6c>
 180ac70:	01800804 	movi	r6,32
 180ac74:	00c00044 	movi	r3,1
 180ac78:	00000106 	br	180ac80 <__modsi3+0x24>
 180ac7c:	30000a26 	beq	r6,zero,180aca8 <__modsi3+0x4c>
 180ac80:	294b883a 	add	r5,r5,r5
 180ac84:	31bfffc4 	addi	r6,r6,-1
 180ac88:	18c7883a 	add	r3,r3,r3
 180ac8c:	293ffb36 	bltu	r5,r4,180ac7c <__alt_mem_mem_0+0xff7eac7c>
 180ac90:	18000526 	beq	r3,zero,180aca8 <__modsi3+0x4c>
 180ac94:	1806d07a 	srli	r3,r3,1
 180ac98:	11400136 	bltu	r2,r5,180aca0 <__modsi3+0x44>
 180ac9c:	1145c83a 	sub	r2,r2,r5
 180aca0:	280ad07a 	srli	r5,r5,1
 180aca4:	183ffb1e 	bne	r3,zero,180ac94 <__alt_mem_mem_0+0xff7eac94>
 180aca8:	38000126 	beq	r7,zero,180acb0 <__modsi3+0x54>
 180acac:	0085c83a 	sub	r2,zero,r2
 180acb0:	f800283a 	ret
 180acb4:	014bc83a 	sub	r5,zero,r5
 180acb8:	003fec06 	br	180ac6c <__alt_mem_mem_0+0xff7eac6c>
 180acbc:	0109c83a 	sub	r4,zero,r4
 180acc0:	01c00044 	movi	r7,1
 180acc4:	003fe706 	br	180ac64 <__alt_mem_mem_0+0xff7eac64>
 180acc8:	00c00044 	movi	r3,1
 180accc:	003ff106 	br	180ac94 <__alt_mem_mem_0+0xff7eac94>

0180acd0 <__udivsi3>:
 180acd0:	200d883a 	mov	r6,r4
 180acd4:	2900152e 	bgeu	r5,r4,180ad2c <__udivsi3+0x5c>
 180acd8:	28001416 	blt	r5,zero,180ad2c <__udivsi3+0x5c>
 180acdc:	00800804 	movi	r2,32
 180ace0:	00c00044 	movi	r3,1
 180ace4:	00000206 	br	180acf0 <__udivsi3+0x20>
 180ace8:	10000e26 	beq	r2,zero,180ad24 <__udivsi3+0x54>
 180acec:	28000516 	blt	r5,zero,180ad04 <__udivsi3+0x34>
 180acf0:	294b883a 	add	r5,r5,r5
 180acf4:	10bfffc4 	addi	r2,r2,-1
 180acf8:	18c7883a 	add	r3,r3,r3
 180acfc:	293ffa36 	bltu	r5,r4,180ace8 <__alt_mem_mem_0+0xff7eace8>
 180ad00:	18000826 	beq	r3,zero,180ad24 <__udivsi3+0x54>
 180ad04:	0005883a 	mov	r2,zero
 180ad08:	31400236 	bltu	r6,r5,180ad14 <__udivsi3+0x44>
 180ad0c:	314dc83a 	sub	r6,r6,r5
 180ad10:	10c4b03a 	or	r2,r2,r3
 180ad14:	1806d07a 	srli	r3,r3,1
 180ad18:	280ad07a 	srli	r5,r5,1
 180ad1c:	183ffa1e 	bne	r3,zero,180ad08 <__alt_mem_mem_0+0xff7ead08>
 180ad20:	f800283a 	ret
 180ad24:	0005883a 	mov	r2,zero
 180ad28:	f800283a 	ret
 180ad2c:	00c00044 	movi	r3,1
 180ad30:	003ff406 	br	180ad04 <__alt_mem_mem_0+0xff7ead04>

0180ad34 <__umodsi3>:
 180ad34:	2005883a 	mov	r2,r4
 180ad38:	2900122e 	bgeu	r5,r4,180ad84 <__umodsi3+0x50>
 180ad3c:	28001116 	blt	r5,zero,180ad84 <__umodsi3+0x50>
 180ad40:	01800804 	movi	r6,32
 180ad44:	00c00044 	movi	r3,1
 180ad48:	00000206 	br	180ad54 <__umodsi3+0x20>
 180ad4c:	30000c26 	beq	r6,zero,180ad80 <__umodsi3+0x4c>
 180ad50:	28000516 	blt	r5,zero,180ad68 <__umodsi3+0x34>
 180ad54:	294b883a 	add	r5,r5,r5
 180ad58:	31bfffc4 	addi	r6,r6,-1
 180ad5c:	18c7883a 	add	r3,r3,r3
 180ad60:	293ffa36 	bltu	r5,r4,180ad4c <__alt_mem_mem_0+0xff7ead4c>
 180ad64:	18000626 	beq	r3,zero,180ad80 <__umodsi3+0x4c>
 180ad68:	1806d07a 	srli	r3,r3,1
 180ad6c:	11400136 	bltu	r2,r5,180ad74 <__umodsi3+0x40>
 180ad70:	1145c83a 	sub	r2,r2,r5
 180ad74:	280ad07a 	srli	r5,r5,1
 180ad78:	183ffb1e 	bne	r3,zero,180ad68 <__alt_mem_mem_0+0xff7ead68>
 180ad7c:	f800283a 	ret
 180ad80:	f800283a 	ret
 180ad84:	00c00044 	movi	r3,1
 180ad88:	003ff706 	br	180ad68 <__alt_mem_mem_0+0xff7ead68>

0180ad8c <__adddf3>:
 180ad8c:	02c00434 	movhi	r11,16
 180ad90:	5affffc4 	addi	r11,r11,-1
 180ad94:	2806d7fa 	srli	r3,r5,31
 180ad98:	2ad4703a 	and	r10,r5,r11
 180ad9c:	3ad2703a 	and	r9,r7,r11
 180ada0:	3804d53a 	srli	r2,r7,20
 180ada4:	3018d77a 	srli	r12,r6,29
 180ada8:	280ad53a 	srli	r5,r5,20
 180adac:	501490fa 	slli	r10,r10,3
 180adb0:	2010d77a 	srli	r8,r4,29
 180adb4:	481290fa 	slli	r9,r9,3
 180adb8:	380ed7fa 	srli	r7,r7,31
 180adbc:	defffb04 	addi	sp,sp,-20
 180adc0:	dc800215 	stw	r18,8(sp)
 180adc4:	dc400115 	stw	r17,4(sp)
 180adc8:	dc000015 	stw	r16,0(sp)
 180adcc:	dfc00415 	stw	ra,16(sp)
 180add0:	dcc00315 	stw	r19,12(sp)
 180add4:	1c803fcc 	andi	r18,r3,255
 180add8:	2c01ffcc 	andi	r16,r5,2047
 180addc:	5210b03a 	or	r8,r10,r8
 180ade0:	202290fa 	slli	r17,r4,3
 180ade4:	1081ffcc 	andi	r2,r2,2047
 180ade8:	4b12b03a 	or	r9,r9,r12
 180adec:	300c90fa 	slli	r6,r6,3
 180adf0:	91c07526 	beq	r18,r7,180afc8 <__adddf3+0x23c>
 180adf4:	8087c83a 	sub	r3,r16,r2
 180adf8:	00c0ab0e 	bge	zero,r3,180b0a8 <__adddf3+0x31c>
 180adfc:	10002a1e 	bne	r2,zero,180aea8 <__adddf3+0x11c>
 180ae00:	4984b03a 	or	r2,r9,r6
 180ae04:	1000961e 	bne	r2,zero,180b060 <__adddf3+0x2d4>
 180ae08:	888001cc 	andi	r2,r17,7
 180ae0c:	10000726 	beq	r2,zero,180ae2c <__adddf3+0xa0>
 180ae10:	888003cc 	andi	r2,r17,15
 180ae14:	00c00104 	movi	r3,4
 180ae18:	10c00426 	beq	r2,r3,180ae2c <__adddf3+0xa0>
 180ae1c:	88c7883a 	add	r3,r17,r3
 180ae20:	1c63803a 	cmpltu	r17,r3,r17
 180ae24:	4451883a 	add	r8,r8,r17
 180ae28:	1823883a 	mov	r17,r3
 180ae2c:	4080202c 	andhi	r2,r8,128
 180ae30:	10005926 	beq	r2,zero,180af98 <__adddf3+0x20c>
 180ae34:	84000044 	addi	r16,r16,1
 180ae38:	0081ffc4 	movi	r2,2047
 180ae3c:	8080ba26 	beq	r16,r2,180b128 <__adddf3+0x39c>
 180ae40:	00bfe034 	movhi	r2,65408
 180ae44:	10bfffc4 	addi	r2,r2,-1
 180ae48:	4090703a 	and	r8,r8,r2
 180ae4c:	4004977a 	slli	r2,r8,29
 180ae50:	4010927a 	slli	r8,r8,9
 180ae54:	8822d0fa 	srli	r17,r17,3
 180ae58:	8401ffcc 	andi	r16,r16,2047
 180ae5c:	4010d33a 	srli	r8,r8,12
 180ae60:	9007883a 	mov	r3,r18
 180ae64:	1444b03a 	or	r2,r2,r17
 180ae68:	8401ffcc 	andi	r16,r16,2047
 180ae6c:	8020953a 	slli	r16,r16,20
 180ae70:	18c03fcc 	andi	r3,r3,255
 180ae74:	01000434 	movhi	r4,16
 180ae78:	213fffc4 	addi	r4,r4,-1
 180ae7c:	180697fa 	slli	r3,r3,31
 180ae80:	4110703a 	and	r8,r8,r4
 180ae84:	4410b03a 	or	r8,r8,r16
 180ae88:	40c6b03a 	or	r3,r8,r3
 180ae8c:	dfc00417 	ldw	ra,16(sp)
 180ae90:	dcc00317 	ldw	r19,12(sp)
 180ae94:	dc800217 	ldw	r18,8(sp)
 180ae98:	dc400117 	ldw	r17,4(sp)
 180ae9c:	dc000017 	ldw	r16,0(sp)
 180aea0:	dec00504 	addi	sp,sp,20
 180aea4:	f800283a 	ret
 180aea8:	0081ffc4 	movi	r2,2047
 180aeac:	80bfd626 	beq	r16,r2,180ae08 <__alt_mem_mem_0+0xff7eae08>
 180aeb0:	4a402034 	orhi	r9,r9,128
 180aeb4:	00800e04 	movi	r2,56
 180aeb8:	10c09f16 	blt	r2,r3,180b138 <__adddf3+0x3ac>
 180aebc:	008007c4 	movi	r2,31
 180aec0:	10c0c216 	blt	r2,r3,180b1cc <__adddf3+0x440>
 180aec4:	00800804 	movi	r2,32
 180aec8:	10c5c83a 	sub	r2,r2,r3
 180aecc:	488a983a 	sll	r5,r9,r2
 180aed0:	30c8d83a 	srl	r4,r6,r3
 180aed4:	3084983a 	sll	r2,r6,r2
 180aed8:	48c6d83a 	srl	r3,r9,r3
 180aedc:	290cb03a 	or	r6,r5,r4
 180aee0:	1004c03a 	cmpne	r2,r2,zero
 180aee4:	308cb03a 	or	r6,r6,r2
 180aee8:	898dc83a 	sub	r6,r17,r6
 180aeec:	89a3803a 	cmpltu	r17,r17,r6
 180aef0:	40d1c83a 	sub	r8,r8,r3
 180aef4:	4451c83a 	sub	r8,r8,r17
 180aef8:	3023883a 	mov	r17,r6
 180aefc:	4080202c 	andhi	r2,r8,128
 180af00:	10002326 	beq	r2,zero,180af90 <__adddf3+0x204>
 180af04:	04c02034 	movhi	r19,128
 180af08:	9cffffc4 	addi	r19,r19,-1
 180af0c:	44e6703a 	and	r19,r8,r19
 180af10:	98007626 	beq	r19,zero,180b0ec <__adddf3+0x360>
 180af14:	9809883a 	mov	r4,r19
 180af18:	180d3900 	call	180d390 <__clzsi2>
 180af1c:	10fffe04 	addi	r3,r2,-8
 180af20:	010007c4 	movi	r4,31
 180af24:	20c07716 	blt	r4,r3,180b104 <__adddf3+0x378>
 180af28:	00800804 	movi	r2,32
 180af2c:	10c5c83a 	sub	r2,r2,r3
 180af30:	8884d83a 	srl	r2,r17,r2
 180af34:	98d0983a 	sll	r8,r19,r3
 180af38:	88e2983a 	sll	r17,r17,r3
 180af3c:	1204b03a 	or	r2,r2,r8
 180af40:	1c007416 	blt	r3,r16,180b114 <__adddf3+0x388>
 180af44:	1c21c83a 	sub	r16,r3,r16
 180af48:	82000044 	addi	r8,r16,1
 180af4c:	00c007c4 	movi	r3,31
 180af50:	1a009116 	blt	r3,r8,180b198 <__adddf3+0x40c>
 180af54:	00c00804 	movi	r3,32
 180af58:	1a07c83a 	sub	r3,r3,r8
 180af5c:	8a08d83a 	srl	r4,r17,r8
 180af60:	88e2983a 	sll	r17,r17,r3
 180af64:	10c6983a 	sll	r3,r2,r3
 180af68:	1210d83a 	srl	r8,r2,r8
 180af6c:	8804c03a 	cmpne	r2,r17,zero
 180af70:	1906b03a 	or	r3,r3,r4
 180af74:	18a2b03a 	or	r17,r3,r2
 180af78:	0021883a 	mov	r16,zero
 180af7c:	003fa206 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180af80:	1890b03a 	or	r8,r3,r2
 180af84:	40017d26 	beq	r8,zero,180b57c <__adddf3+0x7f0>
 180af88:	1011883a 	mov	r8,r2
 180af8c:	1823883a 	mov	r17,r3
 180af90:	888001cc 	andi	r2,r17,7
 180af94:	103f9e1e 	bne	r2,zero,180ae10 <__alt_mem_mem_0+0xff7eae10>
 180af98:	4004977a 	slli	r2,r8,29
 180af9c:	8822d0fa 	srli	r17,r17,3
 180afa0:	4010d0fa 	srli	r8,r8,3
 180afa4:	9007883a 	mov	r3,r18
 180afa8:	1444b03a 	or	r2,r2,r17
 180afac:	0101ffc4 	movi	r4,2047
 180afb0:	81002426 	beq	r16,r4,180b044 <__adddf3+0x2b8>
 180afb4:	8120703a 	and	r16,r16,r4
 180afb8:	01000434 	movhi	r4,16
 180afbc:	213fffc4 	addi	r4,r4,-1
 180afc0:	4110703a 	and	r8,r8,r4
 180afc4:	003fa806 	br	180ae68 <__alt_mem_mem_0+0xff7eae68>
 180afc8:	8089c83a 	sub	r4,r16,r2
 180afcc:	01005e0e 	bge	zero,r4,180b148 <__adddf3+0x3bc>
 180afd0:	10002b26 	beq	r2,zero,180b080 <__adddf3+0x2f4>
 180afd4:	0081ffc4 	movi	r2,2047
 180afd8:	80bf8b26 	beq	r16,r2,180ae08 <__alt_mem_mem_0+0xff7eae08>
 180afdc:	4a402034 	orhi	r9,r9,128
 180afe0:	00800e04 	movi	r2,56
 180afe4:	1100a40e 	bge	r2,r4,180b278 <__adddf3+0x4ec>
 180afe8:	498cb03a 	or	r6,r9,r6
 180afec:	300ac03a 	cmpne	r5,r6,zero
 180aff0:	0013883a 	mov	r9,zero
 180aff4:	2c4b883a 	add	r5,r5,r17
 180aff8:	2c63803a 	cmpltu	r17,r5,r17
 180affc:	4a11883a 	add	r8,r9,r8
 180b000:	8a11883a 	add	r8,r17,r8
 180b004:	2823883a 	mov	r17,r5
 180b008:	4080202c 	andhi	r2,r8,128
 180b00c:	103fe026 	beq	r2,zero,180af90 <__alt_mem_mem_0+0xff7eaf90>
 180b010:	84000044 	addi	r16,r16,1
 180b014:	0081ffc4 	movi	r2,2047
 180b018:	8080d226 	beq	r16,r2,180b364 <__adddf3+0x5d8>
 180b01c:	00bfe034 	movhi	r2,65408
 180b020:	10bfffc4 	addi	r2,r2,-1
 180b024:	4090703a 	and	r8,r8,r2
 180b028:	880ad07a 	srli	r5,r17,1
 180b02c:	400897fa 	slli	r4,r8,31
 180b030:	88c0004c 	andi	r3,r17,1
 180b034:	28e2b03a 	or	r17,r5,r3
 180b038:	4010d07a 	srli	r8,r8,1
 180b03c:	2462b03a 	or	r17,r4,r17
 180b040:	003f7106 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b044:	4088b03a 	or	r4,r8,r2
 180b048:	20014526 	beq	r4,zero,180b560 <__adddf3+0x7d4>
 180b04c:	01000434 	movhi	r4,16
 180b050:	42000234 	orhi	r8,r8,8
 180b054:	213fffc4 	addi	r4,r4,-1
 180b058:	4110703a 	and	r8,r8,r4
 180b05c:	003f8206 	br	180ae68 <__alt_mem_mem_0+0xff7eae68>
 180b060:	18ffffc4 	addi	r3,r3,-1
 180b064:	1800491e 	bne	r3,zero,180b18c <__adddf3+0x400>
 180b068:	898bc83a 	sub	r5,r17,r6
 180b06c:	8963803a 	cmpltu	r17,r17,r5
 180b070:	4251c83a 	sub	r8,r8,r9
 180b074:	4451c83a 	sub	r8,r8,r17
 180b078:	2823883a 	mov	r17,r5
 180b07c:	003f9f06 	br	180aefc <__alt_mem_mem_0+0xff7eaefc>
 180b080:	4984b03a 	or	r2,r9,r6
 180b084:	103f6026 	beq	r2,zero,180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b088:	213fffc4 	addi	r4,r4,-1
 180b08c:	2000931e 	bne	r4,zero,180b2dc <__adddf3+0x550>
 180b090:	898d883a 	add	r6,r17,r6
 180b094:	3463803a 	cmpltu	r17,r6,r17
 180b098:	4251883a 	add	r8,r8,r9
 180b09c:	8a11883a 	add	r8,r17,r8
 180b0a0:	3023883a 	mov	r17,r6
 180b0a4:	003fd806 	br	180b008 <__alt_mem_mem_0+0xff7eb008>
 180b0a8:	1800541e 	bne	r3,zero,180b1fc <__adddf3+0x470>
 180b0ac:	80800044 	addi	r2,r16,1
 180b0b0:	1081ffcc 	andi	r2,r2,2047
 180b0b4:	00c00044 	movi	r3,1
 180b0b8:	1880a00e 	bge	r3,r2,180b33c <__adddf3+0x5b0>
 180b0bc:	8989c83a 	sub	r4,r17,r6
 180b0c0:	8905803a 	cmpltu	r2,r17,r4
 180b0c4:	4267c83a 	sub	r19,r8,r9
 180b0c8:	98a7c83a 	sub	r19,r19,r2
 180b0cc:	9880202c 	andhi	r2,r19,128
 180b0d0:	10006326 	beq	r2,zero,180b260 <__adddf3+0x4d4>
 180b0d4:	3463c83a 	sub	r17,r6,r17
 180b0d8:	4a07c83a 	sub	r3,r9,r8
 180b0dc:	344d803a 	cmpltu	r6,r6,r17
 180b0e0:	19a7c83a 	sub	r19,r3,r6
 180b0e4:	3825883a 	mov	r18,r7
 180b0e8:	983f8a1e 	bne	r19,zero,180af14 <__alt_mem_mem_0+0xff7eaf14>
 180b0ec:	8809883a 	mov	r4,r17
 180b0f0:	180d3900 	call	180d390 <__clzsi2>
 180b0f4:	10800804 	addi	r2,r2,32
 180b0f8:	10fffe04 	addi	r3,r2,-8
 180b0fc:	010007c4 	movi	r4,31
 180b100:	20ff890e 	bge	r4,r3,180af28 <__alt_mem_mem_0+0xff7eaf28>
 180b104:	10bff604 	addi	r2,r2,-40
 180b108:	8884983a 	sll	r2,r17,r2
 180b10c:	0023883a 	mov	r17,zero
 180b110:	1c3f8c0e 	bge	r3,r16,180af44 <__alt_mem_mem_0+0xff7eaf44>
 180b114:	023fe034 	movhi	r8,65408
 180b118:	423fffc4 	addi	r8,r8,-1
 180b11c:	80e1c83a 	sub	r16,r16,r3
 180b120:	1210703a 	and	r8,r2,r8
 180b124:	003f3806 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b128:	9007883a 	mov	r3,r18
 180b12c:	0011883a 	mov	r8,zero
 180b130:	0005883a 	mov	r2,zero
 180b134:	003f4c06 	br	180ae68 <__alt_mem_mem_0+0xff7eae68>
 180b138:	498cb03a 	or	r6,r9,r6
 180b13c:	300cc03a 	cmpne	r6,r6,zero
 180b140:	0007883a 	mov	r3,zero
 180b144:	003f6806 	br	180aee8 <__alt_mem_mem_0+0xff7eaee8>
 180b148:	20009c1e 	bne	r4,zero,180b3bc <__adddf3+0x630>
 180b14c:	80800044 	addi	r2,r16,1
 180b150:	1141ffcc 	andi	r5,r2,2047
 180b154:	01000044 	movi	r4,1
 180b158:	2140670e 	bge	r4,r5,180b2f8 <__adddf3+0x56c>
 180b15c:	0101ffc4 	movi	r4,2047
 180b160:	11007f26 	beq	r2,r4,180b360 <__adddf3+0x5d4>
 180b164:	898d883a 	add	r6,r17,r6
 180b168:	4247883a 	add	r3,r8,r9
 180b16c:	3451803a 	cmpltu	r8,r6,r17
 180b170:	40d1883a 	add	r8,r8,r3
 180b174:	402297fa 	slli	r17,r8,31
 180b178:	300cd07a 	srli	r6,r6,1
 180b17c:	4010d07a 	srli	r8,r8,1
 180b180:	1021883a 	mov	r16,r2
 180b184:	89a2b03a 	or	r17,r17,r6
 180b188:	003f1f06 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b18c:	0081ffc4 	movi	r2,2047
 180b190:	80bf481e 	bne	r16,r2,180aeb4 <__alt_mem_mem_0+0xff7eaeb4>
 180b194:	003f1c06 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b198:	843ff844 	addi	r16,r16,-31
 180b19c:	01000804 	movi	r4,32
 180b1a0:	1406d83a 	srl	r3,r2,r16
 180b1a4:	41005026 	beq	r8,r4,180b2e8 <__adddf3+0x55c>
 180b1a8:	01001004 	movi	r4,64
 180b1ac:	2211c83a 	sub	r8,r4,r8
 180b1b0:	1204983a 	sll	r2,r2,r8
 180b1b4:	88a2b03a 	or	r17,r17,r2
 180b1b8:	8822c03a 	cmpne	r17,r17,zero
 180b1bc:	1c62b03a 	or	r17,r3,r17
 180b1c0:	0011883a 	mov	r8,zero
 180b1c4:	0021883a 	mov	r16,zero
 180b1c8:	003f7106 	br	180af90 <__alt_mem_mem_0+0xff7eaf90>
 180b1cc:	193ff804 	addi	r4,r3,-32
 180b1d0:	00800804 	movi	r2,32
 180b1d4:	4908d83a 	srl	r4,r9,r4
 180b1d8:	18804526 	beq	r3,r2,180b2f0 <__adddf3+0x564>
 180b1dc:	00801004 	movi	r2,64
 180b1e0:	10c5c83a 	sub	r2,r2,r3
 180b1e4:	4886983a 	sll	r3,r9,r2
 180b1e8:	198cb03a 	or	r6,r3,r6
 180b1ec:	300cc03a 	cmpne	r6,r6,zero
 180b1f0:	218cb03a 	or	r6,r4,r6
 180b1f4:	0007883a 	mov	r3,zero
 180b1f8:	003f3b06 	br	180aee8 <__alt_mem_mem_0+0xff7eaee8>
 180b1fc:	80002a26 	beq	r16,zero,180b2a8 <__adddf3+0x51c>
 180b200:	0101ffc4 	movi	r4,2047
 180b204:	11006826 	beq	r2,r4,180b3a8 <__adddf3+0x61c>
 180b208:	00c7c83a 	sub	r3,zero,r3
 180b20c:	42002034 	orhi	r8,r8,128
 180b210:	01000e04 	movi	r4,56
 180b214:	20c07c16 	blt	r4,r3,180b408 <__adddf3+0x67c>
 180b218:	010007c4 	movi	r4,31
 180b21c:	20c0da16 	blt	r4,r3,180b588 <__adddf3+0x7fc>
 180b220:	01000804 	movi	r4,32
 180b224:	20c9c83a 	sub	r4,r4,r3
 180b228:	4114983a 	sll	r10,r8,r4
 180b22c:	88cad83a 	srl	r5,r17,r3
 180b230:	8908983a 	sll	r4,r17,r4
 180b234:	40c6d83a 	srl	r3,r8,r3
 180b238:	5162b03a 	or	r17,r10,r5
 180b23c:	2008c03a 	cmpne	r4,r4,zero
 180b240:	8922b03a 	or	r17,r17,r4
 180b244:	3463c83a 	sub	r17,r6,r17
 180b248:	48c7c83a 	sub	r3,r9,r3
 180b24c:	344d803a 	cmpltu	r6,r6,r17
 180b250:	1991c83a 	sub	r8,r3,r6
 180b254:	1021883a 	mov	r16,r2
 180b258:	3825883a 	mov	r18,r7
 180b25c:	003f2706 	br	180aefc <__alt_mem_mem_0+0xff7eaefc>
 180b260:	24d0b03a 	or	r8,r4,r19
 180b264:	40001b1e 	bne	r8,zero,180b2d4 <__adddf3+0x548>
 180b268:	0005883a 	mov	r2,zero
 180b26c:	0007883a 	mov	r3,zero
 180b270:	0021883a 	mov	r16,zero
 180b274:	003f4d06 	br	180afac <__alt_mem_mem_0+0xff7eafac>
 180b278:	008007c4 	movi	r2,31
 180b27c:	11003c16 	blt	r2,r4,180b370 <__adddf3+0x5e4>
 180b280:	00800804 	movi	r2,32
 180b284:	1105c83a 	sub	r2,r2,r4
 180b288:	488e983a 	sll	r7,r9,r2
 180b28c:	310ad83a 	srl	r5,r6,r4
 180b290:	3084983a 	sll	r2,r6,r2
 180b294:	4912d83a 	srl	r9,r9,r4
 180b298:	394ab03a 	or	r5,r7,r5
 180b29c:	1004c03a 	cmpne	r2,r2,zero
 180b2a0:	288ab03a 	or	r5,r5,r2
 180b2a4:	003f5306 	br	180aff4 <__alt_mem_mem_0+0xff7eaff4>
 180b2a8:	4448b03a 	or	r4,r8,r17
 180b2ac:	20003e26 	beq	r4,zero,180b3a8 <__adddf3+0x61c>
 180b2b0:	00c6303a 	nor	r3,zero,r3
 180b2b4:	18003a1e 	bne	r3,zero,180b3a0 <__adddf3+0x614>
 180b2b8:	3463c83a 	sub	r17,r6,r17
 180b2bc:	4a07c83a 	sub	r3,r9,r8
 180b2c0:	344d803a 	cmpltu	r6,r6,r17
 180b2c4:	1991c83a 	sub	r8,r3,r6
 180b2c8:	1021883a 	mov	r16,r2
 180b2cc:	3825883a 	mov	r18,r7
 180b2d0:	003f0a06 	br	180aefc <__alt_mem_mem_0+0xff7eaefc>
 180b2d4:	2023883a 	mov	r17,r4
 180b2d8:	003f0d06 	br	180af10 <__alt_mem_mem_0+0xff7eaf10>
 180b2dc:	0081ffc4 	movi	r2,2047
 180b2e0:	80bf3f1e 	bne	r16,r2,180afe0 <__alt_mem_mem_0+0xff7eafe0>
 180b2e4:	003ec806 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b2e8:	0005883a 	mov	r2,zero
 180b2ec:	003fb106 	br	180b1b4 <__alt_mem_mem_0+0xff7eb1b4>
 180b2f0:	0007883a 	mov	r3,zero
 180b2f4:	003fbc06 	br	180b1e8 <__alt_mem_mem_0+0xff7eb1e8>
 180b2f8:	4444b03a 	or	r2,r8,r17
 180b2fc:	8000871e 	bne	r16,zero,180b51c <__adddf3+0x790>
 180b300:	1000ba26 	beq	r2,zero,180b5ec <__adddf3+0x860>
 180b304:	4984b03a 	or	r2,r9,r6
 180b308:	103ebf26 	beq	r2,zero,180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b30c:	8985883a 	add	r2,r17,r6
 180b310:	4247883a 	add	r3,r8,r9
 180b314:	1451803a 	cmpltu	r8,r2,r17
 180b318:	40d1883a 	add	r8,r8,r3
 180b31c:	40c0202c 	andhi	r3,r8,128
 180b320:	1023883a 	mov	r17,r2
 180b324:	183f1a26 	beq	r3,zero,180af90 <__alt_mem_mem_0+0xff7eaf90>
 180b328:	00bfe034 	movhi	r2,65408
 180b32c:	10bfffc4 	addi	r2,r2,-1
 180b330:	2021883a 	mov	r16,r4
 180b334:	4090703a 	and	r8,r8,r2
 180b338:	003eb306 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b33c:	4444b03a 	or	r2,r8,r17
 180b340:	8000291e 	bne	r16,zero,180b3e8 <__adddf3+0x65c>
 180b344:	10004b1e 	bne	r2,zero,180b474 <__adddf3+0x6e8>
 180b348:	4990b03a 	or	r8,r9,r6
 180b34c:	40008b26 	beq	r8,zero,180b57c <__adddf3+0x7f0>
 180b350:	4811883a 	mov	r8,r9
 180b354:	3023883a 	mov	r17,r6
 180b358:	3825883a 	mov	r18,r7
 180b35c:	003eaa06 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b360:	1021883a 	mov	r16,r2
 180b364:	0011883a 	mov	r8,zero
 180b368:	0005883a 	mov	r2,zero
 180b36c:	003f0f06 	br	180afac <__alt_mem_mem_0+0xff7eafac>
 180b370:	217ff804 	addi	r5,r4,-32
 180b374:	00800804 	movi	r2,32
 180b378:	494ad83a 	srl	r5,r9,r5
 180b37c:	20807d26 	beq	r4,r2,180b574 <__adddf3+0x7e8>
 180b380:	00801004 	movi	r2,64
 180b384:	1109c83a 	sub	r4,r2,r4
 180b388:	4912983a 	sll	r9,r9,r4
 180b38c:	498cb03a 	or	r6,r9,r6
 180b390:	300cc03a 	cmpne	r6,r6,zero
 180b394:	298ab03a 	or	r5,r5,r6
 180b398:	0013883a 	mov	r9,zero
 180b39c:	003f1506 	br	180aff4 <__alt_mem_mem_0+0xff7eaff4>
 180b3a0:	0101ffc4 	movi	r4,2047
 180b3a4:	113f9a1e 	bne	r2,r4,180b210 <__alt_mem_mem_0+0xff7eb210>
 180b3a8:	4811883a 	mov	r8,r9
 180b3ac:	3023883a 	mov	r17,r6
 180b3b0:	1021883a 	mov	r16,r2
 180b3b4:	3825883a 	mov	r18,r7
 180b3b8:	003e9306 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b3bc:	8000161e 	bne	r16,zero,180b418 <__adddf3+0x68c>
 180b3c0:	444ab03a 	or	r5,r8,r17
 180b3c4:	28005126 	beq	r5,zero,180b50c <__adddf3+0x780>
 180b3c8:	0108303a 	nor	r4,zero,r4
 180b3cc:	20004d1e 	bne	r4,zero,180b504 <__adddf3+0x778>
 180b3d0:	89a3883a 	add	r17,r17,r6
 180b3d4:	4253883a 	add	r9,r8,r9
 180b3d8:	898d803a 	cmpltu	r6,r17,r6
 180b3dc:	3251883a 	add	r8,r6,r9
 180b3e0:	1021883a 	mov	r16,r2
 180b3e4:	003f0806 	br	180b008 <__alt_mem_mem_0+0xff7eb008>
 180b3e8:	1000301e 	bne	r2,zero,180b4ac <__adddf3+0x720>
 180b3ec:	4984b03a 	or	r2,r9,r6
 180b3f0:	10007126 	beq	r2,zero,180b5b8 <__adddf3+0x82c>
 180b3f4:	4811883a 	mov	r8,r9
 180b3f8:	3023883a 	mov	r17,r6
 180b3fc:	3825883a 	mov	r18,r7
 180b400:	0401ffc4 	movi	r16,2047
 180b404:	003e8006 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b408:	4462b03a 	or	r17,r8,r17
 180b40c:	8822c03a 	cmpne	r17,r17,zero
 180b410:	0007883a 	mov	r3,zero
 180b414:	003f8b06 	br	180b244 <__alt_mem_mem_0+0xff7eb244>
 180b418:	0141ffc4 	movi	r5,2047
 180b41c:	11403b26 	beq	r2,r5,180b50c <__adddf3+0x780>
 180b420:	0109c83a 	sub	r4,zero,r4
 180b424:	42002034 	orhi	r8,r8,128
 180b428:	01400e04 	movi	r5,56
 180b42c:	29006716 	blt	r5,r4,180b5cc <__adddf3+0x840>
 180b430:	014007c4 	movi	r5,31
 180b434:	29007016 	blt	r5,r4,180b5f8 <__adddf3+0x86c>
 180b438:	01400804 	movi	r5,32
 180b43c:	290bc83a 	sub	r5,r5,r4
 180b440:	4154983a 	sll	r10,r8,r5
 180b444:	890ed83a 	srl	r7,r17,r4
 180b448:	894a983a 	sll	r5,r17,r5
 180b44c:	4108d83a 	srl	r4,r8,r4
 180b450:	51e2b03a 	or	r17,r10,r7
 180b454:	280ac03a 	cmpne	r5,r5,zero
 180b458:	8962b03a 	or	r17,r17,r5
 180b45c:	89a3883a 	add	r17,r17,r6
 180b460:	2253883a 	add	r9,r4,r9
 180b464:	898d803a 	cmpltu	r6,r17,r6
 180b468:	3251883a 	add	r8,r6,r9
 180b46c:	1021883a 	mov	r16,r2
 180b470:	003ee506 	br	180b008 <__alt_mem_mem_0+0xff7eb008>
 180b474:	4984b03a 	or	r2,r9,r6
 180b478:	103e6326 	beq	r2,zero,180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b47c:	8987c83a 	sub	r3,r17,r6
 180b480:	88c9803a 	cmpltu	r4,r17,r3
 180b484:	4245c83a 	sub	r2,r8,r9
 180b488:	1105c83a 	sub	r2,r2,r4
 180b48c:	1100202c 	andhi	r4,r2,128
 180b490:	203ebb26 	beq	r4,zero,180af80 <__alt_mem_mem_0+0xff7eaf80>
 180b494:	3463c83a 	sub	r17,r6,r17
 180b498:	4a07c83a 	sub	r3,r9,r8
 180b49c:	344d803a 	cmpltu	r6,r6,r17
 180b4a0:	1991c83a 	sub	r8,r3,r6
 180b4a4:	3825883a 	mov	r18,r7
 180b4a8:	003e5706 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b4ac:	4984b03a 	or	r2,r9,r6
 180b4b0:	10002e26 	beq	r2,zero,180b56c <__adddf3+0x7e0>
 180b4b4:	4004d0fa 	srli	r2,r8,3
 180b4b8:	8822d0fa 	srli	r17,r17,3
 180b4bc:	4010977a 	slli	r8,r8,29
 180b4c0:	10c0022c 	andhi	r3,r2,8
 180b4c4:	4462b03a 	or	r17,r8,r17
 180b4c8:	18000826 	beq	r3,zero,180b4ec <__adddf3+0x760>
 180b4cc:	4808d0fa 	srli	r4,r9,3
 180b4d0:	20c0022c 	andhi	r3,r4,8
 180b4d4:	1800051e 	bne	r3,zero,180b4ec <__adddf3+0x760>
 180b4d8:	300cd0fa 	srli	r6,r6,3
 180b4dc:	4806977a 	slli	r3,r9,29
 180b4e0:	2005883a 	mov	r2,r4
 180b4e4:	3825883a 	mov	r18,r7
 180b4e8:	19a2b03a 	or	r17,r3,r6
 180b4ec:	8810d77a 	srli	r8,r17,29
 180b4f0:	100490fa 	slli	r2,r2,3
 180b4f4:	882290fa 	slli	r17,r17,3
 180b4f8:	0401ffc4 	movi	r16,2047
 180b4fc:	4090b03a 	or	r8,r8,r2
 180b500:	003e4106 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b504:	0141ffc4 	movi	r5,2047
 180b508:	117fc71e 	bne	r2,r5,180b428 <__alt_mem_mem_0+0xff7eb428>
 180b50c:	4811883a 	mov	r8,r9
 180b510:	3023883a 	mov	r17,r6
 180b514:	1021883a 	mov	r16,r2
 180b518:	003e3b06 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b51c:	10002f26 	beq	r2,zero,180b5dc <__adddf3+0x850>
 180b520:	4984b03a 	or	r2,r9,r6
 180b524:	10001126 	beq	r2,zero,180b56c <__adddf3+0x7e0>
 180b528:	4004d0fa 	srli	r2,r8,3
 180b52c:	8822d0fa 	srli	r17,r17,3
 180b530:	4010977a 	slli	r8,r8,29
 180b534:	10c0022c 	andhi	r3,r2,8
 180b538:	4462b03a 	or	r17,r8,r17
 180b53c:	183feb26 	beq	r3,zero,180b4ec <__alt_mem_mem_0+0xff7eb4ec>
 180b540:	4808d0fa 	srli	r4,r9,3
 180b544:	20c0022c 	andhi	r3,r4,8
 180b548:	183fe81e 	bne	r3,zero,180b4ec <__alt_mem_mem_0+0xff7eb4ec>
 180b54c:	300cd0fa 	srli	r6,r6,3
 180b550:	4806977a 	slli	r3,r9,29
 180b554:	2005883a 	mov	r2,r4
 180b558:	19a2b03a 	or	r17,r3,r6
 180b55c:	003fe306 	br	180b4ec <__alt_mem_mem_0+0xff7eb4ec>
 180b560:	0011883a 	mov	r8,zero
 180b564:	0005883a 	mov	r2,zero
 180b568:	003e3f06 	br	180ae68 <__alt_mem_mem_0+0xff7eae68>
 180b56c:	0401ffc4 	movi	r16,2047
 180b570:	003e2506 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b574:	0013883a 	mov	r9,zero
 180b578:	003f8406 	br	180b38c <__alt_mem_mem_0+0xff7eb38c>
 180b57c:	0005883a 	mov	r2,zero
 180b580:	0007883a 	mov	r3,zero
 180b584:	003e8906 	br	180afac <__alt_mem_mem_0+0xff7eafac>
 180b588:	197ff804 	addi	r5,r3,-32
 180b58c:	01000804 	movi	r4,32
 180b590:	414ad83a 	srl	r5,r8,r5
 180b594:	19002426 	beq	r3,r4,180b628 <__adddf3+0x89c>
 180b598:	01001004 	movi	r4,64
 180b59c:	20c7c83a 	sub	r3,r4,r3
 180b5a0:	40c6983a 	sll	r3,r8,r3
 180b5a4:	1c46b03a 	or	r3,r3,r17
 180b5a8:	1806c03a 	cmpne	r3,r3,zero
 180b5ac:	28e2b03a 	or	r17,r5,r3
 180b5b0:	0007883a 	mov	r3,zero
 180b5b4:	003f2306 	br	180b244 <__alt_mem_mem_0+0xff7eb244>
 180b5b8:	0007883a 	mov	r3,zero
 180b5bc:	5811883a 	mov	r8,r11
 180b5c0:	00bfffc4 	movi	r2,-1
 180b5c4:	0401ffc4 	movi	r16,2047
 180b5c8:	003e7806 	br	180afac <__alt_mem_mem_0+0xff7eafac>
 180b5cc:	4462b03a 	or	r17,r8,r17
 180b5d0:	8822c03a 	cmpne	r17,r17,zero
 180b5d4:	0009883a 	mov	r4,zero
 180b5d8:	003fa006 	br	180b45c <__alt_mem_mem_0+0xff7eb45c>
 180b5dc:	4811883a 	mov	r8,r9
 180b5e0:	3023883a 	mov	r17,r6
 180b5e4:	0401ffc4 	movi	r16,2047
 180b5e8:	003e0706 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b5ec:	4811883a 	mov	r8,r9
 180b5f0:	3023883a 	mov	r17,r6
 180b5f4:	003e0406 	br	180ae08 <__alt_mem_mem_0+0xff7eae08>
 180b5f8:	21fff804 	addi	r7,r4,-32
 180b5fc:	01400804 	movi	r5,32
 180b600:	41ced83a 	srl	r7,r8,r7
 180b604:	21400a26 	beq	r4,r5,180b630 <__adddf3+0x8a4>
 180b608:	01401004 	movi	r5,64
 180b60c:	2909c83a 	sub	r4,r5,r4
 180b610:	4108983a 	sll	r4,r8,r4
 180b614:	2448b03a 	or	r4,r4,r17
 180b618:	2008c03a 	cmpne	r4,r4,zero
 180b61c:	3922b03a 	or	r17,r7,r4
 180b620:	0009883a 	mov	r4,zero
 180b624:	003f8d06 	br	180b45c <__alt_mem_mem_0+0xff7eb45c>
 180b628:	0007883a 	mov	r3,zero
 180b62c:	003fdd06 	br	180b5a4 <__alt_mem_mem_0+0xff7eb5a4>
 180b630:	0009883a 	mov	r4,zero
 180b634:	003ff706 	br	180b614 <__alt_mem_mem_0+0xff7eb614>

0180b638 <__divdf3>:
 180b638:	defff204 	addi	sp,sp,-56
 180b63c:	dd400915 	stw	r21,36(sp)
 180b640:	282ad53a 	srli	r21,r5,20
 180b644:	dd000815 	stw	r20,32(sp)
 180b648:	2828d7fa 	srli	r20,r5,31
 180b64c:	dc000415 	stw	r16,16(sp)
 180b650:	04000434 	movhi	r16,16
 180b654:	df000c15 	stw	fp,48(sp)
 180b658:	843fffc4 	addi	r16,r16,-1
 180b65c:	dfc00d15 	stw	ra,52(sp)
 180b660:	ddc00b15 	stw	r23,44(sp)
 180b664:	dd800a15 	stw	r22,40(sp)
 180b668:	dcc00715 	stw	r19,28(sp)
 180b66c:	dc800615 	stw	r18,24(sp)
 180b670:	dc400515 	stw	r17,20(sp)
 180b674:	ad41ffcc 	andi	r21,r21,2047
 180b678:	2c20703a 	and	r16,r5,r16
 180b67c:	a7003fcc 	andi	fp,r20,255
 180b680:	a8006126 	beq	r21,zero,180b808 <__divdf3+0x1d0>
 180b684:	0081ffc4 	movi	r2,2047
 180b688:	2025883a 	mov	r18,r4
 180b68c:	a8803726 	beq	r21,r2,180b76c <__divdf3+0x134>
 180b690:	80800434 	orhi	r2,r16,16
 180b694:	100490fa 	slli	r2,r2,3
 180b698:	2020d77a 	srli	r16,r4,29
 180b69c:	202490fa 	slli	r18,r4,3
 180b6a0:	ad7f0044 	addi	r21,r21,-1023
 180b6a4:	80a0b03a 	or	r16,r16,r2
 180b6a8:	0027883a 	mov	r19,zero
 180b6ac:	0013883a 	mov	r9,zero
 180b6b0:	3804d53a 	srli	r2,r7,20
 180b6b4:	382cd7fa 	srli	r22,r7,31
 180b6b8:	04400434 	movhi	r17,16
 180b6bc:	8c7fffc4 	addi	r17,r17,-1
 180b6c0:	1081ffcc 	andi	r2,r2,2047
 180b6c4:	3011883a 	mov	r8,r6
 180b6c8:	3c62703a 	and	r17,r7,r17
 180b6cc:	b5c03fcc 	andi	r23,r22,255
 180b6d0:	10006c26 	beq	r2,zero,180b884 <__divdf3+0x24c>
 180b6d4:	00c1ffc4 	movi	r3,2047
 180b6d8:	10c06426 	beq	r2,r3,180b86c <__divdf3+0x234>
 180b6dc:	88c00434 	orhi	r3,r17,16
 180b6e0:	180690fa 	slli	r3,r3,3
 180b6e4:	3022d77a 	srli	r17,r6,29
 180b6e8:	301090fa 	slli	r8,r6,3
 180b6ec:	10bf0044 	addi	r2,r2,-1023
 180b6f0:	88e2b03a 	or	r17,r17,r3
 180b6f4:	000f883a 	mov	r7,zero
 180b6f8:	a58cf03a 	xor	r6,r20,r22
 180b6fc:	3cc8b03a 	or	r4,r7,r19
 180b700:	a8abc83a 	sub	r21,r21,r2
 180b704:	008003c4 	movi	r2,15
 180b708:	3007883a 	mov	r3,r6
 180b70c:	34c03fcc 	andi	r19,r6,255
 180b710:	11009036 	bltu	r2,r4,180b954 <__divdf3+0x31c>
 180b714:	200890ba 	slli	r4,r4,2
 180b718:	00806074 	movhi	r2,385
 180b71c:	10adcb04 	addi	r2,r2,-18644
 180b720:	2089883a 	add	r4,r4,r2
 180b724:	20800017 	ldw	r2,0(r4)
 180b728:	1000683a 	jmp	r2
 180b72c:	0180b954 	movui	r6,741
 180b730:	0180b7a4 	muli	r6,zero,734
 180b734:	0180b944 	movi	r6,741
 180b738:	0180b798 	cmpnei	r6,zero,734
 180b73c:	0180b944 	movi	r6,741
 180b740:	0180b918 	cmpnei	r6,zero,740
 180b744:	0180b944 	movi	r6,741
 180b748:	0180b798 	cmpnei	r6,zero,734
 180b74c:	0180b7a4 	muli	r6,zero,734
 180b750:	0180b7a4 	muli	r6,zero,734
 180b754:	0180b918 	cmpnei	r6,zero,740
 180b758:	0180b798 	cmpnei	r6,zero,734
 180b75c:	0180b788 	cmpgei	r6,zero,734
 180b760:	0180b788 	cmpgei	r6,zero,734
 180b764:	0180b788 	cmpgei	r6,zero,734
 180b768:	0180bc38 	rdprs	r6,zero,752
 180b76c:	2404b03a 	or	r2,r4,r16
 180b770:	1000661e 	bne	r2,zero,180b90c <__divdf3+0x2d4>
 180b774:	04c00204 	movi	r19,8
 180b778:	0021883a 	mov	r16,zero
 180b77c:	0025883a 	mov	r18,zero
 180b780:	02400084 	movi	r9,2
 180b784:	003fca06 	br	180b6b0 <__alt_mem_mem_0+0xff7eb6b0>
 180b788:	8023883a 	mov	r17,r16
 180b78c:	9011883a 	mov	r8,r18
 180b790:	e02f883a 	mov	r23,fp
 180b794:	480f883a 	mov	r7,r9
 180b798:	00800084 	movi	r2,2
 180b79c:	3881311e 	bne	r7,r2,180bc64 <__divdf3+0x62c>
 180b7a0:	b827883a 	mov	r19,r23
 180b7a4:	98c0004c 	andi	r3,r19,1
 180b7a8:	0081ffc4 	movi	r2,2047
 180b7ac:	000b883a 	mov	r5,zero
 180b7b0:	0025883a 	mov	r18,zero
 180b7b4:	1004953a 	slli	r2,r2,20
 180b7b8:	18c03fcc 	andi	r3,r3,255
 180b7bc:	04400434 	movhi	r17,16
 180b7c0:	8c7fffc4 	addi	r17,r17,-1
 180b7c4:	180697fa 	slli	r3,r3,31
 180b7c8:	2c4a703a 	and	r5,r5,r17
 180b7cc:	288ab03a 	or	r5,r5,r2
 180b7d0:	28c6b03a 	or	r3,r5,r3
 180b7d4:	9005883a 	mov	r2,r18
 180b7d8:	dfc00d17 	ldw	ra,52(sp)
 180b7dc:	df000c17 	ldw	fp,48(sp)
 180b7e0:	ddc00b17 	ldw	r23,44(sp)
 180b7e4:	dd800a17 	ldw	r22,40(sp)
 180b7e8:	dd400917 	ldw	r21,36(sp)
 180b7ec:	dd000817 	ldw	r20,32(sp)
 180b7f0:	dcc00717 	ldw	r19,28(sp)
 180b7f4:	dc800617 	ldw	r18,24(sp)
 180b7f8:	dc400517 	ldw	r17,20(sp)
 180b7fc:	dc000417 	ldw	r16,16(sp)
 180b800:	dec00e04 	addi	sp,sp,56
 180b804:	f800283a 	ret
 180b808:	2404b03a 	or	r2,r4,r16
 180b80c:	2027883a 	mov	r19,r4
 180b810:	10003926 	beq	r2,zero,180b8f8 <__divdf3+0x2c0>
 180b814:	80012e26 	beq	r16,zero,180bcd0 <__divdf3+0x698>
 180b818:	8009883a 	mov	r4,r16
 180b81c:	d9800315 	stw	r6,12(sp)
 180b820:	d9c00215 	stw	r7,8(sp)
 180b824:	180d3900 	call	180d390 <__clzsi2>
 180b828:	d9800317 	ldw	r6,12(sp)
 180b82c:	d9c00217 	ldw	r7,8(sp)
 180b830:	113ffd44 	addi	r4,r2,-11
 180b834:	00c00704 	movi	r3,28
 180b838:	19012116 	blt	r3,r4,180bcc0 <__divdf3+0x688>
 180b83c:	00c00744 	movi	r3,29
 180b840:	147ffe04 	addi	r17,r2,-8
 180b844:	1907c83a 	sub	r3,r3,r4
 180b848:	8460983a 	sll	r16,r16,r17
 180b84c:	98c6d83a 	srl	r3,r19,r3
 180b850:	9c64983a 	sll	r18,r19,r17
 180b854:	1c20b03a 	or	r16,r3,r16
 180b858:	1080fcc4 	addi	r2,r2,1011
 180b85c:	00abc83a 	sub	r21,zero,r2
 180b860:	0027883a 	mov	r19,zero
 180b864:	0013883a 	mov	r9,zero
 180b868:	003f9106 	br	180b6b0 <__alt_mem_mem_0+0xff7eb6b0>
 180b86c:	3446b03a 	or	r3,r6,r17
 180b870:	18001f1e 	bne	r3,zero,180b8f0 <__divdf3+0x2b8>
 180b874:	0023883a 	mov	r17,zero
 180b878:	0011883a 	mov	r8,zero
 180b87c:	01c00084 	movi	r7,2
 180b880:	003f9d06 	br	180b6f8 <__alt_mem_mem_0+0xff7eb6f8>
 180b884:	3446b03a 	or	r3,r6,r17
 180b888:	18001526 	beq	r3,zero,180b8e0 <__divdf3+0x2a8>
 180b88c:	88011b26 	beq	r17,zero,180bcfc <__divdf3+0x6c4>
 180b890:	8809883a 	mov	r4,r17
 180b894:	d9800315 	stw	r6,12(sp)
 180b898:	da400115 	stw	r9,4(sp)
 180b89c:	180d3900 	call	180d390 <__clzsi2>
 180b8a0:	d9800317 	ldw	r6,12(sp)
 180b8a4:	da400117 	ldw	r9,4(sp)
 180b8a8:	113ffd44 	addi	r4,r2,-11
 180b8ac:	00c00704 	movi	r3,28
 180b8b0:	19010e16 	blt	r3,r4,180bcec <__divdf3+0x6b4>
 180b8b4:	00c00744 	movi	r3,29
 180b8b8:	123ffe04 	addi	r8,r2,-8
 180b8bc:	1907c83a 	sub	r3,r3,r4
 180b8c0:	8a22983a 	sll	r17,r17,r8
 180b8c4:	30c6d83a 	srl	r3,r6,r3
 180b8c8:	3210983a 	sll	r8,r6,r8
 180b8cc:	1c62b03a 	or	r17,r3,r17
 180b8d0:	1080fcc4 	addi	r2,r2,1011
 180b8d4:	0085c83a 	sub	r2,zero,r2
 180b8d8:	000f883a 	mov	r7,zero
 180b8dc:	003f8606 	br	180b6f8 <__alt_mem_mem_0+0xff7eb6f8>
 180b8e0:	0023883a 	mov	r17,zero
 180b8e4:	0011883a 	mov	r8,zero
 180b8e8:	01c00044 	movi	r7,1
 180b8ec:	003f8206 	br	180b6f8 <__alt_mem_mem_0+0xff7eb6f8>
 180b8f0:	01c000c4 	movi	r7,3
 180b8f4:	003f8006 	br	180b6f8 <__alt_mem_mem_0+0xff7eb6f8>
 180b8f8:	04c00104 	movi	r19,4
 180b8fc:	0021883a 	mov	r16,zero
 180b900:	0025883a 	mov	r18,zero
 180b904:	02400044 	movi	r9,1
 180b908:	003f6906 	br	180b6b0 <__alt_mem_mem_0+0xff7eb6b0>
 180b90c:	04c00304 	movi	r19,12
 180b910:	024000c4 	movi	r9,3
 180b914:	003f6606 	br	180b6b0 <__alt_mem_mem_0+0xff7eb6b0>
 180b918:	01400434 	movhi	r5,16
 180b91c:	0007883a 	mov	r3,zero
 180b920:	297fffc4 	addi	r5,r5,-1
 180b924:	04bfffc4 	movi	r18,-1
 180b928:	0081ffc4 	movi	r2,2047
 180b92c:	003fa106 	br	180b7b4 <__alt_mem_mem_0+0xff7eb7b4>
 180b930:	00c00044 	movi	r3,1
 180b934:	1887c83a 	sub	r3,r3,r2
 180b938:	01000e04 	movi	r4,56
 180b93c:	20c1210e 	bge	r4,r3,180bdc4 <__divdf3+0x78c>
 180b940:	98c0004c 	andi	r3,r19,1
 180b944:	0005883a 	mov	r2,zero
 180b948:	000b883a 	mov	r5,zero
 180b94c:	0025883a 	mov	r18,zero
 180b950:	003f9806 	br	180b7b4 <__alt_mem_mem_0+0xff7eb7b4>
 180b954:	8c00fd36 	bltu	r17,r16,180bd4c <__divdf3+0x714>
 180b958:	8440fb26 	beq	r16,r17,180bd48 <__divdf3+0x710>
 180b95c:	8007883a 	mov	r3,r16
 180b960:	ad7fffc4 	addi	r21,r21,-1
 180b964:	0021883a 	mov	r16,zero
 180b968:	4004d63a 	srli	r2,r8,24
 180b96c:	8822923a 	slli	r17,r17,8
 180b970:	1809883a 	mov	r4,r3
 180b974:	402c923a 	slli	r22,r8,8
 180b978:	88b8b03a 	or	fp,r17,r2
 180b97c:	e028d43a 	srli	r20,fp,16
 180b980:	d8c00015 	stw	r3,0(sp)
 180b984:	e5ffffcc 	andi	r23,fp,65535
 180b988:	a00b883a 	mov	r5,r20
 180b98c:	180acd00 	call	180acd0 <__udivsi3>
 180b990:	d8c00017 	ldw	r3,0(sp)
 180b994:	a00b883a 	mov	r5,r20
 180b998:	d8800315 	stw	r2,12(sp)
 180b99c:	1809883a 	mov	r4,r3
 180b9a0:	180ad340 	call	180ad34 <__umodsi3>
 180b9a4:	d9800317 	ldw	r6,12(sp)
 180b9a8:	1006943a 	slli	r3,r2,16
 180b9ac:	9004d43a 	srli	r2,r18,16
 180b9b0:	b9a3383a 	mul	r17,r23,r6
 180b9b4:	10c4b03a 	or	r2,r2,r3
 180b9b8:	1440062e 	bgeu	r2,r17,180b9d4 <__divdf3+0x39c>
 180b9bc:	1705883a 	add	r2,r2,fp
 180b9c0:	30ffffc4 	addi	r3,r6,-1
 180b9c4:	1700ee36 	bltu	r2,fp,180bd80 <__divdf3+0x748>
 180b9c8:	1440ed2e 	bgeu	r2,r17,180bd80 <__divdf3+0x748>
 180b9cc:	31bfff84 	addi	r6,r6,-2
 180b9d0:	1705883a 	add	r2,r2,fp
 180b9d4:	1463c83a 	sub	r17,r2,r17
 180b9d8:	a00b883a 	mov	r5,r20
 180b9dc:	8809883a 	mov	r4,r17
 180b9e0:	d9800315 	stw	r6,12(sp)
 180b9e4:	180acd00 	call	180acd0 <__udivsi3>
 180b9e8:	a00b883a 	mov	r5,r20
 180b9ec:	8809883a 	mov	r4,r17
 180b9f0:	d8800215 	stw	r2,8(sp)
 180b9f4:	180ad340 	call	180ad34 <__umodsi3>
 180b9f8:	d9c00217 	ldw	r7,8(sp)
 180b9fc:	1004943a 	slli	r2,r2,16
 180ba00:	94bfffcc 	andi	r18,r18,65535
 180ba04:	b9d1383a 	mul	r8,r23,r7
 180ba08:	90a4b03a 	or	r18,r18,r2
 180ba0c:	d9800317 	ldw	r6,12(sp)
 180ba10:	9200062e 	bgeu	r18,r8,180ba2c <__divdf3+0x3f4>
 180ba14:	9725883a 	add	r18,r18,fp
 180ba18:	38bfffc4 	addi	r2,r7,-1
 180ba1c:	9700d636 	bltu	r18,fp,180bd78 <__divdf3+0x740>
 180ba20:	9200d52e 	bgeu	r18,r8,180bd78 <__divdf3+0x740>
 180ba24:	39ffff84 	addi	r7,r7,-2
 180ba28:	9725883a 	add	r18,r18,fp
 180ba2c:	3004943a 	slli	r2,r6,16
 180ba30:	b012d43a 	srli	r9,r22,16
 180ba34:	b1bfffcc 	andi	r6,r22,65535
 180ba38:	11e2b03a 	or	r17,r2,r7
 180ba3c:	8806d43a 	srli	r3,r17,16
 180ba40:	893fffcc 	andi	r4,r17,65535
 180ba44:	218b383a 	mul	r5,r4,r6
 180ba48:	30c5383a 	mul	r2,r6,r3
 180ba4c:	2249383a 	mul	r4,r4,r9
 180ba50:	280ed43a 	srli	r7,r5,16
 180ba54:	9225c83a 	sub	r18,r18,r8
 180ba58:	2089883a 	add	r4,r4,r2
 180ba5c:	3909883a 	add	r4,r7,r4
 180ba60:	1a47383a 	mul	r3,r3,r9
 180ba64:	2080022e 	bgeu	r4,r2,180ba70 <__divdf3+0x438>
 180ba68:	00800074 	movhi	r2,1
 180ba6c:	1887883a 	add	r3,r3,r2
 180ba70:	2004d43a 	srli	r2,r4,16
 180ba74:	2008943a 	slli	r4,r4,16
 180ba78:	297fffcc 	andi	r5,r5,65535
 180ba7c:	10c7883a 	add	r3,r2,r3
 180ba80:	2149883a 	add	r4,r4,r5
 180ba84:	90c0a536 	bltu	r18,r3,180bd1c <__divdf3+0x6e4>
 180ba88:	90c0bf26 	beq	r18,r3,180bd88 <__divdf3+0x750>
 180ba8c:	90c7c83a 	sub	r3,r18,r3
 180ba90:	810fc83a 	sub	r7,r16,r4
 180ba94:	81e5803a 	cmpltu	r18,r16,r7
 180ba98:	1ca5c83a 	sub	r18,r3,r18
 180ba9c:	e480c126 	beq	fp,r18,180bda4 <__divdf3+0x76c>
 180baa0:	a00b883a 	mov	r5,r20
 180baa4:	9009883a 	mov	r4,r18
 180baa8:	d9800315 	stw	r6,12(sp)
 180baac:	d9c00215 	stw	r7,8(sp)
 180bab0:	da400115 	stw	r9,4(sp)
 180bab4:	180acd00 	call	180acd0 <__udivsi3>
 180bab8:	a00b883a 	mov	r5,r20
 180babc:	9009883a 	mov	r4,r18
 180bac0:	d8800015 	stw	r2,0(sp)
 180bac4:	180ad340 	call	180ad34 <__umodsi3>
 180bac8:	d9c00217 	ldw	r7,8(sp)
 180bacc:	da000017 	ldw	r8,0(sp)
 180bad0:	1006943a 	slli	r3,r2,16
 180bad4:	3804d43a 	srli	r2,r7,16
 180bad8:	ba21383a 	mul	r16,r23,r8
 180badc:	d9800317 	ldw	r6,12(sp)
 180bae0:	10c4b03a 	or	r2,r2,r3
 180bae4:	da400117 	ldw	r9,4(sp)
 180bae8:	1400062e 	bgeu	r2,r16,180bb04 <__divdf3+0x4cc>
 180baec:	1705883a 	add	r2,r2,fp
 180baf0:	40ffffc4 	addi	r3,r8,-1
 180baf4:	1700ad36 	bltu	r2,fp,180bdac <__divdf3+0x774>
 180baf8:	1400ac2e 	bgeu	r2,r16,180bdac <__divdf3+0x774>
 180bafc:	423fff84 	addi	r8,r8,-2
 180bb00:	1705883a 	add	r2,r2,fp
 180bb04:	1421c83a 	sub	r16,r2,r16
 180bb08:	a00b883a 	mov	r5,r20
 180bb0c:	8009883a 	mov	r4,r16
 180bb10:	d9800315 	stw	r6,12(sp)
 180bb14:	d9c00215 	stw	r7,8(sp)
 180bb18:	da000015 	stw	r8,0(sp)
 180bb1c:	da400115 	stw	r9,4(sp)
 180bb20:	180acd00 	call	180acd0 <__udivsi3>
 180bb24:	8009883a 	mov	r4,r16
 180bb28:	a00b883a 	mov	r5,r20
 180bb2c:	1025883a 	mov	r18,r2
 180bb30:	180ad340 	call	180ad34 <__umodsi3>
 180bb34:	d9c00217 	ldw	r7,8(sp)
 180bb38:	1004943a 	slli	r2,r2,16
 180bb3c:	bcaf383a 	mul	r23,r23,r18
 180bb40:	393fffcc 	andi	r4,r7,65535
 180bb44:	2088b03a 	or	r4,r4,r2
 180bb48:	d9800317 	ldw	r6,12(sp)
 180bb4c:	da000017 	ldw	r8,0(sp)
 180bb50:	da400117 	ldw	r9,4(sp)
 180bb54:	25c0062e 	bgeu	r4,r23,180bb70 <__divdf3+0x538>
 180bb58:	2709883a 	add	r4,r4,fp
 180bb5c:	90bfffc4 	addi	r2,r18,-1
 180bb60:	27009436 	bltu	r4,fp,180bdb4 <__divdf3+0x77c>
 180bb64:	25c0932e 	bgeu	r4,r23,180bdb4 <__divdf3+0x77c>
 180bb68:	94bfff84 	addi	r18,r18,-2
 180bb6c:	2709883a 	add	r4,r4,fp
 180bb70:	4004943a 	slli	r2,r8,16
 180bb74:	25efc83a 	sub	r23,r4,r23
 180bb78:	1490b03a 	or	r8,r2,r18
 180bb7c:	4008d43a 	srli	r4,r8,16
 180bb80:	40ffffcc 	andi	r3,r8,65535
 180bb84:	30c5383a 	mul	r2,r6,r3
 180bb88:	1a47383a 	mul	r3,r3,r9
 180bb8c:	310d383a 	mul	r6,r6,r4
 180bb90:	100ad43a 	srli	r5,r2,16
 180bb94:	4913383a 	mul	r9,r9,r4
 180bb98:	1987883a 	add	r3,r3,r6
 180bb9c:	28c7883a 	add	r3,r5,r3
 180bba0:	1980022e 	bgeu	r3,r6,180bbac <__divdf3+0x574>
 180bba4:	01000074 	movhi	r4,1
 180bba8:	4913883a 	add	r9,r9,r4
 180bbac:	1808d43a 	srli	r4,r3,16
 180bbb0:	1806943a 	slli	r3,r3,16
 180bbb4:	10bfffcc 	andi	r2,r2,65535
 180bbb8:	2253883a 	add	r9,r4,r9
 180bbbc:	1887883a 	add	r3,r3,r2
 180bbc0:	ba403836 	bltu	r23,r9,180bca4 <__divdf3+0x66c>
 180bbc4:	ba403626 	beq	r23,r9,180bca0 <__divdf3+0x668>
 180bbc8:	42000054 	ori	r8,r8,1
 180bbcc:	a880ffc4 	addi	r2,r21,1023
 180bbd0:	00bf570e 	bge	zero,r2,180b930 <__alt_mem_mem_0+0xff7eb930>
 180bbd4:	40c001cc 	andi	r3,r8,7
 180bbd8:	18000726 	beq	r3,zero,180bbf8 <__divdf3+0x5c0>
 180bbdc:	40c003cc 	andi	r3,r8,15
 180bbe0:	01000104 	movi	r4,4
 180bbe4:	19000426 	beq	r3,r4,180bbf8 <__divdf3+0x5c0>
 180bbe8:	4107883a 	add	r3,r8,r4
 180bbec:	1a11803a 	cmpltu	r8,r3,r8
 180bbf0:	8a23883a 	add	r17,r17,r8
 180bbf4:	1811883a 	mov	r8,r3
 180bbf8:	88c0402c 	andhi	r3,r17,256
 180bbfc:	18000426 	beq	r3,zero,180bc10 <__divdf3+0x5d8>
 180bc00:	00ffc034 	movhi	r3,65280
 180bc04:	18ffffc4 	addi	r3,r3,-1
 180bc08:	a8810004 	addi	r2,r21,1024
 180bc0c:	88e2703a 	and	r17,r17,r3
 180bc10:	00c1ff84 	movi	r3,2046
 180bc14:	18bee316 	blt	r3,r2,180b7a4 <__alt_mem_mem_0+0xff7eb7a4>
 180bc18:	8824977a 	slli	r18,r17,29
 180bc1c:	4010d0fa 	srli	r8,r8,3
 180bc20:	8822927a 	slli	r17,r17,9
 180bc24:	1081ffcc 	andi	r2,r2,2047
 180bc28:	9224b03a 	or	r18,r18,r8
 180bc2c:	880ad33a 	srli	r5,r17,12
 180bc30:	98c0004c 	andi	r3,r19,1
 180bc34:	003edf06 	br	180b7b4 <__alt_mem_mem_0+0xff7eb7b4>
 180bc38:	8080022c 	andhi	r2,r16,8
 180bc3c:	10001226 	beq	r2,zero,180bc88 <__divdf3+0x650>
 180bc40:	8880022c 	andhi	r2,r17,8
 180bc44:	1000101e 	bne	r2,zero,180bc88 <__divdf3+0x650>
 180bc48:	00800434 	movhi	r2,16
 180bc4c:	89400234 	orhi	r5,r17,8
 180bc50:	10bfffc4 	addi	r2,r2,-1
 180bc54:	b007883a 	mov	r3,r22
 180bc58:	288a703a 	and	r5,r5,r2
 180bc5c:	4025883a 	mov	r18,r8
 180bc60:	003f3106 	br	180b928 <__alt_mem_mem_0+0xff7eb928>
 180bc64:	008000c4 	movi	r2,3
 180bc68:	3880a626 	beq	r7,r2,180bf04 <__divdf3+0x8cc>
 180bc6c:	00800044 	movi	r2,1
 180bc70:	3880521e 	bne	r7,r2,180bdbc <__divdf3+0x784>
 180bc74:	b807883a 	mov	r3,r23
 180bc78:	0005883a 	mov	r2,zero
 180bc7c:	000b883a 	mov	r5,zero
 180bc80:	0025883a 	mov	r18,zero
 180bc84:	003ecb06 	br	180b7b4 <__alt_mem_mem_0+0xff7eb7b4>
 180bc88:	00800434 	movhi	r2,16
 180bc8c:	81400234 	orhi	r5,r16,8
 180bc90:	10bfffc4 	addi	r2,r2,-1
 180bc94:	a007883a 	mov	r3,r20
 180bc98:	288a703a 	and	r5,r5,r2
 180bc9c:	003f2206 	br	180b928 <__alt_mem_mem_0+0xff7eb928>
 180bca0:	183fca26 	beq	r3,zero,180bbcc <__alt_mem_mem_0+0xff7ebbcc>
 180bca4:	e5ef883a 	add	r23,fp,r23
 180bca8:	40bfffc4 	addi	r2,r8,-1
 180bcac:	bf00392e 	bgeu	r23,fp,180bd94 <__divdf3+0x75c>
 180bcb0:	1011883a 	mov	r8,r2
 180bcb4:	ba7fc41e 	bne	r23,r9,180bbc8 <__alt_mem_mem_0+0xff7ebbc8>
 180bcb8:	b0ffc31e 	bne	r22,r3,180bbc8 <__alt_mem_mem_0+0xff7ebbc8>
 180bcbc:	003fc306 	br	180bbcc <__alt_mem_mem_0+0xff7ebbcc>
 180bcc0:	143ff604 	addi	r16,r2,-40
 180bcc4:	9c20983a 	sll	r16,r19,r16
 180bcc8:	0025883a 	mov	r18,zero
 180bccc:	003ee206 	br	180b858 <__alt_mem_mem_0+0xff7eb858>
 180bcd0:	d9800315 	stw	r6,12(sp)
 180bcd4:	d9c00215 	stw	r7,8(sp)
 180bcd8:	180d3900 	call	180d390 <__clzsi2>
 180bcdc:	10800804 	addi	r2,r2,32
 180bce0:	d9c00217 	ldw	r7,8(sp)
 180bce4:	d9800317 	ldw	r6,12(sp)
 180bce8:	003ed106 	br	180b830 <__alt_mem_mem_0+0xff7eb830>
 180bcec:	147ff604 	addi	r17,r2,-40
 180bcf0:	3462983a 	sll	r17,r6,r17
 180bcf4:	0011883a 	mov	r8,zero
 180bcf8:	003ef506 	br	180b8d0 <__alt_mem_mem_0+0xff7eb8d0>
 180bcfc:	3009883a 	mov	r4,r6
 180bd00:	d9800315 	stw	r6,12(sp)
 180bd04:	da400115 	stw	r9,4(sp)
 180bd08:	180d3900 	call	180d390 <__clzsi2>
 180bd0c:	10800804 	addi	r2,r2,32
 180bd10:	da400117 	ldw	r9,4(sp)
 180bd14:	d9800317 	ldw	r6,12(sp)
 180bd18:	003ee306 	br	180b8a8 <__alt_mem_mem_0+0xff7eb8a8>
 180bd1c:	85a1883a 	add	r16,r16,r22
 180bd20:	8585803a 	cmpltu	r2,r16,r22
 180bd24:	1705883a 	add	r2,r2,fp
 180bd28:	14a5883a 	add	r18,r2,r18
 180bd2c:	88bfffc4 	addi	r2,r17,-1
 180bd30:	e4800c2e 	bgeu	fp,r18,180bd64 <__divdf3+0x72c>
 180bd34:	90c03e36 	bltu	r18,r3,180be30 <__divdf3+0x7f8>
 180bd38:	1c806926 	beq	r3,r18,180bee0 <__divdf3+0x8a8>
 180bd3c:	90c7c83a 	sub	r3,r18,r3
 180bd40:	1023883a 	mov	r17,r2
 180bd44:	003f5206 	br	180ba90 <__alt_mem_mem_0+0xff7eba90>
 180bd48:	923f0436 	bltu	r18,r8,180b95c <__alt_mem_mem_0+0xff7eb95c>
 180bd4c:	800897fa 	slli	r4,r16,31
 180bd50:	9004d07a 	srli	r2,r18,1
 180bd54:	8006d07a 	srli	r3,r16,1
 180bd58:	902097fa 	slli	r16,r18,31
 180bd5c:	20a4b03a 	or	r18,r4,r2
 180bd60:	003f0106 	br	180b968 <__alt_mem_mem_0+0xff7eb968>
 180bd64:	e4bff51e 	bne	fp,r18,180bd3c <__alt_mem_mem_0+0xff7ebd3c>
 180bd68:	85bff22e 	bgeu	r16,r22,180bd34 <__alt_mem_mem_0+0xff7ebd34>
 180bd6c:	e0c7c83a 	sub	r3,fp,r3
 180bd70:	1023883a 	mov	r17,r2
 180bd74:	003f4606 	br	180ba90 <__alt_mem_mem_0+0xff7eba90>
 180bd78:	100f883a 	mov	r7,r2
 180bd7c:	003f2b06 	br	180ba2c <__alt_mem_mem_0+0xff7eba2c>
 180bd80:	180d883a 	mov	r6,r3
 180bd84:	003f1306 	br	180b9d4 <__alt_mem_mem_0+0xff7eb9d4>
 180bd88:	813fe436 	bltu	r16,r4,180bd1c <__alt_mem_mem_0+0xff7ebd1c>
 180bd8c:	0007883a 	mov	r3,zero
 180bd90:	003f3f06 	br	180ba90 <__alt_mem_mem_0+0xff7eba90>
 180bd94:	ba402c36 	bltu	r23,r9,180be48 <__divdf3+0x810>
 180bd98:	4dc05426 	beq	r9,r23,180beec <__divdf3+0x8b4>
 180bd9c:	1011883a 	mov	r8,r2
 180bda0:	003f8906 	br	180bbc8 <__alt_mem_mem_0+0xff7ebbc8>
 180bda4:	023fffc4 	movi	r8,-1
 180bda8:	003f8806 	br	180bbcc <__alt_mem_mem_0+0xff7ebbcc>
 180bdac:	1811883a 	mov	r8,r3
 180bdb0:	003f5406 	br	180bb04 <__alt_mem_mem_0+0xff7ebb04>
 180bdb4:	1025883a 	mov	r18,r2
 180bdb8:	003f6d06 	br	180bb70 <__alt_mem_mem_0+0xff7ebb70>
 180bdbc:	b827883a 	mov	r19,r23
 180bdc0:	003f8206 	br	180bbcc <__alt_mem_mem_0+0xff7ebbcc>
 180bdc4:	010007c4 	movi	r4,31
 180bdc8:	20c02616 	blt	r4,r3,180be64 <__divdf3+0x82c>
 180bdcc:	00800804 	movi	r2,32
 180bdd0:	10c5c83a 	sub	r2,r2,r3
 180bdd4:	888a983a 	sll	r5,r17,r2
 180bdd8:	40c8d83a 	srl	r4,r8,r3
 180bddc:	4084983a 	sll	r2,r8,r2
 180bde0:	88e2d83a 	srl	r17,r17,r3
 180bde4:	2906b03a 	or	r3,r5,r4
 180bde8:	1004c03a 	cmpne	r2,r2,zero
 180bdec:	1886b03a 	or	r3,r3,r2
 180bdf0:	188001cc 	andi	r2,r3,7
 180bdf4:	10000726 	beq	r2,zero,180be14 <__divdf3+0x7dc>
 180bdf8:	188003cc 	andi	r2,r3,15
 180bdfc:	01000104 	movi	r4,4
 180be00:	11000426 	beq	r2,r4,180be14 <__divdf3+0x7dc>
 180be04:	1805883a 	mov	r2,r3
 180be08:	10c00104 	addi	r3,r2,4
 180be0c:	1885803a 	cmpltu	r2,r3,r2
 180be10:	88a3883a 	add	r17,r17,r2
 180be14:	8880202c 	andhi	r2,r17,128
 180be18:	10002726 	beq	r2,zero,180beb8 <__divdf3+0x880>
 180be1c:	98c0004c 	andi	r3,r19,1
 180be20:	00800044 	movi	r2,1
 180be24:	000b883a 	mov	r5,zero
 180be28:	0025883a 	mov	r18,zero
 180be2c:	003e6106 	br	180b7b4 <__alt_mem_mem_0+0xff7eb7b4>
 180be30:	85a1883a 	add	r16,r16,r22
 180be34:	8585803a 	cmpltu	r2,r16,r22
 180be38:	1705883a 	add	r2,r2,fp
 180be3c:	14a5883a 	add	r18,r2,r18
 180be40:	8c7fff84 	addi	r17,r17,-2
 180be44:	003f1106 	br	180ba8c <__alt_mem_mem_0+0xff7eba8c>
 180be48:	b589883a 	add	r4,r22,r22
 180be4c:	25ad803a 	cmpltu	r22,r4,r22
 180be50:	b739883a 	add	fp,r22,fp
 180be54:	40bfff84 	addi	r2,r8,-2
 180be58:	bf2f883a 	add	r23,r23,fp
 180be5c:	202d883a 	mov	r22,r4
 180be60:	003f9306 	br	180bcb0 <__alt_mem_mem_0+0xff7ebcb0>
 180be64:	013ff844 	movi	r4,-31
 180be68:	2085c83a 	sub	r2,r4,r2
 180be6c:	8888d83a 	srl	r4,r17,r2
 180be70:	00800804 	movi	r2,32
 180be74:	18802126 	beq	r3,r2,180befc <__divdf3+0x8c4>
 180be78:	00801004 	movi	r2,64
 180be7c:	10c5c83a 	sub	r2,r2,r3
 180be80:	8884983a 	sll	r2,r17,r2
 180be84:	1204b03a 	or	r2,r2,r8
 180be88:	1004c03a 	cmpne	r2,r2,zero
 180be8c:	2084b03a 	or	r2,r4,r2
 180be90:	144001cc 	andi	r17,r2,7
 180be94:	88000d1e 	bne	r17,zero,180becc <__divdf3+0x894>
 180be98:	000b883a 	mov	r5,zero
 180be9c:	1024d0fa 	srli	r18,r2,3
 180bea0:	98c0004c 	andi	r3,r19,1
 180bea4:	0005883a 	mov	r2,zero
 180bea8:	9464b03a 	or	r18,r18,r17
 180beac:	003e4106 	br	180b7b4 <__alt_mem_mem_0+0xff7eb7b4>
 180beb0:	1007883a 	mov	r3,r2
 180beb4:	0023883a 	mov	r17,zero
 180beb8:	880a927a 	slli	r5,r17,9
 180bebc:	1805883a 	mov	r2,r3
 180bec0:	8822977a 	slli	r17,r17,29
 180bec4:	280ad33a 	srli	r5,r5,12
 180bec8:	003ff406 	br	180be9c <__alt_mem_mem_0+0xff7ebe9c>
 180becc:	10c003cc 	andi	r3,r2,15
 180bed0:	01000104 	movi	r4,4
 180bed4:	193ff626 	beq	r3,r4,180beb0 <__alt_mem_mem_0+0xff7ebeb0>
 180bed8:	0023883a 	mov	r17,zero
 180bedc:	003fca06 	br	180be08 <__alt_mem_mem_0+0xff7ebe08>
 180bee0:	813fd336 	bltu	r16,r4,180be30 <__alt_mem_mem_0+0xff7ebe30>
 180bee4:	1023883a 	mov	r17,r2
 180bee8:	003fa806 	br	180bd8c <__alt_mem_mem_0+0xff7ebd8c>
 180beec:	b0ffd636 	bltu	r22,r3,180be48 <__alt_mem_mem_0+0xff7ebe48>
 180bef0:	1011883a 	mov	r8,r2
 180bef4:	b0ff341e 	bne	r22,r3,180bbc8 <__alt_mem_mem_0+0xff7ebbc8>
 180bef8:	003f3406 	br	180bbcc <__alt_mem_mem_0+0xff7ebbcc>
 180befc:	0005883a 	mov	r2,zero
 180bf00:	003fe006 	br	180be84 <__alt_mem_mem_0+0xff7ebe84>
 180bf04:	00800434 	movhi	r2,16
 180bf08:	89400234 	orhi	r5,r17,8
 180bf0c:	10bfffc4 	addi	r2,r2,-1
 180bf10:	b807883a 	mov	r3,r23
 180bf14:	288a703a 	and	r5,r5,r2
 180bf18:	4025883a 	mov	r18,r8
 180bf1c:	003e8206 	br	180b928 <__alt_mem_mem_0+0xff7eb928>

0180bf20 <__eqdf2>:
 180bf20:	2804d53a 	srli	r2,r5,20
 180bf24:	3806d53a 	srli	r3,r7,20
 180bf28:	02000434 	movhi	r8,16
 180bf2c:	423fffc4 	addi	r8,r8,-1
 180bf30:	1081ffcc 	andi	r2,r2,2047
 180bf34:	0281ffc4 	movi	r10,2047
 180bf38:	2a12703a 	and	r9,r5,r8
 180bf3c:	18c1ffcc 	andi	r3,r3,2047
 180bf40:	3a10703a 	and	r8,r7,r8
 180bf44:	280ad7fa 	srli	r5,r5,31
 180bf48:	380ed7fa 	srli	r7,r7,31
 180bf4c:	12801026 	beq	r2,r10,180bf90 <__eqdf2+0x70>
 180bf50:	0281ffc4 	movi	r10,2047
 180bf54:	1a800a26 	beq	r3,r10,180bf80 <__eqdf2+0x60>
 180bf58:	10c00226 	beq	r2,r3,180bf64 <__eqdf2+0x44>
 180bf5c:	00800044 	movi	r2,1
 180bf60:	f800283a 	ret
 180bf64:	4a3ffd1e 	bne	r9,r8,180bf5c <__alt_mem_mem_0+0xff7ebf5c>
 180bf68:	21bffc1e 	bne	r4,r6,180bf5c <__alt_mem_mem_0+0xff7ebf5c>
 180bf6c:	29c00c26 	beq	r5,r7,180bfa0 <__eqdf2+0x80>
 180bf70:	103ffa1e 	bne	r2,zero,180bf5c <__alt_mem_mem_0+0xff7ebf5c>
 180bf74:	2244b03a 	or	r2,r4,r9
 180bf78:	1004c03a 	cmpne	r2,r2,zero
 180bf7c:	f800283a 	ret
 180bf80:	3214b03a 	or	r10,r6,r8
 180bf84:	503ff426 	beq	r10,zero,180bf58 <__alt_mem_mem_0+0xff7ebf58>
 180bf88:	00800044 	movi	r2,1
 180bf8c:	f800283a 	ret
 180bf90:	2254b03a 	or	r10,r4,r9
 180bf94:	503fee26 	beq	r10,zero,180bf50 <__alt_mem_mem_0+0xff7ebf50>
 180bf98:	00800044 	movi	r2,1
 180bf9c:	f800283a 	ret
 180bfa0:	0005883a 	mov	r2,zero
 180bfa4:	f800283a 	ret

0180bfa8 <__gedf2>:
 180bfa8:	2804d53a 	srli	r2,r5,20
 180bfac:	3806d53a 	srli	r3,r7,20
 180bfb0:	02000434 	movhi	r8,16
 180bfb4:	423fffc4 	addi	r8,r8,-1
 180bfb8:	1081ffcc 	andi	r2,r2,2047
 180bfbc:	0241ffc4 	movi	r9,2047
 180bfc0:	2a14703a 	and	r10,r5,r8
 180bfc4:	18c1ffcc 	andi	r3,r3,2047
 180bfc8:	3a10703a 	and	r8,r7,r8
 180bfcc:	280ad7fa 	srli	r5,r5,31
 180bfd0:	380ed7fa 	srli	r7,r7,31
 180bfd4:	12401d26 	beq	r2,r9,180c04c <__gedf2+0xa4>
 180bfd8:	0241ffc4 	movi	r9,2047
 180bfdc:	1a401226 	beq	r3,r9,180c028 <__gedf2+0x80>
 180bfe0:	1000081e 	bne	r2,zero,180c004 <__gedf2+0x5c>
 180bfe4:	2296b03a 	or	r11,r4,r10
 180bfe8:	5813003a 	cmpeq	r9,r11,zero
 180bfec:	1800091e 	bne	r3,zero,180c014 <__gedf2+0x6c>
 180bff0:	3218b03a 	or	r12,r6,r8
 180bff4:	6000071e 	bne	r12,zero,180c014 <__gedf2+0x6c>
 180bff8:	0005883a 	mov	r2,zero
 180bffc:	5800101e 	bne	r11,zero,180c040 <__gedf2+0x98>
 180c000:	f800283a 	ret
 180c004:	18000c1e 	bne	r3,zero,180c038 <__gedf2+0x90>
 180c008:	3212b03a 	or	r9,r6,r8
 180c00c:	48000c26 	beq	r9,zero,180c040 <__gedf2+0x98>
 180c010:	0013883a 	mov	r9,zero
 180c014:	39c03fcc 	andi	r7,r7,255
 180c018:	48000826 	beq	r9,zero,180c03c <__gedf2+0x94>
 180c01c:	38000926 	beq	r7,zero,180c044 <__gedf2+0x9c>
 180c020:	00800044 	movi	r2,1
 180c024:	f800283a 	ret
 180c028:	3212b03a 	or	r9,r6,r8
 180c02c:	483fec26 	beq	r9,zero,180bfe0 <__alt_mem_mem_0+0xff7ebfe0>
 180c030:	00bfff84 	movi	r2,-2
 180c034:	f800283a 	ret
 180c038:	39c03fcc 	andi	r7,r7,255
 180c03c:	29c00626 	beq	r5,r7,180c058 <__gedf2+0xb0>
 180c040:	283ff726 	beq	r5,zero,180c020 <__alt_mem_mem_0+0xff7ec020>
 180c044:	00bfffc4 	movi	r2,-1
 180c048:	f800283a 	ret
 180c04c:	2292b03a 	or	r9,r4,r10
 180c050:	483fe126 	beq	r9,zero,180bfd8 <__alt_mem_mem_0+0xff7ebfd8>
 180c054:	003ff606 	br	180c030 <__alt_mem_mem_0+0xff7ec030>
 180c058:	18bff916 	blt	r3,r2,180c040 <__alt_mem_mem_0+0xff7ec040>
 180c05c:	10c00316 	blt	r2,r3,180c06c <__gedf2+0xc4>
 180c060:	42bff736 	bltu	r8,r10,180c040 <__alt_mem_mem_0+0xff7ec040>
 180c064:	52000326 	beq	r10,r8,180c074 <__gedf2+0xcc>
 180c068:	5200042e 	bgeu	r10,r8,180c07c <__gedf2+0xd4>
 180c06c:	283fec1e 	bne	r5,zero,180c020 <__alt_mem_mem_0+0xff7ec020>
 180c070:	003ff406 	br	180c044 <__alt_mem_mem_0+0xff7ec044>
 180c074:	313ff236 	bltu	r6,r4,180c040 <__alt_mem_mem_0+0xff7ec040>
 180c078:	21bffc36 	bltu	r4,r6,180c06c <__alt_mem_mem_0+0xff7ec06c>
 180c07c:	0005883a 	mov	r2,zero
 180c080:	f800283a 	ret

0180c084 <__ledf2>:
 180c084:	2804d53a 	srli	r2,r5,20
 180c088:	3810d53a 	srli	r8,r7,20
 180c08c:	00c00434 	movhi	r3,16
 180c090:	18ffffc4 	addi	r3,r3,-1
 180c094:	1081ffcc 	andi	r2,r2,2047
 180c098:	0241ffc4 	movi	r9,2047
 180c09c:	28d4703a 	and	r10,r5,r3
 180c0a0:	4201ffcc 	andi	r8,r8,2047
 180c0a4:	38c6703a 	and	r3,r7,r3
 180c0a8:	280ad7fa 	srli	r5,r5,31
 180c0ac:	380ed7fa 	srli	r7,r7,31
 180c0b0:	12401f26 	beq	r2,r9,180c130 <__ledf2+0xac>
 180c0b4:	0241ffc4 	movi	r9,2047
 180c0b8:	42401426 	beq	r8,r9,180c10c <__ledf2+0x88>
 180c0bc:	1000091e 	bne	r2,zero,180c0e4 <__ledf2+0x60>
 180c0c0:	2296b03a 	or	r11,r4,r10
 180c0c4:	5813003a 	cmpeq	r9,r11,zero
 180c0c8:	29403fcc 	andi	r5,r5,255
 180c0cc:	40000a1e 	bne	r8,zero,180c0f8 <__ledf2+0x74>
 180c0d0:	30d8b03a 	or	r12,r6,r3
 180c0d4:	6000081e 	bne	r12,zero,180c0f8 <__ledf2+0x74>
 180c0d8:	0005883a 	mov	r2,zero
 180c0dc:	5800111e 	bne	r11,zero,180c124 <__ledf2+0xa0>
 180c0e0:	f800283a 	ret
 180c0e4:	29403fcc 	andi	r5,r5,255
 180c0e8:	40000c1e 	bne	r8,zero,180c11c <__ledf2+0x98>
 180c0ec:	30d2b03a 	or	r9,r6,r3
 180c0f0:	48000c26 	beq	r9,zero,180c124 <__ledf2+0xa0>
 180c0f4:	0013883a 	mov	r9,zero
 180c0f8:	39c03fcc 	andi	r7,r7,255
 180c0fc:	48000826 	beq	r9,zero,180c120 <__ledf2+0x9c>
 180c100:	38001126 	beq	r7,zero,180c148 <__ledf2+0xc4>
 180c104:	00800044 	movi	r2,1
 180c108:	f800283a 	ret
 180c10c:	30d2b03a 	or	r9,r6,r3
 180c110:	483fea26 	beq	r9,zero,180c0bc <__alt_mem_mem_0+0xff7ec0bc>
 180c114:	00800084 	movi	r2,2
 180c118:	f800283a 	ret
 180c11c:	39c03fcc 	andi	r7,r7,255
 180c120:	39400726 	beq	r7,r5,180c140 <__ledf2+0xbc>
 180c124:	2800081e 	bne	r5,zero,180c148 <__ledf2+0xc4>
 180c128:	00800044 	movi	r2,1
 180c12c:	f800283a 	ret
 180c130:	2292b03a 	or	r9,r4,r10
 180c134:	483fdf26 	beq	r9,zero,180c0b4 <__alt_mem_mem_0+0xff7ec0b4>
 180c138:	00800084 	movi	r2,2
 180c13c:	f800283a 	ret
 180c140:	4080030e 	bge	r8,r2,180c150 <__ledf2+0xcc>
 180c144:	383fef26 	beq	r7,zero,180c104 <__alt_mem_mem_0+0xff7ec104>
 180c148:	00bfffc4 	movi	r2,-1
 180c14c:	f800283a 	ret
 180c150:	123feb16 	blt	r2,r8,180c100 <__alt_mem_mem_0+0xff7ec100>
 180c154:	1abff336 	bltu	r3,r10,180c124 <__alt_mem_mem_0+0xff7ec124>
 180c158:	50c00326 	beq	r10,r3,180c168 <__ledf2+0xe4>
 180c15c:	50c0042e 	bgeu	r10,r3,180c170 <__ledf2+0xec>
 180c160:	283fe81e 	bne	r5,zero,180c104 <__alt_mem_mem_0+0xff7ec104>
 180c164:	003ff806 	br	180c148 <__alt_mem_mem_0+0xff7ec148>
 180c168:	313fee36 	bltu	r6,r4,180c124 <__alt_mem_mem_0+0xff7ec124>
 180c16c:	21bffc36 	bltu	r4,r6,180c160 <__alt_mem_mem_0+0xff7ec160>
 180c170:	0005883a 	mov	r2,zero
 180c174:	f800283a 	ret

0180c178 <__muldf3>:
 180c178:	defff304 	addi	sp,sp,-52
 180c17c:	2804d53a 	srli	r2,r5,20
 180c180:	dd800915 	stw	r22,36(sp)
 180c184:	282cd7fa 	srli	r22,r5,31
 180c188:	dc000315 	stw	r16,12(sp)
 180c18c:	04000434 	movhi	r16,16
 180c190:	dd400815 	stw	r21,32(sp)
 180c194:	dc800515 	stw	r18,20(sp)
 180c198:	843fffc4 	addi	r16,r16,-1
 180c19c:	dfc00c15 	stw	ra,48(sp)
 180c1a0:	df000b15 	stw	fp,44(sp)
 180c1a4:	ddc00a15 	stw	r23,40(sp)
 180c1a8:	dd000715 	stw	r20,28(sp)
 180c1ac:	dcc00615 	stw	r19,24(sp)
 180c1b0:	dc400415 	stw	r17,16(sp)
 180c1b4:	1481ffcc 	andi	r18,r2,2047
 180c1b8:	2c20703a 	and	r16,r5,r16
 180c1bc:	b02b883a 	mov	r21,r22
 180c1c0:	b2403fcc 	andi	r9,r22,255
 180c1c4:	90006026 	beq	r18,zero,180c348 <__muldf3+0x1d0>
 180c1c8:	0081ffc4 	movi	r2,2047
 180c1cc:	2029883a 	mov	r20,r4
 180c1d0:	90803626 	beq	r18,r2,180c2ac <__muldf3+0x134>
 180c1d4:	80800434 	orhi	r2,r16,16
 180c1d8:	100490fa 	slli	r2,r2,3
 180c1dc:	2020d77a 	srli	r16,r4,29
 180c1e0:	202890fa 	slli	r20,r4,3
 180c1e4:	94bf0044 	addi	r18,r18,-1023
 180c1e8:	80a0b03a 	or	r16,r16,r2
 180c1ec:	0027883a 	mov	r19,zero
 180c1f0:	0039883a 	mov	fp,zero
 180c1f4:	3804d53a 	srli	r2,r7,20
 180c1f8:	382ed7fa 	srli	r23,r7,31
 180c1fc:	04400434 	movhi	r17,16
 180c200:	8c7fffc4 	addi	r17,r17,-1
 180c204:	1081ffcc 	andi	r2,r2,2047
 180c208:	3011883a 	mov	r8,r6
 180c20c:	3c62703a 	and	r17,r7,r17
 180c210:	ba803fcc 	andi	r10,r23,255
 180c214:	10006d26 	beq	r2,zero,180c3cc <__muldf3+0x254>
 180c218:	00c1ffc4 	movi	r3,2047
 180c21c:	10c06526 	beq	r2,r3,180c3b4 <__muldf3+0x23c>
 180c220:	88c00434 	orhi	r3,r17,16
 180c224:	180690fa 	slli	r3,r3,3
 180c228:	3022d77a 	srli	r17,r6,29
 180c22c:	301090fa 	slli	r8,r6,3
 180c230:	10bf0044 	addi	r2,r2,-1023
 180c234:	88e2b03a 	or	r17,r17,r3
 180c238:	000b883a 	mov	r5,zero
 180c23c:	9085883a 	add	r2,r18,r2
 180c240:	2cc8b03a 	or	r4,r5,r19
 180c244:	00c003c4 	movi	r3,15
 180c248:	bdacf03a 	xor	r22,r23,r22
 180c24c:	12c00044 	addi	r11,r2,1
 180c250:	19009936 	bltu	r3,r4,180c4b8 <__muldf3+0x340>
 180c254:	200890ba 	slli	r4,r4,2
 180c258:	00c06074 	movhi	r3,385
 180c25c:	18f09b04 	addi	r3,r3,-15764
 180c260:	20c9883a 	add	r4,r4,r3
 180c264:	20c00017 	ldw	r3,0(r4)
 180c268:	1800683a 	jmp	r3
 180c26c:	0180c4b8 	rdprs	r6,zero,786
 180c270:	0180c2cc 	andi	r6,zero,779
 180c274:	0180c2cc 	andi	r6,zero,779
 180c278:	0180c2c8 	cmpgei	r6,zero,779
 180c27c:	0180c494 	movui	r6,786
 180c280:	0180c494 	movui	r6,786
 180c284:	0180c47c 	xorhi	r6,zero,785
 180c288:	0180c2c8 	cmpgei	r6,zero,779
 180c28c:	0180c494 	movui	r6,786
 180c290:	0180c47c 	xorhi	r6,zero,785
 180c294:	0180c494 	movui	r6,786
 180c298:	0180c2c8 	cmpgei	r6,zero,779
 180c29c:	0180c4a4 	muli	r6,zero,786
 180c2a0:	0180c4a4 	muli	r6,zero,786
 180c2a4:	0180c4a4 	muli	r6,zero,786
 180c2a8:	0180c6c0 	call	180c6c <__alt_mem_tse_descriptor_memory_0+0x180c6c>
 180c2ac:	2404b03a 	or	r2,r4,r16
 180c2b0:	10006f1e 	bne	r2,zero,180c470 <__muldf3+0x2f8>
 180c2b4:	04c00204 	movi	r19,8
 180c2b8:	0021883a 	mov	r16,zero
 180c2bc:	0029883a 	mov	r20,zero
 180c2c0:	07000084 	movi	fp,2
 180c2c4:	003fcb06 	br	180c1f4 <__alt_mem_mem_0+0xff7ec1f4>
 180c2c8:	502d883a 	mov	r22,r10
 180c2cc:	00800084 	movi	r2,2
 180c2d0:	28805726 	beq	r5,r2,180c430 <__muldf3+0x2b8>
 180c2d4:	008000c4 	movi	r2,3
 180c2d8:	28816626 	beq	r5,r2,180c874 <__muldf3+0x6fc>
 180c2dc:	00800044 	movi	r2,1
 180c2e0:	2881411e 	bne	r5,r2,180c7e8 <__muldf3+0x670>
 180c2e4:	b02b883a 	mov	r21,r22
 180c2e8:	0005883a 	mov	r2,zero
 180c2ec:	000b883a 	mov	r5,zero
 180c2f0:	0029883a 	mov	r20,zero
 180c2f4:	1004953a 	slli	r2,r2,20
 180c2f8:	a8c03fcc 	andi	r3,r21,255
 180c2fc:	04400434 	movhi	r17,16
 180c300:	8c7fffc4 	addi	r17,r17,-1
 180c304:	180697fa 	slli	r3,r3,31
 180c308:	2c4a703a 	and	r5,r5,r17
 180c30c:	288ab03a 	or	r5,r5,r2
 180c310:	28c6b03a 	or	r3,r5,r3
 180c314:	a005883a 	mov	r2,r20
 180c318:	dfc00c17 	ldw	ra,48(sp)
 180c31c:	df000b17 	ldw	fp,44(sp)
 180c320:	ddc00a17 	ldw	r23,40(sp)
 180c324:	dd800917 	ldw	r22,36(sp)
 180c328:	dd400817 	ldw	r21,32(sp)
 180c32c:	dd000717 	ldw	r20,28(sp)
 180c330:	dcc00617 	ldw	r19,24(sp)
 180c334:	dc800517 	ldw	r18,20(sp)
 180c338:	dc400417 	ldw	r17,16(sp)
 180c33c:	dc000317 	ldw	r16,12(sp)
 180c340:	dec00d04 	addi	sp,sp,52
 180c344:	f800283a 	ret
 180c348:	2404b03a 	or	r2,r4,r16
 180c34c:	2027883a 	mov	r19,r4
 180c350:	10004226 	beq	r2,zero,180c45c <__muldf3+0x2e4>
 180c354:	8000fc26 	beq	r16,zero,180c748 <__muldf3+0x5d0>
 180c358:	8009883a 	mov	r4,r16
 180c35c:	d9800215 	stw	r6,8(sp)
 180c360:	d9c00015 	stw	r7,0(sp)
 180c364:	da400115 	stw	r9,4(sp)
 180c368:	180d3900 	call	180d390 <__clzsi2>
 180c36c:	d9800217 	ldw	r6,8(sp)
 180c370:	d9c00017 	ldw	r7,0(sp)
 180c374:	da400117 	ldw	r9,4(sp)
 180c378:	113ffd44 	addi	r4,r2,-11
 180c37c:	00c00704 	movi	r3,28
 180c380:	1900ed16 	blt	r3,r4,180c738 <__muldf3+0x5c0>
 180c384:	00c00744 	movi	r3,29
 180c388:	147ffe04 	addi	r17,r2,-8
 180c38c:	1907c83a 	sub	r3,r3,r4
 180c390:	8460983a 	sll	r16,r16,r17
 180c394:	98c6d83a 	srl	r3,r19,r3
 180c398:	9c68983a 	sll	r20,r19,r17
 180c39c:	1c20b03a 	or	r16,r3,r16
 180c3a0:	1080fcc4 	addi	r2,r2,1011
 180c3a4:	00a5c83a 	sub	r18,zero,r2
 180c3a8:	0027883a 	mov	r19,zero
 180c3ac:	0039883a 	mov	fp,zero
 180c3b0:	003f9006 	br	180c1f4 <__alt_mem_mem_0+0xff7ec1f4>
 180c3b4:	3446b03a 	or	r3,r6,r17
 180c3b8:	1800261e 	bne	r3,zero,180c454 <__muldf3+0x2dc>
 180c3bc:	0023883a 	mov	r17,zero
 180c3c0:	0011883a 	mov	r8,zero
 180c3c4:	01400084 	movi	r5,2
 180c3c8:	003f9c06 	br	180c23c <__alt_mem_mem_0+0xff7ec23c>
 180c3cc:	3446b03a 	or	r3,r6,r17
 180c3d0:	18001c26 	beq	r3,zero,180c444 <__muldf3+0x2cc>
 180c3d4:	8800ce26 	beq	r17,zero,180c710 <__muldf3+0x598>
 180c3d8:	8809883a 	mov	r4,r17
 180c3dc:	d9800215 	stw	r6,8(sp)
 180c3e0:	da400115 	stw	r9,4(sp)
 180c3e4:	da800015 	stw	r10,0(sp)
 180c3e8:	180d3900 	call	180d390 <__clzsi2>
 180c3ec:	d9800217 	ldw	r6,8(sp)
 180c3f0:	da400117 	ldw	r9,4(sp)
 180c3f4:	da800017 	ldw	r10,0(sp)
 180c3f8:	113ffd44 	addi	r4,r2,-11
 180c3fc:	00c00704 	movi	r3,28
 180c400:	1900bf16 	blt	r3,r4,180c700 <__muldf3+0x588>
 180c404:	00c00744 	movi	r3,29
 180c408:	123ffe04 	addi	r8,r2,-8
 180c40c:	1907c83a 	sub	r3,r3,r4
 180c410:	8a22983a 	sll	r17,r17,r8
 180c414:	30c6d83a 	srl	r3,r6,r3
 180c418:	3210983a 	sll	r8,r6,r8
 180c41c:	1c62b03a 	or	r17,r3,r17
 180c420:	1080fcc4 	addi	r2,r2,1011
 180c424:	0085c83a 	sub	r2,zero,r2
 180c428:	000b883a 	mov	r5,zero
 180c42c:	003f8306 	br	180c23c <__alt_mem_mem_0+0xff7ec23c>
 180c430:	b02b883a 	mov	r21,r22
 180c434:	0081ffc4 	movi	r2,2047
 180c438:	000b883a 	mov	r5,zero
 180c43c:	0029883a 	mov	r20,zero
 180c440:	003fac06 	br	180c2f4 <__alt_mem_mem_0+0xff7ec2f4>
 180c444:	0023883a 	mov	r17,zero
 180c448:	0011883a 	mov	r8,zero
 180c44c:	01400044 	movi	r5,1
 180c450:	003f7a06 	br	180c23c <__alt_mem_mem_0+0xff7ec23c>
 180c454:	014000c4 	movi	r5,3
 180c458:	003f7806 	br	180c23c <__alt_mem_mem_0+0xff7ec23c>
 180c45c:	04c00104 	movi	r19,4
 180c460:	0021883a 	mov	r16,zero
 180c464:	0029883a 	mov	r20,zero
 180c468:	07000044 	movi	fp,1
 180c46c:	003f6106 	br	180c1f4 <__alt_mem_mem_0+0xff7ec1f4>
 180c470:	04c00304 	movi	r19,12
 180c474:	070000c4 	movi	fp,3
 180c478:	003f5e06 	br	180c1f4 <__alt_mem_mem_0+0xff7ec1f4>
 180c47c:	01400434 	movhi	r5,16
 180c480:	002b883a 	mov	r21,zero
 180c484:	297fffc4 	addi	r5,r5,-1
 180c488:	053fffc4 	movi	r20,-1
 180c48c:	0081ffc4 	movi	r2,2047
 180c490:	003f9806 	br	180c2f4 <__alt_mem_mem_0+0xff7ec2f4>
 180c494:	8023883a 	mov	r17,r16
 180c498:	a011883a 	mov	r8,r20
 180c49c:	e00b883a 	mov	r5,fp
 180c4a0:	003f8a06 	br	180c2cc <__alt_mem_mem_0+0xff7ec2cc>
 180c4a4:	8023883a 	mov	r17,r16
 180c4a8:	a011883a 	mov	r8,r20
 180c4ac:	482d883a 	mov	r22,r9
 180c4b0:	e00b883a 	mov	r5,fp
 180c4b4:	003f8506 	br	180c2cc <__alt_mem_mem_0+0xff7ec2cc>
 180c4b8:	a00ad43a 	srli	r5,r20,16
 180c4bc:	401ad43a 	srli	r13,r8,16
 180c4c0:	a53fffcc 	andi	r20,r20,65535
 180c4c4:	423fffcc 	andi	r8,r8,65535
 180c4c8:	4519383a 	mul	r12,r8,r20
 180c4cc:	4147383a 	mul	r3,r8,r5
 180c4d0:	6d09383a 	mul	r4,r13,r20
 180c4d4:	600cd43a 	srli	r6,r12,16
 180c4d8:	2b5d383a 	mul	r14,r5,r13
 180c4dc:	20c9883a 	add	r4,r4,r3
 180c4e0:	310d883a 	add	r6,r6,r4
 180c4e4:	30c0022e 	bgeu	r6,r3,180c4f0 <__muldf3+0x378>
 180c4e8:	00c00074 	movhi	r3,1
 180c4ec:	70dd883a 	add	r14,r14,r3
 180c4f0:	8826d43a 	srli	r19,r17,16
 180c4f4:	8bffffcc 	andi	r15,r17,65535
 180c4f8:	7d23383a 	mul	r17,r15,r20
 180c4fc:	7949383a 	mul	r4,r15,r5
 180c500:	9d29383a 	mul	r20,r19,r20
 180c504:	8814d43a 	srli	r10,r17,16
 180c508:	3012943a 	slli	r9,r6,16
 180c50c:	a129883a 	add	r20,r20,r4
 180c510:	633fffcc 	andi	r12,r12,65535
 180c514:	5515883a 	add	r10,r10,r20
 180c518:	3006d43a 	srli	r3,r6,16
 180c51c:	4b13883a 	add	r9,r9,r12
 180c520:	2ccb383a 	mul	r5,r5,r19
 180c524:	5100022e 	bgeu	r10,r4,180c530 <__muldf3+0x3b8>
 180c528:	01000074 	movhi	r4,1
 180c52c:	290b883a 	add	r5,r5,r4
 180c530:	802ad43a 	srli	r21,r16,16
 180c534:	843fffcc 	andi	r16,r16,65535
 180c538:	440d383a 	mul	r6,r8,r16
 180c53c:	4565383a 	mul	r18,r8,r21
 180c540:	8349383a 	mul	r4,r16,r13
 180c544:	500e943a 	slli	r7,r10,16
 180c548:	3010d43a 	srli	r8,r6,16
 180c54c:	5028d43a 	srli	r20,r10,16
 180c550:	2489883a 	add	r4,r4,r18
 180c554:	8abfffcc 	andi	r10,r17,65535
 180c558:	3a95883a 	add	r10,r7,r10
 180c55c:	4119883a 	add	r12,r8,r4
 180c560:	a169883a 	add	r20,r20,r5
 180c564:	1a87883a 	add	r3,r3,r10
 180c568:	6d5b383a 	mul	r13,r13,r21
 180c56c:	6480022e 	bgeu	r12,r18,180c578 <__muldf3+0x400>
 180c570:	01000074 	movhi	r4,1
 180c574:	691b883a 	add	r13,r13,r4
 180c578:	7c25383a 	mul	r18,r15,r16
 180c57c:	7d4b383a 	mul	r5,r15,r21
 180c580:	84cf383a 	mul	r7,r16,r19
 180c584:	901ed43a 	srli	r15,r18,16
 180c588:	6008d43a 	srli	r4,r12,16
 180c58c:	6010943a 	slli	r8,r12,16
 180c590:	394f883a 	add	r7,r7,r5
 180c594:	333fffcc 	andi	r12,r6,65535
 180c598:	79df883a 	add	r15,r15,r7
 180c59c:	235b883a 	add	r13,r4,r13
 180c5a0:	9d63383a 	mul	r17,r19,r21
 180c5a4:	4309883a 	add	r4,r8,r12
 180c5a8:	7940022e 	bgeu	r15,r5,180c5b4 <__muldf3+0x43c>
 180c5ac:	01400074 	movhi	r5,1
 180c5b0:	8963883a 	add	r17,r17,r5
 180c5b4:	780a943a 	slli	r5,r15,16
 180c5b8:	91bfffcc 	andi	r6,r18,65535
 180c5bc:	70c7883a 	add	r3,r14,r3
 180c5c0:	298d883a 	add	r6,r5,r6
 180c5c4:	1a8f803a 	cmpltu	r7,r3,r10
 180c5c8:	350b883a 	add	r5,r6,r20
 180c5cc:	20c7883a 	add	r3,r4,r3
 180c5d0:	3955883a 	add	r10,r7,r5
 180c5d4:	1909803a 	cmpltu	r4,r3,r4
 180c5d8:	6a91883a 	add	r8,r13,r10
 180c5dc:	780cd43a 	srli	r6,r15,16
 180c5e0:	2219883a 	add	r12,r4,r8
 180c5e4:	2d0b803a 	cmpltu	r5,r5,r20
 180c5e8:	51cf803a 	cmpltu	r7,r10,r7
 180c5ec:	29ceb03a 	or	r7,r5,r7
 180c5f0:	4351803a 	cmpltu	r8,r8,r13
 180c5f4:	610b803a 	cmpltu	r5,r12,r4
 180c5f8:	4148b03a 	or	r4,r8,r5
 180c5fc:	398f883a 	add	r7,r7,r6
 180c600:	3909883a 	add	r4,r7,r4
 180c604:	1810927a 	slli	r8,r3,9
 180c608:	2449883a 	add	r4,r4,r17
 180c60c:	2008927a 	slli	r4,r4,9
 180c610:	6022d5fa 	srli	r17,r12,23
 180c614:	1806d5fa 	srli	r3,r3,23
 180c618:	4252b03a 	or	r9,r8,r9
 180c61c:	600a927a 	slli	r5,r12,9
 180c620:	4810c03a 	cmpne	r8,r9,zero
 180c624:	2462b03a 	or	r17,r4,r17
 180c628:	40c6b03a 	or	r3,r8,r3
 180c62c:	8900402c 	andhi	r4,r17,256
 180c630:	1950b03a 	or	r8,r3,r5
 180c634:	20000726 	beq	r4,zero,180c654 <__muldf3+0x4dc>
 180c638:	4006d07a 	srli	r3,r8,1
 180c63c:	880497fa 	slli	r2,r17,31
 180c640:	4200004c 	andi	r8,r8,1
 180c644:	8822d07a 	srli	r17,r17,1
 180c648:	1a10b03a 	or	r8,r3,r8
 180c64c:	1210b03a 	or	r8,r2,r8
 180c650:	5805883a 	mov	r2,r11
 180c654:	1140ffc4 	addi	r5,r2,1023
 180c658:	0140440e 	bge	zero,r5,180c76c <__muldf3+0x5f4>
 180c65c:	40c001cc 	andi	r3,r8,7
 180c660:	18000726 	beq	r3,zero,180c680 <__muldf3+0x508>
 180c664:	40c003cc 	andi	r3,r8,15
 180c668:	01000104 	movi	r4,4
 180c66c:	19000426 	beq	r3,r4,180c680 <__muldf3+0x508>
 180c670:	4107883a 	add	r3,r8,r4
 180c674:	1a11803a 	cmpltu	r8,r3,r8
 180c678:	8a23883a 	add	r17,r17,r8
 180c67c:	1811883a 	mov	r8,r3
 180c680:	88c0402c 	andhi	r3,r17,256
 180c684:	18000426 	beq	r3,zero,180c698 <__muldf3+0x520>
 180c688:	11410004 	addi	r5,r2,1024
 180c68c:	00bfc034 	movhi	r2,65280
 180c690:	10bfffc4 	addi	r2,r2,-1
 180c694:	88a2703a 	and	r17,r17,r2
 180c698:	0081ff84 	movi	r2,2046
 180c69c:	117f6416 	blt	r2,r5,180c430 <__alt_mem_mem_0+0xff7ec430>
 180c6a0:	8828977a 	slli	r20,r17,29
 180c6a4:	4010d0fa 	srli	r8,r8,3
 180c6a8:	8822927a 	slli	r17,r17,9
 180c6ac:	2881ffcc 	andi	r2,r5,2047
 180c6b0:	a228b03a 	or	r20,r20,r8
 180c6b4:	880ad33a 	srli	r5,r17,12
 180c6b8:	b02b883a 	mov	r21,r22
 180c6bc:	003f0d06 	br	180c2f4 <__alt_mem_mem_0+0xff7ec2f4>
 180c6c0:	8080022c 	andhi	r2,r16,8
 180c6c4:	10000926 	beq	r2,zero,180c6ec <__muldf3+0x574>
 180c6c8:	8880022c 	andhi	r2,r17,8
 180c6cc:	1000071e 	bne	r2,zero,180c6ec <__muldf3+0x574>
 180c6d0:	00800434 	movhi	r2,16
 180c6d4:	89400234 	orhi	r5,r17,8
 180c6d8:	10bfffc4 	addi	r2,r2,-1
 180c6dc:	b82b883a 	mov	r21,r23
 180c6e0:	288a703a 	and	r5,r5,r2
 180c6e4:	4029883a 	mov	r20,r8
 180c6e8:	003f6806 	br	180c48c <__alt_mem_mem_0+0xff7ec48c>
 180c6ec:	00800434 	movhi	r2,16
 180c6f0:	81400234 	orhi	r5,r16,8
 180c6f4:	10bfffc4 	addi	r2,r2,-1
 180c6f8:	288a703a 	and	r5,r5,r2
 180c6fc:	003f6306 	br	180c48c <__alt_mem_mem_0+0xff7ec48c>
 180c700:	147ff604 	addi	r17,r2,-40
 180c704:	3462983a 	sll	r17,r6,r17
 180c708:	0011883a 	mov	r8,zero
 180c70c:	003f4406 	br	180c420 <__alt_mem_mem_0+0xff7ec420>
 180c710:	3009883a 	mov	r4,r6
 180c714:	d9800215 	stw	r6,8(sp)
 180c718:	da400115 	stw	r9,4(sp)
 180c71c:	da800015 	stw	r10,0(sp)
 180c720:	180d3900 	call	180d390 <__clzsi2>
 180c724:	10800804 	addi	r2,r2,32
 180c728:	da800017 	ldw	r10,0(sp)
 180c72c:	da400117 	ldw	r9,4(sp)
 180c730:	d9800217 	ldw	r6,8(sp)
 180c734:	003f3006 	br	180c3f8 <__alt_mem_mem_0+0xff7ec3f8>
 180c738:	143ff604 	addi	r16,r2,-40
 180c73c:	9c20983a 	sll	r16,r19,r16
 180c740:	0029883a 	mov	r20,zero
 180c744:	003f1606 	br	180c3a0 <__alt_mem_mem_0+0xff7ec3a0>
 180c748:	d9800215 	stw	r6,8(sp)
 180c74c:	d9c00015 	stw	r7,0(sp)
 180c750:	da400115 	stw	r9,4(sp)
 180c754:	180d3900 	call	180d390 <__clzsi2>
 180c758:	10800804 	addi	r2,r2,32
 180c75c:	da400117 	ldw	r9,4(sp)
 180c760:	d9c00017 	ldw	r7,0(sp)
 180c764:	d9800217 	ldw	r6,8(sp)
 180c768:	003f0306 	br	180c378 <__alt_mem_mem_0+0xff7ec378>
 180c76c:	00c00044 	movi	r3,1
 180c770:	1947c83a 	sub	r3,r3,r5
 180c774:	00800e04 	movi	r2,56
 180c778:	10feda16 	blt	r2,r3,180c2e4 <__alt_mem_mem_0+0xff7ec2e4>
 180c77c:	008007c4 	movi	r2,31
 180c780:	10c01b16 	blt	r2,r3,180c7f0 <__muldf3+0x678>
 180c784:	00800804 	movi	r2,32
 180c788:	10c5c83a 	sub	r2,r2,r3
 180c78c:	888a983a 	sll	r5,r17,r2
 180c790:	40c8d83a 	srl	r4,r8,r3
 180c794:	4084983a 	sll	r2,r8,r2
 180c798:	88e2d83a 	srl	r17,r17,r3
 180c79c:	2906b03a 	or	r3,r5,r4
 180c7a0:	1004c03a 	cmpne	r2,r2,zero
 180c7a4:	1886b03a 	or	r3,r3,r2
 180c7a8:	188001cc 	andi	r2,r3,7
 180c7ac:	10000726 	beq	r2,zero,180c7cc <__muldf3+0x654>
 180c7b0:	188003cc 	andi	r2,r3,15
 180c7b4:	01000104 	movi	r4,4
 180c7b8:	11000426 	beq	r2,r4,180c7cc <__muldf3+0x654>
 180c7bc:	1805883a 	mov	r2,r3
 180c7c0:	10c00104 	addi	r3,r2,4
 180c7c4:	1885803a 	cmpltu	r2,r3,r2
 180c7c8:	88a3883a 	add	r17,r17,r2
 180c7cc:	8880202c 	andhi	r2,r17,128
 180c7d0:	10001c26 	beq	r2,zero,180c844 <__muldf3+0x6cc>
 180c7d4:	b02b883a 	mov	r21,r22
 180c7d8:	00800044 	movi	r2,1
 180c7dc:	000b883a 	mov	r5,zero
 180c7e0:	0029883a 	mov	r20,zero
 180c7e4:	003ec306 	br	180c2f4 <__alt_mem_mem_0+0xff7ec2f4>
 180c7e8:	5805883a 	mov	r2,r11
 180c7ec:	003f9906 	br	180c654 <__alt_mem_mem_0+0xff7ec654>
 180c7f0:	00bff844 	movi	r2,-31
 180c7f4:	1145c83a 	sub	r2,r2,r5
 180c7f8:	8888d83a 	srl	r4,r17,r2
 180c7fc:	00800804 	movi	r2,32
 180c800:	18801a26 	beq	r3,r2,180c86c <__muldf3+0x6f4>
 180c804:	00801004 	movi	r2,64
 180c808:	10c5c83a 	sub	r2,r2,r3
 180c80c:	8884983a 	sll	r2,r17,r2
 180c810:	1204b03a 	or	r2,r2,r8
 180c814:	1004c03a 	cmpne	r2,r2,zero
 180c818:	2084b03a 	or	r2,r4,r2
 180c81c:	144001cc 	andi	r17,r2,7
 180c820:	88000d1e 	bne	r17,zero,180c858 <__muldf3+0x6e0>
 180c824:	000b883a 	mov	r5,zero
 180c828:	1028d0fa 	srli	r20,r2,3
 180c82c:	b02b883a 	mov	r21,r22
 180c830:	0005883a 	mov	r2,zero
 180c834:	a468b03a 	or	r20,r20,r17
 180c838:	003eae06 	br	180c2f4 <__alt_mem_mem_0+0xff7ec2f4>
 180c83c:	1007883a 	mov	r3,r2
 180c840:	0023883a 	mov	r17,zero
 180c844:	880a927a 	slli	r5,r17,9
 180c848:	1805883a 	mov	r2,r3
 180c84c:	8822977a 	slli	r17,r17,29
 180c850:	280ad33a 	srli	r5,r5,12
 180c854:	003ff406 	br	180c828 <__alt_mem_mem_0+0xff7ec828>
 180c858:	10c003cc 	andi	r3,r2,15
 180c85c:	01000104 	movi	r4,4
 180c860:	193ff626 	beq	r3,r4,180c83c <__alt_mem_mem_0+0xff7ec83c>
 180c864:	0023883a 	mov	r17,zero
 180c868:	003fd506 	br	180c7c0 <__alt_mem_mem_0+0xff7ec7c0>
 180c86c:	0005883a 	mov	r2,zero
 180c870:	003fe706 	br	180c810 <__alt_mem_mem_0+0xff7ec810>
 180c874:	00800434 	movhi	r2,16
 180c878:	89400234 	orhi	r5,r17,8
 180c87c:	10bfffc4 	addi	r2,r2,-1
 180c880:	b02b883a 	mov	r21,r22
 180c884:	288a703a 	and	r5,r5,r2
 180c888:	4029883a 	mov	r20,r8
 180c88c:	003eff06 	br	180c48c <__alt_mem_mem_0+0xff7ec48c>

0180c890 <__subdf3>:
 180c890:	02000434 	movhi	r8,16
 180c894:	423fffc4 	addi	r8,r8,-1
 180c898:	defffb04 	addi	sp,sp,-20
 180c89c:	2a14703a 	and	r10,r5,r8
 180c8a0:	3812d53a 	srli	r9,r7,20
 180c8a4:	3a10703a 	and	r8,r7,r8
 180c8a8:	2006d77a 	srli	r3,r4,29
 180c8ac:	3004d77a 	srli	r2,r6,29
 180c8b0:	dc000015 	stw	r16,0(sp)
 180c8b4:	501490fa 	slli	r10,r10,3
 180c8b8:	2820d53a 	srli	r16,r5,20
 180c8bc:	401090fa 	slli	r8,r8,3
 180c8c0:	dc800215 	stw	r18,8(sp)
 180c8c4:	dc400115 	stw	r17,4(sp)
 180c8c8:	dfc00415 	stw	ra,16(sp)
 180c8cc:	202290fa 	slli	r17,r4,3
 180c8d0:	dcc00315 	stw	r19,12(sp)
 180c8d4:	4a41ffcc 	andi	r9,r9,2047
 180c8d8:	0101ffc4 	movi	r4,2047
 180c8dc:	2824d7fa 	srli	r18,r5,31
 180c8e0:	8401ffcc 	andi	r16,r16,2047
 180c8e4:	50c6b03a 	or	r3,r10,r3
 180c8e8:	380ed7fa 	srli	r7,r7,31
 180c8ec:	408ab03a 	or	r5,r8,r2
 180c8f0:	300c90fa 	slli	r6,r6,3
 180c8f4:	49009626 	beq	r9,r4,180cb50 <__subdf3+0x2c0>
 180c8f8:	39c0005c 	xori	r7,r7,1
 180c8fc:	8245c83a 	sub	r2,r16,r9
 180c900:	3c807426 	beq	r7,r18,180cad4 <__subdf3+0x244>
 180c904:	0080af0e 	bge	zero,r2,180cbc4 <__subdf3+0x334>
 180c908:	48002a1e 	bne	r9,zero,180c9b4 <__subdf3+0x124>
 180c90c:	2988b03a 	or	r4,r5,r6
 180c910:	20009a1e 	bne	r4,zero,180cb7c <__subdf3+0x2ec>
 180c914:	888001cc 	andi	r2,r17,7
 180c918:	10000726 	beq	r2,zero,180c938 <__subdf3+0xa8>
 180c91c:	888003cc 	andi	r2,r17,15
 180c920:	01000104 	movi	r4,4
 180c924:	11000426 	beq	r2,r4,180c938 <__subdf3+0xa8>
 180c928:	890b883a 	add	r5,r17,r4
 180c92c:	2c63803a 	cmpltu	r17,r5,r17
 180c930:	1c47883a 	add	r3,r3,r17
 180c934:	2823883a 	mov	r17,r5
 180c938:	1880202c 	andhi	r2,r3,128
 180c93c:	10005926 	beq	r2,zero,180caa4 <__subdf3+0x214>
 180c940:	84000044 	addi	r16,r16,1
 180c944:	0081ffc4 	movi	r2,2047
 180c948:	8080be26 	beq	r16,r2,180cc44 <__subdf3+0x3b4>
 180c94c:	017fe034 	movhi	r5,65408
 180c950:	297fffc4 	addi	r5,r5,-1
 180c954:	1946703a 	and	r3,r3,r5
 180c958:	1804977a 	slli	r2,r3,29
 180c95c:	1806927a 	slli	r3,r3,9
 180c960:	8822d0fa 	srli	r17,r17,3
 180c964:	8401ffcc 	andi	r16,r16,2047
 180c968:	180ad33a 	srli	r5,r3,12
 180c96c:	9100004c 	andi	r4,r18,1
 180c970:	1444b03a 	or	r2,r2,r17
 180c974:	80c1ffcc 	andi	r3,r16,2047
 180c978:	1820953a 	slli	r16,r3,20
 180c97c:	20c03fcc 	andi	r3,r4,255
 180c980:	180897fa 	slli	r4,r3,31
 180c984:	00c00434 	movhi	r3,16
 180c988:	18ffffc4 	addi	r3,r3,-1
 180c98c:	28c6703a 	and	r3,r5,r3
 180c990:	1c06b03a 	or	r3,r3,r16
 180c994:	1906b03a 	or	r3,r3,r4
 180c998:	dfc00417 	ldw	ra,16(sp)
 180c99c:	dcc00317 	ldw	r19,12(sp)
 180c9a0:	dc800217 	ldw	r18,8(sp)
 180c9a4:	dc400117 	ldw	r17,4(sp)
 180c9a8:	dc000017 	ldw	r16,0(sp)
 180c9ac:	dec00504 	addi	sp,sp,20
 180c9b0:	f800283a 	ret
 180c9b4:	0101ffc4 	movi	r4,2047
 180c9b8:	813fd626 	beq	r16,r4,180c914 <__alt_mem_mem_0+0xff7ec914>
 180c9bc:	29402034 	orhi	r5,r5,128
 180c9c0:	01000e04 	movi	r4,56
 180c9c4:	2080a316 	blt	r4,r2,180cc54 <__subdf3+0x3c4>
 180c9c8:	010007c4 	movi	r4,31
 180c9cc:	2080c616 	blt	r4,r2,180cce8 <__subdf3+0x458>
 180c9d0:	01000804 	movi	r4,32
 180c9d4:	2089c83a 	sub	r4,r4,r2
 180c9d8:	2910983a 	sll	r8,r5,r4
 180c9dc:	308ed83a 	srl	r7,r6,r2
 180c9e0:	3108983a 	sll	r4,r6,r4
 180c9e4:	2884d83a 	srl	r2,r5,r2
 180c9e8:	41ccb03a 	or	r6,r8,r7
 180c9ec:	2008c03a 	cmpne	r4,r4,zero
 180c9f0:	310cb03a 	or	r6,r6,r4
 180c9f4:	898dc83a 	sub	r6,r17,r6
 180c9f8:	89a3803a 	cmpltu	r17,r17,r6
 180c9fc:	1887c83a 	sub	r3,r3,r2
 180ca00:	1c47c83a 	sub	r3,r3,r17
 180ca04:	3023883a 	mov	r17,r6
 180ca08:	1880202c 	andhi	r2,r3,128
 180ca0c:	10002326 	beq	r2,zero,180ca9c <__subdf3+0x20c>
 180ca10:	04c02034 	movhi	r19,128
 180ca14:	9cffffc4 	addi	r19,r19,-1
 180ca18:	1ce6703a 	and	r19,r3,r19
 180ca1c:	98007a26 	beq	r19,zero,180cc08 <__subdf3+0x378>
 180ca20:	9809883a 	mov	r4,r19
 180ca24:	180d3900 	call	180d390 <__clzsi2>
 180ca28:	113ffe04 	addi	r4,r2,-8
 180ca2c:	00c007c4 	movi	r3,31
 180ca30:	19007b16 	blt	r3,r4,180cc20 <__subdf3+0x390>
 180ca34:	00800804 	movi	r2,32
 180ca38:	1105c83a 	sub	r2,r2,r4
 180ca3c:	8884d83a 	srl	r2,r17,r2
 180ca40:	9906983a 	sll	r3,r19,r4
 180ca44:	8922983a 	sll	r17,r17,r4
 180ca48:	10c4b03a 	or	r2,r2,r3
 180ca4c:	24007816 	blt	r4,r16,180cc30 <__subdf3+0x3a0>
 180ca50:	2421c83a 	sub	r16,r4,r16
 180ca54:	80c00044 	addi	r3,r16,1
 180ca58:	010007c4 	movi	r4,31
 180ca5c:	20c09516 	blt	r4,r3,180ccb4 <__subdf3+0x424>
 180ca60:	01400804 	movi	r5,32
 180ca64:	28cbc83a 	sub	r5,r5,r3
 180ca68:	88c8d83a 	srl	r4,r17,r3
 180ca6c:	8962983a 	sll	r17,r17,r5
 180ca70:	114a983a 	sll	r5,r2,r5
 180ca74:	10c6d83a 	srl	r3,r2,r3
 180ca78:	8804c03a 	cmpne	r2,r17,zero
 180ca7c:	290ab03a 	or	r5,r5,r4
 180ca80:	28a2b03a 	or	r17,r5,r2
 180ca84:	0021883a 	mov	r16,zero
 180ca88:	003fa206 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180ca8c:	2090b03a 	or	r8,r4,r2
 180ca90:	40018e26 	beq	r8,zero,180d0cc <__subdf3+0x83c>
 180ca94:	1007883a 	mov	r3,r2
 180ca98:	2023883a 	mov	r17,r4
 180ca9c:	888001cc 	andi	r2,r17,7
 180caa0:	103f9e1e 	bne	r2,zero,180c91c <__alt_mem_mem_0+0xff7ec91c>
 180caa4:	1804977a 	slli	r2,r3,29
 180caa8:	8822d0fa 	srli	r17,r17,3
 180caac:	1810d0fa 	srli	r8,r3,3
 180cab0:	9100004c 	andi	r4,r18,1
 180cab4:	1444b03a 	or	r2,r2,r17
 180cab8:	00c1ffc4 	movi	r3,2047
 180cabc:	80c02826 	beq	r16,r3,180cb60 <__subdf3+0x2d0>
 180cac0:	01400434 	movhi	r5,16
 180cac4:	297fffc4 	addi	r5,r5,-1
 180cac8:	80e0703a 	and	r16,r16,r3
 180cacc:	414a703a 	and	r5,r8,r5
 180cad0:	003fa806 	br	180c974 <__alt_mem_mem_0+0xff7ec974>
 180cad4:	0080630e 	bge	zero,r2,180cc64 <__subdf3+0x3d4>
 180cad8:	48003026 	beq	r9,zero,180cb9c <__subdf3+0x30c>
 180cadc:	0101ffc4 	movi	r4,2047
 180cae0:	813f8c26 	beq	r16,r4,180c914 <__alt_mem_mem_0+0xff7ec914>
 180cae4:	29402034 	orhi	r5,r5,128
 180cae8:	01000e04 	movi	r4,56
 180caec:	2080a90e 	bge	r4,r2,180cd94 <__subdf3+0x504>
 180caf0:	298cb03a 	or	r6,r5,r6
 180caf4:	3012c03a 	cmpne	r9,r6,zero
 180caf8:	0005883a 	mov	r2,zero
 180cafc:	4c53883a 	add	r9,r9,r17
 180cb00:	4c63803a 	cmpltu	r17,r9,r17
 180cb04:	10c7883a 	add	r3,r2,r3
 180cb08:	88c7883a 	add	r3,r17,r3
 180cb0c:	4823883a 	mov	r17,r9
 180cb10:	1880202c 	andhi	r2,r3,128
 180cb14:	1000d026 	beq	r2,zero,180ce58 <__subdf3+0x5c8>
 180cb18:	84000044 	addi	r16,r16,1
 180cb1c:	0081ffc4 	movi	r2,2047
 180cb20:	8080fe26 	beq	r16,r2,180cf1c <__subdf3+0x68c>
 180cb24:	00bfe034 	movhi	r2,65408
 180cb28:	10bfffc4 	addi	r2,r2,-1
 180cb2c:	1886703a 	and	r3,r3,r2
 180cb30:	880ad07a 	srli	r5,r17,1
 180cb34:	180497fa 	slli	r2,r3,31
 180cb38:	8900004c 	andi	r4,r17,1
 180cb3c:	2922b03a 	or	r17,r5,r4
 180cb40:	1806d07a 	srli	r3,r3,1
 180cb44:	1462b03a 	or	r17,r2,r17
 180cb48:	3825883a 	mov	r18,r7
 180cb4c:	003f7106 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180cb50:	2984b03a 	or	r2,r5,r6
 180cb54:	103f6826 	beq	r2,zero,180c8f8 <__alt_mem_mem_0+0xff7ec8f8>
 180cb58:	39c03fcc 	andi	r7,r7,255
 180cb5c:	003f6706 	br	180c8fc <__alt_mem_mem_0+0xff7ec8fc>
 180cb60:	4086b03a 	or	r3,r8,r2
 180cb64:	18015226 	beq	r3,zero,180d0b0 <__subdf3+0x820>
 180cb68:	00c00434 	movhi	r3,16
 180cb6c:	41400234 	orhi	r5,r8,8
 180cb70:	18ffffc4 	addi	r3,r3,-1
 180cb74:	28ca703a 	and	r5,r5,r3
 180cb78:	003f7e06 	br	180c974 <__alt_mem_mem_0+0xff7ec974>
 180cb7c:	10bfffc4 	addi	r2,r2,-1
 180cb80:	1000491e 	bne	r2,zero,180cca8 <__subdf3+0x418>
 180cb84:	898fc83a 	sub	r7,r17,r6
 180cb88:	89e3803a 	cmpltu	r17,r17,r7
 180cb8c:	1947c83a 	sub	r3,r3,r5
 180cb90:	1c47c83a 	sub	r3,r3,r17
 180cb94:	3823883a 	mov	r17,r7
 180cb98:	003f9b06 	br	180ca08 <__alt_mem_mem_0+0xff7eca08>
 180cb9c:	2988b03a 	or	r4,r5,r6
 180cba0:	203f5c26 	beq	r4,zero,180c914 <__alt_mem_mem_0+0xff7ec914>
 180cba4:	10bfffc4 	addi	r2,r2,-1
 180cba8:	1000931e 	bne	r2,zero,180cdf8 <__subdf3+0x568>
 180cbac:	898d883a 	add	r6,r17,r6
 180cbb0:	3463803a 	cmpltu	r17,r6,r17
 180cbb4:	1947883a 	add	r3,r3,r5
 180cbb8:	88c7883a 	add	r3,r17,r3
 180cbbc:	3023883a 	mov	r17,r6
 180cbc0:	003fd306 	br	180cb10 <__alt_mem_mem_0+0xff7ecb10>
 180cbc4:	1000541e 	bne	r2,zero,180cd18 <__subdf3+0x488>
 180cbc8:	80800044 	addi	r2,r16,1
 180cbcc:	1081ffcc 	andi	r2,r2,2047
 180cbd0:	01000044 	movi	r4,1
 180cbd4:	2080a20e 	bge	r4,r2,180ce60 <__subdf3+0x5d0>
 180cbd8:	8989c83a 	sub	r4,r17,r6
 180cbdc:	8905803a 	cmpltu	r2,r17,r4
 180cbe0:	1967c83a 	sub	r19,r3,r5
 180cbe4:	98a7c83a 	sub	r19,r19,r2
 180cbe8:	9880202c 	andhi	r2,r19,128
 180cbec:	10006326 	beq	r2,zero,180cd7c <__subdf3+0x4ec>
 180cbf0:	3463c83a 	sub	r17,r6,r17
 180cbf4:	28c7c83a 	sub	r3,r5,r3
 180cbf8:	344d803a 	cmpltu	r6,r6,r17
 180cbfc:	19a7c83a 	sub	r19,r3,r6
 180cc00:	3825883a 	mov	r18,r7
 180cc04:	983f861e 	bne	r19,zero,180ca20 <__alt_mem_mem_0+0xff7eca20>
 180cc08:	8809883a 	mov	r4,r17
 180cc0c:	180d3900 	call	180d390 <__clzsi2>
 180cc10:	10800804 	addi	r2,r2,32
 180cc14:	113ffe04 	addi	r4,r2,-8
 180cc18:	00c007c4 	movi	r3,31
 180cc1c:	193f850e 	bge	r3,r4,180ca34 <__alt_mem_mem_0+0xff7eca34>
 180cc20:	10bff604 	addi	r2,r2,-40
 180cc24:	8884983a 	sll	r2,r17,r2
 180cc28:	0023883a 	mov	r17,zero
 180cc2c:	243f880e 	bge	r4,r16,180ca50 <__alt_mem_mem_0+0xff7eca50>
 180cc30:	00ffe034 	movhi	r3,65408
 180cc34:	18ffffc4 	addi	r3,r3,-1
 180cc38:	8121c83a 	sub	r16,r16,r4
 180cc3c:	10c6703a 	and	r3,r2,r3
 180cc40:	003f3406 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180cc44:	9100004c 	andi	r4,r18,1
 180cc48:	000b883a 	mov	r5,zero
 180cc4c:	0005883a 	mov	r2,zero
 180cc50:	003f4806 	br	180c974 <__alt_mem_mem_0+0xff7ec974>
 180cc54:	298cb03a 	or	r6,r5,r6
 180cc58:	300cc03a 	cmpne	r6,r6,zero
 180cc5c:	0005883a 	mov	r2,zero
 180cc60:	003f6406 	br	180c9f4 <__alt_mem_mem_0+0xff7ec9f4>
 180cc64:	10009a1e 	bne	r2,zero,180ced0 <__subdf3+0x640>
 180cc68:	82400044 	addi	r9,r16,1
 180cc6c:	4881ffcc 	andi	r2,r9,2047
 180cc70:	02800044 	movi	r10,1
 180cc74:	5080670e 	bge	r10,r2,180ce14 <__subdf3+0x584>
 180cc78:	0081ffc4 	movi	r2,2047
 180cc7c:	4880af26 	beq	r9,r2,180cf3c <__subdf3+0x6ac>
 180cc80:	898d883a 	add	r6,r17,r6
 180cc84:	1945883a 	add	r2,r3,r5
 180cc88:	3447803a 	cmpltu	r3,r6,r17
 180cc8c:	1887883a 	add	r3,r3,r2
 180cc90:	182297fa 	slli	r17,r3,31
 180cc94:	300cd07a 	srli	r6,r6,1
 180cc98:	1806d07a 	srli	r3,r3,1
 180cc9c:	4821883a 	mov	r16,r9
 180cca0:	89a2b03a 	or	r17,r17,r6
 180cca4:	003f1b06 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180cca8:	0101ffc4 	movi	r4,2047
 180ccac:	813f441e 	bne	r16,r4,180c9c0 <__alt_mem_mem_0+0xff7ec9c0>
 180ccb0:	003f1806 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180ccb4:	843ff844 	addi	r16,r16,-31
 180ccb8:	01400804 	movi	r5,32
 180ccbc:	1408d83a 	srl	r4,r2,r16
 180ccc0:	19405026 	beq	r3,r5,180ce04 <__subdf3+0x574>
 180ccc4:	01401004 	movi	r5,64
 180ccc8:	28c7c83a 	sub	r3,r5,r3
 180cccc:	10c4983a 	sll	r2,r2,r3
 180ccd0:	88a2b03a 	or	r17,r17,r2
 180ccd4:	8822c03a 	cmpne	r17,r17,zero
 180ccd8:	2462b03a 	or	r17,r4,r17
 180ccdc:	0007883a 	mov	r3,zero
 180cce0:	0021883a 	mov	r16,zero
 180cce4:	003f6d06 	br	180ca9c <__alt_mem_mem_0+0xff7eca9c>
 180cce8:	11fff804 	addi	r7,r2,-32
 180ccec:	01000804 	movi	r4,32
 180ccf0:	29ced83a 	srl	r7,r5,r7
 180ccf4:	11004526 	beq	r2,r4,180ce0c <__subdf3+0x57c>
 180ccf8:	01001004 	movi	r4,64
 180ccfc:	2089c83a 	sub	r4,r4,r2
 180cd00:	2904983a 	sll	r2,r5,r4
 180cd04:	118cb03a 	or	r6,r2,r6
 180cd08:	300cc03a 	cmpne	r6,r6,zero
 180cd0c:	398cb03a 	or	r6,r7,r6
 180cd10:	0005883a 	mov	r2,zero
 180cd14:	003f3706 	br	180c9f4 <__alt_mem_mem_0+0xff7ec9f4>
 180cd18:	80002a26 	beq	r16,zero,180cdc4 <__subdf3+0x534>
 180cd1c:	0101ffc4 	movi	r4,2047
 180cd20:	49006626 	beq	r9,r4,180cebc <__subdf3+0x62c>
 180cd24:	0085c83a 	sub	r2,zero,r2
 180cd28:	18c02034 	orhi	r3,r3,128
 180cd2c:	01000e04 	movi	r4,56
 180cd30:	20807e16 	blt	r4,r2,180cf2c <__subdf3+0x69c>
 180cd34:	010007c4 	movi	r4,31
 180cd38:	2080e716 	blt	r4,r2,180d0d8 <__subdf3+0x848>
 180cd3c:	01000804 	movi	r4,32
 180cd40:	2089c83a 	sub	r4,r4,r2
 180cd44:	1914983a 	sll	r10,r3,r4
 180cd48:	8890d83a 	srl	r8,r17,r2
 180cd4c:	8908983a 	sll	r4,r17,r4
 180cd50:	1884d83a 	srl	r2,r3,r2
 180cd54:	5222b03a 	or	r17,r10,r8
 180cd58:	2006c03a 	cmpne	r3,r4,zero
 180cd5c:	88e2b03a 	or	r17,r17,r3
 180cd60:	3463c83a 	sub	r17,r6,r17
 180cd64:	2885c83a 	sub	r2,r5,r2
 180cd68:	344d803a 	cmpltu	r6,r6,r17
 180cd6c:	1187c83a 	sub	r3,r2,r6
 180cd70:	4821883a 	mov	r16,r9
 180cd74:	3825883a 	mov	r18,r7
 180cd78:	003f2306 	br	180ca08 <__alt_mem_mem_0+0xff7eca08>
 180cd7c:	24d0b03a 	or	r8,r4,r19
 180cd80:	40001b1e 	bne	r8,zero,180cdf0 <__subdf3+0x560>
 180cd84:	0005883a 	mov	r2,zero
 180cd88:	0009883a 	mov	r4,zero
 180cd8c:	0021883a 	mov	r16,zero
 180cd90:	003f4906 	br	180cab8 <__alt_mem_mem_0+0xff7ecab8>
 180cd94:	010007c4 	movi	r4,31
 180cd98:	20803a16 	blt	r4,r2,180ce84 <__subdf3+0x5f4>
 180cd9c:	01000804 	movi	r4,32
 180cda0:	2089c83a 	sub	r4,r4,r2
 180cda4:	2912983a 	sll	r9,r5,r4
 180cda8:	3090d83a 	srl	r8,r6,r2
 180cdac:	3108983a 	sll	r4,r6,r4
 180cdb0:	2884d83a 	srl	r2,r5,r2
 180cdb4:	4a12b03a 	or	r9,r9,r8
 180cdb8:	2008c03a 	cmpne	r4,r4,zero
 180cdbc:	4912b03a 	or	r9,r9,r4
 180cdc0:	003f4e06 	br	180cafc <__alt_mem_mem_0+0xff7ecafc>
 180cdc4:	1c48b03a 	or	r4,r3,r17
 180cdc8:	20003c26 	beq	r4,zero,180cebc <__subdf3+0x62c>
 180cdcc:	0084303a 	nor	r2,zero,r2
 180cdd0:	1000381e 	bne	r2,zero,180ceb4 <__subdf3+0x624>
 180cdd4:	3463c83a 	sub	r17,r6,r17
 180cdd8:	28c5c83a 	sub	r2,r5,r3
 180cddc:	344d803a 	cmpltu	r6,r6,r17
 180cde0:	1187c83a 	sub	r3,r2,r6
 180cde4:	4821883a 	mov	r16,r9
 180cde8:	3825883a 	mov	r18,r7
 180cdec:	003f0606 	br	180ca08 <__alt_mem_mem_0+0xff7eca08>
 180cdf0:	2023883a 	mov	r17,r4
 180cdf4:	003f0906 	br	180ca1c <__alt_mem_mem_0+0xff7eca1c>
 180cdf8:	0101ffc4 	movi	r4,2047
 180cdfc:	813f3a1e 	bne	r16,r4,180cae8 <__alt_mem_mem_0+0xff7ecae8>
 180ce00:	003ec406 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180ce04:	0005883a 	mov	r2,zero
 180ce08:	003fb106 	br	180ccd0 <__alt_mem_mem_0+0xff7eccd0>
 180ce0c:	0005883a 	mov	r2,zero
 180ce10:	003fbc06 	br	180cd04 <__alt_mem_mem_0+0xff7ecd04>
 180ce14:	1c44b03a 	or	r2,r3,r17
 180ce18:	80008e1e 	bne	r16,zero,180d054 <__subdf3+0x7c4>
 180ce1c:	1000c826 	beq	r2,zero,180d140 <__subdf3+0x8b0>
 180ce20:	2984b03a 	or	r2,r5,r6
 180ce24:	103ebb26 	beq	r2,zero,180c914 <__alt_mem_mem_0+0xff7ec914>
 180ce28:	8989883a 	add	r4,r17,r6
 180ce2c:	1945883a 	add	r2,r3,r5
 180ce30:	2447803a 	cmpltu	r3,r4,r17
 180ce34:	1887883a 	add	r3,r3,r2
 180ce38:	1880202c 	andhi	r2,r3,128
 180ce3c:	2023883a 	mov	r17,r4
 180ce40:	103f1626 	beq	r2,zero,180ca9c <__alt_mem_mem_0+0xff7eca9c>
 180ce44:	00bfe034 	movhi	r2,65408
 180ce48:	10bfffc4 	addi	r2,r2,-1
 180ce4c:	5021883a 	mov	r16,r10
 180ce50:	1886703a 	and	r3,r3,r2
 180ce54:	003eaf06 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180ce58:	3825883a 	mov	r18,r7
 180ce5c:	003f0f06 	br	180ca9c <__alt_mem_mem_0+0xff7eca9c>
 180ce60:	1c44b03a 	or	r2,r3,r17
 180ce64:	8000251e 	bne	r16,zero,180cefc <__subdf3+0x66c>
 180ce68:	1000661e 	bne	r2,zero,180d004 <__subdf3+0x774>
 180ce6c:	2990b03a 	or	r8,r5,r6
 180ce70:	40009626 	beq	r8,zero,180d0cc <__subdf3+0x83c>
 180ce74:	2807883a 	mov	r3,r5
 180ce78:	3023883a 	mov	r17,r6
 180ce7c:	3825883a 	mov	r18,r7
 180ce80:	003ea406 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180ce84:	127ff804 	addi	r9,r2,-32
 180ce88:	01000804 	movi	r4,32
 180ce8c:	2a52d83a 	srl	r9,r5,r9
 180ce90:	11008c26 	beq	r2,r4,180d0c4 <__subdf3+0x834>
 180ce94:	01001004 	movi	r4,64
 180ce98:	2085c83a 	sub	r2,r4,r2
 180ce9c:	2884983a 	sll	r2,r5,r2
 180cea0:	118cb03a 	or	r6,r2,r6
 180cea4:	300cc03a 	cmpne	r6,r6,zero
 180cea8:	4992b03a 	or	r9,r9,r6
 180ceac:	0005883a 	mov	r2,zero
 180ceb0:	003f1206 	br	180cafc <__alt_mem_mem_0+0xff7ecafc>
 180ceb4:	0101ffc4 	movi	r4,2047
 180ceb8:	493f9c1e 	bne	r9,r4,180cd2c <__alt_mem_mem_0+0xff7ecd2c>
 180cebc:	2807883a 	mov	r3,r5
 180cec0:	3023883a 	mov	r17,r6
 180cec4:	4821883a 	mov	r16,r9
 180cec8:	3825883a 	mov	r18,r7
 180cecc:	003e9106 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180ced0:	80001f1e 	bne	r16,zero,180cf50 <__subdf3+0x6c0>
 180ced4:	1c48b03a 	or	r4,r3,r17
 180ced8:	20005a26 	beq	r4,zero,180d044 <__subdf3+0x7b4>
 180cedc:	0084303a 	nor	r2,zero,r2
 180cee0:	1000561e 	bne	r2,zero,180d03c <__subdf3+0x7ac>
 180cee4:	89a3883a 	add	r17,r17,r6
 180cee8:	1945883a 	add	r2,r3,r5
 180ceec:	898d803a 	cmpltu	r6,r17,r6
 180cef0:	3087883a 	add	r3,r6,r2
 180cef4:	4821883a 	mov	r16,r9
 180cef8:	003f0506 	br	180cb10 <__alt_mem_mem_0+0xff7ecb10>
 180cefc:	10002b1e 	bne	r2,zero,180cfac <__subdf3+0x71c>
 180cf00:	2984b03a 	or	r2,r5,r6
 180cf04:	10008026 	beq	r2,zero,180d108 <__subdf3+0x878>
 180cf08:	2807883a 	mov	r3,r5
 180cf0c:	3023883a 	mov	r17,r6
 180cf10:	3825883a 	mov	r18,r7
 180cf14:	0401ffc4 	movi	r16,2047
 180cf18:	003e7e06 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180cf1c:	3809883a 	mov	r4,r7
 180cf20:	0011883a 	mov	r8,zero
 180cf24:	0005883a 	mov	r2,zero
 180cf28:	003ee306 	br	180cab8 <__alt_mem_mem_0+0xff7ecab8>
 180cf2c:	1c62b03a 	or	r17,r3,r17
 180cf30:	8822c03a 	cmpne	r17,r17,zero
 180cf34:	0005883a 	mov	r2,zero
 180cf38:	003f8906 	br	180cd60 <__alt_mem_mem_0+0xff7ecd60>
 180cf3c:	3809883a 	mov	r4,r7
 180cf40:	4821883a 	mov	r16,r9
 180cf44:	0011883a 	mov	r8,zero
 180cf48:	0005883a 	mov	r2,zero
 180cf4c:	003eda06 	br	180cab8 <__alt_mem_mem_0+0xff7ecab8>
 180cf50:	0101ffc4 	movi	r4,2047
 180cf54:	49003b26 	beq	r9,r4,180d044 <__subdf3+0x7b4>
 180cf58:	0085c83a 	sub	r2,zero,r2
 180cf5c:	18c02034 	orhi	r3,r3,128
 180cf60:	01000e04 	movi	r4,56
 180cf64:	20806e16 	blt	r4,r2,180d120 <__subdf3+0x890>
 180cf68:	010007c4 	movi	r4,31
 180cf6c:	20807716 	blt	r4,r2,180d14c <__subdf3+0x8bc>
 180cf70:	01000804 	movi	r4,32
 180cf74:	2089c83a 	sub	r4,r4,r2
 180cf78:	1914983a 	sll	r10,r3,r4
 180cf7c:	8890d83a 	srl	r8,r17,r2
 180cf80:	8908983a 	sll	r4,r17,r4
 180cf84:	1884d83a 	srl	r2,r3,r2
 180cf88:	5222b03a 	or	r17,r10,r8
 180cf8c:	2006c03a 	cmpne	r3,r4,zero
 180cf90:	88e2b03a 	or	r17,r17,r3
 180cf94:	89a3883a 	add	r17,r17,r6
 180cf98:	1145883a 	add	r2,r2,r5
 180cf9c:	898d803a 	cmpltu	r6,r17,r6
 180cfa0:	3087883a 	add	r3,r6,r2
 180cfa4:	4821883a 	mov	r16,r9
 180cfa8:	003ed906 	br	180cb10 <__alt_mem_mem_0+0xff7ecb10>
 180cfac:	2984b03a 	or	r2,r5,r6
 180cfb0:	10004226 	beq	r2,zero,180d0bc <__subdf3+0x82c>
 180cfb4:	1808d0fa 	srli	r4,r3,3
 180cfb8:	8822d0fa 	srli	r17,r17,3
 180cfbc:	1806977a 	slli	r3,r3,29
 180cfc0:	2080022c 	andhi	r2,r4,8
 180cfc4:	1c62b03a 	or	r17,r3,r17
 180cfc8:	10000826 	beq	r2,zero,180cfec <__subdf3+0x75c>
 180cfcc:	2812d0fa 	srli	r9,r5,3
 180cfd0:	4880022c 	andhi	r2,r9,8
 180cfd4:	1000051e 	bne	r2,zero,180cfec <__subdf3+0x75c>
 180cfd8:	300cd0fa 	srli	r6,r6,3
 180cfdc:	2804977a 	slli	r2,r5,29
 180cfe0:	4809883a 	mov	r4,r9
 180cfe4:	3825883a 	mov	r18,r7
 180cfe8:	11a2b03a 	or	r17,r2,r6
 180cfec:	8806d77a 	srli	r3,r17,29
 180cff0:	200890fa 	slli	r4,r4,3
 180cff4:	882290fa 	slli	r17,r17,3
 180cff8:	0401ffc4 	movi	r16,2047
 180cffc:	1906b03a 	or	r3,r3,r4
 180d000:	003e4406 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180d004:	2984b03a 	or	r2,r5,r6
 180d008:	103e4226 	beq	r2,zero,180c914 <__alt_mem_mem_0+0xff7ec914>
 180d00c:	8989c83a 	sub	r4,r17,r6
 180d010:	8911803a 	cmpltu	r8,r17,r4
 180d014:	1945c83a 	sub	r2,r3,r5
 180d018:	1205c83a 	sub	r2,r2,r8
 180d01c:	1200202c 	andhi	r8,r2,128
 180d020:	403e9a26 	beq	r8,zero,180ca8c <__alt_mem_mem_0+0xff7eca8c>
 180d024:	3463c83a 	sub	r17,r6,r17
 180d028:	28c5c83a 	sub	r2,r5,r3
 180d02c:	344d803a 	cmpltu	r6,r6,r17
 180d030:	1187c83a 	sub	r3,r2,r6
 180d034:	3825883a 	mov	r18,r7
 180d038:	003e3606 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180d03c:	0101ffc4 	movi	r4,2047
 180d040:	493fc71e 	bne	r9,r4,180cf60 <__alt_mem_mem_0+0xff7ecf60>
 180d044:	2807883a 	mov	r3,r5
 180d048:	3023883a 	mov	r17,r6
 180d04c:	4821883a 	mov	r16,r9
 180d050:	003e3006 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180d054:	10003626 	beq	r2,zero,180d130 <__subdf3+0x8a0>
 180d058:	2984b03a 	or	r2,r5,r6
 180d05c:	10001726 	beq	r2,zero,180d0bc <__subdf3+0x82c>
 180d060:	1808d0fa 	srli	r4,r3,3
 180d064:	8822d0fa 	srli	r17,r17,3
 180d068:	1806977a 	slli	r3,r3,29
 180d06c:	2080022c 	andhi	r2,r4,8
 180d070:	1c62b03a 	or	r17,r3,r17
 180d074:	10000726 	beq	r2,zero,180d094 <__subdf3+0x804>
 180d078:	2812d0fa 	srli	r9,r5,3
 180d07c:	4880022c 	andhi	r2,r9,8
 180d080:	1000041e 	bne	r2,zero,180d094 <__subdf3+0x804>
 180d084:	300cd0fa 	srli	r6,r6,3
 180d088:	2804977a 	slli	r2,r5,29
 180d08c:	4809883a 	mov	r4,r9
 180d090:	11a2b03a 	or	r17,r2,r6
 180d094:	8806d77a 	srli	r3,r17,29
 180d098:	200890fa 	slli	r4,r4,3
 180d09c:	882290fa 	slli	r17,r17,3
 180d0a0:	3825883a 	mov	r18,r7
 180d0a4:	1906b03a 	or	r3,r3,r4
 180d0a8:	0401ffc4 	movi	r16,2047
 180d0ac:	003e1906 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180d0b0:	000b883a 	mov	r5,zero
 180d0b4:	0005883a 	mov	r2,zero
 180d0b8:	003e2e06 	br	180c974 <__alt_mem_mem_0+0xff7ec974>
 180d0bc:	0401ffc4 	movi	r16,2047
 180d0c0:	003e1406 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180d0c4:	0005883a 	mov	r2,zero
 180d0c8:	003f7506 	br	180cea0 <__alt_mem_mem_0+0xff7ecea0>
 180d0cc:	0005883a 	mov	r2,zero
 180d0d0:	0009883a 	mov	r4,zero
 180d0d4:	003e7806 	br	180cab8 <__alt_mem_mem_0+0xff7ecab8>
 180d0d8:	123ff804 	addi	r8,r2,-32
 180d0dc:	01000804 	movi	r4,32
 180d0e0:	1a10d83a 	srl	r8,r3,r8
 180d0e4:	11002526 	beq	r2,r4,180d17c <__subdf3+0x8ec>
 180d0e8:	01001004 	movi	r4,64
 180d0ec:	2085c83a 	sub	r2,r4,r2
 180d0f0:	1884983a 	sll	r2,r3,r2
 180d0f4:	1444b03a 	or	r2,r2,r17
 180d0f8:	1004c03a 	cmpne	r2,r2,zero
 180d0fc:	40a2b03a 	or	r17,r8,r2
 180d100:	0005883a 	mov	r2,zero
 180d104:	003f1606 	br	180cd60 <__alt_mem_mem_0+0xff7ecd60>
 180d108:	02000434 	movhi	r8,16
 180d10c:	0009883a 	mov	r4,zero
 180d110:	423fffc4 	addi	r8,r8,-1
 180d114:	00bfffc4 	movi	r2,-1
 180d118:	0401ffc4 	movi	r16,2047
 180d11c:	003e6606 	br	180cab8 <__alt_mem_mem_0+0xff7ecab8>
 180d120:	1c62b03a 	or	r17,r3,r17
 180d124:	8822c03a 	cmpne	r17,r17,zero
 180d128:	0005883a 	mov	r2,zero
 180d12c:	003f9906 	br	180cf94 <__alt_mem_mem_0+0xff7ecf94>
 180d130:	2807883a 	mov	r3,r5
 180d134:	3023883a 	mov	r17,r6
 180d138:	0401ffc4 	movi	r16,2047
 180d13c:	003df506 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180d140:	2807883a 	mov	r3,r5
 180d144:	3023883a 	mov	r17,r6
 180d148:	003df206 	br	180c914 <__alt_mem_mem_0+0xff7ec914>
 180d14c:	123ff804 	addi	r8,r2,-32
 180d150:	01000804 	movi	r4,32
 180d154:	1a10d83a 	srl	r8,r3,r8
 180d158:	11000a26 	beq	r2,r4,180d184 <__subdf3+0x8f4>
 180d15c:	01001004 	movi	r4,64
 180d160:	2085c83a 	sub	r2,r4,r2
 180d164:	1884983a 	sll	r2,r3,r2
 180d168:	1444b03a 	or	r2,r2,r17
 180d16c:	1004c03a 	cmpne	r2,r2,zero
 180d170:	40a2b03a 	or	r17,r8,r2
 180d174:	0005883a 	mov	r2,zero
 180d178:	003f8606 	br	180cf94 <__alt_mem_mem_0+0xff7ecf94>
 180d17c:	0005883a 	mov	r2,zero
 180d180:	003fdc06 	br	180d0f4 <__alt_mem_mem_0+0xff7ed0f4>
 180d184:	0005883a 	mov	r2,zero
 180d188:	003ff706 	br	180d168 <__alt_mem_mem_0+0xff7ed168>

0180d18c <__fixdfsi>:
 180d18c:	280cd53a 	srli	r6,r5,20
 180d190:	00c00434 	movhi	r3,16
 180d194:	18ffffc4 	addi	r3,r3,-1
 180d198:	3181ffcc 	andi	r6,r6,2047
 180d19c:	01c0ff84 	movi	r7,1022
 180d1a0:	28c6703a 	and	r3,r5,r3
 180d1a4:	280ad7fa 	srli	r5,r5,31
 180d1a8:	3980120e 	bge	r7,r6,180d1f4 <__fixdfsi+0x68>
 180d1ac:	00810744 	movi	r2,1053
 180d1b0:	11800c16 	blt	r2,r6,180d1e4 <__fixdfsi+0x58>
 180d1b4:	00810cc4 	movi	r2,1075
 180d1b8:	1185c83a 	sub	r2,r2,r6
 180d1bc:	01c007c4 	movi	r7,31
 180d1c0:	18c00434 	orhi	r3,r3,16
 180d1c4:	38800d16 	blt	r7,r2,180d1fc <__fixdfsi+0x70>
 180d1c8:	31befb44 	addi	r6,r6,-1043
 180d1cc:	2084d83a 	srl	r2,r4,r2
 180d1d0:	1986983a 	sll	r3,r3,r6
 180d1d4:	1884b03a 	or	r2,r3,r2
 180d1d8:	28000726 	beq	r5,zero,180d1f8 <__fixdfsi+0x6c>
 180d1dc:	0085c83a 	sub	r2,zero,r2
 180d1e0:	f800283a 	ret
 180d1e4:	00a00034 	movhi	r2,32768
 180d1e8:	10bfffc4 	addi	r2,r2,-1
 180d1ec:	2885883a 	add	r2,r5,r2
 180d1f0:	f800283a 	ret
 180d1f4:	0005883a 	mov	r2,zero
 180d1f8:	f800283a 	ret
 180d1fc:	008104c4 	movi	r2,1043
 180d200:	1185c83a 	sub	r2,r2,r6
 180d204:	1884d83a 	srl	r2,r3,r2
 180d208:	003ff306 	br	180d1d8 <__alt_mem_mem_0+0xff7ed1d8>

0180d20c <__floatsidf>:
 180d20c:	defffd04 	addi	sp,sp,-12
 180d210:	dfc00215 	stw	ra,8(sp)
 180d214:	dc400115 	stw	r17,4(sp)
 180d218:	dc000015 	stw	r16,0(sp)
 180d21c:	20002b26 	beq	r4,zero,180d2cc <__floatsidf+0xc0>
 180d220:	2023883a 	mov	r17,r4
 180d224:	2020d7fa 	srli	r16,r4,31
 180d228:	20002d16 	blt	r4,zero,180d2e0 <__floatsidf+0xd4>
 180d22c:	8809883a 	mov	r4,r17
 180d230:	180d3900 	call	180d390 <__clzsi2>
 180d234:	01410784 	movi	r5,1054
 180d238:	288bc83a 	sub	r5,r5,r2
 180d23c:	01010cc4 	movi	r4,1075
 180d240:	2149c83a 	sub	r4,r4,r5
 180d244:	00c007c4 	movi	r3,31
 180d248:	1900160e 	bge	r3,r4,180d2a4 <__floatsidf+0x98>
 180d24c:	00c104c4 	movi	r3,1043
 180d250:	1947c83a 	sub	r3,r3,r5
 180d254:	88c6983a 	sll	r3,r17,r3
 180d258:	00800434 	movhi	r2,16
 180d25c:	10bfffc4 	addi	r2,r2,-1
 180d260:	1886703a 	and	r3,r3,r2
 180d264:	2941ffcc 	andi	r5,r5,2047
 180d268:	800d883a 	mov	r6,r16
 180d26c:	0005883a 	mov	r2,zero
 180d270:	280a953a 	slli	r5,r5,20
 180d274:	31803fcc 	andi	r6,r6,255
 180d278:	01000434 	movhi	r4,16
 180d27c:	300c97fa 	slli	r6,r6,31
 180d280:	213fffc4 	addi	r4,r4,-1
 180d284:	1906703a 	and	r3,r3,r4
 180d288:	1946b03a 	or	r3,r3,r5
 180d28c:	1986b03a 	or	r3,r3,r6
 180d290:	dfc00217 	ldw	ra,8(sp)
 180d294:	dc400117 	ldw	r17,4(sp)
 180d298:	dc000017 	ldw	r16,0(sp)
 180d29c:	dec00304 	addi	sp,sp,12
 180d2a0:	f800283a 	ret
 180d2a4:	00c002c4 	movi	r3,11
 180d2a8:	1887c83a 	sub	r3,r3,r2
 180d2ac:	88c6d83a 	srl	r3,r17,r3
 180d2b0:	8904983a 	sll	r2,r17,r4
 180d2b4:	01000434 	movhi	r4,16
 180d2b8:	213fffc4 	addi	r4,r4,-1
 180d2bc:	2941ffcc 	andi	r5,r5,2047
 180d2c0:	1906703a 	and	r3,r3,r4
 180d2c4:	800d883a 	mov	r6,r16
 180d2c8:	003fe906 	br	180d270 <__alt_mem_mem_0+0xff7ed270>
 180d2cc:	000d883a 	mov	r6,zero
 180d2d0:	000b883a 	mov	r5,zero
 180d2d4:	0007883a 	mov	r3,zero
 180d2d8:	0005883a 	mov	r2,zero
 180d2dc:	003fe406 	br	180d270 <__alt_mem_mem_0+0xff7ed270>
 180d2e0:	0123c83a 	sub	r17,zero,r4
 180d2e4:	003fd106 	br	180d22c <__alt_mem_mem_0+0xff7ed22c>

0180d2e8 <__floatunsidf>:
 180d2e8:	defffe04 	addi	sp,sp,-8
 180d2ec:	dc000015 	stw	r16,0(sp)
 180d2f0:	dfc00115 	stw	ra,4(sp)
 180d2f4:	2021883a 	mov	r16,r4
 180d2f8:	20002226 	beq	r4,zero,180d384 <__floatunsidf+0x9c>
 180d2fc:	180d3900 	call	180d390 <__clzsi2>
 180d300:	01010784 	movi	r4,1054
 180d304:	2089c83a 	sub	r4,r4,r2
 180d308:	01810cc4 	movi	r6,1075
 180d30c:	310dc83a 	sub	r6,r6,r4
 180d310:	00c007c4 	movi	r3,31
 180d314:	1980120e 	bge	r3,r6,180d360 <__floatunsidf+0x78>
 180d318:	00c104c4 	movi	r3,1043
 180d31c:	1907c83a 	sub	r3,r3,r4
 180d320:	80ca983a 	sll	r5,r16,r3
 180d324:	00800434 	movhi	r2,16
 180d328:	10bfffc4 	addi	r2,r2,-1
 180d32c:	2101ffcc 	andi	r4,r4,2047
 180d330:	0021883a 	mov	r16,zero
 180d334:	288a703a 	and	r5,r5,r2
 180d338:	2008953a 	slli	r4,r4,20
 180d33c:	00c00434 	movhi	r3,16
 180d340:	18ffffc4 	addi	r3,r3,-1
 180d344:	28c6703a 	and	r3,r5,r3
 180d348:	8005883a 	mov	r2,r16
 180d34c:	1906b03a 	or	r3,r3,r4
 180d350:	dfc00117 	ldw	ra,4(sp)
 180d354:	dc000017 	ldw	r16,0(sp)
 180d358:	dec00204 	addi	sp,sp,8
 180d35c:	f800283a 	ret
 180d360:	00c002c4 	movi	r3,11
 180d364:	188bc83a 	sub	r5,r3,r2
 180d368:	814ad83a 	srl	r5,r16,r5
 180d36c:	00c00434 	movhi	r3,16
 180d370:	18ffffc4 	addi	r3,r3,-1
 180d374:	81a0983a 	sll	r16,r16,r6
 180d378:	2101ffcc 	andi	r4,r4,2047
 180d37c:	28ca703a 	and	r5,r5,r3
 180d380:	003fed06 	br	180d338 <__alt_mem_mem_0+0xff7ed338>
 180d384:	0009883a 	mov	r4,zero
 180d388:	000b883a 	mov	r5,zero
 180d38c:	003fea06 	br	180d338 <__alt_mem_mem_0+0xff7ed338>

0180d390 <__clzsi2>:
 180d390:	00bfffd4 	movui	r2,65535
 180d394:	11000536 	bltu	r2,r4,180d3ac <__clzsi2+0x1c>
 180d398:	00803fc4 	movi	r2,255
 180d39c:	11000f36 	bltu	r2,r4,180d3dc <__clzsi2+0x4c>
 180d3a0:	00800804 	movi	r2,32
 180d3a4:	0007883a 	mov	r3,zero
 180d3a8:	00000506 	br	180d3c0 <__clzsi2+0x30>
 180d3ac:	00804034 	movhi	r2,256
 180d3b0:	10bfffc4 	addi	r2,r2,-1
 180d3b4:	11000c2e 	bgeu	r2,r4,180d3e8 <__clzsi2+0x58>
 180d3b8:	00800204 	movi	r2,8
 180d3bc:	00c00604 	movi	r3,24
 180d3c0:	20c8d83a 	srl	r4,r4,r3
 180d3c4:	00c06134 	movhi	r3,388
 180d3c8:	18c2ee04 	addi	r3,r3,3000
 180d3cc:	1909883a 	add	r4,r3,r4
 180d3d0:	20c00003 	ldbu	r3,0(r4)
 180d3d4:	10c5c83a 	sub	r2,r2,r3
 180d3d8:	f800283a 	ret
 180d3dc:	00800604 	movi	r2,24
 180d3e0:	00c00204 	movi	r3,8
 180d3e4:	003ff606 	br	180d3c0 <__alt_mem_mem_0+0xff7ed3c0>
 180d3e8:	00800404 	movi	r2,16
 180d3ec:	1007883a 	mov	r3,r2
 180d3f0:	003ff306 	br	180d3c0 <__alt_mem_mem_0+0xff7ed3c0>

0180d3f4 <pre_constructors>:
/*
 * We want this pre_constructors and post_constructors functions to be called when it is defined by the user, if the user didn't define it
 * we don't want a link error, just call this empty function
 */
void __attribute__((weak)) pre_constructors()
{
 180d3f4:	deffff04 	addi	sp,sp,-4
 180d3f8:	df000015 	stw	fp,0(sp)
 180d3fc:	d839883a 	mov	fp,sp
	// nothing to do here... may be overloaded by the application
}
 180d400:	0001883a 	nop
 180d404:	e037883a 	mov	sp,fp
 180d408:	df000017 	ldw	fp,0(sp)
 180d40c:	dec00104 	addi	sp,sp,4
 180d410:	f800283a 	ret

0180d414 <post_constructors>:

void __attribute__((weak)) post_constructors()
{
 180d414:	deffff04 	addi	sp,sp,-4
 180d418:	df000015 	stw	fp,0(sp)
 180d41c:	d839883a 	mov	fp,sp
	// nothing to do here... may be overloaded by the application
}
 180d420:	0001883a 	nop
 180d424:	e037883a 	mov	sp,fp
 180d428:	df000017 	ldw	fp,0(sp)
 180d42c:	dec00104 	addi	sp,sp,4
 180d430:	f800283a 	ret

0180d434 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 180d434:	defff904 	addi	sp,sp,-28
 180d438:	dfc00615 	stw	ra,24(sp)
 180d43c:	df000515 	stw	fp,20(sp)
 180d440:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 180d444:	0009883a 	mov	r4,zero
 180d448:	18243b40 	call	18243b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 180d44c:	01000104 	movi	r4,4
 180d450:	180d84c0 	call	180d84c <xQueueCreateMutex>
 180d454:	d0a7d215 	stw	r2,-24760(gp)
 180d458:	01000104 	movi	r4,4
 180d45c:	180d84c0 	call	180d84c <xQueueCreateMutex>
 180d460:	d0a80015 	stw	r2,-24576(gp)
 180d464:	d0a7e704 	addi	r2,gp,-24676
 180d468:	e0bffc15 	stw	r2,-16(fp)
 180d46c:	00800044 	movi	r2,1
 180d470:	e0bffd0d 	sth	r2,-12(fp)
 * alt_sem_create() is a wrapper for xSemaphoreCreateCounting(). The return value is 0 if 
 * the semaphore has been successfully created, or non-zero otherwise.
 */
static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (xSemaphoreHandle* sem, alt_u16 value)
{
	*sem = xSemaphoreCreateCounting(value ? value : 1, value);
 180d474:	e0bffd0b 	ldhu	r2,-12(fp)
 180d478:	10000226 	beq	r2,zero,180d484 <alt_main+0x50>
 180d47c:	e0bffd0b 	ldhu	r2,-12(fp)
 180d480:	00000106 	br	180d488 <alt_main+0x54>
 180d484:	00800044 	movi	r2,1
 180d488:	e0fffd0b 	ldhu	r3,-12(fp)
 180d48c:	180b883a 	mov	r5,r3
 180d490:	1009883a 	mov	r4,r2
 180d494:	180d9d40 	call	180d9d4 <xQueueCreateCountingSemaphore>
 180d498:	1007883a 	mov	r3,r2
 180d49c:	e0bffc17 	ldw	r2,-16(fp)
 180d4a0:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 180d4a4:	18243ec0 	call	18243ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 180d4a8:	01806134 	movhi	r6,388
 180d4ac:	31832e04 	addi	r6,r6,3256
 180d4b0:	01406134 	movhi	r5,388
 180d4b4:	29432e04 	addi	r5,r5,3256
 180d4b8:	01006134 	movhi	r4,388
 180d4bc:	21032e04 	addi	r4,r4,3256
 180d4c0:	18126500 	call	1812650 <alt_io_redirect>
#endif

  /*
   * Call the pre_constructors function
   */
  pre_constructors();
 180d4c4:	180d3f40 	call	180d3f4 <pre_constructors>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 180d4c8:	18123e00 	call	18123e0 <_do_ctors>
#endif /* ALT_NO_C_PLUS_PLUS */

  /*
   * Call the post_constructors function
   */
  post_constructors();
 180d4cc:	180d4140 	call	180d414 <post_constructors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 180d4d0:	01006074 	movhi	r4,385
 180d4d4:	21091004 	addi	r4,r4,9280
 180d4d8:	183c6700 	call	183c670 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 180d4dc:	d0a7cf17 	ldw	r2,-24772(gp)
 180d4e0:	d0e7d017 	ldw	r3,-24768(gp)
 180d4e4:	d127d117 	ldw	r4,-24764(gp)
 180d4e8:	200d883a 	mov	r6,r4
 180d4ec:	180b883a 	mov	r5,r3
 180d4f0:	1009883a 	mov	r4,r2
 180d4f4:	1800a980 	call	1800a98 <main>
 180d4f8:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 180d4fc:	01000044 	movi	r4,1
 180d500:	1812f780 	call	1812f78 <close>
  exit (result);
 180d504:	e13ffb17 	ldw	r4,-20(fp)
 180d508:	183c6840 	call	183c684 <exit>

0180d50c <__malloc_lock>:
xSemaphoreHandle alt_heapsem;

/* __malloc_lock needs to provide recursive mutex locking */

void __malloc_lock ( struct _reent *_r )
{
 180d50c:	defffd04 	addi	sp,sp,-12
 180d510:	dfc00215 	stw	ra,8(sp)
 180d514:	df000115 	stw	fp,4(sp)
 180d518:	df000104 	addi	fp,sp,4
 180d51c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 180d520:	1810a1c0 	call	1810a1c <xTaskGetSchedulerState>
 180d524:	10000b26 	beq	r2,zero,180d554 <__malloc_lock+0x48>
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_heapsem, 10) != pdTRUE)
 180d528:	00000206 	br	180d534 <__malloc_lock+0x28>
		vTaskDelay(1);
 180d52c:	01000044 	movi	r4,1
 180d530:	180f10c0 	call	180f10c <vTaskDelay>
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_heapsem, 10) != pdTRUE)
 180d534:	d0a7d217 	ldw	r2,-24760(gp)
 180d538:	01400284 	movi	r5,10
 180d53c:	1009883a 	mov	r4,r2
 180d540:	180d9380 	call	180d938 <xQueueTakeMutexRecursive>
 180d544:	10800058 	cmpnei	r2,r2,1
 180d548:	103ff81e 	bne	r2,zero,180d52c <__alt_mem_mem_0+0xff7ed52c>
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
 180d54c:	0001883a 	nop
 180d550:	00000106 	br	180d558 <__malloc_lock+0x4c>

void __malloc_lock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 180d554:	0001883a 	nop
	while (xSemaphoreTakeRecursive(alt_heapsem, 10) != pdTRUE)
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
}
 180d558:	e037883a 	mov	sp,fp
 180d55c:	dfc00117 	ldw	ra,4(sp)
 180d560:	df000017 	ldw	fp,0(sp)
 180d564:	dec00204 	addi	sp,sp,8
 180d568:	f800283a 	ret

0180d56c <__malloc_unlock>:

/* __malloc_unlock needs to provide recursive mutex unlocking */

void __malloc_unlock ( struct _reent *_r )
{
 180d56c:	defffd04 	addi	sp,sp,-12
 180d570:	dfc00215 	stw	ra,8(sp)
 180d574:	df000115 	stw	fp,4(sp)
 180d578:	df000104 	addi	fp,sp,4
 180d57c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 180d580:	1810a1c0 	call	1810a1c <xTaskGetSchedulerState>
 180d584:	10000426 	beq	r2,zero,180d598 <__malloc_unlock+0x2c>
		return;
	  
	xSemaphoreGiveRecursive(alt_heapsem);
 180d588:	d0a7d217 	ldw	r2,-24760(gp)
 180d58c:	1009883a 	mov	r4,r2
 180d590:	180d8a80 	call	180d8a8 <xQueueGiveMutexRecursive>
 180d594:	00000106 	br	180d59c <__malloc_unlock+0x30>

void __malloc_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 180d598:	0001883a 	nop
	  
	xSemaphoreGiveRecursive(alt_heapsem);
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 180d59c:	e037883a 	mov	sp,fp
 180d5a0:	dfc00117 	ldw	ra,4(sp)
 180d5a4:	df000017 	ldw	fp,0(sp)
 180d5a8:	dec00204 	addi	sp,sp,8
 180d5ac:	f800283a 	ret

0180d5b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 180d5b0:	defffb04 	addi	sp,sp,-20
 180d5b4:	dfc00415 	stw	ra,16(sp)
 180d5b8:	df000315 	stw	fp,12(sp)
 180d5bc:	df000304 	addi	fp,sp,12
 180d5c0:	e13ffe15 	stw	r4,-8(fp)
 180d5c4:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = xQueue;
 180d5c8:	e0bffe17 	ldw	r2,-8(fp)
 180d5cc:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 180d5d0:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 180d5d4:	e0bffd17 	ldw	r2,-12(fp)
 180d5d8:	10c00017 	ldw	r3,0(r2)
 180d5dc:	e0bffd17 	ldw	r2,-12(fp)
 180d5e0:	11000f17 	ldw	r4,60(r2)
 180d5e4:	e0bffd17 	ldw	r2,-12(fp)
 180d5e8:	10801017 	ldw	r2,64(r2)
 180d5ec:	2085383a 	mul	r2,r4,r2
 180d5f0:	1887883a 	add	r3,r3,r2
 180d5f4:	e0bffd17 	ldw	r2,-12(fp)
 180d5f8:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 180d5fc:	e0bffd17 	ldw	r2,-12(fp)
 180d600:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 180d604:	e0bffd17 	ldw	r2,-12(fp)
 180d608:	10c00017 	ldw	r3,0(r2)
 180d60c:	e0bffd17 	ldw	r2,-12(fp)
 180d610:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 180d614:	e0bffd17 	ldw	r2,-12(fp)
 180d618:	10c00017 	ldw	r3,0(r2)
 180d61c:	e0bffd17 	ldw	r2,-12(fp)
 180d620:	10800f17 	ldw	r2,60(r2)
 180d624:	113fffc4 	addi	r4,r2,-1
 180d628:	e0bffd17 	ldw	r2,-12(fp)
 180d62c:	10801017 	ldw	r2,64(r2)
 180d630:	2085383a 	mul	r2,r4,r2
 180d634:	1887883a 	add	r3,r3,r2
 180d638:	e0bffd17 	ldw	r2,-12(fp)
 180d63c:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 180d640:	e0bffd17 	ldw	r2,-12(fp)
 180d644:	00ffffc4 	movi	r3,-1
 180d648:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 180d64c:	e0bffd17 	ldw	r2,-12(fp)
 180d650:	00ffffc4 	movi	r3,-1
 180d654:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 180d658:	e0bfff17 	ldw	r2,-4(fp)
 180d65c:	10000a1e 	bne	r2,zero,180d688 <xQueueGenericReset+0xd8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 180d660:	e0bffd17 	ldw	r2,-12(fp)
 180d664:	10800417 	ldw	r2,16(r2)
 180d668:	10000f26 	beq	r2,zero,180d6a8 <xQueueGenericReset+0xf8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 180d66c:	e0bffd17 	ldw	r2,-12(fp)
 180d670:	10800404 	addi	r2,r2,16
 180d674:	1009883a 	mov	r4,r2
 180d678:	18100f00 	call	18100f0 <xTaskRemoveFromEventList>
 180d67c:	10000a26 	beq	r2,zero,180d6a8 <xQueueGenericReset+0xf8>
				{
					queueYIELD_IF_USING_PREEMPTION();
 180d680:	003b683a 	trap	0
 180d684:	00000806 	br	180d6a8 <xQueueGenericReset+0xf8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 180d688:	e0bffd17 	ldw	r2,-12(fp)
 180d68c:	10800404 	addi	r2,r2,16
 180d690:	1009883a 	mov	r4,r2
 180d694:	18269bc0 	call	18269bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 180d698:	e0bffd17 	ldw	r2,-12(fp)
 180d69c:	10800904 	addi	r2,r2,36
 180d6a0:	1009883a 	mov	r4,r2
 180d6a4:	18269bc0 	call	18269bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 180d6a8:	1810e380 	call	1810e38 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 180d6ac:	00800044 	movi	r2,1
}
 180d6b0:	e037883a 	mov	sp,fp
 180d6b4:	dfc00117 	ldw	ra,4(sp)
 180d6b8:	df000017 	ldw	fp,0(sp)
 180d6bc:	dec00204 	addi	sp,sp,8
 180d6c0:	f800283a 	ret

0180d6c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 180d6c4:	defff704 	addi	sp,sp,-36
 180d6c8:	dfc00815 	stw	ra,32(sp)
 180d6cc:	df000715 	stw	fp,28(sp)
 180d6d0:	df000704 	addi	fp,sp,28
 180d6d4:	e13ffd15 	stw	r4,-12(fp)
 180d6d8:	e17ffe15 	stw	r5,-8(fp)
 180d6dc:	3005883a 	mov	r2,r6
 180d6e0:	e0bfff05 	stb	r2,-4(fp)
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 180d6e4:	e0fffd17 	ldw	r3,-12(fp)
 180d6e8:	e0bffe17 	ldw	r2,-8(fp)
 180d6ec:	1885383a 	mul	r2,r3,r2
 180d6f0:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 180d6f4:	e0bffa17 	ldw	r2,-24(fp)
 180d6f8:	10801404 	addi	r2,r2,80
 180d6fc:	1009883a 	mov	r4,r2
 180d700:	182692c0 	call	182692c <pvPortMalloc>
 180d704:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 180d708:	e0bffb17 	ldw	r2,-20(fp)
 180d70c:	10000d26 	beq	r2,zero,180d744 <xQueueGenericCreate+0x80>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 180d710:	e0bffb17 	ldw	r2,-20(fp)
 180d714:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 180d718:	e0bffc17 	ldw	r2,-16(fp)
 180d71c:	10801404 	addi	r2,r2,80
 180d720:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 180d724:	e0ffff03 	ldbu	r3,-4(fp)
 180d728:	e0bffb17 	ldw	r2,-20(fp)
 180d72c:	d8800015 	stw	r2,0(sp)
 180d730:	180f883a 	mov	r7,r3
 180d734:	e1bffc17 	ldw	r6,-16(fp)
 180d738:	e17ffe17 	ldw	r5,-8(fp)
 180d73c:	e13ffd17 	ldw	r4,-12(fp)
 180d740:	180d75c0 	call	180d75c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 180d744:	e0bffb17 	ldw	r2,-20(fp)
	}
 180d748:	e037883a 	mov	sp,fp
 180d74c:	dfc00117 	ldw	ra,4(sp)
 180d750:	df000017 	ldw	fp,0(sp)
 180d754:	dec00204 	addi	sp,sp,8
 180d758:	f800283a 	ret

0180d75c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 180d75c:	defffa04 	addi	sp,sp,-24
 180d760:	dfc00515 	stw	ra,20(sp)
 180d764:	df000415 	stw	fp,16(sp)
 180d768:	df000404 	addi	fp,sp,16
 180d76c:	e13ffc15 	stw	r4,-16(fp)
 180d770:	e17ffd15 	stw	r5,-12(fp)
 180d774:	e1bffe15 	stw	r6,-8(fp)
 180d778:	3805883a 	mov	r2,r7
 180d77c:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 180d780:	e0bffd17 	ldw	r2,-12(fp)
 180d784:	1000041e 	bne	r2,zero,180d798 <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 180d788:	e0800217 	ldw	r2,8(fp)
 180d78c:	e0c00217 	ldw	r3,8(fp)
 180d790:	10c00015 	stw	r3,0(r2)
 180d794:	00000306 	br	180d7a4 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 180d798:	e0800217 	ldw	r2,8(fp)
 180d79c:	e0fffe17 	ldw	r3,-8(fp)
 180d7a0:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 180d7a4:	e0800217 	ldw	r2,8(fp)
 180d7a8:	e0fffc17 	ldw	r3,-16(fp)
 180d7ac:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 180d7b0:	e0800217 	ldw	r2,8(fp)
 180d7b4:	e0fffd17 	ldw	r3,-12(fp)
 180d7b8:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 180d7bc:	01400044 	movi	r5,1
 180d7c0:	e1000217 	ldw	r4,8(fp)
 180d7c4:	180d5b00 	call	180d5b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 180d7c8:	e0800217 	ldw	r2,8(fp)
 180d7cc:	e0ffff03 	ldbu	r3,-4(fp)
 180d7d0:	10c01305 	stb	r3,76(r2)
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 180d7d4:	0001883a 	nop
 180d7d8:	e037883a 	mov	sp,fp
 180d7dc:	dfc00117 	ldw	ra,4(sp)
 180d7e0:	df000017 	ldw	fp,0(sp)
 180d7e4:	dec00204 	addi	sp,sp,8
 180d7e8:	f800283a 	ret

0180d7ec <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 180d7ec:	defffd04 	addi	sp,sp,-12
 180d7f0:	dfc00215 	stw	ra,8(sp)
 180d7f4:	df000115 	stw	fp,4(sp)
 180d7f8:	df000104 	addi	fp,sp,4
 180d7fc:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 180d800:	e0bfff17 	ldw	r2,-4(fp)
 180d804:	10000b26 	beq	r2,zero,180d834 <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 180d808:	e0bfff17 	ldw	r2,-4(fp)
 180d80c:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 180d810:	e0bfff17 	ldw	r2,-4(fp)
 180d814:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 180d818:	e0bfff17 	ldw	r2,-4(fp)
 180d81c:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 180d820:	000f883a 	mov	r7,zero
 180d824:	000d883a 	mov	r6,zero
 180d828:	000b883a 	mov	r5,zero
 180d82c:	e13fff17 	ldw	r4,-4(fp)
 180d830:	180da2c0 	call	180da2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 180d834:	0001883a 	nop
 180d838:	e037883a 	mov	sp,fp
 180d83c:	dfc00117 	ldw	ra,4(sp)
 180d840:	df000017 	ldw	fp,0(sp)
 180d844:	dec00204 	addi	sp,sp,8
 180d848:	f800283a 	ret

0180d84c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 180d84c:	defffa04 	addi	sp,sp,-24
 180d850:	dfc00515 	stw	ra,20(sp)
 180d854:	df000415 	stw	fp,16(sp)
 180d858:	df000404 	addi	fp,sp,16
 180d85c:	2005883a 	mov	r2,r4
 180d860:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 180d864:	00800044 	movi	r2,1
 180d868:	e0bffc15 	stw	r2,-16(fp)
 180d86c:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 180d870:	e0bfff03 	ldbu	r2,-4(fp)
 180d874:	100d883a 	mov	r6,r2
 180d878:	e17ffd17 	ldw	r5,-12(fp)
 180d87c:	e13ffc17 	ldw	r4,-16(fp)
 180d880:	180d6c40 	call	180d6c4 <xQueueGenericCreate>
 180d884:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 180d888:	e13ffe17 	ldw	r4,-8(fp)
 180d88c:	180d7ec0 	call	180d7ec <prvInitialiseMutex>

		return xNewQueue;
 180d890:	e0bffe17 	ldw	r2,-8(fp)
	}
 180d894:	e037883a 	mov	sp,fp
 180d898:	dfc00117 	ldw	ra,4(sp)
 180d89c:	df000017 	ldw	fp,0(sp)
 180d8a0:	dec00204 	addi	sp,sp,8
 180d8a4:	f800283a 	ret

0180d8a8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 180d8a8:	defffa04 	addi	sp,sp,-24
 180d8ac:	dfc00515 	stw	ra,20(sp)
 180d8b0:	df000415 	stw	fp,16(sp)
 180d8b4:	dc000315 	stw	r16,12(sp)
 180d8b8:	df000404 	addi	fp,sp,16
 180d8bc:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 180d8c0:	e0bffe17 	ldw	r2,-8(fp)
 180d8c4:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 180d8c8:	e0bffd17 	ldw	r2,-12(fp)
 180d8cc:	14000217 	ldw	r16,8(r2)
 180d8d0:	18109f40 	call	18109f4 <xTaskGetCurrentTaskHandle>
 180d8d4:	8080101e 	bne	r16,r2,180d918 <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 180d8d8:	e0bffd17 	ldw	r2,-12(fp)
 180d8dc:	10800317 	ldw	r2,12(r2)
 180d8e0:	10ffffc4 	addi	r3,r2,-1
 180d8e4:	e0bffd17 	ldw	r2,-12(fp)
 180d8e8:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 180d8ec:	e0bffd17 	ldw	r2,-12(fp)
 180d8f0:	10800317 	ldw	r2,12(r2)
 180d8f4:	1000051e 	bne	r2,zero,180d90c <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 180d8f8:	000f883a 	mov	r7,zero
 180d8fc:	000d883a 	mov	r6,zero
 180d900:	000b883a 	mov	r5,zero
 180d904:	e13ffd17 	ldw	r4,-12(fp)
 180d908:	180da2c0 	call	180da2c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 180d90c:	00800044 	movi	r2,1
 180d910:	e0bffc15 	stw	r2,-16(fp)
 180d914:	00000106 	br	180d91c <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 180d918:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 180d91c:	e0bffc17 	ldw	r2,-16(fp)
	}
 180d920:	e6ffff04 	addi	sp,fp,-4
 180d924:	dfc00217 	ldw	ra,8(sp)
 180d928:	df000117 	ldw	fp,4(sp)
 180d92c:	dc000017 	ldw	r16,0(sp)
 180d930:	dec00304 	addi	sp,sp,12
 180d934:	f800283a 	ret

0180d938 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 180d938:	defff904 	addi	sp,sp,-28
 180d93c:	dfc00615 	stw	ra,24(sp)
 180d940:	df000515 	stw	fp,20(sp)
 180d944:	dc000415 	stw	r16,16(sp)
 180d948:	df000504 	addi	fp,sp,20
 180d94c:	e13ffd15 	stw	r4,-12(fp)
 180d950:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 180d954:	e0bffd17 	ldw	r2,-12(fp)
 180d958:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 180d95c:	e0bffc17 	ldw	r2,-16(fp)
 180d960:	14000217 	ldw	r16,8(r2)
 180d964:	18109f40 	call	18109f4 <xTaskGetCurrentTaskHandle>
 180d968:	8080081e 	bne	r16,r2,180d98c <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 180d96c:	e0bffc17 	ldw	r2,-16(fp)
 180d970:	10800317 	ldw	r2,12(r2)
 180d974:	10c00044 	addi	r3,r2,1
 180d978:	e0bffc17 	ldw	r2,-16(fp)
 180d97c:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 180d980:	00800044 	movi	r2,1
 180d984:	e0bffb15 	stw	r2,-20(fp)
 180d988:	00000b06 	br	180d9b8 <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 180d98c:	e17ffe17 	ldw	r5,-8(fp)
 180d990:	e13ffc17 	ldw	r4,-16(fp)
 180d994:	180df580 	call	180df58 <xQueueSemaphoreTake>
 180d998:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 180d99c:	e0bffb17 	ldw	r2,-20(fp)
 180d9a0:	10000526 	beq	r2,zero,180d9b8 <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 180d9a4:	e0bffc17 	ldw	r2,-16(fp)
 180d9a8:	10800317 	ldw	r2,12(r2)
 180d9ac:	10c00044 	addi	r3,r2,1
 180d9b0:	e0bffc17 	ldw	r2,-16(fp)
 180d9b4:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 180d9b8:	e0bffb17 	ldw	r2,-20(fp)
	}
 180d9bc:	e6ffff04 	addi	sp,fp,-4
 180d9c0:	dfc00217 	ldw	ra,8(sp)
 180d9c4:	df000117 	ldw	fp,4(sp)
 180d9c8:	dc000017 	ldw	r16,0(sp)
 180d9cc:	dec00304 	addi	sp,sp,12
 180d9d0:	f800283a 	ret

0180d9d4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 180d9d4:	defffb04 	addi	sp,sp,-20
 180d9d8:	dfc00415 	stw	ra,16(sp)
 180d9dc:	df000315 	stw	fp,12(sp)
 180d9e0:	df000304 	addi	fp,sp,12
 180d9e4:	e13ffe15 	stw	r4,-8(fp)
 180d9e8:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 180d9ec:	01800084 	movi	r6,2
 180d9f0:	000b883a 	mov	r5,zero
 180d9f4:	e13ffe17 	ldw	r4,-8(fp)
 180d9f8:	180d6c40 	call	180d6c4 <xQueueGenericCreate>
 180d9fc:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 180da00:	e0bffd17 	ldw	r2,-12(fp)
 180da04:	10000326 	beq	r2,zero,180da14 <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 180da08:	e0bffd17 	ldw	r2,-12(fp)
 180da0c:	e0ffff17 	ldw	r3,-4(fp)
 180da10:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 180da14:	e0bffd17 	ldw	r2,-12(fp)
	}
 180da18:	e037883a 	mov	sp,fp
 180da1c:	dfc00117 	ldw	ra,4(sp)
 180da20:	df000017 	ldw	fp,0(sp)
 180da24:	dec00204 	addi	sp,sp,8
 180da28:	f800283a 	ret

0180da2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 180da2c:	defff504 	addi	sp,sp,-44
 180da30:	dfc00a15 	stw	ra,40(sp)
 180da34:	df000915 	stw	fp,36(sp)
 180da38:	df000904 	addi	fp,sp,36
 180da3c:	e13ffc15 	stw	r4,-16(fp)
 180da40:	e17ffd15 	stw	r5,-12(fp)
 180da44:	e1bffe15 	stw	r6,-8(fp)
 180da48:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 180da4c:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 180da50:	e0bffc17 	ldw	r2,-16(fp)
 180da54:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 180da58:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 180da5c:	e0bff817 	ldw	r2,-32(fp)
 180da60:	10c00e17 	ldw	r3,56(r2)
 180da64:	e0bff817 	ldw	r2,-32(fp)
 180da68:	10800f17 	ldw	r2,60(r2)
 180da6c:	18800336 	bltu	r3,r2,180da7c <xQueueGenericSend+0x50>
 180da70:	e0bfff17 	ldw	r2,-4(fp)
 180da74:	10800098 	cmpnei	r2,r2,2
 180da78:	1000151e 	bne	r2,zero,180dad0 <xQueueGenericSend+0xa4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 180da7c:	e1bfff17 	ldw	r6,-4(fp)
 180da80:	e17ffd17 	ldw	r5,-12(fp)
 180da84:	e13ff817 	ldw	r4,-32(fp)
 180da88:	180e6540 	call	180e654 <prvCopyDataToQueue>
 180da8c:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 180da90:	e0bff817 	ldw	r2,-32(fp)
 180da94:	10800917 	ldw	r2,36(r2)
 180da98:	10000726 	beq	r2,zero,180dab8 <xQueueGenericSend+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 180da9c:	e0bff817 	ldw	r2,-32(fp)
 180daa0:	10800904 	addi	r2,r2,36
 180daa4:	1009883a 	mov	r4,r2
 180daa8:	18100f00 	call	18100f0 <xTaskRemoveFromEventList>
 180daac:	10000526 	beq	r2,zero,180dac4 <xQueueGenericSend+0x98>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 180dab0:	003b683a 	trap	0
 180dab4:	00000306 	br	180dac4 <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 180dab8:	e0bff917 	ldw	r2,-28(fp)
 180dabc:	10000126 	beq	r2,zero,180dac4 <xQueueGenericSend+0x98>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 180dac0:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 180dac4:	1810e380 	call	1810e38 <vTaskExitCritical>
				return pdPASS;
 180dac8:	00800044 	movi	r2,1
 180dacc:	00003f06 	br	180dbcc <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 180dad0:	e0bffe17 	ldw	r2,-8(fp)
 180dad4:	1000031e 	bne	r2,zero,180dae4 <xQueueGenericSend+0xb8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 180dad8:	1810e380 	call	1810e38 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 180dadc:	0005883a 	mov	r2,zero
 180dae0:	00003a06 	br	180dbcc <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 180dae4:	e0bff717 	ldw	r2,-36(fp)
 180dae8:	1000051e 	bne	r2,zero,180db00 <xQueueGenericSend+0xd4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 180daec:	e0bffa04 	addi	r2,fp,-24
 180daf0:	1009883a 	mov	r4,r2
 180daf4:	18102f80 	call	18102f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 180daf8:	00800044 	movi	r2,1
 180dafc:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 180db00:	1810e380 	call	1810e38 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 180db04:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 180db08:	1810de40 	call	1810de4 <vTaskEnterCritical>
 180db0c:	e0bff817 	ldw	r2,-32(fp)
 180db10:	10801103 	ldbu	r2,68(r2)
 180db14:	10803fcc 	andi	r2,r2,255
 180db18:	1080201c 	xori	r2,r2,128
 180db1c:	10bfe004 	addi	r2,r2,-128
 180db20:	10bfffd8 	cmpnei	r2,r2,-1
 180db24:	1000021e 	bne	r2,zero,180db30 <xQueueGenericSend+0x104>
 180db28:	e0bff817 	ldw	r2,-32(fp)
 180db2c:	10001105 	stb	zero,68(r2)
 180db30:	e0bff817 	ldw	r2,-32(fp)
 180db34:	10801143 	ldbu	r2,69(r2)
 180db38:	10803fcc 	andi	r2,r2,255
 180db3c:	1080201c 	xori	r2,r2,128
 180db40:	10bfe004 	addi	r2,r2,-128
 180db44:	10bfffd8 	cmpnei	r2,r2,-1
 180db48:	1000021e 	bne	r2,zero,180db54 <xQueueGenericSend+0x128>
 180db4c:	e0bff817 	ldw	r2,-32(fp)
 180db50:	10001145 	stb	zero,69(r2)
 180db54:	1810e380 	call	1810e38 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 180db58:	e0fffe04 	addi	r3,fp,-8
 180db5c:	e0bffa04 	addi	r2,fp,-24
 180db60:	180b883a 	mov	r5,r3
 180db64:	1009883a 	mov	r4,r2
 180db68:	18103340 	call	1810334 <xTaskCheckForTimeOut>
 180db6c:	1000131e 	bne	r2,zero,180dbbc <xQueueGenericSend+0x190>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 180db70:	e13ff817 	ldw	r4,-32(fp)
 180db74:	180ea080 	call	180ea08 <prvIsQueueFull>
 180db78:	10000c26 	beq	r2,zero,180dbac <xQueueGenericSend+0x180>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 180db7c:	e0bff817 	ldw	r2,-32(fp)
 180db80:	10800404 	addi	r2,r2,16
 180db84:	e0fffe17 	ldw	r3,-8(fp)
 180db88:	180b883a 	mov	r5,r3
 180db8c:	1009883a 	mov	r4,r2
 180db90:	180ffd80 	call	180ffd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 180db94:	e13ff817 	ldw	r4,-32(fp)
 180db98:	180e87c0 	call	180e87c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 180db9c:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 180dba0:	103fad1e 	bne	r2,zero,180da58 <__alt_mem_mem_0+0xff7eda58>
				{
					portYIELD_WITHIN_API();
 180dba4:	003b683a 	trap	0
 180dba8:	003fab06 	br	180da58 <__alt_mem_mem_0+0xff7eda58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 180dbac:	e13ff817 	ldw	r4,-32(fp)
 180dbb0:	180e87c0 	call	180e87c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 180dbb4:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 180dbb8:	003fa706 	br	180da58 <__alt_mem_mem_0+0xff7eda58>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 180dbbc:	e13ff817 	ldw	r4,-32(fp)
 180dbc0:	180e87c0 	call	180e87c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 180dbc4:	180f8ec0 	call	180f8ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 180dbc8:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 180dbcc:	e037883a 	mov	sp,fp
 180dbd0:	dfc00117 	ldw	ra,4(sp)
 180dbd4:	df000017 	ldw	fp,0(sp)
 180dbd8:	dec00204 	addi	sp,sp,8
 180dbdc:	f800283a 	ret

0180dbe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 180dbe0:	defff504 	addi	sp,sp,-44
 180dbe4:	dfc00a15 	stw	ra,40(sp)
 180dbe8:	df000915 	stw	fp,36(sp)
 180dbec:	df000904 	addi	fp,sp,36
 180dbf0:	e13ffc15 	stw	r4,-16(fp)
 180dbf4:	e17ffd15 	stw	r5,-12(fp)
 180dbf8:	e1bffe15 	stw	r6,-8(fp)
 180dbfc:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 180dc00:	e0bffc17 	ldw	r2,-16(fp)
 180dc04:	e0bff815 	stw	r2,-32(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 180dc08:	e03ff915 	stw	zero,-28(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 180dc0c:	e0bff817 	ldw	r2,-32(fp)
 180dc10:	10c00e17 	ldw	r3,56(r2)
 180dc14:	e0bff817 	ldw	r2,-32(fp)
 180dc18:	10800f17 	ldw	r2,60(r2)
 180dc1c:	18800336 	bltu	r3,r2,180dc2c <xQueueGenericSendFromISR+0x4c>
 180dc20:	e0bfff17 	ldw	r2,-4(fp)
 180dc24:	10800098 	cmpnei	r2,r2,2
 180dc28:	1000231e 	bne	r2,zero,180dcb8 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 180dc2c:	e0bff817 	ldw	r2,-32(fp)
 180dc30:	10801143 	ldbu	r2,69(r2)
 180dc34:	e0bffa05 	stb	r2,-24(fp)
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 180dc38:	e0bff817 	ldw	r2,-32(fp)
 180dc3c:	10800e17 	ldw	r2,56(r2)
 180dc40:	e0bffb15 	stw	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 180dc44:	e1bfff17 	ldw	r6,-4(fp)
 180dc48:	e17ffd17 	ldw	r5,-12(fp)
 180dc4c:	e13ff817 	ldw	r4,-32(fp)
 180dc50:	180e6540 	call	180e654 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 180dc54:	e0bffa07 	ldb	r2,-24(fp)
 180dc58:	10bfffd8 	cmpnei	r2,r2,-1
 180dc5c:	10000e1e 	bne	r2,zero,180dc98 <xQueueGenericSendFromISR+0xb8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 180dc60:	e0bff817 	ldw	r2,-32(fp)
 180dc64:	10800917 	ldw	r2,36(r2)
 180dc68:	10001026 	beq	r2,zero,180dcac <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 180dc6c:	e0bff817 	ldw	r2,-32(fp)
 180dc70:	10800904 	addi	r2,r2,36
 180dc74:	1009883a 	mov	r4,r2
 180dc78:	18100f00 	call	18100f0 <xTaskRemoveFromEventList>
 180dc7c:	10000b26 	beq	r2,zero,180dcac <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 180dc80:	e0bffe17 	ldw	r2,-8(fp)
 180dc84:	10000926 	beq	r2,zero,180dcac <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 180dc88:	e0bffe17 	ldw	r2,-8(fp)
 180dc8c:	00c00044 	movi	r3,1
 180dc90:	10c00015 	stw	r3,0(r2)
 180dc94:	00000506 	br	180dcac <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 180dc98:	e0bffa03 	ldbu	r2,-24(fp)
 180dc9c:	10800044 	addi	r2,r2,1
 180dca0:	1007883a 	mov	r3,r2
 180dca4:	e0bff817 	ldw	r2,-32(fp)
 180dca8:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 180dcac:	00800044 	movi	r2,1
 180dcb0:	e0bff715 	stw	r2,-36(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 180dcb4:	00000106 	br	180dcbc <xQueueGenericSendFromISR+0xdc>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 180dcb8:	e03ff715 	stw	zero,-36(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 180dcbc:	e0bff717 	ldw	r2,-36(fp)
}
 180dcc0:	e037883a 	mov	sp,fp
 180dcc4:	dfc00117 	ldw	ra,4(sp)
 180dcc8:	df000017 	ldw	fp,0(sp)
 180dccc:	dec00204 	addi	sp,sp,8
 180dcd0:	f800283a 	ret

0180dcd4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 180dcd4:	defff704 	addi	sp,sp,-36
 180dcd8:	dfc00815 	stw	ra,32(sp)
 180dcdc:	df000715 	stw	fp,28(sp)
 180dce0:	df000704 	addi	fp,sp,28
 180dce4:	e13ffe15 	stw	r4,-8(fp)
 180dce8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 180dcec:	e0bffe17 	ldw	r2,-8(fp)
 180dcf0:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 180dcf4:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 180dcf8:	e0bffa17 	ldw	r2,-24(fp)
 180dcfc:	10800e17 	ldw	r2,56(r2)
 180dd00:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 180dd04:	e0bffa17 	ldw	r2,-24(fp)
 180dd08:	10800f17 	ldw	r2,60(r2)
 180dd0c:	e0fffc17 	ldw	r3,-16(fp)
 180dd10:	1880202e 	bgeu	r3,r2,180dd94 <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 180dd14:	e0bffa17 	ldw	r2,-24(fp)
 180dd18:	10801143 	ldbu	r2,69(r2)
 180dd1c:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 180dd20:	e0bffc17 	ldw	r2,-16(fp)
 180dd24:	10c00044 	addi	r3,r2,1
 180dd28:	e0bffa17 	ldw	r2,-24(fp)
 180dd2c:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 180dd30:	e0bffd07 	ldb	r2,-12(fp)
 180dd34:	10bfffd8 	cmpnei	r2,r2,-1
 180dd38:	10000e1e 	bne	r2,zero,180dd74 <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 180dd3c:	e0bffa17 	ldw	r2,-24(fp)
 180dd40:	10800917 	ldw	r2,36(r2)
 180dd44:	10001026 	beq	r2,zero,180dd88 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 180dd48:	e0bffa17 	ldw	r2,-24(fp)
 180dd4c:	10800904 	addi	r2,r2,36
 180dd50:	1009883a 	mov	r4,r2
 180dd54:	18100f00 	call	18100f0 <xTaskRemoveFromEventList>
 180dd58:	10000b26 	beq	r2,zero,180dd88 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 180dd5c:	e0bfff17 	ldw	r2,-4(fp)
 180dd60:	10000926 	beq	r2,zero,180dd88 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 180dd64:	e0bfff17 	ldw	r2,-4(fp)
 180dd68:	00c00044 	movi	r3,1
 180dd6c:	10c00015 	stw	r3,0(r2)
 180dd70:	00000506 	br	180dd88 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 180dd74:	e0bffd03 	ldbu	r2,-12(fp)
 180dd78:	10800044 	addi	r2,r2,1
 180dd7c:	1007883a 	mov	r3,r2
 180dd80:	e0bffa17 	ldw	r2,-24(fp)
 180dd84:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 180dd88:	00800044 	movi	r2,1
 180dd8c:	e0bff915 	stw	r2,-28(fp)
 180dd90:	00000106 	br	180dd98 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 180dd94:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 180dd98:	e0bff917 	ldw	r2,-28(fp)
}
 180dd9c:	e037883a 	mov	sp,fp
 180dda0:	dfc00117 	ldw	ra,4(sp)
 180dda4:	df000017 	ldw	fp,0(sp)
 180dda8:	dec00204 	addi	sp,sp,8
 180ddac:	f800283a 	ret

0180ddb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 180ddb0:	defff604 	addi	sp,sp,-40
 180ddb4:	dfc00915 	stw	ra,36(sp)
 180ddb8:	df000815 	stw	fp,32(sp)
 180ddbc:	df000804 	addi	fp,sp,32
 180ddc0:	e13ffd15 	stw	r4,-12(fp)
 180ddc4:	e17ffe15 	stw	r5,-8(fp)
 180ddc8:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 180ddcc:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 180ddd0:	e0bffd17 	ldw	r2,-12(fp)
 180ddd4:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 180ddd8:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 180dddc:	e0bff917 	ldw	r2,-28(fp)
 180dde0:	10800e17 	ldw	r2,56(r2)
 180dde4:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 180dde8:	e0bffa17 	ldw	r2,-24(fp)
 180ddec:	10001326 	beq	r2,zero,180de3c <xQueueReceive+0x8c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 180ddf0:	e17ffe17 	ldw	r5,-8(fp)
 180ddf4:	e13ff917 	ldw	r4,-28(fp)
 180ddf8:	180e7e00 	call	180e7e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 180ddfc:	e0bffa17 	ldw	r2,-24(fp)
 180de00:	10ffffc4 	addi	r3,r2,-1
 180de04:	e0bff917 	ldw	r2,-28(fp)
 180de08:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 180de0c:	e0bff917 	ldw	r2,-28(fp)
 180de10:	10800417 	ldw	r2,16(r2)
 180de14:	10000626 	beq	r2,zero,180de30 <xQueueReceive+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 180de18:	e0bff917 	ldw	r2,-28(fp)
 180de1c:	10800404 	addi	r2,r2,16
 180de20:	1009883a 	mov	r4,r2
 180de24:	18100f00 	call	18100f0 <xTaskRemoveFromEventList>
 180de28:	10000126 	beq	r2,zero,180de30 <xQueueReceive+0x80>
					{
						queueYIELD_IF_USING_PREEMPTION();
 180de2c:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 180de30:	1810e380 	call	1810e38 <vTaskExitCritical>
				return pdPASS;
 180de34:	00800044 	movi	r2,1
 180de38:	00004206 	br	180df44 <xQueueReceive+0x194>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 180de3c:	e0bfff17 	ldw	r2,-4(fp)
 180de40:	1000031e 	bne	r2,zero,180de50 <xQueueReceive+0xa0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 180de44:	1810e380 	call	1810e38 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 180de48:	0005883a 	mov	r2,zero
 180de4c:	00003d06 	br	180df44 <xQueueReceive+0x194>
				}
				else if( xEntryTimeSet == pdFALSE )
 180de50:	e0bff817 	ldw	r2,-32(fp)
 180de54:	1000051e 	bne	r2,zero,180de6c <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 180de58:	e0bffb04 	addi	r2,fp,-20
 180de5c:	1009883a 	mov	r4,r2
 180de60:	18102f80 	call	18102f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 180de64:	00800044 	movi	r2,1
 180de68:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 180de6c:	1810e380 	call	1810e38 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 180de70:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 180de74:	1810de40 	call	1810de4 <vTaskEnterCritical>
 180de78:	e0bff917 	ldw	r2,-28(fp)
 180de7c:	10801103 	ldbu	r2,68(r2)
 180de80:	10803fcc 	andi	r2,r2,255
 180de84:	1080201c 	xori	r2,r2,128
 180de88:	10bfe004 	addi	r2,r2,-128
 180de8c:	10bfffd8 	cmpnei	r2,r2,-1
 180de90:	1000021e 	bne	r2,zero,180de9c <xQueueReceive+0xec>
 180de94:	e0bff917 	ldw	r2,-28(fp)
 180de98:	10001105 	stb	zero,68(r2)
 180de9c:	e0bff917 	ldw	r2,-28(fp)
 180dea0:	10801143 	ldbu	r2,69(r2)
 180dea4:	10803fcc 	andi	r2,r2,255
 180dea8:	1080201c 	xori	r2,r2,128
 180deac:	10bfe004 	addi	r2,r2,-128
 180deb0:	10bfffd8 	cmpnei	r2,r2,-1
 180deb4:	1000021e 	bne	r2,zero,180dec0 <xQueueReceive+0x110>
 180deb8:	e0bff917 	ldw	r2,-28(fp)
 180debc:	10001145 	stb	zero,69(r2)
 180dec0:	1810e380 	call	1810e38 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 180dec4:	e0ffff04 	addi	r3,fp,-4
 180dec8:	e0bffb04 	addi	r2,fp,-20
 180decc:	180b883a 	mov	r5,r3
 180ded0:	1009883a 	mov	r4,r2
 180ded4:	18103340 	call	1810334 <xTaskCheckForTimeOut>
 180ded8:	1000131e 	bne	r2,zero,180df28 <xQueueReceive+0x178>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180dedc:	e13ff917 	ldw	r4,-28(fp)
 180dee0:	180e9700 	call	180e970 <prvIsQueueEmpty>
 180dee4:	10000c26 	beq	r2,zero,180df18 <xQueueReceive+0x168>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 180dee8:	e0bff917 	ldw	r2,-28(fp)
 180deec:	10800904 	addi	r2,r2,36
 180def0:	e0ffff17 	ldw	r3,-4(fp)
 180def4:	180b883a 	mov	r5,r3
 180def8:	1009883a 	mov	r4,r2
 180defc:	180ffd80 	call	180ffd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 180df00:	e13ff917 	ldw	r4,-28(fp)
 180df04:	180e87c0 	call	180e87c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 180df08:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 180df0c:	103fb21e 	bne	r2,zero,180ddd8 <__alt_mem_mem_0+0xff7eddd8>
				{
					portYIELD_WITHIN_API();
 180df10:	003b683a 	trap	0
 180df14:	003fb006 	br	180ddd8 <__alt_mem_mem_0+0xff7eddd8>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 180df18:	e13ff917 	ldw	r4,-28(fp)
 180df1c:	180e87c0 	call	180e87c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 180df20:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 180df24:	003fac06 	br	180ddd8 <__alt_mem_mem_0+0xff7eddd8>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 180df28:	e13ff917 	ldw	r4,-28(fp)
 180df2c:	180e87c0 	call	180e87c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 180df30:	180f8ec0 	call	180f8ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180df34:	e13ff917 	ldw	r4,-28(fp)
 180df38:	180e9700 	call	180e970 <prvIsQueueEmpty>
 180df3c:	103fa626 	beq	r2,zero,180ddd8 <__alt_mem_mem_0+0xff7eddd8>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 180df40:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 180df44:	e037883a 	mov	sp,fp
 180df48:	dfc00117 	ldw	ra,4(sp)
 180df4c:	df000017 	ldw	fp,0(sp)
 180df50:	dec00204 	addi	sp,sp,8
 180df54:	f800283a 	ret

0180df58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 180df58:	defff504 	addi	sp,sp,-44
 180df5c:	dfc00a15 	stw	ra,40(sp)
 180df60:	df000915 	stw	fp,36(sp)
 180df64:	df000904 	addi	fp,sp,36
 180df68:	e13ffe15 	stw	r4,-8(fp)
 180df6c:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 180df70:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 180df74:	e0bffe17 	ldw	r2,-8(fp)
 180df78:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 180df7c:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 180df80:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 180df84:	e0bff917 	ldw	r2,-28(fp)
 180df88:	10800e17 	ldw	r2,56(r2)
 180df8c:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 180df90:	e0bffa17 	ldw	r2,-24(fp)
 180df94:	10001726 	beq	r2,zero,180dff4 <xQueueSemaphoreTake+0x9c>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 180df98:	e0bffa17 	ldw	r2,-24(fp)
 180df9c:	10ffffc4 	addi	r3,r2,-1
 180dfa0:	e0bff917 	ldw	r2,-28(fp)
 180dfa4:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 180dfa8:	e0bff917 	ldw	r2,-28(fp)
 180dfac:	10800017 	ldw	r2,0(r2)
 180dfb0:	1000041e 	bne	r2,zero,180dfc4 <xQueueSemaphoreTake+0x6c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 180dfb4:	1810edc0 	call	1810edc <pvTaskIncrementMutexHeldCount>
 180dfb8:	1007883a 	mov	r3,r2
 180dfbc:	e0bff917 	ldw	r2,-28(fp)
 180dfc0:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 180dfc4:	e0bff917 	ldw	r2,-28(fp)
 180dfc8:	10800417 	ldw	r2,16(r2)
 180dfcc:	10000626 	beq	r2,zero,180dfe8 <xQueueSemaphoreTake+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 180dfd0:	e0bff917 	ldw	r2,-28(fp)
 180dfd4:	10800404 	addi	r2,r2,16
 180dfd8:	1009883a 	mov	r4,r2
 180dfdc:	18100f00 	call	18100f0 <xTaskRemoveFromEventList>
 180dfe0:	10000126 	beq	r2,zero,180dfe8 <xQueueSemaphoreTake+0x90>
					{
						queueYIELD_IF_USING_PREEMPTION();
 180dfe4:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 180dfe8:	1810e380 	call	1810e38 <vTaskExitCritical>
				return pdPASS;
 180dfec:	00800044 	movi	r2,1
 180dff0:	00005806 	br	180e154 <xQueueSemaphoreTake+0x1fc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 180dff4:	e0bfff17 	ldw	r2,-4(fp)
 180dff8:	1000031e 	bne	r2,zero,180e008 <xQueueSemaphoreTake+0xb0>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 180dffc:	1810e380 	call	1810e38 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 180e000:	0005883a 	mov	r2,zero
 180e004:	00005306 	br	180e154 <xQueueSemaphoreTake+0x1fc>
				}
				else if( xEntryTimeSet == pdFALSE )
 180e008:	e0bff717 	ldw	r2,-36(fp)
 180e00c:	1000051e 	bne	r2,zero,180e024 <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 180e010:	e0bffc04 	addi	r2,fp,-16
 180e014:	1009883a 	mov	r4,r2
 180e018:	18102f80 	call	18102f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 180e01c:	00800044 	movi	r2,1
 180e020:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 180e024:	1810e380 	call	1810e38 <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 180e028:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 180e02c:	1810de40 	call	1810de4 <vTaskEnterCritical>
 180e030:	e0bff917 	ldw	r2,-28(fp)
 180e034:	10801103 	ldbu	r2,68(r2)
 180e038:	10803fcc 	andi	r2,r2,255
 180e03c:	1080201c 	xori	r2,r2,128
 180e040:	10bfe004 	addi	r2,r2,-128
 180e044:	10bfffd8 	cmpnei	r2,r2,-1
 180e048:	1000021e 	bne	r2,zero,180e054 <xQueueSemaphoreTake+0xfc>
 180e04c:	e0bff917 	ldw	r2,-28(fp)
 180e050:	10001105 	stb	zero,68(r2)
 180e054:	e0bff917 	ldw	r2,-28(fp)
 180e058:	10801143 	ldbu	r2,69(r2)
 180e05c:	10803fcc 	andi	r2,r2,255
 180e060:	1080201c 	xori	r2,r2,128
 180e064:	10bfe004 	addi	r2,r2,-128
 180e068:	10bfffd8 	cmpnei	r2,r2,-1
 180e06c:	1000021e 	bne	r2,zero,180e078 <xQueueSemaphoreTake+0x120>
 180e070:	e0bff917 	ldw	r2,-28(fp)
 180e074:	10001145 	stb	zero,69(r2)
 180e078:	1810e380 	call	1810e38 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 180e07c:	e0ffff04 	addi	r3,fp,-4
 180e080:	e0bffc04 	addi	r2,fp,-16
 180e084:	180b883a 	mov	r5,r3
 180e088:	1009883a 	mov	r4,r2
 180e08c:	18103340 	call	1810334 <xTaskCheckForTimeOut>
 180e090:	10001d1e 	bne	r2,zero,180e108 <xQueueSemaphoreTake+0x1b0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180e094:	e13ff917 	ldw	r4,-28(fp)
 180e098:	180e9700 	call	180e970 <prvIsQueueEmpty>
 180e09c:	10001626 	beq	r2,zero,180e0f8 <xQueueSemaphoreTake+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 180e0a0:	e0bff917 	ldw	r2,-28(fp)
 180e0a4:	10800017 	ldw	r2,0(r2)
 180e0a8:	1000071e 	bne	r2,zero,180e0c8 <xQueueSemaphoreTake+0x170>
					{
						taskENTER_CRITICAL();
 180e0ac:	1810de40 	call	1810de4 <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 180e0b0:	e0bff917 	ldw	r2,-28(fp)
 180e0b4:	10800217 	ldw	r2,8(r2)
 180e0b8:	1009883a 	mov	r4,r2
 180e0bc:	1810a680 	call	1810a68 <xTaskPriorityInherit>
 180e0c0:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 180e0c4:	1810e380 	call	1810e38 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 180e0c8:	e0bff917 	ldw	r2,-28(fp)
 180e0cc:	10800904 	addi	r2,r2,36
 180e0d0:	e0ffff17 	ldw	r3,-4(fp)
 180e0d4:	180b883a 	mov	r5,r3
 180e0d8:	1009883a 	mov	r4,r2
 180e0dc:	180ffd80 	call	180ffd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 180e0e0:	e13ff917 	ldw	r4,-28(fp)
 180e0e4:	180e87c0 	call	180e87c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 180e0e8:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 180e0ec:	103fa41e 	bne	r2,zero,180df80 <__alt_mem_mem_0+0xff7edf80>
				{
					portYIELD_WITHIN_API();
 180e0f0:	003b683a 	trap	0
 180e0f4:	003fa206 	br	180df80 <__alt_mem_mem_0+0xff7edf80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 180e0f8:	e13ff917 	ldw	r4,-28(fp)
 180e0fc:	180e87c0 	call	180e87c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 180e100:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 180e104:	003f9e06 	br	180df80 <__alt_mem_mem_0+0xff7edf80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 180e108:	e13ff917 	ldw	r4,-28(fp)
 180e10c:	180e87c0 	call	180e87c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 180e110:	180f8ec0 	call	180f8ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180e114:	e13ff917 	ldw	r4,-28(fp)
 180e118:	180e9700 	call	180e970 <prvIsQueueEmpty>
 180e11c:	103f9826 	beq	r2,zero,180df80 <__alt_mem_mem_0+0xff7edf80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 180e120:	e0bff817 	ldw	r2,-32(fp)
 180e124:	10000a26 	beq	r2,zero,180e150 <xQueueSemaphoreTake+0x1f8>
					{
						taskENTER_CRITICAL();
 180e128:	1810de40 	call	1810de4 <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 180e12c:	e13ff917 	ldw	r4,-28(fp)
 180e130:	180e6040 	call	180e604 <prvGetDisinheritPriorityAfterTimeout>
 180e134:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 180e138:	e0bff917 	ldw	r2,-28(fp)
 180e13c:	10800217 	ldw	r2,8(r2)
 180e140:	e17ffb17 	ldw	r5,-20(fp)
 180e144:	1009883a 	mov	r4,r2
 180e148:	1810ca40 	call	1810ca4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 180e14c:	1810e380 	call	1810e38 <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 180e150:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 180e154:	e037883a 	mov	sp,fp
 180e158:	dfc00117 	ldw	ra,4(sp)
 180e15c:	df000017 	ldw	fp,0(sp)
 180e160:	dec00204 	addi	sp,sp,8
 180e164:	f800283a 	ret

0180e168 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 180e168:	defff504 	addi	sp,sp,-44
 180e16c:	dfc00a15 	stw	ra,40(sp)
 180e170:	df000915 	stw	fp,36(sp)
 180e174:	df000904 	addi	fp,sp,36
 180e178:	e13ffd15 	stw	r4,-12(fp)
 180e17c:	e17ffe15 	stw	r5,-8(fp)
 180e180:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 180e184:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 180e188:	e0bffd17 	ldw	r2,-12(fp)
 180e18c:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 180e190:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 180e194:	e0bff817 	ldw	r2,-32(fp)
 180e198:	10800e17 	ldw	r2,56(r2)
 180e19c:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 180e1a0:	e0bff917 	ldw	r2,-28(fp)
 180e1a4:	10001526 	beq	r2,zero,180e1fc <xQueuePeek+0x94>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 180e1a8:	e0bff817 	ldw	r2,-32(fp)
 180e1ac:	10800317 	ldw	r2,12(r2)
 180e1b0:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 180e1b4:	e17ffe17 	ldw	r5,-8(fp)
 180e1b8:	e13ff817 	ldw	r4,-32(fp)
 180e1bc:	180e7e00 	call	180e7e0 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 180e1c0:	e0bff817 	ldw	r2,-32(fp)
 180e1c4:	e0fffa17 	ldw	r3,-24(fp)
 180e1c8:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 180e1cc:	e0bff817 	ldw	r2,-32(fp)
 180e1d0:	10800917 	ldw	r2,36(r2)
 180e1d4:	10000626 	beq	r2,zero,180e1f0 <xQueuePeek+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 180e1d8:	e0bff817 	ldw	r2,-32(fp)
 180e1dc:	10800904 	addi	r2,r2,36
 180e1e0:	1009883a 	mov	r4,r2
 180e1e4:	18100f00 	call	18100f0 <xTaskRemoveFromEventList>
 180e1e8:	10000126 	beq	r2,zero,180e1f0 <xQueuePeek+0x88>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 180e1ec:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 180e1f0:	1810e380 	call	1810e38 <vTaskExitCritical>
				return pdPASS;
 180e1f4:	00800044 	movi	r2,1
 180e1f8:	00004206 	br	180e304 <xQueuePeek+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 180e1fc:	e0bfff17 	ldw	r2,-4(fp)
 180e200:	1000031e 	bne	r2,zero,180e210 <xQueuePeek+0xa8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 180e204:	1810e380 	call	1810e38 <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 180e208:	0005883a 	mov	r2,zero
 180e20c:	00003d06 	br	180e304 <xQueuePeek+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 180e210:	e0bff717 	ldw	r2,-36(fp)
 180e214:	1000051e 	bne	r2,zero,180e22c <xQueuePeek+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 180e218:	e0bffb04 	addi	r2,fp,-20
 180e21c:	1009883a 	mov	r4,r2
 180e220:	18102f80 	call	18102f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 180e224:	00800044 	movi	r2,1
 180e228:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 180e22c:	1810e380 	call	1810e38 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 180e230:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 180e234:	1810de40 	call	1810de4 <vTaskEnterCritical>
 180e238:	e0bff817 	ldw	r2,-32(fp)
 180e23c:	10801103 	ldbu	r2,68(r2)
 180e240:	10803fcc 	andi	r2,r2,255
 180e244:	1080201c 	xori	r2,r2,128
 180e248:	10bfe004 	addi	r2,r2,-128
 180e24c:	10bfffd8 	cmpnei	r2,r2,-1
 180e250:	1000021e 	bne	r2,zero,180e25c <xQueuePeek+0xf4>
 180e254:	e0bff817 	ldw	r2,-32(fp)
 180e258:	10001105 	stb	zero,68(r2)
 180e25c:	e0bff817 	ldw	r2,-32(fp)
 180e260:	10801143 	ldbu	r2,69(r2)
 180e264:	10803fcc 	andi	r2,r2,255
 180e268:	1080201c 	xori	r2,r2,128
 180e26c:	10bfe004 	addi	r2,r2,-128
 180e270:	10bfffd8 	cmpnei	r2,r2,-1
 180e274:	1000021e 	bne	r2,zero,180e280 <xQueuePeek+0x118>
 180e278:	e0bff817 	ldw	r2,-32(fp)
 180e27c:	10001145 	stb	zero,69(r2)
 180e280:	1810e380 	call	1810e38 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 180e284:	e0ffff04 	addi	r3,fp,-4
 180e288:	e0bffb04 	addi	r2,fp,-20
 180e28c:	180b883a 	mov	r5,r3
 180e290:	1009883a 	mov	r4,r2
 180e294:	18103340 	call	1810334 <xTaskCheckForTimeOut>
 180e298:	1000131e 	bne	r2,zero,180e2e8 <xQueuePeek+0x180>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180e29c:	e13ff817 	ldw	r4,-32(fp)
 180e2a0:	180e9700 	call	180e970 <prvIsQueueEmpty>
 180e2a4:	10000c26 	beq	r2,zero,180e2d8 <xQueuePeek+0x170>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 180e2a8:	e0bff817 	ldw	r2,-32(fp)
 180e2ac:	10800904 	addi	r2,r2,36
 180e2b0:	e0ffff17 	ldw	r3,-4(fp)
 180e2b4:	180b883a 	mov	r5,r3
 180e2b8:	1009883a 	mov	r4,r2
 180e2bc:	180ffd80 	call	180ffd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 180e2c0:	e13ff817 	ldw	r4,-32(fp)
 180e2c4:	180e87c0 	call	180e87c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 180e2c8:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 180e2cc:	103fb01e 	bne	r2,zero,180e190 <__alt_mem_mem_0+0xff7ee190>
				{
					portYIELD_WITHIN_API();
 180e2d0:	003b683a 	trap	0
 180e2d4:	003fae06 	br	180e190 <__alt_mem_mem_0+0xff7ee190>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 180e2d8:	e13ff817 	ldw	r4,-32(fp)
 180e2dc:	180e87c0 	call	180e87c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 180e2e0:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 180e2e4:	003faa06 	br	180e190 <__alt_mem_mem_0+0xff7ee190>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 180e2e8:	e13ff817 	ldw	r4,-32(fp)
 180e2ec:	180e87c0 	call	180e87c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 180e2f0:	180f8ec0 	call	180f8ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 180e2f4:	e13ff817 	ldw	r4,-32(fp)
 180e2f8:	180e9700 	call	180e970 <prvIsQueueEmpty>
 180e2fc:	103fa426 	beq	r2,zero,180e190 <__alt_mem_mem_0+0xff7ee190>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 180e300:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 180e304:	e037883a 	mov	sp,fp
 180e308:	dfc00117 	ldw	ra,4(sp)
 180e30c:	df000017 	ldw	fp,0(sp)
 180e310:	dec00204 	addi	sp,sp,8
 180e314:	f800283a 	ret

0180e318 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 180e318:	defff604 	addi	sp,sp,-40
 180e31c:	dfc00915 	stw	ra,36(sp)
 180e320:	df000815 	stw	fp,32(sp)
 180e324:	df000804 	addi	fp,sp,32
 180e328:	e13ffd15 	stw	r4,-12(fp)
 180e32c:	e17ffe15 	stw	r5,-8(fp)
 180e330:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 180e334:	e0bffd17 	ldw	r2,-12(fp)
 180e338:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 180e33c:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 180e340:	e0bff917 	ldw	r2,-28(fp)
 180e344:	10800e17 	ldw	r2,56(r2)
 180e348:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 180e34c:	e0bffb17 	ldw	r2,-20(fp)
 180e350:	10002326 	beq	r2,zero,180e3e0 <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 180e354:	e0bff917 	ldw	r2,-28(fp)
 180e358:	10801103 	ldbu	r2,68(r2)
 180e35c:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 180e360:	e17ffe17 	ldw	r5,-8(fp)
 180e364:	e13ff917 	ldw	r4,-28(fp)
 180e368:	180e7e00 	call	180e7e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 180e36c:	e0bffb17 	ldw	r2,-20(fp)
 180e370:	10ffffc4 	addi	r3,r2,-1
 180e374:	e0bff917 	ldw	r2,-28(fp)
 180e378:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 180e37c:	e0bffc07 	ldb	r2,-16(fp)
 180e380:	10bfffd8 	cmpnei	r2,r2,-1
 180e384:	10000e1e 	bne	r2,zero,180e3c0 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 180e388:	e0bff917 	ldw	r2,-28(fp)
 180e38c:	10800417 	ldw	r2,16(r2)
 180e390:	10001026 	beq	r2,zero,180e3d4 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 180e394:	e0bff917 	ldw	r2,-28(fp)
 180e398:	10800404 	addi	r2,r2,16
 180e39c:	1009883a 	mov	r4,r2
 180e3a0:	18100f00 	call	18100f0 <xTaskRemoveFromEventList>
 180e3a4:	10000b26 	beq	r2,zero,180e3d4 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 180e3a8:	e0bfff17 	ldw	r2,-4(fp)
 180e3ac:	10000926 	beq	r2,zero,180e3d4 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 180e3b0:	e0bfff17 	ldw	r2,-4(fp)
 180e3b4:	00c00044 	movi	r3,1
 180e3b8:	10c00015 	stw	r3,0(r2)
 180e3bc:	00000506 	br	180e3d4 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 180e3c0:	e0bffc03 	ldbu	r2,-16(fp)
 180e3c4:	10800044 	addi	r2,r2,1
 180e3c8:	1007883a 	mov	r3,r2
 180e3cc:	e0bff917 	ldw	r2,-28(fp)
 180e3d0:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 180e3d4:	00800044 	movi	r2,1
 180e3d8:	e0bff815 	stw	r2,-32(fp)
 180e3dc:	00000106 	br	180e3e4 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 180e3e0:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 180e3e4:	e0bff817 	ldw	r2,-32(fp)
}
 180e3e8:	e037883a 	mov	sp,fp
 180e3ec:	dfc00117 	ldw	ra,4(sp)
 180e3f0:	df000017 	ldw	fp,0(sp)
 180e3f4:	dec00204 	addi	sp,sp,8
 180e3f8:	f800283a 	ret

0180e3fc <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 180e3fc:	defff804 	addi	sp,sp,-32
 180e400:	dfc00715 	stw	ra,28(sp)
 180e404:	df000615 	stw	fp,24(sp)
 180e408:	df000604 	addi	fp,sp,24
 180e40c:	e13ffe15 	stw	r4,-8(fp)
 180e410:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 180e414:	e0bffe17 	ldw	r2,-8(fp)
 180e418:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 180e41c:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 180e420:	e0bffb17 	ldw	r2,-20(fp)
 180e424:	10800e17 	ldw	r2,56(r2)
 180e428:	10000c26 	beq	r2,zero,180e45c <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 180e42c:	e0bffb17 	ldw	r2,-20(fp)
 180e430:	10800317 	ldw	r2,12(r2)
 180e434:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 180e438:	e17fff17 	ldw	r5,-4(fp)
 180e43c:	e13ffb17 	ldw	r4,-20(fp)
 180e440:	180e7e00 	call	180e7e0 <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 180e444:	e0bffb17 	ldw	r2,-20(fp)
 180e448:	e0fffd17 	ldw	r3,-12(fp)
 180e44c:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 180e450:	00800044 	movi	r2,1
 180e454:	e0bffa15 	stw	r2,-24(fp)
 180e458:	00000106 	br	180e460 <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 180e45c:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 180e460:	e0bffa17 	ldw	r2,-24(fp)
}
 180e464:	e037883a 	mov	sp,fp
 180e468:	dfc00117 	ldw	ra,4(sp)
 180e46c:	df000017 	ldw	fp,0(sp)
 180e470:	dec00204 	addi	sp,sp,8
 180e474:	f800283a 	ret

0180e478 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 180e478:	defffc04 	addi	sp,sp,-16
 180e47c:	dfc00315 	stw	ra,12(sp)
 180e480:	df000215 	stw	fp,8(sp)
 180e484:	df000204 	addi	fp,sp,8
 180e488:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 180e48c:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 180e490:	e0bfff17 	ldw	r2,-4(fp)
 180e494:	10800e17 	ldw	r2,56(r2)
 180e498:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 180e49c:	1810e380 	call	1810e38 <vTaskExitCritical>

	return uxReturn;
 180e4a0:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 180e4a4:	e037883a 	mov	sp,fp
 180e4a8:	dfc00117 	ldw	ra,4(sp)
 180e4ac:	df000017 	ldw	fp,0(sp)
 180e4b0:	dec00204 	addi	sp,sp,8
 180e4b4:	f800283a 	ret

0180e4b8 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 180e4b8:	defffb04 	addi	sp,sp,-20
 180e4bc:	dfc00415 	stw	ra,16(sp)
 180e4c0:	df000315 	stw	fp,12(sp)
 180e4c4:	df000304 	addi	fp,sp,12
 180e4c8:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 180e4cc:	e0bfff17 	ldw	r2,-4(fp)
 180e4d0:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 180e4d4:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 180e4d8:	e0bffd17 	ldw	r2,-12(fp)
 180e4dc:	10c00f17 	ldw	r3,60(r2)
 180e4e0:	e0bffd17 	ldw	r2,-12(fp)
 180e4e4:	10800e17 	ldw	r2,56(r2)
 180e4e8:	1885c83a 	sub	r2,r3,r2
 180e4ec:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 180e4f0:	1810e380 	call	1810e38 <vTaskExitCritical>

	return uxReturn;
 180e4f4:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 180e4f8:	e037883a 	mov	sp,fp
 180e4fc:	dfc00117 	ldw	ra,4(sp)
 180e500:	df000017 	ldw	fp,0(sp)
 180e504:	dec00204 	addi	sp,sp,8
 180e508:	f800283a 	ret

0180e50c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 180e50c:	defffc04 	addi	sp,sp,-16
 180e510:	df000315 	stw	fp,12(sp)
 180e514:	df000304 	addi	fp,sp,12
 180e518:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 180e51c:	e0bfff17 	ldw	r2,-4(fp)
 180e520:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 180e524:	e0bffd17 	ldw	r2,-12(fp)
 180e528:	10800e17 	ldw	r2,56(r2)
 180e52c:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 180e530:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 180e534:	e037883a 	mov	sp,fp
 180e538:	df000017 	ldw	fp,0(sp)
 180e53c:	dec00104 	addi	sp,sp,4
 180e540:	f800283a 	ret

0180e544 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 180e544:	defffc04 	addi	sp,sp,-16
 180e548:	dfc00315 	stw	ra,12(sp)
 180e54c:	df000215 	stw	fp,8(sp)
 180e550:	df000204 	addi	fp,sp,8
 180e554:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 180e558:	e0bfff17 	ldw	r2,-4(fp)
 180e55c:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 180e560:	e13ffe17 	ldw	r4,-8(fp)
 180e564:	18269780 	call	1826978 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 180e568:	0001883a 	nop
 180e56c:	e037883a 	mov	sp,fp
 180e570:	dfc00117 	ldw	ra,4(sp)
 180e574:	df000017 	ldw	fp,0(sp)
 180e578:	dec00204 	addi	sp,sp,8
 180e57c:	f800283a 	ret

0180e580 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 180e580:	defffe04 	addi	sp,sp,-8
 180e584:	df000115 	stw	fp,4(sp)
 180e588:	df000104 	addi	fp,sp,4
 180e58c:	e13fff15 	stw	r4,-4(fp)
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 180e590:	e0bfff17 	ldw	r2,-4(fp)
 180e594:	10801217 	ldw	r2,72(r2)
	}
 180e598:	e037883a 	mov	sp,fp
 180e59c:	df000017 	ldw	fp,0(sp)
 180e5a0:	dec00104 	addi	sp,sp,4
 180e5a4:	f800283a 	ret

0180e5a8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 180e5a8:	defffd04 	addi	sp,sp,-12
 180e5ac:	df000215 	stw	fp,8(sp)
 180e5b0:	df000204 	addi	fp,sp,8
 180e5b4:	e13ffe15 	stw	r4,-8(fp)
 180e5b8:	e17fff15 	stw	r5,-4(fp)
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 180e5bc:	e0bffe17 	ldw	r2,-8(fp)
 180e5c0:	e0ffff17 	ldw	r3,-4(fp)
 180e5c4:	10c01215 	stw	r3,72(r2)
	}
 180e5c8:	0001883a 	nop
 180e5cc:	e037883a 	mov	sp,fp
 180e5d0:	df000017 	ldw	fp,0(sp)
 180e5d4:	dec00104 	addi	sp,sp,4
 180e5d8:	f800283a 	ret

0180e5dc <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 180e5dc:	defffe04 	addi	sp,sp,-8
 180e5e0:	df000115 	stw	fp,4(sp)
 180e5e4:	df000104 	addi	fp,sp,4
 180e5e8:	e13fff15 	stw	r4,-4(fp)
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 180e5ec:	e0bfff17 	ldw	r2,-4(fp)
 180e5f0:	10801303 	ldbu	r2,76(r2)
	}
 180e5f4:	e037883a 	mov	sp,fp
 180e5f8:	df000017 	ldw	fp,0(sp)
 180e5fc:	dec00104 	addi	sp,sp,4
 180e600:	f800283a 	ret

0180e604 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 180e604:	defffd04 	addi	sp,sp,-12
 180e608:	df000215 	stw	fp,8(sp)
 180e60c:	df000204 	addi	fp,sp,8
 180e610:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 180e614:	e0bfff17 	ldw	r2,-4(fp)
 180e618:	10800917 	ldw	r2,36(r2)
 180e61c:	10000726 	beq	r2,zero,180e63c <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 180e620:	e0bfff17 	ldw	r2,-4(fp)
 180e624:	10800c17 	ldw	r2,48(r2)
 180e628:	10800017 	ldw	r2,0(r2)
 180e62c:	00c00144 	movi	r3,5
 180e630:	1885c83a 	sub	r2,r3,r2
 180e634:	e0bffe15 	stw	r2,-8(fp)
 180e638:	00000106 	br	180e640 <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 180e63c:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 180e640:	e0bffe17 	ldw	r2,-8(fp)
	}
 180e644:	e037883a 	mov	sp,fp
 180e648:	df000017 	ldw	fp,0(sp)
 180e64c:	dec00104 	addi	sp,sp,4
 180e650:	f800283a 	ret

0180e654 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 180e654:	defff904 	addi	sp,sp,-28
 180e658:	dfc00615 	stw	ra,24(sp)
 180e65c:	df000515 	stw	fp,20(sp)
 180e660:	df000504 	addi	fp,sp,20
 180e664:	e13ffd15 	stw	r4,-12(fp)
 180e668:	e17ffe15 	stw	r5,-8(fp)
 180e66c:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 180e670:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 180e674:	e0bffd17 	ldw	r2,-12(fp)
 180e678:	10800e17 	ldw	r2,56(r2)
 180e67c:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 180e680:	e0bffd17 	ldw	r2,-12(fp)
 180e684:	10801017 	ldw	r2,64(r2)
 180e688:	10000b1e 	bne	r2,zero,180e6b8 <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 180e68c:	e0bffd17 	ldw	r2,-12(fp)
 180e690:	10800017 	ldw	r2,0(r2)
 180e694:	1000481e 	bne	r2,zero,180e7b8 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 180e698:	e0bffd17 	ldw	r2,-12(fp)
 180e69c:	10800217 	ldw	r2,8(r2)
 180e6a0:	1009883a 	mov	r4,r2
 180e6a4:	1810ba80 	call	1810ba8 <xTaskPriorityDisinherit>
 180e6a8:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 180e6ac:	e0bffd17 	ldw	r2,-12(fp)
 180e6b0:	10000215 	stw	zero,8(r2)
 180e6b4:	00004006 	br	180e7b8 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 180e6b8:	e0bfff17 	ldw	r2,-4(fp)
 180e6bc:	1000191e 	bne	r2,zero,180e724 <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 180e6c0:	e0bffd17 	ldw	r2,-12(fp)
 180e6c4:	10c00117 	ldw	r3,4(r2)
 180e6c8:	e0bffd17 	ldw	r2,-12(fp)
 180e6cc:	10801017 	ldw	r2,64(r2)
 180e6d0:	100d883a 	mov	r6,r2
 180e6d4:	e17ffe17 	ldw	r5,-8(fp)
 180e6d8:	1809883a 	mov	r4,r3
 180e6dc:	180604c0 	call	180604c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 180e6e0:	e0bffd17 	ldw	r2,-12(fp)
 180e6e4:	10c00117 	ldw	r3,4(r2)
 180e6e8:	e0bffd17 	ldw	r2,-12(fp)
 180e6ec:	10801017 	ldw	r2,64(r2)
 180e6f0:	1887883a 	add	r3,r3,r2
 180e6f4:	e0bffd17 	ldw	r2,-12(fp)
 180e6f8:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 180e6fc:	e0bffd17 	ldw	r2,-12(fp)
 180e700:	10c00117 	ldw	r3,4(r2)
 180e704:	e0bffd17 	ldw	r2,-12(fp)
 180e708:	10800217 	ldw	r2,8(r2)
 180e70c:	18802a36 	bltu	r3,r2,180e7b8 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 180e710:	e0bffd17 	ldw	r2,-12(fp)
 180e714:	10c00017 	ldw	r3,0(r2)
 180e718:	e0bffd17 	ldw	r2,-12(fp)
 180e71c:	10c00115 	stw	r3,4(r2)
 180e720:	00002506 	br	180e7b8 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 180e724:	e0bffd17 	ldw	r2,-12(fp)
 180e728:	10c00317 	ldw	r3,12(r2)
 180e72c:	e0bffd17 	ldw	r2,-12(fp)
 180e730:	10801017 	ldw	r2,64(r2)
 180e734:	100d883a 	mov	r6,r2
 180e738:	e17ffe17 	ldw	r5,-8(fp)
 180e73c:	1809883a 	mov	r4,r3
 180e740:	180604c0 	call	180604c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 180e744:	e0bffd17 	ldw	r2,-12(fp)
 180e748:	10c00317 	ldw	r3,12(r2)
 180e74c:	e0bffd17 	ldw	r2,-12(fp)
 180e750:	10801017 	ldw	r2,64(r2)
 180e754:	0085c83a 	sub	r2,zero,r2
 180e758:	1887883a 	add	r3,r3,r2
 180e75c:	e0bffd17 	ldw	r2,-12(fp)
 180e760:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 180e764:	e0bffd17 	ldw	r2,-12(fp)
 180e768:	10c00317 	ldw	r3,12(r2)
 180e76c:	e0bffd17 	ldw	r2,-12(fp)
 180e770:	10800017 	ldw	r2,0(r2)
 180e774:	1880082e 	bgeu	r3,r2,180e798 <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 180e778:	e0bffd17 	ldw	r2,-12(fp)
 180e77c:	10c00217 	ldw	r3,8(r2)
 180e780:	e0bffd17 	ldw	r2,-12(fp)
 180e784:	10801017 	ldw	r2,64(r2)
 180e788:	0085c83a 	sub	r2,zero,r2
 180e78c:	1887883a 	add	r3,r3,r2
 180e790:	e0bffd17 	ldw	r2,-12(fp)
 180e794:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 180e798:	e0bfff17 	ldw	r2,-4(fp)
 180e79c:	10800098 	cmpnei	r2,r2,2
 180e7a0:	1000051e 	bne	r2,zero,180e7b8 <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 180e7a4:	e0bffc17 	ldw	r2,-16(fp)
 180e7a8:	10000326 	beq	r2,zero,180e7b8 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 180e7ac:	e0bffc17 	ldw	r2,-16(fp)
 180e7b0:	10bfffc4 	addi	r2,r2,-1
 180e7b4:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 180e7b8:	e0bffc17 	ldw	r2,-16(fp)
 180e7bc:	10c00044 	addi	r3,r2,1
 180e7c0:	e0bffd17 	ldw	r2,-12(fp)
 180e7c4:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 180e7c8:	e0bffb17 	ldw	r2,-20(fp)
}
 180e7cc:	e037883a 	mov	sp,fp
 180e7d0:	dfc00117 	ldw	ra,4(sp)
 180e7d4:	df000017 	ldw	fp,0(sp)
 180e7d8:	dec00204 	addi	sp,sp,8
 180e7dc:	f800283a 	ret

0180e7e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 180e7e0:	defffc04 	addi	sp,sp,-16
 180e7e4:	dfc00315 	stw	ra,12(sp)
 180e7e8:	df000215 	stw	fp,8(sp)
 180e7ec:	df000204 	addi	fp,sp,8
 180e7f0:	e13ffe15 	stw	r4,-8(fp)
 180e7f4:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 180e7f8:	e0bffe17 	ldw	r2,-8(fp)
 180e7fc:	10801017 	ldw	r2,64(r2)
 180e800:	10001826 	beq	r2,zero,180e864 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 180e804:	e0bffe17 	ldw	r2,-8(fp)
 180e808:	10c00317 	ldw	r3,12(r2)
 180e80c:	e0bffe17 	ldw	r2,-8(fp)
 180e810:	10801017 	ldw	r2,64(r2)
 180e814:	1887883a 	add	r3,r3,r2
 180e818:	e0bffe17 	ldw	r2,-8(fp)
 180e81c:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 180e820:	e0bffe17 	ldw	r2,-8(fp)
 180e824:	10c00317 	ldw	r3,12(r2)
 180e828:	e0bffe17 	ldw	r2,-8(fp)
 180e82c:	10800217 	ldw	r2,8(r2)
 180e830:	18800436 	bltu	r3,r2,180e844 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 180e834:	e0bffe17 	ldw	r2,-8(fp)
 180e838:	10c00017 	ldw	r3,0(r2)
 180e83c:	e0bffe17 	ldw	r2,-8(fp)
 180e840:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 180e844:	e0bffe17 	ldw	r2,-8(fp)
 180e848:	10c00317 	ldw	r3,12(r2)
 180e84c:	e0bffe17 	ldw	r2,-8(fp)
 180e850:	10801017 	ldw	r2,64(r2)
 180e854:	100d883a 	mov	r6,r2
 180e858:	180b883a 	mov	r5,r3
 180e85c:	e13fff17 	ldw	r4,-4(fp)
 180e860:	180604c0 	call	180604c <memcpy>
	}
}
 180e864:	0001883a 	nop
 180e868:	e037883a 	mov	sp,fp
 180e86c:	dfc00117 	ldw	ra,4(sp)
 180e870:	df000017 	ldw	fp,0(sp)
 180e874:	dec00204 	addi	sp,sp,8
 180e878:	f800283a 	ret

0180e87c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 180e87c:	defffc04 	addi	sp,sp,-16
 180e880:	dfc00315 	stw	ra,12(sp)
 180e884:	df000215 	stw	fp,8(sp)
 180e888:	df000204 	addi	fp,sp,8
 180e88c:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 180e890:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 180e894:	e0bfff17 	ldw	r2,-4(fp)
 180e898:	10801143 	ldbu	r2,69(r2)
 180e89c:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 180e8a0:	00000c06 	br	180e8d4 <prvUnlockQueue+0x58>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 180e8a4:	e0bfff17 	ldw	r2,-4(fp)
 180e8a8:	10800917 	ldw	r2,36(r2)
 180e8ac:	10000c26 	beq	r2,zero,180e8e0 <prvUnlockQueue+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 180e8b0:	e0bfff17 	ldw	r2,-4(fp)
 180e8b4:	10800904 	addi	r2,r2,36
 180e8b8:	1009883a 	mov	r4,r2
 180e8bc:	18100f00 	call	18100f0 <xTaskRemoveFromEventList>
 180e8c0:	10000126 	beq	r2,zero,180e8c8 <prvUnlockQueue+0x4c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 180e8c4:	18104140 	call	1810414 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 180e8c8:	e0bffe03 	ldbu	r2,-8(fp)
 180e8cc:	10bfffc4 	addi	r2,r2,-1
 180e8d0:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 180e8d4:	e0bffe07 	ldb	r2,-8(fp)
 180e8d8:	00bff216 	blt	zero,r2,180e8a4 <__alt_mem_mem_0+0xff7ee8a4>
 180e8dc:	00000106 	br	180e8e4 <prvUnlockQueue+0x68>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 180e8e0:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 180e8e4:	e0bfff17 	ldw	r2,-4(fp)
 180e8e8:	00ffffc4 	movi	r3,-1
 180e8ec:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 180e8f0:	1810e380 	call	1810e38 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 180e8f4:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 180e8f8:	e0bfff17 	ldw	r2,-4(fp)
 180e8fc:	10801103 	ldbu	r2,68(r2)
 180e900:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 180e904:	00000c06 	br	180e938 <prvUnlockQueue+0xbc>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 180e908:	e0bfff17 	ldw	r2,-4(fp)
 180e90c:	10800417 	ldw	r2,16(r2)
 180e910:	10000c26 	beq	r2,zero,180e944 <prvUnlockQueue+0xc8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 180e914:	e0bfff17 	ldw	r2,-4(fp)
 180e918:	10800404 	addi	r2,r2,16
 180e91c:	1009883a 	mov	r4,r2
 180e920:	18100f00 	call	18100f0 <xTaskRemoveFromEventList>
 180e924:	10000126 	beq	r2,zero,180e92c <prvUnlockQueue+0xb0>
				{
					vTaskMissedYield();
 180e928:	18104140 	call	1810414 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 180e92c:	e0bffe43 	ldbu	r2,-7(fp)
 180e930:	10bfffc4 	addi	r2,r2,-1
 180e934:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 180e938:	e0bffe47 	ldb	r2,-7(fp)
 180e93c:	00bff216 	blt	zero,r2,180e908 <__alt_mem_mem_0+0xff7ee908>
 180e940:	00000106 	br	180e948 <prvUnlockQueue+0xcc>

				--cRxLock;
			}
			else
			{
				break;
 180e944:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 180e948:	e0bfff17 	ldw	r2,-4(fp)
 180e94c:	00ffffc4 	movi	r3,-1
 180e950:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 180e954:	1810e380 	call	1810e38 <vTaskExitCritical>
}
 180e958:	0001883a 	nop
 180e95c:	e037883a 	mov	sp,fp
 180e960:	dfc00117 	ldw	ra,4(sp)
 180e964:	df000017 	ldw	fp,0(sp)
 180e968:	dec00204 	addi	sp,sp,8
 180e96c:	f800283a 	ret

0180e970 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 180e970:	defffc04 	addi	sp,sp,-16
 180e974:	dfc00315 	stw	ra,12(sp)
 180e978:	df000215 	stw	fp,8(sp)
 180e97c:	df000204 	addi	fp,sp,8
 180e980:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 180e984:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 180e988:	e0bfff17 	ldw	r2,-4(fp)
 180e98c:	10800e17 	ldw	r2,56(r2)
 180e990:	1000031e 	bne	r2,zero,180e9a0 <prvIsQueueEmpty+0x30>
		{
			xReturn = pdTRUE;
 180e994:	00800044 	movi	r2,1
 180e998:	e0bffe15 	stw	r2,-8(fp)
 180e99c:	00000106 	br	180e9a4 <prvIsQueueEmpty+0x34>
		}
		else
		{
			xReturn = pdFALSE;
 180e9a0:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 180e9a4:	1810e380 	call	1810e38 <vTaskExitCritical>

	return xReturn;
 180e9a8:	e0bffe17 	ldw	r2,-8(fp)
}
 180e9ac:	e037883a 	mov	sp,fp
 180e9b0:	dfc00117 	ldw	ra,4(sp)
 180e9b4:	df000017 	ldw	fp,0(sp)
 180e9b8:	dec00204 	addi	sp,sp,8
 180e9bc:	f800283a 	ret

0180e9c0 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 180e9c0:	defffc04 	addi	sp,sp,-16
 180e9c4:	df000315 	stw	fp,12(sp)
 180e9c8:	df000304 	addi	fp,sp,12
 180e9cc:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 180e9d0:	e0bfff17 	ldw	r2,-4(fp)
 180e9d4:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 180e9d8:	e0bffe17 	ldw	r2,-8(fp)
 180e9dc:	10800e17 	ldw	r2,56(r2)
 180e9e0:	1000031e 	bne	r2,zero,180e9f0 <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 180e9e4:	00800044 	movi	r2,1
 180e9e8:	e0bffd15 	stw	r2,-12(fp)
 180e9ec:	00000106 	br	180e9f4 <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 180e9f0:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 180e9f4:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 180e9f8:	e037883a 	mov	sp,fp
 180e9fc:	df000017 	ldw	fp,0(sp)
 180ea00:	dec00104 	addi	sp,sp,4
 180ea04:	f800283a 	ret

0180ea08 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 180ea08:	defffc04 	addi	sp,sp,-16
 180ea0c:	dfc00315 	stw	ra,12(sp)
 180ea10:	df000215 	stw	fp,8(sp)
 180ea14:	df000204 	addi	fp,sp,8
 180ea18:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 180ea1c:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 180ea20:	e0bfff17 	ldw	r2,-4(fp)
 180ea24:	10c00e17 	ldw	r3,56(r2)
 180ea28:	e0bfff17 	ldw	r2,-4(fp)
 180ea2c:	10800f17 	ldw	r2,60(r2)
 180ea30:	1880031e 	bne	r3,r2,180ea40 <prvIsQueueFull+0x38>
		{
			xReturn = pdTRUE;
 180ea34:	00800044 	movi	r2,1
 180ea38:	e0bffe15 	stw	r2,-8(fp)
 180ea3c:	00000106 	br	180ea44 <prvIsQueueFull+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 180ea40:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 180ea44:	1810e380 	call	1810e38 <vTaskExitCritical>

	return xReturn;
 180ea48:	e0bffe17 	ldw	r2,-8(fp)
}
 180ea4c:	e037883a 	mov	sp,fp
 180ea50:	dfc00117 	ldw	ra,4(sp)
 180ea54:	df000017 	ldw	fp,0(sp)
 180ea58:	dec00204 	addi	sp,sp,8
 180ea5c:	f800283a 	ret

0180ea60 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 180ea60:	defffc04 	addi	sp,sp,-16
 180ea64:	df000315 	stw	fp,12(sp)
 180ea68:	df000304 	addi	fp,sp,12
 180ea6c:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 180ea70:	e0bfff17 	ldw	r2,-4(fp)
 180ea74:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 180ea78:	e0bffe17 	ldw	r2,-8(fp)
 180ea7c:	10c00e17 	ldw	r3,56(r2)
 180ea80:	e0bffe17 	ldw	r2,-8(fp)
 180ea84:	10800f17 	ldw	r2,60(r2)
 180ea88:	1880031e 	bne	r3,r2,180ea98 <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 180ea8c:	00800044 	movi	r2,1
 180ea90:	e0bffd15 	stw	r2,-12(fp)
 180ea94:	00000106 	br	180ea9c <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 180ea98:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 180ea9c:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 180eaa0:	e037883a 	mov	sp,fp
 180eaa4:	df000017 	ldw	fp,0(sp)
 180eaa8:	dec00104 	addi	sp,sp,4
 180eaac:	f800283a 	ret

0180eab0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 180eab0:	defffa04 	addi	sp,sp,-24
 180eab4:	dfc00515 	stw	ra,20(sp)
 180eab8:	df000415 	stw	fp,16(sp)
 180eabc:	df000404 	addi	fp,sp,16
 180eac0:	e13ffd15 	stw	r4,-12(fp)
 180eac4:	e17ffe15 	stw	r5,-8(fp)
 180eac8:	e1bfff15 	stw	r6,-4(fp)
	Queue_t * const pxQueue = xQueue;
 180eacc:	e0bffd17 	ldw	r2,-12(fp)
 180ead0:	e0bffc15 	stw	r2,-16(fp)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 180ead4:	1810de40 	call	1810de4 <vTaskEnterCritical>
 180ead8:	e0bffc17 	ldw	r2,-16(fp)
 180eadc:	10801103 	ldbu	r2,68(r2)
 180eae0:	10803fcc 	andi	r2,r2,255
 180eae4:	1080201c 	xori	r2,r2,128
 180eae8:	10bfe004 	addi	r2,r2,-128
 180eaec:	10bfffd8 	cmpnei	r2,r2,-1
 180eaf0:	1000021e 	bne	r2,zero,180eafc <vQueueWaitForMessageRestricted+0x4c>
 180eaf4:	e0bffc17 	ldw	r2,-16(fp)
 180eaf8:	10001105 	stb	zero,68(r2)
 180eafc:	e0bffc17 	ldw	r2,-16(fp)
 180eb00:	10801143 	ldbu	r2,69(r2)
 180eb04:	10803fcc 	andi	r2,r2,255
 180eb08:	1080201c 	xori	r2,r2,128
 180eb0c:	10bfe004 	addi	r2,r2,-128
 180eb10:	10bfffd8 	cmpnei	r2,r2,-1
 180eb14:	1000021e 	bne	r2,zero,180eb20 <vQueueWaitForMessageRestricted+0x70>
 180eb18:	e0bffc17 	ldw	r2,-16(fp)
 180eb1c:	10001145 	stb	zero,69(r2)
 180eb20:	1810e380 	call	1810e38 <vTaskExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 180eb24:	e0bffc17 	ldw	r2,-16(fp)
 180eb28:	10800e17 	ldw	r2,56(r2)
 180eb2c:	1000061e 	bne	r2,zero,180eb48 <vQueueWaitForMessageRestricted+0x98>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 180eb30:	e0bffc17 	ldw	r2,-16(fp)
 180eb34:	10800904 	addi	r2,r2,36
 180eb38:	e1bfff17 	ldw	r6,-4(fp)
 180eb3c:	e17ffe17 	ldw	r5,-8(fp)
 180eb40:	1009883a 	mov	r4,r2
 180eb44:	181008c0 	call	181008c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 180eb48:	e13ffc17 	ldw	r4,-16(fp)
 180eb4c:	180e87c0 	call	180e87c <prvUnlockQueue>
	}
 180eb50:	0001883a 	nop
 180eb54:	e037883a 	mov	sp,fp
 180eb58:	dfc00117 	ldw	ra,4(sp)
 180eb5c:	df000017 	ldw	fp,0(sp)
 180eb60:	dec00204 	addi	sp,sp,8
 180eb64:	f800283a 	ret

0180eb68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 180eb68:	defff304 	addi	sp,sp,-52
 180eb6c:	dfc00c15 	stw	ra,48(sp)
 180eb70:	df000b15 	stw	fp,44(sp)
 180eb74:	df000b04 	addi	fp,sp,44
 180eb78:	e13ffc15 	stw	r4,-16(fp)
 180eb7c:	e17ffd15 	stw	r5,-12(fp)
 180eb80:	e1bffe15 	stw	r6,-8(fp)
 180eb84:	e1ffff15 	stw	r7,-4(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 180eb88:	e0bffe17 	ldw	r2,-8(fp)
 180eb8c:	1085883a 	add	r2,r2,r2
 180eb90:	1085883a 	add	r2,r2,r2
 180eb94:	1009883a 	mov	r4,r2
 180eb98:	182692c0 	call	182692c <pvPortMalloc>
 180eb9c:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 180eba0:	e0bffb17 	ldw	r2,-20(fp)
 180eba4:	10000c26 	beq	r2,zero,180ebd8 <xTaskCreate+0x70>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 180eba8:	01001e04 	movi	r4,120
 180ebac:	182692c0 	call	182692c <pvPortMalloc>
 180ebb0:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 180ebb4:	e0bff917 	ldw	r2,-28(fp)
 180ebb8:	10000426 	beq	r2,zero,180ebcc <xTaskCreate+0x64>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 180ebbc:	e0bff917 	ldw	r2,-28(fp)
 180ebc0:	e0fffb17 	ldw	r3,-20(fp)
 180ebc4:	10c00c15 	stw	r3,48(r2)
 180ebc8:	00000406 	br	180ebdc <xTaskCreate+0x74>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 180ebcc:	e13ffb17 	ldw	r4,-20(fp)
 180ebd0:	18269780 	call	1826978 <vPortFree>
 180ebd4:	00000106 	br	180ebdc <xTaskCreate+0x74>
				}
			}
			else
			{
				pxNewTCB = NULL;
 180ebd8:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 180ebdc:	e0bff917 	ldw	r2,-28(fp)
 180ebe0:	10001126 	beq	r2,zero,180ec28 <xTaskCreate+0xc0>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 180ebe4:	d8000315 	stw	zero,12(sp)
 180ebe8:	e0bff917 	ldw	r2,-28(fp)
 180ebec:	d8800215 	stw	r2,8(sp)
 180ebf0:	e0800317 	ldw	r2,12(fp)
 180ebf4:	d8800115 	stw	r2,4(sp)
 180ebf8:	e0800217 	ldw	r2,8(fp)
 180ebfc:	d8800015 	stw	r2,0(sp)
 180ec00:	e1ffff17 	ldw	r7,-4(fp)
 180ec04:	e1bffe17 	ldw	r6,-8(fp)
 180ec08:	e17ffd17 	ldw	r5,-12(fp)
 180ec0c:	e13ffc17 	ldw	r4,-16(fp)
 180ec10:	180ec480 	call	180ec48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 180ec14:	e13ff917 	ldw	r4,-28(fp)
 180ec18:	180ee2c0 	call	180ee2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 180ec1c:	00800044 	movi	r2,1
 180ec20:	e0bffa15 	stw	r2,-24(fp)
 180ec24:	00000206 	br	180ec30 <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 180ec28:	00bfffc4 	movi	r2,-1
 180ec2c:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 180ec30:	e0bffa17 	ldw	r2,-24(fp)
	}
 180ec34:	e037883a 	mov	sp,fp
 180ec38:	dfc00117 	ldw	ra,4(sp)
 180ec3c:	df000017 	ldw	fp,0(sp)
 180ec40:	dec00204 	addi	sp,sp,8
 180ec44:	f800283a 	ret

0180ec48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 180ec48:	defff804 	addi	sp,sp,-32
 180ec4c:	dfc00715 	stw	ra,28(sp)
 180ec50:	df000615 	stw	fp,24(sp)
 180ec54:	df000604 	addi	fp,sp,24
 180ec58:	e13ffc15 	stw	r4,-16(fp)
 180ec5c:	e17ffd15 	stw	r5,-12(fp)
 180ec60:	e1bffe15 	stw	r6,-8(fp)
 180ec64:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 180ec68:	e0800417 	ldw	r2,16(fp)
 180ec6c:	10c00c17 	ldw	r3,48(r2)
 180ec70:	e0bffe17 	ldw	r2,-8(fp)
 180ec74:	1085883a 	add	r2,r2,r2
 180ec78:	1085883a 	add	r2,r2,r2
 180ec7c:	100d883a 	mov	r6,r2
 180ec80:	01402944 	movi	r5,165
 180ec84:	1809883a 	mov	r4,r3
 180ec88:	18061940 	call	1806194 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 180ec8c:	e0800417 	ldw	r2,16(fp)
 180ec90:	10c00c17 	ldw	r3,48(r2)
 180ec94:	e13ffe17 	ldw	r4,-8(fp)
 180ec98:	00900034 	movhi	r2,16384
 180ec9c:	10bfffc4 	addi	r2,r2,-1
 180eca0:	2085883a 	add	r2,r4,r2
 180eca4:	1085883a 	add	r2,r2,r2
 180eca8:	1085883a 	add	r2,r2,r2
 180ecac:	1885883a 	add	r2,r3,r2
 180ecb0:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 180ecb4:	e0fffb17 	ldw	r3,-20(fp)
 180ecb8:	00bfff04 	movi	r2,-4
 180ecbc:	1884703a 	and	r2,r3,r2
 180ecc0:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 180ecc4:	e0bffd17 	ldw	r2,-12(fp)
 180ecc8:	10001e26 	beq	r2,zero,180ed44 <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 180eccc:	e03ffa15 	stw	zero,-24(fp)
 180ecd0:	00001406 	br	180ed24 <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 180ecd4:	e0fffd17 	ldw	r3,-12(fp)
 180ecd8:	e0bffa17 	ldw	r2,-24(fp)
 180ecdc:	1885883a 	add	r2,r3,r2
 180ece0:	10c00003 	ldbu	r3,0(r2)
 180ece4:	e1000417 	ldw	r4,16(fp)
 180ece8:	e0bffa17 	ldw	r2,-24(fp)
 180ecec:	2085883a 	add	r2,r4,r2
 180ecf0:	10800d04 	addi	r2,r2,52
 180ecf4:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 180ecf8:	e0fffd17 	ldw	r3,-12(fp)
 180ecfc:	e0bffa17 	ldw	r2,-24(fp)
 180ed00:	1885883a 	add	r2,r3,r2
 180ed04:	10800003 	ldbu	r2,0(r2)
 180ed08:	10803fcc 	andi	r2,r2,255
 180ed0c:	1080201c 	xori	r2,r2,128
 180ed10:	10bfe004 	addi	r2,r2,-128
 180ed14:	10000726 	beq	r2,zero,180ed34 <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 180ed18:	e0bffa17 	ldw	r2,-24(fp)
 180ed1c:	10800044 	addi	r2,r2,1
 180ed20:	e0bffa15 	stw	r2,-24(fp)
 180ed24:	e0bffa17 	ldw	r2,-24(fp)
 180ed28:	10800a30 	cmpltui	r2,r2,40
 180ed2c:	103fe91e 	bne	r2,zero,180ecd4 <__alt_mem_mem_0+0xff7eecd4>
 180ed30:	00000106 	br	180ed38 <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 180ed34:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 180ed38:	e0800417 	ldw	r2,16(fp)
 180ed3c:	100016c5 	stb	zero,91(r2)
 180ed40:	00000206 	br	180ed4c <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 180ed44:	e0800417 	ldw	r2,16(fp)
 180ed48:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 180ed4c:	e0800217 	ldw	r2,8(fp)
 180ed50:	10800170 	cmpltui	r2,r2,5
 180ed54:	1000021e 	bne	r2,zero,180ed60 <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 180ed58:	00800104 	movi	r2,4
 180ed5c:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 180ed60:	e0800417 	ldw	r2,16(fp)
 180ed64:	e0c00217 	ldw	r3,8(fp)
 180ed68:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 180ed6c:	e0800417 	ldw	r2,16(fp)
 180ed70:	e0c00217 	ldw	r3,8(fp)
 180ed74:	10c01a15 	stw	r3,104(r2)
		pxNewTCB->uxMutexesHeld = 0;
 180ed78:	e0800417 	ldw	r2,16(fp)
 180ed7c:	10001b15 	stw	zero,108(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 180ed80:	e0800417 	ldw	r2,16(fp)
 180ed84:	10800104 	addi	r2,r2,4
 180ed88:	1009883a 	mov	r4,r2
 180ed8c:	1826a240 	call	1826a24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 180ed90:	e0800417 	ldw	r2,16(fp)
 180ed94:	10800604 	addi	r2,r2,24
 180ed98:	1009883a 	mov	r4,r2
 180ed9c:	1826a240 	call	1826a24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 180eda0:	e0800417 	ldw	r2,16(fp)
 180eda4:	e0c00417 	ldw	r3,16(fp)
 180eda8:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 180edac:	00c00144 	movi	r3,5
 180edb0:	e0800217 	ldw	r2,8(fp)
 180edb4:	1887c83a 	sub	r3,r3,r2
 180edb8:	e0800417 	ldw	r2,16(fp)
 180edbc:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 180edc0:	e0800417 	ldw	r2,16(fp)
 180edc4:	e0c00417 	ldw	r3,16(fp)
 180edc8:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 180edcc:	e0800417 	ldw	r2,16(fp)
 180edd0:	10001715 	stw	zero,92(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 180edd4:	e0800417 	ldw	r2,16(fp)
 180edd8:	10001c15 	stw	zero,112(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 180eddc:	e0800417 	ldw	r2,16(fp)
 180ede0:	10001d05 	stb	zero,116(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 180ede4:	e1bfff17 	ldw	r6,-4(fp)
 180ede8:	e17ffc17 	ldw	r5,-16(fp)
 180edec:	e13ffb17 	ldw	r4,-20(fp)
 180edf0:	1826d040 	call	1826d04 <pxPortInitialiseStack>
 180edf4:	1007883a 	mov	r3,r2
 180edf8:	e0800417 	ldw	r2,16(fp)
 180edfc:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 180ee00:	e0800317 	ldw	r2,12(fp)
 180ee04:	10000326 	beq	r2,zero,180ee14 <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 180ee08:	e0800317 	ldw	r2,12(fp)
 180ee0c:	e0c00417 	ldw	r3,16(fp)
 180ee10:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 180ee14:	0001883a 	nop
 180ee18:	e037883a 	mov	sp,fp
 180ee1c:	dfc00117 	ldw	ra,4(sp)
 180ee20:	df000017 	ldw	fp,0(sp)
 180ee24:	dec00204 	addi	sp,sp,8
 180ee28:	f800283a 	ret

0180ee2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 180ee2c:	defffd04 	addi	sp,sp,-12
 180ee30:	dfc00215 	stw	ra,8(sp)
 180ee34:	df000115 	stw	fp,4(sp)
 180ee38:	df000104 	addi	fp,sp,4
 180ee3c:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 180ee40:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 180ee44:	d0a7d717 	ldw	r2,-24740(gp)
 180ee48:	10800044 	addi	r2,r2,1
 180ee4c:	d0a7d715 	stw	r2,-24740(gp)
		if( pxCurrentTCB == NULL )
 180ee50:	d0a7d317 	ldw	r2,-24756(gp)
 180ee54:	1000071e 	bne	r2,zero,180ee74 <prvAddNewTaskToReadyList+0x48>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 180ee58:	e0bfff17 	ldw	r2,-4(fp)
 180ee5c:	d0a7d315 	stw	r2,-24756(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 180ee60:	d0a7d717 	ldw	r2,-24740(gp)
 180ee64:	10800058 	cmpnei	r2,r2,1
 180ee68:	10000b1e 	bne	r2,zero,180ee98 <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 180ee6c:	18104e40 	call	18104e4 <prvInitialiseTaskLists>
 180ee70:	00000906 	br	180ee98 <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 180ee74:	d0a7da17 	ldw	r2,-24728(gp)
 180ee78:	1000071e 	bne	r2,zero,180ee98 <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 180ee7c:	d0a7d317 	ldw	r2,-24756(gp)
 180ee80:	10800b17 	ldw	r2,44(r2)
 180ee84:	e0ffff17 	ldw	r3,-4(fp)
 180ee88:	18c00b17 	ldw	r3,44(r3)
 180ee8c:	18800236 	bltu	r3,r2,180ee98 <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
 180ee90:	e0bfff17 	ldw	r2,-4(fp)
 180ee94:	d0a7d315 	stw	r2,-24756(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 180ee98:	d0a7de17 	ldw	r2,-24712(gp)
 180ee9c:	10800044 	addi	r2,r2,1
 180eea0:	d0a7de15 	stw	r2,-24712(gp)

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 180eea4:	d0e7de17 	ldw	r3,-24712(gp)
 180eea8:	e0bfff17 	ldw	r2,-4(fp)
 180eeac:	10c01815 	stw	r3,96(r2)
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 180eeb0:	e0bfff17 	ldw	r2,-4(fp)
 180eeb4:	10800b17 	ldw	r2,44(r2)
 180eeb8:	d0e7d917 	ldw	r3,-24732(gp)
 180eebc:	1880032e 	bgeu	r3,r2,180eecc <prvAddNewTaskToReadyList+0xa0>
 180eec0:	e0bfff17 	ldw	r2,-4(fp)
 180eec4:	10800b17 	ldw	r2,44(r2)
 180eec8:	d0a7d915 	stw	r2,-24732(gp)
 180eecc:	e0bfff17 	ldw	r2,-4(fp)
 180eed0:	10800b17 	ldw	r2,44(r2)
 180eed4:	10c00524 	muli	r3,r2,20
 180eed8:	00806134 	movhi	r2,388
 180eedc:	109d1c04 	addi	r2,r2,29808
 180eee0:	1887883a 	add	r3,r3,r2
 180eee4:	e0bfff17 	ldw	r2,-4(fp)
 180eee8:	10800104 	addi	r2,r2,4
 180eeec:	100b883a 	mov	r5,r2
 180eef0:	1809883a 	mov	r4,r3
 180eef4:	1826a500 	call	1826a50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 180eef8:	1810e380 	call	1810e38 <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 180eefc:	d0a7da17 	ldw	r2,-24728(gp)
 180ef00:	10000626 	beq	r2,zero,180ef1c <prvAddNewTaskToReadyList+0xf0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 180ef04:	d0a7d317 	ldw	r2,-24756(gp)
 180ef08:	10c00b17 	ldw	r3,44(r2)
 180ef0c:	e0bfff17 	ldw	r2,-4(fp)
 180ef10:	10800b17 	ldw	r2,44(r2)
 180ef14:	1880012e 	bgeu	r3,r2,180ef1c <prvAddNewTaskToReadyList+0xf0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 180ef18:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 180ef1c:	0001883a 	nop
 180ef20:	e037883a 	mov	sp,fp
 180ef24:	dfc00117 	ldw	ra,4(sp)
 180ef28:	df000017 	ldw	fp,0(sp)
 180ef2c:	dec00204 	addi	sp,sp,8
 180ef30:	f800283a 	ret

0180ef34 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 180ef34:	defffc04 	addi	sp,sp,-16
 180ef38:	dfc00315 	stw	ra,12(sp)
 180ef3c:	df000215 	stw	fp,8(sp)
 180ef40:	df000204 	addi	fp,sp,8
 180ef44:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 180ef48:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 180ef4c:	e0bfff17 	ldw	r2,-4(fp)
 180ef50:	1000021e 	bne	r2,zero,180ef5c <vTaskDelete+0x28>
 180ef54:	d0a7d317 	ldw	r2,-24756(gp)
 180ef58:	00000106 	br	180ef60 <vTaskDelete+0x2c>
 180ef5c:	e0bfff17 	ldw	r2,-4(fp)
 180ef60:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 180ef64:	e0bffe17 	ldw	r2,-8(fp)
 180ef68:	10800104 	addi	r2,r2,4
 180ef6c:	1009883a 	mov	r4,r2
 180ef70:	1826bb40 	call	1826bb4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 180ef74:	e0bffe17 	ldw	r2,-8(fp)
 180ef78:	10800a17 	ldw	r2,40(r2)
 180ef7c:	10000426 	beq	r2,zero,180ef90 <vTaskDelete+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 180ef80:	e0bffe17 	ldw	r2,-8(fp)
 180ef84:	10800604 	addi	r2,r2,24
 180ef88:	1009883a 	mov	r4,r2
 180ef8c:	1826bb40 	call	1826bb4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 180ef90:	d0a7de17 	ldw	r2,-24712(gp)
 180ef94:	10800044 	addi	r2,r2,1
 180ef98:	d0a7de15 	stw	r2,-24712(gp)

			if( pxTCB == pxCurrentTCB )
 180ef9c:	d0a7d317 	ldw	r2,-24756(gp)
 180efa0:	e0fffe17 	ldw	r3,-8(fp)
 180efa4:	18800a1e 	bne	r3,r2,180efd0 <vTaskDelete+0x9c>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 180efa8:	e0bffe17 	ldw	r2,-8(fp)
 180efac:	10800104 	addi	r2,r2,4
 180efb0:	100b883a 	mov	r5,r2
 180efb4:	01006134 	movhi	r4,388
 180efb8:	211d4404 	addi	r4,r4,29968
 180efbc:	1826a500 	call	1826a50 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 180efc0:	d0a7d617 	ldw	r2,-24744(gp)
 180efc4:	10800044 	addi	r2,r2,1
 180efc8:	d0a7d615 	stw	r2,-24744(gp)
 180efcc:	00000606 	br	180efe8 <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 180efd0:	d0a7d717 	ldw	r2,-24740(gp)
 180efd4:	10bfffc4 	addi	r2,r2,-1
 180efd8:	d0a7d715 	stw	r2,-24740(gp)
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 180efdc:	e13ffe17 	ldw	r4,-8(fp)
 180efe0:	181095c0 	call	181095c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 180efe4:	18109a00 	call	18109a0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 180efe8:	1810e380 	call	1810e38 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 180efec:	d0a7da17 	ldw	r2,-24728(gp)
 180eff0:	10000426 	beq	r2,zero,180f004 <vTaskDelete+0xd0>
		{
			if( pxTCB == pxCurrentTCB )
 180eff4:	d0a7d317 	ldw	r2,-24756(gp)
 180eff8:	e0fffe17 	ldw	r3,-8(fp)
 180effc:	1880011e 	bne	r3,r2,180f004 <vTaskDelete+0xd0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 180f000:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 180f004:	0001883a 	nop
 180f008:	e037883a 	mov	sp,fp
 180f00c:	dfc00117 	ldw	ra,4(sp)
 180f010:	df000017 	ldw	fp,0(sp)
 180f014:	dec00204 	addi	sp,sp,8
 180f018:	f800283a 	ret

0180f01c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 180f01c:	defff804 	addi	sp,sp,-32
 180f020:	dfc00715 	stw	ra,28(sp)
 180f024:	df000615 	stw	fp,24(sp)
 180f028:	df000604 	addi	fp,sp,24
 180f02c:	e13ffe15 	stw	r4,-8(fp)
 180f030:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 180f034:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 180f038:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 180f03c:	d0a7d817 	ldw	r2,-24736(gp)
 180f040:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 180f044:	e0bffe17 	ldw	r2,-8(fp)
 180f048:	10c00017 	ldw	r3,0(r2)
 180f04c:	e0bfff17 	ldw	r2,-4(fp)
 180f050:	1885883a 	add	r2,r3,r2
 180f054:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 180f058:	e0bffe17 	ldw	r2,-8(fp)
 180f05c:	10800017 	ldw	r2,0(r2)
 180f060:	e0fffb17 	ldw	r3,-20(fp)
 180f064:	18800a2e 	bgeu	r3,r2,180f090 <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 180f068:	e0bffe17 	ldw	r2,-8(fp)
 180f06c:	10800017 	ldw	r2,0(r2)
 180f070:	e0fffc17 	ldw	r3,-16(fp)
 180f074:	18800f2e 	bgeu	r3,r2,180f0b4 <vTaskDelayUntil+0x98>
 180f078:	e0bffc17 	ldw	r2,-16(fp)
 180f07c:	e0fffb17 	ldw	r3,-20(fp)
 180f080:	18800c2e 	bgeu	r3,r2,180f0b4 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 180f084:	00800044 	movi	r2,1
 180f088:	e0bffa15 	stw	r2,-24(fp)
 180f08c:	00000906 	br	180f0b4 <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 180f090:	e0bffe17 	ldw	r2,-8(fp)
 180f094:	10800017 	ldw	r2,0(r2)
 180f098:	e0fffc17 	ldw	r3,-16(fp)
 180f09c:	18800336 	bltu	r3,r2,180f0ac <vTaskDelayUntil+0x90>
 180f0a0:	e0bffc17 	ldw	r2,-16(fp)
 180f0a4:	e0fffb17 	ldw	r3,-20(fp)
 180f0a8:	1880022e 	bgeu	r3,r2,180f0b4 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 180f0ac:	00800044 	movi	r2,1
 180f0b0:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 180f0b4:	e0bffe17 	ldw	r2,-8(fp)
 180f0b8:	e0fffc17 	ldw	r3,-16(fp)
 180f0bc:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 180f0c0:	e0bffa17 	ldw	r2,-24(fp)
 180f0c4:	10000626 	beq	r2,zero,180f0e0 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 180f0c8:	e0fffc17 	ldw	r3,-16(fp)
 180f0cc:	e0bffb17 	ldw	r2,-20(fp)
 180f0d0:	1885c83a 	sub	r2,r3,r2
 180f0d4:	000b883a 	mov	r5,zero
 180f0d8:	1009883a 	mov	r4,r2
 180f0dc:	18116580 	call	1811658 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 180f0e0:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 180f0e4:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 180f0e8:	e0bffd17 	ldw	r2,-12(fp)
 180f0ec:	1000011e 	bne	r2,zero,180f0f4 <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 180f0f0:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f0f4:	0001883a 	nop
 180f0f8:	e037883a 	mov	sp,fp
 180f0fc:	dfc00117 	ldw	ra,4(sp)
 180f100:	df000017 	ldw	fp,0(sp)
 180f104:	dec00204 	addi	sp,sp,8
 180f108:	f800283a 	ret

0180f10c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 180f10c:	defffc04 	addi	sp,sp,-16
 180f110:	dfc00315 	stw	ra,12(sp)
 180f114:	df000215 	stw	fp,8(sp)
 180f118:	df000204 	addi	fp,sp,8
 180f11c:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 180f120:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 180f124:	e0bfff17 	ldw	r2,-4(fp)
 180f128:	10000626 	beq	r2,zero,180f144 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 180f12c:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 180f130:	000b883a 	mov	r5,zero
 180f134:	e13fff17 	ldw	r4,-4(fp)
 180f138:	18116580 	call	1811658 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 180f13c:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 180f140:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 180f144:	e0bffe17 	ldw	r2,-8(fp)
 180f148:	1000011e 	bne	r2,zero,180f150 <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 180f14c:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f150:	0001883a 	nop
 180f154:	e037883a 	mov	sp,fp
 180f158:	dfc00117 	ldw	ra,4(sp)
 180f15c:	df000017 	ldw	fp,0(sp)
 180f160:	dec00204 	addi	sp,sp,8
 180f164:	f800283a 	ret

0180f168 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 180f168:	defff804 	addi	sp,sp,-32
 180f16c:	dfc00715 	stw	ra,28(sp)
 180f170:	df000615 	stw	fp,24(sp)
 180f174:	df000604 	addi	fp,sp,24
 180f178:	e13fff15 	stw	r4,-4(fp)
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 180f17c:	e0bfff17 	ldw	r2,-4(fp)
 180f180:	e0bffb15 	stw	r2,-20(fp)

		configASSERT( pxTCB );

		if( pxTCB == pxCurrentTCB )
 180f184:	d0a7d317 	ldw	r2,-24756(gp)
 180f188:	e0fffb17 	ldw	r3,-20(fp)
 180f18c:	1880021e 	bne	r3,r2,180f198 <eTaskGetState+0x30>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 180f190:	e03ffa15 	stw	zero,-24(fp)
 180f194:	00003206 	br	180f260 <eTaskGetState+0xf8>
		}
		else
		{
			taskENTER_CRITICAL();
 180f198:	1810de40 	call	1810de4 <vTaskEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 180f19c:	e0bffb17 	ldw	r2,-20(fp)
 180f1a0:	10800517 	ldw	r2,20(r2)
 180f1a4:	e0bffc15 	stw	r2,-16(fp)
				pxDelayedList = pxDelayedTaskList;
 180f1a8:	d0a7d417 	ldw	r2,-24752(gp)
 180f1ac:	e0bffd15 	stw	r2,-12(fp)
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 180f1b0:	d0a7d517 	ldw	r2,-24748(gp)
 180f1b4:	e0bffe15 	stw	r2,-8(fp)
			}
			taskEXIT_CRITICAL();
 180f1b8:	1810e380 	call	1810e38 <vTaskExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 180f1bc:	e0fffc17 	ldw	r3,-16(fp)
 180f1c0:	e0bffd17 	ldw	r2,-12(fp)
 180f1c4:	18800326 	beq	r3,r2,180f1d4 <eTaskGetState+0x6c>
 180f1c8:	e0fffc17 	ldw	r3,-16(fp)
 180f1cc:	e0bffe17 	ldw	r2,-8(fp)
 180f1d0:	1880031e 	bne	r3,r2,180f1e0 <eTaskGetState+0x78>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 180f1d4:	00800084 	movi	r2,2
 180f1d8:	e0bffa15 	stw	r2,-24(fp)
 180f1dc:	00002006 	br	180f260 <eTaskGetState+0xf8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 180f1e0:	e0fffc17 	ldw	r3,-16(fp)
 180f1e4:	00806134 	movhi	r2,388
 180f1e8:	109d4904 	addi	r2,r2,29988
 180f1ec:	1880111e 	bne	r3,r2,180f234 <eTaskGetState+0xcc>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 180f1f0:	e0bffb17 	ldw	r2,-20(fp)
 180f1f4:	10800a17 	ldw	r2,40(r2)
 180f1f8:	10000b1e 	bne	r2,zero,180f228 <eTaskGetState+0xc0>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 180f1fc:	e0bffb17 	ldw	r2,-20(fp)
 180f200:	10801d03 	ldbu	r2,116(r2)
 180f204:	10803fcc 	andi	r2,r2,255
 180f208:	10800058 	cmpnei	r2,r2,1
 180f20c:	1000031e 	bne	r2,zero,180f21c <eTaskGetState+0xb4>
							{
								eReturn = eBlocked;
 180f210:	00800084 	movi	r2,2
 180f214:	e0bffa15 	stw	r2,-24(fp)
 180f218:	00001106 	br	180f260 <eTaskGetState+0xf8>
							}
							else
							{
								eReturn = eSuspended;
 180f21c:	008000c4 	movi	r2,3
 180f220:	e0bffa15 	stw	r2,-24(fp)
 180f224:	00000e06 	br	180f260 <eTaskGetState+0xf8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 180f228:	00800084 	movi	r2,2
 180f22c:	e0bffa15 	stw	r2,-24(fp)
 180f230:	00000b06 	br	180f260 <eTaskGetState+0xf8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 180f234:	e0fffc17 	ldw	r3,-16(fp)
 180f238:	00806134 	movhi	r2,388
 180f23c:	109d4404 	addi	r2,r2,29968
 180f240:	18800226 	beq	r3,r2,180f24c <eTaskGetState+0xe4>
 180f244:	e0bffc17 	ldw	r2,-16(fp)
 180f248:	1000031e 	bne	r2,zero,180f258 <eTaskGetState+0xf0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 180f24c:	00800104 	movi	r2,4
 180f250:	e0bffa15 	stw	r2,-24(fp)
 180f254:	00000206 	br	180f260 <eTaskGetState+0xf8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 180f258:	00800044 	movi	r2,1
 180f25c:	e0bffa15 	stw	r2,-24(fp)
			}
		}

		return eReturn;
 180f260:	e0bffa17 	ldw	r2,-24(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 180f264:	e037883a 	mov	sp,fp
 180f268:	dfc00117 	ldw	ra,4(sp)
 180f26c:	df000017 	ldw	fp,0(sp)
 180f270:	dec00204 	addi	sp,sp,8
 180f274:	f800283a 	ret

0180f278 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 180f278:	defffb04 	addi	sp,sp,-20
 180f27c:	dfc00415 	stw	ra,16(sp)
 180f280:	df000315 	stw	fp,12(sp)
 180f284:	df000304 	addi	fp,sp,12
 180f288:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 180f28c:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 180f290:	e0bfff17 	ldw	r2,-4(fp)
 180f294:	1000021e 	bne	r2,zero,180f2a0 <uxTaskPriorityGet+0x28>
 180f298:	d0a7d317 	ldw	r2,-24756(gp)
 180f29c:	00000106 	br	180f2a4 <uxTaskPriorityGet+0x2c>
 180f2a0:	e0bfff17 	ldw	r2,-4(fp)
 180f2a4:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 180f2a8:	e0bffd17 	ldw	r2,-12(fp)
 180f2ac:	10800b17 	ldw	r2,44(r2)
 180f2b0:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 180f2b4:	1810e380 	call	1810e38 <vTaskExitCritical>

		return uxReturn;
 180f2b8:	e0bffe17 	ldw	r2,-8(fp)
	}
 180f2bc:	e037883a 	mov	sp,fp
 180f2c0:	dfc00117 	ldw	ra,4(sp)
 180f2c4:	df000017 	ldw	fp,0(sp)
 180f2c8:	dec00204 	addi	sp,sp,8
 180f2cc:	f800283a 	ret

0180f2d0 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 180f2d0:	defffb04 	addi	sp,sp,-20
 180f2d4:	df000415 	stw	fp,16(sp)
 180f2d8:	df000404 	addi	fp,sp,16
 180f2dc:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 180f2e0:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 180f2e4:	e0bfff17 	ldw	r2,-4(fp)
 180f2e8:	1000021e 	bne	r2,zero,180f2f4 <uxTaskPriorityGetFromISR+0x24>
 180f2ec:	d0a7d317 	ldw	r2,-24756(gp)
 180f2f0:	00000106 	br	180f2f8 <uxTaskPriorityGetFromISR+0x28>
 180f2f4:	e0bfff17 	ldw	r2,-4(fp)
 180f2f8:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 180f2fc:	e0bffd17 	ldw	r2,-12(fp)
 180f300:	10800b17 	ldw	r2,44(r2)
 180f304:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 180f308:	e0bffe17 	ldw	r2,-8(fp)
	}
 180f30c:	e037883a 	mov	sp,fp
 180f310:	df000017 	ldw	fp,0(sp)
 180f314:	dec00104 	addi	sp,sp,4
 180f318:	f800283a 	ret

0180f31c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 180f31c:	defff804 	addi	sp,sp,-32
 180f320:	dfc00715 	stw	ra,28(sp)
 180f324:	df000615 	stw	fp,24(sp)
 180f328:	df000604 	addi	fp,sp,24
 180f32c:	e13ffe15 	stw	r4,-8(fp)
 180f330:	e17fff15 	stw	r5,-4(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 180f334:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 180f338:	e0bfff17 	ldw	r2,-4(fp)
 180f33c:	10800170 	cmpltui	r2,r2,5
 180f340:	1000021e 	bne	r2,zero,180f34c <vTaskPrioritySet+0x30>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 180f344:	00800104 	movi	r2,4
 180f348:	e0bfff15 	stw	r2,-4(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 180f34c:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 180f350:	e0bffe17 	ldw	r2,-8(fp)
 180f354:	1000021e 	bne	r2,zero,180f360 <vTaskPrioritySet+0x44>
 180f358:	d0a7d317 	ldw	r2,-24756(gp)
 180f35c:	00000106 	br	180f364 <vTaskPrioritySet+0x48>
 180f360:	e0bffe17 	ldw	r2,-8(fp)
 180f364:	e0bffb15 	stw	r2,-20(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 180f368:	e0bffb17 	ldw	r2,-20(fp)
 180f36c:	10801a17 	ldw	r2,104(r2)
 180f370:	e0bffc15 	stw	r2,-16(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 180f374:	e0fffc17 	ldw	r3,-16(fp)
 180f378:	e0bfff17 	ldw	r2,-4(fp)
 180f37c:	18804926 	beq	r3,r2,180f4a4 <vTaskPrioritySet+0x188>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 180f380:	e0bfff17 	ldw	r2,-4(fp)
 180f384:	e0fffc17 	ldw	r3,-16(fp)
 180f388:	18800a2e 	bgeu	r3,r2,180f3b4 <vTaskPrioritySet+0x98>
				{
					if( pxTCB != pxCurrentTCB )
 180f38c:	d0a7d317 	ldw	r2,-24756(gp)
 180f390:	e0fffb17 	ldw	r3,-20(fp)
 180f394:	18800c26 	beq	r3,r2,180f3c8 <vTaskPrioritySet+0xac>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 180f398:	d0a7d317 	ldw	r2,-24756(gp)
 180f39c:	10800b17 	ldw	r2,44(r2)
 180f3a0:	e0ffff17 	ldw	r3,-4(fp)
 180f3a4:	18800836 	bltu	r3,r2,180f3c8 <vTaskPrioritySet+0xac>
						{
							xYieldRequired = pdTRUE;
 180f3a8:	00800044 	movi	r2,1
 180f3ac:	e0bffa15 	stw	r2,-24(fp)
 180f3b0:	00000506 	br	180f3c8 <vTaskPrioritySet+0xac>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 180f3b4:	d0a7d317 	ldw	r2,-24756(gp)
 180f3b8:	e0fffb17 	ldw	r3,-20(fp)
 180f3bc:	1880021e 	bne	r3,r2,180f3c8 <vTaskPrioritySet+0xac>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 180f3c0:	00800044 	movi	r2,1
 180f3c4:	e0bffa15 	stw	r2,-24(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 180f3c8:	e0bffb17 	ldw	r2,-20(fp)
 180f3cc:	10800b17 	ldw	r2,44(r2)
 180f3d0:	e0bffd15 	stw	r2,-12(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 180f3d4:	e0bffb17 	ldw	r2,-20(fp)
 180f3d8:	10c01a17 	ldw	r3,104(r2)
 180f3dc:	e0bffb17 	ldw	r2,-20(fp)
 180f3e0:	10800b17 	ldw	r2,44(r2)
 180f3e4:	1880031e 	bne	r3,r2,180f3f4 <vTaskPrioritySet+0xd8>
					{
						pxTCB->uxPriority = uxNewPriority;
 180f3e8:	e0bffb17 	ldw	r2,-20(fp)
 180f3ec:	e0ffff17 	ldw	r3,-4(fp)
 180f3f0:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 180f3f4:	e0bffb17 	ldw	r2,-20(fp)
 180f3f8:	e0ffff17 	ldw	r3,-4(fp)
 180f3fc:	10c01a15 	stw	r3,104(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 180f400:	e0bffb17 	ldw	r2,-20(fp)
 180f404:	10800617 	ldw	r2,24(r2)
 180f408:	10000516 	blt	r2,zero,180f420 <vTaskPrioritySet+0x104>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 180f40c:	00c00144 	movi	r3,5
 180f410:	e0bfff17 	ldw	r2,-4(fp)
 180f414:	1887c83a 	sub	r3,r3,r2
 180f418:	e0bffb17 	ldw	r2,-20(fp)
 180f41c:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 180f420:	e0bffb17 	ldw	r2,-20(fp)
 180f424:	10c00517 	ldw	r3,20(r2)
 180f428:	e0bffd17 	ldw	r2,-12(fp)
 180f42c:	11000524 	muli	r4,r2,20
 180f430:	00806134 	movhi	r2,388
 180f434:	109d1c04 	addi	r2,r2,29808
 180f438:	2085883a 	add	r2,r4,r2
 180f43c:	1880161e 	bne	r3,r2,180f498 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 180f440:	e0bffb17 	ldw	r2,-20(fp)
 180f444:	10800104 	addi	r2,r2,4
 180f448:	1009883a 	mov	r4,r2
 180f44c:	1826bb40 	call	1826bb4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 180f450:	e0bffb17 	ldw	r2,-20(fp)
 180f454:	10800b17 	ldw	r2,44(r2)
 180f458:	d0e7d917 	ldw	r3,-24732(gp)
 180f45c:	1880032e 	bgeu	r3,r2,180f46c <vTaskPrioritySet+0x150>
 180f460:	e0bffb17 	ldw	r2,-20(fp)
 180f464:	10800b17 	ldw	r2,44(r2)
 180f468:	d0a7d915 	stw	r2,-24732(gp)
 180f46c:	e0bffb17 	ldw	r2,-20(fp)
 180f470:	10800b17 	ldw	r2,44(r2)
 180f474:	10c00524 	muli	r3,r2,20
 180f478:	00806134 	movhi	r2,388
 180f47c:	109d1c04 	addi	r2,r2,29808
 180f480:	1887883a 	add	r3,r3,r2
 180f484:	e0bffb17 	ldw	r2,-20(fp)
 180f488:	10800104 	addi	r2,r2,4
 180f48c:	100b883a 	mov	r5,r2
 180f490:	1809883a 	mov	r4,r3
 180f494:	1826a500 	call	1826a50 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 180f498:	e0bffa17 	ldw	r2,-24(fp)
 180f49c:	10000126 	beq	r2,zero,180f4a4 <vTaskPrioritySet+0x188>
				{
					taskYIELD_IF_USING_PREEMPTION();
 180f4a0:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 180f4a4:	1810e380 	call	1810e38 <vTaskExitCritical>
	}
 180f4a8:	0001883a 	nop
 180f4ac:	e037883a 	mov	sp,fp
 180f4b0:	dfc00117 	ldw	ra,4(sp)
 180f4b4:	df000017 	ldw	fp,0(sp)
 180f4b8:	dec00204 	addi	sp,sp,8
 180f4bc:	f800283a 	ret

0180f4c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 180f4c0:	defffc04 	addi	sp,sp,-16
 180f4c4:	dfc00315 	stw	ra,12(sp)
 180f4c8:	df000215 	stw	fp,8(sp)
 180f4cc:	df000204 	addi	fp,sp,8
 180f4d0:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 180f4d4:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 180f4d8:	e0bfff17 	ldw	r2,-4(fp)
 180f4dc:	1000021e 	bne	r2,zero,180f4e8 <vTaskSuspend+0x28>
 180f4e0:	d0a7d317 	ldw	r2,-24756(gp)
 180f4e4:	00000106 	br	180f4ec <vTaskSuspend+0x2c>
 180f4e8:	e0bfff17 	ldw	r2,-4(fp)
 180f4ec:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 180f4f0:	e0bffe17 	ldw	r2,-8(fp)
 180f4f4:	10800104 	addi	r2,r2,4
 180f4f8:	1009883a 	mov	r4,r2
 180f4fc:	1826bb40 	call	1826bb4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 180f500:	e0bffe17 	ldw	r2,-8(fp)
 180f504:	10800a17 	ldw	r2,40(r2)
 180f508:	10000426 	beq	r2,zero,180f51c <vTaskSuspend+0x5c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 180f50c:	e0bffe17 	ldw	r2,-8(fp)
 180f510:	10800604 	addi	r2,r2,24
 180f514:	1009883a 	mov	r4,r2
 180f518:	1826bb40 	call	1826bb4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 180f51c:	e0bffe17 	ldw	r2,-8(fp)
 180f520:	10800104 	addi	r2,r2,4
 180f524:	100b883a 	mov	r5,r2
 180f528:	01006134 	movhi	r4,388
 180f52c:	211d4904 	addi	r4,r4,29988
 180f530:	1826a500 	call	1826a50 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 180f534:	e0bffe17 	ldw	r2,-8(fp)
 180f538:	10801d03 	ldbu	r2,116(r2)
 180f53c:	10803fcc 	andi	r2,r2,255
 180f540:	10800058 	cmpnei	r2,r2,1
 180f544:	1000021e 	bne	r2,zero,180f550 <vTaskSuspend+0x90>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 180f548:	e0bffe17 	ldw	r2,-8(fp)
 180f54c:	10001d05 	stb	zero,116(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 180f550:	1810e380 	call	1810e38 <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 180f554:	d0a7da17 	ldw	r2,-24728(gp)
 180f558:	10000326 	beq	r2,zero,180f568 <vTaskSuspend+0xa8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 180f55c:	1810de40 	call	1810de4 <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 180f560:	18109a00 	call	18109a0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 180f564:	1810e380 	call	1810e38 <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 180f568:	d0a7d317 	ldw	r2,-24756(gp)
 180f56c:	e0fffe17 	ldw	r3,-8(fp)
 180f570:	18800c1e 	bne	r3,r2,180f5a4 <vTaskSuspend+0xe4>
		{
			if( xSchedulerRunning != pdFALSE )
 180f574:	d0a7da17 	ldw	r2,-24728(gp)
 180f578:	10000226 	beq	r2,zero,180f584 <vTaskSuspend+0xc4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 180f57c:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f580:	00000806 	br	180f5a4 <vTaskSuspend+0xe4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 180f584:	00806134 	movhi	r2,388
 180f588:	109d4904 	addi	r2,r2,29988
 180f58c:	10c00017 	ldw	r3,0(r2)
 180f590:	d0a7d717 	ldw	r2,-24740(gp)
 180f594:	1880021e 	bne	r3,r2,180f5a0 <vTaskSuspend+0xe0>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 180f598:	d027d315 	stw	zero,-24756(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f59c:	00000106 	br	180f5a4 <vTaskSuspend+0xe4>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 180f5a0:	180fe7c0 	call	180fe7c <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f5a4:	0001883a 	nop
 180f5a8:	e037883a 	mov	sp,fp
 180f5ac:	dfc00117 	ldw	ra,4(sp)
 180f5b0:	df000017 	ldw	fp,0(sp)
 180f5b4:	dec00204 	addi	sp,sp,8
 180f5b8:	f800283a 	ret

0180f5bc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 180f5bc:	defffc04 	addi	sp,sp,-16
 180f5c0:	df000315 	stw	fp,12(sp)
 180f5c4:	df000304 	addi	fp,sp,12
 180f5c8:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 180f5cc:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 180f5d0:	e0bfff17 	ldw	r2,-4(fp)
 180f5d4:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 180f5d8:	e0bffe17 	ldw	r2,-8(fp)
 180f5dc:	10c00517 	ldw	r3,20(r2)
 180f5e0:	00806134 	movhi	r2,388
 180f5e4:	109d4904 	addi	r2,r2,29988
 180f5e8:	18800a1e 	bne	r3,r2,180f614 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 180f5ec:	e0bffe17 	ldw	r2,-8(fp)
 180f5f0:	10c00a17 	ldw	r3,40(r2)
 180f5f4:	00806134 	movhi	r2,388
 180f5f8:	109d3f04 	addi	r2,r2,29948
 180f5fc:	18800526 	beq	r3,r2,180f614 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 180f600:	e0bffe17 	ldw	r2,-8(fp)
 180f604:	10800a17 	ldw	r2,40(r2)
 180f608:	1000021e 	bne	r2,zero,180f614 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 180f60c:	00800044 	movi	r2,1
 180f610:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 180f614:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 180f618:	e037883a 	mov	sp,fp
 180f61c:	df000017 	ldw	fp,0(sp)
 180f620:	dec00104 	addi	sp,sp,4
 180f624:	f800283a 	ret

0180f628 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 180f628:	defffc04 	addi	sp,sp,-16
 180f62c:	dfc00315 	stw	ra,12(sp)
 180f630:	df000215 	stw	fp,8(sp)
 180f634:	df000204 	addi	fp,sp,8
 180f638:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 180f63c:	e0bfff17 	ldw	r2,-4(fp)
 180f640:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 180f644:	d0a7d317 	ldw	r2,-24756(gp)
 180f648:	e0fffe17 	ldw	r3,-8(fp)
 180f64c:	18802326 	beq	r3,r2,180f6dc <vTaskResume+0xb4>
 180f650:	e0bffe17 	ldw	r2,-8(fp)
 180f654:	10002126 	beq	r2,zero,180f6dc <vTaskResume+0xb4>
		{
			taskENTER_CRITICAL();
 180f658:	1810de40 	call	1810de4 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 180f65c:	e13ffe17 	ldw	r4,-8(fp)
 180f660:	180f5bc0 	call	180f5bc <prvTaskIsTaskSuspended>
 180f664:	10001c26 	beq	r2,zero,180f6d8 <vTaskResume+0xb0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 180f668:	e0bffe17 	ldw	r2,-8(fp)
 180f66c:	10800104 	addi	r2,r2,4
 180f670:	1009883a 	mov	r4,r2
 180f674:	1826bb40 	call	1826bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 180f678:	e0bffe17 	ldw	r2,-8(fp)
 180f67c:	10800b17 	ldw	r2,44(r2)
 180f680:	d0e7d917 	ldw	r3,-24732(gp)
 180f684:	1880032e 	bgeu	r3,r2,180f694 <vTaskResume+0x6c>
 180f688:	e0bffe17 	ldw	r2,-8(fp)
 180f68c:	10800b17 	ldw	r2,44(r2)
 180f690:	d0a7d915 	stw	r2,-24732(gp)
 180f694:	e0bffe17 	ldw	r2,-8(fp)
 180f698:	10800b17 	ldw	r2,44(r2)
 180f69c:	10c00524 	muli	r3,r2,20
 180f6a0:	00806134 	movhi	r2,388
 180f6a4:	109d1c04 	addi	r2,r2,29808
 180f6a8:	1887883a 	add	r3,r3,r2
 180f6ac:	e0bffe17 	ldw	r2,-8(fp)
 180f6b0:	10800104 	addi	r2,r2,4
 180f6b4:	100b883a 	mov	r5,r2
 180f6b8:	1809883a 	mov	r4,r3
 180f6bc:	1826a500 	call	1826a50 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 180f6c0:	e0bffe17 	ldw	r2,-8(fp)
 180f6c4:	10c00b17 	ldw	r3,44(r2)
 180f6c8:	d0a7d317 	ldw	r2,-24756(gp)
 180f6cc:	10800b17 	ldw	r2,44(r2)
 180f6d0:	18800136 	bltu	r3,r2,180f6d8 <vTaskResume+0xb0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 180f6d4:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 180f6d8:	1810e380 	call	1810e38 <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 180f6dc:	0001883a 	nop
 180f6e0:	e037883a 	mov	sp,fp
 180f6e4:	dfc00117 	ldw	ra,4(sp)
 180f6e8:	df000017 	ldw	fp,0(sp)
 180f6ec:	dec00204 	addi	sp,sp,8
 180f6f0:	f800283a 	ret

0180f6f4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 180f6f4:	defffa04 	addi	sp,sp,-24
 180f6f8:	dfc00515 	stw	ra,20(sp)
 180f6fc:	df000415 	stw	fp,16(sp)
 180f700:	df000404 	addi	fp,sp,16
 180f704:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 180f708:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 180f70c:	e0bfff17 	ldw	r2,-4(fp)
 180f710:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 180f714:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 180f718:	e13ffd17 	ldw	r4,-12(fp)
 180f71c:	180f5bc0 	call	180f5bc <prvTaskIsTaskSuspended>
 180f720:	10002626 	beq	r2,zero,180f7bc <xTaskResumeFromISR+0xc8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 180f724:	d0a7e117 	ldw	r2,-24700(gp)
 180f728:	10001e1e 	bne	r2,zero,180f7a4 <xTaskResumeFromISR+0xb0>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 180f72c:	e0bffd17 	ldw	r2,-12(fp)
 180f730:	10c00b17 	ldw	r3,44(r2)
 180f734:	d0a7d317 	ldw	r2,-24756(gp)
 180f738:	10800b17 	ldw	r2,44(r2)
 180f73c:	18800236 	bltu	r3,r2,180f748 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 180f740:	00800044 	movi	r2,1
 180f744:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 180f748:	e0bffd17 	ldw	r2,-12(fp)
 180f74c:	10800104 	addi	r2,r2,4
 180f750:	1009883a 	mov	r4,r2
 180f754:	1826bb40 	call	1826bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 180f758:	e0bffd17 	ldw	r2,-12(fp)
 180f75c:	10800b17 	ldw	r2,44(r2)
 180f760:	d0e7d917 	ldw	r3,-24732(gp)
 180f764:	1880032e 	bgeu	r3,r2,180f774 <xTaskResumeFromISR+0x80>
 180f768:	e0bffd17 	ldw	r2,-12(fp)
 180f76c:	10800b17 	ldw	r2,44(r2)
 180f770:	d0a7d915 	stw	r2,-24732(gp)
 180f774:	e0bffd17 	ldw	r2,-12(fp)
 180f778:	10800b17 	ldw	r2,44(r2)
 180f77c:	10c00524 	muli	r3,r2,20
 180f780:	00806134 	movhi	r2,388
 180f784:	109d1c04 	addi	r2,r2,29808
 180f788:	1887883a 	add	r3,r3,r2
 180f78c:	e0bffd17 	ldw	r2,-12(fp)
 180f790:	10800104 	addi	r2,r2,4
 180f794:	100b883a 	mov	r5,r2
 180f798:	1809883a 	mov	r4,r3
 180f79c:	1826a500 	call	1826a50 <vListInsertEnd>
 180f7a0:	00000606 	br	180f7bc <xTaskResumeFromISR+0xc8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 180f7a4:	e0bffd17 	ldw	r2,-12(fp)
 180f7a8:	10800604 	addi	r2,r2,24
 180f7ac:	100b883a 	mov	r5,r2
 180f7b0:	01006134 	movhi	r4,388
 180f7b4:	211d3f04 	addi	r4,r4,29948
 180f7b8:	1826a500 	call	1826a50 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 180f7bc:	e0bffc17 	ldw	r2,-16(fp)
	}
 180f7c0:	e037883a 	mov	sp,fp
 180f7c4:	dfc00117 	ldw	ra,4(sp)
 180f7c8:	df000017 	ldw	fp,0(sp)
 180f7cc:	dec00204 	addi	sp,sp,8
 180f7d0:	f800283a 	ret

0180f7d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 180f7d4:	defffa04 	addi	sp,sp,-24
 180f7d8:	dfc00515 	stw	ra,20(sp)
 180f7dc:	df000415 	stw	fp,16(sp)
 180f7e0:	df000404 	addi	fp,sp,16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 180f7e4:	d0a7e004 	addi	r2,gp,-24704
 180f7e8:	d8800115 	stw	r2,4(sp)
 180f7ec:	d8000015 	stw	zero,0(sp)
 180f7f0:	000f883a 	mov	r7,zero
 180f7f4:	01820004 	movi	r6,2048
 180f7f8:	01406134 	movhi	r5,388
 180f7fc:	29433104 	addi	r5,r5,3268
 180f800:	01006074 	movhi	r4,385
 180f804:	21013204 	addi	r4,r4,1224
 180f808:	180eb680 	call	180eb68 <xTaskCreate>
 180f80c:	e0bffe15 	stw	r2,-8(fp)
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 180f810:	e0bffe17 	ldw	r2,-8(fp)
 180f814:	10800058 	cmpnei	r2,r2,1
 180f818:	1000021e 	bne	r2,zero,180f824 <vTaskStartScheduler+0x50>
		{
			xReturn = xTimerCreateTimerTask();
 180f81c:	18117400 	call	1811740 <xTimerCreateTimerTask>
 180f820:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 180f824:	e0bffe17 	ldw	r2,-8(fp)
 180f828:	10800058 	cmpnei	r2,r2,1
 180f82c:	10000c1e 	bne	r2,zero,180f860 <vTaskStartScheduler+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 180f830:	0005303a 	rdctl	r2,status
 180f834:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 180f838:	e0ffff17 	ldw	r3,-4(fp)
 180f83c:	00bfff84 	movi	r2,-2
 180f840:	1884703a 	and	r2,r3,r2
 180f844:	1001703a 	wrctl	status,r2
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 180f848:	00bfffc4 	movi	r2,-1
 180f84c:	d0a7df15 	stw	r2,-24708(gp)
		xSchedulerRunning = pdTRUE;
 180f850:	00800044 	movi	r2,1
 180f854:	d0a7da15 	stw	r2,-24728(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 180f858:	d027d815 	stw	zero,-24736(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 180f85c:	1826de40 	call	1826de4 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 180f860:	0001883a 	nop
 180f864:	e037883a 	mov	sp,fp
 180f868:	dfc00117 	ldw	ra,4(sp)
 180f86c:	df000017 	ldw	fp,0(sp)
 180f870:	dec00204 	addi	sp,sp,8
 180f874:	f800283a 	ret

0180f878 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 180f878:	defffd04 	addi	sp,sp,-12
 180f87c:	dfc00215 	stw	ra,8(sp)
 180f880:	df000115 	stw	fp,4(sp)
 180f884:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 180f888:	0005303a 	rdctl	r2,status
 180f88c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 180f890:	e0ffff17 	ldw	r3,-4(fp)
 180f894:	00bfff84 	movi	r2,-2
 180f898:	1884703a 	and	r2,r3,r2
 180f89c:	1001703a 	wrctl	status,r2
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 180f8a0:	d027da15 	stw	zero,-24728(gp)
	vPortEndScheduler();
 180f8a4:	1826e1c0 	call	1826e1c <vPortEndScheduler>
}
 180f8a8:	0001883a 	nop
 180f8ac:	e037883a 	mov	sp,fp
 180f8b0:	dfc00117 	ldw	ra,4(sp)
 180f8b4:	df000017 	ldw	fp,0(sp)
 180f8b8:	dec00204 	addi	sp,sp,8
 180f8bc:	f800283a 	ret

0180f8c0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 180f8c0:	deffff04 	addi	sp,sp,-4
 180f8c4:	df000015 	stw	fp,0(sp)
 180f8c8:	d839883a 	mov	fp,sp
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 180f8cc:	d0a7e117 	ldw	r2,-24700(gp)
 180f8d0:	10800044 	addi	r2,r2,1
 180f8d4:	d0a7e115 	stw	r2,-24700(gp)

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 180f8d8:	0001883a 	nop
 180f8dc:	e037883a 	mov	sp,fp
 180f8e0:	df000017 	ldw	fp,0(sp)
 180f8e4:	dec00104 	addi	sp,sp,4
 180f8e8:	f800283a 	ret

0180f8ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 180f8ec:	defffb04 	addi	sp,sp,-20
 180f8f0:	dfc00415 	stw	ra,16(sp)
 180f8f4:	df000315 	stw	fp,12(sp)
 180f8f8:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 180f8fc:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 180f900:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 180f904:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 180f908:	d0a7e117 	ldw	r2,-24700(gp)
 180f90c:	10bfffc4 	addi	r2,r2,-1
 180f910:	d0a7e115 	stw	r2,-24700(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 180f914:	d0a7e117 	ldw	r2,-24700(gp)
 180f918:	1000431e 	bne	r2,zero,180fa28 <xTaskResumeAll+0x13c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 180f91c:	d0a7d717 	ldw	r2,-24740(gp)
 180f920:	10004126 	beq	r2,zero,180fa28 <xTaskResumeAll+0x13c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 180f924:	00002606 	br	180f9c0 <xTaskResumeAll+0xd4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 180f928:	00806134 	movhi	r2,388
 180f92c:	109d3f04 	addi	r2,r2,29948
 180f930:	10800317 	ldw	r2,12(r2)
 180f934:	10800317 	ldw	r2,12(r2)
 180f938:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 180f93c:	e0bffd17 	ldw	r2,-12(fp)
 180f940:	10800604 	addi	r2,r2,24
 180f944:	1009883a 	mov	r4,r2
 180f948:	1826bb40 	call	1826bb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 180f94c:	e0bffd17 	ldw	r2,-12(fp)
 180f950:	10800104 	addi	r2,r2,4
 180f954:	1009883a 	mov	r4,r2
 180f958:	1826bb40 	call	1826bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 180f95c:	e0bffd17 	ldw	r2,-12(fp)
 180f960:	10800b17 	ldw	r2,44(r2)
 180f964:	d0e7d917 	ldw	r3,-24732(gp)
 180f968:	1880032e 	bgeu	r3,r2,180f978 <xTaskResumeAll+0x8c>
 180f96c:	e0bffd17 	ldw	r2,-12(fp)
 180f970:	10800b17 	ldw	r2,44(r2)
 180f974:	d0a7d915 	stw	r2,-24732(gp)
 180f978:	e0bffd17 	ldw	r2,-12(fp)
 180f97c:	10800b17 	ldw	r2,44(r2)
 180f980:	10c00524 	muli	r3,r2,20
 180f984:	00806134 	movhi	r2,388
 180f988:	109d1c04 	addi	r2,r2,29808
 180f98c:	1887883a 	add	r3,r3,r2
 180f990:	e0bffd17 	ldw	r2,-12(fp)
 180f994:	10800104 	addi	r2,r2,4
 180f998:	100b883a 	mov	r5,r2
 180f99c:	1809883a 	mov	r4,r3
 180f9a0:	1826a500 	call	1826a50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 180f9a4:	e0bffd17 	ldw	r2,-12(fp)
 180f9a8:	10c00b17 	ldw	r3,44(r2)
 180f9ac:	d0a7d317 	ldw	r2,-24756(gp)
 180f9b0:	10800b17 	ldw	r2,44(r2)
 180f9b4:	18800236 	bltu	r3,r2,180f9c0 <xTaskResumeAll+0xd4>
					{
						xYieldPending = pdTRUE;
 180f9b8:	00800044 	movi	r2,1
 180f9bc:	d0a7dc15 	stw	r2,-24720(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 180f9c0:	00806134 	movhi	r2,388
 180f9c4:	109d3f04 	addi	r2,r2,29948
 180f9c8:	10800017 	ldw	r2,0(r2)
 180f9cc:	103fd61e 	bne	r2,zero,180f928 <__alt_mem_mem_0+0xff7ef928>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 180f9d0:	e0bffd17 	ldw	r2,-12(fp)
 180f9d4:	10000126 	beq	r2,zero,180f9dc <xTaskResumeAll+0xf0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 180f9d8:	18109a00 	call	18109a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 180f9dc:	d0a7db17 	ldw	r2,-24724(gp)
 180f9e0:	e0bfff15 	stw	r2,-4(fp)

					if( xPendedCounts > ( TickType_t ) 0U )
 180f9e4:	e0bfff17 	ldw	r2,-4(fp)
 180f9e8:	10000a26 	beq	r2,zero,180fa14 <xTaskResumeAll+0x128>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 180f9ec:	180fccc0 	call	180fccc <xTaskIncrementTick>
 180f9f0:	10000226 	beq	r2,zero,180f9fc <xTaskResumeAll+0x110>
							{
								xYieldPending = pdTRUE;
 180f9f4:	00800044 	movi	r2,1
 180f9f8:	d0a7dc15 	stw	r2,-24720(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 180f9fc:	e0bfff17 	ldw	r2,-4(fp)
 180fa00:	10bfffc4 	addi	r2,r2,-1
 180fa04:	e0bfff15 	stw	r2,-4(fp)
						} while( xPendedCounts > ( TickType_t ) 0U );
 180fa08:	e0bfff17 	ldw	r2,-4(fp)
 180fa0c:	103ff71e 	bne	r2,zero,180f9ec <__alt_mem_mem_0+0xff7ef9ec>

						xPendedTicks = 0;
 180fa10:	d027db15 	stw	zero,-24724(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 180fa14:	d0a7dc17 	ldw	r2,-24720(gp)
 180fa18:	10000326 	beq	r2,zero,180fa28 <xTaskResumeAll+0x13c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 180fa1c:	00800044 	movi	r2,1
 180fa20:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 180fa24:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 180fa28:	1810e380 	call	1810e38 <vTaskExitCritical>

	return xAlreadyYielded;
 180fa2c:	e0bffe17 	ldw	r2,-8(fp)
}
 180fa30:	e037883a 	mov	sp,fp
 180fa34:	dfc00117 	ldw	ra,4(sp)
 180fa38:	df000017 	ldw	fp,0(sp)
 180fa3c:	dec00204 	addi	sp,sp,8
 180fa40:	f800283a 	ret

0180fa44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 180fa44:	defffe04 	addi	sp,sp,-8
 180fa48:	df000115 	stw	fp,4(sp)
 180fa4c:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 180fa50:	d0a7d817 	ldw	r2,-24736(gp)
 180fa54:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 180fa58:	e0bfff17 	ldw	r2,-4(fp)
}
 180fa5c:	e037883a 	mov	sp,fp
 180fa60:	df000017 	ldw	fp,0(sp)
 180fa64:	dec00104 	addi	sp,sp,4
 180fa68:	f800283a 	ret

0180fa6c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 180fa6c:	defffd04 	addi	sp,sp,-12
 180fa70:	df000215 	stw	fp,8(sp)
 180fa74:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 180fa78:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 180fa7c:	d0a7d817 	ldw	r2,-24736(gp)
 180fa80:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 180fa84:	e0bfff17 	ldw	r2,-4(fp)
}
 180fa88:	e037883a 	mov	sp,fp
 180fa8c:	df000017 	ldw	fp,0(sp)
 180fa90:	dec00104 	addi	sp,sp,4
 180fa94:	f800283a 	ret

0180fa98 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 180fa98:	deffff04 	addi	sp,sp,-4
 180fa9c:	df000015 	stw	fp,0(sp)
 180faa0:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 180faa4:	d0a7d717 	ldw	r2,-24740(gp)
}
 180faa8:	e037883a 	mov	sp,fp
 180faac:	df000017 	ldw	fp,0(sp)
 180fab0:	dec00104 	addi	sp,sp,4
 180fab4:	f800283a 	ret

0180fab8 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 180fab8:	defffd04 	addi	sp,sp,-12
 180fabc:	df000215 	stw	fp,8(sp)
 180fac0:	df000204 	addi	fp,sp,8
 180fac4:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 180fac8:	e0bfff17 	ldw	r2,-4(fp)
 180facc:	1000021e 	bne	r2,zero,180fad8 <pcTaskGetName+0x20>
 180fad0:	d0a7d317 	ldw	r2,-24756(gp)
 180fad4:	00000106 	br	180fadc <pcTaskGetName+0x24>
 180fad8:	e0bfff17 	ldw	r2,-4(fp)
 180fadc:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 180fae0:	e0bffe17 	ldw	r2,-8(fp)
 180fae4:	10800d04 	addi	r2,r2,52
}
 180fae8:	e037883a 	mov	sp,fp
 180faec:	df000017 	ldw	fp,0(sp)
 180faf0:	dec00104 	addi	sp,sp,4
 180faf4:	f800283a 	ret

0180faf8 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 180faf8:	defff904 	addi	sp,sp,-28
 180fafc:	dfc00615 	stw	ra,24(sp)
 180fb00:	df000515 	stw	fp,20(sp)
 180fb04:	df000504 	addi	fp,sp,20
 180fb08:	e13ffd15 	stw	r4,-12(fp)
 180fb0c:	e17ffe15 	stw	r5,-8(fp)
 180fb10:	e1bfff15 	stw	r6,-4(fp)
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 180fb14:	e03ffb15 	stw	zero,-20(fp)
 180fb18:	00800144 	movi	r2,5
 180fb1c:	e0bffc15 	stw	r2,-16(fp)

		vTaskSuspendAll();
 180fb20:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 180fb24:	d0a7d717 	ldw	r2,-24740(gp)
 180fb28:	e0fffe17 	ldw	r3,-8(fp)
 180fb2c:	18804d36 	bltu	r3,r2,180fc64 <uxTaskGetSystemState+0x16c>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 180fb30:	e0bffc17 	ldw	r2,-16(fp)
 180fb34:	10bfffc4 	addi	r2,r2,-1
 180fb38:	e0bffc15 	stw	r2,-16(fp)
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 180fb3c:	e0bffb17 	ldw	r2,-20(fp)
 180fb40:	10800924 	muli	r2,r2,36
 180fb44:	e0fffd17 	ldw	r3,-12(fp)
 180fb48:	1889883a 	add	r4,r3,r2
 180fb4c:	e0bffc17 	ldw	r2,-16(fp)
 180fb50:	10c00524 	muli	r3,r2,20
 180fb54:	00806134 	movhi	r2,388
 180fb58:	109d1c04 	addi	r2,r2,29808
 180fb5c:	1885883a 	add	r2,r3,r2
 180fb60:	01800044 	movi	r6,1
 180fb64:	100b883a 	mov	r5,r2
 180fb68:	18107740 	call	1810774 <prvListTasksWithinSingleList>
 180fb6c:	1007883a 	mov	r3,r2
 180fb70:	e0bffb17 	ldw	r2,-20(fp)
 180fb74:	10c5883a 	add	r2,r2,r3
 180fb78:	e0bffb15 	stw	r2,-20(fp)

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 180fb7c:	e0bffc17 	ldw	r2,-16(fp)
 180fb80:	103feb1e 	bne	r2,zero,180fb30 <__alt_mem_mem_0+0xff7efb30>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 180fb84:	e0bffb17 	ldw	r2,-20(fp)
 180fb88:	10800924 	muli	r2,r2,36
 180fb8c:	e0fffd17 	ldw	r3,-12(fp)
 180fb90:	1885883a 	add	r2,r3,r2
 180fb94:	d0e7d417 	ldw	r3,-24752(gp)
 180fb98:	01800084 	movi	r6,2
 180fb9c:	180b883a 	mov	r5,r3
 180fba0:	1009883a 	mov	r4,r2
 180fba4:	18107740 	call	1810774 <prvListTasksWithinSingleList>
 180fba8:	1007883a 	mov	r3,r2
 180fbac:	e0bffb17 	ldw	r2,-20(fp)
 180fbb0:	10c5883a 	add	r2,r2,r3
 180fbb4:	e0bffb15 	stw	r2,-20(fp)
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 180fbb8:	e0bffb17 	ldw	r2,-20(fp)
 180fbbc:	10800924 	muli	r2,r2,36
 180fbc0:	e0fffd17 	ldw	r3,-12(fp)
 180fbc4:	1885883a 	add	r2,r3,r2
 180fbc8:	d0e7d517 	ldw	r3,-24748(gp)
 180fbcc:	01800084 	movi	r6,2
 180fbd0:	180b883a 	mov	r5,r3
 180fbd4:	1009883a 	mov	r4,r2
 180fbd8:	18107740 	call	1810774 <prvListTasksWithinSingleList>
 180fbdc:	1007883a 	mov	r3,r2
 180fbe0:	e0bffb17 	ldw	r2,-20(fp)
 180fbe4:	10c5883a 	add	r2,r2,r3
 180fbe8:	e0bffb15 	stw	r2,-20(fp)

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 180fbec:	e0bffb17 	ldw	r2,-20(fp)
 180fbf0:	10800924 	muli	r2,r2,36
 180fbf4:	e0fffd17 	ldw	r3,-12(fp)
 180fbf8:	1885883a 	add	r2,r3,r2
 180fbfc:	01800104 	movi	r6,4
 180fc00:	01406134 	movhi	r5,388
 180fc04:	295d4404 	addi	r5,r5,29968
 180fc08:	1009883a 	mov	r4,r2
 180fc0c:	18107740 	call	1810774 <prvListTasksWithinSingleList>
 180fc10:	1007883a 	mov	r3,r2
 180fc14:	e0bffb17 	ldw	r2,-20(fp)
 180fc18:	10c5883a 	add	r2,r2,r3
 180fc1c:	e0bffb15 	stw	r2,-20(fp)

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 180fc20:	e0bffb17 	ldw	r2,-20(fp)
 180fc24:	10800924 	muli	r2,r2,36
 180fc28:	e0fffd17 	ldw	r3,-12(fp)
 180fc2c:	1885883a 	add	r2,r3,r2
 180fc30:	018000c4 	movi	r6,3
 180fc34:	01406134 	movhi	r5,388
 180fc38:	295d4904 	addi	r5,r5,29988
 180fc3c:	1009883a 	mov	r4,r2
 180fc40:	18107740 	call	1810774 <prvListTasksWithinSingleList>
 180fc44:	1007883a 	mov	r3,r2
 180fc48:	e0bffb17 	ldw	r2,-20(fp)
 180fc4c:	10c5883a 	add	r2,r2,r3
 180fc50:	e0bffb15 	stw	r2,-20(fp)
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 180fc54:	e0bfff17 	ldw	r2,-4(fp)
 180fc58:	10000226 	beq	r2,zero,180fc64 <uxTaskGetSystemState+0x16c>
					{
						*pulTotalRunTime = 0;
 180fc5c:	e0bfff17 	ldw	r2,-4(fp)
 180fc60:	10000015 	stw	zero,0(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 180fc64:	180f8ec0 	call	180f8ec <xTaskResumeAll>

		return uxTask;
 180fc68:	e0bffb17 	ldw	r2,-20(fp)
	}
 180fc6c:	e037883a 	mov	sp,fp
 180fc70:	dfc00117 	ldw	ra,4(sp)
 180fc74:	df000017 	ldw	fp,0(sp)
 180fc78:	dec00204 	addi	sp,sp,8
 180fc7c:	f800283a 	ret

0180fc80 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
 180fc80:	defffc04 	addi	sp,sp,-16
 180fc84:	dfc00315 	stw	ra,12(sp)
 180fc88:	df000215 	stw	fp,8(sp)
 180fc8c:	df000204 	addi	fp,sp,8
 180fc90:	e13fff15 	stw	r4,-4(fp)
BaseType_t xYieldRequired = pdFALSE;
 180fc94:	e03ffe15 	stw	zero,-8(fp)
	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
	configASSERT( uxSchedulerSuspended == 0 );

	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
	vTaskSuspendAll();
 180fc98:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
	xPendedTicks += xTicksToCatchUp;
 180fc9c:	d0e7db17 	ldw	r3,-24724(gp)
 180fca0:	e0bfff17 	ldw	r2,-4(fp)
 180fca4:	1885883a 	add	r2,r3,r2
 180fca8:	d0a7db15 	stw	r2,-24724(gp)
	xYieldRequired = xTaskResumeAll();
 180fcac:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 180fcb0:	e0bffe15 	stw	r2,-8(fp)

	return xYieldRequired;
 180fcb4:	e0bffe17 	ldw	r2,-8(fp)
}
 180fcb8:	e037883a 	mov	sp,fp
 180fcbc:	dfc00117 	ldw	ra,4(sp)
 180fcc0:	df000017 	ldw	fp,0(sp)
 180fcc4:	dec00204 	addi	sp,sp,8
 180fcc8:	f800283a 	ret

0180fccc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 180fccc:	defff904 	addi	sp,sp,-28
 180fcd0:	dfc00615 	stw	ra,24(sp)
 180fcd4:	df000515 	stw	fp,20(sp)
 180fcd8:	df000504 	addi	fp,sp,20
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 180fcdc:	e03ffb15 	stw	zero,-20(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 180fce0:	d0a7e117 	ldw	r2,-24700(gp)
 180fce4:	10005c1e 	bne	r2,zero,180fe58 <xTaskIncrementTick+0x18c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 180fce8:	d0a7d817 	ldw	r2,-24736(gp)
 180fcec:	10800044 	addi	r2,r2,1
 180fcf0:	e0bffc15 	stw	r2,-16(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 180fcf4:	e0bffc17 	ldw	r2,-16(fp)
 180fcf8:	d0a7d815 	stw	r2,-24736(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 180fcfc:	e0bffc17 	ldw	r2,-16(fp)
 180fd00:	10000a1e 	bne	r2,zero,180fd2c <xTaskIncrementTick+0x60>
		{
			taskSWITCH_DELAYED_LISTS();
 180fd04:	d0a7d417 	ldw	r2,-24752(gp)
 180fd08:	e0bffd15 	stw	r2,-12(fp)
 180fd0c:	d0a7d517 	ldw	r2,-24748(gp)
 180fd10:	d0a7d415 	stw	r2,-24752(gp)
 180fd14:	e0bffd17 	ldw	r2,-12(fp)
 180fd18:	d0a7d515 	stw	r2,-24748(gp)
 180fd1c:	d0a7dd17 	ldw	r2,-24716(gp)
 180fd20:	10800044 	addi	r2,r2,1
 180fd24:	d0a7dd15 	stw	r2,-24716(gp)
 180fd28:	18109a00 	call	18109a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 180fd2c:	d0a7df17 	ldw	r2,-24708(gp)
 180fd30:	e0fffc17 	ldw	r3,-16(fp)
 180fd34:	18803836 	bltu	r3,r2,180fe18 <xTaskIncrementTick+0x14c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 180fd38:	d0a7d417 	ldw	r2,-24752(gp)
 180fd3c:	10800017 	ldw	r2,0(r2)
 180fd40:	1000031e 	bne	r2,zero,180fd50 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 180fd44:	00bfffc4 	movi	r2,-1
 180fd48:	d0a7df15 	stw	r2,-24708(gp)
					break;
 180fd4c:	00003206 	br	180fe18 <xTaskIncrementTick+0x14c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 180fd50:	d0a7d417 	ldw	r2,-24752(gp)
 180fd54:	10800317 	ldw	r2,12(r2)
 180fd58:	10800317 	ldw	r2,12(r2)
 180fd5c:	e0bffe15 	stw	r2,-8(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 180fd60:	e0bffe17 	ldw	r2,-8(fp)
 180fd64:	10800117 	ldw	r2,4(r2)
 180fd68:	e0bfff15 	stw	r2,-4(fp)

					if( xConstTickCount < xItemValue )
 180fd6c:	e0fffc17 	ldw	r3,-16(fp)
 180fd70:	e0bfff17 	ldw	r2,-4(fp)
 180fd74:	1880032e 	bgeu	r3,r2,180fd84 <xTaskIncrementTick+0xb8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 180fd78:	e0bfff17 	ldw	r2,-4(fp)
 180fd7c:	d0a7df15 	stw	r2,-24708(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 180fd80:	00002506 	br	180fe18 <xTaskIncrementTick+0x14c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 180fd84:	e0bffe17 	ldw	r2,-8(fp)
 180fd88:	10800104 	addi	r2,r2,4
 180fd8c:	1009883a 	mov	r4,r2
 180fd90:	1826bb40 	call	1826bb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 180fd94:	e0bffe17 	ldw	r2,-8(fp)
 180fd98:	10800a17 	ldw	r2,40(r2)
 180fd9c:	10000426 	beq	r2,zero,180fdb0 <xTaskIncrementTick+0xe4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 180fda0:	e0bffe17 	ldw	r2,-8(fp)
 180fda4:	10800604 	addi	r2,r2,24
 180fda8:	1009883a 	mov	r4,r2
 180fdac:	1826bb40 	call	1826bb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 180fdb0:	e0bffe17 	ldw	r2,-8(fp)
 180fdb4:	10800b17 	ldw	r2,44(r2)
 180fdb8:	d0e7d917 	ldw	r3,-24732(gp)
 180fdbc:	1880032e 	bgeu	r3,r2,180fdcc <xTaskIncrementTick+0x100>
 180fdc0:	e0bffe17 	ldw	r2,-8(fp)
 180fdc4:	10800b17 	ldw	r2,44(r2)
 180fdc8:	d0a7d915 	stw	r2,-24732(gp)
 180fdcc:	e0bffe17 	ldw	r2,-8(fp)
 180fdd0:	10800b17 	ldw	r2,44(r2)
 180fdd4:	10c00524 	muli	r3,r2,20
 180fdd8:	00806134 	movhi	r2,388
 180fddc:	109d1c04 	addi	r2,r2,29808
 180fde0:	1887883a 	add	r3,r3,r2
 180fde4:	e0bffe17 	ldw	r2,-8(fp)
 180fde8:	10800104 	addi	r2,r2,4
 180fdec:	100b883a 	mov	r5,r2
 180fdf0:	1809883a 	mov	r4,r3
 180fdf4:	1826a500 	call	1826a50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 180fdf8:	e0bffe17 	ldw	r2,-8(fp)
 180fdfc:	10c00b17 	ldw	r3,44(r2)
 180fe00:	d0a7d317 	ldw	r2,-24756(gp)
 180fe04:	10800b17 	ldw	r2,44(r2)
 180fe08:	18bfcb36 	bltu	r3,r2,180fd38 <__alt_mem_mem_0+0xff7efd38>
						{
							xSwitchRequired = pdTRUE;
 180fe0c:	00800044 	movi	r2,1
 180fe10:	e0bffb15 	stw	r2,-20(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 180fe14:	003fc806 	br	180fd38 <__alt_mem_mem_0+0xff7efd38>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 180fe18:	d0a7d317 	ldw	r2,-24756(gp)
 180fe1c:	10c00b17 	ldw	r3,44(r2)
 180fe20:	00806134 	movhi	r2,388
 180fe24:	109d1c04 	addi	r2,r2,29808
 180fe28:	18c00524 	muli	r3,r3,20
 180fe2c:	10c5883a 	add	r2,r2,r3
 180fe30:	10800017 	ldw	r2,0(r2)
 180fe34:	108000b0 	cmpltui	r2,r2,2
 180fe38:	1000021e 	bne	r2,zero,180fe44 <xTaskIncrementTick+0x178>
			{
				xSwitchRequired = pdTRUE;
 180fe3c:	00800044 	movi	r2,1
 180fe40:	e0bffb15 	stw	r2,-20(fp)
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 180fe44:	d0a7dc17 	ldw	r2,-24720(gp)
 180fe48:	10000626 	beq	r2,zero,180fe64 <xTaskIncrementTick+0x198>
			{
				xSwitchRequired = pdTRUE;
 180fe4c:	00800044 	movi	r2,1
 180fe50:	e0bffb15 	stw	r2,-20(fp)
 180fe54:	00000306 	br	180fe64 <xTaskIncrementTick+0x198>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 180fe58:	d0a7db17 	ldw	r2,-24724(gp)
 180fe5c:	10800044 	addi	r2,r2,1
 180fe60:	d0a7db15 	stw	r2,-24724(gp)
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 180fe64:	e0bffb17 	ldw	r2,-20(fp)
}
 180fe68:	e037883a 	mov	sp,fp
 180fe6c:	dfc00117 	ldw	ra,4(sp)
 180fe70:	df000017 	ldw	fp,0(sp)
 180fe74:	dec00204 	addi	sp,sp,8
 180fe78:	f800283a 	ret

0180fe7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 180fe7c:	defffa04 	addi	sp,sp,-24
 180fe80:	dfc00515 	stw	ra,20(sp)
 180fe84:	df000415 	stw	fp,16(sp)
 180fe88:	df000404 	addi	fp,sp,16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 180fe8c:	d0a7e117 	ldw	r2,-24700(gp)
 180fe90:	10000326 	beq	r2,zero,180fea0 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 180fe94:	00800044 	movi	r2,1
 180fe98:	d0a7dc15 	stw	r2,-24720(gp)
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 180fe9c:	00004806 	br	180ffc0 <vTaskSwitchContext+0x144>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 180fea0:	d027dc15 	stw	zero,-24720(gp)
			ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 180fea4:	d0a7d317 	ldw	r2,-24756(gp)
 180fea8:	10800c17 	ldw	r2,48(r2)
 180feac:	e0bffd15 	stw	r2,-12(fp)
 180feb0:	00a969b4 	movhi	r2,42406
 180feb4:	10a96944 	addi	r2,r2,-23131
 180feb8:	e0bffe15 	stw	r2,-8(fp)
 180febc:	e0bffd17 	ldw	r2,-12(fp)
 180fec0:	10c00017 	ldw	r3,0(r2)
 180fec4:	e0bffe17 	ldw	r2,-8(fp)
 180fec8:	18800f1e 	bne	r3,r2,180ff08 <vTaskSwitchContext+0x8c>
 180fecc:	e0bffd17 	ldw	r2,-12(fp)
 180fed0:	10800104 	addi	r2,r2,4
 180fed4:	10c00017 	ldw	r3,0(r2)
 180fed8:	e0bffe17 	ldw	r2,-8(fp)
 180fedc:	18800a1e 	bne	r3,r2,180ff08 <vTaskSwitchContext+0x8c>
 180fee0:	e0bffd17 	ldw	r2,-12(fp)
 180fee4:	10800204 	addi	r2,r2,8
 180fee8:	10c00017 	ldw	r3,0(r2)
 180feec:	e0bffe17 	ldw	r2,-8(fp)
 180fef0:	1880051e 	bne	r3,r2,180ff08 <vTaskSwitchContext+0x8c>
 180fef4:	e0bffd17 	ldw	r2,-12(fp)
 180fef8:	10800304 	addi	r2,r2,12
 180fefc:	10c00017 	ldw	r3,0(r2)
 180ff00:	e0bffe17 	ldw	r2,-8(fp)
 180ff04:	18800626 	beq	r3,r2,180ff20 <vTaskSwitchContext+0xa4>
 180ff08:	d0e7d317 	ldw	r3,-24756(gp)
 180ff0c:	d0a7d317 	ldw	r2,-24756(gp)
 180ff10:	10800d04 	addi	r2,r2,52
 180ff14:	100b883a 	mov	r5,r2
 180ff18:	1809883a 	mov	r4,r3
 180ff1c:	18004780 	call	1800478 <vApplicationStackOverflowHook>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 180ff20:	d0a7d917 	ldw	r2,-24732(gp)
 180ff24:	e0bffc15 	stw	r2,-16(fp)
 180ff28:	00000306 	br	180ff38 <vTaskSwitchContext+0xbc>
 180ff2c:	e0bffc17 	ldw	r2,-16(fp)
 180ff30:	10bfffc4 	addi	r2,r2,-1
 180ff34:	e0bffc15 	stw	r2,-16(fp)
 180ff38:	00806134 	movhi	r2,388
 180ff3c:	109d1c04 	addi	r2,r2,29808
 180ff40:	e0fffc17 	ldw	r3,-16(fp)
 180ff44:	18c00524 	muli	r3,r3,20
 180ff48:	10c5883a 	add	r2,r2,r3
 180ff4c:	10800017 	ldw	r2,0(r2)
 180ff50:	103ff626 	beq	r2,zero,180ff2c <__alt_mem_mem_0+0xff7eff2c>
 180ff54:	e0bffc17 	ldw	r2,-16(fp)
 180ff58:	10c00524 	muli	r3,r2,20
 180ff5c:	00806134 	movhi	r2,388
 180ff60:	109d1c04 	addi	r2,r2,29808
 180ff64:	1885883a 	add	r2,r3,r2
 180ff68:	e0bfff15 	stw	r2,-4(fp)
 180ff6c:	e0bfff17 	ldw	r2,-4(fp)
 180ff70:	10800117 	ldw	r2,4(r2)
 180ff74:	10c00117 	ldw	r3,4(r2)
 180ff78:	e0bfff17 	ldw	r2,-4(fp)
 180ff7c:	10c00115 	stw	r3,4(r2)
 180ff80:	e0bfff17 	ldw	r2,-4(fp)
 180ff84:	10c00117 	ldw	r3,4(r2)
 180ff88:	e0bfff17 	ldw	r2,-4(fp)
 180ff8c:	10800204 	addi	r2,r2,8
 180ff90:	1880051e 	bne	r3,r2,180ffa8 <vTaskSwitchContext+0x12c>
 180ff94:	e0bfff17 	ldw	r2,-4(fp)
 180ff98:	10800117 	ldw	r2,4(r2)
 180ff9c:	10c00117 	ldw	r3,4(r2)
 180ffa0:	e0bfff17 	ldw	r2,-4(fp)
 180ffa4:	10c00115 	stw	r3,4(r2)
 180ffa8:	e0bfff17 	ldw	r2,-4(fp)
 180ffac:	10800117 	ldw	r2,4(r2)
 180ffb0:	10800317 	ldw	r2,12(r2)
 180ffb4:	d0a7d315 	stw	r2,-24756(gp)
 180ffb8:	e0bffc17 	ldw	r2,-16(fp)
 180ffbc:	d0a7d915 	stw	r2,-24732(gp)
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 180ffc0:	0001883a 	nop
 180ffc4:	e037883a 	mov	sp,fp
 180ffc8:	dfc00117 	ldw	ra,4(sp)
 180ffcc:	df000017 	ldw	fp,0(sp)
 180ffd0:	dec00204 	addi	sp,sp,8
 180ffd4:	f800283a 	ret

0180ffd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 180ffd8:	defffc04 	addi	sp,sp,-16
 180ffdc:	dfc00315 	stw	ra,12(sp)
 180ffe0:	df000215 	stw	fp,8(sp)
 180ffe4:	df000204 	addi	fp,sp,8
 180ffe8:	e13ffe15 	stw	r4,-8(fp)
 180ffec:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 180fff0:	d0a7d317 	ldw	r2,-24756(gp)
 180fff4:	10800604 	addi	r2,r2,24
 180fff8:	100b883a 	mov	r5,r2
 180fffc:	e13ffe17 	ldw	r4,-8(fp)
 1810000:	1826adc0 	call	1826adc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 1810004:	01400044 	movi	r5,1
 1810008:	e13fff17 	ldw	r4,-4(fp)
 181000c:	18116580 	call	1811658 <prvAddCurrentTaskToDelayedList>
}
 1810010:	0001883a 	nop
 1810014:	e037883a 	mov	sp,fp
 1810018:	dfc00117 	ldw	ra,4(sp)
 181001c:	df000017 	ldw	fp,0(sp)
 1810020:	dec00204 	addi	sp,sp,8
 1810024:	f800283a 	ret

01810028 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 1810028:	defffb04 	addi	sp,sp,-20
 181002c:	dfc00415 	stw	ra,16(sp)
 1810030:	df000315 	stw	fp,12(sp)
 1810034:	df000304 	addi	fp,sp,12
 1810038:	e13ffd15 	stw	r4,-12(fp)
 181003c:	e17ffe15 	stw	r5,-8(fp)
 1810040:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 1810044:	d0a7d317 	ldw	r2,-24756(gp)
 1810048:	e0fffe17 	ldw	r3,-8(fp)
 181004c:	18e00034 	orhi	r3,r3,32768
 1810050:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 1810054:	d0a7d317 	ldw	r2,-24756(gp)
 1810058:	10800604 	addi	r2,r2,24
 181005c:	100b883a 	mov	r5,r2
 1810060:	e13ffd17 	ldw	r4,-12(fp)
 1810064:	1826a500 	call	1826a50 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 1810068:	01400044 	movi	r5,1
 181006c:	e13fff17 	ldw	r4,-4(fp)
 1810070:	18116580 	call	1811658 <prvAddCurrentTaskToDelayedList>
}
 1810074:	0001883a 	nop
 1810078:	e037883a 	mov	sp,fp
 181007c:	dfc00117 	ldw	ra,4(sp)
 1810080:	df000017 	ldw	fp,0(sp)
 1810084:	dec00204 	addi	sp,sp,8
 1810088:	f800283a 	ret

0181008c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 181008c:	defffb04 	addi	sp,sp,-20
 1810090:	dfc00415 	stw	ra,16(sp)
 1810094:	df000315 	stw	fp,12(sp)
 1810098:	df000304 	addi	fp,sp,12
 181009c:	e13ffd15 	stw	r4,-12(fp)
 18100a0:	e17ffe15 	stw	r5,-8(fp)
 18100a4:	e1bfff15 	stw	r6,-4(fp)

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 18100a8:	d0a7d317 	ldw	r2,-24756(gp)
 18100ac:	10800604 	addi	r2,r2,24
 18100b0:	100b883a 	mov	r5,r2
 18100b4:	e13ffd17 	ldw	r4,-12(fp)
 18100b8:	1826a500 	call	1826a50 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 18100bc:	e0bfff17 	ldw	r2,-4(fp)
 18100c0:	10000226 	beq	r2,zero,18100cc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 18100c4:	00bfffc4 	movi	r2,-1
 18100c8:	e0bffe15 	stw	r2,-8(fp)
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 18100cc:	e17fff17 	ldw	r5,-4(fp)
 18100d0:	e13ffe17 	ldw	r4,-8(fp)
 18100d4:	18116580 	call	1811658 <prvAddCurrentTaskToDelayedList>
	}
 18100d8:	0001883a 	nop
 18100dc:	e037883a 	mov	sp,fp
 18100e0:	dfc00117 	ldw	ra,4(sp)
 18100e4:	df000017 	ldw	fp,0(sp)
 18100e8:	dec00204 	addi	sp,sp,8
 18100ec:	f800283a 	ret

018100f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 18100f0:	defffb04 	addi	sp,sp,-20
 18100f4:	dfc00415 	stw	ra,16(sp)
 18100f8:	df000315 	stw	fp,12(sp)
 18100fc:	df000304 	addi	fp,sp,12
 1810100:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1810104:	e0bfff17 	ldw	r2,-4(fp)
 1810108:	10800317 	ldw	r2,12(r2)
 181010c:	10800317 	ldw	r2,12(r2)
 1810110:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 1810114:	e0bffe17 	ldw	r2,-8(fp)
 1810118:	10800604 	addi	r2,r2,24
 181011c:	1009883a 	mov	r4,r2
 1810120:	1826bb40 	call	1826bb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1810124:	d0a7e117 	ldw	r2,-24700(gp)
 1810128:	1000171e 	bne	r2,zero,1810188 <xTaskRemoveFromEventList+0x98>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 181012c:	e0bffe17 	ldw	r2,-8(fp)
 1810130:	10800104 	addi	r2,r2,4
 1810134:	1009883a 	mov	r4,r2
 1810138:	1826bb40 	call	1826bb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 181013c:	e0bffe17 	ldw	r2,-8(fp)
 1810140:	10800b17 	ldw	r2,44(r2)
 1810144:	d0e7d917 	ldw	r3,-24732(gp)
 1810148:	1880032e 	bgeu	r3,r2,1810158 <xTaskRemoveFromEventList+0x68>
 181014c:	e0bffe17 	ldw	r2,-8(fp)
 1810150:	10800b17 	ldw	r2,44(r2)
 1810154:	d0a7d915 	stw	r2,-24732(gp)
 1810158:	e0bffe17 	ldw	r2,-8(fp)
 181015c:	10800b17 	ldw	r2,44(r2)
 1810160:	10c00524 	muli	r3,r2,20
 1810164:	00806134 	movhi	r2,388
 1810168:	109d1c04 	addi	r2,r2,29808
 181016c:	1887883a 	add	r3,r3,r2
 1810170:	e0bffe17 	ldw	r2,-8(fp)
 1810174:	10800104 	addi	r2,r2,4
 1810178:	100b883a 	mov	r5,r2
 181017c:	1809883a 	mov	r4,r3
 1810180:	1826a500 	call	1826a50 <vListInsertEnd>
 1810184:	00000606 	br	18101a0 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 1810188:	e0bffe17 	ldw	r2,-8(fp)
 181018c:	10800604 	addi	r2,r2,24
 1810190:	100b883a 	mov	r5,r2
 1810194:	01006134 	movhi	r4,388
 1810198:	211d3f04 	addi	r4,r4,29948
 181019c:	1826a500 	call	1826a50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 18101a0:	e0bffe17 	ldw	r2,-8(fp)
 18101a4:	10800b17 	ldw	r2,44(r2)
 18101a8:	d0e7d317 	ldw	r3,-24756(gp)
 18101ac:	18c00b17 	ldw	r3,44(r3)
 18101b0:	1880052e 	bgeu	r3,r2,18101c8 <xTaskRemoveFromEventList+0xd8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 18101b4:	00800044 	movi	r2,1
 18101b8:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 18101bc:	00800044 	movi	r2,1
 18101c0:	d0a7dc15 	stw	r2,-24720(gp)
 18101c4:	00000106 	br	18101cc <xTaskRemoveFromEventList+0xdc>
	}
	else
	{
		xReturn = pdFALSE;
 18101c8:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 18101cc:	e0bffd17 	ldw	r2,-12(fp)
}
 18101d0:	e037883a 	mov	sp,fp
 18101d4:	dfc00117 	ldw	ra,4(sp)
 18101d8:	df000017 	ldw	fp,0(sp)
 18101dc:	dec00204 	addi	sp,sp,8
 18101e0:	f800283a 	ret

018101e4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 18101e4:	defffb04 	addi	sp,sp,-20
 18101e8:	dfc00415 	stw	ra,16(sp)
 18101ec:	df000315 	stw	fp,12(sp)
 18101f0:	df000304 	addi	fp,sp,12
 18101f4:	e13ffe15 	stw	r4,-8(fp)
 18101f8:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 18101fc:	e0bfff17 	ldw	r2,-4(fp)
 1810200:	10e00034 	orhi	r3,r2,32768
 1810204:	e0bffe17 	ldw	r2,-8(fp)
 1810208:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 181020c:	e0bffe17 	ldw	r2,-8(fp)
 1810210:	10800317 	ldw	r2,12(r2)
 1810214:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 1810218:	e13ffe17 	ldw	r4,-8(fp)
 181021c:	1826bb40 	call	1826bb4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 1810220:	e0bffd17 	ldw	r2,-12(fp)
 1810224:	10800104 	addi	r2,r2,4
 1810228:	1009883a 	mov	r4,r2
 181022c:	1826bb40 	call	1826bb4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 1810230:	e0bffd17 	ldw	r2,-12(fp)
 1810234:	10800b17 	ldw	r2,44(r2)
 1810238:	d0e7d917 	ldw	r3,-24732(gp)
 181023c:	1880032e 	bgeu	r3,r2,181024c <vTaskRemoveFromUnorderedEventList+0x68>
 1810240:	e0bffd17 	ldw	r2,-12(fp)
 1810244:	10800b17 	ldw	r2,44(r2)
 1810248:	d0a7d915 	stw	r2,-24732(gp)
 181024c:	e0bffd17 	ldw	r2,-12(fp)
 1810250:	10800b17 	ldw	r2,44(r2)
 1810254:	10c00524 	muli	r3,r2,20
 1810258:	00806134 	movhi	r2,388
 181025c:	109d1c04 	addi	r2,r2,29808
 1810260:	1887883a 	add	r3,r3,r2
 1810264:	e0bffd17 	ldw	r2,-12(fp)
 1810268:	10800104 	addi	r2,r2,4
 181026c:	100b883a 	mov	r5,r2
 1810270:	1809883a 	mov	r4,r3
 1810274:	1826a500 	call	1826a50 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 1810278:	e0bffd17 	ldw	r2,-12(fp)
 181027c:	10800b17 	ldw	r2,44(r2)
 1810280:	d0e7d317 	ldw	r3,-24756(gp)
 1810284:	18c00b17 	ldw	r3,44(r3)
 1810288:	1880022e 	bgeu	r3,r2,1810294 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 181028c:	00800044 	movi	r2,1
 1810290:	d0a7dc15 	stw	r2,-24720(gp)
	}
}
 1810294:	0001883a 	nop
 1810298:	e037883a 	mov	sp,fp
 181029c:	dfc00117 	ldw	ra,4(sp)
 18102a0:	df000017 	ldw	fp,0(sp)
 18102a4:	dec00204 	addi	sp,sp,8
 18102a8:	f800283a 	ret

018102ac <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 18102ac:	defffd04 	addi	sp,sp,-12
 18102b0:	dfc00215 	stw	ra,8(sp)
 18102b4:	df000115 	stw	fp,4(sp)
 18102b8:	df000104 	addi	fp,sp,4
 18102bc:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 18102c0:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 18102c4:	d0e7dd17 	ldw	r3,-24716(gp)
 18102c8:	e0bfff17 	ldw	r2,-4(fp)
 18102cc:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 18102d0:	d0e7d817 	ldw	r3,-24736(gp)
 18102d4:	e0bfff17 	ldw	r2,-4(fp)
 18102d8:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 18102dc:	1810e380 	call	1810e38 <vTaskExitCritical>
}
 18102e0:	0001883a 	nop
 18102e4:	e037883a 	mov	sp,fp
 18102e8:	dfc00117 	ldw	ra,4(sp)
 18102ec:	df000017 	ldw	fp,0(sp)
 18102f0:	dec00204 	addi	sp,sp,8
 18102f4:	f800283a 	ret

018102f8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 18102f8:	defffe04 	addi	sp,sp,-8
 18102fc:	df000115 	stw	fp,4(sp)
 1810300:	df000104 	addi	fp,sp,4
 1810304:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 1810308:	d0e7dd17 	ldw	r3,-24716(gp)
 181030c:	e0bfff17 	ldw	r2,-4(fp)
 1810310:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 1810314:	d0e7d817 	ldw	r3,-24736(gp)
 1810318:	e0bfff17 	ldw	r2,-4(fp)
 181031c:	10c00115 	stw	r3,4(r2)
}
 1810320:	0001883a 	nop
 1810324:	e037883a 	mov	sp,fp
 1810328:	df000017 	ldw	fp,0(sp)
 181032c:	dec00104 	addi	sp,sp,4
 1810330:	f800283a 	ret

01810334 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 1810334:	defff904 	addi	sp,sp,-28
 1810338:	dfc00615 	stw	ra,24(sp)
 181033c:	df000515 	stw	fp,20(sp)
 1810340:	df000504 	addi	fp,sp,20
 1810344:	e13ffe15 	stw	r4,-8(fp)
 1810348:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 181034c:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 1810350:	d0a7d817 	ldw	r2,-24736(gp)
 1810354:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 1810358:	e0bffe17 	ldw	r2,-8(fp)
 181035c:	10800117 	ldw	r2,4(r2)
 1810360:	e0fffc17 	ldw	r3,-16(fp)
 1810364:	1885c83a 	sub	r2,r3,r2
 1810368:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 181036c:	e0bfff17 	ldw	r2,-4(fp)
 1810370:	10800017 	ldw	r2,0(r2)
 1810374:	10bfffd8 	cmpnei	r2,r2,-1
 1810378:	1000021e 	bne	r2,zero,1810384 <xTaskCheckForTimeOut+0x50>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 181037c:	e03ffb15 	stw	zero,-20(fp)
 1810380:	00001d06 	br	18103f8 <xTaskCheckForTimeOut+0xc4>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 1810384:	e0bffe17 	ldw	r2,-8(fp)
 1810388:	10c00017 	ldw	r3,0(r2)
 181038c:	d0a7dd17 	ldw	r2,-24716(gp)
 1810390:	18800726 	beq	r3,r2,18103b0 <xTaskCheckForTimeOut+0x7c>
 1810394:	e0bffe17 	ldw	r2,-8(fp)
 1810398:	10800117 	ldw	r2,4(r2)
 181039c:	e0fffc17 	ldw	r3,-16(fp)
 18103a0:	18800336 	bltu	r3,r2,18103b0 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 18103a4:	00800044 	movi	r2,1
 18103a8:	e0bffb15 	stw	r2,-20(fp)
 18103ac:	00001206 	br	18103f8 <xTaskCheckForTimeOut+0xc4>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 18103b0:	e0bfff17 	ldw	r2,-4(fp)
 18103b4:	10800017 	ldw	r2,0(r2)
 18103b8:	e0fffd17 	ldw	r3,-12(fp)
 18103bc:	18800a2e 	bgeu	r3,r2,18103e8 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 18103c0:	e0bfff17 	ldw	r2,-4(fp)
 18103c4:	10c00017 	ldw	r3,0(r2)
 18103c8:	e0bffd17 	ldw	r2,-12(fp)
 18103cc:	1887c83a 	sub	r3,r3,r2
 18103d0:	e0bfff17 	ldw	r2,-4(fp)
 18103d4:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 18103d8:	e13ffe17 	ldw	r4,-8(fp)
 18103dc:	18102f80 	call	18102f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 18103e0:	e03ffb15 	stw	zero,-20(fp)
 18103e4:	00000406 	br	18103f8 <xTaskCheckForTimeOut+0xc4>
		}
		else
		{
			*pxTicksToWait = 0;
 18103e8:	e0bfff17 	ldw	r2,-4(fp)
 18103ec:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 18103f0:	00800044 	movi	r2,1
 18103f4:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 18103f8:	1810e380 	call	1810e38 <vTaskExitCritical>

	return xReturn;
 18103fc:	e0bffb17 	ldw	r2,-20(fp)
}
 1810400:	e037883a 	mov	sp,fp
 1810404:	dfc00117 	ldw	ra,4(sp)
 1810408:	df000017 	ldw	fp,0(sp)
 181040c:	dec00204 	addi	sp,sp,8
 1810410:	f800283a 	ret

01810414 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 1810414:	deffff04 	addi	sp,sp,-4
 1810418:	df000015 	stw	fp,0(sp)
 181041c:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 1810420:	00800044 	movi	r2,1
 1810424:	d0a7dc15 	stw	r2,-24720(gp)
}
 1810428:	0001883a 	nop
 181042c:	e037883a 	mov	sp,fp
 1810430:	df000017 	ldw	fp,0(sp)
 1810434:	dec00104 	addi	sp,sp,4
 1810438:	f800283a 	ret

0181043c <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 181043c:	defffc04 	addi	sp,sp,-16
 1810440:	df000315 	stw	fp,12(sp)
 1810444:	df000304 	addi	fp,sp,12
 1810448:	e13fff15 	stw	r4,-4(fp)
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 181044c:	e0bfff17 	ldw	r2,-4(fp)
 1810450:	10000626 	beq	r2,zero,181046c <uxTaskGetTaskNumber+0x30>
		{
			pxTCB = xTask;
 1810454:	e0bfff17 	ldw	r2,-4(fp)
 1810458:	e0bffe15 	stw	r2,-8(fp)
			uxReturn = pxTCB->uxTaskNumber;
 181045c:	e0bffe17 	ldw	r2,-8(fp)
 1810460:	10801917 	ldw	r2,100(r2)
 1810464:	e0bffd15 	stw	r2,-12(fp)
 1810468:	00000106 	br	1810470 <uxTaskGetTaskNumber+0x34>
		}
		else
		{
			uxReturn = 0U;
 181046c:	e03ffd15 	stw	zero,-12(fp)
		}

		return uxReturn;
 1810470:	e0bffd17 	ldw	r2,-12(fp)
	}
 1810474:	e037883a 	mov	sp,fp
 1810478:	df000017 	ldw	fp,0(sp)
 181047c:	dec00104 	addi	sp,sp,4
 1810480:	f800283a 	ret

01810484 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 1810484:	defffc04 	addi	sp,sp,-16
 1810488:	df000315 	stw	fp,12(sp)
 181048c:	df000304 	addi	fp,sp,12
 1810490:	e13ffe15 	stw	r4,-8(fp)
 1810494:	e17fff15 	stw	r5,-4(fp)
	TCB_t * pxTCB;

		if( xTask != NULL )
 1810498:	e0bffe17 	ldw	r2,-8(fp)
 181049c:	10000526 	beq	r2,zero,18104b4 <vTaskSetTaskNumber+0x30>
		{
			pxTCB = xTask;
 18104a0:	e0bffe17 	ldw	r2,-8(fp)
 18104a4:	e0bffd15 	stw	r2,-12(fp)
			pxTCB->uxTaskNumber = uxHandle;
 18104a8:	e0bffd17 	ldw	r2,-12(fp)
 18104ac:	e0ffff17 	ldw	r3,-4(fp)
 18104b0:	10c01915 	stw	r3,100(r2)
		}
	}
 18104b4:	0001883a 	nop
 18104b8:	e037883a 	mov	sp,fp
 18104bc:	df000017 	ldw	fp,0(sp)
 18104c0:	dec00104 	addi	sp,sp,4
 18104c4:	f800283a 	ret

018104c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 18104c8:	defffd04 	addi	sp,sp,-12
 18104cc:	dfc00215 	stw	ra,8(sp)
 18104d0:	df000115 	stw	fp,4(sp)
 18104d4:	df000104 	addi	fp,sp,4
 18104d8:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 18104dc:	181059c0 	call	181059c <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 18104e0:	003ffe06 	br	18104dc <__alt_mem_mem_0+0xff7f04dc>

018104e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 18104e4:	defffd04 	addi	sp,sp,-12
 18104e8:	dfc00215 	stw	ra,8(sp)
 18104ec:	df000115 	stw	fp,4(sp)
 18104f0:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 18104f4:	e03fff15 	stw	zero,-4(fp)
 18104f8:	00000a06 	br	1810524 <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 18104fc:	e0bfff17 	ldw	r2,-4(fp)
 1810500:	10c00524 	muli	r3,r2,20
 1810504:	00806134 	movhi	r2,388
 1810508:	109d1c04 	addi	r2,r2,29808
 181050c:	1885883a 	add	r2,r3,r2
 1810510:	1009883a 	mov	r4,r2
 1810514:	18269bc0 	call	18269bc <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 1810518:	e0bfff17 	ldw	r2,-4(fp)
 181051c:	10800044 	addi	r2,r2,1
 1810520:	e0bfff15 	stw	r2,-4(fp)
 1810524:	e0bfff17 	ldw	r2,-4(fp)
 1810528:	10800170 	cmpltui	r2,r2,5
 181052c:	103ff31e 	bne	r2,zero,18104fc <__alt_mem_mem_0+0xff7f04fc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 1810530:	01006134 	movhi	r4,388
 1810534:	211d3504 	addi	r4,r4,29908
 1810538:	18269bc0 	call	18269bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 181053c:	01006134 	movhi	r4,388
 1810540:	211d3a04 	addi	r4,r4,29928
 1810544:	18269bc0 	call	18269bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 1810548:	01006134 	movhi	r4,388
 181054c:	211d3f04 	addi	r4,r4,29948
 1810550:	18269bc0 	call	18269bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 1810554:	01006134 	movhi	r4,388
 1810558:	211d4404 	addi	r4,r4,29968
 181055c:	18269bc0 	call	18269bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 1810560:	01006134 	movhi	r4,388
 1810564:	211d4904 	addi	r4,r4,29988
 1810568:	18269bc0 	call	18269bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 181056c:	00806134 	movhi	r2,388
 1810570:	109d3504 	addi	r2,r2,29908
 1810574:	d0a7d415 	stw	r2,-24752(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 1810578:	00806134 	movhi	r2,388
 181057c:	109d3a04 	addi	r2,r2,29928
 1810580:	d0a7d515 	stw	r2,-24748(gp)
}
 1810584:	0001883a 	nop
 1810588:	e037883a 	mov	sp,fp
 181058c:	dfc00117 	ldw	ra,4(sp)
 1810590:	df000017 	ldw	fp,0(sp)
 1810594:	dec00204 	addi	sp,sp,8
 1810598:	f800283a 	ret

0181059c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 181059c:	defffd04 	addi	sp,sp,-12
 18105a0:	dfc00215 	stw	ra,8(sp)
 18105a4:	df000115 	stw	fp,4(sp)
 18105a8:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 18105ac:	00001306 	br	18105fc <prvCheckTasksWaitingTermination+0x60>
		{
			taskENTER_CRITICAL();
 18105b0:	1810de40 	call	1810de4 <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 18105b4:	00806134 	movhi	r2,388
 18105b8:	109d4404 	addi	r2,r2,29968
 18105bc:	10800317 	ldw	r2,12(r2)
 18105c0:	10800317 	ldw	r2,12(r2)
 18105c4:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 18105c8:	e0bfff17 	ldw	r2,-4(fp)
 18105cc:	10800104 	addi	r2,r2,4
 18105d0:	1009883a 	mov	r4,r2
 18105d4:	1826bb40 	call	1826bb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 18105d8:	d0a7d717 	ldw	r2,-24740(gp)
 18105dc:	10bfffc4 	addi	r2,r2,-1
 18105e0:	d0a7d715 	stw	r2,-24740(gp)
				--uxDeletedTasksWaitingCleanUp;
 18105e4:	d0a7d617 	ldw	r2,-24744(gp)
 18105e8:	10bfffc4 	addi	r2,r2,-1
 18105ec:	d0a7d615 	stw	r2,-24744(gp)
			}
			taskEXIT_CRITICAL();
 18105f0:	1810e380 	call	1810e38 <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 18105f4:	e13fff17 	ldw	r4,-4(fp)
 18105f8:	181095c0 	call	181095c <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 18105fc:	d0a7d617 	ldw	r2,-24744(gp)
 1810600:	103feb1e 	bne	r2,zero,18105b0 <__alt_mem_mem_0+0xff7f05b0>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 1810604:	0001883a 	nop
 1810608:	e037883a 	mov	sp,fp
 181060c:	dfc00117 	ldw	ra,4(sp)
 1810610:	df000017 	ldw	fp,0(sp)
 1810614:	dec00204 	addi	sp,sp,8
 1810618:	f800283a 	ret

0181061c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 181061c:	defff904 	addi	sp,sp,-28
 1810620:	dfc00615 	stw	ra,24(sp)
 1810624:	df000515 	stw	fp,20(sp)
 1810628:	df000504 	addi	fp,sp,20
 181062c:	e13ffc15 	stw	r4,-16(fp)
 1810630:	e17ffd15 	stw	r5,-12(fp)
 1810634:	e1bffe15 	stw	r6,-8(fp)
 1810638:	e1ffff15 	stw	r7,-4(fp)
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 181063c:	e0bffc17 	ldw	r2,-16(fp)
 1810640:	1000021e 	bne	r2,zero,181064c <vTaskGetInfo+0x30>
 1810644:	d0a7d317 	ldw	r2,-24756(gp)
 1810648:	00000106 	br	1810650 <vTaskGetInfo+0x34>
 181064c:	e0bffc17 	ldw	r2,-16(fp)
 1810650:	e0bffb15 	stw	r2,-20(fp)

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 1810654:	e0bffd17 	ldw	r2,-12(fp)
 1810658:	e0fffb17 	ldw	r3,-20(fp)
 181065c:	10c00015 	stw	r3,0(r2)
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 1810660:	e0bffb17 	ldw	r2,-20(fp)
 1810664:	10c00d04 	addi	r3,r2,52
 1810668:	e0bffd17 	ldw	r2,-12(fp)
 181066c:	10c00115 	stw	r3,4(r2)
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 1810670:	e0bffb17 	ldw	r2,-20(fp)
 1810674:	10c00b17 	ldw	r3,44(r2)
 1810678:	e0bffd17 	ldw	r2,-12(fp)
 181067c:	10c00415 	stw	r3,16(r2)
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 1810680:	e0bffb17 	ldw	r2,-20(fp)
 1810684:	10c00c17 	ldw	r3,48(r2)
 1810688:	e0bffd17 	ldw	r2,-12(fp)
 181068c:	10c00715 	stw	r3,28(r2)
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 1810690:	e0bffb17 	ldw	r2,-20(fp)
 1810694:	10c01817 	ldw	r3,96(r2)
 1810698:	e0bffd17 	ldw	r2,-12(fp)
 181069c:	10c00215 	stw	r3,8(r2)

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 18106a0:	e0bffb17 	ldw	r2,-20(fp)
 18106a4:	10c01a17 	ldw	r3,104(r2)
 18106a8:	e0bffd17 	ldw	r2,-12(fp)
 18106ac:	10c00515 	stw	r3,20(r2)
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 18106b0:	e0bffd17 	ldw	r2,-12(fp)
 18106b4:	10000615 	stw	zero,24(r2)
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 18106b8:	e0bfff17 	ldw	r2,-4(fp)
 18106bc:	10800160 	cmpeqi	r2,r2,5
 18106c0:	1000151e 	bne	r2,zero,1810718 <vTaskGetInfo+0xfc>
		{
			if( pxTCB == pxCurrentTCB )
 18106c4:	d0a7d317 	ldw	r2,-24756(gp)
 18106c8:	e0fffb17 	ldw	r3,-20(fp)
 18106cc:	1880031e 	bne	r3,r2,18106dc <vTaskGetInfo+0xc0>
			{
				pxTaskStatus->eCurrentState = eRunning;
 18106d0:	e0bffd17 	ldw	r2,-12(fp)
 18106d4:	10000315 	stw	zero,12(r2)
 18106d8:	00001406 	br	181072c <vTaskGetInfo+0x110>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 18106dc:	e0bffd17 	ldw	r2,-12(fp)
 18106e0:	e0ffff17 	ldw	r3,-4(fp)
 18106e4:	10c00315 	stw	r3,12(r2)
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 18106e8:	e0bfff17 	ldw	r2,-4(fp)
 18106ec:	108000d8 	cmpnei	r2,r2,3
 18106f0:	10000e1e 	bne	r2,zero,181072c <vTaskGetInfo+0x110>
					{
						vTaskSuspendAll();
 18106f4:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 18106f8:	e0bffb17 	ldw	r2,-20(fp)
 18106fc:	10800a17 	ldw	r2,40(r2)
 1810700:	10000326 	beq	r2,zero,1810710 <vTaskGetInfo+0xf4>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 1810704:	e0bffd17 	ldw	r2,-12(fp)
 1810708:	00c00084 	movi	r3,2
 181070c:	10c00315 	stw	r3,12(r2)
							}
						}
						( void ) xTaskResumeAll();
 1810710:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 1810714:	00000506 	br	181072c <vTaskGetInfo+0x110>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 1810718:	e13ffb17 	ldw	r4,-20(fp)
 181071c:	180f1680 	call	180f168 <eTaskGetState>
 1810720:	1007883a 	mov	r3,r2
 1810724:	e0bffd17 	ldw	r2,-12(fp)
 1810728:	10c00315 	stw	r3,12(r2)
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 181072c:	e0bffe17 	ldw	r2,-8(fp)
 1810730:	10000826 	beq	r2,zero,1810754 <vTaskGetInfo+0x138>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 1810734:	e0bffb17 	ldw	r2,-20(fp)
 1810738:	10800c17 	ldw	r2,48(r2)
 181073c:	1009883a 	mov	r4,r2
 1810740:	181089c0 	call	181089c <prvTaskCheckFreeStackSpace>
 1810744:	1007883a 	mov	r3,r2
 1810748:	e0bffd17 	ldw	r2,-12(fp)
 181074c:	10c00815 	stw	r3,32(r2)
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 1810750:	00000206 	br	181075c <vTaskGetInfo+0x140>
			}
			#endif
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
 1810754:	e0bffd17 	ldw	r2,-12(fp)
 1810758:	10000815 	stw	zero,32(r2)
		}
	}
 181075c:	0001883a 	nop
 1810760:	e037883a 	mov	sp,fp
 1810764:	dfc00117 	ldw	ra,4(sp)
 1810768:	df000017 	ldw	fp,0(sp)
 181076c:	dec00204 	addi	sp,sp,8
 1810770:	f800283a 	ret

01810774 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 1810774:	defff604 	addi	sp,sp,-40
 1810778:	dfc00915 	stw	ra,36(sp)
 181077c:	df000815 	stw	fp,32(sp)
 1810780:	df000804 	addi	fp,sp,32
 1810784:	e13ffd15 	stw	r4,-12(fp)
 1810788:	e17ffe15 	stw	r5,-8(fp)
 181078c:	e1bfff15 	stw	r6,-4(fp)
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 1810790:	e03ff815 	stw	zero,-32(fp)

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 1810794:	e0bffe17 	ldw	r2,-8(fp)
 1810798:	10800017 	ldw	r2,0(r2)
 181079c:	10003926 	beq	r2,zero,1810884 <prvListTasksWithinSingleList+0x110>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 18107a0:	e0bffe17 	ldw	r2,-8(fp)
 18107a4:	e0bff915 	stw	r2,-28(fp)
 18107a8:	e0bff917 	ldw	r2,-28(fp)
 18107ac:	10800117 	ldw	r2,4(r2)
 18107b0:	10c00117 	ldw	r3,4(r2)
 18107b4:	e0bff917 	ldw	r2,-28(fp)
 18107b8:	10c00115 	stw	r3,4(r2)
 18107bc:	e0bff917 	ldw	r2,-28(fp)
 18107c0:	10c00117 	ldw	r3,4(r2)
 18107c4:	e0bff917 	ldw	r2,-28(fp)
 18107c8:	10800204 	addi	r2,r2,8
 18107cc:	1880051e 	bne	r3,r2,18107e4 <prvListTasksWithinSingleList+0x70>
 18107d0:	e0bff917 	ldw	r2,-28(fp)
 18107d4:	10800117 	ldw	r2,4(r2)
 18107d8:	10c00117 	ldw	r3,4(r2)
 18107dc:	e0bff917 	ldw	r2,-28(fp)
 18107e0:	10c00115 	stw	r3,4(r2)
 18107e4:	e0bff917 	ldw	r2,-28(fp)
 18107e8:	10800117 	ldw	r2,4(r2)
 18107ec:	10800317 	ldw	r2,12(r2)
 18107f0:	e0bffa15 	stw	r2,-24(fp)
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 18107f4:	e0bffe17 	ldw	r2,-8(fp)
 18107f8:	e0bffb15 	stw	r2,-20(fp)
 18107fc:	e0bffb17 	ldw	r2,-20(fp)
 1810800:	10800117 	ldw	r2,4(r2)
 1810804:	10c00117 	ldw	r3,4(r2)
 1810808:	e0bffb17 	ldw	r2,-20(fp)
 181080c:	10c00115 	stw	r3,4(r2)
 1810810:	e0bffb17 	ldw	r2,-20(fp)
 1810814:	10c00117 	ldw	r3,4(r2)
 1810818:	e0bffb17 	ldw	r2,-20(fp)
 181081c:	10800204 	addi	r2,r2,8
 1810820:	1880051e 	bne	r3,r2,1810838 <prvListTasksWithinSingleList+0xc4>
 1810824:	e0bffb17 	ldw	r2,-20(fp)
 1810828:	10800117 	ldw	r2,4(r2)
 181082c:	10c00117 	ldw	r3,4(r2)
 1810830:	e0bffb17 	ldw	r2,-20(fp)
 1810834:	10c00115 	stw	r3,4(r2)
 1810838:	e0bffb17 	ldw	r2,-20(fp)
 181083c:	10800117 	ldw	r2,4(r2)
 1810840:	10800317 	ldw	r2,12(r2)
 1810844:	e0bffc15 	stw	r2,-16(fp)
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 1810848:	e0bff817 	ldw	r2,-32(fp)
 181084c:	10800924 	muli	r2,r2,36
 1810850:	e0fffd17 	ldw	r3,-12(fp)
 1810854:	1885883a 	add	r2,r3,r2
 1810858:	e1ffff17 	ldw	r7,-4(fp)
 181085c:	01800044 	movi	r6,1
 1810860:	100b883a 	mov	r5,r2
 1810864:	e13ffc17 	ldw	r4,-16(fp)
 1810868:	181061c0 	call	181061c <vTaskGetInfo>
				uxTask++;
 181086c:	e0bff817 	ldw	r2,-32(fp)
 1810870:	10800044 	addi	r2,r2,1
 1810874:	e0bff815 	stw	r2,-32(fp)
			} while( pxNextTCB != pxFirstTCB );
 1810878:	e0fffc17 	ldw	r3,-16(fp)
 181087c:	e0bffa17 	ldw	r2,-24(fp)
 1810880:	18bfdc1e 	bne	r3,r2,18107f4 <__alt_mem_mem_0+0xff7f07f4>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 1810884:	e0bff817 	ldw	r2,-32(fp)
	}
 1810888:	e037883a 	mov	sp,fp
 181088c:	dfc00117 	ldw	ra,4(sp)
 1810890:	df000017 	ldw	fp,0(sp)
 1810894:	dec00204 	addi	sp,sp,8
 1810898:	f800283a 	ret

0181089c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 181089c:	defffd04 	addi	sp,sp,-12
 18108a0:	df000215 	stw	fp,8(sp)
 18108a4:	df000204 	addi	fp,sp,8
 18108a8:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 18108ac:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 18108b0:	00000606 	br	18108cc <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 18108b4:	e0bfff17 	ldw	r2,-4(fp)
 18108b8:	10800044 	addi	r2,r2,1
 18108bc:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 18108c0:	e0bffe17 	ldw	r2,-8(fp)
 18108c4:	10800044 	addi	r2,r2,1
 18108c8:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 18108cc:	e0bfff17 	ldw	r2,-4(fp)
 18108d0:	10800003 	ldbu	r2,0(r2)
 18108d4:	10803fcc 	andi	r2,r2,255
 18108d8:	10802960 	cmpeqi	r2,r2,165
 18108dc:	103ff51e 	bne	r2,zero,18108b4 <__alt_mem_mem_0+0xff7f08b4>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 18108e0:	e0bffe17 	ldw	r2,-8(fp)
 18108e4:	1004d0ba 	srli	r2,r2,2
 18108e8:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 18108ec:	e0bffe17 	ldw	r2,-8(fp)
	}
 18108f0:	e037883a 	mov	sp,fp
 18108f4:	df000017 	ldw	fp,0(sp)
 18108f8:	dec00104 	addi	sp,sp,4
 18108fc:	f800283a 	ret

01810900 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 1810900:	defffa04 	addi	sp,sp,-24
 1810904:	dfc00515 	stw	ra,20(sp)
 1810908:	df000415 	stw	fp,16(sp)
 181090c:	df000404 	addi	fp,sp,16
 1810910:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 1810914:	e0bfff17 	ldw	r2,-4(fp)
 1810918:	1000021e 	bne	r2,zero,1810924 <uxTaskGetStackHighWaterMark+0x24>
 181091c:	d0a7d317 	ldw	r2,-24756(gp)
 1810920:	00000106 	br	1810928 <uxTaskGetStackHighWaterMark+0x28>
 1810924:	e0bfff17 	ldw	r2,-4(fp)
 1810928:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 181092c:	e0bffc17 	ldw	r2,-16(fp)
 1810930:	10800c17 	ldw	r2,48(r2)
 1810934:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 1810938:	e13ffd17 	ldw	r4,-12(fp)
 181093c:	181089c0 	call	181089c <prvTaskCheckFreeStackSpace>
 1810940:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 1810944:	e0bffe17 	ldw	r2,-8(fp)
	}
 1810948:	e037883a 	mov	sp,fp
 181094c:	dfc00117 	ldw	ra,4(sp)
 1810950:	df000017 	ldw	fp,0(sp)
 1810954:	dec00204 	addi	sp,sp,8
 1810958:	f800283a 	ret

0181095c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 181095c:	defffd04 	addi	sp,sp,-12
 1810960:	dfc00215 	stw	ra,8(sp)
 1810964:	df000115 	stw	fp,4(sp)
 1810968:	df000104 	addi	fp,sp,4
 181096c:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 1810970:	e0bfff17 	ldw	r2,-4(fp)
 1810974:	10800c17 	ldw	r2,48(r2)
 1810978:	1009883a 	mov	r4,r2
 181097c:	18269780 	call	1826978 <vPortFree>
			vPortFree( pxTCB );
 1810980:	e13fff17 	ldw	r4,-4(fp)
 1810984:	18269780 	call	1826978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 1810988:	0001883a 	nop
 181098c:	e037883a 	mov	sp,fp
 1810990:	dfc00117 	ldw	ra,4(sp)
 1810994:	df000017 	ldw	fp,0(sp)
 1810998:	dec00204 	addi	sp,sp,8
 181099c:	f800283a 	ret

018109a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 18109a0:	defffe04 	addi	sp,sp,-8
 18109a4:	df000115 	stw	fp,4(sp)
 18109a8:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 18109ac:	d0a7d417 	ldw	r2,-24752(gp)
 18109b0:	10800017 	ldw	r2,0(r2)
 18109b4:	1000031e 	bne	r2,zero,18109c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 18109b8:	00bfffc4 	movi	r2,-1
 18109bc:	d0a7df15 	stw	r2,-24708(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 18109c0:	00000706 	br	18109e0 <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 18109c4:	d0a7d417 	ldw	r2,-24752(gp)
 18109c8:	10800317 	ldw	r2,12(r2)
 18109cc:	10800317 	ldw	r2,12(r2)
 18109d0:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 18109d4:	e0bfff17 	ldw	r2,-4(fp)
 18109d8:	10800117 	ldw	r2,4(r2)
 18109dc:	d0a7df15 	stw	r2,-24708(gp)
	}
}
 18109e0:	0001883a 	nop
 18109e4:	e037883a 	mov	sp,fp
 18109e8:	df000017 	ldw	fp,0(sp)
 18109ec:	dec00104 	addi	sp,sp,4
 18109f0:	f800283a 	ret

018109f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 18109f4:	defffe04 	addi	sp,sp,-8
 18109f8:	df000115 	stw	fp,4(sp)
 18109fc:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 1810a00:	d0a7d317 	ldw	r2,-24756(gp)
 1810a04:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 1810a08:	e0bfff17 	ldw	r2,-4(fp)
	}
 1810a0c:	e037883a 	mov	sp,fp
 1810a10:	df000017 	ldw	fp,0(sp)
 1810a14:	dec00104 	addi	sp,sp,4
 1810a18:	f800283a 	ret

01810a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 1810a1c:	defffe04 	addi	sp,sp,-8
 1810a20:	df000115 	stw	fp,4(sp)
 1810a24:	df000104 	addi	fp,sp,4
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 1810a28:	d0a7da17 	ldw	r2,-24728(gp)
 1810a2c:	1000031e 	bne	r2,zero,1810a3c <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 1810a30:	00800044 	movi	r2,1
 1810a34:	e0bfff15 	stw	r2,-4(fp)
 1810a38:	00000606 	br	1810a54 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1810a3c:	d0a7e117 	ldw	r2,-24700(gp)
 1810a40:	1000031e 	bne	r2,zero,1810a50 <xTaskGetSchedulerState+0x34>
			{
				xReturn = taskSCHEDULER_RUNNING;
 1810a44:	00800084 	movi	r2,2
 1810a48:	e0bfff15 	stw	r2,-4(fp)
 1810a4c:	00000106 	br	1810a54 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 1810a50:	e03fff15 	stw	zero,-4(fp)
			}
		}

		return xReturn;
 1810a54:	e0bfff17 	ldw	r2,-4(fp)
	}
 1810a58:	e037883a 	mov	sp,fp
 1810a5c:	df000017 	ldw	fp,0(sp)
 1810a60:	dec00104 	addi	sp,sp,4
 1810a64:	f800283a 	ret

01810a68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 1810a68:	defffb04 	addi	sp,sp,-20
 1810a6c:	dfc00415 	stw	ra,16(sp)
 1810a70:	df000315 	stw	fp,12(sp)
 1810a74:	df000304 	addi	fp,sp,12
 1810a78:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 1810a7c:	e0bfff17 	ldw	r2,-4(fp)
 1810a80:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1810a84:	e03ffd15 	stw	zero,-12(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 1810a88:	e0bfff17 	ldw	r2,-4(fp)
 1810a8c:	10004026 	beq	r2,zero,1810b90 <xTaskPriorityInherit+0x128>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 1810a90:	e0bffe17 	ldw	r2,-8(fp)
 1810a94:	10c00b17 	ldw	r3,44(r2)
 1810a98:	d0a7d317 	ldw	r2,-24756(gp)
 1810a9c:	10800b17 	ldw	r2,44(r2)
 1810aa0:	1880342e 	bgeu	r3,r2,1810b74 <xTaskPriorityInherit+0x10c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1810aa4:	e0bffe17 	ldw	r2,-8(fp)
 1810aa8:	10800617 	ldw	r2,24(r2)
 1810aac:	10000616 	blt	r2,zero,1810ac8 <xTaskPriorityInherit+0x60>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1810ab0:	d0a7d317 	ldw	r2,-24756(gp)
 1810ab4:	10800b17 	ldw	r2,44(r2)
 1810ab8:	00c00144 	movi	r3,5
 1810abc:	1887c83a 	sub	r3,r3,r2
 1810ac0:	e0bffe17 	ldw	r2,-8(fp)
 1810ac4:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 1810ac8:	e0bffe17 	ldw	r2,-8(fp)
 1810acc:	10c00517 	ldw	r3,20(r2)
 1810ad0:	e0bffe17 	ldw	r2,-8(fp)
 1810ad4:	10800b17 	ldw	r2,44(r2)
 1810ad8:	11000524 	muli	r4,r2,20
 1810adc:	00806134 	movhi	r2,388
 1810ae0:	109d1c04 	addi	r2,r2,29808
 1810ae4:	2085883a 	add	r2,r4,r2
 1810ae8:	18801b1e 	bne	r3,r2,1810b58 <xTaskPriorityInherit+0xf0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1810aec:	e0bffe17 	ldw	r2,-8(fp)
 1810af0:	10800104 	addi	r2,r2,4
 1810af4:	1009883a 	mov	r4,r2
 1810af8:	1826bb40 	call	1826bb4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1810afc:	d0a7d317 	ldw	r2,-24756(gp)
 1810b00:	10c00b17 	ldw	r3,44(r2)
 1810b04:	e0bffe17 	ldw	r2,-8(fp)
 1810b08:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 1810b0c:	e0bffe17 	ldw	r2,-8(fp)
 1810b10:	10800b17 	ldw	r2,44(r2)
 1810b14:	d0e7d917 	ldw	r3,-24732(gp)
 1810b18:	1880032e 	bgeu	r3,r2,1810b28 <xTaskPriorityInherit+0xc0>
 1810b1c:	e0bffe17 	ldw	r2,-8(fp)
 1810b20:	10800b17 	ldw	r2,44(r2)
 1810b24:	d0a7d915 	stw	r2,-24732(gp)
 1810b28:	e0bffe17 	ldw	r2,-8(fp)
 1810b2c:	10800b17 	ldw	r2,44(r2)
 1810b30:	10c00524 	muli	r3,r2,20
 1810b34:	00806134 	movhi	r2,388
 1810b38:	109d1c04 	addi	r2,r2,29808
 1810b3c:	1887883a 	add	r3,r3,r2
 1810b40:	e0bffe17 	ldw	r2,-8(fp)
 1810b44:	10800104 	addi	r2,r2,4
 1810b48:	100b883a 	mov	r5,r2
 1810b4c:	1809883a 	mov	r4,r3
 1810b50:	1826a500 	call	1826a50 <vListInsertEnd>
 1810b54:	00000406 	br	1810b68 <xTaskPriorityInherit+0x100>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 1810b58:	d0a7d317 	ldw	r2,-24756(gp)
 1810b5c:	10c00b17 	ldw	r3,44(r2)
 1810b60:	e0bffe17 	ldw	r2,-8(fp)
 1810b64:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 1810b68:	00800044 	movi	r2,1
 1810b6c:	e0bffd15 	stw	r2,-12(fp)
 1810b70:	00000706 	br	1810b90 <xTaskPriorityInherit+0x128>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 1810b74:	e0bffe17 	ldw	r2,-8(fp)
 1810b78:	10c01a17 	ldw	r3,104(r2)
 1810b7c:	d0a7d317 	ldw	r2,-24756(gp)
 1810b80:	10800b17 	ldw	r2,44(r2)
 1810b84:	1880022e 	bgeu	r3,r2,1810b90 <xTaskPriorityInherit+0x128>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 1810b88:	00800044 	movi	r2,1
 1810b8c:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 1810b90:	e0bffd17 	ldw	r2,-12(fp)
	}
 1810b94:	e037883a 	mov	sp,fp
 1810b98:	dfc00117 	ldw	ra,4(sp)
 1810b9c:	df000017 	ldw	fp,0(sp)
 1810ba0:	dec00204 	addi	sp,sp,8
 1810ba4:	f800283a 	ret

01810ba8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 1810ba8:	defffb04 	addi	sp,sp,-20
 1810bac:	dfc00415 	stw	ra,16(sp)
 1810bb0:	df000315 	stw	fp,12(sp)
 1810bb4:	df000304 	addi	fp,sp,12
 1810bb8:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1810bbc:	e0bfff17 	ldw	r2,-4(fp)
 1810bc0:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 1810bc4:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 1810bc8:	e0bfff17 	ldw	r2,-4(fp)
 1810bcc:	10002f26 	beq	r2,zero,1810c8c <xTaskPriorityDisinherit+0xe4>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 1810bd0:	e0bffe17 	ldw	r2,-8(fp)
 1810bd4:	10801b17 	ldw	r2,108(r2)
 1810bd8:	10ffffc4 	addi	r3,r2,-1
 1810bdc:	e0bffe17 	ldw	r2,-8(fp)
 1810be0:	10c01b15 	stw	r3,108(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 1810be4:	e0bffe17 	ldw	r2,-8(fp)
 1810be8:	10c00b17 	ldw	r3,44(r2)
 1810bec:	e0bffe17 	ldw	r2,-8(fp)
 1810bf0:	10801a17 	ldw	r2,104(r2)
 1810bf4:	18802526 	beq	r3,r2,1810c8c <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 1810bf8:	e0bffe17 	ldw	r2,-8(fp)
 1810bfc:	10801b17 	ldw	r2,108(r2)
 1810c00:	1000221e 	bne	r2,zero,1810c8c <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1810c04:	e0bffe17 	ldw	r2,-8(fp)
 1810c08:	10800104 	addi	r2,r2,4
 1810c0c:	1009883a 	mov	r4,r2
 1810c10:	1826bb40 	call	1826bb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 1810c14:	e0bffe17 	ldw	r2,-8(fp)
 1810c18:	10c01a17 	ldw	r3,104(r2)
 1810c1c:	e0bffe17 	ldw	r2,-8(fp)
 1810c20:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1810c24:	e0bffe17 	ldw	r2,-8(fp)
 1810c28:	10800b17 	ldw	r2,44(r2)
 1810c2c:	00c00144 	movi	r3,5
 1810c30:	1887c83a 	sub	r3,r3,r2
 1810c34:	e0bffe17 	ldw	r2,-8(fp)
 1810c38:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 1810c3c:	e0bffe17 	ldw	r2,-8(fp)
 1810c40:	10800b17 	ldw	r2,44(r2)
 1810c44:	d0e7d917 	ldw	r3,-24732(gp)
 1810c48:	1880032e 	bgeu	r3,r2,1810c58 <xTaskPriorityDisinherit+0xb0>
 1810c4c:	e0bffe17 	ldw	r2,-8(fp)
 1810c50:	10800b17 	ldw	r2,44(r2)
 1810c54:	d0a7d915 	stw	r2,-24732(gp)
 1810c58:	e0bffe17 	ldw	r2,-8(fp)
 1810c5c:	10800b17 	ldw	r2,44(r2)
 1810c60:	10c00524 	muli	r3,r2,20
 1810c64:	00806134 	movhi	r2,388
 1810c68:	109d1c04 	addi	r2,r2,29808
 1810c6c:	1887883a 	add	r3,r3,r2
 1810c70:	e0bffe17 	ldw	r2,-8(fp)
 1810c74:	10800104 	addi	r2,r2,4
 1810c78:	100b883a 	mov	r5,r2
 1810c7c:	1809883a 	mov	r4,r3
 1810c80:	1826a500 	call	1826a50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 1810c84:	00800044 	movi	r2,1
 1810c88:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 1810c8c:	e0bffd17 	ldw	r2,-12(fp)
	}
 1810c90:	e037883a 	mov	sp,fp
 1810c94:	dfc00117 	ldw	ra,4(sp)
 1810c98:	df000017 	ldw	fp,0(sp)
 1810c9c:	dec00204 	addi	sp,sp,8
 1810ca0:	f800283a 	ret

01810ca4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 1810ca4:	defff804 	addi	sp,sp,-32
 1810ca8:	dfc00715 	stw	ra,28(sp)
 1810cac:	df000615 	stw	fp,24(sp)
 1810cb0:	df000604 	addi	fp,sp,24
 1810cb4:	e13ffe15 	stw	r4,-8(fp)
 1810cb8:	e17fff15 	stw	r5,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 1810cbc:	e0bffe17 	ldw	r2,-8(fp)
 1810cc0:	e0bffb15 	stw	r2,-20(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 1810cc4:	00800044 	movi	r2,1
 1810cc8:	e0bffc15 	stw	r2,-16(fp)

		if( pxMutexHolder != NULL )
 1810ccc:	e0bffe17 	ldw	r2,-8(fp)
 1810cd0:	10003e26 	beq	r2,zero,1810dcc <vTaskPriorityDisinheritAfterTimeout+0x128>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 1810cd4:	e0bffb17 	ldw	r2,-20(fp)
 1810cd8:	10c01a17 	ldw	r3,104(r2)
 1810cdc:	e0bfff17 	ldw	r2,-4(fp)
 1810ce0:	1880032e 	bgeu	r3,r2,1810cf0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 1810ce4:	e0bfff17 	ldw	r2,-4(fp)
 1810ce8:	e0bffa15 	stw	r2,-24(fp)
 1810cec:	00000306 	br	1810cfc <vTaskPriorityDisinheritAfterTimeout+0x58>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 1810cf0:	e0bffb17 	ldw	r2,-20(fp)
 1810cf4:	10801a17 	ldw	r2,104(r2)
 1810cf8:	e0bffa15 	stw	r2,-24(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 1810cfc:	e0bffb17 	ldw	r2,-20(fp)
 1810d00:	10c00b17 	ldw	r3,44(r2)
 1810d04:	e0bffa17 	ldw	r2,-24(fp)
 1810d08:	18803026 	beq	r3,r2,1810dcc <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 1810d0c:	e0bffb17 	ldw	r2,-20(fp)
 1810d10:	10c01b17 	ldw	r3,108(r2)
 1810d14:	e0bffc17 	ldw	r2,-16(fp)
 1810d18:	18802c1e 	bne	r3,r2,1810dcc <vTaskPriorityDisinheritAfterTimeout+0x128>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1810d1c:	e0bffb17 	ldw	r2,-20(fp)
 1810d20:	10800b17 	ldw	r2,44(r2)
 1810d24:	e0bffd15 	stw	r2,-12(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 1810d28:	e0bffb17 	ldw	r2,-20(fp)
 1810d2c:	e0fffa17 	ldw	r3,-24(fp)
 1810d30:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 1810d34:	e0bffb17 	ldw	r2,-20(fp)
 1810d38:	10800617 	ldw	r2,24(r2)
 1810d3c:	10000516 	blt	r2,zero,1810d54 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1810d40:	00c00144 	movi	r3,5
 1810d44:	e0bffa17 	ldw	r2,-24(fp)
 1810d48:	1887c83a 	sub	r3,r3,r2
 1810d4c:	e0bffb17 	ldw	r2,-20(fp)
 1810d50:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 1810d54:	e0bffb17 	ldw	r2,-20(fp)
 1810d58:	10c00517 	ldw	r3,20(r2)
 1810d5c:	e0bffd17 	ldw	r2,-12(fp)
 1810d60:	11000524 	muli	r4,r2,20
 1810d64:	00806134 	movhi	r2,388
 1810d68:	109d1c04 	addi	r2,r2,29808
 1810d6c:	2085883a 	add	r2,r4,r2
 1810d70:	1880161e 	bne	r3,r2,1810dcc <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1810d74:	e0bffb17 	ldw	r2,-20(fp)
 1810d78:	10800104 	addi	r2,r2,4
 1810d7c:	1009883a 	mov	r4,r2
 1810d80:	1826bb40 	call	1826bb4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 1810d84:	e0bffb17 	ldw	r2,-20(fp)
 1810d88:	10800b17 	ldw	r2,44(r2)
 1810d8c:	d0e7d917 	ldw	r3,-24732(gp)
 1810d90:	1880032e 	bgeu	r3,r2,1810da0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 1810d94:	e0bffb17 	ldw	r2,-20(fp)
 1810d98:	10800b17 	ldw	r2,44(r2)
 1810d9c:	d0a7d915 	stw	r2,-24732(gp)
 1810da0:	e0bffb17 	ldw	r2,-20(fp)
 1810da4:	10800b17 	ldw	r2,44(r2)
 1810da8:	10c00524 	muli	r3,r2,20
 1810dac:	00806134 	movhi	r2,388
 1810db0:	109d1c04 	addi	r2,r2,29808
 1810db4:	1887883a 	add	r3,r3,r2
 1810db8:	e0bffb17 	ldw	r2,-20(fp)
 1810dbc:	10800104 	addi	r2,r2,4
 1810dc0:	100b883a 	mov	r5,r2
 1810dc4:	1809883a 	mov	r4,r3
 1810dc8:	1826a500 	call	1826a50 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1810dcc:	0001883a 	nop
 1810dd0:	e037883a 	mov	sp,fp
 1810dd4:	dfc00117 	ldw	ra,4(sp)
 1810dd8:	df000017 	ldw	fp,0(sp)
 1810ddc:	dec00204 	addi	sp,sp,8
 1810de0:	f800283a 	ret

01810de4 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 1810de4:	defffe04 	addi	sp,sp,-8
 1810de8:	df000115 	stw	fp,4(sp)
 1810dec:	df000104 	addi	fp,sp,4
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1810df0:	0005303a 	rdctl	r2,status
 1810df4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1810df8:	e0ffff17 	ldw	r3,-4(fp)
 1810dfc:	00bfff84 	movi	r2,-2
 1810e00:	1884703a 	and	r2,r3,r2
 1810e04:	1001703a 	wrctl	status,r2
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
 1810e08:	d0a7da17 	ldw	r2,-24728(gp)
 1810e0c:	10000526 	beq	r2,zero,1810e24 <vTaskEnterCritical+0x40>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 1810e10:	d0a7d317 	ldw	r2,-24756(gp)
 1810e14:	10c01717 	ldw	r3,92(r2)
 1810e18:	18c00044 	addi	r3,r3,1
 1810e1c:	10c01715 	stw	r3,92(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 1810e20:	d0a7d317 	ldw	r2,-24756(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1810e24:	0001883a 	nop
 1810e28:	e037883a 	mov	sp,fp
 1810e2c:	df000017 	ldw	fp,0(sp)
 1810e30:	dec00104 	addi	sp,sp,4
 1810e34:	f800283a 	ret

01810e38 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 1810e38:	defffe04 	addi	sp,sp,-8
 1810e3c:	df000115 	stw	fp,4(sp)
 1810e40:	df000104 	addi	fp,sp,4
		if( xSchedulerRunning != pdFALSE )
 1810e44:	d0a7da17 	ldw	r2,-24728(gp)
 1810e48:	10000e26 	beq	r2,zero,1810e84 <vTaskExitCritical+0x4c>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 1810e4c:	d0a7d317 	ldw	r2,-24756(gp)
 1810e50:	10801717 	ldw	r2,92(r2)
 1810e54:	10000b26 	beq	r2,zero,1810e84 <vTaskExitCritical+0x4c>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 1810e58:	d0a7d317 	ldw	r2,-24756(gp)
 1810e5c:	10c01717 	ldw	r3,92(r2)
 1810e60:	18ffffc4 	addi	r3,r3,-1
 1810e64:	10c01715 	stw	r3,92(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 1810e68:	d0a7d317 	ldw	r2,-24756(gp)
 1810e6c:	10801717 	ldw	r2,92(r2)
 1810e70:	1000041e 	bne	r2,zero,1810e84 <vTaskExitCritical+0x4c>
 1810e74:	00800044 	movi	r2,1
 1810e78:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1810e7c:	e0bfff17 	ldw	r2,-4(fp)
 1810e80:	1001703a 	wrctl	status,r2
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 1810e84:	0001883a 	nop
 1810e88:	e037883a 	mov	sp,fp
 1810e8c:	df000017 	ldw	fp,0(sp)
 1810e90:	dec00104 	addi	sp,sp,4
 1810e94:	f800283a 	ret

01810e98 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 1810e98:	defffe04 	addi	sp,sp,-8
 1810e9c:	df000115 	stw	fp,4(sp)
 1810ea0:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 1810ea4:	d0a7d317 	ldw	r2,-24756(gp)
 1810ea8:	10800617 	ldw	r2,24(r2)
 1810eac:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1810eb0:	d0a7d317 	ldw	r2,-24756(gp)
 1810eb4:	d0e7d317 	ldw	r3,-24756(gp)
 1810eb8:	18c00b17 	ldw	r3,44(r3)
 1810ebc:	01000144 	movi	r4,5
 1810ec0:	20c7c83a 	sub	r3,r4,r3
 1810ec4:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 1810ec8:	e0bfff17 	ldw	r2,-4(fp)
}
 1810ecc:	e037883a 	mov	sp,fp
 1810ed0:	df000017 	ldw	fp,0(sp)
 1810ed4:	dec00104 	addi	sp,sp,4
 1810ed8:	f800283a 	ret

01810edc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 1810edc:	deffff04 	addi	sp,sp,-4
 1810ee0:	df000015 	stw	fp,0(sp)
 1810ee4:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 1810ee8:	d0a7d317 	ldw	r2,-24756(gp)
 1810eec:	10000426 	beq	r2,zero,1810f00 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 1810ef0:	d0a7d317 	ldw	r2,-24756(gp)
 1810ef4:	10c01b17 	ldw	r3,108(r2)
 1810ef8:	18c00044 	addi	r3,r3,1
 1810efc:	10c01b15 	stw	r3,108(r2)
		}

		return pxCurrentTCB;
 1810f00:	d0a7d317 	ldw	r2,-24756(gp)
	}
 1810f04:	e037883a 	mov	sp,fp
 1810f08:	df000017 	ldw	fp,0(sp)
 1810f0c:	dec00104 	addi	sp,sp,4
 1810f10:	f800283a 	ret

01810f14 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 1810f14:	defffb04 	addi	sp,sp,-20
 1810f18:	dfc00415 	stw	ra,16(sp)
 1810f1c:	df000315 	stw	fp,12(sp)
 1810f20:	df000304 	addi	fp,sp,12
 1810f24:	e13ffe15 	stw	r4,-8(fp)
 1810f28:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 1810f2c:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 1810f30:	d0a7d317 	ldw	r2,-24756(gp)
 1810f34:	10801c17 	ldw	r2,112(r2)
 1810f38:	1000091e 	bne	r2,zero,1810f60 <ulTaskNotifyTake+0x4c>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 1810f3c:	d0a7d317 	ldw	r2,-24756(gp)
 1810f40:	00c00044 	movi	r3,1
 1810f44:	10c01d05 	stb	r3,116(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 1810f48:	e0bfff17 	ldw	r2,-4(fp)
 1810f4c:	10000426 	beq	r2,zero,1810f60 <ulTaskNotifyTake+0x4c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 1810f50:	01400044 	movi	r5,1
 1810f54:	e13fff17 	ldw	r4,-4(fp)
 1810f58:	18116580 	call	1811658 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 1810f5c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 1810f60:	1810e380 	call	1810e38 <vTaskExitCritical>

		taskENTER_CRITICAL();
 1810f64:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 1810f68:	d0a7d317 	ldw	r2,-24756(gp)
 1810f6c:	10801c17 	ldw	r2,112(r2)
 1810f70:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 1810f74:	e0bffd17 	ldw	r2,-12(fp)
 1810f78:	10000926 	beq	r2,zero,1810fa0 <ulTaskNotifyTake+0x8c>
			{
				if( xClearCountOnExit != pdFALSE )
 1810f7c:	e0bffe17 	ldw	r2,-8(fp)
 1810f80:	10000326 	beq	r2,zero,1810f90 <ulTaskNotifyTake+0x7c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 1810f84:	d0a7d317 	ldw	r2,-24756(gp)
 1810f88:	10001c15 	stw	zero,112(r2)
 1810f8c:	00000406 	br	1810fa0 <ulTaskNotifyTake+0x8c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 1810f90:	d0a7d317 	ldw	r2,-24756(gp)
 1810f94:	e0fffd17 	ldw	r3,-12(fp)
 1810f98:	18ffffc4 	addi	r3,r3,-1
 1810f9c:	10c01c15 	stw	r3,112(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1810fa0:	d0a7d317 	ldw	r2,-24756(gp)
 1810fa4:	10001d05 	stb	zero,116(r2)
		}
		taskEXIT_CRITICAL();
 1810fa8:	1810e380 	call	1810e38 <vTaskExitCritical>

		return ulReturn;
 1810fac:	e0bffd17 	ldw	r2,-12(fp)
	}
 1810fb0:	e037883a 	mov	sp,fp
 1810fb4:	dfc00117 	ldw	ra,4(sp)
 1810fb8:	df000017 	ldw	fp,0(sp)
 1810fbc:	dec00204 	addi	sp,sp,8
 1810fc0:	f800283a 	ret

01810fc4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 1810fc4:	defff904 	addi	sp,sp,-28
 1810fc8:	dfc00615 	stw	ra,24(sp)
 1810fcc:	df000515 	stw	fp,20(sp)
 1810fd0:	df000504 	addi	fp,sp,20
 1810fd4:	e13ffc15 	stw	r4,-16(fp)
 1810fd8:	e17ffd15 	stw	r5,-12(fp)
 1810fdc:	e1bffe15 	stw	r6,-8(fp)
 1810fe0:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 1810fe4:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 1810fe8:	d0a7d317 	ldw	r2,-24756(gp)
 1810fec:	10801d03 	ldbu	r2,116(r2)
 1810ff0:	10803fcc 	andi	r2,r2,255
 1810ff4:	108000a0 	cmpeqi	r2,r2,2
 1810ff8:	10000f1e 	bne	r2,zero,1811038 <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 1810ffc:	d0a7d317 	ldw	r2,-24756(gp)
 1811000:	11001c17 	ldw	r4,112(r2)
 1811004:	e0fffc17 	ldw	r3,-16(fp)
 1811008:	00c6303a 	nor	r3,zero,r3
 181100c:	20c6703a 	and	r3,r4,r3
 1811010:	10c01c15 	stw	r3,112(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 1811014:	d0a7d317 	ldw	r2,-24756(gp)
 1811018:	00c00044 	movi	r3,1
 181101c:	10c01d05 	stb	r3,116(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 1811020:	e0bfff17 	ldw	r2,-4(fp)
 1811024:	10000426 	beq	r2,zero,1811038 <xTaskNotifyWait+0x74>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 1811028:	01400044 	movi	r5,1
 181102c:	e13fff17 	ldw	r4,-4(fp)
 1811030:	18116580 	call	1811658 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 1811034:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 1811038:	1810e380 	call	1810e38 <vTaskExitCritical>

		taskENTER_CRITICAL();
 181103c:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 1811040:	e0bffe17 	ldw	r2,-8(fp)
 1811044:	10000426 	beq	r2,zero,1811058 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 1811048:	d0a7d317 	ldw	r2,-24756(gp)
 181104c:	10c01c17 	ldw	r3,112(r2)
 1811050:	e0bffe17 	ldw	r2,-8(fp)
 1811054:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 1811058:	d0a7d317 	ldw	r2,-24756(gp)
 181105c:	10801d03 	ldbu	r2,116(r2)
 1811060:	10803fcc 	andi	r2,r2,255
 1811064:	108000a0 	cmpeqi	r2,r2,2
 1811068:	1000021e 	bne	r2,zero,1811074 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 181106c:	e03ffb15 	stw	zero,-20(fp)
 1811070:	00000806 	br	1811094 <xTaskNotifyWait+0xd0>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 1811074:	d0a7d317 	ldw	r2,-24756(gp)
 1811078:	11001c17 	ldw	r4,112(r2)
 181107c:	e0fffd17 	ldw	r3,-12(fp)
 1811080:	00c6303a 	nor	r3,zero,r3
 1811084:	20c6703a 	and	r3,r4,r3
 1811088:	10c01c15 	stw	r3,112(r2)
				xReturn = pdTRUE;
 181108c:	00800044 	movi	r2,1
 1811090:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1811094:	d0a7d317 	ldw	r2,-24756(gp)
 1811098:	10001d05 	stb	zero,116(r2)
		}
		taskEXIT_CRITICAL();
 181109c:	1810e380 	call	1810e38 <vTaskExitCritical>

		return xReturn;
 18110a0:	e0bffb17 	ldw	r2,-20(fp)
	}
 18110a4:	e037883a 	mov	sp,fp
 18110a8:	dfc00117 	ldw	ra,4(sp)
 18110ac:	df000017 	ldw	fp,0(sp)
 18110b0:	dec00204 	addi	sp,sp,8
 18110b4:	f800283a 	ret

018110b8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 18110b8:	defff704 	addi	sp,sp,-36
 18110bc:	dfc00815 	stw	ra,32(sp)
 18110c0:	df000715 	stw	fp,28(sp)
 18110c4:	df000704 	addi	fp,sp,28
 18110c8:	e13ffc15 	stw	r4,-16(fp)
 18110cc:	e17ffd15 	stw	r5,-12(fp)
 18110d0:	e1bffe15 	stw	r6,-8(fp)
 18110d4:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 18110d8:	00800044 	movi	r2,1
 18110dc:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 18110e0:	e0bffc17 	ldw	r2,-16(fp)
 18110e4:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 18110e8:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 18110ec:	e0bfff17 	ldw	r2,-4(fp)
 18110f0:	10000426 	beq	r2,zero,1811104 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 18110f4:	e0bffa17 	ldw	r2,-24(fp)
 18110f8:	10c01c17 	ldw	r3,112(r2)
 18110fc:	e0bfff17 	ldw	r2,-4(fp)
 1811100:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 1811104:	e0bffa17 	ldw	r2,-24(fp)
 1811108:	10801d03 	ldbu	r2,116(r2)
 181110c:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 1811110:	e0bffa17 	ldw	r2,-24(fp)
 1811114:	00c00084 	movi	r3,2
 1811118:	10c01d05 	stb	r3,116(r2)

			switch( eAction )
 181111c:	e0bffe17 	ldw	r2,-8(fp)
 1811120:	10800168 	cmpgeui	r2,r2,5
 1811124:	1000261e 	bne	r2,zero,18111c0 <xTaskGenericNotify+0x108>
 1811128:	e0bffe17 	ldw	r2,-8(fp)
 181112c:	100690ba 	slli	r3,r2,2
 1811130:	00806074 	movhi	r2,385
 1811134:	10845104 	addi	r2,r2,4420
 1811138:	1885883a 	add	r2,r3,r2
 181113c:	10800017 	ldw	r2,0(r2)
 1811140:	1000683a 	jmp	r2
 1811144:	018111c8 	cmpgei	r6,zero,1095
 1811148:	01811158 	cmpnei	r6,zero,1093
 181114c:	01811174 	movhi	r6,1093
 1811150:	0181118c 	andi	r6,zero,1094
 1811154:	0181119c 	xori	r6,zero,1094
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 1811158:	e0bffa17 	ldw	r2,-24(fp)
 181115c:	10c01c17 	ldw	r3,112(r2)
 1811160:	e0bffd17 	ldw	r2,-12(fp)
 1811164:	1886b03a 	or	r3,r3,r2
 1811168:	e0bffa17 	ldw	r2,-24(fp)
 181116c:	10c01c15 	stw	r3,112(r2)
					break;
 1811170:	00001606 	br	18111cc <xTaskGenericNotify+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 1811174:	e0bffa17 	ldw	r2,-24(fp)
 1811178:	10801c17 	ldw	r2,112(r2)
 181117c:	10c00044 	addi	r3,r2,1
 1811180:	e0bffa17 	ldw	r2,-24(fp)
 1811184:	10c01c15 	stw	r3,112(r2)
					break;
 1811188:	00001006 	br	18111cc <xTaskGenericNotify+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 181118c:	e0bffa17 	ldw	r2,-24(fp)
 1811190:	e0fffd17 	ldw	r3,-12(fp)
 1811194:	10c01c15 	stw	r3,112(r2)
					break;
 1811198:	00000c06 	br	18111cc <xTaskGenericNotify+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 181119c:	e0bffb03 	ldbu	r2,-20(fp)
 18111a0:	108000a0 	cmpeqi	r2,r2,2
 18111a4:	1000041e 	bne	r2,zero,18111b8 <xTaskGenericNotify+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 18111a8:	e0bffa17 	ldw	r2,-24(fp)
 18111ac:	e0fffd17 	ldw	r3,-12(fp)
 18111b0:	10c01c15 	stw	r3,112(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 18111b4:	00000506 	br	18111cc <xTaskGenericNotify+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 18111b8:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 18111bc:	00000306 	br	18111cc <xTaskGenericNotify+0x114>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 18111c0:	0001883a 	nop
 18111c4:	00000106 	br	18111cc <xTaskGenericNotify+0x114>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 18111c8:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 18111cc:	e0bffb03 	ldbu	r2,-20(fp)
 18111d0:	10800058 	cmpnei	r2,r2,1
 18111d4:	10001c1e 	bne	r2,zero,1811248 <xTaskGenericNotify+0x190>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 18111d8:	e0bffa17 	ldw	r2,-24(fp)
 18111dc:	10800104 	addi	r2,r2,4
 18111e0:	1009883a 	mov	r4,r2
 18111e4:	1826bb40 	call	1826bb4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 18111e8:	e0bffa17 	ldw	r2,-24(fp)
 18111ec:	10800b17 	ldw	r2,44(r2)
 18111f0:	d0e7d917 	ldw	r3,-24732(gp)
 18111f4:	1880032e 	bgeu	r3,r2,1811204 <xTaskGenericNotify+0x14c>
 18111f8:	e0bffa17 	ldw	r2,-24(fp)
 18111fc:	10800b17 	ldw	r2,44(r2)
 1811200:	d0a7d915 	stw	r2,-24732(gp)
 1811204:	e0bffa17 	ldw	r2,-24(fp)
 1811208:	10800b17 	ldw	r2,44(r2)
 181120c:	10c00524 	muli	r3,r2,20
 1811210:	00806134 	movhi	r2,388
 1811214:	109d1c04 	addi	r2,r2,29808
 1811218:	1887883a 	add	r3,r3,r2
 181121c:	e0bffa17 	ldw	r2,-24(fp)
 1811220:	10800104 	addi	r2,r2,4
 1811224:	100b883a 	mov	r5,r2
 1811228:	1809883a 	mov	r4,r3
 181122c:	1826a500 	call	1826a50 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 1811230:	e0bffa17 	ldw	r2,-24(fp)
 1811234:	10800b17 	ldw	r2,44(r2)
 1811238:	d0e7d317 	ldw	r3,-24756(gp)
 181123c:	18c00b17 	ldw	r3,44(r3)
 1811240:	1880012e 	bgeu	r3,r2,1811248 <xTaskGenericNotify+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 1811244:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 1811248:	1810e380 	call	1810e38 <vTaskExitCritical>

		return xReturn;
 181124c:	e0bff917 	ldw	r2,-28(fp)
	}
 1811250:	e037883a 	mov	sp,fp
 1811254:	dfc00117 	ldw	ra,4(sp)
 1811258:	df000017 	ldw	fp,0(sp)
 181125c:	dec00204 	addi	sp,sp,8
 1811260:	f800283a 	ret

01811264 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 1811264:	defff604 	addi	sp,sp,-40
 1811268:	dfc00915 	stw	ra,36(sp)
 181126c:	df000815 	stw	fp,32(sp)
 1811270:	df000804 	addi	fp,sp,32
 1811274:	e13ffc15 	stw	r4,-16(fp)
 1811278:	e17ffd15 	stw	r5,-12(fp)
 181127c:	e1bffe15 	stw	r6,-8(fp)
 1811280:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 1811284:	00800044 	movi	r2,1
 1811288:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 181128c:	e0bffc17 	ldw	r2,-16(fp)
 1811290:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1811294:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 1811298:	e0bfff17 	ldw	r2,-4(fp)
 181129c:	10000426 	beq	r2,zero,18112b0 <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 18112a0:	e0bff917 	ldw	r2,-28(fp)
 18112a4:	10c01c17 	ldw	r3,112(r2)
 18112a8:	e0bfff17 	ldw	r2,-4(fp)
 18112ac:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 18112b0:	e0bff917 	ldw	r2,-28(fp)
 18112b4:	10801d03 	ldbu	r2,116(r2)
 18112b8:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 18112bc:	e0bff917 	ldw	r2,-28(fp)
 18112c0:	00c00084 	movi	r3,2
 18112c4:	10c01d05 	stb	r3,116(r2)

			switch( eAction )
 18112c8:	e0bffe17 	ldw	r2,-8(fp)
 18112cc:	10800168 	cmpgeui	r2,r2,5
 18112d0:	1000261e 	bne	r2,zero,181136c <xTaskGenericNotifyFromISR+0x108>
 18112d4:	e0bffe17 	ldw	r2,-8(fp)
 18112d8:	100690ba 	slli	r3,r2,2
 18112dc:	00806074 	movhi	r2,385
 18112e0:	1084bc04 	addi	r2,r2,4848
 18112e4:	1885883a 	add	r2,r3,r2
 18112e8:	10800017 	ldw	r2,0(r2)
 18112ec:	1000683a 	jmp	r2
 18112f0:	01811374 	movhi	r6,1101
 18112f4:	01811304 	movi	r6,1100
 18112f8:	01811320 	cmpeqi	r6,zero,1100
 18112fc:	01811338 	rdprs	r6,zero,1100
 1811300:	01811348 	cmpgei	r6,zero,1101
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 1811304:	e0bff917 	ldw	r2,-28(fp)
 1811308:	10c01c17 	ldw	r3,112(r2)
 181130c:	e0bffd17 	ldw	r2,-12(fp)
 1811310:	1886b03a 	or	r3,r3,r2
 1811314:	e0bff917 	ldw	r2,-28(fp)
 1811318:	10c01c15 	stw	r3,112(r2)
					break;
 181131c:	00001606 	br	1811378 <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 1811320:	e0bff917 	ldw	r2,-28(fp)
 1811324:	10801c17 	ldw	r2,112(r2)
 1811328:	10c00044 	addi	r3,r2,1
 181132c:	e0bff917 	ldw	r2,-28(fp)
 1811330:	10c01c15 	stw	r3,112(r2)
					break;
 1811334:	00001006 	br	1811378 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 1811338:	e0bff917 	ldw	r2,-28(fp)
 181133c:	e0fffd17 	ldw	r3,-12(fp)
 1811340:	10c01c15 	stw	r3,112(r2)
					break;
 1811344:	00000c06 	br	1811378 <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 1811348:	e0bffb03 	ldbu	r2,-20(fp)
 181134c:	108000a0 	cmpeqi	r2,r2,2
 1811350:	1000041e 	bne	r2,zero,1811364 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 1811354:	e0bff917 	ldw	r2,-28(fp)
 1811358:	e0fffd17 	ldw	r3,-12(fp)
 181135c:	10c01c15 	stw	r3,112(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 1811360:	00000506 	br	1811378 <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 1811364:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 1811368:	00000306 	br	1811378 <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 181136c:	0001883a 	nop
 1811370:	00000106 	br	1811378 <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 1811374:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1811378:	e0bffb03 	ldbu	r2,-20(fp)
 181137c:	10800058 	cmpnei	r2,r2,1
 1811380:	10002b1e 	bne	r2,zero,1811430 <xTaskGenericNotifyFromISR+0x1cc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1811384:	d0a7e117 	ldw	r2,-24700(gp)
 1811388:	1000171e 	bne	r2,zero,18113e8 <xTaskGenericNotifyFromISR+0x184>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 181138c:	e0bff917 	ldw	r2,-28(fp)
 1811390:	10800104 	addi	r2,r2,4
 1811394:	1009883a 	mov	r4,r2
 1811398:	1826bb40 	call	1826bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 181139c:	e0bff917 	ldw	r2,-28(fp)
 18113a0:	10800b17 	ldw	r2,44(r2)
 18113a4:	d0e7d917 	ldw	r3,-24732(gp)
 18113a8:	1880032e 	bgeu	r3,r2,18113b8 <xTaskGenericNotifyFromISR+0x154>
 18113ac:	e0bff917 	ldw	r2,-28(fp)
 18113b0:	10800b17 	ldw	r2,44(r2)
 18113b4:	d0a7d915 	stw	r2,-24732(gp)
 18113b8:	e0bff917 	ldw	r2,-28(fp)
 18113bc:	10800b17 	ldw	r2,44(r2)
 18113c0:	10c00524 	muli	r3,r2,20
 18113c4:	00806134 	movhi	r2,388
 18113c8:	109d1c04 	addi	r2,r2,29808
 18113cc:	1887883a 	add	r3,r3,r2
 18113d0:	e0bff917 	ldw	r2,-28(fp)
 18113d4:	10800104 	addi	r2,r2,4
 18113d8:	100b883a 	mov	r5,r2
 18113dc:	1809883a 	mov	r4,r3
 18113e0:	1826a500 	call	1826a50 <vListInsertEnd>
 18113e4:	00000606 	br	1811400 <xTaskGenericNotifyFromISR+0x19c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 18113e8:	e0bff917 	ldw	r2,-28(fp)
 18113ec:	10800604 	addi	r2,r2,24
 18113f0:	100b883a 	mov	r5,r2
 18113f4:	01006134 	movhi	r4,388
 18113f8:	211d3f04 	addi	r4,r4,29948
 18113fc:	1826a500 	call	1826a50 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 1811400:	e0bff917 	ldw	r2,-28(fp)
 1811404:	10800b17 	ldw	r2,44(r2)
 1811408:	d0e7d317 	ldw	r3,-24756(gp)
 181140c:	18c00b17 	ldw	r3,44(r3)
 1811410:	1880072e 	bgeu	r3,r2,1811430 <xTaskGenericNotifyFromISR+0x1cc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 1811414:	e0800217 	ldw	r2,8(fp)
 1811418:	10000326 	beq	r2,zero,1811428 <xTaskGenericNotifyFromISR+0x1c4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 181141c:	e0800217 	ldw	r2,8(fp)
 1811420:	00c00044 	movi	r3,1
 1811424:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 1811428:	00800044 	movi	r2,1
 181142c:	d0a7dc15 	stw	r2,-24720(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 1811430:	e0bff817 	ldw	r2,-32(fp)
	}
 1811434:	e037883a 	mov	sp,fp
 1811438:	dfc00117 	ldw	ra,4(sp)
 181143c:	df000017 	ldw	fp,0(sp)
 1811440:	dec00204 	addi	sp,sp,8
 1811444:	f800283a 	ret

01811448 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 1811448:	defff904 	addi	sp,sp,-28
 181144c:	dfc00615 	stw	ra,24(sp)
 1811450:	df000515 	stw	fp,20(sp)
 1811454:	df000504 	addi	fp,sp,20
 1811458:	e13ffe15 	stw	r4,-8(fp)
 181145c:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 1811460:	e0bffe17 	ldw	r2,-8(fp)
 1811464:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1811468:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 181146c:	e0bffb17 	ldw	r2,-20(fp)
 1811470:	10801d03 	ldbu	r2,116(r2)
 1811474:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 1811478:	e0bffb17 	ldw	r2,-20(fp)
 181147c:	00c00084 	movi	r3,2
 1811480:	10c01d05 	stb	r3,116(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 1811484:	e0bffb17 	ldw	r2,-20(fp)
 1811488:	10801c17 	ldw	r2,112(r2)
 181148c:	10c00044 	addi	r3,r2,1
 1811490:	e0bffb17 	ldw	r2,-20(fp)
 1811494:	10c01c15 	stw	r3,112(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 1811498:	e0bffd03 	ldbu	r2,-12(fp)
 181149c:	10800058 	cmpnei	r2,r2,1
 18114a0:	10002b1e 	bne	r2,zero,1811550 <vTaskNotifyGiveFromISR+0x108>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 18114a4:	d0a7e117 	ldw	r2,-24700(gp)
 18114a8:	1000171e 	bne	r2,zero,1811508 <vTaskNotifyGiveFromISR+0xc0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 18114ac:	e0bffb17 	ldw	r2,-20(fp)
 18114b0:	10800104 	addi	r2,r2,4
 18114b4:	1009883a 	mov	r4,r2
 18114b8:	1826bb40 	call	1826bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 18114bc:	e0bffb17 	ldw	r2,-20(fp)
 18114c0:	10800b17 	ldw	r2,44(r2)
 18114c4:	d0e7d917 	ldw	r3,-24732(gp)
 18114c8:	1880032e 	bgeu	r3,r2,18114d8 <vTaskNotifyGiveFromISR+0x90>
 18114cc:	e0bffb17 	ldw	r2,-20(fp)
 18114d0:	10800b17 	ldw	r2,44(r2)
 18114d4:	d0a7d915 	stw	r2,-24732(gp)
 18114d8:	e0bffb17 	ldw	r2,-20(fp)
 18114dc:	10800b17 	ldw	r2,44(r2)
 18114e0:	10c00524 	muli	r3,r2,20
 18114e4:	00806134 	movhi	r2,388
 18114e8:	109d1c04 	addi	r2,r2,29808
 18114ec:	1887883a 	add	r3,r3,r2
 18114f0:	e0bffb17 	ldw	r2,-20(fp)
 18114f4:	10800104 	addi	r2,r2,4
 18114f8:	100b883a 	mov	r5,r2
 18114fc:	1809883a 	mov	r4,r3
 1811500:	1826a500 	call	1826a50 <vListInsertEnd>
 1811504:	00000606 	br	1811520 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1811508:	e0bffb17 	ldw	r2,-20(fp)
 181150c:	10800604 	addi	r2,r2,24
 1811510:	100b883a 	mov	r5,r2
 1811514:	01006134 	movhi	r4,388
 1811518:	211d3f04 	addi	r4,r4,29948
 181151c:	1826a500 	call	1826a50 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 1811520:	e0bffb17 	ldw	r2,-20(fp)
 1811524:	10800b17 	ldw	r2,44(r2)
 1811528:	d0e7d317 	ldw	r3,-24756(gp)
 181152c:	18c00b17 	ldw	r3,44(r3)
 1811530:	1880072e 	bgeu	r3,r2,1811550 <vTaskNotifyGiveFromISR+0x108>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 1811534:	e0bfff17 	ldw	r2,-4(fp)
 1811538:	10000326 	beq	r2,zero,1811548 <vTaskNotifyGiveFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 181153c:	e0bfff17 	ldw	r2,-4(fp)
 1811540:	00c00044 	movi	r3,1
 1811544:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 1811548:	00800044 	movi	r2,1
 181154c:	d0a7dc15 	stw	r2,-24720(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 1811550:	0001883a 	nop
 1811554:	e037883a 	mov	sp,fp
 1811558:	dfc00117 	ldw	ra,4(sp)
 181155c:	df000017 	ldw	fp,0(sp)
 1811560:	dec00204 	addi	sp,sp,8
 1811564:	f800283a 	ret

01811568 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 1811568:	defffb04 	addi	sp,sp,-20
 181156c:	dfc00415 	stw	ra,16(sp)
 1811570:	df000315 	stw	fp,12(sp)
 1811574:	df000304 	addi	fp,sp,12
 1811578:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 181157c:	e0bfff17 	ldw	r2,-4(fp)
 1811580:	1000021e 	bne	r2,zero,181158c <xTaskNotifyStateClear+0x24>
 1811584:	d0a7d317 	ldw	r2,-24756(gp)
 1811588:	00000106 	br	1811590 <xTaskNotifyStateClear+0x28>
 181158c:	e0bfff17 	ldw	r2,-4(fp)
 1811590:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 1811594:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 1811598:	e0bffe17 	ldw	r2,-8(fp)
 181159c:	10801d03 	ldbu	r2,116(r2)
 18115a0:	10803fcc 	andi	r2,r2,255
 18115a4:	10800098 	cmpnei	r2,r2,2
 18115a8:	1000051e 	bne	r2,zero,18115c0 <xTaskNotifyStateClear+0x58>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 18115ac:	e0bffe17 	ldw	r2,-8(fp)
 18115b0:	10001d05 	stb	zero,116(r2)
				xReturn = pdPASS;
 18115b4:	00800044 	movi	r2,1
 18115b8:	e0bffd15 	stw	r2,-12(fp)
 18115bc:	00000106 	br	18115c4 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
 18115c0:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 18115c4:	1810e380 	call	1810e38 <vTaskExitCritical>

		return xReturn;
 18115c8:	e0bffd17 	ldw	r2,-12(fp)
	}
 18115cc:	e037883a 	mov	sp,fp
 18115d0:	dfc00117 	ldw	ra,4(sp)
 18115d4:	df000017 	ldw	fp,0(sp)
 18115d8:	dec00204 	addi	sp,sp,8
 18115dc:	f800283a 	ret

018115e0 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 18115e0:	defffa04 	addi	sp,sp,-24
 18115e4:	dfc00515 	stw	ra,20(sp)
 18115e8:	df000415 	stw	fp,16(sp)
 18115ec:	df000404 	addi	fp,sp,16
 18115f0:	e13ffe15 	stw	r4,-8(fp)
 18115f4:	e17fff15 	stw	r5,-4(fp)
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 18115f8:	e0bffe17 	ldw	r2,-8(fp)
 18115fc:	1000021e 	bne	r2,zero,1811608 <ulTaskNotifyValueClear+0x28>
 1811600:	d0a7d317 	ldw	r2,-24756(gp)
 1811604:	00000106 	br	181160c <ulTaskNotifyValueClear+0x2c>
 1811608:	e0bffe17 	ldw	r2,-8(fp)
 181160c:	e0bffc15 	stw	r2,-16(fp)

		taskENTER_CRITICAL();
 1811610:	1810de40 	call	1810de4 <vTaskEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 1811614:	d0a7d317 	ldw	r2,-24756(gp)
 1811618:	10801c17 	ldw	r2,112(r2)
 181161c:	e0bffd15 	stw	r2,-12(fp)
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 1811620:	e0bffc17 	ldw	r2,-16(fp)
 1811624:	10c01c17 	ldw	r3,112(r2)
 1811628:	e0bfff17 	ldw	r2,-4(fp)
 181162c:	0084303a 	nor	r2,zero,r2
 1811630:	1886703a 	and	r3,r3,r2
 1811634:	e0bffc17 	ldw	r2,-16(fp)
 1811638:	10c01c15 	stw	r3,112(r2)
		}
		taskEXIT_CRITICAL();
 181163c:	1810e380 	call	1810e38 <vTaskExitCritical>

		return ulReturn;
 1811640:	e0bffd17 	ldw	r2,-12(fp)
	}
 1811644:	e037883a 	mov	sp,fp
 1811648:	dfc00117 	ldw	ra,4(sp)
 181164c:	df000017 	ldw	fp,0(sp)
 1811650:	dec00204 	addi	sp,sp,8
 1811654:	f800283a 	ret

01811658 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 1811658:	defffa04 	addi	sp,sp,-24
 181165c:	dfc00515 	stw	ra,20(sp)
 1811660:	df000415 	stw	fp,16(sp)
 1811664:	df000404 	addi	fp,sp,16
 1811668:	e13ffe15 	stw	r4,-8(fp)
 181166c:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 1811670:	d0a7d817 	ldw	r2,-24736(gp)
 1811674:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1811678:	d0a7d317 	ldw	r2,-24756(gp)
 181167c:	10800104 	addi	r2,r2,4
 1811680:	1009883a 	mov	r4,r2
 1811684:	1826bb40 	call	1826bb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 1811688:	e0bffe17 	ldw	r2,-8(fp)
 181168c:	10bfffd8 	cmpnei	r2,r2,-1
 1811690:	1000091e 	bne	r2,zero,18116b8 <prvAddCurrentTaskToDelayedList+0x60>
 1811694:	e0bfff17 	ldw	r2,-4(fp)
 1811698:	10000726 	beq	r2,zero,18116b8 <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 181169c:	d0a7d317 	ldw	r2,-24756(gp)
 18116a0:	10800104 	addi	r2,r2,4
 18116a4:	100b883a 	mov	r5,r2
 18116a8:	01006134 	movhi	r4,388
 18116ac:	211d4904 	addi	r4,r4,29988
 18116b0:	1826a500 	call	1826a50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 18116b4:	00001c06 	br	1811728 <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 18116b8:	e0fffc17 	ldw	r3,-16(fp)
 18116bc:	e0bffe17 	ldw	r2,-8(fp)
 18116c0:	1885883a 	add	r2,r3,r2
 18116c4:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 18116c8:	d0a7d317 	ldw	r2,-24756(gp)
 18116cc:	e0fffd17 	ldw	r3,-12(fp)
 18116d0:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 18116d4:	e0fffd17 	ldw	r3,-12(fp)
 18116d8:	e0bffc17 	ldw	r2,-16(fp)
 18116dc:	1880072e 	bgeu	r3,r2,18116fc <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 18116e0:	d0e7d517 	ldw	r3,-24748(gp)
 18116e4:	d0a7d317 	ldw	r2,-24756(gp)
 18116e8:	10800104 	addi	r2,r2,4
 18116ec:	100b883a 	mov	r5,r2
 18116f0:	1809883a 	mov	r4,r3
 18116f4:	1826adc0 	call	1826adc <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 18116f8:	00000b06 	br	1811728 <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 18116fc:	d0e7d417 	ldw	r3,-24752(gp)
 1811700:	d0a7d317 	ldw	r2,-24756(gp)
 1811704:	10800104 	addi	r2,r2,4
 1811708:	100b883a 	mov	r5,r2
 181170c:	1809883a 	mov	r4,r3
 1811710:	1826adc0 	call	1826adc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 1811714:	d0a7df17 	ldw	r2,-24708(gp)
 1811718:	e0fffd17 	ldw	r3,-12(fp)
 181171c:	1880022e 	bgeu	r3,r2,1811728 <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 1811720:	e0bffd17 	ldw	r2,-12(fp)
 1811724:	d0a7df15 	stw	r2,-24708(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 1811728:	0001883a 	nop
 181172c:	e037883a 	mov	sp,fp
 1811730:	dfc00117 	ldw	ra,4(sp)
 1811734:	df000017 	ldw	fp,0(sp)
 1811738:	dec00204 	addi	sp,sp,8
 181173c:	f800283a 	ret

01811740 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 1811740:	defffb04 	addi	sp,sp,-20
 1811744:	dfc00415 	stw	ra,16(sp)
 1811748:	df000315 	stw	fp,12(sp)
 181174c:	df000304 	addi	fp,sp,12
BaseType_t xReturn = pdFAIL;
 1811750:	e03fff15 	stw	zero,-4(fp)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 1811754:	18121e80 	call	18121e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 1811758:	d0a7e417 	ldw	r2,-24688(gp)
 181175c:	10000c26 	beq	r2,zero,1811790 <xTimerCreateTimerTask+0x50>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 1811760:	d0a7e504 	addi	r2,gp,-24684
 1811764:	d8800115 	stw	r2,4(sp)
 1811768:	00800144 	movi	r2,5
 181176c:	d8800015 	stw	r2,0(sp)
 1811770:	000f883a 	mov	r7,zero
 1811774:	01820004 	movi	r6,2048
 1811778:	01406134 	movhi	r5,388
 181177c:	29433304 	addi	r5,r5,3276
 1811780:	01006074 	movhi	r4,385
 1811784:	21070404 	addi	r4,r4,7184
 1811788:	180eb680 	call	180eb68 <xTaskCreate>
 181178c:	e0bfff15 	stw	r2,-4(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 1811790:	e0bfff17 	ldw	r2,-4(fp)
}
 1811794:	e037883a 	mov	sp,fp
 1811798:	dfc00117 	ldw	ra,4(sp)
 181179c:	df000017 	ldw	fp,0(sp)
 18117a0:	dec00204 	addi	sp,sp,8
 18117a4:	f800283a 	ret

018117a8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 18117a8:	defff704 	addi	sp,sp,-36
 18117ac:	dfc00815 	stw	ra,32(sp)
 18117b0:	df000715 	stw	fp,28(sp)
 18117b4:	df000704 	addi	fp,sp,28
 18117b8:	e13ffc15 	stw	r4,-16(fp)
 18117bc:	e17ffd15 	stw	r5,-12(fp)
 18117c0:	e1bffe15 	stw	r6,-8(fp)
 18117c4:	e1ffff15 	stw	r7,-4(fp)
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 18117c8:	01000b04 	movi	r4,44
 18117cc:	182692c0 	call	182692c <pvPortMalloc>
 18117d0:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewTimer != NULL )
 18117d4:	e0bffb17 	ldw	r2,-20(fp)
 18117d8:	10000b26 	beq	r2,zero,1811808 <xTimerCreate+0x60>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 18117dc:	e0bffb17 	ldw	r2,-20(fp)
 18117e0:	10000a05 	stb	zero,40(r2)
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 18117e4:	e0bffb17 	ldw	r2,-20(fp)
 18117e8:	d8800115 	stw	r2,4(sp)
 18117ec:	e0800217 	ldw	r2,8(fp)
 18117f0:	d8800015 	stw	r2,0(sp)
 18117f4:	e1ffff17 	ldw	r7,-4(fp)
 18117f8:	e1bffe17 	ldw	r6,-8(fp)
 18117fc:	e17ffd17 	ldw	r5,-12(fp)
 1811800:	e13ffc17 	ldw	r4,-16(fp)
 1811804:	18118200 	call	1811820 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 1811808:	e0bffb17 	ldw	r2,-20(fp)
	}
 181180c:	e037883a 	mov	sp,fp
 1811810:	dfc00117 	ldw	ra,4(sp)
 1811814:	df000017 	ldw	fp,0(sp)
 1811818:	dec00204 	addi	sp,sp,8
 181181c:	f800283a 	ret

01811820 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 1811820:	defffa04 	addi	sp,sp,-24
 1811824:	dfc00515 	stw	ra,20(sp)
 1811828:	df000415 	stw	fp,16(sp)
 181182c:	df000404 	addi	fp,sp,16
 1811830:	e13ffc15 	stw	r4,-16(fp)
 1811834:	e17ffd15 	stw	r5,-12(fp)
 1811838:	e1bffe15 	stw	r6,-8(fp)
 181183c:	e1ffff15 	stw	r7,-4(fp)
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	if( pxNewTimer != NULL )
 1811840:	e0800317 	ldw	r2,12(fp)
 1811844:	10001926 	beq	r2,zero,18118ac <prvInitialiseNewTimer+0x8c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 1811848:	18121e80 	call	18121e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 181184c:	e0800317 	ldw	r2,12(fp)
 1811850:	e0fffc17 	ldw	r3,-16(fp)
 1811854:	10c00015 	stw	r3,0(r2)
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 1811858:	e0800317 	ldw	r2,12(fp)
 181185c:	e0fffd17 	ldw	r3,-12(fp)
 1811860:	10c00615 	stw	r3,24(r2)
		pxNewTimer->pvTimerID = pvTimerID;
 1811864:	e0800317 	ldw	r2,12(fp)
 1811868:	e0ffff17 	ldw	r3,-4(fp)
 181186c:	10c00715 	stw	r3,28(r2)
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 1811870:	e0800317 	ldw	r2,12(fp)
 1811874:	e0c00217 	ldw	r3,8(fp)
 1811878:	10c00815 	stw	r3,32(r2)
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 181187c:	e0800317 	ldw	r2,12(fp)
 1811880:	10800104 	addi	r2,r2,4
 1811884:	1009883a 	mov	r4,r2
 1811888:	1826a240 	call	1826a24 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 181188c:	e0bffe17 	ldw	r2,-8(fp)
 1811890:	10000626 	beq	r2,zero,18118ac <prvInitialiseNewTimer+0x8c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 1811894:	e0800317 	ldw	r2,12(fp)
 1811898:	10800a03 	ldbu	r2,40(r2)
 181189c:	10800114 	ori	r2,r2,4
 18118a0:	1007883a 	mov	r3,r2
 18118a4:	e0800317 	ldw	r2,12(fp)
 18118a8:	10c00a05 	stb	r3,40(r2)
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 18118ac:	0001883a 	nop
 18118b0:	e037883a 	mov	sp,fp
 18118b4:	dfc00117 	ldw	ra,4(sp)
 18118b8:	df000017 	ldw	fp,0(sp)
 18118bc:	dec00204 	addi	sp,sp,8
 18118c0:	f800283a 	ret

018118c4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 18118c4:	defff604 	addi	sp,sp,-40
 18118c8:	dfc00915 	stw	ra,36(sp)
 18118cc:	df000815 	stw	fp,32(sp)
 18118d0:	df000804 	addi	fp,sp,32
 18118d4:	e13ffc15 	stw	r4,-16(fp)
 18118d8:	e17ffd15 	stw	r5,-12(fp)
 18118dc:	e1bffe15 	stw	r6,-8(fp)
 18118e0:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn = pdFAIL;
 18118e4:	e03ff815 	stw	zero,-32(fp)

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 18118e8:	d0a7e417 	ldw	r2,-24688(gp)
 18118ec:	10002626 	beq	r2,zero,1811988 <xTimerGenericCommand+0xc4>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 18118f0:	e0bffd17 	ldw	r2,-12(fp)
 18118f4:	e0bff915 	stw	r2,-28(fp)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 18118f8:	e0bffe17 	ldw	r2,-8(fp)
 18118fc:	e0bffa15 	stw	r2,-24(fp)
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 1811900:	e0bffc17 	ldw	r2,-16(fp)
 1811904:	e0bffb15 	stw	r2,-20(fp)

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 1811908:	e0bffd17 	ldw	r2,-12(fp)
 181190c:	10800188 	cmpgei	r2,r2,6
 1811910:	1000151e 	bne	r2,zero,1811968 <xTimerGenericCommand+0xa4>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 1811914:	1810a1c0 	call	1810a1c <xTaskGetSchedulerState>
 1811918:	10800098 	cmpnei	r2,r2,2
 181191c:	1000091e 	bne	r2,zero,1811944 <xTimerGenericCommand+0x80>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 1811920:	d0a7e417 	ldw	r2,-24688(gp)
 1811924:	e0fff904 	addi	r3,fp,-28
 1811928:	000f883a 	mov	r7,zero
 181192c:	e1800217 	ldw	r6,8(fp)
 1811930:	180b883a 	mov	r5,r3
 1811934:	1009883a 	mov	r4,r2
 1811938:	180da2c0 	call	180da2c <xQueueGenericSend>
 181193c:	e0bff815 	stw	r2,-32(fp)
 1811940:	00001106 	br	1811988 <xTimerGenericCommand+0xc4>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 1811944:	d0a7e417 	ldw	r2,-24688(gp)
 1811948:	e0fff904 	addi	r3,fp,-28
 181194c:	000f883a 	mov	r7,zero
 1811950:	000d883a 	mov	r6,zero
 1811954:	180b883a 	mov	r5,r3
 1811958:	1009883a 	mov	r4,r2
 181195c:	180da2c0 	call	180da2c <xQueueGenericSend>
 1811960:	e0bff815 	stw	r2,-32(fp)
 1811964:	00000806 	br	1811988 <xTimerGenericCommand+0xc4>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1811968:	d0a7e417 	ldw	r2,-24688(gp)
 181196c:	e0fff904 	addi	r3,fp,-28
 1811970:	000f883a 	mov	r7,zero
 1811974:	e1bfff17 	ldw	r6,-4(fp)
 1811978:	180b883a 	mov	r5,r3
 181197c:	1009883a 	mov	r4,r2
 1811980:	180dbe00 	call	180dbe0 <xQueueGenericSendFromISR>
 1811984:	e0bff815 	stw	r2,-32(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 1811988:	e0bff817 	ldw	r2,-32(fp)
}
 181198c:	e037883a 	mov	sp,fp
 1811990:	dfc00117 	ldw	ra,4(sp)
 1811994:	df000017 	ldw	fp,0(sp)
 1811998:	dec00204 	addi	sp,sp,8
 181199c:	f800283a 	ret

018119a0 <xTimerGetTimerDaemonTaskHandle>:
/*-----------------------------------------------------------*/

TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
{
 18119a0:	deffff04 	addi	sp,sp,-4
 18119a4:	df000015 	stw	fp,0(sp)
 18119a8:	d839883a 	mov	fp,sp
	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
	started, then xTimerTaskHandle will be NULL. */
	configASSERT( ( xTimerTaskHandle != NULL ) );
	return xTimerTaskHandle;
 18119ac:	d0a7e517 	ldw	r2,-24684(gp)
}
 18119b0:	e037883a 	mov	sp,fp
 18119b4:	df000017 	ldw	fp,0(sp)
 18119b8:	dec00104 	addi	sp,sp,4
 18119bc:	f800283a 	ret

018119c0 <xTimerGetPeriod>:
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 18119c0:	defffd04 	addi	sp,sp,-12
 18119c4:	df000215 	stw	fp,8(sp)
 18119c8:	df000204 	addi	fp,sp,8
 18119cc:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = xTimer;
 18119d0:	e0bfff17 	ldw	r2,-4(fp)
 18119d4:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( xTimer );
	return pxTimer->xTimerPeriodInTicks;
 18119d8:	e0bffe17 	ldw	r2,-8(fp)
 18119dc:	10800617 	ldw	r2,24(r2)
}
 18119e0:	e037883a 	mov	sp,fp
 18119e4:	df000017 	ldw	fp,0(sp)
 18119e8:	dec00104 	addi	sp,sp,4
 18119ec:	f800283a 	ret

018119f0 <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
{
 18119f0:	defffb04 	addi	sp,sp,-20
 18119f4:	dfc00415 	stw	ra,16(sp)
 18119f8:	df000315 	stw	fp,12(sp)
 18119fc:	df000304 	addi	fp,sp,12
 1811a00:	e13ffe15 	stw	r4,-8(fp)
 1811a04:	e17fff15 	stw	r5,-4(fp)
Timer_t * pxTimer =  xTimer;
 1811a08:	e0bffe17 	ldw	r2,-8(fp)
 1811a0c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( xTimer );
	taskENTER_CRITICAL();
 1811a10:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		if( uxAutoReload != pdFALSE )
 1811a14:	e0bfff17 	ldw	r2,-4(fp)
 1811a18:	10000726 	beq	r2,zero,1811a38 <vTimerSetReloadMode+0x48>
		{
			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 1811a1c:	e0bffd17 	ldw	r2,-12(fp)
 1811a20:	10800a03 	ldbu	r2,40(r2)
 1811a24:	10800114 	ori	r2,r2,4
 1811a28:	1007883a 	mov	r3,r2
 1811a2c:	e0bffd17 	ldw	r2,-12(fp)
 1811a30:	10c00a05 	stb	r3,40(r2)
 1811a34:	00000706 	br	1811a54 <vTimerSetReloadMode+0x64>
		}
		else
		{
			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 1811a38:	e0bffd17 	ldw	r2,-12(fp)
 1811a3c:	10c00a03 	ldbu	r3,40(r2)
 1811a40:	00bffec4 	movi	r2,-5
 1811a44:	1884703a 	and	r2,r3,r2
 1811a48:	1007883a 	mov	r3,r2
 1811a4c:	e0bffd17 	ldw	r2,-12(fp)
 1811a50:	10c00a05 	stb	r3,40(r2)
		}
	}
	taskEXIT_CRITICAL();
 1811a54:	1810e380 	call	1810e38 <vTaskExitCritical>
}
 1811a58:	0001883a 	nop
 1811a5c:	e037883a 	mov	sp,fp
 1811a60:	dfc00117 	ldw	ra,4(sp)
 1811a64:	df000017 	ldw	fp,0(sp)
 1811a68:	dec00204 	addi	sp,sp,8
 1811a6c:	f800283a 	ret

01811a70 <uxTimerGetReloadMode>:
/*-----------------------------------------------------------*/

UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
{
 1811a70:	defffb04 	addi	sp,sp,-20
 1811a74:	dfc00415 	stw	ra,16(sp)
 1811a78:	df000315 	stw	fp,12(sp)
 1811a7c:	df000304 	addi	fp,sp,12
 1811a80:	e13fff15 	stw	r4,-4(fp)
Timer_t * pxTimer =  xTimer;
 1811a84:	e0bfff17 	ldw	r2,-4(fp)
 1811a88:	e0bffe15 	stw	r2,-8(fp)
UBaseType_t uxReturn;

	configASSERT( xTimer );
	taskENTER_CRITICAL();
 1811a8c:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 1811a90:	e0bffe17 	ldw	r2,-8(fp)
 1811a94:	10800a03 	ldbu	r2,40(r2)
 1811a98:	10803fcc 	andi	r2,r2,255
 1811a9c:	1080010c 	andi	r2,r2,4
 1811aa0:	1000021e 	bne	r2,zero,1811aac <uxTimerGetReloadMode+0x3c>
		{
			/* Not an auto-reload timer. */
			uxReturn = ( UBaseType_t ) pdFALSE;
 1811aa4:	e03ffd15 	stw	zero,-12(fp)
 1811aa8:	00000206 	br	1811ab4 <uxTimerGetReloadMode+0x44>
		}
		else
		{
			/* Is an auto-reload timer. */
			uxReturn = ( UBaseType_t ) pdTRUE;
 1811aac:	00800044 	movi	r2,1
 1811ab0:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	taskEXIT_CRITICAL();
 1811ab4:	1810e380 	call	1810e38 <vTaskExitCritical>

	return uxReturn;
 1811ab8:	e0bffd17 	ldw	r2,-12(fp)
}
 1811abc:	e037883a 	mov	sp,fp
 1811ac0:	dfc00117 	ldw	ra,4(sp)
 1811ac4:	df000017 	ldw	fp,0(sp)
 1811ac8:	dec00204 	addi	sp,sp,8
 1811acc:	f800283a 	ret

01811ad0 <xTimerGetExpiryTime>:
/*-----------------------------------------------------------*/

TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
{
 1811ad0:	defffc04 	addi	sp,sp,-16
 1811ad4:	df000315 	stw	fp,12(sp)
 1811ad8:	df000304 	addi	fp,sp,12
 1811adc:	e13fff15 	stw	r4,-4(fp)
Timer_t * pxTimer =  xTimer;
 1811ae0:	e0bfff17 	ldw	r2,-4(fp)
 1811ae4:	e0bffd15 	stw	r2,-12(fp)
TickType_t xReturn;

	configASSERT( xTimer );
	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 1811ae8:	e0bffd17 	ldw	r2,-12(fp)
 1811aec:	10800117 	ldw	r2,4(r2)
 1811af0:	e0bffe15 	stw	r2,-8(fp)
	return xReturn;
 1811af4:	e0bffe17 	ldw	r2,-8(fp)
}
 1811af8:	e037883a 	mov	sp,fp
 1811afc:	df000017 	ldw	fp,0(sp)
 1811b00:	dec00104 	addi	sp,sp,4
 1811b04:	f800283a 	ret

01811b08 <pcTimerGetName>:
/*-----------------------------------------------------------*/

const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 1811b08:	defffd04 	addi	sp,sp,-12
 1811b0c:	df000215 	stw	fp,8(sp)
 1811b10:	df000204 	addi	fp,sp,8
 1811b14:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = xTimer;
 1811b18:	e0bfff17 	ldw	r2,-4(fp)
 1811b1c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( xTimer );
	return pxTimer->pcTimerName;
 1811b20:	e0bffe17 	ldw	r2,-8(fp)
 1811b24:	10800017 	ldw	r2,0(r2)
}
 1811b28:	e037883a 	mov	sp,fp
 1811b2c:	df000017 	ldw	fp,0(sp)
 1811b30:	dec00104 	addi	sp,sp,4
 1811b34:	f800283a 	ret

01811b38 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 1811b38:	defff904 	addi	sp,sp,-28
 1811b3c:	dfc00615 	stw	ra,24(sp)
 1811b40:	df000515 	stw	fp,20(sp)
 1811b44:	df000504 	addi	fp,sp,20
 1811b48:	e13ffe15 	stw	r4,-8(fp)
 1811b4c:	e17fff15 	stw	r5,-4(fp)
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 1811b50:	d0a7e217 	ldw	r2,-24696(gp)
 1811b54:	10800317 	ldw	r2,12(r2)
 1811b58:	10800317 	ldw	r2,12(r2)
 1811b5c:	e0bffc15 	stw	r2,-16(fp)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1811b60:	e0bffc17 	ldw	r2,-16(fp)
 1811b64:	10800104 	addi	r2,r2,4
 1811b68:	1009883a 	mov	r4,r2
 1811b6c:	1826bb40 	call	1826bb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1811b70:	e0bffc17 	ldw	r2,-16(fp)
 1811b74:	10800a03 	ldbu	r2,40(r2)
 1811b78:	10803fcc 	andi	r2,r2,255
 1811b7c:	1080010c 	andi	r2,r2,4
 1811b80:	10001226 	beq	r2,zero,1811bcc <prvProcessExpiredTimer+0x94>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 1811b84:	e0bffc17 	ldw	r2,-16(fp)
 1811b88:	10c00617 	ldw	r3,24(r2)
 1811b8c:	e0bffe17 	ldw	r2,-8(fp)
 1811b90:	1885883a 	add	r2,r3,r2
 1811b94:	e1fffe17 	ldw	r7,-8(fp)
 1811b98:	e1bfff17 	ldw	r6,-4(fp)
 1811b9c:	100b883a 	mov	r5,r2
 1811ba0:	e13ffc17 	ldw	r4,-16(fp)
 1811ba4:	1811de00 	call	1811de0 <prvInsertTimerInActiveList>
 1811ba8:	10000f26 	beq	r2,zero,1811be8 <prvProcessExpiredTimer+0xb0>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 1811bac:	d8000015 	stw	zero,0(sp)
 1811bb0:	000f883a 	mov	r7,zero
 1811bb4:	e1bffe17 	ldw	r6,-8(fp)
 1811bb8:	000b883a 	mov	r5,zero
 1811bbc:	e13ffc17 	ldw	r4,-16(fp)
 1811bc0:	18118c40 	call	18118c4 <xTimerGenericCommand>
 1811bc4:	e0bffd15 	stw	r2,-12(fp)
 1811bc8:	00000706 	br	1811be8 <prvProcessExpiredTimer+0xb0>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 1811bcc:	e0bffc17 	ldw	r2,-16(fp)
 1811bd0:	10c00a03 	ldbu	r3,40(r2)
 1811bd4:	00bfff84 	movi	r2,-2
 1811bd8:	1884703a 	and	r2,r3,r2
 1811bdc:	1007883a 	mov	r3,r2
 1811be0:	e0bffc17 	ldw	r2,-16(fp)
 1811be4:	10c00a05 	stb	r3,40(r2)
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1811be8:	e0bffc17 	ldw	r2,-16(fp)
 1811bec:	10800817 	ldw	r2,32(r2)
 1811bf0:	e13ffc17 	ldw	r4,-16(fp)
 1811bf4:	103ee83a 	callr	r2
}
 1811bf8:	0001883a 	nop
 1811bfc:	e037883a 	mov	sp,fp
 1811c00:	dfc00117 	ldw	ra,4(sp)
 1811c04:	df000017 	ldw	fp,0(sp)
 1811c08:	dec00204 	addi	sp,sp,8
 1811c0c:	f800283a 	ret

01811c10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 1811c10:	defffb04 	addi	sp,sp,-20
 1811c14:	dfc00415 	stw	ra,16(sp)
 1811c18:	df000315 	stw	fp,12(sp)
 1811c1c:	df000304 	addi	fp,sp,12
 1811c20:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 1811c24:	e0bffe04 	addi	r2,fp,-8
 1811c28:	1009883a 	mov	r4,r2
 1811c2c:	1811d140 	call	1811d14 <prvGetNextExpireTime>
 1811c30:	e0bffd15 	stw	r2,-12(fp)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 1811c34:	e0bffe17 	ldw	r2,-8(fp)
 1811c38:	100b883a 	mov	r5,r2
 1811c3c:	e13ffd17 	ldw	r4,-12(fp)
 1811c40:	1811c4c0 	call	1811c4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 1811c44:	1811ebc0 	call	1811ebc <prvProcessReceivedCommands>
	}
 1811c48:	003ff606 	br	1811c24 <__alt_mem_mem_0+0xff7f1c24>

01811c4c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 1811c4c:	defffa04 	addi	sp,sp,-24
 1811c50:	dfc00515 	stw	ra,20(sp)
 1811c54:	df000415 	stw	fp,16(sp)
 1811c58:	df000404 	addi	fp,sp,16
 1811c5c:	e13ffe15 	stw	r4,-8(fp)
 1811c60:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 1811c64:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1811c68:	e0bffd04 	addi	r2,fp,-12
 1811c6c:	1009883a 	mov	r4,r2
 1811c70:	1811d7c0 	call	1811d7c <prvSampleTimeNow>
 1811c74:	e0bffc15 	stw	r2,-16(fp)
		if( xTimerListsWereSwitched == pdFALSE )
 1811c78:	e0bffd17 	ldw	r2,-12(fp)
 1811c7c:	10001e1e 	bne	r2,zero,1811cf8 <prvProcessTimerOrBlockTask+0xac>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 1811c80:	e0bfff17 	ldw	r2,-4(fp)
 1811c84:	1000081e 	bne	r2,zero,1811ca8 <prvProcessTimerOrBlockTask+0x5c>
 1811c88:	e0bffe17 	ldw	r2,-8(fp)
 1811c8c:	e0fffc17 	ldw	r3,-16(fp)
 1811c90:	18800536 	bltu	r3,r2,1811ca8 <prvProcessTimerOrBlockTask+0x5c>
			{
				( void ) xTaskResumeAll();
 1811c94:	180f8ec0 	call	180f8ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 1811c98:	e17ffc17 	ldw	r5,-16(fp)
 1811c9c:	e13ffe17 	ldw	r4,-8(fp)
 1811ca0:	1811b380 	call	1811b38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 1811ca4:	00001506 	br	1811cfc <prvProcessTimerOrBlockTask+0xb0>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 1811ca8:	e0bfff17 	ldw	r2,-4(fp)
 1811cac:	10000726 	beq	r2,zero,1811ccc <prvProcessTimerOrBlockTask+0x80>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 1811cb0:	d0a7e317 	ldw	r2,-24692(gp)
 1811cb4:	10800017 	ldw	r2,0(r2)
 1811cb8:	1000021e 	bne	r2,zero,1811cc4 <prvProcessTimerOrBlockTask+0x78>
 1811cbc:	00800044 	movi	r2,1
 1811cc0:	00000106 	br	1811cc8 <prvProcessTimerOrBlockTask+0x7c>
 1811cc4:	0005883a 	mov	r2,zero
 1811cc8:	e0bfff15 	stw	r2,-4(fp)
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 1811ccc:	d127e417 	ldw	r4,-24688(gp)
 1811cd0:	e0fffe17 	ldw	r3,-8(fp)
 1811cd4:	e0bffc17 	ldw	r2,-16(fp)
 1811cd8:	1885c83a 	sub	r2,r3,r2
 1811cdc:	e1bfff17 	ldw	r6,-4(fp)
 1811ce0:	100b883a 	mov	r5,r2
 1811ce4:	180eab00 	call	180eab0 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 1811ce8:	180f8ec0 	call	180f8ec <xTaskResumeAll>
 1811cec:	1000031e 	bne	r2,zero,1811cfc <prvProcessTimerOrBlockTask+0xb0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 1811cf0:	003b683a 	trap	0
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 1811cf4:	00000106 	br	1811cfc <prvProcessTimerOrBlockTask+0xb0>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 1811cf8:	180f8ec0 	call	180f8ec <xTaskResumeAll>
		}
	}
}
 1811cfc:	0001883a 	nop
 1811d00:	e037883a 	mov	sp,fp
 1811d04:	dfc00117 	ldw	ra,4(sp)
 1811d08:	df000017 	ldw	fp,0(sp)
 1811d0c:	dec00204 	addi	sp,sp,8
 1811d10:	f800283a 	ret

01811d14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 1811d14:	defffd04 	addi	sp,sp,-12
 1811d18:	df000215 	stw	fp,8(sp)
 1811d1c:	df000204 	addi	fp,sp,8
 1811d20:	e13fff15 	stw	r4,-4(fp)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 1811d24:	d0a7e217 	ldw	r2,-24696(gp)
 1811d28:	10800017 	ldw	r2,0(r2)
 1811d2c:	1000021e 	bne	r2,zero,1811d38 <prvGetNextExpireTime+0x24>
 1811d30:	00800044 	movi	r2,1
 1811d34:	00000106 	br	1811d3c <prvGetNextExpireTime+0x28>
 1811d38:	0005883a 	mov	r2,zero
 1811d3c:	e0ffff17 	ldw	r3,-4(fp)
 1811d40:	18800015 	stw	r2,0(r3)
	if( *pxListWasEmpty == pdFALSE )
 1811d44:	e0bfff17 	ldw	r2,-4(fp)
 1811d48:	10800017 	ldw	r2,0(r2)
 1811d4c:	1000051e 	bne	r2,zero,1811d64 <prvGetNextExpireTime+0x50>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1811d50:	d0a7e217 	ldw	r2,-24696(gp)
 1811d54:	10800317 	ldw	r2,12(r2)
 1811d58:	10800017 	ldw	r2,0(r2)
 1811d5c:	e0bffe15 	stw	r2,-8(fp)
 1811d60:	00000106 	br	1811d68 <prvGetNextExpireTime+0x54>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 1811d64:	e03ffe15 	stw	zero,-8(fp)
	}

	return xNextExpireTime;
 1811d68:	e0bffe17 	ldw	r2,-8(fp)
}
 1811d6c:	e037883a 	mov	sp,fp
 1811d70:	df000017 	ldw	fp,0(sp)
 1811d74:	dec00104 	addi	sp,sp,4
 1811d78:	f800283a 	ret

01811d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 1811d7c:	defffc04 	addi	sp,sp,-16
 1811d80:	dfc00315 	stw	ra,12(sp)
 1811d84:	df000215 	stw	fp,8(sp)
 1811d88:	df000204 	addi	fp,sp,8
 1811d8c:	e13fff15 	stw	r4,-4(fp)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 1811d90:	180fa440 	call	180fa44 <xTaskGetTickCount>
 1811d94:	e0bffe15 	stw	r2,-8(fp)

	if( xTimeNow < xLastTime )
 1811d98:	d0a7e617 	ldw	r2,-24680(gp)
 1811d9c:	e0fffe17 	ldw	r3,-8(fp)
 1811da0:	1880052e 	bgeu	r3,r2,1811db8 <prvSampleTimeNow+0x3c>
	{
		prvSwitchTimerLists();
 1811da4:	18120d40 	call	18120d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 1811da8:	e0bfff17 	ldw	r2,-4(fp)
 1811dac:	00c00044 	movi	r3,1
 1811db0:	10c00015 	stw	r3,0(r2)
 1811db4:	00000206 	br	1811dc0 <prvSampleTimeNow+0x44>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 1811db8:	e0bfff17 	ldw	r2,-4(fp)
 1811dbc:	10000015 	stw	zero,0(r2)
	}

	xLastTime = xTimeNow;
 1811dc0:	e0bffe17 	ldw	r2,-8(fp)
 1811dc4:	d0a7e615 	stw	r2,-24680(gp)

	return xTimeNow;
 1811dc8:	e0bffe17 	ldw	r2,-8(fp)
}
 1811dcc:	e037883a 	mov	sp,fp
 1811dd0:	dfc00117 	ldw	ra,4(sp)
 1811dd4:	df000017 	ldw	fp,0(sp)
 1811dd8:	dec00204 	addi	sp,sp,8
 1811ddc:	f800283a 	ret

01811de0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 1811de0:	defff904 	addi	sp,sp,-28
 1811de4:	dfc00615 	stw	ra,24(sp)
 1811de8:	df000515 	stw	fp,20(sp)
 1811dec:	df000504 	addi	fp,sp,20
 1811df0:	e13ffc15 	stw	r4,-16(fp)
 1811df4:	e17ffd15 	stw	r5,-12(fp)
 1811df8:	e1bffe15 	stw	r6,-8(fp)
 1811dfc:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xProcessTimerNow = pdFALSE;
 1811e00:	e03ffb15 	stw	zero,-20(fp)

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 1811e04:	e0bffc17 	ldw	r2,-16(fp)
 1811e08:	e0fffd17 	ldw	r3,-12(fp)
 1811e0c:	10c00115 	stw	r3,4(r2)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1811e10:	e0bffc17 	ldw	r2,-16(fp)
 1811e14:	e0fffc17 	ldw	r3,-16(fp)
 1811e18:	10c00415 	stw	r3,16(r2)

	if( xNextExpiryTime <= xTimeNow )
 1811e1c:	e0bffd17 	ldw	r2,-12(fp)
 1811e20:	e0fffe17 	ldw	r3,-8(fp)
 1811e24:	18801036 	bltu	r3,r2,1811e68 <prvInsertTimerInActiveList+0x88>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 1811e28:	e0fffe17 	ldw	r3,-8(fp)
 1811e2c:	e0bfff17 	ldw	r2,-4(fp)
 1811e30:	1887c83a 	sub	r3,r3,r2
 1811e34:	e0bffc17 	ldw	r2,-16(fp)
 1811e38:	10800617 	ldw	r2,24(r2)
 1811e3c:	18800336 	bltu	r3,r2,1811e4c <prvInsertTimerInActiveList+0x6c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 1811e40:	00800044 	movi	r2,1
 1811e44:	e0bffb15 	stw	r2,-20(fp)
 1811e48:	00001606 	br	1811ea4 <prvInsertTimerInActiveList+0xc4>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 1811e4c:	d0e7e317 	ldw	r3,-24692(gp)
 1811e50:	e0bffc17 	ldw	r2,-16(fp)
 1811e54:	10800104 	addi	r2,r2,4
 1811e58:	100b883a 	mov	r5,r2
 1811e5c:	1809883a 	mov	r4,r3
 1811e60:	1826adc0 	call	1826adc <vListInsert>
 1811e64:	00000f06 	br	1811ea4 <prvInsertTimerInActiveList+0xc4>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 1811e68:	e0fffe17 	ldw	r3,-8(fp)
 1811e6c:	e0bfff17 	ldw	r2,-4(fp)
 1811e70:	1880062e 	bgeu	r3,r2,1811e8c <prvInsertTimerInActiveList+0xac>
 1811e74:	e0fffd17 	ldw	r3,-12(fp)
 1811e78:	e0bfff17 	ldw	r2,-4(fp)
 1811e7c:	18800336 	bltu	r3,r2,1811e8c <prvInsertTimerInActiveList+0xac>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 1811e80:	00800044 	movi	r2,1
 1811e84:	e0bffb15 	stw	r2,-20(fp)
 1811e88:	00000606 	br	1811ea4 <prvInsertTimerInActiveList+0xc4>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1811e8c:	d0e7e217 	ldw	r3,-24696(gp)
 1811e90:	e0bffc17 	ldw	r2,-16(fp)
 1811e94:	10800104 	addi	r2,r2,4
 1811e98:	100b883a 	mov	r5,r2
 1811e9c:	1809883a 	mov	r4,r3
 1811ea0:	1826adc0 	call	1826adc <vListInsert>
		}
	}

	return xProcessTimerNow;
 1811ea4:	e0bffb17 	ldw	r2,-20(fp)
}
 1811ea8:	e037883a 	mov	sp,fp
 1811eac:	dfc00117 	ldw	ra,4(sp)
 1811eb0:	df000017 	ldw	fp,0(sp)
 1811eb4:	dec00204 	addi	sp,sp,8
 1811eb8:	f800283a 	ret

01811ebc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 1811ebc:	defff604 	addi	sp,sp,-40
 1811ec0:	dfc00915 	stw	ra,36(sp)
 1811ec4:	df000815 	stw	fp,32(sp)
 1811ec8:	df000804 	addi	fp,sp,32
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 1811ecc:	00007406 	br	18120a0 <prvProcessReceivedCommands+0x1e4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 1811ed0:	e0bffc17 	ldw	r2,-16(fp)
 1811ed4:	10007216 	blt	r2,zero,18120a0 <prvProcessReceivedCommands+0x1e4>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 1811ed8:	e0bffe17 	ldw	r2,-8(fp)
 1811edc:	e0bff915 	stw	r2,-28(fp)

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 1811ee0:	e0bff917 	ldw	r2,-28(fp)
 1811ee4:	10800517 	ldw	r2,20(r2)
 1811ee8:	10000426 	beq	r2,zero,1811efc <prvProcessReceivedCommands+0x40>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1811eec:	e0bff917 	ldw	r2,-28(fp)
 1811ef0:	10800104 	addi	r2,r2,4
 1811ef4:	1009883a 	mov	r4,r2
 1811ef8:	1826bb40 	call	1826bb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1811efc:	e0bfff04 	addi	r2,fp,-4
 1811f00:	1009883a 	mov	r4,r2
 1811f04:	1811d7c0 	call	1811d7c <prvSampleTimeNow>
 1811f08:	e0bffa15 	stw	r2,-24(fp)

			switch( xMessage.xMessageID )
 1811f0c:	e0bffc17 	ldw	r2,-16(fp)
 1811f10:	10c002a8 	cmpgeui	r3,r2,10
 1811f14:	1800611e 	bne	r3,zero,181209c <prvProcessReceivedCommands+0x1e0>
 1811f18:	100690ba 	slli	r3,r2,2
 1811f1c:	00806074 	movhi	r2,385
 1811f20:	1087cc04 	addi	r2,r2,7984
 1811f24:	1885883a 	add	r2,r3,r2
 1811f28:	10800017 	ldw	r2,0(r2)
 1811f2c:	1000683a 	jmp	r2
 1811f30:	01811f58 	cmpnei	r6,zero,1149
 1811f34:	01811f58 	cmpnei	r6,zero,1149
 1811f38:	01811f58 	cmpnei	r6,zero,1149
 1811f3c:	01811ff0 	cmpltui	r6,zero,1151
 1811f40:	01812010 	cmplti	r6,zero,1152
 1811f44:	0181205c 	xori	r6,zero,1153
 1811f48:	01811f58 	cmpnei	r6,zero,1149
 1811f4c:	01811f58 	cmpnei	r6,zero,1149
 1811f50:	01811ff0 	cmpltui	r6,zero,1151
 1811f54:	01812010 	cmplti	r6,zero,1152
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1811f58:	e0bff917 	ldw	r2,-28(fp)
 1811f5c:	10800a03 	ldbu	r2,40(r2)
 1811f60:	10800054 	ori	r2,r2,1
 1811f64:	1007883a 	mov	r3,r2
 1811f68:	e0bff917 	ldw	r2,-28(fp)
 1811f6c:	10c00a05 	stb	r3,40(r2)
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 1811f70:	e0fffd17 	ldw	r3,-12(fp)
 1811f74:	e0bff917 	ldw	r2,-28(fp)
 1811f78:	10800617 	ldw	r2,24(r2)
 1811f7c:	1885883a 	add	r2,r3,r2
 1811f80:	e0fffd17 	ldw	r3,-12(fp)
 1811f84:	180f883a 	mov	r7,r3
 1811f88:	e1bffa17 	ldw	r6,-24(fp)
 1811f8c:	100b883a 	mov	r5,r2
 1811f90:	e13ff917 	ldw	r4,-28(fp)
 1811f94:	1811de00 	call	1811de0 <prvInsertTimerInActiveList>
 1811f98:	10004126 	beq	r2,zero,18120a0 <prvProcessReceivedCommands+0x1e4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1811f9c:	e0bff917 	ldw	r2,-28(fp)
 1811fa0:	10800817 	ldw	r2,32(r2)
 1811fa4:	e13ff917 	ldw	r4,-28(fp)
 1811fa8:	103ee83a 	callr	r2
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1811fac:	e0bff917 	ldw	r2,-28(fp)
 1811fb0:	10800a03 	ldbu	r2,40(r2)
 1811fb4:	10803fcc 	andi	r2,r2,255
 1811fb8:	1080010c 	andi	r2,r2,4
 1811fbc:	10003826 	beq	r2,zero,18120a0 <prvProcessReceivedCommands+0x1e4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 1811fc0:	e0fffd17 	ldw	r3,-12(fp)
 1811fc4:	e0bff917 	ldw	r2,-28(fp)
 1811fc8:	10800617 	ldw	r2,24(r2)
 1811fcc:	1885883a 	add	r2,r3,r2
 1811fd0:	d8000015 	stw	zero,0(sp)
 1811fd4:	000f883a 	mov	r7,zero
 1811fd8:	100d883a 	mov	r6,r2
 1811fdc:	000b883a 	mov	r5,zero
 1811fe0:	e13ff917 	ldw	r4,-28(fp)
 1811fe4:	18118c40 	call	18118c4 <xTimerGenericCommand>
 1811fe8:	e0bffb15 	stw	r2,-20(fp)
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 1811fec:	00002c06 	br	18120a0 <prvProcessReceivedCommands+0x1e4>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 1811ff0:	e0bff917 	ldw	r2,-28(fp)
 1811ff4:	10c00a03 	ldbu	r3,40(r2)
 1811ff8:	00bfff84 	movi	r2,-2
 1811ffc:	1884703a 	and	r2,r3,r2
 1812000:	1007883a 	mov	r3,r2
 1812004:	e0bff917 	ldw	r2,-28(fp)
 1812008:	10c00a05 	stb	r3,40(r2)
					break;
 181200c:	00002406 	br	18120a0 <prvProcessReceivedCommands+0x1e4>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 1812010:	e0bff917 	ldw	r2,-28(fp)
 1812014:	10800a03 	ldbu	r2,40(r2)
 1812018:	10800054 	ori	r2,r2,1
 181201c:	1007883a 	mov	r3,r2
 1812020:	e0bff917 	ldw	r2,-28(fp)
 1812024:	10c00a05 	stb	r3,40(r2)
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1812028:	e0fffd17 	ldw	r3,-12(fp)
 181202c:	e0bff917 	ldw	r2,-28(fp)
 1812030:	10c00615 	stw	r3,24(r2)
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 1812034:	e0bff917 	ldw	r2,-28(fp)
 1812038:	10c00617 	ldw	r3,24(r2)
 181203c:	e0bffa17 	ldw	r2,-24(fp)
 1812040:	1885883a 	add	r2,r3,r2
 1812044:	e1fffa17 	ldw	r7,-24(fp)
 1812048:	e1bffa17 	ldw	r6,-24(fp)
 181204c:	100b883a 	mov	r5,r2
 1812050:	e13ff917 	ldw	r4,-28(fp)
 1812054:	1811de00 	call	1811de0 <prvInsertTimerInActiveList>
					break;
 1812058:	00001106 	br	18120a0 <prvProcessReceivedCommands+0x1e4>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 181205c:	e0bff917 	ldw	r2,-28(fp)
 1812060:	10800a03 	ldbu	r2,40(r2)
 1812064:	10803fcc 	andi	r2,r2,255
 1812068:	1080008c 	andi	r2,r2,2
 181206c:	1000031e 	bne	r2,zero,181207c <prvProcessReceivedCommands+0x1c0>
						{
							vPortFree( pxTimer );
 1812070:	e13ff917 	ldw	r4,-28(fp)
 1812074:	18269780 	call	1826978 <vPortFree>
 1812078:	00000906 	br	18120a0 <prvProcessReceivedCommands+0x1e4>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 181207c:	e0bff917 	ldw	r2,-28(fp)
 1812080:	10c00a03 	ldbu	r3,40(r2)
 1812084:	00bfff84 	movi	r2,-2
 1812088:	1884703a 	and	r2,r3,r2
 181208c:	1007883a 	mov	r3,r2
 1812090:	e0bff917 	ldw	r2,-28(fp)
 1812094:	10c00a05 	stb	r3,40(r2)
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 1812098:	00000106 	br	18120a0 <prvProcessReceivedCommands+0x1e4>

				default	:
					/* Don't expect to get here. */
					break;
 181209c:	0001883a 	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 18120a0:	d0a7e417 	ldw	r2,-24688(gp)
 18120a4:	e0fffc04 	addi	r3,fp,-16
 18120a8:	000d883a 	mov	r6,zero
 18120ac:	180b883a 	mov	r5,r3
 18120b0:	1009883a 	mov	r4,r2
 18120b4:	180ddb00 	call	180ddb0 <xQueueReceive>
 18120b8:	103f851e 	bne	r2,zero,1811ed0 <__alt_mem_mem_0+0xff7f1ed0>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 18120bc:	0001883a 	nop
 18120c0:	e037883a 	mov	sp,fp
 18120c4:	dfc00117 	ldw	ra,4(sp)
 18120c8:	df000017 	ldw	fp,0(sp)
 18120cc:	dec00204 	addi	sp,sp,8
 18120d0:	f800283a 	ret

018120d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 18120d4:	defff804 	addi	sp,sp,-32
 18120d8:	dfc00715 	stw	ra,28(sp)
 18120dc:	df000615 	stw	fp,24(sp)
 18120e0:	df000604 	addi	fp,sp,24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 18120e4:	00003106 	br	18121ac <prvSwitchTimerLists+0xd8>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 18120e8:	d0a7e217 	ldw	r2,-24696(gp)
 18120ec:	10800317 	ldw	r2,12(r2)
 18120f0:	10800017 	ldw	r2,0(r2)
 18120f4:	e0bffb15 	stw	r2,-20(fp)

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 18120f8:	d0a7e217 	ldw	r2,-24696(gp)
 18120fc:	10800317 	ldw	r2,12(r2)
 1812100:	10800317 	ldw	r2,12(r2)
 1812104:	e0bffc15 	stw	r2,-16(fp)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1812108:	e0bffc17 	ldw	r2,-16(fp)
 181210c:	10800104 	addi	r2,r2,4
 1812110:	1009883a 	mov	r4,r2
 1812114:	1826bb40 	call	1826bb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1812118:	e0bffc17 	ldw	r2,-16(fp)
 181211c:	10800817 	ldw	r2,32(r2)
 1812120:	e13ffc17 	ldw	r4,-16(fp)
 1812124:	103ee83a 	callr	r2

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 1812128:	e0bffc17 	ldw	r2,-16(fp)
 181212c:	10800a03 	ldbu	r2,40(r2)
 1812130:	10803fcc 	andi	r2,r2,255
 1812134:	1080010c 	andi	r2,r2,4
 1812138:	10001c26 	beq	r2,zero,18121ac <prvSwitchTimerLists+0xd8>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 181213c:	e0bffc17 	ldw	r2,-16(fp)
 1812140:	10c00617 	ldw	r3,24(r2)
 1812144:	e0bffb17 	ldw	r2,-20(fp)
 1812148:	1885883a 	add	r2,r3,r2
 181214c:	e0bffd15 	stw	r2,-12(fp)
			if( xReloadTime > xNextExpireTime )
 1812150:	e0bffd17 	ldw	r2,-12(fp)
 1812154:	e0fffb17 	ldw	r3,-20(fp)
 1812158:	18800d2e 	bgeu	r3,r2,1812190 <prvSwitchTimerLists+0xbc>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 181215c:	e0bffc17 	ldw	r2,-16(fp)
 1812160:	e0fffd17 	ldw	r3,-12(fp)
 1812164:	10c00115 	stw	r3,4(r2)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1812168:	e0bffc17 	ldw	r2,-16(fp)
 181216c:	e0fffc17 	ldw	r3,-16(fp)
 1812170:	10c00415 	stw	r3,16(r2)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1812174:	d0e7e217 	ldw	r3,-24696(gp)
 1812178:	e0bffc17 	ldw	r2,-16(fp)
 181217c:	10800104 	addi	r2,r2,4
 1812180:	100b883a 	mov	r5,r2
 1812184:	1809883a 	mov	r4,r3
 1812188:	1826adc0 	call	1826adc <vListInsert>
 181218c:	00000706 	br	18121ac <prvSwitchTimerLists+0xd8>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 1812190:	d8000015 	stw	zero,0(sp)
 1812194:	000f883a 	mov	r7,zero
 1812198:	e1bffb17 	ldw	r6,-20(fp)
 181219c:	000b883a 	mov	r5,zero
 18121a0:	e13ffc17 	ldw	r4,-16(fp)
 18121a4:	18118c40 	call	18118c4 <xTimerGenericCommand>
 18121a8:	e0bffe15 	stw	r2,-8(fp)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 18121ac:	d0a7e217 	ldw	r2,-24696(gp)
 18121b0:	10800017 	ldw	r2,0(r2)
 18121b4:	103fcc1e 	bne	r2,zero,18120e8 <__alt_mem_mem_0+0xff7f20e8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 18121b8:	d0a7e217 	ldw	r2,-24696(gp)
 18121bc:	e0bfff15 	stw	r2,-4(fp)
	pxCurrentTimerList = pxOverflowTimerList;
 18121c0:	d0a7e317 	ldw	r2,-24692(gp)
 18121c4:	d0a7e215 	stw	r2,-24696(gp)
	pxOverflowTimerList = pxTemp;
 18121c8:	e0bfff17 	ldw	r2,-4(fp)
 18121cc:	d0a7e315 	stw	r2,-24692(gp)
}
 18121d0:	0001883a 	nop
 18121d4:	e037883a 	mov	sp,fp
 18121d8:	dfc00117 	ldw	ra,4(sp)
 18121dc:	df000017 	ldw	fp,0(sp)
 18121e0:	dec00204 	addi	sp,sp,8
 18121e4:	f800283a 	ret

018121e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 18121e8:	defffe04 	addi	sp,sp,-8
 18121ec:	dfc00115 	stw	ra,4(sp)
 18121f0:	df000015 	stw	fp,0(sp)
 18121f4:	d839883a 	mov	fp,sp
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 18121f8:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		if( xTimerQueue == NULL )
 18121fc:	d0a7e417 	ldw	r2,-24688(gp)
 1812200:	1000111e 	bne	r2,zero,1812248 <prvCheckForValidListAndQueue+0x60>
		{
			vListInitialise( &xActiveTimerList1 );
 1812204:	01006134 	movhi	r4,388
 1812208:	211d4e04 	addi	r4,r4,30008
 181220c:	18269bc0 	call	18269bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 1812210:	01006134 	movhi	r4,388
 1812214:	211d5304 	addi	r4,r4,30028
 1812218:	18269bc0 	call	18269bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 181221c:	00806134 	movhi	r2,388
 1812220:	109d4e04 	addi	r2,r2,30008
 1812224:	d0a7e215 	stw	r2,-24696(gp)
			pxOverflowTimerList = &xActiveTimerList2;
 1812228:	00806134 	movhi	r2,388
 181222c:	109d5304 	addi	r2,r2,30028
 1812230:	d0a7e315 	stw	r2,-24692(gp)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 1812234:	000d883a 	mov	r6,zero
 1812238:	01400304 	movi	r5,12
 181223c:	01000284 	movi	r4,10
 1812240:	180d6c40 	call	180d6c4 <xQueueGenericCreate>
 1812244:	d0a7e415 	stw	r2,-24688(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 1812248:	1810e380 	call	1810e38 <vTaskExitCritical>
}
 181224c:	0001883a 	nop
 1812250:	e037883a 	mov	sp,fp
 1812254:	dfc00117 	ldw	ra,4(sp)
 1812258:	df000017 	ldw	fp,0(sp)
 181225c:	dec00204 	addi	sp,sp,8
 1812260:	f800283a 	ret

01812264 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 1812264:	defffb04 	addi	sp,sp,-20
 1812268:	dfc00415 	stw	ra,16(sp)
 181226c:	df000315 	stw	fp,12(sp)
 1812270:	df000304 	addi	fp,sp,12
 1812274:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 1812278:	e0bfff17 	ldw	r2,-4(fp)
 181227c:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 1812280:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 1812284:	e0bffe17 	ldw	r2,-8(fp)
 1812288:	10800a03 	ldbu	r2,40(r2)
 181228c:	10803fcc 	andi	r2,r2,255
 1812290:	1080004c 	andi	r2,r2,1
 1812294:	1000021e 	bne	r2,zero,18122a0 <xTimerIsTimerActive+0x3c>
		{
			xReturn = pdFALSE;
 1812298:	e03ffd15 	stw	zero,-12(fp)
 181229c:	00000206 	br	18122a8 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 18122a0:	00800044 	movi	r2,1
 18122a4:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	taskEXIT_CRITICAL();
 18122a8:	1810e380 	call	1810e38 <vTaskExitCritical>

	return xReturn;
 18122ac:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 Can't be pointer to const due to the typedef. */
 18122b0:	e037883a 	mov	sp,fp
 18122b4:	dfc00117 	ldw	ra,4(sp)
 18122b8:	df000017 	ldw	fp,0(sp)
 18122bc:	dec00204 	addi	sp,sp,8
 18122c0:	f800283a 	ret

018122c4 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 18122c4:	defffb04 	addi	sp,sp,-20
 18122c8:	dfc00415 	stw	ra,16(sp)
 18122cc:	df000315 	stw	fp,12(sp)
 18122d0:	df000304 	addi	fp,sp,12
 18122d4:	e13fff15 	stw	r4,-4(fp)
Timer_t * const pxTimer = xTimer;
 18122d8:	e0bfff17 	ldw	r2,-4(fp)
 18122dc:	e0bffd15 	stw	r2,-12(fp)
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 18122e0:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 18122e4:	e0bffd17 	ldw	r2,-12(fp)
 18122e8:	10800717 	ldw	r2,28(r2)
 18122ec:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 18122f0:	1810e380 	call	1810e38 <vTaskExitCritical>

	return pvReturn;
 18122f4:	e0bffe17 	ldw	r2,-8(fp)
}
 18122f8:	e037883a 	mov	sp,fp
 18122fc:	dfc00117 	ldw	ra,4(sp)
 1812300:	df000017 	ldw	fp,0(sp)
 1812304:	dec00204 	addi	sp,sp,8
 1812308:	f800283a 	ret

0181230c <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 181230c:	defffb04 	addi	sp,sp,-20
 1812310:	dfc00415 	stw	ra,16(sp)
 1812314:	df000315 	stw	fp,12(sp)
 1812318:	df000304 	addi	fp,sp,12
 181231c:	e13ffe15 	stw	r4,-8(fp)
 1812320:	e17fff15 	stw	r5,-4(fp)
Timer_t * const pxTimer = xTimer;
 1812324:	e0bffe17 	ldw	r2,-8(fp)
 1812328:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 181232c:	1810de40 	call	1810de4 <vTaskEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 1812330:	e0bffd17 	ldw	r2,-12(fp)
 1812334:	e0ffff17 	ldw	r3,-4(fp)
 1812338:	10c00715 	stw	r3,28(r2)
	}
	taskEXIT_CRITICAL();
 181233c:	1810e380 	call	1810e38 <vTaskExitCritical>
}
 1812340:	0001883a 	nop
 1812344:	e037883a 	mov	sp,fp
 1812348:	dfc00117 	ldw	ra,4(sp)
 181234c:	df000017 	ldw	fp,0(sp)
 1812350:	dec00204 	addi	sp,sp,8
 1812354:	f800283a 	ret

01812358 <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
	{
 1812358:	defffe04 	addi	sp,sp,-8
 181235c:	df000115 	stw	fp,4(sp)
 1812360:	df000104 	addi	fp,sp,4
 1812364:	e13fff15 	stw	r4,-4(fp)
		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 1812368:	e0bfff17 	ldw	r2,-4(fp)
 181236c:	10800917 	ldw	r2,36(r2)
	}
 1812370:	e037883a 	mov	sp,fp
 1812374:	df000017 	ldw	fp,0(sp)
 1812378:	dec00104 	addi	sp,sp,4
 181237c:	f800283a 	ret

01812380 <vTimerSetTimerNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
	{
 1812380:	defffd04 	addi	sp,sp,-12
 1812384:	df000215 	stw	fp,8(sp)
 1812388:	df000204 	addi	fp,sp,8
 181238c:	e13ffe15 	stw	r4,-8(fp)
 1812390:	e17fff15 	stw	r5,-4(fp)
		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 1812394:	e0bffe17 	ldw	r2,-8(fp)
 1812398:	e0ffff17 	ldw	r3,-4(fp)
 181239c:	10c00915 	stw	r3,36(r2)
	}
 18123a0:	0001883a 	nop
 18123a4:	e037883a 	mov	sp,fp
 18123a8:	df000017 	ldw	fp,0(sp)
 18123ac:	dec00104 	addi	sp,sp,4
 18123b0:	f800283a 	ret

018123b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 18123b4:	defffc04 	addi	sp,sp,-16
 18123b8:	df000315 	stw	fp,12(sp)
 18123bc:	df000304 	addi	fp,sp,12
 18123c0:	e13ffd15 	stw	r4,-12(fp)
 18123c4:	e17ffe15 	stw	r5,-8(fp)
 18123c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 18123cc:	e0bfff17 	ldw	r2,-4(fp)
}
 18123d0:	e037883a 	mov	sp,fp
 18123d4:	df000017 	ldw	fp,0(sp)
 18123d8:	dec00104 	addi	sp,sp,4
 18123dc:	f800283a 	ret

018123e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 18123e0:	defffd04 	addi	sp,sp,-12
 18123e4:	dfc00215 	stw	ra,8(sp)
 18123e8:	df000115 	stw	fp,4(sp)
 18123ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 18123f0:	00806134 	movhi	r2,388
 18123f4:	10813c04 	addi	r2,r2,1264
 18123f8:	e0bfff15 	stw	r2,-4(fp)
 18123fc:	00000606 	br	1812418 <_do_ctors+0x38>
        (*ctor) (); 
 1812400:	e0bfff17 	ldw	r2,-4(fp)
 1812404:	10800017 	ldw	r2,0(r2)
 1812408:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 181240c:	e0bfff17 	ldw	r2,-4(fp)
 1812410:	10bfff04 	addi	r2,r2,-4
 1812414:	e0bfff15 	stw	r2,-4(fp)
 1812418:	e0ffff17 	ldw	r3,-4(fp)
 181241c:	00806134 	movhi	r2,388
 1812420:	10813d04 	addi	r2,r2,1268
 1812424:	18bff62e 	bgeu	r3,r2,1812400 <__alt_mem_mem_0+0xff7f2400>
        (*ctor) (); 
}
 1812428:	0001883a 	nop
 181242c:	e037883a 	mov	sp,fp
 1812430:	dfc00117 	ldw	ra,4(sp)
 1812434:	df000017 	ldw	fp,0(sp)
 1812438:	dec00204 	addi	sp,sp,8
 181243c:	f800283a 	ret

01812440 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1812440:	defffd04 	addi	sp,sp,-12
 1812444:	dfc00215 	stw	ra,8(sp)
 1812448:	df000115 	stw	fp,4(sp)
 181244c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1812450:	00806134 	movhi	r2,388
 1812454:	10813c04 	addi	r2,r2,1264
 1812458:	e0bfff15 	stw	r2,-4(fp)
 181245c:	00000606 	br	1812478 <_do_dtors+0x38>
        (*dtor) (); 
 1812460:	e0bfff17 	ldw	r2,-4(fp)
 1812464:	10800017 	ldw	r2,0(r2)
 1812468:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 181246c:	e0bfff17 	ldw	r2,-4(fp)
 1812470:	10bfff04 	addi	r2,r2,-4
 1812474:	e0bfff15 	stw	r2,-4(fp)
 1812478:	e0ffff17 	ldw	r3,-4(fp)
 181247c:	00806134 	movhi	r2,388
 1812480:	10813d04 	addi	r2,r2,1268
 1812484:	18bff62e 	bgeu	r3,r2,1812460 <__alt_mem_mem_0+0xff7f2460>
        (*dtor) (); 
}
 1812488:	0001883a 	nop
 181248c:	e037883a 	mov	sp,fp
 1812490:	dfc00117 	ldw	ra,4(sp)
 1812494:	df000017 	ldw	fp,0(sp)
 1812498:	dec00204 	addi	sp,sp,8
 181249c:	f800283a 	ret

018124a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 18124a0:	defffe04 	addi	sp,sp,-8
 18124a4:	dfc00115 	stw	ra,4(sp)
 18124a8:	df000015 	stw	fp,0(sp)
 18124ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 18124b0:	d0a01917 	ldw	r2,-32668(gp)
 18124b4:	10000326 	beq	r2,zero,18124c4 <alt_get_errno+0x24>
 18124b8:	d0a01917 	ldw	r2,-32668(gp)
 18124bc:	103ee83a 	callr	r2
 18124c0:	00000106 	br	18124c8 <alt_get_errno+0x28>
 18124c4:	d0a7ce04 	addi	r2,gp,-24776
}
 18124c8:	e037883a 	mov	sp,fp
 18124cc:	dfc00117 	ldw	ra,4(sp)
 18124d0:	df000017 	ldw	fp,0(sp)
 18124d4:	dec00204 	addi	sp,sp,8
 18124d8:	f800283a 	ret

018124dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 18124dc:	defffb04 	addi	sp,sp,-20
 18124e0:	dfc00415 	stw	ra,16(sp)
 18124e4:	df000315 	stw	fp,12(sp)
 18124e8:	df000304 	addi	fp,sp,12
 18124ec:	e13ffe15 	stw	r4,-8(fp)
 18124f0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 18124f4:	e0bffe17 	ldw	r2,-8(fp)
 18124f8:	10000616 	blt	r2,zero,1812514 <fstat+0x38>
 18124fc:	e0bffe17 	ldw	r2,-8(fp)
 1812500:	10c00324 	muli	r3,r2,12
 1812504:	00806134 	movhi	r2,388
 1812508:	108f9e04 	addi	r2,r2,15992
 181250c:	1885883a 	add	r2,r3,r2
 1812510:	00000106 	br	1812518 <fstat+0x3c>
 1812514:	0005883a 	mov	r2,zero
 1812518:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 181251c:	e0bffd17 	ldw	r2,-12(fp)
 1812520:	10001026 	beq	r2,zero,1812564 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1812524:	e0bffd17 	ldw	r2,-12(fp)
 1812528:	10800017 	ldw	r2,0(r2)
 181252c:	10800817 	ldw	r2,32(r2)
 1812530:	10000726 	beq	r2,zero,1812550 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 1812534:	e0bffd17 	ldw	r2,-12(fp)
 1812538:	10800017 	ldw	r2,0(r2)
 181253c:	10800817 	ldw	r2,32(r2)
 1812540:	e17fff17 	ldw	r5,-4(fp)
 1812544:	e13ffd17 	ldw	r4,-12(fp)
 1812548:	103ee83a 	callr	r2
 181254c:	00000a06 	br	1812578 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1812550:	e0bfff17 	ldw	r2,-4(fp)
 1812554:	00c80004 	movi	r3,8192
 1812558:	10c00115 	stw	r3,4(r2)
      return 0;
 181255c:	0005883a 	mov	r2,zero
 1812560:	00000506 	br	1812578 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1812564:	18124a00 	call	18124a0 <alt_get_errno>
 1812568:	1007883a 	mov	r3,r2
 181256c:	00801444 	movi	r2,81
 1812570:	18800015 	stw	r2,0(r3)
    return -1;
 1812574:	00bfffc4 	movi	r2,-1
  }
}
 1812578:	e037883a 	mov	sp,fp
 181257c:	dfc00117 	ldw	ra,4(sp)
 1812580:	df000017 	ldw	fp,0(sp)
 1812584:	dec00204 	addi	sp,sp,8
 1812588:	f800283a 	ret

0181258c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 181258c:	defff904 	addi	sp,sp,-28
 1812590:	dfc00615 	stw	ra,24(sp)
 1812594:	df000515 	stw	fp,20(sp)
 1812598:	df000504 	addi	fp,sp,20
 181259c:	e13ffc15 	stw	r4,-16(fp)
 18125a0:	e17ffd15 	stw	r5,-12(fp)
 18125a4:	e1bffe15 	stw	r6,-8(fp)
 18125a8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 18125ac:	e1bfff17 	ldw	r6,-4(fp)
 18125b0:	e17ffe17 	ldw	r5,-8(fp)
 18125b4:	e13ffd17 	ldw	r4,-12(fp)
 18125b8:	1812aa80 	call	1812aa8 <open>
 18125bc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 18125c0:	e0bffb17 	ldw	r2,-20(fp)
 18125c4:	10001c16 	blt	r2,zero,1812638 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 18125c8:	00806134 	movhi	r2,388
 18125cc:	108f9e04 	addi	r2,r2,15992
 18125d0:	e0fffb17 	ldw	r3,-20(fp)
 18125d4:	18c00324 	muli	r3,r3,12
 18125d8:	10c5883a 	add	r2,r2,r3
 18125dc:	10c00017 	ldw	r3,0(r2)
 18125e0:	e0bffc17 	ldw	r2,-16(fp)
 18125e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 18125e8:	00806134 	movhi	r2,388
 18125ec:	108f9e04 	addi	r2,r2,15992
 18125f0:	e0fffb17 	ldw	r3,-20(fp)
 18125f4:	18c00324 	muli	r3,r3,12
 18125f8:	10c5883a 	add	r2,r2,r3
 18125fc:	10800104 	addi	r2,r2,4
 1812600:	10c00017 	ldw	r3,0(r2)
 1812604:	e0bffc17 	ldw	r2,-16(fp)
 1812608:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 181260c:	00806134 	movhi	r2,388
 1812610:	108f9e04 	addi	r2,r2,15992
 1812614:	e0fffb17 	ldw	r3,-20(fp)
 1812618:	18c00324 	muli	r3,r3,12
 181261c:	10c5883a 	add	r2,r2,r3
 1812620:	10800204 	addi	r2,r2,8
 1812624:	10c00017 	ldw	r3,0(r2)
 1812628:	e0bffc17 	ldw	r2,-16(fp)
 181262c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1812630:	e13ffb17 	ldw	r4,-20(fp)
 1812634:	1812e640 	call	1812e64 <alt_release_fd>
  }
} 
 1812638:	0001883a 	nop
 181263c:	e037883a 	mov	sp,fp
 1812640:	dfc00117 	ldw	ra,4(sp)
 1812644:	df000017 	ldw	fp,0(sp)
 1812648:	dec00204 	addi	sp,sp,8
 181264c:	f800283a 	ret

01812650 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1812650:	defffb04 	addi	sp,sp,-20
 1812654:	dfc00415 	stw	ra,16(sp)
 1812658:	df000315 	stw	fp,12(sp)
 181265c:	df000304 	addi	fp,sp,12
 1812660:	e13ffd15 	stw	r4,-12(fp)
 1812664:	e17ffe15 	stw	r5,-8(fp)
 1812668:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 181266c:	01c07fc4 	movi	r7,511
 1812670:	01800044 	movi	r6,1
 1812674:	e17ffd17 	ldw	r5,-12(fp)
 1812678:	01006134 	movhi	r4,388
 181267c:	210fa104 	addi	r4,r4,16004
 1812680:	181258c0 	call	181258c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1812684:	01c07fc4 	movi	r7,511
 1812688:	000d883a 	mov	r6,zero
 181268c:	e17ffe17 	ldw	r5,-8(fp)
 1812690:	01006134 	movhi	r4,388
 1812694:	210f9e04 	addi	r4,r4,15992
 1812698:	181258c0 	call	181258c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 181269c:	01c07fc4 	movi	r7,511
 18126a0:	01800044 	movi	r6,1
 18126a4:	e17fff17 	ldw	r5,-4(fp)
 18126a8:	01006134 	movhi	r4,388
 18126ac:	210fa404 	addi	r4,r4,16016
 18126b0:	181258c0 	call	181258c <alt_open_fd>
}  
 18126b4:	0001883a 	nop
 18126b8:	e037883a 	mov	sp,fp
 18126bc:	dfc00117 	ldw	ra,4(sp)
 18126c0:	df000017 	ldw	fp,0(sp)
 18126c4:	dec00204 	addi	sp,sp,8
 18126c8:	f800283a 	ret

018126cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 18126cc:	defffe04 	addi	sp,sp,-8
 18126d0:	dfc00115 	stw	ra,4(sp)
 18126d4:	df000015 	stw	fp,0(sp)
 18126d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 18126dc:	d0a01917 	ldw	r2,-32668(gp)
 18126e0:	10000326 	beq	r2,zero,18126f0 <alt_get_errno+0x24>
 18126e4:	d0a01917 	ldw	r2,-32668(gp)
 18126e8:	103ee83a 	callr	r2
 18126ec:	00000106 	br	18126f4 <alt_get_errno+0x28>
 18126f0:	d0a7ce04 	addi	r2,gp,-24776
}
 18126f4:	e037883a 	mov	sp,fp
 18126f8:	dfc00117 	ldw	ra,4(sp)
 18126fc:	df000017 	ldw	fp,0(sp)
 1812700:	dec00204 	addi	sp,sp,8
 1812704:	f800283a 	ret

01812708 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1812708:	deffed04 	addi	sp,sp,-76
 181270c:	dfc01215 	stw	ra,72(sp)
 1812710:	df001115 	stw	fp,68(sp)
 1812714:	df001104 	addi	fp,sp,68
 1812718:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 181271c:	e0bfff17 	ldw	r2,-4(fp)
 1812720:	10000616 	blt	r2,zero,181273c <isatty+0x34>
 1812724:	e0bfff17 	ldw	r2,-4(fp)
 1812728:	10c00324 	muli	r3,r2,12
 181272c:	00806134 	movhi	r2,388
 1812730:	108f9e04 	addi	r2,r2,15992
 1812734:	1885883a 	add	r2,r3,r2
 1812738:	00000106 	br	1812740 <isatty+0x38>
 181273c:	0005883a 	mov	r2,zero
 1812740:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 1812744:	e0bfef17 	ldw	r2,-68(fp)
 1812748:	10000e26 	beq	r2,zero,1812784 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 181274c:	e0bfef17 	ldw	r2,-68(fp)
 1812750:	10800017 	ldw	r2,0(r2)
 1812754:	10800817 	ldw	r2,32(r2)
 1812758:	1000021e 	bne	r2,zero,1812764 <isatty+0x5c>
    {
      return 1;
 181275c:	00800044 	movi	r2,1
 1812760:	00000d06 	br	1812798 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1812764:	e0bff004 	addi	r2,fp,-64
 1812768:	100b883a 	mov	r5,r2
 181276c:	e13fff17 	ldw	r4,-4(fp)
 1812770:	18124dc0 	call	18124dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1812774:	e0bff117 	ldw	r2,-60(fp)
 1812778:	10880020 	cmpeqi	r2,r2,8192
 181277c:	10803fcc 	andi	r2,r2,255
 1812780:	00000506 	br	1812798 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1812784:	18126cc0 	call	18126cc <alt_get_errno>
 1812788:	1007883a 	mov	r3,r2
 181278c:	00801444 	movi	r2,81
 1812790:	18800015 	stw	r2,0(r3)
    return 0;
 1812794:	0005883a 	mov	r2,zero
  }
}
 1812798:	e037883a 	mov	sp,fp
 181279c:	dfc00117 	ldw	ra,4(sp)
 18127a0:	df000017 	ldw	fp,0(sp)
 18127a4:	dec00204 	addi	sp,sp,8
 18127a8:	f800283a 	ret

018127ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 18127ac:	defffc04 	addi	sp,sp,-16
 18127b0:	df000315 	stw	fp,12(sp)
 18127b4:	df000304 	addi	fp,sp,12
 18127b8:	e13ffd15 	stw	r4,-12(fp)
 18127bc:	e17ffe15 	stw	r5,-8(fp)
 18127c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 18127c4:	e0fffe17 	ldw	r3,-8(fp)
 18127c8:	e0bffd17 	ldw	r2,-12(fp)
 18127cc:	18800c26 	beq	r3,r2,1812800 <alt_load_section+0x54>
  {
    while( to != end )
 18127d0:	00000806 	br	18127f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 18127d4:	e0bffe17 	ldw	r2,-8(fp)
 18127d8:	10c00104 	addi	r3,r2,4
 18127dc:	e0fffe15 	stw	r3,-8(fp)
 18127e0:	e0fffd17 	ldw	r3,-12(fp)
 18127e4:	19000104 	addi	r4,r3,4
 18127e8:	e13ffd15 	stw	r4,-12(fp)
 18127ec:	18c00017 	ldw	r3,0(r3)
 18127f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 18127f4:	e0fffe17 	ldw	r3,-8(fp)
 18127f8:	e0bfff17 	ldw	r2,-4(fp)
 18127fc:	18bff51e 	bne	r3,r2,18127d4 <__alt_mem_mem_0+0xff7f27d4>
    {
      *to++ = *from++;
    }
  }
}
 1812800:	0001883a 	nop
 1812804:	e037883a 	mov	sp,fp
 1812808:	df000017 	ldw	fp,0(sp)
 181280c:	dec00104 	addi	sp,sp,4
 1812810:	f800283a 	ret

01812814 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1812814:	defffe04 	addi	sp,sp,-8
 1812818:	dfc00115 	stw	ra,4(sp)
 181281c:	df000015 	stw	fp,0(sp)
 1812820:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1812824:	01806134 	movhi	r6,388
 1812828:	31951104 	addi	r6,r6,21572
 181282c:	01406134 	movhi	r5,388
 1812830:	294d6b04 	addi	r5,r5,13740
 1812834:	01006134 	movhi	r4,388
 1812838:	21151104 	addi	r4,r4,21572
 181283c:	18127ac0 	call	18127ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1812840:	01806034 	movhi	r6,384
 1812844:	31810504 	addi	r6,r6,1044
 1812848:	01406034 	movhi	r5,384
 181284c:	29400804 	addi	r5,r5,32
 1812850:	01006034 	movhi	r4,384
 1812854:	21000804 	addi	r4,r4,32
 1812858:	18127ac0 	call	18127ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 181285c:	01806134 	movhi	r6,388
 1812860:	318d6b04 	addi	r6,r6,13740
 1812864:	01406134 	movhi	r5,388
 1812868:	29413d04 	addi	r5,r5,1268
 181286c:	01006134 	movhi	r4,388
 1812870:	21013d04 	addi	r4,r4,1268
 1812874:	18127ac0 	call	18127ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1812878:	18272f40 	call	18272f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 181287c:	18278600 	call	1827860 <alt_icache_flush_all>
}
 1812880:	0001883a 	nop
 1812884:	e037883a 	mov	sp,fp
 1812888:	dfc00117 	ldw	ra,4(sp)
 181288c:	df000017 	ldw	fp,0(sp)
 1812890:	dec00204 	addi	sp,sp,8
 1812894:	f800283a 	ret

01812898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1812898:	defffe04 	addi	sp,sp,-8
 181289c:	dfc00115 	stw	ra,4(sp)
 18128a0:	df000015 	stw	fp,0(sp)
 18128a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 18128a8:	d0a01917 	ldw	r2,-32668(gp)
 18128ac:	10000326 	beq	r2,zero,18128bc <alt_get_errno+0x24>
 18128b0:	d0a01917 	ldw	r2,-32668(gp)
 18128b4:	103ee83a 	callr	r2
 18128b8:	00000106 	br	18128c0 <alt_get_errno+0x28>
 18128bc:	d0a7ce04 	addi	r2,gp,-24776
}
 18128c0:	e037883a 	mov	sp,fp
 18128c4:	dfc00117 	ldw	ra,4(sp)
 18128c8:	df000017 	ldw	fp,0(sp)
 18128cc:	dec00204 	addi	sp,sp,8
 18128d0:	f800283a 	ret

018128d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 18128d4:	defff904 	addi	sp,sp,-28
 18128d8:	dfc00615 	stw	ra,24(sp)
 18128dc:	df000515 	stw	fp,20(sp)
 18128e0:	df000504 	addi	fp,sp,20
 18128e4:	e13ffd15 	stw	r4,-12(fp)
 18128e8:	e17ffe15 	stw	r5,-8(fp)
 18128ec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 18128f0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 18128f4:	e0bffd17 	ldw	r2,-12(fp)
 18128f8:	10000616 	blt	r2,zero,1812914 <lseek+0x40>
 18128fc:	e0bffd17 	ldw	r2,-12(fp)
 1812900:	10c00324 	muli	r3,r2,12
 1812904:	00806134 	movhi	r2,388
 1812908:	108f9e04 	addi	r2,r2,15992
 181290c:	1885883a 	add	r2,r3,r2
 1812910:	00000106 	br	1812918 <lseek+0x44>
 1812914:	0005883a 	mov	r2,zero
 1812918:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 181291c:	e0bffc17 	ldw	r2,-16(fp)
 1812920:	10001026 	beq	r2,zero,1812964 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1812924:	e0bffc17 	ldw	r2,-16(fp)
 1812928:	10800017 	ldw	r2,0(r2)
 181292c:	10800717 	ldw	r2,28(r2)
 1812930:	10000926 	beq	r2,zero,1812958 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1812934:	e0bffc17 	ldw	r2,-16(fp)
 1812938:	10800017 	ldw	r2,0(r2)
 181293c:	10800717 	ldw	r2,28(r2)
 1812940:	e1bfff17 	ldw	r6,-4(fp)
 1812944:	e17ffe17 	ldw	r5,-8(fp)
 1812948:	e13ffc17 	ldw	r4,-16(fp)
 181294c:	103ee83a 	callr	r2
 1812950:	e0bffb15 	stw	r2,-20(fp)
 1812954:	00000506 	br	181296c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1812958:	00bfde84 	movi	r2,-134
 181295c:	e0bffb15 	stw	r2,-20(fp)
 1812960:	00000206 	br	181296c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 1812964:	00bfebc4 	movi	r2,-81
 1812968:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 181296c:	e0bffb17 	ldw	r2,-20(fp)
 1812970:	1000070e 	bge	r2,zero,1812990 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 1812974:	18128980 	call	1812898 <alt_get_errno>
 1812978:	1007883a 	mov	r3,r2
 181297c:	e0bffb17 	ldw	r2,-20(fp)
 1812980:	0085c83a 	sub	r2,zero,r2
 1812984:	18800015 	stw	r2,0(r3)
    rc = -1;
 1812988:	00bfffc4 	movi	r2,-1
 181298c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1812990:	e0bffb17 	ldw	r2,-20(fp)
}
 1812994:	e037883a 	mov	sp,fp
 1812998:	dfc00117 	ldw	ra,4(sp)
 181299c:	df000017 	ldw	fp,0(sp)
 18129a0:	dec00204 	addi	sp,sp,8
 18129a4:	f800283a 	ret

018129a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 18129a8:	defffe04 	addi	sp,sp,-8
 18129ac:	dfc00115 	stw	ra,4(sp)
 18129b0:	df000015 	stw	fp,0(sp)
 18129b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 18129b8:	d0a01917 	ldw	r2,-32668(gp)
 18129bc:	10000326 	beq	r2,zero,18129cc <alt_get_errno+0x24>
 18129c0:	d0a01917 	ldw	r2,-32668(gp)
 18129c4:	103ee83a 	callr	r2
 18129c8:	00000106 	br	18129d0 <alt_get_errno+0x28>
 18129cc:	d0a7ce04 	addi	r2,gp,-24776
}
 18129d0:	e037883a 	mov	sp,fp
 18129d4:	dfc00117 	ldw	ra,4(sp)
 18129d8:	df000017 	ldw	fp,0(sp)
 18129dc:	dec00204 	addi	sp,sp,8
 18129e0:	f800283a 	ret

018129e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 18129e4:	defffd04 	addi	sp,sp,-12
 18129e8:	df000215 	stw	fp,8(sp)
 18129ec:	df000204 	addi	fp,sp,8
 18129f0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 18129f4:	e0bfff17 	ldw	r2,-4(fp)
 18129f8:	10800217 	ldw	r2,8(r2)
 18129fc:	10d00034 	orhi	r3,r2,16384
 1812a00:	e0bfff17 	ldw	r2,-4(fp)
 1812a04:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1812a08:	e03ffe15 	stw	zero,-8(fp)
 1812a0c:	00001d06 	br	1812a84 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1812a10:	00806134 	movhi	r2,388
 1812a14:	108f9e04 	addi	r2,r2,15992
 1812a18:	e0fffe17 	ldw	r3,-8(fp)
 1812a1c:	18c00324 	muli	r3,r3,12
 1812a20:	10c5883a 	add	r2,r2,r3
 1812a24:	10c00017 	ldw	r3,0(r2)
 1812a28:	e0bfff17 	ldw	r2,-4(fp)
 1812a2c:	10800017 	ldw	r2,0(r2)
 1812a30:	1880111e 	bne	r3,r2,1812a78 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1812a34:	00806134 	movhi	r2,388
 1812a38:	108f9e04 	addi	r2,r2,15992
 1812a3c:	e0fffe17 	ldw	r3,-8(fp)
 1812a40:	18c00324 	muli	r3,r3,12
 1812a44:	10c5883a 	add	r2,r2,r3
 1812a48:	10800204 	addi	r2,r2,8
 1812a4c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1812a50:	1000090e 	bge	r2,zero,1812a78 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1812a54:	e0bffe17 	ldw	r2,-8(fp)
 1812a58:	10c00324 	muli	r3,r2,12
 1812a5c:	00806134 	movhi	r2,388
 1812a60:	108f9e04 	addi	r2,r2,15992
 1812a64:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1812a68:	e0bfff17 	ldw	r2,-4(fp)
 1812a6c:	18800226 	beq	r3,r2,1812a78 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1812a70:	00bffcc4 	movi	r2,-13
 1812a74:	00000806 	br	1812a98 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1812a78:	e0bffe17 	ldw	r2,-8(fp)
 1812a7c:	10800044 	addi	r2,r2,1
 1812a80:	e0bffe15 	stw	r2,-8(fp)
 1812a84:	d0a00a17 	ldw	r2,-32728(gp)
 1812a88:	1007883a 	mov	r3,r2
 1812a8c:	e0bffe17 	ldw	r2,-8(fp)
 1812a90:	18bfdf2e 	bgeu	r3,r2,1812a10 <__alt_mem_mem_0+0xff7f2a10>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1812a94:	0005883a 	mov	r2,zero
}
 1812a98:	e037883a 	mov	sp,fp
 1812a9c:	df000017 	ldw	fp,0(sp)
 1812aa0:	dec00104 	addi	sp,sp,4
 1812aa4:	f800283a 	ret

01812aa8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1812aa8:	defff604 	addi	sp,sp,-40
 1812aac:	dfc00915 	stw	ra,36(sp)
 1812ab0:	df000815 	stw	fp,32(sp)
 1812ab4:	df000804 	addi	fp,sp,32
 1812ab8:	e13ffd15 	stw	r4,-12(fp)
 1812abc:	e17ffe15 	stw	r5,-8(fp)
 1812ac0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1812ac4:	00bfffc4 	movi	r2,-1
 1812ac8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1812acc:	00bffb44 	movi	r2,-19
 1812ad0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1812ad4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1812ad8:	d1600804 	addi	r5,gp,-32736
 1812adc:	e13ffd17 	ldw	r4,-12(fp)
 1812ae0:	18273f40 	call	18273f4 <alt_find_dev>
 1812ae4:	e0bff815 	stw	r2,-32(fp)
 1812ae8:	e0bff817 	ldw	r2,-32(fp)
 1812aec:	1000051e 	bne	r2,zero,1812b04 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1812af0:	e13ffd17 	ldw	r4,-12(fp)
 1812af4:	18274840 	call	1827484 <alt_find_file>
 1812af8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1812afc:	00800044 	movi	r2,1
 1812b00:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1812b04:	e0bff817 	ldw	r2,-32(fp)
 1812b08:	10002926 	beq	r2,zero,1812bb0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1812b0c:	e13ff817 	ldw	r4,-32(fp)
 1812b10:	182758c0 	call	182758c <alt_get_fd>
 1812b14:	e0bff915 	stw	r2,-28(fp)
 1812b18:	e0bff917 	ldw	r2,-28(fp)
 1812b1c:	1000030e 	bge	r2,zero,1812b2c <open+0x84>
    {
      status = index;
 1812b20:	e0bff917 	ldw	r2,-28(fp)
 1812b24:	e0bffa15 	stw	r2,-24(fp)
 1812b28:	00002306 	br	1812bb8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 1812b2c:	e0bff917 	ldw	r2,-28(fp)
 1812b30:	10c00324 	muli	r3,r2,12
 1812b34:	00806134 	movhi	r2,388
 1812b38:	108f9e04 	addi	r2,r2,15992
 1812b3c:	1885883a 	add	r2,r3,r2
 1812b40:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1812b44:	e0fffe17 	ldw	r3,-8(fp)
 1812b48:	00900034 	movhi	r2,16384
 1812b4c:	10bfffc4 	addi	r2,r2,-1
 1812b50:	1886703a 	and	r3,r3,r2
 1812b54:	e0bffc17 	ldw	r2,-16(fp)
 1812b58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1812b5c:	e0bffb17 	ldw	r2,-20(fp)
 1812b60:	1000051e 	bne	r2,zero,1812b78 <open+0xd0>
 1812b64:	e13ffc17 	ldw	r4,-16(fp)
 1812b68:	18129e40 	call	18129e4 <alt_file_locked>
 1812b6c:	e0bffa15 	stw	r2,-24(fp)
 1812b70:	e0bffa17 	ldw	r2,-24(fp)
 1812b74:	10001016 	blt	r2,zero,1812bb8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1812b78:	e0bff817 	ldw	r2,-32(fp)
 1812b7c:	10800317 	ldw	r2,12(r2)
 1812b80:	10000826 	beq	r2,zero,1812ba4 <open+0xfc>
 1812b84:	e0bff817 	ldw	r2,-32(fp)
 1812b88:	10800317 	ldw	r2,12(r2)
 1812b8c:	e1ffff17 	ldw	r7,-4(fp)
 1812b90:	e1bffe17 	ldw	r6,-8(fp)
 1812b94:	e17ffd17 	ldw	r5,-12(fp)
 1812b98:	e13ffc17 	ldw	r4,-16(fp)
 1812b9c:	103ee83a 	callr	r2
 1812ba0:	00000106 	br	1812ba8 <open+0x100>
 1812ba4:	0005883a 	mov	r2,zero
 1812ba8:	e0bffa15 	stw	r2,-24(fp)
 1812bac:	00000206 	br	1812bb8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1812bb0:	00bffb44 	movi	r2,-19
 1812bb4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1812bb8:	e0bffa17 	ldw	r2,-24(fp)
 1812bbc:	1000090e 	bge	r2,zero,1812be4 <open+0x13c>
  {
    alt_release_fd (index);  
 1812bc0:	e13ff917 	ldw	r4,-28(fp)
 1812bc4:	1812e640 	call	1812e64 <alt_release_fd>
    ALT_ERRNO = -status;
 1812bc8:	18129a80 	call	18129a8 <alt_get_errno>
 1812bcc:	1007883a 	mov	r3,r2
 1812bd0:	e0bffa17 	ldw	r2,-24(fp)
 1812bd4:	0085c83a 	sub	r2,zero,r2
 1812bd8:	18800015 	stw	r2,0(r3)
    return -1;
 1812bdc:	00bfffc4 	movi	r2,-1
 1812be0:	00000106 	br	1812be8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 1812be4:	e0bff917 	ldw	r2,-28(fp)
}
 1812be8:	e037883a 	mov	sp,fp
 1812bec:	dfc00117 	ldw	ra,4(sp)
 1812bf0:	df000017 	ldw	fp,0(sp)
 1812bf4:	dec00204 	addi	sp,sp,8
 1812bf8:	f800283a 	ret

01812bfc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 1812bfc:	defff204 	addi	sp,sp,-56
 1812c00:	dfc00a15 	stw	ra,40(sp)
 1812c04:	df000915 	stw	fp,36(sp)
 1812c08:	df000904 	addi	fp,sp,36
 1812c0c:	e13fff15 	stw	r4,-4(fp)
 1812c10:	e1400215 	stw	r5,8(fp)
 1812c14:	e1800315 	stw	r6,12(fp)
 1812c18:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 1812c1c:	e0800204 	addi	r2,fp,8
 1812c20:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 1812c24:	e0bfff17 	ldw	r2,-4(fp)
 1812c28:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 1812c2c:	00006f06 	br	1812dec <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 1812c30:	e0bff807 	ldb	r2,-32(fp)
 1812c34:	10800960 	cmpeqi	r2,r2,37
 1812c38:	1000041e 	bne	r2,zero,1812c4c <alt_printf+0x50>
        {
            alt_putchar(c);
 1812c3c:	e0bff807 	ldb	r2,-32(fp)
 1812c40:	1009883a 	mov	r4,r2
 1812c44:	1812e280 	call	1812e28 <alt_putchar>
 1812c48:	00006806 	br	1812dec <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 1812c4c:	e0bff717 	ldw	r2,-36(fp)
 1812c50:	10c00044 	addi	r3,r2,1
 1812c54:	e0fff715 	stw	r3,-36(fp)
 1812c58:	10800003 	ldbu	r2,0(r2)
 1812c5c:	e0bff805 	stb	r2,-32(fp)
 1812c60:	e0bff807 	ldb	r2,-32(fp)
 1812c64:	10006926 	beq	r2,zero,1812e0c <alt_printf+0x210>
            {
                if (c == '%')
 1812c68:	e0bff807 	ldb	r2,-32(fp)
 1812c6c:	10800958 	cmpnei	r2,r2,37
 1812c70:	1000041e 	bne	r2,zero,1812c84 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 1812c74:	e0bff807 	ldb	r2,-32(fp)
 1812c78:	1009883a 	mov	r4,r2
 1812c7c:	1812e280 	call	1812e28 <alt_putchar>
 1812c80:	00005a06 	br	1812dec <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 1812c84:	e0bff807 	ldb	r2,-32(fp)
 1812c88:	108018d8 	cmpnei	r2,r2,99
 1812c8c:	1000081e 	bne	r2,zero,1812cb0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 1812c90:	e0bffe17 	ldw	r2,-8(fp)
 1812c94:	10c00104 	addi	r3,r2,4
 1812c98:	e0fffe15 	stw	r3,-8(fp)
 1812c9c:	10800017 	ldw	r2,0(r2)
 1812ca0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 1812ca4:	e13ffd17 	ldw	r4,-12(fp)
 1812ca8:	1812e280 	call	1812e28 <alt_putchar>
 1812cac:	00004f06 	br	1812dec <alt_printf+0x1f0>
                }
                else if (c == 'x')
 1812cb0:	e0bff807 	ldb	r2,-32(fp)
 1812cb4:	10801e18 	cmpnei	r2,r2,120
 1812cb8:	1000341e 	bne	r2,zero,1812d8c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 1812cbc:	e0bffe17 	ldw	r2,-8(fp)
 1812cc0:	10c00104 	addi	r3,r2,4
 1812cc4:	e0fffe15 	stw	r3,-8(fp)
 1812cc8:	10800017 	ldw	r2,0(r2)
 1812ccc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 1812cd0:	e0bffb17 	ldw	r2,-20(fp)
 1812cd4:	1000031e 	bne	r2,zero,1812ce4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 1812cd8:	01000c04 	movi	r4,48
 1812cdc:	1812e280 	call	1812e28 <alt_putchar>
                        continue;
 1812ce0:	00004206 	br	1812dec <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 1812ce4:	00800704 	movi	r2,28
 1812ce8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 1812cec:	00000306 	br	1812cfc <alt_printf+0x100>
                        digit_shift -= 4;
 1812cf0:	e0bff917 	ldw	r2,-28(fp)
 1812cf4:	10bfff04 	addi	r2,r2,-4
 1812cf8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 1812cfc:	00c003c4 	movi	r3,15
 1812d00:	e0bff917 	ldw	r2,-28(fp)
 1812d04:	1884983a 	sll	r2,r3,r2
 1812d08:	1007883a 	mov	r3,r2
 1812d0c:	e0bffb17 	ldw	r2,-20(fp)
 1812d10:	1884703a 	and	r2,r3,r2
 1812d14:	103ff626 	beq	r2,zero,1812cf0 <__alt_mem_mem_0+0xff7f2cf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 1812d18:	00001906 	br	1812d80 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 1812d1c:	00c003c4 	movi	r3,15
 1812d20:	e0bff917 	ldw	r2,-28(fp)
 1812d24:	1884983a 	sll	r2,r3,r2
 1812d28:	1007883a 	mov	r3,r2
 1812d2c:	e0bffb17 	ldw	r2,-20(fp)
 1812d30:	1886703a 	and	r3,r3,r2
 1812d34:	e0bff917 	ldw	r2,-28(fp)
 1812d38:	1884d83a 	srl	r2,r3,r2
 1812d3c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 1812d40:	e0bffc17 	ldw	r2,-16(fp)
 1812d44:	108002a8 	cmpgeui	r2,r2,10
 1812d48:	1000041e 	bne	r2,zero,1812d5c <alt_printf+0x160>
                            c = '0' + digit;
 1812d4c:	e0bffc17 	ldw	r2,-16(fp)
 1812d50:	10800c04 	addi	r2,r2,48
 1812d54:	e0bff805 	stb	r2,-32(fp)
 1812d58:	00000306 	br	1812d68 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 1812d5c:	e0bffc17 	ldw	r2,-16(fp)
 1812d60:	108015c4 	addi	r2,r2,87
 1812d64:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 1812d68:	e0bff807 	ldb	r2,-32(fp)
 1812d6c:	1009883a 	mov	r4,r2
 1812d70:	1812e280 	call	1812e28 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 1812d74:	e0bff917 	ldw	r2,-28(fp)
 1812d78:	10bfff04 	addi	r2,r2,-4
 1812d7c:	e0bff915 	stw	r2,-28(fp)
 1812d80:	e0bff917 	ldw	r2,-28(fp)
 1812d84:	103fe50e 	bge	r2,zero,1812d1c <__alt_mem_mem_0+0xff7f2d1c>
 1812d88:	00001806 	br	1812dec <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 1812d8c:	e0bff807 	ldb	r2,-32(fp)
 1812d90:	10801cd8 	cmpnei	r2,r2,115
 1812d94:	1000151e 	bne	r2,zero,1812dec <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 1812d98:	e0bffe17 	ldw	r2,-8(fp)
 1812d9c:	10c00104 	addi	r3,r2,4
 1812da0:	e0fffe15 	stw	r3,-8(fp)
 1812da4:	10800017 	ldw	r2,0(r2)
 1812da8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 1812dac:	00000906 	br	1812dd4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 1812db0:	e0bffa17 	ldw	r2,-24(fp)
 1812db4:	10c00044 	addi	r3,r2,1
 1812db8:	e0fffa15 	stw	r3,-24(fp)
 1812dbc:	10800003 	ldbu	r2,0(r2)
 1812dc0:	10803fcc 	andi	r2,r2,255
 1812dc4:	1080201c 	xori	r2,r2,128
 1812dc8:	10bfe004 	addi	r2,r2,-128
 1812dcc:	1009883a 	mov	r4,r2
 1812dd0:	1812e280 	call	1812e28 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 1812dd4:	e0bffa17 	ldw	r2,-24(fp)
 1812dd8:	10800003 	ldbu	r2,0(r2)
 1812ddc:	10803fcc 	andi	r2,r2,255
 1812de0:	1080201c 	xori	r2,r2,128
 1812de4:	10bfe004 	addi	r2,r2,-128
 1812de8:	103ff11e 	bne	r2,zero,1812db0 <__alt_mem_mem_0+0xff7f2db0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 1812dec:	e0bff717 	ldw	r2,-36(fp)
 1812df0:	10c00044 	addi	r3,r2,1
 1812df4:	e0fff715 	stw	r3,-36(fp)
 1812df8:	10800003 	ldbu	r2,0(r2)
 1812dfc:	e0bff805 	stb	r2,-32(fp)
 1812e00:	e0bff807 	ldb	r2,-32(fp)
 1812e04:	103f8a1e 	bne	r2,zero,1812c30 <__alt_mem_mem_0+0xff7f2c30>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 1812e08:	00000106 	br	1812e10 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 1812e0c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 1812e10:	0001883a 	nop
 1812e14:	e037883a 	mov	sp,fp
 1812e18:	dfc00117 	ldw	ra,4(sp)
 1812e1c:	df000017 	ldw	fp,0(sp)
 1812e20:	dec00504 	addi	sp,sp,20
 1812e24:	f800283a 	ret

01812e28 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 1812e28:	defffd04 	addi	sp,sp,-12
 1812e2c:	dfc00215 	stw	ra,8(sp)
 1812e30:	df000115 	stw	fp,4(sp)
 1812e34:	df000104 	addi	fp,sp,4
 1812e38:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 1812e3c:	d0a00117 	ldw	r2,-32764(gp)
 1812e40:	10800217 	ldw	r2,8(r2)
 1812e44:	100b883a 	mov	r5,r2
 1812e48:	e13fff17 	ldw	r4,-4(fp)
 1812e4c:	183c8000 	call	183c800 <putc>
#endif
#endif
}
 1812e50:	e037883a 	mov	sp,fp
 1812e54:	dfc00117 	ldw	ra,4(sp)
 1812e58:	df000017 	ldw	fp,0(sp)
 1812e5c:	dec00204 	addi	sp,sp,8
 1812e60:	f800283a 	ret

01812e64 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1812e64:	defffe04 	addi	sp,sp,-8
 1812e68:	df000115 	stw	fp,4(sp)
 1812e6c:	df000104 	addi	fp,sp,4
 1812e70:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1812e74:	e0bfff17 	ldw	r2,-4(fp)
 1812e78:	108000d0 	cmplti	r2,r2,3
 1812e7c:	10000d1e 	bne	r2,zero,1812eb4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1812e80:	00806134 	movhi	r2,388
 1812e84:	108f9e04 	addi	r2,r2,15992
 1812e88:	e0ffff17 	ldw	r3,-4(fp)
 1812e8c:	18c00324 	muli	r3,r3,12
 1812e90:	10c5883a 	add	r2,r2,r3
 1812e94:	10800204 	addi	r2,r2,8
 1812e98:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1812e9c:	00806134 	movhi	r2,388
 1812ea0:	108f9e04 	addi	r2,r2,15992
 1812ea4:	e0ffff17 	ldw	r3,-4(fp)
 1812ea8:	18c00324 	muli	r3,r3,12
 1812eac:	10c5883a 	add	r2,r2,r3
 1812eb0:	10000015 	stw	zero,0(r2)
  }
}
 1812eb4:	0001883a 	nop
 1812eb8:	e037883a 	mov	sp,fp
 1812ebc:	df000017 	ldw	fp,0(sp)
 1812ec0:	dec00104 	addi	sp,sp,4
 1812ec4:	f800283a 	ret

01812ec8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1812ec8:	defff904 	addi	sp,sp,-28
 1812ecc:	df000615 	stw	fp,24(sp)
 1812ed0:	df000604 	addi	fp,sp,24
 1812ed4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1812ed8:	0005303a 	rdctl	r2,status
 1812edc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1812ee0:	e0fffe17 	ldw	r3,-8(fp)
 1812ee4:	00bfff84 	movi	r2,-2
 1812ee8:	1884703a 	and	r2,r3,r2
 1812eec:	1001703a 	wrctl	status,r2
  
  return context;
 1812ef0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1812ef4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1812ef8:	d0a00b17 	ldw	r2,-32724(gp)
 1812efc:	10c000c4 	addi	r3,r2,3
 1812f00:	00bfff04 	movi	r2,-4
 1812f04:	1884703a 	and	r2,r3,r2
 1812f08:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1812f0c:	d0e00b17 	ldw	r3,-32724(gp)
 1812f10:	e0bfff17 	ldw	r2,-4(fp)
 1812f14:	1887883a 	add	r3,r3,r2
 1812f18:	00808034 	movhi	r2,512
 1812f1c:	10800004 	addi	r2,r2,0
 1812f20:	10c0062e 	bgeu	r2,r3,1812f3c <sbrk+0x74>
 1812f24:	e0bffb17 	ldw	r2,-20(fp)
 1812f28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1812f2c:	e0bffa17 	ldw	r2,-24(fp)
 1812f30:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1812f34:	00bfffc4 	movi	r2,-1
 1812f38:	00000b06 	br	1812f68 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1812f3c:	d0a00b17 	ldw	r2,-32724(gp)
 1812f40:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1812f44:	d0e00b17 	ldw	r3,-32724(gp)
 1812f48:	e0bfff17 	ldw	r2,-4(fp)
 1812f4c:	1885883a 	add	r2,r3,r2
 1812f50:	d0a00b15 	stw	r2,-32724(gp)
 1812f54:	e0bffb17 	ldw	r2,-20(fp)
 1812f58:	e0bffc15 	stw	r2,-16(fp)
 1812f5c:	e0bffc17 	ldw	r2,-16(fp)
 1812f60:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1812f64:	e0bffd17 	ldw	r2,-12(fp)
} 
 1812f68:	e037883a 	mov	sp,fp
 1812f6c:	df000017 	ldw	fp,0(sp)
 1812f70:	dec00104 	addi	sp,sp,4
 1812f74:	f800283a 	ret

01812f78 <close>:
 * (for files and device drivers) or the InterNiche soclose() function for
 * sockets.
 */
 
int close (int fd)
{
 1812f78:	defffd04 	addi	sp,sp,-12
 1812f7c:	dfc00215 	stw	ra,8(sp)
 1812f80:	df000115 	stw	fp,4(sp)
 1812f84:	df000104 	addi	fp,sp,4
 1812f88:	e13fff15 	stw	r4,-4(fp)
	if (fd < ALT_MAX_FD)
 1812f8c:	e0bfff17 	ldw	r2,-4(fp)
 1812f90:	10800808 	cmpgei	r2,r2,32
 1812f94:	1000031e 	bne	r2,zero,1812fa4 <close+0x2c>
		return ALT_CLOSE (fd);
 1812f98:	e13fff17 	ldw	r4,-4(fp)
 1812f9c:	18271fc0 	call	18271fc <alt_close>
 1812fa0:	00000206 	br	1812fac <close+0x34>
#if LWIP_SOCKET
	else
		return lwip_close((long) fd);
 1812fa4:	e13fff17 	ldw	r4,-4(fp)
 1812fa8:	18287380 	call	1828738 <lwip_close>
#else
	else
		return -1;
#endif
}
 1812fac:	e037883a 	mov	sp,fp
 1812fb0:	dfc00117 	ldw	ra,4(sp)
 1812fb4:	df000017 	ldw	fp,0(sp)
 1812fb8:	dec00204 	addi	sp,sp,8
 1812fbc:	f800283a 	ret

01812fc0 <read>:
 * (for files and device drivers) or the InterNiche recvfrom() function for
 * sockets.
 */

int read (int fd, void *ptr, size_t len)
{
 1812fc0:	defff904 	addi	sp,sp,-28
 1812fc4:	dfc00615 	stw	ra,24(sp)
 1812fc8:	df000515 	stw	fp,20(sp)
 1812fcc:	df000504 	addi	fp,sp,20
 1812fd0:	e13ffd15 	stw	r4,-12(fp)
 1812fd4:	e17ffe15 	stw	r5,-8(fp)
 1812fd8:	e1bfff15 	stw	r6,-4(fp)
	if (fd < ALT_MAX_FD)
 1812fdc:	e0bffd17 	ldw	r2,-12(fp)
 1812fe0:	10800808 	cmpgei	r2,r2,32
 1812fe4:	1000051e 	bne	r2,zero,1812ffc <read+0x3c>
		return ALT_READ (fd, ptr, len);
 1812fe8:	e1bfff17 	ldw	r6,-4(fp)
 1812fec:	e17ffe17 	ldw	r5,-8(fp)
 1812ff0:	e13ffd17 	ldw	r4,-12(fp)
 1812ff4:	1827b700 	call	1827b70 <alt_read>
 1812ff8:	00000706 	br	1813018 <read+0x58>
#if LWIP_SOCKET
	else
		return recvfrom(fd, ptr, len, 0, NULL, NULL);
 1812ffc:	d8000115 	stw	zero,4(sp)
 1813000:	d8000015 	stw	zero,0(sp)
 1813004:	000f883a 	mov	r7,zero
 1813008:	e1bfff17 	ldw	r6,-4(fp)
 181300c:	e17ffe17 	ldw	r5,-8(fp)
 1813010:	e13ffd17 	ldw	r4,-12(fp)
 1813014:	1828a500 	call	1828a50 <lwip_recvfrom>
#else
	else
		return -1;
#endif
}
 1813018:	e037883a 	mov	sp,fp
 181301c:	dfc00117 	ldw	ra,4(sp)
 1813020:	df000017 	ldw	fp,0(sp)
 1813024:	dec00204 	addi	sp,sp,8
 1813028:	f800283a 	ret

0181302c <write>:
 * This implementation vectors requests to either the HAL alt_write() function 
 * (for files and device drivers) or the InterNiche send() function for sockets.
 */

int write (int fd, const void *ptr, size_t len)
{
 181302c:	defffb04 	addi	sp,sp,-20
 1813030:	dfc00415 	stw	ra,16(sp)
 1813034:	df000315 	stw	fp,12(sp)
 1813038:	df000304 	addi	fp,sp,12
 181303c:	e13ffd15 	stw	r4,-12(fp)
 1813040:	e17ffe15 	stw	r5,-8(fp)
 1813044:	e1bfff15 	stw	r6,-4(fp)
  if (fd < ALT_MAX_FD)
 1813048:	e0bffd17 	ldw	r2,-12(fp)
 181304c:	10800808 	cmpgei	r2,r2,32
 1813050:	1000051e 	bne	r2,zero,1813068 <write+0x3c>
    return ALT_WRITE(fd, ptr, len);
 1813054:	e1bfff17 	ldw	r6,-4(fp)
 1813058:	e17ffe17 	ldw	r5,-8(fp)
 181305c:	e13ffd17 	ldw	r4,-12(fp)
 1813060:	1827eac0 	call	1827eac <alt_write>
 1813064:	00000506 	br	181307c <write+0x50>
#if LWIP_SOCKET
  else
    return send (fd, (void*) ptr, len, 0);
 1813068:	000f883a 	mov	r7,zero
 181306c:	e1bfff17 	ldw	r6,-4(fp)
 1813070:	e17ffe17 	ldw	r5,-8(fp)
 1813074:	e13ffd17 	ldw	r4,-12(fp)
 1813078:	1828fc40 	call	1828fc4 <lwip_send>
#else
	else
		return -1;
#endif
}
 181307c:	e037883a 	mov	sp,fp
 1813080:	dfc00117 	ldw	ra,4(sp)
 1813084:	df000017 	ldw	fp,0(sp)
 1813088:	dec00204 	addi	sp,sp,8
 181308c:	f800283a 	ret

01813090 <low_level_init>:
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void
low_level_init(struct netif *netif)
{
 1813090:	defffc04 	addi	sp,sp,-16
 1813094:	dfc00315 	stw	ra,12(sp)
 1813098:	df000215 	stw	fp,8(sp)
 181309c:	df000204 	addi	fp,sp,8
 18130a0:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif = netif->state;
 18130a4:	e0bfff17 	ldw	r2,-4(fp)
 18130a8:	10800917 	ldw	r2,36(r2)
 18130ac:	e0bffe15 	stw	r2,-8(fp)

	/* set MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;
 18130b0:	e0bfff17 	ldw	r2,-4(fp)
 18130b4:	00c00184 	movi	r3,6
 18130b8:	10c00c85 	stb	r3,50(r2)

	/* maximum transfer unit */
	netif->mtu = IP_FRAG_MAX_MTU;
 18130bc:	e0bfff17 	ldw	r2,-4(fp)
 18130c0:	00c17704 	movi	r3,1500
 18130c4:	10c00c0d 	sth	r3,48(r2)

	/* device capabilities */
	/* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
	netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;
 18130c8:	e0bfff17 	ldw	r2,-4(fp)
 18130cc:	00c00c84 	movi	r3,50
 18130d0:	10c00e45 	stb	r3,57(r2)

	tse_mac_init(netif->num, ethernetif);
 18130d4:	e0bfff17 	ldw	r2,-4(fp)
 18130d8:	10800f03 	ldbu	r2,60(r2)
 18130dc:	10803fcc 	andi	r2,r2,255
 18130e0:	e17ffe17 	ldw	r5,-8(fp)
 18130e4:	1009883a 	mov	r4,r2
 18130e8:	1813ec80 	call	1813ec8 <tse_mac_init>
}
 18130ec:	0001883a 	nop
 18130f0:	e037883a 	mov	sp,fp
 18130f4:	dfc00117 	ldw	ra,4(sp)
 18130f8:	df000017 	ldw	fp,0(sp)
 18130fc:	dec00204 	addi	sp,sp,8
 1813100:	f800283a 	ret

01813104 <low_level_input>:
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf *
low_level_input(struct netif *netif)
{
 1813104:	defffa04 	addi	sp,sp,-24
 1813108:	dfc00515 	stw	ra,20(sp)
 181310c:	df000415 	stw	fp,16(sp)
 1813110:	df000404 	addi	fp,sp,16
 1813114:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif = netif->state;
 1813118:	e0bfff17 	ldw	r2,-4(fp)
 181311c:	10800917 	ldw	r2,36(r2)
 1813120:	e0bffd15 	stw	r2,-12(fp)
	struct pbuf *p, *nextPkt;

	if(ethernetif->lwipRxCount <= 0)
 1813124:	e0bffd17 	ldw	r2,-12(fp)
 1813128:	10801517 	ldw	r2,84(r2)
 181312c:	00800216 	blt	zero,r2,1813138 <low_level_input+0x34>
		return NULL;
 1813130:	0005883a 	mov	r2,zero
 1813134:	00004306 	br	1813244 <low_level_input+0x140>

	//  Dump current packet if there is no memory for the next packet.
	//  The lwipRxPbuf must contain pointers to pbufs at all times.
	nextPkt = pbuf_alloc(PBUF_RAW,  PBUF_POOL_BUFSIZE, PBUF_POOL);
 1813138:	018000c4 	movi	r6,3
 181313c:	01417b04 	movi	r5,1516
 1813140:	010000c4 	movi	r4,3
 1813144:	181a1480 	call	181a148 <pbuf_alloc>
 1813148:	e0bffe15 	stw	r2,-8(fp)
	if(nextPkt == NULL)
 181314c:	e0bffe17 	ldw	r2,-8(fp)
 1813150:	1000101e 	bne	r2,zero,1813194 <low_level_input+0x90>
	{
		LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("no pbuf available\n"));

		LINK_STATS_INC(link.memerr);
 1813154:	008061f4 	movhi	r2,391
 1813158:	10a77104 	addi	r2,r2,-25148
 181315c:	10800617 	ldw	r2,24(r2)
 1813160:	10c00044 	addi	r3,r2,1
 1813164:	008061f4 	movhi	r2,391
 1813168:	10a77104 	addi	r2,r2,-25148
 181316c:	10c00615 	stw	r3,24(r2)
		LINK_STATS_INC(link.drop);
 1813170:	008061f4 	movhi	r2,391
 1813174:	10a77104 	addi	r2,r2,-25148
 1813178:	10800317 	ldw	r2,12(r2)
 181317c:	10c00044 	addi	r3,r2,1
 1813180:	008061f4 	movhi	r2,391
 1813184:	10a77104 	addi	r2,r2,-25148
 1813188:	10c00315 	stw	r3,12(r2)
		return NULL;
 181318c:	0005883a 	mov	r2,zero
 1813190:	00002c06 	br	1813244 <low_level_input+0x140>
	}

	nextPkt = (void*)(((alt_u32)nextPkt));
	nextPkt->payload = (void*)(((alt_u32)nextPkt->payload));
 1813194:	e0bffe17 	ldw	r2,-8(fp)
 1813198:	10c00117 	ldw	r3,4(r2)
 181319c:	e0bffe17 	ldw	r2,-8(fp)
 18131a0:	10c00115 	stw	r3,4(r2)

	enh_alt_irq_disable_all();
 18131a4:	1826c780 	call	1826c78 <enh_alt_irq_disable_all>

	p = ethernetif->lwipRxPbuf[ethernetif->lwipRxIndex];
 18131a8:	e0bffd17 	ldw	r2,-12(fp)
 18131ac:	10801417 	ldw	r2,80(r2)
 18131b0:	e0fffd17 	ldw	r3,-12(fp)
 18131b4:	108001c4 	addi	r2,r2,7
 18131b8:	1085883a 	add	r2,r2,r2
 18131bc:	1085883a 	add	r2,r2,r2
 18131c0:	1885883a 	add	r2,r3,r2
 18131c4:	10800017 	ldw	r2,0(r2)
 18131c8:	e0bffc15 	stw	r2,-16(fp)
	ethernetif->lwipRxPbuf[ethernetif->lwipRxIndex] = nextPkt;
 18131cc:	e0bffd17 	ldw	r2,-12(fp)
 18131d0:	10801417 	ldw	r2,80(r2)
 18131d4:	e0fffd17 	ldw	r3,-12(fp)
 18131d8:	108001c4 	addi	r2,r2,7
 18131dc:	1085883a 	add	r2,r2,r2
 18131e0:	1085883a 	add	r2,r2,r2
 18131e4:	1885883a 	add	r2,r3,r2
 18131e8:	e0fffe17 	ldw	r3,-8(fp)
 18131ec:	10c00015 	stw	r3,0(r2)
	if(++ethernetif->lwipRxIndex >= LWIP_RX_ETH_BUFFER)
 18131f0:	e0bffd17 	ldw	r2,-12(fp)
 18131f4:	10801417 	ldw	r2,80(r2)
 18131f8:	10800044 	addi	r2,r2,1
 18131fc:	e0fffd17 	ldw	r3,-12(fp)
 1813200:	18801415 	stw	r2,80(r3)
 1813204:	10800310 	cmplti	r2,r2,12
 1813208:	1000021e 	bne	r2,zero,1813214 <low_level_input+0x110>
		ethernetif->lwipRxIndex = 0;
 181320c:	e0bffd17 	ldw	r2,-12(fp)
 1813210:	10001415 	stw	zero,80(r2)

	--ethernetif->lwipRxCount;
 1813214:	e0bffd17 	ldw	r2,-12(fp)
 1813218:	10801517 	ldw	r2,84(r2)
 181321c:	10ffffc4 	addi	r3,r2,-1
 1813220:	e0bffd17 	ldw	r2,-12(fp)
 1813224:	10c01515 	stw	r3,84(r2)

	enh_alt_irq_enable_all();
 1813228:	1826cc80 	call	1826cc8 <enh_alt_irq_enable_all>

	LWIP_ASSERT("low_level_input: pbuf in rx buffer is NULL", p != NULL );
	LWIP_ASSERT("low_level_input: pbuf->len in rx buffer is 0", p->len != 0 );

	if( p->len == 0 )
 181322c:	e0bffc17 	ldw	r2,-16(fp)
 1813230:	1080028b 	ldhu	r2,10(r2)
 1813234:	10bfffcc 	andi	r2,r2,65535
 1813238:	1000011e 	bne	r2,zero,1813240 <low_level_input+0x13c>
		p = NULL;
 181323c:	e03ffc15 	stw	zero,-16(fp)

	return p;
 1813240:	e0bffc17 	ldw	r2,-16(fp)
}
 1813244:	e037883a 	mov	sp,fp
 1813248:	dfc00117 	ldw	ra,4(sp)
 181324c:	df000017 	ldw	fp,0(sp)
 1813250:	dec00204 	addi	sp,sp,8
 1813254:	f800283a 	ret

01813258 <ethernetif_input>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
int
ethernetif_input(struct netif *netif)
{
 1813258:	defffa04 	addi	sp,sp,-24
 181325c:	dfc00515 	stw	ra,20(sp)
 1813260:	df000415 	stw	fp,16(sp)
 1813264:	df000404 	addi	fp,sp,16
 1813268:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif;
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	ethernetif = netif->state;
 181326c:	e0bfff17 	ldw	r2,-4(fp)
 1813270:	10800917 	ldw	r2,36(r2)
 1813274:	e0bffc15 	stw	r2,-16(fp)

	/* move received packet into a new pbuf */
	p = low_level_input(netif);
 1813278:	e13fff17 	ldw	r4,-4(fp)
 181327c:	18131040 	call	1813104 <low_level_input>
 1813280:	e0bffd15 	stw	r2,-12(fp)

	/* no packet could be read, silently ignore this */
	if (p == NULL) return -1;
 1813284:	e0bffd17 	ldw	r2,-12(fp)
 1813288:	1000021e 	bne	r2,zero,1813294 <ethernetif_input+0x3c>
 181328c:	00bfffc4 	movi	r2,-1
 1813290:	00002b06 	br	1813340 <ethernetif_input+0xe8>

	/* points to packet payload, which starts with an Ethernet header */
	ethhdr = p->payload;
 1813294:	e0bffd17 	ldw	r2,-12(fp)
 1813298:	10800117 	ldw	r2,4(r2)
 181329c:	e0bffe15 	stw	r2,-8(fp)

	LINK_STATS_INC(link.recv);
 18132a0:	008061f4 	movhi	r2,391
 18132a4:	10a77104 	addi	r2,r2,-25148
 18132a8:	10800117 	ldw	r2,4(r2)
 18132ac:	10c00044 	addi	r3,r2,1
 18132b0:	008061f4 	movhi	r2,391
 18132b4:	10a77104 	addi	r2,r2,-25148
 18132b8:	10c00115 	stw	r3,4(r2)
		pbuf_free(p);
		p = NULL;
		break;
	}
#else
	switch (htons(ethhdr->type)) {
 18132bc:	e0bffe17 	ldw	r2,-8(fp)
 18132c0:	10c00383 	ldbu	r3,14(r2)
 18132c4:	108003c3 	ldbu	r2,15(r2)
 18132c8:	1004923a 	slli	r2,r2,8
 18132cc:	10c4b03a 	or	r2,r2,r3
 18132d0:	10bfffcc 	andi	r2,r2,65535
 18132d4:	1004d23a 	srli	r2,r2,8
 18132d8:	10ffffcc 	andi	r3,r2,65535
 18132dc:	e0bffe17 	ldw	r2,-8(fp)
 18132e0:	11000383 	ldbu	r4,14(r2)
 18132e4:	108003c3 	ldbu	r2,15(r2)
 18132e8:	1004923a 	slli	r2,r2,8
 18132ec:	1104b03a 	or	r2,r2,r4
 18132f0:	10bfffcc 	andi	r2,r2,65535
 18132f4:	1004923a 	slli	r2,r2,8
 18132f8:	10bfffcc 	andi	r2,r2,65535
 18132fc:	1884b03a 	or	r2,r3,r2
 1813300:	10c20020 	cmpeqi	r3,r2,2048
 1813304:	1800021e 	bne	r3,zero,1813310 <ethernetif_input+0xb8>
 1813308:	108201a0 	cmpeqi	r2,r2,2054
 181330c:	10000626 	beq	r2,zero,1813328 <ethernetif_input+0xd0>
#if PPPOE_SUPPORT
	/* PPPoE packet? */
	case ETHTYPE_PPPOEDISC:
	case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
		netif->input(p, netif);
 1813310:	e0bfff17 	ldw	r2,-4(fp)
 1813314:	10800417 	ldw	r2,16(r2)
 1813318:	e17fff17 	ldw	r5,-4(fp)
 181331c:	e13ffd17 	ldw	r4,-12(fp)
 1813320:	103ee83a 	callr	r2
		break;
 1813324:	00000406 	br	1813338 <ethernetif_input+0xe0>

	default:
		pbuf_free( p );
 1813328:	e13ffd17 	ldw	r4,-12(fp)
 181332c:	181a9040 	call	181a904 <pbuf_free>
		p = NULL;
 1813330:	e03ffd15 	stw	zero,-12(fp)
		break;
 1813334:	0001883a 	nop
	}
#endif

	// return the waiting packet count
	return ethernetif->lwipRxCount;
 1813338:	e0bffc17 	ldw	r2,-16(fp)
 181333c:	10801517 	ldw	r2,84(r2)
}
 1813340:	e037883a 	mov	sp,fp
 1813344:	dfc00117 	ldw	ra,4(sp)
 1813348:	df000017 	ldw	fp,0(sp)
 181334c:	dec00204 	addi	sp,sp,8
 1813350:	f800283a 	ret

01813354 <ethernetif_init>:
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t
ethernetif_init(struct netif *netif)
{
 1813354:	defff904 	addi	sp,sp,-28
 1813358:	dfc00615 	stw	ra,24(sp)
 181335c:	df000515 	stw	fp,20(sp)
 1813360:	df000504 	addi	fp,sp,20
 1813364:	e13fff15 	stw	r4,-4(fp)
	err_t tse_mac_raw_send(struct netif *netif, struct pbuf *p);
	char *tmpptr;

	LWIP_ASSERT("netif != NULL", (netif != NULL));

	ethernetif = mem_malloc(sizeof(struct ethernetif));
 1813368:	01001804 	movi	r4,96
 181336c:	18194800 	call	1819480 <mem_malloc>
 1813370:	e0bffc15 	stw	r2,-16(fp)
	if (ethernetif == NULL) {
 1813374:	e0bffc17 	ldw	r2,-16(fp)
 1813378:	1000021e 	bne	r2,zero,1813384 <ethernetif_init+0x30>
		LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("ethernetif_init: out of memory\n"));
		return ERR_MEM;
 181337c:	00bfffc4 	movi	r2,-1
 1813380:	00005b06 	br	18134f0 <ethernetif_init+0x19c>
	}

#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	if (get_hostname(netif->num, (const char**)&tmpptr) == ERR_OK)
 1813384:	e0bfff17 	ldw	r2,-4(fp)
 1813388:	10800f03 	ldbu	r2,60(r2)
 181338c:	10803fcc 	andi	r2,r2,255
 1813390:	e0fffe04 	addi	r3,fp,-8
 1813394:	180b883a 	mov	r5,r3
 1813398:	1009883a 	mov	r4,r2
 181339c:	18009f40 	call	18009f4 <get_hostname>
 18133a0:	1000041e 	bne	r2,zero,18133b4 <ethernetif_init+0x60>
		netif->hostname = tmpptr;
 18133a4:	e0fffe17 	ldw	r3,-8(fp)
 18133a8:	e0bfff17 	ldw	r2,-4(fp)
 18133ac:	10c00b15 	stw	r3,44(r2)
 18133b0:	00000406 	br	18133c4 <ethernetif_init+0x70>
	else
		netif->hostname = "lwip";
 18133b4:	e0ffff17 	ldw	r3,-4(fp)
 18133b8:	00806134 	movhi	r2,388
 18133bc:	10833804 	addi	r2,r2,3296
 18133c0:	18800b15 	stw	r2,44(r3)
	 * of bits per second.
	 */
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

	// pointer abuse, don't worry ;)
	netif->state = ethernetif;
 18133c4:	e0bfff17 	ldw	r2,-4(fp)
 18133c8:	e0fffc17 	ldw	r3,-16(fp)
 18133cc:	10c00915 	stw	r3,36(r2)
	if (get_iface_name(netif->num, (char*)&tmpptr) == ERR_OK) {
 18133d0:	e0bfff17 	ldw	r2,-4(fp)
 18133d4:	10800f03 	ldbu	r2,60(r2)
 18133d8:	10803fcc 	andi	r2,r2,255
 18133dc:	e0fffe04 	addi	r3,fp,-8
 18133e0:	180b883a 	mov	r5,r3
 18133e4:	1009883a 	mov	r4,r2
 18133e8:	1800a2c0 	call	1800a2c <get_iface_name>
 18133ec:	1000081e 	bne	r2,zero,1813410 <ethernetif_init+0xbc>
		netif->name[0] = ((char*)&tmpptr)[0];
 18133f0:	e0bffe04 	addi	r2,fp,-8
 18133f4:	10c00003 	ldbu	r3,0(r2)
 18133f8:	e0bfff17 	ldw	r2,-4(fp)
 18133fc:	10c00e85 	stb	r3,58(r2)
		netif->name[1] = ((char*)&tmpptr)[1];
 1813400:	e0fffe43 	ldbu	r3,-7(fp)
 1813404:	e0bfff17 	ldw	r2,-4(fp)
 1813408:	10c00ec5 	stb	r3,59(r2)
 181340c:	00000606 	br	1813428 <ethernetif_init+0xd4>
	} else {
		netif->name[0] = 'e';
 1813410:	e0bfff17 	ldw	r2,-4(fp)
 1813414:	00c01944 	movi	r3,101
 1813418:	10c00e85 	stb	r3,58(r2)
		netif->name[1] = 't';
 181341c:	e0bfff17 	ldw	r2,-4(fp)
 1813420:	00c01d04 	movi	r3,116
 1813424:	10c00ec5 	stb	r3,59(r2)

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
 1813428:	e0ffff17 	ldw	r3,-4(fp)
 181342c:	008060b4 	movhi	r2,386
 1813430:	108df604 	addi	r2,r2,14296
 1813434:	18800515 	stw	r2,20(r3)
	netif->linkoutput = tse_mac_raw_send;
 1813438:	e0ffff17 	ldw	r3,-4(fp)
 181343c:	00806074 	movhi	r2,385
 1813440:	10921304 	addi	r2,r2,18508
 1813444:	18800615 	stw	r2,24(r3)

	ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);
 1813448:	e0bfff17 	ldw	r2,-4(fp)
 181344c:	10c00cc4 	addi	r3,r2,51
 1813450:	e0bffc17 	ldw	r2,-16(fp)
 1813454:	10c00015 	stw	r3,0(r2)

	/* initialize the rx buffer for access by the TSE ISR */
	for(idx = 0; idx < LWIP_RX_ETH_BUFFER; ++idx)
 1813458:	e03ffb15 	stw	zero,-20(fp)
 181345c:	00001806 	br	18134c0 <ethernetif_init+0x16c>
	{
		p = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_POOL);
 1813460:	018000c4 	movi	r6,3
 1813464:	01417b04 	movi	r5,1516
 1813468:	010000c4 	movi	r4,3
 181346c:	181a1480 	call	181a148 <pbuf_alloc>
 1813470:	e0bffd15 	stw	r2,-12(fp)
		if (p == NULL)
 1813474:	e0bffd17 	ldw	r2,-12(fp)
 1813478:	1000021e 	bne	r2,zero,1813484 <ethernetif_init+0x130>
			return ERR_MEM;
 181347c:	00bfffc4 	movi	r2,-1
 1813480:	00001b06 	br	18134f0 <ethernetif_init+0x19c>
		p = (void*)(((alt_u32) p));
		p->payload = (void*)(((alt_u32) p->payload));
 1813484:	e0bffd17 	ldw	r2,-12(fp)
 1813488:	10c00117 	ldw	r3,4(r2)
 181348c:	e0bffd17 	ldw	r2,-12(fp)
 1813490:	10c00115 	stw	r3,4(r2)
		ethernetif->lwipRxPbuf[idx] = p;
 1813494:	e0fffc17 	ldw	r3,-16(fp)
 1813498:	e0bffb17 	ldw	r2,-20(fp)
 181349c:	108001c4 	addi	r2,r2,7
 18134a0:	1085883a 	add	r2,r2,r2
 18134a4:	1085883a 	add	r2,r2,r2
 18134a8:	1885883a 	add	r2,r3,r2
 18134ac:	e0fffd17 	ldw	r3,-12(fp)
 18134b0:	10c00015 	stw	r3,0(r2)
	netif->linkoutput = tse_mac_raw_send;

	ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);

	/* initialize the rx buffer for access by the TSE ISR */
	for(idx = 0; idx < LWIP_RX_ETH_BUFFER; ++idx)
 18134b4:	e0bffb17 	ldw	r2,-20(fp)
 18134b8:	10800044 	addi	r2,r2,1
 18134bc:	e0bffb15 	stw	r2,-20(fp)
 18134c0:	e0bffb17 	ldw	r2,-20(fp)
 18134c4:	10800310 	cmplti	r2,r2,12
 18134c8:	103fe51e 	bne	r2,zero,1813460 <__alt_mem_mem_0+0xff7f3460>
			return ERR_MEM;
		p = (void*)(((alt_u32) p));
		p->payload = (void*)(((alt_u32) p->payload));
		ethernetif->lwipRxPbuf[idx] = p;
	}
	ethernetif->lwipRxCount = 0;
 18134cc:	e0bffc17 	ldw	r2,-16(fp)
 18134d0:	10001515 	stw	zero,84(r2)
	ethernetif->lwipRxIndex = 0;
 18134d4:	e0bffc17 	ldw	r2,-16(fp)
 18134d8:	10001415 	stw	zero,80(r2)
	ethernetif->lwipRxIndexIsr = 0;
 18134dc:	e0bffc17 	ldw	r2,-16(fp)
 18134e0:	10001315 	stw	zero,76(r2)

	/* initialize the low level hardware */
	low_level_init(netif);
 18134e4:	e13fff17 	ldw	r4,-4(fp)
 18134e8:	18130900 	call	1813090 <low_level_init>

	return ERR_OK;
 18134ec:	0005883a 	mov	r2,zero
}
 18134f0:	e037883a 	mov	sp,fp
 18134f4:	dfc00117 	ldw	ra,4(sp)
 18134f8:	df000017 	ldw	fp,0(sp)
 18134fc:	dec00204 	addi	sp,sp,8
 1813500:	f800283a 	ret

01813504 <lwip_initialize>:
}
#endif

// Function which initializes the LwIP TCP/IP stack
void lwip_initialize(int waitForAll)
{
 1813504:	defffa04 	addi	sp,sp,-24
 1813508:	dfc00515 	stw	ra,20(sp)
 181350c:	df000415 	stw	fp,16(sp)
 1813510:	df000404 	addi	fp,sp,16
 1813514:	e13fff15 	stw	r4,-4(fp)
	int idx;
	int upCount = 0;
 1813518:	e03ffd15 	stw	zero,-12(fp)
	int activeCount = 0;
 181351c:	e03ffe15 	stw	zero,-8(fp)
		return;
	}
#endif

	// Initialize the TCP/IP stack and give our configuration function as callback
	tcpip_init(lwip_handle_interfaces, NULL);
 1813520:	000b883a 	mov	r5,zero
 1813524:	01006074 	movhi	r4,385
 1813528:	210da904 	addi	r4,r4,13988
 181352c:	182b7400 	call	182b740 <tcpip_init>

	for (idx = 0; idx < PHY_COUNT; ++idx)
 1813530:	e03ffc15 	stw	zero,-16(fp)
 1813534:	00000906 	br	181355c <lwip_initialize+0x58>
		if (is_interface_active(idx))
 1813538:	e13ffc17 	ldw	r4,-16(fp)
 181353c:	1800a740 	call	1800a74 <is_interface_active>
 1813540:	10000326 	beq	r2,zero,1813550 <lwip_initialize+0x4c>
			++activeCount;
 1813544:	e0bffe17 	ldw	r2,-8(fp)
 1813548:	10800044 	addi	r2,r2,1
 181354c:	e0bffe15 	stw	r2,-8(fp)
#endif

	// Initialize the TCP/IP stack and give our configuration function as callback
	tcpip_init(lwip_handle_interfaces, NULL);

	for (idx = 0; idx < PHY_COUNT; ++idx)
 1813550:	e0bffc17 	ldw	r2,-16(fp)
 1813554:	10800044 	addi	r2,r2,1
 1813558:	e0bffc15 	stw	r2,-16(fp)
 181355c:	e0bffc17 	ldw	r2,-16(fp)
 1813560:	00bff50e 	bge	zero,r2,1813538 <__alt_mem_mem_0+0xff7f3538>
		if (is_interface_active(idx))
			++activeCount;

	// Wait for the network to get up
	while ((waitForAll && activeCount != upCount) || (!waitForAll && !upCount))
 1813564:	00001d06 	br	18135dc <lwip_initialize+0xd8>
	{
		for (idx = 0; idx < PHY_COUNT; ++idx)
 1813568:	e03ffc15 	stw	zero,-16(fp)
 181356c:	00001706 	br	18135cc <lwip_initialize+0xc8>
		{
			if (is_interface_active(idx) && netif_is_up(&eth_tse[idx]))
 1813570:	e13ffc17 	ldw	r4,-16(fp)
 1813574:	1800a740 	call	1800a74 <is_interface_active>
 1813578:	10001126 	beq	r2,zero,18135c0 <lwip_initialize+0xbc>
 181357c:	008061b4 	movhi	r2,390
 1813580:	10874504 	addi	r2,r2,7444
 1813584:	e0fffc17 	ldw	r3,-16(fp)
 1813588:	18c01124 	muli	r3,r3,68
 181358c:	10c5883a 	add	r2,r2,r3
 1813590:	10800e44 	addi	r2,r2,57
 1813594:	10800003 	ldbu	r2,0(r2)
 1813598:	10803fcc 	andi	r2,r2,255
 181359c:	1080004c 	andi	r2,r2,1
 18135a0:	10000726 	beq	r2,zero,18135c0 <lwip_initialize+0xbc>
			{
				printf("[lwip_eth%d] up\r\n", idx);
 18135a4:	e17ffc17 	ldw	r5,-16(fp)
 18135a8:	01006134 	movhi	r4,388
 18135ac:	21033a04 	addi	r4,r4,3304
 18135b0:	1800bd80 	call	1800bd8 <printf>
				++upCount;
 18135b4:	e0bffd17 	ldw	r2,-12(fp)
 18135b8:	10800044 	addi	r2,r2,1
 18135bc:	e0bffd15 	stw	r2,-12(fp)
			++activeCount;

	// Wait for the network to get up
	while ((waitForAll && activeCount != upCount) || (!waitForAll && !upCount))
	{
		for (idx = 0; idx < PHY_COUNT; ++idx)
 18135c0:	e0bffc17 	ldw	r2,-16(fp)
 18135c4:	10800044 	addi	r2,r2,1
 18135c8:	e0bffc15 	stw	r2,-16(fp)
 18135cc:	e0bffc17 	ldw	r2,-16(fp)
 18135d0:	00bfe70e 	bge	zero,r2,1813570 <__alt_mem_mem_0+0xff7f3570>
				printf("[lwip_eth%d] up\r\n", idx);
				++upCount;
			}
		}

		mssleep(10);
 18135d4:	0109c404 	movi	r4,10000
 18135d8:	1827e400 	call	1827e40 <usleep>
	for (idx = 0; idx < PHY_COUNT; ++idx)
		if (is_interface_active(idx))
			++activeCount;

	// Wait for the network to get up
	while ((waitForAll && activeCount != upCount) || (!waitForAll && !upCount))
 18135dc:	e0bfff17 	ldw	r2,-4(fp)
 18135e0:	10000326 	beq	r2,zero,18135f0 <lwip_initialize+0xec>
 18135e4:	e0fffe17 	ldw	r3,-8(fp)
 18135e8:	e0bffd17 	ldw	r2,-12(fp)
 18135ec:	18bfde1e 	bne	r3,r2,1813568 <__alt_mem_mem_0+0xff7f3568>
 18135f0:	e0bfff17 	ldw	r2,-4(fp)
 18135f4:	1000021e 	bne	r2,zero,1813600 <lwip_initialize+0xfc>
 18135f8:	e0bffd17 	ldw	r2,-12(fp)
 18135fc:	103fda26 	beq	r2,zero,1813568 <__alt_mem_mem_0+0xff7f3568>
			}
		}

		mssleep(10);
	}
}
 1813600:	0001883a 	nop
 1813604:	e037883a 	mov	sp,fp
 1813608:	dfc00117 	ldw	ra,4(sp)
 181360c:	df000017 	ldw	fp,0(sp)
 1813610:	dec00204 	addi	sp,sp,8
 1813614:	f800283a 	ret

01813618 <lwip_wait_for_an>:
#endif

#define MAX_RETRY_COUNT			3

int lwip_wait_for_an(int idx, struct ethernetif *ethernetif)
{
 1813618:	defffb04 	addi	sp,sp,-20
 181361c:	dfc00415 	stw	ra,16(sp)
 1813620:	df000315 	stw	fp,12(sp)
 1813624:	df000304 	addi	fp,sp,12
 1813628:	e13ffe15 	stw	r4,-8(fp)
 181362c:	e17fff15 	stw	r5,-4(fp)
	int retryCount = MAX_RETRY_COUNT;
 1813630:	008000c4 	movi	r2,3
 1813634:	e0bffd15 	stw	r2,-12(fp)

	while (ethernetif->link_alive != 1 && --retryCount) {
 1813638:	00000b06 	br	1813668 <lwip_wait_for_an+0x50>
		mssleep(100 * (MAX_RETRY_COUNT - retryCount));
 181363c:	00c000c4 	movi	r3,3
 1813640:	e0bffd17 	ldw	r2,-12(fp)
 1813644:	1887c83a 	sub	r3,r3,r2
 1813648:	008000b4 	movhi	r2,2
 181364c:	10a1a804 	addi	r2,r2,-31072
 1813650:	1885383a 	mul	r2,r3,r2
 1813654:	1009883a 	mov	r4,r2
 1813658:	1827e400 	call	1827e40 <usleep>
		tse_mac_init(idx, ethernetif);
 181365c:	e17fff17 	ldw	r5,-4(fp)
 1813660:	e13ffe17 	ldw	r4,-8(fp)
 1813664:	1813ec80 	call	1813ec8 <tse_mac_init>

int lwip_wait_for_an(int idx, struct ethernetif *ethernetif)
{
	int retryCount = MAX_RETRY_COUNT;

	while (ethernetif->link_alive != 1 && --retryCount) {
 1813668:	e0bfff17 	ldw	r2,-4(fp)
 181366c:	10800217 	ldw	r2,8(r2)
 1813670:	10800060 	cmpeqi	r2,r2,1
 1813674:	1000051e 	bne	r2,zero,181368c <lwip_wait_for_an+0x74>
 1813678:	e0bffd17 	ldw	r2,-12(fp)
 181367c:	10bfffc4 	addi	r2,r2,-1
 1813680:	e0bffd15 	stw	r2,-12(fp)
 1813684:	e0bffd17 	ldw	r2,-12(fp)
 1813688:	103fec1e 	bne	r2,zero,181363c <__alt_mem_mem_0+0xff7f363c>
		mssleep(100 * (MAX_RETRY_COUNT - retryCount));
		tse_mac_init(idx, ethernetif);
	}

	return retryCount;
 181368c:	e0bffd17 	ldw	r2,-12(fp)
}
 1813690:	e037883a 	mov	sp,fp
 1813694:	dfc00117 	ldw	ra,4(sp)
 1813698:	df000017 	ldw	fp,0(sp)
 181369c:	dec00204 	addi	sp,sp,8
 18136a0:	f800283a 	ret

018136a4 <lwip_handle_interfaces>:

void lwip_handle_interfaces(__unused void *params)
{
 18136a4:	deffe904 	addi	sp,sp,-92
 18136a8:	dfc01615 	stw	ra,88(sp)
 18136ac:	df001515 	stw	fp,84(sp)
 18136b0:	df001504 	addi	fp,sp,84
 18136b4:	e13fff15 	stw	r4,-4(fp)
	int idx;
	int active_macs = 0;
 18136b8:	e03fef15 	stw	zero,-68(fp)
	char tmpbuf[OS_MAX_TASK_NAME_LEN];

	ip_addr_t ip = {0}, subnet = {0}, gateway = {0};
 18136bc:	e03ffb15 	stw	zero,-20(fp)
 18136c0:	e03ffc15 	stw	zero,-16(fp)
 18136c4:	e03ffd15 	stw	zero,-12(fp)
	int dhcp;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 18136c8:	e03fee15 	stw	zero,-72(fp)
 18136cc:	00008406 	br	18138e0 <lwip_handle_interfaces+0x23c>
	{
		struct netif *eth = &eth_tse[idx];
 18136d0:	e0bfee17 	ldw	r2,-72(fp)
 18136d4:	10c01124 	muli	r3,r2,68
 18136d8:	008061b4 	movhi	r2,390
 18136dc:	10874504 	addi	r2,r2,7444
 18136e0:	1885883a 	add	r2,r3,r2
 18136e4:	e0bff015 	stw	r2,-64(fp)

		// Load platform specific MAC address into netif
		if (get_mac_addr(idx, eth, eth->hwaddr) != EXIT_SUCCESS)
 18136e8:	e0bff017 	ldw	r2,-64(fp)
 18136ec:	10800cc4 	addi	r2,r2,51
 18136f0:	100d883a 	mov	r6,r2
 18136f4:	e17ff017 	ldw	r5,-64(fp)
 18136f8:	e13fee17 	ldw	r4,-72(fp)
 18136fc:	18008200 	call	1800820 <get_mac_addr>
 1813700:	10000326 	beq	r2,zero,1813710 <lwip_handle_interfaces+0x6c>
			printf("[LwIP] Failed to get MAC address\n");
 1813704:	01006134 	movhi	r4,388
 1813708:	21033f04 	addi	r4,r4,3324
 181370c:	183c9880 	call	183c988 <puts>

		// Get the requested IP configuration for the given interface
		if (get_ip_addr(idx, &ip, &subnet, &gateway, &dhcp) != EXIT_SUCCESS)
 1813710:	e17ffd04 	addi	r5,fp,-12
 1813714:	e13ffc04 	addi	r4,fp,-16
 1813718:	e0fffb04 	addi	r3,fp,-20
 181371c:	e0bffe04 	addi	r2,fp,-8
 1813720:	d8800015 	stw	r2,0(sp)
 1813724:	280f883a 	mov	r7,r5
 1813728:	200d883a 	mov	r6,r4
 181372c:	180b883a 	mov	r5,r3
 1813730:	e13fee17 	ldw	r4,-72(fp)
 1813734:	180093c0 	call	180093c <get_ip_addr>
 1813738:	10000326 	beq	r2,zero,1813748 <lwip_handle_interfaces+0xa4>
			printf("[LwIP] Failed to get IP config\n");
 181373c:	01006134 	movhi	r4,388
 1813740:	21034804 	addi	r4,r4,3360
 1813744:	183c9880 	call	183c988 <puts>

		//  Initialize lwIP, Altera TSE and the ethernetif
#if NO_SYS
		if (netif_add(eth, &ip, &subnet, &gateway, eth->state, ethernetif_init, ethernet_input) == NULL)
#else
			if (netif_add(eth, &ip, &subnet, &gateway, eth->state, ethernetif_init, tcpip_input) == NULL)
 1813748:	e0bff017 	ldw	r2,-64(fp)
 181374c:	10c00917 	ldw	r3,36(r2)
 1813750:	e1bffd04 	addi	r6,fp,-12
 1813754:	e17ffc04 	addi	r5,fp,-16
 1813758:	e13ffb04 	addi	r4,fp,-20
 181375c:	008060f4 	movhi	r2,387
 1813760:	10accf04 	addi	r2,r2,-19652
 1813764:	d8800215 	stw	r2,8(sp)
 1813768:	00806074 	movhi	r2,385
 181376c:	108cd504 	addi	r2,r2,13140
 1813770:	d8800115 	stw	r2,4(sp)
 1813774:	d8c00015 	stw	r3,0(sp)
 1813778:	300f883a 	mov	r7,r6
 181377c:	280d883a 	mov	r6,r5
 1813780:	200b883a 	mov	r5,r4
 1813784:	e13ff017 	ldw	r4,-64(fp)
 1813788:	18198480 	call	1819848 <netif_add>
 181378c:	1000051e 	bne	r2,zero,18137a4 <lwip_handle_interfaces+0x100>
#endif
			{
				printf("[eth%d] Fatal error initializing...\n", idx);
 1813790:	e17fee17 	ldw	r5,-72(fp)
 1813794:	01006134 	movhi	r4,388
 1813798:	21035004 	addi	r4,r4,3392
 181379c:	1800bd80 	call	1800bd8 <printf>
				for(;;) ;
 18137a0:	003fff06 	br	18137a0 <__alt_mem_mem_0+0xff7f37a0>
			}

		// check whether this interface should be used
		if (!is_interface_active(idx))
 18137a4:	e13fee17 	ldw	r4,-72(fp)
 18137a8:	1800a740 	call	1800a74 <is_interface_active>
 18137ac:	10004826 	beq	r2,zero,18138d0 <lwip_handle_interfaces+0x22c>
			continue;

		// update the active phy count
		++active_macs;
 18137b0:	e0bfef17 	ldw	r2,-68(fp)
 18137b4:	10800044 	addi	r2,r2,1
 18137b8:	e0bfef15 	stw	r2,-68(fp)

		if (active_macs == 1)
 18137bc:	e0bfef17 	ldw	r2,-68(fp)
 18137c0:	10800058 	cmpnei	r2,r2,1
 18137c4:	1000021e 	bne	r2,zero,18137d0 <lwip_handle_interfaces+0x12c>
			netif_set_default(eth);
 18137c8:	e13ff017 	ldw	r4,-64(fp)
 18137cc:	1819d040 	call	1819d04 <netif_set_default>

		// Set status and link callback (link is not working?)
		netif_set_status_callback(eth, lwip_status_callback);
 18137d0:	01406074 	movhi	r5,385
 18137d4:	294f2604 	addi	r5,r5,15512
 18137d8:	e13ff017 	ldw	r4,-64(fp)
 18137dc:	1819e740 	call	1819e74 <netif_set_status_callback>

		if (link_callback)
 18137e0:	d0a7e917 	ldw	r2,-24668(gp)
 18137e4:	10000426 	beq	r2,zero,18137f8 <lwip_handle_interfaces+0x154>
			netif_set_link_callback(eth, link_callback);
 18137e8:	d0a7e917 	ldw	r2,-24668(gp)
 18137ec:	100b883a 	mov	r5,r2
 18137f0:	e13ff017 	ldw	r4,-64(fp)
 18137f4:	1819fec0 	call	1819fec <netif_set_link_callback>

		// Initialize Altera TSE in a loop if waiting for a link
		printf("Waiting for link... ");
 18137f8:	01006134 	movhi	r4,388
 18137fc:	21035a04 	addi	r4,r4,3432
 1813800:	1800bd80 	call	1800bd8 <printf>
		if (lwip_wait_for_an(idx, eth->state) < 0) {
 1813804:	e0bff017 	ldw	r2,-64(fp)
 1813808:	10800917 	ldw	r2,36(r2)
 181380c:	100b883a 	mov	r5,r2
 1813810:	e13fee17 	ldw	r4,-72(fp)
 1813814:	18136180 	call	1813618 <lwip_wait_for_an>
 1813818:	1000040e 	bge	r2,zero,181382c <lwip_handle_interfaces+0x188>
			printf("FAILED\n");
 181381c:	01006134 	movhi	r4,388
 1813820:	21036004 	addi	r4,r4,3456
 1813824:	183c9880 	call	183c988 <puts>
			continue;
 1813828:	00002a06 	br	18138d4 <lwip_handle_interfaces+0x230>
		}

		printf("OK\n");
 181382c:	01006134 	movhi	r4,388
 1813830:	21036204 	addi	r4,r4,3464
 1813834:	183c9880 	call	183c988 <puts>

		// create input output task and start DHCP or static w/e
		snprintf(tmpbuf, OS_MAX_TASK_NAME_LEN, "LwIP %*sih", 2, eth->name);
 1813838:	e0bff017 	ldw	r2,-64(fp)
 181383c:	10800e84 	addi	r2,r2,58
 1813840:	e0fff104 	addi	r3,fp,-60
 1813844:	d8800015 	stw	r2,0(sp)
 1813848:	01c00084 	movi	r7,2
 181384c:	01806134 	movhi	r6,388
 1813850:	31836304 	addi	r6,r6,3468
 1813854:	01400a04 	movi	r5,40
 1813858:	1809883a 	mov	r4,r3
 181385c:	183ca740 	call	183ca74 <snprintf>
		tmpbuf[(OS_MAX_TASK_NAME_LEN - 1)] = 0;
 1813860:	e03ffac5 	stb	zero,-21(fp)

		// create input task, this must be started before we can do any DHCP request
		if (sys_thread_new(tmpbuf, lwip_handle_ethernet_input, eth, KB(32), TCPIP_THREAD_PRIO) == NULL)
 1813864:	e0fff104 	addi	r3,fp,-60
 1813868:	008000c4 	movi	r2,3
 181386c:	d8800015 	stw	r2,0(sp)
 1813870:	01e00014 	movui	r7,32768
 1813874:	e1bff017 	ldw	r6,-64(fp)
 1813878:	01406074 	movhi	r5,385
 181387c:	294ec404 	addi	r5,r5,15120
 1813880:	1809883a 	mov	r4,r3
 1813884:	18153540 	call	1815354 <sys_thread_new>
 1813888:	1000031e 	bne	r2,zero,1813898 <lwip_handle_interfaces+0x1f4>
			printf("LwIP Couldn't create input / output task for ethernet\n");
 181388c:	01006134 	movhi	r4,388
 1813890:	21036604 	addi	r4,r4,3480
 1813894:	183c9880 	call	183c988 <puts>

		// wait previous DHCP to finish
		if (dhcp) {
 1813898:	e0bffe17 	ldw	r2,-8(fp)
 181389c:	10000926 	beq	r2,zero,18138c4 <lwip_handle_interfaces+0x220>
			printf("[LwIP] Start DHCP request...\n");
 18138a0:	01006134 	movhi	r4,388
 18138a4:	21037404 	addi	r4,r4,3536
 18138a8:	183c9880 	call	183c988 <puts>

			dhcp_start(eth);
 18138ac:	e13ff017 	ldw	r4,-64(fp)
 18138b0:	1815f0c0 	call	1815f0c <dhcp_start>

			// wait till we got our address
			printf("[LwIP] Waiting for DHCP IP address...\n");
 18138b4:	01006134 	movhi	r4,388
 18138b8:	21037c04 	addi	r4,r4,3568
 18138bc:	183c9880 	call	183c988 <puts>
 18138c0:	00000406 	br	18138d4 <lwip_handle_interfaces+0x230>
		} else {
			// the static IP has already been set, just bring up the interface
			netif_set_up(eth);
 18138c4:	e13ff017 	ldw	r4,-64(fp)
 18138c8:	1819d300 	call	1819d30 <netif_set_up>
 18138cc:	00000106 	br	18138d4 <lwip_handle_interfaces+0x230>
				for(;;) ;
			}

		// check whether this interface should be used
		if (!is_interface_active(idx))
			continue;
 18138d0:	0001883a 	nop
	char tmpbuf[OS_MAX_TASK_NAME_LEN];

	ip_addr_t ip = {0}, subnet = {0}, gateway = {0};
	int dhcp;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 18138d4:	e0bfee17 	ldw	r2,-72(fp)
 18138d8:	10800044 	addi	r2,r2,1
 18138dc:	e0bfee15 	stw	r2,-72(fp)
 18138e0:	e0bfee17 	ldw	r2,-72(fp)
 18138e4:	00bf7a0e 	bge	zero,r2,18136d0 <__alt_mem_mem_0+0xff7f36d0>
		} else {
			// the static IP has already been set, just bring up the interface
			netif_set_up(eth);
		}
	}
}
 18138e8:	0001883a 	nop
 18138ec:	e037883a 	mov	sp,fp
 18138f0:	dfc00117 	ldw	ra,4(sp)
 18138f4:	df000017 	ldw	fp,0(sp)
 18138f8:	dec00204 	addi	sp,sp,8
 18138fc:	f800283a 	ret

01813900 <get_mac_count>:
 * \brief Get the number of MAC's available in the NIOS build
 *
 * \returns the number of MAC's in the NIOS build
 */
int get_mac_count(void)
{
 1813900:	deffff04 	addi	sp,sp,-4
 1813904:	df000015 	stw	fp,0(sp)
 1813908:	d839883a 	mov	fp,sp
	return PHY_COUNT;
 181390c:	00800044 	movi	r2,1
}
 1813910:	e037883a 	mov	sp,fp
 1813914:	df000017 	ldw	fp,0(sp)
 1813918:	dec00104 	addi	sp,sp,4
 181391c:	f800283a 	ret

01813920 <get_mac_base>:
 * \param [in] idx the index of the MAC
 *
 * \returns the base address of the MAC
 */
volatile np_tse_mac* get_mac_base(int idx)
{
 1813920:	defffe04 	addi	sp,sp,-8
 1813924:	df000115 	stw	fp,4(sp)
 1813928:	df000104 	addi	fp,sp,4
 181392c:	e13fff15 	stw	r4,-4(fp)
	if (idx > PHY_COUNT)
 1813930:	e0bfff17 	ldw	r2,-4(fp)
 1813934:	10800090 	cmplti	r2,r2,2
 1813938:	1000021e 	bne	r2,zero,1813944 <get_mac_base+0x24>
		return NULL;
 181393c:	0005883a 	mov	r2,zero
 1813940:	00000606 	br	181395c <get_mac_base+0x3c>

	return (volatile np_tse_mac*)tse_mac_device[idx].tse_mac_base;
 1813944:	00806134 	movhi	r2,388
 1813948:	10946304 	addi	r2,r2,20876
 181394c:	e0ffff17 	ldw	r3,-4(fp)
 1813950:	18c01224 	muli	r3,r3,72
 1813954:	10c5883a 	add	r2,r2,r3
 1813958:	10800017 	ldw	r2,0(r2)
}
 181395c:	e037883a 	mov	sp,fp
 1813960:	df000017 	ldw	fp,0(sp)
 1813964:	dec00104 	addi	sp,sp,4
 1813968:	f800283a 	ret

0181396c <get_netif>:
 * \brief Get the netif struct used by LwIP
 *
 * \return the reference to the netif used by LwIP
 */
struct netif* get_netif(int idx)
{
 181396c:	defffe04 	addi	sp,sp,-8
 1813970:	df000115 	stw	fp,4(sp)
 1813974:	df000104 	addi	fp,sp,4
 1813978:	e13fff15 	stw	r4,-4(fp)
	if (idx > PHY_COUNT)
 181397c:	e0bfff17 	ldw	r2,-4(fp)
 1813980:	10800090 	cmplti	r2,r2,2
 1813984:	1000021e 	bne	r2,zero,1813990 <get_netif+0x24>
		return NULL;
 1813988:	0005883a 	mov	r2,zero
 181398c:	00000506 	br	18139a4 <get_netif+0x38>

	return eth_tse + idx;
 1813990:	e0bfff17 	ldw	r2,-4(fp)
 1813994:	10c01124 	muli	r3,r2,68
 1813998:	008061b4 	movhi	r2,390
 181399c:	10874504 	addi	r2,r2,7444
 18139a0:	1885883a 	add	r2,r3,r2
}
 18139a4:	e037883a 	mov	sp,fp
 18139a8:	df000017 	ldw	fp,0(sp)
 18139ac:	dec00104 	addi	sp,sp,4
 18139b0:	f800283a 	ret

018139b4 <lwip_set_status_callback>:

netif_status_callback_fn lwip_set_status_callback(netif_status_callback_fn callback)
{
 18139b4:	defffd04 	addi	sp,sp,-12
 18139b8:	df000215 	stw	fp,8(sp)
 18139bc:	df000204 	addi	fp,sp,8
 18139c0:	e13fff15 	stw	r4,-4(fp)
	netif_status_callback_fn old = status_callback;
 18139c4:	d0a7e817 	ldw	r2,-24672(gp)
 18139c8:	e0bffe15 	stw	r2,-8(fp)

	status_callback = callback;
 18139cc:	e0bfff17 	ldw	r2,-4(fp)
 18139d0:	d0a7e815 	stw	r2,-24672(gp)

	return old;
 18139d4:	e0bffe17 	ldw	r2,-8(fp)
}
 18139d8:	e037883a 	mov	sp,fp
 18139dc:	df000017 	ldw	fp,0(sp)
 18139e0:	dec00104 	addi	sp,sp,4
 18139e4:	f800283a 	ret

018139e8 <lwip_set_link_callback>:

netif_status_callback_fn lwip_set_link_callback(netif_status_callback_fn callback)
{
 18139e8:	defffd04 	addi	sp,sp,-12
 18139ec:	df000215 	stw	fp,8(sp)
 18139f0:	df000204 	addi	fp,sp,8
 18139f4:	e13fff15 	stw	r4,-4(fp)
	netif_status_callback_fn old = link_callback;
 18139f8:	d0a7e917 	ldw	r2,-24668(gp)
 18139fc:	e0bffe15 	stw	r2,-8(fp)

	link_callback = callback;
 1813a00:	e0bfff17 	ldw	r2,-4(fp)
 1813a04:	d0a7e915 	stw	r2,-24668(gp)

	return old;
 1813a08:	e0bffe17 	ldw	r2,-8(fp)
}
 1813a0c:	e037883a 	mov	sp,fp
 1813a10:	df000017 	ldw	fp,0(sp)
 1813a14:	dec00104 	addi	sp,sp,4
 1813a18:	f800283a 	ret

01813a1c <lwip_is_interface_up>:

#define REG_STATS_LS					(1 << 2)	// Link Status

int __attribute__((weak)) lwip_is_interface_up(__unused np_tse_mac* pmac)
{
 1813a1c:	defffd04 	addi	sp,sp,-12
 1813a20:	df000215 	stw	fp,8(sp)
 1813a24:	df000204 	addi	fp,sp,8
 1813a28:	e13fff15 	stw	r4,-4(fp)
	alt_u16 reg = IORD(&pmac->mdio1.STATUS, 0);
 1813a2c:	e0bfff17 	ldw	r2,-4(fp)
 1813a30:	1080a104 	addi	r2,r2,644
 1813a34:	10800037 	ldwio	r2,0(r2)
 1813a38:	e0bffe0d 	sth	r2,-8(fp)

	return ((reg & (REG_STATS_LS)) == REG_STATS_LS) ? ETH_INTERFACE_UP : ETH_INTERFACE_DOWN;
 1813a3c:	e0bffe0b 	ldhu	r2,-8(fp)
 1813a40:	1080010c 	andi	r2,r2,4
 1813a44:	1004c03a 	cmpne	r2,r2,zero
 1813a48:	10803fcc 	andi	r2,r2,255
}
 1813a4c:	e037883a 	mov	sp,fp
 1813a50:	df000017 	ldw	fp,0(sp)
 1813a54:	dec00104 	addi	sp,sp,4
 1813a58:	f800283a 	ret

01813a5c <lwip_check_link_status>:

static void lwip_check_link_status(struct netif *netif, np_tse_mac* base)
{
 1813a5c:	defffa04 	addi	sp,sp,-24
 1813a60:	dfc00515 	stw	ra,20(sp)
 1813a64:	df000415 	stw	fp,16(sp)
 1813a68:	df000404 	addi	fp,sp,16
 1813a6c:	e13ffe15 	stw	r4,-8(fp)
 1813a70:	e17fff15 	stw	r5,-4(fp)
	struct ethernetif *ethif = (struct ethernetif*)netif->state;
 1813a74:	e0bffe17 	ldw	r2,-8(fp)
 1813a78:	10800917 	ldw	r2,36(r2)
 1813a7c:	e0bffc15 	stw	r2,-16(fp)

	// check if the interface is up
	int cur_status = lwip_is_interface_up(base);
 1813a80:	e13fff17 	ldw	r4,-4(fp)
 1813a84:	1813a1c0 	call	1813a1c <lwip_is_interface_up>
 1813a88:	e0bffd15 	stw	r2,-12(fp)

	// is there a state change in the ethernet connectivity
	if (cur_status != ethif->current_state)
 1813a8c:	e0bffc17 	ldw	r2,-16(fp)
 1813a90:	10c01617 	ldw	r3,88(r2)
 1813a94:	e0bffd17 	ldw	r2,-12(fp)
 1813a98:	18801726 	beq	r3,r2,1813af8 <lwip_check_link_status+0x9c>
	{
		// check if the Auto-Negotiate is successful
		if (cur_status == ETH_INTERFACE_UP)
 1813a9c:	e0bffd17 	ldw	r2,-12(fp)
 1813aa0:	10800058 	cmpnei	r2,r2,1
 1813aa4:	10000d1e 	bne	r2,zero,1813adc <lwip_check_link_status+0x80>
		{
			// wait for auto-negotiate...
			if (lwip_wait_for_an(netif->num, ethif) > 0)
 1813aa8:	e0bffe17 	ldw	r2,-8(fp)
 1813aac:	10800f03 	ldbu	r2,60(r2)
 1813ab0:	10803fcc 	andi	r2,r2,255
 1813ab4:	e17ffc17 	ldw	r5,-16(fp)
 1813ab8:	1009883a 	mov	r4,r2
 1813abc:	18136180 	call	1813618 <lwip_wait_for_an>
 1813ac0:	00800d0e 	bge	zero,r2,1813af8 <lwip_check_link_status+0x9c>
			{
				netif_set_link_up(netif);
 1813ac4:	e13ffe17 	ldw	r4,-8(fp)
 1813ac8:	1819eb00 	call	1819eb0 <netif_set_link_up>
				ethif->current_state = cur_status;
 1813acc:	e0bffc17 	ldw	r2,-16(fp)
 1813ad0:	e0fffd17 	ldw	r3,-12(fp)
 1813ad4:	10c01615 	stw	r3,88(r2)

			netif_set_link_down(netif);
			ethif->current_state = cur_status;
		}
	}
}
 1813ad8:	00000706 	br	1813af8 <lwip_check_link_status+0x9c>
			}
		}
		else
		{
			// bring down the link
			ethif->link_alive = 0;
 1813adc:	e0bffc17 	ldw	r2,-16(fp)
 1813ae0:	10000215 	stw	zero,8(r2)

			netif_set_link_down(netif);
 1813ae4:	e13ffe17 	ldw	r4,-8(fp)
 1813ae8:	1819f740 	call	1819f74 <netif_set_link_down>
			ethif->current_state = cur_status;
 1813aec:	e0bffc17 	ldw	r2,-16(fp)
 1813af0:	e0fffd17 	ldw	r3,-12(fp)
 1813af4:	10c01615 	stw	r3,88(r2)
		}
	}
}
 1813af8:	0001883a 	nop
 1813afc:	e037883a 	mov	sp,fp
 1813b00:	dfc00117 	ldw	ra,4(sp)
 1813b04:	df000017 	ldw	fp,0(sp)
 1813b08:	dec00204 	addi	sp,sp,8
 1813b0c:	f800283a 	ret

01813b10 <lwip_handle_ethernet_input>:

#define NR_TEST_PACKETS						50000

// Input / monitor task per ethernet device
static void lwip_handle_ethernet_input(void *pvParameters)
{
 1813b10:	defe7104 	addi	sp,sp,-1596
 1813b14:	dfc18e15 	stw	ra,1592(sp)
 1813b18:	df018d15 	stw	fp,1588(sp)
 1813b1c:	df018d04 	addi	fp,sp,1588
 1813b20:	e13fff15 	stw	r4,-4(fp)
	sys_sem_t rcvsem = NULL;
 1813b24:	e03e7815 	stw	zero,-1568(fp)
	np_tse_mac* base = NULL;
 1813b28:	e03e7415 	stw	zero,-1584(fp)
	struct netif *cur_netif = (struct netif*)pvParameters;
 1813b2c:	e0bfff17 	ldw	r2,-4(fp)
 1813b30:	e0be7515 	stw	r2,-1580(fp)
	struct ethernetif *cur_ethif = (struct ethernetif*)cur_netif->state;
 1813b34:	e0be7517 	ldw	r2,-1580(fp)
 1813b38:	10800917 	ldw	r2,36(r2)
 1813b3c:	e0be7615 	stw	r2,-1576(fp)
	int packets_waiting = 0;
 1813b40:	e03e7315 	stw	zero,-1588(fp)

	/* Intermediate buffers used for temporary copy of frames that cannot be directrly DMA'ed*/
	char buf2[1560]; // TODO remove
	int replug_state = 0; // TODO remove
 1813b44:	e03e7715 	stw	zero,-1572(fp)

#if LWIP_RECEIVE_SEMAPHORE
	rcvsem = cur_ethif->tse_info->rx_semaphore;
 1813b48:	e0be7617 	ldw	r2,-1576(fp)
 1813b4c:	10801717 	ldw	r2,92(r2)
 1813b50:	10800817 	ldw	r2,32(r2)
 1813b54:	e0be7815 	stw	r2,-1568(fp)
#endif

	// get the actual MAC peripheral
	base = get_mac_base(cur_netif->num);
 1813b58:	e0be7517 	ldw	r2,-1580(fp)
 1813b5c:	10800f03 	ldbu	r2,60(r2)
 1813b60:	10803fcc 	andi	r2,r2,255
 1813b64:	1009883a 	mov	r4,r2
 1813b68:	18139200 	call	1813920 <get_mac_base>
 1813b6c:	e0be7415 	stw	r2,-1584(fp)
	if (!base)
 1813b70:	e0be7417 	ldw	r2,-1584(fp)
 1813b74:	10001426 	beq	r2,zero,1813bc8 <lwip_handle_ethernet_input+0xb8>
	// else we'll poll the function once every 100ms
		while (1) {
		// if we have a semaphore wait for it to be released by the SGDMA IRQ, or sleep for 1 ms
			// if we timeout also call ethernetif_input although most likely it would be useless
			// it is use full however to check the link status
		if (rcvsem)
 1813b78:	e0be7817 	ldw	r2,-1568(fp)
 1813b7c:	10000526 	beq	r2,zero,1813b94 <lwip_handle_ethernet_input+0x84>
			sys_arch_sem_wait(&rcvsem, 100);
 1813b80:	e0be7804 	addi	r2,fp,-1568
 1813b84:	01401904 	movi	r5,100
 1813b88:	1009883a 	mov	r4,r2
 1813b8c:	1814d740 	call	1814d74 <sys_arch_sem_wait>
 1813b90:	00000406 	br	1813ba4 <lwip_handle_ethernet_input+0x94>
		else if (packets_waiting <= 0)	// only sleep if there are no packets waiting
 1813b94:	e0be7317 	ldw	r2,-1588(fp)
 1813b98:	00800216 	blt	zero,r2,1813ba4 <lwip_handle_ethernet_input+0x94>
			mssleep(1);					// sleep a bit to be nice to the CPU
 1813b9c:	0100fa04 	movi	r4,1000
 1813ba0:	1827e400 	call	1827e40 <usleep>

			// Use semaphore or the timeout to call ethernet_input
			// this to avoid unnecessary load and faster responses ;)
		packets_waiting = ethernetif_input(cur_netif);
 1813ba4:	e13e7517 	ldw	r4,-1580(fp)
 1813ba8:	18132580 	call	1813258 <ethernetif_input>
 1813bac:	e0be7315 	stw	r2,-1588(fp)

		// check the link status if there are no packets waiting
		if (packets_waiting <= 0)
 1813bb0:	e0be7317 	ldw	r2,-1588(fp)
 1813bb4:	00bff016 	blt	zero,r2,1813b78 <__alt_mem_mem_0+0xff7f3b78>
			lwip_check_link_status(cur_netif, base);
 1813bb8:	e17e7417 	ldw	r5,-1584(fp)
 1813bbc:	e13e7517 	ldw	r4,-1580(fp)
 1813bc0:	1813a5c0 	call	1813a5c <lwip_check_link_status>
	}
 1813bc4:	003fec06 	br	1813b78 <__alt_mem_mem_0+0xff7f3b78>
#endif

	// get the actual MAC peripheral
	base = get_mac_base(cur_netif->num);
	if (!base)
		return;
 1813bc8:	0001883a 	nop

		// check the link status if there are no packets waiting
		if (packets_waiting <= 0)
			lwip_check_link_status(cur_netif, base);
	}
}
 1813bcc:	e037883a 	mov	sp,fp
 1813bd0:	dfc00117 	ldw	ra,4(sp)
 1813bd4:	df000017 	ldw	fp,0(sp)
 1813bd8:	dec00204 	addi	sp,sp,8
 1813bdc:	f800283a 	ret

01813be0 <print_ipad>:

const char* print_ipad(alt_u32 ip, char* buf)
{
 1813be0:	defff704 	addi	sp,sp,-36
 1813be4:	dfc00815 	stw	ra,32(sp)
 1813be8:	df000715 	stw	fp,28(sp)
 1813bec:	df000704 	addi	fp,sp,28
 1813bf0:	e13ffe15 	stw	r4,-8(fp)
 1813bf4:	e17fff15 	stw	r5,-4(fp)
	alt_u8 bip[4];
	alt_u32 idx = 0;
 1813bf8:	e03ffc15 	stw	zero,-16(fp)

	for (; idx < sizeof(bip); idx++) {
 1813bfc:	00000c06 	br	1813c30 <print_ipad+0x50>
		bip[idx] = ip & 0xFF;
 1813c00:	e0bffe17 	ldw	r2,-8(fp)
 1813c04:	1009883a 	mov	r4,r2
 1813c08:	e0fffd04 	addi	r3,fp,-12
 1813c0c:	e0bffc17 	ldw	r2,-16(fp)
 1813c10:	1885883a 	add	r2,r3,r2
 1813c14:	11000005 	stb	r4,0(r2)
		ip >>= 8;
 1813c18:	e0bffe17 	ldw	r2,-8(fp)
 1813c1c:	1004d23a 	srli	r2,r2,8
 1813c20:	e0bffe15 	stw	r2,-8(fp)
const char* print_ipad(alt_u32 ip, char* buf)
{
	alt_u8 bip[4];
	alt_u32 idx = 0;

	for (; idx < sizeof(bip); idx++) {
 1813c24:	e0bffc17 	ldw	r2,-16(fp)
 1813c28:	10800044 	addi	r2,r2,1
 1813c2c:	e0bffc15 	stw	r2,-16(fp)
 1813c30:	e0bffc17 	ldw	r2,-16(fp)
 1813c34:	10800130 	cmpltui	r2,r2,4
 1813c38:	103ff11e 	bne	r2,zero,1813c00 <__alt_mem_mem_0+0xff7f3c00>
		bip[idx] = ip & 0xFF;
		ip >>= 8;
	}

	snprintf(buf, 17, "%d.%d.%d.%d", bip[0], bip[1], bip[2], bip[3]);
 1813c3c:	e0bffd03 	ldbu	r2,-12(fp)
 1813c40:	11403fcc 	andi	r5,r2,255
 1813c44:	e0bffd43 	ldbu	r2,-11(fp)
 1813c48:	10803fcc 	andi	r2,r2,255
 1813c4c:	e0fffd83 	ldbu	r3,-10(fp)
 1813c50:	18c03fcc 	andi	r3,r3,255
 1813c54:	e13ffdc3 	ldbu	r4,-9(fp)
 1813c58:	21003fcc 	andi	r4,r4,255
 1813c5c:	d9000215 	stw	r4,8(sp)
 1813c60:	d8c00115 	stw	r3,4(sp)
 1813c64:	d8800015 	stw	r2,0(sp)
 1813c68:	280f883a 	mov	r7,r5
 1813c6c:	01806134 	movhi	r6,388
 1813c70:	31838604 	addi	r6,r6,3608
 1813c74:	01400444 	movi	r5,17
 1813c78:	e13fff17 	ldw	r4,-4(fp)
 1813c7c:	183ca740 	call	183ca74 <snprintf>

	return buf;
 1813c80:	e0bfff17 	ldw	r2,-4(fp)
}
 1813c84:	e037883a 	mov	sp,fp
 1813c88:	dfc00117 	ldw	ra,4(sp)
 1813c8c:	df000017 	ldw	fp,0(sp)
 1813c90:	dec00204 	addi	sp,sp,8
 1813c94:	f800283a 	ret

01813c98 <lwip_status_callback>:

static void lwip_status_callback(struct netif *netif)
{
 1813c98:	defffd04 	addi	sp,sp,-12
 1813c9c:	dfc00215 	stw	ra,8(sp)
 1813ca0:	df000115 	stw	fp,4(sp)
 1813ca4:	df000104 	addi	fp,sp,4
 1813ca8:	e13fff15 	stw	r4,-4(fp)
	if (status_callback)
 1813cac:	d0a7e817 	ldw	r2,-24672(gp)
 1813cb0:	10000326 	beq	r2,zero,1813cc0 <lwip_status_callback+0x28>
		status_callback(netif);
 1813cb4:	d0a7e817 	ldw	r2,-24672(gp)
 1813cb8:	e13fff17 	ldw	r4,-4(fp)
 1813cbc:	103ee83a 	callr	r2
}
 1813cc0:	0001883a 	nop
 1813cc4:	e037883a 	mov	sp,fp
 1813cc8:	dfc00117 	ldw	ra,4(sp)
 1813ccc:	df000017 	ldw	fp,0(sp)
 1813cd0:	dec00204 	addi	sp,sp,8
 1813cd4:	f800283a 	ret

01813cd8 <lwip_initialize_phys>:

void lwip_initialize_phys(void)
{
 1813cd8:	defff604 	addi	sp,sp,-40
 1813cdc:	dfc00915 	stw	ra,36(sp)
 1813ce0:	df000815 	stw	fp,32(sp)
 1813ce4:	df000804 	addi	fp,sp,32
	int idx, phyadd, phyid, phyid2;
	np_tse_mac *pmac;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 1813ce8:	e03ff815 	stw	zero,-32(fp)
 1813cec:	00006e06 	br	1813ea8 <lwip_initialize_phys+0x1d0>
	{
		// check whether this interface should be used
		if (!is_interface_active(idx))
 1813cf0:	e13ff817 	ldw	r4,-32(fp)
 1813cf4:	1800a740 	call	1800a74 <is_interface_active>
 1813cf8:	10006326 	beq	r2,zero,1813e88 <lwip_initialize_phys+0x1b0>
			continue;

		// the PHY is active... let's get the mac base
		pmac = get_mac_base(idx);
 1813cfc:	e13ff817 	ldw	r4,-32(fp)
 1813d00:	18139200 	call	1813920 <get_mac_base>
 1813d04:	e0bffd15 	stw	r2,-12(fp)
		if (!pmac)
 1813d08:	e0bffd17 	ldw	r2,-12(fp)
 1813d0c:	10006026 	beq	r2,zero,1813e90 <lwip_initialize_phys+0x1b8>
			continue;

		// search the PHY and it's ID
		for (phyadd = 0x00; phyadd < 0x20; ++phyadd)
 1813d10:	e03ff915 	stw	zero,-28(fp)
 1813d14:	00001206 	br	1813d60 <lwip_initialize_phys+0x88>
		{
			IOWR(&pmac->MDIO_ADDR1, 0, phyadd);
 1813d18:	e0bffd17 	ldw	r2,-12(fp)
 1813d1c:	10801004 	addi	r2,r2,64
 1813d20:	e0fff917 	ldw	r3,-28(fp)
 1813d24:	10c00035 	stwio	r3,0(r2)

			phyid = IORD(&pmac->mdio1.PHY_ID1, 0);
 1813d28:	e0bffd17 	ldw	r2,-12(fp)
 1813d2c:	1080a204 	addi	r2,r2,648
 1813d30:	10800037 	ldwio	r2,0(r2)
 1813d34:	e0bffa15 	stw	r2,-24(fp)
			phyid2 = IORD(&pmac->mdio1.PHY_ID2, 0);
 1813d38:	e0bffd17 	ldw	r2,-12(fp)
 1813d3c:	1080a304 	addi	r2,r2,652
 1813d40:	10800037 	ldwio	r2,0(r2)
 1813d44:	e0bffb15 	stw	r2,-20(fp)

			if (phyid != phyid2)
 1813d48:	e0fffa17 	ldw	r3,-24(fp)
 1813d4c:	e0bffb17 	ldw	r2,-20(fp)
 1813d50:	1880071e 	bne	r3,r2,1813d70 <lwip_initialize_phys+0x98>
		pmac = get_mac_base(idx);
		if (!pmac)
			continue;

		// search the PHY and it's ID
		for (phyadd = 0x00; phyadd < 0x20; ++phyadd)
 1813d54:	e0bff917 	ldw	r2,-28(fp)
 1813d58:	10800044 	addi	r2,r2,1
 1813d5c:	e0bff915 	stw	r2,-28(fp)
 1813d60:	e0bff917 	ldw	r2,-28(fp)
 1813d64:	10800810 	cmplti	r2,r2,32
 1813d68:	103feb1e 	bne	r2,zero,1813d18 <__alt_mem_mem_0+0xff7f3d18>
 1813d6c:	00000106 	br	1813d74 <lwip_initialize_phys+0x9c>

			phyid = IORD(&pmac->mdio1.PHY_ID1, 0);
			phyid2 = IORD(&pmac->mdio1.PHY_ID2, 0);

			if (phyid != phyid2)
				break;
 1813d70:	0001883a 	nop
		}

		// if we have the PHY we can initialize it if we can find the driver in the pphy_profiles array
		if (phyid != phyid2)
 1813d74:	e0fffa17 	ldw	r3,-24(fp)
 1813d78:	e0bffb17 	ldw	r2,-20(fp)
 1813d7c:	18804726 	beq	r3,r2,1813e9c <lwip_initialize_phys+0x1c4>
            extern alt_tse_phy_profile *pphy_profiles[];
            extern alt_u8 phy_profile_count;

            int i;

            for(i = 0; i < phy_profile_count; i++) {
 1813d80:	e03ffc15 	stw	zero,-16(fp)
 1813d84:	00003b06 	br	1813e74 <lwip_initialize_phys+0x19c>
                alt_u32 oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
 1813d88:	e0bffa17 	ldw	r2,-24(fp)
 1813d8c:	100691ba 	slli	r3,r2,6
 1813d90:	e0bffb17 	ldw	r2,-20(fp)
 1813d94:	1005d2ba 	srai	r2,r2,10
 1813d98:	10800fcc 	andi	r2,r2,63
 1813d9c:	1884b03a 	or	r2,r3,r2
 1813da0:	e0bffe15 	stw	r2,-8(fp)
                alt_u8 model_number = (phyid2 >> 4) & 0x3f;
 1813da4:	e0bffb17 	ldw	r2,-20(fp)
 1813da8:	1005d13a 	srai	r2,r2,4
 1813dac:	10800fcc 	andi	r2,r2,63
 1813db0:	e0bfff05 	stb	r2,-4(fp)
                // unused so far... alt_u8 revision_number = phyid2 & 0x0f;

                // if PHY match with PHY in profile we can call the initialize function
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 1813db4:	008061f4 	movhi	r2,391
 1813db8:	10a85604 	addi	r2,r2,-24232
 1813dbc:	e0fffc17 	ldw	r3,-16(fp)
 1813dc0:	18c7883a 	add	r3,r3,r3
 1813dc4:	18c7883a 	add	r3,r3,r3
 1813dc8:	10c5883a 	add	r2,r2,r3
 1813dcc:	10800017 	ldw	r2,0(r2)
 1813dd0:	10c01417 	ldw	r3,80(r2)
 1813dd4:	e0bffe17 	ldw	r2,-8(fp)
 1813dd8:	1880231e 	bne	r3,r2,1813e68 <lwip_initialize_phys+0x190>
 1813ddc:	008061f4 	movhi	r2,391
 1813de0:	10a85604 	addi	r2,r2,-24232
 1813de4:	e0fffc17 	ldw	r3,-16(fp)
 1813de8:	18c7883a 	add	r3,r3,r3
 1813dec:	18c7883a 	add	r3,r3,r3
 1813df0:	10c5883a 	add	r2,r2,r3
 1813df4:	10800017 	ldw	r2,0(r2)
 1813df8:	10801503 	ldbu	r2,84(r2)
 1813dfc:	10c03fcc 	andi	r3,r2,255
 1813e00:	e0bfff03 	ldbu	r2,-4(fp)
 1813e04:	1880181e 	bne	r3,r2,1813e68 <lwip_initialize_phys+0x190>
                {
                    if (pphy_profiles[i]->phy_cfg)
 1813e08:	008061f4 	movhi	r2,391
 1813e0c:	10a85604 	addi	r2,r2,-24232
 1813e10:	e0fffc17 	ldw	r3,-16(fp)
 1813e14:	18c7883a 	add	r3,r3,r3
 1813e18:	18c7883a 	add	r3,r3,r3
 1813e1c:	10c5883a 	add	r2,r2,r3
 1813e20:	10800017 	ldw	r2,0(r2)
 1813e24:	10801717 	ldw	r2,92(r2)
 1813e28:	10001b26 	beq	r2,zero,1813e98 <lwip_initialize_phys+0x1c0>
                    {
                    	// initialize the PHY
                    	pphy_profiles[i]->phy_cfg(pmac);
 1813e2c:	008061f4 	movhi	r2,391
 1813e30:	10a85604 	addi	r2,r2,-24232
 1813e34:	e0fffc17 	ldw	r3,-16(fp)
 1813e38:	18c7883a 	add	r3,r3,r3
 1813e3c:	18c7883a 	add	r3,r3,r3
 1813e40:	10c5883a 	add	r2,r2,r3
 1813e44:	10800017 	ldw	r2,0(r2)
 1813e48:	10801717 	ldw	r2,92(r2)
 1813e4c:	e13ffd17 	ldw	r4,-12(fp)
 1813e50:	103ee83a 	callr	r2

                    	// and restart the Auto-Negotiation
                    	IOWR(&pmac->mdio1.CONTROL, 0, (1<<12 | 1<<9));
 1813e54:	e0bffd17 	ldw	r2,-12(fp)
 1813e58:	1080a004 	addi	r2,r2,640
 1813e5c:	00c48004 	movi	r3,4608
 1813e60:	10c00035 	stwio	r3,0(r2)
                    }

                    // and done for this PHY
                    break;
 1813e64:	00000c06 	br	1813e98 <lwip_initialize_phys+0x1c0>
            extern alt_tse_phy_profile *pphy_profiles[];
            extern alt_u8 phy_profile_count;

            int i;

            for(i = 0; i < phy_profile_count; i++) {
 1813e68:	e0bffc17 	ldw	r2,-16(fp)
 1813e6c:	10800044 	addi	r2,r2,1
 1813e70:	e0bffc15 	stw	r2,-16(fp)
 1813e74:	d0a80e03 	ldbu	r2,-24520(gp)
 1813e78:	10803fcc 	andi	r2,r2,255
 1813e7c:	e0fffc17 	ldw	r3,-16(fp)
 1813e80:	18bfc116 	blt	r3,r2,1813d88 <__alt_mem_mem_0+0xff7f3d88>
 1813e84:	00000506 	br	1813e9c <lwip_initialize_phys+0x1c4>

	for (idx = 0; idx < PHY_COUNT; ++idx)
	{
		// check whether this interface should be used
		if (!is_interface_active(idx))
			continue;
 1813e88:	0001883a 	nop
 1813e8c:	00000306 	br	1813e9c <lwip_initialize_phys+0x1c4>

		// the PHY is active... let's get the mac base
		pmac = get_mac_base(idx);
		if (!pmac)
			continue;
 1813e90:	0001883a 	nop
 1813e94:	00000106 	br	1813e9c <lwip_initialize_phys+0x1c4>
                    	// and restart the Auto-Negotiation
                    	IOWR(&pmac->mdio1.CONTROL, 0, (1<<12 | 1<<9));
                    }

                    // and done for this PHY
                    break;
 1813e98:	0001883a 	nop
void lwip_initialize_phys(void)
{
	int idx, phyadd, phyid, phyid2;
	np_tse_mac *pmac;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 1813e9c:	e0bff817 	ldw	r2,-32(fp)
 1813ea0:	10800044 	addi	r2,r2,1
 1813ea4:	e0bff815 	stw	r2,-32(fp)
 1813ea8:	e0bff817 	ldw	r2,-32(fp)
 1813eac:	00bf900e 	bge	zero,r2,1813cf0 <__alt_mem_mem_0+0xff7f3cf0>
                    break;
                }
            }
		}
	}
}
 1813eb0:	0001883a 	nop
 1813eb4:	e037883a 	mov	sp,fp
 1813eb8:	dfc00117 	ldw	ra,4(sp)
 1813ebc:	df000017 	ldw	fp,0(sp)
 1813ec0:	dec00204 	addi	sp,sp,8
 1813ec4:	f800283a 	ret

01813ec8 <tse_mac_init>:
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface, struct ethernetif *ethernetif)
{
 1813ec8:	defff004 	addi	sp,sp,-64
 1813ecc:	dfc00f15 	stw	ra,60(sp)
 1813ed0:	df000e15 	stw	fp,56(sp)
 1813ed4:	df000e04 	addi	fp,sp,56
 1813ed8:	e13ffe15 	stw	r4,-8(fp)
 1813edc:	e17fff15 	stw	r5,-4(fp)
	int speed, duplex, result;
	int x;

	alt_sgdma_dev *sgdma_tx_dev;
	alt_sgdma_dev *sgdma_rx_dev;
	alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
 1813ee0:	008061b4 	movhi	r2,390
 1813ee4:	10875604 	addi	r2,r2,7512
 1813ee8:	e0fffe17 	ldw	r3,-8(fp)
 1813eec:	18c00924 	muli	r3,r3,36
 1813ef0:	10c5883a 	add	r2,r2,r3
 1813ef4:	10800704 	addi	r2,r2,28
 1813ef8:	10800017 	ldw	r2,0(r2)
 1813efc:	e0bff715 	stw	r2,-36(fp)
	np_tse_mac *mi_base;
	alt_tse_mac_info *pmac_info;

#if LWIP_RECEIVE_SEMAPHORE
	if (!tse[iface].rx_semaphore) {
 1813f00:	008061b4 	movhi	r2,390
 1813f04:	10875604 	addi	r2,r2,7512
 1813f08:	e0fffe17 	ldw	r3,-8(fp)
 1813f0c:	18c00924 	muli	r3,r3,36
 1813f10:	10c5883a 	add	r2,r2,r3
 1813f14:	10800804 	addi	r2,r2,32
 1813f18:	10800017 	ldw	r2,0(r2)
 1813f1c:	10001e1e 	bne	r2,zero,1813f98 <tse_mac_init+0xd0>
		dprintf(("creating RX SGDMA semaphore\n"));
		// create a counting semaphore so we can 'release' the semaphore for each rx input buffer filled
		if (sys_sem_new(&tse[iface].rx_semaphore, LWIP_RX_ETH_BUFFER) != ERR_OK) {
 1813f20:	e0bffe17 	ldw	r2,-8(fp)
 1813f24:	10800924 	muli	r2,r2,36
 1813f28:	10c00804 	addi	r3,r2,32
 1813f2c:	008061b4 	movhi	r2,390
 1813f30:	10875604 	addi	r2,r2,7512
 1813f34:	1885883a 	add	r2,r3,r2
 1813f38:	01400304 	movi	r5,12
 1813f3c:	1009883a 	mov	r4,r2
 1813f40:	1814bf00 	call	1814bf0 <sys_sem_new>
 1813f44:	10803fcc 	andi	r2,r2,255
 1813f48:	1080201c 	xori	r2,r2,128
 1813f4c:	10bfe004 	addi	r2,r2,-128
 1813f50:	1000111e 	bne	r2,zero,1813f98 <tse_mac_init+0xd0>
			dprintf(("[LwIP] Couldn't create the rx_semephore\n"));
		} else {
			// we got a semaphore, completely lock it
			for (x = 0; x < LWIP_RX_ETH_BUFFER; x++)
 1813f54:	e03ff515 	stw	zero,-44(fp)
 1813f58:	00000c06 	br	1813f8c <tse_mac_init+0xc4>
				sys_arch_sem_wait(&tse[iface].rx_semaphore, 1);
 1813f5c:	e0bffe17 	ldw	r2,-8(fp)
 1813f60:	10800924 	muli	r2,r2,36
 1813f64:	10c00804 	addi	r3,r2,32
 1813f68:	008061b4 	movhi	r2,390
 1813f6c:	10875604 	addi	r2,r2,7512
 1813f70:	1885883a 	add	r2,r3,r2
 1813f74:	01400044 	movi	r5,1
 1813f78:	1009883a 	mov	r4,r2
 1813f7c:	1814d740 	call	1814d74 <sys_arch_sem_wait>
		// create a counting semaphore so we can 'release' the semaphore for each rx input buffer filled
		if (sys_sem_new(&tse[iface].rx_semaphore, LWIP_RX_ETH_BUFFER) != ERR_OK) {
			dprintf(("[LwIP] Couldn't create the rx_semephore\n"));
		} else {
			// we got a semaphore, completely lock it
			for (x = 0; x < LWIP_RX_ETH_BUFFER; x++)
 1813f80:	e0bff517 	ldw	r2,-44(fp)
 1813f84:	10800044 	addi	r2,r2,1
 1813f88:	e0bff515 	stw	r2,-44(fp)
 1813f8c:	e0bff517 	ldw	r2,-44(fp)
 1813f90:	10800310 	cmplti	r2,r2,12
 1813f94:	103ff11e 	bne	r2,zero,1813f5c <__alt_mem_mem_0+0xff7f3f5c>
	dprintf(("[tse_mac_init]\n"));
#ifdef PRINTIF
	dprintf(("tse_mac_init %d\n", iface));
#endif    
	// These lines were done in prep_tse_mac
	tse_hw = &tse_mac_device[iface];
 1813f98:	e0bffe17 	ldw	r2,-8(fp)
 1813f9c:	10c01224 	muli	r3,r2,72
 1813fa0:	00806134 	movhi	r2,388
 1813fa4:	10946304 	addi	r2,r2,20876
 1813fa8:	1885883a 	add	r2,r3,r2
 1813fac:	e0bff715 	stw	r2,-36(fp)
	tse[iface].tse = tse_hw;
 1813fb0:	008061b4 	movhi	r2,390
 1813fb4:	10875604 	addi	r2,r2,7512
 1813fb8:	e0fffe17 	ldw	r3,-8(fp)
 1813fbc:	18c00924 	muli	r3,r3,36
 1813fc0:	10c5883a 	add	r2,r2,r3
 1813fc4:	10800704 	addi	r2,r2,28
 1813fc8:	e0fff717 	ldw	r3,-36(fp)
 1813fcc:	10c00015 	stw	r3,0(r2)

	// Store ethernetif for access, and the tse in ethernetif for access in tse_mac_raw_send/tse_mac_rcv
	tse[iface].ethernetif = ethernetif;
 1813fd0:	008061b4 	movhi	r2,390
 1813fd4:	10875604 	addi	r2,r2,7512
 1813fd8:	e0fffe17 	ldw	r3,-8(fp)
 1813fdc:	18c00924 	muli	r3,r3,36
 1813fe0:	10c5883a 	add	r2,r2,r3
 1813fe4:	10800604 	addi	r2,r2,24
 1813fe8:	e0ffff17 	ldw	r3,-4(fp)
 1813fec:	10c00015 	stw	r3,0(r2)
	ethernetif->iface = iface;
 1813ff0:	e0bfff17 	ldw	r2,-4(fp)
 1813ff4:	e0fffe17 	ldw	r3,-8(fp)
 1813ff8:	10c00115 	stw	r3,4(r2)
	ethernetif->tse_info = &tse[iface];
 1813ffc:	e0bffe17 	ldw	r2,-8(fp)
 1814000:	10c00924 	muli	r3,r2,36
 1814004:	008061b4 	movhi	r2,390
 1814008:	10875604 	addi	r2,r2,7512
 181400c:	1887883a 	add	r3,r3,r2
 1814010:	e0bfff17 	ldw	r2,-4(fp)
 1814014:	10c01715 	stw	r3,92(r2)

	if (tse_hw->ext_desc_mem == 1)
 1814018:	e0bff717 	ldw	r2,-36(fp)
 181401c:	10800783 	ldbu	r2,30(r2)
 1814020:	10803fcc 	andi	r2,r2,255
 1814024:	10800058 	cmpnei	r2,r2,1
 1814028:	10000b1e 	bne	r2,zero,1814058 <tse_mac_init+0x190>
	{
		tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
 181402c:	e0bff717 	ldw	r2,-36(fp)
 1814030:	10800817 	ldw	r2,32(r2)
 1814034:	1009883a 	mov	r4,r2
 1814038:	008061b4 	movhi	r2,390
 181403c:	10875604 	addi	r2,r2,7512
 1814040:	e0fffe17 	ldw	r3,-8(fp)
 1814044:	18c00924 	muli	r3,r3,36
 1814048:	10c5883a 	add	r2,r2,r3
 181404c:	10800504 	addi	r2,r2,20
 1814050:	11000015 	stw	r4,0(r2)
 1814054:	00001206 	br	18140a0 <tse_mac_init+0x1d8>
	}
	else
	{
		unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));
 1814058:	01002804 	movi	r4,160
 181405c:	1827e100 	call	1827e10 <alt_uncached_malloc>
 1814060:	e0bff615 	stw	r2,-40(fp)

		while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
 1814064:	00000306 	br	1814074 <tse_mac_init+0x1ac>
			temp_desc++;
 1814068:	e0bff617 	ldw	r2,-40(fp)
 181406c:	10800044 	addi	r2,r2,1
 1814070:	e0bff615 	stw	r2,-40(fp)
	}
	else
	{
		unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));

		while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
 1814074:	e0bff617 	ldw	r2,-40(fp)
 1814078:	108007cc 	andi	r2,r2,31
 181407c:	103ffa1e 	bne	r2,zero,1814068 <__alt_mem_mem_0+0xff7f4068>
			temp_desc++;
		tse[iface].desc = (alt_sgdma_descriptor *) temp_desc;
 1814080:	008061b4 	movhi	r2,390
 1814084:	10875604 	addi	r2,r2,7512
 1814088:	e0fffe17 	ldw	r3,-8(fp)
 181408c:	18c00924 	muli	r3,r3,36
 1814090:	10c5883a 	add	r2,r2,r3
 1814094:	10800504 	addi	r2,r2,20
 1814098:	e0fff617 	ldw	r3,-40(fp)
 181409c:	10c00015 	stw	r3,0(r2)
	}

	/* Get the Rx and Tx SGDMA addresses */
	sgdma_tx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_tx);
 18140a0:	e0bff717 	ldw	r2,-36(fp)
 18140a4:	10800517 	ldw	r2,20(r2)
 18140a8:	1009883a 	mov	r4,r2
 18140ac:	18256b80 	call	18256b8 <alt_avalon_sgdma_open>
 18140b0:	e0bff815 	stw	r2,-32(fp)

	if (!sgdma_tx_dev)
 18140b4:	e0bff817 	ldw	r2,-32(fp)
 18140b8:	1000021e 	bne	r2,zero,18140c4 <tse_mac_init+0x1fc>
	{
		dprintf(("[triple_speed_ethernet_init] Error opening TX SGDMA\n"));
		return ENP_RESOURCE;
 18140bc:	00bffa84 	movi	r2,-22
 18140c0:	00018f06 	br	1814700 <tse_mac_init+0x838>
	}

	sgdma_rx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_rx);
 18140c4:	e0bff717 	ldw	r2,-36(fp)
 18140c8:	10800617 	ldw	r2,24(r2)
 18140cc:	1009883a 	mov	r4,r2
 18140d0:	18256b80 	call	18256b8 <alt_avalon_sgdma_open>
 18140d4:	e0bff915 	stw	r2,-28(fp)
	if (!sgdma_rx_dev)
 18140d8:	e0bff917 	ldw	r2,-28(fp)
 18140dc:	1000021e 	bne	r2,zero,18140e8 <tse_mac_init+0x220>
	{
		dprintf(("[triple_speed_ethernet_init] Error opening RX SGDMA\n"));
		return ENP_RESOURCE;
 18140e0:	00bffa84 	movi	r2,-22
 18140e4:	00018606 	br	1814700 <tse_mac_init+0x838>
	}

	/* Initialize mtip_mac_trans_info structure with values from <system.h>*/

	tse_mac_initTransInfo2(&tse[iface].mi, (int)tse_hw->tse_mac_base,
 18140e8:	e0bffe17 	ldw	r2,-8(fp)
 18140ec:	10c00924 	muli	r3,r2,36
 18140f0:	008061b4 	movhi	r2,390
 18140f4:	10875604 	addi	r2,r2,7512
 18140f8:	1887883a 	add	r3,r3,r2
 18140fc:	e0bff717 	ldw	r2,-36(fp)
 1814100:	10800017 	ldw	r2,0(r2)
 1814104:	e13ff817 	ldw	r4,-32(fp)
 1814108:	e17ff917 	ldw	r5,-28(fp)
 181410c:	d8000015 	stw	zero,0(sp)
 1814110:	280f883a 	mov	r7,r5
 1814114:	200d883a 	mov	r6,r4
 1814118:	100b883a 	mov	r5,r2
 181411c:	1809883a 	mov	r4,r3
 1814120:	182b8980 	call	182b898 <tse_mac_initTransInfo2>
			(unsigned int)sgdma_tx_dev,
			(unsigned int)sgdma_rx_dev,
			0);
	mi_base = tse[iface].mi.base;
 1814124:	008061b4 	movhi	r2,390
 1814128:	10875604 	addi	r2,r2,7512
 181412c:	e0fffe17 	ldw	r3,-8(fp)
 1814130:	18c00924 	muli	r3,r3,36
 1814134:	10c5883a 	add	r2,r2,r3
 1814138:	10800017 	ldw	r2,0(r2)
 181413c:	e0bffa15 	stw	r2,-24(fp)

	IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
 1814140:	008061b4 	movhi	r2,390
 1814144:	10875604 	addi	r2,r2,7512
 1814148:	e0fffe17 	ldw	r3,-8(fp)
 181414c:	18c00924 	muli	r3,r3,36
 1814150:	10c5883a 	add	r2,r2,r3
 1814154:	10800204 	addi	r2,r2,8
 1814158:	10800017 	ldw	r2,0(r2)
 181415c:	10800317 	ldw	r2,12(r2)
 1814160:	10800404 	addi	r2,r2,16
 1814164:	00c00074 	movhi	r3,1
 1814168:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, 0x0);
 181416c:	008061b4 	movhi	r2,390
 1814170:	10875604 	addi	r2,r2,7512
 1814174:	e0fffe17 	ldw	r3,-8(fp)
 1814178:	18c00924 	muli	r3,r3,36
 181417c:	10c5883a 	add	r2,r2,r3
 1814180:	10800204 	addi	r2,r2,8
 1814184:	10800017 	ldw	r2,0(r2)
 1814188:	10800317 	ldw	r2,12(r2)
 181418c:	10800404 	addi	r2,r2,16
 1814190:	0007883a 	mov	r3,zero
 1814194:	10c00035 	stwio	r3,0(r2)

	/* reset the PHY if necessary */
	result = getPHYSpeed(tse[iface].mi.base);
 1814198:	008061b4 	movhi	r2,390
 181419c:	10875604 	addi	r2,r2,7512
 18141a0:	e0fffe17 	ldw	r3,-8(fp)
 18141a4:	18c00924 	muli	r3,r3,36
 18141a8:	10c5883a 	add	r2,r2,r3
 18141ac:	10800017 	ldw	r2,0(r2)
 18141b0:	1009883a 	mov	r4,r2
 18141b4:	182cd240 	call	182cd24 <getPHYSpeed>
 18141b8:	e0bffb15 	stw	r2,-20(fp)
	speed = (result >> 1) & 0x07;
 18141bc:	e0bffb17 	ldw	r2,-20(fp)
 18141c0:	1005d07a 	srai	r2,r2,1
 18141c4:	108001cc 	andi	r2,r2,7
 18141c8:	e0bffc15 	stw	r2,-16(fp)
	duplex = result & 0x01;
 18141cc:	e0bffb17 	ldw	r2,-20(fp)
 18141d0:	1080004c 	andi	r2,r2,1
 18141d4:	e0bff415 	stw	r2,-48(fp)

	/* reset the mac */
	IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,
 18141d8:	008061b4 	movhi	r2,390
 18141dc:	10875604 	addi	r2,r2,7512
 18141e0:	e0fffe17 	ldw	r3,-8(fp)
 18141e4:	18c00924 	muli	r3,r3,36
 18141e8:	10c5883a 	add	r2,r2,r3
 18141ec:	10800017 	ldw	r2,0(r2)
 18141f0:	10800204 	addi	r2,r2,8
 18141f4:	00c800c4 	movi	r3,8195
 18141f8:	10c00035 	stwio	r3,0(r2)
			mmac_cc_SW_RESET_mask |
			mmac_cc_TX_ENA_mask |
			mmac_cc_RX_ENA_mask);

	x = 0;
 18141fc:	e03ff515 	stw	zero,-44(fp)
	while (IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) &
 1814200:	00000506 	br	1814218 <tse_mac_init+0x350>
			ALTERA_TSEMAC_CMD_SW_RESET_MSK)
	{
		if( x++ > 10000 )
 1814204:	e0bff517 	ldw	r2,-44(fp)
 1814208:	10c00044 	addi	r3,r2,1
 181420c:	e0fff515 	stw	r3,-44(fp)
 1814210:	1089c450 	cmplti	r2,r2,10001
 1814214:	10000b26 	beq	r2,zero,1814244 <tse_mac_init+0x37c>
			mmac_cc_SW_RESET_mask |
			mmac_cc_TX_ENA_mask |
			mmac_cc_RX_ENA_mask);

	x = 0;
	while (IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) &
 1814218:	008061b4 	movhi	r2,390
 181421c:	10875604 	addi	r2,r2,7512
 1814220:	e0fffe17 	ldw	r3,-8(fp)
 1814224:	18c00924 	muli	r3,r3,36
 1814228:	10c5883a 	add	r2,r2,r3
 181422c:	10800017 	ldw	r2,0(r2)
 1814230:	10800204 	addi	r2,r2,8
 1814234:	10800037 	ldwio	r2,0(r2)
 1814238:	1088000c 	andi	r2,r2,8192
 181423c:	103ff11e 	bne	r2,zero,1814204 <__alt_mem_mem_0+0xff7f4204>
 1814240:	00000106 	br	1814248 <tse_mac_init+0x380>
			ALTERA_TSEMAC_CMD_SW_RESET_MSK)
	{
		if( x++ > 10000 )
			break;
 1814244:	0001883a 	nop
	}

	if (x >= 10000)
		dprintf(("TSEMAC SW reset bit never cleared!\n"));

	dat = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
 1814248:	008061b4 	movhi	r2,390
 181424c:	10875604 	addi	r2,r2,7512
 1814250:	e0fffe17 	ldw	r3,-8(fp)
 1814254:	18c00924 	muli	r3,r3,36
 1814258:	10c5883a 	add	r2,r2,r3
 181425c:	10800017 	ldw	r2,0(r2)
 1814260:	10800204 	addi	r2,r2,8
 1814264:	10800037 	ldwio	r2,0(r2)
 1814268:	e0bff315 	stw	r2,-52(fp)
		dprintf(("WARN: RX/TX not disabled after reset... missing PHY clock? CMD_CONFIG=0x%08x\n", dat));
	else
		dprintf(("OK, x=%d, CMD_CONFIG=0x%08x\n", x, dat));

	/* Initialize MAC registers */
	IOWR_ALTERA_TSEMAC_FRM_LENGTH(mi_base, PBUF_POOL_BUFSIZE+ETH_PAD_SIZE);
 181426c:	e0bffa17 	ldw	r2,-24(fp)
 1814270:	10800504 	addi	r2,r2,20
 1814274:	00c17b84 	movi	r3,1518
 1814278:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_ALMOST_EMPTY(mi_base, 8);
 181427c:	e0bffa17 	ldw	r2,-24(fp)
 1814280:	10800b04 	addi	r2,r2,44
 1814284:	00c00204 	movi	r3,8
 1814288:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_ALMOST_FULL(mi_base, 8);
 181428c:	e0bffa17 	ldw	r2,-24(fp)
 1814290:	10800c04 	addi	r2,r2,48
 1814294:	00c00204 	movi	r3,8
 1814298:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_ALMOST_EMPTY(mi_base, 8);
 181429c:	e0bffa17 	ldw	r2,-24(fp)
 18142a0:	10800d04 	addi	r2,r2,52
 18142a4:	00c00204 	movi	r3,8
 18142a8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_ALMOST_FULL(mi_base,  3);
 18142ac:	e0bffa17 	ldw	r2,-24(fp)
 18142b0:	10800e04 	addi	r2,r2,56
 18142b4:	00c000c4 	movi	r3,3
 18142b8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_SECTION_EMPTY(mi_base, tse_hw->tse_tx_depth - 16);
 18142bc:	e0bffa17 	ldw	r2,-24(fp)
 18142c0:	10800904 	addi	r2,r2,36
 18142c4:	e0fff717 	ldw	r3,-36(fp)
 18142c8:	18c0010b 	ldhu	r3,4(r3)
 18142cc:	18ffffcc 	andi	r3,r3,65535
 18142d0:	18fffc04 	addi	r3,r3,-16
 18142d4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_SECTION_FULL(mi_base,  0);
 18142d8:	e0bffa17 	ldw	r2,-24(fp)
 18142dc:	10800a04 	addi	r2,r2,40
 18142e0:	0007883a 	mov	r3,zero
 18142e4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_SECTION_EMPTY(mi_base, tse_hw->tse_rx_depth - 16);
 18142e8:	e0bffa17 	ldw	r2,-24(fp)
 18142ec:	10800704 	addi	r2,r2,28
 18142f0:	e0fff717 	ldw	r3,-36(fp)
 18142f4:	18c0018b 	ldhu	r3,6(r3)
 18142f8:	18ffffcc 	andi	r3,r3,65535
 18142fc:	18fffc04 	addi	r3,r3,-16
 1814300:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_SECTION_FULL(mi_base,  0);
 1814304:	e0bffa17 	ldw	r2,-24(fp)
 1814308:	10800804 	addi	r2,r2,32
 181430c:	0007883a 	mov	r3,zero
 1814310:	10c00035 	stwio	r3,0(r2)

	/* Enable TX shift 16 for removing two bytes from the start of all transmitted frames */
	IOWR_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK);
 1814314:	008061b4 	movhi	r2,390
 1814318:	10875604 	addi	r2,r2,7512
 181431c:	e0fffe17 	ldw	r3,-8(fp)
 1814320:	18c00924 	muli	r3,r3,36
 1814324:	10c5883a 	add	r2,r2,r3
 1814328:	10800017 	ldw	r2,0(r2)
 181432c:	10803a04 	addi	r2,r2,232
 1814330:	00c00134 	movhi	r3,4
 1814334:	10c00035 	stwio	r3,0(r2)

	/*
	 * check if the MAC supports the 16-bit shift option allowing us
	 * to send BIASed frames without copying. Used by the send function later.
	 */
	if ((IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) == 0)
 1814338:	008061b4 	movhi	r2,390
 181433c:	10875604 	addi	r2,r2,7512
 1814340:	e0fffe17 	ldw	r3,-8(fp)
 1814344:	18c00924 	muli	r3,r3,36
 1814348:	10c5883a 	add	r2,r2,r3
 181434c:	10800017 	ldw	r2,0(r2)
 1814350:	10803a04 	addi	r2,r2,232
 1814354:	10800037 	ldwio	r2,0(r2)
 1814358:	1080012c 	andhi	r2,r2,4
 181435c:	1000021e 	bne	r2,zero,1814368 <tse_mac_init+0x4a0>
	{
		dprintf(("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETH_PAD_SIZE));
		return ERR_IF;
 1814360:	00bffc44 	movi	r2,-15
 1814364:	0000e606 	br	1814700 <tse_mac_init+0x838>
	}

	/* Enable RX shift 16 for alignment of all received frames on 16-bit start address */
	IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
 1814368:	008061b4 	movhi	r2,390
 181436c:	10875604 	addi	r2,r2,7512
 1814370:	e0fffe17 	ldw	r3,-8(fp)
 1814374:	18c00924 	muli	r3,r3,36
 1814378:	10c5883a 	add	r2,r2,r3
 181437c:	10800017 	ldw	r2,0(r2)
 1814380:	10803b04 	addi	r2,r2,236
 1814384:	00c08034 	movhi	r3,512
 1814388:	10c00035 	stwio	r3,0(r2)

	/* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */
	if ((IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK) == 0)
 181438c:	008061b4 	movhi	r2,390
 1814390:	10875604 	addi	r2,r2,7512
 1814394:	e0fffe17 	ldw	r3,-8(fp)
 1814398:	18c00924 	muli	r3,r3,36
 181439c:	10c5883a 	add	r2,r2,r3
 18143a0:	10800017 	ldw	r2,0(r2)
 18143a4:	10803b04 	addi	r2,r2,236
 18143a8:	10800037 	ldwio	r2,0(r2)
 18143ac:	1080802c 	andhi	r2,r2,512
 18143b0:	1000021e 	bne	r2,zero,18143bc <tse_mac_init+0x4f4>
	{
		dprintf(("[tse_mac_init] Error: Incompatible %d value with RX_CMD_STAT register return RxShift16 value. \n",ETH_PAD_SIZE));
		return ERR_IF;
 18143b4:	00bffc44 	movi	r2,-15
 18143b8:	0000d106 	br	1814700 <tse_mac_init+0x838>
	}

	/* Set the MAC address */
	IOWR_ALTERA_TSEMAC_MAC_0(mi_base,
 18143bc:	e0bffa17 	ldw	r2,-24(fp)
 18143c0:	10800304 	addi	r2,r2,12
 18143c4:	e0ffff17 	ldw	r3,-4(fp)
 18143c8:	18c00017 	ldw	r3,0(r3)
 18143cc:	18c00003 	ldbu	r3,0(r3)
 18143d0:	19003fcc 	andi	r4,r3,255
 18143d4:	e0ffff17 	ldw	r3,-4(fp)
 18143d8:	18c00017 	ldw	r3,0(r3)
 18143dc:	18c00043 	ldbu	r3,1(r3)
 18143e0:	18c03fcc 	andi	r3,r3,255
 18143e4:	1806923a 	slli	r3,r3,8
 18143e8:	20c8b03a 	or	r4,r4,r3
 18143ec:	e0ffff17 	ldw	r3,-4(fp)
 18143f0:	18c00017 	ldw	r3,0(r3)
 18143f4:	18c00083 	ldbu	r3,2(r3)
 18143f8:	18c03fcc 	andi	r3,r3,255
 18143fc:	1806943a 	slli	r3,r3,16
 1814400:	20c8b03a 	or	r4,r4,r3
 1814404:	e0ffff17 	ldw	r3,-4(fp)
 1814408:	18c00017 	ldw	r3,0(r3)
 181440c:	18c000c3 	ldbu	r3,3(r3)
 1814410:	18c03fcc 	andi	r3,r3,255
 1814414:	1806963a 	slli	r3,r3,24
 1814418:	20c6b03a 	or	r3,r4,r3
 181441c:	10c00035 	stwio	r3,0(r2)
			((int)((unsigned char) ethernetif->ethaddr->addr[0]) |
					(int)((unsigned char) ethernetif->ethaddr->addr[1] <<  8) |
					(int)((unsigned char) ethernetif->ethaddr->addr[2] << 16) |
					(int)((unsigned char) ethernetif->ethaddr->addr[3] << 24)));

	IOWR_ALTERA_TSEMAC_MAC_1(mi_base,
 1814420:	e0bffa17 	ldw	r2,-24(fp)
 1814424:	10800404 	addi	r2,r2,16
 1814428:	e0ffff17 	ldw	r3,-4(fp)
 181442c:	18c00017 	ldw	r3,0(r3)
 1814430:	18c00103 	ldbu	r3,4(r3)
 1814434:	19003fcc 	andi	r4,r3,255
 1814438:	e0ffff17 	ldw	r3,-4(fp)
 181443c:	18c00017 	ldw	r3,0(r3)
 1814440:	18c00143 	ldbu	r3,5(r3)
 1814444:	18c03fcc 	andi	r3,r3,255
 1814448:	1806923a 	slli	r3,r3,8
 181444c:	20c6b03a 	or	r3,r4,r3
 1814450:	18ffffcc 	andi	r3,r3,65535
 1814454:	10c00035 	stwio	r3,0(r2)
			(((int)((unsigned char) ethernetif->ethaddr->addr[4]) |
					(int)((unsigned char) ethernetif->ethaddr->addr[5] <<  8)) & 0xFFFF));

	/* enable MAC */
	dat = ALTERA_TSEMAC_CMD_TX_ENA_MSK       |
 1814458:	00810034 	movhi	r2,1024
 181445c:	108080c4 	addi	r2,r2,515
 1814460:	e0bff315 	stw	r2,-52(fp)
			ALTERA_TSEMAC_CMD_LOOPBACK_MSK     |     // promiscuous mode
#endif
			ALTERA_TSEMAC_CMD_TX_ADDR_INS_MSK  |
			ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */

	if ((result & ALT_TSE_E_AN_NOT_COMPLETE) == 0)
 1814464:	e0bffb17 	ldw	r2,-20(fp)
 1814468:	1080022c 	andhi	r2,r2,8
 181446c:	1000461e 	bne	r2,zero,1814588 <tse_mac_init+0x6c0>
	{
		speed = (result >> 1) & 0x07;
 1814470:	e0bffb17 	ldw	r2,-20(fp)
 1814474:	1005d07a 	srai	r2,r2,1
 1814478:	108001cc 	andi	r2,r2,7
 181447c:	e0bffc15 	stw	r2,-16(fp)
		duplex = result & 0x01;
 1814480:	e0bffb17 	ldw	r2,-20(fp)
 1814484:	1080004c 	andi	r2,r2,1
 1814488:	e0bff415 	stw	r2,-48(fp)

		/* 1000 Mbps */
		if(speed == 0x01)
 181448c:	e0bffc17 	ldw	r2,-16(fp)
 1814490:	10800058 	cmpnei	r2,r2,1
 1814494:	1000121e 	bne	r2,zero,18144e0 <tse_mac_init+0x618>
		{
			dat |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 1814498:	e0bff317 	ldw	r2,-52(fp)
 181449c:	10800214 	ori	r2,r2,8
 18144a0:	e0bff315 	stw	r2,-52(fp)
			dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 18144a4:	e0fff317 	ldw	r3,-52(fp)
 18144a8:	00bf8034 	movhi	r2,65024
 18144ac:	10bfffc4 	addi	r2,r2,-1
 18144b0:	1884703a 	and	r2,r3,r2
 18144b4:	e0bff315 	stw	r2,-52(fp)
			tse[iface].ethernetif->link_speed = 1000;
 18144b8:	008061b4 	movhi	r2,390
 18144bc:	10875604 	addi	r2,r2,7512
 18144c0:	e0fffe17 	ldw	r3,-8(fp)
 18144c4:	18c00924 	muli	r3,r3,36
 18144c8:	10c5883a 	add	r2,r2,r3
 18144cc:	10800604 	addi	r2,r2,24
 18144d0:	10800017 	ldw	r2,0(r2)
 18144d4:	00c0fa04 	movi	r3,1000
 18144d8:	10c00315 	stw	r3,12(r2)
 18144dc:	00003306 	br	18145ac <tse_mac_init+0x6e4>
		}
		/* 100 Mbps */
		else if(speed == 0x02)
 18144e0:	e0bffc17 	ldw	r2,-16(fp)
 18144e4:	10800098 	cmpnei	r2,r2,2
 18144e8:	1000131e 	bne	r2,zero,1814538 <tse_mac_init+0x670>
		{
			dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 18144ec:	e0fff317 	ldw	r3,-52(fp)
 18144f0:	00bffdc4 	movi	r2,-9
 18144f4:	1884703a 	and	r2,r3,r2
 18144f8:	e0bff315 	stw	r2,-52(fp)
			dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 18144fc:	e0fff317 	ldw	r3,-52(fp)
 1814500:	00bf8034 	movhi	r2,65024
 1814504:	10bfffc4 	addi	r2,r2,-1
 1814508:	1884703a 	and	r2,r3,r2
 181450c:	e0bff315 	stw	r2,-52(fp)
			tse[iface].ethernetif->link_speed = 100;
 1814510:	008061b4 	movhi	r2,390
 1814514:	10875604 	addi	r2,r2,7512
 1814518:	e0fffe17 	ldw	r3,-8(fp)
 181451c:	18c00924 	muli	r3,r3,36
 1814520:	10c5883a 	add	r2,r2,r3
 1814524:	10800604 	addi	r2,r2,24
 1814528:	10800017 	ldw	r2,0(r2)
 181452c:	00c01904 	movi	r3,100
 1814530:	10c00315 	stw	r3,12(r2)
 1814534:	00001d06 	br	18145ac <tse_mac_init+0x6e4>
		}
		/* 10 Mbps */
		else if(speed == 0x04)
 1814538:	e0bffc17 	ldw	r2,-16(fp)
 181453c:	10800118 	cmpnei	r2,r2,4
 1814540:	10001a1e 	bne	r2,zero,18145ac <tse_mac_init+0x6e4>
		{
			dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 1814544:	e0fff317 	ldw	r3,-52(fp)
 1814548:	00bffdc4 	movi	r2,-9
 181454c:	1884703a 	and	r2,r3,r2
 1814550:	e0bff315 	stw	r2,-52(fp)
			dat |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 1814554:	e0bff317 	ldw	r2,-52(fp)
 1814558:	10808034 	orhi	r2,r2,512
 181455c:	e0bff315 	stw	r2,-52(fp)
			tse[iface].ethernetif->link_speed = 10;
 1814560:	008061b4 	movhi	r2,390
 1814564:	10875604 	addi	r2,r2,7512
 1814568:	e0fffe17 	ldw	r3,-8(fp)
 181456c:	18c00924 	muli	r3,r3,36
 1814570:	10c5883a 	add	r2,r2,r3
 1814574:	10800604 	addi	r2,r2,24
 1814578:	10800017 	ldw	r2,0(r2)
 181457c:	00c00284 	movi	r3,10
 1814580:	10c00315 	stw	r3,12(r2)
 1814584:	00000906 	br	18145ac <tse_mac_init+0x6e4>
		}
	}
	/* default to 100 Mbps if returned invalid speed */
	else
	{
		dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 1814588:	e0fff317 	ldw	r3,-52(fp)
 181458c:	00bffdc4 	movi	r2,-9
 1814590:	1884703a 	and	r2,r3,r2
 1814594:	e0bff315 	stw	r2,-52(fp)
		dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 1814598:	e0fff317 	ldw	r3,-52(fp)
 181459c:	00bf8034 	movhi	r2,65024
 18145a0:	10bfffc4 	addi	r2,r2,-1
 18145a4:	1884703a 	and	r2,r3,r2
 18145a8:	e0bff315 	stw	r2,-52(fp)
	}

	/* Half Duplex */
	if(duplex == TSE_PHY_DUPLEX_HALF)
 18145ac:	e0bff417 	ldw	r2,-48(fp)
 18145b0:	10000c1e 	bne	r2,zero,18145e4 <tse_mac_init+0x71c>
	{
		dat |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 18145b4:	e0bff317 	ldw	r2,-52(fp)
 18145b8:	10810014 	ori	r2,r2,1024
 18145bc:	e0bff315 	stw	r2,-52(fp)
		tse[iface].ethernetif->full_duplex = 0;
 18145c0:	008061b4 	movhi	r2,390
 18145c4:	10875604 	addi	r2,r2,7512
 18145c8:	e0fffe17 	ldw	r3,-8(fp)
 18145cc:	18c00924 	muli	r3,r3,36
 18145d0:	10c5883a 	add	r2,r2,r3
 18145d4:	10800604 	addi	r2,r2,24
 18145d8:	10800017 	ldw	r2,0(r2)
 18145dc:	10000415 	stw	zero,16(r2)
 18145e0:	00000d06 	br	1814618 <tse_mac_init+0x750>
	}
	/* Full Duplex */
	else
	{
		dat &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 18145e4:	e0fff317 	ldw	r3,-52(fp)
 18145e8:	00beffc4 	movi	r2,-1025
 18145ec:	1884703a 	and	r2,r3,r2
 18145f0:	e0bff315 	stw	r2,-52(fp)
		tse[iface].ethernetif->full_duplex = 1;
 18145f4:	008061b4 	movhi	r2,390
 18145f8:	10875604 	addi	r2,r2,7512
 18145fc:	e0fffe17 	ldw	r3,-8(fp)
 1814600:	18c00924 	muli	r3,r3,36
 1814604:	10c5883a 	add	r2,r2,r3
 1814608:	10800604 	addi	r2,r2,24
 181460c:	10800017 	ldw	r2,0(r2)
 1814610:	00c00044 	movi	r3,1
 1814614:	10c00415 	stw	r3,16(r2)
	}

	IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
 1814618:	008061b4 	movhi	r2,390
 181461c:	10875604 	addi	r2,r2,7512
 1814620:	e0fffe17 	ldw	r3,-8(fp)
 1814624:	18c00924 	muli	r3,r3,36
 1814628:	10c5883a 	add	r2,r2,r3
 181462c:	10800017 	ldw	r2,0(r2)
 1814630:	10800204 	addi	r2,r2,8
 1814634:	e0fff317 	ldw	r3,-52(fp)
 1814638:	10c00035 	stwio	r3,0(r2)
	dprintf(("\nMAC post-initialization: CMD_CONFIG=0x%08x\n",
			IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base)));

	alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma,
 181463c:	008061b4 	movhi	r2,390
 1814640:	10875604 	addi	r2,r2,7512
 1814644:	e0fffe17 	ldw	r3,-8(fp)
 1814648:	18c00924 	muli	r3,r3,36
 181464c:	10c5883a 	add	r2,r2,r3
 1814650:	10800204 	addi	r2,r2,8
 1814654:	11000017 	ldw	r4,0(r2)
#ifndef ALTERA_TSE_IRQ_R
			(alt_avalon_sgdma_callback)&tse_sgdma_rx_isr,
#else
			(alt_avalon_sgdma_callback)&ALTERA_TSE_IRQ_R,
#endif
			(alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,(void*)(&tse[iface]));
 1814658:	e0bffe17 	ldw	r2,-8(fp)
 181465c:	10c00924 	muli	r3,r2,36
 1814660:	008061b4 	movhi	r2,390
 1814664:	10875604 	addi	r2,r2,7512
 1814668:	1885883a 	add	r2,r3,r2

	IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
	dprintf(("\nMAC post-initialization: CMD_CONFIG=0x%08x\n",
			IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base)));

	alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma,
 181466c:	100f883a 	mov	r7,r2
 1814670:	01800604 	movi	r6,24
 1814674:	01406074 	movhi	r5,385
 1814678:	2951ee04 	addi	r5,r5,18360
 181467c:	182554c0 	call	182554c <alt_avalon_sgdma_register_callback>
#else
			(alt_avalon_sgdma_callback)&ALTERA_TSE_IRQ_R,
#endif
			(alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,(void*)(&tse[iface]));

	tse_sgdma_read_init(&tse[iface]);
 1814680:	e0bffe17 	ldw	r2,-8(fp)
 1814684:	10c00924 	muli	r3,r2,36
 1814688:	008061b4 	movhi	r2,390
 181468c:	10875604 	addi	r2,r2,7512
 1814690:	1885883a 	add	r2,r3,r2
 1814694:	1009883a 	mov	r4,r2
 1814698:	18147140 	call	1814714 <tse_sgdma_read_init>
	pmac_info = alt_tse_get_mac_info(mi_base);
 181469c:	e13ffa17 	ldw	r4,-24(fp)
 18146a0:	182cae00 	call	182cae0 <alt_tse_get_mac_info>
 18146a4:	e0bffd15 	stw	r2,-12(fp)
	alt_tse_phy_wr_mdio_addr(pmac_info->pphy_info, pmac_info->pphy_info->mdio_address);
 18146a8:	e0bffd17 	ldw	r2,-12(fp)
 18146ac:	10c00117 	ldw	r3,4(r2)
 18146b0:	e0bffd17 	ldw	r2,-12(fp)
 18146b4:	10800117 	ldw	r2,4(r2)
 18146b8:	10800003 	ldbu	r2,0(r2)
 18146bc:	10803fcc 	andi	r2,r2,255
 18146c0:	100b883a 	mov	r5,r2
 18146c4:	1809883a 	mov	r4,r3
 18146c8:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
	ethernetif->link_alive = alt_tse_phy_rd_mdio_reg(pmac_info->pphy_info, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) != 0;// && (((IORD(&(mi_base->mdio1.reg10), 0) >> 4) & 0xF) <= 3);
 18146cc:	e0bffd17 	ldw	r2,-12(fp)
 18146d0:	10800117 	ldw	r2,4(r2)
 18146d4:	01c00044 	movi	r7,1
 18146d8:	01800144 	movi	r6,5
 18146dc:	01400044 	movi	r5,1
 18146e0:	1009883a 	mov	r4,r2
 18146e4:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 18146e8:	1004c03a 	cmpne	r2,r2,zero
 18146ec:	10c03fcc 	andi	r3,r2,255
 18146f0:	e0bfff17 	ldw	r2,-4(fp)
 18146f4:	10c00215 	stw	r3,8(r2)
	return ethernetif->link_alive;
 18146f8:	e0bfff17 	ldw	r2,-4(fp)
 18146fc:	10800217 	ldw	r2,8(r2)
}
 1814700:	e037883a 	mov	sp,fp
 1814704:	dfc00117 	ldw	ra,4(sp)
 1814708:	df000017 	ldw	fp,0(sp)
 181470c:	dec00204 	addi	sp,sp,8
 1814710:	f800283a 	ret

01814714 <tse_sgdma_read_init>:
 * 
 * @API TYPE - Internal
 * @return SUCCESS on success 
 */
int tse_sgdma_read_init(lwip_tse_info* tse_ptr)
{     
 1814714:	defffb04 	addi	sp,sp,-20
 1814718:	dfc00415 	stw	ra,16(sp)
 181471c:	df000315 	stw	fp,12(sp)
 1814720:	df000304 	addi	fp,sp,12
 1814724:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;
 1814728:	e0bfff17 	ldw	r2,-4(fp)
 181472c:	10800617 	ldw	r2,24(r2)
 1814730:	e0bffe15 	stw	r2,-8(fp)

	alt_avalon_sgdma_construct_stream_to_mem_desc(
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
 1814734:	e0bfff17 	ldw	r2,-4(fp)
 1814738:	10800517 	ldw	r2,20(r2)
{     
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;

	alt_avalon_sgdma_construct_stream_to_mem_desc(
 181473c:	11001004 	addi	r4,r2,64
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
 1814740:	e0bfff17 	ldw	r2,-4(fp)
 1814744:	10800517 	ldw	r2,20(r2)
{     
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;

	alt_avalon_sgdma_construct_stream_to_mem_desc(
 1814748:	11401804 	addi	r5,r2,96
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
			(alt_u32 *) ethernetif->lwipRxPbuf[tse_ptr->ethernetif->lwipRxIndexIsr]->payload,          // starting write_address
 181474c:	e0bfff17 	ldw	r2,-4(fp)
 1814750:	10800617 	ldw	r2,24(r2)
 1814754:	10801317 	ldw	r2,76(r2)
 1814758:	e0fffe17 	ldw	r3,-8(fp)
 181475c:	108001c4 	addi	r2,r2,7
 1814760:	1085883a 	add	r2,r2,r2
 1814764:	1085883a 	add	r2,r2,r2
 1814768:	1885883a 	add	r2,r3,r2
 181476c:	10800017 	ldw	r2,0(r2)
 1814770:	10800117 	ldw	r2,4(r2)
{     
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;

	alt_avalon_sgdma_construct_stream_to_mem_desc(
 1814774:	d8000015 	stw	zero,0(sp)
 1814778:	000f883a 	mov	r7,zero
 181477c:	100d883a 	mov	r6,r2
 1814780:	18253680 	call	1825368 <alt_avalon_sgdma_construct_stream_to_mem_desc>
			0,                                  // read until EOP
			0);          // don't write to constant address

	dprintf(("[tse_sgdma_read_init] RX descriptor chain desc (%d depth) created\n",0));

	tse_mac_aRxRead( &tse_ptr->mi, &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
 1814784:	e0ffff17 	ldw	r3,-4(fp)
 1814788:	e0bfff17 	ldw	r2,-4(fp)
 181478c:	10800517 	ldw	r2,20(r2)
 1814790:	10801004 	addi	r2,r2,64
 1814794:	100b883a 	mov	r5,r2
 1814798:	1809883a 	mov	r4,r3
 181479c:	182b9dc0 	call	182b9dc <tse_mac_aRxRead>

	return SUCCESS;
 18147a0:	0005883a 	mov	r2,zero
}
 18147a4:	e037883a 	mov	sp,fp
 18147a8:	dfc00117 	ldw	ra,4(sp)
 18147ac:	df000017 	ldw	fp,0(sp)
 18147b0:	dec00204 	addi	sp,sp,8
 18147b4:	f800283a 	ret

018147b8 <tse_sgdma_rx_isr>:
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
int tse_sgdma_rx_isr(void * context, __unused u_long intnum)
{
 18147b8:	defffb04 	addi	sp,sp,-20
 18147bc:	dfc00415 	stw	ra,16(sp)
 18147c0:	df000315 	stw	fp,12(sp)
 18147c4:	df000304 	addi	fp,sp,12
 18147c8:	e13ffe15 	stw	r4,-8(fp)
 18147cc:	e17fff15 	stw	r5,-4(fp)
	lwip_tse_info* tse_ptr = (lwip_tse_info *) context;
 18147d0:	e0bffe17 	ldw	r2,-8(fp)
 18147d4:	e0bffd15 	stw	r2,-12(fp)

	IOWR_ALTERA_AVALON_SGDMA_CONTROL(&tse_ptr->mi.rx_sgdma->base,ALTERA_AVALON_SGDMA_CONTROL_CLEAR_INTERRUPT_MSK);
 18147d8:	e0bffd17 	ldw	r2,-12(fp)
 18147dc:	10800217 	ldw	r2,8(r2)
 18147e0:	10800304 	addi	r2,r2,12
 18147e4:	10800404 	addi	r2,r2,16
 18147e8:	00e00034 	movhi	r3,32768
 18147ec:	10c00035 	stwio	r3,0(r2)

	// process the newly received data and cycle to the next free pbuf for receive
	tse_mac_rcv(tse_ptr->ethernetif);
 18147f0:	e0bffd17 	ldw	r2,-12(fp)
 18147f4:	10800617 	ldw	r2,24(r2)
 18147f8:	1009883a 	mov	r4,r2
 18147fc:	18149ac0 	call	18149ac <tse_mac_rcv>

	// start a new async read transaction
	tse_mac_aRxRead( &tse_ptr->mi, &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
 1814800:	e0fffd17 	ldw	r3,-12(fp)
 1814804:	e0bffd17 	ldw	r2,-12(fp)
 1814808:	10800517 	ldw	r2,20(r2)
 181480c:	10801004 	addi	r2,r2,64
 1814810:	100b883a 	mov	r5,r2
 1814814:	1809883a 	mov	r4,r3
 1814818:	182b9dc0 	call	182b9dc <tse_mac_aRxRead>

	IOWR_ALTERA_AVALON_SGDMA_CONTROL(&tse_ptr->mi.rx_sgdma->base, ALTERA_TSE_SGDMA_INTR_MASK);
 181481c:	e0bffd17 	ldw	r2,-12(fp)
 1814820:	10800217 	ldw	r2,8(r2)
 1814824:	10800304 	addi	r2,r2,12
 1814828:	10800404 	addi	r2,r2,16
 181482c:	00c00604 	movi	r3,24
 1814830:	10c00035 	stwio	r3,0(r2)

	return SUCCESS;
 1814834:	0005883a 	mov	r2,zero
}
 1814838:	e037883a 	mov	sp,fp
 181483c:	dfc00117 	ldw	ra,4(sp)
 1814840:	df000017 	ldw	fp,0(sp)
 1814844:	dec00204 	addi	sp,sp,8
 1814848:	f800283a 	ret

0181484c <tse_mac_raw_send>:
 * @param  data - pointer to the data payload
 * @param  data_bytes - number of bytes of the data payload to be sent to the MAC
 * @return SUCCESS if success, else a negative value
 */
err_t tse_mac_raw_send(struct netif *netif, struct pbuf *pkt)
{
 181484c:	defe6a04 	addi	sp,sp,-1624
 1814850:	dfc19515 	stw	ra,1620(sp)
 1814854:	df019415 	stw	fp,1616(sp)
 1814858:	df019404 	addi	fp,sp,1616
 181485c:	e13ffe15 	stw	r4,-8(fp)
 1814860:	e17fff15 	stw	r5,-4(fp)
	alt_u32			   *ActualData;

	/* Intermediate buffers used for temporary copy of frames that cannot be directrly DMA'ed*/
	char buf2[1560];

	ethernetif = netif->state;
 1814864:	e0bffe17 	ldw	r2,-8(fp)
 1814868:	10800917 	ldw	r2,36(r2)
 181486c:	e0be7215 	stw	r2,-1592(fp)
	tse_ptr = ethernetif->tse_info;
 1814870:	e0be7217 	ldw	r2,-1592(fp)
 1814874:	10801717 	ldw	r2,92(r2)
 1814878:	e0be7315 	stw	r2,-1588(fp)
	mi = &tse_ptr->mi;
 181487c:	e0be7317 	ldw	r2,-1588(fp)
 1814880:	e0be7415 	stw	r2,-1584(fp)

	for(p = pkt; p != NULL; p = p->next)
 1814884:	e0bfff17 	ldw	r2,-4(fp)
 1814888:	e0be7015 	stw	r2,-1600(fp)
 181488c:	00003806 	br	1814970 <tse_mac_raw_send+0x124>
	{
		data = p->payload;
 1814890:	e0be7017 	ldw	r2,-1600(fp)
 1814894:	10800117 	ldw	r2,4(r2)
 1814898:	e0be7115 	stw	r2,-1596(fp)
		len = p->len;
 181489c:	e0be7017 	ldw	r2,-1600(fp)
 18148a0:	1080028b 	ldhu	r2,10(r2)
 18148a4:	10bfffcc 	andi	r2,r2,65535
 18148a8:	e0be7515 	stw	r2,-1580(fp)

		// just in case we have an unaligned buffer, this should never occur
		if(((unsigned long)data & 0x03) != 0)
 18148ac:	e0be7117 	ldw	r2,-1596(fp)
 18148b0:	108000cc 	andi	r2,r2,3
 18148b4:	10000726 	beq	r2,zero,18148d4 <tse_mac_raw_send+0x88>
			/*
			 * Copy data to temporary buffer <buf2>. This is done because of alignment
			 * issues. The SGDMA cannot copy the data directly from (data + ETH_PAD_SIZE)
			 * because it needs a 32-bit aligned address space.
			 */
			memcpy(buf2,data,len);
 18148b8:	e0be7804 	addi	r2,fp,-1568
 18148bc:	e1be7517 	ldw	r6,-1580(fp)
 18148c0:	e17e7117 	ldw	r5,-1596(fp)
 18148c4:	1009883a 	mov	r4,r2
 18148c8:	180604c0 	call	180604c <memcpy>
			data = (alt_u32 *)buf2;
 18148cc:	e0be7804 	addi	r2,fp,-1568
 18148d0:	e0be7115 	stw	r2,-1596(fp)
		}

		// uncache the ethernet frame
		ActualData = (void*)(((alt_u32)data));
 18148d4:	e0be7117 	ldw	r2,-1596(fp)
 18148d8:	e0be7615 	stw	r2,-1576(fp)

		/* Write data to Tx FIFO using the DMA */
		alt_avalon_sgdma_construct_mem_to_stream_desc(
 18148dc:	e0be7317 	ldw	r2,-1588(fp)
 18148e0:	11000517 	ldw	r4,20(r2)
				(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST], // descriptor I want to work with
				(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_TX_SGDMA_DESC_OFST],// pointer to "next"
 18148e4:	e0be7317 	ldw	r2,-1588(fp)
 18148e8:	10800517 	ldw	r2,20(r2)

		// uncache the ethernet frame
		ActualData = (void*)(((alt_u32)data));

		/* Write data to Tx FIFO using the DMA */
		alt_avalon_sgdma_construct_mem_to_stream_desc(
 18148ec:	11400804 	addi	r5,r2,32
 18148f0:	e0be7517 	ldw	r2,-1580(fp)
 18148f4:	11bfffcc 	andi	r6,r2,65535
 18148f8:	e0fe7017 	ldw	r3,-1600(fp)
 18148fc:	e0bfff17 	ldw	r2,-4(fp)
 1814900:	1885003a 	cmpeq	r2,r3,r2
 1814904:	10803fcc 	andi	r2,r2,255
				(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_TX_SGDMA_DESC_OFST],// pointer to "next"
				(alt_u32*)ActualData,                    // starting read address
				(len),                                   // # bytes
				0,                                       // don't read from constant address
				p == pkt,                                // generate sop
				p->next == NULL,                         // generate endofpacket signal
 1814908:	e0fe7017 	ldw	r3,-1600(fp)
 181490c:	18c00017 	ldw	r3,0(r3)

		// uncache the ethernet frame
		ActualData = (void*)(((alt_u32)data));

		/* Write data to Tx FIFO using the DMA */
		alt_avalon_sgdma_construct_mem_to_stream_desc(
 1814910:	1807003a 	cmpeq	r3,r3,zero
 1814914:	18c03fcc 	andi	r3,r3,255
 1814918:	d8000315 	stw	zero,12(sp)
 181491c:	d8c00215 	stw	r3,8(sp)
 1814920:	d8800115 	stw	r2,4(sp)
 1814924:	d8000015 	stw	zero,0(sp)
 1814928:	300f883a 	mov	r7,r6
 181492c:	e1be7617 	ldw	r6,-1576(fp)
 1814930:	18254400 	call	1825440 <alt_avalon_sgdma_construct_mem_to_stream_desc>
				0,                                       // don't read from constant address
				p == pkt,                                // generate sop
				p->next == NULL,                         // generate endofpacket signal
				0);                                      // atlantic channel (don't know/don't care: set to 0)

		tx_length = tse_mac_sTxWrite(mi,&tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST]);
 1814934:	e0be7317 	ldw	r2,-1588(fp)
 1814938:	10800517 	ldw	r2,20(r2)
 181493c:	100b883a 	mov	r5,r2
 1814940:	e13e7417 	ldw	r4,-1584(fp)
 1814944:	182b8f80 	call	182b8f8 <tse_mac_sTxWrite>
 1814948:	e0be7715 	stw	r2,-1572(fp)

		if (tx_length != p->len)
			dprintf(("failed to send all bytes, send %d out of %d\r\n", tx_length, p->len));

		ethernetif->bytes_sent += tx_length;
 181494c:	e0be7217 	ldw	r2,-1592(fp)
 1814950:	10c00517 	ldw	r3,20(r2)
 1814954:	e0be7717 	ldw	r2,-1572(fp)
 1814958:	1887883a 	add	r3,r3,r2
 181495c:	e0be7217 	ldw	r2,-1592(fp)
 1814960:	10c00515 	stw	r3,20(r2)

	ethernetif = netif->state;
	tse_ptr = ethernetif->tse_info;
	mi = &tse_ptr->mi;

	for(p = pkt; p != NULL; p = p->next)
 1814964:	e0be7017 	ldw	r2,-1600(fp)
 1814968:	10800017 	ldw	r2,0(r2)
 181496c:	e0be7015 	stw	r2,-1600(fp)
 1814970:	e0be7017 	ldw	r2,-1600(fp)
 1814974:	103fc61e 	bne	r2,zero,1814890 <__alt_mem_mem_0+0xff7f4890>
			dprintf(("failed to send all bytes, send %d out of %d\r\n", tx_length, p->len));

		ethernetif->bytes_sent += tx_length;
	}

	LINK_STATS_INC(link.xmit);
 1814978:	008061f4 	movhi	r2,391
 181497c:	10a77104 	addi	r2,r2,-25148
 1814980:	10800017 	ldw	r2,0(r2)
 1814984:	10c00044 	addi	r3,r2,1
 1814988:	008061f4 	movhi	r2,391
 181498c:	10a77104 	addi	r2,r2,-25148
 1814990:	10c00015 	stw	r3,0(r2)

	return ERR_OK;
 1814994:	0005883a 	mov	r2,zero
}
 1814998:	e037883a 	mov	sp,fp
 181499c:	dfc00117 	ldw	ra,4(sp)
 18149a0:	df000017 	ldw	fp,0(sp)
 18149a4:	dec00204 	addi	sp,sp,8
 18149a8:	f800283a 	ret

018149ac <tse_mac_rcv>:
 * 
 * @API TYPE        - callback internal function
 * @return SUCCESS on success
 */
int tse_mac_rcv(struct ethernetif *ethernetif)
{
 18149ac:	defff704 	addi	sp,sp,-36
 18149b0:	dfc00815 	stw	ra,32(sp)
 18149b4:	df000715 	stw	fp,28(sp)
 18149b8:	df000704 	addi	fp,sp,28
 18149bc:	e13fff15 	stw	r4,-4(fp)
#if LWIP_RECEIVE_SEMAPHORE
	signed portBASE_TYPE switch_context = 0;
 18149c0:	e03ffe15 	stw	zero,-8(fp)
	int pklen;
	lwip_tse_info* tse_ptr;
	alt_u32 *uncached_packet_payload;
	struct pbuf *p;

	tse_ptr = ethernetif->tse_info;
 18149c4:	e0bfff17 	ldw	r2,-4(fp)
 18149c8:	10801717 	ldw	r2,92(r2)
 18149cc:	e0bffa15 	stw	r2,-24(fp)
	pklen = IORD_16DIRECT(&(tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST].actual_bytes_transferred),0);
 18149d0:	e0bffa17 	ldw	r2,-24(fp)
 18149d4:	10800517 	ldw	r2,20(r2)
 18149d8:	10801004 	addi	r2,r2,64
 18149dc:	10800704 	addi	r2,r2,28
 18149e0:	1080002b 	ldhuio	r2,0(r2)
 18149e4:	10bfffcc 	andi	r2,r2,65535
 18149e8:	e0bffb15 	stw	r2,-20(fp)
	p = ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr];
 18149ec:	e0bfff17 	ldw	r2,-4(fp)
 18149f0:	10801317 	ldw	r2,76(r2)
 18149f4:	e0ffff17 	ldw	r3,-4(fp)
 18149f8:	108001c4 	addi	r2,r2,7
 18149fc:	1085883a 	add	r2,r2,r2
 1814a00:	1085883a 	add	r2,r2,r2
 1814a04:	1885883a 	add	r2,r3,r2
 1814a08:	10800017 	ldw	r2,0(r2)
 1814a0c:	e0bffc15 	stw	r2,-16(fp)
	p->tot_len = pklen;
 1814a10:	e0bffb17 	ldw	r2,-20(fp)
 1814a14:	1007883a 	mov	r3,r2
 1814a18:	e0bffc17 	ldw	r2,-16(fp)
 1814a1c:	10c0020d 	sth	r3,8(r2)
	p->len = pklen;
 1814a20:	e0bffb17 	ldw	r2,-20(fp)
 1814a24:	1007883a 	mov	r3,r2
 1814a28:	e0bffc17 	ldw	r2,-16(fp)
 1814a2c:	10c0028d 	sth	r3,10(r2)
	if ((IORD_ALTERA_TSE_SGDMA_DESC_STATUS(&tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]) & ( ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_CRC_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_PARITY_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK )) == 0)
 1814a30:	e0bffa17 	ldw	r2,-24(fp)
 1814a34:	10800517 	ldw	r2,20(r2)
 1814a38:	10801704 	addi	r2,r2,92
 1814a3c:	10800037 	ldwio	r2,0(r2)
 1814a40:	1005d43a 	srai	r2,r2,16
 1814a44:	10801fcc 	andi	r2,r2,127
 1814a48:	10002d1e 	bne	r2,zero,1814b00 <tse_mac_rcv+0x154>
	{
		enh_alt_irq_disable_all();
 1814a4c:	1826c780 	call	1826c78 <enh_alt_irq_disable_all>

		if (++ethernetif->lwipRxCount >= LWIP_RX_ETH_BUFFER)
 1814a50:	e0bfff17 	ldw	r2,-4(fp)
 1814a54:	10801517 	ldw	r2,84(r2)
 1814a58:	10800044 	addi	r2,r2,1
 1814a5c:	e0ffff17 	ldw	r3,-4(fp)
 1814a60:	18801515 	stw	r2,84(r3)
 1814a64:	10800310 	cmplti	r2,r2,12
 1814a68:	10000e1e 	bne	r2,zero,1814aa4 <tse_mac_rcv+0xf8>
		{
			LINK_STATS_INC(link.drop);
 1814a6c:	008061f4 	movhi	r2,391
 1814a70:	10a77104 	addi	r2,r2,-25148
 1814a74:	10800317 	ldw	r2,12(r2)
 1814a78:	10c00044 	addi	r3,r2,1
 1814a7c:	008061f4 	movhi	r2,391
 1814a80:	10a77104 	addi	r2,r2,-25148
 1814a84:	10c00315 	stw	r3,12(r2)
			--ethernetif->lwipRxCount;
 1814a88:	e0bfff17 	ldw	r2,-4(fp)
 1814a8c:	10801517 	ldw	r2,84(r2)
 1814a90:	10ffffc4 	addi	r3,r2,-1
 1814a94:	e0bfff17 	ldw	r2,-4(fp)
 1814a98:	10c01515 	stw	r3,84(r2)

			enh_alt_irq_enable_all();
 1814a9c:	1826cc80 	call	1826cc8 <enh_alt_irq_enable_all>
 1814aa0:	00001706 	br	1814b00 <tse_mac_rcv+0x154>

			dprintf(("No free buffers for RX on iface: %hhd\n", ethernetif->iface));
		}
		else
		{
			ethernetif->bytes_recv += pklen;
 1814aa4:	e0bfff17 	ldw	r2,-4(fp)
 1814aa8:	10c00617 	ldw	r3,24(r2)
 1814aac:	e0bffb17 	ldw	r2,-20(fp)
 1814ab0:	1887883a 	add	r3,r3,r2
 1814ab4:	e0bfff17 	ldw	r2,-4(fp)
 1814ab8:	10c00615 	stw	r3,24(r2)

			//  Set up DMA for the next pbuf in the buffer
			if (++ethernetif->lwipRxIndexIsr >= LWIP_RX_ETH_BUFFER)
 1814abc:	e0bfff17 	ldw	r2,-4(fp)
 1814ac0:	10801317 	ldw	r2,76(r2)
 1814ac4:	10800044 	addi	r2,r2,1
 1814ac8:	e0ffff17 	ldw	r3,-4(fp)
 1814acc:	18801315 	stw	r2,76(r3)
 1814ad0:	10800310 	cmplti	r2,r2,12
 1814ad4:	1000021e 	bne	r2,zero,1814ae0 <tse_mac_rcv+0x134>
				ethernetif->lwipRxIndexIsr = 0;
 1814ad8:	e0bfff17 	ldw	r2,-4(fp)
 1814adc:	10001315 	stw	zero,76(r2)

			enh_alt_irq_enable_all();
 1814ae0:	1826cc80 	call	1826cc8 <enh_alt_irq_enable_all>

#if LWIP_RECEIVE_SEMAPHORE
			// we can't use the LwIP sys_signal_sem since this can't be used in an ISR
			// release the semaphore and check if a task with a higher priority then the current one is waiting for it
			xSemaphoreGiveFromISR(ethernetif->tse_info->rx_semaphore, &switch_context);
 1814ae4:	e0bfff17 	ldw	r2,-4(fp)
 1814ae8:	10801717 	ldw	r2,92(r2)
 1814aec:	10800817 	ldw	r2,32(r2)
 1814af0:	e0fffe04 	addi	r3,fp,-8
 1814af4:	180b883a 	mov	r5,r3
 1814af8:	1009883a 	mov	r4,r2
 1814afc:	180dcd40 	call	180dcd4 <xQueueGiveFromISR>
#endif
		}
	}

	uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
 1814b00:	e0bfff17 	ldw	r2,-4(fp)
 1814b04:	10801317 	ldw	r2,76(r2)
 1814b08:	e0ffff17 	ldw	r3,-4(fp)
 1814b0c:	108001c4 	addi	r2,r2,7
 1814b10:	1085883a 	add	r2,r2,r2
 1814b14:	1085883a 	add	r2,r2,r2
 1814b18:	1885883a 	add	r2,r3,r2
 1814b1c:	10800017 	ldw	r2,0(r2)
 1814b20:	10800117 	ldw	r2,4(r2)
 1814b24:	e0bffd15 	stw	r2,-12(fp)
	alt_avalon_sgdma_construct_stream_to_mem_desc(
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],	// descriptor I want to work with
 1814b28:	e0bffa17 	ldw	r2,-24(fp)
 1814b2c:	10800517 	ldw	r2,20(r2)
#endif
		}
	}

	uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
	alt_avalon_sgdma_construct_stream_to_mem_desc(
 1814b30:	10c01004 	addi	r3,r2,64
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],	// descriptor I want to work with
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
 1814b34:	e0bffa17 	ldw	r2,-24(fp)
 1814b38:	10800517 	ldw	r2,20(r2)
#endif
		}
	}

	uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
	alt_avalon_sgdma_construct_stream_to_mem_desc(
 1814b3c:	10801804 	addi	r2,r2,96
 1814b40:	d8000015 	stw	zero,0(sp)
 1814b44:	000f883a 	mov	r7,zero
 1814b48:	e1bffd17 	ldw	r6,-12(fp)
 1814b4c:	100b883a 	mov	r5,r2
 1814b50:	1809883a 	mov	r4,r3
 1814b54:	18253680 	call	1825368 <alt_avalon_sgdma_construct_stream_to_mem_desc>
			0,                                  											// read until EOP
			0);          																	// don't write to constant address

#if LWIP_RECEIVE_SEMAPHORE
	// if it's waiting we will force a context switch so this task will run right away
	portEND_SWITCHING_ISR(switch_context);
 1814b58:	e0bffe17 	ldw	r2,-8(fp)
 1814b5c:	10000126 	beq	r2,zero,1814b64 <tse_mac_rcv+0x1b8>
 1814b60:	180fe7c0 	call	180fe7c <vTaskSwitchContext>
#endif

	return ERR_OK;
 1814b64:	0005883a 	mov	r2,zero
}
 1814b68:	e037883a 	mov	sp,fp
 1814b6c:	dfc00117 	ldw	ra,4(sp)
 1814b70:	df000017 	ldw	fp,0(sp)
 1814b74:	dec00204 	addi	sp,sp,8
 1814b78:	f800283a 	ret

01814b7c <sys_init>:
#include <lwip/err.h>
#include <lwip/stats.h>

// LwIP FreeRTOS port
void sys_init(void)
{
 1814b7c:	deffff04 	addi	sp,sp,-4
 1814b80:	df000015 	stw	fp,0(sp)
 1814b84:	d839883a 	mov	fp,sp
	return;
 1814b88:	0001883a 	nop
}
 1814b8c:	e037883a 	mov	sp,fp
 1814b90:	df000017 	ldw	fp,0(sp)
 1814b94:	dec00104 	addi	sp,sp,4
 1814b98:	f800283a 	ret

01814b9c <sys_now>:

u32_t sys_now(void)
{
 1814b9c:	defffb04 	addi	sp,sp,-20
 1814ba0:	dfc00415 	stw	ra,16(sp)
 1814ba4:	df000315 	stw	fp,12(sp)
 1814ba8:	dc000215 	stw	r16,8(sp)
 1814bac:	df000304 	addi	fp,sp,12
	struct timeval tv;
	gettimeofday(&tv, NULL);
 1814bb0:	000b883a 	mov	r5,zero
 1814bb4:	e13ffd04 	addi	r4,fp,-12
 1814bb8:	182766c0 	call	182766c <gettimeofday>

	return ((tv.tv_sec * 1000) + (tv.tv_usec / 1000));
 1814bbc:	e0bffd17 	ldw	r2,-12(fp)
 1814bc0:	1400fa24 	muli	r16,r2,1000
 1814bc4:	e0bffe17 	ldw	r2,-8(fp)
 1814bc8:	0140fa04 	movi	r5,1000
 1814bcc:	1009883a 	mov	r4,r2
 1814bd0:	180abd80 	call	180abd8 <__divsi3>
 1814bd4:	8085883a 	add	r2,r16,r2
}
 1814bd8:	e6ffff04 	addi	sp,fp,-4
 1814bdc:	dfc00217 	ldw	ra,8(sp)
 1814be0:	df000117 	ldw	fp,4(sp)
 1814be4:	dc000017 	ldw	r16,0(sp)
 1814be8:	dec00304 	addi	sp,sp,12
 1814bec:	f800283a 	ret

01814bf0 <sys_sem_new>:
/**
 * Creates and returns a new semaphore. The "count" argument specifies
 * the initial state of the semaphore.
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 1814bf0:	defffc04 	addi	sp,sp,-16
 1814bf4:	dfc00315 	stw	ra,12(sp)
 1814bf8:	df000215 	stw	fp,8(sp)
 1814bfc:	df000204 	addi	fp,sp,8
 1814c00:	e13ffe15 	stw	r4,-8(fp)
 1814c04:	2805883a 	mov	r2,r5
 1814c08:	e0bfff05 	stb	r2,-4(fp)
	// count 0 means a binary semaphore so max value should be 1
	*sem = xSemaphoreCreateCounting((count ? count : 1), count);
 1814c0c:	e0bfff03 	ldbu	r2,-4(fp)
 1814c10:	10000226 	beq	r2,zero,1814c1c <sys_sem_new+0x2c>
 1814c14:	e0bfff03 	ldbu	r2,-4(fp)
 1814c18:	00000106 	br	1814c20 <sys_sem_new+0x30>
 1814c1c:	00800044 	movi	r2,1
 1814c20:	e0ffff03 	ldbu	r3,-4(fp)
 1814c24:	180b883a 	mov	r5,r3
 1814c28:	1009883a 	mov	r4,r2
 1814c2c:	180d9d40 	call	180d9d4 <xQueueCreateCountingSemaphore>
 1814c30:	1007883a 	mov	r3,r2
 1814c34:	e0bffe17 	ldw	r2,-8(fp)
 1814c38:	10c00015 	stw	r3,0(r2)

	if (*sem == NULL) {
 1814c3c:	e0bffe17 	ldw	r2,-8(fp)
 1814c40:	10800017 	ldw	r2,0(r2)
 1814c44:	1000091e 	bne	r2,zero,1814c6c <sys_sem_new+0x7c>
		SYS_STATS_INC(sem.err);
 1814c48:	008061f4 	movhi	r2,391
 1814c4c:	10a77104 	addi	r2,r2,-25148
 1814c50:	10809617 	ldw	r2,600(r2)
 1814c54:	10c00044 	addi	r3,r2,1
 1814c58:	008061f4 	movhi	r2,391
 1814c5c:	10a77104 	addi	r2,r2,-25148
 1814c60:	10c09615 	stw	r3,600(r2)
		return ERR_MEM;  // TBD need assert
 1814c64:	00bfffc4 	movi	r2,-1
 1814c68:	00001506 	br	1814cc0 <sys_sem_new+0xd0>
	}

	SYS_STATS_INC_USED(sem);
 1814c6c:	008061f4 	movhi	r2,391
 1814c70:	10a77104 	addi	r2,r2,-25148
 1814c74:	10809417 	ldw	r2,592(r2)
 1814c78:	10c00044 	addi	r3,r2,1
 1814c7c:	008061f4 	movhi	r2,391
 1814c80:	10a77104 	addi	r2,r2,-25148
 1814c84:	10c09415 	stw	r3,592(r2)
 1814c88:	008061f4 	movhi	r2,391
 1814c8c:	10a77104 	addi	r2,r2,-25148
 1814c90:	10c09517 	ldw	r3,596(r2)
 1814c94:	008061f4 	movhi	r2,391
 1814c98:	10a77104 	addi	r2,r2,-25148
 1814c9c:	10809417 	ldw	r2,592(r2)
 1814ca0:	1880062e 	bgeu	r3,r2,1814cbc <sys_sem_new+0xcc>
 1814ca4:	008061f4 	movhi	r2,391
 1814ca8:	10a77104 	addi	r2,r2,-25148
 1814cac:	10c09417 	ldw	r3,592(r2)
 1814cb0:	008061f4 	movhi	r2,391
 1814cb4:	10a77104 	addi	r2,r2,-25148
 1814cb8:	10c09515 	stw	r3,596(r2)

	return ERR_OK;
 1814cbc:	0005883a 	mov	r2,zero
}
 1814cc0:	e037883a 	mov	sp,fp
 1814cc4:	dfc00117 	ldw	ra,4(sp)
 1814cc8:	df000017 	ldw	fp,0(sp)
 1814ccc:	dec00204 	addi	sp,sp,8
 1814cd0:	f800283a 	ret

01814cd4 <sys_sem_free>:

/**
 * Deallocates a semaphore.
 */
void sys_sem_free(sys_sem_t *sem)
{
 1814cd4:	defffd04 	addi	sp,sp,-12
 1814cd8:	dfc00215 	stw	ra,8(sp)
 1814cdc:	df000115 	stw	fp,4(sp)
 1814ce0:	df000104 	addi	fp,sp,4
 1814ce4:	e13fff15 	stw	r4,-4(fp)
	vQueueDelete(*sem);
 1814ce8:	e0bfff17 	ldw	r2,-4(fp)
 1814cec:	10800017 	ldw	r2,0(r2)
 1814cf0:	1009883a 	mov	r4,r2
 1814cf4:	180e5440 	call	180e544 <vQueueDelete>

	SYS_STATS_DEC(sem.used);
 1814cf8:	008061f4 	movhi	r2,391
 1814cfc:	10a77104 	addi	r2,r2,-25148
 1814d00:	10809417 	ldw	r2,592(r2)
 1814d04:	10ffffc4 	addi	r3,r2,-1
 1814d08:	008061f4 	movhi	r2,391
 1814d0c:	10a77104 	addi	r2,r2,-25148
 1814d10:	10c09415 	stw	r3,592(r2)
}
 1814d14:	0001883a 	nop
 1814d18:	e037883a 	mov	sp,fp
 1814d1c:	dfc00117 	ldw	ra,4(sp)
 1814d20:	df000017 	ldw	fp,0(sp)
 1814d24:	dec00204 	addi	sp,sp,8
 1814d28:	f800283a 	ret

01814d2c <sys_sem_signal>:

/**
 * Signals a semaphore.
 */
void sys_sem_signal(sys_sem_t *sem)
{
 1814d2c:	defffd04 	addi	sp,sp,-12
 1814d30:	dfc00215 	stw	ra,8(sp)
 1814d34:	df000115 	stw	fp,4(sp)
 1814d38:	df000104 	addi	fp,sp,4
 1814d3c:	e13fff15 	stw	r4,-4(fp)
	xSemaphoreGive(*sem);
 1814d40:	e0bfff17 	ldw	r2,-4(fp)
 1814d44:	10800017 	ldw	r2,0(r2)
 1814d48:	000f883a 	mov	r7,zero
 1814d4c:	000d883a 	mov	r6,zero
 1814d50:	000b883a 	mov	r5,zero
 1814d54:	1009883a 	mov	r4,r2
 1814d58:	180da2c0 	call	180da2c <xQueueGenericSend>
}
 1814d5c:	0001883a 	nop
 1814d60:	e037883a 	mov	sp,fp
 1814d64:	dfc00117 	ldw	ra,4(sp)
 1814d68:	df000017 	ldw	fp,0(sp)
 1814d6c:	dec00204 	addi	sp,sp,8
 1814d70:	f800283a 	ret

01814d74 <sys_arch_sem_wait>:
 *
 * Notice that lwIP implements a function with a similar name,
 * sys_sem_wait(), that uses the sys_arch_sem_wait() function.
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 1814d74:	defff904 	addi	sp,sp,-28
 1814d78:	dfc00615 	stw	ra,24(sp)
 1814d7c:	df000515 	stw	fp,20(sp)
 1814d80:	df000504 	addi	fp,sp,20
 1814d84:	e13ffe15 	stw	r4,-8(fp)
 1814d88:	e17fff15 	stw	r5,-4(fp)
	portTickType nStartTime, nEndTime, nElapsed;

	nStartTime = xTaskGetTickCount();
 1814d8c:	180fa440 	call	180fa44 <xTaskGetTickCount>
 1814d90:	e0bffc15 	stw	r2,-16(fp)

	if (timeout != 0)
 1814d94:	e0bfff17 	ldw	r2,-4(fp)
 1814d98:	10001526 	beq	r2,zero,1814df0 <sys_arch_sem_wait+0x7c>
	{
		if (xSemaphoreTake(*sem, timeout) == pdTRUE)
 1814d9c:	e0bffe17 	ldw	r2,-8(fp)
 1814da0:	10800017 	ldw	r2,0(r2)
 1814da4:	e17fff17 	ldw	r5,-4(fp)
 1814da8:	1009883a 	mov	r4,r2
 1814dac:	180df580 	call	180df58 <xQueueSemaphoreTake>
 1814db0:	10800058 	cmpnei	r2,r2,1
 1814db4:	10000c1e 	bne	r2,zero,1814de8 <sys_arch_sem_wait+0x74>
		{
			nEndTime = xTaskGetTickCount();
 1814db8:	180fa440 	call	180fa44 <xTaskGetTickCount>
 1814dbc:	e0bffd15 	stw	r2,-12(fp)
			nElapsed = nEndTime - nStartTime;
 1814dc0:	e0fffd17 	ldw	r3,-12(fp)
 1814dc4:	e0bffc17 	ldw	r2,-16(fp)
 1814dc8:	1885c83a 	sub	r2,r3,r2
 1814dcc:	e0bffb15 	stw	r2,-20(fp)

			if (nElapsed == 0)
 1814dd0:	e0bffb17 	ldw	r2,-20(fp)
 1814dd4:	1000021e 	bne	r2,zero,1814de0 <sys_arch_sem_wait+0x6c>
				nElapsed = 1;
 1814dd8:	00800044 	movi	r2,1
 1814ddc:	e0bffb15 	stw	r2,-20(fp)

			return nElapsed; // return time blocked TBD test
 1814de0:	e0bffb17 	ldw	r2,-20(fp)
 1814de4:	00001506 	br	1814e3c <sys_arch_sem_wait+0xc8>
		}
		else
			return SYS_ARCH_TIMEOUT;
 1814de8:	00bfffc4 	movi	r2,-1
 1814dec:	00001306 	br	1814e3c <sys_arch_sem_wait+0xc8>
	}
	else // must block without a timeout
	{
		while (xSemaphoreTake(*sem, 10000) != pdTRUE);
 1814df0:	0001883a 	nop
 1814df4:	e0bffe17 	ldw	r2,-8(fp)
 1814df8:	10800017 	ldw	r2,0(r2)
 1814dfc:	0149c404 	movi	r5,10000
 1814e00:	1009883a 	mov	r4,r2
 1814e04:	180df580 	call	180df58 <xQueueSemaphoreTake>
 1814e08:	10800058 	cmpnei	r2,r2,1
 1814e0c:	103ff91e 	bne	r2,zero,1814df4 <__alt_mem_mem_0+0xff7f4df4>

		nEndTime = xTaskGetTickCount();
 1814e10:	180fa440 	call	180fa44 <xTaskGetTickCount>
 1814e14:	e0bffd15 	stw	r2,-12(fp)
		nElapsed = nEndTime - nStartTime;
 1814e18:	e0fffd17 	ldw	r3,-12(fp)
 1814e1c:	e0bffc17 	ldw	r2,-16(fp)
 1814e20:	1885c83a 	sub	r2,r3,r2
 1814e24:	e0bffb15 	stw	r2,-20(fp)
		if( nElapsed == 0 )
 1814e28:	e0bffb17 	ldw	r2,-20(fp)
 1814e2c:	1000021e 	bne	r2,zero,1814e38 <sys_arch_sem_wait+0xc4>
			nElapsed = 1;
 1814e30:	00800044 	movi	r2,1
 1814e34:	e0bffb15 	stw	r2,-20(fp)

		return nElapsed; // return time blocked
 1814e38:	e0bffb17 	ldw	r2,-20(fp)
	}
}
 1814e3c:	e037883a 	mov	sp,fp
 1814e40:	dfc00117 	ldw	ra,4(sp)
 1814e44:	df000017 	ldw	fp,0(sp)
 1814e48:	dec00204 	addi	sp,sp,8
 1814e4c:	f800283a 	ret

01814e50 <sys_mutex_new>:
#if ! LWIP_COMPAT_MUTEX
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
 1814e50:	defffd04 	addi	sp,sp,-12
 1814e54:	dfc00215 	stw	ra,8(sp)
 1814e58:	df000115 	stw	fp,4(sp)
 1814e5c:	df000104 	addi	fp,sp,4
 1814e60:	e13fff15 	stw	r4,-4(fp)
	*mutex = xSemaphoreCreateMutex();
 1814e64:	01000044 	movi	r4,1
 1814e68:	180d84c0 	call	180d84c <xQueueCreateMutex>
 1814e6c:	1007883a 	mov	r3,r2
 1814e70:	e0bfff17 	ldw	r2,-4(fp)
 1814e74:	10c00015 	stw	r3,0(r2)

	if (!*mutex) {
 1814e78:	e0bfff17 	ldw	r2,-4(fp)
 1814e7c:	10800017 	ldw	r2,0(r2)
 1814e80:	1000091e 	bne	r2,zero,1814ea8 <sys_mutex_new+0x58>
		SYS_STATS_INC(mutex.err);
 1814e84:	008061f4 	movhi	r2,391
 1814e88:	10a77104 	addi	r2,r2,-25148
 1814e8c:	10809917 	ldw	r2,612(r2)
 1814e90:	10c00044 	addi	r3,r2,1
 1814e94:	008061f4 	movhi	r2,391
 1814e98:	10a77104 	addi	r2,r2,-25148
 1814e9c:	10c09915 	stw	r3,612(r2)
		return ERR_MEM;
 1814ea0:	00bfffc4 	movi	r2,-1
 1814ea4:	00001506 	br	1814efc <sys_mutex_new+0xac>
	}

	SYS_STATS_INC_USED(mutex);
 1814ea8:	008061f4 	movhi	r2,391
 1814eac:	10a77104 	addi	r2,r2,-25148
 1814eb0:	10809717 	ldw	r2,604(r2)
 1814eb4:	10c00044 	addi	r3,r2,1
 1814eb8:	008061f4 	movhi	r2,391
 1814ebc:	10a77104 	addi	r2,r2,-25148
 1814ec0:	10c09715 	stw	r3,604(r2)
 1814ec4:	008061f4 	movhi	r2,391
 1814ec8:	10a77104 	addi	r2,r2,-25148
 1814ecc:	10c09817 	ldw	r3,608(r2)
 1814ed0:	008061f4 	movhi	r2,391
 1814ed4:	10a77104 	addi	r2,r2,-25148
 1814ed8:	10809717 	ldw	r2,604(r2)
 1814edc:	1880062e 	bgeu	r3,r2,1814ef8 <sys_mutex_new+0xa8>
 1814ee0:	008061f4 	movhi	r2,391
 1814ee4:	10a77104 	addi	r2,r2,-25148
 1814ee8:	10c09717 	ldw	r3,604(r2)
 1814eec:	008061f4 	movhi	r2,391
 1814ef0:	10a77104 	addi	r2,r2,-25148
 1814ef4:	10c09815 	stw	r3,608(r2)

	return ERR_OK;
 1814ef8:	0005883a 	mov	r2,zero
}
 1814efc:	e037883a 	mov	sp,fp
 1814f00:	dfc00117 	ldw	ra,4(sp)
 1814f04:	df000017 	ldw	fp,0(sp)
 1814f08:	dec00204 	addi	sp,sp,8
 1814f0c:	f800283a 	ret

01814f10 <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock */
void sys_mutex_lock(sys_mutex_t *mutex)
{
 1814f10:	defffd04 	addi	sp,sp,-12
 1814f14:	dfc00215 	stw	ra,8(sp)
 1814f18:	df000115 	stw	fp,4(sp)
 1814f1c:	df000104 	addi	fp,sp,4
 1814f20:	e13fff15 	stw	r4,-4(fp)
	// wait on mutex forever
	while (xSemaphoreTake(*mutex, 10000) != pdTRUE);
 1814f24:	0001883a 	nop
 1814f28:	e0bfff17 	ldw	r2,-4(fp)
 1814f2c:	10800017 	ldw	r2,0(r2)
 1814f30:	0149c404 	movi	r5,10000
 1814f34:	1009883a 	mov	r4,r2
 1814f38:	180df580 	call	180df58 <xQueueSemaphoreTake>
 1814f3c:	10800058 	cmpnei	r2,r2,1
 1814f40:	103ff91e 	bne	r2,zero,1814f28 <__alt_mem_mem_0+0xff7f4f28>
}
 1814f44:	0001883a 	nop
 1814f48:	e037883a 	mov	sp,fp
 1814f4c:	dfc00117 	ldw	ra,4(sp)
 1814f50:	df000017 	ldw	fp,0(sp)
 1814f54:	dec00204 	addi	sp,sp,8
 1814f58:	f800283a 	ret

01814f5c <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 1814f5c:	defffd04 	addi	sp,sp,-12
 1814f60:	dfc00215 	stw	ra,8(sp)
 1814f64:	df000115 	stw	fp,4(sp)
 1814f68:	df000104 	addi	fp,sp,4
 1814f6c:	e13fff15 	stw	r4,-4(fp)
	xSemaphoreGive(*mutex);
 1814f70:	e0bfff17 	ldw	r2,-4(fp)
 1814f74:	10800017 	ldw	r2,0(r2)
 1814f78:	000f883a 	mov	r7,zero
 1814f7c:	000d883a 	mov	r6,zero
 1814f80:	000b883a 	mov	r5,zero
 1814f84:	1009883a 	mov	r4,r2
 1814f88:	180da2c0 	call	180da2c <xQueueGenericSend>
}
 1814f8c:	0001883a 	nop
 1814f90:	e037883a 	mov	sp,fp
 1814f94:	dfc00117 	ldw	ra,4(sp)
 1814f98:	df000017 	ldw	fp,0(sp)
 1814f9c:	dec00204 	addi	sp,sp,8
 1814fa0:	f800283a 	ret

01814fa4 <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete */
void sys_mutex_free(sys_mutex_t *mutex)
{
 1814fa4:	defffd04 	addi	sp,sp,-12
 1814fa8:	dfc00215 	stw	ra,8(sp)
 1814fac:	df000115 	stw	fp,4(sp)
 1814fb0:	df000104 	addi	fp,sp,4
 1814fb4:	e13fff15 	stw	r4,-4(fp)
	vQueueDelete(*mutex);
 1814fb8:	e0bfff17 	ldw	r2,-4(fp)
 1814fbc:	10800017 	ldw	r2,0(r2)
 1814fc0:	1009883a 	mov	r4,r2
 1814fc4:	180e5440 	call	180e544 <vQueueDelete>
	SYS_STATS_DEC(mutex.used);
 1814fc8:	008061f4 	movhi	r2,391
 1814fcc:	10a77104 	addi	r2,r2,-25148
 1814fd0:	10809717 	ldw	r2,604(r2)
 1814fd4:	10ffffc4 	addi	r3,r2,-1
 1814fd8:	008061f4 	movhi	r2,391
 1814fdc:	10a77104 	addi	r2,r2,-25148
 1814fe0:	10c09715 	stw	r3,604(r2)
}
 1814fe4:	0001883a 	nop
 1814fe8:	e037883a 	mov	sp,fp
 1814fec:	dfc00117 	ldw	ra,4(sp)
 1814ff0:	df000017 	ldw	fp,0(sp)
 1814ff4:	dec00204 	addi	sp,sp,8
 1814ff8:	f800283a 	ret

01814ffc <sys_mbox_new>:
 * in mailboxes are pointers. You have to define macros "_MBOX_SIZE"
 * in your lwipopts.h, or ignore this parameter in your implementation
 * and use a default size.
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 1814ffc:	defffc04 	addi	sp,sp,-16
 1815000:	dfc00315 	stw	ra,12(sp)
 1815004:	df000215 	stw	fp,8(sp)
 1815008:	df000204 	addi	fp,sp,8
 181500c:	e13ffe15 	stw	r4,-8(fp)
 1815010:	e17fff15 	stw	r5,-4(fp)
	*mbox = xQueueCreate(size, sizeof(void *)); // XXX correct? We are posting pointers so I guess it is...
 1815014:	e0bfff17 	ldw	r2,-4(fp)
 1815018:	000d883a 	mov	r6,zero
 181501c:	01400104 	movi	r5,4
 1815020:	1009883a 	mov	r4,r2
 1815024:	180d6c40 	call	180d6c4 <xQueueGenericCreate>
 1815028:	1007883a 	mov	r3,r2
 181502c:	e0bffe17 	ldw	r2,-8(fp)
 1815030:	10c00015 	stw	r3,0(r2)

	if (!*mbox) {
 1815034:	e0bffe17 	ldw	r2,-8(fp)
 1815038:	10800017 	ldw	r2,0(r2)
 181503c:	1000091e 	bne	r2,zero,1815064 <sys_mbox_new+0x68>
		SYS_STATS_INC(mbox.err);
 1815040:	008061f4 	movhi	r2,391
 1815044:	10a77104 	addi	r2,r2,-25148
 1815048:	10809c17 	ldw	r2,624(r2)
 181504c:	10c00044 	addi	r3,r2,1
 1815050:	008061f4 	movhi	r2,391
 1815054:	10a77104 	addi	r2,r2,-25148
 1815058:	10c09c15 	stw	r3,624(r2)
		return ERR_MEM;
 181505c:	00bfffc4 	movi	r2,-1
 1815060:	00001506 	br	18150b8 <sys_mbox_new+0xbc>
	}

	SYS_STATS_INC_USED(mbox);
 1815064:	008061f4 	movhi	r2,391
 1815068:	10a77104 	addi	r2,r2,-25148
 181506c:	10809a17 	ldw	r2,616(r2)
 1815070:	10c00044 	addi	r3,r2,1
 1815074:	008061f4 	movhi	r2,391
 1815078:	10a77104 	addi	r2,r2,-25148
 181507c:	10c09a15 	stw	r3,616(r2)
 1815080:	008061f4 	movhi	r2,391
 1815084:	10a77104 	addi	r2,r2,-25148
 1815088:	10c09b17 	ldw	r3,620(r2)
 181508c:	008061f4 	movhi	r2,391
 1815090:	10a77104 	addi	r2,r2,-25148
 1815094:	10809a17 	ldw	r2,616(r2)
 1815098:	1880062e 	bgeu	r3,r2,18150b4 <sys_mbox_new+0xb8>
 181509c:	008061f4 	movhi	r2,391
 18150a0:	10a77104 	addi	r2,r2,-25148
 18150a4:	10c09a17 	ldw	r3,616(r2)
 18150a8:	008061f4 	movhi	r2,391
 18150ac:	10a77104 	addi	r2,r2,-25148
 18150b0:	10c09b15 	stw	r3,620(r2)

	return ERR_OK;
 18150b4:	0005883a 	mov	r2,zero
}
 18150b8:	e037883a 	mov	sp,fp
 18150bc:	dfc00117 	ldw	ra,4(sp)
 18150c0:	df000017 	ldw	fp,0(sp)
 18150c4:	dec00204 	addi	sp,sp,8
 18150c8:	f800283a 	ret

018150cc <sys_mbox_free>:
 * Deallocates a mailbox. If there are messages still present in the
 * mailbox when the mailbox is deallocated, it is an indication of a
 * programming error in lwIP and the developer should be notified.
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
 18150cc:	defffd04 	addi	sp,sp,-12
 18150d0:	dfc00215 	stw	ra,8(sp)
 18150d4:	df000115 	stw	fp,4(sp)
 18150d8:	df000104 	addi	fp,sp,4
 18150dc:	e13fff15 	stw	r4,-4(fp)
	if (uxQueueMessagesWaiting(*mbox))
 18150e0:	e0bfff17 	ldw	r2,-4(fp)
 18150e4:	10800017 	ldw	r2,0(r2)
 18150e8:	1009883a 	mov	r4,r2
 18150ec:	180e4780 	call	180e478 <uxQueueMessagesWaiting>
 18150f0:	10000126 	beq	r2,zero,18150f8 <sys_mbox_free+0x2c>
	{
		// Line for breakpoint.  Should never break here!
		__asm__ __volatile__ ( "nop" );
 18150f4:	0001883a 	nop
	}

	vQueueDelete(*mbox);
 18150f8:	e0bfff17 	ldw	r2,-4(fp)
 18150fc:	10800017 	ldw	r2,0(r2)
 1815100:	1009883a 	mov	r4,r2
 1815104:	180e5440 	call	180e544 <vQueueDelete>

	SYS_STATS_DEC(mbox.used);
 1815108:	008061f4 	movhi	r2,391
 181510c:	10a77104 	addi	r2,r2,-25148
 1815110:	10809a17 	ldw	r2,616(r2)
 1815114:	10ffffc4 	addi	r3,r2,-1
 1815118:	008061f4 	movhi	r2,391
 181511c:	10a77104 	addi	r2,r2,-25148
 1815120:	10c09a15 	stw	r3,616(r2)
}
 1815124:	0001883a 	nop
 1815128:	e037883a 	mov	sp,fp
 181512c:	dfc00117 	ldw	ra,4(sp)
 1815130:	df000017 	ldw	fp,0(sp)
 1815134:	dec00204 	addi	sp,sp,8
 1815138:	f800283a 	ret

0181513c <sys_mbox_post>:
/**
 * Posts the "msg" to the mailbox. This function have to block until
 * the "msg" is really posted.
 */
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 181513c:	defffc04 	addi	sp,sp,-16
 1815140:	dfc00315 	stw	ra,12(sp)
 1815144:	df000215 	stw	fp,8(sp)
 1815148:	df000204 	addi	fp,sp,8
 181514c:	e13ffe15 	stw	r4,-8(fp)
 1815150:	e17fff15 	stw	r5,-4(fp)
	xQueueSend(*mbox, &data, (portTickType)(archPOST_BLOCK_TIME_MS / portTICK_RATE_MS));
 1815154:	e0bffe17 	ldw	r2,-8(fp)
 1815158:	10800017 	ldw	r2,0(r2)
 181515c:	e0ffff04 	addi	r3,fp,-4
 1815160:	000f883a 	mov	r7,zero
 1815164:	0189c404 	movi	r6,10000
 1815168:	180b883a 	mov	r5,r3
 181516c:	1009883a 	mov	r4,r2
 1815170:	180da2c0 	call	180da2c <xQueueGenericSend>
}
 1815174:	0001883a 	nop
 1815178:	e037883a 	mov	sp,fp
 181517c:	dfc00117 	ldw	ra,4(sp)
 1815180:	df000017 	ldw	fp,0(sp)
 1815184:	dec00204 	addi	sp,sp,8
 1815188:	f800283a 	ret

0181518c <sys_mbox_trypost>:
/**
 * Try to post the "msg" to the mailbox. Returns ERR_MEM if this one
 * is full, else, ERR_OK if the "msg" is posted.
 */
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *data)
{
 181518c:	defffc04 	addi	sp,sp,-16
 1815190:	dfc00315 	stw	ra,12(sp)
 1815194:	df000215 	stw	fp,8(sp)
 1815198:	df000204 	addi	fp,sp,8
 181519c:	e13ffe15 	stw	r4,-8(fp)
 18151a0:	e17fff15 	stw	r5,-4(fp)
	return (xQueueSend(*mbox, &data, 0) == pdTRUE) ? ERR_OK : ERR_MEM;
 18151a4:	e0bffe17 	ldw	r2,-8(fp)
 18151a8:	10800017 	ldw	r2,0(r2)
 18151ac:	e0ffff04 	addi	r3,fp,-4
 18151b0:	000f883a 	mov	r7,zero
 18151b4:	000d883a 	mov	r6,zero
 18151b8:	180b883a 	mov	r5,r3
 18151bc:	1009883a 	mov	r4,r2
 18151c0:	180da2c0 	call	180da2c <xQueueGenericSend>
 18151c4:	10800058 	cmpnei	r2,r2,1
 18151c8:	1000021e 	bne	r2,zero,18151d4 <sys_mbox_trypost+0x48>
 18151cc:	0005883a 	mov	r2,zero
 18151d0:	00000106 	br	18151d8 <sys_mbox_trypost+0x4c>
 18151d4:	00bfffc4 	movi	r2,-1
}
 18151d8:	e037883a 	mov	sp,fp
 18151dc:	dfc00117 	ldw	ra,4(sp)
 18151e0:	df000017 	ldw	fp,0(sp)
 18151e4:	dec00204 	addi	sp,sp,8
 18151e8:	f800283a 	ret

018151ec <sys_arch_mbox_fetch>:
 *
 * Note that a function with a similar name, sys_mbox_fetch(), is
 * implemented by lwIP.
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 18151ec:	defff704 	addi	sp,sp,-36
 18151f0:	dfc00815 	stw	ra,32(sp)
 18151f4:	df000715 	stw	fp,28(sp)
 18151f8:	df000704 	addi	fp,sp,28
 18151fc:	e13ffd15 	stw	r4,-12(fp)
 1815200:	e17ffe15 	stw	r5,-8(fp)
 1815204:	e1bfff15 	stw	r6,-4(fp)
	void *dummyptr;
	portTickType nStartTime, nEndTime, nElapsed;

	nStartTime = xTaskGetTickCount();
 1815208:	180fa440 	call	180fa44 <xTaskGetTickCount>
 181520c:	e0bffa15 	stw	r2,-24(fp)

	if (msg == NULL)
 1815210:	e0bffe17 	ldw	r2,-8(fp)
 1815214:	1000021e 	bne	r2,zero,1815220 <sys_arch_mbox_fetch+0x34>
		msg = &dummyptr;
 1815218:	e0bffc04 	addi	r2,fp,-16
 181521c:	e0bffe15 	stw	r2,-8(fp)

	if (timeout != 0)
 1815220:	e0bfff17 	ldw	r2,-4(fp)
 1815224:	10001826 	beq	r2,zero,1815288 <sys_arch_mbox_fetch+0x9c>
	{
		if (pdTRUE == xQueueReceive(*mbox, msg, timeout))
 1815228:	e0bffd17 	ldw	r2,-12(fp)
 181522c:	10800017 	ldw	r2,0(r2)
 1815230:	e1bfff17 	ldw	r6,-4(fp)
 1815234:	e17ffe17 	ldw	r5,-8(fp)
 1815238:	1009883a 	mov	r4,r2
 181523c:	180ddb00 	call	180ddb0 <xQueueReceive>
 1815240:	10800058 	cmpnei	r2,r2,1
 1815244:	10000c1e 	bne	r2,zero,1815278 <sys_arch_mbox_fetch+0x8c>
		{
			nEndTime = xTaskGetTickCount();
 1815248:	180fa440 	call	180fa44 <xTaskGetTickCount>
 181524c:	e0bffb15 	stw	r2,-20(fp)
			nElapsed = nEndTime - nStartTime;
 1815250:	e0fffb17 	ldw	r3,-20(fp)
 1815254:	e0bffa17 	ldw	r2,-24(fp)
 1815258:	1885c83a 	sub	r2,r3,r2
 181525c:	e0bff915 	stw	r2,-28(fp)

			if (nElapsed == 0)
 1815260:	e0bff917 	ldw	r2,-28(fp)
 1815264:	1000021e 	bne	r2,zero,1815270 <sys_arch_mbox_fetch+0x84>
				nElapsed = 1;
 1815268:	00800044 	movi	r2,1
 181526c:	e0bff915 	stw	r2,-28(fp)

			return nElapsed;
 1815270:	e0bff917 	ldw	r2,-28(fp)
 1815274:	00001806 	br	18152d8 <sys_arch_mbox_fetch+0xec>
		}
		else // timed out blocking for message
		{
			*msg = NULL;
 1815278:	e0bffe17 	ldw	r2,-8(fp)
 181527c:	10000015 	stw	zero,0(r2)
			return SYS_ARCH_TIMEOUT;
 1815280:	00bfffc4 	movi	r2,-1
 1815284:	00001406 	br	18152d8 <sys_arch_mbox_fetch+0xec>
		}
	}
	else // block forever for a message.
	{
		// wait on message forever
		while (pdTRUE != xQueueReceive(*mbox, msg, 10000));
 1815288:	0001883a 	nop
 181528c:	e0bffd17 	ldw	r2,-12(fp)
 1815290:	10800017 	ldw	r2,0(r2)
 1815294:	0189c404 	movi	r6,10000
 1815298:	e17ffe17 	ldw	r5,-8(fp)
 181529c:	1009883a 	mov	r4,r2
 18152a0:	180ddb00 	call	180ddb0 <xQueueReceive>
 18152a4:	10800058 	cmpnei	r2,r2,1
 18152a8:	103ff81e 	bne	r2,zero,181528c <__alt_mem_mem_0+0xff7f528c>

		nEndTime = xTaskGetTickCount();
 18152ac:	180fa440 	call	180fa44 <xTaskGetTickCount>
 18152b0:	e0bffb15 	stw	r2,-20(fp)
		nElapsed = nEndTime - nStartTime;
 18152b4:	e0fffb17 	ldw	r3,-20(fp)
 18152b8:	e0bffa17 	ldw	r2,-24(fp)
 18152bc:	1885c83a 	sub	r2,r3,r2
 18152c0:	e0bff915 	stw	r2,-28(fp)

		if (nElapsed == 0)
 18152c4:	e0bff917 	ldw	r2,-28(fp)
 18152c8:	1000021e 	bne	r2,zero,18152d4 <sys_arch_mbox_fetch+0xe8>
			nElapsed = 1;
 18152cc:	00800044 	movi	r2,1
 18152d0:	e0bff915 	stw	r2,-28(fp)

		return nElapsed; // return time blocked TBD test
 18152d4:	e0bff917 	ldw	r2,-28(fp)
	}
}
 18152d8:	e037883a 	mov	sp,fp
 18152dc:	dfc00117 	ldw	ra,4(sp)
 18152e0:	df000017 	ldw	fp,0(sp)
 18152e4:	dec00204 	addi	sp,sp,8
 18152e8:	f800283a 	ret

018152ec <sys_arch_mbox_tryfetch>:
 * #define sys_arch_mbox_tryfetch(mbox,msg) \
 * 		sys_arch_mbox_fetch(mbox,msg,1)
 * although this would introduce unnecessary delays.
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 18152ec:	defffb04 	addi	sp,sp,-20
 18152f0:	dfc00415 	stw	ra,16(sp)
 18152f4:	df000315 	stw	fp,12(sp)
 18152f8:	df000304 	addi	fp,sp,12
 18152fc:	e13ffe15 	stw	r4,-8(fp)
 1815300:	e17fff15 	stw	r5,-4(fp)
	void *dummyptr;

	if (msg == NULL)
 1815304:	e0bfff17 	ldw	r2,-4(fp)
 1815308:	1000021e 	bne	r2,zero,1815314 <sys_arch_mbox_tryfetch+0x28>
		msg = &dummyptr;
 181530c:	e0bffd04 	addi	r2,fp,-12
 1815310:	e0bfff15 	stw	r2,-4(fp)

	return (pdTRUE == xQueueReceive(*mbox, msg, 0)) ? 0 : SYS_MBOX_EMPTY;
 1815314:	e0bffe17 	ldw	r2,-8(fp)
 1815318:	10800017 	ldw	r2,0(r2)
 181531c:	000d883a 	mov	r6,zero
 1815320:	e17fff17 	ldw	r5,-4(fp)
 1815324:	1009883a 	mov	r4,r2
 1815328:	180ddb00 	call	180ddb0 <xQueueReceive>
 181532c:	10800058 	cmpnei	r2,r2,1
 1815330:	1000021e 	bne	r2,zero,181533c <sys_arch_mbox_tryfetch+0x50>
 1815334:	0005883a 	mov	r2,zero
 1815338:	00000106 	br	1815340 <sys_arch_mbox_tryfetch+0x54>
 181533c:	00bfffc4 	movi	r2,-1
}
 1815340:	e037883a 	mov	sp,fp
 1815344:	dfc00117 	ldw	ra,4(sp)
 1815348:	df000017 	ldw	fp,0(sp)
 181534c:	dec00204 	addi	sp,sp,8
 1815350:	f800283a 	ret

01815354 <sys_thread_new>:
 * argument to the thread() function. The stack size to used for this thread is
 * the "stacksize" parameter. The id of the new thread is returned. Both the id
 * and the priority are system dependent.
 */
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio)
{
 1815354:	defff604 	addi	sp,sp,-40
 1815358:	dfc00915 	stw	ra,36(sp)
 181535c:	df000815 	stw	fp,32(sp)
 1815360:	df000804 	addi	fp,sp,32
 1815364:	e13ffc15 	stw	r4,-16(fp)
 1815368:	e17ffd15 	stw	r5,-12(fp)
 181536c:	e1bffe15 	stw	r6,-8(fp)
 1815370:	e1ffff15 	stw	r7,-4(fp)
	xTaskHandle objTask;
	int result = pdFAIL;
 1815374:	e03ffa15 	stw	zero,-24(fp)

	result = xTaskCreate(thread, (signed portCHAR*)name, stacksize, arg, prio, &objTask);
 1815378:	e13fff17 	ldw	r4,-4(fp)
 181537c:	e0800217 	ldw	r2,8(fp)
 1815380:	e0fffb04 	addi	r3,fp,-20
 1815384:	d8c00115 	stw	r3,4(sp)
 1815388:	d8800015 	stw	r2,0(sp)
 181538c:	e1fffe17 	ldw	r7,-8(fp)
 1815390:	200d883a 	mov	r6,r4
 1815394:	e17ffc17 	ldw	r5,-16(fp)
 1815398:	e13ffd17 	ldw	r4,-12(fp)
 181539c:	180eb680 	call	180eb68 <xTaskCreate>
 18153a0:	e0bffa15 	stw	r2,-24(fp)

	return (result == pdPASS) ? objTask : NULL;
 18153a4:	e0bffa17 	ldw	r2,-24(fp)
 18153a8:	10800058 	cmpnei	r2,r2,1
 18153ac:	1000021e 	bne	r2,zero,18153b8 <sys_thread_new+0x64>
 18153b0:	e0bffb17 	ldw	r2,-20(fp)
 18153b4:	00000106 	br	18153bc <sys_thread_new+0x68>
 18153b8:	0005883a 	mov	r2,zero
}
 18153bc:	e037883a 	mov	sp,fp
 18153c0:	dfc00117 	ldw	ra,4(sp)
 18153c4:	df000017 	ldw	fp,0(sp)
 18153c8:	dec00204 	addi	sp,sp,8
 18153cc:	f800283a 	ret

018153d0 <dhcp_clear_assignment>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_clear_assignment(struct netif *netif)
{
 18153d0:	defffd04 	addi	sp,sp,-12
 18153d4:	dfc00215 	stw	ra,8(sp)
 18153d8:	df000115 	stw	fp,4(sp)
 18153dc:	df000104 	addi	fp,sp,4
 18153e0:	e13fff15 	stw	r4,-4(fp)
  netif_set_down(netif);
 18153e4:	e13fff17 	ldw	r4,-4(fp)
 18153e8:	1819de00 	call	1819de0 <netif_set_down>
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
 18153ec:	d1600d04 	addi	r5,gp,-32716
 18153f0:	e13fff17 	ldw	r4,-4(fp)
 18153f4:	1819b4c0 	call	1819b4c <netif_set_ipaddr>
  netif_set_gw(netif, IP_ADDR_ANY);
 18153f8:	d1600d04 	addi	r5,gp,-32716
 18153fc:	e13fff17 	ldw	r4,-4(fp)
 1815400:	1819c740 	call	1819c74 <netif_set_gw>
  netif_set_netmask(netif, IP_ADDR_ANY); 
 1815404:	d1600d04 	addi	r5,gp,-32716
 1815408:	e13fff17 	ldw	r4,-4(fp)
 181540c:	1819cbc0 	call	1819cbc <netif_set_netmask>
}
 1815410:	0001883a 	nop
 1815414:	e037883a 	mov	sp,fp
 1815418:	dfc00117 	ldw	ra,4(sp)
 181541c:	df000017 	ldw	fp,0(sp)
 1815420:	dec00204 	addi	sp,sp,8
 1815424:	f800283a 	ret

01815428 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 1815428:	defffc04 	addi	sp,sp,-16
 181542c:	dfc00315 	stw	ra,12(sp)
 1815430:	df000215 	stw	fp,8(sp)
 1815434:	df000204 	addi	fp,sp,8
 1815438:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 181543c:	e0bfff17 	ldw	r2,-4(fp)
 1815440:	10800a17 	ldw	r2,40(r2)
 1815444:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Set the interface down since the address must no longer be used, as per RFC2131 */
  dhcp_clear_assignment(netif);
 1815448:	e13fff17 	ldw	r4,-4(fp)
 181544c:	18153d00 	call	18153d0 <dhcp_clear_assignment>
  /* Change to a defined state */
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
 1815450:	01400304 	movi	r5,12
 1815454:	e13ffe17 	ldw	r4,-8(fp)
 1815458:	181703c0 	call	181703c <dhcp_set_state>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 181545c:	e13fff17 	ldw	r4,-4(fp)
 1815460:	18165500 	call	1816550 <dhcp_discover>
}
 1815464:	0001883a 	nop
 1815468:	e037883a 	mov	sp,fp
 181546c:	dfc00117 	ldw	ra,4(sp)
 1815470:	df000017 	ldw	fp,0(sp)
 1815474:	dec00204 	addi	sp,sp,8
 1815478:	f800283a 	ret

0181547c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 181547c:	defffb04 	addi	sp,sp,-20
 1815480:	dfc00415 	stw	ra,16(sp)
 1815484:	df000315 	stw	fp,12(sp)
 1815488:	df000304 	addi	fp,sp,12
 181548c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1815490:	e0bfff17 	ldw	r2,-4(fp)
 1815494:	10800a17 	ldw	r2,40(r2)
 1815498:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_CHECKING);
 181549c:	01400204 	movi	r5,8
 18154a0:	e13ffd17 	ldw	r4,-12(fp)
 18154a4:	181703c0 	call	181703c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 18154a8:	e0bffd17 	ldw	r2,-12(fp)
 18154ac:	10800904 	addi	r2,r2,36
 18154b0:	000d883a 	mov	r6,zero
 18154b4:	100b883a 	mov	r5,r2
 18154b8:	e13fff17 	ldw	r4,-4(fp)
 18154bc:	1823ac40 	call	1823ac4 <etharp_query>
 18154c0:	e0bffe05 	stb	r2,-8(fp)
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  dhcp->tries++;
 18154c4:	e0bffd17 	ldw	r2,-12(fp)
 18154c8:	10800343 	ldbu	r2,13(r2)
 18154cc:	10800044 	addi	r2,r2,1
 18154d0:	1007883a 	mov	r3,r2
 18154d4:	e0bffd17 	ldw	r2,-12(fp)
 18154d8:	10c00345 	stb	r3,13(r2)
  msecs = 500;
 18154dc:	00807d04 	movi	r2,500
 18154e0:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 18154e4:	e0bffe8b 	ldhu	r2,-6(fp)
 18154e8:	10807cc4 	addi	r2,r2,499
 18154ec:	01407d04 	movi	r5,500
 18154f0:	1009883a 	mov	r4,r2
 18154f4:	180abd80 	call	180abd8 <__divsi3>
 18154f8:	1007883a 	mov	r3,r2
 18154fc:	e0bffd17 	ldw	r2,-12(fp)
 1815500:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 1815504:	0001883a 	nop
 1815508:	e037883a 	mov	sp,fp
 181550c:	dfc00117 	ldw	ra,4(sp)
 1815510:	df000017 	ldw	fp,0(sp)
 1815514:	dec00204 	addi	sp,sp,8
 1815518:	f800283a 	ret

0181551c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 181551c:	defffc04 	addi	sp,sp,-16
 1815520:	dfc00315 	stw	ra,12(sp)
 1815524:	df000215 	stw	fp,8(sp)
 1815528:	df000204 	addi	fp,sp,8
 181552c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1815530:	e0bfff17 	ldw	r2,-4(fp)
 1815534:	10800a17 	ldw	r2,40(r2)
 1815538:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 181553c:	008061b4 	movhi	r2,390
 1815540:	10875f04 	addi	r2,r2,7548
 1815544:	10800083 	ldbu	r2,2(r2)
 1815548:	10803fcc 	andi	r2,r2,255
 181554c:	10002826 	beq	r2,zero,18155f0 <dhcp_handle_offer+0xd4>
    ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 1815550:	008061b4 	movhi	r2,390
 1815554:	10876204 	addi	r2,r2,7560
 1815558:	10800217 	ldw	r2,8(r2)
 181555c:	1006d63a 	srli	r3,r2,24
 1815560:	008061b4 	movhi	r2,390
 1815564:	10876204 	addi	r2,r2,7560
 1815568:	10800217 	ldw	r2,8(r2)
 181556c:	1004d23a 	srli	r2,r2,8
 1815570:	10bfc00c 	andi	r2,r2,65280
 1815574:	1886b03a 	or	r3,r3,r2
 1815578:	008061b4 	movhi	r2,390
 181557c:	10876204 	addi	r2,r2,7560
 1815580:	10800217 	ldw	r2,8(r2)
 1815584:	10bfc00c 	andi	r2,r2,65280
 1815588:	1004923a 	slli	r2,r2,8
 181558c:	1886b03a 	or	r3,r3,r2
 1815590:	008061b4 	movhi	r2,390
 1815594:	10876204 	addi	r2,r2,7560
 1815598:	10800217 	ldw	r2,8(r2)
 181559c:	1004963a 	slli	r2,r2,24
 18155a0:	1886b03a 	or	r3,r3,r2
 18155a4:	e0bffe17 	ldw	r2,-8(fp)
 18155a8:	10c00815 	stw	r3,32(r2)
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->server_ip_addr)));
    /* remember offered address */
    ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 18155ac:	e0bffe17 	ldw	r2,-8(fp)
 18155b0:	10800217 	ldw	r2,8(r2)
 18155b4:	10c00403 	ldbu	r3,16(r2)
 18155b8:	11000443 	ldbu	r4,17(r2)
 18155bc:	2008923a 	slli	r4,r4,8
 18155c0:	20c6b03a 	or	r3,r4,r3
 18155c4:	11000483 	ldbu	r4,18(r2)
 18155c8:	2008943a 	slli	r4,r4,16
 18155cc:	20c6b03a 	or	r3,r4,r3
 18155d0:	108004c3 	ldbu	r2,19(r2)
 18155d4:	1004963a 	slli	r2,r2,24
 18155d8:	10c4b03a 	or	r2,r2,r3
 18155dc:	1007883a 	mov	r3,r2
 18155e0:	e0bffe17 	ldw	r2,-8(fp)
 18155e4:	10c00915 	stw	r3,36(r2)
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 18155e8:	e13fff17 	ldw	r4,-4(fp)
 18155ec:	18156080 	call	1815608 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 18155f0:	0001883a 	nop
 18155f4:	e037883a 	mov	sp,fp
 18155f8:	dfc00117 	ldw	ra,4(sp)
 18155fc:	df000017 	ldw	fp,0(sp)
 1815600:	dec00204 	addi	sp,sp,8
 1815604:	f800283a 	ret

01815608 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 1815608:	defffa04 	addi	sp,sp,-24
 181560c:	dfc00515 	stw	ra,20(sp)
 1815610:	df000415 	stw	fp,16(sp)
 1815614:	df000404 	addi	fp,sp,16
 1815618:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 181561c:	e0bfff17 	ldw	r2,-4(fp)
 1815620:	10800a17 	ldw	r2,40(r2)
 1815624:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_REQUESTING);
 1815628:	01400044 	movi	r5,1
 181562c:	e13ffd17 	ldw	r4,-12(fp)
 1815630:	181703c0 	call	181703c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 1815634:	018000c4 	movi	r6,3
 1815638:	e17ffd17 	ldw	r5,-12(fp)
 181563c:	e13fff17 	ldw	r4,-4(fp)
 1815640:	18180140 	call	1818014 <dhcp_create_msg>
 1815644:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 1815648:	e0bffe07 	ldb	r2,-8(fp)
 181564c:	1000651e 	bne	r2,zero,18157e4 <dhcp_select+0x1dc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 1815650:	01800084 	movi	r6,2
 1815654:	01400e44 	movi	r5,57
 1815658:	e13ffd17 	ldw	r4,-12(fp)
 181565c:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 1815660:	e0bfff17 	ldw	r2,-4(fp)
 1815664:	10800c0b 	ldhu	r2,48(r2)
 1815668:	10bfffcc 	andi	r2,r2,65535
 181566c:	100b883a 	mov	r5,r2
 1815670:	e13ffd17 	ldw	r4,-12(fp)
 1815674:	18171940 	call	1817194 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 1815678:	01800104 	movi	r6,4
 181567c:	01400c84 	movi	r5,50
 1815680:	e13ffd17 	ldw	r4,-12(fp)
 1815684:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 1815688:	e0bffd17 	ldw	r2,-12(fp)
 181568c:	10800917 	ldw	r2,36(r2)
 1815690:	1006d63a 	srli	r3,r2,24
 1815694:	e0bffd17 	ldw	r2,-12(fp)
 1815698:	10800917 	ldw	r2,36(r2)
 181569c:	1004d23a 	srli	r2,r2,8
 18156a0:	10bfc00c 	andi	r2,r2,65280
 18156a4:	1886b03a 	or	r3,r3,r2
 18156a8:	e0bffd17 	ldw	r2,-12(fp)
 18156ac:	10800917 	ldw	r2,36(r2)
 18156b0:	10bfc00c 	andi	r2,r2,65280
 18156b4:	1004923a 	slli	r2,r2,8
 18156b8:	1886b03a 	or	r3,r3,r2
 18156bc:	e0bffd17 	ldw	r2,-12(fp)
 18156c0:	10800917 	ldw	r2,36(r2)
 18156c4:	1004963a 	slli	r2,r2,24
 18156c8:	1884b03a 	or	r2,r3,r2
 18156cc:	100b883a 	mov	r5,r2
 18156d0:	e13ffd17 	ldw	r4,-12(fp)
 18156d4:	181722c0 	call	181722c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 18156d8:	01800104 	movi	r6,4
 18156dc:	01400d84 	movi	r5,54
 18156e0:	e13ffd17 	ldw	r4,-12(fp)
 18156e4:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
 18156e8:	e0bffd17 	ldw	r2,-12(fp)
 18156ec:	10800817 	ldw	r2,32(r2)
 18156f0:	1006d63a 	srli	r3,r2,24
 18156f4:	e0bffd17 	ldw	r2,-12(fp)
 18156f8:	10800817 	ldw	r2,32(r2)
 18156fc:	1004d23a 	srli	r2,r2,8
 1815700:	10bfc00c 	andi	r2,r2,65280
 1815704:	1886b03a 	or	r3,r3,r2
 1815708:	e0bffd17 	ldw	r2,-12(fp)
 181570c:	10800817 	ldw	r2,32(r2)
 1815710:	10bfc00c 	andi	r2,r2,65280
 1815714:	1004923a 	slli	r2,r2,8
 1815718:	1886b03a 	or	r3,r3,r2
 181571c:	e0bffd17 	ldw	r2,-12(fp)
 1815720:	10800817 	ldw	r2,32(r2)
 1815724:	1004963a 	slli	r2,r2,24
 1815728:	1884b03a 	or	r2,r3,r2
 181572c:	100b883a 	mov	r5,r2
 1815730:	e13ffd17 	ldw	r4,-12(fp)
 1815734:	181722c0 	call	181722c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
 1815738:	01800104 	movi	r6,4
 181573c:	01400dc4 	movi	r5,55
 1815740:	e13ffd17 	ldw	r4,-12(fp)
 1815744:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
 1815748:	01400044 	movi	r5,1
 181574c:	e13ffd17 	ldw	r4,-12(fp)
 1815750:	18171340 	call	1817134 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
 1815754:	014000c4 	movi	r5,3
 1815758:	e13ffd17 	ldw	r4,-12(fp)
 181575c:	18171340 	call	1817134 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
 1815760:	01400704 	movi	r5,28
 1815764:	e13ffd17 	ldw	r4,-12(fp)
 1815768:	18171340 	call	1817134 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
 181576c:	01400184 	movi	r5,6
 1815770:	e13ffd17 	ldw	r4,-12(fp)
 1815774:	18171340 	call	1817134 <dhcp_option_byte>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
 1815778:	e17fff17 	ldw	r5,-4(fp)
 181577c:	e13ffd17 	ldw	r4,-12(fp)
 1815780:	18173380 	call	1817338 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 1815784:	e13ffd17 	ldw	r4,-12(fp)
 1815788:	181861c0 	call	181861c <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 181578c:	e0bffd17 	ldw	r2,-12(fp)
 1815790:	10c00417 	ldw	r3,16(r2)
 1815794:	e0bffd17 	ldw	r2,-12(fp)
 1815798:	1080060b 	ldhu	r2,24(r2)
 181579c:	10803c04 	addi	r2,r2,240
 18157a0:	10bfffcc 	andi	r2,r2,65535
 18157a4:	100b883a 	mov	r5,r2
 18157a8:	1809883a 	mov	r4,r3
 18157ac:	181a5f40 	call	181a5f4 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 18157b0:	e0bffd17 	ldw	r2,-12(fp)
 18157b4:	10c00117 	ldw	r3,4(r2)
 18157b8:	e0bffd17 	ldw	r2,-12(fp)
 18157bc:	11000417 	ldw	r4,16(r2)
 18157c0:	e0bfff17 	ldw	r2,-4(fp)
 18157c4:	d8800015 	stw	r2,0(sp)
 18157c8:	01c010c4 	movi	r7,67
 18157cc:	d1a00e04 	addi	r6,gp,-32712
 18157d0:	200b883a 	mov	r5,r4
 18157d4:	1809883a 	mov	r4,r3
 18157d8:	182204c0 	call	182204c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 18157dc:	e13ffd17 	ldw	r4,-12(fp)
 18157e0:	18185980 	call	1818598 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 18157e4:	e0bffd17 	ldw	r2,-12(fp)
 18157e8:	10800343 	ldbu	r2,13(r2)
 18157ec:	10800044 	addi	r2,r2,1
 18157f0:	1007883a 	mov	r3,r2
 18157f4:	e0bffd17 	ldw	r2,-12(fp)
 18157f8:	10c00345 	stb	r3,13(r2)
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 18157fc:	e0bffd17 	ldw	r2,-12(fp)
 1815800:	10800343 	ldbu	r2,13(r2)
 1815804:	10803fcc 	andi	r2,r2,255
 1815808:	108001a8 	cmpgeui	r2,r2,6
 181580c:	1000061e 	bne	r2,zero,1815828 <dhcp_select+0x220>
 1815810:	e0bffd17 	ldw	r2,-12(fp)
 1815814:	10800343 	ldbu	r2,13(r2)
 1815818:	10803fcc 	andi	r2,r2,255
 181581c:	00c0fa04 	movi	r3,1000
 1815820:	1884983a 	sll	r2,r3,r2
 1815824:	00000106 	br	181582c <dhcp_select+0x224>
 1815828:	00ba9804 	movi	r2,-5536
 181582c:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1815830:	e0bffe8b 	ldhu	r2,-6(fp)
 1815834:	10807cc4 	addi	r2,r2,499
 1815838:	01407d04 	movi	r5,500
 181583c:	1009883a 	mov	r4,r2
 1815840:	180abd80 	call	180abd8 <__divsi3>
 1815844:	1007883a 	mov	r3,r2
 1815848:	e0bffd17 	ldw	r2,-12(fp)
 181584c:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 1815850:	e0bffe03 	ldbu	r2,-8(fp)
}
 1815854:	e037883a 	mov	sp,fp
 1815858:	dfc00117 	ldw	ra,4(sp)
 181585c:	df000017 	ldw	fp,0(sp)
 1815860:	dec00204 	addi	sp,sp,8
 1815864:	f800283a 	ret

01815868 <dhcp_coarse_tmr>:
/**
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr()
{
 1815868:	defffd04 	addi	sp,sp,-12
 181586c:	dfc00215 	stw	ra,8(sp)
 1815870:	df000115 	stw	fp,4(sp)
 1815874:	df000104 	addi	fp,sp,4
  struct netif *netif = netif_list;
 1815878:	d0a7f317 	ldw	r2,-24628(gp)
 181587c:	e0bfff15 	stw	r2,-4(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 1815880:	00001b06 	br	18158f0 <dhcp_coarse_tmr+0x88>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
 1815884:	e0bfff17 	ldw	r2,-4(fp)
 1815888:	10800a17 	ldw	r2,40(r2)
 181588c:	10001526 	beq	r2,zero,18158e4 <dhcp_coarse_tmr+0x7c>
      /* timer is active (non zero), and triggers (zeroes) now? */
      if (netif->dhcp->t2_timeout-- == 1) {
 1815890:	e0bfff17 	ldw	r2,-4(fp)
 1815894:	10800a17 	ldw	r2,40(r2)
 1815898:	10c0078b 	ldhu	r3,30(r2)
 181589c:	193fffc4 	addi	r4,r3,-1
 18158a0:	1100078d 	sth	r4,30(r2)
 18158a4:	18bfffcc 	andi	r2,r3,65535
 18158a8:	10800058 	cmpnei	r2,r2,1
 18158ac:	1000031e 	bne	r2,zero,18158bc <dhcp_coarse_tmr+0x54>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 18158b0:	e13fff17 	ldw	r4,-4(fp)
 18158b4:	1815bdc0 	call	1815bdc <dhcp_t2_timeout>
 18158b8:	00000a06 	br	18158e4 <dhcp_coarse_tmr+0x7c>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (netif->dhcp->t1_timeout-- == 1) {
 18158bc:	e0bfff17 	ldw	r2,-4(fp)
 18158c0:	10800a17 	ldw	r2,40(r2)
 18158c4:	10c0070b 	ldhu	r3,28(r2)
 18158c8:	193fffc4 	addi	r4,r3,-1
 18158cc:	1100070d 	sth	r4,28(r2)
 18158d0:	18bfffcc 	andi	r2,r3,65535
 18158d4:	10800058 	cmpnei	r2,r2,1
 18158d8:	1000021e 	bne	r2,zero,18158e4 <dhcp_coarse_tmr+0x7c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 18158dc:	e13fff17 	ldw	r4,-4(fp)
 18158e0:	1815b600 	call	1815b60 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 18158e4:	e0bfff17 	ldw	r2,-4(fp)
 18158e8:	10800017 	ldw	r2,0(r2)
 18158ec:	e0bfff15 	stw	r2,-4(fp)
dhcp_coarse_tmr()
{
  struct netif *netif = netif_list;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 18158f0:	e0bfff17 	ldw	r2,-4(fp)
 18158f4:	103fe31e 	bne	r2,zero,1815884 <__alt_mem_mem_0+0xff7f5884>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  }
}
 18158f8:	0001883a 	nop
 18158fc:	e037883a 	mov	sp,fp
 1815900:	dfc00117 	ldw	ra,4(sp)
 1815904:	df000017 	ldw	fp,0(sp)
 1815908:	dec00204 	addi	sp,sp,8
 181590c:	f800283a 	ret

01815910 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr()
{
 1815910:	defffd04 	addi	sp,sp,-12
 1815914:	dfc00215 	stw	ra,8(sp)
 1815918:	df000115 	stw	fp,4(sp)
 181591c:	df000104 	addi	fp,sp,4
  struct netif *netif = netif_list;
 1815920:	d0a7f317 	ldw	r2,-24628(gp)
 1815924:	e0bfff15 	stw	r2,-4(fp)
  /* loop through netif's */
  while (netif != NULL) {
 1815928:	00001f06 	br	18159a8 <dhcp_fine_tmr+0x98>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
 181592c:	e0bfff17 	ldw	r2,-4(fp)
 1815930:	10800a17 	ldw	r2,40(r2)
 1815934:	10001926 	beq	r2,zero,181599c <dhcp_fine_tmr+0x8c>
      /* timer is active (non zero), and is about to trigger now */      
      if (netif->dhcp->request_timeout > 1) {
 1815938:	e0bfff17 	ldw	r2,-4(fp)
 181593c:	10800a17 	ldw	r2,40(r2)
 1815940:	1080068b 	ldhu	r2,26(r2)
 1815944:	10bfffcc 	andi	r2,r2,65535
 1815948:	108000b0 	cmpltui	r2,r2,2
 181594c:	1000061e 	bne	r2,zero,1815968 <dhcp_fine_tmr+0x58>
        netif->dhcp->request_timeout--;
 1815950:	e0bfff17 	ldw	r2,-4(fp)
 1815954:	10800a17 	ldw	r2,40(r2)
 1815958:	10c0068b 	ldhu	r3,26(r2)
 181595c:	18ffffc4 	addi	r3,r3,-1
 1815960:	10c0068d 	sth	r3,26(r2)
 1815964:	00000d06 	br	181599c <dhcp_fine_tmr+0x8c>
      }
      else if (netif->dhcp->request_timeout == 1) {
 1815968:	e0bfff17 	ldw	r2,-4(fp)
 181596c:	10800a17 	ldw	r2,40(r2)
 1815970:	1080068b 	ldhu	r2,26(r2)
 1815974:	10bfffcc 	andi	r2,r2,65535
 1815978:	10800058 	cmpnei	r2,r2,1
 181597c:	1000071e 	bne	r2,zero,181599c <dhcp_fine_tmr+0x8c>
        netif->dhcp->request_timeout--;
 1815980:	e0bfff17 	ldw	r2,-4(fp)
 1815984:	10800a17 	ldw	r2,40(r2)
 1815988:	10c0068b 	ldhu	r3,26(r2)
 181598c:	18ffffc4 	addi	r3,r3,-1
 1815990:	10c0068d 	sth	r3,26(r2)
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 1815994:	e13fff17 	ldw	r4,-4(fp)
 1815998:	18159c80 	call	18159c8 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 181599c:	e0bfff17 	ldw	r2,-4(fp)
 18159a0:	10800017 	ldw	r2,0(r2)
 18159a4:	e0bfff15 	stw	r2,-4(fp)
void
dhcp_fine_tmr()
{
  struct netif *netif = netif_list;
  /* loop through netif's */
  while (netif != NULL) {
 18159a8:	e0bfff17 	ldw	r2,-4(fp)
 18159ac:	103fdf1e 	bne	r2,zero,181592c <__alt_mem_mem_0+0xff7f592c>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  }
}
 18159b0:	0001883a 	nop
 18159b4:	e037883a 	mov	sp,fp
 18159b8:	dfc00117 	ldw	ra,4(sp)
 18159bc:	df000017 	ldw	fp,0(sp)
 18159c0:	dec00204 	addi	sp,sp,8
 18159c4:	f800283a 	ret

018159c8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 18159c8:	defffc04 	addi	sp,sp,-16
 18159cc:	dfc00315 	stw	ra,12(sp)
 18159d0:	df000215 	stw	fp,8(sp)
 18159d4:	df000204 	addi	fp,sp,8
 18159d8:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 18159dc:	e0bfff17 	ldw	r2,-4(fp)
 18159e0:	10800a17 	ldw	r2,40(r2)
 18159e4:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
 18159e8:	e0bffe17 	ldw	r2,-8(fp)
 18159ec:	10800303 	ldbu	r2,12(r2)
 18159f0:	10803fcc 	andi	r2,r2,255
 18159f4:	10800320 	cmpeqi	r2,r2,12
 18159f8:	1000051e 	bne	r2,zero,1815a10 <dhcp_timeout+0x48>
 18159fc:	e0bffe17 	ldw	r2,-8(fp)
 1815a00:	10800303 	ldbu	r2,12(r2)
 1815a04:	10803fcc 	andi	r2,r2,255
 1815a08:	10800198 	cmpnei	r2,r2,6
 1815a0c:	1000031e 	bne	r2,zero,1815a1c <dhcp_timeout+0x54>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 1815a10:	e13fff17 	ldw	r4,-4(fp)
 1815a14:	18165500 	call	1816550 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815a18:	00004b06 	br	1815b48 <dhcp_timeout+0x180>
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  /* receiving the requested lease timed out */
  } else if (dhcp->state == DHCP_REQUESTING) {
 1815a1c:	e0bffe17 	ldw	r2,-8(fp)
 1815a20:	10800303 	ldbu	r2,12(r2)
 1815a24:	10803fcc 	andi	r2,r2,255
 1815a28:	10800058 	cmpnei	r2,r2,1
 1815a2c:	10000d1e 	bne	r2,zero,1815a64 <dhcp_timeout+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
 1815a30:	e0bffe17 	ldw	r2,-8(fp)
 1815a34:	10800343 	ldbu	r2,13(r2)
 1815a38:	10803fcc 	andi	r2,r2,255
 1815a3c:	108001a8 	cmpgeui	r2,r2,6
 1815a40:	1000031e 	bne	r2,zero,1815a50 <dhcp_timeout+0x88>
      dhcp_select(netif);
 1815a44:	e13fff17 	ldw	r4,-4(fp)
 1815a48:	18156080 	call	1815608 <dhcp_select>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815a4c:	00003e06 	br	1815b48 <dhcp_timeout+0x180>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
      dhcp_select(netif);
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
      dhcp_release(netif);
 1815a50:	e13fff17 	ldw	r4,-4(fp)
 1815a54:	1816de00 	call	1816de0 <dhcp_release>
      dhcp_discover(netif);
 1815a58:	e13fff17 	ldw	r4,-4(fp)
 1815a5c:	18165500 	call	1816550 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815a60:	00003906 	br	1815b48 <dhcp_timeout+0x180>
      dhcp_release(netif);
      dhcp_discover(netif);
    }
#if DHCP_DOES_ARP_CHECK
  /* received no ARP reply for the offered address (which is good) */
  } else if (dhcp->state == DHCP_CHECKING) {
 1815a64:	e0bffe17 	ldw	r2,-8(fp)
 1815a68:	10800303 	ldbu	r2,12(r2)
 1815a6c:	10803fcc 	andi	r2,r2,255
 1815a70:	10800218 	cmpnei	r2,r2,8
 1815a74:	10000b1e 	bne	r2,zero,1815aa4 <dhcp_timeout+0xdc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
    if (dhcp->tries <= 1) {
 1815a78:	e0bffe17 	ldw	r2,-8(fp)
 1815a7c:	10800343 	ldbu	r2,13(r2)
 1815a80:	10803fcc 	andi	r2,r2,255
 1815a84:	108000a8 	cmpgeui	r2,r2,2
 1815a88:	1000031e 	bne	r2,zero,1815a98 <dhcp_timeout+0xd0>
      dhcp_check(netif);
 1815a8c:	e13fff17 	ldw	r4,-4(fp)
 1815a90:	181547c0 	call	181547c <dhcp_check>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815a94:	00002c06 	br	1815b48 <dhcp_timeout+0x180>
      dhcp_check(netif);
    /* no ARP replies on the offered address,
       looks like the IP address is indeed free */
    } else {
      /* bind the interface to the offered address */
      dhcp_bind(netif);
 1815a98:	e13fff17 	ldw	r4,-4(fp)
 1815a9c:	18166f00 	call	18166f0 <dhcp_bind>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815aa0:	00002906 	br	1815b48 <dhcp_timeout+0x180>
      dhcp_bind(netif);
    }
#endif /* DHCP_DOES_ARP_CHECK */
  }
  /* did not get response to renew request? */
  else if (dhcp->state == DHCP_RENEWING) {
 1815aa4:	e0bffe17 	ldw	r2,-8(fp)
 1815aa8:	10800303 	ldbu	r2,12(r2)
 1815aac:	10803fcc 	andi	r2,r2,255
 1815ab0:	10800158 	cmpnei	r2,r2,5
 1815ab4:	1000031e 	bne	r2,zero,1815ac4 <dhcp_timeout+0xfc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
    /* just retry renewal */
    /* note that the rebind timer will eventually time-out if renew does not work */
    dhcp_renew(netif);
 1815ab8:	e13fff17 	ldw	r4,-4(fp)
 1815abc:	181697c0 	call	181697c <dhcp_renew>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815ac0:	00002106 	br	1815b48 <dhcp_timeout+0x180>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
    /* just retry renewal */
    /* note that the rebind timer will eventually time-out if renew does not work */
    dhcp_renew(netif);
  /* did not get response to rebind request? */
  } else if (dhcp->state == DHCP_REBINDING) {
 1815ac4:	e0bffe17 	ldw	r2,-8(fp)
 1815ac8:	10800303 	ldbu	r2,12(r2)
 1815acc:	10803fcc 	andi	r2,r2,255
 1815ad0:	10800118 	cmpnei	r2,r2,4
 1815ad4:	10000d1e 	bne	r2,zero,1815b0c <dhcp_timeout+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
 1815ad8:	e0bffe17 	ldw	r2,-8(fp)
 1815adc:	10800343 	ldbu	r2,13(r2)
 1815ae0:	10803fcc 	andi	r2,r2,255
 1815ae4:	10800268 	cmpgeui	r2,r2,9
 1815ae8:	1000031e 	bne	r2,zero,1815af8 <dhcp_timeout+0x130>
      dhcp_rebind(netif);
 1815aec:	e13fff17 	ldw	r4,-4(fp)
 1815af0:	1816ae00 	call	1816ae0 <dhcp_rebind>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815af4:	00001406 	br	1815b48 <dhcp_timeout+0x180>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
      dhcp_rebind(netif);
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
 1815af8:	e13fff17 	ldw	r4,-4(fp)
 1815afc:	1816de00 	call	1816de0 <dhcp_release>
      dhcp_discover(netif);
 1815b00:	e13fff17 	ldw	r4,-4(fp)
 1815b04:	18165500 	call	1816550 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815b08:	00000f06 	br	1815b48 <dhcp_timeout+0x180>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
      dhcp_discover(netif);
    }
  } else if (dhcp->state == DHCP_REBOOTING) {
 1815b0c:	e0bffe17 	ldw	r2,-8(fp)
 1815b10:	10800303 	ldbu	r2,12(r2)
 1815b14:	10803fcc 	andi	r2,r2,255
 1815b18:	108000d8 	cmpnei	r2,r2,3
 1815b1c:	10000a1e 	bne	r2,zero,1815b48 <dhcp_timeout+0x180>
    if (dhcp->tries < REBOOT_TRIES) {
 1815b20:	e0bffe17 	ldw	r2,-8(fp)
 1815b24:	10800343 	ldbu	r2,13(r2)
 1815b28:	10803fcc 	andi	r2,r2,255
 1815b2c:	108000a8 	cmpgeui	r2,r2,2
 1815b30:	1000031e 	bne	r2,zero,1815b40 <dhcp_timeout+0x178>
      dhcp_reboot(netif);
 1815b34:	e13fff17 	ldw	r4,-4(fp)
 1815b38:	1816c3c0 	call	1816c3c <dhcp_reboot>
    } else {
      dhcp_discover(netif);
    }
  }
}
 1815b3c:	00000206 	br	1815b48 <dhcp_timeout+0x180>
    }
  } else if (dhcp->state == DHCP_REBOOTING) {
    if (dhcp->tries < REBOOT_TRIES) {
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
 1815b40:	e13fff17 	ldw	r4,-4(fp)
 1815b44:	18165500 	call	1816550 <dhcp_discover>
    }
  }
}
 1815b48:	0001883a 	nop
 1815b4c:	e037883a 	mov	sp,fp
 1815b50:	dfc00117 	ldw	ra,4(sp)
 1815b54:	df000017 	ldw	fp,0(sp)
 1815b58:	dec00204 	addi	sp,sp,8
 1815b5c:	f800283a 	ret

01815b60 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 1815b60:	defffc04 	addi	sp,sp,-16
 1815b64:	dfc00315 	stw	ra,12(sp)
 1815b68:	df000215 	stw	fp,8(sp)
 1815b6c:	df000204 	addi	fp,sp,8
 1815b70:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1815b74:	e0bfff17 	ldw	r2,-4(fp)
 1815b78:	10800a17 	ldw	r2,40(r2)
 1815b7c:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 1815b80:	e0bffe17 	ldw	r2,-8(fp)
 1815b84:	10800303 	ldbu	r2,12(r2)
 1815b88:	10803fcc 	andi	r2,r2,255
 1815b8c:	10800060 	cmpeqi	r2,r2,1
 1815b90:	10000a1e 	bne	r2,zero,1815bbc <dhcp_t1_timeout+0x5c>
 1815b94:	e0bffe17 	ldw	r2,-8(fp)
 1815b98:	10800303 	ldbu	r2,12(r2)
 1815b9c:	10803fcc 	andi	r2,r2,255
 1815ba0:	108002a0 	cmpeqi	r2,r2,10
 1815ba4:	1000051e 	bne	r2,zero,1815bbc <dhcp_t1_timeout+0x5c>
      (dhcp->state == DHCP_RENEWING)) {
 1815ba8:	e0bffe17 	ldw	r2,-8(fp)
 1815bac:	10800303 	ldbu	r2,12(r2)
static void
dhcp_t1_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 1815bb0:	10803fcc 	andi	r2,r2,255
 1815bb4:	10800158 	cmpnei	r2,r2,5
 1815bb8:	1000021e 	bne	r2,zero,1815bc4 <dhcp_t1_timeout+0x64>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_RENEWING, not DHCP_BOUND */
    dhcp_renew(netif);
 1815bbc:	e13fff17 	ldw	r4,-4(fp)
 1815bc0:	181697c0 	call	181697c <dhcp_renew>
  }
}
 1815bc4:	0001883a 	nop
 1815bc8:	e037883a 	mov	sp,fp
 1815bcc:	dfc00117 	ldw	ra,4(sp)
 1815bd0:	df000017 	ldw	fp,0(sp)
 1815bd4:	dec00204 	addi	sp,sp,8
 1815bd8:	f800283a 	ret

01815bdc <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 1815bdc:	defffc04 	addi	sp,sp,-16
 1815be0:	dfc00315 	stw	ra,12(sp)
 1815be4:	df000215 	stw	fp,8(sp)
 1815be8:	df000204 	addi	fp,sp,8
 1815bec:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1815bf0:	e0bfff17 	ldw	r2,-4(fp)
 1815bf4:	10800a17 	ldw	r2,40(r2)
 1815bf8:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 1815bfc:	e0bffe17 	ldw	r2,-8(fp)
 1815c00:	10800303 	ldbu	r2,12(r2)
 1815c04:	10803fcc 	andi	r2,r2,255
 1815c08:	10800060 	cmpeqi	r2,r2,1
 1815c0c:	10000a1e 	bne	r2,zero,1815c38 <dhcp_t2_timeout+0x5c>
 1815c10:	e0bffe17 	ldw	r2,-8(fp)
 1815c14:	10800303 	ldbu	r2,12(r2)
 1815c18:	10803fcc 	andi	r2,r2,255
 1815c1c:	108002a0 	cmpeqi	r2,r2,10
 1815c20:	1000051e 	bne	r2,zero,1815c38 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_RENEWING)) {
 1815c24:	e0bffe17 	ldw	r2,-8(fp)
 1815c28:	10800303 	ldbu	r2,12(r2)
static void
dhcp_t2_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 1815c2c:	10803fcc 	andi	r2,r2,255
 1815c30:	10800158 	cmpnei	r2,r2,5
 1815c34:	1000021e 	bne	r2,zero,1815c40 <dhcp_t2_timeout+0x64>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_REBINDING, not DHCP_BOUND */
    dhcp_rebind(netif);
 1815c38:	e13fff17 	ldw	r4,-4(fp)
 1815c3c:	1816ae00 	call	1816ae0 <dhcp_rebind>
  }
}
 1815c40:	0001883a 	nop
 1815c44:	e037883a 	mov	sp,fp
 1815c48:	dfc00117 	ldw	ra,4(sp)
 1815c4c:	df000017 	ldw	fp,0(sp)
 1815c50:	dec00204 	addi	sp,sp,8
 1815c54:	f800283a 	ret

01815c58 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 1815c58:	defffd04 	addi	sp,sp,-12
 1815c5c:	df000215 	stw	fp,8(sp)
 1815c60:	df000204 	addi	fp,sp,8
 1815c64:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1815c68:	e0bfff17 	ldw	r2,-4(fp)
 1815c6c:	10800a17 	ldw	r2,40(r2)
 1815c70:	e0bffe15 	stw	r2,-8(fp)
#if LWIP_DNS
  u8_t n;
#endif /* LWIP_DNS */

  /* clear options we might not get from the ACK */
  ip_addr_set_zero(&dhcp->offered_sn_mask);
 1815c74:	e0bffe17 	ldw	r2,-8(fp)
 1815c78:	10000a15 	stw	zero,40(r2)
  ip_addr_set_zero(&dhcp->offered_gw_addr);
 1815c7c:	e0bffe17 	ldw	r2,-8(fp)
 1815c80:	10000b15 	stw	zero,44(r2)
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 1815c84:	008061b4 	movhi	r2,390
 1815c88:	10875f04 	addi	r2,r2,7548
 1815c8c:	108000c3 	ldbu	r2,3(r2)
 1815c90:	10803fcc 	andi	r2,r2,255
 1815c94:	10000526 	beq	r2,zero,1815cac <dhcp_handle_ack+0x54>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 1815c98:	008061b4 	movhi	r2,390
 1815c9c:	10876204 	addi	r2,r2,7560
 1815ca0:	10c00317 	ldw	r3,12(r2)
 1815ca4:	e0bffe17 	ldw	r2,-8(fp)
 1815ca8:	10c00c15 	stw	r3,48(r2)
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 1815cac:	008061b4 	movhi	r2,390
 1815cb0:	10875f04 	addi	r2,r2,7548
 1815cb4:	10800103 	ldbu	r2,4(r2)
 1815cb8:	10803fcc 	andi	r2,r2,255
 1815cbc:	10000626 	beq	r2,zero,1815cd8 <dhcp_handle_ack+0x80>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 1815cc0:	008061b4 	movhi	r2,390
 1815cc4:	10876204 	addi	r2,r2,7560
 1815cc8:	10c00417 	ldw	r3,16(r2)
 1815ccc:	e0bffe17 	ldw	r2,-8(fp)
 1815cd0:	10c00d15 	stw	r3,52(r2)
 1815cd4:	00000506 	br	1815cec <dhcp_handle_ack+0x94>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 1815cd8:	e0bffe17 	ldw	r2,-8(fp)
 1815cdc:	10800c17 	ldw	r2,48(r2)
 1815ce0:	1006d07a 	srli	r3,r2,1
 1815ce4:	e0bffe17 	ldw	r2,-8(fp)
 1815ce8:	10c00d15 	stw	r3,52(r2)
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 1815cec:	008061b4 	movhi	r2,390
 1815cf0:	10875f04 	addi	r2,r2,7548
 1815cf4:	10800143 	ldbu	r2,5(r2)
 1815cf8:	10803fcc 	andi	r2,r2,255
 1815cfc:	10000626 	beq	r2,zero,1815d18 <dhcp_handle_ack+0xc0>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 1815d00:	008061b4 	movhi	r2,390
 1815d04:	10876204 	addi	r2,r2,7560
 1815d08:	10c00517 	ldw	r3,20(r2)
 1815d0c:	e0bffe17 	ldw	r2,-8(fp)
 1815d10:	10c00e15 	stw	r3,56(r2)
 1815d14:	00000406 	br	1815d28 <dhcp_handle_ack+0xd0>
  } else {
    /* calculate safe periods for rebinding */
    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
 1815d18:	e0bffe17 	ldw	r2,-8(fp)
 1815d1c:	10c00c17 	ldw	r3,48(r2)
 1815d20:	e0bffe17 	ldw	r2,-8(fp)
 1815d24:	10c00e15 	stw	r3,56(r2)
  }

  /* (y)our internet address */
  ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 1815d28:	e0bffe17 	ldw	r2,-8(fp)
 1815d2c:	10800217 	ldw	r2,8(r2)
 1815d30:	10c00403 	ldbu	r3,16(r2)
 1815d34:	11000443 	ldbu	r4,17(r2)
 1815d38:	2008923a 	slli	r4,r4,8
 1815d3c:	20c6b03a 	or	r3,r4,r3
 1815d40:	11000483 	ldbu	r4,18(r2)
 1815d44:	2008943a 	slli	r4,r4,16
 1815d48:	20c6b03a 	or	r3,r4,r3
 1815d4c:	108004c3 	ldbu	r2,19(r2)
 1815d50:	1004963a 	slli	r2,r2,24
 1815d54:	10c4b03a 	or	r2,r2,r3
 1815d58:	1007883a 	mov	r3,r2
 1815d5c:	e0bffe17 	ldw	r2,-8(fp)
 1815d60:	10c00915 	stw	r3,36(r2)
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 1815d64:	008061b4 	movhi	r2,390
 1815d68:	10875f04 	addi	r2,r2,7548
 1815d6c:	10800183 	ldbu	r2,6(r2)
 1815d70:	10803fcc 	andi	r2,r2,255
 1815d74:	10001b26 	beq	r2,zero,1815de4 <dhcp_handle_ack+0x18c>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 1815d78:	008061b4 	movhi	r2,390
 1815d7c:	10876204 	addi	r2,r2,7560
 1815d80:	10800617 	ldw	r2,24(r2)
 1815d84:	1006d63a 	srli	r3,r2,24
 1815d88:	008061b4 	movhi	r2,390
 1815d8c:	10876204 	addi	r2,r2,7560
 1815d90:	10800617 	ldw	r2,24(r2)
 1815d94:	1004d23a 	srli	r2,r2,8
 1815d98:	10bfc00c 	andi	r2,r2,65280
 1815d9c:	1886b03a 	or	r3,r3,r2
 1815da0:	008061b4 	movhi	r2,390
 1815da4:	10876204 	addi	r2,r2,7560
 1815da8:	10800617 	ldw	r2,24(r2)
 1815dac:	10bfc00c 	andi	r2,r2,65280
 1815db0:	1004923a 	slli	r2,r2,8
 1815db4:	1886b03a 	or	r3,r3,r2
 1815db8:	008061b4 	movhi	r2,390
 1815dbc:	10876204 	addi	r2,r2,7560
 1815dc0:	10800617 	ldw	r2,24(r2)
 1815dc4:	1004963a 	slli	r2,r2,24
 1815dc8:	1886b03a 	or	r3,r3,r2
 1815dcc:	e0bffe17 	ldw	r2,-8(fp)
 1815dd0:	10c00a15 	stw	r3,40(r2)
    dhcp->subnet_mask_given = 1;
 1815dd4:	e0bffe17 	ldw	r2,-8(fp)
 1815dd8:	00c00044 	movi	r3,1
 1815ddc:	10c00385 	stb	r3,14(r2)
 1815de0:	00000206 	br	1815dec <dhcp_handle_ack+0x194>
  } else {
    dhcp->subnet_mask_given = 0;
 1815de4:	e0bffe17 	ldw	r2,-8(fp)
 1815de8:	10000385 	stb	zero,14(r2)
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 1815dec:	008061b4 	movhi	r2,390
 1815df0:	10875f04 	addi	r2,r2,7548
 1815df4:	108001c3 	ldbu	r2,7(r2)
 1815df8:	10803fcc 	andi	r2,r2,255
 1815dfc:	10001726 	beq	r2,zero,1815e5c <dhcp_handle_ack+0x204>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 1815e00:	008061b4 	movhi	r2,390
 1815e04:	10876204 	addi	r2,r2,7560
 1815e08:	10800717 	ldw	r2,28(r2)
 1815e0c:	1006d63a 	srli	r3,r2,24
 1815e10:	008061b4 	movhi	r2,390
 1815e14:	10876204 	addi	r2,r2,7560
 1815e18:	10800717 	ldw	r2,28(r2)
 1815e1c:	1004d23a 	srli	r2,r2,8
 1815e20:	10bfc00c 	andi	r2,r2,65280
 1815e24:	1886b03a 	or	r3,r3,r2
 1815e28:	008061b4 	movhi	r2,390
 1815e2c:	10876204 	addi	r2,r2,7560
 1815e30:	10800717 	ldw	r2,28(r2)
 1815e34:	10bfc00c 	andi	r2,r2,65280
 1815e38:	1004923a 	slli	r2,r2,8
 1815e3c:	1886b03a 	or	r3,r3,r2
 1815e40:	008061b4 	movhi	r2,390
 1815e44:	10876204 	addi	r2,r2,7560
 1815e48:	10800717 	ldw	r2,28(r2)
 1815e4c:	1004963a 	slli	r2,r2,24
 1815e50:	1886b03a 	or	r3,r3,r2
 1815e54:	e0bffe17 	ldw	r2,-8(fp)
 1815e58:	10c00b15 	stw	r3,44(r2)
    ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
    n++;
  }
#endif /* LWIP_DNS */
}
 1815e5c:	0001883a 	nop
 1815e60:	e037883a 	mov	sp,fp
 1815e64:	df000017 	ldw	fp,0(sp)
 1815e68:	dec00104 	addi	sp,sp,4
 1815e6c:	f800283a 	ret

01815e70 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
 1815e70:	defffc04 	addi	sp,sp,-16
 1815e74:	dfc00315 	stw	ra,12(sp)
 1815e78:	df000215 	stw	fp,8(sp)
 1815e7c:	df000204 	addi	fp,sp,8
 1815e80:	e13ffe15 	stw	r4,-8(fp)
 1815e84:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  LWIP_ASSERT("netif already has a struct dhcp set", netif->dhcp == NULL);

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 1815e88:	01800f04 	movi	r6,60
 1815e8c:	000b883a 	mov	r5,zero
 1815e90:	e13fff17 	ldw	r4,-4(fp)
 1815e94:	18061940 	call	1806194 <memset>
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  netif->dhcp = dhcp;
 1815e98:	e0bffe17 	ldw	r2,-8(fp)
 1815e9c:	e0ffff17 	ldw	r3,-4(fp)
 1815ea0:	10c00a15 	stw	r3,40(r2)
}
 1815ea4:	0001883a 	nop
 1815ea8:	e037883a 	mov	sp,fp
 1815eac:	dfc00117 	ldw	ra,4(sp)
 1815eb0:	df000017 	ldw	fp,0(sp)
 1815eb4:	dec00204 	addi	sp,sp,8
 1815eb8:	f800283a 	ret

01815ebc <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
 1815ebc:	defffd04 	addi	sp,sp,-12
 1815ec0:	dfc00215 	stw	ra,8(sp)
 1815ec4:	df000115 	stw	fp,4(sp)
 1815ec8:	df000104 	addi	fp,sp,4
 1815ecc:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("netif != NULL", netif != NULL);

  if (netif->dhcp != NULL) {
 1815ed0:	e0bfff17 	ldw	r2,-4(fp)
 1815ed4:	10800a17 	ldw	r2,40(r2)
 1815ed8:	10000626 	beq	r2,zero,1815ef4 <dhcp_cleanup+0x38>
    mem_free(netif->dhcp);
 1815edc:	e0bfff17 	ldw	r2,-4(fp)
 1815ee0:	10800a17 	ldw	r2,40(r2)
 1815ee4:	1009883a 	mov	r4,r2
 1815ee8:	18190940 	call	1819094 <mem_free>
    netif->dhcp = NULL;
 1815eec:	e0bfff17 	ldw	r2,-4(fp)
 1815ef0:	10000a15 	stw	zero,40(r2)
  }
}
 1815ef4:	0001883a 	nop
 1815ef8:	e037883a 	mov	sp,fp
 1815efc:	dfc00117 	ldw	ra,4(sp)
 1815f00:	df000017 	ldw	fp,0(sp)
 1815f04:	dec00204 	addi	sp,sp,8
 1815f08:	f800283a 	ret

01815f0c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 1815f0c:	defffb04 	addi	sp,sp,-20
 1815f10:	dfc00415 	stw	ra,16(sp)
 1815f14:	df000315 	stw	fp,12(sp)
 1815f18:	df000304 	addi	fp,sp,12
 1815f1c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp;
  err_t result = ERR_OK;
 1815f20:	e03ffe05 	stb	zero,-8(fp)

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 1815f24:	e0bfff17 	ldw	r2,-4(fp)
 1815f28:	1000091e 	bne	r2,zero,1815f50 <dhcp_start+0x44>
 1815f2c:	01c06134 	movhi	r7,388
 1815f30:	39c38904 	addi	r7,r7,3620
 1815f34:	0180a144 	movi	r6,645
 1815f38:	01406134 	movhi	r5,388
 1815f3c:	29438f04 	addi	r5,r5,3644
 1815f40:	01006134 	movhi	r4,388
 1815f44:	21039304 	addi	r4,r4,3660
 1815f48:	1800bd80 	call	1800bd8 <printf>
 1815f4c:	003fff06 	br	1815f4c <__alt_mem_mem_0+0xff7f5f4c>
  dhcp = netif->dhcp;
 1815f50:	e0bfff17 	ldw	r2,-4(fp)
 1815f54:	10800a17 	ldw	r2,40(r2)
 1815f58:	e0bffd15 	stw	r2,-12(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Remove the flag that says this netif is handled by DHCP,
     it is set when we succeeded starting. */
  netif->flags &= ~NETIF_FLAG_DHCP;
 1815f5c:	e0bfff17 	ldw	r2,-4(fp)
 1815f60:	10c00e43 	ldbu	r3,57(r2)
 1815f64:	00bffdc4 	movi	r2,-9
 1815f68:	1884703a 	and	r2,r3,r2
 1815f6c:	1007883a 	mov	r3,r2
 1815f70:	e0bfff17 	ldw	r2,-4(fp)
 1815f74:	10c00e45 	stb	r3,57(r2)

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
 1815f78:	e0bfff17 	ldw	r2,-4(fp)
 1815f7c:	10800e43 	ldbu	r2,57(r2)
 1815f80:	10803fcc 	andi	r2,r2,255
 1815f84:	1080080c 	andi	r2,r2,32
 1815f88:	1000021e 	bne	r2,zero,1815f94 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
    return ERR_ARG;
 1815f8c:	00bffc84 	movi	r2,-14
 1815f90:	00005406 	br	18160e4 <dhcp_start+0x1d8>
  }

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 1815f94:	e0bfff17 	ldw	r2,-4(fp)
 1815f98:	10800c0b 	ldhu	r2,48(r2)
 1815f9c:	10bfffcc 	andi	r2,r2,65535
 1815fa0:	10809028 	cmpgeui	r2,r2,576
 1815fa4:	1000021e 	bne	r2,zero,1815fb0 <dhcp_start+0xa4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 1815fa8:	00bfffc4 	movi	r2,-1
 1815fac:	00004d06 	br	18160e4 <dhcp_start+0x1d8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 1815fb0:	e0bffd17 	ldw	r2,-12(fp)
 1815fb4:	10000b1e 	bne	r2,zero,1815fe4 <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 1815fb8:	01000f04 	movi	r4,60
 1815fbc:	18194800 	call	1819480 <mem_malloc>
 1815fc0:	e0bffd15 	stw	r2,-12(fp)
    if (dhcp == NULL) {
 1815fc4:	e0bffd17 	ldw	r2,-12(fp)
 1815fc8:	1000021e 	bne	r2,zero,1815fd4 <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 1815fcc:	00bfffc4 	movi	r2,-1
 1815fd0:	00004406 	br	18160e4 <dhcp_start+0x1d8>
    }
    /* store this dhcp client in the netif */
    netif->dhcp = dhcp;
 1815fd4:	e0bfff17 	ldw	r2,-4(fp)
 1815fd8:	e0fffd17 	ldw	r3,-12(fp)
 1815fdc:	10c00a15 	stw	r3,40(r2)
 1815fe0:	00000706 	br	1816000 <dhcp_start+0xf4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    if (dhcp->pcb != NULL) {
 1815fe4:	e0bffd17 	ldw	r2,-12(fp)
 1815fe8:	10800117 	ldw	r2,4(r2)
 1815fec:	10000426 	beq	r2,zero,1816000 <dhcp_start+0xf4>
      udp_remove(dhcp->pcb);
 1815ff0:	e0bffd17 	ldw	r2,-12(fp)
 1815ff4:	10800117 	ldw	r2,4(r2)
 1815ff8:	1009883a 	mov	r4,r2
 1815ffc:	18227f80 	call	18227f8 <udp_remove>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  }
    
  /* clear the previous IP assignment */
  dhcp_clear_assignment(netif);
 1816000:	e13fff17 	ldw	r4,-4(fp)
 1816004:	18153d00 	call	18153d0 <dhcp_clear_assignment>
  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 1816008:	01800f04 	movi	r6,60
 181600c:	000b883a 	mov	r5,zero
 1816010:	e13ffd17 	ldw	r4,-12(fp)
 1816014:	18061940 	call	1806194 <memset>
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
 1816018:	18228980 	call	1822898 <udp_new>
 181601c:	1007883a 	mov	r3,r2
 1816020:	e0bffd17 	ldw	r2,-12(fp)
 1816024:	10c00115 	stw	r3,4(r2)
  if (dhcp->pcb == NULL) {
 1816028:	e0bffd17 	ldw	r2,-12(fp)
 181602c:	10800117 	ldw	r2,4(r2)
 1816030:	1000021e 	bne	r2,zero,181603c <dhcp_start+0x130>
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
 1816034:	00bfffc4 	movi	r2,-1
 1816038:	00002a06 	br	18160e4 <dhcp_start+0x1d8>
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
 181603c:	e0bffd17 	ldw	r2,-12(fp)
 1816040:	10800117 	ldw	r2,4(r2)
 1816044:	e0fffd17 	ldw	r3,-12(fp)
 1816048:	18c00117 	ldw	r3,4(r3)
 181604c:	18c00203 	ldbu	r3,8(r3)
 1816050:	18c00814 	ori	r3,r3,32
 1816054:	10c00205 	stb	r3,8(r2)
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 1816058:	e0bffd17 	ldw	r2,-12(fp)
 181605c:	10800117 	ldw	r2,4(r2)
 1816060:	01801104 	movi	r6,68
 1816064:	d1600d04 	addi	r5,gp,-32716
 1816068:	1009883a 	mov	r4,r2
 181606c:	18225000 	call	1822500 <udp_bind>
  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 1816070:	e0bffd17 	ldw	r2,-12(fp)
 1816074:	10800117 	ldw	r2,4(r2)
 1816078:	018010c4 	movi	r6,67
 181607c:	d1600d04 	addi	r5,gp,-32716
 1816080:	1009883a 	mov	r4,r2
 1816084:	182265c0 	call	182265c <udp_connect>
  /* set up the recv callback and argument */
  udp_recv(dhcp->pcb, dhcp_recv, netif);
 1816088:	e0bffd17 	ldw	r2,-12(fp)
 181608c:	10800117 	ldw	r2,4(r2)
 1816090:	e1bfff17 	ldw	r6,-4(fp)
 1816094:	01406074 	movhi	r5,385
 1816098:	295f2f04 	addi	r5,r5,31932
 181609c:	1009883a 	mov	r4,r2
 18160a0:	18227b40 	call	18227b4 <udp_recv>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 18160a4:	e13fff17 	ldw	r4,-4(fp)
 18160a8:	18165500 	call	1816550 <dhcp_discover>
 18160ac:	e0bffe05 	stb	r2,-8(fp)
  if (result != ERR_OK) {
 18160b0:	e0bffe07 	ldb	r2,-8(fp)
 18160b4:	10000426 	beq	r2,zero,18160c8 <dhcp_start+0x1bc>
    /* free resources allocated above */
    dhcp_stop(netif);
 18160b8:	e13fff17 	ldw	r4,-4(fp)
 18160bc:	1816f840 	call	1816f84 <dhcp_stop>
    return ERR_MEM;
 18160c0:	00bfffc4 	movi	r2,-1
 18160c4:	00000706 	br	18160e4 <dhcp_start+0x1d8>
  }
  /* Set the flag that says this netif is handled by DHCP. */
  netif->flags |= NETIF_FLAG_DHCP;
 18160c8:	e0bfff17 	ldw	r2,-4(fp)
 18160cc:	10800e43 	ldbu	r2,57(r2)
 18160d0:	10800214 	ori	r2,r2,8
 18160d4:	1007883a 	mov	r3,r2
 18160d8:	e0bfff17 	ldw	r2,-4(fp)
 18160dc:	10c00e45 	stb	r3,57(r2)
  return result;
 18160e0:	e0bffe03 	ldbu	r2,-8(fp)
}
 18160e4:	e037883a 	mov	sp,fp
 18160e8:	dfc00117 	ldw	ra,4(sp)
 18160ec:	df000017 	ldw	fp,0(sp)
 18160f0:	dec00204 	addi	sp,sp,8
 18160f4:	f800283a 	ret

018160f8 <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
 18160f8:	deffeb04 	addi	sp,sp,-84
 18160fc:	dfc01415 	stw	ra,80(sp)
 1816100:	df001315 	stw	fp,76(sp)
 1816104:	df001304 	addi	fp,sp,76
 1816108:	e13fff15 	stw	r4,-4(fp)
  struct dhcp dhcp;
  err_t result = ERR_OK;
 181610c:	e03fef05 	stb	zero,-68(fp)
  struct udp_pcb *pcb;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 1816110:	e0bfff17 	ldw	r2,-4(fp)
 1816114:	1000091e 	bne	r2,zero,181613c <dhcp_inform+0x44>
 1816118:	01c06134 	movhi	r7,388
 181611c:	39c38904 	addi	r7,r7,3620
 1816120:	0180b6c4 	movi	r6,731
 1816124:	01406134 	movhi	r5,388
 1816128:	29438f04 	addi	r5,r5,3644
 181612c:	01006134 	movhi	r4,388
 1816130:	21039304 	addi	r4,r4,3660
 1816134:	1800bd80 	call	1800bd8 <printf>
 1816138:	003fff06 	br	1816138 <__alt_mem_mem_0+0xff7f6138>

  memset(&dhcp, 0, sizeof(struct dhcp));
 181613c:	e0bff004 	addi	r2,fp,-64
 1816140:	01800f04 	movi	r6,60
 1816144:	000b883a 	mov	r5,zero
 1816148:	1009883a 	mov	r4,r2
 181614c:	18061940 	call	1806194 <memset>
  dhcp_set_state(&dhcp, DHCP_INFORM);
 1816150:	e0bff004 	addi	r2,fp,-64
 1816154:	01400204 	movi	r5,8
 1816158:	1009883a 	mov	r4,r2
 181615c:	181703c0 	call	181703c <dhcp_set_state>

  if ((netif->dhcp != NULL) && (netif->dhcp->pcb != NULL)) {
 1816160:	e0bfff17 	ldw	r2,-4(fp)
 1816164:	10800a17 	ldw	r2,40(r2)
 1816168:	10000926 	beq	r2,zero,1816190 <dhcp_inform+0x98>
 181616c:	e0bfff17 	ldw	r2,-4(fp)
 1816170:	10800a17 	ldw	r2,40(r2)
 1816174:	10800117 	ldw	r2,4(r2)
 1816178:	10000526 	beq	r2,zero,1816190 <dhcp_inform+0x98>
    /* re-use existing pcb */
    pcb = netif->dhcp->pcb;
 181617c:	e0bfff17 	ldw	r2,-4(fp)
 1816180:	10800a17 	ldw	r2,40(r2)
 1816184:	10800117 	ldw	r2,4(r2)
 1816188:	e0bfee15 	stw	r2,-72(fp)
 181618c:	00001006 	br	18161d0 <dhcp_inform+0xd8>
  } else {
    pcb = udp_new();
 1816190:	18228980 	call	1822898 <udp_new>
 1816194:	e0bfee15 	stw	r2,-72(fp)
    if (pcb == NULL) {
 1816198:	e0bfee17 	ldw	r2,-72(fp)
 181619c:	10003b26 	beq	r2,zero,181628c <dhcp_inform+0x194>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
      return;
    }
    dhcp.pcb = pcb;
 18161a0:	e0bfee17 	ldw	r2,-72(fp)
 18161a4:	e0bff115 	stw	r2,-60(fp)
    ip_set_option(dhcp.pcb, SOF_BROADCAST);
 18161a8:	e0bff117 	ldw	r2,-60(fp)
 18161ac:	e0fff117 	ldw	r3,-60(fp)
 18161b0:	18c00203 	ldbu	r3,8(r3)
 18161b4:	18c00814 	ori	r3,r3,32
 18161b8:	10c00205 	stb	r3,8(r2)
    udp_bind(dhcp.pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 18161bc:	e0bff117 	ldw	r2,-60(fp)
 18161c0:	01801104 	movi	r6,68
 18161c4:	d1600d04 	addi	r5,gp,-32716
 18161c8:	1009883a 	mov	r4,r2
 18161cc:	18225000 	call	1822500 <udp_bind>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
  }
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
 18161d0:	e0bff004 	addi	r2,fp,-64
 18161d4:	01800204 	movi	r6,8
 18161d8:	100b883a 	mov	r5,r2
 18161dc:	e13fff17 	ldw	r4,-4(fp)
 18161e0:	18180140 	call	1818014 <dhcp_create_msg>
 18161e4:	e0bfef05 	stb	r2,-68(fp)
  if (result == ERR_OK) {
 18161e8:	e0bfef07 	ldb	r2,-68(fp)
 18161ec:	1000211e 	bne	r2,zero,1816274 <dhcp_inform+0x17c>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 18161f0:	e0bff004 	addi	r2,fp,-64
 18161f4:	01800084 	movi	r6,2
 18161f8:	01400e44 	movi	r5,57
 18161fc:	1009883a 	mov	r4,r2
 1816200:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
 1816204:	e0bfff17 	ldw	r2,-4(fp)
 1816208:	10800c0b 	ldhu	r2,48(r2)
 181620c:	10ffffcc 	andi	r3,r2,65535
 1816210:	e0bff004 	addi	r2,fp,-64
 1816214:	180b883a 	mov	r5,r3
 1816218:	1009883a 	mov	r4,r2
 181621c:	18171940 	call	1817194 <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
 1816220:	e0bff004 	addi	r2,fp,-64
 1816224:	1009883a 	mov	r4,r2
 1816228:	181861c0 	call	181861c <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
 181622c:	e0fff417 	ldw	r3,-48(fp)
 1816230:	e0bff60b 	ldhu	r2,-40(fp)
 1816234:	10803c04 	addi	r2,r2,240
 1816238:	10bfffcc 	andi	r2,r2,65535
 181623c:	100b883a 	mov	r5,r2
 1816240:	1809883a 	mov	r4,r3
 1816244:	181a5f40 	call	181a5f4 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
    udp_sendto_if(pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 1816248:	e0fff417 	ldw	r3,-48(fp)
 181624c:	e0bfff17 	ldw	r2,-4(fp)
 1816250:	d8800015 	stw	r2,0(sp)
 1816254:	01c010c4 	movi	r7,67
 1816258:	d1a00e04 	addi	r6,gp,-32712
 181625c:	180b883a 	mov	r5,r3
 1816260:	e13fee17 	ldw	r4,-72(fp)
 1816264:	182204c0 	call	182204c <udp_sendto_if>
    dhcp_delete_msg(&dhcp);
 1816268:	e0bff004 	addi	r2,fp,-64
 181626c:	1009883a 	mov	r4,r2
 1816270:	18185980 	call	1818598 <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  if (dhcp.pcb != NULL) {
 1816274:	e0bff117 	ldw	r2,-60(fp)
 1816278:	10000526 	beq	r2,zero,1816290 <dhcp_inform+0x198>
    /* otherwise, the existing pcb was used */
    udp_remove(dhcp.pcb);
 181627c:	e0bff117 	ldw	r2,-60(fp)
 1816280:	1009883a 	mov	r4,r2
 1816284:	18227f80 	call	18227f8 <udp_remove>
 1816288:	00000106 	br	1816290 <dhcp_inform+0x198>
    pcb = netif->dhcp->pcb;
  } else {
    pcb = udp_new();
    if (pcb == NULL) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
      return;
 181628c:	0001883a 	nop

  if (dhcp.pcb != NULL) {
    /* otherwise, the existing pcb was used */
    udp_remove(dhcp.pcb);
  }
}
 1816290:	e037883a 	mov	sp,fp
 1816294:	dfc00117 	ldw	ra,4(sp)
 1816298:	df000017 	ldw	fp,0(sp)
 181629c:	dec00204 	addi	sp,sp,8
 18162a0:	f800283a 	ret

018162a4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 18162a4:	defffc04 	addi	sp,sp,-16
 18162a8:	dfc00315 	stw	ra,12(sp)
 18162ac:	df000215 	stw	fp,8(sp)
 18162b0:	df000204 	addi	fp,sp,8
 18162b4:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 18162b8:	e0bfff17 	ldw	r2,-4(fp)
 18162bc:	10800a17 	ldw	r2,40(r2)
 18162c0:	e0bffe15 	stw	r2,-8(fp)
  if (!dhcp)
 18162c4:	e0bffe17 	ldw	r2,-8(fp)
 18162c8:	10001826 	beq	r2,zero,181632c <dhcp_network_changed+0x88>
    return;
  switch (dhcp->state) {
 18162cc:	e0bffe17 	ldw	r2,-8(fp)
 18162d0:	10800303 	ldbu	r2,12(r2)
 18162d4:	10803fcc 	andi	r2,r2,255
 18162d8:	10c00188 	cmpgei	r3,r2,6
 18162dc:	1800041e 	bne	r3,zero,18162f0 <dhcp_network_changed+0x4c>
 18162e0:	10c000c8 	cmpgei	r3,r2,3
 18162e4:	1800041e 	bne	r3,zero,18162f8 <dhcp_network_changed+0x54>
 18162e8:	10001226 	beq	r2,zero,1816334 <dhcp_network_changed+0x90>
 18162ec:	00000906 	br	1816314 <dhcp_network_changed+0x70>
 18162f0:	108002a0 	cmpeqi	r2,r2,10
 18162f4:	10000726 	beq	r2,zero,1816314 <dhcp_network_changed+0x70>
  case DHCP_REBINDING:
  case DHCP_RENEWING:
  case DHCP_BOUND:
  case DHCP_REBOOTING:
    netif_set_down(netif);
 18162f8:	e13fff17 	ldw	r4,-4(fp)
 18162fc:	1819de00 	call	1819de0 <netif_set_down>
    dhcp->tries = 0;
 1816300:	e0bffe17 	ldw	r2,-8(fp)
 1816304:	10000345 	stb	zero,13(r2)
    dhcp_reboot(netif);
 1816308:	e13fff17 	ldw	r4,-4(fp)
 181630c:	1816c3c0 	call	1816c3c <dhcp_reboot>
    break;
 1816310:	00000906 	br	1816338 <dhcp_network_changed+0x94>
  case DHCP_OFF:
    /* stay off */
    break;
  default:
    dhcp->tries = 0;
 1816314:	e0bffe17 	ldw	r2,-8(fp)
 1816318:	10000345 	stb	zero,13(r2)
    if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    dhcp_discover(netif);
 181631c:	e13fff17 	ldw	r4,-4(fp)
 1816320:	18165500 	call	1816550 <dhcp_discover>
    break;
 1816324:	0001883a 	nop
 1816328:	00000306 	br	1816338 <dhcp_network_changed+0x94>
void
dhcp_network_changed(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  if (!dhcp)
    return;
 181632c:	0001883a 	nop
 1816330:	00000106 	br	1816338 <dhcp_network_changed+0x94>
    dhcp->tries = 0;
    dhcp_reboot(netif);
    break;
  case DHCP_OFF:
    /* stay off */
    break;
 1816334:	0001883a 	nop
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    dhcp_discover(netif);
    break;
  }
}
 1816338:	e037883a 	mov	sp,fp
 181633c:	dfc00117 	ldw	ra,4(sp)
 1816340:	df000017 	ldw	fp,0(sp)
 1816344:	dec00204 	addi	sp,sp,8
 1816348:	f800283a 	ret

0181634c <dhcp_arp_reply>:
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
{
 181634c:	defffc04 	addi	sp,sp,-16
 1816350:	dfc00315 	stw	ra,12(sp)
 1816354:	df000215 	stw	fp,8(sp)
 1816358:	df000204 	addi	fp,sp,8
 181635c:	e13ffe15 	stw	r4,-8(fp)
 1816360:	e17fff15 	stw	r5,-4(fp)
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 1816364:	e0bffe17 	ldw	r2,-8(fp)
 1816368:	1000091e 	bne	r2,zero,1816390 <dhcp_arp_reply+0x44>
 181636c:	01c06134 	movhi	r7,388
 1816370:	39c38904 	addi	r7,r7,3620
 1816374:	0180cc84 	movi	r6,818
 1816378:	01406134 	movhi	r5,388
 181637c:	29438f04 	addi	r5,r5,3644
 1816380:	01006134 	movhi	r4,388
 1816384:	21039304 	addi	r4,r4,3660
 1816388:	1800bd80 	call	1800bd8 <printf>
 181638c:	003fff06 	br	181638c <__alt_mem_mem_0+0xff7f638c>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
 1816390:	e0bffe17 	ldw	r2,-8(fp)
 1816394:	10800a17 	ldw	r2,40(r2)
 1816398:	10000e26 	beq	r2,zero,18163d4 <dhcp_arp_reply+0x88>
 181639c:	e0bffe17 	ldw	r2,-8(fp)
 18163a0:	10800a17 	ldw	r2,40(r2)
 18163a4:	10800303 	ldbu	r2,12(r2)
 18163a8:	10803fcc 	andi	r2,r2,255
 18163ac:	10800218 	cmpnei	r2,r2,8
 18163b0:	1000081e 	bne	r2,zero,18163d4 <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
 18163b4:	e0bfff17 	ldw	r2,-4(fp)
 18163b8:	10c00017 	ldw	r3,0(r2)
 18163bc:	e0bffe17 	ldw	r2,-8(fp)
 18163c0:	10800a17 	ldw	r2,40(r2)
 18163c4:	10800917 	ldw	r2,36(r2)
 18163c8:	1880021e 	bne	r3,r2,18163d4 <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 18163cc:	e13ffe17 	ldw	r4,-8(fp)
 18163d0:	18163ec0 	call	18163ec <dhcp_decline>
    }
  }
}
 18163d4:	0001883a 	nop
 18163d8:	e037883a 	mov	sp,fp
 18163dc:	dfc00117 	ldw	ra,4(sp)
 18163e0:	df000017 	ldw	fp,0(sp)
 18163e4:	dec00204 	addi	sp,sp,8
 18163e8:	f800283a 	ret

018163ec <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 18163ec:	defffa04 	addi	sp,sp,-24
 18163f0:	dfc00515 	stw	ra,20(sp)
 18163f4:	df000415 	stw	fp,16(sp)
 18163f8:	df000404 	addi	fp,sp,16
 18163fc:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1816400:	e0bfff17 	ldw	r2,-4(fp)
 1816404:	10800a17 	ldw	r2,40(r2)
 1816408:	e0bffd15 	stw	r2,-12(fp)
  err_t result = ERR_OK;
 181640c:	e03ffe05 	stb	zero,-8(fp)
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
 1816410:	01400304 	movi	r5,12
 1816414:	e13ffd17 	ldw	r4,-12(fp)
 1816418:	181703c0 	call	181703c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 181641c:	01800104 	movi	r6,4
 1816420:	e17ffd17 	ldw	r5,-12(fp)
 1816424:	e13fff17 	ldw	r4,-4(fp)
 1816428:	18180140 	call	1818014 <dhcp_create_msg>
 181642c:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 1816430:	e0bffe07 	ldb	r2,-8(fp)
 1816434:	1000301e 	bne	r2,zero,18164f8 <dhcp_decline+0x10c>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 1816438:	01800104 	movi	r6,4
 181643c:	01400c84 	movi	r5,50
 1816440:	e13ffd17 	ldw	r4,-12(fp)
 1816444:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 1816448:	e0bffd17 	ldw	r2,-12(fp)
 181644c:	10800917 	ldw	r2,36(r2)
 1816450:	1006d63a 	srli	r3,r2,24
 1816454:	e0bffd17 	ldw	r2,-12(fp)
 1816458:	10800917 	ldw	r2,36(r2)
 181645c:	1004d23a 	srli	r2,r2,8
 1816460:	10bfc00c 	andi	r2,r2,65280
 1816464:	1886b03a 	or	r3,r3,r2
 1816468:	e0bffd17 	ldw	r2,-12(fp)
 181646c:	10800917 	ldw	r2,36(r2)
 1816470:	10bfc00c 	andi	r2,r2,65280
 1816474:	1004923a 	slli	r2,r2,8
 1816478:	1886b03a 	or	r3,r3,r2
 181647c:	e0bffd17 	ldw	r2,-12(fp)
 1816480:	10800917 	ldw	r2,36(r2)
 1816484:	1004963a 	slli	r2,r2,24
 1816488:	1884b03a 	or	r2,r3,r2
 181648c:	100b883a 	mov	r5,r2
 1816490:	e13ffd17 	ldw	r4,-12(fp)
 1816494:	181722c0 	call	181722c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 1816498:	e13ffd17 	ldw	r4,-12(fp)
 181649c:	181861c0 	call	181861c <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 18164a0:	e0bffd17 	ldw	r2,-12(fp)
 18164a4:	10c00417 	ldw	r3,16(r2)
 18164a8:	e0bffd17 	ldw	r2,-12(fp)
 18164ac:	1080060b 	ldhu	r2,24(r2)
 18164b0:	10803c04 	addi	r2,r2,240
 18164b4:	10bfffcc 	andi	r2,r2,65535
 18164b8:	100b883a 	mov	r5,r2
 18164bc:	1809883a 	mov	r4,r3
 18164c0:	181a5f40 	call	181a5f4 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 18164c4:	e0bffd17 	ldw	r2,-12(fp)
 18164c8:	10c00117 	ldw	r3,4(r2)
 18164cc:	e0bffd17 	ldw	r2,-12(fp)
 18164d0:	11000417 	ldw	r4,16(r2)
 18164d4:	e0bfff17 	ldw	r2,-4(fp)
 18164d8:	d8800015 	stw	r2,0(sp)
 18164dc:	01c010c4 	movi	r7,67
 18164e0:	d1a00e04 	addi	r6,gp,-32712
 18164e4:	200b883a 	mov	r5,r4
 18164e8:	1809883a 	mov	r4,r3
 18164ec:	182204c0 	call	182204c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 18164f0:	e13ffd17 	ldw	r4,-12(fp)
 18164f4:	18185980 	call	1818598 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 18164f8:	e0bffd17 	ldw	r2,-12(fp)
 18164fc:	10800343 	ldbu	r2,13(r2)
 1816500:	10800044 	addi	r2,r2,1
 1816504:	1007883a 	mov	r3,r2
 1816508:	e0bffd17 	ldw	r2,-12(fp)
 181650c:	10c00345 	stb	r3,13(r2)
  msecs = 10*1000;
 1816510:	0089c404 	movi	r2,10000
 1816514:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1816518:	e0bffe8b 	ldhu	r2,-6(fp)
 181651c:	10807cc4 	addi	r2,r2,499
 1816520:	01407d04 	movi	r5,500
 1816524:	1009883a 	mov	r4,r2
 1816528:	180abd80 	call	180abd8 <__divsi3>
 181652c:	1007883a 	mov	r3,r2
 1816530:	e0bffd17 	ldw	r2,-12(fp)
 1816534:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 1816538:	e0bffe03 	ldbu	r2,-8(fp)
}
 181653c:	e037883a 	mov	sp,fp
 1816540:	dfc00117 	ldw	ra,4(sp)
 1816544:	df000017 	ldw	fp,0(sp)
 1816548:	dec00204 	addi	sp,sp,8
 181654c:	f800283a 	ret

01816550 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 1816550:	defffa04 	addi	sp,sp,-24
 1816554:	dfc00515 	stw	ra,20(sp)
 1816558:	df000415 	stw	fp,16(sp)
 181655c:	df000404 	addi	fp,sp,16
 1816560:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1816564:	e0bfff17 	ldw	r2,-4(fp)
 1816568:	10800a17 	ldw	r2,40(r2)
 181656c:	e0bffd15 	stw	r2,-12(fp)
  err_t result = ERR_OK;
 1816570:	e03ffe05 	stb	zero,-8(fp)
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip_addr_set_any(&dhcp->offered_ip_addr);
 1816574:	e0bffd17 	ldw	r2,-12(fp)
 1816578:	10000915 	stw	zero,36(r2)
  dhcp_set_state(dhcp, DHCP_SELECTING);
 181657c:	01400184 	movi	r5,6
 1816580:	e13ffd17 	ldw	r4,-12(fp)
 1816584:	181703c0 	call	181703c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 1816588:	01800044 	movi	r6,1
 181658c:	e17ffd17 	ldw	r5,-12(fp)
 1816590:	e13fff17 	ldw	r4,-4(fp)
 1816594:	18180140 	call	1818014 <dhcp_create_msg>
 1816598:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 181659c:	e0bffe07 	ldb	r2,-8(fp)
 18165a0:	1000321e 	bne	r2,zero,181666c <dhcp_discover+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 18165a4:	01800084 	movi	r6,2
 18165a8:	01400e44 	movi	r5,57
 18165ac:	e13ffd17 	ldw	r4,-12(fp)
 18165b0:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 18165b4:	e0bfff17 	ldw	r2,-4(fp)
 18165b8:	10800c0b 	ldhu	r2,48(r2)
 18165bc:	10bfffcc 	andi	r2,r2,65535
 18165c0:	100b883a 	mov	r5,r2
 18165c4:	e13ffd17 	ldw	r4,-12(fp)
 18165c8:	18171940 	call	1817194 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
 18165cc:	01800104 	movi	r6,4
 18165d0:	01400dc4 	movi	r5,55
 18165d4:	e13ffd17 	ldw	r4,-12(fp)
 18165d8:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
 18165dc:	01400044 	movi	r5,1
 18165e0:	e13ffd17 	ldw	r4,-12(fp)
 18165e4:	18171340 	call	1817134 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
 18165e8:	014000c4 	movi	r5,3
 18165ec:	e13ffd17 	ldw	r4,-12(fp)
 18165f0:	18171340 	call	1817134 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
 18165f4:	01400704 	movi	r5,28
 18165f8:	e13ffd17 	ldw	r4,-12(fp)
 18165fc:	18171340 	call	1817134 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
 1816600:	01400184 	movi	r5,6
 1816604:	e13ffd17 	ldw	r4,-12(fp)
 1816608:	18171340 	call	1817134 <dhcp_option_byte>

    dhcp_option_trailer(dhcp);
 181660c:	e13ffd17 	ldw	r4,-12(fp)
 1816610:	181861c0 	call	181861c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 1816614:	e0bffd17 	ldw	r2,-12(fp)
 1816618:	10c00417 	ldw	r3,16(r2)
 181661c:	e0bffd17 	ldw	r2,-12(fp)
 1816620:	1080060b 	ldhu	r2,24(r2)
 1816624:	10803c04 	addi	r2,r2,240
 1816628:	10bfffcc 	andi	r2,r2,65535
 181662c:	100b883a 	mov	r5,r2
 1816630:	1809883a 	mov	r4,r3
 1816634:	181a5f40 	call	181a5f4 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 1816638:	e0bffd17 	ldw	r2,-12(fp)
 181663c:	10c00117 	ldw	r3,4(r2)
 1816640:	e0bffd17 	ldw	r2,-12(fp)
 1816644:	11000417 	ldw	r4,16(r2)
 1816648:	e0bfff17 	ldw	r2,-4(fp)
 181664c:	d8800015 	stw	r2,0(sp)
 1816650:	01c010c4 	movi	r7,67
 1816654:	d1a00e04 	addi	r6,gp,-32712
 1816658:	200b883a 	mov	r5,r4
 181665c:	1809883a 	mov	r4,r3
 1816660:	182204c0 	call	182204c <udp_sendto_if>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 1816664:	e13ffd17 	ldw	r4,-12(fp)
 1816668:	18185980 	call	1818598 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 181666c:	e0bffd17 	ldw	r2,-12(fp)
 1816670:	10800343 	ldbu	r2,13(r2)
 1816674:	10800044 	addi	r2,r2,1
 1816678:	1007883a 	mov	r3,r2
 181667c:	e0bffd17 	ldw	r2,-12(fp)
 1816680:	10c00345 	stb	r3,13(r2)
  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 1816684:	e0bffd17 	ldw	r2,-12(fp)
 1816688:	10800343 	ldbu	r2,13(r2)
 181668c:	10803fcc 	andi	r2,r2,255
 1816690:	108001a8 	cmpgeui	r2,r2,6
 1816694:	1000061e 	bne	r2,zero,18166b0 <dhcp_discover+0x160>
 1816698:	e0bffd17 	ldw	r2,-12(fp)
 181669c:	10800343 	ldbu	r2,13(r2)
 18166a0:	10803fcc 	andi	r2,r2,255
 18166a4:	00c0fa04 	movi	r3,1000
 18166a8:	1884983a 	sll	r2,r3,r2
 18166ac:	00000106 	br	18166b4 <dhcp_discover+0x164>
 18166b0:	00ba9804 	movi	r2,-5536
 18166b4:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 18166b8:	e0bffe8b 	ldhu	r2,-6(fp)
 18166bc:	10807cc4 	addi	r2,r2,499
 18166c0:	01407d04 	movi	r5,500
 18166c4:	1009883a 	mov	r4,r2
 18166c8:	180abd80 	call	180abd8 <__divsi3>
 18166cc:	1007883a 	mov	r3,r2
 18166d0:	e0bffd17 	ldw	r2,-12(fp)
 18166d4:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 18166d8:	e0bffe03 	ldbu	r2,-8(fp)
}
 18166dc:	e037883a 	mov	sp,fp
 18166e0:	dfc00117 	ldw	ra,4(sp)
 18166e4:	df000017 	ldw	fp,0(sp)
 18166e8:	dec00204 	addi	sp,sp,8
 18166ec:	f800283a 	ret

018166f0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 18166f0:	defff804 	addi	sp,sp,-32
 18166f4:	dfc00715 	stw	ra,28(sp)
 18166f8:	df000615 	stw	fp,24(sp)
 18166fc:	df000604 	addi	fp,sp,24
 1816700:	e13fff15 	stw	r4,-4(fp)
  u32_t timeout;
  struct dhcp *dhcp;
  ip_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 1816704:	e0bfff17 	ldw	r2,-4(fp)
 1816708:	1000091e 	bne	r2,zero,1816730 <dhcp_bind+0x40>
 181670c:	01c06134 	movhi	r7,388
 1816710:	39c38904 	addi	r7,r7,3620
 1816714:	0180ec44 	movi	r6,945
 1816718:	01406134 	movhi	r5,388
 181671c:	29439f04 	addi	r5,r5,3708
 1816720:	01006134 	movhi	r4,388
 1816724:	21039304 	addi	r4,r4,3660
 1816728:	1800bd80 	call	1800bd8 <printf>
 181672c:	003fff06 	br	181672c <__alt_mem_mem_0+0xff7f672c>
  dhcp = netif->dhcp;
 1816730:	e0bfff17 	ldw	r2,-4(fp)
 1816734:	10800a17 	ldw	r2,40(r2)
 1816738:	e0bffb15 	stw	r2,-20(fp)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 181673c:	e0bffb17 	ldw	r2,-20(fp)
 1816740:	1000091e 	bne	r2,zero,1816768 <dhcp_bind+0x78>
 1816744:	01c06134 	movhi	r7,388
 1816748:	39c38904 	addi	r7,r7,3620
 181674c:	0180ecc4 	movi	r6,947
 1816750:	01406134 	movhi	r5,388
 1816754:	2943a604 	addi	r5,r5,3736
 1816758:	01006134 	movhi	r4,388
 181675c:	21039304 	addi	r4,r4,3660
 1816760:	1800bd80 	call	1800bd8 <printf>
 1816764:	003fff06 	br	1816764 <__alt_mem_mem_0+0xff7f6764>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 1816768:	e0bffb17 	ldw	r2,-20(fp)
 181676c:	10800d17 	ldw	r2,52(r2)
 1816770:	10bfffe0 	cmpeqi	r2,r2,-1
 1816774:	1000171e 	bne	r2,zero,18167d4 <dhcp_bind+0xe4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 1816778:	e0bffb17 	ldw	r2,-20(fp)
 181677c:	10800d17 	ldw	r2,52(r2)
 1816780:	10800784 	addi	r2,r2,30
 1816784:	01400f04 	movi	r5,60
 1816788:	1009883a 	mov	r4,r2
 181678c:	180acd00 	call	180acd0 <__udivsi3>
 1816790:	e0bffa15 	stw	r2,-24(fp)
    if(timeout > 0xffff) {
 1816794:	e0bffa17 	ldw	r2,-24(fp)
 1816798:	00ffffd4 	movui	r3,65535
 181679c:	1880022e 	bgeu	r3,r2,18167a8 <dhcp_bind+0xb8>
      timeout = 0xffff;
 18167a0:	00bfffd4 	movui	r2,65535
 18167a4:	e0bffa15 	stw	r2,-24(fp)
    }
    dhcp->t1_timeout = (u16_t)timeout;
 18167a8:	e0bffa17 	ldw	r2,-24(fp)
 18167ac:	1007883a 	mov	r3,r2
 18167b0:	e0bffb17 	ldw	r2,-20(fp)
 18167b4:	10c0070d 	sth	r3,28(r2)
    if (dhcp->t1_timeout == 0) {
 18167b8:	e0bffb17 	ldw	r2,-20(fp)
 18167bc:	1080070b 	ldhu	r2,28(r2)
 18167c0:	10bfffcc 	andi	r2,r2,65535
 18167c4:	1000031e 	bne	r2,zero,18167d4 <dhcp_bind+0xe4>
      dhcp->t1_timeout = 1;
 18167c8:	e0bffb17 	ldw	r2,-20(fp)
 18167cc:	00c00044 	movi	r3,1
 18167d0:	10c0070d 	sth	r3,28(r2)
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 18167d4:	e0bffb17 	ldw	r2,-20(fp)
 18167d8:	10800e17 	ldw	r2,56(r2)
 18167dc:	10bfffe0 	cmpeqi	r2,r2,-1
 18167e0:	1000171e 	bne	r2,zero,1816840 <dhcp_bind+0x150>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 18167e4:	e0bffb17 	ldw	r2,-20(fp)
 18167e8:	10800e17 	ldw	r2,56(r2)
 18167ec:	10800784 	addi	r2,r2,30
 18167f0:	01400f04 	movi	r5,60
 18167f4:	1009883a 	mov	r4,r2
 18167f8:	180acd00 	call	180acd0 <__udivsi3>
 18167fc:	e0bffa15 	stw	r2,-24(fp)
    if(timeout > 0xffff) {
 1816800:	e0bffa17 	ldw	r2,-24(fp)
 1816804:	00ffffd4 	movui	r3,65535
 1816808:	1880022e 	bgeu	r3,r2,1816814 <dhcp_bind+0x124>
      timeout = 0xffff;
 181680c:	00bfffd4 	movui	r2,65535
 1816810:	e0bffa15 	stw	r2,-24(fp)
    }
    dhcp->t2_timeout = (u16_t)timeout;
 1816814:	e0bffa17 	ldw	r2,-24(fp)
 1816818:	1007883a 	mov	r3,r2
 181681c:	e0bffb17 	ldw	r2,-20(fp)
 1816820:	10c0078d 	sth	r3,30(r2)
    if (dhcp->t2_timeout == 0) {
 1816824:	e0bffb17 	ldw	r2,-20(fp)
 1816828:	1080078b 	ldhu	r2,30(r2)
 181682c:	10bfffcc 	andi	r2,r2,65535
 1816830:	1000031e 	bne	r2,zero,1816840 <dhcp_bind+0x150>
      dhcp->t2_timeout = 1;
 1816834:	e0bffb17 	ldw	r2,-20(fp)
 1816838:	00c00044 	movi	r3,1
 181683c:	10c0078d 	sth	r3,30(r2)
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 1816840:	e0bffb17 	ldw	r2,-20(fp)
 1816844:	10c0070b 	ldhu	r3,28(r2)
 1816848:	e0bffb17 	ldw	r2,-20(fp)
 181684c:	1080078b 	ldhu	r2,30(r2)
 1816850:	18ffffcc 	andi	r3,r3,65535
 1816854:	10bfffcc 	andi	r2,r2,65535
 1816858:	18800636 	bltu	r3,r2,1816874 <dhcp_bind+0x184>
 181685c:	e0bffb17 	ldw	r2,-20(fp)
 1816860:	1080078b 	ldhu	r2,30(r2)
 1816864:	10bfffcc 	andi	r2,r2,65535
 1816868:	10000226 	beq	r2,zero,1816874 <dhcp_bind+0x184>
    dhcp->t1_timeout = 0;
 181686c:	e0bffb17 	ldw	r2,-20(fp)
 1816870:	1000070d 	sth	zero,28(r2)
  }

  if (dhcp->subnet_mask_given) {
 1816874:	e0bffb17 	ldw	r2,-20(fp)
 1816878:	10800383 	ldbu	r2,14(r2)
 181687c:	10803fcc 	andi	r2,r2,255
 1816880:	10000426 	beq	r2,zero,1816894 <dhcp_bind+0x1a4>
    /* copy offered network mask */
    ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
 1816884:	e0bffb17 	ldw	r2,-20(fp)
 1816888:	10800a17 	ldw	r2,40(r2)
 181688c:	e0bffd15 	stw	r2,-12(fp)
 1816890:	00001506 	br	18168e8 <dhcp_bind+0x1f8>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 1816894:	e0bffb17 	ldw	r2,-20(fp)
 1816898:	10800904 	addi	r2,r2,36
 181689c:	10800003 	ldbu	r2,0(r2)
 18168a0:	e0bffc05 	stb	r2,-16(fp)
    if (first_octet <= 127) {
 18168a4:	e0bffc03 	ldbu	r2,-16(fp)
 18168a8:	10803fcc 	andi	r2,r2,255
 18168ac:	1080201c 	xori	r2,r2,128
 18168b0:	10bfe004 	addi	r2,r2,-128
 18168b4:	10000316 	blt	r2,zero,18168c4 <dhcp_bind+0x1d4>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 18168b8:	00803fc4 	movi	r2,255
 18168bc:	e0bffd15 	stw	r2,-12(fp)
 18168c0:	00000906 	br	18168e8 <dhcp_bind+0x1f8>
    } else if (first_octet >= 192) {
 18168c4:	e0bffc03 	ldbu	r2,-16(fp)
 18168c8:	10803030 	cmpltui	r2,r2,192
 18168cc:	1000041e 	bne	r2,zero,18168e0 <dhcp_bind+0x1f0>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 18168d0:	00804034 	movhi	r2,256
 18168d4:	10bfffc4 	addi	r2,r2,-1
 18168d8:	e0bffd15 	stw	r2,-12(fp)
 18168dc:	00000206 	br	18168e8 <dhcp_bind+0x1f8>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 18168e0:	00bfffd4 	movui	r2,65535
 18168e4:	e0bffd15 	stw	r2,-12(fp)
    }
  }

  ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
 18168e8:	e0bffb17 	ldw	r2,-20(fp)
 18168ec:	10800b17 	ldw	r2,44(r2)
 18168f0:	e0bffe15 	stw	r2,-8(fp)
  /* gateway address not given? */
  if (ip_addr_isany(&gw_addr)) {
 18168f4:	e0bffe17 	ldw	r2,-8(fp)
 18168f8:	1000081e 	bne	r2,zero,181691c <dhcp_bind+0x22c>
    /* copy network address */
    ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 18168fc:	e0bffb17 	ldw	r2,-20(fp)
 1816900:	10c00917 	ldw	r3,36(r2)
 1816904:	e0bffd17 	ldw	r2,-12(fp)
 1816908:	1884703a 	and	r2,r3,r2
 181690c:	e0bffe15 	stw	r2,-8(fp)
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 1816910:	e0bffe17 	ldw	r2,-8(fp)
 1816914:	10804034 	orhi	r2,r2,256
 1816918:	e0bffe15 	stw	r2,-8(fp)
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
 181691c:	e0bffb17 	ldw	r2,-20(fp)
 1816920:	10800904 	addi	r2,r2,36
 1816924:	100b883a 	mov	r5,r2
 1816928:	e13fff17 	ldw	r4,-4(fp)
 181692c:	1819b4c0 	call	1819b4c <netif_set_ipaddr>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&sn_mask)));
  netif_set_netmask(netif, &sn_mask);
 1816930:	e0bffd04 	addi	r2,fp,-12
 1816934:	100b883a 	mov	r5,r2
 1816938:	e13fff17 	ldw	r4,-4(fp)
 181693c:	1819cbc0 	call	1819cbc <netif_set_netmask>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&gw_addr)));
  netif_set_gw(netif, &gw_addr);
 1816940:	e0bffe04 	addi	r2,fp,-8
 1816944:	100b883a 	mov	r5,r2
 1816948:	e13fff17 	ldw	r4,-4(fp)
 181694c:	1819c740 	call	1819c74 <netif_set_gw>
  /* bring the interface up */
  netif_set_up(netif);
 1816950:	e13fff17 	ldw	r4,-4(fp)
 1816954:	1819d300 	call	1819d30 <netif_set_up>
  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_BOUND);
 1816958:	01400284 	movi	r5,10
 181695c:	e13ffb17 	ldw	r4,-20(fp)
 1816960:	181703c0 	call	181703c <dhcp_set_state>
}
 1816964:	0001883a 	nop
 1816968:	e037883a 	mov	sp,fp
 181696c:	dfc00117 	ldw	ra,4(sp)
 1816970:	df000017 	ldw	fp,0(sp)
 1816974:	dec00204 	addi	sp,sp,8
 1816978:	f800283a 	ret

0181697c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 181697c:	defffa04 	addi	sp,sp,-24
 1816980:	dfc00515 	stw	ra,20(sp)
 1816984:	df000415 	stw	fp,16(sp)
 1816988:	df000404 	addi	fp,sp,16
 181698c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1816990:	e0bfff17 	ldw	r2,-4(fp)
 1816994:	10800a17 	ldw	r2,40(r2)
 1816998:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_RENEWING);
 181699c:	01400144 	movi	r5,5
 18169a0:	e13ffd17 	ldw	r4,-12(fp)
 18169a4:	181703c0 	call	181703c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 18169a8:	018000c4 	movi	r6,3
 18169ac:	e17ffd17 	ldw	r5,-12(fp)
 18169b0:	e13fff17 	ldw	r4,-4(fp)
 18169b4:	18180140 	call	1818014 <dhcp_create_msg>
 18169b8:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 18169bc:	e0bffe07 	ldb	r2,-8(fp)
 18169c0:	1000271e 	bne	r2,zero,1816a60 <dhcp_renew+0xe4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 18169c4:	01800084 	movi	r6,2
 18169c8:	01400e44 	movi	r5,57
 18169cc:	e13ffd17 	ldw	r4,-12(fp)
 18169d0:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 18169d4:	e0bfff17 	ldw	r2,-4(fp)
 18169d8:	10800c0b 	ldhu	r2,48(r2)
 18169dc:	10bfffcc 	andi	r2,r2,65535
 18169e0:	100b883a 	mov	r5,r2
 18169e4:	e13ffd17 	ldw	r4,-12(fp)
 18169e8:	18171940 	call	1817194 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
 18169ec:	e17fff17 	ldw	r5,-4(fp)
 18169f0:	e13ffd17 	ldw	r4,-12(fp)
 18169f4:	18173380 	call	1817338 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 18169f8:	e13ffd17 	ldw	r4,-12(fp)
 18169fc:	181861c0 	call	181861c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 1816a00:	e0bffd17 	ldw	r2,-12(fp)
 1816a04:	10c00417 	ldw	r3,16(r2)
 1816a08:	e0bffd17 	ldw	r2,-12(fp)
 1816a0c:	1080060b 	ldhu	r2,24(r2)
 1816a10:	10803c04 	addi	r2,r2,240
 1816a14:	10bfffcc 	andi	r2,r2,65535
 1816a18:	100b883a 	mov	r5,r2
 1816a1c:	1809883a 	mov	r4,r3
 1816a20:	181a5f40 	call	181a5f4 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 1816a24:	e0bffd17 	ldw	r2,-12(fp)
 1816a28:	10c00117 	ldw	r3,4(r2)
 1816a2c:	e0bffd17 	ldw	r2,-12(fp)
 1816a30:	11000417 	ldw	r4,16(r2)
 1816a34:	e0bffd17 	ldw	r2,-12(fp)
 1816a38:	11400804 	addi	r5,r2,32
 1816a3c:	e0bfff17 	ldw	r2,-4(fp)
 1816a40:	d8800015 	stw	r2,0(sp)
 1816a44:	01c010c4 	movi	r7,67
 1816a48:	280d883a 	mov	r6,r5
 1816a4c:	200b883a 	mov	r5,r4
 1816a50:	1809883a 	mov	r4,r3
 1816a54:	182204c0 	call	182204c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 1816a58:	e13ffd17 	ldw	r4,-12(fp)
 1816a5c:	18185980 	call	1818598 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 1816a60:	e0bffd17 	ldw	r2,-12(fp)
 1816a64:	10800343 	ldbu	r2,13(r2)
 1816a68:	10800044 	addi	r2,r2,1
 1816a6c:	1007883a 	mov	r3,r2
 1816a70:	e0bffd17 	ldw	r2,-12(fp)
 1816a74:	10c00345 	stb	r3,13(r2)
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 1816a78:	e0bffd17 	ldw	r2,-12(fp)
 1816a7c:	10800343 	ldbu	r2,13(r2)
 1816a80:	10803fcc 	andi	r2,r2,255
 1816a84:	108002a8 	cmpgeui	r2,r2,10
 1816a88:	1000051e 	bne	r2,zero,1816aa0 <dhcp_renew+0x124>
 1816a8c:	e0bffd17 	ldw	r2,-12(fp)
 1816a90:	10800343 	ldbu	r2,13(r2)
 1816a94:	10803fcc 	andi	r2,r2,255
 1816a98:	1081f424 	muli	r2,r2,2000
 1816a9c:	00000106 	br	1816aa4 <dhcp_renew+0x128>
 1816aa0:	00938804 	movi	r2,20000
 1816aa4:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1816aa8:	e0bffe8b 	ldhu	r2,-6(fp)
 1816aac:	10807cc4 	addi	r2,r2,499
 1816ab0:	01407d04 	movi	r5,500
 1816ab4:	1009883a 	mov	r4,r2
 1816ab8:	180abd80 	call	180abd8 <__divsi3>
 1816abc:	1007883a 	mov	r3,r2
 1816ac0:	e0bffd17 	ldw	r2,-12(fp)
 1816ac4:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 1816ac8:	e0bffe03 	ldbu	r2,-8(fp)
}
 1816acc:	e037883a 	mov	sp,fp
 1816ad0:	dfc00117 	ldw	ra,4(sp)
 1816ad4:	df000017 	ldw	fp,0(sp)
 1816ad8:	dec00204 	addi	sp,sp,8
 1816adc:	f800283a 	ret

01816ae0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 1816ae0:	defffa04 	addi	sp,sp,-24
 1816ae4:	dfc00515 	stw	ra,20(sp)
 1816ae8:	df000415 	stw	fp,16(sp)
 1816aec:	df000404 	addi	fp,sp,16
 1816af0:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1816af4:	e0bfff17 	ldw	r2,-4(fp)
 1816af8:	10800a17 	ldw	r2,40(r2)
 1816afc:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_REBINDING);
 1816b00:	01400104 	movi	r5,4
 1816b04:	e13ffd17 	ldw	r4,-12(fp)
 1816b08:	181703c0 	call	181703c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 1816b0c:	018000c4 	movi	r6,3
 1816b10:	e17ffd17 	ldw	r5,-12(fp)
 1816b14:	e13fff17 	ldw	r4,-4(fp)
 1816b18:	18180140 	call	1818014 <dhcp_create_msg>
 1816b1c:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 1816b20:	e0bffe07 	ldb	r2,-8(fp)
 1816b24:	1000251e 	bne	r2,zero,1816bbc <dhcp_rebind+0xdc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 1816b28:	01800084 	movi	r6,2
 1816b2c:	01400e44 	movi	r5,57
 1816b30:	e13ffd17 	ldw	r4,-12(fp)
 1816b34:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 1816b38:	e0bfff17 	ldw	r2,-4(fp)
 1816b3c:	10800c0b 	ldhu	r2,48(r2)
 1816b40:	10bfffcc 	andi	r2,r2,65535
 1816b44:	100b883a 	mov	r5,r2
 1816b48:	e13ffd17 	ldw	r4,-12(fp)
 1816b4c:	18171940 	call	1817194 <dhcp_option_short>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
 1816b50:	e17fff17 	ldw	r5,-4(fp)
 1816b54:	e13ffd17 	ldw	r4,-12(fp)
 1816b58:	18173380 	call	1817338 <dhcp_option_hostname>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

    dhcp_option_trailer(dhcp);
 1816b5c:	e13ffd17 	ldw	r4,-12(fp)
 1816b60:	181861c0 	call	181861c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 1816b64:	e0bffd17 	ldw	r2,-12(fp)
 1816b68:	10c00417 	ldw	r3,16(r2)
 1816b6c:	e0bffd17 	ldw	r2,-12(fp)
 1816b70:	1080060b 	ldhu	r2,24(r2)
 1816b74:	10803c04 	addi	r2,r2,240
 1816b78:	10bfffcc 	andi	r2,r2,65535
 1816b7c:	100b883a 	mov	r5,r2
 1816b80:	1809883a 	mov	r4,r3
 1816b84:	181a5f40 	call	181a5f4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 1816b88:	e0bffd17 	ldw	r2,-12(fp)
 1816b8c:	10c00117 	ldw	r3,4(r2)
 1816b90:	e0bffd17 	ldw	r2,-12(fp)
 1816b94:	11000417 	ldw	r4,16(r2)
 1816b98:	e0bfff17 	ldw	r2,-4(fp)
 1816b9c:	d8800015 	stw	r2,0(sp)
 1816ba0:	01c010c4 	movi	r7,67
 1816ba4:	d1a00e04 	addi	r6,gp,-32712
 1816ba8:	200b883a 	mov	r5,r4
 1816bac:	1809883a 	mov	r4,r3
 1816bb0:	182204c0 	call	182204c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 1816bb4:	e13ffd17 	ldw	r4,-12(fp)
 1816bb8:	18185980 	call	1818598 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 1816bbc:	e0bffd17 	ldw	r2,-12(fp)
 1816bc0:	10800343 	ldbu	r2,13(r2)
 1816bc4:	10800044 	addi	r2,r2,1
 1816bc8:	1007883a 	mov	r3,r2
 1816bcc:	e0bffd17 	ldw	r2,-12(fp)
 1816bd0:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 1816bd4:	e0bffd17 	ldw	r2,-12(fp)
 1816bd8:	10800343 	ldbu	r2,13(r2)
 1816bdc:	10803fcc 	andi	r2,r2,255
 1816be0:	108002a8 	cmpgeui	r2,r2,10
 1816be4:	1000051e 	bne	r2,zero,1816bfc <dhcp_rebind+0x11c>
 1816be8:	e0bffd17 	ldw	r2,-12(fp)
 1816bec:	10800343 	ldbu	r2,13(r2)
 1816bf0:	10803fcc 	andi	r2,r2,255
 1816bf4:	1080fa24 	muli	r2,r2,1000
 1816bf8:	00000106 	br	1816c00 <dhcp_rebind+0x120>
 1816bfc:	0089c404 	movi	r2,10000
 1816c00:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1816c04:	e0bffe8b 	ldhu	r2,-6(fp)
 1816c08:	10807cc4 	addi	r2,r2,499
 1816c0c:	01407d04 	movi	r5,500
 1816c10:	1009883a 	mov	r4,r2
 1816c14:	180abd80 	call	180abd8 <__divsi3>
 1816c18:	1007883a 	mov	r3,r2
 1816c1c:	e0bffd17 	ldw	r2,-12(fp)
 1816c20:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 1816c24:	e0bffe03 	ldbu	r2,-8(fp)
}
 1816c28:	e037883a 	mov	sp,fp
 1816c2c:	dfc00117 	ldw	ra,4(sp)
 1816c30:	df000017 	ldw	fp,0(sp)
 1816c34:	dec00204 	addi	sp,sp,8
 1816c38:	f800283a 	ret

01816c3c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 1816c3c:	defffa04 	addi	sp,sp,-24
 1816c40:	dfc00515 	stw	ra,20(sp)
 1816c44:	df000415 	stw	fp,16(sp)
 1816c48:	df000404 	addi	fp,sp,16
 1816c4c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1816c50:	e0bfff17 	ldw	r2,-4(fp)
 1816c54:	10800a17 	ldw	r2,40(r2)
 1816c58:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_REBOOTING);
 1816c5c:	014000c4 	movi	r5,3
 1816c60:	e13ffd17 	ldw	r4,-12(fp)
 1816c64:	181703c0 	call	181703c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 1816c68:	018000c4 	movi	r6,3
 1816c6c:	e17ffd17 	ldw	r5,-12(fp)
 1816c70:	e13fff17 	ldw	r4,-4(fp)
 1816c74:	18180140 	call	1818014 <dhcp_create_msg>
 1816c78:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 1816c7c:	e0bffe07 	ldb	r2,-8(fp)
 1816c80:	1000371e 	bne	r2,zero,1816d60 <dhcp_reboot+0x124>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 1816c84:	01800084 	movi	r6,2
 1816c88:	01400e44 	movi	r5,57
 1816c8c:	e13ffd17 	ldw	r4,-12(fp)
 1816c90:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_short(dhcp, 576);
 1816c94:	01409004 	movi	r5,576
 1816c98:	e13ffd17 	ldw	r4,-12(fp)
 1816c9c:	18171940 	call	1817194 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 1816ca0:	01800104 	movi	r6,4
 1816ca4:	01400c84 	movi	r5,50
 1816ca8:	e13ffd17 	ldw	r4,-12(fp)
 1816cac:	18170980 	call	1817098 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 1816cb0:	e0bffd17 	ldw	r2,-12(fp)
 1816cb4:	10800917 	ldw	r2,36(r2)
 1816cb8:	1006d63a 	srli	r3,r2,24
 1816cbc:	e0bffd17 	ldw	r2,-12(fp)
 1816cc0:	10800917 	ldw	r2,36(r2)
 1816cc4:	1004d23a 	srli	r2,r2,8
 1816cc8:	10bfc00c 	andi	r2,r2,65280
 1816ccc:	1886b03a 	or	r3,r3,r2
 1816cd0:	e0bffd17 	ldw	r2,-12(fp)
 1816cd4:	10800917 	ldw	r2,36(r2)
 1816cd8:	10bfc00c 	andi	r2,r2,65280
 1816cdc:	1004923a 	slli	r2,r2,8
 1816ce0:	1886b03a 	or	r3,r3,r2
 1816ce4:	e0bffd17 	ldw	r2,-12(fp)
 1816ce8:	10800917 	ldw	r2,36(r2)
 1816cec:	1004963a 	slli	r2,r2,24
 1816cf0:	1884b03a 	or	r2,r3,r2
 1816cf4:	100b883a 	mov	r5,r2
 1816cf8:	e13ffd17 	ldw	r4,-12(fp)
 1816cfc:	181722c0 	call	181722c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 1816d00:	e13ffd17 	ldw	r4,-12(fp)
 1816d04:	181861c0 	call	181861c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 1816d08:	e0bffd17 	ldw	r2,-12(fp)
 1816d0c:	10c00417 	ldw	r3,16(r2)
 1816d10:	e0bffd17 	ldw	r2,-12(fp)
 1816d14:	1080060b 	ldhu	r2,24(r2)
 1816d18:	10803c04 	addi	r2,r2,240
 1816d1c:	10bfffcc 	andi	r2,r2,65535
 1816d20:	100b883a 	mov	r5,r2
 1816d24:	1809883a 	mov	r4,r3
 1816d28:	181a5f40 	call	181a5f4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 1816d2c:	e0bffd17 	ldw	r2,-12(fp)
 1816d30:	10c00117 	ldw	r3,4(r2)
 1816d34:	e0bffd17 	ldw	r2,-12(fp)
 1816d38:	11000417 	ldw	r4,16(r2)
 1816d3c:	e0bfff17 	ldw	r2,-4(fp)
 1816d40:	d8800015 	stw	r2,0(sp)
 1816d44:	01c010c4 	movi	r7,67
 1816d48:	d1a00e04 	addi	r6,gp,-32712
 1816d4c:	200b883a 	mov	r5,r4
 1816d50:	1809883a 	mov	r4,r3
 1816d54:	182204c0 	call	182204c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 1816d58:	e13ffd17 	ldw	r4,-12(fp)
 1816d5c:	18185980 	call	1818598 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 1816d60:	e0bffd17 	ldw	r2,-12(fp)
 1816d64:	10800343 	ldbu	r2,13(r2)
 1816d68:	10800044 	addi	r2,r2,1
 1816d6c:	1007883a 	mov	r3,r2
 1816d70:	e0bffd17 	ldw	r2,-12(fp)
 1816d74:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 1816d78:	e0bffd17 	ldw	r2,-12(fp)
 1816d7c:	10800343 	ldbu	r2,13(r2)
 1816d80:	10803fcc 	andi	r2,r2,255
 1816d84:	108002a8 	cmpgeui	r2,r2,10
 1816d88:	1000051e 	bne	r2,zero,1816da0 <dhcp_reboot+0x164>
 1816d8c:	e0bffd17 	ldw	r2,-12(fp)
 1816d90:	10800343 	ldbu	r2,13(r2)
 1816d94:	10803fcc 	andi	r2,r2,255
 1816d98:	1080fa24 	muli	r2,r2,1000
 1816d9c:	00000106 	br	1816da4 <dhcp_reboot+0x168>
 1816da0:	0089c404 	movi	r2,10000
 1816da4:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1816da8:	e0bffe8b 	ldhu	r2,-6(fp)
 1816dac:	10807cc4 	addi	r2,r2,499
 1816db0:	01407d04 	movi	r5,500
 1816db4:	1009883a 	mov	r4,r2
 1816db8:	180abd80 	call	180abd8 <__divsi3>
 1816dbc:	1007883a 	mov	r3,r2
 1816dc0:	e0bffd17 	ldw	r2,-12(fp)
 1816dc4:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 1816dc8:	e0bffe03 	ldbu	r2,-8(fp)
}
 1816dcc:	e037883a 	mov	sp,fp
 1816dd0:	dfc00117 	ldw	ra,4(sp)
 1816dd4:	df000017 	ldw	fp,0(sp)
 1816dd8:	dec00204 	addi	sp,sp,8
 1816ddc:	f800283a 	ret

01816de0 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 1816de0:	defffa04 	addi	sp,sp,-24
 1816de4:	dfc00515 	stw	ra,20(sp)
 1816de8:	df000415 	stw	fp,16(sp)
 1816dec:	df000404 	addi	fp,sp,16
 1816df0:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 1816df4:	e0bfff17 	ldw	r2,-4(fp)
 1816df8:	10800a17 	ldw	r2,40(r2)
 1816dfc:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_OFF);
 1816e00:	000b883a 	mov	r5,zero
 1816e04:	e13ffd17 	ldw	r4,-12(fp)
 1816e08:	181703c0 	call	181703c <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero(&dhcp->server_ip_addr);
 1816e0c:	e0bffd17 	ldw	r2,-12(fp)
 1816e10:	10000815 	stw	zero,32(r2)
  ip_addr_set_zero(&dhcp->offered_ip_addr);
 1816e14:	e0bffd17 	ldw	r2,-12(fp)
 1816e18:	10000915 	stw	zero,36(r2)
  ip_addr_set_zero(&dhcp->offered_sn_mask);
 1816e1c:	e0bffd17 	ldw	r2,-12(fp)
 1816e20:	10000a15 	stw	zero,40(r2)
  ip_addr_set_zero(&dhcp->offered_gw_addr);
 1816e24:	e0bffd17 	ldw	r2,-12(fp)
 1816e28:	10000b15 	stw	zero,44(r2)
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 1816e2c:	e0bffd17 	ldw	r2,-12(fp)
 1816e30:	10000e15 	stw	zero,56(r2)
 1816e34:	e0bffd17 	ldw	r2,-12(fp)
 1816e38:	10c00e17 	ldw	r3,56(r2)
 1816e3c:	e0bffd17 	ldw	r2,-12(fp)
 1816e40:	10c00d15 	stw	r3,52(r2)
 1816e44:	e0bffd17 	ldw	r2,-12(fp)
 1816e48:	10c00d17 	ldw	r3,52(r2)
 1816e4c:	e0bffd17 	ldw	r2,-12(fp)
 1816e50:	10c00c15 	stw	r3,48(r2)
  
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 1816e54:	018001c4 	movi	r6,7
 1816e58:	e17ffd17 	ldw	r5,-12(fp)
 1816e5c:	e13fff17 	ldw	r4,-4(fp)
 1816e60:	18180140 	call	1818014 <dhcp_create_msg>
 1816e64:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 1816e68:	e0bffe07 	ldb	r2,-8(fp)
 1816e6c:	10001a1e 	bne	r2,zero,1816ed8 <dhcp_release+0xf8>
    dhcp_option_trailer(dhcp);
 1816e70:	e13ffd17 	ldw	r4,-12(fp)
 1816e74:	181861c0 	call	181861c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 1816e78:	e0bffd17 	ldw	r2,-12(fp)
 1816e7c:	10c00417 	ldw	r3,16(r2)
 1816e80:	e0bffd17 	ldw	r2,-12(fp)
 1816e84:	1080060b 	ldhu	r2,24(r2)
 1816e88:	10803c04 	addi	r2,r2,240
 1816e8c:	10bfffcc 	andi	r2,r2,65535
 1816e90:	100b883a 	mov	r5,r2
 1816e94:	1809883a 	mov	r4,r3
 1816e98:	181a5f40 	call	181a5f4 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 1816e9c:	e0bffd17 	ldw	r2,-12(fp)
 1816ea0:	10c00117 	ldw	r3,4(r2)
 1816ea4:	e0bffd17 	ldw	r2,-12(fp)
 1816ea8:	11000417 	ldw	r4,16(r2)
 1816eac:	e0bffd17 	ldw	r2,-12(fp)
 1816eb0:	11400804 	addi	r5,r2,32
 1816eb4:	e0bfff17 	ldw	r2,-4(fp)
 1816eb8:	d8800015 	stw	r2,0(sp)
 1816ebc:	01c010c4 	movi	r7,67
 1816ec0:	280d883a 	mov	r6,r5
 1816ec4:	200b883a 	mov	r5,r4
 1816ec8:	1809883a 	mov	r4,r3
 1816ecc:	182204c0 	call	182204c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 1816ed0:	e13ffd17 	ldw	r4,-12(fp)
 1816ed4:	18185980 	call	1818598 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 1816ed8:	e0bffd17 	ldw	r2,-12(fp)
 1816edc:	10800343 	ldbu	r2,13(r2)
 1816ee0:	10800044 	addi	r2,r2,1
 1816ee4:	1007883a 	mov	r3,r2
 1816ee8:	e0bffd17 	ldw	r2,-12(fp)
 1816eec:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 1816ef0:	e0bffd17 	ldw	r2,-12(fp)
 1816ef4:	10800343 	ldbu	r2,13(r2)
 1816ef8:	10803fcc 	andi	r2,r2,255
 1816efc:	108002a8 	cmpgeui	r2,r2,10
 1816f00:	1000051e 	bne	r2,zero,1816f18 <dhcp_release+0x138>
 1816f04:	e0bffd17 	ldw	r2,-12(fp)
 1816f08:	10800343 	ldbu	r2,13(r2)
 1816f0c:	10803fcc 	andi	r2,r2,255
 1816f10:	1080fa24 	muli	r2,r2,1000
 1816f14:	00000106 	br	1816f1c <dhcp_release+0x13c>
 1816f18:	0089c404 	movi	r2,10000
 1816f1c:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 1816f20:	e0bffe8b 	ldhu	r2,-6(fp)
 1816f24:	10807cc4 	addi	r2,r2,499
 1816f28:	01407d04 	movi	r5,500
 1816f2c:	1009883a 	mov	r4,r2
 1816f30:	180abd80 	call	180abd8 <__divsi3>
 1816f34:	1007883a 	mov	r3,r2
 1816f38:	e0bffd17 	ldw	r2,-12(fp)
 1816f3c:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
  /* bring the interface down */
  netif_set_down(netif);
 1816f40:	e13fff17 	ldw	r4,-4(fp)
 1816f44:	1819de00 	call	1819de0 <netif_set_down>
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
 1816f48:	d1600d04 	addi	r5,gp,-32716
 1816f4c:	e13fff17 	ldw	r4,-4(fp)
 1816f50:	1819b4c0 	call	1819b4c <netif_set_ipaddr>
  netif_set_gw(netif, IP_ADDR_ANY);
 1816f54:	d1600d04 	addi	r5,gp,-32716
 1816f58:	e13fff17 	ldw	r4,-4(fp)
 1816f5c:	1819c740 	call	1819c74 <netif_set_gw>
  netif_set_netmask(netif, IP_ADDR_ANY);
 1816f60:	d1600d04 	addi	r5,gp,-32716
 1816f64:	e13fff17 	ldw	r4,-4(fp)
 1816f68:	1819cbc0 	call	1819cbc <netif_set_netmask>
  
  return result;
 1816f6c:	e0bffe03 	ldbu	r2,-8(fp)
}
 1816f70:	e037883a 	mov	sp,fp
 1816f74:	dfc00117 	ldw	ra,4(sp)
 1816f78:	df000017 	ldw	fp,0(sp)
 1816f7c:	dec00204 	addi	sp,sp,8
 1816f80:	f800283a 	ret

01816f84 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 1816f84:	defffc04 	addi	sp,sp,-16
 1816f88:	dfc00315 	stw	ra,12(sp)
 1816f8c:	df000215 	stw	fp,8(sp)
 1816f90:	df000204 	addi	fp,sp,8
 1816f94:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 1816f98:	e0bfff17 	ldw	r2,-4(fp)
 1816f9c:	1000091e 	bne	r2,zero,1816fc4 <dhcp_stop+0x40>
 1816fa0:	01c06134 	movhi	r7,388
 1816fa4:	39c38904 	addi	r7,r7,3620
 1816fa8:	01813504 	movi	r6,1236
 1816fac:	01406134 	movhi	r5,388
 1816fb0:	2943ac04 	addi	r5,r5,3760
 1816fb4:	01006134 	movhi	r4,388
 1816fb8:	21039304 	addi	r4,r4,3660
 1816fbc:	1800bd80 	call	1800bd8 <printf>
 1816fc0:	003fff06 	br	1816fc0 <__alt_mem_mem_0+0xff7f6fc0>
  dhcp = netif->dhcp;
 1816fc4:	e0bfff17 	ldw	r2,-4(fp)
 1816fc8:	10800a17 	ldw	r2,40(r2)
 1816fcc:	e0bffe15 	stw	r2,-8(fp)
  /* Remove the flag that says this netif is handled by DHCP. */
  netif->flags &= ~NETIF_FLAG_DHCP;
 1816fd0:	e0bfff17 	ldw	r2,-4(fp)
 1816fd4:	10c00e43 	ldbu	r3,57(r2)
 1816fd8:	00bffdc4 	movi	r2,-9
 1816fdc:	1884703a 	and	r2,r3,r2
 1816fe0:	1007883a 	mov	r3,r2
 1816fe4:	e0bfff17 	ldw	r2,-4(fp)
 1816fe8:	10c00e45 	stb	r3,57(r2)

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 1816fec:	e0bffe17 	ldw	r2,-8(fp)
 1816ff0:	10000c26 	beq	r2,zero,1817024 <dhcp_stop+0xa0>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    if (dhcp->pcb != NULL) {
 1816ff4:	e0bffe17 	ldw	r2,-8(fp)
 1816ff8:	10800117 	ldw	r2,4(r2)
 1816ffc:	10000626 	beq	r2,zero,1817018 <dhcp_stop+0x94>
      udp_remove(dhcp->pcb);
 1817000:	e0bffe17 	ldw	r2,-8(fp)
 1817004:	10800117 	ldw	r2,4(r2)
 1817008:	1009883a 	mov	r4,r2
 181700c:	18227f80 	call	18227f8 <udp_remove>
      dhcp->pcb = NULL;
 1817010:	e0bffe17 	ldw	r2,-8(fp)
 1817014:	10000115 	stw	zero,4(r2)
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    dhcp_set_state(dhcp, DHCP_OFF);
 1817018:	000b883a 	mov	r5,zero
 181701c:	e13ffe17 	ldw	r4,-8(fp)
 1817020:	181703c0 	call	181703c <dhcp_set_state>
  }
}
 1817024:	0001883a 	nop
 1817028:	e037883a 	mov	sp,fp
 181702c:	dfc00117 	ldw	ra,4(sp)
 1817030:	df000017 	ldw	fp,0(sp)
 1817034:	dec00204 	addi	sp,sp,8
 1817038:	f800283a 	ret

0181703c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 181703c:	defffd04 	addi	sp,sp,-12
 1817040:	df000215 	stw	fp,8(sp)
 1817044:	df000204 	addi	fp,sp,8
 1817048:	e13ffe15 	stw	r4,-8(fp)
 181704c:	2805883a 	mov	r2,r5
 1817050:	e0bfff05 	stb	r2,-4(fp)
  if (new_state != dhcp->state) {
 1817054:	e0bffe17 	ldw	r2,-8(fp)
 1817058:	10800303 	ldbu	r2,12(r2)
 181705c:	10c03fcc 	andi	r3,r2,255
 1817060:	e0bfff03 	ldbu	r2,-4(fp)
 1817064:	18800726 	beq	r3,r2,1817084 <dhcp_set_state+0x48>
    dhcp->state = new_state;
 1817068:	e0bffe17 	ldw	r2,-8(fp)
 181706c:	e0ffff03 	ldbu	r3,-4(fp)
 1817070:	10c00305 	stb	r3,12(r2)
    dhcp->tries = 0;
 1817074:	e0bffe17 	ldw	r2,-8(fp)
 1817078:	10000345 	stb	zero,13(r2)
    dhcp->request_timeout = 0;
 181707c:	e0bffe17 	ldw	r2,-8(fp)
 1817080:	1000068d 	sth	zero,26(r2)
  }
}
 1817084:	0001883a 	nop
 1817088:	e037883a 	mov	sp,fp
 181708c:	df000017 	ldw	fp,0(sp)
 1817090:	dec00104 	addi	sp,sp,4
 1817094:	f800283a 	ret

01817098 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 1817098:	defffc04 	addi	sp,sp,-16
 181709c:	df000315 	stw	fp,12(sp)
 18170a0:	df000304 	addi	fp,sp,12
 18170a4:	e13ffd15 	stw	r4,-12(fp)
 18170a8:	2807883a 	mov	r3,r5
 18170ac:	3005883a 	mov	r2,r6
 18170b0:	e0fffe05 	stb	r3,-8(fp)
 18170b4:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 18170b8:	e0bffd17 	ldw	r2,-12(fp)
 18170bc:	10c00517 	ldw	r3,20(r2)
 18170c0:	e0bffd17 	ldw	r2,-12(fp)
 18170c4:	1080060b 	ldhu	r2,24(r2)
 18170c8:	11000044 	addi	r4,r2,1
 18170cc:	200b883a 	mov	r5,r4
 18170d0:	e13ffd17 	ldw	r4,-12(fp)
 18170d4:	2140060d 	sth	r5,24(r4)
 18170d8:	10bfffcc 	andi	r2,r2,65535
 18170dc:	1885883a 	add	r2,r3,r2
 18170e0:	10803c04 	addi	r2,r2,240
 18170e4:	e0fffe03 	ldbu	r3,-8(fp)
 18170e8:	10c00005 	stb	r3,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 18170ec:	e0bffd17 	ldw	r2,-12(fp)
 18170f0:	10c00517 	ldw	r3,20(r2)
 18170f4:	e0bffd17 	ldw	r2,-12(fp)
 18170f8:	1080060b 	ldhu	r2,24(r2)
 18170fc:	11000044 	addi	r4,r2,1
 1817100:	200b883a 	mov	r5,r4
 1817104:	e13ffd17 	ldw	r4,-12(fp)
 1817108:	2140060d 	sth	r5,24(r4)
 181710c:	10bfffcc 	andi	r2,r2,65535
 1817110:	1885883a 	add	r2,r3,r2
 1817114:	10803c04 	addi	r2,r2,240
 1817118:	e0ffff03 	ldbu	r3,-4(fp)
 181711c:	10c00005 	stb	r3,0(r2)
}
 1817120:	0001883a 	nop
 1817124:	e037883a 	mov	sp,fp
 1817128:	df000017 	ldw	fp,0(sp)
 181712c:	dec00104 	addi	sp,sp,4
 1817130:	f800283a 	ret

01817134 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 1817134:	defffd04 	addi	sp,sp,-12
 1817138:	df000215 	stw	fp,8(sp)
 181713c:	df000204 	addi	fp,sp,8
 1817140:	e13ffe15 	stw	r4,-8(fp)
 1817144:	2805883a 	mov	r2,r5
 1817148:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 181714c:	e0bffe17 	ldw	r2,-8(fp)
 1817150:	10c00517 	ldw	r3,20(r2)
 1817154:	e0bffe17 	ldw	r2,-8(fp)
 1817158:	1080060b 	ldhu	r2,24(r2)
 181715c:	11000044 	addi	r4,r2,1
 1817160:	200b883a 	mov	r5,r4
 1817164:	e13ffe17 	ldw	r4,-8(fp)
 1817168:	2140060d 	sth	r5,24(r4)
 181716c:	10bfffcc 	andi	r2,r2,65535
 1817170:	1885883a 	add	r2,r3,r2
 1817174:	10803c04 	addi	r2,r2,240
 1817178:	e0ffff03 	ldbu	r3,-4(fp)
 181717c:	10c00005 	stb	r3,0(r2)
}
 1817180:	0001883a 	nop
 1817184:	e037883a 	mov	sp,fp
 1817188:	df000017 	ldw	fp,0(sp)
 181718c:	dec00104 	addi	sp,sp,4
 1817190:	f800283a 	ret

01817194 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 1817194:	defffd04 	addi	sp,sp,-12
 1817198:	df000215 	stw	fp,8(sp)
 181719c:	df000204 	addi	fp,sp,8
 18171a0:	e13ffe15 	stw	r4,-8(fp)
 18171a4:	2805883a 	mov	r2,r5
 18171a8:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 18171ac:	e0bffe17 	ldw	r2,-8(fp)
 18171b0:	10c00517 	ldw	r3,20(r2)
 18171b4:	e0bffe17 	ldw	r2,-8(fp)
 18171b8:	1080060b 	ldhu	r2,24(r2)
 18171bc:	11000044 	addi	r4,r2,1
 18171c0:	200b883a 	mov	r5,r4
 18171c4:	e13ffe17 	ldw	r4,-8(fp)
 18171c8:	2140060d 	sth	r5,24(r4)
 18171cc:	10bfffcc 	andi	r2,r2,65535
 18171d0:	e13fff0b 	ldhu	r4,-4(fp)
 18171d4:	2008d23a 	srli	r4,r4,8
 18171d8:	1885883a 	add	r2,r3,r2
 18171dc:	10803c04 	addi	r2,r2,240
 18171e0:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 18171e4:	e0bffe17 	ldw	r2,-8(fp)
 18171e8:	10c00517 	ldw	r3,20(r2)
 18171ec:	e0bffe17 	ldw	r2,-8(fp)
 18171f0:	1080060b 	ldhu	r2,24(r2)
 18171f4:	11000044 	addi	r4,r2,1
 18171f8:	200b883a 	mov	r5,r4
 18171fc:	e13ffe17 	ldw	r4,-8(fp)
 1817200:	2140060d 	sth	r5,24(r4)
 1817204:	10bfffcc 	andi	r2,r2,65535
 1817208:	e13fff0b 	ldhu	r4,-4(fp)
 181720c:	1885883a 	add	r2,r3,r2
 1817210:	10803c04 	addi	r2,r2,240
 1817214:	11000005 	stb	r4,0(r2)
}
 1817218:	0001883a 	nop
 181721c:	e037883a 	mov	sp,fp
 1817220:	df000017 	ldw	fp,0(sp)
 1817224:	dec00104 	addi	sp,sp,4
 1817228:	f800283a 	ret

0181722c <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 181722c:	defffd04 	addi	sp,sp,-12
 1817230:	df000215 	stw	fp,8(sp)
 1817234:	df000204 	addi	fp,sp,8
 1817238:	e13ffe15 	stw	r4,-8(fp)
 181723c:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 1817240:	e0bffe17 	ldw	r2,-8(fp)
 1817244:	10c00517 	ldw	r3,20(r2)
 1817248:	e0bffe17 	ldw	r2,-8(fp)
 181724c:	1080060b 	ldhu	r2,24(r2)
 1817250:	11000044 	addi	r4,r2,1
 1817254:	200b883a 	mov	r5,r4
 1817258:	e13ffe17 	ldw	r4,-8(fp)
 181725c:	2140060d 	sth	r5,24(r4)
 1817260:	10bfffcc 	andi	r2,r2,65535
 1817264:	e13fff17 	ldw	r4,-4(fp)
 1817268:	2008d63a 	srli	r4,r4,24
 181726c:	1885883a 	add	r2,r3,r2
 1817270:	10803c04 	addi	r2,r2,240
 1817274:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 1817278:	e0bffe17 	ldw	r2,-8(fp)
 181727c:	10c00517 	ldw	r3,20(r2)
 1817280:	e0bffe17 	ldw	r2,-8(fp)
 1817284:	1080060b 	ldhu	r2,24(r2)
 1817288:	11000044 	addi	r4,r2,1
 181728c:	200b883a 	mov	r5,r4
 1817290:	e13ffe17 	ldw	r4,-8(fp)
 1817294:	2140060d 	sth	r5,24(r4)
 1817298:	10bfffcc 	andi	r2,r2,65535
 181729c:	e13fff17 	ldw	r4,-4(fp)
 18172a0:	21003fec 	andhi	r4,r4,255
 18172a4:	2008d43a 	srli	r4,r4,16
 18172a8:	1885883a 	add	r2,r3,r2
 18172ac:	10803c04 	addi	r2,r2,240
 18172b0:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 18172b4:	e0bffe17 	ldw	r2,-8(fp)
 18172b8:	10c00517 	ldw	r3,20(r2)
 18172bc:	e0bffe17 	ldw	r2,-8(fp)
 18172c0:	1080060b 	ldhu	r2,24(r2)
 18172c4:	11000044 	addi	r4,r2,1
 18172c8:	200b883a 	mov	r5,r4
 18172cc:	e13ffe17 	ldw	r4,-8(fp)
 18172d0:	2140060d 	sth	r5,24(r4)
 18172d4:	10bfffcc 	andi	r2,r2,65535
 18172d8:	e13fff17 	ldw	r4,-4(fp)
 18172dc:	213fc00c 	andi	r4,r4,65280
 18172e0:	2008d23a 	srli	r4,r4,8
 18172e4:	1885883a 	add	r2,r3,r2
 18172e8:	10803c04 	addi	r2,r2,240
 18172ec:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 18172f0:	e0bffe17 	ldw	r2,-8(fp)
 18172f4:	10c00517 	ldw	r3,20(r2)
 18172f8:	e0bffe17 	ldw	r2,-8(fp)
 18172fc:	1080060b 	ldhu	r2,24(r2)
 1817300:	11000044 	addi	r4,r2,1
 1817304:	200b883a 	mov	r5,r4
 1817308:	e13ffe17 	ldw	r4,-8(fp)
 181730c:	2140060d 	sth	r5,24(r4)
 1817310:	10bfffcc 	andi	r2,r2,65535
 1817314:	e13fff17 	ldw	r4,-4(fp)
 1817318:	1885883a 	add	r2,r3,r2
 181731c:	10803c04 	addi	r2,r2,240
 1817320:	11000005 	stb	r4,0(r2)
}
 1817324:	0001883a 	nop
 1817328:	e037883a 	mov	sp,fp
 181732c:	df000017 	ldw	fp,0(sp)
 1817330:	dec00104 	addi	sp,sp,4
 1817334:	f800283a 	ret

01817338 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
 1817338:	defff804 	addi	sp,sp,-32
 181733c:	dfc00715 	stw	ra,28(sp)
 1817340:	df000615 	stw	fp,24(sp)
 1817344:	df000604 	addi	fp,sp,24
 1817348:	e13ffe15 	stw	r4,-8(fp)
 181734c:	e17fff15 	stw	r5,-4(fp)
  if (netif->hostname != NULL) {
 1817350:	e0bfff17 	ldw	r2,-4(fp)
 1817354:	10800b17 	ldw	r2,44(r2)
 1817358:	10002826 	beq	r2,zero,18173fc <dhcp_option_hostname+0xc4>
    size_t namelen = strlen(netif->hostname);
 181735c:	e0bfff17 	ldw	r2,-4(fp)
 1817360:	10800b17 	ldw	r2,44(r2)
 1817364:	1009883a 	mov	r4,r2
 1817368:	18075980 	call	1807598 <strlen>
 181736c:	e0bffc15 	stw	r2,-16(fp)
    if (namelen > 0) {
 1817370:	e0bffc17 	ldw	r2,-16(fp)
 1817374:	10002126 	beq	r2,zero,18173fc <dhcp_option_hostname+0xc4>
      u8_t len;
      const char *p = netif->hostname;
 1817378:	e0bfff17 	ldw	r2,-4(fp)
 181737c:	10800b17 	ldw	r2,44(r2)
 1817380:	e0bffb15 	stw	r2,-20(fp)
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
 1817384:	e0bffe17 	ldw	r2,-8(fp)
 1817388:	1080060b 	ldhu	r2,24(r2)
 181738c:	10bfffcc 	andi	r2,r2,65535
 1817390:	00c01044 	movi	r3,65
 1817394:	1885c83a 	sub	r2,r3,r2
 1817398:	e0bffd15 	stw	r2,-12(fp)
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
      len = LWIP_MIN(namelen, available);
 181739c:	e0fffc17 	ldw	r3,-16(fp)
 18173a0:	e0bffd17 	ldw	r2,-12(fp)
 18173a4:	1880012e 	bgeu	r3,r2,18173ac <dhcp_option_hostname+0x74>
 18173a8:	1805883a 	mov	r2,r3
 18173ac:	e0bffa05 	stb	r2,-24(fp)
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, len);
 18173b0:	e0bffa03 	ldbu	r2,-24(fp)
 18173b4:	100d883a 	mov	r6,r2
 18173b8:	01400304 	movi	r5,12
 18173bc:	e13ffe17 	ldw	r4,-8(fp)
 18173c0:	18170980 	call	1817098 <dhcp_option>
      while (len--) {
 18173c4:	00000806 	br	18173e8 <dhcp_option_hostname+0xb0>
        dhcp_option_byte(dhcp, *p++);
 18173c8:	e0bffb17 	ldw	r2,-20(fp)
 18173cc:	10c00044 	addi	r3,r2,1
 18173d0:	e0fffb15 	stw	r3,-20(fp)
 18173d4:	10800003 	ldbu	r2,0(r2)
 18173d8:	10803fcc 	andi	r2,r2,255
 18173dc:	100b883a 	mov	r5,r2
 18173e0:	e13ffe17 	ldw	r4,-8(fp)
 18173e4:	18171340 	call	1817134 <dhcp_option_byte>
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
      len = LWIP_MIN(namelen, available);
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, len);
      while (len--) {
 18173e8:	e0bffa03 	ldbu	r2,-24(fp)
 18173ec:	10ffffc4 	addi	r3,r2,-1
 18173f0:	e0fffa05 	stb	r3,-24(fp)
 18173f4:	10803fcc 	andi	r2,r2,255
 18173f8:	103ff31e 	bne	r2,zero,18173c8 <__alt_mem_mem_0+0xff7f73c8>
        dhcp_option_byte(dhcp, *p++);
      }
    }
  }
}
 18173fc:	0001883a 	nop
 1817400:	e037883a 	mov	sp,fp
 1817404:	dfc00117 	ldw	ra,4(sp)
 1817408:	df000017 	ldw	fp,0(sp)
 181740c:	dec00204 	addi	sp,sp,8
 1817410:	f800283a 	ret

01817414 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 1817414:	defff004 	addi	sp,sp,-64
 1817418:	dfc00f15 	stw	ra,60(sp)
 181741c:	df000e15 	stw	fp,56(sp)
 1817420:	df000e04 	addi	fp,sp,56
 1817424:	e13ffe15 	stw	r4,-8(fp)
 1817428:	e17fff15 	stw	r5,-4(fp)
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 181742c:	e03ff615 	stw	zero,-40(fp)
  int parse_sname_as_options = 0;
 1817430:	e03ff715 	stw	zero,-36(fp)

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 1817434:	01800284 	movi	r6,10
 1817438:	000b883a 	mov	r5,zero
 181743c:	010061b4 	movhi	r4,390
 1817440:	21075f04 	addi	r4,r4,7548
 1817444:	18061940 	call	1806194 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 1817448:	e0bfff17 	ldw	r2,-4(fp)
 181744c:	1080028b 	ldhu	r2,10(r2)
 1817450:	10bfffcc 	andi	r2,r2,65535
 1817454:	10800b28 	cmpgeui	r2,r2,44
 1817458:	1000021e 	bne	r2,zero,1817464 <dhcp_parse_reply+0x50>
    return ERR_BUF;
 181745c:	00bfff84 	movi	r2,-2
 1817460:	00021106 	br	1817ca8 <dhcp_parse_reply+0x894>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 1817464:	e0bfff17 	ldw	r2,-4(fp)
 1817468:	10c00117 	ldw	r3,4(r2)
 181746c:	e0bffe17 	ldw	r2,-8(fp)
 1817470:	10c00215 	stw	r3,8(r2)
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 1817474:	00803c04 	movi	r2,240
 1817478:	e0bff40d 	sth	r2,-48(fp)
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 181747c:	e0bfff17 	ldw	r2,-4(fp)
 1817480:	1080020b 	ldhu	r2,8(r2)
 1817484:	e0bff48d 	sth	r2,-46(fp)
again:
  q = p;
 1817488:	e0bfff17 	ldw	r2,-4(fp)
 181748c:	e0bff515 	stw	r2,-44(fp)
  while((q != NULL) && (options_idx >= q->len)) {
 1817490:	00000d06 	br	18174c8 <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
 1817494:	e0bff517 	ldw	r2,-44(fp)
 1817498:	1080028b 	ldhu	r2,10(r2)
 181749c:	e0fff40b 	ldhu	r3,-48(fp)
 18174a0:	1885c83a 	sub	r2,r3,r2
 18174a4:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max -= q->len;
 18174a8:	e0bff517 	ldw	r2,-44(fp)
 18174ac:	1080028b 	ldhu	r2,10(r2)
 18174b0:	e0fff48b 	ldhu	r3,-46(fp)
 18174b4:	1885c83a 	sub	r2,r3,r2
 18174b8:	e0bff48d 	sth	r2,-46(fp)
    q = q->next;
 18174bc:	e0bff517 	ldw	r2,-44(fp)
 18174c0:	10800017 	ldw	r2,0(r2)
 18174c4:	e0bff515 	stw	r2,-44(fp)
  options_idx = DHCP_OPTIONS_OFS;
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while((q != NULL) && (options_idx >= q->len)) {
 18174c8:	e0bff517 	ldw	r2,-44(fp)
 18174cc:	10000526 	beq	r2,zero,18174e4 <dhcp_parse_reply+0xd0>
 18174d0:	e0bff517 	ldw	r2,-44(fp)
 18174d4:	1080028b 	ldhu	r2,10(r2)
 18174d8:	10bfffcc 	andi	r2,r2,65535
 18174dc:	e0fff40b 	ldhu	r3,-48(fp)
 18174e0:	18bfec2e 	bgeu	r3,r2,1817494 <__alt_mem_mem_0+0xff7f7494>
    options_idx -= q->len;
    options_idx_max -= q->len;
    q = q->next;
  }
  if (q == NULL) {
 18174e4:	e0bff517 	ldw	r2,-44(fp)
 18174e8:	1000021e 	bne	r2,zero,18174f4 <dhcp_parse_reply+0xe0>
    return ERR_BUF;
 18174ec:	00bfff84 	movi	r2,-2
 18174f0:	0001ed06 	br	1817ca8 <dhcp_parse_reply+0x894>
  }
  offset = options_idx;
 18174f4:	e0bff40b 	ldhu	r2,-48(fp)
 18174f8:	e0bff30d 	sth	r2,-52(fp)
  offset_max = options_idx_max;
 18174fc:	e0bff48b 	ldhu	r2,-46(fp)
 1817500:	e0bff38d 	sth	r2,-50(fp)
  options = (u8_t*)q->payload;
 1817504:	e0bff517 	ldw	r2,-44(fp)
 1817508:	10800117 	ldw	r2,4(r2)
 181750c:	e0bff215 	stw	r2,-56(fp)
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
 1817510:	0001a906 	br	1817bb8 <dhcp_parse_reply+0x7a4>
    u8_t op = options[offset];
 1817514:	e0bff30b 	ldhu	r2,-52(fp)
 1817518:	e0fff217 	ldw	r3,-56(fp)
 181751c:	1885883a 	add	r2,r3,r2
 1817520:	10800003 	ldbu	r2,0(r2)
 1817524:	e0bffa85 	stb	r2,-22(fp)
    u8_t len;
    u8_t decode_len = 0;
 1817528:	e03ff845 	stb	zero,-31(fp)
    int decode_idx = -1;
 181752c:	00bfffc4 	movi	r2,-1
 1817530:	e0bff915 	stw	r2,-28(fp)
    u16_t val_offset = offset + 2;
 1817534:	e0bff30b 	ldhu	r2,-52(fp)
 1817538:	10800084 	addi	r2,r2,2
 181753c:	e0bffa0d 	sth	r2,-24(fp)
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
 1817540:	e0bff30b 	ldhu	r2,-52(fp)
 1817544:	10c00044 	addi	r3,r2,1
 1817548:	e0bff517 	ldw	r2,-44(fp)
 181754c:	1080028b 	ldhu	r2,10(r2)
 1817550:	10bfffcc 	andi	r2,r2,65535
 1817554:	1880070e 	bge	r3,r2,1817574 <dhcp_parse_reply+0x160>
      len = options[offset + 1];
 1817558:	e0bff30b 	ldhu	r2,-52(fp)
 181755c:	10800044 	addi	r2,r2,1
 1817560:	e0fff217 	ldw	r3,-56(fp)
 1817564:	1885883a 	add	r2,r3,r2
 1817568:	10800003 	ldbu	r2,0(r2)
 181756c:	e0bff805 	stb	r2,-32(fp)
 1817570:	00000a06 	br	181759c <dhcp_parse_reply+0x188>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 1817574:	e0bff517 	ldw	r2,-44(fp)
 1817578:	10800017 	ldw	r2,0(r2)
 181757c:	10000526 	beq	r2,zero,1817594 <dhcp_parse_reply+0x180>
 1817580:	e0bff517 	ldw	r2,-44(fp)
 1817584:	10800017 	ldw	r2,0(r2)
 1817588:	10800117 	ldw	r2,4(r2)
 181758c:	10800003 	ldbu	r2,0(r2)
 1817590:	00000106 	br	1817598 <dhcp_parse_reply+0x184>
 1817594:	0005883a 	mov	r2,zero
 1817598:	e0bff805 	stb	r2,-32(fp)
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 181759c:	e0bff803 	ldbu	r2,-32(fp)
 18175a0:	e0bff845 	stb	r2,-31(fp)
    switch(op) {
 18175a4:	e0bffa83 	ldbu	r2,-22(fp)
 18175a8:	10c00f28 	cmpgeui	r3,r2,60
 18175ac:	1800e41e 	bne	r3,zero,1817940 <dhcp_parse_reply+0x52c>
 18175b0:	100690ba 	slli	r3,r2,2
 18175b4:	00806074 	movhi	r2,385
 18175b8:	109d7204 	addi	r2,r2,30152
 18175bc:	1885883a 	add	r2,r3,r2
 18175c0:	10800017 	ldw	r2,0(r2)
 18175c4:	1000683a 	jmp	r2
 18175c8:	018176b8 	rdprs	r6,zero,1498
 18175cc:	018176d4 	movui	r6,1499
 18175d0:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18175d4:	01817710 	cmplti	r6,zero,1500
 18175d8:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18175dc:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18175e0:	01817754 	movui	r6,1501
 18175e4:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18175e8:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18175ec:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18175f0:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18175f4:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18175f8:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18175fc:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817600:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817604:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817608:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 181760c:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817610:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817614:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817618:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 181761c:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817620:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817624:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817628:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 181762c:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817630:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817634:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817638:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 181763c:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817640:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817644:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817648:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 181764c:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817650:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817654:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817658:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 181765c:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817660:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817664:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817668:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 181766c:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817670:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817674:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817678:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 181767c:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817680:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817684:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817688:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 181768c:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817690:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 1817694:	018177dc 	xori	r6,zero,1503
 1817698:	01817818 	cmpnei	r6,zero,1504
 181769c:	01817850 	cmplti	r6,zero,1505
 18176a0:	0181788c 	andi	r6,zero,1506
 18176a4:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18176a8:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18176ac:	01817940 	call	181794 <__alt_mem_tse_descriptor_memory_0+0x181794>
 18176b0:	018178c8 	cmpgei	r6,zero,1507
 18176b4:	01817904 	movi	r6,1508
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 18176b8:	e03ff805 	stb	zero,-32(fp)
 18176bc:	e0bff803 	ldbu	r2,-32(fp)
 18176c0:	e0bff845 	stb	r2,-31(fp)
        /* will be increased below */
        offset--;
 18176c4:	e0bff30b 	ldhu	r2,-52(fp)
 18176c8:	10bfffc4 	addi	r2,r2,-1
 18176cc:	e0bff30d 	sth	r2,-52(fp)
        break;
 18176d0:	00009d06 	br	1817948 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 18176d4:	e0bff803 	ldbu	r2,-32(fp)
 18176d8:	10800120 	cmpeqi	r2,r2,4
 18176dc:	1000091e 	bne	r2,zero,1817704 <dhcp_parse_reply+0x2f0>
 18176e0:	01c06134 	movhi	r7,388
 18176e4:	39c38904 	addi	r7,r7,3620
 18176e8:	01816204 	movi	r6,1416
 18176ec:	01406134 	movhi	r5,388
 18176f0:	2943b304 	addi	r5,r5,3788
 18176f4:	01006134 	movhi	r4,388
 18176f8:	21039304 	addi	r4,r4,3660
 18176fc:	1800bd80 	call	1800bd8 <printf>
 1817700:	003fff06 	br	1817700 <__alt_mem_mem_0+0xff7f7700>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 1817704:	00800184 	movi	r2,6
 1817708:	e0bff915 	stw	r2,-28(fp)
        break;
 181770c:	00008e06 	br	1817948 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 1817710:	00800104 	movi	r2,4
 1817714:	e0bff845 	stb	r2,-31(fp)
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 1817718:	e0fff803 	ldbu	r3,-32(fp)
 181771c:	e0bff843 	ldbu	r2,-31(fp)
 1817720:	1880092e 	bgeu	r3,r2,1817748 <dhcp_parse_reply+0x334>
 1817724:	01c06134 	movhi	r7,388
 1817728:	39c38904 	addi	r7,r7,3620
 181772c:	01816344 	movi	r6,1421
 1817730:	01406134 	movhi	r5,388
 1817734:	2943b604 	addi	r5,r5,3800
 1817738:	01006134 	movhi	r4,388
 181773c:	21039304 	addi	r4,r4,3660
 1817740:	1800bd80 	call	1800bd8 <printf>
 1817744:	003fff06 	br	1817744 <__alt_mem_mem_0+0xff7f7744>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 1817748:	008001c4 	movi	r2,7
 181774c:	e0bff915 	stw	r2,-28(fp)
        break;
 1817750:	00007d06 	br	1817948 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
 1817754:	e0bff803 	ldbu	r2,-32(fp)
 1817758:	108000cc 	andi	r2,r2,3
 181775c:	10803fcc 	andi	r2,r2,255
 1817760:	10000926 	beq	r2,zero,1817788 <dhcp_parse_reply+0x374>
 1817764:	01c06134 	movhi	r7,388
 1817768:	39c38904 	addi	r7,r7,3620
 181776c:	01816484 	movi	r6,1426
 1817770:	01406134 	movhi	r5,388
 1817774:	2943bb04 	addi	r5,r5,3820
 1817778:	01006134 	movhi	r4,388
 181777c:	21039304 	addi	r4,r4,3660
 1817780:	1800bd80 	call	1800bd8 <printf>
 1817784:	003fff06 	br	1817784 <__alt_mem_mem_0+0xff7f7784>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 1817788:	e0bff803 	ldbu	r2,-32(fp)
 181778c:	10c03fcc 	andi	r3,r2,255
 1817790:	18c00270 	cmpltui	r3,r3,9
 1817794:	1800011e 	bne	r3,zero,181779c <dhcp_parse_reply+0x388>
 1817798:	00800204 	movi	r2,8
 181779c:	e0bff845 	stb	r2,-31(fp)
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 18177a0:	e0fff803 	ldbu	r3,-32(fp)
 18177a4:	e0bff843 	ldbu	r2,-31(fp)
 18177a8:	1880092e 	bgeu	r3,r2,18177d0 <dhcp_parse_reply+0x3bc>
 18177ac:	01c06134 	movhi	r7,388
 18177b0:	39c38904 	addi	r7,r7,3620
 18177b4:	01816544 	movi	r6,1429
 18177b8:	01406134 	movhi	r5,388
 18177bc:	2943b604 	addi	r5,r5,3800
 18177c0:	01006134 	movhi	r4,388
 18177c4:	21039304 	addi	r4,r4,3660
 18177c8:	1800bd80 	call	1800bd8 <printf>
 18177cc:	003fff06 	br	18177cc <__alt_mem_mem_0+0xff7f77cc>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 18177d0:	00800204 	movi	r2,8
 18177d4:	e0bff915 	stw	r2,-28(fp)
        break;
 18177d8:	00005b06 	br	1817948 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 18177dc:	e0bff803 	ldbu	r2,-32(fp)
 18177e0:	10800120 	cmpeqi	r2,r2,4
 18177e4:	1000091e 	bne	r2,zero,181780c <dhcp_parse_reply+0x3f8>
 18177e8:	01c06134 	movhi	r7,388
 18177ec:	39c38904 	addi	r7,r7,3620
 18177f0:	01816644 	movi	r6,1433
 18177f4:	01406134 	movhi	r5,388
 18177f8:	2943b304 	addi	r5,r5,3788
 18177fc:	01006134 	movhi	r4,388
 1817800:	21039304 	addi	r4,r4,3660
 1817804:	1800bd80 	call	1800bd8 <printf>
 1817808:	003fff06 	br	1817808 <__alt_mem_mem_0+0xff7f7808>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 181780c:	008000c4 	movi	r2,3
 1817810:	e0bff915 	stw	r2,-28(fp)
        break;
 1817814:	00004c06 	br	1817948 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 1817818:	e0bff803 	ldbu	r2,-32(fp)
 181781c:	10800060 	cmpeqi	r2,r2,1
 1817820:	1000091e 	bne	r2,zero,1817848 <dhcp_parse_reply+0x434>
 1817824:	01c06134 	movhi	r7,388
 1817828:	39c38904 	addi	r7,r7,3620
 181782c:	01816744 	movi	r6,1437
 1817830:	01406134 	movhi	r5,388
 1817834:	2943bf04 	addi	r5,r5,3836
 1817838:	01006134 	movhi	r4,388
 181783c:	21039304 	addi	r4,r4,3660
 1817840:	1800bd80 	call	1800bd8 <printf>
 1817844:	003fff06 	br	1817844 <__alt_mem_mem_0+0xff7f7844>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 1817848:	e03ff915 	stw	zero,-28(fp)
        break;
 181784c:	00003e06 	br	1817948 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 1817850:	e0bff803 	ldbu	r2,-32(fp)
 1817854:	10800060 	cmpeqi	r2,r2,1
 1817858:	1000091e 	bne	r2,zero,1817880 <dhcp_parse_reply+0x46c>
 181785c:	01c06134 	movhi	r7,388
 1817860:	39c38904 	addi	r7,r7,3620
 1817864:	01816844 	movi	r6,1441
 1817868:	01406134 	movhi	r5,388
 181786c:	2943bf04 	addi	r5,r5,3836
 1817870:	01006134 	movhi	r4,388
 1817874:	21039304 	addi	r4,r4,3660
 1817878:	1800bd80 	call	1800bd8 <printf>
 181787c:	003fff06 	br	181787c <__alt_mem_mem_0+0xff7f787c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 1817880:	00800044 	movi	r2,1
 1817884:	e0bff915 	stw	r2,-28(fp)
        break;
 1817888:	00002f06 	br	1817948 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 181788c:	e0bff803 	ldbu	r2,-32(fp)
 1817890:	10800120 	cmpeqi	r2,r2,4
 1817894:	1000091e 	bne	r2,zero,18178bc <dhcp_parse_reply+0x4a8>
 1817898:	01c06134 	movhi	r7,388
 181789c:	39c38904 	addi	r7,r7,3620
 18178a0:	01816944 	movi	r6,1445
 18178a4:	01406134 	movhi	r5,388
 18178a8:	2943b304 	addi	r5,r5,3788
 18178ac:	01006134 	movhi	r4,388
 18178b0:	21039304 	addi	r4,r4,3660
 18178b4:	1800bd80 	call	1800bd8 <printf>
 18178b8:	003fff06 	br	18178b8 <__alt_mem_mem_0+0xff7f78b8>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 18178bc:	00800084 	movi	r2,2
 18178c0:	e0bff915 	stw	r2,-28(fp)
        break;
 18178c4:	00002006 	br	1817948 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 18178c8:	e0bff803 	ldbu	r2,-32(fp)
 18178cc:	10800120 	cmpeqi	r2,r2,4
 18178d0:	1000091e 	bne	r2,zero,18178f8 <dhcp_parse_reply+0x4e4>
 18178d4:	01c06134 	movhi	r7,388
 18178d8:	39c38904 	addi	r7,r7,3620
 18178dc:	01816a44 	movi	r6,1449
 18178e0:	01406134 	movhi	r5,388
 18178e4:	2943b304 	addi	r5,r5,3788
 18178e8:	01006134 	movhi	r4,388
 18178ec:	21039304 	addi	r4,r4,3660
 18178f0:	1800bd80 	call	1800bd8 <printf>
 18178f4:	003fff06 	br	18178f4 <__alt_mem_mem_0+0xff7f78f4>
        decode_idx = DHCP_OPTION_IDX_T1;
 18178f8:	00800104 	movi	r2,4
 18178fc:	e0bff915 	stw	r2,-28(fp)
        break;
 1817900:	00001106 	br	1817948 <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 1817904:	e0bff803 	ldbu	r2,-32(fp)
 1817908:	10800120 	cmpeqi	r2,r2,4
 181790c:	1000091e 	bne	r2,zero,1817934 <dhcp_parse_reply+0x520>
 1817910:	01c06134 	movhi	r7,388
 1817914:	39c38904 	addi	r7,r7,3620
 1817918:	01816b44 	movi	r6,1453
 181791c:	01406134 	movhi	r5,388
 1817920:	2943b304 	addi	r5,r5,3788
 1817924:	01006134 	movhi	r4,388
 1817928:	21039304 	addi	r4,r4,3660
 181792c:	1800bd80 	call	1800bd8 <printf>
 1817930:	003fff06 	br	1817930 <__alt_mem_mem_0+0xff7f7930>
        decode_idx = DHCP_OPTION_IDX_T2;
 1817934:	00800144 	movi	r2,5
 1817938:	e0bff915 	stw	r2,-28(fp)
        break;
 181793c:	00000206 	br	1817948 <dhcp_parse_reply+0x534>
      default:
        decode_len = 0;
 1817940:	e03ff845 	stb	zero,-31(fp)
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
 1817944:	0001883a 	nop
    }
    offset += len + 2;
 1817948:	e0fff803 	ldbu	r3,-32(fp)
 181794c:	e0bff30b 	ldhu	r2,-52(fp)
 1817950:	1885883a 	add	r2,r3,r2
 1817954:	10800084 	addi	r2,r2,2
 1817958:	e0bff30d 	sth	r2,-52(fp)
    if (decode_len > 0) {
 181795c:	e0bff843 	ldbu	r2,-31(fp)
 1817960:	10007b26 	beq	r2,zero,1817b50 <dhcp_parse_reply+0x73c>
      u32_t value = 0;
 1817964:	e03ffd15 	stw	zero,-12(fp)
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
 1817968:	008061b4 	movhi	r2,390
 181796c:	10875f04 	addi	r2,r2,7548
 1817970:	e0fff917 	ldw	r3,-28(fp)
 1817974:	10c5883a 	add	r2,r2,r3
 1817978:	10800003 	ldbu	r2,0(r2)
 181797c:	10803fcc 	andi	r2,r2,255
 1817980:	1000731e 	bne	r2,zero,1817b50 <dhcp_parse_reply+0x73c>
        copy_len = LWIP_MIN(decode_len, 4);
 1817984:	e0bff843 	ldbu	r2,-31(fp)
 1817988:	10800128 	cmpgeui	r2,r2,4
 181798c:	1000021e 	bne	r2,zero,1817998 <dhcp_parse_reply+0x584>
 1817990:	e0bff843 	ldbu	r2,-31(fp)
 1817994:	00000106 	br	181799c <dhcp_parse_reply+0x588>
 1817998:	00800104 	movi	r2,4
 181799c:	e0bffb0d 	sth	r2,-20(fp)
        pbuf_copy_partial(q, &value, copy_len, val_offset);
 18179a0:	e0fffb0b 	ldhu	r3,-20(fp)
 18179a4:	e13ffa0b 	ldhu	r4,-24(fp)
 18179a8:	e0bffd04 	addi	r2,fp,-12
 18179ac:	200f883a 	mov	r7,r4
 18179b0:	180d883a 	mov	r6,r3
 18179b4:	100b883a 	mov	r5,r2
 18179b8:	e13ff517 	ldw	r4,-44(fp)
 18179bc:	181aee80 	call	181aee8 <pbuf_copy_partial>
        if (decode_len > 4) {
 18179c0:	e0bff843 	ldbu	r2,-31(fp)
 18179c4:	10800170 	cmpltui	r2,r2,5
 18179c8:	1000311e 	bne	r2,zero,1817a90 <dhcp_parse_reply+0x67c>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 18179cc:	e0bff843 	ldbu	r2,-31(fp)
 18179d0:	108000cc 	andi	r2,r2,3
 18179d4:	10803fcc 	andi	r2,r2,255
 18179d8:	10000926 	beq	r2,zero,1817a00 <dhcp_parse_reply+0x5ec>
 18179dc:	01c06134 	movhi	r7,388
 18179e0:	39c38904 	addi	r7,r7,3620
 18179e4:	01817004 	movi	r6,1472
 18179e8:	01406134 	movhi	r5,388
 18179ec:	2943c204 	addi	r5,r5,3848
 18179f0:	01006134 	movhi	r4,388
 18179f4:	21039304 	addi	r4,r4,3660
 18179f8:	1800bd80 	call	1800bd8 <printf>
 18179fc:	003fff06 	br	18179fc <__alt_mem_mem_0+0xff7f79fc>
          dhcp_got_option(dhcp, decode_idx);
 1817a00:	008061b4 	movhi	r2,390
 1817a04:	10875f04 	addi	r2,r2,7548
 1817a08:	e0fff917 	ldw	r3,-28(fp)
 1817a0c:	10c5883a 	add	r2,r2,r3
 1817a10:	00c00044 	movi	r3,1
 1817a14:	10c00005 	stb	r3,0(r2)
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
 1817a18:	e0bffd17 	ldw	r2,-12(fp)
 1817a1c:	1006d63a 	srli	r3,r2,24
 1817a20:	e0bffd17 	ldw	r2,-12(fp)
 1817a24:	1004d23a 	srli	r2,r2,8
 1817a28:	10bfc00c 	andi	r2,r2,65280
 1817a2c:	1886b03a 	or	r3,r3,r2
 1817a30:	e0bffd17 	ldw	r2,-12(fp)
 1817a34:	10bfc00c 	andi	r2,r2,65280
 1817a38:	1004923a 	slli	r2,r2,8
 1817a3c:	1886b03a 	or	r3,r3,r2
 1817a40:	e0bffd17 	ldw	r2,-12(fp)
 1817a44:	1004963a 	slli	r2,r2,24
 1817a48:	1888b03a 	or	r4,r3,r2
 1817a4c:	008061b4 	movhi	r2,390
 1817a50:	10876204 	addi	r2,r2,7560
 1817a54:	e0fff917 	ldw	r3,-28(fp)
 1817a58:	18c7883a 	add	r3,r3,r3
 1817a5c:	18c7883a 	add	r3,r3,r3
 1817a60:	10c5883a 	add	r2,r2,r3
 1817a64:	11000015 	stw	r4,0(r2)
          decode_len -= 4;
 1817a68:	e0bff843 	ldbu	r2,-31(fp)
 1817a6c:	10bfff04 	addi	r2,r2,-4
 1817a70:	e0bff845 	stb	r2,-31(fp)
          val_offset += 4;
 1817a74:	e0bffa0b 	ldhu	r2,-24(fp)
 1817a78:	10800104 	addi	r2,r2,4
 1817a7c:	e0bffa0d 	sth	r2,-24(fp)
          decode_idx++;
 1817a80:	e0bff917 	ldw	r2,-28(fp)
 1817a84:	10800044 	addi	r2,r2,1
 1817a88:	e0bff915 	stw	r2,-28(fp)
          goto decode_next;
 1817a8c:	003fb606 	br	1817968 <__alt_mem_mem_0+0xff7f7968>
        } else if (decode_len == 4) {
 1817a90:	e0bff843 	ldbu	r2,-31(fp)
 1817a94:	10800118 	cmpnei	r2,r2,4
 1817a98:	10000f1e 	bne	r2,zero,1817ad8 <dhcp_parse_reply+0x6c4>
          value = ntohl(value);
 1817a9c:	e0bffd17 	ldw	r2,-12(fp)
 1817aa0:	1006d63a 	srli	r3,r2,24
 1817aa4:	e0bffd17 	ldw	r2,-12(fp)
 1817aa8:	1004d23a 	srli	r2,r2,8
 1817aac:	10bfc00c 	andi	r2,r2,65280
 1817ab0:	1886b03a 	or	r3,r3,r2
 1817ab4:	e0bffd17 	ldw	r2,-12(fp)
 1817ab8:	10bfc00c 	andi	r2,r2,65280
 1817abc:	1004923a 	slli	r2,r2,8
 1817ac0:	1886b03a 	or	r3,r3,r2
 1817ac4:	e0bffd17 	ldw	r2,-12(fp)
 1817ac8:	1004963a 	slli	r2,r2,24
 1817acc:	1884b03a 	or	r2,r3,r2
 1817ad0:	e0bffd15 	stw	r2,-12(fp)
 1817ad4:	00001006 	br	1817b18 <dhcp_parse_reply+0x704>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 1817ad8:	e0bff843 	ldbu	r2,-31(fp)
 1817adc:	10800060 	cmpeqi	r2,r2,1
 1817ae0:	1000091e 	bne	r2,zero,1817b08 <dhcp_parse_reply+0x6f4>
 1817ae4:	01c06134 	movhi	r7,388
 1817ae8:	39c38904 	addi	r7,r7,3620
 1817aec:	01817284 	movi	r6,1482
 1817af0:	01406134 	movhi	r5,388
 1817af4:	2943c704 	addi	r5,r5,3868
 1817af8:	01006134 	movhi	r4,388
 1817afc:	21039304 	addi	r4,r4,3660
 1817b00:	1800bd80 	call	1800bd8 <printf>
 1817b04:	003fff06 	br	1817b04 <__alt_mem_mem_0+0xff7f7b04>
          value = ((u8_t*)&value)[0];
 1817b08:	e0bffd04 	addi	r2,fp,-12
 1817b0c:	10800003 	ldbu	r2,0(r2)
 1817b10:	10803fcc 	andi	r2,r2,255
 1817b14:	e0bffd15 	stw	r2,-12(fp)
        }
        dhcp_got_option(dhcp, decode_idx);
 1817b18:	008061b4 	movhi	r2,390
 1817b1c:	10875f04 	addi	r2,r2,7548
 1817b20:	e0fff917 	ldw	r3,-28(fp)
 1817b24:	10c5883a 	add	r2,r2,r3
 1817b28:	00c00044 	movi	r3,1
 1817b2c:	10c00005 	stb	r3,0(r2)
        dhcp_set_option_value(dhcp, decode_idx, value);
 1817b30:	e13ffd17 	ldw	r4,-12(fp)
 1817b34:	008061b4 	movhi	r2,390
 1817b38:	10876204 	addi	r2,r2,7560
 1817b3c:	e0fff917 	ldw	r3,-28(fp)
 1817b40:	18c7883a 	add	r3,r3,r3
 1817b44:	18c7883a 	add	r3,r3,r3
 1817b48:	10c5883a 	add	r2,r2,r3
 1817b4c:	11000015 	stw	r4,0(r2)
      }
    }
    if (offset >= q->len) {
 1817b50:	e0bff517 	ldw	r2,-44(fp)
 1817b54:	1080028b 	ldhu	r2,10(r2)
 1817b58:	10bfffcc 	andi	r2,r2,65535
 1817b5c:	e0fff30b 	ldhu	r3,-52(fp)
 1817b60:	18801536 	bltu	r3,r2,1817bb8 <dhcp_parse_reply+0x7a4>
      offset -= q->len;
 1817b64:	e0bff517 	ldw	r2,-44(fp)
 1817b68:	1080028b 	ldhu	r2,10(r2)
 1817b6c:	e0fff30b 	ldhu	r3,-52(fp)
 1817b70:	1885c83a 	sub	r2,r3,r2
 1817b74:	e0bff30d 	sth	r2,-52(fp)
      offset_max -= q->len;
 1817b78:	e0bff517 	ldw	r2,-44(fp)
 1817b7c:	1080028b 	ldhu	r2,10(r2)
 1817b80:	e0fff38b 	ldhu	r3,-50(fp)
 1817b84:	1885c83a 	sub	r2,r3,r2
 1817b88:	e0bff38d 	sth	r2,-50(fp)
      if ((offset < offset_max) && offset_max) {
 1817b8c:	e0fff30b 	ldhu	r3,-52(fp)
 1817b90:	e0bff38b 	ldhu	r2,-50(fp)
 1817b94:	1880142e 	bgeu	r3,r2,1817be8 <dhcp_parse_reply+0x7d4>
 1817b98:	e0bff38b 	ldhu	r2,-50(fp)
 1817b9c:	10001226 	beq	r2,zero,1817be8 <dhcp_parse_reply+0x7d4>
        q = q->next;
 1817ba0:	e0bff517 	ldw	r2,-44(fp)
 1817ba4:	10800017 	ldw	r2,0(r2)
 1817ba8:	e0bff515 	stw	r2,-44(fp)
        LWIP_ASSERT("next pbuf was null", q);
        options = (u8_t*)q->payload;
 1817bac:	e0bff517 	ldw	r2,-44(fp)
 1817bb0:	10800117 	ldw	r2,4(r2)
 1817bb4:	e0bff215 	stw	r2,-56(fp)
  }
  offset = options_idx;
  offset_max = options_idx_max;
  options = (u8_t*)q->payload;
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
 1817bb8:	e0bff517 	ldw	r2,-44(fp)
 1817bbc:	10000a26 	beq	r2,zero,1817be8 <dhcp_parse_reply+0x7d4>
 1817bc0:	e0bff30b 	ldhu	r2,-52(fp)
 1817bc4:	e0fff217 	ldw	r3,-56(fp)
 1817bc8:	1885883a 	add	r2,r3,r2
 1817bcc:	10800003 	ldbu	r2,0(r2)
 1817bd0:	10803fcc 	andi	r2,r2,255
 1817bd4:	10803fe0 	cmpeqi	r2,r2,255
 1817bd8:	1000031e 	bne	r2,zero,1817be8 <dhcp_parse_reply+0x7d4>
 1817bdc:	e0fff30b 	ldhu	r3,-52(fp)
 1817be0:	e0bff38b 	ldhu	r2,-50(fp)
 1817be4:	18be4b36 	bltu	r3,r2,1817514 <__alt_mem_mem_0+0xff7f7514>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 1817be8:	008061b4 	movhi	r2,390
 1817bec:	10875f04 	addi	r2,r2,7548
 1817bf0:	10800003 	ldbu	r2,0(r2)
 1817bf4:	10803fcc 	andi	r2,r2,255
 1817bf8:	10001a26 	beq	r2,zero,1817c64 <dhcp_parse_reply+0x850>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 1817bfc:	008061b4 	movhi	r2,390
 1817c00:	10876204 	addi	r2,r2,7560
 1817c04:	10800017 	ldw	r2,0(r2)
 1817c08:	e0bffc15 	stw	r2,-16(fp)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 1817c0c:	008061b4 	movhi	r2,390
 1817c10:	10875f04 	addi	r2,r2,7548
 1817c14:	10000005 	stb	zero,0(r2)
    if (overload == DHCP_OVERLOAD_FILE) {
 1817c18:	e0bffc17 	ldw	r2,-16(fp)
 1817c1c:	10800058 	cmpnei	r2,r2,1
 1817c20:	1000031e 	bne	r2,zero,1817c30 <dhcp_parse_reply+0x81c>
      parse_file_as_options = 1;
 1817c24:	00800044 	movi	r2,1
 1817c28:	e0bff615 	stw	r2,-40(fp)
 1817c2c:	00000d06 	br	1817c64 <dhcp_parse_reply+0x850>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 1817c30:	e0bffc17 	ldw	r2,-16(fp)
 1817c34:	10800098 	cmpnei	r2,r2,2
 1817c38:	1000031e 	bne	r2,zero,1817c48 <dhcp_parse_reply+0x834>
      parse_sname_as_options = 1;
 1817c3c:	00800044 	movi	r2,1
 1817c40:	e0bff715 	stw	r2,-36(fp)
 1817c44:	00000706 	br	1817c64 <dhcp_parse_reply+0x850>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 1817c48:	e0bffc17 	ldw	r2,-16(fp)
 1817c4c:	108000d8 	cmpnei	r2,r2,3
 1817c50:	1000041e 	bne	r2,zero,1817c64 <dhcp_parse_reply+0x850>
      parse_sname_as_options = 1;
 1817c54:	00800044 	movi	r2,1
 1817c58:	e0bff715 	stw	r2,-36(fp)
      parse_file_as_options = 1;
 1817c5c:	00800044 	movi	r2,1
 1817c60:	e0bff615 	stw	r2,-40(fp)
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 1817c64:	e0bff617 	ldw	r2,-40(fp)
 1817c68:	10000626 	beq	r2,zero,1817c84 <dhcp_parse_reply+0x870>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 1817c6c:	e03ff615 	stw	zero,-40(fp)
    options_idx = DHCP_FILE_OFS;
 1817c70:	00801b04 	movi	r2,108
 1817c74:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 1817c78:	00803b04 	movi	r2,236
 1817c7c:	e0bff48d 	sth	r2,-46(fp)
    goto again;
 1817c80:	003e0106 	br	1817488 <__alt_mem_mem_0+0xff7f7488>
  } else if (parse_sname_as_options) {
 1817c84:	e0bff717 	ldw	r2,-36(fp)
 1817c88:	10000626 	beq	r2,zero,1817ca4 <dhcp_parse_reply+0x890>
    parse_sname_as_options = 0;
 1817c8c:	e03ff715 	stw	zero,-36(fp)
    options_idx = DHCP_SNAME_OFS;
 1817c90:	00800b04 	movi	r2,44
 1817c94:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 1817c98:	00801b04 	movi	r2,108
 1817c9c:	e0bff48d 	sth	r2,-46(fp)
    goto again;
 1817ca0:	003df906 	br	1817488 <__alt_mem_mem_0+0xff7f7488>
  }
  return ERR_OK;
 1817ca4:	0005883a 	mov	r2,zero
}
 1817ca8:	e037883a 	mov	sp,fp
 1817cac:	dfc00117 	ldw	ra,4(sp)
 1817cb0:	df000017 	ldw	fp,0(sp)
 1817cb4:	dec00204 	addi	sp,sp,8
 1817cb8:	f800283a 	ret

01817cbc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
{
 1817cbc:	defff404 	addi	sp,sp,-48
 1817cc0:	dfc00b15 	stw	ra,44(sp)
 1817cc4:	df000a15 	stw	fp,40(sp)
 1817cc8:	df000a04 	addi	fp,sp,40
 1817ccc:	e13ffb15 	stw	r4,-20(fp)
 1817cd0:	e17ffc15 	stw	r5,-16(fp)
 1817cd4:	e1bffd15 	stw	r6,-12(fp)
 1817cd8:	e1fffe15 	stw	r7,-8(fp)
 1817cdc:	e0800217 	ldw	r2,8(fp)
 1817ce0:	e0bfff0d 	sth	r2,-4(fp)
  struct netif *netif = (struct netif *)arg;
 1817ce4:	e0bffb17 	ldw	r2,-20(fp)
 1817ce8:	e0bff715 	stw	r2,-36(fp)
  struct dhcp *dhcp = netif->dhcp;
 1817cec:	e0bff717 	ldw	r2,-36(fp)
 1817cf0:	10800a17 	ldw	r2,40(r2)
 1817cf4:	e0bff815 	stw	r2,-32(fp)
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 1817cf8:	e0bffd17 	ldw	r2,-12(fp)
 1817cfc:	10800117 	ldw	r2,4(r2)
 1817d00:	e0bff915 	stw	r2,-28(fp)
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 1817d04:	e0bffd17 	ldw	r2,-12(fp)
 1817d08:	1080028b 	ldhu	r2,10(r2)
 1817d0c:	10bfffcc 	andi	r2,r2,65535
 1817d10:	10800b28 	cmpgeui	r2,r2,44
 1817d14:	1000aa26 	beq	r2,zero,1817fc0 <dhcp_recv+0x304>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 1817d18:	e0bff917 	ldw	r2,-28(fp)
 1817d1c:	10800003 	ldbu	r2,0(r2)
 1817d20:	10803fcc 	andi	r2,r2,255
 1817d24:	108000a0 	cmpeqi	r2,r2,2
 1817d28:	1000a726 	beq	r2,zero,1817fc8 <dhcp_recv+0x30c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
 1817d2c:	e03ff605 	stb	zero,-40(fp)
 1817d30:	00001006 	br	1817d74 <dhcp_recv+0xb8>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 1817d34:	e0bff603 	ldbu	r2,-40(fp)
 1817d38:	e0fff717 	ldw	r3,-36(fp)
 1817d3c:	1885883a 	add	r2,r3,r2
 1817d40:	10800cc4 	addi	r2,r2,51
 1817d44:	11000003 	ldbu	r4,0(r2)
 1817d48:	e0bff603 	ldbu	r2,-40(fp)
 1817d4c:	e0fff917 	ldw	r3,-28(fp)
 1817d50:	1885883a 	add	r2,r3,r2
 1817d54:	10800704 	addi	r2,r2,28
 1817d58:	10800003 	ldbu	r2,0(r2)
 1817d5c:	20c03fcc 	andi	r3,r4,255
 1817d60:	10803fcc 	andi	r2,r2,255
 1817d64:	18809a1e 	bne	r3,r2,1817fd0 <dhcp_recv+0x314>
  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
 1817d68:	e0bff603 	ldbu	r2,-40(fp)
 1817d6c:	10800044 	addi	r2,r2,1
 1817d70:	e0bff605 	stb	r2,-40(fp)
 1817d74:	e0bff717 	ldw	r2,-36(fp)
 1817d78:	10800c83 	ldbu	r2,50(r2)
 1817d7c:	10803fcc 	andi	r2,r2,255
 1817d80:	e0fff603 	ldbu	r3,-40(fp)
 1817d84:	18bfeb36 	bltu	r3,r2,1817d34 <__alt_mem_mem_0+0xff7f7d34>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
 1817d88:	e0bff917 	ldw	r2,-28(fp)
 1817d8c:	10c00103 	ldbu	r3,4(r2)
 1817d90:	11000143 	ldbu	r4,5(r2)
 1817d94:	2008923a 	slli	r4,r4,8
 1817d98:	20c6b03a 	or	r3,r4,r3
 1817d9c:	11000183 	ldbu	r4,6(r2)
 1817da0:	2008943a 	slli	r4,r4,16
 1817da4:	20c6b03a 	or	r3,r4,r3
 1817da8:	108001c3 	ldbu	r2,7(r2)
 1817dac:	1004963a 	slli	r2,r2,24
 1817db0:	10c4b03a 	or	r2,r2,r3
 1817db4:	1006d63a 	srli	r3,r2,24
 1817db8:	e0bff917 	ldw	r2,-28(fp)
 1817dbc:	11000103 	ldbu	r4,4(r2)
 1817dc0:	11400143 	ldbu	r5,5(r2)
 1817dc4:	280a923a 	slli	r5,r5,8
 1817dc8:	2908b03a 	or	r4,r5,r4
 1817dcc:	11400183 	ldbu	r5,6(r2)
 1817dd0:	280a943a 	slli	r5,r5,16
 1817dd4:	2908b03a 	or	r4,r5,r4
 1817dd8:	108001c3 	ldbu	r2,7(r2)
 1817ddc:	1004963a 	slli	r2,r2,24
 1817de0:	1104b03a 	or	r2,r2,r4
 1817de4:	1004d23a 	srli	r2,r2,8
 1817de8:	10bfc00c 	andi	r2,r2,65280
 1817dec:	1886b03a 	or	r3,r3,r2
 1817df0:	e0bff917 	ldw	r2,-28(fp)
 1817df4:	11000103 	ldbu	r4,4(r2)
 1817df8:	11400143 	ldbu	r5,5(r2)
 1817dfc:	280a923a 	slli	r5,r5,8
 1817e00:	2908b03a 	or	r4,r5,r4
 1817e04:	11400183 	ldbu	r5,6(r2)
 1817e08:	280a943a 	slli	r5,r5,16
 1817e0c:	2908b03a 	or	r4,r5,r4
 1817e10:	108001c3 	ldbu	r2,7(r2)
 1817e14:	1004963a 	slli	r2,r2,24
 1817e18:	1104b03a 	or	r2,r2,r4
 1817e1c:	10bfc00c 	andi	r2,r2,65280
 1817e20:	1004923a 	slli	r2,r2,8
 1817e24:	1886b03a 	or	r3,r3,r2
 1817e28:	e0bff917 	ldw	r2,-28(fp)
 1817e2c:	11000103 	ldbu	r4,4(r2)
 1817e30:	11400143 	ldbu	r5,5(r2)
 1817e34:	280a923a 	slli	r5,r5,8
 1817e38:	2908b03a 	or	r4,r5,r4
 1817e3c:	11400183 	ldbu	r5,6(r2)
 1817e40:	280a943a 	slli	r5,r5,16
 1817e44:	2908b03a 	or	r4,r5,r4
 1817e48:	108001c3 	ldbu	r2,7(r2)
 1817e4c:	1004963a 	slli	r2,r2,24
 1817e50:	1104b03a 	or	r2,r2,r4
 1817e54:	1004963a 	slli	r2,r2,24
 1817e58:	1886b03a 	or	r3,r3,r2
 1817e5c:	e0bff817 	ldw	r2,-32(fp)
 1817e60:	10800017 	ldw	r2,0(r2)
 1817e64:	18805c1e 	bne	r3,r2,1817fd8 <dhcp_recv+0x31c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 1817e68:	e17ffd17 	ldw	r5,-12(fp)
 1817e6c:	e13ff817 	ldw	r4,-32(fp)
 1817e70:	18174140 	call	1817414 <dhcp_parse_reply>
 1817e74:	10803fcc 	andi	r2,r2,255
 1817e78:	1080201c 	xori	r2,r2,128
 1817e7c:	10bfe004 	addi	r2,r2,-128
 1817e80:	1000571e 	bne	r2,zero,1817fe0 <dhcp_recv+0x324>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 1817e84:	008061b4 	movhi	r2,390
 1817e88:	10875f04 	addi	r2,r2,7548
 1817e8c:	10800043 	ldbu	r2,1(r2)
 1817e90:	10803fcc 	andi	r2,r2,255
 1817e94:	10005426 	beq	r2,zero,1817fe8 <dhcp_recv+0x32c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 1817e98:	008061b4 	movhi	r2,390
 1817e9c:	10876204 	addi	r2,r2,7560
 1817ea0:	10800117 	ldw	r2,4(r2)
 1817ea4:	e0bffa05 	stb	r2,-24(fp)
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 1817ea8:	e0bffa03 	ldbu	r2,-24(fp)
 1817eac:	10800158 	cmpnei	r2,r2,5
 1817eb0:	10001c1e 	bne	r2,zero,1817f24 <dhcp_recv+0x268>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
 1817eb4:	e0bff817 	ldw	r2,-32(fp)
 1817eb8:	10800303 	ldbu	r2,12(r2)
 1817ebc:	10803fcc 	andi	r2,r2,255
 1817ec0:	10800058 	cmpnei	r2,r2,1
 1817ec4:	1000051e 	bne	r2,zero,1817edc <dhcp_recv+0x220>
      dhcp_handle_ack(netif);
 1817ec8:	e13ff717 	ldw	r4,-36(fp)
 1817ecc:	1815c580 	call	1815c58 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
 1817ed0:	e13ff717 	ldw	r4,-36(fp)
 1817ed4:	181547c0 	call	181547c <dhcp_check>
 1817ed8:	00004406 	br	1817fec <dhcp_recv+0x330>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
 1817edc:	e0bff817 	ldw	r2,-32(fp)
 1817ee0:	10800303 	ldbu	r2,12(r2)
 1817ee4:	10803fcc 	andi	r2,r2,255
 1817ee8:	108000e0 	cmpeqi	r2,r2,3
 1817eec:	10000a1e 	bne	r2,zero,1817f18 <dhcp_recv+0x25c>
 1817ef0:	e0bff817 	ldw	r2,-32(fp)
 1817ef4:	10800303 	ldbu	r2,12(r2)
 1817ef8:	10803fcc 	andi	r2,r2,255
 1817efc:	10800120 	cmpeqi	r2,r2,4
 1817f00:	1000051e 	bne	r2,zero,1817f18 <dhcp_recv+0x25c>
 1817f04:	e0bff817 	ldw	r2,-32(fp)
 1817f08:	10800303 	ldbu	r2,12(r2)
 1817f0c:	10803fcc 	andi	r2,r2,255
 1817f10:	10800158 	cmpnei	r2,r2,5
 1817f14:	1000351e 	bne	r2,zero,1817fec <dhcp_recv+0x330>
      dhcp_bind(netif);
 1817f18:	e13ff717 	ldw	r4,-36(fp)
 1817f1c:	18166f00 	call	18166f0 <dhcp_bind>
 1817f20:	00003206 	br	1817fec <dhcp_recv+0x330>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 1817f24:	e0bffa03 	ldbu	r2,-24(fp)
 1817f28:	10800198 	cmpnei	r2,r2,6
 1817f2c:	1000171e 	bne	r2,zero,1817f8c <dhcp_recv+0x2d0>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
 1817f30:	e0bff817 	ldw	r2,-32(fp)
 1817f34:	10800303 	ldbu	r2,12(r2)
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 1817f38:	10803fcc 	andi	r2,r2,255
 1817f3c:	108000e0 	cmpeqi	r2,r2,3
 1817f40:	10000f1e 	bne	r2,zero,1817f80 <dhcp_recv+0x2c4>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
 1817f44:	e0bff817 	ldw	r2,-32(fp)
 1817f48:	10800303 	ldbu	r2,12(r2)
 1817f4c:	10803fcc 	andi	r2,r2,255
 1817f50:	10800060 	cmpeqi	r2,r2,1
 1817f54:	10000a1e 	bne	r2,zero,1817f80 <dhcp_recv+0x2c4>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
 1817f58:	e0bff817 	ldw	r2,-32(fp)
 1817f5c:	10800303 	ldbu	r2,12(r2)
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
 1817f60:	10803fcc 	andi	r2,r2,255
 1817f64:	10800120 	cmpeqi	r2,r2,4
 1817f68:	1000051e 	bne	r2,zero,1817f80 <dhcp_recv+0x2c4>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
 1817f6c:	e0bff817 	ldw	r2,-32(fp)
 1817f70:	10800303 	ldbu	r2,12(r2)
 1817f74:	10803fcc 	andi	r2,r2,255
 1817f78:	10800158 	cmpnei	r2,r2,5
 1817f7c:	1000031e 	bne	r2,zero,1817f8c <dhcp_recv+0x2d0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 1817f80:	e13ff717 	ldw	r4,-36(fp)
 1817f84:	18154280 	call	1815428 <dhcp_handle_nak>
 1817f88:	00001806 	br	1817fec <dhcp_recv+0x330>
  }
  /* received a DHCP_OFFER in DHCP_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
 1817f8c:	e0bffa03 	ldbu	r2,-24(fp)
 1817f90:	10800098 	cmpnei	r2,r2,2
 1817f94:	1000151e 	bne	r2,zero,1817fec <dhcp_recv+0x330>
 1817f98:	e0bff817 	ldw	r2,-32(fp)
 1817f9c:	10800303 	ldbu	r2,12(r2)
 1817fa0:	10803fcc 	andi	r2,r2,255
 1817fa4:	10800198 	cmpnei	r2,r2,6
 1817fa8:	1000101e 	bne	r2,zero,1817fec <dhcp_recv+0x330>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
    dhcp->request_timeout = 0;
 1817fac:	e0bff817 	ldw	r2,-32(fp)
 1817fb0:	1000068d 	sth	zero,26(r2)
    /* remember offered lease */
    dhcp_handle_offer(netif);
 1817fb4:	e13ff717 	ldw	r4,-36(fp)
 1817fb8:	181551c0 	call	181551c <dhcp_handle_offer>
 1817fbc:	00000b06 	br	1817fec <dhcp_recv+0x330>

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
 1817fc0:	0001883a 	nop
 1817fc4:	00000906 	br	1817fec <dhcp_recv+0x330>
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
 1817fc8:	0001883a 	nop
 1817fcc:	00000706 	br	1817fec <dhcp_recv+0x330>
  for (i = 0; i < netif->hwaddr_len; i++) {
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
        ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
 1817fd0:	0001883a 	nop
 1817fd4:	00000506 	br	1817fec <dhcp_recv+0x330>
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
 1817fd8:	0001883a 	nop
 1817fdc:	00000306 	br	1817fec <dhcp_recv+0x330>
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
 1817fe0:	0001883a 	nop
 1817fe4:	00000106 	br	1817fec <dhcp_recv+0x330>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
 1817fe8:	0001883a 	nop
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
 1817fec:	e0bff817 	ldw	r2,-32(fp)
 1817ff0:	10000215 	stw	zero,8(r2)
  pbuf_free(p);
 1817ff4:	e13ffd17 	ldw	r4,-12(fp)
 1817ff8:	181a9040 	call	181a904 <pbuf_free>
}
 1817ffc:	0001883a 	nop
 1818000:	e037883a 	mov	sp,fp
 1818004:	dfc00117 	ldw	ra,4(sp)
 1818008:	df000017 	ldw	fp,0(sp)
 181800c:	dec00204 	addi	sp,sp,8
 1818010:	f800283a 	ret

01818014 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 1818014:	defffa04 	addi	sp,sp,-24
 1818018:	dfc00515 	stw	ra,20(sp)
 181801c:	df000415 	stw	fp,16(sp)
 1818020:	df000404 	addi	fp,sp,16
 1818024:	e13ffd15 	stw	r4,-12(fp)
 1818028:	e17ffe15 	stw	r5,-8(fp)
 181802c:	3005883a 	mov	r2,r6
 1818030:	e0bfff05 	stb	r2,-4(fp)
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 1818034:	e0bffd17 	ldw	r2,-12(fp)
 1818038:	1000091e 	bne	r2,zero,1818060 <dhcp_create_msg+0x4c>
 181803c:	01c06134 	movhi	r7,388
 1818040:	39c38904 	addi	r7,r7,3620
 1818044:	0181a244 	movi	r6,1673
 1818048:	01406134 	movhi	r5,388
 181804c:	2943cc04 	addi	r5,r5,3888
 1818050:	01006134 	movhi	r4,388
 1818054:	21039304 	addi	r4,r4,3660
 1818058:	1800bd80 	call	1800bd8 <printf>
 181805c:	003fff06 	br	181805c <__alt_mem_mem_0+0xff7f805c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 1818060:	e0bffe17 	ldw	r2,-8(fp)
 1818064:	1000091e 	bne	r2,zero,181808c <dhcp_create_msg+0x78>
 1818068:	01c06134 	movhi	r7,388
 181806c:	39c38904 	addi	r7,r7,3620
 1818070:	0181a284 	movi	r6,1674
 1818074:	01406134 	movhi	r5,388
 1818078:	2943d404 	addi	r5,r5,3920
 181807c:	01006134 	movhi	r4,388
 1818080:	21039304 	addi	r4,r4,3660
 1818084:	1800bd80 	call	1800bd8 <printf>
 1818088:	003fff06 	br	1818088 <__alt_mem_mem_0+0xff7f8088>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 181808c:	000d883a 	mov	r6,zero
 1818090:	01404d04 	movi	r5,308
 1818094:	0009883a 	mov	r4,zero
 1818098:	181a1480 	call	181a148 <pbuf_alloc>
 181809c:	1007883a 	mov	r3,r2
 18180a0:	e0bffe17 	ldw	r2,-8(fp)
 18180a4:	10c00415 	stw	r3,16(r2)
  if (dhcp->p_out == NULL) {
 18180a8:	e0bffe17 	ldw	r2,-8(fp)
 18180ac:	10800417 	ldw	r2,16(r2)
 18180b0:	1000021e 	bne	r2,zero,18180bc <dhcp_create_msg+0xa8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 18180b4:	00bfffc4 	movi	r2,-1
 18180b8:	00013206 	br	1818584 <dhcp_create_msg+0x570>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* reuse transaction identifier in retransmissions */
  if (dhcp->tries == 0) {
 18180bc:	e0bffe17 	ldw	r2,-8(fp)
 18180c0:	10800343 	ldbu	r2,13(r2)
 18180c4:	10803fcc 	andi	r2,r2,255
 18180c8:	1000031e 	bne	r2,zero,18180d8 <dhcp_create_msg+0xc4>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
    xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    xid++;
 18180cc:	d0a00c17 	ldw	r2,-32720(gp)
 18180d0:	10800044 	addi	r2,r2,1
 18180d4:	d0a00c15 	stw	r2,-32720(gp)
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
  }
  dhcp->xid = xid;
 18180d8:	d0e00c17 	ldw	r3,-32720(gp)
 18180dc:	e0bffe17 	ldw	r2,-8(fp)
 18180e0:	10c00015 	stw	r3,0(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 18180e4:	e0bffe17 	ldw	r2,-8(fp)
 18180e8:	10800417 	ldw	r2,16(r2)
 18180ec:	10c00117 	ldw	r3,4(r2)
 18180f0:	e0bffe17 	ldw	r2,-8(fp)
 18180f4:	10c00515 	stw	r3,20(r2)

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 18180f8:	e0bffe17 	ldw	r2,-8(fp)
 18180fc:	10800517 	ldw	r2,20(r2)
 1818100:	00c00044 	movi	r3,1
 1818104:	10c00005 	stb	r3,0(r2)
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 1818108:	e0bffe17 	ldw	r2,-8(fp)
 181810c:	10800517 	ldw	r2,20(r2)
 1818110:	00c00044 	movi	r3,1
 1818114:	10c00045 	stb	r3,1(r2)
  dhcp->msg_out->hlen = netif->hwaddr_len;
 1818118:	e0bffe17 	ldw	r2,-8(fp)
 181811c:	10800517 	ldw	r2,20(r2)
 1818120:	e0fffd17 	ldw	r3,-12(fp)
 1818124:	18c00c83 	ldbu	r3,50(r3)
 1818128:	10c00085 	stb	r3,2(r2)
  dhcp->msg_out->hops = 0;
 181812c:	e0bffe17 	ldw	r2,-8(fp)
 1818130:	10800517 	ldw	r2,20(r2)
 1818134:	100000c5 	stb	zero,3(r2)
  dhcp->msg_out->xid = htonl(dhcp->xid);
 1818138:	e0bffe17 	ldw	r2,-8(fp)
 181813c:	10800517 	ldw	r2,20(r2)
 1818140:	e0fffe17 	ldw	r3,-8(fp)
 1818144:	18c00017 	ldw	r3,0(r3)
 1818148:	1808d63a 	srli	r4,r3,24
 181814c:	e0fffe17 	ldw	r3,-8(fp)
 1818150:	18c00017 	ldw	r3,0(r3)
 1818154:	1806d23a 	srli	r3,r3,8
 1818158:	18ffc00c 	andi	r3,r3,65280
 181815c:	20c8b03a 	or	r4,r4,r3
 1818160:	e0fffe17 	ldw	r3,-8(fp)
 1818164:	18c00017 	ldw	r3,0(r3)
 1818168:	18ffc00c 	andi	r3,r3,65280
 181816c:	1806923a 	slli	r3,r3,8
 1818170:	20c8b03a 	or	r4,r4,r3
 1818174:	e0fffe17 	ldw	r3,-8(fp)
 1818178:	18c00017 	ldw	r3,0(r3)
 181817c:	1806963a 	slli	r3,r3,24
 1818180:	20c6b03a 	or	r3,r4,r3
 1818184:	19803fcc 	andi	r6,r3,255
 1818188:	11000103 	ldbu	r4,4(r2)
 181818c:	2008703a 	and	r4,r4,zero
 1818190:	200b883a 	mov	r5,r4
 1818194:	3009883a 	mov	r4,r6
 1818198:	2908b03a 	or	r4,r5,r4
 181819c:	11000105 	stb	r4,4(r2)
 18181a0:	1808d23a 	srli	r4,r3,8
 18181a4:	21803fcc 	andi	r6,r4,255
 18181a8:	11000143 	ldbu	r4,5(r2)
 18181ac:	2008703a 	and	r4,r4,zero
 18181b0:	200b883a 	mov	r5,r4
 18181b4:	3009883a 	mov	r4,r6
 18181b8:	2908b03a 	or	r4,r5,r4
 18181bc:	11000145 	stb	r4,5(r2)
 18181c0:	1808d43a 	srli	r4,r3,16
 18181c4:	21803fcc 	andi	r6,r4,255
 18181c8:	11000183 	ldbu	r4,6(r2)
 18181cc:	2008703a 	and	r4,r4,zero
 18181d0:	200b883a 	mov	r5,r4
 18181d4:	3009883a 	mov	r4,r6
 18181d8:	2908b03a 	or	r4,r5,r4
 18181dc:	11000185 	stb	r4,6(r2)
 18181e0:	180ad63a 	srli	r5,r3,24
 18181e4:	10c001c3 	ldbu	r3,7(r2)
 18181e8:	1806703a 	and	r3,r3,zero
 18181ec:	1809883a 	mov	r4,r3
 18181f0:	2807883a 	mov	r3,r5
 18181f4:	20c6b03a 	or	r3,r4,r3
 18181f8:	10c001c5 	stb	r3,7(r2)
  dhcp->msg_out->secs = 0;
 18181fc:	e0bffe17 	ldw	r2,-8(fp)
 1818200:	10800517 	ldw	r2,20(r2)
 1818204:	10c00203 	ldbu	r3,8(r2)
 1818208:	1806703a 	and	r3,r3,zero
 181820c:	10c00205 	stb	r3,8(r2)
 1818210:	10c00243 	ldbu	r3,9(r2)
 1818214:	1806703a 	and	r3,r3,zero
 1818218:	10c00245 	stb	r3,9(r2)
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 181821c:	e0bffe17 	ldw	r2,-8(fp)
 1818220:	10800517 	ldw	r2,20(r2)
 1818224:	10c00283 	ldbu	r3,10(r2)
 1818228:	1806703a 	and	r3,r3,zero
 181822c:	10c00285 	stb	r3,10(r2)
 1818230:	10c002c3 	ldbu	r3,11(r2)
 1818234:	1806703a 	and	r3,r3,zero
 1818238:	10c002c5 	stb	r3,11(r2)
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
 181823c:	e0bffe17 	ldw	r2,-8(fp)
 1818240:	10800517 	ldw	r2,20(r2)
 1818244:	10c00303 	ldbu	r3,12(r2)
 1818248:	1806703a 	and	r3,r3,zero
 181824c:	10c00305 	stb	r3,12(r2)
 1818250:	10c00343 	ldbu	r3,13(r2)
 1818254:	1806703a 	and	r3,r3,zero
 1818258:	10c00345 	stb	r3,13(r2)
 181825c:	10c00383 	ldbu	r3,14(r2)
 1818260:	1806703a 	and	r3,r3,zero
 1818264:	10c00385 	stb	r3,14(r2)
 1818268:	10c003c3 	ldbu	r3,15(r2)
 181826c:	1806703a 	and	r3,r3,zero
 1818270:	10c003c5 	stb	r3,15(r2)
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
 1818274:	e0bfff03 	ldbu	r2,-4(fp)
 1818278:	10800220 	cmpeqi	r2,r2,8
 181827c:	1000101e 	bne	r2,zero,18182c0 <dhcp_create_msg+0x2ac>
 1818280:	e0bfff03 	ldbu	r2,-4(fp)
 1818284:	10800120 	cmpeqi	r2,r2,4
 1818288:	10000d1e 	bne	r2,zero,18182c0 <dhcp_create_msg+0x2ac>
 181828c:	e0bfff03 	ldbu	r2,-4(fp)
 1818290:	108000d8 	cmpnei	r2,r2,3
 1818294:	10002c1e 	bne	r2,zero,1818348 <dhcp_create_msg+0x334>
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
 1818298:	e0bffe17 	ldw	r2,-8(fp)
 181829c:	10800303 	ldbu	r2,12(r2)
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
 18182a0:	10803fcc 	andi	r2,r2,255
 18182a4:	10800160 	cmpeqi	r2,r2,5
 18182a8:	1000051e 	bne	r2,zero,18182c0 <dhcp_create_msg+0x2ac>
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
 18182ac:	e0bffe17 	ldw	r2,-8(fp)
 18182b0:	10800303 	ldbu	r2,12(r2)
 18182b4:	10803fcc 	andi	r2,r2,255
 18182b8:	10800118 	cmpnei	r2,r2,4
 18182bc:	1000221e 	bne	r2,zero,1818348 <dhcp_create_msg+0x334>
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
 18182c0:	e0bffe17 	ldw	r2,-8(fp)
 18182c4:	10800517 	ldw	r2,20(r2)
 18182c8:	e0fffd17 	ldw	r3,-12(fp)
 18182cc:	18c00117 	ldw	r3,4(r3)
 18182d0:	19803fcc 	andi	r6,r3,255
 18182d4:	11000303 	ldbu	r4,12(r2)
 18182d8:	2008703a 	and	r4,r4,zero
 18182dc:	200b883a 	mov	r5,r4
 18182e0:	3009883a 	mov	r4,r6
 18182e4:	2908b03a 	or	r4,r5,r4
 18182e8:	11000305 	stb	r4,12(r2)
 18182ec:	1808d23a 	srli	r4,r3,8
 18182f0:	21803fcc 	andi	r6,r4,255
 18182f4:	11000343 	ldbu	r4,13(r2)
 18182f8:	2008703a 	and	r4,r4,zero
 18182fc:	200b883a 	mov	r5,r4
 1818300:	3009883a 	mov	r4,r6
 1818304:	2908b03a 	or	r4,r5,r4
 1818308:	11000345 	stb	r4,13(r2)
 181830c:	1808d43a 	srli	r4,r3,16
 1818310:	21803fcc 	andi	r6,r4,255
 1818314:	11000383 	ldbu	r4,14(r2)
 1818318:	2008703a 	and	r4,r4,zero
 181831c:	200b883a 	mov	r5,r4
 1818320:	3009883a 	mov	r4,r6
 1818324:	2908b03a 	or	r4,r5,r4
 1818328:	11000385 	stb	r4,14(r2)
 181832c:	180ad63a 	srli	r5,r3,24
 1818330:	10c003c3 	ldbu	r3,15(r2)
 1818334:	1806703a 	and	r3,r3,zero
 1818338:	1809883a 	mov	r4,r3
 181833c:	2807883a 	mov	r3,r5
 1818340:	20c6b03a 	or	r3,r4,r3
 1818344:	10c003c5 	stb	r3,15(r2)
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
 1818348:	e0bffe17 	ldw	r2,-8(fp)
 181834c:	10800517 	ldw	r2,20(r2)
 1818350:	10c00403 	ldbu	r3,16(r2)
 1818354:	1806703a 	and	r3,r3,zero
 1818358:	10c00405 	stb	r3,16(r2)
 181835c:	10c00443 	ldbu	r3,17(r2)
 1818360:	1806703a 	and	r3,r3,zero
 1818364:	10c00445 	stb	r3,17(r2)
 1818368:	10c00483 	ldbu	r3,18(r2)
 181836c:	1806703a 	and	r3,r3,zero
 1818370:	10c00485 	stb	r3,18(r2)
 1818374:	10c004c3 	ldbu	r3,19(r2)
 1818378:	1806703a 	and	r3,r3,zero
 181837c:	10c004c5 	stb	r3,19(r2)
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
 1818380:	e0bffe17 	ldw	r2,-8(fp)
 1818384:	10800517 	ldw	r2,20(r2)
 1818388:	10c00503 	ldbu	r3,20(r2)
 181838c:	1806703a 	and	r3,r3,zero
 1818390:	10c00505 	stb	r3,20(r2)
 1818394:	10c00543 	ldbu	r3,21(r2)
 1818398:	1806703a 	and	r3,r3,zero
 181839c:	10c00545 	stb	r3,21(r2)
 18183a0:	10c00583 	ldbu	r3,22(r2)
 18183a4:	1806703a 	and	r3,r3,zero
 18183a8:	10c00585 	stb	r3,22(r2)
 18183ac:	10c005c3 	ldbu	r3,23(r2)
 18183b0:	1806703a 	and	r3,r3,zero
 18183b4:	10c005c5 	stb	r3,23(r2)
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
 18183b8:	e0bffe17 	ldw	r2,-8(fp)
 18183bc:	10800517 	ldw	r2,20(r2)
 18183c0:	10c00603 	ldbu	r3,24(r2)
 18183c4:	1806703a 	and	r3,r3,zero
 18183c8:	10c00605 	stb	r3,24(r2)
 18183cc:	10c00643 	ldbu	r3,25(r2)
 18183d0:	1806703a 	and	r3,r3,zero
 18183d4:	10c00645 	stb	r3,25(r2)
 18183d8:	10c00683 	ldbu	r3,26(r2)
 18183dc:	1806703a 	and	r3,r3,zero
 18183e0:	10c00685 	stb	r3,26(r2)
 18183e4:	10c006c3 	ldbu	r3,27(r2)
 18183e8:	1806703a 	and	r3,r3,zero
 18183ec:	10c006c5 	stb	r3,27(r2)
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 18183f0:	e03ffc0d 	sth	zero,-16(fp)
 18183f4:	00001606 	br	1818450 <dhcp_create_msg+0x43c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
 18183f8:	e0bffe17 	ldw	r2,-8(fp)
 18183fc:	11000517 	ldw	r4,20(r2)
 1818400:	e0fffc0b 	ldhu	r3,-16(fp)
 1818404:	e0bffd17 	ldw	r2,-12(fp)
 1818408:	10800c83 	ldbu	r2,50(r2)
 181840c:	10803fcc 	andi	r2,r2,255
 1818410:	10bfffcc 	andi	r2,r2,65535
 1818414:	e17ffc0b 	ldhu	r5,-16(fp)
 1818418:	2880062e 	bgeu	r5,r2,1818434 <dhcp_create_msg+0x420>
 181841c:	e0bffc0b 	ldhu	r2,-16(fp)
 1818420:	e17ffd17 	ldw	r5,-12(fp)
 1818424:	2885883a 	add	r2,r5,r2
 1818428:	10800cc4 	addi	r2,r2,51
 181842c:	10800003 	ldbu	r2,0(r2)
 1818430:	00000106 	br	1818438 <dhcp_create_msg+0x424>
 1818434:	0005883a 	mov	r2,zero
 1818438:	20c7883a 	add	r3,r4,r3
 181843c:	18c00704 	addi	r3,r3,28
 1818440:	18800005 	stb	r2,0(r3)
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 1818444:	e0bffc0b 	ldhu	r2,-16(fp)
 1818448:	10800044 	addi	r2,r2,1
 181844c:	e0bffc0d 	sth	r2,-16(fp)
 1818450:	e0bffc0b 	ldhu	r2,-16(fp)
 1818454:	10800430 	cmpltui	r2,r2,16
 1818458:	103fe71e 	bne	r2,zero,18183f8 <__alt_mem_mem_0+0xff7f83f8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 181845c:	e03ffc0d 	sth	zero,-16(fp)
 1818460:	00000906 	br	1818488 <dhcp_create_msg+0x474>
    dhcp->msg_out->sname[i] = 0;
 1818464:	e0bffe17 	ldw	r2,-8(fp)
 1818468:	10c00517 	ldw	r3,20(r2)
 181846c:	e0bffc0b 	ldhu	r2,-16(fp)
 1818470:	1885883a 	add	r2,r3,r2
 1818474:	10800b04 	addi	r2,r2,44
 1818478:	10000005 	stb	zero,0(r2)
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 181847c:	e0bffc0b 	ldhu	r2,-16(fp)
 1818480:	10800044 	addi	r2,r2,1
 1818484:	e0bffc0d 	sth	r2,-16(fp)
 1818488:	e0bffc0b 	ldhu	r2,-16(fp)
 181848c:	10801030 	cmpltui	r2,r2,64
 1818490:	103ff41e 	bne	r2,zero,1818464 <__alt_mem_mem_0+0xff7f8464>
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 1818494:	e03ffc0d 	sth	zero,-16(fp)
 1818498:	00000906 	br	18184c0 <dhcp_create_msg+0x4ac>
    dhcp->msg_out->file[i] = 0;
 181849c:	e0bffe17 	ldw	r2,-8(fp)
 18184a0:	10c00517 	ldw	r3,20(r2)
 18184a4:	e0bffc0b 	ldhu	r2,-16(fp)
 18184a8:	1885883a 	add	r2,r3,r2
 18184ac:	10801b04 	addi	r2,r2,108
 18184b0:	10000005 	stb	zero,0(r2)
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 18184b4:	e0bffc0b 	ldhu	r2,-16(fp)
 18184b8:	10800044 	addi	r2,r2,1
 18184bc:	e0bffc0d 	sth	r2,-16(fp)
 18184c0:	e0bffc0b 	ldhu	r2,-16(fp)
 18184c4:	10802030 	cmpltui	r2,r2,128
 18184c8:	103ff41e 	bne	r2,zero,181849c <__alt_mem_mem_0+0xff7f849c>
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 18184cc:	e0bffe17 	ldw	r2,-8(fp)
 18184d0:	10800517 	ldw	r2,20(r2)
 18184d4:	10c03b03 	ldbu	r3,236(r2)
 18184d8:	1806703a 	and	r3,r3,zero
 18184dc:	18c018d4 	ori	r3,r3,99
 18184e0:	10c03b05 	stb	r3,236(r2)
 18184e4:	10c03b43 	ldbu	r3,237(r2)
 18184e8:	1806703a 	and	r3,r3,zero
 18184ec:	1809883a 	mov	r4,r3
 18184f0:	00ffe084 	movi	r3,-126
 18184f4:	20c6b03a 	or	r3,r4,r3
 18184f8:	10c03b45 	stb	r3,237(r2)
 18184fc:	10c03b83 	ldbu	r3,238(r2)
 1818500:	1806703a 	and	r3,r3,zero
 1818504:	18c014d4 	ori	r3,r3,83
 1818508:	10c03b85 	stb	r3,238(r2)
 181850c:	10c03bc3 	ldbu	r3,239(r2)
 1818510:	1806703a 	and	r3,r3,zero
 1818514:	18c018d4 	ori	r3,r3,99
 1818518:	10c03bc5 	stb	r3,239(r2)
  dhcp->options_out_len = 0;
 181851c:	e0bffe17 	ldw	r2,-8(fp)
 1818520:	1000060d 	sth	zero,24(r2)
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 1818524:	e03ffc0d 	sth	zero,-16(fp)
 1818528:	00000a06 	br	1818554 <dhcp_create_msg+0x540>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 181852c:	e0bffe17 	ldw	r2,-8(fp)
 1818530:	10c00517 	ldw	r3,20(r2)
 1818534:	e0bffc0b 	ldhu	r2,-16(fp)
 1818538:	e13ffc0b 	ldhu	r4,-16(fp)
 181853c:	1885883a 	add	r2,r3,r2
 1818540:	10803c04 	addi	r2,r2,240
 1818544:	11000005 	stb	r4,0(r2)
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 1818548:	e0bffc0b 	ldhu	r2,-16(fp)
 181854c:	10800044 	addi	r2,r2,1
 1818550:	e0bffc0d 	sth	r2,-16(fp)
 1818554:	e0bffc0b 	ldhu	r2,-16(fp)
 1818558:	10801130 	cmpltui	r2,r2,68
 181855c:	103ff31e 	bne	r2,zero,181852c <__alt_mem_mem_0+0xff7f852c>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 1818560:	01800044 	movi	r6,1
 1818564:	01400d44 	movi	r5,53
 1818568:	e13ffe17 	ldw	r4,-8(fp)
 181856c:	18170980 	call	1817098 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 1818570:	e0bfff03 	ldbu	r2,-4(fp)
 1818574:	100b883a 	mov	r5,r2
 1818578:	e13ffe17 	ldw	r4,-8(fp)
 181857c:	18171340 	call	1817134 <dhcp_option_byte>
  return ERR_OK;
 1818580:	0005883a 	mov	r2,zero
}
 1818584:	e037883a 	mov	sp,fp
 1818588:	dfc00117 	ldw	ra,4(sp)
 181858c:	df000017 	ldw	fp,0(sp)
 1818590:	dec00204 	addi	sp,sp,8
 1818594:	f800283a 	ret

01818598 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 1818598:	defffd04 	addi	sp,sp,-12
 181859c:	dfc00215 	stw	ra,8(sp)
 18185a0:	df000115 	stw	fp,4(sp)
 18185a4:	df000104 	addi	fp,sp,4
 18185a8:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 18185ac:	e0bfff17 	ldw	r2,-4(fp)
 18185b0:	1000091e 	bne	r2,zero,18185d8 <dhcp_delete_msg+0x40>
 18185b4:	01c06134 	movhi	r7,388
 18185b8:	39c38904 	addi	r7,r7,3620
 18185bc:	0181b584 	movi	r6,1750
 18185c0:	01406134 	movhi	r5,388
 18185c4:	2943dc04 	addi	r5,r5,3952
 18185c8:	01006134 	movhi	r4,388
 18185cc:	21039304 	addi	r4,r4,3660
 18185d0:	1800bd80 	call	1800bd8 <printf>
 18185d4:	003fff06 	br	18185d4 <__alt_mem_mem_0+0xff7f85d4>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  if (dhcp->p_out != NULL) {
 18185d8:	e0bfff17 	ldw	r2,-4(fp)
 18185dc:	10800417 	ldw	r2,16(r2)
 18185e0:	10000426 	beq	r2,zero,18185f4 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 18185e4:	e0bfff17 	ldw	r2,-4(fp)
 18185e8:	10800417 	ldw	r2,16(r2)
 18185ec:	1009883a 	mov	r4,r2
 18185f0:	181a9040 	call	181a904 <pbuf_free>
  }
  dhcp->p_out = NULL;
 18185f4:	e0bfff17 	ldw	r2,-4(fp)
 18185f8:	10000415 	stw	zero,16(r2)
  dhcp->msg_out = NULL;
 18185fc:	e0bfff17 	ldw	r2,-4(fp)
 1818600:	10000515 	stw	zero,20(r2)
}
 1818604:	0001883a 	nop
 1818608:	e037883a 	mov	sp,fp
 181860c:	dfc00117 	ldw	ra,4(sp)
 1818610:	df000017 	ldw	fp,0(sp)
 1818614:	dec00204 	addi	sp,sp,8
 1818618:	f800283a 	ret

0181861c <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 181861c:	defffd04 	addi	sp,sp,-12
 1818620:	dfc00215 	stw	ra,8(sp)
 1818624:	df000115 	stw	fp,4(sp)
 1818628:	df000104 	addi	fp,sp,4
 181862c:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 1818630:	e0bfff17 	ldw	r2,-4(fp)
 1818634:	1000091e 	bne	r2,zero,181865c <dhcp_option_trailer+0x40>
 1818638:	01c06134 	movhi	r7,388
 181863c:	39c38904 	addi	r7,r7,3620
 1818640:	0181bac4 	movi	r6,1771
 1818644:	01406134 	movhi	r5,388
 1818648:	2943e404 	addi	r5,r5,3984
 181864c:	01006134 	movhi	r4,388
 1818650:	21039304 	addi	r4,r4,3660
 1818654:	1800bd80 	call	1800bd8 <printf>
 1818658:	003fff06 	br	1818658 <__alt_mem_mem_0+0xff7f8658>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 181865c:	e0bfff17 	ldw	r2,-4(fp)
 1818660:	10c00517 	ldw	r3,20(r2)
 1818664:	e0bfff17 	ldw	r2,-4(fp)
 1818668:	1080060b 	ldhu	r2,24(r2)
 181866c:	11000044 	addi	r4,r2,1
 1818670:	200b883a 	mov	r5,r4
 1818674:	e13fff17 	ldw	r4,-4(fp)
 1818678:	2140060d 	sth	r5,24(r4)
 181867c:	10bfffcc 	andi	r2,r2,65535
 1818680:	1885883a 	add	r2,r3,r2
 1818684:	10803c04 	addi	r2,r2,240
 1818688:	00ffffc4 	movi	r3,-1
 181868c:	10c00005 	stb	r3,0(r2)
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 1818690:	00000c06 	br	18186c4 <dhcp_option_trailer+0xa8>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 1818694:	e0bfff17 	ldw	r2,-4(fp)
 1818698:	10c00517 	ldw	r3,20(r2)
 181869c:	e0bfff17 	ldw	r2,-4(fp)
 18186a0:	1080060b 	ldhu	r2,24(r2)
 18186a4:	11000044 	addi	r4,r2,1
 18186a8:	200b883a 	mov	r5,r4
 18186ac:	e13fff17 	ldw	r4,-4(fp)
 18186b0:	2140060d 	sth	r5,24(r4)
 18186b4:	10bfffcc 	andi	r2,r2,65535
 18186b8:	1885883a 	add	r2,r3,r2
 18186bc:	10803c04 	addi	r2,r2,240
 18186c0:	10000005 	stb	zero,0(r2)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 18186c4:	e0bfff17 	ldw	r2,-4(fp)
 18186c8:	1080060b 	ldhu	r2,24(r2)
 18186cc:	10bfffcc 	andi	r2,r2,65535
 18186d0:	10801130 	cmpltui	r2,r2,68
 18186d4:	1000051e 	bne	r2,zero,18186ec <dhcp_option_trailer+0xd0>
 18186d8:	e0bfff17 	ldw	r2,-4(fp)
 18186dc:	1080060b 	ldhu	r2,24(r2)
 18186e0:	10bfffcc 	andi	r2,r2,65535
 18186e4:	108000cc 	andi	r2,r2,3
 18186e8:	10000526 	beq	r2,zero,1818700 <dhcp_option_trailer+0xe4>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 18186ec:	e0bfff17 	ldw	r2,-4(fp)
 18186f0:	1080060b 	ldhu	r2,24(r2)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 18186f4:	10bfffcc 	andi	r2,r2,65535
 18186f8:	10801130 	cmpltui	r2,r2,68
 18186fc:	103fe51e 	bne	r2,zero,1818694 <__alt_mem_mem_0+0xff7f8694>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 1818700:	0001883a 	nop
 1818704:	e037883a 	mov	sp,fp
 1818708:	dfc00117 	ldw	ra,4(sp)
 181870c:	df000017 	ldw	fp,0(sp)
 1818710:	dec00204 	addi	sp,sp,8
 1818714:	f800283a 	ret

01818718 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
 1818718:	defffc04 	addi	sp,sp,-16
 181871c:	df000315 	stw	fp,12(sp)
 1818720:	df000304 	addi	fp,sp,12
 1818724:	e13ffe15 	stw	r4,-8(fp)
 1818728:	e17fff15 	stw	r5,-4(fp)
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 181872c:	e0bffe17 	ldw	r2,-8(fp)
 1818730:	e0bffd15 	stw	r2,-12(fp)

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 1818734:	e0bffe17 	ldw	r2,-8(fp)
 1818738:	10bfffe0 	cmpeqi	r2,r2,-1
 181873c:	1000021e 	bne	r2,zero,1818748 <ip4_addr_isbroadcast+0x30>
 1818740:	e0bffe17 	ldw	r2,-8(fp)
 1818744:	1000021e 	bne	r2,zero,1818750 <ip4_addr_isbroadcast+0x38>
      (addr == IPADDR_ANY)) {
    return 1;
 1818748:	00800044 	movi	r2,1
 181874c:	00002106 	br	18187d4 <ip4_addr_isbroadcast+0xbc>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 1818750:	e0bfff17 	ldw	r2,-4(fp)
 1818754:	10800e43 	ldbu	r2,57(r2)
 1818758:	10803fcc 	andi	r2,r2,255
 181875c:	1080008c 	andi	r2,r2,2
 1818760:	1000021e 	bne	r2,zero,181876c <ip4_addr_isbroadcast+0x54>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 1818764:	0005883a 	mov	r2,zero
 1818768:	00001a06 	br	18187d4 <ip4_addr_isbroadcast+0xbc>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
 181876c:	e0bfff17 	ldw	r2,-4(fp)
 1818770:	10c00117 	ldw	r3,4(r2)
 1818774:	e0bffe17 	ldw	r2,-8(fp)
 1818778:	1880021e 	bne	r3,r2,1818784 <ip4_addr_isbroadcast+0x6c>
    return 0;
 181877c:	0005883a 	mov	r2,zero
 1818780:	00001406 	br	18187d4 <ip4_addr_isbroadcast+0xbc>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
 1818784:	e0fffd17 	ldw	r3,-12(fp)
 1818788:	e0bfff17 	ldw	r2,-4(fp)
 181878c:	10800117 	ldw	r2,4(r2)
 1818790:	1886f03a 	xor	r3,r3,r2
 1818794:	e0bfff17 	ldw	r2,-4(fp)
 1818798:	10800217 	ldw	r2,8(r2)
 181879c:	1884703a 	and	r2,r3,r2
 18187a0:	10000b1e 	bne	r2,zero,18187d0 <ip4_addr_isbroadcast+0xb8>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 18187a4:	e0bfff17 	ldw	r2,-4(fp)
 18187a8:	10800217 	ldw	r2,8(r2)
 18187ac:	0086303a 	nor	r3,zero,r2
 18187b0:	e0bffe17 	ldw	r2,-8(fp)
 18187b4:	1886703a 	and	r3,r3,r2
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
 18187b8:	e0bfff17 	ldw	r2,-4(fp)
 18187bc:	10800217 	ldw	r2,8(r2)
 18187c0:	0084303a 	nor	r2,zero,r2
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 18187c4:	1880021e 	bne	r3,r2,18187d0 <ip4_addr_isbroadcast+0xb8>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
 18187c8:	00800044 	movi	r2,1
 18187cc:	00000106 	br	18187d4 <ip4_addr_isbroadcast+0xbc>
  } else {
    return 0;
 18187d0:	0005883a 	mov	r2,zero
  }
}
 18187d4:	e037883a 	mov	sp,fp
 18187d8:	df000017 	ldw	fp,0(sp)
 18187dc:	dec00104 	addi	sp,sp,4
 18187e0:	f800283a 	ret

018187e4 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
 18187e4:	defffc04 	addi	sp,sp,-16
 18187e8:	df000315 	stw	fp,12(sp)
 18187ec:	df000304 	addi	fp,sp,12
 18187f0:	e13fff15 	stw	r4,-4(fp)
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
 18187f4:	e0bfff17 	ldw	r2,-4(fp)
 18187f8:	1006d63a 	srli	r3,r2,24
 18187fc:	e0bfff17 	ldw	r2,-4(fp)
 1818800:	1004d23a 	srli	r2,r2,8
 1818804:	10bfc00c 	andi	r2,r2,65280
 1818808:	1886b03a 	or	r3,r3,r2
 181880c:	e0bfff17 	ldw	r2,-4(fp)
 1818810:	10bfc00c 	andi	r2,r2,65280
 1818814:	1004923a 	slli	r2,r2,8
 1818818:	1886b03a 	or	r3,r3,r2
 181881c:	e0bfff17 	ldw	r2,-4(fp)
 1818820:	1004963a 	slli	r2,r2,24
 1818824:	1884b03a 	or	r2,r3,r2
 1818828:	e0bffe15 	stw	r2,-8(fp)

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
 181882c:	00a00034 	movhi	r2,32768
 1818830:	e0bffd15 	stw	r2,-12(fp)
 1818834:	00000706 	br	1818854 <ip4_addr_netmask_valid+0x70>
    if ((nm_hostorder & mask) == 0) {
 1818838:	e0fffe17 	ldw	r3,-8(fp)
 181883c:	e0bffd17 	ldw	r2,-12(fp)
 1818840:	1884703a 	and	r2,r3,r2
 1818844:	10000626 	beq	r2,zero,1818860 <ip4_addr_netmask_valid+0x7c>
{
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
 1818848:	e0bffd17 	ldw	r2,-12(fp)
 181884c:	1004d07a 	srli	r2,r2,1
 1818850:	e0bffd15 	stw	r2,-12(fp)
 1818854:	e0bffd17 	ldw	r2,-12(fp)
 1818858:	103ff71e 	bne	r2,zero,1818838 <__alt_mem_mem_0+0xff7f8838>
 181885c:	00000b06 	br	181888c <ip4_addr_netmask_valid+0xa8>
    if ((nm_hostorder & mask) == 0) {
      break;
 1818860:	0001883a 	nop
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
 1818864:	00000906 	br	181888c <ip4_addr_netmask_valid+0xa8>
    if ((nm_hostorder & mask) != 0) {
 1818868:	e0fffe17 	ldw	r3,-8(fp)
 181886c:	e0bffd17 	ldw	r2,-12(fp)
 1818870:	1884703a 	and	r2,r3,r2
 1818874:	10000226 	beq	r2,zero,1818880 <ip4_addr_netmask_valid+0x9c>
      /* there is a one after the first zero -> invalid */
      return 0;
 1818878:	0005883a 	mov	r2,zero
 181887c:	00000606 	br	1818898 <ip4_addr_netmask_valid+0xb4>
    if ((nm_hostorder & mask) == 0) {
      break;
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
 1818880:	e0bffd17 	ldw	r2,-12(fp)
 1818884:	1004d07a 	srli	r2,r2,1
 1818888:	e0bffd15 	stw	r2,-12(fp)
 181888c:	e0bffd17 	ldw	r2,-12(fp)
 1818890:	103ff51e 	bne	r2,zero,1818868 <__alt_mem_mem_0+0xff7f8868>
      /* there is a one after the first zero -> invalid */
      return 0;
    }
  }
  /* no one after the first zero -> valid */
  return 1;
 1818894:	00800044 	movi	r2,1
}
 1818898:	e037883a 	mov	sp,fp
 181889c:	df000017 	ldw	fp,0(sp)
 18188a0:	dec00104 	addi	sp,sp,4
 18188a4:	f800283a 	ret

018188a8 <ipaddr_addr>:
 * @param cp IP address in ascii represenation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 18188a8:	defffc04 	addi	sp,sp,-16
 18188ac:	dfc00315 	stw	ra,12(sp)
 18188b0:	df000215 	stw	fp,8(sp)
 18188b4:	df000204 	addi	fp,sp,8
 18188b8:	e13fff15 	stw	r4,-4(fp)
  ip_addr_t val;

  if (ipaddr_aton(cp, &val)) {
 18188bc:	e17ffe04 	addi	r5,fp,-8
 18188c0:	e13fff17 	ldw	r4,-4(fp)
 18188c4:	18188ec0 	call	18188ec <ipaddr_aton>
 18188c8:	10000226 	beq	r2,zero,18188d4 <ipaddr_addr+0x2c>
    return ip4_addr_get_u32(&val);
 18188cc:	e0bffe17 	ldw	r2,-8(fp)
 18188d0:	00000106 	br	18188d8 <ipaddr_addr+0x30>
  }
  return (IPADDR_NONE);
 18188d4:	00bfffc4 	movi	r2,-1
}
 18188d8:	e037883a 	mov	sp,fp
 18188dc:	dfc00117 	ldw	ra,4(sp)
 18188e0:	df000017 	ldw	fp,0(sp)
 18188e4:	dec00204 	addi	sp,sp,8
 18188e8:	f800283a 	ret

018188ec <ipaddr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ipaddr_aton(const char *cp, ip_addr_t *addr)
{
 18188ec:	defff604 	addi	sp,sp,-40
 18188f0:	df000915 	stw	fp,36(sp)
 18188f4:	df000904 	addi	fp,sp,36
 18188f8:	e13ffe15 	stw	r4,-8(fp)
 18188fc:	e17fff15 	stw	r5,-4(fp)
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 1818900:	e0bffa04 	addi	r2,fp,-24
 1818904:	e0bff915 	stw	r2,-28(fp)

  c = *cp;
 1818908:	e0bffe17 	ldw	r2,-8(fp)
 181890c:	10800003 	ldbu	r2,0(r2)
 1818910:	e0bff845 	stb	r2,-31(fp)
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c))
 1818914:	e0bff843 	ldbu	r2,-31(fp)
 1818918:	10803fcc 	andi	r2,r2,255
 181891c:	10800c30 	cmpltui	r2,r2,48
 1818920:	1000041e 	bne	r2,zero,1818934 <ipaddr_aton+0x48>
 1818924:	e0bff843 	ldbu	r2,-31(fp)
 1818928:	10803fcc 	andi	r2,r2,255
 181892c:	10800eb0 	cmpltui	r2,r2,58
 1818930:	1000021e 	bne	r2,zero,181893c <ipaddr_aton+0x50>
      return (0);
 1818934:	0005883a 	mov	r2,zero
 1818938:	0000e606 	br	1818cd4 <ipaddr_aton+0x3e8>
    val = 0;
 181893c:	e03ff715 	stw	zero,-36(fp)
    base = 10;
 1818940:	00800284 	movi	r2,10
 1818944:	e0bff805 	stb	r2,-32(fp)
    if (c == '0') {
 1818948:	e0bff847 	ldb	r2,-31(fp)
 181894c:	10800c18 	cmpnei	r2,r2,48
 1818950:	1000171e 	bne	r2,zero,18189b0 <ipaddr_aton+0xc4>
      c = *++cp;
 1818954:	e0bffe17 	ldw	r2,-8(fp)
 1818958:	10800044 	addi	r2,r2,1
 181895c:	e0bffe15 	stw	r2,-8(fp)
 1818960:	e0bffe17 	ldw	r2,-8(fp)
 1818964:	10800003 	ldbu	r2,0(r2)
 1818968:	e0bff845 	stb	r2,-31(fp)
      if (c == 'x' || c == 'X') {
 181896c:	e0bff847 	ldb	r2,-31(fp)
 1818970:	10801e20 	cmpeqi	r2,r2,120
 1818974:	1000031e 	bne	r2,zero,1818984 <ipaddr_aton+0x98>
 1818978:	e0bff847 	ldb	r2,-31(fp)
 181897c:	10801618 	cmpnei	r2,r2,88
 1818980:	1000091e 	bne	r2,zero,18189a8 <ipaddr_aton+0xbc>
        base = 16;
 1818984:	00800404 	movi	r2,16
 1818988:	e0bff805 	stb	r2,-32(fp)
        c = *++cp;
 181898c:	e0bffe17 	ldw	r2,-8(fp)
 1818990:	10800044 	addi	r2,r2,1
 1818994:	e0bffe15 	stw	r2,-8(fp)
 1818998:	e0bffe17 	ldw	r2,-8(fp)
 181899c:	10800003 	ldbu	r2,0(r2)
 18189a0:	e0bff845 	stb	r2,-31(fp)
 18189a4:	00000206 	br	18189b0 <ipaddr_aton+0xc4>
      } else
        base = 8;
 18189a8:	00800204 	movi	r2,8
 18189ac:	e0bff805 	stb	r2,-32(fp)
    }
    for (;;) {
      if (isdigit(c)) {
 18189b0:	e0bff843 	ldbu	r2,-31(fp)
 18189b4:	10803fcc 	andi	r2,r2,255
 18189b8:	10800c30 	cmpltui	r2,r2,48
 18189bc:	1000121e 	bne	r2,zero,1818a08 <ipaddr_aton+0x11c>
 18189c0:	e0bff843 	ldbu	r2,-31(fp)
 18189c4:	10803fcc 	andi	r2,r2,255
 18189c8:	10800ea8 	cmpgeui	r2,r2,58
 18189cc:	10000e1e 	bne	r2,zero,1818a08 <ipaddr_aton+0x11c>
        val = (val * base) + (int)(c - '0');
 18189d0:	e0fff803 	ldbu	r3,-32(fp)
 18189d4:	e0bff717 	ldw	r2,-36(fp)
 18189d8:	1887383a 	mul	r3,r3,r2
 18189dc:	e0bff847 	ldb	r2,-31(fp)
 18189e0:	1885883a 	add	r2,r3,r2
 18189e4:	10bff404 	addi	r2,r2,-48
 18189e8:	e0bff715 	stw	r2,-36(fp)
        c = *++cp;
 18189ec:	e0bffe17 	ldw	r2,-8(fp)
 18189f0:	10800044 	addi	r2,r2,1
 18189f4:	e0bffe15 	stw	r2,-8(fp)
 18189f8:	e0bffe17 	ldw	r2,-8(fp)
 18189fc:	10800003 	ldbu	r2,0(r2)
 1818a00:	e0bff845 	stb	r2,-31(fp)
 1818a04:	00003306 	br	1818ad4 <ipaddr_aton+0x1e8>
      } else if (base == 16 && isxdigit(c)) {
 1818a08:	e0bff803 	ldbu	r2,-32(fp)
 1818a0c:	10800418 	cmpnei	r2,r2,16
 1818a10:	1000311e 	bne	r2,zero,1818ad8 <ipaddr_aton+0x1ec>
 1818a14:	e0bff843 	ldbu	r2,-31(fp)
 1818a18:	10803fcc 	andi	r2,r2,255
 1818a1c:	10800c30 	cmpltui	r2,r2,48
 1818a20:	1000041e 	bne	r2,zero,1818a34 <ipaddr_aton+0x148>
 1818a24:	e0bff843 	ldbu	r2,-31(fp)
 1818a28:	10803fcc 	andi	r2,r2,255
 1818a2c:	10800eb0 	cmpltui	r2,r2,58
 1818a30:	1000101e 	bne	r2,zero,1818a74 <ipaddr_aton+0x188>
 1818a34:	e0bff843 	ldbu	r2,-31(fp)
 1818a38:	10803fcc 	andi	r2,r2,255
 1818a3c:	10801870 	cmpltui	r2,r2,97
 1818a40:	1000041e 	bne	r2,zero,1818a54 <ipaddr_aton+0x168>
 1818a44:	e0bff843 	ldbu	r2,-31(fp)
 1818a48:	10803fcc 	andi	r2,r2,255
 1818a4c:	108019f0 	cmpltui	r2,r2,103
 1818a50:	1000081e 	bne	r2,zero,1818a74 <ipaddr_aton+0x188>
 1818a54:	e0bff843 	ldbu	r2,-31(fp)
 1818a58:	10803fcc 	andi	r2,r2,255
 1818a5c:	10801070 	cmpltui	r2,r2,65
 1818a60:	10001d1e 	bne	r2,zero,1818ad8 <ipaddr_aton+0x1ec>
 1818a64:	e0bff843 	ldbu	r2,-31(fp)
 1818a68:	10803fcc 	andi	r2,r2,255
 1818a6c:	108011e8 	cmpgeui	r2,r2,71
 1818a70:	1000191e 	bne	r2,zero,1818ad8 <ipaddr_aton+0x1ec>
        val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
 1818a74:	e0bff717 	ldw	r2,-36(fp)
 1818a78:	1006913a 	slli	r3,r2,4
 1818a7c:	e0bff847 	ldb	r2,-31(fp)
 1818a80:	11000284 	addi	r4,r2,10
 1818a84:	e0bff843 	ldbu	r2,-31(fp)
 1818a88:	10803fcc 	andi	r2,r2,255
 1818a8c:	10801870 	cmpltui	r2,r2,97
 1818a90:	1000061e 	bne	r2,zero,1818aac <ipaddr_aton+0x1c0>
 1818a94:	e0bff843 	ldbu	r2,-31(fp)
 1818a98:	10803fcc 	andi	r2,r2,255
 1818a9c:	10801ee8 	cmpgeui	r2,r2,123
 1818aa0:	1000021e 	bne	r2,zero,1818aac <ipaddr_aton+0x1c0>
 1818aa4:	00801844 	movi	r2,97
 1818aa8:	00000106 	br	1818ab0 <ipaddr_aton+0x1c4>
 1818aac:	00801044 	movi	r2,65
 1818ab0:	2085c83a 	sub	r2,r4,r2
 1818ab4:	1884b03a 	or	r2,r3,r2
 1818ab8:	e0bff715 	stw	r2,-36(fp)
        c = *++cp;
 1818abc:	e0bffe17 	ldw	r2,-8(fp)
 1818ac0:	10800044 	addi	r2,r2,1
 1818ac4:	e0bffe15 	stw	r2,-8(fp)
 1818ac8:	e0bffe17 	ldw	r2,-8(fp)
 1818acc:	10800003 	ldbu	r2,0(r2)
 1818ad0:	e0bff845 	stb	r2,-31(fp)
      } else
        break;
    }
 1818ad4:	003fb606 	br	18189b0 <__alt_mem_mem_0+0xff7f89b0>
    if (c == '.') {
 1818ad8:	e0bff847 	ldb	r2,-31(fp)
 1818adc:	10800b98 	cmpnei	r2,r2,46
 1818ae0:	1000121e 	bne	r2,zero,1818b2c <ipaddr_aton+0x240>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 1818ae4:	e0bffa04 	addi	r2,fp,-24
 1818ae8:	10800304 	addi	r2,r2,12
 1818aec:	e0fff917 	ldw	r3,-28(fp)
 1818af0:	18800236 	bltu	r3,r2,1818afc <ipaddr_aton+0x210>
        return (0);
 1818af4:	0005883a 	mov	r2,zero
 1818af8:	00007606 	br	1818cd4 <ipaddr_aton+0x3e8>
      }
      *pp++ = val;
 1818afc:	e0bff917 	ldw	r2,-28(fp)
 1818b00:	10c00104 	addi	r3,r2,4
 1818b04:	e0fff915 	stw	r3,-28(fp)
 1818b08:	e0fff717 	ldw	r3,-36(fp)
 1818b0c:	10c00015 	stw	r3,0(r2)
      c = *++cp;
 1818b10:	e0bffe17 	ldw	r2,-8(fp)
 1818b14:	10800044 	addi	r2,r2,1
 1818b18:	e0bffe15 	stw	r2,-8(fp)
 1818b1c:	e0bffe17 	ldw	r2,-8(fp)
 1818b20:	10800003 	ldbu	r2,0(r2)
 1818b24:	e0bff845 	stb	r2,-31(fp)
    } else
      break;
  }
 1818b28:	003f7a06 	br	1818914 <__alt_mem_mem_0+0xff7f8914>
        return (0);
      }
      *pp++ = val;
      c = *++cp;
    } else
      break;
 1818b2c:	0001883a 	nop
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 1818b30:	e0bff847 	ldb	r2,-31(fp)
 1818b34:	10001426 	beq	r2,zero,1818b88 <ipaddr_aton+0x29c>
 1818b38:	e0bff847 	ldb	r2,-31(fp)
 1818b3c:	10800820 	cmpeqi	r2,r2,32
 1818b40:	1000111e 	bne	r2,zero,1818b88 <ipaddr_aton+0x29c>
 1818b44:	e0bff847 	ldb	r2,-31(fp)
 1818b48:	10800320 	cmpeqi	r2,r2,12
 1818b4c:	10000e1e 	bne	r2,zero,1818b88 <ipaddr_aton+0x29c>
 1818b50:	e0bff847 	ldb	r2,-31(fp)
 1818b54:	108002a0 	cmpeqi	r2,r2,10
 1818b58:	10000b1e 	bne	r2,zero,1818b88 <ipaddr_aton+0x29c>
 1818b5c:	e0bff847 	ldb	r2,-31(fp)
 1818b60:	10800360 	cmpeqi	r2,r2,13
 1818b64:	1000081e 	bne	r2,zero,1818b88 <ipaddr_aton+0x29c>
 1818b68:	e0bff847 	ldb	r2,-31(fp)
 1818b6c:	10800260 	cmpeqi	r2,r2,9
 1818b70:	1000051e 	bne	r2,zero,1818b88 <ipaddr_aton+0x29c>
 1818b74:	e0bff847 	ldb	r2,-31(fp)
 1818b78:	108002e0 	cmpeqi	r2,r2,11
 1818b7c:	1000021e 	bne	r2,zero,1818b88 <ipaddr_aton+0x29c>
    return (0);
 1818b80:	0005883a 	mov	r2,zero
 1818b84:	00005306 	br	1818cd4 <ipaddr_aton+0x3e8>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 1818b88:	e0fff917 	ldw	r3,-28(fp)
 1818b8c:	e0bffa04 	addi	r2,fp,-24
 1818b90:	1885c83a 	sub	r2,r3,r2
 1818b94:	1005d0ba 	srai	r2,r2,2
 1818b98:	10800044 	addi	r2,r2,1
 1818b9c:	10c00168 	cmpgeui	r3,r2,5
 1818ba0:	1800371e 	bne	r3,zero,1818c80 <ipaddr_aton+0x394>
 1818ba4:	100690ba 	slli	r3,r2,2
 1818ba8:	008060b4 	movhi	r2,386
 1818bac:	10a2ef04 	addi	r2,r2,-29764
 1818bb0:	1885883a 	add	r2,r3,r2
 1818bb4:	10800017 	ldw	r2,0(r2)
 1818bb8:	1000683a 	jmp	r2
 1818bbc:	01818bd0 	cmplti	r6,zero,1583
 1818bc0:	01818c88 	cmpgei	r6,zero,1586
 1818bc4:	01818bd8 	cmpnei	r6,zero,1583
 1818bc8:	01818c04 	movi	r6,1584
 1818bcc:	01818c3c 	xorhi	r6,zero,1584

  case 0:
    return (0);       /* initial nondigit */
 1818bd0:	0005883a 	mov	r2,zero
 1818bd4:	00003f06 	br	1818cd4 <ipaddr_aton+0x3e8>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 1818bd8:	e0fff717 	ldw	r3,-36(fp)
 1818bdc:	00804034 	movhi	r2,256
 1818be0:	18800236 	bltu	r3,r2,1818bec <ipaddr_aton+0x300>
      return (0);
 1818be4:	0005883a 	mov	r2,zero
 1818be8:	00003a06 	br	1818cd4 <ipaddr_aton+0x3e8>
    }
    val |= parts[0] << 24;
 1818bec:	e0bffa17 	ldw	r2,-24(fp)
 1818bf0:	1004963a 	slli	r2,r2,24
 1818bf4:	e0fff717 	ldw	r3,-36(fp)
 1818bf8:	1884b03a 	or	r2,r3,r2
 1818bfc:	e0bff715 	stw	r2,-36(fp)
    break;
 1818c00:	00002206 	br	1818c8c <ipaddr_aton+0x3a0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 1818c04:	e0bff717 	ldw	r2,-36(fp)
 1818c08:	00ffffd4 	movui	r3,65535
 1818c0c:	1880022e 	bgeu	r3,r2,1818c18 <ipaddr_aton+0x32c>
      return (0);
 1818c10:	0005883a 	mov	r2,zero
 1818c14:	00002f06 	br	1818cd4 <ipaddr_aton+0x3e8>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 1818c18:	e0bffa17 	ldw	r2,-24(fp)
 1818c1c:	1006963a 	slli	r3,r2,24
 1818c20:	e0bffb17 	ldw	r2,-20(fp)
 1818c24:	1004943a 	slli	r2,r2,16
 1818c28:	1884b03a 	or	r2,r3,r2
 1818c2c:	e0fff717 	ldw	r3,-36(fp)
 1818c30:	1884b03a 	or	r2,r3,r2
 1818c34:	e0bff715 	stw	r2,-36(fp)
    break;
 1818c38:	00001406 	br	1818c8c <ipaddr_aton+0x3a0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 1818c3c:	e0bff717 	ldw	r2,-36(fp)
 1818c40:	10804030 	cmpltui	r2,r2,256
 1818c44:	1000021e 	bne	r2,zero,1818c50 <ipaddr_aton+0x364>
      return (0);
 1818c48:	0005883a 	mov	r2,zero
 1818c4c:	00002106 	br	1818cd4 <ipaddr_aton+0x3e8>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 1818c50:	e0bffa17 	ldw	r2,-24(fp)
 1818c54:	1006963a 	slli	r3,r2,24
 1818c58:	e0bffb17 	ldw	r2,-20(fp)
 1818c5c:	1004943a 	slli	r2,r2,16
 1818c60:	1886b03a 	or	r3,r3,r2
 1818c64:	e0bffc17 	ldw	r2,-16(fp)
 1818c68:	1004923a 	slli	r2,r2,8
 1818c6c:	1884b03a 	or	r2,r3,r2
 1818c70:	e0fff717 	ldw	r3,-36(fp)
 1818c74:	1884b03a 	or	r2,r3,r2
 1818c78:	e0bff715 	stw	r2,-36(fp)
    break;
 1818c7c:	00000306 	br	1818c8c <ipaddr_aton+0x3a0>
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
 1818c80:	0001883a 	nop
 1818c84:	00000106 	br	1818c8c <ipaddr_aton+0x3a0>

  case 0:
    return (0);       /* initial nondigit */

  case 1:             /* a -- 32 bits */
    break;
 1818c88:	0001883a 	nop
    break;
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
  }
  if (addr) {
 1818c8c:	e0bfff17 	ldw	r2,-4(fp)
 1818c90:	10000f26 	beq	r2,zero,1818cd0 <ipaddr_aton+0x3e4>
    ip4_addr_set_u32(addr, htonl(val));
 1818c94:	e0bff717 	ldw	r2,-36(fp)
 1818c98:	1006d63a 	srli	r3,r2,24
 1818c9c:	e0bff717 	ldw	r2,-36(fp)
 1818ca0:	1004d23a 	srli	r2,r2,8
 1818ca4:	10bfc00c 	andi	r2,r2,65280
 1818ca8:	1886b03a 	or	r3,r3,r2
 1818cac:	e0bff717 	ldw	r2,-36(fp)
 1818cb0:	10bfc00c 	andi	r2,r2,65280
 1818cb4:	1004923a 	slli	r2,r2,8
 1818cb8:	1886b03a 	or	r3,r3,r2
 1818cbc:	e0bff717 	ldw	r2,-36(fp)
 1818cc0:	1004963a 	slli	r2,r2,24
 1818cc4:	1886b03a 	or	r3,r3,r2
 1818cc8:	e0bfff17 	ldw	r2,-4(fp)
 1818ccc:	10c00015 	stw	r3,0(r2)
  }
  return (1);
 1818cd0:	00800044 	movi	r2,1
}
 1818cd4:	e037883a 	mov	sp,fp
 1818cd8:	df000017 	ldw	fp,0(sp)
 1818cdc:	dec00104 	addi	sp,sp,4
 1818ce0:	f800283a 	ret

01818ce4 <ipaddr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         represenation of addr
 */
char *
ipaddr_ntoa(const ip_addr_t *addr)
{
 1818ce4:	defffd04 	addi	sp,sp,-12
 1818ce8:	dfc00215 	stw	ra,8(sp)
 1818cec:	df000115 	stw	fp,4(sp)
 1818cf0:	df000104 	addi	fp,sp,4
 1818cf4:	e13fff15 	stw	r4,-4(fp)
  static char str[16];
  return ipaddr_ntoa_r(addr, str, 16);
 1818cf8:	01800404 	movi	r6,16
 1818cfc:	01406134 	movhi	r5,388
 1818d00:	295d5804 	addi	r5,r5,30048
 1818d04:	e13fff17 	ldw	r4,-4(fp)
 1818d08:	1818d200 	call	1818d20 <ipaddr_ntoa_r>
}
 1818d0c:	e037883a 	mov	sp,fp
 1818d10:	dfc00117 	ldw	ra,4(sp)
 1818d14:	df000017 	ldw	fp,0(sp)
 1818d18:	dec00204 	addi	sp,sp,8
 1818d1c:	f800283a 	ret

01818d20 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
 1818d20:	defff404 	addi	sp,sp,-48
 1818d24:	dfc00b15 	stw	ra,44(sp)
 1818d28:	df000a15 	stw	fp,40(sp)
 1818d2c:	df000a04 	addi	fp,sp,40
 1818d30:	e13ffd15 	stw	r4,-12(fp)
 1818d34:	e17ffe15 	stw	r5,-8(fp)
 1818d38:	e1bfff15 	stw	r6,-4(fp)
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 1818d3c:	e03ff915 	stw	zero,-28(fp)

  s_addr = ip4_addr_get_u32(addr);
 1818d40:	e0bffd17 	ldw	r2,-12(fp)
 1818d44:	10800017 	ldw	r2,0(r2)
 1818d48:	e0bffb15 	stw	r2,-20(fp)

  rp = buf;
 1818d4c:	e0bffe17 	ldw	r2,-8(fp)
 1818d50:	e0bff615 	stw	r2,-40(fp)
  ap = (u8_t *)&s_addr;
 1818d54:	e0bffb04 	addi	r2,fp,-20
 1818d58:	e0bff715 	stw	r2,-36(fp)
  for(n = 0; n < 4; n++) {
 1818d5c:	e03ff805 	stb	zero,-32(fp)
 1818d60:	00004606 	br	1818e7c <ipaddr_ntoa_r+0x15c>
    i = 0;
 1818d64:	e03ff845 	stb	zero,-31(fp)
    do {
      rem = *ap % (u8_t)10;
 1818d68:	e0bff717 	ldw	r2,-36(fp)
 1818d6c:	10800003 	ldbu	r2,0(r2)
 1818d70:	10803fcc 	andi	r2,r2,255
 1818d74:	01400284 	movi	r5,10
 1818d78:	1009883a 	mov	r4,r2
 1818d7c:	180ad340 	call	180ad34 <__umodsi3>
 1818d80:	e0bffa05 	stb	r2,-24(fp)
      *ap /= (u8_t)10;
 1818d84:	e0bff717 	ldw	r2,-36(fp)
 1818d88:	10800003 	ldbu	r2,0(r2)
 1818d8c:	10803fcc 	andi	r2,r2,255
 1818d90:	01400284 	movi	r5,10
 1818d94:	1009883a 	mov	r4,r2
 1818d98:	180acd00 	call	180acd0 <__udivsi3>
 1818d9c:	1007883a 	mov	r3,r2
 1818da0:	e0bff717 	ldw	r2,-36(fp)
 1818da4:	10c00005 	stb	r3,0(r2)
      inv[i++] = '0' + rem;
 1818da8:	e0bff843 	ldbu	r2,-31(fp)
 1818dac:	10c00044 	addi	r3,r2,1
 1818db0:	e0fff845 	stb	r3,-31(fp)
 1818db4:	10803fcc 	andi	r2,r2,255
 1818db8:	e0fffa03 	ldbu	r3,-24(fp)
 1818dbc:	18c00c04 	addi	r3,r3,48
 1818dc0:	1809883a 	mov	r4,r3
 1818dc4:	e0fffc04 	addi	r3,fp,-16
 1818dc8:	1885883a 	add	r2,r3,r2
 1818dcc:	11000005 	stb	r4,0(r2)
    } while(*ap);
 1818dd0:	e0bff717 	ldw	r2,-36(fp)
 1818dd4:	10800003 	ldbu	r2,0(r2)
 1818dd8:	10803fcc 	andi	r2,r2,255
 1818ddc:	103fe21e 	bne	r2,zero,1818d68 <__alt_mem_mem_0+0xff7f8d68>
    while(i--) {
 1818de0:	00000f06 	br	1818e20 <ipaddr_ntoa_r+0x100>
      if (len++ >= buflen) {
 1818de4:	e0bff917 	ldw	r2,-28(fp)
 1818de8:	10c00044 	addi	r3,r2,1
 1818dec:	e0fff915 	stw	r3,-28(fp)
 1818df0:	e0ffff17 	ldw	r3,-4(fp)
 1818df4:	10c00216 	blt	r2,r3,1818e00 <ipaddr_ntoa_r+0xe0>
        return NULL;
 1818df8:	0005883a 	mov	r2,zero
 1818dfc:	00002806 	br	1818ea0 <ipaddr_ntoa_r+0x180>
      }
      *rp++ = inv[i];
 1818e00:	e0bff617 	ldw	r2,-40(fp)
 1818e04:	10c00044 	addi	r3,r2,1
 1818e08:	e0fff615 	stw	r3,-40(fp)
 1818e0c:	e0fff843 	ldbu	r3,-31(fp)
 1818e10:	e13ffc04 	addi	r4,fp,-16
 1818e14:	20c7883a 	add	r3,r4,r3
 1818e18:	18c00003 	ldbu	r3,0(r3)
 1818e1c:	10c00005 	stb	r3,0(r2)
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--) {
 1818e20:	e0bff843 	ldbu	r2,-31(fp)
 1818e24:	10ffffc4 	addi	r3,r2,-1
 1818e28:	e0fff845 	stb	r3,-31(fp)
 1818e2c:	10803fcc 	andi	r2,r2,255
 1818e30:	103fec1e 	bne	r2,zero,1818de4 <__alt_mem_mem_0+0xff7f8de4>
      if (len++ >= buflen) {
        return NULL;
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
 1818e34:	e0bff917 	ldw	r2,-28(fp)
 1818e38:	10c00044 	addi	r3,r2,1
 1818e3c:	e0fff915 	stw	r3,-28(fp)
 1818e40:	e0ffff17 	ldw	r3,-4(fp)
 1818e44:	10c00216 	blt	r2,r3,1818e50 <ipaddr_ntoa_r+0x130>
      return NULL;
 1818e48:	0005883a 	mov	r2,zero
 1818e4c:	00001406 	br	1818ea0 <ipaddr_ntoa_r+0x180>
    }
    *rp++ = '.';
 1818e50:	e0bff617 	ldw	r2,-40(fp)
 1818e54:	10c00044 	addi	r3,r2,1
 1818e58:	e0fff615 	stw	r3,-40(fp)
 1818e5c:	00c00b84 	movi	r3,46
 1818e60:	10c00005 	stb	r3,0(r2)
    ap++;
 1818e64:	e0bff717 	ldw	r2,-36(fp)
 1818e68:	10800044 	addi	r2,r2,1
 1818e6c:	e0bff715 	stw	r2,-36(fp)

  s_addr = ip4_addr_get_u32(addr);

  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
 1818e70:	e0bff803 	ldbu	r2,-32(fp)
 1818e74:	10800044 	addi	r2,r2,1
 1818e78:	e0bff805 	stb	r2,-32(fp)
 1818e7c:	e0bff803 	ldbu	r2,-32(fp)
 1818e80:	10800130 	cmpltui	r2,r2,4
 1818e84:	103fb71e 	bne	r2,zero,1818d64 <__alt_mem_mem_0+0xff7f8d64>
      return NULL;
    }
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
 1818e88:	e0bff617 	ldw	r2,-40(fp)
 1818e8c:	10bfffc4 	addi	r2,r2,-1
 1818e90:	e0bff615 	stw	r2,-40(fp)
 1818e94:	e0bff617 	ldw	r2,-40(fp)
 1818e98:	10000005 	stb	zero,0(r2)
  return buf;
 1818e9c:	e0bffe17 	ldw	r2,-8(fp)
}
 1818ea0:	e037883a 	mov	sp,fp
 1818ea4:	dfc00117 	ldw	ra,4(sp)
 1818ea8:	df000017 	ldw	fp,0(sp)
 1818eac:	dec00204 	addi	sp,sp,8
 1818eb0:	f800283a 	ret

01818eb4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 1818eb4:	defffc04 	addi	sp,sp,-16
 1818eb8:	df000315 	stw	fp,12(sp)
 1818ebc:	df000304 	addi	fp,sp,12
 1818ec0:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 1818ec4:	d0e7ee17 	ldw	r3,-24648(gp)
 1818ec8:	e0bfff17 	ldw	r2,-4(fp)
 1818ecc:	1080000b 	ldhu	r2,0(r2)
 1818ed0:	10bfffcc 	andi	r2,r2,65535
 1818ed4:	1885883a 	add	r2,r3,r2
 1818ed8:	e0bffd15 	stw	r2,-12(fp)
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 1818edc:	e0ffff17 	ldw	r3,-4(fp)
 1818ee0:	e0bffd17 	ldw	r2,-12(fp)
 1818ee4:	18801926 	beq	r3,r2,1818f4c <plug_holes+0x98>
 1818ee8:	e0bffd17 	ldw	r2,-12(fp)
 1818eec:	10800103 	ldbu	r2,4(r2)
 1818ef0:	10803fcc 	andi	r2,r2,255
 1818ef4:	1000151e 	bne	r2,zero,1818f4c <plug_holes+0x98>
 1818ef8:	d0a7ef17 	ldw	r2,-24644(gp)
 1818efc:	e0fffd17 	ldw	r3,-12(fp)
 1818f00:	18801226 	beq	r3,r2,1818f4c <plug_holes+0x98>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 1818f04:	d0e7f017 	ldw	r3,-24640(gp)
 1818f08:	e0bffd17 	ldw	r2,-12(fp)
 1818f0c:	1880021e 	bne	r3,r2,1818f18 <plug_holes+0x64>
      lfree = mem;
 1818f10:	e0bfff17 	ldw	r2,-4(fp)
 1818f14:	d0a7f015 	stw	r2,-24640(gp)
    }
    mem->next = nmem->next;
 1818f18:	e0bffd17 	ldw	r2,-12(fp)
 1818f1c:	10c0000b 	ldhu	r3,0(r2)
 1818f20:	e0bfff17 	ldw	r2,-4(fp)
 1818f24:	10c0000d 	sth	r3,0(r2)
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 1818f28:	d0e7ee17 	ldw	r3,-24648(gp)
 1818f2c:	e0bffd17 	ldw	r2,-12(fp)
 1818f30:	1080000b 	ldhu	r2,0(r2)
 1818f34:	10bfffcc 	andi	r2,r2,65535
 1818f38:	1885883a 	add	r2,r3,r2
 1818f3c:	e0ffff17 	ldw	r3,-4(fp)
 1818f40:	d127ee17 	ldw	r4,-24648(gp)
 1818f44:	1907c83a 	sub	r3,r3,r4
 1818f48:	10c0008d 	sth	r3,2(r2)
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 1818f4c:	d0e7ee17 	ldw	r3,-24648(gp)
 1818f50:	e0bfff17 	ldw	r2,-4(fp)
 1818f54:	1080008b 	ldhu	r2,2(r2)
 1818f58:	10bfffcc 	andi	r2,r2,65535
 1818f5c:	1885883a 	add	r2,r3,r2
 1818f60:	e0bffe15 	stw	r2,-8(fp)
  if (pmem != mem && pmem->used == 0) {
 1818f64:	e0fffe17 	ldw	r3,-8(fp)
 1818f68:	e0bfff17 	ldw	r2,-4(fp)
 1818f6c:	18801626 	beq	r3,r2,1818fc8 <plug_holes+0x114>
 1818f70:	e0bffe17 	ldw	r2,-8(fp)
 1818f74:	10800103 	ldbu	r2,4(r2)
 1818f78:	10803fcc 	andi	r2,r2,255
 1818f7c:	1000121e 	bne	r2,zero,1818fc8 <plug_holes+0x114>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 1818f80:	d0e7f017 	ldw	r3,-24640(gp)
 1818f84:	e0bfff17 	ldw	r2,-4(fp)
 1818f88:	1880021e 	bne	r3,r2,1818f94 <plug_holes+0xe0>
      lfree = pmem;
 1818f8c:	e0bffe17 	ldw	r2,-8(fp)
 1818f90:	d0a7f015 	stw	r2,-24640(gp)
    }
    pmem->next = mem->next;
 1818f94:	e0bfff17 	ldw	r2,-4(fp)
 1818f98:	10c0000b 	ldhu	r3,0(r2)
 1818f9c:	e0bffe17 	ldw	r2,-8(fp)
 1818fa0:	10c0000d 	sth	r3,0(r2)
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 1818fa4:	d0e7ee17 	ldw	r3,-24648(gp)
 1818fa8:	e0bfff17 	ldw	r2,-4(fp)
 1818fac:	1080000b 	ldhu	r2,0(r2)
 1818fb0:	10bfffcc 	andi	r2,r2,65535
 1818fb4:	1885883a 	add	r2,r3,r2
 1818fb8:	e0fffe17 	ldw	r3,-8(fp)
 1818fbc:	d127ee17 	ldw	r4,-24648(gp)
 1818fc0:	1907c83a 	sub	r3,r3,r4
 1818fc4:	10c0008d 	sth	r3,2(r2)
  }
}
 1818fc8:	0001883a 	nop
 1818fcc:	e037883a 	mov	sp,fp
 1818fd0:	df000017 	ldw	fp,0(sp)
 1818fd4:	dec00104 	addi	sp,sp,4
 1818fd8:	f800283a 	ret

01818fdc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 1818fdc:	defffd04 	addi	sp,sp,-12
 1818fe0:	dfc00215 	stw	ra,8(sp)
 1818fe4:	df000115 	stw	fp,4(sp)
 1818fe8:	df000104 	addi	fp,sp,4

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 1818fec:	008061b4 	movhi	r2,390
 1818ff0:	10876c04 	addi	r2,r2,7600
 1818ff4:	10c000c4 	addi	r3,r2,3
 1818ff8:	00bfff04 	movi	r2,-4
 1818ffc:	1884703a 	and	r2,r3,r2
 1819000:	d0a7ee15 	stw	r2,-24648(gp)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 1819004:	d0a7ee17 	ldw	r2,-24648(gp)
 1819008:	e0bfff15 	stw	r2,-4(fp)
  mem->next = MEM_SIZE_ALIGNED;
 181900c:	e0bfff17 	ldw	r2,-4(fp)
 1819010:	00e00004 	movi	r3,-32768
 1819014:	10c0000d 	sth	r3,0(r2)
  mem->prev = 0;
 1819018:	e0bfff17 	ldw	r2,-4(fp)
 181901c:	1000008d 	sth	zero,2(r2)
  mem->used = 0;
 1819020:	e0bfff17 	ldw	r2,-4(fp)
 1819024:	10000105 	stb	zero,4(r2)
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 1819028:	d0e7ee17 	ldw	r3,-24648(gp)
 181902c:	00a00014 	movui	r2,32768
 1819030:	1885883a 	add	r2,r3,r2
 1819034:	d0a7ef15 	stw	r2,-24644(gp)
  ram_end->used = 1;
 1819038:	d0a7ef17 	ldw	r2,-24644(gp)
 181903c:	00c00044 	movi	r3,1
 1819040:	10c00105 	stb	r3,4(r2)
  ram_end->next = MEM_SIZE_ALIGNED;
 1819044:	d0a7ef17 	ldw	r2,-24644(gp)
 1819048:	00e00004 	movi	r3,-32768
 181904c:	10c0000d 	sth	r3,0(r2)
  ram_end->prev = MEM_SIZE_ALIGNED;
 1819050:	d0a7ef17 	ldw	r2,-24644(gp)
 1819054:	00e00004 	movi	r3,-32768
 1819058:	10c0008d 	sth	r3,2(r2)

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 181905c:	d0a7ee17 	ldw	r2,-24648(gp)
 1819060:	d0a7f015 	stw	r2,-24640(gp)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 1819064:	008061f4 	movhi	r2,391
 1819068:	10a77104 	addi	r2,r2,-25148
 181906c:	00e00004 	movi	r3,-32768
 1819070:	10c0540d 	sth	r3,336(r2)

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
 1819074:	d127f104 	addi	r4,gp,-24636
 1819078:	1814e500 	call	1814e50 <sys_mutex_new>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 181907c:	0001883a 	nop
 1819080:	e037883a 	mov	sp,fp
 1819084:	dfc00117 	ldw	ra,4(sp)
 1819088:	df000017 	ldw	fp,0(sp)
 181908c:	dec00204 	addi	sp,sp,8
 1819090:	f800283a 	ret

01819094 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 1819094:	defffc04 	addi	sp,sp,-16
 1819098:	dfc00315 	stw	ra,12(sp)
 181909c:	df000215 	stw	fp,8(sp)
 18190a0:	df000204 	addi	fp,sp,8
 18190a4:	e13fff15 	stw	r4,-4(fp)
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 18190a8:	e0bfff17 	ldw	r2,-4(fp)
 18190ac:	10003026 	beq	r2,zero,1819170 <mem_free+0xdc>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 18190b0:	d0a7ee17 	ldw	r2,-24648(gp)
 18190b4:	e0ffff17 	ldw	r3,-4(fp)
 18190b8:	18800336 	bltu	r3,r2,18190c8 <mem_free+0x34>
 18190bc:	d0a7ef17 	ldw	r2,-24644(gp)
 18190c0:	e0ffff17 	ldw	r3,-4(fp)
 18190c4:	18800a36 	bltu	r3,r2,18190f0 <mem_free+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 18190c8:	1810de40 	call	1810de4 <vTaskEnterCritical>
    MEM_STATS_INC(illegal);
 18190cc:	008061f4 	movhi	r2,391
 18190d0:	10a77104 	addi	r2,r2,-25148
 18190d4:	10805717 	ldw	r2,348(r2)
 18190d8:	10c00044 	addi	r3,r2,1
 18190dc:	008061f4 	movhi	r2,391
 18190e0:	10a77104 	addi	r2,r2,-25148
 18190e4:	10c05715 	stw	r3,348(r2)
    SYS_ARCH_UNPROTECT(lev);
 18190e8:	1810e380 	call	1810e38 <vTaskExitCritical>
    return;
 18190ec:	00002106 	br	1819174 <mem_free+0xe0>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 18190f0:	d127f104 	addi	r4,gp,-24636
 18190f4:	1814f100 	call	1814f10 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 18190f8:	e0bfff17 	ldw	r2,-4(fp)
 18190fc:	10bffe04 	addi	r2,r2,-8
 1819100:	e0bffe15 	stw	r2,-8(fp)
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 1819104:	e0bffe17 	ldw	r2,-8(fp)
 1819108:	10000105 	stb	zero,4(r2)

  if (mem < lfree) {
 181910c:	d0a7f017 	ldw	r2,-24640(gp)
 1819110:	e0fffe17 	ldw	r3,-8(fp)
 1819114:	1880022e 	bgeu	r3,r2,1819120 <mem_free+0x8c>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 1819118:	e0bffe17 	ldw	r2,-8(fp)
 181911c:	d0a7f015 	stw	r2,-24640(gp)
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 1819120:	008061f4 	movhi	r2,391
 1819124:	10a77104 	addi	r2,r2,-25148
 1819128:	1080548b 	ldhu	r2,338(r2)
 181912c:	e0fffe17 	ldw	r3,-8(fp)
 1819130:	d127ee17 	ldw	r4,-24648(gp)
 1819134:	1907c83a 	sub	r3,r3,r4
 1819138:	1809883a 	mov	r4,r3
 181913c:	e0fffe17 	ldw	r3,-8(fp)
 1819140:	18c0000b 	ldhu	r3,0(r3)
 1819144:	20c7c83a 	sub	r3,r4,r3
 1819148:	10c5883a 	add	r2,r2,r3
 181914c:	1007883a 	mov	r3,r2
 1819150:	008061f4 	movhi	r2,391
 1819154:	10a77104 	addi	r2,r2,-25148
 1819158:	10c0548d 	sth	r3,338(r2)

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 181915c:	e13ffe17 	ldw	r4,-8(fp)
 1819160:	1818eb40 	call	1818eb4 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 1819164:	d127f104 	addi	r4,gp,-24636
 1819168:	1814f5c0 	call	1814f5c <sys_mutex_unlock>
 181916c:	00000106 	br	1819174 <mem_free+0xe0>
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
 1819170:	0001883a 	nop
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 1819174:	e037883a 	mov	sp,fp
 1819178:	dfc00117 	ldw	ra,4(sp)
 181917c:	df000017 	ldw	fp,0(sp)
 1819180:	dec00204 	addi	sp,sp,8
 1819184:	f800283a 	ret

01819188 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 1819188:	defff804 	addi	sp,sp,-32
 181918c:	dfc00715 	stw	ra,28(sp)
 1819190:	df000615 	stw	fp,24(sp)
 1819194:	df000604 	addi	fp,sp,24
 1819198:	e13ffe15 	stw	r4,-8(fp)
 181919c:	2805883a 	mov	r2,r5
 18191a0:	e0bfff0d 	sth	r2,-4(fp)
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 18191a4:	e0bfff0b 	ldhu	r2,-4(fp)
 18191a8:	108000c4 	addi	r2,r2,3
 18191ac:	1007883a 	mov	r3,r2
 18191b0:	00bfff04 	movi	r2,-4
 18191b4:	1884703a 	and	r2,r3,r2
 18191b8:	e0bfff0d 	sth	r2,-4(fp)

  if(newsize < MIN_SIZE_ALIGNED) {
 18191bc:	e0bfff0b 	ldhu	r2,-4(fp)
 18191c0:	10800328 	cmpgeui	r2,r2,12
 18191c4:	1000021e 	bne	r2,zero,18191d0 <mem_trim+0x48>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 18191c8:	00800304 	movi	r2,12
 18191cc:	e0bfff0d 	sth	r2,-4(fp)
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 18191d0:	e0bfff0b 	ldhu	r2,-4(fp)
 18191d4:	10a00070 	cmpltui	r2,r2,32769
 18191d8:	1000021e 	bne	r2,zero,18191e4 <mem_trim+0x5c>
    return NULL;
 18191dc:	0005883a 	mov	r2,zero
 18191e0:	0000a206 	br	181946c <mem_trim+0x2e4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 18191e4:	d0a7ee17 	ldw	r2,-24648(gp)
 18191e8:	e0fffe17 	ldw	r3,-8(fp)
 18191ec:	18800336 	bltu	r3,r2,18191fc <mem_trim+0x74>
 18191f0:	d0a7ef17 	ldw	r2,-24644(gp)
 18191f4:	e0fffe17 	ldw	r3,-8(fp)
 18191f8:	18800b36 	bltu	r3,r2,1819228 <mem_trim+0xa0>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 18191fc:	1810de40 	call	1810de4 <vTaskEnterCritical>
    MEM_STATS_INC(illegal);
 1819200:	008061f4 	movhi	r2,391
 1819204:	10a77104 	addi	r2,r2,-25148
 1819208:	10805717 	ldw	r2,348(r2)
 181920c:	10c00044 	addi	r3,r2,1
 1819210:	008061f4 	movhi	r2,391
 1819214:	10a77104 	addi	r2,r2,-25148
 1819218:	10c05715 	stw	r3,348(r2)
    SYS_ARCH_UNPROTECT(lev);
 181921c:	1810e380 	call	1810e38 <vTaskExitCritical>
    return rmem;
 1819220:	e0bffe17 	ldw	r2,-8(fp)
 1819224:	00009106 	br	181946c <mem_trim+0x2e4>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 1819228:	e0bffe17 	ldw	r2,-8(fp)
 181922c:	10bffe04 	addi	r2,r2,-8
 1819230:	e0bffa15 	stw	r2,-24(fp)
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 1819234:	e0bffa17 	ldw	r2,-24(fp)
 1819238:	d0e7ee17 	ldw	r3,-24648(gp)
 181923c:	10c5c83a 	sub	r2,r2,r3
 1819240:	e0bffb0d 	sth	r2,-20(fp)

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 1819244:	e0bffa17 	ldw	r2,-24(fp)
 1819248:	10c0000b 	ldhu	r3,0(r2)
 181924c:	e0bffb0b 	ldhu	r2,-20(fp)
 1819250:	1885c83a 	sub	r2,r3,r2
 1819254:	10bffe04 	addi	r2,r2,-8
 1819258:	e0bffb8d 	sth	r2,-18(fp)
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 181925c:	e0bfff0b 	ldhu	r2,-4(fp)
 1819260:	e0fffb8b 	ldhu	r3,-18(fp)
 1819264:	1880022e 	bgeu	r3,r2,1819270 <mem_trim+0xe8>
    /* not supported */
    return NULL;
 1819268:	0005883a 	mov	r2,zero
 181926c:	00007f06 	br	181946c <mem_trim+0x2e4>
  }
  if (newsize == size) {
 1819270:	e0ffff0b 	ldhu	r3,-4(fp)
 1819274:	e0bffb8b 	ldhu	r2,-18(fp)
 1819278:	1880021e 	bne	r3,r2,1819284 <mem_trim+0xfc>
    /* No change in size, simply return */
    return rmem;
 181927c:	e0bffe17 	ldw	r2,-8(fp)
 1819280:	00007a06 	br	181946c <mem_trim+0x2e4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 1819284:	d127f104 	addi	r4,gp,-24636
 1819288:	1814f100 	call	1814f10 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 181928c:	d0e7ee17 	ldw	r3,-24648(gp)
 1819290:	e0bffa17 	ldw	r2,-24(fp)
 1819294:	1080000b 	ldhu	r2,0(r2)
 1819298:	10bfffcc 	andi	r2,r2,65535
 181929c:	1885883a 	add	r2,r3,r2
 18192a0:	e0bffc15 	stw	r2,-16(fp)
  if(mem2->used == 0) {
 18192a4:	e0bffc17 	ldw	r2,-16(fp)
 18192a8:	10800103 	ldbu	r2,4(r2)
 18192ac:	10803fcc 	andi	r2,r2,255
 18192b0:	1000361e 	bne	r2,zero,181938c <mem_trim+0x204>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 18192b4:	e0bffc17 	ldw	r2,-16(fp)
 18192b8:	1080000b 	ldhu	r2,0(r2)
 18192bc:	e0bffd0d 	sth	r2,-12(fp)
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 18192c0:	e0fffb0b 	ldhu	r3,-20(fp)
 18192c4:	e0bfff0b 	ldhu	r2,-4(fp)
 18192c8:	1885883a 	add	r2,r3,r2
 18192cc:	10800204 	addi	r2,r2,8
 18192d0:	e0bffd8d 	sth	r2,-10(fp)
    if (lfree == mem2) {
 18192d4:	d0e7f017 	ldw	r3,-24640(gp)
 18192d8:	e0bffc17 	ldw	r2,-16(fp)
 18192dc:	1880041e 	bne	r3,r2,18192f0 <mem_trim+0x168>
      lfree = (struct mem *)(void *)&ram[ptr2];
 18192e0:	d0e7ee17 	ldw	r3,-24648(gp)
 18192e4:	e0bffd8b 	ldhu	r2,-10(fp)
 18192e8:	1885883a 	add	r2,r3,r2
 18192ec:	d0a7f015 	stw	r2,-24640(gp)
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 18192f0:	d0e7ee17 	ldw	r3,-24648(gp)
 18192f4:	e0bffd8b 	ldhu	r2,-10(fp)
 18192f8:	1885883a 	add	r2,r3,r2
 18192fc:	e0bffc15 	stw	r2,-16(fp)
    mem2->used = 0;
 1819300:	e0bffc17 	ldw	r2,-16(fp)
 1819304:	10000105 	stb	zero,4(r2)
    /* restore the next pointer */
    mem2->next = next;
 1819308:	e0bffc17 	ldw	r2,-16(fp)
 181930c:	e0fffd0b 	ldhu	r3,-12(fp)
 1819310:	10c0000d 	sth	r3,0(r2)
    /* link it back to mem */
    mem2->prev = ptr;
 1819314:	e0bffc17 	ldw	r2,-16(fp)
 1819318:	e0fffb0b 	ldhu	r3,-20(fp)
 181931c:	10c0008d 	sth	r3,2(r2)
    /* link mem to it */
    mem->next = ptr2;
 1819320:	e0bffa17 	ldw	r2,-24(fp)
 1819324:	e0fffd8b 	ldhu	r3,-10(fp)
 1819328:	10c0000d 	sth	r3,0(r2)
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 181932c:	e0bffc17 	ldw	r2,-16(fp)
 1819330:	1080000b 	ldhu	r2,0(r2)
 1819334:	10ffffcc 	andi	r3,r2,65535
 1819338:	00a00014 	movui	r2,32768
 181933c:	18800726 	beq	r3,r2,181935c <mem_trim+0x1d4>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 1819340:	d0e7ee17 	ldw	r3,-24648(gp)
 1819344:	e0bffc17 	ldw	r2,-16(fp)
 1819348:	1080000b 	ldhu	r2,0(r2)
 181934c:	10bfffcc 	andi	r2,r2,65535
 1819350:	1885883a 	add	r2,r3,r2
 1819354:	e0fffd8b 	ldhu	r3,-10(fp)
 1819358:	10c0008d 	sth	r3,2(r2)
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 181935c:	008061f4 	movhi	r2,391
 1819360:	10a77104 	addi	r2,r2,-25148
 1819364:	1080548b 	ldhu	r2,338(r2)
 1819368:	e13fff0b 	ldhu	r4,-4(fp)
 181936c:	e0fffb8b 	ldhu	r3,-18(fp)
 1819370:	20c7c83a 	sub	r3,r4,r3
 1819374:	10c5883a 	add	r2,r2,r3
 1819378:	1007883a 	mov	r3,r2
 181937c:	008061f4 	movhi	r2,391
 1819380:	10a77104 	addi	r2,r2,-25148
 1819384:	10c0548d 	sth	r3,338(r2)
 1819388:	00003506 	br	1819460 <mem_trim+0x2d8>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 181938c:	e0bfff0b 	ldhu	r2,-4(fp)
 1819390:	10800504 	addi	r2,r2,20
 1819394:	e0fffb8b 	ldhu	r3,-18(fp)
 1819398:	18803136 	bltu	r3,r2,1819460 <mem_trim+0x2d8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 181939c:	e0fffb0b 	ldhu	r3,-20(fp)
 18193a0:	e0bfff0b 	ldhu	r2,-4(fp)
 18193a4:	1885883a 	add	r2,r3,r2
 18193a8:	10800204 	addi	r2,r2,8
 18193ac:	e0bffd8d 	sth	r2,-10(fp)
    mem2 = (struct mem *)(void *)&ram[ptr2];
 18193b0:	d0e7ee17 	ldw	r3,-24648(gp)
 18193b4:	e0bffd8b 	ldhu	r2,-10(fp)
 18193b8:	1885883a 	add	r2,r3,r2
 18193bc:	e0bffc15 	stw	r2,-16(fp)
    if (mem2 < lfree) {
 18193c0:	d0a7f017 	ldw	r2,-24640(gp)
 18193c4:	e0fffc17 	ldw	r3,-16(fp)
 18193c8:	1880022e 	bgeu	r3,r2,18193d4 <mem_trim+0x24c>
      lfree = mem2;
 18193cc:	e0bffc17 	ldw	r2,-16(fp)
 18193d0:	d0a7f015 	stw	r2,-24640(gp)
    }
    mem2->used = 0;
 18193d4:	e0bffc17 	ldw	r2,-16(fp)
 18193d8:	10000105 	stb	zero,4(r2)
    mem2->next = mem->next;
 18193dc:	e0bffa17 	ldw	r2,-24(fp)
 18193e0:	10c0000b 	ldhu	r3,0(r2)
 18193e4:	e0bffc17 	ldw	r2,-16(fp)
 18193e8:	10c0000d 	sth	r3,0(r2)
    mem2->prev = ptr;
 18193ec:	e0bffc17 	ldw	r2,-16(fp)
 18193f0:	e0fffb0b 	ldhu	r3,-20(fp)
 18193f4:	10c0008d 	sth	r3,2(r2)
    mem->next = ptr2;
 18193f8:	e0bffa17 	ldw	r2,-24(fp)
 18193fc:	e0fffd8b 	ldhu	r3,-10(fp)
 1819400:	10c0000d 	sth	r3,0(r2)
    if (mem2->next != MEM_SIZE_ALIGNED) {
 1819404:	e0bffc17 	ldw	r2,-16(fp)
 1819408:	1080000b 	ldhu	r2,0(r2)
 181940c:	10ffffcc 	andi	r3,r2,65535
 1819410:	00a00014 	movui	r2,32768
 1819414:	18800726 	beq	r3,r2,1819434 <mem_trim+0x2ac>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 1819418:	d0e7ee17 	ldw	r3,-24648(gp)
 181941c:	e0bffc17 	ldw	r2,-16(fp)
 1819420:	1080000b 	ldhu	r2,0(r2)
 1819424:	10bfffcc 	andi	r2,r2,65535
 1819428:	1885883a 	add	r2,r3,r2
 181942c:	e0fffd8b 	ldhu	r3,-10(fp)
 1819430:	10c0008d 	sth	r3,2(r2)
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 1819434:	008061f4 	movhi	r2,391
 1819438:	10a77104 	addi	r2,r2,-25148
 181943c:	1080548b 	ldhu	r2,338(r2)
 1819440:	e13fff0b 	ldhu	r4,-4(fp)
 1819444:	e0fffb8b 	ldhu	r3,-18(fp)
 1819448:	20c7c83a 	sub	r3,r4,r3
 181944c:	10c5883a 	add	r2,r2,r3
 1819450:	1007883a 	mov	r3,r2
 1819454:	008061f4 	movhi	r2,391
 1819458:	10a77104 	addi	r2,r2,-25148
 181945c:	10c0548d 	sth	r3,338(r2)
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 1819460:	d127f104 	addi	r4,gp,-24636
 1819464:	1814f5c0 	call	1814f5c <sys_mutex_unlock>
  return rmem;
 1819468:	e0bffe17 	ldw	r2,-8(fp)
}
 181946c:	e037883a 	mov	sp,fp
 1819470:	dfc00117 	ldw	ra,4(sp)
 1819474:	df000017 	ldw	fp,0(sp)
 1819478:	dec00204 	addi	sp,sp,8
 181947c:	f800283a 	ret

01819480 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 1819480:	defff804 	addi	sp,sp,-32
 1819484:	dfc00715 	stw	ra,28(sp)
 1819488:	df000615 	stw	fp,24(sp)
 181948c:	df000604 	addi	fp,sp,24
 1819490:	2005883a 	mov	r2,r4
 1819494:	e0bfff0d 	sth	r2,-4(fp)
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 1819498:	e0bfff0b 	ldhu	r2,-4(fp)
 181949c:	1000021e 	bne	r2,zero,18194a8 <mem_malloc+0x28>
    return NULL;
 18194a0:	0005883a 	mov	r2,zero
 18194a4:	0000bd06 	br	181979c <mem_malloc+0x31c>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 18194a8:	e0bfff0b 	ldhu	r2,-4(fp)
 18194ac:	108000c4 	addi	r2,r2,3
 18194b0:	1007883a 	mov	r3,r2
 18194b4:	00bfff04 	movi	r2,-4
 18194b8:	1884703a 	and	r2,r3,r2
 18194bc:	e0bfff0d 	sth	r2,-4(fp)

  if(size < MIN_SIZE_ALIGNED) {
 18194c0:	e0bfff0b 	ldhu	r2,-4(fp)
 18194c4:	10800328 	cmpgeui	r2,r2,12
 18194c8:	1000021e 	bne	r2,zero,18194d4 <mem_malloc+0x54>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 18194cc:	00800304 	movi	r2,12
 18194d0:	e0bfff0d 	sth	r2,-4(fp)
  }

  if (size > MEM_SIZE_ALIGNED) {
 18194d4:	e0bfff0b 	ldhu	r2,-4(fp)
 18194d8:	10a00070 	cmpltui	r2,r2,32769
 18194dc:	1000021e 	bne	r2,zero,18194e8 <mem_malloc+0x68>
    return NULL;
 18194e0:	0005883a 	mov	r2,zero
 18194e4:	0000ad06 	br	181979c <mem_malloc+0x31c>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 18194e8:	d127f104 	addi	r4,gp,-24636
 18194ec:	1814f100 	call	1814f10 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 18194f0:	d0a7f017 	ldw	r2,-24640(gp)
 18194f4:	1007883a 	mov	r3,r2
 18194f8:	d0a7ee17 	ldw	r2,-24648(gp)
 18194fc:	1885c83a 	sub	r2,r3,r2
 1819500:	e0bffa0d 	sth	r2,-24(fp)
 1819504:	00009606 	br	1819760 <mem_malloc+0x2e0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 1819508:	d0e7ee17 	ldw	r3,-24648(gp)
 181950c:	e0bffa0b 	ldhu	r2,-24(fp)
 1819510:	1885883a 	add	r2,r3,r2
 1819514:	e0bffc15 	stw	r2,-16(fp)
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 1819518:	e0bffc17 	ldw	r2,-16(fp)
 181951c:	10800103 	ldbu	r2,4(r2)
 1819520:	10803fcc 	andi	r2,r2,255
 1819524:	1000891e 	bne	r2,zero,181974c <mem_malloc+0x2cc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 1819528:	e0bffc17 	ldw	r2,-16(fp)
 181952c:	1080000b 	ldhu	r2,0(r2)
 1819530:	10ffffcc 	andi	r3,r2,65535
 1819534:	e0bffa0b 	ldhu	r2,-24(fp)
 1819538:	1885c83a 	sub	r2,r3,r2
 181953c:	10fffe04 	addi	r3,r2,-8
 1819540:	e0bfff0b 	ldhu	r2,-4(fp)
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 1819544:	18808136 	bltu	r3,r2,181974c <mem_malloc+0x2cc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 1819548:	e0bffc17 	ldw	r2,-16(fp)
 181954c:	1080000b 	ldhu	r2,0(r2)
 1819550:	10ffffcc 	andi	r3,r2,65535
 1819554:	e0bffa0b 	ldhu	r2,-24(fp)
 1819558:	1885c83a 	sub	r2,r3,r2
 181955c:	10fffe04 	addi	r3,r2,-8
 1819560:	e0bfff0b 	ldhu	r2,-4(fp)
 1819564:	10800504 	addi	r2,r2,20
 1819568:	18803e36 	bltu	r3,r2,1819664 <mem_malloc+0x1e4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 181956c:	e0fffa0b 	ldhu	r3,-24(fp)
 1819570:	e0bfff0b 	ldhu	r2,-4(fp)
 1819574:	1885883a 	add	r2,r3,r2
 1819578:	10800204 	addi	r2,r2,8
 181957c:	e0bffd0d 	sth	r2,-12(fp)
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 1819580:	d0e7ee17 	ldw	r3,-24648(gp)
 1819584:	e0bffd0b 	ldhu	r2,-12(fp)
 1819588:	1885883a 	add	r2,r3,r2
 181958c:	e0bffe15 	stw	r2,-8(fp)
          mem2->used = 0;
 1819590:	e0bffe17 	ldw	r2,-8(fp)
 1819594:	10000105 	stb	zero,4(r2)
          mem2->next = mem->next;
 1819598:	e0bffc17 	ldw	r2,-16(fp)
 181959c:	10c0000b 	ldhu	r3,0(r2)
 18195a0:	e0bffe17 	ldw	r2,-8(fp)
 18195a4:	10c0000d 	sth	r3,0(r2)
          mem2->prev = ptr;
 18195a8:	e0bffe17 	ldw	r2,-8(fp)
 18195ac:	e0fffa0b 	ldhu	r3,-24(fp)
 18195b0:	10c0008d 	sth	r3,2(r2)
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 18195b4:	e0bffc17 	ldw	r2,-16(fp)
 18195b8:	e0fffd0b 	ldhu	r3,-12(fp)
 18195bc:	10c0000d 	sth	r3,0(r2)
          mem->used = 1;
 18195c0:	e0bffc17 	ldw	r2,-16(fp)
 18195c4:	00c00044 	movi	r3,1
 18195c8:	10c00105 	stb	r3,4(r2)

          if (mem2->next != MEM_SIZE_ALIGNED) {
 18195cc:	e0bffe17 	ldw	r2,-8(fp)
 18195d0:	1080000b 	ldhu	r2,0(r2)
 18195d4:	10ffffcc 	andi	r3,r2,65535
 18195d8:	00a00014 	movui	r2,32768
 18195dc:	18800726 	beq	r3,r2,18195fc <mem_malloc+0x17c>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 18195e0:	d0e7ee17 	ldw	r3,-24648(gp)
 18195e4:	e0bffe17 	ldw	r2,-8(fp)
 18195e8:	1080000b 	ldhu	r2,0(r2)
 18195ec:	10bfffcc 	andi	r2,r2,65535
 18195f0:	1885883a 	add	r2,r3,r2
 18195f4:	e0fffd0b 	ldhu	r3,-12(fp)
 18195f8:	10c0008d 	sth	r3,2(r2)
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 18195fc:	008061f4 	movhi	r2,391
 1819600:	10a77104 	addi	r2,r2,-25148
 1819604:	10c0548b 	ldhu	r3,338(r2)
 1819608:	e0bfff0b 	ldhu	r2,-4(fp)
 181960c:	1885883a 	add	r2,r3,r2
 1819610:	10800204 	addi	r2,r2,8
 1819614:	1007883a 	mov	r3,r2
 1819618:	008061f4 	movhi	r2,391
 181961c:	10a77104 	addi	r2,r2,-25148
 1819620:	10c0548d 	sth	r3,338(r2)
 1819624:	008061f4 	movhi	r2,391
 1819628:	10a77104 	addi	r2,r2,-25148
 181962c:	10c0550b 	ldhu	r3,340(r2)
 1819630:	008061f4 	movhi	r2,391
 1819634:	10a77104 	addi	r2,r2,-25148
 1819638:	1080548b 	ldhu	r2,338(r2)
 181963c:	18ffffcc 	andi	r3,r3,65535
 1819640:	10bfffcc 	andi	r2,r2,65535
 1819644:	1880272e 	bgeu	r3,r2,18196e4 <mem_malloc+0x264>
 1819648:	008061f4 	movhi	r2,391
 181964c:	10a77104 	addi	r2,r2,-25148
 1819650:	10c0548b 	ldhu	r3,338(r2)
 1819654:	008061f4 	movhi	r2,391
 1819658:	10a77104 	addi	r2,r2,-25148
 181965c:	10c0550d 	sth	r3,340(r2)
 1819660:	00002006 	br	18196e4 <mem_malloc+0x264>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 1819664:	e0bffc17 	ldw	r2,-16(fp)
 1819668:	00c00044 	movi	r3,1
 181966c:	10c00105 	stb	r3,4(r2)
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 1819670:	008061f4 	movhi	r2,391
 1819674:	10a77104 	addi	r2,r2,-25148
 1819678:	1080548b 	ldhu	r2,338(r2)
 181967c:	e0fffc17 	ldw	r3,-16(fp)
 1819680:	18c0000b 	ldhu	r3,0(r3)
 1819684:	e13ffc17 	ldw	r4,-16(fp)
 1819688:	d167ee17 	ldw	r5,-24648(gp)
 181968c:	2149c83a 	sub	r4,r4,r5
 1819690:	1907c83a 	sub	r3,r3,r4
 1819694:	10c5883a 	add	r2,r2,r3
 1819698:	1007883a 	mov	r3,r2
 181969c:	008061f4 	movhi	r2,391
 18196a0:	10a77104 	addi	r2,r2,-25148
 18196a4:	10c0548d 	sth	r3,338(r2)
 18196a8:	008061f4 	movhi	r2,391
 18196ac:	10a77104 	addi	r2,r2,-25148
 18196b0:	10c0550b 	ldhu	r3,340(r2)
 18196b4:	008061f4 	movhi	r2,391
 18196b8:	10a77104 	addi	r2,r2,-25148
 18196bc:	1080548b 	ldhu	r2,338(r2)
 18196c0:	18ffffcc 	andi	r3,r3,65535
 18196c4:	10bfffcc 	andi	r2,r2,65535
 18196c8:	1880062e 	bgeu	r3,r2,18196e4 <mem_malloc+0x264>
 18196cc:	008061f4 	movhi	r2,391
 18196d0:	10a77104 	addi	r2,r2,-25148
 18196d4:	10c0548b 	ldhu	r3,338(r2)
 18196d8:	008061f4 	movhi	r2,391
 18196dc:	10a77104 	addi	r2,r2,-25148
 18196e0:	10c0550d 	sth	r3,340(r2)
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 18196e4:	d0a7f017 	ldw	r2,-24640(gp)
 18196e8:	e0fffc17 	ldw	r3,-16(fp)
 18196ec:	1880121e 	bne	r3,r2,1819738 <mem_malloc+0x2b8>
          struct mem *cur = lfree;
 18196f0:	d0a7f017 	ldw	r2,-24640(gp)
 18196f4:	e0bffb15 	stw	r2,-20(fp)
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 18196f8:	00000606 	br	1819714 <mem_malloc+0x294>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 18196fc:	d0e7ee17 	ldw	r3,-24648(gp)
 1819700:	e0bffb17 	ldw	r2,-20(fp)
 1819704:	1080000b 	ldhu	r2,0(r2)
 1819708:	10bfffcc 	andi	r2,r2,65535
 181970c:	1885883a 	add	r2,r3,r2
 1819710:	e0bffb15 	stw	r2,-20(fp)
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 1819714:	e0bffb17 	ldw	r2,-20(fp)
 1819718:	10800103 	ldbu	r2,4(r2)
 181971c:	10803fcc 	andi	r2,r2,255
 1819720:	10000326 	beq	r2,zero,1819730 <mem_malloc+0x2b0>
 1819724:	d0a7ef17 	ldw	r2,-24644(gp)
 1819728:	e0fffb17 	ldw	r3,-20(fp)
 181972c:	18bff31e 	bne	r3,r2,18196fc <__alt_mem_mem_0+0xff7f96fc>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
          }
          lfree = cur;
 1819730:	e0bffb17 	ldw	r2,-20(fp)
 1819734:	d0a7f015 	stw	r2,-24640(gp)
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 1819738:	d127f104 	addi	r4,gp,-24636
 181973c:	1814f5c0 	call	1814f5c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 1819740:	e0bffc17 	ldw	r2,-16(fp)
 1819744:	10800204 	addi	r2,r2,8
 1819748:	00001406 	br	181979c <mem_malloc+0x31c>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 181974c:	d0e7ee17 	ldw	r3,-24648(gp)
 1819750:	e0bffa0b 	ldhu	r2,-24(fp)
 1819754:	1885883a 	add	r2,r3,r2
 1819758:	1080000b 	ldhu	r2,0(r2)
 181975c:	e0bffa0d 	sth	r2,-24(fp)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 1819760:	e0fffa0b 	ldhu	r3,-24(fp)
 1819764:	e0bfff0b 	ldhu	r2,-4(fp)
 1819768:	01200014 	movui	r4,32768
 181976c:	2085c83a 	sub	r2,r4,r2
 1819770:	18bf6516 	blt	r3,r2,1819508 <__alt_mem_mem_0+0xff7f9508>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while(local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 1819774:	008061f4 	movhi	r2,391
 1819778:	10a77104 	addi	r2,r2,-25148
 181977c:	10805617 	ldw	r2,344(r2)
 1819780:	10c00044 	addi	r3,r2,1
 1819784:	008061f4 	movhi	r2,391
 1819788:	10a77104 	addi	r2,r2,-25148
 181978c:	10c05615 	stw	r3,344(r2)
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 1819790:	d127f104 	addi	r4,gp,-24636
 1819794:	1814f5c0 	call	1814f5c <sys_mutex_unlock>
  return NULL;
 1819798:	0005883a 	mov	r2,zero
}
 181979c:	e037883a 	mov	sp,fp
 18197a0:	dfc00117 	ldw	ra,4(sp)
 18197a4:	df000017 	ldw	fp,0(sp)
 18197a8:	dec00204 	addi	sp,sp,8
 18197ac:	f800283a 	ret

018197b0 <mem_calloc>:
 * @param count number of objects to allocate
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *mem_calloc(mem_size_t count, mem_size_t size)
{
 18197b0:	defffb04 	addi	sp,sp,-20
 18197b4:	dfc00415 	stw	ra,16(sp)
 18197b8:	df000315 	stw	fp,12(sp)
 18197bc:	df000304 	addi	fp,sp,12
 18197c0:	2007883a 	mov	r3,r4
 18197c4:	2805883a 	mov	r2,r5
 18197c8:	e0fffe0d 	sth	r3,-8(fp)
 18197cc:	e0bfff0d 	sth	r2,-4(fp)
  void *p;

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc(count * size);
 18197d0:	e0fffe0b 	ldhu	r3,-8(fp)
 18197d4:	e0bfff0b 	ldhu	r2,-4(fp)
 18197d8:	1885383a 	mul	r2,r3,r2
 18197dc:	10bfffcc 	andi	r2,r2,65535
 18197e0:	1009883a 	mov	r4,r2
 18197e4:	18194800 	call	1819480 <mem_malloc>
 18197e8:	e0bffd15 	stw	r2,-12(fp)
  if (p) {
 18197ec:	e0bffd17 	ldw	r2,-12(fp)
 18197f0:	10000726 	beq	r2,zero,1819810 <mem_calloc+0x60>
    /* zero the memory */
    memset(p, 0, count * size);
 18197f4:	e0fffe0b 	ldhu	r3,-8(fp)
 18197f8:	e0bfff0b 	ldhu	r2,-4(fp)
 18197fc:	1885383a 	mul	r2,r3,r2
 1819800:	100d883a 	mov	r6,r2
 1819804:	000b883a 	mov	r5,zero
 1819808:	e13ffd17 	ldw	r4,-12(fp)
 181980c:	18061940 	call	1806194 <memset>
  }
  return p;
 1819810:	e0bffd17 	ldw	r2,-12(fp)
}
 1819814:	e037883a 	mov	sp,fp
 1819818:	dfc00117 	ldw	ra,4(sp)
 181981c:	df000017 	ldw	fp,0(sp)
 1819820:	dec00204 	addi	sp,sp,8
 1819824:	f800283a 	ret

01819828 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 1819828:	deffff04 	addi	sp,sp,-4
 181982c:	df000015 	stw	fp,0(sp)
 1819830:	d839883a 	mov	fp,sp
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 1819834:	0001883a 	nop
 1819838:	e037883a 	mov	sp,fp
 181983c:	df000017 	ldw	fp,0(sp)
 1819840:	dec00104 	addi	sp,sp,4
 1819844:	f800283a 	ret

01819848 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
 1819848:	defffa04 	addi	sp,sp,-24
 181984c:	dfc00515 	stw	ra,20(sp)
 1819850:	df000415 	stw	fp,16(sp)
 1819854:	df000404 	addi	fp,sp,16
 1819858:	e13ffc15 	stw	r4,-16(fp)
 181985c:	e17ffd15 	stw	r5,-12(fp)
 1819860:	e1bffe15 	stw	r6,-8(fp)
 1819864:	e1ffff15 	stw	r7,-4(fp)

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
 1819868:	e0bffc17 	ldw	r2,-16(fp)
 181986c:	10000115 	stw	zero,4(r2)
  ip_addr_set_zero(&netif->netmask);
 1819870:	e0bffc17 	ldw	r2,-16(fp)
 1819874:	10000215 	stw	zero,8(r2)
  ip_addr_set_zero(&netif->gw);
 1819878:	e0bffc17 	ldw	r2,-16(fp)
 181987c:	10000315 	stw	zero,12(r2)
  netif->flags = 0;
 1819880:	e0bffc17 	ldw	r2,-16(fp)
 1819884:	10000e45 	stb	zero,57(r2)
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
 1819888:	e0bffc17 	ldw	r2,-16(fp)
 181988c:	10000a15 	stw	zero,40(r2)
#if LWIP_AUTOIP
  /* netif not under AutoIP control by default */
  netif->autoip = NULL;
#endif /* LWIP_AUTOIP */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 1819890:	e0bffc17 	ldw	r2,-16(fp)
 1819894:	10000715 	stw	zero,28(r2)
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 1819898:	e0bffc17 	ldw	r2,-16(fp)
 181989c:	10000815 	stw	zero,32(r2)
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 18198a0:	e0bffc17 	ldw	r2,-16(fp)
 18198a4:	e0c00217 	ldw	r3,8(fp)
 18198a8:	10c00915 	stw	r3,36(r2)
  netif->num = netif_num++;
 18198ac:	d0a7f203 	ldbu	r2,-24632(gp)
 18198b0:	10c00044 	addi	r3,r2,1
 18198b4:	d0e7f205 	stb	r3,-24632(gp)
 18198b8:	e0fffc17 	ldw	r3,-16(fp)
 18198bc:	18800f05 	stb	r2,60(r3)
  netif->input = input;
 18198c0:	e0bffc17 	ldw	r2,-16(fp)
 18198c4:	e0c00417 	ldw	r3,16(fp)
 18198c8:	10c00415 	stw	r3,16(r2)
  NETIF_SET_HWADDRHINT(netif, NULL);
 18198cc:	e0bffc17 	ldw	r2,-16(fp)
 18198d0:	10001015 	stw	zero,64(r2)
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
 18198d4:	e1ffff17 	ldw	r7,-4(fp)
 18198d8:	e1bffe17 	ldw	r6,-8(fp)
 18198dc:	e17ffd17 	ldw	r5,-12(fp)
 18198e0:	e13ffc17 	ldw	r4,-16(fp)
 18198e4:	18199380 	call	1819938 <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 18198e8:	e0800317 	ldw	r2,12(fp)
 18198ec:	e13ffc17 	ldw	r4,-16(fp)
 18198f0:	103ee83a 	callr	r2
 18198f4:	10803fcc 	andi	r2,r2,255
 18198f8:	1080201c 	xori	r2,r2,128
 18198fc:	10bfe004 	addi	r2,r2,-128
 1819900:	10000226 	beq	r2,zero,181990c <netif_add+0xc4>
    return NULL;
 1819904:	0005883a 	mov	r2,zero
 1819908:	00000606 	br	1819924 <netif_add+0xdc>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 181990c:	d0e7f317 	ldw	r3,-24628(gp)
 1819910:	e0bffc17 	ldw	r2,-16(fp)
 1819914:	10c00015 	stw	r3,0(r2)
  netif_list = netif;
 1819918:	e0bffc17 	ldw	r2,-16(fp)
 181991c:	d0a7f315 	stw	r2,-24628(gp)
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 1819920:	e0bffc17 	ldw	r2,-16(fp)
}
 1819924:	e037883a 	mov	sp,fp
 1819928:	dfc00117 	ldw	ra,4(sp)
 181992c:	df000017 	ldw	fp,0(sp)
 1819930:	dec00204 	addi	sp,sp,8
 1819934:	f800283a 	ret

01819938 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
 1819938:	defffa04 	addi	sp,sp,-24
 181993c:	dfc00515 	stw	ra,20(sp)
 1819940:	df000415 	stw	fp,16(sp)
 1819944:	df000404 	addi	fp,sp,16
 1819948:	e13ffc15 	stw	r4,-16(fp)
 181994c:	e17ffd15 	stw	r5,-12(fp)
 1819950:	e1bffe15 	stw	r6,-8(fp)
 1819954:	e1ffff15 	stw	r7,-4(fp)
  netif_set_ipaddr(netif, ipaddr);
 1819958:	e17ffd17 	ldw	r5,-12(fp)
 181995c:	e13ffc17 	ldw	r4,-16(fp)
 1819960:	1819b4c0 	call	1819b4c <netif_set_ipaddr>
  netif_set_netmask(netif, netmask);
 1819964:	e17ffe17 	ldw	r5,-8(fp)
 1819968:	e13ffc17 	ldw	r4,-16(fp)
 181996c:	1819cbc0 	call	1819cbc <netif_set_netmask>
  netif_set_gw(netif, gw);
 1819970:	e17fff17 	ldw	r5,-4(fp)
 1819974:	e13ffc17 	ldw	r4,-16(fp)
 1819978:	1819c740 	call	1819c74 <netif_set_gw>
}
 181997c:	0001883a 	nop
 1819980:	e037883a 	mov	sp,fp
 1819984:	dfc00117 	ldw	ra,4(sp)
 1819988:	df000017 	ldw	fp,0(sp)
 181998c:	dec00204 	addi	sp,sp,8
 1819990:	f800283a 	ret

01819994 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
 1819994:	defffc04 	addi	sp,sp,-16
 1819998:	dfc00315 	stw	ra,12(sp)
 181999c:	df000215 	stw	fp,8(sp)
 18199a0:	df000204 	addi	fp,sp,8
 18199a4:	e13fff15 	stw	r4,-4(fp)
  if (netif == NULL) {
 18199a8:	e0bfff17 	ldw	r2,-4(fp)
 18199ac:	10002726 	beq	r2,zero,1819a4c <netif_remove+0xb8>
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_stop(netif);
  }
#endif /* LWIP_IGMP */
  if (netif_is_up(netif)) {
 18199b0:	e0bfff17 	ldw	r2,-4(fp)
 18199b4:	10800e43 	ldbu	r2,57(r2)
 18199b8:	10803fcc 	andi	r2,r2,255
 18199bc:	1080004c 	andi	r2,r2,1
 18199c0:	10000226 	beq	r2,zero,18199cc <netif_remove+0x38>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
 18199c4:	e13fff17 	ldw	r4,-4(fp)
 18199c8:	1819de00 	call	1819de0 <netif_set_down>
  }

  snmp_delete_ipaddridx_tree(netif);

  /*  is it the first netif? */
  if (netif_list == netif) {
 18199cc:	d0e7f317 	ldw	r3,-24628(gp)
 18199d0:	e0bfff17 	ldw	r2,-4(fp)
 18199d4:	1880041e 	bne	r3,r2,18199e8 <netif_remove+0x54>
    netif_list = netif->next;
 18199d8:	e0bfff17 	ldw	r2,-4(fp)
 18199dc:	10800017 	ldw	r2,0(r2)
 18199e0:	d0a7f315 	stw	r2,-24628(gp)
 18199e4:	00001306 	br	1819a34 <netif_remove+0xa0>
  } else {
    /*  look for netif further down the list */
    struct netif * tmpNetif;
    for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
 18199e8:	d0a7f317 	ldw	r2,-24628(gp)
 18199ec:	e0bffe15 	stw	r2,-8(fp)
 18199f0:	00000c06 	br	1819a24 <netif_remove+0x90>
      if (tmpNetif->next == netif) {
 18199f4:	e0bffe17 	ldw	r2,-8(fp)
 18199f8:	10c00017 	ldw	r3,0(r2)
 18199fc:	e0bfff17 	ldw	r2,-4(fp)
 1819a00:	1880051e 	bne	r3,r2,1819a18 <netif_remove+0x84>
        tmpNetif->next = netif->next;
 1819a04:	e0bfff17 	ldw	r2,-4(fp)
 1819a08:	10c00017 	ldw	r3,0(r2)
 1819a0c:	e0bffe17 	ldw	r2,-8(fp)
 1819a10:	10c00015 	stw	r3,0(r2)
        break;
 1819a14:	00000506 	br	1819a2c <netif_remove+0x98>
  if (netif_list == netif) {
    netif_list = netif->next;
  } else {
    /*  look for netif further down the list */
    struct netif * tmpNetif;
    for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
 1819a18:	e0bffe17 	ldw	r2,-8(fp)
 1819a1c:	10800017 	ldw	r2,0(r2)
 1819a20:	e0bffe15 	stw	r2,-8(fp)
 1819a24:	e0bffe17 	ldw	r2,-8(fp)
 1819a28:	103ff21e 	bne	r2,zero,18199f4 <__alt_mem_mem_0+0xff7f99f4>
      if (tmpNetif->next == netif) {
        tmpNetif->next = netif->next;
        break;
      }
    }
    if (tmpNetif == NULL)
 1819a2c:	e0bffe17 	ldw	r2,-8(fp)
 1819a30:	10000826 	beq	r2,zero,1819a54 <netif_remove+0xc0>
      return; /*  we didn't find any netif today */
  }
  snmp_dec_iflist();
  /* this netif is default? */
  if (netif_default == netif) {
 1819a34:	d0e7f417 	ldw	r3,-24624(gp)
 1819a38:	e0bfff17 	ldw	r2,-4(fp)
 1819a3c:	1880061e 	bne	r3,r2,1819a58 <netif_remove+0xc4>
    /* reset default netif */
    netif_set_default(NULL);
 1819a40:	0009883a 	mov	r4,zero
 1819a44:	1819d040 	call	1819d04 <netif_set_default>
 1819a48:	00000306 	br	1819a58 <netif_remove+0xc4>
 */
void
netif_remove(struct netif *netif)
{
  if (netif == NULL) {
    return;
 1819a4c:	0001883a 	nop
 1819a50:	00000106 	br	1819a58 <netif_remove+0xc4>
        tmpNetif->next = netif->next;
        break;
      }
    }
    if (tmpNetif == NULL)
      return; /*  we didn't find any netif today */
 1819a54:	0001883a 	nop
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
 1819a58:	e037883a 	mov	sp,fp
 1819a5c:	dfc00117 	ldw	ra,4(sp)
 1819a60:	df000017 	ldw	fp,0(sp)
 1819a64:	dec00204 	addi	sp,sp,8
 1819a68:	f800283a 	ret

01819a6c <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(char *name)
{
 1819a6c:	defffc04 	addi	sp,sp,-16
 1819a70:	df000315 	stw	fp,12(sp)
 1819a74:	df000304 	addi	fp,sp,12
 1819a78:	e13fff15 	stw	r4,-4(fp)
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
 1819a7c:	e0bfff17 	ldw	r2,-4(fp)
 1819a80:	1000021e 	bne	r2,zero,1819a8c <netif_find+0x20>
    return NULL;
 1819a84:	0005883a 	mov	r2,zero
 1819a88:	00002c06 	br	1819b3c <netif_find+0xd0>
  }

  num = name[2] - '0';
 1819a8c:	e0bfff17 	ldw	r2,-4(fp)
 1819a90:	10800084 	addi	r2,r2,2
 1819a94:	10800003 	ldbu	r2,0(r2)
 1819a98:	10bff404 	addi	r2,r2,-48
 1819a9c:	e0bffe05 	stb	r2,-8(fp)

  for(netif = netif_list; netif != NULL; netif = netif->next) {
 1819aa0:	d0a7f317 	ldw	r2,-24628(gp)
 1819aa4:	e0bffd15 	stw	r2,-12(fp)
 1819aa8:	00002106 	br	1819b30 <netif_find+0xc4>
    if (num == netif->num &&
 1819aac:	e0bffd17 	ldw	r2,-12(fp)
 1819ab0:	10800f03 	ldbu	r2,60(r2)
 1819ab4:	10c03fcc 	andi	r3,r2,255
 1819ab8:	e0bffe03 	ldbu	r2,-8(fp)
 1819abc:	1880191e 	bne	r3,r2,1819b24 <netif_find+0xb8>
       name[0] == netif->name[0] &&
 1819ac0:	e0bfff17 	ldw	r2,-4(fp)
 1819ac4:	10c00003 	ldbu	r3,0(r2)
 1819ac8:	e0bffd17 	ldw	r2,-12(fp)
 1819acc:	10800e83 	ldbu	r2,58(r2)
  }

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
    if (num == netif->num &&
 1819ad0:	18c03fcc 	andi	r3,r3,255
 1819ad4:	18c0201c 	xori	r3,r3,128
 1819ad8:	18ffe004 	addi	r3,r3,-128
 1819adc:	10803fcc 	andi	r2,r2,255
 1819ae0:	1080201c 	xori	r2,r2,128
 1819ae4:	10bfe004 	addi	r2,r2,-128
 1819ae8:	18800e1e 	bne	r3,r2,1819b24 <netif_find+0xb8>
       name[0] == netif->name[0] &&
       name[1] == netif->name[1]) {
 1819aec:	e0bfff17 	ldw	r2,-4(fp)
 1819af0:	10800044 	addi	r2,r2,1
 1819af4:	10c00003 	ldbu	r3,0(r2)
 1819af8:	e0bffd17 	ldw	r2,-12(fp)
 1819afc:	10800ec3 	ldbu	r2,59(r2)

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
    if (num == netif->num &&
       name[0] == netif->name[0] &&
 1819b00:	18c03fcc 	andi	r3,r3,255
 1819b04:	18c0201c 	xori	r3,r3,128
 1819b08:	18ffe004 	addi	r3,r3,-128
 1819b0c:	10803fcc 	andi	r2,r2,255
 1819b10:	1080201c 	xori	r2,r2,128
 1819b14:	10bfe004 	addi	r2,r2,-128
 1819b18:	1880021e 	bne	r3,r2,1819b24 <netif_find+0xb8>
       name[1] == netif->name[1]) {
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 1819b1c:	e0bffd17 	ldw	r2,-12(fp)
 1819b20:	00000606 	br	1819b3c <netif_find+0xd0>
    return NULL;
  }

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
 1819b24:	e0bffd17 	ldw	r2,-12(fp)
 1819b28:	10800017 	ldw	r2,0(r2)
 1819b2c:	e0bffd15 	stw	r2,-12(fp)
 1819b30:	e0bffd17 	ldw	r2,-12(fp)
 1819b34:	103fdd1e 	bne	r2,zero,1819aac <__alt_mem_mem_0+0xff7f9aac>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 1819b38:	0005883a 	mov	r2,zero
}
 1819b3c:	e037883a 	mov	sp,fp
 1819b40:	df000017 	ldw	fp,0(sp)
 1819b44:	dec00104 	addi	sp,sp,4
 1819b48:	f800283a 	ret

01819b4c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
 1819b4c:	defff904 	addi	sp,sp,-28
 1819b50:	dfc00615 	stw	ra,24(sp)
 1819b54:	df000515 	stw	fp,20(sp)
 1819b58:	df000504 	addi	fp,sp,20
 1819b5c:	e13ffe15 	stw	r4,-8(fp)
 1819b60:	e17fff15 	stw	r5,-4(fp)
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
 1819b64:	e0bfff17 	ldw	r2,-4(fp)
 1819b68:	10003426 	beq	r2,zero,1819c3c <netif_set_ipaddr+0xf0>
 1819b6c:	e0bfff17 	ldw	r2,-4(fp)
 1819b70:	10c00017 	ldw	r3,0(r2)
 1819b74:	e0bffe17 	ldw	r2,-8(fp)
 1819b78:	10800117 	ldw	r2,4(r2)
 1819b7c:	18802f26 	beq	r3,r2,1819c3c <netif_set_ipaddr+0xf0>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
 1819b80:	d0a7f717 	ldw	r2,-24612(gp)
 1819b84:	e0bffb15 	stw	r2,-20(fp)
    while (pcb != NULL) {
 1819b88:	00001006 	br	1819bcc <netif_set_ipaddr+0x80>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
 1819b8c:	e0bffb17 	ldw	r2,-20(fp)
 1819b90:	10c00017 	ldw	r3,0(r2)
 1819b94:	e0bffe17 	ldw	r2,-8(fp)
 1819b98:	10800117 	ldw	r2,4(r2)
 1819b9c:	1880081e 	bne	r3,r2,1819bc0 <netif_set_ipaddr+0x74>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
 1819ba0:	e0bffb17 	ldw	r2,-20(fp)
 1819ba4:	10800317 	ldw	r2,12(r2)
 1819ba8:	e0bffd15 	stw	r2,-12(fp)
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
 1819bac:	e13ffb17 	ldw	r4,-20(fp)
 1819bb0:	181bd300 	call	181bd30 <tcp_abort>
        pcb = next;
 1819bb4:	e0bffd17 	ldw	r2,-12(fp)
 1819bb8:	e0bffb15 	stw	r2,-20(fp)
 1819bbc:	00000306 	br	1819bcc <netif_set_ipaddr+0x80>
      } else {
        pcb = pcb->next;
 1819bc0:	e0bffb17 	ldw	r2,-20(fp)
 1819bc4:	10800317 	ldw	r2,12(r2)
 1819bc8:	e0bffb15 	stw	r2,-20(fp)
  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
 1819bcc:	e0bffb17 	ldw	r2,-20(fp)
 1819bd0:	103fee1e 	bne	r2,zero,1819b8c <__alt_mem_mem_0+0xff7f9b8c>
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 1819bd4:	d0a7f917 	ldw	r2,-24604(gp)
 1819bd8:	e0bffc15 	stw	r2,-16(fp)
 1819bdc:	00001506 	br	1819c34 <netif_set_ipaddr+0xe8>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 1819be0:	e0bffc17 	ldw	r2,-16(fp)
 1819be4:	10001026 	beq	r2,zero,1819c28 <netif_set_ipaddr+0xdc>
 1819be8:	e0bffc17 	ldw	r2,-16(fp)
 1819bec:	10800017 	ldw	r2,0(r2)
 1819bf0:	10000d26 	beq	r2,zero,1819c28 <netif_set_ipaddr+0xdc>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
 1819bf4:	e0bffc17 	ldw	r2,-16(fp)
 1819bf8:	10c00017 	ldw	r3,0(r2)
 1819bfc:	e0bffe17 	ldw	r2,-8(fp)
 1819c00:	10800117 	ldw	r2,4(r2)
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 1819c04:	1880081e 	bne	r3,r2,1819c28 <netif_set_ipaddr+0xdc>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
 1819c08:	e0bfff17 	ldw	r2,-4(fp)
 1819c0c:	10000326 	beq	r2,zero,1819c1c <netif_set_ipaddr+0xd0>
 1819c10:	e0bfff17 	ldw	r2,-4(fp)
 1819c14:	10800017 	ldw	r2,0(r2)
 1819c18:	00000106 	br	1819c20 <netif_set_ipaddr+0xd4>
 1819c1c:	0005883a 	mov	r2,zero
 1819c20:	e0fffc17 	ldw	r3,-16(fp)
 1819c24:	18800015 	stw	r2,0(r3)
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 1819c28:	e0bffc17 	ldw	r2,-16(fp)
 1819c2c:	10800317 	ldw	r2,12(r2)
 1819c30:	e0bffc15 	stw	r2,-16(fp)
 1819c34:	e0bffc17 	ldw	r2,-16(fp)
 1819c38:	103fe91e 	bne	r2,zero,1819be0 <__alt_mem_mem_0+0xff7f9be0>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
 1819c3c:	e0bfff17 	ldw	r2,-4(fp)
 1819c40:	10000326 	beq	r2,zero,1819c50 <netif_set_ipaddr+0x104>
 1819c44:	e0bfff17 	ldw	r2,-4(fp)
 1819c48:	10800017 	ldw	r2,0(r2)
 1819c4c:	00000106 	br	1819c54 <netif_set_ipaddr+0x108>
 1819c50:	0005883a 	mov	r2,zero
 1819c54:	e0fffe17 	ldw	r3,-8(fp)
 1819c58:	18800115 	stw	r2,4(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
 1819c5c:	0001883a 	nop
 1819c60:	e037883a 	mov	sp,fp
 1819c64:	dfc00117 	ldw	ra,4(sp)
 1819c68:	df000017 	ldw	fp,0(sp)
 1819c6c:	dec00204 	addi	sp,sp,8
 1819c70:	f800283a 	ret

01819c74 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
 1819c74:	defffd04 	addi	sp,sp,-12
 1819c78:	df000215 	stw	fp,8(sp)
 1819c7c:	df000204 	addi	fp,sp,8
 1819c80:	e13ffe15 	stw	r4,-8(fp)
 1819c84:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&(netif->gw), gw);
 1819c88:	e0bfff17 	ldw	r2,-4(fp)
 1819c8c:	10000326 	beq	r2,zero,1819c9c <netif_set_gw+0x28>
 1819c90:	e0bfff17 	ldw	r2,-4(fp)
 1819c94:	10800017 	ldw	r2,0(r2)
 1819c98:	00000106 	br	1819ca0 <netif_set_gw+0x2c>
 1819c9c:	0005883a 	mov	r2,zero
 1819ca0:	e0fffe17 	ldw	r3,-8(fp)
 1819ca4:	18800315 	stw	r2,12(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
 1819ca8:	0001883a 	nop
 1819cac:	e037883a 	mov	sp,fp
 1819cb0:	df000017 	ldw	fp,0(sp)
 1819cb4:	dec00104 	addi	sp,sp,4
 1819cb8:	f800283a 	ret

01819cbc <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
 1819cbc:	defffd04 	addi	sp,sp,-12
 1819cc0:	df000215 	stw	fp,8(sp)
 1819cc4:	df000204 	addi	fp,sp,8
 1819cc8:	e13ffe15 	stw	r4,-8(fp)
 1819ccc:	e17fff15 	stw	r5,-4(fp)
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
 1819cd0:	e0bfff17 	ldw	r2,-4(fp)
 1819cd4:	10000326 	beq	r2,zero,1819ce4 <netif_set_netmask+0x28>
 1819cd8:	e0bfff17 	ldw	r2,-4(fp)
 1819cdc:	10800017 	ldw	r2,0(r2)
 1819ce0:	00000106 	br	1819ce8 <netif_set_netmask+0x2c>
 1819ce4:	0005883a 	mov	r2,zero
 1819ce8:	e0fffe17 	ldw	r3,-8(fp)
 1819cec:	18800215 	stw	r2,8(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
 1819cf0:	0001883a 	nop
 1819cf4:	e037883a 	mov	sp,fp
 1819cf8:	df000017 	ldw	fp,0(sp)
 1819cfc:	dec00104 	addi	sp,sp,4
 1819d00:	f800283a 	ret

01819d04 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 1819d04:	defffe04 	addi	sp,sp,-8
 1819d08:	df000115 	stw	fp,4(sp)
 1819d0c:	df000104 	addi	fp,sp,4
 1819d10:	e13fff15 	stw	r4,-4(fp)
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
 1819d14:	e0bfff17 	ldw	r2,-4(fp)
 1819d18:	d0a7f415 	stw	r2,-24624(gp)
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 1819d1c:	0001883a 	nop
 1819d20:	e037883a 	mov	sp,fp
 1819d24:	df000017 	ldw	fp,0(sp)
 1819d28:	dec00104 	addi	sp,sp,4
 1819d2c:	f800283a 	ret

01819d30 <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
 1819d30:	defffd04 	addi	sp,sp,-12
 1819d34:	dfc00215 	stw	ra,8(sp)
 1819d38:	df000115 	stw	fp,4(sp)
 1819d3c:	df000104 	addi	fp,sp,4
 1819d40:	e13fff15 	stw	r4,-4(fp)
  if (!(netif->flags & NETIF_FLAG_UP)) {
 1819d44:	e0bfff17 	ldw	r2,-4(fp)
 1819d48:	10800e43 	ldbu	r2,57(r2)
 1819d4c:	10803fcc 	andi	r2,r2,255
 1819d50:	1080004c 	andi	r2,r2,1
 1819d54:	10001c1e 	bne	r2,zero,1819dc8 <netif_set_up+0x98>
    netif->flags |= NETIF_FLAG_UP;
 1819d58:	e0bfff17 	ldw	r2,-4(fp)
 1819d5c:	10800e43 	ldbu	r2,57(r2)
 1819d60:	10800054 	ori	r2,r2,1
 1819d64:	1007883a 	mov	r3,r2
 1819d68:	e0bfff17 	ldw	r2,-4(fp)
 1819d6c:	10c00e45 	stb	r3,57(r2)
    
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);
 1819d70:	e0bfff17 	ldw	r2,-4(fp)
 1819d74:	10800717 	ldw	r2,28(r2)
 1819d78:	10000426 	beq	r2,zero,1819d8c <netif_set_up+0x5c>
 1819d7c:	e0bfff17 	ldw	r2,-4(fp)
 1819d80:	10800717 	ldw	r2,28(r2)
 1819d84:	e13fff17 	ldw	r4,-4(fp)
 1819d88:	103ee83a 	callr	r2

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 1819d8c:	e0bfff17 	ldw	r2,-4(fp)
 1819d90:	10800e43 	ldbu	r2,57(r2)
 1819d94:	10803fcc 	andi	r2,r2,255
 1819d98:	1080040c 	andi	r2,r2,16
 1819d9c:	10000a26 	beq	r2,zero,1819dc8 <netif_set_up+0x98>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
 1819da0:	e0bfff17 	ldw	r2,-4(fp)
 1819da4:	10800e43 	ldbu	r2,57(r2)
 1819da8:	10803fcc 	andi	r2,r2,255
 1819dac:	1080080c 	andi	r2,r2,32
 1819db0:	10000526 	beq	r2,zero,1819dc8 <netif_set_up+0x98>
        etharp_gratuitous(netif);
 1819db4:	e0bfff17 	ldw	r2,-4(fp)
 1819db8:	10800104 	addi	r2,r2,4
 1819dbc:	100b883a 	mov	r5,r2
 1819dc0:	e13fff17 	ldw	r4,-4(fp)
 1819dc4:	18240c40 	call	18240c4 <etharp_request>
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
  }
}
 1819dc8:	0001883a 	nop
 1819dcc:	e037883a 	mov	sp,fp
 1819dd0:	dfc00117 	ldw	ra,4(sp)
 1819dd4:	df000017 	ldw	fp,0(sp)
 1819dd8:	dec00204 	addi	sp,sp,8
 1819ddc:	f800283a 	ret

01819de0 <netif_set_down>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
 1819de0:	defffd04 	addi	sp,sp,-12
 1819de4:	dfc00215 	stw	ra,8(sp)
 1819de8:	df000115 	stw	fp,4(sp)
 1819dec:	df000104 	addi	fp,sp,4
 1819df0:	e13fff15 	stw	r4,-4(fp)
  if (netif->flags & NETIF_FLAG_UP) {
 1819df4:	e0bfff17 	ldw	r2,-4(fp)
 1819df8:	10800e43 	ldbu	r2,57(r2)
 1819dfc:	10803fcc 	andi	r2,r2,255
 1819e00:	1080004c 	andi	r2,r2,1
 1819e04:	10001526 	beq	r2,zero,1819e5c <netif_set_down+0x7c>
    netif->flags &= ~NETIF_FLAG_UP;
 1819e08:	e0bfff17 	ldw	r2,-4(fp)
 1819e0c:	10c00e43 	ldbu	r3,57(r2)
 1819e10:	00bfff84 	movi	r2,-2
 1819e14:	1884703a 	and	r2,r3,r2
 1819e18:	1007883a 	mov	r3,r2
 1819e1c:	e0bfff17 	ldw	r2,-4(fp)
 1819e20:	10c00e45 	stb	r3,57(r2)
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 1819e24:	e0bfff17 	ldw	r2,-4(fp)
 1819e28:	10800e43 	ldbu	r2,57(r2)
 1819e2c:	10803fcc 	andi	r2,r2,255
 1819e30:	1080080c 	andi	r2,r2,32
 1819e34:	10000226 	beq	r2,zero,1819e40 <netif_set_down+0x60>
      etharp_cleanup_netif(netif);
 1819e38:	e13fff17 	ldw	r4,-4(fp)
 1819e3c:	18230f40 	call	18230f4 <etharp_cleanup_netif>
    }
#endif /* LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
 1819e40:	e0bfff17 	ldw	r2,-4(fp)
 1819e44:	10800717 	ldw	r2,28(r2)
 1819e48:	10000426 	beq	r2,zero,1819e5c <netif_set_down+0x7c>
 1819e4c:	e0bfff17 	ldw	r2,-4(fp)
 1819e50:	10800717 	ldw	r2,28(r2)
 1819e54:	e13fff17 	ldw	r4,-4(fp)
 1819e58:	103ee83a 	callr	r2
  }
}
 1819e5c:	0001883a 	nop
 1819e60:	e037883a 	mov	sp,fp
 1819e64:	dfc00117 	ldw	ra,4(sp)
 1819e68:	df000017 	ldw	fp,0(sp)
 1819e6c:	dec00204 	addi	sp,sp,8
 1819e70:	f800283a 	ret

01819e74 <netif_set_status_callback>:
#if LWIP_NETIF_STATUS_CALLBACK
/**
 * Set callback to be called when interface is brought up/down
 */
void netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
 1819e74:	defffd04 	addi	sp,sp,-12
 1819e78:	df000215 	stw	fp,8(sp)
 1819e7c:	df000204 	addi	fp,sp,8
 1819e80:	e13ffe15 	stw	r4,-8(fp)
 1819e84:	e17fff15 	stw	r5,-4(fp)
  if (netif) {
 1819e88:	e0bffe17 	ldw	r2,-8(fp)
 1819e8c:	10000326 	beq	r2,zero,1819e9c <netif_set_status_callback+0x28>
    netif->status_callback = status_callback;
 1819e90:	e0bffe17 	ldw	r2,-8(fp)
 1819e94:	e0ffff17 	ldw	r3,-4(fp)
 1819e98:	10c00715 	stw	r3,28(r2)
  }
}
 1819e9c:	0001883a 	nop
 1819ea0:	e037883a 	mov	sp,fp
 1819ea4:	df000017 	ldw	fp,0(sp)
 1819ea8:	dec00104 	addi	sp,sp,4
 1819eac:	f800283a 	ret

01819eb0 <netif_set_link_up>:

/**
 * Called by a driver when its link goes up
 */
void netif_set_link_up(struct netif *netif )
{
 1819eb0:	defffd04 	addi	sp,sp,-12
 1819eb4:	dfc00215 	stw	ra,8(sp)
 1819eb8:	df000115 	stw	fp,4(sp)
 1819ebc:	df000104 	addi	fp,sp,4
 1819ec0:	e13fff15 	stw	r4,-4(fp)
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 1819ec4:	e0bfff17 	ldw	r2,-4(fp)
 1819ec8:	10800e43 	ldbu	r2,57(r2)
 1819ecc:	10803fcc 	andi	r2,r2,255
 1819ed0:	1080040c 	andi	r2,r2,16
 1819ed4:	1000211e 	bne	r2,zero,1819f5c <netif_set_link_up+0xac>
    netif->flags |= NETIF_FLAG_LINK_UP;
 1819ed8:	e0bfff17 	ldw	r2,-4(fp)
 1819edc:	10800e43 	ldbu	r2,57(r2)
 1819ee0:	10800414 	ori	r2,r2,16
 1819ee4:	1007883a 	mov	r3,r2
 1819ee8:	e0bfff17 	ldw	r2,-4(fp)
 1819eec:	10c00e45 	stb	r3,57(r2)

#if LWIP_DHCP
    if (netif->dhcp) {
 1819ef0:	e0bfff17 	ldw	r2,-4(fp)
 1819ef4:	10800a17 	ldw	r2,40(r2)
 1819ef8:	10000226 	beq	r2,zero,1819f04 <netif_set_link_up+0x54>
      dhcp_network_changed(netif);
 1819efc:	e13fff17 	ldw	r4,-4(fp)
 1819f00:	18162a40 	call	18162a4 <dhcp_network_changed>
    if (netif->autoip) {
      autoip_network_changed(netif);
    }
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 1819f04:	e0bfff17 	ldw	r2,-4(fp)
 1819f08:	10800e43 	ldbu	r2,57(r2)
 1819f0c:	10803fcc 	andi	r2,r2,255
 1819f10:	1080004c 	andi	r2,r2,1
 1819f14:	10000a26 	beq	r2,zero,1819f40 <netif_set_link_up+0x90>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & NETIF_FLAG_ETHARP) {
 1819f18:	e0bfff17 	ldw	r2,-4(fp)
 1819f1c:	10800e43 	ldbu	r2,57(r2)
 1819f20:	10803fcc 	andi	r2,r2,255
 1819f24:	1080080c 	andi	r2,r2,32
 1819f28:	10000526 	beq	r2,zero,1819f40 <netif_set_link_up+0x90>
        etharp_gratuitous(netif);
 1819f2c:	e0bfff17 	ldw	r2,-4(fp)
 1819f30:	10800104 	addi	r2,r2,4
 1819f34:	100b883a 	mov	r5,r2
 1819f38:	e13fff17 	ldw	r4,-4(fp)
 1819f3c:	18240c40 	call	18240c4 <etharp_request>
      if (netif->flags & NETIF_FLAG_IGMP) {
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
    NETIF_LINK_CALLBACK(netif);
 1819f40:	e0bfff17 	ldw	r2,-4(fp)
 1819f44:	10800817 	ldw	r2,32(r2)
 1819f48:	10000426 	beq	r2,zero,1819f5c <netif_set_link_up+0xac>
 1819f4c:	e0bfff17 	ldw	r2,-4(fp)
 1819f50:	10800817 	ldw	r2,32(r2)
 1819f54:	e13fff17 	ldw	r4,-4(fp)
 1819f58:	103ee83a 	callr	r2
  }
}
 1819f5c:	0001883a 	nop
 1819f60:	e037883a 	mov	sp,fp
 1819f64:	dfc00117 	ldw	ra,4(sp)
 1819f68:	df000017 	ldw	fp,0(sp)
 1819f6c:	dec00204 	addi	sp,sp,8
 1819f70:	f800283a 	ret

01819f74 <netif_set_link_down>:

/**
 * Called by a driver when its link goes down
 */
void netif_set_link_down(struct netif *netif )
{
 1819f74:	defffd04 	addi	sp,sp,-12
 1819f78:	dfc00215 	stw	ra,8(sp)
 1819f7c:	df000115 	stw	fp,4(sp)
 1819f80:	df000104 	addi	fp,sp,4
 1819f84:	e13fff15 	stw	r4,-4(fp)
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 1819f88:	e0bfff17 	ldw	r2,-4(fp)
 1819f8c:	10800e43 	ldbu	r2,57(r2)
 1819f90:	10803fcc 	andi	r2,r2,255
 1819f94:	1080040c 	andi	r2,r2,16
 1819f98:	10000e26 	beq	r2,zero,1819fd4 <netif_set_link_down+0x60>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 1819f9c:	e0bfff17 	ldw	r2,-4(fp)
 1819fa0:	10c00e43 	ldbu	r3,57(r2)
 1819fa4:	00bffbc4 	movi	r2,-17
 1819fa8:	1884703a 	and	r2,r3,r2
 1819fac:	1007883a 	mov	r3,r2
 1819fb0:	e0bfff17 	ldw	r2,-4(fp)
 1819fb4:	10c00e45 	stb	r3,57(r2)
    NETIF_LINK_CALLBACK(netif);
 1819fb8:	e0bfff17 	ldw	r2,-4(fp)
 1819fbc:	10800817 	ldw	r2,32(r2)
 1819fc0:	10000426 	beq	r2,zero,1819fd4 <netif_set_link_down+0x60>
 1819fc4:	e0bfff17 	ldw	r2,-4(fp)
 1819fc8:	10800817 	ldw	r2,32(r2)
 1819fcc:	e13fff17 	ldw	r4,-4(fp)
 1819fd0:	103ee83a 	callr	r2
  }
}
 1819fd4:	0001883a 	nop
 1819fd8:	e037883a 	mov	sp,fp
 1819fdc:	dfc00117 	ldw	ra,4(sp)
 1819fe0:	df000017 	ldw	fp,0(sp)
 1819fe4:	dec00204 	addi	sp,sp,8
 1819fe8:	f800283a 	ret

01819fec <netif_set_link_callback>:
#if LWIP_NETIF_LINK_CALLBACK
/**
 * Set callback to be called when link is brought up/down
 */
void netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 1819fec:	defffd04 	addi	sp,sp,-12
 1819ff0:	df000215 	stw	fp,8(sp)
 1819ff4:	df000204 	addi	fp,sp,8
 1819ff8:	e13ffe15 	stw	r4,-8(fp)
 1819ffc:	e17fff15 	stw	r5,-4(fp)
  if (netif) {
 181a000:	e0bffe17 	ldw	r2,-8(fp)
 181a004:	10000326 	beq	r2,zero,181a014 <netif_set_link_callback+0x28>
    netif->link_callback = link_callback;
 181a008:	e0bffe17 	ldw	r2,-8(fp)
 181a00c:	e0ffff17 	ldw	r3,-4(fp)
 181a010:	10c00815 	stw	r3,32(r2)
  }
}
 181a014:	0001883a 	nop
 181a018:	e037883a 	mov	sp,fp
 181a01c:	df000017 	ldw	fp,0(sp)
 181a020:	dec00104 	addi	sp,sp,4
 181a024:	f800283a 	ret

0181a028 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 181a028:	defffd04 	addi	sp,sp,-12
 181a02c:	dfc00215 	stw	ra,8(sp)
 181a030:	df000115 	stw	fp,4(sp)
 181a034:	df000104 	addi	fp,sp,4
  struct tcp_pcb* pcb;
  SYS_ARCH_DECL_PROTECT(old_level);

  SYS_ARCH_PROTECT(old_level);
 181a038:	1810de40 	call	1810de4 <vTaskEnterCritical>
  pbuf_free_ooseq_pending = 0;
 181a03c:	d027f505 	stb	zero,-24620(gp)
  SYS_ARCH_UNPROTECT(old_level);
 181a040:	1810e380 	call	1810e38 <vTaskExitCritical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 181a044:	d0a7f717 	ldw	r2,-24612(gp)
 181a048:	e0bfff15 	stw	r2,-4(fp)
 181a04c:	00000d06 	br	181a084 <pbuf_free_ooseq+0x5c>
    if (NULL != pcb->ooseq) {
 181a050:	e0bfff17 	ldw	r2,-4(fp)
 181a054:	10801e17 	ldw	r2,120(r2)
 181a058:	10000726 	beq	r2,zero,181a078 <pbuf_free_ooseq+0x50>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 181a05c:	e0bfff17 	ldw	r2,-4(fp)
 181a060:	10801e17 	ldw	r2,120(r2)
 181a064:	1009883a 	mov	r4,r2
 181a068:	181d1580 	call	181d158 <tcp_segs_free>
      pcb->ooseq = NULL;
 181a06c:	e0bfff17 	ldw	r2,-4(fp)
 181a070:	10001e15 	stw	zero,120(r2)
      return;
 181a074:	00000506 	br	181a08c <pbuf_free_ooseq+0x64>

  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 0;
  SYS_ARCH_UNPROTECT(old_level);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 181a078:	e0bfff17 	ldw	r2,-4(fp)
 181a07c:	10800317 	ldw	r2,12(r2)
 181a080:	e0bfff15 	stw	r2,-4(fp)
 181a084:	e0bfff17 	ldw	r2,-4(fp)
 181a088:	103ff11e 	bne	r2,zero,181a050 <__alt_mem_mem_0+0xff7fa050>
      tcp_segs_free(pcb->ooseq);
      pcb->ooseq = NULL;
      return;
    }
  }
}
 181a08c:	e037883a 	mov	sp,fp
 181a090:	dfc00117 	ldw	ra,4(sp)
 181a094:	df000017 	ldw	fp,0(sp)
 181a098:	dec00204 	addi	sp,sp,8
 181a09c:	f800283a 	ret

0181a0a0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_timeout() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 181a0a0:	defffd04 	addi	sp,sp,-12
 181a0a4:	dfc00215 	stw	ra,8(sp)
 181a0a8:	df000115 	stw	fp,4(sp)
 181a0ac:	df000104 	addi	fp,sp,4
 181a0b0:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 181a0b4:	181a0280 	call	181a028 <pbuf_free_ooseq>
}
 181a0b8:	0001883a 	nop
 181a0bc:	e037883a 	mov	sp,fp
 181a0c0:	dfc00117 	ldw	ra,4(sp)
 181a0c4:	df000017 	ldw	fp,0(sp)
 181a0c8:	dec00204 	addi	sp,sp,8
 181a0cc:	f800283a 	ret

0181a0d0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 181a0d0:	defffd04 	addi	sp,sp,-12
 181a0d4:	dfc00215 	stw	ra,8(sp)
 181a0d8:	df000115 	stw	fp,4(sp)
 181a0dc:	df000104 	addi	fp,sp,4
  pbuf_free_ooseq_pending = 1;
  SYS_ARCH_UNPROTECT(old_level);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 181a0e0:	1810de40 	call	1810de4 <vTaskEnterCritical>
  queued = pbuf_free_ooseq_pending;
 181a0e4:	d0a7f503 	ldbu	r2,-24620(gp)
 181a0e8:	e0bfff05 	stb	r2,-4(fp)
  pbuf_free_ooseq_pending = 1;
 181a0ec:	00800044 	movi	r2,1
 181a0f0:	d0a7f505 	stb	r2,-24620(gp)
  SYS_ARCH_UNPROTECT(old_level);
 181a0f4:	1810e380 	call	1810e38 <vTaskExitCritical>

  if(!queued) {
 181a0f8:	e0bfff03 	ldbu	r2,-4(fp)
 181a0fc:	10000c1e 	bne	r2,zero,181a130 <pbuf_pool_is_empty+0x60>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 181a100:	000d883a 	mov	r6,zero
 181a104:	000b883a 	mov	r5,zero
 181a108:	010060b4 	movhi	r4,386
 181a10c:	21282804 	addi	r4,r4,-24416
 181a110:	182b3ec0 	call	182b3ec <tcpip_callback_with_block>
 181a114:	10803fcc 	andi	r2,r2,255
 181a118:	1080201c 	xori	r2,r2,128
 181a11c:	10bfe004 	addi	r2,r2,-128
 181a120:	10000326 	beq	r2,zero,181a130 <pbuf_pool_is_empty+0x60>
 181a124:	1810de40 	call	1810de4 <vTaskEnterCritical>
 181a128:	d027f505 	stb	zero,-24620(gp)
 181a12c:	1810e380 	call	1810e38 <vTaskExitCritical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 181a130:	0001883a 	nop
 181a134:	e037883a 	mov	sp,fp
 181a138:	dfc00117 	ldw	ra,4(sp)
 181a13c:	df000017 	ldw	fp,0(sp)
 181a140:	dec00204 	addi	sp,sp,8
 181a144:	f800283a 	ret

0181a148 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 181a148:	defff604 	addi	sp,sp,-40
 181a14c:	dfc00915 	stw	ra,36(sp)
 181a150:	df000815 	stw	fp,32(sp)
 181a154:	df000804 	addi	fp,sp,32
 181a158:	e13ffd15 	stw	r4,-12(fp)
 181a15c:	2805883a 	mov	r2,r5
 181a160:	e1bfff15 	stw	r6,-4(fp)
 181a164:	e0bffe0d 	sth	r2,-8(fp)
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 181a168:	e0bffd17 	ldw	r2,-12(fp)
 181a16c:	10c00060 	cmpeqi	r3,r2,1
 181a170:	1800091e 	bne	r3,zero,181a198 <pbuf_alloc+0x50>
 181a174:	0080052e 	bgeu	zero,r2,181a18c <pbuf_alloc+0x44>
 181a178:	10c000a0 	cmpeqi	r3,r2,2
 181a17c:	1800091e 	bne	r3,zero,181a1a4 <pbuf_alloc+0x5c>
 181a180:	108000e0 	cmpeqi	r2,r2,3
 181a184:	10000a1e 	bne	r2,zero,181a1b0 <pbuf_alloc+0x68>
 181a188:	00000b06 	br	181a1b8 <pbuf_alloc+0x70>
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 181a18c:	00800e04 	movi	r2,56
 181a190:	e0bffa0d 	sth	r2,-24(fp)
    break;
 181a194:	00000a06 	br	181a1c0 <pbuf_alloc+0x78>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 181a198:	00800904 	movi	r2,36
 181a19c:	e0bffa0d 	sth	r2,-24(fp)
    break;
 181a1a0:	00000706 	br	181a1c0 <pbuf_alloc+0x78>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 181a1a4:	00800404 	movi	r2,16
 181a1a8:	e0bffa0d 	sth	r2,-24(fp)
    break;
 181a1ac:	00000406 	br	181a1c0 <pbuf_alloc+0x78>
  case PBUF_RAW:
    offset = 0;
 181a1b0:	e03ffa0d 	sth	zero,-24(fp)
    break;
 181a1b4:	00000206 	br	181a1c0 <pbuf_alloc+0x78>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
 181a1b8:	0005883a 	mov	r2,zero
 181a1bc:	0000b806 	br	181a4a0 <pbuf_alloc+0x358>
  }

  switch (type) {
 181a1c0:	e0bfff17 	ldw	r2,-4(fp)
 181a1c4:	10c000e8 	cmpgeui	r3,r2,3
 181a1c8:	1800021e 	bne	r3,zero,181a1d4 <pbuf_alloc+0x8c>
 181a1cc:	00809536 	bltu	zero,r2,181a424 <pbuf_alloc+0x2dc>
 181a1d0:	00006806 	br	181a374 <pbuf_alloc+0x22c>
 181a1d4:	108000e0 	cmpeqi	r2,r2,3
 181a1d8:	1000a926 	beq	r2,zero,181a480 <pbuf_alloc+0x338>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 181a1dc:	01000384 	movi	r4,14
 181a1e0:	18340280 	call	1834028 <memp_malloc>
 181a1e4:	e0bff815 	stw	r2,-32(fp)
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 181a1e8:	e0bff817 	ldw	r2,-32(fp)
 181a1ec:	1000031e 	bne	r2,zero,181a1fc <pbuf_alloc+0xb4>
      PBUF_POOL_IS_EMPTY();
 181a1f0:	181a0d00 	call	181a0d0 <pbuf_pool_is_empty>
      return NULL;
 181a1f4:	0005883a 	mov	r2,zero
 181a1f8:	0000a906 	br	181a4a0 <pbuf_alloc+0x358>
    }
    p->type = type;
 181a1fc:	e0bfff17 	ldw	r2,-4(fp)
 181a200:	1007883a 	mov	r3,r2
 181a204:	e0bff817 	ldw	r2,-32(fp)
 181a208:	10c00305 	stb	r3,12(r2)
    p->next = NULL;
 181a20c:	e0bff817 	ldw	r2,-32(fp)
 181a210:	10000015 	stw	zero,0(r2)

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 181a214:	e0bffa0b 	ldhu	r2,-24(fp)
 181a218:	10800404 	addi	r2,r2,16
 181a21c:	e0fff817 	ldw	r3,-32(fp)
 181a220:	1885883a 	add	r2,r3,r2
 181a224:	10c000c4 	addi	r3,r2,3
 181a228:	00bfff04 	movi	r2,-4
 181a22c:	1884703a 	and	r2,r3,r2
 181a230:	1007883a 	mov	r3,r2
 181a234:	e0bff817 	ldw	r2,-32(fp)
 181a238:	10c00115 	stw	r3,4(r2)
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 181a23c:	e0bff817 	ldw	r2,-32(fp)
 181a240:	e0fffe0b 	ldhu	r3,-8(fp)
 181a244:	10c0020d 	sth	r3,8(r2)
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 181a248:	e0bffa0b 	ldhu	r2,-24(fp)
 181a24c:	10c000c4 	addi	r3,r2,3
 181a250:	00bfff04 	movi	r2,-4
 181a254:	1884703a 	and	r2,r3,r2
 181a258:	00c17b04 	movi	r3,1516
 181a25c:	1885c83a 	sub	r2,r3,r2
 181a260:	e0fffe0b 	ldhu	r3,-8(fp)
 181a264:	1880010e 	bge	r3,r2,181a26c <pbuf_alloc+0x124>
 181a268:	1805883a 	mov	r2,r3
 181a26c:	1007883a 	mov	r3,r2
 181a270:	e0bff817 	ldw	r2,-32(fp)
 181a274:	10c0028d 	sth	r3,10(r2)
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 181a278:	e0bff817 	ldw	r2,-32(fp)
 181a27c:	00c00044 	movi	r3,1
 181a280:	10c0038d 	sth	r3,14(r2)

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 181a284:	e0bff817 	ldw	r2,-32(fp)
 181a288:	e0bff915 	stw	r2,-28(fp)
    /* remaining length to be allocated */
    rem_len = length - p->len;
 181a28c:	e0fffe0b 	ldhu	r3,-8(fp)
 181a290:	e0bff817 	ldw	r2,-32(fp)
 181a294:	1080028b 	ldhu	r2,10(r2)
 181a298:	10bfffcc 	andi	r2,r2,65535
 181a29c:	1885c83a 	sub	r2,r3,r2
 181a2a0:	e0bffb15 	stw	r2,-20(fp)
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 181a2a4:	00003006 	br	181a368 <pbuf_alloc+0x220>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 181a2a8:	01000384 	movi	r4,14
 181a2ac:	18340280 	call	1834028 <memp_malloc>
 181a2b0:	e0bffc15 	stw	r2,-16(fp)
      if (q == NULL) {
 181a2b4:	e0bffc17 	ldw	r2,-16(fp)
 181a2b8:	1000051e 	bne	r2,zero,181a2d0 <pbuf_alloc+0x188>
        PBUF_POOL_IS_EMPTY();
 181a2bc:	181a0d00 	call	181a0d0 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 181a2c0:	e13ff817 	ldw	r4,-32(fp)
 181a2c4:	181a9040 	call	181a904 <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
 181a2c8:	0005883a 	mov	r2,zero
 181a2cc:	00007406 	br	181a4a0 <pbuf_alloc+0x358>
      }
      q->type = type;
 181a2d0:	e0bfff17 	ldw	r2,-4(fp)
 181a2d4:	1007883a 	mov	r3,r2
 181a2d8:	e0bffc17 	ldw	r2,-16(fp)
 181a2dc:	10c00305 	stb	r3,12(r2)
      q->flags = 0;
 181a2e0:	e0bffc17 	ldw	r2,-16(fp)
 181a2e4:	10000345 	stb	zero,13(r2)
      q->next = NULL;
 181a2e8:	e0bffc17 	ldw	r2,-16(fp)
 181a2ec:	10000015 	stw	zero,0(r2)
      /* make previous pbuf point to this pbuf */
      r->next = q;
 181a2f0:	e0bff917 	ldw	r2,-28(fp)
 181a2f4:	e0fffc17 	ldw	r3,-16(fp)
 181a2f8:	10c00015 	stw	r3,0(r2)
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 181a2fc:	e0bffb17 	ldw	r2,-20(fp)
 181a300:	1007883a 	mov	r3,r2
 181a304:	e0bffc17 	ldw	r2,-16(fp)
 181a308:	10c0020d 	sth	r3,8(r2)
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 181a30c:	e0bffb17 	ldw	r2,-20(fp)
 181a310:	10bfffcc 	andi	r2,r2,65535
 181a314:	10c17b50 	cmplti	r3,r2,1517
 181a318:	1800011e 	bne	r3,zero,181a320 <pbuf_alloc+0x1d8>
 181a31c:	00817b04 	movi	r2,1516
 181a320:	1007883a 	mov	r3,r2
 181a324:	e0bffc17 	ldw	r2,-16(fp)
 181a328:	10c0028d 	sth	r3,10(r2)
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 181a32c:	e0bffc17 	ldw	r2,-16(fp)
 181a330:	10c00404 	addi	r3,r2,16
 181a334:	e0bffc17 	ldw	r2,-16(fp)
 181a338:	10c00115 	stw	r3,4(r2)
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 181a33c:	e0bffc17 	ldw	r2,-16(fp)
 181a340:	00c00044 	movi	r3,1
 181a344:	10c0038d 	sth	r3,14(r2)
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 181a348:	e0bffc17 	ldw	r2,-16(fp)
 181a34c:	1080028b 	ldhu	r2,10(r2)
 181a350:	10bfffcc 	andi	r2,r2,65535
 181a354:	e0fffb17 	ldw	r3,-20(fp)
 181a358:	1885c83a 	sub	r2,r3,r2
 181a35c:	e0bffb15 	stw	r2,-20(fp)
      /* remember this pbuf for linkage in next iteration */
      r = q;
 181a360:	e0bffc17 	ldw	r2,-16(fp)
 181a364:	e0bff915 	stw	r2,-28(fp)
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 181a368:	e0bffb17 	ldw	r2,-20(fp)
 181a36c:	00bfce16 	blt	zero,r2,181a2a8 <__alt_mem_mem_0+0xff7fa2a8>
      r = q;
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 181a370:	00004506 	br	181a488 <pbuf_alloc+0x340>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 181a374:	e0bffa0b 	ldhu	r2,-24(fp)
 181a378:	108004c4 	addi	r2,r2,19
 181a37c:	1007883a 	mov	r3,r2
 181a380:	00bfff04 	movi	r2,-4
 181a384:	1884703a 	and	r2,r3,r2
 181a388:	1007883a 	mov	r3,r2
 181a38c:	e0bffe0b 	ldhu	r2,-8(fp)
 181a390:	108000c4 	addi	r2,r2,3
 181a394:	1009883a 	mov	r4,r2
 181a398:	00bfff04 	movi	r2,-4
 181a39c:	2084703a 	and	r2,r4,r2
 181a3a0:	1885883a 	add	r2,r3,r2
 181a3a4:	10bfffcc 	andi	r2,r2,65535
 181a3a8:	1009883a 	mov	r4,r2
 181a3ac:	18194800 	call	1819480 <mem_malloc>
 181a3b0:	e0bff815 	stw	r2,-32(fp)
    if (p == NULL) {
 181a3b4:	e0bff817 	ldw	r2,-32(fp)
 181a3b8:	1000021e 	bne	r2,zero,181a3c4 <pbuf_alloc+0x27c>
      return NULL;
 181a3bc:	0005883a 	mov	r2,zero
 181a3c0:	00003706 	br	181a4a0 <pbuf_alloc+0x358>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 181a3c4:	e0bffa0b 	ldhu	r2,-24(fp)
 181a3c8:	10800404 	addi	r2,r2,16
 181a3cc:	e0fff817 	ldw	r3,-32(fp)
 181a3d0:	1885883a 	add	r2,r3,r2
 181a3d4:	10c000c4 	addi	r3,r2,3
 181a3d8:	00bfff04 	movi	r2,-4
 181a3dc:	1884703a 	and	r2,r3,r2
 181a3e0:	1007883a 	mov	r3,r2
 181a3e4:	e0bff817 	ldw	r2,-32(fp)
 181a3e8:	10c00115 	stw	r3,4(r2)
    p->len = p->tot_len = length;
 181a3ec:	e0bff817 	ldw	r2,-32(fp)
 181a3f0:	e0fffe0b 	ldhu	r3,-8(fp)
 181a3f4:	10c0020d 	sth	r3,8(r2)
 181a3f8:	e0bff817 	ldw	r2,-32(fp)
 181a3fc:	10c0020b 	ldhu	r3,8(r2)
 181a400:	e0bff817 	ldw	r2,-32(fp)
 181a404:	10c0028d 	sth	r3,10(r2)
    p->next = NULL;
 181a408:	e0bff817 	ldw	r2,-32(fp)
 181a40c:	10000015 	stw	zero,0(r2)
    p->type = type;
 181a410:	e0bfff17 	ldw	r2,-4(fp)
 181a414:	1007883a 	mov	r3,r2
 181a418:	e0bff817 	ldw	r2,-32(fp)
 181a41c:	10c00305 	stb	r3,12(r2)

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 181a420:	00001906 	br	181a488 <pbuf_alloc+0x340>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 181a424:	01000344 	movi	r4,13
 181a428:	18340280 	call	1834028 <memp_malloc>
 181a42c:	e0bff815 	stw	r2,-32(fp)
    if (p == NULL) {
 181a430:	e0bff817 	ldw	r2,-32(fp)
 181a434:	1000021e 	bne	r2,zero,181a440 <pbuf_alloc+0x2f8>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 181a438:	0005883a 	mov	r2,zero
 181a43c:	00001806 	br	181a4a0 <pbuf_alloc+0x358>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 181a440:	e0bff817 	ldw	r2,-32(fp)
 181a444:	10000115 	stw	zero,4(r2)
    p->len = p->tot_len = length;
 181a448:	e0bff817 	ldw	r2,-32(fp)
 181a44c:	e0fffe0b 	ldhu	r3,-8(fp)
 181a450:	10c0020d 	sth	r3,8(r2)
 181a454:	e0bff817 	ldw	r2,-32(fp)
 181a458:	10c0020b 	ldhu	r3,8(r2)
 181a45c:	e0bff817 	ldw	r2,-32(fp)
 181a460:	10c0028d 	sth	r3,10(r2)
    p->next = NULL;
 181a464:	e0bff817 	ldw	r2,-32(fp)
 181a468:	10000015 	stw	zero,0(r2)
    p->type = type;
 181a46c:	e0bfff17 	ldw	r2,-4(fp)
 181a470:	1007883a 	mov	r3,r2
 181a474:	e0bff817 	ldw	r2,-32(fp)
 181a478:	10c00305 	stb	r3,12(r2)
    break;
 181a47c:	00000206 	br	181a488 <pbuf_alloc+0x340>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 181a480:	0005883a 	mov	r2,zero
 181a484:	00000606 	br	181a4a0 <pbuf_alloc+0x358>
  }
  /* set reference count */
  p->ref = 1;
 181a488:	e0bff817 	ldw	r2,-32(fp)
 181a48c:	00c00044 	movi	r3,1
 181a490:	10c0038d 	sth	r3,14(r2)
  /* set flags */
  p->flags = 0;
 181a494:	e0bff817 	ldw	r2,-32(fp)
 181a498:	10000345 	stb	zero,13(r2)
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 181a49c:	e0bff817 	ldw	r2,-32(fp)
}
 181a4a0:	e037883a 	mov	sp,fp
 181a4a4:	dfc00117 	ldw	ra,4(sp)
 181a4a8:	df000017 	ldw	fp,0(sp)
 181a4ac:	dec00204 	addi	sp,sp,8
 181a4b0:	f800283a 	ret

0181a4b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 181a4b4:	defff904 	addi	sp,sp,-28
 181a4b8:	df000615 	stw	fp,24(sp)
 181a4bc:	df000604 	addi	fp,sp,24
 181a4c0:	e13ffb15 	stw	r4,-20(fp)
 181a4c4:	2807883a 	mov	r3,r5
 181a4c8:	e1bffd15 	stw	r6,-12(fp)
 181a4cc:	e1fffe15 	stw	r7,-8(fp)
 181a4d0:	e0800217 	ldw	r2,8(fp)
 181a4d4:	e0fffc0d 	sth	r3,-16(fp)
 181a4d8:	e0bfff0d 	sth	r2,-4(fp)
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 181a4dc:	e0bffb17 	ldw	r2,-20(fp)
 181a4e0:	10c00060 	cmpeqi	r3,r2,1
 181a4e4:	1800091e 	bne	r3,zero,181a50c <pbuf_alloced_custom+0x58>
 181a4e8:	0080052e 	bgeu	zero,r2,181a500 <pbuf_alloced_custom+0x4c>
 181a4ec:	10c000a0 	cmpeqi	r3,r2,2
 181a4f0:	1800091e 	bne	r3,zero,181a518 <pbuf_alloced_custom+0x64>
 181a4f4:	108000e0 	cmpeqi	r2,r2,3
 181a4f8:	10000a1e 	bne	r2,zero,181a524 <pbuf_alloced_custom+0x70>
 181a4fc:	00000b06 	br	181a52c <pbuf_alloced_custom+0x78>
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 181a500:	00800e04 	movi	r2,56
 181a504:	e0bffa0d 	sth	r2,-24(fp)
    break;
 181a508:	00000a06 	br	181a534 <pbuf_alloced_custom+0x80>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 181a50c:	00800904 	movi	r2,36
 181a510:	e0bffa0d 	sth	r2,-24(fp)
    break;
 181a514:	00000706 	br	181a534 <pbuf_alloced_custom+0x80>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 181a518:	00800404 	movi	r2,16
 181a51c:	e0bffa0d 	sth	r2,-24(fp)
    break;
 181a520:	00000406 	br	181a534 <pbuf_alloced_custom+0x80>
  case PBUF_RAW:
    offset = 0;
 181a524:	e03ffa0d 	sth	zero,-24(fp)
    break;
 181a528:	00000206 	br	181a534 <pbuf_alloced_custom+0x80>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
 181a52c:	0005883a 	mov	r2,zero
 181a530:	00002c06 	br	181a5e4 <pbuf_alloced_custom+0x130>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 181a534:	e0bffa0b 	ldhu	r2,-24(fp)
 181a538:	10c000c4 	addi	r3,r2,3
 181a53c:	00bfff04 	movi	r2,-4
 181a540:	1886703a 	and	r3,r3,r2
 181a544:	e0bffc0b 	ldhu	r2,-16(fp)
 181a548:	1885883a 	add	r2,r3,r2
 181a54c:	e0ffff0b 	ldhu	r3,-4(fp)
 181a550:	1880020e 	bge	r3,r2,181a55c <pbuf_alloced_custom+0xa8>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 181a554:	0005883a 	mov	r2,zero
 181a558:	00002206 	br	181a5e4 <pbuf_alloced_custom+0x130>
  }

  p->pbuf.next = NULL;
 181a55c:	e0bffe17 	ldw	r2,-8(fp)
 181a560:	10000015 	stw	zero,0(r2)
  if (payload_mem != NULL) {
 181a564:	e0800117 	ldw	r2,4(fp)
 181a568:	10000a26 	beq	r2,zero,181a594 <pbuf_alloced_custom+0xe0>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 181a56c:	e0bffa0b 	ldhu	r2,-24(fp)
 181a570:	108000c4 	addi	r2,r2,3
 181a574:	1007883a 	mov	r3,r2
 181a578:	00bfff04 	movi	r2,-4
 181a57c:	1884703a 	and	r2,r3,r2
 181a580:	e0c00117 	ldw	r3,4(fp)
 181a584:	1887883a 	add	r3,r3,r2
 181a588:	e0bffe17 	ldw	r2,-8(fp)
 181a58c:	10c00115 	stw	r3,4(r2)
 181a590:	00000206 	br	181a59c <pbuf_alloced_custom+0xe8>
  } else {
    p->pbuf.payload = NULL;
 181a594:	e0bffe17 	ldw	r2,-8(fp)
 181a598:	10000115 	stw	zero,4(r2)
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 181a59c:	e0bffe17 	ldw	r2,-8(fp)
 181a5a0:	00c00084 	movi	r3,2
 181a5a4:	10c00345 	stb	r3,13(r2)
  p->pbuf.len = p->pbuf.tot_len = length;
 181a5a8:	e0bffe17 	ldw	r2,-8(fp)
 181a5ac:	e0fffc0b 	ldhu	r3,-16(fp)
 181a5b0:	10c0020d 	sth	r3,8(r2)
 181a5b4:	e0bffe17 	ldw	r2,-8(fp)
 181a5b8:	10c0020b 	ldhu	r3,8(r2)
 181a5bc:	e0bffe17 	ldw	r2,-8(fp)
 181a5c0:	10c0028d 	sth	r3,10(r2)
  p->pbuf.type = type;
 181a5c4:	e0bffd17 	ldw	r2,-12(fp)
 181a5c8:	1007883a 	mov	r3,r2
 181a5cc:	e0bffe17 	ldw	r2,-8(fp)
 181a5d0:	10c00305 	stb	r3,12(r2)
  p->pbuf.ref = 1;
 181a5d4:	e0bffe17 	ldw	r2,-8(fp)
 181a5d8:	00c00044 	movi	r3,1
 181a5dc:	10c0038d 	sth	r3,14(r2)
  return &p->pbuf;
 181a5e0:	e0bffe17 	ldw	r2,-8(fp)
}
 181a5e4:	e037883a 	mov	sp,fp
 181a5e8:	df000017 	ldw	fp,0(sp)
 181a5ec:	dec00104 	addi	sp,sp,4
 181a5f0:	f800283a 	ret

0181a5f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 181a5f4:	defff904 	addi	sp,sp,-28
 181a5f8:	dfc00615 	stw	ra,24(sp)
 181a5fc:	df000515 	stw	fp,20(sp)
 181a600:	df000504 	addi	fp,sp,20
 181a604:	e13ffe15 	stw	r4,-8(fp)
 181a608:	2805883a 	mov	r2,r5
 181a60c:	e0bfff0d 	sth	r2,-4(fp)
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 181a610:	e0bffe17 	ldw	r2,-8(fp)
 181a614:	1080020b 	ldhu	r2,8(r2)
 181a618:	10bfffcc 	andi	r2,r2,65535
 181a61c:	e0ffff0b 	ldhu	r3,-4(fp)
 181a620:	1880462e 	bgeu	r3,r2,181a73c <pbuf_realloc+0x148>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 181a624:	e0ffff0b 	ldhu	r3,-4(fp)
 181a628:	e0bffe17 	ldw	r2,-8(fp)
 181a62c:	1080020b 	ldhu	r2,8(r2)
 181a630:	10bfffcc 	andi	r2,r2,65535
 181a634:	1885c83a 	sub	r2,r3,r2
 181a638:	e0bffd15 	stw	r2,-12(fp)

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 181a63c:	e0bfff0b 	ldhu	r2,-4(fp)
 181a640:	e0bffc0d 	sth	r2,-16(fp)
  q = p;
 181a644:	e0bffe17 	ldw	r2,-8(fp)
 181a648:	e0bffb15 	stw	r2,-20(fp)
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 181a64c:	00000f06 	br	181a68c <pbuf_realloc+0x98>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 181a650:	e0bffb17 	ldw	r2,-20(fp)
 181a654:	1080028b 	ldhu	r2,10(r2)
 181a658:	e0fffc0b 	ldhu	r3,-16(fp)
 181a65c:	1885c83a 	sub	r2,r3,r2
 181a660:	e0bffc0d 	sth	r2,-16(fp)
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 181a664:	e0bffb17 	ldw	r2,-20(fp)
 181a668:	1080020b 	ldhu	r2,8(r2)
 181a66c:	e0fffd17 	ldw	r3,-12(fp)
 181a670:	10c5883a 	add	r2,r2,r3
 181a674:	1007883a 	mov	r3,r2
 181a678:	e0bffb17 	ldw	r2,-20(fp)
 181a67c:	10c0020d 	sth	r3,8(r2)
    /* proceed to next pbuf in chain */
    q = q->next;
 181a680:	e0bffb17 	ldw	r2,-20(fp)
 181a684:	10800017 	ldw	r2,0(r2)
 181a688:	e0bffb15 	stw	r2,-20(fp)

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 181a68c:	e0bffb17 	ldw	r2,-20(fp)
 181a690:	1080028b 	ldhu	r2,10(r2)
 181a694:	10ffffcc 	andi	r3,r2,65535
 181a698:	e0bffc0b 	ldhu	r2,-16(fp)
 181a69c:	18bfec36 	bltu	r3,r2,181a650 <__alt_mem_mem_0+0xff7fa650>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
 181a6a0:	e0bffb17 	ldw	r2,-20(fp)
 181a6a4:	10800303 	ldbu	r2,12(r2)
 181a6a8:	10803fcc 	andi	r2,r2,255
 181a6ac:	1000121e 	bne	r2,zero,181a6f8 <pbuf_realloc+0x104>
 181a6b0:	e0bffb17 	ldw	r2,-20(fp)
 181a6b4:	1080028b 	ldhu	r2,10(r2)
 181a6b8:	10ffffcc 	andi	r3,r2,65535
 181a6bc:	e0bffc0b 	ldhu	r2,-16(fp)
 181a6c0:	18800d26 	beq	r3,r2,181a6f8 <pbuf_realloc+0x104>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 181a6c4:	e0bffb17 	ldw	r2,-20(fp)
 181a6c8:	10800117 	ldw	r2,4(r2)
 181a6cc:	1007883a 	mov	r3,r2
 181a6d0:	e0bffb17 	ldw	r2,-20(fp)
 181a6d4:	1885c83a 	sub	r2,r3,r2
 181a6d8:	1007883a 	mov	r3,r2
 181a6dc:	e0bffc0b 	ldhu	r2,-16(fp)
 181a6e0:	1885883a 	add	r2,r3,r2
 181a6e4:	10bfffcc 	andi	r2,r2,65535
 181a6e8:	100b883a 	mov	r5,r2
 181a6ec:	e13ffb17 	ldw	r4,-20(fp)
 181a6f0:	18191880 	call	1819188 <mem_trim>
 181a6f4:	e0bffb15 	stw	r2,-20(fp)
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 181a6f8:	e0bffb17 	ldw	r2,-20(fp)
 181a6fc:	e0fffc0b 	ldhu	r3,-16(fp)
 181a700:	10c0028d 	sth	r3,10(r2)
  q->tot_len = q->len;
 181a704:	e0bffb17 	ldw	r2,-20(fp)
 181a708:	10c0028b 	ldhu	r3,10(r2)
 181a70c:	e0bffb17 	ldw	r2,-20(fp)
 181a710:	10c0020d 	sth	r3,8(r2)

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 181a714:	e0bffb17 	ldw	r2,-20(fp)
 181a718:	10800017 	ldw	r2,0(r2)
 181a71c:	10000426 	beq	r2,zero,181a730 <pbuf_realloc+0x13c>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 181a720:	e0bffb17 	ldw	r2,-20(fp)
 181a724:	10800017 	ldw	r2,0(r2)
 181a728:	1009883a 	mov	r4,r2
 181a72c:	181a9040 	call	181a904 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 181a730:	e0bffb17 	ldw	r2,-20(fp)
 181a734:	10000015 	stw	zero,0(r2)
 181a738:	00000106 	br	181a740 <pbuf_realloc+0x14c>
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
    /* enlarging not yet supported */
    return;
 181a73c:	0001883a 	nop
    pbuf_free(q->next);
  }
  /* q is last packet in chain */
  q->next = NULL;

}
 181a740:	e037883a 	mov	sp,fp
 181a744:	dfc00117 	ldw	ra,4(sp)
 181a748:	df000017 	ldw	fp,0(sp)
 181a74c:	dec00204 	addi	sp,sp,8
 181a750:	f800283a 	ret

0181a754 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 181a754:	defffa04 	addi	sp,sp,-24
 181a758:	dfc00515 	stw	ra,20(sp)
 181a75c:	df000415 	stw	fp,16(sp)
 181a760:	df000404 	addi	fp,sp,16
 181a764:	e13ffe15 	stw	r4,-8(fp)
 181a768:	2805883a 	mov	r2,r5
 181a76c:	e0bfff0d 	sth	r2,-4(fp)
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 181a770:	e0bfff0f 	ldh	r2,-4(fp)
 181a774:	10000226 	beq	r2,zero,181a780 <pbuf_header+0x2c>
 181a778:	e0bffe17 	ldw	r2,-8(fp)
 181a77c:	1000021e 	bne	r2,zero,181a788 <pbuf_header+0x34>
    return 0;
 181a780:	0005883a 	mov	r2,zero
 181a784:	00005a06 	br	181a8f0 <pbuf_header+0x19c>
  }
 
  if (header_size_increment < 0){
 181a788:	e0bfff0f 	ldh	r2,-4(fp)
 181a78c:	1000110e 	bge	r2,zero,181a7d4 <pbuf_header+0x80>
    increment_magnitude = -header_size_increment;
 181a790:	e0bfff0b 	ldhu	r2,-4(fp)
 181a794:	0085c83a 	sub	r2,zero,r2
 181a798:	e0bffc0d 	sth	r2,-16(fp)
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 181a79c:	e0bffe17 	ldw	r2,-8(fp)
 181a7a0:	1080028b 	ldhu	r2,10(r2)
 181a7a4:	10ffffcc 	andi	r3,r2,65535
 181a7a8:	e0bffc0b 	ldhu	r2,-16(fp)
 181a7ac:	18800b2e 	bgeu	r3,r2,181a7dc <pbuf_header+0x88>
 181a7b0:	01c06134 	movhi	r7,388
 181a7b4:	39c3ed04 	addi	r7,r7,4020
 181a7b8:	01808344 	movi	r6,525
 181a7bc:	01406134 	movhi	r5,388
 181a7c0:	2943f304 	addi	r5,r5,4044
 181a7c4:	01006134 	movhi	r4,388
 181a7c8:	2103fb04 	addi	r4,r4,4076
 181a7cc:	1800bd80 	call	1800bd8 <printf>
 181a7d0:	003fff06 	br	181a7d0 <__alt_mem_mem_0+0xff7fa7d0>
  } else {
    increment_magnitude = header_size_increment;
 181a7d4:	e0bfff0b 	ldhu	r2,-4(fp)
 181a7d8:	e0bffc0d 	sth	r2,-16(fp)
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 181a7dc:	e0bffe17 	ldw	r2,-8(fp)
 181a7e0:	10800303 	ldbu	r2,12(r2)
 181a7e4:	10803fcc 	andi	r2,r2,255
 181a7e8:	e0bffc8d 	sth	r2,-14(fp)
  /* remember current payload pointer */
  payload = p->payload;
 181a7ec:	e0bffe17 	ldw	r2,-8(fp)
 181a7f0:	10800117 	ldw	r2,4(r2)
 181a7f4:	e0bffd15 	stw	r2,-12(fp)

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 181a7f8:	e0bffc8b 	ldhu	r2,-14(fp)
 181a7fc:	10000326 	beq	r2,zero,181a80c <pbuf_header+0xb8>
 181a800:	e0bffc8b 	ldhu	r2,-14(fp)
 181a804:	108000d8 	cmpnei	r2,r2,3
 181a808:	1000111e 	bne	r2,zero,181a850 <pbuf_header+0xfc>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 181a80c:	e0bffe17 	ldw	r2,-8(fp)
 181a810:	10c00117 	ldw	r3,4(r2)
 181a814:	e0bfff0f 	ldh	r2,-4(fp)
 181a818:	0085c83a 	sub	r2,zero,r2
 181a81c:	1887883a 	add	r3,r3,r2
 181a820:	e0bffe17 	ldw	r2,-8(fp)
 181a824:	10c00115 	stw	r3,4(r2)
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 181a828:	e0bffe17 	ldw	r2,-8(fp)
 181a82c:	10c00117 	ldw	r3,4(r2)
 181a830:	e0bffe17 	ldw	r2,-8(fp)
 181a834:	10800404 	addi	r2,r2,16
 181a838:	18801e2e 	bgeu	r3,r2,181a8b4 <pbuf_header+0x160>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
 181a83c:	e0bffe17 	ldw	r2,-8(fp)
 181a840:	e0fffd17 	ldw	r3,-12(fp)
 181a844:	10c00115 	stw	r3,4(r2)
      /* bail out unsuccesfully */
      return 1;
 181a848:	00800044 	movi	r2,1
 181a84c:	00002806 	br	181a8f0 <pbuf_header+0x19c>
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 181a850:	e0bffc8b 	ldhu	r2,-14(fp)
 181a854:	108000a0 	cmpeqi	r2,r2,2
 181a858:	1000031e 	bne	r2,zero,181a868 <pbuf_header+0x114>
 181a85c:	e0bffc8b 	ldhu	r2,-14(fp)
 181a860:	10800058 	cmpnei	r2,r2,1
 181a864:	1000111e 	bne	r2,zero,181a8ac <pbuf_header+0x158>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 181a868:	e0bfff0f 	ldh	r2,-4(fp)
 181a86c:	10000d0e 	bge	r2,zero,181a8a4 <pbuf_header+0x150>
 181a870:	e0bffe17 	ldw	r2,-8(fp)
 181a874:	1080028b 	ldhu	r2,10(r2)
 181a878:	10ffffcc 	andi	r3,r2,65535
 181a87c:	e0bffc0b 	ldhu	r2,-16(fp)
 181a880:	18800836 	bltu	r3,r2,181a8a4 <pbuf_header+0x150>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 181a884:	e0bffe17 	ldw	r2,-8(fp)
 181a888:	10c00117 	ldw	r3,4(r2)
 181a88c:	e0bfff0f 	ldh	r2,-4(fp)
 181a890:	0085c83a 	sub	r2,zero,r2
 181a894:	1887883a 	add	r3,r3,r2
 181a898:	e0bffe17 	ldw	r2,-8(fp)
 181a89c:	10c00115 	stw	r3,4(r2)
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 181a8a0:	00000406 	br	181a8b4 <pbuf_header+0x160>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
 181a8a4:	00800044 	movi	r2,1
 181a8a8:	00001106 	br	181a8f0 <pbuf_header+0x19c>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
 181a8ac:	00800044 	movi	r2,1
 181a8b0:	00000f06 	br	181a8f0 <pbuf_header+0x19c>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 181a8b4:	e0bffe17 	ldw	r2,-8(fp)
 181a8b8:	10c0028b 	ldhu	r3,10(r2)
 181a8bc:	e0bfff0b 	ldhu	r2,-4(fp)
 181a8c0:	1885883a 	add	r2,r3,r2
 181a8c4:	1007883a 	mov	r3,r2
 181a8c8:	e0bffe17 	ldw	r2,-8(fp)
 181a8cc:	10c0028d 	sth	r3,10(r2)
  p->tot_len += header_size_increment;
 181a8d0:	e0bffe17 	ldw	r2,-8(fp)
 181a8d4:	10c0020b 	ldhu	r3,8(r2)
 181a8d8:	e0bfff0b 	ldhu	r2,-4(fp)
 181a8dc:	1885883a 	add	r2,r3,r2
 181a8e0:	1007883a 	mov	r3,r2
 181a8e4:	e0bffe17 	ldw	r2,-8(fp)
 181a8e8:	10c0020d 	sth	r3,8(r2)

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 181a8ec:	0005883a 	mov	r2,zero
}
 181a8f0:	e037883a 	mov	sp,fp
 181a8f4:	dfc00117 	ldw	ra,4(sp)
 181a8f8:	df000017 	ldw	fp,0(sp)
 181a8fc:	dec00204 	addi	sp,sp,8
 181a900:	f800283a 	ret

0181a904 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 181a904:	defff904 	addi	sp,sp,-28
 181a908:	dfc00615 	stw	ra,24(sp)
 181a90c:	df000515 	stw	fp,20(sp)
 181a910:	df000504 	addi	fp,sp,20
 181a914:	e13fff15 	stw	r4,-4(fp)
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 181a918:	e0bfff17 	ldw	r2,-4(fp)
 181a91c:	1000021e 	bne	r2,zero,181a928 <pbuf_free+0x24>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 181a920:	0005883a 	mov	r2,zero
 181a924:	00003f06 	br	181aa24 <pbuf_free+0x120>

  LWIP_ASSERT("pbuf_free: sane type",
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 181a928:	e03ffb05 	stb	zero,-20(fp)
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 181a92c:	00003a06 	br	181aa18 <pbuf_free+0x114>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 181a930:	1810de40 	call	1810de4 <vTaskEnterCritical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 181a934:	e0bfff17 	ldw	r2,-4(fp)
 181a938:	1080038b 	ldhu	r2,14(r2)
 181a93c:	10bfffc4 	addi	r2,r2,-1
 181a940:	1007883a 	mov	r3,r2
 181a944:	e0bfff17 	ldw	r2,-4(fp)
 181a948:	10c0038d 	sth	r3,14(r2)
 181a94c:	e0bfff17 	ldw	r2,-4(fp)
 181a950:	1080038b 	ldhu	r2,14(r2)
 181a954:	e0bffb8d 	sth	r2,-18(fp)
    SYS_ARCH_UNPROTECT(old_level);
 181a958:	1810e380 	call	1810e38 <vTaskExitCritical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 181a95c:	e0bffb8b 	ldhu	r2,-18(fp)
 181a960:	10002c1e 	bne	r2,zero,181aa14 <pbuf_free+0x110>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 181a964:	e0bfff17 	ldw	r2,-4(fp)
 181a968:	10800017 	ldw	r2,0(r2)
 181a96c:	e0bffc15 	stw	r2,-16(fp)
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 181a970:	e0bfff17 	ldw	r2,-4(fp)
 181a974:	10800303 	ldbu	r2,12(r2)
 181a978:	10803fcc 	andi	r2,r2,255
 181a97c:	e0bffd0d 	sth	r2,-12(fp)
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 181a980:	e0bfff17 	ldw	r2,-4(fp)
 181a984:	10800343 	ldbu	r2,13(r2)
 181a988:	10803fcc 	andi	r2,r2,255
 181a98c:	1080008c 	andi	r2,r2,2
 181a990:	10000726 	beq	r2,zero,181a9b0 <pbuf_free+0xac>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 181a994:	e0bfff17 	ldw	r2,-4(fp)
 181a998:	e0bffe15 	stw	r2,-8(fp)
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 181a99c:	e0bffe17 	ldw	r2,-8(fp)
 181a9a0:	10800417 	ldw	r2,16(r2)
 181a9a4:	e13fff17 	ldw	r4,-4(fp)
 181a9a8:	103ee83a 	callr	r2
 181a9ac:	00001306 	br	181a9fc <pbuf_free+0xf8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 181a9b0:	e0bffd0b 	ldhu	r2,-12(fp)
 181a9b4:	108000d8 	cmpnei	r2,r2,3
 181a9b8:	1000041e 	bne	r2,zero,181a9cc <pbuf_free+0xc8>
          memp_free(MEMP_PBUF_POOL, p);
 181a9bc:	e17fff17 	ldw	r5,-4(fp)
 181a9c0:	01000384 	movi	r4,14
 181a9c4:	18341e40 	call	18341e4 <memp_free>
 181a9c8:	00000c06 	br	181a9fc <pbuf_free+0xf8>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 181a9cc:	e0bffd0b 	ldhu	r2,-12(fp)
 181a9d0:	10800060 	cmpeqi	r2,r2,1
 181a9d4:	1000031e 	bne	r2,zero,181a9e4 <pbuf_free+0xe0>
 181a9d8:	e0bffd0b 	ldhu	r2,-12(fp)
 181a9dc:	10800098 	cmpnei	r2,r2,2
 181a9e0:	1000041e 	bne	r2,zero,181a9f4 <pbuf_free+0xf0>
          memp_free(MEMP_PBUF, p);
 181a9e4:	e17fff17 	ldw	r5,-4(fp)
 181a9e8:	01000344 	movi	r4,13
 181a9ec:	18341e40 	call	18341e4 <memp_free>
 181a9f0:	00000206 	br	181a9fc <pbuf_free+0xf8>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 181a9f4:	e13fff17 	ldw	r4,-4(fp)
 181a9f8:	18190940 	call	1819094 <mem_free>
        }
      }
      count++;
 181a9fc:	e0bffb03 	ldbu	r2,-20(fp)
 181aa00:	10800044 	addi	r2,r2,1
 181aa04:	e0bffb05 	stb	r2,-20(fp)
      /* proceed to next pbuf */
      p = q;
 181aa08:	e0bffc17 	ldw	r2,-16(fp)
 181aa0c:	e0bfff15 	stw	r2,-4(fp)
 181aa10:	00000106 	br	181aa18 <pbuf_free+0x114>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 181aa14:	e03fff15 	stw	zero,-4(fp)
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 181aa18:	e0bfff17 	ldw	r2,-4(fp)
 181aa1c:	103fc41e 	bne	r2,zero,181a930 <__alt_mem_mem_0+0xff7fa930>
      p = NULL;
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 181aa20:	e0bffb03 	ldbu	r2,-20(fp)
}
 181aa24:	e037883a 	mov	sp,fp
 181aa28:	dfc00117 	ldw	ra,4(sp)
 181aa2c:	df000017 	ldw	fp,0(sp)
 181aa30:	dec00204 	addi	sp,sp,8
 181aa34:	f800283a 	ret

0181aa38 <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
 181aa38:	defffd04 	addi	sp,sp,-12
 181aa3c:	df000215 	stw	fp,8(sp)
 181aa40:	df000204 	addi	fp,sp,8
 181aa44:	e13fff15 	stw	r4,-4(fp)
  u8_t len;

  len = 0;
 181aa48:	e03ffe05 	stb	zero,-8(fp)
  while (p != NULL) {
 181aa4c:	00000606 	br	181aa68 <pbuf_clen+0x30>
    ++len;
 181aa50:	e0bffe03 	ldbu	r2,-8(fp)
 181aa54:	10800044 	addi	r2,r2,1
 181aa58:	e0bffe05 	stb	r2,-8(fp)
    p = p->next;
 181aa5c:	e0bfff17 	ldw	r2,-4(fp)
 181aa60:	10800017 	ldw	r2,0(r2)
 181aa64:	e0bfff15 	stw	r2,-4(fp)
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
 181aa68:	e0bfff17 	ldw	r2,-4(fp)
 181aa6c:	103ff81e 	bne	r2,zero,181aa50 <__alt_mem_mem_0+0xff7faa50>
    ++len;
    p = p->next;
  }
  return len;
 181aa70:	e0bffe03 	ldbu	r2,-8(fp)
}
 181aa74:	e037883a 	mov	sp,fp
 181aa78:	df000017 	ldw	fp,0(sp)
 181aa7c:	dec00104 	addi	sp,sp,4
 181aa80:	f800283a 	ret

0181aa84 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 181aa84:	defffd04 	addi	sp,sp,-12
 181aa88:	dfc00215 	stw	ra,8(sp)
 181aa8c:	df000115 	stw	fp,4(sp)
 181aa90:	df000104 	addi	fp,sp,4
 181aa94:	e13fff15 	stw	r4,-4(fp)
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 181aa98:	e0bfff17 	ldw	r2,-4(fp)
 181aa9c:	10000826 	beq	r2,zero,181aac0 <pbuf_ref+0x3c>
    SYS_ARCH_PROTECT(old_level);
 181aaa0:	1810de40 	call	1810de4 <vTaskEnterCritical>
    ++(p->ref);
 181aaa4:	e0bfff17 	ldw	r2,-4(fp)
 181aaa8:	1080038b 	ldhu	r2,14(r2)
 181aaac:	10800044 	addi	r2,r2,1
 181aab0:	1007883a 	mov	r3,r2
 181aab4:	e0bfff17 	ldw	r2,-4(fp)
 181aab8:	10c0038d 	sth	r3,14(r2)
    SYS_ARCH_UNPROTECT(old_level);
 181aabc:	1810e380 	call	1810e38 <vTaskExitCritical>
  }
}
 181aac0:	0001883a 	nop
 181aac4:	e037883a 	mov	sp,fp
 181aac8:	dfc00117 	ldw	ra,4(sp)
 181aacc:	df000017 	ldw	fp,0(sp)
 181aad0:	dec00204 	addi	sp,sp,8
 181aad4:	f800283a 	ret

0181aad8 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 181aad8:	defffb04 	addi	sp,sp,-20
 181aadc:	dfc00415 	stw	ra,16(sp)
 181aae0:	df000315 	stw	fp,12(sp)
 181aae4:	df000304 	addi	fp,sp,12
 181aae8:	e13ffe15 	stw	r4,-8(fp)
 181aaec:	e17fff15 	stw	r5,-4(fp)
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 181aaf0:	e0bffe17 	ldw	r2,-8(fp)
 181aaf4:	10000226 	beq	r2,zero,181ab00 <pbuf_cat+0x28>
 181aaf8:	e0bfff17 	ldw	r2,-4(fp)
 181aafc:	1000091e 	bne	r2,zero,181ab24 <pbuf_cat+0x4c>
 181ab00:	01c06134 	movhi	r7,388
 181ab04:	39c3ed04 	addi	r7,r7,4020
 181ab08:	0180bb84 	movi	r6,750
 181ab0c:	01406134 	movhi	r5,388
 181ab10:	29440704 	addi	r5,r5,4124
 181ab14:	01006134 	movhi	r4,388
 181ab18:	2103fb04 	addi	r4,r4,4076
 181ab1c:	1800bd80 	call	1800bd8 <printf>
 181ab20:	003fff06 	br	181ab20 <__alt_mem_mem_0+0xff7fab20>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 181ab24:	e0bffe17 	ldw	r2,-8(fp)
 181ab28:	e0bffd15 	stw	r2,-12(fp)
 181ab2c:	00000b06 	br	181ab5c <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 181ab30:	e0bffd17 	ldw	r2,-12(fp)
 181ab34:	10c0020b 	ldhu	r3,8(r2)
 181ab38:	e0bfff17 	ldw	r2,-4(fp)
 181ab3c:	1080020b 	ldhu	r2,8(r2)
 181ab40:	1885883a 	add	r2,r3,r2
 181ab44:	1007883a 	mov	r3,r2
 181ab48:	e0bffd17 	ldw	r2,-12(fp)
 181ab4c:	10c0020d 	sth	r3,8(r2)

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 181ab50:	e0bffd17 	ldw	r2,-12(fp)
 181ab54:	10800017 	ldw	r2,0(r2)
 181ab58:	e0bffd15 	stw	r2,-12(fp)
 181ab5c:	e0bffd17 	ldw	r2,-12(fp)
 181ab60:	10800017 	ldw	r2,0(r2)
 181ab64:	103ff21e 	bne	r2,zero,181ab30 <__alt_mem_mem_0+0xff7fab30>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 181ab68:	e0bffd17 	ldw	r2,-12(fp)
 181ab6c:	10c0020b 	ldhu	r3,8(r2)
 181ab70:	e0bfff17 	ldw	r2,-4(fp)
 181ab74:	1080020b 	ldhu	r2,8(r2)
 181ab78:	1885883a 	add	r2,r3,r2
 181ab7c:	1007883a 	mov	r3,r2
 181ab80:	e0bffd17 	ldw	r2,-12(fp)
 181ab84:	10c0020d 	sth	r3,8(r2)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 181ab88:	e0bffd17 	ldw	r2,-12(fp)
 181ab8c:	e0ffff17 	ldw	r3,-4(fp)
 181ab90:	10c00015 	stw	r3,0(r2)
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 181ab94:	0001883a 	nop
 181ab98:	e037883a 	mov	sp,fp
 181ab9c:	dfc00117 	ldw	ra,4(sp)
 181aba0:	df000017 	ldw	fp,0(sp)
 181aba4:	dec00204 	addi	sp,sp,8
 181aba8:	f800283a 	ret

0181abac <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 181abac:	defffc04 	addi	sp,sp,-16
 181abb0:	dfc00315 	stw	ra,12(sp)
 181abb4:	df000215 	stw	fp,8(sp)
 181abb8:	df000204 	addi	fp,sp,8
 181abbc:	e13ffe15 	stw	r4,-8(fp)
 181abc0:	e17fff15 	stw	r5,-4(fp)
  pbuf_cat(h, t);
 181abc4:	e17fff17 	ldw	r5,-4(fp)
 181abc8:	e13ffe17 	ldw	r4,-8(fp)
 181abcc:	181aad80 	call	181aad8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 181abd0:	e13fff17 	ldw	r4,-4(fp)
 181abd4:	181aa840 	call	181aa84 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 181abd8:	0001883a 	nop
 181abdc:	e037883a 	mov	sp,fp
 181abe0:	dfc00117 	ldw	ra,4(sp)
 181abe4:	df000017 	ldw	fp,0(sp)
 181abe8:	dec00204 	addi	sp,sp,8
 181abec:	f800283a 	ret

0181abf0 <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
 181abf0:	defffb04 	addi	sp,sp,-20
 181abf4:	dfc00415 	stw	ra,16(sp)
 181abf8:	df000315 	stw	fp,12(sp)
 181abfc:	df000304 	addi	fp,sp,12
 181ac00:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *q;
  u8_t tail_gone = 1;
 181ac04:	00800044 	movi	r2,1
 181ac08:	e0bffd05 	stb	r2,-12(fp)
  /* tail */
  q = p->next;
 181ac0c:	e0bfff17 	ldw	r2,-4(fp)
 181ac10:	10800017 	ldw	r2,0(r2)
 181ac14:	e0bffe15 	stw	r2,-8(fp)
  /* pbuf has successor in chain? */
  if (q != NULL) {
 181ac18:	e0bffe17 	ldw	r2,-8(fp)
 181ac1c:	10001126 	beq	r2,zero,181ac64 <pbuf_dechain+0x74>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
 181ac20:	e0bfff17 	ldw	r2,-4(fp)
 181ac24:	10c0020b 	ldhu	r3,8(r2)
 181ac28:	e0bfff17 	ldw	r2,-4(fp)
 181ac2c:	1080028b 	ldhu	r2,10(r2)
 181ac30:	1885c83a 	sub	r2,r3,r2
 181ac34:	1007883a 	mov	r3,r2
 181ac38:	e0bffe17 	ldw	r2,-8(fp)
 181ac3c:	10c0020d 	sth	r3,8(r2)
    /* decouple pbuf from remainder */
    p->next = NULL;
 181ac40:	e0bfff17 	ldw	r2,-4(fp)
 181ac44:	10000015 	stw	zero,0(r2)
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
 181ac48:	e0bfff17 	ldw	r2,-4(fp)
 181ac4c:	10c0028b 	ldhu	r3,10(r2)
 181ac50:	e0bfff17 	ldw	r2,-4(fp)
 181ac54:	10c0020d 	sth	r3,8(r2)
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
 181ac58:	e13ffe17 	ldw	r4,-8(fp)
 181ac5c:	181a9040 	call	181a904 <pbuf_free>
 181ac60:	e0bffd05 	stb	r2,-12(fp)
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  return ((tail_gone > 0) ? NULL : q);
 181ac64:	e0bffd03 	ldbu	r2,-12(fp)
 181ac68:	1000021e 	bne	r2,zero,181ac74 <pbuf_dechain+0x84>
 181ac6c:	e0bffe17 	ldw	r2,-8(fp)
 181ac70:	00000106 	br	181ac78 <pbuf_dechain+0x88>
 181ac74:	0005883a 	mov	r2,zero
}
 181ac78:	e037883a 	mov	sp,fp
 181ac7c:	dfc00117 	ldw	ra,4(sp)
 181ac80:	df000017 	ldw	fp,0(sp)
 181ac84:	dec00204 	addi	sp,sp,8
 181ac88:	f800283a 	ret

0181ac8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 181ac8c:	defffa04 	addi	sp,sp,-24
 181ac90:	dfc00515 	stw	ra,20(sp)
 181ac94:	df000415 	stw	fp,16(sp)
 181ac98:	df000404 	addi	fp,sp,16
 181ac9c:	e13ffe15 	stw	r4,-8(fp)
 181aca0:	e17fff15 	stw	r5,-4(fp)
  u16_t offset_to=0, offset_from=0, len;
 181aca4:	e03ffc0d 	sth	zero,-16(fp)
 181aca8:	e03ffc8d 	sth	zero,-14(fp)

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 181acac:	e0bffe17 	ldw	r2,-8(fp)
 181acb0:	10000926 	beq	r2,zero,181acd8 <pbuf_copy+0x4c>
 181acb4:	e0bfff17 	ldw	r2,-4(fp)
 181acb8:	10000726 	beq	r2,zero,181acd8 <pbuf_copy+0x4c>
 181acbc:	e0bffe17 	ldw	r2,-8(fp)
 181acc0:	10c0020b 	ldhu	r3,8(r2)
 181acc4:	e0bfff17 	ldw	r2,-4(fp)
 181acc8:	1080020b 	ldhu	r2,8(r2)
 181accc:	18ffffcc 	andi	r3,r3,65535
 181acd0:	10bfffcc 	andi	r2,r2,65535
 181acd4:	1880092e 	bgeu	r3,r2,181acfc <pbuf_copy+0x70>
 181acd8:	01c06134 	movhi	r7,388
 181acdc:	39c3ed04 	addi	r7,r7,4020
 181ace0:	0180d744 	movi	r6,861
 181ace4:	01406134 	movhi	r5,388
 181ace8:	29441504 	addi	r5,r5,4180
 181acec:	01006134 	movhi	r4,388
 181acf0:	2103fb04 	addi	r4,r4,4076
 181acf4:	1800bd80 	call	1800bd8 <printf>
 181acf8:	003fff06 	br	181acf8 <__alt_mem_mem_0+0xff7facf8>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 181acfc:	e0bffe17 	ldw	r2,-8(fp)
 181ad00:	1080028b 	ldhu	r2,10(r2)
 181ad04:	10ffffcc 	andi	r3,r2,65535
 181ad08:	e0bffc0b 	ldhu	r2,-16(fp)
 181ad0c:	1887c83a 	sub	r3,r3,r2
 181ad10:	e0bfff17 	ldw	r2,-4(fp)
 181ad14:	1080028b 	ldhu	r2,10(r2)
 181ad18:	113fffcc 	andi	r4,r2,65535
 181ad1c:	e0bffc8b 	ldhu	r2,-14(fp)
 181ad20:	2085c83a 	sub	r2,r4,r2
 181ad24:	18800616 	blt	r3,r2,181ad40 <pbuf_copy+0xb4>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 181ad28:	e0bfff17 	ldw	r2,-4(fp)
 181ad2c:	10c0028b 	ldhu	r3,10(r2)
 181ad30:	e0bffc8b 	ldhu	r2,-14(fp)
 181ad34:	1885c83a 	sub	r2,r3,r2
 181ad38:	e0bffd0d 	sth	r2,-12(fp)
 181ad3c:	00000506 	br	181ad54 <pbuf_copy+0xc8>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 181ad40:	e0bffe17 	ldw	r2,-8(fp)
 181ad44:	10c0028b 	ldhu	r3,10(r2)
 181ad48:	e0bffc0b 	ldhu	r2,-16(fp)
 181ad4c:	1885c83a 	sub	r2,r3,r2
 181ad50:	e0bffd0d 	sth	r2,-12(fp)
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 181ad54:	e0bffe17 	ldw	r2,-8(fp)
 181ad58:	10c00117 	ldw	r3,4(r2)
 181ad5c:	e0bffc0b 	ldhu	r2,-16(fp)
 181ad60:	1889883a 	add	r4,r3,r2
 181ad64:	e0bfff17 	ldw	r2,-4(fp)
 181ad68:	10c00117 	ldw	r3,4(r2)
 181ad6c:	e0bffc8b 	ldhu	r2,-14(fp)
 181ad70:	1885883a 	add	r2,r3,r2
 181ad74:	e0fffd0b 	ldhu	r3,-12(fp)
 181ad78:	180d883a 	mov	r6,r3
 181ad7c:	100b883a 	mov	r5,r2
 181ad80:	180604c0 	call	180604c <memcpy>
    offset_to += len;
 181ad84:	e0fffc0b 	ldhu	r3,-16(fp)
 181ad88:	e0bffd0b 	ldhu	r2,-12(fp)
 181ad8c:	1885883a 	add	r2,r3,r2
 181ad90:	e0bffc0d 	sth	r2,-16(fp)
    offset_from += len;
 181ad94:	e0fffc8b 	ldhu	r3,-14(fp)
 181ad98:	e0bffd0b 	ldhu	r2,-12(fp)
 181ad9c:	1885883a 	add	r2,r3,r2
 181ada0:	e0bffc8d 	sth	r2,-14(fp)
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 181ada4:	e0bfff17 	ldw	r2,-4(fp)
 181ada8:	1080028b 	ldhu	r2,10(r2)
 181adac:	10bfffcc 	andi	r2,r2,65535
 181adb0:	e0fffc8b 	ldhu	r3,-14(fp)
 181adb4:	18800436 	bltu	r3,r2,181adc8 <pbuf_copy+0x13c>
      /* on to next p_from (if any) */
      offset_from = 0;
 181adb8:	e03ffc8d 	sth	zero,-14(fp)
      p_from = p_from->next;
 181adbc:	e0bfff17 	ldw	r2,-4(fp)
 181adc0:	10800017 	ldw	r2,0(r2)
 181adc4:	e0bfff15 	stw	r2,-4(fp)
    }
    if (offset_to == p_to->len) {
 181adc8:	e0bffe17 	ldw	r2,-8(fp)
 181adcc:	1080028b 	ldhu	r2,10(r2)
 181add0:	10ffffcc 	andi	r3,r2,65535
 181add4:	e0bffc0b 	ldhu	r2,-16(fp)
 181add8:	1880111e 	bne	r3,r2,181ae20 <pbuf_copy+0x194>
      /* on to next p_to (if any) */
      offset_to = 0;
 181addc:	e03ffc0d 	sth	zero,-16(fp)
      p_to = p_to->next;
 181ade0:	e0bffe17 	ldw	r2,-8(fp)
 181ade4:	10800017 	ldw	r2,0(r2)
 181ade8:	e0bffe15 	stw	r2,-8(fp)
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 181adec:	e0bffe17 	ldw	r2,-8(fp)
 181adf0:	10000b1e 	bne	r2,zero,181ae20 <pbuf_copy+0x194>
 181adf4:	e0bfff17 	ldw	r2,-4(fp)
 181adf8:	10000926 	beq	r2,zero,181ae20 <pbuf_copy+0x194>
 181adfc:	01c06134 	movhi	r7,388
 181ae00:	39c3ed04 	addi	r7,r7,4020
 181ae04:	0180de04 	movi	r6,888
 181ae08:	01406134 	movhi	r5,388
 181ae0c:	29442104 	addi	r5,r5,4228
 181ae10:	01006134 	movhi	r4,388
 181ae14:	2103fb04 	addi	r4,r4,4076
 181ae18:	1800bd80 	call	1800bd8 <printf>
 181ae1c:	003fff06 	br	181ae1c <__alt_mem_mem_0+0xff7fae1c>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 181ae20:	e0bfff17 	ldw	r2,-4(fp)
 181ae24:	10001326 	beq	r2,zero,181ae74 <pbuf_copy+0x1e8>
 181ae28:	e0bfff17 	ldw	r2,-4(fp)
 181ae2c:	10c0028b 	ldhu	r3,10(r2)
 181ae30:	e0bfff17 	ldw	r2,-4(fp)
 181ae34:	1080020b 	ldhu	r2,8(r2)
 181ae38:	18ffffcc 	andi	r3,r3,65535
 181ae3c:	10bfffcc 	andi	r2,r2,65535
 181ae40:	18800c1e 	bne	r3,r2,181ae74 <pbuf_copy+0x1e8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 181ae44:	e0bfff17 	ldw	r2,-4(fp)
 181ae48:	10800017 	ldw	r2,0(r2)
 181ae4c:	10000926 	beq	r2,zero,181ae74 <pbuf_copy+0x1e8>
 181ae50:	01c06134 	movhi	r7,388
 181ae54:	39c3ed04 	addi	r7,r7,4020
 181ae58:	0180df84 	movi	r6,894
 181ae5c:	01406134 	movhi	r5,388
 181ae60:	29442504 	addi	r5,r5,4244
 181ae64:	01006134 	movhi	r4,388
 181ae68:	2103fb04 	addi	r4,r4,4076
 181ae6c:	1800bd80 	call	1800bd8 <printf>
 181ae70:	003fff06 	br	181ae70 <__alt_mem_mem_0+0xff7fae70>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 181ae74:	e0bffe17 	ldw	r2,-8(fp)
 181ae78:	10001326 	beq	r2,zero,181aec8 <pbuf_copy+0x23c>
 181ae7c:	e0bffe17 	ldw	r2,-8(fp)
 181ae80:	10c0028b 	ldhu	r3,10(r2)
 181ae84:	e0bffe17 	ldw	r2,-8(fp)
 181ae88:	1080020b 	ldhu	r2,8(r2)
 181ae8c:	18ffffcc 	andi	r3,r3,65535
 181ae90:	10bfffcc 	andi	r2,r2,65535
 181ae94:	18800c1e 	bne	r3,r2,181aec8 <pbuf_copy+0x23c>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 181ae98:	e0bffe17 	ldw	r2,-8(fp)
 181ae9c:	10800017 	ldw	r2,0(r2)
 181aea0:	10000926 	beq	r2,zero,181aec8 <pbuf_copy+0x23c>
 181aea4:	01c06134 	movhi	r7,388
 181aea8:	39c3ed04 	addi	r7,r7,4020
 181aeac:	0180e0c4 	movi	r6,899
 181aeb0:	01406134 	movhi	r5,388
 181aeb4:	29442504 	addi	r5,r5,4244
 181aeb8:	01006134 	movhi	r4,388
 181aebc:	2103fb04 	addi	r4,r4,4076
 181aec0:	1800bd80 	call	1800bd8 <printf>
 181aec4:	003fff06 	br	181aec4 <__alt_mem_mem_0+0xff7faec4>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 181aec8:	e0bfff17 	ldw	r2,-4(fp)
 181aecc:	103f8b1e 	bne	r2,zero,181acfc <__alt_mem_mem_0+0xff7facfc>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 181aed0:	0005883a 	mov	r2,zero
}
 181aed4:	e037883a 	mov	sp,fp
 181aed8:	dfc00117 	ldw	ra,4(sp)
 181aedc:	df000017 	ldw	fp,0(sp)
 181aee0:	dec00204 	addi	sp,sp,8
 181aee4:	f800283a 	ret

0181aee8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 181aee8:	defff704 	addi	sp,sp,-36
 181aeec:	dfc00815 	stw	ra,32(sp)
 181aef0:	df000715 	stw	fp,28(sp)
 181aef4:	df000704 	addi	fp,sp,28
 181aef8:	e13ffc15 	stw	r4,-16(fp)
 181aefc:	e17ffd15 	stw	r5,-12(fp)
 181af00:	3007883a 	mov	r3,r6
 181af04:	3805883a 	mov	r2,r7
 181af08:	e0fffe0d 	sth	r3,-8(fp)
 181af0c:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 181af10:	e03ffb0d 	sth	zero,-20(fp)

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 181af14:	e0bffc17 	ldw	r2,-16(fp)
 181af18:	1000091e 	bne	r2,zero,181af40 <pbuf_copy_partial+0x58>
 181af1c:	01c06134 	movhi	r7,388
 181af20:	39c3ed04 	addi	r7,r7,4020
 181af24:	0180e744 	movi	r6,925
 181af28:	01406134 	movhi	r5,388
 181af2c:	29443004 	addi	r5,r5,4288
 181af30:	01006134 	movhi	r4,388
 181af34:	2103fb04 	addi	r4,r4,4076
 181af38:	1800bd80 	call	1800bd8 <printf>
 181af3c:	003fff06 	br	181af3c <__alt_mem_mem_0+0xff7faf3c>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 181af40:	e0bffd17 	ldw	r2,-12(fp)
 181af44:	1000091e 	bne	r2,zero,181af6c <pbuf_copy_partial+0x84>
 181af48:	01c06134 	movhi	r7,388
 181af4c:	39c3ed04 	addi	r7,r7,4020
 181af50:	0180e784 	movi	r6,926
 181af54:	01406134 	movhi	r5,388
 181af58:	29443804 	addi	r5,r5,4320
 181af5c:	01006134 	movhi	r4,388
 181af60:	2103fb04 	addi	r4,r4,4076
 181af64:	1800bd80 	call	1800bd8 <printf>
 181af68:	003fff06 	br	181af68 <__alt_mem_mem_0+0xff7faf68>

  left = 0;
 181af6c:	e03ffa0d 	sth	zero,-24(fp)

  if((buf == NULL) || (dataptr == NULL)) {
 181af70:	e0bffc17 	ldw	r2,-16(fp)
 181af74:	10000226 	beq	r2,zero,181af80 <pbuf_copy_partial+0x98>
 181af78:	e0bffd17 	ldw	r2,-12(fp)
 181af7c:	1000021e 	bne	r2,zero,181af88 <pbuf_copy_partial+0xa0>
    return 0;
 181af80:	0005883a 	mov	r2,zero
 181af84:	00003a06 	br	181b070 <pbuf_copy_partial+0x188>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 181af88:	e0bffc17 	ldw	r2,-16(fp)
 181af8c:	e0bff915 	stw	r2,-28(fp)
 181af90:	00003206 	br	181b05c <pbuf_copy_partial+0x174>
    if ((offset != 0) && (offset >= p->len)) {
 181af94:	e0bfff0b 	ldhu	r2,-4(fp)
 181af98:	10000b26 	beq	r2,zero,181afc8 <pbuf_copy_partial+0xe0>
 181af9c:	e0bff917 	ldw	r2,-28(fp)
 181afa0:	1080028b 	ldhu	r2,10(r2)
 181afa4:	10bfffcc 	andi	r2,r2,65535
 181afa8:	e0ffff0b 	ldhu	r3,-4(fp)
 181afac:	18800636 	bltu	r3,r2,181afc8 <pbuf_copy_partial+0xe0>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 181afb0:	e0bff917 	ldw	r2,-28(fp)
 181afb4:	1080028b 	ldhu	r2,10(r2)
 181afb8:	e0ffff0b 	ldhu	r3,-4(fp)
 181afbc:	1885c83a 	sub	r2,r3,r2
 181afc0:	e0bfff0d 	sth	r2,-4(fp)
 181afc4:	00002206 	br	181b050 <pbuf_copy_partial+0x168>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 181afc8:	e0bff917 	ldw	r2,-28(fp)
 181afcc:	10c0028b 	ldhu	r3,10(r2)
 181afd0:	e0bfff0b 	ldhu	r2,-4(fp)
 181afd4:	1885c83a 	sub	r2,r3,r2
 181afd8:	e0bffa8d 	sth	r2,-22(fp)
      if (buf_copy_len > len)
 181afdc:	e0bffa8b 	ldhu	r2,-22(fp)
 181afe0:	e0fffe0b 	ldhu	r3,-8(fp)
 181afe4:	1880022e 	bgeu	r3,r2,181aff0 <pbuf_copy_partial+0x108>
          buf_copy_len = len;
 181afe8:	e0bffe0b 	ldhu	r2,-8(fp)
 181afec:	e0bffa8d 	sth	r2,-22(fp)
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 181aff0:	e0bffa0b 	ldhu	r2,-24(fp)
 181aff4:	e0fffd17 	ldw	r3,-12(fp)
 181aff8:	1889883a 	add	r4,r3,r2
 181affc:	e0bff917 	ldw	r2,-28(fp)
 181b000:	10c00117 	ldw	r3,4(r2)
 181b004:	e0bfff0b 	ldhu	r2,-4(fp)
 181b008:	1885883a 	add	r2,r3,r2
 181b00c:	e0fffa8b 	ldhu	r3,-22(fp)
 181b010:	180d883a 	mov	r6,r3
 181b014:	100b883a 	mov	r5,r2
 181b018:	180604c0 	call	180604c <memcpy>
      copied_total += buf_copy_len;
 181b01c:	e0fffb0b 	ldhu	r3,-20(fp)
 181b020:	e0bffa8b 	ldhu	r2,-22(fp)
 181b024:	1885883a 	add	r2,r3,r2
 181b028:	e0bffb0d 	sth	r2,-20(fp)
      left += buf_copy_len;
 181b02c:	e0fffa0b 	ldhu	r3,-24(fp)
 181b030:	e0bffa8b 	ldhu	r2,-22(fp)
 181b034:	1885883a 	add	r2,r3,r2
 181b038:	e0bffa0d 	sth	r2,-24(fp)
      len -= buf_copy_len;
 181b03c:	e0fffe0b 	ldhu	r3,-8(fp)
 181b040:	e0bffa8b 	ldhu	r2,-22(fp)
 181b044:	1885c83a 	sub	r2,r3,r2
 181b048:	e0bffe0d 	sth	r2,-8(fp)
      offset = 0;
 181b04c:	e03fff0d 	sth	zero,-4(fp)
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 181b050:	e0bff917 	ldw	r2,-28(fp)
 181b054:	10800017 	ldw	r2,0(r2)
 181b058:	e0bff915 	stw	r2,-28(fp)
 181b05c:	e0bffe0b 	ldhu	r2,-8(fp)
 181b060:	10000226 	beq	r2,zero,181b06c <pbuf_copy_partial+0x184>
 181b064:	e0bff917 	ldw	r2,-28(fp)
 181b068:	103fca1e 	bne	r2,zero,181af94 <__alt_mem_mem_0+0xff7faf94>
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
 181b06c:	e0bffb0b 	ldhu	r2,-20(fp)
}
 181b070:	e037883a 	mov	sp,fp
 181b074:	dfc00117 	ldw	ra,4(sp)
 181b078:	df000017 	ldw	fp,0(sp)
 181b07c:	dec00204 	addi	sp,sp,8
 181b080:	f800283a 	ret

0181b084 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 181b084:	defff804 	addi	sp,sp,-32
 181b088:	dfc00715 	stw	ra,28(sp)
 181b08c:	df000615 	stw	fp,24(sp)
 181b090:	df000604 	addi	fp,sp,24
 181b094:	e13ffd15 	stw	r4,-12(fp)
 181b098:	e17ffe15 	stw	r5,-8(fp)
 181b09c:	3005883a 	mov	r2,r6
 181b0a0:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 181b0a4:	e0bfff0b 	ldhu	r2,-4(fp)
 181b0a8:	e0bffb8d 	sth	r2,-18(fp)
  u16_t copied_total = 0;
 181b0ac:	e03ffc0d 	sth	zero,-16(fp)

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return 0;);
 181b0b0:	e0bffd17 	ldw	r2,-12(fp)
 181b0b4:	1000091e 	bne	r2,zero,181b0dc <pbuf_take+0x58>
 181b0b8:	01c06134 	movhi	r7,388
 181b0bc:	39c3ed04 	addi	r7,r7,4020
 181b0c0:	0180f344 	movi	r6,973
 181b0c4:	01406134 	movhi	r5,388
 181b0c8:	29444104 	addi	r5,r5,4356
 181b0cc:	01006134 	movhi	r4,388
 181b0d0:	2103fb04 	addi	r4,r4,4076
 181b0d4:	1800bd80 	call	1800bd8 <printf>
 181b0d8:	003fff06 	br	181b0d8 <__alt_mem_mem_0+0xff7fb0d8>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return 0;);
 181b0dc:	e0bffe17 	ldw	r2,-8(fp)
 181b0e0:	1000091e 	bne	r2,zero,181b108 <pbuf_take+0x84>
 181b0e4:	01c06134 	movhi	r7,388
 181b0e8:	39c3ed04 	addi	r7,r7,4020
 181b0ec:	0180f384 	movi	r6,974
 181b0f0:	01406134 	movhi	r5,388
 181b0f4:	29444704 	addi	r5,r5,4380
 181b0f8:	01006134 	movhi	r4,388
 181b0fc:	2103fb04 	addi	r4,r4,4076
 181b100:	1800bd80 	call	1800bd8 <printf>
 181b104:	003fff06 	br	181b104 <__alt_mem_mem_0+0xff7fb104>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 181b108:	e0bffd17 	ldw	r2,-12(fp)
 181b10c:	10000726 	beq	r2,zero,181b12c <pbuf_take+0xa8>
 181b110:	e0bffe17 	ldw	r2,-8(fp)
 181b114:	10000526 	beq	r2,zero,181b12c <pbuf_take+0xa8>
 181b118:	e0bffd17 	ldw	r2,-12(fp)
 181b11c:	1080020b 	ldhu	r2,8(r2)
 181b120:	10ffffcc 	andi	r3,r2,65535
 181b124:	e0bfff0b 	ldhu	r2,-4(fp)
 181b128:	1880022e 	bgeu	r3,r2,181b134 <pbuf_take+0xb0>
    return ERR_ARG;
 181b12c:	00bffc84 	movi	r2,-14
 181b130:	00002406 	br	181b1c4 <pbuf_take+0x140>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; total_copy_len != 0; p = p->next) {
 181b134:	e0bffd17 	ldw	r2,-12(fp)
 181b138:	e0bffa15 	stw	r2,-24(fp)
 181b13c:	00001e06 	br	181b1b8 <pbuf_take+0x134>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
    buf_copy_len = total_copy_len;
 181b140:	e0bffb8b 	ldhu	r2,-18(fp)
 181b144:	e0bffb0d 	sth	r2,-20(fp)
    if (buf_copy_len > p->len) {
 181b148:	e0bffa17 	ldw	r2,-24(fp)
 181b14c:	1080028b 	ldhu	r2,10(r2)
 181b150:	10ffffcc 	andi	r3,r2,65535
 181b154:	e0bffb0b 	ldhu	r2,-20(fp)
 181b158:	1880032e 	bgeu	r3,r2,181b168 <pbuf_take+0xe4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 181b15c:	e0bffa17 	ldw	r2,-24(fp)
 181b160:	1080028b 	ldhu	r2,10(r2)
 181b164:	e0bffb0d 	sth	r2,-20(fp)
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((char*)dataptr)[copied_total], buf_copy_len);
 181b168:	e0bffa17 	ldw	r2,-24(fp)
 181b16c:	11000117 	ldw	r4,4(r2)
 181b170:	e0bffc0b 	ldhu	r2,-16(fp)
 181b174:	e0fffe17 	ldw	r3,-8(fp)
 181b178:	1885883a 	add	r2,r3,r2
 181b17c:	e0fffb0b 	ldhu	r3,-20(fp)
 181b180:	180d883a 	mov	r6,r3
 181b184:	100b883a 	mov	r5,r2
 181b188:	180604c0 	call	180604c <memcpy>
    total_copy_len -= buf_copy_len;
 181b18c:	e0fffb8b 	ldhu	r3,-18(fp)
 181b190:	e0bffb0b 	ldhu	r2,-20(fp)
 181b194:	1885c83a 	sub	r2,r3,r2
 181b198:	e0bffb8d 	sth	r2,-18(fp)
    copied_total += buf_copy_len;
 181b19c:	e0fffc0b 	ldhu	r3,-16(fp)
 181b1a0:	e0bffb0b 	ldhu	r2,-20(fp)
 181b1a4:	1885883a 	add	r2,r3,r2
 181b1a8:	e0bffc0d 	sth	r2,-16(fp)
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; total_copy_len != 0; p = p->next) {
 181b1ac:	e0bffa17 	ldw	r2,-24(fp)
 181b1b0:	10800017 	ldw	r2,0(r2)
 181b1b4:	e0bffa15 	stw	r2,-24(fp)
 181b1b8:	e0bffb8b 	ldhu	r2,-18(fp)
 181b1bc:	103fe01e 	bne	r2,zero,181b140 <__alt_mem_mem_0+0xff7fb140>
    MEMCPY(p->payload, &((char*)dataptr)[copied_total], buf_copy_len);
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
 181b1c0:	0005883a 	mov	r2,zero
}
 181b1c4:	e037883a 	mov	sp,fp
 181b1c8:	dfc00117 	ldw	ra,4(sp)
 181b1cc:	df000017 	ldw	fp,0(sp)
 181b1d0:	dec00204 	addi	sp,sp,8
 181b1d4:	f800283a 	ret

0181b1d8 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 181b1d8:	defffa04 	addi	sp,sp,-24
 181b1dc:	dfc00515 	stw	ra,20(sp)
 181b1e0:	df000415 	stw	fp,16(sp)
 181b1e4:	df000404 	addi	fp,sp,16
 181b1e8:	e13ffe15 	stw	r4,-8(fp)
 181b1ec:	e17fff15 	stw	r5,-4(fp)
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
 181b1f0:	e0bffe17 	ldw	r2,-8(fp)
 181b1f4:	10800017 	ldw	r2,0(r2)
 181b1f8:	1000021e 	bne	r2,zero,181b204 <pbuf_coalesce+0x2c>
    return p;
 181b1fc:	e0bffe17 	ldw	r2,-8(fp)
 181b200:	00001306 	br	181b250 <pbuf_coalesce+0x78>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
 181b204:	e0bffe17 	ldw	r2,-8(fp)
 181b208:	1080020b 	ldhu	r2,8(r2)
 181b20c:	10bfffcc 	andi	r2,r2,65535
 181b210:	000d883a 	mov	r6,zero
 181b214:	100b883a 	mov	r5,r2
 181b218:	e13fff17 	ldw	r4,-4(fp)
 181b21c:	181a1480 	call	181a148 <pbuf_alloc>
 181b220:	e0bffc15 	stw	r2,-16(fp)
  if (q == NULL) {
 181b224:	e0bffc17 	ldw	r2,-16(fp)
 181b228:	1000021e 	bne	r2,zero,181b234 <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
 181b22c:	e0bffe17 	ldw	r2,-8(fp)
 181b230:	00000706 	br	181b250 <pbuf_coalesce+0x78>
  }
  err = pbuf_copy(q, p);
 181b234:	e17ffe17 	ldw	r5,-8(fp)
 181b238:	e13ffc17 	ldw	r4,-16(fp)
 181b23c:	181ac8c0 	call	181ac8c <pbuf_copy>
 181b240:	e0bffd05 	stb	r2,-12(fp)
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  pbuf_free(p);
 181b244:	e13ffe17 	ldw	r4,-8(fp)
 181b248:	181a9040 	call	181a904 <pbuf_free>
  return q;
 181b24c:	e0bffc17 	ldw	r2,-16(fp)
}
 181b250:	e037883a 	mov	sp,fp
 181b254:	dfc00117 	ldw	ra,4(sp)
 181b258:	df000017 	ldw	fp,0(sp)
 181b25c:	dec00204 	addi	sp,sp,8
 181b260:	f800283a 	ret

0181b264 <pbuf_fill_chksum>:
 *         within the (first) pbuf (no pbuf queues!)
 */
err_t
pbuf_fill_chksum(struct pbuf *p, u16_t start_offset, const void *dataptr,
                 u16_t len, u16_t *chksum)
{
 181b264:	defff704 	addi	sp,sp,-36
 181b268:	dfc00815 	stw	ra,32(sp)
 181b26c:	df000715 	stw	fp,28(sp)
 181b270:	df000704 	addi	fp,sp,28
 181b274:	e13ffc15 	stw	r4,-16(fp)
 181b278:	2807883a 	mov	r3,r5
 181b27c:	e1bffe15 	stw	r6,-8(fp)
 181b280:	3805883a 	mov	r2,r7
 181b284:	e0fffd0d 	sth	r3,-12(fp)
 181b288:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ASSERT("p != NULL", p != NULL);
  LWIP_ASSERT("dataptr != NULL", dataptr != NULL);
  LWIP_ASSERT("chksum != NULL", chksum != NULL);
  LWIP_ASSERT("len != 0", len != 0);

  if ((start_offset >= p->len) || (start_offset + len > p->len)) {
 181b28c:	e0bffc17 	ldw	r2,-16(fp)
 181b290:	1080028b 	ldhu	r2,10(r2)
 181b294:	10bfffcc 	andi	r2,r2,65535
 181b298:	e0fffd0b 	ldhu	r3,-12(fp)
 181b29c:	1880072e 	bgeu	r3,r2,181b2bc <pbuf_fill_chksum+0x58>
 181b2a0:	e0fffd0b 	ldhu	r3,-12(fp)
 181b2a4:	e0bfff0b 	ldhu	r2,-4(fp)
 181b2a8:	1885883a 	add	r2,r3,r2
 181b2ac:	e0fffc17 	ldw	r3,-16(fp)
 181b2b0:	18c0028b 	ldhu	r3,10(r3)
 181b2b4:	18ffffcc 	andi	r3,r3,65535
 181b2b8:	1880020e 	bge	r3,r2,181b2c4 <pbuf_fill_chksum+0x60>
    return ERR_ARG;
 181b2bc:	00bffc84 	movi	r2,-14
 181b2c0:	00002606 	br	181b35c <pbuf_fill_chksum+0xf8>
  }

  dst_ptr = ((char*)p->payload) + start_offset;
 181b2c4:	e0bffc17 	ldw	r2,-16(fp)
 181b2c8:	10c00117 	ldw	r3,4(r2)
 181b2cc:	e0bffd0b 	ldhu	r2,-12(fp)
 181b2d0:	1885883a 	add	r2,r3,r2
 181b2d4:	e0bffa15 	stw	r2,-24(fp)
  copy_chksum = LWIP_CHKSUM_COPY(dst_ptr, dataptr, len);
 181b2d8:	e0bfff0b 	ldhu	r2,-4(fp)
 181b2dc:	100d883a 	mov	r6,r2
 181b2e0:	e17ffe17 	ldw	r5,-8(fp)
 181b2e4:	e13ffa17 	ldw	r4,-24(fp)
 181b2e8:	18318b80 	call	18318b8 <lwip_chksum_copy>
 181b2ec:	e0bff90d 	sth	r2,-28(fp)
  if ((start_offset & 1) != 0) {
 181b2f0:	e0bffd0b 	ldhu	r2,-12(fp)
 181b2f4:	1080004c 	andi	r2,r2,1
 181b2f8:	10000726 	beq	r2,zero,181b318 <pbuf_fill_chksum+0xb4>
    copy_chksum = SWAP_BYTES_IN_WORD(copy_chksum);
 181b2fc:	e0bff90b 	ldhu	r2,-28(fp)
 181b300:	1004d23a 	srli	r2,r2,8
 181b304:	1007883a 	mov	r3,r2
 181b308:	e0bff90b 	ldhu	r2,-28(fp)
 181b30c:	1004923a 	slli	r2,r2,8
 181b310:	1884b03a 	or	r2,r3,r2
 181b314:	e0bff90d 	sth	r2,-28(fp)
  }
  acc = *chksum;
 181b318:	e0800217 	ldw	r2,8(fp)
 181b31c:	1080000b 	ldhu	r2,0(r2)
 181b320:	10bfffcc 	andi	r2,r2,65535
 181b324:	e0bffb15 	stw	r2,-20(fp)
  acc += copy_chksum;
 181b328:	e0bff90b 	ldhu	r2,-28(fp)
 181b32c:	e0fffb17 	ldw	r3,-20(fp)
 181b330:	1885883a 	add	r2,r3,r2
 181b334:	e0bffb15 	stw	r2,-20(fp)
  *chksum = FOLD_U32T(acc);
 181b338:	e0bffb17 	ldw	r2,-20(fp)
 181b33c:	1004d43a 	srli	r2,r2,16
 181b340:	1007883a 	mov	r3,r2
 181b344:	e0bffb17 	ldw	r2,-20(fp)
 181b348:	1885883a 	add	r2,r3,r2
 181b34c:	1007883a 	mov	r3,r2
 181b350:	e0800217 	ldw	r2,8(fp)
 181b354:	10c0000d 	sth	r3,0(r2)
  return ERR_OK;
 181b358:	0005883a 	mov	r2,zero
}
 181b35c:	e037883a 	mov	sp,fp
 181b360:	dfc00117 	ldw	ra,4(sp)
 181b364:	df000017 	ldw	fp,0(sp)
 181b368:	dec00204 	addi	sp,sp,8
 181b36c:	f800283a 	ret

0181b370 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(struct pbuf* p, u16_t offset)
{
 181b370:	defffb04 	addi	sp,sp,-20
 181b374:	df000415 	stw	fp,16(sp)
 181b378:	df000404 	addi	fp,sp,16
 181b37c:	e13ffe15 	stw	r4,-8(fp)
 181b380:	2805883a 	mov	r2,r5
 181b384:	e0bfff0d 	sth	r2,-4(fp)
  u16_t copy_from = offset;
 181b388:	e0bfff0b 	ldhu	r2,-4(fp)
 181b38c:	e0bffc0d 	sth	r2,-16(fp)
  struct pbuf* q = p;
 181b390:	e0bffe17 	ldw	r2,-8(fp)
 181b394:	e0bffd15 	stw	r2,-12(fp)

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= copy_from)) {
 181b398:	00000806 	br	181b3bc <pbuf_get_at+0x4c>
    copy_from -= q->len;
 181b39c:	e0bffd17 	ldw	r2,-12(fp)
 181b3a0:	1080028b 	ldhu	r2,10(r2)
 181b3a4:	e0fffc0b 	ldhu	r3,-16(fp)
 181b3a8:	1885c83a 	sub	r2,r3,r2
 181b3ac:	e0bffc0d 	sth	r2,-16(fp)
    q = q->next;
 181b3b0:	e0bffd17 	ldw	r2,-12(fp)
 181b3b4:	10800017 	ldw	r2,0(r2)
 181b3b8:	e0bffd15 	stw	r2,-12(fp)
{
  u16_t copy_from = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= copy_from)) {
 181b3bc:	e0bffd17 	ldw	r2,-12(fp)
 181b3c0:	10000526 	beq	r2,zero,181b3d8 <pbuf_get_at+0x68>
 181b3c4:	e0bffd17 	ldw	r2,-12(fp)
 181b3c8:	1080028b 	ldhu	r2,10(r2)
 181b3cc:	10bfffcc 	andi	r2,r2,65535
 181b3d0:	e0fffc0b 	ldhu	r3,-16(fp)
 181b3d4:	18bff12e 	bgeu	r3,r2,181b39c <__alt_mem_mem_0+0xff7fb39c>
    copy_from -= q->len;
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > copy_from)) {
 181b3d8:	e0bffd17 	ldw	r2,-12(fp)
 181b3dc:	10000b26 	beq	r2,zero,181b40c <pbuf_get_at+0x9c>
 181b3e0:	e0bffd17 	ldw	r2,-12(fp)
 181b3e4:	1080028b 	ldhu	r2,10(r2)
 181b3e8:	10bfffcc 	andi	r2,r2,65535
 181b3ec:	e0fffc0b 	ldhu	r3,-16(fp)
 181b3f0:	1880062e 	bgeu	r3,r2,181b40c <pbuf_get_at+0x9c>
    return ((u8_t*)q->payload)[copy_from];
 181b3f4:	e0bffd17 	ldw	r2,-12(fp)
 181b3f8:	10c00117 	ldw	r3,4(r2)
 181b3fc:	e0bffc0b 	ldhu	r2,-16(fp)
 181b400:	1885883a 	add	r2,r3,r2
 181b404:	10800003 	ldbu	r2,0(r2)
 181b408:	00000106 	br	181b410 <pbuf_get_at+0xa0>
  }
  return 0;
 181b40c:	0005883a 	mov	r2,zero
}
 181b410:	e037883a 	mov	sp,fp
 181b414:	df000017 	ldw	fp,0(sp)
 181b418:	dec00104 	addi	sp,sp,4
 181b41c:	f800283a 	ret

0181b420 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
 181b420:	defff704 	addi	sp,sp,-36
 181b424:	dfc00815 	stw	ra,32(sp)
 181b428:	df000715 	stw	fp,28(sp)
 181b42c:	df000704 	addi	fp,sp,28
 181b430:	e13ffc15 	stw	r4,-16(fp)
 181b434:	2807883a 	mov	r3,r5
 181b438:	e1bffe15 	stw	r6,-8(fp)
 181b43c:	3805883a 	mov	r2,r7
 181b440:	e0fffd0d 	sth	r3,-12(fp)
 181b444:	e0bfff0d 	sth	r2,-4(fp)
  u16_t start = offset;
 181b448:	e0bffd0b 	ldhu	r2,-12(fp)
 181b44c:	e0bff90d 	sth	r2,-28(fp)
  struct pbuf* q = p;
 181b450:	e0bffc17 	ldw	r2,-16(fp)
 181b454:	e0bffa15 	stw	r2,-24(fp)

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= start)) {
 181b458:	00000806 	br	181b47c <pbuf_memcmp+0x5c>
    start -= q->len;
 181b45c:	e0bffa17 	ldw	r2,-24(fp)
 181b460:	1080028b 	ldhu	r2,10(r2)
 181b464:	e0fff90b 	ldhu	r3,-28(fp)
 181b468:	1885c83a 	sub	r2,r3,r2
 181b46c:	e0bff90d 	sth	r2,-28(fp)
    q = q->next;
 181b470:	e0bffa17 	ldw	r2,-24(fp)
 181b474:	10800017 	ldw	r2,0(r2)
 181b478:	e0bffa15 	stw	r2,-24(fp)
{
  u16_t start = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= start)) {
 181b47c:	e0bffa17 	ldw	r2,-24(fp)
 181b480:	10000526 	beq	r2,zero,181b498 <pbuf_memcmp+0x78>
 181b484:	e0bffa17 	ldw	r2,-24(fp)
 181b488:	1080028b 	ldhu	r2,10(r2)
 181b48c:	10bfffcc 	andi	r2,r2,65535
 181b490:	e0fff90b 	ldhu	r3,-28(fp)
 181b494:	18bff12e 	bgeu	r3,r2,181b45c <__alt_mem_mem_0+0xff7fb45c>
    start -= q->len;
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > start)) {
 181b498:	e0bffa17 	ldw	r2,-24(fp)
 181b49c:	10002226 	beq	r2,zero,181b528 <pbuf_memcmp+0x108>
 181b4a0:	e0bffa17 	ldw	r2,-24(fp)
 181b4a4:	1080028b 	ldhu	r2,10(r2)
 181b4a8:	10bfffcc 	andi	r2,r2,65535
 181b4ac:	e0fff90b 	ldhu	r3,-28(fp)
 181b4b0:	18801d2e 	bgeu	r3,r2,181b528 <pbuf_memcmp+0x108>
    u16_t i;
    for(i = 0; i < n; i++) {
 181b4b4:	e03ffb0d 	sth	zero,-20(fp)
 181b4b8:	00001606 	br	181b514 <pbuf_memcmp+0xf4>
      u8_t a = pbuf_get_at(q, start + i);
 181b4bc:	e0fff90b 	ldhu	r3,-28(fp)
 181b4c0:	e0bffb0b 	ldhu	r2,-20(fp)
 181b4c4:	1885883a 	add	r2,r3,r2
 181b4c8:	10bfffcc 	andi	r2,r2,65535
 181b4cc:	100b883a 	mov	r5,r2
 181b4d0:	e13ffa17 	ldw	r4,-24(fp)
 181b4d4:	181b3700 	call	181b370 <pbuf_get_at>
 181b4d8:	e0bffb85 	stb	r2,-18(fp)
      u8_t b = ((u8_t*)s2)[i];
 181b4dc:	e0bffb0b 	ldhu	r2,-20(fp)
 181b4e0:	e0fffe17 	ldw	r3,-8(fp)
 181b4e4:	1885883a 	add	r2,r3,r2
 181b4e8:	10800003 	ldbu	r2,0(r2)
 181b4ec:	e0bffbc5 	stb	r2,-17(fp)
      if (a != b) {
 181b4f0:	e0fffb83 	ldbu	r3,-18(fp)
 181b4f4:	e0bffbc3 	ldbu	r2,-17(fp)
 181b4f8:	18800326 	beq	r3,r2,181b508 <pbuf_memcmp+0xe8>
        return i+1;
 181b4fc:	e0bffb0b 	ldhu	r2,-20(fp)
 181b500:	10800044 	addi	r2,r2,1
 181b504:	00000906 	br	181b52c <pbuf_memcmp+0x10c>
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > start)) {
    u16_t i;
    for(i = 0; i < n; i++) {
 181b508:	e0bffb0b 	ldhu	r2,-20(fp)
 181b50c:	10800044 	addi	r2,r2,1
 181b510:	e0bffb0d 	sth	r2,-20(fp)
 181b514:	e0fffb0b 	ldhu	r3,-20(fp)
 181b518:	e0bfff0b 	ldhu	r2,-4(fp)
 181b51c:	18bfe736 	bltu	r3,r2,181b4bc <__alt_mem_mem_0+0xff7fb4bc>
      u8_t b = ((u8_t*)s2)[i];
      if (a != b) {
        return i+1;
      }
    }
    return 0;
 181b520:	0005883a 	mov	r2,zero
 181b524:	00000106 	br	181b52c <pbuf_memcmp+0x10c>
  }
  return 0xffff;
 181b528:	00bfffc4 	movi	r2,-1
}
 181b52c:	e037883a 	mov	sp,fp
 181b530:	dfc00117 	ldw	ra,4(sp)
 181b534:	df000017 	ldw	fp,0(sp)
 181b538:	dec00204 	addi	sp,sp,8
 181b53c:	f800283a 	ret

0181b540 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
 181b540:	defff804 	addi	sp,sp,-32
 181b544:	dfc00715 	stw	ra,28(sp)
 181b548:	df000615 	stw	fp,24(sp)
 181b54c:	df000604 	addi	fp,sp,24
 181b550:	e13ffc15 	stw	r4,-16(fp)
 181b554:	e17ffd15 	stw	r5,-12(fp)
 181b558:	3007883a 	mov	r3,r6
 181b55c:	3805883a 	mov	r2,r7
 181b560:	e0fffe0d 	sth	r3,-8(fp)
 181b564:	e0bfff0d 	sth	r2,-4(fp)
  u16_t i;
  u16_t max = p->tot_len - mem_len;
 181b568:	e0bffc17 	ldw	r2,-16(fp)
 181b56c:	10c0020b 	ldhu	r3,8(r2)
 181b570:	e0bffe0b 	ldhu	r2,-8(fp)
 181b574:	1885c83a 	sub	r2,r3,r2
 181b578:	e0bffa8d 	sth	r2,-22(fp)
  if (p->tot_len >= mem_len + start_offset) {
 181b57c:	e0bffc17 	ldw	r2,-16(fp)
 181b580:	1080020b 	ldhu	r2,8(r2)
 181b584:	10ffffcc 	andi	r3,r2,65535
 181b588:	e13ffe0b 	ldhu	r4,-8(fp)
 181b58c:	e0bfff0b 	ldhu	r2,-4(fp)
 181b590:	2085883a 	add	r2,r4,r2
 181b594:	18801616 	blt	r3,r2,181b5f0 <pbuf_memfind+0xb0>
    for(i = start_offset; i <= max; ) {
 181b598:	e0bfff0b 	ldhu	r2,-4(fp)
 181b59c:	e0bffa0d 	sth	r2,-24(fp)
 181b5a0:	00001006 	br	181b5e4 <pbuf_memfind+0xa4>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 181b5a4:	e0bffa0b 	ldhu	r2,-24(fp)
 181b5a8:	e0fffe0b 	ldhu	r3,-8(fp)
 181b5ac:	180f883a 	mov	r7,r3
 181b5b0:	e1bffd17 	ldw	r6,-12(fp)
 181b5b4:	100b883a 	mov	r5,r2
 181b5b8:	e13ffc17 	ldw	r4,-16(fp)
 181b5bc:	181b4200 	call	181b420 <pbuf_memcmp>
 181b5c0:	e0bffb0d 	sth	r2,-20(fp)
      if (plus == 0) {
 181b5c4:	e0bffb0b 	ldhu	r2,-20(fp)
 181b5c8:	1000021e 	bne	r2,zero,181b5d4 <pbuf_memfind+0x94>
        return i;
 181b5cc:	e0bffa0b 	ldhu	r2,-24(fp)
 181b5d0:	00000806 	br	181b5f4 <pbuf_memfind+0xb4>
      } else {
        i += plus;
 181b5d4:	e0fffa0b 	ldhu	r3,-24(fp)
 181b5d8:	e0bffb0b 	ldhu	r2,-20(fp)
 181b5dc:	1885883a 	add	r2,r3,r2
 181b5e0:	e0bffa0d 	sth	r2,-24(fp)
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  if (p->tot_len >= mem_len + start_offset) {
    for(i = start_offset; i <= max; ) {
 181b5e4:	e0bffa0b 	ldhu	r2,-24(fp)
 181b5e8:	e0fffa8b 	ldhu	r3,-22(fp)
 181b5ec:	18bfed2e 	bgeu	r3,r2,181b5a4 <__alt_mem_mem_0+0xff7fb5a4>
      } else {
        i += plus;
      }
    }
  }
  return 0xFFFF;
 181b5f0:	00bfffc4 	movi	r2,-1
}
 181b5f4:	e037883a 	mov	sp,fp
 181b5f8:	dfc00117 	ldw	ra,4(sp)
 181b5fc:	df000017 	ldw	fp,0(sp)
 181b600:	dec00204 	addi	sp,sp,8
 181b604:	f800283a 	ret

0181b608 <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(struct pbuf* p, const char* substr)
{
 181b608:	defffb04 	addi	sp,sp,-20
 181b60c:	dfc00415 	stw	ra,16(sp)
 181b610:	df000315 	stw	fp,12(sp)
 181b614:	df000304 	addi	fp,sp,12
 181b618:	e13ffe15 	stw	r4,-8(fp)
 181b61c:	e17fff15 	stw	r5,-4(fp)
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
 181b620:	e0bfff17 	ldw	r2,-4(fp)
 181b624:	10000b26 	beq	r2,zero,181b654 <pbuf_strstr+0x4c>
 181b628:	e0bfff17 	ldw	r2,-4(fp)
 181b62c:	10800003 	ldbu	r2,0(r2)
 181b630:	10803fcc 	andi	r2,r2,255
 181b634:	1080201c 	xori	r2,r2,128
 181b638:	10bfe004 	addi	r2,r2,-128
 181b63c:	10000526 	beq	r2,zero,181b654 <pbuf_strstr+0x4c>
 181b640:	e0bffe17 	ldw	r2,-8(fp)
 181b644:	1080020b 	ldhu	r2,8(r2)
 181b648:	10ffffcc 	andi	r3,r2,65535
 181b64c:	00bfffd4 	movui	r2,65535
 181b650:	1880021e 	bne	r3,r2,181b65c <pbuf_strstr+0x54>
    return 0xFFFF;
 181b654:	00bfffc4 	movi	r2,-1
 181b658:	00000f06 	br	181b698 <pbuf_strstr+0x90>
  }
  substr_len = strlen(substr);
 181b65c:	e13fff17 	ldw	r4,-4(fp)
 181b660:	18075980 	call	1807598 <strlen>
 181b664:	e0bffd15 	stw	r2,-12(fp)
  if (substr_len >= 0xFFFF) {
 181b668:	e0bffd17 	ldw	r2,-12(fp)
 181b66c:	10bffff0 	cmpltui	r2,r2,65535
 181b670:	1000021e 	bne	r2,zero,181b67c <pbuf_strstr+0x74>
    return 0xFFFF;
 181b674:	00bfffc4 	movi	r2,-1
 181b678:	00000706 	br	181b698 <pbuf_strstr+0x90>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
 181b67c:	e0bffd17 	ldw	r2,-12(fp)
 181b680:	10bfffcc 	andi	r2,r2,65535
 181b684:	000f883a 	mov	r7,zero
 181b688:	100d883a 	mov	r6,r2
 181b68c:	e17fff17 	ldw	r5,-4(fp)
 181b690:	e13ffe17 	ldw	r4,-8(fp)
 181b694:	181b5400 	call	181b540 <pbuf_memfind>
}
 181b698:	e037883a 	mov	sp,fp
 181b69c:	dfc00117 	ldw	ra,4(sp)
 181b6a0:	df000017 	ldw	fp,0(sp)
 181b6a4:	dec00204 	addi	sp,sp,8
 181b6a8:	f800283a 	ret

0181b6ac <stats_init>:
#include <string.h>

struct stats_ lwip_stats;

void stats_init(void)
{
 181b6ac:	deffff04 	addi	sp,sp,-4
 181b6b0:	df000015 	stw	fp,0(sp)
 181b6b4:	d839883a 	mov	fp,sp
#endif /* MEMP_STATS */
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 181b6b8:	0001883a 	nop
 181b6bc:	e037883a 	mov	sp,fp
 181b6c0:	df000017 	ldw	fp,0(sp)
 181b6c4:	dec00104 	addi	sp,sp,4
 181b6c8:	f800283a 	ret

0181b6cc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 181b6cc:	deffff04 	addi	sp,sp,-4
 181b6d0:	df000015 	stw	fp,0(sp)
 181b6d4:	d839883a 	mov	fp,sp
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 181b6d8:	0001883a 	nop
 181b6dc:	e037883a 	mov	sp,fp
 181b6e0:	df000017 	ldw	fp,0(sp)
 181b6e4:	dec00104 	addi	sp,sp,4
 181b6e8:	f800283a 	ret

0181b6ec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 181b6ec:	defffe04 	addi	sp,sp,-8
 181b6f0:	dfc00115 	stw	ra,4(sp)
 181b6f4:	df000015 	stw	fp,0(sp)
 181b6f8:	d839883a 	mov	fp,sp
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 181b6fc:	181cf100 	call	181cf10 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 181b700:	d0a7f603 	ldbu	r2,-24616(gp)
 181b704:	10800044 	addi	r2,r2,1
 181b708:	d0a7f605 	stb	r2,-24616(gp)
 181b70c:	d0a7f603 	ldbu	r2,-24616(gp)
 181b710:	10803fcc 	andi	r2,r2,255
 181b714:	1080004c 	andi	r2,r2,1
 181b718:	10000126 	beq	r2,zero,181b720 <tcp_tmr+0x34>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 181b71c:	181c7d80 	call	181c7d8 <tcp_slowtmr>
  }
}
 181b720:	0001883a 	nop
 181b724:	e037883a 	mov	sp,fp
 181b728:	dfc00117 	ldw	ra,4(sp)
 181b72c:	df000017 	ldw	fp,0(sp)
 181b730:	dec00204 	addi	sp,sp,8
 181b734:	f800283a 	ret

0181b738 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 181b738:	defff904 	addi	sp,sp,-28
 181b73c:	dfc00615 	stw	ra,24(sp)
 181b740:	df000515 	stw	fp,20(sp)
 181b744:	df000504 	addi	fp,sp,20
 181b748:	e13ffe15 	stw	r4,-8(fp)
 181b74c:	2805883a 	mov	r2,r5
 181b750:	e0bfff05 	stb	r2,-4(fp)
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 181b754:	e0bfff03 	ldbu	r2,-4(fp)
 181b758:	10005126 	beq	r2,zero,181b8a0 <tcp_close_shutdown+0x168>
 181b75c:	e0bffe17 	ldw	r2,-8(fp)
 181b760:	10800617 	ldw	r2,24(r2)
 181b764:	10800120 	cmpeqi	r2,r2,4
 181b768:	1000041e 	bne	r2,zero,181b77c <tcp_close_shutdown+0x44>
 181b76c:	e0bffe17 	ldw	r2,-8(fp)
 181b770:	10800617 	ldw	r2,24(r2)
 181b774:	108001d8 	cmpnei	r2,r2,7
 181b778:	1000491e 	bne	r2,zero,181b8a0 <tcp_close_shutdown+0x168>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
 181b77c:	e0bffe17 	ldw	r2,-8(fp)
 181b780:	10801f17 	ldw	r2,124(r2)
 181b784:	1000051e 	bne	r2,zero,181b79c <tcp_close_shutdown+0x64>
 181b788:	e0bffe17 	ldw	r2,-8(fp)
 181b78c:	10800c0b 	ldhu	r2,48(r2)
 181b790:	10bfffcc 	andi	r2,r2,65535
 181b794:	10880020 	cmpeqi	r2,r2,8192
 181b798:	1000411e 	bne	r2,zero,181b8a0 <tcp_close_shutdown+0x168>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181b79c:	e0bffe17 	ldw	r2,-8(fp)
 181b7a0:	11001517 	ldw	r4,84(r2)
 181b7a4:	e0bffe17 	ldw	r2,-8(fp)
 181b7a8:	11400b17 	ldw	r5,44(r2)
 181b7ac:	e1bffe17 	ldw	r6,-8(fp)
 181b7b0:	e0bffe17 	ldw	r2,-8(fp)
 181b7b4:	11c00104 	addi	r7,r2,4
        pcb->local_port, pcb->remote_port);
 181b7b8:	e0bffe17 	ldw	r2,-8(fp)
 181b7bc:	1080078b 	ldhu	r2,30(r2)
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181b7c0:	10bfffcc 	andi	r2,r2,65535
        pcb->local_port, pcb->remote_port);
 181b7c4:	e0fffe17 	ldw	r3,-8(fp)
 181b7c8:	18c0080b 	ldhu	r3,32(r3)
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181b7cc:	18ffffcc 	andi	r3,r3,65535
 181b7d0:	d8c00115 	stw	r3,4(sp)
 181b7d4:	d8800015 	stw	r2,0(sp)
 181b7d8:	18205a80 	call	18205a8 <tcp_rst>
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 181b7dc:	e13ffe17 	ldw	r4,-8(fp)
 181b7e0:	181d8080 	call	181d808 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 181b7e4:	d0e7f717 	ldw	r3,-24612(gp)
 181b7e8:	e0bffe17 	ldw	r2,-8(fp)
 181b7ec:	1880041e 	bne	r3,r2,181b800 <tcp_close_shutdown+0xc8>
 181b7f0:	d0a7f717 	ldw	r2,-24612(gp)
 181b7f4:	10800317 	ldw	r2,12(r2)
 181b7f8:	d0a7f715 	stw	r2,-24612(gp)
 181b7fc:	00001106 	br	181b844 <tcp_close_shutdown+0x10c>
 181b800:	d0a7f717 	ldw	r2,-24612(gp)
 181b804:	d0a7fa15 	stw	r2,-24600(gp)
 181b808:	00000c06 	br	181b83c <tcp_close_shutdown+0x104>
 181b80c:	d0a7fa17 	ldw	r2,-24600(gp)
 181b810:	10c00317 	ldw	r3,12(r2)
 181b814:	e0bffe17 	ldw	r2,-8(fp)
 181b818:	1880051e 	bne	r3,r2,181b830 <tcp_close_shutdown+0xf8>
 181b81c:	d0a7fa17 	ldw	r2,-24600(gp)
 181b820:	e0fffe17 	ldw	r3,-8(fp)
 181b824:	18c00317 	ldw	r3,12(r3)
 181b828:	10c00315 	stw	r3,12(r2)
 181b82c:	00000506 	br	181b844 <tcp_close_shutdown+0x10c>
 181b830:	d0a7fa17 	ldw	r2,-24600(gp)
 181b834:	10800317 	ldw	r2,12(r2)
 181b838:	d0a7fa15 	stw	r2,-24600(gp)
 181b83c:	d0a7fa17 	ldw	r2,-24600(gp)
 181b840:	103ff21e 	bne	r2,zero,181b80c <__alt_mem_mem_0+0xff7fb80c>
 181b844:	e0bffe17 	ldw	r2,-8(fp)
 181b848:	10000315 	stw	zero,12(r2)
 181b84c:	00800044 	movi	r2,1
 181b850:	d0a7f685 	stb	r2,-24614(gp)
      if (pcb->state == ESTABLISHED) {
 181b854:	e0bffe17 	ldw	r2,-8(fp)
 181b858:	10800617 	ldw	r2,24(r2)
 181b85c:	10800118 	cmpnei	r2,r2,4
 181b860:	10000a1e 	bne	r2,zero,181b88c <tcp_close_shutdown+0x154>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 181b864:	e0bffe17 	ldw	r2,-8(fp)
 181b868:	00c00284 	movi	r3,10
 181b86c:	10c00615 	stw	r3,24(r2)
        TCP_REG(&tcp_tw_pcbs, pcb);
 181b870:	d0e7fc17 	ldw	r3,-24592(gp)
 181b874:	e0bffe17 	ldw	r2,-8(fp)
 181b878:	10c00315 	stw	r3,12(r2)
 181b87c:	e0bffe17 	ldw	r2,-8(fp)
 181b880:	d0a7fc15 	stw	r2,-24592(gp)
 181b884:	18212d00 	call	18212d0 <tcp_timer_needed>
 181b888:	00000306 	br	181b898 <tcp_close_shutdown+0x160>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
 181b88c:	e17ffe17 	ldw	r5,-8(fp)
 181b890:	01000084 	movi	r4,2
 181b894:	18341e40 	call	18341e4 <memp_free>
      }
      return ERR_OK;
 181b898:	0005883a 	mov	r2,zero
 181b89c:	00007406 	br	181ba70 <tcp_close_shutdown+0x338>
    }
  }

  switch (pcb->state) {
 181b8a0:	e0bffe17 	ldw	r2,-8(fp)
 181b8a4:	10800617 	ldw	r2,24(r2)
 181b8a8:	10c00228 	cmpgeui	r3,r2,8
 181b8ac:	1800611e 	bne	r3,zero,181ba34 <tcp_close_shutdown+0x2fc>
 181b8b0:	100690ba 	slli	r3,r2,2
 181b8b4:	008060b4 	movhi	r2,386
 181b8b8:	10ae3204 	addi	r2,r2,-18232
 181b8bc:	1885883a 	add	r2,r3,r2
 181b8c0:	10800017 	ldw	r2,0(r2)
 181b8c4:	1000683a 	jmp	r2
 181b8c8:	0181b8e8 	cmpgeui	r6,zero,1763
 181b8cc:	0181b978 	rdprs	r6,zero,1765
 181b8d0:	0181b99c 	xori	r6,zero,1766
 181b8d4:	0181b9c8 	cmpgei	r6,zero,1767
 181b8d8:	0181b9ec 	andhi	r6,zero,1767
 181b8dc:	0181ba34 	movhi	r6,1768
 181b8e0:	0181ba34 	movhi	r6,1768
 181b8e4:	0181ba10 	cmplti	r6,zero,1768
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
 181b8e8:	e03ffd05 	stb	zero,-12(fp)
    if (pcb->local_port != 0) {
 181b8ec:	e0bffe17 	ldw	r2,-8(fp)
 181b8f0:	1080078b 	ldhu	r2,30(r2)
 181b8f4:	10bfffcc 	andi	r2,r2,65535
 181b8f8:	10001a26 	beq	r2,zero,181b964 <tcp_close_shutdown+0x22c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 181b8fc:	d0e7fb17 	ldw	r3,-24596(gp)
 181b900:	e0bffe17 	ldw	r2,-8(fp)
 181b904:	1880041e 	bne	r3,r2,181b918 <tcp_close_shutdown+0x1e0>
 181b908:	d0a7fb17 	ldw	r2,-24596(gp)
 181b90c:	10800317 	ldw	r2,12(r2)
 181b910:	d0a7fb15 	stw	r2,-24596(gp)
 181b914:	00001106 	br	181b95c <tcp_close_shutdown+0x224>
 181b918:	d0a7fb17 	ldw	r2,-24596(gp)
 181b91c:	d0a7fa15 	stw	r2,-24600(gp)
 181b920:	00000c06 	br	181b954 <tcp_close_shutdown+0x21c>
 181b924:	d0a7fa17 	ldw	r2,-24600(gp)
 181b928:	10c00317 	ldw	r3,12(r2)
 181b92c:	e0bffe17 	ldw	r2,-8(fp)
 181b930:	1880051e 	bne	r3,r2,181b948 <tcp_close_shutdown+0x210>
 181b934:	d0a7fa17 	ldw	r2,-24600(gp)
 181b938:	e0fffe17 	ldw	r3,-8(fp)
 181b93c:	18c00317 	ldw	r3,12(r3)
 181b940:	10c00315 	stw	r3,12(r2)
 181b944:	00000506 	br	181b95c <tcp_close_shutdown+0x224>
 181b948:	d0a7fa17 	ldw	r2,-24600(gp)
 181b94c:	10800317 	ldw	r2,12(r2)
 181b950:	d0a7fa15 	stw	r2,-24600(gp)
 181b954:	d0a7fa17 	ldw	r2,-24600(gp)
 181b958:	103ff21e 	bne	r2,zero,181b924 <__alt_mem_mem_0+0xff7fb924>
 181b95c:	e0bffe17 	ldw	r2,-8(fp)
 181b960:	10000315 	stw	zero,12(r2)
    }
    memp_free(MEMP_TCP_PCB, pcb);
 181b964:	e17ffe17 	ldw	r5,-8(fp)
 181b968:	01000084 	movi	r4,2
 181b96c:	18341e40 	call	18341e4 <memp_free>
    pcb = NULL;
 181b970:	e03ffe15 	stw	zero,-8(fp)
    break;
 181b974:	00003706 	br	181ba54 <tcp_close_shutdown+0x31c>
  case LISTEN:
    err = ERR_OK;
 181b978:	e03ffd05 	stb	zero,-12(fp)
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 181b97c:	e17ffe17 	ldw	r5,-8(fp)
 181b980:	d127f904 	addi	r4,gp,-24604
 181b984:	181d9780 	call	181d978 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 181b988:	e17ffe17 	ldw	r5,-8(fp)
 181b98c:	010000c4 	movi	r4,3
 181b990:	18341e40 	call	18341e4 <memp_free>
    pcb = NULL;
 181b994:	e03ffe15 	stw	zero,-8(fp)
    break;
 181b998:	00002e06 	br	181ba54 <tcp_close_shutdown+0x31c>
  case SYN_SENT:
    err = ERR_OK;
 181b99c:	e03ffd05 	stb	zero,-12(fp)
    TCP_PCB_REMOVE_ACTIVE(pcb);
 181b9a0:	e17ffe17 	ldw	r5,-8(fp)
 181b9a4:	d127f704 	addi	r4,gp,-24612
 181b9a8:	181d9780 	call	181d978 <tcp_pcb_remove>
 181b9ac:	00800044 	movi	r2,1
 181b9b0:	d0a7f685 	stb	r2,-24614(gp)
    memp_free(MEMP_TCP_PCB, pcb);
 181b9b4:	e17ffe17 	ldw	r5,-8(fp)
 181b9b8:	01000084 	movi	r4,2
 181b9bc:	18341e40 	call	18341e4 <memp_free>
    pcb = NULL;
 181b9c0:	e03ffe15 	stw	zero,-8(fp)
    snmp_inc_tcpattemptfails();
    break;
 181b9c4:	00002306 	br	181ba54 <tcp_close_shutdown+0x31c>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 181b9c8:	e13ffe17 	ldw	r4,-8(fp)
 181b9cc:	181df640 	call	181df64 <tcp_send_fin>
 181b9d0:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
 181b9d4:	e0bffd07 	ldb	r2,-12(fp)
 181b9d8:	1000191e 	bne	r2,zero,181ba40 <tcp_close_shutdown+0x308>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
 181b9dc:	e0bffe17 	ldw	r2,-8(fp)
 181b9e0:	00c00144 	movi	r3,5
 181b9e4:	10c00615 	stw	r3,24(r2)
    }
    break;
 181b9e8:	00001506 	br	181ba40 <tcp_close_shutdown+0x308>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 181b9ec:	e13ffe17 	ldw	r4,-8(fp)
 181b9f0:	181df640 	call	181df64 <tcp_send_fin>
 181b9f4:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
 181b9f8:	e0bffd07 	ldb	r2,-12(fp)
 181b9fc:	1000121e 	bne	r2,zero,181ba48 <tcp_close_shutdown+0x310>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
 181ba00:	e0bffe17 	ldw	r2,-8(fp)
 181ba04:	00c00144 	movi	r3,5
 181ba08:	10c00615 	stw	r3,24(r2)
    }
    break;
 181ba0c:	00000e06 	br	181ba48 <tcp_close_shutdown+0x310>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 181ba10:	e13ffe17 	ldw	r4,-8(fp)
 181ba14:	181df640 	call	181df64 <tcp_send_fin>
 181ba18:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
 181ba1c:	e0bffd07 	ldb	r2,-12(fp)
 181ba20:	10000b1e 	bne	r2,zero,181ba50 <tcp_close_shutdown+0x318>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
 181ba24:	e0bffe17 	ldw	r2,-8(fp)
 181ba28:	00c00244 	movi	r3,9
 181ba2c:	10c00615 	stw	r3,24(r2)
    }
    break;
 181ba30:	00000706 	br	181ba50 <tcp_close_shutdown+0x318>
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
 181ba34:	e03ffd05 	stb	zero,-12(fp)
    pcb = NULL;
 181ba38:	e03ffe15 	stw	zero,-8(fp)
    break;
 181ba3c:	00000506 	br	181ba54 <tcp_close_shutdown+0x31c>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
    }
    break;
 181ba40:	0001883a 	nop
 181ba44:	00000306 	br	181ba54 <tcp_close_shutdown+0x31c>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
    }
    break;
 181ba48:	0001883a 	nop
 181ba4c:	00000106 	br	181ba54 <tcp_close_shutdown+0x31c>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
    }
    break;
 181ba50:	0001883a 	nop
    err = ERR_OK;
    pcb = NULL;
    break;
  }

  if (pcb != NULL && err == ERR_OK) {
 181ba54:	e0bffe17 	ldw	r2,-8(fp)
 181ba58:	10000426 	beq	r2,zero,181ba6c <tcp_close_shutdown+0x334>
 181ba5c:	e0bffd07 	ldb	r2,-12(fp)
 181ba60:	1000021e 	bne	r2,zero,181ba6c <tcp_close_shutdown+0x334>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
 181ba64:	e13ffe17 	ldw	r4,-8(fp)
 181ba68:	181f4fc0 	call	181f4fc <tcp_output>
  }
  return err;
 181ba6c:	e0bffd03 	ldbu	r2,-12(fp)
}
 181ba70:	e037883a 	mov	sp,fp
 181ba74:	dfc00117 	ldw	ra,4(sp)
 181ba78:	df000017 	ldw	fp,0(sp)
 181ba7c:	dec00204 	addi	sp,sp,8
 181ba80:	f800283a 	ret

0181ba84 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 181ba84:	defffd04 	addi	sp,sp,-12
 181ba88:	dfc00215 	stw	ra,8(sp)
 181ba8c:	df000115 	stw	fp,4(sp)
 181ba90:	df000104 	addi	fp,sp,4
 181ba94:	e13fff15 	stw	r4,-4(fp)
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
 181ba98:	e0bfff17 	ldw	r2,-4(fp)
 181ba9c:	10800617 	ldw	r2,24(r2)
 181baa0:	10800060 	cmpeqi	r2,r2,1
 181baa4:	1000061e 	bne	r2,zero,181bac0 <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 181baa8:	e0bfff17 	ldw	r2,-4(fp)
 181baac:	10800883 	ldbu	r2,34(r2)
 181bab0:	10800414 	ori	r2,r2,16
 181bab4:	1007883a 	mov	r3,r2
 181bab8:	e0bfff17 	ldw	r2,-4(fp)
 181babc:	10c00885 	stb	r3,34(r2)
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 181bac0:	01400044 	movi	r5,1
 181bac4:	e13fff17 	ldw	r4,-4(fp)
 181bac8:	181b7380 	call	181b738 <tcp_close_shutdown>
}
 181bacc:	e037883a 	mov	sp,fp
 181bad0:	dfc00117 	ldw	ra,4(sp)
 181bad4:	df000017 	ldw	fp,0(sp)
 181bad8:	dec00204 	addi	sp,sp,8
 181badc:	f800283a 	ret

0181bae0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 181bae0:	defffb04 	addi	sp,sp,-20
 181bae4:	dfc00415 	stw	ra,16(sp)
 181bae8:	df000315 	stw	fp,12(sp)
 181baec:	df000304 	addi	fp,sp,12
 181baf0:	e13ffd15 	stw	r4,-12(fp)
 181baf4:	e17ffe15 	stw	r5,-8(fp)
 181baf8:	e1bfff15 	stw	r6,-4(fp)
  if (pcb->state == LISTEN) {
 181bafc:	e0bffd17 	ldw	r2,-12(fp)
 181bb00:	10800617 	ldw	r2,24(r2)
 181bb04:	10800058 	cmpnei	r2,r2,1
 181bb08:	1000021e 	bne	r2,zero,181bb14 <tcp_shutdown+0x34>
    return ERR_CONN;
 181bb0c:	00bffcc4 	movi	r2,-13
 181bb10:	00002a06 	br	181bbbc <tcp_shutdown+0xdc>
  }
  if (shut_rx) {
 181bb14:	e0bffe17 	ldw	r2,-8(fp)
 181bb18:	10001526 	beq	r2,zero,181bb70 <tcp_shutdown+0x90>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 181bb1c:	e0bffd17 	ldw	r2,-12(fp)
 181bb20:	10800883 	ldbu	r2,34(r2)
 181bb24:	10800414 	ori	r2,r2,16
 181bb28:	1007883a 	mov	r3,r2
 181bb2c:	e0bffd17 	ldw	r2,-12(fp)
 181bb30:	10c00885 	stb	r3,34(r2)
    if (shut_tx) {
 181bb34:	e0bfff17 	ldw	r2,-4(fp)
 181bb38:	10000426 	beq	r2,zero,181bb4c <tcp_shutdown+0x6c>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 181bb3c:	01400044 	movi	r5,1
 181bb40:	e13ffd17 	ldw	r4,-12(fp)
 181bb44:	181b7380 	call	181b738 <tcp_close_shutdown>
 181bb48:	00001c06 	br	181bbbc <tcp_shutdown+0xdc>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 181bb4c:	e0bffd17 	ldw	r2,-12(fp)
 181bb50:	10801f17 	ldw	r2,124(r2)
 181bb54:	10000626 	beq	r2,zero,181bb70 <tcp_shutdown+0x90>
      pbuf_free(pcb->refused_data);
 181bb58:	e0bffd17 	ldw	r2,-12(fp)
 181bb5c:	10801f17 	ldw	r2,124(r2)
 181bb60:	1009883a 	mov	r4,r2
 181bb64:	181a9040 	call	181a904 <pbuf_free>
      pcb->refused_data = NULL;
 181bb68:	e0bffd17 	ldw	r2,-12(fp)
 181bb6c:	10001f15 	stw	zero,124(r2)
    }
  }
  if (shut_tx) {
 181bb70:	e0bfff17 	ldw	r2,-4(fp)
 181bb74:	10001026 	beq	r2,zero,181bbb8 <tcp_shutdown+0xd8>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 181bb78:	e0bffd17 	ldw	r2,-12(fp)
 181bb7c:	10800617 	ldw	r2,24(r2)
 181bb80:	10c000f0 	cmpltui	r3,r2,3
 181bb84:	18000a1e 	bne	r3,zero,181bbb0 <tcp_shutdown+0xd0>
 181bb88:	10c00170 	cmpltui	r3,r2,5
 181bb8c:	1800021e 	bne	r3,zero,181bb98 <tcp_shutdown+0xb8>
 181bb90:	108001e0 	cmpeqi	r2,r2,7
 181bb94:	10000626 	beq	r2,zero,181bbb0 <tcp_shutdown+0xd0>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, shut_rx);
 181bb98:	e0bffe17 	ldw	r2,-8(fp)
 181bb9c:	10803fcc 	andi	r2,r2,255
 181bba0:	100b883a 	mov	r5,r2
 181bba4:	e13ffd17 	ldw	r4,-12(fp)
 181bba8:	181b7380 	call	181b738 <tcp_close_shutdown>
 181bbac:	00000306 	br	181bbbc <tcp_shutdown+0xdc>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 181bbb0:	00bffcc4 	movi	r2,-13
 181bbb4:	00000106 	br	181bbbc <tcp_shutdown+0xdc>
    }
  }
  return ERR_OK;
 181bbb8:	0005883a 	mov	r2,zero
}
 181bbbc:	e037883a 	mov	sp,fp
 181bbc0:	dfc00117 	ldw	ra,4(sp)
 181bbc4:	df000017 	ldw	fp,0(sp)
 181bbc8:	dec00204 	addi	sp,sp,8
 181bbcc:	f800283a 	ret

0181bbd0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 181bbd0:	defff604 	addi	sp,sp,-40
 181bbd4:	dfc00915 	stw	ra,36(sp)
 181bbd8:	df000815 	stw	fp,32(sp)
 181bbdc:	df000804 	addi	fp,sp,32
 181bbe0:	e13ffe15 	stw	r4,-8(fp)
 181bbe4:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 181bbe8:	e0bffe17 	ldw	r2,-8(fp)
 181bbec:	10800617 	ldw	r2,24(r2)
 181bbf0:	10800298 	cmpnei	r2,r2,10
 181bbf4:	1000071e 	bne	r2,zero,181bc14 <tcp_abandon+0x44>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 181bbf8:	e17ffe17 	ldw	r5,-8(fp)
 181bbfc:	d127fc04 	addi	r4,gp,-24592
 181bc00:	181d9780 	call	181d978 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 181bc04:	e17ffe17 	ldw	r5,-8(fp)
 181bc08:	01000084 	movi	r4,2
 181bc0c:	18341e40 	call	18341e4 <memp_free>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
 181bc10:	00004106 	br	181bd18 <tcp_abandon+0x148>
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
  } else {
    seqno = pcb->snd_nxt;
 181bc14:	e0bffe17 	ldw	r2,-8(fp)
 181bc18:	10801517 	ldw	r2,84(r2)
 181bc1c:	e0bffa15 	stw	r2,-24(fp)
    ackno = pcb->rcv_nxt;
 181bc20:	e0bffe17 	ldw	r2,-8(fp)
 181bc24:	10800b17 	ldw	r2,44(r2)
 181bc28:	e0bffb15 	stw	r2,-20(fp)
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 181bc2c:	e0bffe17 	ldw	r2,-8(fp)
 181bc30:	10802417 	ldw	r2,144(r2)
 181bc34:	e0bffc15 	stw	r2,-16(fp)
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 181bc38:	e0bffe17 	ldw	r2,-8(fp)
 181bc3c:	10800417 	ldw	r2,16(r2)
 181bc40:	e0bffd15 	stw	r2,-12(fp)
    TCP_PCB_REMOVE_ACTIVE(pcb);
 181bc44:	e17ffe17 	ldw	r5,-8(fp)
 181bc48:	d127f704 	addi	r4,gp,-24612
 181bc4c:	181d9780 	call	181d978 <tcp_pcb_remove>
 181bc50:	00800044 	movi	r2,1
 181bc54:	d0a7f685 	stb	r2,-24614(gp)
    if (pcb->unacked != NULL) {
 181bc58:	e0bffe17 	ldw	r2,-8(fp)
 181bc5c:	10801d17 	ldw	r2,116(r2)
 181bc60:	10000426 	beq	r2,zero,181bc74 <tcp_abandon+0xa4>
      tcp_segs_free(pcb->unacked);
 181bc64:	e0bffe17 	ldw	r2,-8(fp)
 181bc68:	10801d17 	ldw	r2,116(r2)
 181bc6c:	1009883a 	mov	r4,r2
 181bc70:	181d1580 	call	181d158 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 181bc74:	e0bffe17 	ldw	r2,-8(fp)
 181bc78:	10801c17 	ldw	r2,112(r2)
 181bc7c:	10000426 	beq	r2,zero,181bc90 <tcp_abandon+0xc0>
      tcp_segs_free(pcb->unsent);
 181bc80:	e0bffe17 	ldw	r2,-8(fp)
 181bc84:	10801c17 	ldw	r2,112(r2)
 181bc88:	1009883a 	mov	r4,r2
 181bc8c:	181d1580 	call	181d158 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL) {
 181bc90:	e0bffe17 	ldw	r2,-8(fp)
 181bc94:	10801e17 	ldw	r2,120(r2)
 181bc98:	10000426 	beq	r2,zero,181bcac <tcp_abandon+0xdc>
      tcp_segs_free(pcb->ooseq);
 181bc9c:	e0bffe17 	ldw	r2,-8(fp)
 181bca0:	10801e17 	ldw	r2,120(r2)
 181bca4:	1009883a 	mov	r4,r2
 181bca8:	181d1580 	call	181d158 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    if (reset) {
 181bcac:	e0bfff17 	ldw	r2,-4(fp)
 181bcb0:	10001026 	beq	r2,zero,181bcf4 <tcp_abandon+0x124>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
 181bcb4:	e13ffe17 	ldw	r4,-8(fp)
 181bcb8:	e0bffe17 	ldw	r2,-8(fp)
 181bcbc:	11400104 	addi	r5,r2,4
 181bcc0:	e0bffe17 	ldw	r2,-8(fp)
 181bcc4:	1080078b 	ldhu	r2,30(r2)
 181bcc8:	10bfffcc 	andi	r2,r2,65535
 181bccc:	e0fffe17 	ldw	r3,-8(fp)
 181bcd0:	18c0080b 	ldhu	r3,32(r3)
 181bcd4:	18ffffcc 	andi	r3,r3,65535
 181bcd8:	d8c00115 	stw	r3,4(sp)
 181bcdc:	d8800015 	stw	r2,0(sp)
 181bce0:	280f883a 	mov	r7,r5
 181bce4:	200d883a 	mov	r6,r4
 181bce8:	e17ffb17 	ldw	r5,-20(fp)
 181bcec:	e13ffa17 	ldw	r4,-24(fp)
 181bcf0:	18205a80 	call	18205a8 <tcp_rst>
    }
    memp_free(MEMP_TCP_PCB, pcb);
 181bcf4:	e17ffe17 	ldw	r5,-8(fp)
 181bcf8:	01000084 	movi	r4,2
 181bcfc:	18341e40 	call	18341e4 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 181bd00:	e0bffc17 	ldw	r2,-16(fp)
 181bd04:	10000426 	beq	r2,zero,181bd18 <tcp_abandon+0x148>
 181bd08:	e0bffc17 	ldw	r2,-16(fp)
 181bd0c:	017ffd84 	movi	r5,-10
 181bd10:	e13ffd17 	ldw	r4,-12(fp)
 181bd14:	103ee83a 	callr	r2
  }
}
 181bd18:	0001883a 	nop
 181bd1c:	e037883a 	mov	sp,fp
 181bd20:	dfc00117 	ldw	ra,4(sp)
 181bd24:	df000017 	ldw	fp,0(sp)
 181bd28:	dec00204 	addi	sp,sp,8
 181bd2c:	f800283a 	ret

0181bd30 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 181bd30:	defffd04 	addi	sp,sp,-12
 181bd34:	dfc00215 	stw	ra,8(sp)
 181bd38:	df000115 	stw	fp,4(sp)
 181bd3c:	df000104 	addi	fp,sp,4
 181bd40:	e13fff15 	stw	r4,-4(fp)
  tcp_abandon(pcb, 1);
 181bd44:	01400044 	movi	r5,1
 181bd48:	e13fff17 	ldw	r4,-4(fp)
 181bd4c:	181bbd00 	call	181bbd0 <tcp_abandon>
}
 181bd50:	0001883a 	nop
 181bd54:	e037883a 	mov	sp,fp
 181bd58:	dfc00117 	ldw	ra,4(sp)
 181bd5c:	df000017 	ldw	fp,0(sp)
 181bd60:	dec00204 	addi	sp,sp,8
 181bd64:	f800283a 	ret

0181bd68 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 181bd68:	defff804 	addi	sp,sp,-32
 181bd6c:	dfc00715 	stw	ra,28(sp)
 181bd70:	df000615 	stw	fp,24(sp)
 181bd74:	df000604 	addi	fp,sp,24
 181bd78:	e13ffd15 	stw	r4,-12(fp)
 181bd7c:	e17ffe15 	stw	r5,-8(fp)
 181bd80:	3005883a 	mov	r2,r6
 181bd84:	e0bfff0d 	sth	r2,-4(fp)
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 181bd88:	00800104 	movi	r2,4
 181bd8c:	e0bffb15 	stw	r2,-20(fp)
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 181bd90:	e0bffd17 	ldw	r2,-12(fp)
 181bd94:	10800617 	ldw	r2,24(r2)
 181bd98:	10000926 	beq	r2,zero,181bdc0 <tcp_bind+0x58>
 181bd9c:	01c06134 	movhi	r7,388
 181bda0:	39c47f04 	addi	r7,r7,4604
 181bda4:	01806dc4 	movi	r6,439
 181bda8:	01406134 	movhi	r5,388
 181bdac:	29448404 	addi	r5,r5,4624
 181bdb0:	01006134 	movhi	r4,388
 181bdb4:	21048e04 	addi	r4,r4,4664
 181bdb8:	1800bd80 	call	1800bd8 <printf>
 181bdbc:	003fff06 	br	181bdbc <__alt_mem_mem_0+0xff7fbdbc>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 181bdc0:	e0bffd17 	ldw	r2,-12(fp)
 181bdc4:	10800203 	ldbu	r2,8(r2)
 181bdc8:	10803fcc 	andi	r2,r2,255
 181bdcc:	1080010c 	andi	r2,r2,4
 181bdd0:	10000226 	beq	r2,zero,181bddc <tcp_bind+0x74>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 181bdd4:	008000c4 	movi	r2,3
 181bdd8:	e0bffb15 	stw	r2,-20(fp)
  }
#endif /* SO_REUSE */

  if (port == 0) {
 181bddc:	e0bfff0b 	ldhu	r2,-4(fp)
 181bde0:	1000061e 	bne	r2,zero,181bdfc <tcp_bind+0x94>
    port = tcp_new_port();
 181bde4:	181c3680 	call	181c368 <tcp_new_port>
 181bde8:	e0bfff0d 	sth	r2,-4(fp)
    if (port == 0) {
 181bdec:	e0bfff0b 	ldhu	r2,-4(fp)
 181bdf0:	1000021e 	bne	r2,zero,181bdfc <tcp_bind+0x94>
      return ERR_BUF;
 181bdf4:	00bfff84 	movi	r2,-2
 181bdf8:	00004a06 	br	181bf24 <tcp_bind+0x1bc>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
 181bdfc:	e03ffa15 	stw	zero,-24(fp)
 181be00:	00003206 	br	181becc <tcp_bind+0x164>
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 181be04:	00806134 	movhi	r2,388
 181be08:	10847b04 	addi	r2,r2,4588
 181be0c:	e0fffa17 	ldw	r3,-24(fp)
 181be10:	18c7883a 	add	r3,r3,r3
 181be14:	18c7883a 	add	r3,r3,r3
 181be18:	10c5883a 	add	r2,r2,r3
 181be1c:	10800017 	ldw	r2,0(r2)
 181be20:	10800017 	ldw	r2,0(r2)
 181be24:	e0bffc15 	stw	r2,-16(fp)
 181be28:	00002306 	br	181beb8 <tcp_bind+0x150>
      if (cpcb->local_port == port) {
 181be2c:	e0bffc17 	ldw	r2,-16(fp)
 181be30:	1080078b 	ldhu	r2,30(r2)
 181be34:	10ffffcc 	andi	r3,r2,65535
 181be38:	e0bfff0b 	ldhu	r2,-4(fp)
 181be3c:	18801b1e 	bne	r3,r2,181beac <tcp_bind+0x144>
#if SO_REUSE
        /* Omit checking for the same port if both pcbs have REUSEADDR set.
           For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
           tcp_connect. */
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 181be40:	e0bffd17 	ldw	r2,-12(fp)
 181be44:	10800203 	ldbu	r2,8(r2)
 181be48:	10803fcc 	andi	r2,r2,255
 181be4c:	1080010c 	andi	r2,r2,4
 181be50:	10000526 	beq	r2,zero,181be68 <tcp_bind+0x100>
            !ip_get_option(cpcb, SOF_REUSEADDR))
 181be54:	e0bffc17 	ldw	r2,-16(fp)
 181be58:	10800203 	ldbu	r2,8(r2)
 181be5c:	10803fcc 	andi	r2,r2,255
 181be60:	1080010c 	andi	r2,r2,4
      if (cpcb->local_port == port) {
#if SO_REUSE
        /* Omit checking for the same port if both pcbs have REUSEADDR set.
           For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
           tcp_connect. */
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 181be64:	1000111e 	bne	r2,zero,181beac <tcp_bind+0x144>
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
 181be68:	e0bffc17 	ldw	r2,-16(fp)
 181be6c:	10000d26 	beq	r2,zero,181bea4 <tcp_bind+0x13c>
 181be70:	e0bffc17 	ldw	r2,-16(fp)
 181be74:	10800017 	ldw	r2,0(r2)
 181be78:	10000a26 	beq	r2,zero,181bea4 <tcp_bind+0x13c>
 181be7c:	e0bffe17 	ldw	r2,-8(fp)
 181be80:	10000826 	beq	r2,zero,181bea4 <tcp_bind+0x13c>
              ip_addr_isany(ipaddr) ||
 181be84:	e0bffe17 	ldw	r2,-8(fp)
 181be88:	10800017 	ldw	r2,0(r2)
 181be8c:	10000526 	beq	r2,zero,181bea4 <tcp_bind+0x13c>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
 181be90:	e0bffc17 	ldw	r2,-16(fp)
 181be94:	10c00017 	ldw	r3,0(r2)
 181be98:	e0bffe17 	ldw	r2,-8(fp)
 181be9c:	10800017 	ldw	r2,0(r2)
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
              ip_addr_isany(ipaddr) ||
 181bea0:	1880021e 	bne	r3,r2,181beac <tcp_bind+0x144>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
            return ERR_USE;
 181bea4:	00bffe04 	movi	r2,-8
 181bea8:	00001e06 	br	181bf24 <tcp_bind+0x1bc>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 181beac:	e0bffc17 	ldw	r2,-16(fp)
 181beb0:	10800317 	ldw	r2,12(r2)
 181beb4:	e0bffc15 	stw	r2,-16(fp)
 181beb8:	e0bffc17 	ldw	r2,-16(fp)
 181bebc:	103fdb1e 	bne	r2,zero,181be2c <__alt_mem_mem_0+0xff7fbe2c>
      return ERR_BUF;
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
 181bec0:	e0bffa17 	ldw	r2,-24(fp)
 181bec4:	10800044 	addi	r2,r2,1
 181bec8:	e0bffa15 	stw	r2,-24(fp)
 181becc:	e0fffa17 	ldw	r3,-24(fp)
 181bed0:	e0bffb17 	ldw	r2,-20(fp)
 181bed4:	18bfcb16 	blt	r3,r2,181be04 <__alt_mem_mem_0+0xff7fbe04>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 181bed8:	e0bffe17 	ldw	r2,-8(fp)
 181bedc:	10000726 	beq	r2,zero,181befc <tcp_bind+0x194>
 181bee0:	e0bffe17 	ldw	r2,-8(fp)
 181bee4:	10800017 	ldw	r2,0(r2)
 181bee8:	10000426 	beq	r2,zero,181befc <tcp_bind+0x194>
    pcb->local_ip = *ipaddr;
 181beec:	e0bffd17 	ldw	r2,-12(fp)
 181bef0:	e0fffe17 	ldw	r3,-8(fp)
 181bef4:	18c00017 	ldw	r3,0(r3)
 181bef8:	10c00015 	stw	r3,0(r2)
  }
  pcb->local_port = port;
 181befc:	e0bffd17 	ldw	r2,-12(fp)
 181bf00:	e0ffff0b 	ldhu	r3,-4(fp)
 181bf04:	10c0078d 	sth	r3,30(r2)
  TCP_REG(&tcp_bound_pcbs, pcb);
 181bf08:	d0e7fb17 	ldw	r3,-24596(gp)
 181bf0c:	e0bffd17 	ldw	r2,-12(fp)
 181bf10:	10c00315 	stw	r3,12(r2)
 181bf14:	e0bffd17 	ldw	r2,-12(fp)
 181bf18:	d0a7fb15 	stw	r2,-24596(gp)
 181bf1c:	18212d00 	call	18212d0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 181bf20:	0005883a 	mov	r2,zero
}
 181bf24:	e037883a 	mov	sp,fp
 181bf28:	dfc00117 	ldw	ra,4(sp)
 181bf2c:	df000017 	ldw	fp,0(sp)
 181bf30:	dec00204 	addi	sp,sp,8
 181bf34:	f800283a 	ret

0181bf38 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 181bf38:	defffc04 	addi	sp,sp,-16
 181bf3c:	df000315 	stw	fp,12(sp)
 181bf40:	df000304 	addi	fp,sp,12
 181bf44:	e13ffd15 	stw	r4,-12(fp)
 181bf48:	e17ffe15 	stw	r5,-8(fp)
 181bf4c:	3005883a 	mov	r2,r6
 181bf50:	e0bfff05 	stb	r2,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
 181bf54:	00bffd84 	movi	r2,-10
}
 181bf58:	e037883a 	mov	sp,fp
 181bf5c:	df000017 	ldw	fp,0(sp)
 181bf60:	dec00104 	addi	sp,sp,4
 181bf64:	f800283a 	ret

0181bf68 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 181bf68:	defffb04 	addi	sp,sp,-20
 181bf6c:	dfc00415 	stw	ra,16(sp)
 181bf70:	df000315 	stw	fp,12(sp)
 181bf74:	df000304 	addi	fp,sp,12
 181bf78:	e13ffe15 	stw	r4,-8(fp)
 181bf7c:	2805883a 	mov	r2,r5
 181bf80:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 181bf84:	e0bffe17 	ldw	r2,-8(fp)
 181bf88:	10800617 	ldw	r2,24(r2)
 181bf8c:	10000926 	beq	r2,zero,181bfb4 <tcp_listen_with_backlog+0x4c>
 181bf90:	01c06134 	movhi	r7,388
 181bf94:	39c47f04 	addi	r7,r7,4604
 181bf98:	01808304 	movi	r6,524
 181bf9c:	01406134 	movhi	r5,388
 181bfa0:	29449a04 	addi	r5,r5,4712
 181bfa4:	01006134 	movhi	r4,388
 181bfa8:	21048e04 	addi	r4,r4,4664
 181bfac:	1800bd80 	call	1800bd8 <printf>
 181bfb0:	003fff06 	br	181bfb0 <__alt_mem_mem_0+0xff7fbfb0>

  /* already listening? */
  if (pcb->state == LISTEN) {
 181bfb4:	e0bffe17 	ldw	r2,-8(fp)
 181bfb8:	10800617 	ldw	r2,24(r2)
 181bfbc:	10800058 	cmpnei	r2,r2,1
 181bfc0:	1000021e 	bne	r2,zero,181bfcc <tcp_listen_with_backlog+0x64>
    return pcb;
 181bfc4:	e0bffe17 	ldw	r2,-8(fp)
 181bfc8:	00007c06 	br	181c1bc <tcp_listen_with_backlog+0x254>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 181bfcc:	e0bffe17 	ldw	r2,-8(fp)
 181bfd0:	10800203 	ldbu	r2,8(r2)
 181bfd4:	10803fcc 	andi	r2,r2,255
 181bfd8:	1080010c 	andi	r2,r2,4
 181bfdc:	10001626 	beq	r2,zero,181c038 <tcp_listen_with_backlog+0xd0>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 181bfe0:	d0a7f917 	ldw	r2,-24604(gp)
 181bfe4:	e0bffd15 	stw	r2,-12(fp)
 181bfe8:	00001106 	br	181c030 <tcp_listen_with_backlog+0xc8>
      if (lpcb->local_port == pcb->local_port) {
 181bfec:	e0bffd17 	ldw	r2,-12(fp)
 181bff0:	10c0078b 	ldhu	r3,30(r2)
 181bff4:	e0bffe17 	ldw	r2,-8(fp)
 181bff8:	1080078b 	ldhu	r2,30(r2)
 181bffc:	18ffffcc 	andi	r3,r3,65535
 181c000:	10bfffcc 	andi	r2,r2,65535
 181c004:	1880071e 	bne	r3,r2,181c024 <tcp_listen_with_backlog+0xbc>
        if (ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
 181c008:	e0bffd17 	ldw	r2,-12(fp)
 181c00c:	10c00017 	ldw	r3,0(r2)
 181c010:	e0bffe17 	ldw	r2,-8(fp)
 181c014:	10800017 	ldw	r2,0(r2)
 181c018:	1880021e 	bne	r3,r2,181c024 <tcp_listen_with_backlog+0xbc>
          /* this address/port is already used */
          return NULL;
 181c01c:	0005883a 	mov	r2,zero
 181c020:	00006606 	br	181c1bc <tcp_listen_with_backlog+0x254>
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 181c024:	e0bffd17 	ldw	r2,-12(fp)
 181c028:	10800317 	ldw	r2,12(r2)
 181c02c:	e0bffd15 	stw	r2,-12(fp)
 181c030:	e0bffd17 	ldw	r2,-12(fp)
 181c034:	103fed1e 	bne	r2,zero,181bfec <__alt_mem_mem_0+0xff7fbfec>
        }
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 181c038:	010000c4 	movi	r4,3
 181c03c:	18340280 	call	1834028 <memp_malloc>
 181c040:	e0bffd15 	stw	r2,-12(fp)
  if (lpcb == NULL) {
 181c044:	e0bffd17 	ldw	r2,-12(fp)
 181c048:	1000021e 	bne	r2,zero,181c054 <tcp_listen_with_backlog+0xec>
    return NULL;
 181c04c:	0005883a 	mov	r2,zero
 181c050:	00005a06 	br	181c1bc <tcp_listen_with_backlog+0x254>
  }
  lpcb->callback_arg = pcb->callback_arg;
 181c054:	e0bffe17 	ldw	r2,-8(fp)
 181c058:	10c00417 	ldw	r3,16(r2)
 181c05c:	e0bffd17 	ldw	r2,-12(fp)
 181c060:	10c00415 	stw	r3,16(r2)
  lpcb->local_port = pcb->local_port;
 181c064:	e0bffe17 	ldw	r2,-8(fp)
 181c068:	10c0078b 	ldhu	r3,30(r2)
 181c06c:	e0bffd17 	ldw	r2,-12(fp)
 181c070:	10c0078d 	sth	r3,30(r2)
  lpcb->state = LISTEN;
 181c074:	e0bffd17 	ldw	r2,-12(fp)
 181c078:	00c00044 	movi	r3,1
 181c07c:	10c00615 	stw	r3,24(r2)
  lpcb->prio = pcb->prio;
 181c080:	e0bffe17 	ldw	r2,-8(fp)
 181c084:	10c00703 	ldbu	r3,28(r2)
 181c088:	e0bffd17 	ldw	r2,-12(fp)
 181c08c:	10c00705 	stb	r3,28(r2)
  lpcb->so_options = pcb->so_options;
 181c090:	e0bffe17 	ldw	r2,-8(fp)
 181c094:	10c00203 	ldbu	r3,8(r2)
 181c098:	e0bffd17 	ldw	r2,-12(fp)
 181c09c:	10c00205 	stb	r3,8(r2)
  ip_set_option(lpcb, SOF_ACCEPTCONN);
 181c0a0:	e0bffd17 	ldw	r2,-12(fp)
 181c0a4:	10800203 	ldbu	r2,8(r2)
 181c0a8:	10800094 	ori	r2,r2,2
 181c0ac:	1007883a 	mov	r3,r2
 181c0b0:	e0bffd17 	ldw	r2,-12(fp)
 181c0b4:	10c00205 	stb	r3,8(r2)
  lpcb->ttl = pcb->ttl;
 181c0b8:	e0bffe17 	ldw	r2,-8(fp)
 181c0bc:	10c00283 	ldbu	r3,10(r2)
 181c0c0:	e0bffd17 	ldw	r2,-12(fp)
 181c0c4:	10c00285 	stb	r3,10(r2)
  lpcb->tos = pcb->tos;
 181c0c8:	e0bffe17 	ldw	r2,-8(fp)
 181c0cc:	10c00243 	ldbu	r3,9(r2)
 181c0d0:	e0bffd17 	ldw	r2,-12(fp)
 181c0d4:	10c00245 	stb	r3,9(r2)
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 181c0d8:	e0bffe17 	ldw	r2,-8(fp)
 181c0dc:	10c00017 	ldw	r3,0(r2)
 181c0e0:	e0bffd17 	ldw	r2,-12(fp)
 181c0e4:	10c00015 	stw	r3,0(r2)
  if (pcb->local_port != 0) {
 181c0e8:	e0bffe17 	ldw	r2,-8(fp)
 181c0ec:	1080078b 	ldhu	r2,30(r2)
 181c0f0:	10bfffcc 	andi	r2,r2,65535
 181c0f4:	10001a26 	beq	r2,zero,181c160 <tcp_listen_with_backlog+0x1f8>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 181c0f8:	d0e7fb17 	ldw	r3,-24596(gp)
 181c0fc:	e0bffe17 	ldw	r2,-8(fp)
 181c100:	1880041e 	bne	r3,r2,181c114 <tcp_listen_with_backlog+0x1ac>
 181c104:	d0a7fb17 	ldw	r2,-24596(gp)
 181c108:	10800317 	ldw	r2,12(r2)
 181c10c:	d0a7fb15 	stw	r2,-24596(gp)
 181c110:	00001106 	br	181c158 <tcp_listen_with_backlog+0x1f0>
 181c114:	d0a7fb17 	ldw	r2,-24596(gp)
 181c118:	d0a7fa15 	stw	r2,-24600(gp)
 181c11c:	00000c06 	br	181c150 <tcp_listen_with_backlog+0x1e8>
 181c120:	d0a7fa17 	ldw	r2,-24600(gp)
 181c124:	10c00317 	ldw	r3,12(r2)
 181c128:	e0bffe17 	ldw	r2,-8(fp)
 181c12c:	1880051e 	bne	r3,r2,181c144 <tcp_listen_with_backlog+0x1dc>
 181c130:	d0a7fa17 	ldw	r2,-24600(gp)
 181c134:	e0fffe17 	ldw	r3,-8(fp)
 181c138:	18c00317 	ldw	r3,12(r3)
 181c13c:	10c00315 	stw	r3,12(r2)
 181c140:	00000506 	br	181c158 <tcp_listen_with_backlog+0x1f0>
 181c144:	d0a7fa17 	ldw	r2,-24600(gp)
 181c148:	10800317 	ldw	r2,12(r2)
 181c14c:	d0a7fa15 	stw	r2,-24600(gp)
 181c150:	d0a7fa17 	ldw	r2,-24600(gp)
 181c154:	103ff21e 	bne	r2,zero,181c120 <__alt_mem_mem_0+0xff7fc120>
 181c158:	e0bffe17 	ldw	r2,-8(fp)
 181c15c:	10000315 	stw	zero,12(r2)
  }
  memp_free(MEMP_TCP_PCB, pcb);
 181c160:	e17ffe17 	ldw	r5,-8(fp)
 181c164:	01000084 	movi	r4,2
 181c168:	18341e40 	call	18341e4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 181c16c:	e0fffd17 	ldw	r3,-12(fp)
 181c170:	008060b4 	movhi	r2,386
 181c174:	10afce04 	addi	r2,r2,-16584
 181c178:	18800515 	stw	r2,20(r3)
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
 181c17c:	e0bffd17 	ldw	r2,-12(fp)
 181c180:	10000845 	stb	zero,33(r2)
  lpcb->backlog = (backlog ? backlog : 1);
 181c184:	e0bfff03 	ldbu	r2,-4(fp)
 181c188:	10000226 	beq	r2,zero,181c194 <tcp_listen_with_backlog+0x22c>
 181c18c:	e0bfff03 	ldbu	r2,-4(fp)
 181c190:	00000106 	br	181c198 <tcp_listen_with_backlog+0x230>
 181c194:	00800044 	movi	r2,1
 181c198:	e0fffd17 	ldw	r3,-12(fp)
 181c19c:	18800805 	stb	r2,32(r3)
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 181c1a0:	d0e7f917 	ldw	r3,-24604(gp)
 181c1a4:	e0bffd17 	ldw	r2,-12(fp)
 181c1a8:	10c00315 	stw	r3,12(r2)
 181c1ac:	e0bffd17 	ldw	r2,-12(fp)
 181c1b0:	d0a7f915 	stw	r2,-24604(gp)
 181c1b4:	18212d00 	call	18212d0 <tcp_timer_needed>
  return (struct tcp_pcb *)lpcb;
 181c1b8:	e0bffd17 	ldw	r2,-12(fp)
}
 181c1bc:	e037883a 	mov	sp,fp
 181c1c0:	dfc00117 	ldw	ra,4(sp)
 181c1c4:	df000017 	ldw	fp,0(sp)
 181c1c8:	dec00204 	addi	sp,sp,8
 181c1cc:	f800283a 	ret

0181c1d0 <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 181c1d0:	defffc04 	addi	sp,sp,-16
 181c1d4:	df000315 	stw	fp,12(sp)
 181c1d8:	df000304 	addi	fp,sp,12
 181c1dc:	e13fff15 	stw	r4,-4(fp)
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 181c1e0:	e0bfff17 	ldw	r2,-4(fp)
 181c1e4:	10c00b17 	ldw	r3,44(r2)
 181c1e8:	e0bfff17 	ldw	r2,-4(fp)
 181c1ec:	10800c0b 	ldhu	r2,48(r2)
 181c1f0:	10bfffcc 	andi	r2,r2,65535
 181c1f4:	1885883a 	add	r2,r3,r2
 181c1f8:	e0bffd15 	stw	r2,-12(fp)

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 181c1fc:	e0bfff17 	ldw	r2,-4(fp)
 181c200:	10c00d17 	ldw	r3,52(r2)
 181c204:	e0bfff17 	ldw	r2,-4(fp)
 181c208:	10800e8b 	ldhu	r2,58(r2)
 181c20c:	10bfffcc 	andi	r2,r2,65535
 181c210:	10840068 	cmpgeui	r2,r2,4097
 181c214:	1000041e 	bne	r2,zero,181c228 <tcp_update_rcv_ann_wnd+0x58>
 181c218:	e0bfff17 	ldw	r2,-4(fp)
 181c21c:	10800e8b 	ldhu	r2,58(r2)
 181c220:	10bfffcc 	andi	r2,r2,65535
 181c224:	00000106 	br	181c22c <tcp_update_rcv_ann_wnd+0x5c>
 181c228:	00840004 	movi	r2,4096
 181c22c:	1885883a 	add	r2,r3,r2
 181c230:	e0fffd17 	ldw	r3,-12(fp)
 181c234:	1885c83a 	sub	r2,r3,r2
 181c238:	10000916 	blt	r2,zero,181c260 <tcp_update_rcv_ann_wnd+0x90>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 181c23c:	e0bfff17 	ldw	r2,-4(fp)
 181c240:	10c00c0b 	ldhu	r3,48(r2)
 181c244:	e0bfff17 	ldw	r2,-4(fp)
 181c248:	10c00c8d 	sth	r3,50(r2)
    return new_right_edge - pcb->rcv_ann_right_edge;
 181c24c:	e0bfff17 	ldw	r2,-4(fp)
 181c250:	10800d17 	ldw	r2,52(r2)
 181c254:	e0fffd17 	ldw	r3,-12(fp)
 181c258:	1885c83a 	sub	r2,r3,r2
 181c25c:	00001406 	br	181c2b0 <tcp_update_rcv_ann_wnd+0xe0>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 181c260:	e0bfff17 	ldw	r2,-4(fp)
 181c264:	10c00b17 	ldw	r3,44(r2)
 181c268:	e0bfff17 	ldw	r2,-4(fp)
 181c26c:	10800d17 	ldw	r2,52(r2)
 181c270:	1885c83a 	sub	r2,r3,r2
 181c274:	0080030e 	bge	zero,r2,181c284 <tcp_update_rcv_ann_wnd+0xb4>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 181c278:	e0bfff17 	ldw	r2,-4(fp)
 181c27c:	10000c8d 	sth	zero,50(r2)
 181c280:	00000a06 	br	181c2ac <tcp_update_rcv_ann_wnd+0xdc>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 181c284:	e0bfff17 	ldw	r2,-4(fp)
 181c288:	10c00d17 	ldw	r3,52(r2)
 181c28c:	e0bfff17 	ldw	r2,-4(fp)
 181c290:	10800b17 	ldw	r2,44(r2)
 181c294:	1885c83a 	sub	r2,r3,r2
 181c298:	e0bffe15 	stw	r2,-8(fp)
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
 181c29c:	e0bffe17 	ldw	r2,-8(fp)
 181c2a0:	1007883a 	mov	r3,r2
 181c2a4:	e0bfff17 	ldw	r2,-4(fp)
 181c2a8:	10c00c8d 	sth	r3,50(r2)
    }
    return 0;
 181c2ac:	0005883a 	mov	r2,zero
  }
}
 181c2b0:	e037883a 	mov	sp,fp
 181c2b4:	df000017 	ldw	fp,0(sp)
 181c2b8:	dec00104 	addi	sp,sp,4
 181c2bc:	f800283a 	ret

0181c2c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 181c2c0:	defffb04 	addi	sp,sp,-20
 181c2c4:	dfc00415 	stw	ra,16(sp)
 181c2c8:	df000315 	stw	fp,12(sp)
 181c2cc:	df000304 	addi	fp,sp,12
 181c2d0:	e13ffe15 	stw	r4,-8(fp)
 181c2d4:	2805883a 	mov	r2,r5
 181c2d8:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
 181c2dc:	e0bffe17 	ldw	r2,-8(fp)
 181c2e0:	10c00c0b 	ldhu	r3,48(r2)
 181c2e4:	e0bfff0b 	ldhu	r2,-4(fp)
 181c2e8:	1885883a 	add	r2,r3,r2
 181c2ec:	1007883a 	mov	r3,r2
 181c2f0:	e0bffe17 	ldw	r2,-8(fp)
 181c2f4:	10c00c0d 	sth	r3,48(r2)
  if (pcb->rcv_wnd > TCP_WND) {
 181c2f8:	e0bffe17 	ldw	r2,-8(fp)
 181c2fc:	10800c0b 	ldhu	r2,48(r2)
 181c300:	10bfffcc 	andi	r2,r2,65535
 181c304:	10880070 	cmpltui	r2,r2,8193
 181c308:	1000031e 	bne	r2,zero,181c318 <tcp_recved+0x58>
    pcb->rcv_wnd = TCP_WND;
 181c30c:	e0bffe17 	ldw	r2,-8(fp)
 181c310:	00c80004 	movi	r3,8192
 181c314:	10c00c0d 	sth	r3,48(r2)
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 181c318:	e13ffe17 	ldw	r4,-8(fp)
 181c31c:	181c1d00 	call	181c1d0 <tcp_update_rcv_ann_wnd>
 181c320:	e0bffd15 	stw	r2,-12(fp)

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 181c324:	e0bffd17 	ldw	r2,-12(fp)
 181c328:	10820010 	cmplti	r2,r2,2048
 181c32c:	1000081e 	bne	r2,zero,181c350 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 181c330:	e0bffe17 	ldw	r2,-8(fp)
 181c334:	10800883 	ldbu	r2,34(r2)
 181c338:	10800094 	ori	r2,r2,2
 181c33c:	1007883a 	mov	r3,r2
 181c340:	e0bffe17 	ldw	r2,-8(fp)
 181c344:	10c00885 	stb	r3,34(r2)
    tcp_output(pcb);
 181c348:	e13ffe17 	ldw	r4,-8(fp)
 181c34c:	181f4fc0 	call	181f4fc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
 181c350:	0001883a 	nop
 181c354:	e037883a 	mov	sp,fp
 181c358:	dfc00117 	ldw	ra,4(sp)
 181c35c:	df000017 	ldw	fp,0(sp)
 181c360:	dec00204 	addi	sp,sp,8
 181c364:	f800283a 	ret

0181c368 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 181c368:	defffd04 	addi	sp,sp,-12
 181c36c:	df000215 	stw	fp,8(sp)
 181c370:	df000204 	addi	fp,sp,8
  u8_t i;
  u16_t n = 0;
 181c374:	e03ffe8d 	sth	zero,-6(fp)
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 181c378:	d0a00f0b 	ldhu	r2,-32708(gp)
 181c37c:	10c00044 	addi	r3,r2,1
 181c380:	d0e00f0d 	sth	r3,-32708(gp)
 181c384:	10ffffcc 	andi	r3,r2,65535
 181c388:	00bfffd4 	movui	r2,65535
 181c38c:	1880021e 	bne	r3,r2,181c398 <tcp_new_port+0x30>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 181c390:	00b00004 	movi	r2,-16384
 181c394:	d0a00f0d 	sth	r2,-32708(gp)
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 181c398:	e03ffe05 	stb	zero,-8(fp)
 181c39c:	00002006 	br	181c420 <tcp_new_port+0xb8>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 181c3a0:	e0fffe03 	ldbu	r3,-8(fp)
 181c3a4:	00806134 	movhi	r2,388
 181c3a8:	10847b04 	addi	r2,r2,4588
 181c3ac:	18c7883a 	add	r3,r3,r3
 181c3b0:	18c7883a 	add	r3,r3,r3
 181c3b4:	10c5883a 	add	r2,r2,r3
 181c3b8:	10800017 	ldw	r2,0(r2)
 181c3bc:	10800017 	ldw	r2,0(r2)
 181c3c0:	e0bfff15 	stw	r2,-4(fp)
 181c3c4:	00001106 	br	181c40c <tcp_new_port+0xa4>
      if (pcb->local_port == tcp_port) {
 181c3c8:	e0bfff17 	ldw	r2,-4(fp)
 181c3cc:	10c0078b 	ldhu	r3,30(r2)
 181c3d0:	d0a00f0b 	ldhu	r2,-32708(gp)
 181c3d4:	18ffffcc 	andi	r3,r3,65535
 181c3d8:	10bfffcc 	andi	r2,r2,65535
 181c3dc:	1880081e 	bne	r3,r2,181c400 <tcp_new_port+0x98>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 181c3e0:	e0bffe8b 	ldhu	r2,-6(fp)
 181c3e4:	10800044 	addi	r2,r2,1
 181c3e8:	e0bffe8d 	sth	r2,-6(fp)
 181c3ec:	e0bffe8b 	ldhu	r2,-6(fp)
 181c3f0:	10900030 	cmpltui	r2,r2,16384
 181c3f4:	103fe01e 	bne	r2,zero,181c378 <__alt_mem_mem_0+0xff7fc378>
          return 0;
 181c3f8:	0005883a 	mov	r2,zero
 181c3fc:	00000c06 	br	181c430 <tcp_new_port+0xc8>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 181c400:	e0bfff17 	ldw	r2,-4(fp)
 181c404:	10800317 	ldw	r2,12(r2)
 181c408:	e0bfff15 	stw	r2,-4(fp)
 181c40c:	e0bfff17 	ldw	r2,-4(fp)
 181c410:	103fed1e 	bne	r2,zero,181c3c8 <__alt_mem_mem_0+0xff7fc3c8>
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 181c414:	e0bffe03 	ldbu	r2,-8(fp)
 181c418:	10800044 	addi	r2,r2,1
 181c41c:	e0bffe05 	stb	r2,-8(fp)
 181c420:	e0bffe03 	ldbu	r2,-8(fp)
 181c424:	10800130 	cmpltui	r2,r2,4
 181c428:	103fdd1e 	bne	r2,zero,181c3a0 <__alt_mem_mem_0+0xff7fc3a0>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 181c42c:	d0a00f0b 	ldhu	r2,-32708(gp)
}
 181c430:	e037883a 	mov	sp,fp
 181c434:	df000017 	ldw	fp,0(sp)
 181c438:	dec00104 	addi	sp,sp,4
 181c43c:	f800283a 	ret

0181c440 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 181c440:	defff404 	addi	sp,sp,-48
 181c444:	dfc00b15 	stw	ra,44(sp)
 181c448:	df000a15 	stw	fp,40(sp)
 181c44c:	df000a04 	addi	fp,sp,40
 181c450:	e13ffc15 	stw	r4,-16(fp)
 181c454:	e17ffd15 	stw	r5,-12(fp)
 181c458:	3005883a 	mov	r2,r6
 181c45c:	e1ffff15 	stw	r7,-4(fp)
 181c460:	e0bffe0d 	sth	r2,-8(fp)
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 181c464:	e0bffc17 	ldw	r2,-16(fp)
 181c468:	10800617 	ldw	r2,24(r2)
 181c46c:	10000926 	beq	r2,zero,181c494 <tcp_connect+0x54>
 181c470:	01c06134 	movhi	r7,388
 181c474:	39c47f04 	addi	r7,r7,4604
 181c478:	0180acc4 	movi	r6,691
 181c47c:	01406134 	movhi	r5,388
 181c480:	2944a304 	addi	r5,r5,4748
 181c484:	01006134 	movhi	r4,388
 181c488:	21048e04 	addi	r4,r4,4664
 181c48c:	1800bd80 	call	1800bd8 <printf>
 181c490:	003fff06 	br	181c490 <__alt_mem_mem_0+0xff7fc490>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
 181c494:	e0bffd17 	ldw	r2,-12(fp)
 181c498:	10000a26 	beq	r2,zero,181c4c4 <tcp_connect+0x84>
    pcb->remote_ip = *ipaddr;
 181c49c:	e0bffc17 	ldw	r2,-16(fp)
 181c4a0:	e0fffd17 	ldw	r3,-12(fp)
 181c4a4:	18c00017 	ldw	r3,0(r3)
 181c4a8:	10c00115 	stw	r3,4(r2)
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
 181c4ac:	e0bffc17 	ldw	r2,-16(fp)
 181c4b0:	e0fffe0b 	ldhu	r3,-8(fp)
 181c4b4:	10c0080d 	sth	r3,32(r2)

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
 181c4b8:	e0bffc17 	ldw	r2,-16(fp)
 181c4bc:	10000626 	beq	r2,zero,181c4d8 <tcp_connect+0x98>
 181c4c0:	00000206 	br	181c4cc <tcp_connect+0x8c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    pcb->remote_ip = *ipaddr;
  } else {
    return ERR_VAL;
 181c4c4:	00bffe84 	movi	r2,-6
 181c4c8:	0000be06 	br	181c7c4 <tcp_connect+0x384>
  }
  pcb->remote_port = port;

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
 181c4cc:	e0bffc17 	ldw	r2,-16(fp)
 181c4d0:	10800017 	ldw	r2,0(r2)
 181c4d4:	10000f1e 	bne	r2,zero,181c514 <tcp_connect+0xd4>
    /* no local IP address set, yet. */
    struct netif *netif = ip_route(&(pcb->local_ip), &(pcb->remote_ip));
 181c4d8:	e0fffc17 	ldw	r3,-16(fp)
 181c4dc:	e0bffc17 	ldw	r2,-16(fp)
 181c4e0:	10800104 	addi	r2,r2,4
 181c4e4:	100b883a 	mov	r5,r2
 181c4e8:	1809883a 	mov	r4,r3
 181c4ec:	18319100 	call	1831910 <ip_route>
 181c4f0:	e0bff815 	stw	r2,-32(fp)
    if (netif == NULL) {
 181c4f4:	e0bff817 	ldw	r2,-32(fp)
 181c4f8:	1000021e 	bne	r2,zero,181c504 <tcp_connect+0xc4>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 181c4fc:	00bfff04 	movi	r2,-4
 181c500:	0000b006 	br	181c7c4 <tcp_connect+0x384>
    }
    /* Use the netif's IP address as local address. */
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
 181c504:	e0bff817 	ldw	r2,-32(fp)
 181c508:	10c00117 	ldw	r3,4(r2)
 181c50c:	e0bffc17 	ldw	r2,-16(fp)
 181c510:	10c00015 	stw	r3,0(r2)
  }

  old_local_port = pcb->local_port;
 181c514:	e0bffc17 	ldw	r2,-16(fp)
 181c518:	1080078b 	ldhu	r2,30(r2)
 181c51c:	e0bff90d 	sth	r2,-28(fp)
  if (pcb->local_port == 0) {
 181c520:	e0bffc17 	ldw	r2,-16(fp)
 181c524:	1080078b 	ldhu	r2,30(r2)
 181c528:	10bfffcc 	andi	r2,r2,65535
 181c52c:	10000a1e 	bne	r2,zero,181c558 <tcp_connect+0x118>
    pcb->local_port = tcp_new_port();
 181c530:	181c3680 	call	181c368 <tcp_new_port>
 181c534:	1007883a 	mov	r3,r2
 181c538:	e0bffc17 	ldw	r2,-16(fp)
 181c53c:	10c0078d 	sth	r3,30(r2)
    if (pcb->local_port == 0) {
 181c540:	e0bffc17 	ldw	r2,-16(fp)
 181c544:	1080078b 	ldhu	r2,30(r2)
 181c548:	10bfffcc 	andi	r2,r2,65535
 181c54c:	1000021e 	bne	r2,zero,181c558 <tcp_connect+0x118>
      return ERR_BUF;
 181c550:	00bfff84 	movi	r2,-2
 181c554:	00009b06 	br	181c7c4 <tcp_connect+0x384>
    }
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 181c558:	e0bffc17 	ldw	r2,-16(fp)
 181c55c:	10800203 	ldbu	r2,8(r2)
 181c560:	10803fcc 	andi	r2,r2,255
 181c564:	1080010c 	andi	r2,r2,4
 181c568:	10003026 	beq	r2,zero,181c62c <tcp_connect+0x1ec>
    /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
       now that the 5-tuple is unique. */
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
 181c56c:	00800084 	movi	r2,2
 181c570:	e0bff715 	stw	r2,-36(fp)
 181c574:	00002a06 	br	181c620 <tcp_connect+0x1e0>
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 181c578:	00806134 	movhi	r2,388
 181c57c:	10847b04 	addi	r2,r2,4588
 181c580:	e0fff717 	ldw	r3,-36(fp)
 181c584:	18c7883a 	add	r3,r3,r3
 181c588:	18c7883a 	add	r3,r3,r3
 181c58c:	10c5883a 	add	r2,r2,r3
 181c590:	10800017 	ldw	r2,0(r2)
 181c594:	10800017 	ldw	r2,0(r2)
 181c598:	e0bff615 	stw	r2,-40(fp)
 181c59c:	00001b06 	br	181c60c <tcp_connect+0x1cc>
        if ((cpcb->local_port == pcb->local_port) &&
 181c5a0:	e0bff617 	ldw	r2,-40(fp)
 181c5a4:	10c0078b 	ldhu	r3,30(r2)
 181c5a8:	e0bffc17 	ldw	r2,-16(fp)
 181c5ac:	1080078b 	ldhu	r2,30(r2)
 181c5b0:	18ffffcc 	andi	r3,r3,65535
 181c5b4:	10bfffcc 	andi	r2,r2,65535
 181c5b8:	1880111e 	bne	r3,r2,181c600 <tcp_connect+0x1c0>
            (cpcb->remote_port == port) &&
 181c5bc:	e0bff617 	ldw	r2,-40(fp)
 181c5c0:	1080080b 	ldhu	r2,32(r2)
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
        if ((cpcb->local_port == pcb->local_port) &&
 181c5c4:	10ffffcc 	andi	r3,r2,65535
 181c5c8:	e0bffe0b 	ldhu	r2,-8(fp)
 181c5cc:	18800c1e 	bne	r3,r2,181c600 <tcp_connect+0x1c0>
            (cpcb->remote_port == port) &&
            ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
 181c5d0:	e0bff617 	ldw	r2,-40(fp)
 181c5d4:	10c00017 	ldw	r3,0(r2)
 181c5d8:	e0bffc17 	ldw	r2,-16(fp)
 181c5dc:	10800017 	ldw	r2,0(r2)
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
        if ((cpcb->local_port == pcb->local_port) &&
            (cpcb->remote_port == port) &&
 181c5e0:	1880071e 	bne	r3,r2,181c600 <tcp_connect+0x1c0>
            ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
            ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
 181c5e4:	e0bff617 	ldw	r2,-40(fp)
 181c5e8:	10c00117 	ldw	r3,4(r2)
 181c5ec:	e0bffd17 	ldw	r2,-12(fp)
 181c5f0:	10800017 	ldw	r2,0(r2)
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
        if ((cpcb->local_port == pcb->local_port) &&
            (cpcb->remote_port == port) &&
            ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
 181c5f4:	1880021e 	bne	r3,r2,181c600 <tcp_connect+0x1c0>
            ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
          /* linux returns EISCONN here, but ERR_USE should be OK for us */
          return ERR_USE;
 181c5f8:	00bffe04 	movi	r2,-8
 181c5fc:	00007106 	br	181c7c4 <tcp_connect+0x384>
       now that the 5-tuple is unique. */
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 181c600:	e0bff617 	ldw	r2,-40(fp)
 181c604:	10800317 	ldw	r2,12(r2)
 181c608:	e0bff615 	stw	r2,-40(fp)
 181c60c:	e0bff617 	ldw	r2,-40(fp)
 181c610:	103fe31e 	bne	r2,zero,181c5a0 <__alt_mem_mem_0+0xff7fc5a0>
    /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
       now that the 5-tuple is unique. */
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
 181c614:	e0bff717 	ldw	r2,-36(fp)
 181c618:	10800044 	addi	r2,r2,1
 181c61c:	e0bff715 	stw	r2,-36(fp)
 181c620:	e0bff717 	ldw	r2,-36(fp)
 181c624:	10800110 	cmplti	r2,r2,4
 181c628:	103fd31e 	bne	r2,zero,181c578 <__alt_mem_mem_0+0xff7fc578>
        }
      }
    }
  }
#endif /* SO_REUSE */
  iss = tcp_next_iss();
 181c62c:	181da840 	call	181da84 <tcp_next_iss>
 181c630:	e0bffa15 	stw	r2,-24(fp)
  pcb->rcv_nxt = 0;
 181c634:	e0bffc17 	ldw	r2,-16(fp)
 181c638:	10000b15 	stw	zero,44(r2)
  pcb->snd_nxt = iss;
 181c63c:	e0bffc17 	ldw	r2,-16(fp)
 181c640:	e0fffa17 	ldw	r3,-24(fp)
 181c644:	10c01515 	stw	r3,84(r2)
  pcb->lastack = iss - 1;
 181c648:	e0bffa17 	ldw	r2,-24(fp)
 181c64c:	10ffffc4 	addi	r3,r2,-1
 181c650:	e0bffc17 	ldw	r2,-16(fp)
 181c654:	10c01315 	stw	r3,76(r2)
  pcb->snd_lbb = iss - 1;
 181c658:	e0bffa17 	ldw	r2,-24(fp)
 181c65c:	10ffffc4 	addi	r3,r2,-1
 181c660:	e0bffc17 	ldw	r2,-16(fp)
 181c664:	10c01815 	stw	r3,96(r2)
  pcb->rcv_wnd = TCP_WND;
 181c668:	e0bffc17 	ldw	r2,-16(fp)
 181c66c:	00c80004 	movi	r3,8192
 181c670:	10c00c0d 	sth	r3,48(r2)
  pcb->rcv_ann_wnd = TCP_WND;
 181c674:	e0bffc17 	ldw	r2,-16(fp)
 181c678:	00c80004 	movi	r3,8192
 181c67c:	10c00c8d 	sth	r3,50(r2)
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 181c680:	e0bffc17 	ldw	r2,-16(fp)
 181c684:	10c00b17 	ldw	r3,44(r2)
 181c688:	e0bffc17 	ldw	r2,-16(fp)
 181c68c:	10c00d15 	stw	r3,52(r2)
  pcb->snd_wnd = TCP_WND;
 181c690:	e0bffc17 	ldw	r2,-16(fp)
 181c694:	00c80004 	movi	r3,8192
 181c698:	10c0190d 	sth	r3,100(r2)
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 181c69c:	e0bffc17 	ldw	r2,-16(fp)
 181c6a0:	00c08604 	movi	r3,536
 181c6a4:	10c00e8d 	sth	r3,58(r2)
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->local_ip), ipaddr);
 181c6a8:	e0bffc17 	ldw	r2,-16(fp)
 181c6ac:	10800e8b 	ldhu	r2,58(r2)
 181c6b0:	10bfffcc 	andi	r2,r2,65535
 181c6b4:	e0fffc17 	ldw	r3,-16(fp)
 181c6b8:	e1bffd17 	ldw	r6,-12(fp)
 181c6bc:	180b883a 	mov	r5,r3
 181c6c0:	1009883a 	mov	r4,r2
 181c6c4:	181dab40 	call	181dab4 <tcp_eff_send_mss>
 181c6c8:	1007883a 	mov	r3,r2
 181c6cc:	e0bffc17 	ldw	r2,-16(fp)
 181c6d0:	10c00e8d 	sth	r3,58(r2)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 181c6d4:	e0bffc17 	ldw	r2,-16(fp)
 181c6d8:	00c00044 	movi	r3,1
 181c6dc:	10c0140d 	sth	r3,80(r2)
  pcb->ssthresh = pcb->mss * 10;
 181c6e0:	e0bffc17 	ldw	r2,-16(fp)
 181c6e4:	10800e8b 	ldhu	r2,58(r2)
 181c6e8:	108002a4 	muli	r2,r2,10
 181c6ec:	1007883a 	mov	r3,r2
 181c6f0:	e0bffc17 	ldw	r2,-16(fp)
 181c6f4:	10c0148d 	sth	r3,82(r2)
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 181c6f8:	e0bffc17 	ldw	r2,-16(fp)
 181c6fc:	e0ffff17 	ldw	r3,-4(fp)
 181c700:	10c02215 	stw	r3,136(r2)
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 181c704:	01400084 	movi	r5,2
 181c708:	e13ffc17 	ldw	r4,-16(fp)
 181c70c:	181f0780 	call	181f078 <tcp_enqueue_flags>
 181c710:	e0bffb05 	stb	r2,-20(fp)
  if (ret == ERR_OK) {
 181c714:	e0bffb07 	ldb	r2,-20(fp)
 181c718:	1000291e 	bne	r2,zero,181c7c0 <tcp_connect+0x380>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 181c71c:	e0bffc17 	ldw	r2,-16(fp)
 181c720:	00c00084 	movi	r3,2
 181c724:	10c00615 	stw	r3,24(r2)
    if (old_local_port != 0) {
 181c728:	e0bff90b 	ldhu	r2,-28(fp)
 181c72c:	10001a26 	beq	r2,zero,181c798 <tcp_connect+0x358>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 181c730:	d0e7fb17 	ldw	r3,-24596(gp)
 181c734:	e0bffc17 	ldw	r2,-16(fp)
 181c738:	1880041e 	bne	r3,r2,181c74c <tcp_connect+0x30c>
 181c73c:	d0a7fb17 	ldw	r2,-24596(gp)
 181c740:	10800317 	ldw	r2,12(r2)
 181c744:	d0a7fb15 	stw	r2,-24596(gp)
 181c748:	00001106 	br	181c790 <tcp_connect+0x350>
 181c74c:	d0a7fb17 	ldw	r2,-24596(gp)
 181c750:	d0a7fa15 	stw	r2,-24600(gp)
 181c754:	00000c06 	br	181c788 <tcp_connect+0x348>
 181c758:	d0a7fa17 	ldw	r2,-24600(gp)
 181c75c:	10c00317 	ldw	r3,12(r2)
 181c760:	e0bffc17 	ldw	r2,-16(fp)
 181c764:	1880051e 	bne	r3,r2,181c77c <tcp_connect+0x33c>
 181c768:	d0a7fa17 	ldw	r2,-24600(gp)
 181c76c:	e0fffc17 	ldw	r3,-16(fp)
 181c770:	18c00317 	ldw	r3,12(r3)
 181c774:	10c00315 	stw	r3,12(r2)
 181c778:	00000506 	br	181c790 <tcp_connect+0x350>
 181c77c:	d0a7fa17 	ldw	r2,-24600(gp)
 181c780:	10800317 	ldw	r2,12(r2)
 181c784:	d0a7fa15 	stw	r2,-24600(gp)
 181c788:	d0a7fa17 	ldw	r2,-24600(gp)
 181c78c:	103ff21e 	bne	r2,zero,181c758 <__alt_mem_mem_0+0xff7fc758>
 181c790:	e0bffc17 	ldw	r2,-16(fp)
 181c794:	10000315 	stw	zero,12(r2)
    }
    TCP_REG_ACTIVE(pcb);
 181c798:	d0e7f717 	ldw	r3,-24612(gp)
 181c79c:	e0bffc17 	ldw	r2,-16(fp)
 181c7a0:	10c00315 	stw	r3,12(r2)
 181c7a4:	e0bffc17 	ldw	r2,-16(fp)
 181c7a8:	d0a7f715 	stw	r2,-24612(gp)
 181c7ac:	18212d00 	call	18212d0 <tcp_timer_needed>
 181c7b0:	00800044 	movi	r2,1
 181c7b4:	d0a7f685 	stb	r2,-24614(gp)
    snmp_inc_tcpactiveopens();

    tcp_output(pcb);
 181c7b8:	e13ffc17 	ldw	r4,-16(fp)
 181c7bc:	181f4fc0 	call	181f4fc <tcp_output>
  }
  return ret;
 181c7c0:	e0bffb03 	ldbu	r2,-20(fp)
}
 181c7c4:	e037883a 	mov	sp,fp
 181c7c8:	dfc00117 	ldw	ra,4(sp)
 181c7cc:	df000017 	ldw	fp,0(sp)
 181c7d0:	dec00204 	addi	sp,sp,8
 181c7d4:	f800283a 	ret

0181c7d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 181c7d8:	defff304 	addi	sp,sp,-52
 181c7dc:	dfc00c15 	stw	ra,48(sp)
 181c7e0:	df000b15 	stw	fp,44(sp)
 181c7e4:	dc000a15 	stw	r16,40(sp)
 181c7e8:	df000b04 	addi	fp,sp,44
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 181c7ec:	e03ff985 	stb	zero,-26(fp)

  ++tcp_ticks;
 181c7f0:	d0a7f817 	ldw	r2,-24608(gp)
 181c7f4:	10800044 	addi	r2,r2,1
 181c7f8:	d0a7f815 	stw	r2,-24608(gp)
  ++tcp_timer_ctr;
 181c7fc:	d0a7f643 	ldbu	r2,-24615(gp)
 181c800:	10800044 	addi	r2,r2,1
 181c804:	d0a7f645 	stb	r2,-24615(gp)

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 181c808:	e03ff815 	stw	zero,-32(fp)
  pcb = tcp_active_pcbs;
 181c80c:	d0a7f717 	ldw	r2,-24612(gp)
 181c810:	e0bff715 	stw	r2,-36(fp)
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 181c814:	00018906 	br	181ce3c <tcp_slowtmr+0x664>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 181c818:	e0bff717 	ldw	r2,-36(fp)
 181c81c:	10c00943 	ldbu	r3,37(r2)
 181c820:	d0a7f643 	ldbu	r2,-24615(gp)
 181c824:	18c03fcc 	andi	r3,r3,255
 181c828:	10803fcc 	andi	r2,r2,255
 181c82c:	1880041e 	bne	r3,r2,181c840 <tcp_slowtmr+0x68>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 181c830:	e0bff717 	ldw	r2,-36(fp)
 181c834:	10800317 	ldw	r2,12(r2)
 181c838:	e0bff715 	stw	r2,-36(fp)
      continue;
 181c83c:	00017f06 	br	181ce3c <tcp_slowtmr+0x664>
    }
    pcb->last_timer = tcp_timer_ctr;
 181c840:	d0e7f643 	ldbu	r3,-24615(gp)
 181c844:	e0bff717 	ldw	r2,-36(fp)
 181c848:	10c00945 	stb	r3,37(r2)

    pcb_remove = 0;
 181c84c:	e03ff905 	stb	zero,-28(fp)
    pcb_reset = 0;
 181c850:	e03ff945 	stb	zero,-27(fp)

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 181c854:	e0bff717 	ldw	r2,-36(fp)
 181c858:	10800617 	ldw	r2,24(r2)
 181c85c:	10800098 	cmpnei	r2,r2,2
 181c860:	1000091e 	bne	r2,zero,181c888 <tcp_slowtmr+0xb0>
 181c864:	e0bff717 	ldw	r2,-36(fp)
 181c868:	10801283 	ldbu	r2,74(r2)
 181c86c:	10803fcc 	andi	r2,r2,255
 181c870:	10800198 	cmpnei	r2,r2,6
 181c874:	1000041e 	bne	r2,zero,181c888 <tcp_slowtmr+0xb0>
      ++pcb_remove;
 181c878:	e0bff903 	ldbu	r2,-28(fp)
 181c87c:	10800044 	addi	r2,r2,1
 181c880:	e0bff905 	stb	r2,-28(fp)
 181c884:	00008d06 	br	181cabc <tcp_slowtmr+0x2e4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
 181c888:	e0bff717 	ldw	r2,-36(fp)
 181c88c:	10801283 	ldbu	r2,74(r2)
 181c890:	10803fcc 	andi	r2,r2,255
 181c894:	10800318 	cmpnei	r2,r2,12
 181c898:	1000041e 	bne	r2,zero,181c8ac <tcp_slowtmr+0xd4>
      ++pcb_remove;
 181c89c:	e0bff903 	ldbu	r2,-28(fp)
 181c8a0:	10800044 	addi	r2,r2,1
 181c8a4:	e0bff905 	stb	r2,-28(fp)
 181c8a8:	00008406 	br	181cabc <tcp_slowtmr+0x2e4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 181c8ac:	e0bff717 	ldw	r2,-36(fp)
 181c8b0:	10802843 	ldbu	r2,161(r2)
 181c8b4:	10803fcc 	andi	r2,r2,255
 181c8b8:	10002226 	beq	r2,zero,181c944 <tcp_slowtmr+0x16c>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
 181c8bc:	e0bff717 	ldw	r2,-36(fp)
 181c8c0:	10802803 	ldbu	r2,160(r2)
 181c8c4:	10800044 	addi	r2,r2,1
 181c8c8:	1007883a 	mov	r3,r2
 181c8cc:	e0bff717 	ldw	r2,-36(fp)
 181c8d0:	10c02805 	stb	r3,160(r2)
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 181c8d4:	e0bff717 	ldw	r2,-36(fp)
 181c8d8:	11002803 	ldbu	r4,160(r2)
 181c8dc:	e0bff717 	ldw	r2,-36(fp)
 181c8e0:	10802843 	ldbu	r2,161(r2)
 181c8e4:	10803fcc 	andi	r2,r2,255
 181c8e8:	10ffffc4 	addi	r3,r2,-1
 181c8ec:	d0a00f84 	addi	r2,gp,-32706
 181c8f0:	1885883a 	add	r2,r3,r2
 181c8f4:	10800003 	ldbu	r2,0(r2)
 181c8f8:	20c03fcc 	andi	r3,r4,255
 181c8fc:	10803fcc 	andi	r2,r2,255
 181c900:	18806e36 	bltu	r3,r2,181cabc <tcp_slowtmr+0x2e4>
          pcb->persist_cnt = 0;
 181c904:	e0bff717 	ldw	r2,-36(fp)
 181c908:	10002805 	stb	zero,160(r2)
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 181c90c:	e0bff717 	ldw	r2,-36(fp)
 181c910:	10802843 	ldbu	r2,161(r2)
 181c914:	10803fcc 	andi	r2,r2,255
 181c918:	108001e8 	cmpgeui	r2,r2,7
 181c91c:	1000061e 	bne	r2,zero,181c938 <tcp_slowtmr+0x160>
            pcb->persist_backoff++;
 181c920:	e0bff717 	ldw	r2,-36(fp)
 181c924:	10802843 	ldbu	r2,161(r2)
 181c928:	10800044 	addi	r2,r2,1
 181c92c:	1007883a 	mov	r3,r2
 181c930:	e0bff717 	ldw	r2,-36(fp)
 181c934:	10c02845 	stb	r3,161(r2)
          }
          tcp_zero_window_probe(pcb);
 181c938:	e13ff717 	ldw	r4,-36(fp)
 181c93c:	1820f8c0 	call	1820f8c <tcp_zero_window_probe>
 181c940:	00005e06 	br	181cabc <tcp_slowtmr+0x2e4>
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
 181c944:	e0bff717 	ldw	r2,-36(fp)
 181c948:	10800e0b 	ldhu	r2,56(r2)
 181c94c:	10bfffcc 	andi	r2,r2,65535
 181c950:	10a0001c 	xori	r2,r2,32768
 181c954:	10a00004 	addi	r2,r2,-32768
 181c958:	10000616 	blt	r2,zero,181c974 <tcp_slowtmr+0x19c>
          ++pcb->rtime;
 181c95c:	e0bff717 	ldw	r2,-36(fp)
 181c960:	10800e0b 	ldhu	r2,56(r2)
 181c964:	10800044 	addi	r2,r2,1
 181c968:	1007883a 	mov	r3,r2
 181c96c:	e0bff717 	ldw	r2,-36(fp)
 181c970:	10c00e0d 	sth	r3,56(r2)
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 181c974:	e0bff717 	ldw	r2,-36(fp)
 181c978:	10801d17 	ldw	r2,116(r2)
 181c97c:	10004f26 	beq	r2,zero,181cabc <tcp_slowtmr+0x2e4>
 181c980:	e0bff717 	ldw	r2,-36(fp)
 181c984:	10c00e0b 	ldhu	r3,56(r2)
 181c988:	e0bff717 	ldw	r2,-36(fp)
 181c98c:	1080120b 	ldhu	r2,72(r2)
 181c990:	18ffffcc 	andi	r3,r3,65535
 181c994:	18e0001c 	xori	r3,r3,32768
 181c998:	18e00004 	addi	r3,r3,-32768
 181c99c:	10bfffcc 	andi	r2,r2,65535
 181c9a0:	10a0001c 	xori	r2,r2,32768
 181c9a4:	10a00004 	addi	r2,r2,-32768
 181c9a8:	18804416 	blt	r3,r2,181cabc <tcp_slowtmr+0x2e4>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 181c9ac:	e0bff717 	ldw	r2,-36(fp)
 181c9b0:	10800617 	ldw	r2,24(r2)
 181c9b4:	108000a0 	cmpeqi	r2,r2,2
 181c9b8:	10001b1e 	bne	r2,zero,181ca28 <tcp_slowtmr+0x250>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 181c9bc:	e0bff717 	ldw	r2,-36(fp)
 181c9c0:	1080110b 	ldhu	r2,68(r2)
 181c9c4:	10bfffcc 	andi	r2,r2,65535
 181c9c8:	10a0001c 	xori	r2,r2,32768
 181c9cc:	10a00004 	addi	r2,r2,-32768
 181c9d0:	1005d0fa 	srai	r2,r2,3
 181c9d4:	10ffffcc 	andi	r3,r2,65535
 181c9d8:	18e0001c 	xori	r3,r3,32768
 181c9dc:	18e00004 	addi	r3,r3,-32768
 181c9e0:	e0bff717 	ldw	r2,-36(fp)
 181c9e4:	1080118b 	ldhu	r2,70(r2)
 181c9e8:	10bfffcc 	andi	r2,r2,65535
 181c9ec:	10a0001c 	xori	r2,r2,32768
 181c9f0:	10a00004 	addi	r2,r2,-32768
 181c9f4:	1887883a 	add	r3,r3,r2
 181c9f8:	e0bff717 	ldw	r2,-36(fp)
 181c9fc:	10801283 	ldbu	r2,74(r2)
 181ca00:	11003fcc 	andi	r4,r2,255
 181ca04:	00806134 	movhi	r2,388
 181ca08:	10847704 	addi	r2,r2,4572
 181ca0c:	1105883a 	add	r2,r2,r4
 181ca10:	10800003 	ldbu	r2,0(r2)
 181ca14:	10803fcc 	andi	r2,r2,255
 181ca18:	1884983a 	sll	r2,r3,r2
 181ca1c:	1007883a 	mov	r3,r2
 181ca20:	e0bff717 	ldw	r2,-36(fp)
 181ca24:	10c0120d 	sth	r3,72(r2)
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 181ca28:	e0bff717 	ldw	r2,-36(fp)
 181ca2c:	10000e0d 	sth	zero,56(r2)

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 181ca30:	e0bff717 	ldw	r2,-36(fp)
 181ca34:	10c0190b 	ldhu	r3,100(r2)
 181ca38:	e0bff717 	ldw	r2,-36(fp)
 181ca3c:	1140140b 	ldhu	r5,80(r2)
 181ca40:	1805883a 	mov	r2,r3
 181ca44:	10ffffcc 	andi	r3,r2,65535
 181ca48:	293fffcc 	andi	r4,r5,65535
 181ca4c:	20c0012e 	bgeu	r4,r3,181ca54 <tcp_slowtmr+0x27c>
 181ca50:	2805883a 	mov	r2,r5
 181ca54:	e0bffa0d 	sth	r2,-24(fp)
          pcb->ssthresh = eff_wnd >> 1;
 181ca58:	e0bffa0b 	ldhu	r2,-24(fp)
 181ca5c:	1004d07a 	srli	r2,r2,1
 181ca60:	1007883a 	mov	r3,r2
 181ca64:	e0bff717 	ldw	r2,-36(fp)
 181ca68:	10c0148d 	sth	r3,82(r2)
          if (pcb->ssthresh < (pcb->mss << 1)) {
 181ca6c:	e0bff717 	ldw	r2,-36(fp)
 181ca70:	1080148b 	ldhu	r2,82(r2)
 181ca74:	10ffffcc 	andi	r3,r2,65535
 181ca78:	e0bff717 	ldw	r2,-36(fp)
 181ca7c:	10800e8b 	ldhu	r2,58(r2)
 181ca80:	10bfffcc 	andi	r2,r2,65535
 181ca84:	1085883a 	add	r2,r2,r2
 181ca88:	1880060e 	bge	r3,r2,181caa4 <tcp_slowtmr+0x2cc>
            pcb->ssthresh = (pcb->mss << 1);
 181ca8c:	e0bff717 	ldw	r2,-36(fp)
 181ca90:	10800e8b 	ldhu	r2,58(r2)
 181ca94:	1085883a 	add	r2,r2,r2
 181ca98:	1007883a 	mov	r3,r2
 181ca9c:	e0bff717 	ldw	r2,-36(fp)
 181caa0:	10c0148d 	sth	r3,82(r2)
          }
          pcb->cwnd = pcb->mss;
 181caa4:	e0bff717 	ldw	r2,-36(fp)
 181caa8:	10c00e8b 	ldhu	r3,58(r2)
 181caac:	e0bff717 	ldw	r2,-36(fp)
 181cab0:	10c0140d 	sth	r3,80(r2)
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 181cab4:	e13ff717 	ldw	r4,-36(fp)
 181cab8:	18209740 	call	1820974 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 181cabc:	e0bff717 	ldw	r2,-36(fp)
 181cac0:	10800617 	ldw	r2,24(r2)
 181cac4:	10800198 	cmpnei	r2,r2,6
 181cac8:	10000e1e 	bne	r2,zero,181cb04 <tcp_slowtmr+0x32c>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 181cacc:	e0bff717 	ldw	r2,-36(fp)
 181cad0:	10800883 	ldbu	r2,34(r2)
 181cad4:	10803fcc 	andi	r2,r2,255
 181cad8:	1080040c 	andi	r2,r2,16
 181cadc:	10000926 	beq	r2,zero,181cb04 <tcp_slowtmr+0x32c>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 181cae0:	d0e7f817 	ldw	r3,-24608(gp)
 181cae4:	e0bff717 	ldw	r2,-36(fp)
 181cae8:	10800a17 	ldw	r2,40(r2)
 181caec:	1885c83a 	sub	r2,r3,r2
 181caf0:	10800a70 	cmpltui	r2,r2,41
 181caf4:	1000031e 	bne	r2,zero,181cb04 <tcp_slowtmr+0x32c>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 181caf8:	e0bff903 	ldbu	r2,-28(fp)
 181cafc:	10800044 	addi	r2,r2,1
 181cb00:	e0bff905 	stb	r2,-28(fp)
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 181cb04:	e0bff717 	ldw	r2,-36(fp)
 181cb08:	10800203 	ldbu	r2,8(r2)
 181cb0c:	10803fcc 	andi	r2,r2,255
 181cb10:	1080020c 	andi	r2,r2,8
 181cb14:	10003826 	beq	r2,zero,181cbf8 <tcp_slowtmr+0x420>
       ((pcb->state == ESTABLISHED) ||
 181cb18:	e0bff717 	ldw	r2,-36(fp)
 181cb1c:	10800617 	ldw	r2,24(r2)
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 181cb20:	10800120 	cmpeqi	r2,r2,4
 181cb24:	1000041e 	bne	r2,zero,181cb38 <tcp_slowtmr+0x360>
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
 181cb28:	e0bff717 	ldw	r2,-36(fp)
 181cb2c:	10800617 	ldw	r2,24(r2)
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
 181cb30:	108001d8 	cmpnei	r2,r2,7
 181cb34:	1000301e 	bne	r2,zero,181cbf8 <tcp_slowtmr+0x420>
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
 181cb38:	d0e7f817 	ldw	r3,-24608(gp)
 181cb3c:	e0bff717 	ldw	r2,-36(fp)
 181cb40:	10800a17 	ldw	r2,40(r2)
 181cb44:	18a1c83a 	sub	r16,r3,r2
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 181cb48:	e0bff717 	ldw	r2,-36(fp)
 181cb4c:	10c02517 	ldw	r3,148(r2)
 181cb50:	e0bff717 	ldw	r2,-36(fp)
 181cb54:	11002717 	ldw	r4,156(r2)
 181cb58:	e0bff717 	ldw	r2,-36(fp)
 181cb5c:	10802617 	ldw	r2,152(r2)
 181cb60:	2085383a 	mul	r2,r4,r2
 181cb64:	1885883a 	add	r2,r3,r2
 181cb68:	01407d04 	movi	r5,500
 181cb6c:	1009883a 	mov	r4,r2
 181cb70:	180acd00 	call	180acd0 <__udivsi3>

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
 181cb74:	1400072e 	bgeu	r2,r16,181cb94 <tcp_slowtmr+0x3bc>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
 181cb78:	e0bff903 	ldbu	r2,-28(fp)
 181cb7c:	10800044 	addi	r2,r2,1
 181cb80:	e0bff905 	stb	r2,-28(fp)
        ++pcb_reset;
 181cb84:	e0bff943 	ldbu	r2,-27(fp)
 181cb88:	10800044 	addi	r2,r2,1
 181cb8c:	e0bff945 	stb	r2,-27(fp)
 181cb90:	00001906 	br	181cbf8 <tcp_slowtmr+0x420>
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 181cb94:	d0e7f817 	ldw	r3,-24608(gp)
 181cb98:	e0bff717 	ldw	r2,-36(fp)
 181cb9c:	10800a17 	ldw	r2,40(r2)
 181cba0:	18a1c83a 	sub	r16,r3,r2
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 181cba4:	e0bff717 	ldw	r2,-36(fp)
 181cba8:	10c02517 	ldw	r3,148(r2)
 181cbac:	e0bff717 	ldw	r2,-36(fp)
 181cbb0:	10802883 	ldbu	r2,162(r2)
 181cbb4:	11003fcc 	andi	r4,r2,255
 181cbb8:	e0bff717 	ldw	r2,-36(fp)
 181cbbc:	10802617 	ldw	r2,152(r2)
 181cbc0:	2085383a 	mul	r2,r4,r2
 181cbc4:	1885883a 	add	r2,r3,r2
              / TCP_SLOW_INTERVAL)
 181cbc8:	01407d04 	movi	r5,500
 181cbcc:	1009883a 	mov	r4,r2
 181cbd0:	180acd00 	call	180acd0 <__udivsi3>
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
        ++pcb_reset;
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 181cbd4:	1400082e 	bgeu	r2,r16,181cbf8 <tcp_slowtmr+0x420>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
              / TCP_SLOW_INTERVAL)
      {
        tcp_keepalive(pcb);
 181cbd8:	e13ff717 	ldw	r4,-36(fp)
 181cbdc:	1820df80 	call	1820df8 <tcp_keepalive>
        pcb->keep_cnt_sent++;
 181cbe0:	e0bff717 	ldw	r2,-36(fp)
 181cbe4:	10802883 	ldbu	r2,162(r2)
 181cbe8:	10800044 	addi	r2,r2,1
 181cbec:	1007883a 	mov	r3,r2
 181cbf0:	e0bff717 	ldw	r2,-36(fp)
 181cbf4:	10c02885 	stb	r3,162(r2)

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 181cbf8:	e0bff717 	ldw	r2,-36(fp)
 181cbfc:	10801e17 	ldw	r2,120(r2)
 181cc00:	10001126 	beq	r2,zero,181cc48 <tcp_slowtmr+0x470>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 181cc04:	d0e7f817 	ldw	r3,-24608(gp)
 181cc08:	e0bff717 	ldw	r2,-36(fp)
 181cc0c:	10800a17 	ldw	r2,40(r2)
 181cc10:	1887c83a 	sub	r3,r3,r2
 181cc14:	e0bff717 	ldw	r2,-36(fp)
 181cc18:	1080120b 	ldhu	r2,72(r2)
 181cc1c:	10bfffcc 	andi	r2,r2,65535
 181cc20:	10a0001c 	xori	r2,r2,32768
 181cc24:	10a00004 	addi	r2,r2,-32768
 181cc28:	108001a4 	muli	r2,r2,6

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 181cc2c:	18800636 	bltu	r3,r2,181cc48 <tcp_slowtmr+0x470>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
      tcp_segs_free(pcb->ooseq);
 181cc30:	e0bff717 	ldw	r2,-36(fp)
 181cc34:	10801e17 	ldw	r2,120(r2)
 181cc38:	1009883a 	mov	r4,r2
 181cc3c:	181d1580 	call	181d158 <tcp_segs_free>
      pcb->ooseq = NULL;
 181cc40:	e0bff717 	ldw	r2,-36(fp)
 181cc44:	10001e15 	stw	zero,120(r2)
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 181cc48:	e0bff717 	ldw	r2,-36(fp)
 181cc4c:	10800617 	ldw	r2,24(r2)
 181cc50:	108000d8 	cmpnei	r2,r2,3
 181cc54:	1000091e 	bne	r2,zero,181cc7c <tcp_slowtmr+0x4a4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 181cc58:	d0e7f817 	ldw	r3,-24608(gp)
 181cc5c:	e0bff717 	ldw	r2,-36(fp)
 181cc60:	10800a17 	ldw	r2,40(r2)
 181cc64:	1885c83a 	sub	r2,r3,r2
 181cc68:	10800a70 	cmpltui	r2,r2,41
 181cc6c:	1000031e 	bne	r2,zero,181cc7c <tcp_slowtmr+0x4a4>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 181cc70:	e0bff903 	ldbu	r2,-28(fp)
 181cc74:	10800044 	addi	r2,r2,1
 181cc78:	e0bff905 	stb	r2,-28(fp)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 181cc7c:	e0bff717 	ldw	r2,-36(fp)
 181cc80:	10800617 	ldw	r2,24(r2)
 181cc84:	10800258 	cmpnei	r2,r2,9
 181cc88:	1000091e 	bne	r2,zero,181ccb0 <tcp_slowtmr+0x4d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 181cc8c:	d0e7f817 	ldw	r3,-24608(gp)
 181cc90:	e0bff717 	ldw	r2,-36(fp)
 181cc94:	10800a17 	ldw	r2,40(r2)
 181cc98:	1885c83a 	sub	r2,r3,r2
 181cc9c:	10803c70 	cmpltui	r2,r2,241
 181cca0:	1000031e 	bne	r2,zero,181ccb0 <tcp_slowtmr+0x4d8>
        ++pcb_remove;
 181cca4:	e0bff903 	ldbu	r2,-28(fp)
 181cca8:	10800044 	addi	r2,r2,1
 181ccac:	e0bff905 	stb	r2,-28(fp)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 181ccb0:	e0bff903 	ldbu	r2,-28(fp)
 181ccb4:	10003726 	beq	r2,zero,181cd94 <tcp_slowtmr+0x5bc>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
 181ccb8:	e13ff717 	ldw	r4,-36(fp)
 181ccbc:	181d8080 	call	181d808 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 181ccc0:	e0bff817 	ldw	r2,-32(fp)
 181ccc4:	10000526 	beq	r2,zero,181ccdc <tcp_slowtmr+0x504>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 181ccc8:	e0bff717 	ldw	r2,-36(fp)
 181cccc:	10c00317 	ldw	r3,12(r2)
 181ccd0:	e0bff817 	ldw	r2,-32(fp)
 181ccd4:	10c00315 	stw	r3,12(r2)
 181ccd8:	00000306 	br	181cce8 <tcp_slowtmr+0x510>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 181ccdc:	e0bff717 	ldw	r2,-36(fp)
 181cce0:	10800317 	ldw	r2,12(r2)
 181cce4:	d0a7f715 	stw	r2,-24612(gp)
      }

      if (pcb_reset) {
 181cce8:	e0bff943 	ldbu	r2,-27(fp)
 181ccec:	10001026 	beq	r2,zero,181cd30 <tcp_slowtmr+0x558>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181ccf0:	e0bff717 	ldw	r2,-36(fp)
 181ccf4:	11001517 	ldw	r4,84(r2)
 181ccf8:	e0bff717 	ldw	r2,-36(fp)
 181ccfc:	11400b17 	ldw	r5,44(r2)
 181cd00:	e1bff717 	ldw	r6,-36(fp)
 181cd04:	e0bff717 	ldw	r2,-36(fp)
 181cd08:	11c00104 	addi	r7,r2,4
          pcb->local_port, pcb->remote_port);
 181cd0c:	e0bff717 	ldw	r2,-36(fp)
 181cd10:	1080078b 	ldhu	r2,30(r2)
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
      }

      if (pcb_reset) {
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181cd14:	10bfffcc 	andi	r2,r2,65535
          pcb->local_port, pcb->remote_port);
 181cd18:	e0fff717 	ldw	r3,-36(fp)
 181cd1c:	18c0080b 	ldhu	r3,32(r3)
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
      }

      if (pcb_reset) {
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 181cd20:	18ffffcc 	andi	r3,r3,65535
 181cd24:	d8c00115 	stw	r3,4(sp)
 181cd28:	d8800015 	stw	r2,0(sp)
 181cd2c:	18205a80 	call	18205a8 <tcp_rst>
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
 181cd30:	e0bff717 	ldw	r2,-36(fp)
 181cd34:	10802417 	ldw	r2,144(r2)
 181cd38:	e0bffb15 	stw	r2,-20(fp)
      err_arg = pcb->callback_arg;
 181cd3c:	e0bff717 	ldw	r2,-36(fp)
 181cd40:	10800417 	ldw	r2,16(r2)
 181cd44:	e0bffc15 	stw	r2,-16(fp)
      pcb2 = pcb;
 181cd48:	e0bff717 	ldw	r2,-36(fp)
 181cd4c:	e0bffd15 	stw	r2,-12(fp)
      pcb = pcb->next;
 181cd50:	e0bff717 	ldw	r2,-36(fp)
 181cd54:	10800317 	ldw	r2,12(r2)
 181cd58:	e0bff715 	stw	r2,-36(fp)
      memp_free(MEMP_TCP_PCB, pcb2);
 181cd5c:	e17ffd17 	ldw	r5,-12(fp)
 181cd60:	01000084 	movi	r4,2
 181cd64:	18341e40 	call	18341e4 <memp_free>

      tcp_active_pcbs_changed = 0;
 181cd68:	d027f685 	stb	zero,-24614(gp)
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 181cd6c:	e0bffb17 	ldw	r2,-20(fp)
 181cd70:	10000426 	beq	r2,zero,181cd84 <tcp_slowtmr+0x5ac>
 181cd74:	e0bffb17 	ldw	r2,-20(fp)
 181cd78:	017ffd84 	movi	r5,-10
 181cd7c:	e13ffc17 	ldw	r4,-16(fp)
 181cd80:	103ee83a 	callr	r2
      if (tcp_active_pcbs_changed) {
 181cd84:	d0a7f683 	ldbu	r2,-24614(gp)
 181cd88:	10803fcc 	andi	r2,r2,255
 181cd8c:	10002b26 	beq	r2,zero,181ce3c <tcp_slowtmr+0x664>
        goto tcp_slowtmr_start;
 181cd90:	003e9d06 	br	181c808 <__alt_mem_mem_0+0xff7fc808>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 181cd94:	e0bff717 	ldw	r2,-36(fp)
 181cd98:	e0bff815 	stw	r2,-32(fp)
      pcb = pcb->next;
 181cd9c:	e0bff717 	ldw	r2,-36(fp)
 181cda0:	10800317 	ldw	r2,12(r2)
 181cda4:	e0bff715 	stw	r2,-36(fp)

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 181cda8:	e0bff817 	ldw	r2,-32(fp)
 181cdac:	108008c3 	ldbu	r2,35(r2)
 181cdb0:	10800044 	addi	r2,r2,1
 181cdb4:	1007883a 	mov	r3,r2
 181cdb8:	e0bff817 	ldw	r2,-32(fp)
 181cdbc:	10c008c5 	stb	r3,35(r2)
      if (prev->polltmr >= prev->pollinterval) {
 181cdc0:	e0bff817 	ldw	r2,-32(fp)
 181cdc4:	10c008c3 	ldbu	r3,35(r2)
 181cdc8:	e0bff817 	ldw	r2,-32(fp)
 181cdcc:	10800903 	ldbu	r2,36(r2)
 181cdd0:	18c03fcc 	andi	r3,r3,255
 181cdd4:	10803fcc 	andi	r2,r2,255
 181cdd8:	18801836 	bltu	r3,r2,181ce3c <tcp_slowtmr+0x664>
        prev->polltmr = 0;
 181cddc:	e0bff817 	ldw	r2,-32(fp)
 181cde0:	100008c5 	stb	zero,35(r2)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 181cde4:	d027f685 	stb	zero,-24614(gp)
        TCP_EVENT_POLL(prev, err);
 181cde8:	e0bff817 	ldw	r2,-32(fp)
 181cdec:	10802317 	ldw	r2,140(r2)
 181cdf0:	10000926 	beq	r2,zero,181ce18 <tcp_slowtmr+0x640>
 181cdf4:	e0bff817 	ldw	r2,-32(fp)
 181cdf8:	10802317 	ldw	r2,140(r2)
 181cdfc:	e0fff817 	ldw	r3,-32(fp)
 181ce00:	18c00417 	ldw	r3,16(r3)
 181ce04:	e17ff817 	ldw	r5,-32(fp)
 181ce08:	1809883a 	mov	r4,r3
 181ce0c:	103ee83a 	callr	r2
 181ce10:	e0bff985 	stb	r2,-26(fp)
 181ce14:	00000106 	br	181ce1c <tcp_slowtmr+0x644>
 181ce18:	e03ff985 	stb	zero,-26(fp)
        if (tcp_active_pcbs_changed) {
 181ce1c:	d0a7f683 	ldbu	r2,-24614(gp)
 181ce20:	10803fcc 	andi	r2,r2,255
 181ce24:	10000126 	beq	r2,zero,181ce2c <tcp_slowtmr+0x654>
          goto tcp_slowtmr_start;
 181ce28:	003e7706 	br	181c808 <__alt_mem_mem_0+0xff7fc808>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 181ce2c:	e0bff987 	ldb	r2,-26(fp)
 181ce30:	1000021e 	bne	r2,zero,181ce3c <tcp_slowtmr+0x664>
          tcp_output(prev);
 181ce34:	e13ff817 	ldw	r4,-32(fp)
 181ce38:	181f4fc0 	call	181f4fc <tcp_output>
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 181ce3c:	e0bff717 	ldw	r2,-36(fp)
 181ce40:	103e751e 	bne	r2,zero,181c818 <__alt_mem_mem_0+0xff7fc818>
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 181ce44:	e03ff815 	stw	zero,-32(fp)
  pcb = tcp_tw_pcbs;
 181ce48:	d0a7fc17 	ldw	r2,-24592(gp)
 181ce4c:	e0bff715 	stw	r2,-36(fp)
  while (pcb != NULL) {
 181ce50:	00002606 	br	181ceec <tcp_slowtmr+0x714>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
 181ce54:	e03ff905 	stb	zero,-28(fp)

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 181ce58:	d0e7f817 	ldw	r3,-24608(gp)
 181ce5c:	e0bff717 	ldw	r2,-36(fp)
 181ce60:	10800a17 	ldw	r2,40(r2)
 181ce64:	1885c83a 	sub	r2,r3,r2
 181ce68:	10803c70 	cmpltui	r2,r2,241
 181ce6c:	1000031e 	bne	r2,zero,181ce7c <tcp_slowtmr+0x6a4>
      ++pcb_remove;
 181ce70:	e0bff903 	ldbu	r2,-28(fp)
 181ce74:	10800044 	addi	r2,r2,1
 181ce78:	e0bff905 	stb	r2,-28(fp)
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 181ce7c:	e0bff903 	ldbu	r2,-28(fp)
 181ce80:	10001526 	beq	r2,zero,181ced8 <tcp_slowtmr+0x700>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 181ce84:	e13ff717 	ldw	r4,-36(fp)
 181ce88:	181d8080 	call	181d808 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 181ce8c:	e0bff817 	ldw	r2,-32(fp)
 181ce90:	10000526 	beq	r2,zero,181cea8 <tcp_slowtmr+0x6d0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 181ce94:	e0bff717 	ldw	r2,-36(fp)
 181ce98:	10c00317 	ldw	r3,12(r2)
 181ce9c:	e0bff817 	ldw	r2,-32(fp)
 181cea0:	10c00315 	stw	r3,12(r2)
 181cea4:	00000306 	br	181ceb4 <tcp_slowtmr+0x6dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 181cea8:	e0bff717 	ldw	r2,-36(fp)
 181ceac:	10800317 	ldw	r2,12(r2)
 181ceb0:	d0a7fc15 	stw	r2,-24592(gp)
      }
      pcb2 = pcb;
 181ceb4:	e0bff717 	ldw	r2,-36(fp)
 181ceb8:	e0bffe15 	stw	r2,-8(fp)
      pcb = pcb->next;
 181cebc:	e0bff717 	ldw	r2,-36(fp)
 181cec0:	10800317 	ldw	r2,12(r2)
 181cec4:	e0bff715 	stw	r2,-36(fp)
      memp_free(MEMP_TCP_PCB, pcb2);
 181cec8:	e17ffe17 	ldw	r5,-8(fp)
 181cecc:	01000084 	movi	r4,2
 181ced0:	18341e40 	call	18341e4 <memp_free>
 181ced4:	00000506 	br	181ceec <tcp_slowtmr+0x714>
    } else {
      prev = pcb;
 181ced8:	e0bff717 	ldw	r2,-36(fp)
 181cedc:	e0bff815 	stw	r2,-32(fp)
      pcb = pcb->next;
 181cee0:	e0bff717 	ldw	r2,-36(fp)
 181cee4:	10800317 	ldw	r2,12(r2)
 181cee8:	e0bff715 	stw	r2,-36(fp)

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
 181ceec:	e0bff717 	ldw	r2,-36(fp)
 181cef0:	103fd81e 	bne	r2,zero,181ce54 <__alt_mem_mem_0+0xff7fce54>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
 181cef4:	0001883a 	nop
 181cef8:	e6ffff04 	addi	sp,fp,-4
 181cefc:	dfc00217 	ldw	ra,8(sp)
 181cf00:	df000117 	ldw	fp,4(sp)
 181cf04:	dc000017 	ldw	r16,0(sp)
 181cf08:	dec00304 	addi	sp,sp,12
 181cf0c:	f800283a 	ret

0181cf10 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 181cf10:	defffc04 	addi	sp,sp,-16
 181cf14:	dfc00315 	stw	ra,12(sp)
 181cf18:	df000215 	stw	fp,8(sp)
 181cf1c:	df000204 	addi	fp,sp,8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 181cf20:	d0a7f643 	ldbu	r2,-24615(gp)
 181cf24:	10800044 	addi	r2,r2,1
 181cf28:	d0a7f645 	stb	r2,-24615(gp)

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 181cf2c:	d0a7f717 	ldw	r2,-24612(gp)
 181cf30:	e0bffe15 	stw	r2,-8(fp)

  while(pcb != NULL) {
 181cf34:	00002c06 	br	181cfe8 <tcp_fasttmr+0xd8>
    if (pcb->last_timer != tcp_timer_ctr) {
 181cf38:	e0bffe17 	ldw	r2,-8(fp)
 181cf3c:	10c00943 	ldbu	r3,37(r2)
 181cf40:	d0a7f643 	ldbu	r2,-24615(gp)
 181cf44:	18c03fcc 	andi	r3,r3,255
 181cf48:	10803fcc 	andi	r2,r2,255
 181cf4c:	18802626 	beq	r3,r2,181cfe8 <tcp_fasttmr+0xd8>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 181cf50:	d0e7f643 	ldbu	r3,-24615(gp)
 181cf54:	e0bffe17 	ldw	r2,-8(fp)
 181cf58:	10c00945 	stb	r3,37(r2)
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 181cf5c:	e0bffe17 	ldw	r2,-8(fp)
 181cf60:	10800883 	ldbu	r2,34(r2)
 181cf64:	10803fcc 	andi	r2,r2,255
 181cf68:	1080004c 	andi	r2,r2,1
 181cf6c:	10000f26 	beq	r2,zero,181cfac <tcp_fasttmr+0x9c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 181cf70:	e0bffe17 	ldw	r2,-8(fp)
 181cf74:	10800883 	ldbu	r2,34(r2)
 181cf78:	10800094 	ori	r2,r2,2
 181cf7c:	1007883a 	mov	r3,r2
 181cf80:	e0bffe17 	ldw	r2,-8(fp)
 181cf84:	10c00885 	stb	r3,34(r2)
        tcp_output(pcb);
 181cf88:	e13ffe17 	ldw	r4,-8(fp)
 181cf8c:	181f4fc0 	call	181f4fc <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 181cf90:	e0bffe17 	ldw	r2,-8(fp)
 181cf94:	10c00883 	ldbu	r3,34(r2)
 181cf98:	00bfff04 	movi	r2,-4
 181cf9c:	1884703a 	and	r2,r3,r2
 181cfa0:	1007883a 	mov	r3,r2
 181cfa4:	e0bffe17 	ldw	r2,-8(fp)
 181cfa8:	10c00885 	stb	r3,34(r2)
      }

      next = pcb->next;
 181cfac:	e0bffe17 	ldw	r2,-8(fp)
 181cfb0:	10800317 	ldw	r2,12(r2)
 181cfb4:	e0bfff15 	stw	r2,-4(fp)

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 181cfb8:	e0bffe17 	ldw	r2,-8(fp)
 181cfbc:	10801f17 	ldw	r2,124(r2)
 181cfc0:	10000726 	beq	r2,zero,181cfe0 <tcp_fasttmr+0xd0>
        tcp_active_pcbs_changed = 0;
 181cfc4:	d027f685 	stb	zero,-24614(gp)
        tcp_process_refused_data(pcb);
 181cfc8:	e13ffe17 	ldw	r4,-8(fp)
 181cfcc:	181d0080 	call	181d008 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 181cfd0:	d0a7f683 	ldbu	r2,-24614(gp)
 181cfd4:	10803fcc 	andi	r2,r2,255
 181cfd8:	10000126 	beq	r2,zero,181cfe0 <tcp_fasttmr+0xd0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 181cfdc:	003fd306 	br	181cf2c <__alt_mem_mem_0+0xff7fcf2c>
        }
      }
      pcb = next;
 181cfe0:	e0bfff17 	ldw	r2,-4(fp)
 181cfe4:	e0bffe15 	stw	r2,-8(fp)
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while(pcb != NULL) {
 181cfe8:	e0bffe17 	ldw	r2,-8(fp)
 181cfec:	103fd21e 	bne	r2,zero,181cf38 <__alt_mem_mem_0+0xff7fcf38>
        }
      }
      pcb = next;
    }
  }
}
 181cff0:	0001883a 	nop
 181cff4:	e037883a 	mov	sp,fp
 181cff8:	dfc00117 	ldw	ra,4(sp)
 181cffc:	df000017 	ldw	fp,0(sp)
 181d000:	dec00204 	addi	sp,sp,8
 181d004:	f800283a 	ret

0181d008 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 181d008:	defffb04 	addi	sp,sp,-20
 181d00c:	dfc00415 	stw	ra,16(sp)
 181d010:	df000315 	stw	fp,12(sp)
 181d014:	df000304 	addi	fp,sp,12
 181d018:	e13fff15 	stw	r4,-4(fp)
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
 181d01c:	e0bfff17 	ldw	r2,-4(fp)
 181d020:	10801f17 	ldw	r2,124(r2)
 181d024:	10800343 	ldbu	r2,13(r2)
 181d028:	e0bffd45 	stb	r2,-11(fp)
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
 181d02c:	e0bfff17 	ldw	r2,-4(fp)
 181d030:	10801f17 	ldw	r2,124(r2)
 181d034:	e0bffe15 	stw	r2,-8(fp)
  pcb->refused_data = NULL;
 181d038:	e0bfff17 	ldw	r2,-4(fp)
 181d03c:	10001f15 	stw	zero,124(r2)
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 181d040:	e0bfff17 	ldw	r2,-4(fp)
 181d044:	10802117 	ldw	r2,132(r2)
 181d048:	10000b26 	beq	r2,zero,181d078 <tcp_process_refused_data+0x70>
 181d04c:	e0bfff17 	ldw	r2,-4(fp)
 181d050:	10802117 	ldw	r2,132(r2)
 181d054:	e0ffff17 	ldw	r3,-4(fp)
 181d058:	18c00417 	ldw	r3,16(r3)
 181d05c:	000f883a 	mov	r7,zero
 181d060:	e1bffe17 	ldw	r6,-8(fp)
 181d064:	e17fff17 	ldw	r5,-4(fp)
 181d068:	1809883a 	mov	r4,r3
 181d06c:	103ee83a 	callr	r2
 181d070:	e0bffd05 	stb	r2,-12(fp)
 181d074:	00000606 	br	181d090 <tcp_process_refused_data+0x88>
 181d078:	000f883a 	mov	r7,zero
 181d07c:	e1bffe17 	ldw	r6,-8(fp)
 181d080:	e17fff17 	ldw	r5,-4(fp)
 181d084:	0009883a 	mov	r4,zero
 181d088:	181d2a80 	call	181d2a8 <tcp_recv_null>
 181d08c:	e0bffd05 	stb	r2,-12(fp)
  if (err == ERR_OK) {
 181d090:	e0bffd07 	ldb	r2,-12(fp)
 181d094:	1000221e 	bne	r2,zero,181d120 <tcp_process_refused_data+0x118>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
 181d098:	e0bffd43 	ldbu	r2,-11(fp)
 181d09c:	1080080c 	andi	r2,r2,32
 181d0a0:	10002726 	beq	r2,zero,181d140 <tcp_process_refused_data+0x138>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
 181d0a4:	e0bfff17 	ldw	r2,-4(fp)
 181d0a8:	10800c0b 	ldhu	r2,48(r2)
 181d0ac:	10bfffcc 	andi	r2,r2,65535
 181d0b0:	10880020 	cmpeqi	r2,r2,8192
 181d0b4:	1000061e 	bne	r2,zero,181d0d0 <tcp_process_refused_data+0xc8>
        pcb->rcv_wnd++;
 181d0b8:	e0bfff17 	ldw	r2,-4(fp)
 181d0bc:	10800c0b 	ldhu	r2,48(r2)
 181d0c0:	10800044 	addi	r2,r2,1
 181d0c4:	1007883a 	mov	r3,r2
 181d0c8:	e0bfff17 	ldw	r2,-4(fp)
 181d0cc:	10c00c0d 	sth	r3,48(r2)
      }
      TCP_EVENT_CLOSED(pcb, err);
 181d0d0:	e0bfff17 	ldw	r2,-4(fp)
 181d0d4:	10802117 	ldw	r2,132(r2)
 181d0d8:	10000b26 	beq	r2,zero,181d108 <tcp_process_refused_data+0x100>
 181d0dc:	e0bfff17 	ldw	r2,-4(fp)
 181d0e0:	10802117 	ldw	r2,132(r2)
 181d0e4:	e0ffff17 	ldw	r3,-4(fp)
 181d0e8:	18c00417 	ldw	r3,16(r3)
 181d0ec:	000f883a 	mov	r7,zero
 181d0f0:	000d883a 	mov	r6,zero
 181d0f4:	e17fff17 	ldw	r5,-4(fp)
 181d0f8:	1809883a 	mov	r4,r3
 181d0fc:	103ee83a 	callr	r2
 181d100:	e0bffd05 	stb	r2,-12(fp)
 181d104:	00000106 	br	181d10c <tcp_process_refused_data+0x104>
 181d108:	e03ffd05 	stb	zero,-12(fp)
      if (err == ERR_ABRT) {
 181d10c:	e0bffd07 	ldb	r2,-12(fp)
 181d110:	10bffd98 	cmpnei	r2,r2,-10
 181d114:	10000a1e 	bne	r2,zero,181d140 <tcp_process_refused_data+0x138>
        return ERR_ABRT;
 181d118:	00bffd84 	movi	r2,-10
 181d11c:	00000906 	br	181d144 <tcp_process_refused_data+0x13c>
      }
    }
  } else if (err == ERR_ABRT) {
 181d120:	e0bffd07 	ldb	r2,-12(fp)
 181d124:	10bffd98 	cmpnei	r2,r2,-10
 181d128:	1000021e 	bne	r2,zero,181d134 <tcp_process_refused_data+0x12c>
    /* if err == ERR_ABRT, 'pcb' is already deallocated */
    /* Drop incoming packets because pcb is "full" (only if the incoming
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
 181d12c:	00bffd84 	movi	r2,-10
 181d130:	00000406 	br	181d144 <tcp_process_refused_data+0x13c>
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
 181d134:	e0bfff17 	ldw	r2,-4(fp)
 181d138:	e0fffe17 	ldw	r3,-8(fp)
 181d13c:	10c01f15 	stw	r3,124(r2)
  }
  return ERR_OK;
 181d140:	0005883a 	mov	r2,zero
}
 181d144:	e037883a 	mov	sp,fp
 181d148:	dfc00117 	ldw	ra,4(sp)
 181d14c:	df000017 	ldw	fp,0(sp)
 181d150:	dec00204 	addi	sp,sp,8
 181d154:	f800283a 	ret

0181d158 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 181d158:	defffc04 	addi	sp,sp,-16
 181d15c:	dfc00315 	stw	ra,12(sp)
 181d160:	df000215 	stw	fp,8(sp)
 181d164:	df000204 	addi	fp,sp,8
 181d168:	e13fff15 	stw	r4,-4(fp)
  while (seg != NULL) {
 181d16c:	00000706 	br	181d18c <tcp_segs_free+0x34>
    struct tcp_seg *next = seg->next;
 181d170:	e0bfff17 	ldw	r2,-4(fp)
 181d174:	10800017 	ldw	r2,0(r2)
 181d178:	e0bffe15 	stw	r2,-8(fp)
    tcp_seg_free(seg);
 181d17c:	e13fff17 	ldw	r4,-4(fp)
 181d180:	181d1ac0 	call	181d1ac <tcp_seg_free>
    seg = next;
 181d184:	e0bffe17 	ldw	r2,-8(fp)
 181d188:	e0bfff15 	stw	r2,-4(fp)
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
 181d18c:	e0bfff17 	ldw	r2,-4(fp)
 181d190:	103ff71e 	bne	r2,zero,181d170 <__alt_mem_mem_0+0xff7fd170>
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
    seg = next;
  }
}
 181d194:	0001883a 	nop
 181d198:	e037883a 	mov	sp,fp
 181d19c:	dfc00117 	ldw	ra,4(sp)
 181d1a0:	df000017 	ldw	fp,0(sp)
 181d1a4:	dec00204 	addi	sp,sp,8
 181d1a8:	f800283a 	ret

0181d1ac <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 181d1ac:	defffd04 	addi	sp,sp,-12
 181d1b0:	dfc00215 	stw	ra,8(sp)
 181d1b4:	df000115 	stw	fp,4(sp)
 181d1b8:	df000104 	addi	fp,sp,4
 181d1bc:	e13fff15 	stw	r4,-4(fp)
  if (seg != NULL) {
 181d1c0:	e0bfff17 	ldw	r2,-4(fp)
 181d1c4:	10000a26 	beq	r2,zero,181d1f0 <tcp_seg_free+0x44>
    if (seg->p != NULL) {
 181d1c8:	e0bfff17 	ldw	r2,-4(fp)
 181d1cc:	10800117 	ldw	r2,4(r2)
 181d1d0:	10000426 	beq	r2,zero,181d1e4 <tcp_seg_free+0x38>
      pbuf_free(seg->p);
 181d1d4:	e0bfff17 	ldw	r2,-4(fp)
 181d1d8:	10800117 	ldw	r2,4(r2)
 181d1dc:	1009883a 	mov	r4,r2
 181d1e0:	181a9040 	call	181a904 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 181d1e4:	e17fff17 	ldw	r5,-4(fp)
 181d1e8:	01000104 	movi	r4,4
 181d1ec:	18341e40 	call	18341e4 <memp_free>
  }
}
 181d1f0:	0001883a 	nop
 181d1f4:	e037883a 	mov	sp,fp
 181d1f8:	dfc00117 	ldw	ra,4(sp)
 181d1fc:	df000017 	ldw	fp,0(sp)
 181d200:	dec00204 	addi	sp,sp,8
 181d204:	f800283a 	ret

0181d208 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 181d208:	defffd04 	addi	sp,sp,-12
 181d20c:	df000215 	stw	fp,8(sp)
 181d210:	df000204 	addi	fp,sp,8
 181d214:	e13ffe15 	stw	r4,-8(fp)
 181d218:	2805883a 	mov	r2,r5
 181d21c:	e0bfff05 	stb	r2,-4(fp)
  pcb->prio = prio;
 181d220:	e0bffe17 	ldw	r2,-8(fp)
 181d224:	e0ffff03 	ldbu	r3,-4(fp)
 181d228:	10c00705 	stb	r3,28(r2)
}
 181d22c:	0001883a 	nop
 181d230:	e037883a 	mov	sp,fp
 181d234:	df000017 	ldw	fp,0(sp)
 181d238:	dec00104 	addi	sp,sp,4
 181d23c:	f800283a 	ret

0181d240 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 181d240:	defffc04 	addi	sp,sp,-16
 181d244:	dfc00315 	stw	ra,12(sp)
 181d248:	df000215 	stw	fp,8(sp)
 181d24c:	df000204 	addi	fp,sp,8
 181d250:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 181d254:	01000104 	movi	r4,4
 181d258:	18340280 	call	1834028 <memp_malloc>
 181d25c:	e0bffe15 	stw	r2,-8(fp)
  if (cseg == NULL) {
 181d260:	e0bffe17 	ldw	r2,-8(fp)
 181d264:	1000021e 	bne	r2,zero,181d270 <tcp_seg_copy+0x30>
    return NULL;
 181d268:	0005883a 	mov	r2,zero
 181d26c:	00000906 	br	181d294 <tcp_seg_copy+0x54>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
 181d270:	01800504 	movi	r6,20
 181d274:	e17fff17 	ldw	r5,-4(fp)
 181d278:	e13ffe17 	ldw	r4,-8(fp)
 181d27c:	180604c0 	call	180604c <memcpy>
  pbuf_ref(cseg->p);
 181d280:	e0bffe17 	ldw	r2,-8(fp)
 181d284:	10800117 	ldw	r2,4(r2)
 181d288:	1009883a 	mov	r4,r2
 181d28c:	181aa840 	call	181aa84 <pbuf_ref>
  return cseg;
 181d290:	e0bffe17 	ldw	r2,-8(fp)
}
 181d294:	e037883a 	mov	sp,fp
 181d298:	dfc00117 	ldw	ra,4(sp)
 181d29c:	df000017 	ldw	fp,0(sp)
 181d2a0:	dec00204 	addi	sp,sp,8
 181d2a4:	f800283a 	ret

0181d2a8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 181d2a8:	defffa04 	addi	sp,sp,-24
 181d2ac:	dfc00515 	stw	ra,20(sp)
 181d2b0:	df000415 	stw	fp,16(sp)
 181d2b4:	df000404 	addi	fp,sp,16
 181d2b8:	e13ffc15 	stw	r4,-16(fp)
 181d2bc:	e17ffd15 	stw	r5,-12(fp)
 181d2c0:	e1bffe15 	stw	r6,-8(fp)
 181d2c4:	3805883a 	mov	r2,r7
 181d2c8:	e0bfff05 	stb	r2,-4(fp)
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 181d2cc:	e0bffe17 	ldw	r2,-8(fp)
 181d2d0:	10000926 	beq	r2,zero,181d2f8 <tcp_recv_null+0x50>
    tcp_recved(pcb, p->tot_len);
 181d2d4:	e0bffe17 	ldw	r2,-8(fp)
 181d2d8:	1080020b 	ldhu	r2,8(r2)
 181d2dc:	10bfffcc 	andi	r2,r2,65535
 181d2e0:	100b883a 	mov	r5,r2
 181d2e4:	e13ffd17 	ldw	r4,-12(fp)
 181d2e8:	181c2c00 	call	181c2c0 <tcp_recved>
    pbuf_free(p);
 181d2ec:	e13ffe17 	ldw	r4,-8(fp)
 181d2f0:	181a9040 	call	181a904 <pbuf_free>
 181d2f4:	00000506 	br	181d30c <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
 181d2f8:	e0bfff07 	ldb	r2,-4(fp)
 181d2fc:	1000031e 	bne	r2,zero,181d30c <tcp_recv_null+0x64>
    return tcp_close(pcb);
 181d300:	e13ffd17 	ldw	r4,-12(fp)
 181d304:	181ba840 	call	181ba84 <tcp_close>
 181d308:	00000106 	br	181d310 <tcp_recv_null+0x68>
  }
  return ERR_OK;
 181d30c:	0005883a 	mov	r2,zero
}
 181d310:	e037883a 	mov	sp,fp
 181d314:	dfc00117 	ldw	ra,4(sp)
 181d318:	df000017 	ldw	fp,0(sp)
 181d31c:	dec00204 	addi	sp,sp,8
 181d320:	f800283a 	ret

0181d324 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 181d324:	defff904 	addi	sp,sp,-28
 181d328:	dfc00615 	stw	ra,24(sp)
 181d32c:	df000515 	stw	fp,20(sp)
 181d330:	df000504 	addi	fp,sp,20
 181d334:	2005883a 	mov	r2,r4
 181d338:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
 181d33c:	00801fc4 	movi	r2,127
 181d340:	e0bffe05 	stb	r2,-8(fp)
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 181d344:	e03ffd15 	stw	zero,-12(fp)
  inactive = NULL;
 181d348:	e03ffc15 	stw	zero,-16(fp)
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 181d34c:	d0a7f717 	ldw	r2,-24612(gp)
 181d350:	e0bffb15 	stw	r2,-20(fp)
 181d354:	00001d06 	br	181d3cc <tcp_kill_prio+0xa8>
    if (pcb->prio <= prio &&
 181d358:	e0bffb17 	ldw	r2,-20(fp)
 181d35c:	10800703 	ldbu	r2,28(r2)
 181d360:	10803fcc 	andi	r2,r2,255
 181d364:	e0ffff03 	ldbu	r3,-4(fp)
 181d368:	18801536 	bltu	r3,r2,181d3c0 <tcp_kill_prio+0x9c>
       pcb->prio <= mprio &&
 181d36c:	e0bffb17 	ldw	r2,-20(fp)
 181d370:	10800703 	ldbu	r2,28(r2)
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
 181d374:	10803fcc 	andi	r2,r2,255
 181d378:	e0fffe03 	ldbu	r3,-8(fp)
 181d37c:	18801036 	bltu	r3,r2,181d3c0 <tcp_kill_prio+0x9c>
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 181d380:	d0e7f817 	ldw	r3,-24608(gp)
 181d384:	e0bffb17 	ldw	r2,-20(fp)
 181d388:	10800a17 	ldw	r2,40(r2)
 181d38c:	1887c83a 	sub	r3,r3,r2
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
 181d390:	e0bffd17 	ldw	r2,-12(fp)
 181d394:	18800a36 	bltu	r3,r2,181d3c0 <tcp_kill_prio+0x9c>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
 181d398:	d0e7f817 	ldw	r3,-24608(gp)
 181d39c:	e0bffb17 	ldw	r2,-20(fp)
 181d3a0:	10800a17 	ldw	r2,40(r2)
 181d3a4:	1885c83a 	sub	r2,r3,r2
 181d3a8:	e0bffd15 	stw	r2,-12(fp)
      inactive = pcb;
 181d3ac:	e0bffb17 	ldw	r2,-20(fp)
 181d3b0:	e0bffc15 	stw	r2,-16(fp)
      mprio = pcb->prio;
 181d3b4:	e0bffb17 	ldw	r2,-20(fp)
 181d3b8:	10800703 	ldbu	r2,28(r2)
 181d3bc:	e0bffe05 	stb	r2,-8(fp)
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 181d3c0:	e0bffb17 	ldw	r2,-20(fp)
 181d3c4:	10800317 	ldw	r2,12(r2)
 181d3c8:	e0bffb15 	stw	r2,-20(fp)
 181d3cc:	e0bffb17 	ldw	r2,-20(fp)
 181d3d0:	103fe11e 	bne	r2,zero,181d358 <__alt_mem_mem_0+0xff7fd358>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
 181d3d4:	e0bffc17 	ldw	r2,-16(fp)
 181d3d8:	10000226 	beq	r2,zero,181d3e4 <tcp_kill_prio+0xc0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 181d3dc:	e13ffc17 	ldw	r4,-16(fp)
 181d3e0:	181bd300 	call	181bd30 <tcp_abort>
  }
}
 181d3e4:	0001883a 	nop
 181d3e8:	e037883a 	mov	sp,fp
 181d3ec:	dfc00117 	ldw	ra,4(sp)
 181d3f0:	df000017 	ldw	fp,0(sp)
 181d3f4:	dec00204 	addi	sp,sp,8
 181d3f8:	f800283a 	ret

0181d3fc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 181d3fc:	defffb04 	addi	sp,sp,-20
 181d400:	dfc00415 	stw	ra,16(sp)
 181d404:	df000315 	stw	fp,12(sp)
 181d408:	df000304 	addi	fp,sp,12
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 181d40c:	e03fff15 	stw	zero,-4(fp)
  inactive = NULL;
 181d410:	e03ffe15 	stw	zero,-8(fp)
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 181d414:	d0a7fc17 	ldw	r2,-24592(gp)
 181d418:	e0bffd15 	stw	r2,-12(fp)
 181d41c:	00001006 	br	181d460 <tcp_kill_timewait+0x64>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 181d420:	d0e7f817 	ldw	r3,-24608(gp)
 181d424:	e0bffd17 	ldw	r2,-12(fp)
 181d428:	10800a17 	ldw	r2,40(r2)
 181d42c:	1887c83a 	sub	r3,r3,r2
 181d430:	e0bfff17 	ldw	r2,-4(fp)
 181d434:	18800736 	bltu	r3,r2,181d454 <tcp_kill_timewait+0x58>
      inactivity = tcp_ticks - pcb->tmr;
 181d438:	d0e7f817 	ldw	r3,-24608(gp)
 181d43c:	e0bffd17 	ldw	r2,-12(fp)
 181d440:	10800a17 	ldw	r2,40(r2)
 181d444:	1885c83a 	sub	r2,r3,r2
 181d448:	e0bfff15 	stw	r2,-4(fp)
      inactive = pcb;
 181d44c:	e0bffd17 	ldw	r2,-12(fp)
 181d450:	e0bffe15 	stw	r2,-8(fp)
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 181d454:	e0bffd17 	ldw	r2,-12(fp)
 181d458:	10800317 	ldw	r2,12(r2)
 181d45c:	e0bffd15 	stw	r2,-12(fp)
 181d460:	e0bffd17 	ldw	r2,-12(fp)
 181d464:	103fee1e 	bne	r2,zero,181d420 <__alt_mem_mem_0+0xff7fd420>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
 181d468:	e0bffe17 	ldw	r2,-8(fp)
 181d46c:	10000226 	beq	r2,zero,181d478 <tcp_kill_timewait+0x7c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 181d470:	e13ffe17 	ldw	r4,-8(fp)
 181d474:	181bd300 	call	181bd30 <tcp_abort>
  }
}
 181d478:	0001883a 	nop
 181d47c:	e037883a 	mov	sp,fp
 181d480:	dfc00117 	ldw	ra,4(sp)
 181d484:	df000017 	ldw	fp,0(sp)
 181d488:	dec00204 	addi	sp,sp,8
 181d48c:	f800283a 	ret

0181d490 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 181d490:	defffb04 	addi	sp,sp,-20
 181d494:	dfc00415 	stw	ra,16(sp)
 181d498:	df000315 	stw	fp,12(sp)
 181d49c:	df000304 	addi	fp,sp,12
 181d4a0:	2005883a 	mov	r2,r4
 181d4a4:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 181d4a8:	01000084 	movi	r4,2
 181d4ac:	18340280 	call	1834028 <memp_malloc>
 181d4b0:	e0bffd15 	stw	r2,-12(fp)
  if (pcb == NULL) {
 181d4b4:	e0bffd17 	ldw	r2,-12(fp)
 181d4b8:	10001e1e 	bne	r2,zero,181d534 <tcp_alloc+0xa4>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 181d4bc:	181d3fc0 	call	181d3fc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 181d4c0:	01000084 	movi	r4,2
 181d4c4:	18340280 	call	1834028 <memp_malloc>
 181d4c8:	e0bffd15 	stw	r2,-12(fp)
    if (pcb == NULL) {
 181d4cc:	e0bffd17 	ldw	r2,-12(fp)
 181d4d0:	10000f1e 	bne	r2,zero,181d510 <tcp_alloc+0x80>
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
 181d4d4:	e0bfff03 	ldbu	r2,-4(fp)
 181d4d8:	1009883a 	mov	r4,r2
 181d4dc:	181d3240 	call	181d324 <tcp_kill_prio>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 181d4e0:	01000084 	movi	r4,2
 181d4e4:	18340280 	call	1834028 <memp_malloc>
 181d4e8:	e0bffd15 	stw	r2,-12(fp)
      if (pcb != NULL) {
 181d4ec:	e0bffd17 	ldw	r2,-12(fp)
 181d4f0:	10000726 	beq	r2,zero,181d510 <tcp_alloc+0x80>
        /* adjust err stats: memp_malloc failed twice before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 181d4f4:	008061f4 	movhi	r2,391
 181d4f8:	10a77104 	addi	r2,r2,-25148
 181d4fc:	10806217 	ldw	r2,392(r2)
 181d500:	10ffffc4 	addi	r3,r2,-1
 181d504:	008061f4 	movhi	r2,391
 181d508:	10a77104 	addi	r2,r2,-25148
 181d50c:	10c06215 	stw	r3,392(r2)
      }
    }
    if (pcb != NULL) {
 181d510:	e0bffd17 	ldw	r2,-12(fp)
 181d514:	10000726 	beq	r2,zero,181d534 <tcp_alloc+0xa4>
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 181d518:	008061f4 	movhi	r2,391
 181d51c:	10a77104 	addi	r2,r2,-25148
 181d520:	10806217 	ldw	r2,392(r2)
 181d524:	10ffffc4 	addi	r3,r2,-1
 181d528:	008061f4 	movhi	r2,391
 181d52c:	10a77104 	addi	r2,r2,-25148
 181d530:	10c06215 	stw	r3,392(r2)
    }
  }
  if (pcb != NULL) {
 181d534:	e0bffd17 	ldw	r2,-12(fp)
 181d538:	10004f26 	beq	r2,zero,181d678 <tcp_alloc+0x1e8>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 181d53c:	01802904 	movi	r6,164
 181d540:	000b883a 	mov	r5,zero
 181d544:	e13ffd17 	ldw	r4,-12(fp)
 181d548:	18061940 	call	1806194 <memset>
    pcb->prio = prio;
 181d54c:	e0bffd17 	ldw	r2,-12(fp)
 181d550:	e0ffff03 	ldbu	r3,-4(fp)
 181d554:	10c00705 	stb	r3,28(r2)
    pcb->snd_buf = TCP_SND_BUF;
 181d558:	e0bffd17 	ldw	r2,-12(fp)
 181d55c:	00c2da04 	movi	r3,2920
 181d560:	10c01a8d 	sth	r3,106(r2)
    pcb->snd_queuelen = 0;
 181d564:	e0bffd17 	ldw	r2,-12(fp)
 181d568:	10001b0d 	sth	zero,108(r2)
    pcb->rcv_wnd = TCP_WND;
 181d56c:	e0bffd17 	ldw	r2,-12(fp)
 181d570:	00c80004 	movi	r3,8192
 181d574:	10c00c0d 	sth	r3,48(r2)
    pcb->rcv_ann_wnd = TCP_WND;
 181d578:	e0bffd17 	ldw	r2,-12(fp)
 181d57c:	00c80004 	movi	r3,8192
 181d580:	10c00c8d 	sth	r3,50(r2)
    pcb->tos = 0;
 181d584:	e0bffd17 	ldw	r2,-12(fp)
 181d588:	10000245 	stb	zero,9(r2)
    pcb->ttl = TCP_TTL;
 181d58c:	e0bffd17 	ldw	r2,-12(fp)
 181d590:	00c01004 	movi	r3,64
 181d594:	10c00285 	stb	r3,10(r2)
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 181d598:	e0bffd17 	ldw	r2,-12(fp)
 181d59c:	00c08604 	movi	r3,536
 181d5a0:	10c00e8d 	sth	r3,58(r2)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 181d5a4:	e0bffd17 	ldw	r2,-12(fp)
 181d5a8:	00c00184 	movi	r3,6
 181d5ac:	10c0120d 	sth	r3,72(r2)
    pcb->sa = 0;
 181d5b0:	e0bffd17 	ldw	r2,-12(fp)
 181d5b4:	1000110d 	sth	zero,68(r2)
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 181d5b8:	e0bffd17 	ldw	r2,-12(fp)
 181d5bc:	00c00184 	movi	r3,6
 181d5c0:	10c0118d 	sth	r3,70(r2)
    pcb->rtime = -1;
 181d5c4:	e0bffd17 	ldw	r2,-12(fp)
 181d5c8:	00ffffc4 	movi	r3,-1
 181d5cc:	10c00e0d 	sth	r3,56(r2)
    pcb->cwnd = 1;
 181d5d0:	e0bffd17 	ldw	r2,-12(fp)
 181d5d4:	00c00044 	movi	r3,1
 181d5d8:	10c0140d 	sth	r3,80(r2)
    iss = tcp_next_iss();
 181d5dc:	181da840 	call	181da84 <tcp_next_iss>
 181d5e0:	e0bffe15 	stw	r2,-8(fp)
    pcb->snd_wl2 = iss;
 181d5e4:	e0bffd17 	ldw	r2,-12(fp)
 181d5e8:	e0fffe17 	ldw	r3,-8(fp)
 181d5ec:	10c01715 	stw	r3,92(r2)
    pcb->snd_nxt = iss;
 181d5f0:	e0bffd17 	ldw	r2,-12(fp)
 181d5f4:	e0fffe17 	ldw	r3,-8(fp)
 181d5f8:	10c01515 	stw	r3,84(r2)
    pcb->lastack = iss;
 181d5fc:	e0bffd17 	ldw	r2,-12(fp)
 181d600:	e0fffe17 	ldw	r3,-8(fp)
 181d604:	10c01315 	stw	r3,76(r2)
    pcb->snd_lbb = iss;   
 181d608:	e0bffd17 	ldw	r2,-12(fp)
 181d60c:	e0fffe17 	ldw	r3,-8(fp)
 181d610:	10c01815 	stw	r3,96(r2)
    pcb->tmr = tcp_ticks;
 181d614:	d0e7f817 	ldw	r3,-24608(gp)
 181d618:	e0bffd17 	ldw	r2,-12(fp)
 181d61c:	10c00a15 	stw	r3,40(r2)
    pcb->last_timer = tcp_timer_ctr;
 181d620:	d0e7f643 	ldbu	r3,-24615(gp)
 181d624:	e0bffd17 	ldw	r2,-12(fp)
 181d628:	10c00945 	stb	r3,37(r2)

    pcb->polltmr = 0;
 181d62c:	e0bffd17 	ldw	r2,-12(fp)
 181d630:	100008c5 	stb	zero,35(r2)

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 181d634:	e0fffd17 	ldw	r3,-12(fp)
 181d638:	008060b4 	movhi	r2,386
 181d63c:	10b4aa04 	addi	r2,r2,-11608
 181d640:	18802115 	stw	r2,132(r3)
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 181d644:	e0fffd17 	ldw	r3,-12(fp)
 181d648:	00801bb4 	movhi	r2,110
 181d64c:	10b74004 	addi	r2,r2,-8960
 181d650:	18802515 	stw	r2,148(r3)
    
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 181d654:	e0fffd17 	ldw	r3,-12(fp)
 181d658:	00800074 	movhi	r2,1
 181d65c:	10893e04 	addi	r2,r2,9464
 181d660:	18802615 	stw	r2,152(r3)
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 181d664:	e0bffd17 	ldw	r2,-12(fp)
 181d668:	00c00244 	movi	r3,9
 181d66c:	10c02715 	stw	r3,156(r2)
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
 181d670:	e0bffd17 	ldw	r2,-12(fp)
 181d674:	10002885 	stb	zero,162(r2)
  }
  return pcb;
 181d678:	e0bffd17 	ldw	r2,-12(fp)
}
 181d67c:	e037883a 	mov	sp,fp
 181d680:	dfc00117 	ldw	ra,4(sp)
 181d684:	df000017 	ldw	fp,0(sp)
 181d688:	dec00204 	addi	sp,sp,8
 181d68c:	f800283a 	ret

0181d690 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 181d690:	defffe04 	addi	sp,sp,-8
 181d694:	dfc00115 	stw	ra,4(sp)
 181d698:	df000015 	stw	fp,0(sp)
 181d69c:	d839883a 	mov	fp,sp
  return tcp_alloc(TCP_PRIO_NORMAL);
 181d6a0:	01001004 	movi	r4,64
 181d6a4:	181d4900 	call	181d490 <tcp_alloc>
}
 181d6a8:	e037883a 	mov	sp,fp
 181d6ac:	dfc00117 	ldw	ra,4(sp)
 181d6b0:	df000017 	ldw	fp,0(sp)
 181d6b4:	dec00204 	addi	sp,sp,8
 181d6b8:	f800283a 	ret

0181d6bc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */ 
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 181d6bc:	defffd04 	addi	sp,sp,-12
 181d6c0:	df000215 	stw	fp,8(sp)
 181d6c4:	df000204 	addi	fp,sp,8
 181d6c8:	e13ffe15 	stw	r4,-8(fp)
 181d6cc:	e17fff15 	stw	r5,-4(fp)
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
 181d6d0:	e0bffe17 	ldw	r2,-8(fp)
 181d6d4:	e0ffff17 	ldw	r3,-4(fp)
 181d6d8:	10c00415 	stw	r3,16(r2)
}
 181d6dc:	0001883a 	nop
 181d6e0:	e037883a 	mov	sp,fp
 181d6e4:	df000017 	ldw	fp,0(sp)
 181d6e8:	dec00104 	addi	sp,sp,4
 181d6ec:	f800283a 	ret

0181d6f0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 181d6f0:	defffd04 	addi	sp,sp,-12
 181d6f4:	df000215 	stw	fp,8(sp)
 181d6f8:	df000204 	addi	fp,sp,8
 181d6fc:	e13ffe15 	stw	r4,-8(fp)
 181d700:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
 181d704:	e0bffe17 	ldw	r2,-8(fp)
 181d708:	e0ffff17 	ldw	r3,-4(fp)
 181d70c:	10c02115 	stw	r3,132(r2)
}
 181d710:	0001883a 	nop
 181d714:	e037883a 	mov	sp,fp
 181d718:	df000017 	ldw	fp,0(sp)
 181d71c:	dec00104 	addi	sp,sp,4
 181d720:	f800283a 	ret

0181d724 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 181d724:	defffd04 	addi	sp,sp,-12
 181d728:	df000215 	stw	fp,8(sp)
 181d72c:	df000204 	addi	fp,sp,8
 181d730:	e13ffe15 	stw	r4,-8(fp)
 181d734:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
 181d738:	e0bffe17 	ldw	r2,-8(fp)
 181d73c:	e0ffff17 	ldw	r3,-4(fp)
 181d740:	10c02015 	stw	r3,128(r2)
}
 181d744:	0001883a 	nop
 181d748:	e037883a 	mov	sp,fp
 181d74c:	df000017 	ldw	fp,0(sp)
 181d750:	dec00104 	addi	sp,sp,4
 181d754:	f800283a 	ret

0181d758 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 181d758:	defffd04 	addi	sp,sp,-12
 181d75c:	df000215 	stw	fp,8(sp)
 181d760:	df000204 	addi	fp,sp,8
 181d764:	e13ffe15 	stw	r4,-8(fp)
 181d768:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
 181d76c:	e0bffe17 	ldw	r2,-8(fp)
 181d770:	e0ffff17 	ldw	r3,-4(fp)
 181d774:	10c02415 	stw	r3,144(r2)
}
 181d778:	0001883a 	nop
 181d77c:	e037883a 	mov	sp,fp
 181d780:	df000017 	ldw	fp,0(sp)
 181d784:	dec00104 	addi	sp,sp,4
 181d788:	f800283a 	ret

0181d78c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */ 
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 181d78c:	defffd04 	addi	sp,sp,-12
 181d790:	df000215 	stw	fp,8(sp)
 181d794:	df000204 	addi	fp,sp,8
 181d798:	e13ffe15 	stw	r4,-8(fp)
 181d79c:	e17fff15 	stw	r5,-4(fp)
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
 181d7a0:	e0bffe17 	ldw	r2,-8(fp)
 181d7a4:	e0ffff17 	ldw	r3,-4(fp)
 181d7a8:	10c00515 	stw	r3,20(r2)
}
 181d7ac:	0001883a 	nop
 181d7b0:	e037883a 	mov	sp,fp
 181d7b4:	df000017 	ldw	fp,0(sp)
 181d7b8:	dec00104 	addi	sp,sp,4
 181d7bc:	f800283a 	ret

0181d7c0 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */ 
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 181d7c0:	defffc04 	addi	sp,sp,-16
 181d7c4:	df000315 	stw	fp,12(sp)
 181d7c8:	df000304 	addi	fp,sp,12
 181d7cc:	e13ffd15 	stw	r4,-12(fp)
 181d7d0:	e17ffe15 	stw	r5,-8(fp)
 181d7d4:	3005883a 	mov	r2,r6
 181d7d8:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 181d7dc:	e0bffd17 	ldw	r2,-12(fp)
 181d7e0:	e0fffe17 	ldw	r3,-8(fp)
 181d7e4:	10c02315 	stw	r3,140(r2)
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
 181d7e8:	e0bffd17 	ldw	r2,-12(fp)
 181d7ec:	e0ffff03 	ldbu	r3,-4(fp)
 181d7f0:	10c00905 	stb	r3,36(r2)
}
 181d7f4:	0001883a 	nop
 181d7f8:	e037883a 	mov	sp,fp
 181d7fc:	df000017 	ldw	fp,0(sp)
 181d800:	dec00104 	addi	sp,sp,4
 181d804:	f800283a 	ret

0181d808 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 181d808:	defffc04 	addi	sp,sp,-16
 181d80c:	dfc00315 	stw	ra,12(sp)
 181d810:	df000215 	stw	fp,8(sp)
 181d814:	df000204 	addi	fp,sp,8
 181d818:	e13fff15 	stw	r4,-4(fp)
  if (pcb->state != CLOSED &&
 181d81c:	e0bfff17 	ldw	r2,-4(fp)
 181d820:	10800617 	ldw	r2,24(r2)
 181d824:	10004e26 	beq	r2,zero,181d960 <tcp_pcb_purge+0x158>
     pcb->state != TIME_WAIT &&
 181d828:	e0bfff17 	ldw	r2,-4(fp)
 181d82c:	10800617 	ldw	r2,24(r2)
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
 181d830:	108002a0 	cmpeqi	r2,r2,10
 181d834:	10004a1e 	bne	r2,zero,181d960 <tcp_pcb_purge+0x158>
     pcb->state != TIME_WAIT &&
     pcb->state != LISTEN) {
 181d838:	e0bfff17 	ldw	r2,-4(fp)
 181d83c:	10800617 	ldw	r2,24(r2)
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
     pcb->state != TIME_WAIT &&
 181d840:	10800060 	cmpeqi	r2,r2,1
 181d844:	1000461e 	bne	r2,zero,181d960 <tcp_pcb_purge+0x158>
     pcb->state != LISTEN) {

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

#if TCP_LISTEN_BACKLOG
    if (pcb->state == SYN_RCVD) {
 181d848:	e0bfff17 	ldw	r2,-4(fp)
 181d84c:	10800617 	ldw	r2,24(r2)
 181d850:	108000d8 	cmpnei	r2,r2,3
 181d854:	1000201e 	bne	r2,zero,181d8d8 <tcp_pcb_purge+0xd0>
      /* Need to find the corresponding listen_pcb and decrease its accepts_pending */
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 181d858:	d0a7f917 	ldw	r2,-24604(gp)
 181d85c:	e0bffe15 	stw	r2,-8(fp)
 181d860:	00001b06 	br	181d8d0 <tcp_pcb_purge+0xc8>
        if ((lpcb->local_port == pcb->local_port) &&
 181d864:	e0bffe17 	ldw	r2,-8(fp)
 181d868:	10c0078b 	ldhu	r3,30(r2)
 181d86c:	e0bfff17 	ldw	r2,-4(fp)
 181d870:	1080078b 	ldhu	r2,30(r2)
 181d874:	18ffffcc 	andi	r3,r3,65535
 181d878:	10bfffcc 	andi	r2,r2,65535
 181d87c:	1880111e 	bne	r3,r2,181d8c4 <tcp_pcb_purge+0xbc>
            (ip_addr_isany(&lpcb->local_ip) ||
 181d880:	e0bffe17 	ldw	r2,-8(fp)
      /* Need to find the corresponding listen_pcb and decrease its accepts_pending */
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
        if ((lpcb->local_port == pcb->local_port) &&
 181d884:	10000826 	beq	r2,zero,181d8a8 <tcp_pcb_purge+0xa0>
            (ip_addr_isany(&lpcb->local_ip) ||
 181d888:	e0bffe17 	ldw	r2,-8(fp)
 181d88c:	10800017 	ldw	r2,0(r2)
 181d890:	10000526 	beq	r2,zero,181d8a8 <tcp_pcb_purge+0xa0>
             ip_addr_cmp(&pcb->local_ip, &lpcb->local_ip))) {
 181d894:	e0bfff17 	ldw	r2,-4(fp)
 181d898:	10c00017 	ldw	r3,0(r2)
 181d89c:	e0bffe17 	ldw	r2,-8(fp)
 181d8a0:	10800017 	ldw	r2,0(r2)
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
        if ((lpcb->local_port == pcb->local_port) &&
            (ip_addr_isany(&lpcb->local_ip) ||
 181d8a4:	1880071e 	bne	r3,r2,181d8c4 <tcp_pcb_purge+0xbc>
             ip_addr_cmp(&pcb->local_ip, &lpcb->local_ip))) {
            /* port and address of the listen pcb match the timed-out pcb */
            LWIP_ASSERT("tcp_pcb_purge: listen pcb does not have accepts pending",
              lpcb->accepts_pending > 0);
            lpcb->accepts_pending--;
 181d8a8:	e0bffe17 	ldw	r2,-8(fp)
 181d8ac:	10800843 	ldbu	r2,33(r2)
 181d8b0:	10bfffc4 	addi	r2,r2,-1
 181d8b4:	1007883a 	mov	r3,r2
 181d8b8:	e0bffe17 	ldw	r2,-8(fp)
 181d8bc:	10c00845 	stb	r3,33(r2)
            break;
 181d8c0:	00000506 	br	181d8d8 <tcp_pcb_purge+0xd0>
    if (pcb->state == SYN_RCVD) {
      /* Need to find the corresponding listen_pcb and decrease its accepts_pending */
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 181d8c4:	e0bffe17 	ldw	r2,-8(fp)
 181d8c8:	10800317 	ldw	r2,12(r2)
 181d8cc:	e0bffe15 	stw	r2,-8(fp)
 181d8d0:	e0bffe17 	ldw	r2,-8(fp)
 181d8d4:	103fe31e 	bne	r2,zero,181d864 <__alt_mem_mem_0+0xff7fd864>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
 181d8d8:	e0bfff17 	ldw	r2,-4(fp)
 181d8dc:	10801f17 	ldw	r2,124(r2)
 181d8e0:	10000626 	beq	r2,zero,181d8fc <tcp_pcb_purge+0xf4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 181d8e4:	e0bfff17 	ldw	r2,-4(fp)
 181d8e8:	10801f17 	ldw	r2,124(r2)
 181d8ec:	1009883a 	mov	r4,r2
 181d8f0:	181a9040 	call	181a904 <pbuf_free>
      pcb->refused_data = NULL;
 181d8f4:	e0bfff17 	ldw	r2,-4(fp)
 181d8f8:	10001f15 	stw	zero,124(r2)
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 181d8fc:	e0bfff17 	ldw	r2,-4(fp)
 181d900:	10801e17 	ldw	r2,120(r2)
 181d904:	1009883a 	mov	r4,r2
 181d908:	181d1580 	call	181d158 <tcp_segs_free>
    pcb->ooseq = NULL;
 181d90c:	e0bfff17 	ldw	r2,-4(fp)
 181d910:	10001e15 	stw	zero,120(r2)
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 181d914:	e0bfff17 	ldw	r2,-4(fp)
 181d918:	00ffffc4 	movi	r3,-1
 181d91c:	10c00e0d 	sth	r3,56(r2)

    tcp_segs_free(pcb->unsent);
 181d920:	e0bfff17 	ldw	r2,-4(fp)
 181d924:	10801c17 	ldw	r2,112(r2)
 181d928:	1009883a 	mov	r4,r2
 181d92c:	181d1580 	call	181d158 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 181d930:	e0bfff17 	ldw	r2,-4(fp)
 181d934:	10801d17 	ldw	r2,116(r2)
 181d938:	1009883a 	mov	r4,r2
 181d93c:	181d1580 	call	181d158 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 181d940:	e0bfff17 	ldw	r2,-4(fp)
 181d944:	10001c15 	stw	zero,112(r2)
 181d948:	e0bfff17 	ldw	r2,-4(fp)
 181d94c:	10c01c17 	ldw	r3,112(r2)
 181d950:	e0bfff17 	ldw	r2,-4(fp)
 181d954:	10c01d15 	stw	r3,116(r2)
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 181d958:	e0bfff17 	ldw	r2,-4(fp)
 181d95c:	10001b8d 	sth	zero,110(r2)
#endif /* TCP_OVERSIZE */
  }
}
 181d960:	0001883a 	nop
 181d964:	e037883a 	mov	sp,fp
 181d968:	dfc00117 	ldw	ra,4(sp)
 181d96c:	df000017 	ldw	fp,0(sp)
 181d970:	dec00204 	addi	sp,sp,8
 181d974:	f800283a 	ret

0181d978 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 181d978:	defffc04 	addi	sp,sp,-16
 181d97c:	dfc00315 	stw	ra,12(sp)
 181d980:	df000215 	stw	fp,8(sp)
 181d984:	df000204 	addi	fp,sp,8
 181d988:	e13ffe15 	stw	r4,-8(fp)
 181d98c:	e17fff15 	stw	r5,-4(fp)
  TCP_RMV(pcblist, pcb);
 181d990:	e0bffe17 	ldw	r2,-8(fp)
 181d994:	10c00017 	ldw	r3,0(r2)
 181d998:	e0bfff17 	ldw	r2,-4(fp)
 181d99c:	1880061e 	bne	r3,r2,181d9b8 <tcp_pcb_remove+0x40>
 181d9a0:	e0bffe17 	ldw	r2,-8(fp)
 181d9a4:	10800017 	ldw	r2,0(r2)
 181d9a8:	10c00317 	ldw	r3,12(r2)
 181d9ac:	e0bffe17 	ldw	r2,-8(fp)
 181d9b0:	10c00015 	stw	r3,0(r2)
 181d9b4:	00001206 	br	181da00 <tcp_pcb_remove+0x88>
 181d9b8:	e0bffe17 	ldw	r2,-8(fp)
 181d9bc:	10800017 	ldw	r2,0(r2)
 181d9c0:	d0a7fa15 	stw	r2,-24600(gp)
 181d9c4:	00000c06 	br	181d9f8 <tcp_pcb_remove+0x80>
 181d9c8:	d0a7fa17 	ldw	r2,-24600(gp)
 181d9cc:	10c00317 	ldw	r3,12(r2)
 181d9d0:	e0bfff17 	ldw	r2,-4(fp)
 181d9d4:	1880051e 	bne	r3,r2,181d9ec <tcp_pcb_remove+0x74>
 181d9d8:	d0a7fa17 	ldw	r2,-24600(gp)
 181d9dc:	e0ffff17 	ldw	r3,-4(fp)
 181d9e0:	18c00317 	ldw	r3,12(r3)
 181d9e4:	10c00315 	stw	r3,12(r2)
 181d9e8:	00000506 	br	181da00 <tcp_pcb_remove+0x88>
 181d9ec:	d0a7fa17 	ldw	r2,-24600(gp)
 181d9f0:	10800317 	ldw	r2,12(r2)
 181d9f4:	d0a7fa15 	stw	r2,-24600(gp)
 181d9f8:	d0a7fa17 	ldw	r2,-24600(gp)
 181d9fc:	103ff21e 	bne	r2,zero,181d9c8 <__alt_mem_mem_0+0xff7fd9c8>
 181da00:	e0bfff17 	ldw	r2,-4(fp)
 181da04:	10000315 	stw	zero,12(r2)

  tcp_pcb_purge(pcb);
 181da08:	e13fff17 	ldw	r4,-4(fp)
 181da0c:	181d8080 	call	181d808 <tcp_pcb_purge>
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 181da10:	e0bfff17 	ldw	r2,-4(fp)
 181da14:	10800617 	ldw	r2,24(r2)
 181da18:	108002a0 	cmpeqi	r2,r2,10
 181da1c:	1000111e 	bne	r2,zero,181da64 <tcp_pcb_remove+0xec>
     pcb->state != LISTEN &&
 181da20:	e0bfff17 	ldw	r2,-4(fp)
 181da24:	10800617 	ldw	r2,24(r2)
  TCP_RMV(pcblist, pcb);

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 181da28:	10800060 	cmpeqi	r2,r2,1
 181da2c:	10000d1e 	bne	r2,zero,181da64 <tcp_pcb_remove+0xec>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 181da30:	e0bfff17 	ldw	r2,-4(fp)
 181da34:	10800883 	ldbu	r2,34(r2)
 181da38:	10803fcc 	andi	r2,r2,255
 181da3c:	1080004c 	andi	r2,r2,1

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
 181da40:	10000826 	beq	r2,zero,181da64 <tcp_pcb_remove+0xec>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
 181da44:	e0bfff17 	ldw	r2,-4(fp)
 181da48:	10800883 	ldbu	r2,34(r2)
 181da4c:	10800094 	ori	r2,r2,2
 181da50:	1007883a 	mov	r3,r2
 181da54:	e0bfff17 	ldw	r2,-4(fp)
 181da58:	10c00885 	stb	r3,34(r2)
    tcp_output(pcb);
 181da5c:	e13fff17 	ldw	r4,-4(fp)
 181da60:	181f4fc0 	call	181f4fc <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 181da64:	e0bfff17 	ldw	r2,-4(fp)
 181da68:	10000615 	stw	zero,24(r2)

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 181da6c:	0001883a 	nop
 181da70:	e037883a 	mov	sp,fp
 181da74:	dfc00117 	ldw	ra,4(sp)
 181da78:	df000017 	ldw	fp,0(sp)
 181da7c:	dec00204 	addi	sp,sp,8
 181da80:	f800283a 	ret

0181da84 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
 181da84:	deffff04 	addi	sp,sp,-4
 181da88:	df000015 	stw	fp,0(sp)
 181da8c:	d839883a 	mov	fp,sp
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
 181da90:	d0e01217 	ldw	r3,-32696(gp)
 181da94:	d0a7f817 	ldw	r2,-24608(gp)
 181da98:	1885883a 	add	r2,r3,r2
 181da9c:	d0a01215 	stw	r2,-32696(gp)
  return iss;
 181daa0:	d0a01217 	ldw	r2,-32696(gp)
}
 181daa4:	e037883a 	mov	sp,fp
 181daa8:	df000017 	ldw	fp,0(sp)
 181daac:	dec00104 	addi	sp,sp,4
 181dab0:	f800283a 	ret

0181dab4 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *src, ip_addr_t *addr)
{
 181dab4:	defff904 	addi	sp,sp,-28
 181dab8:	dfc00615 	stw	ra,24(sp)
 181dabc:	df000515 	stw	fp,20(sp)
 181dac0:	df000504 	addi	fp,sp,20
 181dac4:	2005883a 	mov	r2,r4
 181dac8:	e17ffe15 	stw	r5,-8(fp)
 181dacc:	e1bfff15 	stw	r6,-4(fp)
 181dad0:	e0bffd0d 	sth	r2,-12(fp)
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(src, addr);
 181dad4:	e17fff17 	ldw	r5,-4(fp)
 181dad8:	e13ffe17 	ldw	r4,-8(fp)
 181dadc:	18319100 	call	1831910 <ip_route>
 181dae0:	e0bffb15 	stw	r2,-20(fp)
  if ((outif != NULL) && (outif->mtu != 0)) {
 181dae4:	e0bffb17 	ldw	r2,-20(fp)
 181dae8:	10000f26 	beq	r2,zero,181db28 <tcp_eff_send_mss+0x74>
 181daec:	e0bffb17 	ldw	r2,-20(fp)
 181daf0:	10800c0b 	ldhu	r2,48(r2)
 181daf4:	10bfffcc 	andi	r2,r2,65535
 181daf8:	10000b26 	beq	r2,zero,181db28 <tcp_eff_send_mss+0x74>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
 181dafc:	e0bffb17 	ldw	r2,-20(fp)
 181db00:	10800c0b 	ldhu	r2,48(r2)
 181db04:	10bff604 	addi	r2,r2,-40
 181db08:	e0bffc0d 	sth	r2,-16(fp)
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 181db0c:	e17ffd0b 	ldhu	r5,-12(fp)
 181db10:	e0bffc0b 	ldhu	r2,-16(fp)
 181db14:	10ffffcc 	andi	r3,r2,65535
 181db18:	293fffcc 	andi	r4,r5,65535
 181db1c:	20c0012e 	bgeu	r4,r3,181db24 <tcp_eff_send_mss+0x70>
 181db20:	2805883a 	mov	r2,r5
 181db24:	e0bffd0d 	sth	r2,-12(fp)
  }
  return sendmss;
 181db28:	e0bffd0b 	ldhu	r2,-12(fp)
}
 181db2c:	e037883a 	mov	sp,fp
 181db30:	dfc00117 	ldw	ra,4(sp)
 181db34:	df000017 	ldw	fp,0(sp)
 181db38:	dec00204 	addi	sp,sp,8
 181db3c:	f800283a 	ret

0181db40 <tcp_debug_state_str>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

const char*
tcp_debug_state_str(enum tcp_state s)
{
 181db40:	defffe04 	addi	sp,sp,-8
 181db44:	df000115 	stw	fp,4(sp)
 181db48:	df000104 	addi	fp,sp,4
 181db4c:	e13fff15 	stw	r4,-4(fp)
  return tcp_state_str[s];
 181db50:	00806134 	movhi	r2,388
 181db54:	10846c04 	addi	r2,r2,4528
 181db58:	e0ffff17 	ldw	r3,-4(fp)
 181db5c:	18c7883a 	add	r3,r3,r3
 181db60:	18c7883a 	add	r3,r3,r3
 181db64:	10c5883a 	add	r2,r2,r3
 181db68:	10800017 	ldw	r2,0(r2)
}
 181db6c:	e037883a 	mov	sp,fp
 181db70:	df000017 	ldw	fp,0(sp)
 181db74:	dec00104 	addi	sp,sp,4
 181db78:	f800283a 	ret

0181db7c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 181db7c:	defff804 	addi	sp,sp,-32
 181db80:	dfc00715 	stw	ra,28(sp)
 181db84:	df000615 	stw	fp,24(sp)
 181db88:	df000604 	addi	fp,sp,24
 181db8c:	e13ffc15 	stw	r4,-16(fp)
 181db90:	2807883a 	mov	r3,r5
 181db94:	3005883a 	mov	r2,r6
 181db98:	e1ffff15 	stw	r7,-4(fp)
 181db9c:	e0fffd0d 	sth	r3,-12(fp)
 181dba0:	e0bffe0d 	sth	r2,-8(fp)
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 181dba4:	e0fffd0b 	ldhu	r3,-12(fp)
 181dba8:	e0bffe0b 	ldhu	r2,-8(fp)
 181dbac:	1885883a 	add	r2,r3,r2
 181dbb0:	10800504 	addi	r2,r2,20
 181dbb4:	10bfffcc 	andi	r2,r2,65535
 181dbb8:	000d883a 	mov	r6,zero
 181dbbc:	100b883a 	mov	r5,r2
 181dbc0:	01000044 	movi	r4,1
 181dbc4:	181a1480 	call	181a148 <pbuf_alloc>
 181dbc8:	e0bffa15 	stw	r2,-24(fp)
  if (p != NULL) {
 181dbcc:	e0bffa17 	ldw	r2,-24(fp)
 181dbd0:	1000de26 	beq	r2,zero,181df4c <tcp_output_alloc_header+0x3d0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 181dbd4:	e0bffa17 	ldw	r2,-24(fp)
 181dbd8:	10800117 	ldw	r2,4(r2)
 181dbdc:	e0bffb15 	stw	r2,-20(fp)
    tcphdr->src = htons(pcb->local_port);
 181dbe0:	e0bffc17 	ldw	r2,-16(fp)
 181dbe4:	1080078b 	ldhu	r2,30(r2)
 181dbe8:	10bfffcc 	andi	r2,r2,65535
 181dbec:	1004d23a 	srli	r2,r2,8
 181dbf0:	1007883a 	mov	r3,r2
 181dbf4:	e0bffc17 	ldw	r2,-16(fp)
 181dbf8:	1080078b 	ldhu	r2,30(r2)
 181dbfc:	10bfffcc 	andi	r2,r2,65535
 181dc00:	1004923a 	slli	r2,r2,8
 181dc04:	1884b03a 	or	r2,r3,r2
 181dc08:	100d883a 	mov	r6,r2
 181dc0c:	e0bffb17 	ldw	r2,-20(fp)
 181dc10:	30ffffcc 	andi	r3,r6,65535
 181dc14:	19403fcc 	andi	r5,r3,255
 181dc18:	10c00003 	ldbu	r3,0(r2)
 181dc1c:	1806703a 	and	r3,r3,zero
 181dc20:	1809883a 	mov	r4,r3
 181dc24:	2807883a 	mov	r3,r5
 181dc28:	20c6b03a 	or	r3,r4,r3
 181dc2c:	10c00005 	stb	r3,0(r2)
 181dc30:	30ffffcc 	andi	r3,r6,65535
 181dc34:	1806d23a 	srli	r3,r3,8
 181dc38:	197fffcc 	andi	r5,r3,65535
 181dc3c:	10c00043 	ldbu	r3,1(r2)
 181dc40:	1806703a 	and	r3,r3,zero
 181dc44:	1809883a 	mov	r4,r3
 181dc48:	2807883a 	mov	r3,r5
 181dc4c:	20c6b03a 	or	r3,r4,r3
 181dc50:	10c00045 	stb	r3,1(r2)
    tcphdr->dest = htons(pcb->remote_port);
 181dc54:	e0bffc17 	ldw	r2,-16(fp)
 181dc58:	1080080b 	ldhu	r2,32(r2)
 181dc5c:	10bfffcc 	andi	r2,r2,65535
 181dc60:	1004d23a 	srli	r2,r2,8
 181dc64:	1007883a 	mov	r3,r2
 181dc68:	e0bffc17 	ldw	r2,-16(fp)
 181dc6c:	1080080b 	ldhu	r2,32(r2)
 181dc70:	10bfffcc 	andi	r2,r2,65535
 181dc74:	1004923a 	slli	r2,r2,8
 181dc78:	1884b03a 	or	r2,r3,r2
 181dc7c:	100d883a 	mov	r6,r2
 181dc80:	e0bffb17 	ldw	r2,-20(fp)
 181dc84:	30ffffcc 	andi	r3,r6,65535
 181dc88:	19403fcc 	andi	r5,r3,255
 181dc8c:	10c00083 	ldbu	r3,2(r2)
 181dc90:	1806703a 	and	r3,r3,zero
 181dc94:	1809883a 	mov	r4,r3
 181dc98:	2807883a 	mov	r3,r5
 181dc9c:	20c6b03a 	or	r3,r4,r3
 181dca0:	10c00085 	stb	r3,2(r2)
 181dca4:	30ffffcc 	andi	r3,r6,65535
 181dca8:	1806d23a 	srli	r3,r3,8
 181dcac:	197fffcc 	andi	r5,r3,65535
 181dcb0:	10c000c3 	ldbu	r3,3(r2)
 181dcb4:	1806703a 	and	r3,r3,zero
 181dcb8:	1809883a 	mov	r4,r3
 181dcbc:	2807883a 	mov	r3,r5
 181dcc0:	20c6b03a 	or	r3,r4,r3
 181dcc4:	10c000c5 	stb	r3,3(r2)
    tcphdr->seqno = seqno_be;
 181dcc8:	e0bffb17 	ldw	r2,-20(fp)
 181dccc:	e0ffff17 	ldw	r3,-4(fp)
 181dcd0:	19403fcc 	andi	r5,r3,255
 181dcd4:	10c00103 	ldbu	r3,4(r2)
 181dcd8:	1806703a 	and	r3,r3,zero
 181dcdc:	1809883a 	mov	r4,r3
 181dce0:	2807883a 	mov	r3,r5
 181dce4:	20c6b03a 	or	r3,r4,r3
 181dce8:	10c00105 	stb	r3,4(r2)
 181dcec:	e0ffff17 	ldw	r3,-4(fp)
 181dcf0:	1806d23a 	srli	r3,r3,8
 181dcf4:	19403fcc 	andi	r5,r3,255
 181dcf8:	10c00143 	ldbu	r3,5(r2)
 181dcfc:	1806703a 	and	r3,r3,zero
 181dd00:	1809883a 	mov	r4,r3
 181dd04:	2807883a 	mov	r3,r5
 181dd08:	20c6b03a 	or	r3,r4,r3
 181dd0c:	10c00145 	stb	r3,5(r2)
 181dd10:	e0ffff17 	ldw	r3,-4(fp)
 181dd14:	1806d43a 	srli	r3,r3,16
 181dd18:	19403fcc 	andi	r5,r3,255
 181dd1c:	10c00183 	ldbu	r3,6(r2)
 181dd20:	1806703a 	and	r3,r3,zero
 181dd24:	1809883a 	mov	r4,r3
 181dd28:	2807883a 	mov	r3,r5
 181dd2c:	20c6b03a 	or	r3,r4,r3
 181dd30:	10c00185 	stb	r3,6(r2)
 181dd34:	e0ffff17 	ldw	r3,-4(fp)
 181dd38:	180ad63a 	srli	r5,r3,24
 181dd3c:	10c001c3 	ldbu	r3,7(r2)
 181dd40:	1806703a 	and	r3,r3,zero
 181dd44:	1809883a 	mov	r4,r3
 181dd48:	2807883a 	mov	r3,r5
 181dd4c:	20c6b03a 	or	r3,r4,r3
 181dd50:	10c001c5 	stb	r3,7(r2)
    tcphdr->ackno = htonl(pcb->rcv_nxt);
 181dd54:	e0bffc17 	ldw	r2,-16(fp)
 181dd58:	10800b17 	ldw	r2,44(r2)
 181dd5c:	1006d63a 	srli	r3,r2,24
 181dd60:	e0bffc17 	ldw	r2,-16(fp)
 181dd64:	10800b17 	ldw	r2,44(r2)
 181dd68:	1004d23a 	srli	r2,r2,8
 181dd6c:	10bfc00c 	andi	r2,r2,65280
 181dd70:	1886b03a 	or	r3,r3,r2
 181dd74:	e0bffc17 	ldw	r2,-16(fp)
 181dd78:	10800b17 	ldw	r2,44(r2)
 181dd7c:	10bfc00c 	andi	r2,r2,65280
 181dd80:	1004923a 	slli	r2,r2,8
 181dd84:	1886b03a 	or	r3,r3,r2
 181dd88:	e0bffc17 	ldw	r2,-16(fp)
 181dd8c:	10800b17 	ldw	r2,44(r2)
 181dd90:	1004963a 	slli	r2,r2,24
 181dd94:	1886b03a 	or	r3,r3,r2
 181dd98:	e0bffb17 	ldw	r2,-20(fp)
 181dd9c:	19803fcc 	andi	r6,r3,255
 181dda0:	11000203 	ldbu	r4,8(r2)
 181dda4:	2008703a 	and	r4,r4,zero
 181dda8:	200b883a 	mov	r5,r4
 181ddac:	3009883a 	mov	r4,r6
 181ddb0:	2908b03a 	or	r4,r5,r4
 181ddb4:	11000205 	stb	r4,8(r2)
 181ddb8:	1808d23a 	srli	r4,r3,8
 181ddbc:	21803fcc 	andi	r6,r4,255
 181ddc0:	11000243 	ldbu	r4,9(r2)
 181ddc4:	2008703a 	and	r4,r4,zero
 181ddc8:	200b883a 	mov	r5,r4
 181ddcc:	3009883a 	mov	r4,r6
 181ddd0:	2908b03a 	or	r4,r5,r4
 181ddd4:	11000245 	stb	r4,9(r2)
 181ddd8:	1808d43a 	srli	r4,r3,16
 181dddc:	21803fcc 	andi	r6,r4,255
 181dde0:	11000283 	ldbu	r4,10(r2)
 181dde4:	2008703a 	and	r4,r4,zero
 181dde8:	200b883a 	mov	r5,r4
 181ddec:	3009883a 	mov	r4,r6
 181ddf0:	2908b03a 	or	r4,r5,r4
 181ddf4:	11000285 	stb	r4,10(r2)
 181ddf8:	180ad63a 	srli	r5,r3,24
 181ddfc:	10c002c3 	ldbu	r3,11(r2)
 181de00:	1806703a 	and	r3,r3,zero
 181de04:	1809883a 	mov	r4,r3
 181de08:	2807883a 	mov	r3,r5
 181de0c:	20c6b03a 	or	r3,r4,r3
 181de10:	10c002c5 	stb	r3,11(r2)
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 181de14:	e0bffd0b 	ldhu	r2,-12(fp)
 181de18:	1004d0ba 	srli	r2,r2,2
 181de1c:	10bfffcc 	andi	r2,r2,65535
 181de20:	10800144 	addi	r2,r2,5
 181de24:	1004933a 	slli	r2,r2,12
 181de28:	10bfffcc 	andi	r2,r2,65535
 181de2c:	1004d23a 	srli	r2,r2,8
 181de30:	10840014 	ori	r2,r2,4096
 181de34:	100d883a 	mov	r6,r2
 181de38:	e0bffb17 	ldw	r2,-20(fp)
 181de3c:	30ffffcc 	andi	r3,r6,65535
 181de40:	19403fcc 	andi	r5,r3,255
 181de44:	10c00303 	ldbu	r3,12(r2)
 181de48:	1806703a 	and	r3,r3,zero
 181de4c:	1809883a 	mov	r4,r3
 181de50:	2807883a 	mov	r3,r5
 181de54:	20c6b03a 	or	r3,r4,r3
 181de58:	10c00305 	stb	r3,12(r2)
 181de5c:	30ffffcc 	andi	r3,r6,65535
 181de60:	1806d23a 	srli	r3,r3,8
 181de64:	197fffcc 	andi	r5,r3,65535
 181de68:	10c00343 	ldbu	r3,13(r2)
 181de6c:	1806703a 	and	r3,r3,zero
 181de70:	1809883a 	mov	r4,r3
 181de74:	2807883a 	mov	r3,r5
 181de78:	20c6b03a 	or	r3,r4,r3
 181de7c:	10c00345 	stb	r3,13(r2)
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 181de80:	e0bffc17 	ldw	r2,-16(fp)
 181de84:	10800c8b 	ldhu	r2,50(r2)
 181de88:	10bfffcc 	andi	r2,r2,65535
 181de8c:	1004d23a 	srli	r2,r2,8
 181de90:	1007883a 	mov	r3,r2
 181de94:	e0bffc17 	ldw	r2,-16(fp)
 181de98:	10800c8b 	ldhu	r2,50(r2)
 181de9c:	10bfffcc 	andi	r2,r2,65535
 181dea0:	1004923a 	slli	r2,r2,8
 181dea4:	1884b03a 	or	r2,r3,r2
 181dea8:	100d883a 	mov	r6,r2
 181deac:	e0bffb17 	ldw	r2,-20(fp)
 181deb0:	30ffffcc 	andi	r3,r6,65535
 181deb4:	19403fcc 	andi	r5,r3,255
 181deb8:	10c00383 	ldbu	r3,14(r2)
 181debc:	1806703a 	and	r3,r3,zero
 181dec0:	1809883a 	mov	r4,r3
 181dec4:	2807883a 	mov	r3,r5
 181dec8:	20c6b03a 	or	r3,r4,r3
 181decc:	10c00385 	stb	r3,14(r2)
 181ded0:	30ffffcc 	andi	r3,r6,65535
 181ded4:	1806d23a 	srli	r3,r3,8
 181ded8:	197fffcc 	andi	r5,r3,65535
 181dedc:	10c003c3 	ldbu	r3,15(r2)
 181dee0:	1806703a 	and	r3,r3,zero
 181dee4:	1809883a 	mov	r4,r3
 181dee8:	2807883a 	mov	r3,r5
 181deec:	20c6b03a 	or	r3,r4,r3
 181def0:	10c003c5 	stb	r3,15(r2)
    tcphdr->chksum = 0;
 181def4:	e0bffb17 	ldw	r2,-20(fp)
 181def8:	10c00403 	ldbu	r3,16(r2)
 181defc:	1806703a 	and	r3,r3,zero
 181df00:	10c00405 	stb	r3,16(r2)
 181df04:	10c00443 	ldbu	r3,17(r2)
 181df08:	1806703a 	and	r3,r3,zero
 181df0c:	10c00445 	stb	r3,17(r2)
    tcphdr->urgp = 0;
 181df10:	e0bffb17 	ldw	r2,-20(fp)
 181df14:	10c00483 	ldbu	r3,18(r2)
 181df18:	1806703a 	and	r3,r3,zero
 181df1c:	10c00485 	stb	r3,18(r2)
 181df20:	10c004c3 	ldbu	r3,19(r2)
 181df24:	1806703a 	and	r3,r3,zero
 181df28:	10c004c5 	stb	r3,19(r2)

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 181df2c:	e0bffc17 	ldw	r2,-16(fp)
 181df30:	10c00b17 	ldw	r3,44(r2)
 181df34:	e0bffc17 	ldw	r2,-16(fp)
 181df38:	10800c8b 	ldhu	r2,50(r2)
 181df3c:	10bfffcc 	andi	r2,r2,65535
 181df40:	1887883a 	add	r3,r3,r2
 181df44:	e0bffc17 	ldw	r2,-16(fp)
 181df48:	10c00d15 	stw	r3,52(r2)
  }
  return p;
 181df4c:	e0bffa17 	ldw	r2,-24(fp)
}
 181df50:	e037883a 	mov	sp,fp
 181df54:	dfc00117 	ldw	ra,4(sp)
 181df58:	df000017 	ldw	fp,0(sp)
 181df5c:	dec00204 	addi	sp,sp,8
 181df60:	f800283a 	ret

0181df64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 181df64:	defffc04 	addi	sp,sp,-16
 181df68:	dfc00315 	stw	ra,12(sp)
 181df6c:	df000215 	stw	fp,8(sp)
 181df70:	df000204 	addi	fp,sp,8
 181df74:	e13fff15 	stw	r4,-4(fp)
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 181df78:	e0bfff17 	ldw	r2,-4(fp)
 181df7c:	10801c17 	ldw	r2,112(r2)
 181df80:	10004226 	beq	r2,zero,181e08c <tcp_send_fin+0x128>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 181df84:	e0bfff17 	ldw	r2,-4(fp)
 181df88:	10801c17 	ldw	r2,112(r2)
 181df8c:	e0bffe15 	stw	r2,-8(fp)
 181df90:	00000306 	br	181dfa0 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 181df94:	e0bffe17 	ldw	r2,-8(fp)
 181df98:	10800017 	ldw	r2,0(r2)
 181df9c:	e0bffe15 	stw	r2,-8(fp)
tcp_send_fin(struct tcp_pcb *pcb)
{
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 181dfa0:	e0bffe17 	ldw	r2,-8(fp)
 181dfa4:	10800017 	ldw	r2,0(r2)
 181dfa8:	103ffa1e 	bne	r2,zero,181df94 <__alt_mem_mem_0+0xff7fdf94>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 181dfac:	e0bffe17 	ldw	r2,-8(fp)
 181dfb0:	10800417 	ldw	r2,16(r2)
 181dfb4:	10c00303 	ldbu	r3,12(r2)
 181dfb8:	10800343 	ldbu	r2,13(r2)
 181dfbc:	1004923a 	slli	r2,r2,8
 181dfc0:	10c4b03a 	or	r2,r2,r3
 181dfc4:	10bfffcc 	andi	r2,r2,65535
 181dfc8:	1004d23a 	srli	r2,r2,8
 181dfcc:	10ffffcc 	andi	r3,r2,65535
 181dfd0:	e0bffe17 	ldw	r2,-8(fp)
 181dfd4:	10800417 	ldw	r2,16(r2)
 181dfd8:	11000303 	ldbu	r4,12(r2)
 181dfdc:	10800343 	ldbu	r2,13(r2)
 181dfe0:	1004923a 	slli	r2,r2,8
 181dfe4:	1104b03a 	or	r2,r2,r4
 181dfe8:	10bfffcc 	andi	r2,r2,65535
 181dfec:	1004923a 	slli	r2,r2,8
 181dff0:	10bfffcc 	andi	r2,r2,65535
 181dff4:	1884b03a 	or	r2,r3,r2
 181dff8:	108001cc 	andi	r2,r2,7
 181dffc:	1000231e 	bne	r2,zero,181e08c <tcp_send_fin+0x128>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 181e000:	e0bffe17 	ldw	r2,-8(fp)
 181e004:	10800417 	ldw	r2,16(r2)
 181e008:	e0fffe17 	ldw	r3,-8(fp)
 181e00c:	18c00417 	ldw	r3,16(r3)
 181e010:	19000303 	ldbu	r4,12(r3)
 181e014:	18c00343 	ldbu	r3,13(r3)
 181e018:	1806923a 	slli	r3,r3,8
 181e01c:	1906b03a 	or	r3,r3,r4
 181e020:	18c04014 	ori	r3,r3,256
 181e024:	180d883a 	mov	r6,r3
 181e028:	30ffffcc 	andi	r3,r6,65535
 181e02c:	19403fcc 	andi	r5,r3,255
 181e030:	10c00303 	ldbu	r3,12(r2)
 181e034:	1806703a 	and	r3,r3,zero
 181e038:	1809883a 	mov	r4,r3
 181e03c:	2807883a 	mov	r3,r5
 181e040:	20c6b03a 	or	r3,r4,r3
 181e044:	10c00305 	stb	r3,12(r2)
 181e048:	30ffffcc 	andi	r3,r6,65535
 181e04c:	1806d23a 	srli	r3,r3,8
 181e050:	197fffcc 	andi	r5,r3,65535
 181e054:	10c00343 	ldbu	r3,13(r2)
 181e058:	1806703a 	and	r3,r3,zero
 181e05c:	1809883a 	mov	r4,r3
 181e060:	2807883a 	mov	r3,r5
 181e064:	20c6b03a 	or	r3,r4,r3
 181e068:	10c00345 	stb	r3,13(r2)
      pcb->flags |= TF_FIN;
 181e06c:	e0bfff17 	ldw	r2,-4(fp)
 181e070:	10800883 	ldbu	r2,34(r2)
 181e074:	10800814 	ori	r2,r2,32
 181e078:	1007883a 	mov	r3,r2
 181e07c:	e0bfff17 	ldw	r2,-4(fp)
 181e080:	10c00885 	stb	r3,34(r2)
      return ERR_OK;
 181e084:	0005883a 	mov	r2,zero
 181e088:	00000306 	br	181e098 <tcp_send_fin+0x134>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 181e08c:	01400044 	movi	r5,1
 181e090:	e13fff17 	ldw	r4,-4(fp)
 181e094:	181f0780 	call	181f078 <tcp_enqueue_flags>
}
 181e098:	e037883a 	mov	sp,fp
 181e09c:	dfc00117 	ldw	ra,4(sp)
 181e0a0:	df000017 	ldw	fp,0(sp)
 181e0a4:	dec00204 	addi	sp,sp,8
 181e0a8:	f800283a 	ret

0181e0ac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 181e0ac:	defff704 	addi	sp,sp,-36
 181e0b0:	dfc00815 	stw	ra,32(sp)
 181e0b4:	df000715 	stw	fp,28(sp)
 181e0b8:	df000704 	addi	fp,sp,28
 181e0bc:	e13ffb15 	stw	r4,-20(fp)
 181e0c0:	e17ffc15 	stw	r5,-16(fp)
 181e0c4:	3007883a 	mov	r3,r6
 181e0c8:	e1fffe15 	stw	r7,-8(fp)
 181e0cc:	e0800217 	ldw	r2,8(fp)
 181e0d0:	e0fffd05 	stb	r3,-12(fp)
 181e0d4:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 181e0d8:	e0bfff03 	ldbu	r2,-4(fp)
 181e0dc:	1080004c 	andi	r2,r2,1
 181e0e0:	10000226 	beq	r2,zero,181e0ec <tcp_create_segment+0x40>
 181e0e4:	00c00104 	movi	r3,4
 181e0e8:	00000106 	br	181e0f0 <tcp_create_segment+0x44>
 181e0ec:	0007883a 	mov	r3,zero
 181e0f0:	e0bfff03 	ldbu	r2,-4(fp)
 181e0f4:	1080008c 	andi	r2,r2,2
 181e0f8:	10000226 	beq	r2,zero,181e104 <tcp_create_segment+0x58>
 181e0fc:	00800304 	movi	r2,12
 181e100:	00000106 	br	181e108 <tcp_create_segment+0x5c>
 181e104:	0005883a 	mov	r2,zero
 181e108:	1885883a 	add	r2,r3,r2
 181e10c:	e0bff905 	stb	r2,-28(fp)

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 181e110:	01000104 	movi	r4,4
 181e114:	18340280 	call	1834028 <memp_malloc>
 181e118:	e0bffa15 	stw	r2,-24(fp)
 181e11c:	e0bffa17 	ldw	r2,-24(fp)
 181e120:	1000041e 	bne	r2,zero,181e134 <tcp_create_segment+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 181e124:	e13ffc17 	ldw	r4,-16(fp)
 181e128:	181a9040 	call	181a904 <pbuf_free>
    return NULL;
 181e12c:	0005883a 	mov	r2,zero
 181e130:	0000c106 	br	181e438 <tcp_create_segment+0x38c>
  }
  seg->flags = optflags;
 181e134:	e0bffa17 	ldw	r2,-24(fp)
 181e138:	e0ffff03 	ldbu	r3,-4(fp)
 181e13c:	10c00345 	stb	r3,13(r2)
  seg->next = NULL;
 181e140:	e0bffa17 	ldw	r2,-24(fp)
 181e144:	10000015 	stw	zero,0(r2)
  seg->p = p;
 181e148:	e0bffa17 	ldw	r2,-24(fp)
 181e14c:	e0fffc17 	ldw	r3,-16(fp)
 181e150:	10c00115 	stw	r3,4(r2)
  seg->len = p->tot_len - optlen;
 181e154:	e0bffc17 	ldw	r2,-16(fp)
 181e158:	10c0020b 	ldhu	r3,8(r2)
 181e15c:	e0bff903 	ldbu	r2,-28(fp)
 181e160:	1885c83a 	sub	r2,r3,r2
 181e164:	1007883a 	mov	r3,r2
 181e168:	e0bffa17 	ldw	r2,-24(fp)
 181e16c:	10c0020d 	sth	r3,8(r2)
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
#if TCP_CHECKSUM_ON_COPY
  seg->chksum = 0;
 181e170:	e0bffa17 	ldw	r2,-24(fp)
 181e174:	1000028d 	sth	zero,10(r2)
  seg->chksum_swapped = 0;
 181e178:	e0bffa17 	ldw	r2,-24(fp)
 181e17c:	10000305 	stb	zero,12(r2)
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 181e180:	01400504 	movi	r5,20
 181e184:	e13ffc17 	ldw	r4,-16(fp)
 181e188:	181a7540 	call	181a754 <pbuf_header>
 181e18c:	10803fcc 	andi	r2,r2,255
 181e190:	10000b26 	beq	r2,zero,181e1c0 <tcp_create_segment+0x114>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 181e194:	008061f4 	movhi	r2,391
 181e198:	10a77104 	addi	r2,r2,-25148
 181e19c:	10805217 	ldw	r2,328(r2)
 181e1a0:	10c00044 	addi	r3,r2,1
 181e1a4:	008061f4 	movhi	r2,391
 181e1a8:	10a77104 	addi	r2,r2,-25148
 181e1ac:	10c05215 	stw	r3,328(r2)
    tcp_seg_free(seg);
 181e1b0:	e13ffa17 	ldw	r4,-24(fp)
 181e1b4:	181d1ac0 	call	181d1ac <tcp_seg_free>
    return NULL;
 181e1b8:	0005883a 	mov	r2,zero
 181e1bc:	00009e06 	br	181e438 <tcp_create_segment+0x38c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 181e1c0:	e0bffa17 	ldw	r2,-24(fp)
 181e1c4:	10800117 	ldw	r2,4(r2)
 181e1c8:	10c00117 	ldw	r3,4(r2)
 181e1cc:	e0bffa17 	ldw	r2,-24(fp)
 181e1d0:	10c00415 	stw	r3,16(r2)
  seg->tcphdr->src = htons(pcb->local_port);
 181e1d4:	e0bffa17 	ldw	r2,-24(fp)
 181e1d8:	10800417 	ldw	r2,16(r2)
 181e1dc:	e0fffb17 	ldw	r3,-20(fp)
 181e1e0:	18c0078b 	ldhu	r3,30(r3)
 181e1e4:	18ffffcc 	andi	r3,r3,65535
 181e1e8:	1806d23a 	srli	r3,r3,8
 181e1ec:	1809883a 	mov	r4,r3
 181e1f0:	e0fffb17 	ldw	r3,-20(fp)
 181e1f4:	18c0078b 	ldhu	r3,30(r3)
 181e1f8:	18ffffcc 	andi	r3,r3,65535
 181e1fc:	1806923a 	slli	r3,r3,8
 181e200:	20c6b03a 	or	r3,r4,r3
 181e204:	180d883a 	mov	r6,r3
 181e208:	30ffffcc 	andi	r3,r6,65535
 181e20c:	19403fcc 	andi	r5,r3,255
 181e210:	10c00003 	ldbu	r3,0(r2)
 181e214:	1806703a 	and	r3,r3,zero
 181e218:	1809883a 	mov	r4,r3
 181e21c:	2807883a 	mov	r3,r5
 181e220:	20c6b03a 	or	r3,r4,r3
 181e224:	10c00005 	stb	r3,0(r2)
 181e228:	30ffffcc 	andi	r3,r6,65535
 181e22c:	1806d23a 	srli	r3,r3,8
 181e230:	197fffcc 	andi	r5,r3,65535
 181e234:	10c00043 	ldbu	r3,1(r2)
 181e238:	1806703a 	and	r3,r3,zero
 181e23c:	1809883a 	mov	r4,r3
 181e240:	2807883a 	mov	r3,r5
 181e244:	20c6b03a 	or	r3,r4,r3
 181e248:	10c00045 	stb	r3,1(r2)
  seg->tcphdr->dest = htons(pcb->remote_port);
 181e24c:	e0bffa17 	ldw	r2,-24(fp)
 181e250:	10800417 	ldw	r2,16(r2)
 181e254:	e0fffb17 	ldw	r3,-20(fp)
 181e258:	18c0080b 	ldhu	r3,32(r3)
 181e25c:	18ffffcc 	andi	r3,r3,65535
 181e260:	1806d23a 	srli	r3,r3,8
 181e264:	1809883a 	mov	r4,r3
 181e268:	e0fffb17 	ldw	r3,-20(fp)
 181e26c:	18c0080b 	ldhu	r3,32(r3)
 181e270:	18ffffcc 	andi	r3,r3,65535
 181e274:	1806923a 	slli	r3,r3,8
 181e278:	20c6b03a 	or	r3,r4,r3
 181e27c:	180d883a 	mov	r6,r3
 181e280:	30ffffcc 	andi	r3,r6,65535
 181e284:	19403fcc 	andi	r5,r3,255
 181e288:	10c00083 	ldbu	r3,2(r2)
 181e28c:	1806703a 	and	r3,r3,zero
 181e290:	1809883a 	mov	r4,r3
 181e294:	2807883a 	mov	r3,r5
 181e298:	20c6b03a 	or	r3,r4,r3
 181e29c:	10c00085 	stb	r3,2(r2)
 181e2a0:	30ffffcc 	andi	r3,r6,65535
 181e2a4:	1806d23a 	srli	r3,r3,8
 181e2a8:	197fffcc 	andi	r5,r3,65535
 181e2ac:	10c000c3 	ldbu	r3,3(r2)
 181e2b0:	1806703a 	and	r3,r3,zero
 181e2b4:	1809883a 	mov	r4,r3
 181e2b8:	2807883a 	mov	r3,r5
 181e2bc:	20c6b03a 	or	r3,r4,r3
 181e2c0:	10c000c5 	stb	r3,3(r2)
  seg->tcphdr->seqno = htonl(seqno);
 181e2c4:	e0bffa17 	ldw	r2,-24(fp)
 181e2c8:	10800417 	ldw	r2,16(r2)
 181e2cc:	e0fffe17 	ldw	r3,-8(fp)
 181e2d0:	1808d63a 	srli	r4,r3,24
 181e2d4:	e0fffe17 	ldw	r3,-8(fp)
 181e2d8:	1806d23a 	srli	r3,r3,8
 181e2dc:	18ffc00c 	andi	r3,r3,65280
 181e2e0:	20c8b03a 	or	r4,r4,r3
 181e2e4:	e0fffe17 	ldw	r3,-8(fp)
 181e2e8:	18ffc00c 	andi	r3,r3,65280
 181e2ec:	1806923a 	slli	r3,r3,8
 181e2f0:	20c8b03a 	or	r4,r4,r3
 181e2f4:	e0fffe17 	ldw	r3,-8(fp)
 181e2f8:	1806963a 	slli	r3,r3,24
 181e2fc:	20c6b03a 	or	r3,r4,r3
 181e300:	19803fcc 	andi	r6,r3,255
 181e304:	11000103 	ldbu	r4,4(r2)
 181e308:	2008703a 	and	r4,r4,zero
 181e30c:	200b883a 	mov	r5,r4
 181e310:	3009883a 	mov	r4,r6
 181e314:	2908b03a 	or	r4,r5,r4
 181e318:	11000105 	stb	r4,4(r2)
 181e31c:	1808d23a 	srli	r4,r3,8
 181e320:	21803fcc 	andi	r6,r4,255
 181e324:	11000143 	ldbu	r4,5(r2)
 181e328:	2008703a 	and	r4,r4,zero
 181e32c:	200b883a 	mov	r5,r4
 181e330:	3009883a 	mov	r4,r6
 181e334:	2908b03a 	or	r4,r5,r4
 181e338:	11000145 	stb	r4,5(r2)
 181e33c:	1808d43a 	srli	r4,r3,16
 181e340:	21803fcc 	andi	r6,r4,255
 181e344:	11000183 	ldbu	r4,6(r2)
 181e348:	2008703a 	and	r4,r4,zero
 181e34c:	200b883a 	mov	r5,r4
 181e350:	3009883a 	mov	r4,r6
 181e354:	2908b03a 	or	r4,r5,r4
 181e358:	11000185 	stb	r4,6(r2)
 181e35c:	180ad63a 	srli	r5,r3,24
 181e360:	10c001c3 	ldbu	r3,7(r2)
 181e364:	1806703a 	and	r3,r3,zero
 181e368:	1809883a 	mov	r4,r3
 181e36c:	2807883a 	mov	r3,r5
 181e370:	20c6b03a 	or	r3,r4,r3
 181e374:	10c001c5 	stb	r3,7(r2)
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 181e378:	e0bffa17 	ldw	r2,-24(fp)
 181e37c:	10800417 	ldw	r2,16(r2)
 181e380:	e0fff903 	ldbu	r3,-28(fp)
 181e384:	1806d0ba 	srli	r3,r3,2
 181e388:	18c03fcc 	andi	r3,r3,255
 181e38c:	18c00144 	addi	r3,r3,5
 181e390:	1808933a 	slli	r4,r3,12
 181e394:	e0fffd03 	ldbu	r3,-12(fp)
 181e398:	20c6b03a 	or	r3,r4,r3
 181e39c:	18ffc00c 	andi	r3,r3,65280
 181e3a0:	1807d23a 	srai	r3,r3,8
 181e3a4:	180b883a 	mov	r5,r3
 181e3a8:	e0fff903 	ldbu	r3,-28(fp)
 181e3ac:	1806d0ba 	srli	r3,r3,2
 181e3b0:	18c03fcc 	andi	r3,r3,255
 181e3b4:	18c00144 	addi	r3,r3,5
 181e3b8:	1808933a 	slli	r4,r3,12
 181e3bc:	e0fffd03 	ldbu	r3,-12(fp)
 181e3c0:	20c6b03a 	or	r3,r4,r3
 181e3c4:	1806923a 	slli	r3,r3,8
 181e3c8:	28c6b03a 	or	r3,r5,r3
 181e3cc:	180d883a 	mov	r6,r3
 181e3d0:	30ffffcc 	andi	r3,r6,65535
 181e3d4:	19403fcc 	andi	r5,r3,255
 181e3d8:	10c00303 	ldbu	r3,12(r2)
 181e3dc:	1806703a 	and	r3,r3,zero
 181e3e0:	1809883a 	mov	r4,r3
 181e3e4:	2807883a 	mov	r3,r5
 181e3e8:	20c6b03a 	or	r3,r4,r3
 181e3ec:	10c00305 	stb	r3,12(r2)
 181e3f0:	30ffffcc 	andi	r3,r6,65535
 181e3f4:	1806d23a 	srli	r3,r3,8
 181e3f8:	197fffcc 	andi	r5,r3,65535
 181e3fc:	10c00343 	ldbu	r3,13(r2)
 181e400:	1806703a 	and	r3,r3,zero
 181e404:	1809883a 	mov	r4,r3
 181e408:	2807883a 	mov	r3,r5
 181e40c:	20c6b03a 	or	r3,r4,r3
 181e410:	10c00345 	stb	r3,13(r2)
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 181e414:	e0bffa17 	ldw	r2,-24(fp)
 181e418:	10800417 	ldw	r2,16(r2)
 181e41c:	10c00483 	ldbu	r3,18(r2)
 181e420:	1806703a 	and	r3,r3,zero
 181e424:	10c00485 	stb	r3,18(r2)
 181e428:	10c004c3 	ldbu	r3,19(r2)
 181e42c:	1806703a 	and	r3,r3,zero
 181e430:	10c004c5 	stb	r3,19(r2)
  return seg;
 181e434:	e0bffa17 	ldw	r2,-24(fp)
} 
 181e438:	e037883a 	mov	sp,fp
 181e43c:	dfc00117 	ldw	ra,4(sp)
 181e440:	df000017 	ldw	fp,0(sp)
 181e444:	dec00204 	addi	sp,sp,8
 181e448:	f800283a 	ret

0181e44c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 181e44c:	defff604 	addi	sp,sp,-40
 181e450:	dfc00915 	stw	ra,36(sp)
 181e454:	df000815 	stw	fp,32(sp)
 181e458:	df000804 	addi	fp,sp,32
 181e45c:	e13ffa15 	stw	r4,-24(fp)
 181e460:	3009883a 	mov	r4,r6
 181e464:	e1fffd15 	stw	r7,-12(fp)
 181e468:	e0c00317 	ldw	r3,12(fp)
 181e46c:	e0800417 	ldw	r2,16(fp)
 181e470:	e17ffb0d 	sth	r5,-20(fp)
 181e474:	e13ffc0d 	sth	r4,-16(fp)
 181e478:	e0fffe05 	stb	r3,-8(fp)
 181e47c:	e0bfff05 	stb	r2,-4(fp)
  struct pbuf *p;
  u16_t alloc = length;
 181e480:	e0bffb0b 	ldhu	r2,-20(fp)
 181e484:	e0bff80d 	sth	r2,-32(fp)
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 181e488:	e0fffb0b 	ldhu	r3,-20(fp)
 181e48c:	e0bffc0b 	ldhu	r2,-16(fp)
 181e490:	1880182e 	bgeu	r3,r2,181e4f4 <tcp_pbuf_prealloc+0xa8>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 181e494:	e0bffe03 	ldbu	r2,-8(fp)
 181e498:	1080008c 	andi	r2,r2,2
 181e49c:	10000d1e 	bne	r2,zero,181e4d4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 181e4a0:	e0800217 	ldw	r2,8(fp)
 181e4a4:	10800883 	ldbu	r2,34(r2)
 181e4a8:	10803fcc 	andi	r2,r2,255
 181e4ac:	1080100c 	andi	r2,r2,64
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 181e4b0:	1000101e 	bne	r2,zero,181e4f4 <tcp_pbuf_prealloc+0xa8>
        (!(pcb->flags & TF_NODELAY) &&
 181e4b4:	e0bfff03 	ldbu	r2,-4(fp)
 181e4b8:	10000626 	beq	r2,zero,181e4d4 <tcp_pbuf_prealloc+0x88>
         (!first_seg ||
          pcb->unsent != NULL ||
 181e4bc:	e0800217 	ldw	r2,8(fp)
 181e4c0:	10801c17 	ldw	r2,112(r2)
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
 181e4c4:	1000031e 	bne	r2,zero,181e4d4 <tcp_pbuf_prealloc+0x88>
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
 181e4c8:	e0800217 	ldw	r2,8(fp)
 181e4cc:	10801d17 	ldw	r2,116(r2)
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
 181e4d0:	10000826 	beq	r2,zero,181e4f4 <tcp_pbuf_prealloc+0xa8>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
 181e4d4:	e0bffb0b 	ldhu	r2,-20(fp)
 181e4d8:	10c16dc4 	addi	r3,r2,1463
 181e4dc:	00bfff04 	movi	r2,-4
 181e4e0:	1884703a 	and	r2,r3,r2
 181e4e4:	e0fffc0b 	ldhu	r3,-16(fp)
 181e4e8:	1880010e 	bge	r3,r2,181e4f0 <tcp_pbuf_prealloc+0xa4>
 181e4ec:	1805883a 	mov	r2,r3
 181e4f0:	e0bff80d 	sth	r2,-32(fp)
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 181e4f4:	e0bff80b 	ldhu	r2,-32(fp)
 181e4f8:	000d883a 	mov	r6,zero
 181e4fc:	100b883a 	mov	r5,r2
 181e500:	e13ffa17 	ldw	r4,-24(fp)
 181e504:	181a1480 	call	181a148 <pbuf_alloc>
 181e508:	e0bff915 	stw	r2,-28(fp)
  if (p == NULL) {
 181e50c:	e0bff917 	ldw	r2,-28(fp)
 181e510:	1000021e 	bne	r2,zero,181e51c <tcp_pbuf_prealloc+0xd0>
    return NULL;
 181e514:	0005883a 	mov	r2,zero
 181e518:	00000f06 	br	181e558 <tcp_pbuf_prealloc+0x10c>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 181e51c:	e0bff917 	ldw	r2,-28(fp)
 181e520:	10c0028b 	ldhu	r3,10(r2)
 181e524:	e0bffb0b 	ldhu	r2,-20(fp)
 181e528:	1885c83a 	sub	r2,r3,r2
 181e52c:	1007883a 	mov	r3,r2
 181e530:	e0bffd17 	ldw	r2,-12(fp)
 181e534:	10c0000d 	sth	r3,0(r2)
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 181e538:	e0bff917 	ldw	r2,-28(fp)
 181e53c:	e0fffb0b 	ldhu	r3,-20(fp)
 181e540:	10c0020d 	sth	r3,8(r2)
 181e544:	e0bff917 	ldw	r2,-28(fp)
 181e548:	10c0020b 	ldhu	r3,8(r2)
 181e54c:	e0bff917 	ldw	r2,-28(fp)
 181e550:	10c0028d 	sth	r3,10(r2)
  return p;
 181e554:	e0bff917 	ldw	r2,-28(fp)
}
 181e558:	e037883a 	mov	sp,fp
 181e55c:	dfc00117 	ldw	ra,4(sp)
 181e560:	df000017 	ldw	fp,0(sp)
 181e564:	dec00204 	addi	sp,sp,8
 181e568:	f800283a 	ret

0181e56c <tcp_seg_add_chksum>:
#if TCP_CHECKSUM_ON_COPY
/** Add a checksum of newly added data to the segment */
static void
tcp_seg_add_chksum(u16_t chksum, u16_t len, u16_t *seg_chksum,
                   u8_t *seg_chksum_swapped)
{
 181e56c:	defffa04 	addi	sp,sp,-24
 181e570:	df000515 	stw	fp,20(sp)
 181e574:	df000504 	addi	fp,sp,20
 181e578:	2007883a 	mov	r3,r4
 181e57c:	2805883a 	mov	r2,r5
 181e580:	e1bffe15 	stw	r6,-8(fp)
 181e584:	e1ffff15 	stw	r7,-4(fp)
 181e588:	e0fffc0d 	sth	r3,-16(fp)
 181e58c:	e0bffd0d 	sth	r2,-12(fp)
  u32_t helper;
  /* add chksum to old chksum and fold to u16_t */
  helper = chksum + *seg_chksum;
 181e590:	e0fffc0b 	ldhu	r3,-16(fp)
 181e594:	e0bffe17 	ldw	r2,-8(fp)
 181e598:	1080000b 	ldhu	r2,0(r2)
 181e59c:	10bfffcc 	andi	r2,r2,65535
 181e5a0:	1885883a 	add	r2,r3,r2
 181e5a4:	e0bffb15 	stw	r2,-20(fp)
  chksum = FOLD_U32T(helper);
 181e5a8:	e0bffb17 	ldw	r2,-20(fp)
 181e5ac:	1004d43a 	srli	r2,r2,16
 181e5b0:	1007883a 	mov	r3,r2
 181e5b4:	e0bffb17 	ldw	r2,-20(fp)
 181e5b8:	1885883a 	add	r2,r3,r2
 181e5bc:	e0bffc0d 	sth	r2,-16(fp)
  if ((len & 1) != 0) {
 181e5c0:	e0bffd0b 	ldhu	r2,-12(fp)
 181e5c4:	1080004c 	andi	r2,r2,1
 181e5c8:	10000e26 	beq	r2,zero,181e604 <tcp_seg_add_chksum+0x98>
    *seg_chksum_swapped = 1 - *seg_chksum_swapped;
 181e5cc:	e0bfff17 	ldw	r2,-4(fp)
 181e5d0:	10800003 	ldbu	r2,0(r2)
 181e5d4:	00c00044 	movi	r3,1
 181e5d8:	1885c83a 	sub	r2,r3,r2
 181e5dc:	1007883a 	mov	r3,r2
 181e5e0:	e0bfff17 	ldw	r2,-4(fp)
 181e5e4:	10c00005 	stb	r3,0(r2)
    chksum = SWAP_BYTES_IN_WORD(chksum);
 181e5e8:	e0bffc0b 	ldhu	r2,-16(fp)
 181e5ec:	1004d23a 	srli	r2,r2,8
 181e5f0:	1007883a 	mov	r3,r2
 181e5f4:	e0bffc0b 	ldhu	r2,-16(fp)
 181e5f8:	1004923a 	slli	r2,r2,8
 181e5fc:	1884b03a 	or	r2,r3,r2
 181e600:	e0bffc0d 	sth	r2,-16(fp)
  }
  *seg_chksum = chksum;
 181e604:	e0bffe17 	ldw	r2,-8(fp)
 181e608:	e0fffc0b 	ldhu	r3,-16(fp)
 181e60c:	10c0000d 	sth	r3,0(r2)
}
 181e610:	0001883a 	nop
 181e614:	e037883a 	mov	sp,fp
 181e618:	df000017 	ldw	fp,0(sp)
 181e61c:	dec00104 	addi	sp,sp,4
 181e620:	f800283a 	ret

0181e624 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 181e624:	defffd04 	addi	sp,sp,-12
 181e628:	df000215 	stw	fp,8(sp)
 181e62c:	df000204 	addi	fp,sp,8
 181e630:	e13ffe15 	stw	r4,-8(fp)
 181e634:	2805883a 	mov	r2,r5
 181e638:	e0bfff0d 	sth	r2,-4(fp)
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 181e63c:	e0bffe17 	ldw	r2,-8(fp)
 181e640:	10800617 	ldw	r2,24(r2)
 181e644:	10800120 	cmpeqi	r2,r2,4
 181e648:	10000e1e 	bne	r2,zero,181e684 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
 181e64c:	e0bffe17 	ldw	r2,-8(fp)
 181e650:	10800617 	ldw	r2,24(r2)
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 181e654:	108001e0 	cmpeqi	r2,r2,7
 181e658:	10000a1e 	bne	r2,zero,181e684 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
 181e65c:	e0bffe17 	ldw	r2,-8(fp)
 181e660:	10800617 	ldw	r2,24(r2)
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
 181e664:	108000a0 	cmpeqi	r2,r2,2
 181e668:	1000061e 	bne	r2,zero,181e684 <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
 181e66c:	e0bffe17 	ldw	r2,-8(fp)
 181e670:	10800617 	ldw	r2,24(r2)
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
 181e674:	108000e0 	cmpeqi	r2,r2,3
 181e678:	1000021e 	bne	r2,zero,181e684 <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 181e67c:	00bffcc4 	movi	r2,-13
 181e680:	00002d06 	br	181e738 <tcp_write_checks+0x114>
  } else if (len == 0) {
 181e684:	e0bfff0b 	ldhu	r2,-4(fp)
 181e688:	1000021e 	bne	r2,zero,181e694 <tcp_write_checks+0x70>
    return ERR_OK;
 181e68c:	0005883a 	mov	r2,zero
 181e690:	00002906 	br	181e738 <tcp_write_checks+0x114>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 181e694:	e0bffe17 	ldw	r2,-8(fp)
 181e698:	10801a8b 	ldhu	r2,106(r2)
 181e69c:	10ffffcc 	andi	r3,r2,65535
 181e6a0:	e0bfff0b 	ldhu	r2,-4(fp)
 181e6a4:	1880092e 	bgeu	r3,r2,181e6cc <tcp_write_checks+0xa8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 181e6a8:	e0bffe17 	ldw	r2,-8(fp)
 181e6ac:	10c00883 	ldbu	r3,34(r2)
 181e6b0:	00bfe004 	movi	r2,-128
 181e6b4:	1884b03a 	or	r2,r3,r2
 181e6b8:	1007883a 	mov	r3,r2
 181e6bc:	e0bffe17 	ldw	r2,-8(fp)
 181e6c0:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
 181e6c4:	00bfffc4 	movi	r2,-1
 181e6c8:	00001b06 	br	181e738 <tcp_write_checks+0x114>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 181e6cc:	e0bffe17 	ldw	r2,-8(fp)
 181e6d0:	10801b0b 	ldhu	r2,108(r2)
 181e6d4:	10bfffcc 	andi	r2,r2,65535
 181e6d8:	10800228 	cmpgeui	r2,r2,8
 181e6dc:	1000051e 	bne	r2,zero,181e6f4 <tcp_write_checks+0xd0>
 181e6e0:	e0bffe17 	ldw	r2,-8(fp)
 181e6e4:	10801b0b 	ldhu	r2,108(r2)
 181e6e8:	10bfffcc 	andi	r2,r2,65535
 181e6ec:	10bfff70 	cmpltui	r2,r2,65533
 181e6f0:	1000101e 	bne	r2,zero,181e734 <tcp_write_checks+0x110>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 181e6f4:	008061f4 	movhi	r2,391
 181e6f8:	10a77104 	addi	r2,r2,-25148
 181e6fc:	10804e17 	ldw	r2,312(r2)
 181e700:	10c00044 	addi	r3,r2,1
 181e704:	008061f4 	movhi	r2,391
 181e708:	10a77104 	addi	r2,r2,-25148
 181e70c:	10c04e15 	stw	r3,312(r2)
    pcb->flags |= TF_NAGLEMEMERR;
 181e710:	e0bffe17 	ldw	r2,-8(fp)
 181e714:	10c00883 	ldbu	r3,34(r2)
 181e718:	00bfe004 	movi	r2,-128
 181e71c:	1884b03a 	or	r2,r3,r2
 181e720:	1007883a 	mov	r3,r2
 181e724:	e0bffe17 	ldw	r2,-8(fp)
 181e728:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
 181e72c:	00bfffc4 	movi	r2,-1
 181e730:	00000106 	br	181e738 <tcp_write_checks+0x114>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 181e734:	0005883a 	mov	r2,zero
}
 181e738:	e037883a 	mov	sp,fp
 181e73c:	df000017 	ldw	fp,0(sp)
 181e740:	dec00104 	addi	sp,sp,4
 181e744:	f800283a 	ret

0181e748 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 181e748:	deffe504 	addi	sp,sp,-108
 181e74c:	dfc01a15 	stw	ra,104(sp)
 181e750:	df001915 	stw	fp,100(sp)
 181e754:	df001904 	addi	fp,sp,100
 181e758:	e13ffc15 	stw	r4,-16(fp)
 181e75c:	e17ffd15 	stw	r5,-12(fp)
 181e760:	3007883a 	mov	r3,r6
 181e764:	3805883a 	mov	r2,r7
 181e768:	e0fffe0d 	sth	r3,-8(fp)
 181e76c:	e0bfff05 	stb	r2,-4(fp)
  struct pbuf *concat_p = NULL;
 181e770:	e03fea15 	stw	zero,-88(fp)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 181e774:	e03feb15 	stw	zero,-84(fp)
 181e778:	e03fec15 	stw	zero,-80(fp)
 181e77c:	e03fed15 	stw	zero,-76(fp)
 181e780:	e03fee15 	stw	zero,-72(fp)
  u16_t pos = 0; /* position in 'arg' data */
 181e784:	e03fef0d 	sth	zero,-68(fp)
  u16_t queuelen;
  u8_t optlen = 0;
 181e788:	e03ff405 	stb	zero,-48(fp)
  u8_t optflags = 0;
 181e78c:	e03ff445 	stb	zero,-47(fp)
#if TCP_OVERSIZE
  u16_t oversize = 0;
 181e790:	e03ff90d 	sth	zero,-28(fp)
  u16_t oversize_used = 0;
 181e794:	e03ff00d 	sth	zero,-64(fp)
#endif /* TCP_OVERSIZE */
#if TCP_CHECKSUM_ON_COPY
  u16_t concat_chksum = 0;
 181e798:	e03ff98d 	sth	zero,-26(fp)
  u8_t concat_chksum_swapped = 0;
 181e79c:	e03ffa05 	stb	zero,-24(fp)
  u16_t concat_chksummed = 0;
 181e7a0:	e03ff08d 	sth	zero,-62(fp)
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
 181e7a4:	e0bffc17 	ldw	r2,-16(fp)
 181e7a8:	1080198b 	ldhu	r2,102(r2)
 181e7ac:	10bfffcc 	andi	r2,r2,65535
 181e7b0:	1004d07a 	srli	r2,r2,1
 181e7b4:	1007883a 	mov	r3,r2
 181e7b8:	e0bffc17 	ldw	r2,-16(fp)
 181e7bc:	11400e8b 	ldhu	r5,58(r2)
 181e7c0:	1805883a 	mov	r2,r3
 181e7c4:	10ffffcc 	andi	r3,r2,65535
 181e7c8:	293fffcc 	andi	r4,r5,65535
 181e7cc:	20c0012e 	bgeu	r4,r3,181e7d4 <tcp_write+0x8c>
 181e7d0:	2805883a 	mov	r2,r5
 181e7d4:	e0bff48d 	sth	r2,-46(fp)
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
 181e7d8:	e0bffd17 	ldw	r2,-12(fp)
 181e7dc:	1000091e 	bne	r2,zero,181e804 <tcp_write+0xbc>
 181e7e0:	01c06134 	movhi	r7,388
 181e7e4:	39c4af04 	addi	r7,r7,4796
 181e7e8:	01805fc4 	movi	r6,383
 181e7ec:	01406134 	movhi	r5,388
 181e7f0:	2944b504 	addi	r5,r5,4820
 181e7f4:	01006134 	movhi	r4,388
 181e7f8:	2104c204 	addi	r4,r4,4872
 181e7fc:	1800bd80 	call	1800bd8 <printf>
 181e800:	003fff06 	br	181e800 <__alt_mem_mem_0+0xff7fe800>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 181e804:	e0bffe0b 	ldhu	r2,-8(fp)
 181e808:	100b883a 	mov	r5,r2
 181e80c:	e13ffc17 	ldw	r4,-16(fp)
 181e810:	181e6240 	call	181e624 <tcp_write_checks>
 181e814:	e0bff505 	stb	r2,-44(fp)
  if (err != ERR_OK) {
 181e818:	e0bff507 	ldb	r2,-44(fp)
 181e81c:	10000226 	beq	r2,zero,181e828 <tcp_write+0xe0>
    return err;
 181e820:	e0bff503 	ldbu	r2,-44(fp)
 181e824:	00020f06 	br	181f064 <tcp_write+0x91c>
  }
  queuelen = pcb->snd_queuelen;
 181e828:	e0bffc17 	ldw	r2,-16(fp)
 181e82c:	10801b0b 	ldhu	r2,108(r2)
 181e830:	e0bfef8d 	sth	r2,-66(fp)
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 181e834:	e0bffc17 	ldw	r2,-16(fp)
 181e838:	10801c17 	ldw	r2,112(r2)
 181e83c:	10014326 	beq	r2,zero,181ed4c <tcp_write+0x604>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 181e840:	e0bffc17 	ldw	r2,-16(fp)
 181e844:	10801c17 	ldw	r2,112(r2)
 181e848:	e0bfeb15 	stw	r2,-84(fp)
 181e84c:	00000306 	br	181e85c <tcp_write+0x114>
         last_unsent = last_unsent->next);
 181e850:	e0bfeb17 	ldw	r2,-84(fp)
 181e854:	10800017 	ldw	r2,0(r2)
 181e858:	e0bfeb15 	stw	r2,-84(fp)
  if (pcb->unsent != NULL) {
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 181e85c:	e0bfeb17 	ldw	r2,-84(fp)
 181e860:	10800017 	ldw	r2,0(r2)
 181e864:	103ffa1e 	bne	r2,zero,181e850 <__alt_mem_mem_0+0xff7fe850>
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 181e868:	e0bfeb17 	ldw	r2,-84(fp)
 181e86c:	10800343 	ldbu	r2,13(r2)
 181e870:	10803fcc 	andi	r2,r2,255
 181e874:	1080004c 	andi	r2,r2,1
 181e878:	10000226 	beq	r2,zero,181e884 <tcp_write+0x13c>
 181e87c:	00c00104 	movi	r3,4
 181e880:	00000106 	br	181e888 <tcp_write+0x140>
 181e884:	0007883a 	mov	r3,zero
 181e888:	e0bfeb17 	ldw	r2,-84(fp)
 181e88c:	10800343 	ldbu	r2,13(r2)
 181e890:	10803fcc 	andi	r2,r2,255
 181e894:	1080008c 	andi	r2,r2,2
 181e898:	10000226 	beq	r2,zero,181e8a4 <tcp_write+0x15c>
 181e89c:	00800304 	movi	r2,12
 181e8a0:	00000106 	br	181e8a8 <tcp_write+0x160>
 181e8a4:	0005883a 	mov	r2,zero
 181e8a8:	1885883a 	add	r2,r3,r2
 181e8ac:	e0bff58d 	sth	r2,-42(fp)
    space = mss_local - (last_unsent->len + unsent_optlen);
 181e8b0:	e0bfeb17 	ldw	r2,-84(fp)
 181e8b4:	10c0020b 	ldhu	r3,8(r2)
 181e8b8:	e0bff58b 	ldhu	r2,-42(fp)
 181e8bc:	1885883a 	add	r2,r3,r2
 181e8c0:	1007883a 	mov	r3,r2
 181e8c4:	e0bff48b 	ldhu	r2,-46(fp)
 181e8c8:	10c5c83a 	sub	r2,r2,r3
 181e8cc:	e0bff10d 	sth	r2,-60(fp)
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 181e8d0:	e0bffc17 	ldw	r2,-16(fp)
 181e8d4:	10801b8b 	ldhu	r2,110(r2)
 181e8d8:	e0bff90d 	sth	r2,-28(fp)
    if (oversize > 0) {
 181e8dc:	e0bff90b 	ldhu	r2,-28(fp)
 181e8e0:	10bfffcc 	andi	r2,r2,65535
 181e8e4:	10001526 	beq	r2,zero,181e93c <tcp_write+0x1f4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
 181e8e8:	e0bfeb17 	ldw	r2,-84(fp)
 181e8ec:	e0bfec15 	stw	r2,-80(fp)
      oversize_used = oversize < len ? oversize : len;
 181e8f0:	e17ff90b 	ldhu	r5,-28(fp)
 181e8f4:	e0bffe0b 	ldhu	r2,-8(fp)
 181e8f8:	10ffffcc 	andi	r3,r2,65535
 181e8fc:	293fffcc 	andi	r4,r5,65535
 181e900:	20c0012e 	bgeu	r4,r3,181e908 <tcp_write+0x1c0>
 181e904:	2805883a 	mov	r2,r5
 181e908:	e0bff00d 	sth	r2,-64(fp)
      pos += oversize_used;
 181e90c:	e0ffef0b 	ldhu	r3,-68(fp)
 181e910:	e0bff00b 	ldhu	r2,-64(fp)
 181e914:	1885883a 	add	r2,r3,r2
 181e918:	e0bfef0d 	sth	r2,-68(fp)
      oversize -= oversize_used;
 181e91c:	e0fff90b 	ldhu	r3,-28(fp)
 181e920:	e0bff00b 	ldhu	r2,-64(fp)
 181e924:	1885c83a 	sub	r2,r3,r2
 181e928:	e0bff90d 	sth	r2,-28(fp)
      space -= oversize_used;
 181e92c:	e0fff10b 	ldhu	r3,-60(fp)
 181e930:	e0bff00b 	ldhu	r2,-64(fp)
 181e934:	1885c83a 	sub	r2,r3,r2
 181e938:	e0bff10d 	sth	r2,-60(fp)
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 181e93c:	e0ffef0b 	ldhu	r3,-68(fp)
 181e940:	e0bffe0b 	ldhu	r2,-8(fp)
 181e944:	1881012e 	bgeu	r3,r2,181ed4c <tcp_write+0x604>
 181e948:	e0bff10b 	ldhu	r2,-60(fp)
 181e94c:	1000ff26 	beq	r2,zero,181ed4c <tcp_write+0x604>
 181e950:	e0bfeb17 	ldw	r2,-84(fp)
 181e954:	1080020b 	ldhu	r2,8(r2)
 181e958:	10bfffcc 	andi	r2,r2,65535
 181e95c:	1000fb26 	beq	r2,zero,181ed4c <tcp_write+0x604>
      u16_t seglen = space < len - pos ? space : len - pos;
 181e960:	e0fffe0b 	ldhu	r3,-8(fp)
 181e964:	e0bfef0b 	ldhu	r2,-68(fp)
 181e968:	1885c83a 	sub	r2,r3,r2
 181e96c:	e0fff10b 	ldhu	r3,-60(fp)
 181e970:	1880010e 	bge	r3,r2,181e978 <tcp_write+0x230>
 181e974:	1805883a 	mov	r2,r3
 181e978:	e0bff60d 	sth	r2,-40(fp)
      seg = last_unsent;
 181e97c:	e0bfeb17 	ldw	r2,-84(fp)
 181e980:	e0bfec15 	stw	r2,-80(fp)

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 181e984:	e0bfff03 	ldbu	r2,-4(fp)
 181e988:	1080004c 	andi	r2,r2,1
 181e98c:	10002826 	beq	r2,zero,181ea30 <tcp_write+0x2e8>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 181e990:	e13ff60b 	ldhu	r4,-40(fp)
 181e994:	e17ff10b 	ldhu	r5,-60(fp)
 181e998:	e0bfff03 	ldbu	r2,-4(fp)
 181e99c:	e1bff904 	addi	r6,fp,-28
 181e9a0:	00c00044 	movi	r3,1
 181e9a4:	d8c00215 	stw	r3,8(sp)
 181e9a8:	d8800115 	stw	r2,4(sp)
 181e9ac:	e0bffc17 	ldw	r2,-16(fp)
 181e9b0:	d8800015 	stw	r2,0(sp)
 181e9b4:	300f883a 	mov	r7,r6
 181e9b8:	280d883a 	mov	r6,r5
 181e9bc:	200b883a 	mov	r5,r4
 181e9c0:	010000c4 	movi	r4,3
 181e9c4:	181e44c0 	call	181e44c <tcp_pbuf_prealloc>
 181e9c8:	e0bfea15 	stw	r2,-88(fp)
 181e9cc:	e0bfea17 	ldw	r2,-88(fp)
 181e9d0:	10018426 	beq	r2,zero,181efe4 <tcp_write+0x89c>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 181e9d4:	e0bfea17 	ldw	r2,-88(fp)
 181e9d8:	11000117 	ldw	r4,4(r2)
 181e9dc:	e0bfef0b 	ldhu	r2,-68(fp)
 181e9e0:	e0fffd17 	ldw	r3,-12(fp)
 181e9e4:	1885883a 	add	r2,r3,r2
 181e9e8:	e0fff60b 	ldhu	r3,-40(fp)
 181e9ec:	180d883a 	mov	r6,r3
 181e9f0:	100b883a 	mov	r5,r2
 181e9f4:	18318b80 	call	18318b8 <lwip_chksum_copy>
 181e9f8:	10bfffcc 	andi	r2,r2,65535
 181e9fc:	e0fff60b 	ldhu	r3,-40(fp)
 181ea00:	e17ffa04 	addi	r5,fp,-24
 181ea04:	e13ff984 	addi	r4,fp,-26
 181ea08:	280f883a 	mov	r7,r5
 181ea0c:	200d883a 	mov	r6,r4
 181ea10:	180b883a 	mov	r5,r3
 181ea14:	1009883a 	mov	r4,r2
 181ea18:	181e56c0 	call	181e56c <tcp_seg_add_chksum>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
 181ea1c:	e0fff08b 	ldhu	r3,-62(fp)
 181ea20:	e0bff60b 	ldhu	r2,-40(fp)
 181ea24:	1885883a 	add	r2,r3,r2
 181ea28:	e0bff08d 	sth	r2,-62(fp)
 181ea2c:	00002206 	br	181eab8 <tcp_write+0x370>
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 181ea30:	e0bff60b 	ldhu	r2,-40(fp)
 181ea34:	01800044 	movi	r6,1
 181ea38:	100b883a 	mov	r5,r2
 181ea3c:	010000c4 	movi	r4,3
 181ea40:	181a1480 	call	181a148 <pbuf_alloc>
 181ea44:	e0bfea15 	stw	r2,-88(fp)
 181ea48:	e0bfea17 	ldw	r2,-88(fp)
 181ea4c:	10016726 	beq	r2,zero,181efec <tcp_write+0x8a4>
                      ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
          goto memerr;
        }
#if TCP_CHECKSUM_ON_COPY
        /* calculate the checksum of nocopy-data */
        tcp_seg_add_chksum(~inet_chksum((u8_t*)arg + pos, seglen), seglen,
 181ea50:	e0bfef0b 	ldhu	r2,-68(fp)
 181ea54:	e0fffd17 	ldw	r3,-12(fp)
 181ea58:	1885883a 	add	r2,r3,r2
 181ea5c:	e0fff60b 	ldhu	r3,-40(fp)
 181ea60:	180b883a 	mov	r5,r3
 181ea64:	1009883a 	mov	r4,r2
 181ea68:	18317680 	call	1831768 <inet_chksum>
 181ea6c:	0084303a 	nor	r2,zero,r2
 181ea70:	10bfffcc 	andi	r2,r2,65535
 181ea74:	e0fff60b 	ldhu	r3,-40(fp)
 181ea78:	e17ffa04 	addi	r5,fp,-24
 181ea7c:	e13ff984 	addi	r4,fp,-26
 181ea80:	280f883a 	mov	r7,r5
 181ea84:	200d883a 	mov	r6,r4
 181ea88:	180b883a 	mov	r5,r3
 181ea8c:	1009883a 	mov	r4,r2
 181ea90:	181e56c0 	call	181e56c <tcp_seg_add_chksum>
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
 181ea94:	e0fff08b 	ldhu	r3,-62(fp)
 181ea98:	e0bff60b 	ldhu	r2,-40(fp)
 181ea9c:	1885883a 	add	r2,r3,r2
 181eaa0:	e0bff08d 	sth	r2,-62(fp)
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
 181eaa4:	e0bfef0b 	ldhu	r2,-68(fp)
 181eaa8:	e0fffd17 	ldw	r3,-12(fp)
 181eaac:	1887883a 	add	r3,r3,r2
 181eab0:	e0bfea17 	ldw	r2,-88(fp)
 181eab4:	10c00115 	stw	r3,4(r2)
      }

      pos += seglen;
 181eab8:	e0ffef0b 	ldhu	r3,-68(fp)
 181eabc:	e0bff60b 	ldhu	r2,-40(fp)
 181eac0:	1885883a 	add	r2,r3,r2
 181eac4:	e0bfef0d 	sth	r2,-68(fp)
      queuelen += pbuf_clen(concat_p);
 181eac8:	e13fea17 	ldw	r4,-88(fp)
 181eacc:	181aa380 	call	181aa38 <pbuf_clen>
 181ead0:	10c03fcc 	andi	r3,r2,255
 181ead4:	e0bfef8b 	ldhu	r2,-66(fp)
 181ead8:	1885883a 	add	r2,r3,r2
 181eadc:	e0bfef8d 	sth	r2,-66(fp)
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 181eae0:	00009a06 	br	181ed4c <tcp_write+0x604>
    struct pbuf *p;
    u16_t left = len - pos;
 181eae4:	e0fffe0b 	ldhu	r3,-8(fp)
 181eae8:	e0bfef0b 	ldhu	r2,-68(fp)
 181eaec:	1885c83a 	sub	r2,r3,r2
 181eaf0:	e0bff68d 	sth	r2,-38(fp)
    u16_t max_len = mss_local - optlen;
 181eaf4:	e0bff403 	ldbu	r2,-48(fp)
 181eaf8:	e0fff48b 	ldhu	r3,-46(fp)
 181eafc:	1885c83a 	sub	r2,r3,r2
 181eb00:	e0bff70d 	sth	r2,-36(fp)
    u16_t seglen = left > max_len ? max_len : left;
 181eb04:	e17ff70b 	ldhu	r5,-36(fp)
 181eb08:	e0bff68b 	ldhu	r2,-38(fp)
 181eb0c:	10ffffcc 	andi	r3,r2,65535
 181eb10:	293fffcc 	andi	r4,r5,65535
 181eb14:	20c0012e 	bgeu	r4,r3,181eb1c <tcp_write+0x3d4>
 181eb18:	2805883a 	mov	r2,r5
 181eb1c:	e0bff78d 	sth	r2,-34(fp)
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
 181eb20:	e03ffa8d 	sth	zero,-22(fp)
    u8_t chksum_swapped = 0;
 181eb24:	e03ffb05 	stb	zero,-20(fp)
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 181eb28:	e0bfff03 	ldbu	r2,-4(fp)
 181eb2c:	1080004c 	andi	r2,r2,1
 181eb30:	10002b26 	beq	r2,zero,181ebe0 <tcp_write+0x498>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 181eb34:	e0fff403 	ldbu	r3,-48(fp)
 181eb38:	e0bff78b 	ldhu	r2,-34(fp)
 181eb3c:	1885883a 	add	r2,r3,r2
 181eb40:	113fffcc 	andi	r4,r2,65535
 181eb44:	e17ff48b 	ldhu	r5,-46(fp)
 181eb48:	e0bfff03 	ldbu	r2,-4(fp)
 181eb4c:	e0ffee17 	ldw	r3,-72(fp)
 181eb50:	1807003a 	cmpeq	r3,r3,zero
 181eb54:	18c03fcc 	andi	r3,r3,255
 181eb58:	e1bff904 	addi	r6,fp,-28
 181eb5c:	d8c00215 	stw	r3,8(sp)
 181eb60:	d8800115 	stw	r2,4(sp)
 181eb64:	e0bffc17 	ldw	r2,-16(fp)
 181eb68:	d8800015 	stw	r2,0(sp)
 181eb6c:	300f883a 	mov	r7,r6
 181eb70:	280d883a 	mov	r6,r5
 181eb74:	200b883a 	mov	r5,r4
 181eb78:	0009883a 	mov	r4,zero
 181eb7c:	181e44c0 	call	181e44c <tcp_pbuf_prealloc>
 181eb80:	e0bff215 	stw	r2,-56(fp)
 181eb84:	e0bff217 	ldw	r2,-56(fp)
 181eb88:	10011a26 	beq	r2,zero,181eff4 <tcp_write+0x8ac>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 181eb8c:	e0bff217 	ldw	r2,-56(fp)
 181eb90:	10c00117 	ldw	r3,4(r2)
 181eb94:	e0bff403 	ldbu	r2,-48(fp)
 181eb98:	1889883a 	add	r4,r3,r2
 181eb9c:	e0bfef0b 	ldhu	r2,-68(fp)
 181eba0:	e0fffd17 	ldw	r3,-12(fp)
 181eba4:	1885883a 	add	r2,r3,r2
 181eba8:	e0fff78b 	ldhu	r3,-34(fp)
 181ebac:	180d883a 	mov	r6,r3
 181ebb0:	100b883a 	mov	r5,r2
 181ebb4:	18318b80 	call	18318b8 <lwip_chksum_copy>
 181ebb8:	10bfffcc 	andi	r2,r2,65535
 181ebbc:	e0fff78b 	ldhu	r3,-34(fp)
 181ebc0:	e17ffb04 	addi	r5,fp,-20
 181ebc4:	e13ffa84 	addi	r4,fp,-22
 181ebc8:	280f883a 	mov	r7,r5
 181ebcc:	200d883a 	mov	r6,r4
 181ebd0:	180b883a 	mov	r5,r3
 181ebd4:	1009883a 	mov	r4,r2
 181ebd8:	181e56c0 	call	181e56c <tcp_seg_add_chksum>
 181ebdc:	00002406 	br	181ec70 <tcp_write+0x528>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 181ebe0:	e0bff78b 	ldhu	r2,-34(fp)
 181ebe4:	01800044 	movi	r6,1
 181ebe8:	100b883a 	mov	r5,r2
 181ebec:	0009883a 	mov	r4,zero
 181ebf0:	181a1480 	call	181a148 <pbuf_alloc>
 181ebf4:	e0bff815 	stw	r2,-32(fp)
 181ebf8:	e0bff817 	ldw	r2,-32(fp)
 181ebfc:	1000ff26 	beq	r2,zero,181effc <tcp_write+0x8b4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
        goto memerr;
      }
#if TCP_CHECKSUM_ON_COPY
      /* calculate the checksum of nocopy-data */
      chksum = ~inet_chksum((u8_t*)arg + pos, seglen);
 181ec00:	e0bfef0b 	ldhu	r2,-68(fp)
 181ec04:	e0fffd17 	ldw	r3,-12(fp)
 181ec08:	1885883a 	add	r2,r3,r2
 181ec0c:	e0fff78b 	ldhu	r3,-34(fp)
 181ec10:	180b883a 	mov	r5,r3
 181ec14:	1009883a 	mov	r4,r2
 181ec18:	18317680 	call	1831768 <inet_chksum>
 181ec1c:	0084303a 	nor	r2,zero,r2
 181ec20:	e0bffa8d 	sth	r2,-22(fp)
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      p2->payload = (u8_t*)arg + pos;
 181ec24:	e0bfef0b 	ldhu	r2,-68(fp)
 181ec28:	e0fffd17 	ldw	r3,-12(fp)
 181ec2c:	1887883a 	add	r3,r3,r2
 181ec30:	e0bff817 	ldw	r2,-32(fp)
 181ec34:	10c00115 	stw	r3,4(r2)

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 181ec38:	e0bff403 	ldbu	r2,-48(fp)
 181ec3c:	000d883a 	mov	r6,zero
 181ec40:	100b883a 	mov	r5,r2
 181ec44:	0009883a 	mov	r4,zero
 181ec48:	181a1480 	call	181a148 <pbuf_alloc>
 181ec4c:	e0bff215 	stw	r2,-56(fp)
 181ec50:	e0bff217 	ldw	r2,-56(fp)
 181ec54:	1000031e 	bne	r2,zero,181ec64 <tcp_write+0x51c>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 181ec58:	e13ff817 	ldw	r4,-32(fp)
 181ec5c:	181a9040 	call	181a904 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 181ec60:	0000e906 	br	181f008 <tcp_write+0x8c0>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 181ec64:	e17ff817 	ldw	r5,-32(fp)
 181ec68:	e13ff217 	ldw	r4,-56(fp)
 181ec6c:	181aad80 	call	181aad8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 181ec70:	e13ff217 	ldw	r4,-56(fp)
 181ec74:	181aa380 	call	181aa38 <pbuf_clen>
 181ec78:	10c03fcc 	andi	r3,r2,255
 181ec7c:	e0bfef8b 	ldhu	r2,-66(fp)
 181ec80:	1885883a 	add	r2,r3,r2
 181ec84:	e0bfef8d 	sth	r2,-66(fp)

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 181ec88:	e0bfef8b 	ldhu	r2,-66(fp)
 181ec8c:	10800268 	cmpgeui	r2,r2,9
 181ec90:	1000031e 	bne	r2,zero,181eca0 <tcp_write+0x558>
 181ec94:	e0bfef8b 	ldhu	r2,-66(fp)
 181ec98:	10bfff70 	cmpltui	r2,r2,65533
 181ec9c:	1000031e 	bne	r2,zero,181ecac <tcp_write+0x564>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
 181eca0:	e13ff217 	ldw	r4,-56(fp)
 181eca4:	181a9040 	call	181a904 <pbuf_free>
      goto memerr;
 181eca8:	0000d706 	br	181f008 <tcp_write+0x8c0>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 181ecac:	e0bffc17 	ldw	r2,-16(fp)
 181ecb0:	10c01817 	ldw	r3,96(r2)
 181ecb4:	e0bfef0b 	ldhu	r2,-68(fp)
 181ecb8:	1887883a 	add	r3,r3,r2
 181ecbc:	e0bff443 	ldbu	r2,-47(fp)
 181ecc0:	d8800015 	stw	r2,0(sp)
 181ecc4:	180f883a 	mov	r7,r3
 181ecc8:	000d883a 	mov	r6,zero
 181eccc:	e17ff217 	ldw	r5,-56(fp)
 181ecd0:	e13ffc17 	ldw	r4,-16(fp)
 181ecd4:	181e0ac0 	call	181e0ac <tcp_create_segment>
 181ecd8:	e0bfec15 	stw	r2,-80(fp)
 181ecdc:	e0bfec17 	ldw	r2,-80(fp)
 181ece0:	1000c826 	beq	r2,zero,181f004 <tcp_write+0x8bc>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
#if TCP_CHECKSUM_ON_COPY
    seg->chksum = chksum;
 181ece4:	e0fffa8b 	ldhu	r3,-22(fp)
 181ece8:	e0bfec17 	ldw	r2,-80(fp)
 181ecec:	10c0028d 	sth	r3,10(r2)
    seg->chksum_swapped = chksum_swapped;
 181ecf0:	e0fffb03 	ldbu	r3,-20(fp)
 181ecf4:	e0bfec17 	ldw	r2,-80(fp)
 181ecf8:	10c00305 	stb	r3,12(r2)
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
 181ecfc:	e0bfec17 	ldw	r2,-80(fp)
 181ed00:	10800343 	ldbu	r2,13(r2)
 181ed04:	10800114 	ori	r2,r2,4
 181ed08:	1007883a 	mov	r3,r2
 181ed0c:	e0bfec17 	ldw	r2,-80(fp)
 181ed10:	10c00345 	stb	r3,13(r2)
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 181ed14:	e0bfee17 	ldw	r2,-72(fp)
 181ed18:	1000031e 	bne	r2,zero,181ed28 <tcp_write+0x5e0>
      queue = seg;
 181ed1c:	e0bfec17 	ldw	r2,-80(fp)
 181ed20:	e0bfee15 	stw	r2,-72(fp)
 181ed24:	00000306 	br	181ed34 <tcp_write+0x5ec>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
 181ed28:	e0bfed17 	ldw	r2,-76(fp)
 181ed2c:	e0ffec17 	ldw	r3,-80(fp)
 181ed30:	10c00015 	stw	r3,0(r2)
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 181ed34:	e0bfec17 	ldw	r2,-80(fp)
 181ed38:	e0bfed15 	stw	r2,-76(fp)

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 181ed3c:	e0ffef0b 	ldhu	r3,-68(fp)
 181ed40:	e0bff78b 	ldhu	r2,-34(fp)
 181ed44:	1885883a 	add	r2,r3,r2
 181ed48:	e0bfef0d 	sth	r2,-68(fp)
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 181ed4c:	e0ffef0b 	ldhu	r3,-68(fp)
 181ed50:	e0bffe0b 	ldhu	r2,-8(fp)
 181ed54:	18bf6336 	bltu	r3,r2,181eae4 <__alt_mem_mem_0+0xff7feae4>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 181ed58:	e0bff00b 	ldhu	r2,-64(fp)
 181ed5c:	10003d26 	beq	r2,zero,181ee54 <tcp_write+0x70c>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 181ed60:	e0bfeb17 	ldw	r2,-84(fp)
 181ed64:	10800117 	ldw	r2,4(r2)
 181ed68:	e0bff315 	stw	r2,-52(fp)
 181ed6c:	00003006 	br	181ee30 <tcp_write+0x6e8>
      p->tot_len += oversize_used;
 181ed70:	e0bff317 	ldw	r2,-52(fp)
 181ed74:	10c0020b 	ldhu	r3,8(r2)
 181ed78:	e0bff00b 	ldhu	r2,-64(fp)
 181ed7c:	1885883a 	add	r2,r3,r2
 181ed80:	1007883a 	mov	r3,r2
 181ed84:	e0bff317 	ldw	r2,-52(fp)
 181ed88:	10c0020d 	sth	r3,8(r2)
      if (p->next == NULL) {
 181ed8c:	e0bff317 	ldw	r2,-52(fp)
 181ed90:	10800017 	ldw	r2,0(r2)
 181ed94:	1000231e 	bne	r2,zero,181ee24 <tcp_write+0x6dc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 181ed98:	e0bff317 	ldw	r2,-52(fp)
 181ed9c:	10c00117 	ldw	r3,4(r2)
 181eda0:	e0bff317 	ldw	r2,-52(fp)
 181eda4:	1080028b 	ldhu	r2,10(r2)
 181eda8:	10bfffcc 	andi	r2,r2,65535
 181edac:	1885883a 	add	r2,r3,r2
 181edb0:	e0fff00b 	ldhu	r3,-64(fp)
 181edb4:	180d883a 	mov	r6,r3
 181edb8:	e17ffd17 	ldw	r5,-12(fp)
 181edbc:	1009883a 	mov	r4,r2
 181edc0:	18318b80 	call	18318b8 <lwip_chksum_copy>
 181edc4:	10ffffcc 	andi	r3,r2,65535
 181edc8:	e13ff00b 	ldhu	r4,-64(fp)
 181edcc:	e0bfeb17 	ldw	r2,-84(fp)
 181edd0:	11400284 	addi	r5,r2,10
 181edd4:	e0bfeb17 	ldw	r2,-84(fp)
 181edd8:	10800304 	addi	r2,r2,12
 181eddc:	100f883a 	mov	r7,r2
 181ede0:	280d883a 	mov	r6,r5
 181ede4:	200b883a 	mov	r5,r4
 181ede8:	1809883a 	mov	r4,r3
 181edec:	181e56c0 	call	181e56c <tcp_seg_add_chksum>
 181edf0:	e0bfeb17 	ldw	r2,-84(fp)
 181edf4:	10800343 	ldbu	r2,13(r2)
 181edf8:	10800114 	ori	r2,r2,4
 181edfc:	1007883a 	mov	r3,r2
 181ee00:	e0bfeb17 	ldw	r2,-84(fp)
 181ee04:	10c00345 	stb	r3,13(r2)
        p->len += oversize_used;
 181ee08:	e0bff317 	ldw	r2,-52(fp)
 181ee0c:	10c0028b 	ldhu	r3,10(r2)
 181ee10:	e0bff00b 	ldhu	r2,-64(fp)
 181ee14:	1885883a 	add	r2,r3,r2
 181ee18:	1007883a 	mov	r3,r2
 181ee1c:	e0bff317 	ldw	r2,-52(fp)
 181ee20:	10c0028d 	sth	r3,10(r2)
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 181ee24:	e0bff317 	ldw	r2,-52(fp)
 181ee28:	10800017 	ldw	r2,0(r2)
 181ee2c:	e0bff315 	stw	r2,-52(fp)
 181ee30:	e0bff317 	ldw	r2,-52(fp)
 181ee34:	103fce1e 	bne	r2,zero,181ed70 <__alt_mem_mem_0+0xff7fed70>
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
        p->len += oversize_used;
      }
    }
    last_unsent->len += oversize_used;
 181ee38:	e0bfeb17 	ldw	r2,-84(fp)
 181ee3c:	10c0020b 	ldhu	r3,8(r2)
 181ee40:	e0bff00b 	ldhu	r2,-64(fp)
 181ee44:	1885883a 	add	r2,r3,r2
 181ee48:	1007883a 	mov	r3,r2
 181ee4c:	e0bfeb17 	ldw	r2,-84(fp)
 181ee50:	10c0020d 	sth	r3,8(r2)
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 181ee54:	e0fff90b 	ldhu	r3,-28(fp)
 181ee58:	e0bffc17 	ldw	r2,-16(fp)
 181ee5c:	10c01b8d 	sth	r3,110(r2)
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
 181ee60:	e0bfea17 	ldw	r2,-88(fp)
 181ee64:	10002126 	beq	r2,zero,181eeec <tcp_write+0x7a4>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 181ee68:	e0bfeb17 	ldw	r2,-84(fp)
 181ee6c:	10800117 	ldw	r2,4(r2)
 181ee70:	e17fea17 	ldw	r5,-88(fp)
 181ee74:	1009883a 	mov	r4,r2
 181ee78:	181aad80 	call	181aad8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 181ee7c:	e0bfeb17 	ldw	r2,-84(fp)
 181ee80:	10c0020b 	ldhu	r3,8(r2)
 181ee84:	e0bfea17 	ldw	r2,-88(fp)
 181ee88:	1080020b 	ldhu	r2,8(r2)
 181ee8c:	1885883a 	add	r2,r3,r2
 181ee90:	1007883a 	mov	r3,r2
 181ee94:	e0bfeb17 	ldw	r2,-84(fp)
 181ee98:	10c0020d 	sth	r3,8(r2)
#if TCP_CHECKSUM_ON_COPY
    if (concat_chksummed) {
 181ee9c:	e0bff08b 	ldhu	r2,-62(fp)
 181eea0:	10001226 	beq	r2,zero,181eeec <tcp_write+0x7a4>
      tcp_seg_add_chksum(concat_chksum, concat_chksummed, &last_unsent->chksum,
 181eea4:	e0bff98b 	ldhu	r2,-26(fp)
 181eea8:	10ffffcc 	andi	r3,r2,65535
 181eeac:	e13ff08b 	ldhu	r4,-62(fp)
 181eeb0:	e0bfeb17 	ldw	r2,-84(fp)
 181eeb4:	11400284 	addi	r5,r2,10
 181eeb8:	e0bfeb17 	ldw	r2,-84(fp)
 181eebc:	10800304 	addi	r2,r2,12
 181eec0:	100f883a 	mov	r7,r2
 181eec4:	280d883a 	mov	r6,r5
 181eec8:	200b883a 	mov	r5,r4
 181eecc:	1809883a 	mov	r4,r3
 181eed0:	181e56c0 	call	181e56c <tcp_seg_add_chksum>
        &last_unsent->chksum_swapped);
      last_unsent->flags |= TF_SEG_DATA_CHECKSUMMED;
 181eed4:	e0bfeb17 	ldw	r2,-84(fp)
 181eed8:	10800343 	ldbu	r2,13(r2)
 181eedc:	10800114 	ori	r2,r2,4
 181eee0:	1007883a 	mov	r3,r2
 181eee4:	e0bfeb17 	ldw	r2,-84(fp)
 181eee8:	10c00345 	stb	r3,13(r2)

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 181eeec:	e0bfeb17 	ldw	r2,-84(fp)
 181eef0:	1000041e 	bne	r2,zero,181ef04 <tcp_write+0x7bc>
    pcb->unsent = queue;
 181eef4:	e0bffc17 	ldw	r2,-16(fp)
 181eef8:	e0ffee17 	ldw	r3,-72(fp)
 181eefc:	10c01c15 	stw	r3,112(r2)
 181ef00:	00000306 	br	181ef10 <tcp_write+0x7c8>
  } else {
    last_unsent->next = queue;
 181ef04:	e0bfeb17 	ldw	r2,-84(fp)
 181ef08:	e0ffee17 	ldw	r3,-72(fp)
 181ef0c:	10c00015 	stw	r3,0(r2)
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 181ef10:	e0bffc17 	ldw	r2,-16(fp)
 181ef14:	10c01817 	ldw	r3,96(r2)
 181ef18:	e0bffe0b 	ldhu	r2,-8(fp)
 181ef1c:	1887883a 	add	r3,r3,r2
 181ef20:	e0bffc17 	ldw	r2,-16(fp)
 181ef24:	10c01815 	stw	r3,96(r2)
  pcb->snd_buf -= len;
 181ef28:	e0bffc17 	ldw	r2,-16(fp)
 181ef2c:	10c01a8b 	ldhu	r3,106(r2)
 181ef30:	e0bffe0b 	ldhu	r2,-8(fp)
 181ef34:	1885c83a 	sub	r2,r3,r2
 181ef38:	1007883a 	mov	r3,r2
 181ef3c:	e0bffc17 	ldw	r2,-16(fp)
 181ef40:	10c01a8d 	sth	r3,106(r2)
  pcb->snd_queuelen = queuelen;
 181ef44:	e0bffc17 	ldw	r2,-16(fp)
 181ef48:	e0ffef8b 	ldhu	r3,-66(fp)
 181ef4c:	10c01b0d 	sth	r3,108(r2)
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 181ef50:	e0bfec17 	ldw	r2,-80(fp)
 181ef54:	10002126 	beq	r2,zero,181efdc <tcp_write+0x894>
 181ef58:	e0bfec17 	ldw	r2,-80(fp)
 181ef5c:	10800417 	ldw	r2,16(r2)
 181ef60:	10001e26 	beq	r2,zero,181efdc <tcp_write+0x894>
 181ef64:	e0bfff03 	ldbu	r2,-4(fp)
 181ef68:	1080008c 	andi	r2,r2,2
 181ef6c:	10001b1e 	bne	r2,zero,181efdc <tcp_write+0x894>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 181ef70:	e0bfec17 	ldw	r2,-80(fp)
 181ef74:	10800417 	ldw	r2,16(r2)
 181ef78:	e0ffec17 	ldw	r3,-80(fp)
 181ef7c:	18c00417 	ldw	r3,16(r3)
 181ef80:	19000303 	ldbu	r4,12(r3)
 181ef84:	18c00343 	ldbu	r3,13(r3)
 181ef88:	1806923a 	slli	r3,r3,8
 181ef8c:	1906b03a 	or	r3,r3,r4
 181ef90:	18c20014 	ori	r3,r3,2048
 181ef94:	180d883a 	mov	r6,r3
 181ef98:	30ffffcc 	andi	r3,r6,65535
 181ef9c:	19403fcc 	andi	r5,r3,255
 181efa0:	10c00303 	ldbu	r3,12(r2)
 181efa4:	1806703a 	and	r3,r3,zero
 181efa8:	1809883a 	mov	r4,r3
 181efac:	2807883a 	mov	r3,r5
 181efb0:	20c6b03a 	or	r3,r4,r3
 181efb4:	10c00305 	stb	r3,12(r2)
 181efb8:	30ffffcc 	andi	r3,r6,65535
 181efbc:	1806d23a 	srli	r3,r3,8
 181efc0:	197fffcc 	andi	r5,r3,65535
 181efc4:	10c00343 	ldbu	r3,13(r2)
 181efc8:	1806703a 	and	r3,r3,zero
 181efcc:	1809883a 	mov	r4,r3
 181efd0:	2807883a 	mov	r3,r5
 181efd4:	20c6b03a 	or	r3,r4,r3
 181efd8:	10c00345 	stb	r3,13(r2)
  }

  return ERR_OK;
 181efdc:	0005883a 	mov	r2,zero
 181efe0:	00002006 	br	181f064 <tcp_write+0x91c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2,
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
 181efe4:	0001883a 	nop
 181efe8:	00000706 	br	181f008 <tcp_write+0x8c0>
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2,
                      ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
          goto memerr;
 181efec:	0001883a 	nop
 181eff0:	00000506 	br	181f008 <tcp_write+0x8c0>
    if (apiflags & TCP_WRITE_FLAG_COPY) {
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
 181eff4:	0001883a 	nop
 181eff8:	00000306 	br	181f008 <tcp_write+0x8c0>
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
        goto memerr;
 181effc:	0001883a 	nop
 181f000:	00000106 	br	181f008 <tcp_write+0x8c0>
      pbuf_free(p);
      goto memerr;
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
      goto memerr;
 181f004:	0001883a 	nop
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 181f008:	e0bffc17 	ldw	r2,-16(fp)
 181f00c:	10c00883 	ldbu	r3,34(r2)
 181f010:	00bfe004 	movi	r2,-128
 181f014:	1884b03a 	or	r2,r3,r2
 181f018:	1007883a 	mov	r3,r2
 181f01c:	e0bffc17 	ldw	r2,-16(fp)
 181f020:	10c00885 	stb	r3,34(r2)
  TCP_STATS_INC(tcp.memerr);
 181f024:	008061f4 	movhi	r2,391
 181f028:	10a77104 	addi	r2,r2,-25148
 181f02c:	10804e17 	ldw	r2,312(r2)
 181f030:	10c00044 	addi	r3,r2,1
 181f034:	008061f4 	movhi	r2,391
 181f038:	10a77104 	addi	r2,r2,-25148
 181f03c:	10c04e15 	stw	r3,312(r2)

  if (concat_p != NULL) {
 181f040:	e0bfea17 	ldw	r2,-88(fp)
 181f044:	10000226 	beq	r2,zero,181f050 <tcp_write+0x908>
    pbuf_free(concat_p);
 181f048:	e13fea17 	ldw	r4,-88(fp)
 181f04c:	181a9040 	call	181a904 <pbuf_free>
  }
  if (queue != NULL) {
 181f050:	e0bfee17 	ldw	r2,-72(fp)
 181f054:	10000226 	beq	r2,zero,181f060 <tcp_write+0x918>
    tcp_segs_free(queue);
 181f058:	e13fee17 	ldw	r4,-72(fp)
 181f05c:	181d1580 	call	181d158 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 181f060:	00bfffc4 	movi	r2,-1
}
 181f064:	e037883a 	mov	sp,fp
 181f068:	dfc00117 	ldw	ra,4(sp)
 181f06c:	df000017 	ldw	fp,0(sp)
 181f070:	dec00204 	addi	sp,sp,8
 181f074:	f800283a 	ret

0181f078 <tcp_enqueue_flags>:
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 181f078:	defff604 	addi	sp,sp,-40
 181f07c:	dfc00915 	stw	ra,36(sp)
 181f080:	df000815 	stw	fp,32(sp)
 181f084:	df000804 	addi	fp,sp,32
 181f088:	e13ffe15 	stw	r4,-8(fp)
 181f08c:	2805883a 	mov	r2,r5
 181f090:	e0bfff05 	stb	r2,-4(fp)
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 181f094:	e03ff905 	stb	zero,-28(fp)
  u8_t optlen = 0;
 181f098:	e03ffb05 	stb	zero,-20(fp)

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 181f09c:	e0bffe17 	ldw	r2,-8(fp)
 181f0a0:	10801b0b 	ldhu	r2,108(r2)
 181f0a4:	10bfffcc 	andi	r2,r2,65535
 181f0a8:	10800228 	cmpgeui	r2,r2,8
 181f0ac:	1000051e 	bne	r2,zero,181f0c4 <tcp_enqueue_flags+0x4c>
 181f0b0:	e0bffe17 	ldw	r2,-8(fp)
 181f0b4:	10801b0b 	ldhu	r2,108(r2)
 181f0b8:	10bfffcc 	andi	r2,r2,65535
 181f0bc:	10bfff70 	cmpltui	r2,r2,65533
 181f0c0:	1000101e 	bne	r2,zero,181f104 <tcp_enqueue_flags+0x8c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 181f0c4:	008061f4 	movhi	r2,391
 181f0c8:	10a77104 	addi	r2,r2,-25148
 181f0cc:	10804e17 	ldw	r2,312(r2)
 181f0d0:	10c00044 	addi	r3,r2,1
 181f0d4:	008061f4 	movhi	r2,391
 181f0d8:	10a77104 	addi	r2,r2,-25148
 181f0dc:	10c04e15 	stw	r3,312(r2)
    pcb->flags |= TF_NAGLEMEMERR;
 181f0e0:	e0bffe17 	ldw	r2,-8(fp)
 181f0e4:	10c00883 	ldbu	r3,34(r2)
 181f0e8:	00bfe004 	movi	r2,-128
 181f0ec:	1884b03a 	or	r2,r3,r2
 181f0f0:	1007883a 	mov	r3,r2
 181f0f4:	e0bffe17 	ldw	r2,-8(fp)
 181f0f8:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
 181f0fc:	00bfffc4 	movi	r2,-1
 181f100:	00009206 	br	181f34c <tcp_enqueue_flags+0x2d4>
  }

  if (flags & TCP_SYN) {
 181f104:	e0bfff03 	ldbu	r2,-4(fp)
 181f108:	1080008c 	andi	r2,r2,2
 181f10c:	10000226 	beq	r2,zero,181f118 <tcp_enqueue_flags+0xa0>
    optflags = TF_SEG_OPTS_MSS;
 181f110:	00800044 	movi	r2,1
 181f114:	e0bff905 	stb	r2,-28(fp)
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 181f118:	e0bff903 	ldbu	r2,-28(fp)
 181f11c:	1080004c 	andi	r2,r2,1
 181f120:	10000226 	beq	r2,zero,181f12c <tcp_enqueue_flags+0xb4>
 181f124:	00c00104 	movi	r3,4
 181f128:	00000106 	br	181f130 <tcp_enqueue_flags+0xb8>
 181f12c:	0007883a 	mov	r3,zero
 181f130:	e0bff903 	ldbu	r2,-28(fp)
 181f134:	1080008c 	andi	r2,r2,2
 181f138:	10000226 	beq	r2,zero,181f144 <tcp_enqueue_flags+0xcc>
 181f13c:	00800304 	movi	r2,12
 181f140:	00000106 	br	181f148 <tcp_enqueue_flags+0xd0>
 181f144:	0005883a 	mov	r2,zero
 181f148:	1885883a 	add	r2,r3,r2
 181f14c:	e0bffb05 	stb	r2,-20(fp)

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
 181f150:	e0bffe17 	ldw	r2,-8(fp)
 181f154:	10801a8b 	ldhu	r2,106(r2)
 181f158:	10bfffcc 	andi	r2,r2,65535
 181f15c:	1000091e 	bne	r2,zero,181f184 <tcp_enqueue_flags+0x10c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
 181f160:	008061f4 	movhi	r2,391
 181f164:	10a77104 	addi	r2,r2,-25148
 181f168:	10804e17 	ldw	r2,312(r2)
 181f16c:	10c00044 	addi	r3,r2,1
 181f170:	008061f4 	movhi	r2,391
 181f174:	10a77104 	addi	r2,r2,-25148
 181f178:	10c04e15 	stw	r3,312(r2)
    return ERR_MEM;
 181f17c:	00bfffc4 	movi	r2,-1
 181f180:	00007206 	br	181f34c <tcp_enqueue_flags+0x2d4>
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 181f184:	e0bffb03 	ldbu	r2,-20(fp)
 181f188:	000d883a 	mov	r6,zero
 181f18c:	100b883a 	mov	r5,r2
 181f190:	0009883a 	mov	r4,zero
 181f194:	181a1480 	call	181a148 <pbuf_alloc>
 181f198:	e0bffc15 	stw	r2,-16(fp)
 181f19c:	e0bffc17 	ldw	r2,-16(fp)
 181f1a0:	1000101e 	bne	r2,zero,181f1e4 <tcp_enqueue_flags+0x16c>
    pcb->flags |= TF_NAGLEMEMERR;
 181f1a4:	e0bffe17 	ldw	r2,-8(fp)
 181f1a8:	10c00883 	ldbu	r3,34(r2)
 181f1ac:	00bfe004 	movi	r2,-128
 181f1b0:	1884b03a 	or	r2,r3,r2
 181f1b4:	1007883a 	mov	r3,r2
 181f1b8:	e0bffe17 	ldw	r2,-8(fp)
 181f1bc:	10c00885 	stb	r3,34(r2)
    TCP_STATS_INC(tcp.memerr);
 181f1c0:	008061f4 	movhi	r2,391
 181f1c4:	10a77104 	addi	r2,r2,-25148
 181f1c8:	10804e17 	ldw	r2,312(r2)
 181f1cc:	10c00044 	addi	r3,r2,1
 181f1d0:	008061f4 	movhi	r2,391
 181f1d4:	10a77104 	addi	r2,r2,-25148
 181f1d8:	10c04e15 	stw	r3,312(r2)
    return ERR_MEM;
 181f1dc:	00bfffc4 	movi	r2,-1
 181f1e0:	00005a06 	br	181f34c <tcp_enqueue_flags+0x2d4>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 181f1e4:	e0ffff03 	ldbu	r3,-4(fp)
 181f1e8:	e0bffe17 	ldw	r2,-8(fp)
 181f1ec:	11001817 	ldw	r4,96(r2)
 181f1f0:	e0bff903 	ldbu	r2,-28(fp)
 181f1f4:	d8800015 	stw	r2,0(sp)
 181f1f8:	200f883a 	mov	r7,r4
 181f1fc:	180d883a 	mov	r6,r3
 181f200:	e17ffc17 	ldw	r5,-16(fp)
 181f204:	e13ffe17 	ldw	r4,-8(fp)
 181f208:	181e0ac0 	call	181e0ac <tcp_create_segment>
 181f20c:	e0bffd15 	stw	r2,-12(fp)
 181f210:	e0bffd17 	ldw	r2,-12(fp)
 181f214:	1000101e 	bne	r2,zero,181f258 <tcp_enqueue_flags+0x1e0>
    pcb->flags |= TF_NAGLEMEMERR;
 181f218:	e0bffe17 	ldw	r2,-8(fp)
 181f21c:	10c00883 	ldbu	r3,34(r2)
 181f220:	00bfe004 	movi	r2,-128
 181f224:	1884b03a 	or	r2,r3,r2
 181f228:	1007883a 	mov	r3,r2
 181f22c:	e0bffe17 	ldw	r2,-8(fp)
 181f230:	10c00885 	stb	r3,34(r2)
    TCP_STATS_INC(tcp.memerr);
 181f234:	008061f4 	movhi	r2,391
 181f238:	10a77104 	addi	r2,r2,-25148
 181f23c:	10804e17 	ldw	r2,312(r2)
 181f240:	10c00044 	addi	r3,r2,1
 181f244:	008061f4 	movhi	r2,391
 181f248:	10a77104 	addi	r2,r2,-25148
 181f24c:	10c04e15 	stw	r3,312(r2)
    return ERR_MEM;
 181f250:	00bfffc4 	movi	r2,-1
 181f254:	00003d06 	br	181f34c <tcp_enqueue_flags+0x2d4>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 181f258:	e0bffe17 	ldw	r2,-8(fp)
 181f25c:	10801c17 	ldw	r2,112(r2)
 181f260:	1000041e 	bne	r2,zero,181f274 <tcp_enqueue_flags+0x1fc>
    pcb->unsent = seg;
 181f264:	e0bffe17 	ldw	r2,-8(fp)
 181f268:	e0fffd17 	ldw	r3,-12(fp)
 181f26c:	10c01c15 	stw	r3,112(r2)
 181f270:	00000d06 	br	181f2a8 <tcp_enqueue_flags+0x230>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 181f274:	e0bffe17 	ldw	r2,-8(fp)
 181f278:	10801c17 	ldw	r2,112(r2)
 181f27c:	e0bffa15 	stw	r2,-24(fp)
 181f280:	00000306 	br	181f290 <tcp_enqueue_flags+0x218>
 181f284:	e0bffa17 	ldw	r2,-24(fp)
 181f288:	10800017 	ldw	r2,0(r2)
 181f28c:	e0bffa15 	stw	r2,-24(fp)
 181f290:	e0bffa17 	ldw	r2,-24(fp)
 181f294:	10800017 	ldw	r2,0(r2)
 181f298:	103ffa1e 	bne	r2,zero,181f284 <__alt_mem_mem_0+0xff7ff284>
    useg->next = seg;
 181f29c:	e0bffa17 	ldw	r2,-24(fp)
 181f2a0:	e0fffd17 	ldw	r3,-12(fp)
 181f2a4:	10c00015 	stw	r3,0(r2)
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 181f2a8:	e0bffe17 	ldw	r2,-8(fp)
 181f2ac:	10001b8d 	sth	zero,110(r2)
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 181f2b0:	e0bfff03 	ldbu	r2,-4(fp)
 181f2b4:	1080008c 	andi	r2,r2,2
 181f2b8:	1000031e 	bne	r2,zero,181f2c8 <tcp_enqueue_flags+0x250>
 181f2bc:	e0bfff03 	ldbu	r2,-4(fp)
 181f2c0:	1080004c 	andi	r2,r2,1
 181f2c4:	10000b26 	beq	r2,zero,181f2f4 <tcp_enqueue_flags+0x27c>
    pcb->snd_lbb++;
 181f2c8:	e0bffe17 	ldw	r2,-8(fp)
 181f2cc:	10801817 	ldw	r2,96(r2)
 181f2d0:	10c00044 	addi	r3,r2,1
 181f2d4:	e0bffe17 	ldw	r2,-8(fp)
 181f2d8:	10c01815 	stw	r3,96(r2)
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
 181f2dc:	e0bffe17 	ldw	r2,-8(fp)
 181f2e0:	10801a8b 	ldhu	r2,106(r2)
 181f2e4:	10bfffc4 	addi	r2,r2,-1
 181f2e8:	1007883a 	mov	r3,r2
 181f2ec:	e0bffe17 	ldw	r2,-8(fp)
 181f2f0:	10c01a8d 	sth	r3,106(r2)
  }
  if (flags & TCP_FIN) {
 181f2f4:	e0bfff03 	ldbu	r2,-4(fp)
 181f2f8:	1080004c 	andi	r2,r2,1
 181f2fc:	10000626 	beq	r2,zero,181f318 <tcp_enqueue_flags+0x2a0>
    pcb->flags |= TF_FIN;
 181f300:	e0bffe17 	ldw	r2,-8(fp)
 181f304:	10800883 	ldbu	r2,34(r2)
 181f308:	10800814 	ori	r2,r2,32
 181f30c:	1007883a 	mov	r3,r2
 181f310:	e0bffe17 	ldw	r2,-8(fp)
 181f314:	10c00885 	stb	r3,34(r2)
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 181f318:	e0bffd17 	ldw	r2,-12(fp)
 181f31c:	10800117 	ldw	r2,4(r2)
 181f320:	1009883a 	mov	r4,r2
 181f324:	181aa380 	call	181aa38 <pbuf_clen>
 181f328:	1009883a 	mov	r4,r2
 181f32c:	e0bffe17 	ldw	r2,-8(fp)
 181f330:	10c01b0b 	ldhu	r3,108(r2)
 181f334:	20803fcc 	andi	r2,r4,255
 181f338:	1885883a 	add	r2,r3,r2
 181f33c:	1007883a 	mov	r3,r2
 181f340:	e0bffe17 	ldw	r2,-8(fp)
 181f344:	10c01b0d 	sth	r3,108(r2)
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 181f348:	0005883a 	mov	r2,zero
}
 181f34c:	e037883a 	mov	sp,fp
 181f350:	dfc00117 	ldw	ra,4(sp)
 181f354:	df000017 	ldw	fp,0(sp)
 181f358:	dec00204 	addi	sp,sp,8
 181f35c:	f800283a 	ret

0181f360 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 181f360:	defff704 	addi	sp,sp,-36
 181f364:	dfc00815 	stw	ra,32(sp)
 181f368:	df000715 	stw	fp,28(sp)
 181f36c:	df000704 	addi	fp,sp,28
 181f370:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  u8_t optlen = 0;
 181f374:	e03ffc05 	stb	zero,-16(fp)
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
 181f378:	e13ffc03 	ldbu	r4,-16(fp)
 181f37c:	e0bfff17 	ldw	r2,-4(fp)
 181f380:	10801517 	ldw	r2,84(r2)
 181f384:	1006d63a 	srli	r3,r2,24
 181f388:	e0bfff17 	ldw	r2,-4(fp)
 181f38c:	10801517 	ldw	r2,84(r2)
 181f390:	1004d23a 	srli	r2,r2,8
 181f394:	10bfc00c 	andi	r2,r2,65280
 181f398:	1886b03a 	or	r3,r3,r2
 181f39c:	e0bfff17 	ldw	r2,-4(fp)
 181f3a0:	10801517 	ldw	r2,84(r2)
 181f3a4:	10bfc00c 	andi	r2,r2,65280
 181f3a8:	1004923a 	slli	r2,r2,8
 181f3ac:	1886b03a 	or	r3,r3,r2
 181f3b0:	e0bfff17 	ldw	r2,-4(fp)
 181f3b4:	10801517 	ldw	r2,84(r2)
 181f3b8:	1004963a 	slli	r2,r2,24
 181f3bc:	1884b03a 	or	r2,r3,r2
 181f3c0:	100f883a 	mov	r7,r2
 181f3c4:	000d883a 	mov	r6,zero
 181f3c8:	200b883a 	mov	r5,r4
 181f3cc:	e13fff17 	ldw	r4,-4(fp)
 181f3d0:	181db7c0 	call	181db7c <tcp_output_alloc_header>
 181f3d4:	e0bffd15 	stw	r2,-12(fp)
  if (p == NULL) {
 181f3d8:	e0bffd17 	ldw	r2,-12(fp)
 181f3dc:	1000021e 	bne	r2,zero,181f3e8 <tcp_send_empty_ack+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 181f3e0:	00bfff84 	movi	r2,-2
 181f3e4:	00004006 	br	181f4e8 <tcp_send_empty_ack+0x188>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 181f3e8:	e0bffd17 	ldw	r2,-12(fp)
 181f3ec:	10800117 	ldw	r2,4(r2)
 181f3f0:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 181f3f4:	e0bfff17 	ldw	r2,-4(fp)
 181f3f8:	10c00883 	ldbu	r3,34(r2)
 181f3fc:	00bfff04 	movi	r2,-4
 181f400:	1884703a 	and	r2,r3,r2
 181f404:	1007883a 	mov	r3,r2
 181f408:	e0bfff17 	ldw	r2,-4(fp)
 181f40c:	10c00885 	stb	r3,34(r2)
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
 181f410:	e0ffff17 	ldw	r3,-4(fp)
 181f414:	e0bfff17 	ldw	r2,-4(fp)
 181f418:	11000104 	addi	r4,r2,4
        IP_PROTO_TCP, p->tot_len);
 181f41c:	e0bffd17 	ldw	r2,-12(fp)
 181f420:	1080020b 	ldhu	r2,8(r2)
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
 181f424:	10bfffcc 	andi	r2,r2,65535
 181f428:	d8800015 	stw	r2,0(sp)
 181f42c:	01c00184 	movi	r7,6
 181f430:	200d883a 	mov	r6,r4
 181f434:	180b883a 	mov	r5,r3
 181f438:	e13ffd17 	ldw	r4,-12(fp)
 181f43c:	18313300 	call	1831330 <inet_chksum_pseudo>
 181f440:	100d883a 	mov	r6,r2
 181f444:	e0bffe17 	ldw	r2,-8(fp)
 181f448:	30ffffcc 	andi	r3,r6,65535
 181f44c:	19403fcc 	andi	r5,r3,255
 181f450:	10c00403 	ldbu	r3,16(r2)
 181f454:	1806703a 	and	r3,r3,zero
 181f458:	1809883a 	mov	r4,r3
 181f45c:	2807883a 	mov	r3,r5
 181f460:	20c6b03a 	or	r3,r4,r3
 181f464:	10c00405 	stb	r3,16(r2)
 181f468:	30ffffcc 	andi	r3,r6,65535
 181f46c:	1806d23a 	srli	r3,r3,8
 181f470:	197fffcc 	andi	r5,r3,65535
 181f474:	10c00443 	ldbu	r3,17(r2)
 181f478:	1806703a 	and	r3,r3,zero
 181f47c:	1809883a 	mov	r4,r3
 181f480:	2807883a 	mov	r3,r5
 181f484:	20c6b03a 	or	r3,r4,r3
 181f488:	10c00445 	stb	r3,17(r2)
        IP_PROTO_TCP, p->tot_len);
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 181f48c:	e13fff17 	ldw	r4,-4(fp)
 181f490:	e0bfff17 	ldw	r2,-4(fp)
 181f494:	11400104 	addi	r5,r2,4
 181f498:	e0bfff17 	ldw	r2,-4(fp)
 181f49c:	10800283 	ldbu	r2,10(r2)
 181f4a0:	11803fcc 	andi	r6,r2,255
 181f4a4:	e0bfff17 	ldw	r2,-4(fp)
 181f4a8:	10800243 	ldbu	r2,9(r2)
 181f4ac:	10803fcc 	andi	r2,r2,255
 181f4b0:	e0ffff17 	ldw	r3,-4(fp)
 181f4b4:	18c002c4 	addi	r3,r3,11
 181f4b8:	d8c00215 	stw	r3,8(sp)
 181f4bc:	00c00184 	movi	r3,6
 181f4c0:	d8c00115 	stw	r3,4(sp)
 181f4c4:	d8800015 	stw	r2,0(sp)
 181f4c8:	300f883a 	mov	r7,r6
 181f4cc:	280d883a 	mov	r6,r5
 181f4d0:	200b883a 	mov	r5,r4
 181f4d4:	e13ffd17 	ldw	r4,-12(fp)
 181f4d8:	183263c0 	call	183263c <ip_output_hinted>
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
 181f4dc:	e13ffd17 	ldw	r4,-12(fp)
 181f4e0:	181a9040 	call	181a904 <pbuf_free>

  return ERR_OK;
 181f4e4:	0005883a 	mov	r2,zero
}
 181f4e8:	e037883a 	mov	sp,fp
 181f4ec:	dfc00117 	ldw	ra,4(sp)
 181f4f0:	df000017 	ldw	fp,0(sp)
 181f4f4:	dec00204 	addi	sp,sp,8
 181f4f8:	f800283a 	ret

0181f4fc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 181f4fc:	defff804 	addi	sp,sp,-32
 181f500:	dfc00715 	stw	ra,28(sp)
 181f504:	df000615 	stw	fp,24(sp)
 181f508:	df000604 	addi	fp,sp,24
 181f50c:	e13fff15 	stw	r4,-4(fp)

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 181f510:	d0e81e17 	ldw	r3,-24456(gp)
 181f514:	e0bfff17 	ldw	r2,-4(fp)
 181f518:	1880021e 	bne	r3,r2,181f524 <tcp_output+0x28>
    return ERR_OK;
 181f51c:	0005883a 	mov	r2,zero
 181f520:	00029c06 	br	181ff94 <tcp_output+0xa98>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 181f524:	e0bfff17 	ldw	r2,-4(fp)
 181f528:	10c0140b 	ldhu	r3,80(r2)
 181f52c:	e0bfff17 	ldw	r2,-4(fp)
 181f530:	1140190b 	ldhu	r5,100(r2)
 181f534:	1809883a 	mov	r4,r3
 181f538:	20bfffcc 	andi	r2,r4,65535
 181f53c:	28ffffcc 	andi	r3,r5,65535
 181f540:	1880012e 	bgeu	r3,r2,181f548 <tcp_output+0x4c>
 181f544:	2809883a 	mov	r4,r5
 181f548:	20bfffcc 	andi	r2,r4,65535
 181f54c:	e0bffd15 	stw	r2,-12(fp)

  seg = pcb->unsent;
 181f550:	e0bfff17 	ldw	r2,-4(fp)
 181f554:	10801c17 	ldw	r2,112(r2)
 181f558:	e0bffa15 	stw	r2,-24(fp)
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 181f55c:	e0bfff17 	ldw	r2,-4(fp)
 181f560:	10800883 	ldbu	r2,34(r2)
 181f564:	10803fcc 	andi	r2,r2,255
 181f568:	1080008c 	andi	r2,r2,2
 181f56c:	10004726 	beq	r2,zero,181f68c <tcp_output+0x190>
 181f570:	e0bffa17 	ldw	r2,-24(fp)
 181f574:	10004226 	beq	r2,zero,181f680 <tcp_output+0x184>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 181f578:	e0bffa17 	ldw	r2,-24(fp)
 181f57c:	10800417 	ldw	r2,16(r2)
 181f580:	10c00103 	ldbu	r3,4(r2)
 181f584:	11000143 	ldbu	r4,5(r2)
 181f588:	2008923a 	slli	r4,r4,8
 181f58c:	20c6b03a 	or	r3,r4,r3
 181f590:	11000183 	ldbu	r4,6(r2)
 181f594:	2008943a 	slli	r4,r4,16
 181f598:	20c6b03a 	or	r3,r4,r3
 181f59c:	108001c3 	ldbu	r2,7(r2)
 181f5a0:	1004963a 	slli	r2,r2,24
 181f5a4:	10c4b03a 	or	r2,r2,r3
 181f5a8:	1006d63a 	srli	r3,r2,24
 181f5ac:	e0bffa17 	ldw	r2,-24(fp)
 181f5b0:	10800417 	ldw	r2,16(r2)
 181f5b4:	11000103 	ldbu	r4,4(r2)
 181f5b8:	11400143 	ldbu	r5,5(r2)
 181f5bc:	280a923a 	slli	r5,r5,8
 181f5c0:	2908b03a 	or	r4,r5,r4
 181f5c4:	11400183 	ldbu	r5,6(r2)
 181f5c8:	280a943a 	slli	r5,r5,16
 181f5cc:	2908b03a 	or	r4,r5,r4
 181f5d0:	108001c3 	ldbu	r2,7(r2)
 181f5d4:	1004963a 	slli	r2,r2,24
 181f5d8:	1104b03a 	or	r2,r2,r4
 181f5dc:	1004d23a 	srli	r2,r2,8
 181f5e0:	10bfc00c 	andi	r2,r2,65280
 181f5e4:	1886b03a 	or	r3,r3,r2
 181f5e8:	e0bffa17 	ldw	r2,-24(fp)
 181f5ec:	10800417 	ldw	r2,16(r2)
 181f5f0:	11000103 	ldbu	r4,4(r2)
 181f5f4:	11400143 	ldbu	r5,5(r2)
 181f5f8:	280a923a 	slli	r5,r5,8
 181f5fc:	2908b03a 	or	r4,r5,r4
 181f600:	11400183 	ldbu	r5,6(r2)
 181f604:	280a943a 	slli	r5,r5,16
 181f608:	2908b03a 	or	r4,r5,r4
 181f60c:	108001c3 	ldbu	r2,7(r2)
 181f610:	1004963a 	slli	r2,r2,24
 181f614:	1104b03a 	or	r2,r2,r4
 181f618:	10bfc00c 	andi	r2,r2,65280
 181f61c:	1004923a 	slli	r2,r2,8
 181f620:	1886b03a 	or	r3,r3,r2
 181f624:	e0bffa17 	ldw	r2,-24(fp)
 181f628:	10800417 	ldw	r2,16(r2)
 181f62c:	11000103 	ldbu	r4,4(r2)
 181f630:	11400143 	ldbu	r5,5(r2)
 181f634:	280a923a 	slli	r5,r5,8
 181f638:	2908b03a 	or	r4,r5,r4
 181f63c:	11400183 	ldbu	r5,6(r2)
 181f640:	280a943a 	slli	r5,r5,16
 181f644:	2908b03a 	or	r4,r5,r4
 181f648:	108001c3 	ldbu	r2,7(r2)
 181f64c:	1004963a 	slli	r2,r2,24
 181f650:	1104b03a 	or	r2,r2,r4
 181f654:	1004963a 	slli	r2,r2,24
 181f658:	1886b03a 	or	r3,r3,r2
 181f65c:	e0bfff17 	ldw	r2,-4(fp)
 181f660:	10801317 	ldw	r2,76(r2)
 181f664:	1887c83a 	sub	r3,r3,r2
 181f668:	e0bffa17 	ldw	r2,-24(fp)
 181f66c:	1080020b 	ldhu	r2,8(r2)
 181f670:	10bfffcc 	andi	r2,r2,65535
 181f674:	1885883a 	add	r2,r3,r2
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
 181f678:	e0fffd17 	ldw	r3,-12(fp)
 181f67c:	1880032e 	bgeu	r3,r2,181f68c <tcp_output+0x190>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 181f680:	e13fff17 	ldw	r4,-4(fp)
 181f684:	181f3600 	call	181f360 <tcp_send_empty_ack>
 181f688:	00024206 	br	181ff94 <tcp_output+0xa98>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 181f68c:	e0bfff17 	ldw	r2,-4(fp)
 181f690:	10801d17 	ldw	r2,116(r2)
 181f694:	e0bffb15 	stw	r2,-20(fp)
  if (useg != NULL) {
 181f698:	e0bffb17 	ldw	r2,-20(fp)
 181f69c:	1001eb26 	beq	r2,zero,181fe4c <tcp_output+0x950>
    for (; useg->next != NULL; useg = useg->next);
 181f6a0:	00000306 	br	181f6b0 <tcp_output+0x1b4>
 181f6a4:	e0bffb17 	ldw	r2,-20(fp)
 181f6a8:	10800017 	ldw	r2,0(r2)
 181f6ac:	e0bffb15 	stw	r2,-20(fp)
 181f6b0:	e0bffb17 	ldw	r2,-20(fp)
 181f6b4:	10800017 	ldw	r2,0(r2)
 181f6b8:	103ffa1e 	bne	r2,zero,181f6a4 <__alt_mem_mem_0+0xff7ff6a4>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 181f6bc:	0001e306 	br	181fe4c <tcp_output+0x950>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 181f6c0:	e0bfff17 	ldw	r2,-4(fp)
 181f6c4:	10801d17 	ldw	r2,116(r2)
 181f6c8:	10001d26 	beq	r2,zero,181f740 <tcp_output+0x244>
 181f6cc:	e0bfff17 	ldw	r2,-4(fp)
 181f6d0:	10800883 	ldbu	r2,34(r2)
 181f6d4:	10803fcc 	andi	r2,r2,255
 181f6d8:	1080110c 	andi	r2,r2,68
 181f6dc:	1000181e 	bne	r2,zero,181f740 <tcp_output+0x244>
 181f6e0:	e0bfff17 	ldw	r2,-4(fp)
 181f6e4:	10801c17 	ldw	r2,112(r2)
 181f6e8:	10000c26 	beq	r2,zero,181f71c <tcp_output+0x220>
 181f6ec:	e0bfff17 	ldw	r2,-4(fp)
 181f6f0:	10801c17 	ldw	r2,112(r2)
 181f6f4:	10800017 	ldw	r2,0(r2)
 181f6f8:	1000111e 	bne	r2,zero,181f740 <tcp_output+0x244>
 181f6fc:	e0bfff17 	ldw	r2,-4(fp)
 181f700:	10801c17 	ldw	r2,112(r2)
 181f704:	10c0020b 	ldhu	r3,8(r2)
 181f708:	e0bfff17 	ldw	r2,-4(fp)
 181f70c:	10800e8b 	ldhu	r2,58(r2)
 181f710:	18ffffcc 	andi	r3,r3,65535
 181f714:	10bfffcc 	andi	r2,r2,65535
 181f718:	1880092e 	bgeu	r3,r2,181f740 <tcp_output+0x244>
 181f71c:	e0bfff17 	ldw	r2,-4(fp)
 181f720:	10801a8b 	ldhu	r2,106(r2)
 181f724:	10bfffcc 	andi	r2,r2,65535
 181f728:	10000526 	beq	r2,zero,181f740 <tcp_output+0x244>
 181f72c:	e0bfff17 	ldw	r2,-4(fp)
 181f730:	10801b0b 	ldhu	r2,108(r2)
 181f734:	10bfffcc 	andi	r2,r2,65535
 181f738:	10800230 	cmpltui	r2,r2,8
 181f73c:	1000021e 	bne	r2,zero,181f748 <tcp_output+0x24c>
 181f740:	00800044 	movi	r2,1
 181f744:	00000106 	br	181f74c <tcp_output+0x250>
 181f748:	0005883a 	mov	r2,zero
 181f74c:	1000051e 	bne	r2,zero,181f764 <tcp_output+0x268>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
 181f750:	e0bfff17 	ldw	r2,-4(fp)
 181f754:	10800883 	ldbu	r2,34(r2)
 181f758:	10803fcc 	andi	r2,r2,255
 181f75c:	1080280c 	andi	r2,r2,160
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 181f760:	1001ff26 	beq	r2,zero,181ff60 <tcp_output+0xa64>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
 181f764:	e0bffa17 	ldw	r2,-24(fp)
 181f768:	10c00017 	ldw	r3,0(r2)
 181f76c:	e0bfff17 	ldw	r2,-4(fp)
 181f770:	10c01c15 	stw	r3,112(r2)

    if (pcb->state != SYN_SENT) {
 181f774:	e0bfff17 	ldw	r2,-4(fp)
 181f778:	10800617 	ldw	r2,24(r2)
 181f77c:	108000a0 	cmpeqi	r2,r2,2
 181f780:	1000221e 	bne	r2,zero,181f80c <tcp_output+0x310>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 181f784:	e0bffa17 	ldw	r2,-24(fp)
 181f788:	10800417 	ldw	r2,16(r2)
 181f78c:	e0fffa17 	ldw	r3,-24(fp)
 181f790:	18c00417 	ldw	r3,16(r3)
 181f794:	19000303 	ldbu	r4,12(r3)
 181f798:	18c00343 	ldbu	r3,13(r3)
 181f79c:	1806923a 	slli	r3,r3,8
 181f7a0:	1906b03a 	or	r3,r3,r4
 181f7a4:	18c40014 	ori	r3,r3,4096
 181f7a8:	180d883a 	mov	r6,r3
 181f7ac:	30ffffcc 	andi	r3,r6,65535
 181f7b0:	19403fcc 	andi	r5,r3,255
 181f7b4:	10c00303 	ldbu	r3,12(r2)
 181f7b8:	1806703a 	and	r3,r3,zero
 181f7bc:	1809883a 	mov	r4,r3
 181f7c0:	2807883a 	mov	r3,r5
 181f7c4:	20c6b03a 	or	r3,r4,r3
 181f7c8:	10c00305 	stb	r3,12(r2)
 181f7cc:	30ffffcc 	andi	r3,r6,65535
 181f7d0:	1806d23a 	srli	r3,r3,8
 181f7d4:	197fffcc 	andi	r5,r3,65535
 181f7d8:	10c00343 	ldbu	r3,13(r2)
 181f7dc:	1806703a 	and	r3,r3,zero
 181f7e0:	1809883a 	mov	r4,r3
 181f7e4:	2807883a 	mov	r3,r5
 181f7e8:	20c6b03a 	or	r3,r4,r3
 181f7ec:	10c00345 	stb	r3,13(r2)
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 181f7f0:	e0bfff17 	ldw	r2,-4(fp)
 181f7f4:	10c00883 	ldbu	r3,34(r2)
 181f7f8:	00bfff04 	movi	r2,-4
 181f7fc:	1884703a 	and	r2,r3,r2
 181f800:	1007883a 	mov	r3,r2
 181f804:	e0bfff17 	ldw	r2,-4(fp)
 181f808:	10c00885 	stb	r3,34(r2)
    }

    tcp_output_segment(seg, pcb);
 181f80c:	e17fff17 	ldw	r5,-4(fp)
 181f810:	e13ffa17 	ldw	r4,-24(fp)
 181f814:	181ffa80 	call	181ffa8 <tcp_output_segment>
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 181f818:	e0bffa17 	ldw	r2,-24(fp)
 181f81c:	10800417 	ldw	r2,16(r2)
 181f820:	10c00103 	ldbu	r3,4(r2)
 181f824:	11000143 	ldbu	r4,5(r2)
 181f828:	2008923a 	slli	r4,r4,8
 181f82c:	20c6b03a 	or	r3,r4,r3
 181f830:	11000183 	ldbu	r4,6(r2)
 181f834:	2008943a 	slli	r4,r4,16
 181f838:	20c6b03a 	or	r3,r4,r3
 181f83c:	108001c3 	ldbu	r2,7(r2)
 181f840:	1004963a 	slli	r2,r2,24
 181f844:	10c4b03a 	or	r2,r2,r3
 181f848:	1006d63a 	srli	r3,r2,24
 181f84c:	e0bffa17 	ldw	r2,-24(fp)
 181f850:	10800417 	ldw	r2,16(r2)
 181f854:	11000103 	ldbu	r4,4(r2)
 181f858:	11400143 	ldbu	r5,5(r2)
 181f85c:	280a923a 	slli	r5,r5,8
 181f860:	2908b03a 	or	r4,r5,r4
 181f864:	11400183 	ldbu	r5,6(r2)
 181f868:	280a943a 	slli	r5,r5,16
 181f86c:	2908b03a 	or	r4,r5,r4
 181f870:	108001c3 	ldbu	r2,7(r2)
 181f874:	1004963a 	slli	r2,r2,24
 181f878:	1104b03a 	or	r2,r2,r4
 181f87c:	1004d23a 	srli	r2,r2,8
 181f880:	10bfc00c 	andi	r2,r2,65280
 181f884:	1886b03a 	or	r3,r3,r2
 181f888:	e0bffa17 	ldw	r2,-24(fp)
 181f88c:	10800417 	ldw	r2,16(r2)
 181f890:	11000103 	ldbu	r4,4(r2)
 181f894:	11400143 	ldbu	r5,5(r2)
 181f898:	280a923a 	slli	r5,r5,8
 181f89c:	2908b03a 	or	r4,r5,r4
 181f8a0:	11400183 	ldbu	r5,6(r2)
 181f8a4:	280a943a 	slli	r5,r5,16
 181f8a8:	2908b03a 	or	r4,r5,r4
 181f8ac:	108001c3 	ldbu	r2,7(r2)
 181f8b0:	1004963a 	slli	r2,r2,24
 181f8b4:	1104b03a 	or	r2,r2,r4
 181f8b8:	10bfc00c 	andi	r2,r2,65280
 181f8bc:	1004923a 	slli	r2,r2,8
 181f8c0:	1886b03a 	or	r3,r3,r2
 181f8c4:	e0bffa17 	ldw	r2,-24(fp)
 181f8c8:	10800417 	ldw	r2,16(r2)
 181f8cc:	11000103 	ldbu	r4,4(r2)
 181f8d0:	11400143 	ldbu	r5,5(r2)
 181f8d4:	280a923a 	slli	r5,r5,8
 181f8d8:	2908b03a 	or	r4,r5,r4
 181f8dc:	11400183 	ldbu	r5,6(r2)
 181f8e0:	280a943a 	slli	r5,r5,16
 181f8e4:	2908b03a 	or	r4,r5,r4
 181f8e8:	108001c3 	ldbu	r2,7(r2)
 181f8ec:	1004963a 	slli	r2,r2,24
 181f8f0:	1104b03a 	or	r2,r2,r4
 181f8f4:	1004963a 	slli	r2,r2,24
 181f8f8:	1886b03a 	or	r3,r3,r2
 181f8fc:	e0bffa17 	ldw	r2,-24(fp)
 181f900:	1080020b 	ldhu	r2,8(r2)
 181f904:	113fffcc 	andi	r4,r2,65535
 181f908:	e0bffa17 	ldw	r2,-24(fp)
 181f90c:	10800417 	ldw	r2,16(r2)
 181f910:	11400303 	ldbu	r5,12(r2)
 181f914:	10800343 	ldbu	r2,13(r2)
 181f918:	1004923a 	slli	r2,r2,8
 181f91c:	1144b03a 	or	r2,r2,r5
 181f920:	10bfffcc 	andi	r2,r2,65535
 181f924:	1004d23a 	srli	r2,r2,8
 181f928:	117fffcc 	andi	r5,r2,65535
 181f92c:	e0bffa17 	ldw	r2,-24(fp)
 181f930:	10800417 	ldw	r2,16(r2)
 181f934:	11800303 	ldbu	r6,12(r2)
 181f938:	10800343 	ldbu	r2,13(r2)
 181f93c:	1004923a 	slli	r2,r2,8
 181f940:	1184b03a 	or	r2,r2,r6
 181f944:	10bfffcc 	andi	r2,r2,65535
 181f948:	1004923a 	slli	r2,r2,8
 181f94c:	10bfffcc 	andi	r2,r2,65535
 181f950:	2884b03a 	or	r2,r5,r2
 181f954:	108000cc 	andi	r2,r2,3
 181f958:	1004c03a 	cmpne	r2,r2,zero
 181f95c:	10803fcc 	andi	r2,r2,255
 181f960:	2085883a 	add	r2,r4,r2
 181f964:	1885883a 	add	r2,r3,r2
 181f968:	e0bffe15 	stw	r2,-8(fp)
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 181f96c:	e0bfff17 	ldw	r2,-4(fp)
 181f970:	10c01517 	ldw	r3,84(r2)
 181f974:	e0bffe17 	ldw	r2,-8(fp)
 181f978:	1885c83a 	sub	r2,r3,r2
 181f97c:	1000030e 	bge	r2,zero,181f98c <tcp_output+0x490>
      pcb->snd_nxt = snd_nxt;
 181f980:	e0bfff17 	ldw	r2,-4(fp)
 181f984:	e0fffe17 	ldw	r3,-8(fp)
 181f988:	10c01515 	stw	r3,84(r2)
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 181f98c:	e0bffa17 	ldw	r2,-24(fp)
 181f990:	1080020b 	ldhu	r2,8(r2)
 181f994:	10ffffcc 	andi	r3,r2,65535
 181f998:	e0bffa17 	ldw	r2,-24(fp)
 181f99c:	10800417 	ldw	r2,16(r2)
 181f9a0:	11000303 	ldbu	r4,12(r2)
 181f9a4:	10800343 	ldbu	r2,13(r2)
 181f9a8:	1004923a 	slli	r2,r2,8
 181f9ac:	1104b03a 	or	r2,r2,r4
 181f9b0:	10bfffcc 	andi	r2,r2,65535
 181f9b4:	1004d23a 	srli	r2,r2,8
 181f9b8:	113fffcc 	andi	r4,r2,65535
 181f9bc:	e0bffa17 	ldw	r2,-24(fp)
 181f9c0:	10800417 	ldw	r2,16(r2)
 181f9c4:	11400303 	ldbu	r5,12(r2)
 181f9c8:	10800343 	ldbu	r2,13(r2)
 181f9cc:	1004923a 	slli	r2,r2,8
 181f9d0:	1144b03a 	or	r2,r2,r5
 181f9d4:	10bfffcc 	andi	r2,r2,65535
 181f9d8:	1004923a 	slli	r2,r2,8
 181f9dc:	10bfffcc 	andi	r2,r2,65535
 181f9e0:	2084b03a 	or	r2,r4,r2
 181f9e4:	108000cc 	andi	r2,r2,3
 181f9e8:	1004c03a 	cmpne	r2,r2,zero
 181f9ec:	10803fcc 	andi	r2,r2,255
 181f9f0:	1885883a 	add	r2,r3,r2
 181f9f4:	0081100e 	bge	zero,r2,181fe38 <tcp_output+0x93c>
      seg->next = NULL;
 181f9f8:	e0bffa17 	ldw	r2,-24(fp)
 181f9fc:	10000015 	stw	zero,0(r2)
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 181fa00:	e0bfff17 	ldw	r2,-4(fp)
 181fa04:	10801d17 	ldw	r2,116(r2)
 181fa08:	1000061e 	bne	r2,zero,181fa24 <tcp_output+0x528>
        pcb->unacked = seg;
 181fa0c:	e0bfff17 	ldw	r2,-4(fp)
 181fa10:	e0fffa17 	ldw	r3,-24(fp)
 181fa14:	10c01d15 	stw	r3,116(r2)
        useg = seg;
 181fa18:	e0bffa17 	ldw	r2,-24(fp)
 181fa1c:	e0bffb15 	stw	r2,-20(fp)
 181fa20:	00010706 	br	181fe40 <tcp_output+0x944>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
 181fa24:	e0bffa17 	ldw	r2,-24(fp)
 181fa28:	10800417 	ldw	r2,16(r2)
 181fa2c:	10c00103 	ldbu	r3,4(r2)
 181fa30:	11000143 	ldbu	r4,5(r2)
 181fa34:	2008923a 	slli	r4,r4,8
 181fa38:	20c6b03a 	or	r3,r4,r3
 181fa3c:	11000183 	ldbu	r4,6(r2)
 181fa40:	2008943a 	slli	r4,r4,16
 181fa44:	20c6b03a 	or	r3,r4,r3
 181fa48:	108001c3 	ldbu	r2,7(r2)
 181fa4c:	1004963a 	slli	r2,r2,24
 181fa50:	10c4b03a 	or	r2,r2,r3
 181fa54:	1006d63a 	srli	r3,r2,24
 181fa58:	e0bffa17 	ldw	r2,-24(fp)
 181fa5c:	10800417 	ldw	r2,16(r2)
 181fa60:	11000103 	ldbu	r4,4(r2)
 181fa64:	11400143 	ldbu	r5,5(r2)
 181fa68:	280a923a 	slli	r5,r5,8
 181fa6c:	2908b03a 	or	r4,r5,r4
 181fa70:	11400183 	ldbu	r5,6(r2)
 181fa74:	280a943a 	slli	r5,r5,16
 181fa78:	2908b03a 	or	r4,r5,r4
 181fa7c:	108001c3 	ldbu	r2,7(r2)
 181fa80:	1004963a 	slli	r2,r2,24
 181fa84:	1104b03a 	or	r2,r2,r4
 181fa88:	1004d23a 	srli	r2,r2,8
 181fa8c:	10bfc00c 	andi	r2,r2,65280
 181fa90:	1886b03a 	or	r3,r3,r2
 181fa94:	e0bffa17 	ldw	r2,-24(fp)
 181fa98:	10800417 	ldw	r2,16(r2)
 181fa9c:	11000103 	ldbu	r4,4(r2)
 181faa0:	11400143 	ldbu	r5,5(r2)
 181faa4:	280a923a 	slli	r5,r5,8
 181faa8:	2908b03a 	or	r4,r5,r4
 181faac:	11400183 	ldbu	r5,6(r2)
 181fab0:	280a943a 	slli	r5,r5,16
 181fab4:	2908b03a 	or	r4,r5,r4
 181fab8:	108001c3 	ldbu	r2,7(r2)
 181fabc:	1004963a 	slli	r2,r2,24
 181fac0:	1104b03a 	or	r2,r2,r4
 181fac4:	10bfc00c 	andi	r2,r2,65280
 181fac8:	1004923a 	slli	r2,r2,8
 181facc:	1886b03a 	or	r3,r3,r2
 181fad0:	e0bffa17 	ldw	r2,-24(fp)
 181fad4:	10800417 	ldw	r2,16(r2)
 181fad8:	11000103 	ldbu	r4,4(r2)
 181fadc:	11400143 	ldbu	r5,5(r2)
 181fae0:	280a923a 	slli	r5,r5,8
 181fae4:	2908b03a 	or	r4,r5,r4
 181fae8:	11400183 	ldbu	r5,6(r2)
 181faec:	280a943a 	slli	r5,r5,16
 181faf0:	2908b03a 	or	r4,r5,r4
 181faf4:	108001c3 	ldbu	r2,7(r2)
 181faf8:	1004963a 	slli	r2,r2,24
 181fafc:	1104b03a 	or	r2,r2,r4
 181fb00:	1004963a 	slli	r2,r2,24
 181fb04:	1886b03a 	or	r3,r3,r2
 181fb08:	e0bffb17 	ldw	r2,-20(fp)
 181fb0c:	10800417 	ldw	r2,16(r2)
 181fb10:	11000103 	ldbu	r4,4(r2)
 181fb14:	11400143 	ldbu	r5,5(r2)
 181fb18:	280a923a 	slli	r5,r5,8
 181fb1c:	2908b03a 	or	r4,r5,r4
 181fb20:	11400183 	ldbu	r5,6(r2)
 181fb24:	280a943a 	slli	r5,r5,16
 181fb28:	2908b03a 	or	r4,r5,r4
 181fb2c:	108001c3 	ldbu	r2,7(r2)
 181fb30:	1004963a 	slli	r2,r2,24
 181fb34:	1104b03a 	or	r2,r2,r4
 181fb38:	1008d63a 	srli	r4,r2,24
 181fb3c:	e0bffb17 	ldw	r2,-20(fp)
 181fb40:	10800417 	ldw	r2,16(r2)
 181fb44:	11400103 	ldbu	r5,4(r2)
 181fb48:	11800143 	ldbu	r6,5(r2)
 181fb4c:	300c923a 	slli	r6,r6,8
 181fb50:	314ab03a 	or	r5,r6,r5
 181fb54:	11800183 	ldbu	r6,6(r2)
 181fb58:	300c943a 	slli	r6,r6,16
 181fb5c:	314ab03a 	or	r5,r6,r5
 181fb60:	108001c3 	ldbu	r2,7(r2)
 181fb64:	1004963a 	slli	r2,r2,24
 181fb68:	1144b03a 	or	r2,r2,r5
 181fb6c:	1004d23a 	srli	r2,r2,8
 181fb70:	10bfc00c 	andi	r2,r2,65280
 181fb74:	2088b03a 	or	r4,r4,r2
 181fb78:	e0bffb17 	ldw	r2,-20(fp)
 181fb7c:	10800417 	ldw	r2,16(r2)
 181fb80:	11400103 	ldbu	r5,4(r2)
 181fb84:	11800143 	ldbu	r6,5(r2)
 181fb88:	300c923a 	slli	r6,r6,8
 181fb8c:	314ab03a 	or	r5,r6,r5
 181fb90:	11800183 	ldbu	r6,6(r2)
 181fb94:	300c943a 	slli	r6,r6,16
 181fb98:	314ab03a 	or	r5,r6,r5
 181fb9c:	108001c3 	ldbu	r2,7(r2)
 181fba0:	1004963a 	slli	r2,r2,24
 181fba4:	1144b03a 	or	r2,r2,r5
 181fba8:	10bfc00c 	andi	r2,r2,65280
 181fbac:	1004923a 	slli	r2,r2,8
 181fbb0:	2088b03a 	or	r4,r4,r2
 181fbb4:	e0bffb17 	ldw	r2,-20(fp)
 181fbb8:	10800417 	ldw	r2,16(r2)
 181fbbc:	11400103 	ldbu	r5,4(r2)
 181fbc0:	11800143 	ldbu	r6,5(r2)
 181fbc4:	300c923a 	slli	r6,r6,8
 181fbc8:	314ab03a 	or	r5,r6,r5
 181fbcc:	11800183 	ldbu	r6,6(r2)
 181fbd0:	300c943a 	slli	r6,r6,16
 181fbd4:	314ab03a 	or	r5,r6,r5
 181fbd8:	108001c3 	ldbu	r2,7(r2)
 181fbdc:	1004963a 	slli	r2,r2,24
 181fbe0:	1144b03a 	or	r2,r2,r5
 181fbe4:	1004963a 	slli	r2,r2,24
 181fbe8:	2084b03a 	or	r2,r4,r2
 181fbec:	1885c83a 	sub	r2,r3,r2
 181fbf0:	10008a0e 	bge	r2,zero,181fe1c <tcp_output+0x920>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 181fbf4:	e0bfff17 	ldw	r2,-4(fp)
 181fbf8:	10801d04 	addi	r2,r2,116
 181fbfc:	e0bffc15 	stw	r2,-16(fp)
          while (*cur_seg &&
 181fc00:	00000306 	br	181fc10 <tcp_output+0x714>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 181fc04:	e0bffc17 	ldw	r2,-16(fp)
 181fc08:	10800017 	ldw	r2,0(r2)
 181fc0c:	e0bffc15 	stw	r2,-16(fp)
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 181fc10:	e0bffc17 	ldw	r2,-16(fp)
 181fc14:	10800017 	ldw	r2,0(r2)
 181fc18:	10007826 	beq	r2,zero,181fdfc <tcp_output+0x900>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 181fc1c:	e0bffc17 	ldw	r2,-16(fp)
 181fc20:	10800017 	ldw	r2,0(r2)
 181fc24:	10800417 	ldw	r2,16(r2)
 181fc28:	10c00103 	ldbu	r3,4(r2)
 181fc2c:	11000143 	ldbu	r4,5(r2)
 181fc30:	2008923a 	slli	r4,r4,8
 181fc34:	20c6b03a 	or	r3,r4,r3
 181fc38:	11000183 	ldbu	r4,6(r2)
 181fc3c:	2008943a 	slli	r4,r4,16
 181fc40:	20c6b03a 	or	r3,r4,r3
 181fc44:	108001c3 	ldbu	r2,7(r2)
 181fc48:	1004963a 	slli	r2,r2,24
 181fc4c:	10c4b03a 	or	r2,r2,r3
 181fc50:	1006d63a 	srli	r3,r2,24
 181fc54:	e0bffc17 	ldw	r2,-16(fp)
 181fc58:	10800017 	ldw	r2,0(r2)
 181fc5c:	10800417 	ldw	r2,16(r2)
 181fc60:	11000103 	ldbu	r4,4(r2)
 181fc64:	11400143 	ldbu	r5,5(r2)
 181fc68:	280a923a 	slli	r5,r5,8
 181fc6c:	2908b03a 	or	r4,r5,r4
 181fc70:	11400183 	ldbu	r5,6(r2)
 181fc74:	280a943a 	slli	r5,r5,16
 181fc78:	2908b03a 	or	r4,r5,r4
 181fc7c:	108001c3 	ldbu	r2,7(r2)
 181fc80:	1004963a 	slli	r2,r2,24
 181fc84:	1104b03a 	or	r2,r2,r4
 181fc88:	1004d23a 	srli	r2,r2,8
 181fc8c:	10bfc00c 	andi	r2,r2,65280
 181fc90:	1886b03a 	or	r3,r3,r2
 181fc94:	e0bffc17 	ldw	r2,-16(fp)
 181fc98:	10800017 	ldw	r2,0(r2)
 181fc9c:	10800417 	ldw	r2,16(r2)
 181fca0:	11000103 	ldbu	r4,4(r2)
 181fca4:	11400143 	ldbu	r5,5(r2)
 181fca8:	280a923a 	slli	r5,r5,8
 181fcac:	2908b03a 	or	r4,r5,r4
 181fcb0:	11400183 	ldbu	r5,6(r2)
 181fcb4:	280a943a 	slli	r5,r5,16
 181fcb8:	2908b03a 	or	r4,r5,r4
 181fcbc:	108001c3 	ldbu	r2,7(r2)
 181fcc0:	1004963a 	slli	r2,r2,24
 181fcc4:	1104b03a 	or	r2,r2,r4
 181fcc8:	10bfc00c 	andi	r2,r2,65280
 181fccc:	1004923a 	slli	r2,r2,8
 181fcd0:	1886b03a 	or	r3,r3,r2
 181fcd4:	e0bffc17 	ldw	r2,-16(fp)
 181fcd8:	10800017 	ldw	r2,0(r2)
 181fcdc:	10800417 	ldw	r2,16(r2)
 181fce0:	11000103 	ldbu	r4,4(r2)
 181fce4:	11400143 	ldbu	r5,5(r2)
 181fce8:	280a923a 	slli	r5,r5,8
 181fcec:	2908b03a 	or	r4,r5,r4
 181fcf0:	11400183 	ldbu	r5,6(r2)
 181fcf4:	280a943a 	slli	r5,r5,16
 181fcf8:	2908b03a 	or	r4,r5,r4
 181fcfc:	108001c3 	ldbu	r2,7(r2)
 181fd00:	1004963a 	slli	r2,r2,24
 181fd04:	1104b03a 	or	r2,r2,r4
 181fd08:	1004963a 	slli	r2,r2,24
 181fd0c:	1886b03a 	or	r3,r3,r2
 181fd10:	e0bffa17 	ldw	r2,-24(fp)
 181fd14:	10800417 	ldw	r2,16(r2)
 181fd18:	11000103 	ldbu	r4,4(r2)
 181fd1c:	11400143 	ldbu	r5,5(r2)
 181fd20:	280a923a 	slli	r5,r5,8
 181fd24:	2908b03a 	or	r4,r5,r4
 181fd28:	11400183 	ldbu	r5,6(r2)
 181fd2c:	280a943a 	slli	r5,r5,16
 181fd30:	2908b03a 	or	r4,r5,r4
 181fd34:	108001c3 	ldbu	r2,7(r2)
 181fd38:	1004963a 	slli	r2,r2,24
 181fd3c:	1104b03a 	or	r2,r2,r4
 181fd40:	1008d63a 	srli	r4,r2,24
 181fd44:	e0bffa17 	ldw	r2,-24(fp)
 181fd48:	10800417 	ldw	r2,16(r2)
 181fd4c:	11400103 	ldbu	r5,4(r2)
 181fd50:	11800143 	ldbu	r6,5(r2)
 181fd54:	300c923a 	slli	r6,r6,8
 181fd58:	314ab03a 	or	r5,r6,r5
 181fd5c:	11800183 	ldbu	r6,6(r2)
 181fd60:	300c943a 	slli	r6,r6,16
 181fd64:	314ab03a 	or	r5,r6,r5
 181fd68:	108001c3 	ldbu	r2,7(r2)
 181fd6c:	1004963a 	slli	r2,r2,24
 181fd70:	1144b03a 	or	r2,r2,r5
 181fd74:	1004d23a 	srli	r2,r2,8
 181fd78:	10bfc00c 	andi	r2,r2,65280
 181fd7c:	2088b03a 	or	r4,r4,r2
 181fd80:	e0bffa17 	ldw	r2,-24(fp)
 181fd84:	10800417 	ldw	r2,16(r2)
 181fd88:	11400103 	ldbu	r5,4(r2)
 181fd8c:	11800143 	ldbu	r6,5(r2)
 181fd90:	300c923a 	slli	r6,r6,8
 181fd94:	314ab03a 	or	r5,r6,r5
 181fd98:	11800183 	ldbu	r6,6(r2)
 181fd9c:	300c943a 	slli	r6,r6,16
 181fda0:	314ab03a 	or	r5,r6,r5
 181fda4:	108001c3 	ldbu	r2,7(r2)
 181fda8:	1004963a 	slli	r2,r2,24
 181fdac:	1144b03a 	or	r2,r2,r5
 181fdb0:	10bfc00c 	andi	r2,r2,65280
 181fdb4:	1004923a 	slli	r2,r2,8
 181fdb8:	2088b03a 	or	r4,r4,r2
 181fdbc:	e0bffa17 	ldw	r2,-24(fp)
 181fdc0:	10800417 	ldw	r2,16(r2)
 181fdc4:	11400103 	ldbu	r5,4(r2)
 181fdc8:	11800143 	ldbu	r6,5(r2)
 181fdcc:	300c923a 	slli	r6,r6,8
 181fdd0:	314ab03a 	or	r5,r6,r5
 181fdd4:	11800183 	ldbu	r6,6(r2)
 181fdd8:	300c943a 	slli	r6,r6,16
 181fddc:	314ab03a 	or	r5,r6,r5
 181fde0:	108001c3 	ldbu	r2,7(r2)
 181fde4:	1004963a 	slli	r2,r2,24
 181fde8:	1144b03a 	or	r2,r2,r5
 181fdec:	1004963a 	slli	r2,r2,24
 181fdf0:	2084b03a 	or	r2,r4,r2
 181fdf4:	1885c83a 	sub	r2,r3,r2
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 181fdf8:	103f8216 	blt	r2,zero,181fc04 <__alt_mem_mem_0+0xff7ffc04>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
 181fdfc:	e0bffc17 	ldw	r2,-16(fp)
 181fe00:	10c00017 	ldw	r3,0(r2)
 181fe04:	e0bffa17 	ldw	r2,-24(fp)
 181fe08:	10c00015 	stw	r3,0(r2)
          (*cur_seg) = seg;
 181fe0c:	e0bffc17 	ldw	r2,-16(fp)
 181fe10:	e0fffa17 	ldw	r3,-24(fp)
 181fe14:	10c00015 	stw	r3,0(r2)
 181fe18:	00000906 	br	181fe40 <tcp_output+0x944>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 181fe1c:	e0bffb17 	ldw	r2,-20(fp)
 181fe20:	e0fffa17 	ldw	r3,-24(fp)
 181fe24:	10c00015 	stw	r3,0(r2)
          useg = useg->next;
 181fe28:	e0bffb17 	ldw	r2,-20(fp)
 181fe2c:	10800017 	ldw	r2,0(r2)
 181fe30:	e0bffb15 	stw	r2,-20(fp)
 181fe34:	00000206 	br	181fe40 <tcp_output+0x944>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 181fe38:	e13ffa17 	ldw	r4,-24(fp)
 181fe3c:	181d1ac0 	call	181d1ac <tcp_seg_free>
    }
    seg = pcb->unsent;
 181fe40:	e0bfff17 	ldw	r2,-4(fp)
 181fe44:	10801c17 	ldw	r2,112(r2)
 181fe48:	e0bffa15 	stw	r2,-24(fp)
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 181fe4c:	e0bffa17 	ldw	r2,-24(fp)
 181fe50:	10004426 	beq	r2,zero,181ff64 <tcp_output+0xa68>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 181fe54:	e0bffa17 	ldw	r2,-24(fp)
 181fe58:	10800417 	ldw	r2,16(r2)
 181fe5c:	10c00103 	ldbu	r3,4(r2)
 181fe60:	11000143 	ldbu	r4,5(r2)
 181fe64:	2008923a 	slli	r4,r4,8
 181fe68:	20c6b03a 	or	r3,r4,r3
 181fe6c:	11000183 	ldbu	r4,6(r2)
 181fe70:	2008943a 	slli	r4,r4,16
 181fe74:	20c6b03a 	or	r3,r4,r3
 181fe78:	108001c3 	ldbu	r2,7(r2)
 181fe7c:	1004963a 	slli	r2,r2,24
 181fe80:	10c4b03a 	or	r2,r2,r3
 181fe84:	1006d63a 	srli	r3,r2,24
 181fe88:	e0bffa17 	ldw	r2,-24(fp)
 181fe8c:	10800417 	ldw	r2,16(r2)
 181fe90:	11000103 	ldbu	r4,4(r2)
 181fe94:	11400143 	ldbu	r5,5(r2)
 181fe98:	280a923a 	slli	r5,r5,8
 181fe9c:	2908b03a 	or	r4,r5,r4
 181fea0:	11400183 	ldbu	r5,6(r2)
 181fea4:	280a943a 	slli	r5,r5,16
 181fea8:	2908b03a 	or	r4,r5,r4
 181feac:	108001c3 	ldbu	r2,7(r2)
 181feb0:	1004963a 	slli	r2,r2,24
 181feb4:	1104b03a 	or	r2,r2,r4
 181feb8:	1004d23a 	srli	r2,r2,8
 181febc:	10bfc00c 	andi	r2,r2,65280
 181fec0:	1886b03a 	or	r3,r3,r2
 181fec4:	e0bffa17 	ldw	r2,-24(fp)
 181fec8:	10800417 	ldw	r2,16(r2)
 181fecc:	11000103 	ldbu	r4,4(r2)
 181fed0:	11400143 	ldbu	r5,5(r2)
 181fed4:	280a923a 	slli	r5,r5,8
 181fed8:	2908b03a 	or	r4,r5,r4
 181fedc:	11400183 	ldbu	r5,6(r2)
 181fee0:	280a943a 	slli	r5,r5,16
 181fee4:	2908b03a 	or	r4,r5,r4
 181fee8:	108001c3 	ldbu	r2,7(r2)
 181feec:	1004963a 	slli	r2,r2,24
 181fef0:	1104b03a 	or	r2,r2,r4
 181fef4:	10bfc00c 	andi	r2,r2,65280
 181fef8:	1004923a 	slli	r2,r2,8
 181fefc:	1886b03a 	or	r3,r3,r2
 181ff00:	e0bffa17 	ldw	r2,-24(fp)
 181ff04:	10800417 	ldw	r2,16(r2)
 181ff08:	11000103 	ldbu	r4,4(r2)
 181ff0c:	11400143 	ldbu	r5,5(r2)
 181ff10:	280a923a 	slli	r5,r5,8
 181ff14:	2908b03a 	or	r4,r5,r4
 181ff18:	11400183 	ldbu	r5,6(r2)
 181ff1c:	280a943a 	slli	r5,r5,16
 181ff20:	2908b03a 	or	r4,r5,r4
 181ff24:	108001c3 	ldbu	r2,7(r2)
 181ff28:	1004963a 	slli	r2,r2,24
 181ff2c:	1104b03a 	or	r2,r2,r4
 181ff30:	1004963a 	slli	r2,r2,24
 181ff34:	1886b03a 	or	r3,r3,r2
 181ff38:	e0bfff17 	ldw	r2,-4(fp)
 181ff3c:	10801317 	ldw	r2,76(r2)
 181ff40:	1887c83a 	sub	r3,r3,r2
 181ff44:	e0bffa17 	ldw	r2,-24(fp)
 181ff48:	1080020b 	ldhu	r2,8(r2)
 181ff4c:	10bfffcc 	andi	r2,r2,65535
 181ff50:	1885883a 	add	r2,r3,r2
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 181ff54:	e0fffd17 	ldw	r3,-12(fp)
 181ff58:	18bdd92e 	bgeu	r3,r2,181f6c0 <__alt_mem_mem_0+0xff7ff6c0>
 181ff5c:	00000106 	br	181ff64 <tcp_output+0xa68>
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
      break;
 181ff60:	0001883a 	nop
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 181ff64:	e0bfff17 	ldw	r2,-4(fp)
 181ff68:	10801c17 	ldw	r2,112(r2)
 181ff6c:	1000021e 	bne	r2,zero,181ff78 <tcp_output+0xa7c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 181ff70:	e0bfff17 	ldw	r2,-4(fp)
 181ff74:	10001b8d 	sth	zero,110(r2)
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 181ff78:	e0bfff17 	ldw	r2,-4(fp)
 181ff7c:	10800883 	ldbu	r2,34(r2)
 181ff80:	10801fcc 	andi	r2,r2,127
 181ff84:	1007883a 	mov	r3,r2
 181ff88:	e0bfff17 	ldw	r2,-4(fp)
 181ff8c:	10c00885 	stb	r3,34(r2)
  return ERR_OK;
 181ff90:	0005883a 	mov	r2,zero
}
 181ff94:	e037883a 	mov	sp,fp
 181ff98:	dfc00117 	ldw	ra,4(sp)
 181ff9c:	df000017 	ldw	fp,0(sp)
 181ffa0:	dec00204 	addi	sp,sp,8
 181ffa4:	f800283a 	ret

0181ffa8 <tcp_output_segment>:
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
 181ffa8:	defff404 	addi	sp,sp,-48
 181ffac:	dfc00b15 	stw	ra,44(sp)
 181ffb0:	df000a15 	stw	fp,40(sp)
 181ffb4:	df000a04 	addi	fp,sp,40
 181ffb8:	e13ffe15 	stw	r4,-8(fp)
 181ffbc:	e17fff15 	stw	r5,-4(fp)
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 181ffc0:	e0bffe17 	ldw	r2,-8(fp)
 181ffc4:	10800417 	ldw	r2,16(r2)
 181ffc8:	e0ffff17 	ldw	r3,-4(fp)
 181ffcc:	18c00b17 	ldw	r3,44(r3)
 181ffd0:	1808d63a 	srli	r4,r3,24
 181ffd4:	e0ffff17 	ldw	r3,-4(fp)
 181ffd8:	18c00b17 	ldw	r3,44(r3)
 181ffdc:	1806d23a 	srli	r3,r3,8
 181ffe0:	18ffc00c 	andi	r3,r3,65280
 181ffe4:	20c8b03a 	or	r4,r4,r3
 181ffe8:	e0ffff17 	ldw	r3,-4(fp)
 181ffec:	18c00b17 	ldw	r3,44(r3)
 181fff0:	18ffc00c 	andi	r3,r3,65280
 181fff4:	1806923a 	slli	r3,r3,8
 181fff8:	20c8b03a 	or	r4,r4,r3
 181fffc:	e0ffff17 	ldw	r3,-4(fp)
 1820000:	18c00b17 	ldw	r3,44(r3)
 1820004:	1806963a 	slli	r3,r3,24
 1820008:	20c6b03a 	or	r3,r4,r3
 182000c:	19803fcc 	andi	r6,r3,255
 1820010:	11000203 	ldbu	r4,8(r2)
 1820014:	2008703a 	and	r4,r4,zero
 1820018:	200b883a 	mov	r5,r4
 182001c:	3009883a 	mov	r4,r6
 1820020:	2908b03a 	or	r4,r5,r4
 1820024:	11000205 	stb	r4,8(r2)
 1820028:	1808d23a 	srli	r4,r3,8
 182002c:	21803fcc 	andi	r6,r4,255
 1820030:	11000243 	ldbu	r4,9(r2)
 1820034:	2008703a 	and	r4,r4,zero
 1820038:	200b883a 	mov	r5,r4
 182003c:	3009883a 	mov	r4,r6
 1820040:	2908b03a 	or	r4,r5,r4
 1820044:	11000245 	stb	r4,9(r2)
 1820048:	1808d43a 	srli	r4,r3,16
 182004c:	21803fcc 	andi	r6,r4,255
 1820050:	11000283 	ldbu	r4,10(r2)
 1820054:	2008703a 	and	r4,r4,zero
 1820058:	200b883a 	mov	r5,r4
 182005c:	3009883a 	mov	r4,r6
 1820060:	2908b03a 	or	r4,r5,r4
 1820064:	11000285 	stb	r4,10(r2)
 1820068:	180ad63a 	srli	r5,r3,24
 182006c:	10c002c3 	ldbu	r3,11(r2)
 1820070:	1806703a 	and	r3,r3,zero
 1820074:	1809883a 	mov	r4,r3
 1820078:	2807883a 	mov	r3,r5
 182007c:	20c6b03a 	or	r3,r4,r3
 1820080:	10c002c5 	stb	r3,11(r2)

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 1820084:	e0bffe17 	ldw	r2,-8(fp)
 1820088:	10800417 	ldw	r2,16(r2)
 182008c:	e0ffff17 	ldw	r3,-4(fp)
 1820090:	18c00c8b 	ldhu	r3,50(r3)
 1820094:	18ffffcc 	andi	r3,r3,65535
 1820098:	1806d23a 	srli	r3,r3,8
 182009c:	1809883a 	mov	r4,r3
 18200a0:	e0ffff17 	ldw	r3,-4(fp)
 18200a4:	18c00c8b 	ldhu	r3,50(r3)
 18200a8:	18ffffcc 	andi	r3,r3,65535
 18200ac:	1806923a 	slli	r3,r3,8
 18200b0:	20c6b03a 	or	r3,r4,r3
 18200b4:	180d883a 	mov	r6,r3
 18200b8:	30ffffcc 	andi	r3,r6,65535
 18200bc:	19403fcc 	andi	r5,r3,255
 18200c0:	10c00383 	ldbu	r3,14(r2)
 18200c4:	1806703a 	and	r3,r3,zero
 18200c8:	1809883a 	mov	r4,r3
 18200cc:	2807883a 	mov	r3,r5
 18200d0:	20c6b03a 	or	r3,r4,r3
 18200d4:	10c00385 	stb	r3,14(r2)
 18200d8:	30ffffcc 	andi	r3,r6,65535
 18200dc:	1806d23a 	srli	r3,r3,8
 18200e0:	197fffcc 	andi	r5,r3,65535
 18200e4:	10c003c3 	ldbu	r3,15(r2)
 18200e8:	1806703a 	and	r3,r3,zero
 18200ec:	1809883a 	mov	r4,r3
 18200f0:	2807883a 	mov	r3,r5
 18200f4:	20c6b03a 	or	r3,r4,r3
 18200f8:	10c003c5 	stb	r3,15(r2)

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 18200fc:	e0bfff17 	ldw	r2,-4(fp)
 1820100:	10c00b17 	ldw	r3,44(r2)
 1820104:	e0bfff17 	ldw	r2,-4(fp)
 1820108:	10800c8b 	ldhu	r2,50(r2)
 182010c:	10bfffcc 	andi	r2,r2,65535
 1820110:	1887883a 	add	r3,r3,r2
 1820114:	e0bfff17 	ldw	r2,-4(fp)
 1820118:	10c00d15 	stw	r3,52(r2)

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 182011c:	e0bffe17 	ldw	r2,-8(fp)
 1820120:	10800417 	ldw	r2,16(r2)
 1820124:	10800504 	addi	r2,r2,20
 1820128:	e0bff915 	stw	r2,-28(fp)
  if (seg->flags & TF_SEG_OPTS_MSS) {
 182012c:	e0bffe17 	ldw	r2,-8(fp)
 1820130:	10800343 	ldbu	r2,13(r2)
 1820134:	10803fcc 	andi	r2,r2,255
 1820138:	1080004c 	andi	r2,r2,1
 182013c:	10001e26 	beq	r2,zero,18201b8 <tcp_output_segment+0x210>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &(pcb->local_ip), &(pcb->remote_ip));
 1820140:	e0ffff17 	ldw	r3,-4(fp)
 1820144:	e0bfff17 	ldw	r2,-4(fp)
 1820148:	10800104 	addi	r2,r2,4
 182014c:	100d883a 	mov	r6,r2
 1820150:	180b883a 	mov	r5,r3
 1820154:	01016d04 	movi	r4,1460
 1820158:	181dab40 	call	181dab4 <tcp_eff_send_mss>
 182015c:	e0bffa0d 	sth	r2,-24(fp)
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 1820160:	e0bffa0b 	ldhu	r2,-24(fp)
 1820164:	10808134 	orhi	r2,r2,516
 1820168:	1004d63a 	srli	r2,r2,24
 182016c:	1007883a 	mov	r3,r2
 1820170:	e0bffa0b 	ldhu	r2,-24(fp)
 1820174:	10808134 	orhi	r2,r2,516
 1820178:	1005d23a 	srai	r2,r2,8
 182017c:	10bfc00c 	andi	r2,r2,65280
 1820180:	1886b03a 	or	r3,r3,r2
 1820184:	e0bffa0b 	ldhu	r2,-24(fp)
 1820188:	10bfc00c 	andi	r2,r2,65280
 182018c:	1004923a 	slli	r2,r2,8
 1820190:	1886b03a 	or	r3,r3,r2
 1820194:	e0bffa0b 	ldhu	r2,-24(fp)
 1820198:	1004963a 	slli	r2,r2,24
 182019c:	1884b03a 	or	r2,r3,r2
 18201a0:	1007883a 	mov	r3,r2
 18201a4:	e0bff917 	ldw	r2,-28(fp)
 18201a8:	10c00015 	stw	r3,0(r2)
    opts += 1;
 18201ac:	e0bff917 	ldw	r2,-28(fp)
 18201b0:	10800104 	addi	r2,r2,4
 18201b4:	e0bff915 	stw	r2,-28(fp)
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
 18201b8:	e0bfff17 	ldw	r2,-4(fp)
 18201bc:	10800e0b 	ldhu	r2,56(r2)
 18201c0:	10bfffcc 	andi	r2,r2,65535
 18201c4:	10a0001c 	xori	r2,r2,32768
 18201c8:	10a00004 	addi	r2,r2,-32768
 18201cc:	10bfffd8 	cmpnei	r2,r2,-1
 18201d0:	1000021e 	bne	r2,zero,18201dc <tcp_output_segment+0x234>
    pcb->rtime = 0;
 18201d4:	e0bfff17 	ldw	r2,-4(fp)
 18201d8:	10000e0d 	sth	zero,56(r2)
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
 18201dc:	e0bfff17 	ldw	r2,-4(fp)
 18201e0:	10000326 	beq	r2,zero,18201f0 <tcp_output_segment+0x248>
 18201e4:	e0bfff17 	ldw	r2,-4(fp)
 18201e8:	10800017 	ldw	r2,0(r2)
 18201ec:	10000d1e 	bne	r2,zero,1820224 <tcp_output_segment+0x27c>
    netif = ip_route(&(pcb->local_ip), &(pcb->remote_ip));
 18201f0:	e0ffff17 	ldw	r3,-4(fp)
 18201f4:	e0bfff17 	ldw	r2,-4(fp)
 18201f8:	10800104 	addi	r2,r2,4
 18201fc:	100b883a 	mov	r5,r2
 1820200:	1809883a 	mov	r4,r3
 1820204:	18319100 	call	1831910 <ip_route>
 1820208:	e0bffb15 	stw	r2,-20(fp)
    if (netif == NULL) {
 182020c:	e0bffb17 	ldw	r2,-20(fp)
 1820210:	1000df26 	beq	r2,zero,1820590 <tcp_output_segment+0x5e8>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
 1820214:	e0bffb17 	ldw	r2,-20(fp)
 1820218:	10c00117 	ldw	r3,4(r2)
 182021c:	e0bfff17 	ldw	r2,-4(fp)
 1820220:	10c00015 	stw	r3,0(r2)
  }

  if (pcb->rttest == 0) {
 1820224:	e0bfff17 	ldw	r2,-4(fp)
 1820228:	10800f17 	ldw	r2,60(r2)
 182022c:	10003e1e 	bne	r2,zero,1820328 <tcp_output_segment+0x380>
    pcb->rttest = tcp_ticks;
 1820230:	d0e7f817 	ldw	r3,-24608(gp)
 1820234:	e0bfff17 	ldw	r2,-4(fp)
 1820238:	10c00f15 	stw	r3,60(r2)
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
 182023c:	e0bffe17 	ldw	r2,-8(fp)
 1820240:	10800417 	ldw	r2,16(r2)
 1820244:	10c00103 	ldbu	r3,4(r2)
 1820248:	11000143 	ldbu	r4,5(r2)
 182024c:	2008923a 	slli	r4,r4,8
 1820250:	20c6b03a 	or	r3,r4,r3
 1820254:	11000183 	ldbu	r4,6(r2)
 1820258:	2008943a 	slli	r4,r4,16
 182025c:	20c6b03a 	or	r3,r4,r3
 1820260:	108001c3 	ldbu	r2,7(r2)
 1820264:	1004963a 	slli	r2,r2,24
 1820268:	10c4b03a 	or	r2,r2,r3
 182026c:	1006d63a 	srli	r3,r2,24
 1820270:	e0bffe17 	ldw	r2,-8(fp)
 1820274:	10800417 	ldw	r2,16(r2)
 1820278:	11000103 	ldbu	r4,4(r2)
 182027c:	11400143 	ldbu	r5,5(r2)
 1820280:	280a923a 	slli	r5,r5,8
 1820284:	2908b03a 	or	r4,r5,r4
 1820288:	11400183 	ldbu	r5,6(r2)
 182028c:	280a943a 	slli	r5,r5,16
 1820290:	2908b03a 	or	r4,r5,r4
 1820294:	108001c3 	ldbu	r2,7(r2)
 1820298:	1004963a 	slli	r2,r2,24
 182029c:	1104b03a 	or	r2,r2,r4
 18202a0:	1004d23a 	srli	r2,r2,8
 18202a4:	10bfc00c 	andi	r2,r2,65280
 18202a8:	1886b03a 	or	r3,r3,r2
 18202ac:	e0bffe17 	ldw	r2,-8(fp)
 18202b0:	10800417 	ldw	r2,16(r2)
 18202b4:	11000103 	ldbu	r4,4(r2)
 18202b8:	11400143 	ldbu	r5,5(r2)
 18202bc:	280a923a 	slli	r5,r5,8
 18202c0:	2908b03a 	or	r4,r5,r4
 18202c4:	11400183 	ldbu	r5,6(r2)
 18202c8:	280a943a 	slli	r5,r5,16
 18202cc:	2908b03a 	or	r4,r5,r4
 18202d0:	108001c3 	ldbu	r2,7(r2)
 18202d4:	1004963a 	slli	r2,r2,24
 18202d8:	1104b03a 	or	r2,r2,r4
 18202dc:	10bfc00c 	andi	r2,r2,65280
 18202e0:	1004923a 	slli	r2,r2,8
 18202e4:	1886b03a 	or	r3,r3,r2
 18202e8:	e0bffe17 	ldw	r2,-8(fp)
 18202ec:	10800417 	ldw	r2,16(r2)
 18202f0:	11000103 	ldbu	r4,4(r2)
 18202f4:	11400143 	ldbu	r5,5(r2)
 18202f8:	280a923a 	slli	r5,r5,8
 18202fc:	2908b03a 	or	r4,r5,r4
 1820300:	11400183 	ldbu	r5,6(r2)
 1820304:	280a943a 	slli	r5,r5,16
 1820308:	2908b03a 	or	r4,r5,r4
 182030c:	108001c3 	ldbu	r2,7(r2)
 1820310:	1004963a 	slli	r2,r2,24
 1820314:	1104b03a 	or	r2,r2,r4
 1820318:	1004963a 	slli	r2,r2,24
 182031c:	1886b03a 	or	r3,r3,r2
 1820320:	e0bfff17 	ldw	r2,-4(fp)
 1820324:	10c01015 	stw	r3,64(r2)
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 1820328:	e0bffe17 	ldw	r2,-8(fp)
 182032c:	10800417 	ldw	r2,16(r2)
 1820330:	1007883a 	mov	r3,r2
 1820334:	e0bffe17 	ldw	r2,-8(fp)
 1820338:	10800117 	ldw	r2,4(r2)
 182033c:	10800117 	ldw	r2,4(r2)
 1820340:	1885c83a 	sub	r2,r3,r2
 1820344:	e0bffc0d 	sth	r2,-16(fp)

  seg->p->len -= len;
 1820348:	e0bffe17 	ldw	r2,-8(fp)
 182034c:	10800117 	ldw	r2,4(r2)
 1820350:	e0fffe17 	ldw	r3,-8(fp)
 1820354:	18c00117 	ldw	r3,4(r3)
 1820358:	1900028b 	ldhu	r4,10(r3)
 182035c:	e0fffc0b 	ldhu	r3,-16(fp)
 1820360:	20c7c83a 	sub	r3,r4,r3
 1820364:	10c0028d 	sth	r3,10(r2)
  seg->p->tot_len -= len;
 1820368:	e0bffe17 	ldw	r2,-8(fp)
 182036c:	10800117 	ldw	r2,4(r2)
 1820370:	e0fffe17 	ldw	r3,-8(fp)
 1820374:	18c00117 	ldw	r3,4(r3)
 1820378:	1900020b 	ldhu	r4,8(r3)
 182037c:	e0fffc0b 	ldhu	r3,-16(fp)
 1820380:	20c7c83a 	sub	r3,r4,r3
 1820384:	10c0020d 	sth	r3,8(r2)

  seg->p->payload = seg->tcphdr;
 1820388:	e0bffe17 	ldw	r2,-8(fp)
 182038c:	10800117 	ldw	r2,4(r2)
 1820390:	e0fffe17 	ldw	r3,-8(fp)
 1820394:	18c00417 	ldw	r3,16(r3)
 1820398:	10c00115 	stw	r3,4(r2)

  seg->tcphdr->chksum = 0;
 182039c:	e0bffe17 	ldw	r2,-8(fp)
 18203a0:	10800417 	ldw	r2,16(r2)
 18203a4:	10c00403 	ldbu	r3,16(r2)
 18203a8:	1806703a 	and	r3,r3,zero
 18203ac:	10c00405 	stb	r3,16(r2)
 18203b0:	10c00443 	ldbu	r3,17(r2)
 18203b4:	1806703a 	and	r3,r3,zero
 18203b8:	10c00445 	stb	r3,17(r2)
      LWIP_ASSERT("data included but not checksummed",
        seg->p->tot_len == (TCPH_HDRLEN(seg->tcphdr) * 4));
    }

    /* rebuild TCP header checksum (TCP header changes for retransmissions!) */
    acc = inet_chksum_pseudo_partial(seg->p, &(pcb->local_ip),
 18203bc:	e0bffe17 	ldw	r2,-8(fp)
 18203c0:	12000117 	ldw	r8,4(r2)
 18203c4:	e27fff17 	ldw	r9,-4(fp)
 18203c8:	e0bfff17 	ldw	r2,-4(fp)
 18203cc:	11800104 	addi	r6,r2,4
             &(pcb->remote_ip),
             IP_PROTO_TCP, seg->p->tot_len, TCPH_HDRLEN(seg->tcphdr) * 4);
 18203d0:	e0bffe17 	ldw	r2,-8(fp)
 18203d4:	10800117 	ldw	r2,4(r2)
 18203d8:	1080020b 	ldhu	r2,8(r2)
      LWIP_ASSERT("data included but not checksummed",
        seg->p->tot_len == (TCPH_HDRLEN(seg->tcphdr) * 4));
    }

    /* rebuild TCP header checksum (TCP header changes for retransmissions!) */
    acc = inet_chksum_pseudo_partial(seg->p, &(pcb->local_ip),
 18203dc:	10ffffcc 	andi	r3,r2,65535
             &(pcb->remote_ip),
             IP_PROTO_TCP, seg->p->tot_len, TCPH_HDRLEN(seg->tcphdr) * 4);
 18203e0:	e0bffe17 	ldw	r2,-8(fp)
 18203e4:	10800417 	ldw	r2,16(r2)
 18203e8:	11000303 	ldbu	r4,12(r2)
 18203ec:	10800343 	ldbu	r2,13(r2)
 18203f0:	1004923a 	slli	r2,r2,8
 18203f4:	1104b03a 	or	r2,r2,r4
 18203f8:	10bfffcc 	andi	r2,r2,65535
 18203fc:	1004d23a 	srli	r2,r2,8
 1820400:	113fffcc 	andi	r4,r2,65535
 1820404:	e0bffe17 	ldw	r2,-8(fp)
 1820408:	10800417 	ldw	r2,16(r2)
 182040c:	11400303 	ldbu	r5,12(r2)
 1820410:	10800343 	ldbu	r2,13(r2)
 1820414:	1004923a 	slli	r2,r2,8
 1820418:	1144b03a 	or	r2,r2,r5
 182041c:	10bfffcc 	andi	r2,r2,65535
 1820420:	1004923a 	slli	r2,r2,8
 1820424:	10bfffcc 	andi	r2,r2,65535
 1820428:	2084b03a 	or	r2,r4,r2
 182042c:	1005d33a 	srai	r2,r2,12
      LWIP_ASSERT("data included but not checksummed",
        seg->p->tot_len == (TCPH_HDRLEN(seg->tcphdr) * 4));
    }

    /* rebuild TCP header checksum (TCP header changes for retransmissions!) */
    acc = inet_chksum_pseudo_partial(seg->p, &(pcb->local_ip),
 1820430:	1085883a 	add	r2,r2,r2
 1820434:	1085883a 	add	r2,r2,r2
 1820438:	10bfffcc 	andi	r2,r2,65535
 182043c:	d8800115 	stw	r2,4(sp)
 1820440:	d8c00015 	stw	r3,0(sp)
 1820444:	01c00184 	movi	r7,6
 1820448:	480b883a 	mov	r5,r9
 182044c:	4009883a 	mov	r4,r8
 1820450:	18315300 	call	1831530 <inet_chksum_pseudo_partial>
 1820454:	10bfffcc 	andi	r2,r2,65535
 1820458:	e0bffd15 	stw	r2,-12(fp)
             &(pcb->remote_ip),
             IP_PROTO_TCP, seg->p->tot_len, TCPH_HDRLEN(seg->tcphdr) * 4);
    /* add payload checksum */
    if (seg->chksum_swapped) {
 182045c:	e0bffe17 	ldw	r2,-8(fp)
 1820460:	10800303 	ldbu	r2,12(r2)
 1820464:	10803fcc 	andi	r2,r2,255
 1820468:	10000f26 	beq	r2,zero,18204a8 <tcp_output_segment+0x500>
      seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
 182046c:	e0bffe17 	ldw	r2,-8(fp)
 1820470:	1080028b 	ldhu	r2,10(r2)
 1820474:	10bfffcc 	andi	r2,r2,65535
 1820478:	1004d23a 	srli	r2,r2,8
 182047c:	1007883a 	mov	r3,r2
 1820480:	e0bffe17 	ldw	r2,-8(fp)
 1820484:	1080028b 	ldhu	r2,10(r2)
 1820488:	10bfffcc 	andi	r2,r2,65535
 182048c:	1004923a 	slli	r2,r2,8
 1820490:	1884b03a 	or	r2,r3,r2
 1820494:	1007883a 	mov	r3,r2
 1820498:	e0bffe17 	ldw	r2,-8(fp)
 182049c:	10c0028d 	sth	r3,10(r2)
      seg->chksum_swapped = 0;
 18204a0:	e0bffe17 	ldw	r2,-8(fp)
 18204a4:	10000305 	stb	zero,12(r2)
    }
    acc += (u16_t)~(seg->chksum);
 18204a8:	e0bffe17 	ldw	r2,-8(fp)
 18204ac:	1080028b 	ldhu	r2,10(r2)
 18204b0:	0084303a 	nor	r2,zero,r2
 18204b4:	10bfffcc 	andi	r2,r2,65535
 18204b8:	e0fffd17 	ldw	r3,-12(fp)
 18204bc:	1885883a 	add	r2,r3,r2
 18204c0:	e0bffd15 	stw	r2,-12(fp)
    seg->tcphdr->chksum = FOLD_U32T(acc);
 18204c4:	e0bffe17 	ldw	r2,-8(fp)
 18204c8:	10800417 	ldw	r2,16(r2)
 18204cc:	e0fffd17 	ldw	r3,-12(fp)
 18204d0:	1806d43a 	srli	r3,r3,16
 18204d4:	1809883a 	mov	r4,r3
 18204d8:	e0fffd17 	ldw	r3,-12(fp)
 18204dc:	20c7883a 	add	r3,r4,r3
 18204e0:	180d883a 	mov	r6,r3
 18204e4:	30ffffcc 	andi	r3,r6,65535
 18204e8:	19403fcc 	andi	r5,r3,255
 18204ec:	10c00403 	ldbu	r3,16(r2)
 18204f0:	1806703a 	and	r3,r3,zero
 18204f4:	1809883a 	mov	r4,r3
 18204f8:	2807883a 	mov	r3,r5
 18204fc:	20c6b03a 	or	r3,r4,r3
 1820500:	10c00405 	stb	r3,16(r2)
 1820504:	30ffffcc 	andi	r3,r6,65535
 1820508:	1806d23a 	srli	r3,r3,8
 182050c:	197fffcc 	andi	r5,r3,65535
 1820510:	10c00443 	ldbu	r3,17(r2)
 1820514:	1806703a 	and	r3,r3,zero
 1820518:	1809883a 	mov	r4,r3
 182051c:	2807883a 	mov	r3,r5
 1820520:	20c6b03a 	or	r3,r4,r3
 1820524:	10c00445 	stb	r3,17(r2)
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
#endif /* TCP_CHECKSUM_ON_COPY */
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 1820528:	008061f4 	movhi	r2,391
 182052c:	10a77104 	addi	r2,r2,-25148
 1820530:	10804817 	ldw	r2,288(r2)
 1820534:	10c00044 	addi	r3,r2,1
 1820538:	008061f4 	movhi	r2,391
 182053c:	10a77104 	addi	r2,r2,-25148
 1820540:	10c04815 	stw	r3,288(r2)

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 1820544:	e0bffe17 	ldw	r2,-8(fp)
 1820548:	11000117 	ldw	r4,4(r2)
 182054c:	e17fff17 	ldw	r5,-4(fp)
 1820550:	e0bfff17 	ldw	r2,-4(fp)
 1820554:	11800104 	addi	r6,r2,4
 1820558:	e0bfff17 	ldw	r2,-4(fp)
 182055c:	10800283 	ldbu	r2,10(r2)
 1820560:	11c03fcc 	andi	r7,r2,255
 1820564:	e0bfff17 	ldw	r2,-4(fp)
 1820568:	10800243 	ldbu	r2,9(r2)
 182056c:	10803fcc 	andi	r2,r2,255
 1820570:	e0ffff17 	ldw	r3,-4(fp)
 1820574:	18c002c4 	addi	r3,r3,11
 1820578:	d8c00215 	stw	r3,8(sp)
 182057c:	00c00184 	movi	r3,6
 1820580:	d8c00115 	stw	r3,4(sp)
 1820584:	d8800015 	stw	r2,0(sp)
 1820588:	183263c0 	call	183263c <ip_output_hinted>
 182058c:	00000106 	br	1820594 <tcp_output_segment+0x5ec>
  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
    netif = ip_route(&(pcb->local_ip), &(pcb->remote_ip));
    if (netif == NULL) {
      return;
 1820590:	0001883a 	nop
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
}
 1820594:	e037883a 	mov	sp,fp
 1820598:	dfc00117 	ldw	ra,4(sp)
 182059c:	df000017 	ldw	fp,0(sp)
 18205a0:	dec00204 	addi	sp,sp,8
 18205a4:	f800283a 	ret

018205a8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 18205a8:	defff404 	addi	sp,sp,-48
 18205ac:	dfc00b15 	stw	ra,44(sp)
 18205b0:	df000a15 	stw	fp,40(sp)
 18205b4:	df000a04 	addi	fp,sp,40
 18205b8:	e13ffa15 	stw	r4,-24(fp)
 18205bc:	e17ffb15 	stw	r5,-20(fp)
 18205c0:	e1bffc15 	stw	r6,-16(fp)
 18205c4:	e1fffd15 	stw	r7,-12(fp)
 18205c8:	e0c00217 	ldw	r3,8(fp)
 18205cc:	e0800317 	ldw	r2,12(fp)
 18205d0:	e0fffe0d 	sth	r3,-8(fp)
 18205d4:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 18205d8:	000d883a 	mov	r6,zero
 18205dc:	01400504 	movi	r5,20
 18205e0:	01000044 	movi	r4,1
 18205e4:	181a1480 	call	181a148 <pbuf_alloc>
 18205e8:	e0bff815 	stw	r2,-32(fp)
  if (p == NULL) {
 18205ec:	e0bff817 	ldw	r2,-32(fp)
 18205f0:	1000da26 	beq	r2,zero,182095c <tcp_rst+0x3b4>
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 18205f4:	e0bff817 	ldw	r2,-32(fp)
 18205f8:	10800117 	ldw	r2,4(r2)
 18205fc:	e0bff915 	stw	r2,-28(fp)
  tcphdr->src = htons(local_port);
 1820600:	e0bffe0b 	ldhu	r2,-8(fp)
 1820604:	1004d23a 	srli	r2,r2,8
 1820608:	1007883a 	mov	r3,r2
 182060c:	e0bffe0b 	ldhu	r2,-8(fp)
 1820610:	1004923a 	slli	r2,r2,8
 1820614:	1884b03a 	or	r2,r3,r2
 1820618:	100d883a 	mov	r6,r2
 182061c:	e0bff917 	ldw	r2,-28(fp)
 1820620:	30ffffcc 	andi	r3,r6,65535
 1820624:	19403fcc 	andi	r5,r3,255
 1820628:	10c00003 	ldbu	r3,0(r2)
 182062c:	1806703a 	and	r3,r3,zero
 1820630:	1809883a 	mov	r4,r3
 1820634:	2807883a 	mov	r3,r5
 1820638:	20c6b03a 	or	r3,r4,r3
 182063c:	10c00005 	stb	r3,0(r2)
 1820640:	30ffffcc 	andi	r3,r6,65535
 1820644:	1806d23a 	srli	r3,r3,8
 1820648:	197fffcc 	andi	r5,r3,65535
 182064c:	10c00043 	ldbu	r3,1(r2)
 1820650:	1806703a 	and	r3,r3,zero
 1820654:	1809883a 	mov	r4,r3
 1820658:	2807883a 	mov	r3,r5
 182065c:	20c6b03a 	or	r3,r4,r3
 1820660:	10c00045 	stb	r3,1(r2)
  tcphdr->dest = htons(remote_port);
 1820664:	e0bfff0b 	ldhu	r2,-4(fp)
 1820668:	1004d23a 	srli	r2,r2,8
 182066c:	1007883a 	mov	r3,r2
 1820670:	e0bfff0b 	ldhu	r2,-4(fp)
 1820674:	1004923a 	slli	r2,r2,8
 1820678:	1884b03a 	or	r2,r3,r2
 182067c:	100d883a 	mov	r6,r2
 1820680:	e0bff917 	ldw	r2,-28(fp)
 1820684:	30ffffcc 	andi	r3,r6,65535
 1820688:	19403fcc 	andi	r5,r3,255
 182068c:	10c00083 	ldbu	r3,2(r2)
 1820690:	1806703a 	and	r3,r3,zero
 1820694:	1809883a 	mov	r4,r3
 1820698:	2807883a 	mov	r3,r5
 182069c:	20c6b03a 	or	r3,r4,r3
 18206a0:	10c00085 	stb	r3,2(r2)
 18206a4:	30ffffcc 	andi	r3,r6,65535
 18206a8:	1806d23a 	srli	r3,r3,8
 18206ac:	197fffcc 	andi	r5,r3,65535
 18206b0:	10c000c3 	ldbu	r3,3(r2)
 18206b4:	1806703a 	and	r3,r3,zero
 18206b8:	1809883a 	mov	r4,r3
 18206bc:	2807883a 	mov	r3,r5
 18206c0:	20c6b03a 	or	r3,r4,r3
 18206c4:	10c000c5 	stb	r3,3(r2)
  tcphdr->seqno = htonl(seqno);
 18206c8:	e0bffa17 	ldw	r2,-24(fp)
 18206cc:	1006d63a 	srli	r3,r2,24
 18206d0:	e0bffa17 	ldw	r2,-24(fp)
 18206d4:	1004d23a 	srli	r2,r2,8
 18206d8:	10bfc00c 	andi	r2,r2,65280
 18206dc:	1886b03a 	or	r3,r3,r2
 18206e0:	e0bffa17 	ldw	r2,-24(fp)
 18206e4:	10bfc00c 	andi	r2,r2,65280
 18206e8:	1004923a 	slli	r2,r2,8
 18206ec:	1886b03a 	or	r3,r3,r2
 18206f0:	e0bffa17 	ldw	r2,-24(fp)
 18206f4:	1004963a 	slli	r2,r2,24
 18206f8:	1886b03a 	or	r3,r3,r2
 18206fc:	e0bff917 	ldw	r2,-28(fp)
 1820700:	19803fcc 	andi	r6,r3,255
 1820704:	11000103 	ldbu	r4,4(r2)
 1820708:	2008703a 	and	r4,r4,zero
 182070c:	200b883a 	mov	r5,r4
 1820710:	3009883a 	mov	r4,r6
 1820714:	2908b03a 	or	r4,r5,r4
 1820718:	11000105 	stb	r4,4(r2)
 182071c:	1808d23a 	srli	r4,r3,8
 1820720:	21803fcc 	andi	r6,r4,255
 1820724:	11000143 	ldbu	r4,5(r2)
 1820728:	2008703a 	and	r4,r4,zero
 182072c:	200b883a 	mov	r5,r4
 1820730:	3009883a 	mov	r4,r6
 1820734:	2908b03a 	or	r4,r5,r4
 1820738:	11000145 	stb	r4,5(r2)
 182073c:	1808d43a 	srli	r4,r3,16
 1820740:	21803fcc 	andi	r6,r4,255
 1820744:	11000183 	ldbu	r4,6(r2)
 1820748:	2008703a 	and	r4,r4,zero
 182074c:	200b883a 	mov	r5,r4
 1820750:	3009883a 	mov	r4,r6
 1820754:	2908b03a 	or	r4,r5,r4
 1820758:	11000185 	stb	r4,6(r2)
 182075c:	180ad63a 	srli	r5,r3,24
 1820760:	10c001c3 	ldbu	r3,7(r2)
 1820764:	1806703a 	and	r3,r3,zero
 1820768:	1809883a 	mov	r4,r3
 182076c:	2807883a 	mov	r3,r5
 1820770:	20c6b03a 	or	r3,r4,r3
 1820774:	10c001c5 	stb	r3,7(r2)
  tcphdr->ackno = htonl(ackno);
 1820778:	e0bffb17 	ldw	r2,-20(fp)
 182077c:	1006d63a 	srli	r3,r2,24
 1820780:	e0bffb17 	ldw	r2,-20(fp)
 1820784:	1004d23a 	srli	r2,r2,8
 1820788:	10bfc00c 	andi	r2,r2,65280
 182078c:	1886b03a 	or	r3,r3,r2
 1820790:	e0bffb17 	ldw	r2,-20(fp)
 1820794:	10bfc00c 	andi	r2,r2,65280
 1820798:	1004923a 	slli	r2,r2,8
 182079c:	1886b03a 	or	r3,r3,r2
 18207a0:	e0bffb17 	ldw	r2,-20(fp)
 18207a4:	1004963a 	slli	r2,r2,24
 18207a8:	1886b03a 	or	r3,r3,r2
 18207ac:	e0bff917 	ldw	r2,-28(fp)
 18207b0:	19803fcc 	andi	r6,r3,255
 18207b4:	11000203 	ldbu	r4,8(r2)
 18207b8:	2008703a 	and	r4,r4,zero
 18207bc:	200b883a 	mov	r5,r4
 18207c0:	3009883a 	mov	r4,r6
 18207c4:	2908b03a 	or	r4,r5,r4
 18207c8:	11000205 	stb	r4,8(r2)
 18207cc:	1808d23a 	srli	r4,r3,8
 18207d0:	21803fcc 	andi	r6,r4,255
 18207d4:	11000243 	ldbu	r4,9(r2)
 18207d8:	2008703a 	and	r4,r4,zero
 18207dc:	200b883a 	mov	r5,r4
 18207e0:	3009883a 	mov	r4,r6
 18207e4:	2908b03a 	or	r4,r5,r4
 18207e8:	11000245 	stb	r4,9(r2)
 18207ec:	1808d43a 	srli	r4,r3,16
 18207f0:	21803fcc 	andi	r6,r4,255
 18207f4:	11000283 	ldbu	r4,10(r2)
 18207f8:	2008703a 	and	r4,r4,zero
 18207fc:	200b883a 	mov	r5,r4
 1820800:	3009883a 	mov	r4,r6
 1820804:	2908b03a 	or	r4,r5,r4
 1820808:	11000285 	stb	r4,10(r2)
 182080c:	180ad63a 	srli	r5,r3,24
 1820810:	10c002c3 	ldbu	r3,11(r2)
 1820814:	1806703a 	and	r3,r3,zero
 1820818:	1809883a 	mov	r4,r3
 182081c:	2807883a 	mov	r3,r5
 1820820:	20c6b03a 	or	r3,r4,r3
 1820824:	10c002c5 	stb	r3,11(r2)
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 1820828:	e0bff917 	ldw	r2,-28(fp)
 182082c:	10c00303 	ldbu	r3,12(r2)
 1820830:	1806703a 	and	r3,r3,zero
 1820834:	18c01414 	ori	r3,r3,80
 1820838:	10c00305 	stb	r3,12(r2)
 182083c:	10c00343 	ldbu	r3,13(r2)
 1820840:	1806703a 	and	r3,r3,zero
 1820844:	18c00514 	ori	r3,r3,20
 1820848:	10c00345 	stb	r3,13(r2)
  tcphdr->wnd = PP_HTONS(TCP_WND);
 182084c:	e0bff917 	ldw	r2,-28(fp)
 1820850:	10c00383 	ldbu	r3,14(r2)
 1820854:	1806703a 	and	r3,r3,zero
 1820858:	18c00814 	ori	r3,r3,32
 182085c:	10c00385 	stb	r3,14(r2)
 1820860:	10c003c3 	ldbu	r3,15(r2)
 1820864:	1806703a 	and	r3,r3,zero
 1820868:	10c003c5 	stb	r3,15(r2)
  tcphdr->chksum = 0;
 182086c:	e0bff917 	ldw	r2,-28(fp)
 1820870:	10c00403 	ldbu	r3,16(r2)
 1820874:	1806703a 	and	r3,r3,zero
 1820878:	10c00405 	stb	r3,16(r2)
 182087c:	10c00443 	ldbu	r3,17(r2)
 1820880:	1806703a 	and	r3,r3,zero
 1820884:	10c00445 	stb	r3,17(r2)
  tcphdr->urgp = 0;
 1820888:	e0bff917 	ldw	r2,-28(fp)
 182088c:	10c00483 	ldbu	r3,18(r2)
 1820890:	1806703a 	and	r3,r3,zero
 1820894:	10c00485 	stb	r3,18(r2)
 1820898:	10c004c3 	ldbu	r3,19(r2)
 182089c:	1806703a 	and	r3,r3,zero
 18208a0:	10c004c5 	stb	r3,19(r2)

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
              IP_PROTO_TCP, p->tot_len);
 18208a4:	e0bff817 	ldw	r2,-32(fp)
 18208a8:	1080020b 	ldhu	r2,8(r2)
  tcphdr->wnd = PP_HTONS(TCP_WND);
  tcphdr->chksum = 0;
  tcphdr->urgp = 0;

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
 18208ac:	10bfffcc 	andi	r2,r2,65535
 18208b0:	d8800015 	stw	r2,0(sp)
 18208b4:	01c00184 	movi	r7,6
 18208b8:	e1bffd17 	ldw	r6,-12(fp)
 18208bc:	e17ffc17 	ldw	r5,-16(fp)
 18208c0:	e13ff817 	ldw	r4,-32(fp)
 18208c4:	18313300 	call	1831330 <inet_chksum_pseudo>
 18208c8:	100d883a 	mov	r6,r2
 18208cc:	e0bff917 	ldw	r2,-28(fp)
 18208d0:	30ffffcc 	andi	r3,r6,65535
 18208d4:	19403fcc 	andi	r5,r3,255
 18208d8:	10c00403 	ldbu	r3,16(r2)
 18208dc:	1806703a 	and	r3,r3,zero
 18208e0:	1809883a 	mov	r4,r3
 18208e4:	2807883a 	mov	r3,r5
 18208e8:	20c6b03a 	or	r3,r4,r3
 18208ec:	10c00405 	stb	r3,16(r2)
 18208f0:	30ffffcc 	andi	r3,r6,65535
 18208f4:	1806d23a 	srli	r3,r3,8
 18208f8:	197fffcc 	andi	r5,r3,65535
 18208fc:	10c00443 	ldbu	r3,17(r2)
 1820900:	1806703a 	and	r3,r3,zero
 1820904:	1809883a 	mov	r4,r3
 1820908:	2807883a 	mov	r3,r5
 182090c:	20c6b03a 	or	r3,r4,r3
 1820910:	10c00445 	stb	r3,17(r2)
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 1820914:	008061f4 	movhi	r2,391
 1820918:	10a77104 	addi	r2,r2,-25148
 182091c:	10804817 	ldw	r2,288(r2)
 1820920:	10c00044 	addi	r3,r2,1
 1820924:	008061f4 	movhi	r2,391
 1820928:	10a77104 	addi	r2,r2,-25148
 182092c:	10c04815 	stw	r3,288(r2)
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
 1820930:	00800184 	movi	r2,6
 1820934:	d8800115 	stw	r2,4(sp)
 1820938:	d8000015 	stw	zero,0(sp)
 182093c:	01c01004 	movi	r7,64
 1820940:	e1bffd17 	ldw	r6,-12(fp)
 1820944:	e17ffc17 	ldw	r5,-16(fp)
 1820948:	e13ff817 	ldw	r4,-32(fp)
 182094c:	18325880 	call	1832588 <ip_output>
  pbuf_free(p);
 1820950:	e13ff817 	ldw	r4,-32(fp)
 1820954:	181a9040 	call	181a904 <pbuf_free>
 1820958:	00000106 	br	1820960 <tcp_rst+0x3b8>
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  if (p == NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
      return;
 182095c:	0001883a 	nop
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  pbuf_free(p);
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 1820960:	e037883a 	mov	sp,fp
 1820964:	dfc00117 	ldw	ra,4(sp)
 1820968:	df000017 	ldw	fp,0(sp)
 182096c:	dec00204 	addi	sp,sp,8
 1820970:	f800283a 	ret

01820974 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 1820974:	defffc04 	addi	sp,sp,-16
 1820978:	dfc00315 	stw	ra,12(sp)
 182097c:	df000215 	stw	fp,8(sp)
 1820980:	df000204 	addi	fp,sp,8
 1820984:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 1820988:	e0bfff17 	ldw	r2,-4(fp)
 182098c:	10801d17 	ldw	r2,116(r2)
 1820990:	10001f26 	beq	r2,zero,1820a10 <tcp_rexmit_rto+0x9c>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 1820994:	e0bfff17 	ldw	r2,-4(fp)
 1820998:	10801d17 	ldw	r2,116(r2)
 182099c:	e0bffe15 	stw	r2,-8(fp)
 18209a0:	00000306 	br	18209b0 <tcp_rexmit_rto+0x3c>
 18209a4:	e0bffe17 	ldw	r2,-8(fp)
 18209a8:	10800017 	ldw	r2,0(r2)
 18209ac:	e0bffe15 	stw	r2,-8(fp)
 18209b0:	e0bffe17 	ldw	r2,-8(fp)
 18209b4:	10800017 	ldw	r2,0(r2)
 18209b8:	103ffa1e 	bne	r2,zero,18209a4 <__alt_mem_mem_0+0xff8009a4>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 18209bc:	e0bfff17 	ldw	r2,-4(fp)
 18209c0:	10c01c17 	ldw	r3,112(r2)
 18209c4:	e0bffe17 	ldw	r2,-8(fp)
 18209c8:	10c00015 	stw	r3,0(r2)
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 18209cc:	e0bfff17 	ldw	r2,-4(fp)
 18209d0:	10c01d17 	ldw	r3,116(r2)
 18209d4:	e0bfff17 	ldw	r2,-4(fp)
 18209d8:	10c01c15 	stw	r3,112(r2)
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 18209dc:	e0bfff17 	ldw	r2,-4(fp)
 18209e0:	10001d15 	stw	zero,116(r2)
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
 18209e4:	e0bfff17 	ldw	r2,-4(fp)
 18209e8:	10801283 	ldbu	r2,74(r2)
 18209ec:	10800044 	addi	r2,r2,1
 18209f0:	1007883a 	mov	r3,r2
 18209f4:	e0bfff17 	ldw	r2,-4(fp)
 18209f8:	10c01285 	stb	r3,74(r2)

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 18209fc:	e0bfff17 	ldw	r2,-4(fp)
 1820a00:	10000f15 	stw	zero,60(r2)

  /* Do the actual retransmission */
  tcp_output(pcb);
 1820a04:	e13fff17 	ldw	r4,-4(fp)
 1820a08:	181f4fc0 	call	181f4fc <tcp_output>
 1820a0c:	00000106 	br	1820a14 <tcp_rexmit_rto+0xa0>
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
    return;
 1820a10:	0001883a 	nop
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 1820a14:	e037883a 	mov	sp,fp
 1820a18:	dfc00117 	ldw	ra,4(sp)
 1820a1c:	df000017 	ldw	fp,0(sp)
 1820a20:	dec00204 	addi	sp,sp,8
 1820a24:	f800283a 	ret

01820a28 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 1820a28:	defffc04 	addi	sp,sp,-16
 1820a2c:	df000315 	stw	fp,12(sp)
 1820a30:	df000304 	addi	fp,sp,12
 1820a34:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 1820a38:	e0bfff17 	ldw	r2,-4(fp)
 1820a3c:	10801d17 	ldw	r2,116(r2)
 1820a40:	10009e26 	beq	r2,zero,1820cbc <tcp_rexmit+0x294>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 1820a44:	e0bfff17 	ldw	r2,-4(fp)
 1820a48:	10801d17 	ldw	r2,116(r2)
 1820a4c:	e0bffe15 	stw	r2,-8(fp)
  pcb->unacked = seg->next;
 1820a50:	e0bffe17 	ldw	r2,-8(fp)
 1820a54:	10c00017 	ldw	r3,0(r2)
 1820a58:	e0bfff17 	ldw	r2,-4(fp)
 1820a5c:	10c01d15 	stw	r3,116(r2)

  cur_seg = &(pcb->unsent);
 1820a60:	e0bfff17 	ldw	r2,-4(fp)
 1820a64:	10801c04 	addi	r2,r2,112
 1820a68:	e0bffd15 	stw	r2,-12(fp)
  while (*cur_seg &&
 1820a6c:	00000306 	br	1820a7c <tcp_rexmit+0x54>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 1820a70:	e0bffd17 	ldw	r2,-12(fp)
 1820a74:	10800017 	ldw	r2,0(r2)
 1820a78:	e0bffd15 	stw	r2,-12(fp)
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 1820a7c:	e0bffd17 	ldw	r2,-12(fp)
 1820a80:	10800017 	ldw	r2,0(r2)
 1820a84:	10007826 	beq	r2,zero,1820c68 <tcp_rexmit+0x240>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 1820a88:	e0bffd17 	ldw	r2,-12(fp)
 1820a8c:	10800017 	ldw	r2,0(r2)
 1820a90:	10800417 	ldw	r2,16(r2)
 1820a94:	10c00103 	ldbu	r3,4(r2)
 1820a98:	11000143 	ldbu	r4,5(r2)
 1820a9c:	2008923a 	slli	r4,r4,8
 1820aa0:	20c6b03a 	or	r3,r4,r3
 1820aa4:	11000183 	ldbu	r4,6(r2)
 1820aa8:	2008943a 	slli	r4,r4,16
 1820aac:	20c6b03a 	or	r3,r4,r3
 1820ab0:	108001c3 	ldbu	r2,7(r2)
 1820ab4:	1004963a 	slli	r2,r2,24
 1820ab8:	10c4b03a 	or	r2,r2,r3
 1820abc:	1006d63a 	srli	r3,r2,24
 1820ac0:	e0bffd17 	ldw	r2,-12(fp)
 1820ac4:	10800017 	ldw	r2,0(r2)
 1820ac8:	10800417 	ldw	r2,16(r2)
 1820acc:	11000103 	ldbu	r4,4(r2)
 1820ad0:	11400143 	ldbu	r5,5(r2)
 1820ad4:	280a923a 	slli	r5,r5,8
 1820ad8:	2908b03a 	or	r4,r5,r4
 1820adc:	11400183 	ldbu	r5,6(r2)
 1820ae0:	280a943a 	slli	r5,r5,16
 1820ae4:	2908b03a 	or	r4,r5,r4
 1820ae8:	108001c3 	ldbu	r2,7(r2)
 1820aec:	1004963a 	slli	r2,r2,24
 1820af0:	1104b03a 	or	r2,r2,r4
 1820af4:	1004d23a 	srli	r2,r2,8
 1820af8:	10bfc00c 	andi	r2,r2,65280
 1820afc:	1886b03a 	or	r3,r3,r2
 1820b00:	e0bffd17 	ldw	r2,-12(fp)
 1820b04:	10800017 	ldw	r2,0(r2)
 1820b08:	10800417 	ldw	r2,16(r2)
 1820b0c:	11000103 	ldbu	r4,4(r2)
 1820b10:	11400143 	ldbu	r5,5(r2)
 1820b14:	280a923a 	slli	r5,r5,8
 1820b18:	2908b03a 	or	r4,r5,r4
 1820b1c:	11400183 	ldbu	r5,6(r2)
 1820b20:	280a943a 	slli	r5,r5,16
 1820b24:	2908b03a 	or	r4,r5,r4
 1820b28:	108001c3 	ldbu	r2,7(r2)
 1820b2c:	1004963a 	slli	r2,r2,24
 1820b30:	1104b03a 	or	r2,r2,r4
 1820b34:	10bfc00c 	andi	r2,r2,65280
 1820b38:	1004923a 	slli	r2,r2,8
 1820b3c:	1886b03a 	or	r3,r3,r2
 1820b40:	e0bffd17 	ldw	r2,-12(fp)
 1820b44:	10800017 	ldw	r2,0(r2)
 1820b48:	10800417 	ldw	r2,16(r2)
 1820b4c:	11000103 	ldbu	r4,4(r2)
 1820b50:	11400143 	ldbu	r5,5(r2)
 1820b54:	280a923a 	slli	r5,r5,8
 1820b58:	2908b03a 	or	r4,r5,r4
 1820b5c:	11400183 	ldbu	r5,6(r2)
 1820b60:	280a943a 	slli	r5,r5,16
 1820b64:	2908b03a 	or	r4,r5,r4
 1820b68:	108001c3 	ldbu	r2,7(r2)
 1820b6c:	1004963a 	slli	r2,r2,24
 1820b70:	1104b03a 	or	r2,r2,r4
 1820b74:	1004963a 	slli	r2,r2,24
 1820b78:	1886b03a 	or	r3,r3,r2
 1820b7c:	e0bffe17 	ldw	r2,-8(fp)
 1820b80:	10800417 	ldw	r2,16(r2)
 1820b84:	11000103 	ldbu	r4,4(r2)
 1820b88:	11400143 	ldbu	r5,5(r2)
 1820b8c:	280a923a 	slli	r5,r5,8
 1820b90:	2908b03a 	or	r4,r5,r4
 1820b94:	11400183 	ldbu	r5,6(r2)
 1820b98:	280a943a 	slli	r5,r5,16
 1820b9c:	2908b03a 	or	r4,r5,r4
 1820ba0:	108001c3 	ldbu	r2,7(r2)
 1820ba4:	1004963a 	slli	r2,r2,24
 1820ba8:	1104b03a 	or	r2,r2,r4
 1820bac:	1008d63a 	srli	r4,r2,24
 1820bb0:	e0bffe17 	ldw	r2,-8(fp)
 1820bb4:	10800417 	ldw	r2,16(r2)
 1820bb8:	11400103 	ldbu	r5,4(r2)
 1820bbc:	11800143 	ldbu	r6,5(r2)
 1820bc0:	300c923a 	slli	r6,r6,8
 1820bc4:	314ab03a 	or	r5,r6,r5
 1820bc8:	11800183 	ldbu	r6,6(r2)
 1820bcc:	300c943a 	slli	r6,r6,16
 1820bd0:	314ab03a 	or	r5,r6,r5
 1820bd4:	108001c3 	ldbu	r2,7(r2)
 1820bd8:	1004963a 	slli	r2,r2,24
 1820bdc:	1144b03a 	or	r2,r2,r5
 1820be0:	1004d23a 	srli	r2,r2,8
 1820be4:	10bfc00c 	andi	r2,r2,65280
 1820be8:	2088b03a 	or	r4,r4,r2
 1820bec:	e0bffe17 	ldw	r2,-8(fp)
 1820bf0:	10800417 	ldw	r2,16(r2)
 1820bf4:	11400103 	ldbu	r5,4(r2)
 1820bf8:	11800143 	ldbu	r6,5(r2)
 1820bfc:	300c923a 	slli	r6,r6,8
 1820c00:	314ab03a 	or	r5,r6,r5
 1820c04:	11800183 	ldbu	r6,6(r2)
 1820c08:	300c943a 	slli	r6,r6,16
 1820c0c:	314ab03a 	or	r5,r6,r5
 1820c10:	108001c3 	ldbu	r2,7(r2)
 1820c14:	1004963a 	slli	r2,r2,24
 1820c18:	1144b03a 	or	r2,r2,r5
 1820c1c:	10bfc00c 	andi	r2,r2,65280
 1820c20:	1004923a 	slli	r2,r2,8
 1820c24:	2088b03a 	or	r4,r4,r2
 1820c28:	e0bffe17 	ldw	r2,-8(fp)
 1820c2c:	10800417 	ldw	r2,16(r2)
 1820c30:	11400103 	ldbu	r5,4(r2)
 1820c34:	11800143 	ldbu	r6,5(r2)
 1820c38:	300c923a 	slli	r6,r6,8
 1820c3c:	314ab03a 	or	r5,r6,r5
 1820c40:	11800183 	ldbu	r6,6(r2)
 1820c44:	300c943a 	slli	r6,r6,16
 1820c48:	314ab03a 	or	r5,r6,r5
 1820c4c:	108001c3 	ldbu	r2,7(r2)
 1820c50:	1004963a 	slli	r2,r2,24
 1820c54:	1144b03a 	or	r2,r2,r5
 1820c58:	1004963a 	slli	r2,r2,24
 1820c5c:	2084b03a 	or	r2,r4,r2
 1820c60:	1885c83a 	sub	r2,r3,r2
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 1820c64:	103f8216 	blt	r2,zero,1820a70 <__alt_mem_mem_0+0xff800a70>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 1820c68:	e0bffd17 	ldw	r2,-12(fp)
 1820c6c:	10c00017 	ldw	r3,0(r2)
 1820c70:	e0bffe17 	ldw	r2,-8(fp)
 1820c74:	10c00015 	stw	r3,0(r2)
  *cur_seg = seg;
 1820c78:	e0bffd17 	ldw	r2,-12(fp)
 1820c7c:	e0fffe17 	ldw	r3,-8(fp)
 1820c80:	10c00015 	stw	r3,0(r2)
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 1820c84:	e0bffe17 	ldw	r2,-8(fp)
 1820c88:	10800017 	ldw	r2,0(r2)
 1820c8c:	1000021e 	bne	r2,zero,1820c98 <tcp_rexmit+0x270>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 1820c90:	e0bfff17 	ldw	r2,-4(fp)
 1820c94:	10001b8d 	sth	zero,110(r2)
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 1820c98:	e0bfff17 	ldw	r2,-4(fp)
 1820c9c:	10801283 	ldbu	r2,74(r2)
 1820ca0:	10800044 	addi	r2,r2,1
 1820ca4:	1007883a 	mov	r3,r2
 1820ca8:	e0bfff17 	ldw	r2,-4(fp)
 1820cac:	10c01285 	stb	r3,74(r2)

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 1820cb0:	e0bfff17 	ldw	r2,-4(fp)
 1820cb4:	10000f15 	stw	zero,60(r2)
 1820cb8:	00000106 	br	1820cc0 <tcp_rexmit+0x298>
{
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
    return;
 1820cbc:	0001883a 	nop

  /* Do the actual retransmission. */
  snmp_inc_tcpretranssegs();
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 1820cc0:	e037883a 	mov	sp,fp
 1820cc4:	df000017 	ldw	fp,0(sp)
 1820cc8:	dec00104 	addi	sp,sp,4
 1820ccc:	f800283a 	ret

01820cd0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 1820cd0:	defffd04 	addi	sp,sp,-12
 1820cd4:	dfc00215 	stw	ra,8(sp)
 1820cd8:	df000115 	stw	fp,4(sp)
 1820cdc:	df000104 	addi	fp,sp,4
 1820ce0:	e13fff15 	stw	r4,-4(fp)
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 1820ce4:	e0bfff17 	ldw	r2,-4(fp)
 1820ce8:	10801d17 	ldw	r2,116(r2)
 1820cec:	10003c26 	beq	r2,zero,1820de0 <tcp_rexmit_fast+0x110>
 1820cf0:	e0bfff17 	ldw	r2,-4(fp)
 1820cf4:	10800883 	ldbu	r2,34(r2)
 1820cf8:	10803fcc 	andi	r2,r2,255
 1820cfc:	1080010c 	andi	r2,r2,4
 1820d00:	1000371e 	bne	r2,zero,1820de0 <tcp_rexmit_fast+0x110>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 1820d04:	e13fff17 	ldw	r4,-4(fp)
 1820d08:	1820a280 	call	1820a28 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 1820d0c:	e0bfff17 	ldw	r2,-4(fp)
 1820d10:	1100140b 	ldhu	r4,80(r2)
 1820d14:	e0bfff17 	ldw	r2,-4(fp)
 1820d18:	10c0190b 	ldhu	r3,100(r2)
 1820d1c:	20bfffcc 	andi	r2,r4,65535
 1820d20:	18ffffcc 	andi	r3,r3,65535
 1820d24:	1880082e 	bgeu	r3,r2,1820d48 <tcp_rexmit_fast+0x78>
      pcb->ssthresh = pcb->snd_wnd / 2;
 1820d28:	e0bfff17 	ldw	r2,-4(fp)
 1820d2c:	1080190b 	ldhu	r2,100(r2)
 1820d30:	10bfffcc 	andi	r2,r2,65535
 1820d34:	1004d07a 	srli	r2,r2,1
 1820d38:	1007883a 	mov	r3,r2
 1820d3c:	e0bfff17 	ldw	r2,-4(fp)
 1820d40:	10c0148d 	sth	r3,82(r2)
 1820d44:	00000706 	br	1820d64 <tcp_rexmit_fast+0x94>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 1820d48:	e0bfff17 	ldw	r2,-4(fp)
 1820d4c:	1080140b 	ldhu	r2,80(r2)
 1820d50:	10bfffcc 	andi	r2,r2,65535
 1820d54:	1004d07a 	srli	r2,r2,1
 1820d58:	1007883a 	mov	r3,r2
 1820d5c:	e0bfff17 	ldw	r2,-4(fp)
 1820d60:	10c0148d 	sth	r3,82(r2)
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
 1820d64:	e0bfff17 	ldw	r2,-4(fp)
 1820d68:	1080148b 	ldhu	r2,82(r2)
 1820d6c:	10ffffcc 	andi	r3,r2,65535
 1820d70:	e0bfff17 	ldw	r2,-4(fp)
 1820d74:	10800e8b 	ldhu	r2,58(r2)
 1820d78:	10bfffcc 	andi	r2,r2,65535
 1820d7c:	1085883a 	add	r2,r2,r2
 1820d80:	1880060e 	bge	r3,r2,1820d9c <tcp_rexmit_fast+0xcc>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
 1820d84:	e0bfff17 	ldw	r2,-4(fp)
 1820d88:	10800e8b 	ldhu	r2,58(r2)
 1820d8c:	1085883a 	add	r2,r2,r2
 1820d90:	1007883a 	mov	r3,r2
 1820d94:	e0bfff17 	ldw	r2,-4(fp)
 1820d98:	10c0148d 	sth	r3,82(r2)
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 1820d9c:	e0bfff17 	ldw	r2,-4(fp)
 1820da0:	1100148b 	ldhu	r4,82(r2)
 1820da4:	e0bfff17 	ldw	r2,-4(fp)
 1820da8:	10c00e8b 	ldhu	r3,58(r2)
 1820dac:	1805883a 	mov	r2,r3
 1820db0:	1085883a 	add	r2,r2,r2
 1820db4:	10c5883a 	add	r2,r2,r3
 1820db8:	2085883a 	add	r2,r4,r2
 1820dbc:	1007883a 	mov	r3,r2
 1820dc0:	e0bfff17 	ldw	r2,-4(fp)
 1820dc4:	10c0140d 	sth	r3,80(r2)
    pcb->flags |= TF_INFR;
 1820dc8:	e0bfff17 	ldw	r2,-4(fp)
 1820dcc:	10800883 	ldbu	r2,34(r2)
 1820dd0:	10800114 	ori	r2,r2,4
 1820dd4:	1007883a 	mov	r3,r2
 1820dd8:	e0bfff17 	ldw	r2,-4(fp)
 1820ddc:	10c00885 	stb	r3,34(r2)
  } 
}
 1820de0:	0001883a 	nop
 1820de4:	e037883a 	mov	sp,fp
 1820de8:	dfc00117 	ldw	ra,4(sp)
 1820dec:	df000017 	ldw	fp,0(sp)
 1820df0:	dec00204 	addi	sp,sp,8
 1820df4:	f800283a 	ret

01820df8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
 1820df8:	defff804 	addi	sp,sp,-32
 1820dfc:	dfc00715 	stw	ra,28(sp)
 1820e00:	df000615 	stw	fp,24(sp)
 1820e04:	df000604 	addi	fp,sp,24
 1820e08:	e13fff15 	stw	r4,-4(fp)
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
 1820e0c:	e0bfff17 	ldw	r2,-4(fp)
 1820e10:	10801517 	ldw	r2,84(r2)
 1820e14:	10bfffc4 	addi	r2,r2,-1
 1820e18:	1006d63a 	srli	r3,r2,24
 1820e1c:	e0bfff17 	ldw	r2,-4(fp)
 1820e20:	10801517 	ldw	r2,84(r2)
 1820e24:	10bfffc4 	addi	r2,r2,-1
 1820e28:	1004d23a 	srli	r2,r2,8
 1820e2c:	10bfc00c 	andi	r2,r2,65280
 1820e30:	1886b03a 	or	r3,r3,r2
 1820e34:	e0bfff17 	ldw	r2,-4(fp)
 1820e38:	10801517 	ldw	r2,84(r2)
 1820e3c:	10bfffc4 	addi	r2,r2,-1
 1820e40:	10bfc00c 	andi	r2,r2,65280
 1820e44:	1004923a 	slli	r2,r2,8
 1820e48:	1886b03a 	or	r3,r3,r2
 1820e4c:	e0bfff17 	ldw	r2,-4(fp)
 1820e50:	10801517 	ldw	r2,84(r2)
 1820e54:	10bfffc4 	addi	r2,r2,-1
 1820e58:	1004963a 	slli	r2,r2,24
 1820e5c:	1884b03a 	or	r2,r3,r2
 1820e60:	100f883a 	mov	r7,r2
 1820e64:	000d883a 	mov	r6,zero
 1820e68:	000b883a 	mov	r5,zero
 1820e6c:	e13fff17 	ldw	r4,-4(fp)
 1820e70:	181db7c0 	call	181db7c <tcp_output_alloc_header>
 1820e74:	e0bffd15 	stw	r2,-12(fp)
  if(p == NULL) {
 1820e78:	e0bffd17 	ldw	r2,-12(fp)
 1820e7c:	10003d26 	beq	r2,zero,1820f74 <tcp_keepalive+0x17c>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 1820e80:	e0bffd17 	ldw	r2,-12(fp)
 1820e84:	10800117 	ldw	r2,4(r2)
 1820e88:	e0bffe15 	stw	r2,-8(fp)

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 1820e8c:	e0ffff17 	ldw	r3,-4(fp)
 1820e90:	e0bfff17 	ldw	r2,-4(fp)
 1820e94:	11000104 	addi	r4,r2,4
                                      IP_PROTO_TCP, p->tot_len);
 1820e98:	e0bffd17 	ldw	r2,-12(fp)
 1820e9c:	1080020b 	ldhu	r2,8(r2)
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 1820ea0:	10bfffcc 	andi	r2,r2,65535
 1820ea4:	d8800015 	stw	r2,0(sp)
 1820ea8:	01c00184 	movi	r7,6
 1820eac:	200d883a 	mov	r6,r4
 1820eb0:	180b883a 	mov	r5,r3
 1820eb4:	e13ffd17 	ldw	r4,-12(fp)
 1820eb8:	18313300 	call	1831330 <inet_chksum_pseudo>
 1820ebc:	100d883a 	mov	r6,r2
 1820ec0:	e0bffe17 	ldw	r2,-8(fp)
 1820ec4:	30ffffcc 	andi	r3,r6,65535
 1820ec8:	19403fcc 	andi	r5,r3,255
 1820ecc:	10c00403 	ldbu	r3,16(r2)
 1820ed0:	1806703a 	and	r3,r3,zero
 1820ed4:	1809883a 	mov	r4,r3
 1820ed8:	2807883a 	mov	r3,r5
 1820edc:	20c6b03a 	or	r3,r4,r3
 1820ee0:	10c00405 	stb	r3,16(r2)
 1820ee4:	30ffffcc 	andi	r3,r6,65535
 1820ee8:	1806d23a 	srli	r3,r3,8
 1820eec:	197fffcc 	andi	r5,r3,65535
 1820ef0:	10c00443 	ldbu	r3,17(r2)
 1820ef4:	1806703a 	and	r3,r3,zero
 1820ef8:	1809883a 	mov	r4,r3
 1820efc:	2807883a 	mov	r3,r5
 1820f00:	20c6b03a 	or	r3,r4,r3
 1820f04:	10c00445 	stb	r3,17(r2)
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 1820f08:	008061f4 	movhi	r2,391
 1820f0c:	10a77104 	addi	r2,r2,-25148
 1820f10:	10804817 	ldw	r2,288(r2)
 1820f14:	10c00044 	addi	r3,r2,1
 1820f18:	008061f4 	movhi	r2,391
 1820f1c:	10a77104 	addi	r2,r2,-25148
 1820f20:	10c04815 	stw	r3,288(r2)

  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
 1820f24:	e0ffff17 	ldw	r3,-4(fp)
 1820f28:	e0bfff17 	ldw	r2,-4(fp)
 1820f2c:	11000104 	addi	r4,r2,4
 1820f30:	e0bfff17 	ldw	r2,-4(fp)
 1820f34:	10800283 	ldbu	r2,10(r2)
 1820f38:	11403fcc 	andi	r5,r2,255
 1820f3c:	e0bfff17 	ldw	r2,-4(fp)
 1820f40:	108002c4 	addi	r2,r2,11
 1820f44:	d8800215 	stw	r2,8(sp)
 1820f48:	00800184 	movi	r2,6
 1820f4c:	d8800115 	stw	r2,4(sp)
 1820f50:	d8000015 	stw	zero,0(sp)
 1820f54:	280f883a 	mov	r7,r5
 1820f58:	200d883a 	mov	r6,r4
 1820f5c:	180b883a 	mov	r5,r3
 1820f60:	e13ffd17 	ldw	r4,-12(fp)
 1820f64:	183263c0 	call	183263c <ip_output_hinted>
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 1820f68:	e13ffd17 	ldw	r4,-12(fp)
 1820f6c:	181a9040 	call	181a904 <pbuf_free>
 1820f70:	00000106 	br	1820f78 <tcp_keepalive+0x180>
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
 1820f74:	0001883a 	nop

  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 1820f78:	e037883a 	mov	sp,fp
 1820f7c:	dfc00117 	ldw	ra,4(sp)
 1820f80:	df000017 	ldw	fp,0(sp)
 1820f84:	dec00204 	addi	sp,sp,8
 1820f88:	f800283a 	ret

01820f8c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 1820f8c:	defff504 	addi	sp,sp,-44
 1820f90:	dfc00a15 	stw	ra,40(sp)
 1820f94:	df000915 	stw	fp,36(sp)
 1820f98:	df000904 	addi	fp,sp,36
 1820f9c:	e13fff15 	stw	r4,-4(fp)
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
 1820fa0:	e0bfff17 	ldw	r2,-4(fp)
 1820fa4:	10801d17 	ldw	r2,116(r2)
 1820fa8:	e0bffa15 	stw	r2,-24(fp)

  if(seg == NULL) {
 1820fac:	e0bffa17 	ldw	r2,-24(fp)
 1820fb0:	1000031e 	bne	r2,zero,1820fc0 <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
 1820fb4:	e0bfff17 	ldw	r2,-4(fp)
 1820fb8:	10801c17 	ldw	r2,112(r2)
 1820fbc:	e0bffa15 	stw	r2,-24(fp)
  }
  if(seg == NULL) {
 1820fc0:	e0bffa17 	ldw	r2,-24(fp)
 1820fc4:	1000a326 	beq	r2,zero,1821254 <tcp_zero_window_probe+0x2c8>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 1820fc8:	e0bffa17 	ldw	r2,-24(fp)
 1820fcc:	10800417 	ldw	r2,16(r2)
 1820fd0:	10c00303 	ldbu	r3,12(r2)
 1820fd4:	10800343 	ldbu	r2,13(r2)
 1820fd8:	1004923a 	slli	r2,r2,8
 1820fdc:	10c4b03a 	or	r2,r2,r3
 1820fe0:	10bfffcc 	andi	r2,r2,65535
 1820fe4:	1004d23a 	srli	r2,r2,8
 1820fe8:	10ffffcc 	andi	r3,r2,65535
 1820fec:	e0bffa17 	ldw	r2,-24(fp)
 1820ff0:	10800417 	ldw	r2,16(r2)
 1820ff4:	11000303 	ldbu	r4,12(r2)
 1820ff8:	10800343 	ldbu	r2,13(r2)
 1820ffc:	1004923a 	slli	r2,r2,8
 1821000:	1104b03a 	or	r2,r2,r4
 1821004:	10bfffcc 	andi	r2,r2,65535
 1821008:	1004923a 	slli	r2,r2,8
 182100c:	10bfffcc 	andi	r2,r2,65535
 1821010:	1884b03a 	or	r2,r3,r2
 1821014:	1080004c 	andi	r2,r2,1
 1821018:	10000626 	beq	r2,zero,1821034 <tcp_zero_window_probe+0xa8>
 182101c:	e0bffa17 	ldw	r2,-24(fp)
 1821020:	1080020b 	ldhu	r2,8(r2)
 1821024:	10bfffcc 	andi	r2,r2,65535
 1821028:	1000021e 	bne	r2,zero,1821034 <tcp_zero_window_probe+0xa8>
 182102c:	00800044 	movi	r2,1
 1821030:	00000106 	br	1821038 <tcp_zero_window_probe+0xac>
 1821034:	0005883a 	mov	r2,zero
 1821038:	e0bffb05 	stb	r2,-20(fp)
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 182103c:	e0bffb03 	ldbu	r2,-20(fp)
 1821040:	1005003a 	cmpeq	r2,r2,zero
 1821044:	10803fcc 	andi	r2,r2,255
 1821048:	e0bffb8d 	sth	r2,-18(fp)

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 182104c:	e17ffb8b 	ldhu	r5,-18(fp)
 1821050:	e0bffa17 	ldw	r2,-24(fp)
 1821054:	10800417 	ldw	r2,16(r2)
 1821058:	10c00103 	ldbu	r3,4(r2)
 182105c:	11000143 	ldbu	r4,5(r2)
 1821060:	2008923a 	slli	r4,r4,8
 1821064:	20c6b03a 	or	r3,r4,r3
 1821068:	11000183 	ldbu	r4,6(r2)
 182106c:	2008943a 	slli	r4,r4,16
 1821070:	20c6b03a 	or	r3,r4,r3
 1821074:	108001c3 	ldbu	r2,7(r2)
 1821078:	1004963a 	slli	r2,r2,24
 182107c:	10c4b03a 	or	r2,r2,r3
 1821080:	100f883a 	mov	r7,r2
 1821084:	280d883a 	mov	r6,r5
 1821088:	000b883a 	mov	r5,zero
 182108c:	e13fff17 	ldw	r4,-4(fp)
 1821090:	181db7c0 	call	181db7c <tcp_output_alloc_header>
 1821094:	e0bffc15 	stw	r2,-16(fp)
  if(p == NULL) {
 1821098:	e0bffc17 	ldw	r2,-16(fp)
 182109c:	10006f26 	beq	r2,zero,182125c <tcp_zero_window_probe+0x2d0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 18210a0:	e0bffc17 	ldw	r2,-16(fp)
 18210a4:	10800117 	ldw	r2,4(r2)
 18210a8:	e0bffd15 	stw	r2,-12(fp)

  if (is_fin) {
 18210ac:	e0bffb03 	ldbu	r2,-20(fp)
 18210b0:	10001d26 	beq	r2,zero,1821128 <tcp_zero_window_probe+0x19c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 18210b4:	e0bffd17 	ldw	r2,-12(fp)
 18210b8:	10c00303 	ldbu	r3,12(r2)
 18210bc:	10800343 	ldbu	r2,13(r2)
 18210c0:	1004923a 	slli	r2,r2,8
 18210c4:	10c4b03a 	or	r2,r2,r3
 18210c8:	1007883a 	mov	r3,r2
 18210cc:	00b03fc4 	movi	r2,-16129
 18210d0:	1884703a 	and	r2,r3,r2
 18210d4:	10844014 	ori	r2,r2,4352
 18210d8:	100d883a 	mov	r6,r2
 18210dc:	e0bffd17 	ldw	r2,-12(fp)
 18210e0:	30ffffcc 	andi	r3,r6,65535
 18210e4:	19403fcc 	andi	r5,r3,255
 18210e8:	10c00303 	ldbu	r3,12(r2)
 18210ec:	1806703a 	and	r3,r3,zero
 18210f0:	1809883a 	mov	r4,r3
 18210f4:	2807883a 	mov	r3,r5
 18210f8:	20c6b03a 	or	r3,r4,r3
 18210fc:	10c00305 	stb	r3,12(r2)
 1821100:	30ffffcc 	andi	r3,r6,65535
 1821104:	1806d23a 	srli	r3,r3,8
 1821108:	197fffcc 	andi	r5,r3,65535
 182110c:	10c00343 	ldbu	r3,13(r2)
 1821110:	1806703a 	and	r3,r3,zero
 1821114:	1809883a 	mov	r4,r3
 1821118:	2807883a 	mov	r3,r5
 182111c:	20c6b03a 	or	r3,r4,r3
 1821120:	10c00345 	stb	r3,13(r2)
 1821124:	00001106 	br	182116c <tcp_zero_window_probe+0x1e0>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 1821128:	e0bffc17 	ldw	r2,-16(fp)
 182112c:	10800117 	ldw	r2,4(r2)
 1821130:	10800504 	addi	r2,r2,20
 1821134:	e0bffe15 	stw	r2,-8(fp)
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 1821138:	e0bffa17 	ldw	r2,-24(fp)
 182113c:	11000117 	ldw	r4,4(r2)
 1821140:	e0bffa17 	ldw	r2,-24(fp)
 1821144:	10800117 	ldw	r2,4(r2)
 1821148:	10c0020b 	ldhu	r3,8(r2)
 182114c:	e0bffa17 	ldw	r2,-24(fp)
 1821150:	1080020b 	ldhu	r2,8(r2)
 1821154:	1885c83a 	sub	r2,r3,r2
 1821158:	10bfffcc 	andi	r2,r2,65535
 182115c:	100f883a 	mov	r7,r2
 1821160:	01800044 	movi	r6,1
 1821164:	e17ffe17 	ldw	r5,-8(fp)
 1821168:	181aee80 	call	181aee8 <pbuf_copy_partial>
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 182116c:	e0ffff17 	ldw	r3,-4(fp)
 1821170:	e0bfff17 	ldw	r2,-4(fp)
 1821174:	11000104 	addi	r4,r2,4
                                      IP_PROTO_TCP, p->tot_len);
 1821178:	e0bffc17 	ldw	r2,-16(fp)
 182117c:	1080020b 	ldhu	r2,8(r2)
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 1821180:	10bfffcc 	andi	r2,r2,65535
 1821184:	d8800015 	stw	r2,0(sp)
 1821188:	01c00184 	movi	r7,6
 182118c:	200d883a 	mov	r6,r4
 1821190:	180b883a 	mov	r5,r3
 1821194:	e13ffc17 	ldw	r4,-16(fp)
 1821198:	18313300 	call	1831330 <inet_chksum_pseudo>
 182119c:	100d883a 	mov	r6,r2
 18211a0:	e0bffd17 	ldw	r2,-12(fp)
 18211a4:	30ffffcc 	andi	r3,r6,65535
 18211a8:	19403fcc 	andi	r5,r3,255
 18211ac:	10c00403 	ldbu	r3,16(r2)
 18211b0:	1806703a 	and	r3,r3,zero
 18211b4:	1809883a 	mov	r4,r3
 18211b8:	2807883a 	mov	r3,r5
 18211bc:	20c6b03a 	or	r3,r4,r3
 18211c0:	10c00405 	stb	r3,16(r2)
 18211c4:	30ffffcc 	andi	r3,r6,65535
 18211c8:	1806d23a 	srli	r3,r3,8
 18211cc:	197fffcc 	andi	r5,r3,65535
 18211d0:	10c00443 	ldbu	r3,17(r2)
 18211d4:	1806703a 	and	r3,r3,zero
 18211d8:	1809883a 	mov	r4,r3
 18211dc:	2807883a 	mov	r3,r5
 18211e0:	20c6b03a 	or	r3,r4,r3
 18211e4:	10c00445 	stb	r3,17(r2)
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 18211e8:	008061f4 	movhi	r2,391
 18211ec:	10a77104 	addi	r2,r2,-25148
 18211f0:	10804817 	ldw	r2,288(r2)
 18211f4:	10c00044 	addi	r3,r2,1
 18211f8:	008061f4 	movhi	r2,391
 18211fc:	10a77104 	addi	r2,r2,-25148
 1821200:	10c04815 	stw	r3,288(r2)

  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
 1821204:	e0ffff17 	ldw	r3,-4(fp)
 1821208:	e0bfff17 	ldw	r2,-4(fp)
 182120c:	11000104 	addi	r4,r2,4
 1821210:	e0bfff17 	ldw	r2,-4(fp)
 1821214:	10800283 	ldbu	r2,10(r2)
 1821218:	11403fcc 	andi	r5,r2,255
 182121c:	e0bfff17 	ldw	r2,-4(fp)
 1821220:	108002c4 	addi	r2,r2,11
 1821224:	d8800215 	stw	r2,8(sp)
 1821228:	00800184 	movi	r2,6
 182122c:	d8800115 	stw	r2,4(sp)
 1821230:	d8000015 	stw	zero,0(sp)
 1821234:	280f883a 	mov	r7,r5
 1821238:	200d883a 	mov	r6,r4
 182123c:	180b883a 	mov	r5,r3
 1821240:	e13ffc17 	ldw	r4,-16(fp)
 1821244:	183263c0 	call	183263c <ip_output_hinted>
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 1821248:	e13ffc17 	ldw	r4,-16(fp)
 182124c:	181a9040 	call	181a904 <pbuf_free>
 1821250:	00000306 	br	1821260 <tcp_zero_window_probe+0x2d4>

  if(seg == NULL) {
    seg = pcb->unsent;
  }
  if(seg == NULL) {
    return;
 1821254:	0001883a 	nop
 1821258:	00000106 	br	1821260 <tcp_zero_window_probe+0x2d4>
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
 182125c:	0001883a 	nop
  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 1821260:	e037883a 	mov	sp,fp
 1821264:	dfc00117 	ldw	ra,4(sp)
 1821268:	df000017 	ldw	fp,0(sp)
 182126c:	dec00204 	addi	sp,sp,8
 1821270:	f800283a 	ret

01821274 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 1821274:	defffd04 	addi	sp,sp,-12
 1821278:	dfc00215 	stw	ra,8(sp)
 182127c:	df000115 	stw	fp,4(sp)
 1821280:	df000104 	addi	fp,sp,4
 1821284:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 1821288:	181b6ec0 	call	181b6ec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 182128c:	d0a7f717 	ldw	r2,-24612(gp)
 1821290:	1000021e 	bne	r2,zero,182129c <tcpip_tcp_timer+0x28>
 1821294:	d0a7fc17 	ldw	r2,-24592(gp)
 1821298:	10000626 	beq	r2,zero,18212b4 <tcpip_tcp_timer+0x40>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 182129c:	000d883a 	mov	r6,zero
 18212a0:	014060b4 	movhi	r5,386
 18212a4:	29449d04 	addi	r5,r5,4724
 18212a8:	01003e84 	movi	r4,250
 18212ac:	18214b40 	call	18214b4 <sys_timeout>
 18212b0:	00000106 	br	18212b8 <tcpip_tcp_timer+0x44>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 18212b4:	d027fe15 	stw	zero,-24584(gp)
  }
}
 18212b8:	0001883a 	nop
 18212bc:	e037883a 	mov	sp,fp
 18212c0:	dfc00117 	ldw	ra,4(sp)
 18212c4:	df000017 	ldw	fp,0(sp)
 18212c8:	dec00204 	addi	sp,sp,8
 18212cc:	f800283a 	ret

018212d0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 18212d0:	defffe04 	addi	sp,sp,-8
 18212d4:	dfc00115 	stw	ra,4(sp)
 18212d8:	df000015 	stw	fp,0(sp)
 18212dc:	d839883a 	mov	fp,sp
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 18212e0:	d0a7fe17 	ldw	r2,-24584(gp)
 18212e4:	10000b1e 	bne	r2,zero,1821314 <tcp_timer_needed+0x44>
 18212e8:	d0a7f717 	ldw	r2,-24612(gp)
 18212ec:	1000021e 	bne	r2,zero,18212f8 <tcp_timer_needed+0x28>
 18212f0:	d0a7fc17 	ldw	r2,-24592(gp)
 18212f4:	10000726 	beq	r2,zero,1821314 <tcp_timer_needed+0x44>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 18212f8:	00800044 	movi	r2,1
 18212fc:	d0a7fe15 	stw	r2,-24584(gp)
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 1821300:	000d883a 	mov	r6,zero
 1821304:	014060b4 	movhi	r5,386
 1821308:	29449d04 	addi	r5,r5,4724
 182130c:	01003e84 	movi	r4,250
 1821310:	18214b40 	call	18214b4 <sys_timeout>
  }
}
 1821314:	0001883a 	nop
 1821318:	e037883a 	mov	sp,fp
 182131c:	dfc00117 	ldw	ra,4(sp)
 1821320:	df000017 	ldw	fp,0(sp)
 1821324:	dec00204 	addi	sp,sp,8
 1821328:	f800283a 	ret

0182132c <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
 182132c:	defffd04 	addi	sp,sp,-12
 1821330:	dfc00215 	stw	ra,8(sp)
 1821334:	df000115 	stw	fp,4(sp)
 1821338:	df000104 	addi	fp,sp,4
 182133c:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
 1821340:	183270c0 	call	183270c <ip_reass_tmr>
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 1821344:	000d883a 	mov	r6,zero
 1821348:	014060b4 	movhi	r5,386
 182134c:	2944cb04 	addi	r5,r5,4908
 1821350:	0100fa04 	movi	r4,1000
 1821354:	18214b40 	call	18214b4 <sys_timeout>
}
 1821358:	0001883a 	nop
 182135c:	e037883a 	mov	sp,fp
 1821360:	dfc00117 	ldw	ra,4(sp)
 1821364:	df000017 	ldw	fp,0(sp)
 1821368:	dec00204 	addi	sp,sp,8
 182136c:	f800283a 	ret

01821370 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
 1821370:	defffd04 	addi	sp,sp,-12
 1821374:	dfc00215 	stw	ra,8(sp)
 1821378:	df000115 	stw	fp,4(sp)
 182137c:	df000104 	addi	fp,sp,4
 1821380:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
 1821384:	18229f40 	call	18229f4 <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 1821388:	000d883a 	mov	r6,zero
 182138c:	014060b4 	movhi	r5,386
 1821390:	2944dc04 	addi	r5,r5,4976
 1821394:	0104e204 	movi	r4,5000
 1821398:	18214b40 	call	18214b4 <sys_timeout>
}
 182139c:	0001883a 	nop
 18213a0:	e037883a 	mov	sp,fp
 18213a4:	dfc00117 	ldw	ra,4(sp)
 18213a8:	df000017 	ldw	fp,0(sp)
 18213ac:	dec00204 	addi	sp,sp,8
 18213b0:	f800283a 	ret

018213b4 <dhcp_timer_coarse>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_coarse(void *arg)
{
 18213b4:	defffd04 	addi	sp,sp,-12
 18213b8:	dfc00215 	stw	ra,8(sp)
 18213bc:	df000115 	stw	fp,4(sp)
 18213c0:	df000104 	addi	fp,sp,4
 18213c4:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
 18213c8:	18158680 	call	1815868 <dhcp_coarse_tmr>
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 18213cc:	000d883a 	mov	r6,zero
 18213d0:	014060b4 	movhi	r5,386
 18213d4:	2944ed04 	addi	r5,r5,5044
 18213d8:	013a9814 	movui	r4,60000
 18213dc:	18214b40 	call	18214b4 <sys_timeout>
}
 18213e0:	0001883a 	nop
 18213e4:	e037883a 	mov	sp,fp
 18213e8:	dfc00117 	ldw	ra,4(sp)
 18213ec:	df000017 	ldw	fp,0(sp)
 18213f0:	dec00204 	addi	sp,sp,8
 18213f4:	f800283a 	ret

018213f8 <dhcp_timer_fine>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_fine(void *arg)
{
 18213f8:	defffd04 	addi	sp,sp,-12
 18213fc:	dfc00215 	stw	ra,8(sp)
 1821400:	df000115 	stw	fp,4(sp)
 1821404:	df000104 	addi	fp,sp,4
 1821408:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
 182140c:	18159100 	call	1815910 <dhcp_fine_tmr>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 1821410:	000d883a 	mov	r6,zero
 1821414:	014060b4 	movhi	r5,386
 1821418:	2944fe04 	addi	r5,r5,5112
 182141c:	01007d04 	movi	r4,500
 1821420:	18214b40 	call	18214b4 <sys_timeout>
}
 1821424:	0001883a 	nop
 1821428:	e037883a 	mov	sp,fp
 182142c:	dfc00117 	ldw	ra,4(sp)
 1821430:	df000017 	ldw	fp,0(sp)
 1821434:	dec00204 	addi	sp,sp,8
 1821438:	f800283a 	ret

0182143c <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
 182143c:	defffe04 	addi	sp,sp,-8
 1821440:	dfc00115 	stw	ra,4(sp)
 1821444:	df000015 	stw	fp,0(sp)
 1821448:	d839883a 	mov	fp,sp
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 182144c:	000d883a 	mov	r6,zero
 1821450:	014060b4 	movhi	r5,386
 1821454:	2944cb04 	addi	r5,r5,4908
 1821458:	0100fa04 	movi	r4,1000
 182145c:	18214b40 	call	18214b4 <sys_timeout>
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 1821460:	000d883a 	mov	r6,zero
 1821464:	014060b4 	movhi	r5,386
 1821468:	2944dc04 	addi	r5,r5,4976
 182146c:	0104e204 	movi	r4,5000
 1821470:	18214b40 	call	18214b4 <sys_timeout>
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 1821474:	000d883a 	mov	r6,zero
 1821478:	014060b4 	movhi	r5,386
 182147c:	2944ed04 	addi	r5,r5,5044
 1821480:	013a9814 	movui	r4,60000
 1821484:	18214b40 	call	18214b4 <sys_timeout>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 1821488:	000d883a 	mov	r6,zero
 182148c:	014060b4 	movhi	r5,386
 1821490:	2944fe04 	addi	r5,r5,5112
 1821494:	01007d04 	movi	r4,500
 1821498:	18214b40 	call	18214b4 <sys_timeout>

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
#endif
}
 182149c:	0001883a 	nop
 18214a0:	e037883a 	mov	sp,fp
 18214a4:	dfc00117 	ldw	ra,4(sp)
 18214a8:	df000017 	ldw	fp,0(sp)
 18214ac:	dec00204 	addi	sp,sp,8
 18214b0:	f800283a 	ret

018214b4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 18214b4:	defff904 	addi	sp,sp,-28
 18214b8:	dfc00615 	stw	ra,24(sp)
 18214bc:	df000515 	stw	fp,20(sp)
 18214c0:	df000504 	addi	fp,sp,20
 18214c4:	e13ffd15 	stw	r4,-12(fp)
 18214c8:	e17ffe15 	stw	r5,-8(fp)
 18214cc:	e1bfff15 	stw	r6,-4(fp)
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 18214d0:	01000304 	movi	r4,12
 18214d4:	18340280 	call	1834028 <memp_malloc>
 18214d8:	e0bffc15 	stw	r2,-16(fp)
  if (timeout == NULL) {
 18214dc:	e0bffc17 	ldw	r2,-16(fp)
 18214e0:	10004d26 	beq	r2,zero,1821618 <sys_timeout+0x164>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
 18214e4:	e0bffc17 	ldw	r2,-16(fp)
 18214e8:	10000015 	stw	zero,0(r2)
  timeout->h = handler;
 18214ec:	e0bffc17 	ldw	r2,-16(fp)
 18214f0:	e0fffe17 	ldw	r3,-8(fp)
 18214f4:	10c00215 	stw	r3,8(r2)
  timeout->arg = arg;
 18214f8:	e0bffc17 	ldw	r2,-16(fp)
 18214fc:	e0ffff17 	ldw	r3,-4(fp)
 1821500:	10c00315 	stw	r3,12(r2)
  timeout->time = msecs;
 1821504:	e0bffc17 	ldw	r2,-16(fp)
 1821508:	e0fffd17 	ldw	r3,-12(fp)
 182150c:	10c00115 	stw	r3,4(r2)
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 1821510:	d0a7fd17 	ldw	r2,-24588(gp)
 1821514:	1000031e 	bne	r2,zero,1821524 <sys_timeout+0x70>
    next_timeout = timeout;
 1821518:	e0bffc17 	ldw	r2,-16(fp)
 182151c:	d0a7fd15 	stw	r2,-24588(gp)
    return;
 1821520:	00003e06 	br	182161c <sys_timeout+0x168>
  }

  if (next_timeout->time > msecs) {
 1821524:	d0a7fd17 	ldw	r2,-24588(gp)
 1821528:	10800117 	ldw	r2,4(r2)
 182152c:	e0fffd17 	ldw	r3,-12(fp)
 1821530:	18800c2e 	bgeu	r3,r2,1821564 <sys_timeout+0xb0>
    next_timeout->time -= msecs;
 1821534:	d0a7fd17 	ldw	r2,-24588(gp)
 1821538:	d0e7fd17 	ldw	r3,-24588(gp)
 182153c:	19000117 	ldw	r4,4(r3)
 1821540:	e0fffd17 	ldw	r3,-12(fp)
 1821544:	20c7c83a 	sub	r3,r4,r3
 1821548:	10c00115 	stw	r3,4(r2)
    timeout->next = next_timeout;
 182154c:	d0e7fd17 	ldw	r3,-24588(gp)
 1821550:	e0bffc17 	ldw	r2,-16(fp)
 1821554:	10c00015 	stw	r3,0(r2)
    next_timeout = timeout;
 1821558:	e0bffc17 	ldw	r2,-16(fp)
 182155c:	d0a7fd15 	stw	r2,-24588(gp)
 1821560:	00002e06 	br	182161c <sys_timeout+0x168>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 1821564:	d0a7fd17 	ldw	r2,-24588(gp)
 1821568:	e0bffb15 	stw	r2,-20(fp)
 182156c:	00002706 	br	182160c <sys_timeout+0x158>
      timeout->time -= t->time;
 1821570:	e0bffc17 	ldw	r2,-16(fp)
 1821574:	10c00117 	ldw	r3,4(r2)
 1821578:	e0bffb17 	ldw	r2,-20(fp)
 182157c:	10800117 	ldw	r2,4(r2)
 1821580:	1887c83a 	sub	r3,r3,r2
 1821584:	e0bffc17 	ldw	r2,-16(fp)
 1821588:	10c00115 	stw	r3,4(r2)
      if (t->next == NULL || t->next->time > timeout->time) {
 182158c:	e0bffb17 	ldw	r2,-20(fp)
 1821590:	10800017 	ldw	r2,0(r2)
 1821594:	10000626 	beq	r2,zero,18215b0 <sys_timeout+0xfc>
 1821598:	e0bffb17 	ldw	r2,-20(fp)
 182159c:	10800017 	ldw	r2,0(r2)
 18215a0:	10800117 	ldw	r2,4(r2)
 18215a4:	e0fffc17 	ldw	r3,-16(fp)
 18215a8:	18c00117 	ldw	r3,4(r3)
 18215ac:	1880142e 	bgeu	r3,r2,1821600 <sys_timeout+0x14c>
        if (t->next != NULL) {
 18215b0:	e0bffb17 	ldw	r2,-20(fp)
 18215b4:	10800017 	ldw	r2,0(r2)
 18215b8:	10000926 	beq	r2,zero,18215e0 <sys_timeout+0x12c>
          t->next->time -= timeout->time;
 18215bc:	e0bffb17 	ldw	r2,-20(fp)
 18215c0:	10800017 	ldw	r2,0(r2)
 18215c4:	e0fffb17 	ldw	r3,-20(fp)
 18215c8:	18c00017 	ldw	r3,0(r3)
 18215cc:	19000117 	ldw	r4,4(r3)
 18215d0:	e0fffc17 	ldw	r3,-16(fp)
 18215d4:	18c00117 	ldw	r3,4(r3)
 18215d8:	20c7c83a 	sub	r3,r4,r3
 18215dc:	10c00115 	stw	r3,4(r2)
        }
        timeout->next = t->next;
 18215e0:	e0bffb17 	ldw	r2,-20(fp)
 18215e4:	10c00017 	ldw	r3,0(r2)
 18215e8:	e0bffc17 	ldw	r2,-16(fp)
 18215ec:	10c00015 	stw	r3,0(r2)
        t->next = timeout;
 18215f0:	e0bffb17 	ldw	r2,-20(fp)
 18215f4:	e0fffc17 	ldw	r3,-16(fp)
 18215f8:	10c00015 	stw	r3,0(r2)
        break;
 18215fc:	00000706 	br	182161c <sys_timeout+0x168>
  if (next_timeout->time > msecs) {
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 1821600:	e0bffb17 	ldw	r2,-20(fp)
 1821604:	10800017 	ldw	r2,0(r2)
 1821608:	e0bffb15 	stw	r2,-20(fp)
 182160c:	e0bffb17 	ldw	r2,-20(fp)
 1821610:	103fd71e 	bne	r2,zero,1821570 <__alt_mem_mem_0+0xff801570>
 1821614:	00000106 	br	182161c <sys_timeout+0x168>
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  if (timeout == NULL) {
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
 1821618:	0001883a 	nop
        t->next = timeout;
        break;
      }
    }
  }
}
 182161c:	e037883a 	mov	sp,fp
 1821620:	dfc00117 	ldw	ra,4(sp)
 1821624:	df000017 	ldw	fp,0(sp)
 1821628:	dec00204 	addi	sp,sp,8
 182162c:	f800283a 	ret

01821630 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 1821630:	defffa04 	addi	sp,sp,-24
 1821634:	dfc00515 	stw	ra,20(sp)
 1821638:	df000415 	stw	fp,16(sp)
 182163c:	df000404 	addi	fp,sp,16
 1821640:	e13ffe15 	stw	r4,-8(fp)
 1821644:	e17fff15 	stw	r5,-4(fp)
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
 1821648:	d0a7fd17 	ldw	r2,-24588(gp)
 182164c:	10002f26 	beq	r2,zero,182170c <sys_untimeout+0xdc>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 1821650:	d0a7fd17 	ldw	r2,-24588(gp)
 1821654:	e0bffd15 	stw	r2,-12(fp)
 1821658:	e03ffc15 	stw	zero,-16(fp)
 182165c:	00002706 	br	18216fc <sys_untimeout+0xcc>
    if ((t->h == handler) && (t->arg == arg)) {
 1821660:	e0bffd17 	ldw	r2,-12(fp)
 1821664:	10c00217 	ldw	r3,8(r2)
 1821668:	e0bffe17 	ldw	r2,-8(fp)
 182166c:	18801e1e 	bne	r3,r2,18216e8 <sys_untimeout+0xb8>
 1821670:	e0bffd17 	ldw	r2,-12(fp)
 1821674:	10c00317 	ldw	r3,12(r2)
 1821678:	e0bfff17 	ldw	r2,-4(fp)
 182167c:	18801a1e 	bne	r3,r2,18216e8 <sys_untimeout+0xb8>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 1821680:	e0bffc17 	ldw	r2,-16(fp)
 1821684:	1000041e 	bne	r2,zero,1821698 <sys_untimeout+0x68>
        next_timeout = t->next;
 1821688:	e0bffd17 	ldw	r2,-12(fp)
 182168c:	10800017 	ldw	r2,0(r2)
 1821690:	d0a7fd15 	stw	r2,-24588(gp)
 1821694:	00000406 	br	18216a8 <sys_untimeout+0x78>
      } else {
        prev_t->next = t->next;
 1821698:	e0bffd17 	ldw	r2,-12(fp)
 182169c:	10c00017 	ldw	r3,0(r2)
 18216a0:	e0bffc17 	ldw	r2,-16(fp)
 18216a4:	10c00015 	stw	r3,0(r2)
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
 18216a8:	e0bffd17 	ldw	r2,-12(fp)
 18216ac:	10800017 	ldw	r2,0(r2)
 18216b0:	10000926 	beq	r2,zero,18216d8 <sys_untimeout+0xa8>
        t->next->time += t->time;
 18216b4:	e0bffd17 	ldw	r2,-12(fp)
 18216b8:	10800017 	ldw	r2,0(r2)
 18216bc:	e0fffd17 	ldw	r3,-12(fp)
 18216c0:	18c00017 	ldw	r3,0(r3)
 18216c4:	19000117 	ldw	r4,4(r3)
 18216c8:	e0fffd17 	ldw	r3,-12(fp)
 18216cc:	18c00117 	ldw	r3,4(r3)
 18216d0:	20c7883a 	add	r3,r4,r3
 18216d4:	10c00115 	stw	r3,4(r2)
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 18216d8:	e17ffd17 	ldw	r5,-12(fp)
 18216dc:	01000304 	movi	r4,12
 18216e0:	18341e40 	call	18341e4 <memp_free>
      return;
 18216e4:	00000a06 	br	1821710 <sys_untimeout+0xe0>

  if (next_timeout == NULL) {
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 18216e8:	e0bffd17 	ldw	r2,-12(fp)
 18216ec:	e0bffc15 	stw	r2,-16(fp)
 18216f0:	e0bffd17 	ldw	r2,-12(fp)
 18216f4:	10800017 	ldw	r2,0(r2)
 18216f8:	e0bffd15 	stw	r2,-12(fp)
 18216fc:	e0bffd17 	ldw	r2,-12(fp)
 1821700:	103fd71e 	bne	r2,zero,1821660 <__alt_mem_mem_0+0xff801660>
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
      return;
    }
  }
  return;
 1821704:	0001883a 	nop
 1821708:	00000106 	br	1821710 <sys_untimeout+0xe0>
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
    return;
 182170c:	0001883a 	nop
      memp_free(MEMP_SYS_TIMEOUT, t);
      return;
    }
  }
  return;
}
 1821710:	e037883a 	mov	sp,fp
 1821714:	dfc00117 	ldw	ra,4(sp)
 1821718:	df000017 	ldw	fp,0(sp)
 182171c:	dec00204 	addi	sp,sp,8
 1821720:	f800283a 	ret

01821724 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 1821724:	defff804 	addi	sp,sp,-32
 1821728:	dfc00715 	stw	ra,28(sp)
 182172c:	df000615 	stw	fp,24(sp)
 1821730:	df000604 	addi	fp,sp,24
 1821734:	e13ffe15 	stw	r4,-8(fp)
 1821738:	e17fff15 	stw	r5,-4(fp)
  struct sys_timeo *tmptimeout;
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
 182173c:	d0a7fd17 	ldw	r2,-24588(gp)
 1821740:	1000061e 	bne	r2,zero,182175c <sys_timeouts_mbox_fetch+0x38>
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
 1821744:	000d883a 	mov	r6,zero
 1821748:	e17fff17 	ldw	r5,-4(fp)
 182174c:	e13ffe17 	ldw	r4,-8(fp)
 1821750:	18151ec0 	call	18151ec <sys_arch_mbox_fetch>
 1821754:	e0bffa15 	stw	r2,-24(fp)
      } else {
        next_timeout->time = 0;
      }
    }
  }
}
 1821758:	00003106 	br	1821820 <sys_timeouts_mbox_fetch+0xfc>

 again:
  if (!next_timeout) {
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
  } else {
    if (next_timeout->time > 0) {
 182175c:	d0a7fd17 	ldw	r2,-24588(gp)
 1821760:	10800117 	ldw	r2,4(r2)
 1821764:	10000826 	beq	r2,zero,1821788 <sys_timeouts_mbox_fetch+0x64>
      time_needed = sys_arch_mbox_fetch(mbox, msg, next_timeout->time);
 1821768:	d0a7fd17 	ldw	r2,-24588(gp)
 182176c:	10800117 	ldw	r2,4(r2)
 1821770:	100d883a 	mov	r6,r2
 1821774:	e17fff17 	ldw	r5,-4(fp)
 1821778:	e13ffe17 	ldw	r4,-8(fp)
 182177c:	18151ec0 	call	18151ec <sys_arch_mbox_fetch>
 1821780:	e0bffa15 	stw	r2,-24(fp)
 1821784:	00000206 	br	1821790 <sys_timeouts_mbox_fetch+0x6c>
    } else {
      time_needed = SYS_ARCH_TIMEOUT;
 1821788:	00bfffc4 	movi	r2,-1
 182178c:	e0bffa15 	stw	r2,-24(fp)
    }

    if (time_needed == SYS_ARCH_TIMEOUT) {
 1821790:	e0bffa17 	ldw	r2,-24(fp)
 1821794:	10bfffd8 	cmpnei	r2,r2,-1
 1821798:	1000141e 	bne	r2,zero,18217ec <sys_timeouts_mbox_fetch+0xc8>
      /* If time == SYS_ARCH_TIMEOUT, a timeout occured before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = next_timeout;
 182179c:	d0a7fd17 	ldw	r2,-24588(gp)
 18217a0:	e0bffb15 	stw	r2,-20(fp)
      next_timeout = tmptimeout->next;
 18217a4:	e0bffb17 	ldw	r2,-20(fp)
 18217a8:	10800017 	ldw	r2,0(r2)
 18217ac:	d0a7fd15 	stw	r2,-24588(gp)
      handler = tmptimeout->h;
 18217b0:	e0bffb17 	ldw	r2,-20(fp)
 18217b4:	10800217 	ldw	r2,8(r2)
 18217b8:	e0bffc15 	stw	r2,-16(fp)
      arg = tmptimeout->arg;
 18217bc:	e0bffb17 	ldw	r2,-20(fp)
 18217c0:	10800317 	ldw	r2,12(r2)
 18217c4:	e0bffd15 	stw	r2,-12(fp)
      if (handler != NULL) {
        LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n",
          tmptimeout->handler_name, arg));
      }
#endif /* LWIP_DEBUG_TIMERNAMES */
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 18217c8:	e17ffb17 	ldw	r5,-20(fp)
 18217cc:	01000304 	movi	r4,12
 18217d0:	18341e40 	call	18341e4 <memp_free>
      if (handler != NULL) {
 18217d4:	e0bffc17 	ldw	r2,-16(fp)
 18217d8:	103fd826 	beq	r2,zero,182173c <__alt_mem_mem_0+0xff80173c>
        /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
           timeout handler function. */
        LOCK_TCPIP_CORE();
        handler(arg);
 18217dc:	e0bffc17 	ldw	r2,-16(fp)
 18217e0:	e13ffd17 	ldw	r4,-12(fp)
 18217e4:	103ee83a 	callr	r2
        UNLOCK_TCPIP_CORE();
      }
      LWIP_TCPIP_THREAD_ALIVE();

      /* We try again to fetch a message from the mbox. */
      goto again;
 18217e8:	003fd406 	br	182173c <__alt_mem_mem_0+0xff80173c>
    } else {
      /* If time != SYS_ARCH_TIMEOUT, a message was received before the timeout
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < next_timeout->time) {
 18217ec:	d0a7fd17 	ldw	r2,-24588(gp)
 18217f0:	10800117 	ldw	r2,4(r2)
 18217f4:	e0fffa17 	ldw	r3,-24(fp)
 18217f8:	1880072e 	bgeu	r3,r2,1821818 <sys_timeouts_mbox_fetch+0xf4>
        next_timeout->time -= time_needed;
 18217fc:	d0a7fd17 	ldw	r2,-24588(gp)
 1821800:	d0e7fd17 	ldw	r3,-24588(gp)
 1821804:	19000117 	ldw	r4,4(r3)
 1821808:	e0fffa17 	ldw	r3,-24(fp)
 182180c:	20c7c83a 	sub	r3,r4,r3
 1821810:	10c00115 	stw	r3,4(r2)
      } else {
        next_timeout->time = 0;
      }
    }
  }
}
 1821814:	00000206 	br	1821820 <sys_timeouts_mbox_fetch+0xfc>
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < next_timeout->time) {
        next_timeout->time -= time_needed;
      } else {
        next_timeout->time = 0;
 1821818:	d0a7fd17 	ldw	r2,-24588(gp)
 182181c:	10000115 	stw	zero,4(r2)
      }
    }
  }
}
 1821820:	0001883a 	nop
 1821824:	e037883a 	mov	sp,fp
 1821828:	dfc00117 	ldw	ra,4(sp)
 182182c:	df000017 	ldw	fp,0(sp)
 1821830:	dec00204 	addi	sp,sp,8
 1821834:	f800283a 	ret

01821838 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 1821838:	deffff04 	addi	sp,sp,-4
 182183c:	df000015 	stw	fp,0(sp)
 1821840:	d839883a 	mov	fp,sp
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 1821844:	0001883a 	nop
 1821848:	e037883a 	mov	sp,fp
 182184c:	df000017 	ldw	fp,0(sp)
 1821850:	dec00104 	addi	sp,sp,4
 1821854:	f800283a 	ret

01821858 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 1821858:	defffd04 	addi	sp,sp,-12
 182185c:	df000215 	stw	fp,8(sp)
 1821860:	df000204 	addi	fp,sp,8
  u16_t n = 0;
 1821864:	e03ffe0d 	sth	zero,-8(fp)
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 1821868:	d0a0130b 	ldhu	r2,-32692(gp)
 182186c:	10c00044 	addi	r3,r2,1
 1821870:	d0e0130d 	sth	r3,-32692(gp)
 1821874:	10ffffcc 	andi	r3,r2,65535
 1821878:	00bfffd4 	movui	r2,65535
 182187c:	1880021e 	bne	r3,r2,1821888 <udp_new_port+0x30>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 1821880:	00b00004 	movi	r2,-16384
 1821884:	d0a0130d 	sth	r2,-32692(gp)
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 1821888:	d0a7ff17 	ldw	r2,-24580(gp)
 182188c:	e0bfff15 	stw	r2,-4(fp)
 1821890:	00001106 	br	18218d8 <udp_new_port+0x80>
    if (pcb->local_port == udp_port) {
 1821894:	e0bfff17 	ldw	r2,-4(fp)
 1821898:	10c0048b 	ldhu	r3,18(r2)
 182189c:	d0a0130b 	ldhu	r2,-32692(gp)
 18218a0:	18ffffcc 	andi	r3,r3,65535
 18218a4:	10bfffcc 	andi	r2,r2,65535
 18218a8:	1880081e 	bne	r3,r2,18218cc <udp_new_port+0x74>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 18218ac:	e0bffe0b 	ldhu	r2,-8(fp)
 18218b0:	10800044 	addi	r2,r2,1
 18218b4:	e0bffe0d 	sth	r2,-8(fp)
 18218b8:	e0bffe0b 	ldhu	r2,-8(fp)
 18218bc:	10900030 	cmpltui	r2,r2,16384
 18218c0:	103fe91e 	bne	r2,zero,1821868 <__alt_mem_mem_0+0xff801868>
        return 0;
 18218c4:	0005883a 	mov	r2,zero
 18218c8:	00000606 	br	18218e4 <udp_new_port+0x8c>
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 18218cc:	e0bfff17 	ldw	r2,-4(fp)
 18218d0:	10800317 	ldw	r2,12(r2)
 18218d4:	e0bfff15 	stw	r2,-4(fp)
 18218d8:	e0bfff17 	ldw	r2,-4(fp)
 18218dc:	103fed1e 	bne	r2,zero,1821894 <__alt_mem_mem_0+0xff801894>
        return 0;
      }
      goto again;
    }
  }
  return udp_port;
 18218e0:	d0a0130b 	ldhu	r2,-32692(gp)
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
 18218e4:	e037883a 	mov	sp,fp
 18218e8:	df000017 	ldw	fp,0(sp)
 18218ec:	dec00104 	addi	sp,sp,4
 18218f0:	f800283a 	ret

018218f4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 18218f4:	defff304 	addi	sp,sp,-52
 18218f8:	dfc00c15 	stw	ra,48(sp)
 18218fc:	df000b15 	stw	fp,44(sp)
 1821900:	df000b04 	addi	fp,sp,44
 1821904:	e13ffe15 	stw	r4,-8(fp)
 1821908:	e17fff15 	stw	r5,-4(fp)
  u8_t local_match;
  u8_t broadcast;

  PERF_START;

  UDP_STATS_INC(udp.recv);
 182190c:	008061f4 	movhi	r2,391
 1821910:	10a77104 	addi	r2,r2,-25148
 1821914:	10803d17 	ldw	r2,244(r2)
 1821918:	10c00044 	addi	r3,r2,1
 182191c:	008061f4 	movhi	r2,391
 1821920:	10a77104 	addi	r2,r2,-25148
 1821924:	10c03d15 	stw	r3,244(r2)

  iphdr = (struct ip_hdr *)p->payload;
 1821928:	e0bffe17 	ldw	r2,-8(fp)
 182192c:	10800117 	ldw	r2,4(r2)
 1821930:	e0bffa15 	stw	r2,-24(fp)

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 1821934:	e0bffe17 	ldw	r2,-8(fp)
 1821938:	1080020b 	ldhu	r2,8(r2)
 182193c:	10ffffcc 	andi	r3,r2,65535
 1821940:	e0bffa17 	ldw	r2,-24(fp)
 1821944:	10800003 	ldbu	r2,0(r2)
 1821948:	10803fcc 	andi	r2,r2,255
 182194c:	108003cc 	andi	r2,r2,15
 1821950:	10800084 	addi	r2,r2,2
 1821954:	1085883a 	add	r2,r2,r2
 1821958:	1085883a 	add	r2,r2,r2
 182195c:	18800f16 	blt	r3,r2,182199c <udp_input+0xa8>
 1821960:	e0bffa17 	ldw	r2,-24(fp)
 1821964:	10800003 	ldbu	r2,0(r2)
 1821968:	10803fcc 	andi	r2,r2,255
 182196c:	108003cc 	andi	r2,r2,15
 1821970:	1085883a 	add	r2,r2,r2
 1821974:	1085883a 	add	r2,r2,r2
 1821978:	0085c83a 	sub	r2,zero,r2
 182197c:	10bfffcc 	andi	r2,r2,65535
 1821980:	10a0001c 	xori	r2,r2,32768
 1821984:	10a00004 	addi	r2,r2,-32768
 1821988:	100b883a 	mov	r5,r2
 182198c:	e13ffe17 	ldw	r4,-8(fp)
 1821990:	181a7540 	call	181a754 <pbuf_header>
 1821994:	10803fcc 	andi	r2,r2,255
 1821998:	10001126 	beq	r2,zero,18219e0 <udp_input+0xec>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 182199c:	008061f4 	movhi	r2,391
 18219a0:	10a77104 	addi	r2,r2,-25148
 18219a4:	10804117 	ldw	r2,260(r2)
 18219a8:	10c00044 	addi	r3,r2,1
 18219ac:	008061f4 	movhi	r2,391
 18219b0:	10a77104 	addi	r2,r2,-25148
 18219b4:	10c04115 	stw	r3,260(r2)
    UDP_STATS_INC(udp.drop);
 18219b8:	008061f4 	movhi	r2,391
 18219bc:	10a77104 	addi	r2,r2,-25148
 18219c0:	10803f17 	ldw	r2,252(r2)
 18219c4:	10c00044 	addi	r3,r2,1
 18219c8:	008061f4 	movhi	r2,391
 18219cc:	10a77104 	addi	r2,r2,-25148
 18219d0:	10c03f15 	stw	r3,252(r2)
    snmp_inc_udpinerrors();
    pbuf_free(p);
 18219d4:	e13ffe17 	ldw	r4,-8(fp)
 18219d8:	181a9040 	call	181a904 <pbuf_free>
    goto end;
 18219dc:	00011f06 	br	1821e5c <udp_input+0x568>
  }

  udphdr = (struct udp_hdr *)p->payload;
 18219e0:	e0bffe17 	ldw	r2,-8(fp)
 18219e4:	10800117 	ldw	r2,4(r2)
 18219e8:	e0bffb15 	stw	r2,-20(fp)

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 18219ec:	d0a81217 	ldw	r2,-24504(gp)
 18219f0:	e17fff17 	ldw	r5,-4(fp)
 18219f4:	1009883a 	mov	r4,r2
 18219f8:	18187180 	call	1818718 <ip4_addr_isbroadcast>
 18219fc:	e0bffc05 	stb	r2,-16(fp)

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 1821a00:	e0bffb17 	ldw	r2,-20(fp)
 1821a04:	10c00003 	ldbu	r3,0(r2)
 1821a08:	10800043 	ldbu	r2,1(r2)
 1821a0c:	1004923a 	slli	r2,r2,8
 1821a10:	10c4b03a 	or	r2,r2,r3
 1821a14:	10bfffcc 	andi	r2,r2,65535
 1821a18:	1004d23a 	srli	r2,r2,8
 1821a1c:	1009883a 	mov	r4,r2
 1821a20:	e0bffb17 	ldw	r2,-20(fp)
 1821a24:	10c00003 	ldbu	r3,0(r2)
 1821a28:	10800043 	ldbu	r2,1(r2)
 1821a2c:	1004923a 	slli	r2,r2,8
 1821a30:	10c4b03a 	or	r2,r2,r3
 1821a34:	10bfffcc 	andi	r2,r2,65535
 1821a38:	1004923a 	slli	r2,r2,8
 1821a3c:	2084b03a 	or	r2,r4,r2
 1821a40:	e0bffc8d 	sth	r2,-14(fp)
  dest = ntohs(udphdr->dest);
 1821a44:	e0bffb17 	ldw	r2,-20(fp)
 1821a48:	10c00083 	ldbu	r3,2(r2)
 1821a4c:	108000c3 	ldbu	r2,3(r2)
 1821a50:	1004923a 	slli	r2,r2,8
 1821a54:	10c4b03a 	or	r2,r2,r3
 1821a58:	10bfffcc 	andi	r2,r2,65535
 1821a5c:	1004d23a 	srli	r2,r2,8
 1821a60:	1009883a 	mov	r4,r2
 1821a64:	e0bffb17 	ldw	r2,-20(fp)
 1821a68:	10c00083 	ldbu	r3,2(r2)
 1821a6c:	108000c3 	ldbu	r2,3(r2)
 1821a70:	1004923a 	slli	r2,r2,8
 1821a74:	10c4b03a 	or	r2,r2,r3
 1821a78:	10bfffcc 	andi	r2,r2,65535
 1821a7c:	1004923a 	slli	r2,r2,8
 1821a80:	2084b03a 	or	r2,r4,r2
 1821a84:	e0bffd0d 	sth	r2,-12(fp)
               ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
               ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
               ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));

#if LWIP_DHCP
  pcb = NULL;
 1821a88:	e03ff615 	stw	zero,-40(fp)
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
 1821a8c:	e0bffd0b 	ldhu	r2,-12(fp)
 1821a90:	10801118 	cmpnei	r2,r2,68
 1821a94:	10001f1e 	bne	r2,zero,1821b14 <udp_input+0x220>
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
 1821a98:	e0bffc8b 	ldhu	r2,-14(fp)
 1821a9c:	108010d8 	cmpnei	r2,r2,67
 1821aa0:	10007a1e 	bne	r2,zero,1821c8c <udp_input+0x398>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
 1821aa4:	e0bfff17 	ldw	r2,-4(fp)
 1821aa8:	10800a17 	ldw	r2,40(r2)
 1821aac:	10007726 	beq	r2,zero,1821c8c <udp_input+0x398>
 1821ab0:	e0bfff17 	ldw	r2,-4(fp)
 1821ab4:	10800a17 	ldw	r2,40(r2)
 1821ab8:	10800117 	ldw	r2,4(r2)
 1821abc:	10007326 	beq	r2,zero,1821c8c <udp_input+0x398>
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
 1821ac0:	e0bfff17 	ldw	r2,-4(fp)
 1821ac4:	10800a17 	ldw	r2,40(r2)
 1821ac8:	10800117 	ldw	r2,4(r2)
 1821acc:	10800104 	addi	r2,r2,4
 1821ad0:	10000b26 	beq	r2,zero,1821b00 <udp_input+0x20c>
 1821ad4:	e0bfff17 	ldw	r2,-4(fp)
 1821ad8:	10800a17 	ldw	r2,40(r2)
 1821adc:	10800117 	ldw	r2,4(r2)
 1821ae0:	10800117 	ldw	r2,4(r2)
 1821ae4:	10000626 	beq	r2,zero,1821b00 <udp_input+0x20c>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
 1821ae8:	e0bfff17 	ldw	r2,-4(fp)
 1821aec:	10800a17 	ldw	r2,40(r2)
 1821af0:	10800117 	ldw	r2,4(r2)
 1821af4:	10c00117 	ldw	r3,4(r2)
 1821af8:	d0a81017 	ldw	r2,-24512(gp)
    if (src == DHCP_SERVER_PORT) {
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
 1821afc:	1880631e 	bne	r3,r2,1821c8c <udp_input+0x398>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
          pcb = inp->dhcp->pcb;
 1821b00:	e0bfff17 	ldw	r2,-4(fp)
 1821b04:	10800a17 	ldw	r2,40(r2)
 1821b08:	10800117 	ldw	r2,4(r2)
 1821b0c:	e0bff615 	stw	r2,-40(fp)
 1821b10:	00005e06 	br	1821c8c <udp_input+0x398>
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
 1821b14:	e03ff715 	stw	zero,-36(fp)
    local_match = 0;
 1821b18:	e03ff905 	stb	zero,-28(fp)
    uncon_pcb = NULL;
 1821b1c:	e03ff815 	stw	zero,-32(fp)
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 1821b20:	d0a7ff17 	ldw	r2,-24580(gp)
 1821b24:	e0bff615 	stw	r2,-40(fp)
 1821b28:	00005206 	br	1821c74 <udp_input+0x380>
      local_match = 0;
 1821b2c:	e03ff905 	stb	zero,-28(fp)
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
 1821b30:	e0bff617 	ldw	r2,-40(fp)
 1821b34:	1080048b 	ldhu	r2,18(r2)
 1821b38:	10ffffcc 	andi	r3,r2,65535
 1821b3c:	e0bffd0b 	ldhu	r2,-12(fp)
 1821b40:	1880221e 	bne	r3,r2,1821bcc <udp_input+0x2d8>
 1821b44:	e0bffc03 	ldbu	r2,-16(fp)
 1821b48:	1000051e 	bne	r2,zero,1821b60 <udp_input+0x26c>
          ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 1821b4c:	e0bff617 	ldw	r2,-40(fp)
 1821b50:	10001326 	beq	r2,zero,1821ba0 <udp_input+0x2ac>
 1821b54:	e0bff617 	ldw	r2,-40(fp)
 1821b58:	10800017 	ldw	r2,0(r2)
 1821b5c:	10001026 	beq	r2,zero,1821ba0 <udp_input+0x2ac>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 1821b60:	e0bff617 	ldw	r2,-40(fp)
 1821b64:	10c00017 	ldw	r3,0(r2)
 1821b68:	d0a81217 	ldw	r2,-24504(gp)
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
          ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 1821b6c:	18800c26 	beq	r3,r2,1821ba0 <udp_input+0x2ac>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 1821b70:	e0bffc03 	ldbu	r2,-16(fp)
 1821b74:	10001526 	beq	r2,zero,1821bcc <udp_input+0x2d8>
#endif /* LWIP_IGMP */
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
 1821b78:	e0bff617 	ldw	r2,-40(fp)
 1821b7c:	10c00017 	ldw	r3,0(r2)
 1821b80:	e0bfff17 	ldw	r2,-4(fp)
 1821b84:	10800117 	ldw	r2,4(r2)
           ip_addr_ismulticast(&current_iphdr_dest) ||
#endif /* LWIP_IGMP */
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
 1821b88:	18800526 	beq	r3,r2,1821ba0 <udp_input+0x2ac>
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
			 ip_addr_isany(&pcb->local_ip))))) {
 1821b8c:	e0bff617 	ldw	r2,-40(fp)
#endif /* LWIP_IGMP */
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
 1821b90:	10000326 	beq	r2,zero,1821ba0 <udp_input+0x2ac>
			 ip_addr_isany(&pcb->local_ip))))) {
 1821b94:	e0bff617 	ldw	r2,-40(fp)
 1821b98:	10800017 	ldw	r2,0(r2)
 1821b9c:	10000b1e 	bne	r2,zero,1821bcc <udp_input+0x2d8>
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
 1821ba0:	00800044 	movi	r2,1
 1821ba4:	e0bff905 	stb	r2,-28(fp)
          if ((uncon_pcb == NULL) && 
 1821ba8:	e0bff817 	ldw	r2,-32(fp)
 1821bac:	1000071e 	bne	r2,zero,1821bcc <udp_input+0x2d8>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
 1821bb0:	e0bff617 	ldw	r2,-40(fp)
 1821bb4:	10800403 	ldbu	r2,16(r2)
 1821bb8:	10803fcc 	andi	r2,r2,255
 1821bbc:	1080010c 	andi	r2,r2,4
            (broadcast &&
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
			 ip_addr_isany(&pcb->local_ip))))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
          if ((uncon_pcb == NULL) && 
 1821bc0:	1000021e 	bne	r2,zero,1821bcc <udp_input+0x2d8>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
 1821bc4:	e0bff617 	ldw	r2,-40(fp)
 1821bc8:	e0bff815 	stw	r2,-32(fp)
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 1821bcc:	e0bff903 	ldbu	r2,-28(fp)
 1821bd0:	10002326 	beq	r2,zero,1821c60 <udp_input+0x36c>
          (pcb->remote_port == src) &&
 1821bd4:	e0bff617 	ldw	r2,-40(fp)
 1821bd8:	1080050b 	ldhu	r2,20(r2)
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 1821bdc:	10ffffcc 	andi	r3,r2,65535
 1821be0:	e0bffc8b 	ldhu	r2,-14(fp)
 1821be4:	18801e1e 	bne	r3,r2,1821c60 <udp_input+0x36c>
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 1821be8:	e0bff617 	ldw	r2,-40(fp)
 1821bec:	10800104 	addi	r2,r2,4
            uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
 1821bf0:	10000726 	beq	r2,zero,1821c10 <udp_input+0x31c>
          (ip_addr_isany(&pcb->remote_ip) ||
 1821bf4:	e0bff617 	ldw	r2,-40(fp)
 1821bf8:	10800117 	ldw	r2,4(r2)
 1821bfc:	10000426 	beq	r2,zero,1821c10 <udp_input+0x31c>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 1821c00:	e0bff617 	ldw	r2,-40(fp)
 1821c04:	10c00117 	ldw	r3,4(r2)
 1821c08:	d0a81017 	ldw	r2,-24512(gp)
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 1821c0c:	1880141e 	bne	r3,r2,1821c60 <udp_input+0x36c>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 1821c10:	e0bff717 	ldw	r2,-36(fp)
 1821c14:	10000a26 	beq	r2,zero,1821c40 <udp_input+0x34c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 1821c18:	e0bff617 	ldw	r2,-40(fp)
 1821c1c:	10c00317 	ldw	r3,12(r2)
 1821c20:	e0bff717 	ldw	r2,-36(fp)
 1821c24:	10c00315 	stw	r3,12(r2)
          pcb->next = udp_pcbs;
 1821c28:	d0e7ff17 	ldw	r3,-24580(gp)
 1821c2c:	e0bff617 	ldw	r2,-40(fp)
 1821c30:	10c00315 	stw	r3,12(r2)
          udp_pcbs = pcb;
 1821c34:	e0bff617 	ldw	r2,-40(fp)
 1821c38:	d0a7ff15 	stw	r2,-24580(gp)
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 1821c3c:	00000f06 	br	1821c7c <udp_input+0x388>
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
        } else {
          UDP_STATS_INC(udp.cachehit);
 1821c40:	008061f4 	movhi	r2,391
 1821c44:	10a77104 	addi	r2,r2,-25148
 1821c48:	10804717 	ldw	r2,284(r2)
 1821c4c:	10c00044 	addi	r3,r2,1
 1821c50:	008061f4 	movhi	r2,391
 1821c54:	10a77104 	addi	r2,r2,-25148
 1821c58:	10c04715 	stw	r3,284(r2)
        }
        break;
 1821c5c:	00000706 	br	1821c7c <udp_input+0x388>
      }
      prev = pcb;
 1821c60:	e0bff617 	ldw	r2,-40(fp)
 1821c64:	e0bff715 	stw	r2,-36(fp)
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 1821c68:	e0bff617 	ldw	r2,-40(fp)
 1821c6c:	10800317 	ldw	r2,12(r2)
 1821c70:	e0bff615 	stw	r2,-40(fp)
 1821c74:	e0bff617 	ldw	r2,-40(fp)
 1821c78:	103fac1e 	bne	r2,zero,1821b2c <__alt_mem_mem_0+0xff801b2c>
        break;
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
 1821c7c:	e0bff617 	ldw	r2,-40(fp)
 1821c80:	1000021e 	bne	r2,zero,1821c8c <udp_input+0x398>
      pcb = uncon_pcb;
 1821c84:	e0bff817 	ldw	r2,-32(fp)
 1821c88:	e0bff615 	stw	r2,-40(fp)
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
 1821c8c:	e0bff617 	ldw	r2,-40(fp)
 1821c90:	1000041e 	bne	r2,zero,1821ca4 <udp_input+0x3b0>
 1821c94:	e0bfff17 	ldw	r2,-4(fp)
 1821c98:	10c00117 	ldw	r3,4(r2)
 1821c9c:	d0a81217 	ldw	r2,-24504(gp)
 1821ca0:	18806c1e 	bne	r3,r2,1821e54 <udp_input+0x560>
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
 1821ca4:	e0bffb17 	ldw	r2,-20(fp)
 1821ca8:	10c00183 	ldbu	r3,6(r2)
 1821cac:	108001c3 	ldbu	r2,7(r2)
 1821cb0:	1004923a 	slli	r2,r2,8
 1821cb4:	10c4b03a 	or	r2,r2,r3
 1821cb8:	10bfffcc 	andi	r2,r2,65535
 1821cbc:	10001c26 	beq	r2,zero,1821d30 <udp_input+0x43c>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
                               IP_PROTO_UDP, p->tot_len) != 0) {
 1821cc0:	e0bffe17 	ldw	r2,-8(fp)
 1821cc4:	1080020b 	ldhu	r2,8(r2)
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 1821cc8:	10bfffcc 	andi	r2,r2,65535
 1821ccc:	d8800015 	stw	r2,0(sp)
 1821cd0:	01c00444 	movi	r7,17
 1821cd4:	d1a81204 	addi	r6,gp,-24504
 1821cd8:	d1681004 	addi	r5,gp,-24512
 1821cdc:	e13ffe17 	ldw	r4,-8(fp)
 1821ce0:	18313300 	call	1831330 <inet_chksum_pseudo>
 1821ce4:	10bfffcc 	andi	r2,r2,65535
 1821ce8:	10001126 	beq	r2,zero,1821d30 <udp_input+0x43c>
                               IP_PROTO_UDP, p->tot_len) != 0) {
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
 1821cec:	008061f4 	movhi	r2,391
 1821cf0:	10a77104 	addi	r2,r2,-25148
 1821cf4:	10804017 	ldw	r2,256(r2)
 1821cf8:	10c00044 	addi	r3,r2,1
 1821cfc:	008061f4 	movhi	r2,391
 1821d00:	10a77104 	addi	r2,r2,-25148
 1821d04:	10c04015 	stw	r3,256(r2)
          UDP_STATS_INC(udp.drop);
 1821d08:	008061f4 	movhi	r2,391
 1821d0c:	10a77104 	addi	r2,r2,-25148
 1821d10:	10803f17 	ldw	r2,252(r2)
 1821d14:	10c00044 	addi	r3,r2,1
 1821d18:	008061f4 	movhi	r2,391
 1821d1c:	10a77104 	addi	r2,r2,-25148
 1821d20:	10c03f15 	stw	r3,252(r2)
          snmp_inc_udpinerrors();
          pbuf_free(p);
 1821d24:	e13ffe17 	ldw	r4,-8(fp)
 1821d28:	181a9040 	call	181a904 <pbuf_free>
          goto end;
 1821d2c:	00004b06 	br	1821e5c <udp_input+0x568>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
 1821d30:	017ffe04 	movi	r5,-8
 1821d34:	e13ffe17 	ldw	r4,-8(fp)
 1821d38:	181a7540 	call	181a754 <pbuf_header>
 1821d3c:	10803fcc 	andi	r2,r2,255
 1821d40:	10000a26 	beq	r2,zero,1821d6c <udp_input+0x478>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
 1821d44:	008061f4 	movhi	r2,391
 1821d48:	10a77104 	addi	r2,r2,-25148
 1821d4c:	10803f17 	ldw	r2,252(r2)
 1821d50:	10c00044 	addi	r3,r2,1
 1821d54:	008061f4 	movhi	r2,391
 1821d58:	10a77104 	addi	r2,r2,-25148
 1821d5c:	10c03f15 	stw	r3,252(r2)
      snmp_inc_udpinerrors();
      pbuf_free(p);
 1821d60:	e13ffe17 	ldw	r4,-8(fp)
 1821d64:	181a9040 	call	181a904 <pbuf_free>
      goto end;
 1821d68:	00003c06 	br	1821e5c <udp_input+0x568>
    }
    if (pcb != NULL) {
 1821d6c:	e0bff617 	ldw	r2,-40(fp)
 1821d70:	10001126 	beq	r2,zero,1821db8 <udp_input+0x4c4>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 1821d74:	e0bff617 	ldw	r2,-40(fp)
 1821d78:	10800617 	ldw	r2,24(r2)
 1821d7c:	10000b26 	beq	r2,zero,1821dac <udp_input+0x4b8>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 1821d80:	e0bff617 	ldw	r2,-40(fp)
 1821d84:	10800617 	ldw	r2,24(r2)
 1821d88:	e0fff617 	ldw	r3,-40(fp)
 1821d8c:	19000717 	ldw	r4,28(r3)
 1821d90:	e0fffc8b 	ldhu	r3,-14(fp)
 1821d94:	d8c00015 	stw	r3,0(sp)
 1821d98:	d1e81004 	addi	r7,gp,-24512
 1821d9c:	e1bffe17 	ldw	r6,-8(fp)
 1821da0:	e17ff617 	ldw	r5,-40(fp)
 1821da4:	103ee83a 	callr	r2
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 1821da8:	00002c06 	br	1821e5c <udp_input+0x568>
      if (pcb->recv != NULL) {
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
 1821dac:	e13ffe17 	ldw	r4,-8(fp)
 1821db0:	181a9040 	call	181a904 <pbuf_free>
        goto end;
 1821db4:	00002906 	br	1821e5c <udp_input+0x568>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 1821db8:	e0bffc03 	ldbu	r2,-16(fp)
 1821dbc:	1000141e 	bne	r2,zero,1821e10 <udp_input+0x51c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 1821dc0:	d0a81217 	ldw	r2,-24504(gp)
 1821dc4:	10803c0c 	andi	r2,r2,240
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 1821dc8:	10803820 	cmpeqi	r2,r2,224
 1821dcc:	1000101e 	bne	r2,zero,1821e10 <udp_input+0x51c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
 1821dd0:	e0bffa17 	ldw	r2,-24(fp)
 1821dd4:	10800003 	ldbu	r2,0(r2)
 1821dd8:	10803fcc 	andi	r2,r2,255
 1821ddc:	108003cc 	andi	r2,r2,15
 1821de0:	10800084 	addi	r2,r2,2
 1821de4:	1085883a 	add	r2,r2,r2
 1821de8:	1085883a 	add	r2,r2,r2
 1821dec:	10bfffcc 	andi	r2,r2,65535
 1821df0:	10a0001c 	xori	r2,r2,32768
 1821df4:	10a00004 	addi	r2,r2,-32768
 1821df8:	100b883a 	mov	r5,r2
 1821dfc:	e13ffe17 	ldw	r4,-8(fp)
 1821e00:	181a7540 	call	181a754 <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
 1821e04:	014000c4 	movi	r5,3
 1821e08:	e13ffe17 	ldw	r4,-8(fp)
 1821e0c:	1830e8c0 	call	1830e8c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
 1821e10:	008061f4 	movhi	r2,391
 1821e14:	10a77104 	addi	r2,r2,-25148
 1821e18:	10804417 	ldw	r2,272(r2)
 1821e1c:	10c00044 	addi	r3,r2,1
 1821e20:	008061f4 	movhi	r2,391
 1821e24:	10a77104 	addi	r2,r2,-25148
 1821e28:	10c04415 	stw	r3,272(r2)
      UDP_STATS_INC(udp.drop);
 1821e2c:	008061f4 	movhi	r2,391
 1821e30:	10a77104 	addi	r2,r2,-25148
 1821e34:	10803f17 	ldw	r2,252(r2)
 1821e38:	10c00044 	addi	r3,r2,1
 1821e3c:	008061f4 	movhi	r2,391
 1821e40:	10a77104 	addi	r2,r2,-25148
 1821e44:	10c03f15 	stw	r3,252(r2)
      snmp_inc_udpnoports();
      pbuf_free(p);
 1821e48:	e13ffe17 	ldw	r4,-8(fp)
 1821e4c:	181a9040 	call	181a904 <pbuf_free>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 1821e50:	00000206 	br	1821e5c <udp_input+0x568>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
    }
  } else {
    pbuf_free(p);
 1821e54:	e13ffe17 	ldw	r4,-8(fp)
 1821e58:	181a9040 	call	181a904 <pbuf_free>
  }
end:
  PERF_STOP("udp_input");
}
 1821e5c:	0001883a 	nop
 1821e60:	e037883a 	mov	sp,fp
 1821e64:	dfc00117 	ldw	ra,4(sp)
 1821e68:	df000017 	ldw	fp,0(sp)
 1821e6c:	dec00204 	addi	sp,sp,8
 1821e70:	f800283a 	ret

01821e74 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 1821e74:	defffc04 	addi	sp,sp,-16
 1821e78:	dfc00315 	stw	ra,12(sp)
 1821e7c:	df000215 	stw	fp,8(sp)
 1821e80:	df000204 	addi	fp,sp,8
 1821e84:	e13ffe15 	stw	r4,-8(fp)
 1821e88:	e17fff15 	stw	r5,-4(fp)
  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 1821e8c:	e0bffe17 	ldw	r2,-8(fp)
 1821e90:	10c00104 	addi	r3,r2,4
 1821e94:	e0bffe17 	ldw	r2,-8(fp)
 1821e98:	1080050b 	ldhu	r2,20(r2)
 1821e9c:	10bfffcc 	andi	r2,r2,65535
 1821ea0:	100f883a 	mov	r7,r2
 1821ea4:	180d883a 	mov	r6,r3
 1821ea8:	e17fff17 	ldw	r5,-4(fp)
 1821eac:	e13ffe17 	ldw	r4,-8(fp)
 1821eb0:	1821f3c0 	call	1821f3c <udp_sendto>
}
 1821eb4:	e037883a 	mov	sp,fp
 1821eb8:	dfc00117 	ldw	ra,4(sp)
 1821ebc:	df000017 	ldw	fp,0(sp)
 1821ec0:	dec00204 	addi	sp,sp,8
 1821ec4:	f800283a 	ret

01821ec8 <udp_send_chksum>:
/** Same as udp_send() but with checksum
 */
err_t
udp_send_chksum(struct udp_pcb *pcb, struct pbuf *p,
                u8_t have_chksum, u16_t chksum)
{
 1821ec8:	defff804 	addi	sp,sp,-32
 1821ecc:	dfc00715 	stw	ra,28(sp)
 1821ed0:	df000615 	stw	fp,24(sp)
 1821ed4:	df000604 	addi	fp,sp,24
 1821ed8:	e13ffc15 	stw	r4,-16(fp)
 1821edc:	e17ffd15 	stw	r5,-12(fp)
 1821ee0:	3007883a 	mov	r3,r6
 1821ee4:	3805883a 	mov	r2,r7
 1821ee8:	e0fffe05 	stb	r3,-8(fp)
 1821eec:	e0bfff0d 	sth	r2,-4(fp)
  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto_chksum(pcb, p, &pcb->remote_ip, pcb->remote_port,
 1821ef0:	e0bffc17 	ldw	r2,-16(fp)
 1821ef4:	11000104 	addi	r4,r2,4
 1821ef8:	e0bffc17 	ldw	r2,-16(fp)
 1821efc:	1080050b 	ldhu	r2,20(r2)
 1821f00:	117fffcc 	andi	r5,r2,65535
 1821f04:	e0bffe03 	ldbu	r2,-8(fp)
 1821f08:	e0ffff0b 	ldhu	r3,-4(fp)
 1821f0c:	d8c00115 	stw	r3,4(sp)
 1821f10:	d8800015 	stw	r2,0(sp)
 1821f14:	280f883a 	mov	r7,r5
 1821f18:	200d883a 	mov	r6,r4
 1821f1c:	e17ffd17 	ldw	r5,-12(fp)
 1821f20:	e13ffc17 	ldw	r4,-16(fp)
 1821f24:	1821f940 	call	1821f94 <udp_sendto_chksum>
    have_chksum, chksum);
}
 1821f28:	e037883a 	mov	sp,fp
 1821f2c:	dfc00117 	ldw	ra,4(sp)
 1821f30:	df000017 	ldw	fp,0(sp)
 1821f34:	dec00204 	addi	sp,sp,8
 1821f38:	f800283a 	ret

01821f3c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port)
{
 1821f3c:	defff804 	addi	sp,sp,-32
 1821f40:	dfc00715 	stw	ra,28(sp)
 1821f44:	df000615 	stw	fp,24(sp)
 1821f48:	df000604 	addi	fp,sp,24
 1821f4c:	e13ffc15 	stw	r4,-16(fp)
 1821f50:	e17ffd15 	stw	r5,-12(fp)
 1821f54:	e1bffe15 	stw	r6,-8(fp)
 1821f58:	3805883a 	mov	r2,r7
 1821f5c:	e0bfff0d 	sth	r2,-4(fp)
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_chksum(pcb, p, dst_ip, dst_port, 0, 0);
 1821f60:	e0bfff0b 	ldhu	r2,-4(fp)
 1821f64:	d8000115 	stw	zero,4(sp)
 1821f68:	d8000015 	stw	zero,0(sp)
 1821f6c:	100f883a 	mov	r7,r2
 1821f70:	e1bffe17 	ldw	r6,-8(fp)
 1821f74:	e17ffd17 	ldw	r5,-12(fp)
 1821f78:	e13ffc17 	ldw	r4,-16(fp)
 1821f7c:	1821f940 	call	1821f94 <udp_sendto_chksum>
}
 1821f80:	e037883a 	mov	sp,fp
 1821f84:	dfc00117 	ldw	ra,4(sp)
 1821f88:	df000017 	ldw	fp,0(sp)
 1821f8c:	dec00204 	addi	sp,sp,8
 1821f90:	f800283a 	ret

01821f94 <udp_sendto_chksum>:

/** Same as udp_sendto(), but with checksum */
err_t
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
 1821f94:	defff404 	addi	sp,sp,-48
 1821f98:	dfc00b15 	stw	ra,44(sp)
 1821f9c:	df000a15 	stw	fp,40(sp)
 1821fa0:	df000a04 	addi	fp,sp,40
 1821fa4:	e13ffa15 	stw	r4,-24(fp)
 1821fa8:	e17ffb15 	stw	r5,-20(fp)
 1821fac:	e1bffc15 	stw	r6,-16(fp)
 1821fb0:	3809883a 	mov	r4,r7
 1821fb4:	e0c00217 	ldw	r3,8(fp)
 1821fb8:	e0800317 	ldw	r2,12(fp)
 1821fbc:	e13ffd0d 	sth	r4,-12(fp)
 1821fc0:	e0fffe05 	stb	r3,-8(fp)
 1821fc4:	e0bfff0d 	sth	r2,-4(fp)

  /* find the outgoing network interface for this packet */
#if LWIP_IGMP
  netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
#else
  netif = ip_route(&(pcb->local_ip), dst_ip);
 1821fc8:	e0bffa17 	ldw	r2,-24(fp)
 1821fcc:	e17ffc17 	ldw	r5,-16(fp)
 1821fd0:	1009883a 	mov	r4,r2
 1821fd4:	18319100 	call	1831910 <ip_route>
 1821fd8:	e0bff915 	stw	r2,-28(fp)
#endif /* LWIP_IGMP */

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 1821fdc:	e0bff917 	ldw	r2,-28(fp)
 1821fe0:	1000091e 	bne	r2,zero,1822008 <udp_sendto_chksum+0x74>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
    UDP_STATS_INC(udp.rterr);
 1821fe4:	008061f4 	movhi	r2,391
 1821fe8:	10a77104 	addi	r2,r2,-25148
 1821fec:	10804317 	ldw	r2,268(r2)
 1821ff0:	10c00044 	addi	r3,r2,1
 1821ff4:	008061f4 	movhi	r2,391
 1821ff8:	10a77104 	addi	r2,r2,-25148
 1821ffc:	10c04315 	stw	r3,268(r2)
    return ERR_RTE;
 1822000:	00bfff04 	movi	r2,-4
 1822004:	00000c06 	br	1822038 <udp_sendto_chksum+0xa4>
  }
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
 1822008:	e13ffd0b 	ldhu	r4,-12(fp)
 182200c:	e0bffe03 	ldbu	r2,-8(fp)
 1822010:	e0ffff0b 	ldhu	r3,-4(fp)
 1822014:	d8c00215 	stw	r3,8(sp)
 1822018:	d8800115 	stw	r2,4(sp)
 182201c:	e0bff917 	ldw	r2,-28(fp)
 1822020:	d8800015 	stw	r2,0(sp)
 1822024:	200f883a 	mov	r7,r4
 1822028:	e1bffc17 	ldw	r6,-16(fp)
 182202c:	e17ffb17 	ldw	r5,-20(fp)
 1822030:	e13ffa17 	ldw	r4,-24(fp)
 1822034:	18220ac0 	call	18220ac <udp_sendto_if_chksum>
#else /* LWIP_CHECKSUM_ON_COPY */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 1822038:	e037883a 	mov	sp,fp
 182203c:	dfc00117 	ldw	ra,4(sp)
 1822040:	df000017 	ldw	fp,0(sp)
 1822044:	dec00204 	addi	sp,sp,8
 1822048:	f800283a 	ret

0182204c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 182204c:	defff704 	addi	sp,sp,-36
 1822050:	dfc00815 	stw	ra,32(sp)
 1822054:	df000715 	stw	fp,28(sp)
 1822058:	df000704 	addi	fp,sp,28
 182205c:	e13ffc15 	stw	r4,-16(fp)
 1822060:	e17ffd15 	stw	r5,-12(fp)
 1822064:	e1bffe15 	stw	r6,-8(fp)
 1822068:	3805883a 	mov	r2,r7
 182206c:	e0bfff0d 	sth	r2,-4(fp)
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, 0, 0);
 1822070:	e0ffff0b 	ldhu	r3,-4(fp)
 1822074:	d8000215 	stw	zero,8(sp)
 1822078:	d8000115 	stw	zero,4(sp)
 182207c:	e0800217 	ldw	r2,8(fp)
 1822080:	d8800015 	stw	r2,0(sp)
 1822084:	180f883a 	mov	r7,r3
 1822088:	e1bffe17 	ldw	r6,-8(fp)
 182208c:	e17ffd17 	ldw	r5,-12(fp)
 1822090:	e13ffc17 	ldw	r4,-16(fp)
 1822094:	18220ac0 	call	18220ac <udp_sendto_if_chksum>
}
 1822098:	e037883a 	mov	sp,fp
 182209c:	dfc00117 	ldw	ra,4(sp)
 18220a0:	df000017 	ldw	fp,0(sp)
 18220a4:	dec00204 	addi	sp,sp,8
 18220a8:	f800283a 	ret

018220ac <udp_sendto_if_chksum>:
/** Same as udp_sendto_if(), but with checksum */
err_t
udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
                     u16_t dst_port, struct netif *netif, u8_t have_chksum,
                     u16_t chksum)
{
 18220ac:	defff004 	addi	sp,sp,-64
 18220b0:	dfc00f15 	stw	ra,60(sp)
 18220b4:	df000e15 	stw	fp,56(sp)
 18220b8:	df000e04 	addi	fp,sp,56
 18220bc:	e13ffa15 	stw	r4,-24(fp)
 18220c0:	e17ffb15 	stw	r5,-20(fp)
 18220c4:	e1bffc15 	stw	r6,-16(fp)
 18220c8:	3809883a 	mov	r4,r7
 18220cc:	e0c00317 	ldw	r3,12(fp)
 18220d0:	e0800417 	ldw	r2,16(fp)
 18220d4:	e13ffd0d 	sth	r4,-12(fp)
 18220d8:	e0fffe05 	stb	r3,-8(fp)
 18220dc:	e0bfff0d 	sth	r2,-4(fp)
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 18220e0:	e0bffa17 	ldw	r2,-24(fp)
 18220e4:	1080048b 	ldhu	r2,18(r2)
 18220e8:	10bfffcc 	andi	r2,r2,65535
 18220ec:	10000d1e 	bne	r2,zero,1822124 <udp_sendto_if_chksum+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 18220f0:	e0fffa17 	ldw	r3,-24(fp)
 18220f4:	e0bffa17 	ldw	r2,-24(fp)
 18220f8:	1080048b 	ldhu	r2,18(r2)
 18220fc:	10bfffcc 	andi	r2,r2,65535
 1822100:	100d883a 	mov	r6,r2
 1822104:	180b883a 	mov	r5,r3
 1822108:	e13ffa17 	ldw	r4,-24(fp)
 182210c:	18225000 	call	1822500 <udp_bind>
 1822110:	e0bff785 	stb	r2,-34(fp)
    if (err != ERR_OK) {
 1822114:	e0bff787 	ldb	r2,-34(fp)
 1822118:	10000226 	beq	r2,zero,1822124 <udp_sendto_if_chksum+0x78>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 182211c:	e0bff783 	ldbu	r2,-34(fp)
 1822120:	0000f206 	br	18224ec <udp_sendto_if_chksum+0x440>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 1822124:	01400204 	movi	r5,8
 1822128:	e13ffb17 	ldw	r4,-20(fp)
 182212c:	181a7540 	call	181a754 <pbuf_header>
 1822130:	10803fcc 	andi	r2,r2,255
 1822134:	10001126 	beq	r2,zero,182217c <udp_sendto_if_chksum+0xd0>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 1822138:	000d883a 	mov	r6,zero
 182213c:	01400204 	movi	r5,8
 1822140:	01000044 	movi	r4,1
 1822144:	181a1480 	call	181a148 <pbuf_alloc>
 1822148:	e0bff615 	stw	r2,-40(fp)
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 182214c:	e0bff617 	ldw	r2,-40(fp)
 1822150:	1000021e 	bne	r2,zero,182215c <udp_sendto_if_chksum+0xb0>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 1822154:	00bfffc4 	movi	r2,-1
 1822158:	0000e406 	br	18224ec <udp_sendto_if_chksum+0x440>
    }
    if (p->tot_len != 0) {
 182215c:	e0bffb17 	ldw	r2,-20(fp)
 1822160:	1080020b 	ldhu	r2,8(r2)
 1822164:	10bfffcc 	andi	r2,r2,65535
 1822168:	10000626 	beq	r2,zero,1822184 <udp_sendto_if_chksum+0xd8>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 182216c:	e17ffb17 	ldw	r5,-20(fp)
 1822170:	e13ff617 	ldw	r4,-40(fp)
 1822174:	181abac0 	call	181abac <pbuf_chain>
 1822178:	00000206 	br	1822184 <udp_sendto_if_chksum+0xd8>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 182217c:	e0bffb17 	ldw	r2,-20(fp)
 1822180:	e0bff615 	stw	r2,-40(fp)
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 1822184:	e0bff617 	ldw	r2,-40(fp)
 1822188:	10800117 	ldw	r2,4(r2)
 182218c:	e0bff815 	stw	r2,-32(fp)
  udphdr->src = htons(pcb->local_port);
 1822190:	e0bffa17 	ldw	r2,-24(fp)
 1822194:	1080048b 	ldhu	r2,18(r2)
 1822198:	10bfffcc 	andi	r2,r2,65535
 182219c:	1004d23a 	srli	r2,r2,8
 18221a0:	1007883a 	mov	r3,r2
 18221a4:	e0bffa17 	ldw	r2,-24(fp)
 18221a8:	1080048b 	ldhu	r2,18(r2)
 18221ac:	10bfffcc 	andi	r2,r2,65535
 18221b0:	1004923a 	slli	r2,r2,8
 18221b4:	1884b03a 	or	r2,r3,r2
 18221b8:	100d883a 	mov	r6,r2
 18221bc:	e0bff817 	ldw	r2,-32(fp)
 18221c0:	30ffffcc 	andi	r3,r6,65535
 18221c4:	19403fcc 	andi	r5,r3,255
 18221c8:	10c00003 	ldbu	r3,0(r2)
 18221cc:	1806703a 	and	r3,r3,zero
 18221d0:	1809883a 	mov	r4,r3
 18221d4:	2807883a 	mov	r3,r5
 18221d8:	20c6b03a 	or	r3,r4,r3
 18221dc:	10c00005 	stb	r3,0(r2)
 18221e0:	30ffffcc 	andi	r3,r6,65535
 18221e4:	1806d23a 	srli	r3,r3,8
 18221e8:	197fffcc 	andi	r5,r3,65535
 18221ec:	10c00043 	ldbu	r3,1(r2)
 18221f0:	1806703a 	and	r3,r3,zero
 18221f4:	1809883a 	mov	r4,r3
 18221f8:	2807883a 	mov	r3,r5
 18221fc:	20c6b03a 	or	r3,r4,r3
 1822200:	10c00045 	stb	r3,1(r2)
  udphdr->dest = htons(dst_port);
 1822204:	e0bffd0b 	ldhu	r2,-12(fp)
 1822208:	1004d23a 	srli	r2,r2,8
 182220c:	1007883a 	mov	r3,r2
 1822210:	e0bffd0b 	ldhu	r2,-12(fp)
 1822214:	1004923a 	slli	r2,r2,8
 1822218:	1884b03a 	or	r2,r3,r2
 182221c:	100d883a 	mov	r6,r2
 1822220:	e0bff817 	ldw	r2,-32(fp)
 1822224:	30ffffcc 	andi	r3,r6,65535
 1822228:	19403fcc 	andi	r5,r3,255
 182222c:	10c00083 	ldbu	r3,2(r2)
 1822230:	1806703a 	and	r3,r3,zero
 1822234:	1809883a 	mov	r4,r3
 1822238:	2807883a 	mov	r3,r5
 182223c:	20c6b03a 	or	r3,r4,r3
 1822240:	10c00085 	stb	r3,2(r2)
 1822244:	30ffffcc 	andi	r3,r6,65535
 1822248:	1806d23a 	srli	r3,r3,8
 182224c:	197fffcc 	andi	r5,r3,65535
 1822250:	10c000c3 	ldbu	r3,3(r2)
 1822254:	1806703a 	and	r3,r3,zero
 1822258:	1809883a 	mov	r4,r3
 182225c:	2807883a 	mov	r3,r5
 1822260:	20c6b03a 	or	r3,r4,r3
 1822264:	10c000c5 	stb	r3,3(r2)
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
 1822268:	e0bff817 	ldw	r2,-32(fp)
 182226c:	10c00183 	ldbu	r3,6(r2)
 1822270:	1806703a 	and	r3,r3,zero
 1822274:	10c00185 	stb	r3,6(r2)
 1822278:	10c001c3 	ldbu	r3,7(r2)
 182227c:	1806703a 	and	r3,r3,zero
 1822280:	10c001c5 	stb	r3,7(r2)
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
 1822284:	e0bffa17 	ldw	r2,-24(fp)
 1822288:	10000326 	beq	r2,zero,1822298 <udp_sendto_if_chksum+0x1ec>
 182228c:	e0bffa17 	ldw	r2,-24(fp)
 1822290:	10800017 	ldw	r2,0(r2)
 1822294:	1000041e 	bne	r2,zero,18222a8 <udp_sendto_if_chksum+0x1fc>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 1822298:	e0800217 	ldw	r2,8(fp)
 182229c:	10800104 	addi	r2,r2,4
 18222a0:	e0bff515 	stw	r2,-44(fp)
 18222a4:	00000f06 	br	18222e4 <udp_sendto_if_chksum+0x238>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
 18222a8:	e0bffa17 	ldw	r2,-24(fp)
 18222ac:	10c00017 	ldw	r3,0(r2)
 18222b0:	e0800217 	ldw	r2,8(fp)
 18222b4:	10800117 	ldw	r2,4(r2)
 18222b8:	18800826 	beq	r3,r2,18222dc <udp_sendto_if_chksum+0x230>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
 18222bc:	e0fff617 	ldw	r3,-40(fp)
 18222c0:	e0bffb17 	ldw	r2,-20(fp)
 18222c4:	18800326 	beq	r3,r2,18222d4 <udp_sendto_if_chksum+0x228>
        /* free the header pbuf */
        pbuf_free(q);
 18222c8:	e13ff617 	ldw	r4,-40(fp)
 18222cc:	181a9040 	call	181a904 <pbuf_free>
        q = NULL;
 18222d0:	e03ff615 	stw	zero,-40(fp)
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
 18222d4:	00bffe84 	movi	r2,-6
 18222d8:	00008406 	br	18224ec <udp_sendto_if_chksum+0x440>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
 18222dc:	e0bffa17 	ldw	r2,-24(fp)
 18222e0:	e0bff515 	stw	r2,-44(fp)
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 18222e4:	e0bff617 	ldw	r2,-40(fp)
 18222e8:	1080020b 	ldhu	r2,8(r2)
 18222ec:	10bfffcc 	andi	r2,r2,65535
 18222f0:	1004d23a 	srli	r2,r2,8
 18222f4:	1007883a 	mov	r3,r2
 18222f8:	e0bff617 	ldw	r2,-40(fp)
 18222fc:	1080020b 	ldhu	r2,8(r2)
 1822300:	10bfffcc 	andi	r2,r2,65535
 1822304:	1004923a 	slli	r2,r2,8
 1822308:	1884b03a 	or	r2,r3,r2
 182230c:	100d883a 	mov	r6,r2
 1822310:	e0bff817 	ldw	r2,-32(fp)
 1822314:	30ffffcc 	andi	r3,r6,65535
 1822318:	19403fcc 	andi	r5,r3,255
 182231c:	10c00103 	ldbu	r3,4(r2)
 1822320:	1806703a 	and	r3,r3,zero
 1822324:	1809883a 	mov	r4,r3
 1822328:	2807883a 	mov	r3,r5
 182232c:	20c6b03a 	or	r3,r4,r3
 1822330:	10c00105 	stb	r3,4(r2)
 1822334:	30ffffcc 	andi	r3,r6,65535
 1822338:	1806d23a 	srli	r3,r3,8
 182233c:	197fffcc 	andi	r5,r3,65535
 1822340:	10c00143 	ldbu	r3,5(r2)
 1822344:	1806703a 	and	r3,r3,zero
 1822348:	1809883a 	mov	r4,r3
 182234c:	2807883a 	mov	r3,r5
 1822350:	20c6b03a 	or	r3,r4,r3
 1822354:	10c00145 	stb	r3,5(r2)
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 1822358:	e0bffa17 	ldw	r2,-24(fp)
 182235c:	10800403 	ldbu	r2,16(r2)
 1822360:	10803fcc 	andi	r2,r2,255
 1822364:	1080004c 	andi	r2,r2,1
 1822368:	10003b1e 	bne	r2,zero,1822458 <udp_sendto_if_chksum+0x3ac>
      u16_t udpchksum;
#if LWIP_CHECKSUM_ON_COPY
      if (have_chksum) {
 182236c:	e0bffe03 	ldbu	r2,-8(fp)
 1822370:	10001926 	beq	r2,zero,18223d8 <udp_sendto_if_chksum+0x32c>
        u32_t acc;
        udpchksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip, IP_PROTO_UDP,
          q->tot_len, UDP_HLEN);
 1822374:	e0bff617 	ldw	r2,-40(fp)
 1822378:	1080020b 	ldhu	r2,8(r2)
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
      u16_t udpchksum;
#if LWIP_CHECKSUM_ON_COPY
      if (have_chksum) {
        u32_t acc;
        udpchksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip, IP_PROTO_UDP,
 182237c:	10bfffcc 	andi	r2,r2,65535
 1822380:	00c00204 	movi	r3,8
 1822384:	d8c00115 	stw	r3,4(sp)
 1822388:	d8800015 	stw	r2,0(sp)
 182238c:	01c00444 	movi	r7,17
 1822390:	e1bffc17 	ldw	r6,-16(fp)
 1822394:	e17ff517 	ldw	r5,-44(fp)
 1822398:	e13ff617 	ldw	r4,-40(fp)
 182239c:	18315300 	call	1831530 <inet_chksum_pseudo_partial>
 18223a0:	e0bff70d 	sth	r2,-36(fp)
          q->tot_len, UDP_HLEN);
        acc = udpchksum + (u16_t)~(chksum);
 18223a4:	e0fff70b 	ldhu	r3,-36(fp)
 18223a8:	e0bfff0b 	ldhu	r2,-4(fp)
 18223ac:	0084303a 	nor	r2,zero,r2
 18223b0:	10bfffcc 	andi	r2,r2,65535
 18223b4:	1885883a 	add	r2,r3,r2
 18223b8:	e0bff915 	stw	r2,-28(fp)
        udpchksum = FOLD_U32T(acc);
 18223bc:	e0bff917 	ldw	r2,-28(fp)
 18223c0:	1004d43a 	srli	r2,r2,16
 18223c4:	1007883a 	mov	r3,r2
 18223c8:	e0bff917 	ldw	r2,-28(fp)
 18223cc:	1885883a 	add	r2,r3,r2
 18223d0:	e0bff70d 	sth	r2,-36(fp)
 18223d4:	00000a06 	br	1822400 <udp_sendto_if_chksum+0x354>
      } else
#endif /* LWIP_CHECKSUM_ON_COPY */
      {
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
 18223d8:	e0bff617 	ldw	r2,-40(fp)
 18223dc:	1080020b 	ldhu	r2,8(r2)
 18223e0:	10bfffcc 	andi	r2,r2,65535
 18223e4:	d8800015 	stw	r2,0(sp)
 18223e8:	01c00444 	movi	r7,17
 18223ec:	e1bffc17 	ldw	r6,-16(fp)
 18223f0:	e17ff517 	ldw	r5,-44(fp)
 18223f4:	e13ff617 	ldw	r4,-40(fp)
 18223f8:	18313300 	call	1831330 <inet_chksum_pseudo>
 18223fc:	e0bff70d 	sth	r2,-36(fp)
      }

      /* chksum zero must become 0xffff, as zero means 'no checksum' */
      if (udpchksum == 0x0000) {
 1822400:	e0bff70b 	ldhu	r2,-36(fp)
 1822404:	1000021e 	bne	r2,zero,1822410 <udp_sendto_if_chksum+0x364>
        udpchksum = 0xffff;
 1822408:	00bfffc4 	movi	r2,-1
 182240c:	e0bff70d 	sth	r2,-36(fp)
      }
      udphdr->chksum = udpchksum;
 1822410:	e0bff817 	ldw	r2,-32(fp)
 1822414:	e0fff70b 	ldhu	r3,-36(fp)
 1822418:	19403fcc 	andi	r5,r3,255
 182241c:	10c00183 	ldbu	r3,6(r2)
 1822420:	1806703a 	and	r3,r3,zero
 1822424:	1809883a 	mov	r4,r3
 1822428:	2807883a 	mov	r3,r5
 182242c:	20c6b03a 	or	r3,r4,r3
 1822430:	10c00185 	stb	r3,6(r2)
 1822434:	e0fff70b 	ldhu	r3,-36(fp)
 1822438:	1806d23a 	srli	r3,r3,8
 182243c:	197fffcc 	andi	r5,r3,65535
 1822440:	10c001c3 	ldbu	r3,7(r2)
 1822444:	1806703a 	and	r3,r3,zero
 1822448:	1809883a 	mov	r4,r3
 182244c:	2807883a 	mov	r3,r5
 1822450:	20c6b03a 	or	r3,r4,r3
 1822454:	10c001c5 	stb	r3,7(r2)
    }
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
 1822458:	e0bffa17 	ldw	r2,-24(fp)
 182245c:	10c002c4 	addi	r3,r2,11
 1822460:	e0800217 	ldw	r2,8(fp)
 1822464:	10c01015 	stw	r3,64(r2)
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 1822468:	e0bffa17 	ldw	r2,-24(fp)
 182246c:	10800283 	ldbu	r2,10(r2)
 1822470:	11003fcc 	andi	r4,r2,255
 1822474:	e0bffa17 	ldw	r2,-24(fp)
 1822478:	10800243 	ldbu	r2,9(r2)
 182247c:	10803fcc 	andi	r2,r2,255
 1822480:	e0c00217 	ldw	r3,8(fp)
 1822484:	d8c00215 	stw	r3,8(sp)
 1822488:	00c00444 	movi	r3,17
 182248c:	d8c00115 	stw	r3,4(sp)
 1822490:	d8800015 	stw	r2,0(sp)
 1822494:	200f883a 	mov	r7,r4
 1822498:	e1bffc17 	ldw	r6,-16(fp)
 182249c:	e17ff517 	ldw	r5,-44(fp)
 18224a0:	e13ff617 	ldw	r4,-40(fp)
 18224a4:	1831f3c0 	call	1831f3c <ip_output_if>
 18224a8:	e0bff785 	stb	r2,-34(fp)
    NETIF_SET_HWADDRHINT(netif, NULL);
 18224ac:	e0800217 	ldw	r2,8(fp)
 18224b0:	10001015 	stw	zero,64(r2)
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 18224b4:	e0fff617 	ldw	r3,-40(fp)
 18224b8:	e0bffb17 	ldw	r2,-20(fp)
 18224bc:	18800326 	beq	r3,r2,18224cc <udp_sendto_if_chksum+0x420>
    /* free the header pbuf */
    pbuf_free(q);
 18224c0:	e13ff617 	ldw	r4,-40(fp)
 18224c4:	181a9040 	call	181a904 <pbuf_free>
    q = NULL;
 18224c8:	e03ff615 	stw	zero,-40(fp)
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 18224cc:	008061f4 	movhi	r2,391
 18224d0:	10a77104 	addi	r2,r2,-25148
 18224d4:	10803c17 	ldw	r2,240(r2)
 18224d8:	10c00044 	addi	r3,r2,1
 18224dc:	008061f4 	movhi	r2,391
 18224e0:	10a77104 	addi	r2,r2,-25148
 18224e4:	10c03c15 	stw	r3,240(r2)
  return err;
 18224e8:	e0bff783 	ldbu	r2,-34(fp)
}
 18224ec:	e037883a 	mov	sp,fp
 18224f0:	dfc00117 	ldw	ra,4(sp)
 18224f4:	df000017 	ldw	fp,0(sp)
 18224f8:	dec00204 	addi	sp,sp,8
 18224fc:	f800283a 	ret

01822500 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 1822500:	defff904 	addi	sp,sp,-28
 1822504:	dfc00615 	stw	ra,24(sp)
 1822508:	df000515 	stw	fp,20(sp)
 182250c:	df000504 	addi	fp,sp,20
 1822510:	e13ffd15 	stw	r4,-12(fp)
 1822514:	e17ffe15 	stw	r5,-8(fp)
 1822518:	3005883a 	mov	r2,r6
 182251c:	e0bfff0d 	sth	r2,-4(fp)

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 1822520:	e03ffc05 	stb	zero,-16(fp)
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 1822524:	d0a7ff17 	ldw	r2,-24580(gp)
 1822528:	e0bffb15 	stw	r2,-20(fp)
 182252c:	00002906 	br	18225d4 <udp_bind+0xd4>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 1822530:	e0fffd17 	ldw	r3,-12(fp)
 1822534:	e0bffb17 	ldw	r2,-20(fp)
 1822538:	1880031e 	bne	r3,r2,1822548 <udp_bind+0x48>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
 182253c:	00800044 	movi	r2,1
 1822540:	e0bffc05 	stb	r2,-16(fp)
 1822544:	00002006 	br	18225c8 <udp_bind+0xc8>

    /* By default, we don't allow to bind to a port that any other udp
       PCB is alread bound to, unless *all* PCBs with that port have tha
       REUSEADDR flag set. */
#if SO_REUSE
    else if (!ip_get_option(pcb, SOF_REUSEADDR) &&
 1822548:	e0bffd17 	ldw	r2,-12(fp)
 182254c:	10800203 	ldbu	r2,8(r2)
 1822550:	10803fcc 	andi	r2,r2,255
 1822554:	1080010c 	andi	r2,r2,4
 1822558:	10001b1e 	bne	r2,zero,18225c8 <udp_bind+0xc8>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
 182255c:	e0bffb17 	ldw	r2,-20(fp)
 1822560:	10800203 	ldbu	r2,8(r2)
 1822564:	10803fcc 	andi	r2,r2,255
 1822568:	1080010c 	andi	r2,r2,4

    /* By default, we don't allow to bind to a port that any other udp
       PCB is alread bound to, unless *all* PCBs with that port have tha
       REUSEADDR flag set. */
#if SO_REUSE
    else if (!ip_get_option(pcb, SOF_REUSEADDR) &&
 182256c:	1000161e 	bne	r2,zero,18225c8 <udp_bind+0xc8>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 1822570:	e0bffb17 	ldw	r2,-20(fp)
 1822574:	1080048b 	ldhu	r2,18(r2)
 1822578:	10ffffcc 	andi	r3,r2,65535
 182257c:	e0bfff0b 	ldhu	r2,-4(fp)
 1822580:	1880111e 	bne	r3,r2,18225c8 <udp_bind+0xc8>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 1822584:	e0bffb17 	ldw	r2,-20(fp)
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 1822588:	10000d26 	beq	r2,zero,18225c0 <udp_bind+0xc0>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 182258c:	e0bffb17 	ldw	r2,-20(fp)
 1822590:	10800017 	ldw	r2,0(r2)
 1822594:	10000a26 	beq	r2,zero,18225c0 <udp_bind+0xc0>
 1822598:	e0bffe17 	ldw	r2,-8(fp)
 182259c:	10000826 	beq	r2,zero,18225c0 <udp_bind+0xc0>
           ip_addr_isany(ipaddr) ||
 18225a0:	e0bffe17 	ldw	r2,-8(fp)
 18225a4:	10800017 	ldw	r2,0(r2)
 18225a8:	10000526 	beq	r2,zero,18225c0 <udp_bind+0xc0>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
 18225ac:	e0bffb17 	ldw	r2,-20(fp)
 18225b0:	10c00017 	ldw	r3,0(r2)
 18225b4:	e0bffe17 	ldw	r2,-8(fp)
 18225b8:	10800017 	ldw	r2,0(r2)
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
           ip_addr_isany(ipaddr) ||
 18225bc:	1880021e 	bne	r3,r2,18225c8 <udp_bind+0xc8>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
 18225c0:	00bffe04 	movi	r2,-8
 18225c4:	00002006 	br	1822648 <udp_bind+0x148>
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 18225c8:	e0bffb17 	ldw	r2,-20(fp)
 18225cc:	10800317 	ldw	r2,12(r2)
 18225d0:	e0bffb15 	stw	r2,-20(fp)
 18225d4:	e0bffb17 	ldw	r2,-20(fp)
 18225d8:	103fd51e 	bne	r2,zero,1822530 <__alt_mem_mem_0+0xff802530>
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
 18225dc:	e0bffe17 	ldw	r2,-8(fp)
 18225e0:	10000326 	beq	r2,zero,18225f0 <udp_bind+0xf0>
 18225e4:	e0bffe17 	ldw	r2,-8(fp)
 18225e8:	10800017 	ldw	r2,0(r2)
 18225ec:	00000106 	br	18225f4 <udp_bind+0xf4>
 18225f0:	0005883a 	mov	r2,zero
 18225f4:	e0fffd17 	ldw	r3,-12(fp)
 18225f8:	18800015 	stw	r2,0(r3)

  /* no port specified? */
  if (port == 0) {
 18225fc:	e0bfff0b 	ldhu	r2,-4(fp)
 1822600:	1000061e 	bne	r2,zero,182261c <udp_bind+0x11c>
    port = udp_new_port();
 1822604:	18218580 	call	1821858 <udp_new_port>
 1822608:	e0bfff0d 	sth	r2,-4(fp)
    if (port == 0) {
 182260c:	e0bfff0b 	ldhu	r2,-4(fp)
 1822610:	1000021e 	bne	r2,zero,182261c <udp_bind+0x11c>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 1822614:	00bffe04 	movi	r2,-8
 1822618:	00000b06 	br	1822648 <udp_bind+0x148>
    }
  }
  pcb->local_port = port;
 182261c:	e0bffd17 	ldw	r2,-12(fp)
 1822620:	e0ffff0b 	ldhu	r3,-4(fp)
 1822624:	10c0048d 	sth	r3,18(r2)
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 1822628:	e0bffc03 	ldbu	r2,-16(fp)
 182262c:	1000051e 	bne	r2,zero,1822644 <udp_bind+0x144>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 1822630:	d0e7ff17 	ldw	r3,-24580(gp)
 1822634:	e0bffd17 	ldw	r2,-12(fp)
 1822638:	10c00315 	stw	r3,12(r2)
    udp_pcbs = pcb;
 182263c:	e0bffd17 	ldw	r2,-12(fp)
 1822640:	d0a7ff15 	stw	r2,-24580(gp)
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
 1822644:	0005883a 	mov	r2,zero
}
 1822648:	e037883a 	mov	sp,fp
 182264c:	dfc00117 	ldw	ra,4(sp)
 1822650:	df000017 	ldw	fp,0(sp)
 1822654:	dec00204 	addi	sp,sp,8
 1822658:	f800283a 	ret

0182265c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 182265c:	defff904 	addi	sp,sp,-28
 1822660:	dfc00615 	stw	ra,24(sp)
 1822664:	df000515 	stw	fp,20(sp)
 1822668:	df000504 	addi	fp,sp,20
 182266c:	e13ffd15 	stw	r4,-12(fp)
 1822670:	e17ffe15 	stw	r5,-8(fp)
 1822674:	3005883a 	mov	r2,r6
 1822678:	e0bfff0d 	sth	r2,-4(fp)
  struct udp_pcb *ipcb;

  if (pcb->local_port == 0) {
 182267c:	e0bffd17 	ldw	r2,-12(fp)
 1822680:	1080048b 	ldhu	r2,18(r2)
 1822684:	10bfffcc 	andi	r2,r2,65535
 1822688:	10000d1e 	bne	r2,zero,18226c0 <udp_connect+0x64>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 182268c:	e0fffd17 	ldw	r3,-12(fp)
 1822690:	e0bffd17 	ldw	r2,-12(fp)
 1822694:	1080048b 	ldhu	r2,18(r2)
 1822698:	10bfffcc 	andi	r2,r2,65535
 182269c:	100d883a 	mov	r6,r2
 18226a0:	180b883a 	mov	r5,r3
 18226a4:	e13ffd17 	ldw	r4,-12(fp)
 18226a8:	18225000 	call	1822500 <udp_bind>
 18226ac:	e0bffc05 	stb	r2,-16(fp)
    if (err != ERR_OK) {
 18226b0:	e0bffc07 	ldb	r2,-16(fp)
 18226b4:	10000226 	beq	r2,zero,18226c0 <udp_connect+0x64>
      return err;
 18226b8:	e0bffc03 	ldbu	r2,-16(fp)
 18226bc:	00002406 	br	1822750 <udp_connect+0xf4>
    }
  }

  ip_addr_set(&pcb->remote_ip, ipaddr);
 18226c0:	e0bffe17 	ldw	r2,-8(fp)
 18226c4:	10000326 	beq	r2,zero,18226d4 <udp_connect+0x78>
 18226c8:	e0bffe17 	ldw	r2,-8(fp)
 18226cc:	10800017 	ldw	r2,0(r2)
 18226d0:	00000106 	br	18226d8 <udp_connect+0x7c>
 18226d4:	0005883a 	mov	r2,zero
 18226d8:	e0fffd17 	ldw	r3,-12(fp)
 18226dc:	18800115 	stw	r2,4(r3)
  pcb->remote_port = port;
 18226e0:	e0bffd17 	ldw	r2,-12(fp)
 18226e4:	e0ffff0b 	ldhu	r3,-4(fp)
 18226e8:	10c0050d 	sth	r3,20(r2)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 18226ec:	e0bffd17 	ldw	r2,-12(fp)
 18226f0:	10800403 	ldbu	r2,16(r2)
 18226f4:	10800114 	ori	r2,r2,4
 18226f8:	1007883a 	mov	r3,r2
 18226fc:	e0bffd17 	ldw	r2,-12(fp)
 1822700:	10c00405 	stb	r3,16(r2)
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 1822704:	d0a7ff17 	ldw	r2,-24580(gp)
 1822708:	e0bffb15 	stw	r2,-20(fp)
 182270c:	00000806 	br	1822730 <udp_connect+0xd4>
    if (pcb == ipcb) {
 1822710:	e0fffd17 	ldw	r3,-12(fp)
 1822714:	e0bffb17 	ldw	r2,-20(fp)
 1822718:	1880021e 	bne	r3,r2,1822724 <udp_connect+0xc8>
      /* already on the list, just return */
      return ERR_OK;
 182271c:	0005883a 	mov	r2,zero
 1822720:	00000b06 	br	1822750 <udp_connect+0xf4>
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 1822724:	e0bffb17 	ldw	r2,-20(fp)
 1822728:	10800317 	ldw	r2,12(r2)
 182272c:	e0bffb15 	stw	r2,-20(fp)
 1822730:	e0bffb17 	ldw	r2,-20(fp)
 1822734:	103ff61e 	bne	r2,zero,1822710 <__alt_mem_mem_0+0xff802710>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 1822738:	d0e7ff17 	ldw	r3,-24580(gp)
 182273c:	e0bffd17 	ldw	r2,-12(fp)
 1822740:	10c00315 	stw	r3,12(r2)
  udp_pcbs = pcb;
 1822744:	e0bffd17 	ldw	r2,-12(fp)
 1822748:	d0a7ff15 	stw	r2,-24580(gp)
  return ERR_OK;
 182274c:	0005883a 	mov	r2,zero
}
 1822750:	e037883a 	mov	sp,fp
 1822754:	dfc00117 	ldw	ra,4(sp)
 1822758:	df000017 	ldw	fp,0(sp)
 182275c:	dec00204 	addi	sp,sp,8
 1822760:	f800283a 	ret

01822764 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 1822764:	defffe04 	addi	sp,sp,-8
 1822768:	df000115 	stw	fp,4(sp)
 182276c:	df000104 	addi	fp,sp,4
 1822770:	e13fff15 	stw	r4,-4(fp)
  /* reset remote address association */
  ip_addr_set_any(&pcb->remote_ip);
 1822774:	e0bfff17 	ldw	r2,-4(fp)
 1822778:	10000115 	stw	zero,4(r2)
  pcb->remote_port = 0;
 182277c:	e0bfff17 	ldw	r2,-4(fp)
 1822780:	1000050d 	sth	zero,20(r2)
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 1822784:	e0bfff17 	ldw	r2,-4(fp)
 1822788:	10c00403 	ldbu	r3,16(r2)
 182278c:	00bffec4 	movi	r2,-5
 1822790:	1884703a 	and	r2,r3,r2
 1822794:	1007883a 	mov	r3,r2
 1822798:	e0bfff17 	ldw	r2,-4(fp)
 182279c:	10c00405 	stb	r3,16(r2)
}
 18227a0:	0001883a 	nop
 18227a4:	e037883a 	mov	sp,fp
 18227a8:	df000017 	ldw	fp,0(sp)
 18227ac:	dec00104 	addi	sp,sp,4
 18227b0:	f800283a 	ret

018227b4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 18227b4:	defffc04 	addi	sp,sp,-16
 18227b8:	df000315 	stw	fp,12(sp)
 18227bc:	df000304 	addi	fp,sp,12
 18227c0:	e13ffd15 	stw	r4,-12(fp)
 18227c4:	e17ffe15 	stw	r5,-8(fp)
 18227c8:	e1bfff15 	stw	r6,-4(fp)
  /* remember recv() callback and user data */
  pcb->recv = recv;
 18227cc:	e0bffd17 	ldw	r2,-12(fp)
 18227d0:	e0fffe17 	ldw	r3,-8(fp)
 18227d4:	10c00615 	stw	r3,24(r2)
  pcb->recv_arg = recv_arg;
 18227d8:	e0bffd17 	ldw	r2,-12(fp)
 18227dc:	e0ffff17 	ldw	r3,-4(fp)
 18227e0:	10c00715 	stw	r3,28(r2)
}
 18227e4:	0001883a 	nop
 18227e8:	e037883a 	mov	sp,fp
 18227ec:	df000017 	ldw	fp,0(sp)
 18227f0:	dec00104 	addi	sp,sp,4
 18227f4:	f800283a 	ret

018227f8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 18227f8:	defffc04 	addi	sp,sp,-16
 18227fc:	dfc00315 	stw	ra,12(sp)
 1822800:	df000215 	stw	fp,8(sp)
 1822804:	df000204 	addi	fp,sp,8
 1822808:	e13fff15 	stw	r4,-4(fp)
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 182280c:	d0e7ff17 	ldw	r3,-24580(gp)
 1822810:	e0bfff17 	ldw	r2,-4(fp)
 1822814:	1880041e 	bne	r3,r2,1822828 <udp_remove+0x30>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 1822818:	d0a7ff17 	ldw	r2,-24580(gp)
 182281c:	10800317 	ldw	r2,12(r2)
 1822820:	d0a7ff15 	stw	r2,-24580(gp)
 1822824:	00001306 	br	1822874 <udp_remove+0x7c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 1822828:	d0a7ff17 	ldw	r2,-24580(gp)
 182282c:	e0bffe15 	stw	r2,-8(fp)
 1822830:	00000e06 	br	182286c <udp_remove+0x74>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 1822834:	e0bffe17 	ldw	r2,-8(fp)
 1822838:	10800317 	ldw	r2,12(r2)
 182283c:	10000826 	beq	r2,zero,1822860 <udp_remove+0x68>
 1822840:	e0bffe17 	ldw	r2,-8(fp)
 1822844:	10c00317 	ldw	r3,12(r2)
 1822848:	e0bfff17 	ldw	r2,-4(fp)
 182284c:	1880041e 	bne	r3,r2,1822860 <udp_remove+0x68>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 1822850:	e0bfff17 	ldw	r2,-4(fp)
 1822854:	10c00317 	ldw	r3,12(r2)
 1822858:	e0bffe17 	ldw	r2,-8(fp)
 182285c:	10c00315 	stw	r3,12(r2)
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 1822860:	e0bffe17 	ldw	r2,-8(fp)
 1822864:	10800317 	ldw	r2,12(r2)
 1822868:	e0bffe15 	stw	r2,-8(fp)
 182286c:	e0bffe17 	ldw	r2,-8(fp)
 1822870:	103ff01e 	bne	r2,zero,1822834 <__alt_mem_mem_0+0xff802834>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 1822874:	e17fff17 	ldw	r5,-4(fp)
 1822878:	01000044 	movi	r4,1
 182287c:	18341e40 	call	18341e4 <memp_free>
}
 1822880:	0001883a 	nop
 1822884:	e037883a 	mov	sp,fp
 1822888:	dfc00117 	ldw	ra,4(sp)
 182288c:	df000017 	ldw	fp,0(sp)
 1822890:	dec00204 	addi	sp,sp,8
 1822894:	f800283a 	ret

01822898 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 1822898:	defffd04 	addi	sp,sp,-12
 182289c:	dfc00215 	stw	ra,8(sp)
 18228a0:	df000115 	stw	fp,4(sp)
 18228a4:	df000104 	addi	fp,sp,4
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 18228a8:	01000044 	movi	r4,1
 18228ac:	18340280 	call	1834028 <memp_malloc>
 18228b0:	e0bfff15 	stw	r2,-4(fp)
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 18228b4:	e0bfff17 	ldw	r2,-4(fp)
 18228b8:	10000726 	beq	r2,zero,18228d8 <udp_new+0x40>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 18228bc:	01800804 	movi	r6,32
 18228c0:	000b883a 	mov	r5,zero
 18228c4:	e13fff17 	ldw	r4,-4(fp)
 18228c8:	18061940 	call	1806194 <memset>
    pcb->ttl = UDP_TTL;
 18228cc:	e0bfff17 	ldw	r2,-4(fp)
 18228d0:	00c01004 	movi	r3,64
 18228d4:	10c00285 	stb	r3,10(r2)
  }
  return pcb;
 18228d8:	e0bfff17 	ldw	r2,-4(fp)
}
 18228dc:	e037883a 	mov	sp,fp
 18228e0:	dfc00117 	ldw	ra,4(sp)
 18228e4:	df000017 	ldw	fp,0(sp)
 18228e8:	dec00204 	addi	sp,sp,8
 18228ec:	f800283a 	ret

018228f0 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 18228f0:	defffc04 	addi	sp,sp,-16
 18228f4:	dfc00315 	stw	ra,12(sp)
 18228f8:	df000215 	stw	fp,8(sp)
 18228fc:	df000204 	addi	fp,sp,8
 1822900:	e13fff15 	stw	r4,-4(fp)
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  while (q) {
 1822904:	00000c06 	br	1822938 <free_etharp_q+0x48>
    r = q;
 1822908:	e0bfff17 	ldw	r2,-4(fp)
 182290c:	e0bffe15 	stw	r2,-8(fp)
    q = q->next;
 1822910:	e0bfff17 	ldw	r2,-4(fp)
 1822914:	10800017 	ldw	r2,0(r2)
 1822918:	e0bfff15 	stw	r2,-4(fp)
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
 182291c:	e0bffe17 	ldw	r2,-8(fp)
 1822920:	10800117 	ldw	r2,4(r2)
 1822924:	1009883a 	mov	r4,r2
 1822928:	181a9040 	call	181a904 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 182292c:	e17ffe17 	ldw	r5,-8(fp)
 1822930:	010002c4 	movi	r4,11
 1822934:	18341e40 	call	18341e4 <memp_free>
free_etharp_q(struct etharp_q_entry *q)
{
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  while (q) {
 1822938:	e0bfff17 	ldw	r2,-4(fp)
 182293c:	103ff21e 	bne	r2,zero,1822908 <__alt_mem_mem_0+0xff802908>
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
    memp_free(MEMP_ARP_QUEUE, r);
  }
}
 1822940:	0001883a 	nop
 1822944:	e037883a 	mov	sp,fp
 1822948:	dfc00117 	ldw	ra,4(sp)
 182294c:	df000017 	ldw	fp,0(sp)
 1822950:	dec00204 	addi	sp,sp,8
 1822954:	f800283a 	ret

01822958 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 1822958:	defffd04 	addi	sp,sp,-12
 182295c:	dfc00215 	stw	ra,8(sp)
 1822960:	df000115 	stw	fp,4(sp)
 1822964:	df000104 	addi	fp,sp,4
 1822968:	e13fff15 	stw	r4,-4(fp)
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 182296c:	00806134 	movhi	r2,388
 1822970:	109d5c04 	addi	r2,r2,30064
 1822974:	e0ffff17 	ldw	r3,-4(fp)
 1822978:	18c00524 	muli	r3,r3,20
 182297c:	10c5883a 	add	r2,r2,r3
 1822980:	10800017 	ldw	r2,0(r2)
 1822984:	10000e26 	beq	r2,zero,18229c0 <etharp_free_entry+0x68>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 1822988:	00806134 	movhi	r2,388
 182298c:	109d5c04 	addi	r2,r2,30064
 1822990:	e0ffff17 	ldw	r3,-4(fp)
 1822994:	18c00524 	muli	r3,r3,20
 1822998:	10c5883a 	add	r2,r2,r3
 182299c:	10800017 	ldw	r2,0(r2)
 18229a0:	1009883a 	mov	r4,r2
 18229a4:	18228f00 	call	18228f0 <free_etharp_q>
    arp_table[i].q = NULL;
 18229a8:	00806134 	movhi	r2,388
 18229ac:	109d5c04 	addi	r2,r2,30064
 18229b0:	e0ffff17 	ldw	r3,-4(fp)
 18229b4:	18c00524 	muli	r3,r3,20
 18229b8:	10c5883a 	add	r2,r2,r3
 18229bc:	10000015 	stw	zero,0(r2)
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 18229c0:	00806134 	movhi	r2,388
 18229c4:	109d5c04 	addi	r2,r2,30064
 18229c8:	e0ffff17 	ldw	r3,-4(fp)
 18229cc:	18c00524 	muli	r3,r3,20
 18229d0:	10c5883a 	add	r2,r2,r3
 18229d4:	10800484 	addi	r2,r2,18
 18229d8:	10000005 	stb	zero,0(r2)
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 18229dc:	0001883a 	nop
 18229e0:	e037883a 	mov	sp,fp
 18229e4:	dfc00117 	ldw	ra,4(sp)
 18229e8:	df000017 	ldw	fp,0(sp)
 18229ec:	dec00204 	addi	sp,sp,8
 18229f0:	f800283a 	ret

018229f4 <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 18229f4:	defffd04 	addi	sp,sp,-12
 18229f8:	dfc00215 	stw	ra,8(sp)
 18229fc:	df000115 	stw	fp,4(sp)
 1822a00:	df000104 	addi	fp,sp,4
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 1822a04:	e03fff05 	stb	zero,-4(fp)
 1822a08:	00005006 	br	1822b4c <etharp_tmr+0x158>
    u8_t state = arp_table[i].state;
 1822a0c:	e0ffff03 	ldbu	r3,-4(fp)
 1822a10:	00806134 	movhi	r2,388
 1822a14:	109d5c04 	addi	r2,r2,30064
 1822a18:	18c00524 	muli	r3,r3,20
 1822a1c:	10c5883a 	add	r2,r2,r3
 1822a20:	10800484 	addi	r2,r2,18
 1822a24:	10800003 	ldbu	r2,0(r2)
 1822a28:	e0bfff45 	stb	r2,-3(fp)
    if (state != ETHARP_STATE_EMPTY
 1822a2c:	e0bfff43 	ldbu	r2,-3(fp)
 1822a30:	10004326 	beq	r2,zero,1822b40 <etharp_tmr+0x14c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 1822a34:	e0ffff03 	ldbu	r3,-4(fp)
 1822a38:	00806134 	movhi	r2,388
 1822a3c:	109d5c04 	addi	r2,r2,30064
 1822a40:	19000524 	muli	r4,r3,20
 1822a44:	1105883a 	add	r2,r2,r4
 1822a48:	108004c4 	addi	r2,r2,19
 1822a4c:	10800003 	ldbu	r2,0(r2)
 1822a50:	10800044 	addi	r2,r2,1
 1822a54:	1009883a 	mov	r4,r2
 1822a58:	00806134 	movhi	r2,388
 1822a5c:	109d5c04 	addi	r2,r2,30064
 1822a60:	18c00524 	muli	r3,r3,20
 1822a64:	10c5883a 	add	r2,r2,r3
 1822a68:	108004c4 	addi	r2,r2,19
 1822a6c:	11000005 	stb	r4,0(r2)
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 1822a70:	e0ffff03 	ldbu	r3,-4(fp)
 1822a74:	00806134 	movhi	r2,388
 1822a78:	109d5c04 	addi	r2,r2,30064
 1822a7c:	18c00524 	muli	r3,r3,20
 1822a80:	10c5883a 	add	r2,r2,r3
 1822a84:	108004c4 	addi	r2,r2,19
 1822a88:	10800003 	ldbu	r2,0(r2)
 1822a8c:	10803fcc 	andi	r2,r2,255
 1822a90:	10803c28 	cmpgeui	r2,r2,240
 1822a94:	1000141e 	bne	r2,zero,1822ae8 <etharp_tmr+0xf4>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 1822a98:	e0ffff03 	ldbu	r3,-4(fp)
 1822a9c:	00806134 	movhi	r2,388
 1822aa0:	109d5c04 	addi	r2,r2,30064
 1822aa4:	18c00524 	muli	r3,r3,20
 1822aa8:	10c5883a 	add	r2,r2,r3
 1822aac:	10800484 	addi	r2,r2,18
 1822ab0:	10800003 	ldbu	r2,0(r2)
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 1822ab4:	10803fcc 	andi	r2,r2,255
 1822ab8:	10800058 	cmpnei	r2,r2,1
 1822abc:	10000e1e 	bne	r2,zero,1822af8 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 1822ac0:	e0ffff03 	ldbu	r3,-4(fp)
 1822ac4:	00806134 	movhi	r2,388
 1822ac8:	109d5c04 	addi	r2,r2,30064
 1822acc:	18c00524 	muli	r3,r3,20
 1822ad0:	10c5883a 	add	r2,r2,r3
 1822ad4:	108004c4 	addi	r2,r2,19
 1822ad8:	10800003 	ldbu	r2,0(r2)
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 1822adc:	10803fcc 	andi	r2,r2,255
 1822ae0:	108000b0 	cmpltui	r2,r2,2
 1822ae4:	1000041e 	bne	r2,zero,1822af8 <etharp_tmr+0x104>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 1822ae8:	e0bfff03 	ldbu	r2,-4(fp)
 1822aec:	1009883a 	mov	r4,r2
 1822af0:	18229580 	call	1822958 <etharp_free_entry>
 1822af4:	00001206 	br	1822b40 <etharp_tmr+0x14c>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
 1822af8:	e0ffff03 	ldbu	r3,-4(fp)
 1822afc:	00806134 	movhi	r2,388
 1822b00:	109d5c04 	addi	r2,r2,30064
 1822b04:	18c00524 	muli	r3,r3,20
 1822b08:	10c5883a 	add	r2,r2,r3
 1822b0c:	10800484 	addi	r2,r2,18
 1822b10:	10800003 	ldbu	r2,0(r2)
 1822b14:	10803fcc 	andi	r2,r2,255
 1822b18:	108000d8 	cmpnei	r2,r2,3
 1822b1c:	1000081e 	bne	r2,zero,1822b40 <etharp_tmr+0x14c>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 1822b20:	e0ffff03 	ldbu	r3,-4(fp)
 1822b24:	00806134 	movhi	r2,388
 1822b28:	109d5c04 	addi	r2,r2,30064
 1822b2c:	18c00524 	muli	r3,r3,20
 1822b30:	10c5883a 	add	r2,r2,r3
 1822b34:	10800484 	addi	r2,r2,18
 1822b38:	00c00084 	movi	r3,2
 1822b3c:	10c00005 	stb	r3,0(r2)
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 1822b40:	e0bfff03 	ldbu	r2,-4(fp)
 1822b44:	10800044 	addi	r2,r2,1
 1822b48:	e0bfff05 	stb	r2,-4(fp)
 1822b4c:	e0bfff03 	ldbu	r2,-4(fp)
 1822b50:	10800670 	cmpltui	r2,r2,25
 1822b54:	103fad1e 	bne	r2,zero,1822a0c <__alt_mem_mem_0+0xff802a0c>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
 1822b58:	0001883a 	nop
 1822b5c:	e037883a 	mov	sp,fp
 1822b60:	dfc00117 	ldw	ra,4(sp)
 1822b64:	df000017 	ldw	fp,0(sp)
 1822b68:	dec00204 	addi	sp,sp,8
 1822b6c:	f800283a 	ret

01822b70 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
 1822b70:	defff904 	addi	sp,sp,-28
 1822b74:	dfc00615 	stw	ra,24(sp)
 1822b78:	df000515 	stw	fp,20(sp)
 1822b7c:	df000504 	addi	fp,sp,20
 1822b80:	e13ffe15 	stw	r4,-8(fp)
 1822b84:	2805883a 	mov	r2,r5
 1822b88:	e0bfff05 	stb	r2,-4(fp)
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 1822b8c:	00800644 	movi	r2,25
 1822b90:	e0bffb05 	stb	r2,-20(fp)
 1822b94:	00800644 	movi	r2,25
 1822b98:	e0bffb45 	stb	r2,-19(fp)
  s8_t empty = ARP_TABLE_SIZE;
 1822b9c:	00800644 	movi	r2,25
 1822ba0:	e0bffb85 	stb	r2,-18(fp)
  u8_t i = 0, age_pending = 0, age_stable = 0;
 1822ba4:	e03ffbc5 	stb	zero,-17(fp)
 1822ba8:	e03ffc05 	stb	zero,-16(fp)
 1822bac:	e03ffc45 	stb	zero,-15(fp)
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 1822bb0:	00800644 	movi	r2,25
 1822bb4:	e0bffc85 	stb	r2,-14(fp)
  /* its age */
  u8_t age_queue = 0;
 1822bb8:	e03ffcc5 	stb	zero,-13(fp)
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 1822bbc:	e03ffbc5 	stb	zero,-17(fp)
 1822bc0:	00006e06 	br	1822d7c <etharp_find_entry+0x20c>
    u8_t state = arp_table[i].state;
 1822bc4:	e0fffbc3 	ldbu	r3,-17(fp)
 1822bc8:	00806134 	movhi	r2,388
 1822bcc:	109d5c04 	addi	r2,r2,30064
 1822bd0:	18c00524 	muli	r3,r3,20
 1822bd4:	10c5883a 	add	r2,r2,r3
 1822bd8:	10800484 	addi	r2,r2,18
 1822bdc:	10800003 	ldbu	r2,0(r2)
 1822be0:	e0bffd05 	stb	r2,-12(fp)
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 1822be4:	e0bffb87 	ldb	r2,-18(fp)
 1822be8:	10800658 	cmpnei	r2,r2,25
 1822bec:	1000051e 	bne	r2,zero,1822c04 <etharp_find_entry+0x94>
 1822bf0:	e0bffd03 	ldbu	r2,-12(fp)
 1822bf4:	1000031e 	bne	r2,zero,1822c04 <etharp_find_entry+0x94>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 1822bf8:	e0bffbc3 	ldbu	r2,-17(fp)
 1822bfc:	e0bffb85 	stb	r2,-18(fp)
 1822c00:	00005b06 	br	1822d70 <etharp_find_entry+0x200>
    } else if (state != ETHARP_STATE_EMPTY) {
 1822c04:	e0bffd03 	ldbu	r2,-12(fp)
 1822c08:	10005926 	beq	r2,zero,1822d70 <etharp_find_entry+0x200>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 1822c0c:	e0bffe17 	ldw	r2,-8(fp)
 1822c10:	10000c26 	beq	r2,zero,1822c44 <etharp_find_entry+0xd4>
 1822c14:	e0bffe17 	ldw	r2,-8(fp)
 1822c18:	10c00017 	ldw	r3,0(r2)
 1822c1c:	e13ffbc3 	ldbu	r4,-17(fp)
 1822c20:	00806134 	movhi	r2,388
 1822c24:	109d5c04 	addi	r2,r2,30064
 1822c28:	21000524 	muli	r4,r4,20
 1822c2c:	1105883a 	add	r2,r2,r4
 1822c30:	10800104 	addi	r2,r2,4
 1822c34:	10800017 	ldw	r2,0(r2)
 1822c38:	1880021e 	bne	r3,r2,1822c44 <etharp_find_entry+0xd4>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 1822c3c:	e0bffbc3 	ldbu	r2,-17(fp)
 1822c40:	00008c06 	br	1822e74 <etharp_find_entry+0x304>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 1822c44:	e0bffd03 	ldbu	r2,-12(fp)
 1822c48:	10800058 	cmpnei	r2,r2,1
 1822c4c:	1000311e 	bne	r2,zero,1822d14 <etharp_find_entry+0x1a4>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 1822c50:	e0fffbc3 	ldbu	r3,-17(fp)
 1822c54:	00806134 	movhi	r2,388
 1822c58:	109d5c04 	addi	r2,r2,30064
 1822c5c:	18c00524 	muli	r3,r3,20
 1822c60:	10c5883a 	add	r2,r2,r3
 1822c64:	10800017 	ldw	r2,0(r2)
 1822c68:	10001526 	beq	r2,zero,1822cc0 <etharp_find_entry+0x150>
          if (arp_table[i].ctime >= age_queue) {
 1822c6c:	e0fffbc3 	ldbu	r3,-17(fp)
 1822c70:	00806134 	movhi	r2,388
 1822c74:	109d5c04 	addi	r2,r2,30064
 1822c78:	18c00524 	muli	r3,r3,20
 1822c7c:	10c5883a 	add	r2,r2,r3
 1822c80:	108004c4 	addi	r2,r2,19
 1822c84:	10800003 	ldbu	r2,0(r2)
 1822c88:	10c03fcc 	andi	r3,r2,255
 1822c8c:	e0bffcc3 	ldbu	r2,-13(fp)
 1822c90:	18803736 	bltu	r3,r2,1822d70 <etharp_find_entry+0x200>
            old_queue = i;
 1822c94:	e0bffbc3 	ldbu	r2,-17(fp)
 1822c98:	e0bffc85 	stb	r2,-14(fp)
            age_queue = arp_table[i].ctime;
 1822c9c:	e0fffbc3 	ldbu	r3,-17(fp)
 1822ca0:	00806134 	movhi	r2,388
 1822ca4:	109d5c04 	addi	r2,r2,30064
 1822ca8:	18c00524 	muli	r3,r3,20
 1822cac:	10c5883a 	add	r2,r2,r3
 1822cb0:	108004c4 	addi	r2,r2,19
 1822cb4:	10800003 	ldbu	r2,0(r2)
 1822cb8:	e0bffcc5 	stb	r2,-13(fp)
 1822cbc:	00002c06 	br	1822d70 <etharp_find_entry+0x200>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 1822cc0:	e0fffbc3 	ldbu	r3,-17(fp)
 1822cc4:	00806134 	movhi	r2,388
 1822cc8:	109d5c04 	addi	r2,r2,30064
 1822ccc:	18c00524 	muli	r3,r3,20
 1822cd0:	10c5883a 	add	r2,r2,r3
 1822cd4:	108004c4 	addi	r2,r2,19
 1822cd8:	10800003 	ldbu	r2,0(r2)
 1822cdc:	10c03fcc 	andi	r3,r2,255
 1822ce0:	e0bffc03 	ldbu	r2,-16(fp)
 1822ce4:	18802236 	bltu	r3,r2,1822d70 <etharp_find_entry+0x200>
            old_pending = i;
 1822ce8:	e0bffbc3 	ldbu	r2,-17(fp)
 1822cec:	e0bffb05 	stb	r2,-20(fp)
            age_pending = arp_table[i].ctime;
 1822cf0:	e0fffbc3 	ldbu	r3,-17(fp)
 1822cf4:	00806134 	movhi	r2,388
 1822cf8:	109d5c04 	addi	r2,r2,30064
 1822cfc:	18c00524 	muli	r3,r3,20
 1822d00:	10c5883a 	add	r2,r2,r3
 1822d04:	108004c4 	addi	r2,r2,19
 1822d08:	10800003 	ldbu	r2,0(r2)
 1822d0c:	e0bffc05 	stb	r2,-16(fp)
 1822d10:	00001706 	br	1822d70 <etharp_find_entry+0x200>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 1822d14:	e0bffd03 	ldbu	r2,-12(fp)
 1822d18:	108000b0 	cmpltui	r2,r2,2
 1822d1c:	1000141e 	bne	r2,zero,1822d70 <etharp_find_entry+0x200>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 1822d20:	e0fffbc3 	ldbu	r3,-17(fp)
 1822d24:	00806134 	movhi	r2,388
 1822d28:	109d5c04 	addi	r2,r2,30064
 1822d2c:	18c00524 	muli	r3,r3,20
 1822d30:	10c5883a 	add	r2,r2,r3
 1822d34:	108004c4 	addi	r2,r2,19
 1822d38:	10800003 	ldbu	r2,0(r2)
 1822d3c:	10c03fcc 	andi	r3,r2,255
 1822d40:	e0bffc43 	ldbu	r2,-15(fp)
 1822d44:	18800a36 	bltu	r3,r2,1822d70 <etharp_find_entry+0x200>
            old_stable = i;
 1822d48:	e0bffbc3 	ldbu	r2,-17(fp)
 1822d4c:	e0bffb45 	stb	r2,-19(fp)
            age_stable = arp_table[i].ctime;
 1822d50:	e0fffbc3 	ldbu	r3,-17(fp)
 1822d54:	00806134 	movhi	r2,388
 1822d58:	109d5c04 	addi	r2,r2,30064
 1822d5c:	18c00524 	muli	r3,r3,20
 1822d60:	10c5883a 	add	r2,r2,r3
 1822d64:	108004c4 	addi	r2,r2,19
 1822d68:	10800003 	ldbu	r2,0(r2)
 1822d6c:	e0bffc45 	stb	r2,-15(fp)
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 1822d70:	e0bffbc3 	ldbu	r2,-17(fp)
 1822d74:	10800044 	addi	r2,r2,1
 1822d78:	e0bffbc5 	stb	r2,-17(fp)
 1822d7c:	e0bffbc3 	ldbu	r2,-17(fp)
 1822d80:	10800670 	cmpltui	r2,r2,25
 1822d84:	103f8f1e 	bne	r2,zero,1822bc4 <__alt_mem_mem_0+0xff802bc4>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 1822d88:	e0bfff03 	ldbu	r2,-4(fp)
 1822d8c:	1080008c 	andi	r2,r2,2
 1822d90:	1000061e 	bne	r2,zero,1822dac <etharp_find_entry+0x23c>
 1822d94:	e0bffb87 	ldb	r2,-18(fp)
 1822d98:	10800658 	cmpnei	r2,r2,25
 1822d9c:	1000051e 	bne	r2,zero,1822db4 <etharp_find_entry+0x244>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 1822da0:	e0bfff03 	ldbu	r2,-4(fp)
 1822da4:	1080004c 	andi	r2,r2,1
 1822da8:	1000021e 	bne	r2,zero,1822db4 <etharp_find_entry+0x244>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 1822dac:	00bfffc4 	movi	r2,-1
 1822db0:	00003006 	br	1822e74 <etharp_find_entry+0x304>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 1822db4:	e0bffb87 	ldb	r2,-18(fp)
 1822db8:	10800648 	cmpgei	r2,r2,25
 1822dbc:	1000031e 	bne	r2,zero,1822dcc <etharp_find_entry+0x25c>
    i = empty;
 1822dc0:	e0bffb83 	ldbu	r2,-18(fp)
 1822dc4:	e0bffbc5 	stb	r2,-17(fp)
 1822dc8:	00001706 	br	1822e28 <etharp_find_entry+0x2b8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 1822dcc:	e0bffb47 	ldb	r2,-19(fp)
 1822dd0:	10800648 	cmpgei	r2,r2,25
 1822dd4:	1000031e 	bne	r2,zero,1822de4 <etharp_find_entry+0x274>
      /* recycle oldest stable*/
      i = old_stable;
 1822dd8:	e0bffb43 	ldbu	r2,-19(fp)
 1822ddc:	e0bffbc5 	stb	r2,-17(fp)
 1822de0:	00000e06 	br	1822e1c <etharp_find_entry+0x2ac>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 1822de4:	e0bffb07 	ldb	r2,-20(fp)
 1822de8:	10800648 	cmpgei	r2,r2,25
 1822dec:	1000031e 	bne	r2,zero,1822dfc <etharp_find_entry+0x28c>
      /* recycle oldest pending */
      i = old_pending;
 1822df0:	e0bffb03 	ldbu	r2,-20(fp)
 1822df4:	e0bffbc5 	stb	r2,-17(fp)
 1822df8:	00000806 	br	1822e1c <etharp_find_entry+0x2ac>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 1822dfc:	e0bffc87 	ldb	r2,-14(fp)
 1822e00:	10800648 	cmpgei	r2,r2,25
 1822e04:	1000031e 	bne	r2,zero,1822e14 <etharp_find_entry+0x2a4>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 1822e08:	e0bffc83 	ldbu	r2,-14(fp)
 1822e0c:	e0bffbc5 	stb	r2,-17(fp)
 1822e10:	00000206 	br	1822e1c <etharp_find_entry+0x2ac>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 1822e14:	00bfffc4 	movi	r2,-1
 1822e18:	00001606 	br	1822e74 <etharp_find_entry+0x304>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 1822e1c:	e0bffbc3 	ldbu	r2,-17(fp)
 1822e20:	1009883a 	mov	r4,r2
 1822e24:	18229580 	call	1822958 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 1822e28:	e0bffe17 	ldw	r2,-8(fp)
 1822e2c:	10000926 	beq	r2,zero,1822e54 <etharp_find_entry+0x2e4>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
 1822e30:	e13ffbc3 	ldbu	r4,-17(fp)
 1822e34:	e0bffe17 	ldw	r2,-8(fp)
 1822e38:	10c00017 	ldw	r3,0(r2)
 1822e3c:	00806134 	movhi	r2,388
 1822e40:	109d5c04 	addi	r2,r2,30064
 1822e44:	21000524 	muli	r4,r4,20
 1822e48:	1105883a 	add	r2,r2,r4
 1822e4c:	10800104 	addi	r2,r2,4
 1822e50:	10c00015 	stw	r3,0(r2)
  }
  arp_table[i].ctime = 0;
 1822e54:	e0fffbc3 	ldbu	r3,-17(fp)
 1822e58:	00806134 	movhi	r2,388
 1822e5c:	109d5c04 	addi	r2,r2,30064
 1822e60:	18c00524 	muli	r3,r3,20
 1822e64:	10c5883a 	add	r2,r2,r3
 1822e68:	108004c4 	addi	r2,r2,19
 1822e6c:	10000005 	stb	zero,0(r2)
  return (err_t)i;
 1822e70:	e0bffbc3 	ldbu	r2,-17(fp)
}
 1822e74:	e037883a 	mov	sp,fp
 1822e78:	dfc00117 	ldw	ra,4(sp)
 1822e7c:	df000017 	ldw	fp,0(sp)
 1822e80:	dec00204 	addi	sp,sp,8
 1822e84:	f800283a 	ret

01822e88 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
 1822e88:	defff904 	addi	sp,sp,-28
 1822e8c:	dfc00615 	stw	ra,24(sp)
 1822e90:	df000515 	stw	fp,20(sp)
 1822e94:	df000504 	addi	fp,sp,20
 1822e98:	e13ffc15 	stw	r4,-16(fp)
 1822e9c:	e17ffd15 	stw	r5,-12(fp)
 1822ea0:	e1bffe15 	stw	r6,-8(fp)
 1822ea4:	e1ffff15 	stw	r7,-4(fp)
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 1822ea8:	e0bffd17 	ldw	r2,-12(fp)
 1822eac:	10800117 	ldw	r2,4(r2)
 1822eb0:	e0bffb15 	stw	r2,-20(fp)

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
 1822eb4:	e0bffb17 	ldw	r2,-20(fp)
 1822eb8:	10800084 	addi	r2,r2,2
 1822ebc:	01800184 	movi	r6,6
 1822ec0:	e17fff17 	ldw	r5,-4(fp)
 1822ec4:	1009883a 	mov	r4,r2
 1822ec8:	180604c0 	call	180604c <memcpy>
  ETHADDR16_COPY(&ethhdr->src, src);
 1822ecc:	e0bffb17 	ldw	r2,-20(fp)
 1822ed0:	10800204 	addi	r2,r2,8
 1822ed4:	01800184 	movi	r6,6
 1822ed8:	e17ffe17 	ldw	r5,-8(fp)
 1822edc:	1009883a 	mov	r4,r2
 1822ee0:	180604c0 	call	180604c <memcpy>
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
 1822ee4:	e0bffb17 	ldw	r2,-20(fp)
 1822ee8:	10c00383 	ldbu	r3,14(r2)
 1822eec:	1806703a 	and	r3,r3,zero
 1822ef0:	18c00214 	ori	r3,r3,8
 1822ef4:	10c00385 	stb	r3,14(r2)
 1822ef8:	10c003c3 	ldbu	r3,15(r2)
 1822efc:	1806703a 	and	r3,r3,zero
 1822f00:	10c003c5 	stb	r3,15(r2)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 1822f04:	e0bffc17 	ldw	r2,-16(fp)
 1822f08:	10800617 	ldw	r2,24(r2)
 1822f0c:	e17ffd17 	ldw	r5,-12(fp)
 1822f10:	e13ffc17 	ldw	r4,-16(fp)
 1822f14:	103ee83a 	callr	r2
}
 1822f18:	e037883a 	mov	sp,fp
 1822f1c:	dfc00117 	ldw	ra,4(sp)
 1822f20:	df000017 	ldw	fp,0(sp)
 1822f24:	dec00204 	addi	sp,sp,8
 1822f28:	f800283a 	ret

01822f2c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 1822f2c:	defff704 	addi	sp,sp,-36
 1822f30:	dfc00815 	stw	ra,32(sp)
 1822f34:	df000715 	stw	fp,28(sp)
 1822f38:	df000704 	addi	fp,sp,28
 1822f3c:	e13ffc15 	stw	r4,-16(fp)
 1822f40:	e17ffd15 	stw	r5,-12(fp)
 1822f44:	e1bffe15 	stw	r6,-8(fp)
 1822f48:	3805883a 	mov	r2,r7
 1822f4c:	e0bfff05 	stb	r2,-4(fp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 1822f50:	e0bffd17 	ldw	r2,-12(fp)
 1822f54:	10000f26 	beq	r2,zero,1822f94 <etharp_update_arp_entry+0x68>
 1822f58:	e0bffd17 	ldw	r2,-12(fp)
 1822f5c:	10800017 	ldw	r2,0(r2)
 1822f60:	10000c26 	beq	r2,zero,1822f94 <etharp_update_arp_entry+0x68>
      ip_addr_isbroadcast(ipaddr, netif) ||
 1822f64:	e0bffd17 	ldw	r2,-12(fp)
 1822f68:	10800017 	ldw	r2,0(r2)
 1822f6c:	e17ffc17 	ldw	r5,-16(fp)
 1822f70:	1009883a 	mov	r4,r2
 1822f74:	18187180 	call	1818718 <ip4_addr_isbroadcast>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 1822f78:	10803fcc 	andi	r2,r2,255
 1822f7c:	1000051e 	bne	r2,zero,1822f94 <etharp_update_arp_entry+0x68>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
 1822f80:	e0bffd17 	ldw	r2,-12(fp)
 1822f84:	10800017 	ldw	r2,0(r2)
 1822f88:	10803c0c 	andi	r2,r2,240
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
 1822f8c:	10803818 	cmpnei	r2,r2,224
 1822f90:	1000021e 	bne	r2,zero,1822f9c <etharp_update_arp_entry+0x70>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 1822f94:	00bffc84 	movi	r2,-14
 1822f98:	00005106 	br	18230e0 <etharp_update_arp_entry+0x1b4>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
 1822f9c:	e0bfff03 	ldbu	r2,-4(fp)
 1822fa0:	100b883a 	mov	r5,r2
 1822fa4:	e13ffd17 	ldw	r4,-12(fp)
 1822fa8:	1822b700 	call	1822b70 <etharp_find_entry>
 1822fac:	e0bff905 	stb	r2,-28(fp)
  /* bail out if no entry could be found */
  if (i < 0) {
 1822fb0:	e0bff907 	ldb	r2,-28(fp)
 1822fb4:	1000020e 	bge	r2,zero,1822fc0 <etharp_update_arp_entry+0x94>
    return (err_t)i;
 1822fb8:	e0bff903 	ldbu	r2,-28(fp)
 1822fbc:	00004806 	br	18230e0 <etharp_update_arp_entry+0x1b4>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 1822fc0:	e0fff907 	ldb	r3,-28(fp)
 1822fc4:	00806134 	movhi	r2,388
 1822fc8:	109d5c04 	addi	r2,r2,30064
 1822fcc:	18c00524 	muli	r3,r3,20
 1822fd0:	10c5883a 	add	r2,r2,r3
 1822fd4:	10800484 	addi	r2,r2,18
 1822fd8:	00c00084 	movi	r3,2
 1822fdc:	10c00005 	stb	r3,0(r2)
  }

  /* record network interface */
  arp_table[i].netif = netif;
 1822fe0:	e0fff907 	ldb	r3,-28(fp)
 1822fe4:	00806134 	movhi	r2,388
 1822fe8:	109d5c04 	addi	r2,r2,30064
 1822fec:	18c00524 	muli	r3,r3,20
 1822ff0:	10c5883a 	add	r2,r2,r3
 1822ff4:	10800204 	addi	r2,r2,8
 1822ff8:	e0fffc17 	ldw	r3,-16(fp)
 1822ffc:	10c00015 	stw	r3,0(r2)
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 1823000:	e0bff907 	ldb	r2,-28(fp)
 1823004:	10800524 	muli	r2,r2,20
 1823008:	10c00304 	addi	r3,r2,12
 182300c:	00806134 	movhi	r2,388
 1823010:	109d5c04 	addi	r2,r2,30064
 1823014:	1885883a 	add	r2,r3,r2
 1823018:	01800184 	movi	r6,6
 182301c:	e17ffe17 	ldw	r5,-8(fp)
 1823020:	1009883a 	mov	r4,r2
 1823024:	180604c0 	call	180604c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 1823028:	e0fff907 	ldb	r3,-28(fp)
 182302c:	00806134 	movhi	r2,388
 1823030:	109d5c04 	addi	r2,r2,30064
 1823034:	18c00524 	muli	r3,r3,20
 1823038:	10c5883a 	add	r2,r2,r3
 182303c:	108004c4 	addi	r2,r2,19
 1823040:	10000005 	stb	zero,0(r2)
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 1823044:	00001e06 	br	18230c0 <etharp_update_arp_entry+0x194>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 1823048:	e0fff907 	ldb	r3,-28(fp)
 182304c:	00806134 	movhi	r2,388
 1823050:	109d5c04 	addi	r2,r2,30064
 1823054:	18c00524 	muli	r3,r3,20
 1823058:	10c5883a 	add	r2,r2,r3
 182305c:	10800017 	ldw	r2,0(r2)
 1823060:	e0bffa15 	stw	r2,-24(fp)
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 1823064:	e13ff907 	ldb	r4,-28(fp)
 1823068:	e0bffa17 	ldw	r2,-24(fp)
 182306c:	10c00017 	ldw	r3,0(r2)
 1823070:	00806134 	movhi	r2,388
 1823074:	109d5c04 	addi	r2,r2,30064
 1823078:	21000524 	muli	r4,r4,20
 182307c:	1105883a 	add	r2,r2,r4
 1823080:	10c00015 	stw	r3,0(r2)
    /* get the packet pointer */
    p = q->p;
 1823084:	e0bffa17 	ldw	r2,-24(fp)
 1823088:	10800117 	ldw	r2,4(r2)
 182308c:	e0bffb15 	stw	r2,-20(fp)
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 1823090:	e17ffa17 	ldw	r5,-24(fp)
 1823094:	010002c4 	movi	r4,11
 1823098:	18341e40 	call	18341e4 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 182309c:	e0bffc17 	ldw	r2,-16(fp)
 18230a0:	10800cc4 	addi	r2,r2,51
 18230a4:	e1fffe17 	ldw	r7,-8(fp)
 18230a8:	100d883a 	mov	r6,r2
 18230ac:	e17ffb17 	ldw	r5,-20(fp)
 18230b0:	e13ffc17 	ldw	r4,-16(fp)
 18230b4:	1822e880 	call	1822e88 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 18230b8:	e13ffb17 	ldw	r4,-20(fp)
 18230bc:	181a9040 	call	181a904 <pbuf_free>
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  /* reset time stamp */
  arp_table[i].ctime = 0;
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 18230c0:	e0fff907 	ldb	r3,-28(fp)
 18230c4:	00806134 	movhi	r2,388
 18230c8:	109d5c04 	addi	r2,r2,30064
 18230cc:	18c00524 	muli	r3,r3,20
 18230d0:	10c5883a 	add	r2,r2,r3
 18230d4:	10800017 	ldw	r2,0(r2)
 18230d8:	103fdb1e 	bne	r2,zero,1823048 <__alt_mem_mem_0+0xff803048>
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
    /* free the queued IP packet */
    pbuf_free(p);
  }
  return ERR_OK;
 18230dc:	0005883a 	mov	r2,zero
}
 18230e0:	e037883a 	mov	sp,fp
 18230e4:	dfc00117 	ldw	ra,4(sp)
 18230e8:	df000017 	ldw	fp,0(sp)
 18230ec:	dec00204 	addi	sp,sp,8
 18230f0:	f800283a 	ret

018230f4 <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
 18230f4:	defffc04 	addi	sp,sp,-16
 18230f8:	dfc00315 	stw	ra,12(sp)
 18230fc:	df000215 	stw	fp,8(sp)
 1823100:	df000204 	addi	fp,sp,8
 1823104:	e13fff15 	stw	r4,-4(fp)
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 1823108:	e03ffe05 	stb	zero,-8(fp)
 182310c:	00001906 	br	1823174 <etharp_cleanup_netif+0x80>
    u8_t state = arp_table[i].state;
 1823110:	e0fffe03 	ldbu	r3,-8(fp)
 1823114:	00806134 	movhi	r2,388
 1823118:	109d5c04 	addi	r2,r2,30064
 182311c:	18c00524 	muli	r3,r3,20
 1823120:	10c5883a 	add	r2,r2,r3
 1823124:	10800484 	addi	r2,r2,18
 1823128:	10800003 	ldbu	r2,0(r2)
 182312c:	e0bffe45 	stb	r2,-7(fp)
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 1823130:	e0bffe43 	ldbu	r2,-7(fp)
 1823134:	10000c26 	beq	r2,zero,1823168 <etharp_cleanup_netif+0x74>
 1823138:	e0fffe03 	ldbu	r3,-8(fp)
 182313c:	00806134 	movhi	r2,388
 1823140:	109d5c04 	addi	r2,r2,30064
 1823144:	18c00524 	muli	r3,r3,20
 1823148:	10c5883a 	add	r2,r2,r3
 182314c:	10800204 	addi	r2,r2,8
 1823150:	10c00017 	ldw	r3,0(r2)
 1823154:	e0bfff17 	ldw	r2,-4(fp)
 1823158:	1880031e 	bne	r3,r2,1823168 <etharp_cleanup_netif+0x74>
      etharp_free_entry(i);
 182315c:	e0bffe03 	ldbu	r2,-8(fp)
 1823160:	1009883a 	mov	r4,r2
 1823164:	18229580 	call	1822958 <etharp_free_entry>
 */
void etharp_cleanup_netif(struct netif *netif)
{
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 1823168:	e0bffe03 	ldbu	r2,-8(fp)
 182316c:	10800044 	addi	r2,r2,1
 1823170:	e0bffe05 	stb	r2,-8(fp)
 1823174:	e0bffe03 	ldbu	r2,-8(fp)
 1823178:	10800670 	cmpltui	r2,r2,25
 182317c:	103fe41e 	bne	r2,zero,1823110 <__alt_mem_mem_0+0xff803110>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
 1823180:	0001883a 	nop
 1823184:	e037883a 	mov	sp,fp
 1823188:	dfc00117 	ldw	ra,4(sp)
 182318c:	df000017 	ldw	fp,0(sp)
 1823190:	dec00204 	addi	sp,sp,8
 1823194:	f800283a 	ret

01823198 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, ip_addr_t *ipaddr,
         struct eth_addr **eth_ret, ip_addr_t **ip_ret)
{
 1823198:	defff904 	addi	sp,sp,-28
 182319c:	dfc00615 	stw	ra,24(sp)
 18231a0:	df000515 	stw	fp,20(sp)
 18231a4:	df000504 	addi	fp,sp,20
 18231a8:	e13ffc15 	stw	r4,-16(fp)
 18231ac:	e17ffd15 	stw	r5,-12(fp)
 18231b0:	e1bffe15 	stw	r6,-8(fp)
 18231b4:	e1ffff15 	stw	r7,-4(fp)
  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY);
 18231b8:	01400084 	movi	r5,2
 18231bc:	e13ffd17 	ldw	r4,-12(fp)
 18231c0:	1822b700 	call	1822b70 <etharp_find_entry>
 18231c4:	e0bffb05 	stb	r2,-20(fp)
  if((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
 18231c8:	e0bffb07 	ldb	r2,-20(fp)
 18231cc:	10001c16 	blt	r2,zero,1823240 <etharp_find_addr+0xa8>
 18231d0:	e0fffb07 	ldb	r3,-20(fp)
 18231d4:	00806134 	movhi	r2,388
 18231d8:	109d5c04 	addi	r2,r2,30064
 18231dc:	18c00524 	muli	r3,r3,20
 18231e0:	10c5883a 	add	r2,r2,r3
 18231e4:	10800484 	addi	r2,r2,18
 18231e8:	10800003 	ldbu	r2,0(r2)
 18231ec:	10803fcc 	andi	r2,r2,255
 18231f0:	108000b0 	cmpltui	r2,r2,2
 18231f4:	1000121e 	bne	r2,zero,1823240 <etharp_find_addr+0xa8>
      *eth_ret = &arp_table[i].ethaddr;
 18231f8:	e0bffb07 	ldb	r2,-20(fp)
 18231fc:	10800524 	muli	r2,r2,20
 1823200:	10c00304 	addi	r3,r2,12
 1823204:	00806134 	movhi	r2,388
 1823208:	109d5c04 	addi	r2,r2,30064
 182320c:	1887883a 	add	r3,r3,r2
 1823210:	e0bffe17 	ldw	r2,-8(fp)
 1823214:	10c00015 	stw	r3,0(r2)
      *ip_ret = &arp_table[i].ipaddr;
 1823218:	e0bffb07 	ldb	r2,-20(fp)
 182321c:	10800524 	muli	r2,r2,20
 1823220:	10c00104 	addi	r3,r2,4
 1823224:	00806134 	movhi	r2,388
 1823228:	109d5c04 	addi	r2,r2,30064
 182322c:	1887883a 	add	r3,r3,r2
 1823230:	e0bfff17 	ldw	r2,-4(fp)
 1823234:	10c00015 	stw	r3,0(r2)
      return i;
 1823238:	e0bffb03 	ldbu	r2,-20(fp)
 182323c:	00000106 	br	1823244 <etharp_find_addr+0xac>
  }
  return -1;
 1823240:	00bfffc4 	movi	r2,-1
}
 1823244:	e037883a 	mov	sp,fp
 1823248:	dfc00117 	ldw	ra,4(sp)
 182324c:	df000017 	ldw	fp,0(sp)
 1823250:	dec00204 	addi	sp,sp,8
 1823254:	f800283a 	ret

01823258 <etharp_ip_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_ip_input(struct netif *netif, struct pbuf *p)
{
 1823258:	defff904 	addi	sp,sp,-28
 182325c:	dfc00615 	stw	ra,24(sp)
 1823260:	df000515 	stw	fp,20(sp)
 1823264:	df000504 	addi	fp,sp,20
 1823268:	e13ffe15 	stw	r4,-8(fp)
 182326c:	e17fff15 	stw	r5,-4(fp)
  struct eth_hdr *ethhdr;
  struct ip_hdr *iphdr;
  ip_addr_t iphdr_src;
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 1823270:	e0bffe17 	ldw	r2,-8(fp)
 1823274:	1000091e 	bne	r2,zero,182329c <etharp_ip_input+0x44>
 1823278:	01c06134 	movhi	r7,388
 182327c:	39c4ce04 	addi	r7,r7,4920
 1823280:	0180a104 	movi	r6,644
 1823284:	01406134 	movhi	r5,388
 1823288:	2944d404 	addi	r5,r5,4944
 182328c:	01006134 	movhi	r4,388
 1823290:	2104d804 	addi	r4,r4,4960
 1823294:	1800bd80 	call	1800bd8 <printf>
 1823298:	003fff06 	br	1823298 <__alt_mem_mem_0+0xff803298>

  /* Only insert an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  ethhdr = (struct eth_hdr *)p->payload;
 182329c:	e0bfff17 	ldw	r2,-4(fp)
 18232a0:	10800117 	ldw	r2,4(r2)
 18232a4:	e0bffb15 	stw	r2,-20(fp)
  iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 18232a8:	e0bffb17 	ldw	r2,-20(fp)
 18232ac:	10800404 	addi	r2,r2,16
 18232b0:	e0bffc15 	stw	r2,-16(fp)
  if (ethhdr->type == PP_HTONS(ETHTYPE_VLAN)) {
    iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  ip_addr_copy(iphdr_src, iphdr->src);
 18232b4:	e0bffc17 	ldw	r2,-16(fp)
 18232b8:	10c00303 	ldbu	r3,12(r2)
 18232bc:	11000343 	ldbu	r4,13(r2)
 18232c0:	2008923a 	slli	r4,r4,8
 18232c4:	20c6b03a 	or	r3,r4,r3
 18232c8:	11000383 	ldbu	r4,14(r2)
 18232cc:	2008943a 	slli	r4,r4,16
 18232d0:	20c6b03a 	or	r3,r4,r3
 18232d4:	108003c3 	ldbu	r2,15(r2)
 18232d8:	1004963a 	slli	r2,r2,24
 18232dc:	10c4b03a 	or	r2,r2,r3
 18232e0:	e0bffd15 	stw	r2,-12(fp)

  /* source is not on the local network? */
  if (!ip_addr_netcmp(&iphdr_src, &(netif->ip_addr), &(netif->netmask))) {
 18232e4:	e0fffd17 	ldw	r3,-12(fp)
 18232e8:	e0bffe17 	ldw	r2,-8(fp)
 18232ec:	10800117 	ldw	r2,4(r2)
 18232f0:	1886f03a 	xor	r3,r3,r2
 18232f4:	e0bffe17 	ldw	r2,-8(fp)
 18232f8:	10800217 	ldw	r2,8(r2)
 18232fc:	1884703a 	and	r2,r3,r2
 1823300:	1000091e 	bne	r2,zero,1823328 <etharp_ip_input+0xd0>

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
  /* update the source IP address in the cache, if present */
  /* @todo We could use ETHARP_FLAG_TRY_HARD if we think we are going to talk
   * back soon (for example, if the destination IP address is ours. */
  etharp_update_arp_entry(netif, &iphdr_src, &(ethhdr->src), ETHARP_FLAG_FIND_ONLY);
 1823304:	e0bffb17 	ldw	r2,-20(fp)
 1823308:	10c00204 	addi	r3,r2,8
 182330c:	e0bffd04 	addi	r2,fp,-12
 1823310:	01c00084 	movi	r7,2
 1823314:	180d883a 	mov	r6,r3
 1823318:	100b883a 	mov	r5,r2
 182331c:	e13ffe17 	ldw	r4,-8(fp)
 1823320:	1822f2c0 	call	1822f2c <etharp_update_arp_entry>
 1823324:	00000106 	br	182332c <etharp_ip_input+0xd4>
  ip_addr_copy(iphdr_src, iphdr->src);

  /* source is not on the local network? */
  if (!ip_addr_netcmp(&iphdr_src, &(netif->ip_addr), &(netif->netmask))) {
    /* do nothing */
    return;
 1823328:	0001883a 	nop
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
  /* update the source IP address in the cache, if present */
  /* @todo We could use ETHARP_FLAG_TRY_HARD if we think we are going to talk
   * back soon (for example, if the destination IP address is ours. */
  etharp_update_arp_entry(netif, &iphdr_src, &(ethhdr->src), ETHARP_FLAG_FIND_ONLY);
}
 182332c:	e037883a 	mov	sp,fp
 1823330:	dfc00117 	ldw	ra,4(sp)
 1823334:	df000017 	ldw	fp,0(sp)
 1823338:	dec00204 	addi	sp,sp,8
 182333c:	f800283a 	ret

01823340 <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
 1823340:	defff404 	addi	sp,sp,-48
 1823344:	dfc00b15 	stw	ra,44(sp)
 1823348:	df000a15 	stw	fp,40(sp)
 182334c:	df000a04 	addi	fp,sp,40
 1823350:	e13ffb15 	stw	r4,-20(fp)
 1823354:	e17ffc15 	stw	r5,-16(fp)
 1823358:	e1bffd15 	stw	r6,-12(fp)
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 182335c:	e0bffb17 	ldw	r2,-20(fp)
 1823360:	1000091e 	bne	r2,zero,1823388 <etharp_arp_input+0x48>
 1823364:	01c06134 	movhi	r7,388
 1823368:	39c4ce04 	addi	r7,r7,4920
 182336c:	0180aec4 	movi	r6,699
 1823370:	01406134 	movhi	r5,388
 1823374:	2944d404 	addi	r5,r5,4944
 1823378:	01006134 	movhi	r4,388
 182337c:	2104d804 	addi	r4,r4,4960
 1823380:	1800bd80 	call	1800bd8 <printf>
 1823384:	003fff06 	br	1823384 <__alt_mem_mem_0+0xff803384>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
 1823388:	e0bffd17 	ldw	r2,-12(fp)
 182338c:	1080028b 	ldhu	r2,10(r2)
 1823390:	10bfffcc 	andi	r2,r2,65535
 1823394:	10800b28 	cmpgeui	r2,r2,44
 1823398:	1000111e 	bne	r2,zero,18233e0 <etharp_arp_input+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
 182339c:	008061f4 	movhi	r2,391
 18233a0:	10a77104 	addi	r2,r2,-25148
 18233a4:	10801117 	ldw	r2,68(r2)
 18233a8:	10c00044 	addi	r3,r2,1
 18233ac:	008061f4 	movhi	r2,391
 18233b0:	10a77104 	addi	r2,r2,-25148
 18233b4:	10c01115 	stw	r3,68(r2)
    ETHARP_STATS_INC(etharp.drop);
 18233b8:	008061f4 	movhi	r2,391
 18233bc:	10a77104 	addi	r2,r2,-25148
 18233c0:	10800f17 	ldw	r2,60(r2)
 18233c4:	10c00044 	addi	r3,r2,1
 18233c8:	008061f4 	movhi	r2,391
 18233cc:	10a77104 	addi	r2,r2,-25148
 18233d0:	10c00f15 	stw	r3,60(r2)
    pbuf_free(p);
 18233d4:	e13ffd17 	ldw	r4,-12(fp)
 18233d8:	181a9040 	call	181a904 <pbuf_free>
    return;
 18233dc:	0000b606 	br	18236b8 <etharp_arp_input+0x378>
  }

  ethhdr = (struct eth_hdr *)p->payload;
 18233e0:	e0bffd17 	ldw	r2,-12(fp)
 18233e4:	10800117 	ldw	r2,4(r2)
 18233e8:	e0bff715 	stw	r2,-36(fp)
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 18233ec:	e0bff717 	ldw	r2,-36(fp)
 18233f0:	10800404 	addi	r2,r2,16
 18233f4:	e0bff815 	stw	r2,-32(fp)
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 18233f8:	e0bff817 	ldw	r2,-32(fp)
 18233fc:	10c00003 	ldbu	r3,0(r2)
 1823400:	10800043 	ldbu	r2,1(r2)
 1823404:	1004923a 	slli	r2,r2,8
 1823408:	10c4b03a 	or	r2,r2,r3
 182340c:	10bfffcc 	andi	r2,r2,65535
 1823410:	10804018 	cmpnei	r2,r2,256
 1823414:	1000121e 	bne	r2,zero,1823460 <etharp_arp_input+0x120>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 1823418:	e0bff817 	ldw	r2,-32(fp)
 182341c:	10800103 	ldbu	r2,4(r2)
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 1823420:	10803fcc 	andi	r2,r2,255
 1823424:	10800198 	cmpnei	r2,r2,6
 1823428:	10000d1e 	bne	r2,zero,1823460 <etharp_arp_input+0x120>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 182342c:	e0bff817 	ldw	r2,-32(fp)
 1823430:	10800143 	ldbu	r2,5(r2)
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 1823434:	10803fcc 	andi	r2,r2,255
 1823438:	10800118 	cmpnei	r2,r2,4
 182343c:	1000081e 	bne	r2,zero,1823460 <etharp_arp_input+0x120>
      (hdr->protolen != sizeof(ip_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 1823440:	e0bff817 	ldw	r2,-32(fp)
 1823444:	10c00083 	ldbu	r3,2(r2)
 1823448:	108000c3 	ldbu	r2,3(r2)
 182344c:	1004923a 	slli	r2,r2,8
 1823450:	10c4b03a 	or	r2,r2,r3
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 1823454:	10bfffcc 	andi	r2,r2,65535
 1823458:	10800220 	cmpeqi	r2,r2,8
 182345c:	1000111e 	bne	r2,zero,18234a4 <etharp_arp_input+0x164>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 1823460:	008061f4 	movhi	r2,391
 1823464:	10a77104 	addi	r2,r2,-25148
 1823468:	10801417 	ldw	r2,80(r2)
 182346c:	10c00044 	addi	r3,r2,1
 1823470:	008061f4 	movhi	r2,391
 1823474:	10a77104 	addi	r2,r2,-25148
 1823478:	10c01415 	stw	r3,80(r2)
    ETHARP_STATS_INC(etharp.drop);
 182347c:	008061f4 	movhi	r2,391
 1823480:	10a77104 	addi	r2,r2,-25148
 1823484:	10800f17 	ldw	r2,60(r2)
 1823488:	10c00044 	addi	r3,r2,1
 182348c:	008061f4 	movhi	r2,391
 1823490:	10a77104 	addi	r2,r2,-25148
 1823494:	10c00f15 	stw	r3,60(r2)
    pbuf_free(p);
 1823498:	e13ffd17 	ldw	r4,-12(fp)
 182349c:	181a9040 	call	181a904 <pbuf_free>
    return;
 18234a0:	00008506 	br	18236b8 <etharp_arp_input+0x378>
  }
  ETHARP_STATS_INC(etharp.recv);
 18234a4:	008061f4 	movhi	r2,391
 18234a8:	10a77104 	addi	r2,r2,-25148
 18234ac:	10800d17 	ldw	r2,52(r2)
 18234b0:	10c00044 	addi	r3,r2,1
 18234b4:	008061f4 	movhi	r2,391
 18234b8:	10a77104 	addi	r2,r2,-25148
 18234bc:	10c00d15 	stw	r3,52(r2)
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 18234c0:	e0bff817 	ldw	r2,-32(fp)
 18234c4:	10c00384 	addi	r3,r2,14
 18234c8:	e0bff904 	addi	r2,fp,-28
 18234cc:	01800104 	movi	r6,4
 18234d0:	180b883a 	mov	r5,r3
 18234d4:	1009883a 	mov	r4,r2
 18234d8:	180604c0 	call	180604c <memcpy>
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 18234dc:	e0bff817 	ldw	r2,-32(fp)
 18234e0:	10c00604 	addi	r3,r2,24
 18234e4:	e0bffa04 	addi	r2,fp,-24
 18234e8:	01800104 	movi	r6,4
 18234ec:	180b883a 	mov	r5,r3
 18234f0:	1009883a 	mov	r4,r2
 18234f4:	180604c0 	call	180604c <memcpy>

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
 18234f8:	e0bffb17 	ldw	r2,-20(fp)
 18234fc:	10800104 	addi	r2,r2,4
 1823500:	10000326 	beq	r2,zero,1823510 <etharp_arp_input+0x1d0>
 1823504:	e0bffb17 	ldw	r2,-20(fp)
 1823508:	10800117 	ldw	r2,4(r2)
 182350c:	1000021e 	bne	r2,zero,1823518 <etharp_arp_input+0x1d8>
    for_us = 0;
 1823510:	e03ff605 	stb	zero,-40(fp)
 1823514:	00000506 	br	182352c <etharp_arp_input+0x1ec>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 1823518:	e0fffa17 	ldw	r3,-24(fp)
 182351c:	e0bffb17 	ldw	r2,-20(fp)
 1823520:	10800117 	ldw	r2,4(r2)
 1823524:	1885003a 	cmpeq	r2,r3,r2
 1823528:	e0bff605 	stb	r2,-40(fp)
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 182352c:	e0bff817 	ldw	r2,-32(fp)
 1823530:	11000204 	addi	r4,r2,8
 1823534:	e0bff603 	ldbu	r2,-40(fp)
 1823538:	10000226 	beq	r2,zero,1823544 <etharp_arp_input+0x204>
 182353c:	00800044 	movi	r2,1
 1823540:	00000106 	br	1823548 <etharp_arp_input+0x208>
 1823544:	00800084 	movi	r2,2
 1823548:	e0fff904 	addi	r3,fp,-28
 182354c:	100f883a 	mov	r7,r2
 1823550:	200d883a 	mov	r6,r4
 1823554:	180b883a 	mov	r5,r3
 1823558:	e13ffb17 	ldw	r4,-20(fp)
 182355c:	1822f2c0 	call	1822f2c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 1823560:	e0bff817 	ldw	r2,-32(fp)
 1823564:	10c00183 	ldbu	r3,6(r2)
 1823568:	108001c3 	ldbu	r2,7(r2)
 182356c:	1004923a 	slli	r2,r2,8
 1823570:	10c4b03a 	or	r2,r2,r3
 1823574:	10bfffcc 	andi	r2,r2,65535
 1823578:	10c04020 	cmpeqi	r3,r2,256
 182357c:	1800031e 	bne	r3,zero,182358c <etharp_arp_input+0x24c>
 1823580:	10808020 	cmpeqi	r2,r2,512
 1823584:	10003d1e 	bne	r2,zero,182367c <etharp_arp_input+0x33c>
 1823588:	00004106 	br	1823690 <etharp_arp_input+0x350>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 182358c:	e0bff603 	ldbu	r2,-40(fp)
 1823590:	10004726 	beq	r2,zero,18236b0 <etharp_arp_input+0x370>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 1823594:	e0bff817 	ldw	r2,-32(fp)
 1823598:	10c00183 	ldbu	r3,6(r2)
 182359c:	1806703a 	and	r3,r3,zero
 18235a0:	10c00185 	stb	r3,6(r2)
 18235a4:	10c001c3 	ldbu	r3,7(r2)
 18235a8:	1806703a 	and	r3,r3,zero
 18235ac:	18c00094 	ori	r3,r3,2
 18235b0:	10c001c5 	stb	r3,7(r2)

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 18235b4:	e0bff817 	ldw	r2,-32(fp)
 18235b8:	10c00604 	addi	r3,r2,24
 18235bc:	e0bff817 	ldw	r2,-32(fp)
 18235c0:	10800384 	addi	r2,r2,14
 18235c4:	01800104 	movi	r6,4
 18235c8:	100b883a 	mov	r5,r2
 18235cc:	1809883a 	mov	r4,r3
 18235d0:	180604c0 	call	180604c <memcpy>
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
 18235d4:	e0bff817 	ldw	r2,-32(fp)
 18235d8:	10c00384 	addi	r3,r2,14
 18235dc:	e0bffb17 	ldw	r2,-20(fp)
 18235e0:	10800104 	addi	r2,r2,4
 18235e4:	01800104 	movi	r6,4
 18235e8:	100b883a 	mov	r5,r2
 18235ec:	1809883a 	mov	r4,r3
 18235f0:	180604c0 	call	180604c <memcpy>
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 18235f4:	e0bff817 	ldw	r2,-32(fp)
 18235f8:	10c00484 	addi	r3,r2,18
 18235fc:	e0bff817 	ldw	r2,-32(fp)
 1823600:	10800204 	addi	r2,r2,8
 1823604:	01800184 	movi	r6,6
 1823608:	100b883a 	mov	r5,r2
 182360c:	1809883a 	mov	r4,r3
 1823610:	180604c0 	call	180604c <memcpy>
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 1823614:	e0bff717 	ldw	r2,-36(fp)
 1823618:	10c00084 	addi	r3,r2,2
 182361c:	e0bff817 	ldw	r2,-32(fp)
 1823620:	10800204 	addi	r2,r2,8
 1823624:	01800184 	movi	r6,6
 1823628:	100b883a 	mov	r5,r2
 182362c:	1809883a 	mov	r4,r3
 1823630:	180604c0 	call	180604c <memcpy>
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 1823634:	e0bff817 	ldw	r2,-32(fp)
 1823638:	10800204 	addi	r2,r2,8
 182363c:	01800184 	movi	r6,6
 1823640:	e17ffc17 	ldw	r5,-16(fp)
 1823644:	1009883a 	mov	r4,r2
 1823648:	180604c0 	call	180604c <memcpy>
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 182364c:	e0bff717 	ldw	r2,-36(fp)
 1823650:	10800204 	addi	r2,r2,8
 1823654:	01800184 	movi	r6,6
 1823658:	e17ffc17 	ldw	r5,-16(fp)
 182365c:	1009883a 	mov	r4,r2
 1823660:	180604c0 	call	180604c <memcpy>

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 1823664:	e0bffb17 	ldw	r2,-20(fp)
 1823668:	10800617 	ldw	r2,24(r2)
 182366c:	e17ffd17 	ldw	r5,-12(fp)
 1823670:	e13ffb17 	ldw	r4,-20(fp)
 1823674:	103ee83a 	callr	r2
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
 1823678:	00000d06 	br	18236b0 <etharp_arp_input+0x370>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
 182367c:	e0bff904 	addi	r2,fp,-28
 1823680:	100b883a 	mov	r5,r2
 1823684:	e13ffb17 	ldw	r4,-20(fp)
 1823688:	181634c0 	call	181634c <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
 182368c:	00000806 	br	18236b0 <etharp_arp_input+0x370>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 1823690:	008061f4 	movhi	r2,391
 1823694:	10a77104 	addi	r2,r2,-25148
 1823698:	10801617 	ldw	r2,88(r2)
 182369c:	10c00044 	addi	r3,r2,1
 18236a0:	008061f4 	movhi	r2,391
 18236a4:	10a77104 	addi	r2,r2,-25148
 18236a8:	10c01615 	stw	r3,88(r2)
    break;
 18236ac:	0001883a 	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 18236b0:	e13ffd17 	ldw	r4,-12(fp)
 18236b4:	181a9040 	call	181a904 <pbuf_free>
}
 18236b8:	e037883a 	mov	sp,fp
 18236bc:	dfc00117 	ldw	ra,4(sp)
 18236c0:	df000017 	ldw	fp,0(sp)
 18236c4:	dec00204 	addi	sp,sp,8
 18236c8:	f800283a 	ret

018236cc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 18236cc:	defffb04 	addi	sp,sp,-20
 18236d0:	dfc00415 	stw	ra,16(sp)
 18236d4:	df000315 	stw	fp,12(sp)
 18236d8:	df000304 	addi	fp,sp,12
 18236dc:	e13ffd15 	stw	r4,-12(fp)
 18236e0:	e17ffe15 	stw	r5,-8(fp)
 18236e4:	3005883a 	mov	r2,r6
 18236e8:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 18236ec:	e0ffff03 	ldbu	r3,-4(fp)
 18236f0:	00806134 	movhi	r2,388
 18236f4:	109d5c04 	addi	r2,r2,30064
 18236f8:	18c00524 	muli	r3,r3,20
 18236fc:	10c5883a 	add	r2,r2,r3
 1823700:	10800484 	addi	r2,r2,18
 1823704:	10800003 	ldbu	r2,0(r2)
 1823708:	10803fcc 	andi	r2,r2,255
 182370c:	10800098 	cmpnei	r2,r2,2
 1823710:	10001f1e 	bne	r2,zero,1823790 <etharp_output_to_arp_index+0xc4>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
 1823714:	e0ffff03 	ldbu	r3,-4(fp)
 1823718:	00806134 	movhi	r2,388
 182371c:	109d5c04 	addi	r2,r2,30064
 1823720:	18c00524 	muli	r3,r3,20
 1823724:	10c5883a 	add	r2,r2,r3
 1823728:	108004c4 	addi	r2,r2,19
 182372c:	10800003 	ldbu	r2,0(r2)
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 1823730:	10803fcc 	andi	r2,r2,255
 1823734:	10803930 	cmpltui	r2,r2,228
 1823738:	1000151e 	bne	r2,zero,1823790 <etharp_output_to_arp_index+0xc4>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 182373c:	e0bfff03 	ldbu	r2,-4(fp)
 1823740:	10800524 	muli	r2,r2,20
 1823744:	10c00104 	addi	r3,r2,4
 1823748:	00806134 	movhi	r2,388
 182374c:	109d5c04 	addi	r2,r2,30064
 1823750:	1885883a 	add	r2,r3,r2
 1823754:	100b883a 	mov	r5,r2
 1823758:	e13ffd17 	ldw	r4,-12(fp)
 182375c:	18240c40 	call	18240c4 <etharp_request>
 1823760:	10803fcc 	andi	r2,r2,255
 1823764:	1080201c 	xori	r2,r2,128
 1823768:	10bfe004 	addi	r2,r2,-128
 182376c:	1000081e 	bne	r2,zero,1823790 <etharp_output_to_arp_index+0xc4>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
 1823770:	e0ffff03 	ldbu	r3,-4(fp)
 1823774:	00806134 	movhi	r2,388
 1823778:	109d5c04 	addi	r2,r2,30064
 182377c:	18c00524 	muli	r3,r3,20
 1823780:	10c5883a 	add	r2,r2,r3
 1823784:	10800484 	addi	r2,r2,18
 1823788:	00c000c4 	movi	r3,3
 182378c:	10c00005 	stb	r3,0(r2)
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 1823790:	e0bffd17 	ldw	r2,-12(fp)
 1823794:	11000cc4 	addi	r4,r2,51
    &arp_table[arp_idx].ethaddr);
 1823798:	e0bfff03 	ldbu	r2,-4(fp)
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 182379c:	10800524 	muli	r2,r2,20
 18237a0:	10c00304 	addi	r3,r2,12
 18237a4:	00806134 	movhi	r2,388
 18237a8:	109d5c04 	addi	r2,r2,30064
 18237ac:	1885883a 	add	r2,r3,r2
 18237b0:	100f883a 	mov	r7,r2
 18237b4:	200d883a 	mov	r6,r4
 18237b8:	e17ffe17 	ldw	r5,-8(fp)
 18237bc:	e13ffd17 	ldw	r4,-12(fp)
 18237c0:	1822e880 	call	1822e88 <etharp_send_ip>
    &arp_table[arp_idx].ethaddr);
}
 18237c4:	e037883a 	mov	sp,fp
 18237c8:	dfc00117 	ldw	ra,4(sp)
 18237cc:	df000017 	ldw	fp,0(sp)
 18237d0:	dec00204 	addi	sp,sp,8
 18237d4:	f800283a 	ret

018237d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
 18237d8:	defff704 	addi	sp,sp,-36
 18237dc:	dfc00815 	stw	ra,32(sp)
 18237e0:	df000715 	stw	fp,28(sp)
 18237e4:	df000704 	addi	fp,sp,28
 18237e8:	e13ffd15 	stw	r4,-12(fp)
 18237ec:	e17ffe15 	stw	r5,-8(fp)
 18237f0:	e1bfff15 	stw	r6,-4(fp)
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
 18237f4:	e0bfff17 	ldw	r2,-4(fp)
 18237f8:	e0bffa15 	stw	r2,-24(fp)
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 18237fc:	01400404 	movi	r5,16
 1823800:	e13ffe17 	ldw	r4,-8(fp)
 1823804:	181a7540 	call	181a754 <pbuf_header>
 1823808:	10803fcc 	andi	r2,r2,255
 182380c:	10000926 	beq	r2,zero,1823834 <etharp_output+0x5c>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
 1823810:	008061f4 	movhi	r2,391
 1823814:	10a77104 	addi	r2,r2,-25148
 1823818:	10800517 	ldw	r2,20(r2)
 182381c:	10c00044 	addi	r3,r2,1
 1823820:	008061f4 	movhi	r2,391
 1823824:	10a77104 	addi	r2,r2,-25148
 1823828:	10c00515 	stw	r3,20(r2)
    return ERR_BUF;
 182382c:	00bfff84 	movi	r2,-2
 1823830:	00009f06 	br	1823ab0 <etharp_output+0x2d8>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
 1823834:	e0bfff17 	ldw	r2,-4(fp)
 1823838:	10800017 	ldw	r2,0(r2)
 182383c:	e17ffd17 	ldw	r5,-12(fp)
 1823840:	1009883a 	mov	r4,r2
 1823844:	18187180 	call	1818718 <ip4_addr_isbroadcast>
 1823848:	10803fcc 	andi	r2,r2,255
 182384c:	10000326 	beq	r2,zero,182385c <etharp_output+0x84>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
 1823850:	d0a01384 	addi	r2,gp,-32690
 1823854:	e0bff915 	stw	r2,-28(fp)
 1823858:	00008e06 	br	1823a94 <etharp_output+0x2bc>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
 182385c:	e0bfff17 	ldw	r2,-4(fp)
 1823860:	10800017 	ldw	r2,0(r2)
 1823864:	10803c0c 	andi	r2,r2,240
 1823868:	10803818 	cmpnei	r2,r2,224
 182386c:	1000131e 	bne	r2,zero,18238bc <etharp_output+0xe4>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 1823870:	00800044 	movi	r2,1
 1823874:	e0bffb85 	stb	r2,-18(fp)
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 1823878:	e03ffbc5 	stb	zero,-17(fp)
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 182387c:	00801784 	movi	r2,94
 1823880:	e0bffc05 	stb	r2,-16(fp)
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 1823884:	e0bfff17 	ldw	r2,-4(fp)
 1823888:	10800044 	addi	r2,r2,1
 182388c:	10800003 	ldbu	r2,0(r2)
 1823890:	10801fcc 	andi	r2,r2,127
 1823894:	e0bffc45 	stb	r2,-15(fp)
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 1823898:	e0bfff17 	ldw	r2,-4(fp)
 182389c:	10800083 	ldbu	r2,2(r2)
 18238a0:	e0bffc85 	stb	r2,-14(fp)
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 18238a4:	e0bfff17 	ldw	r2,-4(fp)
 18238a8:	108000c3 	ldbu	r2,3(r2)
 18238ac:	e0bffcc5 	stb	r2,-13(fp)
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 18238b0:	e0bffb84 	addi	r2,fp,-18
 18238b4:	e0bff915 	stw	r2,-28(fp)
 18238b8:	00007606 	br	1823a94 <etharp_output+0x2bc>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 18238bc:	e0bfff17 	ldw	r2,-4(fp)
 18238c0:	10c00017 	ldw	r3,0(r2)
 18238c4:	e0bffd17 	ldw	r2,-12(fp)
 18238c8:	10800117 	ldw	r2,4(r2)
 18238cc:	1886f03a 	xor	r3,r3,r2
 18238d0:	e0bffd17 	ldw	r2,-12(fp)
 18238d4:	10800217 	ldw	r2,8(r2)
 18238d8:	1884703a 	and	r2,r3,r2
 18238dc:	10001126 	beq	r2,zero,1823924 <etharp_output+0x14c>
        !ip_addr_islinklocal(ipaddr)) {
 18238e0:	e0bfff17 	ldw	r2,-4(fp)
 18238e4:	10800017 	ldw	r2,0(r2)
 18238e8:	10ffffcc 	andi	r3,r2,65535
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 18238ec:	00bfaa54 	movui	r2,65193
 18238f0:	18800c26 	beq	r3,r2,1823924 <etharp_output+0x14c>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
 18238f4:	e0bffd17 	ldw	r2,-12(fp)
 18238f8:	10800304 	addi	r2,r2,12
 18238fc:	10000726 	beq	r2,zero,182391c <etharp_output+0x144>
 1823900:	e0bffd17 	ldw	r2,-12(fp)
 1823904:	10800317 	ldw	r2,12(r2)
 1823908:	10000426 	beq	r2,zero,182391c <etharp_output+0x144>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
 182390c:	e0bffd17 	ldw	r2,-12(fp)
 1823910:	10800304 	addi	r2,r2,12
 1823914:	e0bffa15 	stw	r2,-24(fp)
 1823918:	00000206 	br	1823924 <etharp_output+0x14c>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
 182391c:	00bfff04 	movi	r2,-4
 1823920:	00006306 	br	1823ab0 <etharp_output+0x2d8>
        }
      }
    }
#if LWIP_NETIF_HWADDRHINT
    if (netif->addr_hint != NULL) {
 1823924:	e0bffd17 	ldw	r2,-12(fp)
 1823928:	10801017 	ldw	r2,64(r2)
 182392c:	10002826 	beq	r2,zero,18239d0 <etharp_output+0x1f8>
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
 1823930:	e0bffd17 	ldw	r2,-12(fp)
 1823934:	10801017 	ldw	r2,64(r2)
 1823938:	10800003 	ldbu	r2,0(r2)
 182393c:	e0bffb45 	stb	r2,-19(fp)
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
 1823940:	e0bffb43 	ldbu	r2,-19(fp)
 1823944:	10800668 	cmpgeui	r2,r2,25
 1823948:	1000211e 	bne	r2,zero,18239d0 <etharp_output+0x1f8>
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 182394c:	e0fffb43 	ldbu	r3,-19(fp)
 1823950:	00806134 	movhi	r2,388
 1823954:	109d5c04 	addi	r2,r2,30064
 1823958:	18c00524 	muli	r3,r3,20
 182395c:	10c5883a 	add	r2,r2,r3
 1823960:	10800484 	addi	r2,r2,18
 1823964:	10800003 	ldbu	r2,0(r2)
 1823968:	10803fcc 	andi	r2,r2,255
 182396c:	108000b0 	cmpltui	r2,r2,2
 1823970:	1000171e 	bne	r2,zero,18239d0 <etharp_output+0x1f8>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 1823974:	e0bffa17 	ldw	r2,-24(fp)
 1823978:	10c00017 	ldw	r3,0(r2)
 182397c:	e13ffb43 	ldbu	r4,-19(fp)
 1823980:	00806134 	movhi	r2,388
 1823984:	109d5c04 	addi	r2,r2,30064
 1823988:	21000524 	muli	r4,r4,20
 182398c:	1105883a 	add	r2,r2,r4
 1823990:	10800104 	addi	r2,r2,4
 1823994:	10800017 	ldw	r2,0(r2)
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 1823998:	18800d1e 	bne	r3,r2,18239d0 <etharp_output+0x1f8>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 182399c:	008061f4 	movhi	r2,391
 18239a0:	10a77104 	addi	r2,r2,-25148
 18239a4:	10801717 	ldw	r2,92(r2)
 18239a8:	10c00044 	addi	r3,r2,1
 18239ac:	008061f4 	movhi	r2,391
 18239b0:	10a77104 	addi	r2,r2,-25148
 18239b4:	10c01715 	stw	r3,92(r2)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 18239b8:	e0bffb43 	ldbu	r2,-19(fp)
 18239bc:	100d883a 	mov	r6,r2
 18239c0:	e17ffe17 	ldw	r5,-8(fp)
 18239c4:	e13ffd17 	ldw	r4,-12(fp)
 18239c8:	18236cc0 	call	18236cc <etharp_output_to_arp_index>
 18239cc:	00003806 	br	1823ab0 <etharp_output+0x2d8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 18239d0:	e03ffb05 	stb	zero,-20(fp)
 18239d4:	00002706 	br	1823a74 <etharp_output+0x29c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 18239d8:	e0fffb07 	ldb	r3,-20(fp)
 18239dc:	00806134 	movhi	r2,388
 18239e0:	109d5c04 	addi	r2,r2,30064
 18239e4:	18c00524 	muli	r3,r3,20
 18239e8:	10c5883a 	add	r2,r2,r3
 18239ec:	10800484 	addi	r2,r2,18
 18239f0:	10800003 	ldbu	r2,0(r2)
 18239f4:	10803fcc 	andi	r2,r2,255
 18239f8:	108000b0 	cmpltui	r2,r2,2
 18239fc:	10001a1e 	bne	r2,zero,1823a68 <etharp_output+0x290>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 1823a00:	e0bffa17 	ldw	r2,-24(fp)
 1823a04:	10c00017 	ldw	r3,0(r2)
 1823a08:	e13ffb07 	ldb	r4,-20(fp)
 1823a0c:	00806134 	movhi	r2,388
 1823a10:	109d5c04 	addi	r2,r2,30064
 1823a14:	21000524 	muli	r4,r4,20
 1823a18:	1105883a 	add	r2,r2,r4
 1823a1c:	10800104 	addi	r2,r2,4
 1823a20:	10800017 	ldw	r2,0(r2)
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 1823a24:	1880101e 	bne	r3,r2,1823a68 <etharp_output+0x290>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 1823a28:	e0bffd17 	ldw	r2,-12(fp)
 1823a2c:	10000726 	beq	r2,zero,1823a4c <etharp_output+0x274>
 1823a30:	e0bffd17 	ldw	r2,-12(fp)
 1823a34:	10801017 	ldw	r2,64(r2)
 1823a38:	10000426 	beq	r2,zero,1823a4c <etharp_output+0x274>
 1823a3c:	e0bffd17 	ldw	r2,-12(fp)
 1823a40:	10801017 	ldw	r2,64(r2)
 1823a44:	e0fffb03 	ldbu	r3,-20(fp)
 1823a48:	10c00005 	stb	r3,0(r2)
        return etharp_output_to_arp_index(netif, q, i);
 1823a4c:	e0bffb03 	ldbu	r2,-20(fp)
 1823a50:	10803fcc 	andi	r2,r2,255
 1823a54:	100d883a 	mov	r6,r2
 1823a58:	e17ffe17 	ldw	r5,-8(fp)
 1823a5c:	e13ffd17 	ldw	r4,-12(fp)
 1823a60:	18236cc0 	call	18236cc <etharp_output_to_arp_index>
 1823a64:	00001206 	br	1823ab0 <etharp_output+0x2d8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 1823a68:	e0bffb03 	ldbu	r2,-20(fp)
 1823a6c:	10800044 	addi	r2,r2,1
 1823a70:	e0bffb05 	stb	r2,-20(fp)
 1823a74:	e0bffb07 	ldb	r2,-20(fp)
 1823a78:	10800650 	cmplti	r2,r2,25
 1823a7c:	103fd61e 	bne	r2,zero,18239d8 <__alt_mem_mem_0+0xff8039d8>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 1823a80:	e1bffe17 	ldw	r6,-8(fp)
 1823a84:	e17ffa17 	ldw	r5,-24(fp)
 1823a88:	e13ffd17 	ldw	r4,-12(fp)
 1823a8c:	1823ac40 	call	1823ac4 <etharp_query>
 1823a90:	00000706 	br	1823ab0 <etharp_output+0x2d8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 1823a94:	e0bffd17 	ldw	r2,-12(fp)
 1823a98:	10800cc4 	addi	r2,r2,51
 1823a9c:	e1fff917 	ldw	r7,-28(fp)
 1823aa0:	100d883a 	mov	r6,r2
 1823aa4:	e17ffe17 	ldw	r5,-8(fp)
 1823aa8:	e13ffd17 	ldw	r4,-12(fp)
 1823aac:	1822e880 	call	1822e88 <etharp_send_ip>
}
 1823ab0:	e037883a 	mov	sp,fp
 1823ab4:	dfc00117 	ldw	ra,4(sp)
 1823ab8:	df000017 	ldw	fp,0(sp)
 1823abc:	dec00204 	addi	sp,sp,8
 1823ac0:	f800283a 	ret

01823ac4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
 1823ac4:	defff404 	addi	sp,sp,-48
 1823ac8:	dfc00b15 	stw	ra,44(sp)
 1823acc:	df000a15 	stw	fp,40(sp)
 1823ad0:	df000a04 	addi	fp,sp,40
 1823ad4:	e13ffd15 	stw	r4,-12(fp)
 1823ad8:	e17ffe15 	stw	r5,-8(fp)
 1823adc:	e1bfff15 	stw	r6,-4(fp)
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 1823ae0:	e0bffd17 	ldw	r2,-12(fp)
 1823ae4:	10800cc4 	addi	r2,r2,51
 1823ae8:	e0bffa15 	stw	r2,-24(fp)
  err_t result = ERR_MEM;
 1823aec:	00bfffc4 	movi	r2,-1
 1823af0:	e0bff605 	stb	r2,-40(fp)
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 1823af4:	e0bffe17 	ldw	r2,-8(fp)
 1823af8:	10800017 	ldw	r2,0(r2)
 1823afc:	e17ffd17 	ldw	r5,-12(fp)
 1823b00:	1009883a 	mov	r4,r2
 1823b04:	18187180 	call	1818718 <ip4_addr_isbroadcast>
 1823b08:	10803fcc 	andi	r2,r2,255
 1823b0c:	10000a1e 	bne	r2,zero,1823b38 <etharp_query+0x74>
      ip_addr_ismulticast(ipaddr) ||
 1823b10:	e0bffe17 	ldw	r2,-8(fp)
 1823b14:	10800017 	ldw	r2,0(r2)
 1823b18:	10803c0c 	andi	r2,r2,240
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 1823b1c:	10803820 	cmpeqi	r2,r2,224
 1823b20:	1000051e 	bne	r2,zero,1823b38 <etharp_query+0x74>
      ip_addr_ismulticast(ipaddr) ||
 1823b24:	e0bffe17 	ldw	r2,-8(fp)
 1823b28:	10000326 	beq	r2,zero,1823b38 <etharp_query+0x74>
      ip_addr_isany(ipaddr)) {
 1823b2c:	e0bffe17 	ldw	r2,-8(fp)
 1823b30:	10800017 	ldw	r2,0(r2)
 1823b34:	1000021e 	bne	r2,zero,1823b40 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 1823b38:	00bffc84 	movi	r2,-14
 1823b3c:	0000c906 	br	1823e64 <etharp_query+0x3a0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
 1823b40:	01400044 	movi	r5,1
 1823b44:	e13ffe17 	ldw	r4,-8(fp)
 1823b48:	1822b700 	call	1822b70 <etharp_find_entry>
 1823b4c:	e0bffb05 	stb	r2,-20(fp)

  /* could not find or create entry? */
  if (i < 0) {
 1823b50:	e0bffb07 	ldb	r2,-20(fp)
 1823b54:	10000b0e 	bge	r2,zero,1823b84 <etharp_query+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 1823b58:	e0bfff17 	ldw	r2,-4(fp)
 1823b5c:	10000726 	beq	r2,zero,1823b7c <etharp_query+0xb8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 1823b60:	008061f4 	movhi	r2,391
 1823b64:	10a77104 	addi	r2,r2,-25148
 1823b68:	10801217 	ldw	r2,72(r2)
 1823b6c:	10c00044 	addi	r3,r2,1
 1823b70:	008061f4 	movhi	r2,391
 1823b74:	10a77104 	addi	r2,r2,-25148
 1823b78:	10c01215 	stw	r3,72(r2)
    }
    return (err_t)i;
 1823b7c:	e0bffb03 	ldbu	r2,-20(fp)
 1823b80:	0000b806 	br	1823e64 <etharp_query+0x3a0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 1823b84:	e0fffb07 	ldb	r3,-20(fp)
 1823b88:	00806134 	movhi	r2,388
 1823b8c:	109d5c04 	addi	r2,r2,30064
 1823b90:	18c00524 	muli	r3,r3,20
 1823b94:	10c5883a 	add	r2,r2,r3
 1823b98:	10800484 	addi	r2,r2,18
 1823b9c:	10800003 	ldbu	r2,0(r2)
 1823ba0:	10803fcc 	andi	r2,r2,255
 1823ba4:	1000081e 	bne	r2,zero,1823bc8 <etharp_query+0x104>
    arp_table[i].state = ETHARP_STATE_PENDING;
 1823ba8:	e0fffb07 	ldb	r3,-20(fp)
 1823bac:	00806134 	movhi	r2,388
 1823bb0:	109d5c04 	addi	r2,r2,30064
 1823bb4:	18c00524 	muli	r3,r3,20
 1823bb8:	10c5883a 	add	r2,r2,r3
 1823bbc:	10800484 	addi	r2,r2,18
 1823bc0:	00c00044 	movi	r3,1
 1823bc4:	10c00005 	stb	r3,0(r2)
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 1823bc8:	e0fffb07 	ldb	r3,-20(fp)
 1823bcc:	00806134 	movhi	r2,388
 1823bd0:	109d5c04 	addi	r2,r2,30064
 1823bd4:	18c00524 	muli	r3,r3,20
 1823bd8:	10c5883a 	add	r2,r2,r3
 1823bdc:	10800484 	addi	r2,r2,18
 1823be0:	10800003 	ldbu	r2,0(r2)
 1823be4:	10803fcc 	andi	r2,r2,255
 1823be8:	10800060 	cmpeqi	r2,r2,1
 1823bec:	1000021e 	bne	r2,zero,1823bf8 <etharp_query+0x134>
 1823bf0:	e0bfff17 	ldw	r2,-4(fp)
 1823bf4:	1000081e 	bne	r2,zero,1823c18 <etharp_query+0x154>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 1823bf8:	e17ffe17 	ldw	r5,-8(fp)
 1823bfc:	e13ffd17 	ldw	r4,-12(fp)
 1823c00:	18240c40 	call	18240c4 <etharp_request>
 1823c04:	e0bff605 	stb	r2,-40(fp)
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 1823c08:	e0bfff17 	ldw	r2,-4(fp)
 1823c0c:	1000021e 	bne	r2,zero,1823c18 <etharp_query+0x154>
      return result;
 1823c10:	e0bff603 	ldbu	r2,-40(fp)
 1823c14:	00009306 	br	1823e64 <etharp_query+0x3a0>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 1823c18:	e0fffb07 	ldb	r3,-20(fp)
 1823c1c:	00806134 	movhi	r2,388
 1823c20:	109d5c04 	addi	r2,r2,30064
 1823c24:	18c00524 	muli	r3,r3,20
 1823c28:	10c5883a 	add	r2,r2,r3
 1823c2c:	10800484 	addi	r2,r2,18
 1823c30:	10800003 	ldbu	r2,0(r2)
 1823c34:	10803fcc 	andi	r2,r2,255
 1823c38:	108000b0 	cmpltui	r2,r2,2
 1823c3c:	1000161e 	bne	r2,zero,1823c98 <etharp_query+0x1d4>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 1823c40:	e0bffd17 	ldw	r2,-12(fp)
 1823c44:	10000726 	beq	r2,zero,1823c64 <etharp_query+0x1a0>
 1823c48:	e0bffd17 	ldw	r2,-12(fp)
 1823c4c:	10801017 	ldw	r2,64(r2)
 1823c50:	10000426 	beq	r2,zero,1823c64 <etharp_query+0x1a0>
 1823c54:	e0bffd17 	ldw	r2,-12(fp)
 1823c58:	10801017 	ldw	r2,64(r2)
 1823c5c:	e0fffb03 	ldbu	r3,-20(fp)
 1823c60:	10c00005 	stb	r3,0(r2)
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 1823c64:	e0bffb07 	ldb	r2,-20(fp)
 1823c68:	10800524 	muli	r2,r2,20
 1823c6c:	10c00304 	addi	r3,r2,12
 1823c70:	00806134 	movhi	r2,388
 1823c74:	109d5c04 	addi	r2,r2,30064
 1823c78:	1885883a 	add	r2,r3,r2
 1823c7c:	100f883a 	mov	r7,r2
 1823c80:	e1bffa17 	ldw	r6,-24(fp)
 1823c84:	e17fff17 	ldw	r5,-4(fp)
 1823c88:	e13ffd17 	ldw	r4,-12(fp)
 1823c8c:	1822e880 	call	1822e88 <etharp_send_ip>
 1823c90:	e0bff605 	stb	r2,-40(fp)
 1823c94:	00007206 	br	1823e60 <etharp_query+0x39c>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 1823c98:	e0fffb07 	ldb	r3,-20(fp)
 1823c9c:	00806134 	movhi	r2,388
 1823ca0:	109d5c04 	addi	r2,r2,30064
 1823ca4:	18c00524 	muli	r3,r3,20
 1823ca8:	10c5883a 	add	r2,r2,r3
 1823cac:	10800484 	addi	r2,r2,18
 1823cb0:	10800003 	ldbu	r2,0(r2)
 1823cb4:	10803fcc 	andi	r2,r2,255
 1823cb8:	10800058 	cmpnei	r2,r2,1
 1823cbc:	1000681e 	bne	r2,zero,1823e60 <etharp_query+0x39c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 1823cc0:	e03ff815 	stw	zero,-32(fp)
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 1823cc4:	e0bfff17 	ldw	r2,-4(fp)
 1823cc8:	e0bff715 	stw	r2,-36(fp)
    while (p) {
 1823ccc:	00000b06 	br	1823cfc <etharp_query+0x238>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
 1823cd0:	e0bff717 	ldw	r2,-36(fp)
 1823cd4:	10800303 	ldbu	r2,12(r2)
 1823cd8:	10803fcc 	andi	r2,r2,255
 1823cdc:	10800060 	cmpeqi	r2,r2,1
 1823ce0:	1000031e 	bne	r2,zero,1823cf0 <etharp_query+0x22c>
        copy_needed = 1;
 1823ce4:	00800044 	movi	r2,1
 1823ce8:	e0bff815 	stw	r2,-32(fp)
        break;
 1823cec:	00000506 	br	1823d04 <etharp_query+0x240>
      }
      p = p->next;
 1823cf0:	e0bff717 	ldw	r2,-36(fp)
 1823cf4:	10800017 	ldw	r2,0(r2)
 1823cf8:	e0bff715 	stw	r2,-36(fp)
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
 1823cfc:	e0bff717 	ldw	r2,-36(fp)
 1823d00:	103ff31e 	bne	r2,zero,1823cd0 <__alt_mem_mem_0+0xff803cd0>
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if(copy_needed) {
 1823d04:	e0bff817 	ldw	r2,-32(fp)
 1823d08:	10001526 	beq	r2,zero,1823d60 <etharp_query+0x29c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 1823d0c:	e0bff717 	ldw	r2,-36(fp)
 1823d10:	1080020b 	ldhu	r2,8(r2)
 1823d14:	10bfffcc 	andi	r2,r2,65535
 1823d18:	000d883a 	mov	r6,zero
 1823d1c:	100b883a 	mov	r5,r2
 1823d20:	010000c4 	movi	r4,3
 1823d24:	181a1480 	call	181a148 <pbuf_alloc>
 1823d28:	e0bff715 	stw	r2,-36(fp)
      if(p != NULL) {
 1823d2c:	e0bff717 	ldw	r2,-36(fp)
 1823d30:	10000f26 	beq	r2,zero,1823d70 <etharp_query+0x2ac>
        if (pbuf_copy(p, q) != ERR_OK) {
 1823d34:	e17fff17 	ldw	r5,-4(fp)
 1823d38:	e13ff717 	ldw	r4,-36(fp)
 1823d3c:	181ac8c0 	call	181ac8c <pbuf_copy>
 1823d40:	10803fcc 	andi	r2,r2,255
 1823d44:	1080201c 	xori	r2,r2,128
 1823d48:	10bfe004 	addi	r2,r2,-128
 1823d4c:	10000826 	beq	r2,zero,1823d70 <etharp_query+0x2ac>
          pbuf_free(p);
 1823d50:	e13ff717 	ldw	r4,-36(fp)
 1823d54:	181a9040 	call	181a904 <pbuf_free>
          p = NULL;
 1823d58:	e03ff715 	stw	zero,-36(fp)
 1823d5c:	00000406 	br	1823d70 <etharp_query+0x2ac>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 1823d60:	e0bfff17 	ldw	r2,-4(fp)
 1823d64:	e0bff715 	stw	r2,-36(fp)
      pbuf_ref(p);
 1823d68:	e13ff717 	ldw	r4,-36(fp)
 1823d6c:	181aa840 	call	181aa84 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 1823d70:	e0bff717 	ldw	r2,-36(fp)
 1823d74:	10003126 	beq	r2,zero,1823e3c <etharp_query+0x378>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 1823d78:	010002c4 	movi	r4,11
 1823d7c:	18340280 	call	1834028 <memp_malloc>
 1823d80:	e0bffc15 	stw	r2,-16(fp)
      if (new_entry != NULL) {
 1823d84:	e0bffc17 	ldw	r2,-16(fp)
 1823d88:	10002726 	beq	r2,zero,1823e28 <etharp_query+0x364>
        new_entry->next = 0;
 1823d8c:	e0bffc17 	ldw	r2,-16(fp)
 1823d90:	10000015 	stw	zero,0(r2)
        new_entry->p = p;
 1823d94:	e0bffc17 	ldw	r2,-16(fp)
 1823d98:	e0fff717 	ldw	r3,-36(fp)
 1823d9c:	10c00115 	stw	r3,4(r2)
        if(arp_table[i].q != NULL) {
 1823da0:	e0fffb07 	ldb	r3,-20(fp)
 1823da4:	00806134 	movhi	r2,388
 1823da8:	109d5c04 	addi	r2,r2,30064
 1823dac:	18c00524 	muli	r3,r3,20
 1823db0:	10c5883a 	add	r2,r2,r3
 1823db4:	10800017 	ldw	r2,0(r2)
 1823db8:	10001226 	beq	r2,zero,1823e04 <etharp_query+0x340>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 1823dbc:	e0fffb07 	ldb	r3,-20(fp)
 1823dc0:	00806134 	movhi	r2,388
 1823dc4:	109d5c04 	addi	r2,r2,30064
 1823dc8:	18c00524 	muli	r3,r3,20
 1823dcc:	10c5883a 	add	r2,r2,r3
 1823dd0:	10800017 	ldw	r2,0(r2)
 1823dd4:	e0bff915 	stw	r2,-28(fp)
          while (r->next != NULL) {
 1823dd8:	00000306 	br	1823de8 <etharp_query+0x324>
            r = r->next;
 1823ddc:	e0bff917 	ldw	r2,-28(fp)
 1823de0:	10800017 	ldw	r2,0(r2)
 1823de4:	e0bff915 	stw	r2,-28(fp)
        new_entry->p = p;
        if(arp_table[i].q != NULL) {
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
          while (r->next != NULL) {
 1823de8:	e0bff917 	ldw	r2,-28(fp)
 1823dec:	10800017 	ldw	r2,0(r2)
 1823df0:	103ffa1e 	bne	r2,zero,1823ddc <__alt_mem_mem_0+0xff803ddc>
            r = r->next;
          }
          r->next = new_entry;
 1823df4:	e0bff917 	ldw	r2,-28(fp)
 1823df8:	e0fffc17 	ldw	r3,-16(fp)
 1823dfc:	10c00015 	stw	r3,0(r2)
 1823e00:	00000706 	br	1823e20 <etharp_query+0x35c>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 1823e04:	e0fffb07 	ldb	r3,-20(fp)
 1823e08:	00806134 	movhi	r2,388
 1823e0c:	109d5c04 	addi	r2,r2,30064
 1823e10:	18c00524 	muli	r3,r3,20
 1823e14:	10c5883a 	add	r2,r2,r3
 1823e18:	e0fffc17 	ldw	r3,-16(fp)
 1823e1c:	10c00015 	stw	r3,0(r2)
        }
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
 1823e20:	e03ff605 	stb	zero,-40(fp)
 1823e24:	00000e06 	br	1823e60 <etharp_query+0x39c>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 1823e28:	e13ff717 	ldw	r4,-36(fp)
 1823e2c:	181a9040 	call	181a904 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 1823e30:	00bfffc4 	movi	r2,-1
 1823e34:	e0bff605 	stb	r2,-40(fp)
 1823e38:	00000906 	br	1823e60 <etharp_query+0x39c>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 1823e3c:	008061f4 	movhi	r2,391
 1823e40:	10a77104 	addi	r2,r2,-25148
 1823e44:	10801217 	ldw	r2,72(r2)
 1823e48:	10c00044 	addi	r3,r2,1
 1823e4c:	008061f4 	movhi	r2,391
 1823e50:	10a77104 	addi	r2,r2,-25148
 1823e54:	10c01215 	stw	r3,72(r2)
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 1823e58:	00bfffc4 	movi	r2,-1
 1823e5c:	e0bff605 	stb	r2,-40(fp)
    }
  }
  return result;
 1823e60:	e0bff603 	ldbu	r2,-40(fp)
}
 1823e64:	e037883a 	mov	sp,fp
 1823e68:	dfc00117 	ldw	ra,4(sp)
 1823e6c:	df000017 	ldw	fp,0(sp)
 1823e70:	dec00204 	addi	sp,sp,8
 1823e74:	f800283a 	ret

01823e78 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
 1823e78:	defff504 	addi	sp,sp,-44
 1823e7c:	dfc00a15 	stw	ra,40(sp)
 1823e80:	df000915 	stw	fp,36(sp)
 1823e84:	df000904 	addi	fp,sp,36
 1823e88:	e13ffb15 	stw	r4,-20(fp)
 1823e8c:	e17ffc15 	stw	r5,-16(fp)
 1823e90:	e1bffd15 	stw	r6,-12(fp)
 1823e94:	e1fffe15 	stw	r7,-8(fp)
 1823e98:	e0800517 	ldw	r2,20(fp)
 1823e9c:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  err_t result = ERR_OK;
 1823ea0:	e03ff705 	stb	zero,-36(fp)
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 1823ea4:	000d883a 	mov	r6,zero
 1823ea8:	01400b04 	movi	r5,44
 1823eac:	010000c4 	movi	r4,3
 1823eb0:	181a1480 	call	181a148 <pbuf_alloc>
 1823eb4:	e0bff815 	stw	r2,-32(fp)
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 1823eb8:	e0bff817 	ldw	r2,-32(fp)
 1823ebc:	1000091e 	bne	r2,zero,1823ee4 <etharp_raw+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 1823ec0:	008061f4 	movhi	r2,391
 1823ec4:	10a77104 	addi	r2,r2,-25148
 1823ec8:	10801217 	ldw	r2,72(r2)
 1823ecc:	10c00044 	addi	r3,r2,1
 1823ed0:	008061f4 	movhi	r2,391
 1823ed4:	10a77104 	addi	r2,r2,-25148
 1823ed8:	10c01215 	stw	r3,72(r2)
    return ERR_MEM;
 1823edc:	00bfffc4 	movi	r2,-1
 1823ee0:	00007306 	br	18240b0 <etharp_raw+0x238>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
 1823ee4:	e0bff817 	ldw	r2,-32(fp)
 1823ee8:	10800117 	ldw	r2,4(r2)
 1823eec:	e0bff915 	stw	r2,-28(fp)
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 1823ef0:	e0bff917 	ldw	r2,-28(fp)
 1823ef4:	10800404 	addi	r2,r2,16
 1823ef8:	e0bffa15 	stw	r2,-24(fp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 1823efc:	e0bfff0b 	ldhu	r2,-4(fp)
 1823f00:	1004d23a 	srli	r2,r2,8
 1823f04:	1007883a 	mov	r3,r2
 1823f08:	e0bfff0b 	ldhu	r2,-4(fp)
 1823f0c:	1004923a 	slli	r2,r2,8
 1823f10:	1884b03a 	or	r2,r3,r2
 1823f14:	100d883a 	mov	r6,r2
 1823f18:	e0bffa17 	ldw	r2,-24(fp)
 1823f1c:	30ffffcc 	andi	r3,r6,65535
 1823f20:	19403fcc 	andi	r5,r3,255
 1823f24:	10c00183 	ldbu	r3,6(r2)
 1823f28:	1806703a 	and	r3,r3,zero
 1823f2c:	1809883a 	mov	r4,r3
 1823f30:	2807883a 	mov	r3,r5
 1823f34:	20c6b03a 	or	r3,r4,r3
 1823f38:	10c00185 	stb	r3,6(r2)
 1823f3c:	30ffffcc 	andi	r3,r6,65535
 1823f40:	1806d23a 	srli	r3,r3,8
 1823f44:	197fffcc 	andi	r5,r3,65535
 1823f48:	10c001c3 	ldbu	r3,7(r2)
 1823f4c:	1806703a 	and	r3,r3,zero
 1823f50:	1809883a 	mov	r4,r3
 1823f54:	2807883a 	mov	r3,r5
 1823f58:	20c6b03a 	or	r3,r4,r3
 1823f5c:	10c001c5 	stb	r3,7(r2)
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 1823f60:	e0bffa17 	ldw	r2,-24(fp)
 1823f64:	10800204 	addi	r2,r2,8
 1823f68:	01800184 	movi	r6,6
 1823f6c:	e17ffe17 	ldw	r5,-8(fp)
 1823f70:	1009883a 	mov	r4,r2
 1823f74:	180604c0 	call	180604c <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 1823f78:	e0bffa17 	ldw	r2,-24(fp)
 1823f7c:	10800484 	addi	r2,r2,18
 1823f80:	01800184 	movi	r6,6
 1823f84:	e1400317 	ldw	r5,12(fp)
 1823f88:	1009883a 	mov	r4,r2
 1823f8c:	180604c0 	call	180604c <memcpy>
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 1823f90:	e0bff917 	ldw	r2,-28(fp)
 1823f94:	10800084 	addi	r2,r2,2
 1823f98:	01800184 	movi	r6,6
 1823f9c:	e17ffd17 	ldw	r5,-12(fp)
 1823fa0:	1009883a 	mov	r4,r2
 1823fa4:	180604c0 	call	180604c <memcpy>
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 1823fa8:	e0bff917 	ldw	r2,-28(fp)
 1823fac:	10800204 	addi	r2,r2,8
 1823fb0:	01800184 	movi	r6,6
 1823fb4:	e17ffc17 	ldw	r5,-16(fp)
 1823fb8:	1009883a 	mov	r4,r2
 1823fbc:	180604c0 	call	180604c <memcpy>
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 1823fc0:	e0bffa17 	ldw	r2,-24(fp)
 1823fc4:	10800384 	addi	r2,r2,14
 1823fc8:	01800104 	movi	r6,4
 1823fcc:	e1400217 	ldw	r5,8(fp)
 1823fd0:	1009883a 	mov	r4,r2
 1823fd4:	180604c0 	call	180604c <memcpy>
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 1823fd8:	e0bffa17 	ldw	r2,-24(fp)
 1823fdc:	10800604 	addi	r2,r2,24
 1823fe0:	01800104 	movi	r6,4
 1823fe4:	e1400417 	ldw	r5,16(fp)
 1823fe8:	1009883a 	mov	r4,r2
 1823fec:	180604c0 	call	180604c <memcpy>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 1823ff0:	e0bffa17 	ldw	r2,-24(fp)
 1823ff4:	10c00003 	ldbu	r3,0(r2)
 1823ff8:	1806703a 	and	r3,r3,zero
 1823ffc:	10c00005 	stb	r3,0(r2)
 1824000:	10c00043 	ldbu	r3,1(r2)
 1824004:	1806703a 	and	r3,r3,zero
 1824008:	18c00054 	ori	r3,r3,1
 182400c:	10c00045 	stb	r3,1(r2)
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 1824010:	e0bffa17 	ldw	r2,-24(fp)
 1824014:	10c00083 	ldbu	r3,2(r2)
 1824018:	1806703a 	and	r3,r3,zero
 182401c:	18c00214 	ori	r3,r3,8
 1824020:	10c00085 	stb	r3,2(r2)
 1824024:	10c000c3 	ldbu	r3,3(r2)
 1824028:	1806703a 	and	r3,r3,zero
 182402c:	10c000c5 	stb	r3,3(r2)
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 1824030:	e0bffa17 	ldw	r2,-24(fp)
 1824034:	00c00184 	movi	r3,6
 1824038:	10c00105 	stb	r3,4(r2)
  hdr->protolen = sizeof(ip_addr_t);
 182403c:	e0bffa17 	ldw	r2,-24(fp)
 1824040:	00c00104 	movi	r3,4
 1824044:	10c00145 	stb	r3,5(r2)

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 1824048:	e0bff917 	ldw	r2,-28(fp)
 182404c:	10c00383 	ldbu	r3,14(r2)
 1824050:	1806703a 	and	r3,r3,zero
 1824054:	18c00214 	ori	r3,r3,8
 1824058:	10c00385 	stb	r3,14(r2)
 182405c:	10c003c3 	ldbu	r3,15(r2)
 1824060:	1806703a 	and	r3,r3,zero
 1824064:	18c00194 	ori	r3,r3,6
 1824068:	10c003c5 	stb	r3,15(r2)
  /* send ARP query */
  result = netif->linkoutput(netif, p);
 182406c:	e0bffb17 	ldw	r2,-20(fp)
 1824070:	10800617 	ldw	r2,24(r2)
 1824074:	e17ff817 	ldw	r5,-32(fp)
 1824078:	e13ffb17 	ldw	r4,-20(fp)
 182407c:	103ee83a 	callr	r2
 1824080:	e0bff705 	stb	r2,-36(fp)
  ETHARP_STATS_INC(etharp.xmit);
 1824084:	008061f4 	movhi	r2,391
 1824088:	10a77104 	addi	r2,r2,-25148
 182408c:	10800c17 	ldw	r2,48(r2)
 1824090:	10c00044 	addi	r3,r2,1
 1824094:	008061f4 	movhi	r2,391
 1824098:	10a77104 	addi	r2,r2,-25148
 182409c:	10c00c15 	stw	r3,48(r2)
  /* free ARP query packet */
  pbuf_free(p);
 18240a0:	e13ff817 	ldw	r4,-32(fp)
 18240a4:	181a9040 	call	181a904 <pbuf_free>
  p = NULL;
 18240a8:	e03ff815 	stw	zero,-32(fp)
  /* could not allocate pbuf for ARP request */

  return result;
 18240ac:	e0bff703 	ldbu	r2,-36(fp)
}
 18240b0:	e037883a 	mov	sp,fp
 18240b4:	dfc00117 	ldw	ra,4(sp)
 18240b8:	df000017 	ldw	fp,0(sp)
 18240bc:	dec00204 	addi	sp,sp,8
 18240c0:	f800283a 	ret

018240c4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
 18240c4:	defff804 	addi	sp,sp,-32
 18240c8:	dfc00715 	stw	ra,28(sp)
 18240cc:	df000615 	stw	fp,24(sp)
 18240d0:	df000604 	addi	fp,sp,24
 18240d4:	e13ffe15 	stw	r4,-8(fp)
 18240d8:	e17fff15 	stw	r5,-4(fp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 18240dc:	e0bffe17 	ldw	r2,-8(fp)
 18240e0:	11000cc4 	addi	r4,r2,51
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
 18240e4:	e0bffe17 	ldw	r2,-8(fp)
 18240e8:	11400cc4 	addi	r5,r2,51
 18240ec:	e0bffe17 	ldw	r2,-8(fp)
 18240f0:	10800104 	addi	r2,r2,4
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 18240f4:	00c00044 	movi	r3,1
 18240f8:	d8c00315 	stw	r3,12(sp)
 18240fc:	e0ffff17 	ldw	r3,-4(fp)
 1824100:	d8c00215 	stw	r3,8(sp)
 1824104:	d0e01504 	addi	r3,gp,-32684
 1824108:	d8c00115 	stw	r3,4(sp)
 182410c:	d8800015 	stw	r2,0(sp)
 1824110:	280f883a 	mov	r7,r5
 1824114:	d1a01384 	addi	r6,gp,-32690
 1824118:	200b883a 	mov	r5,r4
 182411c:	e13ffe17 	ldw	r4,-8(fp)
 1824120:	1823e780 	call	1823e78 <etharp_raw>
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
 1824124:	e037883a 	mov	sp,fp
 1824128:	dfc00117 	ldw	ra,4(sp)
 182412c:	df000017 	ldw	fp,0(sp)
 1824130:	dec00204 	addi	sp,sp,8
 1824134:	f800283a 	ret

01824138 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 1824138:	defff904 	addi	sp,sp,-28
 182413c:	dfc00615 	stw	ra,24(sp)
 1824140:	df000515 	stw	fp,20(sp)
 1824144:	df000504 	addi	fp,sp,20
 1824148:	e13ffe15 	stw	r4,-8(fp)
 182414c:	e17fff15 	stw	r5,-4(fp)
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 1824150:	00800404 	movi	r2,16
 1824154:	e0bffb0d 	sth	r2,-20(fp)
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 1824158:	e0bffe17 	ldw	r2,-8(fp)
 182415c:	1080028b 	ldhu	r2,10(r2)
 1824160:	10bfffcc 	andi	r2,r2,65535
 1824164:	10800468 	cmpgeui	r2,r2,17
 1824168:	10000f1e 	bne	r2,zero,18241a8 <ethernet_input+0x70>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 182416c:	008061f4 	movhi	r2,391
 1824170:	10a77104 	addi	r2,r2,-25148
 1824174:	10801417 	ldw	r2,80(r2)
 1824178:	10c00044 	addi	r3,r2,1
 182417c:	008061f4 	movhi	r2,391
 1824180:	10a77104 	addi	r2,r2,-25148
 1824184:	10c01415 	stw	r3,80(r2)
    ETHARP_STATS_INC(etharp.drop);
 1824188:	008061f4 	movhi	r2,391
 182418c:	10a77104 	addi	r2,r2,-25148
 1824190:	10800f17 	ldw	r2,60(r2)
 1824194:	10c00044 	addi	r3,r2,1
 1824198:	008061f4 	movhi	r2,391
 182419c:	10a77104 	addi	r2,r2,-25148
 18241a0:	10c00f15 	stw	r3,60(r2)
    goto free_and_return;
 18241a4:	00006e06 	br	1824360 <ethernet_input+0x228>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 18241a8:	e0bffe17 	ldw	r2,-8(fp)
 18241ac:	10800117 	ldw	r2,4(r2)
 18241b0:	e0bffc15 	stw	r2,-16(fp)
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 18241b4:	e0bffc17 	ldw	r2,-16(fp)
 18241b8:	10c00383 	ldbu	r3,14(r2)
 18241bc:	108003c3 	ldbu	r2,15(r2)
 18241c0:	1004923a 	slli	r2,r2,8
 18241c4:	10c4b03a 	or	r2,r2,r3
 18241c8:	e0bffd0d 	sth	r2,-12(fp)

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 18241cc:	e0bffc17 	ldw	r2,-16(fp)
 18241d0:	10800083 	ldbu	r2,2(r2)
 18241d4:	10803fcc 	andi	r2,r2,255
 18241d8:	1080004c 	andi	r2,r2,1
 18241dc:	10002226 	beq	r2,zero,1824268 <ethernet_input+0x130>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 18241e0:	e0bffc17 	ldw	r2,-16(fp)
 18241e4:	10800083 	ldbu	r2,2(r2)
 18241e8:	10803fcc 	andi	r2,r2,255
 18241ec:	10800058 	cmpnei	r2,r2,1
 18241f0:	1000101e 	bne	r2,zero,1824234 <ethernet_input+0xfc>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 18241f4:	e0bffc17 	ldw	r2,-16(fp)
 18241f8:	108000c3 	ldbu	r2,3(r2)
 18241fc:	10803fcc 	andi	r2,r2,255
 1824200:	1000191e 	bne	r2,zero,1824268 <ethernet_input+0x130>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
 1824204:	e0bffc17 	ldw	r2,-16(fp)
 1824208:	10800103 	ldbu	r2,4(r2)
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 182420c:	10803fcc 	andi	r2,r2,255
 1824210:	10801798 	cmpnei	r2,r2,94
 1824214:	1000141e 	bne	r2,zero,1824268 <ethernet_input+0x130>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 1824218:	e0bffe17 	ldw	r2,-8(fp)
 182421c:	10800343 	ldbu	r2,13(r2)
 1824220:	10800414 	ori	r2,r2,16
 1824224:	1007883a 	mov	r3,r2
 1824228:	e0bffe17 	ldw	r2,-8(fp)
 182422c:	10c00345 	stb	r3,13(r2)
 1824230:	00000d06 	br	1824268 <ethernet_input+0x130>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 1824234:	e0bffc17 	ldw	r2,-16(fp)
 1824238:	10800084 	addi	r2,r2,2
 182423c:	01800184 	movi	r6,6
 1824240:	d1601384 	addi	r5,gp,-32690
 1824244:	1009883a 	mov	r4,r2
 1824248:	183c6e40 	call	183c6e4 <memcmp>
 182424c:	1000061e 	bne	r2,zero,1824268 <ethernet_input+0x130>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 1824250:	e0bffe17 	ldw	r2,-8(fp)
 1824254:	10800343 	ldbu	r2,13(r2)
 1824258:	10800214 	ori	r2,r2,8
 182425c:	1007883a 	mov	r3,r2
 1824260:	e0bffe17 	ldw	r2,-8(fp)
 1824264:	10c00345 	stb	r3,13(r2)
    }
  }

  switch (type) {
 1824268:	e0bffd0b 	ldhu	r2,-12(fp)
 182426c:	10c00220 	cmpeqi	r3,r2,8
 1824270:	1800031e 	bne	r3,zero,1824280 <ethernet_input+0x148>
 1824274:	10818220 	cmpeqi	r2,r2,1544
 1824278:	1000171e 	bne	r2,zero,18242d8 <ethernet_input+0x1a0>
 182427c:	00002206 	br	1824308 <ethernet_input+0x1d0>
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 1824280:	e0bfff17 	ldw	r2,-4(fp)
 1824284:	10800e43 	ldbu	r2,57(r2)
 1824288:	10803fcc 	andi	r2,r2,255
 182428c:	1080080c 	andi	r2,r2,32
 1824290:	10002e26 	beq	r2,zero,182434c <ethernet_input+0x214>
        goto free_and_return;
      }
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
 1824294:	e17ffe17 	ldw	r5,-8(fp)
 1824298:	e13fff17 	ldw	r4,-4(fp)
 182429c:	18232580 	call	1823258 <etharp_ip_input>
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
 18242a0:	e0bffb0b 	ldhu	r2,-20(fp)
 18242a4:	0085c83a 	sub	r2,zero,r2
 18242a8:	10bfffcc 	andi	r2,r2,65535
 18242ac:	10a0001c 	xori	r2,r2,32768
 18242b0:	10a00004 	addi	r2,r2,-32768
 18242b4:	100b883a 	mov	r5,r2
 18242b8:	e13ffe17 	ldw	r4,-8(fp)
 18242bc:	181a7540 	call	181a754 <pbuf_header>
 18242c0:	10803fcc 	andi	r2,r2,255
 18242c4:	1000231e 	bne	r2,zero,1824354 <ethernet_input+0x21c>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
 18242c8:	e17fff17 	ldw	r5,-4(fp)
 18242cc:	e13ffe17 	ldw	r4,-8(fp)
 18242d0:	1831a000 	call	1831a00 <ip_input>
      }
      break;
 18242d4:	00001b06 	br	1824344 <ethernet_input+0x20c>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 18242d8:	e0bfff17 	ldw	r2,-4(fp)
 18242dc:	10800e43 	ldbu	r2,57(r2)
 18242e0:	10803fcc 	andi	r2,r2,255
 18242e4:	1080080c 	andi	r2,r2,32
 18242e8:	10001c26 	beq	r2,zero,182435c <ethernet_input+0x224>
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 18242ec:	e0bfff17 	ldw	r2,-4(fp)
 18242f0:	10800cc4 	addi	r2,r2,51
 18242f4:	e1bffe17 	ldw	r6,-8(fp)
 18242f8:	100b883a 	mov	r5,r2
 18242fc:	e13fff17 	ldw	r4,-4(fp)
 1824300:	18233400 	call	1823340 <etharp_arp_input>
      break;
 1824304:	00000f06 	br	1824344 <ethernet_input+0x20c>
      pppoe_data_input(netif, p);
      break;
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
 1824308:	008061f4 	movhi	r2,391
 182430c:	10a77104 	addi	r2,r2,-25148
 1824310:	10801417 	ldw	r2,80(r2)
 1824314:	10c00044 	addi	r3,r2,1
 1824318:	008061f4 	movhi	r2,391
 182431c:	10a77104 	addi	r2,r2,-25148
 1824320:	10c01415 	stw	r3,80(r2)
      ETHARP_STATS_INC(etharp.drop);
 1824324:	008061f4 	movhi	r2,391
 1824328:	10a77104 	addi	r2,r2,-25148
 182432c:	10800f17 	ldw	r2,60(r2)
 1824330:	10c00044 	addi	r3,r2,1
 1824334:	008061f4 	movhi	r2,391
 1824338:	10a77104 	addi	r2,r2,-25148
 182433c:	10c00f15 	stw	r3,60(r2)
      goto free_and_return;
 1824340:	00000706 	br	1824360 <ethernet_input+0x228>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 1824344:	0005883a 	mov	r2,zero
 1824348:	00000806 	br	182436c <ethernet_input+0x234>
  switch (type) {
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
 182434c:	0001883a 	nop
 1824350:	00000306 	br	1824360 <ethernet_input+0x228>
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
 1824354:	0001883a 	nop
 1824358:	00000106 	br	1824360 <ethernet_input+0x228>
      }
      break;
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
 182435c:	0001883a 	nop
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 1824360:	e13ffe17 	ldw	r4,-8(fp)
 1824364:	181a9040 	call	181a904 <pbuf_free>
  return ERR_OK;
 1824368:	0005883a 	mov	r2,zero
}
 182436c:	e037883a 	mov	sp,fp
 1824370:	dfc00117 	ldw	ra,4(sp)
 1824374:	df000017 	ldw	fp,0(sp)
 1824378:	dec00204 	addi	sp,sp,8
 182437c:	f800283a 	ret

01824380 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1824380:	defffd04 	addi	sp,sp,-12
 1824384:	dfc00215 	stw	ra,8(sp)
 1824388:	df000115 	stw	fp,4(sp)
 182438c:	df000104 	addi	fp,sp,4
 1824390:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1824394:	d1600804 	addi	r5,gp,-32736
 1824398:	e13fff17 	ldw	r4,-4(fp)
 182439c:	18273500 	call	1827350 <alt_dev_llist_insert>
}
 18243a0:	e037883a 	mov	sp,fp
 18243a4:	dfc00117 	ldw	ra,4(sp)
 18243a8:	df000017 	ldw	fp,0(sp)
 18243ac:	dec00204 	addi	sp,sp,8
 18243b0:	f800283a 	ret

018243b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 18243b4:	defffd04 	addi	sp,sp,-12
 18243b8:	dfc00215 	stw	ra,8(sp)
 18243bc:	df000115 	stw	fp,4(sp)
 18243c0:	df000104 	addi	fp,sp,4
 18243c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 18243c8:	1827fa40 	call	1827fa4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 18243cc:	00800044 	movi	r2,1
 18243d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 18243d4:	0001883a 	nop
 18243d8:	e037883a 	mov	sp,fp
 18243dc:	dfc00117 	ldw	ra,4(sp)
 18243e0:	df000017 	ldw	fp,0(sp)
 18243e4:	dec00204 	addi	sp,sp,8
 18243e8:	f800283a 	ret

018243ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 18243ec:	defffe04 	addi	sp,sp,-8
 18243f0:	dfc00115 	stw	ra,4(sp)
 18243f4:	df000015 	stw	fp,0(sp)
 18243f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 18243fc:	01c0fa04 	movi	r7,1000
 1824400:	018000c4 	movi	r6,3
 1824404:	000b883a 	mov	r5,zero
 1824408:	01008134 	movhi	r4,516
 182440c:	21040804 	addi	r4,r4,4128
 1824410:	1825e0c0 	call	1825e0c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1824414:	01800084 	movi	r6,2
 1824418:	000b883a 	mov	r5,zero
 182441c:	01006134 	movhi	r4,388
 1824420:	21100804 	addi	r4,r4,16416
 1824424:	18245fc0 	call	18245fc <altera_avalon_jtag_uart_init>
 1824428:	01006134 	movhi	r4,388
 182442c:	210ffe04 	addi	r4,r4,16376
 1824430:	18243800 	call	1824380 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TSE_RX_0, sgdma_tse_rx_0);
 1824434:	000d883a 	mov	r6,zero
 1824438:	000b883a 	mov	r5,zero
 182443c:	01006134 	movhi	r4,388
 1824440:	21141804 	addi	r4,r4,20576
 1824444:	1825cec0 	call	1825cec <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TSE_TX_0, sgdma_tse_tx_0);
 1824448:	01800044 	movi	r6,1
 182444c:	000b883a 	mov	r5,zero
 1824450:	01006134 	movhi	r4,388
 1824454:	21142404 	addi	r4,r4,20624
 1824458:	1825cec0 	call	1825cec <alt_avalon_sgdma_init>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 182445c:	01800104 	movi	r6,4
 1824460:	000b883a 	mov	r5,zero
 1824464:	01006134 	movhi	r4,388
 1824468:	21143a04 	addi	r4,r4,20712
 182446c:	1825f980 	call	1825f98 <altera_avalon_uart_init>
 1824470:	01006134 	movhi	r4,388
 1824474:	21143004 	addi	r4,r4,20672
 1824478:	18243800 	call	1824380 <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE_MAC_0, tse_mac_0);
 182447c:	0001883a 	nop
}
 1824480:	0001883a 	nop
 1824484:	e037883a 	mov	sp,fp
 1824488:	dfc00117 	ldw	ra,4(sp)
 182448c:	df000017 	ldw	fp,0(sp)
 1824490:	dec00204 	addi	sp,sp,8
 1824494:	f800283a 	ret

01824498 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1824498:	defffa04 	addi	sp,sp,-24
 182449c:	dfc00515 	stw	ra,20(sp)
 18244a0:	df000415 	stw	fp,16(sp)
 18244a4:	df000404 	addi	fp,sp,16
 18244a8:	e13ffd15 	stw	r4,-12(fp)
 18244ac:	e17ffe15 	stw	r5,-8(fp)
 18244b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 18244b4:	e0bffd17 	ldw	r2,-12(fp)
 18244b8:	10800017 	ldw	r2,0(r2)
 18244bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 18244c0:	e0bffc17 	ldw	r2,-16(fp)
 18244c4:	10c00a04 	addi	r3,r2,40
 18244c8:	e0bffd17 	ldw	r2,-12(fp)
 18244cc:	10800217 	ldw	r2,8(r2)
 18244d0:	100f883a 	mov	r7,r2
 18244d4:	e1bfff17 	ldw	r6,-4(fp)
 18244d8:	e17ffe17 	ldw	r5,-8(fp)
 18244dc:	1809883a 	mov	r4,r3
 18244e0:	1824b480 	call	1824b48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 18244e4:	e037883a 	mov	sp,fp
 18244e8:	dfc00117 	ldw	ra,4(sp)
 18244ec:	df000017 	ldw	fp,0(sp)
 18244f0:	dec00204 	addi	sp,sp,8
 18244f4:	f800283a 	ret

018244f8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 18244f8:	defffa04 	addi	sp,sp,-24
 18244fc:	dfc00515 	stw	ra,20(sp)
 1824500:	df000415 	stw	fp,16(sp)
 1824504:	df000404 	addi	fp,sp,16
 1824508:	e13ffd15 	stw	r4,-12(fp)
 182450c:	e17ffe15 	stw	r5,-8(fp)
 1824510:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1824514:	e0bffd17 	ldw	r2,-12(fp)
 1824518:	10800017 	ldw	r2,0(r2)
 182451c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1824520:	e0bffc17 	ldw	r2,-16(fp)
 1824524:	10c00a04 	addi	r3,r2,40
 1824528:	e0bffd17 	ldw	r2,-12(fp)
 182452c:	10800217 	ldw	r2,8(r2)
 1824530:	100f883a 	mov	r7,r2
 1824534:	e1bfff17 	ldw	r6,-4(fp)
 1824538:	e17ffe17 	ldw	r5,-8(fp)
 182453c:	1809883a 	mov	r4,r3
 1824540:	1824da00 	call	1824da0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1824544:	e037883a 	mov	sp,fp
 1824548:	dfc00117 	ldw	ra,4(sp)
 182454c:	df000017 	ldw	fp,0(sp)
 1824550:	dec00204 	addi	sp,sp,8
 1824554:	f800283a 	ret

01824558 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1824558:	defffc04 	addi	sp,sp,-16
 182455c:	dfc00315 	stw	ra,12(sp)
 1824560:	df000215 	stw	fp,8(sp)
 1824564:	df000204 	addi	fp,sp,8
 1824568:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 182456c:	e0bfff17 	ldw	r2,-4(fp)
 1824570:	10800017 	ldw	r2,0(r2)
 1824574:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1824578:	e0bffe17 	ldw	r2,-8(fp)
 182457c:	10c00a04 	addi	r3,r2,40
 1824580:	e0bfff17 	ldw	r2,-4(fp)
 1824584:	10800217 	ldw	r2,8(r2)
 1824588:	100b883a 	mov	r5,r2
 182458c:	1809883a 	mov	r4,r3
 1824590:	18249f00 	call	18249f0 <altera_avalon_jtag_uart_close>
}
 1824594:	e037883a 	mov	sp,fp
 1824598:	dfc00117 	ldw	ra,4(sp)
 182459c:	df000017 	ldw	fp,0(sp)
 18245a0:	dec00204 	addi	sp,sp,8
 18245a4:	f800283a 	ret

018245a8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 18245a8:	defffa04 	addi	sp,sp,-24
 18245ac:	dfc00515 	stw	ra,20(sp)
 18245b0:	df000415 	stw	fp,16(sp)
 18245b4:	df000404 	addi	fp,sp,16
 18245b8:	e13ffd15 	stw	r4,-12(fp)
 18245bc:	e17ffe15 	stw	r5,-8(fp)
 18245c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 18245c4:	e0bffd17 	ldw	r2,-12(fp)
 18245c8:	10800017 	ldw	r2,0(r2)
 18245cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 18245d0:	e0bffc17 	ldw	r2,-16(fp)
 18245d4:	10800a04 	addi	r2,r2,40
 18245d8:	e1bfff17 	ldw	r6,-4(fp)
 18245dc:	e17ffe17 	ldw	r5,-8(fp)
 18245e0:	1009883a 	mov	r4,r2
 18245e4:	1824a580 	call	1824a58 <altera_avalon_jtag_uart_ioctl>
}
 18245e8:	e037883a 	mov	sp,fp
 18245ec:	dfc00117 	ldw	ra,4(sp)
 18245f0:	df000017 	ldw	fp,0(sp)
 18245f4:	dec00204 	addi	sp,sp,8
 18245f8:	f800283a 	ret

018245fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 18245fc:	defff304 	addi	sp,sp,-52
 1824600:	dfc00c15 	stw	ra,48(sp)
 1824604:	df000b15 	stw	fp,44(sp)
 1824608:	df000b04 	addi	fp,sp,44
 182460c:	e13ff915 	stw	r4,-28(fp)
 1824610:	e17ffa15 	stw	r5,-24(fp)
 1824614:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
 1824618:	e0bff917 	ldw	r2,-28(fp)
 182461c:	10800a04 	addi	r2,r2,40
 1824620:	e0bff615 	stw	r2,-40(fp)
 1824624:	00800044 	movi	r2,1
 1824628:	e0bff88d 	sth	r2,-30(fp)
 182462c:	e0bff88b 	ldhu	r2,-30(fp)
 1824630:	10000226 	beq	r2,zero,182463c <altera_avalon_jtag_uart_init+0x40>
 1824634:	e0bff88b 	ldhu	r2,-30(fp)
 1824638:	00000106 	br	1824640 <altera_avalon_jtag_uart_init+0x44>
 182463c:	00800044 	movi	r2,1
 1824640:	e0fff88b 	ldhu	r3,-30(fp)
 1824644:	180b883a 	mov	r5,r3
 1824648:	1009883a 	mov	r4,r2
 182464c:	180d9d40 	call	180d9d4 <xQueueCreateCountingSemaphore>
 1824650:	1007883a 	mov	r3,r2
 1824654:	e0bff617 	ldw	r2,-40(fp)
 1824658:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 182465c:	e0bff917 	ldw	r2,-28(fp)
 1824660:	10800b04 	addi	r2,r2,44
 1824664:	e0bff715 	stw	r2,-36(fp)
 1824668:	00800044 	movi	r2,1
 182466c:	e0bff80d 	sth	r2,-32(fp)
 1824670:	e0bff80b 	ldhu	r2,-32(fp)
 1824674:	10000226 	beq	r2,zero,1824680 <altera_avalon_jtag_uart_init+0x84>
 1824678:	e0bff80b 	ldhu	r2,-32(fp)
 182467c:	00000106 	br	1824684 <altera_avalon_jtag_uart_init+0x88>
 1824680:	00800044 	movi	r2,1
 1824684:	e0fff80b 	ldhu	r3,-32(fp)
 1824688:	180b883a 	mov	r5,r3
 182468c:	1009883a 	mov	r4,r2
 1824690:	180d9d40 	call	180d9d4 <xQueueCreateCountingSemaphore>
 1824694:	1007883a 	mov	r3,r2
 1824698:	e0bff717 	ldw	r2,-36(fp)
 182469c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 18246a0:	e0bff917 	ldw	r2,-28(fp)
 18246a4:	00c00044 	movi	r3,1
 18246a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 18246ac:	e0bff917 	ldw	r2,-28(fp)
 18246b0:	10800017 	ldw	r2,0(r2)
 18246b4:	10800104 	addi	r2,r2,4
 18246b8:	1007883a 	mov	r3,r2
 18246bc:	e0bff917 	ldw	r2,-28(fp)
 18246c0:	10800817 	ldw	r2,32(r2)
 18246c4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 18246c8:	e0bffa17 	ldw	r2,-24(fp)
 18246cc:	e0fffb17 	ldw	r3,-20(fp)
 18246d0:	d8000015 	stw	zero,0(sp)
 18246d4:	e1fff917 	ldw	r7,-28(fp)
 18246d8:	018060b4 	movhi	r6,386
 18246dc:	3191d104 	addi	r6,r6,18244
 18246e0:	180b883a 	mov	r5,r3
 18246e4:	1009883a 	mov	r4,r2
 18246e8:	18278940 	call	1827894 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 18246ec:	e0bff917 	ldw	r2,-28(fp)
 18246f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 18246f4:	e0bff917 	ldw	r2,-28(fp)
 18246f8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 18246fc:	d0e80717 	ldw	r3,-24548(gp)
 1824700:	e1fff917 	ldw	r7,-28(fp)
 1824704:	018060b4 	movhi	r6,386
 1824708:	31925404 	addi	r6,r6,18768
 182470c:	180b883a 	mov	r5,r3
 1824710:	1009883a 	mov	r4,r2
 1824714:	18270940 	call	1827094 <alt_alarm_start>
 1824718:	1000040e 	bge	r2,zero,182472c <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 182471c:	e0fff917 	ldw	r3,-28(fp)
 1824720:	00a00034 	movhi	r2,32768
 1824724:	10bfffc4 	addi	r2,r2,-1
 1824728:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 182472c:	0001883a 	nop
 1824730:	e037883a 	mov	sp,fp
 1824734:	dfc00117 	ldw	ra,4(sp)
 1824738:	df000017 	ldw	fp,0(sp)
 182473c:	dec00204 	addi	sp,sp,8
 1824740:	f800283a 	ret

01824744 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1824744:	defff804 	addi	sp,sp,-32
 1824748:	df000715 	stw	fp,28(sp)
 182474c:	df000704 	addi	fp,sp,28
 1824750:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1824754:	e0bfff17 	ldw	r2,-4(fp)
 1824758:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 182475c:	e0bffb17 	ldw	r2,-20(fp)
 1824760:	10800017 	ldw	r2,0(r2)
 1824764:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1824768:	e0bffc17 	ldw	r2,-16(fp)
 182476c:	10800104 	addi	r2,r2,4
 1824770:	10800037 	ldwio	r2,0(r2)
 1824774:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1824778:	e0bffd17 	ldw	r2,-12(fp)
 182477c:	1080c00c 	andi	r2,r2,768
 1824780:	10006d26 	beq	r2,zero,1824938 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1824784:	e0bffd17 	ldw	r2,-12(fp)
 1824788:	1080400c 	andi	r2,r2,256
 182478c:	10003526 	beq	r2,zero,1824864 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1824790:	00800074 	movhi	r2,1
 1824794:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1824798:	e0bffb17 	ldw	r2,-20(fp)
 182479c:	10800c17 	ldw	r2,48(r2)
 18247a0:	10800044 	addi	r2,r2,1
 18247a4:	1081ffcc 	andi	r2,r2,2047
 18247a8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 18247ac:	e0bffb17 	ldw	r2,-20(fp)
 18247b0:	10c00d17 	ldw	r3,52(r2)
 18247b4:	e0bffe17 	ldw	r2,-8(fp)
 18247b8:	18801526 	beq	r3,r2,1824810 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 18247bc:	e0bffc17 	ldw	r2,-16(fp)
 18247c0:	10800037 	ldwio	r2,0(r2)
 18247c4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 18247c8:	e0bff917 	ldw	r2,-28(fp)
 18247cc:	10a0000c 	andi	r2,r2,32768
 18247d0:	10001126 	beq	r2,zero,1824818 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 18247d4:	e0bffb17 	ldw	r2,-20(fp)
 18247d8:	10800c17 	ldw	r2,48(r2)
 18247dc:	e0fff917 	ldw	r3,-28(fp)
 18247e0:	1809883a 	mov	r4,r3
 18247e4:	e0fffb17 	ldw	r3,-20(fp)
 18247e8:	1885883a 	add	r2,r3,r2
 18247ec:	10801004 	addi	r2,r2,64
 18247f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 18247f4:	e0bffb17 	ldw	r2,-20(fp)
 18247f8:	10800c17 	ldw	r2,48(r2)
 18247fc:	10800044 	addi	r2,r2,1
 1824800:	10c1ffcc 	andi	r3,r2,2047
 1824804:	e0bffb17 	ldw	r2,-20(fp)
 1824808:	10c00c15 	stw	r3,48(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 182480c:	003fe206 	br	1824798 <__alt_mem_mem_0+0xff804798>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 1824810:	0001883a 	nop
 1824814:	00000106 	br	182481c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 1824818:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 182481c:	e0bff917 	ldw	r2,-28(fp)
 1824820:	10bfffec 	andhi	r2,r2,65535
 1824824:	10000f26 	beq	r2,zero,1824864 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1824828:	e0bffb17 	ldw	r2,-20(fp)
 182482c:	10c00817 	ldw	r3,32(r2)
 1824830:	00bfff84 	movi	r2,-2
 1824834:	1886703a 	and	r3,r3,r2
 1824838:	e0bffb17 	ldw	r2,-20(fp)
 182483c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1824840:	e0bffc17 	ldw	r2,-16(fp)
 1824844:	10800104 	addi	r2,r2,4
 1824848:	1007883a 	mov	r3,r2
 182484c:	e0bffb17 	ldw	r2,-20(fp)
 1824850:	10800817 	ldw	r2,32(r2)
 1824854:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1824858:	e0bffc17 	ldw	r2,-16(fp)
 182485c:	10800104 	addi	r2,r2,4
 1824860:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1824864:	e0bffd17 	ldw	r2,-12(fp)
 1824868:	1080800c 	andi	r2,r2,512
 182486c:	103fbe26 	beq	r2,zero,1824768 <__alt_mem_mem_0+0xff804768>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1824870:	e0bffd17 	ldw	r2,-12(fp)
 1824874:	1004d43a 	srli	r2,r2,16
 1824878:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 182487c:	00001406 	br	18248d0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1824880:	e0bffc17 	ldw	r2,-16(fp)
 1824884:	e0fffb17 	ldw	r3,-20(fp)
 1824888:	18c00f17 	ldw	r3,60(r3)
 182488c:	e13ffb17 	ldw	r4,-20(fp)
 1824890:	20c7883a 	add	r3,r4,r3
 1824894:	18c21004 	addi	r3,r3,2112
 1824898:	18c00003 	ldbu	r3,0(r3)
 182489c:	18c03fcc 	andi	r3,r3,255
 18248a0:	18c0201c 	xori	r3,r3,128
 18248a4:	18ffe004 	addi	r3,r3,-128
 18248a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 18248ac:	e0bffb17 	ldw	r2,-20(fp)
 18248b0:	10800f17 	ldw	r2,60(r2)
 18248b4:	10800044 	addi	r2,r2,1
 18248b8:	10c1ffcc 	andi	r3,r2,2047
 18248bc:	e0bffb17 	ldw	r2,-20(fp)
 18248c0:	10c00f15 	stw	r3,60(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 18248c4:	e0bffa17 	ldw	r2,-24(fp)
 18248c8:	10bfffc4 	addi	r2,r2,-1
 18248cc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 18248d0:	e0bffa17 	ldw	r2,-24(fp)
 18248d4:	10000526 	beq	r2,zero,18248ec <altera_avalon_jtag_uart_irq+0x1a8>
 18248d8:	e0bffb17 	ldw	r2,-20(fp)
 18248dc:	10c00f17 	ldw	r3,60(r2)
 18248e0:	e0bffb17 	ldw	r2,-20(fp)
 18248e4:	10800e17 	ldw	r2,56(r2)
 18248e8:	18bfe51e 	bne	r3,r2,1824880 <__alt_mem_mem_0+0xff804880>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 18248ec:	e0bffa17 	ldw	r2,-24(fp)
 18248f0:	103f9d26 	beq	r2,zero,1824768 <__alt_mem_mem_0+0xff804768>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 18248f4:	e0bffb17 	ldw	r2,-20(fp)
 18248f8:	10c00817 	ldw	r3,32(r2)
 18248fc:	00bfff44 	movi	r2,-3
 1824900:	1886703a 	and	r3,r3,r2
 1824904:	e0bffb17 	ldw	r2,-20(fp)
 1824908:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 182490c:	e0bffb17 	ldw	r2,-20(fp)
 1824910:	10800017 	ldw	r2,0(r2)
 1824914:	10800104 	addi	r2,r2,4
 1824918:	1007883a 	mov	r3,r2
 182491c:	e0bffb17 	ldw	r2,-20(fp)
 1824920:	10800817 	ldw	r2,32(r2)
 1824924:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1824928:	e0bffc17 	ldw	r2,-16(fp)
 182492c:	10800104 	addi	r2,r2,4
 1824930:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1824934:	003f8c06 	br	1824768 <__alt_mem_mem_0+0xff804768>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 1824938:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 182493c:	0001883a 	nop
 1824940:	e037883a 	mov	sp,fp
 1824944:	df000017 	ldw	fp,0(sp)
 1824948:	dec00104 	addi	sp,sp,4
 182494c:	f800283a 	ret

01824950 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1824950:	defff804 	addi	sp,sp,-32
 1824954:	df000715 	stw	fp,28(sp)
 1824958:	df000704 	addi	fp,sp,28
 182495c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1824960:	e0bffb17 	ldw	r2,-20(fp)
 1824964:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1824968:	e0bff917 	ldw	r2,-28(fp)
 182496c:	10800017 	ldw	r2,0(r2)
 1824970:	10800104 	addi	r2,r2,4
 1824974:	10800037 	ldwio	r2,0(r2)
 1824978:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 182497c:	e0bffa17 	ldw	r2,-24(fp)
 1824980:	1081000c 	andi	r2,r2,1024
 1824984:	10000b26 	beq	r2,zero,18249b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1824988:	e0bff917 	ldw	r2,-28(fp)
 182498c:	10800017 	ldw	r2,0(r2)
 1824990:	10800104 	addi	r2,r2,4
 1824994:	1007883a 	mov	r3,r2
 1824998:	e0bff917 	ldw	r2,-28(fp)
 182499c:	10800817 	ldw	r2,32(r2)
 18249a0:	10810014 	ori	r2,r2,1024
 18249a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 18249a8:	e0bff917 	ldw	r2,-28(fp)
 18249ac:	10000915 	stw	zero,36(r2)
 18249b0:	00000a06 	br	18249dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 18249b4:	e0bff917 	ldw	r2,-28(fp)
 18249b8:	10c00917 	ldw	r3,36(r2)
 18249bc:	00a00034 	movhi	r2,32768
 18249c0:	10bfff04 	addi	r2,r2,-4
 18249c4:	10c00536 	bltu	r2,r3,18249dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 18249c8:	e0bff917 	ldw	r2,-28(fp)
 18249cc:	10800917 	ldw	r2,36(r2)
 18249d0:	10c00044 	addi	r3,r2,1
 18249d4:	e0bff917 	ldw	r2,-28(fp)
 18249d8:	10c00915 	stw	r3,36(r2)
 18249dc:	d0a80717 	ldw	r2,-24548(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 18249e0:	e037883a 	mov	sp,fp
 18249e4:	df000017 	ldw	fp,0(sp)
 18249e8:	dec00104 	addi	sp,sp,4
 18249ec:	f800283a 	ret

018249f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 18249f0:	defffd04 	addi	sp,sp,-12
 18249f4:	df000215 	stw	fp,8(sp)
 18249f8:	df000204 	addi	fp,sp,8
 18249fc:	e13ffe15 	stw	r4,-8(fp)
 1824a00:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1824a04:	00000506 	br	1824a1c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1824a08:	e0bfff17 	ldw	r2,-4(fp)
 1824a0c:	1090000c 	andi	r2,r2,16384
 1824a10:	10000226 	beq	r2,zero,1824a1c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1824a14:	00bffd44 	movi	r2,-11
 1824a18:	00000b06 	br	1824a48 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1824a1c:	e0bffe17 	ldw	r2,-8(fp)
 1824a20:	10c00f17 	ldw	r3,60(r2)
 1824a24:	e0bffe17 	ldw	r2,-8(fp)
 1824a28:	10800e17 	ldw	r2,56(r2)
 1824a2c:	18800526 	beq	r3,r2,1824a44 <altera_avalon_jtag_uart_close+0x54>
 1824a30:	e0bffe17 	ldw	r2,-8(fp)
 1824a34:	10c00917 	ldw	r3,36(r2)
 1824a38:	e0bffe17 	ldw	r2,-8(fp)
 1824a3c:	10800117 	ldw	r2,4(r2)
 1824a40:	18bff136 	bltu	r3,r2,1824a08 <__alt_mem_mem_0+0xff804a08>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1824a44:	0005883a 	mov	r2,zero
}
 1824a48:	e037883a 	mov	sp,fp
 1824a4c:	df000017 	ldw	fp,0(sp)
 1824a50:	dec00104 	addi	sp,sp,4
 1824a54:	f800283a 	ret

01824a58 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1824a58:	defffa04 	addi	sp,sp,-24
 1824a5c:	df000515 	stw	fp,20(sp)
 1824a60:	df000504 	addi	fp,sp,20
 1824a64:	e13ffd15 	stw	r4,-12(fp)
 1824a68:	e17ffe15 	stw	r5,-8(fp)
 1824a6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1824a70:	00bff9c4 	movi	r2,-25
 1824a74:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1824a78:	e0bffe17 	ldw	r2,-8(fp)
 1824a7c:	10da8060 	cmpeqi	r3,r2,27137
 1824a80:	1800031e 	bne	r3,zero,1824a90 <altera_avalon_jtag_uart_ioctl+0x38>
 1824a84:	109a80a0 	cmpeqi	r2,r2,27138
 1824a88:	1000181e 	bne	r2,zero,1824aec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1824a8c:	00002906 	br	1824b34 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1824a90:	e0bffd17 	ldw	r2,-12(fp)
 1824a94:	10c00117 	ldw	r3,4(r2)
 1824a98:	00a00034 	movhi	r2,32768
 1824a9c:	10bfffc4 	addi	r2,r2,-1
 1824aa0:	18802126 	beq	r3,r2,1824b28 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 1824aa4:	e0bfff17 	ldw	r2,-4(fp)
 1824aa8:	10800017 	ldw	r2,0(r2)
 1824aac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1824ab0:	e0bffc17 	ldw	r2,-16(fp)
 1824ab4:	10800090 	cmplti	r2,r2,2
 1824ab8:	1000061e 	bne	r2,zero,1824ad4 <altera_avalon_jtag_uart_ioctl+0x7c>
 1824abc:	e0fffc17 	ldw	r3,-16(fp)
 1824ac0:	00a00034 	movhi	r2,32768
 1824ac4:	10bfffc4 	addi	r2,r2,-1
 1824ac8:	18800226 	beq	r3,r2,1824ad4 <altera_avalon_jtag_uart_ioctl+0x7c>
 1824acc:	e0bffc17 	ldw	r2,-16(fp)
 1824ad0:	00000206 	br	1824adc <altera_avalon_jtag_uart_ioctl+0x84>
 1824ad4:	00a00034 	movhi	r2,32768
 1824ad8:	10bfff84 	addi	r2,r2,-2
 1824adc:	e0fffd17 	ldw	r3,-12(fp)
 1824ae0:	18800115 	stw	r2,4(r3)
      rc = 0;
 1824ae4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1824ae8:	00000f06 	br	1824b28 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1824aec:	e0bffd17 	ldw	r2,-12(fp)
 1824af0:	10c00117 	ldw	r3,4(r2)
 1824af4:	00a00034 	movhi	r2,32768
 1824af8:	10bfffc4 	addi	r2,r2,-1
 1824afc:	18800c26 	beq	r3,r2,1824b30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1824b00:	e0bffd17 	ldw	r2,-12(fp)
 1824b04:	10c00917 	ldw	r3,36(r2)
 1824b08:	e0bffd17 	ldw	r2,-12(fp)
 1824b0c:	10800117 	ldw	r2,4(r2)
 1824b10:	1885803a 	cmpltu	r2,r3,r2
 1824b14:	10c03fcc 	andi	r3,r2,255
 1824b18:	e0bfff17 	ldw	r2,-4(fp)
 1824b1c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1824b20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1824b24:	00000206 	br	1824b30 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 1824b28:	0001883a 	nop
 1824b2c:	00000106 	br	1824b34 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 1824b30:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1824b34:	e0bffb17 	ldw	r2,-20(fp)
}
 1824b38:	e037883a 	mov	sp,fp
 1824b3c:	df000017 	ldw	fp,0(sp)
 1824b40:	dec00104 	addi	sp,sp,4
 1824b44:	f800283a 	ret

01824b48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1824b48:	defff004 	addi	sp,sp,-64
 1824b4c:	dfc00f15 	stw	ra,60(sp)
 1824b50:	df000e15 	stw	fp,56(sp)
 1824b54:	df000e04 	addi	fp,sp,56
 1824b58:	e13ffb15 	stw	r4,-20(fp)
 1824b5c:	e17ffc15 	stw	r5,-16(fp)
 1824b60:	e1bffd15 	stw	r6,-12(fp)
 1824b64:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1824b68:	e0bffc17 	ldw	r2,-16(fp)
 1824b6c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 1824b70:	e0bffb17 	ldw	r2,-20(fp)
 1824b74:	10800a17 	ldw	r2,40(r2)
 1824b78:	e0bff915 	stw	r2,-28(fp)
 1824b7c:	e03ffa0d 	sth	zero,-24(fp)
 * converted into the functions return value.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (xSemaphoreHandle sem, alt_u16 timeout)
{
	return xSemaphoreTake(sem, timeout) ? 0 : -1;
 1824b80:	e0bffa0b 	ldhu	r2,-24(fp)
 1824b84:	100b883a 	mov	r5,r2
 1824b88:	e13ff917 	ldw	r4,-28(fp)
 1824b8c:	180df580 	call	180df58 <xQueueSemaphoreTake>

  while (space > 0)
 1824b90:	00004706 	br	1824cb0 <altera_avalon_jtag_uart_read+0x168>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1824b94:	e0bffb17 	ldw	r2,-20(fp)
 1824b98:	10800c17 	ldw	r2,48(r2)
 1824b9c:	e0bff515 	stw	r2,-44(fp)
      out = sp->rx_out;
 1824ba0:	e0bffb17 	ldw	r2,-20(fp)
 1824ba4:	10800d17 	ldw	r2,52(r2)
 1824ba8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1824bac:	e0fff517 	ldw	r3,-44(fp)
 1824bb0:	e0bff617 	ldw	r2,-40(fp)
 1824bb4:	18800536 	bltu	r3,r2,1824bcc <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 1824bb8:	e0fff517 	ldw	r3,-44(fp)
 1824bbc:	e0bff617 	ldw	r2,-40(fp)
 1824bc0:	1885c83a 	sub	r2,r3,r2
 1824bc4:	e0bff315 	stw	r2,-52(fp)
 1824bc8:	00000406 	br	1824bdc <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1824bcc:	00c20004 	movi	r3,2048
 1824bd0:	e0bff617 	ldw	r2,-40(fp)
 1824bd4:	1885c83a 	sub	r2,r3,r2
 1824bd8:	e0bff315 	stw	r2,-52(fp)

      if (n == 0)
 1824bdc:	e0bff317 	ldw	r2,-52(fp)
 1824be0:	10001e26 	beq	r2,zero,1824c5c <altera_avalon_jtag_uart_read+0x114>
        break; /* No more data available */

      if (n > space)
 1824be4:	e0fffd17 	ldw	r3,-12(fp)
 1824be8:	e0bff317 	ldw	r2,-52(fp)
 1824bec:	1880022e 	bgeu	r3,r2,1824bf8 <altera_avalon_jtag_uart_read+0xb0>
        n = space;
 1824bf0:	e0bffd17 	ldw	r2,-12(fp)
 1824bf4:	e0bff315 	stw	r2,-52(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1824bf8:	e0bffb17 	ldw	r2,-20(fp)
 1824bfc:	10c01004 	addi	r3,r2,64
 1824c00:	e0bff617 	ldw	r2,-40(fp)
 1824c04:	1885883a 	add	r2,r3,r2
 1824c08:	e1bff317 	ldw	r6,-52(fp)
 1824c0c:	100b883a 	mov	r5,r2
 1824c10:	e13ff217 	ldw	r4,-56(fp)
 1824c14:	180604c0 	call	180604c <memcpy>
      ptr   += n;
 1824c18:	e0fff217 	ldw	r3,-56(fp)
 1824c1c:	e0bff317 	ldw	r2,-52(fp)
 1824c20:	1885883a 	add	r2,r3,r2
 1824c24:	e0bff215 	stw	r2,-56(fp)
      space -= n;
 1824c28:	e0fffd17 	ldw	r3,-12(fp)
 1824c2c:	e0bff317 	ldw	r2,-52(fp)
 1824c30:	1885c83a 	sub	r2,r3,r2
 1824c34:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1824c38:	e0fff617 	ldw	r3,-40(fp)
 1824c3c:	e0bff317 	ldw	r2,-52(fp)
 1824c40:	1885883a 	add	r2,r3,r2
 1824c44:	10c1ffcc 	andi	r3,r2,2047
 1824c48:	e0bffb17 	ldw	r2,-20(fp)
 1824c4c:	10c00d15 	stw	r3,52(r2)
    }
    while (space > 0);
 1824c50:	e0bffd17 	ldw	r2,-12(fp)
 1824c54:	00bfcf16 	blt	zero,r2,1824b94 <__alt_mem_mem_0+0xff804b94>
 1824c58:	00000106 	br	1824c60 <altera_avalon_jtag_uart_read+0x118>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1824c5c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1824c60:	e0fff217 	ldw	r3,-56(fp)
 1824c64:	e0bffc17 	ldw	r2,-16(fp)
 1824c68:	1880141e 	bne	r3,r2,1824cbc <altera_avalon_jtag_uart_read+0x174>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1824c6c:	e0bffe17 	ldw	r2,-8(fp)
 1824c70:	1090000c 	andi	r2,r2,16384
 1824c74:	1000131e 	bne	r2,zero,1824cc4 <altera_avalon_jtag_uart_read+0x17c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1824c78:	0001883a 	nop
 1824c7c:	e0bffb17 	ldw	r2,-20(fp)
 1824c80:	10c00c17 	ldw	r3,48(r2)
 1824c84:	e0bff517 	ldw	r2,-44(fp)
 1824c88:	1880051e 	bne	r3,r2,1824ca0 <altera_avalon_jtag_uart_read+0x158>
 1824c8c:	e0bffb17 	ldw	r2,-20(fp)
 1824c90:	10c00917 	ldw	r3,36(r2)
 1824c94:	e0bffb17 	ldw	r2,-20(fp)
 1824c98:	10800117 	ldw	r2,4(r2)
 1824c9c:	18bff736 	bltu	r3,r2,1824c7c <__alt_mem_mem_0+0xff804c7c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1824ca0:	e0bffb17 	ldw	r2,-20(fp)
 1824ca4:	10c00c17 	ldw	r3,48(r2)
 1824ca8:	e0bff517 	ldw	r2,-44(fp)
 1824cac:	18800726 	beq	r3,r2,1824ccc <altera_avalon_jtag_uart_read+0x184>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1824cb0:	e0bffd17 	ldw	r2,-12(fp)
 1824cb4:	00bfb716 	blt	zero,r2,1824b94 <__alt_mem_mem_0+0xff804b94>
 1824cb8:	00000506 	br	1824cd0 <altera_avalon_jtag_uart_read+0x188>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1824cbc:	0001883a 	nop
 1824cc0:	00000306 	br	1824cd0 <altera_avalon_jtag_uart_read+0x188>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1824cc4:	0001883a 	nop
 1824cc8:	00000106 	br	1824cd0 <altera_avalon_jtag_uart_read+0x188>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1824ccc:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 1824cd0:	e0bffb17 	ldw	r2,-20(fp)
 1824cd4:	10800a17 	ldw	r2,40(r2)
 1824cd8:	000f883a 	mov	r7,zero
 1824cdc:	000d883a 	mov	r6,zero
 1824ce0:	000b883a 	mov	r5,zero
 1824ce4:	1009883a 	mov	r4,r2
 1824ce8:	180da2c0 	call	180da2c <xQueueGenericSend>

  if (ptr != buffer)
 1824cec:	e0fff217 	ldw	r3,-56(fp)
 1824cf0:	e0bffc17 	ldw	r2,-16(fp)
 1824cf4:	18801826 	beq	r3,r2,1824d58 <altera_avalon_jtag_uart_read+0x210>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1824cf8:	0005303a 	rdctl	r2,status
 1824cfc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1824d00:	e0fff817 	ldw	r3,-32(fp)
 1824d04:	00bfff84 	movi	r2,-2
 1824d08:	1884703a 	and	r2,r3,r2
 1824d0c:	1001703a 	wrctl	status,r2
  
  return context;
 1824d10:	e0bff817 	ldw	r2,-32(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1824d14:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1824d18:	e0bffb17 	ldw	r2,-20(fp)
 1824d1c:	10800817 	ldw	r2,32(r2)
 1824d20:	10c00054 	ori	r3,r2,1
 1824d24:	e0bffb17 	ldw	r2,-20(fp)
 1824d28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1824d2c:	e0bffb17 	ldw	r2,-20(fp)
 1824d30:	10800017 	ldw	r2,0(r2)
 1824d34:	10800104 	addi	r2,r2,4
 1824d38:	1007883a 	mov	r3,r2
 1824d3c:	e0bffb17 	ldw	r2,-20(fp)
 1824d40:	10800817 	ldw	r2,32(r2)
 1824d44:	18800035 	stwio	r2,0(r3)
 1824d48:	e0bff717 	ldw	r2,-36(fp)
 1824d4c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1824d50:	e0bff417 	ldw	r2,-48(fp)
 1824d54:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1824d58:	e0fff217 	ldw	r3,-56(fp)
 1824d5c:	e0bffc17 	ldw	r2,-16(fp)
 1824d60:	18800426 	beq	r3,r2,1824d74 <altera_avalon_jtag_uart_read+0x22c>
    return ptr - buffer;
 1824d64:	e0fff217 	ldw	r3,-56(fp)
 1824d68:	e0bffc17 	ldw	r2,-16(fp)
 1824d6c:	1885c83a 	sub	r2,r3,r2
 1824d70:	00000606 	br	1824d8c <altera_avalon_jtag_uart_read+0x244>
  else if (flags & O_NONBLOCK)
 1824d74:	e0bffe17 	ldw	r2,-8(fp)
 1824d78:	1090000c 	andi	r2,r2,16384
 1824d7c:	10000226 	beq	r2,zero,1824d88 <altera_avalon_jtag_uart_read+0x240>
    return -EWOULDBLOCK;
 1824d80:	00bffd44 	movi	r2,-11
 1824d84:	00000106 	br	1824d8c <altera_avalon_jtag_uart_read+0x244>
  else
    return -EIO;
 1824d88:	00bffec4 	movi	r2,-5
}
 1824d8c:	e037883a 	mov	sp,fp
 1824d90:	dfc00117 	ldw	ra,4(sp)
 1824d94:	df000017 	ldw	fp,0(sp)
 1824d98:	dec00204 	addi	sp,sp,8
 1824d9c:	f800283a 	ret

01824da0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1824da0:	defff004 	addi	sp,sp,-64
 1824da4:	dfc00f15 	stw	ra,60(sp)
 1824da8:	df000e15 	stw	fp,56(sp)
 1824dac:	df000e04 	addi	fp,sp,56
 1824db0:	e13ffb15 	stw	r4,-20(fp)
 1824db4:	e17ffc15 	stw	r5,-16(fp)
 1824db8:	e1bffd15 	stw	r6,-12(fp)
 1824dbc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1824dc0:	e03ff215 	stw	zero,-56(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1824dc4:	e0bffc17 	ldw	r2,-16(fp)
 1824dc8:	e0bff415 	stw	r2,-48(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 1824dcc:	e0bffb17 	ldw	r2,-20(fp)
 1824dd0:	10800b17 	ldw	r2,44(r2)
 1824dd4:	e0bff915 	stw	r2,-28(fp)
 1824dd8:	e03ffa0d 	sth	zero,-24(fp)
 1824ddc:	e0bffa0b 	ldhu	r2,-24(fp)
 1824de0:	100b883a 	mov	r5,r2
 1824de4:	e13ff917 	ldw	r4,-28(fp)
 1824de8:	180df580 	call	180df58 <xQueueSemaphoreTake>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1824dec:	00003706 	br	1824ecc <altera_avalon_jtag_uart_write+0x12c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1824df0:	e0bffb17 	ldw	r2,-20(fp)
 1824df4:	10800e17 	ldw	r2,56(r2)
 1824df8:	e0bff615 	stw	r2,-40(fp)
      out = sp->tx_out;
 1824dfc:	e0bffb17 	ldw	r2,-20(fp)
 1824e00:	10800f17 	ldw	r2,60(r2)
 1824e04:	e0bff215 	stw	r2,-56(fp)

      if (in < out)
 1824e08:	e0fff617 	ldw	r3,-40(fp)
 1824e0c:	e0bff217 	ldw	r2,-56(fp)
 1824e10:	1880062e 	bgeu	r3,r2,1824e2c <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 1824e14:	e0fff217 	ldw	r3,-56(fp)
 1824e18:	e0bff617 	ldw	r2,-40(fp)
 1824e1c:	1885c83a 	sub	r2,r3,r2
 1824e20:	10bfffc4 	addi	r2,r2,-1
 1824e24:	e0bff315 	stw	r2,-52(fp)
 1824e28:	00000b06 	br	1824e58 <altera_avalon_jtag_uart_write+0xb8>
      else if (out > 0)
 1824e2c:	e0bff217 	ldw	r2,-56(fp)
 1824e30:	10000526 	beq	r2,zero,1824e48 <altera_avalon_jtag_uart_write+0xa8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1824e34:	00c20004 	movi	r3,2048
 1824e38:	e0bff617 	ldw	r2,-40(fp)
 1824e3c:	1885c83a 	sub	r2,r3,r2
 1824e40:	e0bff315 	stw	r2,-52(fp)
 1824e44:	00000406 	br	1824e58 <altera_avalon_jtag_uart_write+0xb8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1824e48:	00c1ffc4 	movi	r3,2047
 1824e4c:	e0bff617 	ldw	r2,-40(fp)
 1824e50:	1885c83a 	sub	r2,r3,r2
 1824e54:	e0bff315 	stw	r2,-52(fp)

      if (n == 0)
 1824e58:	e0bff317 	ldw	r2,-52(fp)
 1824e5c:	10001e26 	beq	r2,zero,1824ed8 <altera_avalon_jtag_uart_write+0x138>
        break;

      if (n > count)
 1824e60:	e0fffd17 	ldw	r3,-12(fp)
 1824e64:	e0bff317 	ldw	r2,-52(fp)
 1824e68:	1880022e 	bgeu	r3,r2,1824e74 <altera_avalon_jtag_uart_write+0xd4>
        n = count;
 1824e6c:	e0bffd17 	ldw	r2,-12(fp)
 1824e70:	e0bff315 	stw	r2,-52(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1824e74:	e0bffb17 	ldw	r2,-20(fp)
 1824e78:	10c21004 	addi	r3,r2,2112
 1824e7c:	e0bff617 	ldw	r2,-40(fp)
 1824e80:	1885883a 	add	r2,r3,r2
 1824e84:	e1bff317 	ldw	r6,-52(fp)
 1824e88:	e17ffc17 	ldw	r5,-16(fp)
 1824e8c:	1009883a 	mov	r4,r2
 1824e90:	180604c0 	call	180604c <memcpy>
      ptr   += n;
 1824e94:	e0fffc17 	ldw	r3,-16(fp)
 1824e98:	e0bff317 	ldw	r2,-52(fp)
 1824e9c:	1885883a 	add	r2,r3,r2
 1824ea0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1824ea4:	e0fffd17 	ldw	r3,-12(fp)
 1824ea8:	e0bff317 	ldw	r2,-52(fp)
 1824eac:	1885c83a 	sub	r2,r3,r2
 1824eb0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1824eb4:	e0fff617 	ldw	r3,-40(fp)
 1824eb8:	e0bff317 	ldw	r2,-52(fp)
 1824ebc:	1885883a 	add	r2,r3,r2
 1824ec0:	10c1ffcc 	andi	r3,r2,2047
 1824ec4:	e0bffb17 	ldw	r2,-20(fp)
 1824ec8:	10c00e15 	stw	r3,56(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1824ecc:	e0bffd17 	ldw	r2,-12(fp)
 1824ed0:	00bfc716 	blt	zero,r2,1824df0 <__alt_mem_mem_0+0xff804df0>
 1824ed4:	00000106 	br	1824edc <altera_avalon_jtag_uart_write+0x13c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1824ed8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1824edc:	0005303a 	rdctl	r2,status
 1824ee0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1824ee4:	e0fff817 	ldw	r3,-32(fp)
 1824ee8:	00bfff84 	movi	r2,-2
 1824eec:	1884703a 	and	r2,r3,r2
 1824ef0:	1001703a 	wrctl	status,r2
  
  return context;
 1824ef4:	e0bff817 	ldw	r2,-32(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1824ef8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1824efc:	e0bffb17 	ldw	r2,-20(fp)
 1824f00:	10800817 	ldw	r2,32(r2)
 1824f04:	10c00094 	ori	r3,r2,2
 1824f08:	e0bffb17 	ldw	r2,-20(fp)
 1824f0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1824f10:	e0bffb17 	ldw	r2,-20(fp)
 1824f14:	10800017 	ldw	r2,0(r2)
 1824f18:	10800104 	addi	r2,r2,4
 1824f1c:	1007883a 	mov	r3,r2
 1824f20:	e0bffb17 	ldw	r2,-20(fp)
 1824f24:	10800817 	ldw	r2,32(r2)
 1824f28:	18800035 	stwio	r2,0(r3)
 1824f2c:	e0bff717 	ldw	r2,-36(fp)
 1824f30:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1824f34:	e0bff517 	ldw	r2,-44(fp)
 1824f38:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1824f3c:	e0bffd17 	ldw	r2,-12(fp)
 1824f40:	0080100e 	bge	zero,r2,1824f84 <altera_avalon_jtag_uart_write+0x1e4>
    {
      if (flags & O_NONBLOCK)
 1824f44:	e0bffe17 	ldw	r2,-8(fp)
 1824f48:	1090000c 	andi	r2,r2,16384
 1824f4c:	1000101e 	bne	r2,zero,1824f90 <altera_avalon_jtag_uart_write+0x1f0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1824f50:	0001883a 	nop
 1824f54:	e0bffb17 	ldw	r2,-20(fp)
 1824f58:	10c00f17 	ldw	r3,60(r2)
 1824f5c:	e0bff217 	ldw	r2,-56(fp)
 1824f60:	1880051e 	bne	r3,r2,1824f78 <altera_avalon_jtag_uart_write+0x1d8>
 1824f64:	e0bffb17 	ldw	r2,-20(fp)
 1824f68:	10c00917 	ldw	r3,36(r2)
 1824f6c:	e0bffb17 	ldw	r2,-20(fp)
 1824f70:	10800117 	ldw	r2,4(r2)
 1824f74:	18bff736 	bltu	r3,r2,1824f54 <__alt_mem_mem_0+0xff804f54>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1824f78:	e0bffb17 	ldw	r2,-20(fp)
 1824f7c:	10800917 	ldw	r2,36(r2)
 1824f80:	1000051e 	bne	r2,zero,1824f98 <altera_avalon_jtag_uart_write+0x1f8>
         break;
    }
  }
  while (count > 0);
 1824f84:	e0bffd17 	ldw	r2,-12(fp)
 1824f88:	00bfd016 	blt	zero,r2,1824ecc <__alt_mem_mem_0+0xff804ecc>
 1824f8c:	00000306 	br	1824f9c <altera_avalon_jtag_uart_write+0x1fc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1824f90:	0001883a 	nop
 1824f94:	00000106 	br	1824f9c <altera_avalon_jtag_uart_write+0x1fc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1824f98:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 1824f9c:	e0bffb17 	ldw	r2,-20(fp)
 1824fa0:	10800b17 	ldw	r2,44(r2)
 1824fa4:	000f883a 	mov	r7,zero
 1824fa8:	000d883a 	mov	r6,zero
 1824fac:	000b883a 	mov	r5,zero
 1824fb0:	1009883a 	mov	r4,r2
 1824fb4:	180da2c0 	call	180da2c <xQueueGenericSend>

  if (ptr != start)
 1824fb8:	e0fffc17 	ldw	r3,-16(fp)
 1824fbc:	e0bff417 	ldw	r2,-48(fp)
 1824fc0:	18800426 	beq	r3,r2,1824fd4 <altera_avalon_jtag_uart_write+0x234>
    return ptr - start;
 1824fc4:	e0fffc17 	ldw	r3,-16(fp)
 1824fc8:	e0bff417 	ldw	r2,-48(fp)
 1824fcc:	1885c83a 	sub	r2,r3,r2
 1824fd0:	00000606 	br	1824fec <altera_avalon_jtag_uart_write+0x24c>
  else if (flags & O_NONBLOCK)
 1824fd4:	e0bffe17 	ldw	r2,-8(fp)
 1824fd8:	1090000c 	andi	r2,r2,16384
 1824fdc:	10000226 	beq	r2,zero,1824fe8 <altera_avalon_jtag_uart_write+0x248>
    return -EWOULDBLOCK;
 1824fe0:	00bffd44 	movi	r2,-11
 1824fe4:	00000106 	br	1824fec <altera_avalon_jtag_uart_write+0x24c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1824fe8:	00bffec4 	movi	r2,-5
}
 1824fec:	e037883a 	mov	sp,fp
 1824ff0:	dfc00117 	ldw	ra,4(sp)
 1824ff4:	df000017 	ldw	fp,0(sp)
 1824ff8:	dec00204 	addi	sp,sp,8
 1824ffc:	f800283a 	ret

01825000 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1825000:	defffe04 	addi	sp,sp,-8
 1825004:	dfc00115 	stw	ra,4(sp)
 1825008:	df000015 	stw	fp,0(sp)
 182500c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1825010:	d0a01917 	ldw	r2,-32668(gp)
 1825014:	10000326 	beq	r2,zero,1825024 <alt_get_errno+0x24>
 1825018:	d0a01917 	ldw	r2,-32668(gp)
 182501c:	103ee83a 	callr	r2
 1825020:	00000106 	br	1825028 <alt_get_errno+0x28>
 1825024:	d0a7ce04 	addi	r2,gp,-24776
}
 1825028:	e037883a 	mov	sp,fp
 182502c:	dfc00117 	ldw	ra,4(sp)
 1825030:	df000017 	ldw	fp,0(sp)
 1825034:	dec00204 	addi	sp,sp,8
 1825038:	f800283a 	ret

0182503c <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 182503c:	defffc04 	addi	sp,sp,-16
 1825040:	df000315 	stw	fp,12(sp)
 1825044:	df000304 	addi	fp,sp,12
 1825048:	e13ffe15 	stw	r4,-8(fp)
 182504c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 1825050:	e0bffe17 	ldw	r2,-8(fp)
 1825054:	10800317 	ldw	r2,12(r2)
 1825058:	10800037 	ldwio	r2,0(r2)
 182505c:	1080040c 	andi	r2,r2,16
 1825060:	10000226 	beq	r2,zero,182506c <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
 1825064:	00bffc04 	movi	r2,-16
 1825068:	00003906 	br	1825150 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 182506c:	e0bffe17 	ldw	r2,-8(fp)
 1825070:	10800317 	ldw	r2,12(r2)
 1825074:	10800404 	addi	r2,r2,16
 1825078:	e0fffe17 	ldw	r3,-8(fp)
 182507c:	18c00317 	ldw	r3,12(r3)
 1825080:	18c00404 	addi	r3,r3,16
 1825084:	19000037 	ldwio	r4,0(r3)
 1825088:	00fff7c4 	movi	r3,-33
 182508c:	20c6703a 	and	r3,r4,r3
 1825090:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 1825094:	e0bffe17 	ldw	r2,-8(fp)
 1825098:	10800317 	ldw	r2,12(r2)
 182509c:	00c03fc4 	movi	r3,255
 18250a0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 18250a4:	e0bffe17 	ldw	r2,-8(fp)
 18250a8:	10800317 	ldw	r2,12(r2)
 18250ac:	10800804 	addi	r2,r2,32
 18250b0:	e0ffff17 	ldw	r3,-4(fp)
 18250b4:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 18250b8:	e0bffe17 	ldw	r2,-8(fp)
 18250bc:	10800917 	ldw	r2,36(r2)
 18250c0:	10001126 	beq	r2,zero,1825108 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 18250c4:	e0bffe17 	ldw	r2,-8(fp)
 18250c8:	10800317 	ldw	r2,12(r2)
 18250cc:	10800404 	addi	r2,r2,16
 18250d0:	10800037 	ldwio	r2,0(r2)
 18250d4:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
 18250d8:	e0bffe17 	ldw	r2,-8(fp)
 18250dc:	10c00b17 	ldw	r3,44(r2)
 18250e0:	e0bffd17 	ldw	r2,-12(fp)
 18250e4:	1884b03a 	or	r2,r3,r2
 18250e8:	10801814 	ori	r2,r2,96
 18250ec:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 18250f0:	e0bffe17 	ldw	r2,-8(fp)
 18250f4:	10800317 	ldw	r2,12(r2)
 18250f8:	10800404 	addi	r2,r2,16
 18250fc:	e0fffd17 	ldw	r3,-12(fp)
 1825100:	10c00035 	stwio	r3,0(r2)
 1825104:	00001106 	br	182514c <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 1825108:	e0bffe17 	ldw	r2,-8(fp)
 182510c:	10800317 	ldw	r2,12(r2)
 1825110:	10800404 	addi	r2,r2,16
 1825114:	10800037 	ldwio	r2,0(r2)
 1825118:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 182511c:	e0bffd17 	ldw	r2,-12(fp)
 1825120:	10801814 	ori	r2,r2,96
 1825124:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
 1825128:	e0fffd17 	ldw	r3,-12(fp)
 182512c:	00bffbc4 	movi	r2,-17
 1825130:	1884703a 	and	r2,r3,r2
 1825134:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 1825138:	e0bffe17 	ldw	r2,-8(fp)
 182513c:	10800317 	ldw	r2,12(r2)
 1825140:	10800404 	addi	r2,r2,16
 1825144:	e0fffd17 	ldw	r3,-12(fp)
 1825148:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
 182514c:	0005883a 	mov	r2,zero
}
 1825150:	e037883a 	mov	sp,fp
 1825154:	df000017 	ldw	fp,0(sp)
 1825158:	dec00104 	addi	sp,sp,4
 182515c:	f800283a 	ret

01825160 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 1825160:	defffc04 	addi	sp,sp,-16
 1825164:	df000315 	stw	fp,12(sp)
 1825168:	df000304 	addi	fp,sp,12
 182516c:	e13ffe15 	stw	r4,-8(fp)
 1825170:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 1825174:	0001883a 	nop
 1825178:	e0bffe17 	ldw	r2,-8(fp)
 182517c:	10800317 	ldw	r2,12(r2)
 1825180:	10800037 	ldwio	r2,0(r2)
 1825184:	1080040c 	andi	r2,r2,16
 1825188:	103ffb1e 	bne	r2,zero,1825178 <__alt_mem_mem_0+0xff805178>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 182518c:	e0bffe17 	ldw	r2,-8(fp)
 1825190:	10800317 	ldw	r2,12(r2)
 1825194:	10800404 	addi	r2,r2,16
 1825198:	e0fffe17 	ldw	r3,-8(fp)
 182519c:	18c00317 	ldw	r3,12(r3)
 18251a0:	18c00404 	addi	r3,r3,16
 18251a4:	19000037 	ldwio	r4,0(r3)
 18251a8:	00fff7c4 	movi	r3,-33
 18251ac:	20c6703a 	and	r3,r4,r3
 18251b0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 18251b4:	e0bffe17 	ldw	r2,-8(fp)
 18251b8:	10800317 	ldw	r2,12(r2)
 18251bc:	00c03fc4 	movi	r3,255
 18251c0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 18251c4:	e0bffe17 	ldw	r2,-8(fp)
 18251c8:	10800317 	ldw	r2,12(r2)
 18251cc:	10800804 	addi	r2,r2,32
 18251d0:	e0ffff17 	ldw	r3,-4(fp)
 18251d4:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 18251d8:	e0bffe17 	ldw	r2,-8(fp)
 18251dc:	10800317 	ldw	r2,12(r2)
 18251e0:	10800404 	addi	r2,r2,16
 18251e4:	e0fffe17 	ldw	r3,-8(fp)
 18251e8:	18c00317 	ldw	r3,12(r3)
 18251ec:	18c00404 	addi	r3,r3,16
 18251f0:	18c00037 	ldwio	r3,0(r3)
 18251f4:	18c01814 	ori	r3,r3,96
 18251f8:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 18251fc:	0001883a 	nop
 1825200:	e0bffe17 	ldw	r2,-8(fp)
 1825204:	10800317 	ldw	r2,12(r2)
 1825208:	10800037 	ldwio	r2,0(r2)
 182520c:	1080040c 	andi	r2,r2,16
 1825210:	103ffb1e 	bne	r2,zero,1825200 <__alt_mem_mem_0+0xff805200>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 1825214:	e0bffe17 	ldw	r2,-8(fp)
 1825218:	10800317 	ldw	r2,12(r2)
 182521c:	10800404 	addi	r2,r2,16
 1825220:	e0fffe17 	ldw	r3,-8(fp)
 1825224:	18c00317 	ldw	r3,12(r3)
 1825228:	18c00404 	addi	r3,r3,16
 182522c:	19000037 	ldwio	r4,0(r3)
 1825230:	00fff7c4 	movi	r3,-33
 1825234:	20c6703a 	and	r3,r4,r3
 1825238:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 182523c:	e0bffe17 	ldw	r2,-8(fp)
 1825240:	10800317 	ldw	r2,12(r2)
 1825244:	10800037 	ldwio	r2,0(r2)
 1825248:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 182524c:	e0bffe17 	ldw	r2,-8(fp)
 1825250:	10800317 	ldw	r2,12(r2)
 1825254:	00c03fc4 	movi	r3,255
 1825258:	10c00035 	stwio	r3,0(r2)

  return status;
 182525c:	e0bffd03 	ldbu	r2,-12(fp)
}
 1825260:	e037883a 	mov	sp,fp
 1825264:	df000017 	ldw	fp,0(sp)
 1825268:	dec00104 	addi	sp,sp,4
 182526c:	f800283a 	ret

01825270 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 1825270:	defff404 	addi	sp,sp,-48
 1825274:	dfc00b15 	stw	ra,44(sp)
 1825278:	df000a15 	stw	fp,40(sp)
 182527c:	df000a04 	addi	fp,sp,40
 1825280:	e13ffb15 	stw	r4,-20(fp)
 1825284:	e17ffc15 	stw	r5,-16(fp)
 1825288:	e1bffd15 	stw	r6,-12(fp)
 182528c:	e1fffe15 	stw	r7,-8(fp)
 1825290:	e0800217 	ldw	r2,8(fp)
 1825294:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 1825298:	e0bfff0b 	ldhu	r2,-4(fp)
 182529c:	d8000415 	stw	zero,16(sp)
 18252a0:	d8000315 	stw	zero,12(sp)
 18252a4:	e0c00417 	ldw	r3,16(fp)
 18252a8:	d8c00215 	stw	r3,8(sp)
 18252ac:	e0c00317 	ldw	r3,12(fp)
 18252b0:	d8c00115 	stw	r3,4(sp)
 18252b4:	d8800015 	stw	r2,0(sp)
 18252b8:	e1fffe17 	ldw	r7,-8(fp)
 18252bc:	e1bffd17 	ldw	r6,-12(fp)
 18252c0:	e17ffc17 	ldw	r5,-16(fp)
 18252c4:	e13ffb17 	ldw	r4,-20(fp)
 18252c8:	18252e40 	call	18252e4 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 18252cc:	0001883a 	nop
 18252d0:	e037883a 	mov	sp,fp
 18252d4:	dfc00117 	ldw	ra,4(sp)
 18252d8:	df000017 	ldw	fp,0(sp)
 18252dc:	dec00204 	addi	sp,sp,8
 18252e0:	f800283a 	ret

018252e4 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 18252e4:	defff204 	addi	sp,sp,-56
 18252e8:	dfc00d15 	stw	ra,52(sp)
 18252ec:	df000c15 	stw	fp,48(sp)
 18252f0:	df000c04 	addi	fp,sp,48
 18252f4:	e13ffb15 	stw	r4,-20(fp)
 18252f8:	e17ffc15 	stw	r5,-16(fp)
 18252fc:	e1bffd15 	stw	r6,-12(fp)
 1825300:	e1fffe15 	stw	r7,-8(fp)
 1825304:	e0800217 	ldw	r2,8(fp)
 1825308:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 182530c:	e0bfff0b 	ldhu	r2,-4(fp)
 1825310:	d8000615 	stw	zero,24(sp)
 1825314:	e0c00617 	ldw	r3,24(fp)
 1825318:	d8c00515 	stw	r3,20(sp)
 182531c:	e0c00517 	ldw	r3,20(fp)
 1825320:	d8c00415 	stw	r3,16(sp)
 1825324:	e0c00417 	ldw	r3,16(fp)
 1825328:	d8c00315 	stw	r3,12(sp)
 182532c:	e0c00317 	ldw	r3,12(fp)
 1825330:	d8c00215 	stw	r3,8(sp)
 1825334:	d8000115 	stw	zero,4(sp)
 1825338:	d8800015 	stw	r2,0(sp)
 182533c:	e1fffe17 	ldw	r7,-8(fp)
 1825340:	e1bffd17 	ldw	r6,-12(fp)
 1825344:	e17ffc17 	ldw	r5,-16(fp)
 1825348:	e13ffb17 	ldw	r4,-20(fp)
 182534c:	18258780 	call	1825878 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 1825350:	0001883a 	nop
 1825354:	e037883a 	mov	sp,fp
 1825358:	dfc00117 	ldw	ra,4(sp)
 182535c:	df000017 	ldw	fp,0(sp)
 1825360:	dec00204 	addi	sp,sp,8
 1825364:	f800283a 	ret

01825368 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 1825368:	defff804 	addi	sp,sp,-32
 182536c:	dfc00715 	stw	ra,28(sp)
 1825370:	df000615 	stw	fp,24(sp)
 1825374:	df000604 	addi	fp,sp,24
 1825378:	e13ffc15 	stw	r4,-16(fp)
 182537c:	e17ffd15 	stw	r5,-12(fp)
 1825380:	e1bffe15 	stw	r6,-8(fp)
 1825384:	3805883a 	mov	r2,r7
 1825388:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 182538c:	e0ffff0b 	ldhu	r3,-4(fp)
 1825390:	d8000115 	stw	zero,4(sp)
 1825394:	e0800217 	ldw	r2,8(fp)
 1825398:	d8800015 	stw	r2,0(sp)
 182539c:	180f883a 	mov	r7,r3
 18253a0:	e1bffe17 	ldw	r6,-8(fp)
 18253a4:	e17ffd17 	ldw	r5,-12(fp)
 18253a8:	e13ffc17 	ldw	r4,-16(fp)
 18253ac:	18253c80 	call	18253c8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 18253b0:	0001883a 	nop
 18253b4:	e037883a 	mov	sp,fp
 18253b8:	dfc00117 	ldw	ra,4(sp)
 18253bc:	df000017 	ldw	fp,0(sp)
 18253c0:	dec00204 	addi	sp,sp,8
 18253c4:	f800283a 	ret

018253c8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 18253c8:	defff304 	addi	sp,sp,-52
 18253cc:	dfc00c15 	stw	ra,48(sp)
 18253d0:	df000b15 	stw	fp,44(sp)
 18253d4:	df000b04 	addi	fp,sp,44
 18253d8:	e13ffc15 	stw	r4,-16(fp)
 18253dc:	e17ffd15 	stw	r5,-12(fp)
 18253e0:	e1bffe15 	stw	r6,-8(fp)
 18253e4:	3805883a 	mov	r2,r7
 18253e8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 18253ec:	e0bfff0b 	ldhu	r2,-4(fp)
 18253f0:	d8000615 	stw	zero,24(sp)
 18253f4:	e0c00317 	ldw	r3,12(fp)
 18253f8:	d8c00515 	stw	r3,20(sp)
 18253fc:	d8000415 	stw	zero,16(sp)
 1825400:	e0c00217 	ldw	r3,8(fp)
 1825404:	d8c00315 	stw	r3,12(sp)
 1825408:	d8000215 	stw	zero,8(sp)
 182540c:	d8000115 	stw	zero,4(sp)
 1825410:	d8800015 	stw	r2,0(sp)
 1825414:	e1fffe17 	ldw	r7,-8(fp)
 1825418:	000d883a 	mov	r6,zero
 182541c:	e17ffd17 	ldw	r5,-12(fp)
 1825420:	e13ffc17 	ldw	r4,-16(fp)
 1825424:	18258780 	call	1825878 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 1825428:	0001883a 	nop
 182542c:	e037883a 	mov	sp,fp
 1825430:	dfc00117 	ldw	ra,4(sp)
 1825434:	df000017 	ldw	fp,0(sp)
 1825438:	dec00204 	addi	sp,sp,8
 182543c:	f800283a 	ret

01825440 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 1825440:	defff404 	addi	sp,sp,-48
 1825444:	dfc00b15 	stw	ra,44(sp)
 1825448:	df000a15 	stw	fp,40(sp)
 182544c:	df000a04 	addi	fp,sp,40
 1825450:	e13ffb15 	stw	r4,-20(fp)
 1825454:	e17ffc15 	stw	r5,-16(fp)
 1825458:	e1bffd15 	stw	r6,-12(fp)
 182545c:	3807883a 	mov	r3,r7
 1825460:	e0800517 	ldw	r2,20(fp)
 1825464:	e0fffe0d 	sth	r3,-8(fp)
 1825468:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 182546c:	e0fffe0b 	ldhu	r3,-8(fp)
 1825470:	e0bfff03 	ldbu	r2,-4(fp)
 1825474:	d8800415 	stw	r2,16(sp)
 1825478:	d8000315 	stw	zero,12(sp)
 182547c:	e0800417 	ldw	r2,16(fp)
 1825480:	d8800215 	stw	r2,8(sp)
 1825484:	e0800317 	ldw	r2,12(fp)
 1825488:	d8800115 	stw	r2,4(sp)
 182548c:	e0800217 	ldw	r2,8(fp)
 1825490:	d8800015 	stw	r2,0(sp)
 1825494:	180f883a 	mov	r7,r3
 1825498:	e1bffd17 	ldw	r6,-12(fp)
 182549c:	e17ffc17 	ldw	r5,-16(fp)
 18254a0:	e13ffb17 	ldw	r4,-20(fp)
 18254a4:	18254c00 	call	18254c0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 18254a8:	0001883a 	nop
 18254ac:	e037883a 	mov	sp,fp
 18254b0:	dfc00117 	ldw	ra,4(sp)
 18254b4:	df000017 	ldw	fp,0(sp)
 18254b8:	dec00204 	addi	sp,sp,8
 18254bc:	f800283a 	ret

018254c0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 18254c0:	defff204 	addi	sp,sp,-56
 18254c4:	dfc00d15 	stw	ra,52(sp)
 18254c8:	df000c15 	stw	fp,48(sp)
 18254cc:	df000c04 	addi	fp,sp,48
 18254d0:	e13ffb15 	stw	r4,-20(fp)
 18254d4:	e17ffc15 	stw	r5,-16(fp)
 18254d8:	e1bffd15 	stw	r6,-12(fp)
 18254dc:	3807883a 	mov	r3,r7
 18254e0:	e0800617 	ldw	r2,24(fp)
 18254e4:	e0fffe0d 	sth	r3,-8(fp)
 18254e8:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 18254ec:	e0bffe0b 	ldhu	r2,-8(fp)
 18254f0:	e0ffff03 	ldbu	r3,-4(fp)
 18254f4:	d8c00615 	stw	r3,24(sp)
 18254f8:	d8000515 	stw	zero,20(sp)
 18254fc:	e0c00517 	ldw	r3,20(fp)
 1825500:	d8c00415 	stw	r3,16(sp)
 1825504:	e0c00317 	ldw	r3,12(fp)
 1825508:	d8c00315 	stw	r3,12(sp)
 182550c:	e0c00217 	ldw	r3,8(fp)
 1825510:	d8c00215 	stw	r3,8(sp)
 1825514:	e0c00417 	ldw	r3,16(fp)
 1825518:	d8c00115 	stw	r3,4(sp)
 182551c:	d8800015 	stw	r2,0(sp)
 1825520:	000f883a 	mov	r7,zero
 1825524:	e1bffd17 	ldw	r6,-12(fp)
 1825528:	e17ffc17 	ldw	r5,-16(fp)
 182552c:	e13ffb17 	ldw	r4,-20(fp)
 1825530:	18258780 	call	1825878 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 1825534:	0001883a 	nop
 1825538:	e037883a 	mov	sp,fp
 182553c:	dfc00117 	ldw	ra,4(sp)
 1825540:	df000017 	ldw	fp,0(sp)
 1825544:	dec00204 	addi	sp,sp,8
 1825548:	f800283a 	ret

0182554c <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
 182554c:	defffb04 	addi	sp,sp,-20
 1825550:	df000415 	stw	fp,16(sp)
 1825554:	df000404 	addi	fp,sp,16
 1825558:	e13ffc15 	stw	r4,-16(fp)
 182555c:	e17ffd15 	stw	r5,-12(fp)
 1825560:	e1bffe15 	stw	r6,-8(fp)
 1825564:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
 1825568:	e0bffc17 	ldw	r2,-16(fp)
 182556c:	e0fffd17 	ldw	r3,-12(fp)
 1825570:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
 1825574:	e0bffc17 	ldw	r2,-16(fp)
 1825578:	e0ffff17 	ldw	r3,-4(fp)
 182557c:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
 1825580:	e0bffc17 	ldw	r2,-16(fp)
 1825584:	e0fffe17 	ldw	r3,-8(fp)
 1825588:	10c00b15 	stw	r3,44(r2)
}
 182558c:	0001883a 	nop
 1825590:	e037883a 	mov	sp,fp
 1825594:	df000017 	ldw	fp,0(sp)
 1825598:	dec00104 	addi	sp,sp,4
 182559c:	f800283a 	ret

018255a0 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
 18255a0:	defffd04 	addi	sp,sp,-12
 18255a4:	df000215 	stw	fp,8(sp)
 18255a8:	df000204 	addi	fp,sp,8
 18255ac:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 18255b0:	e0bfff17 	ldw	r2,-4(fp)
 18255b4:	10800317 	ldw	r2,12(r2)
 18255b8:	10800404 	addi	r2,r2,16
 18255bc:	10800037 	ldwio	r2,0(r2)
 18255c0:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 18255c4:	e0bffe17 	ldw	r2,-8(fp)
 18255c8:	10800814 	ori	r2,r2,32
 18255cc:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 18255d0:	e0bfff17 	ldw	r2,-4(fp)
 18255d4:	10800317 	ldw	r2,12(r2)
 18255d8:	10800404 	addi	r2,r2,16
 18255dc:	e0fffe17 	ldw	r3,-8(fp)
 18255e0:	10c00035 	stwio	r3,0(r2)
}
 18255e4:	0001883a 	nop
 18255e8:	e037883a 	mov	sp,fp
 18255ec:	df000017 	ldw	fp,0(sp)
 18255f0:	dec00104 	addi	sp,sp,4
 18255f4:	f800283a 	ret

018255f8 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
 18255f8:	defffd04 	addi	sp,sp,-12
 18255fc:	df000215 	stw	fp,8(sp)
 1825600:	df000204 	addi	fp,sp,8
 1825604:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 1825608:	e0bfff17 	ldw	r2,-4(fp)
 182560c:	10800317 	ldw	r2,12(r2)
 1825610:	10800404 	addi	r2,r2,16
 1825614:	10800037 	ldwio	r2,0(r2)
 1825618:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 182561c:	e0fffe17 	ldw	r3,-8(fp)
 1825620:	00bff7c4 	movi	r2,-33
 1825624:	1884703a 	and	r2,r3,r2
 1825628:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 182562c:	e0bfff17 	ldw	r2,-4(fp)
 1825630:	10800317 	ldw	r2,12(r2)
 1825634:	10800404 	addi	r2,r2,16
 1825638:	e0fffe17 	ldw	r3,-8(fp)
 182563c:	10c00035 	stwio	r3,0(r2)
}
 1825640:	0001883a 	nop
 1825644:	e037883a 	mov	sp,fp
 1825648:	df000017 	ldw	fp,0(sp)
 182564c:	dec00104 	addi	sp,sp,4
 1825650:	f800283a 	ret

01825654 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
 1825654:	defffe04 	addi	sp,sp,-8
 1825658:	df000115 	stw	fp,4(sp)
 182565c:	df000104 	addi	fp,sp,4
 1825660:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 1825664:	e0bfff17 	ldw	r2,-4(fp)
 1825668:	10800784 	addi	r2,r2,30
 182566c:	10800023 	ldbuio	r2,0(r2)
 1825670:	10803fcc 	andi	r2,r2,255
 1825674:	10801fcc 	andi	r2,r2,127
 1825678:	10000226 	beq	r2,zero,1825684 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
 182567c:	00bffec4 	movi	r2,-5
 1825680:	00000906 	br	18256a8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 1825684:	e0bfff17 	ldw	r2,-4(fp)
 1825688:	108007c4 	addi	r2,r2,31
 182568c:	10800023 	ldbuio	r2,0(r2)
 1825690:	10803fcc 	andi	r2,r2,255
 1825694:	1080200c 	andi	r2,r2,128
 1825698:	10000226 	beq	r2,zero,18256a4 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
 182569c:	00bfe244 	movi	r2,-119
 18256a0:	00000106 	br	18256a8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
 18256a4:	0005883a 	mov	r2,zero
}
 18256a8:	e037883a 	mov	sp,fp
 18256ac:	df000017 	ldw	fp,0(sp)
 18256b0:	dec00104 	addi	sp,sp,4
 18256b4:	f800283a 	ret

018256b8 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 18256b8:	defffc04 	addi	sp,sp,-16
 18256bc:	dfc00315 	stw	ra,12(sp)
 18256c0:	df000215 	stw	fp,8(sp)
 18256c4:	df000204 	addi	fp,sp,8
 18256c8:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 18256cc:	d1601704 	addi	r5,gp,-32676
 18256d0:	e13fff17 	ldw	r4,-4(fp)
 18256d4:	18273f40 	call	18273f4 <alt_find_dev>
 18256d8:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
 18256dc:	e0bffe17 	ldw	r2,-8(fp)
 18256e0:	1000041e 	bne	r2,zero,18256f4 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
 18256e4:	18250000 	call	1825000 <alt_get_errno>
 18256e8:	1007883a 	mov	r3,r2
 18256ec:	008004c4 	movi	r2,19
 18256f0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 18256f4:	e0bffe17 	ldw	r2,-8(fp)
}
 18256f8:	e037883a 	mov	sp,fp
 18256fc:	dfc00117 	ldw	ra,4(sp)
 1825700:	df000017 	ldw	fp,0(sp)
 1825704:	dec00204 	addi	sp,sp,8
 1825708:	f800283a 	ret

0182570c <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 182570c:	defff104 	addi	sp,sp,-60
 1825710:	dfc00e15 	stw	ra,56(sp)
 1825714:	df000d15 	stw	fp,52(sp)
 1825718:	df000d04 	addi	fp,sp,52
 182571c:	e13ffa15 	stw	r4,-24(fp)
 1825720:	e17ffb15 	stw	r5,-20(fp)
 1825724:	e1bffc15 	stw	r6,-16(fp)
 1825728:	e1fffd15 	stw	r7,-12(fp)
 182572c:	e0c00217 	ldw	r3,8(fp)
 1825730:	e0800617 	ldw	r2,24(fp)
 1825734:	e0fffe0d 	sth	r3,-8(fp)
 1825738:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 182573c:	e0bffe0b 	ldhu	r2,-8(fp)
 1825740:	e0ffff03 	ldbu	r3,-4(fp)
 1825744:	d8c00615 	stw	r3,24(sp)
 1825748:	d8000515 	stw	zero,20(sp)
 182574c:	d8000415 	stw	zero,16(sp)
 1825750:	e0c00517 	ldw	r3,20(fp)
 1825754:	d8c00315 	stw	r3,12(sp)
 1825758:	e0c00417 	ldw	r3,16(fp)
 182575c:	d8c00215 	stw	r3,8(sp)
 1825760:	e0c00317 	ldw	r3,12(fp)
 1825764:	d8c00115 	stw	r3,4(sp)
 1825768:	d8800015 	stw	r2,0(sp)
 182576c:	e1fffd17 	ldw	r7,-12(fp)
 1825770:	e1bffc17 	ldw	r6,-16(fp)
 1825774:	e17ffb17 	ldw	r5,-20(fp)
 1825778:	e13ffa17 	ldw	r4,-24(fp)
 182577c:	18258780 	call	1825878 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 1825780:	0001883a 	nop
 1825784:	e037883a 	mov	sp,fp
 1825788:	dfc00117 	ldw	ra,4(sp)
 182578c:	df000017 	ldw	fp,0(sp)
 1825790:	dec00204 	addi	sp,sp,8
 1825794:	f800283a 	ret

01825798 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
 1825798:	defffc04 	addi	sp,sp,-16
 182579c:	df000315 	stw	fp,12(sp)
 18257a0:	df000304 	addi	fp,sp,12
 18257a4:	e13ffe15 	stw	r4,-8(fp)
 18257a8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 18257ac:	e0bffe17 	ldw	r2,-8(fp)
 18257b0:	10800317 	ldw	r2,12(r2)
 18257b4:	10800404 	addi	r2,r2,16
 18257b8:	10800037 	ldwio	r2,0(r2)
 18257bc:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 18257c0:	e0fffd17 	ldw	r3,-12(fp)
 18257c4:	00a00434 	movhi	r2,32784
 18257c8:	10bfffc4 	addi	r2,r2,-1
 18257cc:	1884703a 	and	r2,r3,r2
 18257d0:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
 18257d4:	e0bfff17 	ldw	r2,-4(fp)
 18257d8:	1004953a 	slli	r2,r2,20
 18257dc:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
 18257e0:	e0bffd17 	ldw	r2,-12(fp)
 18257e4:	1884b03a 	or	r2,r3,r2
 18257e8:	10800134 	orhi	r2,r2,4
 18257ec:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 18257f0:	e0bffe17 	ldw	r2,-8(fp)
 18257f4:	10800317 	ldw	r2,12(r2)
 18257f8:	10800404 	addi	r2,r2,16
 18257fc:	e0fffd17 	ldw	r3,-12(fp)
 1825800:	10c00035 	stwio	r3,0(r2)
  
  return;
 1825804:	0001883a 	nop
}
 1825808:	e037883a 	mov	sp,fp
 182580c:	df000017 	ldw	fp,0(sp)
 1825810:	dec00104 	addi	sp,sp,4
 1825814:	f800283a 	ret

01825818 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
 1825818:	defffd04 	addi	sp,sp,-12
 182581c:	df000215 	stw	fp,8(sp)
 1825820:	df000204 	addi	fp,sp,8
 1825824:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 1825828:	e0bfff17 	ldw	r2,-4(fp)
 182582c:	10800317 	ldw	r2,12(r2)
 1825830:	10800404 	addi	r2,r2,16
 1825834:	10800037 	ldwio	r2,0(r2)
 1825838:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
 182583c:	e0fffe17 	ldw	r3,-8(fp)
 1825840:	00bfff34 	movhi	r2,65532
 1825844:	10bfffc4 	addi	r2,r2,-1
 1825848:	1884703a 	and	r2,r3,r2
 182584c:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 1825850:	e0bfff17 	ldw	r2,-4(fp)
 1825854:	10800317 	ldw	r2,12(r2)
 1825858:	10800404 	addi	r2,r2,16
 182585c:	e0fffe17 	ldw	r3,-8(fp)
 1825860:	10c00035 	stwio	r3,0(r2)
  
  return;
 1825864:	0001883a 	nop
}
 1825868:	e037883a 	mov	sp,fp
 182586c:	df000017 	ldw	fp,0(sp)
 1825870:	dec00104 	addi	sp,sp,4
 1825874:	f800283a 	ret

01825878 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 1825878:	defff804 	addi	sp,sp,-32
 182587c:	dfc00715 	stw	ra,28(sp)
 1825880:	df000615 	stw	fp,24(sp)
 1825884:	df000604 	addi	fp,sp,24
 1825888:	e13ffa15 	stw	r4,-24(fp)
 182588c:	e17ffb15 	stw	r5,-20(fp)
 1825890:	e1bffc15 	stw	r6,-16(fp)
 1825894:	e1fffd15 	stw	r7,-12(fp)
 1825898:	e0c00217 	ldw	r3,8(fp)
 182589c:	e0800817 	ldw	r2,32(fp)
 18258a0:	e0fffe0d 	sth	r3,-8(fp)
 18258a4:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 18258a8:	e0bffb17 	ldw	r2,-20(fp)
 18258ac:	108007c4 	addi	r2,r2,31
 18258b0:	e0fffb17 	ldw	r3,-20(fp)
 18258b4:	18c007c3 	ldbu	r3,31(r3)
 18258b8:	19003fcc 	andi	r4,r3,255
 18258bc:	00ffdfc4 	movi	r3,-129
 18258c0:	20c6703a 	and	r3,r4,r3
 18258c4:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 18258c8:	e0bffa17 	ldw	r2,-24(fp)
 18258cc:	e0fffc17 	ldw	r3,-16(fp)
 18258d0:	19403fcc 	andi	r5,r3,255
 18258d4:	10c00003 	ldbu	r3,0(r2)
 18258d8:	1806703a 	and	r3,r3,zero
 18258dc:	1809883a 	mov	r4,r3
 18258e0:	2807883a 	mov	r3,r5
 18258e4:	20c6b03a 	or	r3,r4,r3
 18258e8:	10c00005 	stb	r3,0(r2)
 18258ec:	e0fffc17 	ldw	r3,-16(fp)
 18258f0:	1806d23a 	srli	r3,r3,8
 18258f4:	19403fcc 	andi	r5,r3,255
 18258f8:	10c00043 	ldbu	r3,1(r2)
 18258fc:	1806703a 	and	r3,r3,zero
 1825900:	1809883a 	mov	r4,r3
 1825904:	2807883a 	mov	r3,r5
 1825908:	20c6b03a 	or	r3,r4,r3
 182590c:	10c00045 	stb	r3,1(r2)
 1825910:	e0fffc17 	ldw	r3,-16(fp)
 1825914:	1806d43a 	srli	r3,r3,16
 1825918:	19403fcc 	andi	r5,r3,255
 182591c:	10c00083 	ldbu	r3,2(r2)
 1825920:	1806703a 	and	r3,r3,zero
 1825924:	1809883a 	mov	r4,r3
 1825928:	2807883a 	mov	r3,r5
 182592c:	20c6b03a 	or	r3,r4,r3
 1825930:	10c00085 	stb	r3,2(r2)
 1825934:	e0fffc17 	ldw	r3,-16(fp)
 1825938:	180ad63a 	srli	r5,r3,24
 182593c:	10c000c3 	ldbu	r3,3(r2)
 1825940:	1806703a 	and	r3,r3,zero
 1825944:	1809883a 	mov	r4,r3
 1825948:	2807883a 	mov	r3,r5
 182594c:	20c6b03a 	or	r3,r4,r3
 1825950:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
 1825954:	e0bffa17 	ldw	r2,-24(fp)
 1825958:	e0fffd17 	ldw	r3,-12(fp)
 182595c:	19403fcc 	andi	r5,r3,255
 1825960:	10c00203 	ldbu	r3,8(r2)
 1825964:	1806703a 	and	r3,r3,zero
 1825968:	1809883a 	mov	r4,r3
 182596c:	2807883a 	mov	r3,r5
 1825970:	20c6b03a 	or	r3,r4,r3
 1825974:	10c00205 	stb	r3,8(r2)
 1825978:	e0fffd17 	ldw	r3,-12(fp)
 182597c:	1806d23a 	srli	r3,r3,8
 1825980:	19403fcc 	andi	r5,r3,255
 1825984:	10c00243 	ldbu	r3,9(r2)
 1825988:	1806703a 	and	r3,r3,zero
 182598c:	1809883a 	mov	r4,r3
 1825990:	2807883a 	mov	r3,r5
 1825994:	20c6b03a 	or	r3,r4,r3
 1825998:	10c00245 	stb	r3,9(r2)
 182599c:	e0fffd17 	ldw	r3,-12(fp)
 18259a0:	1806d43a 	srli	r3,r3,16
 18259a4:	19403fcc 	andi	r5,r3,255
 18259a8:	10c00283 	ldbu	r3,10(r2)
 18259ac:	1806703a 	and	r3,r3,zero
 18259b0:	1809883a 	mov	r4,r3
 18259b4:	2807883a 	mov	r3,r5
 18259b8:	20c6b03a 	or	r3,r4,r3
 18259bc:	10c00285 	stb	r3,10(r2)
 18259c0:	e0fffd17 	ldw	r3,-12(fp)
 18259c4:	180ad63a 	srli	r5,r3,24
 18259c8:	10c002c3 	ldbu	r3,11(r2)
 18259cc:	1806703a 	and	r3,r3,zero
 18259d0:	1809883a 	mov	r4,r3
 18259d4:	2807883a 	mov	r3,r5
 18259d8:	20c6b03a 	or	r3,r4,r3
 18259dc:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
 18259e0:	e0bffa17 	ldw	r2,-24(fp)
 18259e4:	e0fffb17 	ldw	r3,-20(fp)
 18259e8:	19403fcc 	andi	r5,r3,255
 18259ec:	10c00403 	ldbu	r3,16(r2)
 18259f0:	1806703a 	and	r3,r3,zero
 18259f4:	1809883a 	mov	r4,r3
 18259f8:	2807883a 	mov	r3,r5
 18259fc:	20c6b03a 	or	r3,r4,r3
 1825a00:	10c00405 	stb	r3,16(r2)
 1825a04:	e0fffb17 	ldw	r3,-20(fp)
 1825a08:	1806d23a 	srli	r3,r3,8
 1825a0c:	19403fcc 	andi	r5,r3,255
 1825a10:	10c00443 	ldbu	r3,17(r2)
 1825a14:	1806703a 	and	r3,r3,zero
 1825a18:	1809883a 	mov	r4,r3
 1825a1c:	2807883a 	mov	r3,r5
 1825a20:	20c6b03a 	or	r3,r4,r3
 1825a24:	10c00445 	stb	r3,17(r2)
 1825a28:	e0fffb17 	ldw	r3,-20(fp)
 1825a2c:	1806d43a 	srli	r3,r3,16
 1825a30:	19403fcc 	andi	r5,r3,255
 1825a34:	10c00483 	ldbu	r3,18(r2)
 1825a38:	1806703a 	and	r3,r3,zero
 1825a3c:	1809883a 	mov	r4,r3
 1825a40:	2807883a 	mov	r3,r5
 1825a44:	20c6b03a 	or	r3,r4,r3
 1825a48:	10c00485 	stb	r3,18(r2)
 1825a4c:	e0fffb17 	ldw	r3,-20(fp)
 1825a50:	180ad63a 	srli	r5,r3,24
 1825a54:	10c004c3 	ldbu	r3,19(r2)
 1825a58:	1806703a 	and	r3,r3,zero
 1825a5c:	1809883a 	mov	r4,r3
 1825a60:	2807883a 	mov	r3,r5
 1825a64:	20c6b03a 	or	r3,r4,r3
 1825a68:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
 1825a6c:	e0bffa17 	ldw	r2,-24(fp)
 1825a70:	10c00103 	ldbu	r3,4(r2)
 1825a74:	1806703a 	and	r3,r3,zero
 1825a78:	10c00105 	stb	r3,4(r2)
 1825a7c:	10c00143 	ldbu	r3,5(r2)
 1825a80:	1806703a 	and	r3,r3,zero
 1825a84:	10c00145 	stb	r3,5(r2)
 1825a88:	10c00183 	ldbu	r3,6(r2)
 1825a8c:	1806703a 	and	r3,r3,zero
 1825a90:	10c00185 	stb	r3,6(r2)
 1825a94:	10c001c3 	ldbu	r3,7(r2)
 1825a98:	1806703a 	and	r3,r3,zero
 1825a9c:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
 1825aa0:	e0bffa17 	ldw	r2,-24(fp)
 1825aa4:	10c00303 	ldbu	r3,12(r2)
 1825aa8:	1806703a 	and	r3,r3,zero
 1825aac:	10c00305 	stb	r3,12(r2)
 1825ab0:	10c00343 	ldbu	r3,13(r2)
 1825ab4:	1806703a 	and	r3,r3,zero
 1825ab8:	10c00345 	stb	r3,13(r2)
 1825abc:	10c00383 	ldbu	r3,14(r2)
 1825ac0:	1806703a 	and	r3,r3,zero
 1825ac4:	10c00385 	stb	r3,14(r2)
 1825ac8:	10c003c3 	ldbu	r3,15(r2)
 1825acc:	1806703a 	and	r3,r3,zero
 1825ad0:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
 1825ad4:	e0bffa17 	ldw	r2,-24(fp)
 1825ad8:	10c00503 	ldbu	r3,20(r2)
 1825adc:	1806703a 	and	r3,r3,zero
 1825ae0:	10c00505 	stb	r3,20(r2)
 1825ae4:	10c00543 	ldbu	r3,21(r2)
 1825ae8:	1806703a 	and	r3,r3,zero
 1825aec:	10c00545 	stb	r3,21(r2)
 1825af0:	10c00583 	ldbu	r3,22(r2)
 1825af4:	1806703a 	and	r3,r3,zero
 1825af8:	10c00585 	stb	r3,22(r2)
 1825afc:	10c005c3 	ldbu	r3,23(r2)
 1825b00:	1806703a 	and	r3,r3,zero
 1825b04:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
 1825b08:	e0bffa17 	ldw	r2,-24(fp)
 1825b0c:	e0fffe17 	ldw	r3,-8(fp)
 1825b10:	19403fcc 	andi	r5,r3,255
 1825b14:	10c00603 	ldbu	r3,24(r2)
 1825b18:	1806703a 	and	r3,r3,zero
 1825b1c:	1809883a 	mov	r4,r3
 1825b20:	2807883a 	mov	r3,r5
 1825b24:	20c6b03a 	or	r3,r4,r3
 1825b28:	10c00605 	stb	r3,24(r2)
 1825b2c:	e0fffe17 	ldw	r3,-8(fp)
 1825b30:	1806d23a 	srli	r3,r3,8
 1825b34:	19403fcc 	andi	r5,r3,255
 1825b38:	10c00643 	ldbu	r3,25(r2)
 1825b3c:	1806703a 	and	r3,r3,zero
 1825b40:	1809883a 	mov	r4,r3
 1825b44:	2807883a 	mov	r3,r5
 1825b48:	20c6b03a 	or	r3,r4,r3
 1825b4c:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
 1825b50:	e0bffa17 	ldw	r2,-24(fp)
 1825b54:	10c00703 	ldbu	r3,28(r2)
 1825b58:	1806703a 	and	r3,r3,zero
 1825b5c:	10c00705 	stb	r3,28(r2)
 1825b60:	10c00743 	ldbu	r3,29(r2)
 1825b64:	1806703a 	and	r3,r3,zero
 1825b68:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
 1825b6c:	e0bffa17 	ldw	r2,-24(fp)
 1825b70:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 1825b74:	e0800617 	ldw	r2,24(fp)
 1825b78:	1007883a 	mov	r3,r2
 1825b7c:	e0bffa17 	ldw	r2,-24(fp)
 1825b80:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
 1825b84:	e0800717 	ldw	r2,28(fp)
 1825b88:	1007883a 	mov	r3,r2
 1825b8c:	e0bffa17 	ldw	r2,-24(fp)
 1825b90:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 1825b94:	e0800317 	ldw	r2,12(fp)
 1825b98:	10000226 	beq	r2,zero,1825ba4 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
 1825b9c:	00bfe044 	movi	r2,-127
 1825ba0:	00000106 	br	1825ba8 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
 1825ba4:	00bfe004 	movi	r2,-128
 1825ba8:	e0c00417 	ldw	r3,16(fp)
 1825bac:	18000226 	beq	r3,zero,1825bb8 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
 1825bb0:	00c00084 	movi	r3,2
 1825bb4:	00000106 	br	1825bbc <alt_avalon_sgdma_construct_descriptor_burst+0x344>
 1825bb8:	0007883a 	mov	r3,zero
 1825bbc:	10c4b03a 	or	r2,r2,r3
 1825bc0:	1007883a 	mov	r3,r2
 1825bc4:	e0800517 	ldw	r2,20(fp)
 1825bc8:	10000226 	beq	r2,zero,1825bd4 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
 1825bcc:	00800104 	movi	r2,4
 1825bd0:	00000106 	br	1825bd8 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
 1825bd4:	0005883a 	mov	r2,zero
 1825bd8:	1884b03a 	or	r2,r3,r2
 1825bdc:	1007883a 	mov	r3,r2
 1825be0:	e0bfff03 	ldbu	r2,-4(fp)
 1825be4:	10000426 	beq	r2,zero,1825bf8 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
 1825be8:	e0bfff03 	ldbu	r2,-4(fp)
 1825bec:	108003cc 	andi	r2,r2,15
 1825bf0:	100490fa 	slli	r2,r2,3
 1825bf4:	00000106 	br	1825bfc <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 1825bf8:	0005883a 	mov	r2,zero
 1825bfc:	1884b03a 	or	r2,r3,r2
 1825c00:	1007883a 	mov	r3,r2
 1825c04:	e0bffa17 	ldw	r2,-24(fp)
 1825c08:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
 1825c0c:	01400804 	movi	r5,32
 1825c10:	e13ffa17 	ldw	r4,-24(fp)
 1825c14:	18272cc0 	call	18272cc <alt_dcache_flush>
}
 1825c18:	0001883a 	nop
 1825c1c:	e037883a 	mov	sp,fp
 1825c20:	dfc00117 	ldw	ra,4(sp)
 1825c24:	df000017 	ldw	fp,0(sp)
 1825c28:	dec00204 	addi	sp,sp,8
 1825c2c:	f800283a 	ret

01825c30 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 1825c30:	defff904 	addi	sp,sp,-28
 1825c34:	dfc00615 	stw	ra,24(sp)
 1825c38:	df000515 	stw	fp,20(sp)
 1825c3c:	df000504 	addi	fp,sp,20
 1825c40:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
 1825c44:	e0bfff17 	ldw	r2,-4(fp)
 1825c48:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 1825c4c:	e0bffb17 	ldw	r2,-20(fp)
 1825c50:	10800317 	ldw	r2,12(r2)
 1825c54:	10800404 	addi	r2,r2,16
 1825c58:	e0fffb17 	ldw	r3,-20(fp)
 1825c5c:	18c00317 	ldw	r3,12(r3)
 1825c60:	18c00404 	addi	r3,r3,16
 1825c64:	18c00037 	ldwio	r3,0(r3)
 1825c68:	18e00034 	orhi	r3,r3,32768
 1825c6c:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 1825c70:	e0bffb17 	ldw	r2,-20(fp)
 1825c74:	10800317 	ldw	r2,12(r2)
 1825c78:	10800404 	addi	r2,r2,16
 1825c7c:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 1825c80:	e0bffb17 	ldw	r2,-20(fp)
 1825c84:	10800917 	ldw	r2,36(r2)
 1825c88:	10001226 	beq	r2,zero,1825cd4 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1825c8c:	0005303a 	rdctl	r2,status
 1825c90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1825c94:	e0fffd17 	ldw	r3,-12(fp)
 1825c98:	00bfff84 	movi	r2,-2
 1825c9c:	1884703a 	and	r2,r3,r2
 1825ca0:	1001703a 	wrctl	status,r2
  
  return context;
 1825ca4:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
 1825ca8:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
 1825cac:	e0bffb17 	ldw	r2,-20(fp)
 1825cb0:	10800917 	ldw	r2,36(r2)
 1825cb4:	e0fffb17 	ldw	r3,-20(fp)
 1825cb8:	18c00a17 	ldw	r3,40(r3)
 1825cbc:	1809883a 	mov	r4,r3
 1825cc0:	103ee83a 	callr	r2
 1825cc4:	e0bffc17 	ldw	r2,-16(fp)
 1825cc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1825ccc:	e0bffe17 	ldw	r2,-8(fp)
 1825cd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 1825cd4:	0001883a 	nop
 1825cd8:	e037883a 	mov	sp,fp
 1825cdc:	dfc00117 	ldw	ra,4(sp)
 1825ce0:	df000017 	ldw	fp,0(sp)
 1825ce4:	dec00204 	addi	sp,sp,8
 1825ce8:	f800283a 	ret

01825cec <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 1825cec:	defffa04 	addi	sp,sp,-24
 1825cf0:	dfc00515 	stw	ra,20(sp)
 1825cf4:	df000415 	stw	fp,16(sp)
 1825cf8:	df000404 	addi	fp,sp,16
 1825cfc:	e13ffd15 	stw	r4,-12(fp)
 1825d00:	e17ffe15 	stw	r5,-8(fp)
 1825d04:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 1825d08:	e0bffd17 	ldw	r2,-12(fp)
 1825d0c:	10800317 	ldw	r2,12(r2)
 1825d10:	10800404 	addi	r2,r2,16
 1825d14:	00c00074 	movhi	r3,1
 1825d18:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 1825d1c:	e0bffd17 	ldw	r2,-12(fp)
 1825d20:	10800317 	ldw	r2,12(r2)
 1825d24:	10800404 	addi	r2,r2,16
 1825d28:	00c00074 	movhi	r3,1
 1825d2c:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 1825d30:	e0bffd17 	ldw	r2,-12(fp)
 1825d34:	10800317 	ldw	r2,12(r2)
 1825d38:	10800404 	addi	r2,r2,16
 1825d3c:	0007883a 	mov	r3,zero
 1825d40:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 1825d44:	e0bffd17 	ldw	r2,-12(fp)
 1825d48:	10800317 	ldw	r2,12(r2)
 1825d4c:	00c03fc4 	movi	r3,255
 1825d50:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 1825d54:	d1601704 	addi	r5,gp,-32676
 1825d58:	e13ffd17 	ldw	r4,-12(fp)
 1825d5c:	18273500 	call	1827350 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 1825d60:	d8000015 	stw	zero,0(sp)
 1825d64:	e1fffd17 	ldw	r7,-12(fp)
 1825d68:	018060b4 	movhi	r6,386
 1825d6c:	31970c04 	addi	r6,r6,23600
 1825d70:	e17fff17 	ldw	r5,-4(fp)
 1825d74:	e13ffe17 	ldw	r4,-8(fp)
 1825d78:	18278940 	call	1827894 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 1825d7c:	0001883a 	nop
 1825d80:	e037883a 	mov	sp,fp
 1825d84:	dfc00117 	ldw	ra,4(sp)
 1825d88:	df000017 	ldw	fp,0(sp)
 1825d8c:	dec00204 	addi	sp,sp,8
 1825d90:	f800283a 	ret

01825d94 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1825d94:	defffa04 	addi	sp,sp,-24
 1825d98:	dfc00515 	stw	ra,20(sp)
 1825d9c:	df000415 	stw	fp,16(sp)
 1825da0:	df000404 	addi	fp,sp,16
 1825da4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1825da8:	0007883a 	mov	r3,zero
 1825dac:	e0bfff17 	ldw	r2,-4(fp)
 1825db0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1825db4:	e0bfff17 	ldw	r2,-4(fp)
 1825db8:	10800104 	addi	r2,r2,4
 1825dbc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1825dc0:	0005303a 	rdctl	r2,status
 1825dc4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1825dc8:	e0fffd17 	ldw	r3,-12(fp)
 1825dcc:	00bfff84 	movi	r2,-2
 1825dd0:	1884703a 	and	r2,r3,r2
 1825dd4:	1001703a 	wrctl	status,r2
  
  return context;
 1825dd8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1825ddc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 1825de0:	1827d080 	call	1827d08 <alt_tick>
 1825de4:	e0bffc17 	ldw	r2,-16(fp)
 1825de8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1825dec:	e0bffe17 	ldw	r2,-8(fp)
 1825df0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1825df4:	0001883a 	nop
 1825df8:	e037883a 	mov	sp,fp
 1825dfc:	dfc00117 	ldw	ra,4(sp)
 1825e00:	df000017 	ldw	fp,0(sp)
 1825e04:	dec00204 	addi	sp,sp,8
 1825e08:	f800283a 	ret

01825e0c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1825e0c:	defff804 	addi	sp,sp,-32
 1825e10:	dfc00715 	stw	ra,28(sp)
 1825e14:	df000615 	stw	fp,24(sp)
 1825e18:	df000604 	addi	fp,sp,24
 1825e1c:	e13ffc15 	stw	r4,-16(fp)
 1825e20:	e17ffd15 	stw	r5,-12(fp)
 1825e24:	e1bffe15 	stw	r6,-8(fp)
 1825e28:	e1ffff15 	stw	r7,-4(fp)
 1825e2c:	e0bfff17 	ldw	r2,-4(fp)
 1825e30:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1825e34:	d0a80717 	ldw	r2,-24548(gp)
 1825e38:	1000021e 	bne	r2,zero,1825e44 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 1825e3c:	e0bffb17 	ldw	r2,-20(fp)
 1825e40:	d0a80715 	stw	r2,-24548(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1825e44:	e0bffc17 	ldw	r2,-16(fp)
 1825e48:	10800104 	addi	r2,r2,4
 1825e4c:	00c001c4 	movi	r3,7
 1825e50:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1825e54:	d8000015 	stw	zero,0(sp)
 1825e58:	e1fffc17 	ldw	r7,-16(fp)
 1825e5c:	018060b4 	movhi	r6,386
 1825e60:	31976504 	addi	r6,r6,23956
 1825e64:	e17ffe17 	ldw	r5,-8(fp)
 1825e68:	e13ffd17 	ldw	r4,-12(fp)
 1825e6c:	18278940 	call	1827894 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1825e70:	0001883a 	nop
 1825e74:	e037883a 	mov	sp,fp
 1825e78:	dfc00117 	ldw	ra,4(sp)
 1825e7c:	df000017 	ldw	fp,0(sp)
 1825e80:	dec00204 	addi	sp,sp,8
 1825e84:	f800283a 	ret

01825e88 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1825e88:	defffa04 	addi	sp,sp,-24
 1825e8c:	dfc00515 	stw	ra,20(sp)
 1825e90:	df000415 	stw	fp,16(sp)
 1825e94:	df000404 	addi	fp,sp,16
 1825e98:	e13ffd15 	stw	r4,-12(fp)
 1825e9c:	e17ffe15 	stw	r5,-8(fp)
 1825ea0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 1825ea4:	e0bffd17 	ldw	r2,-12(fp)
 1825ea8:	10800017 	ldw	r2,0(r2)
 1825eac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 1825eb0:	e0bffc17 	ldw	r2,-16(fp)
 1825eb4:	10c00a04 	addi	r3,r2,40
 1825eb8:	e0bffd17 	ldw	r2,-12(fp)
 1825ebc:	10800217 	ldw	r2,8(r2)
 1825ec0:	100f883a 	mov	r7,r2
 1825ec4:	e1bfff17 	ldw	r6,-4(fp)
 1825ec8:	e17ffe17 	ldw	r5,-8(fp)
 1825ecc:	1809883a 	mov	r4,r3
 1825ed0:	182644c0 	call	182644c <altera_avalon_uart_read>
      fd->fd_flags);
}
 1825ed4:	e037883a 	mov	sp,fp
 1825ed8:	dfc00117 	ldw	ra,4(sp)
 1825edc:	df000017 	ldw	fp,0(sp)
 1825ee0:	dec00204 	addi	sp,sp,8
 1825ee4:	f800283a 	ret

01825ee8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1825ee8:	defffa04 	addi	sp,sp,-24
 1825eec:	dfc00515 	stw	ra,20(sp)
 1825ef0:	df000415 	stw	fp,16(sp)
 1825ef4:	df000404 	addi	fp,sp,16
 1825ef8:	e13ffd15 	stw	r4,-12(fp)
 1825efc:	e17ffe15 	stw	r5,-8(fp)
 1825f00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 1825f04:	e0bffd17 	ldw	r2,-12(fp)
 1825f08:	10800017 	ldw	r2,0(r2)
 1825f0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 1825f10:	e0bffc17 	ldw	r2,-16(fp)
 1825f14:	10c00a04 	addi	r3,r2,40
 1825f18:	e0bffd17 	ldw	r2,-12(fp)
 1825f1c:	10800217 	ldw	r2,8(r2)
 1825f20:	100f883a 	mov	r7,r2
 1825f24:	e1bfff17 	ldw	r6,-4(fp)
 1825f28:	e17ffe17 	ldw	r5,-8(fp)
 1825f2c:	1809883a 	mov	r4,r3
 1825f30:	18266a00 	call	18266a0 <altera_avalon_uart_write>
      fd->fd_flags);
}
 1825f34:	e037883a 	mov	sp,fp
 1825f38:	dfc00117 	ldw	ra,4(sp)
 1825f3c:	df000017 	ldw	fp,0(sp)
 1825f40:	dec00204 	addi	sp,sp,8
 1825f44:	f800283a 	ret

01825f48 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 1825f48:	defffc04 	addi	sp,sp,-16
 1825f4c:	dfc00315 	stw	ra,12(sp)
 1825f50:	df000215 	stw	fp,8(sp)
 1825f54:	df000204 	addi	fp,sp,8
 1825f58:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 1825f5c:	e0bfff17 	ldw	r2,-4(fp)
 1825f60:	10800017 	ldw	r2,0(r2)
 1825f64:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 1825f68:	e0bffe17 	ldw	r2,-8(fp)
 1825f6c:	10c00a04 	addi	r3,r2,40
 1825f70:	e0bfff17 	ldw	r2,-4(fp)
 1825f74:	10800217 	ldw	r2,8(r2)
 1825f78:	100b883a 	mov	r5,r2
 1825f7c:	1809883a 	mov	r4,r3
 1825f80:	18263bc0 	call	18263bc <altera_avalon_uart_close>
}
 1825f84:	e037883a 	mov	sp,fp
 1825f88:	dfc00117 	ldw	ra,4(sp)
 1825f8c:	df000017 	ldw	fp,0(sp)
 1825f90:	dec00204 	addi	sp,sp,8
 1825f94:	f800283a 	ret

01825f98 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 1825f98:	defff504 	addi	sp,sp,-44
 1825f9c:	dfc00a15 	stw	ra,40(sp)
 1825fa0:	df000915 	stw	fp,36(sp)
 1825fa4:	df000904 	addi	fp,sp,36
 1825fa8:	e13ffd15 	stw	r4,-12(fp)
 1825fac:	e17ffe15 	stw	r5,-8(fp)
 1825fb0:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 1825fb4:	e0bffd17 	ldw	r2,-12(fp)
 1825fb8:	10800017 	ldw	r2,0(r2)
 1825fbc:	e0bff815 	stw	r2,-32(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 1825fc0:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 1825fc4:	1000301e 	bne	r2,zero,1826088 <altera_avalon_uart_init+0xf0>
 1825fc8:	e0bffd17 	ldw	r2,-12(fp)
 1825fcc:	10800704 	addi	r2,r2,28
 1825fd0:	e0bff915 	stw	r2,-28(fp)
 1825fd4:	00800044 	movi	r2,1
 1825fd8:	e0bffc0d 	sth	r2,-16(fp)
 * alt_sem_create() is a wrapper for xSemaphoreCreateCounting(). The return value is 0 if 
 * the semaphore has been successfully created, or non-zero otherwise.
 */
static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (xSemaphoreHandle* sem, alt_u16 value)
{
	*sem = xSemaphoreCreateCounting(value ? value : 1, value);
 1825fdc:	e0bffc0b 	ldhu	r2,-16(fp)
 1825fe0:	10000226 	beq	r2,zero,1825fec <altera_avalon_uart_init+0x54>
 1825fe4:	e0bffc0b 	ldhu	r2,-16(fp)
 1825fe8:	00000106 	br	1825ff0 <altera_avalon_uart_init+0x58>
 1825fec:	00800044 	movi	r2,1
 1825ff0:	e0fffc0b 	ldhu	r3,-16(fp)
 1825ff4:	180b883a 	mov	r5,r3
 1825ff8:	1009883a 	mov	r4,r2
 1825ffc:	180d9d40 	call	180d9d4 <xQueueCreateCountingSemaphore>
 1826000:	1007883a 	mov	r3,r2
 1826004:	e0bff917 	ldw	r2,-28(fp)
 1826008:	10c00015 	stw	r3,0(r2)
	return *sem ? 0 : -1;
 182600c:	e0bff917 	ldw	r2,-28(fp)
 1826010:	10800017 	ldw	r2,0(r2)
 1826014:	10000226 	beq	r2,zero,1826020 <altera_avalon_uart_init+0x88>
 1826018:	0005883a 	mov	r2,zero
 182601c:	00000106 	br	1826024 <altera_avalon_uart_init+0x8c>
 1826020:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 1826024:	1000181e 	bne	r2,zero,1826088 <altera_avalon_uart_init+0xf0>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
 1826028:	e0bffd17 	ldw	r2,-12(fp)
 182602c:	10800804 	addi	r2,r2,32
 1826030:	e0bffa15 	stw	r2,-24(fp)
 1826034:	00800044 	movi	r2,1
 1826038:	e0bffc8d 	sth	r2,-14(fp)
 * alt_sem_create() is a wrapper for xSemaphoreCreateCounting(). The return value is 0 if 
 * the semaphore has been successfully created, or non-zero otherwise.
 */
static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (xSemaphoreHandle* sem, alt_u16 value)
{
	*sem = xSemaphoreCreateCounting(value ? value : 1, value);
 182603c:	e0bffc8b 	ldhu	r2,-14(fp)
 1826040:	10000226 	beq	r2,zero,182604c <altera_avalon_uart_init+0xb4>
 1826044:	e0bffc8b 	ldhu	r2,-14(fp)
 1826048:	00000106 	br	1826050 <altera_avalon_uart_init+0xb8>
 182604c:	00800044 	movi	r2,1
 1826050:	e0fffc8b 	ldhu	r3,-14(fp)
 1826054:	180b883a 	mov	r5,r3
 1826058:	1009883a 	mov	r4,r2
 182605c:	180d9d40 	call	180d9d4 <xQueueCreateCountingSemaphore>
 1826060:	1007883a 	mov	r3,r2
 1826064:	e0bffa17 	ldw	r2,-24(fp)
 1826068:	10c00015 	stw	r3,0(r2)
	return *sem ? 0 : -1;
 182606c:	e0bffa17 	ldw	r2,-24(fp)
 1826070:	10800017 	ldw	r2,0(r2)
 1826074:	10000226 	beq	r2,zero,1826080 <altera_avalon_uart_init+0xe8>
 1826078:	0005883a 	mov	r2,zero
 182607c:	00000106 	br	1826084 <altera_avalon_uart_init+0xec>
 1826080:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 1826084:	10000226 	beq	r2,zero,1826090 <altera_avalon_uart_init+0xf8>
 1826088:	00800044 	movi	r2,1
 182608c:	00000106 	br	1826094 <altera_avalon_uart_init+0xfc>
 1826090:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 1826094:	e0bffb15 	stw	r2,-20(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 1826098:	e0bffb17 	ldw	r2,-20(fp)
 182609c:	10000f1e 	bne	r2,zero,18260dc <altera_avalon_uart_init+0x144>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 18260a0:	e0bffd17 	ldw	r2,-12(fp)
 18260a4:	00c32004 	movi	r3,3200
 18260a8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 18260ac:	e0bff817 	ldw	r2,-32(fp)
 18260b0:	10800304 	addi	r2,r2,12
 18260b4:	e0fffd17 	ldw	r3,-12(fp)
 18260b8:	18c00117 	ldw	r3,4(r3)
 18260bc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 18260c0:	d8000015 	stw	zero,0(sp)
 18260c4:	e1fffd17 	ldw	r7,-12(fp)
 18260c8:	018060b4 	movhi	r6,386
 18260cc:	31983d04 	addi	r6,r6,24820
 18260d0:	e17fff17 	ldw	r5,-4(fp)
 18260d4:	e13ffe17 	ldw	r4,-8(fp)
 18260d8:	18278940 	call	1827894 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 18260dc:	0001883a 	nop
 18260e0:	e037883a 	mov	sp,fp
 18260e4:	dfc00117 	ldw	ra,4(sp)
 18260e8:	df000017 	ldw	fp,0(sp)
 18260ec:	dec00204 	addi	sp,sp,8
 18260f0:	f800283a 	ret

018260f4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 18260f4:	defffa04 	addi	sp,sp,-24
 18260f8:	dfc00515 	stw	ra,20(sp)
 18260fc:	df000415 	stw	fp,16(sp)
 1826100:	df000404 	addi	fp,sp,16
 1826104:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 1826108:	e0bfff17 	ldw	r2,-4(fp)
 182610c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 1826110:	e0bffc17 	ldw	r2,-16(fp)
 1826114:	10800017 	ldw	r2,0(r2)
 1826118:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 182611c:	e0bffd17 	ldw	r2,-12(fp)
 1826120:	10800204 	addi	r2,r2,8
 1826124:	10800037 	ldwio	r2,0(r2)
 1826128:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 182612c:	e0bffd17 	ldw	r2,-12(fp)
 1826130:	10800204 	addi	r2,r2,8
 1826134:	0007883a 	mov	r3,zero
 1826138:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 182613c:	e0bffd17 	ldw	r2,-12(fp)
 1826140:	10800204 	addi	r2,r2,8
 1826144:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 1826148:	e0bffe17 	ldw	r2,-8(fp)
 182614c:	1080200c 	andi	r2,r2,128
 1826150:	10000326 	beq	r2,zero,1826160 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 1826154:	e17ffe17 	ldw	r5,-8(fp)
 1826158:	e13ffc17 	ldw	r4,-16(fp)
 182615c:	18261900 	call	1826190 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 1826160:	e0bffe17 	ldw	r2,-8(fp)
 1826164:	1081100c 	andi	r2,r2,1088
 1826168:	10000326 	beq	r2,zero,1826178 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 182616c:	e17ffe17 	ldw	r5,-8(fp)
 1826170:	e13ffc17 	ldw	r4,-16(fp)
 1826174:	18262740 	call	1826274 <altera_avalon_uart_txirq>
  }
  

}
 1826178:	0001883a 	nop
 182617c:	e037883a 	mov	sp,fp
 1826180:	dfc00117 	ldw	ra,4(sp)
 1826184:	df000017 	ldw	fp,0(sp)
 1826188:	dec00204 	addi	sp,sp,8
 182618c:	f800283a 	ret

01826190 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 1826190:	defffc04 	addi	sp,sp,-16
 1826194:	df000315 	stw	fp,12(sp)
 1826198:	df000304 	addi	fp,sp,12
 182619c:	e13ffe15 	stw	r4,-8(fp)
 18261a0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 18261a4:	e0bfff17 	ldw	r2,-4(fp)
 18261a8:	108000cc 	andi	r2,r2,3
 18261ac:	10002c1e 	bne	r2,zero,1826260 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 18261b0:	e0bffe17 	ldw	r2,-8(fp)
 18261b4:	10800317 	ldw	r2,12(r2)
 18261b8:	e0bffe17 	ldw	r2,-8(fp)
 18261bc:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 18261c0:	e0bffe17 	ldw	r2,-8(fp)
 18261c4:	10800317 	ldw	r2,12(r2)
 18261c8:	10800044 	addi	r2,r2,1
 18261cc:	10800fcc 	andi	r2,r2,63
 18261d0:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 18261d4:	e0bffe17 	ldw	r2,-8(fp)
 18261d8:	10800317 	ldw	r2,12(r2)
 18261dc:	e0fffe17 	ldw	r3,-8(fp)
 18261e0:	18c00017 	ldw	r3,0(r3)
 18261e4:	18c00037 	ldwio	r3,0(r3)
 18261e8:	1809883a 	mov	r4,r3
 18261ec:	e0fffe17 	ldw	r3,-8(fp)
 18261f0:	1885883a 	add	r2,r3,r2
 18261f4:	10800904 	addi	r2,r2,36
 18261f8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 18261fc:	e0bffe17 	ldw	r2,-8(fp)
 1826200:	e0fffd17 	ldw	r3,-12(fp)
 1826204:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 1826208:	e0bffe17 	ldw	r2,-8(fp)
 182620c:	10800317 	ldw	r2,12(r2)
 1826210:	10800044 	addi	r2,r2,1
 1826214:	10800fcc 	andi	r2,r2,63
 1826218:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 182621c:	e0bffe17 	ldw	r2,-8(fp)
 1826220:	10c00217 	ldw	r3,8(r2)
 1826224:	e0bffd17 	ldw	r2,-12(fp)
 1826228:	18800e1e 	bne	r3,r2,1826264 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 182622c:	e0bffe17 	ldw	r2,-8(fp)
 1826230:	10c00117 	ldw	r3,4(r2)
 1826234:	00bfdfc4 	movi	r2,-129
 1826238:	1886703a 	and	r3,r3,r2
 182623c:	e0bffe17 	ldw	r2,-8(fp)
 1826240:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 1826244:	e0bffe17 	ldw	r2,-8(fp)
 1826248:	10800017 	ldw	r2,0(r2)
 182624c:	10800304 	addi	r2,r2,12
 1826250:	e0fffe17 	ldw	r3,-8(fp)
 1826254:	18c00117 	ldw	r3,4(r3)
 1826258:	10c00035 	stwio	r3,0(r2)
 182625c:	00000106 	br	1826264 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 1826260:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 1826264:	e037883a 	mov	sp,fp
 1826268:	df000017 	ldw	fp,0(sp)
 182626c:	dec00104 	addi	sp,sp,4
 1826270:	f800283a 	ret

01826274 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 1826274:	defffb04 	addi	sp,sp,-20
 1826278:	df000415 	stw	fp,16(sp)
 182627c:	df000404 	addi	fp,sp,16
 1826280:	e13ffc15 	stw	r4,-16(fp)
 1826284:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 1826288:	e0bffc17 	ldw	r2,-16(fp)
 182628c:	10c00417 	ldw	r3,16(r2)
 1826290:	e0bffc17 	ldw	r2,-16(fp)
 1826294:	10800517 	ldw	r2,20(r2)
 1826298:	18803226 	beq	r3,r2,1826364 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 182629c:	e0bffc17 	ldw	r2,-16(fp)
 18262a0:	10800617 	ldw	r2,24(r2)
 18262a4:	1080008c 	andi	r2,r2,2
 18262a8:	10000326 	beq	r2,zero,18262b8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 18262ac:	e0bffd17 	ldw	r2,-12(fp)
 18262b0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 18262b4:	10001d26 	beq	r2,zero,182632c <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 18262b8:	e0bffc17 	ldw	r2,-16(fp)
 18262bc:	10800417 	ldw	r2,16(r2)
 18262c0:	e0bffc17 	ldw	r2,-16(fp)
 18262c4:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 18262c8:	e0bffc17 	ldw	r2,-16(fp)
 18262cc:	10800017 	ldw	r2,0(r2)
 18262d0:	10800104 	addi	r2,r2,4
 18262d4:	e0fffc17 	ldw	r3,-16(fp)
 18262d8:	18c00417 	ldw	r3,16(r3)
 18262dc:	e13ffc17 	ldw	r4,-16(fp)
 18262e0:	20c7883a 	add	r3,r4,r3
 18262e4:	18c01904 	addi	r3,r3,100
 18262e8:	18c00003 	ldbu	r3,0(r3)
 18262ec:	18c03fcc 	andi	r3,r3,255
 18262f0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 18262f4:	e0bffc17 	ldw	r2,-16(fp)
 18262f8:	10800417 	ldw	r2,16(r2)
 18262fc:	10800044 	addi	r2,r2,1
 1826300:	e0fffc17 	ldw	r3,-16(fp)
 1826304:	18800415 	stw	r2,16(r3)
 1826308:	10c00fcc 	andi	r3,r2,63
 182630c:	e0bffc17 	ldw	r2,-16(fp)
 1826310:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 1826314:	e0bffc17 	ldw	r2,-16(fp)
 1826318:	10800117 	ldw	r2,4(r2)
 182631c:	10c01014 	ori	r3,r2,64
 1826320:	e0bffc17 	ldw	r2,-16(fp)
 1826324:	10c00115 	stw	r3,4(r2)
 1826328:	00000e06 	br	1826364 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 182632c:	e0bffc17 	ldw	r2,-16(fp)
 1826330:	10800017 	ldw	r2,0(r2)
 1826334:	10800204 	addi	r2,r2,8
 1826338:	10800037 	ldwio	r2,0(r2)
 182633c:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 1826340:	e0bffd17 	ldw	r2,-12(fp)
 1826344:	1082000c 	andi	r2,r2,2048
 1826348:	1000061e 	bne	r2,zero,1826364 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 182634c:	e0bffc17 	ldw	r2,-16(fp)
 1826350:	10c00117 	ldw	r3,4(r2)
 1826354:	00bfefc4 	movi	r2,-65
 1826358:	1886703a 	and	r3,r3,r2
 182635c:	e0bffc17 	ldw	r2,-16(fp)
 1826360:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 1826364:	e0bffc17 	ldw	r2,-16(fp)
 1826368:	10c00417 	ldw	r3,16(r2)
 182636c:	e0bffc17 	ldw	r2,-16(fp)
 1826370:	10800517 	ldw	r2,20(r2)
 1826374:	1880061e 	bne	r3,r2,1826390 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 1826378:	e0bffc17 	ldw	r2,-16(fp)
 182637c:	10c00117 	ldw	r3,4(r2)
 1826380:	00beefc4 	movi	r2,-1089
 1826384:	1886703a 	and	r3,r3,r2
 1826388:	e0bffc17 	ldw	r2,-16(fp)
 182638c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 1826390:	e0bffc17 	ldw	r2,-16(fp)
 1826394:	10800017 	ldw	r2,0(r2)
 1826398:	10800304 	addi	r2,r2,12
 182639c:	e0fffc17 	ldw	r3,-16(fp)
 18263a0:	18c00117 	ldw	r3,4(r3)
 18263a4:	10c00035 	stwio	r3,0(r2)
}
 18263a8:	0001883a 	nop
 18263ac:	e037883a 	mov	sp,fp
 18263b0:	df000017 	ldw	fp,0(sp)
 18263b4:	dec00104 	addi	sp,sp,4
 18263b8:	f800283a 	ret

018263bc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 18263bc:	defffd04 	addi	sp,sp,-12
 18263c0:	df000215 	stw	fp,8(sp)
 18263c4:	df000204 	addi	fp,sp,8
 18263c8:	e13ffe15 	stw	r4,-8(fp)
 18263cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 18263d0:	00000506 	br	18263e8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 18263d4:	e0bfff17 	ldw	r2,-4(fp)
 18263d8:	1090000c 	andi	r2,r2,16384
 18263dc:	10000226 	beq	r2,zero,18263e8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 18263e0:	00bffd44 	movi	r2,-11
 18263e4:	00000606 	br	1826400 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 18263e8:	e0bffe17 	ldw	r2,-8(fp)
 18263ec:	10c00417 	ldw	r3,16(r2)
 18263f0:	e0bffe17 	ldw	r2,-8(fp)
 18263f4:	10800517 	ldw	r2,20(r2)
 18263f8:	18bff61e 	bne	r3,r2,18263d4 <__alt_mem_mem_0+0xff8063d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 18263fc:	0005883a 	mov	r2,zero
}
 1826400:	e037883a 	mov	sp,fp
 1826404:	df000017 	ldw	fp,0(sp)
 1826408:	dec00104 	addi	sp,sp,4
 182640c:	f800283a 	ret

01826410 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1826410:	defffe04 	addi	sp,sp,-8
 1826414:	dfc00115 	stw	ra,4(sp)
 1826418:	df000015 	stw	fp,0(sp)
 182641c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1826420:	d0a01917 	ldw	r2,-32668(gp)
 1826424:	10000326 	beq	r2,zero,1826434 <alt_get_errno+0x24>
 1826428:	d0a01917 	ldw	r2,-32668(gp)
 182642c:	103ee83a 	callr	r2
 1826430:	00000106 	br	1826438 <alt_get_errno+0x28>
 1826434:	d0a7ce04 	addi	r2,gp,-24776
}
 1826438:	e037883a 	mov	sp,fp
 182643c:	dfc00117 	ldw	ra,4(sp)
 1826440:	df000017 	ldw	fp,0(sp)
 1826444:	dec00204 	addi	sp,sp,8
 1826448:	f800283a 	ret

0182644c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 182644c:	deffef04 	addi	sp,sp,-68
 1826450:	dfc01015 	stw	ra,64(sp)
 1826454:	df000f15 	stw	fp,60(sp)
 1826458:	df000f04 	addi	fp,sp,60
 182645c:	e13ffb15 	stw	r4,-20(fp)
 1826460:	e17ffc15 	stw	r5,-16(fp)
 1826464:	e1bffd15 	stw	r6,-12(fp)
 1826468:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 182646c:	e03ff105 	stb	zero,-60(fp)
  int             count = 0;
 1826470:	e03ff215 	stw	zero,-56(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 1826474:	e0bffe17 	ldw	r2,-8(fp)
 1826478:	1090000c 	andi	r2,r2,16384
 182647c:	1005003a 	cmpeq	r2,r2,zero
 1826480:	10803fcc 	andi	r2,r2,255
 1826484:	e0bff315 	stw	r2,-52(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
 1826488:	e0bffb17 	ldw	r2,-20(fp)
 182648c:	10800717 	ldw	r2,28(r2)
 1826490:	e0bff915 	stw	r2,-28(fp)
 1826494:	e03ffa0d 	sth	zero,-24(fp)
 * converted into the functions return value.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (xSemaphoreHandle sem, alt_u16 timeout)
{
	return xSemaphoreTake(sem, timeout) ? 0 : -1;
 1826498:	e0bffa0b 	ldhu	r2,-24(fp)
 182649c:	100b883a 	mov	r5,r2
 18264a0:	e13ff917 	ldw	r4,-28(fp)
 18264a4:	180df580 	call	180df58 <xQueueSemaphoreTake>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 18264a8:	00001306 	br	18264f8 <altera_avalon_uart_read+0xac>
    {
      count++;
 18264ac:	e0bff217 	ldw	r2,-56(fp)
 18264b0:	10800044 	addi	r2,r2,1
 18264b4:	e0bff215 	stw	r2,-56(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 18264b8:	e0bffc17 	ldw	r2,-16(fp)
 18264bc:	10c00044 	addi	r3,r2,1
 18264c0:	e0fffc15 	stw	r3,-16(fp)
 18264c4:	e0fffb17 	ldw	r3,-20(fp)
 18264c8:	18c00217 	ldw	r3,8(r3)
 18264cc:	e13ffb17 	ldw	r4,-20(fp)
 18264d0:	20c7883a 	add	r3,r4,r3
 18264d4:	18c00904 	addi	r3,r3,36
 18264d8:	18c00003 	ldbu	r3,0(r3)
 18264dc:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 18264e0:	e0bffb17 	ldw	r2,-20(fp)
 18264e4:	10800217 	ldw	r2,8(r2)
 18264e8:	10800044 	addi	r2,r2,1
 18264ec:	10c00fcc 	andi	r3,r2,63
 18264f0:	e0bffb17 	ldw	r2,-20(fp)
 18264f4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 18264f8:	e0fff217 	ldw	r3,-56(fp)
 18264fc:	e0bffd17 	ldw	r2,-12(fp)
 1826500:	1880050e 	bge	r3,r2,1826518 <altera_avalon_uart_read+0xcc>
 1826504:	e0bffb17 	ldw	r2,-20(fp)
 1826508:	10c00217 	ldw	r3,8(r2)
 182650c:	e0bffb17 	ldw	r2,-20(fp)
 1826510:	10800317 	ldw	r2,12(r2)
 1826514:	18bfe51e 	bne	r3,r2,18264ac <__alt_mem_mem_0+0xff8064ac>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 1826518:	e0bff217 	ldw	r2,-56(fp)
 182651c:	1000251e 	bne	r2,zero,18265b4 <altera_avalon_uart_read+0x168>
 1826520:	e0bffb17 	ldw	r2,-20(fp)
 1826524:	10c00217 	ldw	r3,8(r2)
 1826528:	e0bffb17 	ldw	r2,-20(fp)
 182652c:	10800317 	ldw	r2,12(r2)
 1826530:	1880201e 	bne	r3,r2,18265b4 <altera_avalon_uart_read+0x168>
    {
      if (!block)
 1826534:	e0bff317 	ldw	r2,-52(fp)
 1826538:	1000071e 	bne	r2,zero,1826558 <altera_avalon_uart_read+0x10c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 182653c:	18264100 	call	1826410 <alt_get_errno>
 1826540:	1007883a 	mov	r3,r2
 1826544:	008002c4 	movi	r2,11
 1826548:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 182654c:	00800044 	movi	r2,1
 1826550:	e0bff105 	stb	r2,-60(fp)
        break;
 1826554:	00001b06 	br	18265c4 <altera_avalon_uart_read+0x178>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1826558:	0005303a 	rdctl	r2,status
 182655c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1826560:	e0fff617 	ldw	r3,-40(fp)
 1826564:	00bfff84 	movi	r2,-2
 1826568:	1884703a 	and	r2,r3,r2
 182656c:	1001703a 	wrctl	status,r2
  
  return context;
 1826570:	e0bff617 	ldw	r2,-40(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 1826574:	e0bff515 	stw	r2,-44(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 1826578:	e0bffb17 	ldw	r2,-20(fp)
 182657c:	10800117 	ldw	r2,4(r2)
 1826580:	10c02014 	ori	r3,r2,128
 1826584:	e0bffb17 	ldw	r2,-20(fp)
 1826588:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 182658c:	e0bffb17 	ldw	r2,-20(fp)
 1826590:	10800017 	ldw	r2,0(r2)
 1826594:	10800304 	addi	r2,r2,12
 1826598:	e0fffb17 	ldw	r3,-20(fp)
 182659c:	18c00117 	ldw	r3,4(r3)
 18265a0:	10c00035 	stwio	r3,0(r2)
 18265a4:	e0bff517 	ldw	r2,-44(fp)
 18265a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 18265ac:	e0bff717 	ldw	r2,-36(fp)
 18265b0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 18265b4:	e0bff217 	ldw	r2,-56(fp)
 18265b8:	1000021e 	bne	r2,zero,18265c4 <altera_avalon_uart_read+0x178>
 18265bc:	e0bffd17 	ldw	r2,-12(fp)
 18265c0:	103fcd1e 	bne	r2,zero,18264f8 <__alt_mem_mem_0+0xff8064f8>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 18265c4:	e0bffb17 	ldw	r2,-20(fp)
 18265c8:	10800717 	ldw	r2,28(r2)
 18265cc:	000f883a 	mov	r7,zero
 18265d0:	000d883a 	mov	r6,zero
 18265d4:	000b883a 	mov	r5,zero
 18265d8:	1009883a 	mov	r4,r2
 18265dc:	180da2c0 	call	180da2c <xQueueGenericSend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 18265e0:	0005303a 	rdctl	r2,status
 18265e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 18265e8:	e0fff817 	ldw	r3,-32(fp)
 18265ec:	00bfff84 	movi	r2,-2
 18265f0:	1884703a 	and	r2,r3,r2
 18265f4:	1001703a 	wrctl	status,r2
  
  return context;
 18265f8:	e0bff817 	ldw	r2,-32(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 18265fc:	e0bff515 	stw	r2,-44(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 1826600:	e0bffb17 	ldw	r2,-20(fp)
 1826604:	10800117 	ldw	r2,4(r2)
 1826608:	10c02014 	ori	r3,r2,128
 182660c:	e0bffb17 	ldw	r2,-20(fp)
 1826610:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 1826614:	e0bffb17 	ldw	r2,-20(fp)
 1826618:	10800017 	ldw	r2,0(r2)
 182661c:	10800304 	addi	r2,r2,12
 1826620:	e0fffb17 	ldw	r3,-20(fp)
 1826624:	18c00117 	ldw	r3,4(r3)
 1826628:	10c00035 	stwio	r3,0(r2)
 182662c:	e0bff517 	ldw	r2,-44(fp)
 1826630:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1826634:	e0bff417 	ldw	r2,-48(fp)
 1826638:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 182663c:	e0bff103 	ldbu	r2,-60(fp)
 1826640:	10000226 	beq	r2,zero,182664c <altera_avalon_uart_read+0x200>
    return -EWOULDBLOCK;
 1826644:	00bffd44 	movi	r2,-11
 1826648:	00000106 	br	1826650 <altera_avalon_uart_read+0x204>
  }
  else {
    return count;
 182664c:	e0bff217 	ldw	r2,-56(fp)
  }
}
 1826650:	e037883a 	mov	sp,fp
 1826654:	dfc00117 	ldw	ra,4(sp)
 1826658:	df000017 	ldw	fp,0(sp)
 182665c:	dec00204 	addi	sp,sp,8
 1826660:	f800283a 	ret

01826664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1826664:	defffe04 	addi	sp,sp,-8
 1826668:	dfc00115 	stw	ra,4(sp)
 182666c:	df000015 	stw	fp,0(sp)
 1826670:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1826674:	d0a01917 	ldw	r2,-32668(gp)
 1826678:	10000326 	beq	r2,zero,1826688 <alt_get_errno+0x24>
 182667c:	d0a01917 	ldw	r2,-32668(gp)
 1826680:	103ee83a 	callr	r2
 1826684:	00000106 	br	182668c <alt_get_errno+0x28>
 1826688:	d0a7ce04 	addi	r2,gp,-24776
}
 182668c:	e037883a 	mov	sp,fp
 1826690:	dfc00117 	ldw	ra,4(sp)
 1826694:	df000017 	ldw	fp,0(sp)
 1826698:	dec00204 	addi	sp,sp,8
 182669c:	f800283a 	ret

018266a0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 18266a0:	deffef04 	addi	sp,sp,-68
 18266a4:	dfc01015 	stw	ra,64(sp)
 18266a8:	df000f15 	stw	fp,60(sp)
 18266ac:	df000f04 	addi	fp,sp,60
 18266b0:	e13ffb15 	stw	r4,-20(fp)
 18266b4:	e17ffc15 	stw	r5,-16(fp)
 18266b8:	e1bffd15 	stw	r6,-12(fp)
 18266bc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 18266c0:	e0bffd17 	ldw	r2,-12(fp)
 18266c4:	e0bff115 	stw	r2,-60(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 18266c8:	e0bffe17 	ldw	r2,-8(fp)
 18266cc:	1090000c 	andi	r2,r2,16384
 18266d0:	e0bff215 	stw	r2,-56(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
 18266d4:	e0bffb17 	ldw	r2,-20(fp)
 18266d8:	10800817 	ldw	r2,32(r2)
 18266dc:	e0bff915 	stw	r2,-28(fp)
 18266e0:	e03ffa0d 	sth	zero,-24(fp)
 18266e4:	e0bffa0b 	ldhu	r2,-24(fp)
 18266e8:	100b883a 	mov	r5,r2
 18266ec:	e13ff917 	ldw	r4,-28(fp)
 18266f0:	180df580 	call	180df58 <xQueueSemaphoreTake>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 18266f4:	00003c06 	br	18267e8 <altera_avalon_uart_write+0x148>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 18266f8:	e0bffb17 	ldw	r2,-20(fp)
 18266fc:	10800517 	ldw	r2,20(r2)
 1826700:	10800044 	addi	r2,r2,1
 1826704:	10800fcc 	andi	r2,r2,63
 1826708:	e0bff415 	stw	r2,-48(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 182670c:	e0bffb17 	ldw	r2,-20(fp)
 1826710:	10c00417 	ldw	r3,16(r2)
 1826714:	e0bff417 	ldw	r2,-48(fp)
 1826718:	1880221e 	bne	r3,r2,18267a4 <altera_avalon_uart_write+0x104>
    {
      if (no_block)
 182671c:	e0bff217 	ldw	r2,-56(fp)
 1826720:	10000526 	beq	r2,zero,1826738 <altera_avalon_uart_write+0x98>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 1826724:	18266640 	call	1826664 <alt_get_errno>
 1826728:	1007883a 	mov	r3,r2
 182672c:	008002c4 	movi	r2,11
 1826730:	18800015 	stw	r2,0(r3)
        break;
 1826734:	00002e06 	br	18267f0 <altera_avalon_uart_write+0x150>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1826738:	0005303a 	rdctl	r2,status
 182673c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1826740:	e0fff617 	ldw	r3,-40(fp)
 1826744:	00bfff84 	movi	r2,-2
 1826748:	1884703a 	and	r2,r3,r2
 182674c:	1001703a 	wrctl	status,r2
  
  return context;
 1826750:	e0bff617 	ldw	r2,-40(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 1826754:	e0bff515 	stw	r2,-44(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 1826758:	e0bffb17 	ldw	r2,-20(fp)
 182675c:	10800117 	ldw	r2,4(r2)
 1826760:	10c11014 	ori	r3,r2,1088
 1826764:	e0bffb17 	ldw	r2,-20(fp)
 1826768:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 182676c:	e0bffb17 	ldw	r2,-20(fp)
 1826770:	10800017 	ldw	r2,0(r2)
 1826774:	10800304 	addi	r2,r2,12
 1826778:	e0fffb17 	ldw	r3,-20(fp)
 182677c:	18c00117 	ldw	r3,4(r3)
 1826780:	10c00035 	stwio	r3,0(r2)
 1826784:	e0bff517 	ldw	r2,-44(fp)
 1826788:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182678c:	e0bff317 	ldw	r2,-52(fp)
 1826790:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 1826794:	e0bffb17 	ldw	r2,-20(fp)
 1826798:	10c00417 	ldw	r3,16(r2)
 182679c:	e0bff417 	ldw	r2,-48(fp)
 18267a0:	18bffc26 	beq	r3,r2,1826794 <__alt_mem_mem_0+0xff806794>
      }
    }

    count--;
 18267a4:	e0bff117 	ldw	r2,-60(fp)
 18267a8:	10bfffc4 	addi	r2,r2,-1
 18267ac:	e0bff115 	stw	r2,-60(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 18267b0:	e0bffb17 	ldw	r2,-20(fp)
 18267b4:	10c00517 	ldw	r3,20(r2)
 18267b8:	e0bffc17 	ldw	r2,-16(fp)
 18267bc:	11000044 	addi	r4,r2,1
 18267c0:	e13ffc15 	stw	r4,-16(fp)
 18267c4:	10800003 	ldbu	r2,0(r2)
 18267c8:	1009883a 	mov	r4,r2
 18267cc:	e0bffb17 	ldw	r2,-20(fp)
 18267d0:	10c5883a 	add	r2,r2,r3
 18267d4:	10801904 	addi	r2,r2,100
 18267d8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 18267dc:	e0bffb17 	ldw	r2,-20(fp)
 18267e0:	e0fff417 	ldw	r3,-48(fp)
 18267e4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 18267e8:	e0bff117 	ldw	r2,-60(fp)
 18267ec:	103fc21e 	bne	r2,zero,18266f8 <__alt_mem_mem_0+0xff8066f8>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
 18267f0:	e0bffb17 	ldw	r2,-20(fp)
 18267f4:	10800817 	ldw	r2,32(r2)
 18267f8:	000f883a 	mov	r7,zero
 18267fc:	000d883a 	mov	r6,zero
 1826800:	000b883a 	mov	r5,zero
 1826804:	1009883a 	mov	r4,r2
 1826808:	180da2c0 	call	180da2c <xQueueGenericSend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 182680c:	0005303a 	rdctl	r2,status
 1826810:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1826814:	e0fff817 	ldw	r3,-32(fp)
 1826818:	00bfff84 	movi	r2,-2
 182681c:	1884703a 	and	r2,r3,r2
 1826820:	1001703a 	wrctl	status,r2
  
  return context;
 1826824:	e0bff817 	ldw	r2,-32(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 1826828:	e0bff515 	stw	r2,-44(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 182682c:	e0bffb17 	ldw	r2,-20(fp)
 1826830:	10800117 	ldw	r2,4(r2)
 1826834:	10c11014 	ori	r3,r2,1088
 1826838:	e0bffb17 	ldw	r2,-20(fp)
 182683c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 1826840:	e0bffb17 	ldw	r2,-20(fp)
 1826844:	10800017 	ldw	r2,0(r2)
 1826848:	10800304 	addi	r2,r2,12
 182684c:	e0fffb17 	ldw	r3,-20(fp)
 1826850:	18c00117 	ldw	r3,4(r3)
 1826854:	10c00035 	stwio	r3,0(r2)
 1826858:	e0bff517 	ldw	r2,-44(fp)
 182685c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1826860:	e0bff717 	ldw	r2,-36(fp)
 1826864:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 1826868:	e0fffd17 	ldw	r3,-12(fp)
 182686c:	e0bff117 	ldw	r2,-60(fp)
 1826870:	1885c83a 	sub	r2,r3,r2
}
 1826874:	e037883a 	mov	sp,fp
 1826878:	dfc00117 	ldw	ra,4(sp)
 182687c:	df000017 	ldw	fp,0(sp)
 1826880:	dec00204 	addi	sp,sp,8
 1826884:	f800283a 	ret

01826888 <__env_lock>:
xSemaphoreHandle alt_envsem;

/* __env_lock needs to provide recursive mutex locking */

void __env_lock ( struct _reent *_r )
{
 1826888:	defffd04 	addi	sp,sp,-12
 182688c:	dfc00215 	stw	ra,8(sp)
 1826890:	df000115 	stw	fp,4(sp)
 1826894:	df000104 	addi	fp,sp,4
 1826898:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 182689c:	1810a1c0 	call	1810a1c <xTaskGetSchedulerState>
 18268a0:	10000b26 	beq	r2,zero,18268d0 <__env_lock+0x48>
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_envsem, 10) != pdTRUE)
 18268a4:	00000206 	br	18268b0 <__env_lock+0x28>
		vTaskDelay(1);
 18268a8:	01000044 	movi	r4,1
 18268ac:	180f10c0 	call	180f10c <vTaskDelay>
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_envsem, 10) != pdTRUE)
 18268b0:	d0a80017 	ldw	r2,-24576(gp)
 18268b4:	01400284 	movi	r5,10
 18268b8:	1009883a 	mov	r4,r2
 18268bc:	180d9380 	call	180d938 <xQueueTakeMutexRecursive>
 18268c0:	10800058 	cmpnei	r2,r2,1
 18268c4:	103ff81e 	bne	r2,zero,18268a8 <__alt_mem_mem_0+0xff8068a8>
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
 18268c8:	0001883a 	nop
 18268cc:	00000106 	br	18268d4 <__env_lock+0x4c>

void __env_lock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 18268d0:	0001883a 	nop
	while (xSemaphoreTakeRecursive(alt_envsem, 10) != pdTRUE)
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
}
 18268d4:	e037883a 	mov	sp,fp
 18268d8:	dfc00117 	ldw	ra,4(sp)
 18268dc:	df000017 	ldw	fp,0(sp)
 18268e0:	dec00204 	addi	sp,sp,8
 18268e4:	f800283a 	ret

018268e8 <__env_unlock>:

/* __env_unlock needs to provide recursive mutex unlocking */

void __env_unlock ( struct _reent *_r )
{
 18268e8:	defffd04 	addi	sp,sp,-12
 18268ec:	dfc00215 	stw	ra,8(sp)
 18268f0:	df000115 	stw	fp,4(sp)
 18268f4:	df000104 	addi	fp,sp,4
 18268f8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 18268fc:	1810a1c0 	call	1810a1c <xTaskGetSchedulerState>
 1826900:	10000426 	beq	r2,zero,1826914 <__env_unlock+0x2c>
		return;
	  
	xSemaphoreGiveRecursive(alt_envsem);
 1826904:	d0a80017 	ldw	r2,-24576(gp)
 1826908:	1009883a 	mov	r4,r2
 182690c:	180d8a80 	call	180d8a8 <xQueueGiveMutexRecursive>
 1826910:	00000106 	br	1826918 <__env_unlock+0x30>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 1826914:	0001883a 	nop
	  
	xSemaphoreGiveRecursive(alt_envsem);
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 1826918:	e037883a 	mov	sp,fp
 182691c:	dfc00117 	ldw	ra,4(sp)
 1826920:	df000017 	ldw	fp,0(sp)
 1826924:	dec00204 	addi	sp,sp,8
 1826928:	f800283a 	ret

0182692c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 182692c:	defffc04 	addi	sp,sp,-16
 1826930:	dfc00315 	stw	ra,12(sp)
 1826934:	df000215 	stw	fp,8(sp)
 1826938:	df000204 	addi	fp,sp,8
 182693c:	e13fff15 	stw	r4,-4(fp)
void *pvReturn;

	vTaskSuspendAll();
 1826940:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 1826944:	e13fff17 	ldw	r4,-4(fp)
 1826948:	183c6bc0 	call	183c6bc <malloc>
 182694c:	e0bffe15 	stw	r2,-8(fp)
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 1826950:	180f8ec0 	call	180f8ec <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 1826954:	e0bffe17 	ldw	r2,-8(fp)
 1826958:	1000011e 	bne	r2,zero,1826960 <pvPortMalloc+0x34>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 182695c:	18004500 	call	1800450 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 1826960:	e0bffe17 	ldw	r2,-8(fp)
}
 1826964:	e037883a 	mov	sp,fp
 1826968:	dfc00117 	ldw	ra,4(sp)
 182696c:	df000017 	ldw	fp,0(sp)
 1826970:	dec00204 	addi	sp,sp,8
 1826974:	f800283a 	ret

01826978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 1826978:	defffd04 	addi	sp,sp,-12
 182697c:	dfc00215 	stw	ra,8(sp)
 1826980:	df000115 	stw	fp,4(sp)
 1826984:	df000104 	addi	fp,sp,4
 1826988:	e13fff15 	stw	r4,-4(fp)
	if( pv )
 182698c:	e0bfff17 	ldw	r2,-4(fp)
 1826990:	10000426 	beq	r2,zero,18269a4 <vPortFree+0x2c>
	{
		vTaskSuspendAll();
 1826994:	180f8c00 	call	180f8c0 <vTaskSuspendAll>
		{
			free( pv );
 1826998:	e13fff17 	ldw	r4,-4(fp)
 182699c:	183c6d00 	call	183c6d0 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 18269a0:	180f8ec0 	call	180f8ec <xTaskResumeAll>
	}
}
 18269a4:	0001883a 	nop
 18269a8:	e037883a 	mov	sp,fp
 18269ac:	dfc00117 	ldw	ra,4(sp)
 18269b0:	df000017 	ldw	fp,0(sp)
 18269b4:	dec00204 	addi	sp,sp,8
 18269b8:	f800283a 	ret

018269bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 18269bc:	defffe04 	addi	sp,sp,-8
 18269c0:	df000115 	stw	fp,4(sp)
 18269c4:	df000104 	addi	fp,sp,4
 18269c8:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 18269cc:	e0bfff17 	ldw	r2,-4(fp)
 18269d0:	10c00204 	addi	r3,r2,8
 18269d4:	e0bfff17 	ldw	r2,-4(fp)
 18269d8:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 18269dc:	e0bfff17 	ldw	r2,-4(fp)
 18269e0:	00ffffc4 	movi	r3,-1
 18269e4:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 18269e8:	e0bfff17 	ldw	r2,-4(fp)
 18269ec:	10c00204 	addi	r3,r2,8
 18269f0:	e0bfff17 	ldw	r2,-4(fp)
 18269f4:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 18269f8:	e0bfff17 	ldw	r2,-4(fp)
 18269fc:	10c00204 	addi	r3,r2,8
 1826a00:	e0bfff17 	ldw	r2,-4(fp)
 1826a04:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 1826a08:	e0bfff17 	ldw	r2,-4(fp)
 1826a0c:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 1826a10:	0001883a 	nop
 1826a14:	e037883a 	mov	sp,fp
 1826a18:	df000017 	ldw	fp,0(sp)
 1826a1c:	dec00104 	addi	sp,sp,4
 1826a20:	f800283a 	ret

01826a24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 1826a24:	defffe04 	addi	sp,sp,-8
 1826a28:	df000115 	stw	fp,4(sp)
 1826a2c:	df000104 	addi	fp,sp,4
 1826a30:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 1826a34:	e0bfff17 	ldw	r2,-4(fp)
 1826a38:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 1826a3c:	0001883a 	nop
 1826a40:	e037883a 	mov	sp,fp
 1826a44:	df000017 	ldw	fp,0(sp)
 1826a48:	dec00104 	addi	sp,sp,4
 1826a4c:	f800283a 	ret

01826a50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1826a50:	defffc04 	addi	sp,sp,-16
 1826a54:	df000315 	stw	fp,12(sp)
 1826a58:	df000304 	addi	fp,sp,12
 1826a5c:	e13ffe15 	stw	r4,-8(fp)
 1826a60:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 1826a64:	e0bffe17 	ldw	r2,-8(fp)
 1826a68:	10800117 	ldw	r2,4(r2)
 1826a6c:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 1826a70:	e0bfff17 	ldw	r2,-4(fp)
 1826a74:	e0fffd17 	ldw	r3,-12(fp)
 1826a78:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 1826a7c:	e0bffd17 	ldw	r2,-12(fp)
 1826a80:	10c00217 	ldw	r3,8(r2)
 1826a84:	e0bfff17 	ldw	r2,-4(fp)
 1826a88:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 1826a8c:	e0bffd17 	ldw	r2,-12(fp)
 1826a90:	10800217 	ldw	r2,8(r2)
 1826a94:	e0ffff17 	ldw	r3,-4(fp)
 1826a98:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 1826a9c:	e0bffd17 	ldw	r2,-12(fp)
 1826aa0:	e0ffff17 	ldw	r3,-4(fp)
 1826aa4:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 1826aa8:	e0bfff17 	ldw	r2,-4(fp)
 1826aac:	e0fffe17 	ldw	r3,-8(fp)
 1826ab0:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 1826ab4:	e0bffe17 	ldw	r2,-8(fp)
 1826ab8:	10800017 	ldw	r2,0(r2)
 1826abc:	10c00044 	addi	r3,r2,1
 1826ac0:	e0bffe17 	ldw	r2,-8(fp)
 1826ac4:	10c00015 	stw	r3,0(r2)
}
 1826ac8:	0001883a 	nop
 1826acc:	e037883a 	mov	sp,fp
 1826ad0:	df000017 	ldw	fp,0(sp)
 1826ad4:	dec00104 	addi	sp,sp,4
 1826ad8:	f800283a 	ret

01826adc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 1826adc:	defffb04 	addi	sp,sp,-20
 1826ae0:	df000415 	stw	fp,16(sp)
 1826ae4:	df000404 	addi	fp,sp,16
 1826ae8:	e13ffe15 	stw	r4,-8(fp)
 1826aec:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 1826af0:	e0bfff17 	ldw	r2,-4(fp)
 1826af4:	10800017 	ldw	r2,0(r2)
 1826af8:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1826afc:	e0bffd17 	ldw	r2,-12(fp)
 1826b00:	10bfffd8 	cmpnei	r2,r2,-1
 1826b04:	1000041e 	bne	r2,zero,1826b18 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1826b08:	e0bffe17 	ldw	r2,-8(fp)
 1826b0c:	10800417 	ldw	r2,16(r2)
 1826b10:	e0bffc15 	stw	r2,-16(fp)
 1826b14:	00000c06 	br	1826b48 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1826b18:	e0bffe17 	ldw	r2,-8(fp)
 1826b1c:	10800204 	addi	r2,r2,8
 1826b20:	e0bffc15 	stw	r2,-16(fp)
 1826b24:	00000306 	br	1826b34 <vListInsert+0x58>
 1826b28:	e0bffc17 	ldw	r2,-16(fp)
 1826b2c:	10800117 	ldw	r2,4(r2)
 1826b30:	e0bffc15 	stw	r2,-16(fp)
 1826b34:	e0bffc17 	ldw	r2,-16(fp)
 1826b38:	10800117 	ldw	r2,4(r2)
 1826b3c:	10800017 	ldw	r2,0(r2)
 1826b40:	e0fffd17 	ldw	r3,-12(fp)
 1826b44:	18bff82e 	bgeu	r3,r2,1826b28 <__alt_mem_mem_0+0xff806b28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1826b48:	e0bffc17 	ldw	r2,-16(fp)
 1826b4c:	10c00117 	ldw	r3,4(r2)
 1826b50:	e0bfff17 	ldw	r2,-4(fp)
 1826b54:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1826b58:	e0bfff17 	ldw	r2,-4(fp)
 1826b5c:	10800117 	ldw	r2,4(r2)
 1826b60:	e0ffff17 	ldw	r3,-4(fp)
 1826b64:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 1826b68:	e0bfff17 	ldw	r2,-4(fp)
 1826b6c:	e0fffc17 	ldw	r3,-16(fp)
 1826b70:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 1826b74:	e0bffc17 	ldw	r2,-16(fp)
 1826b78:	e0ffff17 	ldw	r3,-4(fp)
 1826b7c:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1826b80:	e0bfff17 	ldw	r2,-4(fp)
 1826b84:	e0fffe17 	ldw	r3,-8(fp)
 1826b88:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 1826b8c:	e0bffe17 	ldw	r2,-8(fp)
 1826b90:	10800017 	ldw	r2,0(r2)
 1826b94:	10c00044 	addi	r3,r2,1
 1826b98:	e0bffe17 	ldw	r2,-8(fp)
 1826b9c:	10c00015 	stw	r3,0(r2)
}
 1826ba0:	0001883a 	nop
 1826ba4:	e037883a 	mov	sp,fp
 1826ba8:	df000017 	ldw	fp,0(sp)
 1826bac:	dec00104 	addi	sp,sp,4
 1826bb0:	f800283a 	ret

01826bb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1826bb4:	defffd04 	addi	sp,sp,-12
 1826bb8:	df000215 	stw	fp,8(sp)
 1826bbc:	df000204 	addi	fp,sp,8
 1826bc0:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1826bc4:	e0bfff17 	ldw	r2,-4(fp)
 1826bc8:	10800417 	ldw	r2,16(r2)
 1826bcc:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1826bd0:	e0bfff17 	ldw	r2,-4(fp)
 1826bd4:	10800117 	ldw	r2,4(r2)
 1826bd8:	e0ffff17 	ldw	r3,-4(fp)
 1826bdc:	18c00217 	ldw	r3,8(r3)
 1826be0:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 1826be4:	e0bfff17 	ldw	r2,-4(fp)
 1826be8:	10800217 	ldw	r2,8(r2)
 1826bec:	e0ffff17 	ldw	r3,-4(fp)
 1826bf0:	18c00117 	ldw	r3,4(r3)
 1826bf4:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 1826bf8:	e0bffe17 	ldw	r2,-8(fp)
 1826bfc:	10c00117 	ldw	r3,4(r2)
 1826c00:	e0bfff17 	ldw	r2,-4(fp)
 1826c04:	1880041e 	bne	r3,r2,1826c18 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 1826c08:	e0bfff17 	ldw	r2,-4(fp)
 1826c0c:	10c00217 	ldw	r3,8(r2)
 1826c10:	e0bffe17 	ldw	r2,-8(fp)
 1826c14:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 1826c18:	e0bfff17 	ldw	r2,-4(fp)
 1826c1c:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 1826c20:	e0bffe17 	ldw	r2,-8(fp)
 1826c24:	10800017 	ldw	r2,0(r2)
 1826c28:	10ffffc4 	addi	r3,r2,-1
 1826c2c:	e0bffe17 	ldw	r2,-8(fp)
 1826c30:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 1826c34:	e0bffe17 	ldw	r2,-8(fp)
 1826c38:	10800017 	ldw	r2,0(r2)
}
 1826c3c:	e037883a 	mov	sp,fp
 1826c40:	df000017 	ldw	fp,0(sp)
 1826c44:	dec00104 	addi	sp,sp,4
 1826c48:	f800283a 	ret

01826c4c <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
 1826c4c:	defffe04 	addi	sp,sp,-8
 1826c50:	df000115 	stw	fp,4(sp)
 1826c54:	df000104 	addi	fp,sp,4
 1826c58:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
 1826c5c:	e0bfff17 	ldw	r2,-4(fp)
 1826c60:	16800015 	stw	gp,0(r2)
}
 1826c64:	0001883a 	nop
 1826c68:	e037883a 	mov	sp,fp
 1826c6c:	df000017 	ldw	fp,0(sp)
 1826c70:	dec00104 	addi	sp,sp,4
 1826c74:	f800283a 	ret

01826c78 <enh_alt_irq_disable_all>:


static volatile alt_irq_context lastContext;

void enh_alt_irq_disable_all()
{
 1826c78:	defffd04 	addi	sp,sp,-12
 1826c7c:	df000215 	stw	fp,8(sp)
 1826c80:	df000204 	addi	fp,sp,8
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1826c84:	0005303a 	rdctl	r2,status
 1826c88:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1826c8c:	e0ffff17 	ldw	r3,-4(fp)
 1826c90:	00bfff84 	movi	r2,-2
 1826c94:	1884703a 	and	r2,r3,r2
 1826c98:	1001703a 	wrctl	status,r2
  
  return context;
 1826c9c:	e0bfff17 	ldw	r2,-4(fp)
	alt_irq_context ctxt = alt_irq_disable_all();
 1826ca0:	e0bffe15 	stw	r2,-8(fp)
	lastContext |= ctxt;
 1826ca4:	d0e80117 	ldw	r3,-24572(gp)
 1826ca8:	e0bffe17 	ldw	r2,-8(fp)
 1826cac:	1884b03a 	or	r2,r3,r2
 1826cb0:	d0a80115 	stw	r2,-24572(gp)
}
 1826cb4:	0001883a 	nop
 1826cb8:	e037883a 	mov	sp,fp
 1826cbc:	df000017 	ldw	fp,0(sp)
 1826cc0:	dec00104 	addi	sp,sp,4
 1826cc4:	f800283a 	ret

01826cc8 <enh_alt_irq_enable_all>:

void enh_alt_irq_enable_all()
{
 1826cc8:	defffd04 	addi	sp,sp,-12
 1826ccc:	df000215 	stw	fp,8(sp)
 1826cd0:	df000204 	addi	fp,sp,8
	alt_irq_context restore = lastContext;
 1826cd4:	d0a80117 	ldw	r2,-24572(gp)
 1826cd8:	e0bffe15 	stw	r2,-8(fp)
	lastContext = 0;
 1826cdc:	d0280115 	stw	zero,-24572(gp)
 1826ce0:	e0bffe17 	ldw	r2,-8(fp)
 1826ce4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1826ce8:	e0bfff17 	ldw	r2,-4(fp)
 1826cec:	1001703a 	wrctl	status,r2
	alt_irq_enable_all(restore);
}
 1826cf0:	0001883a 	nop
 1826cf4:	e037883a 	mov	sp,fp
 1826cf8:	df000017 	ldw	fp,0(sp)
 1826cfc:	dec00104 	addi	sp,sp,4
 1826d00:	f800283a 	ret

01826d04 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
 1826d04:	defff904 	addi	sp,sp,-28
 1826d08:	dfc00615 	stw	ra,24(sp)
 1826d0c:	df000515 	stw	fp,20(sp)
 1826d10:	df000504 	addi	fp,sp,20
 1826d14:	e13ffd15 	stw	r4,-12(fp)
 1826d18:	e17ffe15 	stw	r5,-8(fp)
 1826d1c:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
 1826d20:	e0bffd17 	ldw	r2,-12(fp)
 1826d24:	10bfff04 	addi	r2,r2,-4
 1826d28:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
 1826d2c:	e0bffc04 	addi	r2,fp,-16
 1826d30:	1009883a 	mov	r4,r2
 1826d34:	1826c4c0 	call	1826c4c <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
 1826d38:	e0fffd17 	ldw	r3,-12(fp)
 1826d3c:	00b7abb4 	movhi	r2,57006
 1826d40:	10afbbc4 	addi	r2,r2,-16657
 1826d44:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
 1826d48:	e0bffd17 	ldw	r2,-12(fp)
 1826d4c:	10bfff04 	addi	r2,r2,-4
 1826d50:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
 1826d54:	e0fffb17 	ldw	r3,-20(fp)
 1826d58:	e0bffd17 	ldw	r2,-12(fp)
 1826d5c:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 1826d60:	e0bffd17 	ldw	r2,-12(fp)
 1826d64:	10bfff04 	addi	r2,r2,-4
 1826d68:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
 1826d6c:	e0fffc17 	ldw	r3,-16(fp)
 1826d70:	e0bffd17 	ldw	r2,-12(fp)
 1826d74:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
 1826d78:	e0bffd17 	ldw	r2,-12(fp)
 1826d7c:	10bff704 	addi	r2,r2,-36
 1826d80:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
 1826d84:	e0fffe17 	ldw	r3,-8(fp)
 1826d88:	e0bffd17 	ldw	r2,-12(fp)
 1826d8c:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 1826d90:	e0bffd17 	ldw	r2,-12(fp)
 1826d94:	10bfff04 	addi	r2,r2,-4
 1826d98:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
 1826d9c:	e0bffd17 	ldw	r2,-12(fp)
 1826da0:	00c00044 	movi	r3,1
 1826da4:	10c00015 	stw	r3,0(r2)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
 1826da8:	e0bffd17 	ldw	r2,-12(fp)
 1826dac:	10bff404 	addi	r2,r2,-48
 1826db0:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
 1826db4:	e0ffff17 	ldw	r3,-4(fp)
 1826db8:	e0bffd17 	ldw	r2,-12(fp)
 1826dbc:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
 1826dc0:	e0bffd17 	ldw	r2,-12(fp)
 1826dc4:	10bffb04 	addi	r2,r2,-20
 1826dc8:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
 1826dcc:	e0bffd17 	ldw	r2,-12(fp)
}
 1826dd0:	e037883a 	mov	sp,fp
 1826dd4:	dfc00117 	ldw	ra,4(sp)
 1826dd8:	df000017 	ldw	fp,0(sp)
 1826ddc:	dec00204 	addi	sp,sp,8
 1826de0:	f800283a 	ret

01826de4 <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
 1826de4:	defffe04 	addi	sp,sp,-8
 1826de8:	dfc00115 	stw	ra,4(sp)
 1826dec:	df000015 	stw	fp,0(sp)
 1826df0:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 1826df4:	1826e3c0 	call	1826e3c <prvSetupTimerInterrupt>
 1826df8:	00806034 	movhi	r2,384
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
 1826dfc:	10803104 	addi	r2,r2,196
 1826e00:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
 1826e04:	0005883a 	mov	r2,zero
}
 1826e08:	e037883a 	mov	sp,fp
 1826e0c:	dfc00117 	ldw	ra,4(sp)
 1826e10:	df000017 	ldw	fp,0(sp)
 1826e14:	dec00204 	addi	sp,sp,8
 1826e18:	f800283a 	ret

01826e1c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 1826e1c:	deffff04 	addi	sp,sp,-4
 1826e20:	df000015 	stw	fp,0(sp)
 1826e24:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
 1826e28:	0001883a 	nop
 1826e2c:	e037883a 	mov	sp,fp
 1826e30:	df000017 	ldw	fp,0(sp)
 1826e34:	dec00104 	addi	sp,sp,4
 1826e38:	f800283a 	ret

01826e3c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 1826e3c:	defffe04 	addi	sp,sp,-8
 1826e40:	dfc00115 	stw	ra,4(sp)
 1826e44:	df000015 	stw	fp,0(sp)
 1826e48:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
 1826e4c:	018060b4 	movhi	r6,386
 1826e50:	319bb604 	addi	r6,r6,28376
 1826e54:	000b883a 	mov	r5,zero
 1826e58:	010000c4 	movi	r4,3
 1826e5c:	1826f240 	call	1826f24 <alt_irq_register>
 1826e60:	10bffa98 	cmpnei	r2,r2,-22
 1826e64:	1000021e 	bne	r2,zero,1826e70 <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 1826e68:	003da03a 	break	0
 1826e6c:	00001006 	br	1826eb0 <prvSetupTimerInterrupt+0x74>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
 1826e70:	00c00204 	movi	r3,8
 1826e74:	00808134 	movhi	r2,516
 1826e78:	10840904 	addi	r2,r2,4132
 1826e7c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
 1826e80:	00f0d414 	movui	r3,50000
 1826e84:	00808134 	movhi	r2,516
 1826e88:	10840a04 	addi	r2,r2,4136
 1826e8c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
 1826e90:	0007883a 	mov	r3,zero
 1826e94:	00808134 	movhi	r2,516
 1826e98:	10840b04 	addi	r2,r2,4140
 1826e9c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
 1826ea0:	00c001c4 	movi	r3,7
 1826ea4:	00808134 	movhi	r2,516
 1826ea8:	10840904 	addi	r2,r2,4132
 1826eac:	10c00035 	stwio	r3,0(r2)
	} 

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 1826eb0:	00ffff84 	movi	r3,-2
 1826eb4:	00808134 	movhi	r2,516
 1826eb8:	10840804 	addi	r2,r2,4128
 1826ebc:	10c00035 	stwio	r3,0(r2)
}
 1826ec0:	0001883a 	nop
 1826ec4:	e037883a 	mov	sp,fp
 1826ec8:	dfc00117 	ldw	ra,4(sp)
 1826ecc:	df000017 	ldw	fp,0(sp)
 1826ed0:	dec00204 	addi	sp,sp,8
 1826ed4:	f800283a 	ret

01826ed8 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
 1826ed8:	defffc04 	addi	sp,sp,-16
 1826edc:	dfc00315 	stw	ra,12(sp)
 1826ee0:	df000215 	stw	fp,8(sp)
 1826ee4:	df000204 	addi	fp,sp,8
 1826ee8:	e13ffe15 	stw	r4,-8(fp)
 1826eec:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
 1826ef0:	180fccc0 	call	180fccc <xTaskIncrementTick>
 1826ef4:	10000126 	beq	r2,zero,1826efc <vPortSysTickHandler+0x24>
	{
        vTaskSwitchContext();
 1826ef8:	180fe7c0 	call	180fe7c <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 1826efc:	00ffff84 	movi	r3,-2
 1826f00:	00808134 	movhi	r2,516
 1826f04:	10840804 	addi	r2,r2,4128
 1826f08:	10c00035 	stwio	r3,0(r2)
}
 1826f0c:	0001883a 	nop
 1826f10:	e037883a 	mov	sp,fp
 1826f14:	dfc00117 	ldw	ra,4(sp)
 1826f18:	df000017 	ldw	fp,0(sp)
 1826f1c:	dec00204 	addi	sp,sp,8
 1826f20:	f800283a 	ret

01826f24 <alt_irq_register>:
 * when it is registered. Interrupts should only be enabled after the FreeRTOS.org
 * kernel has its scheduler started so that contexts are saved and switched 
 * correctly.
 */
int alt_irq_register( alt_u32 id, void* context, alt_isr_func handler)
{
 1826f24:	defff104 	addi	sp,sp,-60
 1826f28:	df000e15 	stw	fp,56(sp)
 1826f2c:	df000e04 	addi	fp,sp,56
 1826f30:	e13ffd15 	stw	r4,-12(fp)
 1826f34:	e17ffe15 	stw	r5,-8(fp)
 1826f38:	e1bfff15 	stw	r6,-4(fp)
	int rc = -EINVAL;  
 1826f3c:	00bffa84 	movi	r2,-22
 1826f40:	e0bff215 	stw	r2,-56(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ)
 1826f44:	e0bffd17 	ldw	r2,-12(fp)
 1826f48:	10800828 	cmpgeui	r2,r2,32
 1826f4c:	10004c1e 	bne	r2,zero,1827080 <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1826f50:	0005303a 	rdctl	r2,status
 1826f54:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1826f58:	e0fff617 	ldw	r3,-40(fp)
 1826f5c:	00bfff84 	movi	r2,-2
 1826f60:	1884703a 	and	r2,r3,r2
 1826f64:	1001703a 	wrctl	status,r2
  
  return context;
 1826f68:	e0bff617 	ldw	r2,-40(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */
	
		status = alt_irq_disable_all();
 1826f6c:	e0bff415 	stw	r2,-48(fp)
	
		alt_irq[id].handler = handler;
 1826f70:	008061f4 	movhi	r2,391
 1826f74:	10a80e04 	addi	r2,r2,-24520
 1826f78:	e0fffd17 	ldw	r3,-12(fp)
 1826f7c:	180690fa 	slli	r3,r3,3
 1826f80:	10c5883a 	add	r2,r2,r3
 1826f84:	e0ffff17 	ldw	r3,-4(fp)
 1826f88:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = context;
 1826f8c:	008061f4 	movhi	r2,391
 1826f90:	10a80e04 	addi	r2,r2,-24520
 1826f94:	e0fffd17 	ldw	r3,-12(fp)
 1826f98:	180690fa 	slli	r3,r3,3
 1826f9c:	10c5883a 	add	r2,r2,r3
 1826fa0:	10800104 	addi	r2,r2,4
 1826fa4:	e0fffe17 	ldw	r3,-8(fp)
 1826fa8:	10c00015 	stw	r3,0(r2)
	
		rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1826fac:	e0bfff17 	ldw	r2,-4(fp)
 1826fb0:	10001926 	beq	r2,zero,1827018 <alt_irq_register+0xf4>
 1826fb4:	e0bffd17 	ldw	r2,-12(fp)
 1826fb8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1826fbc:	0005303a 	rdctl	r2,status
 1826fc0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1826fc4:	e0fff717 	ldw	r3,-36(fp)
 1826fc8:	00bfff84 	movi	r2,-2
 1826fcc:	1884703a 	and	r2,r3,r2
 1826fd0:	1001703a 	wrctl	status,r2
  
  return context;
 1826fd4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1826fd8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1826fdc:	00c00044 	movi	r3,1
 1826fe0:	e0bff317 	ldw	r2,-52(fp)
 1826fe4:	1884983a 	sll	r2,r3,r2
 1826fe8:	1007883a 	mov	r3,r2
 1826fec:	d0a80617 	ldw	r2,-24552(gp)
 1826ff0:	1884b03a 	or	r2,r3,r2
 1826ff4:	d0a80615 	stw	r2,-24552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1826ff8:	d0a80617 	ldw	r2,-24552(gp)
 1826ffc:	100170fa 	wrctl	ienable,r2
 1827000:	e0bff817 	ldw	r2,-32(fp)
 1827004:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1827008:	e0bff917 	ldw	r2,-28(fp)
 182700c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1827010:	0005883a 	mov	r2,zero
 1827014:	00001906 	br	182707c <alt_irq_register+0x158>
 1827018:	e0bffd17 	ldw	r2,-12(fp)
 182701c:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1827020:	0005303a 	rdctl	r2,status
 1827024:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1827028:	e0fffa17 	ldw	r3,-24(fp)
 182702c:	00bfff84 	movi	r2,-2
 1827030:	1884703a 	and	r2,r3,r2
 1827034:	1001703a 	wrctl	status,r2
  
  return context;
 1827038:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 182703c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 1827040:	00c00044 	movi	r3,1
 1827044:	e0bff517 	ldw	r2,-44(fp)
 1827048:	1884983a 	sll	r2,r3,r2
 182704c:	0084303a 	nor	r2,zero,r2
 1827050:	1007883a 	mov	r3,r2
 1827054:	d0a80617 	ldw	r2,-24552(gp)
 1827058:	1884703a 	and	r2,r3,r2
 182705c:	d0a80615 	stw	r2,-24552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1827060:	d0a80617 	ldw	r2,-24552(gp)
 1827064:	100170fa 	wrctl	ienable,r2
 1827068:	e0bffb17 	ldw	r2,-20(fp)
 182706c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1827070:	e0bffc17 	ldw	r2,-16(fp)
 1827074:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1827078:	0005883a 	mov	r2,zero
 182707c:	e0bff215 	stw	r2,-56(fp)
	
		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}
    
	return rc; 
 1827080:	e0bff217 	ldw	r2,-56(fp)
}
 1827084:	e037883a 	mov	sp,fp
 1827088:	df000017 	ldw	fp,0(sp)
 182708c:	dec00104 	addi	sp,sp,4
 1827090:	f800283a 	ret

01827094 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1827094:	defff504 	addi	sp,sp,-44
 1827098:	df000a15 	stw	fp,40(sp)
 182709c:	df000a04 	addi	fp,sp,40
 18270a0:	e13ffc15 	stw	r4,-16(fp)
 18270a4:	e17ffd15 	stw	r5,-12(fp)
 18270a8:	e1bffe15 	stw	r6,-8(fp)
 18270ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 18270b0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 18270b4:	d0a80717 	ldw	r2,-24548(gp)
  
  if (alt_ticks_per_second ())
 18270b8:	10003c26 	beq	r2,zero,18271ac <alt_alarm_start+0x118>
  {
    if (alarm)
 18270bc:	e0bffc17 	ldw	r2,-16(fp)
 18270c0:	10003826 	beq	r2,zero,18271a4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 18270c4:	e0bffc17 	ldw	r2,-16(fp)
 18270c8:	e0fffe17 	ldw	r3,-8(fp)
 18270cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 18270d0:	e0bffc17 	ldw	r2,-16(fp)
 18270d4:	e0ffff17 	ldw	r3,-4(fp)
 18270d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 18270dc:	0005303a 	rdctl	r2,status
 18270e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 18270e4:	e0fff917 	ldw	r3,-28(fp)
 18270e8:	00bfff84 	movi	r2,-2
 18270ec:	1884703a 	and	r2,r3,r2
 18270f0:	1001703a 	wrctl	status,r2
  
  return context;
 18270f4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 18270f8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 18270fc:	d0a80817 	ldw	r2,-24544(gp)
      
      current_nticks = alt_nticks();
 1827100:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1827104:	e0fffd17 	ldw	r3,-12(fp)
 1827108:	e0bff617 	ldw	r2,-40(fp)
 182710c:	1885883a 	add	r2,r3,r2
 1827110:	10c00044 	addi	r3,r2,1
 1827114:	e0bffc17 	ldw	r2,-16(fp)
 1827118:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 182711c:	e0bffc17 	ldw	r2,-16(fp)
 1827120:	10c00217 	ldw	r3,8(r2)
 1827124:	e0bff617 	ldw	r2,-40(fp)
 1827128:	1880042e 	bgeu	r3,r2,182713c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 182712c:	e0bffc17 	ldw	r2,-16(fp)
 1827130:	00c00044 	movi	r3,1
 1827134:	10c00405 	stb	r3,16(r2)
 1827138:	00000206 	br	1827144 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 182713c:	e0bffc17 	ldw	r2,-16(fp)
 1827140:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1827144:	e0bffc17 	ldw	r2,-16(fp)
 1827148:	d0e01b04 	addi	r3,gp,-32660
 182714c:	e0fffa15 	stw	r3,-24(fp)
 1827150:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1827154:	e0bffb17 	ldw	r2,-20(fp)
 1827158:	e0fffa17 	ldw	r3,-24(fp)
 182715c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1827160:	e0bffa17 	ldw	r2,-24(fp)
 1827164:	10c00017 	ldw	r3,0(r2)
 1827168:	e0bffb17 	ldw	r2,-20(fp)
 182716c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1827170:	e0bffa17 	ldw	r2,-24(fp)
 1827174:	10800017 	ldw	r2,0(r2)
 1827178:	e0fffb17 	ldw	r3,-20(fp)
 182717c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1827180:	e0bffa17 	ldw	r2,-24(fp)
 1827184:	e0fffb17 	ldw	r3,-20(fp)
 1827188:	10c00015 	stw	r3,0(r2)
 182718c:	e0bff817 	ldw	r2,-32(fp)
 1827190:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1827194:	e0bff717 	ldw	r2,-36(fp)
 1827198:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 182719c:	0005883a 	mov	r2,zero
 18271a0:	00000306 	br	18271b0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 18271a4:	00bffa84 	movi	r2,-22
 18271a8:	00000106 	br	18271b0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 18271ac:	00bfde84 	movi	r2,-134
  }
}
 18271b0:	e037883a 	mov	sp,fp
 18271b4:	df000017 	ldw	fp,0(sp)
 18271b8:	dec00104 	addi	sp,sp,4
 18271bc:	f800283a 	ret

018271c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 18271c0:	defffe04 	addi	sp,sp,-8
 18271c4:	dfc00115 	stw	ra,4(sp)
 18271c8:	df000015 	stw	fp,0(sp)
 18271cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 18271d0:	d0a01917 	ldw	r2,-32668(gp)
 18271d4:	10000326 	beq	r2,zero,18271e4 <alt_get_errno+0x24>
 18271d8:	d0a01917 	ldw	r2,-32668(gp)
 18271dc:	103ee83a 	callr	r2
 18271e0:	00000106 	br	18271e8 <alt_get_errno+0x28>
 18271e4:	d0a7ce04 	addi	r2,gp,-24776
}
 18271e8:	e037883a 	mov	sp,fp
 18271ec:	dfc00117 	ldw	ra,4(sp)
 18271f0:	df000017 	ldw	fp,0(sp)
 18271f4:	dec00204 	addi	sp,sp,8
 18271f8:	f800283a 	ret

018271fc <alt_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 18271fc:	defffb04 	addi	sp,sp,-20
 1827200:	dfc00415 	stw	ra,16(sp)
 1827204:	df000315 	stw	fp,12(sp)
 1827208:	df000304 	addi	fp,sp,12
 182720c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1827210:	e0bfff17 	ldw	r2,-4(fp)
 1827214:	10000616 	blt	r2,zero,1827230 <alt_close+0x34>
 1827218:	e0bfff17 	ldw	r2,-4(fp)
 182721c:	10c00324 	muli	r3,r2,12
 1827220:	00806134 	movhi	r2,388
 1827224:	108f9e04 	addi	r2,r2,15992
 1827228:	1885883a 	add	r2,r3,r2
 182722c:	00000106 	br	1827234 <alt_close+0x38>
 1827230:	0005883a 	mov	r2,zero
 1827234:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 1827238:	e0bffd17 	ldw	r2,-12(fp)
 182723c:	10001926 	beq	r2,zero,18272a4 <alt_close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1827240:	e0bffd17 	ldw	r2,-12(fp)
 1827244:	10800017 	ldw	r2,0(r2)
 1827248:	10800417 	ldw	r2,16(r2)
 182724c:	10000626 	beq	r2,zero,1827268 <alt_close+0x6c>
 1827250:	e0bffd17 	ldw	r2,-12(fp)
 1827254:	10800017 	ldw	r2,0(r2)
 1827258:	10800417 	ldw	r2,16(r2)
 182725c:	e13ffd17 	ldw	r4,-12(fp)
 1827260:	103ee83a 	callr	r2
 1827264:	00000106 	br	182726c <alt_close+0x70>
 1827268:	0005883a 	mov	r2,zero
 182726c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1827270:	e13fff17 	ldw	r4,-4(fp)
 1827274:	1812e640 	call	1812e64 <alt_release_fd>
    if (rval < 0)
 1827278:	e0bffe17 	ldw	r2,-8(fp)
 182727c:	1000070e 	bge	r2,zero,182729c <alt_close+0xa0>
    {
      ALT_ERRNO = -rval;
 1827280:	18271c00 	call	18271c0 <alt_get_errno>
 1827284:	1007883a 	mov	r3,r2
 1827288:	e0bffe17 	ldw	r2,-8(fp)
 182728c:	0085c83a 	sub	r2,zero,r2
 1827290:	18800015 	stw	r2,0(r3)
      return -1;
 1827294:	00bfffc4 	movi	r2,-1
 1827298:	00000706 	br	18272b8 <alt_close+0xbc>
    }
    return 0;
 182729c:	0005883a 	mov	r2,zero
 18272a0:	00000506 	br	18272b8 <alt_close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 18272a4:	18271c00 	call	18271c0 <alt_get_errno>
 18272a8:	1007883a 	mov	r3,r2
 18272ac:	00801444 	movi	r2,81
 18272b0:	18800015 	stw	r2,0(r3)
    return -1;
 18272b4:	00bfffc4 	movi	r2,-1
  }
}
 18272b8:	e037883a 	mov	sp,fp
 18272bc:	dfc00117 	ldw	ra,4(sp)
 18272c0:	df000017 	ldw	fp,0(sp)
 18272c4:	dec00204 	addi	sp,sp,8
 18272c8:	f800283a 	ret

018272cc <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 18272cc:	defffd04 	addi	sp,sp,-12
 18272d0:	df000215 	stw	fp,8(sp)
 18272d4:	df000204 	addi	fp,sp,8
 18272d8:	e13ffe15 	stw	r4,-8(fp)
 18272dc:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 18272e0:	0001883a 	nop
 18272e4:	e037883a 	mov	sp,fp
 18272e8:	df000017 	ldw	fp,0(sp)
 18272ec:	dec00104 	addi	sp,sp,4
 18272f0:	f800283a 	ret

018272f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 18272f4:	deffff04 	addi	sp,sp,-4
 18272f8:	df000015 	stw	fp,0(sp)
 18272fc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1827300:	0001883a 	nop
 1827304:	e037883a 	mov	sp,fp
 1827308:	df000017 	ldw	fp,0(sp)
 182730c:	dec00104 	addi	sp,sp,4
 1827310:	f800283a 	ret

01827314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1827314:	defffe04 	addi	sp,sp,-8
 1827318:	dfc00115 	stw	ra,4(sp)
 182731c:	df000015 	stw	fp,0(sp)
 1827320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1827324:	d0a01917 	ldw	r2,-32668(gp)
 1827328:	10000326 	beq	r2,zero,1827338 <alt_get_errno+0x24>
 182732c:	d0a01917 	ldw	r2,-32668(gp)
 1827330:	103ee83a 	callr	r2
 1827334:	00000106 	br	182733c <alt_get_errno+0x28>
 1827338:	d0a7ce04 	addi	r2,gp,-24776
}
 182733c:	e037883a 	mov	sp,fp
 1827340:	dfc00117 	ldw	ra,4(sp)
 1827344:	df000017 	ldw	fp,0(sp)
 1827348:	dec00204 	addi	sp,sp,8
 182734c:	f800283a 	ret

01827350 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1827350:	defffa04 	addi	sp,sp,-24
 1827354:	dfc00515 	stw	ra,20(sp)
 1827358:	df000415 	stw	fp,16(sp)
 182735c:	df000404 	addi	fp,sp,16
 1827360:	e13ffe15 	stw	r4,-8(fp)
 1827364:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1827368:	e0bffe17 	ldw	r2,-8(fp)
 182736c:	10000326 	beq	r2,zero,182737c <alt_dev_llist_insert+0x2c>
 1827370:	e0bffe17 	ldw	r2,-8(fp)
 1827374:	10800217 	ldw	r2,8(r2)
 1827378:	1000061e 	bne	r2,zero,1827394 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 182737c:	18273140 	call	1827314 <alt_get_errno>
 1827380:	1007883a 	mov	r3,r2
 1827384:	00800584 	movi	r2,22
 1827388:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 182738c:	00bffa84 	movi	r2,-22
 1827390:	00001306 	br	18273e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1827394:	e0bffe17 	ldw	r2,-8(fp)
 1827398:	e0ffff17 	ldw	r3,-4(fp)
 182739c:	e0fffc15 	stw	r3,-16(fp)
 18273a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 18273a4:	e0bffd17 	ldw	r2,-12(fp)
 18273a8:	e0fffc17 	ldw	r3,-16(fp)
 18273ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 18273b0:	e0bffc17 	ldw	r2,-16(fp)
 18273b4:	10c00017 	ldw	r3,0(r2)
 18273b8:	e0bffd17 	ldw	r2,-12(fp)
 18273bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 18273c0:	e0bffc17 	ldw	r2,-16(fp)
 18273c4:	10800017 	ldw	r2,0(r2)
 18273c8:	e0fffd17 	ldw	r3,-12(fp)
 18273cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 18273d0:	e0bffc17 	ldw	r2,-16(fp)
 18273d4:	e0fffd17 	ldw	r3,-12(fp)
 18273d8:	10c00015 	stw	r3,0(r2)

  return 0;  
 18273dc:	0005883a 	mov	r2,zero
}
 18273e0:	e037883a 	mov	sp,fp
 18273e4:	dfc00117 	ldw	ra,4(sp)
 18273e8:	df000017 	ldw	fp,0(sp)
 18273ec:	dec00204 	addi	sp,sp,8
 18273f0:	f800283a 	ret

018273f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 18273f4:	defffa04 	addi	sp,sp,-24
 18273f8:	dfc00515 	stw	ra,20(sp)
 18273fc:	df000415 	stw	fp,16(sp)
 1827400:	df000404 	addi	fp,sp,16
 1827404:	e13ffe15 	stw	r4,-8(fp)
 1827408:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 182740c:	e0bfff17 	ldw	r2,-4(fp)
 1827410:	10800017 	ldw	r2,0(r2)
 1827414:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1827418:	e13ffe17 	ldw	r4,-8(fp)
 182741c:	18075980 	call	1807598 <strlen>
 1827420:	10800044 	addi	r2,r2,1
 1827424:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1827428:	00000d06 	br	1827460 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 182742c:	e0bffc17 	ldw	r2,-16(fp)
 1827430:	10800217 	ldw	r2,8(r2)
 1827434:	e0fffd17 	ldw	r3,-12(fp)
 1827438:	180d883a 	mov	r6,r3
 182743c:	e17ffe17 	ldw	r5,-8(fp)
 1827440:	1009883a 	mov	r4,r2
 1827444:	183c6e40 	call	183c6e4 <memcmp>
 1827448:	1000021e 	bne	r2,zero,1827454 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 182744c:	e0bffc17 	ldw	r2,-16(fp)
 1827450:	00000706 	br	1827470 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1827454:	e0bffc17 	ldw	r2,-16(fp)
 1827458:	10800017 	ldw	r2,0(r2)
 182745c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1827460:	e0fffc17 	ldw	r3,-16(fp)
 1827464:	e0bfff17 	ldw	r2,-4(fp)
 1827468:	18bff01e 	bne	r3,r2,182742c <__alt_mem_mem_0+0xff80742c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 182746c:	0005883a 	mov	r2,zero
}
 1827470:	e037883a 	mov	sp,fp
 1827474:	dfc00117 	ldw	ra,4(sp)
 1827478:	df000017 	ldw	fp,0(sp)
 182747c:	dec00204 	addi	sp,sp,8
 1827480:	f800283a 	ret

01827484 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1827484:	defffb04 	addi	sp,sp,-20
 1827488:	dfc00415 	stw	ra,16(sp)
 182748c:	df000315 	stw	fp,12(sp)
 1827490:	df000304 	addi	fp,sp,12
 1827494:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1827498:	d0a00617 	ldw	r2,-32744(gp)
 182749c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 18274a0:	00003106 	br	1827568 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 18274a4:	e0bffd17 	ldw	r2,-12(fp)
 18274a8:	10800217 	ldw	r2,8(r2)
 18274ac:	1009883a 	mov	r4,r2
 18274b0:	18075980 	call	1807598 <strlen>
 18274b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 18274b8:	e0bffd17 	ldw	r2,-12(fp)
 18274bc:	10c00217 	ldw	r3,8(r2)
 18274c0:	e0bffe17 	ldw	r2,-8(fp)
 18274c4:	10bfffc4 	addi	r2,r2,-1
 18274c8:	1885883a 	add	r2,r3,r2
 18274cc:	10800003 	ldbu	r2,0(r2)
 18274d0:	10803fcc 	andi	r2,r2,255
 18274d4:	1080201c 	xori	r2,r2,128
 18274d8:	10bfe004 	addi	r2,r2,-128
 18274dc:	10800bd8 	cmpnei	r2,r2,47
 18274e0:	1000031e 	bne	r2,zero,18274f0 <alt_find_file+0x6c>
    {
      len -= 1;
 18274e4:	e0bffe17 	ldw	r2,-8(fp)
 18274e8:	10bfffc4 	addi	r2,r2,-1
 18274ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 18274f0:	e0bffe17 	ldw	r2,-8(fp)
 18274f4:	e0ffff17 	ldw	r3,-4(fp)
 18274f8:	1885883a 	add	r2,r3,r2
 18274fc:	10800003 	ldbu	r2,0(r2)
 1827500:	10803fcc 	andi	r2,r2,255
 1827504:	1080201c 	xori	r2,r2,128
 1827508:	10bfe004 	addi	r2,r2,-128
 182750c:	10800be0 	cmpeqi	r2,r2,47
 1827510:	1000081e 	bne	r2,zero,1827534 <alt_find_file+0xb0>
 1827514:	e0bffe17 	ldw	r2,-8(fp)
 1827518:	e0ffff17 	ldw	r3,-4(fp)
 182751c:	1885883a 	add	r2,r3,r2
 1827520:	10800003 	ldbu	r2,0(r2)
 1827524:	10803fcc 	andi	r2,r2,255
 1827528:	1080201c 	xori	r2,r2,128
 182752c:	10bfe004 	addi	r2,r2,-128
 1827530:	10000a1e 	bne	r2,zero,182755c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 1827534:	e0bffd17 	ldw	r2,-12(fp)
 1827538:	10800217 	ldw	r2,8(r2)
 182753c:	e0fffe17 	ldw	r3,-8(fp)
 1827540:	180d883a 	mov	r6,r3
 1827544:	e17fff17 	ldw	r5,-4(fp)
 1827548:	1009883a 	mov	r4,r2
 182754c:	183c6e40 	call	183c6e4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1827550:	1000021e 	bne	r2,zero,182755c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1827554:	e0bffd17 	ldw	r2,-12(fp)
 1827558:	00000706 	br	1827578 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 182755c:	e0bffd17 	ldw	r2,-12(fp)
 1827560:	10800017 	ldw	r2,0(r2)
 1827564:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1827568:	e0fffd17 	ldw	r3,-12(fp)
 182756c:	d0a00604 	addi	r2,gp,-32744
 1827570:	18bfcc1e 	bne	r3,r2,18274a4 <__alt_mem_mem_0+0xff8074a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1827574:	0005883a 	mov	r2,zero
}
 1827578:	e037883a 	mov	sp,fp
 182757c:	dfc00117 	ldw	ra,4(sp)
 1827580:	df000017 	ldw	fp,0(sp)
 1827584:	dec00204 	addi	sp,sp,8
 1827588:	f800283a 	ret

0182758c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 182758c:	defff804 	addi	sp,sp,-32
 1827590:	dfc00715 	stw	ra,28(sp)
 1827594:	df000615 	stw	fp,24(sp)
 1827598:	df000604 	addi	fp,sp,24
 182759c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 18275a0:	00bffa04 	movi	r2,-24
 18275a4:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 18275a8:	d0a7e717 	ldw	r2,-24676(gp)
 18275ac:	e0bffc15 	stw	r2,-16(fp)
 18275b0:	e03ffd0d 	sth	zero,-12(fp)
 18275b4:	e0bffd0b 	ldhu	r2,-12(fp)
 18275b8:	100b883a 	mov	r5,r2
 18275bc:	e13ffc17 	ldw	r4,-16(fp)
 18275c0:	180df580 	call	180df58 <xQueueSemaphoreTake>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 18275c4:	e03ffa15 	stw	zero,-24(fp)
 18275c8:	00001906 	br	1827630 <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
 18275cc:	00806134 	movhi	r2,388
 18275d0:	108f9e04 	addi	r2,r2,15992
 18275d4:	e0fffa17 	ldw	r3,-24(fp)
 18275d8:	18c00324 	muli	r3,r3,12
 18275dc:	10c5883a 	add	r2,r2,r3
 18275e0:	10800017 	ldw	r2,0(r2)
 18275e4:	10000f1e 	bne	r2,zero,1827624 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
 18275e8:	00806134 	movhi	r2,388
 18275ec:	108f9e04 	addi	r2,r2,15992
 18275f0:	e0fffa17 	ldw	r3,-24(fp)
 18275f4:	18c00324 	muli	r3,r3,12
 18275f8:	10c5883a 	add	r2,r2,r3
 18275fc:	e0fffe17 	ldw	r3,-8(fp)
 1827600:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1827604:	d0e00a17 	ldw	r3,-32728(gp)
 1827608:	e0bffa17 	ldw	r2,-24(fp)
 182760c:	1880020e 	bge	r3,r2,1827618 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
 1827610:	e0bffa17 	ldw	r2,-24(fp)
 1827614:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 1827618:	e0bffa17 	ldw	r2,-24(fp)
 182761c:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
 1827620:	00000606 	br	182763c <alt_get_fd+0xb0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1827624:	e0bffa17 	ldw	r2,-24(fp)
 1827628:	10800044 	addi	r2,r2,1
 182762c:	e0bffa15 	stw	r2,-24(fp)
 1827630:	e0bffa17 	ldw	r2,-24(fp)
 1827634:	10800810 	cmplti	r2,r2,32
 1827638:	103fe41e 	bne	r2,zero,18275cc <__alt_mem_mem_0+0xff8075cc>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 182763c:	d0a7e717 	ldw	r2,-24676(gp)
 1827640:	000f883a 	mov	r7,zero
 1827644:	000d883a 	mov	r6,zero
 1827648:	000b883a 	mov	r5,zero
 182764c:	1009883a 	mov	r4,r2
 1827650:	180da2c0 	call	180da2c <xQueueGenericSend>

  return rc;
 1827654:	e0bffb17 	ldw	r2,-20(fp)
}
 1827658:	e037883a 	mov	sp,fp
 182765c:	dfc00117 	ldw	ra,4(sp)
 1827660:	df000017 	ldw	fp,0(sp)
 1827664:	dec00204 	addi	sp,sp,8
 1827668:	f800283a 	ret

0182766c <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 182766c:	defff404 	addi	sp,sp,-48
 1827670:	dfc00b15 	stw	ra,44(sp)
 1827674:	df000a15 	stw	fp,40(sp)
 1827678:	dd000915 	stw	r20,36(sp)
 182767c:	dcc00815 	stw	r19,32(sp)
 1827680:	dc800715 	stw	r18,28(sp)
 1827684:	dc400615 	stw	r17,24(sp)
 1827688:	dc000515 	stw	r16,20(sp)
 182768c:	df000a04 	addi	fp,sp,40
 1827690:	e13ff915 	stw	r4,-28(fp)
 1827694:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 1827698:	e0bffa17 	ldw	r2,-24(fp)
 182769c:	e0bff615 	stw	r2,-40(fp)
 18276a0:	d0a80817 	ldw	r2,-24544(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 18276a4:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 18276a8:	d0a80717 	ldw	r2,-24548(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 18276ac:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 18276b0:	e0bff817 	ldw	r2,-32(fp)
 18276b4:	10005f26 	beq	r2,zero,1827834 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 18276b8:	d0a80417 	ldw	r2,-24560(gp)
 18276bc:	1029883a 	mov	r20,r2
 18276c0:	e17ff817 	ldw	r5,-32(fp)
 18276c4:	e13ff717 	ldw	r4,-36(fp)
 18276c8:	180acd00 	call	180acd0 <__udivsi3>
 18276cc:	a085883a 	add	r2,r20,r2
 18276d0:	1007883a 	mov	r3,r2
 18276d4:	e0bff917 	ldw	r2,-28(fp)
 18276d8:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 18276dc:	d0a80517 	ldw	r2,-24556(gp)
 18276e0:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 18276e4:	e0bff717 	ldw	r2,-36(fp)
 18276e8:	1021883a 	mov	r16,r2
 18276ec:	0023883a 	mov	r17,zero
 18276f0:	e17ff817 	ldw	r5,-32(fp)
 18276f4:	010003f4 	movhi	r4,15
 18276f8:	21109004 	addi	r4,r4,16960
 18276fc:	180acd00 	call	180acd0 <__udivsi3>
 1827700:	1025883a 	mov	r18,r2
 1827704:	0027883a 	mov	r19,zero
 1827708:	900d883a 	mov	r6,r18
 182770c:	980f883a 	mov	r7,r19
 1827710:	8009883a 	mov	r4,r16
 1827714:	880b883a 	mov	r5,r17
 1827718:	18404640 	call	1840464 <__muldi3>
 182771c:	1009883a 	mov	r4,r2
 1827720:	180b883a 	mov	r5,r3
 1827724:	2005883a 	mov	r2,r4
 1827728:	2807883a 	mov	r3,r5
 182772c:	018003f4 	movhi	r6,15
 1827730:	31909004 	addi	r6,r6,16960
 1827734:	000f883a 	mov	r7,zero
 1827738:	1009883a 	mov	r4,r2
 182773c:	180b883a 	mov	r5,r3
 1827740:	180a6a00 	call	180a6a0 <__umoddi3>
 1827744:	1009883a 	mov	r4,r2
 1827748:	180b883a 	mov	r5,r3
 182774c:	2005883a 	mov	r2,r4
 1827750:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 1827754:	a085883a 	add	r2,r20,r2
 1827758:	1007883a 	mov	r3,r2
 182775c:	e0bff917 	ldw	r2,-28(fp)
 1827760:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 1827764:	00001406 	br	18277b8 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 1827768:	e0bff917 	ldw	r2,-28(fp)
 182776c:	10800017 	ldw	r2,0(r2)
 1827770:	00800516 	blt	zero,r2,1827788 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 1827774:	e0bff917 	ldw	r2,-28(fp)
 1827778:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 182777c:	e0bff917 	ldw	r2,-28(fp)
 1827780:	10000115 	stw	zero,4(r2)
          break;
 1827784:	00000f06 	br	18277c4 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 1827788:	e0bff917 	ldw	r2,-28(fp)
 182778c:	10800017 	ldw	r2,0(r2)
 1827790:	10ffffc4 	addi	r3,r2,-1
 1827794:	e0bff917 	ldw	r2,-28(fp)
 1827798:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 182779c:	e0bff917 	ldw	r2,-28(fp)
 18277a0:	10c00117 	ldw	r3,4(r2)
 18277a4:	008003f4 	movhi	r2,15
 18277a8:	10909004 	addi	r2,r2,16960
 18277ac:	1887883a 	add	r3,r3,r2
 18277b0:	e0bff917 	ldw	r2,-28(fp)
 18277b4:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 18277b8:	e0bff917 	ldw	r2,-28(fp)
 18277bc:	10800117 	ldw	r2,4(r2)
 18277c0:	103fe916 	blt	r2,zero,1827768 <__alt_mem_mem_0+0xff807768>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 18277c4:	00000c06 	br	18277f8 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 18277c8:	e0bff917 	ldw	r2,-28(fp)
 18277cc:	10800017 	ldw	r2,0(r2)
 18277d0:	10c00044 	addi	r3,r2,1
 18277d4:	e0bff917 	ldw	r2,-28(fp)
 18277d8:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 18277dc:	e0bff917 	ldw	r2,-28(fp)
 18277e0:	10c00117 	ldw	r3,4(r2)
 18277e4:	00bffc74 	movhi	r2,65521
 18277e8:	10af7004 	addi	r2,r2,-16960
 18277ec:	1887883a 	add	r3,r3,r2
 18277f0:	e0bff917 	ldw	r2,-28(fp)
 18277f4:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 18277f8:	e0bff917 	ldw	r2,-28(fp)
 18277fc:	10c00117 	ldw	r3,4(r2)
 1827800:	008003f4 	movhi	r2,15
 1827804:	10908fc4 	addi	r2,r2,16959
 1827808:	10ffef16 	blt	r2,r3,18277c8 <__alt_mem_mem_0+0xff8077c8>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 182780c:	e0bff617 	ldw	r2,-40(fp)
 1827810:	10000626 	beq	r2,zero,182782c <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 1827814:	d0e80217 	ldw	r3,-24568(gp)
 1827818:	e0bff617 	ldw	r2,-40(fp)
 182781c:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 1827820:	d0e80317 	ldw	r3,-24564(gp)
 1827824:	e0bff617 	ldw	r2,-40(fp)
 1827828:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 182782c:	0005883a 	mov	r2,zero
 1827830:	00000106 	br	1827838 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 1827834:	00bfde84 	movi	r2,-134
}
 1827838:	e6fffb04 	addi	sp,fp,-20
 182783c:	dfc00617 	ldw	ra,24(sp)
 1827840:	df000517 	ldw	fp,20(sp)
 1827844:	dd000417 	ldw	r20,16(sp)
 1827848:	dcc00317 	ldw	r19,12(sp)
 182784c:	dc800217 	ldw	r18,8(sp)
 1827850:	dc400117 	ldw	r17,4(sp)
 1827854:	dc000017 	ldw	r16,0(sp)
 1827858:	dec00704 	addi	sp,sp,28
 182785c:	f800283a 	ret

01827860 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1827860:	defffe04 	addi	sp,sp,-8
 1827864:	dfc00115 	stw	ra,4(sp)
 1827868:	df000015 	stw	fp,0(sp)
 182786c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1827870:	01500004 	movi	r5,16384
 1827874:	0009883a 	mov	r4,zero
 1827878:	1838b100 	call	1838b10 <alt_icache_flush>
#endif
}
 182787c:	0001883a 	nop
 1827880:	e037883a 	mov	sp,fp
 1827884:	dfc00117 	ldw	ra,4(sp)
 1827888:	df000017 	ldw	fp,0(sp)
 182788c:	dec00204 	addi	sp,sp,8
 1827890:	f800283a 	ret

01827894 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1827894:	defff904 	addi	sp,sp,-28
 1827898:	dfc00615 	stw	ra,24(sp)
 182789c:	df000515 	stw	fp,20(sp)
 18278a0:	df000504 	addi	fp,sp,20
 18278a4:	e13ffc15 	stw	r4,-16(fp)
 18278a8:	e17ffd15 	stw	r5,-12(fp)
 18278ac:	e1bffe15 	stw	r6,-8(fp)
 18278b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 18278b4:	e0800217 	ldw	r2,8(fp)
 18278b8:	d8800015 	stw	r2,0(sp)
 18278bc:	e1ffff17 	ldw	r7,-4(fp)
 18278c0:	e1bffe17 	ldw	r6,-8(fp)
 18278c4:	e17ffd17 	ldw	r5,-12(fp)
 18278c8:	e13ffc17 	ldw	r4,-16(fp)
 18278cc:	1827a440 	call	1827a44 <alt_iic_isr_register>
}  
 18278d0:	e037883a 	mov	sp,fp
 18278d4:	dfc00117 	ldw	ra,4(sp)
 18278d8:	df000017 	ldw	fp,0(sp)
 18278dc:	dec00204 	addi	sp,sp,8
 18278e0:	f800283a 	ret

018278e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 18278e4:	defff904 	addi	sp,sp,-28
 18278e8:	df000615 	stw	fp,24(sp)
 18278ec:	df000604 	addi	fp,sp,24
 18278f0:	e13ffe15 	stw	r4,-8(fp)
 18278f4:	e17fff15 	stw	r5,-4(fp)
 18278f8:	e0bfff17 	ldw	r2,-4(fp)
 18278fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1827900:	0005303a 	rdctl	r2,status
 1827904:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1827908:	e0fffb17 	ldw	r3,-20(fp)
 182790c:	00bfff84 	movi	r2,-2
 1827910:	1884703a 	and	r2,r3,r2
 1827914:	1001703a 	wrctl	status,r2
  
  return context;
 1827918:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 182791c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1827920:	00c00044 	movi	r3,1
 1827924:	e0bffa17 	ldw	r2,-24(fp)
 1827928:	1884983a 	sll	r2,r3,r2
 182792c:	1007883a 	mov	r3,r2
 1827930:	d0a80617 	ldw	r2,-24552(gp)
 1827934:	1884b03a 	or	r2,r3,r2
 1827938:	d0a80615 	stw	r2,-24552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 182793c:	d0a80617 	ldw	r2,-24552(gp)
 1827940:	100170fa 	wrctl	ienable,r2
 1827944:	e0bffc17 	ldw	r2,-16(fp)
 1827948:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 182794c:	e0bffd17 	ldw	r2,-12(fp)
 1827950:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1827954:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1827958:	0001883a 	nop
}
 182795c:	e037883a 	mov	sp,fp
 1827960:	df000017 	ldw	fp,0(sp)
 1827964:	dec00104 	addi	sp,sp,4
 1827968:	f800283a 	ret

0182796c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 182796c:	defff904 	addi	sp,sp,-28
 1827970:	df000615 	stw	fp,24(sp)
 1827974:	df000604 	addi	fp,sp,24
 1827978:	e13ffe15 	stw	r4,-8(fp)
 182797c:	e17fff15 	stw	r5,-4(fp)
 1827980:	e0bfff17 	ldw	r2,-4(fp)
 1827984:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1827988:	0005303a 	rdctl	r2,status
 182798c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1827990:	e0fffb17 	ldw	r3,-20(fp)
 1827994:	00bfff84 	movi	r2,-2
 1827998:	1884703a 	and	r2,r3,r2
 182799c:	1001703a 	wrctl	status,r2
  
  return context;
 18279a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 18279a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 18279a8:	00c00044 	movi	r3,1
 18279ac:	e0bffa17 	ldw	r2,-24(fp)
 18279b0:	1884983a 	sll	r2,r3,r2
 18279b4:	0084303a 	nor	r2,zero,r2
 18279b8:	1007883a 	mov	r3,r2
 18279bc:	d0a80617 	ldw	r2,-24552(gp)
 18279c0:	1884703a 	and	r2,r3,r2
 18279c4:	d0a80615 	stw	r2,-24552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 18279c8:	d0a80617 	ldw	r2,-24552(gp)
 18279cc:	100170fa 	wrctl	ienable,r2
 18279d0:	e0bffc17 	ldw	r2,-16(fp)
 18279d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 18279d8:	e0bffd17 	ldw	r2,-12(fp)
 18279dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 18279e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 18279e4:	0001883a 	nop
}
 18279e8:	e037883a 	mov	sp,fp
 18279ec:	df000017 	ldw	fp,0(sp)
 18279f0:	dec00104 	addi	sp,sp,4
 18279f4:	f800283a 	ret

018279f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 18279f8:	defffc04 	addi	sp,sp,-16
 18279fc:	df000315 	stw	fp,12(sp)
 1827a00:	df000304 	addi	fp,sp,12
 1827a04:	e13ffe15 	stw	r4,-8(fp)
 1827a08:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1827a0c:	000530fa 	rdctl	r2,ienable
 1827a10:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1827a14:	00c00044 	movi	r3,1
 1827a18:	e0bfff17 	ldw	r2,-4(fp)
 1827a1c:	1884983a 	sll	r2,r3,r2
 1827a20:	1007883a 	mov	r3,r2
 1827a24:	e0bffd17 	ldw	r2,-12(fp)
 1827a28:	1884703a 	and	r2,r3,r2
 1827a2c:	1004c03a 	cmpne	r2,r2,zero
 1827a30:	10803fcc 	andi	r2,r2,255
}
 1827a34:	e037883a 	mov	sp,fp
 1827a38:	df000017 	ldw	fp,0(sp)
 1827a3c:	dec00104 	addi	sp,sp,4
 1827a40:	f800283a 	ret

01827a44 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1827a44:	defff504 	addi	sp,sp,-44
 1827a48:	dfc00a15 	stw	ra,40(sp)
 1827a4c:	df000915 	stw	fp,36(sp)
 1827a50:	df000904 	addi	fp,sp,36
 1827a54:	e13ffc15 	stw	r4,-16(fp)
 1827a58:	e17ffd15 	stw	r5,-12(fp)
 1827a5c:	e1bffe15 	stw	r6,-8(fp)
 1827a60:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 1827a64:	00bffa84 	movi	r2,-22
 1827a68:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1827a6c:	e0bffd17 	ldw	r2,-12(fp)
 1827a70:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1827a74:	e0bff817 	ldw	r2,-32(fp)
 1827a78:	10800808 	cmpgei	r2,r2,32
 1827a7c:	1000271e 	bne	r2,zero,1827b1c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1827a80:	0005303a 	rdctl	r2,status
 1827a84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1827a88:	e0fffb17 	ldw	r3,-20(fp)
 1827a8c:	00bfff84 	movi	r2,-2
 1827a90:	1884703a 	and	r2,r3,r2
 1827a94:	1001703a 	wrctl	status,r2
  
  return context;
 1827a98:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1827a9c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 1827aa0:	008061f4 	movhi	r2,391
 1827aa4:	10a80e04 	addi	r2,r2,-24520
 1827aa8:	e0fff817 	ldw	r3,-32(fp)
 1827aac:	180690fa 	slli	r3,r3,3
 1827ab0:	10c5883a 	add	r2,r2,r3
 1827ab4:	e0fffe17 	ldw	r3,-8(fp)
 1827ab8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 1827abc:	008061f4 	movhi	r2,391
 1827ac0:	10a80e04 	addi	r2,r2,-24520
 1827ac4:	e0fff817 	ldw	r3,-32(fp)
 1827ac8:	180690fa 	slli	r3,r3,3
 1827acc:	10c5883a 	add	r2,r2,r3
 1827ad0:	10800104 	addi	r2,r2,4
 1827ad4:	e0ffff17 	ldw	r3,-4(fp)
 1827ad8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1827adc:	e0bffe17 	ldw	r2,-8(fp)
 1827ae0:	10000526 	beq	r2,zero,1827af8 <alt_iic_isr_register+0xb4>
 1827ae4:	e0bff817 	ldw	r2,-32(fp)
 1827ae8:	100b883a 	mov	r5,r2
 1827aec:	e13ffc17 	ldw	r4,-16(fp)
 1827af0:	18278e40 	call	18278e4 <alt_ic_irq_enable>
 1827af4:	00000406 	br	1827b08 <alt_iic_isr_register+0xc4>
 1827af8:	e0bff817 	ldw	r2,-32(fp)
 1827afc:	100b883a 	mov	r5,r2
 1827b00:	e13ffc17 	ldw	r4,-16(fp)
 1827b04:	182796c0 	call	182796c <alt_ic_irq_disable>
 1827b08:	e0bff715 	stw	r2,-36(fp)
 1827b0c:	e0bffa17 	ldw	r2,-24(fp)
 1827b10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1827b14:	e0bff917 	ldw	r2,-28(fp)
 1827b18:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1827b1c:	e0bff717 	ldw	r2,-36(fp)
}
 1827b20:	e037883a 	mov	sp,fp
 1827b24:	dfc00117 	ldw	ra,4(sp)
 1827b28:	df000017 	ldw	fp,0(sp)
 1827b2c:	dec00204 	addi	sp,sp,8
 1827b30:	f800283a 	ret

01827b34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1827b34:	defffe04 	addi	sp,sp,-8
 1827b38:	dfc00115 	stw	ra,4(sp)
 1827b3c:	df000015 	stw	fp,0(sp)
 1827b40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1827b44:	d0a01917 	ldw	r2,-32668(gp)
 1827b48:	10000326 	beq	r2,zero,1827b58 <alt_get_errno+0x24>
 1827b4c:	d0a01917 	ldw	r2,-32668(gp)
 1827b50:	103ee83a 	callr	r2
 1827b54:	00000106 	br	1827b5c <alt_get_errno+0x28>
 1827b58:	d0a7ce04 	addi	r2,gp,-24776
}
 1827b5c:	e037883a 	mov	sp,fp
 1827b60:	dfc00117 	ldw	ra,4(sp)
 1827b64:	df000017 	ldw	fp,0(sp)
 1827b68:	dec00204 	addi	sp,sp,8
 1827b6c:	f800283a 	ret

01827b70 <alt_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1827b70:	defff904 	addi	sp,sp,-28
 1827b74:	dfc00615 	stw	ra,24(sp)
 1827b78:	df000515 	stw	fp,20(sp)
 1827b7c:	df000504 	addi	fp,sp,20
 1827b80:	e13ffd15 	stw	r4,-12(fp)
 1827b84:	e17ffe15 	stw	r5,-8(fp)
 1827b88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1827b8c:	e0bffd17 	ldw	r2,-12(fp)
 1827b90:	10000616 	blt	r2,zero,1827bac <alt_read+0x3c>
 1827b94:	e0bffd17 	ldw	r2,-12(fp)
 1827b98:	10c00324 	muli	r3,r2,12
 1827b9c:	00806134 	movhi	r2,388
 1827ba0:	108f9e04 	addi	r2,r2,15992
 1827ba4:	1885883a 	add	r2,r3,r2
 1827ba8:	00000106 	br	1827bb0 <alt_read+0x40>
 1827bac:	0005883a 	mov	r2,zero
 1827bb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1827bb4:	e0bffb17 	ldw	r2,-20(fp)
 1827bb8:	10002226 	beq	r2,zero,1827c44 <alt_read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1827bbc:	e0bffb17 	ldw	r2,-20(fp)
 1827bc0:	10800217 	ldw	r2,8(r2)
 1827bc4:	108000cc 	andi	r2,r2,3
 1827bc8:	10800060 	cmpeqi	r2,r2,1
 1827bcc:	1000181e 	bne	r2,zero,1827c30 <alt_read+0xc0>
        (fd->dev->read))
 1827bd0:	e0bffb17 	ldw	r2,-20(fp)
 1827bd4:	10800017 	ldw	r2,0(r2)
 1827bd8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1827bdc:	10001426 	beq	r2,zero,1827c30 <alt_read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1827be0:	e0bffb17 	ldw	r2,-20(fp)
 1827be4:	10800017 	ldw	r2,0(r2)
 1827be8:	10800517 	ldw	r2,20(r2)
 1827bec:	e0ffff17 	ldw	r3,-4(fp)
 1827bf0:	180d883a 	mov	r6,r3
 1827bf4:	e17ffe17 	ldw	r5,-8(fp)
 1827bf8:	e13ffb17 	ldw	r4,-20(fp)
 1827bfc:	103ee83a 	callr	r2
 1827c00:	e0bffc15 	stw	r2,-16(fp)
 1827c04:	e0bffc17 	ldw	r2,-16(fp)
 1827c08:	1000070e 	bge	r2,zero,1827c28 <alt_read+0xb8>
        {
          ALT_ERRNO = -rval;
 1827c0c:	1827b340 	call	1827b34 <alt_get_errno>
 1827c10:	1007883a 	mov	r3,r2
 1827c14:	e0bffc17 	ldw	r2,-16(fp)
 1827c18:	0085c83a 	sub	r2,zero,r2
 1827c1c:	18800015 	stw	r2,0(r3)
          return -1;
 1827c20:	00bfffc4 	movi	r2,-1
 1827c24:	00000c06 	br	1827c58 <alt_read+0xe8>
        }
        return rval;
 1827c28:	e0bffc17 	ldw	r2,-16(fp)
 1827c2c:	00000a06 	br	1827c58 <alt_read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1827c30:	1827b340 	call	1827b34 <alt_get_errno>
 1827c34:	1007883a 	mov	r3,r2
 1827c38:	00800344 	movi	r2,13
 1827c3c:	18800015 	stw	r2,0(r3)
 1827c40:	00000406 	br	1827c54 <alt_read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1827c44:	1827b340 	call	1827b34 <alt_get_errno>
 1827c48:	1007883a 	mov	r3,r2
 1827c4c:	00801444 	movi	r2,81
 1827c50:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1827c54:	00bfffc4 	movi	r2,-1
}
 1827c58:	e037883a 	mov	sp,fp
 1827c5c:	dfc00117 	ldw	ra,4(sp)
 1827c60:	df000017 	ldw	fp,0(sp)
 1827c64:	dec00204 	addi	sp,sp,8
 1827c68:	f800283a 	ret

01827c6c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1827c6c:	defffa04 	addi	sp,sp,-24
 1827c70:	df000515 	stw	fp,20(sp)
 1827c74:	df000504 	addi	fp,sp,20
 1827c78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1827c7c:	0005303a 	rdctl	r2,status
 1827c80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1827c84:	e0fffc17 	ldw	r3,-16(fp)
 1827c88:	00bfff84 	movi	r2,-2
 1827c8c:	1884703a 	and	r2,r3,r2
 1827c90:	1001703a 	wrctl	status,r2
  
  return context;
 1827c94:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1827c98:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 1827c9c:	e0bfff17 	ldw	r2,-4(fp)
 1827ca0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1827ca4:	e0bffd17 	ldw	r2,-12(fp)
 1827ca8:	10800017 	ldw	r2,0(r2)
 1827cac:	e0fffd17 	ldw	r3,-12(fp)
 1827cb0:	18c00117 	ldw	r3,4(r3)
 1827cb4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1827cb8:	e0bffd17 	ldw	r2,-12(fp)
 1827cbc:	10800117 	ldw	r2,4(r2)
 1827cc0:	e0fffd17 	ldw	r3,-12(fp)
 1827cc4:	18c00017 	ldw	r3,0(r3)
 1827cc8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1827ccc:	e0bffd17 	ldw	r2,-12(fp)
 1827cd0:	e0fffd17 	ldw	r3,-12(fp)
 1827cd4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1827cd8:	e0bffd17 	ldw	r2,-12(fp)
 1827cdc:	e0fffd17 	ldw	r3,-12(fp)
 1827ce0:	10c00015 	stw	r3,0(r2)
 1827ce4:	e0bffb17 	ldw	r2,-20(fp)
 1827ce8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1827cec:	e0bffe17 	ldw	r2,-8(fp)
 1827cf0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1827cf4:	0001883a 	nop
 1827cf8:	e037883a 	mov	sp,fp
 1827cfc:	df000017 	ldw	fp,0(sp)
 1827d00:	dec00104 	addi	sp,sp,4
 1827d04:	f800283a 	ret

01827d08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1827d08:	defffb04 	addi	sp,sp,-20
 1827d0c:	dfc00415 	stw	ra,16(sp)
 1827d10:	df000315 	stw	fp,12(sp)
 1827d14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1827d18:	d0a01b17 	ldw	r2,-32660(gp)
 1827d1c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1827d20:	d0a80817 	ldw	r2,-24544(gp)
 1827d24:	10800044 	addi	r2,r2,1
 1827d28:	d0a80815 	stw	r2,-24544(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1827d2c:	00002e06 	br	1827de8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1827d30:	e0bffd17 	ldw	r2,-12(fp)
 1827d34:	10800017 	ldw	r2,0(r2)
 1827d38:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1827d3c:	e0bffd17 	ldw	r2,-12(fp)
 1827d40:	10800403 	ldbu	r2,16(r2)
 1827d44:	10803fcc 	andi	r2,r2,255
 1827d48:	10000426 	beq	r2,zero,1827d5c <alt_tick+0x54>
 1827d4c:	d0a80817 	ldw	r2,-24544(gp)
 1827d50:	1000021e 	bne	r2,zero,1827d5c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1827d54:	e0bffd17 	ldw	r2,-12(fp)
 1827d58:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1827d5c:	e0bffd17 	ldw	r2,-12(fp)
 1827d60:	10800217 	ldw	r2,8(r2)
 1827d64:	d0e80817 	ldw	r3,-24544(gp)
 1827d68:	18801d36 	bltu	r3,r2,1827de0 <alt_tick+0xd8>
 1827d6c:	e0bffd17 	ldw	r2,-12(fp)
 1827d70:	10800403 	ldbu	r2,16(r2)
 1827d74:	10803fcc 	andi	r2,r2,255
 1827d78:	1000191e 	bne	r2,zero,1827de0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 1827d7c:	e0bffd17 	ldw	r2,-12(fp)
 1827d80:	10800317 	ldw	r2,12(r2)
 1827d84:	e0fffd17 	ldw	r3,-12(fp)
 1827d88:	18c00517 	ldw	r3,20(r3)
 1827d8c:	1809883a 	mov	r4,r3
 1827d90:	103ee83a 	callr	r2
 1827d94:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1827d98:	e0bfff17 	ldw	r2,-4(fp)
 1827d9c:	1000031e 	bne	r2,zero,1827dac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 1827da0:	e13ffd17 	ldw	r4,-12(fp)
 1827da4:	1827c6c0 	call	1827c6c <alt_alarm_stop>
 1827da8:	00000d06 	br	1827de0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 1827dac:	e0bffd17 	ldw	r2,-12(fp)
 1827db0:	10c00217 	ldw	r3,8(r2)
 1827db4:	e0bfff17 	ldw	r2,-4(fp)
 1827db8:	1887883a 	add	r3,r3,r2
 1827dbc:	e0bffd17 	ldw	r2,-12(fp)
 1827dc0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1827dc4:	e0bffd17 	ldw	r2,-12(fp)
 1827dc8:	10c00217 	ldw	r3,8(r2)
 1827dcc:	d0a80817 	ldw	r2,-24544(gp)
 1827dd0:	1880032e 	bgeu	r3,r2,1827de0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1827dd4:	e0bffd17 	ldw	r2,-12(fp)
 1827dd8:	00c00044 	movi	r3,1
 1827ddc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1827de0:	e0bffe17 	ldw	r2,-8(fp)
 1827de4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1827de8:	e0fffd17 	ldw	r3,-12(fp)
 1827dec:	d0a01b04 	addi	r2,gp,-32660
 1827df0:	18bfcf1e 	bne	r3,r2,1827d30 <__alt_mem_mem_0+0xff807d30>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1827df4:	1826ed80 	call	1826ed8 <vPortSysTickHandler>
}
 1827df8:	0001883a 	nop
 1827dfc:	e037883a 	mov	sp,fp
 1827e00:	dfc00117 	ldw	ra,4(sp)
 1827e04:	df000017 	ldw	fp,0(sp)
 1827e08:	dec00204 	addi	sp,sp,8
 1827e0c:	f800283a 	ret

01827e10 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
 1827e10:	defffd04 	addi	sp,sp,-12
 1827e14:	dfc00215 	stw	ra,8(sp)
 1827e18:	df000115 	stw	fp,4(sp)
 1827e1c:	df000104 	addi	fp,sp,4
 1827e20:	e13fff15 	stw	r4,-4(fp)
  ALT_LINK_ERROR("alt_uncached_malloc() is not available because CPU is not configured to use bit 31 of address to bypass data cache");
  return NULL;
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
 1827e24:	e13fff17 	ldw	r4,-4(fp)
 1827e28:	183c6bc0 	call	183c6bc <malloc>
#endif /* No data cache */
}
 1827e2c:	e037883a 	mov	sp,fp
 1827e30:	dfc00117 	ldw	ra,4(sp)
 1827e34:	df000017 	ldw	fp,0(sp)
 1827e38:	dec00204 	addi	sp,sp,8
 1827e3c:	f800283a 	ret

01827e40 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1827e40:	defffd04 	addi	sp,sp,-12
 1827e44:	dfc00215 	stw	ra,8(sp)
 1827e48:	df000115 	stw	fp,4(sp)
 1827e4c:	df000104 	addi	fp,sp,4
 1827e50:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1827e54:	e13fff17 	ldw	r4,-4(fp)
 1827e58:	18389b80 	call	18389b8 <alt_busy_sleep>
}
 1827e5c:	e037883a 	mov	sp,fp
 1827e60:	dfc00117 	ldw	ra,4(sp)
 1827e64:	df000017 	ldw	fp,0(sp)
 1827e68:	dec00204 	addi	sp,sp,8
 1827e6c:	f800283a 	ret

01827e70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1827e70:	defffe04 	addi	sp,sp,-8
 1827e74:	dfc00115 	stw	ra,4(sp)
 1827e78:	df000015 	stw	fp,0(sp)
 1827e7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1827e80:	d0a01917 	ldw	r2,-32668(gp)
 1827e84:	10000326 	beq	r2,zero,1827e94 <alt_get_errno+0x24>
 1827e88:	d0a01917 	ldw	r2,-32668(gp)
 1827e8c:	103ee83a 	callr	r2
 1827e90:	00000106 	br	1827e98 <alt_get_errno+0x28>
 1827e94:	d0a7ce04 	addi	r2,gp,-24776
}
 1827e98:	e037883a 	mov	sp,fp
 1827e9c:	dfc00117 	ldw	ra,4(sp)
 1827ea0:	df000017 	ldw	fp,0(sp)
 1827ea4:	dec00204 	addi	sp,sp,8
 1827ea8:	f800283a 	ret

01827eac <alt_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1827eac:	defff904 	addi	sp,sp,-28
 1827eb0:	dfc00615 	stw	ra,24(sp)
 1827eb4:	df000515 	stw	fp,20(sp)
 1827eb8:	df000504 	addi	fp,sp,20
 1827ebc:	e13ffd15 	stw	r4,-12(fp)
 1827ec0:	e17ffe15 	stw	r5,-8(fp)
 1827ec4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1827ec8:	e0bffd17 	ldw	r2,-12(fp)
 1827ecc:	10000616 	blt	r2,zero,1827ee8 <alt_write+0x3c>
 1827ed0:	e0bffd17 	ldw	r2,-12(fp)
 1827ed4:	10c00324 	muli	r3,r2,12
 1827ed8:	00806134 	movhi	r2,388
 1827edc:	108f9e04 	addi	r2,r2,15992
 1827ee0:	1885883a 	add	r2,r3,r2
 1827ee4:	00000106 	br	1827eec <alt_write+0x40>
 1827ee8:	0005883a 	mov	r2,zero
 1827eec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1827ef0:	e0bffb17 	ldw	r2,-20(fp)
 1827ef4:	10002126 	beq	r2,zero,1827f7c <alt_write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1827ef8:	e0bffb17 	ldw	r2,-20(fp)
 1827efc:	10800217 	ldw	r2,8(r2)
 1827f00:	108000cc 	andi	r2,r2,3
 1827f04:	10001826 	beq	r2,zero,1827f68 <alt_write+0xbc>
 1827f08:	e0bffb17 	ldw	r2,-20(fp)
 1827f0c:	10800017 	ldw	r2,0(r2)
 1827f10:	10800617 	ldw	r2,24(r2)
 1827f14:	10001426 	beq	r2,zero,1827f68 <alt_write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1827f18:	e0bffb17 	ldw	r2,-20(fp)
 1827f1c:	10800017 	ldw	r2,0(r2)
 1827f20:	10800617 	ldw	r2,24(r2)
 1827f24:	e0ffff17 	ldw	r3,-4(fp)
 1827f28:	180d883a 	mov	r6,r3
 1827f2c:	e17ffe17 	ldw	r5,-8(fp)
 1827f30:	e13ffb17 	ldw	r4,-20(fp)
 1827f34:	103ee83a 	callr	r2
 1827f38:	e0bffc15 	stw	r2,-16(fp)
 1827f3c:	e0bffc17 	ldw	r2,-16(fp)
 1827f40:	1000070e 	bge	r2,zero,1827f60 <alt_write+0xb4>
      {
        ALT_ERRNO = -rval;
 1827f44:	1827e700 	call	1827e70 <alt_get_errno>
 1827f48:	1007883a 	mov	r3,r2
 1827f4c:	e0bffc17 	ldw	r2,-16(fp)
 1827f50:	0085c83a 	sub	r2,zero,r2
 1827f54:	18800015 	stw	r2,0(r3)
        return -1;
 1827f58:	00bfffc4 	movi	r2,-1
 1827f5c:	00000c06 	br	1827f90 <alt_write+0xe4>
      }
      return rval;
 1827f60:	e0bffc17 	ldw	r2,-16(fp)
 1827f64:	00000a06 	br	1827f90 <alt_write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1827f68:	1827e700 	call	1827e70 <alt_get_errno>
 1827f6c:	1007883a 	mov	r3,r2
 1827f70:	00800344 	movi	r2,13
 1827f74:	18800015 	stw	r2,0(r3)
 1827f78:	00000406 	br	1827f8c <alt_write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1827f7c:	1827e700 	call	1827e70 <alt_get_errno>
 1827f80:	1007883a 	mov	r3,r2
 1827f84:	00801444 	movi	r2,81
 1827f88:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1827f8c:	00bfffc4 	movi	r2,-1
}
 1827f90:	e037883a 	mov	sp,fp
 1827f94:	dfc00117 	ldw	ra,4(sp)
 1827f98:	df000017 	ldw	fp,0(sp)
 1827f9c:	dec00204 	addi	sp,sp,8
 1827fa0:	f800283a 	ret

01827fa4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1827fa4:	deffff04 	addi	sp,sp,-4
 1827fa8:	df000015 	stw	fp,0(sp)
 1827fac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1827fb0:	000170fa 	wrctl	ienable,zero
}
 1827fb4:	0001883a 	nop
 1827fb8:	e037883a 	mov	sp,fp
 1827fbc:	df000017 	ldw	fp,0(sp)
 1827fc0:	dec00104 	addi	sp,sp,4
 1827fc4:	f800283a 	ret

01827fc8 <lwip_socket_init>:
 * Initialize this module. This function has to be called before any other
 * functions in this module!
 */
void
lwip_socket_init(void)
{
 1827fc8:	deffff04 	addi	sp,sp,-4
 1827fcc:	df000015 	stw	fp,0(sp)
 1827fd0:	d839883a 	mov	fp,sp
}
 1827fd4:	0001883a 	nop
 1827fd8:	e037883a 	mov	sp,fp
 1827fdc:	df000017 	ldw	fp,0(sp)
 1827fe0:	dec00104 	addi	sp,sp,4
 1827fe4:	f800283a 	ret

01827fe8 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int s)
{
 1827fe8:	defffd04 	addi	sp,sp,-12
 1827fec:	df000215 	stw	fp,8(sp)
 1827ff0:	df000204 	addi	fp,sp,8
 1827ff4:	e13fff15 	stw	r4,-4(fp)
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;
 1827ff8:	e0bfff17 	ldw	r2,-4(fp)
 1827ffc:	10bff804 	addi	r2,r2,-32
 1828000:	e0bfff15 	stw	r2,-4(fp)

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 1828004:	e0bfff17 	ldw	r2,-4(fp)
 1828008:	10000316 	blt	r2,zero,1828018 <get_socket+0x30>
 182800c:	e0bfff17 	ldw	r2,-4(fp)
 1828010:	10800a90 	cmplti	r2,r2,42
 1828014:	1000021e 	bne	r2,zero,1828020 <get_socket+0x38>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s));
    set_errno(EBADF);
    return NULL;
 1828018:	0005883a 	mov	r2,zero
 182801c:	00000c06 	br	1828050 <get_socket+0x68>
  }

  sock = &sockets[s];
 1828020:	e0bfff17 	ldw	r2,-4(fp)
 1828024:	10c00624 	muli	r3,r2,24
 1828028:	00806134 	movhi	r2,388
 182802c:	109dd904 	addi	r2,r2,30564
 1828030:	1885883a 	add	r2,r3,r2
 1828034:	e0bffe15 	stw	r2,-8(fp)

  if (!sock->conn) {
 1828038:	e0bffe17 	ldw	r2,-8(fp)
 182803c:	10800017 	ldw	r2,0(r2)
 1828040:	1000021e 	bne	r2,zero,182804c <get_socket+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s));
    set_errno(EBADF);
    return NULL;
 1828044:	0005883a 	mov	r2,zero
 1828048:	00000106 	br	1828050 <get_socket+0x68>
  }

  return sock;
 182804c:	e0bffe17 	ldw	r2,-8(fp)
}
 1828050:	e037883a 	mov	sp,fp
 1828054:	df000017 	ldw	fp,0(sp)
 1828058:	dec00104 	addi	sp,sp,4
 182805c:	f800283a 	ret

01828060 <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
 1828060:	defffe04 	addi	sp,sp,-8
 1828064:	df000115 	stw	fp,4(sp)
 1828068:	df000104 	addi	fp,sp,4
 182806c:	e13fff15 	stw	r4,-4(fp)
	s -= LWIP_SOCKET_OFFSET;
 1828070:	e0bfff17 	ldw	r2,-4(fp)
 1828074:	10bff804 	addi	r2,r2,-32
 1828078:	e0bfff15 	stw	r2,-4(fp)

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 182807c:	e0bfff17 	ldw	r2,-4(fp)
 1828080:	10000316 	blt	r2,zero,1828090 <tryget_socket+0x30>
 1828084:	e0bfff17 	ldw	r2,-4(fp)
 1828088:	10800a90 	cmplti	r2,r2,42
 182808c:	1000021e 	bne	r2,zero,1828098 <tryget_socket+0x38>
    return NULL;
 1828090:	0005883a 	mov	r2,zero
 1828094:	00000e06 	br	18280d0 <tryget_socket+0x70>
  }
  if (!sockets[s].conn) {
 1828098:	00806134 	movhi	r2,388
 182809c:	109dd904 	addi	r2,r2,30564
 18280a0:	e0ffff17 	ldw	r3,-4(fp)
 18280a4:	18c00624 	muli	r3,r3,24
 18280a8:	10c5883a 	add	r2,r2,r3
 18280ac:	10800017 	ldw	r2,0(r2)
 18280b0:	1000021e 	bne	r2,zero,18280bc <tryget_socket+0x5c>
    return NULL;
 18280b4:	0005883a 	mov	r2,zero
 18280b8:	00000506 	br	18280d0 <tryget_socket+0x70>
  }
  return &sockets[s];
 18280bc:	e0bfff17 	ldw	r2,-4(fp)
 18280c0:	10c00624 	muli	r3,r2,24
 18280c4:	00806134 	movhi	r2,388
 18280c8:	109dd904 	addi	r2,r2,30564
 18280cc:	1885883a 	add	r2,r3,r2
}
 18280d0:	e037883a 	mov	sp,fp
 18280d4:	df000017 	ldw	fp,0(sp)
 18280d8:	dec00104 	addi	sp,sp,4
 18280dc:	f800283a 	ret

018280e0 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 18280e0:	defffb04 	addi	sp,sp,-20
 18280e4:	dfc00415 	stw	ra,16(sp)
 18280e8:	df000315 	stw	fp,12(sp)
 18280ec:	df000304 	addi	fp,sp,12
 18280f0:	e13ffe15 	stw	r4,-8(fp)
 18280f4:	e17fff15 	stw	r5,-4(fp)
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 18280f8:	e03ffd15 	stw	zero,-12(fp)
 18280fc:	00005106 	br	1828244 <alloc_socket+0x164>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 1828100:	1810de40 	call	1810de4 <vTaskEnterCritical>
    if (!sockets[i].conn) {
 1828104:	00806134 	movhi	r2,388
 1828108:	109dd904 	addi	r2,r2,30564
 182810c:	e0fffd17 	ldw	r3,-12(fp)
 1828110:	18c00624 	muli	r3,r3,24
 1828114:	10c5883a 	add	r2,r2,r3
 1828118:	10800017 	ldw	r2,0(r2)
 182811c:	1000451e 	bne	r2,zero,1828234 <alloc_socket+0x154>
      sockets[i].conn       = newconn;
 1828120:	00806134 	movhi	r2,388
 1828124:	109dd904 	addi	r2,r2,30564
 1828128:	e0fffd17 	ldw	r3,-12(fp)
 182812c:	18c00624 	muli	r3,r3,24
 1828130:	10c5883a 	add	r2,r2,r3
 1828134:	e0fffe17 	ldw	r3,-8(fp)
 1828138:	10c00015 	stw	r3,0(r2)
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 182813c:	1810e380 	call	1810e38 <vTaskExitCritical>
      sockets[i].lastdata   = NULL;
 1828140:	00806134 	movhi	r2,388
 1828144:	109dd904 	addi	r2,r2,30564
 1828148:	e0fffd17 	ldw	r3,-12(fp)
 182814c:	18c00624 	muli	r3,r3,24
 1828150:	10c5883a 	add	r2,r2,r3
 1828154:	10800104 	addi	r2,r2,4
 1828158:	10000015 	stw	zero,0(r2)
      sockets[i].lastoffset = 0;
 182815c:	00806134 	movhi	r2,388
 1828160:	109dd904 	addi	r2,r2,30564
 1828164:	e0fffd17 	ldw	r3,-12(fp)
 1828168:	18c00624 	muli	r3,r3,24
 182816c:	10c5883a 	add	r2,r2,r3
 1828170:	10800204 	addi	r2,r2,8
 1828174:	1000000d 	sth	zero,0(r2)
      sockets[i].rcvevent   = 0;
 1828178:	00806134 	movhi	r2,388
 182817c:	109dd904 	addi	r2,r2,30564
 1828180:	e0fffd17 	ldw	r3,-12(fp)
 1828184:	18c00624 	muli	r3,r3,24
 1828188:	10c5883a 	add	r2,r2,r3
 182818c:	10800284 	addi	r2,r2,10
 1828190:	1000000d 	sth	zero,0(r2)
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (newconn->type == NETCONN_TCP ? (accepted != 0) : 1);
 1828194:	e0bffe17 	ldw	r2,-8(fp)
 1828198:	10800017 	ldw	r2,0(r2)
 182819c:	10800418 	cmpnei	r2,r2,16
 18281a0:	1000021e 	bne	r2,zero,18281ac <alloc_socket+0xcc>
 18281a4:	e0bfff17 	ldw	r2,-4(fp)
 18281a8:	10000226 	beq	r2,zero,18281b4 <alloc_socket+0xd4>
 18281ac:	00800044 	movi	r2,1
 18281b0:	00000106 	br	18281b8 <alloc_socket+0xd8>
 18281b4:	0005883a 	mov	r2,zero
 18281b8:	1009883a 	mov	r4,r2
 18281bc:	00806134 	movhi	r2,388
 18281c0:	109dd904 	addi	r2,r2,30564
 18281c4:	e0fffd17 	ldw	r3,-12(fp)
 18281c8:	18c00624 	muli	r3,r3,24
 18281cc:	10c5883a 	add	r2,r2,r3
 18281d0:	10800304 	addi	r2,r2,12
 18281d4:	1100000d 	sth	r4,0(r2)
      sockets[i].errevent   = 0;
 18281d8:	00806134 	movhi	r2,388
 18281dc:	109dd904 	addi	r2,r2,30564
 18281e0:	e0fffd17 	ldw	r3,-12(fp)
 18281e4:	18c00624 	muli	r3,r3,24
 18281e8:	10c5883a 	add	r2,r2,r3
 18281ec:	10800384 	addi	r2,r2,14
 18281f0:	1000000d 	sth	zero,0(r2)
      sockets[i].err        = 0;
 18281f4:	00806134 	movhi	r2,388
 18281f8:	109dd904 	addi	r2,r2,30564
 18281fc:	e0fffd17 	ldw	r3,-12(fp)
 1828200:	18c00624 	muli	r3,r3,24
 1828204:	10c5883a 	add	r2,r2,r3
 1828208:	10800404 	addi	r2,r2,16
 182820c:	10000015 	stw	zero,0(r2)
      sockets[i].select_waiting = 0;
 1828210:	00806134 	movhi	r2,388
 1828214:	109dd904 	addi	r2,r2,30564
 1828218:	e0fffd17 	ldw	r3,-12(fp)
 182821c:	18c00624 	muli	r3,r3,24
 1828220:	10c5883a 	add	r2,r2,r3
 1828224:	10800504 	addi	r2,r2,20
 1828228:	10000015 	stw	zero,0(r2)
      return i;
 182822c:	e0bffd17 	ldw	r2,-12(fp)
 1828230:	00000806 	br	1828254 <alloc_socket+0x174>
    }
    SYS_ARCH_UNPROTECT(lev);
 1828234:	1810e380 	call	1810e38 <vTaskExitCritical>
{
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 1828238:	e0bffd17 	ldw	r2,-12(fp)
 182823c:	10800044 	addi	r2,r2,1
 1828240:	e0bffd15 	stw	r2,-12(fp)
 1828244:	e0bffd17 	ldw	r2,-12(fp)
 1828248:	10800a90 	cmplti	r2,r2,42
 182824c:	103fac1e 	bne	r2,zero,1828100 <__alt_mem_mem_0+0xff808100>
      sockets[i].select_waiting = 0;
      return i;
    }
    SYS_ARCH_UNPROTECT(lev);
  }
  return -1;
 1828250:	00bfffc4 	movi	r2,-1
}
 1828254:	e037883a 	mov	sp,fp
 1828258:	dfc00117 	ldw	ra,4(sp)
 182825c:	df000017 	ldw	fp,0(sp)
 1828260:	dec00204 	addi	sp,sp,8
 1828264:	f800283a 	ret

01828268 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 1828268:	defffb04 	addi	sp,sp,-20
 182826c:	dfc00415 	stw	ra,16(sp)
 1828270:	df000315 	stw	fp,12(sp)
 1828274:	df000304 	addi	fp,sp,12
 1828278:	e13ffe15 	stw	r4,-8(fp)
 182827c:	e17fff15 	stw	r5,-4(fp)
  void *lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  lastdata         = sock->lastdata;
 1828280:	e0bffe17 	ldw	r2,-8(fp)
 1828284:	10800117 	ldw	r2,4(r2)
 1828288:	e0bffd15 	stw	r2,-12(fp)
  sock->lastdata   = NULL;
 182828c:	e0bffe17 	ldw	r2,-8(fp)
 1828290:	10000115 	stw	zero,4(r2)
  sock->lastoffset = 0;
 1828294:	e0bffe17 	ldw	r2,-8(fp)
 1828298:	1000020d 	sth	zero,8(r2)
  sock->err        = 0;
 182829c:	e0bffe17 	ldw	r2,-8(fp)
 18282a0:	10000415 	stw	zero,16(r2)

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 18282a4:	1810de40 	call	1810de4 <vTaskEnterCritical>
  sock->conn       = NULL;
 18282a8:	e0bffe17 	ldw	r2,-8(fp)
 18282ac:	10000015 	stw	zero,0(r2)
  SYS_ARCH_UNPROTECT(lev);
 18282b0:	1810e380 	call	1810e38 <vTaskExitCritical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
 18282b4:	e0bffd17 	ldw	r2,-12(fp)
 18282b8:	10000726 	beq	r2,zero,18282d8 <free_socket+0x70>
    if (is_tcp) {
 18282bc:	e0bfff17 	ldw	r2,-4(fp)
 18282c0:	10000326 	beq	r2,zero,18282d0 <free_socket+0x68>
      pbuf_free((struct pbuf *)lastdata);
 18282c4:	e13ffd17 	ldw	r4,-12(fp)
 18282c8:	181a9040 	call	181a904 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
 18282cc:	00000206 	br	18282d8 <free_socket+0x70>

  if (lastdata != NULL) {
    if (is_tcp) {
      pbuf_free((struct pbuf *)lastdata);
    } else {
      netbuf_delete((struct netbuf *)lastdata);
 18282d0:	e13ffd17 	ldw	r4,-12(fp)
 18282d4:	183c0f80 	call	183c0f8 <netbuf_delete>
    }
  }
}
 18282d8:	0001883a 	nop
 18282dc:	e037883a 	mov	sp,fp
 18282e0:	dfc00117 	ldw	ra,4(sp)
 18282e4:	df000017 	ldw	fp,0(sp)
 18282e8:	dec00204 	addi	sp,sp,8
 18282ec:	f800283a 	ret

018282f0 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 18282f0:	defff004 	addi	sp,sp,-64
 18282f4:	dfc00f15 	stw	ra,60(sp)
 18282f8:	df000e15 	stw	fp,56(sp)
 18282fc:	df000e04 	addi	fp,sp,56
 1828300:	e13ffd15 	stw	r4,-12(fp)
 1828304:	e17ffe15 	stw	r5,-8(fp)
 1828308:	e1bfff15 	stw	r6,-4(fp)
  struct sockaddr_in sin;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 182830c:	e13ffd17 	ldw	r4,-12(fp)
 1828310:	1827fe80 	call	1827fe8 <get_socket>
 1828314:	e0bff215 	stw	r2,-56(fp)
  if (!sock) {
 1828318:	e0bff217 	ldw	r2,-56(fp)
 182831c:	1000021e 	bne	r2,zero,1828328 <lwip_accept+0x38>
    return -1;
 1828320:	00bfffc4 	movi	r2,-1
 1828324:	0000aa06 	br	18285d0 <lwip_accept+0x2e0>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
 1828328:	e0bff217 	ldw	r2,-56(fp)
 182832c:	10800017 	ldw	r2,0(r2)
 1828330:	10800903 	ldbu	r2,36(r2)
 1828334:	10803fcc 	andi	r2,r2,255
 1828338:	1080008c 	andi	r2,r2,2
 182833c:	10000b26 	beq	r2,zero,182836c <lwip_accept+0x7c>
 1828340:	e0bff217 	ldw	r2,-56(fp)
 1828344:	1080028b 	ldhu	r2,10(r2)
 1828348:	10bfffcc 	andi	r2,r2,65535
 182834c:	10a0001c 	xori	r2,r2,32768
 1828350:	10a00004 	addi	r2,r2,-32768
 1828354:	00800516 	blt	zero,r2,182836c <lwip_accept+0x7c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    sock_set_errno(sock, EWOULDBLOCK);
 1828358:	e0bff217 	ldw	r2,-56(fp)
 182835c:	00c002c4 	movi	r3,11
 1828360:	10c00415 	stw	r3,16(r2)
    return -1;
 1828364:	00bfffc4 	movi	r2,-1
 1828368:	00009906 	br	18285d0 <lwip_accept+0x2e0>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 182836c:	e0bff217 	ldw	r2,-56(fp)
 1828370:	10800017 	ldw	r2,0(r2)
 1828374:	e0fff604 	addi	r3,fp,-40
 1828378:	180b883a 	mov	r5,r3
 182837c:	1009883a 	mov	r4,r2
 1828380:	18390e00 	call	18390e0 <netconn_accept>
 1828384:	e0bff305 	stb	r2,-52(fp)
  if (err != ERR_OK) {
 1828388:	e0bff307 	ldb	r2,-52(fp)
 182838c:	10001c26 	beq	r2,zero,1828400 <lwip_accept+0x110>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (netconn_type(sock->conn) != NETCONN_TCP) {
 1828390:	e0bff217 	ldw	r2,-56(fp)
 1828394:	10800017 	ldw	r2,0(r2)
 1828398:	10800017 	ldw	r2,0(r2)
 182839c:	10800420 	cmpeqi	r2,r2,16
 18283a0:	1000051e 	bne	r2,zero,18283b8 <lwip_accept+0xc8>
      sock_set_errno(sock, EOPNOTSUPP);
 18283a4:	e0bff217 	ldw	r2,-56(fp)
 18283a8:	00c017c4 	movi	r3,95
 18283ac:	10c00415 	stw	r3,16(r2)
      return EOPNOTSUPP;
 18283b0:	008017c4 	movi	r2,95
 18283b4:	00008606 	br	18285d0 <lwip_accept+0x2e0>
    }
    sock_set_errno(sock, err_to_errno(err));
 18283b8:	e0bff307 	ldb	r2,-52(fp)
 18283bc:	0085c83a 	sub	r2,zero,r2
 18283c0:	10800428 	cmpgeui	r2,r2,16
 18283c4:	1000091e 	bne	r2,zero,18283ec <lwip_accept+0xfc>
 18283c8:	e0bff307 	ldb	r2,-52(fp)
 18283cc:	0087c83a 	sub	r3,zero,r2
 18283d0:	00806134 	movhi	r2,388
 18283d4:	10850004 	addi	r2,r2,5120
 18283d8:	18c7883a 	add	r3,r3,r3
 18283dc:	18c7883a 	add	r3,r3,r3
 18283e0:	10c5883a 	add	r2,r2,r3
 18283e4:	10800017 	ldw	r2,0(r2)
 18283e8:	00000106 	br	18283f0 <lwip_accept+0x100>
 18283ec:	00800144 	movi	r2,5
 18283f0:	e0fff217 	ldw	r3,-56(fp)
 18283f4:	18800415 	stw	r2,16(r3)
    return -1;
 18283f8:	00bfffc4 	movi	r2,-1
 18283fc:	00007406 	br	18285d0 <lwip_accept+0x2e0>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  /* Prevent automatic window updates, we do this on our own! */
  netconn_set_noautorecved(newconn, 1);
 1828400:	e0bff617 	ldw	r2,-40(fp)
 1828404:	e0fff617 	ldw	r3,-40(fp)
 1828408:	18c00903 	ldbu	r3,36(r3)
 182840c:	18c00214 	ori	r3,r3,8
 1828410:	10c00905 	stb	r3,36(r2)

  /* get the IP address and port of the remote host */
  err = netconn_peer(newconn, &naddr, &port);
 1828414:	e0bff617 	ldw	r2,-40(fp)
 1828418:	e13ff804 	addi	r4,fp,-32
 182841c:	e0fff704 	addi	r3,fp,-36
 1828420:	000f883a 	mov	r7,zero
 1828424:	200d883a 	mov	r6,r4
 1828428:	180b883a 	mov	r5,r3
 182842c:	1009883a 	mov	r4,r2
 1828430:	1838cbc0 	call	1838cbc <netconn_getaddr>
 1828434:	e0bff305 	stb	r2,-52(fp)
  if (err != ERR_OK) {
 1828438:	e0bff307 	ldb	r2,-52(fp)
 182843c:	10001526 	beq	r2,zero,1828494 <lwip_accept+0x1a4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
    netconn_delete(newconn);
 1828440:	e0bff617 	ldw	r2,-40(fp)
 1828444:	1009883a 	mov	r4,r2
 1828448:	1838c5c0 	call	1838c5c <netconn_delete>
    sock_set_errno(sock, err_to_errno(err));
 182844c:	e0bff307 	ldb	r2,-52(fp)
 1828450:	0085c83a 	sub	r2,zero,r2
 1828454:	10800428 	cmpgeui	r2,r2,16
 1828458:	1000091e 	bne	r2,zero,1828480 <lwip_accept+0x190>
 182845c:	e0bff307 	ldb	r2,-52(fp)
 1828460:	0087c83a 	sub	r3,zero,r2
 1828464:	00806134 	movhi	r2,388
 1828468:	10850004 	addi	r2,r2,5120
 182846c:	18c7883a 	add	r3,r3,r3
 1828470:	18c7883a 	add	r3,r3,r3
 1828474:	10c5883a 	add	r2,r2,r3
 1828478:	10800017 	ldw	r2,0(r2)
 182847c:	00000106 	br	1828484 <lwip_accept+0x194>
 1828480:	00800144 	movi	r2,5
 1828484:	e0fff217 	ldw	r3,-56(fp)
 1828488:	18800415 	stw	r2,16(r3)
    return -1;
 182848c:	00bfffc4 	movi	r2,-1
 1828490:	00004f06 	br	18285d0 <lwip_accept+0x2e0>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (NULL != addr) {
 1828494:	e0bffe17 	ldw	r2,-8(fp)
 1828498:	10002226 	beq	r2,zero,1828524 <lwip_accept+0x234>
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
    memset(&sin, 0, sizeof(sin));
 182849c:	e0bff904 	addi	r2,fp,-28
 18284a0:	01800404 	movi	r6,16
 18284a4:	000b883a 	mov	r5,zero
 18284a8:	1009883a 	mov	r4,r2
 18284ac:	18061940 	call	1806194 <memset>
    sin.sin_len = sizeof(sin);
 18284b0:	00800404 	movi	r2,16
 18284b4:	e0bff905 	stb	r2,-28(fp)
    sin.sin_family = AF_INET;
 18284b8:	00800084 	movi	r2,2
 18284bc:	e0bff945 	stb	r2,-27(fp)
    sin.sin_port = htons(port);
 18284c0:	e0bff80b 	ldhu	r2,-32(fp)
 18284c4:	10bfffcc 	andi	r2,r2,65535
 18284c8:	1004d23a 	srli	r2,r2,8
 18284cc:	1007883a 	mov	r3,r2
 18284d0:	e0bff80b 	ldhu	r2,-32(fp)
 18284d4:	10bfffcc 	andi	r2,r2,65535
 18284d8:	1004923a 	slli	r2,r2,8
 18284dc:	1884b03a 	or	r2,r3,r2
 18284e0:	e0bff98d 	sth	r2,-26(fp)
    inet_addr_from_ipaddr(&sin.sin_addr, &naddr);
 18284e4:	e0bff717 	ldw	r2,-36(fp)
 18284e8:	e0bffa15 	stw	r2,-24(fp)

    if (*addrlen > sizeof(sin))
 18284ec:	e0bfff17 	ldw	r2,-4(fp)
 18284f0:	10800017 	ldw	r2,0(r2)
 18284f4:	10800470 	cmpltui	r2,r2,17
 18284f8:	1000031e 	bne	r2,zero,1828508 <lwip_accept+0x218>
      *addrlen = sizeof(sin);
 18284fc:	e0bfff17 	ldw	r2,-4(fp)
 1828500:	00c00404 	movi	r3,16
 1828504:	10c00015 	stw	r3,0(r2)

    MEMCPY(addr, &sin, *addrlen);
 1828508:	e0bfff17 	ldw	r2,-4(fp)
 182850c:	10c00017 	ldw	r3,0(r2)
 1828510:	e0bff904 	addi	r2,fp,-28
 1828514:	180d883a 	mov	r6,r3
 1828518:	100b883a 	mov	r5,r2
 182851c:	e13ffe17 	ldw	r4,-8(fp)
 1828520:	180604c0 	call	180604c <memcpy>
  }

  newsock = alloc_socket(newconn, 1);
 1828524:	e0bff617 	ldw	r2,-40(fp)
 1828528:	01400044 	movi	r5,1
 182852c:	1009883a 	mov	r4,r2
 1828530:	18280e00 	call	18280e0 <alloc_socket>
 1828534:	e0bff415 	stw	r2,-48(fp)
  if (newsock == -1) {
 1828538:	e0bff417 	ldw	r2,-48(fp)
 182853c:	10bfffd8 	cmpnei	r2,r2,-1
 1828540:	1000081e 	bne	r2,zero,1828564 <lwip_accept+0x274>
    netconn_delete(newconn);
 1828544:	e0bff617 	ldw	r2,-40(fp)
 1828548:	1009883a 	mov	r4,r2
 182854c:	1838c5c0 	call	1838c5c <netconn_delete>
    sock_set_errno(sock, ENFILE);
 1828550:	e0bff217 	ldw	r2,-56(fp)
 1828554:	00c005c4 	movi	r3,23
 1828558:	10c00415 	stw	r3,16(r2)
    return -1;
 182855c:	00bfffc4 	movi	r2,-1
 1828560:	00001b06 	br	18285d0 <lwip_accept+0x2e0>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= 0) && (newsock < NUM_SOCKETS));
  LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock];
 1828564:	e0bff417 	ldw	r2,-48(fp)
 1828568:	10c00624 	muli	r3,r2,24
 182856c:	00806134 	movhi	r2,388
 1828570:	109dd904 	addi	r2,r2,30564
 1828574:	1885883a 	add	r2,r3,r2
 1828578:	e0bff515 	stw	r2,-44(fp)

  newsock += LWIP_SOCKET_OFFSET;
 182857c:	e0bff417 	ldw	r2,-48(fp)
 1828580:	10800804 	addi	r2,r2,32
 1828584:	e0bff415 	stw	r2,-48(fp)
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 1828588:	1810de40 	call	1810de4 <vTaskEnterCritical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
 182858c:	e0bff517 	ldw	r2,-44(fp)
 1828590:	1080028b 	ldhu	r2,10(r2)
 1828594:	1007883a 	mov	r3,r2
 1828598:	e0bff617 	ldw	r2,-40(fp)
 182859c:	10800717 	ldw	r2,28(r2)
 18285a0:	1885c83a 	sub	r2,r3,r2
 18285a4:	10bfffc4 	addi	r2,r2,-1
 18285a8:	1007883a 	mov	r3,r2
 18285ac:	e0bff517 	ldw	r2,-44(fp)
 18285b0:	10c0028d 	sth	r3,10(r2)
  newconn->socket = newsock;
 18285b4:	e0bff617 	ldw	r2,-40(fp)
 18285b8:	e0fff417 	ldw	r3,-48(fp)
 18285bc:	10c00715 	stw	r3,28(r2)
  SYS_ARCH_UNPROTECT(lev);
 18285c0:	1810e380 	call	1810e38 <vTaskExitCritical>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d addr=", s, newsock));
  ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));

  sock_set_errno(sock, 0);
 18285c4:	e0bff217 	ldw	r2,-56(fp)
 18285c8:	10000415 	stw	zero,16(r2)
  return newsock;
 18285cc:	e0bff417 	ldw	r2,-48(fp)
}
 18285d0:	e037883a 	mov	sp,fp
 18285d4:	dfc00117 	ldw	ra,4(sp)
 18285d8:	df000017 	ldw	fp,0(sp)
 18285dc:	dec00204 	addi	sp,sp,8
 18285e0:	f800283a 	ret

018285e4 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 18285e4:	defff704 	addi	sp,sp,-36
 18285e8:	dfc00815 	stw	ra,32(sp)
 18285ec:	df000715 	stw	fp,28(sp)
 18285f0:	df000704 	addi	fp,sp,28
 18285f4:	e13ffd15 	stw	r4,-12(fp)
 18285f8:	e17ffe15 	stw	r5,-8(fp)
 18285fc:	e1bfff15 	stw	r6,-4(fp)
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;
  const struct sockaddr_in *name_in;

  sock = get_socket(s);
 1828600:	e13ffd17 	ldw	r4,-12(fp)
 1828604:	1827fe80 	call	1827fe8 <get_socket>
 1828608:	e0bff915 	stw	r2,-28(fp)
  if (!sock) {
 182860c:	e0bff917 	ldw	r2,-28(fp)
 1828610:	1000021e 	bne	r2,zero,182861c <lwip_bind+0x38>
    return -1;
 1828614:	00bfffc4 	movi	r2,-1
 1828618:	00004206 	br	1828724 <lwip_bind+0x140>
  }

  /* check size, familiy and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
 182861c:	e0bfff17 	ldw	r2,-4(fp)
 1828620:	10800418 	cmpnei	r2,r2,16
 1828624:	1000081e 	bne	r2,zero,1828648 <lwip_bind+0x64>
 1828628:	e0bffe17 	ldw	r2,-8(fp)
 182862c:	10800043 	ldbu	r2,1(r2)
 1828630:	10803fcc 	andi	r2,r2,255
 1828634:	10800098 	cmpnei	r2,r2,2
 1828638:	1000031e 	bne	r2,zero,1828648 <lwip_bind+0x64>
 182863c:	e0bffe17 	ldw	r2,-8(fp)
 1828640:	108000cc 	andi	r2,r2,3
 1828644:	10000926 	beq	r2,zero,182866c <lwip_bind+0x88>
 1828648:	01c06134 	movhi	r7,388
 182864c:	39c51004 	addi	r7,r7,5184
 1828650:	01806ac4 	movi	r6,427
 1828654:	01406134 	movhi	r5,388
 1828658:	29451604 	addi	r5,r5,5208
 182865c:	01006134 	movhi	r4,388
 1828660:	21051d04 	addi	r4,r4,5236
 1828664:	1800bd80 	call	1800bd8 <printf>
 1828668:	003fff06 	br	1828668 <__alt_mem_mem_0+0xff808668>
             ((name->sa_family) == AF_INET) && ((((mem_ptr_t)name) % 4) == 0)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  name_in = (const struct sockaddr_in *)(void*)name;
 182866c:	e0bffe17 	ldw	r2,-8(fp)
 1828670:	e0bffa15 	stw	r2,-24(fp)

  inet_addr_to_ipaddr(&local_addr, &name_in->sin_addr);
 1828674:	e0bffa17 	ldw	r2,-24(fp)
 1828678:	10800117 	ldw	r2,4(r2)
 182867c:	e0bffc15 	stw	r2,-16(fp)
  local_port = name_in->sin_port;
 1828680:	e0bffa17 	ldw	r2,-24(fp)
 1828684:	1080008b 	ldhu	r2,2(r2)
 1828688:	e0bffb0d 	sth	r2,-20(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d, addr=", s));
  ip_addr_debug_print(SOCKETS_DEBUG, &local_addr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", ntohs(local_port)));

  err = netconn_bind(sock->conn, &local_addr, ntohs(local_port));
 182868c:	e0bff917 	ldw	r2,-28(fp)
 1828690:	10c00017 	ldw	r3,0(r2)
 1828694:	e0bffb0b 	ldhu	r2,-20(fp)
 1828698:	1004d23a 	srli	r2,r2,8
 182869c:	1009883a 	mov	r4,r2
 18286a0:	e0bffb0b 	ldhu	r2,-20(fp)
 18286a4:	1004923a 	slli	r2,r2,8
 18286a8:	2084b03a 	or	r2,r4,r2
 18286ac:	113fffcc 	andi	r4,r2,65535
 18286b0:	e0bffc04 	addi	r2,fp,-16
 18286b4:	200d883a 	mov	r6,r4
 18286b8:	100b883a 	mov	r5,r2
 18286bc:	1809883a 	mov	r4,r3
 18286c0:	1838de80 	call	1838de8 <netconn_bind>
 18286c4:	e0bffb85 	stb	r2,-18(fp)

  if (err != ERR_OK) {
 18286c8:	e0bffb87 	ldb	r2,-18(fp)
 18286cc:	10001226 	beq	r2,zero,1828718 <lwip_bind+0x134>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 18286d0:	e0bffb87 	ldb	r2,-18(fp)
 18286d4:	0085c83a 	sub	r2,zero,r2
 18286d8:	10800428 	cmpgeui	r2,r2,16
 18286dc:	1000091e 	bne	r2,zero,1828704 <lwip_bind+0x120>
 18286e0:	e0bffb87 	ldb	r2,-18(fp)
 18286e4:	0087c83a 	sub	r3,zero,r2
 18286e8:	00806134 	movhi	r2,388
 18286ec:	10850004 	addi	r2,r2,5120
 18286f0:	18c7883a 	add	r3,r3,r3
 18286f4:	18c7883a 	add	r3,r3,r3
 18286f8:	10c5883a 	add	r2,r2,r3
 18286fc:	10800017 	ldw	r2,0(r2)
 1828700:	00000106 	br	1828708 <lwip_bind+0x124>
 1828704:	00800144 	movi	r2,5
 1828708:	e0fff917 	ldw	r3,-28(fp)
 182870c:	18800415 	stw	r2,16(r3)
    return -1;
 1828710:	00bfffc4 	movi	r2,-1
 1828714:	00000306 	br	1828724 <lwip_bind+0x140>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 1828718:	e0bff917 	ldw	r2,-28(fp)
 182871c:	10000415 	stw	zero,16(r2)
  return 0;
 1828720:	0005883a 	mov	r2,zero
}
 1828724:	e037883a 	mov	sp,fp
 1828728:	dfc00117 	ldw	ra,4(sp)
 182872c:	df000017 	ldw	fp,0(sp)
 1828730:	dec00204 	addi	sp,sp,8
 1828734:	f800283a 	ret

01828738 <lwip_close>:

int
lwip_close(int s)
{
 1828738:	defffb04 	addi	sp,sp,-20
 182873c:	dfc00415 	stw	ra,16(sp)
 1828740:	df000315 	stw	fp,12(sp)
 1828744:	df000304 	addi	fp,sp,12
 1828748:	e13fff15 	stw	r4,-4(fp)
  struct lwip_sock *sock;
  int is_tcp = 0;
 182874c:	e03ffd15 	stw	zero,-12(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 1828750:	e13fff17 	ldw	r4,-4(fp)
 1828754:	1827fe80 	call	1827fe8 <get_socket>
 1828758:	e0bffe15 	stw	r2,-8(fp)
  if (!sock) {
 182875c:	e0bffe17 	ldw	r2,-8(fp)
 1828760:	1000021e 	bne	r2,zero,182876c <lwip_close+0x34>
    return -1;
 1828764:	00bfffc4 	movi	r2,-1
 1828768:	00001106 	br	18287b0 <lwip_close+0x78>
  }

  if(sock->conn != NULL) {
 182876c:	e0bffe17 	ldw	r2,-8(fp)
 1828770:	10800017 	ldw	r2,0(r2)
 1828774:	10000626 	beq	r2,zero,1828790 <lwip_close+0x58>
    is_tcp = netconn_type(sock->conn) == NETCONN_TCP;
 1828778:	e0bffe17 	ldw	r2,-8(fp)
 182877c:	10800017 	ldw	r2,0(r2)
 1828780:	10800017 	ldw	r2,0(r2)
 1828784:	10800420 	cmpeqi	r2,r2,16
 1828788:	10803fcc 	andi	r2,r2,255
 182878c:	e0bffd15 	stw	r2,-12(fp)
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  }

  netconn_delete(sock->conn);
 1828790:	e0bffe17 	ldw	r2,-8(fp)
 1828794:	10800017 	ldw	r2,0(r2)
 1828798:	1009883a 	mov	r4,r2
 182879c:	1838c5c0 	call	1838c5c <netconn_delete>

  free_socket(sock, is_tcp);
 18287a0:	e17ffd17 	ldw	r5,-12(fp)
 18287a4:	e13ffe17 	ldw	r4,-8(fp)
 18287a8:	18282680 	call	1828268 <free_socket>
  set_errno(0);
  return 0;
 18287ac:	0005883a 	mov	r2,zero
}
 18287b0:	e037883a 	mov	sp,fp
 18287b4:	dfc00117 	ldw	ra,4(sp)
 18287b8:	df000017 	ldw	fp,0(sp)
 18287bc:	dec00204 	addi	sp,sp,8
 18287c0:	f800283a 	ret

018287c4 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 18287c4:	defff604 	addi	sp,sp,-40
 18287c8:	dfc00915 	stw	ra,36(sp)
 18287cc:	df000815 	stw	fp,32(sp)
 18287d0:	df000804 	addi	fp,sp,32
 18287d4:	e13ffd15 	stw	r4,-12(fp)
 18287d8:	e17ffe15 	stw	r5,-8(fp)
 18287dc:	e1bfff15 	stw	r6,-4(fp)
  struct lwip_sock *sock;
  err_t err;
  const struct sockaddr_in *name_in;

  sock = get_socket(s);
 18287e0:	e13ffd17 	ldw	r4,-12(fp)
 18287e4:	1827fe80 	call	1827fe8 <get_socket>
 18287e8:	e0bff915 	stw	r2,-28(fp)
  if (!sock) {
 18287ec:	e0bff917 	ldw	r2,-28(fp)
 18287f0:	1000021e 	bne	r2,zero,18287fc <lwip_connect+0x38>
    return -1;
 18287f4:	00bfffc4 	movi	r2,-1
 18287f8:	00004c06 	br	182892c <lwip_connect+0x168>
  }

  /* check size, familiy and alignment of 'name' */
  LWIP_ERROR("lwip_connect: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
 18287fc:	e0bfff17 	ldw	r2,-4(fp)
 1828800:	10800418 	cmpnei	r2,r2,16
 1828804:	1000081e 	bne	r2,zero,1828828 <lwip_connect+0x64>
 1828808:	e0bffe17 	ldw	r2,-8(fp)
 182880c:	10800043 	ldbu	r2,1(r2)
 1828810:	10803fcc 	andi	r2,r2,255
 1828814:	10800098 	cmpnei	r2,r2,2
 1828818:	1000031e 	bne	r2,zero,1828828 <lwip_connect+0x64>
 182881c:	e0bffe17 	ldw	r2,-8(fp)
 1828820:	108000cc 	andi	r2,r2,3
 1828824:	10000926 	beq	r2,zero,182884c <lwip_connect+0x88>
 1828828:	01c06134 	movhi	r7,388
 182882c:	39c51004 	addi	r7,r7,5184
 1828830:	01807ac4 	movi	r6,491
 1828834:	01406134 	movhi	r5,388
 1828838:	29452904 	addi	r5,r5,5284
 182883c:	01006134 	movhi	r4,388
 1828840:	21051d04 	addi	r4,r4,5236
 1828844:	1800bd80 	call	1800bd8 <printf>
 1828848:	003fff06 	br	1828848 <__alt_mem_mem_0+0xff808848>
             ((name->sa_family) == AF_INET) && ((((mem_ptr_t)name) % 4) == 0)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  name_in = (const struct sockaddr_in *)(void*)name;
 182884c:	e0bffe17 	ldw	r2,-8(fp)
 1828850:	e0bffa15 	stw	r2,-24(fp)

  if (name_in->sin_family == AF_UNSPEC) {
 1828854:	e0bffa17 	ldw	r2,-24(fp)
 1828858:	10800043 	ldbu	r2,1(r2)
 182885c:	10803fcc 	andi	r2,r2,255
 1828860:	1000061e 	bne	r2,zero,182887c <lwip_connect+0xb8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 1828864:	e0bff917 	ldw	r2,-28(fp)
 1828868:	10800017 	ldw	r2,0(r2)
 182886c:	1009883a 	mov	r4,r2
 1828870:	1838f780 	call	1838f78 <netconn_disconnect>
 1828874:	e0bff805 	stb	r2,-32(fp)
 1828878:	00001506 	br	18288d0 <lwip_connect+0x10c>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    inet_addr_to_ipaddr(&remote_addr, &name_in->sin_addr);
 182887c:	e0bffa17 	ldw	r2,-24(fp)
 1828880:	10800117 	ldw	r2,4(r2)
 1828884:	e0bffc15 	stw	r2,-16(fp)
    remote_port = name_in->sin_port;
 1828888:	e0bffa17 	ldw	r2,-24(fp)
 182888c:	1080008b 	ldhu	r2,2(r2)
 1828890:	e0bffb0d 	sth	r2,-20(fp)

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, addr=", s));
    ip_addr_debug_print(SOCKETS_DEBUG, &remote_addr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", ntohs(remote_port)));

    err = netconn_connect(sock->conn, &remote_addr, ntohs(remote_port));
 1828894:	e0bff917 	ldw	r2,-28(fp)
 1828898:	10c00017 	ldw	r3,0(r2)
 182889c:	e0bffb0b 	ldhu	r2,-20(fp)
 18288a0:	1004d23a 	srli	r2,r2,8
 18288a4:	1009883a 	mov	r4,r2
 18288a8:	e0bffb0b 	ldhu	r2,-20(fp)
 18288ac:	1004923a 	slli	r2,r2,8
 18288b0:	2084b03a 	or	r2,r4,r2
 18288b4:	113fffcc 	andi	r4,r2,65535
 18288b8:	e0bffc04 	addi	r2,fp,-16
 18288bc:	200d883a 	mov	r6,r4
 18288c0:	100b883a 	mov	r5,r2
 18288c4:	1809883a 	mov	r4,r3
 18288c8:	1838eb00 	call	1838eb0 <netconn_connect>
 18288cc:	e0bff805 	stb	r2,-32(fp)
  }

  if (err != ERR_OK) {
 18288d0:	e0bff807 	ldb	r2,-32(fp)
 18288d4:	10001226 	beq	r2,zero,1828920 <lwip_connect+0x15c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 18288d8:	e0bff807 	ldb	r2,-32(fp)
 18288dc:	0085c83a 	sub	r2,zero,r2
 18288e0:	10800428 	cmpgeui	r2,r2,16
 18288e4:	1000091e 	bne	r2,zero,182890c <lwip_connect+0x148>
 18288e8:	e0bff807 	ldb	r2,-32(fp)
 18288ec:	0087c83a 	sub	r3,zero,r2
 18288f0:	00806134 	movhi	r2,388
 18288f4:	10850004 	addi	r2,r2,5120
 18288f8:	18c7883a 	add	r3,r3,r3
 18288fc:	18c7883a 	add	r3,r3,r3
 1828900:	10c5883a 	add	r2,r2,r3
 1828904:	10800017 	ldw	r2,0(r2)
 1828908:	00000106 	br	1828910 <lwip_connect+0x14c>
 182890c:	00800144 	movi	r2,5
 1828910:	e0fff917 	ldw	r3,-28(fp)
 1828914:	18800415 	stw	r2,16(r3)
    return -1;
 1828918:	00bfffc4 	movi	r2,-1
 182891c:	00000306 	br	182892c <lwip_connect+0x168>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 1828920:	e0bff917 	ldw	r2,-28(fp)
 1828924:	10000415 	stw	zero,16(r2)
  return 0;
 1828928:	0005883a 	mov	r2,zero
}
 182892c:	e037883a 	mov	sp,fp
 1828930:	dfc00117 	ldw	ra,4(sp)
 1828934:	df000017 	ldw	fp,0(sp)
 1828938:	dec00204 	addi	sp,sp,8
 182893c:	f800283a 	ret

01828940 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 1828940:	defffa04 	addi	sp,sp,-24
 1828944:	dfc00515 	stw	ra,20(sp)
 1828948:	df000415 	stw	fp,16(sp)
 182894c:	df000404 	addi	fp,sp,16
 1828950:	e13ffe15 	stw	r4,-8(fp)
 1828954:	e17fff15 	stw	r5,-4(fp)
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 1828958:	e13ffe17 	ldw	r4,-8(fp)
 182895c:	1827fe80 	call	1827fe8 <get_socket>
 1828960:	e0bffc15 	stw	r2,-16(fp)
  if (!sock) {
 1828964:	e0bffc17 	ldw	r2,-16(fp)
 1828968:	1000021e 	bne	r2,zero,1828974 <lwip_listen+0x34>
    return -1;
 182896c:	00bfffc4 	movi	r2,-1
 1828970:	00003206 	br	1828a3c <lwip_listen+0xfc>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 1828974:	e0bfff17 	ldw	r2,-4(fp)
 1828978:	10803fc8 	cmpgei	r2,r2,255
 182897c:	1000041e 	bne	r2,zero,1828990 <lwip_listen+0x50>
 1828980:	e0bfff17 	ldw	r2,-4(fp)
 1828984:	1000030e 	bge	r2,zero,1828994 <lwip_listen+0x54>
 1828988:	0005883a 	mov	r2,zero
 182898c:	00000106 	br	1828994 <lwip_listen+0x54>
 1828990:	00803fc4 	movi	r2,255
 1828994:	e0bfff15 	stw	r2,-4(fp)

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 1828998:	e0bffc17 	ldw	r2,-16(fp)
 182899c:	10c00017 	ldw	r3,0(r2)
 18289a0:	e0bfff17 	ldw	r2,-4(fp)
 18289a4:	10803fcc 	andi	r2,r2,255
 18289a8:	100b883a 	mov	r5,r2
 18289ac:	1809883a 	mov	r4,r3
 18289b0:	18390240 	call	1839024 <netconn_listen_with_backlog>
 18289b4:	e0bffd05 	stb	r2,-12(fp)

  if (err != ERR_OK) {
 18289b8:	e0bffd07 	ldb	r2,-12(fp)
 18289bc:	10001c26 	beq	r2,zero,1828a30 <lwip_listen+0xf0>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (netconn_type(sock->conn) != NETCONN_TCP) {
 18289c0:	e0bffc17 	ldw	r2,-16(fp)
 18289c4:	10800017 	ldw	r2,0(r2)
 18289c8:	10800017 	ldw	r2,0(r2)
 18289cc:	10800420 	cmpeqi	r2,r2,16
 18289d0:	1000051e 	bne	r2,zero,18289e8 <lwip_listen+0xa8>
      sock_set_errno(sock, EOPNOTSUPP);
 18289d4:	e0bffc17 	ldw	r2,-16(fp)
 18289d8:	00c017c4 	movi	r3,95
 18289dc:	10c00415 	stw	r3,16(r2)
      return EOPNOTSUPP;
 18289e0:	008017c4 	movi	r2,95
 18289e4:	00001506 	br	1828a3c <lwip_listen+0xfc>
    }
    sock_set_errno(sock, err_to_errno(err));
 18289e8:	e0bffd07 	ldb	r2,-12(fp)
 18289ec:	0085c83a 	sub	r2,zero,r2
 18289f0:	10800428 	cmpgeui	r2,r2,16
 18289f4:	1000091e 	bne	r2,zero,1828a1c <lwip_listen+0xdc>
 18289f8:	e0bffd07 	ldb	r2,-12(fp)
 18289fc:	0087c83a 	sub	r3,zero,r2
 1828a00:	00806134 	movhi	r2,388
 1828a04:	10850004 	addi	r2,r2,5120
 1828a08:	18c7883a 	add	r3,r3,r3
 1828a0c:	18c7883a 	add	r3,r3,r3
 1828a10:	10c5883a 	add	r2,r2,r3
 1828a14:	10800017 	ldw	r2,0(r2)
 1828a18:	00000106 	br	1828a20 <lwip_listen+0xe0>
 1828a1c:	00800144 	movi	r2,5
 1828a20:	e0fffc17 	ldw	r3,-16(fp)
 1828a24:	18800415 	stw	r2,16(r3)
    return -1;
 1828a28:	00bfffc4 	movi	r2,-1
 1828a2c:	00000306 	br	1828a3c <lwip_listen+0xfc>
  }

  sock_set_errno(sock, 0);
 1828a30:	e0bffc17 	ldw	r2,-16(fp)
 1828a34:	10000415 	stw	zero,16(r2)
  return 0;
 1828a38:	0005883a 	mov	r2,zero
}
 1828a3c:	e037883a 	mov	sp,fp
 1828a40:	dfc00117 	ldw	ra,4(sp)
 1828a44:	df000017 	ldw	fp,0(sp)
 1828a48:	dec00204 	addi	sp,sp,8
 1828a4c:	f800283a 	ret

01828a50 <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
        struct sockaddr *from, socklen_t *fromlen)
{
 1828a50:	deffec04 	addi	sp,sp,-80
 1828a54:	dfc01315 	stw	ra,76(sp)
 1828a58:	df001215 	stw	fp,72(sp)
 1828a5c:	df001204 	addi	fp,sp,72
 1828a60:	e13ffc15 	stw	r4,-16(fp)
 1828a64:	e17ffd15 	stw	r5,-12(fp)
 1828a68:	e1bffe15 	stw	r6,-8(fp)
 1828a6c:	e1ffff15 	stw	r7,-4(fp)
  struct lwip_sock *sock;
  void             *buf = NULL;
 1828a70:	e03ff515 	stw	zero,-44(fp)
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
 1828a74:	e03ff015 	stw	zero,-64(fp)
  ip_addr_t        *addr;
  u16_t            port;
  u8_t             done = 0;
 1828a78:	e03ff205 	stb	zero,-56(fp)
  err_t            err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 1828a7c:	e13ffc17 	ldw	r4,-16(fp)
 1828a80:	1827fe80 	call	1827fe8 <get_socket>
 1828a84:	e0bff315 	stw	r2,-52(fp)
  if (!sock) {
 1828a88:	e0bff317 	ldw	r2,-52(fp)
 1828a8c:	1000021e 	bne	r2,zero,1828a98 <lwip_recvfrom+0x48>
    return -1;
 1828a90:	00bfffc4 	movi	r2,-1
 1828a94:	00011f06 	br	1828f14 <lwip_recvfrom+0x4c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
 1828a98:	e0bff317 	ldw	r2,-52(fp)
 1828a9c:	10800117 	ldw	r2,4(r2)
 1828aa0:	10000426 	beq	r2,zero,1828ab4 <lwip_recvfrom+0x64>
      buf = sock->lastdata;
 1828aa4:	e0bff317 	ldw	r2,-52(fp)
 1828aa8:	10800117 	ldw	r2,4(r2)
 1828aac:	e0bff515 	stw	r2,-44(fp)
 1828ab0:	00005c06 	br	1828c24 <lwip_recvfrom+0x1d4>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) && 
 1828ab4:	e0bfff17 	ldw	r2,-4(fp)
 1828ab8:	1080020c 	andi	r2,r2,8
 1828abc:	1000061e 	bne	r2,zero,1828ad8 <lwip_recvfrom+0x88>
 1828ac0:	e0bff317 	ldw	r2,-52(fp)
 1828ac4:	10800017 	ldw	r2,0(r2)
 1828ac8:	10800903 	ldbu	r2,36(r2)
 1828acc:	10803fcc 	andi	r2,r2,255
 1828ad0:	1080008c 	andi	r2,r2,2
 1828ad4:	10001726 	beq	r2,zero,1828b34 <lwip_recvfrom+0xe4>
          (sock->rcvevent <= 0)) {
 1828ad8:	e0bff317 	ldw	r2,-52(fp)
 1828adc:	1080028b 	ldhu	r2,10(r2)
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
      buf = sock->lastdata;
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) && 
 1828ae0:	10bfffcc 	andi	r2,r2,65535
 1828ae4:	10a0001c 	xori	r2,r2,32768
 1828ae8:	10a00004 	addi	r2,r2,-32768
 1828aec:	00801116 	blt	zero,r2,1828b34 <lwip_recvfrom+0xe4>
          (sock->rcvevent <= 0)) {
        if (off > 0) {
 1828af0:	e0bff017 	ldw	r2,-64(fp)
 1828af4:	00800a0e 	bge	zero,r2,1828b20 <lwip_recvfrom+0xd0>
          /* update receive window */
          netconn_recved(sock->conn, (u32_t)off);
 1828af8:	e0bff317 	ldw	r2,-52(fp)
 1828afc:	10800017 	ldw	r2,0(r2)
 1828b00:	e0fff017 	ldw	r3,-64(fp)
 1828b04:	180b883a 	mov	r5,r3
 1828b08:	1009883a 	mov	r4,r2
 1828b0c:	18397380 	call	1839738 <netconn_recved>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 1828b10:	e0bff317 	ldw	r2,-52(fp)
 1828b14:	10000415 	stw	zero,16(r2)
          return off;
 1828b18:	e0bff017 	ldw	r2,-64(fp)
 1828b1c:	0000fd06 	br	1828f14 <lwip_recvfrom+0x4c4>
        }
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        sock_set_errno(sock, EWOULDBLOCK);
 1828b20:	e0bff317 	ldw	r2,-52(fp)
 1828b24:	00c002c4 	movi	r3,11
 1828b28:	10c00415 	stw	r3,16(r2)
        return -1;
 1828b2c:	00bfffc4 	movi	r2,-1
 1828b30:	0000f806 	br	1828f14 <lwip_recvfrom+0x4c4>
      }

      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (netconn_type(sock->conn) == NETCONN_TCP) {
 1828b34:	e0bff317 	ldw	r2,-52(fp)
 1828b38:	10800017 	ldw	r2,0(r2)
 1828b3c:	10800017 	ldw	r2,0(r2)
 1828b40:	10800418 	cmpnei	r2,r2,16
 1828b44:	1000081e 	bne	r2,zero,1828b68 <lwip_recvfrom+0x118>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 1828b48:	e0bff317 	ldw	r2,-52(fp)
 1828b4c:	10800017 	ldw	r2,0(r2)
 1828b50:	e0fff504 	addi	r3,fp,-44
 1828b54:	180b883a 	mov	r5,r3
 1828b58:	1009883a 	mov	r4,r2
 1828b5c:	183952c0 	call	183952c <netconn_recv_tcp_pbuf>
 1828b60:	e0bff245 	stb	r2,-55(fp)
 1828b64:	00000706 	br	1828b84 <lwip_recvfrom+0x134>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 1828b68:	e0bff317 	ldw	r2,-52(fp)
 1828b6c:	10800017 	ldw	r2,0(r2)
 1828b70:	e0fff504 	addi	r3,fp,-44
 1828b74:	180b883a 	mov	r5,r3
 1828b78:	1009883a 	mov	r4,r2
 1828b7c:	18395a00 	call	18395a0 <netconn_recv>
 1828b80:	e0bff245 	stb	r2,-55(fp)
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
 1828b84:	e0bff247 	ldb	r2,-55(fp)
 1828b88:	10002326 	beq	r2,zero,1828c18 <lwip_recvfrom+0x1c8>
        if (off > 0) {
 1828b8c:	e0bff017 	ldw	r2,-64(fp)
 1828b90:	00800a0e 	bge	zero,r2,1828bbc <lwip_recvfrom+0x16c>
          /* update receive window */
          netconn_recved(sock->conn, (u32_t)off);
 1828b94:	e0bff317 	ldw	r2,-52(fp)
 1828b98:	10800017 	ldw	r2,0(r2)
 1828b9c:	e0fff017 	ldw	r3,-64(fp)
 1828ba0:	180b883a 	mov	r5,r3
 1828ba4:	1009883a 	mov	r4,r2
 1828ba8:	18397380 	call	1839738 <netconn_recved>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 1828bac:	e0bff317 	ldw	r2,-52(fp)
 1828bb0:	10000415 	stw	zero,16(r2)
          return off;
 1828bb4:	e0bff017 	ldw	r2,-64(fp)
 1828bb8:	0000d606 	br	1828f14 <lwip_recvfrom+0x4c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 1828bbc:	e0bff247 	ldb	r2,-55(fp)
 1828bc0:	0085c83a 	sub	r2,zero,r2
 1828bc4:	10800428 	cmpgeui	r2,r2,16
 1828bc8:	1000091e 	bne	r2,zero,1828bf0 <lwip_recvfrom+0x1a0>
 1828bcc:	e0bff247 	ldb	r2,-55(fp)
 1828bd0:	0087c83a 	sub	r3,zero,r2
 1828bd4:	00806134 	movhi	r2,388
 1828bd8:	10850004 	addi	r2,r2,5120
 1828bdc:	18c7883a 	add	r3,r3,r3
 1828be0:	18c7883a 	add	r3,r3,r3
 1828be4:	10c5883a 	add	r2,r2,r3
 1828be8:	10800017 	ldw	r2,0(r2)
 1828bec:	00000106 	br	1828bf4 <lwip_recvfrom+0x1a4>
 1828bf0:	00800144 	movi	r2,5
 1828bf4:	e0fff317 	ldw	r3,-52(fp)
 1828bf8:	18800415 	stw	r2,16(r3)
        if (err == ERR_CLSD) {
 1828bfc:	e0bff247 	ldb	r2,-55(fp)
 1828c00:	10bffd18 	cmpnei	r2,r2,-12
 1828c04:	1000021e 	bne	r2,zero,1828c10 <lwip_recvfrom+0x1c0>
          return 0;
 1828c08:	0005883a 	mov	r2,zero
 1828c0c:	0000c106 	br	1828f14 <lwip_recvfrom+0x4c4>
        } else {
          return -1;
 1828c10:	00bfffc4 	movi	r2,-1
 1828c14:	0000bf06 	br	1828f14 <lwip_recvfrom+0x4c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
      sock->lastdata = buf;
 1828c18:	e0fff517 	ldw	r3,-44(fp)
 1828c1c:	e0bff317 	ldw	r2,-52(fp)
 1828c20:	10c00115 	stw	r3,4(r2)
    }

    if (netconn_type(sock->conn) == NETCONN_TCP) {
 1828c24:	e0bff317 	ldw	r2,-52(fp)
 1828c28:	10800017 	ldw	r2,0(r2)
 1828c2c:	10800017 	ldw	r2,0(r2)
 1828c30:	10800418 	cmpnei	r2,r2,16
 1828c34:	1000031e 	bne	r2,zero,1828c44 <lwip_recvfrom+0x1f4>
      p = (struct pbuf *)buf;
 1828c38:	e0bff517 	ldw	r2,-44(fp)
 1828c3c:	e0bfee15 	stw	r2,-72(fp)
 1828c40:	00000306 	br	1828c50 <lwip_recvfrom+0x200>
    } else {
      p = ((struct netbuf *)buf)->p;
 1828c44:	e0bff517 	ldw	r2,-44(fp)
 1828c48:	10800017 	ldw	r2,0(r2)
 1828c4c:	e0bfee15 	stw	r2,-72(fp)
    }
    buflen = p->tot_len;
 1828c50:	e0bfee17 	ldw	r2,-72(fp)
 1828c54:	1080020b 	ldhu	r2,8(r2)
 1828c58:	e0bff40d 	sth	r2,-48(fp)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
 1828c5c:	e0bff317 	ldw	r2,-52(fp)
 1828c60:	1080020b 	ldhu	r2,8(r2)
 1828c64:	e0fff40b 	ldhu	r3,-48(fp)
 1828c68:	1885c83a 	sub	r2,r3,r2
 1828c6c:	e0bff40d 	sth	r2,-48(fp)

    if (len > buflen) {
 1828c70:	e0fff40b 	ldhu	r3,-48(fp)
 1828c74:	e0bffe17 	ldw	r2,-8(fp)
 1828c78:	1880032e 	bgeu	r3,r2,1828c88 <lwip_recvfrom+0x238>
      copylen = buflen;
 1828c7c:	e0bff40b 	ldhu	r2,-48(fp)
 1828c80:	e0bfef0d 	sth	r2,-68(fp)
 1828c84:	00000206 	br	1828c90 <lwip_recvfrom+0x240>
    } else {
      copylen = (u16_t)len;
 1828c88:	e0bffe17 	ldw	r2,-8(fp)
 1828c8c:	e0bfef0d 	sth	r2,-68(fp)
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 1828c90:	e0bff017 	ldw	r2,-64(fp)
 1828c94:	e0fffd17 	ldw	r3,-12(fp)
 1828c98:	1887883a 	add	r3,r3,r2
 1828c9c:	e13fef0b 	ldhu	r4,-68(fp)
 1828ca0:	e0bff317 	ldw	r2,-52(fp)
 1828ca4:	1080020b 	ldhu	r2,8(r2)
 1828ca8:	10bfffcc 	andi	r2,r2,65535
 1828cac:	100f883a 	mov	r7,r2
 1828cb0:	200d883a 	mov	r6,r4
 1828cb4:	180b883a 	mov	r5,r3
 1828cb8:	e13fee17 	ldw	r4,-72(fp)
 1828cbc:	181aee80 	call	181aee8 <pbuf_copy_partial>

    off += copylen;
 1828cc0:	e0bfef0b 	ldhu	r2,-68(fp)
 1828cc4:	e0fff017 	ldw	r3,-64(fp)
 1828cc8:	1885883a 	add	r2,r3,r2
 1828ccc:	e0bff015 	stw	r2,-64(fp)

    if (netconn_type(sock->conn) == NETCONN_TCP) {
 1828cd0:	e0bff317 	ldw	r2,-52(fp)
 1828cd4:	10800017 	ldw	r2,0(r2)
 1828cd8:	10800017 	ldw	r2,0(r2)
 1828cdc:	10800418 	cmpnei	r2,r2,16
 1828ce0:	1000171e 	bne	r2,zero,1828d40 <lwip_recvfrom+0x2f0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
 1828ce4:	e0bfef0b 	ldhu	r2,-68(fp)
 1828ce8:	e0fffe17 	ldw	r3,-8(fp)
 1828cec:	1885c83a 	sub	r2,r3,r2
 1828cf0:	e0bffe15 	stw	r2,-8(fp)
      if ( (len <= 0) || 
 1828cf4:	e0bffe17 	ldw	r2,-8(fp)
 1828cf8:	10000e26 	beq	r2,zero,1828d34 <lwip_recvfrom+0x2e4>
           (p->flags & PBUF_FLAG_PUSH) || 
 1828cfc:	e0bfee17 	ldw	r2,-72(fp)
 1828d00:	10800343 	ldbu	r2,13(r2)
 1828d04:	10803fcc 	andi	r2,r2,255
 1828d08:	1080004c 	andi	r2,r2,1
    off += copylen;

    if (netconn_type(sock->conn) == NETCONN_TCP) {
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
      if ( (len <= 0) || 
 1828d0c:	1000091e 	bne	r2,zero,1828d34 <lwip_recvfrom+0x2e4>
           (p->flags & PBUF_FLAG_PUSH) || 
           (sock->rcvevent <= 0) || 
 1828d10:	e0bff317 	ldw	r2,-52(fp)
 1828d14:	1080028b 	ldhu	r2,10(r2)

    if (netconn_type(sock->conn) == NETCONN_TCP) {
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
      if ( (len <= 0) || 
           (p->flags & PBUF_FLAG_PUSH) || 
 1828d18:	10bfffcc 	andi	r2,r2,65535
 1828d1c:	10a0001c 	xori	r2,r2,32768
 1828d20:	10a00004 	addi	r2,r2,-32768
 1828d24:	0080030e 	bge	zero,r2,1828d34 <lwip_recvfrom+0x2e4>
           (sock->rcvevent <= 0) || 
           ((flags & MSG_PEEK)!=0)) {
 1828d28:	e0bfff17 	ldw	r2,-4(fp)
 1828d2c:	1080004c 	andi	r2,r2,1
    if (netconn_type(sock->conn) == NETCONN_TCP) {
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
      if ( (len <= 0) || 
           (p->flags & PBUF_FLAG_PUSH) || 
           (sock->rcvevent <= 0) || 
 1828d30:	10000526 	beq	r2,zero,1828d48 <lwip_recvfrom+0x2f8>
           ((flags & MSG_PEEK)!=0)) {
        done = 1;
 1828d34:	00800044 	movi	r2,1
 1828d38:	e0bff205 	stb	r2,-56(fp)
 1828d3c:	00000206 	br	1828d48 <lwip_recvfrom+0x2f8>
      }
    } else {
      done = 1;
 1828d40:	00800044 	movi	r2,1
 1828d44:	e0bff205 	stb	r2,-56(fp)
    }

    /* Check to see from where the data was.*/
    if (done) {
 1828d48:	e0bff203 	ldbu	r2,-56(fp)
 1828d4c:	10003d26 	beq	r2,zero,1828e44 <lwip_recvfrom+0x3f4>
      ip_addr_t fromaddr;
      if (from && fromlen) {
 1828d50:	e0800217 	ldw	r2,8(fp)
 1828d54:	10003b26 	beq	r2,zero,1828e44 <lwip_recvfrom+0x3f4>
 1828d58:	e0800317 	ldw	r2,12(fp)
 1828d5c:	10003926 	beq	r2,zero,1828e44 <lwip_recvfrom+0x3f4>
        struct sockaddr_in sin;

        if (netconn_type(sock->conn) == NETCONN_TCP) {
 1828d60:	e0bff317 	ldw	r2,-52(fp)
 1828d64:	10800017 	ldw	r2,0(r2)
 1828d68:	10800017 	ldw	r2,0(r2)
 1828d6c:	10800418 	cmpnei	r2,r2,16
 1828d70:	10000b1e 	bne	r2,zero,1828da0 <lwip_recvfrom+0x350>
          addr = &fromaddr;
 1828d74:	e0bff704 	addi	r2,fp,-36
 1828d78:	e0bff115 	stw	r2,-60(fp)
          netconn_getaddr(sock->conn, addr, &port, 0);
 1828d7c:	e0bff317 	ldw	r2,-52(fp)
 1828d80:	10800017 	ldw	r2,0(r2)
 1828d84:	e0fff604 	addi	r3,fp,-40
 1828d88:	000f883a 	mov	r7,zero
 1828d8c:	180d883a 	mov	r6,r3
 1828d90:	e17ff117 	ldw	r5,-60(fp)
 1828d94:	1009883a 	mov	r4,r2
 1828d98:	1838cbc0 	call	1838cbc <netconn_getaddr>
 1828d9c:	00000606 	br	1828db8 <lwip_recvfrom+0x368>
        } else {
          addr = netbuf_fromaddr((struct netbuf *)buf);
 1828da0:	e0bff517 	ldw	r2,-44(fp)
 1828da4:	10800204 	addi	r2,r2,8
 1828da8:	e0bff115 	stw	r2,-60(fp)
          port = netbuf_fromport((struct netbuf *)buf);
 1828dac:	e0bff517 	ldw	r2,-44(fp)
 1828db0:	1080030b 	ldhu	r2,12(r2)
 1828db4:	e0bff60d 	sth	r2,-40(fp)
        }

        memset(&sin, 0, sizeof(sin));
 1828db8:	e0bff804 	addi	r2,fp,-32
 1828dbc:	01800404 	movi	r6,16
 1828dc0:	000b883a 	mov	r5,zero
 1828dc4:	1009883a 	mov	r4,r2
 1828dc8:	18061940 	call	1806194 <memset>
        sin.sin_len = sizeof(sin);
 1828dcc:	00800404 	movi	r2,16
 1828dd0:	e0bff805 	stb	r2,-32(fp)
        sin.sin_family = AF_INET;
 1828dd4:	00800084 	movi	r2,2
 1828dd8:	e0bff845 	stb	r2,-31(fp)
        sin.sin_port = htons(port);
 1828ddc:	e0bff60b 	ldhu	r2,-40(fp)
 1828de0:	10bfffcc 	andi	r2,r2,65535
 1828de4:	1004d23a 	srli	r2,r2,8
 1828de8:	1007883a 	mov	r3,r2
 1828dec:	e0bff60b 	ldhu	r2,-40(fp)
 1828df0:	10bfffcc 	andi	r2,r2,65535
 1828df4:	1004923a 	slli	r2,r2,8
 1828df8:	1884b03a 	or	r2,r3,r2
 1828dfc:	e0bff88d 	sth	r2,-30(fp)
        inet_addr_from_ipaddr(&sin.sin_addr, addr);
 1828e00:	e0bff117 	ldw	r2,-60(fp)
 1828e04:	10800017 	ldw	r2,0(r2)
 1828e08:	e0bff915 	stw	r2,-28(fp)

        if (*fromlen > sizeof(sin)) {
 1828e0c:	e0800317 	ldw	r2,12(fp)
 1828e10:	10800017 	ldw	r2,0(r2)
 1828e14:	10800470 	cmpltui	r2,r2,17
 1828e18:	1000031e 	bne	r2,zero,1828e28 <lwip_recvfrom+0x3d8>
          *fromlen = sizeof(sin);
 1828e1c:	e0800317 	ldw	r2,12(fp)
 1828e20:	00c00404 	movi	r3,16
 1828e24:	10c00015 	stw	r3,0(r2)
        }

        MEMCPY(from, &sin, *fromlen);
 1828e28:	e0800317 	ldw	r2,12(fp)
 1828e2c:	10c00017 	ldw	r3,0(r2)
 1828e30:	e0bff804 	addi	r2,fp,-32
 1828e34:	180d883a 	mov	r6,r3
 1828e38:	100b883a 	mov	r5,r2
 1828e3c:	e1000217 	ldw	r4,8(fp)
 1828e40:	180604c0 	call	180604c <memcpy>
#endif /*  SOCKETS_DEBUG */
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 1828e44:	e0bfff17 	ldw	r2,-4(fp)
 1828e48:	1080004c 	andi	r2,r2,1
 1828e4c:	1000241e 	bne	r2,zero,1828ee0 <lwip_recvfrom+0x490>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((netconn_type(sock->conn) == NETCONN_TCP) && (buflen - copylen > 0)) {
 1828e50:	e0bff317 	ldw	r2,-52(fp)
 1828e54:	10800017 	ldw	r2,0(r2)
 1828e58:	10800017 	ldw	r2,0(r2)
 1828e5c:	10800418 	cmpnei	r2,r2,16
 1828e60:	10000f1e 	bne	r2,zero,1828ea0 <lwip_recvfrom+0x450>
 1828e64:	e0fff40b 	ldhu	r3,-48(fp)
 1828e68:	e0bfef0b 	ldhu	r2,-68(fp)
 1828e6c:	1885c83a 	sub	r2,r3,r2
 1828e70:	00800b0e 	bge	zero,r2,1828ea0 <lwip_recvfrom+0x450>
        sock->lastdata = buf;
 1828e74:	e0fff517 	ldw	r3,-44(fp)
 1828e78:	e0bff317 	ldw	r2,-52(fp)
 1828e7c:	10c00115 	stw	r3,4(r2)
        sock->lastoffset += copylen;
 1828e80:	e0bff317 	ldw	r2,-52(fp)
 1828e84:	10c0020b 	ldhu	r3,8(r2)
 1828e88:	e0bfef0b 	ldhu	r2,-68(fp)
 1828e8c:	1885883a 	add	r2,r3,r2
 1828e90:	1007883a 	mov	r3,r2
 1828e94:	e0bff317 	ldw	r2,-52(fp)
 1828e98:	10c0020d 	sth	r3,8(r2)
 1828e9c:	00001006 	br	1828ee0 <lwip_recvfrom+0x490>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
 1828ea0:	e0bff317 	ldw	r2,-52(fp)
 1828ea4:	10000115 	stw	zero,4(r2)
        sock->lastoffset = 0;
 1828ea8:	e0bff317 	ldw	r2,-52(fp)
 1828eac:	1000020d 	sth	zero,8(r2)
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (netconn_type(sock->conn) == NETCONN_TCP) {
 1828eb0:	e0bff317 	ldw	r2,-52(fp)
 1828eb4:	10800017 	ldw	r2,0(r2)
 1828eb8:	10800017 	ldw	r2,0(r2)
 1828ebc:	10800418 	cmpnei	r2,r2,16
 1828ec0:	1000041e 	bne	r2,zero,1828ed4 <lwip_recvfrom+0x484>
          pbuf_free((struct pbuf *)buf);
 1828ec4:	e0bff517 	ldw	r2,-44(fp)
 1828ec8:	1009883a 	mov	r4,r2
 1828ecc:	181a9040 	call	181a904 <pbuf_free>
 1828ed0:	00000306 	br	1828ee0 <lwip_recvfrom+0x490>
        } else {
          netbuf_delete((struct netbuf *)buf);
 1828ed4:	e0bff517 	ldw	r2,-44(fp)
 1828ed8:	1009883a 	mov	r4,r2
 1828edc:	183c0f80 	call	183c0f8 <netbuf_delete>
        }
      }
    }
  } while (!done);
 1828ee0:	e0bff203 	ldbu	r2,-56(fp)
 1828ee4:	103eec26 	beq	r2,zero,1828a98 <__alt_mem_mem_0+0xff808a98>

  if (off > 0) {
 1828ee8:	e0bff017 	ldw	r2,-64(fp)
 1828eec:	0080060e 	bge	zero,r2,1828f08 <lwip_recvfrom+0x4b8>
    /* update receive window */
    netconn_recved(sock->conn, (u32_t)off);
 1828ef0:	e0bff317 	ldw	r2,-52(fp)
 1828ef4:	10800017 	ldw	r2,0(r2)
 1828ef8:	e0fff017 	ldw	r3,-64(fp)
 1828efc:	180b883a 	mov	r5,r3
 1828f00:	1009883a 	mov	r4,r2
 1828f04:	18397380 	call	1839738 <netconn_recved>
  }
  sock_set_errno(sock, 0);
 1828f08:	e0bff317 	ldw	r2,-52(fp)
 1828f0c:	10000415 	stw	zero,16(r2)
  return off;
 1828f10:	e0bff017 	ldw	r2,-64(fp)
}
 1828f14:	e037883a 	mov	sp,fp
 1828f18:	dfc00117 	ldw	ra,4(sp)
 1828f1c:	df000017 	ldw	fp,0(sp)
 1828f20:	dec00204 	addi	sp,sp,8
 1828f24:	f800283a 	ret

01828f28 <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
 1828f28:	defff904 	addi	sp,sp,-28
 1828f2c:	dfc00615 	stw	ra,24(sp)
 1828f30:	df000515 	stw	fp,20(sp)
 1828f34:	df000504 	addi	fp,sp,20
 1828f38:	e13ffd15 	stw	r4,-12(fp)
 1828f3c:	e17ffe15 	stw	r5,-8(fp)
 1828f40:	e1bfff15 	stw	r6,-4(fp)
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 1828f44:	d8000115 	stw	zero,4(sp)
 1828f48:	d8000015 	stw	zero,0(sp)
 1828f4c:	000f883a 	mov	r7,zero
 1828f50:	e1bfff17 	ldw	r6,-4(fp)
 1828f54:	e17ffe17 	ldw	r5,-8(fp)
 1828f58:	e13ffd17 	ldw	r4,-12(fp)
 1828f5c:	1828a500 	call	1828a50 <lwip_recvfrom>
}
 1828f60:	e037883a 	mov	sp,fp
 1828f64:	dfc00117 	ldw	ra,4(sp)
 1828f68:	df000017 	ldw	fp,0(sp)
 1828f6c:	dec00204 	addi	sp,sp,8
 1828f70:	f800283a 	ret

01828f74 <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
 1828f74:	defff804 	addi	sp,sp,-32
 1828f78:	dfc00715 	stw	ra,28(sp)
 1828f7c:	df000615 	stw	fp,24(sp)
 1828f80:	df000604 	addi	fp,sp,24
 1828f84:	e13ffc15 	stw	r4,-16(fp)
 1828f88:	e17ffd15 	stw	r5,-12(fp)
 1828f8c:	e1bffe15 	stw	r6,-8(fp)
 1828f90:	e1ffff15 	stw	r7,-4(fp)
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 1828f94:	d8000115 	stw	zero,4(sp)
 1828f98:	d8000015 	stw	zero,0(sp)
 1828f9c:	e1ffff17 	ldw	r7,-4(fp)
 1828fa0:	e1bffe17 	ldw	r6,-8(fp)
 1828fa4:	e17ffd17 	ldw	r5,-12(fp)
 1828fa8:	e13ffc17 	ldw	r4,-16(fp)
 1828fac:	1828a500 	call	1828a50 <lwip_recvfrom>
}
 1828fb0:	e037883a 	mov	sp,fp
 1828fb4:	dfc00117 	ldw	ra,4(sp)
 1828fb8:	df000017 	ldw	fp,0(sp)
 1828fbc:	dec00204 	addi	sp,sp,8
 1828fc0:	f800283a 	ret

01828fc4 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
 1828fc4:	defff504 	addi	sp,sp,-44
 1828fc8:	dfc00a15 	stw	ra,40(sp)
 1828fcc:	df000915 	stw	fp,36(sp)
 1828fd0:	df000904 	addi	fp,sp,36
 1828fd4:	e13ffc15 	stw	r4,-16(fp)
 1828fd8:	e17ffd15 	stw	r5,-12(fp)
 1828fdc:	e1bffe15 	stw	r6,-8(fp)
 1828fe0:	e1ffff15 	stw	r7,-4(fp)
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 1828fe4:	e13ffc17 	ldw	r4,-16(fp)
 1828fe8:	1827fe80 	call	1827fe8 <get_socket>
 1828fec:	e0bff915 	stw	r2,-28(fp)
  if (!sock) {
 1828ff0:	e0bff917 	ldw	r2,-28(fp)
 1828ff4:	1000021e 	bne	r2,zero,1829000 <lwip_send+0x3c>
    return -1;
 1828ff8:	00bfffc4 	movi	r2,-1
 1828ffc:	00003d06 	br	18290f4 <lwip_send+0x130>
  }

  if (sock->conn->type != NETCONN_TCP) {
 1829000:	e0bff917 	ldw	r2,-28(fp)
 1829004:	10800017 	ldw	r2,0(r2)
 1829008:	10800017 	ldw	r2,0(r2)
 182900c:	10800420 	cmpeqi	r2,r2,16
 1829010:	1000081e 	bne	r2,zero,1829034 <lwip_send+0x70>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
 1829014:	d8000115 	stw	zero,4(sp)
 1829018:	d8000015 	stw	zero,0(sp)
 182901c:	e1ffff17 	ldw	r7,-4(fp)
 1829020:	e1bffe17 	ldw	r6,-8(fp)
 1829024:	e17ffd17 	ldw	r5,-12(fp)
 1829028:	e13ffc17 	ldw	r4,-16(fp)
 182902c:	18291080 	call	1829108 <lwip_sendto>
 1829030:	00003006 	br	18290f4 <lwip_send+0x130>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 1829034:	e0bfff17 	ldw	r2,-4(fp)
 1829038:	1080040c 	andi	r2,r2,16
    sock_set_errno(sock, err_to_errno(ERR_ARG));
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
 182903c:	10000226 	beq	r2,zero,1829048 <lwip_send+0x84>
 1829040:	008000c4 	movi	r2,3
 1829044:	00000106 	br	182904c <lwip_send+0x88>
 1829048:	00800044 	movi	r2,1
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
 182904c:	e0ffff17 	ldw	r3,-4(fp)
 1829050:	18c0020c 	andi	r3,r3,8
    sock_set_errno(sock, err_to_errno(ERR_ARG));
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
 1829054:	18000226 	beq	r3,zero,1829060 <lwip_send+0x9c>
 1829058:	00c00104 	movi	r3,4
 182905c:	00000106 	br	1829064 <lwip_send+0xa0>
 1829060:	0007883a 	mov	r3,zero
 1829064:	10c4b03a 	or	r2,r2,r3
 1829068:	e0bffa05 	stb	r2,-24(fp)
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  written = 0;
 182906c:	e03ffb15 	stw	zero,-20(fp)
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 1829070:	e0bff917 	ldw	r2,-28(fp)
 1829074:	10c00017 	ldw	r3,0(r2)
 1829078:	e13ffa03 	ldbu	r4,-24(fp)
 182907c:	e0bffb04 	addi	r2,fp,-20
 1829080:	d8800015 	stw	r2,0(sp)
 1829084:	200f883a 	mov	r7,r4
 1829088:	e1bffe17 	ldw	r6,-8(fp)
 182908c:	e17ffd17 	ldw	r5,-12(fp)
 1829090:	1809883a 	mov	r4,r3
 1829094:	18398f00 	call	18398f0 <netconn_write_partly>
 1829098:	e0bffa45 	stb	r2,-23(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 182909c:	e0bffa47 	ldb	r2,-23(fp)
 18290a0:	0085c83a 	sub	r2,zero,r2
 18290a4:	10800428 	cmpgeui	r2,r2,16
 18290a8:	1000091e 	bne	r2,zero,18290d0 <lwip_send+0x10c>
 18290ac:	e0bffa47 	ldb	r2,-23(fp)
 18290b0:	0087c83a 	sub	r3,zero,r2
 18290b4:	00806134 	movhi	r2,388
 18290b8:	10850004 	addi	r2,r2,5120
 18290bc:	18c7883a 	add	r3,r3,r3
 18290c0:	18c7883a 	add	r3,r3,r3
 18290c4:	10c5883a 	add	r2,r2,r3
 18290c8:	10800017 	ldw	r2,0(r2)
 18290cc:	00000106 	br	18290d4 <lwip_send+0x110>
 18290d0:	00800144 	movi	r2,5
 18290d4:	e0fff917 	ldw	r3,-28(fp)
 18290d8:	18800415 	stw	r2,16(r3)
  return (err == ERR_OK ? (int)written : -1);
 18290dc:	e0bffa47 	ldb	r2,-23(fp)
 18290e0:	1000021e 	bne	r2,zero,18290ec <lwip_send+0x128>
 18290e4:	e0bffb17 	ldw	r2,-20(fp)
 18290e8:	00000206 	br	18290f4 <lwip_send+0x130>
 18290ec:	00bfffc4 	movi	r2,-1
 18290f0:	0001883a 	nop
}
 18290f4:	e037883a 	mov	sp,fp
 18290f8:	dfc00117 	ldw	ra,4(sp)
 18290fc:	df000017 	ldw	fp,0(sp)
 1829100:	dec00204 	addi	sp,sp,8
 1829104:	f800283a 	ret

01829108 <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
 1829108:	defff004 	addi	sp,sp,-64
 182910c:	dfc00f15 	stw	ra,60(sp)
 1829110:	df000e15 	stw	fp,56(sp)
 1829114:	df000e04 	addi	fp,sp,56
 1829118:	e13ffc15 	stw	r4,-16(fp)
 182911c:	e17ffd15 	stw	r5,-12(fp)
 1829120:	e1bffe15 	stw	r6,-8(fp)
 1829124:	e1ffff15 	stw	r7,-4(fp)
  u16_t remote_port;
#if !LWIP_TCPIP_CORE_LOCKING
  struct netbuf buf;
#endif

  sock = get_socket(s);
 1829128:	e13ffc17 	ldw	r4,-16(fp)
 182912c:	1827fe80 	call	1827fe8 <get_socket>
 1829130:	e0bff315 	stw	r2,-52(fp)
  if (!sock) {
 1829134:	e0bff317 	ldw	r2,-52(fp)
 1829138:	1000021e 	bne	r2,zero,1829144 <lwip_sendto+0x3c>
    return -1;
 182913c:	00bfffc4 	movi	r2,-1
 1829140:	00006a06 	br	18292ec <lwip_sendto+0x1e4>
  }

  if (sock->conn->type == NETCONN_TCP) {
 1829144:	e0bff317 	ldw	r2,-52(fp)
 1829148:	10800017 	ldw	r2,0(r2)
 182914c:	10800017 	ldw	r2,0(r2)
 1829150:	10800418 	cmpnei	r2,r2,16
 1829154:	1000061e 	bne	r2,zero,1829170 <lwip_sendto+0x68>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
 1829158:	e1ffff17 	ldw	r7,-4(fp)
 182915c:	e1bffe17 	ldw	r6,-8(fp)
 1829160:	e17ffd17 	ldw	r5,-12(fp)
 1829164:	e13ffc17 	ldw	r4,-16(fp)
 1829168:	1828fc40 	call	1828fc4 <lwip_send>
 182916c:	00005f06 	br	18292ec <lwip_sendto+0x1e4>
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  short_size = (u16_t)size;
 1829170:	e0bffe17 	ldw	r2,-8(fp)
 1829174:	e0bff40d 	sth	r2,-48(fp)
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 1829178:	e0800217 	ldw	r2,8(fp)
 182917c:	1000021e 	bne	r2,zero,1829188 <lwip_sendto+0x80>
 1829180:	e0800317 	ldw	r2,12(fp)
 1829184:	10001426 	beq	r2,zero,18291d8 <lwip_sendto+0xd0>
 1829188:	e0800317 	ldw	r2,12(fp)
 182918c:	10800418 	cmpnei	r2,r2,16
 1829190:	1000081e 	bne	r2,zero,18291b4 <lwip_sendto+0xac>
 1829194:	e0800217 	ldw	r2,8(fp)
 1829198:	10800043 	ldbu	r2,1(r2)
 182919c:	10803fcc 	andi	r2,r2,255
 18291a0:	10800098 	cmpnei	r2,r2,2
 18291a4:	1000031e 	bne	r2,zero,18291b4 <lwip_sendto+0xac>
 18291a8:	e0800217 	ldw	r2,8(fp)
 18291ac:	108000cc 	andi	r2,r2,3
 18291b0:	10000926 	beq	r2,zero,18291d8 <lwip_sendto+0xd0>
 18291b4:	01c06134 	movhi	r7,388
 18291b8:	39c51004 	addi	r7,r7,5184
 18291bc:	0180cf44 	movi	r6,829
 18291c0:	01406134 	movhi	r5,388
 18291c4:	29453104 	addi	r5,r5,5316
 18291c8:	01006134 	movhi	r4,388
 18291cc:	21051d04 	addi	r4,r4,5236
 18291d0:	1800bd80 	call	1800bd8 <printf>
 18291d4:	003fff06 	br	18291d4 <__alt_mem_mem_0+0xff8091d4>
             ((tolen == sizeof(struct sockaddr_in)) &&
             ((to->sa_family) == AF_INET) && ((((mem_ptr_t)to) % 4) == 0))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  to_in = (const struct sockaddr_in *)(void*)to;
 18291d8:	e0800217 	ldw	r2,8(fp)
 18291dc:	e0bff515 	stw	r2,-44(fp)
      err = ERR_MEM;
    }
  }
#else /* LWIP_TCPIP_CORE_LOCKING */
  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 18291e0:	e03ff815 	stw	zero,-32(fp)
 18291e4:	e0bff817 	ldw	r2,-32(fp)
 18291e8:	e0bff715 	stw	r2,-36(fp)
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
 18291ec:	e03ffa85 	stb	zero,-22(fp)
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 18291f0:	e0800217 	ldw	r2,8(fp)
 18291f4:	10001126 	beq	r2,zero,182923c <lwip_sendto+0x134>
    inet_addr_to_ipaddr(&buf.addr, &to_in->sin_addr);
 18291f8:	e0bff517 	ldw	r2,-44(fp)
 18291fc:	10800117 	ldw	r2,4(r2)
 1829200:	e0bff915 	stw	r2,-28(fp)
    remote_port           = ntohs(to_in->sin_port);
 1829204:	e0bff517 	ldw	r2,-44(fp)
 1829208:	1080008b 	ldhu	r2,2(r2)
 182920c:	10bfffcc 	andi	r2,r2,65535
 1829210:	1004d23a 	srli	r2,r2,8
 1829214:	1007883a 	mov	r3,r2
 1829218:	e0bff517 	ldw	r2,-44(fp)
 182921c:	1080008b 	ldhu	r2,2(r2)
 1829220:	10bfffcc 	andi	r2,r2,65535
 1829224:	1004923a 	slli	r2,r2,8
 1829228:	1884b03a 	or	r2,r3,r2
 182922c:	e0bff60d 	sth	r2,-40(fp)
    netbuf_fromport(&buf) = remote_port;
 1829230:	e0bff60b 	ldhu	r2,-40(fp)
 1829234:	e0bffa0d 	sth	r2,-24(fp)
 1829238:	00000306 	br	1829248 <lwip_sendto+0x140>
  } else {
    remote_port           = 0;
 182923c:	e03ff60d 	sth	zero,-40(fp)
    ip_addr_set_any(&buf.addr);
 1829240:	e03ff915 	stw	zero,-28(fp)
    netbuf_fromport(&buf) = 0;
 1829244:	e03ffa0d 	sth	zero,-24(fp)
    {
      err = netbuf_take(&buf, data, short_size);
    }
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 1829248:	e0fff40b 	ldhu	r3,-48(fp)
 182924c:	e0bff704 	addi	r2,fp,-36
 1829250:	180d883a 	mov	r6,r3
 1829254:	e17ffd17 	ldw	r5,-12(fp)
 1829258:	1009883a 	mov	r4,r2
 182925c:	183c2c00 	call	183c2c0 <netbuf_ref>
 1829260:	e0bff205 	stb	r2,-56(fp)
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 1829264:	e0bff207 	ldb	r2,-56(fp)
 1829268:	1000071e 	bne	r2,zero,1829288 <lwip_sendto+0x180>
    /* send the data */
    err = netconn_send(sock->conn, &buf);
 182926c:	e0bff317 	ldw	r2,-52(fp)
 1829270:	10800017 	ldw	r2,0(r2)
 1829274:	e0fff704 	addi	r3,fp,-36
 1829278:	180b883a 	mov	r5,r3
 182927c:	1009883a 	mov	r4,r2
 1829280:	18398380 	call	1839838 <netconn_send>
 1829284:	e0bff205 	stb	r2,-56(fp)
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 1829288:	e0bff704 	addi	r2,fp,-36
 182928c:	1009883a 	mov	r4,r2
 1829290:	183c2340 	call	183c234 <netbuf_free>
#endif /* LWIP_TCPIP_CORE_LOCKING */
  sock_set_errno(sock, err_to_errno(err));
 1829294:	e0bff207 	ldb	r2,-56(fp)
 1829298:	0085c83a 	sub	r2,zero,r2
 182929c:	10800428 	cmpgeui	r2,r2,16
 18292a0:	1000091e 	bne	r2,zero,18292c8 <lwip_sendto+0x1c0>
 18292a4:	e0bff207 	ldb	r2,-56(fp)
 18292a8:	0087c83a 	sub	r3,zero,r2
 18292ac:	00806134 	movhi	r2,388
 18292b0:	10850004 	addi	r2,r2,5120
 18292b4:	18c7883a 	add	r3,r3,r3
 18292b8:	18c7883a 	add	r3,r3,r3
 18292bc:	10c5883a 	add	r2,r2,r3
 18292c0:	10800017 	ldw	r2,0(r2)
 18292c4:	00000106 	br	18292cc <lwip_sendto+0x1c4>
 18292c8:	00800144 	movi	r2,5
 18292cc:	e0fff317 	ldw	r3,-52(fp)
 18292d0:	18800415 	stw	r2,16(r3)
  return (err == ERR_OK ? short_size : -1);
 18292d4:	e0bff207 	ldb	r2,-56(fp)
 18292d8:	1000021e 	bne	r2,zero,18292e4 <lwip_sendto+0x1dc>
 18292dc:	e0bff40b 	ldhu	r2,-48(fp)
 18292e0:	00000206 	br	18292ec <lwip_sendto+0x1e4>
 18292e4:	00bfffc4 	movi	r2,-1
 18292e8:	0001883a 	nop
}
 18292ec:	e037883a 	mov	sp,fp
 18292f0:	dfc00117 	ldw	ra,4(sp)
 18292f4:	df000017 	ldw	fp,0(sp)
 18292f8:	dec00204 	addi	sp,sp,8
 18292fc:	f800283a 	ret

01829300 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 1829300:	defff904 	addi	sp,sp,-28
 1829304:	dfc00615 	stw	ra,24(sp)
 1829308:	df000515 	stw	fp,20(sp)
 182930c:	df000504 	addi	fp,sp,20
 1829310:	e13ffd15 	stw	r4,-12(fp)
 1829314:	e17ffe15 	stw	r5,-8(fp)
 1829318:	e1bfff15 	stw	r6,-4(fp)
  int i;

  LWIP_UNUSED_ARG(domain);

  /* create a netconn */
  switch (type) {
 182931c:	e0bffe17 	ldw	r2,-8(fp)
 1829320:	10c000a0 	cmpeqi	r3,r2,2
 1829324:	18000e1e 	bne	r3,zero,1829360 <lwip_socket+0x60>
 1829328:	10c000e0 	cmpeqi	r3,r2,3
 182932c:	1800031e 	bne	r3,zero,182933c <lwip_socket+0x3c>
 1829330:	10800060 	cmpeqi	r2,r2,1
 1829334:	1000171e 	bne	r2,zero,1829394 <lwip_socket+0x94>
 1829338:	00002506 	br	18293d0 <lwip_socket+0xd0>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(NETCONN_RAW, (u8_t)protocol, event_callback);
 182933c:	e0bfff17 	ldw	r2,-4(fp)
 1829340:	10803fcc 	andi	r2,r2,255
 1829344:	018060f4 	movhi	r6,387
 1829348:	31a72704 	addi	r6,r6,-25444
 182934c:	100b883a 	mov	r5,r2
 1829350:	01001004 	movi	r4,64
 1829354:	1838ba00 	call	1838ba0 <netconn_new_with_proto_and_callback>
 1829358:	e0bffb15 	stw	r2,-20(fp)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 182935c:	00001f06 	br	18293dc <lwip_socket+0xdc>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback( (protocol == IPPROTO_UDPLITE) ?
 1829360:	e0bfff17 	ldw	r2,-4(fp)
 1829364:	10802218 	cmpnei	r2,r2,136
 1829368:	1000021e 	bne	r2,zero,1829374 <lwip_socket+0x74>
 182936c:	00800844 	movi	r2,33
 1829370:	00000106 	br	1829378 <lwip_socket+0x78>
 1829374:	00800804 	movi	r2,32
 1829378:	018060f4 	movhi	r6,387
 182937c:	31a72704 	addi	r6,r6,-25444
 1829380:	000b883a 	mov	r5,zero
 1829384:	1009883a 	mov	r4,r2
 1829388:	1838ba00 	call	1838ba0 <netconn_new_with_proto_and_callback>
 182938c:	e0bffb15 	stw	r2,-20(fp)
                 NETCONN_UDPLITE : NETCONN_UDP, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 1829390:	00001206 	br	18293dc <lwip_socket+0xdc>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(NETCONN_TCP, event_callback);
 1829394:	018060f4 	movhi	r6,387
 1829398:	31a72704 	addi	r6,r6,-25444
 182939c:	000b883a 	mov	r5,zero
 18293a0:	01000404 	movi	r4,16
 18293a4:	1838ba00 	call	1838ba0 <netconn_new_with_proto_and_callback>
 18293a8:	e0bffb15 	stw	r2,-20(fp)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    if (conn != NULL) {
 18293ac:	e0bffb17 	ldw	r2,-20(fp)
 18293b0:	10000926 	beq	r2,zero,18293d8 <lwip_socket+0xd8>
      /* Prevent automatic window updates, we do this on our own! */
      netconn_set_noautorecved(conn, 1);
 18293b4:	e0bffb17 	ldw	r2,-20(fp)
 18293b8:	10800903 	ldbu	r2,36(r2)
 18293bc:	10800214 	ori	r2,r2,8
 18293c0:	1007883a 	mov	r3,r2
 18293c4:	e0bffb17 	ldw	r2,-20(fp)
 18293c8:	10c00905 	stb	r3,36(r2)
    }
    break;
 18293cc:	00000206 	br	18293d8 <lwip_socket+0xd8>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
    return -1;
 18293d0:	00bfffc4 	movi	r2,-1
 18293d4:	00001706 	br	1829434 <lwip_socket+0x134>
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    if (conn != NULL) {
      /* Prevent automatic window updates, we do this on our own! */
      netconn_set_noautorecved(conn, 1);
    }
    break;
 18293d8:	0001883a 	nop
                                 domain, type, protocol));
    set_errno(EINVAL);
    return -1;
  }

  if (!conn) {
 18293dc:	e0bffb17 	ldw	r2,-20(fp)
 18293e0:	1000021e 	bne	r2,zero,18293ec <lwip_socket+0xec>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
    return -1;
 18293e4:	00bfffc4 	movi	r2,-1
 18293e8:	00001206 	br	1829434 <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
 18293ec:	000b883a 	mov	r5,zero
 18293f0:	e13ffb17 	ldw	r4,-20(fp)
 18293f4:	18280e00 	call	18280e0 <alloc_socket>
 18293f8:	e0bffc15 	stw	r2,-16(fp)

  if (i == -1) {
 18293fc:	e0bffc17 	ldw	r2,-16(fp)
 1829400:	10bfffd8 	cmpnei	r2,r2,-1
 1829404:	1000041e 	bne	r2,zero,1829418 <lwip_socket+0x118>
    netconn_delete(conn);
 1829408:	e13ffb17 	ldw	r4,-20(fp)
 182940c:	1838c5c0 	call	1838c5c <netconn_delete>
    set_errno(ENFILE);
    return -1;
 1829410:	00bfffc4 	movi	r2,-1
 1829414:	00000706 	br	1829434 <lwip_socket+0x134>
  }

  i += LWIP_SOCKET_OFFSET;
 1829418:	e0bffc17 	ldw	r2,-16(fp)
 182941c:	10800804 	addi	r2,r2,32
 1829420:	e0bffc15 	stw	r2,-16(fp)

  conn->socket = i;
 1829424:	e0bffb17 	ldw	r2,-20(fp)
 1829428:	e0fffc17 	ldw	r3,-16(fp)
 182942c:	10c00715 	stw	r3,28(r2)
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 1829430:	e0bffc17 	ldw	r2,-16(fp)
}
 1829434:	e037883a 	mov	sp,fp
 1829438:	dfc00117 	ldw	ra,4(sp)
 182943c:	df000017 	ldw	fp,0(sp)
 1829440:	dec00204 	addi	sp,sp,8
 1829444:	f800283a 	ret

01829448 <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
 1829448:	defffb04 	addi	sp,sp,-20
 182944c:	dfc00415 	stw	ra,16(sp)
 1829450:	df000315 	stw	fp,12(sp)
 1829454:	df000304 	addi	fp,sp,12
 1829458:	e13ffd15 	stw	r4,-12(fp)
 182945c:	e17ffe15 	stw	r5,-8(fp)
 1829460:	e1bfff15 	stw	r6,-4(fp)
  return lwip_send(s, data, size, 0);
 1829464:	000f883a 	mov	r7,zero
 1829468:	e1bfff17 	ldw	r6,-4(fp)
 182946c:	e17ffe17 	ldw	r5,-8(fp)
 1829470:	e13ffd17 	ldw	r4,-12(fp)
 1829474:	1828fc40 	call	1828fc4 <lwip_send>
}
 1829478:	e037883a 	mov	sp,fp
 182947c:	dfc00117 	ldw	ra,4(sp)
 1829480:	df000017 	ldw	fp,0(sp)
 1829484:	dec00204 	addi	sp,sp,8
 1829488:	f800283a 	ret

0182948c <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 182948c:	deffe804 	addi	sp,sp,-96
 1829490:	dfc01715 	stw	ra,92(sp)
 1829494:	df001615 	stw	fp,88(sp)
 1829498:	df001604 	addi	fp,sp,88
 182949c:	e13ffc15 	stw	r4,-16(fp)
 18294a0:	e17ffd15 	stw	r5,-12(fp)
 18294a4:	e1bffe15 	stw	r6,-8(fp)
 18294a8:	e1ffff15 	stw	r7,-4(fp)
  int i, nready = 0;
 18294ac:	e03feb15 	stw	zero,-84(fp)
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 18294b0:	e0bff604 	addi	r2,fp,-40
 18294b4:	e0bfed15 	stw	r2,-76(fp)
 18294b8:	e03fec15 	stw	zero,-80(fp)
 18294bc:	00000706 	br	18294dc <lwip_selscan+0x50>
 18294c0:	e0bfed17 	ldw	r2,-76(fp)
 18294c4:	10c00044 	addi	r3,r2,1
 18294c8:	e0ffed15 	stw	r3,-76(fp)
 18294cc:	10000005 	stb	zero,0(r2)
 18294d0:	e0bfec17 	ldw	r2,-80(fp)
 18294d4:	10800044 	addi	r2,r2,1
 18294d8:	e0bfec15 	stw	r2,-80(fp)
 18294dc:	e0bfec17 	ldw	r2,-80(fp)
 18294e0:	10800230 	cmpltui	r2,r2,8
 18294e4:	103ff61e 	bne	r2,zero,18294c0 <__alt_mem_mem_0+0xff8094c0>
  FD_ZERO(&lwriteset);
 18294e8:	e0bff804 	addi	r2,fp,-32
 18294ec:	e0bfef15 	stw	r2,-68(fp)
 18294f0:	e03fee15 	stw	zero,-72(fp)
 18294f4:	00000706 	br	1829514 <lwip_selscan+0x88>
 18294f8:	e0bfef17 	ldw	r2,-68(fp)
 18294fc:	10c00044 	addi	r3,r2,1
 1829500:	e0ffef15 	stw	r3,-68(fp)
 1829504:	10000005 	stb	zero,0(r2)
 1829508:	e0bfee17 	ldw	r2,-72(fp)
 182950c:	10800044 	addi	r2,r2,1
 1829510:	e0bfee15 	stw	r2,-72(fp)
 1829514:	e0bfee17 	ldw	r2,-72(fp)
 1829518:	10800230 	cmpltui	r2,r2,8
 182951c:	103ff61e 	bne	r2,zero,18294f8 <__alt_mem_mem_0+0xff8094f8>
  FD_ZERO(&lexceptset);
 1829520:	e0bffa04 	addi	r2,fp,-24
 1829524:	e0bff115 	stw	r2,-60(fp)
 1829528:	e03ff015 	stw	zero,-64(fp)
 182952c:	00000706 	br	182954c <lwip_selscan+0xc0>
 1829530:	e0bff117 	ldw	r2,-60(fp)
 1829534:	10c00044 	addi	r3,r2,1
 1829538:	e0fff115 	stw	r3,-60(fp)
 182953c:	10000005 	stb	zero,0(r2)
 1829540:	e0bff017 	ldw	r2,-64(fp)
 1829544:	10800044 	addi	r2,r2,1
 1829548:	e0bff015 	stw	r2,-64(fp)
 182954c:	e0bff017 	ldw	r2,-64(fp)
 1829550:	10800230 	cmpltui	r2,r2,8
 1829554:	103ff61e 	bne	r2,zero,1829530 <__alt_mem_mem_0+0xff809530>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 1829558:	00800804 	movi	r2,32
 182955c:	e0bfea15 	stw	r2,-88(fp)
 1829560:	00008e06 	br	182979c <lwip_selscan+0x310>
    void* lastdata = NULL;
 1829564:	e03ff215 	stw	zero,-56(fp)
    s16_t rcvevent = 0;
 1829568:	e03ff30d 	sth	zero,-52(fp)
    u16_t sendevent = 0;
 182956c:	e03ff38d 	sth	zero,-50(fp)
    u16_t errevent = 0;
 1829570:	e03ff40d 	sth	zero,-48(fp)
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 1829574:	1810de40 	call	1810de4 <vTaskEnterCritical>
    sock = tryget_socket(i);
 1829578:	e13fea17 	ldw	r4,-88(fp)
 182957c:	18280600 	call	1828060 <tryget_socket>
 1829580:	e0bff515 	stw	r2,-44(fp)
    if (sock != NULL) {
 1829584:	e0bff517 	ldw	r2,-44(fp)
 1829588:	10000c26 	beq	r2,zero,18295bc <lwip_selscan+0x130>
      lastdata = sock->lastdata;
 182958c:	e0bff517 	ldw	r2,-44(fp)
 1829590:	10800117 	ldw	r2,4(r2)
 1829594:	e0bff215 	stw	r2,-56(fp)
      rcvevent = sock->rcvevent;
 1829598:	e0bff517 	ldw	r2,-44(fp)
 182959c:	1080028b 	ldhu	r2,10(r2)
 18295a0:	e0bff30d 	sth	r2,-52(fp)
      sendevent = sock->sendevent;
 18295a4:	e0bff517 	ldw	r2,-44(fp)
 18295a8:	1080030b 	ldhu	r2,12(r2)
 18295ac:	e0bff38d 	sth	r2,-50(fp)
      errevent = sock->errevent;
 18295b0:	e0bff517 	ldw	r2,-44(fp)
 18295b4:	1080038b 	ldhu	r2,14(r2)
 18295b8:	e0bff40d 	sth	r2,-48(fp)
    }
    SYS_ARCH_UNPROTECT(lev);
 18295bc:	1810e380 	call	1810e38 <vTaskExitCritical>
    /* ... then examine it: */
    /* See if netconn of this socket is ready for read */
    if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 18295c0:	e0bffd17 	ldw	r2,-12(fp)
 18295c4:	10002626 	beq	r2,zero,1829660 <lwip_selscan+0x1d4>
 18295c8:	e0bfea17 	ldw	r2,-88(fp)
 18295cc:	1004d17a 	srli	r2,r2,5
 18295d0:	e0fffd17 	ldw	r3,-12(fp)
 18295d4:	1085883a 	add	r2,r2,r2
 18295d8:	1085883a 	add	r2,r2,r2
 18295dc:	1885883a 	add	r2,r3,r2
 18295e0:	10c00017 	ldw	r3,0(r2)
 18295e4:	e0bfea17 	ldw	r2,-88(fp)
 18295e8:	108007cc 	andi	r2,r2,31
 18295ec:	1885d83a 	sra	r2,r3,r2
 18295f0:	1080004c 	andi	r2,r2,1
 18295f4:	10001a26 	beq	r2,zero,1829660 <lwip_selscan+0x1d4>
 18295f8:	e0bff217 	ldw	r2,-56(fp)
 18295fc:	1000021e 	bne	r2,zero,1829608 <lwip_selscan+0x17c>
 1829600:	e0bff30f 	ldh	r2,-52(fp)
 1829604:	0080160e 	bge	zero,r2,1829660 <lwip_selscan+0x1d4>
      FD_SET(i, &lreadset);
 1829608:	e0bfea17 	ldw	r2,-88(fp)
 182960c:	1004d17a 	srli	r2,r2,5
 1829610:	1087883a 	add	r3,r2,r2
 1829614:	18c7883a 	add	r3,r3,r3
 1829618:	e13fea04 	addi	r4,fp,-88
 182961c:	20c7883a 	add	r3,r4,r3
 1829620:	18c00c04 	addi	r3,r3,48
 1829624:	19000017 	ldw	r4,0(r3)
 1829628:	e0ffea17 	ldw	r3,-88(fp)
 182962c:	18c007cc 	andi	r3,r3,31
 1829630:	01400044 	movi	r5,1
 1829634:	28c6983a 	sll	r3,r5,r3
 1829638:	20c6b03a 	or	r3,r4,r3
 182963c:	1085883a 	add	r2,r2,r2
 1829640:	1085883a 	add	r2,r2,r2
 1829644:	e13fea04 	addi	r4,fp,-88
 1829648:	2085883a 	add	r2,r4,r2
 182964c:	10800c04 	addi	r2,r2,48
 1829650:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
      nready++;
 1829654:	e0bfeb17 	ldw	r2,-84(fp)
 1829658:	10800044 	addi	r2,r2,1
 182965c:	e0bfeb15 	stw	r2,-84(fp)
    }
    /* See if netconn of this socket is ready for write */
    if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 1829660:	e0bffe17 	ldw	r2,-8(fp)
 1829664:	10002426 	beq	r2,zero,18296f8 <lwip_selscan+0x26c>
 1829668:	e0bfea17 	ldw	r2,-88(fp)
 182966c:	1004d17a 	srli	r2,r2,5
 1829670:	e0fffe17 	ldw	r3,-8(fp)
 1829674:	1085883a 	add	r2,r2,r2
 1829678:	1085883a 	add	r2,r2,r2
 182967c:	1885883a 	add	r2,r3,r2
 1829680:	10c00017 	ldw	r3,0(r2)
 1829684:	e0bfea17 	ldw	r2,-88(fp)
 1829688:	108007cc 	andi	r2,r2,31
 182968c:	1885d83a 	sra	r2,r3,r2
 1829690:	1080004c 	andi	r2,r2,1
 1829694:	10001826 	beq	r2,zero,18296f8 <lwip_selscan+0x26c>
 1829698:	e0bff38b 	ldhu	r2,-50(fp)
 182969c:	10001626 	beq	r2,zero,18296f8 <lwip_selscan+0x26c>
      FD_SET(i, &lwriteset);
 18296a0:	e0bfea17 	ldw	r2,-88(fp)
 18296a4:	1004d17a 	srli	r2,r2,5
 18296a8:	1087883a 	add	r3,r2,r2
 18296ac:	18c7883a 	add	r3,r3,r3
 18296b0:	e13fea04 	addi	r4,fp,-88
 18296b4:	20c7883a 	add	r3,r4,r3
 18296b8:	18c00e04 	addi	r3,r3,56
 18296bc:	19000017 	ldw	r4,0(r3)
 18296c0:	e0ffea17 	ldw	r3,-88(fp)
 18296c4:	18c007cc 	andi	r3,r3,31
 18296c8:	01400044 	movi	r5,1
 18296cc:	28c6983a 	sll	r3,r5,r3
 18296d0:	20c6b03a 	or	r3,r4,r3
 18296d4:	1085883a 	add	r2,r2,r2
 18296d8:	1085883a 	add	r2,r2,r2
 18296dc:	e13fea04 	addi	r4,fp,-88
 18296e0:	2085883a 	add	r2,r4,r2
 18296e4:	10800e04 	addi	r2,r2,56
 18296e8:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
      nready++;
 18296ec:	e0bfeb17 	ldw	r2,-84(fp)
 18296f0:	10800044 	addi	r2,r2,1
 18296f4:	e0bfeb15 	stw	r2,-84(fp)
    }
    /* See if netconn of this socket had an error */
    if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 18296f8:	e0bfff17 	ldw	r2,-4(fp)
 18296fc:	10002426 	beq	r2,zero,1829790 <lwip_selscan+0x304>
 1829700:	e0bfea17 	ldw	r2,-88(fp)
 1829704:	1004d17a 	srli	r2,r2,5
 1829708:	e0ffff17 	ldw	r3,-4(fp)
 182970c:	1085883a 	add	r2,r2,r2
 1829710:	1085883a 	add	r2,r2,r2
 1829714:	1885883a 	add	r2,r3,r2
 1829718:	10c00017 	ldw	r3,0(r2)
 182971c:	e0bfea17 	ldw	r2,-88(fp)
 1829720:	108007cc 	andi	r2,r2,31
 1829724:	1885d83a 	sra	r2,r3,r2
 1829728:	1080004c 	andi	r2,r2,1
 182972c:	10001826 	beq	r2,zero,1829790 <lwip_selscan+0x304>
 1829730:	e0bff40b 	ldhu	r2,-48(fp)
 1829734:	10001626 	beq	r2,zero,1829790 <lwip_selscan+0x304>
      FD_SET(i, &lexceptset);
 1829738:	e0bfea17 	ldw	r2,-88(fp)
 182973c:	1004d17a 	srli	r2,r2,5
 1829740:	1087883a 	add	r3,r2,r2
 1829744:	18c7883a 	add	r3,r3,r3
 1829748:	e13fea04 	addi	r4,fp,-88
 182974c:	20c7883a 	add	r3,r4,r3
 1829750:	18c01004 	addi	r3,r3,64
 1829754:	19000017 	ldw	r4,0(r3)
 1829758:	e0ffea17 	ldw	r3,-88(fp)
 182975c:	18c007cc 	andi	r3,r3,31
 1829760:	01400044 	movi	r5,1
 1829764:	28c6983a 	sll	r3,r5,r3
 1829768:	20c6b03a 	or	r3,r4,r3
 182976c:	1085883a 	add	r2,r2,r2
 1829770:	1085883a 	add	r2,r2,r2
 1829774:	e13fea04 	addi	r4,fp,-88
 1829778:	2085883a 	add	r2,r4,r2
 182977c:	10801004 	addi	r2,r2,64
 1829780:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
      nready++;
 1829784:	e0bfeb17 	ldw	r2,-84(fp)
 1829788:	10800044 	addi	r2,r2,1
 182978c:	e0bfeb15 	stw	r2,-84(fp)
  FD_ZERO(&lwriteset);
  FD_ZERO(&lexceptset);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 1829790:	e0bfea17 	ldw	r2,-88(fp)
 1829794:	10800044 	addi	r2,r2,1
 1829798:	e0bfea15 	stw	r2,-88(fp)
 182979c:	e0ffea17 	ldw	r3,-88(fp)
 18297a0:	e0bffc17 	ldw	r2,-16(fp)
 18297a4:	18bf6f16 	blt	r3,r2,1829564 <__alt_mem_mem_0+0xff809564>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
      nready++;
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 18297a8:	e0800217 	ldw	r2,8(fp)
 18297ac:	e0fff617 	ldw	r3,-40(fp)
 18297b0:	10c00015 	stw	r3,0(r2)
 18297b4:	e0fff717 	ldw	r3,-36(fp)
 18297b8:	10c00115 	stw	r3,4(r2)
  *writeset_out = lwriteset;
 18297bc:	e0800317 	ldw	r2,12(fp)
 18297c0:	e0fff817 	ldw	r3,-32(fp)
 18297c4:	10c00015 	stw	r3,0(r2)
 18297c8:	e0fff917 	ldw	r3,-28(fp)
 18297cc:	10c00115 	stw	r3,4(r2)
  *exceptset_out = lexceptset;
 18297d0:	e0800417 	ldw	r2,16(fp)
 18297d4:	e0fffa17 	ldw	r3,-24(fp)
 18297d8:	10c00015 	stw	r3,0(r2)
 18297dc:	e0fffb17 	ldw	r3,-20(fp)
 18297e0:	10c00115 	stw	r3,4(r2)

  LWIP_ASSERT("nready >= 0", nready >= 0);
  return nready;
 18297e4:	e0bfeb17 	ldw	r2,-84(fp)
}
 18297e8:	e037883a 	mov	sp,fp
 18297ec:	dfc00117 	ldw	ra,4(sp)
 18297f0:	df000017 	ldw	fp,0(sp)
 18297f4:	dec00204 	addi	sp,sp,8
 18297f8:	f800283a 	ret

018297fc <lwip_select>:
 * Processing exceptset is not yet implemented.
 */
int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 18297fc:	deffe204 	addi	sp,sp,-120
 1829800:	dfc01d15 	stw	ra,116(sp)
 1829804:	df001c15 	stw	fp,112(sp)
 1829808:	dc001b15 	stw	r16,108(sp)
 182980c:	df001c04 	addi	fp,sp,112
 1829810:	e13ffb15 	stw	r4,-20(fp)
 1829814:	e17ffc15 	stw	r5,-16(fp)
 1829818:	e1bffd15 	stw	r6,-12(fp)
 182981c:	e1fffe15 	stw	r7,-8(fp)
  u32_t waitres = 0;
 1829820:	e03fe715 	stw	zero,-100(fp)
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 1829824:	e0bff204 	addi	r2,fp,-56
 1829828:	d8800215 	stw	r2,8(sp)
 182982c:	e0bff004 	addi	r2,fp,-64
 1829830:	d8800115 	stw	r2,4(sp)
 1829834:	e0bfee04 	addi	r2,fp,-72
 1829838:	d8800015 	stw	r2,0(sp)
 182983c:	e1fffe17 	ldw	r7,-8(fp)
 1829840:	e1bffd17 	ldw	r6,-12(fp)
 1829844:	e17ffc17 	ldw	r5,-16(fp)
 1829848:	e13ffb17 	ldw	r4,-20(fp)
 182984c:	182948c0 	call	182948c <lwip_selscan>
 1829850:	e0bfe815 	stw	r2,-96(fp)

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
 1829854:	e0bfe817 	ldw	r2,-96(fp)
 1829858:	1000f41e 	bne	r2,zero,1829c2c <lwip_select+0x430>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 182985c:	e0800217 	ldw	r2,8(fp)
 1829860:	10000626 	beq	r2,zero,182987c <lwip_select+0x80>
 1829864:	e0800217 	ldw	r2,8(fp)
 1829868:	10800017 	ldw	r2,0(r2)
 182986c:	1000031e 	bne	r2,zero,182987c <lwip_select+0x80>
 1829870:	e0800217 	ldw	r2,8(fp)
 1829874:	10800117 	ldw	r2,4(r2)
 1829878:	1000e926 	beq	r2,zero,1829c20 <lwip_select+0x424>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
 182987c:	e03ff415 	stw	zero,-48(fp)
    select_cb.prev = NULL;
 1829880:	e03ff515 	stw	zero,-44(fp)
    select_cb.readset = readset;
 1829884:	e0bffc17 	ldw	r2,-16(fp)
 1829888:	e0bff615 	stw	r2,-40(fp)
    select_cb.writeset = writeset;
 182988c:	e0bffd17 	ldw	r2,-12(fp)
 1829890:	e0bff715 	stw	r2,-36(fp)
    select_cb.exceptset = exceptset;
 1829894:	e0bffe17 	ldw	r2,-8(fp)
 1829898:	e0bff815 	stw	r2,-32(fp)
    select_cb.sem_signalled = 0;
 182989c:	e03ff915 	stw	zero,-28(fp)
    err = sys_sem_new(&select_cb.sem, 0);
 18298a0:	e0bff404 	addi	r2,fp,-48
 18298a4:	10800604 	addi	r2,r2,24
 18298a8:	000b883a 	mov	r5,zero
 18298ac:	1009883a 	mov	r4,r2
 18298b0:	1814bf00 	call	1814bf0 <sys_sem_new>
 18298b4:	e0bfeb05 	stb	r2,-84(fp)
    if (err != ERR_OK) {
 18298b8:	e0bfeb07 	ldb	r2,-84(fp)
 18298bc:	10000226 	beq	r2,zero,18298c8 <lwip_select+0xcc>
      /* failed to create semaphore */
      set_errno(ENOMEM);
      return -1;
 18298c0:	00bfffc4 	movi	r2,-1
 18298c4:	0000ef06 	br	1829c84 <lwip_select+0x488>
    }

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
 18298c8:	1810de40 	call	1810de4 <vTaskEnterCritical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
 18298cc:	d0a80917 	ldw	r2,-24540(gp)
 18298d0:	e0bff415 	stw	r2,-48(fp)
    if (select_cb_list != NULL) {
 18298d4:	d0a80917 	ldw	r2,-24540(gp)
 18298d8:	10000326 	beq	r2,zero,18298e8 <lwip_select+0xec>
      select_cb_list->prev = &select_cb;
 18298dc:	d0a80917 	ldw	r2,-24540(gp)
 18298e0:	e0fff404 	addi	r3,fp,-48
 18298e4:	10c00115 	stw	r3,4(r2)
    }
    select_cb_list = &select_cb;
 18298e8:	e0bff404 	addi	r2,fp,-48
 18298ec:	d0a80915 	stw	r2,-24540(gp)
    /* Increasing this counter tells even_callback that the list has changed. */
    select_cb_ctr++;
 18298f0:	d0a80a17 	ldw	r2,-24536(gp)
 18298f4:	10800044 	addi	r2,r2,1
 18298f8:	d0a80a15 	stw	r2,-24536(gp)

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
 18298fc:	1810e380 	call	1810e38 <vTaskExitCritical>

    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 1829900:	00800804 	movi	r2,32
 1829904:	e0bfea15 	stw	r2,-88(fp)
 1829908:	00003706 	br	18299e8 <lwip_select+0x1ec>
      if ((readset && FD_ISSET(i, readset)) ||
 182990c:	e0bffc17 	ldw	r2,-16(fp)
 1829910:	10000c26 	beq	r2,zero,1829944 <lwip_select+0x148>
 1829914:	e0bfea17 	ldw	r2,-88(fp)
 1829918:	1004d17a 	srli	r2,r2,5
 182991c:	e0fffc17 	ldw	r3,-16(fp)
 1829920:	1085883a 	add	r2,r2,r2
 1829924:	1085883a 	add	r2,r2,r2
 1829928:	1885883a 	add	r2,r3,r2
 182992c:	10c00017 	ldw	r3,0(r2)
 1829930:	e0bfea17 	ldw	r2,-88(fp)
 1829934:	108007cc 	andi	r2,r2,31
 1829938:	1885d83a 	sra	r2,r3,r2
 182993c:	1080004c 	andi	r2,r2,1
 1829940:	10001c1e 	bne	r2,zero,18299b4 <lwip_select+0x1b8>
 1829944:	e0bffd17 	ldw	r2,-12(fp)
 1829948:	10000c26 	beq	r2,zero,182997c <lwip_select+0x180>
          (writeset && FD_ISSET(i, writeset)) ||
 182994c:	e0bfea17 	ldw	r2,-88(fp)
 1829950:	1004d17a 	srli	r2,r2,5
 1829954:	e0fffd17 	ldw	r3,-12(fp)
 1829958:	1085883a 	add	r2,r2,r2
 182995c:	1085883a 	add	r2,r2,r2
 1829960:	1885883a 	add	r2,r3,r2
 1829964:	10c00017 	ldw	r3,0(r2)
 1829968:	e0bfea17 	ldw	r2,-88(fp)
 182996c:	108007cc 	andi	r2,r2,31
 1829970:	1885d83a 	sra	r2,r3,r2
 1829974:	1080004c 	andi	r2,r2,1
 1829978:	10000e1e 	bne	r2,zero,18299b4 <lwip_select+0x1b8>
 182997c:	e0bffe17 	ldw	r2,-8(fp)
 1829980:	10001626 	beq	r2,zero,18299dc <lwip_select+0x1e0>
          (exceptset && FD_ISSET(i, exceptset))) {
 1829984:	e0bfea17 	ldw	r2,-88(fp)
 1829988:	1004d17a 	srli	r2,r2,5
 182998c:	e0fffe17 	ldw	r3,-8(fp)
 1829990:	1085883a 	add	r2,r2,r2
 1829994:	1085883a 	add	r2,r2,r2
 1829998:	1885883a 	add	r2,r3,r2
 182999c:	10c00017 	ldw	r3,0(r2)
 18299a0:	e0bfea17 	ldw	r2,-88(fp)
 18299a4:	108007cc 	andi	r2,r2,31
 18299a8:	1885d83a 	sra	r2,r3,r2
 18299ac:	1080004c 	andi	r2,r2,1
 18299b0:	10000a26 	beq	r2,zero,18299dc <lwip_select+0x1e0>
        struct lwip_sock *sock = tryget_socket(i);
 18299b4:	e13fea17 	ldw	r4,-88(fp)
 18299b8:	18280600 	call	1828060 <tryget_socket>
 18299bc:	e0bfec15 	stw	r2,-80(fp)
        LWIP_ASSERT("sock != NULL", sock != NULL);
        SYS_ARCH_PROTECT(lev);
 18299c0:	1810de40 	call	1810de4 <vTaskEnterCritical>
        sock->select_waiting++;
 18299c4:	e0bfec17 	ldw	r2,-80(fp)
 18299c8:	10800517 	ldw	r2,20(r2)
 18299cc:	10c00044 	addi	r3,r2,1
 18299d0:	e0bfec17 	ldw	r2,-80(fp)
 18299d4:	10c00515 	stw	r3,20(r2)
        LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
        SYS_ARCH_UNPROTECT(lev);
 18299d8:	1810e380 	call	1810e38 <vTaskExitCritical>

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);

    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 18299dc:	e0bfea17 	ldw	r2,-88(fp)
 18299e0:	10800044 	addi	r2,r2,1
 18299e4:	e0bfea15 	stw	r2,-88(fp)
 18299e8:	e0ffea17 	ldw	r3,-88(fp)
 18299ec:	e0bffb17 	ldw	r2,-20(fp)
 18299f0:	18bfc616 	blt	r3,r2,182990c <__alt_mem_mem_0+0xff80990c>
      }
    }

    /* Call lwip_selscan again: there could have been events between
       the last scan (whithout us on the list) and putting us on the list! */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 18299f4:	e0bff204 	addi	r2,fp,-56
 18299f8:	d8800215 	stw	r2,8(sp)
 18299fc:	e0bff004 	addi	r2,fp,-64
 1829a00:	d8800115 	stw	r2,4(sp)
 1829a04:	e0bfee04 	addi	r2,fp,-72
 1829a08:	d8800015 	stw	r2,0(sp)
 1829a0c:	e1fffe17 	ldw	r7,-8(fp)
 1829a10:	e1bffd17 	ldw	r6,-12(fp)
 1829a14:	e17ffc17 	ldw	r5,-16(fp)
 1829a18:	e13ffb17 	ldw	r4,-20(fp)
 1829a1c:	182948c0 	call	182948c <lwip_selscan>
 1829a20:	e0bfe815 	stw	r2,-96(fp)
    if (!nready) {
 1829a24:	e0bfe817 	ldw	r2,-96(fp)
 1829a28:	1000191e 	bne	r2,zero,1829a90 <lwip_select+0x294>
      /* Still none ready, just wait to be woken */
      if (timeout == 0) {
 1829a2c:	e0800217 	ldw	r2,8(fp)
 1829a30:	1000021e 	bne	r2,zero,1829a3c <lwip_select+0x240>
        /* Wait forever */
        msectimeout = 0;
 1829a34:	e03fe915 	stw	zero,-92(fp)
 1829a38:	00000f06 	br	1829a78 <lwip_select+0x27c>
      } else {
        msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
 1829a3c:	e0800217 	ldw	r2,8(fp)
 1829a40:	10800017 	ldw	r2,0(r2)
 1829a44:	1400fa24 	muli	r16,r2,1000
 1829a48:	e0800217 	ldw	r2,8(fp)
 1829a4c:	10800117 	ldw	r2,4(r2)
 1829a50:	10807d04 	addi	r2,r2,500
 1829a54:	0140fa04 	movi	r5,1000
 1829a58:	1009883a 	mov	r4,r2
 1829a5c:	180abd80 	call	180abd8 <__divsi3>
 1829a60:	8085883a 	add	r2,r16,r2
 1829a64:	e0bfe915 	stw	r2,-92(fp)
        if (msectimeout == 0) {
 1829a68:	e0bfe917 	ldw	r2,-92(fp)
 1829a6c:	1000021e 	bne	r2,zero,1829a78 <lwip_select+0x27c>
          /* Wait 1ms at least (0 means wait forever) */
          msectimeout = 1;
 1829a70:	00800044 	movi	r2,1
 1829a74:	e0bfe915 	stw	r2,-92(fp)
        }
      }

      waitres = sys_arch_sem_wait(&select_cb.sem, msectimeout);
 1829a78:	e0bff404 	addi	r2,fp,-48
 1829a7c:	10800604 	addi	r2,r2,24
 1829a80:	e17fe917 	ldw	r5,-92(fp)
 1829a84:	1009883a 	mov	r4,r2
 1829a88:	1814d740 	call	1814d74 <sys_arch_sem_wait>
 1829a8c:	e0bfe715 	stw	r2,-100(fp)
    }
    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 1829a90:	00800804 	movi	r2,32
 1829a94:	e0bfea15 	stw	r2,-88(fp)
 1829a98:	00003706 	br	1829b78 <lwip_select+0x37c>
      if ((readset && FD_ISSET(i, readset)) ||
 1829a9c:	e0bffc17 	ldw	r2,-16(fp)
 1829aa0:	10000c26 	beq	r2,zero,1829ad4 <lwip_select+0x2d8>
 1829aa4:	e0bfea17 	ldw	r2,-88(fp)
 1829aa8:	1004d17a 	srli	r2,r2,5
 1829aac:	e0fffc17 	ldw	r3,-16(fp)
 1829ab0:	1085883a 	add	r2,r2,r2
 1829ab4:	1085883a 	add	r2,r2,r2
 1829ab8:	1885883a 	add	r2,r3,r2
 1829abc:	10c00017 	ldw	r3,0(r2)
 1829ac0:	e0bfea17 	ldw	r2,-88(fp)
 1829ac4:	108007cc 	andi	r2,r2,31
 1829ac8:	1885d83a 	sra	r2,r3,r2
 1829acc:	1080004c 	andi	r2,r2,1
 1829ad0:	10001c1e 	bne	r2,zero,1829b44 <lwip_select+0x348>
 1829ad4:	e0bffd17 	ldw	r2,-12(fp)
 1829ad8:	10000c26 	beq	r2,zero,1829b0c <lwip_select+0x310>
          (writeset && FD_ISSET(i, writeset)) ||
 1829adc:	e0bfea17 	ldw	r2,-88(fp)
 1829ae0:	1004d17a 	srli	r2,r2,5
 1829ae4:	e0fffd17 	ldw	r3,-12(fp)
 1829ae8:	1085883a 	add	r2,r2,r2
 1829aec:	1085883a 	add	r2,r2,r2
 1829af0:	1885883a 	add	r2,r3,r2
 1829af4:	10c00017 	ldw	r3,0(r2)
 1829af8:	e0bfea17 	ldw	r2,-88(fp)
 1829afc:	108007cc 	andi	r2,r2,31
 1829b00:	1885d83a 	sra	r2,r3,r2
 1829b04:	1080004c 	andi	r2,r2,1
 1829b08:	10000e1e 	bne	r2,zero,1829b44 <lwip_select+0x348>
 1829b0c:	e0bffe17 	ldw	r2,-8(fp)
 1829b10:	10001626 	beq	r2,zero,1829b6c <lwip_select+0x370>
          (exceptset && FD_ISSET(i, exceptset))) {
 1829b14:	e0bfea17 	ldw	r2,-88(fp)
 1829b18:	1004d17a 	srli	r2,r2,5
 1829b1c:	e0fffe17 	ldw	r3,-8(fp)
 1829b20:	1085883a 	add	r2,r2,r2
 1829b24:	1085883a 	add	r2,r2,r2
 1829b28:	1885883a 	add	r2,r3,r2
 1829b2c:	10c00017 	ldw	r3,0(r2)
 1829b30:	e0bfea17 	ldw	r2,-88(fp)
 1829b34:	108007cc 	andi	r2,r2,31
 1829b38:	1885d83a 	sra	r2,r3,r2
 1829b3c:	1080004c 	andi	r2,r2,1
 1829b40:	10000a26 	beq	r2,zero,1829b6c <lwip_select+0x370>
        struct lwip_sock *sock = tryget_socket(i);
 1829b44:	e13fea17 	ldw	r4,-88(fp)
 1829b48:	18280600 	call	1828060 <tryget_socket>
 1829b4c:	e0bfed15 	stw	r2,-76(fp)
        LWIP_ASSERT("sock != NULL", sock != NULL);
        SYS_ARCH_PROTECT(lev);
 1829b50:	1810de40 	call	1810de4 <vTaskEnterCritical>
        sock->select_waiting--;
 1829b54:	e0bfed17 	ldw	r2,-76(fp)
 1829b58:	10800517 	ldw	r2,20(r2)
 1829b5c:	10ffffc4 	addi	r3,r2,-1
 1829b60:	e0bfed17 	ldw	r2,-76(fp)
 1829b64:	10c00515 	stw	r3,20(r2)
        LWIP_ASSERT("sock->select_waiting >= 0", sock->select_waiting >= 0);
        SYS_ARCH_UNPROTECT(lev);
 1829b68:	1810e380 	call	1810e38 <vTaskExitCritical>
      }

      waitres = sys_arch_sem_wait(&select_cb.sem, msectimeout);
    }
    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 1829b6c:	e0bfea17 	ldw	r2,-88(fp)
 1829b70:	10800044 	addi	r2,r2,1
 1829b74:	e0bfea15 	stw	r2,-88(fp)
 1829b78:	e0ffea17 	ldw	r3,-88(fp)
 1829b7c:	e0bffb17 	ldw	r2,-20(fp)
 1829b80:	18bfc616 	blt	r3,r2,1829a9c <__alt_mem_mem_0+0xff809a9c>
        LWIP_ASSERT("sock->select_waiting >= 0", sock->select_waiting >= 0);
        SYS_ARCH_UNPROTECT(lev);
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
 1829b84:	1810de40 	call	1810de4 <vTaskEnterCritical>
    if (select_cb.next != NULL) {
 1829b88:	e0bff417 	ldw	r2,-48(fp)
 1829b8c:	10000326 	beq	r2,zero,1829b9c <lwip_select+0x3a0>
      select_cb.next->prev = select_cb.prev;
 1829b90:	e0bff417 	ldw	r2,-48(fp)
 1829b94:	e0fff517 	ldw	r3,-44(fp)
 1829b98:	10c00115 	stw	r3,4(r2)
    }
    if (select_cb_list == &select_cb) {
 1829b9c:	d0e80917 	ldw	r3,-24540(gp)
 1829ba0:	e0bff404 	addi	r2,fp,-48
 1829ba4:	1880031e 	bne	r3,r2,1829bb4 <lwip_select+0x3b8>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
      select_cb_list = select_cb.next;
 1829ba8:	e0bff417 	ldw	r2,-48(fp)
 1829bac:	d0a80915 	stw	r2,-24540(gp)
 1829bb0:	00000306 	br	1829bc0 <lwip_select+0x3c4>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
      select_cb.prev->next = select_cb.next;
 1829bb4:	e0bff517 	ldw	r2,-44(fp)
 1829bb8:	e0fff417 	ldw	r3,-48(fp)
 1829bbc:	10c00015 	stw	r3,0(r2)
    }
    /* Increasing this counter tells even_callback that the list has changed. */
    select_cb_ctr++;
 1829bc0:	d0a80a17 	ldw	r2,-24536(gp)
 1829bc4:	10800044 	addi	r2,r2,1
 1829bc8:	d0a80a15 	stw	r2,-24536(gp)
    SYS_ARCH_UNPROTECT(lev);
 1829bcc:	1810e380 	call	1810e38 <vTaskExitCritical>

    sys_sem_free(&select_cb.sem);
 1829bd0:	e0bff404 	addi	r2,fp,-48
 1829bd4:	10800604 	addi	r2,r2,24
 1829bd8:	1009883a 	mov	r4,r2
 1829bdc:	1814cd40 	call	1814cd4 <sys_sem_free>
    if (waitres == SYS_ARCH_TIMEOUT)  {
 1829be0:	e0bfe717 	ldw	r2,-100(fp)
 1829be4:	10bfffd8 	cmpnei	r2,r2,-1
 1829be8:	10000f26 	beq	r2,zero,1829c28 <lwip_select+0x42c>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 1829bec:	e0bff204 	addi	r2,fp,-56
 1829bf0:	d8800215 	stw	r2,8(sp)
 1829bf4:	e0bff004 	addi	r2,fp,-64
 1829bf8:	d8800115 	stw	r2,4(sp)
 1829bfc:	e0bfee04 	addi	r2,fp,-72
 1829c00:	d8800015 	stw	r2,0(sp)
 1829c04:	e1fffe17 	ldw	r7,-8(fp)
 1829c08:	e1bffd17 	ldw	r6,-12(fp)
 1829c0c:	e17ffc17 	ldw	r5,-16(fp)
 1829c10:	e13ffb17 	ldw	r4,-20(fp)
 1829c14:	182948c0 	call	182948c <lwip_selscan>
 1829c18:	e0bfe815 	stw	r2,-96(fp)
 1829c1c:	00000306 	br	1829c2c <lwip_select+0x430>
  if (!nready) {
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: no timeout, returning 0\n"));
      /* This is OK as the local fdsets are empty and nready is zero,
         or we would have returned earlier. */
      goto return_copy_fdsets;
 1829c20:	0001883a 	nop
 1829c24:	00000106 	br	1829c2c <lwip_select+0x430>
    if (waitres == SYS_ARCH_TIMEOUT)  {
      /* Timeout */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
      /* This is OK as the local fdsets are empty and nready is zero,
         or we would have returned earlier. */
      goto return_copy_fdsets;
 1829c28:	0001883a 	nop
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  set_errno(0);
  if (readset) {
 1829c2c:	e0bffc17 	ldw	r2,-16(fp)
 1829c30:	10000526 	beq	r2,zero,1829c48 <lwip_select+0x44c>
    *readset = lreadset;
 1829c34:	e0bffc17 	ldw	r2,-16(fp)
 1829c38:	e0ffee17 	ldw	r3,-72(fp)
 1829c3c:	10c00015 	stw	r3,0(r2)
 1829c40:	e0ffef17 	ldw	r3,-68(fp)
 1829c44:	10c00115 	stw	r3,4(r2)
  }
  if (writeset) {
 1829c48:	e0bffd17 	ldw	r2,-12(fp)
 1829c4c:	10000526 	beq	r2,zero,1829c64 <lwip_select+0x468>
    *writeset = lwriteset;
 1829c50:	e0bffd17 	ldw	r2,-12(fp)
 1829c54:	e0fff017 	ldw	r3,-64(fp)
 1829c58:	10c00015 	stw	r3,0(r2)
 1829c5c:	e0fff117 	ldw	r3,-60(fp)
 1829c60:	10c00115 	stw	r3,4(r2)
  }
  if (exceptset) {
 1829c64:	e0bffe17 	ldw	r2,-8(fp)
 1829c68:	10000526 	beq	r2,zero,1829c80 <lwip_select+0x484>
    *exceptset = lexceptset;
 1829c6c:	e0bffe17 	ldw	r2,-8(fp)
 1829c70:	e0fff217 	ldw	r3,-56(fp)
 1829c74:	10c00015 	stw	r3,0(r2)
 1829c78:	e0fff317 	ldw	r3,-52(fp)
 1829c7c:	10c00115 	stw	r3,4(r2)
  }


  return nready;
 1829c80:	e0bfe817 	ldw	r2,-96(fp)
}
 1829c84:	e6ffff04 	addi	sp,fp,-4
 1829c88:	dfc00217 	ldw	ra,8(sp)
 1829c8c:	df000117 	ldw	fp,4(sp)
 1829c90:	dc000017 	ldw	r16,0(sp)
 1829c94:	dec00304 	addi	sp,sp,12
 1829c98:	f800283a 	ret

01829c9c <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 1829c9c:	defff604 	addi	sp,sp,-40
 1829ca0:	dfc00915 	stw	ra,36(sp)
 1829ca4:	df000815 	stw	fp,32(sp)
 1829ca8:	df000804 	addi	fp,sp,32
 1829cac:	e13ffd15 	stw	r4,-12(fp)
 1829cb0:	e17ffe15 	stw	r5,-8(fp)
 1829cb4:	3005883a 	mov	r2,r6
 1829cb8:	e0bfff0d 	sth	r2,-4(fp)
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 1829cbc:	e0bffd17 	ldw	r2,-12(fp)
 1829cc0:	1000c526 	beq	r2,zero,1829fd8 <event_callback+0x33c>
    s = conn->socket;
 1829cc4:	e0bffd17 	ldw	r2,-12(fp)
 1829cc8:	10800717 	ldw	r2,28(r2)
 1829ccc:	e0bff815 	stw	r2,-32(fp)
    if (s < 0) {
 1829cd0:	e0bff817 	ldw	r2,-32(fp)
 1829cd4:	1000110e 	bge	r2,zero,1829d1c <event_callback+0x80>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 1829cd8:	1810de40 	call	1810de4 <vTaskEnterCritical>
      if (conn->socket < 0) {
 1829cdc:	e0bffd17 	ldw	r2,-12(fp)
 1829ce0:	10800717 	ldw	r2,28(r2)
 1829ce4:	1000090e 	bge	r2,zero,1829d0c <event_callback+0x70>
        if (evt == NETCONN_EVT_RCVPLUS) {
 1829ce8:	e0bffe17 	ldw	r2,-8(fp)
 1829cec:	1000051e 	bne	r2,zero,1829d04 <event_callback+0x68>
          conn->socket--;
 1829cf0:	e0bffd17 	ldw	r2,-12(fp)
 1829cf4:	10800717 	ldw	r2,28(r2)
 1829cf8:	10ffffc4 	addi	r3,r2,-1
 1829cfc:	e0bffd17 	ldw	r2,-12(fp)
 1829d00:	10c00715 	stw	r3,28(r2)
        }
        SYS_ARCH_UNPROTECT(lev);
 1829d04:	1810e380 	call	1810e38 <vTaskExitCritical>
        return;
 1829d08:	0000b606 	br	1829fe4 <event_callback+0x348>
      }
      s = conn->socket;
 1829d0c:	e0bffd17 	ldw	r2,-12(fp)
 1829d10:	10800717 	ldw	r2,28(r2)
 1829d14:	e0bff815 	stw	r2,-32(fp)
      SYS_ARCH_UNPROTECT(lev);
 1829d18:	1810e380 	call	1810e38 <vTaskExitCritical>
    }

    sock = get_socket(s);
 1829d1c:	e13ff817 	ldw	r4,-32(fp)
 1829d20:	1827fe80 	call	1827fe8 <get_socket>
 1829d24:	e0bffb15 	stw	r2,-20(fp)
    if (!sock) {
 1829d28:	e0bffb17 	ldw	r2,-20(fp)
 1829d2c:	1000ac26 	beq	r2,zero,1829fe0 <event_callback+0x344>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 1829d30:	1810de40 	call	1810de4 <vTaskEnterCritical>
  /* Set event as required */
  switch (evt) {
 1829d34:	e0bffe17 	ldw	r2,-8(fp)
 1829d38:	10800168 	cmpgeui	r2,r2,5
 1829d3c:	1000251e 	bne	r2,zero,1829dd4 <event_callback+0x138>
 1829d40:	e0bffe17 	ldw	r2,-8(fp)
 1829d44:	100690ba 	slli	r3,r2,2
 1829d48:	008060f4 	movhi	r2,387
 1829d4c:	10a75704 	addi	r2,r2,-25252
 1829d50:	1885883a 	add	r2,r3,r2
 1829d54:	10800017 	ldw	r2,0(r2)
 1829d58:	1000683a 	jmp	r2
 1829d5c:	01829d70 	cmpltui	r6,zero,2677
 1829d60:	01829d8c 	andi	r6,zero,2678
 1829d64:	01829da8 	cmpgeui	r6,zero,2678
 1829d68:	01829db8 	rdprs	r6,zero,2678
 1829d6c:	01829dc4 	movi	r6,2679
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 1829d70:	e0bffb17 	ldw	r2,-20(fp)
 1829d74:	1080028b 	ldhu	r2,10(r2)
 1829d78:	10800044 	addi	r2,r2,1
 1829d7c:	1007883a 	mov	r3,r2
 1829d80:	e0bffb17 	ldw	r2,-20(fp)
 1829d84:	10c0028d 	sth	r3,10(r2)
      break;
 1829d88:	00001306 	br	1829dd8 <event_callback+0x13c>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 1829d8c:	e0bffb17 	ldw	r2,-20(fp)
 1829d90:	1080028b 	ldhu	r2,10(r2)
 1829d94:	10bfffc4 	addi	r2,r2,-1
 1829d98:	1007883a 	mov	r3,r2
 1829d9c:	e0bffb17 	ldw	r2,-20(fp)
 1829da0:	10c0028d 	sth	r3,10(r2)
      break;
 1829da4:	00000c06 	br	1829dd8 <event_callback+0x13c>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
 1829da8:	e0bffb17 	ldw	r2,-20(fp)
 1829dac:	00c00044 	movi	r3,1
 1829db0:	10c0030d 	sth	r3,12(r2)
      break;
 1829db4:	00000806 	br	1829dd8 <event_callback+0x13c>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 1829db8:	e0bffb17 	ldw	r2,-20(fp)
 1829dbc:	1000030d 	sth	zero,12(r2)
      break;
 1829dc0:	00000506 	br	1829dd8 <event_callback+0x13c>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 1829dc4:	e0bffb17 	ldw	r2,-20(fp)
 1829dc8:	00c00044 	movi	r3,1
 1829dcc:	10c0038d 	sth	r3,14(r2)
      break;
 1829dd0:	00000106 	br	1829dd8 <event_callback+0x13c>
    default:
      LWIP_ASSERT("unknown event", 0);
      break;
 1829dd4:	0001883a 	nop
  }

  if (sock->select_waiting == 0) {
 1829dd8:	e0bffb17 	ldw	r2,-20(fp)
 1829ddc:	10800517 	ldw	r2,20(r2)
 1829de0:	1000021e 	bne	r2,zero,1829dec <event_callback+0x150>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
 1829de4:	1810e380 	call	1810e38 <vTaskExitCritical>
    return;
 1829de8:	00007e06 	br	1829fe4 <event_callback+0x348>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 1829dec:	d0a80917 	ldw	r2,-24540(gp)
 1829df0:	e0bff915 	stw	r2,-28(fp)
 1829df4:	00007406 	br	1829fc8 <event_callback+0x32c>
    if (scb->sem_signalled == 0) {
 1829df8:	e0bff917 	ldw	r2,-28(fp)
 1829dfc:	10800517 	ldw	r2,20(r2)
 1829e00:	1000521e 	bne	r2,zero,1829f4c <event_callback+0x2b0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 1829e04:	e03ffa15 	stw	zero,-24(fp)
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
 1829e08:	e0bffb17 	ldw	r2,-20(fp)
 1829e0c:	1080028b 	ldhu	r2,10(r2)
 1829e10:	10bfffcc 	andi	r2,r2,65535
 1829e14:	10a0001c 	xori	r2,r2,32768
 1829e18:	10a00004 	addi	r2,r2,-32768
 1829e1c:	0080120e 	bge	zero,r2,1829e68 <event_callback+0x1cc>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 1829e20:	e0bff917 	ldw	r2,-28(fp)
 1829e24:	10800217 	ldw	r2,8(r2)
 1829e28:	10000f26 	beq	r2,zero,1829e68 <event_callback+0x1cc>
 1829e2c:	e0bff917 	ldw	r2,-28(fp)
 1829e30:	10c00217 	ldw	r3,8(r2)
 1829e34:	e0bff817 	ldw	r2,-32(fp)
 1829e38:	1004d17a 	srli	r2,r2,5
 1829e3c:	1085883a 	add	r2,r2,r2
 1829e40:	1085883a 	add	r2,r2,r2
 1829e44:	1885883a 	add	r2,r3,r2
 1829e48:	10c00017 	ldw	r3,0(r2)
 1829e4c:	e0bff817 	ldw	r2,-32(fp)
 1829e50:	108007cc 	andi	r2,r2,31
 1829e54:	1885d83a 	sra	r2,r3,r2
 1829e58:	1080004c 	andi	r2,r2,1
 1829e5c:	10000226 	beq	r2,zero,1829e68 <event_callback+0x1cc>
          do_signal = 1;
 1829e60:	00800044 	movi	r2,1
 1829e64:	e0bffa15 	stw	r2,-24(fp)
        }
      }
      if (sock->sendevent != 0) {
 1829e68:	e0bffb17 	ldw	r2,-20(fp)
 1829e6c:	1080030b 	ldhu	r2,12(r2)
 1829e70:	10bfffcc 	andi	r2,r2,65535
 1829e74:	10001426 	beq	r2,zero,1829ec8 <event_callback+0x22c>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 1829e78:	e0bffa17 	ldw	r2,-24(fp)
 1829e7c:	1000121e 	bne	r2,zero,1829ec8 <event_callback+0x22c>
 1829e80:	e0bff917 	ldw	r2,-28(fp)
 1829e84:	10800317 	ldw	r2,12(r2)
 1829e88:	10000f26 	beq	r2,zero,1829ec8 <event_callback+0x22c>
 1829e8c:	e0bff917 	ldw	r2,-28(fp)
 1829e90:	10c00317 	ldw	r3,12(r2)
 1829e94:	e0bff817 	ldw	r2,-32(fp)
 1829e98:	1004d17a 	srli	r2,r2,5
 1829e9c:	1085883a 	add	r2,r2,r2
 1829ea0:	1085883a 	add	r2,r2,r2
 1829ea4:	1885883a 	add	r2,r3,r2
 1829ea8:	10c00017 	ldw	r3,0(r2)
 1829eac:	e0bff817 	ldw	r2,-32(fp)
 1829eb0:	108007cc 	andi	r2,r2,31
 1829eb4:	1885d83a 	sra	r2,r3,r2
 1829eb8:	1080004c 	andi	r2,r2,1
 1829ebc:	10000226 	beq	r2,zero,1829ec8 <event_callback+0x22c>
          do_signal = 1;
 1829ec0:	00800044 	movi	r2,1
 1829ec4:	e0bffa15 	stw	r2,-24(fp)
        }
      }
      if (sock->errevent != 0) {
 1829ec8:	e0bffb17 	ldw	r2,-20(fp)
 1829ecc:	1080038b 	ldhu	r2,14(r2)
 1829ed0:	10bfffcc 	andi	r2,r2,65535
 1829ed4:	10001426 	beq	r2,zero,1829f28 <event_callback+0x28c>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 1829ed8:	e0bffa17 	ldw	r2,-24(fp)
 1829edc:	1000121e 	bne	r2,zero,1829f28 <event_callback+0x28c>
 1829ee0:	e0bff917 	ldw	r2,-28(fp)
 1829ee4:	10800417 	ldw	r2,16(r2)
 1829ee8:	10000f26 	beq	r2,zero,1829f28 <event_callback+0x28c>
 1829eec:	e0bff917 	ldw	r2,-28(fp)
 1829ef0:	10c00417 	ldw	r3,16(r2)
 1829ef4:	e0bff817 	ldw	r2,-32(fp)
 1829ef8:	1004d17a 	srli	r2,r2,5
 1829efc:	1085883a 	add	r2,r2,r2
 1829f00:	1085883a 	add	r2,r2,r2
 1829f04:	1885883a 	add	r2,r3,r2
 1829f08:	10c00017 	ldw	r3,0(r2)
 1829f0c:	e0bff817 	ldw	r2,-32(fp)
 1829f10:	108007cc 	andi	r2,r2,31
 1829f14:	1885d83a 	sra	r2,r3,r2
 1829f18:	1080004c 	andi	r2,r2,1
 1829f1c:	10000226 	beq	r2,zero,1829f28 <event_callback+0x28c>
          do_signal = 1;
 1829f20:	00800044 	movi	r2,1
 1829f24:	e0bffa15 	stw	r2,-24(fp)
        }
      }
      if (do_signal) {
 1829f28:	e0bffa17 	ldw	r2,-24(fp)
 1829f2c:	10000726 	beq	r2,zero,1829f4c <event_callback+0x2b0>
        scb->sem_signalled = 1;
 1829f30:	e0bff917 	ldw	r2,-28(fp)
 1829f34:	00c00044 	movi	r3,1
 1829f38:	10c00515 	stw	r3,20(r2)
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidagin the semaphore. */
        sys_sem_signal(&scb->sem);
 1829f3c:	e0bff917 	ldw	r2,-28(fp)
 1829f40:	10800604 	addi	r2,r2,24
 1829f44:	1009883a 	mov	r4,r2
 1829f48:	1814d2c0 	call	1814d2c <sys_sem_signal>
      }
    }

    if ((scb->next) && (scb->next < 0x00800000 || scb->next > 0x00ffffff))
 1829f4c:	e0bff917 	ldw	r2,-28(fp)
 1829f50:	10800017 	ldw	r2,0(r2)
 1829f54:	10000a26 	beq	r2,zero,1829f80 <event_callback+0x2e4>
 1829f58:	e0bff917 	ldw	r2,-28(fp)
 1829f5c:	10c00017 	ldw	r3,0(r2)
 1829f60:	00802034 	movhi	r2,128
 1829f64:	18800436 	bltu	r3,r2,1829f78 <event_callback+0x2dc>
 1829f68:	e0bff917 	ldw	r2,-28(fp)
 1829f6c:	10c00017 	ldw	r3,0(r2)
 1829f70:	00804034 	movhi	r2,256
 1829f74:	18800236 	bltu	r3,r2,1829f80 <event_callback+0x2e4>
    {
    	NIOS2_BREAK();
 1829f78:	003da03a 	break	0
 1829f7c:	00000706 	br	1829f9c <event_callback+0x300>
    }
    else if (scb < 0x00800000 || scb > 0x00ffffff)
 1829f80:	e0fff917 	ldw	r3,-28(fp)
 1829f84:	00802034 	movhi	r2,128
 1829f88:	18800336 	bltu	r3,r2,1829f98 <event_callback+0x2fc>
 1829f8c:	e0fff917 	ldw	r3,-28(fp)
 1829f90:	00804034 	movhi	r2,256
 1829f94:	18800136 	bltu	r3,r2,1829f9c <event_callback+0x300>
    {
    	NIOS2_BREAK();
 1829f98:	003da03a 	break	0
    }

    /* unlock interrupts with each step */
    last_select_cb_ctr = select_cb_ctr;
 1829f9c:	d0a80a17 	ldw	r2,-24536(gp)
 1829fa0:	e0bffc15 	stw	r2,-16(fp)
    SYS_ARCH_UNPROTECT(lev);
 1829fa4:	1810e380 	call	1810e38 <vTaskExitCritical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 1829fa8:	1810de40 	call	1810de4 <vTaskEnterCritical>
    if (last_select_cb_ctr != select_cb_ctr) {
 1829fac:	d0a80a17 	ldw	r2,-24536(gp)
 1829fb0:	e0fffc17 	ldw	r3,-16(fp)
 1829fb4:	18800126 	beq	r3,r2,1829fbc <event_callback+0x320>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
 1829fb8:	003f8c06 	br	1829dec <__alt_mem_mem_0+0xff809dec>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 1829fbc:	e0bff917 	ldw	r2,-28(fp)
 1829fc0:	10800017 	ldw	r2,0(r2)
 1829fc4:	e0bff915 	stw	r2,-28(fp)
 1829fc8:	e0bff917 	ldw	r2,-28(fp)
 1829fcc:	103f8a1e 	bne	r2,zero,1829df8 <__alt_mem_mem_0+0xff809df8>
    if (last_select_cb_ctr != select_cb_ctr) {
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 1829fd0:	1810e380 	call	1810e38 <vTaskExitCritical>
 1829fd4:	00000306 	br	1829fe4 <event_callback+0x348>
    sock = get_socket(s);
    if (!sock) {
      return;
    }
  } else {
    return;
 1829fd8:	0001883a 	nop
 1829fdc:	00000106 	br	1829fe4 <event_callback+0x348>
      SYS_ARCH_UNPROTECT(lev);
    }

    sock = get_socket(s);
    if (!sock) {
      return;
 1829fe0:	0001883a 	nop
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
    }
  }
  SYS_ARCH_UNPROTECT(lev);
}
 1829fe4:	e037883a 	mov	sp,fp
 1829fe8:	dfc00117 	ldw	ra,4(sp)
 1829fec:	df000017 	ldw	fp,0(sp)
 1829ff0:	dec00204 	addi	sp,sp,8
 1829ff4:	f800283a 	ret

01829ff8 <lwip_shutdown>:
 * Unimplemented: Close one end of a full-duplex connection.
 * Currently, the full connection is closed.
 */
int
lwip_shutdown(int s, int how)
{
 1829ff8:	defff904 	addi	sp,sp,-28
 1829ffc:	dfc00615 	stw	ra,24(sp)
 182a000:	df000515 	stw	fp,20(sp)
 182a004:	df000504 	addi	fp,sp,20
 182a008:	e13ffe15 	stw	r4,-8(fp)
 182a00c:	e17fff15 	stw	r5,-4(fp)
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
 182a010:	e03ffb05 	stb	zero,-20(fp)
 182a014:	e03ffb45 	stb	zero,-19(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
 182a018:	e13ffe17 	ldw	r4,-8(fp)
 182a01c:	1827fe80 	call	1827fe8 <get_socket>
 182a020:	e0bffc15 	stw	r2,-16(fp)
  if (!sock) {
 182a024:	e0bffc17 	ldw	r2,-16(fp)
 182a028:	1000021e 	bne	r2,zero,182a034 <lwip_shutdown+0x3c>
    return -1;
 182a02c:	00bfffc4 	movi	r2,-1
 182a030:	00004906 	br	182a158 <lwip_shutdown+0x160>
  }

  if (sock->conn != NULL) {
 182a034:	e0bffc17 	ldw	r2,-16(fp)
 182a038:	10800017 	ldw	r2,0(r2)
 182a03c:	10000a26 	beq	r2,zero,182a068 <lwip_shutdown+0x70>
    if (netconn_type(sock->conn) != NETCONN_TCP) {
 182a040:	e0bffc17 	ldw	r2,-16(fp)
 182a044:	10800017 	ldw	r2,0(r2)
 182a048:	10800017 	ldw	r2,0(r2)
 182a04c:	10800420 	cmpeqi	r2,r2,16
 182a050:	10000a1e 	bne	r2,zero,182a07c <lwip_shutdown+0x84>
      sock_set_errno(sock, EOPNOTSUPP);
 182a054:	e0bffc17 	ldw	r2,-16(fp)
 182a058:	00c017c4 	movi	r3,95
 182a05c:	10c00415 	stw	r3,16(r2)
      return EOPNOTSUPP;
 182a060:	008017c4 	movi	r2,95
 182a064:	00003c06 	br	182a158 <lwip_shutdown+0x160>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
 182a068:	e0bffc17 	ldw	r2,-16(fp)
 182a06c:	00c02004 	movi	r3,128
 182a070:	10c00415 	stw	r3,16(r2)
    return ENOTCONN;
 182a074:	00802004 	movi	r2,128
 182a078:	00003706 	br	182a158 <lwip_shutdown+0x160>
  }

  if (how == SHUT_RD) {
 182a07c:	e0bfff17 	ldw	r2,-4(fp)
 182a080:	1000031e 	bne	r2,zero,182a090 <lwip_shutdown+0x98>
    shut_rx = 1;
 182a084:	00800044 	movi	r2,1
 182a088:	e0bffb05 	stb	r2,-20(fp)
 182a08c:	00001306 	br	182a0dc <lwip_shutdown+0xe4>
  } else if (how == SHUT_WR) {
 182a090:	e0bfff17 	ldw	r2,-4(fp)
 182a094:	10800058 	cmpnei	r2,r2,1
 182a098:	1000031e 	bne	r2,zero,182a0a8 <lwip_shutdown+0xb0>
    shut_tx = 1;
 182a09c:	00800044 	movi	r2,1
 182a0a0:	e0bffb45 	stb	r2,-19(fp)
 182a0a4:	00000d06 	br	182a0dc <lwip_shutdown+0xe4>
  } else if(how == SHUT_RDWR) {
 182a0a8:	e0bfff17 	ldw	r2,-4(fp)
 182a0ac:	10800098 	cmpnei	r2,r2,2
 182a0b0:	1000051e 	bne	r2,zero,182a0c8 <lwip_shutdown+0xd0>
    shut_rx = 1;
 182a0b4:	00800044 	movi	r2,1
 182a0b8:	e0bffb05 	stb	r2,-20(fp)
    shut_tx = 1;
 182a0bc:	00800044 	movi	r2,1
 182a0c0:	e0bffb45 	stb	r2,-19(fp)
 182a0c4:	00000506 	br	182a0dc <lwip_shutdown+0xe4>
  } else {
    sock_set_errno(sock, EINVAL);
 182a0c8:	e0bffc17 	ldw	r2,-16(fp)
 182a0cc:	00c00584 	movi	r3,22
 182a0d0:	10c00415 	stw	r3,16(r2)
    return EINVAL;
 182a0d4:	00800584 	movi	r2,22
 182a0d8:	00001f06 	br	182a158 <lwip_shutdown+0x160>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
 182a0dc:	e0bffc17 	ldw	r2,-16(fp)
 182a0e0:	10800017 	ldw	r2,0(r2)
 182a0e4:	e0fffb03 	ldbu	r3,-20(fp)
 182a0e8:	e13ffb43 	ldbu	r4,-19(fp)
 182a0ec:	200d883a 	mov	r6,r4
 182a0f0:	180b883a 	mov	r5,r3
 182a0f4:	1009883a 	mov	r4,r2
 182a0f8:	1839b740 	call	1839b74 <netconn_shutdown>
 182a0fc:	e0bffd05 	stb	r2,-12(fp)

  sock_set_errno(sock, err_to_errno(err));
 182a100:	e0bffd07 	ldb	r2,-12(fp)
 182a104:	0085c83a 	sub	r2,zero,r2
 182a108:	10800428 	cmpgeui	r2,r2,16
 182a10c:	1000091e 	bne	r2,zero,182a134 <lwip_shutdown+0x13c>
 182a110:	e0bffd07 	ldb	r2,-12(fp)
 182a114:	0087c83a 	sub	r3,zero,r2
 182a118:	00806134 	movhi	r2,388
 182a11c:	10850004 	addi	r2,r2,5120
 182a120:	18c7883a 	add	r3,r3,r3
 182a124:	18c7883a 	add	r3,r3,r3
 182a128:	10c5883a 	add	r2,r2,r3
 182a12c:	10800017 	ldw	r2,0(r2)
 182a130:	00000106 	br	182a138 <lwip_shutdown+0x140>
 182a134:	00800144 	movi	r2,5
 182a138:	e0fffc17 	ldw	r3,-16(fp)
 182a13c:	18800415 	stw	r2,16(r3)
  return (err == ERR_OK ? 0 : -1);
 182a140:	e0bffd07 	ldb	r2,-12(fp)
 182a144:	1000021e 	bne	r2,zero,182a150 <lwip_shutdown+0x158>
 182a148:	0005883a 	mov	r2,zero
 182a14c:	00000106 	br	182a154 <lwip_shutdown+0x15c>
 182a150:	00bfffc4 	movi	r2,-1
 182a154:	0001883a 	nop
}
 182a158:	e037883a 	mov	sp,fp
 182a15c:	dfc00117 	ldw	ra,4(sp)
 182a160:	df000017 	ldw	fp,0(sp)
 182a164:	dec00204 	addi	sp,sp,8
 182a168:	f800283a 	ret

0182a16c <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
 182a16c:	defff404 	addi	sp,sp,-48
 182a170:	dfc00b15 	stw	ra,44(sp)
 182a174:	df000a15 	stw	fp,40(sp)
 182a178:	df000a04 	addi	fp,sp,40
 182a17c:	e13ffc15 	stw	r4,-16(fp)
 182a180:	e17ffd15 	stw	r5,-12(fp)
 182a184:	e1bffe15 	stw	r6,-8(fp)
 182a188:	3805883a 	mov	r2,r7
 182a18c:	e0bfff05 	stb	r2,-4(fp)
  struct lwip_sock *sock;
  struct sockaddr_in sin;
  ip_addr_t naddr;

  sock = get_socket(s);
 182a190:	e13ffc17 	ldw	r4,-16(fp)
 182a194:	1827fe80 	call	1827fe8 <get_socket>
 182a198:	e0bff615 	stw	r2,-40(fp)
  if (!sock) {
 182a19c:	e0bff617 	ldw	r2,-40(fp)
 182a1a0:	1000021e 	bne	r2,zero,182a1ac <lwip_getaddrname+0x40>
    return -1;
 182a1a4:	00bfffc4 	movi	r2,-1
 182a1a8:	00003006 	br	182a26c <lwip_getaddrname+0x100>
  }

  memset(&sin, 0, sizeof(sin));
 182a1ac:	e0bff704 	addi	r2,fp,-36
 182a1b0:	01800404 	movi	r6,16
 182a1b4:	000b883a 	mov	r5,zero
 182a1b8:	1009883a 	mov	r4,r2
 182a1bc:	18061940 	call	1806194 <memset>
  sin.sin_len = sizeof(sin);
 182a1c0:	00800404 	movi	r2,16
 182a1c4:	e0bff705 	stb	r2,-36(fp)
  sin.sin_family = AF_INET;
 182a1c8:	00800084 	movi	r2,2
 182a1cc:	e0bff745 	stb	r2,-35(fp)

  /* get the IP address and port */
  netconn_getaddr(sock->conn, &naddr, &sin.sin_port, local);
 182a1d0:	e0bff617 	ldw	r2,-40(fp)
 182a1d4:	10c00017 	ldw	r3,0(r2)
 182a1d8:	e17fff03 	ldbu	r5,-4(fp)
 182a1dc:	e0bff704 	addi	r2,fp,-36
 182a1e0:	11000084 	addi	r4,r2,2
 182a1e4:	e0bffb04 	addi	r2,fp,-20
 182a1e8:	280f883a 	mov	r7,r5
 182a1ec:	200d883a 	mov	r6,r4
 182a1f0:	100b883a 	mov	r5,r2
 182a1f4:	1809883a 	mov	r4,r3
 182a1f8:	1838cbc0 	call	1838cbc <netconn_getaddr>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", sin.sin_port));

  sin.sin_port = htons(sin.sin_port);
 182a1fc:	e0bff78b 	ldhu	r2,-34(fp)
 182a200:	10bfffcc 	andi	r2,r2,65535
 182a204:	1004d23a 	srli	r2,r2,8
 182a208:	1007883a 	mov	r3,r2
 182a20c:	e0bff78b 	ldhu	r2,-34(fp)
 182a210:	10bfffcc 	andi	r2,r2,65535
 182a214:	1004923a 	slli	r2,r2,8
 182a218:	1884b03a 	or	r2,r3,r2
 182a21c:	e0bff78d 	sth	r2,-34(fp)
  inet_addr_from_ipaddr(&sin.sin_addr, &naddr);
 182a220:	e0bffb17 	ldw	r2,-20(fp)
 182a224:	e0bff815 	stw	r2,-32(fp)

  if (*namelen > sizeof(sin)) {
 182a228:	e0bffe17 	ldw	r2,-8(fp)
 182a22c:	10800017 	ldw	r2,0(r2)
 182a230:	10800470 	cmpltui	r2,r2,17
 182a234:	1000031e 	bne	r2,zero,182a244 <lwip_getaddrname+0xd8>
    *namelen = sizeof(sin);
 182a238:	e0bffe17 	ldw	r2,-8(fp)
 182a23c:	00c00404 	movi	r3,16
 182a240:	10c00015 	stw	r3,0(r2)
  }

  MEMCPY(name, &sin, *namelen);
 182a244:	e0bffe17 	ldw	r2,-8(fp)
 182a248:	10c00017 	ldw	r3,0(r2)
 182a24c:	e0bff704 	addi	r2,fp,-36
 182a250:	180d883a 	mov	r6,r3
 182a254:	100b883a 	mov	r5,r2
 182a258:	e13ffd17 	ldw	r4,-12(fp)
 182a25c:	180604c0 	call	180604c <memcpy>
  sock_set_errno(sock, 0);
 182a260:	e0bff617 	ldw	r2,-40(fp)
 182a264:	10000415 	stw	zero,16(r2)
  return 0;
 182a268:	0005883a 	mov	r2,zero
}
 182a26c:	e037883a 	mov	sp,fp
 182a270:	dfc00117 	ldw	ra,4(sp)
 182a274:	df000017 	ldw	fp,0(sp)
 182a278:	dec00204 	addi	sp,sp,8
 182a27c:	f800283a 	ret

0182a280 <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
 182a280:	defffb04 	addi	sp,sp,-20
 182a284:	dfc00415 	stw	ra,16(sp)
 182a288:	df000315 	stw	fp,12(sp)
 182a28c:	df000304 	addi	fp,sp,12
 182a290:	e13ffd15 	stw	r4,-12(fp)
 182a294:	e17ffe15 	stw	r5,-8(fp)
 182a298:	e1bfff15 	stw	r6,-4(fp)
  return lwip_getaddrname(s, name, namelen, 0);
 182a29c:	000f883a 	mov	r7,zero
 182a2a0:	e1bfff17 	ldw	r6,-4(fp)
 182a2a4:	e17ffe17 	ldw	r5,-8(fp)
 182a2a8:	e13ffd17 	ldw	r4,-12(fp)
 182a2ac:	182a16c0 	call	182a16c <lwip_getaddrname>
}
 182a2b0:	e037883a 	mov	sp,fp
 182a2b4:	dfc00117 	ldw	ra,4(sp)
 182a2b8:	df000017 	ldw	fp,0(sp)
 182a2bc:	dec00204 	addi	sp,sp,8
 182a2c0:	f800283a 	ret

0182a2c4 <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
 182a2c4:	defffb04 	addi	sp,sp,-20
 182a2c8:	dfc00415 	stw	ra,16(sp)
 182a2cc:	df000315 	stw	fp,12(sp)
 182a2d0:	df000304 	addi	fp,sp,12
 182a2d4:	e13ffd15 	stw	r4,-12(fp)
 182a2d8:	e17ffe15 	stw	r5,-8(fp)
 182a2dc:	e1bfff15 	stw	r6,-4(fp)
  return lwip_getaddrname(s, name, namelen, 1);
 182a2e0:	01c00044 	movi	r7,1
 182a2e4:	e1bfff17 	ldw	r6,-4(fp)
 182a2e8:	e17ffe17 	ldw	r5,-8(fp)
 182a2ec:	e13ffd17 	ldw	r4,-12(fp)
 182a2f0:	182a16c0 	call	182a16c <lwip_getaddrname>
}
 182a2f4:	e037883a 	mov	sp,fp
 182a2f8:	dfc00117 	ldw	ra,4(sp)
 182a2fc:	df000017 	ldw	fp,0(sp)
 182a300:	dec00204 	addi	sp,sp,8
 182a304:	f800283a 	ret

0182a308 <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
 182a308:	defff204 	addi	sp,sp,-56
 182a30c:	dfc00d15 	stw	ra,52(sp)
 182a310:	df000c15 	stw	fp,48(sp)
 182a314:	df000c04 	addi	fp,sp,48
 182a318:	e13ffc15 	stw	r4,-16(fp)
 182a31c:	e17ffd15 	stw	r5,-12(fp)
 182a320:	e1bffe15 	stw	r6,-8(fp)
 182a324:	e1ffff15 	stw	r7,-4(fp)
  err_t err = ERR_OK;
 182a328:	e03ff405 	stb	zero,-48(fp)
  struct lwip_sock *sock = get_socket(s);
 182a32c:	e13ffc17 	ldw	r4,-16(fp)
 182a330:	1827fe80 	call	1827fe8 <get_socket>
 182a334:	e0bff515 	stw	r2,-44(fp)
  struct lwip_setgetsockopt_data data;

  if (!sock) {
 182a338:	e0bff517 	ldw	r2,-44(fp)
 182a33c:	1000021e 	bne	r2,zero,182a348 <lwip_getsockopt+0x40>
    return -1;
 182a340:	00bfffc4 	movi	r2,-1
 182a344:	00009c06 	br	182a5b8 <lwip_getsockopt+0x2b0>
  }

  if ((NULL == optval) || (NULL == optlen)) {
 182a348:	e0bfff17 	ldw	r2,-4(fp)
 182a34c:	10000226 	beq	r2,zero,182a358 <lwip_getsockopt+0x50>
 182a350:	e0800217 	ldw	r2,8(fp)
 182a354:	1000051e 	bne	r2,zero,182a36c <lwip_getsockopt+0x64>
    sock_set_errno(sock, EFAULT);
 182a358:	e0bff517 	ldw	r2,-44(fp)
 182a35c:	00c00384 	movi	r3,14
 182a360:	10c00415 	stw	r3,16(r2)
    return -1;
 182a364:	00bfffc4 	movi	r2,-1
 182a368:	00009306 	br	182a5b8 <lwip_getsockopt+0x2b0>
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {
 182a36c:	e0bffd17 	ldw	r2,-12(fp)
 182a370:	10c001a0 	cmpeqi	r3,r2,6
 182a374:	18004d1e 	bne	r3,zero,182a4ac <lwip_getsockopt+0x1a4>
 182a378:	10c3ffe0 	cmpeqi	r3,r2,4095
 182a37c:	1800021e 	bne	r3,zero,182a388 <lwip_getsockopt+0x80>
 182a380:	10003a26 	beq	r2,zero,182a46c <lwip_getsockopt+0x164>
 182a384:	00006006 	br	182a508 <lwip_getsockopt+0x200>
   
/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182a388:	e0bffe17 	ldw	r2,-8(fp)
 182a38c:	10c00820 	cmpeqi	r3,r2,32
 182a390:	1800131e 	bne	r3,zero,182a3e0 <lwip_getsockopt+0xd8>
 182a394:	10c00848 	cmpgei	r3,r2,33
 182a398:	1800071e 	bne	r3,zero,182a3b8 <lwip_getsockopt+0xb0>
 182a39c:	10c00120 	cmpeqi	r3,r2,4
 182a3a0:	18000f1e 	bne	r3,zero,182a3e0 <lwip_getsockopt+0xd8>
 182a3a4:	10c00220 	cmpeqi	r3,r2,8
 182a3a8:	18000d1e 	bne	r3,zero,182a3e0 <lwip_getsockopt+0xd8>
 182a3ac:	108000a0 	cmpeqi	r2,r2,2
 182a3b0:	10000b1e 	bne	r2,zero,182a3e0 <lwip_getsockopt+0xd8>
 182a3b4:	00002606 	br	182a450 <lwip_getsockopt+0x148>
 182a3b8:	10c40248 	cmpgei	r3,r2,4105
 182a3bc:	1800051e 	bne	r3,zero,182a3d4 <lwip_getsockopt+0xcc>
 182a3c0:	10c40188 	cmpgei	r3,r2,4102
 182a3c4:	1800061e 	bne	r3,zero,182a3e0 <lwip_getsockopt+0xd8>
 182a3c8:	10808020 	cmpeqi	r2,r2,512
 182a3cc:	1000041e 	bne	r2,zero,182a3e0 <lwip_getsockopt+0xd8>
 182a3d0:	00001f06 	br	182a450 <lwip_getsockopt+0x148>
 182a3d4:	108402a0 	cmpeqi	r2,r2,4106
 182a3d8:	1000081e 	bne	r2,zero,182a3fc <lwip_getsockopt+0xf4>
 182a3dc:	00001c06 	br	182a450 <lwip_getsockopt+0x148>
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    case SO_TYPE:
    /* UNIMPL case SO_USELOOPBACK: */
      if (*optlen < sizeof(int)) {
 182a3e0:	e0800217 	ldw	r2,8(fp)
 182a3e4:	10800017 	ldw	r2,0(r2)
 182a3e8:	10800128 	cmpgeui	r2,r2,4
 182a3ec:	10001b1e 	bne	r2,zero,182a45c <lwip_getsockopt+0x154>
        err = EINVAL;
 182a3f0:	00800584 	movi	r2,22
 182a3f4:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 182a3f8:	00001806 	br	182a45c <lwip_getsockopt+0x154>

    case SO_NO_CHECK:
      if (*optlen < sizeof(int)) {
 182a3fc:	e0800217 	ldw	r2,8(fp)
 182a400:	10800017 	ldw	r2,0(r2)
 182a404:	10800128 	cmpgeui	r2,r2,4
 182a408:	1000021e 	bne	r2,zero,182a414 <lwip_getsockopt+0x10c>
        err = EINVAL;
 182a40c:	00800584 	movi	r2,22
 182a410:	e0bff405 	stb	r2,-48(fp)
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 182a414:	e0bff517 	ldw	r2,-44(fp)
 182a418:	10800017 	ldw	r2,0(r2)
 182a41c:	10800017 	ldw	r2,0(r2)
 182a420:	10800818 	cmpnei	r2,r2,32
 182a424:	1000071e 	bne	r2,zero,182a444 <lwip_getsockopt+0x13c>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
 182a428:	e0bff517 	ldw	r2,-44(fp)
 182a42c:	10800017 	ldw	r2,0(r2)
 182a430:	10800217 	ldw	r2,8(r2)
 182a434:	10800403 	ldbu	r2,16(r2)
 182a438:	10803fcc 	andi	r2,r2,255
 182a43c:	1080008c 	andi	r2,r2,2
    case SO_NO_CHECK:
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 182a440:	10000826 	beq	r2,zero,182a464 <lwip_getsockopt+0x15c>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
 182a444:	00801a84 	movi	r2,106
 182a448:	e0bff405 	stb	r2,-48(fp)
      }
#endif /* LWIP_UDP */
      break;
 182a44c:	00000506 	br	182a464 <lwip_getsockopt+0x15c>

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
 182a450:	00801b44 	movi	r2,109
 182a454:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182a458:	00002d06 	br	182a510 <lwip_getsockopt+0x208>
    case SO_TYPE:
    /* UNIMPL case SO_USELOOPBACK: */
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 182a45c:	0001883a 	nop
 182a460:	00002b06 	br	182a510 <lwip_getsockopt+0x208>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
      }
#endif /* LWIP_UDP */
      break;
 182a464:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182a468:	00002906 	br	182a510 <lwip_getsockopt+0x208>
                     
/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 182a46c:	e0bffe17 	ldw	r2,-8(fp)
 182a470:	10bfffc4 	addi	r2,r2,-1
 182a474:	108000a8 	cmpgeui	r2,r2,2
 182a478:	1000071e 	bne	r2,zero,182a498 <lwip_getsockopt+0x190>
    /* UNIMPL case IP_HDRINCL: */
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (*optlen < sizeof(int)) {
 182a47c:	e0800217 	ldw	r2,8(fp)
 182a480:	10800017 	ldw	r2,0(r2)
 182a484:	10800128 	cmpgeui	r2,r2,4
 182a488:	1000061e 	bne	r2,zero,182a4a4 <lwip_getsockopt+0x19c>
        err = EINVAL;
 182a48c:	00800584 	movi	r2,22
 182a490:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 182a494:	00000306 	br	182a4a4 <lwip_getsockopt+0x19c>
#endif /* LWIP_IGMP */

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
 182a498:	00801b44 	movi	r2,109
 182a49c:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182a4a0:	00001b06 	br	182a510 <lwip_getsockopt+0x208>
    case IP_TTL:
    case IP_TOS:
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 182a4a4:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182a4a8:	00001906 	br	182a510 <lwip_getsockopt+0x208>
         
#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (*optlen < sizeof(int)) {
 182a4ac:	e0800217 	ldw	r2,8(fp)
 182a4b0:	10800017 	ldw	r2,0(r2)
 182a4b4:	10800128 	cmpgeui	r2,r2,4
 182a4b8:	1000031e 	bne	r2,zero,182a4c8 <lwip_getsockopt+0x1c0>
      err = EINVAL;
 182a4bc:	00800584 	movi	r2,22
 182a4c0:	e0bff405 	stb	r2,-48(fp)
      break;
 182a4c4:	00001206 	br	182a510 <lwip_getsockopt+0x208>
    }
    
    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
 182a4c8:	e0bff517 	ldw	r2,-44(fp)
 182a4cc:	10800017 	ldw	r2,0(r2)
 182a4d0:	10800017 	ldw	r2,0(r2)
 182a4d4:	10800420 	cmpeqi	r2,r2,16
 182a4d8:	1000021e 	bne	r2,zero,182a4e4 <lwip_getsockopt+0x1dc>
      return 0;
 182a4dc:	0005883a 	mov	r2,zero
 182a4e0:	00003506 	br	182a5b8 <lwip_getsockopt+0x2b0>

    switch (optname) {
 182a4e4:	e0bffe17 	ldw	r2,-8(fp)
 182a4e8:	10bfffc4 	addi	r2,r2,-1
 182a4ec:	10800168 	cmpgeui	r2,r2,5
 182a4f0:	10000326 	beq	r2,zero,182a500 <lwip_getsockopt+0x1f8>
      break;
       
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
 182a4f4:	00801b44 	movi	r2,109
 182a4f8:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182a4fc:	00000406 	br	182a510 <lwip_getsockopt+0x208>
#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
    case TCP_KEEPINTVL:
    case TCP_KEEPCNT:
#endif /* LWIP_TCP_KEEPALIVE */
      break;
 182a500:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182a504:	00000206 	br	182a510 <lwip_getsockopt+0x208>
#endif /* LWIP_UDP && LWIP_UDPLITE*/
/* UNDEFINED LEVEL */
  default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 182a508:	00801b44 	movi	r2,109
 182a50c:	e0bff405 	stb	r2,-48(fp)
  }  /* switch */

   
  if (err != ERR_OK) {
 182a510:	e0bff407 	ldb	r2,-48(fp)
 182a514:	10000526 	beq	r2,zero,182a52c <lwip_getsockopt+0x224>
    sock_set_errno(sock, err);
 182a518:	e0fff407 	ldb	r3,-48(fp)
 182a51c:	e0bff517 	ldw	r2,-44(fp)
 182a520:	10c00415 	stw	r3,16(r2)
    return -1;
 182a524:	00bfffc4 	movi	r2,-1
 182a528:	00002306 	br	182a5b8 <lwip_getsockopt+0x2b0>
  }

  /* Now do the actual option processing */
  data.sock = sock;
 182a52c:	e0bff517 	ldw	r2,-44(fp)
 182a530:	e0bff615 	stw	r2,-40(fp)
#ifdef LWIP_DEBUG
  data.s = s;
#endif /* LWIP_DEBUG */
  data.level = level;
 182a534:	e0bffd17 	ldw	r2,-12(fp)
 182a538:	e0bff715 	stw	r2,-36(fp)
  data.optname = optname;
 182a53c:	e0bffe17 	ldw	r2,-8(fp)
 182a540:	e0bff815 	stw	r2,-32(fp)
  data.optval = optval;
 182a544:	e0bfff17 	ldw	r2,-4(fp)
 182a548:	e0bff915 	stw	r2,-28(fp)
  data.optlen = optlen;
 182a54c:	e0800217 	ldw	r2,8(fp)
 182a550:	e0bffa15 	stw	r2,-24(fp)
  data.err = err;
 182a554:	e0bff403 	ldbu	r2,-48(fp)
 182a558:	e0bffb05 	stb	r2,-20(fp)
  tcpip_callback(lwip_getsockopt_internal, &data);
 182a55c:	e0bff604 	addi	r2,fp,-40
 182a560:	01800044 	movi	r6,1
 182a564:	100b883a 	mov	r5,r2
 182a568:	010060f4 	movhi	r4,387
 182a56c:	21297304 	addi	r4,r4,-23092
 182a570:	182b3ec0 	call	182b3ec <tcpip_callback_with_block>
  sys_arch_sem_wait(&sock->conn->op_completed, 0);
 182a574:	e0bff517 	ldw	r2,-44(fp)
 182a578:	10800017 	ldw	r2,0(r2)
 182a57c:	10800404 	addi	r2,r2,16
 182a580:	000b883a 	mov	r5,zero
 182a584:	1009883a 	mov	r4,r2
 182a588:	1814d740 	call	1814d74 <sys_arch_sem_wait>
  /* maybe lwip_getsockopt_internal has changed err */
  err = data.err;
 182a58c:	e0bffb03 	ldbu	r2,-20(fp)
 182a590:	e0bff405 	stb	r2,-48(fp)

  sock_set_errno(sock, err);
 182a594:	e0fff407 	ldb	r3,-48(fp)
 182a598:	e0bff517 	ldw	r2,-44(fp)
 182a59c:	10c00415 	stw	r3,16(r2)
  return err ? -1 : 0;
 182a5a0:	e0bff407 	ldb	r2,-48(fp)
 182a5a4:	10000226 	beq	r2,zero,182a5b0 <lwip_getsockopt+0x2a8>
 182a5a8:	00bfffc4 	movi	r2,-1
 182a5ac:	00000206 	br	182a5b8 <lwip_getsockopt+0x2b0>
 182a5b0:	0005883a 	mov	r2,zero
 182a5b4:	0001883a 	nop
}
 182a5b8:	e037883a 	mov	sp,fp
 182a5bc:	dfc00117 	ldw	ra,4(sp)
 182a5c0:	df000017 	ldw	fp,0(sp)
 182a5c4:	dec00204 	addi	sp,sp,8
 182a5c8:	f800283a 	ret

0182a5cc <lwip_getsockopt_internal>:

static void
lwip_getsockopt_internal(void *arg)
{
 182a5cc:	defff804 	addi	sp,sp,-32
 182a5d0:	dfc00715 	stw	ra,28(sp)
 182a5d4:	df000615 	stw	fp,24(sp)
 182a5d8:	df000604 	addi	fp,sp,24
 182a5dc:	e13fff15 	stw	r4,-4(fp)
  void *optval;
  struct lwip_setgetsockopt_data *data;

  LWIP_ASSERT("arg != NULL", arg != NULL);

  data = (struct lwip_setgetsockopt_data*)arg;
 182a5e0:	e0bfff17 	ldw	r2,-4(fp)
 182a5e4:	e0bffa15 	stw	r2,-24(fp)
  sock = data->sock;
 182a5e8:	e0bffa17 	ldw	r2,-24(fp)
 182a5ec:	10800017 	ldw	r2,0(r2)
 182a5f0:	e0bffb15 	stw	r2,-20(fp)
#ifdef LWIP_DEBUG
  s = data->s;
#endif /* LWIP_DEBUG */
  level = data->level;
 182a5f4:	e0bffa17 	ldw	r2,-24(fp)
 182a5f8:	10800117 	ldw	r2,4(r2)
 182a5fc:	e0bffc15 	stw	r2,-16(fp)
  optname = data->optname;
 182a600:	e0bffa17 	ldw	r2,-24(fp)
 182a604:	10800217 	ldw	r2,8(r2)
 182a608:	e0bffd15 	stw	r2,-12(fp)
  optval = data->optval;
 182a60c:	e0bffa17 	ldw	r2,-24(fp)
 182a610:	10800317 	ldw	r2,12(r2)
 182a614:	e0bffe15 	stw	r2,-8(fp)

  switch (level) {
 182a618:	e0bffc17 	ldw	r2,-16(fp)
 182a61c:	10c001a0 	cmpeqi	r3,r2,6
 182a620:	18009b1e 	bne	r3,zero,182a890 <lwip_getsockopt_internal+0x2c4>
 182a624:	10c3ffe0 	cmpeqi	r3,r2,4095
 182a628:	1800021e 	bne	r3,zero,182a634 <lwip_getsockopt_internal+0x68>
 182a62c:	10008126 	beq	r2,zero,182a834 <lwip_getsockopt_internal+0x268>
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
 182a630:	0000da06 	br	182a99c <lwip_getsockopt_internal+0x3d0>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182a634:	e0bffd17 	ldw	r2,-12(fp)
 182a638:	10c08020 	cmpeqi	r3,r2,512
 182a63c:	18001a1e 	bne	r3,zero,182a6a8 <lwip_getsockopt_internal+0xdc>
 182a640:	10c08048 	cmpgei	r3,r2,513
 182a644:	18000c1e 	bne	r3,zero,182a678 <lwip_getsockopt_internal+0xac>
 182a648:	10c00120 	cmpeqi	r3,r2,4
 182a64c:	1800161e 	bne	r3,zero,182a6a8 <lwip_getsockopt_internal+0xdc>
 182a650:	10c00148 	cmpgei	r3,r2,5
 182a654:	1800031e 	bne	r3,zero,182a664 <lwip_getsockopt_internal+0x98>
 182a658:	108000a0 	cmpeqi	r2,r2,2
 182a65c:	1000121e 	bne	r2,zero,182a6a8 <lwip_getsockopt_internal+0xdc>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182a660:	00007306 	br	182a830 <lwip_getsockopt_internal+0x264>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182a664:	10c00220 	cmpeqi	r3,r2,8
 182a668:	18000f1e 	bne	r3,zero,182a6a8 <lwip_getsockopt_internal+0xdc>
 182a66c:	10800820 	cmpeqi	r2,r2,32
 182a670:	10000d1e 	bne	r2,zero,182a6a8 <lwip_getsockopt_internal+0xdc>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182a674:	00006e06 	br	182a830 <lwip_getsockopt_internal+0x264>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182a678:	10c401e0 	cmpeqi	r3,r2,4103
 182a67c:	1800331e 	bne	r3,zero,182a74c <lwip_getsockopt_internal+0x180>
 182a680:	10c40208 	cmpgei	r3,r2,4104
 182a684:	1800031e 	bne	r3,zero,182a694 <lwip_getsockopt_internal+0xc8>
 182a688:	108401a0 	cmpeqi	r2,r2,4102
 182a68c:	1000571e 	bne	r2,zero,182a7ec <lwip_getsockopt_internal+0x220>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182a690:	00006706 	br	182a830 <lwip_getsockopt_internal+0x264>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182a694:	10c40220 	cmpeqi	r3,r2,4104
 182a698:	18000d1e 	bne	r3,zero,182a6d0 <lwip_getsockopt_internal+0x104>
 182a69c:	108402a0 	cmpeqi	r2,r2,4106
 182a6a0:	1000581e 	bne	r2,zero,182a804 <lwip_getsockopt_internal+0x238>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182a6a4:	00006206 	br	182a830 <lwip_getsockopt_internal+0x264>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /*case SO_USELOOPBACK: UNIMPL */
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
 182a6a8:	e0bffb17 	ldw	r2,-20(fp)
 182a6ac:	10800017 	ldw	r2,0(r2)
 182a6b0:	10800217 	ldw	r2,8(r2)
 182a6b4:	10800203 	ldbu	r2,8(r2)
 182a6b8:	10c03fcc 	andi	r3,r2,255
 182a6bc:	e0bffd17 	ldw	r2,-12(fp)
 182a6c0:	1886703a 	and	r3,r3,r2
 182a6c4:	e0bffe17 	ldw	r2,-8(fp)
 182a6c8:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
 182a6cc:	00005806 	br	182a830 <lwip_getsockopt_internal+0x264>

    case SO_TYPE:
      switch (NETCONNTYPE_GROUP(sock->conn->type)) {
 182a6d0:	e0bffb17 	ldw	r2,-20(fp)
 182a6d4:	10800017 	ldw	r2,0(r2)
 182a6d8:	10800017 	ldw	r2,0(r2)
 182a6dc:	10803c0c 	andi	r2,r2,240
 182a6e0:	10c00820 	cmpeqi	r3,r2,32
 182a6e4:	18000d1e 	bne	r3,zero,182a71c <lwip_getsockopt_internal+0x150>
 182a6e8:	10c01020 	cmpeqi	r3,r2,64
 182a6ec:	1800031e 	bne	r3,zero,182a6fc <lwip_getsockopt_internal+0x130>
 182a6f0:	10800420 	cmpeqi	r2,r2,16
 182a6f4:	1000051e 	bne	r2,zero,182a70c <lwip_getsockopt_internal+0x140>
 182a6f8:	00000c06 	br	182a72c <lwip_getsockopt_internal+0x160>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
 182a6fc:	e0bffe17 	ldw	r2,-8(fp)
 182a700:	00c000c4 	movi	r3,3
 182a704:	10c00015 	stw	r3,0(r2)
        break;
 182a708:	00000f06 	br	182a748 <lwip_getsockopt_internal+0x17c>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
 182a70c:	e0bffe17 	ldw	r2,-8(fp)
 182a710:	00c00044 	movi	r3,1
 182a714:	10c00015 	stw	r3,0(r2)
        break;
 182a718:	00000b06 	br	182a748 <lwip_getsockopt_internal+0x17c>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
 182a71c:	e0bffe17 	ldw	r2,-8(fp)
 182a720:	00c00084 	movi	r3,2
 182a724:	10c00015 	stw	r3,0(r2)
        break;
 182a728:	00000706 	br	182a748 <lwip_getsockopt_internal+0x17c>
      default: /* unrecognized socket type */
        *(int*)optval = sock->conn->type;
 182a72c:	e0bffb17 	ldw	r2,-20(fp)
 182a730:	10800017 	ldw	r2,0(r2)
 182a734:	10800017 	ldw	r2,0(r2)
 182a738:	1007883a 	mov	r3,r2
 182a73c:	e0bffe17 	ldw	r2,-8(fp)
 182a740:	10c00015 	stw	r3,0(r2)
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (sock->conn->type) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
 182a744:	00003a06 	br	182a830 <lwip_getsockopt_internal+0x264>
 182a748:	00003906 	br	182a830 <lwip_getsockopt_internal+0x264>

    case SO_ERROR:
      /* only overwrite ERR_OK or tempoary errors */
      if ((sock->err == 0) || (sock->err == EINPROGRESS)) {
 182a74c:	e0bffb17 	ldw	r2,-20(fp)
 182a750:	10800417 	ldw	r2,16(r2)
 182a754:	10000426 	beq	r2,zero,182a768 <lwip_getsockopt_internal+0x19c>
 182a758:	e0bffb17 	ldw	r2,-20(fp)
 182a75c:	10800417 	ldw	r2,16(r2)
 182a760:	10801dd8 	cmpnei	r2,r2,119
 182a764:	10001a1e 	bne	r2,zero,182a7d0 <lwip_getsockopt_internal+0x204>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
 182a768:	e0bffb17 	ldw	r2,-20(fp)
 182a76c:	10800017 	ldw	r2,0(r2)
 182a770:	10800303 	ldbu	r2,12(r2)
 182a774:	10803fcc 	andi	r2,r2,255
 182a778:	1080201c 	xori	r2,r2,128
 182a77c:	10bfe004 	addi	r2,r2,-128
 182a780:	0085c83a 	sub	r2,zero,r2
 182a784:	10800428 	cmpgeui	r2,r2,16
 182a788:	10000e1e 	bne	r2,zero,182a7c4 <lwip_getsockopt_internal+0x1f8>
 182a78c:	e0bffb17 	ldw	r2,-20(fp)
 182a790:	10800017 	ldw	r2,0(r2)
 182a794:	10800303 	ldbu	r2,12(r2)
 182a798:	10803fcc 	andi	r2,r2,255
 182a79c:	1080201c 	xori	r2,r2,128
 182a7a0:	10bfe004 	addi	r2,r2,-128
 182a7a4:	0087c83a 	sub	r3,zero,r2
 182a7a8:	00806134 	movhi	r2,388
 182a7ac:	10850004 	addi	r2,r2,5120
 182a7b0:	18c7883a 	add	r3,r3,r3
 182a7b4:	18c7883a 	add	r3,r3,r3
 182a7b8:	10c5883a 	add	r2,r2,r3
 182a7bc:	10800017 	ldw	r2,0(r2)
 182a7c0:	00000106 	br	182a7c8 <lwip_getsockopt_internal+0x1fc>
 182a7c4:	00800144 	movi	r2,5
 182a7c8:	e0fffb17 	ldw	r3,-20(fp)
 182a7cc:	18800415 	stw	r2,16(r3)
      } 
      *(int *)optval = sock->err;
 182a7d0:	e0bffb17 	ldw	r2,-20(fp)
 182a7d4:	10c00417 	ldw	r3,16(r2)
 182a7d8:	e0bffe17 	ldw	r2,-8(fp)
 182a7dc:	10c00015 	stw	r3,0(r2)
      sock->err = 0;
 182a7e0:	e0bffb17 	ldw	r2,-20(fp)
 182a7e4:	10000415 	stw	zero,16(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
 182a7e8:	00001106 	br	182a830 <lwip_getsockopt_internal+0x264>
      *(int *)optval = netconn_get_sendtimeout(sock->conn);
      break;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      *(int *)optval = netconn_get_recvtimeout(sock->conn);
 182a7ec:	e0bffb17 	ldw	r2,-20(fp)
 182a7f0:	10800017 	ldw	r2,0(r2)
 182a7f4:	10c00817 	ldw	r3,32(r2)
 182a7f8:	e0bffe17 	ldw	r2,-8(fp)
 182a7fc:	10c00015 	stw	r3,0(r2)
      break;
 182a800:	00000b06 	br	182a830 <lwip_getsockopt_internal+0x264>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
      break;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_UDP
    case SO_NO_CHECK:
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
 182a804:	e0bffb17 	ldw	r2,-20(fp)
 182a808:	10800017 	ldw	r2,0(r2)
 182a80c:	10800217 	ldw	r2,8(r2)
 182a810:	10800403 	ldbu	r2,16(r2)
 182a814:	10803fcc 	andi	r2,r2,255
 182a818:	1080004c 	andi	r2,r2,1
 182a81c:	1004c03a 	cmpne	r2,r2,zero
 182a820:	10c03fcc 	andi	r3,r2,255
 182a824:	e0bffe17 	ldw	r2,-8(fp)
 182a828:	10c00015 	stw	r3,0(r2)
      break;
 182a82c:	0001883a 	nop
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 182a830:	00005a06 	br	182a99c <lwip_getsockopt_internal+0x3d0>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 182a834:	e0bffd17 	ldw	r2,-12(fp)
 182a838:	10c00060 	cmpeqi	r3,r2,1
 182a83c:	18000b1e 	bne	r3,zero,182a86c <lwip_getsockopt_internal+0x2a0>
 182a840:	108000a0 	cmpeqi	r2,r2,2
 182a844:	1000011e 	bne	r2,zero,182a84c <lwip_getsockopt_internal+0x280>
                  s, *(int *)optval));
      break;
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182a848:	00001006 	br	182a88c <lwip_getsockopt_internal+0x2c0>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
    case IP_TTL:
      *(int*)optval = sock->conn->pcb.ip->ttl;
 182a84c:	e0bffb17 	ldw	r2,-20(fp)
 182a850:	10800017 	ldw	r2,0(r2)
 182a854:	10800217 	ldw	r2,8(r2)
 182a858:	10800283 	ldbu	r2,10(r2)
 182a85c:	10c03fcc 	andi	r3,r2,255
 182a860:	e0bffe17 	ldw	r2,-8(fp)
 182a864:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
 182a868:	00000806 	br	182a88c <lwip_getsockopt_internal+0x2c0>
    case IP_TOS:
      *(int*)optval = sock->conn->pcb.ip->tos;
 182a86c:	e0bffb17 	ldw	r2,-20(fp)
 182a870:	10800017 	ldw	r2,0(r2)
 182a874:	10800217 	ldw	r2,8(r2)
 182a878:	10800243 	ldbu	r2,9(r2)
 182a87c:	10c03fcc 	andi	r3,r2,255
 182a880:	e0bffe17 	ldw	r2,-8(fp)
 182a884:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
 182a888:	0001883a 	nop
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 182a88c:	00004306 	br	182a99c <lwip_getsockopt_internal+0x3d0>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    switch (optname) {
 182a890:	e0bffd17 	ldw	r2,-12(fp)
 182a894:	108001a8 	cmpgeui	r2,r2,6
 182a898:	10003e1e 	bne	r2,zero,182a994 <lwip_getsockopt_internal+0x3c8>
 182a89c:	e0bffd17 	ldw	r2,-12(fp)
 182a8a0:	100690ba 	slli	r3,r2,2
 182a8a4:	008060f4 	movhi	r2,387
 182a8a8:	10aa2e04 	addi	r2,r2,-22344
 182a8ac:	1885883a 	add	r2,r3,r2
 182a8b0:	10800017 	ldw	r2,0(r2)
 182a8b4:	1000683a 	jmp	r2
 182a8b8:	0182a994 	movui	r6,2726
 182a8bc:	0182a8d0 	cmplti	r6,zero,2723
 182a8c0:	0182a8fc 	xorhi	r6,zero,2723
 182a8c4:	0182a91c 	xori	r6,zero,2724
 182a8c8:	0182a948 	cmpgei	r6,zero,2725
 182a8cc:	0182a974 	movhi	r6,2725
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
 182a8d0:	e0bffb17 	ldw	r2,-20(fp)
 182a8d4:	10800017 	ldw	r2,0(r2)
 182a8d8:	10800217 	ldw	r2,8(r2)
 182a8dc:	10800883 	ldbu	r2,34(r2)
 182a8e0:	10803fcc 	andi	r2,r2,255
 182a8e4:	1080100c 	andi	r2,r2,64
 182a8e8:	1004c03a 	cmpne	r2,r2,zero
 182a8ec:	10c03fcc 	andi	r3,r2,255
 182a8f0:	e0bffe17 	ldw	r2,-8(fp)
 182a8f4:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
 182a8f8:	00002706 	br	182a998 <lwip_getsockopt_internal+0x3cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
 182a8fc:	e0bffb17 	ldw	r2,-20(fp)
 182a900:	10800017 	ldw	r2,0(r2)
 182a904:	10800217 	ldw	r2,8(r2)
 182a908:	10802517 	ldw	r2,148(r2)
 182a90c:	1007883a 	mov	r3,r2
 182a910:	e0bffe17 	ldw	r2,-8(fp)
 182a914:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
 182a918:	00001f06 	br	182a998 <lwip_getsockopt_internal+0x3cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
 182a91c:	e0bffb17 	ldw	r2,-20(fp)
 182a920:	10800017 	ldw	r2,0(r2)
 182a924:	10800217 	ldw	r2,8(r2)
 182a928:	10802517 	ldw	r2,148(r2)
 182a92c:	0140fa04 	movi	r5,1000
 182a930:	1009883a 	mov	r4,r2
 182a934:	180acd00 	call	180acd0 <__udivsi3>
 182a938:	1007883a 	mov	r3,r2
 182a93c:	e0bffe17 	ldw	r2,-8(fp)
 182a940:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
 182a944:	00001406 	br	182a998 <lwip_getsockopt_internal+0x3cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
 182a948:	e0bffb17 	ldw	r2,-20(fp)
 182a94c:	10800017 	ldw	r2,0(r2)
 182a950:	10800217 	ldw	r2,8(r2)
 182a954:	10802617 	ldw	r2,152(r2)
 182a958:	0140fa04 	movi	r5,1000
 182a95c:	1009883a 	mov	r4,r2
 182a960:	180acd00 	call	180acd0 <__udivsi3>
 182a964:	1007883a 	mov	r3,r2
 182a968:	e0bffe17 	ldw	r2,-8(fp)
 182a96c:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
 182a970:	00000906 	br	182a998 <lwip_getsockopt_internal+0x3cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
 182a974:	e0bffb17 	ldw	r2,-20(fp)
 182a978:	10800017 	ldw	r2,0(r2)
 182a97c:	10800217 	ldw	r2,8(r2)
 182a980:	10802717 	ldw	r2,156(r2)
 182a984:	1007883a 	mov	r3,r2
 182a988:	e0bffe17 	ldw	r2,-8(fp)
 182a98c:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
 182a990:	00000106 	br	182a998 <lwip_getsockopt_internal+0x3cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182a994:	0001883a 	nop
    }  /* switch (optname) */
    break;
 182a998:	0001883a 	nop
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
  } /* switch (level) */
  sys_sem_signal(&sock->conn->op_completed);
 182a99c:	e0bffb17 	ldw	r2,-20(fp)
 182a9a0:	10800017 	ldw	r2,0(r2)
 182a9a4:	10800404 	addi	r2,r2,16
 182a9a8:	1009883a 	mov	r4,r2
 182a9ac:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 182a9b0:	0001883a 	nop
 182a9b4:	e037883a 	mov	sp,fp
 182a9b8:	dfc00117 	ldw	ra,4(sp)
 182a9bc:	df000017 	ldw	fp,0(sp)
 182a9c0:	dec00204 	addi	sp,sp,8
 182a9c4:	f800283a 	ret

0182a9c8 <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 182a9c8:	defff204 	addi	sp,sp,-56
 182a9cc:	dfc00d15 	stw	ra,52(sp)
 182a9d0:	df000c15 	stw	fp,48(sp)
 182a9d4:	df000c04 	addi	fp,sp,48
 182a9d8:	e13ffc15 	stw	r4,-16(fp)
 182a9dc:	e17ffd15 	stw	r5,-12(fp)
 182a9e0:	e1bffe15 	stw	r6,-8(fp)
 182a9e4:	e1ffff15 	stw	r7,-4(fp)
  struct lwip_sock *sock = get_socket(s);
 182a9e8:	e13ffc17 	ldw	r4,-16(fp)
 182a9ec:	1827fe80 	call	1827fe8 <get_socket>
 182a9f0:	e0bff515 	stw	r2,-44(fp)
  err_t err = ERR_OK;
 182a9f4:	e03ff405 	stb	zero,-48(fp)
  struct lwip_setgetsockopt_data data;

  if (!sock) {
 182a9f8:	e0bff517 	ldw	r2,-44(fp)
 182a9fc:	1000021e 	bne	r2,zero,182aa08 <lwip_setsockopt+0x40>
    return -1;
 182aa00:	00bfffc4 	movi	r2,-1
 182aa04:	00009006 	br	182ac48 <lwip_setsockopt+0x280>
  }

  if (NULL == optval) {
 182aa08:	e0bfff17 	ldw	r2,-4(fp)
 182aa0c:	1000051e 	bne	r2,zero,182aa24 <lwip_setsockopt+0x5c>
    sock_set_errno(sock, EFAULT);
 182aa10:	e0bff517 	ldw	r2,-44(fp)
 182aa14:	00c00384 	movi	r3,14
 182aa18:	10c00415 	stw	r3,16(r2)
    return -1;
 182aa1c:	00bfffc4 	movi	r2,-1
 182aa20:	00008906 	br	182ac48 <lwip_setsockopt+0x280>
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {
 182aa24:	e0bffd17 	ldw	r2,-12(fp)
 182aa28:	10c001a0 	cmpeqi	r3,r2,6
 182aa2c:	1800441e 	bne	r3,zero,182ab40 <lwip_setsockopt+0x178>
 182aa30:	10c3ffe0 	cmpeqi	r3,r2,4095
 182aa34:	1800021e 	bne	r3,zero,182aa40 <lwip_setsockopt+0x78>
 182aa38:	10003226 	beq	r2,zero,182ab04 <lwip_setsockopt+0x13c>
 182aa3c:	00005606 	br	182ab98 <lwip_setsockopt+0x1d0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182aa40:	e0bffe17 	ldw	r2,-8(fp)
 182aa44:	10c00820 	cmpeqi	r3,r2,32
 182aa48:	18000d1e 	bne	r3,zero,182aa80 <lwip_setsockopt+0xb8>
 182aa4c:	10c00848 	cmpgei	r3,r2,33
 182aa50:	1800051e 	bne	r3,zero,182aa68 <lwip_setsockopt+0xa0>
 182aa54:	10c00120 	cmpeqi	r3,r2,4
 182aa58:	1800091e 	bne	r3,zero,182aa80 <lwip_setsockopt+0xb8>
 182aa5c:	10800220 	cmpeqi	r2,r2,8
 182aa60:	1000071e 	bne	r2,zero,182aa80 <lwip_setsockopt+0xb8>
 182aa64:	00002006 	br	182aae8 <lwip_setsockopt+0x120>
 182aa68:	10c401a0 	cmpeqi	r3,r2,4102
 182aa6c:	1800041e 	bne	r3,zero,182aa80 <lwip_setsockopt+0xb8>
 182aa70:	10c402a0 	cmpeqi	r3,r2,4106
 182aa74:	1800081e 	bne	r3,zero,182aa98 <lwip_setsockopt+0xd0>
 182aa78:	10808020 	cmpeqi	r2,r2,512
 182aa7c:	10001a26 	beq	r2,zero,182aae8 <lwip_setsockopt+0x120>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (optlen < sizeof(int)) {
 182aa80:	e0800217 	ldw	r2,8(fp)
 182aa84:	10800128 	cmpgeui	r2,r2,4
 182aa88:	10001a1e 	bne	r2,zero,182aaf4 <lwip_setsockopt+0x12c>
        err = EINVAL;
 182aa8c:	00800584 	movi	r2,22
 182aa90:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 182aa94:	00001706 	br	182aaf4 <lwip_setsockopt+0x12c>
    case SO_NO_CHECK:
      if (optlen < sizeof(int)) {
 182aa98:	e0800217 	ldw	r2,8(fp)
 182aa9c:	10800128 	cmpgeui	r2,r2,4
 182aaa0:	1000021e 	bne	r2,zero,182aaac <lwip_setsockopt+0xe4>
        err = EINVAL;
 182aaa4:	00800584 	movi	r2,22
 182aaa8:	e0bff405 	stb	r2,-48(fp)
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 182aaac:	e0bff517 	ldw	r2,-44(fp)
 182aab0:	10800017 	ldw	r2,0(r2)
 182aab4:	10800017 	ldw	r2,0(r2)
 182aab8:	10800818 	cmpnei	r2,r2,32
 182aabc:	1000071e 	bne	r2,zero,182aadc <lwip_setsockopt+0x114>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
 182aac0:	e0bff517 	ldw	r2,-44(fp)
 182aac4:	10800017 	ldw	r2,0(r2)
 182aac8:	10800217 	ldw	r2,8(r2)
 182aacc:	10800403 	ldbu	r2,16(r2)
 182aad0:	10803fcc 	andi	r2,r2,255
 182aad4:	1080008c 	andi	r2,r2,2
    case SO_NO_CHECK:
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 182aad8:	10000826 	beq	r2,zero,182aafc <lwip_setsockopt+0x134>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
 182aadc:	00801a84 	movi	r2,106
 182aae0:	e0bff405 	stb	r2,-48(fp)
      }
#endif /* LWIP_UDP */
      break;
 182aae4:	00000506 	br	182aafc <lwip_setsockopt+0x134>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
 182aae8:	00801b44 	movi	r2,109
 182aaec:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182aaf0:	00002b06 	br	182aba0 <lwip_setsockopt+0x1d8>
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 182aaf4:	0001883a 	nop
 182aaf8:	00002906 	br	182aba0 <lwip_setsockopt+0x1d8>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
      }
#endif /* LWIP_UDP */
      break;
 182aafc:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182ab00:	00002706 	br	182aba0 <lwip_setsockopt+0x1d8>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 182ab04:	e0bffe17 	ldw	r2,-8(fp)
 182ab08:	10bfffc4 	addi	r2,r2,-1
 182ab0c:	108000a8 	cmpgeui	r2,r2,2
 182ab10:	1000061e 	bne	r2,zero,182ab2c <lwip_setsockopt+0x164>
    /* UNIMPL case IP_HDRINCL: */
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (optlen < sizeof(int)) {
 182ab14:	e0800217 	ldw	r2,8(fp)
 182ab18:	10800128 	cmpgeui	r2,r2,4
 182ab1c:	1000061e 	bne	r2,zero,182ab38 <lwip_setsockopt+0x170>
        err = EINVAL;
 182ab20:	00800584 	movi	r2,22
 182ab24:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 182ab28:	00000306 	br	182ab38 <lwip_setsockopt+0x170>
      break;
#endif /* LWIP_IGMP */
      default:
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                    s, optname));
        err = ENOPROTOOPT;
 182ab2c:	00801b44 	movi	r2,109
 182ab30:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182ab34:	00001a06 	br	182aba0 <lwip_setsockopt+0x1d8>
    case IP_TTL:
    case IP_TOS:
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 182ab38:	0001883a 	nop
      default:
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                    s, optname));
        err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182ab3c:	00001806 	br	182aba0 <lwip_setsockopt+0x1d8>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (optlen < sizeof(int)) {
 182ab40:	e0800217 	ldw	r2,8(fp)
 182ab44:	10800128 	cmpgeui	r2,r2,4
 182ab48:	1000031e 	bne	r2,zero,182ab58 <lwip_setsockopt+0x190>
      err = EINVAL;
 182ab4c:	00800584 	movi	r2,22
 182ab50:	e0bff405 	stb	r2,-48(fp)
      break;
 182ab54:	00001206 	br	182aba0 <lwip_setsockopt+0x1d8>
    }

    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
 182ab58:	e0bff517 	ldw	r2,-44(fp)
 182ab5c:	10800017 	ldw	r2,0(r2)
 182ab60:	10800017 	ldw	r2,0(r2)
 182ab64:	10800420 	cmpeqi	r2,r2,16
 182ab68:	1000021e 	bne	r2,zero,182ab74 <lwip_setsockopt+0x1ac>
      return 0;
 182ab6c:	0005883a 	mov	r2,zero
 182ab70:	00003506 	br	182ac48 <lwip_setsockopt+0x280>

    switch (optname) {
 182ab74:	e0bffe17 	ldw	r2,-8(fp)
 182ab78:	10bfffc4 	addi	r2,r2,-1
 182ab7c:	10800168 	cmpgeui	r2,r2,5
 182ab80:	10000326 	beq	r2,zero,182ab90 <lwip_setsockopt+0x1c8>
      break;

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
 182ab84:	00801b44 	movi	r2,109
 182ab88:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 182ab8c:	00000406 	br	182aba0 <lwip_setsockopt+0x1d8>
#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
    case TCP_KEEPINTVL:
    case TCP_KEEPCNT:
#endif /* LWIP_TCP_KEEPALIVE */
      break;
 182ab90:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 182ab94:	00000206 	br	182aba0 <lwip_setsockopt+0x1d8>
#endif /* LWIP_UDP && LWIP_UDPLITE */
/* UNDEFINED LEVEL */
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
 182ab98:	00801b44 	movi	r2,109
 182ab9c:	e0bff405 	stb	r2,-48(fp)
  }  /* switch (level) */


  if (err != ERR_OK) {
 182aba0:	e0bff407 	ldb	r2,-48(fp)
 182aba4:	10000526 	beq	r2,zero,182abbc <lwip_setsockopt+0x1f4>
    sock_set_errno(sock, err);
 182aba8:	e0fff407 	ldb	r3,-48(fp)
 182abac:	e0bff517 	ldw	r2,-44(fp)
 182abb0:	10c00415 	stw	r3,16(r2)
    return -1;
 182abb4:	00bfffc4 	movi	r2,-1
 182abb8:	00002306 	br	182ac48 <lwip_setsockopt+0x280>
  }


  /* Now do the actual option processing */
  data.sock = sock;
 182abbc:	e0bff517 	ldw	r2,-44(fp)
 182abc0:	e0bff615 	stw	r2,-40(fp)
#ifdef LWIP_DEBUG
  data.s = s;
#endif /* LWIP_DEBUG */
  data.level = level;
 182abc4:	e0bffd17 	ldw	r2,-12(fp)
 182abc8:	e0bff715 	stw	r2,-36(fp)
  data.optname = optname;
 182abcc:	e0bffe17 	ldw	r2,-8(fp)
 182abd0:	e0bff815 	stw	r2,-32(fp)
  data.optval = (void*)optval;
 182abd4:	e0bfff17 	ldw	r2,-4(fp)
 182abd8:	e0bff915 	stw	r2,-28(fp)
  data.optlen = &optlen;
 182abdc:	e0800204 	addi	r2,fp,8
 182abe0:	e0bffa15 	stw	r2,-24(fp)
  data.err = err;
 182abe4:	e0bff403 	ldbu	r2,-48(fp)
 182abe8:	e0bffb05 	stb	r2,-20(fp)
  tcpip_callback(lwip_setsockopt_internal, &data);
 182abec:	e0bff604 	addi	r2,fp,-40
 182abf0:	01800044 	movi	r6,1
 182abf4:	100b883a 	mov	r5,r2
 182abf8:	010060f4 	movhi	r4,387
 182abfc:	212b1704 	addi	r4,r4,-21412
 182ac00:	182b3ec0 	call	182b3ec <tcpip_callback_with_block>
  sys_arch_sem_wait(&sock->conn->op_completed, 0);
 182ac04:	e0bff517 	ldw	r2,-44(fp)
 182ac08:	10800017 	ldw	r2,0(r2)
 182ac0c:	10800404 	addi	r2,r2,16
 182ac10:	000b883a 	mov	r5,zero
 182ac14:	1009883a 	mov	r4,r2
 182ac18:	1814d740 	call	1814d74 <sys_arch_sem_wait>
  /* maybe lwip_setsockopt_internal has changed err */
  err = data.err;
 182ac1c:	e0bffb03 	ldbu	r2,-20(fp)
 182ac20:	e0bff405 	stb	r2,-48(fp)

  sock_set_errno(sock, err);
 182ac24:	e0fff407 	ldb	r3,-48(fp)
 182ac28:	e0bff517 	ldw	r2,-44(fp)
 182ac2c:	10c00415 	stw	r3,16(r2)
  return err ? -1 : 0;
 182ac30:	e0bff407 	ldb	r2,-48(fp)
 182ac34:	10000226 	beq	r2,zero,182ac40 <lwip_setsockopt+0x278>
 182ac38:	00bfffc4 	movi	r2,-1
 182ac3c:	00000206 	br	182ac48 <lwip_setsockopt+0x280>
 182ac40:	0005883a 	mov	r2,zero
 182ac44:	0001883a 	nop
}
 182ac48:	e037883a 	mov	sp,fp
 182ac4c:	dfc00117 	ldw	ra,4(sp)
 182ac50:	df000017 	ldw	fp,0(sp)
 182ac54:	dec00204 	addi	sp,sp,8
 182ac58:	f800283a 	ret

0182ac5c <lwip_setsockopt_internal>:

static void
lwip_setsockopt_internal(void *arg)
{
 182ac5c:	defff804 	addi	sp,sp,-32
 182ac60:	dfc00715 	stw	ra,28(sp)
 182ac64:	df000615 	stw	fp,24(sp)
 182ac68:	df000604 	addi	fp,sp,24
 182ac6c:	e13fff15 	stw	r4,-4(fp)
  const void *optval;
  struct lwip_setgetsockopt_data *data;

  LWIP_ASSERT("arg != NULL", arg != NULL);

  data = (struct lwip_setgetsockopt_data*)arg;
 182ac70:	e0bfff17 	ldw	r2,-4(fp)
 182ac74:	e0bffa15 	stw	r2,-24(fp)
  sock = data->sock;
 182ac78:	e0bffa17 	ldw	r2,-24(fp)
 182ac7c:	10800017 	ldw	r2,0(r2)
 182ac80:	e0bffb15 	stw	r2,-20(fp)
#ifdef LWIP_DEBUG
  s = data->s;
#endif /* LWIP_DEBUG */
  level = data->level;
 182ac84:	e0bffa17 	ldw	r2,-24(fp)
 182ac88:	10800117 	ldw	r2,4(r2)
 182ac8c:	e0bffc15 	stw	r2,-16(fp)
  optname = data->optname;
 182ac90:	e0bffa17 	ldw	r2,-24(fp)
 182ac94:	10800217 	ldw	r2,8(r2)
 182ac98:	e0bffd15 	stw	r2,-12(fp)
  optval = data->optval;
 182ac9c:	e0bffa17 	ldw	r2,-24(fp)
 182aca0:	10800317 	ldw	r2,12(r2)
 182aca4:	e0bffe15 	stw	r2,-8(fp)

  switch (level) {
 182aca8:	e0bffc17 	ldw	r2,-16(fp)
 182acac:	10c001a0 	cmpeqi	r3,r2,6
 182acb0:	1800651e 	bne	r3,zero,182ae48 <lwip_setsockopt_internal+0x1ec>
 182acb4:	10c3ffe0 	cmpeqi	r3,r2,4095
 182acb8:	1800021e 	bne	r3,zero,182acc4 <lwip_setsockopt_internal+0x68>
 182acbc:	10004d26 	beq	r2,zero,182adf4 <lwip_setsockopt_internal+0x198>
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
 182acc0:	0000a906 	br	182af68 <lwip_setsockopt_internal+0x30c>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182acc4:	e0bffd17 	ldw	r2,-12(fp)
 182acc8:	10c00820 	cmpeqi	r3,r2,32
 182accc:	18000e1e 	bne	r3,zero,182ad08 <lwip_setsockopt_internal+0xac>
 182acd0:	10c00848 	cmpgei	r3,r2,33
 182acd4:	1800051e 	bne	r3,zero,182acec <lwip_setsockopt_internal+0x90>
 182acd8:	10c00120 	cmpeqi	r3,r2,4
 182acdc:	18000a1e 	bne	r3,zero,182ad08 <lwip_setsockopt_internal+0xac>
 182ace0:	10800220 	cmpeqi	r2,r2,8
 182ace4:	1000081e 	bne	r2,zero,182ad08 <lwip_setsockopt_internal+0xac>
      }
      break;
#endif /* LWIP_UDP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182ace8:	00004106 	br	182adf0 <lwip_setsockopt_internal+0x194>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 182acec:	10c401a0 	cmpeqi	r3,r2,4102
 182acf0:	1800211e 	bne	r3,zero,182ad78 <lwip_setsockopt_internal+0x11c>
 182acf4:	10c402a0 	cmpeqi	r3,r2,4106
 182acf8:	1800251e 	bne	r3,zero,182ad90 <lwip_setsockopt_internal+0x134>
 182acfc:	10808020 	cmpeqi	r2,r2,512
 182ad00:	1000011e 	bne	r2,zero,182ad08 <lwip_setsockopt_internal+0xac>
      }
      break;
#endif /* LWIP_UDP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182ad04:	00003a06 	br	182adf0 <lwip_setsockopt_internal+0x194>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (*(int*)optval) {
 182ad08:	e0bffe17 	ldw	r2,-8(fp)
 182ad0c:	10800017 	ldw	r2,0(r2)
 182ad10:	10000c26 	beq	r2,zero,182ad44 <lwip_setsockopt_internal+0xe8>
        ip_set_option(sock->conn->pcb.ip, optname);
 182ad14:	e0bffb17 	ldw	r2,-20(fp)
 182ad18:	10800017 	ldw	r2,0(r2)
 182ad1c:	10800217 	ldw	r2,8(r2)
 182ad20:	e0fffb17 	ldw	r3,-20(fp)
 182ad24:	18c00017 	ldw	r3,0(r3)
 182ad28:	18c00217 	ldw	r3,8(r3)
 182ad2c:	18c00203 	ldbu	r3,8(r3)
 182ad30:	1809883a 	mov	r4,r3
 182ad34:	e0fffd17 	ldw	r3,-12(fp)
 182ad38:	20c6b03a 	or	r3,r4,r3
 182ad3c:	10c00205 	stb	r3,8(r2)
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(int*)optval?"on":"off")));
      break;
 182ad40:	00002b06 	br	182adf0 <lwip_setsockopt_internal+0x194>
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (*(int*)optval) {
        ip_set_option(sock->conn->pcb.ip, optname);
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
 182ad44:	e0bffb17 	ldw	r2,-20(fp)
 182ad48:	10800017 	ldw	r2,0(r2)
 182ad4c:	10800217 	ldw	r2,8(r2)
 182ad50:	e0fffb17 	ldw	r3,-20(fp)
 182ad54:	18c00017 	ldw	r3,0(r3)
 182ad58:	18c00217 	ldw	r3,8(r3)
 182ad5c:	18c00203 	ldbu	r3,8(r3)
 182ad60:	1809883a 	mov	r4,r3
 182ad64:	e0fffd17 	ldw	r3,-12(fp)
 182ad68:	00c6303a 	nor	r3,zero,r3
 182ad6c:	20c6703a 	and	r3,r4,r3
 182ad70:	10c00205 	stb	r3,8(r2)
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(int*)optval?"on":"off")));
      break;
 182ad74:	00001e06 	br	182adf0 <lwip_setsockopt_internal+0x194>
      netconn_set_sendtimeout(sock->conn, (s32_t)*(int*)optval);
      break;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      netconn_set_recvtimeout(sock->conn, *(int*)optval);
 182ad78:	e0bffb17 	ldw	r2,-20(fp)
 182ad7c:	10800017 	ldw	r2,0(r2)
 182ad80:	e0fffe17 	ldw	r3,-8(fp)
 182ad84:	18c00017 	ldw	r3,0(r3)
 182ad88:	10c00815 	stw	r3,32(r2)
      break;
 182ad8c:	00001806 	br	182adf0 <lwip_setsockopt_internal+0x194>
      netconn_set_recvbufsize(sock->conn, *(int*)optval);
      break;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_UDP
    case SO_NO_CHECK:
      if (*(int*)optval) {
 182ad90:	e0bffe17 	ldw	r2,-8(fp)
 182ad94:	10800017 	ldw	r2,0(r2)
 182ad98:	10000a26 	beq	r2,zero,182adc4 <lwip_setsockopt_internal+0x168>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
 182ad9c:	e0bffb17 	ldw	r2,-20(fp)
 182ada0:	10800017 	ldw	r2,0(r2)
 182ada4:	10800217 	ldw	r2,8(r2)
 182ada8:	e0fffb17 	ldw	r3,-20(fp)
 182adac:	18c00017 	ldw	r3,0(r3)
 182adb0:	18c00217 	ldw	r3,8(r3)
 182adb4:	18c00403 	ldbu	r3,16(r3)
 182adb8:	18c00054 	ori	r3,r3,1
 182adbc:	10c00405 	stb	r3,16(r2)
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
 182adc0:	00000a06 	br	182adec <lwip_setsockopt_internal+0x190>
#if LWIP_UDP
    case SO_NO_CHECK:
      if (*(int*)optval) {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
 182adc4:	e0bffb17 	ldw	r2,-20(fp)
 182adc8:	10800017 	ldw	r2,0(r2)
 182adcc:	10800217 	ldw	r2,8(r2)
 182add0:	e0fffb17 	ldw	r3,-20(fp)
 182add4:	18c00017 	ldw	r3,0(r3)
 182add8:	18c00217 	ldw	r3,8(r3)
 182addc:	19000403 	ldbu	r4,16(r3)
 182ade0:	00ffff84 	movi	r3,-2
 182ade4:	20c6703a 	and	r3,r4,r3
 182ade8:	10c00405 	stb	r3,16(r2)
      }
      break;
 182adec:	0001883a 	nop
#endif /* LWIP_UDP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 182adf0:	00005d06 	br	182af68 <lwip_setsockopt_internal+0x30c>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 182adf4:	e0bffd17 	ldw	r2,-12(fp)
 182adf8:	10c00060 	cmpeqi	r3,r2,1
 182adfc:	18000a1e 	bne	r3,zero,182ae28 <lwip_setsockopt_internal+0x1cc>
 182ae00:	108000a0 	cmpeqi	r2,r2,2
 182ae04:	1000011e 	bne	r2,zero,182ae0c <lwip_setsockopt_internal+0x1b0>
      }
      break;
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182ae08:	00000e06 	br	182ae44 <lwip_setsockopt_internal+0x1e8>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
    case IP_TTL:
      sock->conn->pcb.ip->ttl = (u8_t)(*(int*)optval);
 182ae0c:	e0bffb17 	ldw	r2,-20(fp)
 182ae10:	10800017 	ldw	r2,0(r2)
 182ae14:	10800217 	ldw	r2,8(r2)
 182ae18:	e0fffe17 	ldw	r3,-8(fp)
 182ae1c:	18c00017 	ldw	r3,0(r3)
 182ae20:	10c00285 	stb	r3,10(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
 182ae24:	00000706 	br	182ae44 <lwip_setsockopt_internal+0x1e8>
    case IP_TOS:
      sock->conn->pcb.ip->tos = (u8_t)(*(int*)optval);
 182ae28:	e0bffb17 	ldw	r2,-20(fp)
 182ae2c:	10800017 	ldw	r2,0(r2)
 182ae30:	10800217 	ldw	r2,8(r2)
 182ae34:	e0fffe17 	ldw	r3,-8(fp)
 182ae38:	18c00017 	ldw	r3,0(r3)
 182ae3c:	10c00245 	stb	r3,9(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
 182ae40:	0001883a 	nop
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 182ae44:	00004806 	br	182af68 <lwip_setsockopt_internal+0x30c>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    switch (optname) {
 182ae48:	e0bffd17 	ldw	r2,-12(fp)
 182ae4c:	108001a8 	cmpgeui	r2,r2,6
 182ae50:	1000431e 	bne	r2,zero,182af60 <lwip_setsockopt_internal+0x304>
 182ae54:	e0bffd17 	ldw	r2,-12(fp)
 182ae58:	100690ba 	slli	r3,r2,2
 182ae5c:	008060f4 	movhi	r2,387
 182ae60:	10ab9c04 	addi	r2,r2,-20880
 182ae64:	1885883a 	add	r2,r3,r2
 182ae68:	10800017 	ldw	r2,0(r2)
 182ae6c:	1000683a 	jmp	r2
 182ae70:	0182af60 	cmpeqi	r6,zero,2749
 182ae74:	0182ae88 	cmpgei	r6,zero,2746
 182ae78:	0182aee8 	cmpgeui	r6,zero,2747
 182ae7c:	0182af04 	movi	r6,2748
 182ae80:	0182af24 	muli	r6,zero,2748
 182ae84:	0182af44 	movi	r6,2749
    case TCP_NODELAY:
      if (*(int*)optval) {
 182ae88:	e0bffe17 	ldw	r2,-8(fp)
 182ae8c:	10800017 	ldw	r2,0(r2)
 182ae90:	10000a26 	beq	r2,zero,182aebc <lwip_setsockopt_internal+0x260>
        tcp_nagle_disable(sock->conn->pcb.tcp);
 182ae94:	e0bffb17 	ldw	r2,-20(fp)
 182ae98:	10800017 	ldw	r2,0(r2)
 182ae9c:	10800217 	ldw	r2,8(r2)
 182aea0:	e0fffb17 	ldw	r3,-20(fp)
 182aea4:	18c00017 	ldw	r3,0(r3)
 182aea8:	18c00217 	ldw	r3,8(r3)
 182aeac:	18c00883 	ldbu	r3,34(r3)
 182aeb0:	18c01014 	ori	r3,r3,64
 182aeb4:	10c00885 	stb	r3,34(r2)
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(int *)optval)?"on":"off") );
      break;
 182aeb8:	00002a06 	br	182af64 <lwip_setsockopt_internal+0x308>
    switch (optname) {
    case TCP_NODELAY:
      if (*(int*)optval) {
        tcp_nagle_disable(sock->conn->pcb.tcp);
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
 182aebc:	e0bffb17 	ldw	r2,-20(fp)
 182aec0:	10800017 	ldw	r2,0(r2)
 182aec4:	10800217 	ldw	r2,8(r2)
 182aec8:	e0fffb17 	ldw	r3,-20(fp)
 182aecc:	18c00017 	ldw	r3,0(r3)
 182aed0:	18c00217 	ldw	r3,8(r3)
 182aed4:	19000883 	ldbu	r4,34(r3)
 182aed8:	00ffefc4 	movi	r3,-65
 182aedc:	20c6703a 	and	r3,r4,r3
 182aee0:	10c00885 	stb	r3,34(r2)
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(int *)optval)?"on":"off") );
      break;
 182aee4:	00001f06 	br	182af64 <lwip_setsockopt_internal+0x308>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(int*)optval);
 182aee8:	e0bffb17 	ldw	r2,-20(fp)
 182aeec:	10800017 	ldw	r2,0(r2)
 182aef0:	10800217 	ldw	r2,8(r2)
 182aef4:	e0fffe17 	ldw	r3,-8(fp)
 182aef8:	18c00017 	ldw	r3,0(r3)
 182aefc:	10c02515 	stw	r3,148(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
 182af00:	00001806 	br	182af64 <lwip_setsockopt_internal+0x308>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(int*)optval);
 182af04:	e0bffb17 	ldw	r2,-20(fp)
 182af08:	10800017 	ldw	r2,0(r2)
 182af0c:	10800217 	ldw	r2,8(r2)
 182af10:	e0fffe17 	ldw	r3,-8(fp)
 182af14:	18c00017 	ldw	r3,0(r3)
 182af18:	18c0fa24 	muli	r3,r3,1000
 182af1c:	10c02515 	stw	r3,148(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
 182af20:	00001006 	br	182af64 <lwip_setsockopt_internal+0x308>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(int*)optval);
 182af24:	e0bffb17 	ldw	r2,-20(fp)
 182af28:	10800017 	ldw	r2,0(r2)
 182af2c:	10800217 	ldw	r2,8(r2)
 182af30:	e0fffe17 	ldw	r3,-8(fp)
 182af34:	18c00017 	ldw	r3,0(r3)
 182af38:	18c0fa24 	muli	r3,r3,1000
 182af3c:	10c02615 	stw	r3,152(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
 182af40:	00000806 	br	182af64 <lwip_setsockopt_internal+0x308>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(int*)optval);
 182af44:	e0bffb17 	ldw	r2,-20(fp)
 182af48:	10800017 	ldw	r2,0(r2)
 182af4c:	10800217 	ldw	r2,8(r2)
 182af50:	e0fffe17 	ldw	r3,-8(fp)
 182af54:	18c00017 	ldw	r3,0(r3)
 182af58:	10c02715 	stw	r3,156(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
 182af5c:	00000106 	br	182af64 <lwip_setsockopt_internal+0x308>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 182af60:	0001883a 	nop
    }  /* switch (optname) */
    break;
 182af64:	0001883a 	nop
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
  }  /* switch (level) */
  sys_sem_signal(&sock->conn->op_completed);
 182af68:	e0bffb17 	ldw	r2,-20(fp)
 182af6c:	10800017 	ldw	r2,0(r2)
 182af70:	10800404 	addi	r2,r2,16
 182af74:	1009883a 	mov	r4,r2
 182af78:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 182af7c:	0001883a 	nop
 182af80:	e037883a 	mov	sp,fp
 182af84:	dfc00117 	ldw	ra,4(sp)
 182af88:	df000017 	ldw	fp,0(sp)
 182af8c:	dec00204 	addi	sp,sp,8
 182af90:	f800283a 	ret

0182af94 <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
 182af94:	defff904 	addi	sp,sp,-28
 182af98:	dfc00615 	stw	ra,24(sp)
 182af9c:	df000515 	stw	fp,20(sp)
 182afa0:	df000504 	addi	fp,sp,20
 182afa4:	e13ffd15 	stw	r4,-12(fp)
 182afa8:	e17ffe15 	stw	r5,-8(fp)
 182afac:	e1bfff15 	stw	r6,-4(fp)
  struct lwip_sock *sock = get_socket(s);
 182afb0:	e13ffd17 	ldw	r4,-12(fp)
 182afb4:	1827fe80 	call	1827fe8 <get_socket>
 182afb8:	e0bffc15 	stw	r2,-16(fp)
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  s16_t recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
 182afbc:	e0bffc17 	ldw	r2,-16(fp)
 182afc0:	1000021e 	bne	r2,zero,182afcc <lwip_ioctl+0x38>
    return -1;
 182afc4:	00bfffc4 	movi	r2,-1
 182afc8:	00002606 	br	182b064 <lwip_ioctl+0xd0>
  }

  switch (cmd) {
 182afcc:	e0fffe17 	ldw	r3,-8(fp)
 182afd0:	00a00134 	movhi	r2,32772
 182afd4:	10999f84 	addi	r2,r2,26238
 182afd8:	18801e1e 	bne	r3,r2,182b054 <lwip_ioctl+0xc0>
    sock_set_errno(sock, 0);
    return 0;
#endif /* LWIP_SO_RCVBUF */

  case FIONBIO:
    val = 0;
 182afdc:	e03ffb05 	stb	zero,-20(fp)
    if (argp && *(u32_t*)argp) {
 182afe0:	e0bfff17 	ldw	r2,-4(fp)
 182afe4:	10000526 	beq	r2,zero,182affc <lwip_ioctl+0x68>
 182afe8:	e0bfff17 	ldw	r2,-4(fp)
 182afec:	10800017 	ldw	r2,0(r2)
 182aff0:	10000226 	beq	r2,zero,182affc <lwip_ioctl+0x68>
      val = 1;
 182aff4:	00800044 	movi	r2,1
 182aff8:	e0bffb05 	stb	r2,-20(fp)
    }
    netconn_set_nonblocking(sock->conn, val);
 182affc:	e0bffb03 	ldbu	r2,-20(fp)
 182b000:	10000826 	beq	r2,zero,182b024 <lwip_ioctl+0x90>
 182b004:	e0bffc17 	ldw	r2,-16(fp)
 182b008:	10800017 	ldw	r2,0(r2)
 182b00c:	e0fffc17 	ldw	r3,-16(fp)
 182b010:	18c00017 	ldw	r3,0(r3)
 182b014:	18c00903 	ldbu	r3,36(r3)
 182b018:	18c00094 	ori	r3,r3,2
 182b01c:	10c00905 	stb	r3,36(r2)
 182b020:	00000806 	br	182b044 <lwip_ioctl+0xb0>
 182b024:	e0bffc17 	ldw	r2,-16(fp)
 182b028:	10800017 	ldw	r2,0(r2)
 182b02c:	e0fffc17 	ldw	r3,-16(fp)
 182b030:	18c00017 	ldw	r3,0(r3)
 182b034:	19000903 	ldbu	r4,36(r3)
 182b038:	00ffff44 	movi	r3,-3
 182b03c:	20c6703a 	and	r3,r4,r3
 182b040:	10c00905 	stb	r3,36(r2)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
 182b044:	e0bffc17 	ldw	r2,-16(fp)
 182b048:	10000415 	stw	zero,16(r2)
    return 0;
 182b04c:	0005883a 	mov	r2,zero
 182b050:	00000406 	br	182b064 <lwip_ioctl+0xd0>

  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
 182b054:	e0bffc17 	ldw	r2,-16(fp)
 182b058:	00c01604 	movi	r3,88
 182b05c:	10c00415 	stw	r3,16(r2)
    return -1;
 182b060:	00bfffc4 	movi	r2,-1
  } /* switch (cmd) */
}
 182b064:	e037883a 	mov	sp,fp
 182b068:	dfc00117 	ldw	ra,4(sp)
 182b06c:	df000017 	ldw	fp,0(sp)
 182b070:	dec00204 	addi	sp,sp,8
 182b074:	f800283a 	ret

0182b078 <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
 182b078:	defff904 	addi	sp,sp,-28
 182b07c:	dfc00615 	stw	ra,24(sp)
 182b080:	df000515 	stw	fp,20(sp)
 182b084:	df000504 	addi	fp,sp,20
 182b088:	e13ffd15 	stw	r4,-12(fp)
 182b08c:	e17ffe15 	stw	r5,-8(fp)
 182b090:	e1bfff15 	stw	r6,-4(fp)
  struct lwip_sock *sock = get_socket(s);
 182b094:	e13ffd17 	ldw	r4,-12(fp)
 182b098:	1827fe80 	call	1827fe8 <get_socket>
 182b09c:	e0bffc15 	stw	r2,-16(fp)
  int ret = -1;
 182b0a0:	00bfffc4 	movi	r2,-1
 182b0a4:	e0bffb15 	stw	r2,-20(fp)

  if (!sock || !sock->conn) {
 182b0a8:	e0bffc17 	ldw	r2,-16(fp)
 182b0ac:	10000326 	beq	r2,zero,182b0bc <lwip_fcntl+0x44>
 182b0b0:	e0bffc17 	ldw	r2,-16(fp)
 182b0b4:	10800017 	ldw	r2,0(r2)
 182b0b8:	1000021e 	bne	r2,zero,182b0c4 <lwip_fcntl+0x4c>
    return -1;
 182b0bc:	00bfffc4 	movi	r2,-1
 182b0c0:	00002906 	br	182b168 <lwip_fcntl+0xf0>
  }

  switch (cmd) {
 182b0c4:	e0bffe17 	ldw	r2,-8(fp)
 182b0c8:	10c000e0 	cmpeqi	r3,r2,3
 182b0cc:	1800031e 	bne	r3,zero,182b0dc <lwip_fcntl+0x64>
 182b0d0:	10800120 	cmpeqi	r2,r2,4
 182b0d4:	10000a1e 	bne	r2,zero,182b100 <lwip_fcntl+0x88>
      ret = 0;
    }
    break;
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    break;
 182b0d8:	00002206 	br	182b164 <lwip_fcntl+0xec>
    return -1;
  }

  switch (cmd) {
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
 182b0dc:	e0bffc17 	ldw	r2,-16(fp)
 182b0e0:	10800017 	ldw	r2,0(r2)
 182b0e4:	10800903 	ldbu	r2,36(r2)
 182b0e8:	10803fcc 	andi	r2,r2,255
 182b0ec:	1080008c 	andi	r2,r2,2
 182b0f0:	1004c03a 	cmpne	r2,r2,zero
 182b0f4:	10803fcc 	andi	r2,r2,255
 182b0f8:	e0bffb15 	stw	r2,-20(fp)
    break;
 182b0fc:	00001906 	br	182b164 <lwip_fcntl+0xec>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
 182b100:	e0ffff17 	ldw	r3,-4(fp)
 182b104:	00bfff84 	movi	r2,-2
 182b108:	1884703a 	and	r2,r3,r2
 182b10c:	1000141e 	bne	r2,zero,182b160 <lwip_fcntl+0xe8>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
 182b110:	e0bfff17 	ldw	r2,-4(fp)
 182b114:	1080004c 	andi	r2,r2,1
 182b118:	10000826 	beq	r2,zero,182b13c <lwip_fcntl+0xc4>
 182b11c:	e0bffc17 	ldw	r2,-16(fp)
 182b120:	10800017 	ldw	r2,0(r2)
 182b124:	e0fffc17 	ldw	r3,-16(fp)
 182b128:	18c00017 	ldw	r3,0(r3)
 182b12c:	18c00903 	ldbu	r3,36(r3)
 182b130:	18c00094 	ori	r3,r3,2
 182b134:	10c00905 	stb	r3,36(r2)
 182b138:	00000806 	br	182b15c <lwip_fcntl+0xe4>
 182b13c:	e0bffc17 	ldw	r2,-16(fp)
 182b140:	10800017 	ldw	r2,0(r2)
 182b144:	e0fffc17 	ldw	r3,-16(fp)
 182b148:	18c00017 	ldw	r3,0(r3)
 182b14c:	19000903 	ldbu	r4,36(r3)
 182b150:	00ffff44 	movi	r3,-3
 182b154:	20c6703a 	and	r3,r4,r3
 182b158:	10c00905 	stb	r3,36(r2)
      ret = 0;
 182b15c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 182b160:	0001883a 	nop
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    break;
  }
  return ret;
 182b164:	e0bffb17 	ldw	r2,-20(fp)
}
 182b168:	e037883a 	mov	sp,fp
 182b16c:	dfc00117 	ldw	ra,4(sp)
 182b170:	df000017 	ldw	fp,0(sp)
 182b174:	dec00204 	addi	sp,sp,8
 182b178:	f800283a 	ret

0182b17c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 182b17c:	defffc04 	addi	sp,sp,-16
 182b180:	dfc00315 	stw	ra,12(sp)
 182b184:	df000215 	stw	fp,8(sp)
 182b188:	df000204 	addi	fp,sp,8
 182b18c:	e13fff15 	stw	r4,-4(fp)
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 182b190:	d0a80b17 	ldw	r2,-24532(gp)
 182b194:	10000426 	beq	r2,zero,182b1a8 <tcpip_thread+0x2c>
    tcpip_init_done(tcpip_init_done_arg);
 182b198:	d0a80b17 	ldw	r2,-24532(gp)
 182b19c:	d0e80c17 	ldw	r3,-24528(gp)
 182b1a0:	1809883a 	mov	r4,r3
 182b1a4:	103ee83a 	callr	r2
  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    sys_timeouts_mbox_fetch(&mbox, (void **)&msg);
 182b1a8:	e17ffe04 	addi	r5,fp,-8
 182b1ac:	d1280d04 	addi	r4,gp,-24524
 182b1b0:	18217240 	call	1821724 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
    switch (msg->type) {
 182b1b4:	e0bffe17 	ldw	r2,-8(fp)
 182b1b8:	10800017 	ldw	r2,0(r2)
 182b1bc:	10c001a8 	cmpgeui	r3,r2,6
 182b1c0:	18005c1e 	bne	r3,zero,182b334 <tcpip_thread+0x1b8>
 182b1c4:	100690ba 	slli	r3,r2,2
 182b1c8:	008060f4 	movhi	r2,387
 182b1cc:	10ac7704 	addi	r2,r2,-20004
 182b1d0:	1885883a 	add	r2,r3,r2
 182b1d4:	10800017 	ldw	r2,0(r2)
 182b1d8:	1000683a 	jmp	r2
 182b1dc:	0182b1f4 	movhi	r6,2759
 182b1e0:	0182b218 	cmpnei	r6,zero,2760
 182b1e4:	0182b280 	call	182b28 <__alt_mem_tse_descriptor_memory_0+0x182b28>
 182b1e8:	0182b2bc 	xorhi	r6,zero,2762
 182b1ec:	0182b2ec 	andhi	r6,zero,2763
 182b1f0:	0182b318 	cmpnei	r6,zero,2764
#if LWIP_NETCONN
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
 182b1f4:	e0bffe17 	ldw	r2,-8(fp)
 182b1f8:	10800217 	ldw	r2,8(r2)
 182b1fc:	10800017 	ldw	r2,0(r2)
 182b200:	e0fffe17 	ldw	r3,-8(fp)
 182b204:	18c00217 	ldw	r3,8(r3)
 182b208:	18c00104 	addi	r3,r3,4
 182b20c:	1809883a 	mov	r4,r3
 182b210:	103ee83a 	callr	r2
      break;
 182b214:	00004806 	br	182b338 <tcpip_thread+0x1bc>

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ETHERNET
      if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 182b218:	e0bffe17 	ldw	r2,-8(fp)
 182b21c:	10800317 	ldw	r2,12(r2)
 182b220:	10800e43 	ldbu	r2,57(r2)
 182b224:	10803fcc 	andi	r2,r2,255
 182b228:	1080180c 	andi	r2,r2,96
 182b22c:	10000826 	beq	r2,zero,182b250 <tcpip_thread+0xd4>
        ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
 182b230:	e0bffe17 	ldw	r2,-8(fp)
 182b234:	10c00217 	ldw	r3,8(r2)
 182b238:	e0bffe17 	ldw	r2,-8(fp)
 182b23c:	10800317 	ldw	r2,12(r2)
 182b240:	100b883a 	mov	r5,r2
 182b244:	1809883a 	mov	r4,r3
 182b248:	18241380 	call	1824138 <ethernet_input>
 182b24c:	00000706 	br	182b26c <tcpip_thread+0xf0>
      } else
#endif /* LWIP_ETHERNET */
      {
        ip_input(msg->msg.inp.p, msg->msg.inp.netif);
 182b250:	e0bffe17 	ldw	r2,-8(fp)
 182b254:	10c00217 	ldw	r3,8(r2)
 182b258:	e0bffe17 	ldw	r2,-8(fp)
 182b25c:	10800317 	ldw	r2,12(r2)
 182b260:	100b883a 	mov	r5,r2
 182b264:	1809883a 	mov	r4,r3
 182b268:	1831a000 	call	1831a00 <ip_input>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 182b26c:	e0bffe17 	ldw	r2,-8(fp)
 182b270:	100b883a 	mov	r5,r2
 182b274:	01000284 	movi	r4,10
 182b278:	18341e40 	call	18341e4 <memp_free>
      break;
 182b27c:	00002e06 	br	182b338 <tcpip_thread+0x1bc>
#endif /* LWIP_NETIF_API */

#if LWIP_TCPIP_TIMEOUT
    case TCPIP_MSG_TIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 182b280:	e0bffe17 	ldw	r2,-8(fp)
 182b284:	10c00217 	ldw	r3,8(r2)
 182b288:	e0bffe17 	ldw	r2,-8(fp)
 182b28c:	11000317 	ldw	r4,12(r2)
 182b290:	e0bffe17 	ldw	r2,-8(fp)
 182b294:	10800417 	ldw	r2,16(r2)
 182b298:	100d883a 	mov	r6,r2
 182b29c:	200b883a 	mov	r5,r4
 182b2a0:	1809883a 	mov	r4,r3
 182b2a4:	18214b40 	call	18214b4 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 182b2a8:	e0bffe17 	ldw	r2,-8(fp)
 182b2ac:	100b883a 	mov	r5,r2
 182b2b0:	01000244 	movi	r4,9
 182b2b4:	18341e40 	call	18341e4 <memp_free>
      break;
 182b2b8:	00001f06 	br	182b338 <tcpip_thread+0x1bc>
    case TCPIP_MSG_UNTIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 182b2bc:	e0bffe17 	ldw	r2,-8(fp)
 182b2c0:	10c00317 	ldw	r3,12(r2)
 182b2c4:	e0bffe17 	ldw	r2,-8(fp)
 182b2c8:	10800417 	ldw	r2,16(r2)
 182b2cc:	100b883a 	mov	r5,r2
 182b2d0:	1809883a 	mov	r4,r3
 182b2d4:	18216300 	call	1821630 <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 182b2d8:	e0bffe17 	ldw	r2,-8(fp)
 182b2dc:	100b883a 	mov	r5,r2
 182b2e0:	01000244 	movi	r4,9
 182b2e4:	18341e40 	call	18341e4 <memp_free>
      break;
 182b2e8:	00001306 	br	182b338 <tcpip_thread+0x1bc>
#endif /* LWIP_TCPIP_TIMEOUT */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 182b2ec:	e0bffe17 	ldw	r2,-8(fp)
 182b2f0:	10800217 	ldw	r2,8(r2)
 182b2f4:	e0fffe17 	ldw	r3,-8(fp)
 182b2f8:	18c00317 	ldw	r3,12(r3)
 182b2fc:	1809883a 	mov	r4,r3
 182b300:	103ee83a 	callr	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 182b304:	e0bffe17 	ldw	r2,-8(fp)
 182b308:	100b883a 	mov	r5,r2
 182b30c:	01000244 	movi	r4,9
 182b310:	18341e40 	call	18341e4 <memp_free>
      break;
 182b314:	00000806 	br	182b338 <tcpip_thread+0x1bc>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 182b318:	e0bffe17 	ldw	r2,-8(fp)
 182b31c:	10800217 	ldw	r2,8(r2)
 182b320:	e0fffe17 	ldw	r3,-8(fp)
 182b324:	18c00317 	ldw	r3,12(r3)
 182b328:	1809883a 	mov	r4,r3
 182b32c:	103ee83a 	callr	r2
      break;
 182b330:	00000106 	br	182b338 <tcpip_thread+0x1bc>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
      break;
 182b334:	0001883a 	nop
    }
  }
 182b338:	003f9b06 	br	182b1a8 <__alt_mem_mem_0+0xff80b1a8>

0182b33c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 182b33c:	defffb04 	addi	sp,sp,-20
 182b340:	dfc00415 	stw	ra,16(sp)
 182b344:	df000315 	stw	fp,12(sp)
 182b348:	df000304 	addi	fp,sp,12
 182b34c:	e13ffe15 	stw	r4,-8(fp)
 182b350:	e17fff15 	stw	r5,-4(fp)
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  if (!sys_mbox_valid(&mbox)) {
 182b354:	d0a80d17 	ldw	r2,-24524(gp)
 182b358:	1000021e 	bne	r2,zero,182b364 <tcpip_input+0x28>
    return ERR_VAL;
 182b35c:	00bffe84 	movi	r2,-6
 182b360:	00001d06 	br	182b3d8 <tcpip_input+0x9c>
  }
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 182b364:	01000284 	movi	r4,10
 182b368:	18340280 	call	1834028 <memp_malloc>
 182b36c:	e0bffd15 	stw	r2,-12(fp)
  if (msg == NULL) {
 182b370:	e0bffd17 	ldw	r2,-12(fp)
 182b374:	1000021e 	bne	r2,zero,182b380 <tcpip_input+0x44>
    return ERR_MEM;
 182b378:	00bfffc4 	movi	r2,-1
 182b37c:	00001606 	br	182b3d8 <tcpip_input+0x9c>
  }

  msg->type = TCPIP_MSG_INPKT;
 182b380:	e0bffd17 	ldw	r2,-12(fp)
 182b384:	00c00044 	movi	r3,1
 182b388:	10c00015 	stw	r3,0(r2)
  msg->msg.inp.p = p;
 182b38c:	e0bffd17 	ldw	r2,-12(fp)
 182b390:	e0fffe17 	ldw	r3,-8(fp)
 182b394:	10c00215 	stw	r3,8(r2)
  msg->msg.inp.netif = inp;
 182b398:	e0bffd17 	ldw	r2,-12(fp)
 182b39c:	e0ffff17 	ldw	r3,-4(fp)
 182b3a0:	10c00315 	stw	r3,12(r2)
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 182b3a4:	e17ffd17 	ldw	r5,-12(fp)
 182b3a8:	d1280d04 	addi	r4,gp,-24524
 182b3ac:	181518c0 	call	181518c <sys_mbox_trypost>
 182b3b0:	10803fcc 	andi	r2,r2,255
 182b3b4:	1080201c 	xori	r2,r2,128
 182b3b8:	10bfe004 	addi	r2,r2,-128
 182b3bc:	10000526 	beq	r2,zero,182b3d4 <tcpip_input+0x98>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 182b3c0:	e17ffd17 	ldw	r5,-12(fp)
 182b3c4:	01000284 	movi	r4,10
 182b3c8:	18341e40 	call	18341e4 <memp_free>
    return ERR_MEM;
 182b3cc:	00bfffc4 	movi	r2,-1
 182b3d0:	00000106 	br	182b3d8 <tcpip_input+0x9c>
  }
  return ERR_OK;
 182b3d4:	0005883a 	mov	r2,zero
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 182b3d8:	e037883a 	mov	sp,fp
 182b3dc:	dfc00117 	ldw	ra,4(sp)
 182b3e0:	df000017 	ldw	fp,0(sp)
 182b3e4:	dec00204 	addi	sp,sp,8
 182b3e8:	f800283a 	ret

0182b3ec <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 182b3ec:	defffa04 	addi	sp,sp,-24
 182b3f0:	dfc00515 	stw	ra,20(sp)
 182b3f4:	df000415 	stw	fp,16(sp)
 182b3f8:	df000404 	addi	fp,sp,16
 182b3fc:	e13ffd15 	stw	r4,-12(fp)
 182b400:	e17ffe15 	stw	r5,-8(fp)
 182b404:	3005883a 	mov	r2,r6
 182b408:	e0bfff05 	stb	r2,-4(fp)
  struct tcpip_msg *msg;

  if (sys_mbox_valid(&mbox)) {
 182b40c:	d0a80d17 	ldw	r2,-24524(gp)
 182b410:	10002426 	beq	r2,zero,182b4a4 <tcpip_callback_with_block+0xb8>
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 182b414:	01000244 	movi	r4,9
 182b418:	18340280 	call	1834028 <memp_malloc>
 182b41c:	e0bffc15 	stw	r2,-16(fp)
    if (msg == NULL) {
 182b420:	e0bffc17 	ldw	r2,-16(fp)
 182b424:	1000021e 	bne	r2,zero,182b430 <tcpip_callback_with_block+0x44>
      return ERR_MEM;
 182b428:	00bfffc4 	movi	r2,-1
 182b42c:	00001e06 	br	182b4a8 <tcpip_callback_with_block+0xbc>
    }

    msg->type = TCPIP_MSG_CALLBACK;
 182b430:	e0bffc17 	ldw	r2,-16(fp)
 182b434:	00c00104 	movi	r3,4
 182b438:	10c00015 	stw	r3,0(r2)
    msg->msg.cb.function = function;
 182b43c:	e0bffc17 	ldw	r2,-16(fp)
 182b440:	e0fffd17 	ldw	r3,-12(fp)
 182b444:	10c00215 	stw	r3,8(r2)
    msg->msg.cb.ctx = ctx;
 182b448:	e0bffc17 	ldw	r2,-16(fp)
 182b44c:	e0fffe17 	ldw	r3,-8(fp)
 182b450:	10c00315 	stw	r3,12(r2)
    if (block) {
 182b454:	e0bfff03 	ldbu	r2,-4(fp)
 182b458:	10000426 	beq	r2,zero,182b46c <tcpip_callback_with_block+0x80>
      sys_mbox_post(&mbox, msg);
 182b45c:	e17ffc17 	ldw	r5,-16(fp)
 182b460:	d1280d04 	addi	r4,gp,-24524
 182b464:	181513c0 	call	181513c <sys_mbox_post>
 182b468:	00000c06 	br	182b49c <tcpip_callback_with_block+0xb0>
    } else {
      if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 182b46c:	e17ffc17 	ldw	r5,-16(fp)
 182b470:	d1280d04 	addi	r4,gp,-24524
 182b474:	181518c0 	call	181518c <sys_mbox_trypost>
 182b478:	10803fcc 	andi	r2,r2,255
 182b47c:	1080201c 	xori	r2,r2,128
 182b480:	10bfe004 	addi	r2,r2,-128
 182b484:	10000526 	beq	r2,zero,182b49c <tcpip_callback_with_block+0xb0>
        memp_free(MEMP_TCPIP_MSG_API, msg);
 182b488:	e17ffc17 	ldw	r5,-16(fp)
 182b48c:	01000244 	movi	r4,9
 182b490:	18341e40 	call	18341e4 <memp_free>
        return ERR_MEM;
 182b494:	00bfffc4 	movi	r2,-1
 182b498:	00000306 	br	182b4a8 <tcpip_callback_with_block+0xbc>
      }
    }
    return ERR_OK;
 182b49c:	0005883a 	mov	r2,zero
 182b4a0:	00000106 	br	182b4a8 <tcpip_callback_with_block+0xbc>
  }
  return ERR_VAL;
 182b4a4:	00bffe84 	movi	r2,-6
}
 182b4a8:	e037883a 	mov	sp,fp
 182b4ac:	dfc00117 	ldw	ra,4(sp)
 182b4b0:	df000017 	ldw	fp,0(sp)
 182b4b4:	dec00204 	addi	sp,sp,8
 182b4b8:	f800283a 	ret

0182b4bc <tcpip_timeout>:
 * @param arg argument to pass to timeout function h
 * @return ERR_MEM on memory error, ERR_OK otherwise
 */
err_t
tcpip_timeout(u32_t msecs, sys_timeout_handler h, void *arg)
{
 182b4bc:	defffa04 	addi	sp,sp,-24
 182b4c0:	dfc00515 	stw	ra,20(sp)
 182b4c4:	df000415 	stw	fp,16(sp)
 182b4c8:	df000404 	addi	fp,sp,16
 182b4cc:	e13ffd15 	stw	r4,-12(fp)
 182b4d0:	e17ffe15 	stw	r5,-8(fp)
 182b4d4:	e1bfff15 	stw	r6,-4(fp)
  struct tcpip_msg *msg;

  if (sys_mbox_valid(&mbox)) {
 182b4d8:	d0a80d17 	ldw	r2,-24524(gp)
 182b4dc:	10001826 	beq	r2,zero,182b540 <tcpip_timeout+0x84>
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 182b4e0:	01000244 	movi	r4,9
 182b4e4:	18340280 	call	1834028 <memp_malloc>
 182b4e8:	e0bffc15 	stw	r2,-16(fp)
    if (msg == NULL) {
 182b4ec:	e0bffc17 	ldw	r2,-16(fp)
 182b4f0:	1000021e 	bne	r2,zero,182b4fc <tcpip_timeout+0x40>
      return ERR_MEM;
 182b4f4:	00bfffc4 	movi	r2,-1
 182b4f8:	00001206 	br	182b544 <tcpip_timeout+0x88>
    }

    msg->type = TCPIP_MSG_TIMEOUT;
 182b4fc:	e0bffc17 	ldw	r2,-16(fp)
 182b500:	00c00084 	movi	r3,2
 182b504:	10c00015 	stw	r3,0(r2)
    msg->msg.tmo.msecs = msecs;
 182b508:	e0bffc17 	ldw	r2,-16(fp)
 182b50c:	e0fffd17 	ldw	r3,-12(fp)
 182b510:	10c00215 	stw	r3,8(r2)
    msg->msg.tmo.h = h;
 182b514:	e0bffc17 	ldw	r2,-16(fp)
 182b518:	e0fffe17 	ldw	r3,-8(fp)
 182b51c:	10c00315 	stw	r3,12(r2)
    msg->msg.tmo.arg = arg;
 182b520:	e0bffc17 	ldw	r2,-16(fp)
 182b524:	e0ffff17 	ldw	r3,-4(fp)
 182b528:	10c00415 	stw	r3,16(r2)
    sys_mbox_post(&mbox, msg);
 182b52c:	e17ffc17 	ldw	r5,-16(fp)
 182b530:	d1280d04 	addi	r4,gp,-24524
 182b534:	181513c0 	call	181513c <sys_mbox_post>
    return ERR_OK;
 182b538:	0005883a 	mov	r2,zero
 182b53c:	00000106 	br	182b544 <tcpip_timeout+0x88>
  }
  return ERR_VAL;
 182b540:	00bffe84 	movi	r2,-6
}
 182b544:	e037883a 	mov	sp,fp
 182b548:	dfc00117 	ldw	ra,4(sp)
 182b54c:	df000017 	ldw	fp,0(sp)
 182b550:	dec00204 	addi	sp,sp,8
 182b554:	f800283a 	ret

0182b558 <tcpip_untimeout>:
 * @param arg argument to pass to timeout function h
 * @return ERR_MEM on memory error, ERR_OK otherwise
 */
err_t
tcpip_untimeout(sys_timeout_handler h, void *arg)
{
 182b558:	defffb04 	addi	sp,sp,-20
 182b55c:	dfc00415 	stw	ra,16(sp)
 182b560:	df000315 	stw	fp,12(sp)
 182b564:	df000304 	addi	fp,sp,12
 182b568:	e13ffe15 	stw	r4,-8(fp)
 182b56c:	e17fff15 	stw	r5,-4(fp)
  struct tcpip_msg *msg;

  if (sys_mbox_valid(&mbox)) {
 182b570:	d0a80d17 	ldw	r2,-24524(gp)
 182b574:	10001526 	beq	r2,zero,182b5cc <tcpip_untimeout+0x74>
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 182b578:	01000244 	movi	r4,9
 182b57c:	18340280 	call	1834028 <memp_malloc>
 182b580:	e0bffd15 	stw	r2,-12(fp)
    if (msg == NULL) {
 182b584:	e0bffd17 	ldw	r2,-12(fp)
 182b588:	1000021e 	bne	r2,zero,182b594 <tcpip_untimeout+0x3c>
      return ERR_MEM;
 182b58c:	00bfffc4 	movi	r2,-1
 182b590:	00000f06 	br	182b5d0 <tcpip_untimeout+0x78>
    }

    msg->type = TCPIP_MSG_UNTIMEOUT;
 182b594:	e0bffd17 	ldw	r2,-12(fp)
 182b598:	00c000c4 	movi	r3,3
 182b59c:	10c00015 	stw	r3,0(r2)
    msg->msg.tmo.h = h;
 182b5a0:	e0bffd17 	ldw	r2,-12(fp)
 182b5a4:	e0fffe17 	ldw	r3,-8(fp)
 182b5a8:	10c00315 	stw	r3,12(r2)
    msg->msg.tmo.arg = arg;
 182b5ac:	e0bffd17 	ldw	r2,-12(fp)
 182b5b0:	e0ffff17 	ldw	r3,-4(fp)
 182b5b4:	10c00415 	stw	r3,16(r2)
    sys_mbox_post(&mbox, msg);
 182b5b8:	e17ffd17 	ldw	r5,-12(fp)
 182b5bc:	d1280d04 	addi	r4,gp,-24524
 182b5c0:	181513c0 	call	181513c <sys_mbox_post>
    return ERR_OK;
 182b5c4:	0005883a 	mov	r2,zero
 182b5c8:	00000106 	br	182b5d0 <tcpip_untimeout+0x78>
  }
  return ERR_VAL;
 182b5cc:	00bffe84 	movi	r2,-6
}
 182b5d0:	e037883a 	mov	sp,fp
 182b5d4:	dfc00117 	ldw	ra,4(sp)
 182b5d8:	df000017 	ldw	fp,0(sp)
 182b5dc:	dec00204 	addi	sp,sp,8
 182b5e0:	f800283a 	ret

0182b5e4 <tcpip_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_apimsg(struct api_msg *apimsg)
{
 182b5e4:	defff804 	addi	sp,sp,-32
 182b5e8:	dfc00715 	stw	ra,28(sp)
 182b5ec:	df000615 	stw	fp,24(sp)
 182b5f0:	df000604 	addi	fp,sp,24
 182b5f4:	e13fff15 	stw	r4,-4(fp)
#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->msg.err = ERR_VAL;
#endif
  
  if (sys_mbox_valid(&mbox)) {
 182b5f8:	d0a80d17 	ldw	r2,-24524(gp)
 182b5fc:	10000f26 	beq	r2,zero,182b63c <tcpip_apimsg+0x58>
    msg.type = TCPIP_MSG_API;
 182b600:	e03ffa15 	stw	zero,-24(fp)
    msg.msg.apimsg = apimsg;
 182b604:	e0bfff17 	ldw	r2,-4(fp)
 182b608:	e0bffc15 	stw	r2,-16(fp)
    sys_mbox_post(&mbox, &msg);
 182b60c:	e17ffa04 	addi	r5,fp,-24
 182b610:	d1280d04 	addi	r4,gp,-24524
 182b614:	181513c0 	call	181513c <sys_mbox_post>
    sys_arch_sem_wait(&apimsg->msg.conn->op_completed, 0);
 182b618:	e0bfff17 	ldw	r2,-4(fp)
 182b61c:	10800117 	ldw	r2,4(r2)
 182b620:	10800404 	addi	r2,r2,16
 182b624:	000b883a 	mov	r5,zero
 182b628:	1009883a 	mov	r4,r2
 182b62c:	1814d740 	call	1814d74 <sys_arch_sem_wait>
    return apimsg->msg.err;
 182b630:	e0bfff17 	ldw	r2,-4(fp)
 182b634:	10800203 	ldbu	r2,8(r2)
 182b638:	00000106 	br	182b640 <tcpip_apimsg+0x5c>
  }
  return ERR_VAL;
 182b63c:	00bffe84 	movi	r2,-6
}
 182b640:	e037883a 	mov	sp,fp
 182b644:	dfc00117 	ldw	ra,4(sp)
 182b648:	df000017 	ldw	fp,0(sp)
 182b64c:	dec00204 	addi	sp,sp,8
 182b650:	f800283a 	ret

0182b654 <tcpip_callbackmsg_new>:
 * @param function the function to call
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg* tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
 182b654:	defffb04 	addi	sp,sp,-20
 182b658:	dfc00415 	stw	ra,16(sp)
 182b65c:	df000315 	stw	fp,12(sp)
 182b660:	df000304 	addi	fp,sp,12
 182b664:	e13ffe15 	stw	r4,-8(fp)
 182b668:	e17fff15 	stw	r5,-4(fp)
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 182b66c:	01000244 	movi	r4,9
 182b670:	18340280 	call	1834028 <memp_malloc>
 182b674:	e0bffd15 	stw	r2,-12(fp)
  if (msg == NULL) {
 182b678:	e0bffd17 	ldw	r2,-12(fp)
 182b67c:	1000021e 	bne	r2,zero,182b688 <tcpip_callbackmsg_new+0x34>
    return NULL;
 182b680:	0005883a 	mov	r2,zero
 182b684:	00000a06 	br	182b6b0 <tcpip_callbackmsg_new+0x5c>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
 182b688:	e0bffd17 	ldw	r2,-12(fp)
 182b68c:	00c00144 	movi	r3,5
 182b690:	10c00015 	stw	r3,0(r2)
  msg->msg.cb.function = function;
 182b694:	e0bffd17 	ldw	r2,-12(fp)
 182b698:	e0fffe17 	ldw	r3,-8(fp)
 182b69c:	10c00215 	stw	r3,8(r2)
  msg->msg.cb.ctx = ctx;
 182b6a0:	e0bffd17 	ldw	r2,-12(fp)
 182b6a4:	e0ffff17 	ldw	r3,-4(fp)
 182b6a8:	10c00315 	stw	r3,12(r2)
  return (struct tcpip_callback_msg*)msg;
 182b6ac:	e0bffd17 	ldw	r2,-12(fp)
}
 182b6b0:	e037883a 	mov	sp,fp
 182b6b4:	dfc00117 	ldw	ra,4(sp)
 182b6b8:	df000017 	ldw	fp,0(sp)
 182b6bc:	dec00204 	addi	sp,sp,8
 182b6c0:	f800283a 	ret

0182b6c4 <tcpip_callbackmsg_delete>:
 * Free a callback message allocated by tcpip_callbackmsg_new().
 *
 * @param msg the message to free
 */
void tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
 182b6c4:	defffd04 	addi	sp,sp,-12
 182b6c8:	dfc00215 	stw	ra,8(sp)
 182b6cc:	df000115 	stw	fp,4(sp)
 182b6d0:	df000104 	addi	fp,sp,4
 182b6d4:	e13fff15 	stw	r4,-4(fp)
  memp_free(MEMP_TCPIP_MSG_API, msg);
 182b6d8:	e17fff17 	ldw	r5,-4(fp)
 182b6dc:	01000244 	movi	r4,9
 182b6e0:	18341e40 	call	18341e4 <memp_free>
}
 182b6e4:	0001883a 	nop
 182b6e8:	e037883a 	mov	sp,fp
 182b6ec:	dfc00117 	ldw	ra,4(sp)
 182b6f0:	df000017 	ldw	fp,0(sp)
 182b6f4:	dec00204 	addi	sp,sp,8
 182b6f8:	f800283a 	ret

0182b6fc <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
 182b6fc:	defffd04 	addi	sp,sp,-12
 182b700:	dfc00215 	stw	ra,8(sp)
 182b704:	df000115 	stw	fp,4(sp)
 182b708:	df000104 	addi	fp,sp,4
 182b70c:	e13fff15 	stw	r4,-4(fp)
  if (!sys_mbox_valid(&mbox)) {
 182b710:	d0a80d17 	ldw	r2,-24524(gp)
 182b714:	1000021e 	bne	r2,zero,182b720 <tcpip_trycallback+0x24>
    return ERR_VAL;
 182b718:	00bffe84 	movi	r2,-6
 182b71c:	00000306 	br	182b72c <tcpip_trycallback+0x30>
  }
  return sys_mbox_trypost(&mbox, msg);
 182b720:	e17fff17 	ldw	r5,-4(fp)
 182b724:	d1280d04 	addi	r4,gp,-24524
 182b728:	181518c0 	call	181518c <sys_mbox_trypost>
}
 182b72c:	e037883a 	mov	sp,fp
 182b730:	dfc00117 	ldw	ra,4(sp)
 182b734:	df000017 	ldw	fp,0(sp)
 182b738:	dec00204 	addi	sp,sp,8
 182b73c:	f800283a 	ret

0182b740 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 182b740:	defffb04 	addi	sp,sp,-20
 182b744:	dfc00415 	stw	ra,16(sp)
 182b748:	df000315 	stw	fp,12(sp)
 182b74c:	df000304 	addi	fp,sp,12
 182b750:	e13ffe15 	stw	r4,-8(fp)
 182b754:	e17fff15 	stw	r5,-4(fp)
  lwip_init();
 182b758:	18308440 	call	1830844 <lwip_init>

  tcpip_init_done = initfunc;
 182b75c:	e0bffe17 	ldw	r2,-8(fp)
 182b760:	d0a80b15 	stw	r2,-24532(gp)
  tcpip_init_done_arg = arg;
 182b764:	e0bfff17 	ldw	r2,-4(fp)
 182b768:	d0a80c15 	stw	r2,-24528(gp)
  if(sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 182b76c:	01440004 	movi	r5,4096
 182b770:	d1280d04 	addi	r4,gp,-24524
 182b774:	1814ffc0 	call	1814ffc <sys_mbox_new>
  if(sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 182b778:	008000c4 	movi	r2,3
 182b77c:	d8800015 	stw	r2,0(sp)
 182b780:	01c80004 	movi	r7,8192
 182b784:	000d883a 	mov	r6,zero
 182b788:	014060f4 	movhi	r5,387
 182b78c:	296c5f04 	addi	r5,r5,-20100
 182b790:	01006134 	movhi	r4,388
 182b794:	21053904 	addi	r4,r4,5348
 182b798:	18153540 	call	1815354 <sys_thread_new>
}
 182b79c:	0001883a 	nop
 182b7a0:	e037883a 	mov	sp,fp
 182b7a4:	dfc00117 	ldw	ra,4(sp)
 182b7a8:	df000017 	ldw	fp,0(sp)
 182b7ac:	dec00204 	addi	sp,sp,8
 182b7b0:	f800283a 	ret

0182b7b4 <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
 182b7b4:	defffc04 	addi	sp,sp,-16
 182b7b8:	dfc00315 	stw	ra,12(sp)
 182b7bc:	df000215 	stw	fp,8(sp)
 182b7c0:	df000204 	addi	fp,sp,8
 182b7c4:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *q = (struct pbuf *)p;
 182b7c8:	e0bfff17 	ldw	r2,-4(fp)
 182b7cc:	e0bffe15 	stw	r2,-8(fp)
  pbuf_free(q);
 182b7d0:	e13ffe17 	ldw	r4,-8(fp)
 182b7d4:	181a9040 	call	181a904 <pbuf_free>
}
 182b7d8:	0001883a 	nop
 182b7dc:	e037883a 	mov	sp,fp
 182b7e0:	dfc00117 	ldw	ra,4(sp)
 182b7e4:	df000017 	ldw	fp,0(sp)
 182b7e8:	dec00204 	addi	sp,sp,8
 182b7ec:	f800283a 	ret

0182b7f0 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 182b7f0:	defffd04 	addi	sp,sp,-12
 182b7f4:	dfc00215 	stw	ra,8(sp)
 182b7f8:	df000115 	stw	fp,4(sp)
 182b7fc:	df000104 	addi	fp,sp,4
 182b800:	e13fff15 	stw	r4,-4(fp)
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
 182b804:	000d883a 	mov	r6,zero
 182b808:	e17fff17 	ldw	r5,-4(fp)
 182b80c:	010060f4 	movhi	r4,387
 182b810:	212ded04 	addi	r4,r4,-18508
 182b814:	182b3ec0 	call	182b3ec <tcpip_callback_with_block>
}
 182b818:	e037883a 	mov	sp,fp
 182b81c:	dfc00117 	ldw	ra,4(sp)
 182b820:	df000017 	ldw	fp,0(sp)
 182b824:	dec00204 	addi	sp,sp,8
 182b828:	f800283a 	ret

0182b82c <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
 182b82c:	defffd04 	addi	sp,sp,-12
 182b830:	dfc00215 	stw	ra,8(sp)
 182b834:	df000115 	stw	fp,4(sp)
 182b838:	df000104 	addi	fp,sp,4
 182b83c:	e13fff15 	stw	r4,-4(fp)
  return tcpip_callback_with_block(mem_free, m, 0);
 182b840:	000d883a 	mov	r6,zero
 182b844:	e17fff17 	ldw	r5,-4(fp)
 182b848:	010060b4 	movhi	r4,386
 182b84c:	21242504 	addi	r4,r4,-28524
 182b850:	182b3ec0 	call	182b3ec <tcpip_callback_with_block>
}
 182b854:	e037883a 	mov	sp,fp
 182b858:	dfc00117 	ldw	ra,4(sp)
 182b85c:	df000017 	ldw	fp,0(sp)
 182b860:	dec00204 	addi	sp,sp,8
 182b864:	f800283a 	ret

0182b868 <no_printf>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void no_printf (char *fmt, ...) {}
 182b868:	defffb04 	addi	sp,sp,-20
 182b86c:	df000115 	stw	fp,4(sp)
 182b870:	df000104 	addi	fp,sp,4
 182b874:	e13fff15 	stw	r4,-4(fp)
 182b878:	e1400115 	stw	r5,4(fp)
 182b87c:	e1800215 	stw	r6,8(fp)
 182b880:	e1c00315 	stw	r7,12(fp)
 182b884:	0001883a 	nop
 182b888:	e037883a 	mov	sp,fp
 182b88c:	df000017 	ldw	fp,0(sp)
 182b890:	dec00404 	addi	sp,sp,16
 182b894:	f800283a 	ret

0182b898 <tse_mac_initTransInfo2>:

alt_32 tse_mac_initTransInfo2( tse_mac_trans_info *mi,
                                        alt_u32 mac_base,
                                        alt_32 tx_sgdma,
                                        alt_32 rx_sgdma,
                                        alt_32 cfgflags) {
 182b898:	defffb04 	addi	sp,sp,-20
 182b89c:	df000415 	stw	fp,16(sp)
 182b8a0:	df000404 	addi	fp,sp,16
 182b8a4:	e13ffc15 	stw	r4,-16(fp)
 182b8a8:	e17ffd15 	stw	r5,-12(fp)
 182b8ac:	e1bffe15 	stw	r6,-8(fp)
 182b8b0:	e1ffff15 	stw	r7,-4(fp)
                                              
        mi->base     = (np_tse_mac*)mac_base;
 182b8b4:	e0fffd17 	ldw	r3,-12(fp)
 182b8b8:	e0bffc17 	ldw	r2,-16(fp)
 182b8bc:	10c00015 	stw	r3,0(r2)
        mi->tx_sgdma = (alt_sgdma_dev *)tx_sgdma;
 182b8c0:	e0fffe17 	ldw	r3,-8(fp)
 182b8c4:	e0bffc17 	ldw	r2,-16(fp)
 182b8c8:	10c00115 	stw	r3,4(r2)
        mi->rx_sgdma = (alt_sgdma_dev *)rx_sgdma;
 182b8cc:	e0ffff17 	ldw	r3,-4(fp)
 182b8d0:	e0bffc17 	ldw	r2,-16(fp)
 182b8d4:	10c00215 	stw	r3,8(r2)
        mi->cfgflags = cfgflags;     
 182b8d8:	e0c00117 	ldw	r3,4(fp)
 182b8dc:	e0bffc17 	ldw	r2,-16(fp)
 182b8e0:	10c00415 	stw	r3,16(r2)
        return SUCCESS;
 182b8e4:	0005883a 	mov	r2,zero
}
 182b8e8:	e037883a 	mov	sp,fp
 182b8ec:	df000017 	ldw	fp,0(sp)
 182b8f0:	dec00104 	addi	sp,sp,4
 182b8f4:	f800283a 	ret

0182b8f8 <tse_mac_sTxWrite>:
  * @param txDesc           Pointer to the transmit SGDMA descriptor
  * @return actual bytes transferred if ok, else error (-1)
  */
alt_32 tse_mac_sTxWrite( tse_mac_trans_info *mi, 
                       alt_sgdma_descriptor *txDesc)   
{ 
 182b8f8:	defffa04 	addi	sp,sp,-24
 182b8fc:	dfc00515 	stw	ra,20(sp)
 182b900:	df000415 	stw	fp,16(sp)
 182b904:	df000404 	addi	fp,sp,16
 182b908:	e13ffe15 	stw	r4,-8(fp)
 182b90c:	e17fff15 	stw	r5,-4(fp)

  alt_32 timeout;
  alt_u8 result = 0;
 182b910:	e03ffd05 	stb	zero,-12(fp)
  alt_u16 actualBytesTransferred;
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
 182b914:	e03ffc15 	stw	zero,-16(fp)
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
 182b918:	00000b06 	br	182b948 <tse_mac_sTxWrite+0x50>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
           if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 182b91c:	e0fffc17 	ldw	r3,-16(fp)
 182b920:	18800044 	addi	r2,r3,1
 182b924:	e0bffc15 	stw	r2,-16(fp)
 182b928:	008003f4 	movhi	r2,15
 182b92c:	10909004 	addi	r2,r2,16960
 182b930:	1880051e 	bne	r3,r2,182b948 <tse_mac_sTxWrite+0x50>
            tse_dprintf(4, "WARNING : TX SGDMA Timeout\n");
 182b934:	01006134 	movhi	r4,388
 182b938:	21053d04 	addi	r4,r4,5364
 182b93c:	183c9880 	call	183c988 <puts>
            return ENP_RESOURCE;  // avoid being stuck here
 182b940:	00bffa84 	movi	r2,-22
 182b944:	00002006 	br	182b9c8 <tse_mac_sTxWrite+0xd0>
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
 182b948:	e0bffe17 	ldw	r2,-8(fp)
 182b94c:	10800117 	ldw	r2,4(r2)
 182b950:	10800317 	ldw	r2,12(r2)
 182b954:	10800037 	ldwio	r2,0(r2)
 182b958:	1080040c 	andi	r2,r2,16
 182b95c:	103fef1e 	bne	r2,zero,182b91c <__alt_mem_mem_0+0xff80b91c>
           }
  }

  // Set up the SGDMA
  // Clear the status and control bits of the SGDMA descriptor
  IOWR_ALTERA_AVALON_SGDMA_CONTROL (mi->tx_sgdma->base, 0);
 182b960:	e0bffe17 	ldw	r2,-8(fp)
 182b964:	10800117 	ldw	r2,4(r2)
 182b968:	10800317 	ldw	r2,12(r2)
 182b96c:	10800404 	addi	r2,r2,16
 182b970:	0007883a 	mov	r3,zero
 182b974:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS (mi->tx_sgdma->base, 0xFF);
 182b978:	e0bffe17 	ldw	r2,-8(fp)
 182b97c:	10800117 	ldw	r2,4(r2)
 182b980:	10800317 	ldw	r2,12(r2)
 182b984:	00c03fc4 	movi	r3,255
 182b988:	10c00035 	stwio	r3,0(r2)
  
  // Start SGDMA (blocking call)
  result = alt_avalon_sgdma_do_sync_transfer(
 182b98c:	e0bffe17 	ldw	r2,-8(fp)
 182b990:	10800117 	ldw	r2,4(r2)
 182b994:	e17fff17 	ldw	r5,-4(fp)
 182b998:	1009883a 	mov	r4,r2
 182b99c:	18251600 	call	1825160 <alt_avalon_sgdma_do_sync_transfer>
 182b9a0:	e0bffd05 	stb	r2,-12(fp)
                mi->tx_sgdma, 
                (alt_sgdma_descriptor *) &txDesc[0]);
  
  if (result != 0)
 182b9a4:	e0bffd03 	ldbu	r2,-12(fp)
 182b9a8:	10000226 	beq	r2,zero,182b9b4 <tse_mac_sTxWrite+0xbc>
    return -1;
 182b9ac:	00bfffc4 	movi	r2,-1
 182b9b0:	00000506 	br	182b9c8 <tse_mac_sTxWrite+0xd0>
  
  /* perform cache save read to obtain actual bytes transferred for current sgdma descriptor */
  actualBytesTransferred = IORD_ALTERA_TSE_SGDMA_DESC_ACTUAL_BYTES_TRANSFERRED(&txDesc[0]);
 182b9b4:	e0bfff17 	ldw	r2,-4(fp)
 182b9b8:	10800704 	addi	r2,r2,28
 182b9bc:	10800037 	ldwio	r2,0(r2)
 182b9c0:	e0bffd8d 	sth	r2,-10(fp)

  return actualBytesTransferred;
 182b9c4:	e0bffd8b 	ldhu	r2,-10(fp)
}
 182b9c8:	e037883a 	mov	sp,fp
 182b9cc:	dfc00117 	ldw	ra,4(sp)
 182b9d0:	df000017 	ldw	fp,0(sp)
 182b9d4:	dec00204 	addi	sp,sp,8
 182b9d8:	f800283a 	ret

0182b9dc <tse_mac_aRxRead>:
  *        the actual bytes transferred for current descriptor
  */
alt_32 tse_mac_aRxRead( 
  tse_mac_trans_info *mi,       
  alt_sgdma_descriptor *rxDesc)  
{
 182b9dc:	defffa04 	addi	sp,sp,-24
 182b9e0:	dfc00515 	stw	ra,20(sp)
 182b9e4:	df000415 	stw	fp,16(sp)
 182b9e8:	df000404 	addi	fp,sp,16
 182b9ec:	e13ffe15 	stw	r4,-8(fp)
 182b9f0:	e17fff15 	stw	r5,-4(fp)
  alt_32 timeout;
  
  alt_u8 result = 0;
 182b9f4:	e03ffd05 	stb	zero,-12(fp)
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
 182b9f8:	e03ffc15 	stw	zero,-16(fp)
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
 182b9fc:	00000b06 	br	182ba2c <tse_mac_aRxRead+0x50>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 182ba00:	e0fffc17 	ldw	r3,-16(fp)
 182ba04:	18800044 	addi	r2,r3,1
 182ba08:	e0bffc15 	stw	r2,-16(fp)
 182ba0c:	008003f4 	movhi	r2,15
 182ba10:	10909004 	addi	r2,r2,16960
 182ba14:	1880051e 	bne	r3,r2,182ba2c <tse_mac_aRxRead+0x50>
        tse_dprintf(4, "WARNING : RX SGDMA Timeout\n");
 182ba18:	01006134 	movhi	r4,388
 182ba1c:	21054404 	addi	r4,r4,5392
 182ba20:	183c9880 	call	183c988 <puts>
        return ENP_RESOURCE;  // avoid being stuck here
 182ba24:	00bffa84 	movi	r2,-22
 182ba28:	00001106 	br	182ba70 <tse_mac_aRxRead+0x94>
  alt_u8 result = 0;
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
 182ba2c:	e0bffe17 	ldw	r2,-8(fp)
 182ba30:	10800217 	ldw	r2,8(r2)
 182ba34:	10800317 	ldw	r2,12(r2)
 182ba38:	10800037 	ldwio	r2,0(r2)
 182ba3c:	1080040c 	andi	r2,r2,16
 182ba40:	103fef1e 	bne	r2,zero,182ba00 <__alt_mem_mem_0+0xff80ba00>
    }
  }

 
  // SGDMA operation invoked for RX (non-blocking call)
  result = alt_avalon_sgdma_do_async_transfer(
 182ba44:	e0bffe17 	ldw	r2,-8(fp)
 182ba48:	10800217 	ldw	r2,8(r2)
 182ba4c:	e17fff17 	ldw	r5,-4(fp)
 182ba50:	1009883a 	mov	r4,r2
 182ba54:	182503c0 	call	182503c <alt_avalon_sgdma_do_async_transfer>
 182ba58:	e0bffd05 	stb	r2,-12(fp)
                mi->rx_sgdma, 
                (alt_sgdma_descriptor *) &rxDesc[0]);
  
  if (result != 0)
 182ba5c:	e0bffd03 	ldbu	r2,-12(fp)
 182ba60:	10000226 	beq	r2,zero,182ba6c <tse_mac_aRxRead+0x90>
    return -1;
 182ba64:	00bfffc4 	movi	r2,-1
 182ba68:	00000106 	br	182ba70 <tse_mac_aRxRead+0x94>
 
  return SUCCESS;
 182ba6c:	0005883a 	mov	r2,zero
}
 182ba70:	e037883a 	mov	sp,fp
 182ba74:	dfc00117 	ldw	ra,4(sp)
 182ba78:	df000017 	ldw	fp,0(sp)
 182ba7c:	dec00204 	addi	sp,sp,8
 182ba80:	f800283a 	ret

0182ba84 <tse_mac_SwReset>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_SwReset(np_tse_mac *pmac) 
{
 182ba84:	defffc04 	addi	sp,sp,-16
 182ba88:	df000315 	stw	fp,12(sp)
 182ba8c:	df000304 	addi	fp,sp,12
 182ba90:	e13fff15 	stw	r4,-4(fp)
	alt_32 timeout;
	alt_32 cc;
        
    cc = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 182ba94:	e0bfff17 	ldw	r2,-4(fp)
 182ba98:	10800204 	addi	r2,r2,8
 182ba9c:	10800037 	ldwio	r2,0(r2)
 182baa0:	e0bffe15 	stw	r2,-8(fp)
    
    // set reset and Gig-Speed bits to make sure we have an incoming clock on
    // tx side. If there is a 10/100 PHY, we will still have a valid clock on
    // tx_clk no matter what setting we have here, but on a Gig phy the
    // MII clock may be missing.
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,(ALTERA_TSEMAC_CMD_SW_RESET_MSK | ALTERA_TSEMAC_CMD_ETH_SPEED_MSK));
 182baa4:	e0bfff17 	ldw	r2,-4(fp)
 182baa8:	10800204 	addi	r2,r2,8
 182baac:	00c80204 	movi	r3,8200
 182bab0:	10c00035 	stwio	r3,0(r2)

    
    // wait for completion with fallback in case there is no PHY or it is
    // not connected and hence might not provide any clocks at all.
    timeout=0;
 182bab4:	e03ffd15 	stw	zero,-12(fp)
    while( (IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac) & ALTERA_TSEMAC_CMD_SW_RESET_MSK) != 0 && timeout < ALTERA_TSE_SW_RESET_TIME_OUT_CNT) timeout++;
 182bab8:	00000306 	br	182bac8 <tse_mac_SwReset+0x44>
 182babc:	e0bffd17 	ldw	r2,-12(fp)
 182bac0:	10800044 	addi	r2,r2,1
 182bac4:	e0bffd15 	stw	r2,-12(fp)
 182bac8:	e0bfff17 	ldw	r2,-4(fp)
 182bacc:	10800204 	addi	r2,r2,8
 182bad0:	10800037 	ldwio	r2,0(r2)
 182bad4:	1088000c 	andi	r2,r2,8192
 182bad8:	10000326 	beq	r2,zero,182bae8 <tse_mac_SwReset+0x64>
 182badc:	e0bffd17 	ldw	r2,-12(fp)
 182bae0:	1089c410 	cmplti	r2,r2,10000
 182bae4:	103ff51e 	bne	r2,zero,182babc <__alt_mem_mem_0+0xff80babc>
   
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,cc); // Restore
 182bae8:	e0bfff17 	ldw	r2,-4(fp)
 182baec:	10800204 	addi	r2,r2,8
 182baf0:	e0fffe17 	ldw	r3,-8(fp)
 182baf4:	10c00035 	stwio	r3,0(r2)
    return SUCCESS;
 182baf8:	0005883a 	mov	r2,zero
}
 182bafc:	e037883a 	mov	sp,fp
 182bb00:	df000017 	ldw	fp,0(sp)
 182bb04:	dec00104 	addi	sp,sp,4
 182bb08:	f800283a 	ret

0182bb0c <tse_mac_setMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_setMIImode(np_tse_mac *pmac)
{
 182bb0c:	defffd04 	addi	sp,sp,-12
 182bb10:	df000215 	stw	fp,8(sp)
 182bb14:	df000204 	addi	fp,sp,8
 182bb18:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 182bb1c:	e0bfff17 	ldw	r2,-4(fp)
 182bb20:	10800204 	addi	r2,r2,8
 182bb24:	10800037 	ldwio	r2,0(r2)
 182bb28:	e0bffe15 	stw	r2,-8(fp)
  helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK; 
 182bb2c:	e0fffe17 	ldw	r3,-8(fp)
 182bb30:	00bffdc4 	movi	r2,-9
 182bb34:	1884703a 	and	r2,r3,r2
 182bb38:	e0bffe15 	stw	r2,-8(fp)
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 182bb3c:	e0bfff17 	ldw	r2,-4(fp)
 182bb40:	10800204 	addi	r2,r2,8
 182bb44:	e0fffe17 	ldw	r3,-8(fp)
 182bb48:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 182bb4c:	0005883a 	mov	r2,zero
}
 182bb50:	e037883a 	mov	sp,fp
 182bb54:	df000017 	ldw	fp,0(sp)
 182bb58:	dec00104 	addi	sp,sp,4
 182bb5c:	f800283a 	ret

0182bb60 <tse_mac_setGMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
 */
alt_32 tse_mac_setGMIImode(np_tse_mac *pmac)
{
 182bb60:	defffd04 	addi	sp,sp,-12
 182bb64:	df000215 	stw	fp,8(sp)
 182bb68:	df000204 	addi	fp,sp,8
 182bb6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 182bb70:	e0bfff17 	ldw	r2,-4(fp)
 182bb74:	10800204 	addi	r2,r2,8
 182bb78:	10800037 	ldwio	r2,0(r2)
 182bb7c:	e0bffe15 	stw	r2,-8(fp)
  helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 182bb80:	e0bffe17 	ldw	r2,-8(fp)
 182bb84:	10800214 	ori	r2,r2,8
 182bb88:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 182bb8c:	e0bfff17 	ldw	r2,-4(fp)
 182bb90:	10800204 	addi	r2,r2,8
 182bb94:	e0fffe17 	ldw	r3,-8(fp)
 182bb98:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 182bb9c:	0005883a 	mov	r2,zero
}
 182bba0:	e037883a 	mov	sp,fp
 182bba4:	df000017 	ldw	fp,0(sp)
 182bba8:	dec00104 	addi	sp,sp,4
 182bbac:	f800283a 	ret

0182bbb0 <alt_tse_phy_add_profile>:
 * @param  phy  pointer to alt_tse_phy_profile structure describing PHY registers
 * @return      index of PHY added in PHY profile on success, else return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 * PHY which are currently supported by default :  Marvell 88E1111, Marvell Quad PHY 88E1145, National DP83865, and National DP83848C
 */
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
 182bbb0:	defffb04 	addi	sp,sp,-20
 182bbb4:	dfc00415 	stw	ra,16(sp)
 182bbb8:	df000315 	stw	fp,12(sp)
 182bbbc:	dc000215 	stw	r16,8(sp)
 182bbc0:	df000304 	addi	fp,sp,12
 182bbc4:	e13ffe15 	stw	r4,-8(fp)
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 182bbc8:	e03ffd15 	stw	zero,-12(fp)
 182bbcc:	00002906 	br	182bc74 <alt_tse_phy_add_profile+0xc4>
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
 182bbd0:	008061f4 	movhi	r2,391
 182bbd4:	10a85604 	addi	r2,r2,-24232
 182bbd8:	e0fffd17 	ldw	r3,-12(fp)
 182bbdc:	18c7883a 	add	r3,r3,r3
 182bbe0:	18c7883a 	add	r3,r3,r3
 182bbe4:	10c5883a 	add	r2,r2,r3
 182bbe8:	10800017 	ldw	r2,0(r2)
 182bbec:	10c01417 	ldw	r3,80(r2)
 182bbf0:	e0bffe17 	ldw	r2,-8(fp)
 182bbf4:	10801417 	ldw	r2,80(r2)
 182bbf8:	18801b1e 	bne	r3,r2,182bc68 <alt_tse_phy_add_profile+0xb8>
 182bbfc:	008061f4 	movhi	r2,391
 182bc00:	10a85604 	addi	r2,r2,-24232
 182bc04:	e0fffd17 	ldw	r3,-12(fp)
 182bc08:	18c7883a 	add	r3,r3,r3
 182bc0c:	18c7883a 	add	r3,r3,r3
 182bc10:	10c5883a 	add	r2,r2,r3
 182bc14:	10800017 	ldw	r2,0(r2)
 182bc18:	10c01503 	ldbu	r3,84(r2)
 182bc1c:	e0bffe17 	ldw	r2,-8(fp)
 182bc20:	10801503 	ldbu	r2,84(r2)
 182bc24:	18c03fcc 	andi	r3,r3,255
 182bc28:	10803fcc 	andi	r2,r2,255
 182bc2c:	18800e1e 	bne	r3,r2,182bc68 <alt_tse_phy_add_profile+0xb8>
        {
            tse_dprintf(4, "WARNING : PHY OUI 0x%06x, PHY Model Number 0x%02x already exist in PHY profile\n", (int) phy->oui, phy->model_number);
 182bc30:	e0bffe17 	ldw	r2,-8(fp)
 182bc34:	10801417 	ldw	r2,80(r2)
 182bc38:	1007883a 	mov	r3,r2
 182bc3c:	e0bffe17 	ldw	r2,-8(fp)
 182bc40:	10801503 	ldbu	r2,84(r2)
 182bc44:	10803fcc 	andi	r2,r2,255
 182bc48:	100d883a 	mov	r6,r2
 182bc4c:	180b883a 	mov	r5,r3
 182bc50:	01006134 	movhi	r4,388
 182bc54:	21054b04 	addi	r4,r4,5420
 182bc58:	1800bd80 	call	1800bd8 <printf>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
 182bc5c:	01006134 	movhi	r4,388
 182bc60:	21055f04 	addi	r4,r4,5500
 182bc64:	183c9880 	call	183c988 <puts>
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 182bc68:	e0bffd17 	ldw	r2,-12(fp)
 182bc6c:	10800044 	addi	r2,r2,1
 182bc70:	e0bffd15 	stw	r2,-12(fp)
 182bc74:	d0a80e03 	ldbu	r2,-24520(gp)
 182bc78:	10803fcc 	andi	r2,r2,255
 182bc7c:	e0fffd17 	ldw	r3,-12(fp)
 182bc80:	18bfd316 	blt	r3,r2,182bbd0 <__alt_mem_mem_0+0xff80bbd0>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
 182bc84:	d0a80e03 	ldbu	r2,-24520(gp)
 182bc88:	14003fcc 	andi	r16,r2,255
 182bc8c:	01001904 	movi	r4,100
 182bc90:	183c6bc0 	call	183c6bc <malloc>
 182bc94:	1009883a 	mov	r4,r2
 182bc98:	008061f4 	movhi	r2,391
 182bc9c:	10a85604 	addi	r2,r2,-24232
 182bca0:	8407883a 	add	r3,r16,r16
 182bca4:	18c7883a 	add	r3,r3,r3
 182bca8:	10c5883a 	add	r2,r2,r3
 182bcac:	11000015 	stw	r4,0(r2)
    if(!pphy_profiles[phy_profile_count]) {
 182bcb0:	d0a80e03 	ldbu	r2,-24520(gp)
 182bcb4:	10c03fcc 	andi	r3,r2,255
 182bcb8:	008061f4 	movhi	r2,391
 182bcbc:	10a85604 	addi	r2,r2,-24232
 182bcc0:	18c7883a 	add	r3,r3,r3
 182bcc4:	18c7883a 	add	r3,r3,r3
 182bcc8:	10c5883a 	add	r2,r2,r3
 182bccc:	10800017 	ldw	r2,0(r2)
 182bcd0:	1000081e 	bne	r2,zero,182bcf4 <alt_tse_phy_add_profile+0x144>
        tse_dprintf(1, "ERROR   : Unable to allocate memory for pphy_profile[%d]\n", phy_profile_count);
 182bcd4:	d0a80e03 	ldbu	r2,-24520(gp)
 182bcd8:	10803fcc 	andi	r2,r2,255
 182bcdc:	100b883a 	mov	r5,r2
 182bce0:	01006134 	movhi	r4,388
 182bce4:	21057704 	addi	r4,r4,5596
 182bce8:	1800bd80 	call	1800bd8 <printf>
        return ALTERA_TSE_MALLOC_FAILED;
 182bcec:	00bfffc4 	movi	r2,-1
 182bcf0:	00002206 	br	182bd7c <alt_tse_phy_add_profile+0x1cc>
    }

    /* Store PHY information */
    *pphy_profiles[phy_profile_count] = *phy;
 182bcf4:	d0a80e03 	ldbu	r2,-24520(gp)
 182bcf8:	10c03fcc 	andi	r3,r2,255
 182bcfc:	008061f4 	movhi	r2,391
 182bd00:	10a85604 	addi	r2,r2,-24232
 182bd04:	18c7883a 	add	r3,r3,r3
 182bd08:	18c7883a 	add	r3,r3,r3
 182bd0c:	10c5883a 	add	r2,r2,r3
 182bd10:	10c00017 	ldw	r3,0(r2)
 182bd14:	e0bffe17 	ldw	r2,-8(fp)
 182bd18:	1009883a 	mov	r4,r2
 182bd1c:	00801904 	movi	r2,100
 182bd20:	100d883a 	mov	r6,r2
 182bd24:	200b883a 	mov	r5,r4
 182bd28:	1809883a 	mov	r4,r3
 182bd2c:	180604c0 	call	180604c <memcpy>
    strcpy(pphy_profiles[phy_profile_count]->name, phy->name);
 182bd30:	d0a80e03 	ldbu	r2,-24520(gp)
 182bd34:	10c03fcc 	andi	r3,r2,255
 182bd38:	008061f4 	movhi	r2,391
 182bd3c:	10a85604 	addi	r2,r2,-24232
 182bd40:	18c7883a 	add	r3,r3,r3
 182bd44:	18c7883a 	add	r3,r3,r3
 182bd48:	10c5883a 	add	r2,r2,r3
 182bd4c:	10800017 	ldw	r2,0(r2)
 182bd50:	1007883a 	mov	r3,r2
 182bd54:	e0bffe17 	ldw	r2,-8(fp)
 182bd58:	100b883a 	mov	r5,r2
 182bd5c:	1809883a 	mov	r4,r3
 182bd60:	183cb580 	call	183cb58 <strcpy>
    
    phy_profile_count++;
 182bd64:	d0a80e03 	ldbu	r2,-24520(gp)
 182bd68:	10800044 	addi	r2,r2,1
 182bd6c:	d0a80e05 	stb	r2,-24520(gp)
    
    return phy_profile_count - 1;
 182bd70:	d0a80e03 	ldbu	r2,-24520(gp)
 182bd74:	10803fcc 	andi	r2,r2,255
 182bd78:	10bfffc4 	addi	r2,r2,-1
}
 182bd7c:	e6ffff04 	addi	sp,fp,-4
 182bd80:	dfc00217 	ldw	ra,8(sp)
 182bd84:	df000117 	ldw	fp,4(sp)
 182bd88:	dc000017 	ldw	r16,0(sp)
 182bd8c:	dec00304 	addi	sp,sp,12
 182bd90:	f800283a 	ret

0182bd94 <alt_tse_system_add_sys>:
alt_32 alt_tse_system_add_sys(
	alt_tse_system_mac					*psys_mac,
	alt_tse_system_sgdma				*psys_sgdma,
	alt_tse_system_desc_mem				*psys_mem,
	alt_tse_system_shared_fifo			*psys_shared_fifo,
	alt_tse_system_phy 					*psys_phy ) {
 182bd94:	defff204 	addi	sp,sp,-56
 182bd98:	dfc00d15 	stw	ra,52(sp)
 182bd9c:	df000c15 	stw	fp,48(sp)
 182bda0:	dc000b15 	stw	r16,44(sp)
 182bda4:	df000c04 	addi	fp,sp,48
 182bda8:	e13ffb15 	stw	r4,-20(fp)
 182bdac:	e17ffc15 	stw	r5,-16(fp)
 182bdb0:	e1bffd15 	stw	r6,-12(fp)
 182bdb4:	e1fffe15 	stw	r7,-8(fp)

	int i;
	int loop_end;
	
	alt_tse_system_mac					*pmac	= psys_mac;
 182bdb8:	e0bffb17 	ldw	r2,-20(fp)
 182bdbc:	e0bffa15 	stw	r2,-24(fp)
	alt_tse_system_sgdma				*psgdma	= psys_sgdma;
 182bdc0:	e0bffc17 	ldw	r2,-16(fp)
 182bdc4:	e0bff615 	stw	r2,-40(fp)
	alt_tse_system_desc_mem				*pmem	= psys_mem;
 182bdc8:	e0bffd17 	ldw	r2,-12(fp)
 182bdcc:	e0bff715 	stw	r2,-36(fp)
	alt_tse_system_shared_fifo			*pfifo	= psys_shared_fifo;
 182bdd0:	e0bffe17 	ldw	r2,-8(fp)
 182bdd4:	e0bff815 	stw	r2,-32(fp)
	alt_tse_system_phy 					*pphy	= psys_phy;
 182bdd8:	e0800217 	ldw	r2,8(fp)
 182bddc:	e0bff915 	stw	r2,-28(fp)
	
	static alt_8 tse_system_count = 0;
	
	/* Determine number of loop */
	/* Run at least one for non-multi-channel MAC */
	if(pmac->tse_num_of_channel == 0) {
 182bde0:	e0bffa17 	ldw	r2,-24(fp)
 182bde4:	10800303 	ldbu	r2,12(r2)
 182bde8:	10803fcc 	andi	r2,r2,255
 182bdec:	1000031e 	bne	r2,zero,182bdfc <alt_tse_system_add_sys+0x68>
		loop_end = 1;
 182bdf0:	00800044 	movi	r2,1
 182bdf4:	e0bff515 	stw	r2,-44(fp)
 182bdf8:	00000e06 	br	182be34 <alt_tse_system_add_sys+0xa0>
	}
	else if(pmac->tse_num_of_channel > 0) {
 182bdfc:	e0bffa17 	ldw	r2,-24(fp)
 182be00:	10800303 	ldbu	r2,12(r2)
 182be04:	10803fcc 	andi	r2,r2,255
 182be08:	10000526 	beq	r2,zero,182be20 <alt_tse_system_add_sys+0x8c>
		loop_end = pmac->tse_num_of_channel; 
 182be0c:	e0bffa17 	ldw	r2,-24(fp)
 182be10:	10800303 	ldbu	r2,12(r2)
 182be14:	10803fcc 	andi	r2,r2,255
 182be18:	e0bff515 	stw	r2,-44(fp)
 182be1c:	00000506 	br	182be34 <alt_tse_system_add_sys+0xa0>
	}
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
 182be20:	01006134 	movhi	r4,388
 182be24:	21058604 	addi	r4,r4,5656
 182be28:	183c9880 	call	183c988 <puts>
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
 182be2c:	00bfffc4 	movi	r2,-1
 182be30:	00025106 	br	182c778 <alt_tse_system_add_sys+0x9e4>
	}

	for(i = 0; i < loop_end; i++) {
 182be34:	e03ff415 	stw	zero,-48(fp)
 182be38:	00024b06 	br	182c768 <alt_tse_system_add_sys+0x9d4>
		
		/* Make sure the boundary of array is not exceeded */
		if(tse_system_count >= MAXNETS) {
 182be3c:	d0a80e83 	ldbu	r2,-24518(gp)
 182be40:	10803fcc 	andi	r2,r2,255
 182be44:	1080201c 	xori	r2,r2,128
 182be48:	10bfe004 	addi	r2,r2,-128
 182be4c:	10800210 	cmplti	r2,r2,8
 182be50:	10000c1e 	bne	r2,zero,182be84 <alt_tse_system_add_sys+0xf0>
			tse_dprintf(2, "ERROR   : Number of TSE System added exceed the size of array!\n");
 182be54:	01006134 	movhi	r4,388
 182be58:	21059204 	addi	r4,r4,5704
 182be5c:	183c9880 	call	183c988 <puts>
			tse_dprintf(2, "ERROR   : Size of array = %d, Number of TSE System = %d\n", MAXNETS, tse_system_count);
 182be60:	d0a80e83 	ldbu	r2,-24518(gp)
 182be64:	10803fcc 	andi	r2,r2,255
 182be68:	1080201c 	xori	r2,r2,128
 182be6c:	10bfe004 	addi	r2,r2,-128
 182be70:	100d883a 	mov	r6,r2
 182be74:	01400204 	movi	r5,8
 182be78:	01006134 	movhi	r4,388
 182be7c:	2105a204 	addi	r4,r4,5768
 182be80:	1800bd80 	call	1800bd8 <printf>
		}

		/* Add MAC info to alt_tse_system_info structure */
		if(pmac == 0) {
 182be84:	e0bffa17 	ldw	r2,-24(fp)
 182be88:	1000081e 	bne	r2,zero,182beac <alt_tse_system_add_sys+0x118>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 182be8c:	01006134 	movhi	r4,388
 182be90:	2105b104 	addi	r4,r4,5828
 182be94:	183c9880 	call	183c988 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
 182be98:	01006134 	movhi	r4,388
 182be9c:	2105bb04 	addi	r4,r4,5868
 182bea0:	183c9880 	call	183c988 <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 182bea4:	00bfffc4 	movi	r2,-1
 182bea8:	00023306 	br	182c778 <alt_tse_system_add_sys+0x9e4>
		}		
		
		tse_mac_device[tse_system_count].tse_mac_base 					= pmac->tse_mac_base + (i * 0x400);
 182beac:	d0a80e83 	ldbu	r2,-24518(gp)
 182beb0:	11003fcc 	andi	r4,r2,255
 182beb4:	2100201c 	xori	r4,r4,128
 182beb8:	213fe004 	addi	r4,r4,-128
 182bebc:	e0bffa17 	ldw	r2,-24(fp)
 182bec0:	10800017 	ldw	r2,0(r2)
 182bec4:	e0fff417 	ldw	r3,-48(fp)
 182bec8:	180692ba 	slli	r3,r3,10
 182becc:	10c7883a 	add	r3,r2,r3
 182bed0:	00806134 	movhi	r2,388
 182bed4:	10946304 	addi	r2,r2,20876
 182bed8:	21001224 	muli	r4,r4,72
 182bedc:	1105883a 	add	r2,r2,r4
 182bee0:	10c00015 	stw	r3,0(r2)
		tse_mac_device[tse_system_count].tse_tx_depth 					= pmac->tse_tx_depth;
 182bee4:	d0a80e83 	ldbu	r2,-24518(gp)
 182bee8:	11003fcc 	andi	r4,r2,255
 182beec:	2100201c 	xori	r4,r4,128
 182bef0:	213fe004 	addi	r4,r4,-128
 182bef4:	e0bffa17 	ldw	r2,-24(fp)
 182bef8:	10c0010b 	ldhu	r3,4(r2)
 182befc:	00806134 	movhi	r2,388
 182bf00:	10946304 	addi	r2,r2,20876
 182bf04:	21001224 	muli	r4,r4,72
 182bf08:	1105883a 	add	r2,r2,r4
 182bf0c:	10800104 	addi	r2,r2,4
 182bf10:	10c0000d 	sth	r3,0(r2)
		tse_mac_device[tse_system_count].tse_rx_depth 					= pmac->tse_rx_depth;
 182bf14:	d0a80e83 	ldbu	r2,-24518(gp)
 182bf18:	11003fcc 	andi	r4,r2,255
 182bf1c:	2100201c 	xori	r4,r4,128
 182bf20:	213fe004 	addi	r4,r4,-128
 182bf24:	e0bffa17 	ldw	r2,-24(fp)
 182bf28:	10c0018b 	ldhu	r3,6(r2)
 182bf2c:	00806134 	movhi	r2,388
 182bf30:	10946304 	addi	r2,r2,20876
 182bf34:	21001224 	muli	r4,r4,72
 182bf38:	1105883a 	add	r2,r2,r4
 182bf3c:	10800184 	addi	r2,r2,6
 182bf40:	10c0000d 	sth	r3,0(r2)
		tse_mac_device[tse_system_count].tse_use_mdio 					= pmac->tse_use_mdio;
 182bf44:	d0a80e83 	ldbu	r2,-24518(gp)
 182bf48:	11003fcc 	andi	r4,r2,255
 182bf4c:	2100201c 	xori	r4,r4,128
 182bf50:	213fe004 	addi	r4,r4,-128
 182bf54:	e0bffa17 	ldw	r2,-24(fp)
 182bf58:	10c00203 	ldbu	r3,8(r2)
 182bf5c:	00806134 	movhi	r2,388
 182bf60:	10946304 	addi	r2,r2,20876
 182bf64:	21001224 	muli	r4,r4,72
 182bf68:	1105883a 	add	r2,r2,r4
 182bf6c:	10800204 	addi	r2,r2,8
 182bf70:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_en_maclite 				= pmac->tse_en_maclite;
 182bf74:	d0a80e83 	ldbu	r2,-24518(gp)
 182bf78:	11003fcc 	andi	r4,r2,255
 182bf7c:	2100201c 	xori	r4,r4,128
 182bf80:	213fe004 	addi	r4,r4,-128
 182bf84:	e0bffa17 	ldw	r2,-24(fp)
 182bf88:	10c00243 	ldbu	r3,9(r2)
 182bf8c:	00806134 	movhi	r2,388
 182bf90:	10946304 	addi	r2,r2,20876
 182bf94:	21001224 	muli	r4,r4,72
 182bf98:	1105883a 	add	r2,r2,r4
 182bf9c:	10800244 	addi	r2,r2,9
 182bfa0:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_maclite_gige 				= pmac->tse_maclite_gige;
 182bfa4:	d0a80e83 	ldbu	r2,-24518(gp)
 182bfa8:	11003fcc 	andi	r4,r2,255
 182bfac:	2100201c 	xori	r4,r4,128
 182bfb0:	213fe004 	addi	r4,r4,-128
 182bfb4:	e0bffa17 	ldw	r2,-24(fp)
 182bfb8:	10c00283 	ldbu	r3,10(r2)
 182bfbc:	00806134 	movhi	r2,388
 182bfc0:	10946304 	addi	r2,r2,20876
 182bfc4:	21001224 	muli	r4,r4,72
 182bfc8:	1105883a 	add	r2,r2,r4
 182bfcc:	10800284 	addi	r2,r2,10
 182bfd0:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_multichannel_mac 			= pmac->tse_multichannel_mac;
 182bfd4:	d0a80e83 	ldbu	r2,-24518(gp)
 182bfd8:	11003fcc 	andi	r4,r2,255
 182bfdc:	2100201c 	xori	r4,r4,128
 182bfe0:	213fe004 	addi	r4,r4,-128
 182bfe4:	e0bffa17 	ldw	r2,-24(fp)
 182bfe8:	10c002c3 	ldbu	r3,11(r2)
 182bfec:	00806134 	movhi	r2,388
 182bff0:	10946304 	addi	r2,r2,20876
 182bff4:	21001224 	muli	r4,r4,72
 182bff8:	1105883a 	add	r2,r2,r4
 182bffc:	108002c4 	addi	r2,r2,11
 182c000:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_num_of_channel 			= pmac->tse_num_of_channel;
 182c004:	d0a80e83 	ldbu	r2,-24518(gp)
 182c008:	11003fcc 	andi	r4,r2,255
 182c00c:	2100201c 	xori	r4,r4,128
 182c010:	213fe004 	addi	r4,r4,-128
 182c014:	e0bffa17 	ldw	r2,-24(fp)
 182c018:	10c00303 	ldbu	r3,12(r2)
 182c01c:	00806134 	movhi	r2,388
 182c020:	10946304 	addi	r2,r2,20876
 182c024:	21001224 	muli	r4,r4,72
 182c028:	1105883a 	add	r2,r2,r4
 182c02c:	10800304 	addi	r2,r2,12
 182c030:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_mdio_shared 				= pmac->tse_mdio_shared;
 182c034:	d0a80e83 	ldbu	r2,-24518(gp)
 182c038:	11003fcc 	andi	r4,r2,255
 182c03c:	2100201c 	xori	r4,r4,128
 182c040:	213fe004 	addi	r4,r4,-128
 182c044:	e0bffa17 	ldw	r2,-24(fp)
 182c048:	10c00343 	ldbu	r3,13(r2)
 182c04c:	00806134 	movhi	r2,388
 182c050:	10946304 	addi	r2,r2,20876
 182c054:	21001224 	muli	r4,r4,72
 182c058:	1105883a 	add	r2,r2,r4
 182c05c:	10800344 	addi	r2,r2,13
 182c060:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_number_of_mac_mdio_shared	= pmac->tse_number_of_mac_mdio_shared;
 182c064:	d0a80e83 	ldbu	r2,-24518(gp)
 182c068:	11003fcc 	andi	r4,r2,255
 182c06c:	2100201c 	xori	r4,r4,128
 182c070:	213fe004 	addi	r4,r4,-128
 182c074:	e0bffa17 	ldw	r2,-24(fp)
 182c078:	10c00383 	ldbu	r3,14(r2)
 182c07c:	00806134 	movhi	r2,388
 182c080:	10946304 	addi	r2,r2,20876
 182c084:	21001224 	muli	r4,r4,72
 182c088:	1105883a 	add	r2,r2,r4
 182c08c:	10800384 	addi	r2,r2,14
 182c090:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_pcs_ena 					= pmac->tse_pcs_ena;
 182c094:	d0a80e83 	ldbu	r2,-24518(gp)
 182c098:	11003fcc 	andi	r4,r2,255
 182c09c:	2100201c 	xori	r4,r4,128
 182c0a0:	213fe004 	addi	r4,r4,-128
 182c0a4:	e0bffa17 	ldw	r2,-24(fp)
 182c0a8:	10c003c3 	ldbu	r3,15(r2)
 182c0ac:	00806134 	movhi	r2,388
 182c0b0:	10946304 	addi	r2,r2,20876
 182c0b4:	21001224 	muli	r4,r4,72
 182c0b8:	1105883a 	add	r2,r2,r4
 182c0bc:	108003c4 	addi	r2,r2,15
 182c0c0:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_pcs_sgmii 					= pmac->tse_pcs_sgmii;
 182c0c4:	d0a80e83 	ldbu	r2,-24518(gp)
 182c0c8:	11003fcc 	andi	r4,r2,255
 182c0cc:	2100201c 	xori	r4,r4,128
 182c0d0:	213fe004 	addi	r4,r4,-128
 182c0d4:	e0bffa17 	ldw	r2,-24(fp)
 182c0d8:	10c00403 	ldbu	r3,16(r2)
 182c0dc:	00806134 	movhi	r2,388
 182c0e0:	10946304 	addi	r2,r2,20876
 182c0e4:	21001224 	muli	r4,r4,72
 182c0e8:	1105883a 	add	r2,r2,r4
 182c0ec:	10800404 	addi	r2,r2,16
 182c0f0:	10c00005 	stb	r3,0(r2)
		
		/* Add SGDMA info to alt_tse_system_info structure */
		if(psgdma == 0) {
 182c0f4:	e0bff617 	ldw	r2,-40(fp)
 182c0f8:	10000d1e 	bne	r2,zero,182c130 <alt_tse_system_add_sys+0x39c>
			tse_dprintf(2, "ERROR   : SGDMA system structure == NULL\n");
 182c0fc:	01006134 	movhi	r4,388
 182c100:	2105cd04 	addi	r4,r4,5940
 182c104:	183c9880 	call	183c988 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
 182c108:	d0a80e83 	ldbu	r2,-24518(gp)
 182c10c:	10803fcc 	andi	r2,r2,255
 182c110:	1080201c 	xori	r2,r2,128
 182c114:	10bfe004 	addi	r2,r2,-128
 182c118:	100b883a 	mov	r5,r2
 182c11c:	01006134 	movhi	r4,388
 182c120:	2105d804 	addi	r4,r4,5984
 182c124:	1800bd80 	call	1800bd8 <printf>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 182c128:	00bfffc4 	movi	r2,-1
 182c12c:	00019206 	br	182c778 <alt_tse_system_add_sys+0x9e4>
		}
		
		tse_mac_device[tse_system_count].tse_sgdma_tx = (char *) malloc(strlen(psgdma->tse_sgdma_tx) + 1);
 182c130:	d0a80e83 	ldbu	r2,-24518(gp)
 182c134:	14003fcc 	andi	r16,r2,255
 182c138:	8400201c 	xori	r16,r16,128
 182c13c:	843fe004 	addi	r16,r16,-128
 182c140:	e0bff617 	ldw	r2,-40(fp)
 182c144:	10800017 	ldw	r2,0(r2)
 182c148:	1009883a 	mov	r4,r2
 182c14c:	18075980 	call	1807598 <strlen>
 182c150:	10800044 	addi	r2,r2,1
 182c154:	1009883a 	mov	r4,r2
 182c158:	183c6bc0 	call	183c6bc <malloc>
 182c15c:	1009883a 	mov	r4,r2
 182c160:	00806134 	movhi	r2,388
 182c164:	10946304 	addi	r2,r2,20876
 182c168:	80c01224 	muli	r3,r16,72
 182c16c:	10c5883a 	add	r2,r2,r3
 182c170:	10800504 	addi	r2,r2,20
 182c174:	11000015 	stw	r4,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_tx) {
 182c178:	d0a80e83 	ldbu	r2,-24518(gp)
 182c17c:	10c03fcc 	andi	r3,r2,255
 182c180:	18c0201c 	xori	r3,r3,128
 182c184:	18ffe004 	addi	r3,r3,-128
 182c188:	00806134 	movhi	r2,388
 182c18c:	10946304 	addi	r2,r2,20876
 182c190:	18c01224 	muli	r3,r3,72
 182c194:	10c5883a 	add	r2,r2,r3
 182c198:	10800504 	addi	r2,r2,20
 182c19c:	10800017 	ldw	r2,0(r2)
 182c1a0:	10000a1e 	bne	r2,zero,182c1cc <alt_tse_system_add_sys+0x438>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_tx\n", tse_system_count);
 182c1a4:	d0a80e83 	ldbu	r2,-24518(gp)
 182c1a8:	10803fcc 	andi	r2,r2,255
 182c1ac:	1080201c 	xori	r2,r2,128
 182c1b0:	10bfe004 	addi	r2,r2,-128
 182c1b4:	100b883a 	mov	r5,r2
 182c1b8:	01006134 	movhi	r4,388
 182c1bc:	2105f004 	addi	r4,r4,6080
 182c1c0:	1800bd80 	call	1800bd8 <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
 182c1c4:	00bfffc4 	movi	r2,-1
 182c1c8:	00016b06 	br	182c778 <alt_tse_system_add_sys+0x9e4>
	    }   
		strcpy(tse_mac_device[tse_system_count].tse_sgdma_tx, psgdma->tse_sgdma_tx);
 182c1cc:	d0a80e83 	ldbu	r2,-24518(gp)
 182c1d0:	10c03fcc 	andi	r3,r2,255
 182c1d4:	18c0201c 	xori	r3,r3,128
 182c1d8:	18ffe004 	addi	r3,r3,-128
 182c1dc:	00806134 	movhi	r2,388
 182c1e0:	10946304 	addi	r2,r2,20876
 182c1e4:	18c01224 	muli	r3,r3,72
 182c1e8:	10c5883a 	add	r2,r2,r3
 182c1ec:	10800504 	addi	r2,r2,20
 182c1f0:	10c00017 	ldw	r3,0(r2)
 182c1f4:	e0bff617 	ldw	r2,-40(fp)
 182c1f8:	10800017 	ldw	r2,0(r2)
 182c1fc:	100b883a 	mov	r5,r2
 182c200:	1809883a 	mov	r4,r3
 182c204:	183cb580 	call	183cb58 <strcpy>
		
		tse_mac_device[tse_system_count].tse_sgdma_rx = (char *) malloc(strlen(psgdma->tse_sgdma_rx) + 1);
 182c208:	d0a80e83 	ldbu	r2,-24518(gp)
 182c20c:	14003fcc 	andi	r16,r2,255
 182c210:	8400201c 	xori	r16,r16,128
 182c214:	843fe004 	addi	r16,r16,-128
 182c218:	e0bff617 	ldw	r2,-40(fp)
 182c21c:	10800117 	ldw	r2,4(r2)
 182c220:	1009883a 	mov	r4,r2
 182c224:	18075980 	call	1807598 <strlen>
 182c228:	10800044 	addi	r2,r2,1
 182c22c:	1009883a 	mov	r4,r2
 182c230:	183c6bc0 	call	183c6bc <malloc>
 182c234:	1009883a 	mov	r4,r2
 182c238:	00806134 	movhi	r2,388
 182c23c:	10946304 	addi	r2,r2,20876
 182c240:	80c01224 	muli	r3,r16,72
 182c244:	10c5883a 	add	r2,r2,r3
 182c248:	10800604 	addi	r2,r2,24
 182c24c:	11000015 	stw	r4,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_rx) {
 182c250:	d0a80e83 	ldbu	r2,-24518(gp)
 182c254:	10c03fcc 	andi	r3,r2,255
 182c258:	18c0201c 	xori	r3,r3,128
 182c25c:	18ffe004 	addi	r3,r3,-128
 182c260:	00806134 	movhi	r2,388
 182c264:	10946304 	addi	r2,r2,20876
 182c268:	18c01224 	muli	r3,r3,72
 182c26c:	10c5883a 	add	r2,r2,r3
 182c270:	10800604 	addi	r2,r2,24
 182c274:	10800017 	ldw	r2,0(r2)
 182c278:	10000a1e 	bne	r2,zero,182c2a4 <alt_tse_system_add_sys+0x510>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_rx\n", tse_system_count);
 182c27c:	d0a80e83 	ldbu	r2,-24518(gp)
 182c280:	10803fcc 	andi	r2,r2,255
 182c284:	1080201c 	xori	r2,r2,128
 182c288:	10bfe004 	addi	r2,r2,-128
 182c28c:	100b883a 	mov	r5,r2
 182c290:	01006134 	movhi	r4,388
 182c294:	21060304 	addi	r4,r4,6156
 182c298:	1800bd80 	call	1800bd8 <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
 182c29c:	00bfffc4 	movi	r2,-1
 182c2a0:	00013506 	br	182c778 <alt_tse_system_add_sys+0x9e4>
	    }
	    strcpy(tse_mac_device[tse_system_count].tse_sgdma_rx, psgdma->tse_sgdma_rx);
 182c2a4:	d0a80e83 	ldbu	r2,-24518(gp)
 182c2a8:	10c03fcc 	andi	r3,r2,255
 182c2ac:	18c0201c 	xori	r3,r3,128
 182c2b0:	18ffe004 	addi	r3,r3,-128
 182c2b4:	00806134 	movhi	r2,388
 182c2b8:	10946304 	addi	r2,r2,20876
 182c2bc:	18c01224 	muli	r3,r3,72
 182c2c0:	10c5883a 	add	r2,r2,r3
 182c2c4:	10800604 	addi	r2,r2,24
 182c2c8:	10c00017 	ldw	r3,0(r2)
 182c2cc:	e0bff617 	ldw	r2,-40(fp)
 182c2d0:	10800117 	ldw	r2,4(r2)
 182c2d4:	100b883a 	mov	r5,r2
 182c2d8:	1809883a 	mov	r4,r3
 182c2dc:	183cb580 	call	183cb58 <strcpy>
	    
		tse_mac_device[tse_system_count].tse_sgdma_rx_irq = psgdma->tse_sgdma_rx_irq;
 182c2e0:	d0a80e83 	ldbu	r2,-24518(gp)
 182c2e4:	11003fcc 	andi	r4,r2,255
 182c2e8:	2100201c 	xori	r4,r4,128
 182c2ec:	213fe004 	addi	r4,r4,-128
 182c2f0:	e0bff617 	ldw	r2,-40(fp)
 182c2f4:	10c0020b 	ldhu	r3,8(r2)
 182c2f8:	00806134 	movhi	r2,388
 182c2fc:	10946304 	addi	r2,r2,20876
 182c300:	21001224 	muli	r4,r4,72
 182c304:	1105883a 	add	r2,r2,r4
 182c308:	10800704 	addi	r2,r2,28
 182c30c:	10c0000d 	sth	r3,0(r2)
		
		/* Add descriptor memory info to alt_tse_system_info structure */
		if(pmem == 0) {
 182c310:	e0bff717 	ldw	r2,-36(fp)
 182c314:	1000151e 	bne	r2,zero,182c36c <alt_tse_system_add_sys+0x5d8>
			tse_mac_device[tse_system_count].ext_desc_mem	= TSE_INT_DESC_MEM;
 182c318:	d0a80e83 	ldbu	r2,-24518(gp)
 182c31c:	10c03fcc 	andi	r3,r2,255
 182c320:	18c0201c 	xori	r3,r3,128
 182c324:	18ffe004 	addi	r3,r3,-128
 182c328:	00806134 	movhi	r2,388
 182c32c:	10946304 	addi	r2,r2,20876
 182c330:	18c01224 	muli	r3,r3,72
 182c334:	10c5883a 	add	r2,r2,r3
 182c338:	10800784 	addi	r2,r2,30
 182c33c:	10000005 	stb	zero,0(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= TSE_INT_DESC_MEM;
 182c340:	d0a80e83 	ldbu	r2,-24518(gp)
 182c344:	10c03fcc 	andi	r3,r2,255
 182c348:	18c0201c 	xori	r3,r3,128
 182c34c:	18ffe004 	addi	r3,r3,-128
 182c350:	00806134 	movhi	r2,388
 182c354:	10946304 	addi	r2,r2,20876
 182c358:	18c01224 	muli	r3,r3,72
 182c35c:	10c5883a 	add	r2,r2,r3
 182c360:	10800804 	addi	r2,r2,32
 182c364:	10000015 	stw	zero,0(r2)
 182c368:	00001806 	br	182c3cc <alt_tse_system_add_sys+0x638>
		}
		else {
			tse_mac_device[tse_system_count].ext_desc_mem	= pmem->ext_desc_mem;
 182c36c:	d0a80e83 	ldbu	r2,-24518(gp)
 182c370:	11003fcc 	andi	r4,r2,255
 182c374:	2100201c 	xori	r4,r4,128
 182c378:	213fe004 	addi	r4,r4,-128
 182c37c:	e0bff717 	ldw	r2,-36(fp)
 182c380:	10c00003 	ldbu	r3,0(r2)
 182c384:	00806134 	movhi	r2,388
 182c388:	10946304 	addi	r2,r2,20876
 182c38c:	21001224 	muli	r4,r4,72
 182c390:	1105883a 	add	r2,r2,r4
 182c394:	10800784 	addi	r2,r2,30
 182c398:	10c00005 	stb	r3,0(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= pmem->desc_mem_base;
 182c39c:	d0a80e83 	ldbu	r2,-24518(gp)
 182c3a0:	11003fcc 	andi	r4,r2,255
 182c3a4:	2100201c 	xori	r4,r4,128
 182c3a8:	213fe004 	addi	r4,r4,-128
 182c3ac:	e0bff717 	ldw	r2,-36(fp)
 182c3b0:	10c00117 	ldw	r3,4(r2)
 182c3b4:	00806134 	movhi	r2,388
 182c3b8:	10946304 	addi	r2,r2,20876
 182c3bc:	21001224 	muli	r4,r4,72
 182c3c0:	1105883a 	add	r2,r2,r4
 182c3c4:	10800804 	addi	r2,r2,32
 182c3c8:	10c00015 	stw	r3,0(r2)
		}
		
		/* Add shared fifo info to alt_tse_system_info structure */
		if(pfifo == 0) {
 182c3cc:	e0bff817 	ldw	r2,-32(fp)
 182c3d0:	1000471e 	bne	r2,zero,182c4f0 <alt_tse_system_add_sys+0x75c>
			tse_mac_device[tse_system_count].use_shared_fifo                = TSE_NO_SHARED_FIFO;
 182c3d4:	d0a80e83 	ldbu	r2,-24518(gp)
 182c3d8:	10c03fcc 	andi	r3,r2,255
 182c3dc:	18c0201c 	xori	r3,r3,128
 182c3e0:	18ffe004 	addi	r3,r3,-128
 182c3e4:	00806134 	movhi	r2,388
 182c3e8:	10946304 	addi	r2,r2,20876
 182c3ec:	18c01224 	muli	r3,r3,72
 182c3f0:	10c5883a 	add	r2,r2,r3
 182c3f4:	10800904 	addi	r2,r2,36
 182c3f8:	10000005 	stb	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= TSE_NO_SHARED_FIFO;
 182c3fc:	d0a80e83 	ldbu	r2,-24518(gp)
 182c400:	10c03fcc 	andi	r3,r2,255
 182c404:	18c0201c 	xori	r3,r3,128
 182c408:	18ffe004 	addi	r3,r3,-128
 182c40c:	00806134 	movhi	r2,388
 182c410:	10946304 	addi	r2,r2,20876
 182c414:	18c01224 	muli	r3,r3,72
 182c418:	10c5883a 	add	r2,r2,r3
 182c41c:	10800a04 	addi	r2,r2,40
 182c420:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= TSE_NO_SHARED_FIFO;
 182c424:	d0a80e83 	ldbu	r2,-24518(gp)
 182c428:	10c03fcc 	andi	r3,r2,255
 182c42c:	18c0201c 	xori	r3,r3,128
 182c430:	18ffe004 	addi	r3,r3,-128
 182c434:	00806134 	movhi	r2,388
 182c438:	10946304 	addi	r2,r2,20876
 182c43c:	18c01224 	muli	r3,r3,72
 182c440:	10c5883a 	add	r2,r2,r3
 182c444:	10800b04 	addi	r2,r2,44
 182c448:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = TSE_NO_SHARED_FIFO;
 182c44c:	d0a80e83 	ldbu	r2,-24518(gp)
 182c450:	10c03fcc 	andi	r3,r2,255
 182c454:	18c0201c 	xori	r3,r3,128
 182c458:	18ffe004 	addi	r3,r3,-128
 182c45c:	00806134 	movhi	r2,388
 182c460:	10946304 	addi	r2,r2,20876
 182c464:	18c01224 	muli	r3,r3,72
 182c468:	10c5883a 	add	r2,r2,r3
 182c46c:	10800c04 	addi	r2,r2,48
 182c470:	10000015 	stw	zero,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= TSE_NO_SHARED_FIFO;
 182c474:	d0a80e83 	ldbu	r2,-24518(gp)
 182c478:	10c03fcc 	andi	r3,r2,255
 182c47c:	18c0201c 	xori	r3,r3,128
 182c480:	18ffe004 	addi	r3,r3,-128
 182c484:	00806134 	movhi	r2,388
 182c488:	10946304 	addi	r2,r2,20876
 182c48c:	18c01224 	muli	r3,r3,72
 182c490:	10c5883a 	add	r2,r2,r3
 182c494:	10800d04 	addi	r2,r2,52
 182c498:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= TSE_NO_SHARED_FIFO;
 182c49c:	d0a80e83 	ldbu	r2,-24518(gp)
 182c4a0:	10c03fcc 	andi	r3,r2,255
 182c4a4:	18c0201c 	xori	r3,r3,128
 182c4a8:	18ffe004 	addi	r3,r3,-128
 182c4ac:	00806134 	movhi	r2,388
 182c4b0:	10946304 	addi	r2,r2,20876
 182c4b4:	18c01224 	muli	r3,r3,72
 182c4b8:	10c5883a 	add	r2,r2,r3
 182c4bc:	10800e04 	addi	r2,r2,56
 182c4c0:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = TSE_NO_SHARED_FIFO;
 182c4c4:	d0a80e83 	ldbu	r2,-24518(gp)
 182c4c8:	10c03fcc 	andi	r3,r2,255
 182c4cc:	18c0201c 	xori	r3,r3,128
 182c4d0:	18ffe004 	addi	r3,r3,-128
 182c4d4:	00806134 	movhi	r2,388
 182c4d8:	10946304 	addi	r2,r2,20876
 182c4dc:	18c01224 	muli	r3,r3,72
 182c4e0:	10c5883a 	add	r2,r2,r3
 182c4e4:	10800f04 	addi	r2,r2,60
 182c4e8:	10000015 	stw	zero,0(r2)
 182c4ec:	00005406 	br	182c640 <alt_tse_system_add_sys+0x8ac>
		}
		else {
			tse_mac_device[tse_system_count].use_shared_fifo                = pfifo->use_shared_fifo;
 182c4f0:	d0a80e83 	ldbu	r2,-24518(gp)
 182c4f4:	11003fcc 	andi	r4,r2,255
 182c4f8:	2100201c 	xori	r4,r4,128
 182c4fc:	213fe004 	addi	r4,r4,-128
 182c500:	e0bff817 	ldw	r2,-32(fp)
 182c504:	10c00003 	ldbu	r3,0(r2)
 182c508:	00806134 	movhi	r2,388
 182c50c:	10946304 	addi	r2,r2,20876
 182c510:	21001224 	muli	r4,r4,72
 182c514:	1105883a 	add	r2,r2,r4
 182c518:	10800904 	addi	r2,r2,36
 182c51c:	10c00005 	stb	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= pfifo->tse_shared_fifo_tx_ctrl_base;
 182c520:	d0a80e83 	ldbu	r2,-24518(gp)
 182c524:	11003fcc 	andi	r4,r2,255
 182c528:	2100201c 	xori	r4,r4,128
 182c52c:	213fe004 	addi	r4,r4,-128
 182c530:	e0bff817 	ldw	r2,-32(fp)
 182c534:	10c00117 	ldw	r3,4(r2)
 182c538:	00806134 	movhi	r2,388
 182c53c:	10946304 	addi	r2,r2,20876
 182c540:	21001224 	muli	r4,r4,72
 182c544:	1105883a 	add	r2,r2,r4
 182c548:	10800a04 	addi	r2,r2,40
 182c54c:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= pfifo->tse_shared_fifo_tx_stat_base;
 182c550:	d0a80e83 	ldbu	r2,-24518(gp)
 182c554:	11003fcc 	andi	r4,r2,255
 182c558:	2100201c 	xori	r4,r4,128
 182c55c:	213fe004 	addi	r4,r4,-128
 182c560:	e0bff817 	ldw	r2,-32(fp)
 182c564:	10c00217 	ldw	r3,8(r2)
 182c568:	00806134 	movhi	r2,388
 182c56c:	10946304 	addi	r2,r2,20876
 182c570:	21001224 	muli	r4,r4,72
 182c574:	1105883a 	add	r2,r2,r4
 182c578:	10800b04 	addi	r2,r2,44
 182c57c:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = pfifo->tse_shared_fifo_tx_depth;
 182c580:	d0a80e83 	ldbu	r2,-24518(gp)
 182c584:	11003fcc 	andi	r4,r2,255
 182c588:	2100201c 	xori	r4,r4,128
 182c58c:	213fe004 	addi	r4,r4,-128
 182c590:	e0bff817 	ldw	r2,-32(fp)
 182c594:	10c00317 	ldw	r3,12(r2)
 182c598:	00806134 	movhi	r2,388
 182c59c:	10946304 	addi	r2,r2,20876
 182c5a0:	21001224 	muli	r4,r4,72
 182c5a4:	1105883a 	add	r2,r2,r4
 182c5a8:	10800c04 	addi	r2,r2,48
 182c5ac:	10c00015 	stw	r3,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= pfifo->tse_shared_fifo_rx_ctrl_base;
 182c5b0:	d0a80e83 	ldbu	r2,-24518(gp)
 182c5b4:	11003fcc 	andi	r4,r2,255
 182c5b8:	2100201c 	xori	r4,r4,128
 182c5bc:	213fe004 	addi	r4,r4,-128
 182c5c0:	e0bff817 	ldw	r2,-32(fp)
 182c5c4:	10c00417 	ldw	r3,16(r2)
 182c5c8:	00806134 	movhi	r2,388
 182c5cc:	10946304 	addi	r2,r2,20876
 182c5d0:	21001224 	muli	r4,r4,72
 182c5d4:	1105883a 	add	r2,r2,r4
 182c5d8:	10800d04 	addi	r2,r2,52
 182c5dc:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= pfifo->tse_shared_fifo_rx_stat_base;
 182c5e0:	d0a80e83 	ldbu	r2,-24518(gp)
 182c5e4:	11003fcc 	andi	r4,r2,255
 182c5e8:	2100201c 	xori	r4,r4,128
 182c5ec:	213fe004 	addi	r4,r4,-128
 182c5f0:	e0bff817 	ldw	r2,-32(fp)
 182c5f4:	10c00517 	ldw	r3,20(r2)
 182c5f8:	00806134 	movhi	r2,388
 182c5fc:	10946304 	addi	r2,r2,20876
 182c600:	21001224 	muli	r4,r4,72
 182c604:	1105883a 	add	r2,r2,r4
 182c608:	10800e04 	addi	r2,r2,56
 182c60c:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = pfifo->tse_shared_fifo_rx_depth;
 182c610:	d0a80e83 	ldbu	r2,-24518(gp)
 182c614:	11003fcc 	andi	r4,r2,255
 182c618:	2100201c 	xori	r4,r4,128
 182c61c:	213fe004 	addi	r4,r4,-128
 182c620:	e0bff817 	ldw	r2,-32(fp)
 182c624:	10c00617 	ldw	r3,24(r2)
 182c628:	00806134 	movhi	r2,388
 182c62c:	10946304 	addi	r2,r2,20876
 182c630:	21001224 	muli	r4,r4,72
 182c634:	1105883a 	add	r2,r2,r4
 182c638:	10800f04 	addi	r2,r2,60
 182c63c:	10c00015 	stw	r3,0(r2)
		}
		
		/* Add PHY info to alt_tse_system_info structure */
		if(pphy == 0) {
 182c640:	e0bff917 	ldw	r2,-28(fp)
 182c644:	1000161e 	bne	r2,zero,182c6a0 <alt_tse_system_add_sys+0x90c>
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= TSE_PHY_AUTO_ADDRESS;
 182c648:	d0a80e83 	ldbu	r2,-24518(gp)
 182c64c:	10c03fcc 	andi	r3,r2,255
 182c650:	18c0201c 	xori	r3,r3,128
 182c654:	18ffe004 	addi	r3,r3,-128
 182c658:	00806134 	movhi	r2,388
 182c65c:	10946304 	addi	r2,r2,20876
 182c660:	18c01224 	muli	r3,r3,72
 182c664:	10c5883a 	add	r2,r2,r3
 182c668:	10801004 	addi	r2,r2,64
 182c66c:	00ffffc4 	movi	r3,-1
 182c670:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= 0;
 182c674:	d0a80e83 	ldbu	r2,-24518(gp)
 182c678:	10c03fcc 	andi	r3,r2,255
 182c67c:	18c0201c 	xori	r3,r3,128
 182c680:	18ffe004 	addi	r3,r3,-128
 182c684:	00806134 	movhi	r2,388
 182c688:	10946304 	addi	r2,r2,20876
 182c68c:	18c01224 	muli	r3,r3,72
 182c690:	10c5883a 	add	r2,r2,r3
 182c694:	10801104 	addi	r2,r2,68
 182c698:	10000015 	stw	zero,0(r2)
 182c69c:	00001806 	br	182c700 <alt_tse_system_add_sys+0x96c>
		}
		else {
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= pphy->tse_phy_mdio_address;
 182c6a0:	d0a80e83 	ldbu	r2,-24518(gp)
 182c6a4:	11003fcc 	andi	r4,r2,255
 182c6a8:	2100201c 	xori	r4,r4,128
 182c6ac:	213fe004 	addi	r4,r4,-128
 182c6b0:	e0bff917 	ldw	r2,-28(fp)
 182c6b4:	10c00017 	ldw	r3,0(r2)
 182c6b8:	00806134 	movhi	r2,388
 182c6bc:	10946304 	addi	r2,r2,20876
 182c6c0:	21001224 	muli	r4,r4,72
 182c6c4:	1105883a 	add	r2,r2,r4
 182c6c8:	10801004 	addi	r2,r2,64
 182c6cc:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= pphy->tse_phy_cfg;
 182c6d0:	d0a80e83 	ldbu	r2,-24518(gp)
 182c6d4:	11003fcc 	andi	r4,r2,255
 182c6d8:	2100201c 	xori	r4,r4,128
 182c6dc:	213fe004 	addi	r4,r4,-128
 182c6e0:	e0bff917 	ldw	r2,-28(fp)
 182c6e4:	10c00117 	ldw	r3,4(r2)
 182c6e8:	00806134 	movhi	r2,388
 182c6ec:	10946304 	addi	r2,r2,20876
 182c6f0:	21001224 	muli	r4,r4,72
 182c6f4:	1105883a 	add	r2,r2,r4
 182c6f8:	10801104 	addi	r2,r2,68
 182c6fc:	10c00015 	stw	r3,0(r2)
		}
		
		/* Point to next structure */
		psgdma++;
 182c700:	e0bff617 	ldw	r2,-40(fp)
 182c704:	10800304 	addi	r2,r2,12
 182c708:	e0bff615 	stw	r2,-40(fp)
		if(pmem) pmem++;
 182c70c:	e0bff717 	ldw	r2,-36(fp)
 182c710:	10000326 	beq	r2,zero,182c720 <alt_tse_system_add_sys+0x98c>
 182c714:	e0bff717 	ldw	r2,-36(fp)
 182c718:	10800204 	addi	r2,r2,8
 182c71c:	e0bff715 	stw	r2,-36(fp)
		if(pfifo) pfifo++;
 182c720:	e0bff817 	ldw	r2,-32(fp)
 182c724:	10000326 	beq	r2,zero,182c734 <alt_tse_system_add_sys+0x9a0>
 182c728:	e0bff817 	ldw	r2,-32(fp)
 182c72c:	10800704 	addi	r2,r2,28
 182c730:	e0bff815 	stw	r2,-32(fp)
		if(pphy) pphy++;
 182c734:	e0bff917 	ldw	r2,-28(fp)
 182c738:	10000326 	beq	r2,zero,182c748 <alt_tse_system_add_sys+0x9b4>
 182c73c:	e0bff917 	ldw	r2,-28(fp)
 182c740:	10800204 	addi	r2,r2,8
 182c744:	e0bff915 	stw	r2,-28(fp)
		
		tse_system_count++;
 182c748:	d0a80e83 	ldbu	r2,-24518(gp)
 182c74c:	10800044 	addi	r2,r2,1
 182c750:	d0a80e85 	stb	r2,-24518(gp)
		max_mac_system = tse_system_count;
 182c754:	d0a80e83 	ldbu	r2,-24518(gp)
 182c758:	d0a01d05 	stb	r2,-32652(gp)
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
	}

	for(i = 0; i < loop_end; i++) {
 182c75c:	e0bff417 	ldw	r2,-48(fp)
 182c760:	10800044 	addi	r2,r2,1
 182c764:	e0bff415 	stw	r2,-48(fp)
 182c768:	e0fff417 	ldw	r3,-48(fp)
 182c76c:	e0bff517 	ldw	r2,-44(fp)
 182c770:	18bdb216 	blt	r3,r2,182be3c <__alt_mem_mem_0+0xff80be3c>
		
		tse_system_count++;
		max_mac_system = tse_system_count;
	}
	
	return SUCCESS;
 182c774:	0005883a 	mov	r2,zero
	
}
 182c778:	e6ffff04 	addi	sp,fp,-4
 182c77c:	dfc00217 	ldw	ra,8(sp)
 182c780:	df000117 	ldw	fp,4(sp)
 182c784:	dc000017 	ldw	r16,0(sp)
 182c788:	dec00304 	addi	sp,sp,12
 182c78c:	f800283a 	ret

0182c790 <alt_tse_sys_enable_mdio_sharing>:
 * @param		number_of_mac  number of MAC sharing MDIO block
 * @return      SUCCESS on success
 * 				ALTERA_TSE_SYSTEM_DEF_ERROR if definition of system incorrect or pointer == NULL
 * Multi-channel MAC not supported
 */
alt_32 alt_tse_sys_enable_mdio_sharing(alt_tse_system_mac **psys_mac_list, alt_u8 number_of_mac) {
 182c790:	defff904 	addi	sp,sp,-28
 182c794:	dfc00615 	stw	ra,24(sp)
 182c798:	df000515 	stw	fp,20(sp)
 182c79c:	df000504 	addi	fp,sp,20
 182c7a0:	e13ffe15 	stw	r4,-8(fp)
 182c7a4:	2805883a 	mov	r2,r5
 182c7a8:	e0bfff05 	stb	r2,-4(fp)
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 182c7ac:	e03ffb15 	stw	zero,-20(fp)
 182c7b0:	00004806 	br	182c8d4 <alt_tse_sys_enable_mdio_sharing+0x144>
		psys_mac = psys_mac_list[i];
 182c7b4:	e0bffb17 	ldw	r2,-20(fp)
 182c7b8:	1085883a 	add	r2,r2,r2
 182c7bc:	1085883a 	add	r2,r2,r2
 182c7c0:	1007883a 	mov	r3,r2
 182c7c4:	e0bffe17 	ldw	r2,-8(fp)
 182c7c8:	10c5883a 	add	r2,r2,r3
 182c7cc:	10800017 	ldw	r2,0(r2)
 182c7d0:	e0bffd15 	stw	r2,-12(fp)
		
		if(psys_mac == 0) {
 182c7d4:	e0bffd17 	ldw	r2,-12(fp)
 182c7d8:	1000081e 	bne	r2,zero,182c7fc <alt_tse_sys_enable_mdio_sharing+0x6c>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 182c7dc:	01006134 	movhi	r4,388
 182c7e0:	2105b104 	addi	r4,r4,5828
 182c7e4:	183c9880 	call	183c988 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
 182c7e8:	01006134 	movhi	r4,388
 182c7ec:	21061604 	addi	r4,r4,6232
 182c7f0:	183c9880 	call	183c988 <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 182c7f4:	00bfffc4 	movi	r2,-1
 182c7f8:	00003a06 	br	182c8e4 <alt_tse_sys_enable_mdio_sharing+0x154>
		}
		
		for(j = 0; j < max_mac_system; j++) {
 182c7fc:	e03ffc15 	stw	zero,-16(fp)
 182c800:	00002d06 	br	182c8b8 <alt_tse_sys_enable_mdio_sharing+0x128>
			
			if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
 182c804:	e0bffd17 	ldw	r2,-12(fp)
 182c808:	10c00017 	ldw	r3,0(r2)
 182c80c:	00806134 	movhi	r2,388
 182c810:	10946304 	addi	r2,r2,20876
 182c814:	e13ffc17 	ldw	r4,-16(fp)
 182c818:	21001224 	muli	r4,r4,72
 182c81c:	1105883a 	add	r2,r2,r4
 182c820:	10800017 	ldw	r2,0(r2)
 182c824:	1880211e 	bne	r3,r2,182c8ac <alt_tse_sys_enable_mdio_sharing+0x11c>
				if(tse_mac_device[j].tse_multichannel_mac) {
 182c828:	00806134 	movhi	r2,388
 182c82c:	10946304 	addi	r2,r2,20876
 182c830:	e0fffc17 	ldw	r3,-16(fp)
 182c834:	18c01224 	muli	r3,r3,72
 182c838:	10c5883a 	add	r2,r2,r3
 182c83c:	108002c4 	addi	r2,r2,11
 182c840:	10800003 	ldbu	r2,0(r2)
 182c844:	10803fcc 	andi	r2,r2,255
 182c848:	10000826 	beq	r2,zero,182c86c <alt_tse_sys_enable_mdio_sharing+0xdc>
					tse_dprintf(2, "ERROR   : MDIO sharing supported by default for Multi-channel MAC\n");
 182c84c:	01006134 	movhi	r4,388
 182c850:	21062a04 	addi	r4,r4,6312
 182c854:	183c9880 	call	183c988 <puts>
					tse_dprintf(2, "ERROR   : Do not include Multi-channel MAC in the MAC List\n");
 182c858:	01006134 	movhi	r4,388
 182c85c:	21063b04 	addi	r4,r4,6380
 182c860:	183c9880 	call	183c988 <puts>
					return ALTERA_TSE_SYSTEM_DEF_ERROR;
 182c864:	00bfffc4 	movi	r2,-1
 182c868:	00001e06 	br	182c8e4 <alt_tse_sys_enable_mdio_sharing+0x154>
				}
				
				tse_mac_device[j].tse_mdio_shared = 1;
 182c86c:	00806134 	movhi	r2,388
 182c870:	10946304 	addi	r2,r2,20876
 182c874:	e0fffc17 	ldw	r3,-16(fp)
 182c878:	18c01224 	muli	r3,r3,72
 182c87c:	10c5883a 	add	r2,r2,r3
 182c880:	10800344 	addi	r2,r2,13
 182c884:	00c00044 	movi	r3,1
 182c888:	10c00005 	stb	r3,0(r2)
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
 182c88c:	00806134 	movhi	r2,388
 182c890:	10946304 	addi	r2,r2,20876
 182c894:	e0fffc17 	ldw	r3,-16(fp)
 182c898:	18c01224 	muli	r3,r3,72
 182c89c:	10c5883a 	add	r2,r2,r3
 182c8a0:	10800384 	addi	r2,r2,14
 182c8a4:	e0ffff03 	ldbu	r3,-4(fp)
 182c8a8:	10c00005 	stb	r3,0(r2)
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		for(j = 0; j < max_mac_system; j++) {
 182c8ac:	e0bffc17 	ldw	r2,-16(fp)
 182c8b0:	10800044 	addi	r2,r2,1
 182c8b4:	e0bffc15 	stw	r2,-16(fp)
 182c8b8:	d0a01d03 	ldbu	r2,-32652(gp)
 182c8bc:	10803fcc 	andi	r2,r2,255
 182c8c0:	e0fffc17 	ldw	r3,-16(fp)
 182c8c4:	18bfcf16 	blt	r3,r2,182c804 <__alt_mem_mem_0+0xff80c804>
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 182c8c8:	e0bffb17 	ldw	r2,-20(fp)
 182c8cc:	10800044 	addi	r2,r2,1
 182c8d0:	e0bffb15 	stw	r2,-20(fp)
 182c8d4:	e0bfff03 	ldbu	r2,-4(fp)
 182c8d8:	e0fffb17 	ldw	r3,-20(fp)
 182c8dc:	18bfb516 	blt	r3,r2,182c7b4 <__alt_mem_mem_0+0xff80c7b4>
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
			}
		}	
	}
	
	return SUCCESS;
 182c8e0:	0005883a 	mov	r2,zero
}
 182c8e4:	e037883a 	mov	sp,fp
 182c8e8:	dfc00117 	ldw	ra,4(sp)
 182c8ec:	df000017 	ldw	fp,0(sp)
 182c8f0:	dec00204 	addi	sp,sp,8
 182c8f4:	f800283a 	ret

0182c8f8 <alt_tse_mac_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Public
 * @param pmac          Pointer to the TSE MAC Control Interface Base address
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_mac_get_common_speed(np_tse_mac *pmac) {
 182c8f8:	defffc04 	addi	sp,sp,-16
 182c8fc:	dfc00315 	stw	ra,12(sp)
 182c900:	df000215 	stw	fp,8(sp)
 182c904:	df000204 	addi	fp,sp,8
 182c908:	e13fff15 	stw	r4,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 182c90c:	e13fff17 	ldw	r4,-4(fp)
 182c910:	182cae00 	call	182cae0 <alt_tse_get_mac_info>
 182c914:	10800317 	ldw	r2,12(r2)
 182c918:	e0bffe15 	stw	r2,-8(fp)
    return alt_tse_phy_get_common_speed(pmac_group);
 182c91c:	e13ffe17 	ldw	r4,-8(fp)
 182c920:	182fca00 	call	182fca0 <alt_tse_phy_get_common_speed>
}
 182c924:	e037883a 	mov	sp,fp
 182c928:	dfc00117 	ldw	ra,4(sp)
 182c92c:	df000017 	ldw	fp,0(sp)
 182c930:	dec00204 	addi	sp,sp,8
 182c934:	f800283a 	ret

0182c938 <alt_tse_mac_set_common_speed>:
 * @API Type:               Public
 * @param pmac              Pointer to the TSE MAC Control Interface Base address
 *        common_speed      common speed supported by all PHYs
 * @return                  common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_mac_set_common_speed(np_tse_mac *pmac, alt_32 common_speed) {
 182c938:	defffb04 	addi	sp,sp,-20
 182c93c:	dfc00415 	stw	ra,16(sp)
 182c940:	df000315 	stw	fp,12(sp)
 182c944:	df000304 	addi	fp,sp,12
 182c948:	e13ffe15 	stw	r4,-8(fp)
 182c94c:	e17fff15 	stw	r5,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 182c950:	e13ffe17 	ldw	r4,-8(fp)
 182c954:	182cae00 	call	182cae0 <alt_tse_get_mac_info>
 182c958:	10800317 	ldw	r2,12(r2)
 182c95c:	e0bffd15 	stw	r2,-12(fp)
    return alt_tse_phy_set_common_speed(pmac_group, common_speed);
 182c960:	e17fff17 	ldw	r5,-4(fp)
 182c964:	e13ffd17 	ldw	r4,-12(fp)
 182c968:	182ffc80 	call	182ffc8 <alt_tse_phy_set_common_speed>
}
 182c96c:	e037883a 	mov	sp,fp
 182c970:	dfc00117 	ldw	ra,4(sp)
 182c974:	df000017 	ldw	fp,0(sp)
 182c978:	dec00204 	addi	sp,sp,8
 182c97c:	f800283a 	ret

0182c980 <alt_tse_get_system_index>:
/* @Function Description: Get the index of alt_tse_system_info structure in tse_mac_device[]
 * @API Type:        Internal
 * @param psys_info  Pointer to the alt_tse_system_info structure
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
 182c980:	defffd04 	addi	sp,sp,-12
 182c984:	df000215 	stw	fp,8(sp)
 182c988:	df000204 	addi	fp,sp,8
 182c98c:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 182c990:	e03ffe15 	stw	zero,-8(fp)
 182c994:	00000c06 	br	182c9c8 <alt_tse_get_system_index+0x48>
        if(psys_info == &tse_mac_device[i]) {
 182c998:	e0bffe17 	ldw	r2,-8(fp)
 182c99c:	10c01224 	muli	r3,r2,72
 182c9a0:	00806134 	movhi	r2,388
 182c9a4:	10946304 	addi	r2,r2,20876
 182c9a8:	1887883a 	add	r3,r3,r2
 182c9ac:	e0bfff17 	ldw	r2,-4(fp)
 182c9b0:	1880021e 	bne	r3,r2,182c9bc <alt_tse_get_system_index+0x3c>
            return i;
 182c9b4:	e0bffe17 	ldw	r2,-8(fp)
 182c9b8:	00000806 	br	182c9dc <alt_tse_get_system_index+0x5c>
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 182c9bc:	e0bffe17 	ldw	r2,-8(fp)
 182c9c0:	10800044 	addi	r2,r2,1
 182c9c4:	e0bffe15 	stw	r2,-8(fp)
 182c9c8:	d0a01d03 	ldbu	r2,-32652(gp)
 182c9cc:	10803fcc 	andi	r2,r2,255
 182c9d0:	e0fffe17 	ldw	r3,-8(fp)
 182c9d4:	18bff016 	blt	r3,r2,182c998 <__alt_mem_mem_0+0xff80c998>
        if(psys_info == &tse_mac_device[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 182c9d8:	00bfffc4 	movi	r2,-1
}
 182c9dc:	e037883a 	mov	sp,fp
 182c9e0:	df000017 	ldw	fp,0(sp)
 182c9e4:	dec00104 	addi	sp,sp,4
 182c9e8:	f800283a 	ret

0182c9ec <alt_tse_get_mac_group_index>:
/* @Function Description: Get the index of alt_tse_mac_group structure in pmac_groups[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_group structure
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
 182c9ec:	defffd04 	addi	sp,sp,-12
 182c9f0:	df000215 	stw	fp,8(sp)
 182c9f4:	df000204 	addi	fp,sp,8
 182c9f8:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 182c9fc:	e03ffe15 	stw	zero,-8(fp)
 182ca00:	00000e06 	br	182ca3c <alt_tse_get_mac_group_index+0x50>
        if(pmac_group == pmac_groups[i]) {
 182ca04:	008061f4 	movhi	r2,391
 182ca08:	10a84e04 	addi	r2,r2,-24264
 182ca0c:	e0fffe17 	ldw	r3,-8(fp)
 182ca10:	18c7883a 	add	r3,r3,r3
 182ca14:	18c7883a 	add	r3,r3,r3
 182ca18:	10c5883a 	add	r2,r2,r3
 182ca1c:	10c00017 	ldw	r3,0(r2)
 182ca20:	e0bfff17 	ldw	r2,-4(fp)
 182ca24:	1880021e 	bne	r3,r2,182ca30 <alt_tse_get_mac_group_index+0x44>
            return i;
 182ca28:	e0bffe17 	ldw	r2,-8(fp)
 182ca2c:	00000806 	br	182ca50 <alt_tse_get_mac_group_index+0x64>
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 182ca30:	e0bffe17 	ldw	r2,-8(fp)
 182ca34:	10800044 	addi	r2,r2,1
 182ca38:	e0bffe15 	stw	r2,-8(fp)
 182ca3c:	d0a80e43 	ldbu	r2,-24519(gp)
 182ca40:	10803fcc 	andi	r2,r2,255
 182ca44:	e0fffe17 	ldw	r3,-8(fp)
 182ca48:	18bfee16 	blt	r3,r2,182ca04 <__alt_mem_mem_0+0xff80ca04>
        if(pmac_group == pmac_groups[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 182ca4c:	00bfffc4 	movi	r2,-1
}
 182ca50:	e037883a 	mov	sp,fp
 182ca54:	df000017 	ldw	fp,0(sp)
 182ca58:	dec00104 	addi	sp,sp,4
 182ca5c:	f800283a 	ret

0182ca60 <alt_tse_get_mac_info_index>:
/* @Function Description: Get the index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_info structure
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
 182ca60:	defffd04 	addi	sp,sp,-12
 182ca64:	df000215 	stw	fp,8(sp)
 182ca68:	df000204 	addi	fp,sp,8
 182ca6c:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 182ca70:	e03ffe15 	stw	zero,-8(fp)
 182ca74:	00000f06 	br	182cab4 <alt_tse_get_mac_info_index+0x54>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
 182ca78:	e0bfff17 	ldw	r2,-4(fp)
 182ca7c:	10c00317 	ldw	r3,12(r2)
 182ca80:	e0bffe17 	ldw	r2,-8(fp)
 182ca84:	10800044 	addi	r2,r2,1
 182ca88:	1085883a 	add	r2,r2,r2
 182ca8c:	1085883a 	add	r2,r2,r2
 182ca90:	1885883a 	add	r2,r3,r2
 182ca94:	10c00017 	ldw	r3,0(r2)
 182ca98:	e0bfff17 	ldw	r2,-4(fp)
 182ca9c:	1880021e 	bne	r3,r2,182caa8 <alt_tse_get_mac_info_index+0x48>
            return i;
 182caa0:	e0bffe17 	ldw	r2,-8(fp)
 182caa4:	00000a06 	br	182cad0 <alt_tse_get_mac_info_index+0x70>
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 182caa8:	e0bffe17 	ldw	r2,-8(fp)
 182caac:	10800044 	addi	r2,r2,1
 182cab0:	e0bffe15 	stw	r2,-8(fp)
 182cab4:	e0bfff17 	ldw	r2,-4(fp)
 182cab8:	10800317 	ldw	r2,12(r2)
 182cabc:	10800003 	ldbu	r2,0(r2)
 182cac0:	10803fcc 	andi	r2,r2,255
 182cac4:	e0fffe17 	ldw	r3,-8(fp)
 182cac8:	18bfeb16 	blt	r3,r2,182ca78 <__alt_mem_mem_0+0xff80ca78>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
            return i;
        }
    }
    
    return ALTERA_TSE_NO_INDEX_FOUND;
 182cacc:	00bfffc4 	movi	r2,-1
}
 182cad0:	e037883a 	mov	sp,fp
 182cad4:	df000017 	ldw	fp,0(sp)
 182cad8:	dec00104 	addi	sp,sp,4
 182cadc:	f800283a 	ret

0182cae0 <alt_tse_get_mac_info>:
/* @Function Description: Get the pointer of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac        Pointer to the TSE MAC Control Interface Base address
 * @return            Pointer to alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_tse_mac_info *alt_tse_get_mac_info(np_tse_mac *pmac) {
 182cae0:	defffa04 	addi	sp,sp,-24
 182cae4:	df000515 	stw	fp,20(sp)
 182cae8:	df000504 	addi	fp,sp,20
 182caec:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
 182caf0:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 182caf4:	e03ffe15 	stw	zero,-8(fp)
    
    for(i = 0; i < mac_group_count; i++) {
 182caf8:	e03ffb15 	stw	zero,-20(fp)
 182cafc:	00002506 	br	182cb94 <alt_tse_get_mac_info+0xb4>
        pmac_group = pmac_groups[i];
 182cb00:	008061f4 	movhi	r2,391
 182cb04:	10a84e04 	addi	r2,r2,-24264
 182cb08:	e0fffb17 	ldw	r3,-20(fp)
 182cb0c:	18c7883a 	add	r3,r3,r3
 182cb10:	18c7883a 	add	r3,r3,r3
 182cb14:	10c5883a 	add	r2,r2,r3
 182cb18:	10800017 	ldw	r2,0(r2)
 182cb1c:	e0bffd15 	stw	r2,-12(fp)
        for(j = 0; j < pmac_group->channel; j++) {
 182cb20:	e03ffc15 	stw	zero,-16(fp)
 182cb24:	00001306 	br	182cb74 <alt_tse_get_mac_info+0x94>
            pmac_info = pmac_group->pmac_info[j];
 182cb28:	e0fffd17 	ldw	r3,-12(fp)
 182cb2c:	e0bffc17 	ldw	r2,-16(fp)
 182cb30:	10800044 	addi	r2,r2,1
 182cb34:	1085883a 	add	r2,r2,r2
 182cb38:	1085883a 	add	r2,r2,r2
 182cb3c:	1885883a 	add	r2,r3,r2
 182cb40:	10800017 	ldw	r2,0(r2)
 182cb44:	e0bffe15 	stw	r2,-8(fp)
            if(((np_tse_mac *) pmac_info->psys_info->tse_mac_base) == pmac) {
 182cb48:	e0bffe17 	ldw	r2,-8(fp)
 182cb4c:	10800217 	ldw	r2,8(r2)
 182cb50:	10800017 	ldw	r2,0(r2)
 182cb54:	1007883a 	mov	r3,r2
 182cb58:	e0bfff17 	ldw	r2,-4(fp)
 182cb5c:	1880021e 	bne	r3,r2,182cb68 <alt_tse_get_mac_info+0x88>
                return pmac_info;
 182cb60:	e0bffe17 	ldw	r2,-8(fp)
 182cb64:	00001006 	br	182cba8 <alt_tse_get_mac_info+0xc8>
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
        pmac_group = pmac_groups[i];
        for(j = 0; j < pmac_group->channel; j++) {
 182cb68:	e0bffc17 	ldw	r2,-16(fp)
 182cb6c:	10800044 	addi	r2,r2,1
 182cb70:	e0bffc15 	stw	r2,-16(fp)
 182cb74:	e0bffd17 	ldw	r2,-12(fp)
 182cb78:	10800003 	ldbu	r2,0(r2)
 182cb7c:	10803fcc 	andi	r2,r2,255
 182cb80:	e0fffc17 	ldw	r3,-16(fp)
 182cb84:	18bfe816 	blt	r3,r2,182cb28 <__alt_mem_mem_0+0xff80cb28>
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
 182cb88:	e0bffb17 	ldw	r2,-20(fp)
 182cb8c:	10800044 	addi	r2,r2,1
 182cb90:	e0bffb15 	stw	r2,-20(fp)
 182cb94:	d0a80e43 	ldbu	r2,-24519(gp)
 182cb98:	10803fcc 	andi	r2,r2,255
 182cb9c:	e0fffb17 	ldw	r3,-20(fp)
 182cba0:	18bfd716 	blt	r3,r2,182cb00 <__alt_mem_mem_0+0xff80cb00>
                return pmac_info;
            }
        }        
    }
    
    return 0;
 182cba4:	0005883a 	mov	r2,zero
}
 182cba8:	e037883a 	mov	sp,fp
 182cbac:	df000017 	ldw	fp,0(sp)
 182cbb0:	dec00104 	addi	sp,sp,4
 182cbb4:	f800283a 	ret

0182cbb8 <alt_tse_mac_set_speed>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param speed 2 = 1000 Mbps, 1 = 100 Mbps, 0 = 10 Mbps
 * @return ENP_PARAM if invalid speed specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_speed(np_tse_mac *pmac, alt_u8 speed)
{
 182cbb8:	defffc04 	addi	sp,sp,-16
 182cbbc:	df000315 	stw	fp,12(sp)
 182cbc0:	df000304 	addi	fp,sp,12
 182cbc4:	e13ffe15 	stw	r4,-8(fp)
 182cbc8:	2805883a 	mov	r2,r5
 182cbcc:	e0bfff05 	stb	r2,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 182cbd0:	e0bffe17 	ldw	r2,-8(fp)
 182cbd4:	10800204 	addi	r2,r2,8
 182cbd8:	10800037 	ldwio	r2,0(r2)
 182cbdc:	e0bffd15 	stw	r2,-12(fp)
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
 182cbe0:	e0bfff03 	ldbu	r2,-4(fp)
 182cbe4:	10800098 	cmpnei	r2,r2,2
 182cbe8:	1000091e 	bne	r2,zero,182cc10 <alt_tse_mac_set_speed+0x58>
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 182cbec:	e0bffd17 	ldw	r2,-12(fp)
 182cbf0:	10800214 	ori	r2,r2,8
 182cbf4:	e0bffd15 	stw	r2,-12(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 182cbf8:	e0fffd17 	ldw	r3,-12(fp)
 182cbfc:	00bf8034 	movhi	r2,65024
 182cc00:	10bfffc4 	addi	r2,r2,-1
 182cc04:	1884703a 	and	r2,r3,r2
 182cc08:	e0bffd15 	stw	r2,-12(fp)
 182cc0c:	00001906 	br	182cc74 <alt_tse_mac_set_speed+0xbc>
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
 182cc10:	e0bfff03 	ldbu	r2,-4(fp)
 182cc14:	10800058 	cmpnei	r2,r2,1
 182cc18:	10000a1e 	bne	r2,zero,182cc44 <alt_tse_mac_set_speed+0x8c>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 182cc1c:	e0fffd17 	ldw	r3,-12(fp)
 182cc20:	00bffdc4 	movi	r2,-9
 182cc24:	1884703a 	and	r2,r3,r2
 182cc28:	e0bffd15 	stw	r2,-12(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 182cc2c:	e0fffd17 	ldw	r3,-12(fp)
 182cc30:	00bf8034 	movhi	r2,65024
 182cc34:	10bfffc4 	addi	r2,r2,-1
 182cc38:	1884703a 	and	r2,r3,r2
 182cc3c:	e0bffd15 	stw	r2,-12(fp)
 182cc40:	00000c06 	br	182cc74 <alt_tse_mac_set_speed+0xbc>
  }
  /* 10 Mbps */
  else if(speed == TSE_PHY_SPEED_10) {
 182cc44:	e0bfff03 	ldbu	r2,-4(fp)
 182cc48:	1000081e 	bne	r2,zero,182cc6c <alt_tse_mac_set_speed+0xb4>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 182cc4c:	e0fffd17 	ldw	r3,-12(fp)
 182cc50:	00bffdc4 	movi	r2,-9
 182cc54:	1884703a 	and	r2,r3,r2
 182cc58:	e0bffd15 	stw	r2,-12(fp)
	helpvar |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 182cc5c:	e0bffd17 	ldw	r2,-12(fp)
 182cc60:	10808034 	orhi	r2,r2,512
 182cc64:	e0bffd15 	stw	r2,-12(fp)
 182cc68:	00000206 	br	182cc74 <alt_tse_mac_set_speed+0xbc>
  }  
  else {
    return ENP_PARAM;
 182cc6c:	00bffd84 	movi	r2,-10
 182cc70:	00000506 	br	182cc88 <alt_tse_mac_set_speed+0xd0>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 182cc74:	e0bffe17 	ldw	r2,-8(fp)
 182cc78:	10800204 	addi	r2,r2,8
 182cc7c:	e0fffd17 	ldw	r3,-12(fp)
 182cc80:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 182cc84:	0005883a 	mov	r2,zero
}
 182cc88:	e037883a 	mov	sp,fp
 182cc8c:	df000017 	ldw	fp,0(sp)
 182cc90:	dec00104 	addi	sp,sp,4
 182cc94:	f800283a 	ret

0182cc98 <alt_tse_mac_set_duplex>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param duplex 1 = Full Duplex, 0 = Half Duplex
 * @return ENP_PARAM if invalid duplex specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_duplex(np_tse_mac *pmac, alt_u8 duplex)
{
 182cc98:	defffc04 	addi	sp,sp,-16
 182cc9c:	df000315 	stw	fp,12(sp)
 182cca0:	df000304 	addi	fp,sp,12
 182cca4:	e13ffe15 	stw	r4,-8(fp)
 182cca8:	2805883a 	mov	r2,r5
 182ccac:	e0bfff05 	stb	r2,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 182ccb0:	e0bffe17 	ldw	r2,-8(fp)
 182ccb4:	10800204 	addi	r2,r2,8
 182ccb8:	10800037 	ldwio	r2,0(r2)
 182ccbc:	e0bffd15 	stw	r2,-12(fp)
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 182ccc0:	e0bfff03 	ldbu	r2,-4(fp)
 182ccc4:	1000041e 	bne	r2,zero,182ccd8 <alt_tse_mac_set_duplex+0x40>
    helpvar |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 182ccc8:	e0bffd17 	ldw	r2,-12(fp)
 182cccc:	10810014 	ori	r2,r2,1024
 182ccd0:	e0bffd15 	stw	r2,-12(fp)
 182ccd4:	00000a06 	br	182cd00 <alt_tse_mac_set_duplex+0x68>
  } 
  /* Full Duplex */
  else if(duplex == TSE_PHY_DUPLEX_FULL) {
 182ccd8:	e0bfff03 	ldbu	r2,-4(fp)
 182ccdc:	10800058 	cmpnei	r2,r2,1
 182cce0:	1000051e 	bne	r2,zero,182ccf8 <alt_tse_mac_set_duplex+0x60>
    helpvar &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 182cce4:	e0fffd17 	ldw	r3,-12(fp)
 182cce8:	00beffc4 	movi	r2,-1025
 182ccec:	1884703a 	and	r2,r3,r2
 182ccf0:	e0bffd15 	stw	r2,-12(fp)
 182ccf4:	00000206 	br	182cd00 <alt_tse_mac_set_duplex+0x68>
  }
  else {
    return ENP_PARAM;
 182ccf8:	00bffd84 	movi	r2,-10
 182ccfc:	00000506 	br	182cd14 <alt_tse_mac_set_duplex+0x7c>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 182cd00:	e0bffe17 	ldw	r2,-8(fp)
 182cd04:	10800204 	addi	r2,r2,8
 182cd08:	e0fffd17 	ldw	r3,-12(fp)
 182cd0c:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 182cd10:	0005883a 	mov	r2,zero

}
 182cd14:	e037883a 	mov	sp,fp
 182cd18:	df000017 	ldw	fp,0(sp)
 182cd1c:	dec00104 	addi	sp,sp,4
 182cd20:	f800283a 	ret

0182cd24 <getPHYSpeed>:
  	(((speed == TSE_PHY_SPEED_1000) ? 1 : 0) << 1) |   \
	(((speed == TSE_PHY_SPEED_100) ? 1 : 0) << 2) |     \
	(((speed == TSE_PHY_SPEED_10) ? 1 : 0) << 3) |      \
	((speed == TSE_PHY_SPEED_INVALID) ? ALT_TSE_E_INVALID_SPEED : 0))
  
alt_32 getPHYSpeed(np_tse_mac *pmac) {
 182cd24:	defff404 	addi	sp,sp,-48
 182cd28:	dfc00b15 	stw	ra,44(sp)
 182cd2c:	df000a15 	stw	fp,40(sp)
 182cd30:	df000a04 	addi	fp,sp,40
 182cd34:	e13fff15 	stw	r4,-4(fp)

	alt_u8 speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 182cd38:	00800044 	movi	r2,1
 182cd3c:	e0bff705 	stb	r2,-36(fp)
	alt_u8 duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;     /* 1 = full ; 0 = half*/
 182cd40:	00800044 	movi	r2,1
 182cd44:	e0bff745 	stb	r2,-35(fp)
	alt_32 result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 182cd48:	e0bff743 	ldbu	r2,-35(fp)
 182cd4c:	10c0004c 	andi	r3,r2,1
 182cd50:	e0bff703 	ldbu	r2,-36(fp)
 182cd54:	10800098 	cmpnei	r2,r2,2
 182cd58:	1000021e 	bne	r2,zero,182cd64 <getPHYSpeed+0x40>
 182cd5c:	00800084 	movi	r2,2
 182cd60:	00000106 	br	182cd68 <getPHYSpeed+0x44>
 182cd64:	0005883a 	mov	r2,zero
 182cd68:	1886b03a 	or	r3,r3,r2
 182cd6c:	e0bff703 	ldbu	r2,-36(fp)
 182cd70:	10800058 	cmpnei	r2,r2,1
 182cd74:	1000021e 	bne	r2,zero,182cd80 <getPHYSpeed+0x5c>
 182cd78:	00800104 	movi	r2,4
 182cd7c:	00000106 	br	182cd84 <getPHYSpeed+0x60>
 182cd80:	0005883a 	mov	r2,zero
 182cd84:	1886b03a 	or	r3,r3,r2
 182cd88:	e0bff703 	ldbu	r2,-36(fp)
 182cd8c:	1000021e 	bne	r2,zero,182cd98 <getPHYSpeed+0x74>
 182cd90:	00800204 	movi	r2,8
 182cd94:	00000106 	br	182cd9c <getPHYSpeed+0x78>
 182cd98:	0005883a 	mov	r2,zero
 182cd9c:	1886b03a 	or	r3,r3,r2
 182cda0:	e0bff703 	ldbu	r2,-36(fp)
 182cda4:	108000d8 	cmpnei	r2,r2,3
 182cda8:	1000021e 	bne	r2,zero,182cdb4 <getPHYSpeed+0x90>
 182cdac:	00800074 	movhi	r2,1
 182cdb0:	00000106 	br	182cdb8 <getPHYSpeed+0x94>
 182cdb4:	0005883a 	mov	r2,zero
 182cdb8:	1884b03a 	or	r2,r3,r2
 182cdbc:	e0bff815 	stw	r2,-32(fp)
    
    alt_tse_phy_info *pphy = 0;
 182cdc0:	e03ff915 	stw	zero,-28(fp)
    alt_tse_mac_info *pmac_info = 0;
 182cdc4:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_mac_group *pmac_group = 0;
 182cdc8:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_system_info *psys = 0;
 182cdcc:	e03ffc15 	stw	zero,-16(fp)
    
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 182cdd0:	e03ffd05 	stb	zero,-12(fp)
    alt_8 mac_group_index = 0;
 182cdd4:	e03ffd45 	stb	zero,-11(fp)
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
 182cdd8:	d0a80ec3 	ldbu	r2,-24517(gp)
 182cddc:	10803fcc 	andi	r2,r2,255
 182cde0:	1000031e 	bne	r2,zero,182cdf0 <getPHYSpeed+0xcc>
        alt_tse_phy_init();
 182cde4:	182ed180 	call	182ed18 <alt_tse_phy_init>
        is_init = 1;
 182cde8:	00800044 	movi	r2,1
 182cdec:	d0a80ec5 	stb	r2,-24517(gp)
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
 182cdf0:	e13fff17 	ldw	r4,-4(fp)
 182cdf4:	182cae00 	call	182cae0 <alt_tse_get_mac_info>
 182cdf8:	e0bffa15 	stw	r2,-24(fp)
    
    if(pmac_info == 0) {
 182cdfc:	e0bffa17 	ldw	r2,-24(fp)
 182ce00:	1000481e 	bne	r2,zero,182cf24 <getPHYSpeed+0x200>
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 182ce04:	00800044 	movi	r2,1
 182ce08:	e0bff705 	stb	r2,-36(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 182ce0c:	00800044 	movi	r2,1
 182ce10:	e0bff745 	stb	r2,-35(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PMAC_FOUND;
 182ce14:	e0bff743 	ldbu	r2,-35(fp)
 182ce18:	10c0004c 	andi	r3,r2,1
 182ce1c:	e0bff703 	ldbu	r2,-36(fp)
 182ce20:	10800098 	cmpnei	r2,r2,2
 182ce24:	1000021e 	bne	r2,zero,182ce30 <getPHYSpeed+0x10c>
 182ce28:	00800084 	movi	r2,2
 182ce2c:	00000106 	br	182ce34 <getPHYSpeed+0x110>
 182ce30:	0005883a 	mov	r2,zero
 182ce34:	1886b03a 	or	r3,r3,r2
 182ce38:	e0bff703 	ldbu	r2,-36(fp)
 182ce3c:	10800058 	cmpnei	r2,r2,1
 182ce40:	1000021e 	bne	r2,zero,182ce4c <getPHYSpeed+0x128>
 182ce44:	00800104 	movi	r2,4
 182ce48:	00000106 	br	182ce50 <getPHYSpeed+0x12c>
 182ce4c:	0005883a 	mov	r2,zero
 182ce50:	1886b03a 	or	r3,r3,r2
 182ce54:	e0bff703 	ldbu	r2,-36(fp)
 182ce58:	1000021e 	bne	r2,zero,182ce64 <getPHYSpeed+0x140>
 182ce5c:	00800204 	movi	r2,8
 182ce60:	00000106 	br	182ce68 <getPHYSpeed+0x144>
 182ce64:	0005883a 	mov	r2,zero
 182ce68:	1886b03a 	or	r3,r3,r2
 182ce6c:	e0bff703 	ldbu	r2,-36(fp)
 182ce70:	108000d8 	cmpnei	r2,r2,3
 182ce74:	1000021e 	bne	r2,zero,182ce80 <getPHYSpeed+0x15c>
 182ce78:	00800074 	movhi	r2,1
 182ce7c:	00000106 	br	182ce84 <getPHYSpeed+0x160>
 182ce80:	0005883a 	mov	r2,zero
 182ce84:	1884b03a 	or	r2,r3,r2
 182ce88:	10802034 	orhi	r2,r2,128
 182ce8c:	e0bff815 	stw	r2,-32(fp)
        tse_dprintf(2, "ERROR   : [getPHYSpeed] pmac not found from list of pmac_info[]! Speed = %s Mbps, Duplex = %s\n", speed == TSE_PHY_SPEED_1000 ? "1000" :
 182ce90:	e0bff703 	ldbu	r2,-36(fp)
 182ce94:	108000a0 	cmpeqi	r2,r2,2
 182ce98:	10000e1e 	bne	r2,zero,182ced4 <getPHYSpeed+0x1b0>
 182ce9c:	e0bff703 	ldbu	r2,-36(fp)
 182cea0:	10800060 	cmpeqi	r2,r2,1
 182cea4:	1000081e 	bne	r2,zero,182cec8 <getPHYSpeed+0x1a4>
 182cea8:	e0bff703 	ldbu	r2,-36(fp)
 182ceac:	1000031e 	bne	r2,zero,182cebc <getPHYSpeed+0x198>
 182ceb0:	00806134 	movhi	r2,388
 182ceb4:	10864a04 	addi	r2,r2,6440
 182ceb8:	00000806 	br	182cedc <getPHYSpeed+0x1b8>
 182cebc:	00806134 	movhi	r2,388
 182cec0:	10864b04 	addi	r2,r2,6444
 182cec4:	00000506 	br	182cedc <getPHYSpeed+0x1b8>
 182cec8:	00806134 	movhi	r2,388
 182cecc:	10864d04 	addi	r2,r2,6452
 182ced0:	00000206 	br	182cedc <getPHYSpeed+0x1b8>
 182ced4:	00806134 	movhi	r2,388
 182ced8:	10864e04 	addi	r2,r2,6456
 182cedc:	e0fff743 	ldbu	r3,-35(fp)
 182cee0:	18c00058 	cmpnei	r3,r3,1
 182cee4:	1800031e 	bne	r3,zero,182cef4 <getPHYSpeed+0x1d0>
 182cee8:	00c06134 	movhi	r3,388
 182ceec:	18c65004 	addi	r3,r3,6464
 182cef0:	00000206 	br	182cefc <getPHYSpeed+0x1d8>
 182cef4:	00c06134 	movhi	r3,388
 182cef8:	18c65204 	addi	r3,r3,6472
 182cefc:	180d883a 	mov	r6,r3
 182cf00:	100b883a 	mov	r5,r2
 182cf04:	01006134 	movhi	r4,388
 182cf08:	21065404 	addi	r4,r4,6480
 182cf0c:	1800bd80 	call	1800bd8 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
 182cf10:	01006134 	movhi	r4,388
 182cf14:	21066c04 	addi	r4,r4,6576
 182cf18:	183c9880 	call	183c988 <puts>
        return result;
 182cf1c:	e0bff817 	ldw	r2,-32(fp)
 182cf20:	00021a06 	br	182d78c <getPHYSpeed+0xa68>
    }
    
    pphy = pmac_info->pphy_info;
 182cf24:	e0bffa17 	ldw	r2,-24(fp)
 182cf28:	10800117 	ldw	r2,4(r2)
 182cf2c:	e0bff915 	stw	r2,-28(fp)
    pmac_group = pmac_info->pmac_group;
 182cf30:	e0bffa17 	ldw	r2,-24(fp)
 182cf34:	10800317 	ldw	r2,12(r2)
 182cf38:	e0bffb15 	stw	r2,-20(fp)
    psys = pmac_info->psys_info;
 182cf3c:	e0bffa17 	ldw	r2,-24(fp)
 182cf40:	10800217 	ldw	r2,8(r2)
 182cf44:	e0bffc15 	stw	r2,-16(fp)
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182cf48:	e13ffa17 	ldw	r4,-24(fp)
 182cf4c:	182ca600 	call	182ca60 <alt_tse_get_mac_info_index>
 182cf50:	e0bffd05 	stb	r2,-12(fp)
    mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182cf54:	e13ffb17 	ldw	r4,-20(fp)
 182cf58:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 182cf5c:	e0bffd45 	stb	r2,-11(fp)
         
    /* MDIO is not used */
    if (pmac_group->pmac_info[0]->psys_info->tse_use_mdio == 0)
 182cf60:	e0bffb17 	ldw	r2,-20(fp)
 182cf64:	10800117 	ldw	r2,4(r2)
 182cf68:	10800217 	ldw	r2,8(r2)
 182cf6c:	10800203 	ldbu	r2,8(r2)
 182cf70:	10803fcc 	andi	r2,r2,255
 182cf74:	10005a1e 	bne	r2,zero,182d0e0 <getPHYSpeed+0x3bc>
    {
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 182cf78:	00800044 	movi	r2,1
 182cf7c:	e0bff705 	stb	r2,-36(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 182cf80:	00800044 	movi	r2,1
 182cf84:	e0bff745 	stb	r2,-35(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_MDIO;
 182cf88:	e0bff743 	ldbu	r2,-35(fp)
 182cf8c:	10c0004c 	andi	r3,r2,1
 182cf90:	e0bff703 	ldbu	r2,-36(fp)
 182cf94:	10800098 	cmpnei	r2,r2,2
 182cf98:	1000021e 	bne	r2,zero,182cfa4 <getPHYSpeed+0x280>
 182cf9c:	00800084 	movi	r2,2
 182cfa0:	00000106 	br	182cfa8 <getPHYSpeed+0x284>
 182cfa4:	0005883a 	mov	r2,zero
 182cfa8:	1886b03a 	or	r3,r3,r2
 182cfac:	e0bff703 	ldbu	r2,-36(fp)
 182cfb0:	10800058 	cmpnei	r2,r2,1
 182cfb4:	1000021e 	bne	r2,zero,182cfc0 <getPHYSpeed+0x29c>
 182cfb8:	00800104 	movi	r2,4
 182cfbc:	00000106 	br	182cfc4 <getPHYSpeed+0x2a0>
 182cfc0:	0005883a 	mov	r2,zero
 182cfc4:	1886b03a 	or	r3,r3,r2
 182cfc8:	e0bff703 	ldbu	r2,-36(fp)
 182cfcc:	1000021e 	bne	r2,zero,182cfd8 <getPHYSpeed+0x2b4>
 182cfd0:	00800204 	movi	r2,8
 182cfd4:	00000106 	br	182cfdc <getPHYSpeed+0x2b8>
 182cfd8:	0005883a 	mov	r2,zero
 182cfdc:	1886b03a 	or	r3,r3,r2
 182cfe0:	e0bff703 	ldbu	r2,-36(fp)
 182cfe4:	108000d8 	cmpnei	r2,r2,3
 182cfe8:	1000021e 	bne	r2,zero,182cff4 <getPHYSpeed+0x2d0>
 182cfec:	00800074 	movhi	r2,1
 182cff0:	00000106 	br	182cff8 <getPHYSpeed+0x2d4>
 182cff4:	0005883a 	mov	r2,zero
 182cff8:	1884b03a 	or	r2,r3,r2
 182cffc:	10801034 	orhi	r2,r2,64
 182d000:	e0bff815 	stw	r2,-32(fp)
        usleep(ALTERA_NOMDIO_TIMEOUT_THRESHOLD);
 182d004:	010003f4 	movhi	r4,15
 182d008:	21109004 	addi	r4,r4,16960
 182d00c:	1827e400 	call	1827e40 <usleep>
        if(psys->tse_phy_cfg) {
 182d010:	e0bffc17 	ldw	r2,-16(fp)
 182d014:	10801117 	ldw	r2,68(r2)
 182d018:	10000d26 	beq	r2,zero,182d050 <getPHYSpeed+0x32c>
        	tse_dprintf(4, "WARNING : PHY[%d.%d] - MDIO not enabled! Running user configuration...\n", mac_group_index, mac_info_index);
 182d01c:	e0bffd47 	ldb	r2,-11(fp)
 182d020:	e0fffd07 	ldb	r3,-12(fp)
 182d024:	180d883a 	mov	r6,r3
 182d028:	100b883a 	mov	r5,r2
 182d02c:	01006134 	movhi	r4,388
 182d030:	21067d04 	addi	r4,r4,6644
 182d034:	1800bd80 	call	1800bd8 <printf>
        	result = psys->tse_phy_cfg(pmac);
 182d038:	e0bffc17 	ldw	r2,-16(fp)
 182d03c:	10801117 	ldw	r2,68(r2)
 182d040:	e13fff17 	ldw	r4,-4(fp)
 182d044:	103ee83a 	callr	r2
 182d048:	e0bff815 	stw	r2,-32(fp)
 182d04c:	00002206 	br	182d0d8 <getPHYSpeed+0x3b4>
        }
        else {
        	tse_dprintf(4, "WARNING : MAC Group[%d] - MDIO not enabled! Speed = %s, Duplex = %s\n", mac_group_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 182d050:	e13ffd47 	ldb	r4,-11(fp)
 182d054:	e0bff703 	ldbu	r2,-36(fp)
 182d058:	108000a0 	cmpeqi	r2,r2,2
 182d05c:	10000e1e 	bne	r2,zero,182d098 <getPHYSpeed+0x374>
 182d060:	e0bff703 	ldbu	r2,-36(fp)
 182d064:	10800060 	cmpeqi	r2,r2,1
 182d068:	1000081e 	bne	r2,zero,182d08c <getPHYSpeed+0x368>
 182d06c:	e0bff703 	ldbu	r2,-36(fp)
 182d070:	1000031e 	bne	r2,zero,182d080 <getPHYSpeed+0x35c>
 182d074:	00806134 	movhi	r2,388
 182d078:	10864a04 	addi	r2,r2,6440
 182d07c:	00000806 	br	182d0a0 <getPHYSpeed+0x37c>
 182d080:	00806134 	movhi	r2,388
 182d084:	10864b04 	addi	r2,r2,6444
 182d088:	00000506 	br	182d0a0 <getPHYSpeed+0x37c>
 182d08c:	00806134 	movhi	r2,388
 182d090:	10864d04 	addi	r2,r2,6452
 182d094:	00000206 	br	182d0a0 <getPHYSpeed+0x37c>
 182d098:	00806134 	movhi	r2,388
 182d09c:	10864e04 	addi	r2,r2,6456
 182d0a0:	e0fff743 	ldbu	r3,-35(fp)
 182d0a4:	18c00058 	cmpnei	r3,r3,1
 182d0a8:	1800031e 	bne	r3,zero,182d0b8 <getPHYSpeed+0x394>
 182d0ac:	00c06134 	movhi	r3,388
 182d0b0:	18c65004 	addi	r3,r3,6464
 182d0b4:	00000206 	br	182d0c0 <getPHYSpeed+0x39c>
 182d0b8:	00c06134 	movhi	r3,388
 182d0bc:	18c65204 	addi	r3,r3,6472
 182d0c0:	180f883a 	mov	r7,r3
 182d0c4:	100d883a 	mov	r6,r2
 182d0c8:	200b883a 	mov	r5,r4
 182d0cc:	01006134 	movhi	r4,388
 182d0d0:	21068f04 	addi	r4,r4,6716
 182d0d4:	1800bd80 	call	1800bd8 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        }
        return result;
 182d0d8:	e0bff817 	ldw	r2,-32(fp)
 182d0dc:	0001ab06 	br	182d78c <getPHYSpeed+0xa68>

    /* Not running simulation */
    #ifndef ALT_SIM_OPTIMIZE
	
		/* These variables declaration are here to avoid "warning: unused variable" message when compile for simulation */
		np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 182d0e0:	e0bffb17 	ldw	r2,-20(fp)
 182d0e4:	10800117 	ldw	r2,4(r2)
 182d0e8:	10800217 	ldw	r2,8(r2)
 182d0ec:	10800017 	ldw	r2,0(r2)
 182d0f0:	e0bffe15 	stw	r2,-8(fp)
    
        /* if no PHY connected to the MAC */
        if(pphy == 0) {
 182d0f4:	e0bff917 	ldw	r2,-28(fp)
 182d0f8:	1000491e 	bne	r2,zero,182d220 <getPHYSpeed+0x4fc>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 182d0fc:	00800044 	movi	r2,1
 182d100:	e0bff705 	stb	r2,-36(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 182d104:	00800044 	movi	r2,1
 182d108:	e0bff745 	stb	r2,-35(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY;
 182d10c:	e0bff743 	ldbu	r2,-35(fp)
 182d110:	10c0004c 	andi	r3,r2,1
 182d114:	e0bff703 	ldbu	r2,-36(fp)
 182d118:	10800098 	cmpnei	r2,r2,2
 182d11c:	1000021e 	bne	r2,zero,182d128 <getPHYSpeed+0x404>
 182d120:	00800084 	movi	r2,2
 182d124:	00000106 	br	182d12c <getPHYSpeed+0x408>
 182d128:	0005883a 	mov	r2,zero
 182d12c:	1886b03a 	or	r3,r3,r2
 182d130:	e0bff703 	ldbu	r2,-36(fp)
 182d134:	10800058 	cmpnei	r2,r2,1
 182d138:	1000021e 	bne	r2,zero,182d144 <getPHYSpeed+0x420>
 182d13c:	00800104 	movi	r2,4
 182d140:	00000106 	br	182d148 <getPHYSpeed+0x424>
 182d144:	0005883a 	mov	r2,zero
 182d148:	1886b03a 	or	r3,r3,r2
 182d14c:	e0bff703 	ldbu	r2,-36(fp)
 182d150:	1000021e 	bne	r2,zero,182d15c <getPHYSpeed+0x438>
 182d154:	00800204 	movi	r2,8
 182d158:	00000106 	br	182d160 <getPHYSpeed+0x43c>
 182d15c:	0005883a 	mov	r2,zero
 182d160:	1886b03a 	or	r3,r3,r2
 182d164:	e0bff703 	ldbu	r2,-36(fp)
 182d168:	108000d8 	cmpnei	r2,r2,3
 182d16c:	1000021e 	bne	r2,zero,182d178 <getPHYSpeed+0x454>
 182d170:	00800074 	movhi	r2,1
 182d174:	00000106 	br	182d17c <getPHYSpeed+0x458>
 182d178:	0005883a 	mov	r2,zero
 182d17c:	1884b03a 	or	r2,r3,r2
 182d180:	10800834 	orhi	r2,r2,32
 182d184:	e0bff815 	stw	r2,-32(fp)
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - No PHY connected! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 182d188:	e13ffd47 	ldb	r4,-11(fp)
 182d18c:	e17ffd07 	ldb	r5,-12(fp)
 182d190:	e0bff703 	ldbu	r2,-36(fp)
 182d194:	108000a0 	cmpeqi	r2,r2,2
 182d198:	10000e1e 	bne	r2,zero,182d1d4 <getPHYSpeed+0x4b0>
 182d19c:	e0bff703 	ldbu	r2,-36(fp)
 182d1a0:	10800060 	cmpeqi	r2,r2,1
 182d1a4:	1000081e 	bne	r2,zero,182d1c8 <getPHYSpeed+0x4a4>
 182d1a8:	e0bff703 	ldbu	r2,-36(fp)
 182d1ac:	1000031e 	bne	r2,zero,182d1bc <getPHYSpeed+0x498>
 182d1b0:	00806134 	movhi	r2,388
 182d1b4:	10864a04 	addi	r2,r2,6440
 182d1b8:	00000806 	br	182d1dc <getPHYSpeed+0x4b8>
 182d1bc:	00806134 	movhi	r2,388
 182d1c0:	10864b04 	addi	r2,r2,6444
 182d1c4:	00000506 	br	182d1dc <getPHYSpeed+0x4b8>
 182d1c8:	00806134 	movhi	r2,388
 182d1cc:	10864d04 	addi	r2,r2,6452
 182d1d0:	00000206 	br	182d1dc <getPHYSpeed+0x4b8>
 182d1d4:	00806134 	movhi	r2,388
 182d1d8:	10864e04 	addi	r2,r2,6456
 182d1dc:	e0fff743 	ldbu	r3,-35(fp)
 182d1e0:	18c00058 	cmpnei	r3,r3,1
 182d1e4:	1800031e 	bne	r3,zero,182d1f4 <getPHYSpeed+0x4d0>
 182d1e8:	00c06134 	movhi	r3,388
 182d1ec:	18c65004 	addi	r3,r3,6464
 182d1f0:	00000206 	br	182d1fc <getPHYSpeed+0x4d8>
 182d1f4:	00c06134 	movhi	r3,388
 182d1f8:	18c65204 	addi	r3,r3,6472
 182d1fc:	d8c00015 	stw	r3,0(sp)
 182d200:	100f883a 	mov	r7,r2
 182d204:	280d883a 	mov	r6,r5
 182d208:	200b883a 	mov	r5,r4
 182d20c:	01006134 	movhi	r4,388
 182d210:	2106a104 	addi	r4,r4,6788
 182d214:	1800bd80 	call	1800bd8 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
            return result;
 182d218:	e0bff817 	ldw	r2,-32(fp)
 182d21c:	00015b06 	br	182d78c <getPHYSpeed+0xa68>
        }

		/* Small MAC */
		if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 182d220:	e0bffa17 	ldw	r2,-24(fp)
 182d224:	10800003 	ldbu	r2,0(r2)
 182d228:	10803fcc 	andi	r2,r2,255
 182d22c:	10800058 	cmpnei	r2,r2,1
 182d230:	1000071e 	bne	r2,zero,182d250 <getPHYSpeed+0x52c>
			alt_tse_phy_set_adv_1000(pphy, 0);
 182d234:	000b883a 	mov	r5,zero
 182d238:	e13ff917 	ldw	r4,-28(fp)
 182d23c:	182f6e00 	call	182f6e0 <alt_tse_phy_set_adv_1000>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 182d240:	017e0034 	movhi	r5,63488
 182d244:	e13ff917 	ldw	r4,-28(fp)
 182d248:	182ee300 	call	182ee30 <alt_tse_phy_restart_an>
 182d24c:	00000e06 	br	182d288 <getPHYSpeed+0x564>
		}
		else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 182d250:	e0bffa17 	ldw	r2,-24(fp)
 182d254:	10800003 	ldbu	r2,0(r2)
 182d258:	10803fcc 	andi	r2,r2,255
 182d25c:	10800098 	cmpnei	r2,r2,2
 182d260:	1000091e 	bne	r2,zero,182d288 <getPHYSpeed+0x564>
			alt_tse_phy_set_adv_100(pphy, 0);
 182d264:	000b883a 	mov	r5,zero
 182d268:	e13ff917 	ldw	r4,-28(fp)
 182d26c:	182f8a40 	call	182f8a4 <alt_tse_phy_set_adv_100>
			alt_tse_phy_set_adv_10(pphy, 0);
 182d270:	000b883a 	mov	r5,zero
 182d274:	e13ff917 	ldw	r4,-28(fp)
 182d278:	182faf80 	call	182faf8 <alt_tse_phy_set_adv_10>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 182d27c:	017e0034 	movhi	r5,63488
 182d280:	e13ff917 	ldw	r4,-28(fp)
 182d284:	182ee300 	call	182ee30 <alt_tse_phy_restart_an>
		}
		
		/* check link connection for this PHY */
		if(alt_tse_phy_check_link(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD) == TSE_PHY_AN_NOT_COMPLETE) {
 182d288:	017e0034 	movhi	r5,63488
 182d28c:	e13ff917 	ldw	r4,-28(fp)
 182d290:	182efec0 	call	182efec <alt_tse_phy_check_link>
 182d294:	10bfffd8 	cmpnei	r2,r2,-1
 182d298:	1000491e 	bne	r2,zero,182d3c0 <getPHYSpeed+0x69c>
			speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 182d29c:	00800044 	movi	r2,1
 182d2a0:	e0bff705 	stb	r2,-36(fp)
			duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 182d2a4:	00800044 	movi	r2,1
 182d2a8:	e0bff745 	stb	r2,-35(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_AN_NOT_COMPLETE;
 182d2ac:	e0bff743 	ldbu	r2,-35(fp)
 182d2b0:	10c0004c 	andi	r3,r2,1
 182d2b4:	e0bff703 	ldbu	r2,-36(fp)
 182d2b8:	10800098 	cmpnei	r2,r2,2
 182d2bc:	1000021e 	bne	r2,zero,182d2c8 <getPHYSpeed+0x5a4>
 182d2c0:	00800084 	movi	r2,2
 182d2c4:	00000106 	br	182d2cc <getPHYSpeed+0x5a8>
 182d2c8:	0005883a 	mov	r2,zero
 182d2cc:	1886b03a 	or	r3,r3,r2
 182d2d0:	e0bff703 	ldbu	r2,-36(fp)
 182d2d4:	10800058 	cmpnei	r2,r2,1
 182d2d8:	1000021e 	bne	r2,zero,182d2e4 <getPHYSpeed+0x5c0>
 182d2dc:	00800104 	movi	r2,4
 182d2e0:	00000106 	br	182d2e8 <getPHYSpeed+0x5c4>
 182d2e4:	0005883a 	mov	r2,zero
 182d2e8:	1886b03a 	or	r3,r3,r2
 182d2ec:	e0bff703 	ldbu	r2,-36(fp)
 182d2f0:	1000021e 	bne	r2,zero,182d2fc <getPHYSpeed+0x5d8>
 182d2f4:	00800204 	movi	r2,8
 182d2f8:	00000106 	br	182d300 <getPHYSpeed+0x5dc>
 182d2fc:	0005883a 	mov	r2,zero
 182d300:	1886b03a 	or	r3,r3,r2
 182d304:	e0bff703 	ldbu	r2,-36(fp)
 182d308:	108000d8 	cmpnei	r2,r2,3
 182d30c:	1000021e 	bne	r2,zero,182d318 <getPHYSpeed+0x5f4>
 182d310:	00800074 	movhi	r2,1
 182d314:	00000106 	br	182d31c <getPHYSpeed+0x5f8>
 182d318:	0005883a 	mov	r2,zero
 182d31c:	1884b03a 	or	r2,r3,r2
 182d320:	10800234 	orhi	r2,r2,8
 182d324:	e0bff815 	stw	r2,-32(fp)
			tse_dprintf(3, "WARNING : PHY[%d.%d] - Auto-Negotiation not completed! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 182d328:	e13ffd47 	ldb	r4,-11(fp)
 182d32c:	e17ffd07 	ldb	r5,-12(fp)
 182d330:	e0bff703 	ldbu	r2,-36(fp)
 182d334:	108000a0 	cmpeqi	r2,r2,2
 182d338:	10000e1e 	bne	r2,zero,182d374 <getPHYSpeed+0x650>
 182d33c:	e0bff703 	ldbu	r2,-36(fp)
 182d340:	10800060 	cmpeqi	r2,r2,1
 182d344:	1000081e 	bne	r2,zero,182d368 <getPHYSpeed+0x644>
 182d348:	e0bff703 	ldbu	r2,-36(fp)
 182d34c:	1000031e 	bne	r2,zero,182d35c <getPHYSpeed+0x638>
 182d350:	00806134 	movhi	r2,388
 182d354:	10864a04 	addi	r2,r2,6440
 182d358:	00000806 	br	182d37c <getPHYSpeed+0x658>
 182d35c:	00806134 	movhi	r2,388
 182d360:	10864b04 	addi	r2,r2,6444
 182d364:	00000506 	br	182d37c <getPHYSpeed+0x658>
 182d368:	00806134 	movhi	r2,388
 182d36c:	10864d04 	addi	r2,r2,6452
 182d370:	00000206 	br	182d37c <getPHYSpeed+0x658>
 182d374:	00806134 	movhi	r2,388
 182d378:	10864e04 	addi	r2,r2,6456
 182d37c:	e0fff743 	ldbu	r3,-35(fp)
 182d380:	18c00058 	cmpnei	r3,r3,1
 182d384:	1800031e 	bne	r3,zero,182d394 <getPHYSpeed+0x670>
 182d388:	00c06134 	movhi	r3,388
 182d38c:	18c65004 	addi	r3,r3,6464
 182d390:	00000206 	br	182d39c <getPHYSpeed+0x678>
 182d394:	00c06134 	movhi	r3,388
 182d398:	18c65204 	addi	r3,r3,6472
 182d39c:	d8c00015 	stw	r3,0(sp)
 182d3a0:	100f883a 	mov	r7,r2
 182d3a4:	280d883a 	mov	r6,r5
 182d3a8:	200b883a 	mov	r5,r4
 182d3ac:	01006134 	movhi	r4,388
 182d3b0:	2106b204 	addi	r4,r4,6856
 182d3b4:	1800bd80 	call	1800bd8 <printf>
																			 speed == TSE_PHY_SPEED_100 ? "100" :
																			 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
																			 duplex == 1 ? "Full" : "Half");
			return result;
 182d3b8:	e0bff817 	ldw	r2,-32(fp)
 182d3bc:	0000f306 	br	182d78c <getPHYSpeed+0xa68>
		}

        IOWR(&pmac_group_base->MDIO_ADDR1, 0, pphy->mdio_address);
 182d3c0:	e0bffe17 	ldw	r2,-8(fp)
 182d3c4:	10801004 	addi	r2,r2,64
 182d3c8:	e0fff917 	ldw	r3,-28(fp)
 182d3cc:	18c00003 	ldbu	r3,0(r3)
 182d3d0:	18c03fcc 	andi	r3,r3,255
 182d3d4:	10c00035 	stwio	r3,0(r2)
        /* To enable PHY loopback */
        #if ENABLE_PHY_LOOPBACK
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Putting PHY in loopback\n", mac_group_index, mac_info_index);
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 1);   // enable PHY loopback
		#else
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 182d3d8:	d8000015 	stw	zero,0(sp)
 182d3dc:	01c00044 	movi	r7,1
 182d3e0:	01800384 	movi	r6,14
 182d3e4:	000b883a 	mov	r5,zero
 182d3e8:	e13ff917 	ldw	r4,-28(fp)
 182d3ec:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        #endif
       
        /* if PHY not found in profile */
        if(pphy->pphy_profile == 0) {
 182d3f0:	e0bff917 	ldw	r2,-28(fp)
 182d3f4:	10800517 	ldw	r2,20(r2)
 182d3f8:	10002b1e 	bne	r2,zero,182d4a8 <getPHYSpeed+0x784>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not found in PHY profile\n", mac_group_index, mac_info_index);
 182d3fc:	e0bffd47 	ldb	r2,-11(fp)
 182d400:	e0fffd07 	ldb	r3,-12(fp)
 182d404:	180d883a 	mov	r6,r3
 182d408:	100b883a 	mov	r5,r2
 182d40c:	01006134 	movhi	r4,388
 182d410:	2106c604 	addi	r4,r4,6936
 182d414:	1800bd80 	call	1800bd8 <printf>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 182d418:	00800044 	movi	r2,1
 182d41c:	e0bff705 	stb	r2,-36(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 182d420:	00800044 	movi	r2,1
 182d424:	e0bff745 	stb	r2,-35(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY_PROFILE;
 182d428:	e0bff743 	ldbu	r2,-35(fp)
 182d42c:	10c0004c 	andi	r3,r2,1
 182d430:	e0bff703 	ldbu	r2,-36(fp)
 182d434:	10800098 	cmpnei	r2,r2,2
 182d438:	1000021e 	bne	r2,zero,182d444 <getPHYSpeed+0x720>
 182d43c:	00800084 	movi	r2,2
 182d440:	00000106 	br	182d448 <getPHYSpeed+0x724>
 182d444:	0005883a 	mov	r2,zero
 182d448:	1886b03a 	or	r3,r3,r2
 182d44c:	e0bff703 	ldbu	r2,-36(fp)
 182d450:	10800058 	cmpnei	r2,r2,1
 182d454:	1000021e 	bne	r2,zero,182d460 <getPHYSpeed+0x73c>
 182d458:	00800104 	movi	r2,4
 182d45c:	00000106 	br	182d464 <getPHYSpeed+0x740>
 182d460:	0005883a 	mov	r2,zero
 182d464:	1886b03a 	or	r3,r3,r2
 182d468:	e0bff703 	ldbu	r2,-36(fp)
 182d46c:	1000021e 	bne	r2,zero,182d478 <getPHYSpeed+0x754>
 182d470:	00800204 	movi	r2,8
 182d474:	00000106 	br	182d47c <getPHYSpeed+0x758>
 182d478:	0005883a 	mov	r2,zero
 182d47c:	1886b03a 	or	r3,r3,r2
 182d480:	e0bff703 	ldbu	r2,-36(fp)
 182d484:	108000d8 	cmpnei	r2,r2,3
 182d488:	1000021e 	bne	r2,zero,182d494 <getPHYSpeed+0x770>
 182d48c:	00800074 	movhi	r2,1
 182d490:	00000106 	br	182d498 <getPHYSpeed+0x774>
 182d494:	0005883a 	mov	r2,zero
 182d498:	1884b03a 	or	r2,r3,r2
 182d49c:	10800134 	orhi	r2,r2,4
 182d4a0:	e0bff815 	stw	r2,-32(fp)
 182d4a4:	00009406 	br	182d6f8 <getPHYSpeed+0x9d4>
        }
        // retrieve duplex information from PHY
		else
		{
			if(pphy->pphy_profile->link_status_read)
 182d4a8:	e0bff917 	ldw	r2,-28(fp)
 182d4ac:	10800517 	ldw	r2,20(r2)
 182d4b0:	10801817 	ldw	r2,96(r2)
 182d4b4:	10002626 	beq	r2,zero,182d550 <getPHYSpeed+0x82c>
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
 182d4b8:	e0bff917 	ldw	r2,-28(fp)
 182d4bc:	10800517 	ldw	r2,20(r2)
 182d4c0:	10801817 	ldw	r2,96(r2)
 182d4c4:	e13ffe17 	ldw	r4,-8(fp)
 182d4c8:	103ee83a 	callr	r2
 182d4cc:	e0bff815 	stw	r2,-32(fp)
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 182d4d0:	e0bff817 	ldw	r2,-32(fp)
 182d4d4:	1080008c 	andi	r2,r2,2
 182d4d8:	10000c1e 	bne	r2,zero,182d50c <getPHYSpeed+0x7e8>
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
 182d4dc:	e0bff817 	ldw	r2,-32(fp)
 182d4e0:	1080010c 	andi	r2,r2,4
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 182d4e4:	1000071e 	bne	r2,zero,182d504 <getPHYSpeed+0x7e0>
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
 182d4e8:	e0bff817 	ldw	r2,-32(fp)
 182d4ec:	1080020c 	andi	r2,r2,8
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 182d4f0:	10000226 	beq	r2,zero,182d4fc <getPHYSpeed+0x7d8>
 182d4f4:	0005883a 	mov	r2,zero
 182d4f8:	00000506 	br	182d510 <getPHYSpeed+0x7ec>
 182d4fc:	008000c4 	movi	r2,3
 182d500:	00000306 	br	182d510 <getPHYSpeed+0x7ec>
 182d504:	00800044 	movi	r2,1
 182d508:	00000106 	br	182d510 <getPHYSpeed+0x7ec>
 182d50c:	00800084 	movi	r2,2
 182d510:	e0bff705 	stb	r2,-36(fp)
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
				duplex = (result & 0x01) ? TSE_PHY_DUPLEX_FULL : TSE_PHY_DUPLEX_HALF;
 182d514:	e0bff817 	ldw	r2,-32(fp)
 182d518:	1080004c 	andi	r2,r2,1
 182d51c:	1004c03a 	cmpne	r2,r2,zero
 182d520:	e0bff745 	stb	r2,-35(fp)
				
				if(result & ALT_TSE_E_INVALID_SPEED)
 182d524:	e0bff817 	ldw	r2,-32(fp)
 182d528:	1080006c 	andhi	r2,r2,1
 182d52c:	10007226 	beq	r2,zero,182d6f8 <getPHYSpeed+0x9d4>
				{
					tse_dprintf(3, "WARNING : PHY[%d.%d] - Invalid speed read from PHY\n", mac_group_index, mac_info_index);
 182d530:	e0bffd47 	ldb	r2,-11(fp)
 182d534:	e0fffd07 	ldb	r3,-12(fp)
 182d538:	180d883a 	mov	r6,r3
 182d53c:	100b883a 	mov	r5,r2
 182d540:	01006134 	movhi	r4,388
 182d544:	2106d404 	addi	r4,r4,6992
 182d548:	1800bd80 	call	1800bd8 <printf>
 182d54c:	00006a06 	br	182d6f8 <getPHYSpeed+0x9d4>
				}
			}
			else if(pphy->pphy_profile->status_reg_location == 0)
 182d550:	e0bff917 	ldw	r2,-28(fp)
 182d554:	10800517 	ldw	r2,20(r2)
 182d558:	10801583 	ldbu	r2,86(r2)
 182d55c:	10803fcc 	andi	r2,r2,255
 182d560:	10002b1e 	bne	r2,zero,182d610 <getPHYSpeed+0x8ec>
	        {
	            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY Specific Status register information not provided in profile\n", mac_group_index, mac_info_index);
 182d564:	e0bffd47 	ldb	r2,-11(fp)
 182d568:	e0fffd07 	ldb	r3,-12(fp)
 182d56c:	180d883a 	mov	r6,r3
 182d570:	100b883a 	mov	r5,r2
 182d574:	01006134 	movhi	r4,388
 182d578:	2106e104 	addi	r4,r4,7044
 182d57c:	1800bd80 	call	1800bd8 <printf>
	            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 182d580:	00800044 	movi	r2,1
 182d584:	e0bff705 	stb	r2,-36(fp)
	            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 182d588:	00800044 	movi	r2,1
 182d58c:	e0bff745 	stb	r2,-35(fp)
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_PROFILE_INCORRECT_DEFINED;
 182d590:	e0bff743 	ldbu	r2,-35(fp)
 182d594:	10c0004c 	andi	r3,r2,1
 182d598:	e0bff703 	ldbu	r2,-36(fp)
 182d59c:	10800098 	cmpnei	r2,r2,2
 182d5a0:	1000021e 	bne	r2,zero,182d5ac <getPHYSpeed+0x888>
 182d5a4:	00800084 	movi	r2,2
 182d5a8:	00000106 	br	182d5b0 <getPHYSpeed+0x88c>
 182d5ac:	0005883a 	mov	r2,zero
 182d5b0:	1886b03a 	or	r3,r3,r2
 182d5b4:	e0bff703 	ldbu	r2,-36(fp)
 182d5b8:	10800058 	cmpnei	r2,r2,1
 182d5bc:	1000021e 	bne	r2,zero,182d5c8 <getPHYSpeed+0x8a4>
 182d5c0:	00800104 	movi	r2,4
 182d5c4:	00000106 	br	182d5cc <getPHYSpeed+0x8a8>
 182d5c8:	0005883a 	mov	r2,zero
 182d5cc:	1886b03a 	or	r3,r3,r2
 182d5d0:	e0bff703 	ldbu	r2,-36(fp)
 182d5d4:	1000021e 	bne	r2,zero,182d5e0 <getPHYSpeed+0x8bc>
 182d5d8:	00800204 	movi	r2,8
 182d5dc:	00000106 	br	182d5e4 <getPHYSpeed+0x8c0>
 182d5e0:	0005883a 	mov	r2,zero
 182d5e4:	1886b03a 	or	r3,r3,r2
 182d5e8:	e0bff703 	ldbu	r2,-36(fp)
 182d5ec:	108000d8 	cmpnei	r2,r2,3
 182d5f0:	1000021e 	bne	r2,zero,182d5fc <getPHYSpeed+0x8d8>
 182d5f4:	00800074 	movhi	r2,1
 182d5f8:	00000106 	br	182d600 <getPHYSpeed+0x8dc>
 182d5fc:	0005883a 	mov	r2,zero
 182d600:	1884b03a 	or	r2,r3,r2
 182d604:	108000b4 	orhi	r2,r2,2
 182d608:	e0bff815 	stw	r2,-32(fp)
 182d60c:	00003a06 	br	182d6f8 <getPHYSpeed+0x9d4>
	        }
	        else
	        {
	            /* extract connection speed and duplex information */
	        	speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 182d610:	e0bff917 	ldw	r2,-28(fp)
 182d614:	10800517 	ldw	r2,20(r2)
 182d618:	10801583 	ldbu	r2,86(r2)
 182d61c:	10c03fcc 	andi	r3,r2,255
 182d620:	e0bff917 	ldw	r2,-28(fp)
 182d624:	10800517 	ldw	r2,20(r2)
 182d628:	108015c3 	ldbu	r2,87(r2)
 182d62c:	10803fcc 	andi	r2,r2,255
 182d630:	01c00084 	movi	r7,2
 182d634:	100d883a 	mov	r6,r2
 182d638:	180b883a 	mov	r5,r3
 182d63c:	e13ff917 	ldw	r4,-28(fp)
 182d640:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182d644:	e0bff705 	stb	r2,-36(fp)
	            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 182d648:	e0bff917 	ldw	r2,-28(fp)
 182d64c:	10800517 	ldw	r2,20(r2)
 182d650:	10801583 	ldbu	r2,86(r2)
 182d654:	10c03fcc 	andi	r3,r2,255
 182d658:	e0bff917 	ldw	r2,-28(fp)
 182d65c:	10800517 	ldw	r2,20(r2)
 182d660:	10801603 	ldbu	r2,88(r2)
 182d664:	10803fcc 	andi	r2,r2,255
 182d668:	01c00044 	movi	r7,1
 182d66c:	100d883a 	mov	r6,r2
 182d670:	180b883a 	mov	r5,r3
 182d674:	e13ff917 	ldw	r4,-28(fp)
 182d678:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182d67c:	e0bff745 	stb	r2,-35(fp)
				
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 182d680:	e0bff743 	ldbu	r2,-35(fp)
 182d684:	10c0004c 	andi	r3,r2,1
 182d688:	e0bff703 	ldbu	r2,-36(fp)
 182d68c:	10800098 	cmpnei	r2,r2,2
 182d690:	1000021e 	bne	r2,zero,182d69c <getPHYSpeed+0x978>
 182d694:	00800084 	movi	r2,2
 182d698:	00000106 	br	182d6a0 <getPHYSpeed+0x97c>
 182d69c:	0005883a 	mov	r2,zero
 182d6a0:	1886b03a 	or	r3,r3,r2
 182d6a4:	e0bff703 	ldbu	r2,-36(fp)
 182d6a8:	10800058 	cmpnei	r2,r2,1
 182d6ac:	1000021e 	bne	r2,zero,182d6b8 <getPHYSpeed+0x994>
 182d6b0:	00800104 	movi	r2,4
 182d6b4:	00000106 	br	182d6bc <getPHYSpeed+0x998>
 182d6b8:	0005883a 	mov	r2,zero
 182d6bc:	1886b03a 	or	r3,r3,r2
 182d6c0:	e0bff703 	ldbu	r2,-36(fp)
 182d6c4:	1000021e 	bne	r2,zero,182d6d0 <getPHYSpeed+0x9ac>
 182d6c8:	00800204 	movi	r2,8
 182d6cc:	00000106 	br	182d6d4 <getPHYSpeed+0x9b0>
 182d6d0:	0005883a 	mov	r2,zero
 182d6d4:	1886b03a 	or	r3,r3,r2
 182d6d8:	e0bff703 	ldbu	r2,-36(fp)
 182d6dc:	108000d8 	cmpnei	r2,r2,3
 182d6e0:	1000021e 	bne	r2,zero,182d6ec <getPHYSpeed+0x9c8>
 182d6e4:	00800074 	movhi	r2,1
 182d6e8:	00000106 	br	182d6f0 <getPHYSpeed+0x9cc>
 182d6ec:	0005883a 	mov	r2,zero
 182d6f0:	1884b03a 	or	r2,r3,r2
 182d6f4:	e0bff815 	stw	r2,-32(fp)
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 182d6f8:	e13ffd47 	ldb	r4,-11(fp)
 182d6fc:	e17ffd07 	ldb	r5,-12(fp)
 182d700:	e0bff703 	ldbu	r2,-36(fp)
 182d704:	108000a0 	cmpeqi	r2,r2,2
 182d708:	10000e1e 	bne	r2,zero,182d744 <getPHYSpeed+0xa20>
 182d70c:	e0bff703 	ldbu	r2,-36(fp)
 182d710:	10800060 	cmpeqi	r2,r2,1
 182d714:	1000081e 	bne	r2,zero,182d738 <getPHYSpeed+0xa14>
 182d718:	e0bff703 	ldbu	r2,-36(fp)
 182d71c:	1000031e 	bne	r2,zero,182d72c <getPHYSpeed+0xa08>
 182d720:	00806134 	movhi	r2,388
 182d724:	10864a04 	addi	r2,r2,6440
 182d728:	00000806 	br	182d74c <getPHYSpeed+0xa28>
 182d72c:	00806134 	movhi	r2,388
 182d730:	10864b04 	addi	r2,r2,6444
 182d734:	00000506 	br	182d74c <getPHYSpeed+0xa28>
 182d738:	00806134 	movhi	r2,388
 182d73c:	10864d04 	addi	r2,r2,6452
 182d740:	00000206 	br	182d74c <getPHYSpeed+0xa28>
 182d744:	00806134 	movhi	r2,388
 182d748:	10864e04 	addi	r2,r2,6456
 182d74c:	e0fff743 	ldbu	r3,-35(fp)
 182d750:	18c00058 	cmpnei	r3,r3,1
 182d754:	1800031e 	bne	r3,zero,182d764 <getPHYSpeed+0xa40>
 182d758:	00c06134 	movhi	r3,388
 182d75c:	18c65004 	addi	r3,r3,6464
 182d760:	00000206 	br	182d76c <getPHYSpeed+0xa48>
 182d764:	00c06134 	movhi	r3,388
 182d768:	18c65204 	addi	r3,r3,6472
 182d76c:	d8c00015 	stw	r3,0(sp)
 182d770:	100f883a 	mov	r7,r2
 182d774:	280d883a 	mov	r6,r5
 182d778:	200b883a 	mov	r5,r4
 182d77c:	01006134 	movhi	r4,388
 182d780:	2106f804 	addi	r4,r4,7136
 182d784:	1800bd80 	call	1800bd8 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");

    return result;
 182d788:	e0bff817 	ldw	r2,-32(fp)
}
 182d78c:	e037883a 	mov	sp,fp
 182d790:	dfc00117 	ldw	ra,4(sp)
 182d794:	df000017 	ldw	fp,0(sp)
 182d798:	dec00204 	addi	sp,sp,8
 182d79c:	f800283a 	ret

0182d7a0 <alt_tse_phy_rd_mdio_addr>:
/* @Function Description: Read MDIO address from the MDIO address1 register of first MAC within MAC group
 * @API Type:    Internal
 * @param pmac   Pointer to the alt_tse_phy_info structure
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_rd_mdio_addr(alt_tse_phy_info *pphy) {
 182d7a0:	defffd04 	addi	sp,sp,-12
 182d7a4:	df000215 	stw	fp,8(sp)
 182d7a8:	df000204 	addi	fp,sp,8
 182d7ac:	e13fff15 	stw	r4,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 182d7b0:	e0bfff17 	ldw	r2,-4(fp)
 182d7b4:	10800617 	ldw	r2,24(r2)
 182d7b8:	10800317 	ldw	r2,12(r2)
 182d7bc:	10800117 	ldw	r2,4(r2)
 182d7c0:	10800217 	ldw	r2,8(r2)
 182d7c4:	10800017 	ldw	r2,0(r2)
 182d7c8:	e0bffe15 	stw	r2,-8(fp)
    return IORD(&pmac_group_base->MDIO_ADDR1, 0);
 182d7cc:	e0bffe17 	ldw	r2,-8(fp)
 182d7d0:	10801004 	addi	r2,r2,64
 182d7d4:	10800037 	ldwio	r2,0(r2)
}
 182d7d8:	e037883a 	mov	sp,fp
 182d7dc:	df000017 	ldw	fp,0(sp)
 182d7e0:	dec00104 	addi	sp,sp,4
 182d7e4:	f800283a 	ret

0182d7e8 <alt_tse_phy_wr_mdio_addr>:
 * @API Type:           Internal
 * @param pmac          Pointer to the alt_tse_phy_info structure
 * @param mdio_address  MDIO address to be written
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_wr_mdio_addr(alt_tse_phy_info *pphy, alt_u8 mdio_address) {
 182d7e8:	defffc04 	addi	sp,sp,-16
 182d7ec:	df000315 	stw	fp,12(sp)
 182d7f0:	df000304 	addi	fp,sp,12
 182d7f4:	e13ffe15 	stw	r4,-8(fp)
 182d7f8:	2805883a 	mov	r2,r5
 182d7fc:	e0bfff05 	stb	r2,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 182d800:	e0bffe17 	ldw	r2,-8(fp)
 182d804:	10800617 	ldw	r2,24(r2)
 182d808:	10800317 	ldw	r2,12(r2)
 182d80c:	10800117 	ldw	r2,4(r2)
 182d810:	10800217 	ldw	r2,8(r2)
 182d814:	10800017 	ldw	r2,0(r2)
 182d818:	e0bffd15 	stw	r2,-12(fp)
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdio_address);
 182d81c:	e0bffd17 	ldw	r2,-12(fp)
 182d820:	10801004 	addi	r2,r2,64
 182d824:	e0ffff03 	ldbu	r3,-4(fp)
 182d828:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 182d82c:	0005883a 	mov	r2,zero
}
 182d830:	e037883a 	mov	sp,fp
 182d834:	df000017 	ldw	fp,0(sp)
 182d838:	dec00104 	addi	sp,sp,4
 182d83c:	f800283a 	ret

0182d840 <alt_tse_phy_wr_mdio_reg>:
  * @param  bit_length       number of bits to be written to the register.
  * @param  data             data to be written to the register at specific bit location of register.
  * @return SUCCESS 
  */
alt_32 alt_tse_phy_wr_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length, alt_u16 data)
{
 182d840:	defff604 	addi	sp,sp,-40
 182d844:	df000915 	stw	fp,36(sp)
 182d848:	df000904 	addi	fp,sp,36
 182d84c:	e13ffb15 	stw	r4,-20(fp)
 182d850:	3009883a 	mov	r4,r6
 182d854:	3807883a 	mov	r3,r7
 182d858:	e0800117 	ldw	r2,4(fp)
 182d85c:	e17ffc05 	stb	r5,-16(fp)
 182d860:	e13ffd05 	stb	r4,-12(fp)
 182d864:	e0fffe05 	stb	r3,-8(fp)
 182d868:	e0bfff0d 	sth	r2,-4(fp)
    
    alt_u16 temp_data;
    alt_u16 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 182d86c:	e0bffb17 	ldw	r2,-20(fp)
 182d870:	10800617 	ldw	r2,24(r2)
 182d874:	10800317 	ldw	r2,12(r2)
 182d878:	10800117 	ldw	r2,4(r2)
 182d87c:	10800217 	ldw	r2,8(r2)
 182d880:	10800017 	ldw	r2,0(r2)
 182d884:	e0bff915 	stw	r2,-28(fp)
    
    bit_mask = 0x00;
 182d888:	e03ff70d 	sth	zero,-36(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 182d88c:	e03ff815 	stw	zero,-32(fp)
 182d890:	00000906 	br	182d8b8 <alt_tse_phy_wr_mdio_reg+0x78>
    {
        bit_mask <<= 1;
 182d894:	e0bff70b 	ldhu	r2,-36(fp)
 182d898:	1085883a 	add	r2,r2,r2
 182d89c:	e0bff70d 	sth	r2,-36(fp)
        bit_mask |= 0x01;        
 182d8a0:	e0bff70b 	ldhu	r2,-36(fp)
 182d8a4:	10800054 	ori	r2,r2,1
 182d8a8:	e0bff70d 	sth	r2,-36(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 182d8ac:	e0bff817 	ldw	r2,-32(fp)
 182d8b0:	10800044 	addi	r2,r2,1
 182d8b4:	e0bff815 	stw	r2,-32(fp)
 182d8b8:	e0bffe03 	ldbu	r2,-8(fp)
 182d8bc:	e0fff817 	ldw	r3,-32(fp)
 182d8c0:	18bff416 	blt	r3,r2,182d894 <__alt_mem_mem_0+0xff80d894>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* shifting mask to left by bit_num */
    bit_mask <<= lsb_num;
 182d8c4:	e0fff70b 	ldhu	r3,-36(fp)
 182d8c8:	e0bffd03 	ldbu	r2,-12(fp)
 182d8cc:	1884983a 	sll	r2,r3,r2
 182d8d0:	e0bff70d 	sth	r2,-36(fp)

    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 182d8d4:	e0bff917 	ldw	r2,-28(fp)
 182d8d8:	10c0a004 	addi	r3,r2,640
 182d8dc:	e0bffc03 	ldbu	r2,-16(fp)
 182d8e0:	1085883a 	add	r2,r2,r2
 182d8e4:	1085883a 	add	r2,r2,r2
 182d8e8:	1885883a 	add	r2,r3,r2
 182d8ec:	10800037 	ldwio	r2,0(r2)
 182d8f0:	e0bffa0d 	sth	r2,-24(fp)
    
    /* clear bits to be written */
    temp_data &= ~bit_mask;
 182d8f4:	e0bff70b 	ldhu	r2,-36(fp)
 182d8f8:	0084303a 	nor	r2,zero,r2
 182d8fc:	1007883a 	mov	r3,r2
 182d900:	e0bffa0b 	ldhu	r2,-24(fp)
 182d904:	1884703a 	and	r2,r3,r2
 182d908:	e0bffa0d 	sth	r2,-24(fp)
    
    /* OR-ed together corresponding bits data */
    temp_data |= ((data << lsb_num) & bit_mask);    
 182d90c:	e0ffff0b 	ldhu	r3,-4(fp)
 182d910:	e0bffd03 	ldbu	r2,-12(fp)
 182d914:	1884983a 	sll	r2,r3,r2
 182d918:	1007883a 	mov	r3,r2
 182d91c:	e0bff70b 	ldhu	r2,-36(fp)
 182d920:	1884703a 	and	r2,r3,r2
 182d924:	1007883a 	mov	r3,r2
 182d928:	e0bffa0b 	ldhu	r2,-24(fp)
 182d92c:	1884b03a 	or	r2,r3,r2
 182d930:	e0bffa0d 	sth	r2,-24(fp)
    
    /* write data to MDIO register */
    IOWR(&pmac->mdio1, reg_num, temp_data);
 182d934:	e0bff917 	ldw	r2,-28(fp)
 182d938:	10c0a004 	addi	r3,r2,640
 182d93c:	e0bffc03 	ldbu	r2,-16(fp)
 182d940:	1085883a 	add	r2,r2,r2
 182d944:	1085883a 	add	r2,r2,r2
 182d948:	1885883a 	add	r2,r3,r2
 182d94c:	e0fffa0b 	ldhu	r3,-24(fp)
 182d950:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 182d954:	0005883a 	mov	r2,zero
    
}
 182d958:	e037883a 	mov	sp,fp
 182d95c:	df000017 	ldw	fp,0(sp)
 182d960:	dec00104 	addi	sp,sp,4
 182d964:	f800283a 	ret

0182d968 <alt_tse_phy_rd_mdio_reg>:
 * @param  bit_length       number of bits to be read from the register.
 * @return data read from MDIO register 
 */

alt_u32 alt_tse_phy_rd_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length)
{
 182d968:	defff704 	addi	sp,sp,-36
 182d96c:	df000815 	stw	fp,32(sp)
 182d970:	df000804 	addi	fp,sp,32
 182d974:	e13ffc15 	stw	r4,-16(fp)
 182d978:	2809883a 	mov	r4,r5
 182d97c:	3007883a 	mov	r3,r6
 182d980:	3805883a 	mov	r2,r7
 182d984:	e13ffd05 	stb	r4,-12(fp)
 182d988:	e0fffe05 	stb	r3,-8(fp)
 182d98c:	e0bfff05 	stb	r2,-4(fp)
    alt_u16 temp_data;
    alt_u32 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 182d990:	e0bffc17 	ldw	r2,-16(fp)
 182d994:	10800617 	ldw	r2,24(r2)
 182d998:	10800317 	ldw	r2,12(r2)
 182d99c:	10800117 	ldw	r2,4(r2)
 182d9a0:	10800217 	ldw	r2,8(r2)
 182d9a4:	10800017 	ldw	r2,0(r2)
 182d9a8:	e0bffa15 	stw	r2,-24(fp)
    
    bit_mask = 0x00;
 182d9ac:	e03ff815 	stw	zero,-32(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 182d9b0:	e03ff915 	stw	zero,-28(fp)
 182d9b4:	00000906 	br	182d9dc <alt_tse_phy_rd_mdio_reg+0x74>
    {
        bit_mask <<= 1;
 182d9b8:	e0bff817 	ldw	r2,-32(fp)
 182d9bc:	1085883a 	add	r2,r2,r2
 182d9c0:	e0bff815 	stw	r2,-32(fp)
        bit_mask |= 0x01;        
 182d9c4:	e0bff817 	ldw	r2,-32(fp)
 182d9c8:	10800054 	ori	r2,r2,1
 182d9cc:	e0bff815 	stw	r2,-32(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 182d9d0:	e0bff917 	ldw	r2,-28(fp)
 182d9d4:	10800044 	addi	r2,r2,1
 182d9d8:	e0bff915 	stw	r2,-28(fp)
 182d9dc:	e0bfff03 	ldbu	r2,-4(fp)
 182d9e0:	e0fff917 	ldw	r3,-28(fp)
 182d9e4:	18bff416 	blt	r3,r2,182d9b8 <__alt_mem_mem_0+0xff80d9b8>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 182d9e8:	e0bffa17 	ldw	r2,-24(fp)
 182d9ec:	10c0a004 	addi	r3,r2,640
 182d9f0:	e0bffd03 	ldbu	r2,-12(fp)
 182d9f4:	1085883a 	add	r2,r2,r2
 182d9f8:	1085883a 	add	r2,r2,r2
 182d9fc:	1885883a 	add	r2,r3,r2
 182da00:	10800037 	ldwio	r2,0(r2)
 182da04:	e0bffb0d 	sth	r2,-20(fp)
    
    /* shifting read data */
    temp_data >>= lsb_num;
 182da08:	e0fffb0b 	ldhu	r3,-20(fp)
 182da0c:	e0bffe03 	ldbu	r2,-8(fp)
 182da10:	1885d83a 	sra	r2,r3,r2
 182da14:	e0bffb0d 	sth	r2,-20(fp)
    
    return (temp_data & bit_mask);
 182da18:	e0fffb0b 	ldhu	r3,-20(fp)
 182da1c:	e0bff817 	ldw	r2,-32(fp)
 182da20:	1884703a 	and	r2,r3,r2
}
 182da24:	e037883a 	mov	sp,fp
 182da28:	df000017 	ldw	fp,0(sp)
 182da2c:	dec00104 	addi	sp,sp,4
 182da30:	f800283a 	ret

0182da34 <alt_tse_phy_add_profile_default>:
 * @param pmac  N/A
 * @return      Number of PHY in profile
 * 
 * User might add their own PHY by calling alt_tse_phy_add_profile()
 */
alt_32 alt_tse_phy_add_profile_default() {
 182da34:	deff9a04 	addi	sp,sp,-408
 182da38:	dfc06515 	stw	ra,404(sp)
 182da3c:	df006415 	stw	fp,400(sp)
 182da40:	df006404 	addi	fp,sp,400
        
    /* ------------------------------ */
    /* Marvell PHY on PHYWORKX board  */
    /* ------------------------------ */
    
    alt_tse_phy_profile MV88E1111 = {"Marvell 88E1111",      /* Marvell 88E1111                                  */
 182da44:	e0ff9c04 	addi	r3,fp,-400
 182da48:	00801904 	movi	r2,100
 182da4c:	100d883a 	mov	r6,r2
 182da50:	000b883a 	mov	r5,zero
 182da54:	1809883a 	mov	r4,r3
 182da58:	18061940 	call	1806194 <memset>
 182da5c:	009d9cb4 	movhi	r2,30322
 182da60:	10985344 	addi	r2,r2,24909
 182da64:	e0bf9c15 	stw	r2,-400(fp)
 182da68:	00881b34 	movhi	r2,8300
 182da6c:	109b1944 	addi	r2,r2,27749
 182da70:	e0bf9d15 	stw	r2,-396(fp)
 182da74:	008c5174 	movhi	r2,12613
 182da78:	108e0e04 	addi	r2,r2,14392
 182da7c:	e0bf9e15 	stw	r2,-392(fp)
 182da80:	00800c74 	movhi	r2,49
 182da84:	108c4c44 	addi	r2,r2,12593
 182da88:	e0bf9f15 	stw	r2,-388(fp)
 182da8c:	e0bfa004 	addi	r2,fp,-384
 182da90:	00c01004 	movi	r3,64
 182da94:	180d883a 	mov	r6,r3
 182da98:	000b883a 	mov	r5,zero
 182da9c:	1009883a 	mov	r4,r2
 182daa0:	18061940 	call	1806194 <memset>
 182daa4:	009410c4 	movi	r2,20547
 182daa8:	e0bfb015 	stw	r2,-320(fp)
 182daac:	00800304 	movi	r2,12
 182dab0:	e0bfb105 	stb	r2,-316(fp)
 182dab4:	00800084 	movi	r2,2
 182dab8:	e0bfb145 	stb	r2,-315(fp)
 182dabc:	00800444 	movi	r2,17
 182dac0:	e0bfb185 	stb	r2,-314(fp)
 182dac4:	00800384 	movi	r2,14
 182dac8:	e0bfb1c5 	stb	r2,-313(fp)
 182dacc:	00800344 	movi	r2,13
 182dad0:	e0bfb205 	stb	r2,-312(fp)
 182dad4:	00800284 	movi	r2,10
 182dad8:	e0bfb245 	stb	r2,-311(fp)
 182dadc:	008060f4 	movhi	r2,387
 182dae0:	10811f04 	addi	r2,r2,1148
 182dae4:	e0bfb315 	stw	r2,-308(fp)
    
    /* ---------------------------------- */
    /* Marvell Quad PHY on PHYWORKX board */
    /* ---------------------------------- */
    
    alt_tse_phy_profile MV88E1145 = {"Marvell Quad PHY 88E1145",      /* Marvell 88E1145                                  */
 182dae8:	e0bfb504 	addi	r2,fp,-300
 182daec:	00c01904 	movi	r3,100
 182daf0:	180d883a 	mov	r6,r3
 182daf4:	000b883a 	mov	r5,zero
 182daf8:	1009883a 	mov	r4,r2
 182dafc:	18061940 	call	1806194 <memset>
 182db00:	009d9cb4 	movhi	r2,30322
 182db04:	10985344 	addi	r2,r2,24909
 182db08:	e0bfb515 	stw	r2,-300(fp)
 182db0c:	00881b34 	movhi	r2,8300
 182db10:	109b1944 	addi	r2,r2,27749
 182db14:	e0bfb615 	stw	r2,-296(fp)
 182db18:	00991874 	movhi	r2,25697
 182db1c:	109d5444 	addi	r2,r2,30033
 182db20:	e0bfb715 	stw	r2,-292(fp)
 182db24:	00965234 	movhi	r2,22856
 182db28:	10940804 	addi	r2,r2,20512
 182db2c:	e0bfb815 	stw	r2,-288(fp)
 182db30:	00914e34 	movhi	r2,17720
 182db34:	108e0804 	addi	r2,r2,14368
 182db38:	e0bfb915 	stw	r2,-284(fp)
 182db3c:	008d4d34 	movhi	r2,13620
 182db40:	108c4c44 	addi	r2,r2,12593
 182db44:	e0bfba15 	stw	r2,-280(fp)
 182db48:	e03fbb15 	stw	zero,-276(fp)
 182db4c:	e03fbc15 	stw	zero,-272(fp)
 182db50:	e03fbd15 	stw	zero,-268(fp)
 182db54:	e03fbe15 	stw	zero,-264(fp)
 182db58:	e03fbf15 	stw	zero,-260(fp)
 182db5c:	e03fc015 	stw	zero,-256(fp)
 182db60:	e03fc115 	stw	zero,-252(fp)
 182db64:	e03fc215 	stw	zero,-248(fp)
 182db68:	e03fc315 	stw	zero,-244(fp)
 182db6c:	e03fc415 	stw	zero,-240(fp)
 182db70:	e03fc515 	stw	zero,-236(fp)
 182db74:	e03fc615 	stw	zero,-232(fp)
 182db78:	e03fc715 	stw	zero,-228(fp)
 182db7c:	e03fc815 	stw	zero,-224(fp)
 182db80:	009410c4 	movi	r2,20547
 182db84:	e0bfc915 	stw	r2,-220(fp)
 182db88:	00800344 	movi	r2,13
 182db8c:	e0bfca05 	stb	r2,-216(fp)
 182db90:	00800084 	movi	r2,2
 182db94:	e0bfca45 	stb	r2,-215(fp)
 182db98:	00800444 	movi	r2,17
 182db9c:	e0bfca85 	stb	r2,-214(fp)
 182dba0:	00800384 	movi	r2,14
 182dba4:	e0bfcac5 	stb	r2,-213(fp)
 182dba8:	00800344 	movi	r2,13
 182dbac:	e0bfcb05 	stb	r2,-212(fp)
 182dbb0:	00800284 	movi	r2,10
 182dbb4:	e0bfcb45 	stb	r2,-211(fp)
 182dbb8:	008060f4 	movhi	r2,387
 182dbbc:	10811f04 	addi	r2,r2,1148
 182dbc0:	e0bfcc15 	stw	r2,-208(fp)
                      
    /* ------------------------------ */
    /* National PHY on PHYWORKX board */
    /* ------------------------------ */  
    
    alt_tse_phy_profile DP83865 = {"National DP83865",     /* National DP83865                                 */
 182dbc4:	e0bfce04 	addi	r2,fp,-200
 182dbc8:	00c01904 	movi	r3,100
 182dbcc:	180d883a 	mov	r6,r3
 182dbd0:	000b883a 	mov	r5,zero
 182dbd4:	1009883a 	mov	r4,r2
 182dbd8:	18061940 	call	1806194 <memset>
 182dbdc:	009a5d34 	movhi	r2,26996
 182dbe0:	10985384 	addi	r2,r2,24910
 182dbe4:	e0bfce15 	stw	r2,-200(fp)
 182dbe8:	009b1874 	movhi	r2,27745
 182dbec:	109b9bc4 	addi	r2,r2,28271
 182dbf0:	e0bfcf15 	stw	r2,-196(fp)
 182dbf4:	008e1434 	movhi	r2,14416
 182dbf8:	10910804 	addi	r2,r2,17440
 182dbfc:	e0bfd015 	stw	r2,-192(fp)
 182dc00:	008d4db4 	movhi	r2,13622
 182dc04:	108e0cc4 	addi	r2,r2,14387
 182dc08:	e0bfd115 	stw	r2,-188(fp)
 182dc0c:	e03fd215 	stw	zero,-184(fp)
 182dc10:	e0bfd304 	addi	r2,fp,-180
 182dc14:	00c00f04 	movi	r3,60
 182dc18:	180d883a 	mov	r6,r3
 182dc1c:	000b883a 	mov	r5,zero
 182dc20:	1009883a 	mov	r4,r2
 182dc24:	18061940 	call	1806194 <memset>
 182dc28:	00800234 	movhi	r2,8
 182dc2c:	108005c4 	addi	r2,r2,23
 182dc30:	e0bfe215 	stw	r2,-120(fp)
 182dc34:	008001c4 	movi	r2,7
 182dc38:	e0bfe305 	stb	r2,-116(fp)
 182dc3c:	00800284 	movi	r2,10
 182dc40:	e0bfe345 	stb	r2,-115(fp)
 182dc44:	00800444 	movi	r2,17
 182dc48:	e0bfe385 	stb	r2,-114(fp)
 182dc4c:	008000c4 	movi	r2,3
 182dc50:	e0bfe3c5 	stb	r2,-113(fp)
 182dc54:	00800044 	movi	r2,1
 182dc58:	e0bfe405 	stb	r2,-112(fp)
 182dc5c:	00800084 	movi	r2,2
 182dc60:	e0bfe445 	stb	r2,-111(fp)
                      
    /* -------------------------------------- */
    /* National 10/100 PHY on PHYWORKX board  */
    /* -------------------------------------- */ 
                      
    alt_tse_phy_profile DP83848C = {"National DP83848C",  /* National DP83848C                                          */
 182dc64:	00806134 	movhi	r2,388
 182dc68:	10870404 	addi	r2,r2,7184
 182dc6c:	e0ffe704 	addi	r3,fp,-100
 182dc70:	1009883a 	mov	r4,r2
 182dc74:	00801904 	movi	r2,100
 182dc78:	100d883a 	mov	r6,r2
 182dc7c:	200b883a 	mov	r5,r4
 182dc80:	1809883a 	mov	r4,r3
 182dc84:	180604c0 	call	180604c <memcpy>
						   0,                              /* No function pointer configure National DP83848C            */
						   &DP83848C_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
                      
    /* add supported PHY to profile */                          
    alt_tse_phy_add_profile(&MV88E1111);
 182dc88:	e13f9c04 	addi	r4,fp,-400
 182dc8c:	182bbb00 	call	182bbb0 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&MV88E1145);
 182dc90:	e0bfb504 	addi	r2,fp,-300
 182dc94:	1009883a 	mov	r4,r2
 182dc98:	182bbb00 	call	182bbb0 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83865);
 182dc9c:	e0bfce04 	addi	r2,fp,-200
 182dca0:	1009883a 	mov	r4,r2
 182dca4:	182bbb00 	call	182bbb0 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83848C);
 182dca8:	e0bfe704 	addi	r2,fp,-100
 182dcac:	1009883a 	mov	r4,r2
 182dcb0:	182bbb00 	call	182bbb0 <alt_tse_phy_add_profile>
    
    
    return phy_profile_count;
 182dcb4:	d0a80e03 	ldbu	r2,-24520(gp)
 182dcb8:	10803fcc 	andi	r2,r2,255
}
 182dcbc:	e037883a 	mov	sp,fp
 182dcc0:	dfc00117 	ldw	ra,4(sp)
 182dcc4:	df000017 	ldw	fp,0(sp)
 182dcc8:	dec00204 	addi	sp,sp,8
 182dccc:	f800283a 	ret

0182dcd0 <alt_tse_phy_print_profile>:
/* @Function Description: Display PHYs available in profile
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      Number of PHY in profile
 */
alt_32 alt_tse_phy_print_profile() {
 182dcd0:	defffd04 	addi	sp,sp,-12
 182dcd4:	dfc00215 	stw	ra,8(sp)
 182dcd8:	df000115 	stw	fp,4(sp)
 182dcdc:	df000104 	addi	fp,sp,4
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
 182dce0:	d0a80e03 	ldbu	r2,-24520(gp)
 182dce4:	10803fcc 	andi	r2,r2,255
 182dce8:	100b883a 	mov	r5,r2
 182dcec:	01006134 	movhi	r4,388
 182dcf0:	21071d04 	addi	r4,r4,7284
 182dcf4:	182b8680 	call	182b868 <no_printf>
    
    for(i = 0; i < phy_profile_count; i++)
 182dcf8:	e03fff05 	stb	zero,-4(fp)
 182dcfc:	00006d06 	br	182deb4 <alt_tse_phy_print_profile+0x1e4>
    {
        tse_dprintf(6, "Profile No.%2d   :\n", i);
 182dd00:	e0bfff07 	ldb	r2,-4(fp)
 182dd04:	100b883a 	mov	r5,r2
 182dd08:	01006134 	movhi	r4,388
 182dd0c:	21072c04 	addi	r4,r4,7344
 182dd10:	182b8680 	call	182b868 <no_printf>
        tse_dprintf(6, "PHY Name        : %s\n", pphy_profiles[i]->name);
 182dd14:	e0ffff07 	ldb	r3,-4(fp)
 182dd18:	008061f4 	movhi	r2,391
 182dd1c:	10a85604 	addi	r2,r2,-24232
 182dd20:	18c7883a 	add	r3,r3,r3
 182dd24:	18c7883a 	add	r3,r3,r3
 182dd28:	10c5883a 	add	r2,r2,r3
 182dd2c:	10800017 	ldw	r2,0(r2)
 182dd30:	100b883a 	mov	r5,r2
 182dd34:	01006134 	movhi	r4,388
 182dd38:	21073104 	addi	r4,r4,7364
 182dd3c:	182b8680 	call	182b868 <no_printf>
   
        tse_dprintf(6, "PHY OUI         : 0x%06x\n", (int)pphy_profiles[i]->oui);
 182dd40:	e0ffff07 	ldb	r3,-4(fp)
 182dd44:	008061f4 	movhi	r2,391
 182dd48:	10a85604 	addi	r2,r2,-24232
 182dd4c:	18c7883a 	add	r3,r3,r3
 182dd50:	18c7883a 	add	r3,r3,r3
 182dd54:	10c5883a 	add	r2,r2,r3
 182dd58:	10800017 	ldw	r2,0(r2)
 182dd5c:	10801417 	ldw	r2,80(r2)
 182dd60:	100b883a 	mov	r5,r2
 182dd64:	01006134 	movhi	r4,388
 182dd68:	21073704 	addi	r4,r4,7388
 182dd6c:	182b8680 	call	182b868 <no_printf>
        tse_dprintf(6, "PHY Model Num.  : 0x%02x\n", pphy_profiles[i]->model_number);
 182dd70:	e0ffff07 	ldb	r3,-4(fp)
 182dd74:	008061f4 	movhi	r2,391
 182dd78:	10a85604 	addi	r2,r2,-24232
 182dd7c:	18c7883a 	add	r3,r3,r3
 182dd80:	18c7883a 	add	r3,r3,r3
 182dd84:	10c5883a 	add	r2,r2,r3
 182dd88:	10800017 	ldw	r2,0(r2)
 182dd8c:	10801503 	ldbu	r2,84(r2)
 182dd90:	10803fcc 	andi	r2,r2,255
 182dd94:	100b883a 	mov	r5,r2
 182dd98:	01006134 	movhi	r4,388
 182dd9c:	21073e04 	addi	r4,r4,7416
 182dda0:	182b8680 	call	182b868 <no_printf>
        tse_dprintf(6, "PHY Rev. Num.   : 0x%02x\n", pphy_profiles[i]->revision_number);
 182dda4:	e0ffff07 	ldb	r3,-4(fp)
 182dda8:	008061f4 	movhi	r2,391
 182ddac:	10a85604 	addi	r2,r2,-24232
 182ddb0:	18c7883a 	add	r3,r3,r3
 182ddb4:	18c7883a 	add	r3,r3,r3
 182ddb8:	10c5883a 	add	r2,r2,r3
 182ddbc:	10800017 	ldw	r2,0(r2)
 182ddc0:	10801543 	ldbu	r2,85(r2)
 182ddc4:	10803fcc 	andi	r2,r2,255
 182ddc8:	100b883a 	mov	r5,r2
 182ddcc:	01006134 	movhi	r4,388
 182ddd0:	21074504 	addi	r4,r4,7444
 182ddd4:	182b8680 	call	182b868 <no_printf>
        
        tse_dprintf(6, "Status Register : 0x%02x\n", pphy_profiles[i]->status_reg_location); 
 182ddd8:	e0ffff07 	ldb	r3,-4(fp)
 182dddc:	008061f4 	movhi	r2,391
 182dde0:	10a85604 	addi	r2,r2,-24232
 182dde4:	18c7883a 	add	r3,r3,r3
 182dde8:	18c7883a 	add	r3,r3,r3
 182ddec:	10c5883a 	add	r2,r2,r3
 182ddf0:	10800017 	ldw	r2,0(r2)
 182ddf4:	10801583 	ldbu	r2,86(r2)
 182ddf8:	10803fcc 	andi	r2,r2,255
 182ddfc:	100b883a 	mov	r5,r2
 182de00:	01006134 	movhi	r4,388
 182de04:	21074c04 	addi	r4,r4,7472
 182de08:	182b8680 	call	182b868 <no_printf>
        
        tse_dprintf(6, "Speed Bit       : %d\n", pphy_profiles[i]->speed_lsb_location);
 182de0c:	e0ffff07 	ldb	r3,-4(fp)
 182de10:	008061f4 	movhi	r2,391
 182de14:	10a85604 	addi	r2,r2,-24232
 182de18:	18c7883a 	add	r3,r3,r3
 182de1c:	18c7883a 	add	r3,r3,r3
 182de20:	10c5883a 	add	r2,r2,r3
 182de24:	10800017 	ldw	r2,0(r2)
 182de28:	108015c3 	ldbu	r2,87(r2)
 182de2c:	10803fcc 	andi	r2,r2,255
 182de30:	100b883a 	mov	r5,r2
 182de34:	01006134 	movhi	r4,388
 182de38:	21075304 	addi	r4,r4,7500
 182de3c:	182b8680 	call	182b868 <no_printf>
        
        tse_dprintf(6, "Duplex Bit      : %d\n", pphy_profiles[i]->duplex_bit_location);
 182de40:	e0ffff07 	ldb	r3,-4(fp)
 182de44:	008061f4 	movhi	r2,391
 182de48:	10a85604 	addi	r2,r2,-24232
 182de4c:	18c7883a 	add	r3,r3,r3
 182de50:	18c7883a 	add	r3,r3,r3
 182de54:	10c5883a 	add	r2,r2,r3
 182de58:	10800017 	ldw	r2,0(r2)
 182de5c:	10801603 	ldbu	r2,88(r2)
 182de60:	10803fcc 	andi	r2,r2,255
 182de64:	100b883a 	mov	r5,r2
 182de68:	01006134 	movhi	r4,388
 182de6c:	21075904 	addi	r4,r4,7524
 182de70:	182b8680 	call	182b868 <no_printf>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 182de74:	e0ffff07 	ldb	r3,-4(fp)
 182de78:	008061f4 	movhi	r2,391
 182de7c:	10a85604 	addi	r2,r2,-24232
 182de80:	18c7883a 	add	r3,r3,r3
 182de84:	18c7883a 	add	r3,r3,r3
 182de88:	10c5883a 	add	r2,r2,r3
 182de8c:	10800017 	ldw	r2,0(r2)
 182de90:	10801643 	ldbu	r2,89(r2)
 182de94:	10803fcc 	andi	r2,r2,255
 182de98:	100b883a 	mov	r5,r2
 182de9c:	01006134 	movhi	r4,388
 182dea0:	21075f04 	addi	r4,r4,7548
 182dea4:	182b8680 	call	182b868 <no_printf>
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
    
    for(i = 0; i < phy_profile_count; i++)
 182dea8:	e0bfff03 	ldbu	r2,-4(fp)
 182deac:	10800044 	addi	r2,r2,1
 182deb0:	e0bfff05 	stb	r2,-4(fp)
 182deb4:	e0ffff07 	ldb	r3,-4(fp)
 182deb8:	d0a80e03 	ldbu	r2,-24520(gp)
 182debc:	10803fcc 	andi	r2,r2,255
 182dec0:	18bf8f16 	blt	r3,r2,182dd00 <__alt_mem_mem_0+0xff80dd00>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 
    }
    
    return phy_profile_count;
 182dec4:	d0a80e03 	ldbu	r2,-24520(gp)
 182dec8:	10803fcc 	andi	r2,r2,255
}
 182decc:	e037883a 	mov	sp,fp
 182ded0:	dfc00117 	ldw	ra,4(sp)
 182ded4:	df000017 	ldw	fp,0(sp)
 182ded8:	dec00204 	addi	sp,sp,8
 182dedc:	f800283a 	ret

0182dee0 <alt_tse_mac_group_init>:
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      return SUCCESS
 *              return ALTERA_TSE_SYSTEM_DEF_ERROR if alt_tse_system_info structure definition error
 */
alt_32 alt_tse_mac_group_init() {
 182dee0:	defffa04 	addi	sp,sp,-24
 182dee4:	dfc00515 	stw	ra,20(sp)
 182dee8:	df000415 	stw	fp,16(sp)
 182deec:	df000404 	addi	fp,sp,16
    
	alt_8 i;
	alt_8 j;
    
    alt_tse_mac_group *pmac_group = 0;
 182def0:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 182def4:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_system_info *psys = 0;
 182def8:	e03fff15 	stw	zero,-4(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
 182defc:	d0280e45 	stb	zero,-24519(gp)
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 182df00:	e03ffc05 	stb	zero,-16(fp)
 182df04:	00019506 	br	182e55c <alt_tse_mac_group_init+0x67c>
        psys = &tse_mac_device[i];
 182df08:	e0bffc07 	ldb	r2,-16(fp)
 182df0c:	10c01224 	muli	r3,r2,72
 182df10:	00806134 	movhi	r2,388
 182df14:	10946304 	addi	r2,r2,20876
 182df18:	1885883a 	add	r2,r3,r2
 182df1c:	e0bfff15 	stw	r2,-4(fp)

        if((psys->tse_sgdma_tx != 0) && (psys->tse_sgdma_rx != 0)) {    	
 182df20:	e0bfff17 	ldw	r2,-4(fp)
 182df24:	10800517 	ldw	r2,20(r2)
 182df28:	10018926 	beq	r2,zero,182e550 <alt_tse_mac_group_init+0x670>
 182df2c:	e0bfff17 	ldw	r2,-4(fp)
 182df30:	10800617 	ldw	r2,24(r2)
 182df34:	10018626 	beq	r2,zero,182e550 <alt_tse_mac_group_init+0x670>
            tse_dprintf(5, "INFO    : TSE MAC %d found at address 0x%08x\n", mac_group_count, (int) psys->tse_mac_base);
 182df38:	d0a80e43 	ldbu	r2,-24519(gp)
 182df3c:	10c03fcc 	andi	r3,r2,255
 182df40:	e0bfff17 	ldw	r2,-4(fp)
 182df44:	10800017 	ldw	r2,0(r2)
 182df48:	100d883a 	mov	r6,r2
 182df4c:	180b883a 	mov	r5,r3
 182df50:	01006134 	movhi	r4,388
 182df54:	21076504 	addi	r4,r4,7572
 182df58:	1800bd80 	call	1800bd8 <printf>
            
            /* Allocate memory for the structure */
            pmac_group = (alt_tse_mac_group *) malloc(sizeof(alt_tse_mac_group));
 182df5c:	01000904 	movi	r4,36
 182df60:	183c6bc0 	call	183c6bc <malloc>
 182df64:	e0bffd15 	stw	r2,-12(fp)
            if(!pmac_group) {
 182df68:	e0bffd17 	ldw	r2,-12(fp)
 182df6c:	1000081e 	bne	r2,zero,182df90 <alt_tse_mac_group_init+0xb0>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]\n", mac_group_count);
 182df70:	d0a80e43 	ldbu	r2,-24519(gp)
 182df74:	10803fcc 	andi	r2,r2,255
 182df78:	100b883a 	mov	r5,r2
 182df7c:	01006134 	movhi	r4,388
 182df80:	21077104 	addi	r4,r4,7620
 182df84:	1800bd80 	call	1800bd8 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 182df88:	00bfffc4 	movi	r2,-1
 182df8c:	00017806 	br	182e570 <alt_tse_mac_group_init+0x690>
            }
           
            /* Non-multi-channel MAC considered as 1 channel */
            if(psys->tse_multichannel_mac) {
 182df90:	e0bfff17 	ldw	r2,-4(fp)
 182df94:	108002c3 	ldbu	r2,11(r2)
 182df98:	10803fcc 	andi	r2,r2,255
 182df9c:	10001226 	beq	r2,zero,182dfe8 <alt_tse_mac_group_init+0x108>
                pmac_group->channel = psys->tse_num_of_channel;
 182dfa0:	e0bfff17 	ldw	r2,-4(fp)
 182dfa4:	10c00303 	ldbu	r3,12(r2)
 182dfa8:	e0bffd17 	ldw	r2,-12(fp)
 182dfac:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = Yes\n");
 182dfb0:	01006134 	movhi	r4,388
 182dfb4:	21077f04 	addi	r4,r4,7676
 182dfb8:	182b8680 	call	182b868 <no_printf>
                tse_dprintf(6, "INFO    : Number of channel        = %d\n", pmac_group->channel);
 182dfbc:	e0bffd17 	ldw	r2,-12(fp)
 182dfc0:	10800003 	ldbu	r2,0(r2)
 182dfc4:	10803fcc 	andi	r2,r2,255
 182dfc8:	100b883a 	mov	r5,r2
 182dfcc:	01006134 	movhi	r4,388
 182dfd0:	21078a04 	addi	r4,r4,7720
 182dfd4:	182b8680 	call	182b868 <no_printf>
            	tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 182dfd8:	01006134 	movhi	r4,388
 182dfdc:	21079504 	addi	r4,r4,7764
 182dfe0:	182b8680 	call	182b868 <no_printf>
 182dfe4:	00001f06 	br	182e064 <alt_tse_mac_group_init+0x184>
            }
            else if(psys->tse_mdio_shared) {
 182dfe8:	e0bfff17 	ldw	r2,-4(fp)
 182dfec:	10800343 	ldbu	r2,13(r2)
 182dff0:	10803fcc 	andi	r2,r2,255
 182dff4:	10001226 	beq	r2,zero,182e040 <alt_tse_mac_group_init+0x160>
                pmac_group->channel = psys->tse_number_of_mac_mdio_shared;
 182dff8:	e0bfff17 	ldw	r2,-4(fp)
 182dffc:	10c00383 	ldbu	r3,14(r2)
 182e000:	e0bffd17 	ldw	r2,-12(fp)
 182e004:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 182e008:	01006134 	movhi	r4,388
 182e00c:	2107a004 	addi	r4,r4,7808
 182e010:	182b8680 	call	182b868 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 182e014:	01006134 	movhi	r4,388
 182e018:	21079504 	addi	r4,r4,7764
 182e01c:	182b8680 	call	182b868 <no_printf>
                tse_dprintf(6, "INFO    : Number of MAC Share MDIO = %d\n", pmac_group->channel);
 182e020:	e0bffd17 	ldw	r2,-12(fp)
 182e024:	10800003 	ldbu	r2,0(r2)
 182e028:	10803fcc 	andi	r2,r2,255
 182e02c:	100b883a 	mov	r5,r2
 182e030:	01006134 	movhi	r4,388
 182e034:	2107ab04 	addi	r4,r4,7852
 182e038:	182b8680 	call	182b868 <no_printf>
 182e03c:	00000906 	br	182e064 <alt_tse_mac_group_init+0x184>
            }
            else {
                pmac_group->channel = 1;
 182e040:	e0bffd17 	ldw	r2,-12(fp)
 182e044:	00c00044 	movi	r3,1
 182e048:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 182e04c:	01006134 	movhi	r4,388
 182e050:	2107a004 	addi	r4,r4,7808
 182e054:	182b8680 	call	182b868 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
 182e058:	01006134 	movhi	r4,388
 182e05c:	2107b604 	addi	r4,r4,7896
 182e060:	182b8680 	call	182b868 <no_printf>
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 182e064:	e03ffc45 	stb	zero,-15(fp)
 182e068:	00012206 	br	182e4f4 <alt_tse_mac_group_init+0x614>
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
 182e06c:	01000404 	movi	r4,16
 182e070:	183c6bc0 	call	183c6bc <malloc>
 182e074:	e0bffe15 	stw	r2,-8(fp)
                if(!pmac_info) {
 182e078:	e0bffe17 	ldw	r2,-8(fp)
 182e07c:	10000a1e 	bne	r2,zero,182e0a8 <alt_tse_mac_group_init+0x1c8>
                    tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]->pmac_info[%d]\n", mac_group_count, j);
 182e080:	d0a80e43 	ldbu	r2,-24519(gp)
 182e084:	10803fcc 	andi	r2,r2,255
 182e088:	e0fffc47 	ldb	r3,-15(fp)
 182e08c:	180d883a 	mov	r6,r3
 182e090:	100b883a 	mov	r5,r2
 182e094:	01006134 	movhi	r4,388
 182e098:	2107c104 	addi	r4,r4,7940
 182e09c:	1800bd80 	call	1800bd8 <printf>
                    return ALTERA_TSE_MALLOC_FAILED;
 182e0a0:	00bfffc4 	movi	r2,-1
 182e0a4:	00013206 	br	182e570 <alt_tse_mac_group_init+0x690>
                }
                
                pmac_info->pmac_group = pmac_group;
 182e0a8:	e0bffe17 	ldw	r2,-8(fp)
 182e0ac:	e0fffd17 	ldw	r3,-12(fp)
 182e0b0:	10c00315 	stw	r3,12(r2)
                
                pmac_info->pphy_info = 0;
 182e0b4:	e0bffe17 	ldw	r2,-8(fp)
 182e0b8:	10000115 	stw	zero,4(r2)
                
                pmac_info->psys_info = &tse_mac_device[i + j];
 182e0bc:	e0fffc07 	ldb	r3,-16(fp)
 182e0c0:	e0bffc47 	ldb	r2,-15(fp)
 182e0c4:	1885883a 	add	r2,r3,r2
 182e0c8:	10c01224 	muli	r3,r2,72
 182e0cc:	00806134 	movhi	r2,388
 182e0d0:	10946304 	addi	r2,r2,20876
 182e0d4:	1887883a 	add	r3,r3,r2
 182e0d8:	e0bffe17 	ldw	r2,-8(fp)
 182e0dc:	10c00215 	stw	r3,8(r2)
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_sgdma_tx == 0) || (pmac_info->psys_info->tse_sgdma_rx == 0)){                	
 182e0e0:	e0bffe17 	ldw	r2,-8(fp)
 182e0e4:	10800217 	ldw	r2,8(r2)
 182e0e8:	10800517 	ldw	r2,20(r2)
 182e0ec:	10000426 	beq	r2,zero,182e100 <alt_tse_mac_group_init+0x220>
 182e0f0:	e0bffe17 	ldw	r2,-8(fp)
 182e0f4:	10800217 	ldw	r2,8(r2)
 182e0f8:	10800617 	ldw	r2,24(r2)
 182e0fc:	1000091e 	bne	r2,zero,182e124 <alt_tse_mac_group_init+0x244>
                    tse_dprintf(2, "ERROR   : tse_mac_device[%d] does not defined correctly!\n", i + j);
 182e100:	e0fffc07 	ldb	r3,-16(fp)
 182e104:	e0bffc47 	ldb	r2,-15(fp)
 182e108:	1885883a 	add	r2,r3,r2
 182e10c:	100b883a 	mov	r5,r2
 182e110:	01006134 	movhi	r4,388
 182e114:	2107d304 	addi	r4,r4,8012
 182e118:	1800bd80 	call	1800bd8 <printf>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
 182e11c:	00bfffc4 	movi	r2,-1
 182e120:	00011306 	br	182e570 <alt_tse_mac_group_init+0x690>
                }
                
                /* MAC type detection */
                if(pmac_info->psys_info->tse_en_maclite) {
 182e124:	e0bffe17 	ldw	r2,-8(fp)
 182e128:	10800217 	ldw	r2,8(r2)
 182e12c:	10800243 	ldbu	r2,9(r2)
 182e130:	10803fcc 	andi	r2,r2,255
 182e134:	10000d26 	beq	r2,zero,182e16c <alt_tse_mac_group_init+0x28c>
                    if(pmac_info->psys_info->tse_maclite_gige) {
 182e138:	e0bffe17 	ldw	r2,-8(fp)
 182e13c:	10800217 	ldw	r2,8(r2)
 182e140:	10800283 	ldbu	r2,10(r2)
 182e144:	10803fcc 	andi	r2,r2,255
 182e148:	10000426 	beq	r2,zero,182e15c <alt_tse_mac_group_init+0x27c>
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_1000;
 182e14c:	e0bffe17 	ldw	r2,-8(fp)
 182e150:	00c00084 	movi	r3,2
 182e154:	10c00005 	stb	r3,0(r2)
 182e158:	00000606 	br	182e174 <alt_tse_mac_group_init+0x294>
                    }
                    else {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_10_100;
 182e15c:	e0bffe17 	ldw	r2,-8(fp)
 182e160:	00c00044 	movi	r3,1
 182e164:	10c00005 	stb	r3,0(r2)
 182e168:	00000206 	br	182e174 <alt_tse_mac_group_init+0x294>
                    }
                }
                else {
                    pmac_info->mac_type = ALTERA_TSE_FULL_MAC;                    
 182e16c:	e0bffe17 	ldw	r2,-8(fp)
 182e170:	10000005 	stb	zero,0(r2)
                }
                
                if((pmac_info->psys_info->tse_mdio_shared) && (!pmac_info->psys_info->tse_multichannel_mac)){
 182e174:	e0bffe17 	ldw	r2,-8(fp)
 182e178:	10800217 	ldw	r2,8(r2)
 182e17c:	10800343 	ldbu	r2,13(r2)
 182e180:	10803fcc 	andi	r2,r2,255
 182e184:	10006626 	beq	r2,zero,182e320 <alt_tse_mac_group_init+0x440>
 182e188:	e0bffe17 	ldw	r2,-8(fp)
 182e18c:	10800217 	ldw	r2,8(r2)
 182e190:	108002c3 	ldbu	r2,11(r2)
 182e194:	10803fcc 	andi	r2,r2,255
 182e198:	1000611e 	bne	r2,zero,182e320 <alt_tse_mac_group_init+0x440>
                	tse_dprintf(6, "INFO    : MAC %2d Address           = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 182e19c:	e0fffc47 	ldb	r3,-15(fp)
 182e1a0:	e0bffe17 	ldw	r2,-8(fp)
 182e1a4:	10800217 	ldw	r2,8(r2)
 182e1a8:	10800017 	ldw	r2,0(r2)
 182e1ac:	100d883a 	mov	r6,r2
 182e1b0:	180b883a 	mov	r5,r3
 182e1b4:	01006134 	movhi	r4,388
 182e1b8:	2107e204 	addi	r4,r4,8072
 182e1bc:	182b8680 	call	182b868 <no_printf>
                    tse_dprintf(6, "INFO    : MAC %2d Device            = tse_mac_device[%d]\n", j, i + j);
 182e1c0:	e13ffc47 	ldb	r4,-15(fp)
 182e1c4:	e0fffc07 	ldb	r3,-16(fp)
 182e1c8:	e0bffc47 	ldb	r2,-15(fp)
 182e1cc:	1885883a 	add	r2,r3,r2
 182e1d0:	100d883a 	mov	r6,r2
 182e1d4:	200b883a 	mov	r5,r4
 182e1d8:	01006134 	movhi	r4,388
 182e1dc:	2107ee04 	addi	r4,r4,8120
 182e1e0:	182b8680 	call	182b868 <no_printf>
                    
                	switch(pmac_info->mac_type) {
 182e1e4:	e0bffe17 	ldw	r2,-8(fp)
 182e1e8:	10800003 	ldbu	r2,0(r2)
 182e1ec:	10803fcc 	andi	r2,r2,255
 182e1f0:	10c00060 	cmpeqi	r3,r2,1
 182e1f4:	18000c1e 	bne	r3,zero,182e228 <alt_tse_mac_group_init+0x348>
 182e1f8:	10c000a0 	cmpeqi	r3,r2,2
 182e1fc:	1800021e 	bne	r3,zero,182e208 <alt_tse_mac_group_init+0x328>
 182e200:	10001126 	beq	r2,zero,182e248 <alt_tse_mac_group_init+0x368>
 182e204:	00001806 	br	182e268 <alt_tse_mac_group_init+0x388>
                        case ALTERA_TSE_MACLITE_1000:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "1000 Mbps Small MAC");
 182e208:	e0bffc47 	ldb	r2,-15(fp)
 182e20c:	01806134 	movhi	r6,388
 182e210:	3187fd04 	addi	r6,r6,8180
 182e214:	100b883a 	mov	r5,r2
 182e218:	01006134 	movhi	r4,388
 182e21c:	21080204 	addi	r4,r4,8200
 182e220:	182b8680 	call	182b868 <no_printf>
                            break;
 182e224:	00001806 	br	182e288 <alt_tse_mac_group_init+0x3a8>
                        case ALTERA_TSE_MACLITE_10_100:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100 Mbps Small MAC");
 182e228:	e0bffc47 	ldb	r2,-15(fp)
 182e22c:	01806134 	movhi	r6,388
 182e230:	31880d04 	addi	r6,r6,8244
 182e234:	100b883a 	mov	r5,r2
 182e238:	01006134 	movhi	r4,388
 182e23c:	21080204 	addi	r4,r4,8200
 182e240:	182b8680 	call	182b868 <no_printf>
                            break;
 182e244:	00001006 	br	182e288 <alt_tse_mac_group_init+0x3a8>
                        case ALTERA_TSE_FULL_MAC:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100/1000 Ethernet MAC");
 182e248:	e0bffc47 	ldb	r2,-15(fp)
 182e24c:	01806134 	movhi	r6,388
 182e250:	31881304 	addi	r6,r6,8268
 182e254:	100b883a 	mov	r5,r2
 182e258:	01006134 	movhi	r4,388
 182e25c:	21080204 	addi	r4,r4,8200
 182e260:	182b8680 	call	182b868 <no_printf>
                            break;
 182e264:	00000806 	br	182e288 <alt_tse_mac_group_init+0x3a8>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
 182e268:	e0bffc47 	ldb	r2,-15(fp)
 182e26c:	01806134 	movhi	r6,388
 182e270:	31864b04 	addi	r6,r6,6444
 182e274:	100b883a 	mov	r5,r2
 182e278:	01006134 	movhi	r4,388
 182e27c:	21080204 	addi	r4,r4,8200
 182e280:	182b8680 	call	182b868 <no_printf>
                            break;
 182e284:	0001883a 	nop
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
 182e288:	e0bffe17 	ldw	r2,-8(fp)
 182e28c:	10800217 	ldw	r2,8(r2)
 182e290:	108003c3 	ldbu	r2,15(r2)
 182e294:	10803fcc 	andi	r2,r2,255
 182e298:	10008b26 	beq	r2,zero,182e4c8 <alt_tse_mac_group_init+0x5e8>
                        tse_dprintf(6, "INFO    : PCS %2d Enable            = %s\n", j, pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 182e29c:	e0fffc47 	ldb	r3,-15(fp)
 182e2a0:	e0bffe17 	ldw	r2,-8(fp)
 182e2a4:	10800217 	ldw	r2,8(r2)
 182e2a8:	108003c3 	ldbu	r2,15(r2)
 182e2ac:	10803fcc 	andi	r2,r2,255
 182e2b0:	10000326 	beq	r2,zero,182e2c0 <alt_tse_mac_group_init+0x3e0>
 182e2b4:	00806134 	movhi	r2,388
 182e2b8:	10881a04 	addi	r2,r2,8296
 182e2bc:	00000206 	br	182e2c8 <alt_tse_mac_group_init+0x3e8>
 182e2c0:	00806134 	movhi	r2,388
 182e2c4:	10881b04 	addi	r2,r2,8300
 182e2c8:	100d883a 	mov	r6,r2
 182e2cc:	180b883a 	mov	r5,r3
 182e2d0:	01006134 	movhi	r4,388
 182e2d4:	21081c04 	addi	r4,r4,8304
 182e2d8:	182b8680 	call	182b868 <no_printf>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
 182e2dc:	e0fffc47 	ldb	r3,-15(fp)
 182e2e0:	e0bffe17 	ldw	r2,-8(fp)
 182e2e4:	10800217 	ldw	r2,8(r2)
 182e2e8:	10800403 	ldbu	r2,16(r2)
 182e2ec:	10803fcc 	andi	r2,r2,255
 182e2f0:	10000326 	beq	r2,zero,182e300 <alt_tse_mac_group_init+0x420>
 182e2f4:	00806134 	movhi	r2,388
 182e2f8:	10881a04 	addi	r2,r2,8296
 182e2fc:	00000206 	br	182e308 <alt_tse_mac_group_init+0x428>
 182e300:	00806134 	movhi	r2,388
 182e304:	10881b04 	addi	r2,r2,8300
 182e308:	100d883a 	mov	r6,r2
 182e30c:	180b883a 	mov	r5,r3
 182e310:	01006134 	movhi	r4,388
 182e314:	21082704 	addi	r4,r4,8348
 182e318:	182b8680 	call	182b868 <no_printf>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
                            break;
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
 182e31c:	00006a06 	br	182e4c8 <alt_tse_mac_group_init+0x5e8>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
                    }
                }
                else {
                	/* display only once for all MAC, except shared MDIO MACs */
	                if(j == 0) {
 182e320:	e0bffc47 	ldb	r2,-15(fp)
 182e324:	1000421e 	bne	r2,zero,182e430 <alt_tse_mac_group_init+0x550>
	                    switch(pmac_info->mac_type) {
 182e328:	e0bffe17 	ldw	r2,-8(fp)
 182e32c:	10800003 	ldbu	r2,0(r2)
 182e330:	10803fcc 	andi	r2,r2,255
 182e334:	10c00060 	cmpeqi	r3,r2,1
 182e338:	18000a1e 	bne	r3,zero,182e364 <alt_tse_mac_group_init+0x484>
 182e33c:	10c000a0 	cmpeqi	r3,r2,2
 182e340:	1800021e 	bne	r3,zero,182e34c <alt_tse_mac_group_init+0x46c>
 182e344:	10000d26 	beq	r2,zero,182e37c <alt_tse_mac_group_init+0x49c>
 182e348:	00001206 	br	182e394 <alt_tse_mac_group_init+0x4b4>
	                        case ALTERA_TSE_MACLITE_1000:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "1000 Mbps Small MAC");
 182e34c:	01406134 	movhi	r5,388
 182e350:	2947fd04 	addi	r5,r5,8180
 182e354:	01006134 	movhi	r4,388
 182e358:	21083204 	addi	r4,r4,8392
 182e35c:	182b8680 	call	182b868 <no_printf>
	                            break;
 182e360:	00001206 	br	182e3ac <alt_tse_mac_group_init+0x4cc>
	                        case ALTERA_TSE_MACLITE_10_100:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100 Mbps Small MAC");
 182e364:	01406134 	movhi	r5,388
 182e368:	29480d04 	addi	r5,r5,8244
 182e36c:	01006134 	movhi	r4,388
 182e370:	21083204 	addi	r4,r4,8392
 182e374:	182b8680 	call	182b868 <no_printf>
	                            break;
 182e378:	00000c06 	br	182e3ac <alt_tse_mac_group_init+0x4cc>
	                        case ALTERA_TSE_FULL_MAC:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100/1000 Ethernet MAC");
 182e37c:	01406134 	movhi	r5,388
 182e380:	29481304 	addi	r5,r5,8268
 182e384:	01006134 	movhi	r4,388
 182e388:	21083204 	addi	r4,r4,8392
 182e38c:	182b8680 	call	182b868 <no_printf>
	                            break;
 182e390:	00000606 	br	182e3ac <alt_tse_mac_group_init+0x4cc>
	                        default :
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "Unknown");
 182e394:	01406134 	movhi	r5,388
 182e398:	29464b04 	addi	r5,r5,6444
 182e39c:	01006134 	movhi	r4,388
 182e3a0:	21083204 	addi	r4,r4,8392
 182e3a4:	182b8680 	call	182b868 <no_printf>
                                    break;
 182e3a8:	0001883a 	nop
			    }
	                    
	                    if(pmac_info->psys_info->tse_pcs_ena) {
 182e3ac:	e0bffe17 	ldw	r2,-8(fp)
 182e3b0:	10800217 	ldw	r2,8(r2)
 182e3b4:	108003c3 	ldbu	r2,15(r2)
 182e3b8:	10803fcc 	andi	r2,r2,255
 182e3bc:	10001c26 	beq	r2,zero,182e430 <alt_tse_mac_group_init+0x550>
	                        tse_dprintf(6, "INFO    : PCS Enable               = %s\n", pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 182e3c0:	e0bffe17 	ldw	r2,-8(fp)
 182e3c4:	10800217 	ldw	r2,8(r2)
 182e3c8:	108003c3 	ldbu	r2,15(r2)
 182e3cc:	10803fcc 	andi	r2,r2,255
 182e3d0:	10000326 	beq	r2,zero,182e3e0 <alt_tse_mac_group_init+0x500>
 182e3d4:	00806134 	movhi	r2,388
 182e3d8:	10881a04 	addi	r2,r2,8296
 182e3dc:	00000206 	br	182e3e8 <alt_tse_mac_group_init+0x508>
 182e3e0:	00806134 	movhi	r2,388
 182e3e4:	10881b04 	addi	r2,r2,8300
 182e3e8:	100b883a 	mov	r5,r2
 182e3ec:	01006134 	movhi	r4,388
 182e3f0:	21083d04 	addi	r4,r4,8436
 182e3f4:	182b8680 	call	182b868 <no_printf>
	                        tse_dprintf(6, "INFO    : PCS SGMII Enable         = %s\n", pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");	                        
 182e3f8:	e0bffe17 	ldw	r2,-8(fp)
 182e3fc:	10800217 	ldw	r2,8(r2)
 182e400:	10800403 	ldbu	r2,16(r2)
 182e404:	10803fcc 	andi	r2,r2,255
 182e408:	10000326 	beq	r2,zero,182e418 <alt_tse_mac_group_init+0x538>
 182e40c:	00806134 	movhi	r2,388
 182e410:	10881a04 	addi	r2,r2,8296
 182e414:	00000206 	br	182e420 <alt_tse_mac_group_init+0x540>
 182e418:	00806134 	movhi	r2,388
 182e41c:	10881b04 	addi	r2,r2,8300
 182e420:	100b883a 	mov	r5,r2
 182e424:	01006134 	movhi	r4,388
 182e428:	21084804 	addi	r4,r4,8480
 182e42c:	182b8680 	call	182b868 <no_printf>
	                    }
	                }
	                
                	if(pmac_info->psys_info->tse_multichannel_mac) {
 182e430:	e0bffe17 	ldw	r2,-8(fp)
 182e434:	10800217 	ldw	r2,8(r2)
 182e438:	108002c3 	ldbu	r2,11(r2)
 182e43c:	10803fcc 	andi	r2,r2,255
 182e440:	10001326 	beq	r2,zero,182e490 <alt_tse_mac_group_init+0x5b0>
                		tse_dprintf(6, "INFO    : Channel %2d Address       = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 182e444:	e0fffc47 	ldb	r3,-15(fp)
 182e448:	e0bffe17 	ldw	r2,-8(fp)
 182e44c:	10800217 	ldw	r2,8(r2)
 182e450:	10800017 	ldw	r2,0(r2)
 182e454:	100d883a 	mov	r6,r2
 182e458:	180b883a 	mov	r5,r3
 182e45c:	01006134 	movhi	r4,388
 182e460:	21085304 	addi	r4,r4,8524
 182e464:	182b8680 	call	182b868 <no_printf>
	                    tse_dprintf(6, "INFO    : Channel %2d Device        = tse_mac_device[%d]\n", j, i + j);
 182e468:	e13ffc47 	ldb	r4,-15(fp)
 182e46c:	e0fffc07 	ldb	r3,-16(fp)
 182e470:	e0bffc47 	ldb	r2,-15(fp)
 182e474:	1885883a 	add	r2,r3,r2
 182e478:	100d883a 	mov	r6,r2
 182e47c:	200b883a 	mov	r5,r4
 182e480:	01006134 	movhi	r4,388
 182e484:	21085f04 	addi	r4,r4,8572
 182e488:	182b8680 	call	182b868 <no_printf>
 182e48c:	00000e06 	br	182e4c8 <alt_tse_mac_group_init+0x5e8>
	            	}                
	                else {
	                    tse_dprintf(6, "INFO    : MAC Address              = 0x%08x\n", (int) pmac_info->psys_info->tse_mac_base);
 182e490:	e0bffe17 	ldw	r2,-8(fp)
 182e494:	10800217 	ldw	r2,8(r2)
 182e498:	10800017 	ldw	r2,0(r2)
 182e49c:	100b883a 	mov	r5,r2
 182e4a0:	01006134 	movhi	r4,388
 182e4a4:	21086e04 	addi	r4,r4,8632
 182e4a8:	182b8680 	call	182b868 <no_printf>
	                    tse_dprintf(6, "INFO    : MAC Device               = tse_mac_device[%d]\n", i + j);
 182e4ac:	e0fffc07 	ldb	r3,-16(fp)
 182e4b0:	e0bffc47 	ldb	r2,-15(fp)
 182e4b4:	1885883a 	add	r2,r3,r2
 182e4b8:	100b883a 	mov	r5,r2
 182e4bc:	01006134 	movhi	r4,388
 182e4c0:	21087a04 	addi	r4,r4,8680
 182e4c4:	182b8680 	call	182b868 <no_printf>
	                }
                }
                
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
 182e4c8:	e0bffc47 	ldb	r2,-15(fp)
 182e4cc:	e0fffd17 	ldw	r3,-12(fp)
 182e4d0:	10800044 	addi	r2,r2,1
 182e4d4:	1085883a 	add	r2,r2,r2
 182e4d8:	1085883a 	add	r2,r2,r2
 182e4dc:	1885883a 	add	r2,r3,r2
 182e4e0:	e0fffe17 	ldw	r3,-8(fp)
 182e4e4:	10c00015 	stw	r3,0(r2)
                pmac_group->channel = 1;
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 182e4e8:	e0bffc43 	ldbu	r2,-15(fp)
 182e4ec:	10800044 	addi	r2,r2,1
 182e4f0:	e0bffc45 	stb	r2,-15(fp)
 182e4f4:	e0fffc47 	ldb	r3,-15(fp)
 182e4f8:	e0bffd17 	ldw	r2,-12(fp)
 182e4fc:	10800003 	ldbu	r2,0(r2)
 182e500:	10803fcc 	andi	r2,r2,255
 182e504:	18bed916 	blt	r3,r2,182e06c <__alt_mem_mem_0+0xff80e06c>
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
 182e508:	d0a80e43 	ldbu	r2,-24519(gp)
 182e50c:	10c03fcc 	andi	r3,r2,255
 182e510:	008061f4 	movhi	r2,391
 182e514:	10a84e04 	addi	r2,r2,-24264
 182e518:	18c7883a 	add	r3,r3,r3
 182e51c:	18c7883a 	add	r3,r3,r3
 182e520:	10c5883a 	add	r2,r2,r3
 182e524:	e0fffd17 	ldw	r3,-12(fp)
 182e528:	10c00015 	stw	r3,0(r2)
            
            mac_group_count++;
 182e52c:	d0a80e43 	ldbu	r2,-24519(gp)
 182e530:	10800044 	addi	r2,r2,1
 182e534:	d0a80e45 	stb	r2,-24519(gp)

            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
 182e538:	e0bffd17 	ldw	r2,-12(fp)
 182e53c:	10c00003 	ldbu	r3,0(r2)
 182e540:	e0bffc03 	ldbu	r2,-16(fp)
 182e544:	1885883a 	add	r2,r3,r2
 182e548:	10bfffc4 	addi	r2,r2,-1
 182e54c:	e0bffc05 	stb	r2,-16(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 182e550:	e0bffc03 	ldbu	r2,-16(fp)
 182e554:	10800044 	addi	r2,r2,1
 182e558:	e0bffc05 	stb	r2,-16(fp)
 182e55c:	e0fffc07 	ldb	r3,-16(fp)
 182e560:	d0a01d03 	ldbu	r2,-32652(gp)
 182e564:	10803fcc 	andi	r2,r2,255
 182e568:	18be6716 	blt	r3,r2,182df08 <__alt_mem_mem_0+0xff80df08>
            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
                        
        }
    }
    return SUCCESS;
 182e56c:	0005883a 	mov	r2,zero
}
 182e570:	e037883a 	mov	sp,fp
 182e574:	dfc00117 	ldw	ra,4(sp)
 182e578:	df000017 	ldw	fp,0(sp)
 182e57c:	dec00204 	addi	sp,sp,8
 182e580:	f800283a 	ret

0182e584 <alt_tse_mac_get_phy>:
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
 182e584:	deffed04 	addi	sp,sp,-76
 182e588:	dfc01215 	stw	ra,72(sp)
 182e58c:	df001115 	stw	fp,68(sp)
 182e590:	df001104 	addi	fp,sp,68
 182e594:	e13fff15 	stw	r4,-4(fp)
    
	alt_32 phyid; 
	alt_32 phyid2 = 0;
 182e598:	e03ff515 	stw	zero,-44(fp)
    alt_u8 revision_number;

    alt_32 i;

    alt_u8 is_phy_in_profile;
    alt_32 return_value = 0;
 182e59c:	e03ff315 	stw	zero,-52(fp)
    
    alt_8 phy_info_count = 0;
 182e5a0:	e03ff405 	stb	zero,-48(fp)
    
    alt_tse_phy_info *pphy = 0;
 182e5a4:	e03ff615 	stw	zero,-40(fp)
    alt_tse_mac_info *pmac_info = 0;
 182e5a8:	e03ff715 	stw	zero,-36(fp)
    alt_tse_system_info *psys = 0;
 182e5ac:	e03ff815 	stw	zero,-32(fp)
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 182e5b0:	e0bfff17 	ldw	r2,-4(fp)
 182e5b4:	10800117 	ldw	r2,4(r2)
 182e5b8:	10800217 	ldw	r2,8(r2)
 182e5bc:	10800017 	ldw	r2,0(r2)
 182e5c0:	e0bff915 	stw	r2,-28(fp)
            
    /* Record previous MDIO address, to be restored at the end of function */
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 182e5c4:	e0bff917 	ldw	r2,-28(fp)
 182e5c8:	10801004 	addi	r2,r2,64
 182e5cc:	10800037 	ldwio	r2,0(r2)
 182e5d0:	e0bffa15 	stw	r2,-24(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182e5d4:	e13fff17 	ldw	r4,-4(fp)
 182e5d8:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 182e5dc:	e0bffb05 	stb	r2,-20(fp)
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x01; phyadd < 0x20; phyadd++)
 182e5e0:	00800044 	movi	r2,1
 182e5e4:	e0bff005 	stb	r2,-64(fp)
 182e5e8:	0000ca06 	br	182e914 <alt_tse_mac_get_phy+0x390>
    {        
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, phyadd);
 182e5ec:	e0bff917 	ldw	r2,-28(fp)
 182e5f0:	10801004 	addi	r2,r2,64
 182e5f4:	e0fff003 	ldbu	r3,-64(fp)
 182e5f8:	10c00035 	stwio	r3,0(r2)
        phyid = IORD(&pmac_group_base->mdio1.PHY_ID1,0);     // read PHY ID
 182e5fc:	e0bff917 	ldw	r2,-28(fp)
 182e600:	1080a204 	addi	r2,r2,648
 182e604:	10800037 	ldwio	r2,0(r2)
 182e608:	e0bffc15 	stw	r2,-16(fp)
        phyid2 = IORD(&pmac_group_base->mdio1.PHY_ID2,0);     // read PHY ID
 182e60c:	e0bff917 	ldw	r2,-28(fp)
 182e610:	1080a304 	addi	r2,r2,652
 182e614:	10800037 	ldwio	r2,0(r2)
 182e618:	e0bff515 	stw	r2,-44(fp)
        
        /* PHY found */
        if (phyid != phyid2)
 182e61c:	e0fffc17 	ldw	r3,-16(fp)
 182e620:	e0bff517 	ldw	r2,-44(fp)
 182e624:	1880b826 	beq	r3,r2,182e908 <alt_tse_mac_get_phy+0x384>
        {
            pphy = (alt_tse_phy_info *) malloc(sizeof(alt_tse_phy_info));
 182e628:	01000704 	movi	r4,28
 182e62c:	183c6bc0 	call	183c6bc <malloc>
 182e630:	e0bff615 	stw	r2,-40(fp)
            if(!pphy) {
 182e634:	e0bff617 	ldw	r2,-40(fp)
 182e638:	1000091e 	bne	r2,zero,182e660 <alt_tse_mac_get_phy+0xdc>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for phy_info[%d.%d]\n", mac_group_index, phy_info_count);
 182e63c:	e0bffb07 	ldb	r2,-20(fp)
 182e640:	e0fff407 	ldb	r3,-48(fp)
 182e644:	180d883a 	mov	r6,r3
 182e648:	100b883a 	mov	r5,r2
 182e64c:	01006134 	movhi	r4,388
 182e650:	21088904 	addi	r4,r4,8740
 182e654:	1800bd80 	call	1800bd8 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 182e658:	00bfffc4 	movi	r2,-1
 182e65c:	0000cd06 	br	182e994 <alt_tse_mac_get_phy+0x410>
            }
            
            /* store PHY address */
            pphy->mdio_address = phyadd;
 182e660:	e0bff617 	ldw	r2,-40(fp)
 182e664:	e0fff003 	ldbu	r3,-64(fp)
 182e668:	10c00005 	stb	r3,0(r2)

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
 182e66c:	e0bffc17 	ldw	r2,-16(fp)
 182e670:	100691ba 	slli	r3,r2,6
 182e674:	e0bff517 	ldw	r2,-44(fp)
 182e678:	1005d2ba 	srai	r2,r2,10
 182e67c:	10800fcc 	andi	r2,r2,63
 182e680:	1884b03a 	or	r2,r3,r2
 182e684:	e0bffd15 	stw	r2,-12(fp)
            model_number = (phyid2 >> 4) & 0x3f;
 182e688:	e0bff517 	ldw	r2,-44(fp)
 182e68c:	1005d13a 	srai	r2,r2,4
 182e690:	10800fcc 	andi	r2,r2,63
 182e694:	e0bffe05 	stb	r2,-8(fp)
            revision_number = phyid2 & 0x0f;
 182e698:	e0bff517 	ldw	r2,-44(fp)
 182e69c:	108003cc 	andi	r2,r2,15
 182e6a0:	e0bffe45 	stb	r2,-7(fp)
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
 182e6a4:	e03ff205 	stb	zero,-56(fp)
            for(i = 0; i < phy_profile_count; i++) {
 182e6a8:	e03ff115 	stw	zero,-60(fp)
 182e6ac:	00003406 	br	182e780 <alt_tse_mac_get_phy+0x1fc>
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 182e6b0:	008061f4 	movhi	r2,391
 182e6b4:	10a85604 	addi	r2,r2,-24232
 182e6b8:	e0fff117 	ldw	r3,-60(fp)
 182e6bc:	18c7883a 	add	r3,r3,r3
 182e6c0:	18c7883a 	add	r3,r3,r3
 182e6c4:	10c5883a 	add	r2,r2,r3
 182e6c8:	10800017 	ldw	r2,0(r2)
 182e6cc:	10c01417 	ldw	r3,80(r2)
 182e6d0:	e0bffd17 	ldw	r2,-12(fp)
 182e6d4:	1880271e 	bne	r3,r2,182e774 <alt_tse_mac_get_phy+0x1f0>
 182e6d8:	008061f4 	movhi	r2,391
 182e6dc:	10a85604 	addi	r2,r2,-24232
 182e6e0:	e0fff117 	ldw	r3,-60(fp)
 182e6e4:	18c7883a 	add	r3,r3,r3
 182e6e8:	18c7883a 	add	r3,r3,r3
 182e6ec:	10c5883a 	add	r2,r2,r3
 182e6f0:	10800017 	ldw	r2,0(r2)
 182e6f4:	10801503 	ldbu	r2,84(r2)
 182e6f8:	10c03fcc 	andi	r3,r2,255
 182e6fc:	e0bffe03 	ldbu	r2,-8(fp)
 182e700:	18801c1e 	bne	r3,r2,182e774 <alt_tse_mac_get_phy+0x1f0>
                {
                    pphy->pphy_profile = pphy_profiles[i];
 182e704:	008061f4 	movhi	r2,391
 182e708:	10a85604 	addi	r2,r2,-24232
 182e70c:	e0fff117 	ldw	r3,-60(fp)
 182e710:	18c7883a 	add	r3,r3,r3
 182e714:	18c7883a 	add	r3,r3,r3
 182e718:	10c5883a 	add	r2,r2,r3
 182e71c:	10c00017 	ldw	r3,0(r2)
 182e720:	e0bff617 	ldw	r2,-40(fp)
 182e724:	10c00515 	stw	r3,20(r2)
                    
                    /* PHY found, add it to phy_list */
                    tse_dprintf(5, "INFO    : PHY %s found at PHY address 0x%02x of MAC Group[%d]\n", pphy_profiles[i]->name, phyadd, mac_group_index);
 182e728:	008061f4 	movhi	r2,391
 182e72c:	10a85604 	addi	r2,r2,-24232
 182e730:	e0fff117 	ldw	r3,-60(fp)
 182e734:	18c7883a 	add	r3,r3,r3
 182e738:	18c7883a 	add	r3,r3,r3
 182e73c:	10c5883a 	add	r2,r2,r3
 182e740:	10800017 	ldw	r2,0(r2)
 182e744:	1009883a 	mov	r4,r2
 182e748:	e0bff003 	ldbu	r2,-64(fp)
 182e74c:	e0fffb07 	ldb	r3,-20(fp)
 182e750:	180f883a 	mov	r7,r3
 182e754:	100d883a 	mov	r6,r2
 182e758:	200b883a 	mov	r5,r4
 182e75c:	01006134 	movhi	r4,388
 182e760:	21089804 	addi	r4,r4,8800
 182e764:	1800bd80 	call	1800bd8 <printf>
                    is_phy_in_profile = 1;
 182e768:	00800044 	movi	r2,1
 182e76c:	e0bff205 	stb	r2,-56(fp)
                    break;
 182e770:	00000706 	br	182e790 <alt_tse_mac_get_phy+0x20c>
            model_number = (phyid2 >> 4) & 0x3f;
            revision_number = phyid2 & 0x0f;
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
            for(i = 0; i < phy_profile_count; i++) {
 182e774:	e0bff117 	ldw	r2,-60(fp)
 182e778:	10800044 	addi	r2,r2,1
 182e77c:	e0bff115 	stw	r2,-60(fp)
 182e780:	d0a80e03 	ldbu	r2,-24520(gp)
 182e784:	10803fcc 	andi	r2,r2,255
 182e788:	e0fff117 	ldw	r3,-60(fp)
 182e78c:	18bfc816 	blt	r3,r2,182e6b0 <__alt_mem_mem_0+0xff80e6b0>
                    is_phy_in_profile = 1;
                    break;
                }
            }
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
 182e790:	e0bff203 	ldbu	r2,-56(fp)
 182e794:	10000f1e 	bne	r2,zero,182e7d4 <alt_tse_mac_get_phy+0x250>
                pphy->pphy_profile = 0;
 182e798:	e0bff617 	ldw	r2,-40(fp)
 182e79c:	10000515 	stw	zero,20(r2)
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
 182e7a0:	e0bff003 	ldbu	r2,-64(fp)
 182e7a4:	e0fffb07 	ldb	r3,-20(fp)
 182e7a8:	180d883a 	mov	r6,r3
 182e7ac:	100b883a 	mov	r5,r2
 182e7b0:	01006134 	movhi	r4,388
 182e7b4:	2108a804 	addi	r4,r4,8864
 182e7b8:	1800bd80 	call	1800bd8 <printf>
                tse_dprintf(3, "WARNING : Please add PHY information to PHY profile\n");
 182e7bc:	01006134 	movhi	r4,388
 182e7c0:	2108b904 	addi	r4,r4,8932
 182e7c4:	183c9880 	call	183c988 <puts>
                return_value++;
 182e7c8:	e0bff317 	ldw	r2,-52(fp)
 182e7cc:	10800044 	addi	r2,r2,1
 182e7d0:	e0bff315 	stw	r2,-52(fp)
            }
            
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
 182e7d4:	e0bffd17 	ldw	r2,-12(fp)
 182e7d8:	100b883a 	mov	r5,r2
 182e7dc:	01006134 	movhi	r4,388
 182e7e0:	2108c604 	addi	r4,r4,8984
 182e7e4:	182b8680 	call	182b868 <no_printf>
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
 182e7e8:	e0bffe03 	ldbu	r2,-8(fp)
 182e7ec:	100b883a 	mov	r5,r2
 182e7f0:	01006134 	movhi	r4,388
 182e7f4:	2108d104 	addi	r4,r4,9028
 182e7f8:	182b8680 	call	182b868 <no_printf>
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
 182e7fc:	e0bffe43 	ldbu	r2,-7(fp)
 182e800:	100b883a 	mov	r5,r2
 182e804:	01006134 	movhi	r4,388
 182e808:	2108dc04 	addi	r4,r4,9072
 182e80c:	182b8680 	call	182b868 <no_printf>
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
 182e810:	e17ff617 	ldw	r5,-40(fp)
 182e814:	e13fff17 	ldw	r4,-4(fp)
 182e818:	182e9a80 	call	182e9a8 <alt_tse_mac_associate_phy>
 182e81c:	1000341e 	bne	r2,zero,182e8f0 <alt_tse_mac_get_phy+0x36c>
            	
            	pmac_info = pphy->pmac_info;
 182e820:	e0bff617 	ldw	r2,-40(fp)
 182e824:	10800617 	ldw	r2,24(r2)
 182e828:	e0bff715 	stw	r2,-36(fp)
            	psys = pmac_info->psys_info;
 182e82c:	e0bff717 	ldw	r2,-36(fp)
 182e830:	10800217 	ldw	r2,8(r2)
 182e834:	e0bff815 	stw	r2,-32(fp)
            	
            	/* Disable PHY loopback to allow Auto-Negotiation completed */
    	        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 182e838:	d8000015 	stw	zero,0(sp)
 182e83c:	01c00044 	movi	r7,1
 182e840:	01800384 	movi	r6,14
 182e844:	000b883a 	mov	r5,zero
 182e848:	e13ff617 	ldw	r4,-40(fp)
 182e84c:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
				
				/* Reset auto-negotiation advertisement */
				alt_tse_phy_set_adv_1000(pphy, 1);
 182e850:	01400044 	movi	r5,1
 182e854:	e13ff617 	ldw	r4,-40(fp)
 182e858:	182f6e00 	call	182f6e0 <alt_tse_phy_set_adv_1000>
				alt_tse_phy_set_adv_100(pphy, 1);
 182e85c:	01400044 	movi	r5,1
 182e860:	e13ff617 	ldw	r4,-40(fp)
 182e864:	182f8a40 	call	182f8a4 <alt_tse_phy_set_adv_100>
				alt_tse_phy_set_adv_10(pphy, 1);
 182e868:	01400044 	movi	r5,1
 182e86c:	e13ff617 	ldw	r4,-40(fp)
 182e870:	182faf80 	call	182faf8 <alt_tse_phy_set_adv_10>
            	            	
	            /* check link connection for this PHY */
	            alt_tse_phy_restart_an(pphy, ALTERA_CHECKLINK_TIMEOUT_THRESHOLD);
 182e874:	017e0034 	movhi	r5,63488
 182e878:	e13ff617 	ldw	r4,-40(fp)
 182e87c:	182ee300 	call	182ee30 <alt_tse_phy_restart_an>
	            
	            /* Perform additional setting if there is any */
	            /* Profile specific */
	            if(pphy->pphy_profile) {
 182e880:	e0bff617 	ldw	r2,-40(fp)
 182e884:	10800517 	ldw	r2,20(r2)
 182e888:	10000f26 	beq	r2,zero,182e8c8 <alt_tse_mac_get_phy+0x344>
		            if(pphy->pphy_profile->phy_cfg) {
 182e88c:	e0bff617 	ldw	r2,-40(fp)
 182e890:	10800517 	ldw	r2,20(r2)
 182e894:	10801717 	ldw	r2,92(r2)
 182e898:	10000b26 	beq	r2,zero,182e8c8 <alt_tse_mac_get_phy+0x344>
		                tse_dprintf(6, "INFO    : Applying additional PHY configuration of %s\n", pphy->pphy_profile->name);
 182e89c:	e0bff617 	ldw	r2,-40(fp)
 182e8a0:	10800517 	ldw	r2,20(r2)
 182e8a4:	100b883a 	mov	r5,r2
 182e8a8:	01006134 	movhi	r4,388
 182e8ac:	2108e704 	addi	r4,r4,9116
 182e8b0:	182b8680 	call	182b868 <no_printf>
		                pphy->pphy_profile->phy_cfg(pmac_group_base);
 182e8b4:	e0bff617 	ldw	r2,-40(fp)
 182e8b8:	10800517 	ldw	r2,20(r2)
 182e8bc:	10801717 	ldw	r2,92(r2)
 182e8c0:	e13ff917 	ldw	r4,-28(fp)
 182e8c4:	103ee83a 	callr	r2
		            }
	            }
	            
	            /* Initialize PHY, call user's function pointer in alt_tse_system_info structure */
	            /* Individual PHY specific */
            	if(psys->tse_phy_cfg) {
 182e8c8:	e0bff817 	ldw	r2,-32(fp)
 182e8cc:	10801117 	ldw	r2,68(r2)
 182e8d0:	10000726 	beq	r2,zero,182e8f0 <alt_tse_mac_get_phy+0x36c>
            		tse_dprintf(6, "INFO    : Applying additional user PHY configuration\n");
 182e8d4:	01006134 	movhi	r4,388
 182e8d8:	2108f504 	addi	r4,r4,9172
 182e8dc:	182b8680 	call	182b868 <no_printf>
            		psys->tse_phy_cfg(pmac_group_base);
 182e8e0:	e0bff817 	ldw	r2,-32(fp)
 182e8e4:	10801117 	ldw	r2,68(r2)
 182e8e8:	e13ff917 	ldw	r4,-28(fp)
 182e8ec:	103ee83a 	callr	r2
            	}
            }
            
            tse_dprintf(6, "\n");
 182e8f0:	01006134 	movhi	r4,388
 182e8f4:	21090304 	addi	r4,r4,9228
 182e8f8:	182b8680 	call	182b868 <no_printf>
	            
            phy_info_count++;
 182e8fc:	e0bff403 	ldbu	r2,-48(fp)
 182e900:	10800044 	addi	r2,r2,1
 182e904:	e0bff405 	stb	r2,-48(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x01; phyadd < 0x20; phyadd++)
 182e908:	e0bff003 	ldbu	r2,-64(fp)
 182e90c:	10800044 	addi	r2,r2,1
 182e910:	e0bff005 	stb	r2,-64(fp)
 182e914:	e0bff003 	ldbu	r2,-64(fp)
 182e918:	10800830 	cmpltui	r2,r2,32
 182e91c:	103f331e 	bne	r2,zero,182e5ec <__alt_mem_mem_0+0xff80e5ec>
            phy_info_count++;
        }
    }
    
    /* check to verify the number of connected PHY match the number of channel */
    if(pmac_group->channel != phy_info_count) {
 182e920:	e0bfff17 	ldw	r2,-4(fp)
 182e924:	10800003 	ldbu	r2,0(r2)
 182e928:	10c03fcc 	andi	r3,r2,255
 182e92c:	e0bff407 	ldb	r2,-48(fp)
 182e930:	18801326 	beq	r3,r2,182e980 <alt_tse_mac_get_phy+0x3fc>
        if(phy_info_count == 0) {
 182e934:	e0bff407 	ldb	r2,-48(fp)
 182e938:	1000061e 	bne	r2,zero,182e954 <alt_tse_mac_get_phy+0x3d0>
            tse_dprintf(2, "ERROR   : MAC Group[%d] - No PHY connected!\n", mac_group_index);
 182e93c:	e0bffb07 	ldb	r2,-20(fp)
 182e940:	100b883a 	mov	r5,r2
 182e944:	01006134 	movhi	r4,388
 182e948:	21090404 	addi	r4,r4,9232
 182e94c:	1800bd80 	call	1800bd8 <printf>
 182e950:	00000b06 	br	182e980 <alt_tse_mac_get_phy+0x3fc>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Group[%d] - Number of PHY connected is not equal to the number of channel, Number of PHY : %d, Channel : %d\n", mac_group_index, phy_info_count, pmac_group->channel);
 182e954:	e0fffb07 	ldb	r3,-20(fp)
 182e958:	e13ff407 	ldb	r4,-48(fp)
 182e95c:	e0bfff17 	ldw	r2,-4(fp)
 182e960:	10800003 	ldbu	r2,0(r2)
 182e964:	10803fcc 	andi	r2,r2,255
 182e968:	100f883a 	mov	r7,r2
 182e96c:	200d883a 	mov	r6,r4
 182e970:	180b883a 	mov	r5,r3
 182e974:	01006134 	movhi	r4,388
 182e978:	21091004 	addi	r4,r4,9280
 182e97c:	1800bd80 	call	1800bd8 <printf>
        }
    }
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 182e980:	e0bff917 	ldw	r2,-28(fp)
 182e984:	10801004 	addi	r2,r2,64
 182e988:	e0fffa17 	ldw	r3,-24(fp)
 182e98c:	10c00035 	stwio	r3,0(r2)
    
    return return_value;
 182e990:	e0bff317 	ldw	r2,-52(fp)
}
 182e994:	e037883a 	mov	sp,fp
 182e998:	dfc00117 	ldw	ra,4(sp)
 182e99c:	df000017 	ldw	fp,0(sp)
 182e9a0:	dec00204 	addi	sp,sp,8
 182e9a4:	f800283a 	ret

0182e9a8 <alt_tse_mac_associate_phy>:
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @param pphy        Pointer to the TSE PHY info structure which hold information of PHY
 * @return            return TSE_PHY_MAP_ERROR if mapping error
 *                    return TSE_PHY_MAP_SUCCESS otherwise
 */
alt_32 alt_tse_mac_associate_phy(alt_tse_mac_group *pmac_group, alt_tse_phy_info *pphy) {
 182e9a8:	defff604 	addi	sp,sp,-40
 182e9ac:	dfc00915 	stw	ra,36(sp)
 182e9b0:	df000815 	stw	fp,32(sp)
 182e9b4:	df000804 	addi	fp,sp,32
 182e9b8:	e13ffe15 	stw	r4,-8(fp)
 182e9bc:	e17fff15 	stw	r5,-4(fp)
    
	alt_32 i;
	alt_32 return_value = TSE_PHY_MAP_SUCCESS;
 182e9c0:	e03ff915 	stw	zero,-28(fp)
    
	alt_u8 is_mapped;

    alt_tse_system_info *psys = 0;
 182e9c4:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_mac_info *pmac_info = 0;
 182e9c8:	e03ffc15 	stw	zero,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 182e9cc:	e03ffd05 	stb	zero,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182e9d0:	e13ffe17 	ldw	r4,-8(fp)
 182e9d4:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 182e9d8:	e0bffd45 	stb	r2,-11(fp)
    alt_8 sys_info_index = 0;
 182e9dc:	e03ffd85 	stb	zero,-10(fp)
    
    is_mapped = 0;
 182e9e0:	e03ffa05 	stb	zero,-24(fp)
    
    for(i = 0; i < pmac_group->channel; i++) {
 182e9e4:	e03ff815 	stw	zero,-32(fp)
 182e9e8:	00002c06 	br	182ea9c <alt_tse_mac_associate_phy+0xf4>
        pmac_info = pmac_group->pmac_info[i];
 182e9ec:	e0fffe17 	ldw	r3,-8(fp)
 182e9f0:	e0bff817 	ldw	r2,-32(fp)
 182e9f4:	10800044 	addi	r2,r2,1
 182e9f8:	1085883a 	add	r2,r2,r2
 182e9fc:	1085883a 	add	r2,r2,r2
 182ea00:	1885883a 	add	r2,r3,r2
 182ea04:	10800017 	ldw	r2,0(r2)
 182ea08:	e0bffc15 	stw	r2,-16(fp)
        psys = pmac_info->psys_info;
 182ea0c:	e0bffc17 	ldw	r2,-16(fp)
 182ea10:	10800217 	ldw	r2,8(r2)
 182ea14:	e0bffb15 	stw	r2,-20(fp)
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
 182ea18:	e0bffb17 	ldw	r2,-20(fp)
 182ea1c:	10c01017 	ldw	r3,64(r2)
 182ea20:	e0bfff17 	ldw	r2,-4(fp)
 182ea24:	10800003 	ldbu	r2,0(r2)
 182ea28:	10803fcc 	andi	r2,r2,255
 182ea2c:	1880181e 	bne	r3,r2,182ea90 <alt_tse_mac_associate_phy+0xe8>
        	mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182ea30:	e13ffc17 	ldw	r4,-16(fp)
 182ea34:	182ca600 	call	182ca60 <alt_tse_get_mac_info_index>
 182ea38:	e0bffd05 	stb	r2,-12(fp)
	        sys_info_index = alt_tse_get_system_index(psys);
 182ea3c:	e13ffb17 	ldw	r4,-20(fp)
 182ea40:	182c9800 	call	182c980 <alt_tse_get_system_index>
 182ea44:	e0bffd85 	stb	r2,-10(fp)
	        
            pmac_info->pphy_info = pphy;
 182ea48:	e0bffc17 	ldw	r2,-16(fp)
 182ea4c:	e0ffff17 	ldw	r3,-4(fp)
 182ea50:	10c00115 	stw	r3,4(r2)
            pphy->pmac_info = pmac_info;
 182ea54:	e0bfff17 	ldw	r2,-4(fp)
 182ea58:	e0fffc17 	ldw	r3,-16(fp)
 182ea5c:	10c00615 	stw	r3,24(r2)
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 182ea60:	e0bffd47 	ldb	r2,-11(fp)
 182ea64:	e0fffd07 	ldb	r3,-12(fp)
 182ea68:	e13ffd87 	ldb	r4,-10(fp)
 182ea6c:	200f883a 	mov	r7,r4
 182ea70:	180d883a 	mov	r6,r3
 182ea74:	100b883a 	mov	r5,r2
 182ea78:	01006134 	movhi	r4,388
 182ea7c:	21092f04 	addi	r4,r4,9404
 182ea80:	1800bd80 	call	1800bd8 <printf>
            is_mapped = 1;
 182ea84:	00800044 	movi	r2,1
 182ea88:	e0bffa05 	stb	r2,-24(fp)
            break;
 182ea8c:	00000806 	br	182eab0 <alt_tse_mac_associate_phy+0x108>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    alt_8 sys_info_index = 0;
    
    is_mapped = 0;
    
    for(i = 0; i < pmac_group->channel; i++) {
 182ea90:	e0bff817 	ldw	r2,-32(fp)
 182ea94:	10800044 	addi	r2,r2,1
 182ea98:	e0bff815 	stw	r2,-32(fp)
 182ea9c:	e0bffe17 	ldw	r2,-8(fp)
 182eaa0:	10800003 	ldbu	r2,0(r2)
 182eaa4:	10803fcc 	andi	r2,r2,255
 182eaa8:	e0fff817 	ldw	r3,-32(fp)
 182eaac:	18bfcf16 	blt	r3,r2,182e9ec <__alt_mem_mem_0+0xff80e9ec>
            break;
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
 182eab0:	e0bffa03 	ldbu	r2,-24(fp)
 182eab4:	10003d1e 	bne	r2,zero,182ebac <alt_tse_mac_associate_phy+0x204>
        for(i = 0; i < pmac_group->channel; i++) {
 182eab8:	e03ff815 	stw	zero,-32(fp)
 182eabc:	00003606 	br	182eb98 <alt_tse_mac_associate_phy+0x1f0>
            pmac_info = pmac_group->pmac_info[i];
 182eac0:	e0fffe17 	ldw	r3,-8(fp)
 182eac4:	e0bff817 	ldw	r2,-32(fp)
 182eac8:	10800044 	addi	r2,r2,1
 182eacc:	1085883a 	add	r2,r2,r2
 182ead0:	1085883a 	add	r2,r2,r2
 182ead4:	1885883a 	add	r2,r3,r2
 182ead8:	10800017 	ldw	r2,0(r2)
 182eadc:	e0bffc15 	stw	r2,-16(fp)
            psys = pmac_info->psys_info;
 182eae0:	e0bffc17 	ldw	r2,-16(fp)
 182eae4:	10800217 	ldw	r2,8(r2)
 182eae8:	e0bffb15 	stw	r2,-20(fp)
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
 182eaec:	e0bffb17 	ldw	r2,-20(fp)
 182eaf0:	10800517 	ldw	r2,20(r2)
 182eaf4:	10002426 	beq	r2,zero,182eb88 <alt_tse_mac_associate_phy+0x1e0>
 182eaf8:	e0bffb17 	ldw	r2,-20(fp)
 182eafc:	10800617 	ldw	r2,24(r2)
 182eb00:	10002126 	beq	r2,zero,182eb88 <alt_tse_mac_associate_phy+0x1e0>
            	continue;
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
 182eb04:	e0bffb17 	ldw	r2,-20(fp)
 182eb08:	10801017 	ldw	r2,64(r2)
 182eb0c:	10bfffd8 	cmpnei	r2,r2,-1
 182eb10:	10001e1e 	bne	r2,zero,182eb8c <alt_tse_mac_associate_phy+0x1e4>
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182eb14:	e13ffc17 	ldw	r4,-16(fp)
 182eb18:	182ca600 	call	182ca60 <alt_tse_get_mac_info_index>
 182eb1c:	e0bffd05 	stb	r2,-12(fp)
                sys_info_index = alt_tse_get_system_index(psys);
 182eb20:	e13ffb17 	ldw	r4,-20(fp)
 182eb24:	182c9800 	call	182c980 <alt_tse_get_system_index>
 182eb28:	e0bffd85 	stb	r2,-10(fp)
                
                pmac_info->pphy_info = pphy;
 182eb2c:	e0bffc17 	ldw	r2,-16(fp)
 182eb30:	e0ffff17 	ldw	r3,-4(fp)
 182eb34:	10c00115 	stw	r3,4(r2)
                pphy->pmac_info = pmac_info;
 182eb38:	e0bfff17 	ldw	r2,-4(fp)
 182eb3c:	e0fffc17 	ldw	r3,-16(fp)
 182eb40:	10c00615 	stw	r3,24(r2)
                psys->tse_phy_mdio_address = pphy->mdio_address;
 182eb44:	e0bfff17 	ldw	r2,-4(fp)
 182eb48:	10800003 	ldbu	r2,0(r2)
 182eb4c:	10c03fcc 	andi	r3,r2,255
 182eb50:	e0bffb17 	ldw	r2,-20(fp)
 182eb54:	10c01015 	stw	r3,64(r2)
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 182eb58:	e0bffd47 	ldb	r2,-11(fp)
 182eb5c:	e0fffd07 	ldb	r3,-12(fp)
 182eb60:	e13ffd87 	ldb	r4,-10(fp)
 182eb64:	200f883a 	mov	r7,r4
 182eb68:	180d883a 	mov	r6,r3
 182eb6c:	100b883a 	mov	r5,r2
 182eb70:	01006134 	movhi	r4,388
 182eb74:	21093f04 	addi	r4,r4,9468
 182eb78:	1800bd80 	call	1800bd8 <printf>
                is_mapped = 1;
 182eb7c:	00800044 	movi	r2,1
 182eb80:	e0bffa05 	stb	r2,-24(fp)
                break;
 182eb84:	00000906 	br	182ebac <alt_tse_mac_associate_phy+0x204>
            pmac_info = pmac_group->pmac_info[i];
            psys = pmac_info->psys_info;
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
            	continue;
 182eb88:	0001883a 	nop
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
        for(i = 0; i < pmac_group->channel; i++) {
 182eb8c:	e0bff817 	ldw	r2,-32(fp)
 182eb90:	10800044 	addi	r2,r2,1
 182eb94:	e0bff815 	stw	r2,-32(fp)
 182eb98:	e0bffe17 	ldw	r2,-8(fp)
 182eb9c:	10800003 	ldbu	r2,0(r2)
 182eba0:	10803fcc 	andi	r2,r2,255
 182eba4:	e0fff817 	ldw	r3,-32(fp)
 182eba8:	18bfc516 	blt	r3,r2,182eac0 <__alt_mem_mem_0+0xff80eac0>
            }
        }
    }
    
    /* Still cannot find any matched MAC-PHY */
    if(is_mapped == 0) {
 182ebac:	e0bffa03 	ldbu	r2,-24(fp)
 182ebb0:	1000091e 	bne	r2,zero,182ebd8 <alt_tse_mac_associate_phy+0x230>
    	pphy->pmac_info = 0;
 182ebb4:	e0bfff17 	ldw	r2,-4(fp)
 182ebb8:	10000615 	stw	zero,24(r2)
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
 182ebbc:	e0bffd47 	ldb	r2,-11(fp)
 182ebc0:	100b883a 	mov	r5,r2
 182ebc4:	01006134 	movhi	r4,388
 182ebc8:	21095004 	addi	r4,r4,9536
 182ebcc:	1800bd80 	call	1800bd8 <printf>
        return_value = TSE_PHY_MAP_ERROR;
 182ebd0:	00bfffc4 	movi	r2,-1
 182ebd4:	e0bff915 	stw	r2,-28(fp)
    }
    
    return return_value;
 182ebd8:	e0bff917 	ldw	r2,-28(fp)
}
 182ebdc:	e037883a 	mov	sp,fp
 182ebe0:	dfc00117 	ldw	ra,4(sp)
 182ebe4:	df000017 	ldw	fp,0(sp)
 182ebe8:	dec00204 	addi	sp,sp,8
 182ebec:	f800283a 	ret

0182ebf0 <alt_tse_phy_cfg_pcs>:
/* @Function Description: Configure operating mode of Altera PCS if available
 * @API Type:           Internal
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
 182ebf0:	defff804 	addi	sp,sp,-32
 182ebf4:	dfc00715 	stw	ra,28(sp)
 182ebf8:	df000615 	stw	fp,24(sp)
 182ebfc:	df000604 	addi	fp,sp,24
 182ec00:	e13fff15 	stw	r4,-4(fp)
    
    alt_tse_system_info *psys = pmac_info->psys_info;
 182ec04:	e0bfff17 	ldw	r2,-4(fp)
 182ec08:	10800217 	ldw	r2,8(r2)
 182ec0c:	e0bffa15 	stw	r2,-24(fp)
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
 182ec10:	e0bffa17 	ldw	r2,-24(fp)
 182ec14:	10800017 	ldw	r2,0(r2)
 182ec18:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 182ec1c:	e0bfff17 	ldw	r2,-4(fp)
 182ec20:	10800317 	ldw	r2,12(r2)
 182ec24:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182ec28:	e13fff17 	ldw	r4,-4(fp)
 182ec2c:	182ca600 	call	182ca60 <alt_tse_get_mac_info_index>
 182ec30:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182ec34:	e13ffc17 	ldw	r4,-16(fp)
 182ec38:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 182ec3c:	e0bffd45 	stb	r2,-11(fp)

    if(psys->tse_pcs_ena) {
 182ec40:	e0bffa17 	ldw	r2,-24(fp)
 182ec44:	108003c3 	ldbu	r2,15(r2)
 182ec48:	10803fcc 	andi	r2,r2,255
 182ec4c:	10002c26 	beq	r2,zero,182ed00 <alt_tse_phy_cfg_pcs+0x110>
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
 182ec50:	e0bffd47 	ldb	r2,-11(fp)
 182ec54:	e0fffd07 	ldb	r3,-12(fp)
 182ec58:	180d883a 	mov	r6,r3
 182ec5c:	100b883a 	mov	r5,r2
 182ec60:	01006134 	movhi	r4,388
 182ec64:	21098104 	addi	r4,r4,9732
 182ec68:	1800bd80 	call	1800bd8 <printf>
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
 182ec6c:	e0bffb17 	ldw	r2,-20(fp)
 182ec70:	10808004 	addi	r2,r2,512
 182ec74:	10801404 	addi	r2,r2,80
 182ec78:	10800037 	ldwio	r2,0(r2)
 182ec7c:	e0bffe15 	stw	r2,-8(fp)
        
        if(psys->tse_pcs_sgmii) {
 182ec80:	e0bffa17 	ldw	r2,-24(fp)
 182ec84:	10800403 	ldbu	r2,16(r2)
 182ec88:	10803fcc 	andi	r2,r2,255
 182ec8c:	10000e26 	beq	r2,zero,182ecc8 <alt_tse_phy_cfg_pcs+0xd8>
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
 182ec90:	e0bffd47 	ldb	r2,-11(fp)
 182ec94:	e0fffd07 	ldb	r3,-12(fp)
 182ec98:	180d883a 	mov	r6,r3
 182ec9c:	100b883a 	mov	r5,r2
 182eca0:	01006134 	movhi	r4,388
 182eca4:	21098f04 	addi	r4,r4,9788
 182eca8:	1800bd80 	call	1800bd8 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data | 0x03);
 182ecac:	e0bffb17 	ldw	r2,-20(fp)
 182ecb0:	10808004 	addi	r2,r2,512
 182ecb4:	10801404 	addi	r2,r2,80
 182ecb8:	e0fffe17 	ldw	r3,-8(fp)
 182ecbc:	18c000d4 	ori	r3,r3,3
 182ecc0:	10c00035 	stwio	r3,0(r2)
 182ecc4:	00000e06 	br	182ed00 <alt_tse_phy_cfg_pcs+0x110>
            }
        else {
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode disabled\n", mac_group_index, mac_info_index);
 182ecc8:	e0bffd47 	ldb	r2,-11(fp)
 182eccc:	e0fffd07 	ldb	r3,-12(fp)
 182ecd0:	180d883a 	mov	r6,r3
 182ecd4:	100b883a 	mov	r5,r2
 182ecd8:	01006134 	movhi	r4,388
 182ecdc:	21099b04 	addi	r4,r4,9836
 182ece0:	1800bd80 	call	1800bd8 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data & ~0x03);
 182ece4:	e0bffb17 	ldw	r2,-20(fp)
 182ece8:	10808004 	addi	r2,r2,512
 182ecec:	10801404 	addi	r2,r2,80
 182ecf0:	e13ffe17 	ldw	r4,-8(fp)
 182ecf4:	00ffff04 	movi	r3,-4
 182ecf8:	20c6703a 	and	r3,r4,r3
 182ecfc:	10c00035 	stwio	r3,0(r2)
        }
    }
    
    return SUCCESS;
 182ed00:	0005883a 	mov	r2,zero
}
 182ed04:	e037883a 	mov	sp,fp
 182ed08:	dfc00117 	ldw	ra,4(sp)
 182ed0c:	df000017 	ldw	fp,0(sp)
 182ed10:	dec00204 	addi	sp,sp,8
 182ed14:	f800283a 	ret

0182ed18 <alt_tse_phy_init>:
/* @Function Description: Detect and initialize all the PHYs connected
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      SUCCESS
 */
alt_32 alt_tse_phy_init() {
 182ed18:	defffb04 	addi	sp,sp,-20
 182ed1c:	dfc00415 	stw	ra,16(sp)
 182ed20:	df000315 	stw	fp,12(sp)
 182ed24:	df000304 	addi	fp,sp,12
	alt_8 i = 0;
 182ed28:	e03ffd05 	stb	zero,-12(fp)
	alt_8 j = 0;
 182ed2c:	e03ffd45 	stb	zero,-11(fp)
    
    alt_tse_mac_group *pmac_group = 0;
 182ed30:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_mac_info *pmac_info = 0;
 182ed34:	e03fff15 	stw	zero,-4(fp)
    
    /* add supported PHYs */
    alt_tse_phy_add_profile_default();
 182ed38:	182da340 	call	182da34 <alt_tse_phy_add_profile_default>
    
    /* display PHY in profile */
    alt_tse_phy_print_profile();
 182ed3c:	182dcd00 	call	182dcd0 <alt_tse_phy_print_profile>
    
    alt_tse_mac_group_init();
 182ed40:	182dee00 	call	182dee0 <alt_tse_mac_group_init>
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 182ed44:	e03ffd05 	stb	zero,-12(fp)
 182ed48:	00002f06 	br	182ee08 <alt_tse_phy_init+0xf0>
        pmac_group = pmac_groups[i];
 182ed4c:	e0fffd07 	ldb	r3,-12(fp)
 182ed50:	008061f4 	movhi	r2,391
 182ed54:	10a84e04 	addi	r2,r2,-24264
 182ed58:	18c7883a 	add	r3,r3,r3
 182ed5c:	18c7883a 	add	r3,r3,r3
 182ed60:	10c5883a 	add	r2,r2,r3
 182ed64:	10800017 	ldw	r2,0(r2)
 182ed68:	e0bffe15 	stw	r2,-8(fp)
        
        if(pmac_group->pmac_info[0]->psys_info->tse_use_mdio) {
 182ed6c:	e0bffe17 	ldw	r2,-8(fp)
 182ed70:	10800117 	ldw	r2,4(r2)
 182ed74:	10800217 	ldw	r2,8(r2)
 182ed78:	10800203 	ldbu	r2,8(r2)
 182ed7c:	10803fcc 	andi	r2,r2,255
 182ed80:	10000326 	beq	r2,zero,182ed90 <alt_tse_phy_init+0x78>
            
        	/* get connected PHYs */
            alt_tse_mac_get_phy(pmac_group);
 182ed84:	e13ffe17 	ldw	r4,-8(fp)
 182ed88:	182e5840 	call	182e584 <alt_tse_mac_get_phy>
 182ed8c:	00000706 	br	182edac <alt_tse_phy_init+0x94>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
 182ed90:	e0bffd07 	ldb	r2,-12(fp)
 182ed94:	e0fffd47 	ldb	r3,-11(fp)
 182ed98:	180d883a 	mov	r6,r3
 182ed9c:	100b883a 	mov	r5,r2
 182eda0:	01006134 	movhi	r4,388
 182eda4:	2109a704 	addi	r4,r4,9884
 182eda8:	1800bd80 	call	1800bd8 <printf>
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 182edac:	e03ffd45 	stb	zero,-11(fp)
 182edb0:	00000d06 	br	182ede8 <alt_tse_phy_init+0xd0>
            pmac_info = pmac_group->pmac_info[j];
 182edb4:	e0bffd47 	ldb	r2,-11(fp)
 182edb8:	e0fffe17 	ldw	r3,-8(fp)
 182edbc:	10800044 	addi	r2,r2,1
 182edc0:	1085883a 	add	r2,r2,r2
 182edc4:	1085883a 	add	r2,r2,r2
 182edc8:	1885883a 	add	r2,r3,r2
 182edcc:	10800017 	ldw	r2,0(r2)
 182edd0:	e0bfff15 	stw	r2,-4(fp)
            
            alt_tse_phy_cfg_pcs(pmac_info);
 182edd4:	e13fff17 	ldw	r4,-4(fp)
 182edd8:	182ebf00 	call	182ebf0 <alt_tse_phy_cfg_pcs>
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 182eddc:	e0bffd43 	ldbu	r2,-11(fp)
 182ede0:	10800044 	addi	r2,r2,1
 182ede4:	e0bffd45 	stb	r2,-11(fp)
 182ede8:	e0fffd47 	ldb	r3,-11(fp)
 182edec:	e0bffe17 	ldw	r2,-8(fp)
 182edf0:	10800003 	ldbu	r2,0(r2)
 182edf4:	10803fcc 	andi	r2,r2,255
 182edf8:	18bfee16 	blt	r3,r2,182edb4 <__alt_mem_mem_0+0xff80edb4>
    
    alt_tse_mac_group_init();
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 182edfc:	e0bffd03 	ldbu	r2,-12(fp)
 182ee00:	10800044 	addi	r2,r2,1
 182ee04:	e0bffd05 	stb	r2,-12(fp)
 182ee08:	e0fffd07 	ldb	r3,-12(fp)
 182ee0c:	d0a80e43 	ldbu	r2,-24519(gp)
 182ee10:	10803fcc 	andi	r2,r2,255
 182ee14:	18bfcd16 	blt	r3,r2,182ed4c <__alt_mem_mem_0+0xff80ed4c>
            
            alt_tse_phy_cfg_pcs(pmac_info);
        }
    }
                
    return SUCCESS;
 182ee18:	0005883a 	mov	r2,zero
}
 182ee1c:	e037883a 	mov	sp,fp
 182ee20:	dfc00117 	ldw	ra,4(sp)
 182ee24:	df000017 	ldw	fp,0(sp)
 182ee28:	dec00204 	addi	sp,sp,8
 182ee2c:	f800283a 	ret

0182ee30 <alt_tse_phy_restart_an>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 182ee30:	defff704 	addi	sp,sp,-36
 182ee34:	dfc00815 	stw	ra,32(sp)
 182ee38:	df000715 	stw	fp,28(sp)
 182ee3c:	df000704 	addi	fp,sp,28
 182ee40:	e13ffe15 	stw	r4,-8(fp)
 182ee44:	e17fff15 	stw	r5,-4(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 182ee48:	e0bffe17 	ldw	r2,-8(fp)
 182ee4c:	10800617 	ldw	r2,24(r2)
 182ee50:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 182ee54:	e0bffb17 	ldw	r2,-20(fp)
 182ee58:	10800317 	ldw	r2,12(r2)
 182ee5c:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182ee60:	e13ffb17 	ldw	r4,-20(fp)
 182ee64:	182ca600 	call	182ca60 <alt_tse_get_mac_info_index>
 182ee68:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182ee6c:	e13ffc17 	ldw	r4,-16(fp)
 182ee70:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 182ee74:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 182ee78:	e13ffe17 	ldw	r4,-8(fp)
 182ee7c:	182d7a00 	call	182d7a0 <alt_tse_phy_rd_mdio_addr>
 182ee80:	e0bffd85 	stb	r2,-10(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 182ee84:	e0bffe17 	ldw	r2,-8(fp)
 182ee88:	10800003 	ldbu	r2,0(r2)
 182ee8c:	10803fcc 	andi	r2,r2,255
 182ee90:	100b883a 	mov	r5,r2
 182ee94:	e13ffe17 	ldw	r4,-8(fp)
 182ee98:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 182ee9c:	01c00044 	movi	r7,1
 182eea0:	018000c4 	movi	r6,3
 182eea4:	01400044 	movi	r5,1
 182eea8:	e13ffe17 	ldw	r4,-8(fp)
 182eeac:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182eeb0:	10000d1e 	bne	r2,zero,182eee8 <alt_tse_phy_restart_an+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 182eeb4:	e0bffd47 	ldb	r2,-11(fp)
 182eeb8:	e0fffd07 	ldb	r3,-12(fp)
 182eebc:	180d883a 	mov	r6,r3
 182eec0:	100b883a 	mov	r5,r2
 182eec4:	01006134 	movhi	r4,388
 182eec8:	2109bd04 	addi	r4,r4,9972
 182eecc:	1800bd80 	call	1800bd8 <printf>
        
		/* Restore previous MDIO address */
		alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 182eed0:	e0bffd83 	ldbu	r2,-10(fp)
 182eed4:	100b883a 	mov	r5,r2
 182eed8:	e13ffe17 	ldw	r4,-8(fp)
 182eedc:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
		
		return TSE_PHY_AN_NOT_CAPABLE;
 182eee0:	00bfff84 	movi	r2,-2
 182eee4:	00003c06 	br	182efd8 <alt_tse_phy_restart_an+0x1a8>
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
 182eee8:	00800044 	movi	r2,1
 182eeec:	d8800015 	stw	r2,0(sp)
 182eef0:	01c00044 	movi	r7,1
 182eef4:	01800304 	movi	r6,12
 182eef8:	000b883a 	mov	r5,zero
 182eefc:	e13ffe17 	ldw	r4,-8(fp)
 182ef00:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
 182ef04:	00800044 	movi	r2,1
 182ef08:	d8800015 	stw	r2,0(sp)
 182ef0c:	01c00044 	movi	r7,1
 182ef10:	01800244 	movi	r6,9
 182ef14:	000b883a 	mov	r5,zero
 182ef18:	e13ffe17 	ldw	r4,-8(fp)
 182ef1c:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
 182ef20:	e0bffd47 	ldb	r2,-11(fp)
 182ef24:	e0fffd07 	ldb	r3,-12(fp)
 182ef28:	180d883a 	mov	r6,r3
 182ef2c:	100b883a 	mov	r5,r2
 182ef30:	01006134 	movhi	r4,388
 182ef34:	2109cd04 	addi	r4,r4,10036
 182ef38:	1800bd80 	call	1800bd8 <printf>
    
    alt_32 timeout = 0;
 182ef3c:	e03ffa15 	stw	zero,-24(fp)
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 182ef40:	00001306 	br	182ef90 <alt_tse_phy_restart_an+0x160>
        if(timeout++ > timeout_threshold) {
 182ef44:	e0bffa17 	ldw	r2,-24(fp)
 182ef48:	10c00044 	addi	r3,r2,1
 182ef4c:	e0fffa15 	stw	r3,-24(fp)
 182ef50:	1007883a 	mov	r3,r2
 182ef54:	e0bfff17 	ldw	r2,-4(fp)
 182ef58:	10c00d2e 	bgeu	r2,r3,182ef90 <alt_tse_phy_restart_an+0x160>
           tse_dprintf(4, "WARNING : PHY[%d.%d] - Auto-Negotiation FAILED\n", mac_group_index, mac_info_index);
 182ef5c:	e0bffd47 	ldb	r2,-11(fp)
 182ef60:	e0fffd07 	ldb	r3,-12(fp)
 182ef64:	180d883a 	mov	r6,r3
 182ef68:	100b883a 	mov	r5,r2
 182ef6c:	01006134 	movhi	r4,388
 182ef70:	2109df04 	addi	r4,r4,10108
 182ef74:	1800bd80 	call	1800bd8 <printf>
		   
		   /* Restore previous MDIO address */
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 182ef78:	e0bffd83 	ldbu	r2,-10(fp)
 182ef7c:	100b883a 	mov	r5,r2
 182ef80:	e13ffe17 	ldw	r4,-8(fp)
 182ef84:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
           
		   return TSE_PHY_AN_NOT_COMPLETE;
 182ef88:	00bfffc4 	movi	r2,-1
 182ef8c:	00001206 	br	182efd8 <alt_tse_phy_restart_an+0x1a8>
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
    
    alt_32 timeout = 0;
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 182ef90:	01c00044 	movi	r7,1
 182ef94:	01800144 	movi	r6,5
 182ef98:	01400044 	movi	r5,1
 182ef9c:	e13ffe17 	ldw	r4,-8(fp)
 182efa0:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182efa4:	103fe726 	beq	r2,zero,182ef44 <__alt_mem_mem_0+0xff80ef44>
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
           
		   return TSE_PHY_AN_NOT_COMPLETE;
        }
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Auto-Negotiation PASSED\n", mac_group_index, mac_info_index);
 182efa8:	e0bffd47 	ldb	r2,-11(fp)
 182efac:	e0fffd07 	ldb	r3,-12(fp)
 182efb0:	180d883a 	mov	r6,r3
 182efb4:	100b883a 	mov	r5,r2
 182efb8:	01006134 	movhi	r4,388
 182efbc:	2109eb04 	addi	r4,r4,10156
 182efc0:	1800bd80 	call	1800bd8 <printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 182efc4:	e0bffd83 	ldbu	r2,-10(fp)
 182efc8:	100b883a 	mov	r5,r2
 182efcc:	e13ffe17 	ldw	r4,-8(fp)
 182efd0:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE;
 182efd4:	0005883a 	mov	r2,zero
}
 182efd8:	e037883a 	mov	sp,fp
 182efdc:	dfc00117 	ldw	ra,4(sp)
 182efe0:	df000017 	ldw	fp,0(sp)
 182efe4:	dec00204 	addi	sp,sp,8
 182efe8:	f800283a 	ret

0182efec <alt_tse_phy_check_link>:
 * @param pphy                  Pointer to the alt_tse_phy_info structure
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 182efec:	defff904 	addi	sp,sp,-28
 182eff0:	dfc00615 	stw	ra,24(sp)
 182eff4:	df000515 	stw	fp,20(sp)
 182eff8:	df000504 	addi	fp,sp,20
 182effc:	e13ffe15 	stw	r4,-8(fp)
 182f000:	e17fff15 	stw	r5,-4(fp)

    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 182f004:	e0bffe17 	ldw	r2,-8(fp)
 182f008:	10800617 	ldw	r2,24(r2)
 182f00c:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 182f010:	e0bffb17 	ldw	r2,-20(fp)
 182f014:	10800317 	ldw	r2,12(r2)
 182f018:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182f01c:	e13ffb17 	ldw	r4,-20(fp)
 182f020:	182ca600 	call	182ca60 <alt_tse_get_mac_info_index>
 182f024:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
 182f028:	e13ffc17 	ldw	r4,-16(fp)
 182f02c:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 182f030:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 182f034:	e13ffe17 	ldw	r4,-8(fp)
 182f038:	182d7a00 	call	182d7a0 <alt_tse_phy_rd_mdio_addr>
 182f03c:	e0bffd85 	stb	r2,-10(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 182f040:	e0bffe17 	ldw	r2,-8(fp)
 182f044:	10800003 	ldbu	r2,0(r2)
 182f048:	10803fcc 	andi	r2,r2,255
 182f04c:	100b883a 	mov	r5,r2
 182f050:	e13ffe17 	ldw	r4,-8(fp)
 182f054:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
 182f058:	e0bffd47 	ldb	r2,-11(fp)
 182f05c:	e0fffd07 	ldb	r3,-12(fp)
 182f060:	180d883a 	mov	r6,r3
 182f064:	100b883a 	mov	r5,r2
 182f068:	01006134 	movhi	r4,388
 182f06c:	2109f704 	addi	r4,r4,10204
 182f070:	1800bd80 	call	1800bd8 <printf>
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 182f074:	01c00044 	movi	r7,1
 182f078:	01800384 	movi	r6,14
 182f07c:	000b883a 	mov	r5,zero
 182f080:	e13ffe17 	ldw	r4,-8(fp)
 182f084:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f088:	1000061e 	bne	r2,zero,182f0a4 <alt_tse_phy_check_link+0xb8>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
 182f08c:	01c00044 	movi	r7,1
 182f090:	01800144 	movi	r6,5
 182f094:	01400044 	movi	r5,1
 182f098:	e13ffe17 	ldw	r4,-8(fp)
 182f09c:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 182f0a0:	1000191e 	bne	r2,zero,182f108 <alt_tse_phy_check_link+0x11c>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
        
        tse_dprintf(5, "INFO    : PHY[%d.%d] - Link not yet established, restart auto-negotiation...\n", mac_group_index, mac_info_index);
 182f0a4:	e0bffd47 	ldb	r2,-11(fp)
 182f0a8:	e0fffd07 	ldb	r3,-12(fp)
 182f0ac:	180d883a 	mov	r6,r3
 182f0b0:	100b883a 	mov	r5,r2
 182f0b4:	01006134 	movhi	r4,388
 182f0b8:	210a0204 	addi	r4,r4,10248
 182f0bc:	1800bd80 	call	1800bd8 <printf>
        /* restart Auto-Negotiation */
        /* if Auto-Negotiation still cannot complete, then go to next PHY */
        if(alt_tse_phy_restart_an(pphy, timeout_threshold) == TSE_PHY_AN_NOT_COMPLETE) {
 182f0c0:	e17fff17 	ldw	r5,-4(fp)
 182f0c4:	e13ffe17 	ldw	r4,-8(fp)
 182f0c8:	182ee300 	call	182ee30 <alt_tse_phy_restart_an>
 182f0cc:	10bfffd8 	cmpnei	r2,r2,-1
 182f0d0:	10000d1e 	bne	r2,zero,182f108 <alt_tse_phy_check_link+0x11c>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Link could not established\n", mac_group_index, mac_info_index);
 182f0d4:	e0bffd47 	ldb	r2,-11(fp)
 182f0d8:	e0fffd07 	ldb	r3,-12(fp)
 182f0dc:	180d883a 	mov	r6,r3
 182f0e0:	100b883a 	mov	r5,r2
 182f0e4:	01006134 	movhi	r4,388
 182f0e8:	210a1604 	addi	r4,r4,10328
 182f0ec:	1800bd80 	call	1800bd8 <printf>
			
			/* Restore previous MDIO address */
			alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 182f0f0:	e0bffd83 	ldbu	r2,-10(fp)
 182f0f4:	100b883a 	mov	r5,r2
 182f0f8:	e13ffe17 	ldw	r4,-8(fp)
 182f0fc:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
	
            return TSE_PHY_AN_NOT_COMPLETE;
 182f100:	00bfffc4 	movi	r2,-1
 182f104:	00000c06 	br	182f138 <alt_tse_phy_check_link+0x14c>
        }            
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Link established\n", mac_group_index, mac_info_index);
 182f108:	e0bffd47 	ldb	r2,-11(fp)
 182f10c:	e0fffd07 	ldb	r3,-12(fp)
 182f110:	180d883a 	mov	r6,r3
 182f114:	100b883a 	mov	r5,r2
 182f118:	01006134 	movhi	r4,388
 182f11c:	210a2304 	addi	r4,r4,10380
 182f120:	1800bd80 	call	1800bd8 <printf>
            
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 182f124:	e0bffd83 	ldbu	r2,-10(fp)
 182f128:	100b883a 	mov	r5,r2
 182f12c:	e13ffe17 	ldw	r4,-8(fp)
 182f130:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE; 
 182f134:	0005883a 	mov	r2,zero
}
 182f138:	e037883a 	mov	sp,fp
 182f13c:	dfc00117 	ldw	ra,4(sp)
 182f140:	df000017 	ldw	fp,0(sp)
 182f144:	dec00204 	addi	sp,sp,8
 182f148:	f800283a 	ret

0182f14c <alt_tse_phy_get_cap>:
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
 182f14c:	defff904 	addi	sp,sp,-28
 182f150:	dfc00615 	stw	ra,24(sp)
 182f154:	df000515 	stw	fp,20(sp)
 182f158:	df000504 	addi	fp,sp,20
 182f15c:	e13fff15 	stw	r4,-4(fp)
	alt_32 return_value = TSE_PHY_AN_COMPLETE;
 182f160:	e03ffb15 	stw	zero,-20(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 182f164:	e0bfff17 	ldw	r2,-4(fp)
 182f168:	10800617 	ldw	r2,24(r2)
 182f16c:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 182f170:	e0bffc17 	ldw	r2,-16(fp)
 182f174:	10800317 	ldw	r2,12(r2)
 182f178:	e0bffd15 	stw	r2,-12(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182f17c:	e13ffc17 	ldw	r4,-16(fp)
 182f180:	182ca600 	call	182ca60 <alt_tse_get_mac_info_index>
 182f184:	e0bffe05 	stb	r2,-8(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
 182f188:	e13ffd17 	ldw	r4,-12(fp)
 182f18c:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 182f190:	e0bffe45 	stb	r2,-7(fp)
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 182f194:	e13fff17 	ldw	r4,-4(fp)
 182f198:	182d7a00 	call	182d7a0 <alt_tse_phy_rd_mdio_addr>
 182f19c:	e0bffe85 	stb	r2,-6(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 182f1a0:	e0bfff17 	ldw	r2,-4(fp)
 182f1a4:	10800003 	ldbu	r2,0(r2)
 182f1a8:	10803fcc 	andi	r2,r2,255
 182f1ac:	100b883a 	mov	r5,r2
 182f1b0:	e13fff17 	ldw	r4,-4(fp)
 182f1b4:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
            
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 182f1b8:	01c00044 	movi	r7,1
 182f1bc:	018000c4 	movi	r6,3
 182f1c0:	01400044 	movi	r5,1
 182f1c4:	e13fff17 	ldw	r4,-4(fp)
 182f1c8:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f1cc:	10000d1e 	bne	r2,zero,182f204 <alt_tse_phy_get_cap+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 182f1d0:	e0bffe47 	ldb	r2,-7(fp)
 182f1d4:	e0fffe07 	ldb	r3,-8(fp)
 182f1d8:	180d883a 	mov	r6,r3
 182f1dc:	100b883a 	mov	r5,r2
 182f1e0:	01006134 	movhi	r4,388
 182f1e4:	2109bd04 	addi	r4,r4,9972
 182f1e8:	1800bd80 	call	1800bd8 <printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 182f1ec:	e0bffe83 	ldbu	r2,-6(fp)
 182f1f0:	100b883a 	mov	r5,r2
 182f1f4:	e13fff17 	ldw	r4,-4(fp)
 182f1f8:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
 182f1fc:	00bfff84 	movi	r2,-2
 182f200:	00013206 	br	182f6cc <alt_tse_phy_get_cap+0x580>
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 182f204:	017e0034 	movhi	r5,63488
 182f208:	e13fff17 	ldw	r4,-4(fp)
 182f20c:	182ee300 	call	182ee30 <alt_tse_phy_restart_an>
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
 182f210:	01c00044 	movi	r7,1
 182f214:	01800144 	movi	r6,5
 182f218:	01400044 	movi	r5,1
 182f21c:	e13fff17 	ldw	r4,-4(fp)
 182f220:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f224:	1000021e 	bne	r2,zero,182f230 <alt_tse_phy_get_cap+0xe4>
        return_value = TSE_PHY_AN_NOT_COMPLETE;
 182f228:	00bfffc4 	movi	r2,-1
 182f22c:	e0bffb15 	stw	r2,-20(fp)
    }
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
 182f230:	01c00044 	movi	r7,1
 182f234:	018003c4 	movi	r6,15
 182f238:	014003c4 	movi	r5,15
 182f23c:	e13fff17 	ldw	r4,-4(fp)
 182f240:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f244:	1007883a 	mov	r3,r2
 182f248:	e0bfff17 	ldw	r2,-4(fp)
 182f24c:	10c00045 	stb	r3,1(r2)
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
 182f250:	01c00044 	movi	r7,1
 182f254:	01800384 	movi	r6,14
 182f258:	014003c4 	movi	r5,15
 182f25c:	e13fff17 	ldw	r4,-4(fp)
 182f260:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f264:	1007883a 	mov	r3,r2
 182f268:	e0bfff17 	ldw	r2,-4(fp)
 182f26c:	10c00085 	stb	r3,2(r2)
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
 182f270:	01c00044 	movi	r7,1
 182f274:	01800344 	movi	r6,13
 182f278:	014003c4 	movi	r5,15
 182f27c:	e13fff17 	ldw	r4,-4(fp)
 182f280:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f284:	1007883a 	mov	r3,r2
 182f288:	e0bfff17 	ldw	r2,-4(fp)
 182f28c:	10c000c5 	stb	r3,3(r2)
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 182f290:	01c00044 	movi	r7,1
 182f294:	01800304 	movi	r6,12
 182f298:	014003c4 	movi	r5,15
 182f29c:	e13fff17 	ldw	r4,-4(fp)
 182f2a0:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f2a4:	1007883a 	mov	r3,r2
 182f2a8:	e0bfff17 	ldw	r2,-4(fp)
 182f2ac:	10c00105 	stb	r3,4(r2)
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 182f2b0:	01c00044 	movi	r7,1
 182f2b4:	018003c4 	movi	r6,15
 182f2b8:	01400044 	movi	r5,1
 182f2bc:	e13fff17 	ldw	r4,-4(fp)
 182f2c0:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f2c4:	1007883a 	mov	r3,r2
 182f2c8:	e0bfff17 	ldw	r2,-4(fp)
 182f2cc:	10c00145 	stb	r3,5(r2)
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 182f2d0:	01c00044 	movi	r7,1
 182f2d4:	01800384 	movi	r6,14
 182f2d8:	01400044 	movi	r5,1
 182f2dc:	e13fff17 	ldw	r4,-4(fp)
 182f2e0:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f2e4:	1007883a 	mov	r3,r2
 182f2e8:	e0bfff17 	ldw	r2,-4(fp)
 182f2ec:	10c00185 	stb	r3,6(r2)
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 182f2f0:	01c00044 	movi	r7,1
 182f2f4:	01800344 	movi	r6,13
 182f2f8:	01400044 	movi	r5,1
 182f2fc:	e13fff17 	ldw	r4,-4(fp)
 182f300:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f304:	1007883a 	mov	r3,r2
 182f308:	e0bfff17 	ldw	r2,-4(fp)
 182f30c:	10c001c5 	stb	r3,7(r2)
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
 182f310:	01c00044 	movi	r7,1
 182f314:	01800284 	movi	r6,10
 182f318:	01400044 	movi	r5,1
 182f31c:	e13fff17 	ldw	r4,-4(fp)
 182f320:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f324:	1007883a 	mov	r3,r2
 182f328:	e0bfff17 	ldw	r2,-4(fp)
 182f32c:	10c00205 	stb	r3,8(r2)
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
 182f330:	01c00044 	movi	r7,1
 182f334:	01800244 	movi	r6,9
 182f338:	01400044 	movi	r5,1
 182f33c:	e13fff17 	ldw	r4,-4(fp)
 182f340:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f344:	1007883a 	mov	r3,r2
 182f348:	e0bfff17 	ldw	r2,-4(fp)
 182f34c:	10c00245 	stb	r3,9(r2)
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 182f350:	01c00044 	movi	r7,1
 182f354:	01800304 	movi	r6,12
 182f358:	01400044 	movi	r5,1
 182f35c:	e13fff17 	ldw	r4,-4(fp)
 182f360:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f364:	1007883a 	mov	r3,r2
 182f368:	e0bfff17 	ldw	r2,-4(fp)
 182f36c:	10c00285 	stb	r3,10(r2)
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 182f370:	01c00044 	movi	r7,1
 182f374:	018002c4 	movi	r6,11
 182f378:	01400044 	movi	r5,1
 182f37c:	e13fff17 	ldw	r4,-4(fp)
 182f380:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f384:	1007883a 	mov	r3,r2
 182f388:	e0bfff17 	ldw	r2,-4(fp)
 182f38c:	10c002c5 	stb	r3,11(r2)
    
    /* get link partner capability */
    pphy->link_capability.lp_1000_base_t_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_FULL_ADV, 1);
 182f390:	01c00044 	movi	r7,1
 182f394:	018002c4 	movi	r6,11
 182f398:	01400284 	movi	r5,10
 182f39c:	e13fff17 	ldw	r4,-4(fp)
 182f3a0:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f3a4:	1007883a 	mov	r3,r2
 182f3a8:	e0bfff17 	ldw	r2,-4(fp)
 182f3ac:	10c00305 	stb	r3,12(r2)
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
 182f3b0:	01c00044 	movi	r7,1
 182f3b4:	01800284 	movi	r6,10
 182f3b8:	01400284 	movi	r5,10
 182f3bc:	e13fff17 	ldw	r4,-4(fp)
 182f3c0:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f3c4:	1007883a 	mov	r3,r2
 182f3c8:	e0bfff17 	ldw	r2,-4(fp)
 182f3cc:	10c00345 	stb	r3,13(r2)
    
    pphy->link_capability.lp_100_base_t4       = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1);
 182f3d0:	01c00044 	movi	r7,1
 182f3d4:	01800244 	movi	r6,9
 182f3d8:	01400144 	movi	r5,5
 182f3dc:	e13fff17 	ldw	r4,-4(fp)
 182f3e0:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f3e4:	1007883a 	mov	r3,r2
 182f3e8:	e0bfff17 	ldw	r2,-4(fp)
 182f3ec:	10c00385 	stb	r3,14(r2)
    pphy->link_capability.lp_100_base_tx_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1);
 182f3f0:	01c00044 	movi	r7,1
 182f3f4:	01800204 	movi	r6,8
 182f3f8:	01400144 	movi	r5,5
 182f3fc:	e13fff17 	ldw	r4,-4(fp)
 182f400:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f404:	1007883a 	mov	r3,r2
 182f408:	e0bfff17 	ldw	r2,-4(fp)
 182f40c:	10c003c5 	stb	r3,15(r2)
    pphy->link_capability.lp_100_base_tx_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1);
 182f410:	01c00044 	movi	r7,1
 182f414:	018001c4 	movi	r6,7
 182f418:	01400144 	movi	r5,5
 182f41c:	e13fff17 	ldw	r4,-4(fp)
 182f420:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f424:	1007883a 	mov	r3,r2
 182f428:	e0bfff17 	ldw	r2,-4(fp)
 182f42c:	10c00405 	stb	r3,16(r2)
    pphy->link_capability.lp_10_base_tx_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1);
 182f430:	01c00044 	movi	r7,1
 182f434:	01800184 	movi	r6,6
 182f438:	01400144 	movi	r5,5
 182f43c:	e13fff17 	ldw	r4,-4(fp)
 182f440:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f444:	1007883a 	mov	r3,r2
 182f448:	e0bfff17 	ldw	r2,-4(fp)
 182f44c:	10c00445 	stb	r3,17(r2)
    pphy->link_capability.lp_10_base_tx_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1);
 182f450:	01c00044 	movi	r7,1
 182f454:	01800144 	movi	r6,5
 182f458:	01400144 	movi	r5,5
 182f45c:	e13fff17 	ldw	r4,-4(fp)
 182f460:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f464:	1007883a 	mov	r3,r2
 182f468:	e0bfff17 	ldw	r2,-4(fp)
 182f46c:	10c00485 	stb	r3,18(r2)
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Capability of PHY :\n", mac_group_index, mac_info_index);
 182f470:	e0bffe47 	ldb	r2,-7(fp)
 182f474:	e0fffe07 	ldb	r3,-8(fp)
 182f478:	180d883a 	mov	r6,r3
 182f47c:	100b883a 	mov	r5,r2
 182f480:	01006134 	movhi	r4,388
 182f484:	210a2e04 	addi	r4,r4,10424
 182f488:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Full Duplex = %d\n", pphy->link_capability.cap_1000_base_x_full);
 182f48c:	e0bfff17 	ldw	r2,-4(fp)
 182f490:	10800043 	ldbu	r2,1(r2)
 182f494:	10803fcc 	andi	r2,r2,255
 182f498:	100b883a 	mov	r5,r2
 182f49c:	01006134 	movhi	r4,388
 182f4a0:	210a3904 	addi	r4,r4,10468
 182f4a4:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Half Duplex = %d\n", pphy->link_capability.cap_1000_base_x_half);
 182f4a8:	e0bfff17 	ldw	r2,-4(fp)
 182f4ac:	10800083 	ldbu	r2,2(r2)
 182f4b0:	10803fcc 	andi	r2,r2,255
 182f4b4:	100b883a 	mov	r5,r2
 182f4b8:	01006134 	movhi	r4,388
 182f4bc:	210a4304 	addi	r4,r4,10508
 182f4c0:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.cap_1000_base_t_full);
 182f4c4:	e0bfff17 	ldw	r2,-4(fp)
 182f4c8:	108000c3 	ldbu	r2,3(r2)
 182f4cc:	10803fcc 	andi	r2,r2,255
 182f4d0:	100b883a 	mov	r5,r2
 182f4d4:	01006134 	movhi	r4,388
 182f4d8:	210a4d04 	addi	r4,r4,10548
 182f4dc:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.cap_1000_base_t_half);
 182f4e0:	e0bfff17 	ldw	r2,-4(fp)
 182f4e4:	10800103 	ldbu	r2,4(r2)
 182f4e8:	10803fcc 	andi	r2,r2,255
 182f4ec:	100b883a 	mov	r5,r2
 182f4f0:	01006134 	movhi	r4,388
 182f4f4:	210a5704 	addi	r4,r4,10588
 182f4f8:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.cap_100_base_t4);
 182f4fc:	e0bfff17 	ldw	r2,-4(fp)
 182f500:	10800143 	ldbu	r2,5(r2)
 182f504:	10803fcc 	andi	r2,r2,255
 182f508:	100b883a 	mov	r5,r2
 182f50c:	01006134 	movhi	r4,388
 182f510:	210a6104 	addi	r4,r4,10628
 182f514:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Full Duplex  = %d\n", pphy->link_capability.cap_100_base_x_full);
 182f518:	e0bfff17 	ldw	r2,-4(fp)
 182f51c:	10800183 	ldbu	r2,6(r2)
 182f520:	10803fcc 	andi	r2,r2,255
 182f524:	100b883a 	mov	r5,r2
 182f528:	01006134 	movhi	r4,388
 182f52c:	210a6b04 	addi	r4,r4,10668
 182f530:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Half Duplex  = %d\n", pphy->link_capability.cap_100_base_x_half);
 182f534:	e0bfff17 	ldw	r2,-4(fp)
 182f538:	108001c3 	ldbu	r2,7(r2)
 182f53c:	10803fcc 	andi	r2,r2,255
 182f540:	100b883a 	mov	r5,r2
 182f544:	01006134 	movhi	r4,388
 182f548:	210a7504 	addi	r4,r4,10708
 182f54c:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Full Duplex = %d\n", pphy->link_capability.cap_100_base_t2_full);
 182f550:	e0bfff17 	ldw	r2,-4(fp)
 182f554:	10800203 	ldbu	r2,8(r2)
 182f558:	10803fcc 	andi	r2,r2,255
 182f55c:	100b883a 	mov	r5,r2
 182f560:	01006134 	movhi	r4,388
 182f564:	210a7f04 	addi	r4,r4,10748
 182f568:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Half Duplex = %d\n", pphy->link_capability.cap_100_base_t2_half);
 182f56c:	e0bfff17 	ldw	r2,-4(fp)
 182f570:	10800243 	ldbu	r2,9(r2)
 182f574:	10803fcc 	andi	r2,r2,255
 182f578:	100b883a 	mov	r5,r2
 182f57c:	01006134 	movhi	r4,388
 182f580:	210a8904 	addi	r4,r4,10788
 182f584:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Full Duplex   = %d\n", pphy->link_capability.cap_10_base_t_full);
 182f588:	e0bfff17 	ldw	r2,-4(fp)
 182f58c:	10800283 	ldbu	r2,10(r2)
 182f590:	10803fcc 	andi	r2,r2,255
 182f594:	100b883a 	mov	r5,r2
 182f598:	01006134 	movhi	r4,388
 182f59c:	210a9304 	addi	r4,r4,10828
 182f5a0:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Half Duplex   = %d\n", pphy->link_capability.cap_10_base_t_half);
 182f5a4:	e0bfff17 	ldw	r2,-4(fp)
 182f5a8:	108002c3 	ldbu	r2,11(r2)
 182f5ac:	10803fcc 	andi	r2,r2,255
 182f5b0:	100b883a 	mov	r5,r2
 182f5b4:	01006134 	movhi	r4,388
 182f5b8:	210a9d04 	addi	r4,r4,10868
 182f5bc:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "\n");
 182f5c0:	01006134 	movhi	r4,388
 182f5c4:	21090304 	addi	r4,r4,9228
 182f5c8:	182b8680 	call	182b868 <no_printf>
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Link Partner Capability :\n", mac_group_index, mac_info_index);
 182f5cc:	e0bffe47 	ldb	r2,-7(fp)
 182f5d0:	e0fffe07 	ldb	r3,-8(fp)
 182f5d4:	180d883a 	mov	r6,r3
 182f5d8:	100b883a 	mov	r5,r2
 182f5dc:	01006134 	movhi	r4,388
 182f5e0:	210aa704 	addi	r4,r4,10908
 182f5e4:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.lp_1000_base_t_full);
 182f5e8:	e0bfff17 	ldw	r2,-4(fp)
 182f5ec:	10800303 	ldbu	r2,12(r2)
 182f5f0:	10803fcc 	andi	r2,r2,255
 182f5f4:	100b883a 	mov	r5,r2
 182f5f8:	01006134 	movhi	r4,388
 182f5fc:	210a4d04 	addi	r4,r4,10548
 182f600:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.lp_1000_base_t_half);
 182f604:	e0bfff17 	ldw	r2,-4(fp)
 182f608:	10800343 	ldbu	r2,13(r2)
 182f60c:	10803fcc 	andi	r2,r2,255
 182f610:	100b883a 	mov	r5,r2
 182f614:	01006134 	movhi	r4,388
 182f618:	210a5704 	addi	r4,r4,10588
 182f61c:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.lp_100_base_t4);
 182f620:	e0bfff17 	ldw	r2,-4(fp)
 182f624:	10800383 	ldbu	r2,14(r2)
 182f628:	10803fcc 	andi	r2,r2,255
 182f62c:	100b883a 	mov	r5,r2
 182f630:	01006134 	movhi	r4,388
 182f634:	210a6104 	addi	r4,r4,10628
 182f638:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Full Duplex = %d\n", pphy->link_capability.lp_100_base_tx_full);
 182f63c:	e0bfff17 	ldw	r2,-4(fp)
 182f640:	108003c3 	ldbu	r2,15(r2)
 182f644:	10803fcc 	andi	r2,r2,255
 182f648:	100b883a 	mov	r5,r2
 182f64c:	01006134 	movhi	r4,388
 182f650:	210ab404 	addi	r4,r4,10960
 182f654:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Half Duplex = %d\n", pphy->link_capability.lp_100_base_tx_half);
 182f658:	e0bfff17 	ldw	r2,-4(fp)
 182f65c:	10800403 	ldbu	r2,16(r2)
 182f660:	10803fcc 	andi	r2,r2,255
 182f664:	100b883a 	mov	r5,r2
 182f668:	01006134 	movhi	r4,388
 182f66c:	210abe04 	addi	r4,r4,11000
 182f670:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Full Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_full);
 182f674:	e0bfff17 	ldw	r2,-4(fp)
 182f678:	10800443 	ldbu	r2,17(r2)
 182f67c:	10803fcc 	andi	r2,r2,255
 182f680:	100b883a 	mov	r5,r2
 182f684:	01006134 	movhi	r4,388
 182f688:	210ac804 	addi	r4,r4,11040
 182f68c:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Half Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_half);
 182f690:	e0bfff17 	ldw	r2,-4(fp)
 182f694:	10800483 	ldbu	r2,18(r2)
 182f698:	10803fcc 	andi	r2,r2,255
 182f69c:	100b883a 	mov	r5,r2
 182f6a0:	01006134 	movhi	r4,388
 182f6a4:	210ad204 	addi	r4,r4,11080
 182f6a8:	182b8680 	call	182b868 <no_printf>
    tse_dprintf(6, "\n");
 182f6ac:	01006134 	movhi	r4,388
 182f6b0:	21090304 	addi	r4,r4,9228
 182f6b4:	182b8680 	call	182b868 <no_printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 182f6b8:	e0bffe83 	ldbu	r2,-6(fp)
 182f6bc:	100b883a 	mov	r5,r2
 182f6c0:	e13fff17 	ldw	r4,-4(fp)
 182f6c4:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
    
    return return_value;
 182f6c8:	e0bffb17 	ldw	r2,-20(fp)
    
}
 182f6cc:	e037883a 	mov	sp,fp
 182f6d0:	dfc00117 	ldw	ra,4(sp)
 182f6d4:	df000017 	ldw	fp,0(sp)
 182f6d8:	dec00204 	addi	sp,sp,8
 182f6dc:	f800283a 	ret

0182f6e0 <alt_tse_phy_set_adv_1000>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
 182f6e0:	defff804 	addi	sp,sp,-32
 182f6e4:	dfc00715 	stw	ra,28(sp)
 182f6e8:	df000615 	stw	fp,24(sp)
 182f6ec:	df000604 	addi	fp,sp,24
 182f6f0:	e13ffe15 	stw	r4,-8(fp)
 182f6f4:	2805883a 	mov	r2,r5
 182f6f8:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 182f6fc:	e0bffe17 	ldw	r2,-8(fp)
 182f700:	10800617 	ldw	r2,24(r2)
 182f704:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 182f708:	e0bffb17 	ldw	r2,-20(fp)
 182f70c:	10800317 	ldw	r2,12(r2)
 182f710:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182f714:	e13ffb17 	ldw	r4,-20(fp)
 182f718:	182ca600 	call	182ca60 <alt_tse_get_mac_info_index>
 182f71c:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182f720:	e13ffc17 	ldw	r4,-16(fp)
 182f724:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 182f728:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 182f72c:	e13ffe17 	ldw	r4,-8(fp)
 182f730:	182d7a00 	call	182d7a0 <alt_tse_phy_rd_mdio_addr>
 182f734:	e0bffd85 	stb	r2,-10(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 182f738:	e0bffe17 	ldw	r2,-8(fp)
 182f73c:	10800003 	ldbu	r2,0(r2)
 182f740:	10803fcc 	andi	r2,r2,255
 182f744:	100b883a 	mov	r5,r2
 182f748:	e13ffe17 	ldw	r4,-8(fp)
 182f74c:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 182f750:	e0bfff03 	ldbu	r2,-4(fp)
 182f754:	10002d26 	beq	r2,zero,182f80c <alt_tse_phy_set_adv_1000+0x12c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1); 
 182f758:	01c00044 	movi	r7,1
 182f75c:	01800344 	movi	r6,13
 182f760:	014003c4 	movi	r5,15
 182f764:	e13ffe17 	ldw	r4,-8(fp)
 182f768:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f76c:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, cap);
 182f770:	e0bffdc3 	ldbu	r2,-9(fp)
 182f774:	d8800015 	stw	r2,0(sp)
 182f778:	01c00044 	movi	r7,1
 182f77c:	01800244 	movi	r6,9
 182f780:	01400244 	movi	r5,9
 182f784:	e13ffe17 	ldw	r4,-8(fp)
 182f788:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 182f78c:	e0bffd47 	ldb	r2,-11(fp)
 182f790:	e0fffd07 	ldb	r3,-12(fp)
 182f794:	e13ffdc3 	ldbu	r4,-9(fp)
 182f798:	200f883a 	mov	r7,r4
 182f79c:	180d883a 	mov	r6,r3
 182f7a0:	100b883a 	mov	r5,r2
 182f7a4:	01006134 	movhi	r4,388
 182f7a8:	210adc04 	addi	r4,r4,11120
 182f7ac:	182b8680 	call	182b868 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 182f7b0:	01c00044 	movi	r7,1
 182f7b4:	01800304 	movi	r6,12
 182f7b8:	014003c4 	movi	r5,15
 182f7bc:	e13ffe17 	ldw	r4,-8(fp)
 182f7c0:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f7c4:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, cap);
 182f7c8:	e0bffdc3 	ldbu	r2,-9(fp)
 182f7cc:	d8800015 	stw	r2,0(sp)
 182f7d0:	01c00044 	movi	r7,1
 182f7d4:	01800204 	movi	r6,8
 182f7d8:	01400244 	movi	r5,9
 182f7dc:	e13ffe17 	ldw	r4,-8(fp)
 182f7e0:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 182f7e4:	e0bffd47 	ldb	r2,-11(fp)
 182f7e8:	e0fffd07 	ldb	r3,-12(fp)
 182f7ec:	e13ffdc3 	ldbu	r4,-9(fp)
 182f7f0:	200f883a 	mov	r7,r4
 182f7f4:	180d883a 	mov	r6,r3
 182f7f8:	100b883a 	mov	r5,r2
 182f7fc:	01006134 	movhi	r4,388
 182f800:	210aef04 	addi	r4,r4,11196
 182f804:	182b8680 	call	182b868 <no_printf>
 182f808:	00001c06 	br	182f87c <alt_tse_phy_set_adv_1000+0x19c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, 0);
 182f80c:	d8000015 	stw	zero,0(sp)
 182f810:	01c00044 	movi	r7,1
 182f814:	01800244 	movi	r6,9
 182f818:	01400244 	movi	r5,9
 182f81c:	e13ffe17 	ldw	r4,-8(fp)
 182f820:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 182f824:	e0bffd47 	ldb	r2,-11(fp)
 182f828:	e0fffd07 	ldb	r3,-12(fp)
 182f82c:	000f883a 	mov	r7,zero
 182f830:	180d883a 	mov	r6,r3
 182f834:	100b883a 	mov	r5,r2
 182f838:	01006134 	movhi	r4,388
 182f83c:	210adc04 	addi	r4,r4,11120
 182f840:	182b8680 	call	182b868 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, 0);
 182f844:	d8000015 	stw	zero,0(sp)
 182f848:	01c00044 	movi	r7,1
 182f84c:	01800204 	movi	r6,8
 182f850:	01400244 	movi	r5,9
 182f854:	e13ffe17 	ldw	r4,-8(fp)
 182f858:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement 1000 Base-T half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 182f85c:	e0bffd47 	ldb	r2,-11(fp)
 182f860:	e0fffd07 	ldb	r3,-12(fp)
 182f864:	000f883a 	mov	r7,zero
 182f868:	180d883a 	mov	r6,r3
 182f86c:	100b883a 	mov	r5,r2
 182f870:	01006134 	movhi	r4,388
 182f874:	210b0204 	addi	r4,r4,11272
 182f878:	182b8680 	call	182b868 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);    
 182f87c:	e0bffd83 	ldbu	r2,-10(fp)
 182f880:	100b883a 	mov	r5,r2
 182f884:	e13ffe17 	ldw	r4,-8(fp)
 182f888:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>

    return SUCCESS;
 182f88c:	0005883a 	mov	r2,zero
}
 182f890:	e037883a 	mov	sp,fp
 182f894:	dfc00117 	ldw	ra,4(sp)
 182f898:	df000017 	ldw	fp,0(sp)
 182f89c:	dec00204 	addi	sp,sp,8
 182f8a0:	f800283a 	ret

0182f8a4 <alt_tse_phy_set_adv_100>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
 182f8a4:	defff804 	addi	sp,sp,-32
 182f8a8:	dfc00715 	stw	ra,28(sp)
 182f8ac:	df000615 	stw	fp,24(sp)
 182f8b0:	df000604 	addi	fp,sp,24
 182f8b4:	e13ffe15 	stw	r4,-8(fp)
 182f8b8:	2805883a 	mov	r2,r5
 182f8bc:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 182f8c0:	e0bffe17 	ldw	r2,-8(fp)
 182f8c4:	10800617 	ldw	r2,24(r2)
 182f8c8:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 182f8cc:	e0bffb17 	ldw	r2,-20(fp)
 182f8d0:	10800317 	ldw	r2,12(r2)
 182f8d4:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182f8d8:	e13ffb17 	ldw	r4,-20(fp)
 182f8dc:	182ca600 	call	182ca60 <alt_tse_get_mac_info_index>
 182f8e0:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182f8e4:	e13ffc17 	ldw	r4,-16(fp)
 182f8e8:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 182f8ec:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 182f8f0:	e13ffe17 	ldw	r4,-8(fp)
 182f8f4:	182d7a00 	call	182d7a0 <alt_tse_phy_rd_mdio_addr>
 182f8f8:	e0bffd85 	stb	r2,-10(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 182f8fc:	e0bffe17 	ldw	r2,-8(fp)
 182f900:	10800003 	ldbu	r2,0(r2)
 182f904:	10803fcc 	andi	r2,r2,255
 182f908:	100b883a 	mov	r5,r2
 182f90c:	e13ffe17 	ldw	r4,-8(fp)
 182f910:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 182f914:	e0bfff03 	ldbu	r2,-4(fp)
 182f918:	10004326 	beq	r2,zero,182fa28 <alt_tse_phy_set_adv_100+0x184>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 182f91c:	01c00044 	movi	r7,1
 182f920:	018003c4 	movi	r6,15
 182f924:	01400044 	movi	r5,1
 182f928:	e13ffe17 	ldw	r4,-8(fp)
 182f92c:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f930:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, cap);
 182f934:	e0bffdc3 	ldbu	r2,-9(fp)
 182f938:	d8800015 	stw	r2,0(sp)
 182f93c:	01c00044 	movi	r7,1
 182f940:	01800244 	movi	r6,9
 182f944:	01400104 	movi	r5,4
 182f948:	e13ffe17 	ldw	r4,-8(fp)
 182f94c:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, cap);
 182f950:	e0bffd47 	ldb	r2,-11(fp)
 182f954:	e0fffd07 	ldb	r3,-12(fp)
 182f958:	e13ffdc3 	ldbu	r4,-9(fp)
 182f95c:	200f883a 	mov	r7,r4
 182f960:	180d883a 	mov	r6,r3
 182f964:	100b883a 	mov	r5,r2
 182f968:	01006134 	movhi	r4,388
 182f96c:	210b1404 	addi	r4,r4,11344
 182f970:	182b8680 	call	182b868 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 182f974:	01c00044 	movi	r7,1
 182f978:	01800384 	movi	r6,14
 182f97c:	01400044 	movi	r5,1
 182f980:	e13ffe17 	ldw	r4,-8(fp)
 182f984:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f988:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, cap);
 182f98c:	e0bffdc3 	ldbu	r2,-9(fp)
 182f990:	d8800015 	stw	r2,0(sp)
 182f994:	01c00044 	movi	r7,1
 182f998:	01800204 	movi	r6,8
 182f99c:	01400104 	movi	r5,4
 182f9a0:	e13ffe17 	ldw	r4,-8(fp)
 182f9a4:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 182f9a8:	e0bffd47 	ldb	r2,-11(fp)
 182f9ac:	e0fffd07 	ldb	r3,-12(fp)
 182f9b0:	e13ffdc3 	ldbu	r4,-9(fp)
 182f9b4:	200f883a 	mov	r7,r4
 182f9b8:	180d883a 	mov	r6,r3
 182f9bc:	100b883a 	mov	r5,r2
 182f9c0:	01006134 	movhi	r4,388
 182f9c4:	210b2404 	addi	r4,r4,11408
 182f9c8:	182b8680 	call	182b868 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 182f9cc:	01c00044 	movi	r7,1
 182f9d0:	01800344 	movi	r6,13
 182f9d4:	01400044 	movi	r5,1
 182f9d8:	e13ffe17 	ldw	r4,-8(fp)
 182f9dc:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182f9e0:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, cap);
 182f9e4:	e0bffdc3 	ldbu	r2,-9(fp)
 182f9e8:	d8800015 	stw	r2,0(sp)
 182f9ec:	01c00044 	movi	r7,1
 182f9f0:	018001c4 	movi	r6,7
 182f9f4:	01400104 	movi	r5,4
 182f9f8:	e13ffe17 	ldw	r4,-8(fp)
 182f9fc:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 182fa00:	e0bffd47 	ldb	r2,-11(fp)
 182fa04:	e0fffd07 	ldb	r3,-12(fp)
 182fa08:	e13ffdc3 	ldbu	r4,-9(fp)
 182fa0c:	200f883a 	mov	r7,r4
 182fa10:	180d883a 	mov	r6,r3
 182fa14:	100b883a 	mov	r5,r2
 182fa18:	01006134 	movhi	r4,388
 182fa1c:	210b3704 	addi	r4,r4,11484
 182fa20:	182b8680 	call	182b868 <no_printf>
 182fa24:	00002a06 	br	182fad0 <alt_tse_phy_set_adv_100+0x22c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, 0);
 182fa28:	d8000015 	stw	zero,0(sp)
 182fa2c:	01c00044 	movi	r7,1
 182fa30:	01800244 	movi	r6,9
 182fa34:	01400104 	movi	r5,4
 182fa38:	e13ffe17 	ldw	r4,-8(fp)
 182fa3c:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, 0);
 182fa40:	e0bffd47 	ldb	r2,-11(fp)
 182fa44:	e0fffd07 	ldb	r3,-12(fp)
 182fa48:	000f883a 	mov	r7,zero
 182fa4c:	180d883a 	mov	r6,r3
 182fa50:	100b883a 	mov	r5,r2
 182fa54:	01006134 	movhi	r4,388
 182fa58:	210b1404 	addi	r4,r4,11344
 182fa5c:	182b8680 	call	182b868 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, 0);
 182fa60:	d8000015 	stw	zero,0(sp)
 182fa64:	01c00044 	movi	r7,1
 182fa68:	01800204 	movi	r6,8
 182fa6c:	01400104 	movi	r5,4
 182fa70:	e13ffe17 	ldw	r4,-8(fp)
 182fa74:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 182fa78:	e0bffd47 	ldb	r2,-11(fp)
 182fa7c:	e0fffd07 	ldb	r3,-12(fp)
 182fa80:	000f883a 	mov	r7,zero
 182fa84:	180d883a 	mov	r6,r3
 182fa88:	100b883a 	mov	r5,r2
 182fa8c:	01006134 	movhi	r4,388
 182fa90:	210b2404 	addi	r4,r4,11408
 182fa94:	182b8680 	call	182b868 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, 0);
 182fa98:	d8000015 	stw	zero,0(sp)
 182fa9c:	01c00044 	movi	r7,1
 182faa0:	018001c4 	movi	r6,7
 182faa4:	01400104 	movi	r5,4
 182faa8:	e13ffe17 	ldw	r4,-8(fp)
 182faac:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 182fab0:	e0bffd47 	ldb	r2,-11(fp)
 182fab4:	e0fffd07 	ldb	r3,-12(fp)
 182fab8:	000f883a 	mov	r7,zero
 182fabc:	180d883a 	mov	r6,r3
 182fac0:	100b883a 	mov	r5,r2
 182fac4:	01006134 	movhi	r4,388
 182fac8:	210b3704 	addi	r4,r4,11484
 182facc:	182b8680 	call	182b868 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);  
 182fad0:	e0bffd83 	ldbu	r2,-10(fp)
 182fad4:	100b883a 	mov	r5,r2
 182fad8:	e13ffe17 	ldw	r4,-8(fp)
 182fadc:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 182fae0:	0005883a 	mov	r2,zero
}
 182fae4:	e037883a 	mov	sp,fp
 182fae8:	dfc00117 	ldw	ra,4(sp)
 182faec:	df000017 	ldw	fp,0(sp)
 182faf0:	dec00204 	addi	sp,sp,8
 182faf4:	f800283a 	ret

0182faf8 <alt_tse_phy_set_adv_10>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
 182faf8:	defff504 	addi	sp,sp,-44
 182fafc:	dfc00a15 	stw	ra,40(sp)
 182fb00:	df000915 	stw	fp,36(sp)
 182fb04:	df000904 	addi	fp,sp,36
 182fb08:	e13ffe15 	stw	r4,-8(fp)
 182fb0c:	2805883a 	mov	r2,r5
 182fb10:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 182fb14:	e0bffe17 	ldw	r2,-8(fp)
 182fb18:	10800617 	ldw	r2,24(r2)
 182fb1c:	e0bff815 	stw	r2,-32(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 182fb20:	e0bff817 	ldw	r2,-32(fp)
 182fb24:	10800317 	ldw	r2,12(r2)
 182fb28:	e0bff915 	stw	r2,-28(fp)
    
    /* get index of the pointers in pointer array list */
    int mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 182fb2c:	e13ff817 	ldw	r4,-32(fp)
 182fb30:	182ca600 	call	182ca60 <alt_tse_get_mac_info_index>
 182fb34:	e0bffa15 	stw	r2,-24(fp)
    int mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182fb38:	e13ff917 	ldw	r4,-28(fp)
 182fb3c:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 182fb40:	e0bffb15 	stw	r2,-20(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 182fb44:	e13ffe17 	ldw	r4,-8(fp)
 182fb48:	182d7a00 	call	182d7a0 <alt_tse_phy_rd_mdio_addr>
 182fb4c:	e0bffc15 	stw	r2,-16(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 182fb50:	e0bffe17 	ldw	r2,-8(fp)
 182fb54:	10800003 	ldbu	r2,0(r2)
 182fb58:	10803fcc 	andi	r2,r2,255
 182fb5c:	100b883a 	mov	r5,r2
 182fb60:	e13ffe17 	ldw	r4,-8(fp)
 182fb64:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 182fb68:	e0bfff03 	ldbu	r2,-4(fp)
 182fb6c:	10002926 	beq	r2,zero,182fc14 <alt_tse_phy_set_adv_10+0x11c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 182fb70:	01c00044 	movi	r7,1
 182fb74:	01800304 	movi	r6,12
 182fb78:	01400044 	movi	r5,1
 182fb7c:	e13ffe17 	ldw	r4,-8(fp)
 182fb80:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182fb84:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, cap);
 182fb88:	e0bffd03 	ldbu	r2,-12(fp)
 182fb8c:	d8800015 	stw	r2,0(sp)
 182fb90:	01c00044 	movi	r7,1
 182fb94:	01800184 	movi	r6,6
 182fb98:	01400104 	movi	r5,4
 182fb9c:	e13ffe17 	ldw	r4,-8(fp)
 182fba0:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 182fba4:	e0bffd03 	ldbu	r2,-12(fp)
 182fba8:	100f883a 	mov	r7,r2
 182fbac:	e1bffa17 	ldw	r6,-24(fp)
 182fbb0:	e17ffb17 	ldw	r5,-20(fp)
 182fbb4:	01006134 	movhi	r4,388
 182fbb8:	210b4a04 	addi	r4,r4,11560
 182fbbc:	182b8680 	call	182b868 <no_printf>
    
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 182fbc0:	01c00044 	movi	r7,1
 182fbc4:	018002c4 	movi	r6,11
 182fbc8:	01400044 	movi	r5,1
 182fbcc:	e13ffe17 	ldw	r4,-8(fp)
 182fbd0:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 182fbd4:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, cap);
 182fbd8:	e0bffd03 	ldbu	r2,-12(fp)
 182fbdc:	d8800015 	stw	r2,0(sp)
 182fbe0:	01c00044 	movi	r7,1
 182fbe4:	01800144 	movi	r6,5
 182fbe8:	01400104 	movi	r5,4
 182fbec:	e13ffe17 	ldw	r4,-8(fp)
 182fbf0:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 182fbf4:	e0bffd03 	ldbu	r2,-12(fp)
 182fbf8:	100f883a 	mov	r7,r2
 182fbfc:	e1bffa17 	ldw	r6,-24(fp)
 182fc00:	e17ffb17 	ldw	r5,-20(fp)
 182fc04:	01006134 	movhi	r4,388
 182fc08:	210b5d04 	addi	r4,r4,11636
 182fc0c:	182b8680 	call	182b868 <no_printf>
 182fc10:	00001806 	br	182fc74 <alt_tse_phy_set_adv_10+0x17c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, 0);
 182fc14:	d8000015 	stw	zero,0(sp)
 182fc18:	01c00044 	movi	r7,1
 182fc1c:	01800184 	movi	r6,6
 182fc20:	01400104 	movi	r5,4
 182fc24:	e13ffe17 	ldw	r4,-8(fp)
 182fc28:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 182fc2c:	000f883a 	mov	r7,zero
 182fc30:	e1bffa17 	ldw	r6,-24(fp)
 182fc34:	e17ffb17 	ldw	r5,-20(fp)
 182fc38:	01006134 	movhi	r4,388
 182fc3c:	210b4a04 	addi	r4,r4,11560
 182fc40:	182b8680 	call	182b868 <no_printf>
    
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, 0);
 182fc44:	d8000015 	stw	zero,0(sp)
 182fc48:	01c00044 	movi	r7,1
 182fc4c:	01800144 	movi	r6,5
 182fc50:	01400104 	movi	r5,4
 182fc54:	e13ffe17 	ldw	r4,-8(fp)
 182fc58:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 182fc5c:	000f883a 	mov	r7,zero
 182fc60:	e1bffa17 	ldw	r6,-24(fp)
 182fc64:	e17ffb17 	ldw	r5,-20(fp)
 182fc68:	01006134 	movhi	r4,388
 182fc6c:	210b5d04 	addi	r4,r4,11636
 182fc70:	182b8680 	call	182b868 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 182fc74:	e0bffc17 	ldw	r2,-16(fp)
 182fc78:	10803fcc 	andi	r2,r2,255
 182fc7c:	100b883a 	mov	r5,r2
 182fc80:	e13ffe17 	ldw	r4,-8(fp)
 182fc84:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 182fc88:	0005883a 	mov	r2,zero
}
 182fc8c:	e037883a 	mov	sp,fp
 182fc90:	dfc00117 	ldw	ra,4(sp)
 182fc94:	df000017 	ldw	fp,0(sp)
 182fc98:	dec00204 	addi	sp,sp,8
 182fc9c:	f800283a 	ret

0182fca0 <alt_tse_phy_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Internal
 * @param pmac_group    Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_phy_get_common_speed(alt_tse_mac_group *pmac_group) {
 182fca0:	defff604 	addi	sp,sp,-40
 182fca4:	dfc00915 	stw	ra,36(sp)
 182fca8:	df000815 	stw	fp,32(sp)
 182fcac:	df000804 	addi	fp,sp,32
 182fcb0:	e13fff15 	stw	r4,-4(fp)
    
	alt_32 i;
	alt_u8 common_1000 = 1;
 182fcb4:	00800044 	movi	r2,1
 182fcb8:	e0bff905 	stb	r2,-28(fp)
	alt_u8 common_100 = 1;
 182fcbc:	00800044 	movi	r2,1
 182fcc0:	e0bff945 	stb	r2,-27(fp)
	alt_u8 common_10 = 1;
 182fcc4:	00800044 	movi	r2,1
 182fcc8:	e0bff985 	stb	r2,-26(fp)
    
	alt_32 common_speed;
    
	alt_u8 none_an_complete = 1;
 182fccc:	00800044 	movi	r2,1
 182fcd0:	e0bffb05 	stb	r2,-20(fp)
    
    alt_tse_mac_info *pmac_info = 0;
 182fcd4:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_phy_info *pphy = 0;
 182fcd8:	e03ffd15 	stw	zero,-12(fp)
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182fcdc:	e13fff17 	ldw	r4,-4(fp)
 182fce0:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 182fce4:	e0bffe05 	stb	r2,-8(fp)
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 182fce8:	e03ff815 	stw	zero,-32(fp)
 182fcec:	00001c06 	br	182fd60 <alt_tse_phy_get_common_speed+0xc0>
        pmac_info = pmac_group->pmac_info[i];
 182fcf0:	e0ffff17 	ldw	r3,-4(fp)
 182fcf4:	e0bff817 	ldw	r2,-32(fp)
 182fcf8:	10800044 	addi	r2,r2,1
 182fcfc:	1085883a 	add	r2,r2,r2
 182fd00:	1085883a 	add	r2,r2,r2
 182fd04:	1885883a 	add	r2,r3,r2
 182fd08:	10800017 	ldw	r2,0(r2)
 182fd0c:	e0bffc15 	stw	r2,-16(fp)
        pphy = pmac_info->pphy_info;
 182fd10:	e0bffc17 	ldw	r2,-16(fp)
 182fd14:	10800117 	ldw	r2,4(r2)
 182fd18:	e0bffd15 	stw	r2,-12(fp)
        
        /* run only if PHY connected */
        if(pphy) {
 182fd1c:	e0bffd17 	ldw	r2,-12(fp)
 182fd20:	10000926 	beq	r2,zero,182fd48 <alt_tse_phy_get_common_speed+0xa8>
            alt_tse_phy_set_adv_1000(pphy, 1);
 182fd24:	01400044 	movi	r5,1
 182fd28:	e13ffd17 	ldw	r4,-12(fp)
 182fd2c:	182f6e00 	call	182f6e0 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 182fd30:	01400044 	movi	r5,1
 182fd34:	e13ffd17 	ldw	r4,-12(fp)
 182fd38:	182f8a40 	call	182f8a4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 182fd3c:	01400044 	movi	r5,1
 182fd40:	e13ffd17 	ldw	r4,-12(fp)
 182fd44:	182faf80 	call	182faf8 <alt_tse_phy_set_adv_10>
        }
        tse_dprintf(6, "\n");
 182fd48:	01006134 	movhi	r4,388
 182fd4c:	21090304 	addi	r4,r4,9228
 182fd50:	182b8680 	call	182b868 <no_printf>
    alt_tse_phy_info *pphy = 0;
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 182fd54:	e0bff817 	ldw	r2,-32(fp)
 182fd58:	10800044 	addi	r2,r2,1
 182fd5c:	e0bff815 	stw	r2,-32(fp)
 182fd60:	e0bfff17 	ldw	r2,-4(fp)
 182fd64:	10800003 	ldbu	r2,0(r2)
 182fd68:	10803fcc 	andi	r2,r2,255
 182fd6c:	e0fff817 	ldw	r3,-32(fp)
 182fd70:	18bfdf16 	blt	r3,r2,182fcf0 <__alt_mem_mem_0+0xff80fcf0>
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 182fd74:	e03ff815 	stw	zero,-32(fp)
 182fd78:	00005606 	br	182fed4 <alt_tse_phy_get_common_speed+0x234>

        pmac_info = pmac_group->pmac_info[i];
 182fd7c:	e0ffff17 	ldw	r3,-4(fp)
 182fd80:	e0bff817 	ldw	r2,-32(fp)
 182fd84:	10800044 	addi	r2,r2,1
 182fd88:	1085883a 	add	r2,r2,r2
 182fd8c:	1085883a 	add	r2,r2,r2
 182fd90:	1885883a 	add	r2,r3,r2
 182fd94:	10800017 	ldw	r2,0(r2)
 182fd98:	e0bffc15 	stw	r2,-16(fp)
        pphy = pmac_info->pphy_info;
 182fd9c:	e0bffc17 	ldw	r2,-16(fp)
 182fda0:	10800117 	ldw	r2,4(r2)
 182fda4:	e0bffd15 	stw	r2,-12(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 182fda8:	e0bffd17 	ldw	r2,-12(fp)
 182fdac:	10004326 	beq	r2,zero,182febc <alt_tse_phy_get_common_speed+0x21c>
            continue;
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
 182fdb0:	e13ffd17 	ldw	r4,-12(fp)
 182fdb4:	182f14c0 	call	182f14c <alt_tse_phy_get_cap>
 182fdb8:	1000421e 	bne	r2,zero,182fec4 <alt_tse_phy_get_common_speed+0x224>
            continue;
        }
        
        none_an_complete = 0;
 182fdbc:	e03ffb05 	stb	zero,-20(fp)
        
        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 182fdc0:	e0bffc17 	ldw	r2,-16(fp)
 182fdc4:	10800003 	ldbu	r2,0(r2)
 182fdc8:	10803fcc 	andi	r2,r2,255
 182fdcc:	10800058 	cmpnei	r2,r2,1
 182fdd0:	1000021e 	bne	r2,zero,182fddc <alt_tse_phy_get_common_speed+0x13c>
            common_1000 = 0;
 182fdd4:	e03ff905 	stb	zero,-28(fp)
 182fdd8:	00000706 	br	182fdf8 <alt_tse_phy_get_common_speed+0x158>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 182fddc:	e0bffc17 	ldw	r2,-16(fp)
 182fde0:	10800003 	ldbu	r2,0(r2)
 182fde4:	10803fcc 	andi	r2,r2,255
 182fde8:	10800098 	cmpnei	r2,r2,2
 182fdec:	1000021e 	bne	r2,zero,182fdf8 <alt_tse_phy_get_common_speed+0x158>
            common_100 = 0;
 182fdf0:	e03ff945 	stb	zero,-27(fp)
            common_10 = 0;            
 182fdf4:	e03ff985 	stb	zero,-26(fp)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
 182fdf8:	e0bffd17 	ldw	r2,-12(fp)
 182fdfc:	10c000c3 	ldbu	r3,3(r2)
 182fe00:	e0bffd17 	ldw	r2,-12(fp)
 182fe04:	10800303 	ldbu	r2,12(r2)
 182fe08:	1884703a 	and	r2,r3,r2
 182fe0c:	1007883a 	mov	r3,r2
 182fe10:	e0bff903 	ldbu	r2,-28(fp)
 182fe14:	1884703a 	and	r2,r3,r2
 182fe18:	e0bff905 	stb	r2,-28(fp)
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 182fe1c:	e0bffd17 	ldw	r2,-12(fp)
 182fe20:	10c00183 	ldbu	r3,6(r2)
 182fe24:	e0bffd17 	ldw	r2,-12(fp)
 182fe28:	108003c3 	ldbu	r2,15(r2)
 182fe2c:	1884703a 	and	r2,r3,r2
 182fe30:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
 182fe34:	e0bffd17 	ldw	r2,-12(fp)
 182fe38:	10c001c3 	ldbu	r3,7(r2)
 182fe3c:	e0bffd17 	ldw	r2,-12(fp)
 182fe40:	10800403 	ldbu	r2,16(r2)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 182fe44:	1884703a 	and	r2,r3,r2
 182fe48:	2084b03a 	or	r2,r4,r2
 182fe4c:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
 182fe50:	e0bffd17 	ldw	r2,-12(fp)
 182fe54:	10c00143 	ldbu	r3,5(r2)
 182fe58:	e0bffd17 	ldw	r2,-12(fp)
 182fe5c:	10800383 	ldbu	r2,14(r2)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 182fe60:	1884703a 	and	r2,r3,r2
 182fe64:	2084b03a 	or	r2,r4,r2
 182fe68:	1007883a 	mov	r3,r2
 182fe6c:	e0bff943 	ldbu	r2,-27(fp)
 182fe70:	1884703a 	and	r2,r3,r2
 182fe74:	e0bff945 	stb	r2,-27(fp)
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 182fe78:	e0bffd17 	ldw	r2,-12(fp)
 182fe7c:	10c00283 	ldbu	r3,10(r2)
 182fe80:	e0bffd17 	ldw	r2,-12(fp)
 182fe84:	10800443 	ldbu	r2,17(r2)
 182fe88:	1884703a 	and	r2,r3,r2
 182fe8c:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));
 182fe90:	e0bffd17 	ldw	r2,-12(fp)
 182fe94:	10c002c3 	ldbu	r3,11(r2)
 182fe98:	e0bffd17 	ldw	r2,-12(fp)
 182fe9c:	10800483 	ldbu	r2,18(r2)
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 182fea0:	1884703a 	and	r2,r3,r2
 182fea4:	2084b03a 	or	r2,r4,r2
 182fea8:	1007883a 	mov	r3,r2
 182feac:	e0bff983 	ldbu	r2,-26(fp)
 182feb0:	1884703a 	and	r2,r3,r2
 182feb4:	e0bff985 	stb	r2,-26(fp)
 182feb8:	00000306 	br	182fec8 <alt_tse_phy_get_common_speed+0x228>
        pmac_info = pmac_group->pmac_info[i];
        pphy = pmac_info->pphy_info;
        
        /* if no PHY connected */
        if(!pphy) {
            continue;
 182febc:	0001883a 	nop
 182fec0:	00000106 	br	182fec8 <alt_tse_phy_get_common_speed+0x228>
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
            continue;
 182fec4:	0001883a 	nop
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 182fec8:	e0bff817 	ldw	r2,-32(fp)
 182fecc:	10800044 	addi	r2,r2,1
 182fed0:	e0bff815 	stw	r2,-32(fp)
 182fed4:	e0bfff17 	ldw	r2,-4(fp)
 182fed8:	10800003 	ldbu	r2,0(r2)
 182fedc:	10803fcc 	andi	r2,r2,255
 182fee0:	e0fff817 	ldw	r3,-32(fp)
 182fee4:	18bfa516 	blt	r3,r2,182fd7c <__alt_mem_mem_0+0xff80fd7c>
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));

    }
    
    /* get common speed based on capabilities */
    if(none_an_complete == 1) {
 182fee8:	e0bffb03 	ldbu	r2,-20(fp)
 182feec:	10800058 	cmpnei	r2,r2,1
 182fef0:	1000081e 	bne	r2,zero,182ff14 <alt_tse_phy_get_common_speed+0x274>
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 182fef4:	00bfffc4 	movi	r2,-1
 182fef8:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - None of the PHYs Auto-Negotiation completed!\n", mac_group_index);
 182fefc:	e0bffe07 	ldb	r2,-8(fp)
 182ff00:	100b883a 	mov	r5,r2
 182ff04:	01006134 	movhi	r4,388
 182ff08:	210b7004 	addi	r4,r4,11712
 182ff0c:	1800bd80 	call	1800bd8 <printf>
 182ff10:	00002706 	br	182ffb0 <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_1000) {
 182ff14:	e0bff903 	ldbu	r2,-28(fp)
 182ff18:	10000926 	beq	r2,zero,182ff40 <alt_tse_phy_get_common_speed+0x2a0>
        common_speed = TSE_PHY_SPEED_1000;
 182ff1c:	00800084 	movi	r2,2
 182ff20:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
 182ff24:	e0bffe07 	ldb	r2,-8(fp)
 182ff28:	0180fa04 	movi	r6,1000
 182ff2c:	100b883a 	mov	r5,r2
 182ff30:	01006134 	movhi	r4,388
 182ff34:	210b8204 	addi	r4,r4,11784
 182ff38:	1800bd80 	call	1800bd8 <printf>
 182ff3c:	00001c06 	br	182ffb0 <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_100) {
 182ff40:	e0bff943 	ldbu	r2,-27(fp)
 182ff44:	10000926 	beq	r2,zero,182ff6c <alt_tse_phy_get_common_speed+0x2cc>
        common_speed = TSE_PHY_SPEED_100;
 182ff48:	00800044 	movi	r2,1
 182ff4c:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 100);
 182ff50:	e0bffe07 	ldb	r2,-8(fp)
 182ff54:	01801904 	movi	r6,100
 182ff58:	100b883a 	mov	r5,r2
 182ff5c:	01006134 	movhi	r4,388
 182ff60:	210b8204 	addi	r4,r4,11784
 182ff64:	1800bd80 	call	1800bd8 <printf>
 182ff68:	00001106 	br	182ffb0 <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_10) {
 182ff6c:	e0bff983 	ldbu	r2,-26(fp)
 182ff70:	10000826 	beq	r2,zero,182ff94 <alt_tse_phy_get_common_speed+0x2f4>
        common_speed = TSE_PHY_SPEED_10;
 182ff74:	e03ffa15 	stw	zero,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 10);
 182ff78:	e0bffe07 	ldb	r2,-8(fp)
 182ff7c:	01800284 	movi	r6,10
 182ff80:	100b883a 	mov	r5,r2
 182ff84:	01006134 	movhi	r4,388
 182ff88:	210b8204 	addi	r4,r4,11784
 182ff8c:	1800bd80 	call	1800bd8 <printf>
 182ff90:	00000706 	br	182ffb0 <alt_tse_phy_get_common_speed+0x310>
    }
    else {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 182ff94:	00bfffc4 	movi	r2,-1
 182ff98:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - No common speed at all!\n", mac_group_index);    }
 182ff9c:	e0bffe07 	ldb	r2,-8(fp)
 182ffa0:	100b883a 	mov	r5,r2
 182ffa4:	01006134 	movhi	r4,388
 182ffa8:	210b8f04 	addi	r4,r4,11836
 182ffac:	1800bd80 	call	1800bd8 <printf>

    return common_speed;
 182ffb0:	e0bffa17 	ldw	r2,-24(fp)
}
 182ffb4:	e037883a 	mov	sp,fp
 182ffb8:	dfc00117 	ldw	ra,4(sp)
 182ffbc:	df000017 	ldw	fp,0(sp)
 182ffc0:	dec00204 	addi	sp,sp,8
 182ffc4:	f800283a 	ret

0182ffc8 <alt_tse_phy_set_common_speed>:
 * @API Type:               Internal
 * @param pmac_group        Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 *        common_speed      common speed supported by all PHYs
 * @return      common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_phy_set_common_speed(alt_tse_mac_group *pmac_group, alt_32 common_speed) {
 182ffc8:	defff004 	addi	sp,sp,-64
 182ffcc:	dfc00f15 	stw	ra,60(sp)
 182ffd0:	df000e15 	stw	fp,56(sp)
 182ffd4:	dc400d15 	stw	r17,52(sp)
 182ffd8:	dc000c15 	stw	r16,48(sp)
 182ffdc:	df000e04 	addi	fp,sp,56
 182ffe0:	e13ffc15 	stw	r4,-16(fp)
 182ffe4:	e17ffd15 	stw	r5,-12(fp)
	alt_u8 speed;
	alt_u8 duplex;
    
	alt_u8 gb_capable;
    
    alt_tse_phy_info *pphy = 0;
 182ffe8:	e03ff515 	stw	zero,-44(fp)
    alt_tse_mac_info *pmac_info = 0;
 182ffec:	e03ff615 	stw	zero,-40(fp)
    alt_tse_system_info *psys = 0;
 182fff0:	e03ff715 	stw	zero,-36(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 182fff4:	e03ff805 	stb	zero,-32(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 182fff8:	e13ffc17 	ldw	r4,-16(fp)
 182fffc:	182c9ec0 	call	182c9ec <alt_tse_get_mac_group_index>
 1830000:	e0bff845 	stb	r2,-31(fp)
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 1830004:	e0bffc17 	ldw	r2,-16(fp)
 1830008:	10800117 	ldw	r2,4(r2)
 183000c:	10800217 	ldw	r2,8(r2)
 1830010:	10800017 	ldw	r2,0(r2)
 1830014:	e0bff915 	stw	r2,-28(fp)
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 1830018:	e0bff917 	ldw	r2,-28(fp)
 183001c:	10801004 	addi	r2,r2,64
 1830020:	10800037 	ldwio	r2,0(r2)
 1830024:	e0bffa15 	stw	r2,-24(fp)
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
 1830028:	e0bffd17 	ldw	r2,-12(fp)
 183002c:	10000316 	blt	r2,zero,183003c <alt_tse_phy_set_common_speed+0x74>
 1830030:	e0bffd17 	ldw	r2,-12(fp)
 1830034:	108000d0 	cmplti	r2,r2,3
 1830038:	10000c1e 	bne	r2,zero,183006c <alt_tse_phy_set_common_speed+0xa4>
        tse_dprintf(2, "ERROR   : MAC Group[%d] - Invalid common speed specified! common speed = %d\n", mac_group_index, (int)common_speed);
 183003c:	e0bff847 	ldb	r2,-31(fp)
 1830040:	e1bffd17 	ldw	r6,-12(fp)
 1830044:	100b883a 	mov	r5,r2
 1830048:	01006134 	movhi	r4,388
 183004c:	210b9c04 	addi	r4,r4,11888
 1830050:	1800bd80 	call	1800bd8 <printf>
		/* Restore previous MDIO address */
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 1830054:	e0bff917 	ldw	r2,-28(fp)
 1830058:	10801004 	addi	r2,r2,64
 183005c:	e0fffa17 	ldw	r3,-24(fp)
 1830060:	10c00035 	stwio	r3,0(r2)
        return TSE_PHY_SPEED_NO_COMMON;
 1830064:	00bfffc4 	movi	r2,-1
 1830068:	0000fd06 	br	1830460 <alt_tse_phy_set_common_speed+0x498>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 183006c:	e03ff315 	stw	zero,-52(fp)
 1830070:	0000db06 	br	18303e0 <alt_tse_phy_set_common_speed+0x418>
        pmac_info = pmac_group->pmac_info[i];
 1830074:	e0fffc17 	ldw	r3,-16(fp)
 1830078:	e0bff317 	ldw	r2,-52(fp)
 183007c:	10800044 	addi	r2,r2,1
 1830080:	1085883a 	add	r2,r2,r2
 1830084:	1085883a 	add	r2,r2,r2
 1830088:	1885883a 	add	r2,r3,r2
 183008c:	10800017 	ldw	r2,0(r2)
 1830090:	e0bff615 	stw	r2,-40(fp)
        mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 1830094:	e13ff617 	ldw	r4,-40(fp)
 1830098:	182ca600 	call	182ca60 <alt_tse_get_mac_info_index>
 183009c:	e0bff805 	stb	r2,-32(fp)

        pphy = pmac_info->pphy_info;
 18300a0:	e0bff617 	ldw	r2,-40(fp)
 18300a4:	10800117 	ldw	r2,4(r2)
 18300a8:	e0bff515 	stw	r2,-44(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 18300ac:	e0bff517 	ldw	r2,-44(fp)
 18300b0:	1000c726 	beq	r2,zero,18303d0 <alt_tse_phy_set_common_speed+0x408>
            continue;
        }
        
        psys = pmac_info->psys_info; 
 18300b4:	e0bff617 	ldw	r2,-40(fp)
 18300b8:	10800217 	ldw	r2,8(r2)
 18300bc:	e0bff715 	stw	r2,-36(fp)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 18300c0:	e0bff517 	ldw	r2,-44(fp)
 18300c4:	10800003 	ldbu	r2,0(r2)
 18300c8:	10803fcc 	andi	r2,r2,255
 18300cc:	100b883a 	mov	r5,r2
 18300d0:	e13ff517 	ldw	r4,-44(fp)
 18300d4:	182d7e80 	call	182d7e8 <alt_tse_phy_wr_mdio_addr>

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 18300d8:	e0bff517 	ldw	r2,-44(fp)
 18300dc:	108000c3 	ldbu	r2,3(r2)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 18300e0:	10803fcc 	andi	r2,r2,255
 18300e4:	10000c1e 	bne	r2,zero,1830118 <alt_tse_phy_set_common_speed+0x150>
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 18300e8:	e0bff517 	ldw	r2,-44(fp)
 18300ec:	10800103 	ldbu	r2,4(r2)
 18300f0:	10803fcc 	andi	r2,r2,255
 18300f4:	1000081e 	bne	r2,zero,1830118 <alt_tse_phy_set_common_speed+0x150>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 18300f8:	e0bff517 	ldw	r2,-44(fp)
 18300fc:	10800043 	ldbu	r2,1(r2)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 1830100:	10803fcc 	andi	r2,r2,255
 1830104:	1000041e 	bne	r2,zero,1830118 <alt_tse_phy_set_common_speed+0x150>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 1830108:	e0bff517 	ldw	r2,-44(fp)
 183010c:	10800083 	ldbu	r2,2(r2)
 1830110:	10803fcc 	andi	r2,r2,255
 1830114:	10000226 	beq	r2,zero,1830120 <alt_tse_phy_set_common_speed+0x158>
 1830118:	00800044 	movi	r2,1
 183011c:	00000106 	br	1830124 <alt_tse_phy_set_common_speed+0x15c>
 1830120:	0005883a 	mov	r2,zero
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 1830124:	e0bffb05 	stb	r2,-20(fp)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
 1830128:	e0bffb03 	ldbu	r2,-20(fp)
 183012c:	1000101e 	bne	r2,zero,1830170 <alt_tse_phy_set_common_speed+0x1a8>
 1830130:	e0bffd17 	ldw	r2,-12(fp)
 1830134:	10800098 	cmpnei	r2,r2,2
 1830138:	10000d1e 	bne	r2,zero,1830170 <alt_tse_phy_set_common_speed+0x1a8>
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - PHY does not support 1000 Mbps, please specify valid common speed\n", mac_group_index, mac_info_index);
 183013c:	e0bff847 	ldb	r2,-31(fp)
 1830140:	e0fff807 	ldb	r3,-32(fp)
 1830144:	180d883a 	mov	r6,r3
 1830148:	100b883a 	mov	r5,r2
 183014c:	01006134 	movhi	r4,388
 1830150:	210bb004 	addi	r4,r4,11968
 1830154:	1800bd80 	call	1800bd8 <printf>
			/* Restore previous MDIO address */
			IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 1830158:	e0bff917 	ldw	r2,-28(fp)
 183015c:	10801004 	addi	r2,r2,64
 1830160:	e0fffa17 	ldw	r3,-24(fp)
 1830164:	10c00035 	stwio	r3,0(r2)
            return TSE_PHY_SPEED_NO_COMMON;
 1830168:	00bfffc4 	movi	r2,-1
 183016c:	0000bc06 	br	1830460 <alt_tse_phy_set_common_speed+0x498>
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 1830170:	01c00044 	movi	r7,1
 1830174:	018000c4 	movi	r6,3
 1830178:	01400044 	movi	r5,1
 183017c:	e13ff517 	ldw	r4,-44(fp)
 1830180:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 1830184:	1000141e 	bne	r2,zero,18301d8 <alt_tse_phy_set_common_speed+0x210>
            
            /* if PHY supports 1000 Mbps, write msb of speed */
            if(gb_capable) {
 1830188:	e0bffb03 	ldbu	r2,-20(fp)
 183018c:	10000926 	beq	r2,zero,18301b4 <alt_tse_phy_set_common_speed+0x1ec>
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_MSB, 1, common_speed >> 1);
 1830190:	e0bffd17 	ldw	r2,-12(fp)
 1830194:	1005d07a 	srai	r2,r2,1
 1830198:	10bfffcc 	andi	r2,r2,65535
 183019c:	d8800015 	stw	r2,0(sp)
 18301a0:	01c00044 	movi	r7,1
 18301a4:	01800184 	movi	r6,6
 18301a8:	000b883a 	mov	r5,zero
 18301ac:	e13ff517 	ldw	r4,-44(fp)
 18301b0:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
            }
            /* write lsb of speed */
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_LSB, 1, common_speed);
 18301b4:	e0bffd17 	ldw	r2,-12(fp)
 18301b8:	10bfffcc 	andi	r2,r2,65535
 18301bc:	d8800015 	stw	r2,0(sp)
 18301c0:	01c00044 	movi	r7,1
 18301c4:	01800344 	movi	r6,13
 18301c8:	000b883a 	mov	r5,zero
 18301cc:	e13ff517 	ldw	r4,-44(fp)
 18301d0:	182d8400 	call	182d840 <alt_tse_phy_wr_mdio_reg>
            
            /* continue to next PHY */
            continue;
 18301d4:	00007f06 	br	18303d4 <alt_tse_phy_set_common_speed+0x40c>
        }
        
        /* set Auto-Negotiation advertisement based on common speed */
        if(common_speed == TSE_PHY_SPEED_1000) {
 18301d8:	e0bffd17 	ldw	r2,-12(fp)
 18301dc:	10800098 	cmpnei	r2,r2,2
 18301e0:	10000a1e 	bne	r2,zero,183020c <alt_tse_phy_set_common_speed+0x244>
            alt_tse_phy_set_adv_1000(pphy, 1);
 18301e4:	01400044 	movi	r5,1
 18301e8:	e13ff517 	ldw	r4,-44(fp)
 18301ec:	182f6e00 	call	182f6e0 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 18301f0:	01400044 	movi	r5,1
 18301f4:	e13ff517 	ldw	r4,-44(fp)
 18301f8:	182f8a40 	call	182f8a4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 18301fc:	01400044 	movi	r5,1
 1830200:	e13ff517 	ldw	r4,-44(fp)
 1830204:	182faf80 	call	182faf8 <alt_tse_phy_set_adv_10>
 1830208:	00002206 	br	1830294 <alt_tse_phy_set_common_speed+0x2cc>
        }
        else if(common_speed == TSE_PHY_SPEED_100) {
 183020c:	e0bffd17 	ldw	r2,-12(fp)
 1830210:	10800058 	cmpnei	r2,r2,1
 1830214:	10000a1e 	bne	r2,zero,1830240 <alt_tse_phy_set_common_speed+0x278>
            alt_tse_phy_set_adv_1000(pphy, 0);
 1830218:	000b883a 	mov	r5,zero
 183021c:	e13ff517 	ldw	r4,-44(fp)
 1830220:	182f6e00 	call	182f6e0 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 1830224:	01400044 	movi	r5,1
 1830228:	e13ff517 	ldw	r4,-44(fp)
 183022c:	182f8a40 	call	182f8a4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 1830230:	01400044 	movi	r5,1
 1830234:	e13ff517 	ldw	r4,-44(fp)
 1830238:	182faf80 	call	182faf8 <alt_tse_phy_set_adv_10>
 183023c:	00001506 	br	1830294 <alt_tse_phy_set_common_speed+0x2cc>
        }    
        else if(common_speed == TSE_PHY_SPEED_10) {
 1830240:	e0bffd17 	ldw	r2,-12(fp)
 1830244:	10000a1e 	bne	r2,zero,1830270 <alt_tse_phy_set_common_speed+0x2a8>
            alt_tse_phy_set_adv_1000(pphy, 0);
 1830248:	000b883a 	mov	r5,zero
 183024c:	e13ff517 	ldw	r4,-44(fp)
 1830250:	182f6e00 	call	182f6e0 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 1830254:	000b883a 	mov	r5,zero
 1830258:	e13ff517 	ldw	r4,-44(fp)
 183025c:	182f8a40 	call	182f8a4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 1830260:	01400044 	movi	r5,1
 1830264:	e13ff517 	ldw	r4,-44(fp)
 1830268:	182faf80 	call	182faf8 <alt_tse_phy_set_adv_10>
 183026c:	00000906 	br	1830294 <alt_tse_phy_set_common_speed+0x2cc>
        }
        else {
            alt_tse_phy_set_adv_1000(pphy, 0);
 1830270:	000b883a 	mov	r5,zero
 1830274:	e13ff517 	ldw	r4,-44(fp)
 1830278:	182f6e00 	call	182f6e0 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 183027c:	000b883a 	mov	r5,zero
 1830280:	e13ff517 	ldw	r4,-44(fp)
 1830284:	182f8a40 	call	182f8a4 <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
 1830288:	000b883a 	mov	r5,zero
 183028c:	e13ff517 	ldw	r4,-44(fp)
 1830290:	182faf80 	call	182faf8 <alt_tse_phy_set_adv_10>
        }
        
        /* if PHY Auto-Negotiation is completed */
        if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 1) {
 1830294:	01c00044 	movi	r7,1
 1830298:	01800144 	movi	r6,5
 183029c:	01400044 	movi	r5,1
 18302a0:	e13ff517 	ldw	r4,-44(fp)
 18302a4:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 18302a8:	10800058 	cmpnei	r2,r2,1
 18302ac:	10003a1e 	bne	r2,zero,1830398 <alt_tse_phy_set_common_speed+0x3d0>
            
            /* read both msb and lsb of speed bits if PHY support 1000 Mbps */
            if(gb_capable) {
 18302b0:	e0bffb03 	ldbu	r2,-20(fp)
 18302b4:	10000f26 	beq	r2,zero,18302f4 <alt_tse_phy_set_common_speed+0x32c>
        
                /* get speed information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 18302b8:	e0bff517 	ldw	r2,-44(fp)
 18302bc:	10800517 	ldw	r2,20(r2)
 18302c0:	10801583 	ldbu	r2,86(r2)
 18302c4:	10c03fcc 	andi	r3,r2,255
 18302c8:	e0bff517 	ldw	r2,-44(fp)
 18302cc:	10800517 	ldw	r2,20(r2)
 18302d0:	108015c3 	ldbu	r2,87(r2)
 18302d4:	10803fcc 	andi	r2,r2,255
 18302d8:	01c00084 	movi	r7,2
 18302dc:	100d883a 	mov	r6,r2
 18302e0:	180b883a 	mov	r5,r3
 18302e4:	e13ff517 	ldw	r4,-44(fp)
 18302e8:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 18302ec:	e0bff405 	stb	r2,-48(fp)
 18302f0:	00000e06 	br	183032c <alt_tse_phy_set_common_speed+0x364>
            }
            
            /* read lsb of speed only if PHY support only 10/100 Mbps */
            else {
                /* get speed and link information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 1);
 18302f4:	e0bff517 	ldw	r2,-44(fp)
 18302f8:	10800517 	ldw	r2,20(r2)
 18302fc:	10801583 	ldbu	r2,86(r2)
 1830300:	10c03fcc 	andi	r3,r2,255
 1830304:	e0bff517 	ldw	r2,-44(fp)
 1830308:	10800517 	ldw	r2,20(r2)
 183030c:	108015c3 	ldbu	r2,87(r2)
 1830310:	10803fcc 	andi	r2,r2,255
 1830314:	01c00044 	movi	r7,1
 1830318:	100d883a 	mov	r6,r2
 183031c:	180b883a 	mov	r5,r3
 1830320:	e13ff517 	ldw	r4,-44(fp)
 1830324:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 1830328:	e0bff405 	stb	r2,-48(fp)
            }
            
            /* if current speed != common speed, then restart Auto-Negotiation */
            if(speed != common_speed) {
 183032c:	e0fff403 	ldbu	r3,-48(fp)
 1830330:	e0bffd17 	ldw	r2,-12(fp)
 1830334:	18800326 	beq	r3,r2,1830344 <alt_tse_phy_set_common_speed+0x37c>
                alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 1830338:	017e0034 	movhi	r5,63488
 183033c:	e13ff517 	ldw	r4,-44(fp)
 1830340:	182ee300 	call	182ee30 <alt_tse_phy_restart_an>
            }
            
            /* get speed information after Auto-Negotiation */
            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 1830344:	e0bff517 	ldw	r2,-44(fp)
 1830348:	10800517 	ldw	r2,20(r2)
 183034c:	10801583 	ldbu	r2,86(r2)
 1830350:	10c03fcc 	andi	r3,r2,255
 1830354:	e0bff517 	ldw	r2,-44(fp)
 1830358:	10800517 	ldw	r2,20(r2)
 183035c:	10801603 	ldbu	r2,88(r2)
 1830360:	10803fcc 	andi	r2,r2,255
 1830364:	01c00044 	movi	r7,1
 1830368:	100d883a 	mov	r6,r2
 183036c:	180b883a 	mov	r5,r3
 1830370:	e13ff517 	ldw	r4,-44(fp)
 1830374:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 1830378:	e0bffb45 	stb	r2,-19(fp)
            
            /* Set MAC duplex register */
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
 183037c:	e0bff717 	ldw	r2,-36(fp)
 1830380:	10800017 	ldw	r2,0(r2)
 1830384:	1007883a 	mov	r3,r2
 1830388:	e0bffb43 	ldbu	r2,-19(fp)
 183038c:	100b883a 	mov	r5,r2
 1830390:	1809883a 	mov	r4,r3
 1830394:	182cc980 	call	182cc98 <alt_tse_mac_set_duplex>
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
 1830398:	e43ff847 	ldb	r16,-31(fp)
 183039c:	e47ff807 	ldb	r17,-32(fp)
 18303a0:	01c00404 	movi	r7,16
 18303a4:	000d883a 	mov	r6,zero
 18303a8:	01400044 	movi	r5,1
 18303ac:	e13ff517 	ldw	r4,-44(fp)
 18303b0:	182d9680 	call	182d968 <alt_tse_phy_rd_mdio_reg>
 18303b4:	100f883a 	mov	r7,r2
 18303b8:	880d883a 	mov	r6,r17
 18303bc:	800b883a 	mov	r5,r16
 18303c0:	01006134 	movhi	r4,388
 18303c4:	210bc704 	addi	r4,r4,12060
 18303c8:	1800bd80 	call	1800bd8 <printf>
 18303cc:	00000106 	br	18303d4 <alt_tse_phy_set_common_speed+0x40c>

        pphy = pmac_info->pphy_info;
        
        /* if no PHY connected */
        if(!pphy) {
            continue;
 18303d0:	0001883a 	nop
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
        return TSE_PHY_SPEED_NO_COMMON;
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 18303d4:	e0bff317 	ldw	r2,-52(fp)
 18303d8:	10800044 	addi	r2,r2,1
 18303dc:	e0bff315 	stw	r2,-52(fp)
 18303e0:	e0bffc17 	ldw	r2,-16(fp)
 18303e4:	10800003 	ldbu	r2,0(r2)
 18303e8:	10803fcc 	andi	r2,r2,255
 18303ec:	e0fff317 	ldw	r3,-52(fp)
 18303f0:	18bf2016 	blt	r3,r2,1830074 <__alt_mem_mem_0+0xff810074>
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
    }
    tse_dprintf(5, "INFO    : MAC Group[%d] - All PHYs set to common speed : %d Mbps\n", mac_group_index, (common_speed == TSE_PHY_SPEED_1000) ? 1000 : ((common_speed == TSE_PHY_SPEED_100) ? 100 : 10));
 18303f4:	e0fff847 	ldb	r3,-31(fp)
 18303f8:	e0bffd17 	ldw	r2,-12(fp)
 18303fc:	108000a0 	cmpeqi	r2,r2,2
 1830400:	1000071e 	bne	r2,zero,1830420 <alt_tse_phy_set_common_speed+0x458>
 1830404:	e0bffd17 	ldw	r2,-12(fp)
 1830408:	10800058 	cmpnei	r2,r2,1
 183040c:	1000021e 	bne	r2,zero,1830418 <alt_tse_phy_set_common_speed+0x450>
 1830410:	00801904 	movi	r2,100
 1830414:	00000306 	br	1830424 <alt_tse_phy_set_common_speed+0x45c>
 1830418:	00800284 	movi	r2,10
 183041c:	00000106 	br	1830424 <alt_tse_phy_set_common_speed+0x45c>
 1830420:	0080fa04 	movi	r2,1000
 1830424:	100d883a 	mov	r6,r2
 1830428:	180b883a 	mov	r5,r3
 183042c:	01006134 	movhi	r4,388
 1830430:	210bd304 	addi	r4,r4,12108
 1830434:	1800bd80 	call	1800bd8 <printf>

    /* Set MAC speed register */
    alt_tse_mac_set_speed(pmac_group_base, common_speed);
 1830438:	e0bffd17 	ldw	r2,-12(fp)
 183043c:	10803fcc 	andi	r2,r2,255
 1830440:	100b883a 	mov	r5,r2
 1830444:	e13ff917 	ldw	r4,-28(fp)
 1830448:	182cbb80 	call	182cbb8 <alt_tse_mac_set_speed>
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 183044c:	e0bff917 	ldw	r2,-28(fp)
 1830450:	10801004 	addi	r2,r2,64
 1830454:	e0fffa17 	ldw	r3,-24(fp)
 1830458:	10c00035 	stwio	r3,0(r2)
        
    return common_speed;
 183045c:	e0bffd17 	ldw	r2,-12(fp)
}
 1830460:	e6fffe04 	addi	sp,fp,-8
 1830464:	dfc00317 	ldw	ra,12(sp)
 1830468:	df000217 	ldw	fp,8(sp)
 183046c:	dc400117 	ldw	r17,4(sp)
 1830470:	dc000017 	ldw	r16,0(sp)
 1830474:	dec00404 	addi	sp,sp,16
 1830478:	f800283a 	ret

0183047c <marvell_phy_cfg>:

/* @Function Description: Additional configuration for Marvell PHY
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address of MAC group
 */
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
 183047c:	defffc04 	addi	sp,sp,-16
 1830480:	dfc00315 	stw	ra,12(sp)
 1830484:	df000215 	stw	fp,8(sp)
 1830488:	df000204 	addi	fp,sp,8
 183048c:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & 1<<5) == 0) {
 1830490:	e0bfff17 	ldw	r2,-4(fp)
 1830494:	1080a104 	addi	r2,r2,644
 1830498:	10800037 	ldwio	r2,0(r2)
 183049c:	1080080c 	andi	r2,r2,32
 18304a0:	1000161e 	bne	r2,zero,18304fc <marvell_phy_cfg+0x80>
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
 18304a4:	01006134 	movhi	r4,388
 18304a8:	210be404 	addi	r4,r4,12176
 18304ac:	183c9880 	call	183c988 <puts>
        IOWR(&pmac->mdio1.CONTROL, 16, 0x0078);
 18304b0:	e0bfff17 	ldw	r2,-4(fp)
 18304b4:	1080a004 	addi	r2,r2,640
 18304b8:	10801004 	addi	r2,r2,64
 18304bc:	00c01e04 	movi	r3,120
 18304c0:	10c00035 	stwio	r3,0(r2)
        tse_dprintf(5, "MARVELL : PHY reset\n");
 18304c4:	01006134 	movhi	r4,388
 18304c8:	210bed04 	addi	r4,r4,12212
 18304cc:	183c9880 	call	183c988 <puts>
        dat = IORD(&pmac->mdio1.CONTROL, 0); 
 18304d0:	e0bfff17 	ldw	r2,-4(fp)
 18304d4:	1080a004 	addi	r2,r2,640
 18304d8:	10800037 	ldwio	r2,0(r2)
 18304dc:	e0bffe0d 	sth	r2,-8(fp)
        IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);        
 18304e0:	e0bfff17 	ldw	r2,-4(fp)
 18304e4:	1080a004 	addi	r2,r2,640
 18304e8:	e13ffe0b 	ldhu	r4,-8(fp)
 18304ec:	00e00004 	movi	r3,-32768
 18304f0:	20c6b03a 	or	r3,r4,r3
 18304f4:	18ffffcc 	andi	r3,r3,65535
 18304f8:	10c00035 	stwio	r3,0(r2)
    }
    
    return 0;
 18304fc:	0005883a 	mov	r2,zero
}
 1830500:	e037883a 	mov	sp,fp
 1830504:	dfc00117 	ldw	ra,4(sp)
 1830508:	df000017 	ldw	fp,0(sp)
 183050c:	dec00204 	addi	sp,sp,8
 1830510:	f800283a 	ret

01830514 <marvell_cfg_gmii>:

/* @Function Description: Change operating mode of Marvell PHY to GMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_gmii(np_tse_mac *pmac) {
 1830514:	defffc04 	addi	sp,sp,-16
 1830518:	dfc00315 	stw	ra,12(sp)
 183051c:	df000215 	stw	fp,8(sp)
 1830520:	df000204 	addi	fp,sp,8
 1830524:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 1830528:	e0bfff17 	ldw	r2,-4(fp)
 183052c:	1080bb04 	addi	r2,r2,748
 1830530:	10800037 	ldwio	r2,0(r2)
 1830534:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 1830538:	e0fffe0b 	ldhu	r3,-8(fp)
 183053c:	00bffc04 	movi	r2,-16
 1830540:	1884703a 	and	r2,r3,r2
 1830544:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to GMII to copper mode\n");
 1830548:	01006134 	movhi	r4,388
 183054c:	210bf204 	addi	r4,r4,12232
 1830550:	183c9880 	call	183c988 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xf);
 1830554:	e0bfff17 	ldw	r2,-4(fp)
 1830558:	1080bb04 	addi	r2,r2,748
 183055c:	e0fffe0b 	ldhu	r3,-8(fp)
 1830560:	18c003d4 	ori	r3,r3,15
 1830564:	18ffffcc 	andi	r3,r3,65535
 1830568:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 183056c:	01006134 	movhi	r4,388
 1830570:	210bfe04 	addi	r4,r4,12280
 1830574:	183c9880 	call	183c988 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 1830578:	e0bfff17 	ldw	r2,-4(fp)
 183057c:	1080b404 	addi	r2,r2,720
 1830580:	10800037 	ldwio	r2,0(r2)
 1830584:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 1830588:	e0fffe0b 	ldhu	r3,-8(fp)
 183058c:	00bfdf44 	movi	r2,-131
 1830590:	1884703a 	and	r2,r3,r2
 1830594:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 1830598:	e0bfff17 	ldw	r2,-4(fp)
 183059c:	1080b404 	addi	r2,r2,720
 18305a0:	e0fffe0b 	ldhu	r3,-8(fp)
 18305a4:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 18305a8:	01006134 	movhi	r4,388
 18305ac:	210bed04 	addi	r4,r4,12212
 18305b0:	183c9880 	call	183c988 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 18305b4:	e0bfff17 	ldw	r2,-4(fp)
 18305b8:	1080a004 	addi	r2,r2,640
 18305bc:	10800037 	ldwio	r2,0(r2)
 18305c0:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);
 18305c4:	e0bfff17 	ldw	r2,-4(fp)
 18305c8:	1080a004 	addi	r2,r2,640
 18305cc:	e13ffe0b 	ldhu	r4,-8(fp)
 18305d0:	00e00004 	movi	r3,-32768
 18305d4:	20c6b03a 	or	r3,r4,r3
 18305d8:	18ffffcc 	andi	r3,r3,65535
 18305dc:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 18305e0:	00800044 	movi	r2,1
}
 18305e4:	e037883a 	mov	sp,fp
 18305e8:	dfc00117 	ldw	ra,4(sp)
 18305ec:	df000017 	ldw	fp,0(sp)
 18305f0:	dec00204 	addi	sp,sp,8
 18305f4:	f800283a 	ret

018305f8 <marvell_cfg_sgmii>:

/* @Function Description: Change operating mode of Marvell PHY to SGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_sgmii(np_tse_mac *pmac) {
 18305f8:	defffc04 	addi	sp,sp,-16
 18305fc:	dfc00315 	stw	ra,12(sp)
 1830600:	df000215 	stw	fp,8(sp)
 1830604:	df000204 	addi	fp,sp,8
 1830608:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 183060c:	e0bfff17 	ldw	r2,-4(fp)
 1830610:	1080bb04 	addi	r2,r2,748
 1830614:	10800037 	ldwio	r2,0(r2)
 1830618:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 183061c:	e0fffe0b 	ldhu	r3,-8(fp)
 1830620:	00bffc04 	movi	r2,-16
 1830624:	1884703a 	and	r2,r3,r2
 1830628:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to SGMII without clock with SGMII Auto-Neg to copper mode\n");
 183062c:	01006134 	movhi	r4,388
 1830630:	210c0804 	addi	r4,r4,12320
 1830634:	183c9880 	call	183c988 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0x4);
 1830638:	e0bfff17 	ldw	r2,-4(fp)
 183063c:	1080bb04 	addi	r2,r2,748
 1830640:	e0fffe0b 	ldhu	r3,-8(fp)
 1830644:	18c00114 	ori	r3,r3,4
 1830648:	18ffffcc 	andi	r3,r3,65535
 183064c:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 1830650:	01006134 	movhi	r4,388
 1830654:	210bfe04 	addi	r4,r4,12280
 1830658:	183c9880 	call	183c988 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 183065c:	e0bfff17 	ldw	r2,-4(fp)
 1830660:	1080b404 	addi	r2,r2,720
 1830664:	10800037 	ldwio	r2,0(r2)
 1830668:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 183066c:	e0fffe0b 	ldhu	r3,-8(fp)
 1830670:	00bfdf44 	movi	r2,-131
 1830674:	1884703a 	and	r2,r3,r2
 1830678:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 183067c:	e0bfff17 	ldw	r2,-4(fp)
 1830680:	1080b404 	addi	r2,r2,720
 1830684:	e0fffe0b 	ldhu	r3,-8(fp)
 1830688:	10c00035 	stwio	r3,0(r2)

    tse_dprintf(5, "MARVELL : PHY reset\n");
 183068c:	01006134 	movhi	r4,388
 1830690:	210bed04 	addi	r4,r4,12212
 1830694:	183c9880 	call	183c988 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 1830698:	e0bfff17 	ldw	r2,-4(fp)
 183069c:	1080a004 	addi	r2,r2,640
 18306a0:	10800037 	ldwio	r2,0(r2)
 18306a4:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);
 18306a8:	e0bfff17 	ldw	r2,-4(fp)
 18306ac:	1080a004 	addi	r2,r2,640
 18306b0:	e13ffe0b 	ldhu	r4,-8(fp)
 18306b4:	00e00004 	movi	r3,-32768
 18306b8:	20c6b03a 	or	r3,r4,r3
 18306bc:	18ffffcc 	andi	r3,r3,65535
 18306c0:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 18306c4:	00800044 	movi	r2,1
}
 18306c8:	e037883a 	mov	sp,fp
 18306cc:	dfc00117 	ldw	ra,4(sp)
 18306d0:	df000017 	ldw	fp,0(sp)
 18306d4:	dec00204 	addi	sp,sp,8
 18306d8:	f800283a 	ret

018306dc <marvell_cfg_rgmii>:

/* @Function Description: Change operating mode of Marvell PHY to RGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_rgmii(np_tse_mac *pmac) {
 18306dc:	defffc04 	addi	sp,sp,-16
 18306e0:	dfc00315 	stw	ra,12(sp)
 18306e4:	df000215 	stw	fp,8(sp)
 18306e8:	df000204 	addi	fp,sp,8
 18306ec:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 18306f0:	e0bfff17 	ldw	r2,-4(fp)
 18306f4:	1080bb04 	addi	r2,r2,748
 18306f8:	10800037 	ldwio	r2,0(r2)
 18306fc:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 1830700:	e0fffe0b 	ldhu	r3,-8(fp)
 1830704:	00bffc04 	movi	r2,-16
 1830708:	1884703a 	and	r2,r3,r2
 183070c:	e0bffe0d 	sth	r2,-8(fp)
    
    tse_dprintf(5, "MARVELL : Mode changed to RGMII/Modified MII to Copper mode\n");
 1830710:	01006134 	movhi	r4,388
 1830714:	210c1d04 	addi	r4,r4,12404
 1830718:	183c9880 	call	183c988 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xb);
 183071c:	e0bfff17 	ldw	r2,-4(fp)
 1830720:	1080bb04 	addi	r2,r2,748
 1830724:	e0fffe0b 	ldhu	r3,-8(fp)
 1830728:	18c002d4 	ori	r3,r3,11
 183072c:	18ffffcc 	andi	r3,r3,65535
 1830730:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Enable RGMII Timing Control\n");
 1830734:	01006134 	movhi	r4,388
 1830738:	210c2c04 	addi	r4,r4,12464
 183073c:	183c9880 	call	183c988 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0);
 1830740:	e0bfff17 	ldw	r2,-4(fp)
 1830744:	1080b404 	addi	r2,r2,720
 1830748:	10800037 	ldwio	r2,0(r2)
 183074c:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 1830750:	e0fffe0b 	ldhu	r3,-8(fp)
 1830754:	00bfdf44 	movi	r2,-131
 1830758:	1884703a 	and	r2,r3,r2
 183075c:	e0bffe0d 	sth	r2,-8(fp)
    dat |= 0x82;
 1830760:	e0bffe0b 	ldhu	r2,-8(fp)
 1830764:	10802094 	ori	r2,r2,130
 1830768:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);    
 183076c:	e0bfff17 	ldw	r2,-4(fp)
 1830770:	1080b404 	addi	r2,r2,720
 1830774:	e0fffe0b 	ldhu	r3,-8(fp)
 1830778:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 183077c:	01006134 	movhi	r4,388
 1830780:	210bed04 	addi	r4,r4,12212
 1830784:	183c9880 	call	183c988 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 1830788:	e0bfff17 	ldw	r2,-4(fp)
 183078c:	1080a004 	addi	r2,r2,640
 1830790:	10800037 	ldwio	r2,0(r2)
 1830794:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);
 1830798:	e0bfff17 	ldw	r2,-4(fp)
 183079c:	1080a004 	addi	r2,r2,640
 18307a0:	e13ffe0b 	ldhu	r4,-8(fp)
 18307a4:	00e00004 	movi	r3,-32768
 18307a8:	20c6b03a 	or	r3,r4,r3
 18307ac:	18ffffcc 	andi	r3,r3,65535
 18307b0:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 18307b4:	00800044 	movi	r2,1
    
}
 18307b8:	e037883a 	mov	sp,fp
 18307bc:	dfc00117 	ldw	ra,4(sp)
 18307c0:	df000017 	ldw	fp,0(sp)
 18307c4:	dec00204 	addi	sp,sp,8
 18307c8:	f800283a 	ret

018307cc <DP83848C_link_status_read>:

/* @Function Description: Read link status from PHY specific status register of DP83848C
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 DP83848C_link_status_read(np_tse_mac *pmac) {
 18307cc:	defffc04 	addi	sp,sp,-16
 18307d0:	df000315 	stw	fp,12(sp)
 18307d4:	df000304 	addi	fp,sp,12
 18307d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 link_status = 0;
 18307dc:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg_status = IORD(&pmac->mdio1.reg10, 0);
 18307e0:	e0bfff17 	ldw	r2,-4(fp)
 18307e4:	1080b004 	addi	r2,r2,704
 18307e8:	10800037 	ldwio	r2,0(r2)
 18307ec:	e0bffe15 	stw	r2,-8(fp)
	
	/* If speed == 10 Mbps */
	if(reg_status & 0x2) {
 18307f0:	e0bffe17 	ldw	r2,-8(fp)
 18307f4:	1080008c 	andi	r2,r2,2
 18307f8:	10000426 	beq	r2,zero,183080c <DP83848C_link_status_read+0x40>
		link_status |= 0x8;
 18307fc:	e0bffd17 	ldw	r2,-12(fp)
 1830800:	10800214 	ori	r2,r2,8
 1830804:	e0bffd15 	stw	r2,-12(fp)
 1830808:	00000306 	br	1830818 <DP83848C_link_status_read+0x4c>
	}
	/* Else speed = 100 Mbps */
	else {
		link_status |= 0x4;
 183080c:	e0bffd17 	ldw	r2,-12(fp)
 1830810:	10800114 	ori	r2,r2,4
 1830814:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* If duplex == Full */
	if(reg_status & 0x4) {
 1830818:	e0bffe17 	ldw	r2,-8(fp)
 183081c:	1080010c 	andi	r2,r2,4
 1830820:	10000326 	beq	r2,zero,1830830 <DP83848C_link_status_read+0x64>
		link_status |= 0x1;
 1830824:	e0bffd17 	ldw	r2,-12(fp)
 1830828:	10800054 	ori	r2,r2,1
 183082c:	e0bffd15 	stw	r2,-12(fp)
	}
	
	return link_status;
 1830830:	e0bffd17 	ldw	r2,-12(fp)
}
 1830834:	e037883a 	mov	sp,fp
 1830838:	df000017 	ldw	fp,0(sp)
 183083c:	dec00104 	addi	sp,sp,4
 1830840:	f800283a 	ret

01830844 <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
 1830844:	defffe04 	addi	sp,sp,-8
 1830848:	dfc00115 	stw	ra,4(sp)
 183084c:	df000015 	stw	fp,0(sp)
 1830850:	d839883a 	mov	fp,sp
  /* Modules initialization */
  stats_init();
 1830854:	181b6ac0 	call	181b6ac <stats_init>
#if !NO_SYS
  sys_init();
 1830858:	1814b7c0 	call	1814b7c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 183085c:	1818fdc0 	call	1818fdc <mem_init>
  memp_init();
 1830860:	1833e640 	call	1833e64 <memp_init>
  pbuf_init();
  netif_init();
 1830864:	18198280 	call	1819828 <netif_init>
#if LWIP_SOCKET
  lwip_socket_init();
 1830868:	1827fc80 	call	1827fc8 <lwip_socket_init>
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 183086c:	18218380 	call	1821838 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 1830870:	181b6cc0 	call	181b6cc <tcp_init>
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
 1830874:	182143c0 	call	182143c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 1830878:	0001883a 	nop
 183087c:	e037883a 	mov	sp,fp
 1830880:	dfc00117 	ldw	ra,4(sp)
 1830884:	df000017 	ldw	fp,0(sp)
 1830888:	dec00204 	addi	sp,sp,8
 183088c:	f800283a 	ret

01830890 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 1830890:	defff304 	addi	sp,sp,-52
 1830894:	dfc00c15 	stw	ra,48(sp)
 1830898:	df000b15 	stw	fp,44(sp)
 183089c:	df000b04 	addi	fp,sp,44
 18308a0:	e13ffe15 	stw	r4,-8(fp)
 18308a4:	e17fff15 	stw	r5,-4(fp)
#endif /* LWIP_DEBUG */
  struct icmp_echo_hdr *iecho;
  struct ip_hdr *iphdr;
  s16_t hlen;

  ICMP_STATS_INC(icmp.recv);
 18308a8:	008061f4 	movhi	r2,391
 18308ac:	10a77104 	addi	r2,r2,-25148
 18308b0:	10803117 	ldw	r2,196(r2)
 18308b4:	10c00044 	addi	r3,r2,1
 18308b8:	008061f4 	movhi	r2,391
 18308bc:	10a77104 	addi	r2,r2,-25148
 18308c0:	10c03115 	stw	r3,196(r2)
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
 18308c4:	e0bffe17 	ldw	r2,-8(fp)
 18308c8:	10800117 	ldw	r2,4(r2)
 18308cc:	e0bff815 	stw	r2,-32(fp)
  hlen = IPH_HL(iphdr) * 4;
 18308d0:	e0bff817 	ldw	r2,-32(fp)
 18308d4:	10800003 	ldbu	r2,0(r2)
 18308d8:	10803fcc 	andi	r2,r2,255
 18308dc:	108003cc 	andi	r2,r2,15
 18308e0:	1085883a 	add	r2,r2,r2
 18308e4:	1085883a 	add	r2,r2,r2
 18308e8:	e0bffa0d 	sth	r2,-24(fp)
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 18308ec:	e0bffa0b 	ldhu	r2,-24(fp)
 18308f0:	0085c83a 	sub	r2,zero,r2
 18308f4:	10bfffcc 	andi	r2,r2,65535
 18308f8:	10a0001c 	xori	r2,r2,32768
 18308fc:	10a00004 	addi	r2,r2,-32768
 1830900:	100b883a 	mov	r5,r2
 1830904:	e13ffe17 	ldw	r4,-8(fp)
 1830908:	181a7540 	call	181a754 <pbuf_header>
 183090c:	10803fcc 	andi	r2,r2,255
 1830910:	10013c1e 	bne	r2,zero,1830e04 <icmp_input+0x574>
 1830914:	e0bffe17 	ldw	r2,-8(fp)
 1830918:	1080020b 	ldhu	r2,8(r2)
 183091c:	10bfffcc 	andi	r2,r2,65535
 1830920:	10800130 	cmpltui	r2,r2,4
 1830924:	1001371e 	bne	r2,zero,1830e04 <icmp_input+0x574>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 1830928:	e0bffe17 	ldw	r2,-8(fp)
 183092c:	10800117 	ldw	r2,4(r2)
 1830930:	10800003 	ldbu	r2,0(r2)
 1830934:	e0bffa85 	stb	r2,-22(fp)
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 1830938:	e0bffa83 	ldbu	r2,-22(fp)
 183093c:	10012a26 	beq	r2,zero,1830de8 <icmp_input+0x558>
 1830940:	10800220 	cmpeqi	r2,r2,8
 1830944:	10011926 	beq	r2,zero,1830dac <icmp_input+0x51c>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
 1830948:	00800044 	movi	r2,1
 183094c:	e0bff915 	stw	r2,-28(fp)
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
 1830950:	d0a81217 	ldw	r2,-24504(gp)
 1830954:	10803c0c 	andi	r2,r2,240
 1830958:	10803818 	cmpnei	r2,r2,224
 183095c:	1000011e 	bne	r2,zero,1830964 <icmp_input+0xd4>
        accepted = 0;
 1830960:	e03ff915 	stw	zero,-28(fp)
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 1830964:	d0a81217 	ldw	r2,-24504(gp)
 1830968:	e17fff17 	ldw	r5,-4(fp)
 183096c:	1009883a 	mov	r4,r2
 1830970:	18187180 	call	1818718 <ip4_addr_isbroadcast>
 1830974:	10803fcc 	andi	r2,r2,255
 1830978:	10000126 	beq	r2,zero,1830980 <icmp_input+0xf0>
        accepted = 0;
 183097c:	e03ff915 	stw	zero,-28(fp)
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
 1830980:	e0bff917 	ldw	r2,-28(fp)
 1830984:	10000a1e 	bne	r2,zero,18309b0 <icmp_input+0x120>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
 1830988:	008061f4 	movhi	r2,391
 183098c:	10a77104 	addi	r2,r2,-25148
 1830990:	10803a17 	ldw	r2,232(r2)
 1830994:	10c00044 	addi	r3,r2,1
 1830998:	008061f4 	movhi	r2,391
 183099c:	10a77104 	addi	r2,r2,-25148
 18309a0:	10c03a15 	stw	r3,232(r2)
        pbuf_free(p);
 18309a4:	e13ffe17 	ldw	r4,-8(fp)
 18309a8:	181a9040 	call	181a904 <pbuf_free>
        return;
 18309ac:	00013206 	br	1830e78 <icmp_input+0x5e8>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 18309b0:	e0bffe17 	ldw	r2,-8(fp)
 18309b4:	1080020b 	ldhu	r2,8(r2)
 18309b8:	10bfffcc 	andi	r2,r2,65535
 18309bc:	10800228 	cmpgeui	r2,r2,8
 18309c0:	10010f26 	beq	r2,zero,1830e00 <icmp_input+0x570>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
 18309c4:	e13ffe17 	ldw	r4,-8(fp)
 18309c8:	18317ac0 	call	18317ac <inet_chksum_pbuf>
 18309cc:	10bfffcc 	andi	r2,r2,65535
 18309d0:	10000a26 	beq	r2,zero,18309fc <icmp_input+0x16c>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
 18309d4:	e13ffe17 	ldw	r4,-8(fp)
 18309d8:	181a9040 	call	181a904 <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
 18309dc:	008061f4 	movhi	r2,391
 18309e0:	10a77104 	addi	r2,r2,-25148
 18309e4:	10803417 	ldw	r2,208(r2)
 18309e8:	10c00044 	addi	r3,r2,1
 18309ec:	008061f4 	movhi	r2,391
 18309f0:	10a77104 	addi	r2,r2,-25148
 18309f4:	10c03415 	stw	r3,208(r2)
      snmp_inc_icmpinerrors();
      return;
 18309f8:	00011f06 	br	1830e78 <icmp_input+0x5e8>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 18309fc:	01400904 	movi	r5,36
 1830a00:	e13ffe17 	ldw	r4,-8(fp)
 1830a04:	181a7540 	call	181a754 <pbuf_header>
 1830a08:	10803fcc 	andi	r2,r2,255
 1830a0c:	10002926 	beq	r2,zero,1830ab4 <icmp_input+0x224>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
 1830a10:	e0bffa0f 	ldh	r2,-24(fp)
 1830a14:	100b883a 	mov	r5,r2
 1830a18:	e13ffe17 	ldw	r4,-8(fp)
 1830a1c:	181a7540 	call	181a754 <pbuf_header>
 1830a20:	10803fcc 	andi	r2,r2,255
 1830a24:	1001011e 	bne	r2,zero,1830e2c <icmp_input+0x59c>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 1830a28:	e0bffe17 	ldw	r2,-8(fp)
 1830a2c:	1080020b 	ldhu	r2,8(r2)
 1830a30:	10bfffcc 	andi	r2,r2,65535
 1830a34:	000d883a 	mov	r6,zero
 1830a38:	100b883a 	mov	r5,r2
 1830a3c:	01000084 	movi	r4,2
 1830a40:	181a1480 	call	181a148 <pbuf_alloc>
 1830a44:	e0bffb15 	stw	r2,-20(fp)
      if (r == NULL) {
 1830a48:	e0bffb17 	ldw	r2,-20(fp)
 1830a4c:	1000f926 	beq	r2,zero,1830e34 <icmp_input+0x5a4>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 1830a50:	e17ffe17 	ldw	r5,-8(fp)
 1830a54:	e13ffb17 	ldw	r4,-20(fp)
 1830a58:	181ac8c0 	call	181ac8c <pbuf_copy>
 1830a5c:	10803fcc 	andi	r2,r2,255
 1830a60:	1080201c 	xori	r2,r2,128
 1830a64:	10bfe004 	addi	r2,r2,-128
 1830a68:	1000f41e 	bne	r2,zero,1830e3c <icmp_input+0x5ac>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
 1830a6c:	e0bffb17 	ldw	r2,-20(fp)
 1830a70:	10800117 	ldw	r2,4(r2)
 1830a74:	e0bff815 	stw	r2,-32(fp)
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 1830a78:	e0bffa0b 	ldhu	r2,-24(fp)
 1830a7c:	0085c83a 	sub	r2,zero,r2
 1830a80:	10bfffcc 	andi	r2,r2,65535
 1830a84:	10a0001c 	xori	r2,r2,32768
 1830a88:	10a00004 	addi	r2,r2,-32768
 1830a8c:	100b883a 	mov	r5,r2
 1830a90:	e13ffb17 	ldw	r4,-20(fp)
 1830a94:	181a7540 	call	181a754 <pbuf_header>
 1830a98:	10803fcc 	andi	r2,r2,255
 1830a9c:	1000e91e 	bne	r2,zero,1830e44 <icmp_input+0x5b4>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
 1830aa0:	e13ffe17 	ldw	r4,-8(fp)
 1830aa4:	181a9040 	call	181a904 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 1830aa8:	e0bffb17 	ldw	r2,-20(fp)
 1830aac:	e0bffe15 	stw	r2,-8(fp)
 1830ab0:	00000506 	br	1830ac8 <icmp_input+0x238>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 1830ab4:	017ff704 	movi	r5,-36
 1830ab8:	e13ffe17 	ldw	r4,-8(fp)
 1830abc:	181a7540 	call	181a754 <pbuf_header>
 1830ac0:	10803fcc 	andi	r2,r2,255
 1830ac4:	1000e11e 	bne	r2,zero,1830e4c <icmp_input+0x5bc>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 1830ac8:	e0bffe17 	ldw	r2,-8(fp)
 1830acc:	10800117 	ldw	r2,4(r2)
 1830ad0:	e0bffc15 	stw	r2,-16(fp)
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 1830ad4:	d0e81217 	ldw	r3,-24504(gp)
 1830ad8:	e0bff817 	ldw	r2,-32(fp)
 1830adc:	19803fcc 	andi	r6,r3,255
 1830ae0:	11000303 	ldbu	r4,12(r2)
 1830ae4:	2008703a 	and	r4,r4,zero
 1830ae8:	200b883a 	mov	r5,r4
 1830aec:	3009883a 	mov	r4,r6
 1830af0:	2908b03a 	or	r4,r5,r4
 1830af4:	11000305 	stb	r4,12(r2)
 1830af8:	1808d23a 	srli	r4,r3,8
 1830afc:	21803fcc 	andi	r6,r4,255
 1830b00:	11000343 	ldbu	r4,13(r2)
 1830b04:	2008703a 	and	r4,r4,zero
 1830b08:	200b883a 	mov	r5,r4
 1830b0c:	3009883a 	mov	r4,r6
 1830b10:	2908b03a 	or	r4,r5,r4
 1830b14:	11000345 	stb	r4,13(r2)
 1830b18:	1808d43a 	srli	r4,r3,16
 1830b1c:	21803fcc 	andi	r6,r4,255
 1830b20:	11000383 	ldbu	r4,14(r2)
 1830b24:	2008703a 	and	r4,r4,zero
 1830b28:	200b883a 	mov	r5,r4
 1830b2c:	3009883a 	mov	r4,r6
 1830b30:	2908b03a 	or	r4,r5,r4
 1830b34:	11000385 	stb	r4,14(r2)
 1830b38:	180ad63a 	srli	r5,r3,24
 1830b3c:	10c003c3 	ldbu	r3,15(r2)
 1830b40:	1806703a 	and	r3,r3,zero
 1830b44:	1809883a 	mov	r4,r3
 1830b48:	2807883a 	mov	r3,r5
 1830b4c:	20c6b03a 	or	r3,r4,r3
 1830b50:	10c003c5 	stb	r3,15(r2)
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
 1830b54:	d0e81017 	ldw	r3,-24512(gp)
 1830b58:	e0bff817 	ldw	r2,-32(fp)
 1830b5c:	19803fcc 	andi	r6,r3,255
 1830b60:	11000403 	ldbu	r4,16(r2)
 1830b64:	2008703a 	and	r4,r4,zero
 1830b68:	200b883a 	mov	r5,r4
 1830b6c:	3009883a 	mov	r4,r6
 1830b70:	2908b03a 	or	r4,r5,r4
 1830b74:	11000405 	stb	r4,16(r2)
 1830b78:	1808d23a 	srli	r4,r3,8
 1830b7c:	21803fcc 	andi	r6,r4,255
 1830b80:	11000443 	ldbu	r4,17(r2)
 1830b84:	2008703a 	and	r4,r4,zero
 1830b88:	200b883a 	mov	r5,r4
 1830b8c:	3009883a 	mov	r4,r6
 1830b90:	2908b03a 	or	r4,r5,r4
 1830b94:	11000445 	stb	r4,17(r2)
 1830b98:	1808d43a 	srli	r4,r3,16
 1830b9c:	21803fcc 	andi	r6,r4,255
 1830ba0:	11000483 	ldbu	r4,18(r2)
 1830ba4:	2008703a 	and	r4,r4,zero
 1830ba8:	200b883a 	mov	r5,r4
 1830bac:	3009883a 	mov	r4,r6
 1830bb0:	2908b03a 	or	r4,r5,r4
 1830bb4:	11000485 	stb	r4,18(r2)
 1830bb8:	180ad63a 	srli	r5,r3,24
 1830bbc:	10c004c3 	ldbu	r3,19(r2)
 1830bc0:	1806703a 	and	r3,r3,zero
 1830bc4:	1809883a 	mov	r4,r3
 1830bc8:	2807883a 	mov	r3,r5
 1830bcc:	20c6b03a 	or	r3,r4,r3
 1830bd0:	10c004c5 	stb	r3,19(r2)
    ICMPH_TYPE_SET(iecho, ICMP_ER);
 1830bd4:	e0bffc17 	ldw	r2,-16(fp)
 1830bd8:	10000005 	stb	zero,0(r2)
#if CHECKSUM_GEN_ICMP
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 1830bdc:	e0bffc17 	ldw	r2,-16(fp)
 1830be0:	10c00083 	ldbu	r3,2(r2)
 1830be4:	108000c3 	ldbu	r2,3(r2)
 1830be8:	1004923a 	slli	r2,r2,8
 1830bec:	10c4b03a 	or	r2,r2,r3
 1830bf0:	10bfffcc 	andi	r2,r2,65535
 1830bf4:	10bffdf0 	cmpltui	r2,r2,65527
 1830bf8:	10001a1e 	bne	r2,zero,1830c64 <icmp_input+0x3d4>
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 1830bfc:	e0bffc17 	ldw	r2,-16(fp)
 1830c00:	10c00083 	ldbu	r3,2(r2)
 1830c04:	108000c3 	ldbu	r2,3(r2)
 1830c08:	1004923a 	slli	r2,r2,8
 1830c0c:	10c4b03a 	or	r2,r2,r3
 1830c10:	10800244 	addi	r2,r2,9
 1830c14:	100d883a 	mov	r6,r2
 1830c18:	e0bffc17 	ldw	r2,-16(fp)
 1830c1c:	30ffffcc 	andi	r3,r6,65535
 1830c20:	19403fcc 	andi	r5,r3,255
 1830c24:	10c00083 	ldbu	r3,2(r2)
 1830c28:	1806703a 	and	r3,r3,zero
 1830c2c:	1809883a 	mov	r4,r3
 1830c30:	2807883a 	mov	r3,r5
 1830c34:	20c6b03a 	or	r3,r4,r3
 1830c38:	10c00085 	stb	r3,2(r2)
 1830c3c:	30ffffcc 	andi	r3,r6,65535
 1830c40:	1806d23a 	srli	r3,r3,8
 1830c44:	197fffcc 	andi	r5,r3,65535
 1830c48:	10c000c3 	ldbu	r3,3(r2)
 1830c4c:	1806703a 	and	r3,r3,zero
 1830c50:	1809883a 	mov	r4,r3
 1830c54:	2807883a 	mov	r3,r5
 1830c58:	20c6b03a 	or	r3,r4,r3
 1830c5c:	10c000c5 	stb	r3,3(r2)
 1830c60:	00001906 	br	1830cc8 <icmp_input+0x438>
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 1830c64:	e0bffc17 	ldw	r2,-16(fp)
 1830c68:	10c00083 	ldbu	r3,2(r2)
 1830c6c:	108000c3 	ldbu	r2,3(r2)
 1830c70:	1004923a 	slli	r2,r2,8
 1830c74:	10c4b03a 	or	r2,r2,r3
 1830c78:	10800204 	addi	r2,r2,8
 1830c7c:	100d883a 	mov	r6,r2
 1830c80:	e0bffc17 	ldw	r2,-16(fp)
 1830c84:	30ffffcc 	andi	r3,r6,65535
 1830c88:	19403fcc 	andi	r5,r3,255
 1830c8c:	10c00083 	ldbu	r3,2(r2)
 1830c90:	1806703a 	and	r3,r3,zero
 1830c94:	1809883a 	mov	r4,r3
 1830c98:	2807883a 	mov	r3,r5
 1830c9c:	20c6b03a 	or	r3,r4,r3
 1830ca0:	10c00085 	stb	r3,2(r2)
 1830ca4:	30ffffcc 	andi	r3,r6,65535
 1830ca8:	1806d23a 	srli	r3,r3,8
 1830cac:	197fffcc 	andi	r5,r3,65535
 1830cb0:	10c000c3 	ldbu	r3,3(r2)
 1830cb4:	1806703a 	and	r3,r3,zero
 1830cb8:	1809883a 	mov	r4,r3
 1830cbc:	2807883a 	mov	r3,r5
 1830cc0:	20c6b03a 	or	r3,r4,r3
 1830cc4:	10c000c5 	stb	r3,3(r2)
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
 1830cc8:	e0bff817 	ldw	r2,-32(fp)
 1830ccc:	00c01004 	movi	r3,64
 1830cd0:	10c00205 	stb	r3,8(r2)
    IPH_CHKSUM_SET(iphdr, 0);
 1830cd4:	e0bff817 	ldw	r2,-32(fp)
 1830cd8:	10c00283 	ldbu	r3,10(r2)
 1830cdc:	1806703a 	and	r3,r3,zero
 1830ce0:	10c00285 	stb	r3,10(r2)
 1830ce4:	10c002c3 	ldbu	r3,11(r2)
 1830ce8:	1806703a 	and	r3,r3,zero
 1830cec:	10c002c5 	stb	r3,11(r2)
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 1830cf0:	01400504 	movi	r5,20
 1830cf4:	e13ff817 	ldw	r4,-32(fp)
 1830cf8:	18317680 	call	1831768 <inet_chksum>
 1830cfc:	100d883a 	mov	r6,r2
 1830d00:	e0bff817 	ldw	r2,-32(fp)
 1830d04:	30ffffcc 	andi	r3,r6,65535
 1830d08:	19403fcc 	andi	r5,r3,255
 1830d0c:	10c00283 	ldbu	r3,10(r2)
 1830d10:	1806703a 	and	r3,r3,zero
 1830d14:	1809883a 	mov	r4,r3
 1830d18:	2807883a 	mov	r3,r5
 1830d1c:	20c6b03a 	or	r3,r4,r3
 1830d20:	10c00285 	stb	r3,10(r2)
 1830d24:	30ffffcc 	andi	r3,r6,65535
 1830d28:	1806d23a 	srli	r3,r3,8
 1830d2c:	197fffcc 	andi	r5,r3,65535
 1830d30:	10c002c3 	ldbu	r3,11(r2)
 1830d34:	1806703a 	and	r3,r3,zero
 1830d38:	1809883a 	mov	r4,r3
 1830d3c:	2807883a 	mov	r3,r5
 1830d40:	20c6b03a 	or	r3,r4,r3
 1830d44:	10c002c5 	stb	r3,11(r2)
#endif /* CHECKSUM_GEN_IP */

    ICMP_STATS_INC(icmp.xmit);
 1830d48:	008061f4 	movhi	r2,391
 1830d4c:	10a77104 	addi	r2,r2,-25148
 1830d50:	10803017 	ldw	r2,192(r2)
 1830d54:	10c00044 	addi	r3,r2,1
 1830d58:	008061f4 	movhi	r2,391
 1830d5c:	10a77104 	addi	r2,r2,-25148
 1830d60:	10c03015 	stw	r3,192(r2)
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
 1830d64:	e0bffa0f 	ldh	r2,-24(fp)
 1830d68:	100b883a 	mov	r5,r2
 1830d6c:	e13ffe17 	ldw	r4,-8(fp)
 1830d70:	181a7540 	call	181a754 <pbuf_header>
 1830d74:	10803fcc 	andi	r2,r2,255
 1830d78:	10001d1e 	bne	r2,zero,1830df0 <icmp_input+0x560>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
 1830d7c:	e0bfff17 	ldw	r2,-4(fp)
 1830d80:	d8800215 	stw	r2,8(sp)
 1830d84:	00800044 	movi	r2,1
 1830d88:	d8800115 	stw	r2,4(sp)
 1830d8c:	d8000015 	stw	zero,0(sp)
 1830d90:	01c01004 	movi	r7,64
 1830d94:	000d883a 	mov	r6,zero
 1830d98:	d1681204 	addi	r5,gp,-24504
 1830d9c:	e13ffe17 	ldw	r4,-8(fp)
 1830da0:	1831f3c0 	call	1831f3c <ip_output_if>
 1830da4:	e0bffd05 	stb	r2,-12(fp)
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
 1830da8:	00001106 	br	1830df0 <icmp_input+0x560>
  default:
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 1830dac:	008061f4 	movhi	r2,391
 1830db0:	10a77104 	addi	r2,r2,-25148
 1830db4:	10803817 	ldw	r2,224(r2)
 1830db8:	10c00044 	addi	r3,r2,1
 1830dbc:	008061f4 	movhi	r2,391
 1830dc0:	10a77104 	addi	r2,r2,-25148
 1830dc4:	10c03815 	stw	r3,224(r2)
    ICMP_STATS_INC(icmp.drop);
 1830dc8:	008061f4 	movhi	r2,391
 1830dcc:	10a77104 	addi	r2,r2,-25148
 1830dd0:	10803317 	ldw	r2,204(r2)
 1830dd4:	10c00044 	addi	r3,r2,1
 1830dd8:	008061f4 	movhi	r2,391
 1830ddc:	10a77104 	addi	r2,r2,-25148
 1830de0:	10c03315 	stw	r3,204(r2)
 1830de4:	00000306 	br	1830df4 <icmp_input+0x564>
#endif /* LWIP_DEBUG */
  switch (type) {
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    break; 
 1830de8:	0001883a 	nop
 1830dec:	00000106 	br	1830df4 <icmp_input+0x564>
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
 1830df0:	0001883a 	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 1830df4:	e13ffe17 	ldw	r4,-8(fp)
 1830df8:	181a9040 	call	181a904 <pbuf_free>
  return;
 1830dfc:	00001e06 	br	1830e78 <icmp_input+0x5e8>
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
 1830e00:	0001883a 	nop
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  return;
lenerr:
  pbuf_free(p);
 1830e04:	e13ffe17 	ldw	r4,-8(fp)
 1830e08:	181a9040 	call	181a904 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 1830e0c:	008061f4 	movhi	r2,391
 1830e10:	10a77104 	addi	r2,r2,-25148
 1830e14:	10803517 	ldw	r2,212(r2)
 1830e18:	10c00044 	addi	r3,r2,1
 1830e1c:	008061f4 	movhi	r2,391
 1830e20:	10a77104 	addi	r2,r2,-25148
 1830e24:	10c03515 	stw	r3,212(r2)
  snmp_inc_icmpinerrors();
  return;
 1830e28:	00001306 	br	1830e78 <icmp_input+0x5e8>
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
 1830e2c:	0001883a 	nop
 1830e30:	00000706 	br	1830e50 <icmp_input+0x5c0>
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
      if (r == NULL) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
 1830e34:	0001883a 	nop
 1830e38:	00000506 	br	1830e50 <icmp_input+0x5c0>
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
 1830e3c:	0001883a 	nop
 1830e40:	00000306 	br	1830e50 <icmp_input+0x5c0>
      }
      iphdr = (struct ip_hdr *)r->payload;
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 1830e44:	0001883a 	nop
 1830e48:	00000106 	br	1830e50 <icmp_input+0x5c0>
      p = r;
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 1830e4c:	0001883a 	nop
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
 1830e50:	e13ffe17 	ldw	r4,-8(fp)
 1830e54:	181a9040 	call	181a904 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 1830e58:	008061f4 	movhi	r2,391
 1830e5c:	10a77104 	addi	r2,r2,-25148
 1830e60:	10803a17 	ldw	r2,232(r2)
 1830e64:	10c00044 	addi	r3,r2,1
 1830e68:	008061f4 	movhi	r2,391
 1830e6c:	10a77104 	addi	r2,r2,-25148
 1830e70:	10c03a15 	stw	r3,232(r2)
  snmp_inc_icmpinerrors();
  return;
 1830e74:	0001883a 	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
 1830e78:	e037883a 	mov	sp,fp
 1830e7c:	dfc00117 	ldw	ra,4(sp)
 1830e80:	df000017 	ldw	fp,0(sp)
 1830e84:	dec00204 	addi	sp,sp,8
 1830e88:	f800283a 	ret

01830e8c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 1830e8c:	defffc04 	addi	sp,sp,-16
 1830e90:	dfc00315 	stw	ra,12(sp)
 1830e94:	df000215 	stw	fp,8(sp)
 1830e98:	df000204 	addi	fp,sp,8
 1830e9c:	e13ffe15 	stw	r4,-8(fp)
 1830ea0:	e17fff15 	stw	r5,-4(fp)
  icmp_send_response(p, ICMP_DUR, t);
 1830ea4:	e0bfff17 	ldw	r2,-4(fp)
 1830ea8:	10803fcc 	andi	r2,r2,255
 1830eac:	100d883a 	mov	r6,r2
 1830eb0:	014000c4 	movi	r5,3
 1830eb4:	e13ffe17 	ldw	r4,-8(fp)
 1830eb8:	1830f1c0 	call	1830f1c <icmp_send_response>
}
 1830ebc:	0001883a 	nop
 1830ec0:	e037883a 	mov	sp,fp
 1830ec4:	dfc00117 	ldw	ra,4(sp)
 1830ec8:	df000017 	ldw	fp,0(sp)
 1830ecc:	dec00204 	addi	sp,sp,8
 1830ed0:	f800283a 	ret

01830ed4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 1830ed4:	defffc04 	addi	sp,sp,-16
 1830ed8:	dfc00315 	stw	ra,12(sp)
 1830edc:	df000215 	stw	fp,8(sp)
 1830ee0:	df000204 	addi	fp,sp,8
 1830ee4:	e13ffe15 	stw	r4,-8(fp)
 1830ee8:	e17fff15 	stw	r5,-4(fp)
  icmp_send_response(p, ICMP_TE, t);
 1830eec:	e0bfff17 	ldw	r2,-4(fp)
 1830ef0:	10803fcc 	andi	r2,r2,255
 1830ef4:	100d883a 	mov	r6,r2
 1830ef8:	014002c4 	movi	r5,11
 1830efc:	e13ffe17 	ldw	r4,-8(fp)
 1830f00:	1830f1c0 	call	1830f1c <icmp_send_response>
}
 1830f04:	0001883a 	nop
 1830f08:	e037883a 	mov	sp,fp
 1830f0c:	dfc00117 	ldw	ra,4(sp)
 1830f10:	df000017 	ldw	fp,0(sp)
 1830f14:	dec00204 	addi	sp,sp,8
 1830f18:	f800283a 	ret

01830f1c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 1830f1c:	defff504 	addi	sp,sp,-44
 1830f20:	dfc00a15 	stw	ra,40(sp)
 1830f24:	df000915 	stw	fp,36(sp)
 1830f28:	df000904 	addi	fp,sp,36
 1830f2c:	e13ffd15 	stw	r4,-12(fp)
 1830f30:	2807883a 	mov	r3,r5
 1830f34:	3005883a 	mov	r2,r6
 1830f38:	e0fffe05 	stb	r3,-8(fp)
 1830f3c:	e0bfff05 	stb	r2,-4(fp)
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 1830f40:	000d883a 	mov	r6,zero
 1830f44:	01400904 	movi	r5,36
 1830f48:	01000044 	movi	r4,1
 1830f4c:	181a1480 	call	181a148 <pbuf_alloc>
 1830f50:	e0bff915 	stw	r2,-28(fp)
                 PBUF_RAM);
  if (q == NULL) {
 1830f54:	e0bff917 	ldw	r2,-28(fp)
 1830f58:	10006226 	beq	r2,zero,18310e4 <icmp_send_response+0x1c8>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 1830f5c:	e0bffd17 	ldw	r2,-12(fp)
 1830f60:	10800117 	ldw	r2,4(r2)
 1830f64:	e0bffa15 	stw	r2,-24(fp)
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 1830f68:	e0bff917 	ldw	r2,-28(fp)
 1830f6c:	10800117 	ldw	r2,4(r2)
 1830f70:	e0bffb15 	stw	r2,-20(fp)
  icmphdr->type = type;
 1830f74:	e0bffb17 	ldw	r2,-20(fp)
 1830f78:	e0fffe03 	ldbu	r3,-8(fp)
 1830f7c:	10c00005 	stb	r3,0(r2)
  icmphdr->code = code;
 1830f80:	e0bffb17 	ldw	r2,-20(fp)
 1830f84:	e0ffff03 	ldbu	r3,-4(fp)
 1830f88:	10c00045 	stb	r3,1(r2)
  icmphdr->id = 0;
 1830f8c:	e0bffb17 	ldw	r2,-20(fp)
 1830f90:	10c00103 	ldbu	r3,4(r2)
 1830f94:	1806703a 	and	r3,r3,zero
 1830f98:	10c00105 	stb	r3,4(r2)
 1830f9c:	10c00143 	ldbu	r3,5(r2)
 1830fa0:	1806703a 	and	r3,r3,zero
 1830fa4:	10c00145 	stb	r3,5(r2)
  icmphdr->seqno = 0;
 1830fa8:	e0bffb17 	ldw	r2,-20(fp)
 1830fac:	10c00183 	ldbu	r3,6(r2)
 1830fb0:	1806703a 	and	r3,r3,zero
 1830fb4:	10c00185 	stb	r3,6(r2)
 1830fb8:	10c001c3 	ldbu	r3,7(r2)
 1830fbc:	1806703a 	and	r3,r3,zero
 1830fc0:	10c001c5 	stb	r3,7(r2)

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 1830fc4:	e0bff917 	ldw	r2,-28(fp)
 1830fc8:	10800117 	ldw	r2,4(r2)
 1830fcc:	10c00204 	addi	r3,r2,8
 1830fd0:	e0bffd17 	ldw	r2,-12(fp)
 1830fd4:	10800117 	ldw	r2,4(r2)
 1830fd8:	01800704 	movi	r6,28
 1830fdc:	100b883a 	mov	r5,r2
 1830fe0:	1809883a 	mov	r4,r3
 1830fe4:	180604c0 	call	180604c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
 1830fe8:	e0bffb17 	ldw	r2,-20(fp)
 1830fec:	10c00083 	ldbu	r3,2(r2)
 1830ff0:	1806703a 	and	r3,r3,zero
 1830ff4:	10c00085 	stb	r3,2(r2)
 1830ff8:	10c000c3 	ldbu	r3,3(r2)
 1830ffc:	1806703a 	and	r3,r3,zero
 1831000:	10c000c5 	stb	r3,3(r2)
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 1831004:	e0bff917 	ldw	r2,-28(fp)
 1831008:	1080028b 	ldhu	r2,10(r2)
 183100c:	10bfffcc 	andi	r2,r2,65535
 1831010:	100b883a 	mov	r5,r2
 1831014:	e13ffb17 	ldw	r4,-20(fp)
 1831018:	18317680 	call	1831768 <inet_chksum>
 183101c:	100d883a 	mov	r6,r2
 1831020:	e0bffb17 	ldw	r2,-20(fp)
 1831024:	30ffffcc 	andi	r3,r6,65535
 1831028:	19403fcc 	andi	r5,r3,255
 183102c:	10c00083 	ldbu	r3,2(r2)
 1831030:	1806703a 	and	r3,r3,zero
 1831034:	1809883a 	mov	r4,r3
 1831038:	2807883a 	mov	r3,r5
 183103c:	20c6b03a 	or	r3,r4,r3
 1831040:	10c00085 	stb	r3,2(r2)
 1831044:	30ffffcc 	andi	r3,r6,65535
 1831048:	1806d23a 	srli	r3,r3,8
 183104c:	197fffcc 	andi	r5,r3,65535
 1831050:	10c000c3 	ldbu	r3,3(r2)
 1831054:	1806703a 	and	r3,r3,zero
 1831058:	1809883a 	mov	r4,r3
 183105c:	2807883a 	mov	r3,r5
 1831060:	20c6b03a 	or	r3,r4,r3
 1831064:	10c000c5 	stb	r3,3(r2)
  ICMP_STATS_INC(icmp.xmit);
 1831068:	008061f4 	movhi	r2,391
 183106c:	10a77104 	addi	r2,r2,-25148
 1831070:	10803017 	ldw	r2,192(r2)
 1831074:	10c00044 	addi	r3,r2,1
 1831078:	008061f4 	movhi	r2,391
 183107c:	10a77104 	addi	r2,r2,-25148
 1831080:	10c03015 	stw	r3,192(r2)
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
 1831084:	e0bffa17 	ldw	r2,-24(fp)
 1831088:	10c00303 	ldbu	r3,12(r2)
 183108c:	11000343 	ldbu	r4,13(r2)
 1831090:	2008923a 	slli	r4,r4,8
 1831094:	20c6b03a 	or	r3,r4,r3
 1831098:	11000383 	ldbu	r4,14(r2)
 183109c:	2008943a 	slli	r4,r4,16
 18310a0:	20c6b03a 	or	r3,r4,r3
 18310a4:	108003c3 	ldbu	r2,15(r2)
 18310a8:	1004963a 	slli	r2,r2,24
 18310ac:	10c4b03a 	or	r2,r2,r3
 18310b0:	e0bffc15 	stw	r2,-16(fp)
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
 18310b4:	e0fffc04 	addi	r3,fp,-16
 18310b8:	00800044 	movi	r2,1
 18310bc:	d8800115 	stw	r2,4(sp)
 18310c0:	d8000015 	stw	zero,0(sp)
 18310c4:	01c01004 	movi	r7,64
 18310c8:	180d883a 	mov	r6,r3
 18310cc:	000b883a 	mov	r5,zero
 18310d0:	e13ff917 	ldw	r4,-28(fp)
 18310d4:	18325880 	call	1832588 <ip_output>
  pbuf_free(q);
 18310d8:	e13ff917 	ldw	r4,-28(fp)
 18310dc:	181a9040 	call	181a904 <pbuf_free>
 18310e0:	00000106 	br	18310e8 <icmp_send_response+0x1cc>
  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
                 PBUF_RAM);
  if (q == NULL) {
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    return;
 18310e4:	0001883a 	nop
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  pbuf_free(q);
}
 18310e8:	e037883a 	mov	sp,fp
 18310ec:	dfc00117 	ldw	ra,4(sp)
 18310f0:	df000017 	ldw	fp,0(sp)
 18310f4:	dec00204 	addi	sp,sp,8
 18310f8:	f800283a 	ret

018310fc <lwip_standard_chksum>:
 * by Curt McDowell, Broadcom Corp. December 8th, 2005
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
 18310fc:	defff604 	addi	sp,sp,-40
 1831100:	df000915 	stw	fp,36(sp)
 1831104:	df000904 	addi	fp,sp,36
 1831108:	e13ffe15 	stw	r4,-8(fp)
 183110c:	e17fff15 	stw	r5,-4(fp)
  u8_t *pb = (u8_t *)dataptr;
 1831110:	e0bffe17 	ldw	r2,-8(fp)
 1831114:	e0bff715 	stw	r2,-36(fp)
  u16_t *ps, t = 0;
 1831118:	e03ffd0d 	sth	zero,-12(fp)
  u32_t *pl;
  u32_t sum = 0, tmp;
 183111c:	e03ffa15 	stw	zero,-24(fp)
  /* starts at odd byte address? */
  int odd = ((mem_ptr_t)pb & 1);
 1831120:	e0bff717 	ldw	r2,-36(fp)
 1831124:	1080004c 	andi	r2,r2,1
 1831128:	e0bffc15 	stw	r2,-16(fp)

  if (odd && len > 0) {
 183112c:	e0bffc17 	ldw	r2,-16(fp)
 1831130:	10000c26 	beq	r2,zero,1831164 <lwip_standard_chksum+0x68>
 1831134:	e0bfff17 	ldw	r2,-4(fp)
 1831138:	00800a0e 	bge	zero,r2,1831164 <lwip_standard_chksum+0x68>
    ((u8_t *)&t)[1] = *pb++;
 183113c:	e0bffd04 	addi	r2,fp,-12
 1831140:	10800044 	addi	r2,r2,1
 1831144:	e0fff717 	ldw	r3,-36(fp)
 1831148:	19000044 	addi	r4,r3,1
 183114c:	e13ff715 	stw	r4,-36(fp)
 1831150:	18c00003 	ldbu	r3,0(r3)
 1831154:	10c00005 	stb	r3,0(r2)
    len--;
 1831158:	e0bfff17 	ldw	r2,-4(fp)
 183115c:	10bfffc4 	addi	r2,r2,-1
 1831160:	e0bfff15 	stw	r2,-4(fp)
  }

  ps = (u16_t *)pb;
 1831164:	e0bff717 	ldw	r2,-36(fp)
 1831168:	e0bff815 	stw	r2,-32(fp)

  if (((mem_ptr_t)ps & 3) && len > 1) {
 183116c:	e0bff817 	ldw	r2,-32(fp)
 1831170:	108000cc 	andi	r2,r2,3
 1831174:	10000e26 	beq	r2,zero,18311b0 <lwip_standard_chksum+0xb4>
 1831178:	e0bfff17 	ldw	r2,-4(fp)
 183117c:	10800090 	cmplti	r2,r2,2
 1831180:	10000b1e 	bne	r2,zero,18311b0 <lwip_standard_chksum+0xb4>
    sum += *ps++;
 1831184:	e0bff817 	ldw	r2,-32(fp)
 1831188:	10c00084 	addi	r3,r2,2
 183118c:	e0fff815 	stw	r3,-32(fp)
 1831190:	1080000b 	ldhu	r2,0(r2)
 1831194:	10bfffcc 	andi	r2,r2,65535
 1831198:	e0fffa17 	ldw	r3,-24(fp)
 183119c:	1885883a 	add	r2,r3,r2
 18311a0:	e0bffa15 	stw	r2,-24(fp)
    len -= 2;
 18311a4:	e0bfff17 	ldw	r2,-4(fp)
 18311a8:	10bfff84 	addi	r2,r2,-2
 18311ac:	e0bfff15 	stw	r2,-4(fp)
  }

  pl = (u32_t *)ps;
 18311b0:	e0bff817 	ldw	r2,-32(fp)
 18311b4:	e0bff915 	stw	r2,-28(fp)

  while (len > 7)  {
 18311b8:	00001d06 	br	1831230 <lwip_standard_chksum+0x134>
    tmp = sum + *pl++;          /* ping */
 18311bc:	e0bff917 	ldw	r2,-28(fp)
 18311c0:	10c00104 	addi	r3,r2,4
 18311c4:	e0fff915 	stw	r3,-28(fp)
 18311c8:	10c00017 	ldw	r3,0(r2)
 18311cc:	e0bffa17 	ldw	r2,-24(fp)
 18311d0:	1885883a 	add	r2,r3,r2
 18311d4:	e0bffb15 	stw	r2,-20(fp)
    if (tmp < sum) {
 18311d8:	e0fffb17 	ldw	r3,-20(fp)
 18311dc:	e0bffa17 	ldw	r2,-24(fp)
 18311e0:	1880032e 	bgeu	r3,r2,18311f0 <lwip_standard_chksum+0xf4>
      tmp++;                    /* add back carry */
 18311e4:	e0bffb17 	ldw	r2,-20(fp)
 18311e8:	10800044 	addi	r2,r2,1
 18311ec:	e0bffb15 	stw	r2,-20(fp)
    }

    sum = tmp + *pl++;          /* pong */
 18311f0:	e0bff917 	ldw	r2,-28(fp)
 18311f4:	10c00104 	addi	r3,r2,4
 18311f8:	e0fff915 	stw	r3,-28(fp)
 18311fc:	10c00017 	ldw	r3,0(r2)
 1831200:	e0bffb17 	ldw	r2,-20(fp)
 1831204:	1885883a 	add	r2,r3,r2
 1831208:	e0bffa15 	stw	r2,-24(fp)
    if (sum < tmp) {
 183120c:	e0fffa17 	ldw	r3,-24(fp)
 1831210:	e0bffb17 	ldw	r2,-20(fp)
 1831214:	1880032e 	bgeu	r3,r2,1831224 <lwip_standard_chksum+0x128>
      sum++;                    /* add back carry */
 1831218:	e0bffa17 	ldw	r2,-24(fp)
 183121c:	10800044 	addi	r2,r2,1
 1831220:	e0bffa15 	stw	r2,-24(fp)
    }

    len -= 8;
 1831224:	e0bfff17 	ldw	r2,-4(fp)
 1831228:	10bffe04 	addi	r2,r2,-8
 183122c:	e0bfff15 	stw	r2,-4(fp)
    len -= 2;
  }

  pl = (u32_t *)ps;

  while (len > 7)  {
 1831230:	e0bfff17 	ldw	r2,-4(fp)
 1831234:	10800208 	cmpgei	r2,r2,8
 1831238:	103fe01e 	bne	r2,zero,18311bc <__alt_mem_mem_0+0xff8111bc>

    len -= 8;
  }

  /* make room in upper bits */
  sum = FOLD_U32T(sum);
 183123c:	e0bffa17 	ldw	r2,-24(fp)
 1831240:	1006d43a 	srli	r3,r2,16
 1831244:	e0bffa17 	ldw	r2,-24(fp)
 1831248:	10bfffcc 	andi	r2,r2,65535
 183124c:	1885883a 	add	r2,r3,r2
 1831250:	e0bffa15 	stw	r2,-24(fp)

  ps = (u16_t *)pl;
 1831254:	e0bff917 	ldw	r2,-28(fp)
 1831258:	e0bff815 	stw	r2,-32(fp)

  /* 16-bit aligned word remaining? */
  while (len > 1) {
 183125c:	00000b06 	br	183128c <lwip_standard_chksum+0x190>
    sum += *ps++;
 1831260:	e0bff817 	ldw	r2,-32(fp)
 1831264:	10c00084 	addi	r3,r2,2
 1831268:	e0fff815 	stw	r3,-32(fp)
 183126c:	1080000b 	ldhu	r2,0(r2)
 1831270:	10bfffcc 	andi	r2,r2,65535
 1831274:	e0fffa17 	ldw	r3,-24(fp)
 1831278:	1885883a 	add	r2,r3,r2
 183127c:	e0bffa15 	stw	r2,-24(fp)
    len -= 2;
 1831280:	e0bfff17 	ldw	r2,-4(fp)
 1831284:	10bfff84 	addi	r2,r2,-2
 1831288:	e0bfff15 	stw	r2,-4(fp)
  sum = FOLD_U32T(sum);

  ps = (u16_t *)pl;

  /* 16-bit aligned word remaining? */
  while (len > 1) {
 183128c:	e0bfff17 	ldw	r2,-4(fp)
 1831290:	10800088 	cmpgei	r2,r2,2
 1831294:	103ff21e 	bne	r2,zero,1831260 <__alt_mem_mem_0+0xff811260>
    sum += *ps++;
    len -= 2;
  }

  /* dangling tail byte remaining? */
  if (len > 0) {                /* include odd byte */
 1831298:	e0bfff17 	ldw	r2,-4(fp)
 183129c:	0080040e 	bge	zero,r2,18312b0 <lwip_standard_chksum+0x1b4>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
 18312a0:	e0bffd04 	addi	r2,fp,-12
 18312a4:	e0fff817 	ldw	r3,-32(fp)
 18312a8:	18c00003 	ldbu	r3,0(r3)
 18312ac:	10c00005 	stb	r3,0(r2)
  }

  sum += t;                     /* add end bytes */
 18312b0:	e0bffd0b 	ldhu	r2,-12(fp)
 18312b4:	10bfffcc 	andi	r2,r2,65535
 18312b8:	e0fffa17 	ldw	r3,-24(fp)
 18312bc:	1885883a 	add	r2,r3,r2
 18312c0:	e0bffa15 	stw	r2,-24(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
 18312c4:	e0bffa17 	ldw	r2,-24(fp)
 18312c8:	1006d43a 	srli	r3,r2,16
 18312cc:	e0bffa17 	ldw	r2,-24(fp)
 18312d0:	10bfffcc 	andi	r2,r2,65535
 18312d4:	1885883a 	add	r2,r3,r2
 18312d8:	e0bffa15 	stw	r2,-24(fp)
  sum = FOLD_U32T(sum);
 18312dc:	e0bffa17 	ldw	r2,-24(fp)
 18312e0:	1006d43a 	srli	r3,r2,16
 18312e4:	e0bffa17 	ldw	r2,-24(fp)
 18312e8:	10bfffcc 	andi	r2,r2,65535
 18312ec:	1885883a 	add	r2,r3,r2
 18312f0:	e0bffa15 	stw	r2,-24(fp)

  if (odd) {
 18312f4:	e0bffc17 	ldw	r2,-16(fp)
 18312f8:	10000826 	beq	r2,zero,183131c <lwip_standard_chksum+0x220>
    sum = SWAP_BYTES_IN_WORD(sum);
 18312fc:	e0bffa17 	ldw	r2,-24(fp)
 1831300:	10bfc00c 	andi	r2,r2,65280
 1831304:	1006d23a 	srli	r3,r2,8
 1831308:	e0bffa17 	ldw	r2,-24(fp)
 183130c:	1004923a 	slli	r2,r2,8
 1831310:	10bfffcc 	andi	r2,r2,65535
 1831314:	1884b03a 	or	r2,r3,r2
 1831318:	e0bffa15 	stw	r2,-24(fp)
  }

  return (u16_t)sum;
 183131c:	e0bffa17 	ldw	r2,-24(fp)
}
 1831320:	e037883a 	mov	sp,fp
 1831324:	df000017 	ldw	fp,0(sp)
 1831328:	dec00104 	addi	sp,sp,4
 183132c:	f800283a 	ret

01831330 <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
 1831330:	defff504 	addi	sp,sp,-44
 1831334:	dfc00a15 	stw	ra,40(sp)
 1831338:	df000915 	stw	fp,36(sp)
 183133c:	df000904 	addi	fp,sp,36
 1831340:	e13ffb15 	stw	r4,-20(fp)
 1831344:	e17ffc15 	stw	r5,-16(fp)
 1831348:	e1bffd15 	stw	r6,-12(fp)
 183134c:	3807883a 	mov	r3,r7
 1831350:	e0800217 	ldw	r2,8(fp)
 1831354:	e0fffe05 	stb	r3,-8(fp)
 1831358:	e0bfff0d 	sth	r2,-4(fp)
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 183135c:	e03ff715 	stw	zero,-36(fp)
  swapped = 0;
 1831360:	e03ff905 	stb	zero,-28(fp)
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
 1831364:	e0bffb17 	ldw	r2,-20(fp)
 1831368:	e0bff815 	stw	r2,-32(fp)
 183136c:	00002606 	br	1831408 <inet_chksum_pseudo+0xd8>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 1831370:	e0bff817 	ldw	r2,-32(fp)
 1831374:	10c00117 	ldw	r3,4(r2)
 1831378:	e0bff817 	ldw	r2,-32(fp)
 183137c:	1080028b 	ldhu	r2,10(r2)
 1831380:	10bfffcc 	andi	r2,r2,65535
 1831384:	100b883a 	mov	r5,r2
 1831388:	1809883a 	mov	r4,r3
 183138c:	18310fc0 	call	18310fc <lwip_standard_chksum>
 1831390:	10bfffcc 	andi	r2,r2,65535
 1831394:	e0fff717 	ldw	r3,-36(fp)
 1831398:	1885883a 	add	r2,r3,r2
 183139c:	e0bff715 	stw	r2,-36(fp)
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 18313a0:	e0bff717 	ldw	r2,-36(fp)
 18313a4:	1006d43a 	srli	r3,r2,16
 18313a8:	e0bff717 	ldw	r2,-36(fp)
 18313ac:	10bfffcc 	andi	r2,r2,65535
 18313b0:	1885883a 	add	r2,r3,r2
 18313b4:	e0bff715 	stw	r2,-36(fp)
    if (q->len % 2 != 0) {
 18313b8:	e0bff817 	ldw	r2,-32(fp)
 18313bc:	1080028b 	ldhu	r2,10(r2)
 18313c0:	1080004c 	andi	r2,r2,1
 18313c4:	10bfffcc 	andi	r2,r2,65535
 18313c8:	10000c26 	beq	r2,zero,18313fc <inet_chksum_pseudo+0xcc>
      swapped = 1 - swapped;
 18313cc:	e0bff903 	ldbu	r2,-28(fp)
 18313d0:	00c00044 	movi	r3,1
 18313d4:	1885c83a 	sub	r2,r3,r2
 18313d8:	e0bff905 	stb	r2,-28(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
 18313dc:	e0bff717 	ldw	r2,-36(fp)
 18313e0:	10bfc00c 	andi	r2,r2,65280
 18313e4:	1006d23a 	srli	r3,r2,8
 18313e8:	e0bff717 	ldw	r2,-36(fp)
 18313ec:	1004923a 	slli	r2,r2,8
 18313f0:	10bfffcc 	andi	r2,r2,65535
 18313f4:	1884b03a 	or	r2,r3,r2
 18313f8:	e0bff715 	stw	r2,-36(fp)
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
 18313fc:	e0bff817 	ldw	r2,-32(fp)
 1831400:	10800017 	ldw	r2,0(r2)
 1831404:	e0bff815 	stw	r2,-32(fp)
 1831408:	e0bff817 	ldw	r2,-32(fp)
 183140c:	103fd81e 	bne	r2,zero,1831370 <__alt_mem_mem_0+0xff811370>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 1831410:	e0bff903 	ldbu	r2,-28(fp)
 1831414:	10000826 	beq	r2,zero,1831438 <inet_chksum_pseudo+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
 1831418:	e0bff717 	ldw	r2,-36(fp)
 183141c:	10bfc00c 	andi	r2,r2,65280
 1831420:	1006d23a 	srli	r3,r2,8
 1831424:	e0bff717 	ldw	r2,-36(fp)
 1831428:	1004923a 	slli	r2,r2,8
 183142c:	10bfffcc 	andi	r2,r2,65535
 1831430:	1884b03a 	or	r2,r3,r2
 1831434:	e0bff715 	stw	r2,-36(fp)
  }
  addr = ip4_addr_get_u32(src);
 1831438:	e0bffc17 	ldw	r2,-16(fp)
 183143c:	10800017 	ldw	r2,0(r2)
 1831440:	e0bffa15 	stw	r2,-24(fp)
  acc += (addr & 0xffffUL);
 1831444:	e0bffa17 	ldw	r2,-24(fp)
 1831448:	10bfffcc 	andi	r2,r2,65535
 183144c:	e0fff717 	ldw	r3,-36(fp)
 1831450:	1885883a 	add	r2,r3,r2
 1831454:	e0bff715 	stw	r2,-36(fp)
  acc += ((addr >> 16) & 0xffffUL);
 1831458:	e0bffa17 	ldw	r2,-24(fp)
 183145c:	1004d43a 	srli	r2,r2,16
 1831460:	e0fff717 	ldw	r3,-36(fp)
 1831464:	1885883a 	add	r2,r3,r2
 1831468:	e0bff715 	stw	r2,-36(fp)
  addr = ip4_addr_get_u32(dest);
 183146c:	e0bffd17 	ldw	r2,-12(fp)
 1831470:	10800017 	ldw	r2,0(r2)
 1831474:	e0bffa15 	stw	r2,-24(fp)
  acc += (addr & 0xffffUL);
 1831478:	e0bffa17 	ldw	r2,-24(fp)
 183147c:	10bfffcc 	andi	r2,r2,65535
 1831480:	e0fff717 	ldw	r3,-36(fp)
 1831484:	1885883a 	add	r2,r3,r2
 1831488:	e0bff715 	stw	r2,-36(fp)
  acc += ((addr >> 16) & 0xffffUL);
 183148c:	e0bffa17 	ldw	r2,-24(fp)
 1831490:	1004d43a 	srli	r2,r2,16
 1831494:	e0fff717 	ldw	r3,-36(fp)
 1831498:	1885883a 	add	r2,r3,r2
 183149c:	e0bff715 	stw	r2,-36(fp)
  acc += (u32_t)htons((u16_t)proto);
 18314a0:	e0bffe03 	ldbu	r2,-8(fp)
 18314a4:	1004923a 	slli	r2,r2,8
 18314a8:	1007883a 	mov	r3,r2
 18314ac:	e0bff717 	ldw	r2,-36(fp)
 18314b0:	10c5883a 	add	r2,r2,r3
 18314b4:	e0bff715 	stw	r2,-36(fp)
  acc += (u32_t)htons(proto_len);
 18314b8:	e0bfff0b 	ldhu	r2,-4(fp)
 18314bc:	1004d23a 	srli	r2,r2,8
 18314c0:	10ffffcc 	andi	r3,r2,65535
 18314c4:	e0bfff0b 	ldhu	r2,-4(fp)
 18314c8:	1004923a 	slli	r2,r2,8
 18314cc:	10bfffcc 	andi	r2,r2,65535
 18314d0:	1884b03a 	or	r2,r3,r2
 18314d4:	1007883a 	mov	r3,r2
 18314d8:	e0bff717 	ldw	r2,-36(fp)
 18314dc:	10c5883a 	add	r2,r2,r3
 18314e0:	e0bff715 	stw	r2,-36(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
 18314e4:	e0bff717 	ldw	r2,-36(fp)
 18314e8:	1006d43a 	srli	r3,r2,16
 18314ec:	e0bff717 	ldw	r2,-36(fp)
 18314f0:	10bfffcc 	andi	r2,r2,65535
 18314f4:	1885883a 	add	r2,r3,r2
 18314f8:	e0bff715 	stw	r2,-36(fp)
  acc = FOLD_U32T(acc);
 18314fc:	e0bff717 	ldw	r2,-36(fp)
 1831500:	1006d43a 	srli	r3,r2,16
 1831504:	e0bff717 	ldw	r2,-36(fp)
 1831508:	10bfffcc 	andi	r2,r2,65535
 183150c:	1885883a 	add	r2,r3,r2
 1831510:	e0bff715 	stw	r2,-36(fp)
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 1831514:	e0bff717 	ldw	r2,-36(fp)
 1831518:	0084303a 	nor	r2,zero,r2
}
 183151c:	e037883a 	mov	sp,fp
 1831520:	dfc00117 	ldw	ra,4(sp)
 1831524:	df000017 	ldw	fp,0(sp)
 1831528:	dec00204 	addi	sp,sp,8
 183152c:	f800283a 	ret

01831530 <inet_chksum_pseudo_partial>:
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len, u16_t chksum_len)
{
 1831530:	defff404 	addi	sp,sp,-48
 1831534:	dfc00b15 	stw	ra,44(sp)
 1831538:	df000a15 	stw	fp,40(sp)
 183153c:	df000a04 	addi	fp,sp,40
 1831540:	e13ffa15 	stw	r4,-24(fp)
 1831544:	e17ffb15 	stw	r5,-20(fp)
 1831548:	e1bffc15 	stw	r6,-16(fp)
 183154c:	3809883a 	mov	r4,r7
 1831550:	e0c00217 	ldw	r3,8(fp)
 1831554:	e0800317 	ldw	r2,12(fp)
 1831558:	e13ffd05 	stb	r4,-12(fp)
 183155c:	e0fffe0d 	sth	r3,-8(fp)
 1831560:	e0bfff0d 	sth	r2,-4(fp)
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;
  u16_t chklen;

  acc = 0;
 1831564:	e03ff615 	stw	zero,-40(fp)
  swapped = 0;
 1831568:	e03ff805 	stb	zero,-32(fp)
  /* iterate through all pbuf in chain */
  for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
 183156c:	e0bffa17 	ldw	r2,-24(fp)
 1831570:	e0bff715 	stw	r2,-36(fp)
 1831574:	00003006 	br	1831638 <inet_chksum_pseudo_partial+0x108>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
 1831578:	e0bff717 	ldw	r2,-36(fp)
 183157c:	1080028b 	ldhu	r2,10(r2)
 1831580:	e0bff88d 	sth	r2,-30(fp)
    if (chklen > chksum_len) {
 1831584:	e0bff88b 	ldhu	r2,-30(fp)
 1831588:	e0ffff0b 	ldhu	r3,-4(fp)
 183158c:	1880022e 	bgeu	r3,r2,1831598 <inet_chksum_pseudo_partial+0x68>
      chklen = chksum_len;
 1831590:	e0bfff0b 	ldhu	r2,-4(fp)
 1831594:	e0bff88d 	sth	r2,-30(fp)
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
 1831598:	e0bff717 	ldw	r2,-36(fp)
 183159c:	10800117 	ldw	r2,4(r2)
 18315a0:	e0fff88b 	ldhu	r3,-30(fp)
 18315a4:	180b883a 	mov	r5,r3
 18315a8:	1009883a 	mov	r4,r2
 18315ac:	18310fc0 	call	18310fc <lwip_standard_chksum>
 18315b0:	10bfffcc 	andi	r2,r2,65535
 18315b4:	e0fff617 	ldw	r3,-40(fp)
 18315b8:	1885883a 	add	r2,r3,r2
 18315bc:	e0bff615 	stw	r2,-40(fp)
    chksum_len -= chklen;
 18315c0:	e0ffff0b 	ldhu	r3,-4(fp)
 18315c4:	e0bff88b 	ldhu	r2,-30(fp)
 18315c8:	1885c83a 	sub	r2,r3,r2
 18315cc:	e0bfff0d 	sth	r2,-4(fp)
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
 18315d0:	e0bff617 	ldw	r2,-40(fp)
 18315d4:	1006d43a 	srli	r3,r2,16
 18315d8:	e0bff617 	ldw	r2,-40(fp)
 18315dc:	10bfffcc 	andi	r2,r2,65535
 18315e0:	1885883a 	add	r2,r3,r2
 18315e4:	e0bff615 	stw	r2,-40(fp)
    if (q->len % 2 != 0) {
 18315e8:	e0bff717 	ldw	r2,-36(fp)
 18315ec:	1080028b 	ldhu	r2,10(r2)
 18315f0:	1080004c 	andi	r2,r2,1
 18315f4:	10bfffcc 	andi	r2,r2,65535
 18315f8:	10000c26 	beq	r2,zero,183162c <inet_chksum_pseudo_partial+0xfc>
      swapped = 1 - swapped;
 18315fc:	e0bff803 	ldbu	r2,-32(fp)
 1831600:	00c00044 	movi	r3,1
 1831604:	1885c83a 	sub	r2,r3,r2
 1831608:	e0bff805 	stb	r2,-32(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
 183160c:	e0bff617 	ldw	r2,-40(fp)
 1831610:	10bfc00c 	andi	r2,r2,65280
 1831614:	1006d23a 	srli	r3,r2,8
 1831618:	e0bff617 	ldw	r2,-40(fp)
 183161c:	1004923a 	slli	r2,r2,8
 1831620:	10bfffcc 	andi	r2,r2,65535
 1831624:	1884b03a 	or	r2,r3,r2
 1831628:	e0bff615 	stw	r2,-40(fp)
  u16_t chklen;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
 183162c:	e0bff717 	ldw	r2,-36(fp)
 1831630:	10800017 	ldw	r2,0(r2)
 1831634:	e0bff715 	stw	r2,-36(fp)
 1831638:	e0bff717 	ldw	r2,-36(fp)
 183163c:	10000226 	beq	r2,zero,1831648 <inet_chksum_pseudo_partial+0x118>
 1831640:	e0bfff0b 	ldhu	r2,-4(fp)
 1831644:	103fcc1e 	bne	r2,zero,1831578 <__alt_mem_mem_0+0xff811578>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 1831648:	e0bff803 	ldbu	r2,-32(fp)
 183164c:	10000826 	beq	r2,zero,1831670 <inet_chksum_pseudo_partial+0x140>
    acc = SWAP_BYTES_IN_WORD(acc);
 1831650:	e0bff617 	ldw	r2,-40(fp)
 1831654:	10bfc00c 	andi	r2,r2,65280
 1831658:	1006d23a 	srli	r3,r2,8
 183165c:	e0bff617 	ldw	r2,-40(fp)
 1831660:	1004923a 	slli	r2,r2,8
 1831664:	10bfffcc 	andi	r2,r2,65535
 1831668:	1884b03a 	or	r2,r3,r2
 183166c:	e0bff615 	stw	r2,-40(fp)
  }
  addr = ip4_addr_get_u32(src);
 1831670:	e0bffb17 	ldw	r2,-20(fp)
 1831674:	10800017 	ldw	r2,0(r2)
 1831678:	e0bff915 	stw	r2,-28(fp)
  acc += (addr & 0xffffUL);
 183167c:	e0bff917 	ldw	r2,-28(fp)
 1831680:	10bfffcc 	andi	r2,r2,65535
 1831684:	e0fff617 	ldw	r3,-40(fp)
 1831688:	1885883a 	add	r2,r3,r2
 183168c:	e0bff615 	stw	r2,-40(fp)
  acc += ((addr >> 16) & 0xffffUL);
 1831690:	e0bff917 	ldw	r2,-28(fp)
 1831694:	1004d43a 	srli	r2,r2,16
 1831698:	e0fff617 	ldw	r3,-40(fp)
 183169c:	1885883a 	add	r2,r3,r2
 18316a0:	e0bff615 	stw	r2,-40(fp)
  addr = ip4_addr_get_u32(dest);
 18316a4:	e0bffc17 	ldw	r2,-16(fp)
 18316a8:	10800017 	ldw	r2,0(r2)
 18316ac:	e0bff915 	stw	r2,-28(fp)
  acc += (addr & 0xffffUL);
 18316b0:	e0bff917 	ldw	r2,-28(fp)
 18316b4:	10bfffcc 	andi	r2,r2,65535
 18316b8:	e0fff617 	ldw	r3,-40(fp)
 18316bc:	1885883a 	add	r2,r3,r2
 18316c0:	e0bff615 	stw	r2,-40(fp)
  acc += ((addr >> 16) & 0xffffUL);
 18316c4:	e0bff917 	ldw	r2,-28(fp)
 18316c8:	1004d43a 	srli	r2,r2,16
 18316cc:	e0fff617 	ldw	r3,-40(fp)
 18316d0:	1885883a 	add	r2,r3,r2
 18316d4:	e0bff615 	stw	r2,-40(fp)
  acc += (u32_t)htons((u16_t)proto);
 18316d8:	e0bffd03 	ldbu	r2,-12(fp)
 18316dc:	1004923a 	slli	r2,r2,8
 18316e0:	1007883a 	mov	r3,r2
 18316e4:	e0bff617 	ldw	r2,-40(fp)
 18316e8:	10c5883a 	add	r2,r2,r3
 18316ec:	e0bff615 	stw	r2,-40(fp)
  acc += (u32_t)htons(proto_len);
 18316f0:	e0bffe0b 	ldhu	r2,-8(fp)
 18316f4:	1004d23a 	srli	r2,r2,8
 18316f8:	10ffffcc 	andi	r3,r2,65535
 18316fc:	e0bffe0b 	ldhu	r2,-8(fp)
 1831700:	1004923a 	slli	r2,r2,8
 1831704:	10bfffcc 	andi	r2,r2,65535
 1831708:	1884b03a 	or	r2,r3,r2
 183170c:	1007883a 	mov	r3,r2
 1831710:	e0bff617 	ldw	r2,-40(fp)
 1831714:	10c5883a 	add	r2,r2,r3
 1831718:	e0bff615 	stw	r2,-40(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
 183171c:	e0bff617 	ldw	r2,-40(fp)
 1831720:	1006d43a 	srli	r3,r2,16
 1831724:	e0bff617 	ldw	r2,-40(fp)
 1831728:	10bfffcc 	andi	r2,r2,65535
 183172c:	1885883a 	add	r2,r3,r2
 1831730:	e0bff615 	stw	r2,-40(fp)
  acc = FOLD_U32T(acc);
 1831734:	e0bff617 	ldw	r2,-40(fp)
 1831738:	1006d43a 	srli	r3,r2,16
 183173c:	e0bff617 	ldw	r2,-40(fp)
 1831740:	10bfffcc 	andi	r2,r2,65535
 1831744:	1885883a 	add	r2,r3,r2
 1831748:	e0bff615 	stw	r2,-40(fp)
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 183174c:	e0bff617 	ldw	r2,-40(fp)
 1831750:	0084303a 	nor	r2,zero,r2
}
 1831754:	e037883a 	mov	sp,fp
 1831758:	dfc00117 	ldw	ra,4(sp)
 183175c:	df000017 	ldw	fp,0(sp)
 1831760:	dec00204 	addi	sp,sp,8
 1831764:	f800283a 	ret

01831768 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
 1831768:	defffc04 	addi	sp,sp,-16
 183176c:	dfc00315 	stw	ra,12(sp)
 1831770:	df000215 	stw	fp,8(sp)
 1831774:	df000204 	addi	fp,sp,8
 1831778:	e13ffe15 	stw	r4,-8(fp)
 183177c:	2805883a 	mov	r2,r5
 1831780:	e0bfff0d 	sth	r2,-4(fp)
  return ~LWIP_CHKSUM(dataptr, len);
 1831784:	e0bfff0b 	ldhu	r2,-4(fp)
 1831788:	100b883a 	mov	r5,r2
 183178c:	e13ffe17 	ldw	r4,-8(fp)
 1831790:	18310fc0 	call	18310fc <lwip_standard_chksum>
 1831794:	0084303a 	nor	r2,zero,r2
}
 1831798:	e037883a 	mov	sp,fp
 183179c:	dfc00117 	ldw	ra,4(sp)
 18317a0:	df000017 	ldw	fp,0(sp)
 18317a4:	dec00204 	addi	sp,sp,8
 18317a8:	f800283a 	ret

018317ac <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 18317ac:	defffa04 	addi	sp,sp,-24
 18317b0:	dfc00515 	stw	ra,20(sp)
 18317b4:	df000415 	stw	fp,16(sp)
 18317b8:	df000404 	addi	fp,sp,16
 18317bc:	e13fff15 	stw	r4,-4(fp)
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 18317c0:	e03ffc15 	stw	zero,-16(fp)
  swapped = 0;
 18317c4:	e03ffe05 	stb	zero,-8(fp)
  for(q = p; q != NULL; q = q->next) {
 18317c8:	e0bfff17 	ldw	r2,-4(fp)
 18317cc:	e0bffd15 	stw	r2,-12(fp)
 18317d0:	00002606 	br	183186c <inet_chksum_pbuf+0xc0>
    acc += LWIP_CHKSUM(q->payload, q->len);
 18317d4:	e0bffd17 	ldw	r2,-12(fp)
 18317d8:	10c00117 	ldw	r3,4(r2)
 18317dc:	e0bffd17 	ldw	r2,-12(fp)
 18317e0:	1080028b 	ldhu	r2,10(r2)
 18317e4:	10bfffcc 	andi	r2,r2,65535
 18317e8:	100b883a 	mov	r5,r2
 18317ec:	1809883a 	mov	r4,r3
 18317f0:	18310fc0 	call	18310fc <lwip_standard_chksum>
 18317f4:	10bfffcc 	andi	r2,r2,65535
 18317f8:	e0fffc17 	ldw	r3,-16(fp)
 18317fc:	1885883a 	add	r2,r3,r2
 1831800:	e0bffc15 	stw	r2,-16(fp)
    acc = FOLD_U32T(acc);
 1831804:	e0bffc17 	ldw	r2,-16(fp)
 1831808:	1006d43a 	srli	r3,r2,16
 183180c:	e0bffc17 	ldw	r2,-16(fp)
 1831810:	10bfffcc 	andi	r2,r2,65535
 1831814:	1885883a 	add	r2,r3,r2
 1831818:	e0bffc15 	stw	r2,-16(fp)
    if (q->len % 2 != 0) {
 183181c:	e0bffd17 	ldw	r2,-12(fp)
 1831820:	1080028b 	ldhu	r2,10(r2)
 1831824:	1080004c 	andi	r2,r2,1
 1831828:	10bfffcc 	andi	r2,r2,65535
 183182c:	10000c26 	beq	r2,zero,1831860 <inet_chksum_pbuf+0xb4>
      swapped = 1 - swapped;
 1831830:	e0bffe03 	ldbu	r2,-8(fp)
 1831834:	00c00044 	movi	r3,1
 1831838:	1885c83a 	sub	r2,r3,r2
 183183c:	e0bffe05 	stb	r2,-8(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
 1831840:	e0bffc17 	ldw	r2,-16(fp)
 1831844:	10bfc00c 	andi	r2,r2,65280
 1831848:	1006d23a 	srli	r3,r2,8
 183184c:	e0bffc17 	ldw	r2,-16(fp)
 1831850:	1004923a 	slli	r2,r2,8
 1831854:	10bfffcc 	andi	r2,r2,65535
 1831858:	1884b03a 	or	r2,r3,r2
 183185c:	e0bffc15 	stw	r2,-16(fp)
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
 1831860:	e0bffd17 	ldw	r2,-12(fp)
 1831864:	10800017 	ldw	r2,0(r2)
 1831868:	e0bffd15 	stw	r2,-12(fp)
 183186c:	e0bffd17 	ldw	r2,-12(fp)
 1831870:	103fd81e 	bne	r2,zero,18317d4 <__alt_mem_mem_0+0xff8117d4>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 1831874:	e0bffe03 	ldbu	r2,-8(fp)
 1831878:	10000826 	beq	r2,zero,183189c <inet_chksum_pbuf+0xf0>
    acc = SWAP_BYTES_IN_WORD(acc);
 183187c:	e0bffc17 	ldw	r2,-16(fp)
 1831880:	10bfc00c 	andi	r2,r2,65280
 1831884:	1006d23a 	srli	r3,r2,8
 1831888:	e0bffc17 	ldw	r2,-16(fp)
 183188c:	1004923a 	slli	r2,r2,8
 1831890:	10bfffcc 	andi	r2,r2,65535
 1831894:	1884b03a 	or	r2,r3,r2
 1831898:	e0bffc15 	stw	r2,-16(fp)
  }
  return (u16_t)~(acc & 0xffffUL);
 183189c:	e0bffc17 	ldw	r2,-16(fp)
 18318a0:	0084303a 	nor	r2,zero,r2
}
 18318a4:	e037883a 	mov	sp,fp
 18318a8:	dfc00117 	ldw	ra,4(sp)
 18318ac:	df000017 	ldw	fp,0(sp)
 18318b0:	dec00204 	addi	sp,sp,8
 18318b4:	f800283a 	ret

018318b8 <lwip_chksum_copy>:
 * For architectures with big caches, data might still be in cache when
 * generating the checksum after copying.
 */
u16_t
lwip_chksum_copy(void *dst, const void *src, u16_t len)
{
 18318b8:	defffb04 	addi	sp,sp,-20
 18318bc:	dfc00415 	stw	ra,16(sp)
 18318c0:	df000315 	stw	fp,12(sp)
 18318c4:	df000304 	addi	fp,sp,12
 18318c8:	e13ffd15 	stw	r4,-12(fp)
 18318cc:	e17ffe15 	stw	r5,-8(fp)
 18318d0:	3005883a 	mov	r2,r6
 18318d4:	e0bfff0d 	sth	r2,-4(fp)
  MEMCPY(dst, src, len);
 18318d8:	e0bfff0b 	ldhu	r2,-4(fp)
 18318dc:	100d883a 	mov	r6,r2
 18318e0:	e17ffe17 	ldw	r5,-8(fp)
 18318e4:	e13ffd17 	ldw	r4,-12(fp)
 18318e8:	180604c0 	call	180604c <memcpy>
  return LWIP_CHKSUM(dst, len);
 18318ec:	e0bfff0b 	ldhu	r2,-4(fp)
 18318f0:	100b883a 	mov	r5,r2
 18318f4:	e13ffd17 	ldw	r4,-12(fp)
 18318f8:	18310fc0 	call	18310fc <lwip_standard_chksum>
}
 18318fc:	e037883a 	mov	sp,fp
 1831900:	dfc00117 	ldw	ra,4(sp)
 1831904:	df000017 	ldw	fp,0(sp)
 1831908:	dec00204 	addi	sp,sp,8
 183190c:	f800283a 	ret

01831910 <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *src, ip_addr_t *dest)
{
 1831910:	defffc04 	addi	sp,sp,-16
 1831914:	df000315 	stw	fp,12(sp)
 1831918:	df000304 	addi	fp,sp,12
 183191c:	e13ffe15 	stw	r4,-8(fp)
 1831920:	e17fff15 	stw	r5,-4(fp)
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 1831924:	d0a7f317 	ldw	r2,-24628(gp)
 1831928:	e0bffd15 	stw	r2,-12(fp)
 183192c:	00001d06 	br	18319a4 <ip_route+0x94>
    /* network mask matches? */
    if (netif_is_up(netif)) {
 1831930:	e0bffd17 	ldw	r2,-12(fp)
 1831934:	10800e43 	ldbu	r2,57(r2)
 1831938:	10803fcc 	andi	r2,r2,255
 183193c:	1080004c 	andi	r2,r2,1
 1831940:	10001526 	beq	r2,zero,1831998 <ip_route+0x88>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
 1831944:	e0bfff17 	ldw	r2,-4(fp)
 1831948:	10c00017 	ldw	r3,0(r2)
 183194c:	e0bffd17 	ldw	r2,-12(fp)
 1831950:	10800117 	ldw	r2,4(r2)
 1831954:	1886f03a 	xor	r3,r3,r2
 1831958:	e0bffd17 	ldw	r2,-12(fp)
 183195c:	10800217 	ldw	r2,8(r2)
 1831960:	1884703a 	and	r2,r3,r2
 1831964:	10000c1e 	bne	r2,zero,1831998 <ip_route+0x88>
        if (!src || !src->addr || ip_addr_cmp(src, &(netif->ip_addr))) {
 1831968:	e0bffe17 	ldw	r2,-8(fp)
 183196c:	10000826 	beq	r2,zero,1831990 <ip_route+0x80>
 1831970:	e0bffe17 	ldw	r2,-8(fp)
 1831974:	10800017 	ldw	r2,0(r2)
 1831978:	10000526 	beq	r2,zero,1831990 <ip_route+0x80>
 183197c:	e0bffe17 	ldw	r2,-8(fp)
 1831980:	10c00017 	ldw	r3,0(r2)
 1831984:	e0bffd17 	ldw	r2,-12(fp)
 1831988:	10800117 	ldw	r2,4(r2)
 183198c:	1880021e 	bne	r3,r2,1831998 <ip_route+0x88>
        /* return netif on which to forward IP packet */
        return netif;
 1831990:	e0bffd17 	ldw	r2,-12(fp)
 1831994:	00001606 	br	18319f0 <ip_route+0xe0>
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 1831998:	e0bffd17 	ldw	r2,-12(fp)
 183199c:	10800017 	ldw	r2,0(r2)
 18319a0:	e0bffd15 	stw	r2,-12(fp)
 18319a4:	e0bffd17 	ldw	r2,-12(fp)
 18319a8:	103fe11e 	bne	r2,zero,1831930 <__alt_mem_mem_0+0xff811930>
        return netif;
      }
    }
  }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
 18319ac:	d0a7f417 	ldw	r2,-24624(gp)
 18319b0:	10000526 	beq	r2,zero,18319c8 <ip_route+0xb8>
 18319b4:	d0a7f417 	ldw	r2,-24624(gp)
 18319b8:	10800e43 	ldbu	r2,57(r2)
 18319bc:	10803fcc 	andi	r2,r2,255
 18319c0:	1080004c 	andi	r2,r2,1
 18319c4:	1000091e 	bne	r2,zero,18319ec <ip_route+0xdc>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 18319c8:	008061f4 	movhi	r2,391
 18319cc:	10a77104 	addi	r2,r2,-25148
 18319d0:	10802b17 	ldw	r2,172(r2)
 18319d4:	10c00044 	addi	r3,r2,1
 18319d8:	008061f4 	movhi	r2,391
 18319dc:	10a77104 	addi	r2,r2,-25148
 18319e0:	10c02b15 	stw	r3,172(r2)
    snmp_inc_ipoutnoroutes();
    return NULL;
 18319e4:	0005883a 	mov	r2,zero
 18319e8:	00000106 	br	18319f0 <ip_route+0xe0>
  }
  /* no matching netif found, use default netif */
  return netif_default;
 18319ec:	d0a7f417 	ldw	r2,-24624(gp)
}
 18319f0:	e037883a 	mov	sp,fp
 18319f4:	df000017 	ldw	fp,0(sp)
 18319f8:	dec00104 	addi	sp,sp,4
 18319fc:	f800283a 	ret

01831a00 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
 1831a00:	defff604 	addi	sp,sp,-40
 1831a04:	dfc00915 	stw	ra,36(sp)
 1831a08:	df000815 	stw	fp,32(sp)
 1831a0c:	df000804 	addi	fp,sp,32
 1831a10:	e13ffe15 	stw	r4,-8(fp)
 1831a14:	e17fff15 	stw	r5,-4(fp)
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
 1831a18:	00800044 	movi	r2,1
 1831a1c:	e0bffa15 	stw	r2,-24(fp)
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  IP_STATS_INC(ip.recv);
 1831a20:	008061f4 	movhi	r2,391
 1831a24:	10a77104 	addi	r2,r2,-25148
 1831a28:	10802517 	ldw	r2,148(r2)
 1831a2c:	10c00044 	addi	r3,r2,1
 1831a30:	008061f4 	movhi	r2,391
 1831a34:	10a77104 	addi	r2,r2,-25148
 1831a38:	10c02515 	stw	r3,148(r2)
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 1831a3c:	e0bffe17 	ldw	r2,-8(fp)
 1831a40:	10800117 	ldw	r2,4(r2)
 1831a44:	e0bff815 	stw	r2,-32(fp)
  if (IPH_V(iphdr) != 4) {
 1831a48:	e0bff817 	ldw	r2,-32(fp)
 1831a4c:	10800003 	ldbu	r2,0(r2)
 1831a50:	10803fcc 	andi	r2,r2,255
 1831a54:	1004d13a 	srli	r2,r2,4
 1831a58:	10803fcc 	andi	r2,r2,255
 1831a5c:	10800120 	cmpeqi	r2,r2,4
 1831a60:	1000121e 	bne	r2,zero,1831aac <ip_input+0xac>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
 1831a64:	e13ffe17 	ldw	r4,-8(fp)
 1831a68:	181a9040 	call	181a904 <pbuf_free>
    IP_STATS_INC(ip.err);
 1831a6c:	008061f4 	movhi	r2,391
 1831a70:	10a77104 	addi	r2,r2,-25148
 1831a74:	10802e17 	ldw	r2,184(r2)
 1831a78:	10c00044 	addi	r3,r2,1
 1831a7c:	008061f4 	movhi	r2,391
 1831a80:	10a77104 	addi	r2,r2,-25148
 1831a84:	10c02e15 	stw	r3,184(r2)
    IP_STATS_INC(ip.drop);
 1831a88:	008061f4 	movhi	r2,391
 1831a8c:	10a77104 	addi	r2,r2,-25148
 1831a90:	10802717 	ldw	r2,156(r2)
 1831a94:	10c00044 	addi	r3,r2,1
 1831a98:	008061f4 	movhi	r2,391
 1831a9c:	10a77104 	addi	r2,r2,-25148
 1831aa0:	10c02715 	stw	r3,156(r2)
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 1831aa4:	0005883a 	mov	r2,zero
 1831aa8:	00011f06 	br	1831f28 <ip_input+0x528>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 1831aac:	e0bff817 	ldw	r2,-32(fp)
 1831ab0:	10800003 	ldbu	r2,0(r2)
 1831ab4:	10803fcc 	andi	r2,r2,255
 1831ab8:	108003cc 	andi	r2,r2,15
 1831abc:	e0bffc0d 	sth	r2,-16(fp)
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 1831ac0:	e0bffc0b 	ldhu	r2,-16(fp)
 1831ac4:	1085883a 	add	r2,r2,r2
 1831ac8:	1085883a 	add	r2,r2,r2
 1831acc:	e0bffc0d 	sth	r2,-16(fp)
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 1831ad0:	e0bff817 	ldw	r2,-32(fp)
 1831ad4:	10c00083 	ldbu	r3,2(r2)
 1831ad8:	108000c3 	ldbu	r2,3(r2)
 1831adc:	1004923a 	slli	r2,r2,8
 1831ae0:	10c4b03a 	or	r2,r2,r3
 1831ae4:	10bfffcc 	andi	r2,r2,65535
 1831ae8:	1004d23a 	srli	r2,r2,8
 1831aec:	1009883a 	mov	r4,r2
 1831af0:	e0bff817 	ldw	r2,-32(fp)
 1831af4:	10c00083 	ldbu	r3,2(r2)
 1831af8:	108000c3 	ldbu	r2,3(r2)
 1831afc:	1004923a 	slli	r2,r2,8
 1831b00:	10c4b03a 	or	r2,r2,r3
 1831b04:	10bfffcc 	andi	r2,r2,65535
 1831b08:	1004923a 	slli	r2,r2,8
 1831b0c:	2084b03a 	or	r2,r4,r2
 1831b10:	e0bffc8d 	sth	r2,-14(fp)

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 1831b14:	e0bffe17 	ldw	r2,-8(fp)
 1831b18:	1080028b 	ldhu	r2,10(r2)
 1831b1c:	10ffffcc 	andi	r3,r2,65535
 1831b20:	e0bffc0b 	ldhu	r2,-16(fp)
 1831b24:	18800536 	bltu	r3,r2,1831b3c <ip_input+0x13c>
 1831b28:	e0bffe17 	ldw	r2,-8(fp)
 1831b2c:	1080020b 	ldhu	r2,8(r2)
 1831b30:	10ffffcc 	andi	r3,r2,65535
 1831b34:	e0bffc8b 	ldhu	r2,-14(fp)
 1831b38:	1880122e 	bgeu	r3,r2,1831b84 <ip_input+0x184>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 1831b3c:	e13ffe17 	ldw	r4,-8(fp)
 1831b40:	181a9040 	call	181a904 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 1831b44:	008061f4 	movhi	r2,391
 1831b48:	10a77104 	addi	r2,r2,-25148
 1831b4c:	10802917 	ldw	r2,164(r2)
 1831b50:	10c00044 	addi	r3,r2,1
 1831b54:	008061f4 	movhi	r2,391
 1831b58:	10a77104 	addi	r2,r2,-25148
 1831b5c:	10c02915 	stw	r3,164(r2)
    IP_STATS_INC(ip.drop);
 1831b60:	008061f4 	movhi	r2,391
 1831b64:	10a77104 	addi	r2,r2,-25148
 1831b68:	10802717 	ldw	r2,156(r2)
 1831b6c:	10c00044 	addi	r3,r2,1
 1831b70:	008061f4 	movhi	r2,391
 1831b74:	10a77104 	addi	r2,r2,-25148
 1831b78:	10c02715 	stw	r3,156(r2)
    snmp_inc_ipindiscards();
    return ERR_OK;
 1831b7c:	0005883a 	mov	r2,zero
 1831b80:	0000e906 	br	1831f28 <ip_input+0x528>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 1831b84:	e0bffc0b 	ldhu	r2,-16(fp)
 1831b88:	100b883a 	mov	r5,r2
 1831b8c:	e13ff817 	ldw	r4,-32(fp)
 1831b90:	18317680 	call	1831768 <inet_chksum>
 1831b94:	10bfffcc 	andi	r2,r2,65535
 1831b98:	10001226 	beq	r2,zero,1831be4 <ip_input+0x1e4>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
 1831b9c:	e13ffe17 	ldw	r4,-8(fp)
 1831ba0:	181a9040 	call	181a904 <pbuf_free>
    IP_STATS_INC(ip.chkerr);
 1831ba4:	008061f4 	movhi	r2,391
 1831ba8:	10a77104 	addi	r2,r2,-25148
 1831bac:	10802817 	ldw	r2,160(r2)
 1831bb0:	10c00044 	addi	r3,r2,1
 1831bb4:	008061f4 	movhi	r2,391
 1831bb8:	10a77104 	addi	r2,r2,-25148
 1831bbc:	10c02815 	stw	r3,160(r2)
    IP_STATS_INC(ip.drop);
 1831bc0:	008061f4 	movhi	r2,391
 1831bc4:	10a77104 	addi	r2,r2,-25148
 1831bc8:	10802717 	ldw	r2,156(r2)
 1831bcc:	10c00044 	addi	r3,r2,1
 1831bd0:	008061f4 	movhi	r2,391
 1831bd4:	10a77104 	addi	r2,r2,-25148
 1831bd8:	10c02715 	stw	r3,156(r2)
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 1831bdc:	0005883a 	mov	r2,zero
 1831be0:	0000d106 	br	1831f28 <ip_input+0x528>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
 1831be4:	e0bffc8b 	ldhu	r2,-14(fp)
 1831be8:	100b883a 	mov	r5,r2
 1831bec:	e13ffe17 	ldw	r4,-8(fp)
 1831bf0:	181a5f40 	call	181a5f4 <pbuf_realloc>

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
 1831bf4:	e0bff817 	ldw	r2,-32(fp)
 1831bf8:	10c00403 	ldbu	r3,16(r2)
 1831bfc:	11000443 	ldbu	r4,17(r2)
 1831c00:	2008923a 	slli	r4,r4,8
 1831c04:	20c6b03a 	or	r3,r4,r3
 1831c08:	11000483 	ldbu	r4,18(r2)
 1831c0c:	2008943a 	slli	r4,r4,16
 1831c10:	20c6b03a 	or	r3,r4,r3
 1831c14:	108004c3 	ldbu	r2,19(r2)
 1831c18:	1004963a 	slli	r2,r2,24
 1831c1c:	10c4b03a 	or	r2,r2,r3
 1831c20:	d0a81215 	stw	r2,-24504(gp)
  ip_addr_copy(current_iphdr_src, iphdr->src);
 1831c24:	e0bff817 	ldw	r2,-32(fp)
 1831c28:	10c00303 	ldbu	r3,12(r2)
 1831c2c:	11000343 	ldbu	r4,13(r2)
 1831c30:	2008923a 	slli	r4,r4,8
 1831c34:	20c6b03a 	or	r3,r4,r3
 1831c38:	11000383 	ldbu	r4,14(r2)
 1831c3c:	2008943a 	slli	r4,r4,16
 1831c40:	20c6b03a 	or	r3,r4,r3
 1831c44:	108003c3 	ldbu	r2,15(r2)
 1831c48:	1004963a 	slli	r2,r2,24
 1831c4c:	10c4b03a 	or	r2,r2,r3
 1831c50:	d0a81015 	stw	r2,-24512(gp)
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 1831c54:	00800044 	movi	r2,1
 1831c58:	e0bffb15 	stw	r2,-20(fp)
    netif = inp;
 1831c5c:	e0bfff17 	ldw	r2,-4(fp)
 1831c60:	e0bff915 	stw	r2,-28(fp)
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 1831c64:	e0bff917 	ldw	r2,-28(fp)
 1831c68:	10800e43 	ldbu	r2,57(r2)
 1831c6c:	10803fcc 	andi	r2,r2,255
 1831c70:	1080004c 	andi	r2,r2,1
 1831c74:	10001026 	beq	r2,zero,1831cb8 <ip_input+0x2b8>
 1831c78:	e0bff917 	ldw	r2,-28(fp)
 1831c7c:	10800104 	addi	r2,r2,4
 1831c80:	10000d26 	beq	r2,zero,1831cb8 <ip_input+0x2b8>
 1831c84:	e0bff917 	ldw	r2,-28(fp)
 1831c88:	10800117 	ldw	r2,4(r2)
 1831c8c:	10000a26 	beq	r2,zero,1831cb8 <ip_input+0x2b8>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 1831c90:	d0e81217 	ldw	r3,-24504(gp)
 1831c94:	e0bff917 	ldw	r2,-28(fp)
 1831c98:	10800117 	ldw	r2,4(r2)
 1831c9c:	18801726 	beq	r3,r2,1831cfc <ip_input+0x2fc>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
 1831ca0:	d0a81217 	ldw	r2,-24504(gp)
 1831ca4:	e17ff917 	ldw	r5,-28(fp)
 1831ca8:	1009883a 	mov	r4,r2
 1831cac:	18187180 	call	1818718 <ip4_addr_isbroadcast>
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 1831cb0:	10803fcc 	andi	r2,r2,255
 1831cb4:	1000111e 	bne	r2,zero,1831cfc <ip_input+0x2fc>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 1831cb8:	e0bffb17 	ldw	r2,-20(fp)
 1831cbc:	10000426 	beq	r2,zero,1831cd0 <ip_input+0x2d0>
        first = 0;
 1831cc0:	e03ffb15 	stw	zero,-20(fp)
        netif = netif_list;
 1831cc4:	d0a7f317 	ldw	r2,-24628(gp)
 1831cc8:	e0bff915 	stw	r2,-28(fp)
 1831ccc:	00000306 	br	1831cdc <ip_input+0x2dc>
      } else {
        netif = netif->next;
 1831cd0:	e0bff917 	ldw	r2,-28(fp)
 1831cd4:	10800017 	ldw	r2,0(r2)
 1831cd8:	e0bff915 	stw	r2,-28(fp)
      }
      if (netif == inp) {
 1831cdc:	e0fff917 	ldw	r3,-28(fp)
 1831ce0:	e0bfff17 	ldw	r2,-4(fp)
 1831ce4:	1880031e 	bne	r3,r2,1831cf4 <ip_input+0x2f4>
        netif = netif->next;
 1831ce8:	e0bff917 	ldw	r2,-28(fp)
 1831cec:	10800017 	ldw	r2,0(r2)
 1831cf0:	e0bff915 	stw	r2,-28(fp)
      }
    } while(netif != NULL);
 1831cf4:	e0bff917 	ldw	r2,-28(fp)
 1831cf8:	103fda1e 	bne	r2,zero,1831c64 <__alt_mem_mem_0+0xff811c64>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 1831cfc:	e0bff917 	ldw	r2,-28(fp)
 1831d00:	1000141e 	bne	r2,zero,1831d54 <ip_input+0x354>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 1831d04:	e0bff817 	ldw	r2,-32(fp)
 1831d08:	10800243 	ldbu	r2,9(r2)
 1831d0c:	10803fcc 	andi	r2,r2,255
 1831d10:	10800458 	cmpnei	r2,r2,17
 1831d14:	10000f1e 	bne	r2,zero,1831d54 <ip_input+0x354>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 1831d18:	e0bffc0b 	ldhu	r2,-16(fp)
 1831d1c:	e0fff817 	ldw	r3,-32(fp)
 1831d20:	1885883a 	add	r2,r3,r2
 1831d24:	e0bffd15 	stw	r2,-12(fp)
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 1831d28:	e0bffd17 	ldw	r2,-12(fp)
 1831d2c:	10c00083 	ldbu	r3,2(r2)
 1831d30:	108000c3 	ldbu	r2,3(r2)
 1831d34:	1004923a 	slli	r2,r2,8
 1831d38:	10c4b03a 	or	r2,r2,r3
 1831d3c:	10bfffcc 	andi	r2,r2,65535
 1831d40:	10910018 	cmpnei	r2,r2,17408
 1831d44:	1000031e 	bne	r2,zero,1831d54 <ip_input+0x354>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
        netif = inp;
 1831d48:	e0bfff17 	ldw	r2,-4(fp)
 1831d4c:	e0bff915 	stw	r2,-28(fp)
        check_ip_src = 0;
 1831d50:	e03ffa15 	stw	zero,-24(fp)
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
 1831d54:	e0bffa17 	ldw	r2,-24(fp)
 1831d58:	10001726 	beq	r2,zero,1831db8 <ip_input+0x3b8>
 1831d5c:	d0a81017 	ldw	r2,-24512(gp)
 1831d60:	10001526 	beq	r2,zero,1831db8 <ip_input+0x3b8>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 1831d64:	d0a81017 	ldw	r2,-24512(gp)
 1831d68:	e17fff17 	ldw	r5,-4(fp)
 1831d6c:	1009883a 	mov	r4,r2
 1831d70:	18187180 	call	1818718 <ip4_addr_isbroadcast>
 1831d74:	10803fcc 	andi	r2,r2,255
 1831d78:	1000041e 	bne	r2,zero,1831d8c <ip_input+0x38c>
         (ip_addr_ismulticast(&current_iphdr_src))) {
 1831d7c:	d0a81017 	ldw	r2,-24512(gp)
 1831d80:	10803c0c 	andi	r2,r2,240
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 1831d84:	10803818 	cmpnei	r2,r2,224
 1831d88:	10000b1e 	bne	r2,zero,1831db8 <ip_input+0x3b8>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 1831d8c:	e13ffe17 	ldw	r4,-8(fp)
 1831d90:	181a9040 	call	181a904 <pbuf_free>
      IP_STATS_INC(ip.drop);
 1831d94:	008061f4 	movhi	r2,391
 1831d98:	10a77104 	addi	r2,r2,-25148
 1831d9c:	10802717 	ldw	r2,156(r2)
 1831da0:	10c00044 	addi	r3,r2,1
 1831da4:	008061f4 	movhi	r2,391
 1831da8:	10a77104 	addi	r2,r2,-25148
 1831dac:	10c02715 	stw	r3,156(r2)
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
 1831db0:	0005883a 	mov	r2,zero
 1831db4:	00005c06 	br	1831f28 <ip_input+0x528>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 1831db8:	e0bff917 	ldw	r2,-28(fp)
 1831dbc:	1000041e 	bne	r2,zero,1831dd0 <ip_input+0x3d0>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
 1831dc0:	e13ffe17 	ldw	r4,-8(fp)
 1831dc4:	181a9040 	call	181a904 <pbuf_free>
    return ERR_OK;
 1831dc8:	0005883a 	mov	r2,zero
 1831dcc:	00005606 	br	1831f28 <ip_input+0x528>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 1831dd0:	e0bff817 	ldw	r2,-32(fp)
 1831dd4:	10c00183 	ldbu	r3,6(r2)
 1831dd8:	108001c3 	ldbu	r2,7(r2)
 1831ddc:	1004923a 	slli	r2,r2,8
 1831de0:	10c4b03a 	or	r2,r2,r3
 1831de4:	10bfffcc 	andi	r2,r2,65535
 1831de8:	10bfcfcc 	andi	r2,r2,65343
 1831dec:	10000a26 	beq	r2,zero,1831e18 <ip_input+0x418>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
 1831df0:	e13ffe17 	ldw	r4,-8(fp)
 1831df4:	18333100 	call	1833310 <ip_reass>
 1831df8:	e0bffe15 	stw	r2,-8(fp)
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 1831dfc:	e0bffe17 	ldw	r2,-8(fp)
 1831e00:	1000021e 	bne	r2,zero,1831e0c <ip_input+0x40c>
      return ERR_OK;
 1831e04:	0005883a 	mov	r2,zero
 1831e08:	00004706 	br	1831f28 <ip_input+0x528>
    }
    iphdr = (struct ip_hdr *)p->payload;
 1831e0c:	e0bffe17 	ldw	r2,-8(fp)
 1831e10:	10800117 	ldw	r2,4(r2)
 1831e14:	e0bff815 	stw	r2,-32(fp)
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 1831e18:	e0bfff17 	ldw	r2,-4(fp)
 1831e1c:	d0a81115 	stw	r2,-24508(gp)
  current_header = iphdr;
 1831e20:	e0bff817 	ldw	r2,-32(fp)
 1831e24:	d0a81315 	stw	r2,-24500(gp)

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 1831e28:	e17fff17 	ldw	r5,-4(fp)
 1831e2c:	e13ffe17 	ldw	r4,-8(fp)
 1831e30:	18342bc0 	call	18342bc <raw_input>
 1831e34:	10803fcc 	andi	r2,r2,255
 1831e38:	1000361e 	bne	r2,zero,1831f14 <ip_input+0x514>
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
 1831e3c:	e0bff817 	ldw	r2,-32(fp)
 1831e40:	10800243 	ldbu	r2,9(r2)
 1831e44:	10803fcc 	andi	r2,r2,255
 1831e48:	10c001a0 	cmpeqi	r3,r2,6
 1831e4c:	1800091e 	bne	r3,zero,1831e74 <ip_input+0x474>
 1831e50:	10c00460 	cmpeqi	r3,r2,17
 1831e54:	1800031e 	bne	r3,zero,1831e64 <ip_input+0x464>
 1831e58:	10800060 	cmpeqi	r2,r2,1
 1831e5c:	1000091e 	bne	r2,zero,1831e84 <ip_input+0x484>
 1831e60:	00000c06 	br	1831e94 <ip_input+0x494>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
 1831e64:	e17fff17 	ldw	r5,-4(fp)
 1831e68:	e13ffe17 	ldw	r4,-8(fp)
 1831e6c:	18218f40 	call	18218f4 <udp_input>
      break;
 1831e70:	00002806 	br	1831f14 <ip_input+0x514>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
 1831e74:	e17fff17 	ldw	r5,-4(fp)
 1831e78:	e13ffe17 	ldw	r4,-8(fp)
 1831e7c:	18347a80 	call	18347a8 <tcp_input>
      break;
 1831e80:	00002406 	br	1831f14 <ip_input+0x514>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
 1831e84:	e17fff17 	ldw	r5,-4(fp)
 1831e88:	e13ffe17 	ldw	r4,-8(fp)
 1831e8c:	18308900 	call	1830890 <icmp_input>
      break;
 1831e90:	00002006 	br	1831f14 <ip_input+0x514>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 1831e94:	d0a81217 	ldw	r2,-24504(gp)
 1831e98:	e17fff17 	ldw	r5,-4(fp)
 1831e9c:	1009883a 	mov	r4,r2
 1831ea0:	18187180 	call	1818718 <ip4_addr_isbroadcast>
 1831ea4:	10803fcc 	andi	r2,r2,255
 1831ea8:	10000a1e 	bne	r2,zero,1831ed4 <ip_input+0x4d4>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 1831eac:	d0a81217 	ldw	r2,-24504(gp)
 1831eb0:	10803c0c 	andi	r2,r2,240
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 1831eb4:	10803820 	cmpeqi	r2,r2,224
 1831eb8:	1000061e 	bne	r2,zero,1831ed4 <ip_input+0x4d4>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
 1831ebc:	e0bffe17 	ldw	r2,-8(fp)
 1831ec0:	e0fff817 	ldw	r3,-32(fp)
 1831ec4:	10c00115 	stw	r3,4(r2)
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 1831ec8:	01400084 	movi	r5,2
 1831ecc:	e13ffe17 	ldw	r4,-8(fp)
 1831ed0:	1830e8c0 	call	1830e8c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 1831ed4:	e13ffe17 	ldw	r4,-8(fp)
 1831ed8:	181a9040 	call	181a904 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 1831edc:	008061f4 	movhi	r2,391
 1831ee0:	10a77104 	addi	r2,r2,-25148
 1831ee4:	10802c17 	ldw	r2,176(r2)
 1831ee8:	10c00044 	addi	r3,r2,1
 1831eec:	008061f4 	movhi	r2,391
 1831ef0:	10a77104 	addi	r2,r2,-25148
 1831ef4:	10c02c15 	stw	r3,176(r2)
      IP_STATS_INC(ip.drop);
 1831ef8:	008061f4 	movhi	r2,391
 1831efc:	10a77104 	addi	r2,r2,-25148
 1831f00:	10802717 	ldw	r2,156(r2)
 1831f04:	10c00044 	addi	r3,r2,1
 1831f08:	008061f4 	movhi	r2,391
 1831f0c:	10a77104 	addi	r2,r2,-25148
 1831f10:	10c02715 	stw	r3,156(r2)
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
 1831f14:	d0281115 	stw	zero,-24508(gp)
  current_header = NULL;
 1831f18:	d0281315 	stw	zero,-24500(gp)
  ip_addr_set_any(&current_iphdr_src);
 1831f1c:	d0281015 	stw	zero,-24512(gp)
  ip_addr_set_any(&current_iphdr_dest);
 1831f20:	d0281215 	stw	zero,-24504(gp)

  return ERR_OK;
 1831f24:	0005883a 	mov	r2,zero
}
 1831f28:	e037883a 	mov	sp,fp
 1831f2c:	dfc00117 	ldw	ra,4(sp)
 1831f30:	df000017 	ldw	fp,0(sp)
 1831f34:	dec00204 	addi	sp,sp,8
 1831f38:	f800283a 	ret

01831f3c <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 1831f3c:	defff404 	addi	sp,sp,-48
 1831f40:	dfc00b15 	stw	ra,44(sp)
 1831f44:	df000a15 	stw	fp,40(sp)
 1831f48:	df000a04 	addi	fp,sp,40
 1831f4c:	e13ffa15 	stw	r4,-24(fp)
 1831f50:	e17ffb15 	stw	r5,-20(fp)
 1831f54:	e1bffc15 	stw	r6,-16(fp)
 1831f58:	3809883a 	mov	r4,r7
 1831f5c:	e0c00217 	ldw	r3,8(fp)
 1831f60:	e0800317 	ldw	r2,12(fp)
 1831f64:	e13ffd05 	stb	r4,-12(fp)
 1831f68:	e0fffe05 	stb	r3,-8(fp)
 1831f6c:	e0bfff05 	stb	r2,-4(fp)
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 1831f70:	e03ff615 	stw	zero,-40(fp)
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 1831f74:	e0bffc17 	ldw	r2,-16(fp)
 1831f78:	10015026 	beq	r2,zero,18324bc <ip_output_if+0x580>
    u16_t ip_hlen = IP_HLEN;
 1831f7c:	00800504 	movi	r2,20
 1831f80:	e0bff70d 	sth	r2,-36(fp)
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 1831f84:	01400504 	movi	r5,20
 1831f88:	e13ffa17 	ldw	r4,-24(fp)
 1831f8c:	181a7540 	call	181a754 <pbuf_header>
 1831f90:	10803fcc 	andi	r2,r2,255
 1831f94:	10000926 	beq	r2,zero,1831fbc <ip_output_if+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 1831f98:	008061f4 	movhi	r2,391
 1831f9c:	10a77104 	addi	r2,r2,-25148
 1831fa0:	10802e17 	ldw	r2,184(r2)
 1831fa4:	10c00044 	addi	r3,r2,1
 1831fa8:	008061f4 	movhi	r2,391
 1831fac:	10a77104 	addi	r2,r2,-25148
 1831fb0:	10c02e15 	stw	r3,184(r2)
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
 1831fb4:	00bfff84 	movi	r2,-2
 1831fb8:	00016e06 	br	1832574 <ip_output_if+0x638>
    }

    iphdr = (struct ip_hdr *)p->payload;
 1831fbc:	e0bffa17 	ldw	r2,-24(fp)
 1831fc0:	10800117 	ldw	r2,4(r2)
 1831fc4:	e0bff815 	stw	r2,-32(fp)
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 1831fc8:	e0bff817 	ldw	r2,-32(fp)
 1831fcc:	e0fffd03 	ldbu	r3,-12(fp)
 1831fd0:	10c00205 	stb	r3,8(r2)
    IPH_PROTO_SET(iphdr, proto);
 1831fd4:	e0bff817 	ldw	r2,-32(fp)
 1831fd8:	e0ffff03 	ldbu	r3,-4(fp)
 1831fdc:	10c00245 	stb	r3,9(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
 1831fe0:	e0bfff03 	ldbu	r2,-4(fp)
 1831fe4:	1006923a 	slli	r3,r2,8
 1831fe8:	e0bffd03 	ldbu	r2,-12(fp)
 1831fec:	1884b03a 	or	r2,r3,r2
 1831ff0:	1007883a 	mov	r3,r2
 1831ff4:	e0bff617 	ldw	r2,-40(fp)
 1831ff8:	10c5883a 	add	r2,r2,r3
 1831ffc:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
 1832000:	e0bffc17 	ldw	r2,-16(fp)
 1832004:	10c00017 	ldw	r3,0(r2)
 1832008:	e0bff817 	ldw	r2,-32(fp)
 183200c:	19803fcc 	andi	r6,r3,255
 1832010:	11000403 	ldbu	r4,16(r2)
 1832014:	2008703a 	and	r4,r4,zero
 1832018:	200b883a 	mov	r5,r4
 183201c:	3009883a 	mov	r4,r6
 1832020:	2908b03a 	or	r4,r5,r4
 1832024:	11000405 	stb	r4,16(r2)
 1832028:	1808d23a 	srli	r4,r3,8
 183202c:	21803fcc 	andi	r6,r4,255
 1832030:	11000443 	ldbu	r4,17(r2)
 1832034:	2008703a 	and	r4,r4,zero
 1832038:	200b883a 	mov	r5,r4
 183203c:	3009883a 	mov	r4,r6
 1832040:	2908b03a 	or	r4,r5,r4
 1832044:	11000445 	stb	r4,17(r2)
 1832048:	1808d43a 	srli	r4,r3,16
 183204c:	21803fcc 	andi	r6,r4,255
 1832050:	11000483 	ldbu	r4,18(r2)
 1832054:	2008703a 	and	r4,r4,zero
 1832058:	200b883a 	mov	r5,r4
 183205c:	3009883a 	mov	r4,r6
 1832060:	2908b03a 	or	r4,r5,r4
 1832064:	11000485 	stb	r4,18(r2)
 1832068:	180ad63a 	srli	r5,r3,24
 183206c:	10c004c3 	ldbu	r3,19(r2)
 1832070:	1806703a 	and	r3,r3,zero
 1832074:	1809883a 	mov	r4,r3
 1832078:	2807883a 	mov	r3,r5
 183207c:	20c6b03a 	or	r3,r4,r3
 1832080:	10c004c5 	stb	r3,19(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 1832084:	e0bff817 	ldw	r2,-32(fp)
 1832088:	10c00403 	ldbu	r3,16(r2)
 183208c:	11000443 	ldbu	r4,17(r2)
 1832090:	2008923a 	slli	r4,r4,8
 1832094:	20c6b03a 	or	r3,r4,r3
 1832098:	11000483 	ldbu	r4,18(r2)
 183209c:	2008943a 	slli	r4,r4,16
 18320a0:	20c6b03a 	or	r3,r4,r3
 18320a4:	108004c3 	ldbu	r2,19(r2)
 18320a8:	1004963a 	slli	r2,r2,24
 18320ac:	10c4b03a 	or	r2,r2,r3
 18320b0:	10bfffcc 	andi	r2,r2,65535
 18320b4:	e0fff617 	ldw	r3,-40(fp)
 18320b8:	1885883a 	add	r2,r3,r2
 18320bc:	e0bff615 	stw	r2,-40(fp)
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 18320c0:	e0bff817 	ldw	r2,-32(fp)
 18320c4:	10c00403 	ldbu	r3,16(r2)
 18320c8:	11000443 	ldbu	r4,17(r2)
 18320cc:	2008923a 	slli	r4,r4,8
 18320d0:	20c6b03a 	or	r3,r4,r3
 18320d4:	11000483 	ldbu	r4,18(r2)
 18320d8:	2008943a 	slli	r4,r4,16
 18320dc:	20c6b03a 	or	r3,r4,r3
 18320e0:	108004c3 	ldbu	r2,19(r2)
 18320e4:	1004963a 	slli	r2,r2,24
 18320e8:	10c4b03a 	or	r2,r2,r3
 18320ec:	1004d43a 	srli	r2,r2,16
 18320f0:	e0fff617 	ldw	r3,-40(fp)
 18320f4:	1885883a 	add	r2,r3,r2
 18320f8:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 18320fc:	e0bff70b 	ldhu	r2,-36(fp)
 1832100:	1004d0ba 	srli	r2,r2,2
 1832104:	10801014 	ori	r2,r2,64
 1832108:	1007883a 	mov	r3,r2
 183210c:	e0bff817 	ldw	r2,-32(fp)
 1832110:	10c00005 	stb	r3,0(r2)
    IPH_TOS_SET(iphdr, tos);
 1832114:	e0bff817 	ldw	r2,-32(fp)
 1832118:	e0fffe03 	ldbu	r3,-8(fp)
 183211c:	10c00045 	stb	r3,1(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
 1832120:	e0bffe03 	ldbu	r2,-8(fp)
 1832124:	1006923a 	slli	r3,r2,8
 1832128:	e0bff817 	ldw	r2,-32(fp)
 183212c:	10800003 	ldbu	r2,0(r2)
 1832130:	10803fcc 	andi	r2,r2,255
 1832134:	1884b03a 	or	r2,r3,r2
 1832138:	1007883a 	mov	r3,r2
 183213c:	e0bff617 	ldw	r2,-40(fp)
 1832140:	10c5883a 	add	r2,r2,r3
 1832144:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 1832148:	e0bffa17 	ldw	r2,-24(fp)
 183214c:	1080020b 	ldhu	r2,8(r2)
 1832150:	10bfffcc 	andi	r2,r2,65535
 1832154:	1004d23a 	srli	r2,r2,8
 1832158:	1007883a 	mov	r3,r2
 183215c:	e0bffa17 	ldw	r2,-24(fp)
 1832160:	1080020b 	ldhu	r2,8(r2)
 1832164:	10bfffcc 	andi	r2,r2,65535
 1832168:	1004923a 	slli	r2,r2,8
 183216c:	1884b03a 	or	r2,r3,r2
 1832170:	100d883a 	mov	r6,r2
 1832174:	e0bff817 	ldw	r2,-32(fp)
 1832178:	30ffffcc 	andi	r3,r6,65535
 183217c:	19403fcc 	andi	r5,r3,255
 1832180:	10c00083 	ldbu	r3,2(r2)
 1832184:	1806703a 	and	r3,r3,zero
 1832188:	1809883a 	mov	r4,r3
 183218c:	2807883a 	mov	r3,r5
 1832190:	20c6b03a 	or	r3,r4,r3
 1832194:	10c00085 	stb	r3,2(r2)
 1832198:	30ffffcc 	andi	r3,r6,65535
 183219c:	1806d23a 	srli	r3,r3,8
 18321a0:	197fffcc 	andi	r5,r3,65535
 18321a4:	10c000c3 	ldbu	r3,3(r2)
 18321a8:	1806703a 	and	r3,r3,zero
 18321ac:	1809883a 	mov	r4,r3
 18321b0:	2807883a 	mov	r3,r5
 18321b4:	20c6b03a 	or	r3,r4,r3
 18321b8:	10c000c5 	stb	r3,3(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 18321bc:	e0bff817 	ldw	r2,-32(fp)
 18321c0:	10c00083 	ldbu	r3,2(r2)
 18321c4:	108000c3 	ldbu	r2,3(r2)
 18321c8:	1004923a 	slli	r2,r2,8
 18321cc:	10c4b03a 	or	r2,r2,r3
 18321d0:	10bfffcc 	andi	r2,r2,65535
 18321d4:	e0fff617 	ldw	r3,-40(fp)
 18321d8:	1885883a 	add	r2,r3,r2
 18321dc:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 18321e0:	e0bff817 	ldw	r2,-32(fp)
 18321e4:	10c00183 	ldbu	r3,6(r2)
 18321e8:	1806703a 	and	r3,r3,zero
 18321ec:	10c00185 	stb	r3,6(r2)
 18321f0:	10c001c3 	ldbu	r3,7(r2)
 18321f4:	1806703a 	and	r3,r3,zero
 18321f8:	10c001c5 	stb	r3,7(r2)
    IPH_ID_SET(iphdr, htons(ip_id));
 18321fc:	d0a80f0b 	ldhu	r2,-24516(gp)
 1832200:	10bfffcc 	andi	r2,r2,65535
 1832204:	1004d23a 	srli	r2,r2,8
 1832208:	1007883a 	mov	r3,r2
 183220c:	d0a80f0b 	ldhu	r2,-24516(gp)
 1832210:	10bfffcc 	andi	r2,r2,65535
 1832214:	1004923a 	slli	r2,r2,8
 1832218:	1884b03a 	or	r2,r3,r2
 183221c:	100d883a 	mov	r6,r2
 1832220:	e0bff817 	ldw	r2,-32(fp)
 1832224:	30ffffcc 	andi	r3,r6,65535
 1832228:	19403fcc 	andi	r5,r3,255
 183222c:	10c00103 	ldbu	r3,4(r2)
 1832230:	1806703a 	and	r3,r3,zero
 1832234:	1809883a 	mov	r4,r3
 1832238:	2807883a 	mov	r3,r5
 183223c:	20c6b03a 	or	r3,r4,r3
 1832240:	10c00105 	stb	r3,4(r2)
 1832244:	30ffffcc 	andi	r3,r6,65535
 1832248:	1806d23a 	srli	r3,r3,8
 183224c:	197fffcc 	andi	r5,r3,65535
 1832250:	10c00143 	ldbu	r3,5(r2)
 1832254:	1806703a 	and	r3,r3,zero
 1832258:	1809883a 	mov	r4,r3
 183225c:	2807883a 	mov	r3,r5
 1832260:	20c6b03a 	or	r3,r4,r3
 1832264:	10c00145 	stb	r3,5(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 1832268:	e0bff817 	ldw	r2,-32(fp)
 183226c:	10c00103 	ldbu	r3,4(r2)
 1832270:	10800143 	ldbu	r2,5(r2)
 1832274:	1004923a 	slli	r2,r2,8
 1832278:	10c4b03a 	or	r2,r2,r3
 183227c:	10bfffcc 	andi	r2,r2,65535
 1832280:	e0fff617 	ldw	r3,-40(fp)
 1832284:	1885883a 	add	r2,r3,r2
 1832288:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 183228c:	d0a80f0b 	ldhu	r2,-24516(gp)
 1832290:	10800044 	addi	r2,r2,1
 1832294:	d0a80f0d 	sth	r2,-24516(gp)

    if (ip_addr_isany(src)) {
 1832298:	e0bffb17 	ldw	r2,-20(fp)
 183229c:	10000326 	beq	r2,zero,18322ac <ip_output_if+0x370>
 18322a0:	e0bffb17 	ldw	r2,-20(fp)
 18322a4:	10800017 	ldw	r2,0(r2)
 18322a8:	1000221e 	bne	r2,zero,1832334 <ip_output_if+0x3f8>
      ip_addr_copy(iphdr->src, netif->ip_addr);
 18322ac:	e0800417 	ldw	r2,16(fp)
 18322b0:	10c00117 	ldw	r3,4(r2)
 18322b4:	e0bff817 	ldw	r2,-32(fp)
 18322b8:	19803fcc 	andi	r6,r3,255
 18322bc:	11000303 	ldbu	r4,12(r2)
 18322c0:	2008703a 	and	r4,r4,zero
 18322c4:	200b883a 	mov	r5,r4
 18322c8:	3009883a 	mov	r4,r6
 18322cc:	2908b03a 	or	r4,r5,r4
 18322d0:	11000305 	stb	r4,12(r2)
 18322d4:	1808d23a 	srli	r4,r3,8
 18322d8:	21803fcc 	andi	r6,r4,255
 18322dc:	11000343 	ldbu	r4,13(r2)
 18322e0:	2008703a 	and	r4,r4,zero
 18322e4:	200b883a 	mov	r5,r4
 18322e8:	3009883a 	mov	r4,r6
 18322ec:	2908b03a 	or	r4,r5,r4
 18322f0:	11000345 	stb	r4,13(r2)
 18322f4:	1808d43a 	srli	r4,r3,16
 18322f8:	21803fcc 	andi	r6,r4,255
 18322fc:	11000383 	ldbu	r4,14(r2)
 1832300:	2008703a 	and	r4,r4,zero
 1832304:	200b883a 	mov	r5,r4
 1832308:	3009883a 	mov	r4,r6
 183230c:	2908b03a 	or	r4,r5,r4
 1832310:	11000385 	stb	r4,14(r2)
 1832314:	180ad63a 	srli	r5,r3,24
 1832318:	10c003c3 	ldbu	r3,15(r2)
 183231c:	1806703a 	and	r3,r3,zero
 1832320:	1809883a 	mov	r4,r3
 1832324:	2807883a 	mov	r3,r5
 1832328:	20c6b03a 	or	r3,r4,r3
 183232c:	10c003c5 	stb	r3,15(r2)
 1832330:	00002106 	br	18323b8 <ip_output_if+0x47c>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
 1832334:	e0bffb17 	ldw	r2,-20(fp)
 1832338:	10c00017 	ldw	r3,0(r2)
 183233c:	e0bff817 	ldw	r2,-32(fp)
 1832340:	19803fcc 	andi	r6,r3,255
 1832344:	11000303 	ldbu	r4,12(r2)
 1832348:	2008703a 	and	r4,r4,zero
 183234c:	200b883a 	mov	r5,r4
 1832350:	3009883a 	mov	r4,r6
 1832354:	2908b03a 	or	r4,r5,r4
 1832358:	11000305 	stb	r4,12(r2)
 183235c:	1808d23a 	srli	r4,r3,8
 1832360:	21803fcc 	andi	r6,r4,255
 1832364:	11000343 	ldbu	r4,13(r2)
 1832368:	2008703a 	and	r4,r4,zero
 183236c:	200b883a 	mov	r5,r4
 1832370:	3009883a 	mov	r4,r6
 1832374:	2908b03a 	or	r4,r5,r4
 1832378:	11000345 	stb	r4,13(r2)
 183237c:	1808d43a 	srli	r4,r3,16
 1832380:	21803fcc 	andi	r6,r4,255
 1832384:	11000383 	ldbu	r4,14(r2)
 1832388:	2008703a 	and	r4,r4,zero
 183238c:	200b883a 	mov	r5,r4
 1832390:	3009883a 	mov	r4,r6
 1832394:	2908b03a 	or	r4,r5,r4
 1832398:	11000385 	stb	r4,14(r2)
 183239c:	180ad63a 	srli	r5,r3,24
 18323a0:	10c003c3 	ldbu	r3,15(r2)
 18323a4:	1806703a 	and	r3,r3,zero
 18323a8:	1809883a 	mov	r4,r3
 18323ac:	2807883a 	mov	r3,r5
 18323b0:	20c6b03a 	or	r3,r4,r3
 18323b4:	10c003c5 	stb	r3,15(r2)
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 18323b8:	e0bff817 	ldw	r2,-32(fp)
 18323bc:	10c00303 	ldbu	r3,12(r2)
 18323c0:	11000343 	ldbu	r4,13(r2)
 18323c4:	2008923a 	slli	r4,r4,8
 18323c8:	20c6b03a 	or	r3,r4,r3
 18323cc:	11000383 	ldbu	r4,14(r2)
 18323d0:	2008943a 	slli	r4,r4,16
 18323d4:	20c6b03a 	or	r3,r4,r3
 18323d8:	108003c3 	ldbu	r2,15(r2)
 18323dc:	1004963a 	slli	r2,r2,24
 18323e0:	10c4b03a 	or	r2,r2,r3
 18323e4:	10bfffcc 	andi	r2,r2,65535
 18323e8:	e0fff617 	ldw	r3,-40(fp)
 18323ec:	1885883a 	add	r2,r3,r2
 18323f0:	e0bff615 	stw	r2,-40(fp)
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 18323f4:	e0bff817 	ldw	r2,-32(fp)
 18323f8:	10c00303 	ldbu	r3,12(r2)
 18323fc:	11000343 	ldbu	r4,13(r2)
 1832400:	2008923a 	slli	r4,r4,8
 1832404:	20c6b03a 	or	r3,r4,r3
 1832408:	11000383 	ldbu	r4,14(r2)
 183240c:	2008943a 	slli	r4,r4,16
 1832410:	20c6b03a 	or	r3,r4,r3
 1832414:	108003c3 	ldbu	r2,15(r2)
 1832418:	1004963a 	slli	r2,r2,24
 183241c:	10c4b03a 	or	r2,r2,r3
 1832420:	1004d43a 	srli	r2,r2,16
 1832424:	e0fff617 	ldw	r3,-40(fp)
 1832428:	1885883a 	add	r2,r3,r2
 183242c:	e0bff615 	stw	r2,-40(fp)
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 1832430:	e0bff617 	ldw	r2,-40(fp)
 1832434:	1006d43a 	srli	r3,r2,16
 1832438:	e0bff617 	ldw	r2,-40(fp)
 183243c:	10bfffcc 	andi	r2,r2,65535
 1832440:	1885883a 	add	r2,r3,r2
 1832444:	e0bff615 	stw	r2,-40(fp)
    chk_sum = (chk_sum >> 16) + chk_sum;
 1832448:	e0bff617 	ldw	r2,-40(fp)
 183244c:	1004d43a 	srli	r2,r2,16
 1832450:	e0fff617 	ldw	r3,-40(fp)
 1832454:	1885883a 	add	r2,r3,r2
 1832458:	e0bff615 	stw	r2,-40(fp)
    chk_sum = ~chk_sum;
 183245c:	e0bff617 	ldw	r2,-40(fp)
 1832460:	0084303a 	nor	r2,zero,r2
 1832464:	e0bff615 	stw	r2,-40(fp)
    iphdr->_chksum = chk_sum; /* network order */
 1832468:	e0bff617 	ldw	r2,-40(fp)
 183246c:	100d883a 	mov	r6,r2
 1832470:	e0bff817 	ldw	r2,-32(fp)
 1832474:	30ffffcc 	andi	r3,r6,65535
 1832478:	19403fcc 	andi	r5,r3,255
 183247c:	10c00283 	ldbu	r3,10(r2)
 1832480:	1806703a 	and	r3,r3,zero
 1832484:	1809883a 	mov	r4,r3
 1832488:	2807883a 	mov	r3,r5
 183248c:	20c6b03a 	or	r3,r4,r3
 1832490:	10c00285 	stb	r3,10(r2)
 1832494:	30ffffcc 	andi	r3,r6,65535
 1832498:	1806d23a 	srli	r3,r3,8
 183249c:	197fffcc 	andi	r5,r3,65535
 18324a0:	10c002c3 	ldbu	r3,11(r2)
 18324a4:	1806703a 	and	r3,r3,zero
 18324a8:	1809883a 	mov	r4,r3
 18324ac:	2807883a 	mov	r3,r5
 18324b0:	20c6b03a 	or	r3,r4,r3
 18324b4:	10c002c5 	stb	r3,11(r2)
 18324b8:	00001106 	br	1832500 <ip_output_if+0x5c4>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 18324bc:	e0bffa17 	ldw	r2,-24(fp)
 18324c0:	10800117 	ldw	r2,4(r2)
 18324c4:	e0bff815 	stw	r2,-32(fp)
    ip_addr_copy(dest_addr, iphdr->dest);
 18324c8:	e0bff817 	ldw	r2,-32(fp)
 18324cc:	10c00403 	ldbu	r3,16(r2)
 18324d0:	11000443 	ldbu	r4,17(r2)
 18324d4:	2008923a 	slli	r4,r4,8
 18324d8:	20c6b03a 	or	r3,r4,r3
 18324dc:	11000483 	ldbu	r4,18(r2)
 18324e0:	2008943a 	slli	r4,r4,16
 18324e4:	20c6b03a 	or	r3,r4,r3
 18324e8:	108004c3 	ldbu	r2,19(r2)
 18324ec:	1004963a 	slli	r2,r2,24
 18324f0:	10c4b03a 	or	r2,r2,r3
 18324f4:	e0bff915 	stw	r2,-28(fp)
    dest = &dest_addr;
 18324f8:	e0bff904 	addi	r2,fp,-28
 18324fc:	e0bffc15 	stw	r2,-16(fp)
  }

  IP_STATS_INC(ip.xmit);
 1832500:	008061f4 	movhi	r2,391
 1832504:	10a77104 	addi	r2,r2,-25148
 1832508:	10802417 	ldw	r2,144(r2)
 183250c:	10c00044 	addi	r3,r2,1
 1832510:	008061f4 	movhi	r2,391
 1832514:	10a77104 	addi	r2,r2,-25148
 1832518:	10c02415 	stw	r3,144(r2)
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 183251c:	e0800417 	ldw	r2,16(fp)
 1832520:	10800c0b 	ldhu	r2,48(r2)
 1832524:	10bfffcc 	andi	r2,r2,65535
 1832528:	10000c26 	beq	r2,zero,183255c <ip_output_if+0x620>
 183252c:	e0bffa17 	ldw	r2,-24(fp)
 1832530:	1100020b 	ldhu	r4,8(r2)
 1832534:	e0800417 	ldw	r2,16(fp)
 1832538:	10c00c0b 	ldhu	r3,48(r2)
 183253c:	20bfffcc 	andi	r2,r4,65535
 1832540:	18ffffcc 	andi	r3,r3,65535
 1832544:	1880052e 	bgeu	r3,r2,183255c <ip_output_if+0x620>
    return ip_frag(p, netif, dest);
 1832548:	e1bffc17 	ldw	r6,-16(fp)
 183254c:	e1400417 	ldw	r5,16(fp)
 1832550:	e13ffa17 	ldw	r4,-24(fp)
 1832554:	18339d80 	call	18339d8 <ip_frag>
 1832558:	00000606 	br	1832574 <ip_output_if+0x638>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
 183255c:	e0800417 	ldw	r2,16(fp)
 1832560:	10800517 	ldw	r2,20(r2)
 1832564:	e1bffc17 	ldw	r6,-16(fp)
 1832568:	e17ffa17 	ldw	r5,-24(fp)
 183256c:	e1000417 	ldw	r4,16(fp)
 1832570:	103ee83a 	callr	r2
}
 1832574:	e037883a 	mov	sp,fp
 1832578:	dfc00117 	ldw	ra,4(sp)
 183257c:	df000017 	ldw	fp,0(sp)
 1832580:	dec00204 	addi	sp,sp,8
 1832584:	f800283a 	ret

01832588 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
 1832588:	defff404 	addi	sp,sp,-48
 183258c:	dfc00b15 	stw	ra,44(sp)
 1832590:	df000a15 	stw	fp,40(sp)
 1832594:	df000a04 	addi	fp,sp,40
 1832598:	e13ffa15 	stw	r4,-24(fp)
 183259c:	e17ffb15 	stw	r5,-20(fp)
 18325a0:	e1bffc15 	stw	r6,-16(fp)
 18325a4:	3809883a 	mov	r4,r7
 18325a8:	e0c00217 	ldw	r3,8(fp)
 18325ac:	e0800317 	ldw	r2,12(fp)
 18325b0:	e13ffd05 	stb	r4,-12(fp)
 18325b4:	e0fffe05 	stb	r3,-8(fp)
 18325b8:	e0bfff05 	stb	r2,-4(fp)

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(src, dest)) == NULL) {
 18325bc:	e17ffc17 	ldw	r5,-16(fp)
 18325c0:	e13ffb17 	ldw	r4,-20(fp)
 18325c4:	18319100 	call	1831910 <ip_route>
 18325c8:	e0bff915 	stw	r2,-28(fp)
 18325cc:	e0bff917 	ldw	r2,-28(fp)
 18325d0:	1000091e 	bne	r2,zero,18325f8 <ip_output+0x70>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 18325d4:	008061f4 	movhi	r2,391
 18325d8:	10a77104 	addi	r2,r2,-25148
 18325dc:	10802b17 	ldw	r2,172(r2)
 18325e0:	10c00044 	addi	r3,r2,1
 18325e4:	008061f4 	movhi	r2,391
 18325e8:	10a77104 	addi	r2,r2,-25148
 18325ec:	10c02b15 	stw	r3,172(r2)
    return ERR_RTE;
 18325f0:	00bfff04 	movi	r2,-4
 18325f4:	00000c06 	br	1832628 <ip_output+0xa0>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
 18325f8:	e17ffd03 	ldbu	r5,-12(fp)
 18325fc:	e0bffe03 	ldbu	r2,-8(fp)
 1832600:	e0ffff03 	ldbu	r3,-4(fp)
 1832604:	e13ff917 	ldw	r4,-28(fp)
 1832608:	d9000215 	stw	r4,8(sp)
 183260c:	d8c00115 	stw	r3,4(sp)
 1832610:	d8800015 	stw	r2,0(sp)
 1832614:	280f883a 	mov	r7,r5
 1832618:	e1bffc17 	ldw	r6,-16(fp)
 183261c:	e17ffb17 	ldw	r5,-20(fp)
 1832620:	e13ffa17 	ldw	r4,-24(fp)
 1832624:	1831f3c0 	call	1831f3c <ip_output_if>
}
 1832628:	e037883a 	mov	sp,fp
 183262c:	dfc00117 	ldw	ra,4(sp)
 1832630:	df000017 	ldw	fp,0(sp)
 1832634:	dec00204 	addi	sp,sp,8
 1832638:	f800283a 	ret

0183263c <ip_output_hinted>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output_hinted(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto, u8_t *addr_hint)
{
 183263c:	defff304 	addi	sp,sp,-52
 1832640:	dfc00c15 	stw	ra,48(sp)
 1832644:	df000b15 	stw	fp,44(sp)
 1832648:	df000b04 	addi	fp,sp,44
 183264c:	e13ffa15 	stw	r4,-24(fp)
 1832650:	e17ffb15 	stw	r5,-20(fp)
 1832654:	e1bffc15 	stw	r6,-16(fp)
 1832658:	3809883a 	mov	r4,r7
 183265c:	e0c00217 	ldw	r3,8(fp)
 1832660:	e0800317 	ldw	r2,12(fp)
 1832664:	e13ffd05 	stb	r4,-12(fp)
 1832668:	e0fffe05 	stb	r3,-8(fp)
 183266c:	e0bfff05 	stb	r2,-4(fp)

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(src, dest)) == NULL) {
 1832670:	e17ffc17 	ldw	r5,-16(fp)
 1832674:	e13ffb17 	ldw	r4,-20(fp)
 1832678:	18319100 	call	1831910 <ip_route>
 183267c:	e0bff815 	stw	r2,-32(fp)
 1832680:	e0bff817 	ldw	r2,-32(fp)
 1832684:	1000091e 	bne	r2,zero,18326ac <ip_output_hinted+0x70>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 1832688:	008061f4 	movhi	r2,391
 183268c:	10a77104 	addi	r2,r2,-25148
 1832690:	10802b17 	ldw	r2,172(r2)
 1832694:	10c00044 	addi	r3,r2,1
 1832698:	008061f4 	movhi	r2,391
 183269c:	10a77104 	addi	r2,r2,-25148
 18326a0:	10c02b15 	stw	r3,172(r2)
    return ERR_RTE;
 18326a4:	00bfff04 	movi	r2,-4
 18326a8:	00001306 	br	18326f8 <ip_output_hinted+0xbc>
  }


  NETIF_SET_HWADDRHINT(netif, addr_hint);
 18326ac:	e0bff817 	ldw	r2,-32(fp)
 18326b0:	e0c00417 	ldw	r3,16(fp)
 18326b4:	10c01015 	stw	r3,64(r2)
  err = ip_output_if(p, src, dest, ttl, tos, proto, netif);
 18326b8:	e17ffd03 	ldbu	r5,-12(fp)
 18326bc:	e0bffe03 	ldbu	r2,-8(fp)
 18326c0:	e0ffff03 	ldbu	r3,-4(fp)
 18326c4:	e13ff817 	ldw	r4,-32(fp)
 18326c8:	d9000215 	stw	r4,8(sp)
 18326cc:	d8c00115 	stw	r3,4(sp)
 18326d0:	d8800015 	stw	r2,0(sp)
 18326d4:	280f883a 	mov	r7,r5
 18326d8:	e1bffc17 	ldw	r6,-16(fp)
 18326dc:	e17ffb17 	ldw	r5,-20(fp)
 18326e0:	e13ffa17 	ldw	r4,-24(fp)
 18326e4:	1831f3c0 	call	1831f3c <ip_output_if>
 18326e8:	e0bff905 	stb	r2,-28(fp)
  NETIF_SET_HWADDRHINT(netif, NULL);
 18326ec:	e0bff817 	ldw	r2,-32(fp)
 18326f0:	10001015 	stw	zero,64(r2)

  return err;
 18326f4:	e0bff903 	ldbu	r2,-28(fp)
}
 18326f8:	e037883a 	mov	sp,fp
 18326fc:	dfc00117 	ldw	ra,4(sp)
 1832700:	df000017 	ldw	fp,0(sp)
 1832704:	dec00204 	addi	sp,sp,8
 1832708:	f800283a 	ret

0183270c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 183270c:	defffb04 	addi	sp,sp,-20
 1832710:	dfc00415 	stw	ra,16(sp)
 1832714:	df000315 	stw	fp,12(sp)
 1832718:	df000304 	addi	fp,sp,12
  struct ip_reassdata *r, *prev = NULL;
 183271c:	e03ffe15 	stw	zero,-8(fp)

  r = reassdatagrams;
 1832720:	d0a81417 	ldw	r2,-24496(gp)
 1832724:	e0bffd15 	stw	r2,-12(fp)
  while (r != NULL) {
 1832728:	00001806 	br	183278c <ip_reass_tmr+0x80>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 183272c:	e0bffd17 	ldw	r2,-12(fp)
 1832730:	108007c3 	ldbu	r2,31(r2)
 1832734:	10803fcc 	andi	r2,r2,255
 1832738:	10000c26 	beq	r2,zero,183276c <ip_reass_tmr+0x60>
      r->timer--;
 183273c:	e0bffd17 	ldw	r2,-12(fp)
 1832740:	108007c3 	ldbu	r2,31(r2)
 1832744:	10bfffc4 	addi	r2,r2,-1
 1832748:	1007883a 	mov	r3,r2
 183274c:	e0bffd17 	ldw	r2,-12(fp)
 1832750:	10c007c5 	stb	r3,31(r2)
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 1832754:	e0bffd17 	ldw	r2,-12(fp)
 1832758:	e0bffe15 	stw	r2,-8(fp)
      r = r->next;
 183275c:	e0bffd17 	ldw	r2,-12(fp)
 1832760:	10800017 	ldw	r2,0(r2)
 1832764:	e0bffd15 	stw	r2,-12(fp)
 1832768:	00000806 	br	183278c <ip_reass_tmr+0x80>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 183276c:	e0bffd17 	ldw	r2,-12(fp)
 1832770:	e0bfff15 	stw	r2,-4(fp)
      /* get the next pointer before freeing */
      r = r->next;
 1832774:	e0bffd17 	ldw	r2,-12(fp)
 1832778:	10800017 	ldw	r2,0(r2)
 183277c:	e0bffd15 	stw	r2,-12(fp)
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 1832780:	e17ffe17 	ldw	r5,-8(fp)
 1832784:	e13fff17 	ldw	r4,-4(fp)
 1832788:	18327ac0 	call	18327ac <ip_reass_free_complete_datagram>
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  while (r != NULL) {
 183278c:	e0bffd17 	ldw	r2,-12(fp)
 1832790:	103fe61e 	bne	r2,zero,183272c <__alt_mem_mem_0+0xff81272c>
      r = r->next;
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
     }
   }
}
 1832794:	0001883a 	nop
 1832798:	e037883a 	mov	sp,fp
 183279c:	dfc00117 	ldw	ra,4(sp)
 18327a0:	df000017 	ldw	fp,0(sp)
 18327a4:	dec00204 	addi	sp,sp,8
 18327a8:	f800283a 	ret

018327ac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 18327ac:	defff704 	addi	sp,sp,-36
 18327b0:	dfc00815 	stw	ra,32(sp)
 18327b4:	df000715 	stw	fp,28(sp)
 18327b8:	df000704 	addi	fp,sp,28
 18327bc:	e13ffe15 	stw	r4,-8(fp)
 18327c0:	e17fff15 	stw	r5,-4(fp)
  u16_t pbufs_freed = 0;
 18327c4:	e03ff90d 	sth	zero,-28(fp)
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 18327c8:	e0bffe17 	ldw	r2,-8(fp)
 18327cc:	10800117 	ldw	r2,4(r2)
 18327d0:	10800117 	ldw	r2,4(r2)
 18327d4:	e0bffb15 	stw	r2,-20(fp)
  if (iprh->start == 0) {
 18327d8:	e0bffb17 	ldw	r2,-20(fp)
 18327dc:	10c00103 	ldbu	r3,4(r2)
 18327e0:	10800143 	ldbu	r2,5(r2)
 18327e4:	1004923a 	slli	r2,r2,8
 18327e8:	10c4b03a 	or	r2,r2,r3
 18327ec:	10bfffcc 	andi	r2,r2,65535
 18327f0:	1000251e 	bne	r2,zero,1832888 <ip_reass_free_complete_datagram+0xdc>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 18327f4:	e0bffe17 	ldw	r2,-8(fp)
 18327f8:	10800117 	ldw	r2,4(r2)
 18327fc:	e0bffa15 	stw	r2,-24(fp)
    ipr->p = iprh->next_pbuf;
 1832800:	e0bffb17 	ldw	r2,-20(fp)
 1832804:	10c00003 	ldbu	r3,0(r2)
 1832808:	11000043 	ldbu	r4,1(r2)
 183280c:	2008923a 	slli	r4,r4,8
 1832810:	20c6b03a 	or	r3,r4,r3
 1832814:	11000083 	ldbu	r4,2(r2)
 1832818:	2008943a 	slli	r4,r4,16
 183281c:	20c6b03a 	or	r3,r4,r3
 1832820:	108000c3 	ldbu	r2,3(r2)
 1832824:	1004963a 	slli	r2,r2,24
 1832828:	10c4b03a 	or	r2,r2,r3
 183282c:	1007883a 	mov	r3,r2
 1832830:	e0bffe17 	ldw	r2,-8(fp)
 1832834:	10c00115 	stw	r3,4(r2)
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 1832838:	e0bffa17 	ldw	r2,-24(fp)
 183283c:	10c00117 	ldw	r3,4(r2)
 1832840:	e0bffe17 	ldw	r2,-8(fp)
 1832844:	10800204 	addi	r2,r2,8
 1832848:	01800504 	movi	r6,20
 183284c:	100b883a 	mov	r5,r2
 1832850:	1809883a 	mov	r4,r3
 1832854:	180604c0 	call	180604c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 1832858:	01400044 	movi	r5,1
 183285c:	e13ffa17 	ldw	r4,-24(fp)
 1832860:	1830ed40 	call	1830ed4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 1832864:	e13ffa17 	ldw	r4,-24(fp)
 1832868:	181aa380 	call	181aa38 <pbuf_clen>
 183286c:	e0bffc05 	stb	r2,-16(fp)
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 1832870:	e0fffc03 	ldbu	r3,-16(fp)
 1832874:	e0bff90b 	ldhu	r2,-28(fp)
 1832878:	1885883a 	add	r2,r3,r2
 183287c:	e0bff90d 	sth	r2,-28(fp)
    pbuf_free(p);
 1832880:	e13ffa17 	ldw	r4,-24(fp)
 1832884:	181a9040 	call	181a904 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
 1832888:	e0bffe17 	ldw	r2,-8(fp)
 183288c:	10800117 	ldw	r2,4(r2)
 1832890:	e0bffa15 	stw	r2,-24(fp)
  while (p != NULL) {
 1832894:	00001a06 	br	1832900 <ip_reass_free_complete_datagram+0x154>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 1832898:	e0bffa17 	ldw	r2,-24(fp)
 183289c:	10800117 	ldw	r2,4(r2)
 18328a0:	e0bffb15 	stw	r2,-20(fp)
    pcur = p;
 18328a4:	e0bffa17 	ldw	r2,-24(fp)
 18328a8:	e0bffd15 	stw	r2,-12(fp)
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 18328ac:	e0bffb17 	ldw	r2,-20(fp)
 18328b0:	10c00003 	ldbu	r3,0(r2)
 18328b4:	11000043 	ldbu	r4,1(r2)
 18328b8:	2008923a 	slli	r4,r4,8
 18328bc:	20c6b03a 	or	r3,r4,r3
 18328c0:	11000083 	ldbu	r4,2(r2)
 18328c4:	2008943a 	slli	r4,r4,16
 18328c8:	20c6b03a 	or	r3,r4,r3
 18328cc:	108000c3 	ldbu	r2,3(r2)
 18328d0:	1004963a 	slli	r2,r2,24
 18328d4:	10c4b03a 	or	r2,r2,r3
 18328d8:	e0bffa15 	stw	r2,-24(fp)
    clen = pbuf_clen(pcur);
 18328dc:	e13ffd17 	ldw	r4,-12(fp)
 18328e0:	181aa380 	call	181aa38 <pbuf_clen>
 18328e4:	e0bffc05 	stb	r2,-16(fp)
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 18328e8:	e0fffc03 	ldbu	r3,-16(fp)
 18328ec:	e0bff90b 	ldhu	r2,-28(fp)
 18328f0:	1885883a 	add	r2,r3,r2
 18328f4:	e0bff90d 	sth	r2,-28(fp)
    pbuf_free(pcur);
 18328f8:	e13ffd17 	ldw	r4,-12(fp)
 18328fc:	181a9040 	call	181a904 <pbuf_free>
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
 1832900:	e0bffa17 	ldw	r2,-24(fp)
 1832904:	103fe41e 	bne	r2,zero,1832898 <__alt_mem_mem_0+0xff812898>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 1832908:	e17fff17 	ldw	r5,-4(fp)
 183290c:	e13ffe17 	ldw	r4,-8(fp)
 1832910:	1832ba80 	call	1832ba8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
 1832914:	d0e8150b 	ldhu	r3,-24492(gp)
 1832918:	e0bff90b 	ldhu	r2,-28(fp)
 183291c:	1885c83a 	sub	r2,r3,r2
 1832920:	d0a8150d 	sth	r2,-24492(gp)

  return pbufs_freed;
 1832924:	e0bff90b 	ldhu	r2,-28(fp)
}
 1832928:	e037883a 	mov	sp,fp
 183292c:	dfc00117 	ldw	ra,4(sp)
 1832930:	df000017 	ldw	fp,0(sp)
 1832934:	dec00204 	addi	sp,sp,8
 1832938:	f800283a 	ret

0183293c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 183293c:	defff604 	addi	sp,sp,-40
 1832940:	dfc00915 	stw	ra,36(sp)
 1832944:	df000815 	stw	fp,32(sp)
 1832948:	df000804 	addi	fp,sp,32
 183294c:	e13ffe15 	stw	r4,-8(fp)
 1832950:	e17fff15 	stw	r5,-4(fp)
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
 1832954:	e03ffb15 	stw	zero,-20(fp)
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 1832958:	e03ff915 	stw	zero,-28(fp)
    prev = NULL;
 183295c:	e03ffa15 	stw	zero,-24(fp)
    other_datagrams = 0;
 1832960:	e03ffc15 	stw	zero,-16(fp)
    r = reassdatagrams;
 1832964:	d0a81417 	ldw	r2,-24496(gp)
 1832968:	e0bff815 	stw	r2,-32(fp)
    while (r != NULL) {
 183296c:	00003f06 	br	1832a6c <ip_reass_remove_oldest_datagram+0x130>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 1832970:	e0bff817 	ldw	r2,-32(fp)
 1832974:	10c00517 	ldw	r3,20(r2)
 1832978:	e0bffe17 	ldw	r2,-8(fp)
 183297c:	11000303 	ldbu	r4,12(r2)
 1832980:	11400343 	ldbu	r5,13(r2)
 1832984:	280a923a 	slli	r5,r5,8
 1832988:	2908b03a 	or	r4,r5,r4
 183298c:	11400383 	ldbu	r5,14(r2)
 1832990:	280a943a 	slli	r5,r5,16
 1832994:	2908b03a 	or	r4,r5,r4
 1832998:	108003c3 	ldbu	r2,15(r2)
 183299c:	1004963a 	slli	r2,r2,24
 18329a0:	1104b03a 	or	r2,r2,r4
 18329a4:	1880181e 	bne	r3,r2,1832a08 <ip_reass_remove_oldest_datagram+0xcc>
 18329a8:	e0bff817 	ldw	r2,-32(fp)
 18329ac:	10c00617 	ldw	r3,24(r2)
 18329b0:	e0bffe17 	ldw	r2,-8(fp)
 18329b4:	11000403 	ldbu	r4,16(r2)
 18329b8:	11400443 	ldbu	r5,17(r2)
 18329bc:	280a923a 	slli	r5,r5,8
 18329c0:	2908b03a 	or	r4,r5,r4
 18329c4:	11400483 	ldbu	r5,18(r2)
 18329c8:	280a943a 	slli	r5,r5,16
 18329cc:	2908b03a 	or	r4,r5,r4
 18329d0:	108004c3 	ldbu	r2,19(r2)
 18329d4:	1004963a 	slli	r2,r2,24
 18329d8:	1104b03a 	or	r2,r2,r4
 18329dc:	18800a1e 	bne	r3,r2,1832a08 <ip_reass_remove_oldest_datagram+0xcc>
 18329e0:	e0bff817 	ldw	r2,-32(fp)
 18329e4:	1100030b 	ldhu	r4,12(r2)
 18329e8:	e0bffe17 	ldw	r2,-8(fp)
 18329ec:	10c00103 	ldbu	r3,4(r2)
 18329f0:	10800143 	ldbu	r2,5(r2)
 18329f4:	1004923a 	slli	r2,r2,8
 18329f8:	10c4b03a 	or	r2,r2,r3
 18329fc:	20ffffcc 	andi	r3,r4,65535
 1832a00:	10bfffcc 	andi	r2,r2,65535
 1832a04:	18801126 	beq	r3,r2,1832a4c <ip_reass_remove_oldest_datagram+0x110>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 1832a08:	e0bffc17 	ldw	r2,-16(fp)
 1832a0c:	10800044 	addi	r2,r2,1
 1832a10:	e0bffc15 	stw	r2,-16(fp)
        if (oldest == NULL) {
 1832a14:	e0bff917 	ldw	r2,-28(fp)
 1832a18:	1000031e 	bne	r2,zero,1832a28 <ip_reass_remove_oldest_datagram+0xec>
          oldest = r;
 1832a1c:	e0bff817 	ldw	r2,-32(fp)
 1832a20:	e0bff915 	stw	r2,-28(fp)
 1832a24:	00000906 	br	1832a4c <ip_reass_remove_oldest_datagram+0x110>
        } else if (r->timer <= oldest->timer) {
 1832a28:	e0bff817 	ldw	r2,-32(fp)
 1832a2c:	110007c3 	ldbu	r4,31(r2)
 1832a30:	e0bff917 	ldw	r2,-28(fp)
 1832a34:	10c007c3 	ldbu	r3,31(r2)
 1832a38:	20803fcc 	andi	r2,r4,255
 1832a3c:	18c03fcc 	andi	r3,r3,255
 1832a40:	18800236 	bltu	r3,r2,1832a4c <ip_reass_remove_oldest_datagram+0x110>
          /* older than the previous oldest */
          oldest = r;
 1832a44:	e0bff817 	ldw	r2,-32(fp)
 1832a48:	e0bff915 	stw	r2,-28(fp)
        }
      }
      if (r->next != NULL) {
 1832a4c:	e0bff817 	ldw	r2,-32(fp)
 1832a50:	10800017 	ldw	r2,0(r2)
 1832a54:	10000226 	beq	r2,zero,1832a60 <ip_reass_remove_oldest_datagram+0x124>
        prev = r;
 1832a58:	e0bff817 	ldw	r2,-32(fp)
 1832a5c:	e0bffa15 	stw	r2,-24(fp)
      }
      r = r->next;
 1832a60:	e0bff817 	ldw	r2,-32(fp)
 1832a64:	10800017 	ldw	r2,0(r2)
 1832a68:	e0bff815 	stw	r2,-32(fp)
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
    while (r != NULL) {
 1832a6c:	e0bff817 	ldw	r2,-32(fp)
 1832a70:	103fbf1e 	bne	r2,zero,1832970 <__alt_mem_mem_0+0xff812970>
      if (r->next != NULL) {
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
 1832a74:	e0bff917 	ldw	r2,-28(fp)
 1832a78:	10000826 	beq	r2,zero,1832a9c <ip_reass_remove_oldest_datagram+0x160>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
 1832a7c:	e17ffa17 	ldw	r5,-24(fp)
 1832a80:	e13ff917 	ldw	r4,-28(fp)
 1832a84:	18327ac0 	call	18327ac <ip_reass_free_complete_datagram>
 1832a88:	e0bffd15 	stw	r2,-12(fp)
      pbufs_freed += pbufs_freed_current;
 1832a8c:	e0fffb17 	ldw	r3,-20(fp)
 1832a90:	e0bffd17 	ldw	r2,-12(fp)
 1832a94:	1885883a 	add	r2,r3,r2
 1832a98:	e0bffb15 	stw	r2,-20(fp)
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 1832a9c:	e0fffb17 	ldw	r3,-20(fp)
 1832aa0:	e0bfff17 	ldw	r2,-4(fp)
 1832aa4:	1880030e 	bge	r3,r2,1832ab4 <ip_reass_remove_oldest_datagram+0x178>
 1832aa8:	e0bffc17 	ldw	r2,-16(fp)
 1832aac:	10800088 	cmpgei	r2,r2,2
 1832ab0:	103fa91e 	bne	r2,zero,1832958 <__alt_mem_mem_0+0xff812958>
  return pbufs_freed;
 1832ab4:	e0bffb17 	ldw	r2,-20(fp)
}
 1832ab8:	e037883a 	mov	sp,fp
 1832abc:	dfc00117 	ldw	ra,4(sp)
 1832ac0:	df000017 	ldw	fp,0(sp)
 1832ac4:	dec00204 	addi	sp,sp,8
 1832ac8:	f800283a 	ret

01832acc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 1832acc:	defffb04 	addi	sp,sp,-20
 1832ad0:	dfc00415 	stw	ra,16(sp)
 1832ad4:	df000315 	stw	fp,12(sp)
 1832ad8:	df000304 	addi	fp,sp,12
 1832adc:	e13ffe15 	stw	r4,-8(fp)
 1832ae0:	e17fff15 	stw	r5,-4(fp)
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 1832ae4:	01000144 	movi	r4,5
 1832ae8:	18340280 	call	1834028 <memp_malloc>
 1832aec:	e0bffd15 	stw	r2,-12(fp)
  if (ipr == NULL) {
 1832af0:	e0bffd17 	ldw	r2,-12(fp)
 1832af4:	1000141e 	bne	r2,zero,1832b48 <ip_reass_enqueue_new_datagram+0x7c>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 1832af8:	e17fff17 	ldw	r5,-4(fp)
 1832afc:	e13ffe17 	ldw	r4,-8(fp)
 1832b00:	183293c0 	call	183293c <ip_reass_remove_oldest_datagram>
 1832b04:	1007883a 	mov	r3,r2
 1832b08:	e0bfff17 	ldw	r2,-4(fp)
 1832b0c:	18800316 	blt	r3,r2,1832b1c <ip_reass_enqueue_new_datagram+0x50>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 1832b10:	01000144 	movi	r4,5
 1832b14:	18340280 	call	1834028 <memp_malloc>
 1832b18:	e0bffd15 	stw	r2,-12(fp)
    }
    if (ipr == NULL)
 1832b1c:	e0bffd17 	ldw	r2,-12(fp)
 1832b20:	1000091e 	bne	r2,zero,1832b48 <ip_reass_enqueue_new_datagram+0x7c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 1832b24:	008061f4 	movhi	r2,391
 1832b28:	10a77104 	addi	r2,r2,-25148
 1832b2c:	10801e17 	ldw	r2,120(r2)
 1832b30:	10c00044 	addi	r3,r2,1
 1832b34:	008061f4 	movhi	r2,391
 1832b38:	10a77104 	addi	r2,r2,-25148
 1832b3c:	10c01e15 	stw	r3,120(r2)
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 1832b40:	0005883a 	mov	r2,zero
 1832b44:	00001306 	br	1832b94 <ip_reass_enqueue_new_datagram+0xc8>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 1832b48:	01800804 	movi	r6,32
 1832b4c:	000b883a 	mov	r5,zero
 1832b50:	e13ffd17 	ldw	r4,-12(fp)
 1832b54:	18061940 	call	1806194 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 1832b58:	e0bffd17 	ldw	r2,-12(fp)
 1832b5c:	00c000c4 	movi	r3,3
 1832b60:	10c007c5 	stb	r3,31(r2)

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 1832b64:	d0e81417 	ldw	r3,-24496(gp)
 1832b68:	e0bffd17 	ldw	r2,-12(fp)
 1832b6c:	10c00015 	stw	r3,0(r2)
  reassdatagrams = ipr;
 1832b70:	e0bffd17 	ldw	r2,-12(fp)
 1832b74:	d0a81415 	stw	r2,-24496(gp)
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 1832b78:	e0bffd17 	ldw	r2,-12(fp)
 1832b7c:	10800204 	addi	r2,r2,8
 1832b80:	01800504 	movi	r6,20
 1832b84:	e17ffe17 	ldw	r5,-8(fp)
 1832b88:	1009883a 	mov	r4,r2
 1832b8c:	180604c0 	call	180604c <memcpy>
  return ipr;
 1832b90:	e0bffd17 	ldw	r2,-12(fp)
}
 1832b94:	e037883a 	mov	sp,fp
 1832b98:	dfc00117 	ldw	ra,4(sp)
 1832b9c:	df000017 	ldw	fp,0(sp)
 1832ba0:	dec00204 	addi	sp,sp,8
 1832ba4:	f800283a 	ret

01832ba8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 1832ba8:	defffc04 	addi	sp,sp,-16
 1832bac:	dfc00315 	stw	ra,12(sp)
 1832bb0:	df000215 	stw	fp,8(sp)
 1832bb4:	df000204 	addi	fp,sp,8
 1832bb8:	e13ffe15 	stw	r4,-8(fp)
 1832bbc:	e17fff15 	stw	r5,-4(fp)
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 1832bc0:	d0e81417 	ldw	r3,-24496(gp)
 1832bc4:	e0bffe17 	ldw	r2,-8(fp)
 1832bc8:	1880041e 	bne	r3,r2,1832bdc <ip_reass_dequeue_datagram+0x34>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 1832bcc:	e0bffe17 	ldw	r2,-8(fp)
 1832bd0:	10800017 	ldw	r2,0(r2)
 1832bd4:	d0a81415 	stw	r2,-24496(gp)
 1832bd8:	00000406 	br	1832bec <ip_reass_dequeue_datagram+0x44>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 1832bdc:	e0bffe17 	ldw	r2,-8(fp)
 1832be0:	10c00017 	ldw	r3,0(r2)
 1832be4:	e0bfff17 	ldw	r2,-4(fp)
 1832be8:	10c00015 	stw	r3,0(r2)
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
 1832bec:	e17ffe17 	ldw	r5,-8(fp)
 1832bf0:	01000144 	movi	r4,5
 1832bf4:	18341e40 	call	18341e4 <memp_free>
}
 1832bf8:	0001883a 	nop
 1832bfc:	e037883a 	mov	sp,fp
 1832c00:	dfc00117 	ldw	ra,4(sp)
 1832c04:	df000017 	ldw	fp,0(sp)
 1832c08:	dec00204 	addi	sp,sp,8
 1832c0c:	f800283a 	ret

01832c10 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
 1832c10:	defff504 	addi	sp,sp,-44
 1832c14:	dfc00a15 	stw	ra,40(sp)
 1832c18:	df000915 	stw	fp,36(sp)
 1832c1c:	df000904 	addi	fp,sp,36
 1832c20:	e13ffe15 	stw	r4,-8(fp)
 1832c24:	e17fff15 	stw	r5,-4(fp)
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 1832c28:	e03ff715 	stw	zero,-36(fp)
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 1832c2c:	00800044 	movi	r2,1
 1832c30:	e0bff915 	stw	r2,-28(fp)

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
 1832c34:	e0bfff17 	ldw	r2,-4(fp)
 1832c38:	10800117 	ldw	r2,4(r2)
 1832c3c:	e0bffa15 	stw	r2,-24(fp)
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 1832c40:	e0bffa17 	ldw	r2,-24(fp)
 1832c44:	10c00083 	ldbu	r3,2(r2)
 1832c48:	108000c3 	ldbu	r2,3(r2)
 1832c4c:	1004923a 	slli	r2,r2,8
 1832c50:	10c4b03a 	or	r2,r2,r3
 1832c54:	10bfffcc 	andi	r2,r2,65535
 1832c58:	1004d23a 	srli	r2,r2,8
 1832c5c:	1009883a 	mov	r4,r2
 1832c60:	e0bffa17 	ldw	r2,-24(fp)
 1832c64:	10c00083 	ldbu	r3,2(r2)
 1832c68:	108000c3 	ldbu	r2,3(r2)
 1832c6c:	1004923a 	slli	r2,r2,8
 1832c70:	10c4b03a 	or	r2,r2,r3
 1832c74:	10bfffcc 	andi	r2,r2,65535
 1832c78:	1004923a 	slli	r2,r2,8
 1832c7c:	2084b03a 	or	r2,r4,r2
 1832c80:	1007883a 	mov	r3,r2
 1832c84:	e0bffa17 	ldw	r2,-24(fp)
 1832c88:	10800003 	ldbu	r2,0(r2)
 1832c8c:	10803fcc 	andi	r2,r2,255
 1832c90:	108003cc 	andi	r2,r2,15
 1832c94:	1085883a 	add	r2,r2,r2
 1832c98:	1085883a 	add	r2,r2,r2
 1832c9c:	1885c83a 	sub	r2,r3,r2
 1832ca0:	e0bffb0d 	sth	r2,-20(fp)
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 1832ca4:	e0bffa17 	ldw	r2,-24(fp)
 1832ca8:	10c00183 	ldbu	r3,6(r2)
 1832cac:	108001c3 	ldbu	r2,7(r2)
 1832cb0:	1004923a 	slli	r2,r2,8
 1832cb4:	10c4b03a 	or	r2,r2,r3
 1832cb8:	10bfffcc 	andi	r2,r2,65535
 1832cbc:	1004d23a 	srli	r2,r2,8
 1832cc0:	10ffffcc 	andi	r3,r2,65535
 1832cc4:	e0bffa17 	ldw	r2,-24(fp)
 1832cc8:	11000183 	ldbu	r4,6(r2)
 1832ccc:	108001c3 	ldbu	r2,7(r2)
 1832cd0:	1004923a 	slli	r2,r2,8
 1832cd4:	1104b03a 	or	r2,r2,r4
 1832cd8:	10bfffcc 	andi	r2,r2,65535
 1832cdc:	1004923a 	slli	r2,r2,8
 1832ce0:	10bfffcc 	andi	r2,r2,65535
 1832ce4:	1884b03a 	or	r2,r3,r2
 1832ce8:	1087ffcc 	andi	r2,r2,8191
 1832cec:	100490fa 	slli	r2,r2,3
 1832cf0:	e0bffb8d 	sth	r2,-18(fp)
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 1832cf4:	e0bfff17 	ldw	r2,-4(fp)
 1832cf8:	10800117 	ldw	r2,4(r2)
 1832cfc:	e0bffc15 	stw	r2,-16(fp)
  iprh->next_pbuf = NULL;
 1832d00:	e0bffc17 	ldw	r2,-16(fp)
 1832d04:	10c00003 	ldbu	r3,0(r2)
 1832d08:	1806703a 	and	r3,r3,zero
 1832d0c:	10c00005 	stb	r3,0(r2)
 1832d10:	10c00043 	ldbu	r3,1(r2)
 1832d14:	1806703a 	and	r3,r3,zero
 1832d18:	10c00045 	stb	r3,1(r2)
 1832d1c:	10c00083 	ldbu	r3,2(r2)
 1832d20:	1806703a 	and	r3,r3,zero
 1832d24:	10c00085 	stb	r3,2(r2)
 1832d28:	10c000c3 	ldbu	r3,3(r2)
 1832d2c:	1806703a 	and	r3,r3,zero
 1832d30:	10c000c5 	stb	r3,3(r2)
  iprh->start = offset;
 1832d34:	e0bffc17 	ldw	r2,-16(fp)
 1832d38:	e0fffb8b 	ldhu	r3,-18(fp)
 1832d3c:	19403fcc 	andi	r5,r3,255
 1832d40:	10c00103 	ldbu	r3,4(r2)
 1832d44:	1806703a 	and	r3,r3,zero
 1832d48:	1809883a 	mov	r4,r3
 1832d4c:	2807883a 	mov	r3,r5
 1832d50:	20c6b03a 	or	r3,r4,r3
 1832d54:	10c00105 	stb	r3,4(r2)
 1832d58:	e0fffb8b 	ldhu	r3,-18(fp)
 1832d5c:	1806d23a 	srli	r3,r3,8
 1832d60:	197fffcc 	andi	r5,r3,65535
 1832d64:	10c00143 	ldbu	r3,5(r2)
 1832d68:	1806703a 	and	r3,r3,zero
 1832d6c:	1809883a 	mov	r4,r3
 1832d70:	2807883a 	mov	r3,r5
 1832d74:	20c6b03a 	or	r3,r4,r3
 1832d78:	10c00145 	stb	r3,5(r2)
  iprh->end = offset + len;
 1832d7c:	e0fffb8b 	ldhu	r3,-18(fp)
 1832d80:	e0bffb0b 	ldhu	r2,-20(fp)
 1832d84:	1885883a 	add	r2,r3,r2
 1832d88:	100d883a 	mov	r6,r2
 1832d8c:	e0bffc17 	ldw	r2,-16(fp)
 1832d90:	30ffffcc 	andi	r3,r6,65535
 1832d94:	19403fcc 	andi	r5,r3,255
 1832d98:	10c00183 	ldbu	r3,6(r2)
 1832d9c:	1806703a 	and	r3,r3,zero
 1832da0:	1809883a 	mov	r4,r3
 1832da4:	2807883a 	mov	r3,r5
 1832da8:	20c6b03a 	or	r3,r4,r3
 1832dac:	10c00185 	stb	r3,6(r2)
 1832db0:	30ffffcc 	andi	r3,r6,65535
 1832db4:	1806d23a 	srli	r3,r3,8
 1832db8:	197fffcc 	andi	r5,r3,65535
 1832dbc:	10c001c3 	ldbu	r3,7(r2)
 1832dc0:	1806703a 	and	r3,r3,zero
 1832dc4:	1809883a 	mov	r4,r3
 1832dc8:	2807883a 	mov	r3,r5
 1832dcc:	20c6b03a 	or	r3,r4,r3
 1832dd0:	10c001c5 	stb	r3,7(r2)

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 1832dd4:	e0bffe17 	ldw	r2,-8(fp)
 1832dd8:	10800117 	ldw	r2,4(r2)
 1832ddc:	e0bff815 	stw	r2,-32(fp)
 1832de0:	0000b606 	br	18330bc <ip_reass_chain_frag_into_datagram_and_validate+0x4ac>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 1832de4:	e0bff817 	ldw	r2,-32(fp)
 1832de8:	10800117 	ldw	r2,4(r2)
 1832dec:	e0bffd15 	stw	r2,-12(fp)
    if (iprh->start < iprh_tmp->start) {
 1832df0:	e0bffc17 	ldw	r2,-16(fp)
 1832df4:	10c00103 	ldbu	r3,4(r2)
 1832df8:	10800143 	ldbu	r2,5(r2)
 1832dfc:	1004923a 	slli	r2,r2,8
 1832e00:	10c4b03a 	or	r2,r2,r3
 1832e04:	1009883a 	mov	r4,r2
 1832e08:	e0bffd17 	ldw	r2,-12(fp)
 1832e0c:	10c00103 	ldbu	r3,4(r2)
 1832e10:	10800143 	ldbu	r2,5(r2)
 1832e14:	1004923a 	slli	r2,r2,8
 1832e18:	10c4b03a 	or	r2,r2,r3
 1832e1c:	20ffffcc 	andi	r3,r4,65535
 1832e20:	10bfffcc 	andi	r2,r2,65535
 1832e24:	18806a2e 	bgeu	r3,r2,1832fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 1832e28:	e0bffc17 	ldw	r2,-16(fp)
 1832e2c:	e0fff817 	ldw	r3,-32(fp)
 1832e30:	19403fcc 	andi	r5,r3,255
 1832e34:	10c00003 	ldbu	r3,0(r2)
 1832e38:	1806703a 	and	r3,r3,zero
 1832e3c:	1809883a 	mov	r4,r3
 1832e40:	2807883a 	mov	r3,r5
 1832e44:	20c6b03a 	or	r3,r4,r3
 1832e48:	10c00005 	stb	r3,0(r2)
 1832e4c:	e0fff817 	ldw	r3,-32(fp)
 1832e50:	1806d23a 	srli	r3,r3,8
 1832e54:	19403fcc 	andi	r5,r3,255
 1832e58:	10c00043 	ldbu	r3,1(r2)
 1832e5c:	1806703a 	and	r3,r3,zero
 1832e60:	1809883a 	mov	r4,r3
 1832e64:	2807883a 	mov	r3,r5
 1832e68:	20c6b03a 	or	r3,r4,r3
 1832e6c:	10c00045 	stb	r3,1(r2)
 1832e70:	e0fff817 	ldw	r3,-32(fp)
 1832e74:	1806d43a 	srli	r3,r3,16
 1832e78:	19403fcc 	andi	r5,r3,255
 1832e7c:	10c00083 	ldbu	r3,2(r2)
 1832e80:	1806703a 	and	r3,r3,zero
 1832e84:	1809883a 	mov	r4,r3
 1832e88:	2807883a 	mov	r3,r5
 1832e8c:	20c6b03a 	or	r3,r4,r3
 1832e90:	10c00085 	stb	r3,2(r2)
 1832e94:	e0fff817 	ldw	r3,-32(fp)
 1832e98:	180ad63a 	srli	r5,r3,24
 1832e9c:	10c000c3 	ldbu	r3,3(r2)
 1832ea0:	1806703a 	and	r3,r3,zero
 1832ea4:	1809883a 	mov	r4,r3
 1832ea8:	2807883a 	mov	r3,r5
 1832eac:	20c6b03a 	or	r3,r4,r3
 1832eb0:	10c000c5 	stb	r3,3(r2)
      if (iprh_prev != NULL) {
 1832eb4:	e0bff717 	ldw	r2,-36(fp)
 1832eb8:	10004126 	beq	r2,zero,1832fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x3b0>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 1832ebc:	e0bffc17 	ldw	r2,-16(fp)
 1832ec0:	10c00103 	ldbu	r3,4(r2)
 1832ec4:	10800143 	ldbu	r2,5(r2)
 1832ec8:	1004923a 	slli	r2,r2,8
 1832ecc:	10c4b03a 	or	r2,r2,r3
 1832ed0:	1009883a 	mov	r4,r2
 1832ed4:	e0bff717 	ldw	r2,-36(fp)
 1832ed8:	10c00183 	ldbu	r3,6(r2)
 1832edc:	108001c3 	ldbu	r2,7(r2)
 1832ee0:	1004923a 	slli	r2,r2,8
 1832ee4:	10c4b03a 	or	r2,r2,r3
 1832ee8:	20ffffcc 	andi	r3,r4,65535
 1832eec:	10bfffcc 	andi	r2,r2,65535
 1832ef0:	1880f936 	bltu	r3,r2,18332d8 <ip_reass_chain_frag_into_datagram_and_validate+0x6c8>
 1832ef4:	e0bffc17 	ldw	r2,-16(fp)
 1832ef8:	10c00183 	ldbu	r3,6(r2)
 1832efc:	108001c3 	ldbu	r2,7(r2)
 1832f00:	1004923a 	slli	r2,r2,8
 1832f04:	10c4b03a 	or	r2,r2,r3
 1832f08:	1009883a 	mov	r4,r2
 1832f0c:	e0bffd17 	ldw	r2,-12(fp)
 1832f10:	10c00103 	ldbu	r3,4(r2)
 1832f14:	10800143 	ldbu	r2,5(r2)
 1832f18:	1004923a 	slli	r2,r2,8
 1832f1c:	10c4b03a 	or	r2,r2,r3
 1832f20:	1007883a 	mov	r3,r2
 1832f24:	20bfffcc 	andi	r2,r4,65535
 1832f28:	18ffffcc 	andi	r3,r3,65535
 1832f2c:	1880ea36 	bltu	r3,r2,18332d8 <ip_reass_chain_frag_into_datagram_and_validate+0x6c8>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 1832f30:	e0bff717 	ldw	r2,-36(fp)
 1832f34:	e0ffff17 	ldw	r3,-4(fp)
 1832f38:	19403fcc 	andi	r5,r3,255
 1832f3c:	10c00003 	ldbu	r3,0(r2)
 1832f40:	1806703a 	and	r3,r3,zero
 1832f44:	1809883a 	mov	r4,r3
 1832f48:	2807883a 	mov	r3,r5
 1832f4c:	20c6b03a 	or	r3,r4,r3
 1832f50:	10c00005 	stb	r3,0(r2)
 1832f54:	e0ffff17 	ldw	r3,-4(fp)
 1832f58:	1806d23a 	srli	r3,r3,8
 1832f5c:	19403fcc 	andi	r5,r3,255
 1832f60:	10c00043 	ldbu	r3,1(r2)
 1832f64:	1806703a 	and	r3,r3,zero
 1832f68:	1809883a 	mov	r4,r3
 1832f6c:	2807883a 	mov	r3,r5
 1832f70:	20c6b03a 	or	r3,r4,r3
 1832f74:	10c00045 	stb	r3,1(r2)
 1832f78:	e0ffff17 	ldw	r3,-4(fp)
 1832f7c:	1806d43a 	srli	r3,r3,16
 1832f80:	19403fcc 	andi	r5,r3,255
 1832f84:	10c00083 	ldbu	r3,2(r2)
 1832f88:	1806703a 	and	r3,r3,zero
 1832f8c:	1809883a 	mov	r4,r3
 1832f90:	2807883a 	mov	r3,r5
 1832f94:	20c6b03a 	or	r3,r4,r3
 1832f98:	10c00085 	stb	r3,2(r2)
 1832f9c:	e0ffff17 	ldw	r3,-4(fp)
 1832fa0:	180ad63a 	srli	r5,r3,24
 1832fa4:	10c000c3 	ldbu	r3,3(r2)
 1832fa8:	1806703a 	and	r3,r3,zero
 1832fac:	1809883a 	mov	r4,r3
 1832fb0:	2807883a 	mov	r3,r5
 1832fb4:	20c6b03a 	or	r3,r4,r3
 1832fb8:	10c000c5 	stb	r3,3(r2)
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 1832fbc:	00004106 	br	18330c4 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
 1832fc0:	e0bffe17 	ldw	r2,-8(fp)
 1832fc4:	e0ffff17 	ldw	r3,-4(fp)
 1832fc8:	10c00115 	stw	r3,4(r2)
      }
      break;
 1832fcc:	00003d06 	br	18330c4 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
    } else if(iprh->start == iprh_tmp->start) {
 1832fd0:	e0bffc17 	ldw	r2,-16(fp)
 1832fd4:	10c00103 	ldbu	r3,4(r2)
 1832fd8:	10800143 	ldbu	r2,5(r2)
 1832fdc:	1004923a 	slli	r2,r2,8
 1832fe0:	10c4b03a 	or	r2,r2,r3
 1832fe4:	1009883a 	mov	r4,r2
 1832fe8:	e0bffd17 	ldw	r2,-12(fp)
 1832fec:	10c00103 	ldbu	r3,4(r2)
 1832ff0:	10800143 	ldbu	r2,5(r2)
 1832ff4:	1004923a 	slli	r2,r2,8
 1832ff8:	10c4b03a 	or	r2,r2,r3
 1832ffc:	20ffffcc 	andi	r3,r4,65535
 1833000:	10bfffcc 	andi	r2,r2,65535
 1833004:	1880b126 	beq	r3,r2,18332cc <ip_reass_chain_frag_into_datagram_and_validate+0x6bc>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
 1833008:	e0bffc17 	ldw	r2,-16(fp)
 183300c:	10c00103 	ldbu	r3,4(r2)
 1833010:	10800143 	ldbu	r2,5(r2)
 1833014:	1004923a 	slli	r2,r2,8
 1833018:	10c4b03a 	or	r2,r2,r3
 183301c:	1009883a 	mov	r4,r2
 1833020:	e0bffd17 	ldw	r2,-12(fp)
 1833024:	10c00183 	ldbu	r3,6(r2)
 1833028:	108001c3 	ldbu	r2,7(r2)
 183302c:	1004923a 	slli	r2,r2,8
 1833030:	10c4b03a 	or	r2,r2,r3
 1833034:	20ffffcc 	andi	r3,r4,65535
 1833038:	10bfffcc 	andi	r2,r2,65535
 183303c:	1880a536 	bltu	r3,r2,18332d4 <ip_reass_chain_frag_into_datagram_and_validate+0x6c4>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
 1833040:	e0bff717 	ldw	r2,-36(fp)
 1833044:	10000f26 	beq	r2,zero,1833084 <ip_reass_chain_frag_into_datagram_and_validate+0x474>
        if (iprh_prev->end != iprh_tmp->start) {
 1833048:	e0bff717 	ldw	r2,-36(fp)
 183304c:	10c00183 	ldbu	r3,6(r2)
 1833050:	108001c3 	ldbu	r2,7(r2)
 1833054:	1004923a 	slli	r2,r2,8
 1833058:	10c4b03a 	or	r2,r2,r3
 183305c:	1009883a 	mov	r4,r2
 1833060:	e0bffd17 	ldw	r2,-12(fp)
 1833064:	10c00103 	ldbu	r3,4(r2)
 1833068:	10800143 	ldbu	r2,5(r2)
 183306c:	1004923a 	slli	r2,r2,8
 1833070:	10c4b03a 	or	r2,r2,r3
 1833074:	20ffffcc 	andi	r3,r4,65535
 1833078:	10bfffcc 	andi	r2,r2,65535
 183307c:	18800126 	beq	r3,r2,1833084 <ip_reass_chain_frag_into_datagram_and_validate+0x474>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 1833080:	e03ff915 	stw	zero,-28(fp)
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 1833084:	e0bffd17 	ldw	r2,-12(fp)
 1833088:	10c00003 	ldbu	r3,0(r2)
 183308c:	11000043 	ldbu	r4,1(r2)
 1833090:	2008923a 	slli	r4,r4,8
 1833094:	20c6b03a 	or	r3,r4,r3
 1833098:	11000083 	ldbu	r4,2(r2)
 183309c:	2008943a 	slli	r4,r4,16
 18330a0:	20c6b03a 	or	r3,r4,r3
 18330a4:	108000c3 	ldbu	r2,3(r2)
 18330a8:	1004963a 	slli	r2,r2,24
 18330ac:	10c4b03a 	or	r2,r2,r3
 18330b0:	e0bff815 	stw	r2,-32(fp)
    iprh_prev = iprh_tmp;
 18330b4:	e0bffd17 	ldw	r2,-12(fp)
 18330b8:	e0bff715 	stw	r2,-36(fp)
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 18330bc:	e0bff817 	ldw	r2,-32(fp)
 18330c0:	103f481e 	bne	r2,zero,1832de4 <__alt_mem_mem_0+0xff812de4>
    q = iprh_tmp->next_pbuf;
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 18330c4:	e0bff817 	ldw	r2,-32(fp)
 18330c8:	1000381e 	bne	r2,zero,18331ac <ip_reass_chain_frag_into_datagram_and_validate+0x59c>
    if (iprh_prev != NULL) {
 18330cc:	e0bff717 	ldw	r2,-36(fp)
 18330d0:	10003326 	beq	r2,zero,18331a0 <ip_reass_chain_frag_into_datagram_and_validate+0x590>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 18330d4:	e0bff717 	ldw	r2,-36(fp)
 18330d8:	e0ffff17 	ldw	r3,-4(fp)
 18330dc:	19403fcc 	andi	r5,r3,255
 18330e0:	10c00003 	ldbu	r3,0(r2)
 18330e4:	1806703a 	and	r3,r3,zero
 18330e8:	1809883a 	mov	r4,r3
 18330ec:	2807883a 	mov	r3,r5
 18330f0:	20c6b03a 	or	r3,r4,r3
 18330f4:	10c00005 	stb	r3,0(r2)
 18330f8:	e0ffff17 	ldw	r3,-4(fp)
 18330fc:	1806d23a 	srli	r3,r3,8
 1833100:	19403fcc 	andi	r5,r3,255
 1833104:	10c00043 	ldbu	r3,1(r2)
 1833108:	1806703a 	and	r3,r3,zero
 183310c:	1809883a 	mov	r4,r3
 1833110:	2807883a 	mov	r3,r5
 1833114:	20c6b03a 	or	r3,r4,r3
 1833118:	10c00045 	stb	r3,1(r2)
 183311c:	e0ffff17 	ldw	r3,-4(fp)
 1833120:	1806d43a 	srli	r3,r3,16
 1833124:	19403fcc 	andi	r5,r3,255
 1833128:	10c00083 	ldbu	r3,2(r2)
 183312c:	1806703a 	and	r3,r3,zero
 1833130:	1809883a 	mov	r4,r3
 1833134:	2807883a 	mov	r3,r5
 1833138:	20c6b03a 	or	r3,r4,r3
 183313c:	10c00085 	stb	r3,2(r2)
 1833140:	e0ffff17 	ldw	r3,-4(fp)
 1833144:	180ad63a 	srli	r5,r3,24
 1833148:	10c000c3 	ldbu	r3,3(r2)
 183314c:	1806703a 	and	r3,r3,zero
 1833150:	1809883a 	mov	r4,r3
 1833154:	2807883a 	mov	r3,r5
 1833158:	20c6b03a 	or	r3,r4,r3
 183315c:	10c000c5 	stb	r3,3(r2)
      if (iprh_prev->end != iprh->start) {
 1833160:	e0bff717 	ldw	r2,-36(fp)
 1833164:	10c00183 	ldbu	r3,6(r2)
 1833168:	108001c3 	ldbu	r2,7(r2)
 183316c:	1004923a 	slli	r2,r2,8
 1833170:	10c4b03a 	or	r2,r2,r3
 1833174:	1009883a 	mov	r4,r2
 1833178:	e0bffc17 	ldw	r2,-16(fp)
 183317c:	10c00103 	ldbu	r3,4(r2)
 1833180:	10800143 	ldbu	r2,5(r2)
 1833184:	1004923a 	slli	r2,r2,8
 1833188:	10c4b03a 	or	r2,r2,r3
 183318c:	20ffffcc 	andi	r3,r4,65535
 1833190:	10bfffcc 	andi	r2,r2,65535
 1833194:	18800526 	beq	r3,r2,18331ac <ip_reass_chain_frag_into_datagram_and_validate+0x59c>
        valid = 0;
 1833198:	e03ff915 	stw	zero,-28(fp)
 183319c:	00000306 	br	18331ac <ip_reass_chain_frag_into_datagram_and_validate+0x59c>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 18331a0:	e0bffe17 	ldw	r2,-8(fp)
 18331a4:	e0ffff17 	ldw	r3,-4(fp)
 18331a8:	10c00115 	stw	r3,4(r2)
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 18331ac:	e0bffe17 	ldw	r2,-8(fp)
 18331b0:	10800783 	ldbu	r2,30(r2)
 18331b4:	10803fcc 	andi	r2,r2,255
 18331b8:	1080004c 	andi	r2,r2,1
 18331bc:	10004126 	beq	r2,zero,18332c4 <ip_reass_chain_frag_into_datagram_and_validate+0x6b4>
    /* and had no wholes so far */
    if (valid) {
 18331c0:	e0bff917 	ldw	r2,-28(fp)
 18331c4:	10003d26 	beq	r2,zero,18332bc <ip_reass_chain_frag_into_datagram_and_validate+0x6ac>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
 18331c8:	e0bffe17 	ldw	r2,-8(fp)
 18331cc:	10800117 	ldw	r2,4(r2)
 18331d0:	10800117 	ldw	r2,4(r2)
 18331d4:	10c00103 	ldbu	r3,4(r2)
 18331d8:	10800143 	ldbu	r2,5(r2)
 18331dc:	1004923a 	slli	r2,r2,8
 18331e0:	10c4b03a 	or	r2,r2,r3
 18331e4:	10bfffcc 	andi	r2,r2,65535
 18331e8:	10000226 	beq	r2,zero,18331f4 <ip_reass_chain_frag_into_datagram_and_validate+0x5e4>
        valid = 0;
 18331ec:	e03ff915 	stw	zero,-28(fp)
 18331f0:	00003206 	br	18332bc <ip_reass_chain_frag_into_datagram_and_validate+0x6ac>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
 18331f4:	e0bffc17 	ldw	r2,-16(fp)
 18331f8:	e0bff715 	stw	r2,-36(fp)
        q = iprh->next_pbuf;
 18331fc:	e0bffc17 	ldw	r2,-16(fp)
 1833200:	10c00003 	ldbu	r3,0(r2)
 1833204:	11000043 	ldbu	r4,1(r2)
 1833208:	2008923a 	slli	r4,r4,8
 183320c:	20c6b03a 	or	r3,r4,r3
 1833210:	11000083 	ldbu	r4,2(r2)
 1833214:	2008943a 	slli	r4,r4,16
 1833218:	20c6b03a 	or	r3,r4,r3
 183321c:	108000c3 	ldbu	r2,3(r2)
 1833220:	1004963a 	slli	r2,r2,24
 1833224:	10c4b03a 	or	r2,r2,r3
 1833228:	e0bff815 	stw	r2,-32(fp)
        while (q != NULL) {
 183322c:	00002106 	br	18332b4 <ip_reass_chain_frag_into_datagram_and_validate+0x6a4>
          iprh = (struct ip_reass_helper*)q->payload;
 1833230:	e0bff817 	ldw	r2,-32(fp)
 1833234:	10800117 	ldw	r2,4(r2)
 1833238:	e0bffc15 	stw	r2,-16(fp)
          if (iprh_prev->end != iprh->start) {
 183323c:	e0bff717 	ldw	r2,-36(fp)
 1833240:	10c00183 	ldbu	r3,6(r2)
 1833244:	108001c3 	ldbu	r2,7(r2)
 1833248:	1004923a 	slli	r2,r2,8
 183324c:	10c4b03a 	or	r2,r2,r3
 1833250:	1009883a 	mov	r4,r2
 1833254:	e0bffc17 	ldw	r2,-16(fp)
 1833258:	10c00103 	ldbu	r3,4(r2)
 183325c:	10800143 	ldbu	r2,5(r2)
 1833260:	1004923a 	slli	r2,r2,8
 1833264:	10c4b03a 	or	r2,r2,r3
 1833268:	20ffffcc 	andi	r3,r4,65535
 183326c:	10bfffcc 	andi	r2,r2,65535
 1833270:	18800226 	beq	r3,r2,183327c <ip_reass_chain_frag_into_datagram_and_validate+0x66c>
            valid = 0;
 1833274:	e03ff915 	stw	zero,-28(fp)
            break;
 1833278:	00001006 	br	18332bc <ip_reass_chain_frag_into_datagram_and_validate+0x6ac>
          }
          iprh_prev = iprh;
 183327c:	e0bffc17 	ldw	r2,-16(fp)
 1833280:	e0bff715 	stw	r2,-36(fp)
          q = iprh->next_pbuf;
 1833284:	e0bffc17 	ldw	r2,-16(fp)
 1833288:	10c00003 	ldbu	r3,0(r2)
 183328c:	11000043 	ldbu	r4,1(r2)
 1833290:	2008923a 	slli	r4,r4,8
 1833294:	20c6b03a 	or	r3,r4,r3
 1833298:	11000083 	ldbu	r4,2(r2)
 183329c:	2008943a 	slli	r4,r4,16
 18332a0:	20c6b03a 	or	r3,r4,r3
 18332a4:	108000c3 	ldbu	r2,3(r2)
 18332a8:	1004963a 	slli	r2,r2,24
 18332ac:	10c4b03a 	or	r2,r2,r3
 18332b0:	e0bff815 	stw	r2,-32(fp)
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
 18332b4:	e0bff817 	ldw	r2,-32(fp)
 18332b8:	103fdd1e 	bne	r2,zero,1833230 <__alt_mem_mem_0+0xff813230>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
 18332bc:	e0bff917 	ldw	r2,-28(fp)
 18332c0:	00000e06 	br	18332fc <ip_reass_chain_frag_into_datagram_and_validate+0x6ec>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
 18332c4:	0005883a 	mov	r2,zero
 18332c8:	00000c06 	br	18332fc <ip_reass_chain_frag_into_datagram_and_validate+0x6ec>
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
 18332cc:	0001883a 	nop
 18332d0:	00000106 	br	18332d8 <ip_reass_chain_frag_into_datagram_and_validate+0x6c8>
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
 18332d4:	0001883a 	nop
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 18332d8:	e13fff17 	ldw	r4,-4(fp)
 18332dc:	181aa380 	call	181aa38 <pbuf_clen>
 18332e0:	d0e8150b 	ldhu	r3,-24492(gp)
 18332e4:	10803fcc 	andi	r2,r2,255
 18332e8:	1885c83a 	sub	r2,r3,r2
 18332ec:	d0a8150d 	sth	r2,-24492(gp)
  pbuf_free(new_p);
 18332f0:	e13fff17 	ldw	r4,-4(fp)
 18332f4:	181a9040 	call	181a904 <pbuf_free>
  return 0;
 18332f8:	0005883a 	mov	r2,zero
#endif /* IP_REASS_CHECK_OVERLAP */
}
 18332fc:	e037883a 	mov	sp,fp
 1833300:	dfc00117 	ldw	ra,4(sp)
 1833304:	df000017 	ldw	fp,0(sp)
 1833308:	dec00204 	addi	sp,sp,8
 183330c:	f800283a 	ret

01833310 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
 1833310:	defff604 	addi	sp,sp,-40
 1833314:	dfc00915 	stw	ra,36(sp)
 1833318:	df000815 	stw	fp,32(sp)
 183331c:	df000804 	addi	fp,sp,32
 1833320:	e13fff15 	stw	r4,-4(fp)
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
 1833324:	e03ffa15 	stw	zero,-24(fp)

  IPFRAG_STATS_INC(ip_frag.recv);
 1833328:	008061f4 	movhi	r2,391
 183332c:	10a77104 	addi	r2,r2,-25148
 1833330:	10801917 	ldw	r2,100(r2)
 1833334:	10c00044 	addi	r3,r2,1
 1833338:	008061f4 	movhi	r2,391
 183333c:	10a77104 	addi	r2,r2,-25148
 1833340:	10c01915 	stw	r3,100(r2)
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
 1833344:	e0bfff17 	ldw	r2,-4(fp)
 1833348:	10800117 	ldw	r2,4(r2)
 183334c:	e0bffb15 	stw	r2,-20(fp)

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 1833350:	e0bffb17 	ldw	r2,-20(fp)
 1833354:	10800003 	ldbu	r2,0(r2)
 1833358:	10803fcc 	andi	r2,r2,255
 183335c:	108003cc 	andi	r2,r2,15
 1833360:	1085883a 	add	r2,r2,r2
 1833364:	1085883a 	add	r2,r2,r2
 1833368:	10800520 	cmpeqi	r2,r2,20
 183336c:	1000081e 	bne	r2,zero,1833390 <ip_reass+0x80>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 1833370:	008061f4 	movhi	r2,391
 1833374:	10a77104 	addi	r2,r2,-25148
 1833378:	10802217 	ldw	r2,136(r2)
 183337c:	10c00044 	addi	r3,r2,1
 1833380:	008061f4 	movhi	r2,391
 1833384:	10a77104 	addi	r2,r2,-25148
 1833388:	10c02215 	stw	r3,136(r2)
    goto nullreturn;
 183338c:	00015406 	br	18338e0 <ip_reass+0x5d0>
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 1833390:	e0bffb17 	ldw	r2,-20(fp)
 1833394:	10c00183 	ldbu	r3,6(r2)
 1833398:	108001c3 	ldbu	r2,7(r2)
 183339c:	1004923a 	slli	r2,r2,8
 18333a0:	10c4b03a 	or	r2,r2,r3
 18333a4:	10bfffcc 	andi	r2,r2,65535
 18333a8:	1004d23a 	srli	r2,r2,8
 18333ac:	10ffffcc 	andi	r3,r2,65535
 18333b0:	e0bffb17 	ldw	r2,-20(fp)
 18333b4:	11000183 	ldbu	r4,6(r2)
 18333b8:	108001c3 	ldbu	r2,7(r2)
 18333bc:	1004923a 	slli	r2,r2,8
 18333c0:	1104b03a 	or	r2,r2,r4
 18333c4:	10bfffcc 	andi	r2,r2,65535
 18333c8:	1004923a 	slli	r2,r2,8
 18333cc:	10bfffcc 	andi	r2,r2,65535
 18333d0:	1884b03a 	or	r2,r3,r2
 18333d4:	1087ffcc 	andi	r2,r2,8191
 18333d8:	100490fa 	slli	r2,r2,3
 18333dc:	e0bffc0d 	sth	r2,-16(fp)
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 18333e0:	e0bffb17 	ldw	r2,-20(fp)
 18333e4:	10c00083 	ldbu	r3,2(r2)
 18333e8:	108000c3 	ldbu	r2,3(r2)
 18333ec:	1004923a 	slli	r2,r2,8
 18333f0:	10c4b03a 	or	r2,r2,r3
 18333f4:	10bfffcc 	andi	r2,r2,65535
 18333f8:	1004d23a 	srli	r2,r2,8
 18333fc:	1009883a 	mov	r4,r2
 1833400:	e0bffb17 	ldw	r2,-20(fp)
 1833404:	10c00083 	ldbu	r3,2(r2)
 1833408:	108000c3 	ldbu	r2,3(r2)
 183340c:	1004923a 	slli	r2,r2,8
 1833410:	10c4b03a 	or	r2,r2,r3
 1833414:	10bfffcc 	andi	r2,r2,65535
 1833418:	1004923a 	slli	r2,r2,8
 183341c:	2084b03a 	or	r2,r4,r2
 1833420:	1007883a 	mov	r3,r2
 1833424:	e0bffb17 	ldw	r2,-20(fp)
 1833428:	10800003 	ldbu	r2,0(r2)
 183342c:	10803fcc 	andi	r2,r2,255
 1833430:	108003cc 	andi	r2,r2,15
 1833434:	1085883a 	add	r2,r2,r2
 1833438:	1085883a 	add	r2,r2,r2
 183343c:	1885c83a 	sub	r2,r3,r2
 1833440:	e0bffc8d 	sth	r2,-14(fp)

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 1833444:	e13fff17 	ldw	r4,-4(fp)
 1833448:	181aa380 	call	181aa38 <pbuf_clen>
 183344c:	e0bffd05 	stb	r2,-12(fp)
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 1833450:	d0a8150b 	ldhu	r2,-24492(gp)
 1833454:	10ffffcc 	andi	r3,r2,65535
 1833458:	e0bffd03 	ldbu	r2,-12(fp)
 183345c:	1885883a 	add	r2,r3,r2
 1833460:	108002d0 	cmplti	r2,r2,11
 1833464:	1000131e 	bne	r2,zero,18334b4 <ip_reass+0x1a4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 1833468:	e0bffd03 	ldbu	r2,-12(fp)
 183346c:	100b883a 	mov	r5,r2
 1833470:	e13ffb17 	ldw	r4,-20(fp)
 1833474:	183293c0 	call	183293c <ip_reass_remove_oldest_datagram>
 1833478:	10000626 	beq	r2,zero,1833494 <ip_reass+0x184>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 183347c:	d0a8150b 	ldhu	r2,-24492(gp)
 1833480:	10ffffcc 	andi	r3,r2,65535
 1833484:	e0bffd03 	ldbu	r2,-12(fp)
 1833488:	1885883a 	add	r2,r3,r2

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 183348c:	108002d0 	cmplti	r2,r2,11
 1833490:	1000081e 	bne	r2,zero,18334b4 <ip_reass+0x1a4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 1833494:	008061f4 	movhi	r2,391
 1833498:	10a77104 	addi	r2,r2,-25148
 183349c:	10801e17 	ldw	r2,120(r2)
 18334a0:	10c00044 	addi	r3,r2,1
 18334a4:	008061f4 	movhi	r2,391
 18334a8:	10a77104 	addi	r2,r2,-25148
 18334ac:	10c01e15 	stw	r3,120(r2)
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 18334b0:	00010b06 	br	18338e0 <ip_reass+0x5d0>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 18334b4:	d0a81417 	ldw	r2,-24496(gp)
 18334b8:	e0bff915 	stw	r2,-28(fp)
 18334bc:	00003306 	br	183358c <ip_reass+0x27c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 18334c0:	e0bff917 	ldw	r2,-28(fp)
 18334c4:	10c00517 	ldw	r3,20(r2)
 18334c8:	e0bffb17 	ldw	r2,-20(fp)
 18334cc:	11000303 	ldbu	r4,12(r2)
 18334d0:	11400343 	ldbu	r5,13(r2)
 18334d4:	280a923a 	slli	r5,r5,8
 18334d8:	2908b03a 	or	r4,r5,r4
 18334dc:	11400383 	ldbu	r5,14(r2)
 18334e0:	280a943a 	slli	r5,r5,16
 18334e4:	2908b03a 	or	r4,r5,r4
 18334e8:	108003c3 	ldbu	r2,15(r2)
 18334ec:	1004963a 	slli	r2,r2,24
 18334f0:	1104b03a 	or	r2,r2,r4
 18334f4:	1880201e 	bne	r3,r2,1833578 <ip_reass+0x268>
 18334f8:	e0bff917 	ldw	r2,-28(fp)
 18334fc:	10c00617 	ldw	r3,24(r2)
 1833500:	e0bffb17 	ldw	r2,-20(fp)
 1833504:	11000403 	ldbu	r4,16(r2)
 1833508:	11400443 	ldbu	r5,17(r2)
 183350c:	280a923a 	slli	r5,r5,8
 1833510:	2908b03a 	or	r4,r5,r4
 1833514:	11400483 	ldbu	r5,18(r2)
 1833518:	280a943a 	slli	r5,r5,16
 183351c:	2908b03a 	or	r4,r5,r4
 1833520:	108004c3 	ldbu	r2,19(r2)
 1833524:	1004963a 	slli	r2,r2,24
 1833528:	1104b03a 	or	r2,r2,r4
 183352c:	1880121e 	bne	r3,r2,1833578 <ip_reass+0x268>
 1833530:	e0bff917 	ldw	r2,-28(fp)
 1833534:	1100030b 	ldhu	r4,12(r2)
 1833538:	e0bffb17 	ldw	r2,-20(fp)
 183353c:	10c00103 	ldbu	r3,4(r2)
 1833540:	10800143 	ldbu	r2,5(r2)
 1833544:	1004923a 	slli	r2,r2,8
 1833548:	10c4b03a 	or	r2,r2,r3
 183354c:	20ffffcc 	andi	r3,r4,65535
 1833550:	10bfffcc 	andi	r2,r2,65535
 1833554:	1880081e 	bne	r3,r2,1833578 <ip_reass+0x268>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 1833558:	008061f4 	movhi	r2,391
 183355c:	10a77104 	addi	r2,r2,-25148
 1833560:	10802317 	ldw	r2,140(r2)
 1833564:	10c00044 	addi	r3,r2,1
 1833568:	008061f4 	movhi	r2,391
 183356c:	10a77104 	addi	r2,r2,-25148
 1833570:	10c02315 	stw	r3,140(r2)
      break;
 1833574:	00000706 	br	1833594 <ip_reass+0x284>
    }
    ipr_prev = ipr;
 1833578:	e0bff917 	ldw	r2,-28(fp)
 183357c:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 1833580:	e0bff917 	ldw	r2,-28(fp)
 1833584:	10800017 	ldw	r2,0(r2)
 1833588:	e0bff915 	stw	r2,-28(fp)
 183358c:	e0bff917 	ldw	r2,-28(fp)
 1833590:	103fcb1e 	bne	r2,zero,18334c0 <__alt_mem_mem_0+0xff8134c0>
      break;
    }
    ipr_prev = ipr;
  }

  if (ipr == NULL) {
 1833594:	e0bff917 	ldw	r2,-28(fp)
 1833598:	1000081e 	bne	r2,zero,18335bc <ip_reass+0x2ac>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 183359c:	e0bffd03 	ldbu	r2,-12(fp)
 18335a0:	100b883a 	mov	r5,r2
 18335a4:	e13ffb17 	ldw	r4,-20(fp)
 18335a8:	1832acc0 	call	1832acc <ip_reass_enqueue_new_datagram>
 18335ac:	e0bff915 	stw	r2,-28(fp)
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
 18335b0:	e0bff917 	ldw	r2,-28(fp)
 18335b4:	1000271e 	bne	r2,zero,1833654 <ip_reass+0x344>
      goto nullreturn;
 18335b8:	0000c906 	br	18338e0 <ip_reass+0x5d0>
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 18335bc:	e0bffb17 	ldw	r2,-20(fp)
 18335c0:	10c00183 	ldbu	r3,6(r2)
 18335c4:	108001c3 	ldbu	r2,7(r2)
 18335c8:	1004923a 	slli	r2,r2,8
 18335cc:	10c4b03a 	or	r2,r2,r3
 18335d0:	10bfffcc 	andi	r2,r2,65535
 18335d4:	1004d23a 	srli	r2,r2,8
 18335d8:	10ffffcc 	andi	r3,r2,65535
 18335dc:	e0bffb17 	ldw	r2,-20(fp)
 18335e0:	11000183 	ldbu	r4,6(r2)
 18335e4:	108001c3 	ldbu	r2,7(r2)
 18335e8:	1004923a 	slli	r2,r2,8
 18335ec:	1104b03a 	or	r2,r2,r4
 18335f0:	10bfffcc 	andi	r2,r2,65535
 18335f4:	1004923a 	slli	r2,r2,8
 18335f8:	10bfffcc 	andi	r2,r2,65535
 18335fc:	1884b03a 	or	r2,r3,r2
 1833600:	1087ffcc 	andi	r2,r2,8191
 1833604:	1000131e 	bne	r2,zero,1833654 <ip_reass+0x344>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 1833608:	e0bff917 	ldw	r2,-28(fp)
 183360c:	1080038b 	ldhu	r2,14(r2)
 1833610:	10bfffcc 	andi	r2,r2,65535
 1833614:	1004d23a 	srli	r2,r2,8
 1833618:	10ffffcc 	andi	r3,r2,65535
 183361c:	e0bff917 	ldw	r2,-28(fp)
 1833620:	1080038b 	ldhu	r2,14(r2)
 1833624:	10bfffcc 	andi	r2,r2,65535
 1833628:	1004923a 	slli	r2,r2,8
 183362c:	10bfffcc 	andi	r2,r2,65535
 1833630:	1884b03a 	or	r2,r3,r2
 1833634:	1087ffcc 	andi	r2,r2,8191
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 1833638:	10000626 	beq	r2,zero,1833654 <ip_reass+0x344>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 183363c:	e0bff917 	ldw	r2,-28(fp)
 1833640:	10800204 	addi	r2,r2,8
 1833644:	01800504 	movi	r6,20
 1833648:	e17ffb17 	ldw	r5,-20(fp)
 183364c:	1009883a 	mov	r4,r2
 1833650:	180604c0 	call	180604c <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
 1833654:	e0fffd03 	ldbu	r3,-12(fp)
 1833658:	d0a8150b 	ldhu	r2,-24492(gp)
 183365c:	1885883a 	add	r2,r3,r2
 1833660:	d0a8150d 	sth	r2,-24492(gp)

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 1833664:	e0bffb17 	ldw	r2,-20(fp)
 1833668:	10c00183 	ldbu	r3,6(r2)
 183366c:	108001c3 	ldbu	r2,7(r2)
 1833670:	1004923a 	slli	r2,r2,8
 1833674:	10c4b03a 	or	r2,r2,r3
 1833678:	10bfffcc 	andi	r2,r2,65535
 183367c:	1080080c 	andi	r2,r2,32
 1833680:	10000c1e 	bne	r2,zero,18336b4 <ip_reass+0x3a4>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 1833684:	e0bff917 	ldw	r2,-28(fp)
 1833688:	10800783 	ldbu	r2,30(r2)
 183368c:	10800054 	ori	r2,r2,1
 1833690:	1007883a 	mov	r3,r2
 1833694:	e0bff917 	ldw	r2,-28(fp)
 1833698:	10c00785 	stb	r3,30(r2)
    ipr->datagram_len = offset + len;
 183369c:	e0fffc0b 	ldhu	r3,-16(fp)
 18336a0:	e0bffc8b 	ldhu	r2,-14(fp)
 18336a4:	1885883a 	add	r2,r3,r2
 18336a8:	1007883a 	mov	r3,r2
 18336ac:	e0bff917 	ldw	r2,-28(fp)
 18336b0:	10c0070d 	sth	r3,28(r2)
     ("ip_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
 18336b4:	e17fff17 	ldw	r5,-4(fp)
 18336b8:	e13ff917 	ldw	r4,-28(fp)
 18336bc:	1832c100 	call	1832c10 <ip_reass_chain_frag_into_datagram_and_validate>
 18336c0:	10008526 	beq	r2,zero,18338d8 <ip_reass+0x5c8>
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 18336c4:	e0bff917 	ldw	r2,-28(fp)
 18336c8:	1080070b 	ldhu	r2,28(r2)
 18336cc:	10800504 	addi	r2,r2,20
 18336d0:	1007883a 	mov	r3,r2
 18336d4:	e0bff917 	ldw	r2,-28(fp)
 18336d8:	10c0070d 	sth	r3,28(r2)

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 18336dc:	e0bff917 	ldw	r2,-28(fp)
 18336e0:	10800117 	ldw	r2,4(r2)
 18336e4:	10800117 	ldw	r2,4(r2)
 18336e8:	10c00003 	ldbu	r3,0(r2)
 18336ec:	11000043 	ldbu	r4,1(r2)
 18336f0:	2008923a 	slli	r4,r4,8
 18336f4:	20c6b03a 	or	r3,r4,r3
 18336f8:	11000083 	ldbu	r4,2(r2)
 18336fc:	2008943a 	slli	r4,r4,16
 1833700:	20c6b03a 	or	r3,r4,r3
 1833704:	108000c3 	ldbu	r2,3(r2)
 1833708:	1004963a 	slli	r2,r2,24
 183370c:	10c4b03a 	or	r2,r2,r3
 1833710:	e0bff815 	stw	r2,-32(fp)

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 1833714:	e0bff917 	ldw	r2,-28(fp)
 1833718:	10800117 	ldw	r2,4(r2)
 183371c:	10800117 	ldw	r2,4(r2)
 1833720:	e0bffb15 	stw	r2,-20(fp)
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 1833724:	e0bff917 	ldw	r2,-28(fp)
 1833728:	10800204 	addi	r2,r2,8
 183372c:	01800504 	movi	r6,20
 1833730:	100b883a 	mov	r5,r2
 1833734:	e13ffb17 	ldw	r4,-20(fp)
 1833738:	180604c0 	call	180604c <memcpy>
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 183373c:	e0bff917 	ldw	r2,-28(fp)
 1833740:	1080070b 	ldhu	r2,28(r2)
 1833744:	10bfffcc 	andi	r2,r2,65535
 1833748:	1004d23a 	srli	r2,r2,8
 183374c:	1007883a 	mov	r3,r2
 1833750:	e0bff917 	ldw	r2,-28(fp)
 1833754:	1080070b 	ldhu	r2,28(r2)
 1833758:	10bfffcc 	andi	r2,r2,65535
 183375c:	1004923a 	slli	r2,r2,8
 1833760:	1884b03a 	or	r2,r3,r2
 1833764:	100d883a 	mov	r6,r2
 1833768:	e0bffb17 	ldw	r2,-20(fp)
 183376c:	30ffffcc 	andi	r3,r6,65535
 1833770:	19403fcc 	andi	r5,r3,255
 1833774:	10c00083 	ldbu	r3,2(r2)
 1833778:	1806703a 	and	r3,r3,zero
 183377c:	1809883a 	mov	r4,r3
 1833780:	2807883a 	mov	r3,r5
 1833784:	20c6b03a 	or	r3,r4,r3
 1833788:	10c00085 	stb	r3,2(r2)
 183378c:	30ffffcc 	andi	r3,r6,65535
 1833790:	1806d23a 	srli	r3,r3,8
 1833794:	197fffcc 	andi	r5,r3,65535
 1833798:	10c000c3 	ldbu	r3,3(r2)
 183379c:	1806703a 	and	r3,r3,zero
 18337a0:	1809883a 	mov	r4,r3
 18337a4:	2807883a 	mov	r3,r5
 18337a8:	20c6b03a 	or	r3,r4,r3
 18337ac:	10c000c5 	stb	r3,3(r2)
    IPH_OFFSET_SET(fraghdr, 0);
 18337b0:	e0bffb17 	ldw	r2,-20(fp)
 18337b4:	10c00183 	ldbu	r3,6(r2)
 18337b8:	1806703a 	and	r3,r3,zero
 18337bc:	10c00185 	stb	r3,6(r2)
 18337c0:	10c001c3 	ldbu	r3,7(r2)
 18337c4:	1806703a 	and	r3,r3,zero
 18337c8:	10c001c5 	stb	r3,7(r2)
    IPH_CHKSUM_SET(fraghdr, 0);
 18337cc:	e0bffb17 	ldw	r2,-20(fp)
 18337d0:	10c00283 	ldbu	r3,10(r2)
 18337d4:	1806703a 	and	r3,r3,zero
 18337d8:	10c00285 	stb	r3,10(r2)
 18337dc:	10c002c3 	ldbu	r3,11(r2)
 18337e0:	1806703a 	and	r3,r3,zero
 18337e4:	10c002c5 	stb	r3,11(r2)
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 18337e8:	01400504 	movi	r5,20
 18337ec:	e13ffb17 	ldw	r4,-20(fp)
 18337f0:	18317680 	call	1831768 <inet_chksum>
 18337f4:	100d883a 	mov	r6,r2
 18337f8:	e0bffb17 	ldw	r2,-20(fp)
 18337fc:	30ffffcc 	andi	r3,r6,65535
 1833800:	19403fcc 	andi	r5,r3,255
 1833804:	10c00283 	ldbu	r3,10(r2)
 1833808:	1806703a 	and	r3,r3,zero
 183380c:	1809883a 	mov	r4,r3
 1833810:	2807883a 	mov	r3,r5
 1833814:	20c6b03a 	or	r3,r4,r3
 1833818:	10c00285 	stb	r3,10(r2)
 183381c:	30ffffcc 	andi	r3,r6,65535
 1833820:	1806d23a 	srli	r3,r3,8
 1833824:	197fffcc 	andi	r5,r3,65535
 1833828:	10c002c3 	ldbu	r3,11(r2)
 183382c:	1806703a 	and	r3,r3,zero
 1833830:	1809883a 	mov	r4,r3
 1833834:	2807883a 	mov	r3,r5
 1833838:	20c6b03a 	or	r3,r4,r3
 183383c:	10c002c5 	stb	r3,11(r2)

    p = ipr->p;
 1833840:	e0bff917 	ldw	r2,-28(fp)
 1833844:	10800117 	ldw	r2,4(r2)
 1833848:	e0bfff15 	stw	r2,-4(fp)

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
 183384c:	00001506 	br	18338a4 <ip_reass+0x594>
      iprh = (struct ip_reass_helper*)r->payload;
 1833850:	e0bff817 	ldw	r2,-32(fp)
 1833854:	10800117 	ldw	r2,4(r2)
 1833858:	e0bffe15 	stw	r2,-8(fp)

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
 183385c:	017ffb04 	movi	r5,-20
 1833860:	e13ff817 	ldw	r4,-32(fp)
 1833864:	181a7540 	call	181a754 <pbuf_header>
      pbuf_cat(p, r);
 1833868:	e17ff817 	ldw	r5,-32(fp)
 183386c:	e13fff17 	ldw	r4,-4(fp)
 1833870:	181aad80 	call	181aad8 <pbuf_cat>
      r = iprh->next_pbuf;
 1833874:	e0bffe17 	ldw	r2,-8(fp)
 1833878:	10c00003 	ldbu	r3,0(r2)
 183387c:	11000043 	ldbu	r4,1(r2)
 1833880:	2008923a 	slli	r4,r4,8
 1833884:	20c6b03a 	or	r3,r4,r3
 1833888:	11000083 	ldbu	r4,2(r2)
 183388c:	2008943a 	slli	r4,r4,16
 1833890:	20c6b03a 	or	r3,r4,r3
 1833894:	108000c3 	ldbu	r2,3(r2)
 1833898:	1004963a 	slli	r2,r2,24
 183389c:	10c4b03a 	or	r2,r2,r3
 18338a0:	e0bff815 	stw	r2,-32(fp)
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
 18338a4:	e0bff817 	ldw	r2,-32(fp)
 18338a8:	103fe91e 	bne	r2,zero,1833850 <__alt_mem_mem_0+0xff813850>
      pbuf_header(r, -IP_HLEN);
      pbuf_cat(p, r);
      r = iprh->next_pbuf;
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 18338ac:	e17ffa17 	ldw	r5,-24(fp)
 18338b0:	e13ff917 	ldw	r4,-28(fp)
 18338b4:	1832ba80 	call	1832ba8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 18338b8:	e13fff17 	ldw	r4,-4(fp)
 18338bc:	181aa380 	call	181aa38 <pbuf_clen>
 18338c0:	d0e8150b 	ldhu	r3,-24492(gp)
 18338c4:	10803fcc 	andi	r2,r2,255
 18338c8:	1885c83a 	sub	r2,r3,r2
 18338cc:	d0a8150d 	sth	r2,-24492(gp)

    /* Return the pbuf chain */
    return p;
 18338d0:	e0bfff17 	ldw	r2,-4(fp)
 18338d4:	00000c06 	br	1833908 <ip_reass+0x5f8>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 18338d8:	0005883a 	mov	r2,zero
 18338dc:	00000a06 	br	1833908 <ip_reass+0x5f8>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 18338e0:	008061f4 	movhi	r2,391
 18338e4:	10a77104 	addi	r2,r2,-25148
 18338e8:	10801b17 	ldw	r2,108(r2)
 18338ec:	10c00044 	addi	r3,r2,1
 18338f0:	008061f4 	movhi	r2,391
 18338f4:	10a77104 	addi	r2,r2,-25148
 18338f8:	10c01b15 	stw	r3,108(r2)
  pbuf_free(p);
 18338fc:	e13fff17 	ldw	r4,-4(fp)
 1833900:	181a9040 	call	181a904 <pbuf_free>
  return NULL;
 1833904:	0005883a 	mov	r2,zero
}
 1833908:	e037883a 	mov	sp,fp
 183390c:	dfc00117 	ldw	ra,4(sp)
 1833910:	df000017 	ldw	fp,0(sp)
 1833914:	dec00204 	addi	sp,sp,8
 1833918:	f800283a 	ret

0183391c <ip_frag_alloc_pbuf_custom_ref>:

#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 183391c:	defffe04 	addi	sp,sp,-8
 1833920:	dfc00115 	stw	ra,4(sp)
 1833924:	df000015 	stw	fp,0(sp)
 1833928:	d839883a 	mov	fp,sp
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 183392c:	01000184 	movi	r4,6
 1833930:	18340280 	call	1834028 <memp_malloc>
}
 1833934:	e037883a 	mov	sp,fp
 1833938:	dfc00117 	ldw	ra,4(sp)
 183393c:	df000017 	ldw	fp,0(sp)
 1833940:	dec00204 	addi	sp,sp,8
 1833944:	f800283a 	ret

01833948 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 1833948:	defffd04 	addi	sp,sp,-12
 183394c:	dfc00215 	stw	ra,8(sp)
 1833950:	df000115 	stw	fp,4(sp)
 1833954:	df000104 	addi	fp,sp,4
 1833958:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 183395c:	e17fff17 	ldw	r5,-4(fp)
 1833960:	01000184 	movi	r4,6
 1833964:	18341e40 	call	18341e4 <memp_free>
}
 1833968:	0001883a 	nop
 183396c:	e037883a 	mov	sp,fp
 1833970:	dfc00117 	ldw	ra,4(sp)
 1833974:	df000017 	ldw	fp,0(sp)
 1833978:	dec00204 	addi	sp,sp,8
 183397c:	f800283a 	ret

01833980 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 1833980:	defffc04 	addi	sp,sp,-16
 1833984:	dfc00315 	stw	ra,12(sp)
 1833988:	df000215 	stw	fp,8(sp)
 183398c:	df000204 	addi	fp,sp,8
 1833990:	e13fff15 	stw	r4,-4(fp)
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 1833994:	e0bfff17 	ldw	r2,-4(fp)
 1833998:	e0bffe15 	stw	r2,-8(fp)
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 183399c:	e0bffe17 	ldw	r2,-8(fp)
 18339a0:	10800517 	ldw	r2,20(r2)
 18339a4:	10000426 	beq	r2,zero,18339b8 <ipfrag_free_pbuf_custom+0x38>
    pbuf_free(pcr->original);
 18339a8:	e0bffe17 	ldw	r2,-8(fp)
 18339ac:	10800517 	ldw	r2,20(r2)
 18339b0:	1009883a 	mov	r4,r2
 18339b4:	181a9040 	call	181a904 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 18339b8:	e13ffe17 	ldw	r4,-8(fp)
 18339bc:	18339480 	call	1833948 <ip_frag_free_pbuf_custom_ref>
}
 18339c0:	0001883a 	nop
 18339c4:	e037883a 	mov	sp,fp
 18339c8:	dfc00117 	ldw	ra,4(sp)
 18339cc:	df000017 	ldw	fp,0(sp)
 18339d0:	dec00204 	addi	sp,sp,8
 18339d4:	f800283a 	ret

018339d8 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
 18339d8:	deffee04 	addi	sp,sp,-72
 18339dc:	dfc01115 	stw	ra,68(sp)
 18339e0:	df001015 	stw	fp,64(sp)
 18339e4:	df001004 	addi	fp,sp,64
 18339e8:	e13ffd15 	stw	r4,-12(fp)
 18339ec:	e17ffe15 	stw	r5,-8(fp)
 18339f0:	e1bfff15 	stw	r6,-4(fp)
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
 18339f4:	e0bffe17 	ldw	r2,-8(fp)
 18339f8:	10800c0b 	ldhu	r2,48(r2)
 18339fc:	e0bff50d 	sth	r2,-44(fp)
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
 1833a00:	00800504 	movi	r2,20
 1833a04:	e0bff30d 	sth	r2,-52(fp)
  u16_t tmp;
#if !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
 1833a08:	e03ff40d 	sth	zero,-48(fp)

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
 1833a0c:	e0bffd17 	ldw	r2,-12(fp)
 1833a10:	10800117 	ldw	r2,4(r2)
 1833a14:	e0bff615 	stw	r2,-40(fp)
  iphdr = original_iphdr;
 1833a18:	e0bff617 	ldw	r2,-40(fp)
 1833a1c:	e0bff715 	stw	r2,-36(fp)
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
 1833a20:	e0bff717 	ldw	r2,-36(fp)
 1833a24:	10c00183 	ldbu	r3,6(r2)
 1833a28:	108001c3 	ldbu	r2,7(r2)
 1833a2c:	1004923a 	slli	r2,r2,8
 1833a30:	10c4b03a 	or	r2,r2,r3
 1833a34:	10bfffcc 	andi	r2,r2,65535
 1833a38:	1004d23a 	srli	r2,r2,8
 1833a3c:	1009883a 	mov	r4,r2
 1833a40:	e0bff717 	ldw	r2,-36(fp)
 1833a44:	10c00183 	ldbu	r3,6(r2)
 1833a48:	108001c3 	ldbu	r2,7(r2)
 1833a4c:	1004923a 	slli	r2,r2,8
 1833a50:	10c4b03a 	or	r2,r2,r3
 1833a54:	10bfffcc 	andi	r2,r2,65535
 1833a58:	1004923a 	slli	r2,r2,8
 1833a5c:	2084b03a 	or	r2,r4,r2
 1833a60:	e0bff38d 	sth	r2,-50(fp)
  ofo = tmp & IP_OFFMASK;
 1833a64:	e0bff38b 	ldhu	r2,-50(fp)
 1833a68:	1087ffcc 	andi	r2,r2,8191
 1833a6c:	e0bff28d 	sth	r2,-54(fp)
  omf = tmp & IP_MF;
 1833a70:	e0bff38b 	ldhu	r2,-50(fp)
 1833a74:	1088000c 	andi	r2,r2,8192
 1833a78:	e0bff80d 	sth	r2,-32(fp)

  left = p->tot_len - IP_HLEN;
 1833a7c:	e0bffd17 	ldw	r2,-12(fp)
 1833a80:	1080020b 	ldhu	r2,8(r2)
 1833a84:	10bffb04 	addi	r2,r2,-20
 1833a88:	e0bff20d 	sth	r2,-56(fp)

  nfb = (mtu - IP_HLEN) / 8;
 1833a8c:	e0bff50b 	ldhu	r2,-44(fp)
 1833a90:	10bffb04 	addi	r2,r2,-20
 1833a94:	1000010e 	bge	r2,zero,1833a9c <ip_frag+0xc4>
 1833a98:	108001c4 	addi	r2,r2,7
 1833a9c:	1005d0fa 	srai	r2,r2,3
 1833aa0:	e0bff88d 	sth	r2,-30(fp)

  while (left) {
 1833aa4:	0000e706 	br	1833e44 <ip_frag+0x46c>
    last = (left <= mtu - IP_HLEN);
 1833aa8:	e0bff20b 	ldhu	r2,-56(fp)
 1833aac:	e0fff50b 	ldhu	r3,-44(fp)
 1833ab0:	18fffb04 	addi	r3,r3,-20
 1833ab4:	1884403a 	cmpge	r2,r3,r2
 1833ab8:	10803fcc 	andi	r2,r2,255
 1833abc:	e0bff90d 	sth	r2,-28(fp)

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
 1833ac0:	e0bff28b 	ldhu	r2,-54(fp)
 1833ac4:	1087ffcc 	andi	r2,r2,8191
 1833ac8:	1007883a 	mov	r3,r2
 1833acc:	e0bff80b 	ldhu	r2,-32(fp)
 1833ad0:	1884b03a 	or	r2,r3,r2
 1833ad4:	e0bff38d 	sth	r2,-50(fp)
    if (!last) {
 1833ad8:	e0bff90b 	ldhu	r2,-28(fp)
 1833adc:	1000031e 	bne	r2,zero,1833aec <ip_frag+0x114>
      tmp = tmp | IP_MF;
 1833ae0:	e0bff38b 	ldhu	r2,-50(fp)
 1833ae4:	10880014 	ori	r2,r2,8192
 1833ae8:	e0bff38d 	sth	r2,-50(fp)
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
 1833aec:	e0bff90b 	ldhu	r2,-28(fp)
 1833af0:	1000031e 	bne	r2,zero,1833b00 <ip_frag+0x128>
 1833af4:	e0bff88b 	ldhu	r2,-30(fp)
 1833af8:	100490fa 	slli	r2,r2,3
 1833afc:	00000106 	br	1833b04 <ip_frag+0x12c>
 1833b00:	e0bff20b 	ldhu	r2,-56(fp)
 1833b04:	e0bff98d 	sth	r2,-26(fp)
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 1833b08:	000d883a 	mov	r6,zero
 1833b0c:	01400504 	movi	r5,20
 1833b10:	01000084 	movi	r4,2
 1833b14:	181a1480 	call	181a148 <pbuf_alloc>
 1833b18:	e0bffa15 	stw	r2,-24(fp)
    if (rambuf == NULL) {
 1833b1c:	e0bffa17 	ldw	r2,-24(fp)
 1833b20:	1000021e 	bne	r2,zero,1833b2c <ip_frag+0x154>
      return ERR_MEM;
 1833b24:	00bfffc4 	movi	r2,-1
 1833b28:	0000c906 	br	1833e50 <ip_frag+0x478>
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 1833b2c:	e0bffa17 	ldw	r2,-24(fp)
 1833b30:	10800117 	ldw	r2,4(r2)
 1833b34:	01800504 	movi	r6,20
 1833b38:	e17ff617 	ldw	r5,-40(fp)
 1833b3c:	1009883a 	mov	r4,r2
 1833b40:	180604c0 	call	180604c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 1833b44:	e0bffa17 	ldw	r2,-24(fp)
 1833b48:	10800117 	ldw	r2,4(r2)
 1833b4c:	e0bff715 	stw	r2,-36(fp)

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 1833b50:	e0bffd17 	ldw	r2,-12(fp)
 1833b54:	10c00117 	ldw	r3,4(r2)
 1833b58:	e0bff30b 	ldhu	r2,-52(fp)
 1833b5c:	1887883a 	add	r3,r3,r2
 1833b60:	e0bffd17 	ldw	r2,-12(fp)
 1833b64:	10c00115 	stw	r3,4(r2)
    p->len -= poff;
 1833b68:	e0bffd17 	ldw	r2,-12(fp)
 1833b6c:	10c0028b 	ldhu	r3,10(r2)
 1833b70:	e0bff30b 	ldhu	r2,-52(fp)
 1833b74:	1885c83a 	sub	r2,r3,r2
 1833b78:	1007883a 	mov	r3,r2
 1833b7c:	e0bffd17 	ldw	r2,-12(fp)
 1833b80:	10c0028d 	sth	r3,10(r2)

    left_to_copy = cop;
 1833b84:	e0bff98b 	ldhu	r2,-26(fp)
 1833b88:	e0bff48d 	sth	r2,-46(fp)
    while (left_to_copy) {
 1833b8c:	00004006 	br	1833c90 <ip_frag+0x2b8>
      struct pbuf_custom_ref *pcr;
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 1833b90:	e0bffd17 	ldw	r2,-12(fp)
 1833b94:	1080028b 	ldhu	r2,10(r2)
 1833b98:	e17ff48b 	ldhu	r5,-46(fp)
 1833b9c:	10ffffcc 	andi	r3,r2,65535
 1833ba0:	293fffcc 	andi	r4,r5,65535
 1833ba4:	20c0012e 	bgeu	r4,r3,1833bac <ip_frag+0x1d4>
 1833ba8:	2805883a 	mov	r2,r5
 1833bac:	e0bff40d 	sth	r2,-48(fp)
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 1833bb0:	e0bff40b 	ldhu	r2,-48(fp)
 1833bb4:	1000041e 	bne	r2,zero,1833bc8 <ip_frag+0x1f0>
        p = p->next;
 1833bb8:	e0bffd17 	ldw	r2,-12(fp)
 1833bbc:	10800017 	ldw	r2,0(r2)
 1833bc0:	e0bffd15 	stw	r2,-12(fp)
        continue;
 1833bc4:	00003206 	br	1833c90 <ip_frag+0x2b8>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 1833bc8:	183391c0 	call	183391c <ip_frag_alloc_pbuf_custom_ref>
 1833bcc:	e0bffb15 	stw	r2,-20(fp)
      if (pcr == NULL) {
 1833bd0:	e0bffb17 	ldw	r2,-20(fp)
 1833bd4:	1000041e 	bne	r2,zero,1833be8 <ip_frag+0x210>
        pbuf_free(rambuf);
 1833bd8:	e13ffa17 	ldw	r4,-24(fp)
 1833bdc:	181a9040 	call	181a904 <pbuf_free>
        return ERR_MEM;
 1833be0:	00bfffc4 	movi	r2,-1
 1833be4:	00009a06 	br	1833e50 <ip_frag+0x478>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 1833be8:	e13ff40b 	ldhu	r4,-48(fp)
 1833bec:	e17ffb17 	ldw	r5,-20(fp)
 1833bf0:	e0bffd17 	ldw	r2,-12(fp)
 1833bf4:	10800117 	ldw	r2,4(r2)
 1833bf8:	e0fff40b 	ldhu	r3,-48(fp)
 1833bfc:	d8c00115 	stw	r3,4(sp)
 1833c00:	d8800015 	stw	r2,0(sp)
 1833c04:	280f883a 	mov	r7,r5
 1833c08:	01800084 	movi	r6,2
 1833c0c:	200b883a 	mov	r5,r4
 1833c10:	010000c4 	movi	r4,3
 1833c14:	181a4b40 	call	181a4b4 <pbuf_alloced_custom>
 1833c18:	e0bffc15 	stw	r2,-16(fp)
      if (newpbuf == NULL) {
 1833c1c:	e0bffc17 	ldw	r2,-16(fp)
 1833c20:	1000061e 	bne	r2,zero,1833c3c <ip_frag+0x264>
        ip_frag_free_pbuf_custom_ref(pcr);
 1833c24:	e13ffb17 	ldw	r4,-20(fp)
 1833c28:	18339480 	call	1833948 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 1833c2c:	e13ffa17 	ldw	r4,-24(fp)
 1833c30:	181a9040 	call	181a904 <pbuf_free>
        return ERR_MEM;
 1833c34:	00bfffc4 	movi	r2,-1
 1833c38:	00008506 	br	1833e50 <ip_frag+0x478>
      }
      pbuf_ref(p);
 1833c3c:	e13ffd17 	ldw	r4,-12(fp)
 1833c40:	181aa840 	call	181aa84 <pbuf_ref>
      pcr->original = p;
 1833c44:	e0bffb17 	ldw	r2,-20(fp)
 1833c48:	e0fffd17 	ldw	r3,-12(fp)
 1833c4c:	10c00515 	stw	r3,20(r2)
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 1833c50:	e0fffb17 	ldw	r3,-20(fp)
 1833c54:	008060f4 	movhi	r2,387
 1833c58:	108e6004 	addi	r2,r2,14720
 1833c5c:	18800415 	stw	r2,16(r3)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 1833c60:	e17ffc17 	ldw	r5,-16(fp)
 1833c64:	e13ffa17 	ldw	r4,-24(fp)
 1833c68:	181aad80 	call	181aad8 <pbuf_cat>
      left_to_copy -= newpbuflen;
 1833c6c:	e0fff48b 	ldhu	r3,-46(fp)
 1833c70:	e0bff40b 	ldhu	r2,-48(fp)
 1833c74:	1885c83a 	sub	r2,r3,r2
 1833c78:	e0bff48d 	sth	r2,-46(fp)
      if (left_to_copy) {
 1833c7c:	e0bff48b 	ldhu	r2,-46(fp)
 1833c80:	10000326 	beq	r2,zero,1833c90 <ip_frag+0x2b8>
        p = p->next;
 1833c84:	e0bffd17 	ldw	r2,-12(fp)
 1833c88:	10800017 	ldw	r2,0(r2)
 1833c8c:	e0bffd15 	stw	r2,-12(fp)
    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
    p->len -= poff;

    left_to_copy = cop;
    while (left_to_copy) {
 1833c90:	e0bff48b 	ldhu	r2,-46(fp)
 1833c94:	103fbe1e 	bne	r2,zero,1833b90 <__alt_mem_mem_0+0xff813b90>
      left_to_copy -= newpbuflen;
      if (left_to_copy) {
        p = p->next;
      }
    }
    poff = newpbuflen;
 1833c98:	e0bff40b 	ldhu	r2,-48(fp)
 1833c9c:	e0bff30d 	sth	r2,-52(fp)
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
 1833ca0:	e0bff38b 	ldhu	r2,-50(fp)
 1833ca4:	1004d23a 	srli	r2,r2,8
 1833ca8:	1007883a 	mov	r3,r2
 1833cac:	e0bff38b 	ldhu	r2,-50(fp)
 1833cb0:	1004923a 	slli	r2,r2,8
 1833cb4:	1884b03a 	or	r2,r3,r2
 1833cb8:	100d883a 	mov	r6,r2
 1833cbc:	e0bff717 	ldw	r2,-36(fp)
 1833cc0:	30ffffcc 	andi	r3,r6,65535
 1833cc4:	19403fcc 	andi	r5,r3,255
 1833cc8:	10c00183 	ldbu	r3,6(r2)
 1833ccc:	1806703a 	and	r3,r3,zero
 1833cd0:	1809883a 	mov	r4,r3
 1833cd4:	2807883a 	mov	r3,r5
 1833cd8:	20c6b03a 	or	r3,r4,r3
 1833cdc:	10c00185 	stb	r3,6(r2)
 1833ce0:	30ffffcc 	andi	r3,r6,65535
 1833ce4:	1806d23a 	srli	r3,r3,8
 1833ce8:	197fffcc 	andi	r5,r3,65535
 1833cec:	10c001c3 	ldbu	r3,7(r2)
 1833cf0:	1806703a 	and	r3,r3,zero
 1833cf4:	1809883a 	mov	r4,r3
 1833cf8:	2807883a 	mov	r3,r5
 1833cfc:	20c6b03a 	or	r3,r4,r3
 1833d00:	10c001c5 	stb	r3,7(r2)
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 1833d04:	e0bff98b 	ldhu	r2,-26(fp)
 1833d08:	10800504 	addi	r2,r2,20
 1833d0c:	10bfc00c 	andi	r2,r2,65280
 1833d10:	1005d23a 	srai	r2,r2,8
 1833d14:	1007883a 	mov	r3,r2
 1833d18:	e0bff98b 	ldhu	r2,-26(fp)
 1833d1c:	10800504 	addi	r2,r2,20
 1833d20:	1004923a 	slli	r2,r2,8
 1833d24:	1884b03a 	or	r2,r3,r2
 1833d28:	100d883a 	mov	r6,r2
 1833d2c:	e0bff717 	ldw	r2,-36(fp)
 1833d30:	30ffffcc 	andi	r3,r6,65535
 1833d34:	19403fcc 	andi	r5,r3,255
 1833d38:	10c00083 	ldbu	r3,2(r2)
 1833d3c:	1806703a 	and	r3,r3,zero
 1833d40:	1809883a 	mov	r4,r3
 1833d44:	2807883a 	mov	r3,r5
 1833d48:	20c6b03a 	or	r3,r4,r3
 1833d4c:	10c00085 	stb	r3,2(r2)
 1833d50:	30ffffcc 	andi	r3,r6,65535
 1833d54:	1806d23a 	srli	r3,r3,8
 1833d58:	197fffcc 	andi	r5,r3,65535
 1833d5c:	10c000c3 	ldbu	r3,3(r2)
 1833d60:	1806703a 	and	r3,r3,zero
 1833d64:	1809883a 	mov	r4,r3
 1833d68:	2807883a 	mov	r3,r5
 1833d6c:	20c6b03a 	or	r3,r4,r3
 1833d70:	10c000c5 	stb	r3,3(r2)
    IPH_CHKSUM_SET(iphdr, 0);
 1833d74:	e0bff717 	ldw	r2,-36(fp)
 1833d78:	10c00283 	ldbu	r3,10(r2)
 1833d7c:	1806703a 	and	r3,r3,zero
 1833d80:	10c00285 	stb	r3,10(r2)
 1833d84:	10c002c3 	ldbu	r3,11(r2)
 1833d88:	1806703a 	and	r3,r3,zero
 1833d8c:	10c002c5 	stb	r3,11(r2)
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 1833d90:	01400504 	movi	r5,20
 1833d94:	e13ff717 	ldw	r4,-36(fp)
 1833d98:	18317680 	call	1831768 <inet_chksum>
 1833d9c:	100d883a 	mov	r6,r2
 1833da0:	e0bff717 	ldw	r2,-36(fp)
 1833da4:	30ffffcc 	andi	r3,r6,65535
 1833da8:	19403fcc 	andi	r5,r3,255
 1833dac:	10c00283 	ldbu	r3,10(r2)
 1833db0:	1806703a 	and	r3,r3,zero
 1833db4:	1809883a 	mov	r4,r3
 1833db8:	2807883a 	mov	r3,r5
 1833dbc:	20c6b03a 	or	r3,r4,r3
 1833dc0:	10c00285 	stb	r3,10(r2)
 1833dc4:	30ffffcc 	andi	r3,r6,65535
 1833dc8:	1806d23a 	srli	r3,r3,8
 1833dcc:	197fffcc 	andi	r5,r3,65535
 1833dd0:	10c002c3 	ldbu	r3,11(r2)
 1833dd4:	1806703a 	and	r3,r3,zero
 1833dd8:	1809883a 	mov	r4,r3
 1833ddc:	2807883a 	mov	r3,r5
 1833de0:	20c6b03a 	or	r3,r4,r3
 1833de4:	10c002c5 	stb	r3,11(r2)
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 1833de8:	e0bffe17 	ldw	r2,-8(fp)
 1833dec:	10800517 	ldw	r2,20(r2)
 1833df0:	e1bfff17 	ldw	r6,-4(fp)
 1833df4:	e17ffa17 	ldw	r5,-24(fp)
 1833df8:	e13ffe17 	ldw	r4,-8(fp)
 1833dfc:	103ee83a 	callr	r2
    IPFRAG_STATS_INC(ip_frag.xmit);
 1833e00:	008061f4 	movhi	r2,391
 1833e04:	10a77104 	addi	r2,r2,-25148
 1833e08:	10801817 	ldw	r2,96(r2)
 1833e0c:	10c00044 	addi	r3,r2,1
 1833e10:	008061f4 	movhi	r2,391
 1833e14:	10a77104 	addi	r2,r2,-25148
 1833e18:	10c01815 	stw	r3,96(r2)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
 1833e1c:	e13ffa17 	ldw	r4,-24(fp)
 1833e20:	181a9040 	call	181a904 <pbuf_free>
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
 1833e24:	e0fff20b 	ldhu	r3,-56(fp)
 1833e28:	e0bff98b 	ldhu	r2,-26(fp)
 1833e2c:	1885c83a 	sub	r2,r3,r2
 1833e30:	e0bff20d 	sth	r2,-56(fp)
    ofo += nfb;
 1833e34:	e0fff28b 	ldhu	r3,-54(fp)
 1833e38:	e0bff88b 	ldhu	r2,-30(fp)
 1833e3c:	1885883a 	add	r2,r3,r2
 1833e40:	e0bff28d 	sth	r2,-54(fp)

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
 1833e44:	e0bff20b 	ldhu	r2,-56(fp)
 1833e48:	103f171e 	bne	r2,zero,1833aa8 <__alt_mem_mem_0+0xff813aa8>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
 1833e4c:	0005883a 	mov	r2,zero
}
 1833e50:	e037883a 	mov	sp,fp
 1833e54:	dfc00117 	ldw	ra,4(sp)
 1833e58:	df000017 	ldw	fp,0(sp)
 1833e5c:	dec00204 	addi	sp,sp,8
 1833e60:	f800283a 	ret

01833e64 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 1833e64:	defffd04 	addi	sp,sp,-12
 1833e68:	df000215 	stw	fp,8(sp)
 1833e6c:	df000204 	addi	fp,sp,8
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
 1833e70:	e03fff0d 	sth	zero,-4(fp)
 1833e74:	00002606 	br	1833f10 <memp_init+0xac>
    MEMP_STATS_AVAIL(used, i, 0);
 1833e78:	e0ffff0b 	ldhu	r3,-4(fp)
 1833e7c:	008061f4 	movhi	r2,391
 1833e80:	10a77104 	addi	r2,r2,-25148
 1833e84:	18c00584 	addi	r3,r3,22
 1833e88:	1806913a 	slli	r3,r3,4
 1833e8c:	10c5883a 	add	r2,r2,r3
 1833e90:	10800084 	addi	r2,r2,2
 1833e94:	1000000d 	sth	zero,0(r2)
    MEMP_STATS_AVAIL(max, i, 0);
 1833e98:	e0ffff0b 	ldhu	r3,-4(fp)
 1833e9c:	008061f4 	movhi	r2,391
 1833ea0:	10a77104 	addi	r2,r2,-25148
 1833ea4:	1806913a 	slli	r3,r3,4
 1833ea8:	10c5883a 	add	r2,r2,r3
 1833eac:	10805904 	addi	r2,r2,356
 1833eb0:	1000000d 	sth	zero,0(r2)
    MEMP_STATS_AVAIL(err, i, 0);
 1833eb4:	e0ffff0b 	ldhu	r3,-4(fp)
 1833eb8:	008061f4 	movhi	r2,391
 1833ebc:	10a77104 	addi	r2,r2,-25148
 1833ec0:	1806913a 	slli	r3,r3,4
 1833ec4:	10c5883a 	add	r2,r2,r3
 1833ec8:	10805a04 	addi	r2,r2,360
 1833ecc:	10000015 	stw	zero,0(r2)
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
 1833ed0:	e13fff0b 	ldhu	r4,-4(fp)
 1833ed4:	e0ffff0b 	ldhu	r3,-4(fp)
 1833ed8:	00806134 	movhi	r2,388
 1833edc:	108c3d84 	addi	r2,r2,12534
 1833ee0:	18c7883a 	add	r3,r3,r3
 1833ee4:	10c5883a 	add	r2,r2,r3
 1833ee8:	10c0000b 	ldhu	r3,0(r2)
 1833eec:	008061f4 	movhi	r2,391
 1833ef0:	10a77104 	addi	r2,r2,-25148
 1833ef4:	21000584 	addi	r4,r4,22
 1833ef8:	2008913a 	slli	r4,r4,4
 1833efc:	1105883a 	add	r2,r2,r4
 1833f00:	10c0000d 	sth	r3,0(r2)
memp_init(void)
{
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
 1833f04:	e0bfff0b 	ldhu	r2,-4(fp)
 1833f08:	10800044 	addi	r2,r2,1
 1833f0c:	e0bfff0d 	sth	r2,-4(fp)
 1833f10:	e0bfff0b 	ldhu	r2,-4(fp)
 1833f14:	108003f0 	cmpltui	r2,r2,15
 1833f18:	103fd71e 	bne	r2,zero,1833e78 <__alt_mem_mem_0+0xff813e78>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 1833f1c:	00806134 	movhi	r2,388
 1833f20:	109ee404 	addi	r2,r2,31632
 1833f24:	10c000c4 	addi	r3,r2,3
 1833f28:	00bfff04 	movi	r2,-4
 1833f2c:	1884703a 	and	r2,r3,r2
 1833f30:	e0bffe15 	stw	r2,-8(fp)
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 1833f34:	e03fff0d 	sth	zero,-4(fp)
 1833f38:	00003306 	br	1834008 <memp_init+0x1a4>
    memp_tab[i] = NULL;
 1833f3c:	e0ffff0b 	ldhu	r3,-4(fp)
 1833f40:	00806134 	movhi	r2,388
 1833f44:	109ed504 	addi	r2,r2,31572
 1833f48:	18c7883a 	add	r3,r3,r3
 1833f4c:	18c7883a 	add	r3,r3,r3
 1833f50:	10c5883a 	add	r2,r2,r3
 1833f54:	10000015 	stw	zero,0(r2)
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 1833f58:	e03fff8d 	sth	zero,-2(fp)
 1833f5c:	00001e06 	br	1833fd8 <memp_init+0x174>
      memp->next = memp_tab[i];
 1833f60:	e0ffff0b 	ldhu	r3,-4(fp)
 1833f64:	00806134 	movhi	r2,388
 1833f68:	109ed504 	addi	r2,r2,31572
 1833f6c:	18c7883a 	add	r3,r3,r3
 1833f70:	18c7883a 	add	r3,r3,r3
 1833f74:	10c5883a 	add	r2,r2,r3
 1833f78:	10c00017 	ldw	r3,0(r2)
 1833f7c:	e0bffe17 	ldw	r2,-8(fp)
 1833f80:	10c00015 	stw	r3,0(r2)
      memp_tab[i] = memp;
 1833f84:	e0ffff0b 	ldhu	r3,-4(fp)
 1833f88:	00806134 	movhi	r2,388
 1833f8c:	109ed504 	addi	r2,r2,31572
 1833f90:	18c7883a 	add	r3,r3,r3
 1833f94:	18c7883a 	add	r3,r3,r3
 1833f98:	10c5883a 	add	r2,r2,r3
 1833f9c:	e0fffe17 	ldw	r3,-8(fp)
 1833fa0:	10c00015 	stw	r3,0(r2)
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 1833fa4:	e0ffff0b 	ldhu	r3,-4(fp)
 1833fa8:	00806134 	movhi	r2,388
 1833fac:	108c3604 	addi	r2,r2,12504
 1833fb0:	18c7883a 	add	r3,r3,r3
 1833fb4:	10c5883a 	add	r2,r2,r3
 1833fb8:	1080000b 	ldhu	r2,0(r2)
 1833fbc:	10bfffcc 	andi	r2,r2,65535
 1833fc0:	e0fffe17 	ldw	r3,-8(fp)
 1833fc4:	1885883a 	add	r2,r3,r2
 1833fc8:	e0bffe15 	stw	r2,-8(fp)
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 1833fcc:	e0bfff8b 	ldhu	r2,-2(fp)
 1833fd0:	10800044 	addi	r2,r2,1
 1833fd4:	e0bfff8d 	sth	r2,-2(fp)
 1833fd8:	e0ffff0b 	ldhu	r3,-4(fp)
 1833fdc:	00806134 	movhi	r2,388
 1833fe0:	108c3d84 	addi	r2,r2,12534
 1833fe4:	18c7883a 	add	r3,r3,r3
 1833fe8:	10c5883a 	add	r2,r2,r3
 1833fec:	1080000b 	ldhu	r2,0(r2)
 1833ff0:	10bfffcc 	andi	r2,r2,65535
 1833ff4:	e0ffff8b 	ldhu	r3,-2(fp)
 1833ff8:	18bfd936 	bltu	r3,r2,1833f60 <__alt_mem_mem_0+0xff813f60>

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 1833ffc:	e0bfff0b 	ldhu	r2,-4(fp)
 1834000:	10800044 	addi	r2,r2,1
 1834004:	e0bfff0d 	sth	r2,-4(fp)
 1834008:	e0bfff0b 	ldhu	r2,-4(fp)
 183400c:	108003f0 	cmpltui	r2,r2,15
 1834010:	103fca1e 	bne	r2,zero,1833f3c <__alt_mem_mem_0+0xff813f3c>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
 1834014:	0001883a 	nop
 1834018:	e037883a 	mov	sp,fp
 183401c:	df000017 	ldw	fp,0(sp)
 1834020:	dec00104 	addi	sp,sp,4
 1834024:	f800283a 	ret

01834028 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 1834028:	defffc04 	addi	sp,sp,-16
 183402c:	dfc00315 	stw	ra,12(sp)
 1834030:	df000215 	stw	fp,8(sp)
 1834034:	df000204 	addi	fp,sp,8
 1834038:	e13fff15 	stw	r4,-4(fp)
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 183403c:	e0bfff17 	ldw	r2,-4(fp)
 1834040:	108003f0 	cmpltui	r2,r2,15
 1834044:	1000091e 	bne	r2,zero,183406c <memp_malloc+0x44>
 1834048:	01c06134 	movhi	r7,388
 183404c:	39cc4504 	addi	r7,r7,12564
 1834050:	01806384 	movi	r6,398
 1834054:	01406134 	movhi	r5,388
 1834058:	294c4b04 	addi	r5,r5,12588
 183405c:	01006134 	movhi	r4,388
 1834060:	210c5304 	addi	r4,r4,12620
 1834064:	1800bd80 	call	1800bd8 <printf>
 1834068:	003fff06 	br	1834068 <__alt_mem_mem_0+0xff814068>

  SYS_ARCH_PROTECT(old_level);
 183406c:	1810de40 	call	1810de4 <vTaskEnterCritical>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
 1834070:	00806134 	movhi	r2,388
 1834074:	109ed504 	addi	r2,r2,31572
 1834078:	e0ffff17 	ldw	r3,-4(fp)
 183407c:	18c7883a 	add	r3,r3,r3
 1834080:	18c7883a 	add	r3,r3,r3
 1834084:	10c5883a 	add	r2,r2,r3
 1834088:	10800017 	ldw	r2,0(r2)
 183408c:	e0bffe15 	stw	r2,-8(fp)
  
  if (memp != NULL) {
 1834090:	e0bffe17 	ldw	r2,-8(fp)
 1834094:	10003d26 	beq	r2,zero,183418c <memp_malloc+0x164>
    memp_tab[type] = memp->next;
 1834098:	e0bffe17 	ldw	r2,-8(fp)
 183409c:	11000017 	ldw	r4,0(r2)
 18340a0:	00806134 	movhi	r2,388
 18340a4:	109ed504 	addi	r2,r2,31572
 18340a8:	e0ffff17 	ldw	r3,-4(fp)
 18340ac:	18c7883a 	add	r3,r3,r3
 18340b0:	18c7883a 	add	r3,r3,r3
 18340b4:	10c5883a 	add	r2,r2,r3
 18340b8:	11000015 	stw	r4,0(r2)
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
    memp->file = file;
    memp->line = line;
#endif /* MEMP_OVERFLOW_CHECK */
    MEMP_STATS_INC_USED(used, type);
 18340bc:	008061f4 	movhi	r2,391
 18340c0:	10a77104 	addi	r2,r2,-25148
 18340c4:	e0ffff17 	ldw	r3,-4(fp)
 18340c8:	18c00584 	addi	r3,r3,22
 18340cc:	1806913a 	slli	r3,r3,4
 18340d0:	10c5883a 	add	r2,r2,r3
 18340d4:	10800084 	addi	r2,r2,2
 18340d8:	1080000b 	ldhu	r2,0(r2)
 18340dc:	10800044 	addi	r2,r2,1
 18340e0:	1009883a 	mov	r4,r2
 18340e4:	008061f4 	movhi	r2,391
 18340e8:	10a77104 	addi	r2,r2,-25148
 18340ec:	e0ffff17 	ldw	r3,-4(fp)
 18340f0:	18c00584 	addi	r3,r3,22
 18340f4:	1806913a 	slli	r3,r3,4
 18340f8:	10c5883a 	add	r2,r2,r3
 18340fc:	10800084 	addi	r2,r2,2
 1834100:	1100000d 	sth	r4,0(r2)
 1834104:	008061f4 	movhi	r2,391
 1834108:	10a77104 	addi	r2,r2,-25148
 183410c:	e0ffff17 	ldw	r3,-4(fp)
 1834110:	1806913a 	slli	r3,r3,4
 1834114:	10c5883a 	add	r2,r2,r3
 1834118:	10805904 	addi	r2,r2,356
 183411c:	1100000b 	ldhu	r4,0(r2)
 1834120:	008061f4 	movhi	r2,391
 1834124:	10a77104 	addi	r2,r2,-25148
 1834128:	e0ffff17 	ldw	r3,-4(fp)
 183412c:	18c00584 	addi	r3,r3,22
 1834130:	1806913a 	slli	r3,r3,4
 1834134:	10c5883a 	add	r2,r2,r3
 1834138:	10800084 	addi	r2,r2,2
 183413c:	1080000b 	ldhu	r2,0(r2)
 1834140:	20ffffcc 	andi	r3,r4,65535
 1834144:	10bfffcc 	andi	r2,r2,65535
 1834148:	18801f2e 	bgeu	r3,r2,18341c8 <memp_malloc+0x1a0>
 183414c:	008061f4 	movhi	r2,391
 1834150:	10a77104 	addi	r2,r2,-25148
 1834154:	e0ffff17 	ldw	r3,-4(fp)
 1834158:	18c00584 	addi	r3,r3,22
 183415c:	1806913a 	slli	r3,r3,4
 1834160:	10c5883a 	add	r2,r2,r3
 1834164:	10800084 	addi	r2,r2,2
 1834168:	10c0000b 	ldhu	r3,0(r2)
 183416c:	008061f4 	movhi	r2,391
 1834170:	10a77104 	addi	r2,r2,-25148
 1834174:	e13fff17 	ldw	r4,-4(fp)
 1834178:	2008913a 	slli	r4,r4,4
 183417c:	1105883a 	add	r2,r2,r4
 1834180:	10805904 	addi	r2,r2,356
 1834184:	10c0000d 	sth	r3,0(r2)
 1834188:	00000f06 	br	18341c8 <memp_malloc+0x1a0>
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
    memp = (struct memp*)(void *)((u8_t*)memp + MEMP_SIZE);
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", memp_desc[type]));
    MEMP_STATS_INC(err, type);
 183418c:	008061f4 	movhi	r2,391
 1834190:	10a77104 	addi	r2,r2,-25148
 1834194:	e0ffff17 	ldw	r3,-4(fp)
 1834198:	1806913a 	slli	r3,r3,4
 183419c:	10c5883a 	add	r2,r2,r3
 18341a0:	10805a04 	addi	r2,r2,360
 18341a4:	10800017 	ldw	r2,0(r2)
 18341a8:	10c00044 	addi	r3,r2,1
 18341ac:	008061f4 	movhi	r2,391
 18341b0:	10a77104 	addi	r2,r2,-25148
 18341b4:	e13fff17 	ldw	r4,-4(fp)
 18341b8:	2008913a 	slli	r4,r4,4
 18341bc:	1105883a 	add	r2,r2,r4
 18341c0:	10805a04 	addi	r2,r2,360
 18341c4:	10c00015 	stw	r3,0(r2)
  }

  SYS_ARCH_UNPROTECT(old_level);
 18341c8:	1810e380 	call	1810e38 <vTaskExitCritical>

  return memp;
 18341cc:	e0bffe17 	ldw	r2,-8(fp)
}
 18341d0:	e037883a 	mov	sp,fp
 18341d4:	dfc00117 	ldw	ra,4(sp)
 18341d8:	df000017 	ldw	fp,0(sp)
 18341dc:	dec00204 	addi	sp,sp,8
 18341e0:	f800283a 	ret

018341e4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 18341e4:	defffb04 	addi	sp,sp,-20
 18341e8:	dfc00415 	stw	ra,16(sp)
 18341ec:	df000315 	stw	fp,12(sp)
 18341f0:	df000304 	addi	fp,sp,12
 18341f4:	e13ffe15 	stw	r4,-8(fp)
 18341f8:	e17fff15 	stw	r5,-4(fp)
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
 18341fc:	e0bfff17 	ldw	r2,-4(fp)
 1834200:	10002826 	beq	r2,zero,18342a4 <memp_free+0xc0>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 1834204:	e0bfff17 	ldw	r2,-4(fp)
 1834208:	e0bffd15 	stw	r2,-12(fp)

  SYS_ARCH_PROTECT(old_level);
 183420c:	1810de40 	call	1810de4 <vTaskEnterCritical>
  memp_overflow_check_element_overflow(memp, type);
  memp_overflow_check_element_underflow(memp, type);
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
 1834210:	008061f4 	movhi	r2,391
 1834214:	10a77104 	addi	r2,r2,-25148
 1834218:	e0fffe17 	ldw	r3,-8(fp)
 183421c:	18c00584 	addi	r3,r3,22
 1834220:	1806913a 	slli	r3,r3,4
 1834224:	10c5883a 	add	r2,r2,r3
 1834228:	10800084 	addi	r2,r2,2
 183422c:	1080000b 	ldhu	r2,0(r2)
 1834230:	10bfffc4 	addi	r2,r2,-1
 1834234:	1009883a 	mov	r4,r2
 1834238:	008061f4 	movhi	r2,391
 183423c:	10a77104 	addi	r2,r2,-25148
 1834240:	e0fffe17 	ldw	r3,-8(fp)
 1834244:	18c00584 	addi	r3,r3,22
 1834248:	1806913a 	slli	r3,r3,4
 183424c:	10c5883a 	add	r2,r2,r3
 1834250:	10800084 	addi	r2,r2,2
 1834254:	1100000d 	sth	r4,0(r2)
  
  memp->next = memp_tab[type]; 
 1834258:	00806134 	movhi	r2,388
 183425c:	109ed504 	addi	r2,r2,31572
 1834260:	e0fffe17 	ldw	r3,-8(fp)
 1834264:	18c7883a 	add	r3,r3,r3
 1834268:	18c7883a 	add	r3,r3,r3
 183426c:	10c5883a 	add	r2,r2,r3
 1834270:	10c00017 	ldw	r3,0(r2)
 1834274:	e0bffd17 	ldw	r2,-12(fp)
 1834278:	10c00015 	stw	r3,0(r2)
  memp_tab[type] = memp;
 183427c:	00806134 	movhi	r2,388
 1834280:	109ed504 	addi	r2,r2,31572
 1834284:	e0fffe17 	ldw	r3,-8(fp)
 1834288:	18c7883a 	add	r3,r3,r3
 183428c:	18c7883a 	add	r3,r3,r3
 1834290:	10c5883a 	add	r2,r2,r3
 1834294:	e0fffd17 	ldw	r3,-12(fp)
 1834298:	10c00015 	stw	r3,0(r2)

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 183429c:	1810e380 	call	1810e38 <vTaskExitCritical>
 18342a0:	00000106 	br	18342a8 <memp_free+0xc4>
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
    return;
 18342a4:	0001883a 	nop
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
 18342a8:	e037883a 	mov	sp,fp
 18342ac:	dfc00117 	ldw	ra,4(sp)
 18342b0:	df000017 	ldw	fp,0(sp)
 18342b4:	dec00204 	addi	sp,sp,8
 18342b8:	f800283a 	ret

018342bc <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 18342bc:	defff704 	addi	sp,sp,-36
 18342c0:	dfc00815 	stw	ra,32(sp)
 18342c4:	df000715 	stw	fp,28(sp)
 18342c8:	df000704 	addi	fp,sp,28
 18342cc:	e13ffe15 	stw	r4,-8(fp)
 18342d0:	e17fff15 	stw	r5,-4(fp)
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
 18342d4:	e03ffb05 	stb	zero,-20(fp)

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
 18342d8:	e0bffe17 	ldw	r2,-8(fp)
 18342dc:	10800117 	ldw	r2,4(r2)
 18342e0:	e0bffc15 	stw	r2,-16(fp)
  proto = IPH_PROTO(iphdr);
 18342e4:	e0bffc17 	ldw	r2,-16(fp)
 18342e8:	10800243 	ldbu	r2,9(r2)
 18342ec:	10803fcc 	andi	r2,r2,255
 18342f0:	e0bffd0d 	sth	r2,-12(fp)

  prev = NULL;
 18342f4:	e03ffa15 	stw	zero,-24(fp)
  pcb = raw_pcbs;
 18342f8:	d0a81617 	ldw	r2,-24488(gp)
 18342fc:	e0bff915 	stw	r2,-28(fp)
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 1834300:	00002f06 	br	18343c0 <raw_input+0x104>
    if ((pcb->protocol == proto) &&
 1834304:	e0bff917 	ldw	r2,-28(fp)
 1834308:	10800403 	ldbu	r2,16(r2)
 183430c:	10c03fcc 	andi	r3,r2,255
 1834310:	e0bffd0f 	ldh	r2,-12(fp)
 1834314:	1880251e 	bne	r3,r2,18343ac <raw_input+0xf0>
        (ip_addr_isany(&pcb->local_ip) ||
 1834318:	e0bff917 	ldw	r2,-28(fp)
  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
 183431c:	10000726 	beq	r2,zero,183433c <raw_input+0x80>
        (ip_addr_isany(&pcb->local_ip) ||
 1834320:	e0bff917 	ldw	r2,-28(fp)
 1834324:	10800017 	ldw	r2,0(r2)
 1834328:	10000426 	beq	r2,zero,183433c <raw_input+0x80>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
 183432c:	e0bff917 	ldw	r2,-28(fp)
 1834330:	10c00017 	ldw	r3,0(r2)
 1834334:	d0a81217 	ldw	r2,-24504(gp)
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
        (ip_addr_isany(&pcb->local_ip) ||
 1834338:	18801c1e 	bne	r3,r2,18343ac <raw_input+0xf0>
      /* broadcast filter? */
      if (ip_get_option(pcb, SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
 183433c:	e0bff917 	ldw	r2,-28(fp)
 1834340:	10800517 	ldw	r2,20(r2)
 1834344:	10001926 	beq	r2,zero,18343ac <raw_input+0xf0>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
 1834348:	e0bff917 	ldw	r2,-28(fp)
 183434c:	10800517 	ldw	r2,20(r2)
 1834350:	e0fff917 	ldw	r3,-28(fp)
 1834354:	18c00617 	ldw	r3,24(r3)
 1834358:	d1e81004 	addi	r7,gp,-24512
 183435c:	e1bffe17 	ldw	r6,-8(fp)
 1834360:	e17ff917 	ldw	r5,-28(fp)
 1834364:	1809883a 	mov	r4,r3
 1834368:	103ee83a 	callr	r2
 183436c:	10803fcc 	andi	r2,r2,255
 1834370:	10000e26 	beq	r2,zero,18343ac <raw_input+0xf0>
            /* receive function ate the packet */
            p = NULL;
 1834374:	e03ffe15 	stw	zero,-8(fp)
            eaten = 1;
 1834378:	00800044 	movi	r2,1
 183437c:	e0bffb05 	stb	r2,-20(fp)
            if (prev != NULL) {
 1834380:	e0bffa17 	ldw	r2,-24(fp)
 1834384:	10000926 	beq	r2,zero,18343ac <raw_input+0xf0>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
 1834388:	e0bff917 	ldw	r2,-28(fp)
 183438c:	10c00317 	ldw	r3,12(r2)
 1834390:	e0bffa17 	ldw	r2,-24(fp)
 1834394:	10c00315 	stw	r3,12(r2)
              pcb->next = raw_pcbs;
 1834398:	d0e81617 	ldw	r3,-24488(gp)
 183439c:	e0bff917 	ldw	r2,-28(fp)
 18343a0:	10c00315 	stw	r3,12(r2)
              raw_pcbs = pcb;
 18343a4:	e0bff917 	ldw	r2,-28(fp)
 18343a8:	d0a81615 	stw	r2,-24488(gp)
        }
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
 18343ac:	e0bff917 	ldw	r2,-28(fp)
 18343b0:	e0bffa15 	stw	r2,-24(fp)
    pcb = pcb->next;
 18343b4:	e0bff917 	ldw	r2,-28(fp)
 18343b8:	10800317 	ldw	r2,12(r2)
 18343bc:	e0bff915 	stw	r2,-28(fp)

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 18343c0:	e0bffb03 	ldbu	r2,-20(fp)
 18343c4:	1000021e 	bne	r2,zero,18343d0 <raw_input+0x114>
 18343c8:	e0bff917 	ldw	r2,-28(fp)
 18343cc:	103fcd1e 	bne	r2,zero,1834304 <__alt_mem_mem_0+0xff814304>
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
 18343d0:	e0bffb03 	ldbu	r2,-20(fp)
}
 18343d4:	e037883a 	mov	sp,fp
 18343d8:	dfc00117 	ldw	ra,4(sp)
 18343dc:	df000017 	ldw	fp,0(sp)
 18343e0:	dec00204 	addi	sp,sp,8
 18343e4:	f800283a 	ret

018343e8 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, ip_addr_t *ipaddr)
{
 18343e8:	defffd04 	addi	sp,sp,-12
 18343ec:	df000215 	stw	fp,8(sp)
 18343f0:	df000204 	addi	fp,sp,8
 18343f4:	e13ffe15 	stw	r4,-8(fp)
 18343f8:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&pcb->local_ip, ipaddr);
 18343fc:	e0bfff17 	ldw	r2,-4(fp)
 1834400:	10000326 	beq	r2,zero,1834410 <raw_bind+0x28>
 1834404:	e0bfff17 	ldw	r2,-4(fp)
 1834408:	10800017 	ldw	r2,0(r2)
 183440c:	00000106 	br	1834414 <raw_bind+0x2c>
 1834410:	0005883a 	mov	r2,zero
 1834414:	e0fffe17 	ldw	r3,-8(fp)
 1834418:	18800015 	stw	r2,0(r3)
  return ERR_OK;
 183441c:	0005883a 	mov	r2,zero
}
 1834420:	e037883a 	mov	sp,fp
 1834424:	df000017 	ldw	fp,0(sp)
 1834428:	dec00104 	addi	sp,sp,4
 183442c:	f800283a 	ret

01834430 <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, ip_addr_t *ipaddr)
{
 1834430:	defffd04 	addi	sp,sp,-12
 1834434:	df000215 	stw	fp,8(sp)
 1834438:	df000204 	addi	fp,sp,8
 183443c:	e13ffe15 	stw	r4,-8(fp)
 1834440:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&pcb->remote_ip, ipaddr);
 1834444:	e0bfff17 	ldw	r2,-4(fp)
 1834448:	10000326 	beq	r2,zero,1834458 <raw_connect+0x28>
 183444c:	e0bfff17 	ldw	r2,-4(fp)
 1834450:	10800017 	ldw	r2,0(r2)
 1834454:	00000106 	br	183445c <raw_connect+0x2c>
 1834458:	0005883a 	mov	r2,zero
 183445c:	e0fffe17 	ldw	r3,-8(fp)
 1834460:	18800115 	stw	r2,4(r3)
  return ERR_OK;
 1834464:	0005883a 	mov	r2,zero
}
 1834468:	e037883a 	mov	sp,fp
 183446c:	df000017 	ldw	fp,0(sp)
 1834470:	dec00104 	addi	sp,sp,4
 1834474:	f800283a 	ret

01834478 <raw_recv>:
 * @return non-zero if the packet was free()d, zero if the packet remains
 * available for others.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
 1834478:	defffc04 	addi	sp,sp,-16
 183447c:	df000315 	stw	fp,12(sp)
 1834480:	df000304 	addi	fp,sp,12
 1834484:	e13ffd15 	stw	r4,-12(fp)
 1834488:	e17ffe15 	stw	r5,-8(fp)
 183448c:	e1bfff15 	stw	r6,-4(fp)
  /* remember recv() callback and user data */
  pcb->recv = recv;
 1834490:	e0bffd17 	ldw	r2,-12(fp)
 1834494:	e0fffe17 	ldw	r3,-8(fp)
 1834498:	10c00515 	stw	r3,20(r2)
  pcb->recv_arg = recv_arg;
 183449c:	e0bffd17 	ldw	r2,-12(fp)
 18344a0:	e0ffff17 	ldw	r3,-4(fp)
 18344a4:	10c00615 	stw	r3,24(r2)
}
 18344a8:	0001883a 	nop
 18344ac:	e037883a 	mov	sp,fp
 18344b0:	df000017 	ldw	fp,0(sp)
 18344b4:	dec00104 	addi	sp,sp,4
 18344b8:	f800283a 	ret

018344bc <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, ip_addr_t *ipaddr)
{
 18344bc:	defff404 	addi	sp,sp,-48
 18344c0:	dfc00b15 	stw	ra,44(sp)
 18344c4:	df000a15 	stw	fp,40(sp)
 18344c8:	df000a04 	addi	fp,sp,40
 18344cc:	e13ffd15 	stw	r4,-12(fp)
 18344d0:	e17ffe15 	stw	r5,-8(fp)
 18344d4:	e1bfff15 	stw	r6,-4(fp)
  struct pbuf *q; /* q will be sent down the stack */
  
  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));
  
  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, IP_HLEN)) {
 18344d8:	01400504 	movi	r5,20
 18344dc:	e13ffe17 	ldw	r4,-8(fp)
 18344e0:	181a7540 	call	181a754 <pbuf_header>
 18344e4:	10803fcc 	andi	r2,r2,255
 18344e8:	10001126 	beq	r2,zero,1834530 <raw_sendto+0x74>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
 18344ec:	000d883a 	mov	r6,zero
 18344f0:	000b883a 	mov	r5,zero
 18344f4:	01000044 	movi	r4,1
 18344f8:	181a1480 	call	181a148 <pbuf_alloc>
 18344fc:	e0bffa15 	stw	r2,-24(fp)
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 1834500:	e0bffa17 	ldw	r2,-24(fp)
 1834504:	1000021e 	bne	r2,zero,1834510 <raw_sendto+0x54>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
 1834508:	00bfffc4 	movi	r2,-1
 183450c:	00004806 	br	1834630 <raw_sendto+0x174>
    }
    if (p->tot_len != 0) {
 1834510:	e0bffe17 	ldw	r2,-8(fp)
 1834514:	1080020b 	ldhu	r2,8(r2)
 1834518:	10bfffcc 	andi	r2,r2,65535
 183451c:	10000d26 	beq	r2,zero,1834554 <raw_sendto+0x98>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
 1834520:	e17ffe17 	ldw	r5,-8(fp)
 1834524:	e13ffa17 	ldw	r4,-24(fp)
 1834528:	181abac0 	call	181abac <pbuf_chain>
 183452c:	00000906 	br	1834554 <raw_sendto+0x98>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  }  else {
    /* first pbuf q equals given pbuf */
    q = p;
 1834530:	e0bffe17 	ldw	r2,-8(fp)
 1834534:	e0bffa15 	stw	r2,-24(fp)
    if(pbuf_header(q, -IP_HLEN)) {
 1834538:	017ffb04 	movi	r5,-20
 183453c:	e13ffa17 	ldw	r4,-24(fp)
 1834540:	181a7540 	call	181a754 <pbuf_header>
 1834544:	10803fcc 	andi	r2,r2,255
 1834548:	10000226 	beq	r2,zero,1834554 <raw_sendto+0x98>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
      return ERR_MEM;
 183454c:	00bfffc4 	movi	r2,-1
 1834550:	00003706 	br	1834630 <raw_sendto+0x174>
    }
  }

  if ((netif = ip_route((struct ip_pcb*)pcb, ipaddr)) == NULL) {
 1834554:	e17fff17 	ldw	r5,-4(fp)
 1834558:	e13ffd17 	ldw	r4,-12(fp)
 183455c:	18319100 	call	1831910 <ip_route>
 1834560:	e0bffb15 	stw	r2,-20(fp)
 1834564:	e0bffb17 	ldw	r2,-20(fp)
 1834568:	1000071e 	bne	r2,zero,1834588 <raw_sendto+0xcc>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr)));
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
 183456c:	e0fffa17 	ldw	r3,-24(fp)
 1834570:	e0bffe17 	ldw	r2,-8(fp)
 1834574:	18800226 	beq	r3,r2,1834580 <raw_sendto+0xc4>
      pbuf_free(q);
 1834578:	e13ffa17 	ldw	r4,-24(fp)
 183457c:	181a9040 	call	181a904 <pbuf_free>
    }
    return ERR_RTE;
 1834580:	00bfff04 	movi	r2,-4
 1834584:	00002a06 	br	1834630 <raw_sendto+0x174>
    }
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
 1834588:	e0bffd17 	ldw	r2,-12(fp)
 183458c:	10000326 	beq	r2,zero,183459c <raw_sendto+0xe0>
 1834590:	e0bffd17 	ldw	r2,-12(fp)
 1834594:	10800017 	ldw	r2,0(r2)
 1834598:	1000041e 	bne	r2,zero,18345ac <raw_sendto+0xf0>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 183459c:	e0bffb17 	ldw	r2,-20(fp)
 18345a0:	10800104 	addi	r2,r2,4
 18345a4:	e0bff915 	stw	r2,-28(fp)
 18345a8:	00000206 	br	18345b4 <raw_sendto+0xf8>
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
 18345ac:	e0bffd17 	ldw	r2,-12(fp)
 18345b0:	e0bff915 	stw	r2,-28(fp)
  }

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
 18345b4:	e0bffd17 	ldw	r2,-12(fp)
 18345b8:	10c002c4 	addi	r3,r2,11
 18345bc:	e0bffb17 	ldw	r2,-20(fp)
 18345c0:	10c01015 	stw	r3,64(r2)
  err = ip_output_if (q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
 18345c4:	e0bffd17 	ldw	r2,-12(fp)
 18345c8:	10800283 	ldbu	r2,10(r2)
 18345cc:	11403fcc 	andi	r5,r2,255
 18345d0:	e0bffd17 	ldw	r2,-12(fp)
 18345d4:	10800243 	ldbu	r2,9(r2)
 18345d8:	10803fcc 	andi	r2,r2,255
 18345dc:	e0fffd17 	ldw	r3,-12(fp)
 18345e0:	18c00403 	ldbu	r3,16(r3)
 18345e4:	18c03fcc 	andi	r3,r3,255
 18345e8:	e13ffb17 	ldw	r4,-20(fp)
 18345ec:	d9000215 	stw	r4,8(sp)
 18345f0:	d8c00115 	stw	r3,4(sp)
 18345f4:	d8800015 	stw	r2,0(sp)
 18345f8:	280f883a 	mov	r7,r5
 18345fc:	e1bfff17 	ldw	r6,-4(fp)
 1834600:	e17ff917 	ldw	r5,-28(fp)
 1834604:	e13ffa17 	ldw	r4,-24(fp)
 1834608:	1831f3c0 	call	1831f3c <ip_output_if>
 183460c:	e0bffc05 	stb	r2,-16(fp)
  NETIF_SET_HWADDRHINT(netif, NULL);
 1834610:	e0bffb17 	ldw	r2,-20(fp)
 1834614:	10001015 	stw	zero,64(r2)

  /* did we chain a header earlier? */
  if (q != p) {
 1834618:	e0fffa17 	ldw	r3,-24(fp)
 183461c:	e0bffe17 	ldw	r2,-8(fp)
 1834620:	18800226 	beq	r3,r2,183462c <raw_sendto+0x170>
    /* free the header */
    pbuf_free(q);
 1834624:	e13ffa17 	ldw	r4,-24(fp)
 1834628:	181a9040 	call	181a904 <pbuf_free>
  }
  return err;
 183462c:	e0bffc03 	ldbu	r2,-16(fp)
}
 1834630:	e037883a 	mov	sp,fp
 1834634:	dfc00117 	ldw	ra,4(sp)
 1834638:	df000017 	ldw	fp,0(sp)
 183463c:	dec00204 	addi	sp,sp,8
 1834640:	f800283a 	ret

01834644 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
 1834644:	defffc04 	addi	sp,sp,-16
 1834648:	dfc00315 	stw	ra,12(sp)
 183464c:	df000215 	stw	fp,8(sp)
 1834650:	df000204 	addi	fp,sp,8
 1834654:	e13ffe15 	stw	r4,-8(fp)
 1834658:	e17fff15 	stw	r5,-4(fp)
  return raw_sendto(pcb, p, &pcb->remote_ip);
 183465c:	e0bffe17 	ldw	r2,-8(fp)
 1834660:	10800104 	addi	r2,r2,4
 1834664:	100d883a 	mov	r6,r2
 1834668:	e17fff17 	ldw	r5,-4(fp)
 183466c:	e13ffe17 	ldw	r4,-8(fp)
 1834670:	18344bc0 	call	18344bc <raw_sendto>
}
 1834674:	e037883a 	mov	sp,fp
 1834678:	dfc00117 	ldw	ra,4(sp)
 183467c:	df000017 	ldw	fp,0(sp)
 1834680:	dec00204 	addi	sp,sp,8
 1834684:	f800283a 	ret

01834688 <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
 1834688:	defffc04 	addi	sp,sp,-16
 183468c:	dfc00315 	stw	ra,12(sp)
 1834690:	df000215 	stw	fp,8(sp)
 1834694:	df000204 	addi	fp,sp,8
 1834698:	e13fff15 	stw	r4,-4(fp)
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
 183469c:	d0e81617 	ldw	r3,-24488(gp)
 18346a0:	e0bfff17 	ldw	r2,-4(fp)
 18346a4:	1880041e 	bne	r3,r2,18346b8 <raw_remove+0x30>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
 18346a8:	d0a81617 	ldw	r2,-24488(gp)
 18346ac:	10800317 	ldw	r2,12(r2)
 18346b0:	d0a81615 	stw	r2,-24488(gp)
 18346b4:	00001306 	br	1834704 <raw_remove+0x7c>
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 18346b8:	d0a81617 	ldw	r2,-24488(gp)
 18346bc:	e0bffe15 	stw	r2,-8(fp)
 18346c0:	00000e06 	br	18346fc <raw_remove+0x74>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 18346c4:	e0bffe17 	ldw	r2,-8(fp)
 18346c8:	10800317 	ldw	r2,12(r2)
 18346cc:	10000826 	beq	r2,zero,18346f0 <raw_remove+0x68>
 18346d0:	e0bffe17 	ldw	r2,-8(fp)
 18346d4:	10c00317 	ldw	r3,12(r2)
 18346d8:	e0bfff17 	ldw	r2,-4(fp)
 18346dc:	1880041e 	bne	r3,r2,18346f0 <raw_remove+0x68>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 18346e0:	e0bfff17 	ldw	r2,-4(fp)
 18346e4:	10c00317 	ldw	r3,12(r2)
 18346e8:	e0bffe17 	ldw	r2,-8(fp)
 18346ec:	10c00315 	stw	r3,12(r2)
  if (raw_pcbs == pcb) {
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 18346f0:	e0bffe17 	ldw	r2,-8(fp)
 18346f4:	10800317 	ldw	r2,12(r2)
 18346f8:	e0bffe15 	stw	r2,-8(fp)
 18346fc:	e0bffe17 	ldw	r2,-8(fp)
 1834700:	103ff01e 	bne	r2,zero,18346c4 <__alt_mem_mem_0+0xff8146c4>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
 1834704:	e17fff17 	ldw	r5,-4(fp)
 1834708:	0009883a 	mov	r4,zero
 183470c:	18341e40 	call	18341e4 <memp_free>
}
 1834710:	0001883a 	nop
 1834714:	e037883a 	mov	sp,fp
 1834718:	dfc00117 	ldw	ra,4(sp)
 183471c:	df000017 	ldw	fp,0(sp)
 1834720:	dec00204 	addi	sp,sp,8
 1834724:	f800283a 	ret

01834728 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
 1834728:	defffc04 	addi	sp,sp,-16
 183472c:	dfc00315 	stw	ra,12(sp)
 1834730:	df000215 	stw	fp,8(sp)
 1834734:	df000204 	addi	fp,sp,8
 1834738:	2005883a 	mov	r2,r4
 183473c:	e0bfff05 	stb	r2,-4(fp)
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
 1834740:	0009883a 	mov	r4,zero
 1834744:	18340280 	call	1834028 <memp_malloc>
 1834748:	e0bffe15 	stw	r2,-8(fp)
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
 183474c:	e0bffe17 	ldw	r2,-8(fp)
 1834750:	10000f26 	beq	r2,zero,1834790 <raw_new+0x68>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
 1834754:	01800704 	movi	r6,28
 1834758:	000b883a 	mov	r5,zero
 183475c:	e13ffe17 	ldw	r4,-8(fp)
 1834760:	18061940 	call	1806194 <memset>
    pcb->protocol = proto;
 1834764:	e0bffe17 	ldw	r2,-8(fp)
 1834768:	e0ffff03 	ldbu	r3,-4(fp)
 183476c:	10c00405 	stb	r3,16(r2)
    pcb->ttl = RAW_TTL;
 1834770:	e0bffe17 	ldw	r2,-8(fp)
 1834774:	00c01004 	movi	r3,64
 1834778:	10c00285 	stb	r3,10(r2)
    pcb->next = raw_pcbs;
 183477c:	d0e81617 	ldw	r3,-24488(gp)
 1834780:	e0bffe17 	ldw	r2,-8(fp)
 1834784:	10c00315 	stw	r3,12(r2)
    raw_pcbs = pcb;
 1834788:	e0bffe17 	ldw	r2,-8(fp)
 183478c:	d0a81615 	stw	r2,-24488(gp)
  }
  return pcb;
 1834790:	e0bffe17 	ldw	r2,-8(fp)
}
 1834794:	e037883a 	mov	sp,fp
 1834798:	dfc00117 	ldw	ra,4(sp)
 183479c:	df000017 	ldw	fp,0(sp)
 18347a0:	dec00204 	addi	sp,sp,8
 18347a4:	f800283a 	ret

018347a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 18347a8:	defff404 	addi	sp,sp,-48
 18347ac:	dfc00b15 	stw	ra,44(sp)
 18347b0:	df000a15 	stw	fp,40(sp)
 18347b4:	df000a04 	addi	fp,sp,40
 18347b8:	e13ffe15 	stw	r4,-8(fp)
 18347bc:	e17fff15 	stw	r5,-4(fp)
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
 18347c0:	e03ffb15 	stw	zero,-20(fp)
  struct tcp_pcb_listen *lpcb_any = NULL;
 18347c4:	e03ffc15 	stw	zero,-16(fp)
  u8_t hdrlen;
  err_t err;

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 18347c8:	008061f4 	movhi	r2,391
 18347cc:	10a77104 	addi	r2,r2,-25148
 18347d0:	10804917 	ldw	r2,292(r2)
 18347d4:	10c00044 	addi	r3,r2,1
 18347d8:	008061f4 	movhi	r2,391
 18347dc:	10a77104 	addi	r2,r2,-25148
 18347e0:	10c04915 	stw	r3,292(r2)
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
 18347e4:	e0bffe17 	ldw	r2,-8(fp)
 18347e8:	10800117 	ldw	r2,4(r2)
 18347ec:	d0a81815 	stw	r2,-24480(gp)
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 18347f0:	e0bffe17 	ldw	r2,-8(fp)
 18347f4:	10c00117 	ldw	r3,4(r2)
 18347f8:	d0a81817 	ldw	r2,-24480(gp)
 18347fc:	10800003 	ldbu	r2,0(r2)
 1834800:	10803fcc 	andi	r2,r2,255
 1834804:	108003cc 	andi	r2,r2,15
 1834808:	1085883a 	add	r2,r2,r2
 183480c:	1085883a 	add	r2,r2,r2
 1834810:	1885883a 	add	r2,r3,r2
 1834814:	d0a81715 	stw	r2,-24484(gp)
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 1834818:	d0a81817 	ldw	r2,-24480(gp)
 183481c:	10800003 	ldbu	r2,0(r2)
 1834820:	10803fcc 	andi	r2,r2,255
 1834824:	108003cc 	andi	r2,r2,15
 1834828:	1085883a 	add	r2,r2,r2
 183482c:	1085883a 	add	r2,r2,r2
 1834830:	0085c83a 	sub	r2,zero,r2
 1834834:	10bfffcc 	andi	r2,r2,65535
 1834838:	10a0001c 	xori	r2,r2,32768
 183483c:	10a00004 	addi	r2,r2,-32768
 1834840:	100b883a 	mov	r5,r2
 1834844:	e13ffe17 	ldw	r4,-8(fp)
 1834848:	181a7540 	call	181a754 <pbuf_header>
 183484c:	10803fcc 	andi	r2,r2,255
 1834850:	1000051e 	bne	r2,zero,1834868 <tcp_input+0xc0>
 1834854:	e0bffe17 	ldw	r2,-8(fp)
 1834858:	1080020b 	ldhu	r2,8(r2)
 183485c:	10bfffcc 	andi	r2,r2,65535
 1834860:	10800528 	cmpgeui	r2,r2,20
 1834864:	1000081e 	bne	r2,zero,1834888 <tcp_input+0xe0>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 1834868:	008061f4 	movhi	r2,391
 183486c:	10a77104 	addi	r2,r2,-25148
 1834870:	10804d17 	ldw	r2,308(r2)
 1834874:	10c00044 	addi	r3,r2,1
 1834878:	008061f4 	movhi	r2,391
 183487c:	10a77104 	addi	r2,r2,-25148
 1834880:	10c04d15 	stw	r3,308(r2)
    goto dropped;
 1834884:	00035706 	br	18355e4 <tcp_input+0xe3c>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 1834888:	d0a81217 	ldw	r2,-24504(gp)
 183488c:	e17fff17 	ldw	r5,-4(fp)
 1834890:	1009883a 	mov	r4,r2
 1834894:	18187180 	call	1818718 <ip4_addr_isbroadcast>
 1834898:	10803fcc 	andi	r2,r2,255
 183489c:	1000041e 	bne	r2,zero,18348b0 <tcp_input+0x108>
      ip_addr_ismulticast(&current_iphdr_dest)) {
 18348a0:	d0a81217 	ldw	r2,-24504(gp)
 18348a4:	10803c0c 	andi	r2,r2,240
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 18348a8:	10803818 	cmpnei	r2,r2,224
 18348ac:	1000081e 	bne	r2,zero,18348d0 <tcp_input+0x128>
      ip_addr_ismulticast(&current_iphdr_dest)) {
    TCP_STATS_INC(tcp.proterr);
 18348b0:	008061f4 	movhi	r2,391
 18348b4:	10a77104 	addi	r2,r2,-25148
 18348b8:	10805017 	ldw	r2,320(r2)
 18348bc:	10c00044 	addi	r3,r2,1
 18348c0:	008061f4 	movhi	r2,391
 18348c4:	10a77104 	addi	r2,r2,-25148
 18348c8:	10c05015 	stw	r3,320(r2)
    goto dropped;
 18348cc:	00034506 	br	18355e4 <tcp_input+0xe3c>
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len) != 0) {
 18348d0:	e0bffe17 	ldw	r2,-8(fp)
 18348d4:	1080020b 	ldhu	r2,8(r2)
    goto dropped;
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 18348d8:	10bfffcc 	andi	r2,r2,65535
 18348dc:	d8800015 	stw	r2,0(sp)
 18348e0:	01c00184 	movi	r7,6
 18348e4:	d1a81204 	addi	r6,gp,-24504
 18348e8:	d1681004 	addi	r5,gp,-24512
 18348ec:	e13ffe17 	ldw	r4,-8(fp)
 18348f0:	18313300 	call	1831330 <inet_chksum_pseudo>
 18348f4:	10bfffcc 	andi	r2,r2,65535
 18348f8:	10000826 	beq	r2,zero,183491c <tcp_input+0x174>
        inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len)));
#if TCP_DEBUG
    tcp_debug_print(tcphdr);
#endif /* TCP_DEBUG */
    TCP_STATS_INC(tcp.chkerr);
 18348fc:	008061f4 	movhi	r2,391
 1834900:	10a77104 	addi	r2,r2,-25148
 1834904:	10804c17 	ldw	r2,304(r2)
 1834908:	10c00044 	addi	r3,r2,1
 183490c:	008061f4 	movhi	r2,391
 1834910:	10a77104 	addi	r2,r2,-25148
 1834914:	10c04c15 	stw	r3,304(r2)
    goto dropped;
 1834918:	00033206 	br	18355e4 <tcp_input+0xe3c>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
 183491c:	d0a81717 	ldw	r2,-24484(gp)
 1834920:	10c00303 	ldbu	r3,12(r2)
 1834924:	10800343 	ldbu	r2,13(r2)
 1834928:	1004923a 	slli	r2,r2,8
 183492c:	10c4b03a 	or	r2,r2,r3
 1834930:	10bfffcc 	andi	r2,r2,65535
 1834934:	1004d23a 	srli	r2,r2,8
 1834938:	10ffffcc 	andi	r3,r2,65535
 183493c:	d0a81717 	ldw	r2,-24484(gp)
 1834940:	11000303 	ldbu	r4,12(r2)
 1834944:	10800343 	ldbu	r2,13(r2)
 1834948:	1004923a 	slli	r2,r2,8
 183494c:	1104b03a 	or	r2,r2,r4
 1834950:	10bfffcc 	andi	r2,r2,65535
 1834954:	1004923a 	slli	r2,r2,8
 1834958:	10bfffcc 	andi	r2,r2,65535
 183495c:	1884b03a 	or	r2,r3,r2
 1834960:	1005d33a 	srai	r2,r2,12
 1834964:	e0bffd45 	stb	r2,-11(fp)
  if(pbuf_header(p, -(hdrlen * 4))){
 1834968:	e0bffd43 	ldbu	r2,-11(fp)
 183496c:	10bfff24 	muli	r2,r2,-4
 1834970:	10bfffcc 	andi	r2,r2,65535
 1834974:	10a0001c 	xori	r2,r2,32768
 1834978:	10a00004 	addi	r2,r2,-32768
 183497c:	100b883a 	mov	r5,r2
 1834980:	e13ffe17 	ldw	r4,-8(fp)
 1834984:	181a7540 	call	181a754 <pbuf_header>
 1834988:	10803fcc 	andi	r2,r2,255
 183498c:	10000826 	beq	r2,zero,18349b0 <tcp_input+0x208>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
    TCP_STATS_INC(tcp.lenerr);
 1834990:	008061f4 	movhi	r2,391
 1834994:	10a77104 	addi	r2,r2,-25148
 1834998:	10804d17 	ldw	r2,308(r2)
 183499c:	10c00044 	addi	r3,r2,1
 18349a0:	008061f4 	movhi	r2,391
 18349a4:	10a77104 	addi	r2,r2,-25148
 18349a8:	10c04d15 	stw	r3,308(r2)
    goto dropped;
 18349ac:	00030d06 	br	18355e4 <tcp_input+0xe3c>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 18349b0:	d0a81717 	ldw	r2,-24484(gp)
 18349b4:	d0e81717 	ldw	r3,-24484(gp)
 18349b8:	19000003 	ldbu	r4,0(r3)
 18349bc:	18c00043 	ldbu	r3,1(r3)
 18349c0:	1806923a 	slli	r3,r3,8
 18349c4:	1906b03a 	or	r3,r3,r4
 18349c8:	18ffffcc 	andi	r3,r3,65535
 18349cc:	1806d23a 	srli	r3,r3,8
 18349d0:	180b883a 	mov	r5,r3
 18349d4:	d0e81717 	ldw	r3,-24484(gp)
 18349d8:	19000003 	ldbu	r4,0(r3)
 18349dc:	18c00043 	ldbu	r3,1(r3)
 18349e0:	1806923a 	slli	r3,r3,8
 18349e4:	1906b03a 	or	r3,r3,r4
 18349e8:	18ffffcc 	andi	r3,r3,65535
 18349ec:	1806923a 	slli	r3,r3,8
 18349f0:	28c6b03a 	or	r3,r5,r3
 18349f4:	180d883a 	mov	r6,r3
 18349f8:	30ffffcc 	andi	r3,r6,65535
 18349fc:	19403fcc 	andi	r5,r3,255
 1834a00:	10c00003 	ldbu	r3,0(r2)
 1834a04:	1806703a 	and	r3,r3,zero
 1834a08:	1809883a 	mov	r4,r3
 1834a0c:	2807883a 	mov	r3,r5
 1834a10:	20c6b03a 	or	r3,r4,r3
 1834a14:	10c00005 	stb	r3,0(r2)
 1834a18:	30ffffcc 	andi	r3,r6,65535
 1834a1c:	1806d23a 	srli	r3,r3,8
 1834a20:	197fffcc 	andi	r5,r3,65535
 1834a24:	10c00043 	ldbu	r3,1(r2)
 1834a28:	1806703a 	and	r3,r3,zero
 1834a2c:	1809883a 	mov	r4,r3
 1834a30:	2807883a 	mov	r3,r5
 1834a34:	20c6b03a 	or	r3,r4,r3
 1834a38:	10c00045 	stb	r3,1(r2)
  tcphdr->dest = ntohs(tcphdr->dest);
 1834a3c:	d0a81717 	ldw	r2,-24484(gp)
 1834a40:	d0e81717 	ldw	r3,-24484(gp)
 1834a44:	19000083 	ldbu	r4,2(r3)
 1834a48:	18c000c3 	ldbu	r3,3(r3)
 1834a4c:	1806923a 	slli	r3,r3,8
 1834a50:	1906b03a 	or	r3,r3,r4
 1834a54:	18ffffcc 	andi	r3,r3,65535
 1834a58:	1806d23a 	srli	r3,r3,8
 1834a5c:	180b883a 	mov	r5,r3
 1834a60:	d0e81717 	ldw	r3,-24484(gp)
 1834a64:	19000083 	ldbu	r4,2(r3)
 1834a68:	18c000c3 	ldbu	r3,3(r3)
 1834a6c:	1806923a 	slli	r3,r3,8
 1834a70:	1906b03a 	or	r3,r3,r4
 1834a74:	18ffffcc 	andi	r3,r3,65535
 1834a78:	1806923a 	slli	r3,r3,8
 1834a7c:	28c6b03a 	or	r3,r5,r3
 1834a80:	180d883a 	mov	r6,r3
 1834a84:	30ffffcc 	andi	r3,r6,65535
 1834a88:	19403fcc 	andi	r5,r3,255
 1834a8c:	10c00083 	ldbu	r3,2(r2)
 1834a90:	1806703a 	and	r3,r3,zero
 1834a94:	1809883a 	mov	r4,r3
 1834a98:	2807883a 	mov	r3,r5
 1834a9c:	20c6b03a 	or	r3,r4,r3
 1834aa0:	10c00085 	stb	r3,2(r2)
 1834aa4:	30ffffcc 	andi	r3,r6,65535
 1834aa8:	1806d23a 	srli	r3,r3,8
 1834aac:	197fffcc 	andi	r5,r3,65535
 1834ab0:	10c000c3 	ldbu	r3,3(r2)
 1834ab4:	1806703a 	and	r3,r3,zero
 1834ab8:	1809883a 	mov	r4,r3
 1834abc:	2807883a 	mov	r3,r5
 1834ac0:	20c6b03a 	or	r3,r4,r3
 1834ac4:	10c000c5 	stb	r3,3(r2)
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 1834ac8:	d0a81717 	ldw	r2,-24484(gp)
 1834acc:	d0e81717 	ldw	r3,-24484(gp)
 1834ad0:	19000103 	ldbu	r4,4(r3)
 1834ad4:	19400143 	ldbu	r5,5(r3)
 1834ad8:	280a923a 	slli	r5,r5,8
 1834adc:	2908b03a 	or	r4,r5,r4
 1834ae0:	19400183 	ldbu	r5,6(r3)
 1834ae4:	280a943a 	slli	r5,r5,16
 1834ae8:	2908b03a 	or	r4,r5,r4
 1834aec:	18c001c3 	ldbu	r3,7(r3)
 1834af0:	1806963a 	slli	r3,r3,24
 1834af4:	1906b03a 	or	r3,r3,r4
 1834af8:	1808d63a 	srli	r4,r3,24
 1834afc:	d0e81717 	ldw	r3,-24484(gp)
 1834b00:	19400103 	ldbu	r5,4(r3)
 1834b04:	19800143 	ldbu	r6,5(r3)
 1834b08:	300c923a 	slli	r6,r6,8
 1834b0c:	314ab03a 	or	r5,r6,r5
 1834b10:	19800183 	ldbu	r6,6(r3)
 1834b14:	300c943a 	slli	r6,r6,16
 1834b18:	314ab03a 	or	r5,r6,r5
 1834b1c:	18c001c3 	ldbu	r3,7(r3)
 1834b20:	1806963a 	slli	r3,r3,24
 1834b24:	1946b03a 	or	r3,r3,r5
 1834b28:	1806d23a 	srli	r3,r3,8
 1834b2c:	18ffc00c 	andi	r3,r3,65280
 1834b30:	20c8b03a 	or	r4,r4,r3
 1834b34:	d0e81717 	ldw	r3,-24484(gp)
 1834b38:	19400103 	ldbu	r5,4(r3)
 1834b3c:	19800143 	ldbu	r6,5(r3)
 1834b40:	300c923a 	slli	r6,r6,8
 1834b44:	314ab03a 	or	r5,r6,r5
 1834b48:	19800183 	ldbu	r6,6(r3)
 1834b4c:	300c943a 	slli	r6,r6,16
 1834b50:	314ab03a 	or	r5,r6,r5
 1834b54:	18c001c3 	ldbu	r3,7(r3)
 1834b58:	1806963a 	slli	r3,r3,24
 1834b5c:	1946b03a 	or	r3,r3,r5
 1834b60:	18ffc00c 	andi	r3,r3,65280
 1834b64:	1806923a 	slli	r3,r3,8
 1834b68:	20c8b03a 	or	r4,r4,r3
 1834b6c:	d0e81717 	ldw	r3,-24484(gp)
 1834b70:	19400103 	ldbu	r5,4(r3)
 1834b74:	19800143 	ldbu	r6,5(r3)
 1834b78:	300c923a 	slli	r6,r6,8
 1834b7c:	314ab03a 	or	r5,r6,r5
 1834b80:	19800183 	ldbu	r6,6(r3)
 1834b84:	300c943a 	slli	r6,r6,16
 1834b88:	314ab03a 	or	r5,r6,r5
 1834b8c:	18c001c3 	ldbu	r3,7(r3)
 1834b90:	1806963a 	slli	r3,r3,24
 1834b94:	1946b03a 	or	r3,r3,r5
 1834b98:	1806963a 	slli	r3,r3,24
 1834b9c:	20c6b03a 	or	r3,r4,r3
 1834ba0:	19803fcc 	andi	r6,r3,255
 1834ba4:	11000103 	ldbu	r4,4(r2)
 1834ba8:	2008703a 	and	r4,r4,zero
 1834bac:	200b883a 	mov	r5,r4
 1834bb0:	3009883a 	mov	r4,r6
 1834bb4:	2908b03a 	or	r4,r5,r4
 1834bb8:	11000105 	stb	r4,4(r2)
 1834bbc:	1808d23a 	srli	r4,r3,8
 1834bc0:	21803fcc 	andi	r6,r4,255
 1834bc4:	11000143 	ldbu	r4,5(r2)
 1834bc8:	2008703a 	and	r4,r4,zero
 1834bcc:	200b883a 	mov	r5,r4
 1834bd0:	3009883a 	mov	r4,r6
 1834bd4:	2908b03a 	or	r4,r5,r4
 1834bd8:	11000145 	stb	r4,5(r2)
 1834bdc:	1808d43a 	srli	r4,r3,16
 1834be0:	21803fcc 	andi	r6,r4,255
 1834be4:	11000183 	ldbu	r4,6(r2)
 1834be8:	2008703a 	and	r4,r4,zero
 1834bec:	200b883a 	mov	r5,r4
 1834bf0:	3009883a 	mov	r4,r6
 1834bf4:	2908b03a 	or	r4,r5,r4
 1834bf8:	11000185 	stb	r4,6(r2)
 1834bfc:	180ad63a 	srli	r5,r3,24
 1834c00:	10c001c3 	ldbu	r3,7(r2)
 1834c04:	1806703a 	and	r3,r3,zero
 1834c08:	1809883a 	mov	r4,r3
 1834c0c:	2807883a 	mov	r3,r5
 1834c10:	20c6b03a 	or	r3,r4,r3
 1834c14:	10c001c5 	stb	r3,7(r2)
 1834c18:	10c00103 	ldbu	r3,4(r2)
 1834c1c:	11000143 	ldbu	r4,5(r2)
 1834c20:	2008923a 	slli	r4,r4,8
 1834c24:	20c6b03a 	or	r3,r4,r3
 1834c28:	11000183 	ldbu	r4,6(r2)
 1834c2c:	2008943a 	slli	r4,r4,16
 1834c30:	20c6b03a 	or	r3,r4,r3
 1834c34:	108001c3 	ldbu	r2,7(r2)
 1834c38:	1004963a 	slli	r2,r2,24
 1834c3c:	10c4b03a 	or	r2,r2,r3
 1834c40:	d0a81915 	stw	r2,-24476(gp)
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 1834c44:	d0a81717 	ldw	r2,-24484(gp)
 1834c48:	d0e81717 	ldw	r3,-24484(gp)
 1834c4c:	19000203 	ldbu	r4,8(r3)
 1834c50:	19400243 	ldbu	r5,9(r3)
 1834c54:	280a923a 	slli	r5,r5,8
 1834c58:	2908b03a 	or	r4,r5,r4
 1834c5c:	19400283 	ldbu	r5,10(r3)
 1834c60:	280a943a 	slli	r5,r5,16
 1834c64:	2908b03a 	or	r4,r5,r4
 1834c68:	18c002c3 	ldbu	r3,11(r3)
 1834c6c:	1806963a 	slli	r3,r3,24
 1834c70:	1906b03a 	or	r3,r3,r4
 1834c74:	1808d63a 	srli	r4,r3,24
 1834c78:	d0e81717 	ldw	r3,-24484(gp)
 1834c7c:	19400203 	ldbu	r5,8(r3)
 1834c80:	19800243 	ldbu	r6,9(r3)
 1834c84:	300c923a 	slli	r6,r6,8
 1834c88:	314ab03a 	or	r5,r6,r5
 1834c8c:	19800283 	ldbu	r6,10(r3)
 1834c90:	300c943a 	slli	r6,r6,16
 1834c94:	314ab03a 	or	r5,r6,r5
 1834c98:	18c002c3 	ldbu	r3,11(r3)
 1834c9c:	1806963a 	slli	r3,r3,24
 1834ca0:	1946b03a 	or	r3,r3,r5
 1834ca4:	1806d23a 	srli	r3,r3,8
 1834ca8:	18ffc00c 	andi	r3,r3,65280
 1834cac:	20c8b03a 	or	r4,r4,r3
 1834cb0:	d0e81717 	ldw	r3,-24484(gp)
 1834cb4:	19400203 	ldbu	r5,8(r3)
 1834cb8:	19800243 	ldbu	r6,9(r3)
 1834cbc:	300c923a 	slli	r6,r6,8
 1834cc0:	314ab03a 	or	r5,r6,r5
 1834cc4:	19800283 	ldbu	r6,10(r3)
 1834cc8:	300c943a 	slli	r6,r6,16
 1834ccc:	314ab03a 	or	r5,r6,r5
 1834cd0:	18c002c3 	ldbu	r3,11(r3)
 1834cd4:	1806963a 	slli	r3,r3,24
 1834cd8:	1946b03a 	or	r3,r3,r5
 1834cdc:	18ffc00c 	andi	r3,r3,65280
 1834ce0:	1806923a 	slli	r3,r3,8
 1834ce4:	20c8b03a 	or	r4,r4,r3
 1834ce8:	d0e81717 	ldw	r3,-24484(gp)
 1834cec:	19400203 	ldbu	r5,8(r3)
 1834cf0:	19800243 	ldbu	r6,9(r3)
 1834cf4:	300c923a 	slli	r6,r6,8
 1834cf8:	314ab03a 	or	r5,r6,r5
 1834cfc:	19800283 	ldbu	r6,10(r3)
 1834d00:	300c943a 	slli	r6,r6,16
 1834d04:	314ab03a 	or	r5,r6,r5
 1834d08:	18c002c3 	ldbu	r3,11(r3)
 1834d0c:	1806963a 	slli	r3,r3,24
 1834d10:	1946b03a 	or	r3,r3,r5
 1834d14:	1806963a 	slli	r3,r3,24
 1834d18:	20c6b03a 	or	r3,r4,r3
 1834d1c:	19803fcc 	andi	r6,r3,255
 1834d20:	11000203 	ldbu	r4,8(r2)
 1834d24:	2008703a 	and	r4,r4,zero
 1834d28:	200b883a 	mov	r5,r4
 1834d2c:	3009883a 	mov	r4,r6
 1834d30:	2908b03a 	or	r4,r5,r4
 1834d34:	11000205 	stb	r4,8(r2)
 1834d38:	1808d23a 	srli	r4,r3,8
 1834d3c:	21803fcc 	andi	r6,r4,255
 1834d40:	11000243 	ldbu	r4,9(r2)
 1834d44:	2008703a 	and	r4,r4,zero
 1834d48:	200b883a 	mov	r5,r4
 1834d4c:	3009883a 	mov	r4,r6
 1834d50:	2908b03a 	or	r4,r5,r4
 1834d54:	11000245 	stb	r4,9(r2)
 1834d58:	1808d43a 	srli	r4,r3,16
 1834d5c:	21803fcc 	andi	r6,r4,255
 1834d60:	11000283 	ldbu	r4,10(r2)
 1834d64:	2008703a 	and	r4,r4,zero
 1834d68:	200b883a 	mov	r5,r4
 1834d6c:	3009883a 	mov	r4,r6
 1834d70:	2908b03a 	or	r4,r5,r4
 1834d74:	11000285 	stb	r4,10(r2)
 1834d78:	180ad63a 	srli	r5,r3,24
 1834d7c:	10c002c3 	ldbu	r3,11(r2)
 1834d80:	1806703a 	and	r3,r3,zero
 1834d84:	1809883a 	mov	r4,r3
 1834d88:	2807883a 	mov	r3,r5
 1834d8c:	20c6b03a 	or	r3,r4,r3
 1834d90:	10c002c5 	stb	r3,11(r2)
 1834d94:	10c00203 	ldbu	r3,8(r2)
 1834d98:	11000243 	ldbu	r4,9(r2)
 1834d9c:	2008923a 	slli	r4,r4,8
 1834da0:	20c6b03a 	or	r3,r4,r3
 1834da4:	11000283 	ldbu	r4,10(r2)
 1834da8:	2008943a 	slli	r4,r4,16
 1834dac:	20c6b03a 	or	r3,r4,r3
 1834db0:	108002c3 	ldbu	r2,11(r2)
 1834db4:	1004963a 	slli	r2,r2,24
 1834db8:	10c4b03a 	or	r2,r2,r3
 1834dbc:	d0a81a15 	stw	r2,-24472(gp)
  tcphdr->wnd = ntohs(tcphdr->wnd);
 1834dc0:	d0a81717 	ldw	r2,-24484(gp)
 1834dc4:	d0e81717 	ldw	r3,-24484(gp)
 1834dc8:	19000383 	ldbu	r4,14(r3)
 1834dcc:	18c003c3 	ldbu	r3,15(r3)
 1834dd0:	1806923a 	slli	r3,r3,8
 1834dd4:	1906b03a 	or	r3,r3,r4
 1834dd8:	18ffffcc 	andi	r3,r3,65535
 1834ddc:	1806d23a 	srli	r3,r3,8
 1834de0:	180b883a 	mov	r5,r3
 1834de4:	d0e81717 	ldw	r3,-24484(gp)
 1834de8:	19000383 	ldbu	r4,14(r3)
 1834dec:	18c003c3 	ldbu	r3,15(r3)
 1834df0:	1806923a 	slli	r3,r3,8
 1834df4:	1906b03a 	or	r3,r3,r4
 1834df8:	18ffffcc 	andi	r3,r3,65535
 1834dfc:	1806923a 	slli	r3,r3,8
 1834e00:	28c6b03a 	or	r3,r5,r3
 1834e04:	180d883a 	mov	r6,r3
 1834e08:	30ffffcc 	andi	r3,r6,65535
 1834e0c:	19403fcc 	andi	r5,r3,255
 1834e10:	10c00383 	ldbu	r3,14(r2)
 1834e14:	1806703a 	and	r3,r3,zero
 1834e18:	1809883a 	mov	r4,r3
 1834e1c:	2807883a 	mov	r3,r5
 1834e20:	20c6b03a 	or	r3,r4,r3
 1834e24:	10c00385 	stb	r3,14(r2)
 1834e28:	30ffffcc 	andi	r3,r6,65535
 1834e2c:	1806d23a 	srli	r3,r3,8
 1834e30:	197fffcc 	andi	r5,r3,65535
 1834e34:	10c003c3 	ldbu	r3,15(r2)
 1834e38:	1806703a 	and	r3,r3,zero
 1834e3c:	1809883a 	mov	r4,r3
 1834e40:	2807883a 	mov	r3,r5
 1834e44:	20c6b03a 	or	r3,r4,r3
 1834e48:	10c003c5 	stb	r3,15(r2)

  flags = TCPH_FLAGS(tcphdr);
 1834e4c:	d0a81717 	ldw	r2,-24484(gp)
 1834e50:	10c00303 	ldbu	r3,12(r2)
 1834e54:	10800343 	ldbu	r2,13(r2)
 1834e58:	1004923a 	slli	r2,r2,8
 1834e5c:	10c4b03a 	or	r2,r2,r3
 1834e60:	10bfffcc 	andi	r2,r2,65535
 1834e64:	1004d23a 	srli	r2,r2,8
 1834e68:	1009883a 	mov	r4,r2
 1834e6c:	d0a81717 	ldw	r2,-24484(gp)
 1834e70:	10c00303 	ldbu	r3,12(r2)
 1834e74:	10800343 	ldbu	r2,13(r2)
 1834e78:	1004923a 	slli	r2,r2,8
 1834e7c:	10c4b03a 	or	r2,r2,r3
 1834e80:	10bfffcc 	andi	r2,r2,65535
 1834e84:	1004923a 	slli	r2,r2,8
 1834e88:	2084b03a 	or	r2,r4,r2
 1834e8c:	10800fcc 	andi	r2,r2,63
 1834e90:	d0a81b05 	stb	r2,-24468(gp)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 1834e94:	e0bffe17 	ldw	r2,-8(fp)
 1834e98:	10c0020b 	ldhu	r3,8(r2)
 1834e9c:	d0a81b03 	ldbu	r2,-24468(gp)
 1834ea0:	10803fcc 	andi	r2,r2,255
 1834ea4:	108000cc 	andi	r2,r2,3
 1834ea8:	1004c03a 	cmpne	r2,r2,zero
 1834eac:	10803fcc 	andi	r2,r2,255
 1834eb0:	1885883a 	add	r2,r3,r2
 1834eb4:	d0a81b8d 	sth	r2,-24466(gp)

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 1834eb8:	e03ff915 	stw	zero,-28(fp)

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 1834ebc:	d0a7f717 	ldw	r2,-24612(gp)
 1834ec0:	e0bff815 	stw	r2,-32(fp)
 1834ec4:	00002d06 	br	1834f7c <tcp_input+0x7d4>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 1834ec8:	e0bff817 	ldw	r2,-32(fp)
 1834ecc:	1100080b 	ldhu	r4,32(r2)
 1834ed0:	d0a81717 	ldw	r2,-24484(gp)
 1834ed4:	10c00003 	ldbu	r3,0(r2)
 1834ed8:	10800043 	ldbu	r2,1(r2)
 1834edc:	1004923a 	slli	r2,r2,8
 1834ee0:	10c4b03a 	or	r2,r2,r3
 1834ee4:	20ffffcc 	andi	r3,r4,65535
 1834ee8:	10bfffcc 	andi	r2,r2,65535
 1834eec:	18801e1e 	bne	r3,r2,1834f68 <tcp_input+0x7c0>
       pcb->local_port == tcphdr->dest &&
 1834ef0:	e0bff817 	ldw	r2,-32(fp)
 1834ef4:	1100078b 	ldhu	r4,30(r2)
 1834ef8:	d0a81717 	ldw	r2,-24484(gp)
 1834efc:	10c00083 	ldbu	r3,2(r2)
 1834f00:	108000c3 	ldbu	r2,3(r2)
 1834f04:	1004923a 	slli	r2,r2,8
 1834f08:	10c4b03a 	or	r2,r2,r3
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 1834f0c:	20ffffcc 	andi	r3,r4,65535
 1834f10:	10bfffcc 	andi	r2,r2,65535
 1834f14:	1880141e 	bne	r3,r2,1834f68 <tcp_input+0x7c0>
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 1834f18:	e0bff817 	ldw	r2,-32(fp)
 1834f1c:	10c00117 	ldw	r3,4(r2)
 1834f20:	d0a81017 	ldw	r2,-24512(gp)
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
 1834f24:	1880101e 	bne	r3,r2,1834f68 <tcp_input+0x7c0>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 1834f28:	e0bff817 	ldw	r2,-32(fp)
 1834f2c:	10c00017 	ldw	r3,0(r2)
 1834f30:	d0a81217 	ldw	r2,-24504(gp)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 1834f34:	18800c1e 	bne	r3,r2,1834f68 <tcp_input+0x7c0>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 1834f38:	e0bff917 	ldw	r2,-28(fp)
 1834f3c:	10001226 	beq	r2,zero,1834f88 <tcp_input+0x7e0>
        prev->next = pcb->next;
 1834f40:	e0bff817 	ldw	r2,-32(fp)
 1834f44:	10c00317 	ldw	r3,12(r2)
 1834f48:	e0bff917 	ldw	r2,-28(fp)
 1834f4c:	10c00315 	stw	r3,12(r2)
        pcb->next = tcp_active_pcbs;
 1834f50:	d0e7f717 	ldw	r3,-24612(gp)
 1834f54:	e0bff817 	ldw	r2,-32(fp)
 1834f58:	10c00315 	stw	r3,12(r2)
        tcp_active_pcbs = pcb;
 1834f5c:	e0bff817 	ldw	r2,-32(fp)
 1834f60:	d0a7f715 	stw	r2,-24612(gp)
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 1834f64:	00000806 	br	1834f88 <tcp_input+0x7e0>
    }
    prev = pcb;
 1834f68:	e0bff817 	ldw	r2,-32(fp)
 1834f6c:	e0bff915 	stw	r2,-28(fp)
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 1834f70:	e0bff817 	ldw	r2,-32(fp)
 1834f74:	10800317 	ldw	r2,12(r2)
 1834f78:	e0bff815 	stw	r2,-32(fp)
 1834f7c:	e0bff817 	ldw	r2,-32(fp)
 1834f80:	103fd11e 	bne	r2,zero,1834ec8 <__alt_mem_mem_0+0xff814ec8>
 1834f84:	00000106 	br	1834f8c <tcp_input+0x7e4>
        prev->next = pcb->next;
        pcb->next = tcp_active_pcbs;
        tcp_active_pcbs = pcb;
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 1834f88:	0001883a 	nop
    }
    prev = pcb;
  }

  if (pcb == NULL) {
 1834f8c:	e0bff817 	ldw	r2,-32(fp)
 1834f90:	1000651e 	bne	r2,zero,1835128 <tcp_input+0x980>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 1834f94:	d0a7fc17 	ldw	r2,-24592(gp)
 1834f98:	e0bff815 	stw	r2,-32(fp)
 1834f9c:	00002406 	br	1835030 <tcp_input+0x888>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 1834fa0:	e0bff817 	ldw	r2,-32(fp)
 1834fa4:	1100080b 	ldhu	r4,32(r2)
 1834fa8:	d0a81717 	ldw	r2,-24484(gp)
 1834fac:	10c00003 	ldbu	r3,0(r2)
 1834fb0:	10800043 	ldbu	r2,1(r2)
 1834fb4:	1004923a 	slli	r2,r2,8
 1834fb8:	10c4b03a 	or	r2,r2,r3
 1834fbc:	20ffffcc 	andi	r3,r4,65535
 1834fc0:	10bfffcc 	andi	r2,r2,65535
 1834fc4:	1880171e 	bne	r3,r2,1835024 <tcp_input+0x87c>
         pcb->local_port == tcphdr->dest &&
 1834fc8:	e0bff817 	ldw	r2,-32(fp)
 1834fcc:	1100078b 	ldhu	r4,30(r2)
 1834fd0:	d0a81717 	ldw	r2,-24484(gp)
 1834fd4:	10c00083 	ldbu	r3,2(r2)
 1834fd8:	108000c3 	ldbu	r2,3(r2)
 1834fdc:	1004923a 	slli	r2,r2,8
 1834fe0:	10c4b03a 	or	r2,r2,r3
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 1834fe4:	20ffffcc 	andi	r3,r4,65535
 1834fe8:	10bfffcc 	andi	r2,r2,65535
 1834fec:	18800d1e 	bne	r3,r2,1835024 <tcp_input+0x87c>
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 1834ff0:	e0bff817 	ldw	r2,-32(fp)
 1834ff4:	10c00117 	ldw	r3,4(r2)
 1834ff8:	d0a81017 	ldw	r2,-24512(gp)
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
 1834ffc:	1880091e 	bne	r3,r2,1835024 <tcp_input+0x87c>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 1835000:	e0bff817 	ldw	r2,-32(fp)
 1835004:	10c00017 	ldw	r3,0(r2)
 1835008:	d0a81217 	ldw	r2,-24504(gp)
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 183500c:	1880051e 	bne	r3,r2,1835024 <tcp_input+0x87c>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 1835010:	e13ff817 	ldw	r4,-32(fp)
 1835014:	183590c0 	call	183590c <tcp_timewait_input>
        pbuf_free(p);
 1835018:	e13ffe17 	ldw	r4,-8(fp)
 183501c:	181a9040 	call	181a904 <pbuf_free>
        return;
 1835020:	00017b06 	br	1835610 <tcp_input+0xe68>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 1835024:	e0bff817 	ldw	r2,-32(fp)
 1835028:	10800317 	ldw	r2,12(r2)
 183502c:	e0bff815 	stw	r2,-32(fp)
 1835030:	e0bff817 	ldw	r2,-32(fp)
 1835034:	103fda1e 	bne	r2,zero,1834fa0 <__alt_mem_mem_0+0xff814fa0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 1835038:	e03ff915 	stw	zero,-28(fp)
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 183503c:	d0a7f917 	ldw	r2,-24604(gp)
 1835040:	e0bffa15 	stw	r2,-24(fp)
 1835044:	00001c06 	br	18350b8 <tcp_input+0x910>
      if (lpcb->local_port == tcphdr->dest) {
 1835048:	e0bffa17 	ldw	r2,-24(fp)
 183504c:	1100078b 	ldhu	r4,30(r2)
 1835050:	d0a81717 	ldw	r2,-24484(gp)
 1835054:	10c00083 	ldbu	r3,2(r2)
 1835058:	108000c3 	ldbu	r2,3(r2)
 183505c:	1004923a 	slli	r2,r2,8
 1835060:	10c4b03a 	or	r2,r2,r3
 1835064:	20ffffcc 	andi	r3,r4,65535
 1835068:	10bfffcc 	andi	r2,r2,65535
 183506c:	18800d1e 	bne	r3,r2,18350a4 <tcp_input+0x8fc>
#if SO_REUSE
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest)) {
 1835070:	e0bffa17 	ldw	r2,-24(fp)
 1835074:	10c00017 	ldw	r3,0(r2)
 1835078:	d0a81217 	ldw	r2,-24504(gp)
 183507c:	18801126 	beq	r3,r2,18350c4 <tcp_input+0x91c>
          /* found an exact match */
          break;
        } else if(ip_addr_isany(&(lpcb->local_ip))) {
 1835080:	e0bffa17 	ldw	r2,-24(fp)
 1835084:	10000326 	beq	r2,zero,1835094 <tcp_input+0x8ec>
 1835088:	e0bffa17 	ldw	r2,-24(fp)
 183508c:	10800017 	ldw	r2,0(r2)
 1835090:	1000041e 	bne	r2,zero,18350a4 <tcp_input+0x8fc>
          /* found an ANY-match */
          lpcb_any = lpcb;
 1835094:	e0bffa17 	ldw	r2,-24(fp)
 1835098:	e0bffc15 	stw	r2,-16(fp)
          lpcb_prev = prev;
 183509c:	e0bff917 	ldw	r2,-28(fp)
 18350a0:	e0bffb15 	stw	r2,-20(fp)
          /* found a match */
          break;
        }
#endif /* SO_REUSE */
      }
      prev = (struct tcp_pcb *)lpcb;
 18350a4:	e0bffa17 	ldw	r2,-24(fp)
 18350a8:	e0bff915 	stw	r2,-28(fp)
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 18350ac:	e0bffa17 	ldw	r2,-24(fp)
 18350b0:	10800317 	ldw	r2,12(r2)
 18350b4:	e0bffa15 	stw	r2,-24(fp)
 18350b8:	e0bffa17 	ldw	r2,-24(fp)
 18350bc:	103fe21e 	bne	r2,zero,1835048 <__alt_mem_mem_0+0xff815048>
 18350c0:	00000106 	br	18350c8 <tcp_input+0x920>
      if (lpcb->local_port == tcphdr->dest) {
#if SO_REUSE
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest)) {
          /* found an exact match */
          break;
 18350c4:	0001883a 	nop
      }
      prev = (struct tcp_pcb *)lpcb;
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
 18350c8:	e0bffa17 	ldw	r2,-24(fp)
 18350cc:	1000041e 	bne	r2,zero,18350e0 <tcp_input+0x938>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
 18350d0:	e0bffc17 	ldw	r2,-16(fp)
 18350d4:	e0bffa15 	stw	r2,-24(fp)
      prev = lpcb_prev;
 18350d8:	e0bffb17 	ldw	r2,-20(fp)
 18350dc:	e0bff915 	stw	r2,-28(fp)
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 18350e0:	e0bffa17 	ldw	r2,-24(fp)
 18350e4:	10001026 	beq	r2,zero,1835128 <tcp_input+0x980>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 18350e8:	e0bff917 	ldw	r2,-28(fp)
 18350ec:	10000926 	beq	r2,zero,1835114 <tcp_input+0x96c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 18350f0:	e0bffa17 	ldw	r2,-24(fp)
 18350f4:	10c00317 	ldw	r3,12(r2)
 18350f8:	e0bff917 	ldw	r2,-28(fp)
 18350fc:	10c00315 	stw	r3,12(r2)
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 1835100:	d0e7f917 	ldw	r3,-24604(gp)
 1835104:	e0bffa17 	ldw	r2,-24(fp)
 1835108:	10c00315 	stw	r3,12(r2)
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 183510c:	e0bffa17 	ldw	r2,-24(fp)
 1835110:	d0a7f915 	stw	r2,-24604(gp)
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 1835114:	e13ffa17 	ldw	r4,-24(fp)
 1835118:	18356240 	call	1835624 <tcp_listen_input>
      pbuf_free(p);
 183511c:	e13ffe17 	ldw	r4,-8(fp)
 1835120:	181a9040 	call	181a904 <pbuf_free>
      return;
 1835124:	00013a06 	br	1835610 <tcp_input+0xe68>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 1835128:	e0bff817 	ldw	r2,-32(fp)
 183512c:	1000f226 	beq	r2,zero,18354f8 <tcp_input+0xd50>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 1835130:	008061b4 	movhi	r2,390
 1835134:	10874004 	addi	r2,r2,7424
 1835138:	10000015 	stw	zero,0(r2)
    inseg.len = p->tot_len;
 183513c:	e0bffe17 	ldw	r2,-8(fp)
 1835140:	10c0020b 	ldhu	r3,8(r2)
 1835144:	008061b4 	movhi	r2,390
 1835148:	10874004 	addi	r2,r2,7424
 183514c:	10c0020d 	sth	r3,8(r2)
    inseg.p = p;
 1835150:	008061b4 	movhi	r2,390
 1835154:	10874004 	addi	r2,r2,7424
 1835158:	e0fffe17 	ldw	r3,-8(fp)
 183515c:	10c00115 	stw	r3,4(r2)
    inseg.tcphdr = tcphdr;
 1835160:	d0e81717 	ldw	r3,-24484(gp)
 1835164:	008061b4 	movhi	r2,390
 1835168:	10874004 	addi	r2,r2,7424
 183516c:	10c00415 	stw	r3,16(r2)

    recv_data = NULL;
 1835170:	d0281d15 	stw	zero,-24460(gp)
    recv_flags = 0;
 1835174:	d0281c05 	stb	zero,-24464(gp)

    if (flags & TCP_PSH) {
 1835178:	d0a81b03 	ldbu	r2,-24468(gp)
 183517c:	10803fcc 	andi	r2,r2,255
 1835180:	1080020c 	andi	r2,r2,8
 1835184:	10000626 	beq	r2,zero,18351a0 <tcp_input+0x9f8>
      p->flags |= PBUF_FLAG_PUSH;
 1835188:	e0bffe17 	ldw	r2,-8(fp)
 183518c:	10800343 	ldbu	r2,13(r2)
 1835190:	10800054 	ori	r2,r2,1
 1835194:	1007883a 	mov	r3,r2
 1835198:	e0bffe17 	ldw	r2,-8(fp)
 183519c:	10c00345 	stb	r3,13(r2)
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 18351a0:	e0bff817 	ldw	r2,-32(fp)
 18351a4:	10801f17 	ldw	r2,124(r2)
 18351a8:	10001526 	beq	r2,zero,1835200 <tcp_input+0xa58>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 18351ac:	e13ff817 	ldw	r4,-32(fp)
 18351b0:	181d0080 	call	181d008 <tcp_process_refused_data>
 18351b4:	10803fcc 	andi	r2,r2,255
 18351b8:	1080201c 	xori	r2,r2,128
 18351bc:	10bfe004 	addi	r2,r2,-128
 18351c0:	10bffda0 	cmpeqi	r2,r2,-10
 18351c4:	1000061e 	bne	r2,zero,18351e0 <tcp_input+0xa38>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 18351c8:	e0bff817 	ldw	r2,-32(fp)
 18351cc:	10801f17 	ldw	r2,124(r2)
      p->flags |= PBUF_FLAG_PUSH;
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 18351d0:	10000b26 	beq	r2,zero,1835200 <tcp_input+0xa58>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 18351d4:	d0a81b8b 	ldhu	r2,-24466(gp)
 18351d8:	10bfffcc 	andi	r2,r2,65535
 18351dc:	10000826 	beq	r2,zero,1835200 <tcp_input+0xa58>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        TCP_STATS_INC(tcp.drop);
 18351e0:	008061f4 	movhi	r2,391
 18351e4:	10a77104 	addi	r2,r2,-25148
 18351e8:	10804b17 	ldw	r2,300(r2)
 18351ec:	10c00044 	addi	r3,r2,1
 18351f0:	008061f4 	movhi	r2,391
 18351f4:	10a77104 	addi	r2,r2,-25148
 18351f8:	10c04b15 	stw	r3,300(r2)
        snmp_inc_tcpinerrs();
        goto aborted;
 18351fc:	0000af06 	br	18354bc <tcp_input+0xd14>
      }
    }
    tcp_input_pcb = pcb;
 1835200:	e0bff817 	ldw	r2,-32(fp)
 1835204:	d0a81e15 	stw	r2,-24456(gp)
    err = tcp_process(pcb);
 1835208:	e13ff817 	ldw	r4,-32(fp)
 183520c:	1835a480 	call	1835a48 <tcp_process>
 1835210:	e0bffd05 	stb	r2,-12(fp)
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 1835214:	e0bffd07 	ldb	r2,-12(fp)
 1835218:	10bffda0 	cmpeqi	r2,r2,-10
 183521c:	1000a71e 	bne	r2,zero,18354bc <tcp_input+0xd14>
      if (recv_flags & TF_RESET) {
 1835220:	d0a81c03 	ldbu	r2,-24464(gp)
 1835224:	10803fcc 	andi	r2,r2,255
 1835228:	1080020c 	andi	r2,r2,8
 183522c:	10001126 	beq	r2,zero,1835274 <tcp_input+0xacc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 1835230:	e0bff817 	ldw	r2,-32(fp)
 1835234:	10802417 	ldw	r2,144(r2)
 1835238:	10000726 	beq	r2,zero,1835258 <tcp_input+0xab0>
 183523c:	e0bff817 	ldw	r2,-32(fp)
 1835240:	10802417 	ldw	r2,144(r2)
 1835244:	e0fff817 	ldw	r3,-32(fp)
 1835248:	18c00417 	ldw	r3,16(r3)
 183524c:	017ffd44 	movi	r5,-11
 1835250:	1809883a 	mov	r4,r3
 1835254:	103ee83a 	callr	r2
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 1835258:	e17ff817 	ldw	r5,-32(fp)
 183525c:	d127f704 	addi	r4,gp,-24612
 1835260:	181d9780 	call	181d978 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 1835264:	e17ff817 	ldw	r5,-32(fp)
 1835268:	01000084 	movi	r4,2
 183526c:	18341e40 	call	18341e4 <memp_free>
 1835270:	00009206 	br	18354bc <tcp_input+0xd14>
      } else if (recv_flags & TF_CLOSED) {
 1835274:	d0a81c03 	ldbu	r2,-24464(gp)
 1835278:	10803fcc 	andi	r2,r2,255
 183527c:	1080040c 	andi	r2,r2,16
 1835280:	10001626 	beq	r2,zero,18352dc <tcp_input+0xb34>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
 1835284:	e0bff817 	ldw	r2,-32(fp)
 1835288:	10800883 	ldbu	r2,34(r2)
 183528c:	10803fcc 	andi	r2,r2,255
 1835290:	1080040c 	andi	r2,r2,16
 1835294:	10000a1e 	bne	r2,zero,18352c0 <tcp_input+0xb18>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 1835298:	e0bff817 	ldw	r2,-32(fp)
 183529c:	10802417 	ldw	r2,144(r2)
 18352a0:	10000726 	beq	r2,zero,18352c0 <tcp_input+0xb18>
 18352a4:	e0bff817 	ldw	r2,-32(fp)
 18352a8:	10802417 	ldw	r2,144(r2)
 18352ac:	e0fff817 	ldw	r3,-32(fp)
 18352b0:	18c00417 	ldw	r3,16(r3)
 18352b4:	017ffd04 	movi	r5,-12
 18352b8:	1809883a 	mov	r4,r3
 18352bc:	103ee83a 	callr	r2
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 18352c0:	e17ff817 	ldw	r5,-32(fp)
 18352c4:	d127f704 	addi	r4,gp,-24612
 18352c8:	181d9780 	call	181d978 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 18352cc:	e17ff817 	ldw	r5,-32(fp)
 18352d0:	01000084 	movi	r4,2
 18352d4:	18341e40 	call	18341e4 <memp_free>
 18352d8:	00007806 	br	18354bc <tcp_input+0xd14>
      } else {
        err = ERR_OK;
 18352dc:	e03ffd05 	stb	zero,-12(fp)
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
 18352e0:	e0bff817 	ldw	r2,-32(fp)
 18352e4:	10801a0b 	ldhu	r2,104(r2)
 18352e8:	10bfffcc 	andi	r2,r2,65535
 18352ec:	10001326 	beq	r2,zero,183533c <tcp_input+0xb94>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
 18352f0:	e0bff817 	ldw	r2,-32(fp)
 18352f4:	10802017 	ldw	r2,128(r2)
 18352f8:	10000c26 	beq	r2,zero,183532c <tcp_input+0xb84>
 18352fc:	e0bff817 	ldw	r2,-32(fp)
 1835300:	10802017 	ldw	r2,128(r2)
 1835304:	e0fff817 	ldw	r3,-32(fp)
 1835308:	19000417 	ldw	r4,16(r3)
 183530c:	e0fff817 	ldw	r3,-32(fp)
 1835310:	18c01a0b 	ldhu	r3,104(r3)
 1835314:	18ffffcc 	andi	r3,r3,65535
 1835318:	180d883a 	mov	r6,r3
 183531c:	e17ff817 	ldw	r5,-32(fp)
 1835320:	103ee83a 	callr	r2
 1835324:	e0bffd05 	stb	r2,-12(fp)
 1835328:	00000106 	br	1835330 <tcp_input+0xb88>
 183532c:	e03ffd05 	stb	zero,-12(fp)
          if (err == ERR_ABRT) {
 1835330:	e0bffd07 	ldb	r2,-12(fp)
 1835334:	10bffd98 	cmpnei	r2,r2,-10
 1835338:	10005b26 	beq	r2,zero,18354a8 <tcp_input+0xd00>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
 183533c:	d0a81d17 	ldw	r2,-24460(gp)
 1835340:	10002926 	beq	r2,zero,18353e8 <tcp_input+0xc40>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 1835344:	e0bff817 	ldw	r2,-32(fp)
 1835348:	10800883 	ldbu	r2,34(r2)
 183534c:	10803fcc 	andi	r2,r2,255
 1835350:	1080040c 	andi	r2,r2,16
 1835354:	10000626 	beq	r2,zero,1835370 <tcp_input+0xbc8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 1835358:	d0a81d17 	ldw	r2,-24460(gp)
 183535c:	1009883a 	mov	r4,r2
 1835360:	181a9040 	call	181a904 <pbuf_free>
            tcp_abort(pcb);
 1835364:	e13ff817 	ldw	r4,-32(fp)
 1835368:	181bd300 	call	181bd30 <tcp_abort>
            goto aborted;
 183536c:	00005306 	br	18354bc <tcp_input+0xd14>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 1835370:	e0bff817 	ldw	r2,-32(fp)
 1835374:	10802117 	ldw	r2,132(r2)
 1835378:	10000c26 	beq	r2,zero,18353ac <tcp_input+0xc04>
 183537c:	e0bff817 	ldw	r2,-32(fp)
 1835380:	10802117 	ldw	r2,132(r2)
 1835384:	e0fff817 	ldw	r3,-32(fp)
 1835388:	18c00417 	ldw	r3,16(r3)
 183538c:	d1281d17 	ldw	r4,-24460(gp)
 1835390:	000f883a 	mov	r7,zero
 1835394:	200d883a 	mov	r6,r4
 1835398:	e17ff817 	ldw	r5,-32(fp)
 183539c:	1809883a 	mov	r4,r3
 18353a0:	103ee83a 	callr	r2
 18353a4:	e0bffd05 	stb	r2,-12(fp)
 18353a8:	00000706 	br	18353c8 <tcp_input+0xc20>
 18353ac:	d0a81d17 	ldw	r2,-24460(gp)
 18353b0:	000f883a 	mov	r7,zero
 18353b4:	100d883a 	mov	r6,r2
 18353b8:	e17ff817 	ldw	r5,-32(fp)
 18353bc:	0009883a 	mov	r4,zero
 18353c0:	181d2a80 	call	181d2a8 <tcp_recv_null>
 18353c4:	e0bffd05 	stb	r2,-12(fp)
          if (err == ERR_ABRT) {
 18353c8:	e0bffd07 	ldb	r2,-12(fp)
 18353cc:	10bffd98 	cmpnei	r2,r2,-10
 18353d0:	10003726 	beq	r2,zero,18354b0 <tcp_input+0xd08>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 18353d4:	e0bffd07 	ldb	r2,-12(fp)
 18353d8:	10000326 	beq	r2,zero,18353e8 <tcp_input+0xc40>
            pcb->refused_data = recv_data;
 18353dc:	d0e81d17 	ldw	r3,-24460(gp)
 18353e0:	e0bff817 	ldw	r2,-32(fp)
 18353e4:	10c01f15 	stw	r3,124(r2)
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 18353e8:	d0a81c03 	ldbu	r2,-24464(gp)
 18353ec:	10803fcc 	andi	r2,r2,255
 18353f0:	1080080c 	andi	r2,r2,32
 18353f4:	10002826 	beq	r2,zero,1835498 <tcp_input+0xcf0>
          if (pcb->refused_data != NULL) {
 18353f8:	e0bff817 	ldw	r2,-32(fp)
 18353fc:	10801f17 	ldw	r2,124(r2)
 1835400:	10000826 	beq	r2,zero,1835424 <tcp_input+0xc7c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 1835404:	e0bff817 	ldw	r2,-32(fp)
 1835408:	10801f17 	ldw	r2,124(r2)
 183540c:	e0fff817 	ldw	r3,-32(fp)
 1835410:	18c01f17 	ldw	r3,124(r3)
 1835414:	18c00343 	ldbu	r3,13(r3)
 1835418:	18c00814 	ori	r3,r3,32
 183541c:	10c00345 	stb	r3,13(r2)
 1835420:	00001d06 	br	1835498 <tcp_input+0xcf0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
 1835424:	e0bff817 	ldw	r2,-32(fp)
 1835428:	10800c0b 	ldhu	r2,48(r2)
 183542c:	10bfffcc 	andi	r2,r2,65535
 1835430:	10880020 	cmpeqi	r2,r2,8192
 1835434:	1000061e 	bne	r2,zero,1835450 <tcp_input+0xca8>
              pcb->rcv_wnd++;
 1835438:	e0bff817 	ldw	r2,-32(fp)
 183543c:	10800c0b 	ldhu	r2,48(r2)
 1835440:	10800044 	addi	r2,r2,1
 1835444:	1007883a 	mov	r3,r2
 1835448:	e0bff817 	ldw	r2,-32(fp)
 183544c:	10c00c0d 	sth	r3,48(r2)
            }
            TCP_EVENT_CLOSED(pcb, err);
 1835450:	e0bff817 	ldw	r2,-32(fp)
 1835454:	10802117 	ldw	r2,132(r2)
 1835458:	10000b26 	beq	r2,zero,1835488 <tcp_input+0xce0>
 183545c:	e0bff817 	ldw	r2,-32(fp)
 1835460:	10802117 	ldw	r2,132(r2)
 1835464:	e0fff817 	ldw	r3,-32(fp)
 1835468:	18c00417 	ldw	r3,16(r3)
 183546c:	000f883a 	mov	r7,zero
 1835470:	000d883a 	mov	r6,zero
 1835474:	e17ff817 	ldw	r5,-32(fp)
 1835478:	1809883a 	mov	r4,r3
 183547c:	103ee83a 	callr	r2
 1835480:	e0bffd05 	stb	r2,-12(fp)
 1835484:	00000106 	br	183548c <tcp_input+0xce4>
 1835488:	e03ffd05 	stb	zero,-12(fp)
            if (err == ERR_ABRT) {
 183548c:	e0bffd07 	ldb	r2,-12(fp)
 1835490:	10bffd98 	cmpnei	r2,r2,-10
 1835494:	10000826 	beq	r2,zero,18354b8 <tcp_input+0xd10>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 1835498:	d0281e15 	stw	zero,-24456(gp)
        /* Try to send something out. */
        tcp_output(pcb);
 183549c:	e13ff817 	ldw	r4,-32(fp)
 18354a0:	181f4fc0 	call	181f4fc <tcp_output>
 18354a4:	00000506 	br	18354bc <tcp_input+0xd14>
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
          TCP_EVENT_SENT(pcb, pcb->acked, err);
          if (err == ERR_ABRT) {
            goto aborted;
 18354a8:	0001883a 	nop
 18354ac:	00000306 	br	18354bc <tcp_input+0xd14>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
          if (err == ERR_ABRT) {
            goto aborted;
 18354b0:	0001883a 	nop
 18354b4:	00000106 	br	18354bc <tcp_input+0xd14>
            if (pcb->rcv_wnd != TCP_WND) {
              pcb->rcv_wnd++;
            }
            TCP_EVENT_CLOSED(pcb, err);
            if (err == ERR_ABRT) {
              goto aborted;
 18354b8:	0001883a 	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 18354bc:	d0281e15 	stw	zero,-24456(gp)
    recv_data = NULL;
 18354c0:	d0281d15 	stw	zero,-24460(gp)

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 18354c4:	008061b4 	movhi	r2,390
 18354c8:	10874004 	addi	r2,r2,7424
 18354cc:	10800117 	ldw	r2,4(r2)
 18354d0:	10004e26 	beq	r2,zero,183560c <tcp_input+0xe64>
    {
      pbuf_free(inseg.p);
 18354d4:	008061b4 	movhi	r2,390
 18354d8:	10874004 	addi	r2,r2,7424
 18354dc:	10800117 	ldw	r2,4(r2)
 18354e0:	1009883a 	mov	r4,r2
 18354e4:	181a9040 	call	181a904 <pbuf_free>
      inseg.p = NULL;
 18354e8:	008061b4 	movhi	r2,390
 18354ec:	10874004 	addi	r2,r2,7424
 18354f0:	10000115 	stw	zero,4(r2)
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 18354f4:	00004506 	br	183560c <tcp_input+0xe64>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 18354f8:	d0a81717 	ldw	r2,-24484(gp)
 18354fc:	10c00303 	ldbu	r3,12(r2)
 1835500:	10800343 	ldbu	r2,13(r2)
 1835504:	1004923a 	slli	r2,r2,8
 1835508:	10c4b03a 	or	r2,r2,r3
 183550c:	10bfffcc 	andi	r2,r2,65535
 1835510:	1004d23a 	srli	r2,r2,8
 1835514:	10ffffcc 	andi	r3,r2,65535
 1835518:	d0a81717 	ldw	r2,-24484(gp)
 183551c:	11000303 	ldbu	r4,12(r2)
 1835520:	10800343 	ldbu	r2,13(r2)
 1835524:	1004923a 	slli	r2,r2,8
 1835528:	1104b03a 	or	r2,r2,r4
 183552c:	10bfffcc 	andi	r2,r2,65535
 1835530:	1004923a 	slli	r2,r2,8
 1835534:	10bfffcc 	andi	r2,r2,65535
 1835538:	1884b03a 	or	r2,r3,r2
 183553c:	1080010c 	andi	r2,r2,4
 1835540:	1000251e 	bne	r2,zero,18355d8 <tcp_input+0xe30>
      TCP_STATS_INC(tcp.proterr);
 1835544:	008061f4 	movhi	r2,391
 1835548:	10a77104 	addi	r2,r2,-25148
 183554c:	10805017 	ldw	r2,320(r2)
 1835550:	10c00044 	addi	r3,r2,1
 1835554:	008061f4 	movhi	r2,391
 1835558:	10a77104 	addi	r2,r2,-25148
 183555c:	10c05015 	stw	r3,320(r2)
      TCP_STATS_INC(tcp.drop);
 1835560:	008061f4 	movhi	r2,391
 1835564:	10a77104 	addi	r2,r2,-25148
 1835568:	10804b17 	ldw	r2,300(r2)
 183556c:	10c00044 	addi	r3,r2,1
 1835570:	008061f4 	movhi	r2,391
 1835574:	10a77104 	addi	r2,r2,-25148
 1835578:	10c04b15 	stw	r3,300(r2)
      tcp_rst(ackno, seqno + tcplen,
 183557c:	d2281a17 	ldw	r8,-24472(gp)
 1835580:	d0a81b8b 	ldhu	r2,-24466(gp)
 1835584:	10ffffcc 	andi	r3,r2,65535
 1835588:	d0a81917 	ldw	r2,-24476(gp)
 183558c:	188b883a 	add	r5,r3,r2
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
 1835590:	d0a81717 	ldw	r2,-24484(gp)
 1835594:	10c00083 	ldbu	r3,2(r2)
 1835598:	108000c3 	ldbu	r2,3(r2)
 183559c:	1004923a 	slli	r2,r2,8
 18355a0:	10c4b03a 	or	r2,r2,r3
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
 18355a4:	10ffffcc 	andi	r3,r2,65535
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
 18355a8:	d0a81717 	ldw	r2,-24484(gp)
 18355ac:	11000003 	ldbu	r4,0(r2)
 18355b0:	10800043 	ldbu	r2,1(r2)
 18355b4:	1004923a 	slli	r2,r2,8
 18355b8:	1104b03a 	or	r2,r2,r4
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
 18355bc:	10bfffcc 	andi	r2,r2,65535
 18355c0:	d8800115 	stw	r2,4(sp)
 18355c4:	d8c00015 	stw	r3,0(sp)
 18355c8:	d1e81004 	addi	r7,gp,-24512
 18355cc:	d1a81204 	addi	r6,gp,-24504
 18355d0:	4009883a 	mov	r4,r8
 18355d4:	18205a80 	call	18205a8 <tcp_rst>
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
 18355d8:	e13ffe17 	ldw	r4,-8(fp)
 18355dc:	181a9040 	call	181a904 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 18355e0:	00000a06 	br	183560c <tcp_input+0xe64>
dropped:
  TCP_STATS_INC(tcp.drop);
 18355e4:	008061f4 	movhi	r2,391
 18355e8:	10a77104 	addi	r2,r2,-25148
 18355ec:	10804b17 	ldw	r2,300(r2)
 18355f0:	10c00044 	addi	r3,r2,1
 18355f4:	008061f4 	movhi	r2,391
 18355f8:	10a77104 	addi	r2,r2,-25148
 18355fc:	10c04b15 	stw	r3,300(r2)
  snmp_inc_tcpinerrs();
  pbuf_free(p);
 1835600:	e13ffe17 	ldw	r4,-8(fp)
 1835604:	181a9040 	call	181a904 <pbuf_free>
 1835608:	00000106 	br	1835610 <tcp_input+0xe68>
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 183560c:	0001883a 	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
}
 1835610:	e037883a 	mov	sp,fp
 1835614:	dfc00117 	ldw	ra,4(sp)
 1835618:	df000017 	ldw	fp,0(sp)
 183561c:	dec00204 	addi	sp,sp,8
 1835620:	f800283a 	ret

01835624 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 1835624:	defff904 	addi	sp,sp,-28
 1835628:	dfc00615 	stw	ra,24(sp)
 183562c:	df000515 	stw	fp,20(sp)
 1835630:	df000504 	addi	fp,sp,20
 1835634:	e13fff15 	stw	r4,-4(fp)
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
 1835638:	d0a81b03 	ldbu	r2,-24468(gp)
 183563c:	10803fcc 	andi	r2,r2,255
 1835640:	1080010c 	andi	r2,r2,4
 1835644:	10000226 	beq	r2,zero,1835650 <tcp_listen_input+0x2c>
    /* An incoming RST should be ignored. Return. */
    return ERR_OK;
 1835648:	0005883a 	mov	r2,zero
 183564c:	0000aa06 	br	18358f8 <tcp_listen_input+0x2d4>
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 1835650:	d0a81b03 	ldbu	r2,-24468(gp)
 1835654:	10803fcc 	andi	r2,r2,255
 1835658:	1080040c 	andi	r2,r2,16
 183565c:	10001826 	beq	r2,zero,18356c0 <tcp_listen_input+0x9c>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 1835660:	d2281a17 	ldw	r8,-24472(gp)
 1835664:	d0a81b8b 	ldhu	r2,-24466(gp)
 1835668:	10ffffcc 	andi	r3,r2,65535
 183566c:	d0a81917 	ldw	r2,-24476(gp)
 1835670:	188b883a 	add	r5,r3,r2
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 1835674:	d0a81717 	ldw	r2,-24484(gp)
 1835678:	10c00083 	ldbu	r3,2(r2)
 183567c:	108000c3 	ldbu	r2,3(r2)
 1835680:	1004923a 	slli	r2,r2,8
 1835684:	10c4b03a 	or	r2,r2,r3
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 1835688:	10ffffcc 	andi	r3,r2,65535
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 183568c:	d0a81717 	ldw	r2,-24484(gp)
 1835690:	11000003 	ldbu	r4,0(r2)
 1835694:	10800043 	ldbu	r2,1(r2)
 1835698:	1004923a 	slli	r2,r2,8
 183569c:	1104b03a 	or	r2,r2,r4
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 18356a0:	10bfffcc 	andi	r2,r2,65535
 18356a4:	d8800115 	stw	r2,4(sp)
 18356a8:	d8c00015 	stw	r3,0(sp)
 18356ac:	d1e81004 	addi	r7,gp,-24512
 18356b0:	d1a81204 	addi	r6,gp,-24504
 18356b4:	4009883a 	mov	r4,r8
 18356b8:	18205a80 	call	18205a8 <tcp_rst>
 18356bc:	00008d06 	br	18358f4 <tcp_listen_input+0x2d0>
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
 18356c0:	d0a81b03 	ldbu	r2,-24468(gp)
 18356c4:	10803fcc 	andi	r2,r2,255
 18356c8:	1080008c 	andi	r2,r2,2
 18356cc:	10008926 	beq	r2,zero,18358f4 <tcp_listen_input+0x2d0>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
#if TCP_LISTEN_BACKLOG
    if (pcb->accepts_pending >= pcb->backlog) {
 18356d0:	e0bfff17 	ldw	r2,-4(fp)
 18356d4:	10c00843 	ldbu	r3,33(r2)
 18356d8:	e0bfff17 	ldw	r2,-4(fp)
 18356dc:	10800803 	ldbu	r2,32(r2)
 18356e0:	18c03fcc 	andi	r3,r3,255
 18356e4:	10803fcc 	andi	r2,r2,255
 18356e8:	18800236 	bltu	r3,r2,18356f4 <tcp_listen_input+0xd0>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
 18356ec:	00bffd84 	movi	r2,-10
 18356f0:	00008106 	br	18358f8 <tcp_listen_input+0x2d4>
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
 18356f4:	e0bfff17 	ldw	r2,-4(fp)
 18356f8:	10800703 	ldbu	r2,28(r2)
 18356fc:	10803fcc 	andi	r2,r2,255
 1835700:	1009883a 	mov	r4,r2
 1835704:	181d4900 	call	181d490 <tcp_alloc>
 1835708:	e0bffd15 	stw	r2,-12(fp)
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
 183570c:	e0bffd17 	ldw	r2,-12(fp)
 1835710:	1000091e 	bne	r2,zero,1835738 <tcp_listen_input+0x114>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
 1835714:	008061f4 	movhi	r2,391
 1835718:	10a77104 	addi	r2,r2,-25148
 183571c:	10804e17 	ldw	r2,312(r2)
 1835720:	10c00044 	addi	r3,r2,1
 1835724:	008061f4 	movhi	r2,391
 1835728:	10a77104 	addi	r2,r2,-25148
 183572c:	10c04e15 	stw	r3,312(r2)
      return ERR_MEM;
 1835730:	00bfffc4 	movi	r2,-1
 1835734:	00007006 	br	18358f8 <tcp_listen_input+0x2d4>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
 1835738:	e0bfff17 	ldw	r2,-4(fp)
 183573c:	10800843 	ldbu	r2,33(r2)
 1835740:	10800044 	addi	r2,r2,1
 1835744:	1007883a 	mov	r3,r2
 1835748:	e0bfff17 	ldw	r2,-4(fp)
 183574c:	10c00845 	stb	r3,33(r2)
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
 1835750:	d0e81217 	ldw	r3,-24504(gp)
 1835754:	e0bffd17 	ldw	r2,-12(fp)
 1835758:	10c00015 	stw	r3,0(r2)
    npcb->local_port = pcb->local_port;
 183575c:	e0bfff17 	ldw	r2,-4(fp)
 1835760:	10c0078b 	ldhu	r3,30(r2)
 1835764:	e0bffd17 	ldw	r2,-12(fp)
 1835768:	10c0078d 	sth	r3,30(r2)
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
 183576c:	d0e81017 	ldw	r3,-24512(gp)
 1835770:	e0bffd17 	ldw	r2,-12(fp)
 1835774:	10c00115 	stw	r3,4(r2)
    npcb->remote_port = tcphdr->src;
 1835778:	d0a81717 	ldw	r2,-24484(gp)
 183577c:	10c00003 	ldbu	r3,0(r2)
 1835780:	10800043 	ldbu	r2,1(r2)
 1835784:	1004923a 	slli	r2,r2,8
 1835788:	10c4b03a 	or	r2,r2,r3
 183578c:	1007883a 	mov	r3,r2
 1835790:	e0bffd17 	ldw	r2,-12(fp)
 1835794:	10c0080d 	sth	r3,32(r2)
    npcb->state = SYN_RCVD;
 1835798:	e0bffd17 	ldw	r2,-12(fp)
 183579c:	00c000c4 	movi	r3,3
 18357a0:	10c00615 	stw	r3,24(r2)
    npcb->rcv_nxt = seqno + 1;
 18357a4:	d0a81917 	ldw	r2,-24476(gp)
 18357a8:	10c00044 	addi	r3,r2,1
 18357ac:	e0bffd17 	ldw	r2,-12(fp)
 18357b0:	10c00b15 	stw	r3,44(r2)
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 18357b4:	e0bffd17 	ldw	r2,-12(fp)
 18357b8:	10c00b17 	ldw	r3,44(r2)
 18357bc:	e0bffd17 	ldw	r2,-12(fp)
 18357c0:	10c00d15 	stw	r3,52(r2)
    npcb->snd_wnd = tcphdr->wnd;
 18357c4:	d0a81717 	ldw	r2,-24484(gp)
 18357c8:	10c00383 	ldbu	r3,14(r2)
 18357cc:	108003c3 	ldbu	r2,15(r2)
 18357d0:	1004923a 	slli	r2,r2,8
 18357d4:	10c4b03a 	or	r2,r2,r3
 18357d8:	1007883a 	mov	r3,r2
 18357dc:	e0bffd17 	ldw	r2,-12(fp)
 18357e0:	10c0190d 	sth	r3,100(r2)
    npcb->snd_wnd_max = tcphdr->wnd;
 18357e4:	d0a81717 	ldw	r2,-24484(gp)
 18357e8:	10c00383 	ldbu	r3,14(r2)
 18357ec:	108003c3 	ldbu	r2,15(r2)
 18357f0:	1004923a 	slli	r2,r2,8
 18357f4:	10c4b03a 	or	r2,r2,r3
 18357f8:	1007883a 	mov	r3,r2
 18357fc:	e0bffd17 	ldw	r2,-12(fp)
 1835800:	10c0198d 	sth	r3,102(r2)
    npcb->ssthresh = npcb->snd_wnd;
 1835804:	e0bffd17 	ldw	r2,-12(fp)
 1835808:	10c0190b 	ldhu	r3,100(r2)
 183580c:	e0bffd17 	ldw	r2,-12(fp)
 1835810:	10c0148d 	sth	r3,82(r2)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 1835814:	d0a81917 	ldw	r2,-24476(gp)
 1835818:	10ffffc4 	addi	r3,r2,-1
 183581c:	e0bffd17 	ldw	r2,-12(fp)
 1835820:	10c01615 	stw	r3,88(r2)
    npcb->callback_arg = pcb->callback_arg;
 1835824:	e0bfff17 	ldw	r2,-4(fp)
 1835828:	10c00417 	ldw	r3,16(r2)
 183582c:	e0bffd17 	ldw	r2,-12(fp)
 1835830:	10c00415 	stw	r3,16(r2)
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
 1835834:	e0bfff17 	ldw	r2,-4(fp)
 1835838:	10c00517 	ldw	r3,20(r2)
 183583c:	e0bffd17 	ldw	r2,-12(fp)
 1835840:	10c00515 	stw	r3,20(r2)
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 1835844:	e0bfff17 	ldw	r2,-4(fp)
 1835848:	10c00203 	ldbu	r3,8(r2)
 183584c:	00bfe304 	movi	r2,-116
 1835850:	1884703a 	and	r2,r3,r2
 1835854:	1007883a 	mov	r3,r2
 1835858:	e0bffd17 	ldw	r2,-12(fp)
 183585c:	10c00205 	stb	r3,8(r2)
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 1835860:	d0e7f717 	ldw	r3,-24612(gp)
 1835864:	e0bffd17 	ldw	r2,-12(fp)
 1835868:	10c00315 	stw	r3,12(r2)
 183586c:	e0bffd17 	ldw	r2,-12(fp)
 1835870:	d0a7f715 	stw	r2,-24612(gp)
 1835874:	18212d00 	call	18212d0 <tcp_timer_needed>
 1835878:	00800044 	movi	r2,1
 183587c:	d0a7f685 	stb	r2,-24614(gp)

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 1835880:	e13ffd17 	ldw	r4,-12(fp)
 1835884:	18387900 	call	1838790 <tcp_parseopt>
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->local_ip), &(npcb->remote_ip));
 1835888:	e0bffd17 	ldw	r2,-12(fp)
 183588c:	10800e8b 	ldhu	r2,58(r2)
 1835890:	10ffffcc 	andi	r3,r2,65535
 1835894:	e13ffd17 	ldw	r4,-12(fp)
 1835898:	e0bffd17 	ldw	r2,-12(fp)
 183589c:	10800104 	addi	r2,r2,4
 18358a0:	100d883a 	mov	r6,r2
 18358a4:	200b883a 	mov	r5,r4
 18358a8:	1809883a 	mov	r4,r3
 18358ac:	181dab40 	call	181dab4 <tcp_eff_send_mss>
 18358b0:	1007883a 	mov	r3,r2
 18358b4:	e0bffd17 	ldw	r2,-12(fp)
 18358b8:	10c00e8d 	sth	r3,58(r2)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 18358bc:	01400484 	movi	r5,18
 18358c0:	e13ffd17 	ldw	r4,-12(fp)
 18358c4:	181f0780 	call	181f078 <tcp_enqueue_flags>
 18358c8:	e0bffe05 	stb	r2,-8(fp)
    if (rc != ERR_OK) {
 18358cc:	e0bffe07 	ldb	r2,-8(fp)
 18358d0:	10000526 	beq	r2,zero,18358e8 <tcp_listen_input+0x2c4>
      tcp_abandon(npcb, 0);
 18358d4:	000b883a 	mov	r5,zero
 18358d8:	e13ffd17 	ldw	r4,-12(fp)
 18358dc:	181bbd00 	call	181bbd0 <tcp_abandon>
      return rc;
 18358e0:	e0bffe03 	ldbu	r2,-8(fp)
 18358e4:	00000406 	br	18358f8 <tcp_listen_input+0x2d4>
    }
    return tcp_output(npcb);
 18358e8:	e13ffd17 	ldw	r4,-12(fp)
 18358ec:	181f4fc0 	call	181f4fc <tcp_output>
 18358f0:	00000106 	br	18358f8 <tcp_listen_input+0x2d4>
  }
  return ERR_OK;
 18358f4:	0005883a 	mov	r2,zero
}
 18358f8:	e037883a 	mov	sp,fp
 18358fc:	dfc00117 	ldw	ra,4(sp)
 1835900:	df000017 	ldw	fp,0(sp)
 1835904:	dec00204 	addi	sp,sp,8
 1835908:	f800283a 	ret

0183590c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_timewait_input(struct tcp_pcb *pcb)
{
 183590c:	defffb04 	addi	sp,sp,-20
 1835910:	dfc00415 	stw	ra,16(sp)
 1835914:	df000315 	stw	fp,12(sp)
 1835918:	df000304 	addi	fp,sp,12
 183591c:	e13fff15 	stw	r4,-4(fp)
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
 1835920:	d0a81b03 	ldbu	r2,-24468(gp)
 1835924:	10803fcc 	andi	r2,r2,255
 1835928:	1080010c 	andi	r2,r2,4
 183592c:	10000226 	beq	r2,zero,1835938 <tcp_timewait_input+0x2c>
    return ERR_OK;
 1835930:	0005883a 	mov	r2,zero
 1835934:	00003f06 	br	1835a34 <tcp_timewait_input+0x128>
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 1835938:	d0a81b03 	ldbu	r2,-24468(gp)
 183593c:	10803fcc 	andi	r2,r2,255
 1835940:	1080008c 	andi	r2,r2,2
 1835944:	10002726 	beq	r2,zero,18359e4 <tcp_timewait_input+0xd8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
 1835948:	d0e81917 	ldw	r3,-24476(gp)
 183594c:	e0bfff17 	ldw	r2,-4(fp)
 1835950:	10800b17 	ldw	r2,44(r2)
 1835954:	1885c83a 	sub	r2,r3,r2
 1835958:	10002916 	blt	r2,zero,1835a00 <tcp_timewait_input+0xf4>
 183595c:	d0e81917 	ldw	r3,-24476(gp)
 1835960:	e0bfff17 	ldw	r2,-4(fp)
 1835964:	11000b17 	ldw	r4,44(r2)
 1835968:	e0bfff17 	ldw	r2,-4(fp)
 183596c:	10800c0b 	ldhu	r2,48(r2)
 1835970:	10bfffcc 	andi	r2,r2,65535
 1835974:	2085883a 	add	r2,r4,r2
 1835978:	1885c83a 	sub	r2,r3,r2
 183597c:	00802016 	blt	zero,r2,1835a00 <tcp_timewait_input+0xf4>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835980:	d2281a17 	ldw	r8,-24472(gp)
 1835984:	d0a81b8b 	ldhu	r2,-24466(gp)
 1835988:	10ffffcc 	andi	r3,r2,65535
 183598c:	d0a81917 	ldw	r2,-24476(gp)
 1835990:	188b883a 	add	r5,r3,r2
        tcphdr->dest, tcphdr->src);
 1835994:	d0a81717 	ldw	r2,-24484(gp)
 1835998:	10c00083 	ldbu	r3,2(r2)
 183599c:	108000c3 	ldbu	r2,3(r2)
 18359a0:	1004923a 	slli	r2,r2,8
 18359a4:	10c4b03a 	or	r2,r2,r3
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 18359a8:	10ffffcc 	andi	r3,r2,65535
        tcphdr->dest, tcphdr->src);
 18359ac:	d0a81717 	ldw	r2,-24484(gp)
 18359b0:	11000003 	ldbu	r4,0(r2)
 18359b4:	10800043 	ldbu	r2,1(r2)
 18359b8:	1004923a 	slli	r2,r2,8
 18359bc:	1104b03a 	or	r2,r2,r4
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 18359c0:	10bfffcc 	andi	r2,r2,65535
 18359c4:	d8800115 	stw	r2,4(sp)
 18359c8:	d8c00015 	stw	r3,0(sp)
 18359cc:	d1e81004 	addi	r7,gp,-24512
 18359d0:	d1a81204 	addi	r6,gp,-24504
 18359d4:	4009883a 	mov	r4,r8
 18359d8:	18205a80 	call	18205a8 <tcp_rst>
        tcphdr->dest, tcphdr->src);
      return ERR_OK;
 18359dc:	0005883a 	mov	r2,zero
 18359e0:	00001406 	br	1835a34 <tcp_timewait_input+0x128>
    }
  } else if (flags & TCP_FIN) {
 18359e4:	d0a81b03 	ldbu	r2,-24468(gp)
 18359e8:	10803fcc 	andi	r2,r2,255
 18359ec:	1080004c 	andi	r2,r2,1
 18359f0:	10000326 	beq	r2,zero,1835a00 <tcp_timewait_input+0xf4>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 18359f4:	d0e7f817 	ldw	r3,-24608(gp)
 18359f8:	e0bfff17 	ldw	r2,-4(fp)
 18359fc:	10c00a15 	stw	r3,40(r2)
  }

  if ((tcplen > 0))  {
 1835a00:	d0a81b8b 	ldhu	r2,-24466(gp)
 1835a04:	10bfffcc 	andi	r2,r2,65535
 1835a08:	10000926 	beq	r2,zero,1835a30 <tcp_timewait_input+0x124>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 1835a0c:	e0bfff17 	ldw	r2,-4(fp)
 1835a10:	10800883 	ldbu	r2,34(r2)
 1835a14:	10800094 	ori	r2,r2,2
 1835a18:	1007883a 	mov	r3,r2
 1835a1c:	e0bfff17 	ldw	r2,-4(fp)
 1835a20:	10c00885 	stb	r3,34(r2)
    return tcp_output(pcb);
 1835a24:	e13fff17 	ldw	r4,-4(fp)
 1835a28:	181f4fc0 	call	181f4fc <tcp_output>
 1835a2c:	00000106 	br	1835a34 <tcp_timewait_input+0x128>
  }
  return ERR_OK;
 1835a30:	0005883a 	mov	r2,zero
}
 1835a34:	e037883a 	mov	sp,fp
 1835a38:	dfc00117 	ldw	ra,4(sp)
 1835a3c:	df000017 	ldw	fp,0(sp)
 1835a40:	dec00204 	addi	sp,sp,8
 1835a44:	f800283a 	ret

01835a48 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 1835a48:	defff804 	addi	sp,sp,-32
 1835a4c:	dfc00715 	stw	ra,28(sp)
 1835a50:	df000615 	stw	fp,24(sp)
 1835a54:	df000604 	addi	fp,sp,24
 1835a58:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 1835a5c:	e03ffc05 	stb	zero,-16(fp)
  err_t err;

  err = ERR_OK;
 1835a60:	e03ffc45 	stb	zero,-15(fp)

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 1835a64:	d0a81b03 	ldbu	r2,-24468(gp)
 1835a68:	10803fcc 	andi	r2,r2,255
 1835a6c:	1080010c 	andi	r2,r2,4
 1835a70:	10002b26 	beq	r2,zero,1835b20 <tcp_process+0xd8>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 1835a74:	e0bfff17 	ldw	r2,-4(fp)
 1835a78:	10800617 	ldw	r2,24(r2)
 1835a7c:	10800098 	cmpnei	r2,r2,2
 1835a80:	1000071e 	bne	r2,zero,1835aa0 <tcp_process+0x58>
      if (ackno == pcb->snd_nxt) {
 1835a84:	e0bfff17 	ldw	r2,-4(fp)
 1835a88:	10c01517 	ldw	r3,84(r2)
 1835a8c:	d0a81a17 	ldw	r2,-24472(gp)
 1835a90:	1880131e 	bne	r3,r2,1835ae0 <tcp_process+0x98>
        acceptable = 1;
 1835a94:	00800044 	movi	r2,1
 1835a98:	e0bffc05 	stb	r2,-16(fp)
 1835a9c:	00001006 	br	1835ae0 <tcp_process+0x98>
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 1835aa0:	d0e81917 	ldw	r3,-24476(gp)
 1835aa4:	e0bfff17 	ldw	r2,-4(fp)
 1835aa8:	10800b17 	ldw	r2,44(r2)
 1835aac:	1885c83a 	sub	r2,r3,r2
 1835ab0:	10000b16 	blt	r2,zero,1835ae0 <tcp_process+0x98>
 1835ab4:	d0e81917 	ldw	r3,-24476(gp)
 1835ab8:	e0bfff17 	ldw	r2,-4(fp)
 1835abc:	11000b17 	ldw	r4,44(r2)
 1835ac0:	e0bfff17 	ldw	r2,-4(fp)
 1835ac4:	10800c0b 	ldhu	r2,48(r2)
 1835ac8:	10bfffcc 	andi	r2,r2,65535
 1835acc:	2085883a 	add	r2,r4,r2
 1835ad0:	1885c83a 	sub	r2,r3,r2
 1835ad4:	00800216 	blt	zero,r2,1835ae0 <tcp_process+0x98>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
 1835ad8:	00800044 	movi	r2,1
 1835adc:	e0bffc05 	stb	r2,-16(fp)
      }
    }

    if (acceptable) {
 1835ae0:	e0bffc03 	ldbu	r2,-16(fp)
 1835ae4:	10000c26 	beq	r2,zero,1835b18 <tcp_process+0xd0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 1835ae8:	d0a81c03 	ldbu	r2,-24464(gp)
 1835aec:	10800214 	ori	r2,r2,8
 1835af0:	d0a81c05 	stb	r2,-24464(gp)
      pcb->flags &= ~TF_ACK_DELAY;
 1835af4:	e0bfff17 	ldw	r2,-4(fp)
 1835af8:	10c00883 	ldbu	r3,34(r2)
 1835afc:	00bfff84 	movi	r2,-2
 1835b00:	1884703a 	and	r2,r3,r2
 1835b04:	1007883a 	mov	r3,r2
 1835b08:	e0bfff17 	ldw	r2,-4(fp)
 1835b0c:	10c00885 	stb	r3,34(r2)
      return ERR_RST;
 1835b10:	00bffd44 	movi	r2,-11
 1835b14:	00027406 	br	18364e8 <tcp_process+0xaa0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 1835b18:	0005883a 	mov	r2,zero
 1835b1c:	00027206 	br	18364e8 <tcp_process+0xaa0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
 1835b20:	d0a81b03 	ldbu	r2,-24468(gp)
 1835b24:	10803fcc 	andi	r2,r2,255
 1835b28:	1080008c 	andi	r2,r2,2
 1835b2c:	10001026 	beq	r2,zero,1835b70 <tcp_process+0x128>
 1835b30:	e0bfff17 	ldw	r2,-4(fp)
 1835b34:	10800617 	ldw	r2,24(r2)
 1835b38:	108000a0 	cmpeqi	r2,r2,2
 1835b3c:	10000c1e 	bne	r2,zero,1835b70 <tcp_process+0x128>
 1835b40:	e0bfff17 	ldw	r2,-4(fp)
 1835b44:	10800617 	ldw	r2,24(r2)
 1835b48:	108000e0 	cmpeqi	r2,r2,3
 1835b4c:	1000081e 	bne	r2,zero,1835b70 <tcp_process+0x128>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 1835b50:	e0bfff17 	ldw	r2,-4(fp)
 1835b54:	10800883 	ldbu	r2,34(r2)
 1835b58:	10800094 	ori	r2,r2,2
 1835b5c:	1007883a 	mov	r3,r2
 1835b60:	e0bfff17 	ldw	r2,-4(fp)
 1835b64:	10c00885 	stb	r3,34(r2)
    return ERR_OK;
 1835b68:	0005883a 	mov	r2,zero
 1835b6c:	00025e06 	br	18364e8 <tcp_process+0xaa0>
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 1835b70:	e0bfff17 	ldw	r2,-4(fp)
 1835b74:	10800883 	ldbu	r2,34(r2)
 1835b78:	10803fcc 	andi	r2,r2,255
 1835b7c:	1080040c 	andi	r2,r2,16
 1835b80:	1000031e 	bne	r2,zero,1835b90 <tcp_process+0x148>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 1835b84:	d0e7f817 	ldw	r3,-24608(gp)
 1835b88:	e0bfff17 	ldw	r2,-4(fp)
 1835b8c:	10c00a15 	stw	r3,40(r2)
  }
  pcb->keep_cnt_sent = 0;
 1835b90:	e0bfff17 	ldw	r2,-4(fp)
 1835b94:	10002885 	stb	zero,162(r2)

  tcp_parseopt(pcb);
 1835b98:	e13fff17 	ldw	r4,-4(fp)
 1835b9c:	18387900 	call	1838790 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 1835ba0:	e0bfff17 	ldw	r2,-4(fp)
 1835ba4:	10800617 	ldw	r2,24(r2)
 1835ba8:	10c002a8 	cmpgeui	r3,r2,10
 1835bac:	18023e1e 	bne	r3,zero,18364a8 <tcp_process+0xa60>
 1835bb0:	100690ba 	slli	r3,r2,2
 1835bb4:	008060f4 	movhi	r2,387
 1835bb8:	1096f204 	addi	r2,r2,23496
 1835bbc:	1885883a 	add	r2,r3,r2
 1835bc0:	10800017 	ldw	r2,0(r2)
 1835bc4:	1000683a 	jmp	r2
 1835bc8:	018364a8 	cmpgeui	r6,zero,3474
 1835bcc:	018364a8 	cmpgeui	r6,zero,3474
 1835bd0:	01835bf0 	cmpltui	r6,zero,3439
 1835bd4:	01835f70 	cmpltui	r6,zero,3453
 1835bd8:	01836150 	cmplti	r6,zero,3461
 1835bdc:	01836190 	cmplti	r6,zero,3462
 1835be0:	018362d8 	cmpnei	r6,zero,3467
 1835be4:	01836150 	cmplti	r6,zero,3461
 1835be8:	018363a8 	cmpgeui	r6,zero,3470
 1835bec:	01836470 	cmpltui	r6,zero,3473
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 1835bf0:	d0a81b03 	ldbu	r2,-24468(gp)
 1835bf4:	10803fcc 	andi	r2,r2,255
 1835bf8:	1080040c 	andi	r2,r2,16
 1835bfc:	1000c026 	beq	r2,zero,1835f00 <tcp_process+0x4b8>
 1835c00:	d0a81b03 	ldbu	r2,-24468(gp)
 1835c04:	10803fcc 	andi	r2,r2,255
 1835c08:	1080008c 	andi	r2,r2,2
 1835c0c:	1000bc26 	beq	r2,zero,1835f00 <tcp_process+0x4b8>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 1835c10:	e0bfff17 	ldw	r2,-4(fp)
 1835c14:	10801d17 	ldw	r2,116(r2)
 1835c18:	10800417 	ldw	r2,16(r2)
 1835c1c:	10c00103 	ldbu	r3,4(r2)
 1835c20:	11000143 	ldbu	r4,5(r2)
 1835c24:	2008923a 	slli	r4,r4,8
 1835c28:	20c6b03a 	or	r3,r4,r3
 1835c2c:	11000183 	ldbu	r4,6(r2)
 1835c30:	2008943a 	slli	r4,r4,16
 1835c34:	20c6b03a 	or	r3,r4,r3
 1835c38:	108001c3 	ldbu	r2,7(r2)
 1835c3c:	1004963a 	slli	r2,r2,24
 1835c40:	10c4b03a 	or	r2,r2,r3
 1835c44:	1006d63a 	srli	r3,r2,24
 1835c48:	e0bfff17 	ldw	r2,-4(fp)
 1835c4c:	10801d17 	ldw	r2,116(r2)
 1835c50:	10800417 	ldw	r2,16(r2)
 1835c54:	11000103 	ldbu	r4,4(r2)
 1835c58:	11400143 	ldbu	r5,5(r2)
 1835c5c:	280a923a 	slli	r5,r5,8
 1835c60:	2908b03a 	or	r4,r5,r4
 1835c64:	11400183 	ldbu	r5,6(r2)
 1835c68:	280a943a 	slli	r5,r5,16
 1835c6c:	2908b03a 	or	r4,r5,r4
 1835c70:	108001c3 	ldbu	r2,7(r2)
 1835c74:	1004963a 	slli	r2,r2,24
 1835c78:	1104b03a 	or	r2,r2,r4
 1835c7c:	1004d23a 	srli	r2,r2,8
 1835c80:	10bfc00c 	andi	r2,r2,65280
 1835c84:	1886b03a 	or	r3,r3,r2
 1835c88:	e0bfff17 	ldw	r2,-4(fp)
 1835c8c:	10801d17 	ldw	r2,116(r2)
 1835c90:	10800417 	ldw	r2,16(r2)
 1835c94:	11000103 	ldbu	r4,4(r2)
 1835c98:	11400143 	ldbu	r5,5(r2)
 1835c9c:	280a923a 	slli	r5,r5,8
 1835ca0:	2908b03a 	or	r4,r5,r4
 1835ca4:	11400183 	ldbu	r5,6(r2)
 1835ca8:	280a943a 	slli	r5,r5,16
 1835cac:	2908b03a 	or	r4,r5,r4
 1835cb0:	108001c3 	ldbu	r2,7(r2)
 1835cb4:	1004963a 	slli	r2,r2,24
 1835cb8:	1104b03a 	or	r2,r2,r4
 1835cbc:	10bfc00c 	andi	r2,r2,65280
 1835cc0:	1004923a 	slli	r2,r2,8
 1835cc4:	1886b03a 	or	r3,r3,r2
 1835cc8:	e0bfff17 	ldw	r2,-4(fp)
 1835ccc:	10801d17 	ldw	r2,116(r2)
 1835cd0:	10800417 	ldw	r2,16(r2)
 1835cd4:	11000103 	ldbu	r4,4(r2)
 1835cd8:	11400143 	ldbu	r5,5(r2)
 1835cdc:	280a923a 	slli	r5,r5,8
 1835ce0:	2908b03a 	or	r4,r5,r4
 1835ce4:	11400183 	ldbu	r5,6(r2)
 1835ce8:	280a943a 	slli	r5,r5,16
 1835cec:	2908b03a 	or	r4,r5,r4
 1835cf0:	108001c3 	ldbu	r2,7(r2)
 1835cf4:	1004963a 	slli	r2,r2,24
 1835cf8:	1104b03a 	or	r2,r2,r4
 1835cfc:	1004963a 	slli	r2,r2,24
 1835d00:	1884b03a 	or	r2,r3,r2
 1835d04:	10c00044 	addi	r3,r2,1
 1835d08:	d0a81a17 	ldw	r2,-24472(gp)
 1835d0c:	18807c1e 	bne	r3,r2,1835f00 <tcp_process+0x4b8>
      pcb->snd_buf++;
 1835d10:	e0bfff17 	ldw	r2,-4(fp)
 1835d14:	10801a8b 	ldhu	r2,106(r2)
 1835d18:	10800044 	addi	r2,r2,1
 1835d1c:	1007883a 	mov	r3,r2
 1835d20:	e0bfff17 	ldw	r2,-4(fp)
 1835d24:	10c01a8d 	sth	r3,106(r2)
      pcb->rcv_nxt = seqno + 1;
 1835d28:	d0a81917 	ldw	r2,-24476(gp)
 1835d2c:	10c00044 	addi	r3,r2,1
 1835d30:	e0bfff17 	ldw	r2,-4(fp)
 1835d34:	10c00b15 	stw	r3,44(r2)
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 1835d38:	e0bfff17 	ldw	r2,-4(fp)
 1835d3c:	10c00b17 	ldw	r3,44(r2)
 1835d40:	e0bfff17 	ldw	r2,-4(fp)
 1835d44:	10c00d15 	stw	r3,52(r2)
      pcb->lastack = ackno;
 1835d48:	d0e81a17 	ldw	r3,-24472(gp)
 1835d4c:	e0bfff17 	ldw	r2,-4(fp)
 1835d50:	10c01315 	stw	r3,76(r2)
      pcb->snd_wnd = tcphdr->wnd;
 1835d54:	d0a81717 	ldw	r2,-24484(gp)
 1835d58:	10c00383 	ldbu	r3,14(r2)
 1835d5c:	108003c3 	ldbu	r2,15(r2)
 1835d60:	1004923a 	slli	r2,r2,8
 1835d64:	10c4b03a 	or	r2,r2,r3
 1835d68:	1007883a 	mov	r3,r2
 1835d6c:	e0bfff17 	ldw	r2,-4(fp)
 1835d70:	10c0190d 	sth	r3,100(r2)
      pcb->snd_wnd_max = tcphdr->wnd;
 1835d74:	d0a81717 	ldw	r2,-24484(gp)
 1835d78:	10c00383 	ldbu	r3,14(r2)
 1835d7c:	108003c3 	ldbu	r2,15(r2)
 1835d80:	1004923a 	slli	r2,r2,8
 1835d84:	10c4b03a 	or	r2,r2,r3
 1835d88:	1007883a 	mov	r3,r2
 1835d8c:	e0bfff17 	ldw	r2,-4(fp)
 1835d90:	10c0198d 	sth	r3,102(r2)
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 1835d94:	d0a81917 	ldw	r2,-24476(gp)
 1835d98:	10ffffc4 	addi	r3,r2,-1
 1835d9c:	e0bfff17 	ldw	r2,-4(fp)
 1835da0:	10c01615 	stw	r3,88(r2)
      pcb->state = ESTABLISHED;
 1835da4:	e0bfff17 	ldw	r2,-4(fp)
 1835da8:	00c00104 	movi	r3,4
 1835dac:	10c00615 	stw	r3,24(r2)

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->local_ip), &(pcb->remote_ip));
 1835db0:	e0bfff17 	ldw	r2,-4(fp)
 1835db4:	10800e8b 	ldhu	r2,58(r2)
 1835db8:	10ffffcc 	andi	r3,r2,65535
 1835dbc:	e13fff17 	ldw	r4,-4(fp)
 1835dc0:	e0bfff17 	ldw	r2,-4(fp)
 1835dc4:	10800104 	addi	r2,r2,4
 1835dc8:	100d883a 	mov	r6,r2
 1835dcc:	200b883a 	mov	r5,r4
 1835dd0:	1809883a 	mov	r4,r3
 1835dd4:	181dab40 	call	181dab4 <tcp_eff_send_mss>
 1835dd8:	1007883a 	mov	r3,r2
 1835ddc:	e0bfff17 	ldw	r2,-4(fp)
 1835de0:	10c00e8d 	sth	r3,58(r2)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
 1835de4:	e0bfff17 	ldw	r2,-4(fp)
 1835de8:	10800e8b 	ldhu	r2,58(r2)
 1835dec:	108002a4 	muli	r2,r2,10
 1835df0:	1007883a 	mov	r3,r2
 1835df4:	e0bfff17 	ldw	r2,-4(fp)
 1835df8:	10c0148d 	sth	r3,82(r2)

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 1835dfc:	e0bfff17 	ldw	r2,-4(fp)
 1835e00:	1080140b 	ldhu	r2,80(r2)
 1835e04:	10bfffcc 	andi	r2,r2,65535
 1835e08:	10800058 	cmpnei	r2,r2,1
 1835e0c:	1000041e 	bne	r2,zero,1835e20 <tcp_process+0x3d8>
 1835e10:	e0bfff17 	ldw	r2,-4(fp)
 1835e14:	10800e8b 	ldhu	r2,58(r2)
 1835e18:	1085883a 	add	r2,r2,r2
 1835e1c:	00000206 	br	1835e28 <tcp_process+0x3e0>
 1835e20:	e0bfff17 	ldw	r2,-4(fp)
 1835e24:	10800e8b 	ldhu	r2,58(r2)
 1835e28:	e0ffff17 	ldw	r3,-4(fp)
 1835e2c:	1880140d 	sth	r2,80(r3)
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 1835e30:	e0bfff17 	ldw	r2,-4(fp)
 1835e34:	10801b0b 	ldhu	r2,108(r2)
 1835e38:	10bfffc4 	addi	r2,r2,-1
 1835e3c:	1007883a 	mov	r3,r2
 1835e40:	e0bfff17 	ldw	r2,-4(fp)
 1835e44:	10c01b0d 	sth	r3,108(r2)
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 1835e48:	e0bfff17 	ldw	r2,-4(fp)
 1835e4c:	10801d17 	ldw	r2,116(r2)
 1835e50:	e0bffd15 	stw	r2,-12(fp)
      pcb->unacked = rseg->next;
 1835e54:	e0bffd17 	ldw	r2,-12(fp)
 1835e58:	10c00017 	ldw	r3,0(r2)
 1835e5c:	e0bfff17 	ldw	r2,-4(fp)
 1835e60:	10c01d15 	stw	r3,116(r2)
      tcp_seg_free(rseg);
 1835e64:	e13ffd17 	ldw	r4,-12(fp)
 1835e68:	181d1ac0 	call	181d1ac <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 1835e6c:	e0bfff17 	ldw	r2,-4(fp)
 1835e70:	10801d17 	ldw	r2,116(r2)
 1835e74:	1000041e 	bne	r2,zero,1835e88 <tcp_process+0x440>
        pcb->rtime = -1;
 1835e78:	e0bfff17 	ldw	r2,-4(fp)
 1835e7c:	00ffffc4 	movi	r3,-1
 1835e80:	10c00e0d 	sth	r3,56(r2)
 1835e84:	00000406 	br	1835e98 <tcp_process+0x450>
      else {
        pcb->rtime = 0;
 1835e88:	e0bfff17 	ldw	r2,-4(fp)
 1835e8c:	10000e0d 	sth	zero,56(r2)
        pcb->nrtx = 0;
 1835e90:	e0bfff17 	ldw	r2,-4(fp)
 1835e94:	10001285 	stb	zero,74(r2)
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 1835e98:	e0bfff17 	ldw	r2,-4(fp)
 1835e9c:	10802217 	ldw	r2,136(r2)
 1835ea0:	10000a26 	beq	r2,zero,1835ecc <tcp_process+0x484>
 1835ea4:	e0bfff17 	ldw	r2,-4(fp)
 1835ea8:	10802217 	ldw	r2,136(r2)
 1835eac:	e0ffff17 	ldw	r3,-4(fp)
 1835eb0:	18c00417 	ldw	r3,16(r3)
 1835eb4:	000d883a 	mov	r6,zero
 1835eb8:	e17fff17 	ldw	r5,-4(fp)
 1835ebc:	1809883a 	mov	r4,r3
 1835ec0:	103ee83a 	callr	r2
 1835ec4:	e0bffc45 	stb	r2,-15(fp)
 1835ec8:	00000106 	br	1835ed0 <tcp_process+0x488>
 1835ecc:	e03ffc45 	stb	zero,-15(fp)
      if (err == ERR_ABRT) {
 1835ed0:	e0bffc47 	ldb	r2,-15(fp)
 1835ed4:	10bffd98 	cmpnei	r2,r2,-10
 1835ed8:	1000021e 	bne	r2,zero,1835ee4 <tcp_process+0x49c>
        return ERR_ABRT;
 1835edc:	00bffd84 	movi	r2,-10
 1835ee0:	00018106 	br	18364e8 <tcp_process+0xaa0>
      }
      tcp_ack_now(pcb);
 1835ee4:	e0bfff17 	ldw	r2,-4(fp)
 1835ee8:	10800883 	ldbu	r2,34(r2)
 1835eec:	10800094 	ori	r2,r2,2
 1835ef0:	1007883a 	mov	r3,r2
 1835ef4:	e0bfff17 	ldw	r2,-4(fp)
 1835ef8:	10c00885 	stb	r3,34(r2)
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
 1835efc:	00016c06 	br	18364b0 <tcp_process+0xa68>
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
 1835f00:	d0a81b03 	ldbu	r2,-24468(gp)
 1835f04:	10803fcc 	andi	r2,r2,255
 1835f08:	1080040c 	andi	r2,r2,16
 1835f0c:	10016826 	beq	r2,zero,18364b0 <tcp_process+0xa68>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835f10:	d2281a17 	ldw	r8,-24472(gp)
 1835f14:	d0a81b8b 	ldhu	r2,-24466(gp)
 1835f18:	10ffffcc 	andi	r3,r2,65535
 1835f1c:	d0a81917 	ldw	r2,-24476(gp)
 1835f20:	188b883a 	add	r5,r3,r2
        tcphdr->dest, tcphdr->src);
 1835f24:	d0a81717 	ldw	r2,-24484(gp)
 1835f28:	10c00083 	ldbu	r3,2(r2)
 1835f2c:	108000c3 	ldbu	r2,3(r2)
 1835f30:	1004923a 	slli	r2,r2,8
 1835f34:	10c4b03a 	or	r2,r2,r3
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835f38:	10ffffcc 	andi	r3,r2,65535
        tcphdr->dest, tcphdr->src);
 1835f3c:	d0a81717 	ldw	r2,-24484(gp)
 1835f40:	11000003 	ldbu	r4,0(r2)
 1835f44:	10800043 	ldbu	r2,1(r2)
 1835f48:	1004923a 	slli	r2,r2,8
 1835f4c:	1104b03a 	or	r2,r2,r4
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1835f50:	10bfffcc 	andi	r2,r2,65535
 1835f54:	d8800115 	stw	r2,4(sp)
 1835f58:	d8c00015 	stw	r3,0(sp)
 1835f5c:	d1e81004 	addi	r7,gp,-24512
 1835f60:	d1a81204 	addi	r6,gp,-24504
 1835f64:	4009883a 	mov	r4,r8
 1835f68:	18205a80 	call	18205a8 <tcp_rst>
        tcphdr->dest, tcphdr->src);
    }
    break;
 1835f6c:	00015006 	br	18364b0 <tcp_process+0xa68>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 1835f70:	d0a81b03 	ldbu	r2,-24468(gp)
 1835f74:	10803fcc 	andi	r2,r2,255
 1835f78:	1080040c 	andi	r2,r2,16
 1835f7c:	10006626 	beq	r2,zero,1836118 <tcp_process+0x6d0>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 1835f80:	d0e81a17 	ldw	r3,-24472(gp)
 1835f84:	e0bfff17 	ldw	r2,-4(fp)
 1835f88:	10801317 	ldw	r2,76(r2)
 1835f8c:	1885c83a 	sub	r2,r3,r2
 1835f90:	10bfffc4 	addi	r2,r2,-1
 1835f94:	10004816 	blt	r2,zero,18360b8 <tcp_process+0x670>
 1835f98:	d0e81a17 	ldw	r3,-24472(gp)
 1835f9c:	e0bfff17 	ldw	r2,-4(fp)
 1835fa0:	10801517 	ldw	r2,84(r2)
 1835fa4:	1885c83a 	sub	r2,r3,r2
 1835fa8:	00804316 	blt	zero,r2,18360b8 <tcp_process+0x670>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
 1835fac:	e0bfff17 	ldw	r2,-4(fp)
 1835fb0:	00c00104 	movi	r3,4
 1835fb4:	10c00615 	stw	r3,24(r2)
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 1835fb8:	e0bfff17 	ldw	r2,-4(fp)
 1835fbc:	10800517 	ldw	r2,20(r2)
 1835fc0:	10000a26 	beq	r2,zero,1835fec <tcp_process+0x5a4>
 1835fc4:	e0bfff17 	ldw	r2,-4(fp)
 1835fc8:	10800517 	ldw	r2,20(r2)
 1835fcc:	e0ffff17 	ldw	r3,-4(fp)
 1835fd0:	18c00417 	ldw	r3,16(r3)
 1835fd4:	000d883a 	mov	r6,zero
 1835fd8:	e17fff17 	ldw	r5,-4(fp)
 1835fdc:	1809883a 	mov	r4,r3
 1835fe0:	103ee83a 	callr	r2
 1835fe4:	e0bffc45 	stb	r2,-15(fp)
 1835fe8:	00000206 	br	1835ff4 <tcp_process+0x5ac>
 1835fec:	00bffc84 	movi	r2,-14
 1835ff0:	e0bffc45 	stb	r2,-15(fp)
        if (err != ERR_OK) {
 1835ff4:	e0bffc47 	ldb	r2,-15(fp)
 1835ff8:	10000726 	beq	r2,zero,1836018 <tcp_process+0x5d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 1835ffc:	e0bffc47 	ldb	r2,-15(fp)
 1836000:	10bffda0 	cmpeqi	r2,r2,-10
 1836004:	1000021e 	bne	r2,zero,1836010 <tcp_process+0x5c8>
            tcp_abort(pcb);
 1836008:	e13fff17 	ldw	r4,-4(fp)
 183600c:	181bd300 	call	181bd30 <tcp_abort>
          }
          return ERR_ABRT;
 1836010:	00bffd84 	movi	r2,-10
 1836014:	00013406 	br	18364e8 <tcp_process+0xaa0>
        }
        old_cwnd = pcb->cwnd;
 1836018:	e0bfff17 	ldw	r2,-4(fp)
 183601c:	1080140b 	ldhu	r2,80(r2)
 1836020:	e0bffe0d 	sth	r2,-8(fp)
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 1836024:	e13fff17 	ldw	r4,-4(fp)
 1836028:	183679c0 	call	183679c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
 183602c:	e0bfff17 	ldw	r2,-4(fp)
 1836030:	10801a0b 	ldhu	r2,104(r2)
 1836034:	10bfffcc 	andi	r2,r2,65535
 1836038:	10000626 	beq	r2,zero,1836054 <tcp_process+0x60c>
          pcb->acked--;
 183603c:	e0bfff17 	ldw	r2,-4(fp)
 1836040:	10801a0b 	ldhu	r2,104(r2)
 1836044:	10bfffc4 	addi	r2,r2,-1
 1836048:	1007883a 	mov	r3,r2
 183604c:	e0bfff17 	ldw	r2,-4(fp)
 1836050:	10c01a0d 	sth	r3,104(r2)
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 1836054:	e0bffe0b 	ldhu	r2,-8(fp)
 1836058:	10800058 	cmpnei	r2,r2,1
 183605c:	1000041e 	bne	r2,zero,1836070 <tcp_process+0x628>
 1836060:	e0bfff17 	ldw	r2,-4(fp)
 1836064:	10800e8b 	ldhu	r2,58(r2)
 1836068:	1085883a 	add	r2,r2,r2
 183606c:	00000206 	br	1836078 <tcp_process+0x630>
 1836070:	e0bfff17 	ldw	r2,-4(fp)
 1836074:	10800e8b 	ldhu	r2,58(r2)
 1836078:	e0ffff17 	ldw	r3,-4(fp)
 183607c:	1880140d 	sth	r2,80(r3)

        if (recv_flags & TF_GOT_FIN) {
 1836080:	d0a81c03 	ldbu	r2,-24464(gp)
 1836084:	10803fcc 	andi	r2,r2,255
 1836088:	1080080c 	andi	r2,r2,32
 183608c:	10002e26 	beq	r2,zero,1836148 <tcp_process+0x700>
          tcp_ack_now(pcb);
 1836090:	e0bfff17 	ldw	r2,-4(fp)
 1836094:	10800883 	ldbu	r2,34(r2)
 1836098:	10800094 	ori	r2,r2,2
 183609c:	1007883a 	mov	r3,r2
 18360a0:	e0bfff17 	ldw	r2,-4(fp)
 18360a4:	10c00885 	stb	r3,34(r2)
          pcb->state = CLOSE_WAIT;
 18360a8:	e0bfff17 	ldw	r2,-4(fp)
 18360ac:	00c001c4 	movi	r3,7
 18360b0:	10c00615 	stw	r3,24(r2)
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 18360b4:	00002406 	br	1836148 <tcp_process+0x700>
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 18360b8:	d2281a17 	ldw	r8,-24472(gp)
 18360bc:	d0a81b8b 	ldhu	r2,-24466(gp)
 18360c0:	10ffffcc 	andi	r3,r2,65535
 18360c4:	d0a81917 	ldw	r2,-24476(gp)
 18360c8:	188b883a 	add	r5,r3,r2
                tcphdr->dest, tcphdr->src);
 18360cc:	d0a81717 	ldw	r2,-24484(gp)
 18360d0:	10c00083 	ldbu	r3,2(r2)
 18360d4:	108000c3 	ldbu	r2,3(r2)
 18360d8:	1004923a 	slli	r2,r2,8
 18360dc:	10c4b03a 	or	r2,r2,r3
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 18360e0:	10ffffcc 	andi	r3,r2,65535
                tcphdr->dest, tcphdr->src);
 18360e4:	d0a81717 	ldw	r2,-24484(gp)
 18360e8:	11000003 	ldbu	r4,0(r2)
 18360ec:	10800043 	ldbu	r2,1(r2)
 18360f0:	1004923a 	slli	r2,r2,8
 18360f4:	1104b03a 	or	r2,r2,r4
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 18360f8:	10bfffcc 	andi	r2,r2,65535
 18360fc:	d8800115 	stw	r2,4(sp)
 1836100:	d8c00015 	stw	r3,0(sp)
 1836104:	d1e81004 	addi	r7,gp,-24512
 1836108:	d1a81204 	addi	r6,gp,-24504
 183610c:	4009883a 	mov	r4,r8
 1836110:	18205a80 	call	18205a8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 1836114:	0000e806 	br	18364b8 <tcp_process+0xa70>
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
                tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 1836118:	d0a81b03 	ldbu	r2,-24468(gp)
 183611c:	10803fcc 	andi	r2,r2,255
 1836120:	1080008c 	andi	r2,r2,2
 1836124:	1000e426 	beq	r2,zero,18364b8 <tcp_process+0xa70>
 1836128:	e0bfff17 	ldw	r2,-4(fp)
 183612c:	10800b17 	ldw	r2,44(r2)
 1836130:	10ffffc4 	addi	r3,r2,-1
 1836134:	d0a81917 	ldw	r2,-24476(gp)
 1836138:	1880df1e 	bne	r3,r2,18364b8 <tcp_process+0xa70>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
 183613c:	e13fff17 	ldw	r4,-4(fp)
 1836140:	1820a280 	call	1820a28 <tcp_rexmit>
    }
    break;
 1836144:	0000dc06 	br	18364b8 <tcp_process+0xa70>
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 1836148:	0001883a 	nop
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 183614c:	0000da06 	br	18364b8 <tcp_process+0xa70>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 1836150:	e13fff17 	ldw	r4,-4(fp)
 1836154:	183679c0 	call	183679c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 1836158:	d0a81c03 	ldbu	r2,-24464(gp)
 183615c:	10803fcc 	andi	r2,r2,255
 1836160:	1080080c 	andi	r2,r2,32
 1836164:	1000d626 	beq	r2,zero,18364c0 <tcp_process+0xa78>
      tcp_ack_now(pcb);
 1836168:	e0bfff17 	ldw	r2,-4(fp)
 183616c:	10800883 	ldbu	r2,34(r2)
 1836170:	10800094 	ori	r2,r2,2
 1836174:	1007883a 	mov	r3,r2
 1836178:	e0bfff17 	ldw	r2,-4(fp)
 183617c:	10c00885 	stb	r3,34(r2)
      pcb->state = CLOSE_WAIT;
 1836180:	e0bfff17 	ldw	r2,-4(fp)
 1836184:	00c001c4 	movi	r3,7
 1836188:	10c00615 	stw	r3,24(r2)
    }
    break;
 183618c:	0000cc06 	br	18364c0 <tcp_process+0xa78>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 1836190:	e13fff17 	ldw	r4,-4(fp)
 1836194:	183679c0 	call	183679c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 1836198:	d0a81c03 	ldbu	r2,-24464(gp)
 183619c:	10803fcc 	andi	r2,r2,255
 18361a0:	1080080c 	andi	r2,r2,32
 18361a4:	10004026 	beq	r2,zero,18362a8 <tcp_process+0x860>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 18361a8:	d0a81b03 	ldbu	r2,-24468(gp)
 18361ac:	10803fcc 	andi	r2,r2,255
 18361b0:	1080040c 	andi	r2,r2,16
 18361b4:	10003226 	beq	r2,zero,1836280 <tcp_process+0x838>
 18361b8:	e0bfff17 	ldw	r2,-4(fp)
 18361bc:	10c01517 	ldw	r3,84(r2)
 18361c0:	d0a81a17 	ldw	r2,-24472(gp)
 18361c4:	18802e1e 	bne	r3,r2,1836280 <tcp_process+0x838>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 18361c8:	e0bfff17 	ldw	r2,-4(fp)
 18361cc:	10800883 	ldbu	r2,34(r2)
 18361d0:	10800094 	ori	r2,r2,2
 18361d4:	1007883a 	mov	r3,r2
 18361d8:	e0bfff17 	ldw	r2,-4(fp)
 18361dc:	10c00885 	stb	r3,34(r2)
        tcp_pcb_purge(pcb);
 18361e0:	e13fff17 	ldw	r4,-4(fp)
 18361e4:	181d8080 	call	181d808 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 18361e8:	d0e7f717 	ldw	r3,-24612(gp)
 18361ec:	e0bfff17 	ldw	r2,-4(fp)
 18361f0:	1880041e 	bne	r3,r2,1836204 <tcp_process+0x7bc>
 18361f4:	d0a7f717 	ldw	r2,-24612(gp)
 18361f8:	10800317 	ldw	r2,12(r2)
 18361fc:	d0a7f715 	stw	r2,-24612(gp)
 1836200:	00001106 	br	1836248 <tcp_process+0x800>
 1836204:	d0a7f717 	ldw	r2,-24612(gp)
 1836208:	d0a7fa15 	stw	r2,-24600(gp)
 183620c:	00000c06 	br	1836240 <tcp_process+0x7f8>
 1836210:	d0a7fa17 	ldw	r2,-24600(gp)
 1836214:	10c00317 	ldw	r3,12(r2)
 1836218:	e0bfff17 	ldw	r2,-4(fp)
 183621c:	1880051e 	bne	r3,r2,1836234 <tcp_process+0x7ec>
 1836220:	d0a7fa17 	ldw	r2,-24600(gp)
 1836224:	e0ffff17 	ldw	r3,-4(fp)
 1836228:	18c00317 	ldw	r3,12(r3)
 183622c:	10c00315 	stw	r3,12(r2)
 1836230:	00000506 	br	1836248 <tcp_process+0x800>
 1836234:	d0a7fa17 	ldw	r2,-24600(gp)
 1836238:	10800317 	ldw	r2,12(r2)
 183623c:	d0a7fa15 	stw	r2,-24600(gp)
 1836240:	d0a7fa17 	ldw	r2,-24600(gp)
 1836244:	103ff21e 	bne	r2,zero,1836210 <__alt_mem_mem_0+0xff816210>
 1836248:	e0bfff17 	ldw	r2,-4(fp)
 183624c:	10000315 	stw	zero,12(r2)
 1836250:	00800044 	movi	r2,1
 1836254:	d0a7f685 	stb	r2,-24614(gp)
        pcb->state = TIME_WAIT;
 1836258:	e0bfff17 	ldw	r2,-4(fp)
 183625c:	00c00284 	movi	r3,10
 1836260:	10c00615 	stw	r3,24(r2)
        TCP_REG(&tcp_tw_pcbs, pcb);
 1836264:	d0e7fc17 	ldw	r3,-24592(gp)
 1836268:	e0bfff17 	ldw	r2,-4(fp)
 183626c:	10c00315 	stw	r3,12(r2)
 1836270:	e0bfff17 	ldw	r2,-4(fp)
 1836274:	d0a7fc15 	stw	r2,-24592(gp)
 1836278:	18212d00 	call	18212d0 <tcp_timer_needed>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 183627c:	00009206 	br	18364c8 <tcp_process+0xa80>
        tcp_pcb_purge(pcb);
        TCP_RMV_ACTIVE(pcb);
        pcb->state = TIME_WAIT;
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
 1836280:	e0bfff17 	ldw	r2,-4(fp)
 1836284:	10800883 	ldbu	r2,34(r2)
 1836288:	10800094 	ori	r2,r2,2
 183628c:	1007883a 	mov	r3,r2
 1836290:	e0bfff17 	ldw	r2,-4(fp)
 1836294:	10c00885 	stb	r3,34(r2)
        pcb->state = CLOSING;
 1836298:	e0bfff17 	ldw	r2,-4(fp)
 183629c:	00c00204 	movi	r3,8
 18362a0:	10c00615 	stw	r3,24(r2)
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 18362a4:	00008806 	br	18364c8 <tcp_process+0xa80>
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 18362a8:	d0a81b03 	ldbu	r2,-24468(gp)
 18362ac:	10803fcc 	andi	r2,r2,255
 18362b0:	1080040c 	andi	r2,r2,16
 18362b4:	10008426 	beq	r2,zero,18364c8 <tcp_process+0xa80>
 18362b8:	e0bfff17 	ldw	r2,-4(fp)
 18362bc:	10c01517 	ldw	r3,84(r2)
 18362c0:	d0a81a17 	ldw	r2,-24472(gp)
 18362c4:	1880801e 	bne	r3,r2,18364c8 <tcp_process+0xa80>
      pcb->state = FIN_WAIT_2;
 18362c8:	e0bfff17 	ldw	r2,-4(fp)
 18362cc:	00c00184 	movi	r3,6
 18362d0:	10c00615 	stw	r3,24(r2)
    }
    break;
 18362d4:	00007c06 	br	18364c8 <tcp_process+0xa80>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 18362d8:	e13fff17 	ldw	r4,-4(fp)
 18362dc:	183679c0 	call	183679c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 18362e0:	d0a81c03 	ldbu	r2,-24464(gp)
 18362e4:	10803fcc 	andi	r2,r2,255
 18362e8:	1080080c 	andi	r2,r2,32
 18362ec:	10007826 	beq	r2,zero,18364d0 <tcp_process+0xa88>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 18362f0:	e0bfff17 	ldw	r2,-4(fp)
 18362f4:	10800883 	ldbu	r2,34(r2)
 18362f8:	10800094 	ori	r2,r2,2
 18362fc:	1007883a 	mov	r3,r2
 1836300:	e0bfff17 	ldw	r2,-4(fp)
 1836304:	10c00885 	stb	r3,34(r2)
      tcp_pcb_purge(pcb);
 1836308:	e13fff17 	ldw	r4,-4(fp)
 183630c:	181d8080 	call	181d808 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 1836310:	d0e7f717 	ldw	r3,-24612(gp)
 1836314:	e0bfff17 	ldw	r2,-4(fp)
 1836318:	1880041e 	bne	r3,r2,183632c <tcp_process+0x8e4>
 183631c:	d0a7f717 	ldw	r2,-24612(gp)
 1836320:	10800317 	ldw	r2,12(r2)
 1836324:	d0a7f715 	stw	r2,-24612(gp)
 1836328:	00001106 	br	1836370 <tcp_process+0x928>
 183632c:	d0a7f717 	ldw	r2,-24612(gp)
 1836330:	d0a7fa15 	stw	r2,-24600(gp)
 1836334:	00000c06 	br	1836368 <tcp_process+0x920>
 1836338:	d0a7fa17 	ldw	r2,-24600(gp)
 183633c:	10c00317 	ldw	r3,12(r2)
 1836340:	e0bfff17 	ldw	r2,-4(fp)
 1836344:	1880051e 	bne	r3,r2,183635c <tcp_process+0x914>
 1836348:	d0a7fa17 	ldw	r2,-24600(gp)
 183634c:	e0ffff17 	ldw	r3,-4(fp)
 1836350:	18c00317 	ldw	r3,12(r3)
 1836354:	10c00315 	stw	r3,12(r2)
 1836358:	00000506 	br	1836370 <tcp_process+0x928>
 183635c:	d0a7fa17 	ldw	r2,-24600(gp)
 1836360:	10800317 	ldw	r2,12(r2)
 1836364:	d0a7fa15 	stw	r2,-24600(gp)
 1836368:	d0a7fa17 	ldw	r2,-24600(gp)
 183636c:	103ff21e 	bne	r2,zero,1836338 <__alt_mem_mem_0+0xff816338>
 1836370:	e0bfff17 	ldw	r2,-4(fp)
 1836374:	10000315 	stw	zero,12(r2)
 1836378:	00800044 	movi	r2,1
 183637c:	d0a7f685 	stb	r2,-24614(gp)
      pcb->state = TIME_WAIT;
 1836380:	e0bfff17 	ldw	r2,-4(fp)
 1836384:	00c00284 	movi	r3,10
 1836388:	10c00615 	stw	r3,24(r2)
      TCP_REG(&tcp_tw_pcbs, pcb);
 183638c:	d0e7fc17 	ldw	r3,-24592(gp)
 1836390:	e0bfff17 	ldw	r2,-4(fp)
 1836394:	10c00315 	stw	r3,12(r2)
 1836398:	e0bfff17 	ldw	r2,-4(fp)
 183639c:	d0a7fc15 	stw	r2,-24592(gp)
 18363a0:	18212d00 	call	18212d0 <tcp_timer_needed>
    }
    break;
 18363a4:	00004a06 	br	18364d0 <tcp_process+0xa88>
  case CLOSING:
    tcp_receive(pcb);
 18363a8:	e13fff17 	ldw	r4,-4(fp)
 18363ac:	183679c0 	call	183679c <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 18363b0:	d0a81b03 	ldbu	r2,-24468(gp)
 18363b4:	10803fcc 	andi	r2,r2,255
 18363b8:	1080040c 	andi	r2,r2,16
 18363bc:	10004626 	beq	r2,zero,18364d8 <tcp_process+0xa90>
 18363c0:	e0bfff17 	ldw	r2,-4(fp)
 18363c4:	10c01517 	ldw	r3,84(r2)
 18363c8:	d0a81a17 	ldw	r2,-24472(gp)
 18363cc:	1880421e 	bne	r3,r2,18364d8 <tcp_process+0xa90>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 18363d0:	e13fff17 	ldw	r4,-4(fp)
 18363d4:	181d8080 	call	181d808 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 18363d8:	d0e7f717 	ldw	r3,-24612(gp)
 18363dc:	e0bfff17 	ldw	r2,-4(fp)
 18363e0:	1880041e 	bne	r3,r2,18363f4 <tcp_process+0x9ac>
 18363e4:	d0a7f717 	ldw	r2,-24612(gp)
 18363e8:	10800317 	ldw	r2,12(r2)
 18363ec:	d0a7f715 	stw	r2,-24612(gp)
 18363f0:	00001106 	br	1836438 <tcp_process+0x9f0>
 18363f4:	d0a7f717 	ldw	r2,-24612(gp)
 18363f8:	d0a7fa15 	stw	r2,-24600(gp)
 18363fc:	00000c06 	br	1836430 <tcp_process+0x9e8>
 1836400:	d0a7fa17 	ldw	r2,-24600(gp)
 1836404:	10c00317 	ldw	r3,12(r2)
 1836408:	e0bfff17 	ldw	r2,-4(fp)
 183640c:	1880051e 	bne	r3,r2,1836424 <tcp_process+0x9dc>
 1836410:	d0a7fa17 	ldw	r2,-24600(gp)
 1836414:	e0ffff17 	ldw	r3,-4(fp)
 1836418:	18c00317 	ldw	r3,12(r3)
 183641c:	10c00315 	stw	r3,12(r2)
 1836420:	00000506 	br	1836438 <tcp_process+0x9f0>
 1836424:	d0a7fa17 	ldw	r2,-24600(gp)
 1836428:	10800317 	ldw	r2,12(r2)
 183642c:	d0a7fa15 	stw	r2,-24600(gp)
 1836430:	d0a7fa17 	ldw	r2,-24600(gp)
 1836434:	103ff21e 	bne	r2,zero,1836400 <__alt_mem_mem_0+0xff816400>
 1836438:	e0bfff17 	ldw	r2,-4(fp)
 183643c:	10000315 	stw	zero,12(r2)
 1836440:	00800044 	movi	r2,1
 1836444:	d0a7f685 	stb	r2,-24614(gp)
      pcb->state = TIME_WAIT;
 1836448:	e0bfff17 	ldw	r2,-4(fp)
 183644c:	00c00284 	movi	r3,10
 1836450:	10c00615 	stw	r3,24(r2)
      TCP_REG(&tcp_tw_pcbs, pcb);
 1836454:	d0e7fc17 	ldw	r3,-24592(gp)
 1836458:	e0bfff17 	ldw	r2,-4(fp)
 183645c:	10c00315 	stw	r3,12(r2)
 1836460:	e0bfff17 	ldw	r2,-4(fp)
 1836464:	d0a7fc15 	stw	r2,-24592(gp)
 1836468:	18212d00 	call	18212d0 <tcp_timer_needed>
    }
    break;
 183646c:	00001a06 	br	18364d8 <tcp_process+0xa90>
  case LAST_ACK:
    tcp_receive(pcb);
 1836470:	e13fff17 	ldw	r4,-4(fp)
 1836474:	183679c0 	call	183679c <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 1836478:	d0a81b03 	ldbu	r2,-24468(gp)
 183647c:	10803fcc 	andi	r2,r2,255
 1836480:	1080040c 	andi	r2,r2,16
 1836484:	10001626 	beq	r2,zero,18364e0 <tcp_process+0xa98>
 1836488:	e0bfff17 	ldw	r2,-4(fp)
 183648c:	10c01517 	ldw	r3,84(r2)
 1836490:	d0a81a17 	ldw	r2,-24472(gp)
 1836494:	1880121e 	bne	r3,r2,18364e0 <tcp_process+0xa98>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 1836498:	d0a81c03 	ldbu	r2,-24464(gp)
 183649c:	10800414 	ori	r2,r2,16
 18364a0:	d0a81c05 	stb	r2,-24464(gp)
    }
    break;
 18364a4:	00000e06 	br	18364e0 <tcp_process+0xa98>
  default:
    break;
 18364a8:	0001883a 	nop
 18364ac:	00000d06 	br	18364e4 <tcp_process+0xa9c>
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
 18364b0:	0001883a 	nop
 18364b4:	00000b06 	br	18364e4 <tcp_process+0xa9c>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 18364b8:	0001883a 	nop
 18364bc:	00000906 	br	18364e4 <tcp_process+0xa9c>
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) { /* passive close */
      tcp_ack_now(pcb);
      pcb->state = CLOSE_WAIT;
    }
    break;
 18364c0:	0001883a 	nop
 18364c4:	00000706 	br	18364e4 <tcp_process+0xa9c>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 18364c8:	0001883a 	nop
 18364cc:	00000506 	br	18364e4 <tcp_process+0xa9c>
      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
 18364d0:	0001883a 	nop
 18364d4:	00000306 	br	18364e4 <tcp_process+0xa9c>
      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
 18364d8:	0001883a 	nop
 18364dc:	00000106 	br	18364e4 <tcp_process+0xa9c>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
    }
    break;
 18364e0:	0001883a 	nop
  default:
    break;
  }
  return ERR_OK;
 18364e4:	0005883a 	mov	r2,zero
}
 18364e8:	e037883a 	mov	sp,fp
 18364ec:	dfc00117 	ldw	ra,4(sp)
 18364f0:	df000017 	ldw	fp,0(sp)
 18364f4:	dec00204 	addi	sp,sp,8
 18364f8:	f800283a 	ret

018364fc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 18364fc:	defffb04 	addi	sp,sp,-20
 1836500:	dfc00415 	stw	ra,16(sp)
 1836504:	df000315 	stw	fp,12(sp)
 1836508:	df000304 	addi	fp,sp,12
 183650c:	e13ffe15 	stw	r4,-8(fp)
 1836510:	e17fff15 	stw	r5,-4(fp)
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 1836514:	e0bffe17 	ldw	r2,-8(fp)
 1836518:	10800417 	ldw	r2,16(r2)
 183651c:	10c00303 	ldbu	r3,12(r2)
 1836520:	10800343 	ldbu	r2,13(r2)
 1836524:	1004923a 	slli	r2,r2,8
 1836528:	10c4b03a 	or	r2,r2,r3
 183652c:	10bfffcc 	andi	r2,r2,65535
 1836530:	1004d23a 	srli	r2,r2,8
 1836534:	10ffffcc 	andi	r3,r2,65535
 1836538:	e0bffe17 	ldw	r2,-8(fp)
 183653c:	10800417 	ldw	r2,16(r2)
 1836540:	11000303 	ldbu	r4,12(r2)
 1836544:	10800343 	ldbu	r2,13(r2)
 1836548:	1004923a 	slli	r2,r2,8
 183654c:	1104b03a 	or	r2,r2,r4
 1836550:	10bfffcc 	andi	r2,r2,65535
 1836554:	1004923a 	slli	r2,r2,8
 1836558:	10bfffcc 	andi	r2,r2,65535
 183655c:	1884b03a 	or	r2,r3,r2
 1836560:	1080004c 	andi	r2,r2,1
 1836564:	10003b26 	beq	r2,zero,1836654 <tcp_oos_insert_segment+0x158>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 1836568:	e13fff17 	ldw	r4,-4(fp)
 183656c:	181d1580 	call	181d158 <tcp_segs_free>
    next = NULL;
 1836570:	e03fff15 	stw	zero,-4(fp)
 1836574:	00008006 	br	1836778 <tcp_oos_insert_segment+0x27c>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 1836578:	e0bfff17 	ldw	r2,-4(fp)
 183657c:	10800417 	ldw	r2,16(r2)
 1836580:	10c00303 	ldbu	r3,12(r2)
 1836584:	10800343 	ldbu	r2,13(r2)
 1836588:	1004923a 	slli	r2,r2,8
 183658c:	10c4b03a 	or	r2,r2,r3
 1836590:	10bfffcc 	andi	r2,r2,65535
 1836594:	1004d23a 	srli	r2,r2,8
 1836598:	10ffffcc 	andi	r3,r2,65535
 183659c:	e0bfff17 	ldw	r2,-4(fp)
 18365a0:	10800417 	ldw	r2,16(r2)
 18365a4:	11000303 	ldbu	r4,12(r2)
 18365a8:	10800343 	ldbu	r2,13(r2)
 18365ac:	1004923a 	slli	r2,r2,8
 18365b0:	1104b03a 	or	r2,r2,r4
 18365b4:	10bfffcc 	andi	r2,r2,65535
 18365b8:	1004923a 	slli	r2,r2,8
 18365bc:	10bfffcc 	andi	r2,r2,65535
 18365c0:	1884b03a 	or	r2,r3,r2
 18365c4:	1080004c 	andi	r2,r2,1
 18365c8:	10001b26 	beq	r2,zero,1836638 <tcp_oos_insert_segment+0x13c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 18365cc:	e0bffe17 	ldw	r2,-8(fp)
 18365d0:	10800417 	ldw	r2,16(r2)
 18365d4:	e0fffe17 	ldw	r3,-8(fp)
 18365d8:	18c00417 	ldw	r3,16(r3)
 18365dc:	19000303 	ldbu	r4,12(r3)
 18365e0:	18c00343 	ldbu	r3,13(r3)
 18365e4:	1806923a 	slli	r3,r3,8
 18365e8:	1906b03a 	or	r3,r3,r4
 18365ec:	18c04014 	ori	r3,r3,256
 18365f0:	180d883a 	mov	r6,r3
 18365f4:	30ffffcc 	andi	r3,r6,65535
 18365f8:	19403fcc 	andi	r5,r3,255
 18365fc:	10c00303 	ldbu	r3,12(r2)
 1836600:	1806703a 	and	r3,r3,zero
 1836604:	1809883a 	mov	r4,r3
 1836608:	2807883a 	mov	r3,r5
 183660c:	20c6b03a 	or	r3,r4,r3
 1836610:	10c00305 	stb	r3,12(r2)
 1836614:	30ffffcc 	andi	r3,r6,65535
 1836618:	1806d23a 	srli	r3,r3,8
 183661c:	197fffcc 	andi	r5,r3,65535
 1836620:	10c00343 	ldbu	r3,13(r2)
 1836624:	1806703a 	and	r3,r3,zero
 1836628:	1809883a 	mov	r4,r3
 183662c:	2807883a 	mov	r3,r5
 1836630:	20c6b03a 	or	r3,r4,r3
 1836634:	10c00345 	stb	r3,13(r2)
      }
      old_seg = next;
 1836638:	e0bfff17 	ldw	r2,-4(fp)
 183663c:	e0bffd15 	stw	r2,-12(fp)
      next = next->next;
 1836640:	e0bfff17 	ldw	r2,-4(fp)
 1836644:	10800017 	ldw	r2,0(r2)
 1836648:	e0bfff15 	stw	r2,-4(fp)
      tcp_seg_free(old_seg);
 183664c:	e13ffd17 	ldw	r4,-12(fp)
 1836650:	181d1ac0 	call	181d1ac <tcp_seg_free>
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 1836654:	e0bfff17 	ldw	r2,-4(fp)
 1836658:	10001826 	beq	r2,zero,18366bc <tcp_oos_insert_segment+0x1c0>
           TCP_SEQ_GEQ((seqno + cseg->len),
 183665c:	e0bffe17 	ldw	r2,-8(fp)
 1836660:	1080020b 	ldhu	r2,8(r2)
 1836664:	10ffffcc 	andi	r3,r2,65535
 1836668:	d0a81917 	ldw	r2,-24476(gp)
 183666c:	1887883a 	add	r3,r3,r2
 1836670:	e0bfff17 	ldw	r2,-4(fp)
 1836674:	10800417 	ldw	r2,16(r2)
 1836678:	11000103 	ldbu	r4,4(r2)
 183667c:	11400143 	ldbu	r5,5(r2)
 1836680:	280a923a 	slli	r5,r5,8
 1836684:	2908b03a 	or	r4,r5,r4
 1836688:	11400183 	ldbu	r5,6(r2)
 183668c:	280a943a 	slli	r5,r5,16
 1836690:	2908b03a 	or	r4,r5,r4
 1836694:	108001c3 	ldbu	r2,7(r2)
 1836698:	1004963a 	slli	r2,r2,24
 183669c:	1104b03a 	or	r2,r2,r4
 18366a0:	1009883a 	mov	r4,r2
 18366a4:	e0bfff17 	ldw	r2,-4(fp)
 18366a8:	1080020b 	ldhu	r2,8(r2)
 18366ac:	10bfffcc 	andi	r2,r2,65535
 18366b0:	2085883a 	add	r2,r4,r2
 18366b4:	1885c83a 	sub	r2,r3,r2
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 18366b8:	103faf0e 	bge	r2,zero,1836578 <__alt_mem_mem_0+0xff816578>
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
 18366bc:	e0bfff17 	ldw	r2,-4(fp)
 18366c0:	10002d26 	beq	r2,zero,1836778 <tcp_oos_insert_segment+0x27c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 18366c4:	e0bffe17 	ldw	r2,-8(fp)
 18366c8:	1080020b 	ldhu	r2,8(r2)
 18366cc:	10ffffcc 	andi	r3,r2,65535
 18366d0:	d0a81917 	ldw	r2,-24476(gp)
 18366d4:	1887883a 	add	r3,r3,r2
 18366d8:	e0bfff17 	ldw	r2,-4(fp)
 18366dc:	10800417 	ldw	r2,16(r2)
 18366e0:	11000103 	ldbu	r4,4(r2)
 18366e4:	11400143 	ldbu	r5,5(r2)
 18366e8:	280a923a 	slli	r5,r5,8
 18366ec:	2908b03a 	or	r4,r5,r4
 18366f0:	11400183 	ldbu	r5,6(r2)
 18366f4:	280a943a 	slli	r5,r5,16
 18366f8:	2908b03a 	or	r4,r5,r4
 18366fc:	108001c3 	ldbu	r2,7(r2)
 1836700:	1004963a 	slli	r2,r2,24
 1836704:	1104b03a 	or	r2,r2,r4
 1836708:	1885c83a 	sub	r2,r3,r2
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
 183670c:	00801a0e 	bge	zero,r2,1836778 <tcp_oos_insert_segment+0x27c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 1836710:	e0bfff17 	ldw	r2,-4(fp)
 1836714:	10800417 	ldw	r2,16(r2)
 1836718:	10c00103 	ldbu	r3,4(r2)
 183671c:	11000143 	ldbu	r4,5(r2)
 1836720:	2008923a 	slli	r4,r4,8
 1836724:	20c6b03a 	or	r3,r4,r3
 1836728:	11000183 	ldbu	r4,6(r2)
 183672c:	2008943a 	slli	r4,r4,16
 1836730:	20c6b03a 	or	r3,r4,r3
 1836734:	108001c3 	ldbu	r2,7(r2)
 1836738:	1004963a 	slli	r2,r2,24
 183673c:	10c4b03a 	or	r2,r2,r3
 1836740:	1007883a 	mov	r3,r2
 1836744:	d0a81917 	ldw	r2,-24476(gp)
 1836748:	1885c83a 	sub	r2,r3,r2
 183674c:	1007883a 	mov	r3,r2
 1836750:	e0bffe17 	ldw	r2,-8(fp)
 1836754:	10c0020d 	sth	r3,8(r2)
      pbuf_realloc(cseg->p, cseg->len);
 1836758:	e0bffe17 	ldw	r2,-8(fp)
 183675c:	10c00117 	ldw	r3,4(r2)
 1836760:	e0bffe17 	ldw	r2,-8(fp)
 1836764:	1080020b 	ldhu	r2,8(r2)
 1836768:	10bfffcc 	andi	r2,r2,65535
 183676c:	100b883a 	mov	r5,r2
 1836770:	1809883a 	mov	r4,r3
 1836774:	181a5f40 	call	181a5f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 1836778:	e0bffe17 	ldw	r2,-8(fp)
 183677c:	e0ffff17 	ldw	r3,-4(fp)
 1836780:	10c00015 	stw	r3,0(r2)
}
 1836784:	0001883a 	nop
 1836788:	e037883a 	mov	sp,fp
 183678c:	dfc00117 	ldw	ra,4(sp)
 1836790:	df000017 	ldw	fp,0(sp)
 1836794:	dec00204 	addi	sp,sp,8
 1836798:	f800283a 	ret

0183679c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 183679c:	defff204 	addi	sp,sp,-56
 18367a0:	dfc00d15 	stw	ra,52(sp)
 18367a4:	df000c15 	stw	fp,48(sp)
 18367a8:	dc000b15 	stw	r16,44(sp)
 18367ac:	df000c04 	addi	fp,sp,48
 18367b0:	e13ffe15 	stw	r4,-8(fp)
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 18367b4:	e03ff915 	stw	zero,-28(fp)
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 18367b8:	d0a81b03 	ldbu	r2,-24468(gp)
 18367bc:	10803fcc 	andi	r2,r2,255
 18367c0:	1080040c 	andi	r2,r2,16
 18367c4:	1002ab26 	beq	r2,zero,1837274 <tcp_receive+0xad8>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 18367c8:	e0bffe17 	ldw	r2,-8(fp)
 18367cc:	1080190b 	ldhu	r2,100(r2)
 18367d0:	10ffffcc 	andi	r3,r2,65535
 18367d4:	e0bffe17 	ldw	r2,-8(fp)
 18367d8:	10801717 	ldw	r2,92(r2)
 18367dc:	1885883a 	add	r2,r3,r2
 18367e0:	e0bffa15 	stw	r2,-24(fp)

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 18367e4:	e0bffe17 	ldw	r2,-8(fp)
 18367e8:	10c01617 	ldw	r3,88(r2)
 18367ec:	d0a81917 	ldw	r2,-24476(gp)
 18367f0:	1885c83a 	sub	r2,r3,r2
 18367f4:	10001816 	blt	r2,zero,1836858 <tcp_receive+0xbc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 18367f8:	e0bffe17 	ldw	r2,-8(fp)
 18367fc:	10c01617 	ldw	r3,88(r2)
 1836800:	d0a81917 	ldw	r2,-24476(gp)

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 1836804:	1880051e 	bne	r3,r2,183681c <tcp_receive+0x80>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 1836808:	e0bffe17 	ldw	r2,-8(fp)
 183680c:	10c01717 	ldw	r3,92(r2)
 1836810:	d0a81a17 	ldw	r2,-24472(gp)
 1836814:	1885c83a 	sub	r2,r3,r2
 1836818:	10000f16 	blt	r2,zero,1836858 <tcp_receive+0xbc>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 183681c:	e0bffe17 	ldw	r2,-8(fp)
 1836820:	10c01717 	ldw	r3,92(r2)
 1836824:	d0a81a17 	ldw	r2,-24472(gp)
  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 1836828:	18803f1e 	bne	r3,r2,1836928 <tcp_receive+0x18c>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 183682c:	d0a81717 	ldw	r2,-24484(gp)
 1836830:	10c00383 	ldbu	r3,14(r2)
 1836834:	108003c3 	ldbu	r2,15(r2)
 1836838:	1004923a 	slli	r2,r2,8
 183683c:	10c4b03a 	or	r2,r2,r3
 1836840:	1009883a 	mov	r4,r2
 1836844:	e0bffe17 	ldw	r2,-8(fp)
 1836848:	10c0190b 	ldhu	r3,100(r2)
 183684c:	20bfffcc 	andi	r2,r4,65535
 1836850:	18ffffcc 	andi	r3,r3,65535
 1836854:	1880342e 	bgeu	r3,r2,1836928 <tcp_receive+0x18c>
      pcb->snd_wnd = tcphdr->wnd;
 1836858:	d0a81717 	ldw	r2,-24484(gp)
 183685c:	10c00383 	ldbu	r3,14(r2)
 1836860:	108003c3 	ldbu	r2,15(r2)
 1836864:	1004923a 	slli	r2,r2,8
 1836868:	10c4b03a 	or	r2,r2,r3
 183686c:	1007883a 	mov	r3,r2
 1836870:	e0bffe17 	ldw	r2,-8(fp)
 1836874:	10c0190d 	sth	r3,100(r2)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
 1836878:	e0bffe17 	ldw	r2,-8(fp)
 183687c:	1100198b 	ldhu	r4,102(r2)
 1836880:	d0a81717 	ldw	r2,-24484(gp)
 1836884:	10c00383 	ldbu	r3,14(r2)
 1836888:	108003c3 	ldbu	r2,15(r2)
 183688c:	1004923a 	slli	r2,r2,8
 1836890:	10c4b03a 	or	r2,r2,r3
 1836894:	20ffffcc 	andi	r3,r4,65535
 1836898:	10bfffcc 	andi	r2,r2,65535
 183689c:	1880082e 	bgeu	r3,r2,18368c0 <tcp_receive+0x124>
        pcb->snd_wnd_max = tcphdr->wnd;
 18368a0:	d0a81717 	ldw	r2,-24484(gp)
 18368a4:	10c00383 	ldbu	r3,14(r2)
 18368a8:	108003c3 	ldbu	r2,15(r2)
 18368ac:	1004923a 	slli	r2,r2,8
 18368b0:	10c4b03a 	or	r2,r2,r3
 18368b4:	1007883a 	mov	r3,r2
 18368b8:	e0bffe17 	ldw	r2,-8(fp)
 18368bc:	10c0198d 	sth	r3,102(r2)
      }
      pcb->snd_wl1 = seqno;
 18368c0:	d0e81917 	ldw	r3,-24476(gp)
 18368c4:	e0bffe17 	ldw	r2,-8(fp)
 18368c8:	10c01615 	stw	r3,88(r2)
      pcb->snd_wl2 = ackno;
 18368cc:	d0e81a17 	ldw	r3,-24472(gp)
 18368d0:	e0bffe17 	ldw	r2,-8(fp)
 18368d4:	10c01715 	stw	r3,92(r2)
      if (pcb->snd_wnd == 0) {
 18368d8:	e0bffe17 	ldw	r2,-8(fp)
 18368dc:	1080190b 	ldhu	r2,100(r2)
 18368e0:	10bfffcc 	andi	r2,r2,65535
 18368e4:	10000a1e 	bne	r2,zero,1836910 <tcp_receive+0x174>
        if (pcb->persist_backoff == 0) {
 18368e8:	e0bffe17 	ldw	r2,-8(fp)
 18368ec:	10802843 	ldbu	r2,161(r2)
 18368f0:	10803fcc 	andi	r2,r2,255
 18368f4:	10000c1e 	bne	r2,zero,1836928 <tcp_receive+0x18c>
          /* start persist timer */
          pcb->persist_cnt = 0;
 18368f8:	e0bffe17 	ldw	r2,-8(fp)
 18368fc:	10002805 	stb	zero,160(r2)
          pcb->persist_backoff = 1;
 1836900:	e0bffe17 	ldw	r2,-8(fp)
 1836904:	00c00044 	movi	r3,1
 1836908:	10c02845 	stb	r3,161(r2)
 183690c:	00000606 	br	1836928 <tcp_receive+0x18c>
        }
      } else if (pcb->persist_backoff > 0) {
 1836910:	e0bffe17 	ldw	r2,-8(fp)
 1836914:	10802843 	ldbu	r2,161(r2)
 1836918:	10803fcc 	andi	r2,r2,255
 183691c:	10000226 	beq	r2,zero,1836928 <tcp_receive+0x18c>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 1836920:	e0bffe17 	ldw	r2,-8(fp)
 1836924:	10002845 	stb	zero,161(r2)
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 1836928:	d0e81a17 	ldw	r3,-24472(gp)
 183692c:	e0bffe17 	ldw	r2,-8(fp)
 1836930:	10801317 	ldw	r2,76(r2)
 1836934:	1885c83a 	sub	r2,r3,r2
 1836938:	00804d16 	blt	zero,r2,1836a70 <tcp_receive+0x2d4>
      pcb->acked = 0;
 183693c:	e0bffe17 	ldw	r2,-8(fp)
 1836940:	10001a0d 	sth	zero,104(r2)
      /* Clause 2 */
      if (tcplen == 0) {
 1836944:	d0a81b8b 	ldhu	r2,-24466(gp)
 1836948:	10bfffcc 	andi	r2,r2,65535
 183694c:	1000431e 	bne	r2,zero,1836a5c <tcp_receive+0x2c0>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
 1836950:	e0bffe17 	ldw	r2,-8(fp)
 1836954:	10c01717 	ldw	r3,92(r2)
 1836958:	e0bffe17 	ldw	r2,-8(fp)
 183695c:	1080190b 	ldhu	r2,100(r2)
 1836960:	10bfffcc 	andi	r2,r2,65535
 1836964:	1887883a 	add	r3,r3,r2
 1836968:	e0bffa17 	ldw	r2,-24(fp)
 183696c:	18803b1e 	bne	r3,r2,1836a5c <tcp_receive+0x2c0>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 1836970:	e0bffe17 	ldw	r2,-8(fp)
 1836974:	10800e0b 	ldhu	r2,56(r2)
 1836978:	10bfffcc 	andi	r2,r2,65535
 183697c:	10a0001c 	xori	r2,r2,32768
 1836980:	10a00004 	addi	r2,r2,-32768
 1836984:	10003516 	blt	r2,zero,1836a5c <tcp_receive+0x2c0>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 1836988:	e0bffe17 	ldw	r2,-8(fp)
 183698c:	10c01317 	ldw	r3,76(r2)
 1836990:	d0a81a17 	ldw	r2,-24472(gp)
 1836994:	1880311e 	bne	r3,r2,1836a5c <tcp_receive+0x2c0>
              found_dupack = 1;
 1836998:	00800044 	movi	r2,1
 183699c:	e0bff915 	stw	r2,-28(fp)
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 18369a0:	e0bffe17 	ldw	r2,-8(fp)
 18369a4:	108012c3 	ldbu	r2,75(r2)
 18369a8:	10800044 	addi	r2,r2,1
 18369ac:	1009883a 	mov	r4,r2
 18369b0:	e0bffe17 	ldw	r2,-8(fp)
 18369b4:	10c012c3 	ldbu	r3,75(r2)
 18369b8:	20803fcc 	andi	r2,r4,255
 18369bc:	18c03fcc 	andi	r3,r3,255
 18369c0:	1880062e 	bgeu	r3,r2,18369dc <tcp_receive+0x240>
                ++pcb->dupacks;
 18369c4:	e0bffe17 	ldw	r2,-8(fp)
 18369c8:	108012c3 	ldbu	r2,75(r2)
 18369cc:	10800044 	addi	r2,r2,1
 18369d0:	1007883a 	mov	r3,r2
 18369d4:	e0bffe17 	ldw	r2,-8(fp)
 18369d8:	10c012c5 	stb	r3,75(r2)
              }
              if (pcb->dupacks > 3) {
 18369dc:	e0bffe17 	ldw	r2,-8(fp)
 18369e0:	108012c3 	ldbu	r2,75(r2)
 18369e4:	10803fcc 	andi	r2,r2,255
 18369e8:	10800130 	cmpltui	r2,r2,4
 18369ec:	1000141e 	bne	r2,zero,1836a40 <tcp_receive+0x2a4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 18369f0:	e0bffe17 	ldw	r2,-8(fp)
 18369f4:	10c0140b 	ldhu	r3,80(r2)
 18369f8:	e0bffe17 	ldw	r2,-8(fp)
 18369fc:	10800e8b 	ldhu	r2,58(r2)
 1836a00:	1885883a 	add	r2,r3,r2
 1836a04:	1009883a 	mov	r4,r2
 1836a08:	e0bffe17 	ldw	r2,-8(fp)
 1836a0c:	10c0140b 	ldhu	r3,80(r2)
 1836a10:	20bfffcc 	andi	r2,r4,65535
 1836a14:	18ffffcc 	andi	r3,r3,65535
 1836a18:	1880102e 	bgeu	r3,r2,1836a5c <tcp_receive+0x2c0>
                  pcb->cwnd += pcb->mss;
 1836a1c:	e0bffe17 	ldw	r2,-8(fp)
 1836a20:	10c0140b 	ldhu	r3,80(r2)
 1836a24:	e0bffe17 	ldw	r2,-8(fp)
 1836a28:	10800e8b 	ldhu	r2,58(r2)
 1836a2c:	1885883a 	add	r2,r3,r2
 1836a30:	1007883a 	mov	r3,r2
 1836a34:	e0bffe17 	ldw	r2,-8(fp)
 1836a38:	10c0140d 	sth	r3,80(r2)
 1836a3c:	00000706 	br	1836a5c <tcp_receive+0x2c0>
                }
              } else if (pcb->dupacks == 3) {
 1836a40:	e0bffe17 	ldw	r2,-8(fp)
 1836a44:	108012c3 	ldbu	r2,75(r2)
 1836a48:	10803fcc 	andi	r2,r2,255
 1836a4c:	108000d8 	cmpnei	r2,r2,3
 1836a50:	1000021e 	bne	r2,zero,1836a5c <tcp_receive+0x2c0>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 1836a54:	e13ffe17 	ldw	r4,-8(fp)
 1836a58:	1820cd00 	call	1820cd0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 1836a5c:	e0bff917 	ldw	r2,-28(fp)
 1836a60:	10015a1e 	bne	r2,zero,1836fcc <tcp_receive+0x830>
        pcb->dupacks = 0;
 1836a64:	e0bffe17 	ldw	r2,-8(fp)
 1836a68:	100012c5 	stb	zero,75(r2)
 1836a6c:	00015706 	br	1836fcc <tcp_receive+0x830>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
 1836a70:	d0e81a17 	ldw	r3,-24472(gp)
 1836a74:	e0bffe17 	ldw	r2,-8(fp)
 1836a78:	10801317 	ldw	r2,76(r2)
 1836a7c:	1885c83a 	sub	r2,r3,r2
 1836a80:	10bfffc4 	addi	r2,r2,-1
 1836a84:	10011416 	blt	r2,zero,1836ed8 <tcp_receive+0x73c>
 1836a88:	d0e81a17 	ldw	r3,-24472(gp)
 1836a8c:	e0bffe17 	ldw	r2,-8(fp)
 1836a90:	10801517 	ldw	r2,84(r2)
 1836a94:	1885c83a 	sub	r2,r3,r2
 1836a98:	00810f16 	blt	zero,r2,1836ed8 <tcp_receive+0x73c>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 1836a9c:	e0bffe17 	ldw	r2,-8(fp)
 1836aa0:	10800883 	ldbu	r2,34(r2)
 1836aa4:	10803fcc 	andi	r2,r2,255
 1836aa8:	1080010c 	andi	r2,r2,4
 1836aac:	10000b26 	beq	r2,zero,1836adc <tcp_receive+0x340>
        pcb->flags &= ~TF_INFR;
 1836ab0:	e0bffe17 	ldw	r2,-8(fp)
 1836ab4:	10c00883 	ldbu	r3,34(r2)
 1836ab8:	00bffec4 	movi	r2,-5
 1836abc:	1884703a 	and	r2,r3,r2
 1836ac0:	1007883a 	mov	r3,r2
 1836ac4:	e0bffe17 	ldw	r2,-8(fp)
 1836ac8:	10c00885 	stb	r3,34(r2)
        pcb->cwnd = pcb->ssthresh;
 1836acc:	e0bffe17 	ldw	r2,-8(fp)
 1836ad0:	10c0148b 	ldhu	r3,82(r2)
 1836ad4:	e0bffe17 	ldw	r2,-8(fp)
 1836ad8:	10c0140d 	sth	r3,80(r2)
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 1836adc:	e0bffe17 	ldw	r2,-8(fp)
 1836ae0:	10001285 	stb	zero,74(r2)

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 1836ae4:	e0bffe17 	ldw	r2,-8(fp)
 1836ae8:	1080110b 	ldhu	r2,68(r2)
 1836aec:	10bfffcc 	andi	r2,r2,65535
 1836af0:	10a0001c 	xori	r2,r2,32768
 1836af4:	10a00004 	addi	r2,r2,-32768
 1836af8:	1005d0fa 	srai	r2,r2,3
 1836afc:	1007883a 	mov	r3,r2
 1836b00:	e0bffe17 	ldw	r2,-8(fp)
 1836b04:	1080118b 	ldhu	r2,70(r2)
 1836b08:	1885883a 	add	r2,r3,r2
 1836b0c:	1007883a 	mov	r3,r2
 1836b10:	e0bffe17 	ldw	r2,-8(fp)
 1836b14:	10c0120d 	sth	r3,72(r2)

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
 1836b18:	d0a81a17 	ldw	r2,-24472(gp)
 1836b1c:	1007883a 	mov	r3,r2
 1836b20:	e0bffe17 	ldw	r2,-8(fp)
 1836b24:	10801317 	ldw	r2,76(r2)
 1836b28:	1885c83a 	sub	r2,r3,r2
 1836b2c:	1007883a 	mov	r3,r2
 1836b30:	e0bffe17 	ldw	r2,-8(fp)
 1836b34:	10c01a0d 	sth	r3,104(r2)

      pcb->snd_buf += pcb->acked;
 1836b38:	e0bffe17 	ldw	r2,-8(fp)
 1836b3c:	10c01a8b 	ldhu	r3,106(r2)
 1836b40:	e0bffe17 	ldw	r2,-8(fp)
 1836b44:	10801a0b 	ldhu	r2,104(r2)
 1836b48:	1885883a 	add	r2,r3,r2
 1836b4c:	1007883a 	mov	r3,r2
 1836b50:	e0bffe17 	ldw	r2,-8(fp)
 1836b54:	10c01a8d 	sth	r3,106(r2)

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 1836b58:	e0bffe17 	ldw	r2,-8(fp)
 1836b5c:	100012c5 	stb	zero,75(r2)
      pcb->lastack = ackno;
 1836b60:	d0e81a17 	ldw	r3,-24472(gp)
 1836b64:	e0bffe17 	ldw	r2,-8(fp)
 1836b68:	10c01315 	stw	r3,76(r2)

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 1836b6c:	e0bffe17 	ldw	r2,-8(fp)
 1836b70:	10800617 	ldw	r2,24(r2)
 1836b74:	10800130 	cmpltui	r2,r2,4
 1836b78:	10006a1e 	bne	r2,zero,1836d24 <tcp_receive+0x588>
        if (pcb->cwnd < pcb->ssthresh) {
 1836b7c:	e0bffe17 	ldw	r2,-8(fp)
 1836b80:	10c0140b 	ldhu	r3,80(r2)
 1836b84:	e0bffe17 	ldw	r2,-8(fp)
 1836b88:	1080148b 	ldhu	r2,82(r2)
 1836b8c:	18ffffcc 	andi	r3,r3,65535
 1836b90:	10bfffcc 	andi	r2,r2,65535
 1836b94:	1880142e 	bgeu	r3,r2,1836be8 <tcp_receive+0x44c>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 1836b98:	e0bffe17 	ldw	r2,-8(fp)
 1836b9c:	10c0140b 	ldhu	r3,80(r2)
 1836ba0:	e0bffe17 	ldw	r2,-8(fp)
 1836ba4:	10800e8b 	ldhu	r2,58(r2)
 1836ba8:	1885883a 	add	r2,r3,r2
 1836bac:	1009883a 	mov	r4,r2
 1836bb0:	e0bffe17 	ldw	r2,-8(fp)
 1836bb4:	10c0140b 	ldhu	r3,80(r2)
 1836bb8:	20bfffcc 	andi	r2,r4,65535
 1836bbc:	18ffffcc 	andi	r3,r3,65535
 1836bc0:	1880582e 	bgeu	r3,r2,1836d24 <tcp_receive+0x588>
            pcb->cwnd += pcb->mss;
 1836bc4:	e0bffe17 	ldw	r2,-8(fp)
 1836bc8:	10c0140b 	ldhu	r3,80(r2)
 1836bcc:	e0bffe17 	ldw	r2,-8(fp)
 1836bd0:	10800e8b 	ldhu	r2,58(r2)
 1836bd4:	1885883a 	add	r2,r3,r2
 1836bd8:	1007883a 	mov	r3,r2
 1836bdc:	e0bffe17 	ldw	r2,-8(fp)
 1836be0:	10c0140d 	sth	r3,80(r2)
 1836be4:	00004f06 	br	1836d24 <tcp_receive+0x588>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 1836be8:	e0bffe17 	ldw	r2,-8(fp)
 1836bec:	1400140b 	ldhu	r16,80(r2)
 1836bf0:	e0bffe17 	ldw	r2,-8(fp)
 1836bf4:	10800e8b 	ldhu	r2,58(r2)
 1836bf8:	10ffffcc 	andi	r3,r2,65535
 1836bfc:	e0bffe17 	ldw	r2,-8(fp)
 1836c00:	10800e8b 	ldhu	r2,58(r2)
 1836c04:	10bfffcc 	andi	r2,r2,65535
 1836c08:	1887383a 	mul	r3,r3,r2
 1836c0c:	e0bffe17 	ldw	r2,-8(fp)
 1836c10:	1080140b 	ldhu	r2,80(r2)
 1836c14:	10bfffcc 	andi	r2,r2,65535
 1836c18:	100b883a 	mov	r5,r2
 1836c1c:	1809883a 	mov	r4,r3
 1836c20:	180abd80 	call	180abd8 <__divsi3>
 1836c24:	8085883a 	add	r2,r16,r2
 1836c28:	e0bffb0d 	sth	r2,-20(fp)
          if (new_cwnd > pcb->cwnd) {
 1836c2c:	e0bffe17 	ldw	r2,-8(fp)
 1836c30:	1080140b 	ldhu	r2,80(r2)
 1836c34:	10ffffcc 	andi	r3,r2,65535
 1836c38:	e0bffb0b 	ldhu	r2,-20(fp)
 1836c3c:	1880392e 	bgeu	r3,r2,1836d24 <tcp_receive+0x588>
            pcb->cwnd = new_cwnd;
 1836c40:	e0bffe17 	ldw	r2,-8(fp)
 1836c44:	e0fffb0b 	ldhu	r3,-20(fp)
 1836c48:	10c0140d 	sth	r3,80(r2)
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 1836c4c:	00003506 	br	1836d24 <tcp_receive+0x588>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 1836c50:	e0bffe17 	ldw	r2,-8(fp)
 1836c54:	10801d17 	ldw	r2,116(r2)
 1836c58:	e0bff415 	stw	r2,-48(fp)
        pcb->unacked = pcb->unacked->next;
 1836c5c:	e0bffe17 	ldw	r2,-8(fp)
 1836c60:	10801d17 	ldw	r2,116(r2)
 1836c64:	10c00017 	ldw	r3,0(r2)
 1836c68:	e0bffe17 	ldw	r2,-8(fp)
 1836c6c:	10c01d15 	stw	r3,116(r2)

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 1836c70:	e0bffe17 	ldw	r2,-8(fp)
 1836c74:	10801a0b 	ldhu	r2,104(r2)
 1836c78:	10bfffcc 	andi	r2,r2,65535
 1836c7c:	10001b26 	beq	r2,zero,1836cec <tcp_receive+0x550>
 1836c80:	e0bff417 	ldw	r2,-48(fp)
 1836c84:	10800417 	ldw	r2,16(r2)
 1836c88:	10c00303 	ldbu	r3,12(r2)
 1836c8c:	10800343 	ldbu	r2,13(r2)
 1836c90:	1004923a 	slli	r2,r2,8
 1836c94:	10c4b03a 	or	r2,r2,r3
 1836c98:	10bfffcc 	andi	r2,r2,65535
 1836c9c:	1004d23a 	srli	r2,r2,8
 1836ca0:	10ffffcc 	andi	r3,r2,65535
 1836ca4:	e0bff417 	ldw	r2,-48(fp)
 1836ca8:	10800417 	ldw	r2,16(r2)
 1836cac:	11000303 	ldbu	r4,12(r2)
 1836cb0:	10800343 	ldbu	r2,13(r2)
 1836cb4:	1004923a 	slli	r2,r2,8
 1836cb8:	1104b03a 	or	r2,r2,r4
 1836cbc:	10bfffcc 	andi	r2,r2,65535
 1836cc0:	1004923a 	slli	r2,r2,8
 1836cc4:	10bfffcc 	andi	r2,r2,65535
 1836cc8:	1884b03a 	or	r2,r3,r2
 1836ccc:	1080004c 	andi	r2,r2,1
 1836cd0:	10000626 	beq	r2,zero,1836cec <tcp_receive+0x550>
          pcb->acked--;
 1836cd4:	e0bffe17 	ldw	r2,-8(fp)
 1836cd8:	10801a0b 	ldhu	r2,104(r2)
 1836cdc:	10bfffc4 	addi	r2,r2,-1
 1836ce0:	1007883a 	mov	r3,r2
 1836ce4:	e0bffe17 	ldw	r2,-8(fp)
 1836ce8:	10c01a0d 	sth	r3,104(r2)
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
 1836cec:	e0bff417 	ldw	r2,-48(fp)
 1836cf0:	10800117 	ldw	r2,4(r2)
 1836cf4:	1009883a 	mov	r4,r2
 1836cf8:	181aa380 	call	181aa38 <pbuf_clen>
 1836cfc:	1009883a 	mov	r4,r2
 1836d00:	e0bffe17 	ldw	r2,-8(fp)
 1836d04:	10c01b0b 	ldhu	r3,108(r2)
 1836d08:	20803fcc 	andi	r2,r4,255
 1836d0c:	1885c83a 	sub	r2,r3,r2
 1836d10:	1007883a 	mov	r3,r2
 1836d14:	e0bffe17 	ldw	r2,-8(fp)
 1836d18:	10c01b0d 	sth	r3,108(r2)
        tcp_seg_free(next);
 1836d1c:	e13ff417 	ldw	r4,-48(fp)
 1836d20:	181d1ac0 	call	181d1ac <tcp_seg_free>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 1836d24:	e0bffe17 	ldw	r2,-8(fp)
 1836d28:	10801d17 	ldw	r2,116(r2)
 1836d2c:	10005e26 	beq	r2,zero,1836ea8 <tcp_receive+0x70c>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 1836d30:	e0bffe17 	ldw	r2,-8(fp)
 1836d34:	10801d17 	ldw	r2,116(r2)
 1836d38:	10800417 	ldw	r2,16(r2)
 1836d3c:	10c00103 	ldbu	r3,4(r2)
 1836d40:	11000143 	ldbu	r4,5(r2)
 1836d44:	2008923a 	slli	r4,r4,8
 1836d48:	20c6b03a 	or	r3,r4,r3
 1836d4c:	11000183 	ldbu	r4,6(r2)
 1836d50:	2008943a 	slli	r4,r4,16
 1836d54:	20c6b03a 	or	r3,r4,r3
 1836d58:	108001c3 	ldbu	r2,7(r2)
 1836d5c:	1004963a 	slli	r2,r2,24
 1836d60:	10c4b03a 	or	r2,r2,r3
 1836d64:	1006d63a 	srli	r3,r2,24
 1836d68:	e0bffe17 	ldw	r2,-8(fp)
 1836d6c:	10801d17 	ldw	r2,116(r2)
 1836d70:	10800417 	ldw	r2,16(r2)
 1836d74:	11000103 	ldbu	r4,4(r2)
 1836d78:	11400143 	ldbu	r5,5(r2)
 1836d7c:	280a923a 	slli	r5,r5,8
 1836d80:	2908b03a 	or	r4,r5,r4
 1836d84:	11400183 	ldbu	r5,6(r2)
 1836d88:	280a943a 	slli	r5,r5,16
 1836d8c:	2908b03a 	or	r4,r5,r4
 1836d90:	108001c3 	ldbu	r2,7(r2)
 1836d94:	1004963a 	slli	r2,r2,24
 1836d98:	1104b03a 	or	r2,r2,r4
 1836d9c:	1004d23a 	srli	r2,r2,8
 1836da0:	10bfc00c 	andi	r2,r2,65280
 1836da4:	1886b03a 	or	r3,r3,r2
 1836da8:	e0bffe17 	ldw	r2,-8(fp)
 1836dac:	10801d17 	ldw	r2,116(r2)
 1836db0:	10800417 	ldw	r2,16(r2)
 1836db4:	11000103 	ldbu	r4,4(r2)
 1836db8:	11400143 	ldbu	r5,5(r2)
 1836dbc:	280a923a 	slli	r5,r5,8
 1836dc0:	2908b03a 	or	r4,r5,r4
 1836dc4:	11400183 	ldbu	r5,6(r2)
 1836dc8:	280a943a 	slli	r5,r5,16
 1836dcc:	2908b03a 	or	r4,r5,r4
 1836dd0:	108001c3 	ldbu	r2,7(r2)
 1836dd4:	1004963a 	slli	r2,r2,24
 1836dd8:	1104b03a 	or	r2,r2,r4
 1836ddc:	10bfc00c 	andi	r2,r2,65280
 1836de0:	1004923a 	slli	r2,r2,8
 1836de4:	1886b03a 	or	r3,r3,r2
 1836de8:	e0bffe17 	ldw	r2,-8(fp)
 1836dec:	10801d17 	ldw	r2,116(r2)
 1836df0:	10800417 	ldw	r2,16(r2)
 1836df4:	11000103 	ldbu	r4,4(r2)
 1836df8:	11400143 	ldbu	r5,5(r2)
 1836dfc:	280a923a 	slli	r5,r5,8
 1836e00:	2908b03a 	or	r4,r5,r4
 1836e04:	11400183 	ldbu	r5,6(r2)
 1836e08:	280a943a 	slli	r5,r5,16
 1836e0c:	2908b03a 	or	r4,r5,r4
 1836e10:	108001c3 	ldbu	r2,7(r2)
 1836e14:	1004963a 	slli	r2,r2,24
 1836e18:	1104b03a 	or	r2,r2,r4
 1836e1c:	1004963a 	slli	r2,r2,24
 1836e20:	1886b03a 	or	r3,r3,r2
 1836e24:	e0bffe17 	ldw	r2,-8(fp)
 1836e28:	10801d17 	ldw	r2,116(r2)
 1836e2c:	1080020b 	ldhu	r2,8(r2)
 1836e30:	113fffcc 	andi	r4,r2,65535
 1836e34:	e0bffe17 	ldw	r2,-8(fp)
 1836e38:	10801d17 	ldw	r2,116(r2)
 1836e3c:	10800417 	ldw	r2,16(r2)
 1836e40:	11400303 	ldbu	r5,12(r2)
 1836e44:	10800343 	ldbu	r2,13(r2)
 1836e48:	1004923a 	slli	r2,r2,8
 1836e4c:	1144b03a 	or	r2,r2,r5
 1836e50:	10bfffcc 	andi	r2,r2,65535
 1836e54:	1004d23a 	srli	r2,r2,8
 1836e58:	117fffcc 	andi	r5,r2,65535
 1836e5c:	e0bffe17 	ldw	r2,-8(fp)
 1836e60:	10801d17 	ldw	r2,116(r2)
 1836e64:	10800417 	ldw	r2,16(r2)
 1836e68:	11800303 	ldbu	r6,12(r2)
 1836e6c:	10800343 	ldbu	r2,13(r2)
 1836e70:	1004923a 	slli	r2,r2,8
 1836e74:	1184b03a 	or	r2,r2,r6
 1836e78:	10bfffcc 	andi	r2,r2,65535
 1836e7c:	1004923a 	slli	r2,r2,8
 1836e80:	10bfffcc 	andi	r2,r2,65535
 1836e84:	2884b03a 	or	r2,r5,r2
 1836e88:	108000cc 	andi	r2,r2,3
 1836e8c:	1004c03a 	cmpne	r2,r2,zero
 1836e90:	10803fcc 	andi	r2,r2,255
 1836e94:	2085883a 	add	r2,r4,r2
 1836e98:	1887883a 	add	r3,r3,r2
 1836e9c:	d0a81a17 	ldw	r2,-24472(gp)
 1836ea0:	1885c83a 	sub	r2,r3,r2
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 1836ea4:	00bf6a0e 	bge	zero,r2,1836c50 <__alt_mem_mem_0+0xff816c50>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 1836ea8:	e0bffe17 	ldw	r2,-8(fp)
 1836eac:	10801d17 	ldw	r2,116(r2)
 1836eb0:	1000041e 	bne	r2,zero,1836ec4 <tcp_receive+0x728>
        pcb->rtime = -1;
 1836eb4:	e0bffe17 	ldw	r2,-8(fp)
 1836eb8:	00ffffc4 	movi	r3,-1
 1836ebc:	10c00e0d 	sth	r3,56(r2)
 1836ec0:	00000206 	br	1836ecc <tcp_receive+0x730>
      else
        pcb->rtime = 0;
 1836ec4:	e0bffe17 	ldw	r2,-8(fp)
 1836ec8:	10000e0d 	sth	zero,56(r2)

      pcb->polltmr = 0;
 1836ecc:	e0bffe17 	ldw	r2,-8(fp)
 1836ed0:	100008c5 	stb	zero,35(r2)
 1836ed4:	00000206 	br	1836ee0 <tcp_receive+0x744>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
 1836ed8:	e0bffe17 	ldw	r2,-8(fp)
 1836edc:	10001a0d 	sth	zero,104(r2)
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 1836ee0:	00003a06 	br	1836fcc <tcp_receive+0x830>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 1836ee4:	e0bffe17 	ldw	r2,-8(fp)
 1836ee8:	10801c17 	ldw	r2,112(r2)
 1836eec:	e0bff415 	stw	r2,-48(fp)
      pcb->unsent = pcb->unsent->next;
 1836ef0:	e0bffe17 	ldw	r2,-8(fp)
 1836ef4:	10801c17 	ldw	r2,112(r2)
 1836ef8:	10c00017 	ldw	r3,0(r2)
 1836efc:	e0bffe17 	ldw	r2,-8(fp)
 1836f00:	10c01c15 	stw	r3,112(r2)
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 1836f04:	e0bffe17 	ldw	r2,-8(fp)
 1836f08:	10801c17 	ldw	r2,112(r2)
 1836f0c:	1000021e 	bne	r2,zero,1836f18 <tcp_receive+0x77c>
        pcb->unsent_oversize = 0;
 1836f10:	e0bffe17 	ldw	r2,-8(fp)
 1836f14:	10001b8d 	sth	zero,110(r2)
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 1836f18:	e0bffe17 	ldw	r2,-8(fp)
 1836f1c:	10801a0b 	ldhu	r2,104(r2)
 1836f20:	10bfffcc 	andi	r2,r2,65535
 1836f24:	10001b26 	beq	r2,zero,1836f94 <tcp_receive+0x7f8>
 1836f28:	e0bff417 	ldw	r2,-48(fp)
 1836f2c:	10800417 	ldw	r2,16(r2)
 1836f30:	10c00303 	ldbu	r3,12(r2)
 1836f34:	10800343 	ldbu	r2,13(r2)
 1836f38:	1004923a 	slli	r2,r2,8
 1836f3c:	10c4b03a 	or	r2,r2,r3
 1836f40:	10bfffcc 	andi	r2,r2,65535
 1836f44:	1004d23a 	srli	r2,r2,8
 1836f48:	10ffffcc 	andi	r3,r2,65535
 1836f4c:	e0bff417 	ldw	r2,-48(fp)
 1836f50:	10800417 	ldw	r2,16(r2)
 1836f54:	11000303 	ldbu	r4,12(r2)
 1836f58:	10800343 	ldbu	r2,13(r2)
 1836f5c:	1004923a 	slli	r2,r2,8
 1836f60:	1104b03a 	or	r2,r2,r4
 1836f64:	10bfffcc 	andi	r2,r2,65535
 1836f68:	1004923a 	slli	r2,r2,8
 1836f6c:	10bfffcc 	andi	r2,r2,65535
 1836f70:	1884b03a 	or	r2,r3,r2
 1836f74:	1080004c 	andi	r2,r2,1
 1836f78:	10000626 	beq	r2,zero,1836f94 <tcp_receive+0x7f8>
        pcb->acked--;
 1836f7c:	e0bffe17 	ldw	r2,-8(fp)
 1836f80:	10801a0b 	ldhu	r2,104(r2)
 1836f84:	10bfffc4 	addi	r2,r2,-1
 1836f88:	1007883a 	mov	r3,r2
 1836f8c:	e0bffe17 	ldw	r2,-8(fp)
 1836f90:	10c01a0d 	sth	r3,104(r2)
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
 1836f94:	e0bff417 	ldw	r2,-48(fp)
 1836f98:	10800117 	ldw	r2,4(r2)
 1836f9c:	1009883a 	mov	r4,r2
 1836fa0:	181aa380 	call	181aa38 <pbuf_clen>
 1836fa4:	1009883a 	mov	r4,r2
 1836fa8:	e0bffe17 	ldw	r2,-8(fp)
 1836fac:	10c01b0b 	ldhu	r3,108(r2)
 1836fb0:	20803fcc 	andi	r2,r4,255
 1836fb4:	1885c83a 	sub	r2,r3,r2
 1836fb8:	1007883a 	mov	r3,r2
 1836fbc:	e0bffe17 	ldw	r2,-8(fp)
 1836fc0:	10c01b0d 	sth	r3,108(r2)
      tcp_seg_free(next);
 1836fc4:	e13ff417 	ldw	r4,-48(fp)
 1836fc8:	181d1ac0 	call	181d1ac <tcp_seg_free>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 1836fcc:	e0bffe17 	ldw	r2,-8(fp)
 1836fd0:	10801c17 	ldw	r2,112(r2)
 1836fd4:	10006326 	beq	r2,zero,1837164 <tcp_receive+0x9c8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 1836fd8:	d0e81a17 	ldw	r3,-24472(gp)
 1836fdc:	e0bffe17 	ldw	r2,-8(fp)
 1836fe0:	10801c17 	ldw	r2,112(r2)
 1836fe4:	10800417 	ldw	r2,16(r2)
 1836fe8:	11000103 	ldbu	r4,4(r2)
 1836fec:	11400143 	ldbu	r5,5(r2)
 1836ff0:	280a923a 	slli	r5,r5,8
 1836ff4:	2908b03a 	or	r4,r5,r4
 1836ff8:	11400183 	ldbu	r5,6(r2)
 1836ffc:	280a943a 	slli	r5,r5,16
 1837000:	2908b03a 	or	r4,r5,r4
 1837004:	108001c3 	ldbu	r2,7(r2)
 1837008:	1004963a 	slli	r2,r2,24
 183700c:	1104b03a 	or	r2,r2,r4
 1837010:	1008d63a 	srli	r4,r2,24
 1837014:	e0bffe17 	ldw	r2,-8(fp)
 1837018:	10801c17 	ldw	r2,112(r2)
 183701c:	10800417 	ldw	r2,16(r2)
 1837020:	11400103 	ldbu	r5,4(r2)
 1837024:	11800143 	ldbu	r6,5(r2)
 1837028:	300c923a 	slli	r6,r6,8
 183702c:	314ab03a 	or	r5,r6,r5
 1837030:	11800183 	ldbu	r6,6(r2)
 1837034:	300c943a 	slli	r6,r6,16
 1837038:	314ab03a 	or	r5,r6,r5
 183703c:	108001c3 	ldbu	r2,7(r2)
 1837040:	1004963a 	slli	r2,r2,24
 1837044:	1144b03a 	or	r2,r2,r5
 1837048:	1004d23a 	srli	r2,r2,8
 183704c:	10bfc00c 	andi	r2,r2,65280
 1837050:	2088b03a 	or	r4,r4,r2
 1837054:	e0bffe17 	ldw	r2,-8(fp)
 1837058:	10801c17 	ldw	r2,112(r2)
 183705c:	10800417 	ldw	r2,16(r2)
 1837060:	11400103 	ldbu	r5,4(r2)
 1837064:	11800143 	ldbu	r6,5(r2)
 1837068:	300c923a 	slli	r6,r6,8
 183706c:	314ab03a 	or	r5,r6,r5
 1837070:	11800183 	ldbu	r6,6(r2)
 1837074:	300c943a 	slli	r6,r6,16
 1837078:	314ab03a 	or	r5,r6,r5
 183707c:	108001c3 	ldbu	r2,7(r2)
 1837080:	1004963a 	slli	r2,r2,24
 1837084:	1144b03a 	or	r2,r2,r5
 1837088:	10bfc00c 	andi	r2,r2,65280
 183708c:	1004923a 	slli	r2,r2,8
 1837090:	2088b03a 	or	r4,r4,r2
 1837094:	e0bffe17 	ldw	r2,-8(fp)
 1837098:	10801c17 	ldw	r2,112(r2)
 183709c:	10800417 	ldw	r2,16(r2)
 18370a0:	11400103 	ldbu	r5,4(r2)
 18370a4:	11800143 	ldbu	r6,5(r2)
 18370a8:	300c923a 	slli	r6,r6,8
 18370ac:	314ab03a 	or	r5,r6,r5
 18370b0:	11800183 	ldbu	r6,6(r2)
 18370b4:	300c943a 	slli	r6,r6,16
 18370b8:	314ab03a 	or	r5,r6,r5
 18370bc:	108001c3 	ldbu	r2,7(r2)
 18370c0:	1004963a 	slli	r2,r2,24
 18370c4:	1144b03a 	or	r2,r2,r5
 18370c8:	1004963a 	slli	r2,r2,24
 18370cc:	2088b03a 	or	r4,r4,r2
 18370d0:	e0bffe17 	ldw	r2,-8(fp)
 18370d4:	10801c17 	ldw	r2,112(r2)
 18370d8:	1080020b 	ldhu	r2,8(r2)
 18370dc:	117fffcc 	andi	r5,r2,65535
 18370e0:	e0bffe17 	ldw	r2,-8(fp)
 18370e4:	10801c17 	ldw	r2,112(r2)
 18370e8:	10800417 	ldw	r2,16(r2)
 18370ec:	11800303 	ldbu	r6,12(r2)
 18370f0:	10800343 	ldbu	r2,13(r2)
 18370f4:	1004923a 	slli	r2,r2,8
 18370f8:	1184b03a 	or	r2,r2,r6
 18370fc:	10bfffcc 	andi	r2,r2,65535
 1837100:	1004d23a 	srli	r2,r2,8
 1837104:	11bfffcc 	andi	r6,r2,65535
 1837108:	e0bffe17 	ldw	r2,-8(fp)
 183710c:	10801c17 	ldw	r2,112(r2)
 1837110:	10800417 	ldw	r2,16(r2)
 1837114:	11c00303 	ldbu	r7,12(r2)
 1837118:	10800343 	ldbu	r2,13(r2)
 183711c:	1004923a 	slli	r2,r2,8
 1837120:	11c4b03a 	or	r2,r2,r7
 1837124:	10bfffcc 	andi	r2,r2,65535
 1837128:	1004923a 	slli	r2,r2,8
 183712c:	10bfffcc 	andi	r2,r2,65535
 1837130:	3084b03a 	or	r2,r6,r2
 1837134:	108000cc 	andi	r2,r2,3
 1837138:	1004c03a 	cmpne	r2,r2,zero
 183713c:	10803fcc 	andi	r2,r2,255
 1837140:	2885883a 	add	r2,r5,r2
 1837144:	2085883a 	add	r2,r4,r2
 1837148:	1885c83a 	sub	r2,r3,r2
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 183714c:	10000516 	blt	r2,zero,1837164 <tcp_receive+0x9c8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 1837150:	d0e81a17 	ldw	r3,-24472(gp)
 1837154:	e0bffe17 	ldw	r2,-8(fp)
 1837158:	10801517 	ldw	r2,84(r2)
 183715c:	1885c83a 	sub	r2,r3,r2
 1837160:	00bf600e 	bge	zero,r2,1836ee4 <__alt_mem_mem_0+0xff816ee4>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 1837164:	e0bffe17 	ldw	r2,-8(fp)
 1837168:	10800f17 	ldw	r2,60(r2)
 183716c:	10004126 	beq	r2,zero,1837274 <tcp_receive+0xad8>
 1837170:	e0bffe17 	ldw	r2,-8(fp)
 1837174:	10c01017 	ldw	r3,64(r2)
 1837178:	d0a81a17 	ldw	r2,-24472(gp)
 183717c:	1885c83a 	sub	r2,r3,r2
 1837180:	10003c0e 	bge	r2,zero,1837274 <tcp_receive+0xad8>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 1837184:	d0a7f817 	ldw	r2,-24608(gp)
 1837188:	1007883a 	mov	r3,r2
 183718c:	e0bffe17 	ldw	r2,-8(fp)
 1837190:	10800f17 	ldw	r2,60(r2)
 1837194:	1885c83a 	sub	r2,r3,r2
 1837198:	e0bff80d 	sth	r2,-32(fp)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 183719c:	e0bff80b 	ldhu	r2,-32(fp)
 18371a0:	e0fffe17 	ldw	r3,-8(fp)
 18371a4:	18c0110b 	ldhu	r3,68(r3)
 18371a8:	18ffffcc 	andi	r3,r3,65535
 18371ac:	18e0001c 	xori	r3,r3,32768
 18371b0:	18e00004 	addi	r3,r3,-32768
 18371b4:	1807d0fa 	srai	r3,r3,3
 18371b8:	10c5c83a 	sub	r2,r2,r3
 18371bc:	e0bff80d 	sth	r2,-32(fp)
      pcb->sa += m;
 18371c0:	e0bffe17 	ldw	r2,-8(fp)
 18371c4:	1080110b 	ldhu	r2,68(r2)
 18371c8:	1007883a 	mov	r3,r2
 18371cc:	e0bff80b 	ldhu	r2,-32(fp)
 18371d0:	1885883a 	add	r2,r3,r2
 18371d4:	1007883a 	mov	r3,r2
 18371d8:	e0bffe17 	ldw	r2,-8(fp)
 18371dc:	10c0110d 	sth	r3,68(r2)
      if (m < 0) {
 18371e0:	e0bff80f 	ldh	r2,-32(fp)
 18371e4:	1000030e 	bge	r2,zero,18371f4 <tcp_receive+0xa58>
        m = -m;
 18371e8:	e0bff80b 	ldhu	r2,-32(fp)
 18371ec:	0085c83a 	sub	r2,zero,r2
 18371f0:	e0bff80d 	sth	r2,-32(fp)
      }
      m = m - (pcb->sv >> 2);
 18371f4:	e0bff80b 	ldhu	r2,-32(fp)
 18371f8:	e0fffe17 	ldw	r3,-8(fp)
 18371fc:	18c0118b 	ldhu	r3,70(r3)
 1837200:	18ffffcc 	andi	r3,r3,65535
 1837204:	18e0001c 	xori	r3,r3,32768
 1837208:	18e00004 	addi	r3,r3,-32768
 183720c:	1807d0ba 	srai	r3,r3,2
 1837210:	10c5c83a 	sub	r2,r2,r3
 1837214:	e0bff80d 	sth	r2,-32(fp)
      pcb->sv += m;
 1837218:	e0bffe17 	ldw	r2,-8(fp)
 183721c:	1080118b 	ldhu	r2,70(r2)
 1837220:	1007883a 	mov	r3,r2
 1837224:	e0bff80b 	ldhu	r2,-32(fp)
 1837228:	1885883a 	add	r2,r3,r2
 183722c:	1007883a 	mov	r3,r2
 1837230:	e0bffe17 	ldw	r2,-8(fp)
 1837234:	10c0118d 	sth	r3,70(r2)
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 1837238:	e0bffe17 	ldw	r2,-8(fp)
 183723c:	1080110b 	ldhu	r2,68(r2)
 1837240:	10bfffcc 	andi	r2,r2,65535
 1837244:	10a0001c 	xori	r2,r2,32768
 1837248:	10a00004 	addi	r2,r2,-32768
 183724c:	1005d0fa 	srai	r2,r2,3
 1837250:	1007883a 	mov	r3,r2
 1837254:	e0bffe17 	ldw	r2,-8(fp)
 1837258:	1080118b 	ldhu	r2,70(r2)
 183725c:	1885883a 	add	r2,r3,r2
 1837260:	1007883a 	mov	r3,r2
 1837264:	e0bffe17 	ldw	r2,-8(fp)
 1837268:	10c0120d 	sth	r3,72(r2)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
 183726c:	e0bffe17 	ldw	r2,-8(fp)
 1837270:	10000f15 	stw	zero,60(r2)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 1837274:	d0a81b8b 	ldhu	r2,-24466(gp)
 1837278:	10bfffcc 	andi	r2,r2,65535
 183727c:	10052726 	beq	r2,zero,183871c <tcp_receive+0x1f80>
 1837280:	e0bffe17 	ldw	r2,-8(fp)
 1837284:	10800617 	ldw	r2,24(r2)
 1837288:	108001e8 	cmpgeui	r2,r2,7
 183728c:	1005231e 	bne	r2,zero,183871c <tcp_receive+0x1f80>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
 1837290:	e0bffe17 	ldw	r2,-8(fp)
 1837294:	10c00b17 	ldw	r3,44(r2)
 1837298:	d0a81917 	ldw	r2,-24476(gp)
 183729c:	1885c83a 	sub	r2,r3,r2
 18372a0:	10bfffc4 	addi	r2,r2,-1
 18372a4:	10007b16 	blt	r2,zero,1837494 <tcp_receive+0xcf8>
 18372a8:	e0bffe17 	ldw	r2,-8(fp)
 18372ac:	10c00b17 	ldw	r3,44(r2)
 18372b0:	d0a81b8b 	ldhu	r2,-24466(gp)
 18372b4:	113fffcc 	andi	r4,r2,65535
 18372b8:	d0a81917 	ldw	r2,-24476(gp)
 18372bc:	2085883a 	add	r2,r4,r2
 18372c0:	1885c83a 	sub	r2,r3,r2
 18372c4:	10800044 	addi	r2,r2,1
 18372c8:	00807216 	blt	zero,r2,1837494 <tcp_receive+0xcf8>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
 18372cc:	e0bffe17 	ldw	r2,-8(fp)
 18372d0:	10c00b17 	ldw	r3,44(r2)
 18372d4:	d0a81917 	ldw	r2,-24476(gp)
 18372d8:	1885c83a 	sub	r2,r3,r2
 18372dc:	e0bff715 	stw	r2,-36(fp)
      p = inseg.p;
 18372e0:	008061b4 	movhi	r2,390
 18372e4:	10874004 	addi	r2,r2,7424
 18372e8:	10800117 	ldw	r2,4(r2)
 18372ec:	e0bff615 	stw	r2,-40(fp)
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 18372f0:	008061b4 	movhi	r2,390
 18372f4:	10874004 	addi	r2,r2,7424
 18372f8:	10800117 	ldw	r2,4(r2)
 18372fc:	1080028b 	ldhu	r2,10(r2)
 1837300:	10ffffcc 	andi	r3,r2,65535
 1837304:	e0bff717 	ldw	r2,-36(fp)
 1837308:	1880240e 	bge	r3,r2,183739c <tcp_receive+0xc00>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 183730c:	008061b4 	movhi	r2,390
 1837310:	10874004 	addi	r2,r2,7424
 1837314:	10800117 	ldw	r2,4(r2)
 1837318:	1080020b 	ldhu	r2,8(r2)
 183731c:	e0fff717 	ldw	r3,-36(fp)
 1837320:	10c5c83a 	sub	r2,r2,r3
 1837324:	e0bffb8d 	sth	r2,-18(fp)
        while (p->len < off) {
 1837328:	00000e06 	br	1837364 <tcp_receive+0xbc8>
          off -= p->len;
 183732c:	e0bff617 	ldw	r2,-40(fp)
 1837330:	1080028b 	ldhu	r2,10(r2)
 1837334:	10bfffcc 	andi	r2,r2,65535
 1837338:	e0fff717 	ldw	r3,-36(fp)
 183733c:	1885c83a 	sub	r2,r3,r2
 1837340:	e0bff715 	stw	r2,-36(fp)
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 1837344:	e0bff617 	ldw	r2,-40(fp)
 1837348:	e0fffb8b 	ldhu	r3,-18(fp)
 183734c:	10c0020d 	sth	r3,8(r2)
          p->len = 0;
 1837350:	e0bff617 	ldw	r2,-40(fp)
 1837354:	1000028d 	sth	zero,10(r2)
          p = p->next;
 1837358:	e0bff617 	ldw	r2,-40(fp)
 183735c:	10800017 	ldw	r2,0(r2)
 1837360:	e0bff615 	stw	r2,-40(fp)
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
 1837364:	e0bff617 	ldw	r2,-40(fp)
 1837368:	1080028b 	ldhu	r2,10(r2)
 183736c:	10ffffcc 	andi	r3,r2,65535
 1837370:	e0bff717 	ldw	r2,-36(fp)
 1837374:	18bfed16 	blt	r3,r2,183732c <__alt_mem_mem_0+0xff81732c>
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
          p = p->next;
        }
        if(pbuf_header(p, (s16_t)-off)) {
 1837378:	e0bff717 	ldw	r2,-36(fp)
 183737c:	0085c83a 	sub	r2,zero,r2
 1837380:	10bfffcc 	andi	r2,r2,65535
 1837384:	10a0001c 	xori	r2,r2,32768
 1837388:	10a00004 	addi	r2,r2,-32768
 183738c:	100b883a 	mov	r5,r2
 1837390:	e13ff617 	ldw	r4,-40(fp)
 1837394:	181a7540 	call	181a754 <pbuf_header>
 1837398:	00000b06 	br	18373c8 <tcp_receive+0xc2c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
 183739c:	008061b4 	movhi	r2,390
 18373a0:	10874004 	addi	r2,r2,7424
 18373a4:	10800117 	ldw	r2,4(r2)
 18373a8:	e0fff717 	ldw	r3,-36(fp)
 18373ac:	00c7c83a 	sub	r3,zero,r3
 18373b0:	18ffffcc 	andi	r3,r3,65535
 18373b4:	18e0001c 	xori	r3,r3,32768
 18373b8:	18e00004 	addi	r3,r3,-32768
 18373bc:	180b883a 	mov	r5,r3
 18373c0:	1009883a 	mov	r4,r2
 18373c4:	181a7540 	call	181a754 <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 18373c8:	008061b4 	movhi	r2,390
 18373cc:	10874004 	addi	r2,r2,7424
 18373d0:	1080020b 	ldhu	r2,8(r2)
 18373d4:	d0e81917 	ldw	r3,-24476(gp)
 18373d8:	1809883a 	mov	r4,r3
 18373dc:	e0fffe17 	ldw	r3,-8(fp)
 18373e0:	18c00b17 	ldw	r3,44(r3)
 18373e4:	20c7c83a 	sub	r3,r4,r3
 18373e8:	10c5883a 	add	r2,r2,r3
 18373ec:	1007883a 	mov	r3,r2
 18373f0:	008061b4 	movhi	r2,390
 18373f4:	10874004 	addi	r2,r2,7424
 18373f8:	10c0020d 	sth	r3,8(r2)
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 18373fc:	008061b4 	movhi	r2,390
 1837400:	10874004 	addi	r2,r2,7424
 1837404:	10800417 	ldw	r2,16(r2)
 1837408:	e0fffe17 	ldw	r3,-8(fp)
 183740c:	18c00b17 	ldw	r3,44(r3)
 1837410:	d0e81915 	stw	r3,-24476(gp)
 1837414:	d0e81917 	ldw	r3,-24476(gp)
 1837418:	19803fcc 	andi	r6,r3,255
 183741c:	11000103 	ldbu	r4,4(r2)
 1837420:	2008703a 	and	r4,r4,zero
 1837424:	200b883a 	mov	r5,r4
 1837428:	3009883a 	mov	r4,r6
 183742c:	2908b03a 	or	r4,r5,r4
 1837430:	11000105 	stb	r4,4(r2)
 1837434:	1808d23a 	srli	r4,r3,8
 1837438:	21803fcc 	andi	r6,r4,255
 183743c:	11000143 	ldbu	r4,5(r2)
 1837440:	2008703a 	and	r4,r4,zero
 1837444:	200b883a 	mov	r5,r4
 1837448:	3009883a 	mov	r4,r6
 183744c:	2908b03a 	or	r4,r5,r4
 1837450:	11000145 	stb	r4,5(r2)
 1837454:	1808d43a 	srli	r4,r3,16
 1837458:	21803fcc 	andi	r6,r4,255
 183745c:	11000183 	ldbu	r4,6(r2)
 1837460:	2008703a 	and	r4,r4,zero
 1837464:	200b883a 	mov	r5,r4
 1837468:	3009883a 	mov	r4,r6
 183746c:	2908b03a 	or	r4,r5,r4
 1837470:	11000185 	stb	r4,6(r2)
 1837474:	180ad63a 	srli	r5,r3,24
 1837478:	10c001c3 	ldbu	r3,7(r2)
 183747c:	1806703a 	and	r3,r3,zero
 1837480:	1809883a 	mov	r4,r3
 1837484:	2807883a 	mov	r3,r5
 1837488:	20c6b03a 	or	r3,r4,r3
 183748c:	10c001c5 	stb	r3,7(r2)
 1837490:	00000b06 	br	18374c0 <tcp_receive+0xd24>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
 1837494:	d0e81917 	ldw	r3,-24476(gp)
 1837498:	e0bffe17 	ldw	r2,-8(fp)
 183749c:	10800b17 	ldw	r2,44(r2)
 18374a0:	1885c83a 	sub	r2,r3,r2
 18374a4:	1000060e 	bge	r2,zero,18374c0 <tcp_receive+0xd24>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 18374a8:	e0bffe17 	ldw	r2,-8(fp)
 18374ac:	10800883 	ldbu	r2,34(r2)
 18374b0:	10800094 	ori	r2,r2,2
 18374b4:	1007883a 	mov	r3,r2
 18374b8:	e0bffe17 	ldw	r2,-8(fp)
 18374bc:	10c00885 	stb	r3,34(r2)
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 18374c0:	d0e81917 	ldw	r3,-24476(gp)
 18374c4:	e0bffe17 	ldw	r2,-8(fp)
 18374c8:	10800b17 	ldw	r2,44(r2)
 18374cc:	1885c83a 	sub	r2,r3,r2
 18374d0:	10048e16 	blt	r2,zero,183870c <tcp_receive+0x1f70>
 18374d4:	d0e81917 	ldw	r3,-24476(gp)
 18374d8:	e0bffe17 	ldw	r2,-8(fp)
 18374dc:	11000b17 	ldw	r4,44(r2)
 18374e0:	e0bffe17 	ldw	r2,-8(fp)
 18374e4:	10800c0b 	ldhu	r2,48(r2)
 18374e8:	10bfffcc 	andi	r2,r2,65535
 18374ec:	2085883a 	add	r2,r4,r2
 18374f0:	1885c83a 	sub	r2,r3,r2
 18374f4:	10800044 	addi	r2,r2,1
 18374f8:	00848416 	blt	zero,r2,183870c <tcp_receive+0x1f70>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 18374fc:	e0bffe17 	ldw	r2,-8(fp)
 1837500:	10c00b17 	ldw	r3,44(r2)
 1837504:	d0a81917 	ldw	r2,-24476(gp)
 1837508:	1882cd1e 	bne	r3,r2,1838040 <tcp_receive+0x18a4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 183750c:	008061b4 	movhi	r2,390
 1837510:	10874004 	addi	r2,r2,7424
 1837514:	10c0020b 	ldhu	r3,8(r2)
 1837518:	008061b4 	movhi	r2,390
 183751c:	10874004 	addi	r2,r2,7424
 1837520:	10800417 	ldw	r2,16(r2)
 1837524:	11000303 	ldbu	r4,12(r2)
 1837528:	10800343 	ldbu	r2,13(r2)
 183752c:	1004923a 	slli	r2,r2,8
 1837530:	1104b03a 	or	r2,r2,r4
 1837534:	10bfffcc 	andi	r2,r2,65535
 1837538:	1004d23a 	srli	r2,r2,8
 183753c:	113fffcc 	andi	r4,r2,65535
 1837540:	008061b4 	movhi	r2,390
 1837544:	10874004 	addi	r2,r2,7424
 1837548:	10800417 	ldw	r2,16(r2)
 183754c:	11400303 	ldbu	r5,12(r2)
 1837550:	10800343 	ldbu	r2,13(r2)
 1837554:	1004923a 	slli	r2,r2,8
 1837558:	1144b03a 	or	r2,r2,r5
 183755c:	10bfffcc 	andi	r2,r2,65535
 1837560:	1004923a 	slli	r2,r2,8
 1837564:	10bfffcc 	andi	r2,r2,65535
 1837568:	2084b03a 	or	r2,r4,r2
 183756c:	108000cc 	andi	r2,r2,3
 1837570:	1004c03a 	cmpne	r2,r2,zero
 1837574:	10803fcc 	andi	r2,r2,255
 1837578:	1885883a 	add	r2,r3,r2
 183757c:	d0a81b8d 	sth	r2,-24466(gp)

        if (tcplen > pcb->rcv_wnd) {
 1837580:	e0bffe17 	ldw	r2,-8(fp)
 1837584:	10c00c0b 	ldhu	r3,48(r2)
 1837588:	d0a81b8b 	ldhu	r2,-24466(gp)
 183758c:	18ffffcc 	andi	r3,r3,65535
 1837590:	10bfffcc 	andi	r2,r2,65535
 1837594:	1880992e 	bgeu	r3,r2,18377fc <tcp_receive+0x1060>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 1837598:	008061b4 	movhi	r2,390
 183759c:	10874004 	addi	r2,r2,7424
 18375a0:	10800417 	ldw	r2,16(r2)
 18375a4:	10c00303 	ldbu	r3,12(r2)
 18375a8:	10800343 	ldbu	r2,13(r2)
 18375ac:	1004923a 	slli	r2,r2,8
 18375b0:	10c4b03a 	or	r2,r2,r3
 18375b4:	10bfffcc 	andi	r2,r2,65535
 18375b8:	1004d23a 	srli	r2,r2,8
 18375bc:	10ffffcc 	andi	r3,r2,65535
 18375c0:	008061b4 	movhi	r2,390
 18375c4:	10874004 	addi	r2,r2,7424
 18375c8:	10800417 	ldw	r2,16(r2)
 18375cc:	11000303 	ldbu	r4,12(r2)
 18375d0:	10800343 	ldbu	r2,13(r2)
 18375d4:	1004923a 	slli	r2,r2,8
 18375d8:	1104b03a 	or	r2,r2,r4
 18375dc:	10bfffcc 	andi	r2,r2,65535
 18375e0:	1004923a 	slli	r2,r2,8
 18375e4:	10bfffcc 	andi	r2,r2,65535
 18375e8:	1884b03a 	or	r2,r3,r2
 18375ec:	1080004c 	andi	r2,r2,1
 18375f0:	10003726 	beq	r2,zero,18376d0 <tcp_receive+0xf34>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
 18375f4:	008061b4 	movhi	r2,390
 18375f8:	10874004 	addi	r2,r2,7424
 18375fc:	10800417 	ldw	r2,16(r2)
 1837600:	00c061b4 	movhi	r3,390
 1837604:	18c74004 	addi	r3,r3,7424
 1837608:	18c00417 	ldw	r3,16(r3)
 183760c:	19000303 	ldbu	r4,12(r3)
 1837610:	18c00343 	ldbu	r3,13(r3)
 1837614:	1806923a 	slli	r3,r3,8
 1837618:	1906b03a 	or	r3,r3,r4
 183761c:	1809883a 	mov	r4,r3
 1837620:	00f03fc4 	movi	r3,-16129
 1837624:	20c6703a 	and	r3,r4,r3
 1837628:	180b883a 	mov	r5,r3
 183762c:	00c061b4 	movhi	r3,390
 1837630:	18c74004 	addi	r3,r3,7424
 1837634:	18c00417 	ldw	r3,16(r3)
 1837638:	19000303 	ldbu	r4,12(r3)
 183763c:	18c00343 	ldbu	r3,13(r3)
 1837640:	1806923a 	slli	r3,r3,8
 1837644:	1906b03a 	or	r3,r3,r4
 1837648:	18ffffcc 	andi	r3,r3,65535
 183764c:	1806d23a 	srli	r3,r3,8
 1837650:	180d883a 	mov	r6,r3
 1837654:	00c061b4 	movhi	r3,390
 1837658:	18c74004 	addi	r3,r3,7424
 183765c:	18c00417 	ldw	r3,16(r3)
 1837660:	19000303 	ldbu	r4,12(r3)
 1837664:	18c00343 	ldbu	r3,13(r3)
 1837668:	1806923a 	slli	r3,r3,8
 183766c:	1906b03a 	or	r3,r3,r4
 1837670:	18ffffcc 	andi	r3,r3,65535
 1837674:	1806923a 	slli	r3,r3,8
 1837678:	30c6b03a 	or	r3,r6,r3
 183767c:	18c00f8c 	andi	r3,r3,62
 1837680:	1806923a 	slli	r3,r3,8
 1837684:	28c6b03a 	or	r3,r5,r3
 1837688:	180d883a 	mov	r6,r3
 183768c:	30ffffcc 	andi	r3,r6,65535
 1837690:	19403fcc 	andi	r5,r3,255
 1837694:	10c00303 	ldbu	r3,12(r2)
 1837698:	1806703a 	and	r3,r3,zero
 183769c:	1809883a 	mov	r4,r3
 18376a0:	2807883a 	mov	r3,r5
 18376a4:	20c6b03a 	or	r3,r4,r3
 18376a8:	10c00305 	stb	r3,12(r2)
 18376ac:	30ffffcc 	andi	r3,r6,65535
 18376b0:	1806d23a 	srli	r3,r3,8
 18376b4:	197fffcc 	andi	r5,r3,65535
 18376b8:	10c00343 	ldbu	r3,13(r2)
 18376bc:	1806703a 	and	r3,r3,zero
 18376c0:	1809883a 	mov	r4,r3
 18376c4:	2807883a 	mov	r3,r5
 18376c8:	20c6b03a 	or	r3,r4,r3
 18376cc:	10c00345 	stb	r3,13(r2)
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
 18376d0:	e0bffe17 	ldw	r2,-8(fp)
 18376d4:	10c00c0b 	ldhu	r3,48(r2)
 18376d8:	008061b4 	movhi	r2,390
 18376dc:	10874004 	addi	r2,r2,7424
 18376e0:	10c0020d 	sth	r3,8(r2)
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 18376e4:	008061b4 	movhi	r2,390
 18376e8:	10874004 	addi	r2,r2,7424
 18376ec:	10800417 	ldw	r2,16(r2)
 18376f0:	10c00303 	ldbu	r3,12(r2)
 18376f4:	10800343 	ldbu	r2,13(r2)
 18376f8:	1004923a 	slli	r2,r2,8
 18376fc:	10c4b03a 	or	r2,r2,r3
 1837700:	10bfffcc 	andi	r2,r2,65535
 1837704:	1004d23a 	srli	r2,r2,8
 1837708:	10ffffcc 	andi	r3,r2,65535
 183770c:	008061b4 	movhi	r2,390
 1837710:	10874004 	addi	r2,r2,7424
 1837714:	10800417 	ldw	r2,16(r2)
 1837718:	11000303 	ldbu	r4,12(r2)
 183771c:	10800343 	ldbu	r2,13(r2)
 1837720:	1004923a 	slli	r2,r2,8
 1837724:	1104b03a 	or	r2,r2,r4
 1837728:	10bfffcc 	andi	r2,r2,65535
 183772c:	1004923a 	slli	r2,r2,8
 1837730:	10bfffcc 	andi	r2,r2,65535
 1837734:	1884b03a 	or	r2,r3,r2
 1837738:	1080008c 	andi	r2,r2,2
 183773c:	10000826 	beq	r2,zero,1837760 <tcp_receive+0xfc4>
            inseg.len -= 1;
 1837740:	008061b4 	movhi	r2,390
 1837744:	10874004 	addi	r2,r2,7424
 1837748:	1080020b 	ldhu	r2,8(r2)
 183774c:	10bfffc4 	addi	r2,r2,-1
 1837750:	1007883a 	mov	r3,r2
 1837754:	008061b4 	movhi	r2,390
 1837758:	10874004 	addi	r2,r2,7424
 183775c:	10c0020d 	sth	r3,8(r2)
          }
          pbuf_realloc(inseg.p, inseg.len);
 1837760:	008061b4 	movhi	r2,390
 1837764:	10874004 	addi	r2,r2,7424
 1837768:	10c00117 	ldw	r3,4(r2)
 183776c:	008061b4 	movhi	r2,390
 1837770:	10874004 	addi	r2,r2,7424
 1837774:	1080020b 	ldhu	r2,8(r2)
 1837778:	10bfffcc 	andi	r2,r2,65535
 183777c:	100b883a 	mov	r5,r2
 1837780:	1809883a 	mov	r4,r3
 1837784:	181a5f40 	call	181a5f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 1837788:	008061b4 	movhi	r2,390
 183778c:	10874004 	addi	r2,r2,7424
 1837790:	10c0020b 	ldhu	r3,8(r2)
 1837794:	008061b4 	movhi	r2,390
 1837798:	10874004 	addi	r2,r2,7424
 183779c:	10800417 	ldw	r2,16(r2)
 18377a0:	11000303 	ldbu	r4,12(r2)
 18377a4:	10800343 	ldbu	r2,13(r2)
 18377a8:	1004923a 	slli	r2,r2,8
 18377ac:	1104b03a 	or	r2,r2,r4
 18377b0:	10bfffcc 	andi	r2,r2,65535
 18377b4:	1004d23a 	srli	r2,r2,8
 18377b8:	113fffcc 	andi	r4,r2,65535
 18377bc:	008061b4 	movhi	r2,390
 18377c0:	10874004 	addi	r2,r2,7424
 18377c4:	10800417 	ldw	r2,16(r2)
 18377c8:	11400303 	ldbu	r5,12(r2)
 18377cc:	10800343 	ldbu	r2,13(r2)
 18377d0:	1004923a 	slli	r2,r2,8
 18377d4:	1144b03a 	or	r2,r2,r5
 18377d8:	10bfffcc 	andi	r2,r2,65535
 18377dc:	1004923a 	slli	r2,r2,8
 18377e0:	10bfffcc 	andi	r2,r2,65535
 18377e4:	2084b03a 	or	r2,r4,r2
 18377e8:	108000cc 	andi	r2,r2,3
 18377ec:	1004c03a 	cmpne	r2,r2,zero
 18377f0:	10803fcc 	andi	r2,r2,255
 18377f4:	1885883a 	add	r2,r3,r2
 18377f8:	d0a81b8d 	sth	r2,-24466(gp)
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 18377fc:	e0bffe17 	ldw	r2,-8(fp)
 1837800:	10801e17 	ldw	r2,120(r2)
 1837804:	10012026 	beq	r2,zero,1837c88 <tcp_receive+0x14ec>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 1837808:	008061b4 	movhi	r2,390
 183780c:	10874004 	addi	r2,r2,7424
 1837810:	10800417 	ldw	r2,16(r2)
 1837814:	10c00303 	ldbu	r3,12(r2)
 1837818:	10800343 	ldbu	r2,13(r2)
 183781c:	1004923a 	slli	r2,r2,8
 1837820:	10c4b03a 	or	r2,r2,r3
 1837824:	10bfffcc 	andi	r2,r2,65535
 1837828:	1004d23a 	srli	r2,r2,8
 183782c:	10ffffcc 	andi	r3,r2,65535
 1837830:	008061b4 	movhi	r2,390
 1837834:	10874004 	addi	r2,r2,7424
 1837838:	10800417 	ldw	r2,16(r2)
 183783c:	11000303 	ldbu	r4,12(r2)
 1837840:	10800343 	ldbu	r2,13(r2)
 1837844:	1004923a 	slli	r2,r2,8
 1837848:	1104b03a 	or	r2,r2,r4
 183784c:	10bfffcc 	andi	r2,r2,65535
 1837850:	1004923a 	slli	r2,r2,8
 1837854:	10bfffcc 	andi	r2,r2,65535
 1837858:	1884b03a 	or	r2,r3,r2
 183785c:	1080004c 	andi	r2,r2,1
 1837860:	10000f26 	beq	r2,zero,18378a0 <tcp_receive+0x1104>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 1837864:	00000a06 	br	1837890 <tcp_receive+0x10f4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 1837868:	e0bffe17 	ldw	r2,-8(fp)
 183786c:	10801e17 	ldw	r2,120(r2)
 1837870:	e0bffc15 	stw	r2,-16(fp)
              pcb->ooseq = pcb->ooseq->next;
 1837874:	e0bffe17 	ldw	r2,-8(fp)
 1837878:	10801e17 	ldw	r2,120(r2)
 183787c:	10c00017 	ldw	r3,0(r2)
 1837880:	e0bffe17 	ldw	r2,-8(fp)
 1837884:	10c01e15 	stw	r3,120(r2)
              tcp_seg_free(old_ooseq);
 1837888:	e13ffc17 	ldw	r4,-16(fp)
 183788c:	181d1ac0 	call	181d1ac <tcp_seg_free>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 1837890:	e0bffe17 	ldw	r2,-8(fp)
 1837894:	10801e17 	ldw	r2,120(r2)
 1837898:	103ff31e 	bne	r2,zero,1837868 <__alt_mem_mem_0+0xff817868>
 183789c:	0000fa06 	br	1837c88 <tcp_receive+0x14ec>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 18378a0:	e0bffe17 	ldw	r2,-8(fp)
 18378a4:	10801e17 	ldw	r2,120(r2)
 18378a8:	e0bff415 	stw	r2,-48(fp)
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 18378ac:	00006d06 	br	1837a64 <tcp_receive+0x12c8>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 18378b0:	e0bff417 	ldw	r2,-48(fp)
 18378b4:	10800417 	ldw	r2,16(r2)
 18378b8:	10c00303 	ldbu	r3,12(r2)
 18378bc:	10800343 	ldbu	r2,13(r2)
 18378c0:	1004923a 	slli	r2,r2,8
 18378c4:	10c4b03a 	or	r2,r2,r3
 18378c8:	10bfffcc 	andi	r2,r2,65535
 18378cc:	1004d23a 	srli	r2,r2,8
 18378d0:	10ffffcc 	andi	r3,r2,65535
 18378d4:	e0bff417 	ldw	r2,-48(fp)
 18378d8:	10800417 	ldw	r2,16(r2)
 18378dc:	11000303 	ldbu	r4,12(r2)
 18378e0:	10800343 	ldbu	r2,13(r2)
 18378e4:	1004923a 	slli	r2,r2,8
 18378e8:	1104b03a 	or	r2,r2,r4
 18378ec:	10bfffcc 	andi	r2,r2,65535
 18378f0:	1004923a 	slli	r2,r2,8
 18378f4:	10bfffcc 	andi	r2,r2,65535
 18378f8:	1884b03a 	or	r2,r3,r2
 18378fc:	1080004c 	andi	r2,r2,1
 1837900:	10005126 	beq	r2,zero,1837a48 <tcp_receive+0x12ac>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 1837904:	008061b4 	movhi	r2,390
 1837908:	10874004 	addi	r2,r2,7424
 183790c:	10800417 	ldw	r2,16(r2)
 1837910:	10c00303 	ldbu	r3,12(r2)
 1837914:	10800343 	ldbu	r2,13(r2)
 1837918:	1004923a 	slli	r2,r2,8
 183791c:	10c4b03a 	or	r2,r2,r3
 1837920:	10bfffcc 	andi	r2,r2,65535
 1837924:	1004d23a 	srli	r2,r2,8
 1837928:	10ffffcc 	andi	r3,r2,65535
 183792c:	008061b4 	movhi	r2,390
 1837930:	10874004 	addi	r2,r2,7424
 1837934:	10800417 	ldw	r2,16(r2)
 1837938:	11000303 	ldbu	r4,12(r2)
 183793c:	10800343 	ldbu	r2,13(r2)
 1837940:	1004923a 	slli	r2,r2,8
 1837944:	1104b03a 	or	r2,r2,r4
 1837948:	10bfffcc 	andi	r2,r2,65535
 183794c:	1004923a 	slli	r2,r2,8
 1837950:	10bfffcc 	andi	r2,r2,65535
 1837954:	1884b03a 	or	r2,r3,r2
 1837958:	1080008c 	andi	r2,r2,2
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 183795c:	10003a1e 	bne	r2,zero,1837a48 <tcp_receive+0x12ac>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 1837960:	008061b4 	movhi	r2,390
 1837964:	10874004 	addi	r2,r2,7424
 1837968:	10800417 	ldw	r2,16(r2)
 183796c:	00c061b4 	movhi	r3,390
 1837970:	18c74004 	addi	r3,r3,7424
 1837974:	18c00417 	ldw	r3,16(r3)
 1837978:	19000303 	ldbu	r4,12(r3)
 183797c:	18c00343 	ldbu	r3,13(r3)
 1837980:	1806923a 	slli	r3,r3,8
 1837984:	1906b03a 	or	r3,r3,r4
 1837988:	18c04014 	ori	r3,r3,256
 183798c:	180d883a 	mov	r6,r3
 1837990:	30ffffcc 	andi	r3,r6,65535
 1837994:	19403fcc 	andi	r5,r3,255
 1837998:	10c00303 	ldbu	r3,12(r2)
 183799c:	1806703a 	and	r3,r3,zero
 18379a0:	1809883a 	mov	r4,r3
 18379a4:	2807883a 	mov	r3,r5
 18379a8:	20c6b03a 	or	r3,r4,r3
 18379ac:	10c00305 	stb	r3,12(r2)
 18379b0:	30ffffcc 	andi	r3,r6,65535
 18379b4:	1806d23a 	srli	r3,r3,8
 18379b8:	197fffcc 	andi	r5,r3,65535
 18379bc:	10c00343 	ldbu	r3,13(r2)
 18379c0:	1806703a 	and	r3,r3,zero
 18379c4:	1809883a 	mov	r4,r3
 18379c8:	2807883a 	mov	r3,r5
 18379cc:	20c6b03a 	or	r3,r4,r3
 18379d0:	10c00345 	stb	r3,13(r2)
                tcplen = TCP_TCPLEN(&inseg);
 18379d4:	008061b4 	movhi	r2,390
 18379d8:	10874004 	addi	r2,r2,7424
 18379dc:	10c0020b 	ldhu	r3,8(r2)
 18379e0:	008061b4 	movhi	r2,390
 18379e4:	10874004 	addi	r2,r2,7424
 18379e8:	10800417 	ldw	r2,16(r2)
 18379ec:	11000303 	ldbu	r4,12(r2)
 18379f0:	10800343 	ldbu	r2,13(r2)
 18379f4:	1004923a 	slli	r2,r2,8
 18379f8:	1104b03a 	or	r2,r2,r4
 18379fc:	10bfffcc 	andi	r2,r2,65535
 1837a00:	1004d23a 	srli	r2,r2,8
 1837a04:	113fffcc 	andi	r4,r2,65535
 1837a08:	008061b4 	movhi	r2,390
 1837a0c:	10874004 	addi	r2,r2,7424
 1837a10:	10800417 	ldw	r2,16(r2)
 1837a14:	11400303 	ldbu	r5,12(r2)
 1837a18:	10800343 	ldbu	r2,13(r2)
 1837a1c:	1004923a 	slli	r2,r2,8
 1837a20:	1144b03a 	or	r2,r2,r5
 1837a24:	10bfffcc 	andi	r2,r2,65535
 1837a28:	1004923a 	slli	r2,r2,8
 1837a2c:	10bfffcc 	andi	r2,r2,65535
 1837a30:	2084b03a 	or	r2,r4,r2
 1837a34:	108000cc 	andi	r2,r2,3
 1837a38:	1004c03a 	cmpne	r2,r2,zero
 1837a3c:	10803fcc 	andi	r2,r2,255
 1837a40:	1885883a 	add	r2,r3,r2
 1837a44:	d0a81b8d 	sth	r2,-24466(gp)
              }
              prev = next;
 1837a48:	e0bff417 	ldw	r2,-48(fp)
 1837a4c:	e0bff515 	stw	r2,-44(fp)
              next = next->next;
 1837a50:	e0bff417 	ldw	r2,-48(fp)
 1837a54:	10800017 	ldw	r2,0(r2)
 1837a58:	e0bff415 	stw	r2,-48(fp)
              tcp_seg_free(prev);
 1837a5c:	e13ff517 	ldw	r4,-44(fp)
 1837a60:	181d1ac0 	call	181d1ac <tcp_seg_free>
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 1837a64:	e0bff417 	ldw	r2,-48(fp)
 1837a68:	10001726 	beq	r2,zero,1837ac8 <tcp_receive+0x132c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 1837a6c:	d0a81b8b 	ldhu	r2,-24466(gp)
 1837a70:	10ffffcc 	andi	r3,r2,65535
 1837a74:	d0a81917 	ldw	r2,-24476(gp)
 1837a78:	1887883a 	add	r3,r3,r2
 1837a7c:	e0bff417 	ldw	r2,-48(fp)
 1837a80:	10800417 	ldw	r2,16(r2)
 1837a84:	11000103 	ldbu	r4,4(r2)
 1837a88:	11400143 	ldbu	r5,5(r2)
 1837a8c:	280a923a 	slli	r5,r5,8
 1837a90:	2908b03a 	or	r4,r5,r4
 1837a94:	11400183 	ldbu	r5,6(r2)
 1837a98:	280a943a 	slli	r5,r5,16
 1837a9c:	2908b03a 	or	r4,r5,r4
 1837aa0:	108001c3 	ldbu	r2,7(r2)
 1837aa4:	1004963a 	slli	r2,r2,24
 1837aa8:	1104b03a 	or	r2,r2,r4
 1837aac:	1009883a 	mov	r4,r2
 1837ab0:	e0bff417 	ldw	r2,-48(fp)
 1837ab4:	1080020b 	ldhu	r2,8(r2)
 1837ab8:	10bfffcc 	andi	r2,r2,65535
 1837abc:	2085883a 	add	r2,r4,r2
 1837ac0:	1885c83a 	sub	r2,r3,r2
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 1837ac4:	103f7a0e 	bge	r2,zero,18378b0 <__alt_mem_mem_0+0xff8178b0>
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 1837ac8:	e0bff417 	ldw	r2,-48(fp)
 1837acc:	10006b26 	beq	r2,zero,1837c7c <tcp_receive+0x14e0>
                TCP_SEQ_GT(seqno + tcplen,
 1837ad0:	d0a81b8b 	ldhu	r2,-24466(gp)
 1837ad4:	10ffffcc 	andi	r3,r2,65535
 1837ad8:	d0a81917 	ldw	r2,-24476(gp)
 1837adc:	1887883a 	add	r3,r3,r2
 1837ae0:	e0bff417 	ldw	r2,-48(fp)
 1837ae4:	10800417 	ldw	r2,16(r2)
 1837ae8:	11000103 	ldbu	r4,4(r2)
 1837aec:	11400143 	ldbu	r5,5(r2)
 1837af0:	280a923a 	slli	r5,r5,8
 1837af4:	2908b03a 	or	r4,r5,r4
 1837af8:	11400183 	ldbu	r5,6(r2)
 1837afc:	280a943a 	slli	r5,r5,16
 1837b00:	2908b03a 	or	r4,r5,r4
 1837b04:	108001c3 	ldbu	r2,7(r2)
 1837b08:	1004963a 	slli	r2,r2,24
 1837b0c:	1104b03a 	or	r2,r2,r4
 1837b10:	1885c83a 	sub	r2,r3,r2
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 1837b14:	0080590e 	bge	zero,r2,1837c7c <tcp_receive+0x14e0>
                TCP_SEQ_GT(seqno + tcplen,
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 1837b18:	e0bff417 	ldw	r2,-48(fp)
 1837b1c:	10800417 	ldw	r2,16(r2)
 1837b20:	10c00103 	ldbu	r3,4(r2)
 1837b24:	11000143 	ldbu	r4,5(r2)
 1837b28:	2008923a 	slli	r4,r4,8
 1837b2c:	20c6b03a 	or	r3,r4,r3
 1837b30:	11000183 	ldbu	r4,6(r2)
 1837b34:	2008943a 	slli	r4,r4,16
 1837b38:	20c6b03a 	or	r3,r4,r3
 1837b3c:	108001c3 	ldbu	r2,7(r2)
 1837b40:	1004963a 	slli	r2,r2,24
 1837b44:	10c4b03a 	or	r2,r2,r3
 1837b48:	1007883a 	mov	r3,r2
 1837b4c:	d0a81917 	ldw	r2,-24476(gp)
 1837b50:	1885c83a 	sub	r2,r3,r2
 1837b54:	1007883a 	mov	r3,r2
 1837b58:	008061b4 	movhi	r2,390
 1837b5c:	10874004 	addi	r2,r2,7424
 1837b60:	10c0020d 	sth	r3,8(r2)
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 1837b64:	008061b4 	movhi	r2,390
 1837b68:	10874004 	addi	r2,r2,7424
 1837b6c:	10800417 	ldw	r2,16(r2)
 1837b70:	10c00303 	ldbu	r3,12(r2)
 1837b74:	10800343 	ldbu	r2,13(r2)
 1837b78:	1004923a 	slli	r2,r2,8
 1837b7c:	10c4b03a 	or	r2,r2,r3
 1837b80:	10bfffcc 	andi	r2,r2,65535
 1837b84:	1004d23a 	srli	r2,r2,8
 1837b88:	10ffffcc 	andi	r3,r2,65535
 1837b8c:	008061b4 	movhi	r2,390
 1837b90:	10874004 	addi	r2,r2,7424
 1837b94:	10800417 	ldw	r2,16(r2)
 1837b98:	11000303 	ldbu	r4,12(r2)
 1837b9c:	10800343 	ldbu	r2,13(r2)
 1837ba0:	1004923a 	slli	r2,r2,8
 1837ba4:	1104b03a 	or	r2,r2,r4
 1837ba8:	10bfffcc 	andi	r2,r2,65535
 1837bac:	1004923a 	slli	r2,r2,8
 1837bb0:	10bfffcc 	andi	r2,r2,65535
 1837bb4:	1884b03a 	or	r2,r3,r2
 1837bb8:	1080008c 	andi	r2,r2,2
 1837bbc:	10000826 	beq	r2,zero,1837be0 <tcp_receive+0x1444>
                inseg.len -= 1;
 1837bc0:	008061b4 	movhi	r2,390
 1837bc4:	10874004 	addi	r2,r2,7424
 1837bc8:	1080020b 	ldhu	r2,8(r2)
 1837bcc:	10bfffc4 	addi	r2,r2,-1
 1837bd0:	1007883a 	mov	r3,r2
 1837bd4:	008061b4 	movhi	r2,390
 1837bd8:	10874004 	addi	r2,r2,7424
 1837bdc:	10c0020d 	sth	r3,8(r2)
              }
              pbuf_realloc(inseg.p, inseg.len);
 1837be0:	008061b4 	movhi	r2,390
 1837be4:	10874004 	addi	r2,r2,7424
 1837be8:	10c00117 	ldw	r3,4(r2)
 1837bec:	008061b4 	movhi	r2,390
 1837bf0:	10874004 	addi	r2,r2,7424
 1837bf4:	1080020b 	ldhu	r2,8(r2)
 1837bf8:	10bfffcc 	andi	r2,r2,65535
 1837bfc:	100b883a 	mov	r5,r2
 1837c00:	1809883a 	mov	r4,r3
 1837c04:	181a5f40 	call	181a5f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 1837c08:	008061b4 	movhi	r2,390
 1837c0c:	10874004 	addi	r2,r2,7424
 1837c10:	10c0020b 	ldhu	r3,8(r2)
 1837c14:	008061b4 	movhi	r2,390
 1837c18:	10874004 	addi	r2,r2,7424
 1837c1c:	10800417 	ldw	r2,16(r2)
 1837c20:	11000303 	ldbu	r4,12(r2)
 1837c24:	10800343 	ldbu	r2,13(r2)
 1837c28:	1004923a 	slli	r2,r2,8
 1837c2c:	1104b03a 	or	r2,r2,r4
 1837c30:	10bfffcc 	andi	r2,r2,65535
 1837c34:	1004d23a 	srli	r2,r2,8
 1837c38:	113fffcc 	andi	r4,r2,65535
 1837c3c:	008061b4 	movhi	r2,390
 1837c40:	10874004 	addi	r2,r2,7424
 1837c44:	10800417 	ldw	r2,16(r2)
 1837c48:	11400303 	ldbu	r5,12(r2)
 1837c4c:	10800343 	ldbu	r2,13(r2)
 1837c50:	1004923a 	slli	r2,r2,8
 1837c54:	1144b03a 	or	r2,r2,r5
 1837c58:	10bfffcc 	andi	r2,r2,65535
 1837c5c:	1004923a 	slli	r2,r2,8
 1837c60:	10bfffcc 	andi	r2,r2,65535
 1837c64:	2084b03a 	or	r2,r4,r2
 1837c68:	108000cc 	andi	r2,r2,3
 1837c6c:	1004c03a 	cmpne	r2,r2,zero
 1837c70:	10803fcc 	andi	r2,r2,255
 1837c74:	1885883a 	add	r2,r3,r2
 1837c78:	d0a81b8d 	sth	r2,-24466(gp)
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 1837c7c:	e0bffe17 	ldw	r2,-8(fp)
 1837c80:	e0fff417 	ldw	r3,-48(fp)
 1837c84:	10c01e15 	stw	r3,120(r2)
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 1837c88:	d0a81b8b 	ldhu	r2,-24466(gp)
 1837c8c:	10ffffcc 	andi	r3,r2,65535
 1837c90:	d0a81917 	ldw	r2,-24476(gp)
 1837c94:	1887883a 	add	r3,r3,r2
 1837c98:	e0bffe17 	ldw	r2,-8(fp)
 1837c9c:	10c00b15 	stw	r3,44(r2)

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 1837ca0:	e0bffe17 	ldw	r2,-8(fp)
 1837ca4:	10c00c0b 	ldhu	r3,48(r2)
 1837ca8:	d0a81b8b 	ldhu	r2,-24466(gp)
 1837cac:	1885c83a 	sub	r2,r3,r2
 1837cb0:	1007883a 	mov	r3,r2
 1837cb4:	e0bffe17 	ldw	r2,-8(fp)
 1837cb8:	10c00c0d 	sth	r3,48(r2)

        tcp_update_rcv_ann_wnd(pcb);
 1837cbc:	e13ffe17 	ldw	r4,-8(fp)
 1837cc0:	181c1d00 	call	181c1d0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 1837cc4:	008061b4 	movhi	r2,390
 1837cc8:	10874004 	addi	r2,r2,7424
 1837ccc:	10800117 	ldw	r2,4(r2)
 1837cd0:	1080020b 	ldhu	r2,8(r2)
 1837cd4:	10bfffcc 	andi	r2,r2,65535
 1837cd8:	10000726 	beq	r2,zero,1837cf8 <tcp_receive+0x155c>
          recv_data = inseg.p;
 1837cdc:	008061b4 	movhi	r2,390
 1837ce0:	10874004 	addi	r2,r2,7424
 1837ce4:	10800117 	ldw	r2,4(r2)
 1837ce8:	d0a81d15 	stw	r2,-24460(gp)
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 1837cec:	008061b4 	movhi	r2,390
 1837cf0:	10874004 	addi	r2,r2,7424
 1837cf4:	10000115 	stw	zero,4(r2)
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 1837cf8:	008061b4 	movhi	r2,390
 1837cfc:	10874004 	addi	r2,r2,7424
 1837d00:	10800417 	ldw	r2,16(r2)
 1837d04:	10c00303 	ldbu	r3,12(r2)
 1837d08:	10800343 	ldbu	r2,13(r2)
 1837d0c:	1004923a 	slli	r2,r2,8
 1837d10:	10c4b03a 	or	r2,r2,r3
 1837d14:	10bfffcc 	andi	r2,r2,65535
 1837d18:	1004d23a 	srli	r2,r2,8
 1837d1c:	10ffffcc 	andi	r3,r2,65535
 1837d20:	008061b4 	movhi	r2,390
 1837d24:	10874004 	addi	r2,r2,7424
 1837d28:	10800417 	ldw	r2,16(r2)
 1837d2c:	11000303 	ldbu	r4,12(r2)
 1837d30:	10800343 	ldbu	r2,13(r2)
 1837d34:	1004923a 	slli	r2,r2,8
 1837d38:	1104b03a 	or	r2,r2,r4
 1837d3c:	10bfffcc 	andi	r2,r2,65535
 1837d40:	1004923a 	slli	r2,r2,8
 1837d44:	10bfffcc 	andi	r2,r2,65535
 1837d48:	1884b03a 	or	r2,r3,r2
 1837d4c:	1080004c 	andi	r2,r2,1
 1837d50:	10008d26 	beq	r2,zero,1837f88 <tcp_receive+0x17ec>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 1837d54:	d0a81c03 	ldbu	r2,-24464(gp)
 1837d58:	10800814 	ori	r2,r2,32
 1837d5c:	d0a81c05 	stb	r2,-24464(gp)
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 1837d60:	00008906 	br	1837f88 <tcp_receive+0x17ec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 1837d64:	e0bffe17 	ldw	r2,-8(fp)
 1837d68:	10801e17 	ldw	r2,120(r2)
 1837d6c:	e0bffd15 	stw	r2,-12(fp)
          seqno = pcb->ooseq->tcphdr->seqno;
 1837d70:	e0bffe17 	ldw	r2,-8(fp)
 1837d74:	10801e17 	ldw	r2,120(r2)
 1837d78:	10800417 	ldw	r2,16(r2)
 1837d7c:	10c00103 	ldbu	r3,4(r2)
 1837d80:	11000143 	ldbu	r4,5(r2)
 1837d84:	2008923a 	slli	r4,r4,8
 1837d88:	20c6b03a 	or	r3,r4,r3
 1837d8c:	11000183 	ldbu	r4,6(r2)
 1837d90:	2008943a 	slli	r4,r4,16
 1837d94:	20c6b03a 	or	r3,r4,r3
 1837d98:	108001c3 	ldbu	r2,7(r2)
 1837d9c:	1004963a 	slli	r2,r2,24
 1837da0:	10c4b03a 	or	r2,r2,r3
 1837da4:	d0a81915 	stw	r2,-24476(gp)

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 1837da8:	e0bffe17 	ldw	r2,-8(fp)
 1837dac:	10c00b17 	ldw	r3,44(r2)
 1837db0:	e0bffd17 	ldw	r2,-12(fp)
 1837db4:	1080020b 	ldhu	r2,8(r2)
 1837db8:	113fffcc 	andi	r4,r2,65535
 1837dbc:	e0bffd17 	ldw	r2,-12(fp)
 1837dc0:	10800417 	ldw	r2,16(r2)
 1837dc4:	11400303 	ldbu	r5,12(r2)
 1837dc8:	10800343 	ldbu	r2,13(r2)
 1837dcc:	1004923a 	slli	r2,r2,8
 1837dd0:	1144b03a 	or	r2,r2,r5
 1837dd4:	10bfffcc 	andi	r2,r2,65535
 1837dd8:	1004d23a 	srli	r2,r2,8
 1837ddc:	117fffcc 	andi	r5,r2,65535
 1837de0:	e0bffd17 	ldw	r2,-12(fp)
 1837de4:	10800417 	ldw	r2,16(r2)
 1837de8:	11800303 	ldbu	r6,12(r2)
 1837dec:	10800343 	ldbu	r2,13(r2)
 1837df0:	1004923a 	slli	r2,r2,8
 1837df4:	1184b03a 	or	r2,r2,r6
 1837df8:	10bfffcc 	andi	r2,r2,65535
 1837dfc:	1004923a 	slli	r2,r2,8
 1837e00:	10bfffcc 	andi	r2,r2,65535
 1837e04:	2884b03a 	or	r2,r5,r2
 1837e08:	108000cc 	andi	r2,r2,3
 1837e0c:	1004c03a 	cmpne	r2,r2,zero
 1837e10:	10803fcc 	andi	r2,r2,255
 1837e14:	2085883a 	add	r2,r4,r2
 1837e18:	1887883a 	add	r3,r3,r2
 1837e1c:	e0bffe17 	ldw	r2,-8(fp)
 1837e20:	10c00b15 	stw	r3,44(r2)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 1837e24:	e0bffe17 	ldw	r2,-8(fp)
 1837e28:	10c00c0b 	ldhu	r3,48(r2)
 1837e2c:	e0bffd17 	ldw	r2,-12(fp)
 1837e30:	1100020b 	ldhu	r4,8(r2)
 1837e34:	e0bffd17 	ldw	r2,-12(fp)
 1837e38:	10800417 	ldw	r2,16(r2)
 1837e3c:	11400303 	ldbu	r5,12(r2)
 1837e40:	10800343 	ldbu	r2,13(r2)
 1837e44:	1004923a 	slli	r2,r2,8
 1837e48:	1144b03a 	or	r2,r2,r5
 1837e4c:	10bfffcc 	andi	r2,r2,65535
 1837e50:	1004d23a 	srli	r2,r2,8
 1837e54:	117fffcc 	andi	r5,r2,65535
 1837e58:	e0bffd17 	ldw	r2,-12(fp)
 1837e5c:	10800417 	ldw	r2,16(r2)
 1837e60:	11800303 	ldbu	r6,12(r2)
 1837e64:	10800343 	ldbu	r2,13(r2)
 1837e68:	1004923a 	slli	r2,r2,8
 1837e6c:	1184b03a 	or	r2,r2,r6
 1837e70:	10bfffcc 	andi	r2,r2,65535
 1837e74:	1004923a 	slli	r2,r2,8
 1837e78:	10bfffcc 	andi	r2,r2,65535
 1837e7c:	2884b03a 	or	r2,r5,r2
 1837e80:	108000cc 	andi	r2,r2,3
 1837e84:	1004c03a 	cmpne	r2,r2,zero
 1837e88:	10803fcc 	andi	r2,r2,255
 1837e8c:	2085883a 	add	r2,r4,r2
 1837e90:	1885c83a 	sub	r2,r3,r2
 1837e94:	1007883a 	mov	r3,r2
 1837e98:	e0bffe17 	ldw	r2,-8(fp)
 1837e9c:	10c00c0d 	sth	r3,48(r2)

          tcp_update_rcv_ann_wnd(pcb);
 1837ea0:	e13ffe17 	ldw	r4,-8(fp)
 1837ea4:	181c1d00 	call	181c1d0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 1837ea8:	e0bffd17 	ldw	r2,-12(fp)
 1837eac:	10800117 	ldw	r2,4(r2)
 1837eb0:	1080020b 	ldhu	r2,8(r2)
 1837eb4:	10bfffcc 	andi	r2,r2,65535
 1837eb8:	10000e26 	beq	r2,zero,1837ef4 <tcp_receive+0x1758>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
 1837ebc:	d0a81d17 	ldw	r2,-24460(gp)
 1837ec0:	10000726 	beq	r2,zero,1837ee0 <tcp_receive+0x1744>
              pbuf_cat(recv_data, cseg->p);
 1837ec4:	d0e81d17 	ldw	r3,-24460(gp)
 1837ec8:	e0bffd17 	ldw	r2,-12(fp)
 1837ecc:	10800117 	ldw	r2,4(r2)
 1837ed0:	100b883a 	mov	r5,r2
 1837ed4:	1809883a 	mov	r4,r3
 1837ed8:	181aad80 	call	181aad8 <pbuf_cat>
 1837edc:	00000306 	br	1837eec <tcp_receive+0x1750>
            } else {
              recv_data = cseg->p;
 1837ee0:	e0bffd17 	ldw	r2,-12(fp)
 1837ee4:	10800117 	ldw	r2,4(r2)
 1837ee8:	d0a81d15 	stw	r2,-24460(gp)
            }
            cseg->p = NULL;
 1837eec:	e0bffd17 	ldw	r2,-12(fp)
 1837ef0:	10000115 	stw	zero,4(r2)
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 1837ef4:	e0bffd17 	ldw	r2,-12(fp)
 1837ef8:	10800417 	ldw	r2,16(r2)
 1837efc:	10c00303 	ldbu	r3,12(r2)
 1837f00:	10800343 	ldbu	r2,13(r2)
 1837f04:	1004923a 	slli	r2,r2,8
 1837f08:	10c4b03a 	or	r2,r2,r3
 1837f0c:	10bfffcc 	andi	r2,r2,65535
 1837f10:	1004d23a 	srli	r2,r2,8
 1837f14:	10ffffcc 	andi	r3,r2,65535
 1837f18:	e0bffd17 	ldw	r2,-12(fp)
 1837f1c:	10800417 	ldw	r2,16(r2)
 1837f20:	11000303 	ldbu	r4,12(r2)
 1837f24:	10800343 	ldbu	r2,13(r2)
 1837f28:	1004923a 	slli	r2,r2,8
 1837f2c:	1104b03a 	or	r2,r2,r4
 1837f30:	10bfffcc 	andi	r2,r2,65535
 1837f34:	1004923a 	slli	r2,r2,8
 1837f38:	10bfffcc 	andi	r2,r2,65535
 1837f3c:	1884b03a 	or	r2,r3,r2
 1837f40:	1080004c 	andi	r2,r2,1
 1837f44:	10000a26 	beq	r2,zero,1837f70 <tcp_receive+0x17d4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 1837f48:	d0a81c03 	ldbu	r2,-24464(gp)
 1837f4c:	10800814 	ori	r2,r2,32
 1837f50:	d0a81c05 	stb	r2,-24464(gp)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 1837f54:	e0bffe17 	ldw	r2,-8(fp)
 1837f58:	10800617 	ldw	r2,24(r2)
 1837f5c:	10800118 	cmpnei	r2,r2,4
 1837f60:	1000031e 	bne	r2,zero,1837f70 <tcp_receive+0x17d4>
              pcb->state = CLOSE_WAIT;
 1837f64:	e0bffe17 	ldw	r2,-8(fp)
 1837f68:	00c001c4 	movi	r3,7
 1837f6c:	10c00615 	stw	r3,24(r2)
            } 
          }

          pcb->ooseq = cseg->next;
 1837f70:	e0bffd17 	ldw	r2,-12(fp)
 1837f74:	10c00017 	ldw	r3,0(r2)
 1837f78:	e0bffe17 	ldw	r2,-8(fp)
 1837f7c:	10c01e15 	stw	r3,120(r2)
          tcp_seg_free(cseg);
 1837f80:	e13ffd17 	ldw	r4,-12(fp)
 1837f84:	181d1ac0 	call	181d1ac <tcp_seg_free>
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 1837f88:	e0bffe17 	ldw	r2,-8(fp)
 1837f8c:	10801e17 	ldw	r2,120(r2)
 1837f90:	10001126 	beq	r2,zero,1837fd8 <tcp_receive+0x183c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 1837f94:	e0bffe17 	ldw	r2,-8(fp)
 1837f98:	10801e17 	ldw	r2,120(r2)
 1837f9c:	10800417 	ldw	r2,16(r2)
 1837fa0:	10c00103 	ldbu	r3,4(r2)
 1837fa4:	11000143 	ldbu	r4,5(r2)
 1837fa8:	2008923a 	slli	r4,r4,8
 1837fac:	20c6b03a 	or	r3,r4,r3
 1837fb0:	11000183 	ldbu	r4,6(r2)
 1837fb4:	2008943a 	slli	r4,r4,16
 1837fb8:	20c6b03a 	or	r3,r4,r3
 1837fbc:	108001c3 	ldbu	r2,7(r2)
 1837fc0:	1004963a 	slli	r2,r2,24
 1837fc4:	10c4b03a 	or	r2,r2,r3
 1837fc8:	1007883a 	mov	r3,r2
 1837fcc:	e0bffe17 	ldw	r2,-8(fp)
 1837fd0:	10800b17 	ldw	r2,44(r2)
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 1837fd4:	18bf6326 	beq	r3,r2,1837d64 <__alt_mem_mem_0+0xff817d64>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 1837fd8:	e0bffe17 	ldw	r2,-8(fp)
 1837fdc:	10800883 	ldbu	r2,34(r2)
 1837fe0:	10803fcc 	andi	r2,r2,255
 1837fe4:	1080004c 	andi	r2,r2,1
 1837fe8:	10000e26 	beq	r2,zero,1838024 <tcp_receive+0x1888>
 1837fec:	e0bffe17 	ldw	r2,-8(fp)
 1837ff0:	10c00883 	ldbu	r3,34(r2)
 1837ff4:	00bfff84 	movi	r2,-2
 1837ff8:	1884703a 	and	r2,r3,r2
 1837ffc:	1007883a 	mov	r3,r2
 1838000:	e0bffe17 	ldw	r2,-8(fp)
 1838004:	10c00885 	stb	r3,34(r2)
 1838008:	e0bffe17 	ldw	r2,-8(fp)
 183800c:	10800883 	ldbu	r2,34(r2)
 1838010:	10800094 	ori	r2,r2,2
 1838014:	1007883a 	mov	r3,r2
 1838018:	e0bffe17 	ldw	r2,-8(fp)
 183801c:	10c00885 	stb	r3,34(r2)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 1838020:	0001bd06 	br	1838718 <tcp_receive+0x1f7c>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 1838024:	e0bffe17 	ldw	r2,-8(fp)
 1838028:	10800883 	ldbu	r2,34(r2)
 183802c:	10800054 	ori	r2,r2,1
 1838030:	1007883a 	mov	r3,r2
 1838034:	e0bffe17 	ldw	r2,-8(fp)
 1838038:	10c00885 	stb	r3,34(r2)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 183803c:	0001b606 	br	1838718 <tcp_receive+0x1f7c>
        /* Acknowledge the segment(s). */
        tcp_ack(pcb);

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 1838040:	e13ffe17 	ldw	r4,-8(fp)
 1838044:	181f3600 	call	181f360 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 1838048:	e0bffe17 	ldw	r2,-8(fp)
 183804c:	10801e17 	ldw	r2,120(r2)
 1838050:	1000071e 	bne	r2,zero,1838070 <tcp_receive+0x18d4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 1838054:	010061b4 	movhi	r4,390
 1838058:	21074004 	addi	r4,r4,7424
 183805c:	181d2400 	call	181d240 <tcp_seg_copy>
 1838060:	1007883a 	mov	r3,r2
 1838064:	e0bffe17 	ldw	r2,-8(fp)
 1838068:	10c01e15 	stw	r3,120(r2)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 183806c:	0001aa06 	br	1838718 <tcp_receive+0x1f7c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 1838070:	e03ff515 	stw	zero,-44(fp)
          for(next = pcb->ooseq; next != NULL; next = next->next) {
 1838074:	e0bffe17 	ldw	r2,-8(fp)
 1838078:	10801e17 	ldw	r2,120(r2)
 183807c:	e0bff415 	stw	r2,-48(fp)
 1838080:	00019306 	br	18386d0 <tcp_receive+0x1f34>
            if (seqno == next->tcphdr->seqno) {
 1838084:	e0bff417 	ldw	r2,-48(fp)
 1838088:	10800417 	ldw	r2,16(r2)
 183808c:	10c00103 	ldbu	r3,4(r2)
 1838090:	11000143 	ldbu	r4,5(r2)
 1838094:	2008923a 	slli	r4,r4,8
 1838098:	20c6b03a 	or	r3,r4,r3
 183809c:	11000183 	ldbu	r4,6(r2)
 18380a0:	2008943a 	slli	r4,r4,16
 18380a4:	20c6b03a 	or	r3,r4,r3
 18380a8:	108001c3 	ldbu	r2,7(r2)
 18380ac:	1004963a 	slli	r2,r2,24
 18380b0:	10c4b03a 	or	r2,r2,r3
 18380b4:	1007883a 	mov	r3,r2
 18380b8:	d0a81917 	ldw	r2,-24476(gp)
 18380bc:	18801b1e 	bne	r3,r2,183812c <tcp_receive+0x1990>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 18380c0:	008061b4 	movhi	r2,390
 18380c4:	10874004 	addi	r2,r2,7424
 18380c8:	1100020b 	ldhu	r4,8(r2)
 18380cc:	e0bff417 	ldw	r2,-48(fp)
 18380d0:	10c0020b 	ldhu	r3,8(r2)
 18380d4:	20bfffcc 	andi	r2,r4,65535
 18380d8:	18ffffcc 	andi	r3,r3,65535
 18380dc:	18817f2e 	bgeu	r3,r2,18386dc <tcp_receive+0x1f40>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 18380e0:	010061b4 	movhi	r4,390
 18380e4:	21074004 	addi	r4,r4,7424
 18380e8:	181d2400 	call	181d240 <tcp_seg_copy>
 18380ec:	e0bffd15 	stw	r2,-12(fp)
                if (cseg != NULL) {
 18380f0:	e0bffd17 	ldw	r2,-12(fp)
 18380f4:	10017b26 	beq	r2,zero,18386e4 <tcp_receive+0x1f48>
                  if (prev != NULL) {
 18380f8:	e0bff517 	ldw	r2,-44(fp)
 18380fc:	10000426 	beq	r2,zero,1838110 <tcp_receive+0x1974>
                    prev->next = cseg;
 1838100:	e0bff517 	ldw	r2,-44(fp)
 1838104:	e0fffd17 	ldw	r3,-12(fp)
 1838108:	10c00015 	stw	r3,0(r2)
 183810c:	00000306 	br	183811c <tcp_receive+0x1980>
                  } else {
                    pcb->ooseq = cseg;
 1838110:	e0bffe17 	ldw	r2,-8(fp)
 1838114:	e0fffd17 	ldw	r3,-12(fp)
 1838118:	10c01e15 	stw	r3,120(r2)
                  }
                  tcp_oos_insert_segment(cseg, next);
 183811c:	e17ff417 	ldw	r5,-48(fp)
 1838120:	e13ffd17 	ldw	r4,-12(fp)
 1838124:	18364fc0 	call	18364fc <tcp_oos_insert_segment>
                }
                break;
 1838128:	00016e06 	br	18386e4 <tcp_receive+0x1f48>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 183812c:	e0bff517 	ldw	r2,-44(fp)
 1838130:	10001c1e 	bne	r2,zero,18381a4 <tcp_receive+0x1a08>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 1838134:	d0e81917 	ldw	r3,-24476(gp)
 1838138:	e0bff417 	ldw	r2,-48(fp)
 183813c:	10800417 	ldw	r2,16(r2)
 1838140:	11000103 	ldbu	r4,4(r2)
 1838144:	11400143 	ldbu	r5,5(r2)
 1838148:	280a923a 	slli	r5,r5,8
 183814c:	2908b03a 	or	r4,r5,r4
 1838150:	11400183 	ldbu	r5,6(r2)
 1838154:	280a943a 	slli	r5,r5,16
 1838158:	2908b03a 	or	r4,r5,r4
 183815c:	108001c3 	ldbu	r2,7(r2)
 1838160:	1004963a 	slli	r2,r2,24
 1838164:	1104b03a 	or	r2,r2,r4
 1838168:	1885c83a 	sub	r2,r3,r2
 183816c:	1000680e 	bge	r2,zero,1838310 <tcp_receive+0x1b74>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 1838170:	010061b4 	movhi	r4,390
 1838174:	21074004 	addi	r4,r4,7424
 1838178:	181d2400 	call	181d240 <tcp_seg_copy>
 183817c:	e0bffd15 	stw	r2,-12(fp)
                  if (cseg != NULL) {
 1838180:	e0bffd17 	ldw	r2,-12(fp)
 1838184:	10015926 	beq	r2,zero,18386ec <tcp_receive+0x1f50>
                    pcb->ooseq = cseg;
 1838188:	e0bffe17 	ldw	r2,-8(fp)
 183818c:	e0fffd17 	ldw	r3,-12(fp)
 1838190:	10c01e15 	stw	r3,120(r2)
                    tcp_oos_insert_segment(cseg, next);
 1838194:	e17ff417 	ldw	r5,-48(fp)
 1838198:	e13ffd17 	ldw	r4,-12(fp)
 183819c:	18364fc0 	call	18364fc <tcp_oos_insert_segment>
                  }
                  break;
 18381a0:	00015206 	br	18386ec <tcp_receive+0x1f50>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 18381a4:	d0e81917 	ldw	r3,-24476(gp)
 18381a8:	e0bff517 	ldw	r2,-44(fp)
 18381ac:	10800417 	ldw	r2,16(r2)
 18381b0:	11000103 	ldbu	r4,4(r2)
 18381b4:	11400143 	ldbu	r5,5(r2)
 18381b8:	280a923a 	slli	r5,r5,8
 18381bc:	2908b03a 	or	r4,r5,r4
 18381c0:	11400183 	ldbu	r5,6(r2)
 18381c4:	280a943a 	slli	r5,r5,16
 18381c8:	2908b03a 	or	r4,r5,r4
 18381cc:	108001c3 	ldbu	r2,7(r2)
 18381d0:	1004963a 	slli	r2,r2,24
 18381d4:	1104b03a 	or	r2,r2,r4
 18381d8:	1885c83a 	sub	r2,r3,r2
 18381dc:	10bfffc4 	addi	r2,r2,-1
 18381e0:	10004b16 	blt	r2,zero,1838310 <tcp_receive+0x1b74>
 18381e4:	d0e81917 	ldw	r3,-24476(gp)
 18381e8:	e0bff417 	ldw	r2,-48(fp)
 18381ec:	10800417 	ldw	r2,16(r2)
 18381f0:	11000103 	ldbu	r4,4(r2)
 18381f4:	11400143 	ldbu	r5,5(r2)
 18381f8:	280a923a 	slli	r5,r5,8
 18381fc:	2908b03a 	or	r4,r5,r4
 1838200:	11400183 	ldbu	r5,6(r2)
 1838204:	280a943a 	slli	r5,r5,16
 1838208:	2908b03a 	or	r4,r5,r4
 183820c:	108001c3 	ldbu	r2,7(r2)
 1838210:	1004963a 	slli	r2,r2,24
 1838214:	1104b03a 	or	r2,r2,r4
 1838218:	1885c83a 	sub	r2,r3,r2
 183821c:	10800044 	addi	r2,r2,1
 1838220:	00803b16 	blt	zero,r2,1838310 <tcp_receive+0x1b74>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 1838224:	010061b4 	movhi	r4,390
 1838228:	21074004 	addi	r4,r4,7424
 183822c:	181d2400 	call	181d240 <tcp_seg_copy>
 1838230:	e0bffd15 	stw	r2,-12(fp)
                  if (cseg != NULL) {
 1838234:	e0bffd17 	ldw	r2,-12(fp)
 1838238:	10012e26 	beq	r2,zero,18386f4 <tcp_receive+0x1f58>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 183823c:	e0bff517 	ldw	r2,-44(fp)
 1838240:	10800417 	ldw	r2,16(r2)
 1838244:	10c00103 	ldbu	r3,4(r2)
 1838248:	11000143 	ldbu	r4,5(r2)
 183824c:	2008923a 	slli	r4,r4,8
 1838250:	20c6b03a 	or	r3,r4,r3
 1838254:	11000183 	ldbu	r4,6(r2)
 1838258:	2008943a 	slli	r4,r4,16
 183825c:	20c6b03a 	or	r3,r4,r3
 1838260:	108001c3 	ldbu	r2,7(r2)
 1838264:	1004963a 	slli	r2,r2,24
 1838268:	10c4b03a 	or	r2,r2,r3
 183826c:	1007883a 	mov	r3,r2
 1838270:	e0bff517 	ldw	r2,-44(fp)
 1838274:	1080020b 	ldhu	r2,8(r2)
 1838278:	10bfffcc 	andi	r2,r2,65535
 183827c:	1887883a 	add	r3,r3,r2
 1838280:	d0a81917 	ldw	r2,-24476(gp)
 1838284:	1885c83a 	sub	r2,r3,r2
 1838288:	00801a0e 	bge	zero,r2,18382f4 <tcp_receive+0x1b58>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 183828c:	d0a81917 	ldw	r2,-24476(gp)
 1838290:	100b883a 	mov	r5,r2
 1838294:	e0bff517 	ldw	r2,-44(fp)
 1838298:	10800417 	ldw	r2,16(r2)
 183829c:	10c00103 	ldbu	r3,4(r2)
 18382a0:	11000143 	ldbu	r4,5(r2)
 18382a4:	2008923a 	slli	r4,r4,8
 18382a8:	20c6b03a 	or	r3,r4,r3
 18382ac:	11000183 	ldbu	r4,6(r2)
 18382b0:	2008943a 	slli	r4,r4,16
 18382b4:	20c6b03a 	or	r3,r4,r3
 18382b8:	108001c3 	ldbu	r2,7(r2)
 18382bc:	1004963a 	slli	r2,r2,24
 18382c0:	10c4b03a 	or	r2,r2,r3
 18382c4:	2885c83a 	sub	r2,r5,r2
 18382c8:	1007883a 	mov	r3,r2
 18382cc:	e0bff517 	ldw	r2,-44(fp)
 18382d0:	10c0020d 	sth	r3,8(r2)
                      pbuf_realloc(prev->p, prev->len);
 18382d4:	e0bff517 	ldw	r2,-44(fp)
 18382d8:	10c00117 	ldw	r3,4(r2)
 18382dc:	e0bff517 	ldw	r2,-44(fp)
 18382e0:	1080020b 	ldhu	r2,8(r2)
 18382e4:	10bfffcc 	andi	r2,r2,65535
 18382e8:	100b883a 	mov	r5,r2
 18382ec:	1809883a 	mov	r4,r3
 18382f0:	181a5f40 	call	181a5f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 18382f4:	e0bff517 	ldw	r2,-44(fp)
 18382f8:	e0fffd17 	ldw	r3,-12(fp)
 18382fc:	10c00015 	stw	r3,0(r2)
                    tcp_oos_insert_segment(cseg, next);
 1838300:	e17ff417 	ldw	r5,-48(fp)
 1838304:	e13ffd17 	ldw	r4,-12(fp)
 1838308:	18364fc0 	call	18364fc <tcp_oos_insert_segment>
                  }
                  break;
 183830c:	0000f906 	br	18386f4 <tcp_receive+0x1f58>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 1838310:	e0bff417 	ldw	r2,-48(fp)
 1838314:	10800017 	ldw	r2,0(r2)
 1838318:	1000e81e 	bne	r2,zero,18386bc <tcp_receive+0x1f20>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 183831c:	d0e81917 	ldw	r3,-24476(gp)
 1838320:	e0bff417 	ldw	r2,-48(fp)
 1838324:	10800417 	ldw	r2,16(r2)
 1838328:	11000103 	ldbu	r4,4(r2)
 183832c:	11400143 	ldbu	r5,5(r2)
 1838330:	280a923a 	slli	r5,r5,8
 1838334:	2908b03a 	or	r4,r5,r4
 1838338:	11400183 	ldbu	r5,6(r2)
 183833c:	280a943a 	slli	r5,r5,16
 1838340:	2908b03a 	or	r4,r5,r4
 1838344:	108001c3 	ldbu	r2,7(r2)
 1838348:	1004963a 	slli	r2,r2,24
 183834c:	1104b03a 	or	r2,r2,r4
 1838350:	1885c83a 	sub	r2,r3,r2
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 1838354:	0080d90e 	bge	zero,r2,18386bc <tcp_receive+0x1f20>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 1838358:	e0bff417 	ldw	r2,-48(fp)
 183835c:	10800417 	ldw	r2,16(r2)
 1838360:	10c00303 	ldbu	r3,12(r2)
 1838364:	10800343 	ldbu	r2,13(r2)
 1838368:	1004923a 	slli	r2,r2,8
 183836c:	10c4b03a 	or	r2,r2,r3
 1838370:	10bfffcc 	andi	r2,r2,65535
 1838374:	1004d23a 	srli	r2,r2,8
 1838378:	10ffffcc 	andi	r3,r2,65535
 183837c:	e0bff417 	ldw	r2,-48(fp)
 1838380:	10800417 	ldw	r2,16(r2)
 1838384:	11000303 	ldbu	r4,12(r2)
 1838388:	10800343 	ldbu	r2,13(r2)
 183838c:	1004923a 	slli	r2,r2,8
 1838390:	1104b03a 	or	r2,r2,r4
 1838394:	10bfffcc 	andi	r2,r2,65535
 1838398:	1004923a 	slli	r2,r2,8
 183839c:	10bfffcc 	andi	r2,r2,65535
 18383a0:	1884b03a 	or	r2,r3,r2
 18383a4:	1080004c 	andi	r2,r2,1
 18383a8:	1000d41e 	bne	r2,zero,18386fc <tcp_receive+0x1f60>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 18383ac:	010061b4 	movhi	r4,390
 18383b0:	21074004 	addi	r4,r4,7424
 18383b4:	181d2400 	call	181d240 <tcp_seg_copy>
 18383b8:	1007883a 	mov	r3,r2
 18383bc:	e0bff417 	ldw	r2,-48(fp)
 18383c0:	10c00015 	stw	r3,0(r2)
                if (next->next != NULL) {
 18383c4:	e0bff417 	ldw	r2,-48(fp)
 18383c8:	10800017 	ldw	r2,0(r2)
 18383cc:	1000cd26 	beq	r2,zero,1838704 <tcp_receive+0x1f68>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 18383d0:	e0bff417 	ldw	r2,-48(fp)
 18383d4:	10800417 	ldw	r2,16(r2)
 18383d8:	10c00103 	ldbu	r3,4(r2)
 18383dc:	11000143 	ldbu	r4,5(r2)
 18383e0:	2008923a 	slli	r4,r4,8
 18383e4:	20c6b03a 	or	r3,r4,r3
 18383e8:	11000183 	ldbu	r4,6(r2)
 18383ec:	2008943a 	slli	r4,r4,16
 18383f0:	20c6b03a 	or	r3,r4,r3
 18383f4:	108001c3 	ldbu	r2,7(r2)
 18383f8:	1004963a 	slli	r2,r2,24
 18383fc:	10c4b03a 	or	r2,r2,r3
 1838400:	1007883a 	mov	r3,r2
 1838404:	e0bff417 	ldw	r2,-48(fp)
 1838408:	1080020b 	ldhu	r2,8(r2)
 183840c:	10bfffcc 	andi	r2,r2,65535
 1838410:	1887883a 	add	r3,r3,r2
 1838414:	d0a81917 	ldw	r2,-24476(gp)
 1838418:	1885c83a 	sub	r2,r3,r2
 183841c:	00801a0e 	bge	zero,r2,1838488 <tcp_receive+0x1cec>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 1838420:	d0a81917 	ldw	r2,-24476(gp)
 1838424:	100b883a 	mov	r5,r2
 1838428:	e0bff417 	ldw	r2,-48(fp)
 183842c:	10800417 	ldw	r2,16(r2)
 1838430:	10c00103 	ldbu	r3,4(r2)
 1838434:	11000143 	ldbu	r4,5(r2)
 1838438:	2008923a 	slli	r4,r4,8
 183843c:	20c6b03a 	or	r3,r4,r3
 1838440:	11000183 	ldbu	r4,6(r2)
 1838444:	2008943a 	slli	r4,r4,16
 1838448:	20c6b03a 	or	r3,r4,r3
 183844c:	108001c3 	ldbu	r2,7(r2)
 1838450:	1004963a 	slli	r2,r2,24
 1838454:	10c4b03a 	or	r2,r2,r3
 1838458:	2885c83a 	sub	r2,r5,r2
 183845c:	1007883a 	mov	r3,r2
 1838460:	e0bff417 	ldw	r2,-48(fp)
 1838464:	10c0020d 	sth	r3,8(r2)
                    pbuf_realloc(next->p, next->len);
 1838468:	e0bff417 	ldw	r2,-48(fp)
 183846c:	10c00117 	ldw	r3,4(r2)
 1838470:	e0bff417 	ldw	r2,-48(fp)
 1838474:	1080020b 	ldhu	r2,8(r2)
 1838478:	10bfffcc 	andi	r2,r2,65535
 183847c:	100b883a 	mov	r5,r2
 1838480:	1809883a 	mov	r4,r3
 1838484:	181a5f40 	call	181a5f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
 1838488:	d0a81b8b 	ldhu	r2,-24466(gp)
 183848c:	10ffffcc 	andi	r3,r2,65535
 1838490:	d0a81917 	ldw	r2,-24476(gp)
 1838494:	1885883a 	add	r2,r3,r2
 1838498:	e0fffe17 	ldw	r3,-8(fp)
 183849c:	19000b17 	ldw	r4,44(r3)
 18384a0:	e0fffe17 	ldw	r3,-8(fp)
 18384a4:	18c00c0b 	ldhu	r3,48(r3)
 18384a8:	18ffffcc 	andi	r3,r3,65535
 18384ac:	20c7883a 	add	r3,r4,r3
 18384b0:	1880942e 	bgeu	r3,r2,1838704 <tcp_receive+0x1f68>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 18384b4:	e0bff417 	ldw	r2,-48(fp)
 18384b8:	10800017 	ldw	r2,0(r2)
 18384bc:	10800417 	ldw	r2,16(r2)
 18384c0:	10c00303 	ldbu	r3,12(r2)
 18384c4:	10800343 	ldbu	r2,13(r2)
 18384c8:	1004923a 	slli	r2,r2,8
 18384cc:	10c4b03a 	or	r2,r2,r3
 18384d0:	10bfffcc 	andi	r2,r2,65535
 18384d4:	1004d23a 	srli	r2,r2,8
 18384d8:	10ffffcc 	andi	r3,r2,65535
 18384dc:	e0bff417 	ldw	r2,-48(fp)
 18384e0:	10800017 	ldw	r2,0(r2)
 18384e4:	10800417 	ldw	r2,16(r2)
 18384e8:	11000303 	ldbu	r4,12(r2)
 18384ec:	10800343 	ldbu	r2,13(r2)
 18384f0:	1004923a 	slli	r2,r2,8
 18384f4:	1104b03a 	or	r2,r2,r4
 18384f8:	10bfffcc 	andi	r2,r2,65535
 18384fc:	1004923a 	slli	r2,r2,8
 1838500:	10bfffcc 	andi	r2,r2,65535
 1838504:	1884b03a 	or	r2,r3,r2
 1838508:	1080004c 	andi	r2,r2,1
 183850c:	10003726 	beq	r2,zero,18385ec <tcp_receive+0x1e50>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
 1838510:	e0bff417 	ldw	r2,-48(fp)
 1838514:	10800017 	ldw	r2,0(r2)
 1838518:	10800417 	ldw	r2,16(r2)
 183851c:	e0fff417 	ldw	r3,-48(fp)
 1838520:	18c00017 	ldw	r3,0(r3)
 1838524:	18c00417 	ldw	r3,16(r3)
 1838528:	19000303 	ldbu	r4,12(r3)
 183852c:	18c00343 	ldbu	r3,13(r3)
 1838530:	1806923a 	slli	r3,r3,8
 1838534:	1906b03a 	or	r3,r3,r4
 1838538:	1809883a 	mov	r4,r3
 183853c:	00f03fc4 	movi	r3,-16129
 1838540:	20c6703a 	and	r3,r4,r3
 1838544:	180b883a 	mov	r5,r3
 1838548:	e0fff417 	ldw	r3,-48(fp)
 183854c:	18c00017 	ldw	r3,0(r3)
 1838550:	18c00417 	ldw	r3,16(r3)
 1838554:	19000303 	ldbu	r4,12(r3)
 1838558:	18c00343 	ldbu	r3,13(r3)
 183855c:	1806923a 	slli	r3,r3,8
 1838560:	1906b03a 	or	r3,r3,r4
 1838564:	18ffffcc 	andi	r3,r3,65535
 1838568:	1806d23a 	srli	r3,r3,8
 183856c:	180d883a 	mov	r6,r3
 1838570:	e0fff417 	ldw	r3,-48(fp)
 1838574:	18c00017 	ldw	r3,0(r3)
 1838578:	18c00417 	ldw	r3,16(r3)
 183857c:	19000303 	ldbu	r4,12(r3)
 1838580:	18c00343 	ldbu	r3,13(r3)
 1838584:	1806923a 	slli	r3,r3,8
 1838588:	1906b03a 	or	r3,r3,r4
 183858c:	18ffffcc 	andi	r3,r3,65535
 1838590:	1806923a 	slli	r3,r3,8
 1838594:	30c6b03a 	or	r3,r6,r3
 1838598:	18c00f8c 	andi	r3,r3,62
 183859c:	1806923a 	slli	r3,r3,8
 18385a0:	28c6b03a 	or	r3,r5,r3
 18385a4:	180d883a 	mov	r6,r3
 18385a8:	30ffffcc 	andi	r3,r6,65535
 18385ac:	19403fcc 	andi	r5,r3,255
 18385b0:	10c00303 	ldbu	r3,12(r2)
 18385b4:	1806703a 	and	r3,r3,zero
 18385b8:	1809883a 	mov	r4,r3
 18385bc:	2807883a 	mov	r3,r5
 18385c0:	20c6b03a 	or	r3,r4,r3
 18385c4:	10c00305 	stb	r3,12(r2)
 18385c8:	30ffffcc 	andi	r3,r6,65535
 18385cc:	1806d23a 	srli	r3,r3,8
 18385d0:	197fffcc 	andi	r5,r3,65535
 18385d4:	10c00343 	ldbu	r3,13(r2)
 18385d8:	1806703a 	and	r3,r3,zero
 18385dc:	1809883a 	mov	r4,r3
 18385e0:	2807883a 	mov	r3,r5
 18385e4:	20c6b03a 	or	r3,r4,r3
 18385e8:	10c00345 	stb	r3,13(r2)
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
 18385ec:	e0bff417 	ldw	r2,-48(fp)
 18385f0:	10800017 	ldw	r2,0(r2)
 18385f4:	e0fffe17 	ldw	r3,-8(fp)
 18385f8:	18c00b17 	ldw	r3,44(r3)
 18385fc:	1809883a 	mov	r4,r3
 1838600:	e0fffe17 	ldw	r3,-8(fp)
 1838604:	18c00c0b 	ldhu	r3,48(r3)
 1838608:	20c7883a 	add	r3,r4,r3
 183860c:	1809883a 	mov	r4,r3
 1838610:	d0e81917 	ldw	r3,-24476(gp)
 1838614:	20c7c83a 	sub	r3,r4,r3
 1838618:	10c0020d 	sth	r3,8(r2)
                    pbuf_realloc(next->next->p, next->next->len);
 183861c:	e0bff417 	ldw	r2,-48(fp)
 1838620:	10800017 	ldw	r2,0(r2)
 1838624:	10c00117 	ldw	r3,4(r2)
 1838628:	e0bff417 	ldw	r2,-48(fp)
 183862c:	10800017 	ldw	r2,0(r2)
 1838630:	1080020b 	ldhu	r2,8(r2)
 1838634:	10bfffcc 	andi	r2,r2,65535
 1838638:	100b883a 	mov	r5,r2
 183863c:	1809883a 	mov	r4,r3
 1838640:	181a5f40 	call	181a5f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 1838644:	e0bff417 	ldw	r2,-48(fp)
 1838648:	10800017 	ldw	r2,0(r2)
 183864c:	10c0020b 	ldhu	r3,8(r2)
 1838650:	e0bff417 	ldw	r2,-48(fp)
 1838654:	10800017 	ldw	r2,0(r2)
 1838658:	10800417 	ldw	r2,16(r2)
 183865c:	11000303 	ldbu	r4,12(r2)
 1838660:	10800343 	ldbu	r2,13(r2)
 1838664:	1004923a 	slli	r2,r2,8
 1838668:	1104b03a 	or	r2,r2,r4
 183866c:	10bfffcc 	andi	r2,r2,65535
 1838670:	1004d23a 	srli	r2,r2,8
 1838674:	113fffcc 	andi	r4,r2,65535
 1838678:	e0bff417 	ldw	r2,-48(fp)
 183867c:	10800017 	ldw	r2,0(r2)
 1838680:	10800417 	ldw	r2,16(r2)
 1838684:	11400303 	ldbu	r5,12(r2)
 1838688:	10800343 	ldbu	r2,13(r2)
 183868c:	1004923a 	slli	r2,r2,8
 1838690:	1144b03a 	or	r2,r2,r5
 1838694:	10bfffcc 	andi	r2,r2,65535
 1838698:	1004923a 	slli	r2,r2,8
 183869c:	10bfffcc 	andi	r2,r2,65535
 18386a0:	2084b03a 	or	r2,r4,r2
 18386a4:	108000cc 	andi	r2,r2,3
 18386a8:	1004c03a 	cmpne	r2,r2,zero
 18386ac:	10803fcc 	andi	r2,r2,255
 18386b0:	1885883a 	add	r2,r3,r2
 18386b4:	d0a81b8d 	sth	r2,-24466(gp)
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 18386b8:	00001206 	br	1838704 <tcp_receive+0x1f68>
              }
            }
            prev = next;
 18386bc:	e0bff417 	ldw	r2,-48(fp)
 18386c0:	e0bff515 	stw	r2,-44(fp)
             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
 18386c4:	e0bff417 	ldw	r2,-48(fp)
 18386c8:	10800017 	ldw	r2,0(r2)
 18386cc:	e0bff415 	stw	r2,-48(fp)
 18386d0:	e0bff417 	ldw	r2,-48(fp)
 18386d4:	103e6b1e 	bne	r2,zero,1838084 <__alt_mem_mem_0+0xff818084>
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 18386d8:	00000f06 	br	1838718 <tcp_receive+0x1f7c>
                break;
              } else {
                /* Either the lenghts are the same or the incoming
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
 18386dc:	0001883a 	nop
 18386e0:	00000d06 	br	1838718 <tcp_receive+0x1f7c>
                  } else {
                    pcb->ooseq = cseg;
                  }
                  tcp_oos_insert_segment(cseg, next);
                }
                break;
 18386e4:	0001883a 	nop
 18386e8:	00000b06 	br	1838718 <tcp_receive+0x1f7c>
                  cseg = tcp_seg_copy(&inseg);
                  if (cseg != NULL) {
                    pcb->ooseq = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
 18386ec:	0001883a 	nop
 18386f0:	00000906 	br	1838718 <tcp_receive+0x1f7c>
                      pbuf_realloc(prev->p, prev->len);
                    }
                    prev->next = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
 18386f4:	0001883a 	nop
 18386f8:	00000706 	br	1838718 <tcp_receive+0x1f7c>
                 of the list. */
              if (next->next == NULL &&
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
                  /* segment "next" already contains all data */
                  break;
 18386fc:	0001883a 	nop
 1838700:	00000506 	br	1838718 <tcp_receive+0x1f7c>
                    tcplen = TCP_TCPLEN(next->next);
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 1838704:	0001883a 	nop
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 1838708:	00000306 	br	1838718 <tcp_receive+0x1f7c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
 183870c:	e13ffe17 	ldw	r4,-8(fp)
 1838710:	181f3600 	call	181f360 <tcp_send_empty_ack>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 1838714:	00001706 	br	1838774 <tcp_receive+0x1fd8>
 1838718:	00001606 	br	1838774 <tcp_receive+0x1fd8>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
 183871c:	d0e81917 	ldw	r3,-24476(gp)
 1838720:	e0bffe17 	ldw	r2,-8(fp)
 1838724:	10800b17 	ldw	r2,44(r2)
 1838728:	1885c83a 	sub	r2,r3,r2
 183872c:	10000a16 	blt	r2,zero,1838758 <tcp_receive+0x1fbc>
 1838730:	d0e81917 	ldw	r3,-24476(gp)
 1838734:	e0bffe17 	ldw	r2,-8(fp)
 1838738:	11000b17 	ldw	r4,44(r2)
 183873c:	e0bffe17 	ldw	r2,-8(fp)
 1838740:	10800c0b 	ldhu	r2,48(r2)
 1838744:	10bfffcc 	andi	r2,r2,65535
 1838748:	2085883a 	add	r2,r4,r2
 183874c:	1885c83a 	sub	r2,r3,r2
 1838750:	10800044 	addi	r2,r2,1
 1838754:	0080070e 	bge	zero,r2,1838774 <tcp_receive+0x1fd8>
      tcp_ack_now(pcb);
 1838758:	e0bffe17 	ldw	r2,-8(fp)
 183875c:	10800883 	ldbu	r2,34(r2)
 1838760:	10800094 	ori	r2,r2,2
 1838764:	1007883a 	mov	r3,r2
 1838768:	e0bffe17 	ldw	r2,-8(fp)
 183876c:	10c00885 	stb	r3,34(r2)
    }
  }
}
 1838770:	00000006 	br	1838774 <tcp_receive+0x1fd8>
 1838774:	0001883a 	nop
 1838778:	e6ffff04 	addi	sp,fp,-4
 183877c:	dfc00217 	ldw	ra,8(sp)
 1838780:	df000117 	ldw	fp,4(sp)
 1838784:	dc000017 	ldw	r16,0(sp)
 1838788:	dec00304 	addi	sp,sp,12
 183878c:	f800283a 	ret

01838790 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 1838790:	defffa04 	addi	sp,sp,-24
 1838794:	df000515 	stw	fp,20(sp)
 1838798:	df000504 	addi	fp,sp,20
 183879c:	e13fff15 	stw	r4,-4(fp)
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
 18387a0:	d0a81717 	ldw	r2,-24484(gp)
 18387a4:	10800504 	addi	r2,r2,20
 18387a8:	e0bffc15 	stw	r2,-16(fp)

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
 18387ac:	d0a81717 	ldw	r2,-24484(gp)
 18387b0:	10c00303 	ldbu	r3,12(r2)
 18387b4:	10800343 	ldbu	r2,13(r2)
 18387b8:	1004923a 	slli	r2,r2,8
 18387bc:	10c4b03a 	or	r2,r2,r3
 18387c0:	10bfffcc 	andi	r2,r2,65535
 18387c4:	1004d23a 	srli	r2,r2,8
 18387c8:	10ffffcc 	andi	r3,r2,65535
 18387cc:	d0a81717 	ldw	r2,-24484(gp)
 18387d0:	11000303 	ldbu	r4,12(r2)
 18387d4:	10800343 	ldbu	r2,13(r2)
 18387d8:	1004923a 	slli	r2,r2,8
 18387dc:	1104b03a 	or	r2,r2,r4
 18387e0:	10bfffcc 	andi	r2,r2,65535
 18387e4:	1004923a 	slli	r2,r2,8
 18387e8:	10bfffcc 	andi	r2,r2,65535
 18387ec:	1884b03a 	or	r2,r3,r2
 18387f0:	1005d33a 	srai	r2,r2,12
 18387f4:	10800190 	cmplti	r2,r2,6
 18387f8:	10006b1e 	bne	r2,zero,18389a8 <tcp_parseopt+0x218>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 18387fc:	d0a81717 	ldw	r2,-24484(gp)
 1838800:	10c00303 	ldbu	r3,12(r2)
 1838804:	10800343 	ldbu	r2,13(r2)
 1838808:	1004923a 	slli	r2,r2,8
 183880c:	10c4b03a 	or	r2,r2,r3
 1838810:	10bfffcc 	andi	r2,r2,65535
 1838814:	1004d23a 	srli	r2,r2,8
 1838818:	10ffffcc 	andi	r3,r2,65535
 183881c:	d0a81717 	ldw	r2,-24484(gp)
 1838820:	11000303 	ldbu	r4,12(r2)
 1838824:	10800343 	ldbu	r2,13(r2)
 1838828:	1004923a 	slli	r2,r2,8
 183882c:	1104b03a 	or	r2,r2,r4
 1838830:	10bfffcc 	andi	r2,r2,65535
 1838834:	1004923a 	slli	r2,r2,8
 1838838:	10bfffcc 	andi	r2,r2,65535
 183883c:	1884b03a 	or	r2,r3,r2
 1838840:	1005d33a 	srai	r2,r2,12
 1838844:	10bffec4 	addi	r2,r2,-5
 1838848:	1085883a 	add	r2,r2,r2
 183884c:	1085883a 	add	r2,r2,r2
 1838850:	e0bffd0d 	sth	r2,-12(fp)
    for (c = 0; c < max_c; ) {
 1838854:	e03ffb0d 	sth	zero,-20(fp)
 1838858:	00004a06 	br	1838984 <tcp_parseopt+0x1f4>
      opt = opts[c];
 183885c:	e0bffb0b 	ldhu	r2,-20(fp)
 1838860:	e0fffc17 	ldw	r3,-16(fp)
 1838864:	1885883a 	add	r2,r3,r2
 1838868:	10800003 	ldbu	r2,0(r2)
 183886c:	e0bffd85 	stb	r2,-10(fp)
      switch (opt) {
 1838870:	e0bffd83 	ldbu	r2,-10(fp)
 1838874:	10c00060 	cmpeqi	r3,r2,1
 1838878:	1800041e 	bne	r3,zero,183888c <tcp_parseopt+0xfc>
 183887c:	10c000a0 	cmpeqi	r3,r2,2
 1838880:	1800061e 	bne	r3,zero,183889c <tcp_parseopt+0x10c>
 1838884:	10004326 	beq	r2,zero,1838994 <tcp_parseopt+0x204>
 1838888:	00002e06 	br	1838944 <tcp_parseopt+0x1b4>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
 183888c:	e0bffb0b 	ldhu	r2,-20(fp)
 1838890:	10800044 	addi	r2,r2,1
 1838894:	e0bffb0d 	sth	r2,-20(fp)
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 1838898:	00003a06 	br	1838984 <tcp_parseopt+0x1f4>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
 183889c:	e0bffb0b 	ldhu	r2,-20(fp)
 18388a0:	10800044 	addi	r2,r2,1
 18388a4:	e0fffc17 	ldw	r3,-16(fp)
 18388a8:	1885883a 	add	r2,r3,r2
 18388ac:	10800003 	ldbu	r2,0(r2)
 18388b0:	10803fcc 	andi	r2,r2,255
 18388b4:	10800118 	cmpnei	r2,r2,4
 18388b8:	1000381e 	bne	r2,zero,183899c <tcp_parseopt+0x20c>
 18388bc:	e0bffb0b 	ldhu	r2,-20(fp)
 18388c0:	10800104 	addi	r2,r2,4
 18388c4:	e0fffd0b 	ldhu	r3,-12(fp)
 18388c8:	18803416 	blt	r3,r2,183899c <tcp_parseopt+0x20c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
 18388cc:	e0bffb0b 	ldhu	r2,-20(fp)
 18388d0:	10800084 	addi	r2,r2,2
 18388d4:	e0fffc17 	ldw	r3,-16(fp)
 18388d8:	1885883a 	add	r2,r3,r2
 18388dc:	10800003 	ldbu	r2,0(r2)
 18388e0:	10803fcc 	andi	r2,r2,255
 18388e4:	1004923a 	slli	r2,r2,8
 18388e8:	1009883a 	mov	r4,r2
 18388ec:	e0bffb0b 	ldhu	r2,-20(fp)
 18388f0:	108000c4 	addi	r2,r2,3
 18388f4:	e0fffc17 	ldw	r3,-16(fp)
 18388f8:	1885883a 	add	r2,r3,r2
 18388fc:	10800003 	ldbu	r2,0(r2)
 1838900:	10803fcc 	andi	r2,r2,255
 1838904:	2084b03a 	or	r2,r4,r2
 1838908:	e0bffe0d 	sth	r2,-8(fp)
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 183890c:	e0bffe0b 	ldhu	r2,-8(fp)
 1838910:	10816d68 	cmpgeui	r2,r2,1461
 1838914:	1000041e 	bne	r2,zero,1838928 <tcp_parseopt+0x198>
 1838918:	e0bffe0b 	ldhu	r2,-8(fp)
 183891c:	10000226 	beq	r2,zero,1838928 <tcp_parseopt+0x198>
 1838920:	e0bffe0b 	ldhu	r2,-8(fp)
 1838924:	00000106 	br	183892c <tcp_parseopt+0x19c>
 1838928:	00816d04 	movi	r2,1460
 183892c:	e0ffff17 	ldw	r3,-4(fp)
 1838930:	18800e8d 	sth	r2,58(r3)
        /* Advance to next option */
        c += 0x04;
 1838934:	e0bffb0b 	ldhu	r2,-20(fp)
 1838938:	10800104 	addi	r2,r2,4
 183893c:	e0bffb0d 	sth	r2,-20(fp)
        break;
 1838940:	00001006 	br	1838984 <tcp_parseopt+0x1f4>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
 1838944:	e0bffb0b 	ldhu	r2,-20(fp)
 1838948:	10800044 	addi	r2,r2,1
 183894c:	e0fffc17 	ldw	r3,-16(fp)
 1838950:	1885883a 	add	r2,r3,r2
 1838954:	10800003 	ldbu	r2,0(r2)
 1838958:	10803fcc 	andi	r2,r2,255
 183895c:	10001126 	beq	r2,zero,18389a4 <tcp_parseopt+0x214>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
 1838960:	e0bffb0b 	ldhu	r2,-20(fp)
 1838964:	10800044 	addi	r2,r2,1
 1838968:	e0fffc17 	ldw	r3,-16(fp)
 183896c:	1885883a 	add	r2,r3,r2
 1838970:	10800003 	ldbu	r2,0(r2)
 1838974:	10c03fcc 	andi	r3,r2,255
 1838978:	e0bffb0b 	ldhu	r2,-20(fp)
 183897c:	1885883a 	add	r2,r3,r2
 1838980:	e0bffb0d 	sth	r2,-20(fp)
  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
 1838984:	e0fffb0b 	ldhu	r3,-20(fp)
 1838988:	e0bffd0b 	ldhu	r2,-12(fp)
 183898c:	18bfb336 	bltu	r3,r2,183885c <__alt_mem_mem_0+0xff81885c>
 1838990:	00000506 	br	18389a8 <tcp_parseopt+0x218>
      opt = opts[c];
      switch (opt) {
      case 0x00:
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
 1838994:	0001883a 	nop
 1838998:	00000306 	br	18389a8 <tcp_parseopt+0x218>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
 183899c:	0001883a 	nop
 18389a0:	00000106 	br	18389a8 <tcp_parseopt+0x218>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          /* If the length field is zero, the options are malformed
             and we don't process them further. */
          return;
 18389a4:	0001883a 	nop
           can skip past them. */
        c += opts[c + 1];
      }
    }
  }
}
 18389a8:	e037883a 	mov	sp,fp
 18389ac:	df000017 	ldw	fp,0(sp)
 18389b0:	dec00104 	addi	sp,sp,4
 18389b4:	f800283a 	ret

018389b8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 18389b8:	defffa04 	addi	sp,sp,-24
 18389bc:	dfc00515 	stw	ra,20(sp)
 18389c0:	df000415 	stw	fp,16(sp)
 18389c4:	df000404 	addi	fp,sp,16
 18389c8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 18389cc:	008000c4 	movi	r2,3
 18389d0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 18389d4:	e0fffd17 	ldw	r3,-12(fp)
 18389d8:	008003f4 	movhi	r2,15
 18389dc:	10909004 	addi	r2,r2,16960
 18389e0:	1885383a 	mul	r2,r3,r2
 18389e4:	100b883a 	mov	r5,r2
 18389e8:	0100bef4 	movhi	r4,763
 18389ec:	213c2004 	addi	r4,r4,-3968
 18389f0:	180acd00 	call	180acd0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 18389f4:	100b883a 	mov	r5,r2
 18389f8:	01200034 	movhi	r4,32768
 18389fc:	213fffc4 	addi	r4,r4,-1
 1838a00:	180acd00 	call	180acd0 <__udivsi3>
 1838a04:	100b883a 	mov	r5,r2
 1838a08:	e13fff17 	ldw	r4,-4(fp)
 1838a0c:	180acd00 	call	180acd0 <__udivsi3>
 1838a10:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1838a14:	e0bffe17 	ldw	r2,-8(fp)
 1838a18:	10002a26 	beq	r2,zero,1838ac4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 1838a1c:	e03ffc15 	stw	zero,-16(fp)
 1838a20:	00001706 	br	1838a80 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1838a24:	00a00034 	movhi	r2,32768
 1838a28:	10bfffc4 	addi	r2,r2,-1
 1838a2c:	10bfffc4 	addi	r2,r2,-1
 1838a30:	103ffe1e 	bne	r2,zero,1838a2c <__alt_mem_mem_0+0xff818a2c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1838a34:	e0fffd17 	ldw	r3,-12(fp)
 1838a38:	008003f4 	movhi	r2,15
 1838a3c:	10909004 	addi	r2,r2,16960
 1838a40:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1838a44:	100b883a 	mov	r5,r2
 1838a48:	0100bef4 	movhi	r4,763
 1838a4c:	213c2004 	addi	r4,r4,-3968
 1838a50:	180acd00 	call	180acd0 <__udivsi3>
 1838a54:	100b883a 	mov	r5,r2
 1838a58:	01200034 	movhi	r4,32768
 1838a5c:	213fffc4 	addi	r4,r4,-1
 1838a60:	180acd00 	call	180acd0 <__udivsi3>
 1838a64:	1007883a 	mov	r3,r2
 1838a68:	e0bfff17 	ldw	r2,-4(fp)
 1838a6c:	10c5c83a 	sub	r2,r2,r3
 1838a70:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1838a74:	e0bffc17 	ldw	r2,-16(fp)
 1838a78:	10800044 	addi	r2,r2,1
 1838a7c:	e0bffc15 	stw	r2,-16(fp)
 1838a80:	e0fffc17 	ldw	r3,-16(fp)
 1838a84:	e0bffe17 	ldw	r2,-8(fp)
 1838a88:	18bfe616 	blt	r3,r2,1838a24 <__alt_mem_mem_0+0xff818a24>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1838a8c:	e0fffd17 	ldw	r3,-12(fp)
 1838a90:	008003f4 	movhi	r2,15
 1838a94:	10909004 	addi	r2,r2,16960
 1838a98:	1885383a 	mul	r2,r3,r2
 1838a9c:	100b883a 	mov	r5,r2
 1838aa0:	0100bef4 	movhi	r4,763
 1838aa4:	213c2004 	addi	r4,r4,-3968
 1838aa8:	180acd00 	call	180acd0 <__udivsi3>
 1838aac:	1007883a 	mov	r3,r2
 1838ab0:	e0bfff17 	ldw	r2,-4(fp)
 1838ab4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1838ab8:	10bfffc4 	addi	r2,r2,-1
 1838abc:	103ffe1e 	bne	r2,zero,1838ab8 <__alt_mem_mem_0+0xff818ab8>
 1838ac0:	00000d06 	br	1838af8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1838ac4:	e0fffd17 	ldw	r3,-12(fp)
 1838ac8:	008003f4 	movhi	r2,15
 1838acc:	10909004 	addi	r2,r2,16960
 1838ad0:	1885383a 	mul	r2,r3,r2
 1838ad4:	100b883a 	mov	r5,r2
 1838ad8:	0100bef4 	movhi	r4,763
 1838adc:	213c2004 	addi	r4,r4,-3968
 1838ae0:	180acd00 	call	180acd0 <__udivsi3>
 1838ae4:	1007883a 	mov	r3,r2
 1838ae8:	e0bfff17 	ldw	r2,-4(fp)
 1838aec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1838af0:	10bfffc4 	addi	r2,r2,-1
 1838af4:	00bffe16 	blt	zero,r2,1838af0 <__alt_mem_mem_0+0xff818af0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1838af8:	0005883a 	mov	r2,zero
}
 1838afc:	e037883a 	mov	sp,fp
 1838b00:	dfc00117 	ldw	ra,4(sp)
 1838b04:	df000017 	ldw	fp,0(sp)
 1838b08:	dec00204 	addi	sp,sp,8
 1838b0c:	f800283a 	ret

01838b10 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1838b10:	defffb04 	addi	sp,sp,-20
 1838b14:	df000415 	stw	fp,16(sp)
 1838b18:	df000404 	addi	fp,sp,16
 1838b1c:	e13ffe15 	stw	r4,-8(fp)
 1838b20:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1838b24:	e0bfff17 	ldw	r2,-4(fp)
 1838b28:	10900070 	cmpltui	r2,r2,16385
 1838b2c:	1000021e 	bne	r2,zero,1838b38 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1838b30:	00900004 	movi	r2,16384
 1838b34:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1838b38:	e0fffe17 	ldw	r3,-8(fp)
 1838b3c:	e0bfff17 	ldw	r2,-4(fp)
 1838b40:	1885883a 	add	r2,r3,r2
 1838b44:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1838b48:	e0bffe17 	ldw	r2,-8(fp)
 1838b4c:	e0bffc15 	stw	r2,-16(fp)
 1838b50:	00000506 	br	1838b68 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1838b54:	e0bffc17 	ldw	r2,-16(fp)
 1838b58:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1838b5c:	e0bffc17 	ldw	r2,-16(fp)
 1838b60:	10800804 	addi	r2,r2,32
 1838b64:	e0bffc15 	stw	r2,-16(fp)
 1838b68:	e0fffc17 	ldw	r3,-16(fp)
 1838b6c:	e0bffd17 	ldw	r2,-12(fp)
 1838b70:	18bff836 	bltu	r3,r2,1838b54 <__alt_mem_mem_0+0xff818b54>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1838b74:	e0bffe17 	ldw	r2,-8(fp)
 1838b78:	108007cc 	andi	r2,r2,31
 1838b7c:	10000226 	beq	r2,zero,1838b88 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1838b80:	e0bffc17 	ldw	r2,-16(fp)
 1838b84:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1838b88:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1838b8c:	0001883a 	nop
 1838b90:	e037883a 	mov	sp,fp
 1838b94:	df000017 	ldw	fp,0(sp)
 1838b98:	dec00104 	addi	sp,sp,4
 1838b9c:	f800283a 	ret

01838ba0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 1838ba0:	defff404 	addi	sp,sp,-48
 1838ba4:	dfc00b15 	stw	ra,44(sp)
 1838ba8:	df000a15 	stw	fp,40(sp)
 1838bac:	df000a04 	addi	fp,sp,40
 1838bb0:	e13ffd15 	stw	r4,-12(fp)
 1838bb4:	2805883a 	mov	r2,r5
 1838bb8:	e1bfff15 	stw	r6,-4(fp)
 1838bbc:	e0bffe05 	stb	r2,-8(fp)
  struct netconn *conn;
  struct api_msg msg;

  conn = netconn_alloc(t, callback);
 1838bc0:	e17fff17 	ldw	r5,-4(fp)
 1838bc4:	e13ffd17 	ldw	r4,-12(fp)
 1838bc8:	183a73c0 	call	183a73c <netconn_alloc>
 1838bcc:	e0bff615 	stw	r2,-40(fp)
  if (conn != NULL) {
 1838bd0:	e0bff617 	ldw	r2,-40(fp)
 1838bd4:	10001b26 	beq	r2,zero,1838c44 <netconn_new_with_proto_and_callback+0xa4>
    msg.function = do_newconn;
 1838bd8:	00806134 	movhi	r2,388
 1838bdc:	10a9b704 	addi	r2,r2,-22820
 1838be0:	e0bff715 	stw	r2,-36(fp)
    msg.msg.msg.n.proto = proto;
 1838be4:	e0bffe03 	ldbu	r2,-8(fp)
 1838be8:	e0bffa05 	stb	r2,-24(fp)
    msg.msg.conn = conn;
 1838bec:	e0bff617 	ldw	r2,-40(fp)
 1838bf0:	e0bff815 	stw	r2,-32(fp)
    if (TCPIP_APIMSG(&msg) != ERR_OK) {
 1838bf4:	e0bff704 	addi	r2,fp,-36
 1838bf8:	1009883a 	mov	r4,r2
 1838bfc:	182b5e40 	call	182b5e4 <tcpip_apimsg>
 1838c00:	10803fcc 	andi	r2,r2,255
 1838c04:	1080201c 	xori	r2,r2,128
 1838c08:	10bfe004 	addi	r2,r2,-128
 1838c0c:	10000d26 	beq	r2,zero,1838c44 <netconn_new_with_proto_and_callback+0xa4>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */
      sys_sem_free(&conn->op_completed);
 1838c10:	e0bff617 	ldw	r2,-40(fp)
 1838c14:	10800404 	addi	r2,r2,16
 1838c18:	1009883a 	mov	r4,r2
 1838c1c:	1814cd40 	call	1814cd4 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 1838c20:	e0bff617 	ldw	r2,-40(fp)
 1838c24:	10800504 	addi	r2,r2,20
 1838c28:	1009883a 	mov	r4,r2
 1838c2c:	18150cc0 	call	18150cc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 1838c30:	e17ff617 	ldw	r5,-40(fp)
 1838c34:	01000204 	movi	r4,8
 1838c38:	18341e40 	call	18341e4 <memp_free>
      return NULL;
 1838c3c:	0005883a 	mov	r2,zero
 1838c40:	00000106 	br	1838c48 <netconn_new_with_proto_and_callback+0xa8>
    }
  }
  return conn;
 1838c44:	e0bff617 	ldw	r2,-40(fp)
}
 1838c48:	e037883a 	mov	sp,fp
 1838c4c:	dfc00117 	ldw	ra,4(sp)
 1838c50:	df000017 	ldw	fp,0(sp)
 1838c54:	dec00204 	addi	sp,sp,8
 1838c58:	f800283a 	ret

01838c5c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 1838c5c:	defff704 	addi	sp,sp,-36
 1838c60:	dfc00815 	stw	ra,32(sp)
 1838c64:	df000715 	stw	fp,28(sp)
 1838c68:	df000704 	addi	fp,sp,28
 1838c6c:	e13fff15 	stw	r4,-4(fp)
  struct api_msg msg;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 1838c70:	e0bfff17 	ldw	r2,-4(fp)
 1838c74:	1000021e 	bne	r2,zero,1838c80 <netconn_delete+0x24>
    return ERR_OK;
 1838c78:	0005883a 	mov	r2,zero
 1838c7c:	00000a06 	br	1838ca8 <netconn_delete+0x4c>
  }

  msg.function = do_delconn;
 1838c80:	00806134 	movhi	r2,388
 1838c84:	10ab3104 	addi	r2,r2,-21308
 1838c88:	e0bff915 	stw	r2,-28(fp)
  msg.msg.conn = conn;
 1838c8c:	e0bfff17 	ldw	r2,-4(fp)
 1838c90:	e0bffa15 	stw	r2,-24(fp)
  tcpip_apimsg(&msg);
 1838c94:	e13ff904 	addi	r4,fp,-28
 1838c98:	182b5e40 	call	182b5e4 <tcpip_apimsg>

  netconn_free(conn);
 1838c9c:	e13fff17 	ldw	r4,-4(fp)
 1838ca0:	183a8680 	call	183a868 <netconn_free>

  /* don't care for return value of do_delconn since it only calls void functions */

  return ERR_OK;
 1838ca4:	0005883a 	mov	r2,zero
}
 1838ca8:	e037883a 	mov	sp,fp
 1838cac:	dfc00117 	ldw	ra,4(sp)
 1838cb0:	df000017 	ldw	fp,0(sp)
 1838cb4:	dec00204 	addi	sp,sp,8
 1838cb8:	f800283a 	ret

01838cbc <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 1838cbc:	defff304 	addi	sp,sp,-52
 1838cc0:	dfc00c15 	stw	ra,48(sp)
 1838cc4:	df000b15 	stw	fp,44(sp)
 1838cc8:	df000b04 	addi	fp,sp,44
 1838ccc:	e13ffc15 	stw	r4,-16(fp)
 1838cd0:	e17ffd15 	stw	r5,-12(fp)
 1838cd4:	e1bffe15 	stw	r6,-8(fp)
 1838cd8:	3805883a 	mov	r2,r7
 1838cdc:	e0bfff05 	stb	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 1838ce0:	e0bffc17 	ldw	r2,-16(fp)
 1838ce4:	1000091e 	bne	r2,zero,1838d0c <netconn_getaddr+0x50>
 1838ce8:	01c06134 	movhi	r7,388
 1838cec:	39cc5f04 	addi	r7,r7,12668
 1838cf0:	01802304 	movi	r6,140
 1838cf4:	01406134 	movhi	r5,388
 1838cf8:	294c6504 	addi	r5,r5,12692
 1838cfc:	01006134 	movhi	r4,388
 1838d00:	210c6d04 	addi	r4,r4,12724
 1838d04:	1800bd80 	call	1800bd8 <printf>
 1838d08:	003fff06 	br	1838d08 <__alt_mem_mem_0+0xff818d08>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 1838d0c:	e0bffd17 	ldw	r2,-12(fp)
 1838d10:	1000091e 	bne	r2,zero,1838d38 <netconn_getaddr+0x7c>
 1838d14:	01c06134 	movhi	r7,388
 1838d18:	39cc5f04 	addi	r7,r7,12668
 1838d1c:	01802344 	movi	r6,141
 1838d20:	01406134 	movhi	r5,388
 1838d24:	294c7904 	addi	r5,r5,12772
 1838d28:	01006134 	movhi	r4,388
 1838d2c:	210c6d04 	addi	r4,r4,12724
 1838d30:	1800bd80 	call	1800bd8 <printf>
 1838d34:	003fff06 	br	1838d34 <__alt_mem_mem_0+0xff818d34>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 1838d38:	e0bffe17 	ldw	r2,-8(fp)
 1838d3c:	1000091e 	bne	r2,zero,1838d64 <netconn_getaddr+0xa8>
 1838d40:	01c06134 	movhi	r7,388
 1838d44:	39cc5f04 	addi	r7,r7,12668
 1838d48:	01802384 	movi	r6,142
 1838d4c:	01406134 	movhi	r5,388
 1838d50:	294c8104 	addi	r5,r5,12804
 1838d54:	01006134 	movhi	r4,388
 1838d58:	210c6d04 	addi	r4,r4,12724
 1838d5c:	1800bd80 	call	1800bd8 <printf>
 1838d60:	003fff06 	br	1838d60 <__alt_mem_mem_0+0xff818d60>

  msg.function = do_getaddr;
 1838d64:	00806134 	movhi	r2,388
 1838d68:	10af5f04 	addi	r2,r2,-17028
 1838d6c:	e0bff615 	stw	r2,-40(fp)
  msg.msg.conn = conn;
 1838d70:	e0bffc17 	ldw	r2,-16(fp)
 1838d74:	e0bff715 	stw	r2,-36(fp)
  msg.msg.msg.ad.ipaddr = addr;
 1838d78:	e0bffd17 	ldw	r2,-12(fp)
 1838d7c:	e0bff915 	stw	r2,-28(fp)
  msg.msg.msg.ad.port = port;
 1838d80:	e0bffe17 	ldw	r2,-8(fp)
 1838d84:	e0bffa15 	stw	r2,-24(fp)
  msg.msg.msg.ad.local = local;
 1838d88:	e0bfff03 	ldbu	r2,-4(fp)
 1838d8c:	e0bffb05 	stb	r2,-20(fp)
  err = TCPIP_APIMSG(&msg);
 1838d90:	e0bff604 	addi	r2,fp,-40
 1838d94:	1009883a 	mov	r4,r2
 1838d98:	182b5e40 	call	182b5e4 <tcpip_apimsg>
 1838d9c:	e0bff505 	stb	r2,-44(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 1838da0:	1810de40 	call	1810de4 <vTaskEnterCritical>
 1838da4:	e0bffc17 	ldw	r2,-16(fp)
 1838da8:	10800303 	ldbu	r2,12(r2)
 1838dac:	10803fcc 	andi	r2,r2,255
 1838db0:	1080201c 	xori	r2,r2,128
 1838db4:	10bfe004 	addi	r2,r2,-128
 1838db8:	10bffdd0 	cmplti	r2,r2,-9
 1838dbc:	1000031e 	bne	r2,zero,1838dcc <netconn_getaddr+0x110>
 1838dc0:	e0bffc17 	ldw	r2,-16(fp)
 1838dc4:	e0fff503 	ldbu	r3,-44(fp)
 1838dc8:	10c00305 	stb	r3,12(r2)
 1838dcc:	1810e380 	call	1810e38 <vTaskExitCritical>
  return err;
 1838dd0:	e0bff503 	ldbu	r2,-44(fp)
}
 1838dd4:	e037883a 	mov	sp,fp
 1838dd8:	dfc00117 	ldw	ra,4(sp)
 1838ddc:	df000017 	ldw	fp,0(sp)
 1838de0:	dec00204 	addi	sp,sp,8
 1838de4:	f800283a 	ret

01838de8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, ip_addr_t *addr, u16_t port)
{
 1838de8:	defff404 	addi	sp,sp,-48
 1838dec:	dfc00b15 	stw	ra,44(sp)
 1838df0:	df000a15 	stw	fp,40(sp)
 1838df4:	df000a04 	addi	fp,sp,40
 1838df8:	e13ffd15 	stw	r4,-12(fp)
 1838dfc:	e17ffe15 	stw	r5,-8(fp)
 1838e00:	3005883a 	mov	r2,r6
 1838e04:	e0bfff0d 	sth	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 1838e08:	e0bffd17 	ldw	r2,-12(fp)
 1838e0c:	1000091e 	bne	r2,zero,1838e34 <netconn_bind+0x4c>
 1838e10:	01c06134 	movhi	r7,388
 1838e14:	39cc5f04 	addi	r7,r7,12668
 1838e18:	01802ac4 	movi	r6,171
 1838e1c:	01406134 	movhi	r5,388
 1838e20:	294c8904 	addi	r5,r5,12836
 1838e24:	01006134 	movhi	r4,388
 1838e28:	210c6d04 	addi	r4,r4,12724
 1838e2c:	1800bd80 	call	1800bd8 <printf>
 1838e30:	003fff06 	br	1838e30 <__alt_mem_mem_0+0xff818e30>

  msg.function = do_bind;
 1838e34:	00806134 	movhi	r2,388
 1838e38:	10aba604 	addi	r2,r2,-20840
 1838e3c:	e0bff715 	stw	r2,-36(fp)
  msg.msg.conn = conn;
 1838e40:	e0bffd17 	ldw	r2,-12(fp)
 1838e44:	e0bff815 	stw	r2,-32(fp)
  msg.msg.msg.bc.ipaddr = addr;
 1838e48:	e0bffe17 	ldw	r2,-8(fp)
 1838e4c:	e0bffa15 	stw	r2,-24(fp)
  msg.msg.msg.bc.port = port;
 1838e50:	e0bfff0b 	ldhu	r2,-4(fp)
 1838e54:	e0bffb0d 	sth	r2,-20(fp)
  err = TCPIP_APIMSG(&msg);
 1838e58:	e0bff704 	addi	r2,fp,-36
 1838e5c:	1009883a 	mov	r4,r2
 1838e60:	182b5e40 	call	182b5e4 <tcpip_apimsg>
 1838e64:	e0bff605 	stb	r2,-40(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 1838e68:	1810de40 	call	1810de4 <vTaskEnterCritical>
 1838e6c:	e0bffd17 	ldw	r2,-12(fp)
 1838e70:	10800303 	ldbu	r2,12(r2)
 1838e74:	10803fcc 	andi	r2,r2,255
 1838e78:	1080201c 	xori	r2,r2,128
 1838e7c:	10bfe004 	addi	r2,r2,-128
 1838e80:	10bffdd0 	cmplti	r2,r2,-9
 1838e84:	1000031e 	bne	r2,zero,1838e94 <netconn_bind+0xac>
 1838e88:	e0bffd17 	ldw	r2,-12(fp)
 1838e8c:	e0fff603 	ldbu	r3,-40(fp)
 1838e90:	10c00305 	stb	r3,12(r2)
 1838e94:	1810e380 	call	1810e38 <vTaskExitCritical>
  return err;
 1838e98:	e0bff603 	ldbu	r2,-40(fp)
}
 1838e9c:	e037883a 	mov	sp,fp
 1838ea0:	dfc00117 	ldw	ra,4(sp)
 1838ea4:	df000017 	ldw	fp,0(sp)
 1838ea8:	dec00204 	addi	sp,sp,8
 1838eac:	f800283a 	ret

01838eb0 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, ip_addr_t *addr, u16_t port)
{
 1838eb0:	defff404 	addi	sp,sp,-48
 1838eb4:	dfc00b15 	stw	ra,44(sp)
 1838eb8:	df000a15 	stw	fp,40(sp)
 1838ebc:	df000a04 	addi	fp,sp,40
 1838ec0:	e13ffd15 	stw	r4,-12(fp)
 1838ec4:	e17ffe15 	stw	r5,-8(fp)
 1838ec8:	3005883a 	mov	r2,r6
 1838ecc:	e0bfff0d 	sth	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 1838ed0:	e0bffd17 	ldw	r2,-12(fp)
 1838ed4:	1000091e 	bne	r2,zero,1838efc <netconn_connect+0x4c>
 1838ed8:	01c06134 	movhi	r7,388
 1838edc:	39cc5f04 	addi	r7,r7,12668
 1838ee0:	01803144 	movi	r6,197
 1838ee4:	01406134 	movhi	r5,388
 1838ee8:	294c9004 	addi	r5,r5,12864
 1838eec:	01006134 	movhi	r4,388
 1838ef0:	210c6d04 	addi	r4,r4,12724
 1838ef4:	1800bd80 	call	1800bd8 <printf>
 1838ef8:	003fff06 	br	1838ef8 <__alt_mem_mem_0+0xff818ef8>

  msg.function = do_connect;
 1838efc:	00806134 	movhi	r2,388
 1838f00:	10ac5304 	addi	r2,r2,-20148
 1838f04:	e0bff715 	stw	r2,-36(fp)
  msg.msg.conn = conn;
 1838f08:	e0bffd17 	ldw	r2,-12(fp)
 1838f0c:	e0bff815 	stw	r2,-32(fp)
  msg.msg.msg.bc.ipaddr = addr;
 1838f10:	e0bffe17 	ldw	r2,-8(fp)
 1838f14:	e0bffa15 	stw	r2,-24(fp)
  msg.msg.msg.bc.port = port;
 1838f18:	e0bfff0b 	ldhu	r2,-4(fp)
 1838f1c:	e0bffb0d 	sth	r2,-20(fp)
  /* This is the only function which need to not block tcpip_thread */
  err = tcpip_apimsg(&msg);
 1838f20:	e0bff704 	addi	r2,fp,-36
 1838f24:	1009883a 	mov	r4,r2
 1838f28:	182b5e40 	call	182b5e4 <tcpip_apimsg>
 1838f2c:	e0bff605 	stb	r2,-40(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 1838f30:	1810de40 	call	1810de4 <vTaskEnterCritical>
 1838f34:	e0bffd17 	ldw	r2,-12(fp)
 1838f38:	10800303 	ldbu	r2,12(r2)
 1838f3c:	10803fcc 	andi	r2,r2,255
 1838f40:	1080201c 	xori	r2,r2,128
 1838f44:	10bfe004 	addi	r2,r2,-128
 1838f48:	10bffdd0 	cmplti	r2,r2,-9
 1838f4c:	1000031e 	bne	r2,zero,1838f5c <netconn_connect+0xac>
 1838f50:	e0bffd17 	ldw	r2,-12(fp)
 1838f54:	e0fff603 	ldbu	r3,-40(fp)
 1838f58:	10c00305 	stb	r3,12(r2)
 1838f5c:	1810e380 	call	1810e38 <vTaskExitCritical>
  return err;
 1838f60:	e0bff603 	ldbu	r2,-40(fp)
}
 1838f64:	e037883a 	mov	sp,fp
 1838f68:	dfc00117 	ldw	ra,4(sp)
 1838f6c:	df000017 	ldw	fp,0(sp)
 1838f70:	dec00204 	addi	sp,sp,8
 1838f74:	f800283a 	ret

01838f78 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return TODO: return value is not set here...
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 1838f78:	defff604 	addi	sp,sp,-40
 1838f7c:	dfc00915 	stw	ra,36(sp)
 1838f80:	df000815 	stw	fp,32(sp)
 1838f84:	df000804 	addi	fp,sp,32
 1838f88:	e13fff15 	stw	r4,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 1838f8c:	e0bfff17 	ldw	r2,-4(fp)
 1838f90:	1000091e 	bne	r2,zero,1838fb8 <netconn_disconnect+0x40>
 1838f94:	01c06134 	movhi	r7,388
 1838f98:	39cc5f04 	addi	r7,r7,12668
 1838f9c:	01803784 	movi	r6,222
 1838fa0:	01406134 	movhi	r5,388
 1838fa4:	294c9804 	addi	r5,r5,12896
 1838fa8:	01006134 	movhi	r4,388
 1838fac:	210c6d04 	addi	r4,r4,12724
 1838fb0:	1800bd80 	call	1800bd8 <printf>
 1838fb4:	003fff06 	br	1838fb4 <__alt_mem_mem_0+0xff818fb4>

  msg.function = do_disconnect;
 1838fb8:	00806134 	movhi	r2,388
 1838fbc:	10ace604 	addi	r2,r2,-19560
 1838fc0:	e0bff915 	stw	r2,-28(fp)
  msg.msg.conn = conn;
 1838fc4:	e0bfff17 	ldw	r2,-4(fp)
 1838fc8:	e0bffa15 	stw	r2,-24(fp)
  err = TCPIP_APIMSG(&msg);
 1838fcc:	e0bff904 	addi	r2,fp,-28
 1838fd0:	1009883a 	mov	r4,r2
 1838fd4:	182b5e40 	call	182b5e4 <tcpip_apimsg>
 1838fd8:	e0bff805 	stb	r2,-32(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 1838fdc:	1810de40 	call	1810de4 <vTaskEnterCritical>
 1838fe0:	e0bfff17 	ldw	r2,-4(fp)
 1838fe4:	10800303 	ldbu	r2,12(r2)
 1838fe8:	10803fcc 	andi	r2,r2,255
 1838fec:	1080201c 	xori	r2,r2,128
 1838ff0:	10bfe004 	addi	r2,r2,-128
 1838ff4:	10bffdd0 	cmplti	r2,r2,-9
 1838ff8:	1000031e 	bne	r2,zero,1839008 <netconn_disconnect+0x90>
 1838ffc:	e0bfff17 	ldw	r2,-4(fp)
 1839000:	e0fff803 	ldbu	r3,-32(fp)
 1839004:	10c00305 	stb	r3,12(r2)
 1839008:	1810e380 	call	1810e38 <vTaskExitCritical>
  return err;
 183900c:	e0bff803 	ldbu	r2,-32(fp)
}
 1839010:	e037883a 	mov	sp,fp
 1839014:	dfc00117 	ldw	ra,4(sp)
 1839018:	df000017 	ldw	fp,0(sp)
 183901c:	dec00204 	addi	sp,sp,8
 1839020:	f800283a 	ret

01839024 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 1839024:	defff504 	addi	sp,sp,-44
 1839028:	dfc00a15 	stw	ra,40(sp)
 183902c:	df000915 	stw	fp,36(sp)
 1839030:	df000904 	addi	fp,sp,36
 1839034:	e13ffe15 	stw	r4,-8(fp)
 1839038:	2805883a 	mov	r2,r5
 183903c:	e0bfff05 	stb	r2,-4(fp)
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 1839040:	e0bffe17 	ldw	r2,-8(fp)
 1839044:	1000091e 	bne	r2,zero,183906c <netconn_listen_with_backlog+0x48>
 1839048:	01c06134 	movhi	r7,388
 183904c:	39cc5f04 	addi	r7,r7,12668
 1839050:	01803e84 	movi	r6,250
 1839054:	01406134 	movhi	r5,388
 1839058:	294ca104 	addi	r5,r5,12932
 183905c:	01006134 	movhi	r4,388
 1839060:	210c6d04 	addi	r4,r4,12724
 1839064:	1800bd80 	call	1800bd8 <printf>
 1839068:	003fff06 	br	1839068 <__alt_mem_mem_0+0xff819068>

  msg.function = do_listen;
 183906c:	00806134 	movhi	r2,388
 1839070:	10ad0704 	addi	r2,r2,-19428
 1839074:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 1839078:	e0bffe17 	ldw	r2,-8(fp)
 183907c:	e0bff915 	stw	r2,-28(fp)
#if TCP_LISTEN_BACKLOG
  msg.msg.msg.lb.backlog = backlog;
 1839080:	e0bfff03 	ldbu	r2,-4(fp)
 1839084:	e0bffb05 	stb	r2,-20(fp)
#endif /* TCP_LISTEN_BACKLOG */
  err = TCPIP_APIMSG(&msg);
 1839088:	e0bff804 	addi	r2,fp,-32
 183908c:	1009883a 	mov	r4,r2
 1839090:	182b5e40 	call	182b5e4 <tcpip_apimsg>
 1839094:	e0bff705 	stb	r2,-36(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 1839098:	1810de40 	call	1810de4 <vTaskEnterCritical>
 183909c:	e0bffe17 	ldw	r2,-8(fp)
 18390a0:	10800303 	ldbu	r2,12(r2)
 18390a4:	10803fcc 	andi	r2,r2,255
 18390a8:	1080201c 	xori	r2,r2,128
 18390ac:	10bfe004 	addi	r2,r2,-128
 18390b0:	10bffdd0 	cmplti	r2,r2,-9
 18390b4:	1000031e 	bne	r2,zero,18390c4 <netconn_listen_with_backlog+0xa0>
 18390b8:	e0bffe17 	ldw	r2,-8(fp)
 18390bc:	e0fff703 	ldbu	r3,-36(fp)
 18390c0:	10c00305 	stb	r3,12(r2)
 18390c4:	1810e380 	call	1810e38 <vTaskExitCritical>
  return err;
 18390c8:	e0bff703 	ldbu	r2,-36(fp)
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 18390cc:	e037883a 	mov	sp,fp
 18390d0:	dfc00117 	ldw	ra,4(sp)
 18390d4:	df000017 	ldw	fp,0(sp)
 18390d8:	dec00204 	addi	sp,sp,8
 18390dc:	f800283a 	ret

018390e0 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 18390e0:	defff404 	addi	sp,sp,-48
 18390e4:	dfc00b15 	stw	ra,44(sp)
 18390e8:	df000a15 	stw	fp,40(sp)
 18390ec:	df000a04 	addi	fp,sp,40
 18390f0:	e13ffe15 	stw	r4,-8(fp)
 18390f4:	e17fff15 	stw	r5,-4(fp)
  err_t err;
#if TCP_LISTEN_BACKLOG
  struct api_msg msg;
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 18390f8:	e0bfff17 	ldw	r2,-4(fp)
 18390fc:	1000091e 	bne	r2,zero,1839124 <netconn_accept+0x44>
 1839100:	01c06134 	movhi	r7,388
 1839104:	39cc5f04 	addi	r7,r7,12668
 1839108:	01804784 	movi	r6,286
 183910c:	01406134 	movhi	r5,388
 1839110:	294ca904 	addi	r5,r5,12964
 1839114:	01006134 	movhi	r4,388
 1839118:	210c6d04 	addi	r4,r4,12724
 183911c:	1800bd80 	call	1800bd8 <printf>
 1839120:	003fff06 	br	1839120 <__alt_mem_mem_0+0xff819120>
  *new_conn = NULL;
 1839124:	e0bfff17 	ldw	r2,-4(fp)
 1839128:	10000015 	stw	zero,0(r2)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 183912c:	e0bffe17 	ldw	r2,-8(fp)
 1839130:	1000091e 	bne	r2,zero,1839158 <netconn_accept+0x78>
 1839134:	01c06134 	movhi	r7,388
 1839138:	39cc5f04 	addi	r7,r7,12668
 183913c:	01804804 	movi	r6,288
 1839140:	01406134 	movhi	r5,388
 1839144:	294cb104 	addi	r5,r5,12996
 1839148:	01006134 	movhi	r4,388
 183914c:	210c6d04 	addi	r4,r4,12724
 1839150:	1800bd80 	call	1800bd8 <printf>
 1839154:	003fff06 	br	1839154 <__alt_mem_mem_0+0xff819154>
  LWIP_ERROR("netconn_accept: invalid acceptmbox", sys_mbox_valid(&conn->acceptmbox),   return ERR_ARG;);
 1839158:	e0bffe17 	ldw	r2,-8(fp)
 183915c:	10800617 	ldw	r2,24(r2)
 1839160:	1000091e 	bne	r2,zero,1839188 <netconn_accept+0xa8>
 1839164:	01c06134 	movhi	r7,388
 1839168:	39cc5f04 	addi	r7,r7,12668
 183916c:	01804844 	movi	r6,289
 1839170:	01406134 	movhi	r5,388
 1839174:	294cb904 	addi	r5,r5,13028
 1839178:	01006134 	movhi	r4,388
 183917c:	210c6d04 	addi	r4,r4,12724
 1839180:	1800bd80 	call	1800bd8 <printf>
 1839184:	003fff06 	br	1839184 <__alt_mem_mem_0+0xff819184>

  err = conn->last_err;
 1839188:	e0bffe17 	ldw	r2,-8(fp)
 183918c:	10800303 	ldbu	r2,12(r2)
 1839190:	e0bff605 	stb	r2,-40(fp)
  if (ERR_IS_FATAL(err)) {
 1839194:	e0bff607 	ldb	r2,-40(fp)
 1839198:	10bffdc8 	cmpgei	r2,r2,-9
 183919c:	1000021e 	bne	r2,zero,18391a8 <netconn_accept+0xc8>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return err;
 18391a0:	e0bff603 	ldbu	r2,-40(fp)
 18391a4:	00003f06 	br	18392a4 <netconn_accept+0x1c4>
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 18391a8:	e0bffe17 	ldw	r2,-8(fp)
 18391ac:	10c00604 	addi	r3,r2,24
 18391b0:	e0bffe17 	ldw	r2,-8(fp)
 18391b4:	10800817 	ldw	r2,32(r2)
 18391b8:	1009883a 	mov	r4,r2
 18391bc:	e0bff704 	addi	r2,fp,-36
 18391c0:	200d883a 	mov	r6,r4
 18391c4:	100b883a 	mov	r5,r2
 18391c8:	1809883a 	mov	r4,r3
 18391cc:	18151ec0 	call	18151ec <sys_arch_mbox_fetch>
 18391d0:	10bfffd8 	cmpnei	r2,r2,-1
 18391d4:	10000e1e 	bne	r2,zero,1839210 <netconn_accept+0x130>
    NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
 18391d8:	1810de40 	call	1810de4 <vTaskEnterCritical>
 18391dc:	e0bffe17 	ldw	r2,-8(fp)
 18391e0:	10800303 	ldbu	r2,12(r2)
 18391e4:	10803fcc 	andi	r2,r2,255
 18391e8:	1080201c 	xori	r2,r2,128
 18391ec:	10bfe004 	addi	r2,r2,-128
 18391f0:	10bffdd0 	cmplti	r2,r2,-9
 18391f4:	1000031e 	bne	r2,zero,1839204 <netconn_accept+0x124>
 18391f8:	e0bffe17 	ldw	r2,-8(fp)
 18391fc:	00ffff44 	movi	r3,-3
 1839200:	10c00305 	stb	r3,12(r2)
 1839204:	1810e380 	call	1810e38 <vTaskExitCritical>
    return ERR_TIMEOUT;
 1839208:	00bfff44 	movi	r2,-3
 183920c:	00002506 	br	18392a4 <netconn_accept+0x1c4>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 1839210:	e0bffe17 	ldw	r2,-8(fp)
 1839214:	10800c17 	ldw	r2,48(r2)
 1839218:	10000626 	beq	r2,zero,1839234 <netconn_accept+0x154>
 183921c:	e0bffe17 	ldw	r2,-8(fp)
 1839220:	10800c17 	ldw	r2,48(r2)
 1839224:	000d883a 	mov	r6,zero
 1839228:	01400044 	movi	r5,1
 183922c:	e13ffe17 	ldw	r4,-8(fp)
 1839230:	103ee83a 	callr	r2

  if (newconn == NULL) {
 1839234:	e0bff717 	ldw	r2,-36(fp)
 1839238:	10000e1e 	bne	r2,zero,1839274 <netconn_accept+0x194>
    /* connection has been aborted */
    NETCONN_SET_SAFE_ERR(conn, ERR_ABRT);
 183923c:	1810de40 	call	1810de4 <vTaskEnterCritical>
 1839240:	e0bffe17 	ldw	r2,-8(fp)
 1839244:	10800303 	ldbu	r2,12(r2)
 1839248:	10803fcc 	andi	r2,r2,255
 183924c:	1080201c 	xori	r2,r2,128
 1839250:	10bfe004 	addi	r2,r2,-128
 1839254:	10bffdd0 	cmplti	r2,r2,-9
 1839258:	1000031e 	bne	r2,zero,1839268 <netconn_accept+0x188>
 183925c:	e0bffe17 	ldw	r2,-8(fp)
 1839260:	00fffd84 	movi	r3,-10
 1839264:	10c00305 	stb	r3,12(r2)
 1839268:	1810e380 	call	1810e38 <vTaskExitCritical>
    return ERR_ABRT;
 183926c:	00bffd84 	movi	r2,-10
 1839270:	00000c06 	br	18392a4 <netconn_accept+0x1c4>
  }
#if TCP_LISTEN_BACKLOG
  /* Let the stack know that we have accepted the connection. */
  msg.function = do_recv;
 1839274:	00806134 	movhi	r2,388
 1839278:	10ae1804 	addi	r2,r2,-18336
 183927c:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 1839280:	e0bffe17 	ldw	r2,-8(fp)
 1839284:	e0bff915 	stw	r2,-28(fp)
  /* don't care for the return value of do_recv */
  TCPIP_APIMSG(&msg);
 1839288:	e0bff804 	addi	r2,fp,-32
 183928c:	1009883a 	mov	r4,r2
 1839290:	182b5e40 	call	182b5e4 <tcpip_apimsg>
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 1839294:	e0fff717 	ldw	r3,-36(fp)
 1839298:	e0bfff17 	ldw	r2,-4(fp)
 183929c:	10c00015 	stw	r3,0(r2)
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 18392a0:	0005883a 	mov	r2,zero
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 18392a4:	e037883a 	mov	sp,fp
 18392a8:	dfc00117 	ldw	ra,4(sp)
 18392ac:	df000017 	ldw	fp,0(sp)
 18392b0:	dec00204 	addi	sp,sp,8
 18392b4:	f800283a 	ret

018392b8 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 18392b8:	defff404 	addi	sp,sp,-48
 18392bc:	dfc00b15 	stw	ra,44(sp)
 18392c0:	df000a15 	stw	fp,40(sp)
 18392c4:	df000a04 	addi	fp,sp,40
 18392c8:	e13ffe15 	stw	r4,-8(fp)
 18392cc:	e17fff15 	stw	r5,-4(fp)
  void *buf = NULL;
 18392d0:	e03ff715 	stw	zero,-36(fp)
  err_t err;
#if LWIP_TCP
  struct api_msg msg;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 18392d4:	e0bfff17 	ldw	r2,-4(fp)
 18392d8:	1000091e 	bne	r2,zero,1839300 <netconn_recv_data+0x48>
 18392dc:	01c06134 	movhi	r7,388
 18392e0:	39cc5f04 	addi	r7,r7,12668
 18392e4:	018057c4 	movi	r6,351
 18392e8:	01406134 	movhi	r5,388
 18392ec:	294cc204 	addi	r5,r5,13064
 18392f0:	01006134 	movhi	r4,388
 18392f4:	210c6d04 	addi	r4,r4,12724
 18392f8:	1800bd80 	call	1800bd8 <printf>
 18392fc:	003fff06 	br	18392fc <__alt_mem_mem_0+0xff8192fc>
  *new_buf = NULL;
 1839300:	e0bfff17 	ldw	r2,-4(fp)
 1839304:	10000015 	stw	zero,0(r2)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 1839308:	e0bffe17 	ldw	r2,-8(fp)
 183930c:	1000091e 	bne	r2,zero,1839334 <netconn_recv_data+0x7c>
 1839310:	01c06134 	movhi	r7,388
 1839314:	39cc5f04 	addi	r7,r7,12668
 1839318:	01805844 	movi	r6,353
 183931c:	01406134 	movhi	r5,388
 1839320:	294cca04 	addi	r5,r5,13096
 1839324:	01006134 	movhi	r4,388
 1839328:	210c6d04 	addi	r4,r4,12724
 183932c:	1800bd80 	call	1800bd8 <printf>
 1839330:	003fff06 	br	1839330 <__alt_mem_mem_0+0xff819330>
  LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 1839334:	e0bffe17 	ldw	r2,-8(fp)
 1839338:	10800517 	ldw	r2,20(r2)
 183933c:	1000091e 	bne	r2,zero,1839364 <netconn_recv_data+0xac>
 1839340:	01c06134 	movhi	r7,388
 1839344:	39cc5f04 	addi	r7,r7,12668
 1839348:	01805884 	movi	r6,354
 183934c:	01406134 	movhi	r5,388
 1839350:	294cd104 	addi	r5,r5,13124
 1839354:	01006134 	movhi	r4,388
 1839358:	210c6d04 	addi	r4,r4,12724
 183935c:	1800bd80 	call	1800bd8 <printf>
 1839360:	003fff06 	br	1839360 <__alt_mem_mem_0+0xff819360>

  err = conn->last_err;
 1839364:	e0bffe17 	ldw	r2,-8(fp)
 1839368:	10800303 	ldbu	r2,12(r2)
 183936c:	e0bff685 	stb	r2,-38(fp)
  if (ERR_IS_FATAL(err)) {
 1839370:	e0bff687 	ldb	r2,-38(fp)
 1839374:	10bffdc8 	cmpgei	r2,r2,-9
 1839378:	1000021e 	bne	r2,zero,1839384 <netconn_recv_data+0xcc>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return err;
 183937c:	e0bff683 	ldbu	r2,-38(fp)
 1839380:	00006506 	br	1839518 <netconn_recv_data+0x260>
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 1839384:	e0bffe17 	ldw	r2,-8(fp)
 1839388:	10c00504 	addi	r3,r2,20
 183938c:	e0bffe17 	ldw	r2,-8(fp)
 1839390:	10800817 	ldw	r2,32(r2)
 1839394:	1009883a 	mov	r4,r2
 1839398:	e0bff704 	addi	r2,fp,-36
 183939c:	200d883a 	mov	r6,r4
 18393a0:	100b883a 	mov	r5,r2
 18393a4:	1809883a 	mov	r4,r3
 18393a8:	18151ec0 	call	18151ec <sys_arch_mbox_fetch>
 18393ac:	10bfffd8 	cmpnei	r2,r2,-1
 18393b0:	10000e1e 	bne	r2,zero,18393ec <netconn_recv_data+0x134>
    NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
 18393b4:	1810de40 	call	1810de4 <vTaskEnterCritical>
 18393b8:	e0bffe17 	ldw	r2,-8(fp)
 18393bc:	10800303 	ldbu	r2,12(r2)
 18393c0:	10803fcc 	andi	r2,r2,255
 18393c4:	1080201c 	xori	r2,r2,128
 18393c8:	10bfe004 	addi	r2,r2,-128
 18393cc:	10bffdd0 	cmplti	r2,r2,-9
 18393d0:	1000031e 	bne	r2,zero,18393e0 <netconn_recv_data+0x128>
 18393d4:	e0bffe17 	ldw	r2,-8(fp)
 18393d8:	00ffff44 	movi	r3,-3
 18393dc:	10c00305 	stb	r3,12(r2)
 18393e0:	1810e380 	call	1810e38 <vTaskExitCritical>
    return ERR_TIMEOUT;
 18393e4:	00bfff44 	movi	r2,-3
 18393e8:	00004b06 	br	1839518 <netconn_recv_data+0x260>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (conn->type == NETCONN_TCP)
 18393ec:	e0bffe17 	ldw	r2,-8(fp)
 18393f0:	10800017 	ldw	r2,0(r2)
 18393f4:	10800418 	cmpnei	r2,r2,16
 18393f8:	1000351e 	bne	r2,zero,18394d0 <netconn_recv_data+0x218>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!netconn_get_noautorecved(conn) || (buf == NULL)) {
 18393fc:	e0bffe17 	ldw	r2,-8(fp)
 1839400:	10800903 	ldbu	r2,36(r2)
 1839404:	10803fcc 	andi	r2,r2,255
 1839408:	1080020c 	andi	r2,r2,8
 183940c:	10000226 	beq	r2,zero,1839418 <netconn_recv_data+0x160>
 1839410:	e0bff717 	ldw	r2,-36(fp)
 1839414:	1000111e 	bne	r2,zero,183945c <netconn_recv_data+0x1a4>
      /* Let the stack know that we have taken the data. */
      /* TODO: Speedup: Don't block and wait for the answer here
         (to prevent multiple thread-switches). */
      msg.function = do_recv;
 1839418:	00806134 	movhi	r2,388
 183941c:	10ae1804 	addi	r2,r2,-18336
 1839420:	e0bff815 	stw	r2,-32(fp)
      msg.msg.conn = conn;
 1839424:	e0bffe17 	ldw	r2,-8(fp)
 1839428:	e0bff915 	stw	r2,-28(fp)
      if (buf != NULL) {
 183942c:	e0bff717 	ldw	r2,-36(fp)
 1839430:	10000526 	beq	r2,zero,1839448 <netconn_recv_data+0x190>
        msg.msg.msg.r.len = ((struct pbuf *)buf)->tot_len;
 1839434:	e0bff717 	ldw	r2,-36(fp)
 1839438:	1080020b 	ldhu	r2,8(r2)
 183943c:	10bfffcc 	andi	r2,r2,65535
 1839440:	e0bffb15 	stw	r2,-20(fp)
 1839444:	00000206 	br	1839450 <netconn_recv_data+0x198>
      } else {
        msg.msg.msg.r.len = 1;
 1839448:	00800044 	movi	r2,1
 183944c:	e0bffb15 	stw	r2,-20(fp)
      }
      /* don't care for the return value of do_recv */
      TCPIP_APIMSG(&msg);
 1839450:	e0bff804 	addi	r2,fp,-32
 1839454:	1009883a 	mov	r4,r2
 1839458:	182b5e40 	call	182b5e4 <tcpip_apimsg>
    }

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 183945c:	e0bff717 	ldw	r2,-36(fp)
 1839460:	1000171e 	bne	r2,zero,18394c0 <netconn_recv_data+0x208>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 1839464:	e0bffe17 	ldw	r2,-8(fp)
 1839468:	10800c17 	ldw	r2,48(r2)
 183946c:	10000626 	beq	r2,zero,1839488 <netconn_recv_data+0x1d0>
 1839470:	e0bffe17 	ldw	r2,-8(fp)
 1839474:	10800c17 	ldw	r2,48(r2)
 1839478:	000d883a 	mov	r6,zero
 183947c:	01400044 	movi	r5,1
 1839480:	e13ffe17 	ldw	r4,-8(fp)
 1839484:	103ee83a 	callr	r2
      /* Avoid to lose any previous error code */
      NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 1839488:	1810de40 	call	1810de4 <vTaskEnterCritical>
 183948c:	e0bffe17 	ldw	r2,-8(fp)
 1839490:	10800303 	ldbu	r2,12(r2)
 1839494:	10803fcc 	andi	r2,r2,255
 1839498:	1080201c 	xori	r2,r2,128
 183949c:	10bfe004 	addi	r2,r2,-128
 18394a0:	10bffdd0 	cmplti	r2,r2,-9
 18394a4:	1000031e 	bne	r2,zero,18394b4 <netconn_recv_data+0x1fc>
 18394a8:	e0bffe17 	ldw	r2,-8(fp)
 18394ac:	00fffd04 	movi	r3,-12
 18394b0:	10c00305 	stb	r3,12(r2)
 18394b4:	1810e380 	call	1810e38 <vTaskExitCritical>
      return ERR_CLSD;
 18394b8:	00bffd04 	movi	r2,-12
 18394bc:	00001606 	br	1839518 <netconn_recv_data+0x260>
    }
    len = ((struct pbuf *)buf)->tot_len;
 18394c0:	e0bff717 	ldw	r2,-36(fp)
 18394c4:	1080020b 	ldhu	r2,8(r2)
 18394c8:	e0bff60d 	sth	r2,-40(fp)
 18394cc:	00000406 	br	18394e0 <netconn_recv_data+0x228>
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
    len = netbuf_len((struct netbuf *)buf);
 18394d0:	e0bff717 	ldw	r2,-36(fp)
 18394d4:	10800017 	ldw	r2,0(r2)
 18394d8:	1080020b 	ldhu	r2,8(r2)
 18394dc:	e0bff60d 	sth	r2,-40(fp)

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 18394e0:	e0bffe17 	ldw	r2,-8(fp)
 18394e4:	10800c17 	ldw	r2,48(r2)
 18394e8:	10000726 	beq	r2,zero,1839508 <netconn_recv_data+0x250>
 18394ec:	e0bffe17 	ldw	r2,-8(fp)
 18394f0:	10800c17 	ldw	r2,48(r2)
 18394f4:	e0fff60b 	ldhu	r3,-40(fp)
 18394f8:	180d883a 	mov	r6,r3
 18394fc:	01400044 	movi	r5,1
 1839500:	e13ffe17 	ldw	r4,-8(fp)
 1839504:	103ee83a 	callr	r2

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 1839508:	e0fff717 	ldw	r3,-36(fp)
 183950c:	e0bfff17 	ldw	r2,-4(fp)
 1839510:	10c00015 	stw	r3,0(r2)
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 1839514:	0005883a 	mov	r2,zero
}
 1839518:	e037883a 	mov	sp,fp
 183951c:	dfc00117 	ldw	ra,4(sp)
 1839520:	df000017 	ldw	fp,0(sp)
 1839524:	dec00204 	addi	sp,sp,8
 1839528:	f800283a 	ret

0183952c <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
 183952c:	defffc04 	addi	sp,sp,-16
 1839530:	dfc00315 	stw	ra,12(sp)
 1839534:	df000215 	stw	fp,8(sp)
 1839538:	df000204 	addi	fp,sp,8
 183953c:	e13ffe15 	stw	r4,-8(fp)
 1839540:	e17fff15 	stw	r5,-4(fp)
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 1839544:	e0bffe17 	ldw	r2,-8(fp)
 1839548:	10000426 	beq	r2,zero,183955c <netconn_recv_tcp_pbuf+0x30>
 183954c:	e0bffe17 	ldw	r2,-8(fp)
 1839550:	10800017 	ldw	r2,0(r2)
 1839554:	10800420 	cmpeqi	r2,r2,16
 1839558:	1000091e 	bne	r2,zero,1839580 <netconn_recv_tcp_pbuf+0x54>
 183955c:	01c06134 	movhi	r7,388
 1839560:	39cc5f04 	addi	r7,r7,12668
 1839564:	01806e04 	movi	r6,440
 1839568:	01406134 	movhi	r5,388
 183956c:	294cca04 	addi	r5,r5,13096
 1839570:	01006134 	movhi	r4,388
 1839574:	210c6d04 	addi	r4,r4,12724
 1839578:	1800bd80 	call	1800bd8 <printf>
 183957c:	003fff06 	br	183957c <__alt_mem_mem_0+0xff81957c>
             netconn_type(conn) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
 1839580:	e17fff17 	ldw	r5,-4(fp)
 1839584:	e13ffe17 	ldw	r4,-8(fp)
 1839588:	18392b80 	call	18392b8 <netconn_recv_data>
}
 183958c:	e037883a 	mov	sp,fp
 1839590:	dfc00117 	ldw	ra,4(sp)
 1839594:	df000017 	ldw	fp,0(sp)
 1839598:	dec00204 	addi	sp,sp,8
 183959c:	f800283a 	ret

018395a0 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 18395a0:	defff904 	addi	sp,sp,-28
 18395a4:	dfc00615 	stw	ra,24(sp)
 18395a8:	df000515 	stw	fp,20(sp)
 18395ac:	df000504 	addi	fp,sp,20
 18395b0:	e13ffe15 	stw	r4,-8(fp)
 18395b4:	e17fff15 	stw	r5,-4(fp)
#if LWIP_TCP
  struct netbuf *buf = NULL;
 18395b8:	e03ffb15 	stw	zero,-20(fp)
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 18395bc:	e0bfff17 	ldw	r2,-4(fp)
 18395c0:	1000091e 	bne	r2,zero,18395e8 <netconn_recv+0x48>
 18395c4:	01c06134 	movhi	r7,388
 18395c8:	39cc5f04 	addi	r7,r7,12668
 18395cc:	01807344 	movi	r6,461
 18395d0:	01406134 	movhi	r5,388
 18395d4:	294cc204 	addi	r5,r5,13064
 18395d8:	01006134 	movhi	r4,388
 18395dc:	210c6d04 	addi	r4,r4,12724
 18395e0:	1800bd80 	call	1800bd8 <printf>
 18395e4:	003fff06 	br	18395e4 <__alt_mem_mem_0+0xff8195e4>
  *new_buf = NULL;
 18395e8:	e0bfff17 	ldw	r2,-4(fp)
 18395ec:	10000015 	stw	zero,0(r2)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 18395f0:	e0bffe17 	ldw	r2,-8(fp)
 18395f4:	1000091e 	bne	r2,zero,183961c <netconn_recv+0x7c>
 18395f8:	01c06134 	movhi	r7,388
 18395fc:	39cc5f04 	addi	r7,r7,12668
 1839600:	018073c4 	movi	r6,463
 1839604:	01406134 	movhi	r5,388
 1839608:	294cca04 	addi	r5,r5,13096
 183960c:	01006134 	movhi	r4,388
 1839610:	210c6d04 	addi	r4,r4,12724
 1839614:	1800bd80 	call	1800bd8 <printf>
 1839618:	003fff06 	br	1839618 <__alt_mem_mem_0+0xff819618>
  LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 183961c:	e0bffe17 	ldw	r2,-8(fp)
 1839620:	10800517 	ldw	r2,20(r2)
 1839624:	1000091e 	bne	r2,zero,183964c <netconn_recv+0xac>
 1839628:	01c06134 	movhi	r7,388
 183962c:	39cc5f04 	addi	r7,r7,12668
 1839630:	01807404 	movi	r6,464
 1839634:	01406134 	movhi	r5,388
 1839638:	294cd104 	addi	r5,r5,13124
 183963c:	01006134 	movhi	r4,388
 1839640:	210c6d04 	addi	r4,r4,12724
 1839644:	1800bd80 	call	1800bd8 <printf>
 1839648:	003fff06 	br	1839648 <__alt_mem_mem_0+0xff819648>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (conn->type == NETCONN_TCP)
 183964c:	e0bffe17 	ldw	r2,-8(fp)
 1839650:	10800017 	ldw	r2,0(r2)
 1839654:	10800418 	cmpnei	r2,r2,16
 1839658:	10002f1e 	bne	r2,zero,1839718 <netconn_recv+0x178>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 183965c:	e03ffd15 	stw	zero,-12(fp)
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 1839660:	010001c4 	movi	r4,7
 1839664:	18340280 	call	1834028 <memp_malloc>
 1839668:	e0bffb15 	stw	r2,-20(fp)
    if (buf == NULL) {
 183966c:	e0bffb17 	ldw	r2,-20(fp)
 1839670:	10000e1e 	bne	r2,zero,18396ac <netconn_recv+0x10c>
      NETCONN_SET_SAFE_ERR(conn, ERR_MEM);
 1839674:	1810de40 	call	1810de4 <vTaskEnterCritical>
 1839678:	e0bffe17 	ldw	r2,-8(fp)
 183967c:	10800303 	ldbu	r2,12(r2)
 1839680:	10803fcc 	andi	r2,r2,255
 1839684:	1080201c 	xori	r2,r2,128
 1839688:	10bfe004 	addi	r2,r2,-128
 183968c:	10bffdd0 	cmplti	r2,r2,-9
 1839690:	1000031e 	bne	r2,zero,18396a0 <netconn_recv+0x100>
 1839694:	e0bffe17 	ldw	r2,-8(fp)
 1839698:	00ffffc4 	movi	r3,-1
 183969c:	10c00305 	stb	r3,12(r2)
 18396a0:	1810e380 	call	1810e38 <vTaskExitCritical>
      return ERR_MEM;
 18396a4:	00bfffc4 	movi	r2,-1
 18396a8:	00001e06 	br	1839724 <netconn_recv+0x184>
    }

    err = netconn_recv_data(conn, (void **)&p);
 18396ac:	e0bffd04 	addi	r2,fp,-12
 18396b0:	100b883a 	mov	r5,r2
 18396b4:	e13ffe17 	ldw	r4,-8(fp)
 18396b8:	18392b80 	call	18392b8 <netconn_recv_data>
 18396bc:	e0bffc05 	stb	r2,-16(fp)
    if (err != ERR_OK) {
 18396c0:	e0bffc07 	ldb	r2,-16(fp)
 18396c4:	10000526 	beq	r2,zero,18396dc <netconn_recv+0x13c>
      memp_free(MEMP_NETBUF, buf);
 18396c8:	e17ffb17 	ldw	r5,-20(fp)
 18396cc:	010001c4 	movi	r4,7
 18396d0:	18341e40 	call	18341e4 <memp_free>
      return err;
 18396d4:	e0bffc03 	ldbu	r2,-16(fp)
 18396d8:	00001206 	br	1839724 <netconn_recv+0x184>
    }
    LWIP_ASSERT("p != NULL", p != NULL);

    buf->p = p;
 18396dc:	e0fffd17 	ldw	r3,-12(fp)
 18396e0:	e0bffb17 	ldw	r2,-20(fp)
 18396e4:	10c00015 	stw	r3,0(r2)
    buf->ptr = p;
 18396e8:	e0fffd17 	ldw	r3,-12(fp)
 18396ec:	e0bffb17 	ldw	r2,-20(fp)
 18396f0:	10c00115 	stw	r3,4(r2)
    buf->port = 0;
 18396f4:	e0bffb17 	ldw	r2,-20(fp)
 18396f8:	1000030d 	sth	zero,12(r2)
    ip_addr_set_any(&buf->addr);
 18396fc:	e0bffb17 	ldw	r2,-20(fp)
 1839700:	10000215 	stw	zero,8(r2)
    *new_buf = buf;
 1839704:	e0bfff17 	ldw	r2,-4(fp)
 1839708:	e0fffb17 	ldw	r3,-20(fp)
 183970c:	10c00015 	stw	r3,0(r2)
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 1839710:	0005883a 	mov	r2,zero
 1839714:	00000306 	br	1839724 <netconn_recv+0x184>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 1839718:	e17fff17 	ldw	r5,-4(fp)
 183971c:	e13ffe17 	ldw	r4,-8(fp)
 1839720:	18392b80 	call	18392b8 <netconn_recv_data>
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 1839724:	e037883a 	mov	sp,fp
 1839728:	dfc00117 	ldw	ra,4(sp)
 183972c:	df000017 	ldw	fp,0(sp)
 1839730:	dec00204 	addi	sp,sp,8
 1839734:	f800283a 	ret

01839738 <netconn_recved>:
 * @param conn the netconn for which to update the receive window
 * @param length amount of data processed (ATTENTION: this must be accurate!)
 */
void
netconn_recved(struct netconn *conn, u32_t length)
{
 1839738:	defff604 	addi	sp,sp,-40
 183973c:	dfc00915 	stw	ra,36(sp)
 1839740:	df000815 	stw	fp,32(sp)
 1839744:	df000804 	addi	fp,sp,32
 1839748:	e13ffe15 	stw	r4,-8(fp)
 183974c:	e17fff15 	stw	r5,-4(fp)
#if LWIP_TCP
  if ((conn != NULL) && (conn->type == NETCONN_TCP) &&
 1839750:	e0bffe17 	ldw	r2,-8(fp)
 1839754:	10001226 	beq	r2,zero,18397a0 <netconn_recved+0x68>
 1839758:	e0bffe17 	ldw	r2,-8(fp)
 183975c:	10800017 	ldw	r2,0(r2)
 1839760:	10800418 	cmpnei	r2,r2,16
 1839764:	10000e1e 	bne	r2,zero,18397a0 <netconn_recved+0x68>
      (netconn_get_noautorecved(conn))) {
 1839768:	e0bffe17 	ldw	r2,-8(fp)
 183976c:	10800903 	ldbu	r2,36(r2)
 1839770:	10803fcc 	andi	r2,r2,255
 1839774:	1080020c 	andi	r2,r2,8
 */
void
netconn_recved(struct netconn *conn, u32_t length)
{
#if LWIP_TCP
  if ((conn != NULL) && (conn->type == NETCONN_TCP) &&
 1839778:	10000926 	beq	r2,zero,18397a0 <netconn_recved+0x68>
      (netconn_get_noautorecved(conn))) {
    struct api_msg msg;
    /* Let the stack know that we have taken the data. */
    /* TODO: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    msg.function = do_recv;
 183977c:	00806134 	movhi	r2,388
 1839780:	10ae1804 	addi	r2,r2,-18336
 1839784:	e0bff815 	stw	r2,-32(fp)
    msg.msg.conn = conn;
 1839788:	e0bffe17 	ldw	r2,-8(fp)
 183978c:	e0bff915 	stw	r2,-28(fp)
    msg.msg.msg.r.len = length;
 1839790:	e0bfff17 	ldw	r2,-4(fp)
 1839794:	e0bffb15 	stw	r2,-20(fp)
    /* don't care for the return value of do_recv */
    TCPIP_APIMSG(&msg);
 1839798:	e13ff804 	addi	r4,fp,-32
 183979c:	182b5e40 	call	182b5e4 <tcpip_apimsg>
  }
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(length);
#endif /* LWIP_TCP */
}
 18397a0:	0001883a 	nop
 18397a4:	e037883a 	mov	sp,fp
 18397a8:	dfc00117 	ldw	ra,4(sp)
 18397ac:	df000017 	ldw	fp,0(sp)
 18397b0:	dec00204 	addi	sp,sp,8
 18397b4:	f800283a 	ret

018397b8 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, ip_addr_t *addr, u16_t port)
{
 18397b8:	defffa04 	addi	sp,sp,-24
 18397bc:	dfc00515 	stw	ra,20(sp)
 18397c0:	df000415 	stw	fp,16(sp)
 18397c4:	df000404 	addi	fp,sp,16
 18397c8:	e13ffc15 	stw	r4,-16(fp)
 18397cc:	e17ffd15 	stw	r5,-12(fp)
 18397d0:	e1bffe15 	stw	r6,-8(fp)
 18397d4:	3805883a 	mov	r2,r7
 18397d8:	e0bfff0d 	sth	r2,-4(fp)
  if (buf != NULL) {
 18397dc:	e0bffd17 	ldw	r2,-12(fp)
 18397e0:	10000f26 	beq	r2,zero,1839820 <netconn_sendto+0x68>
    ip_addr_set(&buf->addr, addr);
 18397e4:	e0bffe17 	ldw	r2,-8(fp)
 18397e8:	10000326 	beq	r2,zero,18397f8 <netconn_sendto+0x40>
 18397ec:	e0bffe17 	ldw	r2,-8(fp)
 18397f0:	10800017 	ldw	r2,0(r2)
 18397f4:	00000106 	br	18397fc <netconn_sendto+0x44>
 18397f8:	0005883a 	mov	r2,zero
 18397fc:	e0fffd17 	ldw	r3,-12(fp)
 1839800:	18800215 	stw	r2,8(r3)
    buf->port = port;
 1839804:	e0bffd17 	ldw	r2,-12(fp)
 1839808:	e0ffff0b 	ldhu	r3,-4(fp)
 183980c:	10c0030d 	sth	r3,12(r2)
    return netconn_send(conn, buf);
 1839810:	e17ffd17 	ldw	r5,-12(fp)
 1839814:	e13ffc17 	ldw	r4,-16(fp)
 1839818:	18398380 	call	1839838 <netconn_send>
 183981c:	00000106 	br	1839824 <netconn_sendto+0x6c>
  }
  return ERR_VAL;
 1839820:	00bffe84 	movi	r2,-6
}
 1839824:	e037883a 	mov	sp,fp
 1839828:	dfc00117 	ldw	ra,4(sp)
 183982c:	df000017 	ldw	fp,0(sp)
 1839830:	dec00204 	addi	sp,sp,8
 1839834:	f800283a 	ret

01839838 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 1839838:	defff504 	addi	sp,sp,-44
 183983c:	dfc00a15 	stw	ra,40(sp)
 1839840:	df000915 	stw	fp,36(sp)
 1839844:	df000904 	addi	fp,sp,36
 1839848:	e13ffe15 	stw	r4,-8(fp)
 183984c:	e17fff15 	stw	r5,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 1839850:	e0bffe17 	ldw	r2,-8(fp)
 1839854:	1000091e 	bne	r2,zero,183987c <netconn_send+0x44>
 1839858:	01c06134 	movhi	r7,388
 183985c:	39cc5f04 	addi	r7,r7,12668
 1839860:	01808f04 	movi	r6,572
 1839864:	01406134 	movhi	r5,388
 1839868:	294cda04 	addi	r5,r5,13160
 183986c:	01006134 	movhi	r4,388
 1839870:	210c6d04 	addi	r4,r4,12724
 1839874:	1800bd80 	call	1800bd8 <printf>
 1839878:	003fff06 	br	1839878 <__alt_mem_mem_0+0xff819878>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));
  msg.function = do_send;
 183987c:	00806134 	movhi	r2,388
 1839880:	10ad8704 	addi	r2,r2,-18916
 1839884:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 1839888:	e0bffe17 	ldw	r2,-8(fp)
 183988c:	e0bff915 	stw	r2,-28(fp)
  msg.msg.msg.b = buf;
 1839890:	e0bfff17 	ldw	r2,-4(fp)
 1839894:	e0bffb15 	stw	r2,-20(fp)
  err = TCPIP_APIMSG(&msg);
 1839898:	e0bff804 	addi	r2,fp,-32
 183989c:	1009883a 	mov	r4,r2
 18398a0:	182b5e40 	call	182b5e4 <tcpip_apimsg>
 18398a4:	e0bff705 	stb	r2,-36(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 18398a8:	1810de40 	call	1810de4 <vTaskEnterCritical>
 18398ac:	e0bffe17 	ldw	r2,-8(fp)
 18398b0:	10800303 	ldbu	r2,12(r2)
 18398b4:	10803fcc 	andi	r2,r2,255
 18398b8:	1080201c 	xori	r2,r2,128
 18398bc:	10bfe004 	addi	r2,r2,-128
 18398c0:	10bffdd0 	cmplti	r2,r2,-9
 18398c4:	1000031e 	bne	r2,zero,18398d4 <netconn_send+0x9c>
 18398c8:	e0bffe17 	ldw	r2,-8(fp)
 18398cc:	e0fff703 	ldbu	r3,-36(fp)
 18398d0:	10c00305 	stb	r3,12(r2)
 18398d4:	1810e380 	call	1810e38 <vTaskExitCritical>
  return err;
 18398d8:	e0bff703 	ldbu	r2,-36(fp)
}
 18398dc:	e037883a 	mov	sp,fp
 18398e0:	dfc00117 	ldw	ra,4(sp)
 18398e4:	df000017 	ldw	fp,0(sp)
 18398e8:	dec00204 	addi	sp,sp,8
 18398ec:	f800283a 	ret

018398f0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 18398f0:	defff304 	addi	sp,sp,-52
 18398f4:	dfc00c15 	stw	ra,48(sp)
 18398f8:	df000b15 	stw	fp,44(sp)
 18398fc:	df000b04 	addi	fp,sp,44
 1839900:	e13ffc15 	stw	r4,-16(fp)
 1839904:	e17ffd15 	stw	r5,-12(fp)
 1839908:	e1bffe15 	stw	r6,-8(fp)
 183990c:	3805883a 	mov	r2,r7
 1839910:	e0bfff05 	stb	r2,-4(fp)
  struct api_msg msg;
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 1839914:	e0bffc17 	ldw	r2,-16(fp)
 1839918:	1000091e 	bne	r2,zero,1839940 <netconn_write_partly+0x50>
 183991c:	01c06134 	movhi	r7,388
 1839920:	39cc5f04 	addi	r7,r7,12668
 1839924:	01809744 	movi	r6,605
 1839928:	01406134 	movhi	r5,388
 183992c:	294ce104 	addi	r5,r5,13188
 1839930:	01006134 	movhi	r4,388
 1839934:	210c6d04 	addi	r4,r4,12724
 1839938:	1800bd80 	call	1800bd8 <printf>
 183993c:	003fff06 	br	183993c <__alt_mem_mem_0+0xff81993c>
  LWIP_ERROR("netconn_write: invalid conn->type",  (conn->type == NETCONN_TCP), return ERR_VAL;);
 1839940:	e0bffc17 	ldw	r2,-16(fp)
 1839944:	10800017 	ldw	r2,0(r2)
 1839948:	10800420 	cmpeqi	r2,r2,16
 183994c:	1000091e 	bne	r2,zero,1839974 <netconn_write_partly+0x84>
 1839950:	01c06134 	movhi	r7,388
 1839954:	39cc5f04 	addi	r7,r7,12668
 1839958:	01809784 	movi	r6,606
 183995c:	01406134 	movhi	r5,388
 1839960:	294ce804 	addi	r5,r5,13216
 1839964:	01006134 	movhi	r4,388
 1839968:	210c6d04 	addi	r4,r4,12724
 183996c:	1800bd80 	call	1800bd8 <printf>
 1839970:	003fff06 	br	1839970 <__alt_mem_mem_0+0xff819970>
  if (size == 0) {
 1839974:	e0bffe17 	ldw	r2,-8(fp)
 1839978:	1000021e 	bne	r2,zero,1839984 <netconn_write_partly+0x94>
    return ERR_OK;
 183997c:	0005883a 	mov	r2,zero
 1839980:	00003b06 	br	1839a70 <netconn_write_partly+0x180>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 1839984:	e0bffc17 	ldw	r2,-16(fp)
 1839988:	10800903 	ldbu	r2,36(r2)
 183998c:	10803fcc 	andi	r2,r2,255
 1839990:	1080008c 	andi	r2,r2,2
 1839994:	1000031e 	bne	r2,zero,18399a4 <netconn_write_partly+0xb4>
 1839998:	e0bfff03 	ldbu	r2,-4(fp)
 183999c:	1080010c 	andi	r2,r2,4
 18399a0:	10000226 	beq	r2,zero,18399ac <netconn_write_partly+0xbc>
 18399a4:	00800044 	movi	r2,1
 18399a8:	00000106 	br	18399b0 <netconn_write_partly+0xc0>
 18399ac:	0005883a 	mov	r2,zero
 18399b0:	e0bff505 	stb	r2,-44(fp)
  if (dontblock && !bytes_written) {
 18399b4:	e0bff503 	ldbu	r2,-44(fp)
 18399b8:	10000426 	beq	r2,zero,18399cc <netconn_write_partly+0xdc>
 18399bc:	e0800217 	ldw	r2,8(fp)
 18399c0:	1000021e 	bne	r2,zero,18399cc <netconn_write_partly+0xdc>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 18399c4:	00bffe84 	movi	r2,-6
 18399c8:	00002906 	br	1839a70 <netconn_write_partly+0x180>
  }

  /* non-blocking write sends as much  */
  msg.function = do_write;
 18399cc:	00806134 	movhi	r2,388
 18399d0:	10af1a04 	addi	r2,r2,-17304
 18399d4:	e0bff615 	stw	r2,-40(fp)
  msg.msg.conn = conn;
 18399d8:	e0bffc17 	ldw	r2,-16(fp)
 18399dc:	e0bff715 	stw	r2,-36(fp)
  msg.msg.msg.w.dataptr = dataptr;
 18399e0:	e0bffd17 	ldw	r2,-12(fp)
 18399e4:	e0bff915 	stw	r2,-28(fp)
  msg.msg.msg.w.apiflags = apiflags;
 18399e8:	e0bfff03 	ldbu	r2,-4(fp)
 18399ec:	e0bffb05 	stb	r2,-20(fp)
  msg.msg.msg.w.len = size;
 18399f0:	e0bffe17 	ldw	r2,-8(fp)
 18399f4:	e0bffa15 	stw	r2,-24(fp)
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = TCPIP_APIMSG(&msg);
 18399f8:	e0bff604 	addi	r2,fp,-40
 18399fc:	1009883a 	mov	r4,r2
 1839a00:	182b5e40 	call	182b5e4 <tcpip_apimsg>
 1839a04:	e0bff545 	stb	r2,-43(fp)
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 1839a08:	e0bff547 	ldb	r2,-43(fp)
 1839a0c:	10000b1e 	bne	r2,zero,1839a3c <netconn_write_partly+0x14c>
 1839a10:	e0800217 	ldw	r2,8(fp)
 1839a14:	10000926 	beq	r2,zero,1839a3c <netconn_write_partly+0x14c>
    if (dontblock
 1839a18:	e0bff503 	ldbu	r2,-44(fp)
 1839a1c:	10000426 	beq	r2,zero,1839a30 <netconn_write_partly+0x140>
#if LWIP_SO_SNDTIMEO
        || (conn->send_timeout != 0)
#endif /* LWIP_SO_SNDTIMEO */
       ) {
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = msg.msg.msg.w.len;
 1839a20:	e0fffa17 	ldw	r3,-24(fp)
 1839a24:	e0800217 	ldw	r2,8(fp)
 1839a28:	10c00015 	stw	r3,0(r2)
 1839a2c:	00000306 	br	1839a3c <netconn_write_partly+0x14c>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 1839a30:	e0800217 	ldw	r2,8(fp)
 1839a34:	e0fffe17 	ldw	r3,-8(fp)
 1839a38:	10c00015 	stw	r3,0(r2)
    }
  }

  NETCONN_SET_SAFE_ERR(conn, err);
 1839a3c:	1810de40 	call	1810de4 <vTaskEnterCritical>
 1839a40:	e0bffc17 	ldw	r2,-16(fp)
 1839a44:	10800303 	ldbu	r2,12(r2)
 1839a48:	10803fcc 	andi	r2,r2,255
 1839a4c:	1080201c 	xori	r2,r2,128
 1839a50:	10bfe004 	addi	r2,r2,-128
 1839a54:	10bffdd0 	cmplti	r2,r2,-9
 1839a58:	1000031e 	bne	r2,zero,1839a68 <netconn_write_partly+0x178>
 1839a5c:	e0bffc17 	ldw	r2,-16(fp)
 1839a60:	e0fff543 	ldbu	r3,-43(fp)
 1839a64:	10c00305 	stb	r3,12(r2)
 1839a68:	1810e380 	call	1810e38 <vTaskExitCritical>
  return err;
 1839a6c:	e0bff543 	ldbu	r2,-43(fp)
}
 1839a70:	e037883a 	mov	sp,fp
 1839a74:	dfc00117 	ldw	ra,4(sp)
 1839a78:	df000017 	ldw	fp,0(sp)
 1839a7c:	dec00204 	addi	sp,sp,8
 1839a80:	f800283a 	ret

01839a84 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 1839a84:	defff504 	addi	sp,sp,-44
 1839a88:	dfc00a15 	stw	ra,40(sp)
 1839a8c:	df000915 	stw	fp,36(sp)
 1839a90:	df000904 	addi	fp,sp,36
 1839a94:	e13ffe15 	stw	r4,-8(fp)
 1839a98:	2805883a 	mov	r2,r5
 1839a9c:	e0bfff05 	stb	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 1839aa0:	e0bffe17 	ldw	r2,-8(fp)
 1839aa4:	1000091e 	bne	r2,zero,1839acc <netconn_close_shutdown+0x48>
 1839aa8:	01c06134 	movhi	r7,388
 1839aac:	39cc5f04 	addi	r7,r7,12668
 1839ab0:	0180a704 	movi	r6,668
 1839ab4:	01406134 	movhi	r5,388
 1839ab8:	294cf104 	addi	r5,r5,13252
 1839abc:	01006134 	movhi	r4,388
 1839ac0:	210c6d04 	addi	r4,r4,12724
 1839ac4:	1800bd80 	call	1800bd8 <printf>
 1839ac8:	003fff06 	br	1839ac8 <__alt_mem_mem_0+0xff819ac8>

  msg.function = do_close;
 1839acc:	00806134 	movhi	r2,388
 1839ad0:	10afd504 	addi	r2,r2,-16556
 1839ad4:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 1839ad8:	e0bffe17 	ldw	r2,-8(fp)
 1839adc:	e0bff915 	stw	r2,-28(fp)
  /* shutting down both ends is the same as closing */
  msg.msg.msg.sd.shut = how;
 1839ae0:	e0bfff03 	ldbu	r2,-4(fp)
 1839ae4:	e0bffb05 	stb	r2,-20(fp)
  /* because of the LWIP_TCPIP_CORE_LOCKING implementation of do_close,
     don't use TCPIP_APIMSG here */
  err = tcpip_apimsg(&msg);
 1839ae8:	e0bff804 	addi	r2,fp,-32
 1839aec:	1009883a 	mov	r4,r2
 1839af0:	182b5e40 	call	182b5e4 <tcpip_apimsg>
 1839af4:	e0bff705 	stb	r2,-36(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 1839af8:	1810de40 	call	1810de4 <vTaskEnterCritical>
 1839afc:	e0bffe17 	ldw	r2,-8(fp)
 1839b00:	10800303 	ldbu	r2,12(r2)
 1839b04:	10803fcc 	andi	r2,r2,255
 1839b08:	1080201c 	xori	r2,r2,128
 1839b0c:	10bfe004 	addi	r2,r2,-128
 1839b10:	10bffdd0 	cmplti	r2,r2,-9
 1839b14:	1000031e 	bne	r2,zero,1839b24 <netconn_close_shutdown+0xa0>
 1839b18:	e0bffe17 	ldw	r2,-8(fp)
 1839b1c:	e0fff703 	ldbu	r3,-36(fp)
 1839b20:	10c00305 	stb	r3,12(r2)
 1839b24:	1810e380 	call	1810e38 <vTaskExitCritical>
  return err;
 1839b28:	e0bff703 	ldbu	r2,-36(fp)
}
 1839b2c:	e037883a 	mov	sp,fp
 1839b30:	dfc00117 	ldw	ra,4(sp)
 1839b34:	df000017 	ldw	fp,0(sp)
 1839b38:	dec00204 	addi	sp,sp,8
 1839b3c:	f800283a 	ret

01839b40 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 1839b40:	defffd04 	addi	sp,sp,-12
 1839b44:	dfc00215 	stw	ra,8(sp)
 1839b48:	df000115 	stw	fp,4(sp)
 1839b4c:	df000104 	addi	fp,sp,4
 1839b50:	e13fff15 	stw	r4,-4(fp)
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 1839b54:	014000c4 	movi	r5,3
 1839b58:	e13fff17 	ldw	r4,-4(fp)
 1839b5c:	1839a840 	call	1839a84 <netconn_close_shutdown>
}
 1839b60:	e037883a 	mov	sp,fp
 1839b64:	dfc00117 	ldw	ra,4(sp)
 1839b68:	df000017 	ldw	fp,0(sp)
 1839b6c:	dec00204 	addi	sp,sp,8
 1839b70:	f800283a 	ret

01839b74 <netconn_shutdown>:
 * @param conn the TCP netconn to shut down
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
 1839b74:	defffb04 	addi	sp,sp,-20
 1839b78:	dfc00415 	stw	ra,16(sp)
 1839b7c:	df000315 	stw	fp,12(sp)
 1839b80:	df000304 	addi	fp,sp,12
 1839b84:	e13ffd15 	stw	r4,-12(fp)
 1839b88:	2807883a 	mov	r3,r5
 1839b8c:	3005883a 	mov	r2,r6
 1839b90:	e0fffe05 	stb	r3,-8(fp)
 1839b94:	e0bfff05 	stb	r2,-4(fp)
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
 1839b98:	e0bffe03 	ldbu	r2,-8(fp)
 1839b9c:	1004c03a 	cmpne	r2,r2,zero
 1839ba0:	1007883a 	mov	r3,r2
 1839ba4:	e0bfff03 	ldbu	r2,-4(fp)
 1839ba8:	10000226 	beq	r2,zero,1839bb4 <netconn_shutdown+0x40>
 1839bac:	00800084 	movi	r2,2
 1839bb0:	00000106 	br	1839bb8 <netconn_shutdown+0x44>
 1839bb4:	0005883a 	mov	r2,zero
 1839bb8:	1884b03a 	or	r2,r3,r2
 1839bbc:	10803fcc 	andi	r2,r2,255
 1839bc0:	100b883a 	mov	r5,r2
 1839bc4:	e13ffd17 	ldw	r4,-12(fp)
 1839bc8:	1839a840 	call	1839a84 <netconn_close_shutdown>
}
 1839bcc:	e037883a 	mov	sp,fp
 1839bd0:	dfc00117 	ldw	ra,4(sp)
 1839bd4:	df000017 	ldw	fp,0(sp)
 1839bd8:	dec00204 	addi	sp,sp,8
 1839bdc:	f800283a 	ret

01839be0 <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    ip_addr_t *addr)
{
 1839be0:	defff604 	addi	sp,sp,-40
 1839be4:	dfc00915 	stw	ra,36(sp)
 1839be8:	df000815 	stw	fp,32(sp)
 1839bec:	df000804 	addi	fp,sp,32
 1839bf0:	e13ffc15 	stw	r4,-16(fp)
 1839bf4:	e17ffd15 	stw	r5,-12(fp)
 1839bf8:	e1bffe15 	stw	r6,-8(fp)
 1839bfc:	e1ffff15 	stw	r7,-4(fp)
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
 1839c00:	e0bffc17 	ldw	r2,-16(fp)
 1839c04:	e0bff915 	stw	r2,-28(fp)

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
 1839c08:	e0bff917 	ldw	r2,-28(fp)
 1839c0c:	10004a26 	beq	r2,zero,1839d38 <recv_raw+0x158>
 1839c10:	e0bff917 	ldw	r2,-28(fp)
 1839c14:	10800517 	ldw	r2,20(r2)
 1839c18:	10004726 	beq	r2,zero,1839d38 <recv_raw+0x158>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
      return 0;
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 1839c1c:	e0bffe17 	ldw	r2,-8(fp)
 1839c20:	1080020b 	ldhu	r2,8(r2)
 1839c24:	10bfffcc 	andi	r2,r2,65535
 1839c28:	000d883a 	mov	r6,zero
 1839c2c:	100b883a 	mov	r5,r2
 1839c30:	010000c4 	movi	r4,3
 1839c34:	181a1480 	call	181a148 <pbuf_alloc>
 1839c38:	e0bff815 	stw	r2,-32(fp)
    if(q != NULL) {
 1839c3c:	e0bff817 	ldw	r2,-32(fp)
 1839c40:	10000a26 	beq	r2,zero,1839c6c <recv_raw+0x8c>
      if (pbuf_copy(q, p) != ERR_OK) {
 1839c44:	e17ffe17 	ldw	r5,-8(fp)
 1839c48:	e13ff817 	ldw	r4,-32(fp)
 1839c4c:	181ac8c0 	call	181ac8c <pbuf_copy>
 1839c50:	10803fcc 	andi	r2,r2,255
 1839c54:	1080201c 	xori	r2,r2,128
 1839c58:	10bfe004 	addi	r2,r2,-128
 1839c5c:	10000326 	beq	r2,zero,1839c6c <recv_raw+0x8c>
        pbuf_free(q);
 1839c60:	e13ff817 	ldw	r4,-32(fp)
 1839c64:	181a9040 	call	181a904 <pbuf_free>
        q = NULL;
 1839c68:	e03ff815 	stw	zero,-32(fp)
      }
    }

    if (q != NULL) {
 1839c6c:	e0bff817 	ldw	r2,-32(fp)
 1839c70:	10003126 	beq	r2,zero,1839d38 <recv_raw+0x158>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 1839c74:	010001c4 	movi	r4,7
 1839c78:	18340280 	call	1834028 <memp_malloc>
 1839c7c:	e0bffa15 	stw	r2,-24(fp)
      if (buf == NULL) {
 1839c80:	e0bffa17 	ldw	r2,-24(fp)
 1839c84:	1000041e 	bne	r2,zero,1839c98 <recv_raw+0xb8>
        pbuf_free(q);
 1839c88:	e13ff817 	ldw	r4,-32(fp)
 1839c8c:	181a9040 	call	181a904 <pbuf_free>
        return 0;
 1839c90:	0005883a 	mov	r2,zero
 1839c94:	00002906 	br	1839d3c <recv_raw+0x15c>
      }

      buf->p = q;
 1839c98:	e0bffa17 	ldw	r2,-24(fp)
 1839c9c:	e0fff817 	ldw	r3,-32(fp)
 1839ca0:	10c00015 	stw	r3,0(r2)
      buf->ptr = q;
 1839ca4:	e0bffa17 	ldw	r2,-24(fp)
 1839ca8:	e0fff817 	ldw	r3,-32(fp)
 1839cac:	10c00115 	stw	r3,4(r2)
      ip_addr_copy(buf->addr, *ip_current_src_addr());
 1839cb0:	d0e81017 	ldw	r3,-24512(gp)
 1839cb4:	e0bffa17 	ldw	r2,-24(fp)
 1839cb8:	10c00215 	stw	r3,8(r2)
      buf->port = pcb->protocol;
 1839cbc:	e0bffd17 	ldw	r2,-12(fp)
 1839cc0:	10800403 	ldbu	r2,16(r2)
 1839cc4:	10c03fcc 	andi	r3,r2,255
 1839cc8:	e0bffa17 	ldw	r2,-24(fp)
 1839ccc:	10c0030d 	sth	r3,12(r2)

      len = q->tot_len;
 1839cd0:	e0bff817 	ldw	r2,-32(fp)
 1839cd4:	1080020b 	ldhu	r2,8(r2)
 1839cd8:	e0bffb0d 	sth	r2,-20(fp)
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 1839cdc:	e0bff917 	ldw	r2,-28(fp)
 1839ce0:	10800504 	addi	r2,r2,20
 1839ce4:	e17ffa17 	ldw	r5,-24(fp)
 1839ce8:	1009883a 	mov	r4,r2
 1839cec:	181518c0 	call	181518c <sys_mbox_trypost>
 1839cf0:	10803fcc 	andi	r2,r2,255
 1839cf4:	1080201c 	xori	r2,r2,128
 1839cf8:	10bfe004 	addi	r2,r2,-128
 1839cfc:	10000426 	beq	r2,zero,1839d10 <recv_raw+0x130>
        netbuf_delete(buf);
 1839d00:	e13ffa17 	ldw	r4,-24(fp)
 1839d04:	183c0f80 	call	183c0f8 <netbuf_delete>
        return 0;
 1839d08:	0005883a 	mov	r2,zero
 1839d0c:	00000b06 	br	1839d3c <recv_raw+0x15c>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 1839d10:	e0bff917 	ldw	r2,-28(fp)
 1839d14:	10800c17 	ldw	r2,48(r2)
 1839d18:	10000726 	beq	r2,zero,1839d38 <recv_raw+0x158>
 1839d1c:	e0bff917 	ldw	r2,-28(fp)
 1839d20:	10800c17 	ldw	r2,48(r2)
 1839d24:	e0fffb0b 	ldhu	r3,-20(fp)
 1839d28:	180d883a 	mov	r6,r3
 1839d2c:	000b883a 	mov	r5,zero
 1839d30:	e13ff917 	ldw	r4,-28(fp)
 1839d34:	103ee83a 	callr	r2
      }
    }
  }

  return 0; /* do not eat the packet */
 1839d38:	0005883a 	mov	r2,zero
}
 1839d3c:	e037883a 	mov	sp,fp
 1839d40:	dfc00117 	ldw	ra,4(sp)
 1839d44:	df000017 	ldw	fp,0(sp)
 1839d48:	dec00204 	addi	sp,sp,8
 1839d4c:	f800283a 	ret

01839d50 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   ip_addr_t *addr, u16_t port)
{
 1839d50:	defff604 	addi	sp,sp,-40
 1839d54:	dfc00915 	stw	ra,36(sp)
 1839d58:	df000815 	stw	fp,32(sp)
 1839d5c:	df000804 	addi	fp,sp,32
 1839d60:	e13ffb15 	stw	r4,-20(fp)
 1839d64:	e17ffc15 	stw	r5,-16(fp)
 1839d68:	e1bffd15 	stw	r6,-12(fp)
 1839d6c:	e1fffe15 	stw	r7,-8(fp)
 1839d70:	e0800217 	ldw	r2,8(fp)
 1839d74:	e0bfff0d 	sth	r2,-4(fp)
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  conn = (struct netconn *)arg;
 1839d78:	e0bffb17 	ldw	r2,-20(fp)
 1839d7c:	e0bff815 	stw	r2,-32(fp)
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
 1839d80:	e0bff817 	ldw	r2,-32(fp)
 1839d84:	10000326 	beq	r2,zero,1839d94 <recv_udp+0x44>
 1839d88:	e0bff817 	ldw	r2,-32(fp)
 1839d8c:	10800517 	ldw	r2,20(r2)
 1839d90:	1000031e 	bne	r2,zero,1839da0 <recv_udp+0x50>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 1839d94:	e13ffd17 	ldw	r4,-12(fp)
 1839d98:	181a9040 	call	181a904 <pbuf_free>
    return;
 1839d9c:	00003206 	br	1839e68 <recv_udp+0x118>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 1839da0:	010001c4 	movi	r4,7
 1839da4:	18340280 	call	1834028 <memp_malloc>
 1839da8:	e0bff915 	stw	r2,-28(fp)
  if (buf == NULL) {
 1839dac:	e0bff917 	ldw	r2,-28(fp)
 1839db0:	1000031e 	bne	r2,zero,1839dc0 <recv_udp+0x70>
    pbuf_free(p);
 1839db4:	e13ffd17 	ldw	r4,-12(fp)
 1839db8:	181a9040 	call	181a904 <pbuf_free>
    return;
 1839dbc:	00002a06 	br	1839e68 <recv_udp+0x118>
  } else {
    buf->p = p;
 1839dc0:	e0bff917 	ldw	r2,-28(fp)
 1839dc4:	e0fffd17 	ldw	r3,-12(fp)
 1839dc8:	10c00015 	stw	r3,0(r2)
    buf->ptr = p;
 1839dcc:	e0bff917 	ldw	r2,-28(fp)
 1839dd0:	e0fffd17 	ldw	r3,-12(fp)
 1839dd4:	10c00115 	stw	r3,4(r2)
    ip_addr_set(&buf->addr, addr);
 1839dd8:	e0bffe17 	ldw	r2,-8(fp)
 1839ddc:	10000326 	beq	r2,zero,1839dec <recv_udp+0x9c>
 1839de0:	e0bffe17 	ldw	r2,-8(fp)
 1839de4:	10800017 	ldw	r2,0(r2)
 1839de8:	00000106 	br	1839df0 <recv_udp+0xa0>
 1839dec:	0005883a 	mov	r2,zero
 1839df0:	e0fff917 	ldw	r3,-28(fp)
 1839df4:	18800215 	stw	r2,8(r3)
    buf->port = port;
 1839df8:	e0bff917 	ldw	r2,-28(fp)
 1839dfc:	e0ffff0b 	ldhu	r3,-4(fp)
 1839e00:	10c0030d 	sth	r3,12(r2)
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 1839e04:	e0bffd17 	ldw	r2,-12(fp)
 1839e08:	1080020b 	ldhu	r2,8(r2)
 1839e0c:	e0bffa0d 	sth	r2,-24(fp)
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 1839e10:	e0bff817 	ldw	r2,-32(fp)
 1839e14:	10800504 	addi	r2,r2,20
 1839e18:	e17ff917 	ldw	r5,-28(fp)
 1839e1c:	1009883a 	mov	r4,r2
 1839e20:	181518c0 	call	181518c <sys_mbox_trypost>
 1839e24:	10803fcc 	andi	r2,r2,255
 1839e28:	1080201c 	xori	r2,r2,128
 1839e2c:	10bfe004 	addi	r2,r2,-128
 1839e30:	10000326 	beq	r2,zero,1839e40 <recv_udp+0xf0>
    netbuf_delete(buf);
 1839e34:	e13ff917 	ldw	r4,-28(fp)
 1839e38:	183c0f80 	call	183c0f8 <netbuf_delete>
    return;
 1839e3c:	00000a06 	br	1839e68 <recv_udp+0x118>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 1839e40:	e0bff817 	ldw	r2,-32(fp)
 1839e44:	10800c17 	ldw	r2,48(r2)
 1839e48:	10000726 	beq	r2,zero,1839e68 <recv_udp+0x118>
 1839e4c:	e0bff817 	ldw	r2,-32(fp)
 1839e50:	10800c17 	ldw	r2,48(r2)
 1839e54:	e0fffa0b 	ldhu	r3,-24(fp)
 1839e58:	180d883a 	mov	r6,r3
 1839e5c:	000b883a 	mov	r5,zero
 1839e60:	e13ff817 	ldw	r4,-32(fp)
 1839e64:	103ee83a 	callr	r2
  }
}
 1839e68:	e037883a 	mov	sp,fp
 1839e6c:	dfc00117 	ldw	ra,4(sp)
 1839e70:	df000017 	ldw	fp,0(sp)
 1839e74:	dec00204 	addi	sp,sp,8
 1839e78:	f800283a 	ret

01839e7c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 1839e7c:	defff804 	addi	sp,sp,-32
 1839e80:	dfc00715 	stw	ra,28(sp)
 1839e84:	df000615 	stw	fp,24(sp)
 1839e88:	df000604 	addi	fp,sp,24
 1839e8c:	e13ffc15 	stw	r4,-16(fp)
 1839e90:	e17ffd15 	stw	r5,-12(fp)
 1839e94:	e1bffe15 	stw	r6,-8(fp)
 1839e98:	3805883a 	mov	r2,r7
 1839e9c:	e0bfff05 	stb	r2,-4(fp)
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  conn = (struct netconn *)arg;
 1839ea0:	e0bffc17 	ldw	r2,-16(fp)
 1839ea4:	e0bffb15 	stw	r2,-20(fp)

  if (conn == NULL) {
 1839ea8:	e0bffb17 	ldw	r2,-20(fp)
 1839eac:	1000021e 	bne	r2,zero,1839eb8 <recv_tcp+0x3c>
    return ERR_VAL;
 1839eb0:	00bffe84 	movi	r2,-6
 1839eb4:	00003806 	br	1839f98 <recv_tcp+0x11c>
  }

  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);

  if (!sys_mbox_valid(&conn->recvmbox)) {
 1839eb8:	e0bffb17 	ldw	r2,-20(fp)
 1839ebc:	10800517 	ldw	r2,20(r2)
 1839ec0:	10000c1e 	bne	r2,zero,1839ef4 <recv_tcp+0x78>
    /* recvmbox already deleted */
    if (p != NULL) {
 1839ec4:	e0bffe17 	ldw	r2,-8(fp)
 1839ec8:	10000826 	beq	r2,zero,1839eec <recv_tcp+0x70>
      tcp_recved(pcb, p->tot_len);
 1839ecc:	e0bffe17 	ldw	r2,-8(fp)
 1839ed0:	1080020b 	ldhu	r2,8(r2)
 1839ed4:	10bfffcc 	andi	r2,r2,65535
 1839ed8:	100b883a 	mov	r5,r2
 1839edc:	e13ffd17 	ldw	r4,-12(fp)
 1839ee0:	181c2c00 	call	181c2c0 <tcp_recved>
      pbuf_free(p);
 1839ee4:	e13ffe17 	ldw	r4,-8(fp)
 1839ee8:	181a9040 	call	181a904 <pbuf_free>
    }
    return ERR_OK;
 1839eec:	0005883a 	mov	r2,zero
 1839ef0:	00002906 	br	1839f98 <recv_tcp+0x11c>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  NETCONN_SET_SAFE_ERR(conn, err);
 1839ef4:	1810de40 	call	1810de4 <vTaskEnterCritical>
 1839ef8:	e0bffb17 	ldw	r2,-20(fp)
 1839efc:	10800303 	ldbu	r2,12(r2)
 1839f00:	10803fcc 	andi	r2,r2,255
 1839f04:	1080201c 	xori	r2,r2,128
 1839f08:	10bfe004 	addi	r2,r2,-128
 1839f0c:	10bffdd0 	cmplti	r2,r2,-9
 1839f10:	1000031e 	bne	r2,zero,1839f20 <recv_tcp+0xa4>
 1839f14:	e0bffb17 	ldw	r2,-20(fp)
 1839f18:	e0ffff03 	ldbu	r3,-4(fp)
 1839f1c:	10c00305 	stb	r3,12(r2)
 1839f20:	1810e380 	call	1810e38 <vTaskExitCritical>

  if (p != NULL) {
 1839f24:	e0bffe17 	ldw	r2,-8(fp)
 1839f28:	10000426 	beq	r2,zero,1839f3c <recv_tcp+0xc0>
    len = p->tot_len;
 1839f2c:	e0bffe17 	ldw	r2,-8(fp)
 1839f30:	1080020b 	ldhu	r2,8(r2)
 1839f34:	e0bffa0d 	sth	r2,-24(fp)
 1839f38:	00000106 	br	1839f40 <recv_tcp+0xc4>
  } else {
    len = 0;
 1839f3c:	e03ffa0d 	sth	zero,-24(fp)
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 1839f40:	e0bffb17 	ldw	r2,-20(fp)
 1839f44:	10800504 	addi	r2,r2,20
 1839f48:	e17ffe17 	ldw	r5,-8(fp)
 1839f4c:	1009883a 	mov	r4,r2
 1839f50:	181518c0 	call	181518c <sys_mbox_trypost>
 1839f54:	10803fcc 	andi	r2,r2,255
 1839f58:	1080201c 	xori	r2,r2,128
 1839f5c:	10bfe004 	addi	r2,r2,-128
 1839f60:	10000226 	beq	r2,zero,1839f6c <recv_tcp+0xf0>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 1839f64:	00bfffc4 	movi	r2,-1
 1839f68:	00000b06 	br	1839f98 <recv_tcp+0x11c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 1839f6c:	e0bffb17 	ldw	r2,-20(fp)
 1839f70:	10800c17 	ldw	r2,48(r2)
 1839f74:	10000726 	beq	r2,zero,1839f94 <recv_tcp+0x118>
 1839f78:	e0bffb17 	ldw	r2,-20(fp)
 1839f7c:	10800c17 	ldw	r2,48(r2)
 1839f80:	e0fffa0b 	ldhu	r3,-24(fp)
 1839f84:	180d883a 	mov	r6,r3
 1839f88:	000b883a 	mov	r5,zero
 1839f8c:	e13ffb17 	ldw	r4,-20(fp)
 1839f90:	103ee83a 	callr	r2
  }

  return ERR_OK;
 1839f94:	0005883a 	mov	r2,zero
}
 1839f98:	e037883a 	mov	sp,fp
 1839f9c:	dfc00117 	ldw	ra,4(sp)
 1839fa0:	df000017 	ldw	fp,0(sp)
 1839fa4:	dec00204 	addi	sp,sp,8
 1839fa8:	f800283a 	ret

01839fac <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 1839fac:	defffb04 	addi	sp,sp,-20
 1839fb0:	dfc00415 	stw	ra,16(sp)
 1839fb4:	df000315 	stw	fp,12(sp)
 1839fb8:	df000304 	addi	fp,sp,12
 1839fbc:	e13ffe15 	stw	r4,-8(fp)
 1839fc0:	e17fff15 	stw	r5,-4(fp)
  struct netconn *conn = (struct netconn *)arg;
 1839fc4:	e0bffe17 	ldw	r2,-8(fp)
 1839fc8:	e0bffd15 	stw	r2,-12(fp)

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn->state == NETCONN_WRITE) {
 1839fcc:	e0bffd17 	ldw	r2,-12(fp)
 1839fd0:	10800117 	ldw	r2,4(r2)
 1839fd4:	10800058 	cmpnei	r2,r2,1
 1839fd8:	1000031e 	bne	r2,zero,1839fe8 <poll_tcp+0x3c>
    do_writemore(conn);
 1839fdc:	e13ffd17 	ldw	r4,-12(fp)
 1839fe0:	183b95c0 	call	183b95c <do_writemore>
 1839fe4:	00000606 	br	183a000 <poll_tcp+0x54>
  } else if (conn->state == NETCONN_CLOSE) {
 1839fe8:	e0bffd17 	ldw	r2,-12(fp)
 1839fec:	10800117 	ldw	r2,4(r2)
 1839ff0:	10800118 	cmpnei	r2,r2,4
 1839ff4:	1000021e 	bne	r2,zero,183a000 <poll_tcp+0x54>
    do_close_internal(conn);
 1839ff8:	e13ffd17 	ldw	r4,-12(fp)
 1839ffc:	183aa340 	call	183aa34 <do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 183a000:	e0bffd17 	ldw	r2,-12(fp)
 183a004:	10800903 	ldbu	r2,36(r2)
 183a008:	10803fcc 	andi	r2,r2,255
 183a00c:	1080040c 	andi	r2,r2,16
 183a010:	10001f26 	beq	r2,zero,183a090 <poll_tcp+0xe4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 183a014:	e0bffd17 	ldw	r2,-12(fp)
 183a018:	10800217 	ldw	r2,8(r2)
 183a01c:	10001c26 	beq	r2,zero,183a090 <poll_tcp+0xe4>
 183a020:	e0bffd17 	ldw	r2,-12(fp)
 183a024:	10800217 	ldw	r2,8(r2)
 183a028:	10801a8b 	ldhu	r2,106(r2)
 183a02c:	10bfffcc 	andi	r2,r2,65535
 183a030:	10816d70 	cmpltui	r2,r2,1461
 183a034:	1000161e 	bne	r2,zero,183a090 <poll_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 183a038:	e0bffd17 	ldw	r2,-12(fp)
 183a03c:	10800217 	ldw	r2,8(r2)
 183a040:	10801b0b 	ldhu	r2,108(r2)

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 183a044:	10bfffcc 	andi	r2,r2,65535
 183a048:	10800128 	cmpgeui	r2,r2,4
 183a04c:	1000101e 	bne	r2,zero,183a090 <poll_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 183a050:	e0bffd17 	ldw	r2,-12(fp)
 183a054:	10c00903 	ldbu	r3,36(r2)
 183a058:	00bffbc4 	movi	r2,-17
 183a05c:	1884703a 	and	r2,r3,r2
 183a060:	1007883a 	mov	r3,r2
 183a064:	e0bffd17 	ldw	r2,-12(fp)
 183a068:	10c00905 	stb	r3,36(r2)
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 183a06c:	e0bffd17 	ldw	r2,-12(fp)
 183a070:	10800c17 	ldw	r2,48(r2)
 183a074:	10000626 	beq	r2,zero,183a090 <poll_tcp+0xe4>
 183a078:	e0bffd17 	ldw	r2,-12(fp)
 183a07c:	10800c17 	ldw	r2,48(r2)
 183a080:	000d883a 	mov	r6,zero
 183a084:	01400084 	movi	r5,2
 183a088:	e13ffd17 	ldw	r4,-12(fp)
 183a08c:	103ee83a 	callr	r2
    }
  }

  return ERR_OK;
 183a090:	0005883a 	mov	r2,zero
}
 183a094:	e037883a 	mov	sp,fp
 183a098:	dfc00117 	ldw	ra,4(sp)
 183a09c:	df000017 	ldw	fp,0(sp)
 183a0a0:	dec00204 	addi	sp,sp,8
 183a0a4:	f800283a 	ret

0183a0a8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 183a0a8:	defffa04 	addi	sp,sp,-24
 183a0ac:	dfc00515 	stw	ra,20(sp)
 183a0b0:	df000415 	stw	fp,16(sp)
 183a0b4:	df000404 	addi	fp,sp,16
 183a0b8:	e13ffd15 	stw	r4,-12(fp)
 183a0bc:	e17ffe15 	stw	r5,-8(fp)
 183a0c0:	3005883a 	mov	r2,r6
 183a0c4:	e0bfff0d 	sth	r2,-4(fp)
  struct netconn *conn = (struct netconn *)arg;
 183a0c8:	e0bffd17 	ldw	r2,-12(fp)
 183a0cc:	e0bffc15 	stw	r2,-16(fp)

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn) {
 183a0d0:	e0bffc17 	ldw	r2,-16(fp)
 183a0d4:	10002d26 	beq	r2,zero,183a18c <sent_tcp+0xe4>
  if (conn->state == NETCONN_WRITE) {
 183a0d8:	e0bffc17 	ldw	r2,-16(fp)
 183a0dc:	10800117 	ldw	r2,4(r2)
 183a0e0:	10800058 	cmpnei	r2,r2,1
 183a0e4:	1000031e 	bne	r2,zero,183a0f4 <sent_tcp+0x4c>
    do_writemore(conn);
 183a0e8:	e13ffc17 	ldw	r4,-16(fp)
 183a0ec:	183b95c0 	call	183b95c <do_writemore>
 183a0f0:	00000606 	br	183a10c <sent_tcp+0x64>
  } else if (conn->state == NETCONN_CLOSE) {
 183a0f4:	e0bffc17 	ldw	r2,-16(fp)
 183a0f8:	10800117 	ldw	r2,4(r2)
 183a0fc:	10800118 	cmpnei	r2,r2,4
 183a100:	1000021e 	bne	r2,zero,183a10c <sent_tcp+0x64>
    do_close_internal(conn);
 183a104:	e13ffc17 	ldw	r4,-16(fp)
 183a108:	183aa340 	call	183aa34 <do_close_internal>
  }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 183a10c:	e0bffc17 	ldw	r2,-16(fp)
 183a110:	10800217 	ldw	r2,8(r2)
 183a114:	10001d26 	beq	r2,zero,183a18c <sent_tcp+0xe4>
 183a118:	e0bffc17 	ldw	r2,-16(fp)
 183a11c:	10800217 	ldw	r2,8(r2)
 183a120:	10801a8b 	ldhu	r2,106(r2)
 183a124:	10bfffcc 	andi	r2,r2,65535
 183a128:	10816d70 	cmpltui	r2,r2,1461
 183a12c:	1000171e 	bne	r2,zero,183a18c <sent_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 183a130:	e0bffc17 	ldw	r2,-16(fp)
 183a134:	10800217 	ldw	r2,8(r2)
 183a138:	10801b0b 	ldhu	r2,108(r2)
    do_close_internal(conn);
  }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 183a13c:	10bfffcc 	andi	r2,r2,65535
 183a140:	10800128 	cmpgeui	r2,r2,4
 183a144:	1000111e 	bne	r2,zero,183a18c <sent_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 183a148:	e0bffc17 	ldw	r2,-16(fp)
 183a14c:	10c00903 	ldbu	r3,36(r2)
 183a150:	00bffbc4 	movi	r2,-17
 183a154:	1884703a 	and	r2,r3,r2
 183a158:	1007883a 	mov	r3,r2
 183a15c:	e0bffc17 	ldw	r2,-16(fp)
 183a160:	10c00905 	stb	r3,36(r2)
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 183a164:	e0bffc17 	ldw	r2,-16(fp)
 183a168:	10800c17 	ldw	r2,48(r2)
 183a16c:	10000726 	beq	r2,zero,183a18c <sent_tcp+0xe4>
 183a170:	e0bffc17 	ldw	r2,-16(fp)
 183a174:	10800c17 	ldw	r2,48(r2)
 183a178:	e0ffff0b 	ldhu	r3,-4(fp)
 183a17c:	180d883a 	mov	r6,r3
 183a180:	01400084 	movi	r5,2
 183a184:	e13ffc17 	ldw	r4,-16(fp)
 183a188:	103ee83a 	callr	r2
    }
  }
  
  return ERR_OK;
 183a18c:	0005883a 	mov	r2,zero
}
 183a190:	e037883a 	mov	sp,fp
 183a194:	dfc00117 	ldw	ra,4(sp)
 183a198:	df000017 	ldw	fp,0(sp)
 183a19c:	dec00204 	addi	sp,sp,8
 183a1a0:	f800283a 	ret

0183a1a4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 183a1a4:	defff904 	addi	sp,sp,-28
 183a1a8:	dfc00615 	stw	ra,24(sp)
 183a1ac:	df000515 	stw	fp,20(sp)
 183a1b0:	df000504 	addi	fp,sp,20
 183a1b4:	e13ffe15 	stw	r4,-8(fp)
 183a1b8:	2805883a 	mov	r2,r5
 183a1bc:	e0bfff05 	stb	r2,-4(fp)
  struct netconn *conn;
  enum netconn_state old_state;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 183a1c0:	e0bffe17 	ldw	r2,-8(fp)
 183a1c4:	e0bffb15 	stw	r2,-20(fp)
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  conn->pcb.tcp = NULL;
 183a1c8:	e0bffb17 	ldw	r2,-20(fp)
 183a1cc:	10000215 	stw	zero,8(r2)

  /* no check since this is always fatal! */
  SYS_ARCH_PROTECT(lev);
 183a1d0:	1810de40 	call	1810de4 <vTaskEnterCritical>
  conn->last_err = err;
 183a1d4:	e0bffb17 	ldw	r2,-20(fp)
 183a1d8:	e0ffff03 	ldbu	r3,-4(fp)
 183a1dc:	10c00305 	stb	r3,12(r2)
  SYS_ARCH_UNPROTECT(lev);
 183a1e0:	1810e380 	call	1810e38 <vTaskExitCritical>

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 183a1e4:	e0bffb17 	ldw	r2,-20(fp)
 183a1e8:	10800117 	ldw	r2,4(r2)
 183a1ec:	e0bffc15 	stw	r2,-16(fp)
  conn->state = NETCONN_NONE;
 183a1f0:	e0bffb17 	ldw	r2,-20(fp)
 183a1f4:	10000115 	stw	zero,4(r2)

  /* Notify the user layer about a connection error. Used to signal
     select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 183a1f8:	e0bffb17 	ldw	r2,-20(fp)
 183a1fc:	10800c17 	ldw	r2,48(r2)
 183a200:	10000626 	beq	r2,zero,183a21c <err_tcp+0x78>
 183a204:	e0bffb17 	ldw	r2,-20(fp)
 183a208:	10800c17 	ldw	r2,48(r2)
 183a20c:	000d883a 	mov	r6,zero
 183a210:	01400104 	movi	r5,4
 183a214:	e13ffb17 	ldw	r4,-20(fp)
 183a218:	103ee83a 	callr	r2
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 183a21c:	e0bffb17 	ldw	r2,-20(fp)
 183a220:	10800c17 	ldw	r2,48(r2)
 183a224:	10000626 	beq	r2,zero,183a240 <err_tcp+0x9c>
 183a228:	e0bffb17 	ldw	r2,-20(fp)
 183a22c:	10800c17 	ldw	r2,48(r2)
 183a230:	000d883a 	mov	r6,zero
 183a234:	000b883a 	mov	r5,zero
 183a238:	e13ffb17 	ldw	r4,-20(fp)
 183a23c:	103ee83a 	callr	r2
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 183a240:	e0bffb17 	ldw	r2,-20(fp)
 183a244:	10800c17 	ldw	r2,48(r2)
 183a248:	10000626 	beq	r2,zero,183a264 <err_tcp+0xc0>
 183a24c:	e0bffb17 	ldw	r2,-20(fp)
 183a250:	10800c17 	ldw	r2,48(r2)
 183a254:	000d883a 	mov	r6,zero
 183a258:	01400084 	movi	r5,2
 183a25c:	e13ffb17 	ldw	r4,-20(fp)
 183a260:	103ee83a 	callr	r2

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 183a264:	e0bffb17 	ldw	r2,-20(fp)
 183a268:	10800517 	ldw	r2,20(r2)
 183a26c:	10000526 	beq	r2,zero,183a284 <err_tcp+0xe0>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 183a270:	e0bffb17 	ldw	r2,-20(fp)
 183a274:	10800504 	addi	r2,r2,20
 183a278:	000b883a 	mov	r5,zero
 183a27c:	1009883a 	mov	r4,r2
 183a280:	181518c0 	call	181518c <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 183a284:	e0bffb17 	ldw	r2,-20(fp)
 183a288:	10800617 	ldw	r2,24(r2)
 183a28c:	10000526 	beq	r2,zero,183a2a4 <err_tcp+0x100>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 183a290:	e0bffb17 	ldw	r2,-20(fp)
 183a294:	10800604 	addi	r2,r2,24
 183a298:	000b883a 	mov	r5,zero
 183a29c:	1009883a 	mov	r4,r2
 183a2a0:	181518c0 	call	181518c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 183a2a4:	e0bffc17 	ldw	r2,-16(fp)
 183a2a8:	10800060 	cmpeqi	r2,r2,1
 183a2ac:	1000061e 	bne	r2,zero,183a2c8 <err_tcp+0x124>
 183a2b0:	e0bffc17 	ldw	r2,-16(fp)
 183a2b4:	10800120 	cmpeqi	r2,r2,4
 183a2b8:	1000031e 	bne	r2,zero,183a2c8 <err_tcp+0x124>
 183a2bc:	e0bffc17 	ldw	r2,-16(fp)
 183a2c0:	108000d8 	cmpnei	r2,r2,3
 183a2c4:	10001a1e 	bne	r2,zero,183a330 <err_tcp+0x18c>
      (old_state == NETCONN_CONNECT)) {
    /* calling do_writemore/do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 183a2c8:	e0bffb17 	ldw	r2,-20(fp)
 183a2cc:	10800903 	ldbu	r2,36(r2)
 183a2d0:	10803fcc 	andi	r2,r2,255
 183a2d4:	1080010c 	andi	r2,r2,4
 183a2d8:	1004c03a 	cmpne	r2,r2,zero
 183a2dc:	10803fcc 	andi	r2,r2,255
 183a2e0:	e0bffd15 	stw	r2,-12(fp)
    SET_NONBLOCKING_CONNECT(conn, 0);
 183a2e4:	e0bffb17 	ldw	r2,-20(fp)
 183a2e8:	10c00903 	ldbu	r3,36(r2)
 183a2ec:	00bffec4 	movi	r2,-5
 183a2f0:	1884703a 	and	r2,r3,r2
 183a2f4:	1007883a 	mov	r3,r2
 183a2f8:	e0bffb17 	ldw	r2,-20(fp)
 183a2fc:	10c00905 	stb	r3,36(r2)

    if (!was_nonblocking_connect) {
 183a300:	e0bffd17 	ldw	r2,-12(fp)
 183a304:	10000a1e 	bne	r2,zero,183a330 <err_tcp+0x18c>
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
      conn->current_msg->err = err;
 183a308:	e0bffb17 	ldw	r2,-20(fp)
 183a30c:	10800b17 	ldw	r2,44(r2)
 183a310:	e0ffff03 	ldbu	r3,-4(fp)
 183a314:	10c00105 	stb	r3,4(r2)
      conn->current_msg = NULL;
 183a318:	e0bffb17 	ldw	r2,-20(fp)
 183a31c:	10000b15 	stw	zero,44(r2)
      /* wake up the waiting task */
      sys_sem_signal(&conn->op_completed);
 183a320:	e0bffb17 	ldw	r2,-20(fp)
 183a324:	10800404 	addi	r2,r2,16
 183a328:	1009883a 	mov	r4,r2
 183a32c:	1814d2c0 	call	1814d2c <sys_sem_signal>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  }
}
 183a330:	0001883a 	nop
 183a334:	e037883a 	mov	sp,fp
 183a338:	dfc00117 	ldw	ra,4(sp)
 183a33c:	df000017 	ldw	fp,0(sp)
 183a340:	dec00204 	addi	sp,sp,8
 183a344:	f800283a 	ret

0183a348 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 183a348:	defffc04 	addi	sp,sp,-16
 183a34c:	dfc00315 	stw	ra,12(sp)
 183a350:	df000215 	stw	fp,8(sp)
 183a354:	df000204 	addi	fp,sp,8
 183a358:	e13fff15 	stw	r4,-4(fp)
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 183a35c:	e0bfff17 	ldw	r2,-4(fp)
 183a360:	10800217 	ldw	r2,8(r2)
 183a364:	e0bffe15 	stw	r2,-8(fp)
  tcp_arg(pcb, conn);
 183a368:	e17fff17 	ldw	r5,-4(fp)
 183a36c:	e13ffe17 	ldw	r4,-8(fp)
 183a370:	181d6bc0 	call	181d6bc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 183a374:	01406134 	movhi	r5,388
 183a378:	29679f04 	addi	r5,r5,-24964
 183a37c:	e13ffe17 	ldw	r4,-8(fp)
 183a380:	181d6f00 	call	181d6f0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 183a384:	01406134 	movhi	r5,388
 183a388:	29682a04 	addi	r5,r5,-24408
 183a38c:	e13ffe17 	ldw	r4,-8(fp)
 183a390:	181d7240 	call	181d724 <tcp_sent>
  tcp_poll(pcb, poll_tcp, 4);
 183a394:	01800104 	movi	r6,4
 183a398:	01406134 	movhi	r5,388
 183a39c:	2967eb04 	addi	r5,r5,-24660
 183a3a0:	e13ffe17 	ldw	r4,-8(fp)
 183a3a4:	181d7c00 	call	181d7c0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 183a3a8:	01406134 	movhi	r5,388
 183a3ac:	29686904 	addi	r5,r5,-24156
 183a3b0:	e13ffe17 	ldw	r4,-8(fp)
 183a3b4:	181d7580 	call	181d758 <tcp_err>
}
 183a3b8:	0001883a 	nop
 183a3bc:	e037883a 	mov	sp,fp
 183a3c0:	dfc00117 	ldw	ra,4(sp)
 183a3c4:	df000017 	ldw	fp,0(sp)
 183a3c8:	dec00204 	addi	sp,sp,8
 183a3cc:	f800283a 	ret

0183a3d0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 183a3d0:	defff804 	addi	sp,sp,-32
 183a3d4:	dfc00715 	stw	ra,28(sp)
 183a3d8:	df000615 	stw	fp,24(sp)
 183a3dc:	df000604 	addi	fp,sp,24
 183a3e0:	e13ffd15 	stw	r4,-12(fp)
 183a3e4:	e17ffe15 	stw	r5,-8(fp)
 183a3e8:	3005883a 	mov	r2,r6
 183a3ec:	e0bfff05 	stb	r2,-4(fp)
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 183a3f0:	e0bffd17 	ldw	r2,-12(fp)
 183a3f4:	e0bffa15 	stw	r2,-24(fp)

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (!sys_mbox_valid(&conn->acceptmbox)) {
 183a3f8:	e0bffa17 	ldw	r2,-24(fp)
 183a3fc:	10800617 	ldw	r2,24(r2)
 183a400:	1000021e 	bne	r2,zero,183a40c <accept_function+0x3c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 183a404:	00bffe84 	movi	r2,-6
 183a408:	00004606 	br	183a524 <accept_function+0x154>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. conn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 183a40c:	e0bffa17 	ldw	r2,-24(fp)
 183a410:	10c00017 	ldw	r3,0(r2)
 183a414:	e0bffa17 	ldw	r2,-24(fp)
 183a418:	10800c17 	ldw	r2,48(r2)
 183a41c:	100b883a 	mov	r5,r2
 183a420:	1809883a 	mov	r4,r3
 183a424:	183a73c0 	call	183a73c <netconn_alloc>
 183a428:	e0bffb15 	stw	r2,-20(fp)
  if (newconn == NULL) {
 183a42c:	e0bffb17 	ldw	r2,-20(fp)
 183a430:	1000021e 	bne	r2,zero,183a43c <accept_function+0x6c>
    return ERR_MEM;
 183a434:	00bfffc4 	movi	r2,-1
 183a438:	00003a06 	br	183a524 <accept_function+0x154>
  }
  newconn->pcb.tcp = newpcb;
 183a43c:	e0bffb17 	ldw	r2,-20(fp)
 183a440:	e0fffe17 	ldw	r3,-8(fp)
 183a444:	10c00215 	stw	r3,8(r2)
  setup_tcp(newconn);
 183a448:	e13ffb17 	ldw	r4,-20(fp)
 183a44c:	183a3480 	call	183a348 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 183a450:	e0bffb17 	ldw	r2,-20(fp)
 183a454:	e0ffff03 	ldbu	r3,-4(fp)
 183a458:	10c00305 	stb	r3,12(r2)

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 183a45c:	e0bffa17 	ldw	r2,-24(fp)
 183a460:	10800604 	addi	r2,r2,24
 183a464:	e17ffb17 	ldw	r5,-20(fp)
 183a468:	1009883a 	mov	r4,r2
 183a46c:	181518c0 	call	181518c <sys_mbox_trypost>
 183a470:	10803fcc 	andi	r2,r2,255
 183a474:	1080201c 	xori	r2,r2,128
 183a478:	10bfe004 	addi	r2,r2,-128
 183a47c:	10001f26 	beq	r2,zero,183a4fc <accept_function+0x12c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 183a480:	e0bffb17 	ldw	r2,-20(fp)
 183a484:	10800217 	ldw	r2,8(r2)
 183a488:	e0bffc15 	stw	r2,-16(fp)
    tcp_arg(pcb, NULL);
 183a48c:	000b883a 	mov	r5,zero
 183a490:	e13ffc17 	ldw	r4,-16(fp)
 183a494:	181d6bc0 	call	181d6bc <tcp_arg>
    tcp_recv(pcb, NULL);
 183a498:	000b883a 	mov	r5,zero
 183a49c:	e13ffc17 	ldw	r4,-16(fp)
 183a4a0:	181d6f00 	call	181d6f0 <tcp_recv>
    tcp_sent(pcb, NULL);
 183a4a4:	000b883a 	mov	r5,zero
 183a4a8:	e13ffc17 	ldw	r4,-16(fp)
 183a4ac:	181d7240 	call	181d724 <tcp_sent>
    tcp_poll(pcb, NULL, 4);
 183a4b0:	01800104 	movi	r6,4
 183a4b4:	000b883a 	mov	r5,zero
 183a4b8:	e13ffc17 	ldw	r4,-16(fp)
 183a4bc:	181d7c00 	call	181d7c0 <tcp_poll>
    tcp_err(pcb, NULL);
 183a4c0:	000b883a 	mov	r5,zero
 183a4c4:	e13ffc17 	ldw	r4,-16(fp)
 183a4c8:	181d7580 	call	181d758 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 183a4cc:	e0bffb17 	ldw	r2,-20(fp)
 183a4d0:	10000215 	stw	zero,8(r2)
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 183a4d4:	e0bffb17 	ldw	r2,-20(fp)
 183a4d8:	10800504 	addi	r2,r2,20
 183a4dc:	1009883a 	mov	r4,r2
 183a4e0:	18150cc0 	call	18150cc <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 183a4e4:	e0bffb17 	ldw	r2,-20(fp)
 183a4e8:	10000515 	stw	zero,20(r2)
    netconn_free(newconn);
 183a4ec:	e13ffb17 	ldw	r4,-20(fp)
 183a4f0:	183a8680 	call	183a868 <netconn_free>
    return ERR_MEM;
 183a4f4:	00bfffc4 	movi	r2,-1
 183a4f8:	00000a06 	br	183a524 <accept_function+0x154>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 183a4fc:	e0bffa17 	ldw	r2,-24(fp)
 183a500:	10800c17 	ldw	r2,48(r2)
 183a504:	10000626 	beq	r2,zero,183a520 <accept_function+0x150>
 183a508:	e0bffa17 	ldw	r2,-24(fp)
 183a50c:	10800c17 	ldw	r2,48(r2)
 183a510:	000d883a 	mov	r6,zero
 183a514:	000b883a 	mov	r5,zero
 183a518:	e13ffa17 	ldw	r4,-24(fp)
 183a51c:	103ee83a 	callr	r2
  }

  return ERR_OK;
 183a520:	0005883a 	mov	r2,zero
}
 183a524:	e037883a 	mov	sp,fp
 183a528:	dfc00117 	ldw	ra,4(sp)
 183a52c:	df000017 	ldw	fp,0(sp)
 183a530:	dec00204 	addi	sp,sp,8
 183a534:	f800283a 	ret

0183a538 <pcb_new>:
 * @param msg the api_msg_msg describing the connection type
 * @return msg->conn->err, but the return value is currently ignored
 */
static void
pcb_new(struct api_msg_msg *msg)
{
 183a538:	defffc04 	addi	sp,sp,-16
 183a53c:	dfc00315 	stw	ra,12(sp)
 183a540:	df000215 	stw	fp,8(sp)
 183a544:	dc000115 	stw	r16,4(sp)
 183a548:	df000204 	addi	fp,sp,8
 183a54c:	e13ffe15 	stw	r4,-8(fp)
  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 183a550:	e0bffe17 	ldw	r2,-8(fp)
 183a554:	10800017 	ldw	r2,0(r2)
 183a558:	10800017 	ldw	r2,0(r2)
 183a55c:	10803c0c 	andi	r2,r2,240
 183a560:	10c00820 	cmpeqi	r3,r2,32
 183a564:	1800201e 	bne	r3,zero,183a5e8 <pcb_new+0xb0>
 183a568:	10c01020 	cmpeqi	r3,r2,64
 183a56c:	1800031e 	bne	r3,zero,183a57c <pcb_new+0x44>
 183a570:	10800420 	cmpeqi	r2,r2,16
 183a574:	10003d1e 	bne	r2,zero,183a66c <pcb_new+0x134>
 183a578:	00004d06 	br	183a6b0 <pcb_new+0x178>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new(msg->msg.n.proto);
 183a57c:	e0bffe17 	ldw	r2,-8(fp)
 183a580:	14000017 	ldw	r16,0(r2)
 183a584:	e0bffe17 	ldw	r2,-8(fp)
 183a588:	10800203 	ldbu	r2,8(r2)
 183a58c:	10803fcc 	andi	r2,r2,255
 183a590:	1009883a 	mov	r4,r2
 183a594:	18347280 	call	1834728 <raw_new>
 183a598:	80800215 	stw	r2,8(r16)
    if(msg->conn->pcb.raw == NULL) {
 183a59c:	e0bffe17 	ldw	r2,-8(fp)
 183a5a0:	10800017 	ldw	r2,0(r2)
 183a5a4:	10800217 	ldw	r2,8(r2)
 183a5a8:	1000041e 	bne	r2,zero,183a5bc <pcb_new+0x84>
      msg->err = ERR_MEM;
 183a5ac:	e0bffe17 	ldw	r2,-8(fp)
 183a5b0:	00ffffc4 	movi	r3,-1
 183a5b4:	10c00105 	stb	r3,4(r2)
      break;
 183a5b8:	00004106 	br	183a6c0 <pcb_new+0x188>
    }
    raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
 183a5bc:	e0bffe17 	ldw	r2,-8(fp)
 183a5c0:	10800017 	ldw	r2,0(r2)
 183a5c4:	10c00217 	ldw	r3,8(r2)
 183a5c8:	e0bffe17 	ldw	r2,-8(fp)
 183a5cc:	10800017 	ldw	r2,0(r2)
 183a5d0:	100d883a 	mov	r6,r2
 183a5d4:	01406134 	movhi	r5,388
 183a5d8:	2966f804 	addi	r5,r5,-25632
 183a5dc:	1809883a 	mov	r4,r3
 183a5e0:	18344780 	call	1834478 <raw_recv>
    break;
 183a5e4:	00003606 	br	183a6c0 <pcb_new+0x188>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new();
 183a5e8:	e0bffe17 	ldw	r2,-8(fp)
 183a5ec:	14000017 	ldw	r16,0(r2)
 183a5f0:	18228980 	call	1822898 <udp_new>
 183a5f4:	80800215 	stw	r2,8(r16)
    if(msg->conn->pcb.udp == NULL) {
 183a5f8:	e0bffe17 	ldw	r2,-8(fp)
 183a5fc:	10800017 	ldw	r2,0(r2)
 183a600:	10800217 	ldw	r2,8(r2)
 183a604:	1000041e 	bne	r2,zero,183a618 <pcb_new+0xe0>
      msg->err = ERR_MEM;
 183a608:	e0bffe17 	ldw	r2,-8(fp)
 183a60c:	00ffffc4 	movi	r3,-1
 183a610:	10c00105 	stb	r3,4(r2)
      break;
 183a614:	00002a06 	br	183a6c0 <pcb_new+0x188>
#if LWIP_UDPLITE
    if (msg->conn->type==NETCONN_UDPLITE) {
      udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
    }
#endif /* LWIP_UDPLITE */
    if (msg->conn->type==NETCONN_UDPNOCHKSUM) {
 183a618:	e0bffe17 	ldw	r2,-8(fp)
 183a61c:	10800017 	ldw	r2,0(r2)
 183a620:	10800017 	ldw	r2,0(r2)
 183a624:	10800898 	cmpnei	r2,r2,34
 183a628:	1000051e 	bne	r2,zero,183a640 <pcb_new+0x108>
      udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 183a62c:	e0bffe17 	ldw	r2,-8(fp)
 183a630:	10800017 	ldw	r2,0(r2)
 183a634:	10800217 	ldw	r2,8(r2)
 183a638:	00c00044 	movi	r3,1
 183a63c:	10c00405 	stb	r3,16(r2)
    }
    udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 183a640:	e0bffe17 	ldw	r2,-8(fp)
 183a644:	10800017 	ldw	r2,0(r2)
 183a648:	10c00217 	ldw	r3,8(r2)
 183a64c:	e0bffe17 	ldw	r2,-8(fp)
 183a650:	10800017 	ldw	r2,0(r2)
 183a654:	100d883a 	mov	r6,r2
 183a658:	01406134 	movhi	r5,388
 183a65c:	29675404 	addi	r5,r5,-25264
 183a660:	1809883a 	mov	r4,r3
 183a664:	18227b40 	call	18227b4 <udp_recv>
    break;
 183a668:	00001506 	br	183a6c0 <pcb_new+0x188>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new();
 183a66c:	e0bffe17 	ldw	r2,-8(fp)
 183a670:	14000017 	ldw	r16,0(r2)
 183a674:	181d6900 	call	181d690 <tcp_new>
 183a678:	80800215 	stw	r2,8(r16)
    if(msg->conn->pcb.tcp == NULL) {
 183a67c:	e0bffe17 	ldw	r2,-8(fp)
 183a680:	10800017 	ldw	r2,0(r2)
 183a684:	10800217 	ldw	r2,8(r2)
 183a688:	1000041e 	bne	r2,zero,183a69c <pcb_new+0x164>
      msg->err = ERR_MEM;
 183a68c:	e0bffe17 	ldw	r2,-8(fp)
 183a690:	00ffffc4 	movi	r3,-1
 183a694:	10c00105 	stb	r3,4(r2)
      break;
 183a698:	00000906 	br	183a6c0 <pcb_new+0x188>
    }
    setup_tcp(msg->conn);
 183a69c:	e0bffe17 	ldw	r2,-8(fp)
 183a6a0:	10800017 	ldw	r2,0(r2)
 183a6a4:	1009883a 	mov	r4,r2
 183a6a8:	183a3480 	call	183a348 <setup_tcp>
    break;
 183a6ac:	00000406 	br	183a6c0 <pcb_new+0x188>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 183a6b0:	e0bffe17 	ldw	r2,-8(fp)
 183a6b4:	00fffe84 	movi	r3,-6
 183a6b8:	10c00105 	stb	r3,4(r2)
    break;
 183a6bc:	0001883a 	nop
  }
}
 183a6c0:	0001883a 	nop
 183a6c4:	e6ffff04 	addi	sp,fp,-4
 183a6c8:	dfc00217 	ldw	ra,8(sp)
 183a6cc:	df000117 	ldw	fp,4(sp)
 183a6d0:	dc000017 	ldw	r16,0(sp)
 183a6d4:	dec00304 	addi	sp,sp,12
 183a6d8:	f800283a 	ret

0183a6dc <do_newconn>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
void
do_newconn(struct api_msg_msg *msg)
{
 183a6dc:	defffd04 	addi	sp,sp,-12
 183a6e0:	dfc00215 	stw	ra,8(sp)
 183a6e4:	df000115 	stw	fp,4(sp)
 183a6e8:	df000104 	addi	fp,sp,4
 183a6ec:	e13fff15 	stw	r4,-4(fp)
  msg->err = ERR_OK;
 183a6f0:	e0bfff17 	ldw	r2,-4(fp)
 183a6f4:	10000105 	stb	zero,4(r2)
  if(msg->conn->pcb.tcp == NULL) {
 183a6f8:	e0bfff17 	ldw	r2,-4(fp)
 183a6fc:	10800017 	ldw	r2,0(r2)
 183a700:	10800217 	ldw	r2,8(r2)
 183a704:	1000021e 	bne	r2,zero,183a710 <do_newconn+0x34>
    pcb_new(msg);
 183a708:	e13fff17 	ldw	r4,-4(fp)
 183a70c:	183a5380 	call	183a538 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 183a710:	e0bfff17 	ldw	r2,-4(fp)
 183a714:	10800017 	ldw	r2,0(r2)
 183a718:	10800404 	addi	r2,r2,16
 183a71c:	1009883a 	mov	r4,r2
 183a720:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 183a724:	0001883a 	nop
 183a728:	e037883a 	mov	sp,fp
 183a72c:	dfc00117 	ldw	ra,4(sp)
 183a730:	df000017 	ldw	fp,0(sp)
 183a734:	dec00204 	addi	sp,sp,8
 183a738:	f800283a 	ret

0183a73c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 183a73c:	defffa04 	addi	sp,sp,-24
 183a740:	dfc00515 	stw	ra,20(sp)
 183a744:	df000415 	stw	fp,16(sp)
 183a748:	df000404 	addi	fp,sp,16
 183a74c:	e13ffe15 	stw	r4,-8(fp)
 183a750:	e17fff15 	stw	r5,-4(fp)
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 183a754:	01000204 	movi	r4,8
 183a758:	18340280 	call	1834028 <memp_malloc>
 183a75c:	e0bffc15 	stw	r2,-16(fp)
  if (conn == NULL) {
 183a760:	e0bffc17 	ldw	r2,-16(fp)
 183a764:	1000021e 	bne	r2,zero,183a770 <netconn_alloc+0x34>
    return NULL;
 183a768:	0005883a 	mov	r2,zero
 183a76c:	00003906 	br	183a854 <netconn_alloc+0x118>
  }

  conn->last_err = ERR_OK;
 183a770:	e0bffc17 	ldw	r2,-16(fp)
 183a774:	10000305 	stb	zero,12(r2)
  conn->type = t;
 183a778:	e0bffc17 	ldw	r2,-16(fp)
 183a77c:	e0fffe17 	ldw	r3,-8(fp)
 183a780:	10c00015 	stw	r3,0(r2)
  conn->pcb.tcp = NULL;
 183a784:	e0bffc17 	ldw	r2,-16(fp)
 183a788:	10000215 	stw	zero,8(r2)

#if (DEFAULT_RAW_RECVMBOX_SIZE == DEFAULT_UDP_RECVMBOX_SIZE) && \
    (DEFAULT_RAW_RECVMBOX_SIZE == DEFAULT_TCP_RECVMBOX_SIZE)
  size = DEFAULT_RAW_RECVMBOX_SIZE;
 183a78c:	00840004 	movi	r2,4096
 183a790:	e0bffd15 	stw	r2,-12(fp)
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
    goto free_and_return;
  }
#endif

  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 183a794:	e0bffc17 	ldw	r2,-16(fp)
 183a798:	10800404 	addi	r2,r2,16
 183a79c:	000b883a 	mov	r5,zero
 183a7a0:	1009883a 	mov	r4,r2
 183a7a4:	1814bf00 	call	1814bf0 <sys_sem_new>
 183a7a8:	10803fcc 	andi	r2,r2,255
 183a7ac:	1080201c 	xori	r2,r2,128
 183a7b0:	10bfe004 	addi	r2,r2,-128
 183a7b4:	1000221e 	bne	r2,zero,183a840 <netconn_alloc+0x104>
    goto free_and_return;
  }
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 183a7b8:	e0bffc17 	ldw	r2,-16(fp)
 183a7bc:	10800504 	addi	r2,r2,20
 183a7c0:	e17ffd17 	ldw	r5,-12(fp)
 183a7c4:	1009883a 	mov	r4,r2
 183a7c8:	1814ffc0 	call	1814ffc <sys_mbox_new>
 183a7cc:	10803fcc 	andi	r2,r2,255
 183a7d0:	1080201c 	xori	r2,r2,128
 183a7d4:	10bfe004 	addi	r2,r2,-128
 183a7d8:	10000526 	beq	r2,zero,183a7f0 <netconn_alloc+0xb4>
    sys_sem_free(&conn->op_completed);
 183a7dc:	e0bffc17 	ldw	r2,-16(fp)
 183a7e0:	10800404 	addi	r2,r2,16
 183a7e4:	1009883a 	mov	r4,r2
 183a7e8:	1814cd40 	call	1814cd4 <sys_sem_free>
    goto free_and_return;
 183a7ec:	00001506 	br	183a844 <netconn_alloc+0x108>
  }

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 183a7f0:	e0bffc17 	ldw	r2,-16(fp)
 183a7f4:	10000615 	stw	zero,24(r2)
#endif
  conn->state        = NETCONN_NONE;
 183a7f8:	e0bffc17 	ldw	r2,-16(fp)
 183a7fc:	10000115 	stw	zero,4(r2)
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 183a800:	e0bffc17 	ldw	r2,-16(fp)
 183a804:	00ffffc4 	movi	r3,-1
 183a808:	10c00715 	stw	r3,28(r2)
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 183a80c:	e0bffc17 	ldw	r2,-16(fp)
 183a810:	e0ffff17 	ldw	r3,-4(fp)
 183a814:	10c00c15 	stw	r3,48(r2)
#if LWIP_TCP
  conn->current_msg  = NULL;
 183a818:	e0bffc17 	ldw	r2,-16(fp)
 183a81c:	10000b15 	stw	zero,44(r2)
  conn->write_offset = 0;
 183a820:	e0bffc17 	ldw	r2,-16(fp)
 183a824:	10000a15 	stw	zero,40(r2)
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 183a828:	e0bffc17 	ldw	r2,-16(fp)
 183a82c:	10000815 	stw	zero,32(r2)
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
  conn->flags = 0;
 183a830:	e0bffc17 	ldw	r2,-16(fp)
 183a834:	10000905 	stb	zero,36(r2)
  return conn;
 183a838:	e0bffc17 	ldw	r2,-16(fp)
 183a83c:	00000506 	br	183a854 <netconn_alloc+0x118>
    goto free_and_return;
  }
#endif

  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
    goto free_and_return;
 183a840:	0001883a 	nop
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
  conn->flags = 0;
  return conn;
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 183a844:	e17ffc17 	ldw	r5,-16(fp)
 183a848:	01000204 	movi	r4,8
 183a84c:	18341e40 	call	18341e4 <memp_free>
  return NULL;
 183a850:	0005883a 	mov	r2,zero
}
 183a854:	e037883a 	mov	sp,fp
 183a858:	dfc00117 	ldw	ra,4(sp)
 183a85c:	df000017 	ldw	fp,0(sp)
 183a860:	dec00204 	addi	sp,sp,8
 183a864:	f800283a 	ret

0183a868 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 183a868:	defffd04 	addi	sp,sp,-12
 183a86c:	dfc00215 	stw	ra,8(sp)
 183a870:	df000115 	stw	fp,4(sp)
 183a874:	df000104 	addi	fp,sp,4
 183a878:	e13fff15 	stw	r4,-4(fp)
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

  sys_sem_free(&conn->op_completed);
 183a87c:	e0bfff17 	ldw	r2,-4(fp)
 183a880:	10800404 	addi	r2,r2,16
 183a884:	1009883a 	mov	r4,r2
 183a888:	1814cd40 	call	1814cd4 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 183a88c:	e0bfff17 	ldw	r2,-4(fp)
 183a890:	10000415 	stw	zero,16(r2)

  memp_free(MEMP_NETCONN, conn);
 183a894:	e17fff17 	ldw	r5,-4(fp)
 183a898:	01000204 	movi	r4,8
 183a89c:	18341e40 	call	18341e4 <memp_free>
}
 183a8a0:	0001883a 	nop
 183a8a4:	e037883a 	mov	sp,fp
 183a8a8:	dfc00117 	ldw	ra,4(sp)
 183a8ac:	df000017 	ldw	fp,0(sp)
 183a8b0:	dec00204 	addi	sp,sp,8
 183a8b4:	f800283a 	ret

0183a8b8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 183a8b8:	defffa04 	addi	sp,sp,-24
 183a8bc:	dfc00515 	stw	ra,20(sp)
 183a8c0:	df000415 	stw	fp,16(sp)
 183a8c4:	df000404 	addi	fp,sp,16
 183a8c8:	e13fff15 	stw	r4,-4(fp)
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 183a8cc:	e0bfff17 	ldw	r2,-4(fp)
 183a8d0:	10800517 	ldw	r2,20(r2)
 183a8d4:	10002826 	beq	r2,zero,183a978 <netconn_drain+0xc0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 183a8d8:	00001906 	br	183a940 <netconn_drain+0x88>
#if LWIP_TCP
      if (conn->type == NETCONN_TCP) {
 183a8dc:	e0bfff17 	ldw	r2,-4(fp)
 183a8e0:	10800017 	ldw	r2,0(r2)
 183a8e4:	10800418 	cmpnei	r2,r2,16
 183a8e8:	1000121e 	bne	r2,zero,183a934 <netconn_drain+0x7c>
        if(mem != NULL) {
 183a8ec:	e0bffe17 	ldw	r2,-8(fp)
 183a8f0:	10001326 	beq	r2,zero,183a940 <netconn_drain+0x88>
          p = (struct pbuf*)mem;
 183a8f4:	e0bffe17 	ldw	r2,-8(fp)
 183a8f8:	e0bffc15 	stw	r2,-16(fp)
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 183a8fc:	e0bfff17 	ldw	r2,-4(fp)
 183a900:	10800217 	ldw	r2,8(r2)
 183a904:	10000826 	beq	r2,zero,183a928 <netconn_drain+0x70>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 183a908:	e0bfff17 	ldw	r2,-4(fp)
 183a90c:	10c00217 	ldw	r3,8(r2)
 183a910:	e0bffc17 	ldw	r2,-16(fp)
 183a914:	1080020b 	ldhu	r2,8(r2)
 183a918:	10bfffcc 	andi	r2,r2,65535
 183a91c:	100b883a 	mov	r5,r2
 183a920:	1809883a 	mov	r4,r3
 183a924:	181c2c00 	call	181c2c0 <tcp_recved>
          }
          pbuf_free(p);
 183a928:	e13ffc17 	ldw	r4,-16(fp)
 183a92c:	181a9040 	call	181a904 <pbuf_free>
 183a930:	00000306 	br	183a940 <netconn_drain+0x88>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 183a934:	e0bffe17 	ldw	r2,-8(fp)
 183a938:	1009883a 	mov	r4,r2
 183a93c:	183c0f80 	call	183c0f8 <netbuf_delete>

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 183a940:	e0bfff17 	ldw	r2,-4(fp)
 183a944:	10800504 	addi	r2,r2,20
 183a948:	e0fffe04 	addi	r3,fp,-8
 183a94c:	180b883a 	mov	r5,r3
 183a950:	1009883a 	mov	r4,r2
 183a954:	18152ec0 	call	18152ec <sys_arch_mbox_tryfetch>
 183a958:	10bfffd8 	cmpnei	r2,r2,-1
 183a95c:	103fdf1e 	bne	r2,zero,183a8dc <__alt_mem_mem_0+0xff81a8dc>
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
      }
    }
    sys_mbox_free(&conn->recvmbox);
 183a960:	e0bfff17 	ldw	r2,-4(fp)
 183a964:	10800504 	addi	r2,r2,20
 183a968:	1009883a 	mov	r4,r2
 183a96c:	18150cc0 	call	18150cc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 183a970:	e0bfff17 	ldw	r2,-4(fp)
 183a974:	10000515 	stw	zero,20(r2)
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 183a978:	e0bfff17 	ldw	r2,-4(fp)
 183a97c:	10800617 	ldw	r2,24(r2)
 183a980:	10002626 	beq	r2,zero,183aa1c <netconn_drain+0x164>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 183a984:	00001706 	br	183a9e4 <netconn_drain+0x12c>
      struct netconn *newconn = (struct netconn *)mem;
 183a988:	e0bffe17 	ldw	r2,-8(fp)
 183a98c:	e0bffd15 	stw	r2,-12(fp)
      /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
      /* pcb might be set to NULL already by err_tcp() */
      if (conn->pcb.tcp != NULL) {
 183a990:	e0bfff17 	ldw	r2,-4(fp)
 183a994:	10800217 	ldw	r2,8(r2)
 183a998:	10000526 	beq	r2,zero,183a9b0 <netconn_drain+0xf8>
        tcp_accepted(conn->pcb.tcp);
 183a99c:	e0bfff17 	ldw	r2,-4(fp)
 183a9a0:	10800217 	ldw	r2,8(r2)
 183a9a4:	10c00843 	ldbu	r3,33(r2)
 183a9a8:	18ffffc4 	addi	r3,r3,-1
 183a9ac:	10c00845 	stb	r3,33(r2)
      }
      /* drain recvmbox */
      netconn_drain(newconn);
 183a9b0:	e13ffd17 	ldw	r4,-12(fp)
 183a9b4:	183a8b80 	call	183a8b8 <netconn_drain>
      if (newconn->pcb.tcp != NULL) {
 183a9b8:	e0bffd17 	ldw	r2,-12(fp)
 183a9bc:	10800217 	ldw	r2,8(r2)
 183a9c0:	10000626 	beq	r2,zero,183a9dc <netconn_drain+0x124>
        tcp_abort(newconn->pcb.tcp);
 183a9c4:	e0bffd17 	ldw	r2,-12(fp)
 183a9c8:	10800217 	ldw	r2,8(r2)
 183a9cc:	1009883a 	mov	r4,r2
 183a9d0:	181bd300 	call	181bd30 <tcp_abort>
        newconn->pcb.tcp = NULL;
 183a9d4:	e0bffd17 	ldw	r2,-12(fp)
 183a9d8:	10000215 	stw	zero,8(r2)
      }
      netconn_free(newconn);
 183a9dc:	e13ffd17 	ldw	r4,-12(fp)
 183a9e0:	183a8680 	call	183a868 <netconn_free>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 183a9e4:	e0bfff17 	ldw	r2,-4(fp)
 183a9e8:	10800604 	addi	r2,r2,24
 183a9ec:	e0fffe04 	addi	r3,fp,-8
 183a9f0:	180b883a 	mov	r5,r3
 183a9f4:	1009883a 	mov	r4,r2
 183a9f8:	18152ec0 	call	18152ec <sys_arch_mbox_tryfetch>
 183a9fc:	10bfffd8 	cmpnei	r2,r2,-1
 183aa00:	103fe11e 	bne	r2,zero,183a988 <__alt_mem_mem_0+0xff81a988>
        tcp_abort(newconn->pcb.tcp);
        newconn->pcb.tcp = NULL;
      }
      netconn_free(newconn);
    }
    sys_mbox_free(&conn->acceptmbox);
 183aa04:	e0bfff17 	ldw	r2,-4(fp)
 183aa08:	10800604 	addi	r2,r2,24
 183aa0c:	1009883a 	mov	r4,r2
 183aa10:	18150cc0 	call	18150cc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 183aa14:	e0bfff17 	ldw	r2,-4(fp)
 183aa18:	10000615 	stw	zero,24(r2)
  }
#endif /* LWIP_TCP */
}
 183aa1c:	0001883a 	nop
 183aa20:	e037883a 	mov	sp,fp
 183aa24:	dfc00117 	ldw	ra,4(sp)
 183aa28:	df000017 	ldw	fp,0(sp)
 183aa2c:	dec00204 	addi	sp,sp,8
 183aa30:	f800283a 	ret

0183aa34 <do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static void
do_close_internal(struct netconn *conn)
{
 183aa34:	defffb04 	addi	sp,sp,-20
 183aa38:	dfc00415 	stw	ra,16(sp)
 183aa3c:	df000315 	stw	fp,12(sp)
 183aa40:	df000304 	addi	fp,sp,12
 183aa44:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("this is for tcp netconns only", (conn->type == NETCONN_TCP));
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);

  shut = conn->current_msg->msg.sd.shut;
 183aa48:	e0bfff17 	ldw	r2,-4(fp)
 183aa4c:	10800b17 	ldw	r2,44(r2)
 183aa50:	10800203 	ldbu	r2,8(r2)
 183aa54:	e0bffd45 	stb	r2,-11(fp)
  shut_rx = shut & NETCONN_SHUT_RD;
 183aa58:	e0bffd43 	ldbu	r2,-11(fp)
 183aa5c:	1080004c 	andi	r2,r2,1
 183aa60:	e0bffd85 	stb	r2,-10(fp)
  shut_tx = shut & NETCONN_SHUT_WR;
 183aa64:	e0bffd43 	ldbu	r2,-11(fp)
 183aa68:	1080008c 	andi	r2,r2,2
 183aa6c:	e0bffdc5 	stb	r2,-9(fp)
  /* shutting down both ends is the same as closing */
  close = shut == NETCONN_SHUT_RDWR;
 183aa70:	e0bffd43 	ldbu	r2,-11(fp)
 183aa74:	108000e0 	cmpeqi	r2,r2,3
 183aa78:	e0bffe05 	stb	r2,-8(fp)

  /* Set back some callback pointers */
  if (close) {
 183aa7c:	e0bffe03 	ldbu	r2,-8(fp)
 183aa80:	10000526 	beq	r2,zero,183aa98 <do_close_internal+0x64>
    tcp_arg(conn->pcb.tcp, NULL);
 183aa84:	e0bfff17 	ldw	r2,-4(fp)
 183aa88:	10800217 	ldw	r2,8(r2)
 183aa8c:	000b883a 	mov	r5,zero
 183aa90:	1009883a 	mov	r4,r2
 183aa94:	181d6bc0 	call	181d6bc <tcp_arg>
  }
  if (conn->pcb.tcp->state == LISTEN) {
 183aa98:	e0bfff17 	ldw	r2,-4(fp)
 183aa9c:	10800217 	ldw	r2,8(r2)
 183aaa0:	10800617 	ldw	r2,24(r2)
 183aaa4:	10800058 	cmpnei	r2,r2,1
 183aaa8:	1000061e 	bne	r2,zero,183aac4 <do_close_internal+0x90>
    tcp_accept(conn->pcb.tcp, NULL);
 183aaac:	e0bfff17 	ldw	r2,-4(fp)
 183aab0:	10800217 	ldw	r2,8(r2)
 183aab4:	000b883a 	mov	r5,zero
 183aab8:	1009883a 	mov	r4,r2
 183aabc:	181d78c0 	call	181d78c <tcp_accept>
 183aac0:	00002006 	br	183ab44 <do_close_internal+0x110>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 183aac4:	e0bffd83 	ldbu	r2,-10(fp)
 183aac8:	10000a26 	beq	r2,zero,183aaf4 <do_close_internal+0xc0>
      tcp_recv(conn->pcb.tcp, NULL);
 183aacc:	e0bfff17 	ldw	r2,-4(fp)
 183aad0:	10800217 	ldw	r2,8(r2)
 183aad4:	000b883a 	mov	r5,zero
 183aad8:	1009883a 	mov	r4,r2
 183aadc:	181d6f00 	call	181d6f0 <tcp_recv>
      tcp_accept(conn->pcb.tcp, NULL);
 183aae0:	e0bfff17 	ldw	r2,-4(fp)
 183aae4:	10800217 	ldw	r2,8(r2)
 183aae8:	000b883a 	mov	r5,zero
 183aaec:	1009883a 	mov	r4,r2
 183aaf0:	181d78c0 	call	181d78c <tcp_accept>
    }
    if (shut_tx) {
 183aaf4:	e0bffdc3 	ldbu	r2,-9(fp)
 183aaf8:	10000526 	beq	r2,zero,183ab10 <do_close_internal+0xdc>
      tcp_sent(conn->pcb.tcp, NULL);
 183aafc:	e0bfff17 	ldw	r2,-4(fp)
 183ab00:	10800217 	ldw	r2,8(r2)
 183ab04:	000b883a 	mov	r5,zero
 183ab08:	1009883a 	mov	r4,r2
 183ab0c:	181d7240 	call	181d724 <tcp_sent>
    }
    if (close) {
 183ab10:	e0bffe03 	ldbu	r2,-8(fp)
 183ab14:	10000b26 	beq	r2,zero,183ab44 <do_close_internal+0x110>
      tcp_poll(conn->pcb.tcp, NULL, 4);
 183ab18:	e0bfff17 	ldw	r2,-4(fp)
 183ab1c:	10800217 	ldw	r2,8(r2)
 183ab20:	01800104 	movi	r6,4
 183ab24:	000b883a 	mov	r5,zero
 183ab28:	1009883a 	mov	r4,r2
 183ab2c:	181d7c00 	call	181d7c0 <tcp_poll>
      tcp_err(conn->pcb.tcp, NULL);
 183ab30:	e0bfff17 	ldw	r2,-4(fp)
 183ab34:	10800217 	ldw	r2,8(r2)
 183ab38:	000b883a 	mov	r5,zero
 183ab3c:	1009883a 	mov	r4,r2
 183ab40:	181d7580 	call	181d758 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 183ab44:	e0bffe03 	ldbu	r2,-8(fp)
 183ab48:	10000626 	beq	r2,zero,183ab64 <do_close_internal+0x130>
    err = tcp_close(conn->pcb.tcp);
 183ab4c:	e0bfff17 	ldw	r2,-4(fp)
 183ab50:	10800217 	ldw	r2,8(r2)
 183ab54:	1009883a 	mov	r4,r2
 183ab58:	181ba840 	call	181ba84 <tcp_close>
 183ab5c:	e0bffd05 	stb	r2,-12(fp)
 183ab60:	00000906 	br	183ab88 <do_close_internal+0x154>
  } else {
    err = tcp_shutdown(conn->pcb.tcp, shut_rx, shut_tx);
 183ab64:	e0bfff17 	ldw	r2,-4(fp)
 183ab68:	10800217 	ldw	r2,8(r2)
 183ab6c:	e0fffd83 	ldbu	r3,-10(fp)
 183ab70:	e13ffdc3 	ldbu	r4,-9(fp)
 183ab74:	200d883a 	mov	r6,r4
 183ab78:	180b883a 	mov	r5,r3
 183ab7c:	1009883a 	mov	r4,r2
 183ab80:	181bae00 	call	181bae0 <tcp_shutdown>
 183ab84:	e0bffd05 	stb	r2,-12(fp)
  }
  if (err == ERR_OK) {
 183ab88:	e0bffd07 	ldb	r2,-12(fp)
 183ab8c:	10002f1e 	bne	r2,zero,183ac4c <do_close_internal+0x218>
    /* Closing succeeded */
    conn->current_msg->err = ERR_OK;
 183ab90:	e0bfff17 	ldw	r2,-4(fp)
 183ab94:	10800b17 	ldw	r2,44(r2)
 183ab98:	10000105 	stb	zero,4(r2)
    conn->current_msg = NULL;
 183ab9c:	e0bfff17 	ldw	r2,-4(fp)
 183aba0:	10000b15 	stw	zero,44(r2)
    conn->state = NETCONN_NONE;
 183aba4:	e0bfff17 	ldw	r2,-4(fp)
 183aba8:	10000115 	stw	zero,4(r2)
    if (close) {
 183abac:	e0bffe03 	ldbu	r2,-8(fp)
 183abb0:	10000b26 	beq	r2,zero,183abe0 <do_close_internal+0x1ac>
      /* Set back some callback pointers as conn is going away */
      conn->pcb.tcp = NULL;
 183abb4:	e0bfff17 	ldw	r2,-4(fp)
 183abb8:	10000215 	stw	zero,8(r2)
      /* Trigger select() in socket layer. Make sure everybody notices activity
       on the connection, error first! */
      API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 183abbc:	e0bfff17 	ldw	r2,-4(fp)
 183abc0:	10800c17 	ldw	r2,48(r2)
 183abc4:	10000626 	beq	r2,zero,183abe0 <do_close_internal+0x1ac>
 183abc8:	e0bfff17 	ldw	r2,-4(fp)
 183abcc:	10800c17 	ldw	r2,48(r2)
 183abd0:	000d883a 	mov	r6,zero
 183abd4:	01400104 	movi	r5,4
 183abd8:	e13fff17 	ldw	r4,-4(fp)
 183abdc:	103ee83a 	callr	r2
    }
    if (shut_rx) {
 183abe0:	e0bffd83 	ldbu	r2,-10(fp)
 183abe4:	10000926 	beq	r2,zero,183ac0c <do_close_internal+0x1d8>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 183abe8:	e0bfff17 	ldw	r2,-4(fp)
 183abec:	10800c17 	ldw	r2,48(r2)
 183abf0:	10000626 	beq	r2,zero,183ac0c <do_close_internal+0x1d8>
 183abf4:	e0bfff17 	ldw	r2,-4(fp)
 183abf8:	10800c17 	ldw	r2,48(r2)
 183abfc:	000d883a 	mov	r6,zero
 183ac00:	000b883a 	mov	r5,zero
 183ac04:	e13fff17 	ldw	r4,-4(fp)
 183ac08:	103ee83a 	callr	r2
    }
    if (shut_tx) {
 183ac0c:	e0bffdc3 	ldbu	r2,-9(fp)
 183ac10:	10000926 	beq	r2,zero,183ac38 <do_close_internal+0x204>
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 183ac14:	e0bfff17 	ldw	r2,-4(fp)
 183ac18:	10800c17 	ldw	r2,48(r2)
 183ac1c:	10000626 	beq	r2,zero,183ac38 <do_close_internal+0x204>
 183ac20:	e0bfff17 	ldw	r2,-4(fp)
 183ac24:	10800c17 	ldw	r2,48(r2)
 183ac28:	000d883a 	mov	r6,zero
 183ac2c:	01400084 	movi	r5,2
 183ac30:	e13fff17 	ldw	r4,-4(fp)
 183ac34:	103ee83a 	callr	r2
    }
    /* wake up the application task */
    sys_sem_signal(&conn->op_completed);
 183ac38:	e0bfff17 	ldw	r2,-4(fp)
 183ac3c:	10800404 	addi	r2,r2,16
 183ac40:	1009883a 	mov	r4,r2
 183ac44:	1814d2c0 	call	1814d2c <sys_sem_signal>
    tcp_arg(conn->pcb.tcp, conn);
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
}
 183ac48:	00001806 	br	183acac <do_close_internal+0x278>
    sys_sem_signal(&conn->op_completed);
  } else {
    /* Closing failed, restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (conn->pcb.tcp->state != LISTEN));
    tcp_sent(conn->pcb.tcp, sent_tcp);
 183ac4c:	e0bfff17 	ldw	r2,-4(fp)
 183ac50:	10800217 	ldw	r2,8(r2)
 183ac54:	01406134 	movhi	r5,388
 183ac58:	29682a04 	addi	r5,r5,-24408
 183ac5c:	1009883a 	mov	r4,r2
 183ac60:	181d7240 	call	181d724 <tcp_sent>
    tcp_poll(conn->pcb.tcp, poll_tcp, 4);
 183ac64:	e0bfff17 	ldw	r2,-4(fp)
 183ac68:	10800217 	ldw	r2,8(r2)
 183ac6c:	01800104 	movi	r6,4
 183ac70:	01406134 	movhi	r5,388
 183ac74:	2967eb04 	addi	r5,r5,-24660
 183ac78:	1009883a 	mov	r4,r2
 183ac7c:	181d7c00 	call	181d7c0 <tcp_poll>
    tcp_err(conn->pcb.tcp, err_tcp);
 183ac80:	e0bfff17 	ldw	r2,-4(fp)
 183ac84:	10800217 	ldw	r2,8(r2)
 183ac88:	01406134 	movhi	r5,388
 183ac8c:	29686904 	addi	r5,r5,-24156
 183ac90:	1009883a 	mov	r4,r2
 183ac94:	181d7580 	call	181d758 <tcp_err>
    tcp_arg(conn->pcb.tcp, conn);
 183ac98:	e0bfff17 	ldw	r2,-4(fp)
 183ac9c:	10800217 	ldw	r2,8(r2)
 183aca0:	e17fff17 	ldw	r5,-4(fp)
 183aca4:	1009883a 	mov	r4,r2
 183aca8:	181d6bc0 	call	181d6bc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
}
 183acac:	0001883a 	nop
 183acb0:	e037883a 	mov	sp,fp
 183acb4:	dfc00117 	ldw	ra,4(sp)
 183acb8:	df000017 	ldw	fp,0(sp)
 183acbc:	dec00204 	addi	sp,sp,8
 183acc0:	f800283a 	ret

0183acc4 <do_delconn>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_delconn(struct api_msg_msg *msg)
{
 183acc4:	defffd04 	addi	sp,sp,-12
 183acc8:	dfc00215 	stw	ra,8(sp)
 183accc:	df000115 	stw	fp,4(sp)
 183acd0:	df000104 	addi	fp,sp,4
 183acd4:	e13fff15 	stw	r4,-4(fp)
  /* @todo TCP: abort running write/connect? */
 if ((msg->conn->state != NETCONN_NONE) &&
 183acd8:	e0bfff17 	ldw	r2,-4(fp)
 183acdc:	10800017 	ldw	r2,0(r2)
 183ace0:	10800117 	ldw	r2,4(r2)
 183ace4:	10000e26 	beq	r2,zero,183ad20 <do_delconn+0x5c>
     (msg->conn->state != NETCONN_LISTEN) &&
 183ace8:	e0bfff17 	ldw	r2,-4(fp)
 183acec:	10800017 	ldw	r2,0(r2)
 183acf0:	10800117 	ldw	r2,4(r2)
 */
void
do_delconn(struct api_msg_msg *msg)
{
  /* @todo TCP: abort running write/connect? */
 if ((msg->conn->state != NETCONN_NONE) &&
 183acf4:	108000a0 	cmpeqi	r2,r2,2
 183acf8:	1000091e 	bne	r2,zero,183ad20 <do_delconn+0x5c>
     (msg->conn->state != NETCONN_LISTEN) &&
     (msg->conn->state != NETCONN_CONNECT)) {
 183acfc:	e0bfff17 	ldw	r2,-4(fp)
 183ad00:	10800017 	ldw	r2,0(r2)
 183ad04:	10800117 	ldw	r2,4(r2)
void
do_delconn(struct api_msg_msg *msg)
{
  /* @todo TCP: abort running write/connect? */
 if ((msg->conn->state != NETCONN_NONE) &&
     (msg->conn->state != NETCONN_LISTEN) &&
 183ad08:	108000e0 	cmpeqi	r2,r2,3
 183ad0c:	1000041e 	bne	r2,zero,183ad20 <do_delconn+0x5c>
     (msg->conn->state != NETCONN_CONNECT)) {
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
    msg->err = ERR_INPROGRESS;
 183ad10:	e0bfff17 	ldw	r2,-4(fp)
 183ad14:	00fffec4 	movi	r3,-5
 183ad18:	10c00105 	stb	r3,4(r2)
 183ad1c:	00005006 	br	183ae60 <do_delconn+0x19c>
  } else {
    LWIP_ASSERT("blocking connect in progress",
      (msg->conn->state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 183ad20:	e0bfff17 	ldw	r2,-4(fp)
 183ad24:	10800017 	ldw	r2,0(r2)
 183ad28:	1009883a 	mov	r4,r2
 183ad2c:	183a8b80 	call	183a8b8 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 183ad30:	e0bfff17 	ldw	r2,-4(fp)
 183ad34:	10800017 	ldw	r2,0(r2)
 183ad38:	10800217 	ldw	r2,8(r2)
 183ad3c:	10002e26 	beq	r2,zero,183adf8 <do_delconn+0x134>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 183ad40:	e0bfff17 	ldw	r2,-4(fp)
 183ad44:	10800017 	ldw	r2,0(r2)
 183ad48:	10800017 	ldw	r2,0(r2)
 183ad4c:	10803c0c 	andi	r2,r2,240
 183ad50:	10c00820 	cmpeqi	r3,r2,32
 183ad54:	18000b1e 	bne	r3,zero,183ad84 <do_delconn+0xc0>
 183ad58:	10c01020 	cmpeqi	r3,r2,64
 183ad5c:	1800031e 	bne	r3,zero,183ad6c <do_delconn+0xa8>
 183ad60:	10800420 	cmpeqi	r2,r2,16
 183ad64:	1000111e 	bne	r2,zero,183adac <do_delconn+0xe8>
        /* API_EVENT is called inside do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 183ad68:	00002006 	br	183adec <do_delconn+0x128>
    if (msg->conn->pcb.tcp != NULL) {

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
      case NETCONN_RAW:
        raw_remove(msg->conn->pcb.raw);
 183ad6c:	e0bfff17 	ldw	r2,-4(fp)
 183ad70:	10800017 	ldw	r2,0(r2)
 183ad74:	10800217 	ldw	r2,8(r2)
 183ad78:	1009883a 	mov	r4,r2
 183ad7c:	18346880 	call	1834688 <raw_remove>
        break;
 183ad80:	00001a06 	br	183adec <do_delconn+0x128>
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->pcb.udp->recv_arg = NULL;
 183ad84:	e0bfff17 	ldw	r2,-4(fp)
 183ad88:	10800017 	ldw	r2,0(r2)
 183ad8c:	10800217 	ldw	r2,8(r2)
 183ad90:	10000715 	stw	zero,28(r2)
        udp_remove(msg->conn->pcb.udp);
 183ad94:	e0bfff17 	ldw	r2,-4(fp)
 183ad98:	10800017 	ldw	r2,0(r2)
 183ad9c:	10800217 	ldw	r2,8(r2)
 183ada0:	1009883a 	mov	r4,r2
 183ada4:	18227f80 	call	18227f8 <udp_remove>
        break;
 183ada8:	00001006 	br	183adec <do_delconn+0x128>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
          msg->conn->write_offset == 0);
        msg->conn->state = NETCONN_CLOSE;
 183adac:	e0bfff17 	ldw	r2,-4(fp)
 183adb0:	10800017 	ldw	r2,0(r2)
 183adb4:	00c00104 	movi	r3,4
 183adb8:	10c00115 	stw	r3,4(r2)
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 183adbc:	e0bfff17 	ldw	r2,-4(fp)
 183adc0:	00c000c4 	movi	r3,3
 183adc4:	10c00205 	stb	r3,8(r2)
        msg->conn->current_msg = msg;
 183adc8:	e0bfff17 	ldw	r2,-4(fp)
 183adcc:	10800017 	ldw	r2,0(r2)
 183add0:	e0ffff17 	ldw	r3,-4(fp)
 183add4:	10c00b15 	stw	r3,44(r2)
        do_close_internal(msg->conn);
 183add8:	e0bfff17 	ldw	r2,-4(fp)
 183addc:	10800017 	ldw	r2,0(r2)
 183ade0:	1009883a 	mov	r4,r2
 183ade4:	183aa340 	call	183aa34 <do_close_internal>
        /* API_EVENT is called inside do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
 183ade8:	00002606 	br	183ae84 <do_delconn+0x1c0>
#endif /* LWIP_TCP */
      default:
        break;
      }
      msg->conn->pcb.tcp = NULL;
 183adec:	e0bfff17 	ldw	r2,-4(fp)
 183adf0:	10800017 	ldw	r2,0(r2)
 183adf4:	10000215 	stw	zero,8(r2)
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 183adf8:	e0bfff17 	ldw	r2,-4(fp)
 183adfc:	10800017 	ldw	r2,0(r2)
 183ae00:	10800c17 	ldw	r2,48(r2)
 183ae04:	10000926 	beq	r2,zero,183ae2c <do_delconn+0x168>
 183ae08:	e0bfff17 	ldw	r2,-4(fp)
 183ae0c:	10800017 	ldw	r2,0(r2)
 183ae10:	10800c17 	ldw	r2,48(r2)
 183ae14:	e0ffff17 	ldw	r3,-4(fp)
 183ae18:	18c00017 	ldw	r3,0(r3)
 183ae1c:	000d883a 	mov	r6,zero
 183ae20:	000b883a 	mov	r5,zero
 183ae24:	1809883a 	mov	r4,r3
 183ae28:	103ee83a 	callr	r2
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 183ae2c:	e0bfff17 	ldw	r2,-4(fp)
 183ae30:	10800017 	ldw	r2,0(r2)
 183ae34:	10800c17 	ldw	r2,48(r2)
 183ae38:	10000926 	beq	r2,zero,183ae60 <do_delconn+0x19c>
 183ae3c:	e0bfff17 	ldw	r2,-4(fp)
 183ae40:	10800017 	ldw	r2,0(r2)
 183ae44:	10800c17 	ldw	r2,48(r2)
 183ae48:	e0ffff17 	ldw	r3,-4(fp)
 183ae4c:	18c00017 	ldw	r3,0(r3)
 183ae50:	000d883a 	mov	r6,zero
 183ae54:	01400084 	movi	r5,2
 183ae58:	1809883a 	mov	r4,r3
 183ae5c:	103ee83a 	callr	r2
  }
  if (sys_sem_valid(&msg->conn->op_completed)) {
 183ae60:	e0bfff17 	ldw	r2,-4(fp)
 183ae64:	10800017 	ldw	r2,0(r2)
 183ae68:	10800417 	ldw	r2,16(r2)
 183ae6c:	10000526 	beq	r2,zero,183ae84 <do_delconn+0x1c0>
    sys_sem_signal(&msg->conn->op_completed);
 183ae70:	e0bfff17 	ldw	r2,-4(fp)
 183ae74:	10800017 	ldw	r2,0(r2)
 183ae78:	10800404 	addi	r2,r2,16
 183ae7c:	1009883a 	mov	r4,r2
 183ae80:	1814d2c0 	call	1814d2c <sys_sem_signal>
  }
}
 183ae84:	e037883a 	mov	sp,fp
 183ae88:	dfc00117 	ldw	ra,4(sp)
 183ae8c:	df000017 	ldw	fp,0(sp)
 183ae90:	dec00204 	addi	sp,sp,8
 183ae94:	f800283a 	ret

0183ae98 <do_bind>:
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to bind to
 */
void
do_bind(struct api_msg_msg *msg)
{
 183ae98:	defffd04 	addi	sp,sp,-12
 183ae9c:	dfc00215 	stw	ra,8(sp)
 183aea0:	df000115 	stw	fp,4(sp)
 183aea4:	df000104 	addi	fp,sp,4
 183aea8:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 183aeac:	e0bfff17 	ldw	r2,-4(fp)
 183aeb0:	10800017 	ldw	r2,0(r2)
 183aeb4:	10800303 	ldbu	r2,12(r2)
 183aeb8:	10803fcc 	andi	r2,r2,255
 183aebc:	1080201c 	xori	r2,r2,128
 183aec0:	10bfe004 	addi	r2,r2,-128
 183aec4:	10bffdc8 	cmpgei	r2,r2,-9
 183aec8:	1000061e 	bne	r2,zero,183aee4 <do_bind+0x4c>
    msg->err = msg->conn->last_err;
 183aecc:	e0bfff17 	ldw	r2,-4(fp)
 183aed0:	10800017 	ldw	r2,0(r2)
 183aed4:	10c00303 	ldbu	r3,12(r2)
 183aed8:	e0bfff17 	ldw	r2,-4(fp)
 183aedc:	10c00105 	stb	r3,4(r2)
 183aee0:	00003e06 	br	183afdc <do_bind+0x144>
  } else {
    msg->err = ERR_VAL;
 183aee4:	e0bfff17 	ldw	r2,-4(fp)
 183aee8:	00fffe84 	movi	r3,-6
 183aeec:	10c00105 	stb	r3,4(r2)
    if (msg->conn->pcb.tcp != NULL) {
 183aef0:	e0bfff17 	ldw	r2,-4(fp)
 183aef4:	10800017 	ldw	r2,0(r2)
 183aef8:	10800217 	ldw	r2,8(r2)
 183aefc:	10003726 	beq	r2,zero,183afdc <do_bind+0x144>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 183af00:	e0bfff17 	ldw	r2,-4(fp)
 183af04:	10800017 	ldw	r2,0(r2)
 183af08:	10800017 	ldw	r2,0(r2)
 183af0c:	10803c0c 	andi	r2,r2,240
 183af10:	10c00820 	cmpeqi	r3,r2,32
 183af14:	1800111e 	bne	r3,zero,183af5c <do_bind+0xc4>
 183af18:	10c01020 	cmpeqi	r3,r2,64
 183af1c:	1800031e 	bne	r3,zero,183af2c <do_bind+0x94>
 183af20:	10800420 	cmpeqi	r2,r2,16
 183af24:	10001d1e 	bne	r2,zero,183af9c <do_bind+0x104>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, msg->msg.bc.ipaddr, msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 183af28:	00002c06 	br	183afdc <do_bind+0x144>
    msg->err = ERR_VAL;
    if (msg->conn->pcb.tcp != NULL) {
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
      case NETCONN_RAW:
        msg->err = raw_bind(msg->conn->pcb.raw, msg->msg.bc.ipaddr);
 183af2c:	e0bfff17 	ldw	r2,-4(fp)
 183af30:	10800017 	ldw	r2,0(r2)
 183af34:	10c00217 	ldw	r3,8(r2)
 183af38:	e0bfff17 	ldw	r2,-4(fp)
 183af3c:	10800217 	ldw	r2,8(r2)
 183af40:	100b883a 	mov	r5,r2
 183af44:	1809883a 	mov	r4,r3
 183af48:	18343e80 	call	18343e8 <raw_bind>
 183af4c:	1007883a 	mov	r3,r2
 183af50:	e0bfff17 	ldw	r2,-4(fp)
 183af54:	10c00105 	stb	r3,4(r2)
        break;
 183af58:	00002006 	br	183afdc <do_bind+0x144>
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->err = udp_bind(msg->conn->pcb.udp, msg->msg.bc.ipaddr, msg->msg.bc.port);
 183af5c:	e0bfff17 	ldw	r2,-4(fp)
 183af60:	10800017 	ldw	r2,0(r2)
 183af64:	10c00217 	ldw	r3,8(r2)
 183af68:	e0bfff17 	ldw	r2,-4(fp)
 183af6c:	11000217 	ldw	r4,8(r2)
 183af70:	e0bfff17 	ldw	r2,-4(fp)
 183af74:	1080030b 	ldhu	r2,12(r2)
 183af78:	10bfffcc 	andi	r2,r2,65535
 183af7c:	100d883a 	mov	r6,r2
 183af80:	200b883a 	mov	r5,r4
 183af84:	1809883a 	mov	r4,r3
 183af88:	18225000 	call	1822500 <udp_bind>
 183af8c:	1007883a 	mov	r3,r2
 183af90:	e0bfff17 	ldw	r2,-4(fp)
 183af94:	10c00105 	stb	r3,4(r2)
        break;
 183af98:	00001006 	br	183afdc <do_bind+0x144>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, msg->msg.bc.ipaddr, msg->msg.bc.port);
 183af9c:	e0bfff17 	ldw	r2,-4(fp)
 183afa0:	10800017 	ldw	r2,0(r2)
 183afa4:	10c00217 	ldw	r3,8(r2)
 183afa8:	e0bfff17 	ldw	r2,-4(fp)
 183afac:	11000217 	ldw	r4,8(r2)
 183afb0:	e0bfff17 	ldw	r2,-4(fp)
 183afb4:	1080030b 	ldhu	r2,12(r2)
 183afb8:	10bfffcc 	andi	r2,r2,65535
 183afbc:	100d883a 	mov	r6,r2
 183afc0:	200b883a 	mov	r5,r4
 183afc4:	1809883a 	mov	r4,r3
 183afc8:	181bd680 	call	181bd68 <tcp_bind>
 183afcc:	1007883a 	mov	r3,r2
 183afd0:	e0bfff17 	ldw	r2,-4(fp)
 183afd4:	10c00105 	stb	r3,4(r2)
        break;
 183afd8:	0001883a 	nop
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 183afdc:	e0bfff17 	ldw	r2,-4(fp)
 183afe0:	10800017 	ldw	r2,0(r2)
 183afe4:	10800404 	addi	r2,r2,16
 183afe8:	1009883a 	mov	r4,r2
 183afec:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 183aff0:	0001883a 	nop
 183aff4:	e037883a 	mov	sp,fp
 183aff8:	dfc00117 	ldw	ra,4(sp)
 183affc:	df000017 	ldw	fp,0(sp)
 183b000:	dec00204 	addi	sp,sp,8
 183b004:	f800283a 	ret

0183b008 <do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 183b008:	defff904 	addi	sp,sp,-28
 183b00c:	dfc00615 	stw	ra,24(sp)
 183b010:	df000515 	stw	fp,20(sp)
 183b014:	df000504 	addi	fp,sp,20
 183b018:	e13ffd15 	stw	r4,-12(fp)
 183b01c:	e17ffe15 	stw	r5,-8(fp)
 183b020:	3005883a 	mov	r2,r6
 183b024:	e0bfff05 	stb	r2,-4(fp)
  struct netconn *conn;
  int was_blocking;

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 183b028:	e0bffd17 	ldw	r2,-12(fp)
 183b02c:	e0bffb15 	stw	r2,-20(fp)

  if (conn == NULL) {
 183b030:	e0bffb17 	ldw	r2,-20(fp)
 183b034:	1000021e 	bne	r2,zero,183b040 <do_connected+0x38>
    return ERR_VAL;
 183b038:	00bffe84 	movi	r2,-6
 183b03c:	00003e06 	br	183b138 <do_connected+0x130>

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 183b040:	e0bffb17 	ldw	r2,-20(fp)
 183b044:	10800b17 	ldw	r2,44(r2)
 183b048:	10000426 	beq	r2,zero,183b05c <do_connected+0x54>
    conn->current_msg->err = err;
 183b04c:	e0bffb17 	ldw	r2,-20(fp)
 183b050:	10800b17 	ldw	r2,44(r2)
 183b054:	e0ffff03 	ldbu	r3,-4(fp)
 183b058:	10c00105 	stb	r3,4(r2)
  }
  if ((conn->type == NETCONN_TCP) && (err == ERR_OK)) {
 183b05c:	e0bffb17 	ldw	r2,-20(fp)
 183b060:	10800017 	ldw	r2,0(r2)
 183b064:	10800418 	cmpnei	r2,r2,16
 183b068:	1000041e 	bne	r2,zero,183b07c <do_connected+0x74>
 183b06c:	e0bfff07 	ldb	r2,-4(fp)
 183b070:	1000021e 	bne	r2,zero,183b07c <do_connected+0x74>
    setup_tcp(conn);
 183b074:	e13ffb17 	ldw	r4,-20(fp)
 183b078:	183a3480 	call	183a348 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 183b07c:	e0bffb17 	ldw	r2,-20(fp)
 183b080:	10800903 	ldbu	r2,36(r2)
 183b084:	10803fcc 	andi	r2,r2,255
 183b088:	1080010c 	andi	r2,r2,4
 183b08c:	1005003a 	cmpeq	r2,r2,zero
 183b090:	10803fcc 	andi	r2,r2,255
 183b094:	e0bffc15 	stw	r2,-16(fp)
  SET_NONBLOCKING_CONNECT(conn, 0);
 183b098:	e0bffb17 	ldw	r2,-20(fp)
 183b09c:	10c00903 	ldbu	r3,36(r2)
 183b0a0:	00bffec4 	movi	r2,-5
 183b0a4:	1884703a 	and	r2,r3,r2
 183b0a8:	1007883a 	mov	r3,r2
 183b0ac:	e0bffb17 	ldw	r2,-20(fp)
 183b0b0:	10c00905 	stb	r3,36(r2)
  conn->current_msg = NULL;
 183b0b4:	e0bffb17 	ldw	r2,-20(fp)
 183b0b8:	10000b15 	stw	zero,44(r2)
  conn->state = NETCONN_NONE;
 183b0bc:	e0bffb17 	ldw	r2,-20(fp)
 183b0c0:	10000115 	stw	zero,4(r2)
  if (!was_blocking) {
 183b0c4:	e0bffc17 	ldw	r2,-16(fp)
 183b0c8:	10000b1e 	bne	r2,zero,183b0f8 <do_connected+0xf0>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 183b0cc:	1810de40 	call	1810de4 <vTaskEnterCritical>
 183b0d0:	e0bffb17 	ldw	r2,-20(fp)
 183b0d4:	10800303 	ldbu	r2,12(r2)
 183b0d8:	10803fcc 	andi	r2,r2,255
 183b0dc:	1080201c 	xori	r2,r2,128
 183b0e0:	10bfe004 	addi	r2,r2,-128
 183b0e4:	10bffdd0 	cmplti	r2,r2,-9
 183b0e8:	1000021e 	bne	r2,zero,183b0f4 <do_connected+0xec>
 183b0ec:	e0bffb17 	ldw	r2,-20(fp)
 183b0f0:	10000305 	stb	zero,12(r2)
 183b0f4:	1810e380 	call	1810e38 <vTaskExitCritical>
  }
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 183b0f8:	e0bffb17 	ldw	r2,-20(fp)
 183b0fc:	10800c17 	ldw	r2,48(r2)
 183b100:	10000626 	beq	r2,zero,183b11c <do_connected+0x114>
 183b104:	e0bffb17 	ldw	r2,-20(fp)
 183b108:	10800c17 	ldw	r2,48(r2)
 183b10c:	000d883a 	mov	r6,zero
 183b110:	01400084 	movi	r5,2
 183b114:	e13ffb17 	ldw	r4,-20(fp)
 183b118:	103ee83a 	callr	r2

  if (was_blocking) {
 183b11c:	e0bffc17 	ldw	r2,-16(fp)
 183b120:	10000426 	beq	r2,zero,183b134 <do_connected+0x12c>
    sys_sem_signal(&conn->op_completed);
 183b124:	e0bffb17 	ldw	r2,-20(fp)
 183b128:	10800404 	addi	r2,r2,16
 183b12c:	1009883a 	mov	r4,r2
 183b130:	1814d2c0 	call	1814d2c <sys_sem_signal>
  }
  return ERR_OK;
 183b134:	0005883a 	mov	r2,zero
}
 183b138:	e037883a 	mov	sp,fp
 183b13c:	dfc00117 	ldw	ra,4(sp)
 183b140:	df000017 	ldw	fp,0(sp)
 183b144:	dec00204 	addi	sp,sp,8
 183b148:	f800283a 	ret

0183b14c <do_connect>:
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to connect to
 */
void
do_connect(struct api_msg_msg *msg)
{
 183b14c:	defffc04 	addi	sp,sp,-16
 183b150:	dfc00315 	stw	ra,12(sp)
 183b154:	df000215 	stw	fp,8(sp)
 183b158:	df000204 	addi	fp,sp,8
 183b15c:	e13fff15 	stw	r4,-4(fp)
  if (msg->conn->pcb.tcp == NULL) {
 183b160:	e0bfff17 	ldw	r2,-4(fp)
 183b164:	10800017 	ldw	r2,0(r2)
 183b168:	10800217 	ldw	r2,8(r2)
 183b16c:	1000041e 	bne	r2,zero,183b180 <do_connect+0x34>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 183b170:	e0bfff17 	ldw	r2,-4(fp)
 183b174:	00fffd04 	movi	r3,-12
 183b178:	10c00105 	stb	r3,4(r2)
 183b17c:	00007c06 	br	183b370 <do_connect+0x224>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 183b180:	e0bfff17 	ldw	r2,-4(fp)
 183b184:	10800017 	ldw	r2,0(r2)
 183b188:	10800017 	ldw	r2,0(r2)
 183b18c:	10803c0c 	andi	r2,r2,240
 183b190:	10c00820 	cmpeqi	r3,r2,32
 183b194:	1800111e 	bne	r3,zero,183b1dc <do_connect+0x90>
 183b198:	10c01020 	cmpeqi	r3,r2,64
 183b19c:	1800031e 	bne	r3,zero,183b1ac <do_connect+0x60>
 183b1a0:	10800420 	cmpeqi	r2,r2,16
 183b1a4:	10001d1e 	bne	r2,zero,183b21c <do_connect+0xd0>
 183b1a8:	00006706 	br	183b348 <do_connect+0x1fc>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->err = raw_connect(msg->conn->pcb.raw, msg->msg.bc.ipaddr);
 183b1ac:	e0bfff17 	ldw	r2,-4(fp)
 183b1b0:	10800017 	ldw	r2,0(r2)
 183b1b4:	10c00217 	ldw	r3,8(r2)
 183b1b8:	e0bfff17 	ldw	r2,-4(fp)
 183b1bc:	10800217 	ldw	r2,8(r2)
 183b1c0:	100b883a 	mov	r5,r2
 183b1c4:	1809883a 	mov	r4,r3
 183b1c8:	18344300 	call	1834430 <raw_connect>
 183b1cc:	1007883a 	mov	r3,r2
 183b1d0:	e0bfff17 	ldw	r2,-4(fp)
 183b1d4:	10c00105 	stb	r3,4(r2)
    break;
 183b1d8:	00006506 	br	183b370 <do_connect+0x224>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->err = udp_connect(msg->conn->pcb.udp, msg->msg.bc.ipaddr, msg->msg.bc.port);
 183b1dc:	e0bfff17 	ldw	r2,-4(fp)
 183b1e0:	10800017 	ldw	r2,0(r2)
 183b1e4:	10c00217 	ldw	r3,8(r2)
 183b1e8:	e0bfff17 	ldw	r2,-4(fp)
 183b1ec:	11000217 	ldw	r4,8(r2)
 183b1f0:	e0bfff17 	ldw	r2,-4(fp)
 183b1f4:	1080030b 	ldhu	r2,12(r2)
 183b1f8:	10bfffcc 	andi	r2,r2,65535
 183b1fc:	100d883a 	mov	r6,r2
 183b200:	200b883a 	mov	r5,r4
 183b204:	1809883a 	mov	r4,r3
 183b208:	182265c0 	call	182265c <udp_connect>
 183b20c:	1007883a 	mov	r3,r2
 183b210:	e0bfff17 	ldw	r2,-4(fp)
 183b214:	10c00105 	stb	r3,4(r2)
    break;
 183b218:	00005506 	br	183b370 <do_connect+0x224>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    /* Prevent connect while doing any other action. */
    if (msg->conn->state != NETCONN_NONE) {
 183b21c:	e0bfff17 	ldw	r2,-4(fp)
 183b220:	10800017 	ldw	r2,0(r2)
 183b224:	10800117 	ldw	r2,4(r2)
 183b228:	10000426 	beq	r2,zero,183b23c <do_connect+0xf0>
      msg->err = ERR_ISCONN;
 183b22c:	e0bfff17 	ldw	r2,-4(fp)
 183b230:	00fffdc4 	movi	r3,-9
 183b234:	10c00105 	stb	r3,4(r2)
          * when the connection is established! */
          return;
        }
      }
    }
    break;
 183b238:	00004c06 	br	183b36c <do_connect+0x220>
  case NETCONN_TCP:
    /* Prevent connect while doing any other action. */
    if (msg->conn->state != NETCONN_NONE) {
      msg->err = ERR_ISCONN;
    } else {
      setup_tcp(msg->conn);
 183b23c:	e0bfff17 	ldw	r2,-4(fp)
 183b240:	10800017 	ldw	r2,0(r2)
 183b244:	1009883a 	mov	r4,r2
 183b248:	183a3480 	call	183a348 <setup_tcp>
      msg->err = tcp_connect(msg->conn->pcb.tcp, msg->msg.bc.ipaddr,
 183b24c:	e0bfff17 	ldw	r2,-4(fp)
 183b250:	10800017 	ldw	r2,0(r2)
 183b254:	10c00217 	ldw	r3,8(r2)
 183b258:	e0bfff17 	ldw	r2,-4(fp)
 183b25c:	11000217 	ldw	r4,8(r2)
        msg->msg.bc.port, do_connected);
 183b260:	e0bfff17 	ldw	r2,-4(fp)
 183b264:	1080030b 	ldhu	r2,12(r2)
    /* Prevent connect while doing any other action. */
    if (msg->conn->state != NETCONN_NONE) {
      msg->err = ERR_ISCONN;
    } else {
      setup_tcp(msg->conn);
      msg->err = tcp_connect(msg->conn->pcb.tcp, msg->msg.bc.ipaddr,
 183b268:	10bfffcc 	andi	r2,r2,65535
 183b26c:	01c06134 	movhi	r7,388
 183b270:	39ec0204 	addi	r7,r7,-20472
 183b274:	100d883a 	mov	r6,r2
 183b278:	200b883a 	mov	r5,r4
 183b27c:	1809883a 	mov	r4,r3
 183b280:	181c4400 	call	181c440 <tcp_connect>
 183b284:	1007883a 	mov	r3,r2
 183b288:	e0bfff17 	ldw	r2,-4(fp)
 183b28c:	10c00105 	stb	r3,4(r2)
        msg->msg.bc.port, do_connected);
      if (msg->err == ERR_OK) {
 183b290:	e0bfff17 	ldw	r2,-4(fp)
 183b294:	10800103 	ldbu	r2,4(r2)
 183b298:	10803fcc 	andi	r2,r2,255
 183b29c:	1080201c 	xori	r2,r2,128
 183b2a0:	10bfe004 	addi	r2,r2,-128
 183b2a4:	1000311e 	bne	r2,zero,183b36c <do_connect+0x220>
        u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 183b2a8:	e0bfff17 	ldw	r2,-4(fp)
 183b2ac:	10800017 	ldw	r2,0(r2)
 183b2b0:	10800903 	ldbu	r2,36(r2)
 183b2b4:	10803fcc 	andi	r2,r2,255
 183b2b8:	1080008c 	andi	r2,r2,2
 183b2bc:	1004c03a 	cmpne	r2,r2,zero
 183b2c0:	e0bffe05 	stb	r2,-8(fp)
        msg->conn->state = NETCONN_CONNECT;
 183b2c4:	e0bfff17 	ldw	r2,-4(fp)
 183b2c8:	10800017 	ldw	r2,0(r2)
 183b2cc:	00c000c4 	movi	r3,3
 183b2d0:	10c00115 	stw	r3,4(r2)
        SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 183b2d4:	e0bffe03 	ldbu	r2,-8(fp)
 183b2d8:	10000826 	beq	r2,zero,183b2fc <do_connect+0x1b0>
 183b2dc:	e0bfff17 	ldw	r2,-4(fp)
 183b2e0:	10800017 	ldw	r2,0(r2)
 183b2e4:	e0ffff17 	ldw	r3,-4(fp)
 183b2e8:	18c00017 	ldw	r3,0(r3)
 183b2ec:	18c00903 	ldbu	r3,36(r3)
 183b2f0:	18c00114 	ori	r3,r3,4
 183b2f4:	10c00905 	stb	r3,36(r2)
 183b2f8:	00000806 	br	183b31c <do_connect+0x1d0>
 183b2fc:	e0bfff17 	ldw	r2,-4(fp)
 183b300:	10800017 	ldw	r2,0(r2)
 183b304:	e0ffff17 	ldw	r3,-4(fp)
 183b308:	18c00017 	ldw	r3,0(r3)
 183b30c:	19000903 	ldbu	r4,36(r3)
 183b310:	00fffec4 	movi	r3,-5
 183b314:	20c6703a 	and	r3,r4,r3
 183b318:	10c00905 	stb	r3,36(r2)
        if (non_blocking) {
 183b31c:	e0bffe03 	ldbu	r2,-8(fp)
 183b320:	10000426 	beq	r2,zero,183b334 <do_connect+0x1e8>
          msg->err = ERR_INPROGRESS;
 183b324:	e0bfff17 	ldw	r2,-4(fp)
 183b328:	00fffec4 	movi	r3,-5
 183b32c:	10c00105 	stb	r3,4(r2)
          * when the connection is established! */
          return;
        }
      }
    }
    break;
 183b330:	00000e06 	br	183b36c <do_connect+0x220>
        msg->conn->state = NETCONN_CONNECT;
        SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
        if (non_blocking) {
          msg->err = ERR_INPROGRESS;
        } else {
          msg->conn->current_msg = msg;
 183b334:	e0bfff17 	ldw	r2,-4(fp)
 183b338:	10800017 	ldw	r2,0(r2)
 183b33c:	e0ffff17 	ldw	r3,-4(fp)
 183b340:	10c00b15 	stw	r3,44(r2)
          /* sys_sem_signal() is called from do_connected (or err_tcp()),
          * when the connection is established! */
          return;
 183b344:	00000f06 	br	183b384 <do_connect+0x238>
      }
    }
    break;
#endif /* LWIP_TCP */
  default:
    LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 183b348:	01c06134 	movhi	r7,388
 183b34c:	39ccf804 	addi	r7,r7,13280
 183b350:	01810144 	movi	r6,1029
 183b354:	01406134 	movhi	r5,388
 183b358:	294cfe04 	addi	r5,r5,13304
 183b35c:	01006134 	movhi	r4,388
 183b360:	210d0404 	addi	r4,r4,13328
 183b364:	1800bd80 	call	1800bd8 <printf>
 183b368:	003fff06 	br	183b368 <__alt_mem_mem_0+0xff81b368>
          * when the connection is established! */
          return;
        }
      }
    }
    break;
 183b36c:	0001883a 	nop
  default:
    LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
    break;
    }
  }
  sys_sem_signal(&msg->conn->op_completed);
 183b370:	e0bfff17 	ldw	r2,-4(fp)
 183b374:	10800017 	ldw	r2,0(r2)
 183b378:	10800404 	addi	r2,r2,16
 183b37c:	1009883a 	mov	r4,r2
 183b380:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 183b384:	e037883a 	mov	sp,fp
 183b388:	dfc00117 	ldw	ra,4(sp)
 183b38c:	df000017 	ldw	fp,0(sp)
 183b390:	dec00204 	addi	sp,sp,8
 183b394:	f800283a 	ret

0183b398 <do_disconnect>:
 *
 * @param msg the api_msg_msg pointing to the connection to disconnect
 */
void
do_disconnect(struct api_msg_msg *msg)
{
 183b398:	defffd04 	addi	sp,sp,-12
 183b39c:	dfc00215 	stw	ra,8(sp)
 183b3a0:	df000115 	stw	fp,4(sp)
 183b3a4:	df000104 	addi	fp,sp,4
 183b3a8:	e13fff15 	stw	r4,-4(fp)
#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 183b3ac:	e0bfff17 	ldw	r2,-4(fp)
 183b3b0:	10800017 	ldw	r2,0(r2)
 183b3b4:	10800017 	ldw	r2,0(r2)
 183b3b8:	10803c0c 	andi	r2,r2,240
 183b3bc:	10800818 	cmpnei	r2,r2,32
 183b3c0:	1000081e 	bne	r2,zero,183b3e4 <do_disconnect+0x4c>
    udp_disconnect(msg->conn->pcb.udp);
 183b3c4:	e0bfff17 	ldw	r2,-4(fp)
 183b3c8:	10800017 	ldw	r2,0(r2)
 183b3cc:	10800217 	ldw	r2,8(r2)
 183b3d0:	1009883a 	mov	r4,r2
 183b3d4:	18227640 	call	1822764 <udp_disconnect>
    msg->err = ERR_OK;
 183b3d8:	e0bfff17 	ldw	r2,-4(fp)
 183b3dc:	10000105 	stb	zero,4(r2)
 183b3e0:	00000306 	br	183b3f0 <do_disconnect+0x58>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
 183b3e4:	e0bfff17 	ldw	r2,-4(fp)
 183b3e8:	00fffe84 	movi	r3,-6
 183b3ec:	10c00105 	stb	r3,4(r2)
  }
  TCPIP_APIMSG_ACK(msg);
 183b3f0:	e0bfff17 	ldw	r2,-4(fp)
 183b3f4:	10800017 	ldw	r2,0(r2)
 183b3f8:	10800404 	addi	r2,r2,16
 183b3fc:	1009883a 	mov	r4,r2
 183b400:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 183b404:	0001883a 	nop
 183b408:	e037883a 	mov	sp,fp
 183b40c:	dfc00117 	ldw	ra,4(sp)
 183b410:	df000017 	ldw	fp,0(sp)
 183b414:	dec00204 	addi	sp,sp,8
 183b418:	f800283a 	ret

0183b41c <do_listen>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_listen(struct api_msg_msg *msg)
{
 183b41c:	defffc04 	addi	sp,sp,-16
 183b420:	dfc00315 	stw	ra,12(sp)
 183b424:	df000215 	stw	fp,8(sp)
 183b428:	df000204 	addi	fp,sp,8
 183b42c:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 183b430:	e0bfff17 	ldw	r2,-4(fp)
 183b434:	10800017 	ldw	r2,0(r2)
 183b438:	10800303 	ldbu	r2,12(r2)
 183b43c:	10803fcc 	andi	r2,r2,255
 183b440:	1080201c 	xori	r2,r2,128
 183b444:	10bfe004 	addi	r2,r2,-128
 183b448:	10bffdc8 	cmpgei	r2,r2,-9
 183b44c:	1000061e 	bne	r2,zero,183b468 <do_listen+0x4c>
    msg->err = msg->conn->last_err;
 183b450:	e0bfff17 	ldw	r2,-4(fp)
 183b454:	10800017 	ldw	r2,0(r2)
 183b458:	10c00303 	ldbu	r3,12(r2)
 183b45c:	e0bfff17 	ldw	r2,-4(fp)
 183b460:	10c00105 	stb	r3,4(r2)
 183b464:	00006206 	br	183b5f0 <do_listen+0x1d4>
  } else {
    msg->err = ERR_CONN;
 183b468:	e0bfff17 	ldw	r2,-4(fp)
 183b46c:	00fffcc4 	movi	r3,-13
 183b470:	10c00105 	stb	r3,4(r2)
    if (msg->conn->pcb.tcp != NULL) {
 183b474:	e0bfff17 	ldw	r2,-4(fp)
 183b478:	10800017 	ldw	r2,0(r2)
 183b47c:	10800217 	ldw	r2,8(r2)
 183b480:	10005b26 	beq	r2,zero,183b5f0 <do_listen+0x1d4>
      if (msg->conn->type == NETCONN_TCP) {
 183b484:	e0bfff17 	ldw	r2,-4(fp)
 183b488:	10800017 	ldw	r2,0(r2)
 183b48c:	10800017 	ldw	r2,0(r2)
 183b490:	10800418 	cmpnei	r2,r2,16
 183b494:	1000531e 	bne	r2,zero,183b5e4 <do_listen+0x1c8>
        if (msg->conn->state == NETCONN_NONE) {
 183b498:	e0bfff17 	ldw	r2,-4(fp)
 183b49c:	10800017 	ldw	r2,0(r2)
 183b4a0:	10800117 	ldw	r2,4(r2)
 183b4a4:	1000521e 	bne	r2,zero,183b5f0 <do_listen+0x1d4>
#if TCP_LISTEN_BACKLOG
          struct tcp_pcb* lpcb = tcp_listen_with_backlog(msg->conn->pcb.tcp, msg->msg.lb.backlog);
 183b4a8:	e0bfff17 	ldw	r2,-4(fp)
 183b4ac:	10800017 	ldw	r2,0(r2)
 183b4b0:	10c00217 	ldw	r3,8(r2)
 183b4b4:	e0bfff17 	ldw	r2,-4(fp)
 183b4b8:	10800203 	ldbu	r2,8(r2)
 183b4bc:	10803fcc 	andi	r2,r2,255
 183b4c0:	100b883a 	mov	r5,r2
 183b4c4:	1809883a 	mov	r4,r3
 183b4c8:	181bf680 	call	181bf68 <tcp_listen_with_backlog>
 183b4cc:	e0bffe15 	stw	r2,-8(fp)
#else  /* TCP_LISTEN_BACKLOG */
          struct tcp_pcb* lpcb = tcp_listen(msg->conn->pcb.tcp);
#endif /* TCP_LISTEN_BACKLOG */
          if (lpcb == NULL) {
 183b4d0:	e0bffe17 	ldw	r2,-8(fp)
 183b4d4:	1000041e 	bne	r2,zero,183b4e8 <do_listen+0xcc>
            /* in this case, the old pcb is still allocated */
            msg->err = ERR_MEM;
 183b4d8:	e0bfff17 	ldw	r2,-4(fp)
 183b4dc:	00ffffc4 	movi	r3,-1
 183b4e0:	10c00105 	stb	r3,4(r2)
 183b4e4:	00004206 	br	183b5f0 <do_listen+0x1d4>
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 183b4e8:	e0bfff17 	ldw	r2,-4(fp)
 183b4ec:	10800017 	ldw	r2,0(r2)
 183b4f0:	10800517 	ldw	r2,20(r2)
 183b4f4:	10000826 	beq	r2,zero,183b518 <do_listen+0xfc>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 183b4f8:	e0bfff17 	ldw	r2,-4(fp)
 183b4fc:	10800017 	ldw	r2,0(r2)
 183b500:	10800504 	addi	r2,r2,20
 183b504:	1009883a 	mov	r4,r2
 183b508:	18150cc0 	call	18150cc <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 183b50c:	e0bfff17 	ldw	r2,-4(fp)
 183b510:	10800017 	ldw	r2,0(r2)
 183b514:	10000515 	stw	zero,20(r2)
            }
            msg->err = ERR_OK;
 183b518:	e0bfff17 	ldw	r2,-4(fp)
 183b51c:	10000105 	stb	zero,4(r2)
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 183b520:	e0bfff17 	ldw	r2,-4(fp)
 183b524:	10800017 	ldw	r2,0(r2)
 183b528:	10800617 	ldw	r2,24(r2)
 183b52c:	1000091e 	bne	r2,zero,183b554 <do_listen+0x138>
              msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 183b530:	e0bfff17 	ldw	r2,-4(fp)
 183b534:	10800017 	ldw	r2,0(r2)
 183b538:	10800604 	addi	r2,r2,24
 183b53c:	01420004 	movi	r5,2048
 183b540:	1009883a 	mov	r4,r2
 183b544:	1814ffc0 	call	1814ffc <sys_mbox_new>
 183b548:	1007883a 	mov	r3,r2
 183b54c:	e0bfff17 	ldw	r2,-4(fp)
 183b550:	10c00105 	stb	r3,4(r2)
            }
            if (msg->err == ERR_OK) {
 183b554:	e0bfff17 	ldw	r2,-4(fp)
 183b558:	10800103 	ldbu	r2,4(r2)
 183b55c:	10803fcc 	andi	r2,r2,255
 183b560:	1080201c 	xori	r2,r2,128
 183b564:	10bfe004 	addi	r2,r2,-128
 183b568:	1000181e 	bne	r2,zero,183b5cc <do_listen+0x1b0>
              msg->conn->state = NETCONN_LISTEN;
 183b56c:	e0bfff17 	ldw	r2,-4(fp)
 183b570:	10800017 	ldw	r2,0(r2)
 183b574:	00c00084 	movi	r3,2
 183b578:	10c00115 	stw	r3,4(r2)
              msg->conn->pcb.tcp = lpcb;
 183b57c:	e0bfff17 	ldw	r2,-4(fp)
 183b580:	10800017 	ldw	r2,0(r2)
 183b584:	e0fffe17 	ldw	r3,-8(fp)
 183b588:	10c00215 	stw	r3,8(r2)
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 183b58c:	e0bfff17 	ldw	r2,-4(fp)
 183b590:	10800017 	ldw	r2,0(r2)
 183b594:	10c00217 	ldw	r3,8(r2)
 183b598:	e0bfff17 	ldw	r2,-4(fp)
 183b59c:	10800017 	ldw	r2,0(r2)
 183b5a0:	100b883a 	mov	r5,r2
 183b5a4:	1809883a 	mov	r4,r3
 183b5a8:	181d6bc0 	call	181d6bc <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 183b5ac:	e0bfff17 	ldw	r2,-4(fp)
 183b5b0:	10800017 	ldw	r2,0(r2)
 183b5b4:	10800217 	ldw	r2,8(r2)
 183b5b8:	01406134 	movhi	r5,388
 183b5bc:	2968f404 	addi	r5,r5,-23600
 183b5c0:	1009883a 	mov	r4,r2
 183b5c4:	181d78c0 	call	181d78c <tcp_accept>
 183b5c8:	00000906 	br	183b5f0 <do_listen+0x1d4>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 183b5cc:	e13ffe17 	ldw	r4,-8(fp)
 183b5d0:	181ba840 	call	181ba84 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 183b5d4:	e0bfff17 	ldw	r2,-4(fp)
 183b5d8:	10800017 	ldw	r2,0(r2)
 183b5dc:	10000215 	stw	zero,8(r2)
 183b5e0:	00000306 	br	183b5f0 <do_listen+0x1d4>
            }
          }
        }
      } else {
        msg->err = ERR_ARG;
 183b5e4:	e0bfff17 	ldw	r2,-4(fp)
 183b5e8:	00fffc84 	movi	r3,-14
 183b5ec:	10c00105 	stb	r3,4(r2)
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 183b5f0:	e0bfff17 	ldw	r2,-4(fp)
 183b5f4:	10800017 	ldw	r2,0(r2)
 183b5f8:	10800404 	addi	r2,r2,16
 183b5fc:	1009883a 	mov	r4,r2
 183b600:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 183b604:	0001883a 	nop
 183b608:	e037883a 	mov	sp,fp
 183b60c:	dfc00117 	ldw	ra,4(sp)
 183b610:	df000017 	ldw	fp,0(sp)
 183b614:	dec00204 	addi	sp,sp,8
 183b618:	f800283a 	ret

0183b61c <do_send>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_send(struct api_msg_msg *msg)
{
 183b61c:	defffb04 	addi	sp,sp,-20
 183b620:	dfc00415 	stw	ra,16(sp)
 183b624:	df000315 	stw	fp,12(sp)
 183b628:	df000304 	addi	fp,sp,12
 183b62c:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 183b630:	e0bfff17 	ldw	r2,-4(fp)
 183b634:	10800017 	ldw	r2,0(r2)
 183b638:	10800303 	ldbu	r2,12(r2)
 183b63c:	10803fcc 	andi	r2,r2,255
 183b640:	1080201c 	xori	r2,r2,128
 183b644:	10bfe004 	addi	r2,r2,-128
 183b648:	10bffdc8 	cmpgei	r2,r2,-9
 183b64c:	1000061e 	bne	r2,zero,183b668 <do_send+0x4c>
    msg->err = msg->conn->last_err;
 183b650:	e0bfff17 	ldw	r2,-4(fp)
 183b654:	10800017 	ldw	r2,0(r2)
 183b658:	10c00303 	ldbu	r3,12(r2)
 183b65c:	e0bfff17 	ldw	r2,-4(fp)
 183b660:	10c00105 	stb	r3,4(r2)
 183b664:	00007306 	br	183b834 <do_send+0x218>
  } else {
    msg->err = ERR_CONN;
 183b668:	e0bfff17 	ldw	r2,-4(fp)
 183b66c:	00fffcc4 	movi	r3,-13
 183b670:	10c00105 	stb	r3,4(r2)
    if (msg->conn->pcb.tcp != NULL) {
 183b674:	e0bfff17 	ldw	r2,-4(fp)
 183b678:	10800017 	ldw	r2,0(r2)
 183b67c:	10800217 	ldw	r2,8(r2)
 183b680:	10006c26 	beq	r2,zero,183b834 <do_send+0x218>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 183b684:	e0bfff17 	ldw	r2,-4(fp)
 183b688:	10800017 	ldw	r2,0(r2)
 183b68c:	10800017 	ldw	r2,0(r2)
 183b690:	10803c0c 	andi	r2,r2,240
 183b694:	10c00820 	cmpeqi	r3,r2,32
 183b698:	1800291e 	bne	r3,zero,183b740 <do_send+0x124>
 183b69c:	10801020 	cmpeqi	r2,r2,64
 183b6a0:	1000011e 	bne	r2,zero,183b6a8 <do_send+0x8c>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
 183b6a4:	00006306 	br	183b834 <do_send+0x218>
    msg->err = ERR_CONN;
    if (msg->conn->pcb.tcp != NULL) {
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
      case NETCONN_RAW:
        if (ip_addr_isany(&msg->msg.b->addr)) {
 183b6a8:	e0bfff17 	ldw	r2,-4(fp)
 183b6ac:	10800217 	ldw	r2,8(r2)
 183b6b0:	10800204 	addi	r2,r2,8
 183b6b4:	10000426 	beq	r2,zero,183b6c8 <do_send+0xac>
 183b6b8:	e0bfff17 	ldw	r2,-4(fp)
 183b6bc:	10800217 	ldw	r2,8(r2)
 183b6c0:	10800217 	ldw	r2,8(r2)
 183b6c4:	10000d1e 	bne	r2,zero,183b6fc <do_send+0xe0>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
 183b6c8:	e0bfff17 	ldw	r2,-4(fp)
 183b6cc:	10800017 	ldw	r2,0(r2)
 183b6d0:	10c00217 	ldw	r3,8(r2)
 183b6d4:	e0bfff17 	ldw	r2,-4(fp)
 183b6d8:	10800217 	ldw	r2,8(r2)
 183b6dc:	10800017 	ldw	r2,0(r2)
 183b6e0:	100b883a 	mov	r5,r2
 183b6e4:	1809883a 	mov	r4,r3
 183b6e8:	18346440 	call	1834644 <raw_send>
 183b6ec:	1007883a 	mov	r3,r2
 183b6f0:	e0bfff17 	ldw	r2,-4(fp)
 183b6f4:	10c00105 	stb	r3,4(r2)
        } else {
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
        }
        break;
 183b6f8:	00004e06 	br	183b834 <do_send+0x218>
#if LWIP_RAW
      case NETCONN_RAW:
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
        } else {
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
 183b6fc:	e0bfff17 	ldw	r2,-4(fp)
 183b700:	10800017 	ldw	r2,0(r2)
 183b704:	10c00217 	ldw	r3,8(r2)
 183b708:	e0bfff17 	ldw	r2,-4(fp)
 183b70c:	10800217 	ldw	r2,8(r2)
 183b710:	11000017 	ldw	r4,0(r2)
 183b714:	e0bfff17 	ldw	r2,-4(fp)
 183b718:	10800217 	ldw	r2,8(r2)
 183b71c:	10800204 	addi	r2,r2,8
 183b720:	100d883a 	mov	r6,r2
 183b724:	200b883a 	mov	r5,r4
 183b728:	1809883a 	mov	r4,r3
 183b72c:	18344bc0 	call	18344bc <raw_sendto>
 183b730:	1007883a 	mov	r3,r2
 183b734:	e0bfff17 	ldw	r2,-4(fp)
 183b738:	10c00105 	stb	r3,4(r2)
        }
        break;
 183b73c:	00003d06 	br	183b834 <do_send+0x218>
#endif
#if LWIP_UDP
      case NETCONN_UDP:
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
 183b740:	e0bfff17 	ldw	r2,-4(fp)
 183b744:	10800217 	ldw	r2,8(r2)
 183b748:	10800204 	addi	r2,r2,8
 183b74c:	10000426 	beq	r2,zero,183b760 <do_send+0x144>
 183b750:	e0bfff17 	ldw	r2,-4(fp)
 183b754:	10800217 	ldw	r2,8(r2)
 183b758:	10800217 	ldw	r2,8(r2)
 183b75c:	1000181e 	bne	r2,zero,183b7c0 <do_send+0x1a4>
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b760:	e0bfff17 	ldw	r2,-4(fp)
 183b764:	10800017 	ldw	r2,0(r2)
 183b768:	10c00217 	ldw	r3,8(r2)
 183b76c:	e0bfff17 	ldw	r2,-4(fp)
 183b770:	10800217 	ldw	r2,8(r2)
 183b774:	11000017 	ldw	r4,0(r2)
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 183b778:	e0bfff17 	ldw	r2,-4(fp)
 183b77c:	10800217 	ldw	r2,8(r2)
 183b780:	10800383 	ldbu	r2,14(r2)
#endif
#if LWIP_UDP
      case NETCONN_UDP:
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b784:	10803fcc 	andi	r2,r2,255
 183b788:	1140008c 	andi	r5,r2,2
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 183b78c:	e0bfff17 	ldw	r2,-4(fp)
 183b790:	10800217 	ldw	r2,8(r2)
 183b794:	1080040b 	ldhu	r2,16(r2)
#endif
#if LWIP_UDP
      case NETCONN_UDP:
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b798:	10bfffcc 	andi	r2,r2,65535
 183b79c:	100f883a 	mov	r7,r2
 183b7a0:	280d883a 	mov	r6,r5
 183b7a4:	200b883a 	mov	r5,r4
 183b7a8:	1809883a 	mov	r4,r3
 183b7ac:	1821ec80 	call	1821ec8 <udp_send_chksum>
 183b7b0:	1007883a 	mov	r3,r2
 183b7b4:	e0bfff17 	ldw	r2,-4(fp)
 183b7b8:	10c00105 	stb	r3,4(r2)
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
        } else {
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
 183b7bc:	00001c06 	br	183b830 <do_send+0x214>
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b7c0:	e0bfff17 	ldw	r2,-4(fp)
 183b7c4:	10800017 	ldw	r2,0(r2)
 183b7c8:	11000217 	ldw	r4,8(r2)
 183b7cc:	e0bfff17 	ldw	r2,-4(fp)
 183b7d0:	10800217 	ldw	r2,8(r2)
 183b7d4:	11400017 	ldw	r5,0(r2)
            &msg->msg.b->addr, msg->msg.b->port,
 183b7d8:	e0bfff17 	ldw	r2,-4(fp)
 183b7dc:	10800217 	ldw	r2,8(r2)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b7e0:	11800204 	addi	r6,r2,8
            &msg->msg.b->addr, msg->msg.b->port,
 183b7e4:	e0bfff17 	ldw	r2,-4(fp)
 183b7e8:	10800217 	ldw	r2,8(r2)
 183b7ec:	1080030b 	ldhu	r2,12(r2)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b7f0:	11ffffcc 	andi	r7,r2,65535
            &msg->msg.b->addr, msg->msg.b->port,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 183b7f4:	e0bfff17 	ldw	r2,-4(fp)
 183b7f8:	10800217 	ldw	r2,8(r2)
 183b7fc:	10800383 	ldbu	r2,14(r2)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b800:	10803fcc 	andi	r2,r2,255
 183b804:	1080008c 	andi	r2,r2,2
            &msg->msg.b->addr, msg->msg.b->port,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 183b808:	e0ffff17 	ldw	r3,-4(fp)
 183b80c:	18c00217 	ldw	r3,8(r3)
 183b810:	18c0040b 	ldhu	r3,16(r3)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 183b814:	18ffffcc 	andi	r3,r3,65535
 183b818:	d8c00115 	stw	r3,4(sp)
 183b81c:	d8800015 	stw	r2,0(sp)
 183b820:	1821f940 	call	1821f94 <udp_sendto_chksum>
 183b824:	1007883a 	mov	r3,r2
 183b828:	e0bfff17 	ldw	r2,-4(fp)
 183b82c:	10c00105 	stb	r3,4(r2)
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
        } else {
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
 183b830:	0001883a 	nop
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 183b834:	e0bfff17 	ldw	r2,-4(fp)
 183b838:	10800017 	ldw	r2,0(r2)
 183b83c:	10800404 	addi	r2,r2,16
 183b840:	1009883a 	mov	r4,r2
 183b844:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 183b848:	0001883a 	nop
 183b84c:	e037883a 	mov	sp,fp
 183b850:	dfc00117 	ldw	ra,4(sp)
 183b854:	df000017 	ldw	fp,0(sp)
 183b858:	dec00204 	addi	sp,sp,8
 183b85c:	f800283a 	ret

0183b860 <do_recv>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_recv(struct api_msg_msg *msg)
{
 183b860:	defffb04 	addi	sp,sp,-20
 183b864:	dfc00415 	stw	ra,16(sp)
 183b868:	df000315 	stw	fp,12(sp)
 183b86c:	df000304 	addi	fp,sp,12
 183b870:	e13fff15 	stw	r4,-4(fp)
  msg->err = ERR_OK;
 183b874:	e0bfff17 	ldw	r2,-4(fp)
 183b878:	10000105 	stb	zero,4(r2)
  if (msg->conn->pcb.tcp != NULL) {
 183b87c:	e0bfff17 	ldw	r2,-4(fp)
 183b880:	10800017 	ldw	r2,0(r2)
 183b884:	10800217 	ldw	r2,8(r2)
 183b888:	10002926 	beq	r2,zero,183b930 <do_recv+0xd0>
    if (msg->conn->type == NETCONN_TCP) {
 183b88c:	e0bfff17 	ldw	r2,-4(fp)
 183b890:	10800017 	ldw	r2,0(r2)
 183b894:	10800017 	ldw	r2,0(r2)
 183b898:	10800418 	cmpnei	r2,r2,16
 183b89c:	1000241e 	bne	r2,zero,183b930 <do_recv+0xd0>
#if TCP_LISTEN_BACKLOG
      if (msg->conn->pcb.tcp->state == LISTEN) {
 183b8a0:	e0bfff17 	ldw	r2,-4(fp)
 183b8a4:	10800017 	ldw	r2,0(r2)
 183b8a8:	10800217 	ldw	r2,8(r2)
 183b8ac:	10800617 	ldw	r2,24(r2)
 183b8b0:	10800058 	cmpnei	r2,r2,1
 183b8b4:	1000071e 	bne	r2,zero,183b8d4 <do_recv+0x74>
        tcp_accepted(msg->conn->pcb.tcp);
 183b8b8:	e0bfff17 	ldw	r2,-4(fp)
 183b8bc:	10800017 	ldw	r2,0(r2)
 183b8c0:	10800217 	ldw	r2,8(r2)
 183b8c4:	10c00843 	ldbu	r3,33(r2)
 183b8c8:	18ffffc4 	addi	r3,r3,-1
 183b8cc:	10c00845 	stb	r3,33(r2)
 183b8d0:	00001706 	br	183b930 <do_recv+0xd0>
      } else
#endif /* TCP_LISTEN_BACKLOG */
      {
        u32_t remaining = msg->msg.r.len;
 183b8d4:	e0bfff17 	ldw	r2,-4(fp)
 183b8d8:	10800217 	ldw	r2,8(r2)
 183b8dc:	e0bffd15 	stw	r2,-12(fp)
        do {
          u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 183b8e0:	e0bffd17 	ldw	r2,-12(fp)
 183b8e4:	00ffffd4 	movui	r3,65535
 183b8e8:	18800236 	bltu	r3,r2,183b8f4 <do_recv+0x94>
 183b8ec:	e0bffd17 	ldw	r2,-12(fp)
 183b8f0:	00000106 	br	183b8f8 <do_recv+0x98>
 183b8f4:	00bfffc4 	movi	r2,-1
 183b8f8:	e0bffe0d 	sth	r2,-8(fp)
          tcp_recved(msg->conn->pcb.tcp, recved);
 183b8fc:	e0bfff17 	ldw	r2,-4(fp)
 183b900:	10800017 	ldw	r2,0(r2)
 183b904:	10800217 	ldw	r2,8(r2)
 183b908:	e0fffe0b 	ldhu	r3,-8(fp)
 183b90c:	180b883a 	mov	r5,r3
 183b910:	1009883a 	mov	r4,r2
 183b914:	181c2c00 	call	181c2c0 <tcp_recved>
          remaining -= recved;
 183b918:	e0bffe0b 	ldhu	r2,-8(fp)
 183b91c:	e0fffd17 	ldw	r3,-12(fp)
 183b920:	1885c83a 	sub	r2,r3,r2
 183b924:	e0bffd15 	stw	r2,-12(fp)
        }while(remaining != 0);
 183b928:	e0bffd17 	ldw	r2,-12(fp)
 183b92c:	103fec1e 	bne	r2,zero,183b8e0 <__alt_mem_mem_0+0xff81b8e0>
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 183b930:	e0bfff17 	ldw	r2,-4(fp)
 183b934:	10800017 	ldw	r2,0(r2)
 183b938:	10800404 	addi	r2,r2,16
 183b93c:	1009883a 	mov	r4,r2
 183b940:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 183b944:	0001883a 	nop
 183b948:	e037883a 	mov	sp,fp
 183b94c:	dfc00117 	ldw	ra,4(sp)
 183b950:	df000017 	ldw	fp,0(sp)
 183b954:	dec00204 	addi	sp,sp,8
 183b958:	f800283a 	ret

0183b95c <do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
do_writemore(struct netconn *conn)
{
 183b95c:	defff804 	addi	sp,sp,-32
 183b960:	dfc00715 	stw	ra,28(sp)
 183b964:	df000615 	stw	fp,24(sp)
 183b968:	df000604 	addi	fp,sp,24
 183b96c:	e13fff15 	stw	r4,-4(fp)
  err_t err;
  void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 183b970:	e03ffb05 	stb	zero,-20(fp)
  size_t diff;
  u8_t dontblock = netconn_is_nonblocking(conn) ||
 183b974:	e0bfff17 	ldw	r2,-4(fp)
 183b978:	10800903 	ldbu	r2,36(r2)
 183b97c:	10803fcc 	andi	r2,r2,255
 183b980:	1080008c 	andi	r2,r2,2
 183b984:	1000061e 	bne	r2,zero,183b9a0 <do_writemore+0x44>
       (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
 183b988:	e0bfff17 	ldw	r2,-4(fp)
 183b98c:	10800b17 	ldw	r2,44(r2)
 183b990:	10800403 	ldbu	r2,16(r2)
 183b994:	10803fcc 	andi	r2,r2,255
 183b998:	1080010c 	andi	r2,r2,4
  err_t err;
  void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock = netconn_is_nonblocking(conn) ||
 183b99c:	10000226 	beq	r2,zero,183b9a8 <do_writemore+0x4c>
 183b9a0:	00800044 	movi	r2,1
 183b9a4:	00000106 	br	183b9ac <do_writemore+0x50>
 183b9a8:	0005883a 	mov	r2,zero
 183b9ac:	e0bffb85 	stb	r2,-18(fp)
       (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
  u8_t apiflags = conn->current_msg->msg.w.apiflags;
 183b9b0:	e0bfff17 	ldw	r2,-4(fp)
 183b9b4:	10800b17 	ldw	r2,44(r2)
 183b9b8:	10800403 	ldbu	r2,16(r2)
 183b9bc:	e0bffb45 	stb	r2,-19(fp)
      conn->current_msg->msg.w.len = conn->write_offset;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 183b9c0:	e0bfff17 	ldw	r2,-4(fp)
 183b9c4:	10800b17 	ldw	r2,44(r2)
 183b9c8:	10c00217 	ldw	r3,8(r2)
 183b9cc:	e0bfff17 	ldw	r2,-4(fp)
 183b9d0:	10800a17 	ldw	r2,40(r2)
 183b9d4:	1885883a 	add	r2,r3,r2
 183b9d8:	e0bffc15 	stw	r2,-16(fp)
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 183b9dc:	e0bfff17 	ldw	r2,-4(fp)
 183b9e0:	10800b17 	ldw	r2,44(r2)
 183b9e4:	10c00317 	ldw	r3,12(r2)
 183b9e8:	e0bfff17 	ldw	r2,-4(fp)
 183b9ec:	10800a17 	ldw	r2,40(r2)
 183b9f0:	1885c83a 	sub	r2,r3,r2
 183b9f4:	e0bffd15 	stw	r2,-12(fp)
    if (diff > 0xffffUL) { /* max_u16_t */
 183b9f8:	e0bffd17 	ldw	r2,-12(fp)
 183b9fc:	00ffffd4 	movui	r3,65535
 183ba00:	1880062e 	bgeu	r3,r2,183ba1c <do_writemore+0xc0>
      len = 0xffff;
 183ba04:	00bfffc4 	movi	r2,-1
 183ba08:	e0bffa8d 	sth	r2,-22(fp)
#if LWIP_TCPIP_CORE_LOCKING
      conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
      apiflags |= TCP_WRITE_FLAG_MORE;
 183ba0c:	e0bffb43 	ldbu	r2,-19(fp)
 183ba10:	10800094 	ori	r2,r2,2
 183ba14:	e0bffb45 	stb	r2,-19(fp)
 183ba18:	00000206 	br	183ba24 <do_writemore+0xc8>
    } else {
      len = (u16_t)diff;
 183ba1c:	e0bffd17 	ldw	r2,-12(fp)
 183ba20:	e0bffa8d 	sth	r2,-22(fp)
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 183ba24:	e0bfff17 	ldw	r2,-4(fp)
 183ba28:	10800217 	ldw	r2,8(r2)
 183ba2c:	10801a8b 	ldhu	r2,106(r2)
 183ba30:	e0bffe0d 	sth	r2,-8(fp)
    if (available < len) {
 183ba34:	e0fffe0b 	ldhu	r3,-8(fp)
 183ba38:	e0bffa8b 	ldhu	r2,-22(fp)
 183ba3c:	18800c2e 	bgeu	r3,r2,183ba70 <do_writemore+0x114>
      /* don't try to write more than sendbuf */
      len = available;
 183ba40:	e0bffe0b 	ldhu	r2,-8(fp)
 183ba44:	e0bffa8d 	sth	r2,-22(fp)
      if (dontblock){ 
 183ba48:	e0bffb83 	ldbu	r2,-18(fp)
 183ba4c:	10000526 	beq	r2,zero,183ba64 <do_writemore+0x108>
        if (!len) {
 183ba50:	e0bffa8b 	ldhu	r2,-22(fp)
 183ba54:	1000061e 	bne	r2,zero,183ba70 <do_writemore+0x114>
          err = ERR_WOULDBLOCK;
 183ba58:	00bffe44 	movi	r2,-7
 183ba5c:	e0bffa05 	stb	r2,-24(fp)
          goto err_mem;
 183ba60:	00001206 	br	183baac <do_writemore+0x150>
        }
      } else {
#if LWIP_TCPIP_CORE_LOCKING
        conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
        apiflags |= TCP_WRITE_FLAG_MORE;
 183ba64:	e0bffb43 	ldbu	r2,-19(fp)
 183ba68:	10800094 	ori	r2,r2,2
 183ba6c:	e0bffb45 	stb	r2,-19(fp)
      }
    }
    LWIP_ASSERT("do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 183ba70:	e0bfff17 	ldw	r2,-4(fp)
 183ba74:	10800217 	ldw	r2,8(r2)
 183ba78:	e0fffa8b 	ldhu	r3,-22(fp)
 183ba7c:	e13ffb43 	ldbu	r4,-19(fp)
 183ba80:	200f883a 	mov	r7,r4
 183ba84:	180d883a 	mov	r6,r3
 183ba88:	e17ffc17 	ldw	r5,-16(fp)
 183ba8c:	1009883a 	mov	r4,r2
 183ba90:	181e7480 	call	181e748 <tcp_write>
 183ba94:	e0bffa05 	stb	r2,-24(fp)
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 183ba98:	e0bffa07 	ldb	r2,-24(fp)
 183ba9c:	10000326 	beq	r2,zero,183baac <do_writemore+0x150>
 183baa0:	e0bffa07 	ldb	r2,-24(fp)
 183baa4:	10bfffd8 	cmpnei	r2,r2,-1
 183baa8:	10002e1e 	bne	r2,zero,183bb64 <do_writemore+0x208>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 183baac:	e0bffb83 	ldbu	r2,-18(fp)
 183bab0:	10001626 	beq	r2,zero,183bb0c <do_writemore+0x1b0>
 183bab4:	e0fffa8b 	ldhu	r3,-22(fp)
 183bab8:	e0bfff17 	ldw	r2,-4(fp)
 183babc:	10800b17 	ldw	r2,44(r2)
 183bac0:	10800317 	ldw	r2,12(r2)
 183bac4:	1880112e 	bgeu	r3,r2,183bb0c <do_writemore+0x1b0>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 183bac8:	e0bfff17 	ldw	r2,-4(fp)
 183bacc:	10800c17 	ldw	r2,48(r2)
 183bad0:	10000726 	beq	r2,zero,183baf0 <do_writemore+0x194>
 183bad4:	e0bfff17 	ldw	r2,-4(fp)
 183bad8:	10800c17 	ldw	r2,48(r2)
 183badc:	e0fffa8b 	ldhu	r3,-22(fp)
 183bae0:	180d883a 	mov	r6,r3
 183bae4:	014000c4 	movi	r5,3
 183bae8:	e13fff17 	ldw	r4,-4(fp)
 183baec:	103ee83a 	callr	r2
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 183baf0:	e0bfff17 	ldw	r2,-4(fp)
 183baf4:	10800903 	ldbu	r2,36(r2)
 183baf8:	10800414 	ori	r2,r2,16
 183bafc:	1007883a 	mov	r3,r2
 183bb00:	e0bfff17 	ldw	r2,-4(fp)
 183bb04:	10c00905 	stb	r3,36(r2)
 183bb08:	00001606 	br	183bb64 <do_writemore+0x208>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 183bb0c:	e0bfff17 	ldw	r2,-4(fp)
 183bb10:	10800217 	ldw	r2,8(r2)
 183bb14:	10801a8b 	ldhu	r2,106(r2)
 183bb18:	10bfffcc 	andi	r2,r2,65535
 183bb1c:	10816d70 	cmpltui	r2,r2,1461
 183bb20:	1000061e 	bne	r2,zero,183bb3c <do_writemore+0x1e0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 183bb24:	e0bfff17 	ldw	r2,-4(fp)
 183bb28:	10800217 	ldw	r2,8(r2)
 183bb2c:	10801b0b 	ldhu	r2,108(r2)
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 183bb30:	10bfffcc 	andi	r2,r2,65535
 183bb34:	10800130 	cmpltui	r2,r2,4
 183bb38:	10000a1e 	bne	r2,zero,183bb64 <do_writemore+0x208>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 183bb3c:	e0bfff17 	ldw	r2,-4(fp)
 183bb40:	10800c17 	ldw	r2,48(r2)
 183bb44:	10000726 	beq	r2,zero,183bb64 <do_writemore+0x208>
 183bb48:	e0bfff17 	ldw	r2,-4(fp)
 183bb4c:	10800c17 	ldw	r2,48(r2)
 183bb50:	e0fffa8b 	ldhu	r3,-22(fp)
 183bb54:	180d883a 	mov	r6,r3
 183bb58:	014000c4 	movi	r5,3
 183bb5c:	e13fff17 	ldw	r4,-4(fp)
 183bb60:	103ee83a 	callr	r2
      }
    }

    if (err == ERR_OK) {
 183bb64:	e0bffa07 	ldb	r2,-24(fp)
 183bb68:	10001c1e 	bne	r2,zero,183bbdc <do_writemore+0x280>
      conn->write_offset += len;
 183bb6c:	e0bfff17 	ldw	r2,-4(fp)
 183bb70:	10c00a17 	ldw	r3,40(r2)
 183bb74:	e0bffa8b 	ldhu	r2,-22(fp)
 183bb78:	1887883a 	add	r3,r3,r2
 183bb7c:	e0bfff17 	ldw	r2,-4(fp)
 183bb80:	10c00a15 	stw	r3,40(r2)
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 183bb84:	e0bfff17 	ldw	r2,-4(fp)
 183bb88:	10c00a17 	ldw	r3,40(r2)
 183bb8c:	e0bfff17 	ldw	r2,-4(fp)
 183bb90:	10800b17 	ldw	r2,44(r2)
 183bb94:	10800317 	ldw	r2,12(r2)
 183bb98:	18800226 	beq	r3,r2,183bba4 <do_writemore+0x248>
 183bb9c:	e0bffb83 	ldbu	r2,-18(fp)
 183bba0:	10000926 	beq	r2,zero,183bbc8 <do_writemore+0x26c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 183bba4:	e0bfff17 	ldw	r2,-4(fp)
 183bba8:	10800b17 	ldw	r2,44(r2)
 183bbac:	e0ffff17 	ldw	r3,-4(fp)
 183bbb0:	18c00a17 	ldw	r3,40(r3)
 183bbb4:	10c00315 	stw	r3,12(r2)
        /* everything was written */
        write_finished = 1;
 183bbb8:	00800044 	movi	r2,1
 183bbbc:	e0bffb05 	stb	r2,-20(fp)
        conn->write_offset = 0;
 183bbc0:	e0bfff17 	ldw	r2,-4(fp)
 183bbc4:	10000a15 	stw	zero,40(r2)
      }
      tcp_output(conn->pcb.tcp);
 183bbc8:	e0bfff17 	ldw	r2,-4(fp)
 183bbcc:	10800217 	ldw	r2,8(r2)
 183bbd0:	1009883a 	mov	r4,r2
 183bbd4:	181f4fc0 	call	181f4fc <tcp_output>
 183bbd8:	00000f06 	br	183bc18 <do_writemore+0x2bc>
    } else if ((err == ERR_MEM) && !dontblock) {
 183bbdc:	e0bffa07 	ldb	r2,-24(fp)
 183bbe0:	10bfffd8 	cmpnei	r2,r2,-1
 183bbe4:	1000071e 	bne	r2,zero,183bc04 <do_writemore+0x2a8>
 183bbe8:	e0bffb83 	ldbu	r2,-18(fp)
 183bbec:	1000051e 	bne	r2,zero,183bc04 <do_writemore+0x2a8>
      /* If ERR_MEM, we wait for sent_tcp or poll_tcp to be called
         we do NOT return to the application thread, since ERR_MEM is
         only a temporary error! */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      tcp_output(conn->pcb.tcp);
 183bbf0:	e0bfff17 	ldw	r2,-4(fp)
 183bbf4:	10800217 	ldw	r2,8(r2)
 183bbf8:	1009883a 	mov	r4,r2
 183bbfc:	181f4fc0 	call	181f4fc <tcp_output>
 183bc00:	00000506 	br	183bc18 <do_writemore+0x2bc>
      conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 183bc04:	00800044 	movi	r2,1
 183bc08:	e0bffb05 	stb	r2,-20(fp)
      conn->current_msg->msg.w.len = 0;
 183bc0c:	e0bfff17 	ldw	r2,-4(fp)
 183bc10:	10800b17 	ldw	r2,44(r2)
 183bc14:	10000315 	stw	zero,12(r2)
    }
  }
  if (write_finished) {
 183bc18:	e0bffb03 	ldbu	r2,-20(fp)
 183bc1c:	10000c26 	beq	r2,zero,183bc50 <do_writemore+0x2f4>
    /* everything was written: set back connection state
       and back to application task */
    conn->current_msg->err = err;
 183bc20:	e0bfff17 	ldw	r2,-4(fp)
 183bc24:	10800b17 	ldw	r2,44(r2)
 183bc28:	e0fffa03 	ldbu	r3,-24(fp)
 183bc2c:	10c00105 	stb	r3,4(r2)
    conn->current_msg = NULL;
 183bc30:	e0bfff17 	ldw	r2,-4(fp)
 183bc34:	10000b15 	stw	zero,44(r2)
    conn->state = NETCONN_NONE;
 183bc38:	e0bfff17 	ldw	r2,-4(fp)
 183bc3c:	10000115 	stw	zero,4(r2)
#if LWIP_TCPIP_CORE_LOCKING
    if ((conn->flags & NETCONN_FLAG_WRITE_DELAYED) != 0)
#endif
    {
      sys_sem_signal(&conn->op_completed);
 183bc40:	e0bfff17 	ldw	r2,-4(fp)
 183bc44:	10800404 	addi	r2,r2,16
 183bc48:	1009883a 	mov	r4,r2
 183bc4c:	1814d2c0 	call	1814d2c <sys_sem_signal>
  }
#if LWIP_TCPIP_CORE_LOCKING
  else
    return ERR_MEM;
#endif
  return ERR_OK;
 183bc50:	0005883a 	mov	r2,zero
}
 183bc54:	e037883a 	mov	sp,fp
 183bc58:	dfc00117 	ldw	ra,4(sp)
 183bc5c:	df000017 	ldw	fp,0(sp)
 183bc60:	dec00204 	addi	sp,sp,8
 183bc64:	f800283a 	ret

0183bc68 <do_write>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_write(struct api_msg_msg *msg)
{
 183bc68:	defffd04 	addi	sp,sp,-12
 183bc6c:	dfc00215 	stw	ra,8(sp)
 183bc70:	df000115 	stw	fp,4(sp)
 183bc74:	df000104 	addi	fp,sp,4
 183bc78:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 183bc7c:	e0bfff17 	ldw	r2,-4(fp)
 183bc80:	10800017 	ldw	r2,0(r2)
 183bc84:	10800303 	ldbu	r2,12(r2)
 183bc88:	10803fcc 	andi	r2,r2,255
 183bc8c:	1080201c 	xori	r2,r2,128
 183bc90:	10bfe004 	addi	r2,r2,-128
 183bc94:	10bffdc8 	cmpgei	r2,r2,-9
 183bc98:	1000061e 	bne	r2,zero,183bcb4 <do_write+0x4c>
    msg->err = msg->conn->last_err;
 183bc9c:	e0bfff17 	ldw	r2,-4(fp)
 183bca0:	10800017 	ldw	r2,0(r2)
 183bca4:	10c00303 	ldbu	r3,12(r2)
 183bca8:	e0bfff17 	ldw	r2,-4(fp)
 183bcac:	10c00105 	stb	r3,4(r2)
 183bcb0:	00002806 	br	183bd54 <do_write+0xec>
  } else {
    if (msg->conn->type == NETCONN_TCP) {
 183bcb4:	e0bfff17 	ldw	r2,-4(fp)
 183bcb8:	10800017 	ldw	r2,0(r2)
 183bcbc:	10800017 	ldw	r2,0(r2)
 183bcc0:	10800418 	cmpnei	r2,r2,16
 183bcc4:	1000201e 	bne	r2,zero,183bd48 <do_write+0xe0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 183bcc8:	e0bfff17 	ldw	r2,-4(fp)
 183bccc:	10800017 	ldw	r2,0(r2)
 183bcd0:	10800117 	ldw	r2,4(r2)
 183bcd4:	10000426 	beq	r2,zero,183bce8 <do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 183bcd8:	e0bfff17 	ldw	r2,-4(fp)
 183bcdc:	00fffec4 	movi	r3,-5
 183bce0:	10c00105 	stb	r3,4(r2)
 183bce4:	00001b06 	br	183bd54 <do_write+0xec>
      } else if (msg->conn->pcb.tcp != NULL) {
 183bce8:	e0bfff17 	ldw	r2,-4(fp)
 183bcec:	10800017 	ldw	r2,0(r2)
 183bcf0:	10800217 	ldw	r2,8(r2)
 183bcf4:	10001026 	beq	r2,zero,183bd38 <do_write+0xd0>
        msg->conn->state = NETCONN_WRITE;
 183bcf8:	e0bfff17 	ldw	r2,-4(fp)
 183bcfc:	10800017 	ldw	r2,0(r2)
 183bd00:	00c00044 	movi	r3,1
 183bd04:	10c00115 	stw	r3,4(r2)
        /* set all the variables used by do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
        msg->conn->current_msg = msg;
 183bd08:	e0bfff17 	ldw	r2,-4(fp)
 183bd0c:	10800017 	ldw	r2,0(r2)
 183bd10:	e0ffff17 	ldw	r3,-4(fp)
 183bd14:	10c00b15 	stw	r3,44(r2)
        msg->conn->write_offset = 0;
 183bd18:	e0bfff17 	ldw	r2,-4(fp)
 183bd1c:	10800017 	ldw	r2,0(r2)
 183bd20:	10000a15 	stw	zero,40(r2)
          sys_arch_sem_wait(&msg->conn->op_completed, 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        do_writemore(msg->conn);
 183bd24:	e0bfff17 	ldw	r2,-4(fp)
 183bd28:	10800017 	ldw	r2,0(r2)
 183bd2c:	1009883a 	mov	r4,r2
 183bd30:	183b95c0 	call	183b95c <do_writemore>
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if do_writemore was called, don't ACK the APIMSG
           since do_writemore ACKs it! */
        return;
 183bd34:	00000c06 	br	183bd68 <do_write+0x100>
      } else {
        msg->err = ERR_CONN;
 183bd38:	e0bfff17 	ldw	r2,-4(fp)
 183bd3c:	00fffcc4 	movi	r3,-13
 183bd40:	10c00105 	stb	r3,4(r2)
 183bd44:	00000306 	br	183bd54 <do_write+0xec>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 183bd48:	e0bfff17 	ldw	r2,-4(fp)
 183bd4c:	00fffe84 	movi	r3,-6
 183bd50:	10c00105 	stb	r3,4(r2)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 183bd54:	e0bfff17 	ldw	r2,-4(fp)
 183bd58:	10800017 	ldw	r2,0(r2)
 183bd5c:	10800404 	addi	r2,r2,16
 183bd60:	1009883a 	mov	r4,r2
 183bd64:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 183bd68:	e037883a 	mov	sp,fp
 183bd6c:	dfc00117 	ldw	ra,4(sp)
 183bd70:	df000017 	ldw	fp,0(sp)
 183bd74:	dec00204 	addi	sp,sp,8
 183bd78:	f800283a 	ret

0183bd7c <do_getaddr>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_getaddr(struct api_msg_msg *msg)
{
 183bd7c:	defffd04 	addi	sp,sp,-12
 183bd80:	dfc00215 	stw	ra,8(sp)
 183bd84:	df000115 	stw	fp,4(sp)
 183bd88:	df000104 	addi	fp,sp,4
 183bd8c:	e13fff15 	stw	r4,-4(fp)
  if (msg->conn->pcb.ip != NULL) {
 183bd90:	e0bfff17 	ldw	r2,-4(fp)
 183bd94:	10800017 	ldw	r2,0(r2)
 183bd98:	10800217 	ldw	r2,8(r2)
 183bd9c:	10005f26 	beq	r2,zero,183bf1c <do_getaddr+0x1a0>
    *(msg->msg.ad.ipaddr) = (msg->msg.ad.local ? msg->conn->pcb.ip->local_ip :
 183bda0:	e0bfff17 	ldw	r2,-4(fp)
 183bda4:	10800217 	ldw	r2,8(r2)
 183bda8:	e0ffff17 	ldw	r3,-4(fp)
 183bdac:	18c00403 	ldbu	r3,16(r3)
 183bdb0:	18c03fcc 	andi	r3,r3,255
 183bdb4:	18000626 	beq	r3,zero,183bdd0 <do_getaddr+0x54>
 183bdb8:	e0ffff17 	ldw	r3,-4(fp)
 183bdbc:	18c00017 	ldw	r3,0(r3)
 183bdc0:	18c00217 	ldw	r3,8(r3)
 183bdc4:	18c00017 	ldw	r3,0(r3)
 183bdc8:	10c00015 	stw	r3,0(r2)
 183bdcc:	00000506 	br	183bde4 <do_getaddr+0x68>
                             msg->conn->pcb.ip->remote_ip);
 183bdd0:	e0ffff17 	ldw	r3,-4(fp)
 183bdd4:	18c00017 	ldw	r3,0(r3)
 183bdd8:	18c00217 	ldw	r3,8(r3)
 */
void
do_getaddr(struct api_msg_msg *msg)
{
  if (msg->conn->pcb.ip != NULL) {
    *(msg->msg.ad.ipaddr) = (msg->msg.ad.local ? msg->conn->pcb.ip->local_ip :
 183bddc:	18c00117 	ldw	r3,4(r3)
 183bde0:	10c00015 	stw	r3,0(r2)
                             msg->conn->pcb.ip->remote_ip);

    msg->err = ERR_OK;
 183bde4:	e0bfff17 	ldw	r2,-4(fp)
 183bde8:	10000105 	stb	zero,4(r2)
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 183bdec:	e0bfff17 	ldw	r2,-4(fp)
 183bdf0:	10800017 	ldw	r2,0(r2)
 183bdf4:	10800017 	ldw	r2,0(r2)
 183bdf8:	10803c0c 	andi	r2,r2,240
 183bdfc:	10c00820 	cmpeqi	r3,r2,32
 183be00:	1800161e 	bne	r3,zero,183be5c <do_getaddr+0xe0>
 183be04:	10c01020 	cmpeqi	r3,r2,64
 183be08:	1800031e 	bne	r3,zero,183be18 <do_getaddr+0x9c>
 183be0c:	10800420 	cmpeqi	r2,r2,16
 183be10:	1000311e 	bne	r2,zero,183bed8 <do_getaddr+0x15c>
      *(msg->msg.ad.port) = (msg->msg.ad.local?msg->conn->pcb.tcp->local_port:msg->conn->pcb.tcp->remote_port);
      break;
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
      break;
 183be14:	00004406 	br	183bf28 <do_getaddr+0x1ac>

    msg->err = ERR_OK;
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
 183be18:	e0bfff17 	ldw	r2,-4(fp)
 183be1c:	10800403 	ldbu	r2,16(r2)
 183be20:	10803fcc 	andi	r2,r2,255
 183be24:	10000926 	beq	r2,zero,183be4c <do_getaddr+0xd0>
        *(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
 183be28:	e0bfff17 	ldw	r2,-4(fp)
 183be2c:	10800317 	ldw	r2,12(r2)
 183be30:	e0ffff17 	ldw	r3,-4(fp)
 183be34:	18c00017 	ldw	r3,0(r3)
 183be38:	18c00217 	ldw	r3,8(r3)
 183be3c:	18c00403 	ldbu	r3,16(r3)
 183be40:	18c03fcc 	andi	r3,r3,255
 183be44:	10c0000d 	sth	r3,0(r2)
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
 183be48:	00003706 	br	183bf28 <do_getaddr+0x1ac>
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
        *(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
 183be4c:	e0bfff17 	ldw	r2,-4(fp)
 183be50:	00fffcc4 	movi	r3,-13
 183be54:	10c00105 	stb	r3,4(r2)
      }
      break;
 183be58:	00003306 	br	183bf28 <do_getaddr+0x1ac>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
 183be5c:	e0bfff17 	ldw	r2,-4(fp)
 183be60:	10800403 	ldbu	r2,16(r2)
 183be64:	10803fcc 	andi	r2,r2,255
 183be68:	10000826 	beq	r2,zero,183be8c <do_getaddr+0x110>
        *(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 183be6c:	e0bfff17 	ldw	r2,-4(fp)
 183be70:	10800317 	ldw	r2,12(r2)
 183be74:	e0ffff17 	ldw	r3,-4(fp)
 183be78:	18c00017 	ldw	r3,0(r3)
 183be7c:	18c00217 	ldw	r3,8(r3)
 183be80:	18c0048b 	ldhu	r3,18(r3)
 183be84:	10c0000d 	sth	r3,0(r2)
          msg->err = ERR_CONN;
        } else {
          *(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 183be88:	00002706 	br	183bf28 <do_getaddr+0x1ac>
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
        *(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
      } else {
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 183be8c:	e0bfff17 	ldw	r2,-4(fp)
 183be90:	10800017 	ldw	r2,0(r2)
 183be94:	10800217 	ldw	r2,8(r2)
 183be98:	10800403 	ldbu	r2,16(r2)
 183be9c:	10803fcc 	andi	r2,r2,255
 183bea0:	1080010c 	andi	r2,r2,4
 183bea4:	1000041e 	bne	r2,zero,183beb8 <do_getaddr+0x13c>
          msg->err = ERR_CONN;
 183bea8:	e0bfff17 	ldw	r2,-4(fp)
 183beac:	00fffcc4 	movi	r3,-13
 183beb0:	10c00105 	stb	r3,4(r2)
        } else {
          *(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 183beb4:	00001c06 	br	183bf28 <do_getaddr+0x1ac>
        *(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
      } else {
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
          msg->err = ERR_CONN;
        } else {
          *(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 183beb8:	e0bfff17 	ldw	r2,-4(fp)
 183bebc:	10800317 	ldw	r2,12(r2)
 183bec0:	e0ffff17 	ldw	r3,-4(fp)
 183bec4:	18c00017 	ldw	r3,0(r3)
 183bec8:	18c00217 	ldw	r3,8(r3)
 183becc:	18c0050b 	ldhu	r3,20(r3)
 183bed0:	10c0000d 	sth	r3,0(r2)
        }
      }
      break;
 183bed4:	00001406 	br	183bf28 <do_getaddr+0x1ac>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      *(msg->msg.ad.port) = (msg->msg.ad.local?msg->conn->pcb.tcp->local_port:msg->conn->pcb.tcp->remote_port);
 183bed8:	e0bfff17 	ldw	r2,-4(fp)
 183bedc:	10c00317 	ldw	r3,12(r2)
 183bee0:	e0bfff17 	ldw	r2,-4(fp)
 183bee4:	10800403 	ldbu	r2,16(r2)
 183bee8:	10803fcc 	andi	r2,r2,255
 183beec:	10000526 	beq	r2,zero,183bf04 <do_getaddr+0x188>
 183bef0:	e0bfff17 	ldw	r2,-4(fp)
 183bef4:	10800017 	ldw	r2,0(r2)
 183bef8:	10800217 	ldw	r2,8(r2)
 183befc:	1080078b 	ldhu	r2,30(r2)
 183bf00:	00000406 	br	183bf14 <do_getaddr+0x198>
 183bf04:	e0bfff17 	ldw	r2,-4(fp)
 183bf08:	10800017 	ldw	r2,0(r2)
 183bf0c:	10800217 	ldw	r2,8(r2)
 183bf10:	1080080b 	ldhu	r2,32(r2)
 183bf14:	1880000d 	sth	r2,0(r3)
      break;
 183bf18:	00000306 	br	183bf28 <do_getaddr+0x1ac>
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
      break;
    }
  } else {
    msg->err = ERR_CONN;
 183bf1c:	e0bfff17 	ldw	r2,-4(fp)
 183bf20:	00fffcc4 	movi	r3,-13
 183bf24:	10c00105 	stb	r3,4(r2)
  }
  TCPIP_APIMSG_ACK(msg);
 183bf28:	e0bfff17 	ldw	r2,-4(fp)
 183bf2c:	10800017 	ldw	r2,0(r2)
 183bf30:	10800404 	addi	r2,r2,16
 183bf34:	1009883a 	mov	r4,r2
 183bf38:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 183bf3c:	0001883a 	nop
 183bf40:	e037883a 	mov	sp,fp
 183bf44:	dfc00117 	ldw	ra,4(sp)
 183bf48:	df000017 	ldw	fp,0(sp)
 183bf4c:	dec00204 	addi	sp,sp,8
 183bf50:	f800283a 	ret

0183bf54 <do_close>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_close(struct api_msg_msg *msg)
{
 183bf54:	defffd04 	addi	sp,sp,-12
 183bf58:	dfc00215 	stw	ra,8(sp)
 183bf5c:	df000115 	stw	fp,4(sp)
 183bf60:	df000104 	addi	fp,sp,4
 183bf64:	e13fff15 	stw	r4,-4(fp)
#if LWIP_TCP
  /* @todo: abort running write/connect? */
  if ((msg->conn->state != NETCONN_NONE) && (msg->conn->state != NETCONN_LISTEN)) {
 183bf68:	e0bfff17 	ldw	r2,-4(fp)
 183bf6c:	10800017 	ldw	r2,0(r2)
 183bf70:	10800117 	ldw	r2,4(r2)
 183bf74:	10000926 	beq	r2,zero,183bf9c <do_close+0x48>
 183bf78:	e0bfff17 	ldw	r2,-4(fp)
 183bf7c:	10800017 	ldw	r2,0(r2)
 183bf80:	10800117 	ldw	r2,4(r2)
 183bf84:	108000a0 	cmpeqi	r2,r2,2
 183bf88:	1000041e 	bne	r2,zero,183bf9c <do_close+0x48>
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
    msg->err = ERR_INPROGRESS;
 183bf8c:	e0bfff17 	ldw	r2,-4(fp)
 183bf90:	00fffec4 	movi	r3,-5
 183bf94:	10c00105 	stb	r3,4(r2)
 183bf98:	00003006 	br	183c05c <do_close+0x108>
  } else if ((msg->conn->pcb.tcp != NULL) && (msg->conn->type == NETCONN_TCP)) {
 183bf9c:	e0bfff17 	ldw	r2,-4(fp)
 183bfa0:	10800017 	ldw	r2,0(r2)
 183bfa4:	10800217 	ldw	r2,8(r2)
 183bfa8:	10002926 	beq	r2,zero,183c050 <do_close+0xfc>
 183bfac:	e0bfff17 	ldw	r2,-4(fp)
 183bfb0:	10800017 	ldw	r2,0(r2)
 183bfb4:	10800017 	ldw	r2,0(r2)
 183bfb8:	10800418 	cmpnei	r2,r2,16
 183bfbc:	1000241e 	bne	r2,zero,183c050 <do_close+0xfc>
    if ((msg->msg.sd.shut != NETCONN_SHUT_RDWR) && (msg->conn->state == NETCONN_LISTEN)) {
 183bfc0:	e0bfff17 	ldw	r2,-4(fp)
 183bfc4:	10800203 	ldbu	r2,8(r2)
 183bfc8:	10803fcc 	andi	r2,r2,255
 183bfcc:	108000e0 	cmpeqi	r2,r2,3
 183bfd0:	1000091e 	bne	r2,zero,183bff8 <do_close+0xa4>
 183bfd4:	e0bfff17 	ldw	r2,-4(fp)
 183bfd8:	10800017 	ldw	r2,0(r2)
 183bfdc:	10800117 	ldw	r2,4(r2)
 183bfe0:	10800098 	cmpnei	r2,r2,2
 183bfe4:	1000041e 	bne	r2,zero,183bff8 <do_close+0xa4>
      /* LISTEN doesn't support half shutdown */
      msg->err = ERR_CONN;
 183bfe8:	e0bfff17 	ldw	r2,-4(fp)
 183bfec:	00fffcc4 	movi	r3,-13
 183bff0:	10c00105 	stb	r3,4(r2)
  if ((msg->conn->state != NETCONN_NONE) && (msg->conn->state != NETCONN_LISTEN)) {
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
    msg->err = ERR_INPROGRESS;
  } else if ((msg->conn->pcb.tcp != NULL) && (msg->conn->type == NETCONN_TCP)) {
    if ((msg->msg.sd.shut != NETCONN_SHUT_RDWR) && (msg->conn->state == NETCONN_LISTEN)) {
 183bff4:	00001906 	br	183c05c <do_close+0x108>
      /* LISTEN doesn't support half shutdown */
      msg->err = ERR_CONN;
    } else {
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 183bff8:	e0bfff17 	ldw	r2,-4(fp)
 183bffc:	10800203 	ldbu	r2,8(r2)
 183c000:	10803fcc 	andi	r2,r2,255
 183c004:	1080004c 	andi	r2,r2,1
 183c008:	10000426 	beq	r2,zero,183c01c <do_close+0xc8>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 183c00c:	e0bfff17 	ldw	r2,-4(fp)
 183c010:	10800017 	ldw	r2,0(r2)
 183c014:	1009883a 	mov	r4,r2
 183c018:	183a8b80 	call	183a8b8 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 183c01c:	e0bfff17 	ldw	r2,-4(fp)
 183c020:	10800017 	ldw	r2,0(r2)
 183c024:	00c00104 	movi	r3,4
 183c028:	10c00115 	stw	r3,4(r2)
      msg->conn->current_msg = msg;
 183c02c:	e0bfff17 	ldw	r2,-4(fp)
 183c030:	10800017 	ldw	r2,0(r2)
 183c034:	e0ffff17 	ldw	r3,-4(fp)
 183c038:	10c00b15 	stw	r3,44(r2)
      do_close_internal(msg->conn);
 183c03c:	e0bfff17 	ldw	r2,-4(fp)
 183c040:	10800017 	ldw	r2,0(r2)
 183c044:	1009883a 	mov	r4,r2
 183c048:	183aa340 	call	183aa34 <do_close_internal>
      /* for tcp netconns, do_close_internal ACKs the message */
      return;
 183c04c:	00000806 	br	183c070 <do_close+0x11c>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_VAL;
 183c050:	e0bfff17 	ldw	r2,-4(fp)
 183c054:	00fffe84 	movi	r3,-6
 183c058:	10c00105 	stb	r3,4(r2)
  }
  sys_sem_signal(&msg->conn->op_completed);
 183c05c:	e0bfff17 	ldw	r2,-4(fp)
 183c060:	10800017 	ldw	r2,0(r2)
 183c064:	10800404 	addi	r2,r2,16
 183c068:	1009883a 	mov	r4,r2
 183c06c:	1814d2c0 	call	1814d2c <sys_sem_signal>
}
 183c070:	e037883a 	mov	sp,fp
 183c074:	dfc00117 	ldw	ra,4(sp)
 183c078:	df000017 	ldw	fp,0(sp)
 183c07c:	dec00204 	addi	sp,sp,8
 183c080:	f800283a 	ret

0183c084 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 183c084:	defffd04 	addi	sp,sp,-12
 183c088:	dfc00215 	stw	ra,8(sp)
 183c08c:	df000115 	stw	fp,4(sp)
 183c090:	df000104 	addi	fp,sp,4
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 183c094:	010001c4 	movi	r4,7
 183c098:	18340280 	call	1834028 <memp_malloc>
 183c09c:	e0bfff15 	stw	r2,-4(fp)
  if (buf != NULL) {
 183c0a0:	e0bfff17 	ldw	r2,-4(fp)
 183c0a4:	10000e26 	beq	r2,zero,183c0e0 <netbuf_new+0x5c>
    buf->p = NULL;
 183c0a8:	e0bfff17 	ldw	r2,-4(fp)
 183c0ac:	10000015 	stw	zero,0(r2)
    buf->ptr = NULL;
 183c0b0:	e0bfff17 	ldw	r2,-4(fp)
 183c0b4:	10000115 	stw	zero,4(r2)
    ip_addr_set_any(&buf->addr);
 183c0b8:	e0bfff17 	ldw	r2,-4(fp)
 183c0bc:	10000215 	stw	zero,8(r2)
    buf->port = 0;
 183c0c0:	e0bfff17 	ldw	r2,-4(fp)
 183c0c4:	1000030d 	sth	zero,12(r2)
#if LWIP_NETBUF_RECVINFO || LWIP_CHECKSUM_ON_COPY
#if LWIP_CHECKSUM_ON_COPY
    buf->flags = 0;
 183c0c8:	e0bfff17 	ldw	r2,-4(fp)
 183c0cc:	10000385 	stb	zero,14(r2)
#endif /* LWIP_CHECKSUM_ON_COPY */
    buf->toport_chksum = 0;
 183c0d0:	e0bfff17 	ldw	r2,-4(fp)
 183c0d4:	1000040d 	sth	zero,16(r2)
#if LWIP_NETBUF_RECVINFO
    ip_addr_set_any(&buf->toaddr);
#endif /* LWIP_NETBUF_RECVINFO */
#endif /* LWIP_NETBUF_RECVINFO || LWIP_CHECKSUM_ON_COPY */
    return buf;
 183c0d8:	e0bfff17 	ldw	r2,-4(fp)
 183c0dc:	00000106 	br	183c0e4 <netbuf_new+0x60>
  } else {
    return NULL;
 183c0e0:	0005883a 	mov	r2,zero
  }
}
 183c0e4:	e037883a 	mov	sp,fp
 183c0e8:	dfc00117 	ldw	ra,4(sp)
 183c0ec:	df000017 	ldw	fp,0(sp)
 183c0f0:	dec00204 	addi	sp,sp,8
 183c0f4:	f800283a 	ret

0183c0f8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 183c0f8:	defffd04 	addi	sp,sp,-12
 183c0fc:	dfc00215 	stw	ra,8(sp)
 183c100:	df000115 	stw	fp,4(sp)
 183c104:	df000104 	addi	fp,sp,4
 183c108:	e13fff15 	stw	r4,-4(fp)
  if (buf != NULL) {
 183c10c:	e0bfff17 	ldw	r2,-4(fp)
 183c110:	10001026 	beq	r2,zero,183c154 <netbuf_delete+0x5c>
    if (buf->p != NULL) {
 183c114:	e0bfff17 	ldw	r2,-4(fp)
 183c118:	10800017 	ldw	r2,0(r2)
 183c11c:	10000a26 	beq	r2,zero,183c148 <netbuf_delete+0x50>
      pbuf_free(buf->p);
 183c120:	e0bfff17 	ldw	r2,-4(fp)
 183c124:	10800017 	ldw	r2,0(r2)
 183c128:	1009883a 	mov	r4,r2
 183c12c:	181a9040 	call	181a904 <pbuf_free>
      buf->p = buf->ptr = NULL;
 183c130:	e0bfff17 	ldw	r2,-4(fp)
 183c134:	10000115 	stw	zero,4(r2)
 183c138:	e0bfff17 	ldw	r2,-4(fp)
 183c13c:	10c00117 	ldw	r3,4(r2)
 183c140:	e0bfff17 	ldw	r2,-4(fp)
 183c144:	10c00015 	stw	r3,0(r2)
    }
    memp_free(MEMP_NETBUF, buf);
 183c148:	e17fff17 	ldw	r5,-4(fp)
 183c14c:	010001c4 	movi	r4,7
 183c150:	18341e40 	call	18341e4 <memp_free>
  }
}
 183c154:	0001883a 	nop
 183c158:	e037883a 	mov	sp,fp
 183c15c:	dfc00117 	ldw	ra,4(sp)
 183c160:	df000017 	ldw	fp,0(sp)
 183c164:	dec00204 	addi	sp,sp,8
 183c168:	f800283a 	ret

0183c16c <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 183c16c:	defffc04 	addi	sp,sp,-16
 183c170:	dfc00315 	stw	ra,12(sp)
 183c174:	df000215 	stw	fp,8(sp)
 183c178:	df000204 	addi	fp,sp,8
 183c17c:	e13ffe15 	stw	r4,-8(fp)
 183c180:	2805883a 	mov	r2,r5
 183c184:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 183c188:	e0bffe17 	ldw	r2,-8(fp)
 183c18c:	1000091e 	bne	r2,zero,183c1b4 <netbuf_alloc+0x48>
 183c190:	01c06134 	movhi	r7,388
 183c194:	39cd1004 	addi	r7,r7,13376
 183c198:	01801b44 	movi	r6,109
 183c19c:	01406134 	movhi	r5,388
 183c1a0:	294d1604 	addi	r5,r5,13400
 183c1a4:	01006134 	movhi	r4,388
 183c1a8:	210d1d04 	addi	r4,r4,13428
 183c1ac:	1800bd80 	call	1800bd8 <printf>
 183c1b0:	003fff06 	br	183c1b0 <__alt_mem_mem_0+0xff81c1b0>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 183c1b4:	e0bffe17 	ldw	r2,-8(fp)
 183c1b8:	10800017 	ldw	r2,0(r2)
 183c1bc:	10000426 	beq	r2,zero,183c1d0 <netbuf_alloc+0x64>
    pbuf_free(buf->p);
 183c1c0:	e0bffe17 	ldw	r2,-8(fp)
 183c1c4:	10800017 	ldw	r2,0(r2)
 183c1c8:	1009883a 	mov	r4,r2
 183c1cc:	181a9040 	call	181a904 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 183c1d0:	e0bfff0b 	ldhu	r2,-4(fp)
 183c1d4:	000d883a 	mov	r6,zero
 183c1d8:	100b883a 	mov	r5,r2
 183c1dc:	0009883a 	mov	r4,zero
 183c1e0:	181a1480 	call	181a148 <pbuf_alloc>
 183c1e4:	1007883a 	mov	r3,r2
 183c1e8:	e0bffe17 	ldw	r2,-8(fp)
 183c1ec:	10c00015 	stw	r3,0(r2)
  if (buf->p == NULL) {
 183c1f0:	e0bffe17 	ldw	r2,-8(fp)
 183c1f4:	10800017 	ldw	r2,0(r2)
 183c1f8:	1000021e 	bne	r2,zero,183c204 <netbuf_alloc+0x98>
     return NULL;
 183c1fc:	0005883a 	mov	r2,zero
 183c200:	00000706 	br	183c220 <netbuf_alloc+0xb4>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
             (buf->p->len >= size));
  buf->ptr = buf->p;
 183c204:	e0bffe17 	ldw	r2,-8(fp)
 183c208:	10c00017 	ldw	r3,0(r2)
 183c20c:	e0bffe17 	ldw	r2,-8(fp)
 183c210:	10c00115 	stw	r3,4(r2)
  return buf->p->payload;
 183c214:	e0bffe17 	ldw	r2,-8(fp)
 183c218:	10800017 	ldw	r2,0(r2)
 183c21c:	10800117 	ldw	r2,4(r2)
}
 183c220:	e037883a 	mov	sp,fp
 183c224:	dfc00117 	ldw	ra,4(sp)
 183c228:	df000017 	ldw	fp,0(sp)
 183c22c:	dec00204 	addi	sp,sp,8
 183c230:	f800283a 	ret

0183c234 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 183c234:	defffd04 	addi	sp,sp,-12
 183c238:	dfc00215 	stw	ra,8(sp)
 183c23c:	df000115 	stw	fp,4(sp)
 183c240:	df000104 	addi	fp,sp,4
 183c244:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 183c248:	e0bfff17 	ldw	r2,-4(fp)
 183c24c:	1000091e 	bne	r2,zero,183c274 <netbuf_free+0x40>
 183c250:	01c06134 	movhi	r7,388
 183c254:	39cd1004 	addi	r7,r7,13376
 183c258:	01802144 	movi	r6,133
 183c25c:	01406134 	movhi	r5,388
 183c260:	294d2904 	addi	r5,r5,13476
 183c264:	01006134 	movhi	r4,388
 183c268:	210d1d04 	addi	r4,r4,13428
 183c26c:	1800bd80 	call	1800bd8 <printf>
 183c270:	003fff06 	br	183c270 <__alt_mem_mem_0+0xff81c270>
  if (buf->p != NULL) {
 183c274:	e0bfff17 	ldw	r2,-4(fp)
 183c278:	10800017 	ldw	r2,0(r2)
 183c27c:	10000426 	beq	r2,zero,183c290 <netbuf_free+0x5c>
    pbuf_free(buf->p);
 183c280:	e0bfff17 	ldw	r2,-4(fp)
 183c284:	10800017 	ldw	r2,0(r2)
 183c288:	1009883a 	mov	r4,r2
 183c28c:	181a9040 	call	181a904 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 183c290:	e0bfff17 	ldw	r2,-4(fp)
 183c294:	10000115 	stw	zero,4(r2)
 183c298:	e0bfff17 	ldw	r2,-4(fp)
 183c29c:	10c00117 	ldw	r3,4(r2)
 183c2a0:	e0bfff17 	ldw	r2,-4(fp)
 183c2a4:	10c00015 	stw	r3,0(r2)
}
 183c2a8:	0001883a 	nop
 183c2ac:	e037883a 	mov	sp,fp
 183c2b0:	dfc00117 	ldw	ra,4(sp)
 183c2b4:	df000017 	ldw	fp,0(sp)
 183c2b8:	dec00204 	addi	sp,sp,8
 183c2bc:	f800283a 	ret

0183c2c0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 183c2c0:	defffb04 	addi	sp,sp,-20
 183c2c4:	dfc00415 	stw	ra,16(sp)
 183c2c8:	df000315 	stw	fp,12(sp)
 183c2cc:	df000304 	addi	fp,sp,12
 183c2d0:	e13ffd15 	stw	r4,-12(fp)
 183c2d4:	e17ffe15 	stw	r5,-8(fp)
 183c2d8:	3005883a 	mov	r2,r6
 183c2dc:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 183c2e0:	e0bffd17 	ldw	r2,-12(fp)
 183c2e4:	1000091e 	bne	r2,zero,183c30c <netbuf_ref+0x4c>
 183c2e8:	01c06134 	movhi	r7,388
 183c2ec:	39cd1004 	addi	r7,r7,13376
 183c2f0:	01802604 	movi	r6,152
 183c2f4:	01406134 	movhi	r5,388
 183c2f8:	294d3004 	addi	r5,r5,13504
 183c2fc:	01006134 	movhi	r4,388
 183c300:	210d1d04 	addi	r4,r4,13428
 183c304:	1800bd80 	call	1800bd8 <printf>
 183c308:	003fff06 	br	183c308 <__alt_mem_mem_0+0xff81c308>
  if (buf->p != NULL) {
 183c30c:	e0bffd17 	ldw	r2,-12(fp)
 183c310:	10800017 	ldw	r2,0(r2)
 183c314:	10000426 	beq	r2,zero,183c328 <netbuf_ref+0x68>
    pbuf_free(buf->p);
 183c318:	e0bffd17 	ldw	r2,-12(fp)
 183c31c:	10800017 	ldw	r2,0(r2)
 183c320:	1009883a 	mov	r4,r2
 183c324:	181a9040 	call	181a904 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 183c328:	01800084 	movi	r6,2
 183c32c:	000b883a 	mov	r5,zero
 183c330:	0009883a 	mov	r4,zero
 183c334:	181a1480 	call	181a148 <pbuf_alloc>
 183c338:	1007883a 	mov	r3,r2
 183c33c:	e0bffd17 	ldw	r2,-12(fp)
 183c340:	10c00015 	stw	r3,0(r2)
  if (buf->p == NULL) {
 183c344:	e0bffd17 	ldw	r2,-12(fp)
 183c348:	10800017 	ldw	r2,0(r2)
 183c34c:	1000041e 	bne	r2,zero,183c360 <netbuf_ref+0xa0>
    buf->ptr = NULL;
 183c350:	e0bffd17 	ldw	r2,-12(fp)
 183c354:	10000115 	stw	zero,4(r2)
    return ERR_MEM;
 183c358:	00bfffc4 	movi	r2,-1
 183c35c:	00001106 	br	183c3a4 <netbuf_ref+0xe4>
  }
  buf->p->payload = (void*)dataptr;
 183c360:	e0bffd17 	ldw	r2,-12(fp)
 183c364:	10800017 	ldw	r2,0(r2)
 183c368:	e0fffe17 	ldw	r3,-8(fp)
 183c36c:	10c00115 	stw	r3,4(r2)
  buf->p->len = buf->p->tot_len = size;
 183c370:	e0bffd17 	ldw	r2,-12(fp)
 183c374:	10c00017 	ldw	r3,0(r2)
 183c378:	e0bffd17 	ldw	r2,-12(fp)
 183c37c:	10800017 	ldw	r2,0(r2)
 183c380:	e13fff0b 	ldhu	r4,-4(fp)
 183c384:	1100020d 	sth	r4,8(r2)
 183c388:	1080020b 	ldhu	r2,8(r2)
 183c38c:	1880028d 	sth	r2,10(r3)
  buf->ptr = buf->p;
 183c390:	e0bffd17 	ldw	r2,-12(fp)
 183c394:	10c00017 	ldw	r3,0(r2)
 183c398:	e0bffd17 	ldw	r2,-12(fp)
 183c39c:	10c00115 	stw	r3,4(r2)
  return ERR_OK;
 183c3a0:	0005883a 	mov	r2,zero
}
 183c3a4:	e037883a 	mov	sp,fp
 183c3a8:	dfc00117 	ldw	ra,4(sp)
 183c3ac:	df000017 	ldw	fp,0(sp)
 183c3b0:	dec00204 	addi	sp,sp,8
 183c3b4:	f800283a 	ret

0183c3b8 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
 183c3b8:	defffc04 	addi	sp,sp,-16
 183c3bc:	dfc00315 	stw	ra,12(sp)
 183c3c0:	df000215 	stw	fp,8(sp)
 183c3c4:	df000204 	addi	fp,sp,8
 183c3c8:	e13ffe15 	stw	r4,-8(fp)
 183c3cc:	e17fff15 	stw	r5,-4(fp)
  LWIP_ERROR("netbuf_ref: invalid head", (head != NULL), return;);
 183c3d0:	e0bffe17 	ldw	r2,-8(fp)
 183c3d4:	1000091e 	bne	r2,zero,183c3fc <netbuf_chain+0x44>
 183c3d8:	01c06134 	movhi	r7,388
 183c3dc:	39cd1004 	addi	r7,r7,13376
 183c3e0:	01802c04 	movi	r6,176
 183c3e4:	01406134 	movhi	r5,388
 183c3e8:	294d3604 	addi	r5,r5,13528
 183c3ec:	01006134 	movhi	r4,388
 183c3f0:	210d1d04 	addi	r4,r4,13428
 183c3f4:	1800bd80 	call	1800bd8 <printf>
 183c3f8:	003fff06 	br	183c3f8 <__alt_mem_mem_0+0xff81c3f8>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
 183c3fc:	e0bfff17 	ldw	r2,-4(fp)
 183c400:	1000091e 	bne	r2,zero,183c428 <netbuf_chain+0x70>
 183c404:	01c06134 	movhi	r7,388
 183c408:	39cd1004 	addi	r7,r7,13376
 183c40c:	01802c44 	movi	r6,177
 183c410:	01406134 	movhi	r5,388
 183c414:	294d3d04 	addi	r5,r5,13556
 183c418:	01006134 	movhi	r4,388
 183c41c:	210d1d04 	addi	r4,r4,13428
 183c420:	1800bd80 	call	1800bd8 <printf>
 183c424:	003fff06 	br	183c424 <__alt_mem_mem_0+0xff81c424>
  pbuf_cat(head->p, tail->p);
 183c428:	e0bffe17 	ldw	r2,-8(fp)
 183c42c:	10c00017 	ldw	r3,0(r2)
 183c430:	e0bfff17 	ldw	r2,-4(fp)
 183c434:	10800017 	ldw	r2,0(r2)
 183c438:	100b883a 	mov	r5,r2
 183c43c:	1809883a 	mov	r4,r3
 183c440:	181aad80 	call	181aad8 <pbuf_cat>
  head->ptr = head->p;
 183c444:	e0bffe17 	ldw	r2,-8(fp)
 183c448:	10c00017 	ldw	r3,0(r2)
 183c44c:	e0bffe17 	ldw	r2,-8(fp)
 183c450:	10c00115 	stw	r3,4(r2)
  memp_free(MEMP_NETBUF, tail);
 183c454:	e17fff17 	ldw	r5,-4(fp)
 183c458:	010001c4 	movi	r4,7
 183c45c:	18341e40 	call	18341e4 <memp_free>
}
 183c460:	0001883a 	nop
 183c464:	e037883a 	mov	sp,fp
 183c468:	dfc00117 	ldw	ra,4(sp)
 183c46c:	df000017 	ldw	fp,0(sp)
 183c470:	dec00204 	addi	sp,sp,8
 183c474:	f800283a 	ret

0183c478 <netbuf_data>:
 * @return ERR_OK if the information was retreived,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 183c478:	defffb04 	addi	sp,sp,-20
 183c47c:	dfc00415 	stw	ra,16(sp)
 183c480:	df000315 	stw	fp,12(sp)
 183c484:	df000304 	addi	fp,sp,12
 183c488:	e13ffd15 	stw	r4,-12(fp)
 183c48c:	e17ffe15 	stw	r5,-8(fp)
 183c490:	e1bfff15 	stw	r6,-4(fp)
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 183c494:	e0bffd17 	ldw	r2,-12(fp)
 183c498:	1000091e 	bne	r2,zero,183c4c0 <netbuf_data+0x48>
 183c49c:	01c06134 	movhi	r7,388
 183c4a0:	39cd1004 	addi	r7,r7,13376
 183c4a4:	018030c4 	movi	r6,195
 183c4a8:	01406134 	movhi	r5,388
 183c4ac:	294d4404 	addi	r5,r5,13584
 183c4b0:	01006134 	movhi	r4,388
 183c4b4:	210d1d04 	addi	r4,r4,13428
 183c4b8:	1800bd80 	call	1800bd8 <printf>
 183c4bc:	003fff06 	br	183c4bc <__alt_mem_mem_0+0xff81c4bc>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 183c4c0:	e0bffe17 	ldw	r2,-8(fp)
 183c4c4:	1000091e 	bne	r2,zero,183c4ec <netbuf_data+0x74>
 183c4c8:	01c06134 	movhi	r7,388
 183c4cc:	39cd1004 	addi	r7,r7,13376
 183c4d0:	01803104 	movi	r6,196
 183c4d4:	01406134 	movhi	r5,388
 183c4d8:	294d4b04 	addi	r5,r5,13612
 183c4dc:	01006134 	movhi	r4,388
 183c4e0:	210d1d04 	addi	r4,r4,13428
 183c4e4:	1800bd80 	call	1800bd8 <printf>
 183c4e8:	003fff06 	br	183c4e8 <__alt_mem_mem_0+0xff81c4e8>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 183c4ec:	e0bfff17 	ldw	r2,-4(fp)
 183c4f0:	1000091e 	bne	r2,zero,183c518 <netbuf_data+0xa0>
 183c4f4:	01c06134 	movhi	r7,388
 183c4f8:	39cd1004 	addi	r7,r7,13376
 183c4fc:	01803144 	movi	r6,197
 183c500:	01406134 	movhi	r5,388
 183c504:	294d5304 	addi	r5,r5,13644
 183c508:	01006134 	movhi	r4,388
 183c50c:	210d1d04 	addi	r4,r4,13428
 183c510:	1800bd80 	call	1800bd8 <printf>
 183c514:	003fff06 	br	183c514 <__alt_mem_mem_0+0xff81c514>

  if (buf->ptr == NULL) {
 183c518:	e0bffd17 	ldw	r2,-12(fp)
 183c51c:	10800117 	ldw	r2,4(r2)
 183c520:	1000021e 	bne	r2,zero,183c52c <netbuf_data+0xb4>
    return ERR_BUF;
 183c524:	00bfff84 	movi	r2,-2
 183c528:	00000b06 	br	183c558 <netbuf_data+0xe0>
  }
  *dataptr = buf->ptr->payload;
 183c52c:	e0bffd17 	ldw	r2,-12(fp)
 183c530:	10800117 	ldw	r2,4(r2)
 183c534:	10c00117 	ldw	r3,4(r2)
 183c538:	e0bffe17 	ldw	r2,-8(fp)
 183c53c:	10c00015 	stw	r3,0(r2)
  *len = buf->ptr->len;
 183c540:	e0bffd17 	ldw	r2,-12(fp)
 183c544:	10800117 	ldw	r2,4(r2)
 183c548:	10c0028b 	ldhu	r3,10(r2)
 183c54c:	e0bfff17 	ldw	r2,-4(fp)
 183c550:	10c0000d 	sth	r3,0(r2)
  return ERR_OK;
 183c554:	0005883a 	mov	r2,zero
}
 183c558:	e037883a 	mov	sp,fp
 183c55c:	dfc00117 	ldw	ra,4(sp)
 183c560:	df000017 	ldw	fp,0(sp)
 183c564:	dec00204 	addi	sp,sp,8
 183c568:	f800283a 	ret

0183c56c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 183c56c:	defffd04 	addi	sp,sp,-12
 183c570:	dfc00215 	stw	ra,8(sp)
 183c574:	df000115 	stw	fp,4(sp)
 183c578:	df000104 	addi	fp,sp,4
 183c57c:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return -1;);
 183c580:	e0bfff17 	ldw	r2,-4(fp)
 183c584:	1000091e 	bne	r2,zero,183c5ac <netbuf_next+0x40>
 183c588:	01c06134 	movhi	r7,388
 183c58c:	39cd1004 	addi	r7,r7,13376
 183c590:	01803704 	movi	r6,220
 183c594:	01406134 	movhi	r5,388
 183c598:	294d2904 	addi	r5,r5,13476
 183c59c:	01006134 	movhi	r4,388
 183c5a0:	210d1d04 	addi	r4,r4,13428
 183c5a4:	1800bd80 	call	1800bd8 <printf>
 183c5a8:	003fff06 	br	183c5a8 <__alt_mem_mem_0+0xff81c5a8>
  if (buf->ptr->next == NULL) {
 183c5ac:	e0bfff17 	ldw	r2,-4(fp)
 183c5b0:	10800117 	ldw	r2,4(r2)
 183c5b4:	10800017 	ldw	r2,0(r2)
 183c5b8:	1000021e 	bne	r2,zero,183c5c4 <netbuf_next+0x58>
    return -1;
 183c5bc:	00bfffc4 	movi	r2,-1
 183c5c0:	00000c06 	br	183c5f4 <netbuf_next+0x88>
  }
  buf->ptr = buf->ptr->next;
 183c5c4:	e0bfff17 	ldw	r2,-4(fp)
 183c5c8:	10800117 	ldw	r2,4(r2)
 183c5cc:	10c00017 	ldw	r3,0(r2)
 183c5d0:	e0bfff17 	ldw	r2,-4(fp)
 183c5d4:	10c00115 	stw	r3,4(r2)
  if (buf->ptr->next == NULL) {
 183c5d8:	e0bfff17 	ldw	r2,-4(fp)
 183c5dc:	10800117 	ldw	r2,4(r2)
 183c5e0:	10800017 	ldw	r2,0(r2)
 183c5e4:	1000021e 	bne	r2,zero,183c5f0 <netbuf_next+0x84>
    return 1;
 183c5e8:	00800044 	movi	r2,1
 183c5ec:	00000106 	br	183c5f4 <netbuf_next+0x88>
  }
  return 0;
 183c5f0:	0005883a 	mov	r2,zero
}
 183c5f4:	e037883a 	mov	sp,fp
 183c5f8:	dfc00117 	ldw	ra,4(sp)
 183c5fc:	df000017 	ldw	fp,0(sp)
 183c600:	dec00204 	addi	sp,sp,8
 183c604:	f800283a 	ret

0183c608 <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
 183c608:	defffd04 	addi	sp,sp,-12
 183c60c:	dfc00215 	stw	ra,8(sp)
 183c610:	df000115 	stw	fp,4(sp)
 183c614:	df000104 	addi	fp,sp,4
 183c618:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 183c61c:	e0bfff17 	ldw	r2,-4(fp)
 183c620:	1000091e 	bne	r2,zero,183c648 <netbuf_first+0x40>
 183c624:	01c06134 	movhi	r7,388
 183c628:	39cd1004 	addi	r7,r7,13376
 183c62c:	01803c44 	movi	r6,241
 183c630:	01406134 	movhi	r5,388
 183c634:	294d2904 	addi	r5,r5,13476
 183c638:	01006134 	movhi	r4,388
 183c63c:	210d1d04 	addi	r4,r4,13428
 183c640:	1800bd80 	call	1800bd8 <printf>
 183c644:	003fff06 	br	183c644 <__alt_mem_mem_0+0xff81c644>
  buf->ptr = buf->p;
 183c648:	e0bfff17 	ldw	r2,-4(fp)
 183c64c:	10c00017 	ldw	r3,0(r2)
 183c650:	e0bfff17 	ldw	r2,-4(fp)
 183c654:	10c00115 	stw	r3,4(r2)
}
 183c658:	0001883a 	nop
 183c65c:	e037883a 	mov	sp,fp
 183c660:	dfc00117 	ldw	ra,4(sp)
 183c664:	df000017 	ldw	fp,0(sp)
 183c668:	dec00204 	addi	sp,sp,8
 183c66c:	f800283a 	ret

0183c670 <atexit>:
 183c670:	200b883a 	mov	r5,r4
 183c674:	000f883a 	mov	r7,zero
 183c678:	000d883a 	mov	r6,zero
 183c67c:	0009883a 	mov	r4,zero
 183c680:	183edc01 	jmpi	183edc0 <__register_exitproc>

0183c684 <exit>:
 183c684:	defffe04 	addi	sp,sp,-8
 183c688:	000b883a 	mov	r5,zero
 183c68c:	dc000015 	stw	r16,0(sp)
 183c690:	dfc00115 	stw	ra,4(sp)
 183c694:	2021883a 	mov	r16,r4
 183c698:	183eed80 	call	183eed8 <__call_exitprocs>
 183c69c:	00806134 	movhi	r2,388
 183c6a0:	1094f304 	addi	r2,r2,21452
 183c6a4:	11000017 	ldw	r4,0(r2)
 183c6a8:	20800f17 	ldw	r2,60(r4)
 183c6ac:	10000126 	beq	r2,zero,183c6b4 <exit+0x30>
 183c6b0:	103ee83a 	callr	r2
 183c6b4:	8009883a 	mov	r4,r16
 183c6b8:	18404c40 	call	18404c4 <_exit>

0183c6bc <malloc>:
 183c6bc:	00806134 	movhi	r2,388
 183c6c0:	1094f404 	addi	r2,r2,21456
 183c6c4:	200b883a 	mov	r5,r4
 183c6c8:	11000017 	ldw	r4,0(r2)
 183c6cc:	180575c1 	jmpi	180575c <_malloc_r>

0183c6d0 <free>:
 183c6d0:	00806134 	movhi	r2,388
 183c6d4:	1094f404 	addi	r2,r2,21456
 183c6d8:	200b883a 	mov	r5,r4
 183c6dc:	11000017 	ldw	r4,0(r2)
 183c6e0:	180502c1 	jmpi	180502c <_free_r>

0183c6e4 <memcmp>:
 183c6e4:	01c000c4 	movi	r7,3
 183c6e8:	3980192e 	bgeu	r7,r6,183c750 <memcmp+0x6c>
 183c6ec:	2144b03a 	or	r2,r4,r5
 183c6f0:	11c4703a 	and	r2,r2,r7
 183c6f4:	10000f26 	beq	r2,zero,183c734 <memcmp+0x50>
 183c6f8:	20800003 	ldbu	r2,0(r4)
 183c6fc:	28c00003 	ldbu	r3,0(r5)
 183c700:	10c0151e 	bne	r2,r3,183c758 <memcmp+0x74>
 183c704:	31bfff84 	addi	r6,r6,-2
 183c708:	01ffffc4 	movi	r7,-1
 183c70c:	00000406 	br	183c720 <memcmp+0x3c>
 183c710:	20800003 	ldbu	r2,0(r4)
 183c714:	28c00003 	ldbu	r3,0(r5)
 183c718:	31bfffc4 	addi	r6,r6,-1
 183c71c:	10c00e1e 	bne	r2,r3,183c758 <memcmp+0x74>
 183c720:	21000044 	addi	r4,r4,1
 183c724:	29400044 	addi	r5,r5,1
 183c728:	31fff91e 	bne	r6,r7,183c710 <__alt_mem_mem_0+0xff81c710>
 183c72c:	0005883a 	mov	r2,zero
 183c730:	f800283a 	ret
 183c734:	20c00017 	ldw	r3,0(r4)
 183c738:	28800017 	ldw	r2,0(r5)
 183c73c:	18bfee1e 	bne	r3,r2,183c6f8 <__alt_mem_mem_0+0xff81c6f8>
 183c740:	31bfff04 	addi	r6,r6,-4
 183c744:	21000104 	addi	r4,r4,4
 183c748:	29400104 	addi	r5,r5,4
 183c74c:	39bff936 	bltu	r7,r6,183c734 <__alt_mem_mem_0+0xff81c734>
 183c750:	303fe91e 	bne	r6,zero,183c6f8 <__alt_mem_mem_0+0xff81c6f8>
 183c754:	003ff506 	br	183c72c <__alt_mem_mem_0+0xff81c72c>
 183c758:	10c5c83a 	sub	r2,r2,r3
 183c75c:	f800283a 	ret

0183c760 <_putc_r>:
 183c760:	defffc04 	addi	sp,sp,-16
 183c764:	dc000215 	stw	r16,8(sp)
 183c768:	dfc00315 	stw	ra,12(sp)
 183c76c:	2021883a 	mov	r16,r4
 183c770:	20000226 	beq	r4,zero,183c77c <_putc_r+0x1c>
 183c774:	20800e17 	ldw	r2,56(r4)
 183c778:	10001b26 	beq	r2,zero,183c7e8 <_putc_r+0x88>
 183c77c:	30800217 	ldw	r2,8(r6)
 183c780:	10bfffc4 	addi	r2,r2,-1
 183c784:	30800215 	stw	r2,8(r6)
 183c788:	10000a16 	blt	r2,zero,183c7b4 <_putc_r+0x54>
 183c78c:	30800017 	ldw	r2,0(r6)
 183c790:	11400005 	stb	r5,0(r2)
 183c794:	30800017 	ldw	r2,0(r6)
 183c798:	10c00044 	addi	r3,r2,1
 183c79c:	30c00015 	stw	r3,0(r6)
 183c7a0:	10800003 	ldbu	r2,0(r2)
 183c7a4:	dfc00317 	ldw	ra,12(sp)
 183c7a8:	dc000217 	ldw	r16,8(sp)
 183c7ac:	dec00404 	addi	sp,sp,16
 183c7b0:	f800283a 	ret
 183c7b4:	30c00617 	ldw	r3,24(r6)
 183c7b8:	10c00616 	blt	r2,r3,183c7d4 <_putc_r+0x74>
 183c7bc:	30800017 	ldw	r2,0(r6)
 183c7c0:	00c00284 	movi	r3,10
 183c7c4:	11400005 	stb	r5,0(r2)
 183c7c8:	30800017 	ldw	r2,0(r6)
 183c7cc:	11400003 	ldbu	r5,0(r2)
 183c7d0:	28fff11e 	bne	r5,r3,183c798 <__alt_mem_mem_0+0xff81c798>
 183c7d4:	8009883a 	mov	r4,r16
 183c7d8:	dfc00317 	ldw	ra,12(sp)
 183c7dc:	dc000217 	ldw	r16,8(sp)
 183c7e0:	dec00404 	addi	sp,sp,16
 183c7e4:	1809de81 	jmpi	1809de8 <__swbuf_r>
 183c7e8:	d9400015 	stw	r5,0(sp)
 183c7ec:	d9800115 	stw	r6,4(sp)
 183c7f0:	1804eb80 	call	1804eb8 <__sinit>
 183c7f4:	d9800117 	ldw	r6,4(sp)
 183c7f8:	d9400017 	ldw	r5,0(sp)
 183c7fc:	003fdf06 	br	183c77c <__alt_mem_mem_0+0xff81c77c>

0183c800 <putc>:
 183c800:	00806134 	movhi	r2,388
 183c804:	defffc04 	addi	sp,sp,-16
 183c808:	1094f404 	addi	r2,r2,21456
 183c80c:	dc000115 	stw	r16,4(sp)
 183c810:	14000017 	ldw	r16,0(r2)
 183c814:	dc400215 	stw	r17,8(sp)
 183c818:	dfc00315 	stw	ra,12(sp)
 183c81c:	2023883a 	mov	r17,r4
 183c820:	80000226 	beq	r16,zero,183c82c <putc+0x2c>
 183c824:	80800e17 	ldw	r2,56(r16)
 183c828:	10001a26 	beq	r2,zero,183c894 <putc+0x94>
 183c82c:	28800217 	ldw	r2,8(r5)
 183c830:	10bfffc4 	addi	r2,r2,-1
 183c834:	28800215 	stw	r2,8(r5)
 183c838:	10000b16 	blt	r2,zero,183c868 <putc+0x68>
 183c83c:	28800017 	ldw	r2,0(r5)
 183c840:	14400005 	stb	r17,0(r2)
 183c844:	28800017 	ldw	r2,0(r5)
 183c848:	10c00044 	addi	r3,r2,1
 183c84c:	28c00015 	stw	r3,0(r5)
 183c850:	10800003 	ldbu	r2,0(r2)
 183c854:	dfc00317 	ldw	ra,12(sp)
 183c858:	dc400217 	ldw	r17,8(sp)
 183c85c:	dc000117 	ldw	r16,4(sp)
 183c860:	dec00404 	addi	sp,sp,16
 183c864:	f800283a 	ret
 183c868:	28c00617 	ldw	r3,24(r5)
 183c86c:	10c00e16 	blt	r2,r3,183c8a8 <putc+0xa8>
 183c870:	28800017 	ldw	r2,0(r5)
 183c874:	01000284 	movi	r4,10
 183c878:	14400005 	stb	r17,0(r2)
 183c87c:	28800017 	ldw	r2,0(r5)
 183c880:	10c00003 	ldbu	r3,0(r2)
 183c884:	193ff01e 	bne	r3,r4,183c848 <__alt_mem_mem_0+0xff81c848>
 183c888:	280d883a 	mov	r6,r5
 183c88c:	180b883a 	mov	r5,r3
 183c890:	00000706 	br	183c8b0 <putc+0xb0>
 183c894:	8009883a 	mov	r4,r16
 183c898:	d9400015 	stw	r5,0(sp)
 183c89c:	1804eb80 	call	1804eb8 <__sinit>
 183c8a0:	d9400017 	ldw	r5,0(sp)
 183c8a4:	003fe106 	br	183c82c <__alt_mem_mem_0+0xff81c82c>
 183c8a8:	280d883a 	mov	r6,r5
 183c8ac:	880b883a 	mov	r5,r17
 183c8b0:	8009883a 	mov	r4,r16
 183c8b4:	dfc00317 	ldw	ra,12(sp)
 183c8b8:	dc400217 	ldw	r17,8(sp)
 183c8bc:	dc000117 	ldw	r16,4(sp)
 183c8c0:	dec00404 	addi	sp,sp,16
 183c8c4:	1809de81 	jmpi	1809de8 <__swbuf_r>

0183c8c8 <_puts_r>:
 183c8c8:	defff604 	addi	sp,sp,-40
 183c8cc:	dc000715 	stw	r16,28(sp)
 183c8d0:	2021883a 	mov	r16,r4
 183c8d4:	2809883a 	mov	r4,r5
 183c8d8:	dc400815 	stw	r17,32(sp)
 183c8dc:	dfc00915 	stw	ra,36(sp)
 183c8e0:	2823883a 	mov	r17,r5
 183c8e4:	18075980 	call	1807598 <strlen>
 183c8e8:	10c00044 	addi	r3,r2,1
 183c8ec:	d8800115 	stw	r2,4(sp)
 183c8f0:	00806134 	movhi	r2,388
 183c8f4:	108d5a04 	addi	r2,r2,13672
 183c8f8:	d8800215 	stw	r2,8(sp)
 183c8fc:	00800044 	movi	r2,1
 183c900:	d8800315 	stw	r2,12(sp)
 183c904:	00800084 	movi	r2,2
 183c908:	dc400015 	stw	r17,0(sp)
 183c90c:	d8c00615 	stw	r3,24(sp)
 183c910:	dec00415 	stw	sp,16(sp)
 183c914:	d8800515 	stw	r2,20(sp)
 183c918:	80000226 	beq	r16,zero,183c924 <_puts_r+0x5c>
 183c91c:	80800e17 	ldw	r2,56(r16)
 183c920:	10001426 	beq	r2,zero,183c974 <_puts_r+0xac>
 183c924:	81400217 	ldw	r5,8(r16)
 183c928:	2880030b 	ldhu	r2,12(r5)
 183c92c:	10c8000c 	andi	r3,r2,8192
 183c930:	1800061e 	bne	r3,zero,183c94c <_puts_r+0x84>
 183c934:	29001917 	ldw	r4,100(r5)
 183c938:	00f7ffc4 	movi	r3,-8193
 183c93c:	10880014 	ori	r2,r2,8192
 183c940:	20c6703a 	and	r3,r4,r3
 183c944:	2880030d 	sth	r2,12(r5)
 183c948:	28c01915 	stw	r3,100(r5)
 183c94c:	d9800404 	addi	r6,sp,16
 183c950:	8009883a 	mov	r4,r16
 183c954:	18091580 	call	1809158 <__sfvwrite_r>
 183c958:	1000091e 	bne	r2,zero,183c980 <_puts_r+0xb8>
 183c95c:	00800284 	movi	r2,10
 183c960:	dfc00917 	ldw	ra,36(sp)
 183c964:	dc400817 	ldw	r17,32(sp)
 183c968:	dc000717 	ldw	r16,28(sp)
 183c96c:	dec00a04 	addi	sp,sp,40
 183c970:	f800283a 	ret
 183c974:	8009883a 	mov	r4,r16
 183c978:	1804eb80 	call	1804eb8 <__sinit>
 183c97c:	003fe906 	br	183c924 <__alt_mem_mem_0+0xff81c924>
 183c980:	00bfffc4 	movi	r2,-1
 183c984:	003ff606 	br	183c960 <__alt_mem_mem_0+0xff81c960>

0183c988 <puts>:
 183c988:	00806134 	movhi	r2,388
 183c98c:	1094f404 	addi	r2,r2,21456
 183c990:	200b883a 	mov	r5,r4
 183c994:	11000017 	ldw	r4,0(r2)
 183c998:	183c8c81 	jmpi	183c8c8 <_puts_r>

0183c99c <_snprintf_r>:
 183c99c:	30003116 	blt	r6,zero,183ca64 <_snprintf_r+0xc8>
 183c9a0:	deffe404 	addi	sp,sp,-112
 183c9a4:	00c08204 	movi	r3,520
 183c9a8:	dc001a15 	stw	r16,104(sp)
 183c9ac:	3005883a 	mov	r2,r6
 183c9b0:	dfc01b15 	stw	ra,108(sp)
 183c9b4:	d8c0030d 	sth	r3,12(sp)
 183c9b8:	d9400015 	stw	r5,0(sp)
 183c9bc:	d9400415 	stw	r5,16(sp)
 183c9c0:	380d883a 	mov	r6,r7
 183c9c4:	2021883a 	mov	r16,r4
 183c9c8:	10001026 	beq	r2,zero,183ca0c <_snprintf_r+0x70>
 183c9cc:	10bfffc4 	addi	r2,r2,-1
 183c9d0:	d8800215 	stw	r2,8(sp)
 183c9d4:	d8800515 	stw	r2,20(sp)
 183c9d8:	d9c01c04 	addi	r7,sp,112
 183c9dc:	00bfffc4 	movi	r2,-1
 183c9e0:	d80b883a 	mov	r5,sp
 183c9e4:	d880038d 	sth	r2,14(sp)
 183c9e8:	183cbe80 	call	183cbe8 <___svfprintf_internal_r>
 183c9ec:	00ffffc4 	movi	r3,-1
 183c9f0:	10c01316 	blt	r2,r3,183ca40 <_snprintf_r+0xa4>
 183c9f4:	d8c00017 	ldw	r3,0(sp)
 183c9f8:	18000005 	stb	zero,0(r3)
 183c9fc:	dfc01b17 	ldw	ra,108(sp)
 183ca00:	dc001a17 	ldw	r16,104(sp)
 183ca04:	dec01c04 	addi	sp,sp,112
 183ca08:	f800283a 	ret
 183ca0c:	00bfffc4 	movi	r2,-1
 183ca10:	d9c01c04 	addi	r7,sp,112
 183ca14:	d80b883a 	mov	r5,sp
 183ca18:	d8000215 	stw	zero,8(sp)
 183ca1c:	d8000515 	stw	zero,20(sp)
 183ca20:	d880038d 	sth	r2,14(sp)
 183ca24:	183cbe80 	call	183cbe8 <___svfprintf_internal_r>
 183ca28:	00ffffc4 	movi	r3,-1
 183ca2c:	10c00716 	blt	r2,r3,183ca4c <_snprintf_r+0xb0>
 183ca30:	dfc01b17 	ldw	ra,108(sp)
 183ca34:	dc001a17 	ldw	r16,104(sp)
 183ca38:	dec01c04 	addi	sp,sp,112
 183ca3c:	f800283a 	ret
 183ca40:	00c022c4 	movi	r3,139
 183ca44:	80c00015 	stw	r3,0(r16)
 183ca48:	003fea06 	br	183c9f4 <__alt_mem_mem_0+0xff81c9f4>
 183ca4c:	00c022c4 	movi	r3,139
 183ca50:	80c00015 	stw	r3,0(r16)
 183ca54:	dfc01b17 	ldw	ra,108(sp)
 183ca58:	dc001a17 	ldw	r16,104(sp)
 183ca5c:	dec01c04 	addi	sp,sp,112
 183ca60:	f800283a 	ret
 183ca64:	008022c4 	movi	r2,139
 183ca68:	20800015 	stw	r2,0(r4)
 183ca6c:	00bfffc4 	movi	r2,-1
 183ca70:	f800283a 	ret

0183ca74 <snprintf>:
 183ca74:	deffe304 	addi	sp,sp,-116
 183ca78:	dfc01b15 	stw	ra,108(sp)
 183ca7c:	dc001a15 	stw	r16,104(sp)
 183ca80:	d9c01c15 	stw	r7,112(sp)
 183ca84:	00806134 	movhi	r2,388
 183ca88:	1094f404 	addi	r2,r2,21456
 183ca8c:	14000017 	ldw	r16,0(r2)
 183ca90:	28002d16 	blt	r5,zero,183cb48 <snprintf+0xd4>
 183ca94:	00808204 	movi	r2,520
 183ca98:	d880030d 	sth	r2,12(sp)
 183ca9c:	d9000015 	stw	r4,0(sp)
 183caa0:	d9000415 	stw	r4,16(sp)
 183caa4:	28001126 	beq	r5,zero,183caec <snprintf+0x78>
 183caa8:	28bfffc4 	addi	r2,r5,-1
 183caac:	d8800215 	stw	r2,8(sp)
 183cab0:	d8800515 	stw	r2,20(sp)
 183cab4:	d9c01c04 	addi	r7,sp,112
 183cab8:	00bfffc4 	movi	r2,-1
 183cabc:	d80b883a 	mov	r5,sp
 183cac0:	8009883a 	mov	r4,r16
 183cac4:	d880038d 	sth	r2,14(sp)
 183cac8:	183cbe80 	call	183cbe8 <___svfprintf_internal_r>
 183cacc:	00ffffc4 	movi	r3,-1
 183cad0:	10c01416 	blt	r2,r3,183cb24 <snprintf+0xb0>
 183cad4:	d8c00017 	ldw	r3,0(sp)
 183cad8:	18000005 	stb	zero,0(r3)
 183cadc:	dfc01b17 	ldw	ra,108(sp)
 183cae0:	dc001a17 	ldw	r16,104(sp)
 183cae4:	dec01d04 	addi	sp,sp,116
 183cae8:	f800283a 	ret
 183caec:	00bfffc4 	movi	r2,-1
 183caf0:	d9c01c04 	addi	r7,sp,112
 183caf4:	d80b883a 	mov	r5,sp
 183caf8:	8009883a 	mov	r4,r16
 183cafc:	d8000215 	stw	zero,8(sp)
 183cb00:	d8000515 	stw	zero,20(sp)
 183cb04:	d880038d 	sth	r2,14(sp)
 183cb08:	183cbe80 	call	183cbe8 <___svfprintf_internal_r>
 183cb0c:	00ffffc4 	movi	r3,-1
 183cb10:	10c00716 	blt	r2,r3,183cb30 <snprintf+0xbc>
 183cb14:	dfc01b17 	ldw	ra,108(sp)
 183cb18:	dc001a17 	ldw	r16,104(sp)
 183cb1c:	dec01d04 	addi	sp,sp,116
 183cb20:	f800283a 	ret
 183cb24:	00c022c4 	movi	r3,139
 183cb28:	80c00015 	stw	r3,0(r16)
 183cb2c:	003fe906 	br	183cad4 <__alt_mem_mem_0+0xff81cad4>
 183cb30:	00c022c4 	movi	r3,139
 183cb34:	80c00015 	stw	r3,0(r16)
 183cb38:	dfc01b17 	ldw	ra,108(sp)
 183cb3c:	dc001a17 	ldw	r16,104(sp)
 183cb40:	dec01d04 	addi	sp,sp,116
 183cb44:	f800283a 	ret
 183cb48:	008022c4 	movi	r2,139
 183cb4c:	80800015 	stw	r2,0(r16)
 183cb50:	00bfffc4 	movi	r2,-1
 183cb54:	003fef06 	br	183cb14 <__alt_mem_mem_0+0xff81cb14>

0183cb58 <strcpy>:
 183cb58:	2906b03a 	or	r3,r5,r4
 183cb5c:	18c000cc 	andi	r3,r3,3
 183cb60:	2005883a 	mov	r2,r4
 183cb64:	1800161e 	bne	r3,zero,183cbc0 <strcpy+0x68>
 183cb68:	29c00017 	ldw	r7,0(r5)
 183cb6c:	02ffbff4 	movhi	r11,65279
 183cb70:	5affbfc4 	addi	r11,r11,-257
 183cb74:	02a02074 	movhi	r10,32897
 183cb78:	01c6303a 	nor	r3,zero,r7
 183cb7c:	3ac9883a 	add	r4,r7,r11
 183cb80:	52a02004 	addi	r10,r10,-32640
 183cb84:	20c6703a 	and	r3,r4,r3
 183cb88:	1a86703a 	and	r3,r3,r10
 183cb8c:	18000c1e 	bne	r3,zero,183cbc0 <strcpy+0x68>
 183cb90:	1011883a 	mov	r8,r2
 183cb94:	41c00015 	stw	r7,0(r8)
 183cb98:	29400104 	addi	r5,r5,4
 183cb9c:	29c00017 	ldw	r7,0(r5)
 183cba0:	41800104 	addi	r6,r8,4
 183cba4:	3011883a 	mov	r8,r6
 183cba8:	3ad3883a 	add	r9,r7,r11
 183cbac:	01c6303a 	nor	r3,zero,r7
 183cbb0:	48c6703a 	and	r3,r9,r3
 183cbb4:	1a86703a 	and	r3,r3,r10
 183cbb8:	183ff626 	beq	r3,zero,183cb94 <__alt_mem_mem_0+0xff81cb94>
 183cbbc:	00000106 	br	183cbc4 <strcpy+0x6c>
 183cbc0:	100d883a 	mov	r6,r2
 183cbc4:	28c00003 	ldbu	r3,0(r5)
 183cbc8:	31800044 	addi	r6,r6,1
 183cbcc:	29400044 	addi	r5,r5,1
 183cbd0:	30ffffc5 	stb	r3,-1(r6)
 183cbd4:	18c03fcc 	andi	r3,r3,255
 183cbd8:	18c0201c 	xori	r3,r3,128
 183cbdc:	18ffe004 	addi	r3,r3,-128
 183cbe0:	183ff81e 	bne	r3,zero,183cbc4 <__alt_mem_mem_0+0xff81cbc4>
 183cbe4:	f800283a 	ret

0183cbe8 <___svfprintf_internal_r>:
 183cbe8:	deffb704 	addi	sp,sp,-292
 183cbec:	dfc04815 	stw	ra,288(sp)
 183cbf0:	ddc04615 	stw	r23,280(sp)
 183cbf4:	d9402c15 	stw	r5,176(sp)
 183cbf8:	d9003915 	stw	r4,228(sp)
 183cbfc:	302f883a 	mov	r23,r6
 183cc00:	d9c02d15 	stw	r7,180(sp)
 183cc04:	df004715 	stw	fp,284(sp)
 183cc08:	dd804515 	stw	r22,276(sp)
 183cc0c:	dd404415 	stw	r21,272(sp)
 183cc10:	dd004315 	stw	r20,268(sp)
 183cc14:	dcc04215 	stw	r19,264(sp)
 183cc18:	dc804115 	stw	r18,260(sp)
 183cc1c:	dc404015 	stw	r17,256(sp)
 183cc20:	dc003f15 	stw	r16,252(sp)
 183cc24:	18055700 	call	1805570 <_localeconv_r>
 183cc28:	10800017 	ldw	r2,0(r2)
 183cc2c:	1009883a 	mov	r4,r2
 183cc30:	d8803415 	stw	r2,208(sp)
 183cc34:	18075980 	call	1807598 <strlen>
 183cc38:	d8c02c17 	ldw	r3,176(sp)
 183cc3c:	d8803815 	stw	r2,224(sp)
 183cc40:	1880030b 	ldhu	r2,12(r3)
 183cc44:	1080200c 	andi	r2,r2,128
 183cc48:	10000226 	beq	r2,zero,183cc54 <___svfprintf_internal_r+0x6c>
 183cc4c:	18800417 	ldw	r2,16(r3)
 183cc50:	10067f26 	beq	r2,zero,183e650 <___svfprintf_internal_r+0x1a68>
 183cc54:	dcc03917 	ldw	r19,228(sp)
 183cc58:	d8c00404 	addi	r3,sp,16
 183cc5c:	05406134 	movhi	r21,388
 183cc60:	d9001e04 	addi	r4,sp,120
 183cc64:	ad4d5b04 	addi	r21,r21,13676
 183cc68:	d8c01e15 	stw	r3,120(sp)
 183cc6c:	d8002015 	stw	zero,128(sp)
 183cc70:	d8001f15 	stw	zero,124(sp)
 183cc74:	d8003315 	stw	zero,204(sp)
 183cc78:	d8003615 	stw	zero,216(sp)
 183cc7c:	d8003715 	stw	zero,220(sp)
 183cc80:	1811883a 	mov	r8,r3
 183cc84:	d8003a15 	stw	zero,232(sp)
 183cc88:	d8003b15 	stw	zero,236(sp)
 183cc8c:	d8002f15 	stw	zero,188(sp)
 183cc90:	d9002815 	stw	r4,160(sp)
 183cc94:	b8800007 	ldb	r2,0(r23)
 183cc98:	10026726 	beq	r2,zero,183d638 <___svfprintf_internal_r+0xa50>
 183cc9c:	00c00944 	movi	r3,37
 183cca0:	b821883a 	mov	r16,r23
 183cca4:	10c0021e 	bne	r2,r3,183ccb0 <___svfprintf_internal_r+0xc8>
 183cca8:	00001406 	br	183ccfc <___svfprintf_internal_r+0x114>
 183ccac:	10c00326 	beq	r2,r3,183ccbc <___svfprintf_internal_r+0xd4>
 183ccb0:	84000044 	addi	r16,r16,1
 183ccb4:	80800007 	ldb	r2,0(r16)
 183ccb8:	103ffc1e 	bne	r2,zero,183ccac <__alt_mem_mem_0+0xff81ccac>
 183ccbc:	85e3c83a 	sub	r17,r16,r23
 183ccc0:	88000e26 	beq	r17,zero,183ccfc <___svfprintf_internal_r+0x114>
 183ccc4:	d8c02017 	ldw	r3,128(sp)
 183ccc8:	d8801f17 	ldw	r2,124(sp)
 183cccc:	45c00015 	stw	r23,0(r8)
 183ccd0:	1c47883a 	add	r3,r3,r17
 183ccd4:	10800044 	addi	r2,r2,1
 183ccd8:	d8c02015 	stw	r3,128(sp)
 183ccdc:	44400115 	stw	r17,4(r8)
 183cce0:	d8801f15 	stw	r2,124(sp)
 183cce4:	00c001c4 	movi	r3,7
 183cce8:	18809716 	blt	r3,r2,183cf48 <___svfprintf_internal_r+0x360>
 183ccec:	42000204 	addi	r8,r8,8
 183ccf0:	d9402f17 	ldw	r5,188(sp)
 183ccf4:	2c4b883a 	add	r5,r5,r17
 183ccf8:	d9402f15 	stw	r5,188(sp)
 183ccfc:	80800007 	ldb	r2,0(r16)
 183cd00:	10009826 	beq	r2,zero,183cf64 <___svfprintf_internal_r+0x37c>
 183cd04:	84400047 	ldb	r17,1(r16)
 183cd08:	00bfffc4 	movi	r2,-1
 183cd0c:	85c00044 	addi	r23,r16,1
 183cd10:	d8002785 	stb	zero,158(sp)
 183cd14:	0007883a 	mov	r3,zero
 183cd18:	000f883a 	mov	r7,zero
 183cd1c:	d8802915 	stw	r2,164(sp)
 183cd20:	d8003115 	stw	zero,196(sp)
 183cd24:	0025883a 	mov	r18,zero
 183cd28:	01401604 	movi	r5,88
 183cd2c:	01800244 	movi	r6,9
 183cd30:	02800a84 	movi	r10,42
 183cd34:	02401b04 	movi	r9,108
 183cd38:	bdc00044 	addi	r23,r23,1
 183cd3c:	88bff804 	addi	r2,r17,-32
 183cd40:	2882f036 	bltu	r5,r2,183d904 <___svfprintf_internal_r+0xd1c>
 183cd44:	100490ba 	slli	r2,r2,2
 183cd48:	01006134 	movhi	r4,388
 183cd4c:	21335704 	addi	r4,r4,-12964
 183cd50:	1105883a 	add	r2,r2,r4
 183cd54:	10800017 	ldw	r2,0(r2)
 183cd58:	1000683a 	jmp	r2
 183cd5c:	0183d86c 	andhi	r6,zero,3937
 183cd60:	0183d904 	movi	r6,3940
 183cd64:	0183d904 	movi	r6,3940
 183cd68:	0183d860 	cmpeqi	r6,zero,3937
 183cd6c:	0183d904 	movi	r6,3940
 183cd70:	0183d904 	movi	r6,3940
 183cd74:	0183d904 	movi	r6,3940
 183cd78:	0183d904 	movi	r6,3940
 183cd7c:	0183d904 	movi	r6,3940
 183cd80:	0183d904 	movi	r6,3940
 183cd84:	0183cfc0 	call	183cfc <__alt_mem_tse_descriptor_memory_0+0x183cfc>
 183cd88:	0183d79c 	xori	r6,zero,3934
 183cd8c:	0183d904 	movi	r6,3940
 183cd90:	0183ced0 	cmplti	r6,zero,3899
 183cd94:	0183cfe8 	cmpgeui	r6,zero,3903
 183cd98:	0183d904 	movi	r6,3940
 183cd9c:	0183d05c 	xori	r6,zero,3905
 183cda0:	0183d028 	cmpgeui	r6,zero,3904
 183cda4:	0183d028 	cmpgeui	r6,zero,3904
 183cda8:	0183d028 	cmpgeui	r6,zero,3904
 183cdac:	0183d028 	cmpgeui	r6,zero,3904
 183cdb0:	0183d028 	cmpgeui	r6,zero,3904
 183cdb4:	0183d028 	cmpgeui	r6,zero,3904
 183cdb8:	0183d028 	cmpgeui	r6,zero,3904
 183cdbc:	0183d028 	cmpgeui	r6,zero,3904
 183cdc0:	0183d028 	cmpgeui	r6,zero,3904
 183cdc4:	0183d904 	movi	r6,3940
 183cdc8:	0183d904 	movi	r6,3940
 183cdcc:	0183d904 	movi	r6,3940
 183cdd0:	0183d904 	movi	r6,3940
 183cdd4:	0183d904 	movi	r6,3940
 183cdd8:	0183d904 	movi	r6,3940
 183cddc:	0183d904 	movi	r6,3940
 183cde0:	0183d904 	movi	r6,3940
 183cde4:	0183d904 	movi	r6,3940
 183cde8:	0183d904 	movi	r6,3940
 183cdec:	0183d114 	movui	r6,3908
 183cdf0:	0183d068 	cmpgeui	r6,zero,3905
 183cdf4:	0183d904 	movi	r6,3940
 183cdf8:	0183d068 	cmpgeui	r6,zero,3905
 183cdfc:	0183d904 	movi	r6,3940
 183ce00:	0183d904 	movi	r6,3940
 183ce04:	0183d904 	movi	r6,3940
 183ce08:	0183d904 	movi	r6,3940
 183ce0c:	0183d108 	cmpgei	r6,zero,3908
 183ce10:	0183d904 	movi	r6,3940
 183ce14:	0183d904 	movi	r6,3940
 183ce18:	0183d1d0 	cmplti	r6,zero,3911
 183ce1c:	0183d904 	movi	r6,3940
 183ce20:	0183d904 	movi	r6,3940
 183ce24:	0183d904 	movi	r6,3940
 183ce28:	0183d904 	movi	r6,3940
 183ce2c:	0183d904 	movi	r6,3940
 183ce30:	0183d640 	call	183d64 <__alt_mem_tse_descriptor_memory_0+0x183d64>
 183ce34:	0183d904 	movi	r6,3940
 183ce38:	0183d904 	movi	r6,3940
 183ce3c:	0183d6a0 	cmpeqi	r6,zero,3930
 183ce40:	0183d904 	movi	r6,3940
 183ce44:	0183d904 	movi	r6,3940
 183ce48:	0183d904 	movi	r6,3940
 183ce4c:	0183d904 	movi	r6,3940
 183ce50:	0183d904 	movi	r6,3940
 183ce54:	0183d904 	movi	r6,3940
 183ce58:	0183d904 	movi	r6,3940
 183ce5c:	0183d904 	movi	r6,3940
 183ce60:	0183d904 	movi	r6,3940
 183ce64:	0183d904 	movi	r6,3940
 183ce68:	0183d750 	cmplti	r6,zero,3933
 183ce6c:	0183d88c 	andi	r6,zero,3938
 183ce70:	0183d068 	cmpgeui	r6,zero,3905
 183ce74:	0183d068 	cmpgeui	r6,zero,3905
 183ce78:	0183d068 	cmpgeui	r6,zero,3905
 183ce7c:	0183d8e0 	cmpeqi	r6,zero,3939
 183ce80:	0183d88c 	andi	r6,zero,3938
 183ce84:	0183d904 	movi	r6,3940
 183ce88:	0183d904 	movi	r6,3940
 183ce8c:	0183d89c 	xori	r6,zero,3938
 183ce90:	0183d904 	movi	r6,3940
 183ce94:	0183d8ac 	andhi	r6,zero,3938
 183ce98:	0183d78c 	andi	r6,zero,3934
 183ce9c:	0183cedc 	xori	r6,zero,3899
 183cea0:	0183d7ac 	andhi	r6,zero,3934
 183cea4:	0183d904 	movi	r6,3940
 183cea8:	0183d7b8 	rdprs	r6,zero,3934
 183ceac:	0183d904 	movi	r6,3940
 183ceb0:	0183d814 	movui	r6,3936
 183ceb4:	0183d904 	movi	r6,3940
 183ceb8:	0183d904 	movi	r6,3940
 183cebc:	0183d824 	muli	r6,zero,3936
 183cec0:	d9003117 	ldw	r4,196(sp)
 183cec4:	d8802d15 	stw	r2,180(sp)
 183cec8:	0109c83a 	sub	r4,zero,r4
 183cecc:	d9003115 	stw	r4,196(sp)
 183ced0:	94800114 	ori	r18,r18,4
 183ced4:	bc400007 	ldb	r17,0(r23)
 183ced8:	003f9706 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183cedc:	00800c04 	movi	r2,48
 183cee0:	d9002d17 	ldw	r4,180(sp)
 183cee4:	d9402917 	ldw	r5,164(sp)
 183cee8:	d8802705 	stb	r2,156(sp)
 183ceec:	00801e04 	movi	r2,120
 183cef0:	d8802745 	stb	r2,157(sp)
 183cef4:	d8002785 	stb	zero,158(sp)
 183cef8:	20c00104 	addi	r3,r4,4
 183cefc:	25000017 	ldw	r20,0(r4)
 183cf00:	002d883a 	mov	r22,zero
 183cf04:	90800094 	ori	r2,r18,2
 183cf08:	28028616 	blt	r5,zero,183d924 <___svfprintf_internal_r+0xd3c>
 183cf0c:	00bfdfc4 	movi	r2,-129
 183cf10:	90a4703a 	and	r18,r18,r2
 183cf14:	d8c02d15 	stw	r3,180(sp)
 183cf18:	94800094 	ori	r18,r18,2
 183cf1c:	a002731e 	bne	r20,zero,183d8ec <___svfprintf_internal_r+0xd04>
 183cf20:	00806134 	movhi	r2,388
 183cf24:	10828504 	addi	r2,r2,2580
 183cf28:	d8803a15 	stw	r2,232(sp)
 183cf2c:	04401e04 	movi	r17,120
 183cf30:	d8c02917 	ldw	r3,164(sp)
 183cf34:	0039883a 	mov	fp,zero
 183cf38:	1801d526 	beq	r3,zero,183d690 <___svfprintf_internal_r+0xaa8>
 183cf3c:	0029883a 	mov	r20,zero
 183cf40:	002d883a 	mov	r22,zero
 183cf44:	0001f106 	br	183d70c <___svfprintf_internal_r+0xb24>
 183cf48:	d9402c17 	ldw	r5,176(sp)
 183cf4c:	d9801e04 	addi	r6,sp,120
 183cf50:	9809883a 	mov	r4,r19
 183cf54:	183f0580 	call	183f058 <__ssprint_r>
 183cf58:	1000081e 	bne	r2,zero,183cf7c <___svfprintf_internal_r+0x394>
 183cf5c:	da000404 	addi	r8,sp,16
 183cf60:	003f6306 	br	183ccf0 <__alt_mem_mem_0+0xff81ccf0>
 183cf64:	d8802017 	ldw	r2,128(sp)
 183cf68:	10000426 	beq	r2,zero,183cf7c <___svfprintf_internal_r+0x394>
 183cf6c:	d9402c17 	ldw	r5,176(sp)
 183cf70:	d9003917 	ldw	r4,228(sp)
 183cf74:	d9801e04 	addi	r6,sp,120
 183cf78:	183f0580 	call	183f058 <__ssprint_r>
 183cf7c:	d8802c17 	ldw	r2,176(sp)
 183cf80:	10c0030b 	ldhu	r3,12(r2)
 183cf84:	d8802f17 	ldw	r2,188(sp)
 183cf88:	18c0100c 	andi	r3,r3,64
 183cf8c:	1805f51e 	bne	r3,zero,183e764 <___svfprintf_internal_r+0x1b7c>
 183cf90:	dfc04817 	ldw	ra,288(sp)
 183cf94:	df004717 	ldw	fp,284(sp)
 183cf98:	ddc04617 	ldw	r23,280(sp)
 183cf9c:	dd804517 	ldw	r22,276(sp)
 183cfa0:	dd404417 	ldw	r21,272(sp)
 183cfa4:	dd004317 	ldw	r20,268(sp)
 183cfa8:	dcc04217 	ldw	r19,264(sp)
 183cfac:	dc804117 	ldw	r18,260(sp)
 183cfb0:	dc404017 	ldw	r17,256(sp)
 183cfb4:	dc003f17 	ldw	r16,252(sp)
 183cfb8:	dec04904 	addi	sp,sp,292
 183cfbc:	f800283a 	ret
 183cfc0:	d8802d17 	ldw	r2,180(sp)
 183cfc4:	d9002d17 	ldw	r4,180(sp)
 183cfc8:	10800017 	ldw	r2,0(r2)
 183cfcc:	d8803115 	stw	r2,196(sp)
 183cfd0:	20800104 	addi	r2,r4,4
 183cfd4:	d9003117 	ldw	r4,196(sp)
 183cfd8:	203fb916 	blt	r4,zero,183cec0 <__alt_mem_mem_0+0xff81cec0>
 183cfdc:	d8802d15 	stw	r2,180(sp)
 183cfe0:	bc400007 	ldb	r17,0(r23)
 183cfe4:	003f5406 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183cfe8:	bc400007 	ldb	r17,0(r23)
 183cfec:	bac00044 	addi	r11,r23,1
 183cff0:	8a873926 	beq	r17,r10,183ecd8 <___svfprintf_internal_r+0x20f0>
 183cff4:	88bff404 	addi	r2,r17,-48
 183cff8:	0009883a 	mov	r4,zero
 183cffc:	30868836 	bltu	r6,r2,183ea20 <___svfprintf_internal_r+0x1e38>
 183d000:	5c400007 	ldb	r17,0(r11)
 183d004:	210002a4 	muli	r4,r4,10
 183d008:	5dc00044 	addi	r23,r11,1
 183d00c:	b817883a 	mov	r11,r23
 183d010:	2089883a 	add	r4,r4,r2
 183d014:	88bff404 	addi	r2,r17,-48
 183d018:	30bff92e 	bgeu	r6,r2,183d000 <__alt_mem_mem_0+0xff81d000>
 183d01c:	2005d716 	blt	r4,zero,183e77c <___svfprintf_internal_r+0x1b94>
 183d020:	d9002915 	stw	r4,164(sp)
 183d024:	003f4506 	br	183cd3c <__alt_mem_mem_0+0xff81cd3c>
 183d028:	b809883a 	mov	r4,r23
 183d02c:	d8003115 	stw	zero,196(sp)
 183d030:	88bff404 	addi	r2,r17,-48
 183d034:	0017883a 	mov	r11,zero
 183d038:	24400007 	ldb	r17,0(r4)
 183d03c:	5ac002a4 	muli	r11,r11,10
 183d040:	bdc00044 	addi	r23,r23,1
 183d044:	b809883a 	mov	r4,r23
 183d048:	12d7883a 	add	r11,r2,r11
 183d04c:	88bff404 	addi	r2,r17,-48
 183d050:	30bff92e 	bgeu	r6,r2,183d038 <__alt_mem_mem_0+0xff81d038>
 183d054:	dac03115 	stw	r11,196(sp)
 183d058:	003f3806 	br	183cd3c <__alt_mem_mem_0+0xff81cd3c>
 183d05c:	94802014 	ori	r18,r18,128
 183d060:	bc400007 	ldb	r17,0(r23)
 183d064:	003f3406 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183d068:	18c03fcc 	andi	r3,r3,255
 183d06c:	1807471e 	bne	r3,zero,183ed8c <___svfprintf_internal_r+0x21a4>
 183d070:	9080020c 	andi	r2,r18,8
 183d074:	10047d26 	beq	r2,zero,183e26c <___svfprintf_internal_r+0x1684>
 183d078:	d8c02d17 	ldw	r3,180(sp)
 183d07c:	d9002d17 	ldw	r4,180(sp)
 183d080:	d9402d17 	ldw	r5,180(sp)
 183d084:	18c00017 	ldw	r3,0(r3)
 183d088:	21000117 	ldw	r4,4(r4)
 183d08c:	29400204 	addi	r5,r5,8
 183d090:	d8c03615 	stw	r3,216(sp)
 183d094:	d9003715 	stw	r4,220(sp)
 183d098:	d9402d15 	stw	r5,180(sp)
 183d09c:	d9003617 	ldw	r4,216(sp)
 183d0a0:	d9403717 	ldw	r5,220(sp)
 183d0a4:	da003e15 	stw	r8,248(sp)
 183d0a8:	04000044 	movi	r16,1
 183d0ac:	18072b80 	call	18072b8 <__fpclassifyd>
 183d0b0:	da003e17 	ldw	r8,248(sp)
 183d0b4:	14044b1e 	bne	r2,r16,183e1e4 <___svfprintf_internal_r+0x15fc>
 183d0b8:	d9003617 	ldw	r4,216(sp)
 183d0bc:	d9403717 	ldw	r5,220(sp)
 183d0c0:	000d883a 	mov	r6,zero
 183d0c4:	000f883a 	mov	r7,zero
 183d0c8:	180c0840 	call	180c084 <__ledf2>
 183d0cc:	da003e17 	ldw	r8,248(sp)
 183d0d0:	1005f316 	blt	r2,zero,183e8a0 <___svfprintf_internal_r+0x1cb8>
 183d0d4:	df002783 	ldbu	fp,158(sp)
 183d0d8:	008011c4 	movi	r2,71
 183d0dc:	1445590e 	bge	r2,r17,183e644 <___svfprintf_internal_r+0x1a5c>
 183d0e0:	04006134 	movhi	r16,388
 183d0e4:	84027d04 	addi	r16,r16,2548
 183d0e8:	00c000c4 	movi	r3,3
 183d0ec:	00bfdfc4 	movi	r2,-129
 183d0f0:	d8c02a15 	stw	r3,168(sp)
 183d0f4:	90a4703a 	and	r18,r18,r2
 183d0f8:	d8c02e15 	stw	r3,184(sp)
 183d0fc:	d8002915 	stw	zero,164(sp)
 183d100:	d8003215 	stw	zero,200(sp)
 183d104:	00006606 	br	183d2a0 <___svfprintf_internal_r+0x6b8>
 183d108:	94800214 	ori	r18,r18,8
 183d10c:	bc400007 	ldb	r17,0(r23)
 183d110:	003f0906 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183d114:	18c03fcc 	andi	r3,r3,255
 183d118:	1807181e 	bne	r3,zero,183ed7c <___svfprintf_internal_r+0x2194>
 183d11c:	94800414 	ori	r18,r18,16
 183d120:	9080080c 	andi	r2,r18,32
 183d124:	10039626 	beq	r2,zero,183df80 <___svfprintf_internal_r+0x1398>
 183d128:	d9402d17 	ldw	r5,180(sp)
 183d12c:	28800117 	ldw	r2,4(r5)
 183d130:	2d000017 	ldw	r20,0(r5)
 183d134:	29400204 	addi	r5,r5,8
 183d138:	d9402d15 	stw	r5,180(sp)
 183d13c:	102d883a 	mov	r22,r2
 183d140:	10039816 	blt	r2,zero,183dfa4 <___svfprintf_internal_r+0x13bc>
 183d144:	d9402917 	ldw	r5,164(sp)
 183d148:	df002783 	ldbu	fp,158(sp)
 183d14c:	2803ab16 	blt	r5,zero,183dffc <___svfprintf_internal_r+0x1414>
 183d150:	00ffdfc4 	movi	r3,-129
 183d154:	a584b03a 	or	r2,r20,r22
 183d158:	90e4703a 	and	r18,r18,r3
 183d15c:	10014a26 	beq	r2,zero,183d688 <___svfprintf_internal_r+0xaa0>
 183d160:	b0034b26 	beq	r22,zero,183de90 <___svfprintf_internal_r+0x12a8>
 183d164:	dc402a15 	stw	r17,168(sp)
 183d168:	dc001e04 	addi	r16,sp,120
 183d16c:	b023883a 	mov	r17,r22
 183d170:	402d883a 	mov	r22,r8
 183d174:	a009883a 	mov	r4,r20
 183d178:	880b883a 	mov	r5,r17
 183d17c:	01800284 	movi	r6,10
 183d180:	000f883a 	mov	r7,zero
 183d184:	180a6a00 	call	180a6a0 <__umoddi3>
 183d188:	10800c04 	addi	r2,r2,48
 183d18c:	843fffc4 	addi	r16,r16,-1
 183d190:	a009883a 	mov	r4,r20
 183d194:	880b883a 	mov	r5,r17
 183d198:	80800005 	stb	r2,0(r16)
 183d19c:	01800284 	movi	r6,10
 183d1a0:	000f883a 	mov	r7,zero
 183d1a4:	180a1280 	call	180a128 <__udivdi3>
 183d1a8:	1029883a 	mov	r20,r2
 183d1ac:	10c4b03a 	or	r2,r2,r3
 183d1b0:	1823883a 	mov	r17,r3
 183d1b4:	103fef1e 	bne	r2,zero,183d174 <__alt_mem_mem_0+0xff81d174>
 183d1b8:	d8c02817 	ldw	r3,160(sp)
 183d1bc:	dc402a17 	ldw	r17,168(sp)
 183d1c0:	b011883a 	mov	r8,r22
 183d1c4:	1c07c83a 	sub	r3,r3,r16
 183d1c8:	d8c02e15 	stw	r3,184(sp)
 183d1cc:	00002e06 	br	183d288 <___svfprintf_internal_r+0x6a0>
 183d1d0:	18c03fcc 	andi	r3,r3,255
 183d1d4:	1806e71e 	bne	r3,zero,183ed74 <___svfprintf_internal_r+0x218c>
 183d1d8:	94800414 	ori	r18,r18,16
 183d1dc:	9080080c 	andi	r2,r18,32
 183d1e0:	1002d426 	beq	r2,zero,183dd34 <___svfprintf_internal_r+0x114c>
 183d1e4:	d9402d17 	ldw	r5,180(sp)
 183d1e8:	d8c02917 	ldw	r3,164(sp)
 183d1ec:	d8002785 	stb	zero,158(sp)
 183d1f0:	28800204 	addi	r2,r5,8
 183d1f4:	2d000017 	ldw	r20,0(r5)
 183d1f8:	2d800117 	ldw	r22,4(r5)
 183d1fc:	18041516 	blt	r3,zero,183e254 <___svfprintf_internal_r+0x166c>
 183d200:	013fdfc4 	movi	r4,-129
 183d204:	a586b03a 	or	r3,r20,r22
 183d208:	d8802d15 	stw	r2,180(sp)
 183d20c:	9124703a 	and	r18,r18,r4
 183d210:	1802d51e 	bne	r3,zero,183dd68 <___svfprintf_internal_r+0x1180>
 183d214:	d9402917 	ldw	r5,164(sp)
 183d218:	0039883a 	mov	fp,zero
 183d21c:	2806be26 	beq	r5,zero,183ed18 <___svfprintf_internal_r+0x2130>
 183d220:	0029883a 	mov	r20,zero
 183d224:	002d883a 	mov	r22,zero
 183d228:	dc001e04 	addi	r16,sp,120
 183d22c:	a006d0fa 	srli	r3,r20,3
 183d230:	b008977a 	slli	r4,r22,29
 183d234:	b02cd0fa 	srli	r22,r22,3
 183d238:	a50001cc 	andi	r20,r20,7
 183d23c:	a0800c04 	addi	r2,r20,48
 183d240:	843fffc4 	addi	r16,r16,-1
 183d244:	20e8b03a 	or	r20,r4,r3
 183d248:	80800005 	stb	r2,0(r16)
 183d24c:	a586b03a 	or	r3,r20,r22
 183d250:	183ff61e 	bne	r3,zero,183d22c <__alt_mem_mem_0+0xff81d22c>
 183d254:	90c0004c 	andi	r3,r18,1
 183d258:	18013926 	beq	r3,zero,183d740 <___svfprintf_internal_r+0xb58>
 183d25c:	10803fcc 	andi	r2,r2,255
 183d260:	1080201c 	xori	r2,r2,128
 183d264:	10bfe004 	addi	r2,r2,-128
 183d268:	00c00c04 	movi	r3,48
 183d26c:	10c13426 	beq	r2,r3,183d740 <___svfprintf_internal_r+0xb58>
 183d270:	80ffffc5 	stb	r3,-1(r16)
 183d274:	d8c02817 	ldw	r3,160(sp)
 183d278:	80bfffc4 	addi	r2,r16,-1
 183d27c:	1021883a 	mov	r16,r2
 183d280:	1887c83a 	sub	r3,r3,r2
 183d284:	d8c02e15 	stw	r3,184(sp)
 183d288:	d8802e17 	ldw	r2,184(sp)
 183d28c:	d9002917 	ldw	r4,164(sp)
 183d290:	1100010e 	bge	r2,r4,183d298 <___svfprintf_internal_r+0x6b0>
 183d294:	2005883a 	mov	r2,r4
 183d298:	d8802a15 	stw	r2,168(sp)
 183d29c:	d8003215 	stw	zero,200(sp)
 183d2a0:	e7003fcc 	andi	fp,fp,255
 183d2a4:	e700201c 	xori	fp,fp,128
 183d2a8:	e73fe004 	addi	fp,fp,-128
 183d2ac:	e0000326 	beq	fp,zero,183d2bc <___svfprintf_internal_r+0x6d4>
 183d2b0:	d8c02a17 	ldw	r3,168(sp)
 183d2b4:	18c00044 	addi	r3,r3,1
 183d2b8:	d8c02a15 	stw	r3,168(sp)
 183d2bc:	90c0008c 	andi	r3,r18,2
 183d2c0:	d8c02b15 	stw	r3,172(sp)
 183d2c4:	18000326 	beq	r3,zero,183d2d4 <___svfprintf_internal_r+0x6ec>
 183d2c8:	d8c02a17 	ldw	r3,168(sp)
 183d2cc:	18c00084 	addi	r3,r3,2
 183d2d0:	d8c02a15 	stw	r3,168(sp)
 183d2d4:	90c0210c 	andi	r3,r18,132
 183d2d8:	d8c03015 	stw	r3,192(sp)
 183d2dc:	1801a11e 	bne	r3,zero,183d964 <___svfprintf_internal_r+0xd7c>
 183d2e0:	d9003117 	ldw	r4,196(sp)
 183d2e4:	d8c02a17 	ldw	r3,168(sp)
 183d2e8:	20e9c83a 	sub	r20,r4,r3
 183d2ec:	05019d0e 	bge	zero,r20,183d964 <___svfprintf_internal_r+0xd7c>
 183d2f0:	02400404 	movi	r9,16
 183d2f4:	d8c02017 	ldw	r3,128(sp)
 183d2f8:	d8801f17 	ldw	r2,124(sp)
 183d2fc:	4d051b0e 	bge	r9,r20,183e76c <___svfprintf_internal_r+0x1b84>
 183d300:	01406134 	movhi	r5,388
 183d304:	294d5f04 	addi	r5,r5,13692
 183d308:	dc403c15 	stw	r17,240(sp)
 183d30c:	d9403515 	stw	r5,212(sp)
 183d310:	a023883a 	mov	r17,r20
 183d314:	482d883a 	mov	r22,r9
 183d318:	9029883a 	mov	r20,r18
 183d31c:	070001c4 	movi	fp,7
 183d320:	8025883a 	mov	r18,r16
 183d324:	dc002c17 	ldw	r16,176(sp)
 183d328:	00000306 	br	183d338 <___svfprintf_internal_r+0x750>
 183d32c:	8c7ffc04 	addi	r17,r17,-16
 183d330:	42000204 	addi	r8,r8,8
 183d334:	b440130e 	bge	r22,r17,183d384 <___svfprintf_internal_r+0x79c>
 183d338:	01006134 	movhi	r4,388
 183d33c:	18c00404 	addi	r3,r3,16
 183d340:	10800044 	addi	r2,r2,1
 183d344:	210d5f04 	addi	r4,r4,13692
 183d348:	41000015 	stw	r4,0(r8)
 183d34c:	45800115 	stw	r22,4(r8)
 183d350:	d8c02015 	stw	r3,128(sp)
 183d354:	d8801f15 	stw	r2,124(sp)
 183d358:	e0bff40e 	bge	fp,r2,183d32c <__alt_mem_mem_0+0xff81d32c>
 183d35c:	d9801e04 	addi	r6,sp,120
 183d360:	800b883a 	mov	r5,r16
 183d364:	9809883a 	mov	r4,r19
 183d368:	183f0580 	call	183f058 <__ssprint_r>
 183d36c:	103f031e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183d370:	8c7ffc04 	addi	r17,r17,-16
 183d374:	d8c02017 	ldw	r3,128(sp)
 183d378:	d8801f17 	ldw	r2,124(sp)
 183d37c:	da000404 	addi	r8,sp,16
 183d380:	b47fed16 	blt	r22,r17,183d338 <__alt_mem_mem_0+0xff81d338>
 183d384:	9021883a 	mov	r16,r18
 183d388:	a025883a 	mov	r18,r20
 183d38c:	8829883a 	mov	r20,r17
 183d390:	dc403c17 	ldw	r17,240(sp)
 183d394:	d9403517 	ldw	r5,212(sp)
 183d398:	a0c7883a 	add	r3,r20,r3
 183d39c:	10800044 	addi	r2,r2,1
 183d3a0:	41400015 	stw	r5,0(r8)
 183d3a4:	45000115 	stw	r20,4(r8)
 183d3a8:	d8c02015 	stw	r3,128(sp)
 183d3ac:	d8801f15 	stw	r2,124(sp)
 183d3b0:	010001c4 	movi	r4,7
 183d3b4:	20829f16 	blt	r4,r2,183de34 <___svfprintf_internal_r+0x124c>
 183d3b8:	df002787 	ldb	fp,158(sp)
 183d3bc:	42000204 	addi	r8,r8,8
 183d3c0:	e0000c26 	beq	fp,zero,183d3f4 <___svfprintf_internal_r+0x80c>
 183d3c4:	d8801f17 	ldw	r2,124(sp)
 183d3c8:	d9002784 	addi	r4,sp,158
 183d3cc:	18c00044 	addi	r3,r3,1
 183d3d0:	10800044 	addi	r2,r2,1
 183d3d4:	41000015 	stw	r4,0(r8)
 183d3d8:	01000044 	movi	r4,1
 183d3dc:	41000115 	stw	r4,4(r8)
 183d3e0:	d8c02015 	stw	r3,128(sp)
 183d3e4:	d8801f15 	stw	r2,124(sp)
 183d3e8:	010001c4 	movi	r4,7
 183d3ec:	20823816 	blt	r4,r2,183dcd0 <___svfprintf_internal_r+0x10e8>
 183d3f0:	42000204 	addi	r8,r8,8
 183d3f4:	d8802b17 	ldw	r2,172(sp)
 183d3f8:	10000c26 	beq	r2,zero,183d42c <___svfprintf_internal_r+0x844>
 183d3fc:	d8801f17 	ldw	r2,124(sp)
 183d400:	d9002704 	addi	r4,sp,156
 183d404:	18c00084 	addi	r3,r3,2
 183d408:	10800044 	addi	r2,r2,1
 183d40c:	41000015 	stw	r4,0(r8)
 183d410:	01000084 	movi	r4,2
 183d414:	41000115 	stw	r4,4(r8)
 183d418:	d8c02015 	stw	r3,128(sp)
 183d41c:	d8801f15 	stw	r2,124(sp)
 183d420:	010001c4 	movi	r4,7
 183d424:	20823216 	blt	r4,r2,183dcf0 <___svfprintf_internal_r+0x1108>
 183d428:	42000204 	addi	r8,r8,8
 183d42c:	d9003017 	ldw	r4,192(sp)
 183d430:	00802004 	movi	r2,128
 183d434:	20819726 	beq	r4,r2,183da94 <___svfprintf_internal_r+0xeac>
 183d438:	d9402917 	ldw	r5,164(sp)
 183d43c:	d8802e17 	ldw	r2,184(sp)
 183d440:	28adc83a 	sub	r22,r5,r2
 183d444:	05802f0e 	bge	zero,r22,183d504 <___svfprintf_internal_r+0x91c>
 183d448:	07000404 	movi	fp,16
 183d44c:	d8801f17 	ldw	r2,124(sp)
 183d450:	e583c00e 	bge	fp,r22,183e354 <___svfprintf_internal_r+0x176c>
 183d454:	01406134 	movhi	r5,388
 183d458:	294d5b04 	addi	r5,r5,13676
 183d45c:	dc402915 	stw	r17,164(sp)
 183d460:	d9402b15 	stw	r5,172(sp)
 183d464:	b023883a 	mov	r17,r22
 183d468:	050001c4 	movi	r20,7
 183d46c:	902d883a 	mov	r22,r18
 183d470:	8025883a 	mov	r18,r16
 183d474:	dc002c17 	ldw	r16,176(sp)
 183d478:	00000306 	br	183d488 <___svfprintf_internal_r+0x8a0>
 183d47c:	8c7ffc04 	addi	r17,r17,-16
 183d480:	42000204 	addi	r8,r8,8
 183d484:	e440110e 	bge	fp,r17,183d4cc <___svfprintf_internal_r+0x8e4>
 183d488:	18c00404 	addi	r3,r3,16
 183d48c:	10800044 	addi	r2,r2,1
 183d490:	45400015 	stw	r21,0(r8)
 183d494:	47000115 	stw	fp,4(r8)
 183d498:	d8c02015 	stw	r3,128(sp)
 183d49c:	d8801f15 	stw	r2,124(sp)
 183d4a0:	a0bff60e 	bge	r20,r2,183d47c <__alt_mem_mem_0+0xff81d47c>
 183d4a4:	d9801e04 	addi	r6,sp,120
 183d4a8:	800b883a 	mov	r5,r16
 183d4ac:	9809883a 	mov	r4,r19
 183d4b0:	183f0580 	call	183f058 <__ssprint_r>
 183d4b4:	103eb11e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183d4b8:	8c7ffc04 	addi	r17,r17,-16
 183d4bc:	d8c02017 	ldw	r3,128(sp)
 183d4c0:	d8801f17 	ldw	r2,124(sp)
 183d4c4:	da000404 	addi	r8,sp,16
 183d4c8:	e47fef16 	blt	fp,r17,183d488 <__alt_mem_mem_0+0xff81d488>
 183d4cc:	9021883a 	mov	r16,r18
 183d4d0:	b025883a 	mov	r18,r22
 183d4d4:	882d883a 	mov	r22,r17
 183d4d8:	dc402917 	ldw	r17,164(sp)
 183d4dc:	d9002b17 	ldw	r4,172(sp)
 183d4e0:	1d87883a 	add	r3,r3,r22
 183d4e4:	10800044 	addi	r2,r2,1
 183d4e8:	41000015 	stw	r4,0(r8)
 183d4ec:	45800115 	stw	r22,4(r8)
 183d4f0:	d8c02015 	stw	r3,128(sp)
 183d4f4:	d8801f15 	stw	r2,124(sp)
 183d4f8:	010001c4 	movi	r4,7
 183d4fc:	2081ec16 	blt	r4,r2,183dcb0 <___svfprintf_internal_r+0x10c8>
 183d500:	42000204 	addi	r8,r8,8
 183d504:	9080400c 	andi	r2,r18,256
 183d508:	1001181e 	bne	r2,zero,183d96c <___svfprintf_internal_r+0xd84>
 183d50c:	d9402e17 	ldw	r5,184(sp)
 183d510:	d8801f17 	ldw	r2,124(sp)
 183d514:	44000015 	stw	r16,0(r8)
 183d518:	1947883a 	add	r3,r3,r5
 183d51c:	10800044 	addi	r2,r2,1
 183d520:	41400115 	stw	r5,4(r8)
 183d524:	d8c02015 	stw	r3,128(sp)
 183d528:	d8801f15 	stw	r2,124(sp)
 183d52c:	010001c4 	movi	r4,7
 183d530:	2081d116 	blt	r4,r2,183dc78 <___svfprintf_internal_r+0x1090>
 183d534:	42000204 	addi	r8,r8,8
 183d538:	9480010c 	andi	r18,r18,4
 183d53c:	90003226 	beq	r18,zero,183d608 <___svfprintf_internal_r+0xa20>
 183d540:	d9403117 	ldw	r5,196(sp)
 183d544:	d8802a17 	ldw	r2,168(sp)
 183d548:	28a1c83a 	sub	r16,r5,r2
 183d54c:	04002e0e 	bge	zero,r16,183d608 <___svfprintf_internal_r+0xa20>
 183d550:	04400404 	movi	r17,16
 183d554:	d8801f17 	ldw	r2,124(sp)
 183d558:	8c04b90e 	bge	r17,r16,183e840 <___svfprintf_internal_r+0x1c58>
 183d55c:	01406134 	movhi	r5,388
 183d560:	294d5f04 	addi	r5,r5,13692
 183d564:	d9403515 	stw	r5,212(sp)
 183d568:	048001c4 	movi	r18,7
 183d56c:	dd002c17 	ldw	r20,176(sp)
 183d570:	00000306 	br	183d580 <___svfprintf_internal_r+0x998>
 183d574:	843ffc04 	addi	r16,r16,-16
 183d578:	42000204 	addi	r8,r8,8
 183d57c:	8c00130e 	bge	r17,r16,183d5cc <___svfprintf_internal_r+0x9e4>
 183d580:	01006134 	movhi	r4,388
 183d584:	18c00404 	addi	r3,r3,16
 183d588:	10800044 	addi	r2,r2,1
 183d58c:	210d5f04 	addi	r4,r4,13692
 183d590:	41000015 	stw	r4,0(r8)
 183d594:	44400115 	stw	r17,4(r8)
 183d598:	d8c02015 	stw	r3,128(sp)
 183d59c:	d8801f15 	stw	r2,124(sp)
 183d5a0:	90bff40e 	bge	r18,r2,183d574 <__alt_mem_mem_0+0xff81d574>
 183d5a4:	d9801e04 	addi	r6,sp,120
 183d5a8:	a00b883a 	mov	r5,r20
 183d5ac:	9809883a 	mov	r4,r19
 183d5b0:	183f0580 	call	183f058 <__ssprint_r>
 183d5b4:	103e711e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183d5b8:	843ffc04 	addi	r16,r16,-16
 183d5bc:	d8c02017 	ldw	r3,128(sp)
 183d5c0:	d8801f17 	ldw	r2,124(sp)
 183d5c4:	da000404 	addi	r8,sp,16
 183d5c8:	8c3fed16 	blt	r17,r16,183d580 <__alt_mem_mem_0+0xff81d580>
 183d5cc:	d9403517 	ldw	r5,212(sp)
 183d5d0:	1c07883a 	add	r3,r3,r16
 183d5d4:	10800044 	addi	r2,r2,1
 183d5d8:	41400015 	stw	r5,0(r8)
 183d5dc:	44000115 	stw	r16,4(r8)
 183d5e0:	d8c02015 	stw	r3,128(sp)
 183d5e4:	d8801f15 	stw	r2,124(sp)
 183d5e8:	010001c4 	movi	r4,7
 183d5ec:	2080060e 	bge	r4,r2,183d608 <___svfprintf_internal_r+0xa20>
 183d5f0:	d9402c17 	ldw	r5,176(sp)
 183d5f4:	d9801e04 	addi	r6,sp,120
 183d5f8:	9809883a 	mov	r4,r19
 183d5fc:	183f0580 	call	183f058 <__ssprint_r>
 183d600:	103e5e1e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183d604:	d8c02017 	ldw	r3,128(sp)
 183d608:	d8803117 	ldw	r2,196(sp)
 183d60c:	d9002a17 	ldw	r4,168(sp)
 183d610:	1100010e 	bge	r2,r4,183d618 <___svfprintf_internal_r+0xa30>
 183d614:	2005883a 	mov	r2,r4
 183d618:	d9402f17 	ldw	r5,188(sp)
 183d61c:	288b883a 	add	r5,r5,r2
 183d620:	d9402f15 	stw	r5,188(sp)
 183d624:	18019c1e 	bne	r3,zero,183dc98 <___svfprintf_internal_r+0x10b0>
 183d628:	b8800007 	ldb	r2,0(r23)
 183d62c:	d8001f15 	stw	zero,124(sp)
 183d630:	da000404 	addi	r8,sp,16
 183d634:	103d991e 	bne	r2,zero,183cc9c <__alt_mem_mem_0+0xff81cc9c>
 183d638:	b821883a 	mov	r16,r23
 183d63c:	003daf06 	br	183ccfc <__alt_mem_mem_0+0xff81ccfc>
 183d640:	18c03fcc 	andi	r3,r3,255
 183d644:	1805c71e 	bne	r3,zero,183ed64 <___svfprintf_internal_r+0x217c>
 183d648:	94800414 	ori	r18,r18,16
 183d64c:	9080080c 	andi	r2,r18,32
 183d650:	10020126 	beq	r2,zero,183de58 <___svfprintf_internal_r+0x1270>
 183d654:	d8802d17 	ldw	r2,180(sp)
 183d658:	d9002917 	ldw	r4,164(sp)
 183d65c:	d8002785 	stb	zero,158(sp)
 183d660:	10c00204 	addi	r3,r2,8
 183d664:	15000017 	ldw	r20,0(r2)
 183d668:	15800117 	ldw	r22,4(r2)
 183d66c:	20038e16 	blt	r4,zero,183e4a8 <___svfprintf_internal_r+0x18c0>
 183d670:	013fdfc4 	movi	r4,-129
 183d674:	a584b03a 	or	r2,r20,r22
 183d678:	d8c02d15 	stw	r3,180(sp)
 183d67c:	9124703a 	and	r18,r18,r4
 183d680:	0039883a 	mov	fp,zero
 183d684:	103eb61e 	bne	r2,zero,183d160 <__alt_mem_mem_0+0xff81d160>
 183d688:	d8802917 	ldw	r2,164(sp)
 183d68c:	1002c81e 	bne	r2,zero,183e1b0 <___svfprintf_internal_r+0x15c8>
 183d690:	d8002915 	stw	zero,164(sp)
 183d694:	d8002e15 	stw	zero,184(sp)
 183d698:	dc001e04 	addi	r16,sp,120
 183d69c:	003efa06 	br	183d288 <__alt_mem_mem_0+0xff81d288>
 183d6a0:	18c03fcc 	andi	r3,r3,255
 183d6a4:	1805ad1e 	bne	r3,zero,183ed5c <___svfprintf_internal_r+0x2174>
 183d6a8:	01406134 	movhi	r5,388
 183d6ac:	29428004 	addi	r5,r5,2560
 183d6b0:	d9403a15 	stw	r5,232(sp)
 183d6b4:	9080080c 	andi	r2,r18,32
 183d6b8:	10006126 	beq	r2,zero,183d840 <___svfprintf_internal_r+0xc58>
 183d6bc:	d8802d17 	ldw	r2,180(sp)
 183d6c0:	15000017 	ldw	r20,0(r2)
 183d6c4:	15800117 	ldw	r22,4(r2)
 183d6c8:	10800204 	addi	r2,r2,8
 183d6cc:	d8802d15 	stw	r2,180(sp)
 183d6d0:	9080004c 	andi	r2,r18,1
 183d6d4:	10018e26 	beq	r2,zero,183dd10 <___svfprintf_internal_r+0x1128>
 183d6d8:	a584b03a 	or	r2,r20,r22
 183d6dc:	10030926 	beq	r2,zero,183e304 <___svfprintf_internal_r+0x171c>
 183d6e0:	d8c02917 	ldw	r3,164(sp)
 183d6e4:	00800c04 	movi	r2,48
 183d6e8:	d8802705 	stb	r2,156(sp)
 183d6ec:	dc402745 	stb	r17,157(sp)
 183d6f0:	d8002785 	stb	zero,158(sp)
 183d6f4:	90800094 	ori	r2,r18,2
 183d6f8:	18048716 	blt	r3,zero,183e918 <___svfprintf_internal_r+0x1d30>
 183d6fc:	00bfdfc4 	movi	r2,-129
 183d700:	90a4703a 	and	r18,r18,r2
 183d704:	94800094 	ori	r18,r18,2
 183d708:	0039883a 	mov	fp,zero
 183d70c:	d9003a17 	ldw	r4,232(sp)
 183d710:	dc001e04 	addi	r16,sp,120
 183d714:	a08003cc 	andi	r2,r20,15
 183d718:	b006973a 	slli	r3,r22,28
 183d71c:	2085883a 	add	r2,r4,r2
 183d720:	a028d13a 	srli	r20,r20,4
 183d724:	10800003 	ldbu	r2,0(r2)
 183d728:	b02cd13a 	srli	r22,r22,4
 183d72c:	843fffc4 	addi	r16,r16,-1
 183d730:	1d28b03a 	or	r20,r3,r20
 183d734:	80800005 	stb	r2,0(r16)
 183d738:	a584b03a 	or	r2,r20,r22
 183d73c:	103ff51e 	bne	r2,zero,183d714 <__alt_mem_mem_0+0xff81d714>
 183d740:	d8c02817 	ldw	r3,160(sp)
 183d744:	1c07c83a 	sub	r3,r3,r16
 183d748:	d8c02e15 	stw	r3,184(sp)
 183d74c:	003ece06 	br	183d288 <__alt_mem_mem_0+0xff81d288>
 183d750:	d8c02d17 	ldw	r3,180(sp)
 183d754:	d9002d17 	ldw	r4,180(sp)
 183d758:	d8002785 	stb	zero,158(sp)
 183d75c:	18800017 	ldw	r2,0(r3)
 183d760:	21000104 	addi	r4,r4,4
 183d764:	00c00044 	movi	r3,1
 183d768:	d8c02a15 	stw	r3,168(sp)
 183d76c:	d8801405 	stb	r2,80(sp)
 183d770:	d9002d15 	stw	r4,180(sp)
 183d774:	d8c02e15 	stw	r3,184(sp)
 183d778:	d8002915 	stw	zero,164(sp)
 183d77c:	d8003215 	stw	zero,200(sp)
 183d780:	dc001404 	addi	r16,sp,80
 183d784:	0039883a 	mov	fp,zero
 183d788:	003ecc06 	br	183d2bc <__alt_mem_mem_0+0xff81d2bc>
 183d78c:	18c03fcc 	andi	r3,r3,255
 183d790:	183e9226 	beq	r3,zero,183d1dc <__alt_mem_mem_0+0xff81d1dc>
 183d794:	d9c02785 	stb	r7,158(sp)
 183d798:	003e9006 	br	183d1dc <__alt_mem_mem_0+0xff81d1dc>
 183d79c:	00c00044 	movi	r3,1
 183d7a0:	01c00ac4 	movi	r7,43
 183d7a4:	bc400007 	ldb	r17,0(r23)
 183d7a8:	003d6306 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183d7ac:	94800814 	ori	r18,r18,32
 183d7b0:	bc400007 	ldb	r17,0(r23)
 183d7b4:	003d6006 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183d7b8:	d8c02d17 	ldw	r3,180(sp)
 183d7bc:	d8002785 	stb	zero,158(sp)
 183d7c0:	1c000017 	ldw	r16,0(r3)
 183d7c4:	1d000104 	addi	r20,r3,4
 183d7c8:	80040f26 	beq	r16,zero,183e808 <___svfprintf_internal_r+0x1c20>
 183d7cc:	d9002917 	ldw	r4,164(sp)
 183d7d0:	2003dc16 	blt	r4,zero,183e744 <___svfprintf_internal_r+0x1b5c>
 183d7d4:	200d883a 	mov	r6,r4
 183d7d8:	000b883a 	mov	r5,zero
 183d7dc:	8009883a 	mov	r4,r16
 183d7e0:	da003e15 	stw	r8,248(sp)
 183d7e4:	1805f680 	call	1805f68 <memchr>
 183d7e8:	da003e17 	ldw	r8,248(sp)
 183d7ec:	10045826 	beq	r2,zero,183e950 <___svfprintf_internal_r+0x1d68>
 183d7f0:	1405c83a 	sub	r2,r2,r16
 183d7f4:	d8802e15 	stw	r2,184(sp)
 183d7f8:	1003d816 	blt	r2,zero,183e75c <___svfprintf_internal_r+0x1b74>
 183d7fc:	df002783 	ldbu	fp,158(sp)
 183d800:	d8802a15 	stw	r2,168(sp)
 183d804:	dd002d15 	stw	r20,180(sp)
 183d808:	d8002915 	stw	zero,164(sp)
 183d80c:	d8003215 	stw	zero,200(sp)
 183d810:	003ea306 	br	183d2a0 <__alt_mem_mem_0+0xff81d2a0>
 183d814:	18c03fcc 	andi	r3,r3,255
 183d818:	183f8c26 	beq	r3,zero,183d64c <__alt_mem_mem_0+0xff81d64c>
 183d81c:	d9c02785 	stb	r7,158(sp)
 183d820:	003f8a06 	br	183d64c <__alt_mem_mem_0+0xff81d64c>
 183d824:	18c03fcc 	andi	r3,r3,255
 183d828:	1805631e 	bne	r3,zero,183edb8 <___svfprintf_internal_r+0x21d0>
 183d82c:	01406134 	movhi	r5,388
 183d830:	29428504 	addi	r5,r5,2580
 183d834:	d9403a15 	stw	r5,232(sp)
 183d838:	9080080c 	andi	r2,r18,32
 183d83c:	103f9f1e 	bne	r2,zero,183d6bc <__alt_mem_mem_0+0xff81d6bc>
 183d840:	9080040c 	andi	r2,r18,16
 183d844:	10029c26 	beq	r2,zero,183e2b8 <___svfprintf_internal_r+0x16d0>
 183d848:	d8c02d17 	ldw	r3,180(sp)
 183d84c:	002d883a 	mov	r22,zero
 183d850:	1d000017 	ldw	r20,0(r3)
 183d854:	18c00104 	addi	r3,r3,4
 183d858:	d8c02d15 	stw	r3,180(sp)
 183d85c:	003f9c06 	br	183d6d0 <__alt_mem_mem_0+0xff81d6d0>
 183d860:	94800054 	ori	r18,r18,1
 183d864:	bc400007 	ldb	r17,0(r23)
 183d868:	003d3306 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183d86c:	38803fcc 	andi	r2,r7,255
 183d870:	1080201c 	xori	r2,r2,128
 183d874:	10bfe004 	addi	r2,r2,-128
 183d878:	1002971e 	bne	r2,zero,183e2d8 <___svfprintf_internal_r+0x16f0>
 183d87c:	00c00044 	movi	r3,1
 183d880:	01c00804 	movi	r7,32
 183d884:	bc400007 	ldb	r17,0(r23)
 183d888:	003d2b06 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183d88c:	18c03fcc 	andi	r3,r3,255
 183d890:	183e2326 	beq	r3,zero,183d120 <__alt_mem_mem_0+0xff81d120>
 183d894:	d9c02785 	stb	r7,158(sp)
 183d898:	003e2106 	br	183d120 <__alt_mem_mem_0+0xff81d120>
 183d89c:	bc400007 	ldb	r17,0(r23)
 183d8a0:	8a430426 	beq	r17,r9,183e4b4 <___svfprintf_internal_r+0x18cc>
 183d8a4:	94800414 	ori	r18,r18,16
 183d8a8:	003d2306 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183d8ac:	18c03fcc 	andi	r3,r3,255
 183d8b0:	18053f1e 	bne	r3,zero,183edb0 <___svfprintf_internal_r+0x21c8>
 183d8b4:	9080080c 	andi	r2,r18,32
 183d8b8:	10028926 	beq	r2,zero,183e2e0 <___svfprintf_internal_r+0x16f8>
 183d8bc:	d9402d17 	ldw	r5,180(sp)
 183d8c0:	d9002f17 	ldw	r4,188(sp)
 183d8c4:	28800017 	ldw	r2,0(r5)
 183d8c8:	2007d7fa 	srai	r3,r4,31
 183d8cc:	29400104 	addi	r5,r5,4
 183d8d0:	d9402d15 	stw	r5,180(sp)
 183d8d4:	11000015 	stw	r4,0(r2)
 183d8d8:	10c00115 	stw	r3,4(r2)
 183d8dc:	003ced06 	br	183cc94 <__alt_mem_mem_0+0xff81cc94>
 183d8e0:	94801014 	ori	r18,r18,64
 183d8e4:	bc400007 	ldb	r17,0(r23)
 183d8e8:	003d1306 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183d8ec:	01006134 	movhi	r4,388
 183d8f0:	21028504 	addi	r4,r4,2580
 183d8f4:	0039883a 	mov	fp,zero
 183d8f8:	d9003a15 	stw	r4,232(sp)
 183d8fc:	04401e04 	movi	r17,120
 183d900:	003f8206 	br	183d70c <__alt_mem_mem_0+0xff81d70c>
 183d904:	18c03fcc 	andi	r3,r3,255
 183d908:	1805221e 	bne	r3,zero,183ed94 <___svfprintf_internal_r+0x21ac>
 183d90c:	883d9526 	beq	r17,zero,183cf64 <__alt_mem_mem_0+0xff81cf64>
 183d910:	00c00044 	movi	r3,1
 183d914:	d8c02a15 	stw	r3,168(sp)
 183d918:	dc401405 	stb	r17,80(sp)
 183d91c:	d8002785 	stb	zero,158(sp)
 183d920:	003f9406 	br	183d774 <__alt_mem_mem_0+0xff81d774>
 183d924:	01006134 	movhi	r4,388
 183d928:	21028504 	addi	r4,r4,2580
 183d92c:	d9003a15 	stw	r4,232(sp)
 183d930:	d8c02d15 	stw	r3,180(sp)
 183d934:	1025883a 	mov	r18,r2
 183d938:	04401e04 	movi	r17,120
 183d93c:	a584b03a 	or	r2,r20,r22
 183d940:	1000fa1e 	bne	r2,zero,183dd2c <___svfprintf_internal_r+0x1144>
 183d944:	0039883a 	mov	fp,zero
 183d948:	00800084 	movi	r2,2
 183d94c:	10803fcc 	andi	r2,r2,255
 183d950:	00c00044 	movi	r3,1
 183d954:	10c21626 	beq	r2,r3,183e1b0 <___svfprintf_internal_r+0x15c8>
 183d958:	00c00084 	movi	r3,2
 183d95c:	10fe301e 	bne	r2,r3,183d220 <__alt_mem_mem_0+0xff81d220>
 183d960:	003d7606 	br	183cf3c <__alt_mem_mem_0+0xff81cf3c>
 183d964:	d8c02017 	ldw	r3,128(sp)
 183d968:	003e9506 	br	183d3c0 <__alt_mem_mem_0+0xff81d3c0>
 183d96c:	00801944 	movi	r2,101
 183d970:	14407c0e 	bge	r2,r17,183db64 <___svfprintf_internal_r+0xf7c>
 183d974:	d9003617 	ldw	r4,216(sp)
 183d978:	d9403717 	ldw	r5,220(sp)
 183d97c:	000d883a 	mov	r6,zero
 183d980:	000f883a 	mov	r7,zero
 183d984:	d8c03d15 	stw	r3,244(sp)
 183d988:	da003e15 	stw	r8,248(sp)
 183d98c:	180bf200 	call	180bf20 <__eqdf2>
 183d990:	d8c03d17 	ldw	r3,244(sp)
 183d994:	da003e17 	ldw	r8,248(sp)
 183d998:	1000f51e 	bne	r2,zero,183dd70 <___svfprintf_internal_r+0x1188>
 183d99c:	d8801f17 	ldw	r2,124(sp)
 183d9a0:	01006134 	movhi	r4,388
 183d9a4:	21028c04 	addi	r4,r4,2608
 183d9a8:	18c00044 	addi	r3,r3,1
 183d9ac:	10800044 	addi	r2,r2,1
 183d9b0:	41000015 	stw	r4,0(r8)
 183d9b4:	01000044 	movi	r4,1
 183d9b8:	41000115 	stw	r4,4(r8)
 183d9bc:	d8c02015 	stw	r3,128(sp)
 183d9c0:	d8801f15 	stw	r2,124(sp)
 183d9c4:	010001c4 	movi	r4,7
 183d9c8:	20826616 	blt	r4,r2,183e364 <___svfprintf_internal_r+0x177c>
 183d9cc:	42000204 	addi	r8,r8,8
 183d9d0:	d8802617 	ldw	r2,152(sp)
 183d9d4:	d9403317 	ldw	r5,204(sp)
 183d9d8:	11400216 	blt	r2,r5,183d9e4 <___svfprintf_internal_r+0xdfc>
 183d9dc:	9080004c 	andi	r2,r18,1
 183d9e0:	103ed526 	beq	r2,zero,183d538 <__alt_mem_mem_0+0xff81d538>
 183d9e4:	d8803817 	ldw	r2,224(sp)
 183d9e8:	d9003417 	ldw	r4,208(sp)
 183d9ec:	d9403817 	ldw	r5,224(sp)
 183d9f0:	1887883a 	add	r3,r3,r2
 183d9f4:	d8801f17 	ldw	r2,124(sp)
 183d9f8:	41000015 	stw	r4,0(r8)
 183d9fc:	41400115 	stw	r5,4(r8)
 183da00:	10800044 	addi	r2,r2,1
 183da04:	d8c02015 	stw	r3,128(sp)
 183da08:	d8801f15 	stw	r2,124(sp)
 183da0c:	010001c4 	movi	r4,7
 183da10:	2082af16 	blt	r4,r2,183e4d0 <___svfprintf_internal_r+0x18e8>
 183da14:	42000204 	addi	r8,r8,8
 183da18:	d8803317 	ldw	r2,204(sp)
 183da1c:	143fffc4 	addi	r16,r2,-1
 183da20:	043ec50e 	bge	zero,r16,183d538 <__alt_mem_mem_0+0xff81d538>
 183da24:	04400404 	movi	r17,16
 183da28:	d8801f17 	ldw	r2,124(sp)
 183da2c:	8c00860e 	bge	r17,r16,183dc48 <___svfprintf_internal_r+0x1060>
 183da30:	01406134 	movhi	r5,388
 183da34:	294d5b04 	addi	r5,r5,13676
 183da38:	d9402b15 	stw	r5,172(sp)
 183da3c:	058001c4 	movi	r22,7
 183da40:	dd002c17 	ldw	r20,176(sp)
 183da44:	00000306 	br	183da54 <___svfprintf_internal_r+0xe6c>
 183da48:	42000204 	addi	r8,r8,8
 183da4c:	843ffc04 	addi	r16,r16,-16
 183da50:	8c00800e 	bge	r17,r16,183dc54 <___svfprintf_internal_r+0x106c>
 183da54:	18c00404 	addi	r3,r3,16
 183da58:	10800044 	addi	r2,r2,1
 183da5c:	45400015 	stw	r21,0(r8)
 183da60:	44400115 	stw	r17,4(r8)
 183da64:	d8c02015 	stw	r3,128(sp)
 183da68:	d8801f15 	stw	r2,124(sp)
 183da6c:	b0bff60e 	bge	r22,r2,183da48 <__alt_mem_mem_0+0xff81da48>
 183da70:	d9801e04 	addi	r6,sp,120
 183da74:	a00b883a 	mov	r5,r20
 183da78:	9809883a 	mov	r4,r19
 183da7c:	183f0580 	call	183f058 <__ssprint_r>
 183da80:	103d3e1e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183da84:	d8c02017 	ldw	r3,128(sp)
 183da88:	d8801f17 	ldw	r2,124(sp)
 183da8c:	da000404 	addi	r8,sp,16
 183da90:	003fee06 	br	183da4c <__alt_mem_mem_0+0xff81da4c>
 183da94:	d9403117 	ldw	r5,196(sp)
 183da98:	d8802a17 	ldw	r2,168(sp)
 183da9c:	28adc83a 	sub	r22,r5,r2
 183daa0:	05be650e 	bge	zero,r22,183d438 <__alt_mem_mem_0+0xff81d438>
 183daa4:	07000404 	movi	fp,16
 183daa8:	d8801f17 	ldw	r2,124(sp)
 183daac:	e583a20e 	bge	fp,r22,183e938 <___svfprintf_internal_r+0x1d50>
 183dab0:	01406134 	movhi	r5,388
 183dab4:	294d5b04 	addi	r5,r5,13676
 183dab8:	dc403015 	stw	r17,192(sp)
 183dabc:	d9402b15 	stw	r5,172(sp)
 183dac0:	b023883a 	mov	r17,r22
 183dac4:	050001c4 	movi	r20,7
 183dac8:	902d883a 	mov	r22,r18
 183dacc:	8025883a 	mov	r18,r16
 183dad0:	dc002c17 	ldw	r16,176(sp)
 183dad4:	00000306 	br	183dae4 <___svfprintf_internal_r+0xefc>
 183dad8:	8c7ffc04 	addi	r17,r17,-16
 183dadc:	42000204 	addi	r8,r8,8
 183dae0:	e440110e 	bge	fp,r17,183db28 <___svfprintf_internal_r+0xf40>
 183dae4:	18c00404 	addi	r3,r3,16
 183dae8:	10800044 	addi	r2,r2,1
 183daec:	45400015 	stw	r21,0(r8)
 183daf0:	47000115 	stw	fp,4(r8)
 183daf4:	d8c02015 	stw	r3,128(sp)
 183daf8:	d8801f15 	stw	r2,124(sp)
 183dafc:	a0bff60e 	bge	r20,r2,183dad8 <__alt_mem_mem_0+0xff81dad8>
 183db00:	d9801e04 	addi	r6,sp,120
 183db04:	800b883a 	mov	r5,r16
 183db08:	9809883a 	mov	r4,r19
 183db0c:	183f0580 	call	183f058 <__ssprint_r>
 183db10:	103d1a1e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183db14:	8c7ffc04 	addi	r17,r17,-16
 183db18:	d8c02017 	ldw	r3,128(sp)
 183db1c:	d8801f17 	ldw	r2,124(sp)
 183db20:	da000404 	addi	r8,sp,16
 183db24:	e47fef16 	blt	fp,r17,183dae4 <__alt_mem_mem_0+0xff81dae4>
 183db28:	9021883a 	mov	r16,r18
 183db2c:	b025883a 	mov	r18,r22
 183db30:	882d883a 	mov	r22,r17
 183db34:	dc403017 	ldw	r17,192(sp)
 183db38:	d9002b17 	ldw	r4,172(sp)
 183db3c:	1d87883a 	add	r3,r3,r22
 183db40:	10800044 	addi	r2,r2,1
 183db44:	41000015 	stw	r4,0(r8)
 183db48:	45800115 	stw	r22,4(r8)
 183db4c:	d8c02015 	stw	r3,128(sp)
 183db50:	d8801f15 	stw	r2,124(sp)
 183db54:	010001c4 	movi	r4,7
 183db58:	20819a16 	blt	r4,r2,183e1c4 <___svfprintf_internal_r+0x15dc>
 183db5c:	42000204 	addi	r8,r8,8
 183db60:	003e3506 	br	183d438 <__alt_mem_mem_0+0xff81d438>
 183db64:	d9403317 	ldw	r5,204(sp)
 183db68:	00800044 	movi	r2,1
 183db6c:	18c00044 	addi	r3,r3,1
 183db70:	1141710e 	bge	r2,r5,183e138 <___svfprintf_internal_r+0x1550>
 183db74:	dc401f17 	ldw	r17,124(sp)
 183db78:	00800044 	movi	r2,1
 183db7c:	40800115 	stw	r2,4(r8)
 183db80:	8c400044 	addi	r17,r17,1
 183db84:	44000015 	stw	r16,0(r8)
 183db88:	d8c02015 	stw	r3,128(sp)
 183db8c:	dc401f15 	stw	r17,124(sp)
 183db90:	008001c4 	movi	r2,7
 183db94:	14417416 	blt	r2,r17,183e168 <___svfprintf_internal_r+0x1580>
 183db98:	42000204 	addi	r8,r8,8
 183db9c:	d8803817 	ldw	r2,224(sp)
 183dba0:	d9003417 	ldw	r4,208(sp)
 183dba4:	8c400044 	addi	r17,r17,1
 183dba8:	10c7883a 	add	r3,r2,r3
 183dbac:	40800115 	stw	r2,4(r8)
 183dbb0:	41000015 	stw	r4,0(r8)
 183dbb4:	d8c02015 	stw	r3,128(sp)
 183dbb8:	dc401f15 	stw	r17,124(sp)
 183dbbc:	008001c4 	movi	r2,7
 183dbc0:	14417216 	blt	r2,r17,183e18c <___svfprintf_internal_r+0x15a4>
 183dbc4:	45800204 	addi	r22,r8,8
 183dbc8:	d9003617 	ldw	r4,216(sp)
 183dbcc:	d9403717 	ldw	r5,220(sp)
 183dbd0:	000d883a 	mov	r6,zero
 183dbd4:	000f883a 	mov	r7,zero
 183dbd8:	d8c03d15 	stw	r3,244(sp)
 183dbdc:	180bf200 	call	180bf20 <__eqdf2>
 183dbe0:	d8c03d17 	ldw	r3,244(sp)
 183dbe4:	1000b326 	beq	r2,zero,183deb4 <___svfprintf_internal_r+0x12cc>
 183dbe8:	d9403317 	ldw	r5,204(sp)
 183dbec:	84000044 	addi	r16,r16,1
 183dbf0:	8c400044 	addi	r17,r17,1
 183dbf4:	28bfffc4 	addi	r2,r5,-1
 183dbf8:	1887883a 	add	r3,r3,r2
 183dbfc:	b0800115 	stw	r2,4(r22)
 183dc00:	b4000015 	stw	r16,0(r22)
 183dc04:	d8c02015 	stw	r3,128(sp)
 183dc08:	dc401f15 	stw	r17,124(sp)
 183dc0c:	008001c4 	movi	r2,7
 183dc10:	1440d216 	blt	r2,r17,183df5c <___svfprintf_internal_r+0x1374>
 183dc14:	b5800204 	addi	r22,r22,8
 183dc18:	d9003b17 	ldw	r4,236(sp)
 183dc1c:	df0022c4 	addi	fp,sp,139
 183dc20:	8c400044 	addi	r17,r17,1
 183dc24:	20c7883a 	add	r3,r4,r3
 183dc28:	b7000015 	stw	fp,0(r22)
 183dc2c:	b1000115 	stw	r4,4(r22)
 183dc30:	d8c02015 	stw	r3,128(sp)
 183dc34:	dc401f15 	stw	r17,124(sp)
 183dc38:	008001c4 	movi	r2,7
 183dc3c:	14400e16 	blt	r2,r17,183dc78 <___svfprintf_internal_r+0x1090>
 183dc40:	b2000204 	addi	r8,r22,8
 183dc44:	003e3c06 	br	183d538 <__alt_mem_mem_0+0xff81d538>
 183dc48:	01006134 	movhi	r4,388
 183dc4c:	210d5b04 	addi	r4,r4,13676
 183dc50:	d9002b15 	stw	r4,172(sp)
 183dc54:	d9002b17 	ldw	r4,172(sp)
 183dc58:	1c07883a 	add	r3,r3,r16
 183dc5c:	44000115 	stw	r16,4(r8)
 183dc60:	41000015 	stw	r4,0(r8)
 183dc64:	10800044 	addi	r2,r2,1
 183dc68:	d8c02015 	stw	r3,128(sp)
 183dc6c:	d8801f15 	stw	r2,124(sp)
 183dc70:	010001c4 	movi	r4,7
 183dc74:	20be2f0e 	bge	r4,r2,183d534 <__alt_mem_mem_0+0xff81d534>
 183dc78:	d9402c17 	ldw	r5,176(sp)
 183dc7c:	d9801e04 	addi	r6,sp,120
 183dc80:	9809883a 	mov	r4,r19
 183dc84:	183f0580 	call	183f058 <__ssprint_r>
 183dc88:	103cbc1e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183dc8c:	d8c02017 	ldw	r3,128(sp)
 183dc90:	da000404 	addi	r8,sp,16
 183dc94:	003e2806 	br	183d538 <__alt_mem_mem_0+0xff81d538>
 183dc98:	d9402c17 	ldw	r5,176(sp)
 183dc9c:	d9801e04 	addi	r6,sp,120
 183dca0:	9809883a 	mov	r4,r19
 183dca4:	183f0580 	call	183f058 <__ssprint_r>
 183dca8:	103e5f26 	beq	r2,zero,183d628 <__alt_mem_mem_0+0xff81d628>
 183dcac:	003cb306 	br	183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183dcb0:	d9402c17 	ldw	r5,176(sp)
 183dcb4:	d9801e04 	addi	r6,sp,120
 183dcb8:	9809883a 	mov	r4,r19
 183dcbc:	183f0580 	call	183f058 <__ssprint_r>
 183dcc0:	103cae1e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183dcc4:	d8c02017 	ldw	r3,128(sp)
 183dcc8:	da000404 	addi	r8,sp,16
 183dccc:	003e0d06 	br	183d504 <__alt_mem_mem_0+0xff81d504>
 183dcd0:	d9402c17 	ldw	r5,176(sp)
 183dcd4:	d9801e04 	addi	r6,sp,120
 183dcd8:	9809883a 	mov	r4,r19
 183dcdc:	183f0580 	call	183f058 <__ssprint_r>
 183dce0:	103ca61e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183dce4:	d8c02017 	ldw	r3,128(sp)
 183dce8:	da000404 	addi	r8,sp,16
 183dcec:	003dc106 	br	183d3f4 <__alt_mem_mem_0+0xff81d3f4>
 183dcf0:	d9402c17 	ldw	r5,176(sp)
 183dcf4:	d9801e04 	addi	r6,sp,120
 183dcf8:	9809883a 	mov	r4,r19
 183dcfc:	183f0580 	call	183f058 <__ssprint_r>
 183dd00:	103c9e1e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183dd04:	d8c02017 	ldw	r3,128(sp)
 183dd08:	da000404 	addi	r8,sp,16
 183dd0c:	003dc706 	br	183d42c <__alt_mem_mem_0+0xff81d42c>
 183dd10:	d8802917 	ldw	r2,164(sp)
 183dd14:	d8002785 	stb	zero,158(sp)
 183dd18:	103f0816 	blt	r2,zero,183d93c <__alt_mem_mem_0+0xff81d93c>
 183dd1c:	00ffdfc4 	movi	r3,-129
 183dd20:	a584b03a 	or	r2,r20,r22
 183dd24:	90e4703a 	and	r18,r18,r3
 183dd28:	103c8126 	beq	r2,zero,183cf30 <__alt_mem_mem_0+0xff81cf30>
 183dd2c:	0039883a 	mov	fp,zero
 183dd30:	003e7606 	br	183d70c <__alt_mem_mem_0+0xff81d70c>
 183dd34:	9080040c 	andi	r2,r18,16
 183dd38:	10013d26 	beq	r2,zero,183e230 <___svfprintf_internal_r+0x1648>
 183dd3c:	d9002d17 	ldw	r4,180(sp)
 183dd40:	d9402917 	ldw	r5,164(sp)
 183dd44:	d8002785 	stb	zero,158(sp)
 183dd48:	20800104 	addi	r2,r4,4
 183dd4c:	25000017 	ldw	r20,0(r4)
 183dd50:	002d883a 	mov	r22,zero
 183dd54:	28013f16 	blt	r5,zero,183e254 <___svfprintf_internal_r+0x166c>
 183dd58:	00ffdfc4 	movi	r3,-129
 183dd5c:	d8802d15 	stw	r2,180(sp)
 183dd60:	90e4703a 	and	r18,r18,r3
 183dd64:	a03d2b26 	beq	r20,zero,183d214 <__alt_mem_mem_0+0xff81d214>
 183dd68:	0039883a 	mov	fp,zero
 183dd6c:	003d2e06 	br	183d228 <__alt_mem_mem_0+0xff81d228>
 183dd70:	dc402617 	ldw	r17,152(sp)
 183dd74:	0441830e 	bge	zero,r17,183e384 <___svfprintf_internal_r+0x179c>
 183dd78:	dc403217 	ldw	r17,200(sp)
 183dd7c:	d8803317 	ldw	r2,204(sp)
 183dd80:	1440010e 	bge	r2,r17,183dd88 <___svfprintf_internal_r+0x11a0>
 183dd84:	1023883a 	mov	r17,r2
 183dd88:	04400a0e 	bge	zero,r17,183ddb4 <___svfprintf_internal_r+0x11cc>
 183dd8c:	d8801f17 	ldw	r2,124(sp)
 183dd90:	1c47883a 	add	r3,r3,r17
 183dd94:	44000015 	stw	r16,0(r8)
 183dd98:	10800044 	addi	r2,r2,1
 183dd9c:	44400115 	stw	r17,4(r8)
 183dda0:	d8c02015 	stw	r3,128(sp)
 183dda4:	d8801f15 	stw	r2,124(sp)
 183dda8:	010001c4 	movi	r4,7
 183ddac:	20827516 	blt	r4,r2,183e784 <___svfprintf_internal_r+0x1b9c>
 183ddb0:	42000204 	addi	r8,r8,8
 183ddb4:	88027b16 	blt	r17,zero,183e7a4 <___svfprintf_internal_r+0x1bbc>
 183ddb8:	d9003217 	ldw	r4,200(sp)
 183ddbc:	2463c83a 	sub	r17,r4,r17
 183ddc0:	0440990e 	bge	zero,r17,183e028 <___svfprintf_internal_r+0x1440>
 183ddc4:	05800404 	movi	r22,16
 183ddc8:	d8801f17 	ldw	r2,124(sp)
 183ddcc:	b441530e 	bge	r22,r17,183e31c <___svfprintf_internal_r+0x1734>
 183ddd0:	01006134 	movhi	r4,388
 183ddd4:	210d5b04 	addi	r4,r4,13676
 183ddd8:	d9002b15 	stw	r4,172(sp)
 183dddc:	070001c4 	movi	fp,7
 183dde0:	dd002c17 	ldw	r20,176(sp)
 183dde4:	00000306 	br	183ddf4 <___svfprintf_internal_r+0x120c>
 183dde8:	42000204 	addi	r8,r8,8
 183ddec:	8c7ffc04 	addi	r17,r17,-16
 183ddf0:	b4414d0e 	bge	r22,r17,183e328 <___svfprintf_internal_r+0x1740>
 183ddf4:	18c00404 	addi	r3,r3,16
 183ddf8:	10800044 	addi	r2,r2,1
 183ddfc:	45400015 	stw	r21,0(r8)
 183de00:	45800115 	stw	r22,4(r8)
 183de04:	d8c02015 	stw	r3,128(sp)
 183de08:	d8801f15 	stw	r2,124(sp)
 183de0c:	e0bff60e 	bge	fp,r2,183dde8 <__alt_mem_mem_0+0xff81dde8>
 183de10:	d9801e04 	addi	r6,sp,120
 183de14:	a00b883a 	mov	r5,r20
 183de18:	9809883a 	mov	r4,r19
 183de1c:	183f0580 	call	183f058 <__ssprint_r>
 183de20:	103c561e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183de24:	d8c02017 	ldw	r3,128(sp)
 183de28:	d8801f17 	ldw	r2,124(sp)
 183de2c:	da000404 	addi	r8,sp,16
 183de30:	003fee06 	br	183ddec <__alt_mem_mem_0+0xff81ddec>
 183de34:	d9402c17 	ldw	r5,176(sp)
 183de38:	d9801e04 	addi	r6,sp,120
 183de3c:	9809883a 	mov	r4,r19
 183de40:	183f0580 	call	183f058 <__ssprint_r>
 183de44:	103c4d1e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183de48:	d8c02017 	ldw	r3,128(sp)
 183de4c:	df002787 	ldb	fp,158(sp)
 183de50:	da000404 	addi	r8,sp,16
 183de54:	003d5a06 	br	183d3c0 <__alt_mem_mem_0+0xff81d3c0>
 183de58:	9080040c 	andi	r2,r18,16
 183de5c:	10005c26 	beq	r2,zero,183dfd0 <___svfprintf_internal_r+0x13e8>
 183de60:	d9402d17 	ldw	r5,180(sp)
 183de64:	d8c02917 	ldw	r3,164(sp)
 183de68:	d8002785 	stb	zero,158(sp)
 183de6c:	28800104 	addi	r2,r5,4
 183de70:	2d000017 	ldw	r20,0(r5)
 183de74:	002d883a 	mov	r22,zero
 183de78:	18005e16 	blt	r3,zero,183dff4 <___svfprintf_internal_r+0x140c>
 183de7c:	00ffdfc4 	movi	r3,-129
 183de80:	d8802d15 	stw	r2,180(sp)
 183de84:	90e4703a 	and	r18,r18,r3
 183de88:	0039883a 	mov	fp,zero
 183de8c:	a03dfe26 	beq	r20,zero,183d688 <__alt_mem_mem_0+0xff81d688>
 183de90:	00800244 	movi	r2,9
 183de94:	153cb336 	bltu	r2,r20,183d164 <__alt_mem_mem_0+0xff81d164>
 183de98:	a5000c04 	addi	r20,r20,48
 183de9c:	dc001dc4 	addi	r16,sp,119
 183dea0:	dd001dc5 	stb	r20,119(sp)
 183dea4:	d8c02817 	ldw	r3,160(sp)
 183dea8:	1c07c83a 	sub	r3,r3,r16
 183deac:	d8c02e15 	stw	r3,184(sp)
 183deb0:	003cf506 	br	183d288 <__alt_mem_mem_0+0xff81d288>
 183deb4:	d8803317 	ldw	r2,204(sp)
 183deb8:	143fffc4 	addi	r16,r2,-1
 183debc:	043f560e 	bge	zero,r16,183dc18 <__alt_mem_mem_0+0xff81dc18>
 183dec0:	07000404 	movi	fp,16
 183dec4:	e403530e 	bge	fp,r16,183ec14 <___svfprintf_internal_r+0x202c>
 183dec8:	01406134 	movhi	r5,388
 183decc:	294d5b04 	addi	r5,r5,13676
 183ded0:	d9402b15 	stw	r5,172(sp)
 183ded4:	01c001c4 	movi	r7,7
 183ded8:	dd002c17 	ldw	r20,176(sp)
 183dedc:	00000306 	br	183deec <___svfprintf_internal_r+0x1304>
 183dee0:	843ffc04 	addi	r16,r16,-16
 183dee4:	b5800204 	addi	r22,r22,8
 183dee8:	e400130e 	bge	fp,r16,183df38 <___svfprintf_internal_r+0x1350>
 183deec:	18c00404 	addi	r3,r3,16
 183def0:	8c400044 	addi	r17,r17,1
 183def4:	b5400015 	stw	r21,0(r22)
 183def8:	b7000115 	stw	fp,4(r22)
 183defc:	d8c02015 	stw	r3,128(sp)
 183df00:	dc401f15 	stw	r17,124(sp)
 183df04:	3c7ff60e 	bge	r7,r17,183dee0 <__alt_mem_mem_0+0xff81dee0>
 183df08:	d9801e04 	addi	r6,sp,120
 183df0c:	a00b883a 	mov	r5,r20
 183df10:	9809883a 	mov	r4,r19
 183df14:	d9c03d15 	stw	r7,244(sp)
 183df18:	183f0580 	call	183f058 <__ssprint_r>
 183df1c:	d9c03d17 	ldw	r7,244(sp)
 183df20:	103c161e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183df24:	843ffc04 	addi	r16,r16,-16
 183df28:	d8c02017 	ldw	r3,128(sp)
 183df2c:	dc401f17 	ldw	r17,124(sp)
 183df30:	dd800404 	addi	r22,sp,16
 183df34:	e43fed16 	blt	fp,r16,183deec <__alt_mem_mem_0+0xff81deec>
 183df38:	d8802b17 	ldw	r2,172(sp)
 183df3c:	1c07883a 	add	r3,r3,r16
 183df40:	8c400044 	addi	r17,r17,1
 183df44:	b0800015 	stw	r2,0(r22)
 183df48:	b4000115 	stw	r16,4(r22)
 183df4c:	d8c02015 	stw	r3,128(sp)
 183df50:	dc401f15 	stw	r17,124(sp)
 183df54:	008001c4 	movi	r2,7
 183df58:	147f2e0e 	bge	r2,r17,183dc14 <__alt_mem_mem_0+0xff81dc14>
 183df5c:	d9402c17 	ldw	r5,176(sp)
 183df60:	d9801e04 	addi	r6,sp,120
 183df64:	9809883a 	mov	r4,r19
 183df68:	183f0580 	call	183f058 <__ssprint_r>
 183df6c:	103c031e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183df70:	d8c02017 	ldw	r3,128(sp)
 183df74:	dc401f17 	ldw	r17,124(sp)
 183df78:	dd800404 	addi	r22,sp,16
 183df7c:	003f2606 	br	183dc18 <__alt_mem_mem_0+0xff81dc18>
 183df80:	9080040c 	andi	r2,r18,16
 183df84:	1000c326 	beq	r2,zero,183e294 <___svfprintf_internal_r+0x16ac>
 183df88:	d8802d17 	ldw	r2,180(sp)
 183df8c:	15000017 	ldw	r20,0(r2)
 183df90:	10800104 	addi	r2,r2,4
 183df94:	d8802d15 	stw	r2,180(sp)
 183df98:	a02dd7fa 	srai	r22,r20,31
 183df9c:	b005883a 	mov	r2,r22
 183dfa0:	103c680e 	bge	r2,zero,183d144 <__alt_mem_mem_0+0xff81d144>
 183dfa4:	0529c83a 	sub	r20,zero,r20
 183dfa8:	a004c03a 	cmpne	r2,r20,zero
 183dfac:	05adc83a 	sub	r22,zero,r22
 183dfb0:	b0adc83a 	sub	r22,r22,r2
 183dfb4:	d8802917 	ldw	r2,164(sp)
 183dfb8:	07000b44 	movi	fp,45
 183dfbc:	df002785 	stb	fp,158(sp)
 183dfc0:	10022e16 	blt	r2,zero,183e87c <___svfprintf_internal_r+0x1c94>
 183dfc4:	00bfdfc4 	movi	r2,-129
 183dfc8:	90a4703a 	and	r18,r18,r2
 183dfcc:	003c6406 	br	183d160 <__alt_mem_mem_0+0xff81d160>
 183dfd0:	9080100c 	andi	r2,r18,64
 183dfd4:	d8002785 	stb	zero,158(sp)
 183dfd8:	10012526 	beq	r2,zero,183e470 <___svfprintf_internal_r+0x1888>
 183dfdc:	d9002d17 	ldw	r4,180(sp)
 183dfe0:	d9402917 	ldw	r5,164(sp)
 183dfe4:	002d883a 	mov	r22,zero
 183dfe8:	20800104 	addi	r2,r4,4
 183dfec:	2500000b 	ldhu	r20,0(r4)
 183dff0:	283fa20e 	bge	r5,zero,183de7c <__alt_mem_mem_0+0xff81de7c>
 183dff4:	d8802d15 	stw	r2,180(sp)
 183dff8:	0039883a 	mov	fp,zero
 183dffc:	a584b03a 	or	r2,r20,r22
 183e000:	103c571e 	bne	r2,zero,183d160 <__alt_mem_mem_0+0xff81d160>
 183e004:	00800044 	movi	r2,1
 183e008:	003e5006 	br	183d94c <__alt_mem_mem_0+0xff81d94c>
 183e00c:	d9402c17 	ldw	r5,176(sp)
 183e010:	d9801e04 	addi	r6,sp,120
 183e014:	9809883a 	mov	r4,r19
 183e018:	183f0580 	call	183f058 <__ssprint_r>
 183e01c:	103bd71e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e020:	d8c02017 	ldw	r3,128(sp)
 183e024:	da000404 	addi	r8,sp,16
 183e028:	d9003217 	ldw	r4,200(sp)
 183e02c:	d8802617 	ldw	r2,152(sp)
 183e030:	d9403317 	ldw	r5,204(sp)
 183e034:	8123883a 	add	r17,r16,r4
 183e038:	11400216 	blt	r2,r5,183e044 <___svfprintf_internal_r+0x145c>
 183e03c:	9100004c 	andi	r4,r18,1
 183e040:	20000d26 	beq	r4,zero,183e078 <___svfprintf_internal_r+0x1490>
 183e044:	d9003817 	ldw	r4,224(sp)
 183e048:	d9403417 	ldw	r5,208(sp)
 183e04c:	1907883a 	add	r3,r3,r4
 183e050:	d9001f17 	ldw	r4,124(sp)
 183e054:	41400015 	stw	r5,0(r8)
 183e058:	d9403817 	ldw	r5,224(sp)
 183e05c:	21000044 	addi	r4,r4,1
 183e060:	d8c02015 	stw	r3,128(sp)
 183e064:	41400115 	stw	r5,4(r8)
 183e068:	d9001f15 	stw	r4,124(sp)
 183e06c:	014001c4 	movi	r5,7
 183e070:	2901dc16 	blt	r5,r4,183e7e4 <___svfprintf_internal_r+0x1bfc>
 183e074:	42000204 	addi	r8,r8,8
 183e078:	d9003317 	ldw	r4,204(sp)
 183e07c:	8121883a 	add	r16,r16,r4
 183e080:	2085c83a 	sub	r2,r4,r2
 183e084:	8461c83a 	sub	r16,r16,r17
 183e088:	1400010e 	bge	r2,r16,183e090 <___svfprintf_internal_r+0x14a8>
 183e08c:	1021883a 	mov	r16,r2
 183e090:	04000a0e 	bge	zero,r16,183e0bc <___svfprintf_internal_r+0x14d4>
 183e094:	d9001f17 	ldw	r4,124(sp)
 183e098:	1c07883a 	add	r3,r3,r16
 183e09c:	44400015 	stw	r17,0(r8)
 183e0a0:	21000044 	addi	r4,r4,1
 183e0a4:	44000115 	stw	r16,4(r8)
 183e0a8:	d8c02015 	stw	r3,128(sp)
 183e0ac:	d9001f15 	stw	r4,124(sp)
 183e0b0:	014001c4 	movi	r5,7
 183e0b4:	2901e616 	blt	r5,r4,183e850 <___svfprintf_internal_r+0x1c68>
 183e0b8:	42000204 	addi	r8,r8,8
 183e0bc:	8001f616 	blt	r16,zero,183e898 <___svfprintf_internal_r+0x1cb0>
 183e0c0:	1421c83a 	sub	r16,r2,r16
 183e0c4:	043d1c0e 	bge	zero,r16,183d538 <__alt_mem_mem_0+0xff81d538>
 183e0c8:	04400404 	movi	r17,16
 183e0cc:	d8801f17 	ldw	r2,124(sp)
 183e0d0:	8c3edd0e 	bge	r17,r16,183dc48 <__alt_mem_mem_0+0xff81dc48>
 183e0d4:	01406134 	movhi	r5,388
 183e0d8:	294d5b04 	addi	r5,r5,13676
 183e0dc:	d9402b15 	stw	r5,172(sp)
 183e0e0:	058001c4 	movi	r22,7
 183e0e4:	dd002c17 	ldw	r20,176(sp)
 183e0e8:	00000306 	br	183e0f8 <___svfprintf_internal_r+0x1510>
 183e0ec:	42000204 	addi	r8,r8,8
 183e0f0:	843ffc04 	addi	r16,r16,-16
 183e0f4:	8c3ed70e 	bge	r17,r16,183dc54 <__alt_mem_mem_0+0xff81dc54>
 183e0f8:	18c00404 	addi	r3,r3,16
 183e0fc:	10800044 	addi	r2,r2,1
 183e100:	45400015 	stw	r21,0(r8)
 183e104:	44400115 	stw	r17,4(r8)
 183e108:	d8c02015 	stw	r3,128(sp)
 183e10c:	d8801f15 	stw	r2,124(sp)
 183e110:	b0bff60e 	bge	r22,r2,183e0ec <__alt_mem_mem_0+0xff81e0ec>
 183e114:	d9801e04 	addi	r6,sp,120
 183e118:	a00b883a 	mov	r5,r20
 183e11c:	9809883a 	mov	r4,r19
 183e120:	183f0580 	call	183f058 <__ssprint_r>
 183e124:	103b951e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e128:	d8c02017 	ldw	r3,128(sp)
 183e12c:	d8801f17 	ldw	r2,124(sp)
 183e130:	da000404 	addi	r8,sp,16
 183e134:	003fee06 	br	183e0f0 <__alt_mem_mem_0+0xff81e0f0>
 183e138:	9088703a 	and	r4,r18,r2
 183e13c:	203e8d1e 	bne	r4,zero,183db74 <__alt_mem_mem_0+0xff81db74>
 183e140:	dc401f17 	ldw	r17,124(sp)
 183e144:	40800115 	stw	r2,4(r8)
 183e148:	44000015 	stw	r16,0(r8)
 183e14c:	8c400044 	addi	r17,r17,1
 183e150:	d8c02015 	stw	r3,128(sp)
 183e154:	dc401f15 	stw	r17,124(sp)
 183e158:	008001c4 	movi	r2,7
 183e15c:	147f7f16 	blt	r2,r17,183df5c <__alt_mem_mem_0+0xff81df5c>
 183e160:	45800204 	addi	r22,r8,8
 183e164:	003eac06 	br	183dc18 <__alt_mem_mem_0+0xff81dc18>
 183e168:	d9402c17 	ldw	r5,176(sp)
 183e16c:	d9801e04 	addi	r6,sp,120
 183e170:	9809883a 	mov	r4,r19
 183e174:	183f0580 	call	183f058 <__ssprint_r>
 183e178:	103b801e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e17c:	d8c02017 	ldw	r3,128(sp)
 183e180:	dc401f17 	ldw	r17,124(sp)
 183e184:	da000404 	addi	r8,sp,16
 183e188:	003e8406 	br	183db9c <__alt_mem_mem_0+0xff81db9c>
 183e18c:	d9402c17 	ldw	r5,176(sp)
 183e190:	d9801e04 	addi	r6,sp,120
 183e194:	9809883a 	mov	r4,r19
 183e198:	183f0580 	call	183f058 <__ssprint_r>
 183e19c:	103b771e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e1a0:	d8c02017 	ldw	r3,128(sp)
 183e1a4:	dc401f17 	ldw	r17,124(sp)
 183e1a8:	dd800404 	addi	r22,sp,16
 183e1ac:	003e8606 	br	183dbc8 <__alt_mem_mem_0+0xff81dbc8>
 183e1b0:	0029883a 	mov	r20,zero
 183e1b4:	a5000c04 	addi	r20,r20,48
 183e1b8:	dc001dc4 	addi	r16,sp,119
 183e1bc:	dd001dc5 	stb	r20,119(sp)
 183e1c0:	003f3806 	br	183dea4 <__alt_mem_mem_0+0xff81dea4>
 183e1c4:	d9402c17 	ldw	r5,176(sp)
 183e1c8:	d9801e04 	addi	r6,sp,120
 183e1cc:	9809883a 	mov	r4,r19
 183e1d0:	183f0580 	call	183f058 <__ssprint_r>
 183e1d4:	103b691e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e1d8:	d8c02017 	ldw	r3,128(sp)
 183e1dc:	da000404 	addi	r8,sp,16
 183e1e0:	003c9506 	br	183d438 <__alt_mem_mem_0+0xff81d438>
 183e1e4:	d9003617 	ldw	r4,216(sp)
 183e1e8:	d9403717 	ldw	r5,220(sp)
 183e1ec:	da003e15 	stw	r8,248(sp)
 183e1f0:	18072b80 	call	18072b8 <__fpclassifyd>
 183e1f4:	da003e17 	ldw	r8,248(sp)
 183e1f8:	1000bd1e 	bne	r2,zero,183e4f0 <___svfprintf_internal_r+0x1908>
 183e1fc:	008011c4 	movi	r2,71
 183e200:	14411e0e 	bge	r2,r17,183e67c <___svfprintf_internal_r+0x1a94>
 183e204:	04006134 	movhi	r16,388
 183e208:	84027f04 	addi	r16,r16,2556
 183e20c:	00c000c4 	movi	r3,3
 183e210:	00bfdfc4 	movi	r2,-129
 183e214:	d8c02a15 	stw	r3,168(sp)
 183e218:	90a4703a 	and	r18,r18,r2
 183e21c:	df002783 	ldbu	fp,158(sp)
 183e220:	d8c02e15 	stw	r3,184(sp)
 183e224:	d8002915 	stw	zero,164(sp)
 183e228:	d8003215 	stw	zero,200(sp)
 183e22c:	003c1c06 	br	183d2a0 <__alt_mem_mem_0+0xff81d2a0>
 183e230:	9080100c 	andi	r2,r18,64
 183e234:	d8002785 	stb	zero,158(sp)
 183e238:	10009426 	beq	r2,zero,183e48c <___svfprintf_internal_r+0x18a4>
 183e23c:	d8c02d17 	ldw	r3,180(sp)
 183e240:	d9002917 	ldw	r4,164(sp)
 183e244:	002d883a 	mov	r22,zero
 183e248:	18800104 	addi	r2,r3,4
 183e24c:	1d00000b 	ldhu	r20,0(r3)
 183e250:	203ec10e 	bge	r4,zero,183dd58 <__alt_mem_mem_0+0xff81dd58>
 183e254:	a586b03a 	or	r3,r20,r22
 183e258:	d8802d15 	stw	r2,180(sp)
 183e25c:	183ec21e 	bne	r3,zero,183dd68 <__alt_mem_mem_0+0xff81dd68>
 183e260:	0039883a 	mov	fp,zero
 183e264:	0005883a 	mov	r2,zero
 183e268:	003db806 	br	183d94c <__alt_mem_mem_0+0xff81d94c>
 183e26c:	d8802d17 	ldw	r2,180(sp)
 183e270:	d8c02d17 	ldw	r3,180(sp)
 183e274:	d9002d17 	ldw	r4,180(sp)
 183e278:	10800017 	ldw	r2,0(r2)
 183e27c:	18c00117 	ldw	r3,4(r3)
 183e280:	21000204 	addi	r4,r4,8
 183e284:	d8803615 	stw	r2,216(sp)
 183e288:	d8c03715 	stw	r3,220(sp)
 183e28c:	d9002d15 	stw	r4,180(sp)
 183e290:	003b8206 	br	183d09c <__alt_mem_mem_0+0xff81d09c>
 183e294:	9080100c 	andi	r2,r18,64
 183e298:	10010726 	beq	r2,zero,183e6b8 <___svfprintf_internal_r+0x1ad0>
 183e29c:	d8c02d17 	ldw	r3,180(sp)
 183e2a0:	1d00000f 	ldh	r20,0(r3)
 183e2a4:	18c00104 	addi	r3,r3,4
 183e2a8:	d8c02d15 	stw	r3,180(sp)
 183e2ac:	a02dd7fa 	srai	r22,r20,31
 183e2b0:	b005883a 	mov	r2,r22
 183e2b4:	003ba206 	br	183d140 <__alt_mem_mem_0+0xff81d140>
 183e2b8:	9080100c 	andi	r2,r18,64
 183e2bc:	10010526 	beq	r2,zero,183e6d4 <___svfprintf_internal_r+0x1aec>
 183e2c0:	d9002d17 	ldw	r4,180(sp)
 183e2c4:	002d883a 	mov	r22,zero
 183e2c8:	2500000b 	ldhu	r20,0(r4)
 183e2cc:	21000104 	addi	r4,r4,4
 183e2d0:	d9002d15 	stw	r4,180(sp)
 183e2d4:	003cfe06 	br	183d6d0 <__alt_mem_mem_0+0xff81d6d0>
 183e2d8:	bc400007 	ldb	r17,0(r23)
 183e2dc:	003a9606 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183e2e0:	9080040c 	andi	r2,r18,16
 183e2e4:	10010126 	beq	r2,zero,183e6ec <___svfprintf_internal_r+0x1b04>
 183e2e8:	d9402d17 	ldw	r5,180(sp)
 183e2ec:	d8c02f17 	ldw	r3,188(sp)
 183e2f0:	28800017 	ldw	r2,0(r5)
 183e2f4:	29400104 	addi	r5,r5,4
 183e2f8:	d9402d15 	stw	r5,180(sp)
 183e2fc:	10c00015 	stw	r3,0(r2)
 183e300:	003a6406 	br	183cc94 <__alt_mem_mem_0+0xff81cc94>
 183e304:	d9002917 	ldw	r4,164(sp)
 183e308:	d8002785 	stb	zero,158(sp)
 183e30c:	203d8d16 	blt	r4,zero,183d944 <__alt_mem_mem_0+0xff81d944>
 183e310:	00bfdfc4 	movi	r2,-129
 183e314:	90a4703a 	and	r18,r18,r2
 183e318:	003b0506 	br	183cf30 <__alt_mem_mem_0+0xff81cf30>
 183e31c:	01406134 	movhi	r5,388
 183e320:	294d5b04 	addi	r5,r5,13676
 183e324:	d9402b15 	stw	r5,172(sp)
 183e328:	d9402b17 	ldw	r5,172(sp)
 183e32c:	1c47883a 	add	r3,r3,r17
 183e330:	10800044 	addi	r2,r2,1
 183e334:	41400015 	stw	r5,0(r8)
 183e338:	44400115 	stw	r17,4(r8)
 183e33c:	d8c02015 	stw	r3,128(sp)
 183e340:	d8801f15 	stw	r2,124(sp)
 183e344:	010001c4 	movi	r4,7
 183e348:	20bf3016 	blt	r4,r2,183e00c <__alt_mem_mem_0+0xff81e00c>
 183e34c:	42000204 	addi	r8,r8,8
 183e350:	003f3506 	br	183e028 <__alt_mem_mem_0+0xff81e028>
 183e354:	01006134 	movhi	r4,388
 183e358:	210d5b04 	addi	r4,r4,13676
 183e35c:	d9002b15 	stw	r4,172(sp)
 183e360:	003c5e06 	br	183d4dc <__alt_mem_mem_0+0xff81d4dc>
 183e364:	d9402c17 	ldw	r5,176(sp)
 183e368:	d9801e04 	addi	r6,sp,120
 183e36c:	9809883a 	mov	r4,r19
 183e370:	183f0580 	call	183f058 <__ssprint_r>
 183e374:	103b011e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e378:	d8c02017 	ldw	r3,128(sp)
 183e37c:	da000404 	addi	r8,sp,16
 183e380:	003d9306 	br	183d9d0 <__alt_mem_mem_0+0xff81d9d0>
 183e384:	d8801f17 	ldw	r2,124(sp)
 183e388:	01406134 	movhi	r5,388
 183e38c:	01000044 	movi	r4,1
 183e390:	18c00044 	addi	r3,r3,1
 183e394:	10800044 	addi	r2,r2,1
 183e398:	29428c04 	addi	r5,r5,2608
 183e39c:	41000115 	stw	r4,4(r8)
 183e3a0:	41400015 	stw	r5,0(r8)
 183e3a4:	d8c02015 	stw	r3,128(sp)
 183e3a8:	d8801f15 	stw	r2,124(sp)
 183e3ac:	010001c4 	movi	r4,7
 183e3b0:	2080b516 	blt	r4,r2,183e688 <___svfprintf_internal_r+0x1aa0>
 183e3b4:	42000204 	addi	r8,r8,8
 183e3b8:	8800041e 	bne	r17,zero,183e3cc <___svfprintf_internal_r+0x17e4>
 183e3bc:	d8803317 	ldw	r2,204(sp)
 183e3c0:	1000021e 	bne	r2,zero,183e3cc <___svfprintf_internal_r+0x17e4>
 183e3c4:	9080004c 	andi	r2,r18,1
 183e3c8:	103c5b26 	beq	r2,zero,183d538 <__alt_mem_mem_0+0xff81d538>
 183e3cc:	d9003817 	ldw	r4,224(sp)
 183e3d0:	d8801f17 	ldw	r2,124(sp)
 183e3d4:	d9403417 	ldw	r5,208(sp)
 183e3d8:	20c7883a 	add	r3,r4,r3
 183e3dc:	10800044 	addi	r2,r2,1
 183e3e0:	41000115 	stw	r4,4(r8)
 183e3e4:	41400015 	stw	r5,0(r8)
 183e3e8:	d8c02015 	stw	r3,128(sp)
 183e3ec:	d8801f15 	stw	r2,124(sp)
 183e3f0:	010001c4 	movi	r4,7
 183e3f4:	20818016 	blt	r4,r2,183e9f8 <___svfprintf_internal_r+0x1e10>
 183e3f8:	42000204 	addi	r8,r8,8
 183e3fc:	0463c83a 	sub	r17,zero,r17
 183e400:	0440cb0e 	bge	zero,r17,183e730 <___svfprintf_internal_r+0x1b48>
 183e404:	05800404 	movi	r22,16
 183e408:	b440e80e 	bge	r22,r17,183e7ac <___svfprintf_internal_r+0x1bc4>
 183e40c:	01406134 	movhi	r5,388
 183e410:	294d5b04 	addi	r5,r5,13676
 183e414:	d9402b15 	stw	r5,172(sp)
 183e418:	070001c4 	movi	fp,7
 183e41c:	dd002c17 	ldw	r20,176(sp)
 183e420:	00000306 	br	183e430 <___svfprintf_internal_r+0x1848>
 183e424:	42000204 	addi	r8,r8,8
 183e428:	8c7ffc04 	addi	r17,r17,-16
 183e42c:	b440e20e 	bge	r22,r17,183e7b8 <___svfprintf_internal_r+0x1bd0>
 183e430:	18c00404 	addi	r3,r3,16
 183e434:	10800044 	addi	r2,r2,1
 183e438:	45400015 	stw	r21,0(r8)
 183e43c:	45800115 	stw	r22,4(r8)
 183e440:	d8c02015 	stw	r3,128(sp)
 183e444:	d8801f15 	stw	r2,124(sp)
 183e448:	e0bff60e 	bge	fp,r2,183e424 <__alt_mem_mem_0+0xff81e424>
 183e44c:	d9801e04 	addi	r6,sp,120
 183e450:	a00b883a 	mov	r5,r20
 183e454:	9809883a 	mov	r4,r19
 183e458:	183f0580 	call	183f058 <__ssprint_r>
 183e45c:	103ac71e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e460:	d8c02017 	ldw	r3,128(sp)
 183e464:	d8801f17 	ldw	r2,124(sp)
 183e468:	da000404 	addi	r8,sp,16
 183e46c:	003fee06 	br	183e428 <__alt_mem_mem_0+0xff81e428>
 183e470:	d8c02d17 	ldw	r3,180(sp)
 183e474:	d9002917 	ldw	r4,164(sp)
 183e478:	002d883a 	mov	r22,zero
 183e47c:	18800104 	addi	r2,r3,4
 183e480:	1d000017 	ldw	r20,0(r3)
 183e484:	203e7d0e 	bge	r4,zero,183de7c <__alt_mem_mem_0+0xff81de7c>
 183e488:	003eda06 	br	183dff4 <__alt_mem_mem_0+0xff81dff4>
 183e48c:	d9402d17 	ldw	r5,180(sp)
 183e490:	d8c02917 	ldw	r3,164(sp)
 183e494:	002d883a 	mov	r22,zero
 183e498:	28800104 	addi	r2,r5,4
 183e49c:	2d000017 	ldw	r20,0(r5)
 183e4a0:	183e2d0e 	bge	r3,zero,183dd58 <__alt_mem_mem_0+0xff81dd58>
 183e4a4:	003f6b06 	br	183e254 <__alt_mem_mem_0+0xff81e254>
 183e4a8:	d8c02d15 	stw	r3,180(sp)
 183e4ac:	0039883a 	mov	fp,zero
 183e4b0:	003ed206 	br	183dffc <__alt_mem_mem_0+0xff81dffc>
 183e4b4:	bc400043 	ldbu	r17,1(r23)
 183e4b8:	94800814 	ori	r18,r18,32
 183e4bc:	bdc00044 	addi	r23,r23,1
 183e4c0:	8c403fcc 	andi	r17,r17,255
 183e4c4:	8c40201c 	xori	r17,r17,128
 183e4c8:	8c7fe004 	addi	r17,r17,-128
 183e4cc:	003a1a06 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183e4d0:	d9402c17 	ldw	r5,176(sp)
 183e4d4:	d9801e04 	addi	r6,sp,120
 183e4d8:	9809883a 	mov	r4,r19
 183e4dc:	183f0580 	call	183f058 <__ssprint_r>
 183e4e0:	103aa61e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e4e4:	d8c02017 	ldw	r3,128(sp)
 183e4e8:	da000404 	addi	r8,sp,16
 183e4ec:	003d4a06 	br	183da18 <__alt_mem_mem_0+0xff81da18>
 183e4f0:	d9002917 	ldw	r4,164(sp)
 183e4f4:	05bff7c4 	movi	r22,-33
 183e4f8:	00bfffc4 	movi	r2,-1
 183e4fc:	8dac703a 	and	r22,r17,r22
 183e500:	20806a26 	beq	r4,r2,183e6ac <___svfprintf_internal_r+0x1ac4>
 183e504:	008011c4 	movi	r2,71
 183e508:	b0813726 	beq	r22,r2,183e9e8 <___svfprintf_internal_r+0x1e00>
 183e50c:	d9003717 	ldw	r4,220(sp)
 183e510:	90c04014 	ori	r3,r18,256
 183e514:	d8c02b15 	stw	r3,172(sp)
 183e518:	20015d16 	blt	r4,zero,183ea90 <___svfprintf_internal_r+0x1ea8>
 183e51c:	dd003717 	ldw	r20,220(sp)
 183e520:	d8002a05 	stb	zero,168(sp)
 183e524:	00801984 	movi	r2,102
 183e528:	88814026 	beq	r17,r2,183ea2c <___svfprintf_internal_r+0x1e44>
 183e52c:	00801184 	movi	r2,70
 183e530:	88817126 	beq	r17,r2,183eaf8 <___svfprintf_internal_r+0x1f10>
 183e534:	00801144 	movi	r2,69
 183e538:	b0816226 	beq	r22,r2,183eac4 <___svfprintf_internal_r+0x1edc>
 183e53c:	d8c02917 	ldw	r3,164(sp)
 183e540:	d8802104 	addi	r2,sp,132
 183e544:	d8800315 	stw	r2,12(sp)
 183e548:	d9403617 	ldw	r5,216(sp)
 183e54c:	d8802504 	addi	r2,sp,148
 183e550:	d8800215 	stw	r2,8(sp)
 183e554:	d8802604 	addi	r2,sp,152
 183e558:	d8c00015 	stw	r3,0(sp)
 183e55c:	d8800115 	stw	r2,4(sp)
 183e560:	01c00084 	movi	r7,2
 183e564:	a00d883a 	mov	r6,r20
 183e568:	9809883a 	mov	r4,r19
 183e56c:	d8c03d15 	stw	r3,244(sp)
 183e570:	da003e15 	stw	r8,248(sp)
 183e574:	18032380 	call	1803238 <_dtoa_r>
 183e578:	1021883a 	mov	r16,r2
 183e57c:	008019c4 	movi	r2,103
 183e580:	d8c03d17 	ldw	r3,244(sp)
 183e584:	da003e17 	ldw	r8,248(sp)
 183e588:	8880e726 	beq	r17,r2,183e928 <___svfprintf_internal_r+0x1d40>
 183e58c:	008011c4 	movi	r2,71
 183e590:	8880d426 	beq	r17,r2,183e8e4 <___svfprintf_internal_r+0x1cfc>
 183e594:	80f9883a 	add	fp,r16,r3
 183e598:	d9003617 	ldw	r4,216(sp)
 183e59c:	000d883a 	mov	r6,zero
 183e5a0:	000f883a 	mov	r7,zero
 183e5a4:	a00b883a 	mov	r5,r20
 183e5a8:	da003e15 	stw	r8,248(sp)
 183e5ac:	180bf200 	call	180bf20 <__eqdf2>
 183e5b0:	da003e17 	ldw	r8,248(sp)
 183e5b4:	1000e426 	beq	r2,zero,183e948 <___svfprintf_internal_r+0x1d60>
 183e5b8:	d8802117 	ldw	r2,132(sp)
 183e5bc:	1700062e 	bgeu	r2,fp,183e5d8 <___svfprintf_internal_r+0x19f0>
 183e5c0:	01000c04 	movi	r4,48
 183e5c4:	10c00044 	addi	r3,r2,1
 183e5c8:	d8c02115 	stw	r3,132(sp)
 183e5cc:	11000005 	stb	r4,0(r2)
 183e5d0:	d8802117 	ldw	r2,132(sp)
 183e5d4:	173ffb36 	bltu	r2,fp,183e5c4 <__alt_mem_mem_0+0xff81e5c4>
 183e5d8:	1405c83a 	sub	r2,r2,r16
 183e5dc:	d8803315 	stw	r2,204(sp)
 183e5e0:	008011c4 	movi	r2,71
 183e5e4:	b080c526 	beq	r22,r2,183e8fc <___svfprintf_internal_r+0x1d14>
 183e5e8:	00801944 	movi	r2,101
 183e5ec:	1441d90e 	bge	r2,r17,183ed54 <___svfprintf_internal_r+0x216c>
 183e5f0:	d8c02617 	ldw	r3,152(sp)
 183e5f4:	00801984 	movi	r2,102
 183e5f8:	d8c03215 	stw	r3,200(sp)
 183e5fc:	88813426 	beq	r17,r2,183ead0 <___svfprintf_internal_r+0x1ee8>
 183e600:	d8c03217 	ldw	r3,200(sp)
 183e604:	d9003317 	ldw	r4,204(sp)
 183e608:	19012516 	blt	r3,r4,183eaa0 <___svfprintf_internal_r+0x1eb8>
 183e60c:	9480004c 	andi	r18,r18,1
 183e610:	9001841e 	bne	r18,zero,183ec24 <___svfprintf_internal_r+0x203c>
 183e614:	1805883a 	mov	r2,r3
 183e618:	1801cc16 	blt	r3,zero,183ed4c <___svfprintf_internal_r+0x2164>
 183e61c:	d8c03217 	ldw	r3,200(sp)
 183e620:	044019c4 	movi	r17,103
 183e624:	d8c02e15 	stw	r3,184(sp)
 183e628:	df002a07 	ldb	fp,168(sp)
 183e62c:	e000a61e 	bne	fp,zero,183e8c8 <___svfprintf_internal_r+0x1ce0>
 183e630:	df002783 	ldbu	fp,158(sp)
 183e634:	d8802a15 	stw	r2,168(sp)
 183e638:	dc802b17 	ldw	r18,172(sp)
 183e63c:	d8002915 	stw	zero,164(sp)
 183e640:	003b1706 	br	183d2a0 <__alt_mem_mem_0+0xff81d2a0>
 183e644:	04006134 	movhi	r16,388
 183e648:	84027c04 	addi	r16,r16,2544
 183e64c:	003aa606 	br	183d0e8 <__alt_mem_mem_0+0xff81d0e8>
 183e650:	d9003917 	ldw	r4,228(sp)
 183e654:	04001004 	movi	r16,64
 183e658:	800b883a 	mov	r5,r16
 183e65c:	180575c0 	call	180575c <_malloc_r>
 183e660:	d9002c17 	ldw	r4,176(sp)
 183e664:	20800015 	stw	r2,0(r4)
 183e668:	20800415 	stw	r2,16(r4)
 183e66c:	1001cb26 	beq	r2,zero,183ed9c <___svfprintf_internal_r+0x21b4>
 183e670:	d8802c17 	ldw	r2,176(sp)
 183e674:	14000515 	stw	r16,20(r2)
 183e678:	00397606 	br	183cc54 <__alt_mem_mem_0+0xff81cc54>
 183e67c:	04006134 	movhi	r16,388
 183e680:	84027e04 	addi	r16,r16,2552
 183e684:	003ee106 	br	183e20c <__alt_mem_mem_0+0xff81e20c>
 183e688:	d9402c17 	ldw	r5,176(sp)
 183e68c:	d9801e04 	addi	r6,sp,120
 183e690:	9809883a 	mov	r4,r19
 183e694:	183f0580 	call	183f058 <__ssprint_r>
 183e698:	103a381e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e69c:	dc402617 	ldw	r17,152(sp)
 183e6a0:	d8c02017 	ldw	r3,128(sp)
 183e6a4:	da000404 	addi	r8,sp,16
 183e6a8:	003f4306 	br	183e3b8 <__alt_mem_mem_0+0xff81e3b8>
 183e6ac:	01400184 	movi	r5,6
 183e6b0:	d9402915 	stw	r5,164(sp)
 183e6b4:	003f9506 	br	183e50c <__alt_mem_mem_0+0xff81e50c>
 183e6b8:	d9002d17 	ldw	r4,180(sp)
 183e6bc:	25000017 	ldw	r20,0(r4)
 183e6c0:	21000104 	addi	r4,r4,4
 183e6c4:	d9002d15 	stw	r4,180(sp)
 183e6c8:	a02dd7fa 	srai	r22,r20,31
 183e6cc:	b005883a 	mov	r2,r22
 183e6d0:	003a9b06 	br	183d140 <__alt_mem_mem_0+0xff81d140>
 183e6d4:	d9402d17 	ldw	r5,180(sp)
 183e6d8:	002d883a 	mov	r22,zero
 183e6dc:	2d000017 	ldw	r20,0(r5)
 183e6e0:	29400104 	addi	r5,r5,4
 183e6e4:	d9402d15 	stw	r5,180(sp)
 183e6e8:	003bf906 	br	183d6d0 <__alt_mem_mem_0+0xff81d6d0>
 183e6ec:	9480100c 	andi	r18,r18,64
 183e6f0:	90006e26 	beq	r18,zero,183e8ac <___svfprintf_internal_r+0x1cc4>
 183e6f4:	d9002d17 	ldw	r4,180(sp)
 183e6f8:	d9402f17 	ldw	r5,188(sp)
 183e6fc:	20800017 	ldw	r2,0(r4)
 183e700:	21000104 	addi	r4,r4,4
 183e704:	d9002d15 	stw	r4,180(sp)
 183e708:	1140000d 	sth	r5,0(r2)
 183e70c:	00396106 	br	183cc94 <__alt_mem_mem_0+0xff81cc94>
 183e710:	d9402c17 	ldw	r5,176(sp)
 183e714:	d9801e04 	addi	r6,sp,120
 183e718:	9809883a 	mov	r4,r19
 183e71c:	183f0580 	call	183f058 <__ssprint_r>
 183e720:	103a161e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e724:	d8c02017 	ldw	r3,128(sp)
 183e728:	d8801f17 	ldw	r2,124(sp)
 183e72c:	da000404 	addi	r8,sp,16
 183e730:	d9403317 	ldw	r5,204(sp)
 183e734:	10800044 	addi	r2,r2,1
 183e738:	44000015 	stw	r16,0(r8)
 183e73c:	28c7883a 	add	r3,r5,r3
 183e740:	003b7706 	br	183d520 <__alt_mem_mem_0+0xff81d520>
 183e744:	8009883a 	mov	r4,r16
 183e748:	da003e15 	stw	r8,248(sp)
 183e74c:	18075980 	call	1807598 <strlen>
 183e750:	d8802e15 	stw	r2,184(sp)
 183e754:	da003e17 	ldw	r8,248(sp)
 183e758:	103c280e 	bge	r2,zero,183d7fc <__alt_mem_mem_0+0xff81d7fc>
 183e75c:	0005883a 	mov	r2,zero
 183e760:	003c2606 	br	183d7fc <__alt_mem_mem_0+0xff81d7fc>
 183e764:	00bfffc4 	movi	r2,-1
 183e768:	003a0906 	br	183cf90 <__alt_mem_mem_0+0xff81cf90>
 183e76c:	01006134 	movhi	r4,388
 183e770:	210d5f04 	addi	r4,r4,13692
 183e774:	d9003515 	stw	r4,212(sp)
 183e778:	003b0606 	br	183d394 <__alt_mem_mem_0+0xff81d394>
 183e77c:	013fffc4 	movi	r4,-1
 183e780:	003a2706 	br	183d020 <__alt_mem_mem_0+0xff81d020>
 183e784:	d9402c17 	ldw	r5,176(sp)
 183e788:	d9801e04 	addi	r6,sp,120
 183e78c:	9809883a 	mov	r4,r19
 183e790:	183f0580 	call	183f058 <__ssprint_r>
 183e794:	1039f91e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e798:	d8c02017 	ldw	r3,128(sp)
 183e79c:	da000404 	addi	r8,sp,16
 183e7a0:	003d8406 	br	183ddb4 <__alt_mem_mem_0+0xff81ddb4>
 183e7a4:	0023883a 	mov	r17,zero
 183e7a8:	003d8306 	br	183ddb8 <__alt_mem_mem_0+0xff81ddb8>
 183e7ac:	01006134 	movhi	r4,388
 183e7b0:	210d5b04 	addi	r4,r4,13676
 183e7b4:	d9002b15 	stw	r4,172(sp)
 183e7b8:	d9002b17 	ldw	r4,172(sp)
 183e7bc:	1c47883a 	add	r3,r3,r17
 183e7c0:	10800044 	addi	r2,r2,1
 183e7c4:	41000015 	stw	r4,0(r8)
 183e7c8:	44400115 	stw	r17,4(r8)
 183e7cc:	d8c02015 	stw	r3,128(sp)
 183e7d0:	d8801f15 	stw	r2,124(sp)
 183e7d4:	010001c4 	movi	r4,7
 183e7d8:	20bfcd16 	blt	r4,r2,183e710 <__alt_mem_mem_0+0xff81e710>
 183e7dc:	42000204 	addi	r8,r8,8
 183e7e0:	003fd306 	br	183e730 <__alt_mem_mem_0+0xff81e730>
 183e7e4:	d9402c17 	ldw	r5,176(sp)
 183e7e8:	d9801e04 	addi	r6,sp,120
 183e7ec:	9809883a 	mov	r4,r19
 183e7f0:	183f0580 	call	183f058 <__ssprint_r>
 183e7f4:	1039e11e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e7f8:	d8802617 	ldw	r2,152(sp)
 183e7fc:	d8c02017 	ldw	r3,128(sp)
 183e800:	da000404 	addi	r8,sp,16
 183e804:	003e1c06 	br	183e078 <__alt_mem_mem_0+0xff81e078>
 183e808:	d8802917 	ldw	r2,164(sp)
 183e80c:	00c00184 	movi	r3,6
 183e810:	1880012e 	bgeu	r3,r2,183e818 <___svfprintf_internal_r+0x1c30>
 183e814:	1805883a 	mov	r2,r3
 183e818:	d8802e15 	stw	r2,184(sp)
 183e81c:	1000f316 	blt	r2,zero,183ebec <___svfprintf_internal_r+0x2004>
 183e820:	04006134 	movhi	r16,388
 183e824:	d8802a15 	stw	r2,168(sp)
 183e828:	dd002d15 	stw	r20,180(sp)
 183e82c:	d8002915 	stw	zero,164(sp)
 183e830:	d8003215 	stw	zero,200(sp)
 183e834:	84028a04 	addi	r16,r16,2600
 183e838:	0039883a 	mov	fp,zero
 183e83c:	003a9f06 	br	183d2bc <__alt_mem_mem_0+0xff81d2bc>
 183e840:	01006134 	movhi	r4,388
 183e844:	210d5f04 	addi	r4,r4,13692
 183e848:	d9003515 	stw	r4,212(sp)
 183e84c:	003b5f06 	br	183d5cc <__alt_mem_mem_0+0xff81d5cc>
 183e850:	d9402c17 	ldw	r5,176(sp)
 183e854:	d9801e04 	addi	r6,sp,120
 183e858:	9809883a 	mov	r4,r19
 183e85c:	183f0580 	call	183f058 <__ssprint_r>
 183e860:	1039c61e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183e864:	d8802617 	ldw	r2,152(sp)
 183e868:	d9403317 	ldw	r5,204(sp)
 183e86c:	d8c02017 	ldw	r3,128(sp)
 183e870:	da000404 	addi	r8,sp,16
 183e874:	2885c83a 	sub	r2,r5,r2
 183e878:	003e1006 	br	183e0bc <__alt_mem_mem_0+0xff81e0bc>
 183e87c:	00800044 	movi	r2,1
 183e880:	10803fcc 	andi	r2,r2,255
 183e884:	00c00044 	movi	r3,1
 183e888:	10fa3526 	beq	r2,r3,183d160 <__alt_mem_mem_0+0xff81d160>
 183e88c:	00c00084 	movi	r3,2
 183e890:	10fb9e26 	beq	r2,r3,183d70c <__alt_mem_mem_0+0xff81d70c>
 183e894:	003a6406 	br	183d228 <__alt_mem_mem_0+0xff81d228>
 183e898:	0021883a 	mov	r16,zero
 183e89c:	003e0806 	br	183e0c0 <__alt_mem_mem_0+0xff81e0c0>
 183e8a0:	07000b44 	movi	fp,45
 183e8a4:	df002785 	stb	fp,158(sp)
 183e8a8:	003a0b06 	br	183d0d8 <__alt_mem_mem_0+0xff81d0d8>
 183e8ac:	d8c02d17 	ldw	r3,180(sp)
 183e8b0:	d9002f17 	ldw	r4,188(sp)
 183e8b4:	18800017 	ldw	r2,0(r3)
 183e8b8:	18c00104 	addi	r3,r3,4
 183e8bc:	d8c02d15 	stw	r3,180(sp)
 183e8c0:	11000015 	stw	r4,0(r2)
 183e8c4:	0038f306 	br	183cc94 <__alt_mem_mem_0+0xff81cc94>
 183e8c8:	00c00b44 	movi	r3,45
 183e8cc:	d8c02785 	stb	r3,158(sp)
 183e8d0:	d8802a15 	stw	r2,168(sp)
 183e8d4:	dc802b17 	ldw	r18,172(sp)
 183e8d8:	d8002915 	stw	zero,164(sp)
 183e8dc:	07000b44 	movi	fp,45
 183e8e0:	003a7306 	br	183d2b0 <__alt_mem_mem_0+0xff81d2b0>
 183e8e4:	9080004c 	andi	r2,r18,1
 183e8e8:	1000941e 	bne	r2,zero,183eb3c <___svfprintf_internal_r+0x1f54>
 183e8ec:	d8802117 	ldw	r2,132(sp)
 183e8f0:	1405c83a 	sub	r2,r2,r16
 183e8f4:	d8803315 	stw	r2,204(sp)
 183e8f8:	b441161e 	bne	r22,r17,183ed54 <___svfprintf_internal_r+0x216c>
 183e8fc:	dd802617 	ldw	r22,152(sp)
 183e900:	00bfff44 	movi	r2,-3
 183e904:	b0801a16 	blt	r22,r2,183e970 <___svfprintf_internal_r+0x1d88>
 183e908:	d9402917 	ldw	r5,164(sp)
 183e90c:	2d801816 	blt	r5,r22,183e970 <___svfprintf_internal_r+0x1d88>
 183e910:	dd803215 	stw	r22,200(sp)
 183e914:	003f3a06 	br	183e600 <__alt_mem_mem_0+0xff81e600>
 183e918:	1025883a 	mov	r18,r2
 183e91c:	0039883a 	mov	fp,zero
 183e920:	00800084 	movi	r2,2
 183e924:	003fd606 	br	183e880 <__alt_mem_mem_0+0xff81e880>
 183e928:	9080004c 	andi	r2,r18,1
 183e92c:	103f191e 	bne	r2,zero,183e594 <__alt_mem_mem_0+0xff81e594>
 183e930:	d8802117 	ldw	r2,132(sp)
 183e934:	003f2806 	br	183e5d8 <__alt_mem_mem_0+0xff81e5d8>
 183e938:	01006134 	movhi	r4,388
 183e93c:	210d5b04 	addi	r4,r4,13676
 183e940:	d9002b15 	stw	r4,172(sp)
 183e944:	003c7c06 	br	183db38 <__alt_mem_mem_0+0xff81db38>
 183e948:	e005883a 	mov	r2,fp
 183e94c:	003f2206 	br	183e5d8 <__alt_mem_mem_0+0xff81e5d8>
 183e950:	d9402917 	ldw	r5,164(sp)
 183e954:	df002783 	ldbu	fp,158(sp)
 183e958:	dd002d15 	stw	r20,180(sp)
 183e95c:	d9402a15 	stw	r5,168(sp)
 183e960:	d9402e15 	stw	r5,184(sp)
 183e964:	d8002915 	stw	zero,164(sp)
 183e968:	d8003215 	stw	zero,200(sp)
 183e96c:	003a4c06 	br	183d2a0 <__alt_mem_mem_0+0xff81d2a0>
 183e970:	8c7fff84 	addi	r17,r17,-2
 183e974:	b5bfffc4 	addi	r22,r22,-1
 183e978:	dd802615 	stw	r22,152(sp)
 183e97c:	dc4022c5 	stb	r17,139(sp)
 183e980:	b000c316 	blt	r22,zero,183ec90 <___svfprintf_internal_r+0x20a8>
 183e984:	00800ac4 	movi	r2,43
 183e988:	d8802305 	stb	r2,140(sp)
 183e98c:	00800244 	movi	r2,9
 183e990:	15806e16 	blt	r2,r22,183eb4c <___svfprintf_internal_r+0x1f64>
 183e994:	00800c04 	movi	r2,48
 183e998:	b5800c04 	addi	r22,r22,48
 183e99c:	d8802345 	stb	r2,141(sp)
 183e9a0:	dd802385 	stb	r22,142(sp)
 183e9a4:	d88023c4 	addi	r2,sp,143
 183e9a8:	df0022c4 	addi	fp,sp,139
 183e9ac:	d8c03317 	ldw	r3,204(sp)
 183e9b0:	1739c83a 	sub	fp,r2,fp
 183e9b4:	d9003317 	ldw	r4,204(sp)
 183e9b8:	e0c7883a 	add	r3,fp,r3
 183e9bc:	df003b15 	stw	fp,236(sp)
 183e9c0:	d8c02e15 	stw	r3,184(sp)
 183e9c4:	00800044 	movi	r2,1
 183e9c8:	1100b70e 	bge	r2,r4,183eca8 <___svfprintf_internal_r+0x20c0>
 183e9cc:	d8c02e17 	ldw	r3,184(sp)
 183e9d0:	18c00044 	addi	r3,r3,1
 183e9d4:	d8c02e15 	stw	r3,184(sp)
 183e9d8:	1805883a 	mov	r2,r3
 183e9dc:	1800b016 	blt	r3,zero,183eca0 <___svfprintf_internal_r+0x20b8>
 183e9e0:	d8003215 	stw	zero,200(sp)
 183e9e4:	003f1006 	br	183e628 <__alt_mem_mem_0+0xff81e628>
 183e9e8:	d8802917 	ldw	r2,164(sp)
 183e9ec:	103ec71e 	bne	r2,zero,183e50c <__alt_mem_mem_0+0xff81e50c>
 183e9f0:	dc002915 	stw	r16,164(sp)
 183e9f4:	003ec506 	br	183e50c <__alt_mem_mem_0+0xff81e50c>
 183e9f8:	d9402c17 	ldw	r5,176(sp)
 183e9fc:	d9801e04 	addi	r6,sp,120
 183ea00:	9809883a 	mov	r4,r19
 183ea04:	183f0580 	call	183f058 <__ssprint_r>
 183ea08:	10395c1e 	bne	r2,zero,183cf7c <__alt_mem_mem_0+0xff81cf7c>
 183ea0c:	dc402617 	ldw	r17,152(sp)
 183ea10:	d8c02017 	ldw	r3,128(sp)
 183ea14:	d8801f17 	ldw	r2,124(sp)
 183ea18:	da000404 	addi	r8,sp,16
 183ea1c:	003e7706 	br	183e3fc <__alt_mem_mem_0+0xff81e3fc>
 183ea20:	582f883a 	mov	r23,r11
 183ea24:	d8002915 	stw	zero,164(sp)
 183ea28:	0038c406 	br	183cd3c <__alt_mem_mem_0+0xff81cd3c>
 183ea2c:	d8c02917 	ldw	r3,164(sp)
 183ea30:	d8802104 	addi	r2,sp,132
 183ea34:	d8800315 	stw	r2,12(sp)
 183ea38:	d9403617 	ldw	r5,216(sp)
 183ea3c:	d8802504 	addi	r2,sp,148
 183ea40:	d8800215 	stw	r2,8(sp)
 183ea44:	d8802604 	addi	r2,sp,152
 183ea48:	d8c00015 	stw	r3,0(sp)
 183ea4c:	9809883a 	mov	r4,r19
 183ea50:	d8800115 	stw	r2,4(sp)
 183ea54:	01c000c4 	movi	r7,3
 183ea58:	a00d883a 	mov	r6,r20
 183ea5c:	da003e15 	stw	r8,248(sp)
 183ea60:	18032380 	call	1803238 <_dtoa_r>
 183ea64:	d9002917 	ldw	r4,164(sp)
 183ea68:	da003e17 	ldw	r8,248(sp)
 183ea6c:	1021883a 	mov	r16,r2
 183ea70:	1139883a 	add	fp,r2,r4
 183ea74:	2007883a 	mov	r3,r4
 183ea78:	81000007 	ldb	r4,0(r16)
 183ea7c:	00800c04 	movi	r2,48
 183ea80:	20806f26 	beq	r4,r2,183ec40 <___svfprintf_internal_r+0x2058>
 183ea84:	d8c02617 	ldw	r3,152(sp)
 183ea88:	e0f9883a 	add	fp,fp,r3
 183ea8c:	003ec206 	br	183e598 <__alt_mem_mem_0+0xff81e598>
 183ea90:	00c00b44 	movi	r3,45
 183ea94:	2520003c 	xorhi	r20,r4,32768
 183ea98:	d8c02a05 	stb	r3,168(sp)
 183ea9c:	003ea106 	br	183e524 <__alt_mem_mem_0+0xff81e524>
 183eaa0:	d8c03217 	ldw	r3,200(sp)
 183eaa4:	00c0890e 	bge	zero,r3,183eccc <___svfprintf_internal_r+0x20e4>
 183eaa8:	00800044 	movi	r2,1
 183eaac:	d9003317 	ldw	r4,204(sp)
 183eab0:	1105883a 	add	r2,r2,r4
 183eab4:	d8802e15 	stw	r2,184(sp)
 183eab8:	10005f16 	blt	r2,zero,183ec38 <___svfprintf_internal_r+0x2050>
 183eabc:	044019c4 	movi	r17,103
 183eac0:	003ed906 	br	183e628 <__alt_mem_mem_0+0xff81e628>
 183eac4:	d9002917 	ldw	r4,164(sp)
 183eac8:	20c00044 	addi	r3,r4,1
 183eacc:	003e9c06 	br	183e540 <__alt_mem_mem_0+0xff81e540>
 183ead0:	d9002917 	ldw	r4,164(sp)
 183ead4:	00c0680e 	bge	zero,r3,183ec78 <___svfprintf_internal_r+0x2090>
 183ead8:	2000461e 	bne	r4,zero,183ebf4 <___svfprintf_internal_r+0x200c>
 183eadc:	9480004c 	andi	r18,r18,1
 183eae0:	9000441e 	bne	r18,zero,183ebf4 <___svfprintf_internal_r+0x200c>
 183eae4:	1805883a 	mov	r2,r3
 183eae8:	1800a016 	blt	r3,zero,183ed6c <___svfprintf_internal_r+0x2184>
 183eaec:	d8c03217 	ldw	r3,200(sp)
 183eaf0:	d8c02e15 	stw	r3,184(sp)
 183eaf4:	003ecc06 	br	183e628 <__alt_mem_mem_0+0xff81e628>
 183eaf8:	d9402917 	ldw	r5,164(sp)
 183eafc:	d8802104 	addi	r2,sp,132
 183eb00:	d8800315 	stw	r2,12(sp)
 183eb04:	d9400015 	stw	r5,0(sp)
 183eb08:	d8802504 	addi	r2,sp,148
 183eb0c:	d9403617 	ldw	r5,216(sp)
 183eb10:	d8800215 	stw	r2,8(sp)
 183eb14:	d8802604 	addi	r2,sp,152
 183eb18:	d8800115 	stw	r2,4(sp)
 183eb1c:	01c000c4 	movi	r7,3
 183eb20:	a00d883a 	mov	r6,r20
 183eb24:	9809883a 	mov	r4,r19
 183eb28:	da003e15 	stw	r8,248(sp)
 183eb2c:	18032380 	call	1803238 <_dtoa_r>
 183eb30:	d8c02917 	ldw	r3,164(sp)
 183eb34:	da003e17 	ldw	r8,248(sp)
 183eb38:	1021883a 	mov	r16,r2
 183eb3c:	00801184 	movi	r2,70
 183eb40:	80f9883a 	add	fp,r16,r3
 183eb44:	88bfcc26 	beq	r17,r2,183ea78 <__alt_mem_mem_0+0xff81ea78>
 183eb48:	003e9306 	br	183e598 <__alt_mem_mem_0+0xff81e598>
 183eb4c:	df0022c4 	addi	fp,sp,139
 183eb50:	dc002915 	stw	r16,164(sp)
 183eb54:	9829883a 	mov	r20,r19
 183eb58:	e021883a 	mov	r16,fp
 183eb5c:	4027883a 	mov	r19,r8
 183eb60:	b009883a 	mov	r4,r22
 183eb64:	01400284 	movi	r5,10
 183eb68:	180ac5c0 	call	180ac5c <__modsi3>
 183eb6c:	10800c04 	addi	r2,r2,48
 183eb70:	843fffc4 	addi	r16,r16,-1
 183eb74:	b009883a 	mov	r4,r22
 183eb78:	01400284 	movi	r5,10
 183eb7c:	80800005 	stb	r2,0(r16)
 183eb80:	180abd80 	call	180abd8 <__divsi3>
 183eb84:	102d883a 	mov	r22,r2
 183eb88:	00800244 	movi	r2,9
 183eb8c:	15bff416 	blt	r2,r22,183eb60 <__alt_mem_mem_0+0xff81eb60>
 183eb90:	9811883a 	mov	r8,r19
 183eb94:	b0800c04 	addi	r2,r22,48
 183eb98:	a027883a 	mov	r19,r20
 183eb9c:	8029883a 	mov	r20,r16
 183eba0:	a17fffc4 	addi	r5,r20,-1
 183eba4:	a0bfffc5 	stb	r2,-1(r20)
 183eba8:	dc002917 	ldw	r16,164(sp)
 183ebac:	2f00752e 	bgeu	r5,fp,183ed84 <___svfprintf_internal_r+0x219c>
 183ebb0:	d9c02384 	addi	r7,sp,142
 183ebb4:	3d0fc83a 	sub	r7,r7,r20
 183ebb8:	d9002344 	addi	r4,sp,141
 183ebbc:	e1cf883a 	add	r7,fp,r7
 183ebc0:	00000106 	br	183ebc8 <___svfprintf_internal_r+0x1fe0>
 183ebc4:	28800003 	ldbu	r2,0(r5)
 183ebc8:	20800005 	stb	r2,0(r4)
 183ebcc:	21000044 	addi	r4,r4,1
 183ebd0:	29400044 	addi	r5,r5,1
 183ebd4:	21fffb1e 	bne	r4,r7,183ebc4 <__alt_mem_mem_0+0xff81ebc4>
 183ebd8:	d8802304 	addi	r2,sp,140
 183ebdc:	1505c83a 	sub	r2,r2,r20
 183ebe0:	d8c02344 	addi	r3,sp,141
 183ebe4:	1885883a 	add	r2,r3,r2
 183ebe8:	003f7006 	br	183e9ac <__alt_mem_mem_0+0xff81e9ac>
 183ebec:	0005883a 	mov	r2,zero
 183ebf0:	003f0b06 	br	183e820 <__alt_mem_mem_0+0xff81e820>
 183ebf4:	d9002917 	ldw	r4,164(sp)
 183ebf8:	d8c03217 	ldw	r3,200(sp)
 183ebfc:	20800044 	addi	r2,r4,1
 183ec00:	1885883a 	add	r2,r3,r2
 183ec04:	d8802e15 	stw	r2,184(sp)
 183ec08:	103e870e 	bge	r2,zero,183e628 <__alt_mem_mem_0+0xff81e628>
 183ec0c:	0005883a 	mov	r2,zero
 183ec10:	003e8506 	br	183e628 <__alt_mem_mem_0+0xff81e628>
 183ec14:	01006134 	movhi	r4,388
 183ec18:	210d5b04 	addi	r4,r4,13676
 183ec1c:	d9002b15 	stw	r4,172(sp)
 183ec20:	003cc506 	br	183df38 <__alt_mem_mem_0+0xff81df38>
 183ec24:	d8c03217 	ldw	r3,200(sp)
 183ec28:	18c00044 	addi	r3,r3,1
 183ec2c:	d8c02e15 	stw	r3,184(sp)
 183ec30:	1805883a 	mov	r2,r3
 183ec34:	183fa10e 	bge	r3,zero,183eabc <__alt_mem_mem_0+0xff81eabc>
 183ec38:	0005883a 	mov	r2,zero
 183ec3c:	003f9f06 	br	183eabc <__alt_mem_mem_0+0xff81eabc>
 183ec40:	d9003617 	ldw	r4,216(sp)
 183ec44:	000d883a 	mov	r6,zero
 183ec48:	000f883a 	mov	r7,zero
 183ec4c:	a00b883a 	mov	r5,r20
 183ec50:	d8c03d15 	stw	r3,244(sp)
 183ec54:	da003e15 	stw	r8,248(sp)
 183ec58:	180bf200 	call	180bf20 <__eqdf2>
 183ec5c:	d8c03d17 	ldw	r3,244(sp)
 183ec60:	da003e17 	ldw	r8,248(sp)
 183ec64:	103f8726 	beq	r2,zero,183ea84 <__alt_mem_mem_0+0xff81ea84>
 183ec68:	00800044 	movi	r2,1
 183ec6c:	10c7c83a 	sub	r3,r2,r3
 183ec70:	d8c02615 	stw	r3,152(sp)
 183ec74:	003f8406 	br	183ea88 <__alt_mem_mem_0+0xff81ea88>
 183ec78:	20000e1e 	bne	r4,zero,183ecb4 <___svfprintf_internal_r+0x20cc>
 183ec7c:	9480004c 	andi	r18,r18,1
 183ec80:	90000c1e 	bne	r18,zero,183ecb4 <___svfprintf_internal_r+0x20cc>
 183ec84:	00800044 	movi	r2,1
 183ec88:	d8802e15 	stw	r2,184(sp)
 183ec8c:	003e6606 	br	183e628 <__alt_mem_mem_0+0xff81e628>
 183ec90:	00800b44 	movi	r2,45
 183ec94:	05adc83a 	sub	r22,zero,r22
 183ec98:	d8802305 	stb	r2,140(sp)
 183ec9c:	003f3b06 	br	183e98c <__alt_mem_mem_0+0xff81e98c>
 183eca0:	0005883a 	mov	r2,zero
 183eca4:	003f4e06 	br	183e9e0 <__alt_mem_mem_0+0xff81e9e0>
 183eca8:	90a4703a 	and	r18,r18,r2
 183ecac:	903f4a26 	beq	r18,zero,183e9d8 <__alt_mem_mem_0+0xff81e9d8>
 183ecb0:	003f4606 	br	183e9cc <__alt_mem_mem_0+0xff81e9cc>
 183ecb4:	d8c02917 	ldw	r3,164(sp)
 183ecb8:	18c00084 	addi	r3,r3,2
 183ecbc:	d8c02e15 	stw	r3,184(sp)
 183ecc0:	1805883a 	mov	r2,r3
 183ecc4:	183e580e 	bge	r3,zero,183e628 <__alt_mem_mem_0+0xff81e628>
 183ecc8:	003fd006 	br	183ec0c <__alt_mem_mem_0+0xff81ec0c>
 183eccc:	00800084 	movi	r2,2
 183ecd0:	10c5c83a 	sub	r2,r2,r3
 183ecd4:	003f7506 	br	183eaac <__alt_mem_mem_0+0xff81eaac>
 183ecd8:	d8802d17 	ldw	r2,180(sp)
 183ecdc:	d9002d17 	ldw	r4,180(sp)
 183ece0:	bc400043 	ldbu	r17,1(r23)
 183ece4:	10800017 	ldw	r2,0(r2)
 183ece8:	582f883a 	mov	r23,r11
 183ecec:	d8802915 	stw	r2,164(sp)
 183ecf0:	20800104 	addi	r2,r4,4
 183ecf4:	d9002917 	ldw	r4,164(sp)
 183ecf8:	d8802d15 	stw	r2,180(sp)
 183ecfc:	203df00e 	bge	r4,zero,183e4c0 <__alt_mem_mem_0+0xff81e4c0>
 183ed00:	8c403fcc 	andi	r17,r17,255
 183ed04:	00bfffc4 	movi	r2,-1
 183ed08:	8c40201c 	xori	r17,r17,128
 183ed0c:	d8802915 	stw	r2,164(sp)
 183ed10:	8c7fe004 	addi	r17,r17,-128
 183ed14:	00380806 	br	183cd38 <__alt_mem_mem_0+0xff81cd38>
 183ed18:	9080004c 	andi	r2,r18,1
 183ed1c:	0039883a 	mov	fp,zero
 183ed20:	10000726 	beq	r2,zero,183ed40 <___svfprintf_internal_r+0x2158>
 183ed24:	d8c02817 	ldw	r3,160(sp)
 183ed28:	dc001dc4 	addi	r16,sp,119
 183ed2c:	00800c04 	movi	r2,48
 183ed30:	1c07c83a 	sub	r3,r3,r16
 183ed34:	d8801dc5 	stb	r2,119(sp)
 183ed38:	d8c02e15 	stw	r3,184(sp)
 183ed3c:	00395206 	br	183d288 <__alt_mem_mem_0+0xff81d288>
 183ed40:	d8002e15 	stw	zero,184(sp)
 183ed44:	dc001e04 	addi	r16,sp,120
 183ed48:	00394f06 	br	183d288 <__alt_mem_mem_0+0xff81d288>
 183ed4c:	0005883a 	mov	r2,zero
 183ed50:	003e3206 	br	183e61c <__alt_mem_mem_0+0xff81e61c>
 183ed54:	dd802617 	ldw	r22,152(sp)
 183ed58:	003f0606 	br	183e974 <__alt_mem_mem_0+0xff81e974>
 183ed5c:	d9c02785 	stb	r7,158(sp)
 183ed60:	003a5106 	br	183d6a8 <__alt_mem_mem_0+0xff81d6a8>
 183ed64:	d9c02785 	stb	r7,158(sp)
 183ed68:	003a3706 	br	183d648 <__alt_mem_mem_0+0xff81d648>
 183ed6c:	0005883a 	mov	r2,zero
 183ed70:	003f5e06 	br	183eaec <__alt_mem_mem_0+0xff81eaec>
 183ed74:	d9c02785 	stb	r7,158(sp)
 183ed78:	00391706 	br	183d1d8 <__alt_mem_mem_0+0xff81d1d8>
 183ed7c:	d9c02785 	stb	r7,158(sp)
 183ed80:	0038e606 	br	183d11c <__alt_mem_mem_0+0xff81d11c>
 183ed84:	d8802344 	addi	r2,sp,141
 183ed88:	003f0806 	br	183e9ac <__alt_mem_mem_0+0xff81e9ac>
 183ed8c:	d9c02785 	stb	r7,158(sp)
 183ed90:	0038b706 	br	183d070 <__alt_mem_mem_0+0xff81d070>
 183ed94:	d9c02785 	stb	r7,158(sp)
 183ed98:	003adc06 	br	183d90c <__alt_mem_mem_0+0xff81d90c>
 183ed9c:	d9403917 	ldw	r5,228(sp)
 183eda0:	00800304 	movi	r2,12
 183eda4:	28800015 	stw	r2,0(r5)
 183eda8:	00bfffc4 	movi	r2,-1
 183edac:	00387806 	br	183cf90 <__alt_mem_mem_0+0xff81cf90>
 183edb0:	d9c02785 	stb	r7,158(sp)
 183edb4:	003abf06 	br	183d8b4 <__alt_mem_mem_0+0xff81d8b4>
 183edb8:	d9c02785 	stb	r7,158(sp)
 183edbc:	003a9b06 	br	183d82c <__alt_mem_mem_0+0xff81d82c>

0183edc0 <__register_exitproc>:
 183edc0:	defffa04 	addi	sp,sp,-24
 183edc4:	dc000315 	stw	r16,12(sp)
 183edc8:	04006134 	movhi	r16,388
 183edcc:	8414f304 	addi	r16,r16,21452
 183edd0:	80c00017 	ldw	r3,0(r16)
 183edd4:	dc400415 	stw	r17,16(sp)
 183edd8:	dfc00515 	stw	ra,20(sp)
 183eddc:	18805217 	ldw	r2,328(r3)
 183ede0:	2023883a 	mov	r17,r4
 183ede4:	10003726 	beq	r2,zero,183eec4 <__register_exitproc+0x104>
 183ede8:	10c00117 	ldw	r3,4(r2)
 183edec:	010007c4 	movi	r4,31
 183edf0:	20c00e16 	blt	r4,r3,183ee2c <__register_exitproc+0x6c>
 183edf4:	1a000044 	addi	r8,r3,1
 183edf8:	8800221e 	bne	r17,zero,183ee84 <__register_exitproc+0xc4>
 183edfc:	18c00084 	addi	r3,r3,2
 183ee00:	18c7883a 	add	r3,r3,r3
 183ee04:	18c7883a 	add	r3,r3,r3
 183ee08:	12000115 	stw	r8,4(r2)
 183ee0c:	10c7883a 	add	r3,r2,r3
 183ee10:	19400015 	stw	r5,0(r3)
 183ee14:	0005883a 	mov	r2,zero
 183ee18:	dfc00517 	ldw	ra,20(sp)
 183ee1c:	dc400417 	ldw	r17,16(sp)
 183ee20:	dc000317 	ldw	r16,12(sp)
 183ee24:	dec00604 	addi	sp,sp,24
 183ee28:	f800283a 	ret
 183ee2c:	00806134 	movhi	r2,388
 183ee30:	10b1af04 	addi	r2,r2,-14660
 183ee34:	10002626 	beq	r2,zero,183eed0 <__register_exitproc+0x110>
 183ee38:	01006404 	movi	r4,400
 183ee3c:	d9400015 	stw	r5,0(sp)
 183ee40:	d9800115 	stw	r6,4(sp)
 183ee44:	d9c00215 	stw	r7,8(sp)
 183ee48:	183c6bc0 	call	183c6bc <malloc>
 183ee4c:	d9400017 	ldw	r5,0(sp)
 183ee50:	d9800117 	ldw	r6,4(sp)
 183ee54:	d9c00217 	ldw	r7,8(sp)
 183ee58:	10001d26 	beq	r2,zero,183eed0 <__register_exitproc+0x110>
 183ee5c:	81000017 	ldw	r4,0(r16)
 183ee60:	10000115 	stw	zero,4(r2)
 183ee64:	02000044 	movi	r8,1
 183ee68:	22405217 	ldw	r9,328(r4)
 183ee6c:	0007883a 	mov	r3,zero
 183ee70:	12400015 	stw	r9,0(r2)
 183ee74:	20805215 	stw	r2,328(r4)
 183ee78:	10006215 	stw	zero,392(r2)
 183ee7c:	10006315 	stw	zero,396(r2)
 183ee80:	883fde26 	beq	r17,zero,183edfc <__alt_mem_mem_0+0xff81edfc>
 183ee84:	18c9883a 	add	r4,r3,r3
 183ee88:	2109883a 	add	r4,r4,r4
 183ee8c:	1109883a 	add	r4,r2,r4
 183ee90:	21802215 	stw	r6,136(r4)
 183ee94:	01800044 	movi	r6,1
 183ee98:	12406217 	ldw	r9,392(r2)
 183ee9c:	30cc983a 	sll	r6,r6,r3
 183eea0:	4992b03a 	or	r9,r9,r6
 183eea4:	12406215 	stw	r9,392(r2)
 183eea8:	21c04215 	stw	r7,264(r4)
 183eeac:	01000084 	movi	r4,2
 183eeb0:	893fd21e 	bne	r17,r4,183edfc <__alt_mem_mem_0+0xff81edfc>
 183eeb4:	11006317 	ldw	r4,396(r2)
 183eeb8:	218cb03a 	or	r6,r4,r6
 183eebc:	11806315 	stw	r6,396(r2)
 183eec0:	003fce06 	br	183edfc <__alt_mem_mem_0+0xff81edfc>
 183eec4:	18805304 	addi	r2,r3,332
 183eec8:	18805215 	stw	r2,328(r3)
 183eecc:	003fc606 	br	183ede8 <__alt_mem_mem_0+0xff81ede8>
 183eed0:	00bfffc4 	movi	r2,-1
 183eed4:	003fd006 	br	183ee18 <__alt_mem_mem_0+0xff81ee18>

0183eed8 <__call_exitprocs>:
 183eed8:	defff504 	addi	sp,sp,-44
 183eedc:	df000915 	stw	fp,36(sp)
 183eee0:	dd400615 	stw	r21,24(sp)
 183eee4:	dc800315 	stw	r18,12(sp)
 183eee8:	dfc00a15 	stw	ra,40(sp)
 183eeec:	ddc00815 	stw	r23,32(sp)
 183eef0:	dd800715 	stw	r22,28(sp)
 183eef4:	dd000515 	stw	r20,20(sp)
 183eef8:	dcc00415 	stw	r19,16(sp)
 183eefc:	dc400215 	stw	r17,8(sp)
 183ef00:	dc000115 	stw	r16,4(sp)
 183ef04:	d9000015 	stw	r4,0(sp)
 183ef08:	2839883a 	mov	fp,r5
 183ef0c:	04800044 	movi	r18,1
 183ef10:	057fffc4 	movi	r21,-1
 183ef14:	00806134 	movhi	r2,388
 183ef18:	1094f304 	addi	r2,r2,21452
 183ef1c:	12000017 	ldw	r8,0(r2)
 183ef20:	45005217 	ldw	r20,328(r8)
 183ef24:	44c05204 	addi	r19,r8,328
 183ef28:	a0001c26 	beq	r20,zero,183ef9c <__call_exitprocs+0xc4>
 183ef2c:	a0800117 	ldw	r2,4(r20)
 183ef30:	15ffffc4 	addi	r23,r2,-1
 183ef34:	b8000d16 	blt	r23,zero,183ef6c <__call_exitprocs+0x94>
 183ef38:	14000044 	addi	r16,r2,1
 183ef3c:	8421883a 	add	r16,r16,r16
 183ef40:	8421883a 	add	r16,r16,r16
 183ef44:	84402004 	addi	r17,r16,128
 183ef48:	a463883a 	add	r17,r20,r17
 183ef4c:	a421883a 	add	r16,r20,r16
 183ef50:	e0001e26 	beq	fp,zero,183efcc <__call_exitprocs+0xf4>
 183ef54:	80804017 	ldw	r2,256(r16)
 183ef58:	e0801c26 	beq	fp,r2,183efcc <__call_exitprocs+0xf4>
 183ef5c:	bdffffc4 	addi	r23,r23,-1
 183ef60:	843fff04 	addi	r16,r16,-4
 183ef64:	8c7fff04 	addi	r17,r17,-4
 183ef68:	bd7ff91e 	bne	r23,r21,183ef50 <__alt_mem_mem_0+0xff81ef50>
 183ef6c:	00806134 	movhi	r2,388
 183ef70:	10b1b404 	addi	r2,r2,-14640
 183ef74:	10000926 	beq	r2,zero,183ef9c <__call_exitprocs+0xc4>
 183ef78:	a0800117 	ldw	r2,4(r20)
 183ef7c:	1000301e 	bne	r2,zero,183f040 <__call_exitprocs+0x168>
 183ef80:	a0800017 	ldw	r2,0(r20)
 183ef84:	10003226 	beq	r2,zero,183f050 <__call_exitprocs+0x178>
 183ef88:	a009883a 	mov	r4,r20
 183ef8c:	98800015 	stw	r2,0(r19)
 183ef90:	183c6d00 	call	183c6d0 <free>
 183ef94:	9d000017 	ldw	r20,0(r19)
 183ef98:	a03fe41e 	bne	r20,zero,183ef2c <__alt_mem_mem_0+0xff81ef2c>
 183ef9c:	dfc00a17 	ldw	ra,40(sp)
 183efa0:	df000917 	ldw	fp,36(sp)
 183efa4:	ddc00817 	ldw	r23,32(sp)
 183efa8:	dd800717 	ldw	r22,28(sp)
 183efac:	dd400617 	ldw	r21,24(sp)
 183efb0:	dd000517 	ldw	r20,20(sp)
 183efb4:	dcc00417 	ldw	r19,16(sp)
 183efb8:	dc800317 	ldw	r18,12(sp)
 183efbc:	dc400217 	ldw	r17,8(sp)
 183efc0:	dc000117 	ldw	r16,4(sp)
 183efc4:	dec00b04 	addi	sp,sp,44
 183efc8:	f800283a 	ret
 183efcc:	a0800117 	ldw	r2,4(r20)
 183efd0:	80c00017 	ldw	r3,0(r16)
 183efd4:	10bfffc4 	addi	r2,r2,-1
 183efd8:	15c01426 	beq	r2,r23,183f02c <__call_exitprocs+0x154>
 183efdc:	80000015 	stw	zero,0(r16)
 183efe0:	183fde26 	beq	r3,zero,183ef5c <__alt_mem_mem_0+0xff81ef5c>
 183efe4:	95c8983a 	sll	r4,r18,r23
 183efe8:	a0806217 	ldw	r2,392(r20)
 183efec:	a5800117 	ldw	r22,4(r20)
 183eff0:	2084703a 	and	r2,r4,r2
 183eff4:	10000b26 	beq	r2,zero,183f024 <__call_exitprocs+0x14c>
 183eff8:	a0806317 	ldw	r2,396(r20)
 183effc:	2088703a 	and	r4,r4,r2
 183f000:	20000c1e 	bne	r4,zero,183f034 <__call_exitprocs+0x15c>
 183f004:	89400017 	ldw	r5,0(r17)
 183f008:	d9000017 	ldw	r4,0(sp)
 183f00c:	183ee83a 	callr	r3
 183f010:	a0800117 	ldw	r2,4(r20)
 183f014:	15bfbf1e 	bne	r2,r22,183ef14 <__alt_mem_mem_0+0xff81ef14>
 183f018:	98800017 	ldw	r2,0(r19)
 183f01c:	153fcf26 	beq	r2,r20,183ef5c <__alt_mem_mem_0+0xff81ef5c>
 183f020:	003fbc06 	br	183ef14 <__alt_mem_mem_0+0xff81ef14>
 183f024:	183ee83a 	callr	r3
 183f028:	003ff906 	br	183f010 <__alt_mem_mem_0+0xff81f010>
 183f02c:	a5c00115 	stw	r23,4(r20)
 183f030:	003feb06 	br	183efe0 <__alt_mem_mem_0+0xff81efe0>
 183f034:	89000017 	ldw	r4,0(r17)
 183f038:	183ee83a 	callr	r3
 183f03c:	003ff406 	br	183f010 <__alt_mem_mem_0+0xff81f010>
 183f040:	a0800017 	ldw	r2,0(r20)
 183f044:	a027883a 	mov	r19,r20
 183f048:	1029883a 	mov	r20,r2
 183f04c:	003fb606 	br	183ef28 <__alt_mem_mem_0+0xff81ef28>
 183f050:	0005883a 	mov	r2,zero
 183f054:	003ffb06 	br	183f044 <__alt_mem_mem_0+0xff81f044>

0183f058 <__ssprint_r>:
 183f058:	30800217 	ldw	r2,8(r6)
 183f05c:	defff604 	addi	sp,sp,-40
 183f060:	dc800215 	stw	r18,8(sp)
 183f064:	dfc00915 	stw	ra,36(sp)
 183f068:	df000815 	stw	fp,32(sp)
 183f06c:	ddc00715 	stw	r23,28(sp)
 183f070:	dd800615 	stw	r22,24(sp)
 183f074:	dd400515 	stw	r21,20(sp)
 183f078:	dd000415 	stw	r20,16(sp)
 183f07c:	dcc00315 	stw	r19,12(sp)
 183f080:	dc400115 	stw	r17,4(sp)
 183f084:	dc000015 	stw	r16,0(sp)
 183f088:	3025883a 	mov	r18,r6
 183f08c:	10005826 	beq	r2,zero,183f1f0 <__ssprint_r+0x198>
 183f090:	2027883a 	mov	r19,r4
 183f094:	35c00017 	ldw	r23,0(r6)
 183f098:	29000017 	ldw	r4,0(r5)
 183f09c:	28800217 	ldw	r2,8(r5)
 183f0a0:	2823883a 	mov	r17,r5
 183f0a4:	0039883a 	mov	fp,zero
 183f0a8:	0021883a 	mov	r16,zero
 183f0ac:	80003926 	beq	r16,zero,183f194 <__ssprint_r+0x13c>
 183f0b0:	102b883a 	mov	r21,r2
 183f0b4:	102d883a 	mov	r22,r2
 183f0b8:	80803a36 	bltu	r16,r2,183f1a4 <__ssprint_r+0x14c>
 183f0bc:	88c0030b 	ldhu	r3,12(r17)
 183f0c0:	1881200c 	andi	r2,r3,1152
 183f0c4:	10002626 	beq	r2,zero,183f160 <__ssprint_r+0x108>
 183f0c8:	88800517 	ldw	r2,20(r17)
 183f0cc:	89400417 	ldw	r5,16(r17)
 183f0d0:	81800044 	addi	r6,r16,1
 183f0d4:	108f883a 	add	r7,r2,r2
 183f0d8:	3885883a 	add	r2,r7,r2
 183f0dc:	100ed7fa 	srli	r7,r2,31
 183f0e0:	216dc83a 	sub	r22,r4,r5
 183f0e4:	3589883a 	add	r4,r6,r22
 183f0e8:	3885883a 	add	r2,r7,r2
 183f0ec:	102bd07a 	srai	r21,r2,1
 183f0f0:	a80d883a 	mov	r6,r21
 183f0f4:	a900022e 	bgeu	r21,r4,183f100 <__ssprint_r+0xa8>
 183f0f8:	202b883a 	mov	r21,r4
 183f0fc:	200d883a 	mov	r6,r4
 183f100:	18c1000c 	andi	r3,r3,1024
 183f104:	18002a26 	beq	r3,zero,183f1b0 <__ssprint_r+0x158>
 183f108:	300b883a 	mov	r5,r6
 183f10c:	9809883a 	mov	r4,r19
 183f110:	180575c0 	call	180575c <_malloc_r>
 183f114:	1029883a 	mov	r20,r2
 183f118:	10002c26 	beq	r2,zero,183f1cc <__ssprint_r+0x174>
 183f11c:	89400417 	ldw	r5,16(r17)
 183f120:	b00d883a 	mov	r6,r22
 183f124:	1009883a 	mov	r4,r2
 183f128:	180604c0 	call	180604c <memcpy>
 183f12c:	8880030b 	ldhu	r2,12(r17)
 183f130:	00fedfc4 	movi	r3,-1153
 183f134:	10c4703a 	and	r2,r2,r3
 183f138:	10802014 	ori	r2,r2,128
 183f13c:	8880030d 	sth	r2,12(r17)
 183f140:	a589883a 	add	r4,r20,r22
 183f144:	adadc83a 	sub	r22,r21,r22
 183f148:	8d400515 	stw	r21,20(r17)
 183f14c:	8d800215 	stw	r22,8(r17)
 183f150:	8d000415 	stw	r20,16(r17)
 183f154:	89000015 	stw	r4,0(r17)
 183f158:	802b883a 	mov	r21,r16
 183f15c:	802d883a 	mov	r22,r16
 183f160:	b00d883a 	mov	r6,r22
 183f164:	e00b883a 	mov	r5,fp
 183f168:	18096c80 	call	18096c8 <memmove>
 183f16c:	88800217 	ldw	r2,8(r17)
 183f170:	89000017 	ldw	r4,0(r17)
 183f174:	90c00217 	ldw	r3,8(r18)
 183f178:	1545c83a 	sub	r2,r2,r21
 183f17c:	2589883a 	add	r4,r4,r22
 183f180:	88800215 	stw	r2,8(r17)
 183f184:	89000015 	stw	r4,0(r17)
 183f188:	1c21c83a 	sub	r16,r3,r16
 183f18c:	94000215 	stw	r16,8(r18)
 183f190:	80001726 	beq	r16,zero,183f1f0 <__ssprint_r+0x198>
 183f194:	bf000017 	ldw	fp,0(r23)
 183f198:	bc000117 	ldw	r16,4(r23)
 183f19c:	bdc00204 	addi	r23,r23,8
 183f1a0:	003fc206 	br	183f0ac <__alt_mem_mem_0+0xff81f0ac>
 183f1a4:	802b883a 	mov	r21,r16
 183f1a8:	802d883a 	mov	r22,r16
 183f1ac:	003fec06 	br	183f160 <__alt_mem_mem_0+0xff81f160>
 183f1b0:	9809883a 	mov	r4,r19
 183f1b4:	18098840 	call	1809884 <_realloc_r>
 183f1b8:	1029883a 	mov	r20,r2
 183f1bc:	103fe01e 	bne	r2,zero,183f140 <__alt_mem_mem_0+0xff81f140>
 183f1c0:	89400417 	ldw	r5,16(r17)
 183f1c4:	9809883a 	mov	r4,r19
 183f1c8:	180502c0 	call	180502c <_free_r>
 183f1cc:	88c0030b 	ldhu	r3,12(r17)
 183f1d0:	00800304 	movi	r2,12
 183f1d4:	98800015 	stw	r2,0(r19)
 183f1d8:	18c01014 	ori	r3,r3,64
 183f1dc:	88c0030d 	sth	r3,12(r17)
 183f1e0:	00bfffc4 	movi	r2,-1
 183f1e4:	90000215 	stw	zero,8(r18)
 183f1e8:	90000115 	stw	zero,4(r18)
 183f1ec:	00000206 	br	183f1f8 <__ssprint_r+0x1a0>
 183f1f0:	90000115 	stw	zero,4(r18)
 183f1f4:	0005883a 	mov	r2,zero
 183f1f8:	dfc00917 	ldw	ra,36(sp)
 183f1fc:	df000817 	ldw	fp,32(sp)
 183f200:	ddc00717 	ldw	r23,28(sp)
 183f204:	dd800617 	ldw	r22,24(sp)
 183f208:	dd400517 	ldw	r21,20(sp)
 183f20c:	dd000417 	ldw	r20,16(sp)
 183f210:	dcc00317 	ldw	r19,12(sp)
 183f214:	dc800217 	ldw	r18,8(sp)
 183f218:	dc400117 	ldw	r17,4(sp)
 183f21c:	dc000017 	ldw	r16,0(sp)
 183f220:	dec00a04 	addi	sp,sp,40
 183f224:	f800283a 	ret

0183f228 <___svfiprintf_internal_r>:
 183f228:	2880030b 	ldhu	r2,12(r5)
 183f22c:	deffc804 	addi	sp,sp,-224
 183f230:	dcc03115 	stw	r19,196(sp)
 183f234:	dfc03715 	stw	ra,220(sp)
 183f238:	df003615 	stw	fp,216(sp)
 183f23c:	ddc03515 	stw	r23,212(sp)
 183f240:	dd803415 	stw	r22,208(sp)
 183f244:	dd403315 	stw	r21,204(sp)
 183f248:	dd003215 	stw	r20,200(sp)
 183f24c:	dc803015 	stw	r18,192(sp)
 183f250:	dc402f15 	stw	r17,188(sp)
 183f254:	dc002e15 	stw	r16,184(sp)
 183f258:	d9402715 	stw	r5,156(sp)
 183f25c:	d9002a15 	stw	r4,168(sp)
 183f260:	1080200c 	andi	r2,r2,128
 183f264:	d9c02315 	stw	r7,140(sp)
 183f268:	3027883a 	mov	r19,r6
 183f26c:	10000226 	beq	r2,zero,183f278 <___svfiprintf_internal_r+0x50>
 183f270:	28800417 	ldw	r2,16(r5)
 183f274:	10041d26 	beq	r2,zero,18402ec <___svfiprintf_internal_r+0x10c4>
 183f278:	dac01a04 	addi	r11,sp,104
 183f27c:	dac01e15 	stw	r11,120(sp)
 183f280:	d8801e17 	ldw	r2,120(sp)
 183f284:	dac019c4 	addi	r11,sp,103
 183f288:	dd402a17 	ldw	r21,168(sp)
 183f28c:	ddc02717 	ldw	r23,156(sp)
 183f290:	05806134 	movhi	r22,388
 183f294:	05006134 	movhi	r20,388
 183f298:	dac01f15 	stw	r11,124(sp)
 183f29c:	12d7c83a 	sub	r11,r2,r11
 183f2a0:	b58d6704 	addi	r22,r22,13724
 183f2a4:	a50d6304 	addi	r20,r20,13708
 183f2a8:	dec01a15 	stw	sp,104(sp)
 183f2ac:	d8001c15 	stw	zero,112(sp)
 183f2b0:	d8001b15 	stw	zero,108(sp)
 183f2b4:	d811883a 	mov	r8,sp
 183f2b8:	d8002915 	stw	zero,164(sp)
 183f2bc:	d8002515 	stw	zero,148(sp)
 183f2c0:	dac02b15 	stw	r11,172(sp)
 183f2c4:	98800007 	ldb	r2,0(r19)
 183f2c8:	1002dd26 	beq	r2,zero,183fe40 <___svfiprintf_internal_r+0xc18>
 183f2cc:	00c00944 	movi	r3,37
 183f2d0:	9823883a 	mov	r17,r19
 183f2d4:	10c0021e 	bne	r2,r3,183f2e0 <___svfiprintf_internal_r+0xb8>
 183f2d8:	00001406 	br	183f32c <___svfiprintf_internal_r+0x104>
 183f2dc:	10c00326 	beq	r2,r3,183f2ec <___svfiprintf_internal_r+0xc4>
 183f2e0:	8c400044 	addi	r17,r17,1
 183f2e4:	88800007 	ldb	r2,0(r17)
 183f2e8:	103ffc1e 	bne	r2,zero,183f2dc <__alt_mem_mem_0+0xff81f2dc>
 183f2ec:	8ce1c83a 	sub	r16,r17,r19
 183f2f0:	80000e26 	beq	r16,zero,183f32c <___svfiprintf_internal_r+0x104>
 183f2f4:	d8c01c17 	ldw	r3,112(sp)
 183f2f8:	d8801b17 	ldw	r2,108(sp)
 183f2fc:	44c00015 	stw	r19,0(r8)
 183f300:	1c07883a 	add	r3,r3,r16
 183f304:	10800044 	addi	r2,r2,1
 183f308:	d8c01c15 	stw	r3,112(sp)
 183f30c:	44000115 	stw	r16,4(r8)
 183f310:	d8801b15 	stw	r2,108(sp)
 183f314:	00c001c4 	movi	r3,7
 183f318:	18831e16 	blt	r3,r2,183ff94 <___svfiprintf_internal_r+0xd6c>
 183f31c:	42000204 	addi	r8,r8,8
 183f320:	dac02517 	ldw	r11,148(sp)
 183f324:	5c17883a 	add	r11,r11,r16
 183f328:	dac02515 	stw	r11,148(sp)
 183f32c:	88800007 	ldb	r2,0(r17)
 183f330:	1002c526 	beq	r2,zero,183fe48 <___svfiprintf_internal_r+0xc20>
 183f334:	88c00047 	ldb	r3,1(r17)
 183f338:	8cc00044 	addi	r19,r17,1
 183f33c:	d8001d85 	stb	zero,118(sp)
 183f340:	0009883a 	mov	r4,zero
 183f344:	000f883a 	mov	r7,zero
 183f348:	043fffc4 	movi	r16,-1
 183f34c:	d8002415 	stw	zero,144(sp)
 183f350:	0025883a 	mov	r18,zero
 183f354:	01401604 	movi	r5,88
 183f358:	01800244 	movi	r6,9
 183f35c:	02800a84 	movi	r10,42
 183f360:	02401b04 	movi	r9,108
 183f364:	9cc00044 	addi	r19,r19,1
 183f368:	18bff804 	addi	r2,r3,-32
 183f36c:	2881dd36 	bltu	r5,r2,183fae4 <___svfiprintf_internal_r+0x8bc>
 183f370:	100490ba 	slli	r2,r2,2
 183f374:	02c06134 	movhi	r11,388
 183f378:	5afce204 	addi	r11,r11,-3192
 183f37c:	12c5883a 	add	r2,r2,r11
 183f380:	10800017 	ldw	r2,0(r2)
 183f384:	1000683a 	jmp	r2
 183f388:	0183f584 	movi	r6,4054
 183f38c:	0183fae4 	muli	r6,zero,4075
 183f390:	0183fae4 	muli	r6,zero,4075
 183f394:	0183f578 	rdprs	r6,zero,4053
 183f398:	0183fae4 	muli	r6,zero,4075
 183f39c:	0183fae4 	muli	r6,zero,4075
 183f3a0:	0183fae4 	muli	r6,zero,4075
 183f3a4:	0183fae4 	muli	r6,zero,4075
 183f3a8:	0183fae4 	muli	r6,zero,4075
 183f3ac:	0183fae4 	muli	r6,zero,4075
 183f3b0:	0183f4ec 	andhi	r6,zero,4051
 183f3b4:	0183f6c8 	cmpgei	r6,zero,4059
 183f3b8:	0183fae4 	muli	r6,zero,4075
 183f3bc:	0183f518 	cmpnei	r6,zero,4052
 183f3c0:	0183fb18 	cmpnei	r6,zero,4076
 183f3c4:	0183fae4 	muli	r6,zero,4075
 183f3c8:	0183fb0c 	andi	r6,zero,4076
 183f3cc:	0183faac 	andhi	r6,zero,4074
 183f3d0:	0183faac 	andhi	r6,zero,4074
 183f3d4:	0183faac 	andhi	r6,zero,4074
 183f3d8:	0183faac 	andhi	r6,zero,4074
 183f3dc:	0183faac 	andhi	r6,zero,4074
 183f3e0:	0183faac 	andhi	r6,zero,4074
 183f3e4:	0183faac 	andhi	r6,zero,4074
 183f3e8:	0183faac 	andhi	r6,zero,4074
 183f3ec:	0183faac 	andhi	r6,zero,4074
 183f3f0:	0183fae4 	muli	r6,zero,4075
 183f3f4:	0183fae4 	muli	r6,zero,4075
 183f3f8:	0183fae4 	muli	r6,zero,4075
 183f3fc:	0183fae4 	muli	r6,zero,4075
 183f400:	0183fae4 	muli	r6,zero,4075
 183f404:	0183fae4 	muli	r6,zero,4075
 183f408:	0183fae4 	muli	r6,zero,4075
 183f40c:	0183fae4 	muli	r6,zero,4075
 183f410:	0183fae4 	muli	r6,zero,4075
 183f414:	0183fae4 	muli	r6,zero,4075
 183f418:	0183fa48 	cmpgei	r6,zero,4073
 183f41c:	0183fae4 	muli	r6,zero,4075
 183f420:	0183fae4 	muli	r6,zero,4075
 183f424:	0183fae4 	muli	r6,zero,4075
 183f428:	0183fae4 	muli	r6,zero,4075
 183f42c:	0183fae4 	muli	r6,zero,4075
 183f430:	0183fae4 	muli	r6,zero,4075
 183f434:	0183fae4 	muli	r6,zero,4075
 183f438:	0183fae4 	muli	r6,zero,4075
 183f43c:	0183fae4 	muli	r6,zero,4075
 183f440:	0183fae4 	muli	r6,zero,4075
 183f444:	0183fbc0 	call	183fbc <__alt_mem_tse_descriptor_memory_0+0x183fbc>
 183f448:	0183fae4 	muli	r6,zero,4075
 183f44c:	0183fae4 	muli	r6,zero,4075
 183f450:	0183fae4 	muli	r6,zero,4075
 183f454:	0183fae4 	muli	r6,zero,4075
 183f458:	0183fae4 	muli	r6,zero,4075
 183f45c:	0183fb58 	cmpnei	r6,zero,4077
 183f460:	0183fae4 	muli	r6,zero,4075
 183f464:	0183fae4 	muli	r6,zero,4075
 183f468:	0183f88c 	andi	r6,zero,4066
 183f46c:	0183fae4 	muli	r6,zero,4075
 183f470:	0183fae4 	muli	r6,zero,4075
 183f474:	0183fae4 	muli	r6,zero,4075
 183f478:	0183fae4 	muli	r6,zero,4075
 183f47c:	0183fae4 	muli	r6,zero,4075
 183f480:	0183fae4 	muli	r6,zero,4075
 183f484:	0183fae4 	muli	r6,zero,4075
 183f488:	0183fae4 	muli	r6,zero,4075
 183f48c:	0183fae4 	muli	r6,zero,4075
 183f490:	0183fae4 	muli	r6,zero,4075
 183f494:	0183f77c 	xorhi	r6,zero,4061
 183f498:	0183f928 	cmpgeui	r6,zero,4068
 183f49c:	0183fae4 	muli	r6,zero,4075
 183f4a0:	0183fae4 	muli	r6,zero,4075
 183f4a4:	0183fae4 	muli	r6,zero,4075
 183f4a8:	0183f91c 	xori	r6,zero,4068
 183f4ac:	0183f928 	cmpgeui	r6,zero,4068
 183f4b0:	0183fae4 	muli	r6,zero,4075
 183f4b4:	0183fae4 	muli	r6,zero,4075
 183f4b8:	0183f90c 	andi	r6,zero,4068
 183f4bc:	0183fae4 	muli	r6,zero,4075
 183f4c0:	0183f8d0 	cmplti	r6,zero,4067
 183f4c4:	0183f6d8 	cmpnei	r6,zero,4059
 183f4c8:	0183f524 	muli	r6,zero,4052
 183f4cc:	0183fa3c 	xorhi	r6,zero,4072
 183f4d0:	0183fae4 	muli	r6,zero,4075
 183f4d4:	0183f9f0 	cmpltui	r6,zero,4071
 183f4d8:	0183fae4 	muli	r6,zero,4075
 183f4dc:	0183f648 	cmpgei	r6,zero,4057
 183f4e0:	0183fae4 	muli	r6,zero,4075
 183f4e4:	0183fae4 	muli	r6,zero,4075
 183f4e8:	0183f5a4 	muli	r6,zero,4054
 183f4ec:	dac02317 	ldw	r11,140(sp)
 183f4f0:	5ac00017 	ldw	r11,0(r11)
 183f4f4:	dac02415 	stw	r11,144(sp)
 183f4f8:	dac02317 	ldw	r11,140(sp)
 183f4fc:	58800104 	addi	r2,r11,4
 183f500:	dac02417 	ldw	r11,144(sp)
 183f504:	5802e90e 	bge	r11,zero,18400ac <___svfiprintf_internal_r+0xe84>
 183f508:	dac02417 	ldw	r11,144(sp)
 183f50c:	d8802315 	stw	r2,140(sp)
 183f510:	02d7c83a 	sub	r11,zero,r11
 183f514:	dac02415 	stw	r11,144(sp)
 183f518:	94800114 	ori	r18,r18,4
 183f51c:	98c00007 	ldb	r3,0(r19)
 183f520:	003f9006 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 183f524:	00800c04 	movi	r2,48
 183f528:	dac02317 	ldw	r11,140(sp)
 183f52c:	d8801d05 	stb	r2,116(sp)
 183f530:	00801e04 	movi	r2,120
 183f534:	d8801d45 	stb	r2,117(sp)
 183f538:	d8001d85 	stb	zero,118(sp)
 183f53c:	58c00104 	addi	r3,r11,4
 183f540:	5f000017 	ldw	fp,0(r11)
 183f544:	0013883a 	mov	r9,zero
 183f548:	90800094 	ori	r2,r18,2
 183f54c:	80032b16 	blt	r16,zero,18401fc <___svfiprintf_internal_r+0xfd4>
 183f550:	00bfdfc4 	movi	r2,-129
 183f554:	90a4703a 	and	r18,r18,r2
 183f558:	d8c02315 	stw	r3,140(sp)
 183f55c:	94800094 	ori	r18,r18,2
 183f560:	e002dc26 	beq	fp,zero,18400d4 <___svfiprintf_internal_r+0xeac>
 183f564:	01006134 	movhi	r4,388
 183f568:	21028504 	addi	r4,r4,2580
 183f56c:	0015883a 	mov	r10,zero
 183f570:	d9002915 	stw	r4,164(sp)
 183f574:	00002306 	br	183f604 <___svfiprintf_internal_r+0x3dc>
 183f578:	94800054 	ori	r18,r18,1
 183f57c:	98c00007 	ldb	r3,0(r19)
 183f580:	003f7806 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 183f584:	38803fcc 	andi	r2,r7,255
 183f588:	1080201c 	xori	r2,r2,128
 183f58c:	10bfe004 	addi	r2,r2,-128
 183f590:	1002f31e 	bne	r2,zero,1840160 <___svfiprintf_internal_r+0xf38>
 183f594:	01000044 	movi	r4,1
 183f598:	01c00804 	movi	r7,32
 183f59c:	98c00007 	ldb	r3,0(r19)
 183f5a0:	003f7006 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 183f5a4:	21003fcc 	andi	r4,r4,255
 183f5a8:	2003aa1e 	bne	r4,zero,1840454 <___svfiprintf_internal_r+0x122c>
 183f5ac:	00806134 	movhi	r2,388
 183f5b0:	10828504 	addi	r2,r2,2580
 183f5b4:	d8802915 	stw	r2,164(sp)
 183f5b8:	9080080c 	andi	r2,r18,32
 183f5bc:	1000ba26 	beq	r2,zero,183f8a8 <___svfiprintf_internal_r+0x680>
 183f5c0:	dac02317 	ldw	r11,140(sp)
 183f5c4:	5f000017 	ldw	fp,0(r11)
 183f5c8:	5a400117 	ldw	r9,4(r11)
 183f5cc:	5ac00204 	addi	r11,r11,8
 183f5d0:	dac02315 	stw	r11,140(sp)
 183f5d4:	9080004c 	andi	r2,r18,1
 183f5d8:	10029026 	beq	r2,zero,184001c <___svfiprintf_internal_r+0xdf4>
 183f5dc:	e244b03a 	or	r2,fp,r9
 183f5e0:	1002d41e 	bne	r2,zero,1840134 <___svfiprintf_internal_r+0xf0c>
 183f5e4:	d8001d85 	stb	zero,118(sp)
 183f5e8:	80030b16 	blt	r16,zero,1840218 <___svfiprintf_internal_r+0xff0>
 183f5ec:	00bfdfc4 	movi	r2,-129
 183f5f0:	90a4703a 	and	r18,r18,r2
 183f5f4:	0015883a 	mov	r10,zero
 183f5f8:	80002426 	beq	r16,zero,183f68c <___svfiprintf_internal_r+0x464>
 183f5fc:	0039883a 	mov	fp,zero
 183f600:	0013883a 	mov	r9,zero
 183f604:	d9002917 	ldw	r4,164(sp)
 183f608:	dc401a04 	addi	r17,sp,104
 183f60c:	e08003cc 	andi	r2,fp,15
 183f610:	4806973a 	slli	r3,r9,28
 183f614:	2085883a 	add	r2,r4,r2
 183f618:	e038d13a 	srli	fp,fp,4
 183f61c:	10800003 	ldbu	r2,0(r2)
 183f620:	4812d13a 	srli	r9,r9,4
 183f624:	8c7fffc4 	addi	r17,r17,-1
 183f628:	1f38b03a 	or	fp,r3,fp
 183f62c:	88800005 	stb	r2,0(r17)
 183f630:	e244b03a 	or	r2,fp,r9
 183f634:	103ff51e 	bne	r2,zero,183f60c <__alt_mem_mem_0+0xff81f60c>
 183f638:	dac01e17 	ldw	r11,120(sp)
 183f63c:	5c57c83a 	sub	r11,r11,r17
 183f640:	dac02115 	stw	r11,132(sp)
 183f644:	00001406 	br	183f698 <___svfiprintf_internal_r+0x470>
 183f648:	21003fcc 	andi	r4,r4,255
 183f64c:	2003741e 	bne	r4,zero,1840420 <___svfiprintf_internal_r+0x11f8>
 183f650:	9080080c 	andi	r2,r18,32
 183f654:	10014526 	beq	r2,zero,183fb6c <___svfiprintf_internal_r+0x944>
 183f658:	dac02317 	ldw	r11,140(sp)
 183f65c:	d8001d85 	stb	zero,118(sp)
 183f660:	58c00204 	addi	r3,r11,8
 183f664:	5f000017 	ldw	fp,0(r11)
 183f668:	5a400117 	ldw	r9,4(r11)
 183f66c:	8002d916 	blt	r16,zero,18401d4 <___svfiprintf_internal_r+0xfac>
 183f670:	013fdfc4 	movi	r4,-129
 183f674:	e244b03a 	or	r2,fp,r9
 183f678:	d8c02315 	stw	r3,140(sp)
 183f67c:	9124703a 	and	r18,r18,r4
 183f680:	0015883a 	mov	r10,zero
 183f684:	1000b91e 	bne	r2,zero,183f96c <___svfiprintf_internal_r+0x744>
 183f688:	8002e61e 	bne	r16,zero,1840224 <___svfiprintf_internal_r+0xffc>
 183f68c:	0021883a 	mov	r16,zero
 183f690:	d8002115 	stw	zero,132(sp)
 183f694:	dc401a04 	addi	r17,sp,104
 183f698:	d8c02117 	ldw	r3,132(sp)
 183f69c:	dc002015 	stw	r16,128(sp)
 183f6a0:	80c0010e 	bge	r16,r3,183f6a8 <___svfiprintf_internal_r+0x480>
 183f6a4:	d8c02015 	stw	r3,128(sp)
 183f6a8:	52803fcc 	andi	r10,r10,255
 183f6ac:	5280201c 	xori	r10,r10,128
 183f6b0:	52bfe004 	addi	r10,r10,-128
 183f6b4:	50003c26 	beq	r10,zero,183f7a8 <___svfiprintf_internal_r+0x580>
 183f6b8:	dac02017 	ldw	r11,128(sp)
 183f6bc:	5ac00044 	addi	r11,r11,1
 183f6c0:	dac02015 	stw	r11,128(sp)
 183f6c4:	00003806 	br	183f7a8 <___svfiprintf_internal_r+0x580>
 183f6c8:	01000044 	movi	r4,1
 183f6cc:	01c00ac4 	movi	r7,43
 183f6d0:	98c00007 	ldb	r3,0(r19)
 183f6d4:	003f2306 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 183f6d8:	21003fcc 	andi	r4,r4,255
 183f6dc:	2003481e 	bne	r4,zero,1840400 <___svfiprintf_internal_r+0x11d8>
 183f6e0:	9080080c 	andi	r2,r18,32
 183f6e4:	10013b26 	beq	r2,zero,183fbd4 <___svfiprintf_internal_r+0x9ac>
 183f6e8:	dac02317 	ldw	r11,140(sp)
 183f6ec:	d8001d85 	stb	zero,118(sp)
 183f6f0:	58800204 	addi	r2,r11,8
 183f6f4:	5f000017 	ldw	fp,0(r11)
 183f6f8:	5a400117 	ldw	r9,4(r11)
 183f6fc:	8002a816 	blt	r16,zero,18401a0 <___svfiprintf_internal_r+0xf78>
 183f700:	013fdfc4 	movi	r4,-129
 183f704:	e246b03a 	or	r3,fp,r9
 183f708:	d8802315 	stw	r2,140(sp)
 183f70c:	9124703a 	and	r18,r18,r4
 183f710:	18013c26 	beq	r3,zero,183fc04 <___svfiprintf_internal_r+0x9dc>
 183f714:	0015883a 	mov	r10,zero
 183f718:	dc401a04 	addi	r17,sp,104
 183f71c:	e006d0fa 	srli	r3,fp,3
 183f720:	4808977a 	slli	r4,r9,29
 183f724:	4812d0fa 	srli	r9,r9,3
 183f728:	e70001cc 	andi	fp,fp,7
 183f72c:	e0800c04 	addi	r2,fp,48
 183f730:	8c7fffc4 	addi	r17,r17,-1
 183f734:	20f8b03a 	or	fp,r4,r3
 183f738:	88800005 	stb	r2,0(r17)
 183f73c:	e246b03a 	or	r3,fp,r9
 183f740:	183ff61e 	bne	r3,zero,183f71c <__alt_mem_mem_0+0xff81f71c>
 183f744:	90c0004c 	andi	r3,r18,1
 183f748:	1800a526 	beq	r3,zero,183f9e0 <___svfiprintf_internal_r+0x7b8>
 183f74c:	10803fcc 	andi	r2,r2,255
 183f750:	1080201c 	xori	r2,r2,128
 183f754:	10bfe004 	addi	r2,r2,-128
 183f758:	00c00c04 	movi	r3,48
 183f75c:	10ffb626 	beq	r2,r3,183f638 <__alt_mem_mem_0+0xff81f638>
 183f760:	88ffffc5 	stb	r3,-1(r17)
 183f764:	d8c01e17 	ldw	r3,120(sp)
 183f768:	88bfffc4 	addi	r2,r17,-1
 183f76c:	1023883a 	mov	r17,r2
 183f770:	1887c83a 	sub	r3,r3,r2
 183f774:	d8c02115 	stw	r3,132(sp)
 183f778:	003fc706 	br	183f698 <__alt_mem_mem_0+0xff81f698>
 183f77c:	dac02317 	ldw	r11,140(sp)
 183f780:	00c00044 	movi	r3,1
 183f784:	d8c02015 	stw	r3,128(sp)
 183f788:	58800017 	ldw	r2,0(r11)
 183f78c:	5ac00104 	addi	r11,r11,4
 183f790:	d8001d85 	stb	zero,118(sp)
 183f794:	d8801005 	stb	r2,64(sp)
 183f798:	dac02315 	stw	r11,140(sp)
 183f79c:	d8c02115 	stw	r3,132(sp)
 183f7a0:	dc401004 	addi	r17,sp,64
 183f7a4:	0021883a 	mov	r16,zero
 183f7a8:	90c0008c 	andi	r3,r18,2
 183f7ac:	d8c02215 	stw	r3,136(sp)
 183f7b0:	18000326 	beq	r3,zero,183f7c0 <___svfiprintf_internal_r+0x598>
 183f7b4:	dac02017 	ldw	r11,128(sp)
 183f7b8:	5ac00084 	addi	r11,r11,2
 183f7bc:	dac02015 	stw	r11,128(sp)
 183f7c0:	90c0210c 	andi	r3,r18,132
 183f7c4:	d8c02615 	stw	r3,152(sp)
 183f7c8:	1801131e 	bne	r3,zero,183fc18 <___svfiprintf_internal_r+0x9f0>
 183f7cc:	dac02417 	ldw	r11,144(sp)
 183f7d0:	d8c02017 	ldw	r3,128(sp)
 183f7d4:	58f9c83a 	sub	fp,r11,r3
 183f7d8:	07010f0e 	bge	zero,fp,183fc18 <___svfiprintf_internal_r+0x9f0>
 183f7dc:	02400404 	movi	r9,16
 183f7e0:	d8c01c17 	ldw	r3,112(sp)
 183f7e4:	d8801b17 	ldw	r2,108(sp)
 183f7e8:	4f02d60e 	bge	r9,fp,1840344 <___svfiprintf_internal_r+0x111c>
 183f7ec:	01406134 	movhi	r5,388
 183f7f0:	294d6704 	addi	r5,r5,13724
 183f7f4:	d9402815 	stw	r5,160(sp)
 183f7f8:	028001c4 	movi	r10,7
 183f7fc:	00000306 	br	183f80c <___svfiprintf_internal_r+0x5e4>
 183f800:	e73ffc04 	addi	fp,fp,-16
 183f804:	42000204 	addi	r8,r8,8
 183f808:	4f00150e 	bge	r9,fp,183f860 <___svfiprintf_internal_r+0x638>
 183f80c:	18c00404 	addi	r3,r3,16
 183f810:	10800044 	addi	r2,r2,1
 183f814:	45800015 	stw	r22,0(r8)
 183f818:	42400115 	stw	r9,4(r8)
 183f81c:	d8c01c15 	stw	r3,112(sp)
 183f820:	d8801b15 	stw	r2,108(sp)
 183f824:	50bff60e 	bge	r10,r2,183f800 <__alt_mem_mem_0+0xff81f800>
 183f828:	d9801a04 	addi	r6,sp,104
 183f82c:	b80b883a 	mov	r5,r23
 183f830:	a809883a 	mov	r4,r21
 183f834:	da402c15 	stw	r9,176(sp)
 183f838:	da802d15 	stw	r10,180(sp)
 183f83c:	183f0580 	call	183f058 <__ssprint_r>
 183f840:	da402c17 	ldw	r9,176(sp)
 183f844:	da802d17 	ldw	r10,180(sp)
 183f848:	1001851e 	bne	r2,zero,183fe60 <___svfiprintf_internal_r+0xc38>
 183f84c:	e73ffc04 	addi	fp,fp,-16
 183f850:	d8c01c17 	ldw	r3,112(sp)
 183f854:	d8801b17 	ldw	r2,108(sp)
 183f858:	d811883a 	mov	r8,sp
 183f85c:	4f3feb16 	blt	r9,fp,183f80c <__alt_mem_mem_0+0xff81f80c>
 183f860:	dac02817 	ldw	r11,160(sp)
 183f864:	e0c7883a 	add	r3,fp,r3
 183f868:	10800044 	addi	r2,r2,1
 183f86c:	42c00015 	stw	r11,0(r8)
 183f870:	47000115 	stw	fp,4(r8)
 183f874:	d8c01c15 	stw	r3,112(sp)
 183f878:	d8801b15 	stw	r2,108(sp)
 183f87c:	010001c4 	movi	r4,7
 183f880:	2081ee16 	blt	r4,r2,184003c <___svfiprintf_internal_r+0xe14>
 183f884:	42000204 	addi	r8,r8,8
 183f888:	0000e506 	br	183fc20 <___svfiprintf_internal_r+0x9f8>
 183f88c:	21003fcc 	andi	r4,r4,255
 183f890:	2002dd1e 	bne	r4,zero,1840408 <___svfiprintf_internal_r+0x11e0>
 183f894:	00806134 	movhi	r2,388
 183f898:	10828004 	addi	r2,r2,2560
 183f89c:	d8802915 	stw	r2,164(sp)
 183f8a0:	9080080c 	andi	r2,r18,32
 183f8a4:	103f461e 	bne	r2,zero,183f5c0 <__alt_mem_mem_0+0xff81f5c0>
 183f8a8:	9080040c 	andi	r2,r18,16
 183f8ac:	10022e1e 	bne	r2,zero,1840168 <___svfiprintf_internal_r+0xf40>
 183f8b0:	9080100c 	andi	r2,r18,64
 183f8b4:	dac02317 	ldw	r11,140(sp)
 183f8b8:	10027326 	beq	r2,zero,1840288 <___svfiprintf_internal_r+0x1060>
 183f8bc:	5f00000b 	ldhu	fp,0(r11)
 183f8c0:	5ac00104 	addi	r11,r11,4
 183f8c4:	0013883a 	mov	r9,zero
 183f8c8:	dac02315 	stw	r11,140(sp)
 183f8cc:	003f4106 	br	183f5d4 <__alt_mem_mem_0+0xff81f5d4>
 183f8d0:	21003fcc 	andi	r4,r4,255
 183f8d4:	2002e11e 	bne	r4,zero,184045c <___svfiprintf_internal_r+0x1234>
 183f8d8:	9080080c 	andi	r2,r18,32
 183f8dc:	1002011e 	bne	r2,zero,18400e4 <___svfiprintf_internal_r+0xebc>
 183f8e0:	9080040c 	andi	r2,r18,16
 183f8e4:	10023e1e 	bne	r2,zero,18401e0 <___svfiprintf_internal_r+0xfb8>
 183f8e8:	9480100c 	andi	r18,r18,64
 183f8ec:	90023c26 	beq	r18,zero,18401e0 <___svfiprintf_internal_r+0xfb8>
 183f8f0:	dac02317 	ldw	r11,140(sp)
 183f8f4:	58800017 	ldw	r2,0(r11)
 183f8f8:	5ac00104 	addi	r11,r11,4
 183f8fc:	dac02315 	stw	r11,140(sp)
 183f900:	dac02517 	ldw	r11,148(sp)
 183f904:	12c0000d 	sth	r11,0(r2)
 183f908:	003e6e06 	br	183f2c4 <__alt_mem_mem_0+0xff81f2c4>
 183f90c:	98c00007 	ldb	r3,0(r19)
 183f910:	1a422926 	beq	r3,r9,18401b8 <___svfiprintf_internal_r+0xf90>
 183f914:	94800414 	ori	r18,r18,16
 183f918:	003e9206 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 183f91c:	94801014 	ori	r18,r18,64
 183f920:	98c00007 	ldb	r3,0(r19)
 183f924:	003e8f06 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 183f928:	21003fcc 	andi	r4,r4,255
 183f92c:	2002c71e 	bne	r4,zero,184044c <___svfiprintf_internal_r+0x1224>
 183f930:	9080080c 	andi	r2,r18,32
 183f934:	10004926 	beq	r2,zero,183fa5c <___svfiprintf_internal_r+0x834>
 183f938:	dac02317 	ldw	r11,140(sp)
 183f93c:	58800117 	ldw	r2,4(r11)
 183f940:	5f000017 	ldw	fp,0(r11)
 183f944:	5ac00204 	addi	r11,r11,8
 183f948:	dac02315 	stw	r11,140(sp)
 183f94c:	1013883a 	mov	r9,r2
 183f950:	10004b16 	blt	r2,zero,183fa80 <___svfiprintf_internal_r+0x858>
 183f954:	da801d83 	ldbu	r10,118(sp)
 183f958:	8001cb16 	blt	r16,zero,1840088 <___svfiprintf_internal_r+0xe60>
 183f95c:	00ffdfc4 	movi	r3,-129
 183f960:	e244b03a 	or	r2,fp,r9
 183f964:	90e4703a 	and	r18,r18,r3
 183f968:	103f4726 	beq	r2,zero,183f688 <__alt_mem_mem_0+0xff81f688>
 183f96c:	48008c26 	beq	r9,zero,183fba0 <___svfiprintf_internal_r+0x978>
 183f970:	dc802015 	stw	r18,128(sp)
 183f974:	dc002115 	stw	r16,132(sp)
 183f978:	dc401a04 	addi	r17,sp,104
 183f97c:	e021883a 	mov	r16,fp
 183f980:	da002215 	stw	r8,136(sp)
 183f984:	5039883a 	mov	fp,r10
 183f988:	4825883a 	mov	r18,r9
 183f98c:	8009883a 	mov	r4,r16
 183f990:	900b883a 	mov	r5,r18
 183f994:	01800284 	movi	r6,10
 183f998:	000f883a 	mov	r7,zero
 183f99c:	180a6a00 	call	180a6a0 <__umoddi3>
 183f9a0:	10800c04 	addi	r2,r2,48
 183f9a4:	8c7fffc4 	addi	r17,r17,-1
 183f9a8:	8009883a 	mov	r4,r16
 183f9ac:	900b883a 	mov	r5,r18
 183f9b0:	88800005 	stb	r2,0(r17)
 183f9b4:	01800284 	movi	r6,10
 183f9b8:	000f883a 	mov	r7,zero
 183f9bc:	180a1280 	call	180a128 <__udivdi3>
 183f9c0:	1021883a 	mov	r16,r2
 183f9c4:	10c4b03a 	or	r2,r2,r3
 183f9c8:	1825883a 	mov	r18,r3
 183f9cc:	103fef1e 	bne	r2,zero,183f98c <__alt_mem_mem_0+0xff81f98c>
 183f9d0:	dc802017 	ldw	r18,128(sp)
 183f9d4:	dc002117 	ldw	r16,132(sp)
 183f9d8:	da002217 	ldw	r8,136(sp)
 183f9dc:	e015883a 	mov	r10,fp
 183f9e0:	d8c01e17 	ldw	r3,120(sp)
 183f9e4:	1c47c83a 	sub	r3,r3,r17
 183f9e8:	d8c02115 	stw	r3,132(sp)
 183f9ec:	003f2a06 	br	183f698 <__alt_mem_mem_0+0xff81f698>
 183f9f0:	dac02317 	ldw	r11,140(sp)
 183f9f4:	d8001d85 	stb	zero,118(sp)
 183f9f8:	5c400017 	ldw	r17,0(r11)
 183f9fc:	5f000104 	addi	fp,r11,4
 183fa00:	88022f26 	beq	r17,zero,18402c0 <___svfiprintf_internal_r+0x1098>
 183fa04:	80022516 	blt	r16,zero,184029c <___svfiprintf_internal_r+0x1074>
 183fa08:	800d883a 	mov	r6,r16
 183fa0c:	000b883a 	mov	r5,zero
 183fa10:	8809883a 	mov	r4,r17
 183fa14:	da002c15 	stw	r8,176(sp)
 183fa18:	1805f680 	call	1805f68 <memchr>
 183fa1c:	da002c17 	ldw	r8,176(sp)
 183fa20:	10026426 	beq	r2,zero,18403b4 <___svfiprintf_internal_r+0x118c>
 183fa24:	1445c83a 	sub	r2,r2,r17
 183fa28:	d8802115 	stw	r2,132(sp)
 183fa2c:	da801d83 	ldbu	r10,118(sp)
 183fa30:	df002315 	stw	fp,140(sp)
 183fa34:	0021883a 	mov	r16,zero
 183fa38:	003f1706 	br	183f698 <__alt_mem_mem_0+0xff81f698>
 183fa3c:	94800814 	ori	r18,r18,32
 183fa40:	98c00007 	ldb	r3,0(r19)
 183fa44:	003e4706 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 183fa48:	21003fcc 	andi	r4,r4,255
 183fa4c:	2002701e 	bne	r4,zero,1840410 <___svfiprintf_internal_r+0x11e8>
 183fa50:	94800414 	ori	r18,r18,16
 183fa54:	9080080c 	andi	r2,r18,32
 183fa58:	103fb71e 	bne	r2,zero,183f938 <__alt_mem_mem_0+0xff81f938>
 183fa5c:	9080040c 	andi	r2,r18,16
 183fa60:	1001ab26 	beq	r2,zero,1840110 <___svfiprintf_internal_r+0xee8>
 183fa64:	dac02317 	ldw	r11,140(sp)
 183fa68:	5f000017 	ldw	fp,0(r11)
 183fa6c:	5ac00104 	addi	r11,r11,4
 183fa70:	dac02315 	stw	r11,140(sp)
 183fa74:	e013d7fa 	srai	r9,fp,31
 183fa78:	4805883a 	mov	r2,r9
 183fa7c:	103fb50e 	bge	r2,zero,183f954 <__alt_mem_mem_0+0xff81f954>
 183fa80:	0739c83a 	sub	fp,zero,fp
 183fa84:	02800b44 	movi	r10,45
 183fa88:	e004c03a 	cmpne	r2,fp,zero
 183fa8c:	0253c83a 	sub	r9,zero,r9
 183fa90:	da801d85 	stb	r10,118(sp)
 183fa94:	4893c83a 	sub	r9,r9,r2
 183fa98:	80023016 	blt	r16,zero,184035c <___svfiprintf_internal_r+0x1134>
 183fa9c:	00bfdfc4 	movi	r2,-129
 183faa0:	90a4703a 	and	r18,r18,r2
 183faa4:	483fb21e 	bne	r9,zero,183f970 <__alt_mem_mem_0+0xff81f970>
 183faa8:	00003d06 	br	183fba0 <___svfiprintf_internal_r+0x978>
 183faac:	9817883a 	mov	r11,r19
 183fab0:	d8002415 	stw	zero,144(sp)
 183fab4:	18bff404 	addi	r2,r3,-48
 183fab8:	0019883a 	mov	r12,zero
 183fabc:	58c00007 	ldb	r3,0(r11)
 183fac0:	630002a4 	muli	r12,r12,10
 183fac4:	9cc00044 	addi	r19,r19,1
 183fac8:	9817883a 	mov	r11,r19
 183facc:	1319883a 	add	r12,r2,r12
 183fad0:	18bff404 	addi	r2,r3,-48
 183fad4:	30bff92e 	bgeu	r6,r2,183fabc <__alt_mem_mem_0+0xff81fabc>
 183fad8:	db002415 	stw	r12,144(sp)
 183fadc:	18bff804 	addi	r2,r3,-32
 183fae0:	28be232e 	bgeu	r5,r2,183f370 <__alt_mem_mem_0+0xff81f370>
 183fae4:	21003fcc 	andi	r4,r4,255
 183fae8:	20024b1e 	bne	r4,zero,1840418 <___svfiprintf_internal_r+0x11f0>
 183faec:	1800d626 	beq	r3,zero,183fe48 <___svfiprintf_internal_r+0xc20>
 183faf0:	02c00044 	movi	r11,1
 183faf4:	dac02015 	stw	r11,128(sp)
 183faf8:	d8c01005 	stb	r3,64(sp)
 183fafc:	d8001d85 	stb	zero,118(sp)
 183fb00:	dac02115 	stw	r11,132(sp)
 183fb04:	dc401004 	addi	r17,sp,64
 183fb08:	003f2606 	br	183f7a4 <__alt_mem_mem_0+0xff81f7a4>
 183fb0c:	94802014 	ori	r18,r18,128
 183fb10:	98c00007 	ldb	r3,0(r19)
 183fb14:	003e1306 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 183fb18:	98c00007 	ldb	r3,0(r19)
 183fb1c:	9ac00044 	addi	r11,r19,1
 183fb20:	1a822b26 	beq	r3,r10,18403d0 <___svfiprintf_internal_r+0x11a8>
 183fb24:	18bff404 	addi	r2,r3,-48
 183fb28:	0021883a 	mov	r16,zero
 183fb2c:	30821e36 	bltu	r6,r2,18403a8 <___svfiprintf_internal_r+0x1180>
 183fb30:	58c00007 	ldb	r3,0(r11)
 183fb34:	840002a4 	muli	r16,r16,10
 183fb38:	5cc00044 	addi	r19,r11,1
 183fb3c:	9817883a 	mov	r11,r19
 183fb40:	80a1883a 	add	r16,r16,r2
 183fb44:	18bff404 	addi	r2,r3,-48
 183fb48:	30bff92e 	bgeu	r6,r2,183fb30 <__alt_mem_mem_0+0xff81fb30>
 183fb4c:	803e060e 	bge	r16,zero,183f368 <__alt_mem_mem_0+0xff81f368>
 183fb50:	043fffc4 	movi	r16,-1
 183fb54:	003e0406 	br	183f368 <__alt_mem_mem_0+0xff81f368>
 183fb58:	21003fcc 	andi	r4,r4,255
 183fb5c:	2002371e 	bne	r4,zero,184043c <___svfiprintf_internal_r+0x1214>
 183fb60:	94800414 	ori	r18,r18,16
 183fb64:	9080080c 	andi	r2,r18,32
 183fb68:	103ebb1e 	bne	r2,zero,183f658 <__alt_mem_mem_0+0xff81f658>
 183fb6c:	9080040c 	andi	r2,r18,16
 183fb70:	10013b26 	beq	r2,zero,1840060 <___svfiprintf_internal_r+0xe38>
 183fb74:	dac02317 	ldw	r11,140(sp)
 183fb78:	d8001d85 	stb	zero,118(sp)
 183fb7c:	0013883a 	mov	r9,zero
 183fb80:	58800104 	addi	r2,r11,4
 183fb84:	5f000017 	ldw	fp,0(r11)
 183fb88:	80013d16 	blt	r16,zero,1840080 <___svfiprintf_internal_r+0xe58>
 183fb8c:	00ffdfc4 	movi	r3,-129
 183fb90:	d8802315 	stw	r2,140(sp)
 183fb94:	90e4703a 	and	r18,r18,r3
 183fb98:	0015883a 	mov	r10,zero
 183fb9c:	e03eba26 	beq	fp,zero,183f688 <__alt_mem_mem_0+0xff81f688>
 183fba0:	00800244 	movi	r2,9
 183fba4:	173f7236 	bltu	r2,fp,183f970 <__alt_mem_mem_0+0xff81f970>
 183fba8:	dac02b17 	ldw	r11,172(sp)
 183fbac:	e7000c04 	addi	fp,fp,48
 183fbb0:	df0019c5 	stb	fp,103(sp)
 183fbb4:	dac02115 	stw	r11,132(sp)
 183fbb8:	dc4019c4 	addi	r17,sp,103
 183fbbc:	003eb606 	br	183f698 <__alt_mem_mem_0+0xff81f698>
 183fbc0:	21003fcc 	andi	r4,r4,255
 183fbc4:	20021f1e 	bne	r4,zero,1840444 <___svfiprintf_internal_r+0x121c>
 183fbc8:	94800414 	ori	r18,r18,16
 183fbcc:	9080080c 	andi	r2,r18,32
 183fbd0:	103ec51e 	bne	r2,zero,183f6e8 <__alt_mem_mem_0+0xff81f6e8>
 183fbd4:	9080040c 	andi	r2,r18,16
 183fbd8:	10016926 	beq	r2,zero,1840180 <___svfiprintf_internal_r+0xf58>
 183fbdc:	dac02317 	ldw	r11,140(sp)
 183fbe0:	d8001d85 	stb	zero,118(sp)
 183fbe4:	0013883a 	mov	r9,zero
 183fbe8:	58800104 	addi	r2,r11,4
 183fbec:	5f000017 	ldw	fp,0(r11)
 183fbf0:	80016b16 	blt	r16,zero,18401a0 <___svfiprintf_internal_r+0xf78>
 183fbf4:	00ffdfc4 	movi	r3,-129
 183fbf8:	d8802315 	stw	r2,140(sp)
 183fbfc:	90e4703a 	and	r18,r18,r3
 183fc00:	e03ec41e 	bne	fp,zero,183f714 <__alt_mem_mem_0+0xff81f714>
 183fc04:	0015883a 	mov	r10,zero
 183fc08:	8001c226 	beq	r16,zero,1840314 <___svfiprintf_internal_r+0x10ec>
 183fc0c:	0039883a 	mov	fp,zero
 183fc10:	0013883a 	mov	r9,zero
 183fc14:	003ec006 	br	183f718 <__alt_mem_mem_0+0xff81f718>
 183fc18:	d8c01c17 	ldw	r3,112(sp)
 183fc1c:	d8801b17 	ldw	r2,108(sp)
 183fc20:	d9001d87 	ldb	r4,118(sp)
 183fc24:	20000b26 	beq	r4,zero,183fc54 <___svfiprintf_internal_r+0xa2c>
 183fc28:	d9001d84 	addi	r4,sp,118
 183fc2c:	18c00044 	addi	r3,r3,1
 183fc30:	10800044 	addi	r2,r2,1
 183fc34:	41000015 	stw	r4,0(r8)
 183fc38:	01000044 	movi	r4,1
 183fc3c:	41000115 	stw	r4,4(r8)
 183fc40:	d8c01c15 	stw	r3,112(sp)
 183fc44:	d8801b15 	stw	r2,108(sp)
 183fc48:	010001c4 	movi	r4,7
 183fc4c:	2080e116 	blt	r4,r2,183ffd4 <___svfiprintf_internal_r+0xdac>
 183fc50:	42000204 	addi	r8,r8,8
 183fc54:	dac02217 	ldw	r11,136(sp)
 183fc58:	58000b26 	beq	r11,zero,183fc88 <___svfiprintf_internal_r+0xa60>
 183fc5c:	d9001d04 	addi	r4,sp,116
 183fc60:	18c00084 	addi	r3,r3,2
 183fc64:	10800044 	addi	r2,r2,1
 183fc68:	41000015 	stw	r4,0(r8)
 183fc6c:	01000084 	movi	r4,2
 183fc70:	41000115 	stw	r4,4(r8)
 183fc74:	d8c01c15 	stw	r3,112(sp)
 183fc78:	d8801b15 	stw	r2,108(sp)
 183fc7c:	010001c4 	movi	r4,7
 183fc80:	2080dd16 	blt	r4,r2,183fff8 <___svfiprintf_internal_r+0xdd0>
 183fc84:	42000204 	addi	r8,r8,8
 183fc88:	dac02617 	ldw	r11,152(sp)
 183fc8c:	01002004 	movi	r4,128
 183fc90:	59008426 	beq	r11,r4,183fea4 <___svfiprintf_internal_r+0xc7c>
 183fc94:	dac02117 	ldw	r11,132(sp)
 183fc98:	82e1c83a 	sub	r16,r16,r11
 183fc9c:	0400270e 	bge	zero,r16,183fd3c <___svfiprintf_internal_r+0xb14>
 183fca0:	01c00404 	movi	r7,16
 183fca4:	3c016a0e 	bge	r7,r16,1840250 <___svfiprintf_internal_r+0x1028>
 183fca8:	01406134 	movhi	r5,388
 183fcac:	294d6304 	addi	r5,r5,13708
 183fcb0:	d9402215 	stw	r5,136(sp)
 183fcb4:	070001c4 	movi	fp,7
 183fcb8:	00000306 	br	183fcc8 <___svfiprintf_internal_r+0xaa0>
 183fcbc:	843ffc04 	addi	r16,r16,-16
 183fcc0:	42000204 	addi	r8,r8,8
 183fcc4:	3c00130e 	bge	r7,r16,183fd14 <___svfiprintf_internal_r+0xaec>
 183fcc8:	18c00404 	addi	r3,r3,16
 183fccc:	10800044 	addi	r2,r2,1
 183fcd0:	45000015 	stw	r20,0(r8)
 183fcd4:	41c00115 	stw	r7,4(r8)
 183fcd8:	d8c01c15 	stw	r3,112(sp)
 183fcdc:	d8801b15 	stw	r2,108(sp)
 183fce0:	e0bff60e 	bge	fp,r2,183fcbc <__alt_mem_mem_0+0xff81fcbc>
 183fce4:	d9801a04 	addi	r6,sp,104
 183fce8:	b80b883a 	mov	r5,r23
 183fcec:	a809883a 	mov	r4,r21
 183fcf0:	d9c02c15 	stw	r7,176(sp)
 183fcf4:	183f0580 	call	183f058 <__ssprint_r>
 183fcf8:	d9c02c17 	ldw	r7,176(sp)
 183fcfc:	1000581e 	bne	r2,zero,183fe60 <___svfiprintf_internal_r+0xc38>
 183fd00:	843ffc04 	addi	r16,r16,-16
 183fd04:	d8c01c17 	ldw	r3,112(sp)
 183fd08:	d8801b17 	ldw	r2,108(sp)
 183fd0c:	d811883a 	mov	r8,sp
 183fd10:	3c3fed16 	blt	r7,r16,183fcc8 <__alt_mem_mem_0+0xff81fcc8>
 183fd14:	dac02217 	ldw	r11,136(sp)
 183fd18:	1c07883a 	add	r3,r3,r16
 183fd1c:	10800044 	addi	r2,r2,1
 183fd20:	42c00015 	stw	r11,0(r8)
 183fd24:	44000115 	stw	r16,4(r8)
 183fd28:	d8c01c15 	stw	r3,112(sp)
 183fd2c:	d8801b15 	stw	r2,108(sp)
 183fd30:	010001c4 	movi	r4,7
 183fd34:	20809e16 	blt	r4,r2,183ffb0 <___svfiprintf_internal_r+0xd88>
 183fd38:	42000204 	addi	r8,r8,8
 183fd3c:	dac02117 	ldw	r11,132(sp)
 183fd40:	10800044 	addi	r2,r2,1
 183fd44:	44400015 	stw	r17,0(r8)
 183fd48:	58c7883a 	add	r3,r11,r3
 183fd4c:	42c00115 	stw	r11,4(r8)
 183fd50:	d8c01c15 	stw	r3,112(sp)
 183fd54:	d8801b15 	stw	r2,108(sp)
 183fd58:	010001c4 	movi	r4,7
 183fd5c:	20807f16 	blt	r4,r2,183ff5c <___svfiprintf_internal_r+0xd34>
 183fd60:	42000204 	addi	r8,r8,8
 183fd64:	9480010c 	andi	r18,r18,4
 183fd68:	90002926 	beq	r18,zero,183fe10 <___svfiprintf_internal_r+0xbe8>
 183fd6c:	dac02417 	ldw	r11,144(sp)
 183fd70:	d8802017 	ldw	r2,128(sp)
 183fd74:	58a1c83a 	sub	r16,r11,r2
 183fd78:	0400250e 	bge	zero,r16,183fe10 <___svfiprintf_internal_r+0xbe8>
 183fd7c:	04400404 	movi	r17,16
 183fd80:	d8801b17 	ldw	r2,108(sp)
 183fd84:	8c017c0e 	bge	r17,r16,1840378 <___svfiprintf_internal_r+0x1150>
 183fd88:	01406134 	movhi	r5,388
 183fd8c:	294d6704 	addi	r5,r5,13724
 183fd90:	d9402815 	stw	r5,160(sp)
 183fd94:	048001c4 	movi	r18,7
 183fd98:	00000306 	br	183fda8 <___svfiprintf_internal_r+0xb80>
 183fd9c:	843ffc04 	addi	r16,r16,-16
 183fda0:	42000204 	addi	r8,r8,8
 183fda4:	8c00110e 	bge	r17,r16,183fdec <___svfiprintf_internal_r+0xbc4>
 183fda8:	18c00404 	addi	r3,r3,16
 183fdac:	10800044 	addi	r2,r2,1
 183fdb0:	45800015 	stw	r22,0(r8)
 183fdb4:	44400115 	stw	r17,4(r8)
 183fdb8:	d8c01c15 	stw	r3,112(sp)
 183fdbc:	d8801b15 	stw	r2,108(sp)
 183fdc0:	90bff60e 	bge	r18,r2,183fd9c <__alt_mem_mem_0+0xff81fd9c>
 183fdc4:	d9801a04 	addi	r6,sp,104
 183fdc8:	b80b883a 	mov	r5,r23
 183fdcc:	a809883a 	mov	r4,r21
 183fdd0:	183f0580 	call	183f058 <__ssprint_r>
 183fdd4:	1000221e 	bne	r2,zero,183fe60 <___svfiprintf_internal_r+0xc38>
 183fdd8:	843ffc04 	addi	r16,r16,-16
 183fddc:	d8c01c17 	ldw	r3,112(sp)
 183fde0:	d8801b17 	ldw	r2,108(sp)
 183fde4:	d811883a 	mov	r8,sp
 183fde8:	8c3fef16 	blt	r17,r16,183fda8 <__alt_mem_mem_0+0xff81fda8>
 183fdec:	dac02817 	ldw	r11,160(sp)
 183fdf0:	1c07883a 	add	r3,r3,r16
 183fdf4:	10800044 	addi	r2,r2,1
 183fdf8:	42c00015 	stw	r11,0(r8)
 183fdfc:	44000115 	stw	r16,4(r8)
 183fe00:	d8c01c15 	stw	r3,112(sp)
 183fe04:	d8801b15 	stw	r2,108(sp)
 183fe08:	010001c4 	movi	r4,7
 183fe0c:	2080aa16 	blt	r4,r2,18400b8 <___svfiprintf_internal_r+0xe90>
 183fe10:	d8802417 	ldw	r2,144(sp)
 183fe14:	dac02017 	ldw	r11,128(sp)
 183fe18:	12c0010e 	bge	r2,r11,183fe20 <___svfiprintf_internal_r+0xbf8>
 183fe1c:	5805883a 	mov	r2,r11
 183fe20:	dac02517 	ldw	r11,148(sp)
 183fe24:	5897883a 	add	r11,r11,r2
 183fe28:	dac02515 	stw	r11,148(sp)
 183fe2c:	1800531e 	bne	r3,zero,183ff7c <___svfiprintf_internal_r+0xd54>
 183fe30:	98800007 	ldb	r2,0(r19)
 183fe34:	d8001b15 	stw	zero,108(sp)
 183fe38:	d811883a 	mov	r8,sp
 183fe3c:	103d231e 	bne	r2,zero,183f2cc <__alt_mem_mem_0+0xff81f2cc>
 183fe40:	9823883a 	mov	r17,r19
 183fe44:	003d3906 	br	183f32c <__alt_mem_mem_0+0xff81f32c>
 183fe48:	d8801c17 	ldw	r2,112(sp)
 183fe4c:	10000426 	beq	r2,zero,183fe60 <___svfiprintf_internal_r+0xc38>
 183fe50:	d9402717 	ldw	r5,156(sp)
 183fe54:	d9002a17 	ldw	r4,168(sp)
 183fe58:	d9801a04 	addi	r6,sp,104
 183fe5c:	183f0580 	call	183f058 <__ssprint_r>
 183fe60:	dac02717 	ldw	r11,156(sp)
 183fe64:	d8802517 	ldw	r2,148(sp)
 183fe68:	58c0030b 	ldhu	r3,12(r11)
 183fe6c:	18c0100c 	andi	r3,r3,64
 183fe70:	1801381e 	bne	r3,zero,1840354 <___svfiprintf_internal_r+0x112c>
 183fe74:	dfc03717 	ldw	ra,220(sp)
 183fe78:	df003617 	ldw	fp,216(sp)
 183fe7c:	ddc03517 	ldw	r23,212(sp)
 183fe80:	dd803417 	ldw	r22,208(sp)
 183fe84:	dd403317 	ldw	r21,204(sp)
 183fe88:	dd003217 	ldw	r20,200(sp)
 183fe8c:	dcc03117 	ldw	r19,196(sp)
 183fe90:	dc803017 	ldw	r18,192(sp)
 183fe94:	dc402f17 	ldw	r17,188(sp)
 183fe98:	dc002e17 	ldw	r16,184(sp)
 183fe9c:	dec03804 	addi	sp,sp,224
 183fea0:	f800283a 	ret
 183fea4:	dac02417 	ldw	r11,144(sp)
 183fea8:	d9002017 	ldw	r4,128(sp)
 183feac:	5939c83a 	sub	fp,r11,r4
 183feb0:	073f780e 	bge	zero,fp,183fc94 <__alt_mem_mem_0+0xff81fc94>
 183feb4:	02400404 	movi	r9,16
 183feb8:	4f01370e 	bge	r9,fp,1840398 <___svfiprintf_internal_r+0x1170>
 183febc:	02c06134 	movhi	r11,388
 183fec0:	5acd6304 	addi	r11,r11,13708
 183fec4:	dac02215 	stw	r11,136(sp)
 183fec8:	028001c4 	movi	r10,7
 183fecc:	00000306 	br	183fedc <___svfiprintf_internal_r+0xcb4>
 183fed0:	e73ffc04 	addi	fp,fp,-16
 183fed4:	42000204 	addi	r8,r8,8
 183fed8:	4f00150e 	bge	r9,fp,183ff30 <___svfiprintf_internal_r+0xd08>
 183fedc:	18c00404 	addi	r3,r3,16
 183fee0:	10800044 	addi	r2,r2,1
 183fee4:	45000015 	stw	r20,0(r8)
 183fee8:	42400115 	stw	r9,4(r8)
 183feec:	d8c01c15 	stw	r3,112(sp)
 183fef0:	d8801b15 	stw	r2,108(sp)
 183fef4:	50bff60e 	bge	r10,r2,183fed0 <__alt_mem_mem_0+0xff81fed0>
 183fef8:	d9801a04 	addi	r6,sp,104
 183fefc:	b80b883a 	mov	r5,r23
 183ff00:	a809883a 	mov	r4,r21
 183ff04:	da402c15 	stw	r9,176(sp)
 183ff08:	da802d15 	stw	r10,180(sp)
 183ff0c:	183f0580 	call	183f058 <__ssprint_r>
 183ff10:	da402c17 	ldw	r9,176(sp)
 183ff14:	da802d17 	ldw	r10,180(sp)
 183ff18:	103fd11e 	bne	r2,zero,183fe60 <__alt_mem_mem_0+0xff81fe60>
 183ff1c:	e73ffc04 	addi	fp,fp,-16
 183ff20:	d8c01c17 	ldw	r3,112(sp)
 183ff24:	d8801b17 	ldw	r2,108(sp)
 183ff28:	d811883a 	mov	r8,sp
 183ff2c:	4f3feb16 	blt	r9,fp,183fedc <__alt_mem_mem_0+0xff81fedc>
 183ff30:	dac02217 	ldw	r11,136(sp)
 183ff34:	1f07883a 	add	r3,r3,fp
 183ff38:	10800044 	addi	r2,r2,1
 183ff3c:	42c00015 	stw	r11,0(r8)
 183ff40:	47000115 	stw	fp,4(r8)
 183ff44:	d8c01c15 	stw	r3,112(sp)
 183ff48:	d8801b15 	stw	r2,108(sp)
 183ff4c:	010001c4 	movi	r4,7
 183ff50:	2080b616 	blt	r4,r2,184022c <___svfiprintf_internal_r+0x1004>
 183ff54:	42000204 	addi	r8,r8,8
 183ff58:	003f4e06 	br	183fc94 <__alt_mem_mem_0+0xff81fc94>
 183ff5c:	d9801a04 	addi	r6,sp,104
 183ff60:	b80b883a 	mov	r5,r23
 183ff64:	a809883a 	mov	r4,r21
 183ff68:	183f0580 	call	183f058 <__ssprint_r>
 183ff6c:	103fbc1e 	bne	r2,zero,183fe60 <__alt_mem_mem_0+0xff81fe60>
 183ff70:	d8c01c17 	ldw	r3,112(sp)
 183ff74:	d811883a 	mov	r8,sp
 183ff78:	003f7a06 	br	183fd64 <__alt_mem_mem_0+0xff81fd64>
 183ff7c:	d9801a04 	addi	r6,sp,104
 183ff80:	b80b883a 	mov	r5,r23
 183ff84:	a809883a 	mov	r4,r21
 183ff88:	183f0580 	call	183f058 <__ssprint_r>
 183ff8c:	103fa826 	beq	r2,zero,183fe30 <__alt_mem_mem_0+0xff81fe30>
 183ff90:	003fb306 	br	183fe60 <__alt_mem_mem_0+0xff81fe60>
 183ff94:	d9801a04 	addi	r6,sp,104
 183ff98:	b80b883a 	mov	r5,r23
 183ff9c:	a809883a 	mov	r4,r21
 183ffa0:	183f0580 	call	183f058 <__ssprint_r>
 183ffa4:	103fae1e 	bne	r2,zero,183fe60 <__alt_mem_mem_0+0xff81fe60>
 183ffa8:	d811883a 	mov	r8,sp
 183ffac:	003cdc06 	br	183f320 <__alt_mem_mem_0+0xff81f320>
 183ffb0:	d9801a04 	addi	r6,sp,104
 183ffb4:	b80b883a 	mov	r5,r23
 183ffb8:	a809883a 	mov	r4,r21
 183ffbc:	183f0580 	call	183f058 <__ssprint_r>
 183ffc0:	103fa71e 	bne	r2,zero,183fe60 <__alt_mem_mem_0+0xff81fe60>
 183ffc4:	d8c01c17 	ldw	r3,112(sp)
 183ffc8:	d8801b17 	ldw	r2,108(sp)
 183ffcc:	d811883a 	mov	r8,sp
 183ffd0:	003f5a06 	br	183fd3c <__alt_mem_mem_0+0xff81fd3c>
 183ffd4:	d9801a04 	addi	r6,sp,104
 183ffd8:	b80b883a 	mov	r5,r23
 183ffdc:	a809883a 	mov	r4,r21
 183ffe0:	183f0580 	call	183f058 <__ssprint_r>
 183ffe4:	103f9e1e 	bne	r2,zero,183fe60 <__alt_mem_mem_0+0xff81fe60>
 183ffe8:	d8c01c17 	ldw	r3,112(sp)
 183ffec:	d8801b17 	ldw	r2,108(sp)
 183fff0:	d811883a 	mov	r8,sp
 183fff4:	003f1706 	br	183fc54 <__alt_mem_mem_0+0xff81fc54>
 183fff8:	d9801a04 	addi	r6,sp,104
 183fffc:	b80b883a 	mov	r5,r23
 1840000:	a809883a 	mov	r4,r21
 1840004:	183f0580 	call	183f058 <__ssprint_r>
 1840008:	103f951e 	bne	r2,zero,183fe60 <__alt_mem_mem_0+0xff81fe60>
 184000c:	d8c01c17 	ldw	r3,112(sp)
 1840010:	d8801b17 	ldw	r2,108(sp)
 1840014:	d811883a 	mov	r8,sp
 1840018:	003f1b06 	br	183fc88 <__alt_mem_mem_0+0xff81fc88>
 184001c:	d8001d85 	stb	zero,118(sp)
 1840020:	80007b16 	blt	r16,zero,1840210 <___svfiprintf_internal_r+0xfe8>
 1840024:	00ffdfc4 	movi	r3,-129
 1840028:	e244b03a 	or	r2,fp,r9
 184002c:	90e4703a 	and	r18,r18,r3
 1840030:	103d7026 	beq	r2,zero,183f5f4 <__alt_mem_mem_0+0xff81f5f4>
 1840034:	0015883a 	mov	r10,zero
 1840038:	003d7206 	br	183f604 <__alt_mem_mem_0+0xff81f604>
 184003c:	d9801a04 	addi	r6,sp,104
 1840040:	b80b883a 	mov	r5,r23
 1840044:	a809883a 	mov	r4,r21
 1840048:	183f0580 	call	183f058 <__ssprint_r>
 184004c:	103f841e 	bne	r2,zero,183fe60 <__alt_mem_mem_0+0xff81fe60>
 1840050:	d8c01c17 	ldw	r3,112(sp)
 1840054:	d8801b17 	ldw	r2,108(sp)
 1840058:	d811883a 	mov	r8,sp
 184005c:	003ef006 	br	183fc20 <__alt_mem_mem_0+0xff81fc20>
 1840060:	9080100c 	andi	r2,r18,64
 1840064:	d8001d85 	stb	zero,118(sp)
 1840068:	dac02317 	ldw	r11,140(sp)
 184006c:	10008126 	beq	r2,zero,1840274 <___svfiprintf_internal_r+0x104c>
 1840070:	58800104 	addi	r2,r11,4
 1840074:	5f00000b 	ldhu	fp,0(r11)
 1840078:	0013883a 	mov	r9,zero
 184007c:	803ec30e 	bge	r16,zero,183fb8c <__alt_mem_mem_0+0xff81fb8c>
 1840080:	d8802315 	stw	r2,140(sp)
 1840084:	0015883a 	mov	r10,zero
 1840088:	e244b03a 	or	r2,fp,r9
 184008c:	103e371e 	bne	r2,zero,183f96c <__alt_mem_mem_0+0xff81f96c>
 1840090:	00800044 	movi	r2,1
 1840094:	10803fcc 	andi	r2,r2,255
 1840098:	00c00044 	movi	r3,1
 184009c:	10c06126 	beq	r2,r3,1840224 <___svfiprintf_internal_r+0xffc>
 18400a0:	00c00084 	movi	r3,2
 18400a4:	10fd5526 	beq	r2,r3,183f5fc <__alt_mem_mem_0+0xff81f5fc>
 18400a8:	003ed806 	br	183fc0c <__alt_mem_mem_0+0xff81fc0c>
 18400ac:	d8802315 	stw	r2,140(sp)
 18400b0:	98c00007 	ldb	r3,0(r19)
 18400b4:	003cab06 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 18400b8:	d9801a04 	addi	r6,sp,104
 18400bc:	b80b883a 	mov	r5,r23
 18400c0:	a809883a 	mov	r4,r21
 18400c4:	183f0580 	call	183f058 <__ssprint_r>
 18400c8:	103f651e 	bne	r2,zero,183fe60 <__alt_mem_mem_0+0xff81fe60>
 18400cc:	d8c01c17 	ldw	r3,112(sp)
 18400d0:	003f4f06 	br	183fe10 <__alt_mem_mem_0+0xff81fe10>
 18400d4:	00806134 	movhi	r2,388
 18400d8:	10828504 	addi	r2,r2,2580
 18400dc:	d8802915 	stw	r2,164(sp)
 18400e0:	003d4406 	br	183f5f4 <__alt_mem_mem_0+0xff81f5f4>
 18400e4:	dac02317 	ldw	r11,140(sp)
 18400e8:	58800017 	ldw	r2,0(r11)
 18400ec:	dac02517 	ldw	r11,148(sp)
 18400f0:	5807d7fa 	srai	r3,r11,31
 18400f4:	dac02317 	ldw	r11,140(sp)
 18400f8:	10c00115 	stw	r3,4(r2)
 18400fc:	5ac00104 	addi	r11,r11,4
 1840100:	dac02315 	stw	r11,140(sp)
 1840104:	dac02517 	ldw	r11,148(sp)
 1840108:	12c00015 	stw	r11,0(r2)
 184010c:	003c6d06 	br	183f2c4 <__alt_mem_mem_0+0xff81f2c4>
 1840110:	9080100c 	andi	r2,r18,64
 1840114:	dac02317 	ldw	r11,140(sp)
 1840118:	103e5326 	beq	r2,zero,183fa68 <__alt_mem_mem_0+0xff81fa68>
 184011c:	5f00000f 	ldh	fp,0(r11)
 1840120:	5ac00104 	addi	r11,r11,4
 1840124:	dac02315 	stw	r11,140(sp)
 1840128:	e013d7fa 	srai	r9,fp,31
 184012c:	4805883a 	mov	r2,r9
 1840130:	003e0706 	br	183f950 <__alt_mem_mem_0+0xff81f950>
 1840134:	00800c04 	movi	r2,48
 1840138:	d8801d05 	stb	r2,116(sp)
 184013c:	d8c01d45 	stb	r3,117(sp)
 1840140:	d8001d85 	stb	zero,118(sp)
 1840144:	90800094 	ori	r2,r18,2
 1840148:	80008f16 	blt	r16,zero,1840388 <___svfiprintf_internal_r+0x1160>
 184014c:	00bfdfc4 	movi	r2,-129
 1840150:	90a4703a 	and	r18,r18,r2
 1840154:	94800094 	ori	r18,r18,2
 1840158:	0015883a 	mov	r10,zero
 184015c:	003d2906 	br	183f604 <__alt_mem_mem_0+0xff81f604>
 1840160:	98c00007 	ldb	r3,0(r19)
 1840164:	003c7f06 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 1840168:	dac02317 	ldw	r11,140(sp)
 184016c:	0013883a 	mov	r9,zero
 1840170:	5f000017 	ldw	fp,0(r11)
 1840174:	5ac00104 	addi	r11,r11,4
 1840178:	dac02315 	stw	r11,140(sp)
 184017c:	003d1506 	br	183f5d4 <__alt_mem_mem_0+0xff81f5d4>
 1840180:	9080100c 	andi	r2,r18,64
 1840184:	d8001d85 	stb	zero,118(sp)
 1840188:	dac02317 	ldw	r11,140(sp)
 184018c:	10003426 	beq	r2,zero,1840260 <___svfiprintf_internal_r+0x1038>
 1840190:	58800104 	addi	r2,r11,4
 1840194:	5f00000b 	ldhu	fp,0(r11)
 1840198:	0013883a 	mov	r9,zero
 184019c:	803e950e 	bge	r16,zero,183fbf4 <__alt_mem_mem_0+0xff81fbf4>
 18401a0:	e246b03a 	or	r3,fp,r9
 18401a4:	d8802315 	stw	r2,140(sp)
 18401a8:	183d5a1e 	bne	r3,zero,183f714 <__alt_mem_mem_0+0xff81f714>
 18401ac:	0015883a 	mov	r10,zero
 18401b0:	0005883a 	mov	r2,zero
 18401b4:	003fb706 	br	1840094 <__alt_mem_mem_0+0xff820094>
 18401b8:	98c00043 	ldbu	r3,1(r19)
 18401bc:	94800814 	ori	r18,r18,32
 18401c0:	9cc00044 	addi	r19,r19,1
 18401c4:	18c03fcc 	andi	r3,r3,255
 18401c8:	18c0201c 	xori	r3,r3,128
 18401cc:	18ffe004 	addi	r3,r3,-128
 18401d0:	003c6406 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 18401d4:	d8c02315 	stw	r3,140(sp)
 18401d8:	0015883a 	mov	r10,zero
 18401dc:	003faa06 	br	1840088 <__alt_mem_mem_0+0xff820088>
 18401e0:	dac02317 	ldw	r11,140(sp)
 18401e4:	58800017 	ldw	r2,0(r11)
 18401e8:	5ac00104 	addi	r11,r11,4
 18401ec:	dac02315 	stw	r11,140(sp)
 18401f0:	dac02517 	ldw	r11,148(sp)
 18401f4:	12c00015 	stw	r11,0(r2)
 18401f8:	003c3206 	br	183f2c4 <__alt_mem_mem_0+0xff81f2c4>
 18401fc:	01006134 	movhi	r4,388
 1840200:	21028504 	addi	r4,r4,2580
 1840204:	d9002915 	stw	r4,164(sp)
 1840208:	d8c02315 	stw	r3,140(sp)
 184020c:	1025883a 	mov	r18,r2
 1840210:	e244b03a 	or	r2,fp,r9
 1840214:	103f871e 	bne	r2,zero,1840034 <__alt_mem_mem_0+0xff820034>
 1840218:	0015883a 	mov	r10,zero
 184021c:	00800084 	movi	r2,2
 1840220:	003f9c06 	br	1840094 <__alt_mem_mem_0+0xff820094>
 1840224:	0039883a 	mov	fp,zero
 1840228:	003e5f06 	br	183fba8 <__alt_mem_mem_0+0xff81fba8>
 184022c:	d9801a04 	addi	r6,sp,104
 1840230:	b80b883a 	mov	r5,r23
 1840234:	a809883a 	mov	r4,r21
 1840238:	183f0580 	call	183f058 <__ssprint_r>
 184023c:	103f081e 	bne	r2,zero,183fe60 <__alt_mem_mem_0+0xff81fe60>
 1840240:	d8c01c17 	ldw	r3,112(sp)
 1840244:	d8801b17 	ldw	r2,108(sp)
 1840248:	d811883a 	mov	r8,sp
 184024c:	003e9106 	br	183fc94 <__alt_mem_mem_0+0xff81fc94>
 1840250:	01006134 	movhi	r4,388
 1840254:	210d6304 	addi	r4,r4,13708
 1840258:	d9002215 	stw	r4,136(sp)
 184025c:	003ead06 	br	183fd14 <__alt_mem_mem_0+0xff81fd14>
 1840260:	58800104 	addi	r2,r11,4
 1840264:	5f000017 	ldw	fp,0(r11)
 1840268:	0013883a 	mov	r9,zero
 184026c:	803e610e 	bge	r16,zero,183fbf4 <__alt_mem_mem_0+0xff81fbf4>
 1840270:	003fcb06 	br	18401a0 <__alt_mem_mem_0+0xff8201a0>
 1840274:	58800104 	addi	r2,r11,4
 1840278:	5f000017 	ldw	fp,0(r11)
 184027c:	0013883a 	mov	r9,zero
 1840280:	803e420e 	bge	r16,zero,183fb8c <__alt_mem_mem_0+0xff81fb8c>
 1840284:	003f7e06 	br	1840080 <__alt_mem_mem_0+0xff820080>
 1840288:	5f000017 	ldw	fp,0(r11)
 184028c:	5ac00104 	addi	r11,r11,4
 1840290:	0013883a 	mov	r9,zero
 1840294:	dac02315 	stw	r11,140(sp)
 1840298:	003cce06 	br	183f5d4 <__alt_mem_mem_0+0xff81f5d4>
 184029c:	8809883a 	mov	r4,r17
 18402a0:	da002c15 	stw	r8,176(sp)
 18402a4:	18075980 	call	1807598 <strlen>
 18402a8:	d8802115 	stw	r2,132(sp)
 18402ac:	da801d83 	ldbu	r10,118(sp)
 18402b0:	df002315 	stw	fp,140(sp)
 18402b4:	0021883a 	mov	r16,zero
 18402b8:	da002c17 	ldw	r8,176(sp)
 18402bc:	003cf606 	br	183f698 <__alt_mem_mem_0+0xff81f698>
 18402c0:	00800184 	movi	r2,6
 18402c4:	1400012e 	bgeu	r2,r16,18402cc <___svfiprintf_internal_r+0x10a4>
 18402c8:	1021883a 	mov	r16,r2
 18402cc:	dc002115 	stw	r16,132(sp)
 18402d0:	8005883a 	mov	r2,r16
 18402d4:	80003c16 	blt	r16,zero,18403c8 <___svfiprintf_internal_r+0x11a0>
 18402d8:	04406134 	movhi	r17,388
 18402dc:	d8802015 	stw	r2,128(sp)
 18402e0:	df002315 	stw	fp,140(sp)
 18402e4:	8c428a04 	addi	r17,r17,2600
 18402e8:	003d2e06 	br	183f7a4 <__alt_mem_mem_0+0xff81f7a4>
 18402ec:	04001004 	movi	r16,64
 18402f0:	800b883a 	mov	r5,r16
 18402f4:	180575c0 	call	180575c <_malloc_r>
 18402f8:	dac02717 	ldw	r11,156(sp)
 18402fc:	58800015 	stw	r2,0(r11)
 1840300:	58800415 	stw	r2,16(r11)
 1840304:	10004826 	beq	r2,zero,1840428 <___svfiprintf_internal_r+0x1200>
 1840308:	dac02717 	ldw	r11,156(sp)
 184030c:	5c000515 	stw	r16,20(r11)
 1840310:	003bd906 	br	183f278 <__alt_mem_mem_0+0xff81f278>
 1840314:	9080004c 	andi	r2,r18,1
 1840318:	0015883a 	mov	r10,zero
 184031c:	10000626 	beq	r2,zero,1840338 <___svfiprintf_internal_r+0x1110>
 1840320:	dac02b17 	ldw	r11,172(sp)
 1840324:	00800c04 	movi	r2,48
 1840328:	d88019c5 	stb	r2,103(sp)
 184032c:	dac02115 	stw	r11,132(sp)
 1840330:	dc4019c4 	addi	r17,sp,103
 1840334:	003cd806 	br	183f698 <__alt_mem_mem_0+0xff81f698>
 1840338:	d8002115 	stw	zero,132(sp)
 184033c:	dc401a04 	addi	r17,sp,104
 1840340:	003cd506 	br	183f698 <__alt_mem_mem_0+0xff81f698>
 1840344:	01006134 	movhi	r4,388
 1840348:	210d6704 	addi	r4,r4,13724
 184034c:	d9002815 	stw	r4,160(sp)
 1840350:	003d4306 	br	183f860 <__alt_mem_mem_0+0xff81f860>
 1840354:	00bfffc4 	movi	r2,-1
 1840358:	003ec606 	br	183fe74 <__alt_mem_mem_0+0xff81fe74>
 184035c:	00800044 	movi	r2,1
 1840360:	10803fcc 	andi	r2,r2,255
 1840364:	00c00044 	movi	r3,1
 1840368:	10fd8026 	beq	r2,r3,183f96c <__alt_mem_mem_0+0xff81f96c>
 184036c:	00c00084 	movi	r3,2
 1840370:	10fca426 	beq	r2,r3,183f604 <__alt_mem_mem_0+0xff81f604>
 1840374:	003ce806 	br	183f718 <__alt_mem_mem_0+0xff81f718>
 1840378:	01006134 	movhi	r4,388
 184037c:	210d6704 	addi	r4,r4,13724
 1840380:	d9002815 	stw	r4,160(sp)
 1840384:	003e9906 	br	183fdec <__alt_mem_mem_0+0xff81fdec>
 1840388:	1025883a 	mov	r18,r2
 184038c:	0015883a 	mov	r10,zero
 1840390:	00800084 	movi	r2,2
 1840394:	003ff206 	br	1840360 <__alt_mem_mem_0+0xff820360>
 1840398:	01406134 	movhi	r5,388
 184039c:	294d6304 	addi	r5,r5,13708
 18403a0:	d9402215 	stw	r5,136(sp)
 18403a4:	003ee206 	br	183ff30 <__alt_mem_mem_0+0xff81ff30>
 18403a8:	5827883a 	mov	r19,r11
 18403ac:	0021883a 	mov	r16,zero
 18403b0:	003bed06 	br	183f368 <__alt_mem_mem_0+0xff81f368>
 18403b4:	dc002115 	stw	r16,132(sp)
 18403b8:	da801d83 	ldbu	r10,118(sp)
 18403bc:	df002315 	stw	fp,140(sp)
 18403c0:	0021883a 	mov	r16,zero
 18403c4:	003cb406 	br	183f698 <__alt_mem_mem_0+0xff81f698>
 18403c8:	0005883a 	mov	r2,zero
 18403cc:	003fc206 	br	18402d8 <__alt_mem_mem_0+0xff8202d8>
 18403d0:	d8802317 	ldw	r2,140(sp)
 18403d4:	98c00043 	ldbu	r3,1(r19)
 18403d8:	5827883a 	mov	r19,r11
 18403dc:	14000017 	ldw	r16,0(r2)
 18403e0:	10800104 	addi	r2,r2,4
 18403e4:	d8802315 	stw	r2,140(sp)
 18403e8:	803f760e 	bge	r16,zero,18401c4 <__alt_mem_mem_0+0xff8201c4>
 18403ec:	18c03fcc 	andi	r3,r3,255
 18403f0:	18c0201c 	xori	r3,r3,128
 18403f4:	043fffc4 	movi	r16,-1
 18403f8:	18ffe004 	addi	r3,r3,-128
 18403fc:	003bd906 	br	183f364 <__alt_mem_mem_0+0xff81f364>
 1840400:	d9c01d85 	stb	r7,118(sp)
 1840404:	003cb606 	br	183f6e0 <__alt_mem_mem_0+0xff81f6e0>
 1840408:	d9c01d85 	stb	r7,118(sp)
 184040c:	003d2106 	br	183f894 <__alt_mem_mem_0+0xff81f894>
 1840410:	d9c01d85 	stb	r7,118(sp)
 1840414:	003d8e06 	br	183fa50 <__alt_mem_mem_0+0xff81fa50>
 1840418:	d9c01d85 	stb	r7,118(sp)
 184041c:	003db306 	br	183faec <__alt_mem_mem_0+0xff81faec>
 1840420:	d9c01d85 	stb	r7,118(sp)
 1840424:	003c8a06 	br	183f650 <__alt_mem_mem_0+0xff81f650>
 1840428:	dac02a17 	ldw	r11,168(sp)
 184042c:	00800304 	movi	r2,12
 1840430:	58800015 	stw	r2,0(r11)
 1840434:	00bfffc4 	movi	r2,-1
 1840438:	003e8e06 	br	183fe74 <__alt_mem_mem_0+0xff81fe74>
 184043c:	d9c01d85 	stb	r7,118(sp)
 1840440:	003dc706 	br	183fb60 <__alt_mem_mem_0+0xff81fb60>
 1840444:	d9c01d85 	stb	r7,118(sp)
 1840448:	003ddf06 	br	183fbc8 <__alt_mem_mem_0+0xff81fbc8>
 184044c:	d9c01d85 	stb	r7,118(sp)
 1840450:	003d3706 	br	183f930 <__alt_mem_mem_0+0xff81f930>
 1840454:	d9c01d85 	stb	r7,118(sp)
 1840458:	003c5406 	br	183f5ac <__alt_mem_mem_0+0xff81f5ac>
 184045c:	d9c01d85 	stb	r7,118(sp)
 1840460:	003d1d06 	br	183f8d8 <__alt_mem_mem_0+0xff81f8d8>

01840464 <__muldi3>:
 1840464:	223fffcc 	andi	r8,r4,65535
 1840468:	2006d43a 	srli	r3,r4,16
 184046c:	32bfffcc 	andi	r10,r6,65535
 1840470:	3012d43a 	srli	r9,r6,16
 1840474:	4297383a 	mul	r11,r8,r10
 1840478:	1a95383a 	mul	r10,r3,r10
 184047c:	4251383a 	mul	r8,r8,r9
 1840480:	5804d43a 	srli	r2,r11,16
 1840484:	4291883a 	add	r8,r8,r10
 1840488:	1205883a 	add	r2,r2,r8
 184048c:	1a51383a 	mul	r8,r3,r9
 1840490:	1280022e 	bgeu	r2,r10,184049c <__muldi3+0x38>
 1840494:	00c00074 	movhi	r3,1
 1840498:	40d1883a 	add	r8,r8,r3
 184049c:	1006d43a 	srli	r3,r2,16
 18404a0:	21cf383a 	mul	r7,r4,r7
 18404a4:	314b383a 	mul	r5,r6,r5
 18404a8:	1004943a 	slli	r2,r2,16
 18404ac:	1a11883a 	add	r8,r3,r8
 18404b0:	5affffcc 	andi	r11,r11,65535
 18404b4:	3947883a 	add	r3,r7,r5
 18404b8:	12c5883a 	add	r2,r2,r11
 18404bc:	1a07883a 	add	r3,r3,r8
 18404c0:	f800283a 	ret

018404c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 18404c4:	defffd04 	addi	sp,sp,-12
 18404c8:	df000215 	stw	fp,8(sp)
 18404cc:	df000204 	addi	fp,sp,8
 18404d0:	e13fff15 	stw	r4,-4(fp)
 18404d4:	e0bfff17 	ldw	r2,-4(fp)
 18404d8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 18404dc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 18404e0:	10000226 	beq	r2,zero,18404ec <_exit+0x28>
    ALT_SIM_FAIL();
 18404e4:	002af070 	cmpltui	zero,zero,43969
 18404e8:	00000106 	br	18404f0 <_exit+0x2c>
  } else {
    ALT_SIM_PASS();
 18404ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 18404f0:	003fff06 	br	18404f0 <__alt_mem_mem_0+0xff8204f0>
