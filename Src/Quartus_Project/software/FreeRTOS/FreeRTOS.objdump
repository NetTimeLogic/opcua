
FreeRTOS.elf:     file format elf32-littlenios2
FreeRTOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000248

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0004395c memsz 0x0004395c flags r-x
    LOAD off    0x0004497c vaddr 0x0204397c paddr 0x02045814 align 2**12
         filesz 0x00001e98 memsz 0x00001e98 flags rw-
    LOAD off    0x000476ac vaddr 0x020476ac paddr 0x020476ac align 2**12
         filesz 0x00000000 memsz 0x00122ea4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00040684  02000248  02000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000030b0  020408cc  020408cc  000418cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e98  0204397c  02045814  0004497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00122f2a  020476ac  020476ac  000476ac  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  0216a550  0216a550  00046814  2**0
                  CONTENTS
  7 .tse_descriptor_memory_0 00000000  04000000  04000000  00046814  2**0
                  CONTENTS
  8 .mem_0        00000000  05020000  05020000  00046814  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00046814  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000015e0  00000000  00000000  00046838  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0004a380  00000000  00000000  00047e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000f4d2  00000000  00000000  00092198  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017dc2  00000000  00000000  000a166a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00008178  00000000  00000000  000b942c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a8bd  00000000  00000000  000c15a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001cc6c  00000000  00000000  000cbe61  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000050  00000000  00000000  000e8ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001bb0  00000000  00000000  000e8b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000008  00000000  00000000  000f3cba  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  000f3cc2  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000f3cc7  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000f3cc8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000006  00000000  00000000  000f3cc9  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000006  00000000  00000000  000f3ccf  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000006  00000000  00000000  000f3cd5  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  000f3cdb  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001c  00000000  00000000  000f3cdf  2**0
                  CONTENTS, READONLY
 28 .jdi          0000495a  00000000  00000000  000f3cfb  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0009cd38  00000000  00000000  000f8655  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000248 l    d  .text	00000000 .text
020408cc l    d  .rodata	00000000 .rodata
0204397c l    d  .rwdata	00000000 .rwdata
020476ac l    d  .bss	00000000 .bss
0216a550 l    d  .sdram_controller_0	00000000 .sdram_controller_0
04000000 l    d  .tse_descriptor_memory_0	00000000 .tse_descriptor_memory_0
05020000 l    d  .mem_0	00000000 .mem_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FreeRTOS_bsp//obj/HAL/src/crt0.o
02000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 port_asm.o
02000020 l       .exceptions	00000000 save_context
0200009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
020000ac l       .exceptions	00000000 hw_irq_test
02000150 l       .exceptions	00000000 soft_exceptions
020000c0 l       .exceptions	00000000 hw_irq_handler
020000d4 l       .exceptions	00000000 restore_context
0200016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
020476ac l     O .bss	00000004 nw_ready
020476b0 l     O .bss	00000004 main_thread_handle
020002dc l     F .text	000000b0 StatusCallback
0200038c l     F .text	00000044 LinkCallback
02000418 l     F .text	000001cc WaitOnPHY
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
02040e02 l     O .rodata	00000010 zeroes.4404
02002c34 l     F .text	000000bc __sbprintf
02040e12 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02002e44 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02004974 l     F .text	00000008 __fp_unlock
02004988 l     F .text	0000019c __sinit.part.1
02004b24 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0204397c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
02043dc0 l     O .rwdata	00000020 lc_ctype_charset
02043da0 l     O .rwdata	00000020 lc_message_charset
02043de0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
02040e44 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200743c l     F .text	000000fc __sprint_r.part.0
02040f78 l     O .rodata	00000010 blanks.4348
02040f68 l     O .rodata	00000010 zeroes.4349
020089c8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 queue.c
0200d578 l     F .text	00000090 prvInitialiseNewQueue
0200d608 l     F .text	00000060 prvInitialiseMutex
0200e570 l     F .text	0000018c prvCopyDataToQueue
0200e954 l     F .text	00000068 prvIsQueueFull
0200e798 l     F .text	00000114 prvUnlockQueue
0200e6fc l     F .text	0000009c prvCopyDataFromQueue
0200e8ac l     F .text	00000060 prvIsQueueEmpty
0200e520 l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 tasks.c
02047848 l     O .bss	00000064 pxReadyTasksLists
020478ac l     O .bss	00000014 xDelayedTaskList1
020478c0 l     O .bss	00000014 xDelayedTaskList2
020476ec l     O .bss	00000004 pxDelayedTaskList
020476f0 l     O .bss	00000004 pxOverflowDelayedTaskList
020478d4 l     O .bss	00000014 xPendingReadyList
020478e8 l     O .bss	00000014 xTasksWaitingTermination
020476f4 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
020478fc l     O .bss	00000014 xSuspendedTaskList
020476f8 l     O .bss	00000004 uxCurrentNumberOfTasks
020476fc l     O .bss	00000004 xTickCount
02047700 l     O .bss	00000004 uxTopReadyPriority
02047704 l     O .bss	00000004 xSchedulerRunning
02047708 l     O .bss	00000004 xPendedTicks
0204770c l     O .bss	00000004 xYieldPending
02047710 l     O .bss	00000004 xNumOfOverflows
02047714 l     O .bss	00000004 uxTaskNumber
02047718 l     O .bss	00000004 xNextTaskUnblockTime
0204771c l     O .bss	00000004 xIdleTaskHandle
02047720 l     O .bss	00000004 uxSchedulerSuspended
0200ebb4 l     F .text	000001e4 prvInitialiseNewTask
0200ed98 l     F .text	00000118 prvAddNewTaskToReadyList
020104d8 l     F .text	000000b8 prvInitialiseTaskLists
02010960 l     F .text	00000044 prvDeleteTCB
020109a4 l     F .text	00000054 prvResetNextTaskUnblockTime
020116bc l     F .text	000000e8 prvAddCurrentTaskToDelayedList
0200f598 l     F .text	0000006c prvTaskIsTaskSuspended
020104bc l     F .text	0000001c prvIdleTask
02010778 l     F .text	00000128 prvListTasksWithinSingleList
02010590 l     F .text	00000090 prvCheckTasksWaitingTermination
020108a0 l     F .text	00000064 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
02047910 l     O .bss	00000014 xActiveTimerList1
02047924 l     O .bss	00000014 xActiveTimerList2
02047724 l     O .bss	00000004 pxCurrentTimerList
02047728 l     O .bss	00000004 pxOverflowTimerList
0204772c l     O .bss	00000004 xTimerQueue
02047730 l     O .bss	00000004 xTimerTaskHandle
0201226c l     F .text	0000008c prvCheckForValidListAndQueue
02011c94 l     F .text	0000003c prvTimerTask
02011884 l     F .text	000000a4 prvInitialiseNewTimer
02011bbc l     F .text	000000d8 prvProcessExpiredTimer
02011e64 l     F .text	000000dc prvInsertTimerInActiveList
02011d98 l     F .text	00000068 prvGetNextExpireTime
02011cd0 l     F .text	000000c8 prvProcessTimerOrBlockTask
02011f40 l     F .text	00000218 prvProcessReceivedCommands
02011e00 l     F .text	00000064 prvSampleTimeNow
02047734 l     O .bss	00000004 xLastTime.2917
02012158 l     F .text	00000114 prvSwitchTimerLists
00000000 l    df *ABS*	00000000 alt_dev.c
02012478 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02012564 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02012650 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_isatty.c
02012790 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02012870 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0201295c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
02012a6c l     F .text	0000003c alt_get_errno
02012aa8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020457c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_lwip_close.c
00000000 l    df *ABS*	00000000 alt_lwip_read.c
00000000 l    df *ABS*	00000000 alt_lwip_write.c
00000000 l    df *ABS*	00000000 altera_tse_ethernetif.c
02013154 l     F .text	00000074 low_level_init
020131c8 l     F .text	00000154 low_level_input
00000000 l    df *ABS*	00000000 lwip_main.c
0204773c l     O .bss	00000004 status_callback
02047740 l     O .bss	00000004 link_callback
02013768 l     F .text	0000025c lwip_handle_interfaces
02013d5c l     F .text	00000040 lwip_status_callback
02013bd4 l     F .text	000000d0 lwip_handle_ethernet_input
02013b20 l     F .text	000000b4 lwip_check_link_status
00000000 l    df *ABS*	00000000 lwip_tse_mac.c
00000000 l    df *ABS*	00000000 sys_arch.c
00000000 l    df *ABS*	00000000 dhcp.c
02015494 l     F .text	00000058 dhcp_clear_assignment
020154ec l     F .text	00000054 dhcp_handle_nak
02017100 l     F .text	0000005c dhcp_set_state
02016614 l     F .text	000001a0 dhcp_discover
02015540 l     F .text	000000a0 dhcp_check
020155e0 l     F .text	000000ec dhcp_handle_offer
020156cc l     F .text	00000260 dhcp_select
020180d8 l     F .text	00000584 dhcp_create_msg
0201715c l     F .text	0000009c dhcp_option
02017258 l     F .text	00000098 dhcp_option_short
020172f0 l     F .text	0000010c dhcp_option_long
020171f8 l     F .text	00000060 dhcp_option_byte
020173fc l     F .text	000000dc dhcp_option_hostname
020186e0 l     F .text	000000fc dhcp_option_trailer
0201865c l     F .text	00000084 dhcp_delete_msg
02015ca0 l     F .text	0000007c dhcp_t2_timeout
02015c24 l     F .text	0000007c dhcp_t1_timeout
02015a8c l     F .text	00000198 dhcp_timeout
020167b4 l     F .text	0000028c dhcp_bind
02016ba4 l     F .text	0000015c dhcp_rebind
02016d00 l     F .text	000001a4 dhcp_reboot
02015d1c l     F .text	00000218 dhcp_handle_ack
02017d80 l     F .text	00000358 dhcp_recv
020164b0 l     F .text	00000164 dhcp_decline
020174d8 l     F .text	000008a8 dhcp_parse_reply
020457cc l     O .rwdata	00000004 xid.3993
00000000 l    df *ABS*	00000000 ip_addr.c
02047938 l     O .bss	00000010 str.3409
00000000 l    df *ABS*	00000000 mem.c
02047754 l     O .bss	00000004 ram
02047758 l     O .bss	00000004 ram_end
0204775c l     O .bss	00000004 lfree
02047760 l     O .bss	00000004 mem_mutex
02018f78 l     F .text	00000128 plug_holes
00000000 l    df *ABS*	00000000 netif.c
02047764 l     O .bss	00000001 netif_num
00000000 l    df *ABS*	00000000 pbuf.c
0201a114 l     F .text	00000088 pbuf_free_ooseq
0201a19c l     F .text	00000030 pbuf_free_ooseq_callback
0201a1cc l     F .text	00000098 pbuf_pool_is_empty
00000000 l    df *ABS*	00000000 stats.c
00000000 l    df *ABS*	00000000 tcp.c
020457d8 l     O .rwdata	00000002 tcp_port
02047774 l     O .bss	00000001 tcp_timer
02047775 l     O .bss	00000001 tcp_timer_ctr
0201b874 l     F .text	0000034c tcp_close_shutdown
0201c4a4 l     F .text	000000d8 tcp_new_port
0201c074 l     F .text	00000030 tcp_accept_null
0201d460 l     F .text	000000d8 tcp_kill_prio
0201d538 l     F .text	00000094 tcp_kill_timewait
020457e4 l     O .rwdata	00000004 iss.4104
00000000 l    df *ABS*	00000000 tcp_out.c
0201dcb8 l     F .text	000003e8 tcp_output_alloc_header
0201e1e8 l     F .text	000003a0 tcp_create_segment
0201e588 l     F .text	00000120 tcp_pbuf_prealloc
0201e6a8 l     F .text	000000b8 tcp_seg_add_chksum
0201e760 l     F .text	00000124 tcp_write_checks
020200e4 l     F .text	00000600 tcp_output_segment
00000000 l    df *ABS*	00000000 timers.c
02047790 l     O .bss	00000004 next_timeout
02047794 l     O .bss	00000004 tcpip_tcp_timer_active
020213b0 l     F .text	0000005c tcpip_tcp_timer
02021468 l     F .text	00000044 ip_reass_timer
020214ac l     F .text	00000044 arp_timer
020214f0 l     F .text	00000044 dhcp_timer_coarse
02021534 l     F .text	00000044 dhcp_timer_fine
00000000 l    df *ABS*	00000000 udp.c
020457e8 l     O .rwdata	00000002 udp_port
02021994 l     F .text	0000009c udp_new_port
00000000 l    df *ABS*	00000000 etharp.c
02047948 l     O .bss	000001f4 arp_table
02022a2c l     F .text	00000068 free_etharp_q
02022a94 l     F .text	0000009c etharp_free_entry
02022cac l     F .text	00000318 etharp_find_entry
02022fc4 l     F .text	000000a4 etharp_send_ip
02023068 l     F .text	000001c8 etharp_update_arp_entry
02023394 l     F .text	000000e8 etharp_ip_input
0202347c l     F .text	0000038c etharp_arp_input
02023808 l     F .text	0000010c etharp_output_to_arp_index
02023fb4 l     F .text	0000024c etharp_raw
00000000 l    df *ABS*	00000000 alt_sys_init.c
020244bc l     F .text	00000034 alt_dev_reg
020443c8 l     O .rwdata	00001068 jtag_uart_0
02045430 l     O .rwdata	00000030 sgdma_tse_rx_0
02045460 l     O .rwdata	00000030 sgdma_tse_tx_0
02045490 l     O .rwdata	000000cc uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02024880 l     F .text	0000020c altera_avalon_jtag_uart_irq
02024a8c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0202513c l     F .text	0000003c alt_get_errno
02025d6c l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02025ed0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
02026230 l     F .text	0000009c altera_avalon_uart_irq
020262cc l     F .text	000000e4 altera_avalon_uart_rxirq
020263b0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0202654c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
020267a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 heap_1.c
02047b3c l     O .bss	00100000 ucHeap
020477a0 l     O .bss	00000004 xNextFreeByte
020477a4 l     O .bss	00000004 pucAlignedHeap.2611
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
02026e2c l     F .text	0000002c prvReadGp
020477a8 l     O .bss	00000004 lastContext
0202701c l     F .text	0000009c prvSetupTimerInterrupt
00000000 l    df *ABS*	00000000 tse_ethernet_phys.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
020273a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
020274f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_read.c
02027d14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
02028050 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 sockets.c
02147b3c l     O .bss	000003f0 sockets
020477c8 l     O .bss	00000004 select_cb_list
020477cc l     O .bss	00000004 select_cb_ctr
020417d0 l     O .rodata	00000040 err_to_errno_table
020281c8 l     F .text	00000078 get_socket
02028240 l     F .text	00000080 tryget_socket
020282c0 l     F .text	000001a0 alloc_socket
02028460 l     F .text	00000098 free_socket
02029f04 l     F .text	000003ac event_callback
020296a4 l     F .text	00000380 lwip_selscan
0202a424 l     F .text	00000114 lwip_getaddrname
0202a884 l     F .text	000003fc lwip_getsockopt_internal
0202af14 l     F .text	00000338 lwip_setsockopt_internal
00000000 l    df *ABS*	00000000 tcpip.c
020477d0 l     O .bss	00000004 tcpip_init_done
020477d4 l     O .bss	00000004 tcpip_init_done_arg
020477d8 l     O .bss	00000004 mbox
0202b434 l     F .text	000001c0 tcpip_thread
0202ba6c l     F .text	0000003c pbuf_free_int
00000000 l    df *ABS*	00000000 altera_avalon_tse.c
020477de l     O .bss	00000001 tse_system_count.4134
020477df l     O .bss	00000001 is_init.4216
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 icmp.c
020311d4 l     F .text	000001e0 icmp_send_response
00000000 l    df *ABS*	00000000 inet_chksum.c
020313b4 l     F .text	00000234 lwip_standard_chksum
00000000 l    df *ABS*	00000000 ip.c
020477e0 l     O .bss	00000002 ip_id
00000000 l    df *ABS*	00000000 ip_frag.c
020477f4 l     O .bss	00000004 reassdatagrams
020477f8 l     O .bss	00000002 ip_reass_pbufcount
02032a64 l     F .text	00000190 ip_reass_free_complete_datagram
02032e60 l     F .text	00000068 ip_reass_dequeue_datagram
02032bf4 l     F .text	00000190 ip_reass_remove_oldest_datagram
02032d84 l     F .text	000000dc ip_reass_enqueue_new_datagram
02032ec8 l     F .text	00000700 ip_reass_chain_frag_into_datagram_and_validate
02033bd4 l     F .text	0000002c ip_frag_alloc_pbuf_custom_ref
02033c00 l     F .text	00000038 ip_frag_free_pbuf_custom_ref
02033c38 l     F .text	00000058 ipfrag_free_pbuf_custom
00000000 l    df *ABS*	00000000 memp.c
02147f2c l     O .bss	0000003c memp_tab
020434a8 l     O .rodata	0000001e memp_sizes
020434c6 l     O .rodata	0000001e memp_num
02147f68 l     O .bss	0001a16f memp_memory
00000000 l    df *ABS*	00000000 raw.c
020477fc l     O .bss	00000004 raw_pcbs
00000000 l    df *ABS*	00000000 tcp_in.c
021620d8 l     O .bss	00000014 inseg
02047800 l     O .bss	00000004 tcphdr
02047804 l     O .bss	00000004 iphdr
02047808 l     O .bss	00000004 seqno
0204780c l     O .bss	00000004 ackno
02047810 l     O .bss	00000001 flags
02047812 l     O .bss	00000002 tcplen
02047814 l     O .bss	00000001 recv_flags
02047818 l     O .bss	00000004 recv_data
02035be4 l     F .text	0000013c tcp_timewait_input
020358fc l     F .text	000002e8 tcp_listen_input
02035d20 l     F .text	00000ab4 tcp_process
02038a68 l     F .text	00000228 tcp_parseopt
02036a74 l     F .text	00001ff4 tcp_receive
020367d4 l     F .text	000002a0 tcp_oos_insert_segment
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 api_lib.c
02039600 l     F .text	00000294 netconn_recv_data
02039e1c l     F .text	000000cc netconn_close_shutdown
00000000 l    df *ABS*	00000000 api_msg.c
02039f88 l     F .text	00000170 recv_raw
0203a0f8 l     F .text	0000012c recv_udp
0203a224 l     F .text	00000140 recv_tcp
0203a364 l     F .text	000000fc poll_tcp
0203bd34 l     F .text	0000030c do_writemore
0203adfc l     F .text	00000290 do_close_internal
0203a460 l     F .text	000000fc sent_tcp
0203a55c l     F .text	000001b4 err_tcp
0203a710 l     F .text	00000088 setup_tcp
0203a798 l     F .text	00000168 accept_function
0203a900 l     F .text	000001a4 pcb_new
0203ac80 l     F .text	0000017c netconn_drain
0203b3d0 l     F .text	00000154 do_connected
00000000 l    df *ABS*	00000000 netbuf.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
0204393c l     O .rodata	00000010 zeroes.4389
0204394c l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 vfprintf.c
0204396c l     O .rodata	00000010 blanks.4332
0204395c l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
020281a8 g     F .text	00000020 lwip_socket_init
0203b260 g     F .text	00000170 do_bind
020477e4 g     O .bss	00000004 current_iphdr_src
02031a20 g     F .text	00000044 inet_chksum
020346c0 g     F .text	00000048 raw_bind
02006f4c g     F .text	00000074 _mprec_log10
020335c8 g     F .text	0000060c ip_reass
0202cd98 g     F .text	000000d8 alt_tse_get_mac_info
0201a710 g     F .text	00000160 pbuf_realloc
02007038 g     F .text	0000008c __any_on
02009420 g     F .text	00000054 _isatty_r
02040e50 g     O .rodata	00000028 __mprec_tinytens
0200d240 g     F .text	000000d8 alt_main
0203cf30 g     F .text	00000090 strcpy
0201dbc0 g     F .text	00000030 tcp_next_iss
0203cca0 g     F .text	000000c0 _puts_r
0216a410 g     O .bss	00000100 alt_irq
0201c30c g     F .text	000000f0 tcp_update_rcv_ann_wnd
02009474 g     F .text	00000060 _lseek_r
020000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
0200fffc g     F .text	00000064 vTaskPlaceOnUnorderedEventList
02026b70 g     F .text	0000002c xPortGetFreeHeapSize
02047768 g     O .bss	00000004 netif_list
02015f80 g     F .text	00000050 dhcp_cleanup
02030994 g     F .text	000000f0 marvell_cfg_rgmii
02045814 g       *ABS*	00000000 __flash_rwdata_start
02026ea8 g     F .text	0000003c enh_alt_irq_enable_all
02013ca4 g     F .text	000000b8 print_ipad
0200bd2c g     F .text	00000088 .hidden __eqdf2
020206e4 g     F .text	000003cc tcp_rst
0201b67c g     F .text	000000c8 pbuf_memfind
0202df88 g     F .text	00000210 alt_tse_phy_print_profile
0216a550 g       *ABS*	00000000 __alt_heap_start
02030734 g     F .text	00000098 marvell_phy_cfg
0200f214 g     F .text	00000068 uxTaskPriorityGet
0201180c g     F .text	00000078 xTimerCreate
02024200 g     F .text	00000074 etharp_request
02022004 g     F .text	00000074 udp_send_chksum
0203ac30 g     F .text	00000050 netconn_free
020009e4 g     F .text	0000003c printf
02015fd0 g     F .text	000001ec dhcp_start
0202529c g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
02009d4c g     F .text	0000009c _wcrtomb_r
0201d894 g     F .text	00000034 tcp_err
020457d0 g     O .rwdata	00000004 ip_addr_any
020315e8 g     F .text	00000200 inet_chksum_pseudo
02016368 g     F .text	000000a8 dhcp_network_changed
02007264 g     F .text	0000005c __sseek
02022934 g     F .text	000000a0 udp_remove
02004cc4 g     F .text	00000010 __sinit
02010620 g     F .text	00000158 vTaskGetInfo
02009bf4 g     F .text	00000140 __swbuf_r
0200ea0c g     F .text	000000c8 vQueueWaitForMessageRestricted
020321f4 g     F .text	0000064c ip_output_if
020052d0 g     F .text	0000007c _setlocale_r
02004b2c g     F .text	00000068 __sfmoreglue
020344ac g     F .text	000000e8 memp_free
0200d378 g     F .text	00000044 __malloc_unlock
02013a78 g     F .text	00000034 lwip_set_status_callback
0201aa20 g     F .text	00000144 pbuf_free
0201d82c g     F .text	00000034 tcp_recv
0203b08c g     F .text	000001d4 do_delconn
0202cfdc g     F .text	00000a7c getPHYSpeed
0201ac14 g     F .text	000000d4 pbuf_cat
02000774 g     F .text	000000b8 get_ip_addr
020259b4 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
02028c68 g     F .text	000004d8 lwip_recvfrom
020094d4 g     F .text	0000015c memmove
02032840 g     F .text	000000b4 ip_output
02023230 g     F .text	000000a4 etharp_cleanup_netif
02022078 g     F .text	00000058 udp_sendto
02010de8 g     F .text	00000048 vTaskEnterCritical
020136dc g     F .text	0000008c lwip_wait_for_an
02004cac g     F .text	00000018 _cleanup
0203ce4c g     F .text	000000e4 snprintf
0200da2c g     F .text	000000f4 xQueueGenericSendFromISR
0200fa8c g     F .text	00000040 pcTaskGetName
020060c8 g     F .text	000000a8 _Balloc
0201896c g     F .text	00000044 ipaddr_addr
02020f34 g     F .text	00000194 tcp_keepalive
02022b30 g     F .text	0000017c etharp_tmr
0202f998 g     F .text	000001c4 alt_tse_phy_set_adv_1000
0203c4d0 g     F .text	00000074 netbuf_delete
02045810 g     O .rwdata	00000001 max_mac_system
0201d5cc g     F .text	00000200 tcp_alloc
0202c04c g     F .text	000009fc alt_tse_system_add_sys
0200bdb4 g     F .text	000000dc .hidden __gtdf2
02028184 g     F .text	00000024 altera_nios2_gen2_irq_init
0203c544 g     F .text	000000c8 netbuf_alloc
0202b90c g     F .text	00000070 tcpip_callbackmsg_new
02022188 g     F .text	00000060 udp_sendto_if
02000000 g     F .entry	0000001c __reset
0200d6c4 g     F .text	00000090 xQueueGiveMutexRecursive
02039f1c g     F .text	0000006c netconn_shutdown
0201d7f8 g     F .text	00000034 tcp_arg
020476e8 g     O .bss	00000004 pxCurrentTCB
02021578 g     F .text	00000078 sys_timeouts_init
02047776 g     O .bss	00000001 tcp_active_pcbs_changed
02013ae0  w    F .text	00000040 lwip_is_interface_up
02015068 g     F .text	00000058 sys_mutex_free
02047778 g     O .bss	00000004 tcp_active_pcbs
02025504 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
0201a0d8 g     F .text	0000003c netif_set_link_callback
02000020 g       *ABS*	00000000 __flash_exceptions_start
02047798 g     O .bss	00000004 udp_pcbs
02008f08 g     F .text	0000005c _fstat_r
0204555c g     O .rwdata	00000240 tse_mac_device
020476d4 g     O .bss	00000004 errno
02024274 g     F .text	00000248 ethernet_input
0201bc1c g     F .text	000000f0 tcp_shutdown
020071e0 g     F .text	00000008 __seofread
02039ab0 g     F .text	00000080 netconn_recved
0203f600 g     F .text	0000123c ___svfiprintf_internal_r
02030280 g     F .text	000004b4 alt_tse_phy_set_common_speed
0201abb0 g     F .text	00000064 pbuf_ref
0200d200  w    F .text	00000020 pre_constructors
0216a510 g     O .bss	00000020 pmac_groups
02019da8 g     F .text	00000048 netif_set_netmask
02015250 g     F .text	00000060 sys_mbox_trypost
020476dc g     O .bss	00000004 alt_argv
0204d79c g       *ABS*	00000000 _gp
0201d3e4 g     F .text	0000007c tcp_recv_null
02028020 g     F .text	00000030 usleep
020477e8 g     O .bss	00000004 current_netif
02039ee8 g     F .text	00000034 netconn_close
0201f1b4 g     F .text	000002e8 tcp_enqueue_flags
0203c45c g     F .text	00000074 netbuf_new
0200f2c8 g     F .text	000001b4 vTaskPrioritySet
020476e4 g     O .bss	00000004 alt_heapsem
020102dc g     F .text	0000003c vTaskInternalSetTimeOutState
0201bbc0 g     F .text	0000005c tcp_close
0201c3fc g     F .text	000000a8 tcp_recved
02027ff0 g     F .text	00000030 alt_uncached_malloc
0201d944 g     F .text	00000170 tcp_pcb_purge
0202bb50 g     F .text	00000060 tse_mac_initTransInfo2
020135c8 g     F .text	00000114 lwip_initialize
02044248 g     O .rwdata	00000180 alt_fd_list
02039280 g     F .text	000000bc netconn_disconnect
02018da8 g     F .text	0000003c ipaddr_ntoa
02000864 g     F .text	00000048 get_iface_name
020457da g     O .rwdata	00000007 tcp_persist_backoff
02026fc4 g     F .text	00000038 xPortStartScheduler
02011634 g     F .text	00000088 ulTaskNotifyValueClear
0200f850 g     F .text	00000034 vTaskEndScheduler
020275d4 g     F .text	00000090 alt_find_dev
02005e58 g     F .text	00000148 memcpy
02019158 g     F .text	0000010c mem_free
0202bdc4 g     F .text	00000054 tse_mac_setMIImode
0200ffac g     F .text	00000050 vTaskPlaceOnEventList
0201b3a0 g     F .text	0000010c pbuf_fill_chksum
020101b8 g     F .text	000000c8 vTaskRemoveFromUnorderedEventList
0204777c g     O .bss	00000004 tcp_ticks
02047780 g     O .bss	00000004 tcp_listen_pcbs
0202da58 g     F .text	00000048 alt_tse_phy_rd_mdio_addr
020221e8 g     F .text	00000454 udp_sendto_if_chksum
02020ab0 g     F .text	000000b4 tcp_rexmit_rto
0200497c g     F .text	0000000c _cleanup_r
0200d018 g     F .text	000000dc .hidden __floatsidf
0202bbb0 g     F .text	000000e4 tse_mac_sTxWrite
02012714 g     F .text	0000007c alt_io_redirect
0201d7cc g     F .text	0000002c tcp_new
0200be90 g     F .text	000000f4 .hidden __ltdf2
0200e2f8 g     F .text	0000007c xQueuePeekFromISR
020228a0 g     F .text	00000050 udp_disconnect
0201b024 g     F .text	0000019c pbuf_copy_partial
02014c40 g     F .text	00000020 sys_init
02014df0 g     F .text	00000048 sys_sem_signal
020408cc g       *ABS*	00000000 __DTOR_END__
0200d220  w    F .text	00000020 post_constructors
020273dc g     F .text	000000d0 alt_close
020215f0 g     F .text	0000017c sys_timeout
0203cd60 g     F .text	00000014 puts
02026b28 g     F .text	00000024 vPortFree
02011b8c g     F .text	00000030 pcTimerGetName
02016ea4 g     F .text	000001a4 dhcp_release
020070c4 g     F .text	00000074 __fpclassifyd
02041580 g     O .rodata	0000002c tcp_state_str
02006ea8 g     F .text	000000a4 __ratio
0203491c g     F .text	00000044 raw_send
02031a64 g     F .text	0000010c inet_chksum_pbuf
020089ac g     F .text	0000001c __vfiprintf_internal
0201b1c0 g     F .text	00000154 pbuf_take
0200ddd4 g     F .text	00000260 xQueueSemaphoreTake
020255fc g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0200e49c g     F .text	00000028 uxQueueGetQueueNumber
02024c84 g     F .text	00000258 altera_avalon_jtag_uart_read
0203ca94 g     F .text	00000014 malloc
020009b4 g     F .text	00000030 _printf_r
020477ec g     O .bss	00000004 current_iphdr_dest
0200aadc g     F .text	00000064 .hidden __udivsi3
02162130 g     O .bss	00000024 tse
020127cc g     F .text	000000a4 isatty
0202ca48 g     F .text	00000168 alt_tse_sys_enable_mdio_sharing
02030b48 g     F .text	000005fc icmp_input
02040ea0 g     O .rodata	000000c8 __mprec_tens
0202cd18 g     F .text	00000080 alt_tse_get_mac_info_index
02010904 g     F .text	0000005c uxTaskGetStackHighWaterMark
02019934 g     F .text	000000f0 netif_add
0200534c g     F .text	0000000c __locale_charset
0202b9b4 g     F .text	00000044 tcpip_trycallback
020477ac g     O .bss	00000008 alt_timezone
02014f14 g     F .text	000000c0 sys_mutex_new
0201d294 g     F .text	00000054 tcp_segs_free
02026c30 g     F .text	0000008c vListInsertEnd
02038de8 g     F .text	00000090 alt_icache_flush
020291dc g     F .text	00000144 lwip_send
020476d0 g     O .bss	00000004 __malloc_top_pad
02047738 g     O .bss	00000004 alt_fd_list_lock
020476b4 g     O .bss	00000004 PingIp
020457a4 g     O .rwdata	00000004 __mb_cur_max
0200537c g     F .text	0000000c _localeconv_r
0202b97c g     F .text	00000038 tcpip_callbackmsg_delete
020328f4 g     F .text	000000d0 ip_output_hinted
02019c38 g     F .text	00000128 netif_set_ipaddr
02008f64 g     F .text	000004bc __sfvwrite_r
020064d4 g     F .text	0000003c __i2b
02025734 g     F .text	0000005c alt_avalon_sgdma_stop
0202daf8 g     F .text	00000128 alt_tse_phy_wr_mdio_reg
02007138 g     F .text	00000054 _sbrk_r
0202e198 g     F .text	000006a4 alt_tse_mac_group_init
0201e884 g     F .text	00000930 tcp_write
02013f8c g     F .text	0000084c tse_mac_init
0200f6e0 g     F .text	000000e0 xTaskResumeFromISR
020232d4 g     F .text	000000c0 etharp_find_addr
020152b0 g     F .text	00000100 sys_arch_mbox_fetch
0202a2b0 g     F .text	00000174 lwip_shutdown
02013a30 g     F .text	00000048 get_netif
02009630 g     F .text	00000060 _read_r
02026c04 g     F .text	0000002c vListInitialiseItem
020274ac g     F .text	00000028 alt_dcache_flush
020457c4 g     O .rwdata	00000004 alt_max_fd
020270b8 g     F .text	0000004c vPortSysTickHandler
02008bfc g     F .text	000000f0 _fclose_r
0200dbfc g     F .text	000001d8 xQueueReceive
0201bea4 g     F .text	000001d0 tcp_bind
02004944 g     F .text	00000030 fflush
020476cc g     O .bss	00000004 __malloc_max_sbrked_mem
0203118c g     F .text	00000048 icmp_time_exceeded
0201be6c g     F .text	00000038 tcp_abort
0200f27c g     F .text	0000004c uxTaskPriorityGetFromISR
02039408 g     F .text	000001f8 netconn_accept
02027104 g     F .text	00000170 alt_irq_register
02033c90 g     F .text	0000048c ip_frag
0200ab98 g     F .text	000008ac .hidden __adddf3
02028b58 g     F .text	00000110 lwip_listen
02011ae4 g     F .text	00000070 uxTimerGetReloadMode
02006c50 g     F .text	0000010c __b2d
0200a4ac g     F .text	00000538 .hidden __umoddi3
02012998 g     F .text	000000d4 lseek
02034794 g     F .text	00000188 raw_sendto
0202dcec g     F .text	0000029c alt_tse_phy_add_profile_default
0202f404 g     F .text	00000594 alt_tse_phy_get_cap
02000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
02011a24 g     F .text	00000030 xTimerGetPeriod
0204579c g     O .rwdata	00000004 _global_impure_ptr
0203c32c g     F .text	00000130 do_close
02027d50 g     F .text	000000fc alt_read
02009690 g     F .text	00000564 _realloc_r
0216a550 g       *ABS*	00000000 __bss_end
02027c24 g     F .text	000000f0 alt_iic_isr_register
02025178 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
02027ee8 g     F .text	00000108 alt_tick
020287fc g     F .text	00000154 lwip_bind
02009f34 g     F .text	00000578 .hidden __udivdi3
02017048 g     F .text	000000b8 dhcp_stop
02008e64 g     F .text	00000024 _fputwc_r
0202f2a4 g     F .text	00000160 alt_tse_phy_check_link
02040e78 g     O .rodata	00000028 __mprec_bigtens
020062b8 g     F .text	00000104 __s2b
0202a538 g     F .text	00000044 lwip_getpeername
0200d0f4 g     F .text	000000a8 .hidden __floatunsidf
020308b0 g     F .text	000000e4 marvell_cfg_sgmii
0201adc8 g     F .text	0000025c pbuf_copy
0202f0e8 g     F .text	000001bc alt_tse_phy_restart_an
02020b64 g     F .text	000002a8 tcp_rexmit
02006990 g     F .text	00000060 __mcmp
02026a68 g     F .text	000000c0 pvPortMalloc
020260d4 g     F .text	0000015c altera_avalon_uart_init
0203c850 g     F .text	000000f4 netbuf_data
02004ce4 g     F .text	00000018 __fp_lock_all
02038f94 g     F .text	0000013c netconn_getaddr
02027bd8 g     F .text	0000004c alt_ic_irq_enabled
0216a530 g     O .bss	00000020 pphy_profiles
0200e460 g     F .text	0000003c vQueueDelete
02026ffc g     F .text	00000020 vPortEndScheduler
02019e1c g     F .text	000000b0 netif_set_up
02026b9c g     F .text	00000068 vListInitialise
02027e4c g     F .text	0000009c alt_alarm_stop
02013aac g     F .text	00000034 lwip_set_link_callback
020477bc g     O .bss	00000004 alt_irq_active
02029518 g     F .text	00000148 lwip_socket
020415bc g     O .rodata	00000010 tcp_pcb_lists
0202b9f8 g     F .text	00000074 tcpip_init
0200017c g     F .exceptions	000000cc alt_irq_handler
02044220 g     O .rwdata	00000028 alt_dev_null
0200fa18 g     F .text	00000028 xTaskGetTickCount
0200d848 g     F .text	000001e4 xQueueGenericSend
020008ac g     F .text	00000024 is_interface_active
020188a8 g     F .text	000000c4 ip4_addr_netmask_valid
02047784 g     O .bss	00000004 tcp_tmp_pcb
020391a8 g     F .text	000000d8 netconn_connect
0202efd0 g     F .text	00000118 alt_tse_phy_init
02025790 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
02039b30 g     F .text	00000080 netconn_sendto
020274d4 g     F .text	00000020 alt_dcache_flush_all
020063bc g     F .text	00000068 __hi0bits
0200facc g     F .text	00000188 uxTaskGetSystemState
02014910 g     F .text	00000160 tse_mac_raw_send
0200cf98 g     F .text	00000080 .hidden __fixdfsi
0201487c g     F .text	00000094 tse_sgdma_rx_isr
02010bac g     F .text	000000fc xTaskPriorityDisinherit
020190a0 g     F .text	000000b8 mem_init
0202808c g     F .text	000000f8 alt_write
020289dc g     F .text	0000017c lwip_connect
0201e0a0 g     F .text	00000148 tcp_send_fin
02045814 g       *ABS*	00000000 __ram_rwdata_end
0201f638 g     F .text	00000aac tcp_output
02047744 g     O .bss	00000004 tx_counter
020457bc g     O .rwdata	00000008 alt_dev_list
02019264 g     F .text	00000308 mem_trim
020130f0 g     F .text	00000064 write
020258d4 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
0203cb38 g     F .text	000000a0 _putc_r
020100c4 g     F .text	000000f4 xTaskRemoveFromEventList
02000284 g     F .text	00000028 vApplicationMallocFailedHook
0204397c g       *ABS*	00000000 __ram_rodata_end
0203c60c g     F .text	0000008c netbuf_free
020125a0 g     F .text	000000b0 fstat
0203933c g     F .text	000000cc netconn_listen_with_backlog
0204781c g     O .bss	00000004 tcp_input_pcb
02034594 g     F .text	0000012c raw_input
0200be90 g     F .text	000000f4 .hidden __ledf2
02030a84 g     F .text	00000078 DP83848C_link_status_read
0201f49c g     F .text	0000019c tcp_send_empty_ack
0200e034 g     F .text	000001e0 xQueuePeek
02020e0c g     F .text	00000128 tcp_rexmit_fast
02014cb4 g     F .text	000000e4 sys_sem_new
02006708 g     F .text	00000140 __pow5mult
02007550 g     F .text	0000145c ___vfiprintf_internal_r
020476c4 g     O .bss	00000004 __nlocale_changed
0202b810 g     F .text	0000008c tcpip_untimeout
0200ab40 g     F .text	00000058 .hidden __umodsi3
020189b0 g     F .text	000003f8 ipaddr_aton
020187dc g     F .text	000000cc ip4_addr_isbroadcast
02019df0 g     F .text	0000002c netif_set_default
020228f0 g     F .text	00000044 udp_recv
0202557c g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
02025688 g     F .text	00000054 alt_avalon_sgdma_register_callback
0216a550 g       *ABS*	00000000 end
0200eeb0 g     F .text	000000f8 vTaskDelete
02021860 g     F .text	00000114 sys_timeouts_mbox_fetch
02019ecc g     F .text	00000094 netif_set_down
02047748 g     O .bss	00000004 rx_counter
0201a264 g     F .text	0000036c pbuf_alloc
02019f9c g     F .text	000000c4 netif_set_link_up
02015190 g     F .text	00000070 sys_mbox_free
020267dc g     F .text	000001e8 altera_avalon_uart_write
0202be68 g     F .text	000001e4 alt_tse_phy_add_profile
02024738 g     F .text	00000148 altera_avalon_jtag_uart_init
02010ed0 g     F .text	00000038 pvTaskIncrementMutexHeldCount
020408cc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02038f34 g     F .text	00000060 netconn_delete
02025954 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
02025f48 g     F .text	0000007c alt_avalon_timer_sc_init
02026024 g     F .text	00000060 altera_avalon_uart_write_fd
0200d19c g     F .text	00000064 .hidden __clzsi2
0203cd74 g     F .text	000000d8 _snprintf_r
02026084 g     F .text	00000050 altera_avalon_uart_close_fd
0203c944 g     F .text	0000009c netbuf_next
02024edc g     F .text	00000260 altera_avalon_jtag_uart_write
020253ac g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
0203c9e0 g     F .text	00000068 netbuf_first
02004cd4 g     F .text	00000004 __sfp_lock_acquire
02005d74 g     F .text	000000e4 memchr
020457d4 g     O .rwdata	00000004 ip_addr_broadcast
02000a20 g     F .text	000021f8 ___vfprintf_internal_r
02029320 g     F .text	000001f8 lwip_sendto
020329c4 g     F .text	000000a0 ip_reass_tmr
02010318 g     F .text	000000f0 xTaskCheckForTimeOut
020254a4 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
02004e38 g     F .text	00000310 _free_r
02012cc0 g     F .text	0000022c alt_printf
02010a6c g     F .text	00000140 xTaskPriorityInherit
0201241c g     F .text	00000028 uxTimerGetTimerNumber
02005358 g     F .text	00000010 __locale_mb_cur_max
02022798 g     F .text	00000108 udp_connect
0203f2b0 g     F .text	00000180 __call_exitprocs
0203ab04 g     F .text	0000012c netconn_alloc
020477f0 g     O .bss	00000004 current_header
02029a24 g     F .text	000004e0 lwip_select
02029140 g     F .text	0000004c lwip_read
02047750 g     O .bss	00000004 rx_faulty_packets
020476c0 g     O .bss	00000004 __mlocale_changed
02014a70 g     F .text	000001d0 tse_mac_rcv
02010f08 g     F .text	000000d0 ulTaskNotifyTake
02019a24 g     F .text	0000005c netif_set_addr
02016410 g     F .text	000000a0 dhcp_arp_reply
020457a8 g     O .rwdata	00000004 __malloc_sbrk_base
02000248 g     F .text	0000003c _start
020477c0 g     O .bss	00000004 _alt_tick_rate
0200f884 g     F .text	0000002c vTaskSuspendAll
0200f0f4 g     F .text	00000120 eTaskGetState
0201b744 g     F .text	000000a4 pbuf_strstr
020257f4 g     F .text	00000054 alt_avalon_sgdma_open
0200fa40 g     F .text	0000002c xTaskGetTickCountFromISR
02000658 g     F .text	0000011c get_mac_addr
020342e0 g     F .text	000001cc memp_malloc
02006848 g     F .text	00000148 __lshift
020210c8 g     F .text	000002e8 tcp_zero_window_probe
020477c4 g     O .bss	00000004 _alt_nticks
0202dc20 g     F .text	000000cc alt_tse_phy_rd_mdio_reg
02013084 g     F .text	0000006c read
0203c040 g     F .text	00000114 do_write
02024528 g     F .text	000000ac alt_sys_init
0203f430 g     F .text	000001d0 __ssprint_r
020159d4 g     F .text	000000b8 dhcp_fine_tmr
02162154 g     O .bss	0000000a dhcp_rx_options_given
02026d94 g     F .text	00000098 uxListRemove
0203f198 g     F .text	00000118 __register_exitproc
020477dc g     O .bss	00000001 phy_profile_count
0202cca4 g     F .text	00000074 alt_tse_get_mac_group_index
02018de4 g     F .text	00000194 ipaddr_ntoa_r
02006510 g     F .text	000001f8 __multiply
02024b2c g     F .text	00000068 altera_avalon_jtag_uart_close
0204397c g       *ABS*	00000000 __ram_rwdata_start
020408cc g       *ABS*	00000000 __ram_rodata_start
02047820 g     O .bss	00000028 __malloc_current_mallinfo
020115ac g     F .text	00000088 xTaskNotifyStateClear
02047788 g     O .bss	00000004 tcp_bound_pcbs
0200f604 g     F .text	000000dc vTaskResume
02006d5c g     F .text	0000014c __d2b
02014d98 g     F .text	00000058 sys_sem_free
0201d2e8 g     F .text	0000005c tcp_seg_free
0200fe50 g     F .text	0000015c vTaskSwitchContext
0201b55c g     F .text	00000120 pbuf_memcmp
02011a54 g     F .text	00000090 vTimerSetReloadMode
0202bae4 g     F .text	0000003c mem_free_callback
0202daa0 g     F .text	00000058 alt_tse_phy_wr_mdio_addr
020245d4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0202776c g     F .text	000000e0 alt_get_fd
02010060 g     F .text	00000064 vTaskPlaceOnEventListRestricted
0203c154 g     F .text	000001d8 do_getaddr
02038c90 g     F .text	00000158 alt_busy_sleep
0203c790 g     F .text	000000c0 netbuf_chain
0201b808 g     F .text	00000020 tcp_init
0201c57c g     F .text	00000398 tcp_connect
020317e8 g     F .text	00000238 inet_chksum_pseudo_partial
02008ae4 g     F .text	00000054 _close_r
0201956c g     F .text	00000330 mem_malloc
02010fd8 g     F .text	00000114 xTaskNotifyWait
0202ff58 g     F .text	00000328 alt_tse_phy_get_common_speed
0203cabc g     F .text	0000007c memcmp
02024694 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0216a550 g       *ABS*	00000000 __alt_stack_base
020246e4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
020477dd g     O .bss	00000001 mac_group_count
0201a060 g     F .text	00000078 netif_set_link_down
02016a40 g     F .text	00000164 dhcp_renew
02011928 g     F .text	000000dc xTimerGenericCommand
02010478 g     F .text	00000044 vTaskSetTaskNumber
0203b770 g     F .text	00000084 do_disconnect
02002cf0 g     F .text	00000154 __swsetup_r
020002ac g     F .text	00000030 vApplicationStackOverflowHook
020147d8 g     F .text	000000a4 tse_sgdma_read_init
0200f47c g     F .text	0000011c vTaskSuspend
0200b444 g     F .text	000008e8 .hidden __divdf3
02004b94 g     F .text	00000118 __sfp
0200fc54 g     F .text	0000004c xTaskCatchUpTicks
02006fc0 g     F .text	00000078 __copybits
0200fa6c g     F .text	00000020 uxTaskGetNumberOfTasks
0201dbf0 g     F .text	0000008c tcp_eff_send_mss
02043e18 g     O .rwdata	00000408 __malloc_av_
02004ce0 g     F .text	00000004 __sinit_lock_release
0200bf84 g     F .text	00000718 .hidden __muldf3
021620ec g     O .bss	00000044 eth_tse
0200718c g     F .text	00000054 __sread
0202e83c g     F .text	00000424 alt_tse_mac_get_phy
02027664 g     F .text	00000108 alt_find_file
0202ac80 g     F .text	00000294 lwip_setsockopt
02027530 g     F .text	000000a4 alt_dev_llist_insert
0200d318 g     F .text	00000060 __malloc_lock
02012f8c g     F .text	000000b0 sbrk
0203cfc0 g     F .text	000021d8 ___svfprintf_internal_r
0200d754 g     F .text	0000009c xQueueTakeMutexRecursive
020256dc g     F .text	00000058 alt_avalon_sgdma_start
020161bc g     F .text	000001ac dhcp_inform
0202b774 g     F .text	0000009c tcpip_timeout
020048e8 g     F .text	0000005c _fflush_r
0202cf50 g     F .text	0000008c alt_tse_mac_set_duplex
02008b38 g     F .text	000000c4 _calloc_r
02034708 g     F .text	00000048 raw_connect
02039894 g     F .text	00000074 netconn_recv_tcp_pbuf
020110ec g     F .text	000001bc xTaskGenericNotify
0202784c g     F .text	000001f4 gettimeofday
020150c0 g     F .text	000000d0 sys_mbox_new
02013d9c g     F .text	000001f0 lwip_initialize_phys
020476ac g       *ABS*	00000000 __bss_start
02010430 g     F .text	00000048 uxTaskGetTaskNumber
02005fa0 g     F .text	00000128 memset
020008d0 g     F .text	00000040 main
020476e0 g     O .bss	00000004 alt_envp
020476c8 g     O .bss	00000004 __malloc_max_total_mem
02024634 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02009d34 g     F .text	00000018 __swbuf
02026cbc g     F .text	000000d8 vListInsert
02031144 g     F .text	00000048 icmp_dest_unreach
020457f8 g     O .rwdata	00000008 alt_sgdma_list
0201d860 g     F .text	00000034 tcp_sent
020072c0 g     F .text	00000008 __sclose
0201b4ac g     F .text	000000b0 pbuf_get_at
04000000 g       *ABS*	00000000 __alt_heap_limit
05020000 g       *ABS*	00000000 __alt_mem_mem_0
02008cec g     F .text	00000014 fclose
020117a4 g     F .text	00000068 xTimerCreateTimerTask
02003044 g     F .text	00001688 _dtoa_r
02034a00 g     F .text	00000080 raw_new
02005568 g     F .text	0000080c _malloc_r
0202bd3c g     F .text	00000088 tse_mac_SwReset
02009ea8 g     F .text	00000030 __ascii_wctomb
0202a57c g     F .text	00000044 lwip_getsockname
0200e4f8 g     F .text	00000028 ucQueueGetQueueType
0201331c g     F .text	000000fc ethernetif_input
02045800 g     O .rwdata	00000004 alt_errno
0200efa8 g     F .text	000000f0 vTaskDelayUntil
0202baa8 g     F .text	0000003c pbuf_free_callback
02026a24 g     F .text	00000044 __env_unlock
02019f60 g     F .text	0000003c netif_set_status_callback
02005148 g     F .text	000000c4 _fwalk
02039bb0 g     F .text	000000c8 netconn_send
0200e214 g     F .text	000000e4 xQueueReceiveFromISR
02038e78 g     F .text	000000bc netconn_new_with_proto_and_callback
020109f8 g     F .text	00000028 xTaskGetCurrentTaskHandle
02039c78 g     F .text	000001a4 netconn_write_partly
0203cbd8 g     F .text	000000c8 putc
0200a9e4 g     F .text	00000084 .hidden __divsi3
0202cbf0 g     F .text	00000048 alt_tse_mac_set_common_speed
02034960 g     F .text	000000a0 raw_remove
0200d4e0 g     F .text	00000098 xQueueGenericCreate
02004d14 g     F .text	00000124 _malloc_trim_r
020408cc g       *ABS*	00000000 __CTOR_END__
020139e4 g     F .text	0000004c get_mac_base
02047770 g     O .bss	00000001 pbuf_free_ooseq_pending
0202263c g     F .text	0000015c udp_bind
0201b828 g     F .text	0000004c tcp_tmr
02023c00 g     F .text	000003b4 etharp_query
020072c8 g     F .text	000000dc strcmp
02030afc g     F .text	0000004c lwip_init
0200d7f0 g     F .text	00000058 xQueueCreateCountingSemaphore
020408cc g       *ABS*	00000000 __flash_rodata_start
02015418 g     F .text	0000007c sys_thread_new
020408cc g       *ABS*	00000000 __DTOR_LIST__
02023914 g     F .text	000002ec etharp_output
020220d0 g     F .text	000000b8 udp_sendto_chksum
020112a8 g     F .text	000001e4 xTaskGenericNotifyFromISR
0200bd2c g     F .text	00000088 .hidden __nedf2
0200e4c4 g     F .text	00000034 vQueueSetQueueNumber
020244f0 g     F .text	00000038 alt_irq_init
0202cbb0 g     F .text	00000040 alt_tse_mac_get_common_speed
02012f28 g     F .text	00000064 alt_release_fd
0200f8b0 g     F .text	00000168 xTaskResumeAll
0202b89c g     F .text	00000070 tcpip_apimsg
0201a5d0 g     F .text	00000140 pbuf_alloced_custom
0200e3c4 g     F .text	00000064 uxQueueSpacesAvailable
02019d60 g     F .text	00000048 netif_set_gw
02040f88 g     O .rodata	00000100 .hidden __clz_tab
0200f7c0 g     F .text	00000090 vTaskStartScheduler
0201ab64 g     F .text	0000004c pbuf_clen
020476bc g     O .bss	00000004 _PathLocale
0203ca48 g     F .text	00000014 atexit
020139c4 g     F .text	00000020 get_mac_count
02008a84 g     F .text	00000060 _write_r
0201d344 g     F .text	00000038 tcp_setprio
02021fb0 g     F .text	00000054 udp_send
0202a5c0 g     F .text	000002c4 lwip_getsockopt
02005388 g     F .text	00000018 setlocale
0200e9bc g     F .text	00000050 xQueueIsQueueFullFromISR
0201b314 g     F .text	0000008c pbuf_coalesce
02034750 g     F .text	00000044 raw_recv
02012368 g     F .text	00000058 pvTimerGetTimerID
02015020 g     F .text	00000048 sys_mutex_unlock
02000910 g     F .text	000000a4 main_thread
02019a80 g     F .text	000000d8 netif_remove
02014fd4 g     F .text	0000004c sys_mutex_lock
02014e38 g     F .text	000000dc sys_arch_sem_wait
020457a0 g     O .rwdata	00000004 _impure_ptr
020476d8 g     O .bss	00000004 alt_argc
0201c914 g     F .text	00000738 tcp_slowtmr
02011b54 g     F .text	00000038 xTimerGetExpiryTime
020046cc g     F .text	0000021c __sflush_r
02012504 g     F .text	00000060 _do_dtors
02005374 g     F .text	00000008 __locale_cjk_lang
02006bec g     F .text	00000064 __ulp
0201d8c8 g     F .text	00000034 tcp_accept
02004cfc g     F .text	00000018 __fp_unlock_all
0203b7f4 g     F .text	00000200 do_listen
02010408 g     F .text	00000028 vTaskMissedYield
02013418 g     F .text	000001b0 ethernetif_init
020457b4 g     O .rwdata	00000008 alt_fs_list
0200e374 g     F .text	00000050 uxQueueMessagesWaiting
020477b4 g     O .bss	00000008 alt_resettime
0200fca0 g     F .text	000001b0 xTaskIncrementTick
02000020 g       *ABS*	00000000 __ram_exceptions_start
020053a0 g     F .text	0000000c localeconv
0202b5f4 g     F .text	000000b0 tcpip_input
0204778c g     O .bss	00000004 tcp_tw_pcbs
0202fdb0 g     F .text	000001a8 alt_tse_phy_set_adv_10
020003d0 g     F .text	00000048 InitNetwork
02027a74 g     F .text	00000050 alt_ic_isr_register
02014c60 g     F .text	00000054 sys_now
02021a30 g     F .text	00000580 udp_input
0200d3bc g     F .text	00000124 xQueueGenericReset
020123c0 g     F .text	0000005c vTimerSetTimerID
02045814 g       *ABS*	00000000 _edata
02025fc4 g     F .text	00000060 altera_avalon_uart_read_fd
0216a550 g       *ABS*	00000000 _end
0202ec60 g     F .text	00000248 alt_tse_mac_associate_phy
02019914 g     F .text	00000020 netif_init
02008d00 g     F .text	00000164 __fputwc
02000248 g       *ABS*	00000000 __ram_exceptions_end
02024b94 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02031bc8 g     F .text	000000f0 ip_route
0201c0a4 g     F .text	00000268 tcp_listen_with_backlog
0216a19c g     O .bss	00000274 lwip_stats
0200ead4 g     F .text	000000e0 xTaskCreate
0203bc38 g     F .text	000000fc do_recv
02026b4c g     F .text	00000024 vPortInitialiseBlocks
0201a870 g     F .text	000001b0 pbuf_header
020122f8 g     F .text	00000070 xTimerIsTimerActive
0204776c g     O .bss	00000004 netif_default
02027b4c g     F .text	0000008c alt_ic_irq_disable
0201dab4 g     F .text	0000010c tcp_pcb_remove
020476b8 g     O .bss	00000004 lwipStaticIp
0204774c g     O .bss	00000004 rx_missed_packets
02025848 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
020071e8 g     F .text	0000007c __swrite
02031b70 g     F .text	00000058 lwip_chksum_copy
020457ac g     O .rwdata	00000004 __malloc_trim_threshold
0201ace8 g     F .text	00000044 pbuf_chain
02005368 g     F .text	0000000c __locale_msgcharset
0201bd0c g     F .text	00000160 tcp_abandon
0203ca5c g     F .text	00000038 exit
0201dc7c g     F .text	0000003c tcp_debug_state_str
0202140c g     F .text	0000005c tcp_timer_needed
0200520c g     F .text	000000c4 _fwalk_reent
0203411c g     F .text	000001c4 memp_init
02015f34 g     F .text	0000004c dhcp_set_struct
0201989c g     F .text	00000078 mem_calloc
020069f0 g     F .text	000001fc __mdiff
0201d04c g     F .text	000000f8 tcp_fasttmr
0200aa68 g     F .text	00000074 .hidden __modsi3
0201d144 g     F .text	00000150 tcp_process_refused_data
0202be18 g     F .text	00000050 tse_mac_setGMIImode
0200f098 g     F .text	0000005c vTaskDelay
020307cc g     F .text	000000e4 marvell_cfg_gmii
04000000 g       *ABS*	00000000 __alt_data_end
02004cd8 g     F .text	00000004 __sfp_lock_release
020390d0 g     F .text	000000d8 netconn_bind
02029660 g     F .text	00000044 lwip_write
0202eea8 g     F .text	00000128 alt_tse_phy_cfg_pcs
02162160 g     O .bss	00000028 dhcp_rx_options_val
04000000 g       *ABS*	00000000 __alt_mem_tse_descriptor_memory_0
02010a20 g     F .text	0000004c xTaskGetSchedulerState
0202918c g     F .text	00000050 lwip_recv
02010ca8 g     F .text	00000140 vTaskPriorityDisinheritAfterTimeout
020264f8 g     F .text	00000054 altera_avalon_uart_close
0202b24c g     F .text	000000e4 lwip_ioctl
0204089c g     F .text	00000030 _exit
0201592c g     F .text	000000a8 dhcp_coarse_tmr
02027274 g     F .text	0000012c alt_alarm_start
0201d37c g     F .text	00000068 tcp_seg_copy
0204083c g     F .text	00000060 .hidden __muldi3
020053ac g     F .text	000001bc __smakebuf_r
02010e30 g     F .text	0000005c vTaskExitCritical
0201d8fc g     F .text	00000048 tcp_poll
020073a4 g     F .text	00000098 strlen
02026ee4 g     F .text	000000e0 pxPortInitialiseStack
0202b330 g     F .text	00000104 lwip_fcntl
02012b6c g     F .text	00000154 open
02021974 g     F .text	00000020 udp_init
02162188 g     O .bss	00008014 ram_heap
0200bdb4 g     F .text	000000dc .hidden __gedf2
020229d4 g     F .text	00000058 udp_new
02012eec g     F .text	0000003c alt_putchar
020457b0 g     O .rwdata	00000004 __wctomb
02028950 g     F .text	0000008c lwip_close
02026e58 g     F .text	00000050 enh_alt_irq_disable_all
02007538 g     F .text	00000018 __sprint_r
0202bc94 g     F .text	000000a8 tse_mac_aRxRead
02027a40 g     F .text	00000034 alt_icache_flush_all
0203c698 g     F .text	000000f8 netbuf_ref
020457ea g     O .rwdata	00000006 ethbroadcast
02010280 g     F .text	0000005c vTaskSetTimeOutState
02011a04 g     F .text	00000020 xTimerGetTimerDaemonTaskHandle
020415ac g     O .rodata	0000000d tcp_backoff
02012444 g     F .text	00000034 vTimerSetTimerNumber
02045804 g     O .rwdata	00000004 alt_priority_mask
020153b0 g     F .text	00000068 sys_arch_mbox_tryfetch
02027ac4 g     F .text	00000088 alt_ic_irq_enable
02002c18 g     F .text	0000001c __vfprintf_internal
020284f8 g     F .text	00000304 lwip_accept
02026588 g     F .text	00000218 altera_avalon_uart_read
0200e428 g     F .text	00000038 uxQueueMessagesWaitingFromISR
02009ed8 g     F .text	0000005c _wctomb_r
020269c4 g     F .text	00000060 __env_lock
02039908 g     F .text	000001a8 netconn_recv
0200e90c g     F .text	00000048 xQueueIsQueueEmptyFromISR
0203aaa4 g     F .text	00000060 do_newconn
0202ce70 g     F .text	000000e0 alt_tse_mac_set_speed
02015200 g     F .text	00000050 sys_mbox_post
02025420 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0200c69c g     F .text	000008fc .hidden __subdf3
02006424 g     F .text	000000b0 __lo0bits
0203b524 g     F .text	0000024c do_connect
02045808 g     O .rwdata	00000008 alt_alarm_list
020124a4 g     F .text	00000060 _do_ctors
0202fb5c g     F .text	00000254 alt_tse_phy_set_adv_100
02010e8c g     F .text	00000044 uxTaskResetEventItemValue
0202176c g     F .text	000000f4 sys_untimeout
02009de8 g     F .text	000000c0 wcrtomb
02034a80 g     F .text	00000e7c tcp_input
0200d668 g     F .text	0000005c xQueueCreateMutex
0201303c g     F .text	00000048 close
0204779c g     O .bss	00000004 alt_envsem
02031cb8 g     F .text	0000053c ip_input
0201148c g     F .text	00000120 vTaskNotifyGiveFromISR
0200082c g     F .text	00000038 get_hostname
0203b9f4 g     F .text	00000244 do_send
020128d8 g     F .text	00000084 alt_load
020457f0 g     O .rwdata	00000006 ethzero
0201b7e8 g     F .text	00000020 stats_init
0202cc38 g     F .text	0000006c alt_tse_get_system_index
02025e28 g     F .text	000000a8 alt_avalon_sgdma_init
0200db20 g     F .text	000000dc xQueueGiveFromISR
02008e88 g     F .text	00000080 fputwc
0203caa8 g     F .text	00000014 free
02019b58 g     F .text	000000e0 netif_find
02004cdc g     F .text	00000004 __sinit_lock_acquire
020005e4 g     F .text	00000074 xEthernetRun
02006198 g     F .text	00000120 __multadd
0202b6a4 g     F .text	000000d0 tcpip_callback_with_block
02006170 g     F .text	00000028 _Bfree
0202bb20 g     F .text	00000030 no_printf
0201ad2c g     F .text	0000009c pbuf_dechain



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__alt_mem_mem_0+0xfcfe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08409214 	ori	at,at,584
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x2000000>

Disassembly of section .exceptions:

02000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"		

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
 2000020:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
 2000024:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
 2000028:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)		 
 200002c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
 2000030:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
 2000034:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
 2000038:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp) 
 200003c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp) 
 2000040:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp) 
 2000044:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp) 
 2000048:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp) 
 200004c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
 2000068:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
 200006c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
 2000070:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
 2000074:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
 2000078:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
 200007c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
 2000080:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
 2000084:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
 2000088:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
 200008c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
 2000090:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
 2000094:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
 2000098:	df001c15 	stw	fp,112(sp)

0200009c <save_sp_to_pxCurrentTCB>:
 200009c:	06008134 	movhi	et,516

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
 20000a0:	c61dba04 	addi	et,et,30440
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
 20000a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
 20000a8:	c6c00015 	stw	sp,0(et)

020000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused 
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
 20000ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
 20000b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
 20000b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
 20000b8:	10002526 	beq	r2,zero,2000150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
 20000bc:	20002426 	beq	r4,zero,2000150 <soft_exceptions>

020000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
 20000c0:	200017c0 	call	200017c <alt_irq_handler>

020000c4 <restore_sp_from_pxCurrentTCB>:
 20000c4:	06008134 	movhi	et,516

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
 20000c8:	c61dba04 	addi	et,et,30440
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
 20000cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
 20000d0:	c6c00017 	ldw	sp,0(et)

020000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
 20000d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
 20000d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
 20000dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
 20000e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
 20000e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp) 
 20000e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp) 
 20000ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp) 
 20000f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp) 
 20000f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp) 
 20000f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
 20000fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 2000100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 2000104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 2000108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 200010c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 2000110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 2000114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 2000118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 200011c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 2000120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 2000124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 2000128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 200012c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 2000130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 2000134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 2000138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 200013c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 2000140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 2000144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 2000148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 200014c:	ef80083a 	eret

02000150 <soft_exceptions>:
   
	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 2000150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 2000154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 2000158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 200015c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 2000160:	c0000226 	beq	et,zero,200016c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 2000164:	003da03a 	break	0
  	br		restore_context			# its something else
 2000168:	003fda06 	br	20000d4 <__alt_mem_mem_0+0xfcfe00d4>

0200016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 200016c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 2000170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 2000174:	200fe500 	call	200fe50 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore. 
 2000178:	003fd206 	br	20000c4 <__alt_mem_mem_0+0xfcfe00c4>

0200017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 200017c:	defff904 	addi	sp,sp,-28
 2000180:	dfc00615 	stw	ra,24(sp)
 2000184:	df000515 	stw	fp,20(sp)
 2000188:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200018c:	0005313a 	rdctl	r2,ipending
 2000190:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000194:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000198:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 200019c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 20001a0:	00800044 	movi	r2,1
 20001a4:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 20001a8:	e0fffb17 	ldw	r3,-20(fp)
 20001ac:	e0bffc17 	ldw	r2,-16(fp)
 20001b0:	1884703a 	and	r2,r3,r2
 20001b4:	10001426 	beq	r2,zero,2000208 <alt_irq_handler+0x8c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 20001b8:	008085f4 	movhi	r2,535
 20001bc:	10a90404 	addi	r2,r2,-23536
 20001c0:	e0fffd17 	ldw	r3,-12(fp)
 20001c4:	180690fa 	slli	r3,r3,3
 20001c8:	10c5883a 	add	r2,r2,r3
 20001cc:	10c00017 	ldw	r3,0(r2)
 20001d0:	008085f4 	movhi	r2,535
 20001d4:	10a90404 	addi	r2,r2,-23536
 20001d8:	e13ffd17 	ldw	r4,-12(fp)
 20001dc:	200890fa 	slli	r4,r4,3
 20001e0:	1105883a 	add	r2,r2,r4
 20001e4:	10800104 	addi	r2,r2,4
 20001e8:	10800017 	ldw	r2,0(r2)
 20001ec:	1009883a 	mov	r4,r2
 20001f0:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 20001f4:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20001f8:	0005313a 	rdctl	r2,ipending
 20001fc:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000200:	e0bfff17 	ldw	r2,-4(fp)
 2000204:	00000706 	br	2000224 <alt_irq_handler+0xa8>
      }
      mask <<= 1;
 2000208:	e0bffc17 	ldw	r2,-16(fp)
 200020c:	1085883a 	add	r2,r2,r2
 2000210:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000214:	e0bffd17 	ldw	r2,-12(fp)
 2000218:	10800044 	addi	r2,r2,1
 200021c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 2000220:	003fe106 	br	20001a8 <__alt_mem_mem_0+0xfcfe01a8>

    active = alt_irq_pending ();
 2000224:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 2000228:	e0bffb17 	ldw	r2,-20(fp)
 200022c:	103fdb1e 	bne	r2,zero,200019c <__alt_mem_mem_0+0xfcfe019c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 2000230:	0001883a 	nop
 2000234:	e037883a 	mov	sp,fp
 2000238:	dfc00117 	ldw	ra,4(sp)
 200023c:	df000017 	ldw	fp,0(sp)
 2000240:	dec00204 	addi	sp,sp,8
 2000244:	f800283a 	ret

Disassembly of section .text:

02000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 200024c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000250:	06808134 	movhi	gp,516
    ori gp, gp, %lo(_gp)
 2000254:	d6b5e714 	ori	gp,gp,55196
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000258:	00808134 	movhi	r2,516
    ori r2, r2, %lo(__bss_start)
 200025c:	109dab14 	ori	r2,r2,30380

    movhi r3, %hi(__bss_end)
 2000260:	00c085b4 	movhi	r3,534
    ori r3, r3, %lo(__bss_end)
 2000264:	18e95414 	ori	r3,r3,42320

    beq r2, r3, 1f
 2000268:	10c00326 	beq	r2,r3,2000278 <_start+0x30>

0:
    stw zero, (r2)
 200026c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000274:	10fffd36 	bltu	r2,r3,200026c <__alt_mem_mem_0+0xfcfe026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000278:	20128d80 	call	20128d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 200027c:	200d2400 	call	200d240 <alt_main>

02000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000280:	003fff06 	br	2000280 <__alt_mem_mem_0+0xfcfe0280>

02000284 <vApplicationMallocFailedHook>:

static int nw_ready;
static sys_thread_t main_thread_handle;

// hook functions
void vApplicationMallocFailedHook(){
 2000284:	defffe04 	addi	sp,sp,-8
 2000288:	dfc00115 	stw	ra,4(sp)
 200028c:	df000015 	stw	fp,0(sp)
 2000290:	d839883a 	mov	fp,sp
    for(;;){
        vTaskDelay(pdMS_TO_TICKS(1000));
 2000294:	0100fa04 	movi	r4,1000
 2000298:	200f0980 	call	200f098 <vTaskDelay>
        alt_printf("vApplicationMallocFailedHook \r\n");
 200029c:	01008134 	movhi	r4,516
 20002a0:	21023304 	addi	r4,r4,2252
 20002a4:	2012cc00 	call	2012cc0 <alt_printf>
    }
 20002a8:	003ffa06 	br	2000294 <__alt_mem_mem_0+0xfcfe0294>

020002ac <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName ){
 20002ac:	defffc04 	addi	sp,sp,-16
 20002b0:	dfc00315 	stw	ra,12(sp)
 20002b4:	df000215 	stw	fp,8(sp)
 20002b8:	df000204 	addi	fp,sp,8
 20002bc:	e13ffe15 	stw	r4,-8(fp)
 20002c0:	e17fff15 	stw	r5,-4(fp)
    for(;;){
        vTaskDelay(pdMS_TO_TICKS(1000));
 20002c4:	0100fa04 	movi	r4,1000
 20002c8:	200f0980 	call	200f098 <vTaskDelay>
        alt_printf("vApplicationStackOverflowHook \r\n");
 20002cc:	01008134 	movhi	r4,516
 20002d0:	21023b04 	addi	r4,r4,2284
 20002d4:	2012cc00 	call	2012cc0 <alt_printf>
    }
 20002d8:	003ffa06 	br	20002c4 <__alt_mem_mem_0+0xfcfe02c4>

020002dc <StatusCallback>:
}

// callback function for when the DHCP subsystem acquires an IP address.
static void StatusCallback(struct netif* netif)
{
 20002dc:	deffbd04 	addi	sp,sp,-268
 20002e0:	dfc04215 	stw	ra,264(sp)
 20002e4:	df004115 	stw	fp,260(sp)
 20002e8:	df004104 	addi	fp,sp,260
 20002ec:	e13fff15 	stw	r4,-4(fp)
	// get IP and stuff
	printf("[ethernet] Acquired IP address via DHCP client for interface: %s\n", netif->name);
 20002f0:	e0bfff17 	ldw	r2,-4(fp)
 20002f4:	10800e84 	addi	r2,r2,58
 20002f8:	100b883a 	mov	r5,r2
 20002fc:	01008134 	movhi	r4,516
 2000300:	21024404 	addi	r4,r4,2320
 2000304:	20009e40 	call	20009e4 <printf>

	char buf[255];

	print_ipad(netif->ip_addr.addr, buf);
 2000308:	e0bfff17 	ldw	r2,-4(fp)
 200030c:	10800117 	ldw	r2,4(r2)
 2000310:	e17fbf04 	addi	r5,fp,-260
 2000314:	1009883a 	mov	r4,r2
 2000318:	2013ca40 	call	2013ca4 <print_ipad>
	printf("[ethernet] IP address : %s\n", buf);
 200031c:	e17fbf04 	addi	r5,fp,-260
 2000320:	01008134 	movhi	r4,516
 2000324:	21025504 	addi	r4,r4,2388
 2000328:	20009e40 	call	20009e4 <printf>

	print_ipad(netif->netmask.addr, buf);
 200032c:	e0bfff17 	ldw	r2,-4(fp)
 2000330:	10800217 	ldw	r2,8(r2)
 2000334:	e17fbf04 	addi	r5,fp,-260
 2000338:	1009883a 	mov	r4,r2
 200033c:	2013ca40 	call	2013ca4 <print_ipad>
	printf("[ethernet] Subnet     : %s\n", buf);
 2000340:	e17fbf04 	addi	r5,fp,-260
 2000344:	01008134 	movhi	r4,516
 2000348:	21025c04 	addi	r4,r4,2416
 200034c:	20009e40 	call	20009e4 <printf>

    print_ipad(netif->gw.addr, buf);
 2000350:	e0bfff17 	ldw	r2,-4(fp)
 2000354:	10800317 	ldw	r2,12(r2)
 2000358:	e17fbf04 	addi	r5,fp,-260
 200035c:	1009883a 	mov	r4,r2
 2000360:	2013ca40 	call	2013ca4 <print_ipad>
	printf("[ethernet] Gateway    : %s\n", buf);
 2000364:	e17fbf04 	addi	r5,fp,-260
 2000368:	01008134 	movhi	r4,516
 200036c:	21026304 	addi	r4,r4,2444
 2000370:	20009e40 	call	20009e4 <printf>
}
 2000374:	0001883a 	nop
 2000378:	e037883a 	mov	sp,fp
 200037c:	dfc00117 	ldw	ra,4(sp)
 2000380:	df000017 	ldw	fp,0(sp)
 2000384:	dec00204 	addi	sp,sp,8
 2000388:	f800283a 	ret

0200038c <LinkCallback>:

static void LinkCallback(struct netif* netif)
{
 200038c:	defffd04 	addi	sp,sp,-12
 2000390:	dfc00215 	stw	ra,8(sp)
 2000394:	df000115 	stw	fp,4(sp)
 2000398:	df000104 	addi	fp,sp,4
 200039c:	e13fff15 	stw	r4,-4(fp)
	// link change callback
	// TODO release semaphore
	// TODO switch context

	alt_printf("[ethernet] Link Callback for interface: %s\n", netif->name);
 20003a0:	e0bfff17 	ldw	r2,-4(fp)
 20003a4:	10800e84 	addi	r2,r2,58
 20003a8:	100b883a 	mov	r5,r2
 20003ac:	01008134 	movhi	r4,516
 20003b0:	21026a04 	addi	r4,r4,2472
 20003b4:	2012cc00 	call	2012cc0 <alt_printf>
}
 20003b8:	0001883a 	nop
 20003bc:	e037883a 	mov	sp,fp
 20003c0:	dfc00117 	ldw	ra,4(sp)
 20003c4:	df000017 	ldw	fp,0(sp)
 20003c8:	dec00204 	addi	sp,sp,8
 20003cc:	f800283a 	ret

020003d0 <InitNetwork>:

int InitNetwork(void)
{
 20003d0:	defffe04 	addi	sp,sp,-8
 20003d4:	dfc00115 	stw	ra,4(sp)
 20003d8:	df000015 	stw	fp,0(sp)
 20003dc:	d839883a 	mov	fp,sp
	// register new DHCP "IP attained" callback function.
	// if DHCP is acquired, ws_ipset will be called instead of dhc_main_ipset().
	lwip_set_status_callback(StatusCallback);
 20003e0:	01008034 	movhi	r4,512
 20003e4:	2100b704 	addi	r4,r4,732
 20003e8:	2013a780 	call	2013a78 <lwip_set_status_callback>
	lwip_set_link_callback(LinkCallback);
 20003ec:	01008034 	movhi	r4,512
 20003f0:	2100e304 	addi	r4,r4,908
 20003f4:	2013aac0 	call	2013aac <lwip_set_link_callback>

	// Initialize LwIP TCP/IP stack.
	// This function is blocking till the the interface is up.
	lwip_initialize(1);
 20003f8:	01000044 	movi	r4,1
 20003fc:	20135c80 	call	20135c8 <lwip_initialize>

	return EXIT_SUCCESS;
 2000400:	0005883a 	mov	r2,zero
}
 2000404:	e037883a 	mov	sp,fp
 2000408:	dfc00117 	ldw	ra,4(sp)
 200040c:	df000017 	ldw	fp,0(sp)
 2000410:	dec00204 	addi	sp,sp,8
 2000414:	f800283a 	ret

02000418 <WaitOnPHY>:

static int WaitOnPHY(void)
{
 2000418:	defff904 	addi	sp,sp,-28
 200041c:	dfc00615 	stw	ra,24(sp)
 2000420:	df000515 	stw	fp,20(sp)
 2000424:	df000504 	addi	fp,sp,20
	int phyadd;
	int phyid;
	int phyid2 = 0;
 2000428:	e03ffd15 	stw	zero,-12(fp)

	np_tse_mac* pmac;
	bool bInitialized = false;
 200042c:	e03fff05 	stb	zero,-4(fp)

	while (!bInitialized) {
 2000430:	00003606 	br	200050c <WaitOnPHY+0xf4>
		alt_printf("[ethernet] PHY INFO: Interface: %d Waiting for PHY\n", 0);
 2000434:	000b883a 	mov	r5,zero
 2000438:	01008134 	movhi	r4,516
 200043c:	21027504 	addi	r4,r4,2516
 2000440:	2012cc00 	call	2012cc0 <alt_printf>

		// initialize the structure necessary for "pmac" to function.
		pmac = (np_tse_mac*)TSE_MAC_0_BASE;
 2000444:	00810034 	movhi	r2,1024
 2000448:	10880004 	addi	r2,r2,8192
 200044c:	e0bffe15 	stw	r2,-8(fp)


		for (phyadd = 0x00; phyadd < 0xff; phyadd++) {
 2000450:	e03ffb15 	stw	zero,-20(fp)
 2000454:	00001a06 	br	20004c0 <WaitOnPHY+0xa8>
			IOWR(&pmac->MDIO_ADDR0, 0, phyadd);
 2000458:	e0bffe17 	ldw	r2,-8(fp)
 200045c:	10800f04 	addi	r2,r2,60
 2000460:	e0fffb17 	ldw	r3,-20(fp)
 2000464:	10c00035 	stwio	r3,0(r2)

			phyid = IORD(&pmac->MDIO_IFACE.PHY_ID1, 0);
 2000468:	e0bffe17 	ldw	r2,-8(fp)
 200046c:	1080a204 	addi	r2,r2,648
 2000470:	10800037 	ldwio	r2,0(r2)
 2000474:	e0bffc15 	stw	r2,-16(fp)
			phyid2 = IORD(&pmac->MDIO_IFACE.PHY_ID2, 0);
 2000478:	e0bffe17 	ldw	r2,-8(fp)
 200047c:	1080a304 	addi	r2,r2,652
 2000480:	10800037 	ldwio	r2,0(r2)
 2000484:	e0bffd15 	stw	r2,-12(fp)

			if (phyid != phyid2) {
 2000488:	e0fffc17 	ldw	r3,-16(fp)
 200048c:	e0bffd17 	ldw	r2,-12(fp)
 2000490:	18800826 	beq	r3,r2,20004b4 <WaitOnPHY+0x9c>
				alt_printf("[ethernet] PHY INFO: [PHY ID] 0x%x %x %x\n", phyadd, phyid, phyid2);
 2000494:	e1fffd17 	ldw	r7,-12(fp)
 2000498:	e1bffc17 	ldw	r6,-16(fp)
 200049c:	e17ffb17 	ldw	r5,-20(fp)
 20004a0:	01008134 	movhi	r4,516
 20004a4:	21028204 	addi	r4,r4,2568
 20004a8:	2012cc00 	call	2012cc0 <alt_printf>
				phyadd = 0xff;
 20004ac:	00803fc4 	movi	r2,255
 20004b0:	e0bffb15 	stw	r2,-20(fp)

		// initialize the structure necessary for "pmac" to function.
		pmac = (np_tse_mac*)TSE_MAC_0_BASE;


		for (phyadd = 0x00; phyadd < 0xff; phyadd++) {
 20004b4:	e0bffb17 	ldw	r2,-20(fp)
 20004b8:	10800044 	addi	r2,r2,1
 20004bc:	e0bffb15 	stw	r2,-20(fp)
 20004c0:	e0bffb17 	ldw	r2,-20(fp)
 20004c4:	10803fd0 	cmplti	r2,r2,255
 20004c8:	103fe31e 	bne	r2,zero,2000458 <__alt_mem_mem_0+0xfcfe0458>
				alt_printf("[ethernet] PHY INFO: [PHY ID] 0x%x %x %x\n", phyadd, phyid, phyid2);
				phyadd = 0xff;
			}
		}

		if ((phyadd == 0xff) && (phyid == phyid2)) {
 20004cc:	e0bffb17 	ldw	r2,-20(fp)
 20004d0:	10803fd8 	cmpnei	r2,r2,255
 20004d4:	10000b1e 	bne	r2,zero,2000504 <WaitOnPHY+0xec>
 20004d8:	e0fffc17 	ldw	r3,-16(fp)
 20004dc:	e0bffd17 	ldw	r2,-12(fp)
 20004e0:	1880081e 	bne	r3,r2,2000504 <WaitOnPHY+0xec>
			alt_printf("[ethernet] PHY INFO: No PHY found... restart detect\n");
 20004e4:	01008134 	movhi	r4,516
 20004e8:	21028d04 	addi	r4,r4,2612
 20004ec:	2012cc00 	call	2012cc0 <alt_printf>
			bInitialized = true;
 20004f0:	00800044 	movi	r2,1
 20004f4:	e0bfff05 	stb	r2,-4(fp)
			mssleep(1000);
 20004f8:	0100fa04 	movi	r4,1000
 20004fc:	200f0980 	call	200f098 <vTaskDelay>
 2000500:	00000206 	br	200050c <WaitOnPHY+0xf4>
		}
		else
			bInitialized = true;
 2000504:	00800044 	movi	r2,1
 2000508:	e0bfff05 	stb	r2,-4(fp)
	int phyid2 = 0;

	np_tse_mac* pmac;
	bool bInitialized = false;

	while (!bInitialized) {
 200050c:	e0bfff03 	ldbu	r2,-4(fp)
 2000510:	1080005c 	xori	r2,r2,1
 2000514:	10803fcc 	andi	r2,r2,255
 2000518:	103fc61e 	bne	r2,zero,2000434 <__alt_mem_mem_0+0xfcfe0434>
		else
			bInitialized = true;
	}

	// issue a PHY reset.
	IOWR(&pmac->MDIO_IFACE.CONTROL, 0, PCS_CTL_an_enable | PCS_CTL_sw_reset);
 200051c:	e0bffe17 	ldw	r2,-8(fp)
 2000520:	1080a004 	addi	r2,r2,640
 2000524:	00e40014 	movui	r3,36864
 2000528:	10c00035 	stwio	r3,0(r2)
	if (((IORD(&pmac->MDIO_IFACE.CONTROL, 0) & PCS_CTL_rx_slpbk) != 0) || ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0)) {
 200052c:	e0bffe17 	ldw	r2,-8(fp)
 2000530:	1080a004 	addi	r2,r2,640
 2000534:	10800037 	ldwio	r2,0(r2)
 2000538:	1090000c 	andi	r2,r2,16384
 200053c:	1000051e 	bne	r2,zero,2000554 <WaitOnPHY+0x13c>
 2000540:	e0bffe17 	ldw	r2,-8(fp)
 2000544:	1080a104 	addi	r2,r2,644
 2000548:	10800037 	ldwio	r2,0(r2)
 200054c:	1080080c 	andi	r2,r2,32
 2000550:	1000071e 	bne	r2,zero,2000570 <WaitOnPHY+0x158>
		IOWR(&pmac->MDIO_IFACE.CONTROL, 0, PCS_CTL_an_enable | PCS_CTL_sw_reset);
 2000554:	e0bffe17 	ldw	r2,-8(fp)
 2000558:	1080a004 	addi	r2,r2,640
 200055c:	00e40014 	movui	r3,36864
 2000560:	10c00035 	stwio	r3,0(r2)
		alt_printf("[ethernet] PHY INFO: Issuing PHY Reset\n");
 2000564:	01008134 	movhi	r4,516
 2000568:	21029b04 	addi	r4,r4,2668
 200056c:	2012cc00 	call	2012cc0 <alt_printf>
	}

	// holding pattern until autonegotiation completes.
	if ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0) {
 2000570:	e0bffe17 	ldw	r2,-8(fp)
 2000574:	1080a104 	addi	r2,r2,644
 2000578:	10800037 	ldwio	r2,0(r2)
 200057c:	1080080c 	andi	r2,r2,32
 2000580:	1000101e 	bne	r2,zero,20005c4 <WaitOnPHY+0x1ac>
		alt_printf("[ethernet] PHY INFO: Waiting on PHY link...\n");
 2000584:	01008134 	movhi	r4,516
 2000588:	2102a504 	addi	r4,r4,2708
 200058c:	2012cc00 	call	2012cc0 <alt_printf>

		while ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0)
 2000590:	00000206 	br	200059c <WaitOnPHY+0x184>
			mssleep(10);
 2000594:	01000284 	movi	r4,10
 2000598:	200f0980 	call	200f098 <vTaskDelay>

	// holding pattern until autonegotiation completes.
	if ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0) {
		alt_printf("[ethernet] PHY INFO: Waiting on PHY link...\n");

		while ((IORD(&pmac->MDIO_IFACE.STATUS, 0) & PCS_ST_an_done) == 0)
 200059c:	e0bffe17 	ldw	r2,-8(fp)
 20005a0:	1080a104 	addi	r2,r2,644
 20005a4:	10800037 	ldwio	r2,0(r2)
 20005a8:	1080080c 	andi	r2,r2,32
 20005ac:	103ff926 	beq	r2,zero,2000594 <__alt_mem_mem_0+0xfcfe0594>
			mssleep(10);

		alt_printf("[ethernet] PHY INFO: PHY link detected, allowing network to start.\n");
 20005b0:	01008134 	movhi	r4,516
 20005b4:	2102b104 	addi	r4,r4,2756
 20005b8:	2012cc00 	call	2012cc0 <alt_printf>
		
		mssleep(1000);
 20005bc:	0100fa04 	movi	r4,1000
 20005c0:	200f0980 	call	200f098 <vTaskDelay>
	}

	mssleep(10);
 20005c4:	01000284 	movi	r4,10
 20005c8:	200f0980 	call	200f098 <vTaskDelay>

	return 0;
 20005cc:	0005883a 	mov	r2,zero
}
 20005d0:	e037883a 	mov	sp,fp
 20005d4:	dfc00117 	ldw	ra,4(sp)
 20005d8:	df000017 	ldw	fp,0(sp)
 20005dc:	dec00204 	addi	sp,sp,8
 20005e0:	f800283a 	ret

020005e4 <xEthernetRun>:


void xEthernetRun()
{
 20005e4:	defffd04 	addi	sp,sp,-12
 20005e8:	dfc00215 	stw	ra,8(sp)
 20005ec:	df000115 	stw	fp,4(sp)
 20005f0:	df000104 	addi	fp,sp,4
    alt_printf("--------- Init Network ---------\r\n");
 20005f4:	01008134 	movhi	r4,516
 20005f8:	2102c204 	addi	r4,r4,2824
 20005fc:	2012cc00 	call	2012cc0 <alt_printf>

	// initialize PHY
	WaitOnPHY();
 2000600:	20004180 	call	2000418 <WaitOnPHY>

	if (InitNetwork() != EXIT_SUCCESS) {
 2000604:	20003d00 	call	20003d0 <InitNetwork>
 2000608:	10000326 	beq	r2,zero,2000618 <xEthernetRun+0x34>
		// the network initialization has failed.
		alt_printf("[ethernet] Network initialize failed!\n");
 200060c:	01008134 	movhi	r4,516
 2000610:	2102cb04 	addi	r4,r4,2860
 2000614:	2012cc00 	call	2012cc0 <alt_printf>
	}

    nw_ready = 1;
 2000618:	00800044 	movi	r2,1
 200061c:	d0a7c415 	stw	r2,-24816(gp)
	alt_printf("--------- Init Done ---------\r\n");
 2000620:	01008134 	movhi	r4,516
 2000624:	2102d504 	addi	r4,r4,2900
 2000628:	2012cc00 	call	2012cc0 <alt_printf>
    /*sys_thread_new("ping", PingThread, NULL,
    		THREAD_STACKSIZE,
            DEFAULT_THREAD_PRIO);*/

	struct netif* ethif;
	ethif = get_netif(0);
 200062c:	0009883a 	mov	r4,zero
 2000630:	2013a300 	call	2013a30 <get_netif>
 2000634:	e0bfff15 	stw	r2,-4(fp)

	IP4_ADDR(&PingIp, 192, 168, 1, 100);
 2000638:	009900b4 	movhi	r2,25602
 200063c:	10aa3004 	addi	r2,r2,-22336
 2000640:	d0a7c615 	stw	r2,-24808(gp)
	while(1) {

        //lwip_ping_target(PingIp.addr, 1, 0, 100);
		// sleep for 1 second
		//lwip_ping_target(PingIp.addr, 10, 0, 100);
        ethernetif_input(ethif);
 2000644:	e13fff17 	ldw	r4,-4(fp)
 2000648:	201331c0 	call	201331c <ethernetif_input>
        vTaskDelay(10);
 200064c:	01000284 	movi	r4,10
 2000650:	200f0980 	call	200f098 <vTaskDelay>
	}
 2000654:	003ffb06 	br	2000644 <__alt_mem_mem_0+0xfcfe0644>

02000658 <get_mac_addr>:
    //vTaskDelete(NULL);
}

// callback wrapper for lwip to get the interface configurations
int get_mac_addr(int iface, struct netif* ethif, unsigned char mac_addr[6])
{
 2000658:	defff704 	addi	sp,sp,-36
 200065c:	dfc00815 	stw	ra,32(sp)
 2000660:	df000715 	stw	fp,28(sp)
 2000664:	df000704 	addi	fp,sp,28
 2000668:	e13ffd15 	stw	r4,-12(fp)
 200066c:	e17ffe15 	stw	r5,-8(fp)
 2000670:	e1bfff15 	stw	r6,-4(fp)
	mac_addr[0] = 0x12;
 2000674:	e0bfff17 	ldw	r2,-4(fp)
 2000678:	00c00484 	movi	r3,18
 200067c:	10c00005 	stb	r3,0(r2)
	mac_addr[1] = 0x23;
 2000680:	e0bfff17 	ldw	r2,-4(fp)
 2000684:	10800044 	addi	r2,r2,1
 2000688:	00c008c4 	movi	r3,35
 200068c:	10c00005 	stb	r3,0(r2)
	mac_addr[2] = 0x45;
 2000690:	e0bfff17 	ldw	r2,-4(fp)
 2000694:	10800084 	addi	r2,r2,2
 2000698:	00c01144 	movi	r3,69
 200069c:	10c00005 	stb	r3,0(r2)
	mac_addr[3] = 0xFF;
 20006a0:	e0bfff17 	ldw	r2,-4(fp)
 20006a4:	108000c4 	addi	r2,r2,3
 20006a8:	00ffffc4 	movi	r3,-1
 20006ac:	10c00005 	stb	r3,0(r2)
	mac_addr[4] = 0xFF;
 20006b0:	e0bfff17 	ldw	r2,-4(fp)
 20006b4:	10800104 	addi	r2,r2,4
 20006b8:	00ffffc4 	movi	r3,-1
 20006bc:	10c00005 	stb	r3,0(r2)
	mac_addr[5] = 0xF0 + iface;
 20006c0:	e0bfff17 	ldw	r2,-4(fp)
 20006c4:	10800144 	addi	r2,r2,5
 20006c8:	e0fffd17 	ldw	r3,-12(fp)
 20006cc:	18fffc04 	addi	r3,r3,-16
 20006d0:	10c00005 	stb	r3,0(r2)

	// only show info if net is not NULL
	if (ethif)
 20006d4:	e0bffe17 	ldw	r2,-8(fp)
 20006d8:	10002026 	beq	r2,zero,200075c <get_mac_addr+0x104>
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 20006dc:	e0bfff17 	ldw	r2,-4(fp)
 20006e0:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 20006e4:	12003fcc 	andi	r8,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 20006e8:	e0bfff17 	ldw	r2,-4(fp)
 20006ec:	10800044 	addi	r2,r2,1
 20006f0:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 20006f4:	11803fcc 	andi	r6,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 20006f8:	e0bfff17 	ldw	r2,-4(fp)
 20006fc:	10800084 	addi	r2,r2,2
 2000700:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 2000704:	11c03fcc 	andi	r7,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 2000708:	e0bfff17 	ldw	r2,-4(fp)
 200070c:	108000c4 	addi	r2,r2,3
 2000710:	10800003 	ldbu	r2,0(r2)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 2000714:	10803fcc 	andi	r2,r2,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 2000718:	e0ffff17 	ldw	r3,-4(fp)
 200071c:	18c00104 	addi	r3,r3,4
 2000720:	18c00003 	ldbu	r3,0(r3)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 2000724:	18c03fcc 	andi	r3,r3,255
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);
 2000728:	e13fff17 	ldw	r4,-4(fp)
 200072c:	21000144 	addi	r4,r4,5
 2000730:	21000003 	ldbu	r4,0(r4)
	mac_addr[4] = 0xFF;
	mac_addr[5] = 0xF0 + iface;

	// only show info if net is not NULL
	if (ethif)
		printf("[ethernet] Using Ethernet MAC address %02x:%02x:%02x:%02x:%02x:%02x for interface: %d\n",
 2000734:	21003fcc 	andi	r4,r4,255
 2000738:	e17ffd17 	ldw	r5,-12(fp)
 200073c:	d9400315 	stw	r5,12(sp)
 2000740:	d9000215 	stw	r4,8(sp)
 2000744:	d8c00115 	stw	r3,4(sp)
 2000748:	d8800015 	stw	r2,0(sp)
 200074c:	400b883a 	mov	r5,r8
 2000750:	01008134 	movhi	r4,516
 2000754:	2102dd04 	addi	r4,r4,2932
 2000758:	20009e40 	call	20009e4 <printf>
				mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5], iface);

	return EXIT_SUCCESS;
 200075c:	0005883a 	mov	r2,zero
}
 2000760:	e037883a 	mov	sp,fp
 2000764:	dfc00117 	ldw	ra,4(sp)
 2000768:	df000017 	ldw	fp,0(sp)
 200076c:	dec00204 	addi	sp,sp,8
 2000770:	f800283a 	ret

02000774 <get_ip_addr>:

// callback wrapper for lwip to get the IP configurations
int get_ip_addr(int iface, ip_addr_t* ipaddr, ip_addr_t* netmask, ip_addr_t* gw, int* use_dhcp)
{
 2000774:	deffba04 	addi	sp,sp,-280
 2000778:	dfc04515 	stw	ra,276(sp)
 200077c:	df004415 	stw	fp,272(sp)
 2000780:	df004404 	addi	fp,sp,272
 2000784:	e13ffc15 	stw	r4,-16(fp)
 2000788:	e17ffd15 	stw	r5,-12(fp)
 200078c:	e1bffe15 	stw	r6,-8(fp)
 2000790:	e1ffff15 	stw	r7,-4(fp)
	// set configuration
	IP4_ADDR(ipaddr, 192, 168, 1, 218);
 2000794:	e0fffd17 	ldw	r3,-12(fp)
 2000798:	00b680b4 	movhi	r2,55810
 200079c:	10aa3004 	addi	r2,r2,-22336
 20007a0:	18800015 	stw	r2,0(r3)
	IP4_ADDR(netmask, 255, 255, 255, 0);
 20007a4:	e0fffe17 	ldw	r3,-8(fp)
 20007a8:	00804034 	movhi	r2,256
 20007ac:	10bfffc4 	addi	r2,r2,-1
 20007b0:	18800015 	stw	r2,0(r3)
	IP4_ADDR(gw, 192, 168, 1, 1);
 20007b4:	e0ffff17 	ldw	r3,-4(fp)
 20007b8:	008040b4 	movhi	r2,258
 20007bc:	10aa3004 	addi	r2,r2,-22336
 20007c0:	18800015 	stw	r2,0(r3)
	*use_dhcp = 0;
 20007c4:	e0800217 	ldw	r2,8(fp)
 20007c8:	10000015 	stw	zero,0(r2)

	if (*use_dhcp == 0){
 20007cc:	e0800217 	ldw	r2,8(fp)
 20007d0:	10800017 	ldw	r2,0(r2)
 20007d4:	10000b1e 	bne	r2,zero,2000804 <get_ip_addr+0x90>
		char buf[255];
		print_ipad(ipaddr->addr, buf);
 20007d8:	e0bffd17 	ldw	r2,-12(fp)
 20007dc:	10800017 	ldw	r2,0(r2)
 20007e0:	e17fbc04 	addi	r5,fp,-272
 20007e4:	1009883a 	mov	r4,r2
 20007e8:	2013ca40 	call	2013ca4 <print_ipad>
		printf("[ethernet] Static IP Address for interface %d %s\n", iface, buf);
 20007ec:	e1bfbc04 	addi	r6,fp,-272
 20007f0:	e17ffc17 	ldw	r5,-16(fp)
 20007f4:	01008134 	movhi	r4,516
 20007f8:	2102f304 	addi	r4,r4,3020
 20007fc:	20009e40 	call	20009e4 <printf>
 2000800:	00000406 	br	2000814 <get_ip_addr+0xa0>
	}
	else
		printf("[ethernet] Starting get IP via DHCP for interface %d\n", iface);
 2000804:	e17ffc17 	ldw	r5,-16(fp)
 2000808:	01008134 	movhi	r4,516
 200080c:	21030004 	addi	r4,r4,3072
 2000810:	20009e40 	call	20009e4 <printf>

	return EXIT_SUCCESS;
 2000814:	0005883a 	mov	r2,zero
}
 2000818:	e037883a 	mov	sp,fp
 200081c:	dfc00117 	ldw	ra,4(sp)
 2000820:	df000017 	ldw	fp,0(sp)
 2000824:	dec00204 	addi	sp,sp,8
 2000828:	f800283a 	ret

0200082c <get_hostname>:

int get_hostname(int iface, const char **hostname)
{
 200082c:	defffd04 	addi	sp,sp,-12
 2000830:	df000215 	stw	fp,8(sp)
 2000834:	df000204 	addi	fp,sp,8
 2000838:	e13ffe15 	stw	r4,-8(fp)
 200083c:	e17fff15 	stw	r5,-4(fp)
	*hostname = "LwIP";
 2000840:	e0ffff17 	ldw	r3,-4(fp)
 2000844:	00808134 	movhi	r2,516
 2000848:	10830e04 	addi	r2,r2,3128
 200084c:	18800015 	stw	r2,0(r3)

	return ERR_OK;
 2000850:	0005883a 	mov	r2,zero
}
 2000854:	e037883a 	mov	sp,fp
 2000858:	df000017 	ldw	fp,0(sp)
 200085c:	dec00104 	addi	sp,sp,4
 2000860:	f800283a 	ret

02000864 <get_iface_name>:

int get_iface_name(int iface, char name[ETH_IFACE_NAME_LENGTH])
{
 2000864:	defffd04 	addi	sp,sp,-12
 2000868:	df000215 	stw	fp,8(sp)
 200086c:	df000204 	addi	fp,sp,8
 2000870:	e13ffe15 	stw	r4,-8(fp)
 2000874:	e17fff15 	stw	r5,-4(fp)
	name[0] = 'e';
 2000878:	e0bfff17 	ldw	r2,-4(fp)
 200087c:	00c01944 	movi	r3,101
 2000880:	10c00005 	stb	r3,0(r2)
	name[1] = (iface + 0x30);
 2000884:	e0bfff17 	ldw	r2,-4(fp)
 2000888:	10800044 	addi	r2,r2,1
 200088c:	e0fffe17 	ldw	r3,-8(fp)
 2000890:	18c00c04 	addi	r3,r3,48
 2000894:	10c00005 	stb	r3,0(r2)

	return ERR_OK;
 2000898:	0005883a 	mov	r2,zero
}
 200089c:	e037883a 	mov	sp,fp
 20008a0:	df000017 	ldw	fp,0(sp)
 20008a4:	dec00104 	addi	sp,sp,4
 20008a8:	f800283a 	ret

020008ac <is_interface_active>:

int is_interface_active(int iface)
{
 20008ac:	defffe04 	addi	sp,sp,-8
 20008b0:	df000115 	stw	fp,4(sp)
 20008b4:	df000104 	addi	fp,sp,4
 20008b8:	e13fff15 	stw	r4,-4(fp)
	return 1;
 20008bc:	00800044 	movi	r2,1
}
 20008c0:	e037883a 	mov	sp,fp
 20008c4:	df000017 	ldw	fp,0(sp)
 20008c8:	dec00104 	addi	sp,sp,4
 20008cc:	f800283a 	ret

020008d0 <main>:


int main(){
 20008d0:	defffd04 	addi	sp,sp,-12
 20008d4:	dfc00215 	stw	ra,8(sp)
 20008d8:	df000115 	stw	fp,4(sp)
 20008dc:	df000104 	addi	fp,sp,4
    main_thread_handle = sys_thread_new("main_thrd", (void(*)(void*))main_thread, 0,
 20008e0:	008000c4 	movi	r2,3
 20008e4:	d8800015 	stw	r2,0(sp)
 20008e8:	01c40004 	movi	r7,4096
 20008ec:	000d883a 	mov	r6,zero
 20008f0:	01408034 	movhi	r5,512
 20008f4:	29424404 	addi	r5,r5,2320
 20008f8:	01008134 	movhi	r4,516
 20008fc:	21031004 	addi	r4,r4,3136
 2000900:	20154180 	call	2015418 <sys_thread_new>
 2000904:	d0a7c515 	stw	r2,-24812(gp)
                    THREAD_STACKSIZE,
					DEFAULT_THREAD_PRIO);
    vTaskStartScheduler();
 2000908:	200f7c00 	call	200f7c0 <vTaskStartScheduler>
    while(1);
 200090c:	003fff06 	br	200090c <__alt_mem_mem_0+0xfcfe090c>

02000910 <main_thread>:
    return 0;
}


int main_thread(){
 2000910:	defffd04 	addi	sp,sp,-12
 2000914:	dfc00215 	stw	ra,8(sp)
 2000918:	df000115 	stw	fp,4(sp)
 200091c:	df000104 	addi	fp,sp,4
	alt_printf("------------------------------------------------------\r\n");
 2000920:	01008134 	movhi	r4,516
 2000924:	21031304 	addi	r4,r4,3148
 2000928:	2012cc00 	call	2012cc0 <alt_printf>
	alt_printf("--------- Starting OPC UA Server application ---------\r\n");
 200092c:	01008134 	movhi	r4,516
 2000930:	21032204 	addi	r4,r4,3208
 2000934:	2012cc00 	call	2012cc0 <alt_printf>
	alt_printf("------------------------------------------------------\r\n");
 2000938:	01008134 	movhi	r4,516
 200093c:	21031304 	addi	r4,r4,3148
 2000940:	2012cc00 	call	2012cc0 <alt_printf>
	alt_printf("--------- open62541 example created for a    ---------\r\n");
 2000944:	01008134 	movhi	r4,516
 2000948:	21033104 	addi	r4,r4,3268
 200094c:	2012cc00 	call	2012cc0 <alt_printf>
    alt_printf("--------- MicroBlaze design on a Artix7 FPGA ---------\r\n");
 2000950:	01008134 	movhi	r4,516
 2000954:	21034004 	addi	r4,r4,3328
 2000958:	2012cc00 	call	2012cc0 <alt_printf>
    alt_printf("------------------------------------------------------\r\n");
 200095c:	01008134 	movhi	r4,516
 2000960:	21031304 	addi	r4,r4,3148
 2000964:	2012cc00 	call	2012cc0 <alt_printf>
    alt_printf("--------- NetTImeLogic GmbH, Switzerland     ---------\r\n");
 2000968:	01008134 	movhi	r4,516
 200096c:	21034f04 	addi	r4,r4,3388
 2000970:	2012cc00 	call	2012cc0 <alt_printf>
    alt_printf("--------- contact@nettimelogic.com           ---------\r\n");
 2000974:	01008134 	movhi	r4,516
 2000978:	21035e04 	addi	r4,r4,3448
 200097c:	2012cc00 	call	2012cc0 <alt_printf>
    alt_printf("------------------------------------------------------\r\n");
 2000980:	01008134 	movhi	r4,516
 2000984:	21031304 	addi	r4,r4,3148
 2000988:	2012cc00 	call	2012cc0 <alt_printf>

	//xTaskCreate(xEthernetRun, "eth0", KB(4), NULL, tskIDLE_PRIORITY + 2, NULL);

	sys_thread_new("NetworkInit", xEthernetRun, NULL,
 200098c:	008000c4 	movi	r2,3
 2000990:	d8800015 	stw	r2,0(sp)
 2000994:	01c40004 	movi	r7,4096
 2000998:	000d883a 	mov	r6,zero
 200099c:	01408034 	movhi	r5,512
 20009a0:	29417904 	addi	r5,r5,1508
 20009a4:	01008134 	movhi	r4,516
 20009a8:	21036d04 	addi	r4,r4,3508
 20009ac:	20154180 	call	2015418 <sys_thread_new>
            DEFAULT_THREAD_PRIO);



    //vTaskStartScheduler();
    while(1);
 20009b0:	003fff06 	br	20009b0 <__alt_mem_mem_0+0xfcfe09b0>

020009b4 <_printf_r>:
 20009b4:	defffd04 	addi	sp,sp,-12
 20009b8:	2805883a 	mov	r2,r5
 20009bc:	dfc00015 	stw	ra,0(sp)
 20009c0:	d9800115 	stw	r6,4(sp)
 20009c4:	d9c00215 	stw	r7,8(sp)
 20009c8:	21400217 	ldw	r5,8(r4)
 20009cc:	d9c00104 	addi	r7,sp,4
 20009d0:	100d883a 	mov	r6,r2
 20009d4:	2000a200 	call	2000a20 <___vfprintf_internal_r>
 20009d8:	dfc00017 	ldw	ra,0(sp)
 20009dc:	dec00304 	addi	sp,sp,12
 20009e0:	f800283a 	ret

020009e4 <printf>:
 20009e4:	defffc04 	addi	sp,sp,-16
 20009e8:	dfc00015 	stw	ra,0(sp)
 20009ec:	d9400115 	stw	r5,4(sp)
 20009f0:	d9800215 	stw	r6,8(sp)
 20009f4:	d9c00315 	stw	r7,12(sp)
 20009f8:	00808134 	movhi	r2,516
 20009fc:	1095e804 	addi	r2,r2,22432
 2000a00:	10800017 	ldw	r2,0(r2)
 2000a04:	200b883a 	mov	r5,r4
 2000a08:	d9800104 	addi	r6,sp,4
 2000a0c:	11000217 	ldw	r4,8(r2)
 2000a10:	2002c180 	call	2002c18 <__vfprintf_internal>
 2000a14:	dfc00017 	ldw	ra,0(sp)
 2000a18:	dec00404 	addi	sp,sp,16
 2000a1c:	f800283a 	ret

02000a20 <___vfprintf_internal_r>:
 2000a20:	deffb804 	addi	sp,sp,-288
 2000a24:	dfc04715 	stw	ra,284(sp)
 2000a28:	ddc04515 	stw	r23,276(sp)
 2000a2c:	dd404315 	stw	r21,268(sp)
 2000a30:	d9002c15 	stw	r4,176(sp)
 2000a34:	282f883a 	mov	r23,r5
 2000a38:	302b883a 	mov	r21,r6
 2000a3c:	d9c02d15 	stw	r7,180(sp)
 2000a40:	df004615 	stw	fp,280(sp)
 2000a44:	dd804415 	stw	r22,272(sp)
 2000a48:	dd004215 	stw	r20,264(sp)
 2000a4c:	dcc04115 	stw	r19,260(sp)
 2000a50:	dc804015 	stw	r18,256(sp)
 2000a54:	dc403f15 	stw	r17,252(sp)
 2000a58:	dc003e15 	stw	r16,248(sp)
 2000a5c:	200537c0 	call	200537c <_localeconv_r>
 2000a60:	10800017 	ldw	r2,0(r2)
 2000a64:	1009883a 	mov	r4,r2
 2000a68:	d8803415 	stw	r2,208(sp)
 2000a6c:	20073a40 	call	20073a4 <strlen>
 2000a70:	d8803715 	stw	r2,220(sp)
 2000a74:	d8802c17 	ldw	r2,176(sp)
 2000a78:	10000226 	beq	r2,zero,2000a84 <___vfprintf_internal_r+0x64>
 2000a7c:	10800e17 	ldw	r2,56(r2)
 2000a80:	1000f926 	beq	r2,zero,2000e68 <___vfprintf_internal_r+0x448>
 2000a84:	b880030b 	ldhu	r2,12(r23)
 2000a88:	10c8000c 	andi	r3,r2,8192
 2000a8c:	1800061e 	bne	r3,zero,2000aa8 <___vfprintf_internal_r+0x88>
 2000a90:	b9001917 	ldw	r4,100(r23)
 2000a94:	00f7ffc4 	movi	r3,-8193
 2000a98:	10880014 	ori	r2,r2,8192
 2000a9c:	20c6703a 	and	r3,r4,r3
 2000aa0:	b880030d 	sth	r2,12(r23)
 2000aa4:	b8c01915 	stw	r3,100(r23)
 2000aa8:	10c0020c 	andi	r3,r2,8
 2000aac:	1800c126 	beq	r3,zero,2000db4 <___vfprintf_internal_r+0x394>
 2000ab0:	b8c00417 	ldw	r3,16(r23)
 2000ab4:	1800bf26 	beq	r3,zero,2000db4 <___vfprintf_internal_r+0x394>
 2000ab8:	1080068c 	andi	r2,r2,26
 2000abc:	00c00284 	movi	r3,10
 2000ac0:	10c0c426 	beq	r2,r3,2000dd4 <___vfprintf_internal_r+0x3b4>
 2000ac4:	d8c00404 	addi	r3,sp,16
 2000ac8:	05008134 	movhi	r20,516
 2000acc:	d9001e04 	addi	r4,sp,120
 2000ad0:	a5038084 	addi	r20,r20,3586
 2000ad4:	d8c01e15 	stw	r3,120(sp)
 2000ad8:	d8002015 	stw	zero,128(sp)
 2000adc:	d8001f15 	stw	zero,124(sp)
 2000ae0:	d8003315 	stw	zero,204(sp)
 2000ae4:	d8003615 	stw	zero,216(sp)
 2000ae8:	d8003815 	stw	zero,224(sp)
 2000aec:	1811883a 	mov	r8,r3
 2000af0:	d8003915 	stw	zero,228(sp)
 2000af4:	d8003a15 	stw	zero,232(sp)
 2000af8:	d8002f15 	stw	zero,188(sp)
 2000afc:	d9002815 	stw	r4,160(sp)
 2000b00:	a8800007 	ldb	r2,0(r21)
 2000b04:	10027b26 	beq	r2,zero,20014f4 <___vfprintf_internal_r+0xad4>
 2000b08:	00c00944 	movi	r3,37
 2000b0c:	a821883a 	mov	r16,r21
 2000b10:	10c0021e 	bne	r2,r3,2000b1c <___vfprintf_internal_r+0xfc>
 2000b14:	00001406 	br	2000b68 <___vfprintf_internal_r+0x148>
 2000b18:	10c00326 	beq	r2,r3,2000b28 <___vfprintf_internal_r+0x108>
 2000b1c:	84000044 	addi	r16,r16,1
 2000b20:	80800007 	ldb	r2,0(r16)
 2000b24:	103ffc1e 	bne	r2,zero,2000b18 <__alt_mem_mem_0+0xfcfe0b18>
 2000b28:	8563c83a 	sub	r17,r16,r21
 2000b2c:	88000e26 	beq	r17,zero,2000b68 <___vfprintf_internal_r+0x148>
 2000b30:	d8c02017 	ldw	r3,128(sp)
 2000b34:	d8801f17 	ldw	r2,124(sp)
 2000b38:	45400015 	stw	r21,0(r8)
 2000b3c:	1c47883a 	add	r3,r3,r17
 2000b40:	10800044 	addi	r2,r2,1
 2000b44:	d8c02015 	stw	r3,128(sp)
 2000b48:	44400115 	stw	r17,4(r8)
 2000b4c:	d8801f15 	stw	r2,124(sp)
 2000b50:	00c001c4 	movi	r3,7
 2000b54:	1880a716 	blt	r3,r2,2000df4 <___vfprintf_internal_r+0x3d4>
 2000b58:	42000204 	addi	r8,r8,8
 2000b5c:	d9402f17 	ldw	r5,188(sp)
 2000b60:	2c4b883a 	add	r5,r5,r17
 2000b64:	d9402f15 	stw	r5,188(sp)
 2000b68:	80800007 	ldb	r2,0(r16)
 2000b6c:	1000a826 	beq	r2,zero,2000e10 <___vfprintf_internal_r+0x3f0>
 2000b70:	84400047 	ldb	r17,1(r16)
 2000b74:	00bfffc4 	movi	r2,-1
 2000b78:	85400044 	addi	r21,r16,1
 2000b7c:	d8002785 	stb	zero,158(sp)
 2000b80:	0007883a 	mov	r3,zero
 2000b84:	000f883a 	mov	r7,zero
 2000b88:	d8802915 	stw	r2,164(sp)
 2000b8c:	d8003115 	stw	zero,196(sp)
 2000b90:	0025883a 	mov	r18,zero
 2000b94:	01401604 	movi	r5,88
 2000b98:	01800244 	movi	r6,9
 2000b9c:	02800a84 	movi	r10,42
 2000ba0:	02401b04 	movi	r9,108
 2000ba4:	ad400044 	addi	r21,r21,1
 2000ba8:	88bff804 	addi	r2,r17,-32
 2000bac:	28830436 	bltu	r5,r2,20017c0 <___vfprintf_internal_r+0xda0>
 2000bb0:	100490ba 	slli	r2,r2,2
 2000bb4:	01008034 	movhi	r4,512
 2000bb8:	2102f204 	addi	r4,r4,3016
 2000bbc:	1105883a 	add	r2,r2,r4
 2000bc0:	10800017 	ldw	r2,0(r2)
 2000bc4:	1000683a 	jmp	r2
 2000bc8:	020016e0 	cmpeqi	r8,zero,91
 2000bcc:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000bd0:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000bd4:	02001700 	call	200170 <__alt_mem_sdram_controller_0-0x1dffe90>
 2000bd8:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000bdc:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000be0:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000be4:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000be8:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000bec:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000bf0:	02000e74 	movhi	r8,57
 2000bf4:	0200161c 	xori	r8,zero,88
 2000bf8:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000bfc:	02000d3c 	xorhi	r8,zero,52
 2000c00:	02000e9c 	xori	r8,zero,58
 2000c04:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c08:	02000edc 	xori	r8,zero,59
 2000c0c:	02000ee8 	cmpgeui	r8,zero,59
 2000c10:	02000ee8 	cmpgeui	r8,zero,59
 2000c14:	02000ee8 	cmpgeui	r8,zero,59
 2000c18:	02000ee8 	cmpgeui	r8,zero,59
 2000c1c:	02000ee8 	cmpgeui	r8,zero,59
 2000c20:	02000ee8 	cmpgeui	r8,zero,59
 2000c24:	02000ee8 	cmpgeui	r8,zero,59
 2000c28:	02000ee8 	cmpgeui	r8,zero,59
 2000c2c:	02000ee8 	cmpgeui	r8,zero,59
 2000c30:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c34:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c38:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c3c:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c40:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c44:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c48:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c4c:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c50:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c54:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c58:	02000f1c 	xori	r8,zero,60
 2000c5c:	02000fd8 	cmpnei	r8,zero,63
 2000c60:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c64:	02000fd8 	cmpnei	r8,zero,63
 2000c68:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c6c:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c70:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c74:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c78:	02001078 	rdprs	r8,zero,65
 2000c7c:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c80:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c84:	02001084 	movi	r8,66
 2000c88:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c8c:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c90:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c94:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c98:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000c9c:	020014fc 	xorhi	r8,zero,83
 2000ca0:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000ca4:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000ca8:	0200155c 	xori	r8,zero,85
 2000cac:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000cb0:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000cb4:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000cb8:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000cbc:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000cc0:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000cc4:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000cc8:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000ccc:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000cd0:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000cd4:	0200176c 	andhi	r8,zero,93
 2000cd8:	0200170c 	andi	r8,zero,92
 2000cdc:	02000fd8 	cmpnei	r8,zero,63
 2000ce0:	02000fd8 	cmpnei	r8,zero,63
 2000ce4:	02000fd8 	cmpnei	r8,zero,63
 2000ce8:	0200171c 	xori	r8,zero,92
 2000cec:	0200170c 	andi	r8,zero,92
 2000cf0:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000cf4:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000cf8:	02001728 	cmpgeui	r8,zero,92
 2000cfc:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000d00:	02001738 	rdprs	r8,zero,92
 2000d04:	0200160c 	andi	r8,zero,88
 2000d08:	02000d48 	cmpgei	r8,zero,53
 2000d0c:	0200162c 	andhi	r8,zero,88
 2000d10:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000d14:	02001638 	rdprs	r8,zero,88
 2000d18:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000d1c:	02001694 	movui	r8,90
 2000d20:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000d24:	020017c0 	call	20017c <__alt_mem_sdram_controller_0-0x1dffe84>
 2000d28:	020016a4 	muli	r8,zero,90
 2000d2c:	d9003117 	ldw	r4,196(sp)
 2000d30:	d8802d15 	stw	r2,180(sp)
 2000d34:	0109c83a 	sub	r4,zero,r4
 2000d38:	d9003115 	stw	r4,196(sp)
 2000d3c:	94800114 	ori	r18,r18,4
 2000d40:	ac400007 	ldb	r17,0(r21)
 2000d44:	003f9706 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 2000d48:	00800c04 	movi	r2,48
 2000d4c:	d9002d17 	ldw	r4,180(sp)
 2000d50:	d9402917 	ldw	r5,164(sp)
 2000d54:	d8802705 	stb	r2,156(sp)
 2000d58:	00801e04 	movi	r2,120
 2000d5c:	d8802745 	stb	r2,157(sp)
 2000d60:	d8002785 	stb	zero,158(sp)
 2000d64:	20c00104 	addi	r3,r4,4
 2000d68:	24c00017 	ldw	r19,0(r4)
 2000d6c:	002d883a 	mov	r22,zero
 2000d70:	90800094 	ori	r2,r18,2
 2000d74:	28029a16 	blt	r5,zero,20017e0 <___vfprintf_internal_r+0xdc0>
 2000d78:	00bfdfc4 	movi	r2,-129
 2000d7c:	90a4703a 	and	r18,r18,r2
 2000d80:	d8c02d15 	stw	r3,180(sp)
 2000d84:	94800094 	ori	r18,r18,2
 2000d88:	9802871e 	bne	r19,zero,20017a8 <___vfprintf_internal_r+0xd88>
 2000d8c:	00808134 	movhi	r2,516
 2000d90:	10837904 	addi	r2,r2,3556
 2000d94:	d8803915 	stw	r2,228(sp)
 2000d98:	04401e04 	movi	r17,120
 2000d9c:	d8802917 	ldw	r2,164(sp)
 2000da0:	0039883a 	mov	fp,zero
 2000da4:	1001e926 	beq	r2,zero,200154c <___vfprintf_internal_r+0xb2c>
 2000da8:	0027883a 	mov	r19,zero
 2000dac:	002d883a 	mov	r22,zero
 2000db0:	00020506 	br	20015c8 <___vfprintf_internal_r+0xba8>
 2000db4:	d9002c17 	ldw	r4,176(sp)
 2000db8:	b80b883a 	mov	r5,r23
 2000dbc:	2002cf00 	call	2002cf0 <__swsetup_r>
 2000dc0:	1005ac1e 	bne	r2,zero,2002474 <___vfprintf_internal_r+0x1a54>
 2000dc4:	b880030b 	ldhu	r2,12(r23)
 2000dc8:	00c00284 	movi	r3,10
 2000dcc:	1080068c 	andi	r2,r2,26
 2000dd0:	10ff3c1e 	bne	r2,r3,2000ac4 <__alt_mem_mem_0+0xfcfe0ac4>
 2000dd4:	b880038f 	ldh	r2,14(r23)
 2000dd8:	103f3a16 	blt	r2,zero,2000ac4 <__alt_mem_mem_0+0xfcfe0ac4>
 2000ddc:	d9c02d17 	ldw	r7,180(sp)
 2000de0:	d9002c17 	ldw	r4,176(sp)
 2000de4:	a80d883a 	mov	r6,r21
 2000de8:	b80b883a 	mov	r5,r23
 2000dec:	2002c340 	call	2002c34 <__sbprintf>
 2000df0:	00001106 	br	2000e38 <___vfprintf_internal_r+0x418>
 2000df4:	d9002c17 	ldw	r4,176(sp)
 2000df8:	d9801e04 	addi	r6,sp,120
 2000dfc:	b80b883a 	mov	r5,r23
 2000e00:	20075380 	call	2007538 <__sprint_r>
 2000e04:	1000081e 	bne	r2,zero,2000e28 <___vfprintf_internal_r+0x408>
 2000e08:	da000404 	addi	r8,sp,16
 2000e0c:	003f5306 	br	2000b5c <__alt_mem_mem_0+0xfcfe0b5c>
 2000e10:	d8802017 	ldw	r2,128(sp)
 2000e14:	10000426 	beq	r2,zero,2000e28 <___vfprintf_internal_r+0x408>
 2000e18:	d9002c17 	ldw	r4,176(sp)
 2000e1c:	d9801e04 	addi	r6,sp,120
 2000e20:	b80b883a 	mov	r5,r23
 2000e24:	20075380 	call	2007538 <__sprint_r>
 2000e28:	b880030b 	ldhu	r2,12(r23)
 2000e2c:	1080100c 	andi	r2,r2,64
 2000e30:	1005901e 	bne	r2,zero,2002474 <___vfprintf_internal_r+0x1a54>
 2000e34:	d8802f17 	ldw	r2,188(sp)
 2000e38:	dfc04717 	ldw	ra,284(sp)
 2000e3c:	df004617 	ldw	fp,280(sp)
 2000e40:	ddc04517 	ldw	r23,276(sp)
 2000e44:	dd804417 	ldw	r22,272(sp)
 2000e48:	dd404317 	ldw	r21,268(sp)
 2000e4c:	dd004217 	ldw	r20,264(sp)
 2000e50:	dcc04117 	ldw	r19,260(sp)
 2000e54:	dc804017 	ldw	r18,256(sp)
 2000e58:	dc403f17 	ldw	r17,252(sp)
 2000e5c:	dc003e17 	ldw	r16,248(sp)
 2000e60:	dec04804 	addi	sp,sp,288
 2000e64:	f800283a 	ret
 2000e68:	d9002c17 	ldw	r4,176(sp)
 2000e6c:	2004cc40 	call	2004cc4 <__sinit>
 2000e70:	003f0406 	br	2000a84 <__alt_mem_mem_0+0xfcfe0a84>
 2000e74:	d8802d17 	ldw	r2,180(sp)
 2000e78:	d9002d17 	ldw	r4,180(sp)
 2000e7c:	10800017 	ldw	r2,0(r2)
 2000e80:	d8803115 	stw	r2,196(sp)
 2000e84:	20800104 	addi	r2,r4,4
 2000e88:	d9003117 	ldw	r4,196(sp)
 2000e8c:	203fa716 	blt	r4,zero,2000d2c <__alt_mem_mem_0+0xfcfe0d2c>
 2000e90:	d8802d15 	stw	r2,180(sp)
 2000e94:	ac400007 	ldb	r17,0(r21)
 2000e98:	003f4206 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 2000e9c:	ac400007 	ldb	r17,0(r21)
 2000ea0:	aac00044 	addi	r11,r21,1
 2000ea4:	8a872826 	beq	r17,r10,2002b48 <___vfprintf_internal_r+0x2128>
 2000ea8:	88bff404 	addi	r2,r17,-48
 2000eac:	0009883a 	mov	r4,zero
 2000eb0:	30867d36 	bltu	r6,r2,20028a8 <___vfprintf_internal_r+0x1e88>
 2000eb4:	5c400007 	ldb	r17,0(r11)
 2000eb8:	210002a4 	muli	r4,r4,10
 2000ebc:	5d400044 	addi	r21,r11,1
 2000ec0:	a817883a 	mov	r11,r21
 2000ec4:	2089883a 	add	r4,r4,r2
 2000ec8:	88bff404 	addi	r2,r17,-48
 2000ecc:	30bff92e 	bgeu	r6,r2,2000eb4 <__alt_mem_mem_0+0xfcfe0eb4>
 2000ed0:	2005c916 	blt	r4,zero,20025f8 <___vfprintf_internal_r+0x1bd8>
 2000ed4:	d9002915 	stw	r4,164(sp)
 2000ed8:	003f3306 	br	2000ba8 <__alt_mem_mem_0+0xfcfe0ba8>
 2000edc:	94802014 	ori	r18,r18,128
 2000ee0:	ac400007 	ldb	r17,0(r21)
 2000ee4:	003f2f06 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 2000ee8:	a809883a 	mov	r4,r21
 2000eec:	d8003115 	stw	zero,196(sp)
 2000ef0:	88bff404 	addi	r2,r17,-48
 2000ef4:	0017883a 	mov	r11,zero
 2000ef8:	24400007 	ldb	r17,0(r4)
 2000efc:	5ac002a4 	muli	r11,r11,10
 2000f00:	ad400044 	addi	r21,r21,1
 2000f04:	a809883a 	mov	r4,r21
 2000f08:	12d7883a 	add	r11,r2,r11
 2000f0c:	88bff404 	addi	r2,r17,-48
 2000f10:	30bff92e 	bgeu	r6,r2,2000ef8 <__alt_mem_mem_0+0xfcfe0ef8>
 2000f14:	dac03115 	stw	r11,196(sp)
 2000f18:	003f2306 	br	2000ba8 <__alt_mem_mem_0+0xfcfe0ba8>
 2000f1c:	18c03fcc 	andi	r3,r3,255
 2000f20:	18072b1e 	bne	r3,zero,2002bd0 <___vfprintf_internal_r+0x21b0>
 2000f24:	94800414 	ori	r18,r18,16
 2000f28:	9080080c 	andi	r2,r18,32
 2000f2c:	10037b26 	beq	r2,zero,2001d1c <___vfprintf_internal_r+0x12fc>
 2000f30:	d9402d17 	ldw	r5,180(sp)
 2000f34:	28800117 	ldw	r2,4(r5)
 2000f38:	2cc00017 	ldw	r19,0(r5)
 2000f3c:	29400204 	addi	r5,r5,8
 2000f40:	d9402d15 	stw	r5,180(sp)
 2000f44:	102d883a 	mov	r22,r2
 2000f48:	10044b16 	blt	r2,zero,2002078 <___vfprintf_internal_r+0x1658>
 2000f4c:	d9402917 	ldw	r5,164(sp)
 2000f50:	df002783 	ldbu	fp,158(sp)
 2000f54:	2803bc16 	blt	r5,zero,2001e48 <___vfprintf_internal_r+0x1428>
 2000f58:	00ffdfc4 	movi	r3,-129
 2000f5c:	9d84b03a 	or	r2,r19,r22
 2000f60:	90e4703a 	and	r18,r18,r3
 2000f64:	10017726 	beq	r2,zero,2001544 <___vfprintf_internal_r+0xb24>
 2000f68:	b0038326 	beq	r22,zero,2001d78 <___vfprintf_internal_r+0x1358>
 2000f6c:	dc402a15 	stw	r17,168(sp)
 2000f70:	dc001e04 	addi	r16,sp,120
 2000f74:	b023883a 	mov	r17,r22
 2000f78:	402d883a 	mov	r22,r8
 2000f7c:	9809883a 	mov	r4,r19
 2000f80:	880b883a 	mov	r5,r17
 2000f84:	01800284 	movi	r6,10
 2000f88:	000f883a 	mov	r7,zero
 2000f8c:	200a4ac0 	call	200a4ac <__umoddi3>
 2000f90:	10800c04 	addi	r2,r2,48
 2000f94:	843fffc4 	addi	r16,r16,-1
 2000f98:	9809883a 	mov	r4,r19
 2000f9c:	880b883a 	mov	r5,r17
 2000fa0:	80800005 	stb	r2,0(r16)
 2000fa4:	01800284 	movi	r6,10
 2000fa8:	000f883a 	mov	r7,zero
 2000fac:	2009f340 	call	2009f34 <__udivdi3>
 2000fb0:	1027883a 	mov	r19,r2
 2000fb4:	10c4b03a 	or	r2,r2,r3
 2000fb8:	1823883a 	mov	r17,r3
 2000fbc:	103fef1e 	bne	r2,zero,2000f7c <__alt_mem_mem_0+0xfcfe0f7c>
 2000fc0:	d8c02817 	ldw	r3,160(sp)
 2000fc4:	dc402a17 	ldw	r17,168(sp)
 2000fc8:	b011883a 	mov	r8,r22
 2000fcc:	1c07c83a 	sub	r3,r3,r16
 2000fd0:	d8c02e15 	stw	r3,184(sp)
 2000fd4:	00005906 	br	200113c <___vfprintf_internal_r+0x71c>
 2000fd8:	18c03fcc 	andi	r3,r3,255
 2000fdc:	1806fa1e 	bne	r3,zero,2002bc8 <___vfprintf_internal_r+0x21a8>
 2000fe0:	9080020c 	andi	r2,r18,8
 2000fe4:	10048a26 	beq	r2,zero,2002210 <___vfprintf_internal_r+0x17f0>
 2000fe8:	d8c02d17 	ldw	r3,180(sp)
 2000fec:	d9002d17 	ldw	r4,180(sp)
 2000ff0:	d9402d17 	ldw	r5,180(sp)
 2000ff4:	18c00017 	ldw	r3,0(r3)
 2000ff8:	21000117 	ldw	r4,4(r4)
 2000ffc:	29400204 	addi	r5,r5,8
 2001000:	d8c03615 	stw	r3,216(sp)
 2001004:	d9003815 	stw	r4,224(sp)
 2001008:	d9402d15 	stw	r5,180(sp)
 200100c:	d9003617 	ldw	r4,216(sp)
 2001010:	d9403817 	ldw	r5,224(sp)
 2001014:	da003d15 	stw	r8,244(sp)
 2001018:	04000044 	movi	r16,1
 200101c:	20070c40 	call	20070c4 <__fpclassifyd>
 2001020:	da003d17 	ldw	r8,244(sp)
 2001024:	14041f1e 	bne	r2,r16,20020a4 <___vfprintf_internal_r+0x1684>
 2001028:	d9003617 	ldw	r4,216(sp)
 200102c:	d9403817 	ldw	r5,224(sp)
 2001030:	000d883a 	mov	r6,zero
 2001034:	000f883a 	mov	r7,zero
 2001038:	200be900 	call	200be90 <__ledf2>
 200103c:	da003d17 	ldw	r8,244(sp)
 2001040:	1005be16 	blt	r2,zero,200273c <___vfprintf_internal_r+0x1d1c>
 2001044:	df002783 	ldbu	fp,158(sp)
 2001048:	008011c4 	movi	r2,71
 200104c:	1445330e 	bge	r2,r17,200251c <___vfprintf_internal_r+0x1afc>
 2001050:	04008134 	movhi	r16,516
 2001054:	84037104 	addi	r16,r16,3524
 2001058:	00c000c4 	movi	r3,3
 200105c:	00bfdfc4 	movi	r2,-129
 2001060:	d8c02a15 	stw	r3,168(sp)
 2001064:	90a4703a 	and	r18,r18,r2
 2001068:	d8c02e15 	stw	r3,184(sp)
 200106c:	d8002915 	stw	zero,164(sp)
 2001070:	d8003215 	stw	zero,200(sp)
 2001074:	00003706 	br	2001154 <___vfprintf_internal_r+0x734>
 2001078:	94800214 	ori	r18,r18,8
 200107c:	ac400007 	ldb	r17,0(r21)
 2001080:	003ec806 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 2001084:	18c03fcc 	andi	r3,r3,255
 2001088:	1806db1e 	bne	r3,zero,2002bf8 <___vfprintf_internal_r+0x21d8>
 200108c:	94800414 	ori	r18,r18,16
 2001090:	9080080c 	andi	r2,r18,32
 2001094:	1002d826 	beq	r2,zero,2001bf8 <___vfprintf_internal_r+0x11d8>
 2001098:	d9402d17 	ldw	r5,180(sp)
 200109c:	d8c02917 	ldw	r3,164(sp)
 20010a0:	d8002785 	stb	zero,158(sp)
 20010a4:	28800204 	addi	r2,r5,8
 20010a8:	2cc00017 	ldw	r19,0(r5)
 20010ac:	2d800117 	ldw	r22,4(r5)
 20010b0:	18048f16 	blt	r3,zero,20022f0 <___vfprintf_internal_r+0x18d0>
 20010b4:	013fdfc4 	movi	r4,-129
 20010b8:	9d86b03a 	or	r3,r19,r22
 20010bc:	d8802d15 	stw	r2,180(sp)
 20010c0:	9124703a 	and	r18,r18,r4
 20010c4:	1802d91e 	bne	r3,zero,2001c2c <___vfprintf_internal_r+0x120c>
 20010c8:	d8c02917 	ldw	r3,164(sp)
 20010cc:	0039883a 	mov	fp,zero
 20010d0:	1805c326 	beq	r3,zero,20027e0 <___vfprintf_internal_r+0x1dc0>
 20010d4:	0027883a 	mov	r19,zero
 20010d8:	002d883a 	mov	r22,zero
 20010dc:	dc001e04 	addi	r16,sp,120
 20010e0:	9806d0fa 	srli	r3,r19,3
 20010e4:	b008977a 	slli	r4,r22,29
 20010e8:	b02cd0fa 	srli	r22,r22,3
 20010ec:	9cc001cc 	andi	r19,r19,7
 20010f0:	98800c04 	addi	r2,r19,48
 20010f4:	843fffc4 	addi	r16,r16,-1
 20010f8:	20e6b03a 	or	r19,r4,r3
 20010fc:	80800005 	stb	r2,0(r16)
 2001100:	9d86b03a 	or	r3,r19,r22
 2001104:	183ff61e 	bne	r3,zero,20010e0 <__alt_mem_mem_0+0xfcfe10e0>
 2001108:	90c0004c 	andi	r3,r18,1
 200110c:	18013b26 	beq	r3,zero,20015fc <___vfprintf_internal_r+0xbdc>
 2001110:	10803fcc 	andi	r2,r2,255
 2001114:	1080201c 	xori	r2,r2,128
 2001118:	10bfe004 	addi	r2,r2,-128
 200111c:	00c00c04 	movi	r3,48
 2001120:	10c13626 	beq	r2,r3,20015fc <___vfprintf_internal_r+0xbdc>
 2001124:	80ffffc5 	stb	r3,-1(r16)
 2001128:	d8c02817 	ldw	r3,160(sp)
 200112c:	80bfffc4 	addi	r2,r16,-1
 2001130:	1021883a 	mov	r16,r2
 2001134:	1887c83a 	sub	r3,r3,r2
 2001138:	d8c02e15 	stw	r3,184(sp)
 200113c:	d8802e17 	ldw	r2,184(sp)
 2001140:	d9002917 	ldw	r4,164(sp)
 2001144:	1100010e 	bge	r2,r4,200114c <___vfprintf_internal_r+0x72c>
 2001148:	2005883a 	mov	r2,r4
 200114c:	d8802a15 	stw	r2,168(sp)
 2001150:	d8003215 	stw	zero,200(sp)
 2001154:	e7003fcc 	andi	fp,fp,255
 2001158:	e700201c 	xori	fp,fp,128
 200115c:	e73fe004 	addi	fp,fp,-128
 2001160:	e0000326 	beq	fp,zero,2001170 <___vfprintf_internal_r+0x750>
 2001164:	d8c02a17 	ldw	r3,168(sp)
 2001168:	18c00044 	addi	r3,r3,1
 200116c:	d8c02a15 	stw	r3,168(sp)
 2001170:	90c0008c 	andi	r3,r18,2
 2001174:	d8c02b15 	stw	r3,172(sp)
 2001178:	18000326 	beq	r3,zero,2001188 <___vfprintf_internal_r+0x768>
 200117c:	d8c02a17 	ldw	r3,168(sp)
 2001180:	18c00084 	addi	r3,r3,2
 2001184:	d8c02a15 	stw	r3,168(sp)
 2001188:	90c0210c 	andi	r3,r18,132
 200118c:	d8c03015 	stw	r3,192(sp)
 2001190:	1801a31e 	bne	r3,zero,2001820 <___vfprintf_internal_r+0xe00>
 2001194:	d9003117 	ldw	r4,196(sp)
 2001198:	d8c02a17 	ldw	r3,168(sp)
 200119c:	20e7c83a 	sub	r19,r4,r3
 20011a0:	04c19f0e 	bge	zero,r19,2001820 <___vfprintf_internal_r+0xe00>
 20011a4:	02400404 	movi	r9,16
 20011a8:	d8c02017 	ldw	r3,128(sp)
 20011ac:	d8801f17 	ldw	r2,124(sp)
 20011b0:	4cc50d0e 	bge	r9,r19,20025e8 <___vfprintf_internal_r+0x1bc8>
 20011b4:	01408134 	movhi	r5,516
 20011b8:	29438484 	addi	r5,r5,3602
 20011bc:	dc403b15 	stw	r17,236(sp)
 20011c0:	d9403515 	stw	r5,212(sp)
 20011c4:	9823883a 	mov	r17,r19
 20011c8:	482d883a 	mov	r22,r9
 20011cc:	9027883a 	mov	r19,r18
 20011d0:	070001c4 	movi	fp,7
 20011d4:	8025883a 	mov	r18,r16
 20011d8:	dc002c17 	ldw	r16,176(sp)
 20011dc:	00000306 	br	20011ec <___vfprintf_internal_r+0x7cc>
 20011e0:	8c7ffc04 	addi	r17,r17,-16
 20011e4:	42000204 	addi	r8,r8,8
 20011e8:	b440130e 	bge	r22,r17,2001238 <___vfprintf_internal_r+0x818>
 20011ec:	01008134 	movhi	r4,516
 20011f0:	18c00404 	addi	r3,r3,16
 20011f4:	10800044 	addi	r2,r2,1
 20011f8:	21038484 	addi	r4,r4,3602
 20011fc:	41000015 	stw	r4,0(r8)
 2001200:	45800115 	stw	r22,4(r8)
 2001204:	d8c02015 	stw	r3,128(sp)
 2001208:	d8801f15 	stw	r2,124(sp)
 200120c:	e0bff40e 	bge	fp,r2,20011e0 <__alt_mem_mem_0+0xfcfe11e0>
 2001210:	d9801e04 	addi	r6,sp,120
 2001214:	b80b883a 	mov	r5,r23
 2001218:	8009883a 	mov	r4,r16
 200121c:	20075380 	call	2007538 <__sprint_r>
 2001220:	103f011e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001224:	8c7ffc04 	addi	r17,r17,-16
 2001228:	d8c02017 	ldw	r3,128(sp)
 200122c:	d8801f17 	ldw	r2,124(sp)
 2001230:	da000404 	addi	r8,sp,16
 2001234:	b47fed16 	blt	r22,r17,20011ec <__alt_mem_mem_0+0xfcfe11ec>
 2001238:	9021883a 	mov	r16,r18
 200123c:	9825883a 	mov	r18,r19
 2001240:	8827883a 	mov	r19,r17
 2001244:	dc403b17 	ldw	r17,236(sp)
 2001248:	d9403517 	ldw	r5,212(sp)
 200124c:	98c7883a 	add	r3,r19,r3
 2001250:	10800044 	addi	r2,r2,1
 2001254:	41400015 	stw	r5,0(r8)
 2001258:	44c00115 	stw	r19,4(r8)
 200125c:	d8c02015 	stw	r3,128(sp)
 2001260:	d8801f15 	stw	r2,124(sp)
 2001264:	010001c4 	movi	r4,7
 2001268:	2082a316 	blt	r4,r2,2001cf8 <___vfprintf_internal_r+0x12d8>
 200126c:	df002787 	ldb	fp,158(sp)
 2001270:	42000204 	addi	r8,r8,8
 2001274:	e0000c26 	beq	fp,zero,20012a8 <___vfprintf_internal_r+0x888>
 2001278:	d8801f17 	ldw	r2,124(sp)
 200127c:	d9002784 	addi	r4,sp,158
 2001280:	18c00044 	addi	r3,r3,1
 2001284:	10800044 	addi	r2,r2,1
 2001288:	41000015 	stw	r4,0(r8)
 200128c:	01000044 	movi	r4,1
 2001290:	41000115 	stw	r4,4(r8)
 2001294:	d8c02015 	stw	r3,128(sp)
 2001298:	d8801f15 	stw	r2,124(sp)
 200129c:	010001c4 	movi	r4,7
 20012a0:	20823c16 	blt	r4,r2,2001b94 <___vfprintf_internal_r+0x1174>
 20012a4:	42000204 	addi	r8,r8,8
 20012a8:	d8802b17 	ldw	r2,172(sp)
 20012ac:	10000c26 	beq	r2,zero,20012e0 <___vfprintf_internal_r+0x8c0>
 20012b0:	d8801f17 	ldw	r2,124(sp)
 20012b4:	d9002704 	addi	r4,sp,156
 20012b8:	18c00084 	addi	r3,r3,2
 20012bc:	10800044 	addi	r2,r2,1
 20012c0:	41000015 	stw	r4,0(r8)
 20012c4:	01000084 	movi	r4,2
 20012c8:	41000115 	stw	r4,4(r8)
 20012cc:	d8c02015 	stw	r3,128(sp)
 20012d0:	d8801f15 	stw	r2,124(sp)
 20012d4:	010001c4 	movi	r4,7
 20012d8:	20823616 	blt	r4,r2,2001bb4 <___vfprintf_internal_r+0x1194>
 20012dc:	42000204 	addi	r8,r8,8
 20012e0:	d9003017 	ldw	r4,192(sp)
 20012e4:	00802004 	movi	r2,128
 20012e8:	20819926 	beq	r4,r2,2001950 <___vfprintf_internal_r+0xf30>
 20012ec:	d9402917 	ldw	r5,164(sp)
 20012f0:	d8802e17 	ldw	r2,184(sp)
 20012f4:	28adc83a 	sub	r22,r5,r2
 20012f8:	0580310e 	bge	zero,r22,20013c0 <___vfprintf_internal_r+0x9a0>
 20012fc:	07000404 	movi	fp,16
 2001300:	d8801f17 	ldw	r2,124(sp)
 2001304:	e584140e 	bge	fp,r22,2002358 <___vfprintf_internal_r+0x1938>
 2001308:	01408134 	movhi	r5,516
 200130c:	29438084 	addi	r5,r5,3586
 2001310:	dc402915 	stw	r17,164(sp)
 2001314:	d9402b15 	stw	r5,172(sp)
 2001318:	b023883a 	mov	r17,r22
 200131c:	04c001c4 	movi	r19,7
 2001320:	a82d883a 	mov	r22,r21
 2001324:	902b883a 	mov	r21,r18
 2001328:	8025883a 	mov	r18,r16
 200132c:	dc002c17 	ldw	r16,176(sp)
 2001330:	00000306 	br	2001340 <___vfprintf_internal_r+0x920>
 2001334:	8c7ffc04 	addi	r17,r17,-16
 2001338:	42000204 	addi	r8,r8,8
 200133c:	e440110e 	bge	fp,r17,2001384 <___vfprintf_internal_r+0x964>
 2001340:	18c00404 	addi	r3,r3,16
 2001344:	10800044 	addi	r2,r2,1
 2001348:	45000015 	stw	r20,0(r8)
 200134c:	47000115 	stw	fp,4(r8)
 2001350:	d8c02015 	stw	r3,128(sp)
 2001354:	d8801f15 	stw	r2,124(sp)
 2001358:	98bff60e 	bge	r19,r2,2001334 <__alt_mem_mem_0+0xfcfe1334>
 200135c:	d9801e04 	addi	r6,sp,120
 2001360:	b80b883a 	mov	r5,r23
 2001364:	8009883a 	mov	r4,r16
 2001368:	20075380 	call	2007538 <__sprint_r>
 200136c:	103eae1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001370:	8c7ffc04 	addi	r17,r17,-16
 2001374:	d8c02017 	ldw	r3,128(sp)
 2001378:	d8801f17 	ldw	r2,124(sp)
 200137c:	da000404 	addi	r8,sp,16
 2001380:	e47fef16 	blt	fp,r17,2001340 <__alt_mem_mem_0+0xfcfe1340>
 2001384:	9021883a 	mov	r16,r18
 2001388:	a825883a 	mov	r18,r21
 200138c:	b02b883a 	mov	r21,r22
 2001390:	882d883a 	mov	r22,r17
 2001394:	dc402917 	ldw	r17,164(sp)
 2001398:	d9002b17 	ldw	r4,172(sp)
 200139c:	1d87883a 	add	r3,r3,r22
 20013a0:	10800044 	addi	r2,r2,1
 20013a4:	41000015 	stw	r4,0(r8)
 20013a8:	45800115 	stw	r22,4(r8)
 20013ac:	d8c02015 	stw	r3,128(sp)
 20013b0:	d8801f15 	stw	r2,124(sp)
 20013b4:	010001c4 	movi	r4,7
 20013b8:	2081ee16 	blt	r4,r2,2001b74 <___vfprintf_internal_r+0x1154>
 20013bc:	42000204 	addi	r8,r8,8
 20013c0:	9080400c 	andi	r2,r18,256
 20013c4:	1001181e 	bne	r2,zero,2001828 <___vfprintf_internal_r+0xe08>
 20013c8:	d9402e17 	ldw	r5,184(sp)
 20013cc:	d8801f17 	ldw	r2,124(sp)
 20013d0:	44000015 	stw	r16,0(r8)
 20013d4:	1947883a 	add	r3,r3,r5
 20013d8:	10800044 	addi	r2,r2,1
 20013dc:	41400115 	stw	r5,4(r8)
 20013e0:	d8c02015 	stw	r3,128(sp)
 20013e4:	d8801f15 	stw	r2,124(sp)
 20013e8:	010001c4 	movi	r4,7
 20013ec:	2081d316 	blt	r4,r2,2001b3c <___vfprintf_internal_r+0x111c>
 20013f0:	42000204 	addi	r8,r8,8
 20013f4:	9480010c 	andi	r18,r18,4
 20013f8:	90003226 	beq	r18,zero,20014c4 <___vfprintf_internal_r+0xaa4>
 20013fc:	d9403117 	ldw	r5,196(sp)
 2001400:	d8802a17 	ldw	r2,168(sp)
 2001404:	28a1c83a 	sub	r16,r5,r2
 2001408:	04002e0e 	bge	zero,r16,20014c4 <___vfprintf_internal_r+0xaa4>
 200140c:	04400404 	movi	r17,16
 2001410:	d8801f17 	ldw	r2,124(sp)
 2001414:	8c04a20e 	bge	r17,r16,20026a0 <___vfprintf_internal_r+0x1c80>
 2001418:	01408134 	movhi	r5,516
 200141c:	29438484 	addi	r5,r5,3602
 2001420:	d9403515 	stw	r5,212(sp)
 2001424:	048001c4 	movi	r18,7
 2001428:	dcc02c17 	ldw	r19,176(sp)
 200142c:	00000306 	br	200143c <___vfprintf_internal_r+0xa1c>
 2001430:	843ffc04 	addi	r16,r16,-16
 2001434:	42000204 	addi	r8,r8,8
 2001438:	8c00130e 	bge	r17,r16,2001488 <___vfprintf_internal_r+0xa68>
 200143c:	01008134 	movhi	r4,516
 2001440:	18c00404 	addi	r3,r3,16
 2001444:	10800044 	addi	r2,r2,1
 2001448:	21038484 	addi	r4,r4,3602
 200144c:	41000015 	stw	r4,0(r8)
 2001450:	44400115 	stw	r17,4(r8)
 2001454:	d8c02015 	stw	r3,128(sp)
 2001458:	d8801f15 	stw	r2,124(sp)
 200145c:	90bff40e 	bge	r18,r2,2001430 <__alt_mem_mem_0+0xfcfe1430>
 2001460:	d9801e04 	addi	r6,sp,120
 2001464:	b80b883a 	mov	r5,r23
 2001468:	9809883a 	mov	r4,r19
 200146c:	20075380 	call	2007538 <__sprint_r>
 2001470:	103e6d1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001474:	843ffc04 	addi	r16,r16,-16
 2001478:	d8c02017 	ldw	r3,128(sp)
 200147c:	d8801f17 	ldw	r2,124(sp)
 2001480:	da000404 	addi	r8,sp,16
 2001484:	8c3fed16 	blt	r17,r16,200143c <__alt_mem_mem_0+0xfcfe143c>
 2001488:	d9403517 	ldw	r5,212(sp)
 200148c:	1c07883a 	add	r3,r3,r16
 2001490:	10800044 	addi	r2,r2,1
 2001494:	41400015 	stw	r5,0(r8)
 2001498:	44000115 	stw	r16,4(r8)
 200149c:	d8c02015 	stw	r3,128(sp)
 20014a0:	d8801f15 	stw	r2,124(sp)
 20014a4:	010001c4 	movi	r4,7
 20014a8:	2080060e 	bge	r4,r2,20014c4 <___vfprintf_internal_r+0xaa4>
 20014ac:	d9002c17 	ldw	r4,176(sp)
 20014b0:	d9801e04 	addi	r6,sp,120
 20014b4:	b80b883a 	mov	r5,r23
 20014b8:	20075380 	call	2007538 <__sprint_r>
 20014bc:	103e5a1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 20014c0:	d8c02017 	ldw	r3,128(sp)
 20014c4:	d8803117 	ldw	r2,196(sp)
 20014c8:	d9002a17 	ldw	r4,168(sp)
 20014cc:	1100010e 	bge	r2,r4,20014d4 <___vfprintf_internal_r+0xab4>
 20014d0:	2005883a 	mov	r2,r4
 20014d4:	d9402f17 	ldw	r5,188(sp)
 20014d8:	288b883a 	add	r5,r5,r2
 20014dc:	d9402f15 	stw	r5,188(sp)
 20014e0:	18019e1e 	bne	r3,zero,2001b5c <___vfprintf_internal_r+0x113c>
 20014e4:	a8800007 	ldb	r2,0(r21)
 20014e8:	d8001f15 	stw	zero,124(sp)
 20014ec:	da000404 	addi	r8,sp,16
 20014f0:	103d851e 	bne	r2,zero,2000b08 <__alt_mem_mem_0+0xfcfe0b08>
 20014f4:	a821883a 	mov	r16,r21
 20014f8:	003d9b06 	br	2000b68 <__alt_mem_mem_0+0xfcfe0b68>
 20014fc:	18c03fcc 	andi	r3,r3,255
 2001500:	1805c11e 	bne	r3,zero,2002c08 <___vfprintf_internal_r+0x21e8>
 2001504:	94800414 	ori	r18,r18,16
 2001508:	9080080c 	andi	r2,r18,32
 200150c:	10020c26 	beq	r2,zero,2001d40 <___vfprintf_internal_r+0x1320>
 2001510:	d8802d17 	ldw	r2,180(sp)
 2001514:	d9002917 	ldw	r4,164(sp)
 2001518:	d8002785 	stb	zero,158(sp)
 200151c:	10c00204 	addi	r3,r2,8
 2001520:	14c00017 	ldw	r19,0(r2)
 2001524:	15800117 	ldw	r22,4(r2)
 2001528:	20040f16 	blt	r4,zero,2002568 <___vfprintf_internal_r+0x1b48>
 200152c:	013fdfc4 	movi	r4,-129
 2001530:	9d84b03a 	or	r2,r19,r22
 2001534:	d8c02d15 	stw	r3,180(sp)
 2001538:	9124703a 	and	r18,r18,r4
 200153c:	0039883a 	mov	fp,zero
 2001540:	103e891e 	bne	r2,zero,2000f68 <__alt_mem_mem_0+0xfcfe0f68>
 2001544:	d9002917 	ldw	r4,164(sp)
 2001548:	2002c11e 	bne	r4,zero,2002050 <___vfprintf_internal_r+0x1630>
 200154c:	d8002915 	stw	zero,164(sp)
 2001550:	d8002e15 	stw	zero,184(sp)
 2001554:	dc001e04 	addi	r16,sp,120
 2001558:	003ef806 	br	200113c <__alt_mem_mem_0+0xfcfe113c>
 200155c:	18c03fcc 	andi	r3,r3,255
 2001560:	18059d1e 	bne	r3,zero,2002bd8 <___vfprintf_internal_r+0x21b8>
 2001564:	01408134 	movhi	r5,516
 2001568:	29437404 	addi	r5,r5,3536
 200156c:	d9403915 	stw	r5,228(sp)
 2001570:	9080080c 	andi	r2,r18,32
 2001574:	10005226 	beq	r2,zero,20016c0 <___vfprintf_internal_r+0xca0>
 2001578:	d8802d17 	ldw	r2,180(sp)
 200157c:	14c00017 	ldw	r19,0(r2)
 2001580:	15800117 	ldw	r22,4(r2)
 2001584:	10800204 	addi	r2,r2,8
 2001588:	d8802d15 	stw	r2,180(sp)
 200158c:	9080004c 	andi	r2,r18,1
 2001590:	10019026 	beq	r2,zero,2001bd4 <___vfprintf_internal_r+0x11b4>
 2001594:	9d84b03a 	or	r2,r19,r22
 2001598:	10036926 	beq	r2,zero,2002340 <___vfprintf_internal_r+0x1920>
 200159c:	d8c02917 	ldw	r3,164(sp)
 20015a0:	00800c04 	movi	r2,48
 20015a4:	d8802705 	stb	r2,156(sp)
 20015a8:	dc402745 	stb	r17,157(sp)
 20015ac:	d8002785 	stb	zero,158(sp)
 20015b0:	90800094 	ori	r2,r18,2
 20015b4:	18045d16 	blt	r3,zero,200272c <___vfprintf_internal_r+0x1d0c>
 20015b8:	00bfdfc4 	movi	r2,-129
 20015bc:	90a4703a 	and	r18,r18,r2
 20015c0:	94800094 	ori	r18,r18,2
 20015c4:	0039883a 	mov	fp,zero
 20015c8:	d9003917 	ldw	r4,228(sp)
 20015cc:	dc001e04 	addi	r16,sp,120
 20015d0:	988003cc 	andi	r2,r19,15
 20015d4:	b006973a 	slli	r3,r22,28
 20015d8:	2085883a 	add	r2,r4,r2
 20015dc:	9826d13a 	srli	r19,r19,4
 20015e0:	10800003 	ldbu	r2,0(r2)
 20015e4:	b02cd13a 	srli	r22,r22,4
 20015e8:	843fffc4 	addi	r16,r16,-1
 20015ec:	1ce6b03a 	or	r19,r3,r19
 20015f0:	80800005 	stb	r2,0(r16)
 20015f4:	9d84b03a 	or	r2,r19,r22
 20015f8:	103ff51e 	bne	r2,zero,20015d0 <__alt_mem_mem_0+0xfcfe15d0>
 20015fc:	d8c02817 	ldw	r3,160(sp)
 2001600:	1c07c83a 	sub	r3,r3,r16
 2001604:	d8c02e15 	stw	r3,184(sp)
 2001608:	003ecc06 	br	200113c <__alt_mem_mem_0+0xfcfe113c>
 200160c:	18c03fcc 	andi	r3,r3,255
 2001610:	183e9f26 	beq	r3,zero,2001090 <__alt_mem_mem_0+0xfcfe1090>
 2001614:	d9c02785 	stb	r7,158(sp)
 2001618:	003e9d06 	br	2001090 <__alt_mem_mem_0+0xfcfe1090>
 200161c:	00c00044 	movi	r3,1
 2001620:	01c00ac4 	movi	r7,43
 2001624:	ac400007 	ldb	r17,0(r21)
 2001628:	003d5e06 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 200162c:	94800814 	ori	r18,r18,32
 2001630:	ac400007 	ldb	r17,0(r21)
 2001634:	003d5b06 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 2001638:	d8c02d17 	ldw	r3,180(sp)
 200163c:	d8002785 	stb	zero,158(sp)
 2001640:	1c000017 	ldw	r16,0(r3)
 2001644:	1cc00104 	addi	r19,r3,4
 2001648:	80041926 	beq	r16,zero,20026b0 <___vfprintf_internal_r+0x1c90>
 200164c:	d9002917 	ldw	r4,164(sp)
 2001650:	2003d016 	blt	r4,zero,2002594 <___vfprintf_internal_r+0x1b74>
 2001654:	200d883a 	mov	r6,r4
 2001658:	000b883a 	mov	r5,zero
 200165c:	8009883a 	mov	r4,r16
 2001660:	da003d15 	stw	r8,244(sp)
 2001664:	2005d740 	call	2005d74 <memchr>
 2001668:	da003d17 	ldw	r8,244(sp)
 200166c:	10045426 	beq	r2,zero,20027c0 <___vfprintf_internal_r+0x1da0>
 2001670:	1405c83a 	sub	r2,r2,r16
 2001674:	d8802e15 	stw	r2,184(sp)
 2001678:	1003cc16 	blt	r2,zero,20025ac <___vfprintf_internal_r+0x1b8c>
 200167c:	df002783 	ldbu	fp,158(sp)
 2001680:	d8802a15 	stw	r2,168(sp)
 2001684:	dcc02d15 	stw	r19,180(sp)
 2001688:	d8002915 	stw	zero,164(sp)
 200168c:	d8003215 	stw	zero,200(sp)
 2001690:	003eb006 	br	2001154 <__alt_mem_mem_0+0xfcfe1154>
 2001694:	18c03fcc 	andi	r3,r3,255
 2001698:	183f9b26 	beq	r3,zero,2001508 <__alt_mem_mem_0+0xfcfe1508>
 200169c:	d9c02785 	stb	r7,158(sp)
 20016a0:	003f9906 	br	2001508 <__alt_mem_mem_0+0xfcfe1508>
 20016a4:	18c03fcc 	andi	r3,r3,255
 20016a8:	1805551e 	bne	r3,zero,2002c00 <___vfprintf_internal_r+0x21e0>
 20016ac:	01408134 	movhi	r5,516
 20016b0:	29437904 	addi	r5,r5,3556
 20016b4:	d9403915 	stw	r5,228(sp)
 20016b8:	9080080c 	andi	r2,r18,32
 20016bc:	103fae1e 	bne	r2,zero,2001578 <__alt_mem_mem_0+0xfcfe1578>
 20016c0:	9080040c 	andi	r2,r18,16
 20016c4:	1002de26 	beq	r2,zero,2002240 <___vfprintf_internal_r+0x1820>
 20016c8:	d8c02d17 	ldw	r3,180(sp)
 20016cc:	002d883a 	mov	r22,zero
 20016d0:	1cc00017 	ldw	r19,0(r3)
 20016d4:	18c00104 	addi	r3,r3,4
 20016d8:	d8c02d15 	stw	r3,180(sp)
 20016dc:	003fab06 	br	200158c <__alt_mem_mem_0+0xfcfe158c>
 20016e0:	38803fcc 	andi	r2,r7,255
 20016e4:	1080201c 	xori	r2,r2,128
 20016e8:	10bfe004 	addi	r2,r2,-128
 20016ec:	1002d21e 	bne	r2,zero,2002238 <___vfprintf_internal_r+0x1818>
 20016f0:	00c00044 	movi	r3,1
 20016f4:	01c00804 	movi	r7,32
 20016f8:	ac400007 	ldb	r17,0(r21)
 20016fc:	003d2906 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 2001700:	94800054 	ori	r18,r18,1
 2001704:	ac400007 	ldb	r17,0(r21)
 2001708:	003d2606 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 200170c:	18c03fcc 	andi	r3,r3,255
 2001710:	183e0526 	beq	r3,zero,2000f28 <__alt_mem_mem_0+0xfcfe0f28>
 2001714:	d9c02785 	stb	r7,158(sp)
 2001718:	003e0306 	br	2000f28 <__alt_mem_mem_0+0xfcfe0f28>
 200171c:	94801014 	ori	r18,r18,64
 2001720:	ac400007 	ldb	r17,0(r21)
 2001724:	003d1f06 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 2001728:	ac400007 	ldb	r17,0(r21)
 200172c:	8a438726 	beq	r17,r9,200254c <___vfprintf_internal_r+0x1b2c>
 2001730:	94800414 	ori	r18,r18,16
 2001734:	003d1b06 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 2001738:	18c03fcc 	andi	r3,r3,255
 200173c:	1805341e 	bne	r3,zero,2002c10 <___vfprintf_internal_r+0x21f0>
 2001740:	9080080c 	andi	r2,r18,32
 2001744:	1002cd26 	beq	r2,zero,200227c <___vfprintf_internal_r+0x185c>
 2001748:	d9402d17 	ldw	r5,180(sp)
 200174c:	d9002f17 	ldw	r4,188(sp)
 2001750:	28800017 	ldw	r2,0(r5)
 2001754:	2007d7fa 	srai	r3,r4,31
 2001758:	29400104 	addi	r5,r5,4
 200175c:	d9402d15 	stw	r5,180(sp)
 2001760:	11000015 	stw	r4,0(r2)
 2001764:	10c00115 	stw	r3,4(r2)
 2001768:	003ce506 	br	2000b00 <__alt_mem_mem_0+0xfcfe0b00>
 200176c:	d8c02d17 	ldw	r3,180(sp)
 2001770:	d9002d17 	ldw	r4,180(sp)
 2001774:	d8002785 	stb	zero,158(sp)
 2001778:	18800017 	ldw	r2,0(r3)
 200177c:	21000104 	addi	r4,r4,4
 2001780:	00c00044 	movi	r3,1
 2001784:	d8c02a15 	stw	r3,168(sp)
 2001788:	d8801405 	stb	r2,80(sp)
 200178c:	d9002d15 	stw	r4,180(sp)
 2001790:	d8c02e15 	stw	r3,184(sp)
 2001794:	d8002915 	stw	zero,164(sp)
 2001798:	d8003215 	stw	zero,200(sp)
 200179c:	dc001404 	addi	r16,sp,80
 20017a0:	0039883a 	mov	fp,zero
 20017a4:	003e7206 	br	2001170 <__alt_mem_mem_0+0xfcfe1170>
 20017a8:	01008134 	movhi	r4,516
 20017ac:	21037904 	addi	r4,r4,3556
 20017b0:	0039883a 	mov	fp,zero
 20017b4:	d9003915 	stw	r4,228(sp)
 20017b8:	04401e04 	movi	r17,120
 20017bc:	003f8206 	br	20015c8 <__alt_mem_mem_0+0xfcfe15c8>
 20017c0:	18c03fcc 	andi	r3,r3,255
 20017c4:	1805061e 	bne	r3,zero,2002be0 <___vfprintf_internal_r+0x21c0>
 20017c8:	883d9126 	beq	r17,zero,2000e10 <__alt_mem_mem_0+0xfcfe0e10>
 20017cc:	00c00044 	movi	r3,1
 20017d0:	d8c02a15 	stw	r3,168(sp)
 20017d4:	dc401405 	stb	r17,80(sp)
 20017d8:	d8002785 	stb	zero,158(sp)
 20017dc:	003fec06 	br	2001790 <__alt_mem_mem_0+0xfcfe1790>
 20017e0:	01408134 	movhi	r5,516
 20017e4:	29437904 	addi	r5,r5,3556
 20017e8:	d9403915 	stw	r5,228(sp)
 20017ec:	d8c02d15 	stw	r3,180(sp)
 20017f0:	1025883a 	mov	r18,r2
 20017f4:	04401e04 	movi	r17,120
 20017f8:	9d84b03a 	or	r2,r19,r22
 20017fc:	1000fc1e 	bne	r2,zero,2001bf0 <___vfprintf_internal_r+0x11d0>
 2001800:	0039883a 	mov	fp,zero
 2001804:	00800084 	movi	r2,2
 2001808:	10803fcc 	andi	r2,r2,255
 200180c:	00c00044 	movi	r3,1
 2001810:	10c20f26 	beq	r2,r3,2002050 <___vfprintf_internal_r+0x1630>
 2001814:	00c00084 	movi	r3,2
 2001818:	10fd6326 	beq	r2,r3,2000da8 <__alt_mem_mem_0+0xfcfe0da8>
 200181c:	003e2d06 	br	20010d4 <__alt_mem_mem_0+0xfcfe10d4>
 2001820:	d8c02017 	ldw	r3,128(sp)
 2001824:	003e9306 	br	2001274 <__alt_mem_mem_0+0xfcfe1274>
 2001828:	00801944 	movi	r2,101
 200182c:	14407e0e 	bge	r2,r17,2001a28 <___vfprintf_internal_r+0x1008>
 2001830:	d9003617 	ldw	r4,216(sp)
 2001834:	d9403817 	ldw	r5,224(sp)
 2001838:	000d883a 	mov	r6,zero
 200183c:	000f883a 	mov	r7,zero
 2001840:	d8c03c15 	stw	r3,240(sp)
 2001844:	da003d15 	stw	r8,244(sp)
 2001848:	200bd2c0 	call	200bd2c <__eqdf2>
 200184c:	d8c03c17 	ldw	r3,240(sp)
 2001850:	da003d17 	ldw	r8,244(sp)
 2001854:	1000f71e 	bne	r2,zero,2001c34 <___vfprintf_internal_r+0x1214>
 2001858:	d8801f17 	ldw	r2,124(sp)
 200185c:	01008134 	movhi	r4,516
 2001860:	21038004 	addi	r4,r4,3584
 2001864:	18c00044 	addi	r3,r3,1
 2001868:	10800044 	addi	r2,r2,1
 200186c:	41000015 	stw	r4,0(r8)
 2001870:	01000044 	movi	r4,1
 2001874:	41000115 	stw	r4,4(r8)
 2001878:	d8c02015 	stw	r3,128(sp)
 200187c:	d8801f15 	stw	r2,124(sp)
 2001880:	010001c4 	movi	r4,7
 2001884:	2082b816 	blt	r4,r2,2002368 <___vfprintf_internal_r+0x1948>
 2001888:	42000204 	addi	r8,r8,8
 200188c:	d8802617 	ldw	r2,152(sp)
 2001890:	d9403317 	ldw	r5,204(sp)
 2001894:	11400216 	blt	r2,r5,20018a0 <___vfprintf_internal_r+0xe80>
 2001898:	9080004c 	andi	r2,r18,1
 200189c:	103ed526 	beq	r2,zero,20013f4 <__alt_mem_mem_0+0xfcfe13f4>
 20018a0:	d8803717 	ldw	r2,220(sp)
 20018a4:	d9003417 	ldw	r4,208(sp)
 20018a8:	d9403717 	ldw	r5,220(sp)
 20018ac:	1887883a 	add	r3,r3,r2
 20018b0:	d8801f17 	ldw	r2,124(sp)
 20018b4:	41000015 	stw	r4,0(r8)
 20018b8:	41400115 	stw	r5,4(r8)
 20018bc:	10800044 	addi	r2,r2,1
 20018c0:	d8c02015 	stw	r3,128(sp)
 20018c4:	d8801f15 	stw	r2,124(sp)
 20018c8:	010001c4 	movi	r4,7
 20018cc:	20832916 	blt	r4,r2,2002574 <___vfprintf_internal_r+0x1b54>
 20018d0:	42000204 	addi	r8,r8,8
 20018d4:	d8803317 	ldw	r2,204(sp)
 20018d8:	143fffc4 	addi	r16,r2,-1
 20018dc:	043ec50e 	bge	zero,r16,20013f4 <__alt_mem_mem_0+0xfcfe13f4>
 20018e0:	04400404 	movi	r17,16
 20018e4:	d8801f17 	ldw	r2,124(sp)
 20018e8:	8c00880e 	bge	r17,r16,2001b0c <___vfprintf_internal_r+0x10ec>
 20018ec:	01408134 	movhi	r5,516
 20018f0:	29438084 	addi	r5,r5,3586
 20018f4:	d9402b15 	stw	r5,172(sp)
 20018f8:	058001c4 	movi	r22,7
 20018fc:	dcc02c17 	ldw	r19,176(sp)
 2001900:	00000306 	br	2001910 <___vfprintf_internal_r+0xef0>
 2001904:	42000204 	addi	r8,r8,8
 2001908:	843ffc04 	addi	r16,r16,-16
 200190c:	8c00820e 	bge	r17,r16,2001b18 <___vfprintf_internal_r+0x10f8>
 2001910:	18c00404 	addi	r3,r3,16
 2001914:	10800044 	addi	r2,r2,1
 2001918:	45000015 	stw	r20,0(r8)
 200191c:	44400115 	stw	r17,4(r8)
 2001920:	d8c02015 	stw	r3,128(sp)
 2001924:	d8801f15 	stw	r2,124(sp)
 2001928:	b0bff60e 	bge	r22,r2,2001904 <__alt_mem_mem_0+0xfcfe1904>
 200192c:	d9801e04 	addi	r6,sp,120
 2001930:	b80b883a 	mov	r5,r23
 2001934:	9809883a 	mov	r4,r19
 2001938:	20075380 	call	2007538 <__sprint_r>
 200193c:	103d3a1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001940:	d8c02017 	ldw	r3,128(sp)
 2001944:	d8801f17 	ldw	r2,124(sp)
 2001948:	da000404 	addi	r8,sp,16
 200194c:	003fee06 	br	2001908 <__alt_mem_mem_0+0xfcfe1908>
 2001950:	d9403117 	ldw	r5,196(sp)
 2001954:	d8802a17 	ldw	r2,168(sp)
 2001958:	28adc83a 	sub	r22,r5,r2
 200195c:	05be630e 	bge	zero,r22,20012ec <__alt_mem_mem_0+0xfcfe12ec>
 2001960:	07000404 	movi	fp,16
 2001964:	d8801f17 	ldw	r2,124(sp)
 2001968:	e5838f0e 	bge	fp,r22,20027a8 <___vfprintf_internal_r+0x1d88>
 200196c:	01408134 	movhi	r5,516
 2001970:	29438084 	addi	r5,r5,3586
 2001974:	dc403015 	stw	r17,192(sp)
 2001978:	d9402b15 	stw	r5,172(sp)
 200197c:	b023883a 	mov	r17,r22
 2001980:	04c001c4 	movi	r19,7
 2001984:	a82d883a 	mov	r22,r21
 2001988:	902b883a 	mov	r21,r18
 200198c:	8025883a 	mov	r18,r16
 2001990:	dc002c17 	ldw	r16,176(sp)
 2001994:	00000306 	br	20019a4 <___vfprintf_internal_r+0xf84>
 2001998:	8c7ffc04 	addi	r17,r17,-16
 200199c:	42000204 	addi	r8,r8,8
 20019a0:	e440110e 	bge	fp,r17,20019e8 <___vfprintf_internal_r+0xfc8>
 20019a4:	18c00404 	addi	r3,r3,16
 20019a8:	10800044 	addi	r2,r2,1
 20019ac:	45000015 	stw	r20,0(r8)
 20019b0:	47000115 	stw	fp,4(r8)
 20019b4:	d8c02015 	stw	r3,128(sp)
 20019b8:	d8801f15 	stw	r2,124(sp)
 20019bc:	98bff60e 	bge	r19,r2,2001998 <__alt_mem_mem_0+0xfcfe1998>
 20019c0:	d9801e04 	addi	r6,sp,120
 20019c4:	b80b883a 	mov	r5,r23
 20019c8:	8009883a 	mov	r4,r16
 20019cc:	20075380 	call	2007538 <__sprint_r>
 20019d0:	103d151e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 20019d4:	8c7ffc04 	addi	r17,r17,-16
 20019d8:	d8c02017 	ldw	r3,128(sp)
 20019dc:	d8801f17 	ldw	r2,124(sp)
 20019e0:	da000404 	addi	r8,sp,16
 20019e4:	e47fef16 	blt	fp,r17,20019a4 <__alt_mem_mem_0+0xfcfe19a4>
 20019e8:	9021883a 	mov	r16,r18
 20019ec:	a825883a 	mov	r18,r21
 20019f0:	b02b883a 	mov	r21,r22
 20019f4:	882d883a 	mov	r22,r17
 20019f8:	dc403017 	ldw	r17,192(sp)
 20019fc:	d9002b17 	ldw	r4,172(sp)
 2001a00:	1d87883a 	add	r3,r3,r22
 2001a04:	10800044 	addi	r2,r2,1
 2001a08:	41000015 	stw	r4,0(r8)
 2001a0c:	45800115 	stw	r22,4(r8)
 2001a10:	d8c02015 	stw	r3,128(sp)
 2001a14:	d8801f15 	stw	r2,124(sp)
 2001a18:	010001c4 	movi	r4,7
 2001a1c:	20818e16 	blt	r4,r2,2002058 <___vfprintf_internal_r+0x1638>
 2001a20:	42000204 	addi	r8,r8,8
 2001a24:	003e3106 	br	20012ec <__alt_mem_mem_0+0xfcfe12ec>
 2001a28:	d9403317 	ldw	r5,204(sp)
 2001a2c:	00800044 	movi	r2,1
 2001a30:	18c00044 	addi	r3,r3,1
 2001a34:	1141530e 	bge	r2,r5,2001f84 <___vfprintf_internal_r+0x1564>
 2001a38:	dc401f17 	ldw	r17,124(sp)
 2001a3c:	00800044 	movi	r2,1
 2001a40:	40800115 	stw	r2,4(r8)
 2001a44:	8c400044 	addi	r17,r17,1
 2001a48:	44000015 	stw	r16,0(r8)
 2001a4c:	d8c02015 	stw	r3,128(sp)
 2001a50:	dc401f15 	stw	r17,124(sp)
 2001a54:	008001c4 	movi	r2,7
 2001a58:	14416b16 	blt	r2,r17,2002008 <___vfprintf_internal_r+0x15e8>
 2001a5c:	42000204 	addi	r8,r8,8
 2001a60:	d8803717 	ldw	r2,220(sp)
 2001a64:	d9003417 	ldw	r4,208(sp)
 2001a68:	8c400044 	addi	r17,r17,1
 2001a6c:	10c7883a 	add	r3,r2,r3
 2001a70:	40800115 	stw	r2,4(r8)
 2001a74:	41000015 	stw	r4,0(r8)
 2001a78:	d8c02015 	stw	r3,128(sp)
 2001a7c:	dc401f15 	stw	r17,124(sp)
 2001a80:	008001c4 	movi	r2,7
 2001a84:	14416916 	blt	r2,r17,200202c <___vfprintf_internal_r+0x160c>
 2001a88:	45800204 	addi	r22,r8,8
 2001a8c:	d9003617 	ldw	r4,216(sp)
 2001a90:	d9403817 	ldw	r5,224(sp)
 2001a94:	000d883a 	mov	r6,zero
 2001a98:	000f883a 	mov	r7,zero
 2001a9c:	d8c03c15 	stw	r3,240(sp)
 2001aa0:	200bd2c0 	call	200bd2c <__eqdf2>
 2001aa4:	d8c03c17 	ldw	r3,240(sp)
 2001aa8:	1000bc26 	beq	r2,zero,2001d9c <___vfprintf_internal_r+0x137c>
 2001aac:	d9403317 	ldw	r5,204(sp)
 2001ab0:	84000044 	addi	r16,r16,1
 2001ab4:	8c400044 	addi	r17,r17,1
 2001ab8:	28bfffc4 	addi	r2,r5,-1
 2001abc:	1887883a 	add	r3,r3,r2
 2001ac0:	b0800115 	stw	r2,4(r22)
 2001ac4:	b4000015 	stw	r16,0(r22)
 2001ac8:	d8c02015 	stw	r3,128(sp)
 2001acc:	dc401f15 	stw	r17,124(sp)
 2001ad0:	008001c4 	movi	r2,7
 2001ad4:	14414316 	blt	r2,r17,2001fe4 <___vfprintf_internal_r+0x15c4>
 2001ad8:	b5800204 	addi	r22,r22,8
 2001adc:	d9003a17 	ldw	r4,232(sp)
 2001ae0:	df0022c4 	addi	fp,sp,139
 2001ae4:	8c400044 	addi	r17,r17,1
 2001ae8:	20c7883a 	add	r3,r4,r3
 2001aec:	b7000015 	stw	fp,0(r22)
 2001af0:	b1000115 	stw	r4,4(r22)
 2001af4:	d8c02015 	stw	r3,128(sp)
 2001af8:	dc401f15 	stw	r17,124(sp)
 2001afc:	008001c4 	movi	r2,7
 2001b00:	14400e16 	blt	r2,r17,2001b3c <___vfprintf_internal_r+0x111c>
 2001b04:	b2000204 	addi	r8,r22,8
 2001b08:	003e3a06 	br	20013f4 <__alt_mem_mem_0+0xfcfe13f4>
 2001b0c:	01008134 	movhi	r4,516
 2001b10:	21038084 	addi	r4,r4,3586
 2001b14:	d9002b15 	stw	r4,172(sp)
 2001b18:	d9002b17 	ldw	r4,172(sp)
 2001b1c:	1c07883a 	add	r3,r3,r16
 2001b20:	44000115 	stw	r16,4(r8)
 2001b24:	41000015 	stw	r4,0(r8)
 2001b28:	10800044 	addi	r2,r2,1
 2001b2c:	d8c02015 	stw	r3,128(sp)
 2001b30:	d8801f15 	stw	r2,124(sp)
 2001b34:	010001c4 	movi	r4,7
 2001b38:	20be2d0e 	bge	r4,r2,20013f0 <__alt_mem_mem_0+0xfcfe13f0>
 2001b3c:	d9002c17 	ldw	r4,176(sp)
 2001b40:	d9801e04 	addi	r6,sp,120
 2001b44:	b80b883a 	mov	r5,r23
 2001b48:	20075380 	call	2007538 <__sprint_r>
 2001b4c:	103cb61e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001b50:	d8c02017 	ldw	r3,128(sp)
 2001b54:	da000404 	addi	r8,sp,16
 2001b58:	003e2606 	br	20013f4 <__alt_mem_mem_0+0xfcfe13f4>
 2001b5c:	d9002c17 	ldw	r4,176(sp)
 2001b60:	d9801e04 	addi	r6,sp,120
 2001b64:	b80b883a 	mov	r5,r23
 2001b68:	20075380 	call	2007538 <__sprint_r>
 2001b6c:	103e5d26 	beq	r2,zero,20014e4 <__alt_mem_mem_0+0xfcfe14e4>
 2001b70:	003cad06 	br	2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001b74:	d9002c17 	ldw	r4,176(sp)
 2001b78:	d9801e04 	addi	r6,sp,120
 2001b7c:	b80b883a 	mov	r5,r23
 2001b80:	20075380 	call	2007538 <__sprint_r>
 2001b84:	103ca81e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001b88:	d8c02017 	ldw	r3,128(sp)
 2001b8c:	da000404 	addi	r8,sp,16
 2001b90:	003e0b06 	br	20013c0 <__alt_mem_mem_0+0xfcfe13c0>
 2001b94:	d9002c17 	ldw	r4,176(sp)
 2001b98:	d9801e04 	addi	r6,sp,120
 2001b9c:	b80b883a 	mov	r5,r23
 2001ba0:	20075380 	call	2007538 <__sprint_r>
 2001ba4:	103ca01e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001ba8:	d8c02017 	ldw	r3,128(sp)
 2001bac:	da000404 	addi	r8,sp,16
 2001bb0:	003dbd06 	br	20012a8 <__alt_mem_mem_0+0xfcfe12a8>
 2001bb4:	d9002c17 	ldw	r4,176(sp)
 2001bb8:	d9801e04 	addi	r6,sp,120
 2001bbc:	b80b883a 	mov	r5,r23
 2001bc0:	20075380 	call	2007538 <__sprint_r>
 2001bc4:	103c981e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001bc8:	d8c02017 	ldw	r3,128(sp)
 2001bcc:	da000404 	addi	r8,sp,16
 2001bd0:	003dc306 	br	20012e0 <__alt_mem_mem_0+0xfcfe12e0>
 2001bd4:	d8802917 	ldw	r2,164(sp)
 2001bd8:	d8002785 	stb	zero,158(sp)
 2001bdc:	103f0616 	blt	r2,zero,20017f8 <__alt_mem_mem_0+0xfcfe17f8>
 2001be0:	00ffdfc4 	movi	r3,-129
 2001be4:	9d84b03a 	or	r2,r19,r22
 2001be8:	90e4703a 	and	r18,r18,r3
 2001bec:	103c6b26 	beq	r2,zero,2000d9c <__alt_mem_mem_0+0xfcfe0d9c>
 2001bf0:	0039883a 	mov	fp,zero
 2001bf4:	003e7406 	br	20015c8 <__alt_mem_mem_0+0xfcfe15c8>
 2001bf8:	9080040c 	andi	r2,r18,16
 2001bfc:	1001b326 	beq	r2,zero,20022cc <___vfprintf_internal_r+0x18ac>
 2001c00:	d9002d17 	ldw	r4,180(sp)
 2001c04:	d9402917 	ldw	r5,164(sp)
 2001c08:	d8002785 	stb	zero,158(sp)
 2001c0c:	20800104 	addi	r2,r4,4
 2001c10:	24c00017 	ldw	r19,0(r4)
 2001c14:	002d883a 	mov	r22,zero
 2001c18:	2801b516 	blt	r5,zero,20022f0 <___vfprintf_internal_r+0x18d0>
 2001c1c:	00ffdfc4 	movi	r3,-129
 2001c20:	d8802d15 	stw	r2,180(sp)
 2001c24:	90e4703a 	and	r18,r18,r3
 2001c28:	983d2726 	beq	r19,zero,20010c8 <__alt_mem_mem_0+0xfcfe10c8>
 2001c2c:	0039883a 	mov	fp,zero
 2001c30:	003d2a06 	br	20010dc <__alt_mem_mem_0+0xfcfe10dc>
 2001c34:	dc402617 	ldw	r17,152(sp)
 2001c38:	0441d30e 	bge	zero,r17,2002388 <___vfprintf_internal_r+0x1968>
 2001c3c:	dc403217 	ldw	r17,200(sp)
 2001c40:	d8803317 	ldw	r2,204(sp)
 2001c44:	1440010e 	bge	r2,r17,2001c4c <___vfprintf_internal_r+0x122c>
 2001c48:	1023883a 	mov	r17,r2
 2001c4c:	04400a0e 	bge	zero,r17,2001c78 <___vfprintf_internal_r+0x1258>
 2001c50:	d8801f17 	ldw	r2,124(sp)
 2001c54:	1c47883a 	add	r3,r3,r17
 2001c58:	44000015 	stw	r16,0(r8)
 2001c5c:	10800044 	addi	r2,r2,1
 2001c60:	44400115 	stw	r17,4(r8)
 2001c64:	d8c02015 	stw	r3,128(sp)
 2001c68:	d8801f15 	stw	r2,124(sp)
 2001c6c:	010001c4 	movi	r4,7
 2001c70:	20826516 	blt	r4,r2,2002608 <___vfprintf_internal_r+0x1be8>
 2001c74:	42000204 	addi	r8,r8,8
 2001c78:	88026116 	blt	r17,zero,2002600 <___vfprintf_internal_r+0x1be0>
 2001c7c:	d9003217 	ldw	r4,200(sp)
 2001c80:	2463c83a 	sub	r17,r4,r17
 2001c84:	04407b0e 	bge	zero,r17,2001e74 <___vfprintf_internal_r+0x1454>
 2001c88:	05800404 	movi	r22,16
 2001c8c:	d8801f17 	ldw	r2,124(sp)
 2001c90:	b4419d0e 	bge	r22,r17,2002308 <___vfprintf_internal_r+0x18e8>
 2001c94:	01008134 	movhi	r4,516
 2001c98:	21038084 	addi	r4,r4,3586
 2001c9c:	d9002b15 	stw	r4,172(sp)
 2001ca0:	070001c4 	movi	fp,7
 2001ca4:	dcc02c17 	ldw	r19,176(sp)
 2001ca8:	00000306 	br	2001cb8 <___vfprintf_internal_r+0x1298>
 2001cac:	42000204 	addi	r8,r8,8
 2001cb0:	8c7ffc04 	addi	r17,r17,-16
 2001cb4:	b441970e 	bge	r22,r17,2002314 <___vfprintf_internal_r+0x18f4>
 2001cb8:	18c00404 	addi	r3,r3,16
 2001cbc:	10800044 	addi	r2,r2,1
 2001cc0:	45000015 	stw	r20,0(r8)
 2001cc4:	45800115 	stw	r22,4(r8)
 2001cc8:	d8c02015 	stw	r3,128(sp)
 2001ccc:	d8801f15 	stw	r2,124(sp)
 2001cd0:	e0bff60e 	bge	fp,r2,2001cac <__alt_mem_mem_0+0xfcfe1cac>
 2001cd4:	d9801e04 	addi	r6,sp,120
 2001cd8:	b80b883a 	mov	r5,r23
 2001cdc:	9809883a 	mov	r4,r19
 2001ce0:	20075380 	call	2007538 <__sprint_r>
 2001ce4:	103c501e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001ce8:	d8c02017 	ldw	r3,128(sp)
 2001cec:	d8801f17 	ldw	r2,124(sp)
 2001cf0:	da000404 	addi	r8,sp,16
 2001cf4:	003fee06 	br	2001cb0 <__alt_mem_mem_0+0xfcfe1cb0>
 2001cf8:	d9002c17 	ldw	r4,176(sp)
 2001cfc:	d9801e04 	addi	r6,sp,120
 2001d00:	b80b883a 	mov	r5,r23
 2001d04:	20075380 	call	2007538 <__sprint_r>
 2001d08:	103c471e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001d0c:	d8c02017 	ldw	r3,128(sp)
 2001d10:	df002787 	ldb	fp,158(sp)
 2001d14:	da000404 	addi	r8,sp,16
 2001d18:	003d5606 	br	2001274 <__alt_mem_mem_0+0xfcfe1274>
 2001d1c:	9080040c 	andi	r2,r18,16
 2001d20:	10016126 	beq	r2,zero,20022a8 <___vfprintf_internal_r+0x1888>
 2001d24:	d8802d17 	ldw	r2,180(sp)
 2001d28:	14c00017 	ldw	r19,0(r2)
 2001d2c:	10800104 	addi	r2,r2,4
 2001d30:	d8802d15 	stw	r2,180(sp)
 2001d34:	982dd7fa 	srai	r22,r19,31
 2001d38:	b005883a 	mov	r2,r22
 2001d3c:	003c8206 	br	2000f48 <__alt_mem_mem_0+0xfcfe0f48>
 2001d40:	9080040c 	andi	r2,r18,16
 2001d44:	10003526 	beq	r2,zero,2001e1c <___vfprintf_internal_r+0x13fc>
 2001d48:	d9402d17 	ldw	r5,180(sp)
 2001d4c:	d8c02917 	ldw	r3,164(sp)
 2001d50:	d8002785 	stb	zero,158(sp)
 2001d54:	28800104 	addi	r2,r5,4
 2001d58:	2cc00017 	ldw	r19,0(r5)
 2001d5c:	002d883a 	mov	r22,zero
 2001d60:	18003716 	blt	r3,zero,2001e40 <___vfprintf_internal_r+0x1420>
 2001d64:	00ffdfc4 	movi	r3,-129
 2001d68:	d8802d15 	stw	r2,180(sp)
 2001d6c:	90e4703a 	and	r18,r18,r3
 2001d70:	0039883a 	mov	fp,zero
 2001d74:	983df326 	beq	r19,zero,2001544 <__alt_mem_mem_0+0xfcfe1544>
 2001d78:	00800244 	movi	r2,9
 2001d7c:	14fc7b36 	bltu	r2,r19,2000f6c <__alt_mem_mem_0+0xfcfe0f6c>
 2001d80:	d8c02817 	ldw	r3,160(sp)
 2001d84:	dc001dc4 	addi	r16,sp,119
 2001d88:	9cc00c04 	addi	r19,r19,48
 2001d8c:	1c07c83a 	sub	r3,r3,r16
 2001d90:	dcc01dc5 	stb	r19,119(sp)
 2001d94:	d8c02e15 	stw	r3,184(sp)
 2001d98:	003ce806 	br	200113c <__alt_mem_mem_0+0xfcfe113c>
 2001d9c:	d8803317 	ldw	r2,204(sp)
 2001da0:	143fffc4 	addi	r16,r2,-1
 2001da4:	043f4d0e 	bge	zero,r16,2001adc <__alt_mem_mem_0+0xfcfe1adc>
 2001da8:	07000404 	movi	fp,16
 2001dac:	e400810e 	bge	fp,r16,2001fb4 <___vfprintf_internal_r+0x1594>
 2001db0:	01408134 	movhi	r5,516
 2001db4:	29438084 	addi	r5,r5,3586
 2001db8:	d9402b15 	stw	r5,172(sp)
 2001dbc:	01c001c4 	movi	r7,7
 2001dc0:	dcc02c17 	ldw	r19,176(sp)
 2001dc4:	00000306 	br	2001dd4 <___vfprintf_internal_r+0x13b4>
 2001dc8:	b5800204 	addi	r22,r22,8
 2001dcc:	843ffc04 	addi	r16,r16,-16
 2001dd0:	e4007b0e 	bge	fp,r16,2001fc0 <___vfprintf_internal_r+0x15a0>
 2001dd4:	18c00404 	addi	r3,r3,16
 2001dd8:	8c400044 	addi	r17,r17,1
 2001ddc:	b5000015 	stw	r20,0(r22)
 2001de0:	b7000115 	stw	fp,4(r22)
 2001de4:	d8c02015 	stw	r3,128(sp)
 2001de8:	dc401f15 	stw	r17,124(sp)
 2001dec:	3c7ff60e 	bge	r7,r17,2001dc8 <__alt_mem_mem_0+0xfcfe1dc8>
 2001df0:	d9801e04 	addi	r6,sp,120
 2001df4:	b80b883a 	mov	r5,r23
 2001df8:	9809883a 	mov	r4,r19
 2001dfc:	d9c03c15 	stw	r7,240(sp)
 2001e00:	20075380 	call	2007538 <__sprint_r>
 2001e04:	d9c03c17 	ldw	r7,240(sp)
 2001e08:	103c071e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001e0c:	d8c02017 	ldw	r3,128(sp)
 2001e10:	dc401f17 	ldw	r17,124(sp)
 2001e14:	dd800404 	addi	r22,sp,16
 2001e18:	003fec06 	br	2001dcc <__alt_mem_mem_0+0xfcfe1dcc>
 2001e1c:	9080100c 	andi	r2,r18,64
 2001e20:	d8002785 	stb	zero,158(sp)
 2001e24:	10010e26 	beq	r2,zero,2002260 <___vfprintf_internal_r+0x1840>
 2001e28:	d9002d17 	ldw	r4,180(sp)
 2001e2c:	d9402917 	ldw	r5,164(sp)
 2001e30:	002d883a 	mov	r22,zero
 2001e34:	20800104 	addi	r2,r4,4
 2001e38:	24c0000b 	ldhu	r19,0(r4)
 2001e3c:	283fc90e 	bge	r5,zero,2001d64 <__alt_mem_mem_0+0xfcfe1d64>
 2001e40:	d8802d15 	stw	r2,180(sp)
 2001e44:	0039883a 	mov	fp,zero
 2001e48:	9d84b03a 	or	r2,r19,r22
 2001e4c:	103c461e 	bne	r2,zero,2000f68 <__alt_mem_mem_0+0xfcfe0f68>
 2001e50:	00800044 	movi	r2,1
 2001e54:	003e6c06 	br	2001808 <__alt_mem_mem_0+0xfcfe1808>
 2001e58:	d9002c17 	ldw	r4,176(sp)
 2001e5c:	d9801e04 	addi	r6,sp,120
 2001e60:	b80b883a 	mov	r5,r23
 2001e64:	20075380 	call	2007538 <__sprint_r>
 2001e68:	103bef1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001e6c:	d8c02017 	ldw	r3,128(sp)
 2001e70:	da000404 	addi	r8,sp,16
 2001e74:	d9003217 	ldw	r4,200(sp)
 2001e78:	d8802617 	ldw	r2,152(sp)
 2001e7c:	d9403317 	ldw	r5,204(sp)
 2001e80:	8123883a 	add	r17,r16,r4
 2001e84:	11400216 	blt	r2,r5,2001e90 <___vfprintf_internal_r+0x1470>
 2001e88:	9100004c 	andi	r4,r18,1
 2001e8c:	20000d26 	beq	r4,zero,2001ec4 <___vfprintf_internal_r+0x14a4>
 2001e90:	d9003717 	ldw	r4,220(sp)
 2001e94:	d9403417 	ldw	r5,208(sp)
 2001e98:	1907883a 	add	r3,r3,r4
 2001e9c:	d9001f17 	ldw	r4,124(sp)
 2001ea0:	41400015 	stw	r5,0(r8)
 2001ea4:	d9403717 	ldw	r5,220(sp)
 2001ea8:	21000044 	addi	r4,r4,1
 2001eac:	d8c02015 	stw	r3,128(sp)
 2001eb0:	41400115 	stw	r5,4(r8)
 2001eb4:	d9001f15 	stw	r4,124(sp)
 2001eb8:	014001c4 	movi	r5,7
 2001ebc:	2901e816 	blt	r5,r4,2002660 <___vfprintf_internal_r+0x1c40>
 2001ec0:	42000204 	addi	r8,r8,8
 2001ec4:	d9003317 	ldw	r4,204(sp)
 2001ec8:	8121883a 	add	r16,r16,r4
 2001ecc:	2085c83a 	sub	r2,r4,r2
 2001ed0:	8461c83a 	sub	r16,r16,r17
 2001ed4:	1400010e 	bge	r2,r16,2001edc <___vfprintf_internal_r+0x14bc>
 2001ed8:	1021883a 	mov	r16,r2
 2001edc:	04000a0e 	bge	zero,r16,2001f08 <___vfprintf_internal_r+0x14e8>
 2001ee0:	d9001f17 	ldw	r4,124(sp)
 2001ee4:	1c07883a 	add	r3,r3,r16
 2001ee8:	44400015 	stw	r17,0(r8)
 2001eec:	21000044 	addi	r4,r4,1
 2001ef0:	44000115 	stw	r16,4(r8)
 2001ef4:	d8c02015 	stw	r3,128(sp)
 2001ef8:	d9001f15 	stw	r4,124(sp)
 2001efc:	014001c4 	movi	r5,7
 2001f00:	2901fb16 	blt	r5,r4,20026f0 <___vfprintf_internal_r+0x1cd0>
 2001f04:	42000204 	addi	r8,r8,8
 2001f08:	8001f716 	blt	r16,zero,20026e8 <___vfprintf_internal_r+0x1cc8>
 2001f0c:	1421c83a 	sub	r16,r2,r16
 2001f10:	043d380e 	bge	zero,r16,20013f4 <__alt_mem_mem_0+0xfcfe13f4>
 2001f14:	04400404 	movi	r17,16
 2001f18:	d8801f17 	ldw	r2,124(sp)
 2001f1c:	8c3efb0e 	bge	r17,r16,2001b0c <__alt_mem_mem_0+0xfcfe1b0c>
 2001f20:	01408134 	movhi	r5,516
 2001f24:	29438084 	addi	r5,r5,3586
 2001f28:	d9402b15 	stw	r5,172(sp)
 2001f2c:	058001c4 	movi	r22,7
 2001f30:	dcc02c17 	ldw	r19,176(sp)
 2001f34:	00000306 	br	2001f44 <___vfprintf_internal_r+0x1524>
 2001f38:	42000204 	addi	r8,r8,8
 2001f3c:	843ffc04 	addi	r16,r16,-16
 2001f40:	8c3ef50e 	bge	r17,r16,2001b18 <__alt_mem_mem_0+0xfcfe1b18>
 2001f44:	18c00404 	addi	r3,r3,16
 2001f48:	10800044 	addi	r2,r2,1
 2001f4c:	45000015 	stw	r20,0(r8)
 2001f50:	44400115 	stw	r17,4(r8)
 2001f54:	d8c02015 	stw	r3,128(sp)
 2001f58:	d8801f15 	stw	r2,124(sp)
 2001f5c:	b0bff60e 	bge	r22,r2,2001f38 <__alt_mem_mem_0+0xfcfe1f38>
 2001f60:	d9801e04 	addi	r6,sp,120
 2001f64:	b80b883a 	mov	r5,r23
 2001f68:	9809883a 	mov	r4,r19
 2001f6c:	20075380 	call	2007538 <__sprint_r>
 2001f70:	103bad1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001f74:	d8c02017 	ldw	r3,128(sp)
 2001f78:	d8801f17 	ldw	r2,124(sp)
 2001f7c:	da000404 	addi	r8,sp,16
 2001f80:	003fee06 	br	2001f3c <__alt_mem_mem_0+0xfcfe1f3c>
 2001f84:	9088703a 	and	r4,r18,r2
 2001f88:	203eab1e 	bne	r4,zero,2001a38 <__alt_mem_mem_0+0xfcfe1a38>
 2001f8c:	dc401f17 	ldw	r17,124(sp)
 2001f90:	40800115 	stw	r2,4(r8)
 2001f94:	44000015 	stw	r16,0(r8)
 2001f98:	8c400044 	addi	r17,r17,1
 2001f9c:	d8c02015 	stw	r3,128(sp)
 2001fa0:	dc401f15 	stw	r17,124(sp)
 2001fa4:	008001c4 	movi	r2,7
 2001fa8:	14400e16 	blt	r2,r17,2001fe4 <___vfprintf_internal_r+0x15c4>
 2001fac:	45800204 	addi	r22,r8,8
 2001fb0:	003eca06 	br	2001adc <__alt_mem_mem_0+0xfcfe1adc>
 2001fb4:	01008134 	movhi	r4,516
 2001fb8:	21038084 	addi	r4,r4,3586
 2001fbc:	d9002b15 	stw	r4,172(sp)
 2001fc0:	d8802b17 	ldw	r2,172(sp)
 2001fc4:	1c07883a 	add	r3,r3,r16
 2001fc8:	8c400044 	addi	r17,r17,1
 2001fcc:	b0800015 	stw	r2,0(r22)
 2001fd0:	b4000115 	stw	r16,4(r22)
 2001fd4:	d8c02015 	stw	r3,128(sp)
 2001fd8:	dc401f15 	stw	r17,124(sp)
 2001fdc:	008001c4 	movi	r2,7
 2001fe0:	147ebd0e 	bge	r2,r17,2001ad8 <__alt_mem_mem_0+0xfcfe1ad8>
 2001fe4:	d9002c17 	ldw	r4,176(sp)
 2001fe8:	d9801e04 	addi	r6,sp,120
 2001fec:	b80b883a 	mov	r5,r23
 2001ff0:	20075380 	call	2007538 <__sprint_r>
 2001ff4:	103b8c1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2001ff8:	d8c02017 	ldw	r3,128(sp)
 2001ffc:	dc401f17 	ldw	r17,124(sp)
 2002000:	dd800404 	addi	r22,sp,16
 2002004:	003eb506 	br	2001adc <__alt_mem_mem_0+0xfcfe1adc>
 2002008:	d9002c17 	ldw	r4,176(sp)
 200200c:	d9801e04 	addi	r6,sp,120
 2002010:	b80b883a 	mov	r5,r23
 2002014:	20075380 	call	2007538 <__sprint_r>
 2002018:	103b831e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 200201c:	d8c02017 	ldw	r3,128(sp)
 2002020:	dc401f17 	ldw	r17,124(sp)
 2002024:	da000404 	addi	r8,sp,16
 2002028:	003e8d06 	br	2001a60 <__alt_mem_mem_0+0xfcfe1a60>
 200202c:	d9002c17 	ldw	r4,176(sp)
 2002030:	d9801e04 	addi	r6,sp,120
 2002034:	b80b883a 	mov	r5,r23
 2002038:	20075380 	call	2007538 <__sprint_r>
 200203c:	103b7a1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2002040:	d8c02017 	ldw	r3,128(sp)
 2002044:	dc401f17 	ldw	r17,124(sp)
 2002048:	dd800404 	addi	r22,sp,16
 200204c:	003e8f06 	br	2001a8c <__alt_mem_mem_0+0xfcfe1a8c>
 2002050:	0027883a 	mov	r19,zero
 2002054:	003f4a06 	br	2001d80 <__alt_mem_mem_0+0xfcfe1d80>
 2002058:	d9002c17 	ldw	r4,176(sp)
 200205c:	d9801e04 	addi	r6,sp,120
 2002060:	b80b883a 	mov	r5,r23
 2002064:	20075380 	call	2007538 <__sprint_r>
 2002068:	103b6f1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 200206c:	d8c02017 	ldw	r3,128(sp)
 2002070:	da000404 	addi	r8,sp,16
 2002074:	003c9d06 	br	20012ec <__alt_mem_mem_0+0xfcfe12ec>
 2002078:	04e7c83a 	sub	r19,zero,r19
 200207c:	9804c03a 	cmpne	r2,r19,zero
 2002080:	05adc83a 	sub	r22,zero,r22
 2002084:	b0adc83a 	sub	r22,r22,r2
 2002088:	d8802917 	ldw	r2,164(sp)
 200208c:	07000b44 	movi	fp,45
 2002090:	df002785 	stb	fp,158(sp)
 2002094:	10017b16 	blt	r2,zero,2002684 <___vfprintf_internal_r+0x1c64>
 2002098:	00bfdfc4 	movi	r2,-129
 200209c:	90a4703a 	and	r18,r18,r2
 20020a0:	003bb106 	br	2000f68 <__alt_mem_mem_0+0xfcfe0f68>
 20020a4:	d9003617 	ldw	r4,216(sp)
 20020a8:	d9403817 	ldw	r5,224(sp)
 20020ac:	da003d15 	stw	r8,244(sp)
 20020b0:	20070c40 	call	20070c4 <__fpclassifyd>
 20020b4:	da003d17 	ldw	r8,244(sp)
 20020b8:	1000f026 	beq	r2,zero,200247c <___vfprintf_internal_r+0x1a5c>
 20020bc:	d9002917 	ldw	r4,164(sp)
 20020c0:	05bff7c4 	movi	r22,-33
 20020c4:	00bfffc4 	movi	r2,-1
 20020c8:	8dac703a 	and	r22,r17,r22
 20020cc:	20820026 	beq	r4,r2,20028d0 <___vfprintf_internal_r+0x1eb0>
 20020d0:	008011c4 	movi	r2,71
 20020d4:	b081f726 	beq	r22,r2,20028b4 <___vfprintf_internal_r+0x1e94>
 20020d8:	d9003817 	ldw	r4,224(sp)
 20020dc:	90c04014 	ori	r3,r18,256
 20020e0:	d8c02b15 	stw	r3,172(sp)
 20020e4:	20021516 	blt	r4,zero,200293c <___vfprintf_internal_r+0x1f1c>
 20020e8:	dcc03817 	ldw	r19,224(sp)
 20020ec:	d8002a05 	stb	zero,168(sp)
 20020f0:	00801984 	movi	r2,102
 20020f4:	8881f926 	beq	r17,r2,20028dc <___vfprintf_internal_r+0x1ebc>
 20020f8:	00801184 	movi	r2,70
 20020fc:	88821c26 	beq	r17,r2,2002970 <___vfprintf_internal_r+0x1f50>
 2002100:	00801144 	movi	r2,69
 2002104:	b081ef26 	beq	r22,r2,20028c4 <___vfprintf_internal_r+0x1ea4>
 2002108:	d8c02917 	ldw	r3,164(sp)
 200210c:	d8802104 	addi	r2,sp,132
 2002110:	d8800315 	stw	r2,12(sp)
 2002114:	d9403617 	ldw	r5,216(sp)
 2002118:	d8802504 	addi	r2,sp,148
 200211c:	d9002c17 	ldw	r4,176(sp)
 2002120:	d8800215 	stw	r2,8(sp)
 2002124:	d8802604 	addi	r2,sp,152
 2002128:	d8c00015 	stw	r3,0(sp)
 200212c:	d8800115 	stw	r2,4(sp)
 2002130:	01c00084 	movi	r7,2
 2002134:	980d883a 	mov	r6,r19
 2002138:	d8c03c15 	stw	r3,240(sp)
 200213c:	da003d15 	stw	r8,244(sp)
 2002140:	20030440 	call	2003044 <_dtoa_r>
 2002144:	1021883a 	mov	r16,r2
 2002148:	008019c4 	movi	r2,103
 200214c:	d8c03c17 	ldw	r3,240(sp)
 2002150:	da003d17 	ldw	r8,244(sp)
 2002154:	88817126 	beq	r17,r2,200271c <___vfprintf_internal_r+0x1cfc>
 2002158:	008011c4 	movi	r2,71
 200215c:	88829226 	beq	r17,r2,2002ba8 <___vfprintf_internal_r+0x2188>
 2002160:	80f9883a 	add	fp,r16,r3
 2002164:	d9003617 	ldw	r4,216(sp)
 2002168:	000d883a 	mov	r6,zero
 200216c:	000f883a 	mov	r7,zero
 2002170:	980b883a 	mov	r5,r19
 2002174:	da003d15 	stw	r8,244(sp)
 2002178:	200bd2c0 	call	200bd2c <__eqdf2>
 200217c:	da003d17 	ldw	r8,244(sp)
 2002180:	10018d26 	beq	r2,zero,20027b8 <___vfprintf_internal_r+0x1d98>
 2002184:	d8802117 	ldw	r2,132(sp)
 2002188:	1700062e 	bgeu	r2,fp,20021a4 <___vfprintf_internal_r+0x1784>
 200218c:	01000c04 	movi	r4,48
 2002190:	10c00044 	addi	r3,r2,1
 2002194:	d8c02115 	stw	r3,132(sp)
 2002198:	11000005 	stb	r4,0(r2)
 200219c:	d8802117 	ldw	r2,132(sp)
 20021a0:	173ffb36 	bltu	r2,fp,2002190 <__alt_mem_mem_0+0xfcfe2190>
 20021a4:	1405c83a 	sub	r2,r2,r16
 20021a8:	d8803315 	stw	r2,204(sp)
 20021ac:	008011c4 	movi	r2,71
 20021b0:	b0817626 	beq	r22,r2,200278c <___vfprintf_internal_r+0x1d6c>
 20021b4:	00801944 	movi	r2,101
 20021b8:	1442810e 	bge	r2,r17,2002bc0 <___vfprintf_internal_r+0x21a0>
 20021bc:	d8c02617 	ldw	r3,152(sp)
 20021c0:	00801984 	movi	r2,102
 20021c4:	d8c03215 	stw	r3,200(sp)
 20021c8:	8881fe26 	beq	r17,r2,20029c4 <___vfprintf_internal_r+0x1fa4>
 20021cc:	d8c03217 	ldw	r3,200(sp)
 20021d0:	d9003317 	ldw	r4,204(sp)
 20021d4:	1901dd16 	blt	r3,r4,200294c <___vfprintf_internal_r+0x1f2c>
 20021d8:	9480004c 	andi	r18,r18,1
 20021dc:	90022b1e 	bne	r18,zero,2002a8c <___vfprintf_internal_r+0x206c>
 20021e0:	1805883a 	mov	r2,r3
 20021e4:	18028016 	blt	r3,zero,2002be8 <___vfprintf_internal_r+0x21c8>
 20021e8:	d8c03217 	ldw	r3,200(sp)
 20021ec:	044019c4 	movi	r17,103
 20021f0:	d8c02e15 	stw	r3,184(sp)
 20021f4:	df002a07 	ldb	fp,168(sp)
 20021f8:	e001531e 	bne	fp,zero,2002748 <___vfprintf_internal_r+0x1d28>
 20021fc:	df002783 	ldbu	fp,158(sp)
 2002200:	d8802a15 	stw	r2,168(sp)
 2002204:	dc802b17 	ldw	r18,172(sp)
 2002208:	d8002915 	stw	zero,164(sp)
 200220c:	003bd106 	br	2001154 <__alt_mem_mem_0+0xfcfe1154>
 2002210:	d8802d17 	ldw	r2,180(sp)
 2002214:	d8c02d17 	ldw	r3,180(sp)
 2002218:	d9002d17 	ldw	r4,180(sp)
 200221c:	10800017 	ldw	r2,0(r2)
 2002220:	18c00117 	ldw	r3,4(r3)
 2002224:	21000204 	addi	r4,r4,8
 2002228:	d8803615 	stw	r2,216(sp)
 200222c:	d8c03815 	stw	r3,224(sp)
 2002230:	d9002d15 	stw	r4,180(sp)
 2002234:	003b7506 	br	200100c <__alt_mem_mem_0+0xfcfe100c>
 2002238:	ac400007 	ldb	r17,0(r21)
 200223c:	003a5906 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 2002240:	9080100c 	andi	r2,r18,64
 2002244:	1000a826 	beq	r2,zero,20024e8 <___vfprintf_internal_r+0x1ac8>
 2002248:	d9002d17 	ldw	r4,180(sp)
 200224c:	002d883a 	mov	r22,zero
 2002250:	24c0000b 	ldhu	r19,0(r4)
 2002254:	21000104 	addi	r4,r4,4
 2002258:	d9002d15 	stw	r4,180(sp)
 200225c:	003ccb06 	br	200158c <__alt_mem_mem_0+0xfcfe158c>
 2002260:	d8c02d17 	ldw	r3,180(sp)
 2002264:	d9002917 	ldw	r4,164(sp)
 2002268:	002d883a 	mov	r22,zero
 200226c:	18800104 	addi	r2,r3,4
 2002270:	1cc00017 	ldw	r19,0(r3)
 2002274:	203ebb0e 	bge	r4,zero,2001d64 <__alt_mem_mem_0+0xfcfe1d64>
 2002278:	003ef106 	br	2001e40 <__alt_mem_mem_0+0xfcfe1e40>
 200227c:	9080040c 	andi	r2,r18,16
 2002280:	1000921e 	bne	r2,zero,20024cc <___vfprintf_internal_r+0x1aac>
 2002284:	9480100c 	andi	r18,r18,64
 2002288:	90013926 	beq	r18,zero,2002770 <___vfprintf_internal_r+0x1d50>
 200228c:	d9002d17 	ldw	r4,180(sp)
 2002290:	d9402f17 	ldw	r5,188(sp)
 2002294:	20800017 	ldw	r2,0(r4)
 2002298:	21000104 	addi	r4,r4,4
 200229c:	d9002d15 	stw	r4,180(sp)
 20022a0:	1140000d 	sth	r5,0(r2)
 20022a4:	003a1606 	br	2000b00 <__alt_mem_mem_0+0xfcfe0b00>
 20022a8:	9080100c 	andi	r2,r18,64
 20022ac:	10008026 	beq	r2,zero,20024b0 <___vfprintf_internal_r+0x1a90>
 20022b0:	d8c02d17 	ldw	r3,180(sp)
 20022b4:	1cc0000f 	ldh	r19,0(r3)
 20022b8:	18c00104 	addi	r3,r3,4
 20022bc:	d8c02d15 	stw	r3,180(sp)
 20022c0:	982dd7fa 	srai	r22,r19,31
 20022c4:	b005883a 	mov	r2,r22
 20022c8:	003b1f06 	br	2000f48 <__alt_mem_mem_0+0xfcfe0f48>
 20022cc:	9080100c 	andi	r2,r18,64
 20022d0:	d8002785 	stb	zero,158(sp)
 20022d4:	10008a1e 	bne	r2,zero,2002500 <___vfprintf_internal_r+0x1ae0>
 20022d8:	d9402d17 	ldw	r5,180(sp)
 20022dc:	d8c02917 	ldw	r3,164(sp)
 20022e0:	002d883a 	mov	r22,zero
 20022e4:	28800104 	addi	r2,r5,4
 20022e8:	2cc00017 	ldw	r19,0(r5)
 20022ec:	183e4b0e 	bge	r3,zero,2001c1c <__alt_mem_mem_0+0xfcfe1c1c>
 20022f0:	9d86b03a 	or	r3,r19,r22
 20022f4:	d8802d15 	stw	r2,180(sp)
 20022f8:	183e4c1e 	bne	r3,zero,2001c2c <__alt_mem_mem_0+0xfcfe1c2c>
 20022fc:	0039883a 	mov	fp,zero
 2002300:	0005883a 	mov	r2,zero
 2002304:	003d4006 	br	2001808 <__alt_mem_mem_0+0xfcfe1808>
 2002308:	01408134 	movhi	r5,516
 200230c:	29438084 	addi	r5,r5,3586
 2002310:	d9402b15 	stw	r5,172(sp)
 2002314:	d9402b17 	ldw	r5,172(sp)
 2002318:	1c47883a 	add	r3,r3,r17
 200231c:	10800044 	addi	r2,r2,1
 2002320:	41400015 	stw	r5,0(r8)
 2002324:	44400115 	stw	r17,4(r8)
 2002328:	d8c02015 	stw	r3,128(sp)
 200232c:	d8801f15 	stw	r2,124(sp)
 2002330:	010001c4 	movi	r4,7
 2002334:	20bec816 	blt	r4,r2,2001e58 <__alt_mem_mem_0+0xfcfe1e58>
 2002338:	42000204 	addi	r8,r8,8
 200233c:	003ecd06 	br	2001e74 <__alt_mem_mem_0+0xfcfe1e74>
 2002340:	d9002917 	ldw	r4,164(sp)
 2002344:	d8002785 	stb	zero,158(sp)
 2002348:	203d2d16 	blt	r4,zero,2001800 <__alt_mem_mem_0+0xfcfe1800>
 200234c:	00bfdfc4 	movi	r2,-129
 2002350:	90a4703a 	and	r18,r18,r2
 2002354:	003a9106 	br	2000d9c <__alt_mem_mem_0+0xfcfe0d9c>
 2002358:	01008134 	movhi	r4,516
 200235c:	21038084 	addi	r4,r4,3586
 2002360:	d9002b15 	stw	r4,172(sp)
 2002364:	003c0c06 	br	2001398 <__alt_mem_mem_0+0xfcfe1398>
 2002368:	d9002c17 	ldw	r4,176(sp)
 200236c:	d9801e04 	addi	r6,sp,120
 2002370:	b80b883a 	mov	r5,r23
 2002374:	20075380 	call	2007538 <__sprint_r>
 2002378:	103aab1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 200237c:	d8c02017 	ldw	r3,128(sp)
 2002380:	da000404 	addi	r8,sp,16
 2002384:	003d4106 	br	200188c <__alt_mem_mem_0+0xfcfe188c>
 2002388:	d8801f17 	ldw	r2,124(sp)
 200238c:	01408134 	movhi	r5,516
 2002390:	01000044 	movi	r4,1
 2002394:	18c00044 	addi	r3,r3,1
 2002398:	10800044 	addi	r2,r2,1
 200239c:	29438004 	addi	r5,r5,3584
 20023a0:	41000115 	stw	r4,4(r8)
 20023a4:	41400015 	stw	r5,0(r8)
 20023a8:	d8c02015 	stw	r3,128(sp)
 20023ac:	d8801f15 	stw	r2,124(sp)
 20023b0:	010001c4 	movi	r4,7
 20023b4:	20805c16 	blt	r4,r2,2002528 <___vfprintf_internal_r+0x1b08>
 20023b8:	42000204 	addi	r8,r8,8
 20023bc:	8800041e 	bne	r17,zero,20023d0 <___vfprintf_internal_r+0x19b0>
 20023c0:	d8803317 	ldw	r2,204(sp)
 20023c4:	1000021e 	bne	r2,zero,20023d0 <___vfprintf_internal_r+0x19b0>
 20023c8:	9080004c 	andi	r2,r18,1
 20023cc:	103c0926 	beq	r2,zero,20013f4 <__alt_mem_mem_0+0xfcfe13f4>
 20023d0:	d9003717 	ldw	r4,220(sp)
 20023d4:	d8801f17 	ldw	r2,124(sp)
 20023d8:	d9403417 	ldw	r5,208(sp)
 20023dc:	20c7883a 	add	r3,r4,r3
 20023e0:	10800044 	addi	r2,r2,1
 20023e4:	41000115 	stw	r4,4(r8)
 20023e8:	41400015 	stw	r5,0(r8)
 20023ec:	d8c02015 	stw	r3,128(sp)
 20023f0:	d8801f15 	stw	r2,124(sp)
 20023f4:	010001c4 	movi	r4,7
 20023f8:	20812116 	blt	r4,r2,2002880 <___vfprintf_internal_r+0x1e60>
 20023fc:	42000204 	addi	r8,r8,8
 2002400:	0463c83a 	sub	r17,zero,r17
 2002404:	0440730e 	bge	zero,r17,20025d4 <___vfprintf_internal_r+0x1bb4>
 2002408:	05800404 	movi	r22,16
 200240c:	b440860e 	bge	r22,r17,2002628 <___vfprintf_internal_r+0x1c08>
 2002410:	01408134 	movhi	r5,516
 2002414:	29438084 	addi	r5,r5,3586
 2002418:	d9402b15 	stw	r5,172(sp)
 200241c:	070001c4 	movi	fp,7
 2002420:	dcc02c17 	ldw	r19,176(sp)
 2002424:	00000306 	br	2002434 <___vfprintf_internal_r+0x1a14>
 2002428:	42000204 	addi	r8,r8,8
 200242c:	8c7ffc04 	addi	r17,r17,-16
 2002430:	b440800e 	bge	r22,r17,2002634 <___vfprintf_internal_r+0x1c14>
 2002434:	18c00404 	addi	r3,r3,16
 2002438:	10800044 	addi	r2,r2,1
 200243c:	45000015 	stw	r20,0(r8)
 2002440:	45800115 	stw	r22,4(r8)
 2002444:	d8c02015 	stw	r3,128(sp)
 2002448:	d8801f15 	stw	r2,124(sp)
 200244c:	e0bff60e 	bge	fp,r2,2002428 <__alt_mem_mem_0+0xfcfe2428>
 2002450:	d9801e04 	addi	r6,sp,120
 2002454:	b80b883a 	mov	r5,r23
 2002458:	9809883a 	mov	r4,r19
 200245c:	20075380 	call	2007538 <__sprint_r>
 2002460:	103a711e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2002464:	d8c02017 	ldw	r3,128(sp)
 2002468:	d8801f17 	ldw	r2,124(sp)
 200246c:	da000404 	addi	r8,sp,16
 2002470:	003fee06 	br	200242c <__alt_mem_mem_0+0xfcfe242c>
 2002474:	00bfffc4 	movi	r2,-1
 2002478:	003a6f06 	br	2000e38 <__alt_mem_mem_0+0xfcfe0e38>
 200247c:	008011c4 	movi	r2,71
 2002480:	1440b816 	blt	r2,r17,2002764 <___vfprintf_internal_r+0x1d44>
 2002484:	04008134 	movhi	r16,516
 2002488:	84037204 	addi	r16,r16,3528
 200248c:	00c000c4 	movi	r3,3
 2002490:	00bfdfc4 	movi	r2,-129
 2002494:	d8c02a15 	stw	r3,168(sp)
 2002498:	90a4703a 	and	r18,r18,r2
 200249c:	df002783 	ldbu	fp,158(sp)
 20024a0:	d8c02e15 	stw	r3,184(sp)
 20024a4:	d8002915 	stw	zero,164(sp)
 20024a8:	d8003215 	stw	zero,200(sp)
 20024ac:	003b2906 	br	2001154 <__alt_mem_mem_0+0xfcfe1154>
 20024b0:	d9002d17 	ldw	r4,180(sp)
 20024b4:	24c00017 	ldw	r19,0(r4)
 20024b8:	21000104 	addi	r4,r4,4
 20024bc:	d9002d15 	stw	r4,180(sp)
 20024c0:	982dd7fa 	srai	r22,r19,31
 20024c4:	b005883a 	mov	r2,r22
 20024c8:	003a9f06 	br	2000f48 <__alt_mem_mem_0+0xfcfe0f48>
 20024cc:	d9402d17 	ldw	r5,180(sp)
 20024d0:	d8c02f17 	ldw	r3,188(sp)
 20024d4:	28800017 	ldw	r2,0(r5)
 20024d8:	29400104 	addi	r5,r5,4
 20024dc:	d9402d15 	stw	r5,180(sp)
 20024e0:	10c00015 	stw	r3,0(r2)
 20024e4:	00398606 	br	2000b00 <__alt_mem_mem_0+0xfcfe0b00>
 20024e8:	d9402d17 	ldw	r5,180(sp)
 20024ec:	002d883a 	mov	r22,zero
 20024f0:	2cc00017 	ldw	r19,0(r5)
 20024f4:	29400104 	addi	r5,r5,4
 20024f8:	d9402d15 	stw	r5,180(sp)
 20024fc:	003c2306 	br	200158c <__alt_mem_mem_0+0xfcfe158c>
 2002500:	d8c02d17 	ldw	r3,180(sp)
 2002504:	d9002917 	ldw	r4,164(sp)
 2002508:	002d883a 	mov	r22,zero
 200250c:	18800104 	addi	r2,r3,4
 2002510:	1cc0000b 	ldhu	r19,0(r3)
 2002514:	203dc10e 	bge	r4,zero,2001c1c <__alt_mem_mem_0+0xfcfe1c1c>
 2002518:	003f7506 	br	20022f0 <__alt_mem_mem_0+0xfcfe22f0>
 200251c:	04008134 	movhi	r16,516
 2002520:	84037004 	addi	r16,r16,3520
 2002524:	003acc06 	br	2001058 <__alt_mem_mem_0+0xfcfe1058>
 2002528:	d9002c17 	ldw	r4,176(sp)
 200252c:	d9801e04 	addi	r6,sp,120
 2002530:	b80b883a 	mov	r5,r23
 2002534:	20075380 	call	2007538 <__sprint_r>
 2002538:	103a3b1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 200253c:	dc402617 	ldw	r17,152(sp)
 2002540:	d8c02017 	ldw	r3,128(sp)
 2002544:	da000404 	addi	r8,sp,16
 2002548:	003f9c06 	br	20023bc <__alt_mem_mem_0+0xfcfe23bc>
 200254c:	ac400043 	ldbu	r17,1(r21)
 2002550:	94800814 	ori	r18,r18,32
 2002554:	ad400044 	addi	r21,r21,1
 2002558:	8c403fcc 	andi	r17,r17,255
 200255c:	8c40201c 	xori	r17,r17,128
 2002560:	8c7fe004 	addi	r17,r17,-128
 2002564:	00398f06 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 2002568:	d8c02d15 	stw	r3,180(sp)
 200256c:	0039883a 	mov	fp,zero
 2002570:	003e3506 	br	2001e48 <__alt_mem_mem_0+0xfcfe1e48>
 2002574:	d9002c17 	ldw	r4,176(sp)
 2002578:	d9801e04 	addi	r6,sp,120
 200257c:	b80b883a 	mov	r5,r23
 2002580:	20075380 	call	2007538 <__sprint_r>
 2002584:	103a281e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2002588:	d8c02017 	ldw	r3,128(sp)
 200258c:	da000404 	addi	r8,sp,16
 2002590:	003cd006 	br	20018d4 <__alt_mem_mem_0+0xfcfe18d4>
 2002594:	8009883a 	mov	r4,r16
 2002598:	da003d15 	stw	r8,244(sp)
 200259c:	20073a40 	call	20073a4 <strlen>
 20025a0:	d8802e15 	stw	r2,184(sp)
 20025a4:	da003d17 	ldw	r8,244(sp)
 20025a8:	103c340e 	bge	r2,zero,200167c <__alt_mem_mem_0+0xfcfe167c>
 20025ac:	0005883a 	mov	r2,zero
 20025b0:	003c3206 	br	200167c <__alt_mem_mem_0+0xfcfe167c>
 20025b4:	d9002c17 	ldw	r4,176(sp)
 20025b8:	d9801e04 	addi	r6,sp,120
 20025bc:	b80b883a 	mov	r5,r23
 20025c0:	20075380 	call	2007538 <__sprint_r>
 20025c4:	103a181e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 20025c8:	d8c02017 	ldw	r3,128(sp)
 20025cc:	d8801f17 	ldw	r2,124(sp)
 20025d0:	da000404 	addi	r8,sp,16
 20025d4:	d9403317 	ldw	r5,204(sp)
 20025d8:	10800044 	addi	r2,r2,1
 20025dc:	44000015 	stw	r16,0(r8)
 20025e0:	28c7883a 	add	r3,r5,r3
 20025e4:	003b7d06 	br	20013dc <__alt_mem_mem_0+0xfcfe13dc>
 20025e8:	01008134 	movhi	r4,516
 20025ec:	21038484 	addi	r4,r4,3602
 20025f0:	d9003515 	stw	r4,212(sp)
 20025f4:	003b1406 	br	2001248 <__alt_mem_mem_0+0xfcfe1248>
 20025f8:	013fffc4 	movi	r4,-1
 20025fc:	003a3506 	br	2000ed4 <__alt_mem_mem_0+0xfcfe0ed4>
 2002600:	0023883a 	mov	r17,zero
 2002604:	003d9d06 	br	2001c7c <__alt_mem_mem_0+0xfcfe1c7c>
 2002608:	d9002c17 	ldw	r4,176(sp)
 200260c:	d9801e04 	addi	r6,sp,120
 2002610:	b80b883a 	mov	r5,r23
 2002614:	20075380 	call	2007538 <__sprint_r>
 2002618:	103a031e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 200261c:	d8c02017 	ldw	r3,128(sp)
 2002620:	da000404 	addi	r8,sp,16
 2002624:	003d9406 	br	2001c78 <__alt_mem_mem_0+0xfcfe1c78>
 2002628:	01008134 	movhi	r4,516
 200262c:	21038084 	addi	r4,r4,3586
 2002630:	d9002b15 	stw	r4,172(sp)
 2002634:	d9002b17 	ldw	r4,172(sp)
 2002638:	1c47883a 	add	r3,r3,r17
 200263c:	10800044 	addi	r2,r2,1
 2002640:	41000015 	stw	r4,0(r8)
 2002644:	44400115 	stw	r17,4(r8)
 2002648:	d8c02015 	stw	r3,128(sp)
 200264c:	d8801f15 	stw	r2,124(sp)
 2002650:	010001c4 	movi	r4,7
 2002654:	20bfd716 	blt	r4,r2,20025b4 <__alt_mem_mem_0+0xfcfe25b4>
 2002658:	42000204 	addi	r8,r8,8
 200265c:	003fdd06 	br	20025d4 <__alt_mem_mem_0+0xfcfe25d4>
 2002660:	d9002c17 	ldw	r4,176(sp)
 2002664:	d9801e04 	addi	r6,sp,120
 2002668:	b80b883a 	mov	r5,r23
 200266c:	20075380 	call	2007538 <__sprint_r>
 2002670:	1039ed1e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2002674:	d8802617 	ldw	r2,152(sp)
 2002678:	d8c02017 	ldw	r3,128(sp)
 200267c:	da000404 	addi	r8,sp,16
 2002680:	003e1006 	br	2001ec4 <__alt_mem_mem_0+0xfcfe1ec4>
 2002684:	00800044 	movi	r2,1
 2002688:	10803fcc 	andi	r2,r2,255
 200268c:	00c00044 	movi	r3,1
 2002690:	10fa3526 	beq	r2,r3,2000f68 <__alt_mem_mem_0+0xfcfe0f68>
 2002694:	00c00084 	movi	r3,2
 2002698:	10fbcb26 	beq	r2,r3,20015c8 <__alt_mem_mem_0+0xfcfe15c8>
 200269c:	003a8f06 	br	20010dc <__alt_mem_mem_0+0xfcfe10dc>
 20026a0:	01008134 	movhi	r4,516
 20026a4:	21038484 	addi	r4,r4,3602
 20026a8:	d9003515 	stw	r4,212(sp)
 20026ac:	003b7606 	br	2001488 <__alt_mem_mem_0+0xfcfe1488>
 20026b0:	d8802917 	ldw	r2,164(sp)
 20026b4:	00c00184 	movi	r3,6
 20026b8:	1880012e 	bgeu	r3,r2,20026c0 <___vfprintf_internal_r+0x1ca0>
 20026bc:	1805883a 	mov	r2,r3
 20026c0:	d8802e15 	stw	r2,184(sp)
 20026c4:	1000ef16 	blt	r2,zero,2002a84 <___vfprintf_internal_r+0x2064>
 20026c8:	04008134 	movhi	r16,516
 20026cc:	d8802a15 	stw	r2,168(sp)
 20026d0:	dcc02d15 	stw	r19,180(sp)
 20026d4:	d8002915 	stw	zero,164(sp)
 20026d8:	d8003215 	stw	zero,200(sp)
 20026dc:	84037e04 	addi	r16,r16,3576
 20026e0:	0039883a 	mov	fp,zero
 20026e4:	003aa206 	br	2001170 <__alt_mem_mem_0+0xfcfe1170>
 20026e8:	0021883a 	mov	r16,zero
 20026ec:	003e0706 	br	2001f0c <__alt_mem_mem_0+0xfcfe1f0c>
 20026f0:	d9002c17 	ldw	r4,176(sp)
 20026f4:	d9801e04 	addi	r6,sp,120
 20026f8:	b80b883a 	mov	r5,r23
 20026fc:	20075380 	call	2007538 <__sprint_r>
 2002700:	1039c91e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2002704:	d8802617 	ldw	r2,152(sp)
 2002708:	d9403317 	ldw	r5,204(sp)
 200270c:	d8c02017 	ldw	r3,128(sp)
 2002710:	da000404 	addi	r8,sp,16
 2002714:	2885c83a 	sub	r2,r5,r2
 2002718:	003dfb06 	br	2001f08 <__alt_mem_mem_0+0xfcfe1f08>
 200271c:	9080004c 	andi	r2,r18,1
 2002720:	103e8f1e 	bne	r2,zero,2002160 <__alt_mem_mem_0+0xfcfe2160>
 2002724:	d8802117 	ldw	r2,132(sp)
 2002728:	003e9e06 	br	20021a4 <__alt_mem_mem_0+0xfcfe21a4>
 200272c:	1025883a 	mov	r18,r2
 2002730:	0039883a 	mov	fp,zero
 2002734:	00800084 	movi	r2,2
 2002738:	003fd306 	br	2002688 <__alt_mem_mem_0+0xfcfe2688>
 200273c:	07000b44 	movi	fp,45
 2002740:	df002785 	stb	fp,158(sp)
 2002744:	003a4006 	br	2001048 <__alt_mem_mem_0+0xfcfe1048>
 2002748:	00c00b44 	movi	r3,45
 200274c:	d8c02785 	stb	r3,158(sp)
 2002750:	d8802a15 	stw	r2,168(sp)
 2002754:	dc802b17 	ldw	r18,172(sp)
 2002758:	d8002915 	stw	zero,164(sp)
 200275c:	07000b44 	movi	fp,45
 2002760:	003a8006 	br	2001164 <__alt_mem_mem_0+0xfcfe1164>
 2002764:	04008134 	movhi	r16,516
 2002768:	84037304 	addi	r16,r16,3532
 200276c:	003f4706 	br	200248c <__alt_mem_mem_0+0xfcfe248c>
 2002770:	d8c02d17 	ldw	r3,180(sp)
 2002774:	d9002f17 	ldw	r4,188(sp)
 2002778:	18800017 	ldw	r2,0(r3)
 200277c:	18c00104 	addi	r3,r3,4
 2002780:	d8c02d15 	stw	r3,180(sp)
 2002784:	11000015 	stw	r4,0(r2)
 2002788:	0038dd06 	br	2000b00 <__alt_mem_mem_0+0xfcfe0b00>
 200278c:	dd802617 	ldw	r22,152(sp)
 2002790:	00bfff44 	movi	r2,-3
 2002794:	b0801c16 	blt	r22,r2,2002808 <___vfprintf_internal_r+0x1de8>
 2002798:	d9402917 	ldw	r5,164(sp)
 200279c:	2d801a16 	blt	r5,r22,2002808 <___vfprintf_internal_r+0x1de8>
 20027a0:	dd803215 	stw	r22,200(sp)
 20027a4:	003e8906 	br	20021cc <__alt_mem_mem_0+0xfcfe21cc>
 20027a8:	01008134 	movhi	r4,516
 20027ac:	21038084 	addi	r4,r4,3586
 20027b0:	d9002b15 	stw	r4,172(sp)
 20027b4:	003c9106 	br	20019fc <__alt_mem_mem_0+0xfcfe19fc>
 20027b8:	e005883a 	mov	r2,fp
 20027bc:	003e7906 	br	20021a4 <__alt_mem_mem_0+0xfcfe21a4>
 20027c0:	d9402917 	ldw	r5,164(sp)
 20027c4:	df002783 	ldbu	fp,158(sp)
 20027c8:	dcc02d15 	stw	r19,180(sp)
 20027cc:	d9402a15 	stw	r5,168(sp)
 20027d0:	d9402e15 	stw	r5,184(sp)
 20027d4:	d8002915 	stw	zero,164(sp)
 20027d8:	d8003215 	stw	zero,200(sp)
 20027dc:	003a5d06 	br	2001154 <__alt_mem_mem_0+0xfcfe1154>
 20027e0:	9080004c 	andi	r2,r18,1
 20027e4:	0039883a 	mov	fp,zero
 20027e8:	10000426 	beq	r2,zero,20027fc <___vfprintf_internal_r+0x1ddc>
 20027ec:	00800c04 	movi	r2,48
 20027f0:	dc001dc4 	addi	r16,sp,119
 20027f4:	d8801dc5 	stb	r2,119(sp)
 20027f8:	003b8006 	br	20015fc <__alt_mem_mem_0+0xfcfe15fc>
 20027fc:	d8002e15 	stw	zero,184(sp)
 2002800:	dc001e04 	addi	r16,sp,120
 2002804:	003a4d06 	br	200113c <__alt_mem_mem_0+0xfcfe113c>
 2002808:	8c7fff84 	addi	r17,r17,-2
 200280c:	b5bfffc4 	addi	r22,r22,-1
 2002810:	dd802615 	stw	r22,152(sp)
 2002814:	dc4022c5 	stb	r17,139(sp)
 2002818:	b000bf16 	blt	r22,zero,2002b18 <___vfprintf_internal_r+0x20f8>
 200281c:	00800ac4 	movi	r2,43
 2002820:	d8802305 	stb	r2,140(sp)
 2002824:	00800244 	movi	r2,9
 2002828:	15807016 	blt	r2,r22,20029ec <___vfprintf_internal_r+0x1fcc>
 200282c:	00800c04 	movi	r2,48
 2002830:	b5800c04 	addi	r22,r22,48
 2002834:	d8802345 	stb	r2,141(sp)
 2002838:	dd802385 	stb	r22,142(sp)
 200283c:	d88023c4 	addi	r2,sp,143
 2002840:	df0022c4 	addi	fp,sp,139
 2002844:	d8c03317 	ldw	r3,204(sp)
 2002848:	1739c83a 	sub	fp,r2,fp
 200284c:	d9003317 	ldw	r4,204(sp)
 2002850:	e0c7883a 	add	r3,fp,r3
 2002854:	df003a15 	stw	fp,232(sp)
 2002858:	d8c02e15 	stw	r3,184(sp)
 200285c:	00800044 	movi	r2,1
 2002860:	1100b30e 	bge	r2,r4,2002b30 <___vfprintf_internal_r+0x2110>
 2002864:	d8c02e17 	ldw	r3,184(sp)
 2002868:	18c00044 	addi	r3,r3,1
 200286c:	d8c02e15 	stw	r3,184(sp)
 2002870:	1805883a 	mov	r2,r3
 2002874:	1800ac16 	blt	r3,zero,2002b28 <___vfprintf_internal_r+0x2108>
 2002878:	d8003215 	stw	zero,200(sp)
 200287c:	003e5d06 	br	20021f4 <__alt_mem_mem_0+0xfcfe21f4>
 2002880:	d9002c17 	ldw	r4,176(sp)
 2002884:	d9801e04 	addi	r6,sp,120
 2002888:	b80b883a 	mov	r5,r23
 200288c:	20075380 	call	2007538 <__sprint_r>
 2002890:	1039651e 	bne	r2,zero,2000e28 <__alt_mem_mem_0+0xfcfe0e28>
 2002894:	dc402617 	ldw	r17,152(sp)
 2002898:	d8c02017 	ldw	r3,128(sp)
 200289c:	d8801f17 	ldw	r2,124(sp)
 20028a0:	da000404 	addi	r8,sp,16
 20028a4:	003ed606 	br	2002400 <__alt_mem_mem_0+0xfcfe2400>
 20028a8:	582b883a 	mov	r21,r11
 20028ac:	d8002915 	stw	zero,164(sp)
 20028b0:	0038bd06 	br	2000ba8 <__alt_mem_mem_0+0xfcfe0ba8>
 20028b4:	d8802917 	ldw	r2,164(sp)
 20028b8:	103e071e 	bne	r2,zero,20020d8 <__alt_mem_mem_0+0xfcfe20d8>
 20028bc:	dc002915 	stw	r16,164(sp)
 20028c0:	003e0506 	br	20020d8 <__alt_mem_mem_0+0xfcfe20d8>
 20028c4:	d9002917 	ldw	r4,164(sp)
 20028c8:	20c00044 	addi	r3,r4,1
 20028cc:	003e0f06 	br	200210c <__alt_mem_mem_0+0xfcfe210c>
 20028d0:	01400184 	movi	r5,6
 20028d4:	d9402915 	stw	r5,164(sp)
 20028d8:	003dff06 	br	20020d8 <__alt_mem_mem_0+0xfcfe20d8>
 20028dc:	d8802104 	addi	r2,sp,132
 20028e0:	d8800315 	stw	r2,12(sp)
 20028e4:	d8802504 	addi	r2,sp,148
 20028e8:	d8800215 	stw	r2,8(sp)
 20028ec:	d8802604 	addi	r2,sp,152
 20028f0:	d8800115 	stw	r2,4(sp)
 20028f4:	d8802917 	ldw	r2,164(sp)
 20028f8:	d9403617 	ldw	r5,216(sp)
 20028fc:	d9002c17 	ldw	r4,176(sp)
 2002900:	d8800015 	stw	r2,0(sp)
 2002904:	01c000c4 	movi	r7,3
 2002908:	980d883a 	mov	r6,r19
 200290c:	da003d15 	stw	r8,244(sp)
 2002910:	20030440 	call	2003044 <_dtoa_r>
 2002914:	d8c02917 	ldw	r3,164(sp)
 2002918:	da003d17 	ldw	r8,244(sp)
 200291c:	1021883a 	mov	r16,r2
 2002920:	10f9883a 	add	fp,r2,r3
 2002924:	81000007 	ldb	r4,0(r16)
 2002928:	00800c04 	movi	r2,48
 200292c:	20805e26 	beq	r4,r2,2002aa8 <___vfprintf_internal_r+0x2088>
 2002930:	d8c02617 	ldw	r3,152(sp)
 2002934:	e0f9883a 	add	fp,fp,r3
 2002938:	003e0a06 	br	2002164 <__alt_mem_mem_0+0xfcfe2164>
 200293c:	00c00b44 	movi	r3,45
 2002940:	24e0003c 	xorhi	r19,r4,32768
 2002944:	d8c02a05 	stb	r3,168(sp)
 2002948:	003de906 	br	20020f0 <__alt_mem_mem_0+0xfcfe20f0>
 200294c:	d8c03217 	ldw	r3,200(sp)
 2002950:	00c07a0e 	bge	zero,r3,2002b3c <___vfprintf_internal_r+0x211c>
 2002954:	00800044 	movi	r2,1
 2002958:	d9003317 	ldw	r4,204(sp)
 200295c:	1105883a 	add	r2,r2,r4
 2002960:	d8802e15 	stw	r2,184(sp)
 2002964:	10004e16 	blt	r2,zero,2002aa0 <___vfprintf_internal_r+0x2080>
 2002968:	044019c4 	movi	r17,103
 200296c:	003e2106 	br	20021f4 <__alt_mem_mem_0+0xfcfe21f4>
 2002970:	d9002917 	ldw	r4,164(sp)
 2002974:	d8802104 	addi	r2,sp,132
 2002978:	d8800315 	stw	r2,12(sp)
 200297c:	d9000015 	stw	r4,0(sp)
 2002980:	d8802504 	addi	r2,sp,148
 2002984:	d9403617 	ldw	r5,216(sp)
 2002988:	d9002c17 	ldw	r4,176(sp)
 200298c:	d8800215 	stw	r2,8(sp)
 2002990:	d8802604 	addi	r2,sp,152
 2002994:	d8800115 	stw	r2,4(sp)
 2002998:	01c000c4 	movi	r7,3
 200299c:	980d883a 	mov	r6,r19
 20029a0:	da003d15 	stw	r8,244(sp)
 20029a4:	20030440 	call	2003044 <_dtoa_r>
 20029a8:	d8c02917 	ldw	r3,164(sp)
 20029ac:	da003d17 	ldw	r8,244(sp)
 20029b0:	1021883a 	mov	r16,r2
 20029b4:	00801184 	movi	r2,70
 20029b8:	80f9883a 	add	fp,r16,r3
 20029bc:	88bfd926 	beq	r17,r2,2002924 <__alt_mem_mem_0+0xfcfe2924>
 20029c0:	003de806 	br	2002164 <__alt_mem_mem_0+0xfcfe2164>
 20029c4:	d9002917 	ldw	r4,164(sp)
 20029c8:	00c04d0e 	bge	zero,r3,2002b00 <___vfprintf_internal_r+0x20e0>
 20029cc:	2000441e 	bne	r4,zero,2002ae0 <___vfprintf_internal_r+0x20c0>
 20029d0:	9480004c 	andi	r18,r18,1
 20029d4:	9000421e 	bne	r18,zero,2002ae0 <___vfprintf_internal_r+0x20c0>
 20029d8:	1805883a 	mov	r2,r3
 20029dc:	18007016 	blt	r3,zero,2002ba0 <___vfprintf_internal_r+0x2180>
 20029e0:	d8c03217 	ldw	r3,200(sp)
 20029e4:	d8c02e15 	stw	r3,184(sp)
 20029e8:	003e0206 	br	20021f4 <__alt_mem_mem_0+0xfcfe21f4>
 20029ec:	df0022c4 	addi	fp,sp,139
 20029f0:	dc002915 	stw	r16,164(sp)
 20029f4:	4027883a 	mov	r19,r8
 20029f8:	e021883a 	mov	r16,fp
 20029fc:	b009883a 	mov	r4,r22
 2002a00:	01400284 	movi	r5,10
 2002a04:	200aa680 	call	200aa68 <__modsi3>
 2002a08:	10800c04 	addi	r2,r2,48
 2002a0c:	843fffc4 	addi	r16,r16,-1
 2002a10:	b009883a 	mov	r4,r22
 2002a14:	01400284 	movi	r5,10
 2002a18:	80800005 	stb	r2,0(r16)
 2002a1c:	200a9e40 	call	200a9e4 <__divsi3>
 2002a20:	102d883a 	mov	r22,r2
 2002a24:	00800244 	movi	r2,9
 2002a28:	15bff416 	blt	r2,r22,20029fc <__alt_mem_mem_0+0xfcfe29fc>
 2002a2c:	9811883a 	mov	r8,r19
 2002a30:	b0800c04 	addi	r2,r22,48
 2002a34:	8027883a 	mov	r19,r16
 2002a38:	997fffc4 	addi	r5,r19,-1
 2002a3c:	98bfffc5 	stb	r2,-1(r19)
 2002a40:	dc002917 	ldw	r16,164(sp)
 2002a44:	2f006a2e 	bgeu	r5,fp,2002bf0 <___vfprintf_internal_r+0x21d0>
 2002a48:	d9c02384 	addi	r7,sp,142
 2002a4c:	3ccfc83a 	sub	r7,r7,r19
 2002a50:	d9002344 	addi	r4,sp,141
 2002a54:	e1cf883a 	add	r7,fp,r7
 2002a58:	00000106 	br	2002a60 <___vfprintf_internal_r+0x2040>
 2002a5c:	28800003 	ldbu	r2,0(r5)
 2002a60:	20800005 	stb	r2,0(r4)
 2002a64:	21000044 	addi	r4,r4,1
 2002a68:	29400044 	addi	r5,r5,1
 2002a6c:	393ffb1e 	bne	r7,r4,2002a5c <__alt_mem_mem_0+0xfcfe2a5c>
 2002a70:	d8802304 	addi	r2,sp,140
 2002a74:	14c5c83a 	sub	r2,r2,r19
 2002a78:	d8c02344 	addi	r3,sp,141
 2002a7c:	1885883a 	add	r2,r3,r2
 2002a80:	003f7006 	br	2002844 <__alt_mem_mem_0+0xfcfe2844>
 2002a84:	0005883a 	mov	r2,zero
 2002a88:	003f0f06 	br	20026c8 <__alt_mem_mem_0+0xfcfe26c8>
 2002a8c:	d8c03217 	ldw	r3,200(sp)
 2002a90:	18c00044 	addi	r3,r3,1
 2002a94:	d8c02e15 	stw	r3,184(sp)
 2002a98:	1805883a 	mov	r2,r3
 2002a9c:	183fb20e 	bge	r3,zero,2002968 <__alt_mem_mem_0+0xfcfe2968>
 2002aa0:	0005883a 	mov	r2,zero
 2002aa4:	003fb006 	br	2002968 <__alt_mem_mem_0+0xfcfe2968>
 2002aa8:	d9003617 	ldw	r4,216(sp)
 2002aac:	000d883a 	mov	r6,zero
 2002ab0:	000f883a 	mov	r7,zero
 2002ab4:	980b883a 	mov	r5,r19
 2002ab8:	d8c03c15 	stw	r3,240(sp)
 2002abc:	da003d15 	stw	r8,244(sp)
 2002ac0:	200bd2c0 	call	200bd2c <__eqdf2>
 2002ac4:	d8c03c17 	ldw	r3,240(sp)
 2002ac8:	da003d17 	ldw	r8,244(sp)
 2002acc:	103f9826 	beq	r2,zero,2002930 <__alt_mem_mem_0+0xfcfe2930>
 2002ad0:	00800044 	movi	r2,1
 2002ad4:	10c7c83a 	sub	r3,r2,r3
 2002ad8:	d8c02615 	stw	r3,152(sp)
 2002adc:	003f9506 	br	2002934 <__alt_mem_mem_0+0xfcfe2934>
 2002ae0:	d9002917 	ldw	r4,164(sp)
 2002ae4:	d8c03217 	ldw	r3,200(sp)
 2002ae8:	20800044 	addi	r2,r4,1
 2002aec:	1885883a 	add	r2,r3,r2
 2002af0:	d8802e15 	stw	r2,184(sp)
 2002af4:	103dbf0e 	bge	r2,zero,20021f4 <__alt_mem_mem_0+0xfcfe21f4>
 2002af8:	0005883a 	mov	r2,zero
 2002afc:	003dbd06 	br	20021f4 <__alt_mem_mem_0+0xfcfe21f4>
 2002b00:	2000211e 	bne	r4,zero,2002b88 <___vfprintf_internal_r+0x2168>
 2002b04:	9480004c 	andi	r18,r18,1
 2002b08:	90001f1e 	bne	r18,zero,2002b88 <___vfprintf_internal_r+0x2168>
 2002b0c:	00800044 	movi	r2,1
 2002b10:	d8802e15 	stw	r2,184(sp)
 2002b14:	003db706 	br	20021f4 <__alt_mem_mem_0+0xfcfe21f4>
 2002b18:	00800b44 	movi	r2,45
 2002b1c:	05adc83a 	sub	r22,zero,r22
 2002b20:	d8802305 	stb	r2,140(sp)
 2002b24:	003f3f06 	br	2002824 <__alt_mem_mem_0+0xfcfe2824>
 2002b28:	0005883a 	mov	r2,zero
 2002b2c:	003f5206 	br	2002878 <__alt_mem_mem_0+0xfcfe2878>
 2002b30:	90a4703a 	and	r18,r18,r2
 2002b34:	903f4e26 	beq	r18,zero,2002870 <__alt_mem_mem_0+0xfcfe2870>
 2002b38:	003f4a06 	br	2002864 <__alt_mem_mem_0+0xfcfe2864>
 2002b3c:	00800084 	movi	r2,2
 2002b40:	10c5c83a 	sub	r2,r2,r3
 2002b44:	003f8406 	br	2002958 <__alt_mem_mem_0+0xfcfe2958>
 2002b48:	d8802d17 	ldw	r2,180(sp)
 2002b4c:	d9002d17 	ldw	r4,180(sp)
 2002b50:	ac400043 	ldbu	r17,1(r21)
 2002b54:	10800017 	ldw	r2,0(r2)
 2002b58:	582b883a 	mov	r21,r11
 2002b5c:	d8802915 	stw	r2,164(sp)
 2002b60:	20800104 	addi	r2,r4,4
 2002b64:	d9002917 	ldw	r4,164(sp)
 2002b68:	d8802d15 	stw	r2,180(sp)
 2002b6c:	203e7a0e 	bge	r4,zero,2002558 <__alt_mem_mem_0+0xfcfe2558>
 2002b70:	8c403fcc 	andi	r17,r17,255
 2002b74:	00bfffc4 	movi	r2,-1
 2002b78:	8c40201c 	xori	r17,r17,128
 2002b7c:	d8802915 	stw	r2,164(sp)
 2002b80:	8c7fe004 	addi	r17,r17,-128
 2002b84:	00380706 	br	2000ba4 <__alt_mem_mem_0+0xfcfe0ba4>
 2002b88:	d8c02917 	ldw	r3,164(sp)
 2002b8c:	18c00084 	addi	r3,r3,2
 2002b90:	d8c02e15 	stw	r3,184(sp)
 2002b94:	1805883a 	mov	r2,r3
 2002b98:	183d960e 	bge	r3,zero,20021f4 <__alt_mem_mem_0+0xfcfe21f4>
 2002b9c:	003fd606 	br	2002af8 <__alt_mem_mem_0+0xfcfe2af8>
 2002ba0:	0005883a 	mov	r2,zero
 2002ba4:	003f8e06 	br	20029e0 <__alt_mem_mem_0+0xfcfe29e0>
 2002ba8:	9080004c 	andi	r2,r18,1
 2002bac:	103f811e 	bne	r2,zero,20029b4 <__alt_mem_mem_0+0xfcfe29b4>
 2002bb0:	d8802117 	ldw	r2,132(sp)
 2002bb4:	1405c83a 	sub	r2,r2,r16
 2002bb8:	d8803315 	stw	r2,204(sp)
 2002bbc:	b47ef326 	beq	r22,r17,200278c <__alt_mem_mem_0+0xfcfe278c>
 2002bc0:	dd802617 	ldw	r22,152(sp)
 2002bc4:	003f1106 	br	200280c <__alt_mem_mem_0+0xfcfe280c>
 2002bc8:	d9c02785 	stb	r7,158(sp)
 2002bcc:	00390406 	br	2000fe0 <__alt_mem_mem_0+0xfcfe0fe0>
 2002bd0:	d9c02785 	stb	r7,158(sp)
 2002bd4:	0038d306 	br	2000f24 <__alt_mem_mem_0+0xfcfe0f24>
 2002bd8:	d9c02785 	stb	r7,158(sp)
 2002bdc:	003a6106 	br	2001564 <__alt_mem_mem_0+0xfcfe1564>
 2002be0:	d9c02785 	stb	r7,158(sp)
 2002be4:	003af806 	br	20017c8 <__alt_mem_mem_0+0xfcfe17c8>
 2002be8:	0005883a 	mov	r2,zero
 2002bec:	003d7e06 	br	20021e8 <__alt_mem_mem_0+0xfcfe21e8>
 2002bf0:	d8802344 	addi	r2,sp,141
 2002bf4:	003f1306 	br	2002844 <__alt_mem_mem_0+0xfcfe2844>
 2002bf8:	d9c02785 	stb	r7,158(sp)
 2002bfc:	00392306 	br	200108c <__alt_mem_mem_0+0xfcfe108c>
 2002c00:	d9c02785 	stb	r7,158(sp)
 2002c04:	003aa906 	br	20016ac <__alt_mem_mem_0+0xfcfe16ac>
 2002c08:	d9c02785 	stb	r7,158(sp)
 2002c0c:	003a3d06 	br	2001504 <__alt_mem_mem_0+0xfcfe1504>
 2002c10:	d9c02785 	stb	r7,158(sp)
 2002c14:	003aca06 	br	2001740 <__alt_mem_mem_0+0xfcfe1740>

02002c18 <__vfprintf_internal>:
 2002c18:	00808134 	movhi	r2,516
 2002c1c:	1095e804 	addi	r2,r2,22432
 2002c20:	300f883a 	mov	r7,r6
 2002c24:	280d883a 	mov	r6,r5
 2002c28:	200b883a 	mov	r5,r4
 2002c2c:	11000017 	ldw	r4,0(r2)
 2002c30:	2000a201 	jmpi	2000a20 <___vfprintf_internal_r>

02002c34 <__sbprintf>:
 2002c34:	2880030b 	ldhu	r2,12(r5)
 2002c38:	2ac01917 	ldw	r11,100(r5)
 2002c3c:	2a80038b 	ldhu	r10,14(r5)
 2002c40:	2a400717 	ldw	r9,28(r5)
 2002c44:	2a000917 	ldw	r8,36(r5)
 2002c48:	defee204 	addi	sp,sp,-1144
 2002c4c:	00c10004 	movi	r3,1024
 2002c50:	dc011a15 	stw	r16,1128(sp)
 2002c54:	10bfff4c 	andi	r2,r2,65533
 2002c58:	2821883a 	mov	r16,r5
 2002c5c:	d8cb883a 	add	r5,sp,r3
 2002c60:	dc811c15 	stw	r18,1136(sp)
 2002c64:	dc411b15 	stw	r17,1132(sp)
 2002c68:	dfc11d15 	stw	ra,1140(sp)
 2002c6c:	2025883a 	mov	r18,r4
 2002c70:	d881030d 	sth	r2,1036(sp)
 2002c74:	dac11915 	stw	r11,1124(sp)
 2002c78:	da81038d 	sth	r10,1038(sp)
 2002c7c:	da410715 	stw	r9,1052(sp)
 2002c80:	da010915 	stw	r8,1060(sp)
 2002c84:	dec10015 	stw	sp,1024(sp)
 2002c88:	dec10415 	stw	sp,1040(sp)
 2002c8c:	d8c10215 	stw	r3,1032(sp)
 2002c90:	d8c10515 	stw	r3,1044(sp)
 2002c94:	d8010615 	stw	zero,1048(sp)
 2002c98:	2000a200 	call	2000a20 <___vfprintf_internal_r>
 2002c9c:	1023883a 	mov	r17,r2
 2002ca0:	10000416 	blt	r2,zero,2002cb4 <__sbprintf+0x80>
 2002ca4:	d9410004 	addi	r5,sp,1024
 2002ca8:	9009883a 	mov	r4,r18
 2002cac:	20048e80 	call	20048e8 <_fflush_r>
 2002cb0:	10000d1e 	bne	r2,zero,2002ce8 <__sbprintf+0xb4>
 2002cb4:	d881030b 	ldhu	r2,1036(sp)
 2002cb8:	1080100c 	andi	r2,r2,64
 2002cbc:	10000326 	beq	r2,zero,2002ccc <__sbprintf+0x98>
 2002cc0:	8080030b 	ldhu	r2,12(r16)
 2002cc4:	10801014 	ori	r2,r2,64
 2002cc8:	8080030d 	sth	r2,12(r16)
 2002ccc:	8805883a 	mov	r2,r17
 2002cd0:	dfc11d17 	ldw	ra,1140(sp)
 2002cd4:	dc811c17 	ldw	r18,1136(sp)
 2002cd8:	dc411b17 	ldw	r17,1132(sp)
 2002cdc:	dc011a17 	ldw	r16,1128(sp)
 2002ce0:	dec11e04 	addi	sp,sp,1144
 2002ce4:	f800283a 	ret
 2002ce8:	047fffc4 	movi	r17,-1
 2002cec:	003ff106 	br	2002cb4 <__alt_mem_mem_0+0xfcfe2cb4>

02002cf0 <__swsetup_r>:
 2002cf0:	00808134 	movhi	r2,516
 2002cf4:	defffd04 	addi	sp,sp,-12
 2002cf8:	1095e804 	addi	r2,r2,22432
 2002cfc:	dc400115 	stw	r17,4(sp)
 2002d00:	2023883a 	mov	r17,r4
 2002d04:	11000017 	ldw	r4,0(r2)
 2002d08:	dc000015 	stw	r16,0(sp)
 2002d0c:	dfc00215 	stw	ra,8(sp)
 2002d10:	2821883a 	mov	r16,r5
 2002d14:	20000226 	beq	r4,zero,2002d20 <__swsetup_r+0x30>
 2002d18:	20800e17 	ldw	r2,56(r4)
 2002d1c:	10003126 	beq	r2,zero,2002de4 <__swsetup_r+0xf4>
 2002d20:	8080030b 	ldhu	r2,12(r16)
 2002d24:	10c0020c 	andi	r3,r2,8
 2002d28:	1009883a 	mov	r4,r2
 2002d2c:	18000f26 	beq	r3,zero,2002d6c <__swsetup_r+0x7c>
 2002d30:	80c00417 	ldw	r3,16(r16)
 2002d34:	18001526 	beq	r3,zero,2002d8c <__swsetup_r+0x9c>
 2002d38:	1100004c 	andi	r4,r2,1
 2002d3c:	20001c1e 	bne	r4,zero,2002db0 <__swsetup_r+0xc0>
 2002d40:	1080008c 	andi	r2,r2,2
 2002d44:	1000291e 	bne	r2,zero,2002dec <__swsetup_r+0xfc>
 2002d48:	80800517 	ldw	r2,20(r16)
 2002d4c:	80800215 	stw	r2,8(r16)
 2002d50:	18001c26 	beq	r3,zero,2002dc4 <__swsetup_r+0xd4>
 2002d54:	0005883a 	mov	r2,zero
 2002d58:	dfc00217 	ldw	ra,8(sp)
 2002d5c:	dc400117 	ldw	r17,4(sp)
 2002d60:	dc000017 	ldw	r16,0(sp)
 2002d64:	dec00304 	addi	sp,sp,12
 2002d68:	f800283a 	ret
 2002d6c:	2080040c 	andi	r2,r4,16
 2002d70:	10002e26 	beq	r2,zero,2002e2c <__swsetup_r+0x13c>
 2002d74:	2080010c 	andi	r2,r4,4
 2002d78:	10001e1e 	bne	r2,zero,2002df4 <__swsetup_r+0x104>
 2002d7c:	80c00417 	ldw	r3,16(r16)
 2002d80:	20800214 	ori	r2,r4,8
 2002d84:	8080030d 	sth	r2,12(r16)
 2002d88:	183feb1e 	bne	r3,zero,2002d38 <__alt_mem_mem_0+0xfcfe2d38>
 2002d8c:	1100a00c 	andi	r4,r2,640
 2002d90:	01408004 	movi	r5,512
 2002d94:	217fe826 	beq	r4,r5,2002d38 <__alt_mem_mem_0+0xfcfe2d38>
 2002d98:	800b883a 	mov	r5,r16
 2002d9c:	8809883a 	mov	r4,r17
 2002da0:	20053ac0 	call	20053ac <__smakebuf_r>
 2002da4:	8080030b 	ldhu	r2,12(r16)
 2002da8:	80c00417 	ldw	r3,16(r16)
 2002dac:	003fe206 	br	2002d38 <__alt_mem_mem_0+0xfcfe2d38>
 2002db0:	80800517 	ldw	r2,20(r16)
 2002db4:	80000215 	stw	zero,8(r16)
 2002db8:	0085c83a 	sub	r2,zero,r2
 2002dbc:	80800615 	stw	r2,24(r16)
 2002dc0:	183fe41e 	bne	r3,zero,2002d54 <__alt_mem_mem_0+0xfcfe2d54>
 2002dc4:	80c0030b 	ldhu	r3,12(r16)
 2002dc8:	0005883a 	mov	r2,zero
 2002dcc:	1900200c 	andi	r4,r3,128
 2002dd0:	203fe126 	beq	r4,zero,2002d58 <__alt_mem_mem_0+0xfcfe2d58>
 2002dd4:	18c01014 	ori	r3,r3,64
 2002dd8:	80c0030d 	sth	r3,12(r16)
 2002ddc:	00bfffc4 	movi	r2,-1
 2002de0:	003fdd06 	br	2002d58 <__alt_mem_mem_0+0xfcfe2d58>
 2002de4:	2004cc40 	call	2004cc4 <__sinit>
 2002de8:	003fcd06 	br	2002d20 <__alt_mem_mem_0+0xfcfe2d20>
 2002dec:	0005883a 	mov	r2,zero
 2002df0:	003fd606 	br	2002d4c <__alt_mem_mem_0+0xfcfe2d4c>
 2002df4:	81400c17 	ldw	r5,48(r16)
 2002df8:	28000626 	beq	r5,zero,2002e14 <__swsetup_r+0x124>
 2002dfc:	80801004 	addi	r2,r16,64
 2002e00:	28800326 	beq	r5,r2,2002e10 <__swsetup_r+0x120>
 2002e04:	8809883a 	mov	r4,r17
 2002e08:	2004e380 	call	2004e38 <_free_r>
 2002e0c:	8100030b 	ldhu	r4,12(r16)
 2002e10:	80000c15 	stw	zero,48(r16)
 2002e14:	80c00417 	ldw	r3,16(r16)
 2002e18:	00bff6c4 	movi	r2,-37
 2002e1c:	1108703a 	and	r4,r2,r4
 2002e20:	80000115 	stw	zero,4(r16)
 2002e24:	80c00015 	stw	r3,0(r16)
 2002e28:	003fd506 	br	2002d80 <__alt_mem_mem_0+0xfcfe2d80>
 2002e2c:	00800244 	movi	r2,9
 2002e30:	88800015 	stw	r2,0(r17)
 2002e34:	20801014 	ori	r2,r4,64
 2002e38:	8080030d 	sth	r2,12(r16)
 2002e3c:	00bfffc4 	movi	r2,-1
 2002e40:	003fc506 	br	2002d58 <__alt_mem_mem_0+0xfcfe2d58>

02002e44 <quorem>:
 2002e44:	defff704 	addi	sp,sp,-36
 2002e48:	dc800215 	stw	r18,8(sp)
 2002e4c:	20800417 	ldw	r2,16(r4)
 2002e50:	2c800417 	ldw	r18,16(r5)
 2002e54:	dfc00815 	stw	ra,32(sp)
 2002e58:	ddc00715 	stw	r23,28(sp)
 2002e5c:	dd800615 	stw	r22,24(sp)
 2002e60:	dd400515 	stw	r21,20(sp)
 2002e64:	dd000415 	stw	r20,16(sp)
 2002e68:	dcc00315 	stw	r19,12(sp)
 2002e6c:	dc400115 	stw	r17,4(sp)
 2002e70:	dc000015 	stw	r16,0(sp)
 2002e74:	14807116 	blt	r2,r18,200303c <quorem+0x1f8>
 2002e78:	94bfffc4 	addi	r18,r18,-1
 2002e7c:	94ad883a 	add	r22,r18,r18
 2002e80:	b5ad883a 	add	r22,r22,r22
 2002e84:	2c400504 	addi	r17,r5,20
 2002e88:	8da9883a 	add	r20,r17,r22
 2002e8c:	25400504 	addi	r21,r4,20
 2002e90:	282f883a 	mov	r23,r5
 2002e94:	adad883a 	add	r22,r21,r22
 2002e98:	a1400017 	ldw	r5,0(r20)
 2002e9c:	2021883a 	mov	r16,r4
 2002ea0:	b1000017 	ldw	r4,0(r22)
 2002ea4:	29400044 	addi	r5,r5,1
 2002ea8:	200aadc0 	call	200aadc <__udivsi3>
 2002eac:	1027883a 	mov	r19,r2
 2002eb0:	10002c26 	beq	r2,zero,2002f64 <quorem+0x120>
 2002eb4:	a813883a 	mov	r9,r21
 2002eb8:	880b883a 	mov	r5,r17
 2002ebc:	0009883a 	mov	r4,zero
 2002ec0:	000d883a 	mov	r6,zero
 2002ec4:	2a000017 	ldw	r8,0(r5)
 2002ec8:	49c00017 	ldw	r7,0(r9)
 2002ecc:	29400104 	addi	r5,r5,4
 2002ed0:	40bfffcc 	andi	r2,r8,65535
 2002ed4:	14c5383a 	mul	r2,r2,r19
 2002ed8:	4010d43a 	srli	r8,r8,16
 2002edc:	38ffffcc 	andi	r3,r7,65535
 2002ee0:	1105883a 	add	r2,r2,r4
 2002ee4:	1008d43a 	srli	r4,r2,16
 2002ee8:	44d1383a 	mul	r8,r8,r19
 2002eec:	198d883a 	add	r6,r3,r6
 2002ef0:	10ffffcc 	andi	r3,r2,65535
 2002ef4:	30c7c83a 	sub	r3,r6,r3
 2002ef8:	380ed43a 	srli	r7,r7,16
 2002efc:	4105883a 	add	r2,r8,r4
 2002f00:	180dd43a 	srai	r6,r3,16
 2002f04:	113fffcc 	andi	r4,r2,65535
 2002f08:	390fc83a 	sub	r7,r7,r4
 2002f0c:	398d883a 	add	r6,r7,r6
 2002f10:	300e943a 	slli	r7,r6,16
 2002f14:	18ffffcc 	andi	r3,r3,65535
 2002f18:	1008d43a 	srli	r4,r2,16
 2002f1c:	38ceb03a 	or	r7,r7,r3
 2002f20:	49c00015 	stw	r7,0(r9)
 2002f24:	300dd43a 	srai	r6,r6,16
 2002f28:	4a400104 	addi	r9,r9,4
 2002f2c:	a17fe52e 	bgeu	r20,r5,2002ec4 <__alt_mem_mem_0+0xfcfe2ec4>
 2002f30:	b0800017 	ldw	r2,0(r22)
 2002f34:	10000b1e 	bne	r2,zero,2002f64 <quorem+0x120>
 2002f38:	b0bfff04 	addi	r2,r22,-4
 2002f3c:	a880082e 	bgeu	r21,r2,2002f60 <quorem+0x11c>
 2002f40:	b0ffff17 	ldw	r3,-4(r22)
 2002f44:	18000326 	beq	r3,zero,2002f54 <quorem+0x110>
 2002f48:	00000506 	br	2002f60 <quorem+0x11c>
 2002f4c:	10c00017 	ldw	r3,0(r2)
 2002f50:	1800031e 	bne	r3,zero,2002f60 <quorem+0x11c>
 2002f54:	10bfff04 	addi	r2,r2,-4
 2002f58:	94bfffc4 	addi	r18,r18,-1
 2002f5c:	a8bffb36 	bltu	r21,r2,2002f4c <__alt_mem_mem_0+0xfcfe2f4c>
 2002f60:	84800415 	stw	r18,16(r16)
 2002f64:	b80b883a 	mov	r5,r23
 2002f68:	8009883a 	mov	r4,r16
 2002f6c:	20069900 	call	2006990 <__mcmp>
 2002f70:	10002616 	blt	r2,zero,200300c <quorem+0x1c8>
 2002f74:	9cc00044 	addi	r19,r19,1
 2002f78:	a805883a 	mov	r2,r21
 2002f7c:	000b883a 	mov	r5,zero
 2002f80:	11000017 	ldw	r4,0(r2)
 2002f84:	89800017 	ldw	r6,0(r17)
 2002f88:	10800104 	addi	r2,r2,4
 2002f8c:	20ffffcc 	andi	r3,r4,65535
 2002f90:	194b883a 	add	r5,r3,r5
 2002f94:	30ffffcc 	andi	r3,r6,65535
 2002f98:	28c7c83a 	sub	r3,r5,r3
 2002f9c:	300cd43a 	srli	r6,r6,16
 2002fa0:	2008d43a 	srli	r4,r4,16
 2002fa4:	180bd43a 	srai	r5,r3,16
 2002fa8:	18ffffcc 	andi	r3,r3,65535
 2002fac:	2189c83a 	sub	r4,r4,r6
 2002fb0:	2149883a 	add	r4,r4,r5
 2002fb4:	200c943a 	slli	r6,r4,16
 2002fb8:	8c400104 	addi	r17,r17,4
 2002fbc:	200bd43a 	srai	r5,r4,16
 2002fc0:	30c6b03a 	or	r3,r6,r3
 2002fc4:	10ffff15 	stw	r3,-4(r2)
 2002fc8:	a47fed2e 	bgeu	r20,r17,2002f80 <__alt_mem_mem_0+0xfcfe2f80>
 2002fcc:	9485883a 	add	r2,r18,r18
 2002fd0:	1085883a 	add	r2,r2,r2
 2002fd4:	a887883a 	add	r3,r21,r2
 2002fd8:	18800017 	ldw	r2,0(r3)
 2002fdc:	10000b1e 	bne	r2,zero,200300c <quorem+0x1c8>
 2002fe0:	18bfff04 	addi	r2,r3,-4
 2002fe4:	a880082e 	bgeu	r21,r2,2003008 <quorem+0x1c4>
 2002fe8:	18ffff17 	ldw	r3,-4(r3)
 2002fec:	18000326 	beq	r3,zero,2002ffc <quorem+0x1b8>
 2002ff0:	00000506 	br	2003008 <quorem+0x1c4>
 2002ff4:	10c00017 	ldw	r3,0(r2)
 2002ff8:	1800031e 	bne	r3,zero,2003008 <quorem+0x1c4>
 2002ffc:	10bfff04 	addi	r2,r2,-4
 2003000:	94bfffc4 	addi	r18,r18,-1
 2003004:	a8bffb36 	bltu	r21,r2,2002ff4 <__alt_mem_mem_0+0xfcfe2ff4>
 2003008:	84800415 	stw	r18,16(r16)
 200300c:	9805883a 	mov	r2,r19
 2003010:	dfc00817 	ldw	ra,32(sp)
 2003014:	ddc00717 	ldw	r23,28(sp)
 2003018:	dd800617 	ldw	r22,24(sp)
 200301c:	dd400517 	ldw	r21,20(sp)
 2003020:	dd000417 	ldw	r20,16(sp)
 2003024:	dcc00317 	ldw	r19,12(sp)
 2003028:	dc800217 	ldw	r18,8(sp)
 200302c:	dc400117 	ldw	r17,4(sp)
 2003030:	dc000017 	ldw	r16,0(sp)
 2003034:	dec00904 	addi	sp,sp,36
 2003038:	f800283a 	ret
 200303c:	0005883a 	mov	r2,zero
 2003040:	003ff306 	br	2003010 <__alt_mem_mem_0+0xfcfe3010>

02003044 <_dtoa_r>:
 2003044:	20801017 	ldw	r2,64(r4)
 2003048:	deffde04 	addi	sp,sp,-136
 200304c:	df002015 	stw	fp,128(sp)
 2003050:	dcc01b15 	stw	r19,108(sp)
 2003054:	dc801a15 	stw	r18,104(sp)
 2003058:	dc401915 	stw	r17,100(sp)
 200305c:	dc001815 	stw	r16,96(sp)
 2003060:	dfc02115 	stw	ra,132(sp)
 2003064:	ddc01f15 	stw	r23,124(sp)
 2003068:	dd801e15 	stw	r22,120(sp)
 200306c:	dd401d15 	stw	r21,116(sp)
 2003070:	dd001c15 	stw	r20,112(sp)
 2003074:	d9c00315 	stw	r7,12(sp)
 2003078:	2039883a 	mov	fp,r4
 200307c:	3023883a 	mov	r17,r6
 2003080:	2825883a 	mov	r18,r5
 2003084:	dc002417 	ldw	r16,144(sp)
 2003088:	3027883a 	mov	r19,r6
 200308c:	10000826 	beq	r2,zero,20030b0 <_dtoa_r+0x6c>
 2003090:	21801117 	ldw	r6,68(r4)
 2003094:	00c00044 	movi	r3,1
 2003098:	100b883a 	mov	r5,r2
 200309c:	1986983a 	sll	r3,r3,r6
 20030a0:	11800115 	stw	r6,4(r2)
 20030a4:	10c00215 	stw	r3,8(r2)
 20030a8:	20061700 	call	2006170 <_Bfree>
 20030ac:	e0001015 	stw	zero,64(fp)
 20030b0:	88002e16 	blt	r17,zero,200316c <_dtoa_r+0x128>
 20030b4:	80000015 	stw	zero,0(r16)
 20030b8:	889ffc2c 	andhi	r2,r17,32752
 20030bc:	00dffc34 	movhi	r3,32752
 20030c0:	10c01c26 	beq	r2,r3,2003134 <_dtoa_r+0xf0>
 20030c4:	000d883a 	mov	r6,zero
 20030c8:	000f883a 	mov	r7,zero
 20030cc:	9009883a 	mov	r4,r18
 20030d0:	980b883a 	mov	r5,r19
 20030d4:	200bd2c0 	call	200bd2c <__eqdf2>
 20030d8:	10002b1e 	bne	r2,zero,2003188 <_dtoa_r+0x144>
 20030dc:	d9c02317 	ldw	r7,140(sp)
 20030e0:	00800044 	movi	r2,1
 20030e4:	38800015 	stw	r2,0(r7)
 20030e8:	d8802517 	ldw	r2,148(sp)
 20030ec:	10019e26 	beq	r2,zero,2003768 <_dtoa_r+0x724>
 20030f0:	d8c02517 	ldw	r3,148(sp)
 20030f4:	00808134 	movhi	r2,516
 20030f8:	10838044 	addi	r2,r2,3585
 20030fc:	18800015 	stw	r2,0(r3)
 2003100:	10bfffc4 	addi	r2,r2,-1
 2003104:	dfc02117 	ldw	ra,132(sp)
 2003108:	df002017 	ldw	fp,128(sp)
 200310c:	ddc01f17 	ldw	r23,124(sp)
 2003110:	dd801e17 	ldw	r22,120(sp)
 2003114:	dd401d17 	ldw	r21,116(sp)
 2003118:	dd001c17 	ldw	r20,112(sp)
 200311c:	dcc01b17 	ldw	r19,108(sp)
 2003120:	dc801a17 	ldw	r18,104(sp)
 2003124:	dc401917 	ldw	r17,100(sp)
 2003128:	dc001817 	ldw	r16,96(sp)
 200312c:	dec02204 	addi	sp,sp,136
 2003130:	f800283a 	ret
 2003134:	d8c02317 	ldw	r3,140(sp)
 2003138:	0089c3c4 	movi	r2,9999
 200313c:	18800015 	stw	r2,0(r3)
 2003140:	90017726 	beq	r18,zero,2003720 <_dtoa_r+0x6dc>
 2003144:	00808134 	movhi	r2,516
 2003148:	10838c04 	addi	r2,r2,3632
 200314c:	d9002517 	ldw	r4,148(sp)
 2003150:	203fec26 	beq	r4,zero,2003104 <__alt_mem_mem_0+0xfcfe3104>
 2003154:	10c000c7 	ldb	r3,3(r2)
 2003158:	1801781e 	bne	r3,zero,200373c <_dtoa_r+0x6f8>
 200315c:	10c000c4 	addi	r3,r2,3
 2003160:	d9802517 	ldw	r6,148(sp)
 2003164:	30c00015 	stw	r3,0(r6)
 2003168:	003fe606 	br	2003104 <__alt_mem_mem_0+0xfcfe3104>
 200316c:	04e00034 	movhi	r19,32768
 2003170:	9cffffc4 	addi	r19,r19,-1
 2003174:	00800044 	movi	r2,1
 2003178:	8ce6703a 	and	r19,r17,r19
 200317c:	80800015 	stw	r2,0(r16)
 2003180:	9823883a 	mov	r17,r19
 2003184:	003fcc06 	br	20030b8 <__alt_mem_mem_0+0xfcfe30b8>
 2003188:	d8800204 	addi	r2,sp,8
 200318c:	d8800015 	stw	r2,0(sp)
 2003190:	d9c00104 	addi	r7,sp,4
 2003194:	900b883a 	mov	r5,r18
 2003198:	980d883a 	mov	r6,r19
 200319c:	e009883a 	mov	r4,fp
 20031a0:	8820d53a 	srli	r16,r17,20
 20031a4:	2006d5c0 	call	2006d5c <__d2b>
 20031a8:	d8800915 	stw	r2,36(sp)
 20031ac:	8001651e 	bne	r16,zero,2003744 <_dtoa_r+0x700>
 20031b0:	dd800217 	ldw	r22,8(sp)
 20031b4:	dc000117 	ldw	r16,4(sp)
 20031b8:	00800804 	movi	r2,32
 20031bc:	b421883a 	add	r16,r22,r16
 20031c0:	80c10c84 	addi	r3,r16,1074
 20031c4:	10c2d10e 	bge	r2,r3,2003d0c <_dtoa_r+0xcc8>
 20031c8:	00801004 	movi	r2,64
 20031cc:	81010484 	addi	r4,r16,1042
 20031d0:	10c7c83a 	sub	r3,r2,r3
 20031d4:	9108d83a 	srl	r4,r18,r4
 20031d8:	88e2983a 	sll	r17,r17,r3
 20031dc:	2448b03a 	or	r4,r4,r17
 20031e0:	200d0f40 	call	200d0f4 <__floatunsidf>
 20031e4:	017f8434 	movhi	r5,65040
 20031e8:	01800044 	movi	r6,1
 20031ec:	1009883a 	mov	r4,r2
 20031f0:	194b883a 	add	r5,r3,r5
 20031f4:	843fffc4 	addi	r16,r16,-1
 20031f8:	d9801115 	stw	r6,68(sp)
 20031fc:	000d883a 	mov	r6,zero
 2003200:	01cffe34 	movhi	r7,16376
 2003204:	200c69c0 	call	200c69c <__subdf3>
 2003208:	0198dbf4 	movhi	r6,25455
 200320c:	01cff4f4 	movhi	r7,16339
 2003210:	3190d844 	addi	r6,r6,17249
 2003214:	39e1e9c4 	addi	r7,r7,-30809
 2003218:	1009883a 	mov	r4,r2
 200321c:	180b883a 	mov	r5,r3
 2003220:	200bf840 	call	200bf84 <__muldf3>
 2003224:	01a2d874 	movhi	r6,35681
 2003228:	01cff1f4 	movhi	r7,16327
 200322c:	31b22cc4 	addi	r6,r6,-14157
 2003230:	39e28a04 	addi	r7,r7,-30168
 2003234:	180b883a 	mov	r5,r3
 2003238:	1009883a 	mov	r4,r2
 200323c:	200ab980 	call	200ab98 <__adddf3>
 2003240:	8009883a 	mov	r4,r16
 2003244:	1029883a 	mov	r20,r2
 2003248:	1823883a 	mov	r17,r3
 200324c:	200d0180 	call	200d018 <__floatsidf>
 2003250:	019427f4 	movhi	r6,20639
 2003254:	01cff4f4 	movhi	r7,16339
 2003258:	319e7ec4 	addi	r6,r6,31227
 200325c:	39d104c4 	addi	r7,r7,17427
 2003260:	1009883a 	mov	r4,r2
 2003264:	180b883a 	mov	r5,r3
 2003268:	200bf840 	call	200bf84 <__muldf3>
 200326c:	100d883a 	mov	r6,r2
 2003270:	180f883a 	mov	r7,r3
 2003274:	a009883a 	mov	r4,r20
 2003278:	880b883a 	mov	r5,r17
 200327c:	200ab980 	call	200ab98 <__adddf3>
 2003280:	1009883a 	mov	r4,r2
 2003284:	180b883a 	mov	r5,r3
 2003288:	1029883a 	mov	r20,r2
 200328c:	1823883a 	mov	r17,r3
 2003290:	200cf980 	call	200cf98 <__fixdfsi>
 2003294:	000d883a 	mov	r6,zero
 2003298:	000f883a 	mov	r7,zero
 200329c:	a009883a 	mov	r4,r20
 20032a0:	880b883a 	mov	r5,r17
 20032a4:	d8800515 	stw	r2,20(sp)
 20032a8:	200be900 	call	200be90 <__ledf2>
 20032ac:	10028716 	blt	r2,zero,2003ccc <_dtoa_r+0xc88>
 20032b0:	d8c00517 	ldw	r3,20(sp)
 20032b4:	00800584 	movi	r2,22
 20032b8:	10c27536 	bltu	r2,r3,2003c90 <_dtoa_r+0xc4c>
 20032bc:	180490fa 	slli	r2,r3,3
 20032c0:	00c08134 	movhi	r3,516
 20032c4:	18c3a804 	addi	r3,r3,3744
 20032c8:	1885883a 	add	r2,r3,r2
 20032cc:	11000017 	ldw	r4,0(r2)
 20032d0:	11400117 	ldw	r5,4(r2)
 20032d4:	900d883a 	mov	r6,r18
 20032d8:	980f883a 	mov	r7,r19
 20032dc:	200bdb40 	call	200bdb4 <__gedf2>
 20032e0:	00828d0e 	bge	zero,r2,2003d18 <_dtoa_r+0xcd4>
 20032e4:	d9000517 	ldw	r4,20(sp)
 20032e8:	d8000e15 	stw	zero,56(sp)
 20032ec:	213fffc4 	addi	r4,r4,-1
 20032f0:	d9000515 	stw	r4,20(sp)
 20032f4:	b42dc83a 	sub	r22,r22,r16
 20032f8:	b5bfffc4 	addi	r22,r22,-1
 20032fc:	b0026f16 	blt	r22,zero,2003cbc <_dtoa_r+0xc78>
 2003300:	d8000815 	stw	zero,32(sp)
 2003304:	d9c00517 	ldw	r7,20(sp)
 2003308:	38026416 	blt	r7,zero,2003c9c <_dtoa_r+0xc58>
 200330c:	b1ed883a 	add	r22,r22,r7
 2003310:	d9c00d15 	stw	r7,52(sp)
 2003314:	d8000a15 	stw	zero,40(sp)
 2003318:	d9800317 	ldw	r6,12(sp)
 200331c:	00800244 	movi	r2,9
 2003320:	11811436 	bltu	r2,r6,2003774 <_dtoa_r+0x730>
 2003324:	00800144 	movi	r2,5
 2003328:	1184e10e 	bge	r2,r6,20046b0 <_dtoa_r+0x166c>
 200332c:	31bfff04 	addi	r6,r6,-4
 2003330:	d9800315 	stw	r6,12(sp)
 2003334:	0023883a 	mov	r17,zero
 2003338:	d9800317 	ldw	r6,12(sp)
 200333c:	008000c4 	movi	r2,3
 2003340:	30836726 	beq	r6,r2,20040e0 <_dtoa_r+0x109c>
 2003344:	1183410e 	bge	r2,r6,200404c <_dtoa_r+0x1008>
 2003348:	d9c00317 	ldw	r7,12(sp)
 200334c:	00800104 	movi	r2,4
 2003350:	38827c26 	beq	r7,r2,2003d44 <_dtoa_r+0xd00>
 2003354:	00800144 	movi	r2,5
 2003358:	3884c41e 	bne	r7,r2,200466c <_dtoa_r+0x1628>
 200335c:	00800044 	movi	r2,1
 2003360:	d8800b15 	stw	r2,44(sp)
 2003364:	d8c00517 	ldw	r3,20(sp)
 2003368:	d9002217 	ldw	r4,136(sp)
 200336c:	1907883a 	add	r3,r3,r4
 2003370:	19800044 	addi	r6,r3,1
 2003374:	d8c00c15 	stw	r3,48(sp)
 2003378:	d9800615 	stw	r6,24(sp)
 200337c:	0183a40e 	bge	zero,r6,2004210 <_dtoa_r+0x11cc>
 2003380:	d9800617 	ldw	r6,24(sp)
 2003384:	3021883a 	mov	r16,r6
 2003388:	e0001115 	stw	zero,68(fp)
 200338c:	008005c4 	movi	r2,23
 2003390:	1184c92e 	bgeu	r2,r6,20046b8 <_dtoa_r+0x1674>
 2003394:	00c00044 	movi	r3,1
 2003398:	00800104 	movi	r2,4
 200339c:	1085883a 	add	r2,r2,r2
 20033a0:	11000504 	addi	r4,r2,20
 20033a4:	180b883a 	mov	r5,r3
 20033a8:	18c00044 	addi	r3,r3,1
 20033ac:	313ffb2e 	bgeu	r6,r4,200339c <__alt_mem_mem_0+0xfcfe339c>
 20033b0:	e1401115 	stw	r5,68(fp)
 20033b4:	e009883a 	mov	r4,fp
 20033b8:	20060c80 	call	20060c8 <_Balloc>
 20033bc:	d8800715 	stw	r2,28(sp)
 20033c0:	e0801015 	stw	r2,64(fp)
 20033c4:	00800384 	movi	r2,14
 20033c8:	1400f736 	bltu	r2,r16,20037a8 <_dtoa_r+0x764>
 20033cc:	8800f626 	beq	r17,zero,20037a8 <_dtoa_r+0x764>
 20033d0:	d9c00517 	ldw	r7,20(sp)
 20033d4:	01c39a0e 	bge	zero,r7,2004240 <_dtoa_r+0x11fc>
 20033d8:	388003cc 	andi	r2,r7,15
 20033dc:	100490fa 	slli	r2,r2,3
 20033e0:	382bd13a 	srai	r21,r7,4
 20033e4:	00c08134 	movhi	r3,516
 20033e8:	18c3a804 	addi	r3,r3,3744
 20033ec:	1885883a 	add	r2,r3,r2
 20033f0:	a8c0040c 	andi	r3,r21,16
 20033f4:	12400017 	ldw	r9,0(r2)
 20033f8:	12000117 	ldw	r8,4(r2)
 20033fc:	18037926 	beq	r3,zero,20041e4 <_dtoa_r+0x11a0>
 2003400:	00808134 	movhi	r2,516
 2003404:	10839e04 	addi	r2,r2,3704
 2003408:	11800817 	ldw	r6,32(r2)
 200340c:	11c00917 	ldw	r7,36(r2)
 2003410:	9009883a 	mov	r4,r18
 2003414:	980b883a 	mov	r5,r19
 2003418:	da001715 	stw	r8,92(sp)
 200341c:	da401615 	stw	r9,88(sp)
 2003420:	200b4440 	call	200b444 <__divdf3>
 2003424:	da001717 	ldw	r8,92(sp)
 2003428:	da401617 	ldw	r9,88(sp)
 200342c:	ad4003cc 	andi	r21,r21,15
 2003430:	040000c4 	movi	r16,3
 2003434:	1023883a 	mov	r17,r2
 2003438:	1829883a 	mov	r20,r3
 200343c:	a8001126 	beq	r21,zero,2003484 <_dtoa_r+0x440>
 2003440:	05c08134 	movhi	r23,516
 2003444:	bdc39e04 	addi	r23,r23,3704
 2003448:	4805883a 	mov	r2,r9
 200344c:	4007883a 	mov	r3,r8
 2003450:	a980004c 	andi	r6,r21,1
 2003454:	1009883a 	mov	r4,r2
 2003458:	a82bd07a 	srai	r21,r21,1
 200345c:	180b883a 	mov	r5,r3
 2003460:	30000426 	beq	r6,zero,2003474 <_dtoa_r+0x430>
 2003464:	b9800017 	ldw	r6,0(r23)
 2003468:	b9c00117 	ldw	r7,4(r23)
 200346c:	84000044 	addi	r16,r16,1
 2003470:	200bf840 	call	200bf84 <__muldf3>
 2003474:	bdc00204 	addi	r23,r23,8
 2003478:	a83ff51e 	bne	r21,zero,2003450 <__alt_mem_mem_0+0xfcfe3450>
 200347c:	1013883a 	mov	r9,r2
 2003480:	1811883a 	mov	r8,r3
 2003484:	480d883a 	mov	r6,r9
 2003488:	400f883a 	mov	r7,r8
 200348c:	8809883a 	mov	r4,r17
 2003490:	a00b883a 	mov	r5,r20
 2003494:	200b4440 	call	200b444 <__divdf3>
 2003498:	d8800f15 	stw	r2,60(sp)
 200349c:	d8c01015 	stw	r3,64(sp)
 20034a0:	d8c00e17 	ldw	r3,56(sp)
 20034a4:	18000626 	beq	r3,zero,20034c0 <_dtoa_r+0x47c>
 20034a8:	d9000f17 	ldw	r4,60(sp)
 20034ac:	d9401017 	ldw	r5,64(sp)
 20034b0:	000d883a 	mov	r6,zero
 20034b4:	01cffc34 	movhi	r7,16368
 20034b8:	200be900 	call	200be90 <__ledf2>
 20034bc:	10040b16 	blt	r2,zero,20044ec <_dtoa_r+0x14a8>
 20034c0:	8009883a 	mov	r4,r16
 20034c4:	200d0180 	call	200d018 <__floatsidf>
 20034c8:	d9800f17 	ldw	r6,60(sp)
 20034cc:	d9c01017 	ldw	r7,64(sp)
 20034d0:	1009883a 	mov	r4,r2
 20034d4:	180b883a 	mov	r5,r3
 20034d8:	200bf840 	call	200bf84 <__muldf3>
 20034dc:	000d883a 	mov	r6,zero
 20034e0:	01d00734 	movhi	r7,16412
 20034e4:	1009883a 	mov	r4,r2
 20034e8:	180b883a 	mov	r5,r3
 20034ec:	200ab980 	call	200ab98 <__adddf3>
 20034f0:	1021883a 	mov	r16,r2
 20034f4:	d8800617 	ldw	r2,24(sp)
 20034f8:	047f3034 	movhi	r17,64704
 20034fc:	1c63883a 	add	r17,r3,r17
 2003500:	10031826 	beq	r2,zero,2004164 <_dtoa_r+0x1120>
 2003504:	d8c00517 	ldw	r3,20(sp)
 2003508:	db000617 	ldw	r12,24(sp)
 200350c:	d8c01315 	stw	r3,76(sp)
 2003510:	d9000b17 	ldw	r4,44(sp)
 2003514:	20038f26 	beq	r4,zero,2004354 <_dtoa_r+0x1310>
 2003518:	60bfffc4 	addi	r2,r12,-1
 200351c:	100490fa 	slli	r2,r2,3
 2003520:	00c08134 	movhi	r3,516
 2003524:	18c3a804 	addi	r3,r3,3744
 2003528:	1885883a 	add	r2,r3,r2
 200352c:	11800017 	ldw	r6,0(r2)
 2003530:	11c00117 	ldw	r7,4(r2)
 2003534:	d8800717 	ldw	r2,28(sp)
 2003538:	0009883a 	mov	r4,zero
 200353c:	014ff834 	movhi	r5,16352
 2003540:	db001615 	stw	r12,88(sp)
 2003544:	15c00044 	addi	r23,r2,1
 2003548:	200b4440 	call	200b444 <__divdf3>
 200354c:	800d883a 	mov	r6,r16
 2003550:	880f883a 	mov	r7,r17
 2003554:	1009883a 	mov	r4,r2
 2003558:	180b883a 	mov	r5,r3
 200355c:	200c69c0 	call	200c69c <__subdf3>
 2003560:	d9401017 	ldw	r5,64(sp)
 2003564:	d9000f17 	ldw	r4,60(sp)
 2003568:	102b883a 	mov	r21,r2
 200356c:	d8c01215 	stw	r3,72(sp)
 2003570:	200cf980 	call	200cf98 <__fixdfsi>
 2003574:	1009883a 	mov	r4,r2
 2003578:	1029883a 	mov	r20,r2
 200357c:	200d0180 	call	200d018 <__floatsidf>
 2003580:	d9000f17 	ldw	r4,60(sp)
 2003584:	d9401017 	ldw	r5,64(sp)
 2003588:	100d883a 	mov	r6,r2
 200358c:	180f883a 	mov	r7,r3
 2003590:	200c69c0 	call	200c69c <__subdf3>
 2003594:	1823883a 	mov	r17,r3
 2003598:	d8c00717 	ldw	r3,28(sp)
 200359c:	d9401217 	ldw	r5,72(sp)
 20035a0:	a2000c04 	addi	r8,r20,48
 20035a4:	1021883a 	mov	r16,r2
 20035a8:	1a000005 	stb	r8,0(r3)
 20035ac:	800d883a 	mov	r6,r16
 20035b0:	880f883a 	mov	r7,r17
 20035b4:	a809883a 	mov	r4,r21
 20035b8:	4029883a 	mov	r20,r8
 20035bc:	200bdb40 	call	200bdb4 <__gedf2>
 20035c0:	00841d16 	blt	zero,r2,2004638 <_dtoa_r+0x15f4>
 20035c4:	800d883a 	mov	r6,r16
 20035c8:	880f883a 	mov	r7,r17
 20035cc:	0009883a 	mov	r4,zero
 20035d0:	014ffc34 	movhi	r5,16368
 20035d4:	200c69c0 	call	200c69c <__subdf3>
 20035d8:	d9401217 	ldw	r5,72(sp)
 20035dc:	100d883a 	mov	r6,r2
 20035e0:	180f883a 	mov	r7,r3
 20035e4:	a809883a 	mov	r4,r21
 20035e8:	200bdb40 	call	200bdb4 <__gedf2>
 20035ec:	db001617 	ldw	r12,88(sp)
 20035f0:	00840e16 	blt	zero,r2,200462c <_dtoa_r+0x15e8>
 20035f4:	00800044 	movi	r2,1
 20035f8:	13006b0e 	bge	r2,r12,20037a8 <_dtoa_r+0x764>
 20035fc:	d9000717 	ldw	r4,28(sp)
 2003600:	dd800f15 	stw	r22,60(sp)
 2003604:	dcc01015 	stw	r19,64(sp)
 2003608:	2319883a 	add	r12,r4,r12
 200360c:	dcc01217 	ldw	r19,72(sp)
 2003610:	602d883a 	mov	r22,r12
 2003614:	dc801215 	stw	r18,72(sp)
 2003618:	b825883a 	mov	r18,r23
 200361c:	00000906 	br	2003644 <_dtoa_r+0x600>
 2003620:	200c69c0 	call	200c69c <__subdf3>
 2003624:	a80d883a 	mov	r6,r21
 2003628:	980f883a 	mov	r7,r19
 200362c:	1009883a 	mov	r4,r2
 2003630:	180b883a 	mov	r5,r3
 2003634:	200be900 	call	200be90 <__ledf2>
 2003638:	1003e816 	blt	r2,zero,20045dc <_dtoa_r+0x1598>
 200363c:	b825883a 	mov	r18,r23
 2003640:	bd83e926 	beq	r23,r22,20045e8 <_dtoa_r+0x15a4>
 2003644:	a809883a 	mov	r4,r21
 2003648:	980b883a 	mov	r5,r19
 200364c:	000d883a 	mov	r6,zero
 2003650:	01d00934 	movhi	r7,16420
 2003654:	200bf840 	call	200bf84 <__muldf3>
 2003658:	000d883a 	mov	r6,zero
 200365c:	01d00934 	movhi	r7,16420
 2003660:	8009883a 	mov	r4,r16
 2003664:	880b883a 	mov	r5,r17
 2003668:	102b883a 	mov	r21,r2
 200366c:	1827883a 	mov	r19,r3
 2003670:	200bf840 	call	200bf84 <__muldf3>
 2003674:	180b883a 	mov	r5,r3
 2003678:	1009883a 	mov	r4,r2
 200367c:	1821883a 	mov	r16,r3
 2003680:	1023883a 	mov	r17,r2
 2003684:	200cf980 	call	200cf98 <__fixdfsi>
 2003688:	1009883a 	mov	r4,r2
 200368c:	1029883a 	mov	r20,r2
 2003690:	200d0180 	call	200d018 <__floatsidf>
 2003694:	8809883a 	mov	r4,r17
 2003698:	800b883a 	mov	r5,r16
 200369c:	100d883a 	mov	r6,r2
 20036a0:	180f883a 	mov	r7,r3
 20036a4:	200c69c0 	call	200c69c <__subdf3>
 20036a8:	a5000c04 	addi	r20,r20,48
 20036ac:	a80d883a 	mov	r6,r21
 20036b0:	980f883a 	mov	r7,r19
 20036b4:	1009883a 	mov	r4,r2
 20036b8:	180b883a 	mov	r5,r3
 20036bc:	95000005 	stb	r20,0(r18)
 20036c0:	1021883a 	mov	r16,r2
 20036c4:	1823883a 	mov	r17,r3
 20036c8:	200be900 	call	200be90 <__ledf2>
 20036cc:	bdc00044 	addi	r23,r23,1
 20036d0:	800d883a 	mov	r6,r16
 20036d4:	880f883a 	mov	r7,r17
 20036d8:	0009883a 	mov	r4,zero
 20036dc:	014ffc34 	movhi	r5,16368
 20036e0:	103fcf0e 	bge	r2,zero,2003620 <__alt_mem_mem_0+0xfcfe3620>
 20036e4:	d8c01317 	ldw	r3,76(sp)
 20036e8:	d8c00515 	stw	r3,20(sp)
 20036ec:	d9400917 	ldw	r5,36(sp)
 20036f0:	e009883a 	mov	r4,fp
 20036f4:	20061700 	call	2006170 <_Bfree>
 20036f8:	d9000517 	ldw	r4,20(sp)
 20036fc:	d9802317 	ldw	r6,140(sp)
 2003700:	d9c02517 	ldw	r7,148(sp)
 2003704:	b8000005 	stb	zero,0(r23)
 2003708:	20800044 	addi	r2,r4,1
 200370c:	30800015 	stw	r2,0(r6)
 2003710:	3802aa26 	beq	r7,zero,20041bc <_dtoa_r+0x1178>
 2003714:	3dc00015 	stw	r23,0(r7)
 2003718:	d8800717 	ldw	r2,28(sp)
 200371c:	003e7906 	br	2003104 <__alt_mem_mem_0+0xfcfe3104>
 2003720:	00800434 	movhi	r2,16
 2003724:	10bfffc4 	addi	r2,r2,-1
 2003728:	88a2703a 	and	r17,r17,r2
 200372c:	883e851e 	bne	r17,zero,2003144 <__alt_mem_mem_0+0xfcfe3144>
 2003730:	00808134 	movhi	r2,516
 2003734:	10838904 	addi	r2,r2,3620
 2003738:	003e8406 	br	200314c <__alt_mem_mem_0+0xfcfe314c>
 200373c:	10c00204 	addi	r3,r2,8
 2003740:	003e8706 	br	2003160 <__alt_mem_mem_0+0xfcfe3160>
 2003744:	01400434 	movhi	r5,16
 2003748:	297fffc4 	addi	r5,r5,-1
 200374c:	994a703a 	and	r5,r19,r5
 2003750:	9009883a 	mov	r4,r18
 2003754:	843f0044 	addi	r16,r16,-1023
 2003758:	294ffc34 	orhi	r5,r5,16368
 200375c:	dd800217 	ldw	r22,8(sp)
 2003760:	d8001115 	stw	zero,68(sp)
 2003764:	003ea506 	br	20031fc <__alt_mem_mem_0+0xfcfe31fc>
 2003768:	00808134 	movhi	r2,516
 200376c:	10838004 	addi	r2,r2,3584
 2003770:	003e6406 	br	2003104 <__alt_mem_mem_0+0xfcfe3104>
 2003774:	e0001115 	stw	zero,68(fp)
 2003778:	000b883a 	mov	r5,zero
 200377c:	e009883a 	mov	r4,fp
 2003780:	20060c80 	call	20060c8 <_Balloc>
 2003784:	01bfffc4 	movi	r6,-1
 2003788:	01c00044 	movi	r7,1
 200378c:	d8800715 	stw	r2,28(sp)
 2003790:	d9800c15 	stw	r6,48(sp)
 2003794:	e0801015 	stw	r2,64(fp)
 2003798:	d8000315 	stw	zero,12(sp)
 200379c:	d9c00b15 	stw	r7,44(sp)
 20037a0:	d9800615 	stw	r6,24(sp)
 20037a4:	d8002215 	stw	zero,136(sp)
 20037a8:	d8800117 	ldw	r2,4(sp)
 20037ac:	10008916 	blt	r2,zero,20039d4 <_dtoa_r+0x990>
 20037b0:	d9000517 	ldw	r4,20(sp)
 20037b4:	00c00384 	movi	r3,14
 20037b8:	19008616 	blt	r3,r4,20039d4 <_dtoa_r+0x990>
 20037bc:	200490fa 	slli	r2,r4,3
 20037c0:	00c08134 	movhi	r3,516
 20037c4:	d9802217 	ldw	r6,136(sp)
 20037c8:	18c3a804 	addi	r3,r3,3744
 20037cc:	1885883a 	add	r2,r3,r2
 20037d0:	14000017 	ldw	r16,0(r2)
 20037d4:	14400117 	ldw	r17,4(r2)
 20037d8:	30016316 	blt	r6,zero,2003d68 <_dtoa_r+0xd24>
 20037dc:	800d883a 	mov	r6,r16
 20037e0:	880f883a 	mov	r7,r17
 20037e4:	9009883a 	mov	r4,r18
 20037e8:	980b883a 	mov	r5,r19
 20037ec:	200b4440 	call	200b444 <__divdf3>
 20037f0:	180b883a 	mov	r5,r3
 20037f4:	1009883a 	mov	r4,r2
 20037f8:	200cf980 	call	200cf98 <__fixdfsi>
 20037fc:	1009883a 	mov	r4,r2
 2003800:	102b883a 	mov	r21,r2
 2003804:	200d0180 	call	200d018 <__floatsidf>
 2003808:	800d883a 	mov	r6,r16
 200380c:	880f883a 	mov	r7,r17
 2003810:	1009883a 	mov	r4,r2
 2003814:	180b883a 	mov	r5,r3
 2003818:	200bf840 	call	200bf84 <__muldf3>
 200381c:	100d883a 	mov	r6,r2
 2003820:	180f883a 	mov	r7,r3
 2003824:	9009883a 	mov	r4,r18
 2003828:	980b883a 	mov	r5,r19
 200382c:	200c69c0 	call	200c69c <__subdf3>
 2003830:	d9c00717 	ldw	r7,28(sp)
 2003834:	1009883a 	mov	r4,r2
 2003838:	a8800c04 	addi	r2,r21,48
 200383c:	38800005 	stb	r2,0(r7)
 2003840:	3dc00044 	addi	r23,r7,1
 2003844:	d9c00617 	ldw	r7,24(sp)
 2003848:	01800044 	movi	r6,1
 200384c:	180b883a 	mov	r5,r3
 2003850:	2005883a 	mov	r2,r4
 2003854:	39803826 	beq	r7,r6,2003938 <_dtoa_r+0x8f4>
 2003858:	000d883a 	mov	r6,zero
 200385c:	01d00934 	movhi	r7,16420
 2003860:	200bf840 	call	200bf84 <__muldf3>
 2003864:	000d883a 	mov	r6,zero
 2003868:	000f883a 	mov	r7,zero
 200386c:	1009883a 	mov	r4,r2
 2003870:	180b883a 	mov	r5,r3
 2003874:	1025883a 	mov	r18,r2
 2003878:	1827883a 	mov	r19,r3
 200387c:	200bd2c0 	call	200bd2c <__eqdf2>
 2003880:	103f9a26 	beq	r2,zero,20036ec <__alt_mem_mem_0+0xfcfe36ec>
 2003884:	d9c00617 	ldw	r7,24(sp)
 2003888:	d8c00717 	ldw	r3,28(sp)
 200388c:	b829883a 	mov	r20,r23
 2003890:	38bfffc4 	addi	r2,r7,-1
 2003894:	18ad883a 	add	r22,r3,r2
 2003898:	00000a06 	br	20038c4 <_dtoa_r+0x880>
 200389c:	200bf840 	call	200bf84 <__muldf3>
 20038a0:	000d883a 	mov	r6,zero
 20038a4:	000f883a 	mov	r7,zero
 20038a8:	1009883a 	mov	r4,r2
 20038ac:	180b883a 	mov	r5,r3
 20038b0:	1025883a 	mov	r18,r2
 20038b4:	1827883a 	mov	r19,r3
 20038b8:	b829883a 	mov	r20,r23
 20038bc:	200bd2c0 	call	200bd2c <__eqdf2>
 20038c0:	103f8a26 	beq	r2,zero,20036ec <__alt_mem_mem_0+0xfcfe36ec>
 20038c4:	800d883a 	mov	r6,r16
 20038c8:	880f883a 	mov	r7,r17
 20038cc:	9009883a 	mov	r4,r18
 20038d0:	980b883a 	mov	r5,r19
 20038d4:	200b4440 	call	200b444 <__divdf3>
 20038d8:	180b883a 	mov	r5,r3
 20038dc:	1009883a 	mov	r4,r2
 20038e0:	200cf980 	call	200cf98 <__fixdfsi>
 20038e4:	1009883a 	mov	r4,r2
 20038e8:	102b883a 	mov	r21,r2
 20038ec:	200d0180 	call	200d018 <__floatsidf>
 20038f0:	800d883a 	mov	r6,r16
 20038f4:	880f883a 	mov	r7,r17
 20038f8:	1009883a 	mov	r4,r2
 20038fc:	180b883a 	mov	r5,r3
 2003900:	200bf840 	call	200bf84 <__muldf3>
 2003904:	100d883a 	mov	r6,r2
 2003908:	180f883a 	mov	r7,r3
 200390c:	9009883a 	mov	r4,r18
 2003910:	980b883a 	mov	r5,r19
 2003914:	200c69c0 	call	200c69c <__subdf3>
 2003918:	aa000c04 	addi	r8,r21,48
 200391c:	a2000005 	stb	r8,0(r20)
 2003920:	000d883a 	mov	r6,zero
 2003924:	01d00934 	movhi	r7,16420
 2003928:	1009883a 	mov	r4,r2
 200392c:	180b883a 	mov	r5,r3
 2003930:	a5c00044 	addi	r23,r20,1
 2003934:	b53fd91e 	bne	r22,r20,200389c <__alt_mem_mem_0+0xfcfe389c>
 2003938:	100d883a 	mov	r6,r2
 200393c:	180f883a 	mov	r7,r3
 2003940:	1009883a 	mov	r4,r2
 2003944:	180b883a 	mov	r5,r3
 2003948:	200ab980 	call	200ab98 <__adddf3>
 200394c:	100d883a 	mov	r6,r2
 2003950:	180f883a 	mov	r7,r3
 2003954:	8009883a 	mov	r4,r16
 2003958:	880b883a 	mov	r5,r17
 200395c:	1027883a 	mov	r19,r2
 2003960:	1825883a 	mov	r18,r3
 2003964:	200be900 	call	200be90 <__ledf2>
 2003968:	10000816 	blt	r2,zero,200398c <_dtoa_r+0x948>
 200396c:	980d883a 	mov	r6,r19
 2003970:	900f883a 	mov	r7,r18
 2003974:	8009883a 	mov	r4,r16
 2003978:	880b883a 	mov	r5,r17
 200397c:	200bd2c0 	call	200bd2c <__eqdf2>
 2003980:	103f5a1e 	bne	r2,zero,20036ec <__alt_mem_mem_0+0xfcfe36ec>
 2003984:	ad40004c 	andi	r21,r21,1
 2003988:	a83f5826 	beq	r21,zero,20036ec <__alt_mem_mem_0+0xfcfe36ec>
 200398c:	bd3fffc3 	ldbu	r20,-1(r23)
 2003990:	b8bfffc4 	addi	r2,r23,-1
 2003994:	1007883a 	mov	r3,r2
 2003998:	01400e44 	movi	r5,57
 200399c:	d9800717 	ldw	r6,28(sp)
 20039a0:	00000506 	br	20039b8 <_dtoa_r+0x974>
 20039a4:	18ffffc4 	addi	r3,r3,-1
 20039a8:	11824726 	beq	r2,r6,20042c8 <_dtoa_r+0x1284>
 20039ac:	1d000003 	ldbu	r20,0(r3)
 20039b0:	102f883a 	mov	r23,r2
 20039b4:	10bfffc4 	addi	r2,r2,-1
 20039b8:	a1003fcc 	andi	r4,r20,255
 20039bc:	2100201c 	xori	r4,r4,128
 20039c0:	213fe004 	addi	r4,r4,-128
 20039c4:	217ff726 	beq	r4,r5,20039a4 <__alt_mem_mem_0+0xfcfe39a4>
 20039c8:	a2000044 	addi	r8,r20,1
 20039cc:	12000005 	stb	r8,0(r2)
 20039d0:	003f4606 	br	20036ec <__alt_mem_mem_0+0xfcfe36ec>
 20039d4:	d9000b17 	ldw	r4,44(sp)
 20039d8:	2000c826 	beq	r4,zero,2003cfc <_dtoa_r+0xcb8>
 20039dc:	d9800317 	ldw	r6,12(sp)
 20039e0:	00c00044 	movi	r3,1
 20039e4:	1980f90e 	bge	r3,r6,2003dcc <_dtoa_r+0xd88>
 20039e8:	d8800617 	ldw	r2,24(sp)
 20039ec:	d8c00a17 	ldw	r3,40(sp)
 20039f0:	157fffc4 	addi	r21,r2,-1
 20039f4:	1d41f316 	blt	r3,r21,20041c4 <_dtoa_r+0x1180>
 20039f8:	1d6bc83a 	sub	r21,r3,r21
 20039fc:	d9c00617 	ldw	r7,24(sp)
 2003a00:	3802aa16 	blt	r7,zero,20044ac <_dtoa_r+0x1468>
 2003a04:	dd000817 	ldw	r20,32(sp)
 2003a08:	d8800617 	ldw	r2,24(sp)
 2003a0c:	d8c00817 	ldw	r3,32(sp)
 2003a10:	01400044 	movi	r5,1
 2003a14:	e009883a 	mov	r4,fp
 2003a18:	1887883a 	add	r3,r3,r2
 2003a1c:	d8c00815 	stw	r3,32(sp)
 2003a20:	b0ad883a 	add	r22,r22,r2
 2003a24:	20064d40 	call	20064d4 <__i2b>
 2003a28:	1023883a 	mov	r17,r2
 2003a2c:	a0000826 	beq	r20,zero,2003a50 <_dtoa_r+0xa0c>
 2003a30:	0580070e 	bge	zero,r22,2003a50 <_dtoa_r+0xa0c>
 2003a34:	a005883a 	mov	r2,r20
 2003a38:	b500b916 	blt	r22,r20,2003d20 <_dtoa_r+0xcdc>
 2003a3c:	d9000817 	ldw	r4,32(sp)
 2003a40:	a0a9c83a 	sub	r20,r20,r2
 2003a44:	b0adc83a 	sub	r22,r22,r2
 2003a48:	2089c83a 	sub	r4,r4,r2
 2003a4c:	d9000815 	stw	r4,32(sp)
 2003a50:	d9800a17 	ldw	r6,40(sp)
 2003a54:	0181810e 	bge	zero,r6,200405c <_dtoa_r+0x1018>
 2003a58:	d9c00b17 	ldw	r7,44(sp)
 2003a5c:	3800b326 	beq	r7,zero,2003d2c <_dtoa_r+0xce8>
 2003a60:	a800b226 	beq	r21,zero,2003d2c <_dtoa_r+0xce8>
 2003a64:	880b883a 	mov	r5,r17
 2003a68:	a80d883a 	mov	r6,r21
 2003a6c:	e009883a 	mov	r4,fp
 2003a70:	20067080 	call	2006708 <__pow5mult>
 2003a74:	d9800917 	ldw	r6,36(sp)
 2003a78:	100b883a 	mov	r5,r2
 2003a7c:	e009883a 	mov	r4,fp
 2003a80:	1023883a 	mov	r17,r2
 2003a84:	20065100 	call	2006510 <__multiply>
 2003a88:	1021883a 	mov	r16,r2
 2003a8c:	d8800a17 	ldw	r2,40(sp)
 2003a90:	d9400917 	ldw	r5,36(sp)
 2003a94:	e009883a 	mov	r4,fp
 2003a98:	1545c83a 	sub	r2,r2,r21
 2003a9c:	d8800a15 	stw	r2,40(sp)
 2003aa0:	20061700 	call	2006170 <_Bfree>
 2003aa4:	d8c00a17 	ldw	r3,40(sp)
 2003aa8:	18009f1e 	bne	r3,zero,2003d28 <_dtoa_r+0xce4>
 2003aac:	05c00044 	movi	r23,1
 2003ab0:	e009883a 	mov	r4,fp
 2003ab4:	b80b883a 	mov	r5,r23
 2003ab8:	20064d40 	call	20064d4 <__i2b>
 2003abc:	d9000d17 	ldw	r4,52(sp)
 2003ac0:	102b883a 	mov	r21,r2
 2003ac4:	2000ce26 	beq	r4,zero,2003e00 <_dtoa_r+0xdbc>
 2003ac8:	200d883a 	mov	r6,r4
 2003acc:	100b883a 	mov	r5,r2
 2003ad0:	e009883a 	mov	r4,fp
 2003ad4:	20067080 	call	2006708 <__pow5mult>
 2003ad8:	d9800317 	ldw	r6,12(sp)
 2003adc:	102b883a 	mov	r21,r2
 2003ae0:	b981810e 	bge	r23,r6,20040e8 <_dtoa_r+0x10a4>
 2003ae4:	0027883a 	mov	r19,zero
 2003ae8:	a8800417 	ldw	r2,16(r21)
 2003aec:	05c00804 	movi	r23,32
 2003af0:	10800104 	addi	r2,r2,4
 2003af4:	1085883a 	add	r2,r2,r2
 2003af8:	1085883a 	add	r2,r2,r2
 2003afc:	a885883a 	add	r2,r21,r2
 2003b00:	11000017 	ldw	r4,0(r2)
 2003b04:	20063bc0 	call	20063bc <__hi0bits>
 2003b08:	b885c83a 	sub	r2,r23,r2
 2003b0c:	1585883a 	add	r2,r2,r22
 2003b10:	108007cc 	andi	r2,r2,31
 2003b14:	1000b326 	beq	r2,zero,2003de4 <_dtoa_r+0xda0>
 2003b18:	00c00804 	movi	r3,32
 2003b1c:	1887c83a 	sub	r3,r3,r2
 2003b20:	01000104 	movi	r4,4
 2003b24:	20c2cd0e 	bge	r4,r3,200465c <_dtoa_r+0x1618>
 2003b28:	00c00704 	movi	r3,28
 2003b2c:	1885c83a 	sub	r2,r3,r2
 2003b30:	d8c00817 	ldw	r3,32(sp)
 2003b34:	a0a9883a 	add	r20,r20,r2
 2003b38:	b0ad883a 	add	r22,r22,r2
 2003b3c:	1887883a 	add	r3,r3,r2
 2003b40:	d8c00815 	stw	r3,32(sp)
 2003b44:	d9800817 	ldw	r6,32(sp)
 2003b48:	0180040e 	bge	zero,r6,2003b5c <_dtoa_r+0xb18>
 2003b4c:	800b883a 	mov	r5,r16
 2003b50:	e009883a 	mov	r4,fp
 2003b54:	20068480 	call	2006848 <__lshift>
 2003b58:	1021883a 	mov	r16,r2
 2003b5c:	0580050e 	bge	zero,r22,2003b74 <_dtoa_r+0xb30>
 2003b60:	a80b883a 	mov	r5,r21
 2003b64:	b00d883a 	mov	r6,r22
 2003b68:	e009883a 	mov	r4,fp
 2003b6c:	20068480 	call	2006848 <__lshift>
 2003b70:	102b883a 	mov	r21,r2
 2003b74:	d9c00e17 	ldw	r7,56(sp)
 2003b78:	3801211e 	bne	r7,zero,2004000 <_dtoa_r+0xfbc>
 2003b7c:	d9800617 	ldw	r6,24(sp)
 2003b80:	0181380e 	bge	zero,r6,2004064 <_dtoa_r+0x1020>
 2003b84:	d8c00b17 	ldw	r3,44(sp)
 2003b88:	1800ab1e 	bne	r3,zero,2003e38 <_dtoa_r+0xdf4>
 2003b8c:	dc800717 	ldw	r18,28(sp)
 2003b90:	dcc00617 	ldw	r19,24(sp)
 2003b94:	9029883a 	mov	r20,r18
 2003b98:	00000206 	br	2003ba4 <_dtoa_r+0xb60>
 2003b9c:	20061980 	call	2006198 <__multadd>
 2003ba0:	1021883a 	mov	r16,r2
 2003ba4:	a80b883a 	mov	r5,r21
 2003ba8:	8009883a 	mov	r4,r16
 2003bac:	2002e440 	call	2002e44 <quorem>
 2003bb0:	10800c04 	addi	r2,r2,48
 2003bb4:	90800005 	stb	r2,0(r18)
 2003bb8:	94800044 	addi	r18,r18,1
 2003bbc:	9507c83a 	sub	r3,r18,r20
 2003bc0:	000f883a 	mov	r7,zero
 2003bc4:	01800284 	movi	r6,10
 2003bc8:	800b883a 	mov	r5,r16
 2003bcc:	e009883a 	mov	r4,fp
 2003bd0:	1cfff216 	blt	r3,r19,2003b9c <__alt_mem_mem_0+0xfcfe3b9c>
 2003bd4:	1011883a 	mov	r8,r2
 2003bd8:	d8800617 	ldw	r2,24(sp)
 2003bdc:	0082370e 	bge	zero,r2,20044bc <_dtoa_r+0x1478>
 2003be0:	d9000717 	ldw	r4,28(sp)
 2003be4:	0025883a 	mov	r18,zero
 2003be8:	20af883a 	add	r23,r4,r2
 2003bec:	01800044 	movi	r6,1
 2003bf0:	800b883a 	mov	r5,r16
 2003bf4:	e009883a 	mov	r4,fp
 2003bf8:	da001715 	stw	r8,92(sp)
 2003bfc:	20068480 	call	2006848 <__lshift>
 2003c00:	a80b883a 	mov	r5,r21
 2003c04:	1009883a 	mov	r4,r2
 2003c08:	d8800915 	stw	r2,36(sp)
 2003c0c:	20069900 	call	2006990 <__mcmp>
 2003c10:	da001717 	ldw	r8,92(sp)
 2003c14:	0081800e 	bge	zero,r2,2004218 <_dtoa_r+0x11d4>
 2003c18:	b93fffc3 	ldbu	r4,-1(r23)
 2003c1c:	b8bfffc4 	addi	r2,r23,-1
 2003c20:	1007883a 	mov	r3,r2
 2003c24:	01800e44 	movi	r6,57
 2003c28:	d9c00717 	ldw	r7,28(sp)
 2003c2c:	00000506 	br	2003c44 <_dtoa_r+0xc00>
 2003c30:	18ffffc4 	addi	r3,r3,-1
 2003c34:	11c12326 	beq	r2,r7,20040c4 <_dtoa_r+0x1080>
 2003c38:	19000003 	ldbu	r4,0(r3)
 2003c3c:	102f883a 	mov	r23,r2
 2003c40:	10bfffc4 	addi	r2,r2,-1
 2003c44:	21403fcc 	andi	r5,r4,255
 2003c48:	2940201c 	xori	r5,r5,128
 2003c4c:	297fe004 	addi	r5,r5,-128
 2003c50:	29bff726 	beq	r5,r6,2003c30 <__alt_mem_mem_0+0xfcfe3c30>
 2003c54:	21000044 	addi	r4,r4,1
 2003c58:	11000005 	stb	r4,0(r2)
 2003c5c:	a80b883a 	mov	r5,r21
 2003c60:	e009883a 	mov	r4,fp
 2003c64:	20061700 	call	2006170 <_Bfree>
 2003c68:	883ea026 	beq	r17,zero,20036ec <__alt_mem_mem_0+0xfcfe36ec>
 2003c6c:	90000426 	beq	r18,zero,2003c80 <_dtoa_r+0xc3c>
 2003c70:	94400326 	beq	r18,r17,2003c80 <_dtoa_r+0xc3c>
 2003c74:	900b883a 	mov	r5,r18
 2003c78:	e009883a 	mov	r4,fp
 2003c7c:	20061700 	call	2006170 <_Bfree>
 2003c80:	880b883a 	mov	r5,r17
 2003c84:	e009883a 	mov	r4,fp
 2003c88:	20061700 	call	2006170 <_Bfree>
 2003c8c:	003e9706 	br	20036ec <__alt_mem_mem_0+0xfcfe36ec>
 2003c90:	01800044 	movi	r6,1
 2003c94:	d9800e15 	stw	r6,56(sp)
 2003c98:	003d9606 	br	20032f4 <__alt_mem_mem_0+0xfcfe32f4>
 2003c9c:	d8800817 	ldw	r2,32(sp)
 2003ca0:	d8c00517 	ldw	r3,20(sp)
 2003ca4:	d8000d15 	stw	zero,52(sp)
 2003ca8:	10c5c83a 	sub	r2,r2,r3
 2003cac:	00c9c83a 	sub	r4,zero,r3
 2003cb0:	d8800815 	stw	r2,32(sp)
 2003cb4:	d9000a15 	stw	r4,40(sp)
 2003cb8:	003d9706 	br	2003318 <__alt_mem_mem_0+0xfcfe3318>
 2003cbc:	05adc83a 	sub	r22,zero,r22
 2003cc0:	dd800815 	stw	r22,32(sp)
 2003cc4:	002d883a 	mov	r22,zero
 2003cc8:	003d8e06 	br	2003304 <__alt_mem_mem_0+0xfcfe3304>
 2003ccc:	d9000517 	ldw	r4,20(sp)
 2003cd0:	200d0180 	call	200d018 <__floatsidf>
 2003cd4:	100d883a 	mov	r6,r2
 2003cd8:	180f883a 	mov	r7,r3
 2003cdc:	a009883a 	mov	r4,r20
 2003ce0:	880b883a 	mov	r5,r17
 2003ce4:	200bd2c0 	call	200bd2c <__eqdf2>
 2003ce8:	103d7126 	beq	r2,zero,20032b0 <__alt_mem_mem_0+0xfcfe32b0>
 2003cec:	d9c00517 	ldw	r7,20(sp)
 2003cf0:	39ffffc4 	addi	r7,r7,-1
 2003cf4:	d9c00515 	stw	r7,20(sp)
 2003cf8:	003d6d06 	br	20032b0 <__alt_mem_mem_0+0xfcfe32b0>
 2003cfc:	dd400a17 	ldw	r21,40(sp)
 2003d00:	dd000817 	ldw	r20,32(sp)
 2003d04:	0023883a 	mov	r17,zero
 2003d08:	003f4806 	br	2003a2c <__alt_mem_mem_0+0xfcfe3a2c>
 2003d0c:	10e3c83a 	sub	r17,r2,r3
 2003d10:	9448983a 	sll	r4,r18,r17
 2003d14:	003d3206 	br	20031e0 <__alt_mem_mem_0+0xfcfe31e0>
 2003d18:	d8000e15 	stw	zero,56(sp)
 2003d1c:	003d7506 	br	20032f4 <__alt_mem_mem_0+0xfcfe32f4>
 2003d20:	b005883a 	mov	r2,r22
 2003d24:	003f4506 	br	2003a3c <__alt_mem_mem_0+0xfcfe3a3c>
 2003d28:	dc000915 	stw	r16,36(sp)
 2003d2c:	d9800a17 	ldw	r6,40(sp)
 2003d30:	d9400917 	ldw	r5,36(sp)
 2003d34:	e009883a 	mov	r4,fp
 2003d38:	20067080 	call	2006708 <__pow5mult>
 2003d3c:	1021883a 	mov	r16,r2
 2003d40:	003f5a06 	br	2003aac <__alt_mem_mem_0+0xfcfe3aac>
 2003d44:	01c00044 	movi	r7,1
 2003d48:	d9c00b15 	stw	r7,44(sp)
 2003d4c:	d8802217 	ldw	r2,136(sp)
 2003d50:	0081280e 	bge	zero,r2,20041f4 <_dtoa_r+0x11b0>
 2003d54:	100d883a 	mov	r6,r2
 2003d58:	1021883a 	mov	r16,r2
 2003d5c:	d8800c15 	stw	r2,48(sp)
 2003d60:	d8800615 	stw	r2,24(sp)
 2003d64:	003d8806 	br	2003388 <__alt_mem_mem_0+0xfcfe3388>
 2003d68:	d8800617 	ldw	r2,24(sp)
 2003d6c:	00be9b16 	blt	zero,r2,20037dc <__alt_mem_mem_0+0xfcfe37dc>
 2003d70:	10010f1e 	bne	r2,zero,20041b0 <_dtoa_r+0x116c>
 2003d74:	880b883a 	mov	r5,r17
 2003d78:	000d883a 	mov	r6,zero
 2003d7c:	01d00534 	movhi	r7,16404
 2003d80:	8009883a 	mov	r4,r16
 2003d84:	200bf840 	call	200bf84 <__muldf3>
 2003d88:	900d883a 	mov	r6,r18
 2003d8c:	980f883a 	mov	r7,r19
 2003d90:	1009883a 	mov	r4,r2
 2003d94:	180b883a 	mov	r5,r3
 2003d98:	200bdb40 	call	200bdb4 <__gedf2>
 2003d9c:	002b883a 	mov	r21,zero
 2003da0:	0023883a 	mov	r17,zero
 2003da4:	1000bf16 	blt	r2,zero,20040a4 <_dtoa_r+0x1060>
 2003da8:	d9802217 	ldw	r6,136(sp)
 2003dac:	ddc00717 	ldw	r23,28(sp)
 2003db0:	018c303a 	nor	r6,zero,r6
 2003db4:	d9800515 	stw	r6,20(sp)
 2003db8:	a80b883a 	mov	r5,r21
 2003dbc:	e009883a 	mov	r4,fp
 2003dc0:	20061700 	call	2006170 <_Bfree>
 2003dc4:	883e4926 	beq	r17,zero,20036ec <__alt_mem_mem_0+0xfcfe36ec>
 2003dc8:	003fad06 	br	2003c80 <__alt_mem_mem_0+0xfcfe3c80>
 2003dcc:	d9c01117 	ldw	r7,68(sp)
 2003dd0:	3801bc26 	beq	r7,zero,20044c4 <_dtoa_r+0x1480>
 2003dd4:	10810cc4 	addi	r2,r2,1075
 2003dd8:	dd400a17 	ldw	r21,40(sp)
 2003ddc:	dd000817 	ldw	r20,32(sp)
 2003de0:	003f0a06 	br	2003a0c <__alt_mem_mem_0+0xfcfe3a0c>
 2003de4:	00800704 	movi	r2,28
 2003de8:	d9000817 	ldw	r4,32(sp)
 2003dec:	a0a9883a 	add	r20,r20,r2
 2003df0:	b0ad883a 	add	r22,r22,r2
 2003df4:	2089883a 	add	r4,r4,r2
 2003df8:	d9000815 	stw	r4,32(sp)
 2003dfc:	003f5106 	br	2003b44 <__alt_mem_mem_0+0xfcfe3b44>
 2003e00:	d8c00317 	ldw	r3,12(sp)
 2003e04:	b8c1fc0e 	bge	r23,r3,20045f8 <_dtoa_r+0x15b4>
 2003e08:	0027883a 	mov	r19,zero
 2003e0c:	b805883a 	mov	r2,r23
 2003e10:	003f3e06 	br	2003b0c <__alt_mem_mem_0+0xfcfe3b0c>
 2003e14:	880b883a 	mov	r5,r17
 2003e18:	e009883a 	mov	r4,fp
 2003e1c:	000f883a 	mov	r7,zero
 2003e20:	01800284 	movi	r6,10
 2003e24:	20061980 	call	2006198 <__multadd>
 2003e28:	d9000c17 	ldw	r4,48(sp)
 2003e2c:	1023883a 	mov	r17,r2
 2003e30:	0102040e 	bge	zero,r4,2004644 <_dtoa_r+0x1600>
 2003e34:	d9000615 	stw	r4,24(sp)
 2003e38:	0500050e 	bge	zero,r20,2003e50 <_dtoa_r+0xe0c>
 2003e3c:	880b883a 	mov	r5,r17
 2003e40:	a00d883a 	mov	r6,r20
 2003e44:	e009883a 	mov	r4,fp
 2003e48:	20068480 	call	2006848 <__lshift>
 2003e4c:	1023883a 	mov	r17,r2
 2003e50:	9801241e 	bne	r19,zero,20042e4 <_dtoa_r+0x12a0>
 2003e54:	8829883a 	mov	r20,r17
 2003e58:	d9000617 	ldw	r4,24(sp)
 2003e5c:	dcc00717 	ldw	r19,28(sp)
 2003e60:	9480004c 	andi	r18,r18,1
 2003e64:	20bfffc4 	addi	r2,r4,-1
 2003e68:	9885883a 	add	r2,r19,r2
 2003e6c:	d8800415 	stw	r2,16(sp)
 2003e70:	dc800615 	stw	r18,24(sp)
 2003e74:	a80b883a 	mov	r5,r21
 2003e78:	8009883a 	mov	r4,r16
 2003e7c:	2002e440 	call	2002e44 <quorem>
 2003e80:	880b883a 	mov	r5,r17
 2003e84:	8009883a 	mov	r4,r16
 2003e88:	102f883a 	mov	r23,r2
 2003e8c:	20069900 	call	2006990 <__mcmp>
 2003e90:	a80b883a 	mov	r5,r21
 2003e94:	a00d883a 	mov	r6,r20
 2003e98:	e009883a 	mov	r4,fp
 2003e9c:	102d883a 	mov	r22,r2
 2003ea0:	20069f00 	call	20069f0 <__mdiff>
 2003ea4:	1007883a 	mov	r3,r2
 2003ea8:	10800317 	ldw	r2,12(r2)
 2003eac:	bc800c04 	addi	r18,r23,48
 2003eb0:	180b883a 	mov	r5,r3
 2003eb4:	10004e1e 	bne	r2,zero,2003ff0 <_dtoa_r+0xfac>
 2003eb8:	8009883a 	mov	r4,r16
 2003ebc:	d8c01615 	stw	r3,88(sp)
 2003ec0:	20069900 	call	2006990 <__mcmp>
 2003ec4:	d8c01617 	ldw	r3,88(sp)
 2003ec8:	e009883a 	mov	r4,fp
 2003ecc:	d8801615 	stw	r2,88(sp)
 2003ed0:	180b883a 	mov	r5,r3
 2003ed4:	20061700 	call	2006170 <_Bfree>
 2003ed8:	d8801617 	ldw	r2,88(sp)
 2003edc:	1000041e 	bne	r2,zero,2003ef0 <_dtoa_r+0xeac>
 2003ee0:	d9800317 	ldw	r6,12(sp)
 2003ee4:	3000021e 	bne	r6,zero,2003ef0 <_dtoa_r+0xeac>
 2003ee8:	d8c00617 	ldw	r3,24(sp)
 2003eec:	18003726 	beq	r3,zero,2003fcc <_dtoa_r+0xf88>
 2003ef0:	b0002016 	blt	r22,zero,2003f74 <_dtoa_r+0xf30>
 2003ef4:	b000041e 	bne	r22,zero,2003f08 <_dtoa_r+0xec4>
 2003ef8:	d9000317 	ldw	r4,12(sp)
 2003efc:	2000021e 	bne	r4,zero,2003f08 <_dtoa_r+0xec4>
 2003f00:	d8c00617 	ldw	r3,24(sp)
 2003f04:	18001b26 	beq	r3,zero,2003f74 <_dtoa_r+0xf30>
 2003f08:	00810716 	blt	zero,r2,2004328 <_dtoa_r+0x12e4>
 2003f0c:	d8c00417 	ldw	r3,16(sp)
 2003f10:	9d800044 	addi	r22,r19,1
 2003f14:	9c800005 	stb	r18,0(r19)
 2003f18:	b02f883a 	mov	r23,r22
 2003f1c:	98c10626 	beq	r19,r3,2004338 <_dtoa_r+0x12f4>
 2003f20:	800b883a 	mov	r5,r16
 2003f24:	000f883a 	mov	r7,zero
 2003f28:	01800284 	movi	r6,10
 2003f2c:	e009883a 	mov	r4,fp
 2003f30:	20061980 	call	2006198 <__multadd>
 2003f34:	1021883a 	mov	r16,r2
 2003f38:	000f883a 	mov	r7,zero
 2003f3c:	01800284 	movi	r6,10
 2003f40:	880b883a 	mov	r5,r17
 2003f44:	e009883a 	mov	r4,fp
 2003f48:	8d002526 	beq	r17,r20,2003fe0 <_dtoa_r+0xf9c>
 2003f4c:	20061980 	call	2006198 <__multadd>
 2003f50:	a00b883a 	mov	r5,r20
 2003f54:	000f883a 	mov	r7,zero
 2003f58:	01800284 	movi	r6,10
 2003f5c:	e009883a 	mov	r4,fp
 2003f60:	1023883a 	mov	r17,r2
 2003f64:	20061980 	call	2006198 <__multadd>
 2003f68:	1029883a 	mov	r20,r2
 2003f6c:	b027883a 	mov	r19,r22
 2003f70:	003fc006 	br	2003e74 <__alt_mem_mem_0+0xfcfe3e74>
 2003f74:	9011883a 	mov	r8,r18
 2003f78:	00800e0e 	bge	zero,r2,2003fb4 <_dtoa_r+0xf70>
 2003f7c:	800b883a 	mov	r5,r16
 2003f80:	01800044 	movi	r6,1
 2003f84:	e009883a 	mov	r4,fp
 2003f88:	da001715 	stw	r8,92(sp)
 2003f8c:	20068480 	call	2006848 <__lshift>
 2003f90:	a80b883a 	mov	r5,r21
 2003f94:	1009883a 	mov	r4,r2
 2003f98:	1021883a 	mov	r16,r2
 2003f9c:	20069900 	call	2006990 <__mcmp>
 2003fa0:	da001717 	ldw	r8,92(sp)
 2003fa4:	0081960e 	bge	zero,r2,2004600 <_dtoa_r+0x15bc>
 2003fa8:	00800e44 	movi	r2,57
 2003fac:	40817026 	beq	r8,r2,2004570 <_dtoa_r+0x152c>
 2003fb0:	ba000c44 	addi	r8,r23,49
 2003fb4:	8825883a 	mov	r18,r17
 2003fb8:	9dc00044 	addi	r23,r19,1
 2003fbc:	9a000005 	stb	r8,0(r19)
 2003fc0:	a023883a 	mov	r17,r20
 2003fc4:	dc000915 	stw	r16,36(sp)
 2003fc8:	003f2406 	br	2003c5c <__alt_mem_mem_0+0xfcfe3c5c>
 2003fcc:	00800e44 	movi	r2,57
 2003fd0:	9011883a 	mov	r8,r18
 2003fd4:	90816626 	beq	r18,r2,2004570 <_dtoa_r+0x152c>
 2003fd8:	05bff516 	blt	zero,r22,2003fb0 <__alt_mem_mem_0+0xfcfe3fb0>
 2003fdc:	003ff506 	br	2003fb4 <__alt_mem_mem_0+0xfcfe3fb4>
 2003fe0:	20061980 	call	2006198 <__multadd>
 2003fe4:	1023883a 	mov	r17,r2
 2003fe8:	1029883a 	mov	r20,r2
 2003fec:	003fdf06 	br	2003f6c <__alt_mem_mem_0+0xfcfe3f6c>
 2003ff0:	e009883a 	mov	r4,fp
 2003ff4:	20061700 	call	2006170 <_Bfree>
 2003ff8:	00800044 	movi	r2,1
 2003ffc:	003fbc06 	br	2003ef0 <__alt_mem_mem_0+0xfcfe3ef0>
 2004000:	a80b883a 	mov	r5,r21
 2004004:	8009883a 	mov	r4,r16
 2004008:	20069900 	call	2006990 <__mcmp>
 200400c:	103edb0e 	bge	r2,zero,2003b7c <__alt_mem_mem_0+0xfcfe3b7c>
 2004010:	800b883a 	mov	r5,r16
 2004014:	000f883a 	mov	r7,zero
 2004018:	01800284 	movi	r6,10
 200401c:	e009883a 	mov	r4,fp
 2004020:	20061980 	call	2006198 <__multadd>
 2004024:	1021883a 	mov	r16,r2
 2004028:	d8800517 	ldw	r2,20(sp)
 200402c:	d8c00b17 	ldw	r3,44(sp)
 2004030:	10bfffc4 	addi	r2,r2,-1
 2004034:	d8800515 	stw	r2,20(sp)
 2004038:	183f761e 	bne	r3,zero,2003e14 <__alt_mem_mem_0+0xfcfe3e14>
 200403c:	d9000c17 	ldw	r4,48(sp)
 2004040:	0101730e 	bge	zero,r4,2004610 <_dtoa_r+0x15cc>
 2004044:	d9000615 	stw	r4,24(sp)
 2004048:	003ed006 	br	2003b8c <__alt_mem_mem_0+0xfcfe3b8c>
 200404c:	00800084 	movi	r2,2
 2004050:	3081861e 	bne	r6,r2,200466c <_dtoa_r+0x1628>
 2004054:	d8000b15 	stw	zero,44(sp)
 2004058:	003f3c06 	br	2003d4c <__alt_mem_mem_0+0xfcfe3d4c>
 200405c:	dc000917 	ldw	r16,36(sp)
 2004060:	003e9206 	br	2003aac <__alt_mem_mem_0+0xfcfe3aac>
 2004064:	d9c00317 	ldw	r7,12(sp)
 2004068:	00800084 	movi	r2,2
 200406c:	11fec50e 	bge	r2,r7,2003b84 <__alt_mem_mem_0+0xfcfe3b84>
 2004070:	d9000617 	ldw	r4,24(sp)
 2004074:	20013c1e 	bne	r4,zero,2004568 <_dtoa_r+0x1524>
 2004078:	a80b883a 	mov	r5,r21
 200407c:	000f883a 	mov	r7,zero
 2004080:	01800144 	movi	r6,5
 2004084:	e009883a 	mov	r4,fp
 2004088:	20061980 	call	2006198 <__multadd>
 200408c:	100b883a 	mov	r5,r2
 2004090:	8009883a 	mov	r4,r16
 2004094:	102b883a 	mov	r21,r2
 2004098:	20069900 	call	2006990 <__mcmp>
 200409c:	dc000915 	stw	r16,36(sp)
 20040a0:	00bf410e 	bge	zero,r2,2003da8 <__alt_mem_mem_0+0xfcfe3da8>
 20040a4:	d9c00717 	ldw	r7,28(sp)
 20040a8:	00800c44 	movi	r2,49
 20040ac:	38800005 	stb	r2,0(r7)
 20040b0:	d8800517 	ldw	r2,20(sp)
 20040b4:	3dc00044 	addi	r23,r7,1
 20040b8:	10800044 	addi	r2,r2,1
 20040bc:	d8800515 	stw	r2,20(sp)
 20040c0:	003f3d06 	br	2003db8 <__alt_mem_mem_0+0xfcfe3db8>
 20040c4:	d9800517 	ldw	r6,20(sp)
 20040c8:	d9c00717 	ldw	r7,28(sp)
 20040cc:	00800c44 	movi	r2,49
 20040d0:	31800044 	addi	r6,r6,1
 20040d4:	d9800515 	stw	r6,20(sp)
 20040d8:	38800005 	stb	r2,0(r7)
 20040dc:	003edf06 	br	2003c5c <__alt_mem_mem_0+0xfcfe3c5c>
 20040e0:	d8000b15 	stw	zero,44(sp)
 20040e4:	003c9f06 	br	2003364 <__alt_mem_mem_0+0xfcfe3364>
 20040e8:	903e7e1e 	bne	r18,zero,2003ae4 <__alt_mem_mem_0+0xfcfe3ae4>
 20040ec:	00800434 	movhi	r2,16
 20040f0:	10bfffc4 	addi	r2,r2,-1
 20040f4:	9884703a 	and	r2,r19,r2
 20040f8:	1000ea1e 	bne	r2,zero,20044a4 <_dtoa_r+0x1460>
 20040fc:	9cdffc2c 	andhi	r19,r19,32752
 2004100:	9800e826 	beq	r19,zero,20044a4 <_dtoa_r+0x1460>
 2004104:	d9c00817 	ldw	r7,32(sp)
 2004108:	b5800044 	addi	r22,r22,1
 200410c:	04c00044 	movi	r19,1
 2004110:	39c00044 	addi	r7,r7,1
 2004114:	d9c00815 	stw	r7,32(sp)
 2004118:	d8800d17 	ldw	r2,52(sp)
 200411c:	103e721e 	bne	r2,zero,2003ae8 <__alt_mem_mem_0+0xfcfe3ae8>
 2004120:	00800044 	movi	r2,1
 2004124:	003e7906 	br	2003b0c <__alt_mem_mem_0+0xfcfe3b0c>
 2004128:	8009883a 	mov	r4,r16
 200412c:	200d0180 	call	200d018 <__floatsidf>
 2004130:	d9800f17 	ldw	r6,60(sp)
 2004134:	d9c01017 	ldw	r7,64(sp)
 2004138:	1009883a 	mov	r4,r2
 200413c:	180b883a 	mov	r5,r3
 2004140:	200bf840 	call	200bf84 <__muldf3>
 2004144:	000d883a 	mov	r6,zero
 2004148:	01d00734 	movhi	r7,16412
 200414c:	1009883a 	mov	r4,r2
 2004150:	180b883a 	mov	r5,r3
 2004154:	200ab980 	call	200ab98 <__adddf3>
 2004158:	047f3034 	movhi	r17,64704
 200415c:	1021883a 	mov	r16,r2
 2004160:	1c63883a 	add	r17,r3,r17
 2004164:	d9000f17 	ldw	r4,60(sp)
 2004168:	d9401017 	ldw	r5,64(sp)
 200416c:	000d883a 	mov	r6,zero
 2004170:	01d00534 	movhi	r7,16404
 2004174:	200c69c0 	call	200c69c <__subdf3>
 2004178:	800d883a 	mov	r6,r16
 200417c:	880f883a 	mov	r7,r17
 2004180:	1009883a 	mov	r4,r2
 2004184:	180b883a 	mov	r5,r3
 2004188:	102b883a 	mov	r21,r2
 200418c:	1829883a 	mov	r20,r3
 2004190:	200bdb40 	call	200bdb4 <__gedf2>
 2004194:	00806c16 	blt	zero,r2,2004348 <_dtoa_r+0x1304>
 2004198:	89e0003c 	xorhi	r7,r17,32768
 200419c:	800d883a 	mov	r6,r16
 20041a0:	a809883a 	mov	r4,r21
 20041a4:	a00b883a 	mov	r5,r20
 20041a8:	200be900 	call	200be90 <__ledf2>
 20041ac:	103d7e0e 	bge	r2,zero,20037a8 <__alt_mem_mem_0+0xfcfe37a8>
 20041b0:	002b883a 	mov	r21,zero
 20041b4:	0023883a 	mov	r17,zero
 20041b8:	003efb06 	br	2003da8 <__alt_mem_mem_0+0xfcfe3da8>
 20041bc:	d8800717 	ldw	r2,28(sp)
 20041c0:	003bd006 	br	2003104 <__alt_mem_mem_0+0xfcfe3104>
 20041c4:	d9000a17 	ldw	r4,40(sp)
 20041c8:	d9800d17 	ldw	r6,52(sp)
 20041cc:	dd400a15 	stw	r21,40(sp)
 20041d0:	a905c83a 	sub	r2,r21,r4
 20041d4:	308d883a 	add	r6,r6,r2
 20041d8:	d9800d15 	stw	r6,52(sp)
 20041dc:	002b883a 	mov	r21,zero
 20041e0:	003e0606 	br	20039fc <__alt_mem_mem_0+0xfcfe39fc>
 20041e4:	9023883a 	mov	r17,r18
 20041e8:	9829883a 	mov	r20,r19
 20041ec:	04000084 	movi	r16,2
 20041f0:	003c9206 	br	200343c <__alt_mem_mem_0+0xfcfe343c>
 20041f4:	04000044 	movi	r16,1
 20041f8:	dc000c15 	stw	r16,48(sp)
 20041fc:	dc000615 	stw	r16,24(sp)
 2004200:	dc002215 	stw	r16,136(sp)
 2004204:	e0001115 	stw	zero,68(fp)
 2004208:	000b883a 	mov	r5,zero
 200420c:	003c6906 	br	20033b4 <__alt_mem_mem_0+0xfcfe33b4>
 2004210:	3021883a 	mov	r16,r6
 2004214:	003ffb06 	br	2004204 <__alt_mem_mem_0+0xfcfe4204>
 2004218:	1000021e 	bne	r2,zero,2004224 <_dtoa_r+0x11e0>
 200421c:	4200004c 	andi	r8,r8,1
 2004220:	403e7d1e 	bne	r8,zero,2003c18 <__alt_mem_mem_0+0xfcfe3c18>
 2004224:	01000c04 	movi	r4,48
 2004228:	00000106 	br	2004230 <_dtoa_r+0x11ec>
 200422c:	102f883a 	mov	r23,r2
 2004230:	b8bfffc4 	addi	r2,r23,-1
 2004234:	10c00007 	ldb	r3,0(r2)
 2004238:	193ffc26 	beq	r3,r4,200422c <__alt_mem_mem_0+0xfcfe422c>
 200423c:	003e8706 	br	2003c5c <__alt_mem_mem_0+0xfcfe3c5c>
 2004240:	d8800517 	ldw	r2,20(sp)
 2004244:	00a3c83a 	sub	r17,zero,r2
 2004248:	8800a426 	beq	r17,zero,20044dc <_dtoa_r+0x1498>
 200424c:	888003cc 	andi	r2,r17,15
 2004250:	100490fa 	slli	r2,r2,3
 2004254:	00c08134 	movhi	r3,516
 2004258:	18c3a804 	addi	r3,r3,3744
 200425c:	1885883a 	add	r2,r3,r2
 2004260:	11800017 	ldw	r6,0(r2)
 2004264:	11c00117 	ldw	r7,4(r2)
 2004268:	9009883a 	mov	r4,r18
 200426c:	980b883a 	mov	r5,r19
 2004270:	8823d13a 	srai	r17,r17,4
 2004274:	200bf840 	call	200bf84 <__muldf3>
 2004278:	d8800f15 	stw	r2,60(sp)
 200427c:	d8c01015 	stw	r3,64(sp)
 2004280:	8800e826 	beq	r17,zero,2004624 <_dtoa_r+0x15e0>
 2004284:	05008134 	movhi	r20,516
 2004288:	a5039e04 	addi	r20,r20,3704
 200428c:	04000084 	movi	r16,2
 2004290:	8980004c 	andi	r6,r17,1
 2004294:	1009883a 	mov	r4,r2
 2004298:	8823d07a 	srai	r17,r17,1
 200429c:	180b883a 	mov	r5,r3
 20042a0:	30000426 	beq	r6,zero,20042b4 <_dtoa_r+0x1270>
 20042a4:	a1800017 	ldw	r6,0(r20)
 20042a8:	a1c00117 	ldw	r7,4(r20)
 20042ac:	84000044 	addi	r16,r16,1
 20042b0:	200bf840 	call	200bf84 <__muldf3>
 20042b4:	a5000204 	addi	r20,r20,8
 20042b8:	883ff51e 	bne	r17,zero,2004290 <__alt_mem_mem_0+0xfcfe4290>
 20042bc:	d8800f15 	stw	r2,60(sp)
 20042c0:	d8c01015 	stw	r3,64(sp)
 20042c4:	003c7606 	br	20034a0 <__alt_mem_mem_0+0xfcfe34a0>
 20042c8:	00c00c04 	movi	r3,48
 20042cc:	10c00005 	stb	r3,0(r2)
 20042d0:	d8c00517 	ldw	r3,20(sp)
 20042d4:	bd3fffc3 	ldbu	r20,-1(r23)
 20042d8:	18c00044 	addi	r3,r3,1
 20042dc:	d8c00515 	stw	r3,20(sp)
 20042e0:	003db906 	br	20039c8 <__alt_mem_mem_0+0xfcfe39c8>
 20042e4:	89400117 	ldw	r5,4(r17)
 20042e8:	e009883a 	mov	r4,fp
 20042ec:	20060c80 	call	20060c8 <_Balloc>
 20042f0:	89800417 	ldw	r6,16(r17)
 20042f4:	89400304 	addi	r5,r17,12
 20042f8:	11000304 	addi	r4,r2,12
 20042fc:	31800084 	addi	r6,r6,2
 2004300:	318d883a 	add	r6,r6,r6
 2004304:	318d883a 	add	r6,r6,r6
 2004308:	1027883a 	mov	r19,r2
 200430c:	2005e580 	call	2005e58 <memcpy>
 2004310:	01800044 	movi	r6,1
 2004314:	980b883a 	mov	r5,r19
 2004318:	e009883a 	mov	r4,fp
 200431c:	20068480 	call	2006848 <__lshift>
 2004320:	1029883a 	mov	r20,r2
 2004324:	003ecc06 	br	2003e58 <__alt_mem_mem_0+0xfcfe3e58>
 2004328:	00800e44 	movi	r2,57
 200432c:	90809026 	beq	r18,r2,2004570 <_dtoa_r+0x152c>
 2004330:	92000044 	addi	r8,r18,1
 2004334:	003f1f06 	br	2003fb4 <__alt_mem_mem_0+0xfcfe3fb4>
 2004338:	9011883a 	mov	r8,r18
 200433c:	8825883a 	mov	r18,r17
 2004340:	a023883a 	mov	r17,r20
 2004344:	003e2906 	br	2003bec <__alt_mem_mem_0+0xfcfe3bec>
 2004348:	002b883a 	mov	r21,zero
 200434c:	0023883a 	mov	r17,zero
 2004350:	003f5406 	br	20040a4 <__alt_mem_mem_0+0xfcfe40a4>
 2004354:	61bfffc4 	addi	r6,r12,-1
 2004358:	300490fa 	slli	r2,r6,3
 200435c:	00c08134 	movhi	r3,516
 2004360:	18c3a804 	addi	r3,r3,3744
 2004364:	1885883a 	add	r2,r3,r2
 2004368:	11000017 	ldw	r4,0(r2)
 200436c:	11400117 	ldw	r5,4(r2)
 2004370:	d8800717 	ldw	r2,28(sp)
 2004374:	880f883a 	mov	r7,r17
 2004378:	d9801215 	stw	r6,72(sp)
 200437c:	800d883a 	mov	r6,r16
 2004380:	db001615 	stw	r12,88(sp)
 2004384:	15c00044 	addi	r23,r2,1
 2004388:	200bf840 	call	200bf84 <__muldf3>
 200438c:	d9401017 	ldw	r5,64(sp)
 2004390:	d9000f17 	ldw	r4,60(sp)
 2004394:	d8c01515 	stw	r3,84(sp)
 2004398:	d8801415 	stw	r2,80(sp)
 200439c:	200cf980 	call	200cf98 <__fixdfsi>
 20043a0:	1009883a 	mov	r4,r2
 20043a4:	1021883a 	mov	r16,r2
 20043a8:	200d0180 	call	200d018 <__floatsidf>
 20043ac:	d9000f17 	ldw	r4,60(sp)
 20043b0:	d9401017 	ldw	r5,64(sp)
 20043b4:	100d883a 	mov	r6,r2
 20043b8:	180f883a 	mov	r7,r3
 20043bc:	200c69c0 	call	200c69c <__subdf3>
 20043c0:	1829883a 	mov	r20,r3
 20043c4:	d8c00717 	ldw	r3,28(sp)
 20043c8:	84000c04 	addi	r16,r16,48
 20043cc:	1023883a 	mov	r17,r2
 20043d0:	1c000005 	stb	r16,0(r3)
 20043d4:	db001617 	ldw	r12,88(sp)
 20043d8:	00800044 	movi	r2,1
 20043dc:	60802226 	beq	r12,r2,2004468 <_dtoa_r+0x1424>
 20043e0:	d9c00717 	ldw	r7,28(sp)
 20043e4:	8805883a 	mov	r2,r17
 20043e8:	b82b883a 	mov	r21,r23
 20043ec:	3b19883a 	add	r12,r7,r12
 20043f0:	6023883a 	mov	r17,r12
 20043f4:	a007883a 	mov	r3,r20
 20043f8:	dc800f15 	stw	r18,60(sp)
 20043fc:	000d883a 	mov	r6,zero
 2004400:	01d00934 	movhi	r7,16420
 2004404:	1009883a 	mov	r4,r2
 2004408:	180b883a 	mov	r5,r3
 200440c:	200bf840 	call	200bf84 <__muldf3>
 2004410:	180b883a 	mov	r5,r3
 2004414:	1009883a 	mov	r4,r2
 2004418:	1829883a 	mov	r20,r3
 200441c:	1025883a 	mov	r18,r2
 2004420:	200cf980 	call	200cf98 <__fixdfsi>
 2004424:	1009883a 	mov	r4,r2
 2004428:	1021883a 	mov	r16,r2
 200442c:	200d0180 	call	200d018 <__floatsidf>
 2004430:	100d883a 	mov	r6,r2
 2004434:	180f883a 	mov	r7,r3
 2004438:	9009883a 	mov	r4,r18
 200443c:	a00b883a 	mov	r5,r20
 2004440:	84000c04 	addi	r16,r16,48
 2004444:	200c69c0 	call	200c69c <__subdf3>
 2004448:	ad400044 	addi	r21,r21,1
 200444c:	ac3fffc5 	stb	r16,-1(r21)
 2004450:	ac7fea1e 	bne	r21,r17,20043fc <__alt_mem_mem_0+0xfcfe43fc>
 2004454:	1023883a 	mov	r17,r2
 2004458:	d8801217 	ldw	r2,72(sp)
 200445c:	dc800f17 	ldw	r18,60(sp)
 2004460:	1829883a 	mov	r20,r3
 2004464:	b8af883a 	add	r23,r23,r2
 2004468:	d9001417 	ldw	r4,80(sp)
 200446c:	d9401517 	ldw	r5,84(sp)
 2004470:	000d883a 	mov	r6,zero
 2004474:	01cff834 	movhi	r7,16352
 2004478:	200ab980 	call	200ab98 <__adddf3>
 200447c:	880d883a 	mov	r6,r17
 2004480:	a00f883a 	mov	r7,r20
 2004484:	1009883a 	mov	r4,r2
 2004488:	180b883a 	mov	r5,r3
 200448c:	200be900 	call	200be90 <__ledf2>
 2004490:	10003e0e 	bge	r2,zero,200458c <_dtoa_r+0x1548>
 2004494:	d9001317 	ldw	r4,76(sp)
 2004498:	bd3fffc3 	ldbu	r20,-1(r23)
 200449c:	d9000515 	stw	r4,20(sp)
 20044a0:	003d3b06 	br	2003990 <__alt_mem_mem_0+0xfcfe3990>
 20044a4:	0027883a 	mov	r19,zero
 20044a8:	003f1b06 	br	2004118 <__alt_mem_mem_0+0xfcfe4118>
 20044ac:	d8800817 	ldw	r2,32(sp)
 20044b0:	11e9c83a 	sub	r20,r2,r7
 20044b4:	0005883a 	mov	r2,zero
 20044b8:	003d5406 	br	2003a0c <__alt_mem_mem_0+0xfcfe3a0c>
 20044bc:	00800044 	movi	r2,1
 20044c0:	003dc706 	br	2003be0 <__alt_mem_mem_0+0xfcfe3be0>
 20044c4:	d8c00217 	ldw	r3,8(sp)
 20044c8:	00800d84 	movi	r2,54
 20044cc:	dd400a17 	ldw	r21,40(sp)
 20044d0:	10c5c83a 	sub	r2,r2,r3
 20044d4:	dd000817 	ldw	r20,32(sp)
 20044d8:	003d4c06 	br	2003a0c <__alt_mem_mem_0+0xfcfe3a0c>
 20044dc:	dc800f15 	stw	r18,60(sp)
 20044e0:	dcc01015 	stw	r19,64(sp)
 20044e4:	04000084 	movi	r16,2
 20044e8:	003bed06 	br	20034a0 <__alt_mem_mem_0+0xfcfe34a0>
 20044ec:	d9000617 	ldw	r4,24(sp)
 20044f0:	203f0d26 	beq	r4,zero,2004128 <__alt_mem_mem_0+0xfcfe4128>
 20044f4:	d9800c17 	ldw	r6,48(sp)
 20044f8:	01bcab0e 	bge	zero,r6,20037a8 <__alt_mem_mem_0+0xfcfe37a8>
 20044fc:	d9401017 	ldw	r5,64(sp)
 2004500:	d9000f17 	ldw	r4,60(sp)
 2004504:	000d883a 	mov	r6,zero
 2004508:	01d00934 	movhi	r7,16420
 200450c:	200bf840 	call	200bf84 <__muldf3>
 2004510:	81000044 	addi	r4,r16,1
 2004514:	d8800f15 	stw	r2,60(sp)
 2004518:	d8c01015 	stw	r3,64(sp)
 200451c:	200d0180 	call	200d018 <__floatsidf>
 2004520:	d9800f17 	ldw	r6,60(sp)
 2004524:	d9c01017 	ldw	r7,64(sp)
 2004528:	1009883a 	mov	r4,r2
 200452c:	180b883a 	mov	r5,r3
 2004530:	200bf840 	call	200bf84 <__muldf3>
 2004534:	01d00734 	movhi	r7,16412
 2004538:	000d883a 	mov	r6,zero
 200453c:	1009883a 	mov	r4,r2
 2004540:	180b883a 	mov	r5,r3
 2004544:	200ab980 	call	200ab98 <__adddf3>
 2004548:	d9c00517 	ldw	r7,20(sp)
 200454c:	047f3034 	movhi	r17,64704
 2004550:	1021883a 	mov	r16,r2
 2004554:	39ffffc4 	addi	r7,r7,-1
 2004558:	d9c01315 	stw	r7,76(sp)
 200455c:	1c63883a 	add	r17,r3,r17
 2004560:	db000c17 	ldw	r12,48(sp)
 2004564:	003bea06 	br	2003510 <__alt_mem_mem_0+0xfcfe3510>
 2004568:	dc000915 	stw	r16,36(sp)
 200456c:	003e0e06 	br	2003da8 <__alt_mem_mem_0+0xfcfe3da8>
 2004570:	01000e44 	movi	r4,57
 2004574:	8825883a 	mov	r18,r17
 2004578:	9dc00044 	addi	r23,r19,1
 200457c:	99000005 	stb	r4,0(r19)
 2004580:	a023883a 	mov	r17,r20
 2004584:	dc000915 	stw	r16,36(sp)
 2004588:	003da406 	br	2003c1c <__alt_mem_mem_0+0xfcfe3c1c>
 200458c:	d9801417 	ldw	r6,80(sp)
 2004590:	d9c01517 	ldw	r7,84(sp)
 2004594:	0009883a 	mov	r4,zero
 2004598:	014ff834 	movhi	r5,16352
 200459c:	200c69c0 	call	200c69c <__subdf3>
 20045a0:	880d883a 	mov	r6,r17
 20045a4:	a00f883a 	mov	r7,r20
 20045a8:	1009883a 	mov	r4,r2
 20045ac:	180b883a 	mov	r5,r3
 20045b0:	200bdb40 	call	200bdb4 <__gedf2>
 20045b4:	00bc7c0e 	bge	zero,r2,20037a8 <__alt_mem_mem_0+0xfcfe37a8>
 20045b8:	01000c04 	movi	r4,48
 20045bc:	00000106 	br	20045c4 <_dtoa_r+0x1580>
 20045c0:	102f883a 	mov	r23,r2
 20045c4:	b8bfffc4 	addi	r2,r23,-1
 20045c8:	10c00007 	ldb	r3,0(r2)
 20045cc:	193ffc26 	beq	r3,r4,20045c0 <__alt_mem_mem_0+0xfcfe45c0>
 20045d0:	d9801317 	ldw	r6,76(sp)
 20045d4:	d9800515 	stw	r6,20(sp)
 20045d8:	003c4406 	br	20036ec <__alt_mem_mem_0+0xfcfe36ec>
 20045dc:	d9801317 	ldw	r6,76(sp)
 20045e0:	d9800515 	stw	r6,20(sp)
 20045e4:	003cea06 	br	2003990 <__alt_mem_mem_0+0xfcfe3990>
 20045e8:	dd800f17 	ldw	r22,60(sp)
 20045ec:	dcc01017 	ldw	r19,64(sp)
 20045f0:	dc801217 	ldw	r18,72(sp)
 20045f4:	003c6c06 	br	20037a8 <__alt_mem_mem_0+0xfcfe37a8>
 20045f8:	903e031e 	bne	r18,zero,2003e08 <__alt_mem_mem_0+0xfcfe3e08>
 20045fc:	003ebb06 	br	20040ec <__alt_mem_mem_0+0xfcfe40ec>
 2004600:	103e6c1e 	bne	r2,zero,2003fb4 <__alt_mem_mem_0+0xfcfe3fb4>
 2004604:	4080004c 	andi	r2,r8,1
 2004608:	103e6a26 	beq	r2,zero,2003fb4 <__alt_mem_mem_0+0xfcfe3fb4>
 200460c:	003e6606 	br	2003fa8 <__alt_mem_mem_0+0xfcfe3fa8>
 2004610:	d8c00317 	ldw	r3,12(sp)
 2004614:	00800084 	movi	r2,2
 2004618:	10c02916 	blt	r2,r3,20046c0 <_dtoa_r+0x167c>
 200461c:	d9000c17 	ldw	r4,48(sp)
 2004620:	003e8806 	br	2004044 <__alt_mem_mem_0+0xfcfe4044>
 2004624:	04000084 	movi	r16,2
 2004628:	003b9d06 	br	20034a0 <__alt_mem_mem_0+0xfcfe34a0>
 200462c:	d9001317 	ldw	r4,76(sp)
 2004630:	d9000515 	stw	r4,20(sp)
 2004634:	003cd606 	br	2003990 <__alt_mem_mem_0+0xfcfe3990>
 2004638:	d8801317 	ldw	r2,76(sp)
 200463c:	d8800515 	stw	r2,20(sp)
 2004640:	003c2a06 	br	20036ec <__alt_mem_mem_0+0xfcfe36ec>
 2004644:	d9800317 	ldw	r6,12(sp)
 2004648:	00800084 	movi	r2,2
 200464c:	11801516 	blt	r2,r6,20046a4 <_dtoa_r+0x1660>
 2004650:	d9c00c17 	ldw	r7,48(sp)
 2004654:	d9c00615 	stw	r7,24(sp)
 2004658:	003df706 	br	2003e38 <__alt_mem_mem_0+0xfcfe3e38>
 200465c:	193d3926 	beq	r3,r4,2003b44 <__alt_mem_mem_0+0xfcfe3b44>
 2004660:	00c00f04 	movi	r3,60
 2004664:	1885c83a 	sub	r2,r3,r2
 2004668:	003ddf06 	br	2003de8 <__alt_mem_mem_0+0xfcfe3de8>
 200466c:	e009883a 	mov	r4,fp
 2004670:	e0001115 	stw	zero,68(fp)
 2004674:	000b883a 	mov	r5,zero
 2004678:	20060c80 	call	20060c8 <_Balloc>
 200467c:	d8800715 	stw	r2,28(sp)
 2004680:	d8c00717 	ldw	r3,28(sp)
 2004684:	00bfffc4 	movi	r2,-1
 2004688:	01000044 	movi	r4,1
 200468c:	d8800c15 	stw	r2,48(sp)
 2004690:	e0c01015 	stw	r3,64(fp)
 2004694:	d9000b15 	stw	r4,44(sp)
 2004698:	d8800615 	stw	r2,24(sp)
 200469c:	d8002215 	stw	zero,136(sp)
 20046a0:	003c4106 	br	20037a8 <__alt_mem_mem_0+0xfcfe37a8>
 20046a4:	d8c00c17 	ldw	r3,48(sp)
 20046a8:	d8c00615 	stw	r3,24(sp)
 20046ac:	003e7006 	br	2004070 <__alt_mem_mem_0+0xfcfe4070>
 20046b0:	04400044 	movi	r17,1
 20046b4:	003b2006 	br	2003338 <__alt_mem_mem_0+0xfcfe3338>
 20046b8:	000b883a 	mov	r5,zero
 20046bc:	003b3d06 	br	20033b4 <__alt_mem_mem_0+0xfcfe33b4>
 20046c0:	d8800c17 	ldw	r2,48(sp)
 20046c4:	d8800615 	stw	r2,24(sp)
 20046c8:	003e6906 	br	2004070 <__alt_mem_mem_0+0xfcfe4070>

020046cc <__sflush_r>:
 20046cc:	2880030b 	ldhu	r2,12(r5)
 20046d0:	defffb04 	addi	sp,sp,-20
 20046d4:	dcc00315 	stw	r19,12(sp)
 20046d8:	dc400115 	stw	r17,4(sp)
 20046dc:	dfc00415 	stw	ra,16(sp)
 20046e0:	dc800215 	stw	r18,8(sp)
 20046e4:	dc000015 	stw	r16,0(sp)
 20046e8:	10c0020c 	andi	r3,r2,8
 20046ec:	2823883a 	mov	r17,r5
 20046f0:	2027883a 	mov	r19,r4
 20046f4:	1800311e 	bne	r3,zero,20047bc <__sflush_r+0xf0>
 20046f8:	28c00117 	ldw	r3,4(r5)
 20046fc:	10820014 	ori	r2,r2,2048
 2004700:	2880030d 	sth	r2,12(r5)
 2004704:	00c04b0e 	bge	zero,r3,2004834 <__sflush_r+0x168>
 2004708:	8a000a17 	ldw	r8,40(r17)
 200470c:	40002326 	beq	r8,zero,200479c <__sflush_r+0xd0>
 2004710:	9c000017 	ldw	r16,0(r19)
 2004714:	10c4000c 	andi	r3,r2,4096
 2004718:	98000015 	stw	zero,0(r19)
 200471c:	18004826 	beq	r3,zero,2004840 <__sflush_r+0x174>
 2004720:	89801417 	ldw	r6,80(r17)
 2004724:	10c0010c 	andi	r3,r2,4
 2004728:	18000626 	beq	r3,zero,2004744 <__sflush_r+0x78>
 200472c:	88c00117 	ldw	r3,4(r17)
 2004730:	88800c17 	ldw	r2,48(r17)
 2004734:	30cdc83a 	sub	r6,r6,r3
 2004738:	10000226 	beq	r2,zero,2004744 <__sflush_r+0x78>
 200473c:	88800f17 	ldw	r2,60(r17)
 2004740:	308dc83a 	sub	r6,r6,r2
 2004744:	89400717 	ldw	r5,28(r17)
 2004748:	000f883a 	mov	r7,zero
 200474c:	9809883a 	mov	r4,r19
 2004750:	403ee83a 	callr	r8
 2004754:	00ffffc4 	movi	r3,-1
 2004758:	10c04426 	beq	r2,r3,200486c <__sflush_r+0x1a0>
 200475c:	88c0030b 	ldhu	r3,12(r17)
 2004760:	89000417 	ldw	r4,16(r17)
 2004764:	88000115 	stw	zero,4(r17)
 2004768:	197dffcc 	andi	r5,r3,63487
 200476c:	8940030d 	sth	r5,12(r17)
 2004770:	89000015 	stw	r4,0(r17)
 2004774:	18c4000c 	andi	r3,r3,4096
 2004778:	18002c1e 	bne	r3,zero,200482c <__sflush_r+0x160>
 200477c:	89400c17 	ldw	r5,48(r17)
 2004780:	9c000015 	stw	r16,0(r19)
 2004784:	28000526 	beq	r5,zero,200479c <__sflush_r+0xd0>
 2004788:	88801004 	addi	r2,r17,64
 200478c:	28800226 	beq	r5,r2,2004798 <__sflush_r+0xcc>
 2004790:	9809883a 	mov	r4,r19
 2004794:	2004e380 	call	2004e38 <_free_r>
 2004798:	88000c15 	stw	zero,48(r17)
 200479c:	0005883a 	mov	r2,zero
 20047a0:	dfc00417 	ldw	ra,16(sp)
 20047a4:	dcc00317 	ldw	r19,12(sp)
 20047a8:	dc800217 	ldw	r18,8(sp)
 20047ac:	dc400117 	ldw	r17,4(sp)
 20047b0:	dc000017 	ldw	r16,0(sp)
 20047b4:	dec00504 	addi	sp,sp,20
 20047b8:	f800283a 	ret
 20047bc:	2c800417 	ldw	r18,16(r5)
 20047c0:	903ff626 	beq	r18,zero,200479c <__alt_mem_mem_0+0xfcfe479c>
 20047c4:	2c000017 	ldw	r16,0(r5)
 20047c8:	108000cc 	andi	r2,r2,3
 20047cc:	2c800015 	stw	r18,0(r5)
 20047d0:	84a1c83a 	sub	r16,r16,r18
 20047d4:	1000131e 	bne	r2,zero,2004824 <__sflush_r+0x158>
 20047d8:	28800517 	ldw	r2,20(r5)
 20047dc:	88800215 	stw	r2,8(r17)
 20047e0:	04000316 	blt	zero,r16,20047f0 <__sflush_r+0x124>
 20047e4:	003fed06 	br	200479c <__alt_mem_mem_0+0xfcfe479c>
 20047e8:	90a5883a 	add	r18,r18,r2
 20047ec:	043feb0e 	bge	zero,r16,200479c <__alt_mem_mem_0+0xfcfe479c>
 20047f0:	88800917 	ldw	r2,36(r17)
 20047f4:	89400717 	ldw	r5,28(r17)
 20047f8:	800f883a 	mov	r7,r16
 20047fc:	900d883a 	mov	r6,r18
 2004800:	9809883a 	mov	r4,r19
 2004804:	103ee83a 	callr	r2
 2004808:	80a1c83a 	sub	r16,r16,r2
 200480c:	00bff616 	blt	zero,r2,20047e8 <__alt_mem_mem_0+0xfcfe47e8>
 2004810:	88c0030b 	ldhu	r3,12(r17)
 2004814:	00bfffc4 	movi	r2,-1
 2004818:	18c01014 	ori	r3,r3,64
 200481c:	88c0030d 	sth	r3,12(r17)
 2004820:	003fdf06 	br	20047a0 <__alt_mem_mem_0+0xfcfe47a0>
 2004824:	0005883a 	mov	r2,zero
 2004828:	003fec06 	br	20047dc <__alt_mem_mem_0+0xfcfe47dc>
 200482c:	88801415 	stw	r2,80(r17)
 2004830:	003fd206 	br	200477c <__alt_mem_mem_0+0xfcfe477c>
 2004834:	28c00f17 	ldw	r3,60(r5)
 2004838:	00ffb316 	blt	zero,r3,2004708 <__alt_mem_mem_0+0xfcfe4708>
 200483c:	003fd706 	br	200479c <__alt_mem_mem_0+0xfcfe479c>
 2004840:	89400717 	ldw	r5,28(r17)
 2004844:	000d883a 	mov	r6,zero
 2004848:	01c00044 	movi	r7,1
 200484c:	9809883a 	mov	r4,r19
 2004850:	403ee83a 	callr	r8
 2004854:	100d883a 	mov	r6,r2
 2004858:	00bfffc4 	movi	r2,-1
 200485c:	30801426 	beq	r6,r2,20048b0 <__sflush_r+0x1e4>
 2004860:	8880030b 	ldhu	r2,12(r17)
 2004864:	8a000a17 	ldw	r8,40(r17)
 2004868:	003fae06 	br	2004724 <__alt_mem_mem_0+0xfcfe4724>
 200486c:	98c00017 	ldw	r3,0(r19)
 2004870:	183fba26 	beq	r3,zero,200475c <__alt_mem_mem_0+0xfcfe475c>
 2004874:	01000744 	movi	r4,29
 2004878:	19000626 	beq	r3,r4,2004894 <__sflush_r+0x1c8>
 200487c:	01000584 	movi	r4,22
 2004880:	19000426 	beq	r3,r4,2004894 <__sflush_r+0x1c8>
 2004884:	88c0030b 	ldhu	r3,12(r17)
 2004888:	18c01014 	ori	r3,r3,64
 200488c:	88c0030d 	sth	r3,12(r17)
 2004890:	003fc306 	br	20047a0 <__alt_mem_mem_0+0xfcfe47a0>
 2004894:	8880030b 	ldhu	r2,12(r17)
 2004898:	88c00417 	ldw	r3,16(r17)
 200489c:	88000115 	stw	zero,4(r17)
 20048a0:	10bdffcc 	andi	r2,r2,63487
 20048a4:	8880030d 	sth	r2,12(r17)
 20048a8:	88c00015 	stw	r3,0(r17)
 20048ac:	003fb306 	br	200477c <__alt_mem_mem_0+0xfcfe477c>
 20048b0:	98800017 	ldw	r2,0(r19)
 20048b4:	103fea26 	beq	r2,zero,2004860 <__alt_mem_mem_0+0xfcfe4860>
 20048b8:	00c00744 	movi	r3,29
 20048bc:	10c00226 	beq	r2,r3,20048c8 <__sflush_r+0x1fc>
 20048c0:	00c00584 	movi	r3,22
 20048c4:	10c0031e 	bne	r2,r3,20048d4 <__sflush_r+0x208>
 20048c8:	9c000015 	stw	r16,0(r19)
 20048cc:	0005883a 	mov	r2,zero
 20048d0:	003fb306 	br	20047a0 <__alt_mem_mem_0+0xfcfe47a0>
 20048d4:	88c0030b 	ldhu	r3,12(r17)
 20048d8:	3005883a 	mov	r2,r6
 20048dc:	18c01014 	ori	r3,r3,64
 20048e0:	88c0030d 	sth	r3,12(r17)
 20048e4:	003fae06 	br	20047a0 <__alt_mem_mem_0+0xfcfe47a0>

020048e8 <_fflush_r>:
 20048e8:	defffd04 	addi	sp,sp,-12
 20048ec:	dc000115 	stw	r16,4(sp)
 20048f0:	dfc00215 	stw	ra,8(sp)
 20048f4:	2021883a 	mov	r16,r4
 20048f8:	20000226 	beq	r4,zero,2004904 <_fflush_r+0x1c>
 20048fc:	20800e17 	ldw	r2,56(r4)
 2004900:	10000c26 	beq	r2,zero,2004934 <_fflush_r+0x4c>
 2004904:	2880030f 	ldh	r2,12(r5)
 2004908:	1000051e 	bne	r2,zero,2004920 <_fflush_r+0x38>
 200490c:	0005883a 	mov	r2,zero
 2004910:	dfc00217 	ldw	ra,8(sp)
 2004914:	dc000117 	ldw	r16,4(sp)
 2004918:	dec00304 	addi	sp,sp,12
 200491c:	f800283a 	ret
 2004920:	8009883a 	mov	r4,r16
 2004924:	dfc00217 	ldw	ra,8(sp)
 2004928:	dc000117 	ldw	r16,4(sp)
 200492c:	dec00304 	addi	sp,sp,12
 2004930:	20046cc1 	jmpi	20046cc <__sflush_r>
 2004934:	d9400015 	stw	r5,0(sp)
 2004938:	2004cc40 	call	2004cc4 <__sinit>
 200493c:	d9400017 	ldw	r5,0(sp)
 2004940:	003ff006 	br	2004904 <__alt_mem_mem_0+0xfcfe4904>

02004944 <fflush>:
 2004944:	20000526 	beq	r4,zero,200495c <fflush+0x18>
 2004948:	00808134 	movhi	r2,516
 200494c:	1095e804 	addi	r2,r2,22432
 2004950:	200b883a 	mov	r5,r4
 2004954:	11000017 	ldw	r4,0(r2)
 2004958:	20048e81 	jmpi	20048e8 <_fflush_r>
 200495c:	00808134 	movhi	r2,516
 2004960:	1095e704 	addi	r2,r2,22428
 2004964:	11000017 	ldw	r4,0(r2)
 2004968:	01408034 	movhi	r5,512
 200496c:	29523a04 	addi	r5,r5,18664
 2004970:	200520c1 	jmpi	200520c <_fwalk_reent>

02004974 <__fp_unlock>:
 2004974:	0005883a 	mov	r2,zero
 2004978:	f800283a 	ret

0200497c <_cleanup_r>:
 200497c:	01408074 	movhi	r5,513
 2004980:	2962ff04 	addi	r5,r5,-29700
 2004984:	200520c1 	jmpi	200520c <_fwalk_reent>

02004988 <__sinit.part.1>:
 2004988:	defff704 	addi	sp,sp,-36
 200498c:	00c08034 	movhi	r3,512
 2004990:	dfc00815 	stw	ra,32(sp)
 2004994:	ddc00715 	stw	r23,28(sp)
 2004998:	dd800615 	stw	r22,24(sp)
 200499c:	dd400515 	stw	r21,20(sp)
 20049a0:	dd000415 	stw	r20,16(sp)
 20049a4:	dcc00315 	stw	r19,12(sp)
 20049a8:	dc800215 	stw	r18,8(sp)
 20049ac:	dc400115 	stw	r17,4(sp)
 20049b0:	dc000015 	stw	r16,0(sp)
 20049b4:	18d25f04 	addi	r3,r3,18812
 20049b8:	24000117 	ldw	r16,4(r4)
 20049bc:	20c00f15 	stw	r3,60(r4)
 20049c0:	2080bb04 	addi	r2,r4,748
 20049c4:	00c000c4 	movi	r3,3
 20049c8:	20c0b915 	stw	r3,740(r4)
 20049cc:	2080ba15 	stw	r2,744(r4)
 20049d0:	2000b815 	stw	zero,736(r4)
 20049d4:	05c00204 	movi	r23,8
 20049d8:	00800104 	movi	r2,4
 20049dc:	2025883a 	mov	r18,r4
 20049e0:	b80d883a 	mov	r6,r23
 20049e4:	81001704 	addi	r4,r16,92
 20049e8:	000b883a 	mov	r5,zero
 20049ec:	80000015 	stw	zero,0(r16)
 20049f0:	80000115 	stw	zero,4(r16)
 20049f4:	80000215 	stw	zero,8(r16)
 20049f8:	8080030d 	sth	r2,12(r16)
 20049fc:	80001915 	stw	zero,100(r16)
 2004a00:	8000038d 	sth	zero,14(r16)
 2004a04:	80000415 	stw	zero,16(r16)
 2004a08:	80000515 	stw	zero,20(r16)
 2004a0c:	80000615 	stw	zero,24(r16)
 2004a10:	2005fa00 	call	2005fa0 <memset>
 2004a14:	05808034 	movhi	r22,512
 2004a18:	94400217 	ldw	r17,8(r18)
 2004a1c:	05408034 	movhi	r21,512
 2004a20:	05008034 	movhi	r20,512
 2004a24:	04c08034 	movhi	r19,512
 2004a28:	b59c6304 	addi	r22,r22,29068
 2004a2c:	ad5c7a04 	addi	r21,r21,29160
 2004a30:	a51c9904 	addi	r20,r20,29284
 2004a34:	9cdcb004 	addi	r19,r19,29376
 2004a38:	85800815 	stw	r22,32(r16)
 2004a3c:	85400915 	stw	r21,36(r16)
 2004a40:	85000a15 	stw	r20,40(r16)
 2004a44:	84c00b15 	stw	r19,44(r16)
 2004a48:	84000715 	stw	r16,28(r16)
 2004a4c:	00800284 	movi	r2,10
 2004a50:	8880030d 	sth	r2,12(r17)
 2004a54:	00800044 	movi	r2,1
 2004a58:	b80d883a 	mov	r6,r23
 2004a5c:	89001704 	addi	r4,r17,92
 2004a60:	000b883a 	mov	r5,zero
 2004a64:	88000015 	stw	zero,0(r17)
 2004a68:	88000115 	stw	zero,4(r17)
 2004a6c:	88000215 	stw	zero,8(r17)
 2004a70:	88001915 	stw	zero,100(r17)
 2004a74:	8880038d 	sth	r2,14(r17)
 2004a78:	88000415 	stw	zero,16(r17)
 2004a7c:	88000515 	stw	zero,20(r17)
 2004a80:	88000615 	stw	zero,24(r17)
 2004a84:	2005fa00 	call	2005fa0 <memset>
 2004a88:	94000317 	ldw	r16,12(r18)
 2004a8c:	00800484 	movi	r2,18
 2004a90:	8c400715 	stw	r17,28(r17)
 2004a94:	8d800815 	stw	r22,32(r17)
 2004a98:	8d400915 	stw	r21,36(r17)
 2004a9c:	8d000a15 	stw	r20,40(r17)
 2004aa0:	8cc00b15 	stw	r19,44(r17)
 2004aa4:	8080030d 	sth	r2,12(r16)
 2004aa8:	00800084 	movi	r2,2
 2004aac:	80000015 	stw	zero,0(r16)
 2004ab0:	80000115 	stw	zero,4(r16)
 2004ab4:	80000215 	stw	zero,8(r16)
 2004ab8:	80001915 	stw	zero,100(r16)
 2004abc:	8080038d 	sth	r2,14(r16)
 2004ac0:	80000415 	stw	zero,16(r16)
 2004ac4:	80000515 	stw	zero,20(r16)
 2004ac8:	80000615 	stw	zero,24(r16)
 2004acc:	b80d883a 	mov	r6,r23
 2004ad0:	000b883a 	mov	r5,zero
 2004ad4:	81001704 	addi	r4,r16,92
 2004ad8:	2005fa00 	call	2005fa0 <memset>
 2004adc:	00800044 	movi	r2,1
 2004ae0:	84000715 	stw	r16,28(r16)
 2004ae4:	85800815 	stw	r22,32(r16)
 2004ae8:	85400915 	stw	r21,36(r16)
 2004aec:	85000a15 	stw	r20,40(r16)
 2004af0:	84c00b15 	stw	r19,44(r16)
 2004af4:	90800e15 	stw	r2,56(r18)
 2004af8:	dfc00817 	ldw	ra,32(sp)
 2004afc:	ddc00717 	ldw	r23,28(sp)
 2004b00:	dd800617 	ldw	r22,24(sp)
 2004b04:	dd400517 	ldw	r21,20(sp)
 2004b08:	dd000417 	ldw	r20,16(sp)
 2004b0c:	dcc00317 	ldw	r19,12(sp)
 2004b10:	dc800217 	ldw	r18,8(sp)
 2004b14:	dc400117 	ldw	r17,4(sp)
 2004b18:	dc000017 	ldw	r16,0(sp)
 2004b1c:	dec00904 	addi	sp,sp,36
 2004b20:	f800283a 	ret

02004b24 <__fp_lock>:
 2004b24:	0005883a 	mov	r2,zero
 2004b28:	f800283a 	ret

02004b2c <__sfmoreglue>:
 2004b2c:	defffc04 	addi	sp,sp,-16
 2004b30:	dc400115 	stw	r17,4(sp)
 2004b34:	2c7fffc4 	addi	r17,r5,-1
 2004b38:	8c401a24 	muli	r17,r17,104
 2004b3c:	dc800215 	stw	r18,8(sp)
 2004b40:	2825883a 	mov	r18,r5
 2004b44:	89401d04 	addi	r5,r17,116
 2004b48:	dc000015 	stw	r16,0(sp)
 2004b4c:	dfc00315 	stw	ra,12(sp)
 2004b50:	20055680 	call	2005568 <_malloc_r>
 2004b54:	1021883a 	mov	r16,r2
 2004b58:	10000726 	beq	r2,zero,2004b78 <__sfmoreglue+0x4c>
 2004b5c:	11000304 	addi	r4,r2,12
 2004b60:	10000015 	stw	zero,0(r2)
 2004b64:	14800115 	stw	r18,4(r2)
 2004b68:	11000215 	stw	r4,8(r2)
 2004b6c:	89801a04 	addi	r6,r17,104
 2004b70:	000b883a 	mov	r5,zero
 2004b74:	2005fa00 	call	2005fa0 <memset>
 2004b78:	8005883a 	mov	r2,r16
 2004b7c:	dfc00317 	ldw	ra,12(sp)
 2004b80:	dc800217 	ldw	r18,8(sp)
 2004b84:	dc400117 	ldw	r17,4(sp)
 2004b88:	dc000017 	ldw	r16,0(sp)
 2004b8c:	dec00404 	addi	sp,sp,16
 2004b90:	f800283a 	ret

02004b94 <__sfp>:
 2004b94:	defffb04 	addi	sp,sp,-20
 2004b98:	dc000015 	stw	r16,0(sp)
 2004b9c:	04008134 	movhi	r16,516
 2004ba0:	8415e704 	addi	r16,r16,22428
 2004ba4:	dcc00315 	stw	r19,12(sp)
 2004ba8:	2027883a 	mov	r19,r4
 2004bac:	81000017 	ldw	r4,0(r16)
 2004bb0:	dfc00415 	stw	ra,16(sp)
 2004bb4:	dc800215 	stw	r18,8(sp)
 2004bb8:	20800e17 	ldw	r2,56(r4)
 2004bbc:	dc400115 	stw	r17,4(sp)
 2004bc0:	1000021e 	bne	r2,zero,2004bcc <__sfp+0x38>
 2004bc4:	20049880 	call	2004988 <__sinit.part.1>
 2004bc8:	81000017 	ldw	r4,0(r16)
 2004bcc:	2480b804 	addi	r18,r4,736
 2004bd0:	047fffc4 	movi	r17,-1
 2004bd4:	91000117 	ldw	r4,4(r18)
 2004bd8:	94000217 	ldw	r16,8(r18)
 2004bdc:	213fffc4 	addi	r4,r4,-1
 2004be0:	20000a16 	blt	r4,zero,2004c0c <__sfp+0x78>
 2004be4:	8080030f 	ldh	r2,12(r16)
 2004be8:	10000c26 	beq	r2,zero,2004c1c <__sfp+0x88>
 2004bec:	80c01d04 	addi	r3,r16,116
 2004bf0:	00000206 	br	2004bfc <__sfp+0x68>
 2004bf4:	18bfe60f 	ldh	r2,-104(r3)
 2004bf8:	10000826 	beq	r2,zero,2004c1c <__sfp+0x88>
 2004bfc:	213fffc4 	addi	r4,r4,-1
 2004c00:	1c3ffd04 	addi	r16,r3,-12
 2004c04:	18c01a04 	addi	r3,r3,104
 2004c08:	247ffa1e 	bne	r4,r17,2004bf4 <__alt_mem_mem_0+0xfcfe4bf4>
 2004c0c:	90800017 	ldw	r2,0(r18)
 2004c10:	10001d26 	beq	r2,zero,2004c88 <__sfp+0xf4>
 2004c14:	1025883a 	mov	r18,r2
 2004c18:	003fee06 	br	2004bd4 <__alt_mem_mem_0+0xfcfe4bd4>
 2004c1c:	00bfffc4 	movi	r2,-1
 2004c20:	8080038d 	sth	r2,14(r16)
 2004c24:	00800044 	movi	r2,1
 2004c28:	8080030d 	sth	r2,12(r16)
 2004c2c:	80001915 	stw	zero,100(r16)
 2004c30:	80000015 	stw	zero,0(r16)
 2004c34:	80000215 	stw	zero,8(r16)
 2004c38:	80000115 	stw	zero,4(r16)
 2004c3c:	80000415 	stw	zero,16(r16)
 2004c40:	80000515 	stw	zero,20(r16)
 2004c44:	80000615 	stw	zero,24(r16)
 2004c48:	01800204 	movi	r6,8
 2004c4c:	000b883a 	mov	r5,zero
 2004c50:	81001704 	addi	r4,r16,92
 2004c54:	2005fa00 	call	2005fa0 <memset>
 2004c58:	8005883a 	mov	r2,r16
 2004c5c:	80000c15 	stw	zero,48(r16)
 2004c60:	80000d15 	stw	zero,52(r16)
 2004c64:	80001115 	stw	zero,68(r16)
 2004c68:	80001215 	stw	zero,72(r16)
 2004c6c:	dfc00417 	ldw	ra,16(sp)
 2004c70:	dcc00317 	ldw	r19,12(sp)
 2004c74:	dc800217 	ldw	r18,8(sp)
 2004c78:	dc400117 	ldw	r17,4(sp)
 2004c7c:	dc000017 	ldw	r16,0(sp)
 2004c80:	dec00504 	addi	sp,sp,20
 2004c84:	f800283a 	ret
 2004c88:	01400104 	movi	r5,4
 2004c8c:	9809883a 	mov	r4,r19
 2004c90:	2004b2c0 	call	2004b2c <__sfmoreglue>
 2004c94:	90800015 	stw	r2,0(r18)
 2004c98:	103fde1e 	bne	r2,zero,2004c14 <__alt_mem_mem_0+0xfcfe4c14>
 2004c9c:	00800304 	movi	r2,12
 2004ca0:	98800015 	stw	r2,0(r19)
 2004ca4:	0005883a 	mov	r2,zero
 2004ca8:	003ff006 	br	2004c6c <__alt_mem_mem_0+0xfcfe4c6c>

02004cac <_cleanup>:
 2004cac:	00808134 	movhi	r2,516
 2004cb0:	1095e704 	addi	r2,r2,22428
 2004cb4:	11000017 	ldw	r4,0(r2)
 2004cb8:	01408074 	movhi	r5,513
 2004cbc:	2962ff04 	addi	r5,r5,-29700
 2004cc0:	200520c1 	jmpi	200520c <_fwalk_reent>

02004cc4 <__sinit>:
 2004cc4:	20800e17 	ldw	r2,56(r4)
 2004cc8:	10000126 	beq	r2,zero,2004cd0 <__sinit+0xc>
 2004ccc:	f800283a 	ret
 2004cd0:	20049881 	jmpi	2004988 <__sinit.part.1>

02004cd4 <__sfp_lock_acquire>:
 2004cd4:	f800283a 	ret

02004cd8 <__sfp_lock_release>:
 2004cd8:	f800283a 	ret

02004cdc <__sinit_lock_acquire>:
 2004cdc:	f800283a 	ret

02004ce0 <__sinit_lock_release>:
 2004ce0:	f800283a 	ret

02004ce4 <__fp_lock_all>:
 2004ce4:	00808134 	movhi	r2,516
 2004ce8:	1095e804 	addi	r2,r2,22432
 2004cec:	11000017 	ldw	r4,0(r2)
 2004cf0:	01408034 	movhi	r5,512
 2004cf4:	2952c904 	addi	r5,r5,19236
 2004cf8:	20051481 	jmpi	2005148 <_fwalk>

02004cfc <__fp_unlock_all>:
 2004cfc:	00808134 	movhi	r2,516
 2004d00:	1095e804 	addi	r2,r2,22432
 2004d04:	11000017 	ldw	r4,0(r2)
 2004d08:	01408034 	movhi	r5,512
 2004d0c:	29525d04 	addi	r5,r5,18804
 2004d10:	20051481 	jmpi	2005148 <_fwalk>

02004d14 <_malloc_trim_r>:
 2004d14:	defffb04 	addi	sp,sp,-20
 2004d18:	dcc00315 	stw	r19,12(sp)
 2004d1c:	04c08134 	movhi	r19,516
 2004d20:	dc800215 	stw	r18,8(sp)
 2004d24:	dc400115 	stw	r17,4(sp)
 2004d28:	dc000015 	stw	r16,0(sp)
 2004d2c:	dfc00415 	stw	ra,16(sp)
 2004d30:	2821883a 	mov	r16,r5
 2004d34:	9ccf8604 	addi	r19,r19,15896
 2004d38:	2025883a 	mov	r18,r4
 2004d3c:	200d3180 	call	200d318 <__malloc_lock>
 2004d40:	98800217 	ldw	r2,8(r19)
 2004d44:	14400117 	ldw	r17,4(r2)
 2004d48:	00bfff04 	movi	r2,-4
 2004d4c:	88a2703a 	and	r17,r17,r2
 2004d50:	8c21c83a 	sub	r16,r17,r16
 2004d54:	8403fbc4 	addi	r16,r16,4079
 2004d58:	8020d33a 	srli	r16,r16,12
 2004d5c:	0083ffc4 	movi	r2,4095
 2004d60:	843fffc4 	addi	r16,r16,-1
 2004d64:	8020933a 	slli	r16,r16,12
 2004d68:	1400060e 	bge	r2,r16,2004d84 <_malloc_trim_r+0x70>
 2004d6c:	000b883a 	mov	r5,zero
 2004d70:	9009883a 	mov	r4,r18
 2004d74:	20071380 	call	2007138 <_sbrk_r>
 2004d78:	98c00217 	ldw	r3,8(r19)
 2004d7c:	1c47883a 	add	r3,r3,r17
 2004d80:	10c00a26 	beq	r2,r3,2004dac <_malloc_trim_r+0x98>
 2004d84:	9009883a 	mov	r4,r18
 2004d88:	200d3780 	call	200d378 <__malloc_unlock>
 2004d8c:	0005883a 	mov	r2,zero
 2004d90:	dfc00417 	ldw	ra,16(sp)
 2004d94:	dcc00317 	ldw	r19,12(sp)
 2004d98:	dc800217 	ldw	r18,8(sp)
 2004d9c:	dc400117 	ldw	r17,4(sp)
 2004da0:	dc000017 	ldw	r16,0(sp)
 2004da4:	dec00504 	addi	sp,sp,20
 2004da8:	f800283a 	ret
 2004dac:	040bc83a 	sub	r5,zero,r16
 2004db0:	9009883a 	mov	r4,r18
 2004db4:	20071380 	call	2007138 <_sbrk_r>
 2004db8:	00ffffc4 	movi	r3,-1
 2004dbc:	10c00d26 	beq	r2,r3,2004df4 <_malloc_trim_r+0xe0>
 2004dc0:	00c08134 	movhi	r3,516
 2004dc4:	18de0804 	addi	r3,r3,30752
 2004dc8:	18800017 	ldw	r2,0(r3)
 2004dcc:	99000217 	ldw	r4,8(r19)
 2004dd0:	8c23c83a 	sub	r17,r17,r16
 2004dd4:	8c400054 	ori	r17,r17,1
 2004dd8:	1421c83a 	sub	r16,r2,r16
 2004ddc:	24400115 	stw	r17,4(r4)
 2004de0:	9009883a 	mov	r4,r18
 2004de4:	1c000015 	stw	r16,0(r3)
 2004de8:	200d3780 	call	200d378 <__malloc_unlock>
 2004dec:	00800044 	movi	r2,1
 2004df0:	003fe706 	br	2004d90 <__alt_mem_mem_0+0xfcfe4d90>
 2004df4:	000b883a 	mov	r5,zero
 2004df8:	9009883a 	mov	r4,r18
 2004dfc:	20071380 	call	2007138 <_sbrk_r>
 2004e00:	99000217 	ldw	r4,8(r19)
 2004e04:	014003c4 	movi	r5,15
 2004e08:	1107c83a 	sub	r3,r2,r4
 2004e0c:	28ffdd0e 	bge	r5,r3,2004d84 <__alt_mem_mem_0+0xfcfe4d84>
 2004e10:	01408134 	movhi	r5,516
 2004e14:	2955ea04 	addi	r5,r5,22440
 2004e18:	29400017 	ldw	r5,0(r5)
 2004e1c:	18c00054 	ori	r3,r3,1
 2004e20:	20c00115 	stw	r3,4(r4)
 2004e24:	00c08134 	movhi	r3,516
 2004e28:	1145c83a 	sub	r2,r2,r5
 2004e2c:	18de0804 	addi	r3,r3,30752
 2004e30:	18800015 	stw	r2,0(r3)
 2004e34:	003fd306 	br	2004d84 <__alt_mem_mem_0+0xfcfe4d84>

02004e38 <_free_r>:
 2004e38:	28004126 	beq	r5,zero,2004f40 <_free_r+0x108>
 2004e3c:	defffd04 	addi	sp,sp,-12
 2004e40:	dc400115 	stw	r17,4(sp)
 2004e44:	dc000015 	stw	r16,0(sp)
 2004e48:	2023883a 	mov	r17,r4
 2004e4c:	2821883a 	mov	r16,r5
 2004e50:	dfc00215 	stw	ra,8(sp)
 2004e54:	200d3180 	call	200d318 <__malloc_lock>
 2004e58:	81ffff17 	ldw	r7,-4(r16)
 2004e5c:	00bfff84 	movi	r2,-2
 2004e60:	01008134 	movhi	r4,516
 2004e64:	81bffe04 	addi	r6,r16,-8
 2004e68:	3884703a 	and	r2,r7,r2
 2004e6c:	210f8604 	addi	r4,r4,15896
 2004e70:	308b883a 	add	r5,r6,r2
 2004e74:	2a400117 	ldw	r9,4(r5)
 2004e78:	22000217 	ldw	r8,8(r4)
 2004e7c:	00ffff04 	movi	r3,-4
 2004e80:	48c6703a 	and	r3,r9,r3
 2004e84:	2a005726 	beq	r5,r8,2004fe4 <_free_r+0x1ac>
 2004e88:	28c00115 	stw	r3,4(r5)
 2004e8c:	39c0004c 	andi	r7,r7,1
 2004e90:	3800091e 	bne	r7,zero,2004eb8 <_free_r+0x80>
 2004e94:	823ffe17 	ldw	r8,-8(r16)
 2004e98:	22400204 	addi	r9,r4,8
 2004e9c:	320dc83a 	sub	r6,r6,r8
 2004ea0:	31c00217 	ldw	r7,8(r6)
 2004ea4:	1205883a 	add	r2,r2,r8
 2004ea8:	3a406526 	beq	r7,r9,2005040 <_free_r+0x208>
 2004eac:	32000317 	ldw	r8,12(r6)
 2004eb0:	3a000315 	stw	r8,12(r7)
 2004eb4:	41c00215 	stw	r7,8(r8)
 2004eb8:	28cf883a 	add	r7,r5,r3
 2004ebc:	39c00117 	ldw	r7,4(r7)
 2004ec0:	39c0004c 	andi	r7,r7,1
 2004ec4:	38003a26 	beq	r7,zero,2004fb0 <_free_r+0x178>
 2004ec8:	10c00054 	ori	r3,r2,1
 2004ecc:	30c00115 	stw	r3,4(r6)
 2004ed0:	3087883a 	add	r3,r6,r2
 2004ed4:	18800015 	stw	r2,0(r3)
 2004ed8:	00c07fc4 	movi	r3,511
 2004edc:	18801936 	bltu	r3,r2,2004f44 <_free_r+0x10c>
 2004ee0:	1004d0fa 	srli	r2,r2,3
 2004ee4:	01c00044 	movi	r7,1
 2004ee8:	21400117 	ldw	r5,4(r4)
 2004eec:	10c00044 	addi	r3,r2,1
 2004ef0:	18c7883a 	add	r3,r3,r3
 2004ef4:	1005d0ba 	srai	r2,r2,2
 2004ef8:	18c7883a 	add	r3,r3,r3
 2004efc:	18c7883a 	add	r3,r3,r3
 2004f00:	1907883a 	add	r3,r3,r4
 2004f04:	3884983a 	sll	r2,r7,r2
 2004f08:	19c00017 	ldw	r7,0(r3)
 2004f0c:	1a3ffe04 	addi	r8,r3,-8
 2004f10:	1144b03a 	or	r2,r2,r5
 2004f14:	32000315 	stw	r8,12(r6)
 2004f18:	31c00215 	stw	r7,8(r6)
 2004f1c:	20800115 	stw	r2,4(r4)
 2004f20:	19800015 	stw	r6,0(r3)
 2004f24:	39800315 	stw	r6,12(r7)
 2004f28:	8809883a 	mov	r4,r17
 2004f2c:	dfc00217 	ldw	ra,8(sp)
 2004f30:	dc400117 	ldw	r17,4(sp)
 2004f34:	dc000017 	ldw	r16,0(sp)
 2004f38:	dec00304 	addi	sp,sp,12
 2004f3c:	200d3781 	jmpi	200d378 <__malloc_unlock>
 2004f40:	f800283a 	ret
 2004f44:	100ad27a 	srli	r5,r2,9
 2004f48:	00c00104 	movi	r3,4
 2004f4c:	19404a36 	bltu	r3,r5,2005078 <_free_r+0x240>
 2004f50:	100ad1ba 	srli	r5,r2,6
 2004f54:	28c00e44 	addi	r3,r5,57
 2004f58:	18c7883a 	add	r3,r3,r3
 2004f5c:	29400e04 	addi	r5,r5,56
 2004f60:	18c7883a 	add	r3,r3,r3
 2004f64:	18c7883a 	add	r3,r3,r3
 2004f68:	1909883a 	add	r4,r3,r4
 2004f6c:	20c00017 	ldw	r3,0(r4)
 2004f70:	01c08134 	movhi	r7,516
 2004f74:	213ffe04 	addi	r4,r4,-8
 2004f78:	39cf8604 	addi	r7,r7,15896
 2004f7c:	20c04426 	beq	r4,r3,2005090 <_free_r+0x258>
 2004f80:	01ffff04 	movi	r7,-4
 2004f84:	19400117 	ldw	r5,4(r3)
 2004f88:	29ca703a 	and	r5,r5,r7
 2004f8c:	1140022e 	bgeu	r2,r5,2004f98 <_free_r+0x160>
 2004f90:	18c00217 	ldw	r3,8(r3)
 2004f94:	20fffb1e 	bne	r4,r3,2004f84 <__alt_mem_mem_0+0xfcfe4f84>
 2004f98:	19000317 	ldw	r4,12(r3)
 2004f9c:	31000315 	stw	r4,12(r6)
 2004fa0:	30c00215 	stw	r3,8(r6)
 2004fa4:	21800215 	stw	r6,8(r4)
 2004fa8:	19800315 	stw	r6,12(r3)
 2004fac:	003fde06 	br	2004f28 <__alt_mem_mem_0+0xfcfe4f28>
 2004fb0:	29c00217 	ldw	r7,8(r5)
 2004fb4:	10c5883a 	add	r2,r2,r3
 2004fb8:	00c08134 	movhi	r3,516
 2004fbc:	18cf8804 	addi	r3,r3,15904
 2004fc0:	38c03b26 	beq	r7,r3,20050b0 <_free_r+0x278>
 2004fc4:	2a000317 	ldw	r8,12(r5)
 2004fc8:	11400054 	ori	r5,r2,1
 2004fcc:	3087883a 	add	r3,r6,r2
 2004fd0:	3a000315 	stw	r8,12(r7)
 2004fd4:	41c00215 	stw	r7,8(r8)
 2004fd8:	31400115 	stw	r5,4(r6)
 2004fdc:	18800015 	stw	r2,0(r3)
 2004fe0:	003fbd06 	br	2004ed8 <__alt_mem_mem_0+0xfcfe4ed8>
 2004fe4:	39c0004c 	andi	r7,r7,1
 2004fe8:	10c5883a 	add	r2,r2,r3
 2004fec:	3800071e 	bne	r7,zero,200500c <_free_r+0x1d4>
 2004ff0:	81fffe17 	ldw	r7,-8(r16)
 2004ff4:	31cdc83a 	sub	r6,r6,r7
 2004ff8:	30c00317 	ldw	r3,12(r6)
 2004ffc:	31400217 	ldw	r5,8(r6)
 2005000:	11c5883a 	add	r2,r2,r7
 2005004:	28c00315 	stw	r3,12(r5)
 2005008:	19400215 	stw	r5,8(r3)
 200500c:	10c00054 	ori	r3,r2,1
 2005010:	30c00115 	stw	r3,4(r6)
 2005014:	00c08134 	movhi	r3,516
 2005018:	18d5eb04 	addi	r3,r3,22444
 200501c:	18c00017 	ldw	r3,0(r3)
 2005020:	21800215 	stw	r6,8(r4)
 2005024:	10ffc036 	bltu	r2,r3,2004f28 <__alt_mem_mem_0+0xfcfe4f28>
 2005028:	00808134 	movhi	r2,516
 200502c:	109db404 	addi	r2,r2,30416
 2005030:	11400017 	ldw	r5,0(r2)
 2005034:	8809883a 	mov	r4,r17
 2005038:	2004d140 	call	2004d14 <_malloc_trim_r>
 200503c:	003fba06 	br	2004f28 <__alt_mem_mem_0+0xfcfe4f28>
 2005040:	28c9883a 	add	r4,r5,r3
 2005044:	21000117 	ldw	r4,4(r4)
 2005048:	2100004c 	andi	r4,r4,1
 200504c:	2000391e 	bne	r4,zero,2005134 <_free_r+0x2fc>
 2005050:	29c00217 	ldw	r7,8(r5)
 2005054:	29000317 	ldw	r4,12(r5)
 2005058:	1885883a 	add	r2,r3,r2
 200505c:	10c00054 	ori	r3,r2,1
 2005060:	39000315 	stw	r4,12(r7)
 2005064:	21c00215 	stw	r7,8(r4)
 2005068:	30c00115 	stw	r3,4(r6)
 200506c:	308d883a 	add	r6,r6,r2
 2005070:	30800015 	stw	r2,0(r6)
 2005074:	003fac06 	br	2004f28 <__alt_mem_mem_0+0xfcfe4f28>
 2005078:	00c00504 	movi	r3,20
 200507c:	19401536 	bltu	r3,r5,20050d4 <_free_r+0x29c>
 2005080:	28c01704 	addi	r3,r5,92
 2005084:	18c7883a 	add	r3,r3,r3
 2005088:	294016c4 	addi	r5,r5,91
 200508c:	003fb406 	br	2004f60 <__alt_mem_mem_0+0xfcfe4f60>
 2005090:	280bd0ba 	srai	r5,r5,2
 2005094:	00c00044 	movi	r3,1
 2005098:	38800117 	ldw	r2,4(r7)
 200509c:	194a983a 	sll	r5,r3,r5
 20050a0:	2007883a 	mov	r3,r4
 20050a4:	2884b03a 	or	r2,r5,r2
 20050a8:	38800115 	stw	r2,4(r7)
 20050ac:	003fbb06 	br	2004f9c <__alt_mem_mem_0+0xfcfe4f9c>
 20050b0:	21800515 	stw	r6,20(r4)
 20050b4:	21800415 	stw	r6,16(r4)
 20050b8:	10c00054 	ori	r3,r2,1
 20050bc:	31c00315 	stw	r7,12(r6)
 20050c0:	31c00215 	stw	r7,8(r6)
 20050c4:	30c00115 	stw	r3,4(r6)
 20050c8:	308d883a 	add	r6,r6,r2
 20050cc:	30800015 	stw	r2,0(r6)
 20050d0:	003f9506 	br	2004f28 <__alt_mem_mem_0+0xfcfe4f28>
 20050d4:	00c01504 	movi	r3,84
 20050d8:	19400536 	bltu	r3,r5,20050f0 <_free_r+0x2b8>
 20050dc:	100ad33a 	srli	r5,r2,12
 20050e0:	28c01bc4 	addi	r3,r5,111
 20050e4:	18c7883a 	add	r3,r3,r3
 20050e8:	29401b84 	addi	r5,r5,110
 20050ec:	003f9c06 	br	2004f60 <__alt_mem_mem_0+0xfcfe4f60>
 20050f0:	00c05504 	movi	r3,340
 20050f4:	19400536 	bltu	r3,r5,200510c <_free_r+0x2d4>
 20050f8:	100ad3fa 	srli	r5,r2,15
 20050fc:	28c01e04 	addi	r3,r5,120
 2005100:	18c7883a 	add	r3,r3,r3
 2005104:	29401dc4 	addi	r5,r5,119
 2005108:	003f9506 	br	2004f60 <__alt_mem_mem_0+0xfcfe4f60>
 200510c:	00c15504 	movi	r3,1364
 2005110:	19400536 	bltu	r3,r5,2005128 <_free_r+0x2f0>
 2005114:	100ad4ba 	srli	r5,r2,18
 2005118:	28c01f44 	addi	r3,r5,125
 200511c:	18c7883a 	add	r3,r3,r3
 2005120:	29401f04 	addi	r5,r5,124
 2005124:	003f8e06 	br	2004f60 <__alt_mem_mem_0+0xfcfe4f60>
 2005128:	00c03f84 	movi	r3,254
 200512c:	01401f84 	movi	r5,126
 2005130:	003f8b06 	br	2004f60 <__alt_mem_mem_0+0xfcfe4f60>
 2005134:	10c00054 	ori	r3,r2,1
 2005138:	30c00115 	stw	r3,4(r6)
 200513c:	308d883a 	add	r6,r6,r2
 2005140:	30800015 	stw	r2,0(r6)
 2005144:	003f7806 	br	2004f28 <__alt_mem_mem_0+0xfcfe4f28>

02005148 <_fwalk>:
 2005148:	defff704 	addi	sp,sp,-36
 200514c:	dd000415 	stw	r20,16(sp)
 2005150:	dfc00815 	stw	ra,32(sp)
 2005154:	ddc00715 	stw	r23,28(sp)
 2005158:	dd800615 	stw	r22,24(sp)
 200515c:	dd400515 	stw	r21,20(sp)
 2005160:	dcc00315 	stw	r19,12(sp)
 2005164:	dc800215 	stw	r18,8(sp)
 2005168:	dc400115 	stw	r17,4(sp)
 200516c:	dc000015 	stw	r16,0(sp)
 2005170:	2500b804 	addi	r20,r4,736
 2005174:	a0002326 	beq	r20,zero,2005204 <_fwalk+0xbc>
 2005178:	282b883a 	mov	r21,r5
 200517c:	002f883a 	mov	r23,zero
 2005180:	05800044 	movi	r22,1
 2005184:	04ffffc4 	movi	r19,-1
 2005188:	a4400117 	ldw	r17,4(r20)
 200518c:	a4800217 	ldw	r18,8(r20)
 2005190:	8c7fffc4 	addi	r17,r17,-1
 2005194:	88000d16 	blt	r17,zero,20051cc <_fwalk+0x84>
 2005198:	94000304 	addi	r16,r18,12
 200519c:	94800384 	addi	r18,r18,14
 20051a0:	8080000b 	ldhu	r2,0(r16)
 20051a4:	8c7fffc4 	addi	r17,r17,-1
 20051a8:	813ffd04 	addi	r4,r16,-12
 20051ac:	b080042e 	bgeu	r22,r2,20051c0 <_fwalk+0x78>
 20051b0:	9080000f 	ldh	r2,0(r18)
 20051b4:	14c00226 	beq	r2,r19,20051c0 <_fwalk+0x78>
 20051b8:	a83ee83a 	callr	r21
 20051bc:	b8aeb03a 	or	r23,r23,r2
 20051c0:	84001a04 	addi	r16,r16,104
 20051c4:	94801a04 	addi	r18,r18,104
 20051c8:	8cfff51e 	bne	r17,r19,20051a0 <__alt_mem_mem_0+0xfcfe51a0>
 20051cc:	a5000017 	ldw	r20,0(r20)
 20051d0:	a03fed1e 	bne	r20,zero,2005188 <__alt_mem_mem_0+0xfcfe5188>
 20051d4:	b805883a 	mov	r2,r23
 20051d8:	dfc00817 	ldw	ra,32(sp)
 20051dc:	ddc00717 	ldw	r23,28(sp)
 20051e0:	dd800617 	ldw	r22,24(sp)
 20051e4:	dd400517 	ldw	r21,20(sp)
 20051e8:	dd000417 	ldw	r20,16(sp)
 20051ec:	dcc00317 	ldw	r19,12(sp)
 20051f0:	dc800217 	ldw	r18,8(sp)
 20051f4:	dc400117 	ldw	r17,4(sp)
 20051f8:	dc000017 	ldw	r16,0(sp)
 20051fc:	dec00904 	addi	sp,sp,36
 2005200:	f800283a 	ret
 2005204:	002f883a 	mov	r23,zero
 2005208:	003ff206 	br	20051d4 <__alt_mem_mem_0+0xfcfe51d4>

0200520c <_fwalk_reent>:
 200520c:	defff704 	addi	sp,sp,-36
 2005210:	dd000415 	stw	r20,16(sp)
 2005214:	dfc00815 	stw	ra,32(sp)
 2005218:	ddc00715 	stw	r23,28(sp)
 200521c:	dd800615 	stw	r22,24(sp)
 2005220:	dd400515 	stw	r21,20(sp)
 2005224:	dcc00315 	stw	r19,12(sp)
 2005228:	dc800215 	stw	r18,8(sp)
 200522c:	dc400115 	stw	r17,4(sp)
 2005230:	dc000015 	stw	r16,0(sp)
 2005234:	2500b804 	addi	r20,r4,736
 2005238:	a0002326 	beq	r20,zero,20052c8 <_fwalk_reent+0xbc>
 200523c:	282b883a 	mov	r21,r5
 2005240:	2027883a 	mov	r19,r4
 2005244:	002f883a 	mov	r23,zero
 2005248:	05800044 	movi	r22,1
 200524c:	04bfffc4 	movi	r18,-1
 2005250:	a4400117 	ldw	r17,4(r20)
 2005254:	a4000217 	ldw	r16,8(r20)
 2005258:	8c7fffc4 	addi	r17,r17,-1
 200525c:	88000c16 	blt	r17,zero,2005290 <_fwalk_reent+0x84>
 2005260:	84000304 	addi	r16,r16,12
 2005264:	8080000b 	ldhu	r2,0(r16)
 2005268:	8c7fffc4 	addi	r17,r17,-1
 200526c:	817ffd04 	addi	r5,r16,-12
 2005270:	b080052e 	bgeu	r22,r2,2005288 <_fwalk_reent+0x7c>
 2005274:	8080008f 	ldh	r2,2(r16)
 2005278:	9809883a 	mov	r4,r19
 200527c:	14800226 	beq	r2,r18,2005288 <_fwalk_reent+0x7c>
 2005280:	a83ee83a 	callr	r21
 2005284:	b8aeb03a 	or	r23,r23,r2
 2005288:	84001a04 	addi	r16,r16,104
 200528c:	8cbff51e 	bne	r17,r18,2005264 <__alt_mem_mem_0+0xfcfe5264>
 2005290:	a5000017 	ldw	r20,0(r20)
 2005294:	a03fee1e 	bne	r20,zero,2005250 <__alt_mem_mem_0+0xfcfe5250>
 2005298:	b805883a 	mov	r2,r23
 200529c:	dfc00817 	ldw	ra,32(sp)
 20052a0:	ddc00717 	ldw	r23,28(sp)
 20052a4:	dd800617 	ldw	r22,24(sp)
 20052a8:	dd400517 	ldw	r21,20(sp)
 20052ac:	dd000417 	ldw	r20,16(sp)
 20052b0:	dcc00317 	ldw	r19,12(sp)
 20052b4:	dc800217 	ldw	r18,8(sp)
 20052b8:	dc400117 	ldw	r17,4(sp)
 20052bc:	dc000017 	ldw	r16,0(sp)
 20052c0:	dec00904 	addi	sp,sp,36
 20052c4:	f800283a 	ret
 20052c8:	002f883a 	mov	r23,zero
 20052cc:	003ff206 	br	2005298 <__alt_mem_mem_0+0xfcfe5298>

020052d0 <_setlocale_r>:
 20052d0:	30001b26 	beq	r6,zero,2005340 <_setlocale_r+0x70>
 20052d4:	01408134 	movhi	r5,516
 20052d8:	defffe04 	addi	sp,sp,-8
 20052dc:	29438e04 	addi	r5,r5,3640
 20052e0:	3009883a 	mov	r4,r6
 20052e4:	dc000015 	stw	r16,0(sp)
 20052e8:	dfc00115 	stw	ra,4(sp)
 20052ec:	3021883a 	mov	r16,r6
 20052f0:	20072c80 	call	20072c8 <strcmp>
 20052f4:	1000061e 	bne	r2,zero,2005310 <_setlocale_r+0x40>
 20052f8:	00808134 	movhi	r2,516
 20052fc:	10838d04 	addi	r2,r2,3636
 2005300:	dfc00117 	ldw	ra,4(sp)
 2005304:	dc000017 	ldw	r16,0(sp)
 2005308:	dec00204 	addi	sp,sp,8
 200530c:	f800283a 	ret
 2005310:	01408134 	movhi	r5,516
 2005314:	29438d04 	addi	r5,r5,3636
 2005318:	8009883a 	mov	r4,r16
 200531c:	20072c80 	call	20072c8 <strcmp>
 2005320:	103ff526 	beq	r2,zero,20052f8 <__alt_mem_mem_0+0xfcfe52f8>
 2005324:	01408134 	movhi	r5,516
 2005328:	29437804 	addi	r5,r5,3552
 200532c:	8009883a 	mov	r4,r16
 2005330:	20072c80 	call	20072c8 <strcmp>
 2005334:	103ff026 	beq	r2,zero,20052f8 <__alt_mem_mem_0+0xfcfe52f8>
 2005338:	0005883a 	mov	r2,zero
 200533c:	003ff006 	br	2005300 <__alt_mem_mem_0+0xfcfe5300>
 2005340:	00808134 	movhi	r2,516
 2005344:	10838d04 	addi	r2,r2,3636
 2005348:	f800283a 	ret

0200534c <__locale_charset>:
 200534c:	00808134 	movhi	r2,516
 2005350:	108f7004 	addi	r2,r2,15808
 2005354:	f800283a 	ret

02005358 <__locale_mb_cur_max>:
 2005358:	00808134 	movhi	r2,516
 200535c:	1095e904 	addi	r2,r2,22436
 2005360:	10800017 	ldw	r2,0(r2)
 2005364:	f800283a 	ret

02005368 <__locale_msgcharset>:
 2005368:	00808134 	movhi	r2,516
 200536c:	108f6804 	addi	r2,r2,15776
 2005370:	f800283a 	ret

02005374 <__locale_cjk_lang>:
 2005374:	0005883a 	mov	r2,zero
 2005378:	f800283a 	ret

0200537c <_localeconv_r>:
 200537c:	00808134 	movhi	r2,516
 2005380:	108f7804 	addi	r2,r2,15840
 2005384:	f800283a 	ret

02005388 <setlocale>:
 2005388:	00808134 	movhi	r2,516
 200538c:	1095e804 	addi	r2,r2,22432
 2005390:	280d883a 	mov	r6,r5
 2005394:	200b883a 	mov	r5,r4
 2005398:	11000017 	ldw	r4,0(r2)
 200539c:	20052d01 	jmpi	20052d0 <_setlocale_r>

020053a0 <localeconv>:
 20053a0:	00808134 	movhi	r2,516
 20053a4:	108f7804 	addi	r2,r2,15840
 20053a8:	f800283a 	ret

020053ac <__smakebuf_r>:
 20053ac:	2880030b 	ldhu	r2,12(r5)
 20053b0:	10c0008c 	andi	r3,r2,2
 20053b4:	1800411e 	bne	r3,zero,20054bc <__smakebuf_r+0x110>
 20053b8:	deffec04 	addi	sp,sp,-80
 20053bc:	dc000f15 	stw	r16,60(sp)
 20053c0:	2821883a 	mov	r16,r5
 20053c4:	2940038f 	ldh	r5,14(r5)
 20053c8:	dc401015 	stw	r17,64(sp)
 20053cc:	dfc01315 	stw	ra,76(sp)
 20053d0:	dcc01215 	stw	r19,72(sp)
 20053d4:	dc801115 	stw	r18,68(sp)
 20053d8:	2023883a 	mov	r17,r4
 20053dc:	28001c16 	blt	r5,zero,2005450 <__smakebuf_r+0xa4>
 20053e0:	d80d883a 	mov	r6,sp
 20053e4:	2008f080 	call	2008f08 <_fstat_r>
 20053e8:	10001816 	blt	r2,zero,200544c <__smakebuf_r+0xa0>
 20053ec:	d8800117 	ldw	r2,4(sp)
 20053f0:	00e00014 	movui	r3,32768
 20053f4:	10bc000c 	andi	r2,r2,61440
 20053f8:	14c80020 	cmpeqi	r19,r2,8192
 20053fc:	10c03726 	beq	r2,r3,20054dc <__smakebuf_r+0x130>
 2005400:	80c0030b 	ldhu	r3,12(r16)
 2005404:	18c20014 	ori	r3,r3,2048
 2005408:	80c0030d 	sth	r3,12(r16)
 200540c:	00c80004 	movi	r3,8192
 2005410:	10c0521e 	bne	r2,r3,200555c <__smakebuf_r+0x1b0>
 2005414:	8140038f 	ldh	r5,14(r16)
 2005418:	8809883a 	mov	r4,r17
 200541c:	20094200 	call	2009420 <_isatty_r>
 2005420:	10004c26 	beq	r2,zero,2005554 <__smakebuf_r+0x1a8>
 2005424:	8080030b 	ldhu	r2,12(r16)
 2005428:	80c010c4 	addi	r3,r16,67
 200542c:	80c00015 	stw	r3,0(r16)
 2005430:	10800054 	ori	r2,r2,1
 2005434:	8080030d 	sth	r2,12(r16)
 2005438:	00800044 	movi	r2,1
 200543c:	80c00415 	stw	r3,16(r16)
 2005440:	80800515 	stw	r2,20(r16)
 2005444:	04810004 	movi	r18,1024
 2005448:	00000706 	br	2005468 <__smakebuf_r+0xbc>
 200544c:	8080030b 	ldhu	r2,12(r16)
 2005450:	10c0200c 	andi	r3,r2,128
 2005454:	18001f1e 	bne	r3,zero,20054d4 <__smakebuf_r+0x128>
 2005458:	04810004 	movi	r18,1024
 200545c:	10820014 	ori	r2,r2,2048
 2005460:	8080030d 	sth	r2,12(r16)
 2005464:	0027883a 	mov	r19,zero
 2005468:	900b883a 	mov	r5,r18
 200546c:	8809883a 	mov	r4,r17
 2005470:	20055680 	call	2005568 <_malloc_r>
 2005474:	10002c26 	beq	r2,zero,2005528 <__smakebuf_r+0x17c>
 2005478:	80c0030b 	ldhu	r3,12(r16)
 200547c:	01008034 	movhi	r4,512
 2005480:	21125f04 	addi	r4,r4,18812
 2005484:	89000f15 	stw	r4,60(r17)
 2005488:	18c02014 	ori	r3,r3,128
 200548c:	80c0030d 	sth	r3,12(r16)
 2005490:	80800015 	stw	r2,0(r16)
 2005494:	80800415 	stw	r2,16(r16)
 2005498:	84800515 	stw	r18,20(r16)
 200549c:	98001a1e 	bne	r19,zero,2005508 <__smakebuf_r+0x15c>
 20054a0:	dfc01317 	ldw	ra,76(sp)
 20054a4:	dcc01217 	ldw	r19,72(sp)
 20054a8:	dc801117 	ldw	r18,68(sp)
 20054ac:	dc401017 	ldw	r17,64(sp)
 20054b0:	dc000f17 	ldw	r16,60(sp)
 20054b4:	dec01404 	addi	sp,sp,80
 20054b8:	f800283a 	ret
 20054bc:	288010c4 	addi	r2,r5,67
 20054c0:	28800015 	stw	r2,0(r5)
 20054c4:	28800415 	stw	r2,16(r5)
 20054c8:	00800044 	movi	r2,1
 20054cc:	28800515 	stw	r2,20(r5)
 20054d0:	f800283a 	ret
 20054d4:	04801004 	movi	r18,64
 20054d8:	003fe006 	br	200545c <__alt_mem_mem_0+0xfcfe545c>
 20054dc:	81000a17 	ldw	r4,40(r16)
 20054e0:	00c08034 	movhi	r3,512
 20054e4:	18dc9904 	addi	r3,r3,29284
 20054e8:	20ffc51e 	bne	r4,r3,2005400 <__alt_mem_mem_0+0xfcfe5400>
 20054ec:	8080030b 	ldhu	r2,12(r16)
 20054f0:	04810004 	movi	r18,1024
 20054f4:	84801315 	stw	r18,76(r16)
 20054f8:	1484b03a 	or	r2,r2,r18
 20054fc:	8080030d 	sth	r2,12(r16)
 2005500:	0027883a 	mov	r19,zero
 2005504:	003fd806 	br	2005468 <__alt_mem_mem_0+0xfcfe5468>
 2005508:	8140038f 	ldh	r5,14(r16)
 200550c:	8809883a 	mov	r4,r17
 2005510:	20094200 	call	2009420 <_isatty_r>
 2005514:	103fe226 	beq	r2,zero,20054a0 <__alt_mem_mem_0+0xfcfe54a0>
 2005518:	8080030b 	ldhu	r2,12(r16)
 200551c:	10800054 	ori	r2,r2,1
 2005520:	8080030d 	sth	r2,12(r16)
 2005524:	003fde06 	br	20054a0 <__alt_mem_mem_0+0xfcfe54a0>
 2005528:	8080030b 	ldhu	r2,12(r16)
 200552c:	10c0800c 	andi	r3,r2,512
 2005530:	183fdb1e 	bne	r3,zero,20054a0 <__alt_mem_mem_0+0xfcfe54a0>
 2005534:	10800094 	ori	r2,r2,2
 2005538:	80c010c4 	addi	r3,r16,67
 200553c:	8080030d 	sth	r2,12(r16)
 2005540:	00800044 	movi	r2,1
 2005544:	80c00015 	stw	r3,0(r16)
 2005548:	80c00415 	stw	r3,16(r16)
 200554c:	80800515 	stw	r2,20(r16)
 2005550:	003fd306 	br	20054a0 <__alt_mem_mem_0+0xfcfe54a0>
 2005554:	04810004 	movi	r18,1024
 2005558:	003fc306 	br	2005468 <__alt_mem_mem_0+0xfcfe5468>
 200555c:	0027883a 	mov	r19,zero
 2005560:	04810004 	movi	r18,1024
 2005564:	003fc006 	br	2005468 <__alt_mem_mem_0+0xfcfe5468>

02005568 <_malloc_r>:
 2005568:	defff504 	addi	sp,sp,-44
 200556c:	dc800315 	stw	r18,12(sp)
 2005570:	dfc00a15 	stw	ra,40(sp)
 2005574:	df000915 	stw	fp,36(sp)
 2005578:	ddc00815 	stw	r23,32(sp)
 200557c:	dd800715 	stw	r22,28(sp)
 2005580:	dd400615 	stw	r21,24(sp)
 2005584:	dd000515 	stw	r20,20(sp)
 2005588:	dcc00415 	stw	r19,16(sp)
 200558c:	dc400215 	stw	r17,8(sp)
 2005590:	dc000115 	stw	r16,4(sp)
 2005594:	288002c4 	addi	r2,r5,11
 2005598:	00c00584 	movi	r3,22
 200559c:	2025883a 	mov	r18,r4
 20055a0:	18807f2e 	bgeu	r3,r2,20057a0 <_malloc_r+0x238>
 20055a4:	047ffe04 	movi	r17,-8
 20055a8:	1462703a 	and	r17,r2,r17
 20055ac:	8800a316 	blt	r17,zero,200583c <_malloc_r+0x2d4>
 20055b0:	8940a236 	bltu	r17,r5,200583c <_malloc_r+0x2d4>
 20055b4:	200d3180 	call	200d318 <__malloc_lock>
 20055b8:	00807dc4 	movi	r2,503
 20055bc:	1441e92e 	bgeu	r2,r17,2005d64 <_malloc_r+0x7fc>
 20055c0:	8804d27a 	srli	r2,r17,9
 20055c4:	1000a126 	beq	r2,zero,200584c <_malloc_r+0x2e4>
 20055c8:	00c00104 	movi	r3,4
 20055cc:	18811e36 	bltu	r3,r2,2005a48 <_malloc_r+0x4e0>
 20055d0:	8804d1ba 	srli	r2,r17,6
 20055d4:	12000e44 	addi	r8,r2,57
 20055d8:	11c00e04 	addi	r7,r2,56
 20055dc:	4209883a 	add	r4,r8,r8
 20055e0:	04c08134 	movhi	r19,516
 20055e4:	2109883a 	add	r4,r4,r4
 20055e8:	9ccf8604 	addi	r19,r19,15896
 20055ec:	2109883a 	add	r4,r4,r4
 20055f0:	9909883a 	add	r4,r19,r4
 20055f4:	24000117 	ldw	r16,4(r4)
 20055f8:	213ffe04 	addi	r4,r4,-8
 20055fc:	24009726 	beq	r4,r16,200585c <_malloc_r+0x2f4>
 2005600:	80800117 	ldw	r2,4(r16)
 2005604:	01bfff04 	movi	r6,-4
 2005608:	014003c4 	movi	r5,15
 200560c:	1184703a 	and	r2,r2,r6
 2005610:	1447c83a 	sub	r3,r2,r17
 2005614:	28c00716 	blt	r5,r3,2005634 <_malloc_r+0xcc>
 2005618:	1800920e 	bge	r3,zero,2005864 <_malloc_r+0x2fc>
 200561c:	84000317 	ldw	r16,12(r16)
 2005620:	24008e26 	beq	r4,r16,200585c <_malloc_r+0x2f4>
 2005624:	80800117 	ldw	r2,4(r16)
 2005628:	1184703a 	and	r2,r2,r6
 200562c:	1447c83a 	sub	r3,r2,r17
 2005630:	28fff90e 	bge	r5,r3,2005618 <__alt_mem_mem_0+0xfcfe5618>
 2005634:	3809883a 	mov	r4,r7
 2005638:	01808134 	movhi	r6,516
 200563c:	9c000417 	ldw	r16,16(r19)
 2005640:	318f8604 	addi	r6,r6,15896
 2005644:	32000204 	addi	r8,r6,8
 2005648:	82013426 	beq	r16,r8,2005b1c <_malloc_r+0x5b4>
 200564c:	80c00117 	ldw	r3,4(r16)
 2005650:	00bfff04 	movi	r2,-4
 2005654:	188e703a 	and	r7,r3,r2
 2005658:	3c45c83a 	sub	r2,r7,r17
 200565c:	00c003c4 	movi	r3,15
 2005660:	18811f16 	blt	r3,r2,2005ae0 <_malloc_r+0x578>
 2005664:	32000515 	stw	r8,20(r6)
 2005668:	32000415 	stw	r8,16(r6)
 200566c:	10007f0e 	bge	r2,zero,200586c <_malloc_r+0x304>
 2005670:	00807fc4 	movi	r2,511
 2005674:	11c0fd36 	bltu	r2,r7,2005a6c <_malloc_r+0x504>
 2005678:	3806d0fa 	srli	r3,r7,3
 200567c:	01c00044 	movi	r7,1
 2005680:	30800117 	ldw	r2,4(r6)
 2005684:	19400044 	addi	r5,r3,1
 2005688:	294b883a 	add	r5,r5,r5
 200568c:	1807d0ba 	srai	r3,r3,2
 2005690:	294b883a 	add	r5,r5,r5
 2005694:	294b883a 	add	r5,r5,r5
 2005698:	298b883a 	add	r5,r5,r6
 200569c:	38c6983a 	sll	r3,r7,r3
 20056a0:	29c00017 	ldw	r7,0(r5)
 20056a4:	2a7ffe04 	addi	r9,r5,-8
 20056a8:	1886b03a 	or	r3,r3,r2
 20056ac:	82400315 	stw	r9,12(r16)
 20056b0:	81c00215 	stw	r7,8(r16)
 20056b4:	30c00115 	stw	r3,4(r6)
 20056b8:	2c000015 	stw	r16,0(r5)
 20056bc:	3c000315 	stw	r16,12(r7)
 20056c0:	2005d0ba 	srai	r2,r4,2
 20056c4:	01400044 	movi	r5,1
 20056c8:	288a983a 	sll	r5,r5,r2
 20056cc:	19406f36 	bltu	r3,r5,200588c <_malloc_r+0x324>
 20056d0:	28c4703a 	and	r2,r5,r3
 20056d4:	10000a1e 	bne	r2,zero,2005700 <_malloc_r+0x198>
 20056d8:	00bfff04 	movi	r2,-4
 20056dc:	294b883a 	add	r5,r5,r5
 20056e0:	2088703a 	and	r4,r4,r2
 20056e4:	28c4703a 	and	r2,r5,r3
 20056e8:	21000104 	addi	r4,r4,4
 20056ec:	1000041e 	bne	r2,zero,2005700 <_malloc_r+0x198>
 20056f0:	294b883a 	add	r5,r5,r5
 20056f4:	28c4703a 	and	r2,r5,r3
 20056f8:	21000104 	addi	r4,r4,4
 20056fc:	103ffc26 	beq	r2,zero,20056f0 <__alt_mem_mem_0+0xfcfe56f0>
 2005700:	02bfff04 	movi	r10,-4
 2005704:	024003c4 	movi	r9,15
 2005708:	21800044 	addi	r6,r4,1
 200570c:	318d883a 	add	r6,r6,r6
 2005710:	318d883a 	add	r6,r6,r6
 2005714:	318d883a 	add	r6,r6,r6
 2005718:	998d883a 	add	r6,r19,r6
 200571c:	333ffe04 	addi	r12,r6,-8
 2005720:	2017883a 	mov	r11,r4
 2005724:	31800104 	addi	r6,r6,4
 2005728:	34000017 	ldw	r16,0(r6)
 200572c:	31fffd04 	addi	r7,r6,-12
 2005730:	81c0041e 	bne	r16,r7,2005744 <_malloc_r+0x1dc>
 2005734:	0000fb06 	br	2005b24 <_malloc_r+0x5bc>
 2005738:	1801030e 	bge	r3,zero,2005b48 <_malloc_r+0x5e0>
 200573c:	84000317 	ldw	r16,12(r16)
 2005740:	81c0f826 	beq	r16,r7,2005b24 <_malloc_r+0x5bc>
 2005744:	80800117 	ldw	r2,4(r16)
 2005748:	1284703a 	and	r2,r2,r10
 200574c:	1447c83a 	sub	r3,r2,r17
 2005750:	48fff90e 	bge	r9,r3,2005738 <__alt_mem_mem_0+0xfcfe5738>
 2005754:	80800317 	ldw	r2,12(r16)
 2005758:	81000217 	ldw	r4,8(r16)
 200575c:	89400054 	ori	r5,r17,1
 2005760:	81400115 	stw	r5,4(r16)
 2005764:	20800315 	stw	r2,12(r4)
 2005768:	11000215 	stw	r4,8(r2)
 200576c:	8463883a 	add	r17,r16,r17
 2005770:	9c400515 	stw	r17,20(r19)
 2005774:	9c400415 	stw	r17,16(r19)
 2005778:	18800054 	ori	r2,r3,1
 200577c:	88800115 	stw	r2,4(r17)
 2005780:	8a000315 	stw	r8,12(r17)
 2005784:	8a000215 	stw	r8,8(r17)
 2005788:	88e3883a 	add	r17,r17,r3
 200578c:	88c00015 	stw	r3,0(r17)
 2005790:	9009883a 	mov	r4,r18
 2005794:	200d3780 	call	200d378 <__malloc_unlock>
 2005798:	80800204 	addi	r2,r16,8
 200579c:	00001b06 	br	200580c <_malloc_r+0x2a4>
 20057a0:	04400404 	movi	r17,16
 20057a4:	89402536 	bltu	r17,r5,200583c <_malloc_r+0x2d4>
 20057a8:	200d3180 	call	200d318 <__malloc_lock>
 20057ac:	00800184 	movi	r2,6
 20057b0:	01000084 	movi	r4,2
 20057b4:	04c08134 	movhi	r19,516
 20057b8:	1085883a 	add	r2,r2,r2
 20057bc:	9ccf8604 	addi	r19,r19,15896
 20057c0:	1085883a 	add	r2,r2,r2
 20057c4:	9885883a 	add	r2,r19,r2
 20057c8:	14000117 	ldw	r16,4(r2)
 20057cc:	10fffe04 	addi	r3,r2,-8
 20057d0:	80c0d926 	beq	r16,r3,2005b38 <_malloc_r+0x5d0>
 20057d4:	80c00117 	ldw	r3,4(r16)
 20057d8:	81000317 	ldw	r4,12(r16)
 20057dc:	00bfff04 	movi	r2,-4
 20057e0:	1884703a 	and	r2,r3,r2
 20057e4:	81400217 	ldw	r5,8(r16)
 20057e8:	8085883a 	add	r2,r16,r2
 20057ec:	10c00117 	ldw	r3,4(r2)
 20057f0:	29000315 	stw	r4,12(r5)
 20057f4:	21400215 	stw	r5,8(r4)
 20057f8:	18c00054 	ori	r3,r3,1
 20057fc:	10c00115 	stw	r3,4(r2)
 2005800:	9009883a 	mov	r4,r18
 2005804:	200d3780 	call	200d378 <__malloc_unlock>
 2005808:	80800204 	addi	r2,r16,8
 200580c:	dfc00a17 	ldw	ra,40(sp)
 2005810:	df000917 	ldw	fp,36(sp)
 2005814:	ddc00817 	ldw	r23,32(sp)
 2005818:	dd800717 	ldw	r22,28(sp)
 200581c:	dd400617 	ldw	r21,24(sp)
 2005820:	dd000517 	ldw	r20,20(sp)
 2005824:	dcc00417 	ldw	r19,16(sp)
 2005828:	dc800317 	ldw	r18,12(sp)
 200582c:	dc400217 	ldw	r17,8(sp)
 2005830:	dc000117 	ldw	r16,4(sp)
 2005834:	dec00b04 	addi	sp,sp,44
 2005838:	f800283a 	ret
 200583c:	00800304 	movi	r2,12
 2005840:	90800015 	stw	r2,0(r18)
 2005844:	0005883a 	mov	r2,zero
 2005848:	003ff006 	br	200580c <__alt_mem_mem_0+0xfcfe580c>
 200584c:	01002004 	movi	r4,128
 2005850:	02001004 	movi	r8,64
 2005854:	01c00fc4 	movi	r7,63
 2005858:	003f6106 	br	20055e0 <__alt_mem_mem_0+0xfcfe55e0>
 200585c:	4009883a 	mov	r4,r8
 2005860:	003f7506 	br	2005638 <__alt_mem_mem_0+0xfcfe5638>
 2005864:	81000317 	ldw	r4,12(r16)
 2005868:	003fde06 	br	20057e4 <__alt_mem_mem_0+0xfcfe57e4>
 200586c:	81c5883a 	add	r2,r16,r7
 2005870:	11400117 	ldw	r5,4(r2)
 2005874:	9009883a 	mov	r4,r18
 2005878:	29400054 	ori	r5,r5,1
 200587c:	11400115 	stw	r5,4(r2)
 2005880:	200d3780 	call	200d378 <__malloc_unlock>
 2005884:	80800204 	addi	r2,r16,8
 2005888:	003fe006 	br	200580c <__alt_mem_mem_0+0xfcfe580c>
 200588c:	9c000217 	ldw	r16,8(r19)
 2005890:	00bfff04 	movi	r2,-4
 2005894:	85800117 	ldw	r22,4(r16)
 2005898:	b0ac703a 	and	r22,r22,r2
 200589c:	b4400336 	bltu	r22,r17,20058ac <_malloc_r+0x344>
 20058a0:	b445c83a 	sub	r2,r22,r17
 20058a4:	00c003c4 	movi	r3,15
 20058a8:	18805d16 	blt	r3,r2,2005a20 <_malloc_r+0x4b8>
 20058ac:	05c08134 	movhi	r23,516
 20058b0:	00808134 	movhi	r2,516
 20058b4:	109db404 	addi	r2,r2,30416
 20058b8:	bdd5ea04 	addi	r23,r23,22440
 20058bc:	15400017 	ldw	r21,0(r2)
 20058c0:	b8c00017 	ldw	r3,0(r23)
 20058c4:	00bfffc4 	movi	r2,-1
 20058c8:	858d883a 	add	r6,r16,r22
 20058cc:	8d6b883a 	add	r21,r17,r21
 20058d0:	1880ea26 	beq	r3,r2,2005c7c <_malloc_r+0x714>
 20058d4:	ad4403c4 	addi	r21,r21,4111
 20058d8:	00bc0004 	movi	r2,-4096
 20058dc:	a8aa703a 	and	r21,r21,r2
 20058e0:	a80b883a 	mov	r5,r21
 20058e4:	9009883a 	mov	r4,r18
 20058e8:	d9800015 	stw	r6,0(sp)
 20058ec:	20071380 	call	2007138 <_sbrk_r>
 20058f0:	1029883a 	mov	r20,r2
 20058f4:	00bfffc4 	movi	r2,-1
 20058f8:	d9800017 	ldw	r6,0(sp)
 20058fc:	a080e826 	beq	r20,r2,2005ca0 <_malloc_r+0x738>
 2005900:	a180a636 	bltu	r20,r6,2005b9c <_malloc_r+0x634>
 2005904:	07008134 	movhi	fp,516
 2005908:	e71e0804 	addi	fp,fp,30752
 200590c:	e0800017 	ldw	r2,0(fp)
 2005910:	a887883a 	add	r3,r21,r2
 2005914:	e0c00015 	stw	r3,0(fp)
 2005918:	3500e626 	beq	r6,r20,2005cb4 <_malloc_r+0x74c>
 200591c:	b9000017 	ldw	r4,0(r23)
 2005920:	00bfffc4 	movi	r2,-1
 2005924:	2080ee26 	beq	r4,r2,2005ce0 <_malloc_r+0x778>
 2005928:	a185c83a 	sub	r2,r20,r6
 200592c:	10c5883a 	add	r2,r2,r3
 2005930:	e0800015 	stw	r2,0(fp)
 2005934:	a0c001cc 	andi	r3,r20,7
 2005938:	1800bc26 	beq	r3,zero,2005c2c <_malloc_r+0x6c4>
 200593c:	a0e9c83a 	sub	r20,r20,r3
 2005940:	00840204 	movi	r2,4104
 2005944:	a5000204 	addi	r20,r20,8
 2005948:	10c7c83a 	sub	r3,r2,r3
 200594c:	a545883a 	add	r2,r20,r21
 2005950:	1083ffcc 	andi	r2,r2,4095
 2005954:	18abc83a 	sub	r21,r3,r2
 2005958:	a80b883a 	mov	r5,r21
 200595c:	9009883a 	mov	r4,r18
 2005960:	20071380 	call	2007138 <_sbrk_r>
 2005964:	00ffffc4 	movi	r3,-1
 2005968:	10c0e126 	beq	r2,r3,2005cf0 <_malloc_r+0x788>
 200596c:	1505c83a 	sub	r2,r2,r20
 2005970:	1545883a 	add	r2,r2,r21
 2005974:	10800054 	ori	r2,r2,1
 2005978:	e0c00017 	ldw	r3,0(fp)
 200597c:	9d000215 	stw	r20,8(r19)
 2005980:	a0800115 	stw	r2,4(r20)
 2005984:	a8c7883a 	add	r3,r21,r3
 2005988:	e0c00015 	stw	r3,0(fp)
 200598c:	84c00e26 	beq	r16,r19,20059c8 <_malloc_r+0x460>
 2005990:	018003c4 	movi	r6,15
 2005994:	3580a72e 	bgeu	r6,r22,2005c34 <_malloc_r+0x6cc>
 2005998:	81400117 	ldw	r5,4(r16)
 200599c:	013ffe04 	movi	r4,-8
 20059a0:	b0bffd04 	addi	r2,r22,-12
 20059a4:	1104703a 	and	r2,r2,r4
 20059a8:	2900004c 	andi	r4,r5,1
 20059ac:	2088b03a 	or	r4,r4,r2
 20059b0:	81000115 	stw	r4,4(r16)
 20059b4:	01400144 	movi	r5,5
 20059b8:	8089883a 	add	r4,r16,r2
 20059bc:	21400115 	stw	r5,4(r4)
 20059c0:	21400215 	stw	r5,8(r4)
 20059c4:	3080cd36 	bltu	r6,r2,2005cfc <_malloc_r+0x794>
 20059c8:	00808134 	movhi	r2,516
 20059cc:	109db304 	addi	r2,r2,30412
 20059d0:	11000017 	ldw	r4,0(r2)
 20059d4:	20c0012e 	bgeu	r4,r3,20059dc <_malloc_r+0x474>
 20059d8:	10c00015 	stw	r3,0(r2)
 20059dc:	00808134 	movhi	r2,516
 20059e0:	109db204 	addi	r2,r2,30408
 20059e4:	11000017 	ldw	r4,0(r2)
 20059e8:	9c000217 	ldw	r16,8(r19)
 20059ec:	20c0012e 	bgeu	r4,r3,20059f4 <_malloc_r+0x48c>
 20059f0:	10c00015 	stw	r3,0(r2)
 20059f4:	80c00117 	ldw	r3,4(r16)
 20059f8:	00bfff04 	movi	r2,-4
 20059fc:	1886703a 	and	r3,r3,r2
 2005a00:	1c45c83a 	sub	r2,r3,r17
 2005a04:	1c400236 	bltu	r3,r17,2005a10 <_malloc_r+0x4a8>
 2005a08:	00c003c4 	movi	r3,15
 2005a0c:	18800416 	blt	r3,r2,2005a20 <_malloc_r+0x4b8>
 2005a10:	9009883a 	mov	r4,r18
 2005a14:	200d3780 	call	200d378 <__malloc_unlock>
 2005a18:	0005883a 	mov	r2,zero
 2005a1c:	003f7b06 	br	200580c <__alt_mem_mem_0+0xfcfe580c>
 2005a20:	88c00054 	ori	r3,r17,1
 2005a24:	80c00115 	stw	r3,4(r16)
 2005a28:	8463883a 	add	r17,r16,r17
 2005a2c:	10800054 	ori	r2,r2,1
 2005a30:	9c400215 	stw	r17,8(r19)
 2005a34:	88800115 	stw	r2,4(r17)
 2005a38:	9009883a 	mov	r4,r18
 2005a3c:	200d3780 	call	200d378 <__malloc_unlock>
 2005a40:	80800204 	addi	r2,r16,8
 2005a44:	003f7106 	br	200580c <__alt_mem_mem_0+0xfcfe580c>
 2005a48:	00c00504 	movi	r3,20
 2005a4c:	18804a2e 	bgeu	r3,r2,2005b78 <_malloc_r+0x610>
 2005a50:	00c01504 	movi	r3,84
 2005a54:	18806e36 	bltu	r3,r2,2005c10 <_malloc_r+0x6a8>
 2005a58:	8804d33a 	srli	r2,r17,12
 2005a5c:	12001bc4 	addi	r8,r2,111
 2005a60:	11c01b84 	addi	r7,r2,110
 2005a64:	4209883a 	add	r4,r8,r8
 2005a68:	003edd06 	br	20055e0 <__alt_mem_mem_0+0xfcfe55e0>
 2005a6c:	3804d27a 	srli	r2,r7,9
 2005a70:	00c00104 	movi	r3,4
 2005a74:	1880442e 	bgeu	r3,r2,2005b88 <_malloc_r+0x620>
 2005a78:	00c00504 	movi	r3,20
 2005a7c:	18808136 	bltu	r3,r2,2005c84 <_malloc_r+0x71c>
 2005a80:	11401704 	addi	r5,r2,92
 2005a84:	10c016c4 	addi	r3,r2,91
 2005a88:	294b883a 	add	r5,r5,r5
 2005a8c:	294b883a 	add	r5,r5,r5
 2005a90:	294b883a 	add	r5,r5,r5
 2005a94:	994b883a 	add	r5,r19,r5
 2005a98:	28800017 	ldw	r2,0(r5)
 2005a9c:	01808134 	movhi	r6,516
 2005aa0:	297ffe04 	addi	r5,r5,-8
 2005aa4:	318f8604 	addi	r6,r6,15896
 2005aa8:	28806526 	beq	r5,r2,2005c40 <_malloc_r+0x6d8>
 2005aac:	01bfff04 	movi	r6,-4
 2005ab0:	10c00117 	ldw	r3,4(r2)
 2005ab4:	1986703a 	and	r3,r3,r6
 2005ab8:	38c0022e 	bgeu	r7,r3,2005ac4 <_malloc_r+0x55c>
 2005abc:	10800217 	ldw	r2,8(r2)
 2005ac0:	28bffb1e 	bne	r5,r2,2005ab0 <__alt_mem_mem_0+0xfcfe5ab0>
 2005ac4:	11400317 	ldw	r5,12(r2)
 2005ac8:	98c00117 	ldw	r3,4(r19)
 2005acc:	81400315 	stw	r5,12(r16)
 2005ad0:	80800215 	stw	r2,8(r16)
 2005ad4:	2c000215 	stw	r16,8(r5)
 2005ad8:	14000315 	stw	r16,12(r2)
 2005adc:	003ef806 	br	20056c0 <__alt_mem_mem_0+0xfcfe56c0>
 2005ae0:	88c00054 	ori	r3,r17,1
 2005ae4:	80c00115 	stw	r3,4(r16)
 2005ae8:	8463883a 	add	r17,r16,r17
 2005aec:	34400515 	stw	r17,20(r6)
 2005af0:	34400415 	stw	r17,16(r6)
 2005af4:	10c00054 	ori	r3,r2,1
 2005af8:	8a000315 	stw	r8,12(r17)
 2005afc:	8a000215 	stw	r8,8(r17)
 2005b00:	88c00115 	stw	r3,4(r17)
 2005b04:	88a3883a 	add	r17,r17,r2
 2005b08:	88800015 	stw	r2,0(r17)
 2005b0c:	9009883a 	mov	r4,r18
 2005b10:	200d3780 	call	200d378 <__malloc_unlock>
 2005b14:	80800204 	addi	r2,r16,8
 2005b18:	003f3c06 	br	200580c <__alt_mem_mem_0+0xfcfe580c>
 2005b1c:	30c00117 	ldw	r3,4(r6)
 2005b20:	003ee706 	br	20056c0 <__alt_mem_mem_0+0xfcfe56c0>
 2005b24:	5ac00044 	addi	r11,r11,1
 2005b28:	588000cc 	andi	r2,r11,3
 2005b2c:	31800204 	addi	r6,r6,8
 2005b30:	103efd1e 	bne	r2,zero,2005728 <__alt_mem_mem_0+0xfcfe5728>
 2005b34:	00002406 	br	2005bc8 <_malloc_r+0x660>
 2005b38:	14000317 	ldw	r16,12(r2)
 2005b3c:	143f251e 	bne	r2,r16,20057d4 <__alt_mem_mem_0+0xfcfe57d4>
 2005b40:	21000084 	addi	r4,r4,2
 2005b44:	003ebc06 	br	2005638 <__alt_mem_mem_0+0xfcfe5638>
 2005b48:	8085883a 	add	r2,r16,r2
 2005b4c:	10c00117 	ldw	r3,4(r2)
 2005b50:	81000317 	ldw	r4,12(r16)
 2005b54:	81400217 	ldw	r5,8(r16)
 2005b58:	18c00054 	ori	r3,r3,1
 2005b5c:	10c00115 	stw	r3,4(r2)
 2005b60:	29000315 	stw	r4,12(r5)
 2005b64:	21400215 	stw	r5,8(r4)
 2005b68:	9009883a 	mov	r4,r18
 2005b6c:	200d3780 	call	200d378 <__malloc_unlock>
 2005b70:	80800204 	addi	r2,r16,8
 2005b74:	003f2506 	br	200580c <__alt_mem_mem_0+0xfcfe580c>
 2005b78:	12001704 	addi	r8,r2,92
 2005b7c:	11c016c4 	addi	r7,r2,91
 2005b80:	4209883a 	add	r4,r8,r8
 2005b84:	003e9606 	br	20055e0 <__alt_mem_mem_0+0xfcfe55e0>
 2005b88:	3804d1ba 	srli	r2,r7,6
 2005b8c:	11400e44 	addi	r5,r2,57
 2005b90:	10c00e04 	addi	r3,r2,56
 2005b94:	294b883a 	add	r5,r5,r5
 2005b98:	003fbc06 	br	2005a8c <__alt_mem_mem_0+0xfcfe5a8c>
 2005b9c:	84ff5926 	beq	r16,r19,2005904 <__alt_mem_mem_0+0xfcfe5904>
 2005ba0:	00808134 	movhi	r2,516
 2005ba4:	108f8604 	addi	r2,r2,15896
 2005ba8:	14000217 	ldw	r16,8(r2)
 2005bac:	00bfff04 	movi	r2,-4
 2005bb0:	80c00117 	ldw	r3,4(r16)
 2005bb4:	1886703a 	and	r3,r3,r2
 2005bb8:	003f9106 	br	2005a00 <__alt_mem_mem_0+0xfcfe5a00>
 2005bbc:	60800217 	ldw	r2,8(r12)
 2005bc0:	213fffc4 	addi	r4,r4,-1
 2005bc4:	1300651e 	bne	r2,r12,2005d5c <_malloc_r+0x7f4>
 2005bc8:	208000cc 	andi	r2,r4,3
 2005bcc:	633ffe04 	addi	r12,r12,-8
 2005bd0:	103ffa1e 	bne	r2,zero,2005bbc <__alt_mem_mem_0+0xfcfe5bbc>
 2005bd4:	98800117 	ldw	r2,4(r19)
 2005bd8:	0146303a 	nor	r3,zero,r5
 2005bdc:	1884703a 	and	r2,r3,r2
 2005be0:	98800115 	stw	r2,4(r19)
 2005be4:	294b883a 	add	r5,r5,r5
 2005be8:	117f2836 	bltu	r2,r5,200588c <__alt_mem_mem_0+0xfcfe588c>
 2005bec:	283f2726 	beq	r5,zero,200588c <__alt_mem_mem_0+0xfcfe588c>
 2005bf0:	2886703a 	and	r3,r5,r2
 2005bf4:	5809883a 	mov	r4,r11
 2005bf8:	183ec31e 	bne	r3,zero,2005708 <__alt_mem_mem_0+0xfcfe5708>
 2005bfc:	294b883a 	add	r5,r5,r5
 2005c00:	2886703a 	and	r3,r5,r2
 2005c04:	21000104 	addi	r4,r4,4
 2005c08:	183ffc26 	beq	r3,zero,2005bfc <__alt_mem_mem_0+0xfcfe5bfc>
 2005c0c:	003ebe06 	br	2005708 <__alt_mem_mem_0+0xfcfe5708>
 2005c10:	00c05504 	movi	r3,340
 2005c14:	18801236 	bltu	r3,r2,2005c60 <_malloc_r+0x6f8>
 2005c18:	8804d3fa 	srli	r2,r17,15
 2005c1c:	12001e04 	addi	r8,r2,120
 2005c20:	11c01dc4 	addi	r7,r2,119
 2005c24:	4209883a 	add	r4,r8,r8
 2005c28:	003e6d06 	br	20055e0 <__alt_mem_mem_0+0xfcfe55e0>
 2005c2c:	00c40004 	movi	r3,4096
 2005c30:	003f4606 	br	200594c <__alt_mem_mem_0+0xfcfe594c>
 2005c34:	00800044 	movi	r2,1
 2005c38:	a0800115 	stw	r2,4(r20)
 2005c3c:	003f7406 	br	2005a10 <__alt_mem_mem_0+0xfcfe5a10>
 2005c40:	1805d0ba 	srai	r2,r3,2
 2005c44:	01c00044 	movi	r7,1
 2005c48:	30c00117 	ldw	r3,4(r6)
 2005c4c:	388e983a 	sll	r7,r7,r2
 2005c50:	2805883a 	mov	r2,r5
 2005c54:	38c6b03a 	or	r3,r7,r3
 2005c58:	30c00115 	stw	r3,4(r6)
 2005c5c:	003f9b06 	br	2005acc <__alt_mem_mem_0+0xfcfe5acc>
 2005c60:	00c15504 	movi	r3,1364
 2005c64:	18801a36 	bltu	r3,r2,2005cd0 <_malloc_r+0x768>
 2005c68:	8804d4ba 	srli	r2,r17,18
 2005c6c:	12001f44 	addi	r8,r2,125
 2005c70:	11c01f04 	addi	r7,r2,124
 2005c74:	4209883a 	add	r4,r8,r8
 2005c78:	003e5906 	br	20055e0 <__alt_mem_mem_0+0xfcfe55e0>
 2005c7c:	ad400404 	addi	r21,r21,16
 2005c80:	003f1706 	br	20058e0 <__alt_mem_mem_0+0xfcfe58e0>
 2005c84:	00c01504 	movi	r3,84
 2005c88:	18802336 	bltu	r3,r2,2005d18 <_malloc_r+0x7b0>
 2005c8c:	3804d33a 	srli	r2,r7,12
 2005c90:	11401bc4 	addi	r5,r2,111
 2005c94:	10c01b84 	addi	r3,r2,110
 2005c98:	294b883a 	add	r5,r5,r5
 2005c9c:	003f7b06 	br	2005a8c <__alt_mem_mem_0+0xfcfe5a8c>
 2005ca0:	9c000217 	ldw	r16,8(r19)
 2005ca4:	00bfff04 	movi	r2,-4
 2005ca8:	80c00117 	ldw	r3,4(r16)
 2005cac:	1886703a 	and	r3,r3,r2
 2005cb0:	003f5306 	br	2005a00 <__alt_mem_mem_0+0xfcfe5a00>
 2005cb4:	3083ffcc 	andi	r2,r6,4095
 2005cb8:	103f181e 	bne	r2,zero,200591c <__alt_mem_mem_0+0xfcfe591c>
 2005cbc:	99000217 	ldw	r4,8(r19)
 2005cc0:	b545883a 	add	r2,r22,r21
 2005cc4:	10800054 	ori	r2,r2,1
 2005cc8:	20800115 	stw	r2,4(r4)
 2005ccc:	003f3e06 	br	20059c8 <__alt_mem_mem_0+0xfcfe59c8>
 2005cd0:	01003f84 	movi	r4,254
 2005cd4:	02001fc4 	movi	r8,127
 2005cd8:	01c01f84 	movi	r7,126
 2005cdc:	003e4006 	br	20055e0 <__alt_mem_mem_0+0xfcfe55e0>
 2005ce0:	00808134 	movhi	r2,516
 2005ce4:	1095ea04 	addi	r2,r2,22440
 2005ce8:	15000015 	stw	r20,0(r2)
 2005cec:	003f1106 	br	2005934 <__alt_mem_mem_0+0xfcfe5934>
 2005cf0:	00800044 	movi	r2,1
 2005cf4:	002b883a 	mov	r21,zero
 2005cf8:	003f1f06 	br	2005978 <__alt_mem_mem_0+0xfcfe5978>
 2005cfc:	81400204 	addi	r5,r16,8
 2005d00:	9009883a 	mov	r4,r18
 2005d04:	2004e380 	call	2004e38 <_free_r>
 2005d08:	00808134 	movhi	r2,516
 2005d0c:	109e0804 	addi	r2,r2,30752
 2005d10:	10c00017 	ldw	r3,0(r2)
 2005d14:	003f2c06 	br	20059c8 <__alt_mem_mem_0+0xfcfe59c8>
 2005d18:	00c05504 	movi	r3,340
 2005d1c:	18800536 	bltu	r3,r2,2005d34 <_malloc_r+0x7cc>
 2005d20:	3804d3fa 	srli	r2,r7,15
 2005d24:	11401e04 	addi	r5,r2,120
 2005d28:	10c01dc4 	addi	r3,r2,119
 2005d2c:	294b883a 	add	r5,r5,r5
 2005d30:	003f5606 	br	2005a8c <__alt_mem_mem_0+0xfcfe5a8c>
 2005d34:	00c15504 	movi	r3,1364
 2005d38:	18800536 	bltu	r3,r2,2005d50 <_malloc_r+0x7e8>
 2005d3c:	3804d4ba 	srli	r2,r7,18
 2005d40:	11401f44 	addi	r5,r2,125
 2005d44:	10c01f04 	addi	r3,r2,124
 2005d48:	294b883a 	add	r5,r5,r5
 2005d4c:	003f4f06 	br	2005a8c <__alt_mem_mem_0+0xfcfe5a8c>
 2005d50:	01403f84 	movi	r5,254
 2005d54:	00c01f84 	movi	r3,126
 2005d58:	003f4c06 	br	2005a8c <__alt_mem_mem_0+0xfcfe5a8c>
 2005d5c:	98800117 	ldw	r2,4(r19)
 2005d60:	003fa006 	br	2005be4 <__alt_mem_mem_0+0xfcfe5be4>
 2005d64:	8808d0fa 	srli	r4,r17,3
 2005d68:	20800044 	addi	r2,r4,1
 2005d6c:	1085883a 	add	r2,r2,r2
 2005d70:	003e9006 	br	20057b4 <__alt_mem_mem_0+0xfcfe57b4>

02005d74 <memchr>:
 2005d74:	208000cc 	andi	r2,r4,3
 2005d78:	280f883a 	mov	r7,r5
 2005d7c:	10003426 	beq	r2,zero,2005e50 <memchr+0xdc>
 2005d80:	30bfffc4 	addi	r2,r6,-1
 2005d84:	30001a26 	beq	r6,zero,2005df0 <memchr+0x7c>
 2005d88:	20c00003 	ldbu	r3,0(r4)
 2005d8c:	29803fcc 	andi	r6,r5,255
 2005d90:	30c0051e 	bne	r6,r3,2005da8 <memchr+0x34>
 2005d94:	00001806 	br	2005df8 <memchr+0x84>
 2005d98:	10001526 	beq	r2,zero,2005df0 <memchr+0x7c>
 2005d9c:	20c00003 	ldbu	r3,0(r4)
 2005da0:	10bfffc4 	addi	r2,r2,-1
 2005da4:	30c01426 	beq	r6,r3,2005df8 <memchr+0x84>
 2005da8:	21000044 	addi	r4,r4,1
 2005dac:	20c000cc 	andi	r3,r4,3
 2005db0:	183ff91e 	bne	r3,zero,2005d98 <__alt_mem_mem_0+0xfcfe5d98>
 2005db4:	020000c4 	movi	r8,3
 2005db8:	40801136 	bltu	r8,r2,2005e00 <memchr+0x8c>
 2005dbc:	10000c26 	beq	r2,zero,2005df0 <memchr+0x7c>
 2005dc0:	20c00003 	ldbu	r3,0(r4)
 2005dc4:	29403fcc 	andi	r5,r5,255
 2005dc8:	28c00b26 	beq	r5,r3,2005df8 <memchr+0x84>
 2005dcc:	20c00044 	addi	r3,r4,1
 2005dd0:	39803fcc 	andi	r6,r7,255
 2005dd4:	2089883a 	add	r4,r4,r2
 2005dd8:	00000306 	br	2005de8 <memchr+0x74>
 2005ddc:	18c00044 	addi	r3,r3,1
 2005de0:	197fffc3 	ldbu	r5,-1(r3)
 2005de4:	31400526 	beq	r6,r5,2005dfc <memchr+0x88>
 2005de8:	1805883a 	mov	r2,r3
 2005dec:	20fffb1e 	bne	r4,r3,2005ddc <__alt_mem_mem_0+0xfcfe5ddc>
 2005df0:	0005883a 	mov	r2,zero
 2005df4:	f800283a 	ret
 2005df8:	2005883a 	mov	r2,r4
 2005dfc:	f800283a 	ret
 2005e00:	28c03fcc 	andi	r3,r5,255
 2005e04:	1812923a 	slli	r9,r3,8
 2005e08:	02ffbff4 	movhi	r11,65279
 2005e0c:	02a02074 	movhi	r10,32897
 2005e10:	48d2b03a 	or	r9,r9,r3
 2005e14:	4806943a 	slli	r3,r9,16
 2005e18:	5affbfc4 	addi	r11,r11,-257
 2005e1c:	52a02004 	addi	r10,r10,-32640
 2005e20:	48d2b03a 	or	r9,r9,r3
 2005e24:	20c00017 	ldw	r3,0(r4)
 2005e28:	48c6f03a 	xor	r3,r9,r3
 2005e2c:	1acd883a 	add	r6,r3,r11
 2005e30:	00c6303a 	nor	r3,zero,r3
 2005e34:	30c6703a 	and	r3,r6,r3
 2005e38:	1a86703a 	and	r3,r3,r10
 2005e3c:	183fe01e 	bne	r3,zero,2005dc0 <__alt_mem_mem_0+0xfcfe5dc0>
 2005e40:	10bfff04 	addi	r2,r2,-4
 2005e44:	21000104 	addi	r4,r4,4
 2005e48:	40bff636 	bltu	r8,r2,2005e24 <__alt_mem_mem_0+0xfcfe5e24>
 2005e4c:	003fdb06 	br	2005dbc <__alt_mem_mem_0+0xfcfe5dbc>
 2005e50:	3005883a 	mov	r2,r6
 2005e54:	003fd706 	br	2005db4 <__alt_mem_mem_0+0xfcfe5db4>

02005e58 <memcpy>:
 2005e58:	defffd04 	addi	sp,sp,-12
 2005e5c:	dfc00215 	stw	ra,8(sp)
 2005e60:	dc400115 	stw	r17,4(sp)
 2005e64:	dc000015 	stw	r16,0(sp)
 2005e68:	00c003c4 	movi	r3,15
 2005e6c:	2005883a 	mov	r2,r4
 2005e70:	1980452e 	bgeu	r3,r6,2005f88 <memcpy+0x130>
 2005e74:	2906b03a 	or	r3,r5,r4
 2005e78:	18c000cc 	andi	r3,r3,3
 2005e7c:	1800441e 	bne	r3,zero,2005f90 <memcpy+0x138>
 2005e80:	347ffc04 	addi	r17,r6,-16
 2005e84:	8822d13a 	srli	r17,r17,4
 2005e88:	28c00104 	addi	r3,r5,4
 2005e8c:	23400104 	addi	r13,r4,4
 2005e90:	8820913a 	slli	r16,r17,4
 2005e94:	2b000204 	addi	r12,r5,8
 2005e98:	22c00204 	addi	r11,r4,8
 2005e9c:	84000504 	addi	r16,r16,20
 2005ea0:	2a800304 	addi	r10,r5,12
 2005ea4:	22400304 	addi	r9,r4,12
 2005ea8:	2c21883a 	add	r16,r5,r16
 2005eac:	2811883a 	mov	r8,r5
 2005eb0:	200f883a 	mov	r7,r4
 2005eb4:	41000017 	ldw	r4,0(r8)
 2005eb8:	1fc00017 	ldw	ra,0(r3)
 2005ebc:	63c00017 	ldw	r15,0(r12)
 2005ec0:	39000015 	stw	r4,0(r7)
 2005ec4:	53800017 	ldw	r14,0(r10)
 2005ec8:	6fc00015 	stw	ra,0(r13)
 2005ecc:	5bc00015 	stw	r15,0(r11)
 2005ed0:	4b800015 	stw	r14,0(r9)
 2005ed4:	18c00404 	addi	r3,r3,16
 2005ed8:	39c00404 	addi	r7,r7,16
 2005edc:	42000404 	addi	r8,r8,16
 2005ee0:	6b400404 	addi	r13,r13,16
 2005ee4:	63000404 	addi	r12,r12,16
 2005ee8:	5ac00404 	addi	r11,r11,16
 2005eec:	52800404 	addi	r10,r10,16
 2005ef0:	4a400404 	addi	r9,r9,16
 2005ef4:	1c3fef1e 	bne	r3,r16,2005eb4 <__alt_mem_mem_0+0xfcfe5eb4>
 2005ef8:	89c00044 	addi	r7,r17,1
 2005efc:	380e913a 	slli	r7,r7,4
 2005f00:	310003cc 	andi	r4,r6,15
 2005f04:	02c000c4 	movi	r11,3
 2005f08:	11c7883a 	add	r3,r2,r7
 2005f0c:	29cb883a 	add	r5,r5,r7
 2005f10:	5900212e 	bgeu	r11,r4,2005f98 <memcpy+0x140>
 2005f14:	1813883a 	mov	r9,r3
 2005f18:	2811883a 	mov	r8,r5
 2005f1c:	200f883a 	mov	r7,r4
 2005f20:	42800017 	ldw	r10,0(r8)
 2005f24:	4a400104 	addi	r9,r9,4
 2005f28:	39ffff04 	addi	r7,r7,-4
 2005f2c:	4abfff15 	stw	r10,-4(r9)
 2005f30:	42000104 	addi	r8,r8,4
 2005f34:	59fffa36 	bltu	r11,r7,2005f20 <__alt_mem_mem_0+0xfcfe5f20>
 2005f38:	213fff04 	addi	r4,r4,-4
 2005f3c:	2008d0ba 	srli	r4,r4,2
 2005f40:	318000cc 	andi	r6,r6,3
 2005f44:	21000044 	addi	r4,r4,1
 2005f48:	2109883a 	add	r4,r4,r4
 2005f4c:	2109883a 	add	r4,r4,r4
 2005f50:	1907883a 	add	r3,r3,r4
 2005f54:	290b883a 	add	r5,r5,r4
 2005f58:	30000626 	beq	r6,zero,2005f74 <memcpy+0x11c>
 2005f5c:	198d883a 	add	r6,r3,r6
 2005f60:	29c00003 	ldbu	r7,0(r5)
 2005f64:	18c00044 	addi	r3,r3,1
 2005f68:	29400044 	addi	r5,r5,1
 2005f6c:	19ffffc5 	stb	r7,-1(r3)
 2005f70:	19bffb1e 	bne	r3,r6,2005f60 <__alt_mem_mem_0+0xfcfe5f60>
 2005f74:	dfc00217 	ldw	ra,8(sp)
 2005f78:	dc400117 	ldw	r17,4(sp)
 2005f7c:	dc000017 	ldw	r16,0(sp)
 2005f80:	dec00304 	addi	sp,sp,12
 2005f84:	f800283a 	ret
 2005f88:	2007883a 	mov	r3,r4
 2005f8c:	003ff206 	br	2005f58 <__alt_mem_mem_0+0xfcfe5f58>
 2005f90:	2007883a 	mov	r3,r4
 2005f94:	003ff106 	br	2005f5c <__alt_mem_mem_0+0xfcfe5f5c>
 2005f98:	200d883a 	mov	r6,r4
 2005f9c:	003fee06 	br	2005f58 <__alt_mem_mem_0+0xfcfe5f58>

02005fa0 <memset>:
 2005fa0:	20c000cc 	andi	r3,r4,3
 2005fa4:	2005883a 	mov	r2,r4
 2005fa8:	18004426 	beq	r3,zero,20060bc <memset+0x11c>
 2005fac:	31ffffc4 	addi	r7,r6,-1
 2005fb0:	30004026 	beq	r6,zero,20060b4 <memset+0x114>
 2005fb4:	2813883a 	mov	r9,r5
 2005fb8:	200d883a 	mov	r6,r4
 2005fbc:	2007883a 	mov	r3,r4
 2005fc0:	00000406 	br	2005fd4 <memset+0x34>
 2005fc4:	3a3fffc4 	addi	r8,r7,-1
 2005fc8:	31800044 	addi	r6,r6,1
 2005fcc:	38003926 	beq	r7,zero,20060b4 <memset+0x114>
 2005fd0:	400f883a 	mov	r7,r8
 2005fd4:	18c00044 	addi	r3,r3,1
 2005fd8:	32400005 	stb	r9,0(r6)
 2005fdc:	1a0000cc 	andi	r8,r3,3
 2005fe0:	403ff81e 	bne	r8,zero,2005fc4 <__alt_mem_mem_0+0xfcfe5fc4>
 2005fe4:	010000c4 	movi	r4,3
 2005fe8:	21c02d2e 	bgeu	r4,r7,20060a0 <memset+0x100>
 2005fec:	29003fcc 	andi	r4,r5,255
 2005ff0:	200c923a 	slli	r6,r4,8
 2005ff4:	3108b03a 	or	r4,r6,r4
 2005ff8:	200c943a 	slli	r6,r4,16
 2005ffc:	218cb03a 	or	r6,r4,r6
 2006000:	010003c4 	movi	r4,15
 2006004:	21c0182e 	bgeu	r4,r7,2006068 <memset+0xc8>
 2006008:	3b3ffc04 	addi	r12,r7,-16
 200600c:	6018d13a 	srli	r12,r12,4
 2006010:	1a000104 	addi	r8,r3,4
 2006014:	1ac00204 	addi	r11,r3,8
 2006018:	6008913a 	slli	r4,r12,4
 200601c:	1a800304 	addi	r10,r3,12
 2006020:	1813883a 	mov	r9,r3
 2006024:	21000504 	addi	r4,r4,20
 2006028:	1909883a 	add	r4,r3,r4
 200602c:	49800015 	stw	r6,0(r9)
 2006030:	41800015 	stw	r6,0(r8)
 2006034:	59800015 	stw	r6,0(r11)
 2006038:	51800015 	stw	r6,0(r10)
 200603c:	42000404 	addi	r8,r8,16
 2006040:	4a400404 	addi	r9,r9,16
 2006044:	5ac00404 	addi	r11,r11,16
 2006048:	52800404 	addi	r10,r10,16
 200604c:	413ff71e 	bne	r8,r4,200602c <__alt_mem_mem_0+0xfcfe602c>
 2006050:	63000044 	addi	r12,r12,1
 2006054:	6018913a 	slli	r12,r12,4
 2006058:	39c003cc 	andi	r7,r7,15
 200605c:	010000c4 	movi	r4,3
 2006060:	1b07883a 	add	r3,r3,r12
 2006064:	21c00e2e 	bgeu	r4,r7,20060a0 <memset+0x100>
 2006068:	1813883a 	mov	r9,r3
 200606c:	3811883a 	mov	r8,r7
 2006070:	010000c4 	movi	r4,3
 2006074:	49800015 	stw	r6,0(r9)
 2006078:	423fff04 	addi	r8,r8,-4
 200607c:	4a400104 	addi	r9,r9,4
 2006080:	223ffc36 	bltu	r4,r8,2006074 <__alt_mem_mem_0+0xfcfe6074>
 2006084:	393fff04 	addi	r4,r7,-4
 2006088:	2008d0ba 	srli	r4,r4,2
 200608c:	39c000cc 	andi	r7,r7,3
 2006090:	21000044 	addi	r4,r4,1
 2006094:	2109883a 	add	r4,r4,r4
 2006098:	2109883a 	add	r4,r4,r4
 200609c:	1907883a 	add	r3,r3,r4
 20060a0:	38000526 	beq	r7,zero,20060b8 <memset+0x118>
 20060a4:	19cf883a 	add	r7,r3,r7
 20060a8:	19400005 	stb	r5,0(r3)
 20060ac:	18c00044 	addi	r3,r3,1
 20060b0:	38fffd1e 	bne	r7,r3,20060a8 <__alt_mem_mem_0+0xfcfe60a8>
 20060b4:	f800283a 	ret
 20060b8:	f800283a 	ret
 20060bc:	2007883a 	mov	r3,r4
 20060c0:	300f883a 	mov	r7,r6
 20060c4:	003fc706 	br	2005fe4 <__alt_mem_mem_0+0xfcfe5fe4>

020060c8 <_Balloc>:
 20060c8:	20801317 	ldw	r2,76(r4)
 20060cc:	defffc04 	addi	sp,sp,-16
 20060d0:	dc400115 	stw	r17,4(sp)
 20060d4:	dc000015 	stw	r16,0(sp)
 20060d8:	dfc00315 	stw	ra,12(sp)
 20060dc:	dc800215 	stw	r18,8(sp)
 20060e0:	2023883a 	mov	r17,r4
 20060e4:	2821883a 	mov	r16,r5
 20060e8:	10000f26 	beq	r2,zero,2006128 <_Balloc+0x60>
 20060ec:	8407883a 	add	r3,r16,r16
 20060f0:	18c7883a 	add	r3,r3,r3
 20060f4:	10c7883a 	add	r3,r2,r3
 20060f8:	18800017 	ldw	r2,0(r3)
 20060fc:	10001126 	beq	r2,zero,2006144 <_Balloc+0x7c>
 2006100:	11000017 	ldw	r4,0(r2)
 2006104:	19000015 	stw	r4,0(r3)
 2006108:	10000415 	stw	zero,16(r2)
 200610c:	10000315 	stw	zero,12(r2)
 2006110:	dfc00317 	ldw	ra,12(sp)
 2006114:	dc800217 	ldw	r18,8(sp)
 2006118:	dc400117 	ldw	r17,4(sp)
 200611c:	dc000017 	ldw	r16,0(sp)
 2006120:	dec00404 	addi	sp,sp,16
 2006124:	f800283a 	ret
 2006128:	01800844 	movi	r6,33
 200612c:	01400104 	movi	r5,4
 2006130:	2008b380 	call	2008b38 <_calloc_r>
 2006134:	88801315 	stw	r2,76(r17)
 2006138:	103fec1e 	bne	r2,zero,20060ec <__alt_mem_mem_0+0xfcfe60ec>
 200613c:	0005883a 	mov	r2,zero
 2006140:	003ff306 	br	2006110 <__alt_mem_mem_0+0xfcfe6110>
 2006144:	01400044 	movi	r5,1
 2006148:	2c24983a 	sll	r18,r5,r16
 200614c:	8809883a 	mov	r4,r17
 2006150:	91800144 	addi	r6,r18,5
 2006154:	318d883a 	add	r6,r6,r6
 2006158:	318d883a 	add	r6,r6,r6
 200615c:	2008b380 	call	2008b38 <_calloc_r>
 2006160:	103ff626 	beq	r2,zero,200613c <__alt_mem_mem_0+0xfcfe613c>
 2006164:	14000115 	stw	r16,4(r2)
 2006168:	14800215 	stw	r18,8(r2)
 200616c:	003fe606 	br	2006108 <__alt_mem_mem_0+0xfcfe6108>

02006170 <_Bfree>:
 2006170:	28000826 	beq	r5,zero,2006194 <_Bfree+0x24>
 2006174:	28c00117 	ldw	r3,4(r5)
 2006178:	20801317 	ldw	r2,76(r4)
 200617c:	18c7883a 	add	r3,r3,r3
 2006180:	18c7883a 	add	r3,r3,r3
 2006184:	10c5883a 	add	r2,r2,r3
 2006188:	10c00017 	ldw	r3,0(r2)
 200618c:	28c00015 	stw	r3,0(r5)
 2006190:	11400015 	stw	r5,0(r2)
 2006194:	f800283a 	ret

02006198 <__multadd>:
 2006198:	defffa04 	addi	sp,sp,-24
 200619c:	dc800315 	stw	r18,12(sp)
 20061a0:	dc400215 	stw	r17,8(sp)
 20061a4:	dc000115 	stw	r16,4(sp)
 20061a8:	2823883a 	mov	r17,r5
 20061ac:	2c000417 	ldw	r16,16(r5)
 20061b0:	dfc00515 	stw	ra,20(sp)
 20061b4:	dcc00415 	stw	r19,16(sp)
 20061b8:	2025883a 	mov	r18,r4
 20061bc:	29400504 	addi	r5,r5,20
 20061c0:	0011883a 	mov	r8,zero
 20061c4:	28c00017 	ldw	r3,0(r5)
 20061c8:	29400104 	addi	r5,r5,4
 20061cc:	42000044 	addi	r8,r8,1
 20061d0:	18bfffcc 	andi	r2,r3,65535
 20061d4:	1185383a 	mul	r2,r2,r6
 20061d8:	1806d43a 	srli	r3,r3,16
 20061dc:	11cf883a 	add	r7,r2,r7
 20061e0:	3808d43a 	srli	r4,r7,16
 20061e4:	1987383a 	mul	r3,r3,r6
 20061e8:	38bfffcc 	andi	r2,r7,65535
 20061ec:	1907883a 	add	r3,r3,r4
 20061f0:	1808943a 	slli	r4,r3,16
 20061f4:	180ed43a 	srli	r7,r3,16
 20061f8:	2085883a 	add	r2,r4,r2
 20061fc:	28bfff15 	stw	r2,-4(r5)
 2006200:	443ff016 	blt	r8,r16,20061c4 <__alt_mem_mem_0+0xfcfe61c4>
 2006204:	38000926 	beq	r7,zero,200622c <__multadd+0x94>
 2006208:	88800217 	ldw	r2,8(r17)
 200620c:	80800f0e 	bge	r16,r2,200624c <__multadd+0xb4>
 2006210:	80800144 	addi	r2,r16,5
 2006214:	1085883a 	add	r2,r2,r2
 2006218:	1085883a 	add	r2,r2,r2
 200621c:	8885883a 	add	r2,r17,r2
 2006220:	11c00015 	stw	r7,0(r2)
 2006224:	84000044 	addi	r16,r16,1
 2006228:	8c000415 	stw	r16,16(r17)
 200622c:	8805883a 	mov	r2,r17
 2006230:	dfc00517 	ldw	ra,20(sp)
 2006234:	dcc00417 	ldw	r19,16(sp)
 2006238:	dc800317 	ldw	r18,12(sp)
 200623c:	dc400217 	ldw	r17,8(sp)
 2006240:	dc000117 	ldw	r16,4(sp)
 2006244:	dec00604 	addi	sp,sp,24
 2006248:	f800283a 	ret
 200624c:	89400117 	ldw	r5,4(r17)
 2006250:	9009883a 	mov	r4,r18
 2006254:	d9c00015 	stw	r7,0(sp)
 2006258:	29400044 	addi	r5,r5,1
 200625c:	20060c80 	call	20060c8 <_Balloc>
 2006260:	89800417 	ldw	r6,16(r17)
 2006264:	89400304 	addi	r5,r17,12
 2006268:	11000304 	addi	r4,r2,12
 200626c:	31800084 	addi	r6,r6,2
 2006270:	318d883a 	add	r6,r6,r6
 2006274:	318d883a 	add	r6,r6,r6
 2006278:	1027883a 	mov	r19,r2
 200627c:	2005e580 	call	2005e58 <memcpy>
 2006280:	d9c00017 	ldw	r7,0(sp)
 2006284:	88000a26 	beq	r17,zero,20062b0 <__multadd+0x118>
 2006288:	88c00117 	ldw	r3,4(r17)
 200628c:	90801317 	ldw	r2,76(r18)
 2006290:	18c7883a 	add	r3,r3,r3
 2006294:	18c7883a 	add	r3,r3,r3
 2006298:	10c5883a 	add	r2,r2,r3
 200629c:	10c00017 	ldw	r3,0(r2)
 20062a0:	88c00015 	stw	r3,0(r17)
 20062a4:	14400015 	stw	r17,0(r2)
 20062a8:	9823883a 	mov	r17,r19
 20062ac:	003fd806 	br	2006210 <__alt_mem_mem_0+0xfcfe6210>
 20062b0:	9823883a 	mov	r17,r19
 20062b4:	003fd606 	br	2006210 <__alt_mem_mem_0+0xfcfe6210>

020062b8 <__s2b>:
 20062b8:	defff904 	addi	sp,sp,-28
 20062bc:	dc400115 	stw	r17,4(sp)
 20062c0:	dc000015 	stw	r16,0(sp)
 20062c4:	2023883a 	mov	r17,r4
 20062c8:	2821883a 	mov	r16,r5
 20062cc:	39000204 	addi	r4,r7,8
 20062d0:	01400244 	movi	r5,9
 20062d4:	dcc00315 	stw	r19,12(sp)
 20062d8:	dc800215 	stw	r18,8(sp)
 20062dc:	dfc00615 	stw	ra,24(sp)
 20062e0:	dd400515 	stw	r21,20(sp)
 20062e4:	dd000415 	stw	r20,16(sp)
 20062e8:	3825883a 	mov	r18,r7
 20062ec:	3027883a 	mov	r19,r6
 20062f0:	200a9e40 	call	200a9e4 <__divsi3>
 20062f4:	00c00044 	movi	r3,1
 20062f8:	000b883a 	mov	r5,zero
 20062fc:	1880030e 	bge	r3,r2,200630c <__s2b+0x54>
 2006300:	18c7883a 	add	r3,r3,r3
 2006304:	29400044 	addi	r5,r5,1
 2006308:	18bffd16 	blt	r3,r2,2006300 <__alt_mem_mem_0+0xfcfe6300>
 200630c:	8809883a 	mov	r4,r17
 2006310:	20060c80 	call	20060c8 <_Balloc>
 2006314:	d8c00717 	ldw	r3,28(sp)
 2006318:	10c00515 	stw	r3,20(r2)
 200631c:	00c00044 	movi	r3,1
 2006320:	10c00415 	stw	r3,16(r2)
 2006324:	00c00244 	movi	r3,9
 2006328:	1cc0210e 	bge	r3,r19,20063b0 <__s2b+0xf8>
 200632c:	80eb883a 	add	r21,r16,r3
 2006330:	a829883a 	mov	r20,r21
 2006334:	84e1883a 	add	r16,r16,r19
 2006338:	a1c00007 	ldb	r7,0(r20)
 200633c:	01800284 	movi	r6,10
 2006340:	a5000044 	addi	r20,r20,1
 2006344:	100b883a 	mov	r5,r2
 2006348:	39fff404 	addi	r7,r7,-48
 200634c:	8809883a 	mov	r4,r17
 2006350:	20061980 	call	2006198 <__multadd>
 2006354:	a43ff81e 	bne	r20,r16,2006338 <__alt_mem_mem_0+0xfcfe6338>
 2006358:	ace1883a 	add	r16,r21,r19
 200635c:	843ffe04 	addi	r16,r16,-8
 2006360:	9c800a0e 	bge	r19,r18,200638c <__s2b+0xd4>
 2006364:	94e5c83a 	sub	r18,r18,r19
 2006368:	84a5883a 	add	r18,r16,r18
 200636c:	81c00007 	ldb	r7,0(r16)
 2006370:	01800284 	movi	r6,10
 2006374:	84000044 	addi	r16,r16,1
 2006378:	100b883a 	mov	r5,r2
 200637c:	39fff404 	addi	r7,r7,-48
 2006380:	8809883a 	mov	r4,r17
 2006384:	20061980 	call	2006198 <__multadd>
 2006388:	84bff81e 	bne	r16,r18,200636c <__alt_mem_mem_0+0xfcfe636c>
 200638c:	dfc00617 	ldw	ra,24(sp)
 2006390:	dd400517 	ldw	r21,20(sp)
 2006394:	dd000417 	ldw	r20,16(sp)
 2006398:	dcc00317 	ldw	r19,12(sp)
 200639c:	dc800217 	ldw	r18,8(sp)
 20063a0:	dc400117 	ldw	r17,4(sp)
 20063a4:	dc000017 	ldw	r16,0(sp)
 20063a8:	dec00704 	addi	sp,sp,28
 20063ac:	f800283a 	ret
 20063b0:	84000284 	addi	r16,r16,10
 20063b4:	1827883a 	mov	r19,r3
 20063b8:	003fe906 	br	2006360 <__alt_mem_mem_0+0xfcfe6360>

020063bc <__hi0bits>:
 20063bc:	20bfffec 	andhi	r2,r4,65535
 20063c0:	1000141e 	bne	r2,zero,2006414 <__hi0bits+0x58>
 20063c4:	2008943a 	slli	r4,r4,16
 20063c8:	00800404 	movi	r2,16
 20063cc:	20ffc02c 	andhi	r3,r4,65280
 20063d0:	1800021e 	bne	r3,zero,20063dc <__hi0bits+0x20>
 20063d4:	2008923a 	slli	r4,r4,8
 20063d8:	10800204 	addi	r2,r2,8
 20063dc:	20fc002c 	andhi	r3,r4,61440
 20063e0:	1800021e 	bne	r3,zero,20063ec <__hi0bits+0x30>
 20063e4:	2008913a 	slli	r4,r4,4
 20063e8:	10800104 	addi	r2,r2,4
 20063ec:	20f0002c 	andhi	r3,r4,49152
 20063f0:	1800031e 	bne	r3,zero,2006400 <__hi0bits+0x44>
 20063f4:	2109883a 	add	r4,r4,r4
 20063f8:	10800084 	addi	r2,r2,2
 20063fc:	2109883a 	add	r4,r4,r4
 2006400:	20000316 	blt	r4,zero,2006410 <__hi0bits+0x54>
 2006404:	2110002c 	andhi	r4,r4,16384
 2006408:	2000041e 	bne	r4,zero,200641c <__hi0bits+0x60>
 200640c:	00800804 	movi	r2,32
 2006410:	f800283a 	ret
 2006414:	0005883a 	mov	r2,zero
 2006418:	003fec06 	br	20063cc <__alt_mem_mem_0+0xfcfe63cc>
 200641c:	10800044 	addi	r2,r2,1
 2006420:	f800283a 	ret

02006424 <__lo0bits>:
 2006424:	20c00017 	ldw	r3,0(r4)
 2006428:	188001cc 	andi	r2,r3,7
 200642c:	10000826 	beq	r2,zero,2006450 <__lo0bits+0x2c>
 2006430:	1880004c 	andi	r2,r3,1
 2006434:	1000211e 	bne	r2,zero,20064bc <__lo0bits+0x98>
 2006438:	1880008c 	andi	r2,r3,2
 200643c:	1000211e 	bne	r2,zero,20064c4 <__lo0bits+0xa0>
 2006440:	1806d0ba 	srli	r3,r3,2
 2006444:	00800084 	movi	r2,2
 2006448:	20c00015 	stw	r3,0(r4)
 200644c:	f800283a 	ret
 2006450:	18bfffcc 	andi	r2,r3,65535
 2006454:	10001326 	beq	r2,zero,20064a4 <__lo0bits+0x80>
 2006458:	0005883a 	mov	r2,zero
 200645c:	19403fcc 	andi	r5,r3,255
 2006460:	2800021e 	bne	r5,zero,200646c <__lo0bits+0x48>
 2006464:	1806d23a 	srli	r3,r3,8
 2006468:	10800204 	addi	r2,r2,8
 200646c:	194003cc 	andi	r5,r3,15
 2006470:	2800021e 	bne	r5,zero,200647c <__lo0bits+0x58>
 2006474:	1806d13a 	srli	r3,r3,4
 2006478:	10800104 	addi	r2,r2,4
 200647c:	194000cc 	andi	r5,r3,3
 2006480:	2800021e 	bne	r5,zero,200648c <__lo0bits+0x68>
 2006484:	1806d0ba 	srli	r3,r3,2
 2006488:	10800084 	addi	r2,r2,2
 200648c:	1940004c 	andi	r5,r3,1
 2006490:	2800081e 	bne	r5,zero,20064b4 <__lo0bits+0x90>
 2006494:	1806d07a 	srli	r3,r3,1
 2006498:	1800051e 	bne	r3,zero,20064b0 <__lo0bits+0x8c>
 200649c:	00800804 	movi	r2,32
 20064a0:	f800283a 	ret
 20064a4:	1806d43a 	srli	r3,r3,16
 20064a8:	00800404 	movi	r2,16
 20064ac:	003feb06 	br	200645c <__alt_mem_mem_0+0xfcfe645c>
 20064b0:	10800044 	addi	r2,r2,1
 20064b4:	20c00015 	stw	r3,0(r4)
 20064b8:	f800283a 	ret
 20064bc:	0005883a 	mov	r2,zero
 20064c0:	f800283a 	ret
 20064c4:	1806d07a 	srli	r3,r3,1
 20064c8:	00800044 	movi	r2,1
 20064cc:	20c00015 	stw	r3,0(r4)
 20064d0:	f800283a 	ret

020064d4 <__i2b>:
 20064d4:	defffd04 	addi	sp,sp,-12
 20064d8:	dc000015 	stw	r16,0(sp)
 20064dc:	04000044 	movi	r16,1
 20064e0:	dc400115 	stw	r17,4(sp)
 20064e4:	2823883a 	mov	r17,r5
 20064e8:	800b883a 	mov	r5,r16
 20064ec:	dfc00215 	stw	ra,8(sp)
 20064f0:	20060c80 	call	20060c8 <_Balloc>
 20064f4:	14400515 	stw	r17,20(r2)
 20064f8:	14000415 	stw	r16,16(r2)
 20064fc:	dfc00217 	ldw	ra,8(sp)
 2006500:	dc400117 	ldw	r17,4(sp)
 2006504:	dc000017 	ldw	r16,0(sp)
 2006508:	dec00304 	addi	sp,sp,12
 200650c:	f800283a 	ret

02006510 <__multiply>:
 2006510:	defffa04 	addi	sp,sp,-24
 2006514:	dcc00315 	stw	r19,12(sp)
 2006518:	dc800215 	stw	r18,8(sp)
 200651c:	34c00417 	ldw	r19,16(r6)
 2006520:	2c800417 	ldw	r18,16(r5)
 2006524:	dd000415 	stw	r20,16(sp)
 2006528:	dc400115 	stw	r17,4(sp)
 200652c:	dfc00515 	stw	ra,20(sp)
 2006530:	dc000015 	stw	r16,0(sp)
 2006534:	2829883a 	mov	r20,r5
 2006538:	3023883a 	mov	r17,r6
 200653c:	94c0050e 	bge	r18,r19,2006554 <__multiply+0x44>
 2006540:	9007883a 	mov	r3,r18
 2006544:	3029883a 	mov	r20,r6
 2006548:	9825883a 	mov	r18,r19
 200654c:	2823883a 	mov	r17,r5
 2006550:	1827883a 	mov	r19,r3
 2006554:	a0800217 	ldw	r2,8(r20)
 2006558:	94e1883a 	add	r16,r18,r19
 200655c:	a1400117 	ldw	r5,4(r20)
 2006560:	1400010e 	bge	r2,r16,2006568 <__multiply+0x58>
 2006564:	29400044 	addi	r5,r5,1
 2006568:	20060c80 	call	20060c8 <_Balloc>
 200656c:	8415883a 	add	r10,r16,r16
 2006570:	12c00504 	addi	r11,r2,20
 2006574:	5295883a 	add	r10,r10,r10
 2006578:	5a95883a 	add	r10,r11,r10
 200657c:	5807883a 	mov	r3,r11
 2006580:	5a80032e 	bgeu	r11,r10,2006590 <__multiply+0x80>
 2006584:	18000015 	stw	zero,0(r3)
 2006588:	18c00104 	addi	r3,r3,4
 200658c:	1abffd36 	bltu	r3,r10,2006584 <__alt_mem_mem_0+0xfcfe6584>
 2006590:	9ce7883a 	add	r19,r19,r19
 2006594:	94a5883a 	add	r18,r18,r18
 2006598:	89800504 	addi	r6,r17,20
 200659c:	9ce7883a 	add	r19,r19,r19
 20065a0:	a3400504 	addi	r13,r20,20
 20065a4:	94a5883a 	add	r18,r18,r18
 20065a8:	34d9883a 	add	r12,r6,r19
 20065ac:	6c93883a 	add	r9,r13,r18
 20065b0:	3300422e 	bgeu	r6,r12,20066bc <__multiply+0x1ac>
 20065b4:	37c00017 	ldw	ra,0(r6)
 20065b8:	fbffffcc 	andi	r15,ra,65535
 20065bc:	78001b26 	beq	r15,zero,200662c <__multiply+0x11c>
 20065c0:	5811883a 	mov	r8,r11
 20065c4:	681d883a 	mov	r14,r13
 20065c8:	000f883a 	mov	r7,zero
 20065cc:	71000017 	ldw	r4,0(r14)
 20065d0:	40c00017 	ldw	r3,0(r8)
 20065d4:	73800104 	addi	r14,r14,4
 20065d8:	217fffcc 	andi	r5,r4,65535
 20065dc:	2bcb383a 	mul	r5,r5,r15
 20065e0:	2008d43a 	srli	r4,r4,16
 20065e4:	1c7fffcc 	andi	r17,r3,65535
 20065e8:	2c4b883a 	add	r5,r5,r17
 20065ec:	29cb883a 	add	r5,r5,r7
 20065f0:	23c9383a 	mul	r4,r4,r15
 20065f4:	1806d43a 	srli	r3,r3,16
 20065f8:	280ed43a 	srli	r7,r5,16
 20065fc:	297fffcc 	andi	r5,r5,65535
 2006600:	20c7883a 	add	r3,r4,r3
 2006604:	19c7883a 	add	r3,r3,r7
 2006608:	1808943a 	slli	r4,r3,16
 200660c:	4023883a 	mov	r17,r8
 2006610:	180ed43a 	srli	r7,r3,16
 2006614:	214ab03a 	or	r5,r4,r5
 2006618:	41400015 	stw	r5,0(r8)
 200661c:	42000104 	addi	r8,r8,4
 2006620:	727fea36 	bltu	r14,r9,20065cc <__alt_mem_mem_0+0xfcfe65cc>
 2006624:	89c00115 	stw	r7,4(r17)
 2006628:	37c00017 	ldw	ra,0(r6)
 200662c:	f83ed43a 	srli	ra,ra,16
 2006630:	f8001f26 	beq	ra,zero,20066b0 <__multiply+0x1a0>
 2006634:	58c00017 	ldw	r3,0(r11)
 2006638:	681d883a 	mov	r14,r13
 200663c:	581f883a 	mov	r15,r11
 2006640:	1811883a 	mov	r8,r3
 2006644:	5825883a 	mov	r18,r11
 2006648:	000f883a 	mov	r7,zero
 200664c:	00000106 	br	2006654 <__multiply+0x144>
 2006650:	8825883a 	mov	r18,r17
 2006654:	7140000b 	ldhu	r5,0(r14)
 2006658:	4010d43a 	srli	r8,r8,16
 200665c:	193fffcc 	andi	r4,r3,65535
 2006660:	2fcb383a 	mul	r5,r5,ra
 2006664:	7bc00104 	addi	r15,r15,4
 2006668:	73800104 	addi	r14,r14,4
 200666c:	2a0b883a 	add	r5,r5,r8
 2006670:	29cb883a 	add	r5,r5,r7
 2006674:	2806943a 	slli	r3,r5,16
 2006678:	94400104 	addi	r17,r18,4
 200667c:	280ad43a 	srli	r5,r5,16
 2006680:	1908b03a 	or	r4,r3,r4
 2006684:	793fff15 	stw	r4,-4(r15)
 2006688:	70ffff17 	ldw	r3,-4(r14)
 200668c:	8a000017 	ldw	r8,0(r17)
 2006690:	1806d43a 	srli	r3,r3,16
 2006694:	413fffcc 	andi	r4,r8,65535
 2006698:	1fc7383a 	mul	r3,r3,ra
 200669c:	1907883a 	add	r3,r3,r4
 20066a0:	1947883a 	add	r3,r3,r5
 20066a4:	180ed43a 	srli	r7,r3,16
 20066a8:	727fe936 	bltu	r14,r9,2006650 <__alt_mem_mem_0+0xfcfe6650>
 20066ac:	90c00115 	stw	r3,4(r18)
 20066b0:	31800104 	addi	r6,r6,4
 20066b4:	5ac00104 	addi	r11,r11,4
 20066b8:	333fbe36 	bltu	r6,r12,20065b4 <__alt_mem_mem_0+0xfcfe65b4>
 20066bc:	0400090e 	bge	zero,r16,20066e4 <__multiply+0x1d4>
 20066c0:	50ffff17 	ldw	r3,-4(r10)
 20066c4:	52bfff04 	addi	r10,r10,-4
 20066c8:	18000326 	beq	r3,zero,20066d8 <__multiply+0x1c8>
 20066cc:	00000506 	br	20066e4 <__multiply+0x1d4>
 20066d0:	50c00017 	ldw	r3,0(r10)
 20066d4:	1800031e 	bne	r3,zero,20066e4 <__multiply+0x1d4>
 20066d8:	843fffc4 	addi	r16,r16,-1
 20066dc:	52bfff04 	addi	r10,r10,-4
 20066e0:	803ffb1e 	bne	r16,zero,20066d0 <__alt_mem_mem_0+0xfcfe66d0>
 20066e4:	14000415 	stw	r16,16(r2)
 20066e8:	dfc00517 	ldw	ra,20(sp)
 20066ec:	dd000417 	ldw	r20,16(sp)
 20066f0:	dcc00317 	ldw	r19,12(sp)
 20066f4:	dc800217 	ldw	r18,8(sp)
 20066f8:	dc400117 	ldw	r17,4(sp)
 20066fc:	dc000017 	ldw	r16,0(sp)
 2006700:	dec00604 	addi	sp,sp,24
 2006704:	f800283a 	ret

02006708 <__pow5mult>:
 2006708:	defffa04 	addi	sp,sp,-24
 200670c:	dcc00315 	stw	r19,12(sp)
 2006710:	dc000015 	stw	r16,0(sp)
 2006714:	dfc00515 	stw	ra,20(sp)
 2006718:	dd000415 	stw	r20,16(sp)
 200671c:	dc800215 	stw	r18,8(sp)
 2006720:	dc400115 	stw	r17,4(sp)
 2006724:	308000cc 	andi	r2,r6,3
 2006728:	3021883a 	mov	r16,r6
 200672c:	2027883a 	mov	r19,r4
 2006730:	10002f1e 	bne	r2,zero,20067f0 <__pow5mult+0xe8>
 2006734:	2825883a 	mov	r18,r5
 2006738:	8021d0ba 	srai	r16,r16,2
 200673c:	80001a26 	beq	r16,zero,20067a8 <__pow5mult+0xa0>
 2006740:	9c401217 	ldw	r17,72(r19)
 2006744:	8800061e 	bne	r17,zero,2006760 <__pow5mult+0x58>
 2006748:	00003406 	br	200681c <__pow5mult+0x114>
 200674c:	8021d07a 	srai	r16,r16,1
 2006750:	80001526 	beq	r16,zero,20067a8 <__pow5mult+0xa0>
 2006754:	88800017 	ldw	r2,0(r17)
 2006758:	10001c26 	beq	r2,zero,20067cc <__pow5mult+0xc4>
 200675c:	1023883a 	mov	r17,r2
 2006760:	8080004c 	andi	r2,r16,1
 2006764:	103ff926 	beq	r2,zero,200674c <__alt_mem_mem_0+0xfcfe674c>
 2006768:	880d883a 	mov	r6,r17
 200676c:	900b883a 	mov	r5,r18
 2006770:	9809883a 	mov	r4,r19
 2006774:	20065100 	call	2006510 <__multiply>
 2006778:	90001b26 	beq	r18,zero,20067e8 <__pow5mult+0xe0>
 200677c:	91000117 	ldw	r4,4(r18)
 2006780:	98c01317 	ldw	r3,76(r19)
 2006784:	8021d07a 	srai	r16,r16,1
 2006788:	2109883a 	add	r4,r4,r4
 200678c:	2109883a 	add	r4,r4,r4
 2006790:	1907883a 	add	r3,r3,r4
 2006794:	19000017 	ldw	r4,0(r3)
 2006798:	91000015 	stw	r4,0(r18)
 200679c:	1c800015 	stw	r18,0(r3)
 20067a0:	1025883a 	mov	r18,r2
 20067a4:	803feb1e 	bne	r16,zero,2006754 <__alt_mem_mem_0+0xfcfe6754>
 20067a8:	9005883a 	mov	r2,r18
 20067ac:	dfc00517 	ldw	ra,20(sp)
 20067b0:	dd000417 	ldw	r20,16(sp)
 20067b4:	dcc00317 	ldw	r19,12(sp)
 20067b8:	dc800217 	ldw	r18,8(sp)
 20067bc:	dc400117 	ldw	r17,4(sp)
 20067c0:	dc000017 	ldw	r16,0(sp)
 20067c4:	dec00604 	addi	sp,sp,24
 20067c8:	f800283a 	ret
 20067cc:	880d883a 	mov	r6,r17
 20067d0:	880b883a 	mov	r5,r17
 20067d4:	9809883a 	mov	r4,r19
 20067d8:	20065100 	call	2006510 <__multiply>
 20067dc:	88800015 	stw	r2,0(r17)
 20067e0:	10000015 	stw	zero,0(r2)
 20067e4:	003fdd06 	br	200675c <__alt_mem_mem_0+0xfcfe675c>
 20067e8:	1025883a 	mov	r18,r2
 20067ec:	003fd706 	br	200674c <__alt_mem_mem_0+0xfcfe674c>
 20067f0:	10bfffc4 	addi	r2,r2,-1
 20067f4:	1085883a 	add	r2,r2,r2
 20067f8:	00c08134 	movhi	r3,516
 20067fc:	18c39104 	addi	r3,r3,3652
 2006800:	1085883a 	add	r2,r2,r2
 2006804:	1885883a 	add	r2,r3,r2
 2006808:	11800017 	ldw	r6,0(r2)
 200680c:	000f883a 	mov	r7,zero
 2006810:	20061980 	call	2006198 <__multadd>
 2006814:	1025883a 	mov	r18,r2
 2006818:	003fc706 	br	2006738 <__alt_mem_mem_0+0xfcfe6738>
 200681c:	05000044 	movi	r20,1
 2006820:	a00b883a 	mov	r5,r20
 2006824:	9809883a 	mov	r4,r19
 2006828:	20060c80 	call	20060c8 <_Balloc>
 200682c:	1023883a 	mov	r17,r2
 2006830:	00809c44 	movi	r2,625
 2006834:	88800515 	stw	r2,20(r17)
 2006838:	8d000415 	stw	r20,16(r17)
 200683c:	9c401215 	stw	r17,72(r19)
 2006840:	88000015 	stw	zero,0(r17)
 2006844:	003fc606 	br	2006760 <__alt_mem_mem_0+0xfcfe6760>

02006848 <__lshift>:
 2006848:	defff904 	addi	sp,sp,-28
 200684c:	dd400515 	stw	r21,20(sp)
 2006850:	dcc00315 	stw	r19,12(sp)
 2006854:	302bd17a 	srai	r21,r6,5
 2006858:	2cc00417 	ldw	r19,16(r5)
 200685c:	28800217 	ldw	r2,8(r5)
 2006860:	dd000415 	stw	r20,16(sp)
 2006864:	ace7883a 	add	r19,r21,r19
 2006868:	dc800215 	stw	r18,8(sp)
 200686c:	dc400115 	stw	r17,4(sp)
 2006870:	dc000015 	stw	r16,0(sp)
 2006874:	dfc00615 	stw	ra,24(sp)
 2006878:	9c000044 	addi	r16,r19,1
 200687c:	2823883a 	mov	r17,r5
 2006880:	3029883a 	mov	r20,r6
 2006884:	2025883a 	mov	r18,r4
 2006888:	29400117 	ldw	r5,4(r5)
 200688c:	1400030e 	bge	r2,r16,200689c <__lshift+0x54>
 2006890:	1085883a 	add	r2,r2,r2
 2006894:	29400044 	addi	r5,r5,1
 2006898:	143ffd16 	blt	r2,r16,2006890 <__alt_mem_mem_0+0xfcfe6890>
 200689c:	9009883a 	mov	r4,r18
 20068a0:	20060c80 	call	20060c8 <_Balloc>
 20068a4:	10c00504 	addi	r3,r2,20
 20068a8:	0540070e 	bge	zero,r21,20068c8 <__lshift+0x80>
 20068ac:	ad6b883a 	add	r21,r21,r21
 20068b0:	ad6b883a 	add	r21,r21,r21
 20068b4:	1809883a 	mov	r4,r3
 20068b8:	1d47883a 	add	r3,r3,r21
 20068bc:	20000015 	stw	zero,0(r4)
 20068c0:	21000104 	addi	r4,r4,4
 20068c4:	193ffd1e 	bne	r3,r4,20068bc <__alt_mem_mem_0+0xfcfe68bc>
 20068c8:	8a000417 	ldw	r8,16(r17)
 20068cc:	89000504 	addi	r4,r17,20
 20068d0:	a18007cc 	andi	r6,r20,31
 20068d4:	4211883a 	add	r8,r8,r8
 20068d8:	4211883a 	add	r8,r8,r8
 20068dc:	2211883a 	add	r8,r4,r8
 20068e0:	30002326 	beq	r6,zero,2006970 <__lshift+0x128>
 20068e4:	02400804 	movi	r9,32
 20068e8:	4993c83a 	sub	r9,r9,r6
 20068ec:	000b883a 	mov	r5,zero
 20068f0:	21c00017 	ldw	r7,0(r4)
 20068f4:	1815883a 	mov	r10,r3
 20068f8:	18c00104 	addi	r3,r3,4
 20068fc:	398e983a 	sll	r7,r7,r6
 2006900:	21000104 	addi	r4,r4,4
 2006904:	394ab03a 	or	r5,r7,r5
 2006908:	197fff15 	stw	r5,-4(r3)
 200690c:	217fff17 	ldw	r5,-4(r4)
 2006910:	2a4ad83a 	srl	r5,r5,r9
 2006914:	223ff636 	bltu	r4,r8,20068f0 <__alt_mem_mem_0+0xfcfe68f0>
 2006918:	51400115 	stw	r5,4(r10)
 200691c:	28001a1e 	bne	r5,zero,2006988 <__lshift+0x140>
 2006920:	843fffc4 	addi	r16,r16,-1
 2006924:	14000415 	stw	r16,16(r2)
 2006928:	88000826 	beq	r17,zero,200694c <__lshift+0x104>
 200692c:	89000117 	ldw	r4,4(r17)
 2006930:	90c01317 	ldw	r3,76(r18)
 2006934:	2109883a 	add	r4,r4,r4
 2006938:	2109883a 	add	r4,r4,r4
 200693c:	1907883a 	add	r3,r3,r4
 2006940:	19000017 	ldw	r4,0(r3)
 2006944:	89000015 	stw	r4,0(r17)
 2006948:	1c400015 	stw	r17,0(r3)
 200694c:	dfc00617 	ldw	ra,24(sp)
 2006950:	dd400517 	ldw	r21,20(sp)
 2006954:	dd000417 	ldw	r20,16(sp)
 2006958:	dcc00317 	ldw	r19,12(sp)
 200695c:	dc800217 	ldw	r18,8(sp)
 2006960:	dc400117 	ldw	r17,4(sp)
 2006964:	dc000017 	ldw	r16,0(sp)
 2006968:	dec00704 	addi	sp,sp,28
 200696c:	f800283a 	ret
 2006970:	21400017 	ldw	r5,0(r4)
 2006974:	18c00104 	addi	r3,r3,4
 2006978:	21000104 	addi	r4,r4,4
 200697c:	197fff15 	stw	r5,-4(r3)
 2006980:	223ffb36 	bltu	r4,r8,2006970 <__alt_mem_mem_0+0xfcfe6970>
 2006984:	003fe606 	br	2006920 <__alt_mem_mem_0+0xfcfe6920>
 2006988:	9c000084 	addi	r16,r19,2
 200698c:	003fe406 	br	2006920 <__alt_mem_mem_0+0xfcfe6920>

02006990 <__mcmp>:
 2006990:	20800417 	ldw	r2,16(r4)
 2006994:	28c00417 	ldw	r3,16(r5)
 2006998:	10c5c83a 	sub	r2,r2,r3
 200699c:	1000111e 	bne	r2,zero,20069e4 <__mcmp+0x54>
 20069a0:	18c7883a 	add	r3,r3,r3
 20069a4:	18c7883a 	add	r3,r3,r3
 20069a8:	21000504 	addi	r4,r4,20
 20069ac:	29400504 	addi	r5,r5,20
 20069b0:	20c5883a 	add	r2,r4,r3
 20069b4:	28cb883a 	add	r5,r5,r3
 20069b8:	00000106 	br	20069c0 <__mcmp+0x30>
 20069bc:	20800a2e 	bgeu	r4,r2,20069e8 <__mcmp+0x58>
 20069c0:	10bfff04 	addi	r2,r2,-4
 20069c4:	297fff04 	addi	r5,r5,-4
 20069c8:	11800017 	ldw	r6,0(r2)
 20069cc:	28c00017 	ldw	r3,0(r5)
 20069d0:	30fffa26 	beq	r6,r3,20069bc <__alt_mem_mem_0+0xfcfe69bc>
 20069d4:	30c00236 	bltu	r6,r3,20069e0 <__mcmp+0x50>
 20069d8:	00800044 	movi	r2,1
 20069dc:	f800283a 	ret
 20069e0:	00bfffc4 	movi	r2,-1
 20069e4:	f800283a 	ret
 20069e8:	0005883a 	mov	r2,zero
 20069ec:	f800283a 	ret

020069f0 <__mdiff>:
 20069f0:	28c00417 	ldw	r3,16(r5)
 20069f4:	30800417 	ldw	r2,16(r6)
 20069f8:	defffa04 	addi	sp,sp,-24
 20069fc:	dcc00315 	stw	r19,12(sp)
 2006a00:	dc800215 	stw	r18,8(sp)
 2006a04:	dfc00515 	stw	ra,20(sp)
 2006a08:	dd000415 	stw	r20,16(sp)
 2006a0c:	dc400115 	stw	r17,4(sp)
 2006a10:	dc000015 	stw	r16,0(sp)
 2006a14:	1887c83a 	sub	r3,r3,r2
 2006a18:	2825883a 	mov	r18,r5
 2006a1c:	3027883a 	mov	r19,r6
 2006a20:	1800141e 	bne	r3,zero,2006a74 <__mdiff+0x84>
 2006a24:	1085883a 	add	r2,r2,r2
 2006a28:	1085883a 	add	r2,r2,r2
 2006a2c:	2a000504 	addi	r8,r5,20
 2006a30:	34000504 	addi	r16,r6,20
 2006a34:	4087883a 	add	r3,r8,r2
 2006a38:	8085883a 	add	r2,r16,r2
 2006a3c:	00000106 	br	2006a44 <__mdiff+0x54>
 2006a40:	40c0592e 	bgeu	r8,r3,2006ba8 <__mdiff+0x1b8>
 2006a44:	18ffff04 	addi	r3,r3,-4
 2006a48:	10bfff04 	addi	r2,r2,-4
 2006a4c:	19c00017 	ldw	r7,0(r3)
 2006a50:	11400017 	ldw	r5,0(r2)
 2006a54:	397ffa26 	beq	r7,r5,2006a40 <__alt_mem_mem_0+0xfcfe6a40>
 2006a58:	3940592e 	bgeu	r7,r5,2006bc0 <__mdiff+0x1d0>
 2006a5c:	9005883a 	mov	r2,r18
 2006a60:	4023883a 	mov	r17,r8
 2006a64:	9825883a 	mov	r18,r19
 2006a68:	05000044 	movi	r20,1
 2006a6c:	1027883a 	mov	r19,r2
 2006a70:	00000406 	br	2006a84 <__mdiff+0x94>
 2006a74:	18005616 	blt	r3,zero,2006bd0 <__mdiff+0x1e0>
 2006a78:	34400504 	addi	r17,r6,20
 2006a7c:	2c000504 	addi	r16,r5,20
 2006a80:	0029883a 	mov	r20,zero
 2006a84:	91400117 	ldw	r5,4(r18)
 2006a88:	20060c80 	call	20060c8 <_Balloc>
 2006a8c:	92400417 	ldw	r9,16(r18)
 2006a90:	9b000417 	ldw	r12,16(r19)
 2006a94:	12c00504 	addi	r11,r2,20
 2006a98:	4a51883a 	add	r8,r9,r9
 2006a9c:	6319883a 	add	r12,r12,r12
 2006aa0:	4211883a 	add	r8,r8,r8
 2006aa4:	6319883a 	add	r12,r12,r12
 2006aa8:	15000315 	stw	r20,12(r2)
 2006aac:	8211883a 	add	r8,r16,r8
 2006ab0:	8b19883a 	add	r12,r17,r12
 2006ab4:	0007883a 	mov	r3,zero
 2006ab8:	81400017 	ldw	r5,0(r16)
 2006abc:	89c00017 	ldw	r7,0(r17)
 2006ac0:	59800104 	addi	r6,r11,4
 2006ac4:	293fffcc 	andi	r4,r5,65535
 2006ac8:	20c7883a 	add	r3,r4,r3
 2006acc:	393fffcc 	andi	r4,r7,65535
 2006ad0:	1909c83a 	sub	r4,r3,r4
 2006ad4:	280ad43a 	srli	r5,r5,16
 2006ad8:	380ed43a 	srli	r7,r7,16
 2006adc:	2007d43a 	srai	r3,r4,16
 2006ae0:	213fffcc 	andi	r4,r4,65535
 2006ae4:	29cbc83a 	sub	r5,r5,r7
 2006ae8:	28c7883a 	add	r3,r5,r3
 2006aec:	180a943a 	slli	r5,r3,16
 2006af0:	8c400104 	addi	r17,r17,4
 2006af4:	84000104 	addi	r16,r16,4
 2006af8:	2908b03a 	or	r4,r5,r4
 2006afc:	59000015 	stw	r4,0(r11)
 2006b00:	1807d43a 	srai	r3,r3,16
 2006b04:	3015883a 	mov	r10,r6
 2006b08:	3017883a 	mov	r11,r6
 2006b0c:	8b3fea36 	bltu	r17,r12,2006ab8 <__alt_mem_mem_0+0xfcfe6ab8>
 2006b10:	8200162e 	bgeu	r16,r8,2006b6c <__mdiff+0x17c>
 2006b14:	8017883a 	mov	r11,r16
 2006b18:	59400017 	ldw	r5,0(r11)
 2006b1c:	31800104 	addi	r6,r6,4
 2006b20:	5ac00104 	addi	r11,r11,4
 2006b24:	293fffcc 	andi	r4,r5,65535
 2006b28:	20c7883a 	add	r3,r4,r3
 2006b2c:	280ed43a 	srli	r7,r5,16
 2006b30:	180bd43a 	srai	r5,r3,16
 2006b34:	193fffcc 	andi	r4,r3,65535
 2006b38:	3947883a 	add	r3,r7,r5
 2006b3c:	180a943a 	slli	r5,r3,16
 2006b40:	1807d43a 	srai	r3,r3,16
 2006b44:	2908b03a 	or	r4,r5,r4
 2006b48:	313fff15 	stw	r4,-4(r6)
 2006b4c:	5a3ff236 	bltu	r11,r8,2006b18 <__alt_mem_mem_0+0xfcfe6b18>
 2006b50:	0406303a 	nor	r3,zero,r16
 2006b54:	1a07883a 	add	r3,r3,r8
 2006b58:	1806d0ba 	srli	r3,r3,2
 2006b5c:	18c00044 	addi	r3,r3,1
 2006b60:	18c7883a 	add	r3,r3,r3
 2006b64:	18c7883a 	add	r3,r3,r3
 2006b68:	50d5883a 	add	r10,r10,r3
 2006b6c:	50ffff04 	addi	r3,r10,-4
 2006b70:	2000041e 	bne	r4,zero,2006b84 <__mdiff+0x194>
 2006b74:	18ffff04 	addi	r3,r3,-4
 2006b78:	19000017 	ldw	r4,0(r3)
 2006b7c:	4a7fffc4 	addi	r9,r9,-1
 2006b80:	203ffc26 	beq	r4,zero,2006b74 <__alt_mem_mem_0+0xfcfe6b74>
 2006b84:	12400415 	stw	r9,16(r2)
 2006b88:	dfc00517 	ldw	ra,20(sp)
 2006b8c:	dd000417 	ldw	r20,16(sp)
 2006b90:	dcc00317 	ldw	r19,12(sp)
 2006b94:	dc800217 	ldw	r18,8(sp)
 2006b98:	dc400117 	ldw	r17,4(sp)
 2006b9c:	dc000017 	ldw	r16,0(sp)
 2006ba0:	dec00604 	addi	sp,sp,24
 2006ba4:	f800283a 	ret
 2006ba8:	000b883a 	mov	r5,zero
 2006bac:	20060c80 	call	20060c8 <_Balloc>
 2006bb0:	00c00044 	movi	r3,1
 2006bb4:	10c00415 	stw	r3,16(r2)
 2006bb8:	10000515 	stw	zero,20(r2)
 2006bbc:	003ff206 	br	2006b88 <__alt_mem_mem_0+0xfcfe6b88>
 2006bc0:	8023883a 	mov	r17,r16
 2006bc4:	0029883a 	mov	r20,zero
 2006bc8:	4021883a 	mov	r16,r8
 2006bcc:	003fad06 	br	2006a84 <__alt_mem_mem_0+0xfcfe6a84>
 2006bd0:	9005883a 	mov	r2,r18
 2006bd4:	94400504 	addi	r17,r18,20
 2006bd8:	9c000504 	addi	r16,r19,20
 2006bdc:	9825883a 	mov	r18,r19
 2006be0:	05000044 	movi	r20,1
 2006be4:	1027883a 	mov	r19,r2
 2006be8:	003fa606 	br	2006a84 <__alt_mem_mem_0+0xfcfe6a84>

02006bec <__ulp>:
 2006bec:	295ffc2c 	andhi	r5,r5,32752
 2006bf0:	00bf3034 	movhi	r2,64704
 2006bf4:	2887883a 	add	r3,r5,r2
 2006bf8:	00c0020e 	bge	zero,r3,2006c04 <__ulp+0x18>
 2006bfc:	0005883a 	mov	r2,zero
 2006c00:	f800283a 	ret
 2006c04:	00c7c83a 	sub	r3,zero,r3
 2006c08:	1807d53a 	srai	r3,r3,20
 2006c0c:	008004c4 	movi	r2,19
 2006c10:	10c00b0e 	bge	r2,r3,2006c40 <__ulp+0x54>
 2006c14:	18bffb04 	addi	r2,r3,-20
 2006c18:	01000784 	movi	r4,30
 2006c1c:	0007883a 	mov	r3,zero
 2006c20:	20800516 	blt	r4,r2,2006c38 <__ulp+0x4c>
 2006c24:	010007c4 	movi	r4,31
 2006c28:	2089c83a 	sub	r4,r4,r2
 2006c2c:	00800044 	movi	r2,1
 2006c30:	1104983a 	sll	r2,r2,r4
 2006c34:	f800283a 	ret
 2006c38:	00800044 	movi	r2,1
 2006c3c:	f800283a 	ret
 2006c40:	01400234 	movhi	r5,8
 2006c44:	28c7d83a 	sra	r3,r5,r3
 2006c48:	0005883a 	mov	r2,zero
 2006c4c:	f800283a 	ret

02006c50 <__b2d>:
 2006c50:	defffa04 	addi	sp,sp,-24
 2006c54:	dc000015 	stw	r16,0(sp)
 2006c58:	24000417 	ldw	r16,16(r4)
 2006c5c:	dc400115 	stw	r17,4(sp)
 2006c60:	24400504 	addi	r17,r4,20
 2006c64:	8421883a 	add	r16,r16,r16
 2006c68:	8421883a 	add	r16,r16,r16
 2006c6c:	8c21883a 	add	r16,r17,r16
 2006c70:	dc800215 	stw	r18,8(sp)
 2006c74:	84bfff17 	ldw	r18,-4(r16)
 2006c78:	dd000415 	stw	r20,16(sp)
 2006c7c:	dcc00315 	stw	r19,12(sp)
 2006c80:	9009883a 	mov	r4,r18
 2006c84:	2829883a 	mov	r20,r5
 2006c88:	dfc00515 	stw	ra,20(sp)
 2006c8c:	20063bc0 	call	20063bc <__hi0bits>
 2006c90:	00c00804 	movi	r3,32
 2006c94:	1889c83a 	sub	r4,r3,r2
 2006c98:	a1000015 	stw	r4,0(r20)
 2006c9c:	01000284 	movi	r4,10
 2006ca0:	84ffff04 	addi	r19,r16,-4
 2006ca4:	20801216 	blt	r4,r2,2006cf0 <__b2d+0xa0>
 2006ca8:	018002c4 	movi	r6,11
 2006cac:	308dc83a 	sub	r6,r6,r2
 2006cb0:	9186d83a 	srl	r3,r18,r6
 2006cb4:	18cffc34 	orhi	r3,r3,16368
 2006cb8:	8cc0212e 	bgeu	r17,r19,2006d40 <__b2d+0xf0>
 2006cbc:	813ffe17 	ldw	r4,-8(r16)
 2006cc0:	218cd83a 	srl	r6,r4,r6
 2006cc4:	10800544 	addi	r2,r2,21
 2006cc8:	9084983a 	sll	r2,r18,r2
 2006ccc:	1184b03a 	or	r2,r2,r6
 2006cd0:	dfc00517 	ldw	ra,20(sp)
 2006cd4:	dd000417 	ldw	r20,16(sp)
 2006cd8:	dcc00317 	ldw	r19,12(sp)
 2006cdc:	dc800217 	ldw	r18,8(sp)
 2006ce0:	dc400117 	ldw	r17,4(sp)
 2006ce4:	dc000017 	ldw	r16,0(sp)
 2006ce8:	dec00604 	addi	sp,sp,24
 2006cec:	f800283a 	ret
 2006cf0:	8cc00f2e 	bgeu	r17,r19,2006d30 <__b2d+0xe0>
 2006cf4:	117ffd44 	addi	r5,r2,-11
 2006cf8:	80bffe17 	ldw	r2,-8(r16)
 2006cfc:	28000e26 	beq	r5,zero,2006d38 <__b2d+0xe8>
 2006d00:	1949c83a 	sub	r4,r3,r5
 2006d04:	9164983a 	sll	r18,r18,r5
 2006d08:	1106d83a 	srl	r3,r2,r4
 2006d0c:	81bffe04 	addi	r6,r16,-8
 2006d10:	948ffc34 	orhi	r18,r18,16368
 2006d14:	90c6b03a 	or	r3,r18,r3
 2006d18:	89800e2e 	bgeu	r17,r6,2006d54 <__b2d+0x104>
 2006d1c:	81bffd17 	ldw	r6,-12(r16)
 2006d20:	1144983a 	sll	r2,r2,r5
 2006d24:	310ad83a 	srl	r5,r6,r4
 2006d28:	2884b03a 	or	r2,r5,r2
 2006d2c:	003fe806 	br	2006cd0 <__alt_mem_mem_0+0xfcfe6cd0>
 2006d30:	10bffd44 	addi	r2,r2,-11
 2006d34:	1000041e 	bne	r2,zero,2006d48 <__b2d+0xf8>
 2006d38:	90cffc34 	orhi	r3,r18,16368
 2006d3c:	003fe406 	br	2006cd0 <__alt_mem_mem_0+0xfcfe6cd0>
 2006d40:	000d883a 	mov	r6,zero
 2006d44:	003fdf06 	br	2006cc4 <__alt_mem_mem_0+0xfcfe6cc4>
 2006d48:	90a4983a 	sll	r18,r18,r2
 2006d4c:	0005883a 	mov	r2,zero
 2006d50:	003ff906 	br	2006d38 <__alt_mem_mem_0+0xfcfe6d38>
 2006d54:	1144983a 	sll	r2,r2,r5
 2006d58:	003fdd06 	br	2006cd0 <__alt_mem_mem_0+0xfcfe6cd0>

02006d5c <__d2b>:
 2006d5c:	defff804 	addi	sp,sp,-32
 2006d60:	dc000215 	stw	r16,8(sp)
 2006d64:	3021883a 	mov	r16,r6
 2006d68:	dc400315 	stw	r17,12(sp)
 2006d6c:	8022907a 	slli	r17,r16,1
 2006d70:	dd000615 	stw	r20,24(sp)
 2006d74:	2829883a 	mov	r20,r5
 2006d78:	01400044 	movi	r5,1
 2006d7c:	dcc00515 	stw	r19,20(sp)
 2006d80:	dc800415 	stw	r18,16(sp)
 2006d84:	dfc00715 	stw	ra,28(sp)
 2006d88:	3825883a 	mov	r18,r7
 2006d8c:	8822d57a 	srli	r17,r17,21
 2006d90:	20060c80 	call	20060c8 <_Balloc>
 2006d94:	1027883a 	mov	r19,r2
 2006d98:	00800434 	movhi	r2,16
 2006d9c:	10bfffc4 	addi	r2,r2,-1
 2006da0:	808c703a 	and	r6,r16,r2
 2006da4:	88000126 	beq	r17,zero,2006dac <__d2b+0x50>
 2006da8:	31800434 	orhi	r6,r6,16
 2006dac:	d9800015 	stw	r6,0(sp)
 2006db0:	a0002426 	beq	r20,zero,2006e44 <__d2b+0xe8>
 2006db4:	d9000104 	addi	r4,sp,4
 2006db8:	dd000115 	stw	r20,4(sp)
 2006dbc:	20064240 	call	2006424 <__lo0bits>
 2006dc0:	d8c00017 	ldw	r3,0(sp)
 2006dc4:	10002f1e 	bne	r2,zero,2006e84 <__d2b+0x128>
 2006dc8:	d9000117 	ldw	r4,4(sp)
 2006dcc:	99000515 	stw	r4,20(r19)
 2006dd0:	1821003a 	cmpeq	r16,r3,zero
 2006dd4:	01000084 	movi	r4,2
 2006dd8:	2421c83a 	sub	r16,r4,r16
 2006ddc:	98c00615 	stw	r3,24(r19)
 2006de0:	9c000415 	stw	r16,16(r19)
 2006de4:	88001f1e 	bne	r17,zero,2006e64 <__d2b+0x108>
 2006de8:	10bef384 	addi	r2,r2,-1074
 2006dec:	90800015 	stw	r2,0(r18)
 2006df0:	00900034 	movhi	r2,16384
 2006df4:	10bfffc4 	addi	r2,r2,-1
 2006df8:	8085883a 	add	r2,r16,r2
 2006dfc:	1085883a 	add	r2,r2,r2
 2006e00:	1085883a 	add	r2,r2,r2
 2006e04:	9885883a 	add	r2,r19,r2
 2006e08:	11000517 	ldw	r4,20(r2)
 2006e0c:	8020917a 	slli	r16,r16,5
 2006e10:	20063bc0 	call	20063bc <__hi0bits>
 2006e14:	d8c00817 	ldw	r3,32(sp)
 2006e18:	8085c83a 	sub	r2,r16,r2
 2006e1c:	18800015 	stw	r2,0(r3)
 2006e20:	9805883a 	mov	r2,r19
 2006e24:	dfc00717 	ldw	ra,28(sp)
 2006e28:	dd000617 	ldw	r20,24(sp)
 2006e2c:	dcc00517 	ldw	r19,20(sp)
 2006e30:	dc800417 	ldw	r18,16(sp)
 2006e34:	dc400317 	ldw	r17,12(sp)
 2006e38:	dc000217 	ldw	r16,8(sp)
 2006e3c:	dec00804 	addi	sp,sp,32
 2006e40:	f800283a 	ret
 2006e44:	d809883a 	mov	r4,sp
 2006e48:	20064240 	call	2006424 <__lo0bits>
 2006e4c:	d8c00017 	ldw	r3,0(sp)
 2006e50:	04000044 	movi	r16,1
 2006e54:	9c000415 	stw	r16,16(r19)
 2006e58:	98c00515 	stw	r3,20(r19)
 2006e5c:	10800804 	addi	r2,r2,32
 2006e60:	883fe126 	beq	r17,zero,2006de8 <__alt_mem_mem_0+0xfcfe6de8>
 2006e64:	00c00d44 	movi	r3,53
 2006e68:	8c7ef344 	addi	r17,r17,-1075
 2006e6c:	88a3883a 	add	r17,r17,r2
 2006e70:	1885c83a 	sub	r2,r3,r2
 2006e74:	d8c00817 	ldw	r3,32(sp)
 2006e78:	94400015 	stw	r17,0(r18)
 2006e7c:	18800015 	stw	r2,0(r3)
 2006e80:	003fe706 	br	2006e20 <__alt_mem_mem_0+0xfcfe6e20>
 2006e84:	01000804 	movi	r4,32
 2006e88:	2089c83a 	sub	r4,r4,r2
 2006e8c:	1908983a 	sll	r4,r3,r4
 2006e90:	d9400117 	ldw	r5,4(sp)
 2006e94:	1886d83a 	srl	r3,r3,r2
 2006e98:	2148b03a 	or	r4,r4,r5
 2006e9c:	99000515 	stw	r4,20(r19)
 2006ea0:	d8c00015 	stw	r3,0(sp)
 2006ea4:	003fca06 	br	2006dd0 <__alt_mem_mem_0+0xfcfe6dd0>

02006ea8 <__ratio>:
 2006ea8:	defff904 	addi	sp,sp,-28
 2006eac:	dc400315 	stw	r17,12(sp)
 2006eb0:	2823883a 	mov	r17,r5
 2006eb4:	d9400104 	addi	r5,sp,4
 2006eb8:	dfc00615 	stw	ra,24(sp)
 2006ebc:	dcc00515 	stw	r19,20(sp)
 2006ec0:	dc800415 	stw	r18,16(sp)
 2006ec4:	2027883a 	mov	r19,r4
 2006ec8:	dc000215 	stw	r16,8(sp)
 2006ecc:	2006c500 	call	2006c50 <__b2d>
 2006ed0:	d80b883a 	mov	r5,sp
 2006ed4:	8809883a 	mov	r4,r17
 2006ed8:	1025883a 	mov	r18,r2
 2006edc:	1821883a 	mov	r16,r3
 2006ee0:	2006c500 	call	2006c50 <__b2d>
 2006ee4:	8a000417 	ldw	r8,16(r17)
 2006ee8:	99000417 	ldw	r4,16(r19)
 2006eec:	d9400117 	ldw	r5,4(sp)
 2006ef0:	2209c83a 	sub	r4,r4,r8
 2006ef4:	2010917a 	slli	r8,r4,5
 2006ef8:	d9000017 	ldw	r4,0(sp)
 2006efc:	2909c83a 	sub	r4,r5,r4
 2006f00:	4109883a 	add	r4,r8,r4
 2006f04:	01000e0e 	bge	zero,r4,2006f40 <__ratio+0x98>
 2006f08:	2008953a 	slli	r4,r4,20
 2006f0c:	2421883a 	add	r16,r4,r16
 2006f10:	100d883a 	mov	r6,r2
 2006f14:	180f883a 	mov	r7,r3
 2006f18:	9009883a 	mov	r4,r18
 2006f1c:	800b883a 	mov	r5,r16
 2006f20:	200b4440 	call	200b444 <__divdf3>
 2006f24:	dfc00617 	ldw	ra,24(sp)
 2006f28:	dcc00517 	ldw	r19,20(sp)
 2006f2c:	dc800417 	ldw	r18,16(sp)
 2006f30:	dc400317 	ldw	r17,12(sp)
 2006f34:	dc000217 	ldw	r16,8(sp)
 2006f38:	dec00704 	addi	sp,sp,28
 2006f3c:	f800283a 	ret
 2006f40:	2008953a 	slli	r4,r4,20
 2006f44:	1907c83a 	sub	r3,r3,r4
 2006f48:	003ff106 	br	2006f10 <__alt_mem_mem_0+0xfcfe6f10>

02006f4c <_mprec_log10>:
 2006f4c:	defffe04 	addi	sp,sp,-8
 2006f50:	dc000015 	stw	r16,0(sp)
 2006f54:	dfc00115 	stw	ra,4(sp)
 2006f58:	008005c4 	movi	r2,23
 2006f5c:	2021883a 	mov	r16,r4
 2006f60:	11000d0e 	bge	r2,r4,2006f98 <_mprec_log10+0x4c>
 2006f64:	0005883a 	mov	r2,zero
 2006f68:	00cffc34 	movhi	r3,16368
 2006f6c:	843fffc4 	addi	r16,r16,-1
 2006f70:	000d883a 	mov	r6,zero
 2006f74:	01d00934 	movhi	r7,16420
 2006f78:	1009883a 	mov	r4,r2
 2006f7c:	180b883a 	mov	r5,r3
 2006f80:	200bf840 	call	200bf84 <__muldf3>
 2006f84:	803ff91e 	bne	r16,zero,2006f6c <__alt_mem_mem_0+0xfcfe6f6c>
 2006f88:	dfc00117 	ldw	ra,4(sp)
 2006f8c:	dc000017 	ldw	r16,0(sp)
 2006f90:	dec00204 	addi	sp,sp,8
 2006f94:	f800283a 	ret
 2006f98:	202090fa 	slli	r16,r4,3
 2006f9c:	00808134 	movhi	r2,516
 2006fa0:	1083a804 	addi	r2,r2,3744
 2006fa4:	1421883a 	add	r16,r2,r16
 2006fa8:	80800017 	ldw	r2,0(r16)
 2006fac:	80c00117 	ldw	r3,4(r16)
 2006fb0:	dfc00117 	ldw	ra,4(sp)
 2006fb4:	dc000017 	ldw	r16,0(sp)
 2006fb8:	dec00204 	addi	sp,sp,8
 2006fbc:	f800283a 	ret

02006fc0 <__copybits>:
 2006fc0:	297fffc4 	addi	r5,r5,-1
 2006fc4:	280fd17a 	srai	r7,r5,5
 2006fc8:	30c00417 	ldw	r3,16(r6)
 2006fcc:	30800504 	addi	r2,r6,20
 2006fd0:	39c00044 	addi	r7,r7,1
 2006fd4:	18c7883a 	add	r3,r3,r3
 2006fd8:	39cf883a 	add	r7,r7,r7
 2006fdc:	18c7883a 	add	r3,r3,r3
 2006fe0:	39cf883a 	add	r7,r7,r7
 2006fe4:	10c7883a 	add	r3,r2,r3
 2006fe8:	21cf883a 	add	r7,r4,r7
 2006fec:	10c00d2e 	bgeu	r2,r3,2007024 <__copybits+0x64>
 2006ff0:	200b883a 	mov	r5,r4
 2006ff4:	12000017 	ldw	r8,0(r2)
 2006ff8:	29400104 	addi	r5,r5,4
 2006ffc:	10800104 	addi	r2,r2,4
 2007000:	2a3fff15 	stw	r8,-4(r5)
 2007004:	10fffb36 	bltu	r2,r3,2006ff4 <__alt_mem_mem_0+0xfcfe6ff4>
 2007008:	1985c83a 	sub	r2,r3,r6
 200700c:	10bffac4 	addi	r2,r2,-21
 2007010:	1004d0ba 	srli	r2,r2,2
 2007014:	10800044 	addi	r2,r2,1
 2007018:	1085883a 	add	r2,r2,r2
 200701c:	1085883a 	add	r2,r2,r2
 2007020:	2089883a 	add	r4,r4,r2
 2007024:	21c0032e 	bgeu	r4,r7,2007034 <__copybits+0x74>
 2007028:	20000015 	stw	zero,0(r4)
 200702c:	21000104 	addi	r4,r4,4
 2007030:	21fffd36 	bltu	r4,r7,2007028 <__alt_mem_mem_0+0xfcfe7028>
 2007034:	f800283a 	ret

02007038 <__any_on>:
 2007038:	20c00417 	ldw	r3,16(r4)
 200703c:	2805d17a 	srai	r2,r5,5
 2007040:	21000504 	addi	r4,r4,20
 2007044:	18800d0e 	bge	r3,r2,200707c <__any_on+0x44>
 2007048:	18c7883a 	add	r3,r3,r3
 200704c:	18c7883a 	add	r3,r3,r3
 2007050:	20c7883a 	add	r3,r4,r3
 2007054:	20c0192e 	bgeu	r4,r3,20070bc <__any_on+0x84>
 2007058:	18bfff17 	ldw	r2,-4(r3)
 200705c:	18ffff04 	addi	r3,r3,-4
 2007060:	1000041e 	bne	r2,zero,2007074 <__any_on+0x3c>
 2007064:	20c0142e 	bgeu	r4,r3,20070b8 <__any_on+0x80>
 2007068:	18ffff04 	addi	r3,r3,-4
 200706c:	19400017 	ldw	r5,0(r3)
 2007070:	283ffc26 	beq	r5,zero,2007064 <__alt_mem_mem_0+0xfcfe7064>
 2007074:	00800044 	movi	r2,1
 2007078:	f800283a 	ret
 200707c:	10c00a0e 	bge	r2,r3,20070a8 <__any_on+0x70>
 2007080:	1085883a 	add	r2,r2,r2
 2007084:	1085883a 	add	r2,r2,r2
 2007088:	294007cc 	andi	r5,r5,31
 200708c:	2087883a 	add	r3,r4,r2
 2007090:	283ff026 	beq	r5,zero,2007054 <__alt_mem_mem_0+0xfcfe7054>
 2007094:	19800017 	ldw	r6,0(r3)
 2007098:	3144d83a 	srl	r2,r6,r5
 200709c:	114a983a 	sll	r5,r2,r5
 20070a0:	317ff41e 	bne	r6,r5,2007074 <__alt_mem_mem_0+0xfcfe7074>
 20070a4:	003feb06 	br	2007054 <__alt_mem_mem_0+0xfcfe7054>
 20070a8:	1085883a 	add	r2,r2,r2
 20070ac:	1085883a 	add	r2,r2,r2
 20070b0:	2087883a 	add	r3,r4,r2
 20070b4:	003fe706 	br	2007054 <__alt_mem_mem_0+0xfcfe7054>
 20070b8:	f800283a 	ret
 20070bc:	0005883a 	mov	r2,zero
 20070c0:	f800283a 	ret

020070c4 <__fpclassifyd>:
 20070c4:	00a00034 	movhi	r2,32768
 20070c8:	10bfffc4 	addi	r2,r2,-1
 20070cc:	2884703a 	and	r2,r5,r2
 20070d0:	10000726 	beq	r2,zero,20070f0 <__fpclassifyd+0x2c>
 20070d4:	00fffc34 	movhi	r3,65520
 20070d8:	019ff834 	movhi	r6,32736
 20070dc:	28c7883a 	add	r3,r5,r3
 20070e0:	31bfffc4 	addi	r6,r6,-1
 20070e4:	30c00536 	bltu	r6,r3,20070fc <__fpclassifyd+0x38>
 20070e8:	00800104 	movi	r2,4
 20070ec:	f800283a 	ret
 20070f0:	2000021e 	bne	r4,zero,20070fc <__fpclassifyd+0x38>
 20070f4:	00800084 	movi	r2,2
 20070f8:	f800283a 	ret
 20070fc:	00dffc34 	movhi	r3,32752
 2007100:	019ff834 	movhi	r6,32736
 2007104:	28cb883a 	add	r5,r5,r3
 2007108:	31bfffc4 	addi	r6,r6,-1
 200710c:	317ff62e 	bgeu	r6,r5,20070e8 <__alt_mem_mem_0+0xfcfe70e8>
 2007110:	01400434 	movhi	r5,16
 2007114:	297fffc4 	addi	r5,r5,-1
 2007118:	28800236 	bltu	r5,r2,2007124 <__fpclassifyd+0x60>
 200711c:	008000c4 	movi	r2,3
 2007120:	f800283a 	ret
 2007124:	10c00226 	beq	r2,r3,2007130 <__fpclassifyd+0x6c>
 2007128:	0005883a 	mov	r2,zero
 200712c:	f800283a 	ret
 2007130:	2005003a 	cmpeq	r2,r4,zero
 2007134:	f800283a 	ret

02007138 <_sbrk_r>:
 2007138:	defffd04 	addi	sp,sp,-12
 200713c:	dc000015 	stw	r16,0(sp)
 2007140:	04008134 	movhi	r16,516
 2007144:	dc400115 	stw	r17,4(sp)
 2007148:	841db504 	addi	r16,r16,30420
 200714c:	2023883a 	mov	r17,r4
 2007150:	2809883a 	mov	r4,r5
 2007154:	dfc00215 	stw	ra,8(sp)
 2007158:	80000015 	stw	zero,0(r16)
 200715c:	2012f8c0 	call	2012f8c <sbrk>
 2007160:	00ffffc4 	movi	r3,-1
 2007164:	10c00526 	beq	r2,r3,200717c <_sbrk_r+0x44>
 2007168:	dfc00217 	ldw	ra,8(sp)
 200716c:	dc400117 	ldw	r17,4(sp)
 2007170:	dc000017 	ldw	r16,0(sp)
 2007174:	dec00304 	addi	sp,sp,12
 2007178:	f800283a 	ret
 200717c:	80c00017 	ldw	r3,0(r16)
 2007180:	183ff926 	beq	r3,zero,2007168 <__alt_mem_mem_0+0xfcfe7168>
 2007184:	88c00015 	stw	r3,0(r17)
 2007188:	003ff706 	br	2007168 <__alt_mem_mem_0+0xfcfe7168>

0200718c <__sread>:
 200718c:	defffe04 	addi	sp,sp,-8
 2007190:	dc000015 	stw	r16,0(sp)
 2007194:	2821883a 	mov	r16,r5
 2007198:	2940038f 	ldh	r5,14(r5)
 200719c:	dfc00115 	stw	ra,4(sp)
 20071a0:	20096300 	call	2009630 <_read_r>
 20071a4:	10000716 	blt	r2,zero,20071c4 <__sread+0x38>
 20071a8:	80c01417 	ldw	r3,80(r16)
 20071ac:	1887883a 	add	r3,r3,r2
 20071b0:	80c01415 	stw	r3,80(r16)
 20071b4:	dfc00117 	ldw	ra,4(sp)
 20071b8:	dc000017 	ldw	r16,0(sp)
 20071bc:	dec00204 	addi	sp,sp,8
 20071c0:	f800283a 	ret
 20071c4:	80c0030b 	ldhu	r3,12(r16)
 20071c8:	18fbffcc 	andi	r3,r3,61439
 20071cc:	80c0030d 	sth	r3,12(r16)
 20071d0:	dfc00117 	ldw	ra,4(sp)
 20071d4:	dc000017 	ldw	r16,0(sp)
 20071d8:	dec00204 	addi	sp,sp,8
 20071dc:	f800283a 	ret

020071e0 <__seofread>:
 20071e0:	0005883a 	mov	r2,zero
 20071e4:	f800283a 	ret

020071e8 <__swrite>:
 20071e8:	2880030b 	ldhu	r2,12(r5)
 20071ec:	defffb04 	addi	sp,sp,-20
 20071f0:	dcc00315 	stw	r19,12(sp)
 20071f4:	dc800215 	stw	r18,8(sp)
 20071f8:	dc400115 	stw	r17,4(sp)
 20071fc:	dc000015 	stw	r16,0(sp)
 2007200:	dfc00415 	stw	ra,16(sp)
 2007204:	10c0400c 	andi	r3,r2,256
 2007208:	2821883a 	mov	r16,r5
 200720c:	2023883a 	mov	r17,r4
 2007210:	3025883a 	mov	r18,r6
 2007214:	3827883a 	mov	r19,r7
 2007218:	18000526 	beq	r3,zero,2007230 <__swrite+0x48>
 200721c:	2940038f 	ldh	r5,14(r5)
 2007220:	01c00084 	movi	r7,2
 2007224:	000d883a 	mov	r6,zero
 2007228:	20094740 	call	2009474 <_lseek_r>
 200722c:	8080030b 	ldhu	r2,12(r16)
 2007230:	8140038f 	ldh	r5,14(r16)
 2007234:	10bbffcc 	andi	r2,r2,61439
 2007238:	980f883a 	mov	r7,r19
 200723c:	900d883a 	mov	r6,r18
 2007240:	8809883a 	mov	r4,r17
 2007244:	8080030d 	sth	r2,12(r16)
 2007248:	dfc00417 	ldw	ra,16(sp)
 200724c:	dcc00317 	ldw	r19,12(sp)
 2007250:	dc800217 	ldw	r18,8(sp)
 2007254:	dc400117 	ldw	r17,4(sp)
 2007258:	dc000017 	ldw	r16,0(sp)
 200725c:	dec00504 	addi	sp,sp,20
 2007260:	2008a841 	jmpi	2008a84 <_write_r>

02007264 <__sseek>:
 2007264:	defffe04 	addi	sp,sp,-8
 2007268:	dc000015 	stw	r16,0(sp)
 200726c:	2821883a 	mov	r16,r5
 2007270:	2940038f 	ldh	r5,14(r5)
 2007274:	dfc00115 	stw	ra,4(sp)
 2007278:	20094740 	call	2009474 <_lseek_r>
 200727c:	00ffffc4 	movi	r3,-1
 2007280:	10c00826 	beq	r2,r3,20072a4 <__sseek+0x40>
 2007284:	80c0030b 	ldhu	r3,12(r16)
 2007288:	80801415 	stw	r2,80(r16)
 200728c:	18c40014 	ori	r3,r3,4096
 2007290:	80c0030d 	sth	r3,12(r16)
 2007294:	dfc00117 	ldw	ra,4(sp)
 2007298:	dc000017 	ldw	r16,0(sp)
 200729c:	dec00204 	addi	sp,sp,8
 20072a0:	f800283a 	ret
 20072a4:	80c0030b 	ldhu	r3,12(r16)
 20072a8:	18fbffcc 	andi	r3,r3,61439
 20072ac:	80c0030d 	sth	r3,12(r16)
 20072b0:	dfc00117 	ldw	ra,4(sp)
 20072b4:	dc000017 	ldw	r16,0(sp)
 20072b8:	dec00204 	addi	sp,sp,8
 20072bc:	f800283a 	ret

020072c0 <__sclose>:
 20072c0:	2940038f 	ldh	r5,14(r5)
 20072c4:	2008ae41 	jmpi	2008ae4 <_close_r>

020072c8 <strcmp>:
 20072c8:	2144b03a 	or	r2,r4,r5
 20072cc:	108000cc 	andi	r2,r2,3
 20072d0:	1000171e 	bne	r2,zero,2007330 <strcmp+0x68>
 20072d4:	20800017 	ldw	r2,0(r4)
 20072d8:	28c00017 	ldw	r3,0(r5)
 20072dc:	10c0141e 	bne	r2,r3,2007330 <strcmp+0x68>
 20072e0:	027fbff4 	movhi	r9,65279
 20072e4:	4a7fbfc4 	addi	r9,r9,-257
 20072e8:	0086303a 	nor	r3,zero,r2
 20072ec:	02202074 	movhi	r8,32897
 20072f0:	1245883a 	add	r2,r2,r9
 20072f4:	42202004 	addi	r8,r8,-32640
 20072f8:	10c4703a 	and	r2,r2,r3
 20072fc:	1204703a 	and	r2,r2,r8
 2007300:	10000226 	beq	r2,zero,200730c <strcmp+0x44>
 2007304:	00002306 	br	2007394 <strcmp+0xcc>
 2007308:	1000221e 	bne	r2,zero,2007394 <strcmp+0xcc>
 200730c:	21000104 	addi	r4,r4,4
 2007310:	20c00017 	ldw	r3,0(r4)
 2007314:	29400104 	addi	r5,r5,4
 2007318:	29800017 	ldw	r6,0(r5)
 200731c:	1a4f883a 	add	r7,r3,r9
 2007320:	00c4303a 	nor	r2,zero,r3
 2007324:	3884703a 	and	r2,r7,r2
 2007328:	1204703a 	and	r2,r2,r8
 200732c:	19bff626 	beq	r3,r6,2007308 <__alt_mem_mem_0+0xfcfe7308>
 2007330:	20800003 	ldbu	r2,0(r4)
 2007334:	10c03fcc 	andi	r3,r2,255
 2007338:	18c0201c 	xori	r3,r3,128
 200733c:	18ffe004 	addi	r3,r3,-128
 2007340:	18000c26 	beq	r3,zero,2007374 <strcmp+0xac>
 2007344:	29800007 	ldb	r6,0(r5)
 2007348:	19800326 	beq	r3,r6,2007358 <strcmp+0x90>
 200734c:	00001306 	br	200739c <strcmp+0xd4>
 2007350:	29800007 	ldb	r6,0(r5)
 2007354:	11800b1e 	bne	r2,r6,2007384 <strcmp+0xbc>
 2007358:	21000044 	addi	r4,r4,1
 200735c:	20c00003 	ldbu	r3,0(r4)
 2007360:	29400044 	addi	r5,r5,1
 2007364:	18803fcc 	andi	r2,r3,255
 2007368:	1080201c 	xori	r2,r2,128
 200736c:	10bfe004 	addi	r2,r2,-128
 2007370:	103ff71e 	bne	r2,zero,2007350 <__alt_mem_mem_0+0xfcfe7350>
 2007374:	0007883a 	mov	r3,zero
 2007378:	28800003 	ldbu	r2,0(r5)
 200737c:	1885c83a 	sub	r2,r3,r2
 2007380:	f800283a 	ret
 2007384:	28800003 	ldbu	r2,0(r5)
 2007388:	18c03fcc 	andi	r3,r3,255
 200738c:	1885c83a 	sub	r2,r3,r2
 2007390:	f800283a 	ret
 2007394:	0005883a 	mov	r2,zero
 2007398:	f800283a 	ret
 200739c:	10c03fcc 	andi	r3,r2,255
 20073a0:	003ff506 	br	2007378 <__alt_mem_mem_0+0xfcfe7378>

020073a4 <strlen>:
 20073a4:	208000cc 	andi	r2,r4,3
 20073a8:	10002026 	beq	r2,zero,200742c <strlen+0x88>
 20073ac:	20800007 	ldb	r2,0(r4)
 20073b0:	10002026 	beq	r2,zero,2007434 <strlen+0x90>
 20073b4:	2005883a 	mov	r2,r4
 20073b8:	00000206 	br	20073c4 <strlen+0x20>
 20073bc:	10c00007 	ldb	r3,0(r2)
 20073c0:	18001826 	beq	r3,zero,2007424 <strlen+0x80>
 20073c4:	10800044 	addi	r2,r2,1
 20073c8:	10c000cc 	andi	r3,r2,3
 20073cc:	183ffb1e 	bne	r3,zero,20073bc <__alt_mem_mem_0+0xfcfe73bc>
 20073d0:	10c00017 	ldw	r3,0(r2)
 20073d4:	01ffbff4 	movhi	r7,65279
 20073d8:	39ffbfc4 	addi	r7,r7,-257
 20073dc:	00ca303a 	nor	r5,zero,r3
 20073e0:	01a02074 	movhi	r6,32897
 20073e4:	19c7883a 	add	r3,r3,r7
 20073e8:	31a02004 	addi	r6,r6,-32640
 20073ec:	1946703a 	and	r3,r3,r5
 20073f0:	1986703a 	and	r3,r3,r6
 20073f4:	1800091e 	bne	r3,zero,200741c <strlen+0x78>
 20073f8:	10800104 	addi	r2,r2,4
 20073fc:	10c00017 	ldw	r3,0(r2)
 2007400:	19cb883a 	add	r5,r3,r7
 2007404:	00c6303a 	nor	r3,zero,r3
 2007408:	28c6703a 	and	r3,r5,r3
 200740c:	1986703a 	and	r3,r3,r6
 2007410:	183ff926 	beq	r3,zero,20073f8 <__alt_mem_mem_0+0xfcfe73f8>
 2007414:	00000106 	br	200741c <strlen+0x78>
 2007418:	10800044 	addi	r2,r2,1
 200741c:	10c00007 	ldb	r3,0(r2)
 2007420:	183ffd1e 	bne	r3,zero,2007418 <__alt_mem_mem_0+0xfcfe7418>
 2007424:	1105c83a 	sub	r2,r2,r4
 2007428:	f800283a 	ret
 200742c:	2005883a 	mov	r2,r4
 2007430:	003fe706 	br	20073d0 <__alt_mem_mem_0+0xfcfe73d0>
 2007434:	0005883a 	mov	r2,zero
 2007438:	f800283a 	ret

0200743c <__sprint_r.part.0>:
 200743c:	28801917 	ldw	r2,100(r5)
 2007440:	defff604 	addi	sp,sp,-40
 2007444:	dd400515 	stw	r21,20(sp)
 2007448:	dfc00915 	stw	ra,36(sp)
 200744c:	df000815 	stw	fp,32(sp)
 2007450:	ddc00715 	stw	r23,28(sp)
 2007454:	dd800615 	stw	r22,24(sp)
 2007458:	dd000415 	stw	r20,16(sp)
 200745c:	dcc00315 	stw	r19,12(sp)
 2007460:	dc800215 	stw	r18,8(sp)
 2007464:	dc400115 	stw	r17,4(sp)
 2007468:	dc000015 	stw	r16,0(sp)
 200746c:	1088000c 	andi	r2,r2,8192
 2007470:	302b883a 	mov	r21,r6
 2007474:	10002e26 	beq	r2,zero,2007530 <__sprint_r.part.0+0xf4>
 2007478:	30800217 	ldw	r2,8(r6)
 200747c:	35800017 	ldw	r22,0(r6)
 2007480:	10002926 	beq	r2,zero,2007528 <__sprint_r.part.0+0xec>
 2007484:	2827883a 	mov	r19,r5
 2007488:	2029883a 	mov	r20,r4
 200748c:	b5c00104 	addi	r23,r22,4
 2007490:	04bfffc4 	movi	r18,-1
 2007494:	bc400017 	ldw	r17,0(r23)
 2007498:	b4000017 	ldw	r16,0(r22)
 200749c:	0039883a 	mov	fp,zero
 20074a0:	8822d0ba 	srli	r17,r17,2
 20074a4:	8800031e 	bne	r17,zero,20074b4 <__sprint_r.part.0+0x78>
 20074a8:	00001806 	br	200750c <__sprint_r.part.0+0xd0>
 20074ac:	84000104 	addi	r16,r16,4
 20074b0:	8f001526 	beq	r17,fp,2007508 <__sprint_r.part.0+0xcc>
 20074b4:	81400017 	ldw	r5,0(r16)
 20074b8:	980d883a 	mov	r6,r19
 20074bc:	a009883a 	mov	r4,r20
 20074c0:	2008e640 	call	2008e64 <_fputwc_r>
 20074c4:	e7000044 	addi	fp,fp,1
 20074c8:	14bff81e 	bne	r2,r18,20074ac <__alt_mem_mem_0+0xfcfe74ac>
 20074cc:	9005883a 	mov	r2,r18
 20074d0:	a8000215 	stw	zero,8(r21)
 20074d4:	a8000115 	stw	zero,4(r21)
 20074d8:	dfc00917 	ldw	ra,36(sp)
 20074dc:	df000817 	ldw	fp,32(sp)
 20074e0:	ddc00717 	ldw	r23,28(sp)
 20074e4:	dd800617 	ldw	r22,24(sp)
 20074e8:	dd400517 	ldw	r21,20(sp)
 20074ec:	dd000417 	ldw	r20,16(sp)
 20074f0:	dcc00317 	ldw	r19,12(sp)
 20074f4:	dc800217 	ldw	r18,8(sp)
 20074f8:	dc400117 	ldw	r17,4(sp)
 20074fc:	dc000017 	ldw	r16,0(sp)
 2007500:	dec00a04 	addi	sp,sp,40
 2007504:	f800283a 	ret
 2007508:	a8800217 	ldw	r2,8(r21)
 200750c:	8c63883a 	add	r17,r17,r17
 2007510:	8c63883a 	add	r17,r17,r17
 2007514:	1445c83a 	sub	r2,r2,r17
 2007518:	a8800215 	stw	r2,8(r21)
 200751c:	b5800204 	addi	r22,r22,8
 2007520:	bdc00204 	addi	r23,r23,8
 2007524:	103fdb1e 	bne	r2,zero,2007494 <__alt_mem_mem_0+0xfcfe7494>
 2007528:	0005883a 	mov	r2,zero
 200752c:	003fe806 	br	20074d0 <__alt_mem_mem_0+0xfcfe74d0>
 2007530:	2008f640 	call	2008f64 <__sfvwrite_r>
 2007534:	003fe606 	br	20074d0 <__alt_mem_mem_0+0xfcfe74d0>

02007538 <__sprint_r>:
 2007538:	30c00217 	ldw	r3,8(r6)
 200753c:	18000126 	beq	r3,zero,2007544 <__sprint_r+0xc>
 2007540:	200743c1 	jmpi	200743c <__sprint_r.part.0>
 2007544:	30000115 	stw	zero,4(r6)
 2007548:	0005883a 	mov	r2,zero
 200754c:	f800283a 	ret

02007550 <___vfiprintf_internal_r>:
 2007550:	deffc904 	addi	sp,sp,-220
 2007554:	df003515 	stw	fp,212(sp)
 2007558:	dd003115 	stw	r20,196(sp)
 200755c:	dfc03615 	stw	ra,216(sp)
 2007560:	ddc03415 	stw	r23,208(sp)
 2007564:	dd803315 	stw	r22,204(sp)
 2007568:	dd403215 	stw	r21,200(sp)
 200756c:	dcc03015 	stw	r19,192(sp)
 2007570:	dc802f15 	stw	r18,188(sp)
 2007574:	dc402e15 	stw	r17,184(sp)
 2007578:	dc002d15 	stw	r16,180(sp)
 200757c:	d9002015 	stw	r4,128(sp)
 2007580:	d9c02215 	stw	r7,136(sp)
 2007584:	2829883a 	mov	r20,r5
 2007588:	3039883a 	mov	fp,r6
 200758c:	20000226 	beq	r4,zero,2007598 <___vfiprintf_internal_r+0x48>
 2007590:	20800e17 	ldw	r2,56(r4)
 2007594:	1000cf26 	beq	r2,zero,20078d4 <___vfiprintf_internal_r+0x384>
 2007598:	a080030b 	ldhu	r2,12(r20)
 200759c:	10c8000c 	andi	r3,r2,8192
 20075a0:	1800061e 	bne	r3,zero,20075bc <___vfiprintf_internal_r+0x6c>
 20075a4:	a1001917 	ldw	r4,100(r20)
 20075a8:	00f7ffc4 	movi	r3,-8193
 20075ac:	10880014 	ori	r2,r2,8192
 20075b0:	20c6703a 	and	r3,r4,r3
 20075b4:	a080030d 	sth	r2,12(r20)
 20075b8:	a0c01915 	stw	r3,100(r20)
 20075bc:	10c0020c 	andi	r3,r2,8
 20075c0:	1800a926 	beq	r3,zero,2007868 <___vfiprintf_internal_r+0x318>
 20075c4:	a0c00417 	ldw	r3,16(r20)
 20075c8:	1800a726 	beq	r3,zero,2007868 <___vfiprintf_internal_r+0x318>
 20075cc:	1080068c 	andi	r2,r2,26
 20075d0:	00c00284 	movi	r3,10
 20075d4:	10c0ac26 	beq	r2,r3,2007888 <___vfiprintf_internal_r+0x338>
 20075d8:	da801a04 	addi	r10,sp,104
 20075dc:	da801e15 	stw	r10,120(sp)
 20075e0:	d8801e17 	ldw	r2,120(sp)
 20075e4:	da8019c4 	addi	r10,sp,103
 20075e8:	05808134 	movhi	r22,516
 20075ec:	05c08134 	movhi	r23,516
 20075f0:	da801f15 	stw	r10,124(sp)
 20075f4:	1295c83a 	sub	r10,r2,r10
 20075f8:	b583de04 	addi	r22,r22,3960
 20075fc:	bdc3da04 	addi	r23,r23,3944
 2007600:	dec01a15 	stw	sp,104(sp)
 2007604:	d8001c15 	stw	zero,112(sp)
 2007608:	d8001b15 	stw	zero,108(sp)
 200760c:	d8002615 	stw	zero,152(sp)
 2007610:	d8002315 	stw	zero,140(sp)
 2007614:	da802715 	stw	r10,156(sp)
 2007618:	d811883a 	mov	r8,sp
 200761c:	dd002115 	stw	r20,132(sp)
 2007620:	e021883a 	mov	r16,fp
 2007624:	80800007 	ldb	r2,0(r16)
 2007628:	1003ea26 	beq	r2,zero,20085d4 <___vfiprintf_internal_r+0x1084>
 200762c:	00c00944 	movi	r3,37
 2007630:	8025883a 	mov	r18,r16
 2007634:	10c0021e 	bne	r2,r3,2007640 <___vfiprintf_internal_r+0xf0>
 2007638:	00001606 	br	2007694 <___vfiprintf_internal_r+0x144>
 200763c:	10c00326 	beq	r2,r3,200764c <___vfiprintf_internal_r+0xfc>
 2007640:	94800044 	addi	r18,r18,1
 2007644:	90800007 	ldb	r2,0(r18)
 2007648:	103ffc1e 	bne	r2,zero,200763c <__alt_mem_mem_0+0xfcfe763c>
 200764c:	9423c83a 	sub	r17,r18,r16
 2007650:	88001026 	beq	r17,zero,2007694 <___vfiprintf_internal_r+0x144>
 2007654:	d8c01c17 	ldw	r3,112(sp)
 2007658:	d8801b17 	ldw	r2,108(sp)
 200765c:	44000015 	stw	r16,0(r8)
 2007660:	88c7883a 	add	r3,r17,r3
 2007664:	10800044 	addi	r2,r2,1
 2007668:	44400115 	stw	r17,4(r8)
 200766c:	d8c01c15 	stw	r3,112(sp)
 2007670:	d8801b15 	stw	r2,108(sp)
 2007674:	010001c4 	movi	r4,7
 2007678:	2080760e 	bge	r4,r2,2007854 <___vfiprintf_internal_r+0x304>
 200767c:	1803821e 	bne	r3,zero,2008488 <___vfiprintf_internal_r+0xf38>
 2007680:	da802317 	ldw	r10,140(sp)
 2007684:	d8001b15 	stw	zero,108(sp)
 2007688:	d811883a 	mov	r8,sp
 200768c:	5455883a 	add	r10,r10,r17
 2007690:	da802315 	stw	r10,140(sp)
 2007694:	90800007 	ldb	r2,0(r18)
 2007698:	10044626 	beq	r2,zero,20087b4 <___vfiprintf_internal_r+0x1264>
 200769c:	90c00047 	ldb	r3,1(r18)
 20076a0:	94000044 	addi	r16,r18,1
 20076a4:	d8001d85 	stb	zero,118(sp)
 20076a8:	0009883a 	mov	r4,zero
 20076ac:	000f883a 	mov	r7,zero
 20076b0:	027fffc4 	movi	r9,-1
 20076b4:	0023883a 	mov	r17,zero
 20076b8:	0029883a 	mov	r20,zero
 20076bc:	01401604 	movi	r5,88
 20076c0:	01800244 	movi	r6,9
 20076c4:	03400a84 	movi	r13,42
 20076c8:	03001b04 	movi	r12,108
 20076cc:	84000044 	addi	r16,r16,1
 20076d0:	18bff804 	addi	r2,r3,-32
 20076d4:	28827336 	bltu	r5,r2,20080a4 <___vfiprintf_internal_r+0xb54>
 20076d8:	100490ba 	slli	r2,r2,2
 20076dc:	02808034 	movhi	r10,512
 20076e0:	529dbc04 	addi	r10,r10,30448
 20076e4:	1285883a 	add	r2,r2,r10
 20076e8:	10800017 	ldw	r2,0(r2)
 20076ec:	1000683a 	jmp	r2
 20076f0:	02007dd8 	cmpnei	r8,zero,503
 20076f4:	020080a4 	muli	r8,zero,514
 20076f8:	020080a4 	muli	r8,zero,514
 20076fc:	02007df8 	rdprs	r8,zero,503
 2007700:	020080a4 	muli	r8,zero,514
 2007704:	020080a4 	muli	r8,zero,514
 2007708:	020080a4 	muli	r8,zero,514
 200770c:	020080a4 	muli	r8,zero,514
 2007710:	020080a4 	muli	r8,zero,514
 2007714:	020080a4 	muli	r8,zero,514
 2007718:	02007fe0 	cmpeqi	r8,zero,511
 200771c:	02007ffc 	xorhi	r8,zero,511
 2007720:	020080a4 	muli	r8,zero,514
 2007724:	020078e4 	muli	r8,zero,483
 2007728:	0200800c 	andi	r8,zero,512
 200772c:	020080a4 	muli	r8,zero,514
 2007730:	02007e04 	movi	r8,504
 2007734:	02007e10 	cmplti	r8,zero,504
 2007738:	02007e10 	cmplti	r8,zero,504
 200773c:	02007e10 	cmplti	r8,zero,504
 2007740:	02007e10 	cmplti	r8,zero,504
 2007744:	02007e10 	cmplti	r8,zero,504
 2007748:	02007e10 	cmplti	r8,zero,504
 200774c:	02007e10 	cmplti	r8,zero,504
 2007750:	02007e10 	cmplti	r8,zero,504
 2007754:	02007e10 	cmplti	r8,zero,504
 2007758:	020080a4 	muli	r8,zero,514
 200775c:	020080a4 	muli	r8,zero,514
 2007760:	020080a4 	muli	r8,zero,514
 2007764:	020080a4 	muli	r8,zero,514
 2007768:	020080a4 	muli	r8,zero,514
 200776c:	020080a4 	muli	r8,zero,514
 2007770:	020080a4 	muli	r8,zero,514
 2007774:	020080a4 	muli	r8,zero,514
 2007778:	020080a4 	muli	r8,zero,514
 200777c:	020080a4 	muli	r8,zero,514
 2007780:	02007e3c 	xorhi	r8,zero,504
 2007784:	020080a4 	muli	r8,zero,514
 2007788:	020080a4 	muli	r8,zero,514
 200778c:	020080a4 	muli	r8,zero,514
 2007790:	020080a4 	muli	r8,zero,514
 2007794:	020080a4 	muli	r8,zero,514
 2007798:	020080a4 	muli	r8,zero,514
 200779c:	020080a4 	muli	r8,zero,514
 20077a0:	020080a4 	muli	r8,zero,514
 20077a4:	020080a4 	muli	r8,zero,514
 20077a8:	020080a4 	muli	r8,zero,514
 20077ac:	02007e74 	movhi	r8,505
 20077b0:	020080a4 	muli	r8,zero,514
 20077b4:	020080a4 	muli	r8,zero,514
 20077b8:	020080a4 	muli	r8,zero,514
 20077bc:	020080a4 	muli	r8,zero,514
 20077c0:	020080a4 	muli	r8,zero,514
 20077c4:	02007ecc 	andi	r8,zero,507
 20077c8:	020080a4 	muli	r8,zero,514
 20077cc:	020080a4 	muli	r8,zero,514
 20077d0:	02007f3c 	xorhi	r8,zero,508
 20077d4:	020080a4 	muli	r8,zero,514
 20077d8:	020080a4 	muli	r8,zero,514
 20077dc:	020080a4 	muli	r8,zero,514
 20077e0:	020080a4 	muli	r8,zero,514
 20077e4:	020080a4 	muli	r8,zero,514
 20077e8:	020080a4 	muli	r8,zero,514
 20077ec:	020080a4 	muli	r8,zero,514
 20077f0:	020080a4 	muli	r8,zero,514
 20077f4:	020080a4 	muli	r8,zero,514
 20077f8:	020080a4 	muli	r8,zero,514
 20077fc:	02007ce8 	cmpgeui	r8,zero,499
 2007800:	02007d14 	movui	r8,500
 2007804:	020080a4 	muli	r8,zero,514
 2007808:	020080a4 	muli	r8,zero,514
 200780c:	020080a4 	muli	r8,zero,514
 2007810:	0200804c 	andi	r8,zero,513
 2007814:	02007d14 	movui	r8,500
 2007818:	020080a4 	muli	r8,zero,514
 200781c:	020080a4 	muli	r8,zero,514
 2007820:	02007ba8 	cmpgeui	r8,zero,494
 2007824:	020080a4 	muli	r8,zero,514
 2007828:	02007bb8 	rdprs	r8,zero,494
 200782c:	02007bf4 	movhi	r8,495
 2007830:	020078f0 	cmpltui	r8,zero,483
 2007834:	02007b9c 	xori	r8,zero,494
 2007838:	020080a4 	muli	r8,zero,514
 200783c:	02007f78 	rdprs	r8,zero,509
 2007840:	020080a4 	muli	r8,zero,514
 2007844:	02007fd0 	cmplti	r8,zero,511
 2007848:	020080a4 	muli	r8,zero,514
 200784c:	020080a4 	muli	r8,zero,514
 2007850:	02007c94 	movui	r8,498
 2007854:	42000204 	addi	r8,r8,8
 2007858:	da802317 	ldw	r10,140(sp)
 200785c:	5455883a 	add	r10,r10,r17
 2007860:	da802315 	stw	r10,140(sp)
 2007864:	003f8b06 	br	2007694 <__alt_mem_mem_0+0xfcfe7694>
 2007868:	d9002017 	ldw	r4,128(sp)
 200786c:	a00b883a 	mov	r5,r20
 2007870:	2002cf00 	call	2002cf0 <__swsetup_r>
 2007874:	1003b11e 	bne	r2,zero,200873c <___vfiprintf_internal_r+0x11ec>
 2007878:	a080030b 	ldhu	r2,12(r20)
 200787c:	00c00284 	movi	r3,10
 2007880:	1080068c 	andi	r2,r2,26
 2007884:	10ff541e 	bne	r2,r3,20075d8 <__alt_mem_mem_0+0xfcfe75d8>
 2007888:	a080038f 	ldh	r2,14(r20)
 200788c:	103f5216 	blt	r2,zero,20075d8 <__alt_mem_mem_0+0xfcfe75d8>
 2007890:	d9c02217 	ldw	r7,136(sp)
 2007894:	d9002017 	ldw	r4,128(sp)
 2007898:	e00d883a 	mov	r6,fp
 200789c:	a00b883a 	mov	r5,r20
 20078a0:	20089c80 	call	20089c8 <__sbprintf>
 20078a4:	dfc03617 	ldw	ra,216(sp)
 20078a8:	df003517 	ldw	fp,212(sp)
 20078ac:	ddc03417 	ldw	r23,208(sp)
 20078b0:	dd803317 	ldw	r22,204(sp)
 20078b4:	dd403217 	ldw	r21,200(sp)
 20078b8:	dd003117 	ldw	r20,196(sp)
 20078bc:	dcc03017 	ldw	r19,192(sp)
 20078c0:	dc802f17 	ldw	r18,188(sp)
 20078c4:	dc402e17 	ldw	r17,184(sp)
 20078c8:	dc002d17 	ldw	r16,180(sp)
 20078cc:	dec03704 	addi	sp,sp,220
 20078d0:	f800283a 	ret
 20078d4:	2004cc40 	call	2004cc4 <__sinit>
 20078d8:	003f2f06 	br	2007598 <__alt_mem_mem_0+0xfcfe7598>
 20078dc:	0463c83a 	sub	r17,zero,r17
 20078e0:	d8802215 	stw	r2,136(sp)
 20078e4:	a5000114 	ori	r20,r20,4
 20078e8:	80c00007 	ldb	r3,0(r16)
 20078ec:	003f7706 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 20078f0:	00800c04 	movi	r2,48
 20078f4:	da802217 	ldw	r10,136(sp)
 20078f8:	d8801d05 	stb	r2,116(sp)
 20078fc:	00801e04 	movi	r2,120
 2007900:	d8801d45 	stb	r2,117(sp)
 2007904:	d8001d85 	stb	zero,118(sp)
 2007908:	50c00104 	addi	r3,r10,4
 200790c:	54800017 	ldw	r18,0(r10)
 2007910:	0027883a 	mov	r19,zero
 2007914:	a0800094 	ori	r2,r20,2
 2007918:	48030b16 	blt	r9,zero,2008548 <___vfiprintf_internal_r+0xff8>
 200791c:	00bfdfc4 	movi	r2,-129
 2007920:	a096703a 	and	r11,r20,r2
 2007924:	d8c02215 	stw	r3,136(sp)
 2007928:	5d000094 	ori	r20,r11,2
 200792c:	90032b1e 	bne	r18,zero,20085dc <___vfiprintf_internal_r+0x108c>
 2007930:	00808134 	movhi	r2,516
 2007934:	10837904 	addi	r2,r2,3556
 2007938:	d8802615 	stw	r2,152(sp)
 200793c:	0039883a 	mov	fp,zero
 2007940:	48017b1e 	bne	r9,zero,2007f30 <___vfiprintf_internal_r+0x9e0>
 2007944:	0013883a 	mov	r9,zero
 2007948:	0027883a 	mov	r19,zero
 200794c:	dd401a04 	addi	r21,sp,104
 2007950:	4825883a 	mov	r18,r9
 2007954:	4cc0010e 	bge	r9,r19,200795c <___vfiprintf_internal_r+0x40c>
 2007958:	9825883a 	mov	r18,r19
 200795c:	e7003fcc 	andi	fp,fp,255
 2007960:	e700201c 	xori	fp,fp,128
 2007964:	e73fe004 	addi	fp,fp,-128
 2007968:	e0000126 	beq	fp,zero,2007970 <___vfiprintf_internal_r+0x420>
 200796c:	94800044 	addi	r18,r18,1
 2007970:	a380008c 	andi	r14,r20,2
 2007974:	70000126 	beq	r14,zero,200797c <___vfiprintf_internal_r+0x42c>
 2007978:	94800084 	addi	r18,r18,2
 200797c:	a700210c 	andi	fp,r20,132
 2007980:	e001df1e 	bne	fp,zero,2008100 <___vfiprintf_internal_r+0xbb0>
 2007984:	8c87c83a 	sub	r3,r17,r18
 2007988:	00c1dd0e 	bge	zero,r3,2008100 <___vfiprintf_internal_r+0xbb0>
 200798c:	01c00404 	movi	r7,16
 2007990:	d8801c17 	ldw	r2,112(sp)
 2007994:	38c3ad0e 	bge	r7,r3,200884c <___vfiprintf_internal_r+0x12fc>
 2007998:	02808134 	movhi	r10,516
 200799c:	5283de04 	addi	r10,r10,3960
 20079a0:	dc002915 	stw	r16,164(sp)
 20079a4:	d9801b17 	ldw	r6,108(sp)
 20079a8:	da802415 	stw	r10,144(sp)
 20079ac:	03c001c4 	movi	r15,7
 20079b0:	da402515 	stw	r9,148(sp)
 20079b4:	db802815 	stw	r14,160(sp)
 20079b8:	1821883a 	mov	r16,r3
 20079bc:	00000506 	br	20079d4 <___vfiprintf_internal_r+0x484>
 20079c0:	31400084 	addi	r5,r6,2
 20079c4:	42000204 	addi	r8,r8,8
 20079c8:	200d883a 	mov	r6,r4
 20079cc:	843ffc04 	addi	r16,r16,-16
 20079d0:	3c000d0e 	bge	r7,r16,2007a08 <___vfiprintf_internal_r+0x4b8>
 20079d4:	10800404 	addi	r2,r2,16
 20079d8:	31000044 	addi	r4,r6,1
 20079dc:	45800015 	stw	r22,0(r8)
 20079e0:	41c00115 	stw	r7,4(r8)
 20079e4:	d8801c15 	stw	r2,112(sp)
 20079e8:	d9001b15 	stw	r4,108(sp)
 20079ec:	793ff40e 	bge	r15,r4,20079c0 <__alt_mem_mem_0+0xfcfe79c0>
 20079f0:	1001b51e 	bne	r2,zero,20080c8 <___vfiprintf_internal_r+0xb78>
 20079f4:	843ffc04 	addi	r16,r16,-16
 20079f8:	000d883a 	mov	r6,zero
 20079fc:	01400044 	movi	r5,1
 2007a00:	d811883a 	mov	r8,sp
 2007a04:	3c3ff316 	blt	r7,r16,20079d4 <__alt_mem_mem_0+0xfcfe79d4>
 2007a08:	8007883a 	mov	r3,r16
 2007a0c:	da402517 	ldw	r9,148(sp)
 2007a10:	db802817 	ldw	r14,160(sp)
 2007a14:	dc002917 	ldw	r16,164(sp)
 2007a18:	da802417 	ldw	r10,144(sp)
 2007a1c:	1885883a 	add	r2,r3,r2
 2007a20:	40c00115 	stw	r3,4(r8)
 2007a24:	42800015 	stw	r10,0(r8)
 2007a28:	d8801c15 	stw	r2,112(sp)
 2007a2c:	d9401b15 	stw	r5,108(sp)
 2007a30:	00c001c4 	movi	r3,7
 2007a34:	19426016 	blt	r3,r5,20083b8 <___vfiprintf_internal_r+0xe68>
 2007a38:	d8c01d87 	ldb	r3,118(sp)
 2007a3c:	42000204 	addi	r8,r8,8
 2007a40:	29000044 	addi	r4,r5,1
 2007a44:	1801b31e 	bne	r3,zero,2008114 <___vfiprintf_internal_r+0xbc4>
 2007a48:	7001c026 	beq	r14,zero,200814c <___vfiprintf_internal_r+0xbfc>
 2007a4c:	d8c01d04 	addi	r3,sp,116
 2007a50:	10800084 	addi	r2,r2,2
 2007a54:	40c00015 	stw	r3,0(r8)
 2007a58:	00c00084 	movi	r3,2
 2007a5c:	40c00115 	stw	r3,4(r8)
 2007a60:	d8801c15 	stw	r2,112(sp)
 2007a64:	d9001b15 	stw	r4,108(sp)
 2007a68:	00c001c4 	movi	r3,7
 2007a6c:	1902650e 	bge	r3,r4,2008404 <___vfiprintf_internal_r+0xeb4>
 2007a70:	10029a1e 	bne	r2,zero,20084dc <___vfiprintf_internal_r+0xf8c>
 2007a74:	00c02004 	movi	r3,128
 2007a78:	01000044 	movi	r4,1
 2007a7c:	000b883a 	mov	r5,zero
 2007a80:	d811883a 	mov	r8,sp
 2007a84:	e0c1b31e 	bne	fp,r3,2008154 <___vfiprintf_internal_r+0xc04>
 2007a88:	8cb9c83a 	sub	fp,r17,r18
 2007a8c:	0701b10e 	bge	zero,fp,2008154 <___vfiprintf_internal_r+0xc04>
 2007a90:	01c00404 	movi	r7,16
 2007a94:	3f03890e 	bge	r7,fp,20088bc <___vfiprintf_internal_r+0x136c>
 2007a98:	00c08134 	movhi	r3,516
 2007a9c:	18c3da04 	addi	r3,r3,3944
 2007aa0:	d8c02415 	stw	r3,144(sp)
 2007aa4:	8007883a 	mov	r3,r16
 2007aa8:	034001c4 	movi	r13,7
 2007aac:	e021883a 	mov	r16,fp
 2007ab0:	da402515 	stw	r9,148(sp)
 2007ab4:	1839883a 	mov	fp,r3
 2007ab8:	00000506 	br	2007ad0 <___vfiprintf_internal_r+0x580>
 2007abc:	29800084 	addi	r6,r5,2
 2007ac0:	42000204 	addi	r8,r8,8
 2007ac4:	180b883a 	mov	r5,r3
 2007ac8:	843ffc04 	addi	r16,r16,-16
 2007acc:	3c000d0e 	bge	r7,r16,2007b04 <___vfiprintf_internal_r+0x5b4>
 2007ad0:	10800404 	addi	r2,r2,16
 2007ad4:	28c00044 	addi	r3,r5,1
 2007ad8:	45c00015 	stw	r23,0(r8)
 2007adc:	41c00115 	stw	r7,4(r8)
 2007ae0:	d8801c15 	stw	r2,112(sp)
 2007ae4:	d8c01b15 	stw	r3,108(sp)
 2007ae8:	68fff40e 	bge	r13,r3,2007abc <__alt_mem_mem_0+0xfcfe7abc>
 2007aec:	1002241e 	bne	r2,zero,2008380 <___vfiprintf_internal_r+0xe30>
 2007af0:	843ffc04 	addi	r16,r16,-16
 2007af4:	01800044 	movi	r6,1
 2007af8:	000b883a 	mov	r5,zero
 2007afc:	d811883a 	mov	r8,sp
 2007b00:	3c3ff316 	blt	r7,r16,2007ad0 <__alt_mem_mem_0+0xfcfe7ad0>
 2007b04:	da402517 	ldw	r9,148(sp)
 2007b08:	e007883a 	mov	r3,fp
 2007b0c:	8039883a 	mov	fp,r16
 2007b10:	1821883a 	mov	r16,r3
 2007b14:	d8c02417 	ldw	r3,144(sp)
 2007b18:	1705883a 	add	r2,r2,fp
 2007b1c:	47000115 	stw	fp,4(r8)
 2007b20:	40c00015 	stw	r3,0(r8)
 2007b24:	d8801c15 	stw	r2,112(sp)
 2007b28:	d9801b15 	stw	r6,108(sp)
 2007b2c:	00c001c4 	movi	r3,7
 2007b30:	19827616 	blt	r3,r6,200850c <___vfiprintf_internal_r+0xfbc>
 2007b34:	4cf9c83a 	sub	fp,r9,r19
 2007b38:	42000204 	addi	r8,r8,8
 2007b3c:	31000044 	addi	r4,r6,1
 2007b40:	300b883a 	mov	r5,r6
 2007b44:	07018516 	blt	zero,fp,200815c <___vfiprintf_internal_r+0xc0c>
 2007b48:	9885883a 	add	r2,r19,r2
 2007b4c:	45400015 	stw	r21,0(r8)
 2007b50:	44c00115 	stw	r19,4(r8)
 2007b54:	d8801c15 	stw	r2,112(sp)
 2007b58:	d9001b15 	stw	r4,108(sp)
 2007b5c:	00c001c4 	movi	r3,7
 2007b60:	1901dd0e 	bge	r3,r4,20082d8 <___vfiprintf_internal_r+0xd88>
 2007b64:	1002401e 	bne	r2,zero,2008468 <___vfiprintf_internal_r+0xf18>
 2007b68:	d8001b15 	stw	zero,108(sp)
 2007b6c:	a2c0010c 	andi	r11,r20,4
 2007b70:	58000226 	beq	r11,zero,2007b7c <___vfiprintf_internal_r+0x62c>
 2007b74:	8ca7c83a 	sub	r19,r17,r18
 2007b78:	04c2f216 	blt	zero,r19,2008744 <___vfiprintf_internal_r+0x11f4>
 2007b7c:	8c80010e 	bge	r17,r18,2007b84 <___vfiprintf_internal_r+0x634>
 2007b80:	9023883a 	mov	r17,r18
 2007b84:	da802317 	ldw	r10,140(sp)
 2007b88:	5455883a 	add	r10,r10,r17
 2007b8c:	da802315 	stw	r10,140(sp)
 2007b90:	d8001b15 	stw	zero,108(sp)
 2007b94:	d811883a 	mov	r8,sp
 2007b98:	003ea206 	br	2007624 <__alt_mem_mem_0+0xfcfe7624>
 2007b9c:	a5000814 	ori	r20,r20,32
 2007ba0:	80c00007 	ldb	r3,0(r16)
 2007ba4:	003ec906 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 2007ba8:	80c00007 	ldb	r3,0(r16)
 2007bac:	1b030926 	beq	r3,r12,20087d4 <___vfiprintf_internal_r+0x1284>
 2007bb0:	a5000414 	ori	r20,r20,16
 2007bb4:	003ec506 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 2007bb8:	21003fcc 	andi	r4,r4,255
 2007bbc:	20035e1e 	bne	r4,zero,2008938 <___vfiprintf_internal_r+0x13e8>
 2007bc0:	a080080c 	andi	r2,r20,32
 2007bc4:	1002a526 	beq	r2,zero,200865c <___vfiprintf_internal_r+0x110c>
 2007bc8:	da802217 	ldw	r10,136(sp)
 2007bcc:	50800017 	ldw	r2,0(r10)
 2007bd0:	da802317 	ldw	r10,140(sp)
 2007bd4:	5007d7fa 	srai	r3,r10,31
 2007bd8:	da802217 	ldw	r10,136(sp)
 2007bdc:	10c00115 	stw	r3,4(r2)
 2007be0:	52800104 	addi	r10,r10,4
 2007be4:	da802215 	stw	r10,136(sp)
 2007be8:	da802317 	ldw	r10,140(sp)
 2007bec:	12800015 	stw	r10,0(r2)
 2007bf0:	003e8c06 	br	2007624 <__alt_mem_mem_0+0xfcfe7624>
 2007bf4:	21003fcc 	andi	r4,r4,255
 2007bf8:	2003511e 	bne	r4,zero,2008940 <___vfiprintf_internal_r+0x13f0>
 2007bfc:	a080080c 	andi	r2,r20,32
 2007c00:	1000a126 	beq	r2,zero,2007e88 <___vfiprintf_internal_r+0x938>
 2007c04:	da802217 	ldw	r10,136(sp)
 2007c08:	d8001d85 	stb	zero,118(sp)
 2007c0c:	50800204 	addi	r2,r10,8
 2007c10:	54800017 	ldw	r18,0(r10)
 2007c14:	54c00117 	ldw	r19,4(r10)
 2007c18:	4802b416 	blt	r9,zero,20086ec <___vfiprintf_internal_r+0x119c>
 2007c1c:	013fdfc4 	movi	r4,-129
 2007c20:	94c6b03a 	or	r3,r18,r19
 2007c24:	d8802215 	stw	r2,136(sp)
 2007c28:	a128703a 	and	r20,r20,r4
 2007c2c:	1800a226 	beq	r3,zero,2007eb8 <___vfiprintf_internal_r+0x968>
 2007c30:	0039883a 	mov	fp,zero
 2007c34:	dd401a04 	addi	r21,sp,104
 2007c38:	9006d0fa 	srli	r3,r18,3
 2007c3c:	9808977a 	slli	r4,r19,29
 2007c40:	9826d0fa 	srli	r19,r19,3
 2007c44:	948001cc 	andi	r18,r18,7
 2007c48:	90800c04 	addi	r2,r18,48
 2007c4c:	ad7fffc4 	addi	r21,r21,-1
 2007c50:	20e4b03a 	or	r18,r4,r3
 2007c54:	a8800005 	stb	r2,0(r21)
 2007c58:	94c6b03a 	or	r3,r18,r19
 2007c5c:	183ff61e 	bne	r3,zero,2007c38 <__alt_mem_mem_0+0xfcfe7c38>
 2007c60:	a0c0004c 	andi	r3,r20,1
 2007c64:	18005926 	beq	r3,zero,2007dcc <___vfiprintf_internal_r+0x87c>
 2007c68:	10803fcc 	andi	r2,r2,255
 2007c6c:	1080201c 	xori	r2,r2,128
 2007c70:	10bfe004 	addi	r2,r2,-128
 2007c74:	00c00c04 	movi	r3,48
 2007c78:	10c05426 	beq	r2,r3,2007dcc <___vfiprintf_internal_r+0x87c>
 2007c7c:	da801e17 	ldw	r10,120(sp)
 2007c80:	a8bfffc4 	addi	r2,r21,-1
 2007c84:	a8ffffc5 	stb	r3,-1(r21)
 2007c88:	50a7c83a 	sub	r19,r10,r2
 2007c8c:	102b883a 	mov	r21,r2
 2007c90:	003f2f06 	br	2007950 <__alt_mem_mem_0+0xfcfe7950>
 2007c94:	21003fcc 	andi	r4,r4,255
 2007c98:	2003421e 	bne	r4,zero,20089a4 <___vfiprintf_internal_r+0x1454>
 2007c9c:	00808134 	movhi	r2,516
 2007ca0:	10837904 	addi	r2,r2,3556
 2007ca4:	d8802615 	stw	r2,152(sp)
 2007ca8:	a080080c 	andi	r2,r20,32
 2007cac:	1000aa26 	beq	r2,zero,2007f58 <___vfiprintf_internal_r+0xa08>
 2007cb0:	da802217 	ldw	r10,136(sp)
 2007cb4:	54800017 	ldw	r18,0(r10)
 2007cb8:	54c00117 	ldw	r19,4(r10)
 2007cbc:	52800204 	addi	r10,r10,8
 2007cc0:	da802215 	stw	r10,136(sp)
 2007cc4:	a080004c 	andi	r2,r20,1
 2007cc8:	1001d226 	beq	r2,zero,2008414 <___vfiprintf_internal_r+0xec4>
 2007ccc:	94c4b03a 	or	r2,r18,r19
 2007cd0:	1002351e 	bne	r2,zero,20085a8 <___vfiprintf_internal_r+0x1058>
 2007cd4:	d8001d85 	stb	zero,118(sp)
 2007cd8:	48022216 	blt	r9,zero,2008564 <___vfiprintf_internal_r+0x1014>
 2007cdc:	00bfdfc4 	movi	r2,-129
 2007ce0:	a0a8703a 	and	r20,r20,r2
 2007ce4:	003f1506 	br	200793c <__alt_mem_mem_0+0xfcfe793c>
 2007ce8:	da802217 	ldw	r10,136(sp)
 2007cec:	04800044 	movi	r18,1
 2007cf0:	d8001d85 	stb	zero,118(sp)
 2007cf4:	50800017 	ldw	r2,0(r10)
 2007cf8:	52800104 	addi	r10,r10,4
 2007cfc:	da802215 	stw	r10,136(sp)
 2007d00:	d8801005 	stb	r2,64(sp)
 2007d04:	9027883a 	mov	r19,r18
 2007d08:	dd401004 	addi	r21,sp,64
 2007d0c:	0013883a 	mov	r9,zero
 2007d10:	003f1706 	br	2007970 <__alt_mem_mem_0+0xfcfe7970>
 2007d14:	21003fcc 	andi	r4,r4,255
 2007d18:	2003201e 	bne	r4,zero,200899c <___vfiprintf_internal_r+0x144c>
 2007d1c:	a080080c 	andi	r2,r20,32
 2007d20:	10004b26 	beq	r2,zero,2007e50 <___vfiprintf_internal_r+0x900>
 2007d24:	da802217 	ldw	r10,136(sp)
 2007d28:	50800117 	ldw	r2,4(r10)
 2007d2c:	54800017 	ldw	r18,0(r10)
 2007d30:	52800204 	addi	r10,r10,8
 2007d34:	da802215 	stw	r10,136(sp)
 2007d38:	1027883a 	mov	r19,r2
 2007d3c:	10022c16 	blt	r2,zero,20085f0 <___vfiprintf_internal_r+0x10a0>
 2007d40:	df001d83 	ldbu	fp,118(sp)
 2007d44:	48007216 	blt	r9,zero,2007f10 <___vfiprintf_internal_r+0x9c0>
 2007d48:	00ffdfc4 	movi	r3,-129
 2007d4c:	94c4b03a 	or	r2,r18,r19
 2007d50:	a0e8703a 	and	r20,r20,r3
 2007d54:	1000cc26 	beq	r2,zero,2008088 <___vfiprintf_internal_r+0xb38>
 2007d58:	98021026 	beq	r19,zero,200859c <___vfiprintf_internal_r+0x104c>
 2007d5c:	dc402415 	stw	r17,144(sp)
 2007d60:	dc002515 	stw	r16,148(sp)
 2007d64:	9823883a 	mov	r17,r19
 2007d68:	9021883a 	mov	r16,r18
 2007d6c:	dd401a04 	addi	r21,sp,104
 2007d70:	4825883a 	mov	r18,r9
 2007d74:	4027883a 	mov	r19,r8
 2007d78:	8009883a 	mov	r4,r16
 2007d7c:	880b883a 	mov	r5,r17
 2007d80:	01800284 	movi	r6,10
 2007d84:	000f883a 	mov	r7,zero
 2007d88:	200a4ac0 	call	200a4ac <__umoddi3>
 2007d8c:	10800c04 	addi	r2,r2,48
 2007d90:	ad7fffc4 	addi	r21,r21,-1
 2007d94:	8009883a 	mov	r4,r16
 2007d98:	880b883a 	mov	r5,r17
 2007d9c:	a8800005 	stb	r2,0(r21)
 2007da0:	01800284 	movi	r6,10
 2007da4:	000f883a 	mov	r7,zero
 2007da8:	2009f340 	call	2009f34 <__udivdi3>
 2007dac:	1021883a 	mov	r16,r2
 2007db0:	10c4b03a 	or	r2,r2,r3
 2007db4:	1823883a 	mov	r17,r3
 2007db8:	103fef1e 	bne	r2,zero,2007d78 <__alt_mem_mem_0+0xfcfe7d78>
 2007dbc:	dc402417 	ldw	r17,144(sp)
 2007dc0:	dc002517 	ldw	r16,148(sp)
 2007dc4:	9013883a 	mov	r9,r18
 2007dc8:	9811883a 	mov	r8,r19
 2007dcc:	da801e17 	ldw	r10,120(sp)
 2007dd0:	5567c83a 	sub	r19,r10,r21
 2007dd4:	003ede06 	br	2007950 <__alt_mem_mem_0+0xfcfe7950>
 2007dd8:	38803fcc 	andi	r2,r7,255
 2007ddc:	1080201c 	xori	r2,r2,128
 2007de0:	10bfe004 	addi	r2,r2,-128
 2007de4:	1002371e 	bne	r2,zero,20086c4 <___vfiprintf_internal_r+0x1174>
 2007de8:	01000044 	movi	r4,1
 2007dec:	01c00804 	movi	r7,32
 2007df0:	80c00007 	ldb	r3,0(r16)
 2007df4:	003e3506 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 2007df8:	a5000054 	ori	r20,r20,1
 2007dfc:	80c00007 	ldb	r3,0(r16)
 2007e00:	003e3206 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 2007e04:	a5002014 	ori	r20,r20,128
 2007e08:	80c00007 	ldb	r3,0(r16)
 2007e0c:	003e2f06 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 2007e10:	8015883a 	mov	r10,r16
 2007e14:	0023883a 	mov	r17,zero
 2007e18:	18bff404 	addi	r2,r3,-48
 2007e1c:	50c00007 	ldb	r3,0(r10)
 2007e20:	8c4002a4 	muli	r17,r17,10
 2007e24:	84000044 	addi	r16,r16,1
 2007e28:	8015883a 	mov	r10,r16
 2007e2c:	1463883a 	add	r17,r2,r17
 2007e30:	18bff404 	addi	r2,r3,-48
 2007e34:	30bff92e 	bgeu	r6,r2,2007e1c <__alt_mem_mem_0+0xfcfe7e1c>
 2007e38:	003e2506 	br	20076d0 <__alt_mem_mem_0+0xfcfe76d0>
 2007e3c:	21003fcc 	andi	r4,r4,255
 2007e40:	2002d41e 	bne	r4,zero,2008994 <___vfiprintf_internal_r+0x1444>
 2007e44:	a5000414 	ori	r20,r20,16
 2007e48:	a080080c 	andi	r2,r20,32
 2007e4c:	103fb51e 	bne	r2,zero,2007d24 <__alt_mem_mem_0+0xfcfe7d24>
 2007e50:	a080040c 	andi	r2,r20,16
 2007e54:	1001f826 	beq	r2,zero,2008638 <___vfiprintf_internal_r+0x10e8>
 2007e58:	da802217 	ldw	r10,136(sp)
 2007e5c:	54800017 	ldw	r18,0(r10)
 2007e60:	52800104 	addi	r10,r10,4
 2007e64:	da802215 	stw	r10,136(sp)
 2007e68:	9027d7fa 	srai	r19,r18,31
 2007e6c:	9805883a 	mov	r2,r19
 2007e70:	003fb206 	br	2007d3c <__alt_mem_mem_0+0xfcfe7d3c>
 2007e74:	21003fcc 	andi	r4,r4,255
 2007e78:	2002c41e 	bne	r4,zero,200898c <___vfiprintf_internal_r+0x143c>
 2007e7c:	a5000414 	ori	r20,r20,16
 2007e80:	a080080c 	andi	r2,r20,32
 2007e84:	103f5f1e 	bne	r2,zero,2007c04 <__alt_mem_mem_0+0xfcfe7c04>
 2007e88:	a080040c 	andi	r2,r20,16
 2007e8c:	10020f26 	beq	r2,zero,20086cc <___vfiprintf_internal_r+0x117c>
 2007e90:	da802217 	ldw	r10,136(sp)
 2007e94:	d8001d85 	stb	zero,118(sp)
 2007e98:	0027883a 	mov	r19,zero
 2007e9c:	50800104 	addi	r2,r10,4
 2007ea0:	54800017 	ldw	r18,0(r10)
 2007ea4:	48021116 	blt	r9,zero,20086ec <___vfiprintf_internal_r+0x119c>
 2007ea8:	00ffdfc4 	movi	r3,-129
 2007eac:	d8802215 	stw	r2,136(sp)
 2007eb0:	a0e8703a 	and	r20,r20,r3
 2007eb4:	903f5e1e 	bne	r18,zero,2007c30 <__alt_mem_mem_0+0xfcfe7c30>
 2007eb8:	0039883a 	mov	fp,zero
 2007ebc:	4802a626 	beq	r9,zero,2008958 <___vfiprintf_internal_r+0x1408>
 2007ec0:	0025883a 	mov	r18,zero
 2007ec4:	0027883a 	mov	r19,zero
 2007ec8:	003f5a06 	br	2007c34 <__alt_mem_mem_0+0xfcfe7c34>
 2007ecc:	21003fcc 	andi	r4,r4,255
 2007ed0:	20029f1e 	bne	r4,zero,2008950 <___vfiprintf_internal_r+0x1400>
 2007ed4:	a5000414 	ori	r20,r20,16
 2007ed8:	a080080c 	andi	r2,r20,32
 2007edc:	10005e1e 	bne	r2,zero,2008058 <___vfiprintf_internal_r+0xb08>
 2007ee0:	a080040c 	andi	r2,r20,16
 2007ee4:	1001a21e 	bne	r2,zero,2008570 <___vfiprintf_internal_r+0x1020>
 2007ee8:	a080100c 	andi	r2,r20,64
 2007eec:	d8001d85 	stb	zero,118(sp)
 2007ef0:	da802217 	ldw	r10,136(sp)
 2007ef4:	1002231e 	bne	r2,zero,2008784 <___vfiprintf_internal_r+0x1234>
 2007ef8:	50800104 	addi	r2,r10,4
 2007efc:	54800017 	ldw	r18,0(r10)
 2007f00:	0027883a 	mov	r19,zero
 2007f04:	4801a00e 	bge	r9,zero,2008588 <___vfiprintf_internal_r+0x1038>
 2007f08:	d8802215 	stw	r2,136(sp)
 2007f0c:	0039883a 	mov	fp,zero
 2007f10:	94c4b03a 	or	r2,r18,r19
 2007f14:	103f901e 	bne	r2,zero,2007d58 <__alt_mem_mem_0+0xfcfe7d58>
 2007f18:	00800044 	movi	r2,1
 2007f1c:	10803fcc 	andi	r2,r2,255
 2007f20:	00c00044 	movi	r3,1
 2007f24:	10c05926 	beq	r2,r3,200808c <___vfiprintf_internal_r+0xb3c>
 2007f28:	00c00084 	movi	r3,2
 2007f2c:	10ffe41e 	bne	r2,r3,2007ec0 <__alt_mem_mem_0+0xfcfe7ec0>
 2007f30:	0025883a 	mov	r18,zero
 2007f34:	0027883a 	mov	r19,zero
 2007f38:	00013d06 	br	2008430 <___vfiprintf_internal_r+0xee0>
 2007f3c:	21003fcc 	andi	r4,r4,255
 2007f40:	2002811e 	bne	r4,zero,2008948 <___vfiprintf_internal_r+0x13f8>
 2007f44:	00808134 	movhi	r2,516
 2007f48:	10837404 	addi	r2,r2,3536
 2007f4c:	d8802615 	stw	r2,152(sp)
 2007f50:	a080080c 	andi	r2,r20,32
 2007f54:	103f561e 	bne	r2,zero,2007cb0 <__alt_mem_mem_0+0xfcfe7cb0>
 2007f58:	a080040c 	andi	r2,r20,16
 2007f5c:	1001d126 	beq	r2,zero,20086a4 <___vfiprintf_internal_r+0x1154>
 2007f60:	da802217 	ldw	r10,136(sp)
 2007f64:	0027883a 	mov	r19,zero
 2007f68:	54800017 	ldw	r18,0(r10)
 2007f6c:	52800104 	addi	r10,r10,4
 2007f70:	da802215 	stw	r10,136(sp)
 2007f74:	003f5306 	br	2007cc4 <__alt_mem_mem_0+0xfcfe7cc4>
 2007f78:	da802217 	ldw	r10,136(sp)
 2007f7c:	d8001d85 	stb	zero,118(sp)
 2007f80:	55400017 	ldw	r21,0(r10)
 2007f84:	50c00104 	addi	r3,r10,4
 2007f88:	a8024226 	beq	r21,zero,2008894 <___vfiprintf_internal_r+0x1344>
 2007f8c:	48021816 	blt	r9,zero,20087f0 <___vfiprintf_internal_r+0x12a0>
 2007f90:	480d883a 	mov	r6,r9
 2007f94:	000b883a 	mov	r5,zero
 2007f98:	a809883a 	mov	r4,r21
 2007f9c:	d8c02a15 	stw	r3,168(sp)
 2007fa0:	da002b15 	stw	r8,172(sp)
 2007fa4:	da402c15 	stw	r9,176(sp)
 2007fa8:	2005d740 	call	2005d74 <memchr>
 2007fac:	d8c02a17 	ldw	r3,168(sp)
 2007fb0:	da002b17 	ldw	r8,172(sp)
 2007fb4:	da402c17 	ldw	r9,176(sp)
 2007fb8:	10024826 	beq	r2,zero,20088dc <___vfiprintf_internal_r+0x138c>
 2007fbc:	1567c83a 	sub	r19,r2,r21
 2007fc0:	df001d83 	ldbu	fp,118(sp)
 2007fc4:	d8c02215 	stw	r3,136(sp)
 2007fc8:	0013883a 	mov	r9,zero
 2007fcc:	003e6006 	br	2007950 <__alt_mem_mem_0+0xfcfe7950>
 2007fd0:	21003fcc 	andi	r4,r4,255
 2007fd4:	203fc026 	beq	r4,zero,2007ed8 <__alt_mem_mem_0+0xfcfe7ed8>
 2007fd8:	d9c01d85 	stb	r7,118(sp)
 2007fdc:	003fbe06 	br	2007ed8 <__alt_mem_mem_0+0xfcfe7ed8>
 2007fe0:	da802217 	ldw	r10,136(sp)
 2007fe4:	54400017 	ldw	r17,0(r10)
 2007fe8:	50800104 	addi	r2,r10,4
 2007fec:	883e3b16 	blt	r17,zero,20078dc <__alt_mem_mem_0+0xfcfe78dc>
 2007ff0:	d8802215 	stw	r2,136(sp)
 2007ff4:	80c00007 	ldb	r3,0(r16)
 2007ff8:	003db406 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 2007ffc:	01000044 	movi	r4,1
 2008000:	01c00ac4 	movi	r7,43
 2008004:	80c00007 	ldb	r3,0(r16)
 2008008:	003db006 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 200800c:	80c00007 	ldb	r3,0(r16)
 2008010:	82800044 	addi	r10,r16,1
 2008014:	1b423c26 	beq	r3,r13,2008908 <___vfiprintf_internal_r+0x13b8>
 2008018:	18bff404 	addi	r2,r3,-48
 200801c:	0013883a 	mov	r9,zero
 2008020:	30822b36 	bltu	r6,r2,20088d0 <___vfiprintf_internal_r+0x1380>
 2008024:	50c00007 	ldb	r3,0(r10)
 2008028:	4a4002a4 	muli	r9,r9,10
 200802c:	54000044 	addi	r16,r10,1
 2008030:	8015883a 	mov	r10,r16
 2008034:	4893883a 	add	r9,r9,r2
 2008038:	18bff404 	addi	r2,r3,-48
 200803c:	30bff92e 	bgeu	r6,r2,2008024 <__alt_mem_mem_0+0xfcfe8024>
 2008040:	483da30e 	bge	r9,zero,20076d0 <__alt_mem_mem_0+0xfcfe76d0>
 2008044:	027fffc4 	movi	r9,-1
 2008048:	003da106 	br	20076d0 <__alt_mem_mem_0+0xfcfe76d0>
 200804c:	a5001014 	ori	r20,r20,64
 2008050:	80c00007 	ldb	r3,0(r16)
 2008054:	003d9d06 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 2008058:	da802217 	ldw	r10,136(sp)
 200805c:	d8001d85 	stb	zero,118(sp)
 2008060:	50c00204 	addi	r3,r10,8
 2008064:	54800017 	ldw	r18,0(r10)
 2008068:	54c00117 	ldw	r19,4(r10)
 200806c:	4801ca16 	blt	r9,zero,2008798 <___vfiprintf_internal_r+0x1248>
 2008070:	013fdfc4 	movi	r4,-129
 2008074:	94c4b03a 	or	r2,r18,r19
 2008078:	d8c02215 	stw	r3,136(sp)
 200807c:	a128703a 	and	r20,r20,r4
 2008080:	0039883a 	mov	fp,zero
 2008084:	103f341e 	bne	r2,zero,2007d58 <__alt_mem_mem_0+0xfcfe7d58>
 2008088:	483e2e26 	beq	r9,zero,2007944 <__alt_mem_mem_0+0xfcfe7944>
 200808c:	0025883a 	mov	r18,zero
 2008090:	94800c04 	addi	r18,r18,48
 2008094:	dc8019c5 	stb	r18,103(sp)
 2008098:	dcc02717 	ldw	r19,156(sp)
 200809c:	dd4019c4 	addi	r21,sp,103
 20080a0:	003e2b06 	br	2007950 <__alt_mem_mem_0+0xfcfe7950>
 20080a4:	21003fcc 	andi	r4,r4,255
 20080a8:	2002361e 	bne	r4,zero,2008984 <___vfiprintf_internal_r+0x1434>
 20080ac:	1801c126 	beq	r3,zero,20087b4 <___vfiprintf_internal_r+0x1264>
 20080b0:	04800044 	movi	r18,1
 20080b4:	d8c01005 	stb	r3,64(sp)
 20080b8:	d8001d85 	stb	zero,118(sp)
 20080bc:	9027883a 	mov	r19,r18
 20080c0:	dd401004 	addi	r21,sp,64
 20080c4:	003f1106 	br	2007d0c <__alt_mem_mem_0+0xfcfe7d0c>
 20080c8:	d9402117 	ldw	r5,132(sp)
 20080cc:	d9002017 	ldw	r4,128(sp)
 20080d0:	d9801a04 	addi	r6,sp,104
 20080d4:	d9c02b15 	stw	r7,172(sp)
 20080d8:	dbc02a15 	stw	r15,168(sp)
 20080dc:	200743c0 	call	200743c <__sprint_r.part.0>
 20080e0:	d9c02b17 	ldw	r7,172(sp)
 20080e4:	dbc02a17 	ldw	r15,168(sp)
 20080e8:	10006d1e 	bne	r2,zero,20082a0 <___vfiprintf_internal_r+0xd50>
 20080ec:	d9801b17 	ldw	r6,108(sp)
 20080f0:	d8801c17 	ldw	r2,112(sp)
 20080f4:	d811883a 	mov	r8,sp
 20080f8:	31400044 	addi	r5,r6,1
 20080fc:	003e3306 	br	20079cc <__alt_mem_mem_0+0xfcfe79cc>
 2008100:	d9401b17 	ldw	r5,108(sp)
 2008104:	d8801c17 	ldw	r2,112(sp)
 2008108:	29000044 	addi	r4,r5,1
 200810c:	d8c01d87 	ldb	r3,118(sp)
 2008110:	183e4d26 	beq	r3,zero,2007a48 <__alt_mem_mem_0+0xfcfe7a48>
 2008114:	00c00044 	movi	r3,1
 2008118:	d9401d84 	addi	r5,sp,118
 200811c:	10c5883a 	add	r2,r2,r3
 2008120:	41400015 	stw	r5,0(r8)
 2008124:	40c00115 	stw	r3,4(r8)
 2008128:	d8801c15 	stw	r2,112(sp)
 200812c:	d9001b15 	stw	r4,108(sp)
 2008130:	014001c4 	movi	r5,7
 2008134:	2900a90e 	bge	r5,r4,20083dc <___vfiprintf_internal_r+0xe8c>
 2008138:	1000da1e 	bne	r2,zero,20084a4 <___vfiprintf_internal_r+0xf54>
 200813c:	7000ab1e 	bne	r14,zero,20083ec <___vfiprintf_internal_r+0xe9c>
 2008140:	000b883a 	mov	r5,zero
 2008144:	1809883a 	mov	r4,r3
 2008148:	d811883a 	mov	r8,sp
 200814c:	00c02004 	movi	r3,128
 2008150:	e0fe4d26 	beq	fp,r3,2007a88 <__alt_mem_mem_0+0xfcfe7a88>
 2008154:	4cf9c83a 	sub	fp,r9,r19
 2008158:	073e7b0e 	bge	zero,fp,2007b48 <__alt_mem_mem_0+0xfcfe7b48>
 200815c:	01c00404 	movi	r7,16
 2008160:	3f01900e 	bge	r7,fp,20087a4 <___vfiprintf_internal_r+0x1254>
 2008164:	00c08134 	movhi	r3,516
 2008168:	18c3da04 	addi	r3,r3,3944
 200816c:	d8c02415 	stw	r3,144(sp)
 2008170:	034001c4 	movi	r13,7
 2008174:	00000506 	br	200818c <___vfiprintf_internal_r+0xc3c>
 2008178:	29000084 	addi	r4,r5,2
 200817c:	42000204 	addi	r8,r8,8
 2008180:	180b883a 	mov	r5,r3
 2008184:	e73ffc04 	addi	fp,fp,-16
 2008188:	3f000d0e 	bge	r7,fp,20081c0 <___vfiprintf_internal_r+0xc70>
 200818c:	10800404 	addi	r2,r2,16
 2008190:	28c00044 	addi	r3,r5,1
 2008194:	45c00015 	stw	r23,0(r8)
 2008198:	41c00115 	stw	r7,4(r8)
 200819c:	d8801c15 	stw	r2,112(sp)
 20081a0:	d8c01b15 	stw	r3,108(sp)
 20081a4:	68fff40e 	bge	r13,r3,2008178 <__alt_mem_mem_0+0xfcfe8178>
 20081a8:	1000101e 	bne	r2,zero,20081ec <___vfiprintf_internal_r+0xc9c>
 20081ac:	e73ffc04 	addi	fp,fp,-16
 20081b0:	01000044 	movi	r4,1
 20081b4:	000b883a 	mov	r5,zero
 20081b8:	d811883a 	mov	r8,sp
 20081bc:	3f3ff316 	blt	r7,fp,200818c <__alt_mem_mem_0+0xfcfe818c>
 20081c0:	da802417 	ldw	r10,144(sp)
 20081c4:	1705883a 	add	r2,r2,fp
 20081c8:	47000115 	stw	fp,4(r8)
 20081cc:	42800015 	stw	r10,0(r8)
 20081d0:	d8801c15 	stw	r2,112(sp)
 20081d4:	d9001b15 	stw	r4,108(sp)
 20081d8:	00c001c4 	movi	r3,7
 20081dc:	19003616 	blt	r3,r4,20082b8 <___vfiprintf_internal_r+0xd68>
 20081e0:	42000204 	addi	r8,r8,8
 20081e4:	21000044 	addi	r4,r4,1
 20081e8:	003e5706 	br	2007b48 <__alt_mem_mem_0+0xfcfe7b48>
 20081ec:	d9402117 	ldw	r5,132(sp)
 20081f0:	d9002017 	ldw	r4,128(sp)
 20081f4:	d9801a04 	addi	r6,sp,104
 20081f8:	d9c02b15 	stw	r7,172(sp)
 20081fc:	db402a15 	stw	r13,168(sp)
 2008200:	200743c0 	call	200743c <__sprint_r.part.0>
 2008204:	d9c02b17 	ldw	r7,172(sp)
 2008208:	db402a17 	ldw	r13,168(sp)
 200820c:	1000241e 	bne	r2,zero,20082a0 <___vfiprintf_internal_r+0xd50>
 2008210:	d9401b17 	ldw	r5,108(sp)
 2008214:	d8801c17 	ldw	r2,112(sp)
 2008218:	d811883a 	mov	r8,sp
 200821c:	29000044 	addi	r4,r5,1
 2008220:	003fd806 	br	2008184 <__alt_mem_mem_0+0xfcfe8184>
 2008224:	d9401b17 	ldw	r5,108(sp)
 2008228:	00c08134 	movhi	r3,516
 200822c:	18c3de04 	addi	r3,r3,3960
 2008230:	d8c02415 	stw	r3,144(sp)
 2008234:	29400044 	addi	r5,r5,1
 2008238:	d8c02417 	ldw	r3,144(sp)
 200823c:	14c5883a 	add	r2,r2,r19
 2008240:	44c00115 	stw	r19,4(r8)
 2008244:	40c00015 	stw	r3,0(r8)
 2008248:	d8801c15 	stw	r2,112(sp)
 200824c:	d9401b15 	stw	r5,108(sp)
 2008250:	00c001c4 	movi	r3,7
 2008254:	1940070e 	bge	r3,r5,2008274 <___vfiprintf_internal_r+0xd24>
 2008258:	103e4826 	beq	r2,zero,2007b7c <__alt_mem_mem_0+0xfcfe7b7c>
 200825c:	d9402117 	ldw	r5,132(sp)
 2008260:	d9002017 	ldw	r4,128(sp)
 2008264:	d9801a04 	addi	r6,sp,104
 2008268:	200743c0 	call	200743c <__sprint_r.part.0>
 200826c:	10000c1e 	bne	r2,zero,20082a0 <___vfiprintf_internal_r+0xd50>
 2008270:	d8801c17 	ldw	r2,112(sp)
 2008274:	8c80010e 	bge	r17,r18,200827c <___vfiprintf_internal_r+0xd2c>
 2008278:	9023883a 	mov	r17,r18
 200827c:	da802317 	ldw	r10,140(sp)
 2008280:	5455883a 	add	r10,r10,r17
 2008284:	da802315 	stw	r10,140(sp)
 2008288:	103e4126 	beq	r2,zero,2007b90 <__alt_mem_mem_0+0xfcfe7b90>
 200828c:	d9402117 	ldw	r5,132(sp)
 2008290:	d9002017 	ldw	r4,128(sp)
 2008294:	d9801a04 	addi	r6,sp,104
 2008298:	200743c0 	call	200743c <__sprint_r.part.0>
 200829c:	103e3c26 	beq	r2,zero,2007b90 <__alt_mem_mem_0+0xfcfe7b90>
 20082a0:	dd002117 	ldw	r20,132(sp)
 20082a4:	a080030b 	ldhu	r2,12(r20)
 20082a8:	1080100c 	andi	r2,r2,64
 20082ac:	1001231e 	bne	r2,zero,200873c <___vfiprintf_internal_r+0x11ec>
 20082b0:	d8802317 	ldw	r2,140(sp)
 20082b4:	003d7b06 	br	20078a4 <__alt_mem_mem_0+0xfcfe78a4>
 20082b8:	1000991e 	bne	r2,zero,2008520 <___vfiprintf_internal_r+0xfd0>
 20082bc:	00c00044 	movi	r3,1
 20082c0:	9805883a 	mov	r2,r19
 20082c4:	dd400015 	stw	r21,0(sp)
 20082c8:	dcc00115 	stw	r19,4(sp)
 20082cc:	dcc01c15 	stw	r19,112(sp)
 20082d0:	d8c01b15 	stw	r3,108(sp)
 20082d4:	d811883a 	mov	r8,sp
 20082d8:	42000204 	addi	r8,r8,8
 20082dc:	a2c0010c 	andi	r11,r20,4
 20082e0:	583fe426 	beq	r11,zero,2008274 <__alt_mem_mem_0+0xfcfe8274>
 20082e4:	8ca7c83a 	sub	r19,r17,r18
 20082e8:	04ffe20e 	bge	zero,r19,2008274 <__alt_mem_mem_0+0xfcfe8274>
 20082ec:	01c00404 	movi	r7,16
 20082f0:	3cffcc0e 	bge	r7,r19,2008224 <__alt_mem_mem_0+0xfcfe8224>
 20082f4:	02808134 	movhi	r10,516
 20082f8:	5283de04 	addi	r10,r10,3960
 20082fc:	d9001b17 	ldw	r4,108(sp)
 2008300:	da802415 	stw	r10,144(sp)
 2008304:	382b883a 	mov	r21,r7
 2008308:	050001c4 	movi	r20,7
 200830c:	df002017 	ldw	fp,128(sp)
 2008310:	00000506 	br	2008328 <___vfiprintf_internal_r+0xdd8>
 2008314:	21400084 	addi	r5,r4,2
 2008318:	42000204 	addi	r8,r8,8
 200831c:	1809883a 	mov	r4,r3
 2008320:	9cfffc04 	addi	r19,r19,-16
 2008324:	acffc40e 	bge	r21,r19,2008238 <__alt_mem_mem_0+0xfcfe8238>
 2008328:	10800404 	addi	r2,r2,16
 200832c:	20c00044 	addi	r3,r4,1
 2008330:	45800015 	stw	r22,0(r8)
 2008334:	45400115 	stw	r21,4(r8)
 2008338:	d8801c15 	stw	r2,112(sp)
 200833c:	d8c01b15 	stw	r3,108(sp)
 2008340:	a0fff40e 	bge	r20,r3,2008314 <__alt_mem_mem_0+0xfcfe8314>
 2008344:	1000041e 	bne	r2,zero,2008358 <___vfiprintf_internal_r+0xe08>
 2008348:	01400044 	movi	r5,1
 200834c:	0009883a 	mov	r4,zero
 2008350:	d811883a 	mov	r8,sp
 2008354:	003ff206 	br	2008320 <__alt_mem_mem_0+0xfcfe8320>
 2008358:	d9402117 	ldw	r5,132(sp)
 200835c:	d9801a04 	addi	r6,sp,104
 2008360:	e009883a 	mov	r4,fp
 2008364:	200743c0 	call	200743c <__sprint_r.part.0>
 2008368:	103fcd1e 	bne	r2,zero,20082a0 <__alt_mem_mem_0+0xfcfe82a0>
 200836c:	d9001b17 	ldw	r4,108(sp)
 2008370:	d8801c17 	ldw	r2,112(sp)
 2008374:	d811883a 	mov	r8,sp
 2008378:	21400044 	addi	r5,r4,1
 200837c:	003fe806 	br	2008320 <__alt_mem_mem_0+0xfcfe8320>
 2008380:	d9402117 	ldw	r5,132(sp)
 2008384:	d9002017 	ldw	r4,128(sp)
 2008388:	d9801a04 	addi	r6,sp,104
 200838c:	d9c02b15 	stw	r7,172(sp)
 2008390:	db402a15 	stw	r13,168(sp)
 2008394:	200743c0 	call	200743c <__sprint_r.part.0>
 2008398:	d9c02b17 	ldw	r7,172(sp)
 200839c:	db402a17 	ldw	r13,168(sp)
 20083a0:	103fbf1e 	bne	r2,zero,20082a0 <__alt_mem_mem_0+0xfcfe82a0>
 20083a4:	d9401b17 	ldw	r5,108(sp)
 20083a8:	d8801c17 	ldw	r2,112(sp)
 20083ac:	d811883a 	mov	r8,sp
 20083b0:	29800044 	addi	r6,r5,1
 20083b4:	003dc406 	br	2007ac8 <__alt_mem_mem_0+0xfcfe7ac8>
 20083b8:	1000d21e 	bne	r2,zero,2008704 <___vfiprintf_internal_r+0x11b4>
 20083bc:	d8c01d87 	ldb	r3,118(sp)
 20083c0:	18009526 	beq	r3,zero,2008618 <___vfiprintf_internal_r+0x10c8>
 20083c4:	00800044 	movi	r2,1
 20083c8:	d8c01d84 	addi	r3,sp,118
 20083cc:	1009883a 	mov	r4,r2
 20083d0:	d8c00015 	stw	r3,0(sp)
 20083d4:	d8800115 	stw	r2,4(sp)
 20083d8:	d811883a 	mov	r8,sp
 20083dc:	200b883a 	mov	r5,r4
 20083e0:	42000204 	addi	r8,r8,8
 20083e4:	21000044 	addi	r4,r4,1
 20083e8:	003d9706 	br	2007a48 <__alt_mem_mem_0+0xfcfe7a48>
 20083ec:	d9001d04 	addi	r4,sp,116
 20083f0:	00800084 	movi	r2,2
 20083f4:	d9000015 	stw	r4,0(sp)
 20083f8:	d8800115 	stw	r2,4(sp)
 20083fc:	1809883a 	mov	r4,r3
 2008400:	d811883a 	mov	r8,sp
 2008404:	200b883a 	mov	r5,r4
 2008408:	42000204 	addi	r8,r8,8
 200840c:	21000044 	addi	r4,r4,1
 2008410:	003f4e06 	br	200814c <__alt_mem_mem_0+0xfcfe814c>
 2008414:	d8001d85 	stb	zero,118(sp)
 2008418:	48005016 	blt	r9,zero,200855c <___vfiprintf_internal_r+0x100c>
 200841c:	00ffdfc4 	movi	r3,-129
 2008420:	94c4b03a 	or	r2,r18,r19
 2008424:	a0e8703a 	and	r20,r20,r3
 2008428:	103d4426 	beq	r2,zero,200793c <__alt_mem_mem_0+0xfcfe793c>
 200842c:	0039883a 	mov	fp,zero
 2008430:	d9002617 	ldw	r4,152(sp)
 2008434:	dd401a04 	addi	r21,sp,104
 2008438:	908003cc 	andi	r2,r18,15
 200843c:	9806973a 	slli	r3,r19,28
 2008440:	2085883a 	add	r2,r4,r2
 2008444:	9024d13a 	srli	r18,r18,4
 2008448:	10800003 	ldbu	r2,0(r2)
 200844c:	9826d13a 	srli	r19,r19,4
 2008450:	ad7fffc4 	addi	r21,r21,-1
 2008454:	1ca4b03a 	or	r18,r3,r18
 2008458:	a8800005 	stb	r2,0(r21)
 200845c:	94c4b03a 	or	r2,r18,r19
 2008460:	103ff51e 	bne	r2,zero,2008438 <__alt_mem_mem_0+0xfcfe8438>
 2008464:	003e5906 	br	2007dcc <__alt_mem_mem_0+0xfcfe7dcc>
 2008468:	d9402117 	ldw	r5,132(sp)
 200846c:	d9002017 	ldw	r4,128(sp)
 2008470:	d9801a04 	addi	r6,sp,104
 2008474:	200743c0 	call	200743c <__sprint_r.part.0>
 2008478:	103f891e 	bne	r2,zero,20082a0 <__alt_mem_mem_0+0xfcfe82a0>
 200847c:	d8801c17 	ldw	r2,112(sp)
 2008480:	d811883a 	mov	r8,sp
 2008484:	003f9506 	br	20082dc <__alt_mem_mem_0+0xfcfe82dc>
 2008488:	d9402117 	ldw	r5,132(sp)
 200848c:	d9002017 	ldw	r4,128(sp)
 2008490:	d9801a04 	addi	r6,sp,104
 2008494:	200743c0 	call	200743c <__sprint_r.part.0>
 2008498:	103f811e 	bne	r2,zero,20082a0 <__alt_mem_mem_0+0xfcfe82a0>
 200849c:	d811883a 	mov	r8,sp
 20084a0:	003ced06 	br	2007858 <__alt_mem_mem_0+0xfcfe7858>
 20084a4:	d9402117 	ldw	r5,132(sp)
 20084a8:	d9002017 	ldw	r4,128(sp)
 20084ac:	d9801a04 	addi	r6,sp,104
 20084b0:	da402c15 	stw	r9,176(sp)
 20084b4:	db802a15 	stw	r14,168(sp)
 20084b8:	200743c0 	call	200743c <__sprint_r.part.0>
 20084bc:	da402c17 	ldw	r9,176(sp)
 20084c0:	db802a17 	ldw	r14,168(sp)
 20084c4:	103f761e 	bne	r2,zero,20082a0 <__alt_mem_mem_0+0xfcfe82a0>
 20084c8:	d9401b17 	ldw	r5,108(sp)
 20084cc:	d8801c17 	ldw	r2,112(sp)
 20084d0:	d811883a 	mov	r8,sp
 20084d4:	29000044 	addi	r4,r5,1
 20084d8:	003d5b06 	br	2007a48 <__alt_mem_mem_0+0xfcfe7a48>
 20084dc:	d9402117 	ldw	r5,132(sp)
 20084e0:	d9002017 	ldw	r4,128(sp)
 20084e4:	d9801a04 	addi	r6,sp,104
 20084e8:	da402c15 	stw	r9,176(sp)
 20084ec:	200743c0 	call	200743c <__sprint_r.part.0>
 20084f0:	da402c17 	ldw	r9,176(sp)
 20084f4:	103f6a1e 	bne	r2,zero,20082a0 <__alt_mem_mem_0+0xfcfe82a0>
 20084f8:	d9401b17 	ldw	r5,108(sp)
 20084fc:	d8801c17 	ldw	r2,112(sp)
 2008500:	d811883a 	mov	r8,sp
 2008504:	29000044 	addi	r4,r5,1
 2008508:	003f1006 	br	200814c <__alt_mem_mem_0+0xfcfe814c>
 200850c:	1000c31e 	bne	r2,zero,200881c <___vfiprintf_internal_r+0x12cc>
 2008510:	01000044 	movi	r4,1
 2008514:	000b883a 	mov	r5,zero
 2008518:	d811883a 	mov	r8,sp
 200851c:	003f0d06 	br	2008154 <__alt_mem_mem_0+0xfcfe8154>
 2008520:	d9402117 	ldw	r5,132(sp)
 2008524:	d9002017 	ldw	r4,128(sp)
 2008528:	d9801a04 	addi	r6,sp,104
 200852c:	200743c0 	call	200743c <__sprint_r.part.0>
 2008530:	103f5b1e 	bne	r2,zero,20082a0 <__alt_mem_mem_0+0xfcfe82a0>
 2008534:	d9001b17 	ldw	r4,108(sp)
 2008538:	d8801c17 	ldw	r2,112(sp)
 200853c:	d811883a 	mov	r8,sp
 2008540:	21000044 	addi	r4,r4,1
 2008544:	003d8006 	br	2007b48 <__alt_mem_mem_0+0xfcfe7b48>
 2008548:	01008134 	movhi	r4,516
 200854c:	21037904 	addi	r4,r4,3556
 2008550:	d9002615 	stw	r4,152(sp)
 2008554:	d8c02215 	stw	r3,136(sp)
 2008558:	1029883a 	mov	r20,r2
 200855c:	94c4b03a 	or	r2,r18,r19
 2008560:	103fb21e 	bne	r2,zero,200842c <__alt_mem_mem_0+0xfcfe842c>
 2008564:	0039883a 	mov	fp,zero
 2008568:	00800084 	movi	r2,2
 200856c:	003e6b06 	br	2007f1c <__alt_mem_mem_0+0xfcfe7f1c>
 2008570:	da802217 	ldw	r10,136(sp)
 2008574:	d8001d85 	stb	zero,118(sp)
 2008578:	0027883a 	mov	r19,zero
 200857c:	50800104 	addi	r2,r10,4
 2008580:	54800017 	ldw	r18,0(r10)
 2008584:	483e6016 	blt	r9,zero,2007f08 <__alt_mem_mem_0+0xfcfe7f08>
 2008588:	00ffdfc4 	movi	r3,-129
 200858c:	d8802215 	stw	r2,136(sp)
 2008590:	a0e8703a 	and	r20,r20,r3
 2008594:	0039883a 	mov	fp,zero
 2008598:	903ebb26 	beq	r18,zero,2008088 <__alt_mem_mem_0+0xfcfe8088>
 200859c:	00800244 	movi	r2,9
 20085a0:	14bdee36 	bltu	r2,r18,2007d5c <__alt_mem_mem_0+0xfcfe7d5c>
 20085a4:	003eba06 	br	2008090 <__alt_mem_mem_0+0xfcfe8090>
 20085a8:	00800c04 	movi	r2,48
 20085ac:	d8c01d45 	stb	r3,117(sp)
 20085b0:	d8801d05 	stb	r2,116(sp)
 20085b4:	d8001d85 	stb	zero,118(sp)
 20085b8:	a0c00094 	ori	r3,r20,2
 20085bc:	4800a916 	blt	r9,zero,2008864 <___vfiprintf_internal_r+0x1314>
 20085c0:	00bfdfc4 	movi	r2,-129
 20085c4:	a096703a 	and	r11,r20,r2
 20085c8:	5d000094 	ori	r20,r11,2
 20085cc:	0039883a 	mov	fp,zero
 20085d0:	003f9706 	br	2008430 <__alt_mem_mem_0+0xfcfe8430>
 20085d4:	8025883a 	mov	r18,r16
 20085d8:	003c2e06 	br	2007694 <__alt_mem_mem_0+0xfcfe7694>
 20085dc:	00808134 	movhi	r2,516
 20085e0:	10837904 	addi	r2,r2,3556
 20085e4:	0039883a 	mov	fp,zero
 20085e8:	d8802615 	stw	r2,152(sp)
 20085ec:	003f9006 	br	2008430 <__alt_mem_mem_0+0xfcfe8430>
 20085f0:	04a5c83a 	sub	r18,zero,r18
 20085f4:	07000b44 	movi	fp,45
 20085f8:	9004c03a 	cmpne	r2,r18,zero
 20085fc:	04e7c83a 	sub	r19,zero,r19
 2008600:	df001d85 	stb	fp,118(sp)
 2008604:	98a7c83a 	sub	r19,r19,r2
 2008608:	48009f16 	blt	r9,zero,2008888 <___vfiprintf_internal_r+0x1338>
 200860c:	00bfdfc4 	movi	r2,-129
 2008610:	a0a8703a 	and	r20,r20,r2
 2008614:	003dd006 	br	2007d58 <__alt_mem_mem_0+0xfcfe7d58>
 2008618:	70004c26 	beq	r14,zero,200874c <___vfiprintf_internal_r+0x11fc>
 200861c:	00800084 	movi	r2,2
 2008620:	d8c01d04 	addi	r3,sp,116
 2008624:	d8c00015 	stw	r3,0(sp)
 2008628:	d8800115 	stw	r2,4(sp)
 200862c:	01000044 	movi	r4,1
 2008630:	d811883a 	mov	r8,sp
 2008634:	003f7306 	br	2008404 <__alt_mem_mem_0+0xfcfe8404>
 2008638:	a080100c 	andi	r2,r20,64
 200863c:	da802217 	ldw	r10,136(sp)
 2008640:	103e0626 	beq	r2,zero,2007e5c <__alt_mem_mem_0+0xfcfe7e5c>
 2008644:	5480000f 	ldh	r18,0(r10)
 2008648:	52800104 	addi	r10,r10,4
 200864c:	da802215 	stw	r10,136(sp)
 2008650:	9027d7fa 	srai	r19,r18,31
 2008654:	9805883a 	mov	r2,r19
 2008658:	003db806 	br	2007d3c <__alt_mem_mem_0+0xfcfe7d3c>
 200865c:	a080040c 	andi	r2,r20,16
 2008660:	1000091e 	bne	r2,zero,2008688 <___vfiprintf_internal_r+0x1138>
 2008664:	a2c0100c 	andi	r11,r20,64
 2008668:	58000726 	beq	r11,zero,2008688 <___vfiprintf_internal_r+0x1138>
 200866c:	da802217 	ldw	r10,136(sp)
 2008670:	50800017 	ldw	r2,0(r10)
 2008674:	52800104 	addi	r10,r10,4
 2008678:	da802215 	stw	r10,136(sp)
 200867c:	da802317 	ldw	r10,140(sp)
 2008680:	1280000d 	sth	r10,0(r2)
 2008684:	003be706 	br	2007624 <__alt_mem_mem_0+0xfcfe7624>
 2008688:	da802217 	ldw	r10,136(sp)
 200868c:	50800017 	ldw	r2,0(r10)
 2008690:	52800104 	addi	r10,r10,4
 2008694:	da802215 	stw	r10,136(sp)
 2008698:	da802317 	ldw	r10,140(sp)
 200869c:	12800015 	stw	r10,0(r2)
 20086a0:	003be006 	br	2007624 <__alt_mem_mem_0+0xfcfe7624>
 20086a4:	a080100c 	andi	r2,r20,64
 20086a8:	da802217 	ldw	r10,136(sp)
 20086ac:	10003026 	beq	r2,zero,2008770 <___vfiprintf_internal_r+0x1220>
 20086b0:	5480000b 	ldhu	r18,0(r10)
 20086b4:	52800104 	addi	r10,r10,4
 20086b8:	0027883a 	mov	r19,zero
 20086bc:	da802215 	stw	r10,136(sp)
 20086c0:	003d8006 	br	2007cc4 <__alt_mem_mem_0+0xfcfe7cc4>
 20086c4:	80c00007 	ldb	r3,0(r16)
 20086c8:	003c0006 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 20086cc:	a080100c 	andi	r2,r20,64
 20086d0:	d8001d85 	stb	zero,118(sp)
 20086d4:	da802217 	ldw	r10,136(sp)
 20086d8:	1000201e 	bne	r2,zero,200875c <___vfiprintf_internal_r+0x120c>
 20086dc:	50800104 	addi	r2,r10,4
 20086e0:	54800017 	ldw	r18,0(r10)
 20086e4:	0027883a 	mov	r19,zero
 20086e8:	483def0e 	bge	r9,zero,2007ea8 <__alt_mem_mem_0+0xfcfe7ea8>
 20086ec:	94c6b03a 	or	r3,r18,r19
 20086f0:	d8802215 	stw	r2,136(sp)
 20086f4:	183d4e1e 	bne	r3,zero,2007c30 <__alt_mem_mem_0+0xfcfe7c30>
 20086f8:	0039883a 	mov	fp,zero
 20086fc:	0005883a 	mov	r2,zero
 2008700:	003e0606 	br	2007f1c <__alt_mem_mem_0+0xfcfe7f1c>
 2008704:	d9402117 	ldw	r5,132(sp)
 2008708:	d9002017 	ldw	r4,128(sp)
 200870c:	d9801a04 	addi	r6,sp,104
 2008710:	da402c15 	stw	r9,176(sp)
 2008714:	db802a15 	stw	r14,168(sp)
 2008718:	200743c0 	call	200743c <__sprint_r.part.0>
 200871c:	da402c17 	ldw	r9,176(sp)
 2008720:	db802a17 	ldw	r14,168(sp)
 2008724:	103ede1e 	bne	r2,zero,20082a0 <__alt_mem_mem_0+0xfcfe82a0>
 2008728:	d9401b17 	ldw	r5,108(sp)
 200872c:	d8801c17 	ldw	r2,112(sp)
 2008730:	d811883a 	mov	r8,sp
 2008734:	29000044 	addi	r4,r5,1
 2008738:	003e7406 	br	200810c <__alt_mem_mem_0+0xfcfe810c>
 200873c:	00bfffc4 	movi	r2,-1
 2008740:	003c5806 	br	20078a4 <__alt_mem_mem_0+0xfcfe78a4>
 2008744:	d811883a 	mov	r8,sp
 2008748:	003ee806 	br	20082ec <__alt_mem_mem_0+0xfcfe82ec>
 200874c:	000b883a 	mov	r5,zero
 2008750:	01000044 	movi	r4,1
 2008754:	d811883a 	mov	r8,sp
 2008758:	003e7c06 	br	200814c <__alt_mem_mem_0+0xfcfe814c>
 200875c:	50800104 	addi	r2,r10,4
 2008760:	5480000b 	ldhu	r18,0(r10)
 2008764:	0027883a 	mov	r19,zero
 2008768:	483dcf0e 	bge	r9,zero,2007ea8 <__alt_mem_mem_0+0xfcfe7ea8>
 200876c:	003fdf06 	br	20086ec <__alt_mem_mem_0+0xfcfe86ec>
 2008770:	54800017 	ldw	r18,0(r10)
 2008774:	52800104 	addi	r10,r10,4
 2008778:	0027883a 	mov	r19,zero
 200877c:	da802215 	stw	r10,136(sp)
 2008780:	003d5006 	br	2007cc4 <__alt_mem_mem_0+0xfcfe7cc4>
 2008784:	50800104 	addi	r2,r10,4
 2008788:	5480000b 	ldhu	r18,0(r10)
 200878c:	0027883a 	mov	r19,zero
 2008790:	483f7d0e 	bge	r9,zero,2008588 <__alt_mem_mem_0+0xfcfe8588>
 2008794:	003ddc06 	br	2007f08 <__alt_mem_mem_0+0xfcfe7f08>
 2008798:	d8c02215 	stw	r3,136(sp)
 200879c:	0039883a 	mov	fp,zero
 20087a0:	003ddb06 	br	2007f10 <__alt_mem_mem_0+0xfcfe7f10>
 20087a4:	02808134 	movhi	r10,516
 20087a8:	5283da04 	addi	r10,r10,3944
 20087ac:	da802415 	stw	r10,144(sp)
 20087b0:	003e8306 	br	20081c0 <__alt_mem_mem_0+0xfcfe81c0>
 20087b4:	d8801c17 	ldw	r2,112(sp)
 20087b8:	dd002117 	ldw	r20,132(sp)
 20087bc:	103eb926 	beq	r2,zero,20082a4 <__alt_mem_mem_0+0xfcfe82a4>
 20087c0:	d9002017 	ldw	r4,128(sp)
 20087c4:	d9801a04 	addi	r6,sp,104
 20087c8:	a00b883a 	mov	r5,r20
 20087cc:	200743c0 	call	200743c <__sprint_r.part.0>
 20087d0:	003eb406 	br	20082a4 <__alt_mem_mem_0+0xfcfe82a4>
 20087d4:	80c00043 	ldbu	r3,1(r16)
 20087d8:	a5000814 	ori	r20,r20,32
 20087dc:	84000044 	addi	r16,r16,1
 20087e0:	18c03fcc 	andi	r3,r3,255
 20087e4:	18c0201c 	xori	r3,r3,128
 20087e8:	18ffe004 	addi	r3,r3,-128
 20087ec:	003bb706 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 20087f0:	a809883a 	mov	r4,r21
 20087f4:	d8c02a15 	stw	r3,168(sp)
 20087f8:	da002b15 	stw	r8,172(sp)
 20087fc:	20073a40 	call	20073a4 <strlen>
 2008800:	d8c02a17 	ldw	r3,168(sp)
 2008804:	1027883a 	mov	r19,r2
 2008808:	df001d83 	ldbu	fp,118(sp)
 200880c:	d8c02215 	stw	r3,136(sp)
 2008810:	0013883a 	mov	r9,zero
 2008814:	da002b17 	ldw	r8,172(sp)
 2008818:	003c4d06 	br	2007950 <__alt_mem_mem_0+0xfcfe7950>
 200881c:	d9402117 	ldw	r5,132(sp)
 2008820:	d9002017 	ldw	r4,128(sp)
 2008824:	d9801a04 	addi	r6,sp,104
 2008828:	da402c15 	stw	r9,176(sp)
 200882c:	200743c0 	call	200743c <__sprint_r.part.0>
 2008830:	da402c17 	ldw	r9,176(sp)
 2008834:	103e9a1e 	bne	r2,zero,20082a0 <__alt_mem_mem_0+0xfcfe82a0>
 2008838:	d9401b17 	ldw	r5,108(sp)
 200883c:	d8801c17 	ldw	r2,112(sp)
 2008840:	d811883a 	mov	r8,sp
 2008844:	29000044 	addi	r4,r5,1
 2008848:	003e4206 	br	2008154 <__alt_mem_mem_0+0xfcfe8154>
 200884c:	d9401b17 	ldw	r5,108(sp)
 2008850:	01008134 	movhi	r4,516
 2008854:	2103de04 	addi	r4,r4,3960
 2008858:	d9002415 	stw	r4,144(sp)
 200885c:	29400044 	addi	r5,r5,1
 2008860:	003c6d06 	br	2007a18 <__alt_mem_mem_0+0xfcfe7a18>
 2008864:	0039883a 	mov	fp,zero
 2008868:	00800084 	movi	r2,2
 200886c:	10803fcc 	andi	r2,r2,255
 2008870:	01000044 	movi	r4,1
 2008874:	11001e26 	beq	r2,r4,20088f0 <___vfiprintf_internal_r+0x13a0>
 2008878:	01000084 	movi	r4,2
 200887c:	11001e1e 	bne	r2,r4,20088f8 <___vfiprintf_internal_r+0x13a8>
 2008880:	1829883a 	mov	r20,r3
 2008884:	003eea06 	br	2008430 <__alt_mem_mem_0+0xfcfe8430>
 2008888:	a007883a 	mov	r3,r20
 200888c:	00800044 	movi	r2,1
 2008890:	003ff606 	br	200886c <__alt_mem_mem_0+0xfcfe886c>
 2008894:	00800184 	movi	r2,6
 2008898:	1240012e 	bgeu	r2,r9,20088a0 <___vfiprintf_internal_r+0x1350>
 200889c:	1013883a 	mov	r9,r2
 20088a0:	4827883a 	mov	r19,r9
 20088a4:	4825883a 	mov	r18,r9
 20088a8:	48001516 	blt	r9,zero,2008900 <___vfiprintf_internal_r+0x13b0>
 20088ac:	05408134 	movhi	r21,516
 20088b0:	d8c02215 	stw	r3,136(sp)
 20088b4:	ad437e04 	addi	r21,r21,3576
 20088b8:	003d1406 	br	2007d0c <__alt_mem_mem_0+0xfcfe7d0c>
 20088bc:	02808134 	movhi	r10,516
 20088c0:	5283da04 	addi	r10,r10,3944
 20088c4:	da802415 	stw	r10,144(sp)
 20088c8:	200d883a 	mov	r6,r4
 20088cc:	003c9106 	br	2007b14 <__alt_mem_mem_0+0xfcfe7b14>
 20088d0:	5021883a 	mov	r16,r10
 20088d4:	0013883a 	mov	r9,zero
 20088d8:	003b7d06 	br	20076d0 <__alt_mem_mem_0+0xfcfe76d0>
 20088dc:	4827883a 	mov	r19,r9
 20088e0:	df001d83 	ldbu	fp,118(sp)
 20088e4:	d8c02215 	stw	r3,136(sp)
 20088e8:	0013883a 	mov	r9,zero
 20088ec:	003c1806 	br	2007950 <__alt_mem_mem_0+0xfcfe7950>
 20088f0:	1829883a 	mov	r20,r3
 20088f4:	003d1806 	br	2007d58 <__alt_mem_mem_0+0xfcfe7d58>
 20088f8:	1829883a 	mov	r20,r3
 20088fc:	003ccd06 	br	2007c34 <__alt_mem_mem_0+0xfcfe7c34>
 2008900:	0025883a 	mov	r18,zero
 2008904:	003fe906 	br	20088ac <__alt_mem_mem_0+0xfcfe88ac>
 2008908:	d8802217 	ldw	r2,136(sp)
 200890c:	80c00043 	ldbu	r3,1(r16)
 2008910:	5021883a 	mov	r16,r10
 2008914:	12400017 	ldw	r9,0(r2)
 2008918:	10800104 	addi	r2,r2,4
 200891c:	d8802215 	stw	r2,136(sp)
 2008920:	483faf0e 	bge	r9,zero,20087e0 <__alt_mem_mem_0+0xfcfe87e0>
 2008924:	18c03fcc 	andi	r3,r3,255
 2008928:	18c0201c 	xori	r3,r3,128
 200892c:	027fffc4 	movi	r9,-1
 2008930:	18ffe004 	addi	r3,r3,-128
 2008934:	003b6506 	br	20076cc <__alt_mem_mem_0+0xfcfe76cc>
 2008938:	d9c01d85 	stb	r7,118(sp)
 200893c:	003ca006 	br	2007bc0 <__alt_mem_mem_0+0xfcfe7bc0>
 2008940:	d9c01d85 	stb	r7,118(sp)
 2008944:	003cad06 	br	2007bfc <__alt_mem_mem_0+0xfcfe7bfc>
 2008948:	d9c01d85 	stb	r7,118(sp)
 200894c:	003d7d06 	br	2007f44 <__alt_mem_mem_0+0xfcfe7f44>
 2008950:	d9c01d85 	stb	r7,118(sp)
 2008954:	003d5f06 	br	2007ed4 <__alt_mem_mem_0+0xfcfe7ed4>
 2008958:	a080004c 	andi	r2,r20,1
 200895c:	0039883a 	mov	fp,zero
 2008960:	10000526 	beq	r2,zero,2008978 <___vfiprintf_internal_r+0x1428>
 2008964:	00800c04 	movi	r2,48
 2008968:	d88019c5 	stb	r2,103(sp)
 200896c:	dcc02717 	ldw	r19,156(sp)
 2008970:	dd4019c4 	addi	r21,sp,103
 2008974:	003bf606 	br	2007950 <__alt_mem_mem_0+0xfcfe7950>
 2008978:	0027883a 	mov	r19,zero
 200897c:	dd401a04 	addi	r21,sp,104
 2008980:	003bf306 	br	2007950 <__alt_mem_mem_0+0xfcfe7950>
 2008984:	d9c01d85 	stb	r7,118(sp)
 2008988:	003dc806 	br	20080ac <__alt_mem_mem_0+0xfcfe80ac>
 200898c:	d9c01d85 	stb	r7,118(sp)
 2008990:	003d3a06 	br	2007e7c <__alt_mem_mem_0+0xfcfe7e7c>
 2008994:	d9c01d85 	stb	r7,118(sp)
 2008998:	003d2a06 	br	2007e44 <__alt_mem_mem_0+0xfcfe7e44>
 200899c:	d9c01d85 	stb	r7,118(sp)
 20089a0:	003cde06 	br	2007d1c <__alt_mem_mem_0+0xfcfe7d1c>
 20089a4:	d9c01d85 	stb	r7,118(sp)
 20089a8:	003cbc06 	br	2007c9c <__alt_mem_mem_0+0xfcfe7c9c>

020089ac <__vfiprintf_internal>:
 20089ac:	00808134 	movhi	r2,516
 20089b0:	1095e804 	addi	r2,r2,22432
 20089b4:	300f883a 	mov	r7,r6
 20089b8:	280d883a 	mov	r6,r5
 20089bc:	200b883a 	mov	r5,r4
 20089c0:	11000017 	ldw	r4,0(r2)
 20089c4:	20075501 	jmpi	2007550 <___vfiprintf_internal_r>

020089c8 <__sbprintf>:
 20089c8:	2880030b 	ldhu	r2,12(r5)
 20089cc:	2ac01917 	ldw	r11,100(r5)
 20089d0:	2a80038b 	ldhu	r10,14(r5)
 20089d4:	2a400717 	ldw	r9,28(r5)
 20089d8:	2a000917 	ldw	r8,36(r5)
 20089dc:	defee204 	addi	sp,sp,-1144
 20089e0:	00c10004 	movi	r3,1024
 20089e4:	dc011a15 	stw	r16,1128(sp)
 20089e8:	10bfff4c 	andi	r2,r2,65533
 20089ec:	2821883a 	mov	r16,r5
 20089f0:	d8cb883a 	add	r5,sp,r3
 20089f4:	dc811c15 	stw	r18,1136(sp)
 20089f8:	dc411b15 	stw	r17,1132(sp)
 20089fc:	dfc11d15 	stw	ra,1140(sp)
 2008a00:	2025883a 	mov	r18,r4
 2008a04:	d881030d 	sth	r2,1036(sp)
 2008a08:	dac11915 	stw	r11,1124(sp)
 2008a0c:	da81038d 	sth	r10,1038(sp)
 2008a10:	da410715 	stw	r9,1052(sp)
 2008a14:	da010915 	stw	r8,1060(sp)
 2008a18:	dec10015 	stw	sp,1024(sp)
 2008a1c:	dec10415 	stw	sp,1040(sp)
 2008a20:	d8c10215 	stw	r3,1032(sp)
 2008a24:	d8c10515 	stw	r3,1044(sp)
 2008a28:	d8010615 	stw	zero,1048(sp)
 2008a2c:	20075500 	call	2007550 <___vfiprintf_internal_r>
 2008a30:	1023883a 	mov	r17,r2
 2008a34:	10000416 	blt	r2,zero,2008a48 <__sbprintf+0x80>
 2008a38:	d9410004 	addi	r5,sp,1024
 2008a3c:	9009883a 	mov	r4,r18
 2008a40:	20048e80 	call	20048e8 <_fflush_r>
 2008a44:	10000d1e 	bne	r2,zero,2008a7c <__sbprintf+0xb4>
 2008a48:	d881030b 	ldhu	r2,1036(sp)
 2008a4c:	1080100c 	andi	r2,r2,64
 2008a50:	10000326 	beq	r2,zero,2008a60 <__sbprintf+0x98>
 2008a54:	8080030b 	ldhu	r2,12(r16)
 2008a58:	10801014 	ori	r2,r2,64
 2008a5c:	8080030d 	sth	r2,12(r16)
 2008a60:	8805883a 	mov	r2,r17
 2008a64:	dfc11d17 	ldw	ra,1140(sp)
 2008a68:	dc811c17 	ldw	r18,1136(sp)
 2008a6c:	dc411b17 	ldw	r17,1132(sp)
 2008a70:	dc011a17 	ldw	r16,1128(sp)
 2008a74:	dec11e04 	addi	sp,sp,1144
 2008a78:	f800283a 	ret
 2008a7c:	047fffc4 	movi	r17,-1
 2008a80:	003ff106 	br	2008a48 <__alt_mem_mem_0+0xfcfe8a48>

02008a84 <_write_r>:
 2008a84:	defffd04 	addi	sp,sp,-12
 2008a88:	2805883a 	mov	r2,r5
 2008a8c:	dc000015 	stw	r16,0(sp)
 2008a90:	04008134 	movhi	r16,516
 2008a94:	dc400115 	stw	r17,4(sp)
 2008a98:	300b883a 	mov	r5,r6
 2008a9c:	841db504 	addi	r16,r16,30420
 2008aa0:	2023883a 	mov	r17,r4
 2008aa4:	380d883a 	mov	r6,r7
 2008aa8:	1009883a 	mov	r4,r2
 2008aac:	dfc00215 	stw	ra,8(sp)
 2008ab0:	80000015 	stw	zero,0(r16)
 2008ab4:	20130f00 	call	20130f0 <write>
 2008ab8:	00ffffc4 	movi	r3,-1
 2008abc:	10c00526 	beq	r2,r3,2008ad4 <_write_r+0x50>
 2008ac0:	dfc00217 	ldw	ra,8(sp)
 2008ac4:	dc400117 	ldw	r17,4(sp)
 2008ac8:	dc000017 	ldw	r16,0(sp)
 2008acc:	dec00304 	addi	sp,sp,12
 2008ad0:	f800283a 	ret
 2008ad4:	80c00017 	ldw	r3,0(r16)
 2008ad8:	183ff926 	beq	r3,zero,2008ac0 <__alt_mem_mem_0+0xfcfe8ac0>
 2008adc:	88c00015 	stw	r3,0(r17)
 2008ae0:	003ff706 	br	2008ac0 <__alt_mem_mem_0+0xfcfe8ac0>

02008ae4 <_close_r>:
 2008ae4:	defffd04 	addi	sp,sp,-12
 2008ae8:	dc000015 	stw	r16,0(sp)
 2008aec:	04008134 	movhi	r16,516
 2008af0:	dc400115 	stw	r17,4(sp)
 2008af4:	841db504 	addi	r16,r16,30420
 2008af8:	2023883a 	mov	r17,r4
 2008afc:	2809883a 	mov	r4,r5
 2008b00:	dfc00215 	stw	ra,8(sp)
 2008b04:	80000015 	stw	zero,0(r16)
 2008b08:	201303c0 	call	201303c <close>
 2008b0c:	00ffffc4 	movi	r3,-1
 2008b10:	10c00526 	beq	r2,r3,2008b28 <_close_r+0x44>
 2008b14:	dfc00217 	ldw	ra,8(sp)
 2008b18:	dc400117 	ldw	r17,4(sp)
 2008b1c:	dc000017 	ldw	r16,0(sp)
 2008b20:	dec00304 	addi	sp,sp,12
 2008b24:	f800283a 	ret
 2008b28:	80c00017 	ldw	r3,0(r16)
 2008b2c:	183ff926 	beq	r3,zero,2008b14 <__alt_mem_mem_0+0xfcfe8b14>
 2008b30:	88c00015 	stw	r3,0(r17)
 2008b34:	003ff706 	br	2008b14 <__alt_mem_mem_0+0xfcfe8b14>

02008b38 <_calloc_r>:
 2008b38:	298b383a 	mul	r5,r5,r6
 2008b3c:	defffe04 	addi	sp,sp,-8
 2008b40:	dfc00115 	stw	ra,4(sp)
 2008b44:	dc000015 	stw	r16,0(sp)
 2008b48:	20055680 	call	2005568 <_malloc_r>
 2008b4c:	10002926 	beq	r2,zero,2008bf4 <_calloc_r+0xbc>
 2008b50:	11bfff17 	ldw	r6,-4(r2)
 2008b54:	1021883a 	mov	r16,r2
 2008b58:	00bfff04 	movi	r2,-4
 2008b5c:	308c703a 	and	r6,r6,r2
 2008b60:	00c00904 	movi	r3,36
 2008b64:	308d883a 	add	r6,r6,r2
 2008b68:	19801636 	bltu	r3,r6,2008bc4 <_calloc_r+0x8c>
 2008b6c:	008004c4 	movi	r2,19
 2008b70:	11800b2e 	bgeu	r2,r6,2008ba0 <_calloc_r+0x68>
 2008b74:	80000015 	stw	zero,0(r16)
 2008b78:	80000115 	stw	zero,4(r16)
 2008b7c:	008006c4 	movi	r2,27
 2008b80:	11801a2e 	bgeu	r2,r6,2008bec <_calloc_r+0xb4>
 2008b84:	80000215 	stw	zero,8(r16)
 2008b88:	80000315 	stw	zero,12(r16)
 2008b8c:	30c0151e 	bne	r6,r3,2008be4 <_calloc_r+0xac>
 2008b90:	80000415 	stw	zero,16(r16)
 2008b94:	80800604 	addi	r2,r16,24
 2008b98:	80000515 	stw	zero,20(r16)
 2008b9c:	00000106 	br	2008ba4 <_calloc_r+0x6c>
 2008ba0:	8005883a 	mov	r2,r16
 2008ba4:	10000015 	stw	zero,0(r2)
 2008ba8:	10000115 	stw	zero,4(r2)
 2008bac:	10000215 	stw	zero,8(r2)
 2008bb0:	8005883a 	mov	r2,r16
 2008bb4:	dfc00117 	ldw	ra,4(sp)
 2008bb8:	dc000017 	ldw	r16,0(sp)
 2008bbc:	dec00204 	addi	sp,sp,8
 2008bc0:	f800283a 	ret
 2008bc4:	000b883a 	mov	r5,zero
 2008bc8:	8009883a 	mov	r4,r16
 2008bcc:	2005fa00 	call	2005fa0 <memset>
 2008bd0:	8005883a 	mov	r2,r16
 2008bd4:	dfc00117 	ldw	ra,4(sp)
 2008bd8:	dc000017 	ldw	r16,0(sp)
 2008bdc:	dec00204 	addi	sp,sp,8
 2008be0:	f800283a 	ret
 2008be4:	80800404 	addi	r2,r16,16
 2008be8:	003fee06 	br	2008ba4 <__alt_mem_mem_0+0xfcfe8ba4>
 2008bec:	80800204 	addi	r2,r16,8
 2008bf0:	003fec06 	br	2008ba4 <__alt_mem_mem_0+0xfcfe8ba4>
 2008bf4:	0005883a 	mov	r2,zero
 2008bf8:	003fee06 	br	2008bb4 <__alt_mem_mem_0+0xfcfe8bb4>

02008bfc <_fclose_r>:
 2008bfc:	28003926 	beq	r5,zero,2008ce4 <_fclose_r+0xe8>
 2008c00:	defffc04 	addi	sp,sp,-16
 2008c04:	dc400115 	stw	r17,4(sp)
 2008c08:	dc000015 	stw	r16,0(sp)
 2008c0c:	dfc00315 	stw	ra,12(sp)
 2008c10:	dc800215 	stw	r18,8(sp)
 2008c14:	2023883a 	mov	r17,r4
 2008c18:	2821883a 	mov	r16,r5
 2008c1c:	20000226 	beq	r4,zero,2008c28 <_fclose_r+0x2c>
 2008c20:	20800e17 	ldw	r2,56(r4)
 2008c24:	10002726 	beq	r2,zero,2008cc4 <_fclose_r+0xc8>
 2008c28:	8080030f 	ldh	r2,12(r16)
 2008c2c:	1000071e 	bne	r2,zero,2008c4c <_fclose_r+0x50>
 2008c30:	0005883a 	mov	r2,zero
 2008c34:	dfc00317 	ldw	ra,12(sp)
 2008c38:	dc800217 	ldw	r18,8(sp)
 2008c3c:	dc400117 	ldw	r17,4(sp)
 2008c40:	dc000017 	ldw	r16,0(sp)
 2008c44:	dec00404 	addi	sp,sp,16
 2008c48:	f800283a 	ret
 2008c4c:	800b883a 	mov	r5,r16
 2008c50:	8809883a 	mov	r4,r17
 2008c54:	20046cc0 	call	20046cc <__sflush_r>
 2008c58:	1025883a 	mov	r18,r2
 2008c5c:	80800b17 	ldw	r2,44(r16)
 2008c60:	10000426 	beq	r2,zero,2008c74 <_fclose_r+0x78>
 2008c64:	81400717 	ldw	r5,28(r16)
 2008c68:	8809883a 	mov	r4,r17
 2008c6c:	103ee83a 	callr	r2
 2008c70:	10001616 	blt	r2,zero,2008ccc <_fclose_r+0xd0>
 2008c74:	8080030b 	ldhu	r2,12(r16)
 2008c78:	1080200c 	andi	r2,r2,128
 2008c7c:	1000151e 	bne	r2,zero,2008cd4 <_fclose_r+0xd8>
 2008c80:	81400c17 	ldw	r5,48(r16)
 2008c84:	28000526 	beq	r5,zero,2008c9c <_fclose_r+0xa0>
 2008c88:	80801004 	addi	r2,r16,64
 2008c8c:	28800226 	beq	r5,r2,2008c98 <_fclose_r+0x9c>
 2008c90:	8809883a 	mov	r4,r17
 2008c94:	2004e380 	call	2004e38 <_free_r>
 2008c98:	80000c15 	stw	zero,48(r16)
 2008c9c:	81401117 	ldw	r5,68(r16)
 2008ca0:	28000326 	beq	r5,zero,2008cb0 <_fclose_r+0xb4>
 2008ca4:	8809883a 	mov	r4,r17
 2008ca8:	2004e380 	call	2004e38 <_free_r>
 2008cac:	80001115 	stw	zero,68(r16)
 2008cb0:	2004cd40 	call	2004cd4 <__sfp_lock_acquire>
 2008cb4:	8000030d 	sth	zero,12(r16)
 2008cb8:	2004cd80 	call	2004cd8 <__sfp_lock_release>
 2008cbc:	9005883a 	mov	r2,r18
 2008cc0:	003fdc06 	br	2008c34 <__alt_mem_mem_0+0xfcfe8c34>
 2008cc4:	2004cc40 	call	2004cc4 <__sinit>
 2008cc8:	003fd706 	br	2008c28 <__alt_mem_mem_0+0xfcfe8c28>
 2008ccc:	04bfffc4 	movi	r18,-1
 2008cd0:	003fe806 	br	2008c74 <__alt_mem_mem_0+0xfcfe8c74>
 2008cd4:	81400417 	ldw	r5,16(r16)
 2008cd8:	8809883a 	mov	r4,r17
 2008cdc:	2004e380 	call	2004e38 <_free_r>
 2008ce0:	003fe706 	br	2008c80 <__alt_mem_mem_0+0xfcfe8c80>
 2008ce4:	0005883a 	mov	r2,zero
 2008ce8:	f800283a 	ret

02008cec <fclose>:
 2008cec:	00808134 	movhi	r2,516
 2008cf0:	1095e804 	addi	r2,r2,22432
 2008cf4:	200b883a 	mov	r5,r4
 2008cf8:	11000017 	ldw	r4,0(r2)
 2008cfc:	2008bfc1 	jmpi	2008bfc <_fclose_r>

02008d00 <__fputwc>:
 2008d00:	defff804 	addi	sp,sp,-32
 2008d04:	dcc00415 	stw	r19,16(sp)
 2008d08:	dc800315 	stw	r18,12(sp)
 2008d0c:	dc000115 	stw	r16,4(sp)
 2008d10:	dfc00715 	stw	ra,28(sp)
 2008d14:	dd400615 	stw	r21,24(sp)
 2008d18:	dd000515 	stw	r20,20(sp)
 2008d1c:	dc400215 	stw	r17,8(sp)
 2008d20:	2027883a 	mov	r19,r4
 2008d24:	2825883a 	mov	r18,r5
 2008d28:	3021883a 	mov	r16,r6
 2008d2c:	20053580 	call	2005358 <__locale_mb_cur_max>
 2008d30:	00c00044 	movi	r3,1
 2008d34:	10c03e26 	beq	r2,r3,2008e30 <__fputwc+0x130>
 2008d38:	81c01704 	addi	r7,r16,92
 2008d3c:	900d883a 	mov	r6,r18
 2008d40:	d80b883a 	mov	r5,sp
 2008d44:	9809883a 	mov	r4,r19
 2008d48:	2009d4c0 	call	2009d4c <_wcrtomb_r>
 2008d4c:	1029883a 	mov	r20,r2
 2008d50:	00bfffc4 	movi	r2,-1
 2008d54:	a0802026 	beq	r20,r2,2008dd8 <__fputwc+0xd8>
 2008d58:	d9400003 	ldbu	r5,0(sp)
 2008d5c:	a0001c26 	beq	r20,zero,2008dd0 <__fputwc+0xd0>
 2008d60:	0023883a 	mov	r17,zero
 2008d64:	05400284 	movi	r21,10
 2008d68:	00000906 	br	2008d90 <__fputwc+0x90>
 2008d6c:	80800017 	ldw	r2,0(r16)
 2008d70:	11400005 	stb	r5,0(r2)
 2008d74:	80c00017 	ldw	r3,0(r16)
 2008d78:	18c00044 	addi	r3,r3,1
 2008d7c:	80c00015 	stw	r3,0(r16)
 2008d80:	8c400044 	addi	r17,r17,1
 2008d84:	dc45883a 	add	r2,sp,r17
 2008d88:	8d00112e 	bgeu	r17,r20,2008dd0 <__fputwc+0xd0>
 2008d8c:	11400003 	ldbu	r5,0(r2)
 2008d90:	80c00217 	ldw	r3,8(r16)
 2008d94:	18ffffc4 	addi	r3,r3,-1
 2008d98:	80c00215 	stw	r3,8(r16)
 2008d9c:	183ff30e 	bge	r3,zero,2008d6c <__alt_mem_mem_0+0xfcfe8d6c>
 2008da0:	80800617 	ldw	r2,24(r16)
 2008da4:	18801916 	blt	r3,r2,2008e0c <__fputwc+0x10c>
 2008da8:	80800017 	ldw	r2,0(r16)
 2008dac:	11400005 	stb	r5,0(r2)
 2008db0:	80800017 	ldw	r2,0(r16)
 2008db4:	10c00003 	ldbu	r3,0(r2)
 2008db8:	10800044 	addi	r2,r2,1
 2008dbc:	1d402326 	beq	r3,r21,2008e4c <__fputwc+0x14c>
 2008dc0:	80800015 	stw	r2,0(r16)
 2008dc4:	8c400044 	addi	r17,r17,1
 2008dc8:	dc45883a 	add	r2,sp,r17
 2008dcc:	8d3fef36 	bltu	r17,r20,2008d8c <__alt_mem_mem_0+0xfcfe8d8c>
 2008dd0:	9005883a 	mov	r2,r18
 2008dd4:	00000406 	br	2008de8 <__fputwc+0xe8>
 2008dd8:	80c0030b 	ldhu	r3,12(r16)
 2008ddc:	a005883a 	mov	r2,r20
 2008de0:	18c01014 	ori	r3,r3,64
 2008de4:	80c0030d 	sth	r3,12(r16)
 2008de8:	dfc00717 	ldw	ra,28(sp)
 2008dec:	dd400617 	ldw	r21,24(sp)
 2008df0:	dd000517 	ldw	r20,20(sp)
 2008df4:	dcc00417 	ldw	r19,16(sp)
 2008df8:	dc800317 	ldw	r18,12(sp)
 2008dfc:	dc400217 	ldw	r17,8(sp)
 2008e00:	dc000117 	ldw	r16,4(sp)
 2008e04:	dec00804 	addi	sp,sp,32
 2008e08:	f800283a 	ret
 2008e0c:	800d883a 	mov	r6,r16
 2008e10:	29403fcc 	andi	r5,r5,255
 2008e14:	9809883a 	mov	r4,r19
 2008e18:	2009bf40 	call	2009bf4 <__swbuf_r>
 2008e1c:	10bfffe0 	cmpeqi	r2,r2,-1
 2008e20:	10803fcc 	andi	r2,r2,255
 2008e24:	103fd626 	beq	r2,zero,2008d80 <__alt_mem_mem_0+0xfcfe8d80>
 2008e28:	00bfffc4 	movi	r2,-1
 2008e2c:	003fee06 	br	2008de8 <__alt_mem_mem_0+0xfcfe8de8>
 2008e30:	90ffffc4 	addi	r3,r18,-1
 2008e34:	01003f84 	movi	r4,254
 2008e38:	20ffbf36 	bltu	r4,r3,2008d38 <__alt_mem_mem_0+0xfcfe8d38>
 2008e3c:	900b883a 	mov	r5,r18
 2008e40:	dc800005 	stb	r18,0(sp)
 2008e44:	1029883a 	mov	r20,r2
 2008e48:	003fc506 	br	2008d60 <__alt_mem_mem_0+0xfcfe8d60>
 2008e4c:	800d883a 	mov	r6,r16
 2008e50:	a80b883a 	mov	r5,r21
 2008e54:	9809883a 	mov	r4,r19
 2008e58:	2009bf40 	call	2009bf4 <__swbuf_r>
 2008e5c:	10bfffe0 	cmpeqi	r2,r2,-1
 2008e60:	003fef06 	br	2008e20 <__alt_mem_mem_0+0xfcfe8e20>

02008e64 <_fputwc_r>:
 2008e64:	3080030b 	ldhu	r2,12(r6)
 2008e68:	10c8000c 	andi	r3,r2,8192
 2008e6c:	1800051e 	bne	r3,zero,2008e84 <_fputwc_r+0x20>
 2008e70:	30c01917 	ldw	r3,100(r6)
 2008e74:	10880014 	ori	r2,r2,8192
 2008e78:	3080030d 	sth	r2,12(r6)
 2008e7c:	18880014 	ori	r2,r3,8192
 2008e80:	30801915 	stw	r2,100(r6)
 2008e84:	2008d001 	jmpi	2008d00 <__fputwc>

02008e88 <fputwc>:
 2008e88:	00808134 	movhi	r2,516
 2008e8c:	defffc04 	addi	sp,sp,-16
 2008e90:	1095e804 	addi	r2,r2,22432
 2008e94:	dc000115 	stw	r16,4(sp)
 2008e98:	14000017 	ldw	r16,0(r2)
 2008e9c:	dc400215 	stw	r17,8(sp)
 2008ea0:	dfc00315 	stw	ra,12(sp)
 2008ea4:	2023883a 	mov	r17,r4
 2008ea8:	80000226 	beq	r16,zero,2008eb4 <fputwc+0x2c>
 2008eac:	80800e17 	ldw	r2,56(r16)
 2008eb0:	10001026 	beq	r2,zero,2008ef4 <fputwc+0x6c>
 2008eb4:	2880030b 	ldhu	r2,12(r5)
 2008eb8:	10c8000c 	andi	r3,r2,8192
 2008ebc:	1800051e 	bne	r3,zero,2008ed4 <fputwc+0x4c>
 2008ec0:	28c01917 	ldw	r3,100(r5)
 2008ec4:	10880014 	ori	r2,r2,8192
 2008ec8:	2880030d 	sth	r2,12(r5)
 2008ecc:	18880014 	ori	r2,r3,8192
 2008ed0:	28801915 	stw	r2,100(r5)
 2008ed4:	280d883a 	mov	r6,r5
 2008ed8:	8009883a 	mov	r4,r16
 2008edc:	880b883a 	mov	r5,r17
 2008ee0:	dfc00317 	ldw	ra,12(sp)
 2008ee4:	dc400217 	ldw	r17,8(sp)
 2008ee8:	dc000117 	ldw	r16,4(sp)
 2008eec:	dec00404 	addi	sp,sp,16
 2008ef0:	2008d001 	jmpi	2008d00 <__fputwc>
 2008ef4:	8009883a 	mov	r4,r16
 2008ef8:	d9400015 	stw	r5,0(sp)
 2008efc:	2004cc40 	call	2004cc4 <__sinit>
 2008f00:	d9400017 	ldw	r5,0(sp)
 2008f04:	003feb06 	br	2008eb4 <__alt_mem_mem_0+0xfcfe8eb4>

02008f08 <_fstat_r>:
 2008f08:	defffd04 	addi	sp,sp,-12
 2008f0c:	2805883a 	mov	r2,r5
 2008f10:	dc000015 	stw	r16,0(sp)
 2008f14:	04008134 	movhi	r16,516
 2008f18:	dc400115 	stw	r17,4(sp)
 2008f1c:	841db504 	addi	r16,r16,30420
 2008f20:	2023883a 	mov	r17,r4
 2008f24:	300b883a 	mov	r5,r6
 2008f28:	1009883a 	mov	r4,r2
 2008f2c:	dfc00215 	stw	ra,8(sp)
 2008f30:	80000015 	stw	zero,0(r16)
 2008f34:	20125a00 	call	20125a0 <fstat>
 2008f38:	00ffffc4 	movi	r3,-1
 2008f3c:	10c00526 	beq	r2,r3,2008f54 <_fstat_r+0x4c>
 2008f40:	dfc00217 	ldw	ra,8(sp)
 2008f44:	dc400117 	ldw	r17,4(sp)
 2008f48:	dc000017 	ldw	r16,0(sp)
 2008f4c:	dec00304 	addi	sp,sp,12
 2008f50:	f800283a 	ret
 2008f54:	80c00017 	ldw	r3,0(r16)
 2008f58:	183ff926 	beq	r3,zero,2008f40 <__alt_mem_mem_0+0xfcfe8f40>
 2008f5c:	88c00015 	stw	r3,0(r17)
 2008f60:	003ff706 	br	2008f40 <__alt_mem_mem_0+0xfcfe8f40>

02008f64 <__sfvwrite_r>:
 2008f64:	30800217 	ldw	r2,8(r6)
 2008f68:	10006726 	beq	r2,zero,2009108 <__sfvwrite_r+0x1a4>
 2008f6c:	28c0030b 	ldhu	r3,12(r5)
 2008f70:	defff404 	addi	sp,sp,-48
 2008f74:	dd400715 	stw	r21,28(sp)
 2008f78:	dd000615 	stw	r20,24(sp)
 2008f7c:	dc000215 	stw	r16,8(sp)
 2008f80:	dfc00b15 	stw	ra,44(sp)
 2008f84:	df000a15 	stw	fp,40(sp)
 2008f88:	ddc00915 	stw	r23,36(sp)
 2008f8c:	dd800815 	stw	r22,32(sp)
 2008f90:	dcc00515 	stw	r19,20(sp)
 2008f94:	dc800415 	stw	r18,16(sp)
 2008f98:	dc400315 	stw	r17,12(sp)
 2008f9c:	1880020c 	andi	r2,r3,8
 2008fa0:	2821883a 	mov	r16,r5
 2008fa4:	202b883a 	mov	r21,r4
 2008fa8:	3029883a 	mov	r20,r6
 2008fac:	10002726 	beq	r2,zero,200904c <__sfvwrite_r+0xe8>
 2008fb0:	28800417 	ldw	r2,16(r5)
 2008fb4:	10002526 	beq	r2,zero,200904c <__sfvwrite_r+0xe8>
 2008fb8:	1880008c 	andi	r2,r3,2
 2008fbc:	a4400017 	ldw	r17,0(r20)
 2008fc0:	10002a26 	beq	r2,zero,200906c <__sfvwrite_r+0x108>
 2008fc4:	05a00034 	movhi	r22,32768
 2008fc8:	0027883a 	mov	r19,zero
 2008fcc:	0025883a 	mov	r18,zero
 2008fd0:	b5bf0004 	addi	r22,r22,-1024
 2008fd4:	980d883a 	mov	r6,r19
 2008fd8:	a809883a 	mov	r4,r21
 2008fdc:	90004626 	beq	r18,zero,20090f8 <__sfvwrite_r+0x194>
 2008fe0:	900f883a 	mov	r7,r18
 2008fe4:	b480022e 	bgeu	r22,r18,2008ff0 <__sfvwrite_r+0x8c>
 2008fe8:	01e00034 	movhi	r7,32768
 2008fec:	39ff0004 	addi	r7,r7,-1024
 2008ff0:	80800917 	ldw	r2,36(r16)
 2008ff4:	81400717 	ldw	r5,28(r16)
 2008ff8:	103ee83a 	callr	r2
 2008ffc:	0080570e 	bge	zero,r2,200915c <__sfvwrite_r+0x1f8>
 2009000:	a0c00217 	ldw	r3,8(r20)
 2009004:	98a7883a 	add	r19,r19,r2
 2009008:	90a5c83a 	sub	r18,r18,r2
 200900c:	1885c83a 	sub	r2,r3,r2
 2009010:	a0800215 	stw	r2,8(r20)
 2009014:	103fef1e 	bne	r2,zero,2008fd4 <__alt_mem_mem_0+0xfcfe8fd4>
 2009018:	0005883a 	mov	r2,zero
 200901c:	dfc00b17 	ldw	ra,44(sp)
 2009020:	df000a17 	ldw	fp,40(sp)
 2009024:	ddc00917 	ldw	r23,36(sp)
 2009028:	dd800817 	ldw	r22,32(sp)
 200902c:	dd400717 	ldw	r21,28(sp)
 2009030:	dd000617 	ldw	r20,24(sp)
 2009034:	dcc00517 	ldw	r19,20(sp)
 2009038:	dc800417 	ldw	r18,16(sp)
 200903c:	dc400317 	ldw	r17,12(sp)
 2009040:	dc000217 	ldw	r16,8(sp)
 2009044:	dec00c04 	addi	sp,sp,48
 2009048:	f800283a 	ret
 200904c:	800b883a 	mov	r5,r16
 2009050:	a809883a 	mov	r4,r21
 2009054:	2002cf00 	call	2002cf0 <__swsetup_r>
 2009058:	1000eb1e 	bne	r2,zero,2009408 <__sfvwrite_r+0x4a4>
 200905c:	80c0030b 	ldhu	r3,12(r16)
 2009060:	a4400017 	ldw	r17,0(r20)
 2009064:	1880008c 	andi	r2,r3,2
 2009068:	103fd61e 	bne	r2,zero,2008fc4 <__alt_mem_mem_0+0xfcfe8fc4>
 200906c:	1880004c 	andi	r2,r3,1
 2009070:	10003f1e 	bne	r2,zero,2009170 <__sfvwrite_r+0x20c>
 2009074:	0039883a 	mov	fp,zero
 2009078:	0025883a 	mov	r18,zero
 200907c:	90001a26 	beq	r18,zero,20090e8 <__sfvwrite_r+0x184>
 2009080:	1880800c 	andi	r2,r3,512
 2009084:	84c00217 	ldw	r19,8(r16)
 2009088:	10002126 	beq	r2,zero,2009110 <__sfvwrite_r+0x1ac>
 200908c:	982f883a 	mov	r23,r19
 2009090:	94c09336 	bltu	r18,r19,20092e0 <__sfvwrite_r+0x37c>
 2009094:	1881200c 	andi	r2,r3,1152
 2009098:	10009e1e 	bne	r2,zero,2009314 <__sfvwrite_r+0x3b0>
 200909c:	81000017 	ldw	r4,0(r16)
 20090a0:	b80d883a 	mov	r6,r23
 20090a4:	e00b883a 	mov	r5,fp
 20090a8:	20094d40 	call	20094d4 <memmove>
 20090ac:	80c00217 	ldw	r3,8(r16)
 20090b0:	81000017 	ldw	r4,0(r16)
 20090b4:	9005883a 	mov	r2,r18
 20090b8:	1ce7c83a 	sub	r19,r3,r19
 20090bc:	25cf883a 	add	r7,r4,r23
 20090c0:	84c00215 	stw	r19,8(r16)
 20090c4:	81c00015 	stw	r7,0(r16)
 20090c8:	a0c00217 	ldw	r3,8(r20)
 20090cc:	e0b9883a 	add	fp,fp,r2
 20090d0:	90a5c83a 	sub	r18,r18,r2
 20090d4:	18a7c83a 	sub	r19,r3,r2
 20090d8:	a4c00215 	stw	r19,8(r20)
 20090dc:	983fce26 	beq	r19,zero,2009018 <__alt_mem_mem_0+0xfcfe9018>
 20090e0:	80c0030b 	ldhu	r3,12(r16)
 20090e4:	903fe61e 	bne	r18,zero,2009080 <__alt_mem_mem_0+0xfcfe9080>
 20090e8:	8f000017 	ldw	fp,0(r17)
 20090ec:	8c800117 	ldw	r18,4(r17)
 20090f0:	8c400204 	addi	r17,r17,8
 20090f4:	003fe106 	br	200907c <__alt_mem_mem_0+0xfcfe907c>
 20090f8:	8cc00017 	ldw	r19,0(r17)
 20090fc:	8c800117 	ldw	r18,4(r17)
 2009100:	8c400204 	addi	r17,r17,8
 2009104:	003fb306 	br	2008fd4 <__alt_mem_mem_0+0xfcfe8fd4>
 2009108:	0005883a 	mov	r2,zero
 200910c:	f800283a 	ret
 2009110:	81000017 	ldw	r4,0(r16)
 2009114:	80800417 	ldw	r2,16(r16)
 2009118:	11005736 	bltu	r2,r4,2009278 <__sfvwrite_r+0x314>
 200911c:	85c00517 	ldw	r23,20(r16)
 2009120:	95c05536 	bltu	r18,r23,2009278 <__sfvwrite_r+0x314>
 2009124:	00a00034 	movhi	r2,32768
 2009128:	10bfffc4 	addi	r2,r2,-1
 200912c:	9009883a 	mov	r4,r18
 2009130:	1480012e 	bgeu	r2,r18,2009138 <__sfvwrite_r+0x1d4>
 2009134:	1009883a 	mov	r4,r2
 2009138:	b80b883a 	mov	r5,r23
 200913c:	200a9e40 	call	200a9e4 <__divsi3>
 2009140:	15cf383a 	mul	r7,r2,r23
 2009144:	81400717 	ldw	r5,28(r16)
 2009148:	80800917 	ldw	r2,36(r16)
 200914c:	e00d883a 	mov	r6,fp
 2009150:	a809883a 	mov	r4,r21
 2009154:	103ee83a 	callr	r2
 2009158:	00bfdb16 	blt	zero,r2,20090c8 <__alt_mem_mem_0+0xfcfe90c8>
 200915c:	8080030b 	ldhu	r2,12(r16)
 2009160:	10801014 	ori	r2,r2,64
 2009164:	8080030d 	sth	r2,12(r16)
 2009168:	00bfffc4 	movi	r2,-1
 200916c:	003fab06 	br	200901c <__alt_mem_mem_0+0xfcfe901c>
 2009170:	0027883a 	mov	r19,zero
 2009174:	0011883a 	mov	r8,zero
 2009178:	0039883a 	mov	fp,zero
 200917c:	0025883a 	mov	r18,zero
 2009180:	90001f26 	beq	r18,zero,2009200 <__sfvwrite_r+0x29c>
 2009184:	40005a26 	beq	r8,zero,20092f0 <__sfvwrite_r+0x38c>
 2009188:	982d883a 	mov	r22,r19
 200918c:	94c0012e 	bgeu	r18,r19,2009194 <__sfvwrite_r+0x230>
 2009190:	902d883a 	mov	r22,r18
 2009194:	81000017 	ldw	r4,0(r16)
 2009198:	80800417 	ldw	r2,16(r16)
 200919c:	b02f883a 	mov	r23,r22
 20091a0:	81c00517 	ldw	r7,20(r16)
 20091a4:	1100032e 	bgeu	r2,r4,20091b4 <__sfvwrite_r+0x250>
 20091a8:	80c00217 	ldw	r3,8(r16)
 20091ac:	38c7883a 	add	r3,r7,r3
 20091b0:	1d801816 	blt	r3,r22,2009214 <__sfvwrite_r+0x2b0>
 20091b4:	b1c03e16 	blt	r22,r7,20092b0 <__sfvwrite_r+0x34c>
 20091b8:	80800917 	ldw	r2,36(r16)
 20091bc:	81400717 	ldw	r5,28(r16)
 20091c0:	e00d883a 	mov	r6,fp
 20091c4:	da000115 	stw	r8,4(sp)
 20091c8:	a809883a 	mov	r4,r21
 20091cc:	103ee83a 	callr	r2
 20091d0:	102f883a 	mov	r23,r2
 20091d4:	da000117 	ldw	r8,4(sp)
 20091d8:	00bfe00e 	bge	zero,r2,200915c <__alt_mem_mem_0+0xfcfe915c>
 20091dc:	9de7c83a 	sub	r19,r19,r23
 20091e0:	98001f26 	beq	r19,zero,2009260 <__sfvwrite_r+0x2fc>
 20091e4:	a0800217 	ldw	r2,8(r20)
 20091e8:	e5f9883a 	add	fp,fp,r23
 20091ec:	95e5c83a 	sub	r18,r18,r23
 20091f0:	15efc83a 	sub	r23,r2,r23
 20091f4:	a5c00215 	stw	r23,8(r20)
 20091f8:	b83f8726 	beq	r23,zero,2009018 <__alt_mem_mem_0+0xfcfe9018>
 20091fc:	903fe11e 	bne	r18,zero,2009184 <__alt_mem_mem_0+0xfcfe9184>
 2009200:	8f000017 	ldw	fp,0(r17)
 2009204:	8c800117 	ldw	r18,4(r17)
 2009208:	0011883a 	mov	r8,zero
 200920c:	8c400204 	addi	r17,r17,8
 2009210:	003fdb06 	br	2009180 <__alt_mem_mem_0+0xfcfe9180>
 2009214:	180d883a 	mov	r6,r3
 2009218:	e00b883a 	mov	r5,fp
 200921c:	da000115 	stw	r8,4(sp)
 2009220:	d8c00015 	stw	r3,0(sp)
 2009224:	20094d40 	call	20094d4 <memmove>
 2009228:	d8c00017 	ldw	r3,0(sp)
 200922c:	80800017 	ldw	r2,0(r16)
 2009230:	800b883a 	mov	r5,r16
 2009234:	a809883a 	mov	r4,r21
 2009238:	10c5883a 	add	r2,r2,r3
 200923c:	80800015 	stw	r2,0(r16)
 2009240:	d8c00015 	stw	r3,0(sp)
 2009244:	20048e80 	call	20048e8 <_fflush_r>
 2009248:	d8c00017 	ldw	r3,0(sp)
 200924c:	da000117 	ldw	r8,4(sp)
 2009250:	103fc21e 	bne	r2,zero,200915c <__alt_mem_mem_0+0xfcfe915c>
 2009254:	182f883a 	mov	r23,r3
 2009258:	9de7c83a 	sub	r19,r19,r23
 200925c:	983fe11e 	bne	r19,zero,20091e4 <__alt_mem_mem_0+0xfcfe91e4>
 2009260:	800b883a 	mov	r5,r16
 2009264:	a809883a 	mov	r4,r21
 2009268:	20048e80 	call	20048e8 <_fflush_r>
 200926c:	103fbb1e 	bne	r2,zero,200915c <__alt_mem_mem_0+0xfcfe915c>
 2009270:	0011883a 	mov	r8,zero
 2009274:	003fdb06 	br	20091e4 <__alt_mem_mem_0+0xfcfe91e4>
 2009278:	94c0012e 	bgeu	r18,r19,2009280 <__sfvwrite_r+0x31c>
 200927c:	9027883a 	mov	r19,r18
 2009280:	980d883a 	mov	r6,r19
 2009284:	e00b883a 	mov	r5,fp
 2009288:	20094d40 	call	20094d4 <memmove>
 200928c:	80800217 	ldw	r2,8(r16)
 2009290:	80c00017 	ldw	r3,0(r16)
 2009294:	14c5c83a 	sub	r2,r2,r19
 2009298:	1cc7883a 	add	r3,r3,r19
 200929c:	80800215 	stw	r2,8(r16)
 20092a0:	80c00015 	stw	r3,0(r16)
 20092a4:	10004326 	beq	r2,zero,20093b4 <__sfvwrite_r+0x450>
 20092a8:	9805883a 	mov	r2,r19
 20092ac:	003f8606 	br	20090c8 <__alt_mem_mem_0+0xfcfe90c8>
 20092b0:	b00d883a 	mov	r6,r22
 20092b4:	e00b883a 	mov	r5,fp
 20092b8:	da000115 	stw	r8,4(sp)
 20092bc:	20094d40 	call	20094d4 <memmove>
 20092c0:	80800217 	ldw	r2,8(r16)
 20092c4:	80c00017 	ldw	r3,0(r16)
 20092c8:	da000117 	ldw	r8,4(sp)
 20092cc:	1585c83a 	sub	r2,r2,r22
 20092d0:	1dad883a 	add	r22,r3,r22
 20092d4:	80800215 	stw	r2,8(r16)
 20092d8:	85800015 	stw	r22,0(r16)
 20092dc:	003fbf06 	br	20091dc <__alt_mem_mem_0+0xfcfe91dc>
 20092e0:	81000017 	ldw	r4,0(r16)
 20092e4:	9027883a 	mov	r19,r18
 20092e8:	902f883a 	mov	r23,r18
 20092ec:	003f6c06 	br	20090a0 <__alt_mem_mem_0+0xfcfe90a0>
 20092f0:	900d883a 	mov	r6,r18
 20092f4:	01400284 	movi	r5,10
 20092f8:	e009883a 	mov	r4,fp
 20092fc:	2005d740 	call	2005d74 <memchr>
 2009300:	10003e26 	beq	r2,zero,20093fc <__sfvwrite_r+0x498>
 2009304:	10800044 	addi	r2,r2,1
 2009308:	1727c83a 	sub	r19,r2,fp
 200930c:	02000044 	movi	r8,1
 2009310:	003f9d06 	br	2009188 <__alt_mem_mem_0+0xfcfe9188>
 2009314:	80800517 	ldw	r2,20(r16)
 2009318:	81400417 	ldw	r5,16(r16)
 200931c:	81c00017 	ldw	r7,0(r16)
 2009320:	10a7883a 	add	r19,r2,r2
 2009324:	9885883a 	add	r2,r19,r2
 2009328:	1026d7fa 	srli	r19,r2,31
 200932c:	396dc83a 	sub	r22,r7,r5
 2009330:	b1000044 	addi	r4,r22,1
 2009334:	9885883a 	add	r2,r19,r2
 2009338:	1027d07a 	srai	r19,r2,1
 200933c:	2485883a 	add	r2,r4,r18
 2009340:	980d883a 	mov	r6,r19
 2009344:	9880022e 	bgeu	r19,r2,2009350 <__sfvwrite_r+0x3ec>
 2009348:	1027883a 	mov	r19,r2
 200934c:	100d883a 	mov	r6,r2
 2009350:	18c1000c 	andi	r3,r3,1024
 2009354:	18001c26 	beq	r3,zero,20093c8 <__sfvwrite_r+0x464>
 2009358:	300b883a 	mov	r5,r6
 200935c:	a809883a 	mov	r4,r21
 2009360:	20055680 	call	2005568 <_malloc_r>
 2009364:	102f883a 	mov	r23,r2
 2009368:	10002926 	beq	r2,zero,2009410 <__sfvwrite_r+0x4ac>
 200936c:	81400417 	ldw	r5,16(r16)
 2009370:	b00d883a 	mov	r6,r22
 2009374:	1009883a 	mov	r4,r2
 2009378:	2005e580 	call	2005e58 <memcpy>
 200937c:	8080030b 	ldhu	r2,12(r16)
 2009380:	00fedfc4 	movi	r3,-1153
 2009384:	10c4703a 	and	r2,r2,r3
 2009388:	10802014 	ori	r2,r2,128
 200938c:	8080030d 	sth	r2,12(r16)
 2009390:	bd89883a 	add	r4,r23,r22
 2009394:	9d8fc83a 	sub	r7,r19,r22
 2009398:	85c00415 	stw	r23,16(r16)
 200939c:	84c00515 	stw	r19,20(r16)
 20093a0:	81000015 	stw	r4,0(r16)
 20093a4:	9027883a 	mov	r19,r18
 20093a8:	81c00215 	stw	r7,8(r16)
 20093ac:	902f883a 	mov	r23,r18
 20093b0:	003f3b06 	br	20090a0 <__alt_mem_mem_0+0xfcfe90a0>
 20093b4:	800b883a 	mov	r5,r16
 20093b8:	a809883a 	mov	r4,r21
 20093bc:	20048e80 	call	20048e8 <_fflush_r>
 20093c0:	103fb926 	beq	r2,zero,20092a8 <__alt_mem_mem_0+0xfcfe92a8>
 20093c4:	003f6506 	br	200915c <__alt_mem_mem_0+0xfcfe915c>
 20093c8:	a809883a 	mov	r4,r21
 20093cc:	20096900 	call	2009690 <_realloc_r>
 20093d0:	102f883a 	mov	r23,r2
 20093d4:	103fee1e 	bne	r2,zero,2009390 <__alt_mem_mem_0+0xfcfe9390>
 20093d8:	81400417 	ldw	r5,16(r16)
 20093dc:	a809883a 	mov	r4,r21
 20093e0:	2004e380 	call	2004e38 <_free_r>
 20093e4:	8080030b 	ldhu	r2,12(r16)
 20093e8:	00ffdfc4 	movi	r3,-129
 20093ec:	1884703a 	and	r2,r3,r2
 20093f0:	00c00304 	movi	r3,12
 20093f4:	a8c00015 	stw	r3,0(r21)
 20093f8:	003f5906 	br	2009160 <__alt_mem_mem_0+0xfcfe9160>
 20093fc:	94c00044 	addi	r19,r18,1
 2009400:	02000044 	movi	r8,1
 2009404:	003f6006 	br	2009188 <__alt_mem_mem_0+0xfcfe9188>
 2009408:	00bfffc4 	movi	r2,-1
 200940c:	003f0306 	br	200901c <__alt_mem_mem_0+0xfcfe901c>
 2009410:	00800304 	movi	r2,12
 2009414:	a8800015 	stw	r2,0(r21)
 2009418:	8080030b 	ldhu	r2,12(r16)
 200941c:	003f5006 	br	2009160 <__alt_mem_mem_0+0xfcfe9160>

02009420 <_isatty_r>:
 2009420:	defffd04 	addi	sp,sp,-12
 2009424:	dc000015 	stw	r16,0(sp)
 2009428:	04008134 	movhi	r16,516
 200942c:	dc400115 	stw	r17,4(sp)
 2009430:	841db504 	addi	r16,r16,30420
 2009434:	2023883a 	mov	r17,r4
 2009438:	2809883a 	mov	r4,r5
 200943c:	dfc00215 	stw	ra,8(sp)
 2009440:	80000015 	stw	zero,0(r16)
 2009444:	20127cc0 	call	20127cc <isatty>
 2009448:	00ffffc4 	movi	r3,-1
 200944c:	10c00526 	beq	r2,r3,2009464 <_isatty_r+0x44>
 2009450:	dfc00217 	ldw	ra,8(sp)
 2009454:	dc400117 	ldw	r17,4(sp)
 2009458:	dc000017 	ldw	r16,0(sp)
 200945c:	dec00304 	addi	sp,sp,12
 2009460:	f800283a 	ret
 2009464:	80c00017 	ldw	r3,0(r16)
 2009468:	183ff926 	beq	r3,zero,2009450 <__alt_mem_mem_0+0xfcfe9450>
 200946c:	88c00015 	stw	r3,0(r17)
 2009470:	003ff706 	br	2009450 <__alt_mem_mem_0+0xfcfe9450>

02009474 <_lseek_r>:
 2009474:	defffd04 	addi	sp,sp,-12
 2009478:	2805883a 	mov	r2,r5
 200947c:	dc000015 	stw	r16,0(sp)
 2009480:	04008134 	movhi	r16,516
 2009484:	dc400115 	stw	r17,4(sp)
 2009488:	300b883a 	mov	r5,r6
 200948c:	841db504 	addi	r16,r16,30420
 2009490:	2023883a 	mov	r17,r4
 2009494:	380d883a 	mov	r6,r7
 2009498:	1009883a 	mov	r4,r2
 200949c:	dfc00215 	stw	ra,8(sp)
 20094a0:	80000015 	stw	zero,0(r16)
 20094a4:	20129980 	call	2012998 <lseek>
 20094a8:	00ffffc4 	movi	r3,-1
 20094ac:	10c00526 	beq	r2,r3,20094c4 <_lseek_r+0x50>
 20094b0:	dfc00217 	ldw	ra,8(sp)
 20094b4:	dc400117 	ldw	r17,4(sp)
 20094b8:	dc000017 	ldw	r16,0(sp)
 20094bc:	dec00304 	addi	sp,sp,12
 20094c0:	f800283a 	ret
 20094c4:	80c00017 	ldw	r3,0(r16)
 20094c8:	183ff926 	beq	r3,zero,20094b0 <__alt_mem_mem_0+0xfcfe94b0>
 20094cc:	88c00015 	stw	r3,0(r17)
 20094d0:	003ff706 	br	20094b0 <__alt_mem_mem_0+0xfcfe94b0>

020094d4 <memmove>:
 20094d4:	2005883a 	mov	r2,r4
 20094d8:	29000b2e 	bgeu	r5,r4,2009508 <memmove+0x34>
 20094dc:	298f883a 	add	r7,r5,r6
 20094e0:	21c0092e 	bgeu	r4,r7,2009508 <memmove+0x34>
 20094e4:	2187883a 	add	r3,r4,r6
 20094e8:	198bc83a 	sub	r5,r3,r6
 20094ec:	30004826 	beq	r6,zero,2009610 <memmove+0x13c>
 20094f0:	39ffffc4 	addi	r7,r7,-1
 20094f4:	39000003 	ldbu	r4,0(r7)
 20094f8:	18ffffc4 	addi	r3,r3,-1
 20094fc:	19000005 	stb	r4,0(r3)
 2009500:	28fffb1e 	bne	r5,r3,20094f0 <__alt_mem_mem_0+0xfcfe94f0>
 2009504:	f800283a 	ret
 2009508:	00c003c4 	movi	r3,15
 200950c:	1980412e 	bgeu	r3,r6,2009614 <memmove+0x140>
 2009510:	2886b03a 	or	r3,r5,r2
 2009514:	18c000cc 	andi	r3,r3,3
 2009518:	1800401e 	bne	r3,zero,200961c <memmove+0x148>
 200951c:	33fffc04 	addi	r15,r6,-16
 2009520:	781ed13a 	srli	r15,r15,4
 2009524:	28c00104 	addi	r3,r5,4
 2009528:	13400104 	addi	r13,r2,4
 200952c:	781c913a 	slli	r14,r15,4
 2009530:	2b000204 	addi	r12,r5,8
 2009534:	12c00204 	addi	r11,r2,8
 2009538:	73800504 	addi	r14,r14,20
 200953c:	2a800304 	addi	r10,r5,12
 2009540:	12400304 	addi	r9,r2,12
 2009544:	2b9d883a 	add	r14,r5,r14
 2009548:	2811883a 	mov	r8,r5
 200954c:	100f883a 	mov	r7,r2
 2009550:	41000017 	ldw	r4,0(r8)
 2009554:	39c00404 	addi	r7,r7,16
 2009558:	18c00404 	addi	r3,r3,16
 200955c:	393ffc15 	stw	r4,-16(r7)
 2009560:	193ffc17 	ldw	r4,-16(r3)
 2009564:	6b400404 	addi	r13,r13,16
 2009568:	5ac00404 	addi	r11,r11,16
 200956c:	693ffc15 	stw	r4,-16(r13)
 2009570:	61000017 	ldw	r4,0(r12)
 2009574:	4a400404 	addi	r9,r9,16
 2009578:	42000404 	addi	r8,r8,16
 200957c:	593ffc15 	stw	r4,-16(r11)
 2009580:	51000017 	ldw	r4,0(r10)
 2009584:	63000404 	addi	r12,r12,16
 2009588:	52800404 	addi	r10,r10,16
 200958c:	493ffc15 	stw	r4,-16(r9)
 2009590:	1bbfef1e 	bne	r3,r14,2009550 <__alt_mem_mem_0+0xfcfe9550>
 2009594:	79000044 	addi	r4,r15,1
 2009598:	2008913a 	slli	r4,r4,4
 200959c:	328003cc 	andi	r10,r6,15
 20095a0:	02c000c4 	movi	r11,3
 20095a4:	1107883a 	add	r3,r2,r4
 20095a8:	290b883a 	add	r5,r5,r4
 20095ac:	5a801e2e 	bgeu	r11,r10,2009628 <memmove+0x154>
 20095b0:	1813883a 	mov	r9,r3
 20095b4:	2811883a 	mov	r8,r5
 20095b8:	500f883a 	mov	r7,r10
 20095bc:	41000017 	ldw	r4,0(r8)
 20095c0:	4a400104 	addi	r9,r9,4
 20095c4:	39ffff04 	addi	r7,r7,-4
 20095c8:	493fff15 	stw	r4,-4(r9)
 20095cc:	42000104 	addi	r8,r8,4
 20095d0:	59fffa36 	bltu	r11,r7,20095bc <__alt_mem_mem_0+0xfcfe95bc>
 20095d4:	513fff04 	addi	r4,r10,-4
 20095d8:	2008d0ba 	srli	r4,r4,2
 20095dc:	318000cc 	andi	r6,r6,3
 20095e0:	21000044 	addi	r4,r4,1
 20095e4:	2109883a 	add	r4,r4,r4
 20095e8:	2109883a 	add	r4,r4,r4
 20095ec:	1907883a 	add	r3,r3,r4
 20095f0:	290b883a 	add	r5,r5,r4
 20095f4:	30000b26 	beq	r6,zero,2009624 <memmove+0x150>
 20095f8:	198d883a 	add	r6,r3,r6
 20095fc:	29c00003 	ldbu	r7,0(r5)
 2009600:	18c00044 	addi	r3,r3,1
 2009604:	29400044 	addi	r5,r5,1
 2009608:	19ffffc5 	stb	r7,-1(r3)
 200960c:	19bffb1e 	bne	r3,r6,20095fc <__alt_mem_mem_0+0xfcfe95fc>
 2009610:	f800283a 	ret
 2009614:	1007883a 	mov	r3,r2
 2009618:	003ff606 	br	20095f4 <__alt_mem_mem_0+0xfcfe95f4>
 200961c:	1007883a 	mov	r3,r2
 2009620:	003ff506 	br	20095f8 <__alt_mem_mem_0+0xfcfe95f8>
 2009624:	f800283a 	ret
 2009628:	500d883a 	mov	r6,r10
 200962c:	003ff106 	br	20095f4 <__alt_mem_mem_0+0xfcfe95f4>

02009630 <_read_r>:
 2009630:	defffd04 	addi	sp,sp,-12
 2009634:	2805883a 	mov	r2,r5
 2009638:	dc000015 	stw	r16,0(sp)
 200963c:	04008134 	movhi	r16,516
 2009640:	dc400115 	stw	r17,4(sp)
 2009644:	300b883a 	mov	r5,r6
 2009648:	841db504 	addi	r16,r16,30420
 200964c:	2023883a 	mov	r17,r4
 2009650:	380d883a 	mov	r6,r7
 2009654:	1009883a 	mov	r4,r2
 2009658:	dfc00215 	stw	ra,8(sp)
 200965c:	80000015 	stw	zero,0(r16)
 2009660:	20130840 	call	2013084 <read>
 2009664:	00ffffc4 	movi	r3,-1
 2009668:	10c00526 	beq	r2,r3,2009680 <_read_r+0x50>
 200966c:	dfc00217 	ldw	ra,8(sp)
 2009670:	dc400117 	ldw	r17,4(sp)
 2009674:	dc000017 	ldw	r16,0(sp)
 2009678:	dec00304 	addi	sp,sp,12
 200967c:	f800283a 	ret
 2009680:	80c00017 	ldw	r3,0(r16)
 2009684:	183ff926 	beq	r3,zero,200966c <__alt_mem_mem_0+0xfcfe966c>
 2009688:	88c00015 	stw	r3,0(r17)
 200968c:	003ff706 	br	200966c <__alt_mem_mem_0+0xfcfe966c>

02009690 <_realloc_r>:
 2009690:	defff604 	addi	sp,sp,-40
 2009694:	dc800215 	stw	r18,8(sp)
 2009698:	dfc00915 	stw	ra,36(sp)
 200969c:	df000815 	stw	fp,32(sp)
 20096a0:	ddc00715 	stw	r23,28(sp)
 20096a4:	dd800615 	stw	r22,24(sp)
 20096a8:	dd400515 	stw	r21,20(sp)
 20096ac:	dd000415 	stw	r20,16(sp)
 20096b0:	dcc00315 	stw	r19,12(sp)
 20096b4:	dc400115 	stw	r17,4(sp)
 20096b8:	dc000015 	stw	r16,0(sp)
 20096bc:	3025883a 	mov	r18,r6
 20096c0:	2800b726 	beq	r5,zero,20099a0 <_realloc_r+0x310>
 20096c4:	282b883a 	mov	r21,r5
 20096c8:	2029883a 	mov	r20,r4
 20096cc:	200d3180 	call	200d318 <__malloc_lock>
 20096d0:	a8bfff17 	ldw	r2,-4(r21)
 20096d4:	043fff04 	movi	r16,-4
 20096d8:	90c002c4 	addi	r3,r18,11
 20096dc:	01000584 	movi	r4,22
 20096e0:	acfffe04 	addi	r19,r21,-8
 20096e4:	1420703a 	and	r16,r2,r16
 20096e8:	20c0332e 	bgeu	r4,r3,20097b8 <_realloc_r+0x128>
 20096ec:	047ffe04 	movi	r17,-8
 20096f0:	1c62703a 	and	r17,r3,r17
 20096f4:	8807883a 	mov	r3,r17
 20096f8:	88005816 	blt	r17,zero,200985c <_realloc_r+0x1cc>
 20096fc:	8c805736 	bltu	r17,r18,200985c <_realloc_r+0x1cc>
 2009700:	80c0300e 	bge	r16,r3,20097c4 <_realloc_r+0x134>
 2009704:	07008134 	movhi	fp,516
 2009708:	e70f8604 	addi	fp,fp,15896
 200970c:	e1c00217 	ldw	r7,8(fp)
 2009710:	9c09883a 	add	r4,r19,r16
 2009714:	22000117 	ldw	r8,4(r4)
 2009718:	21c06326 	beq	r4,r7,20098a8 <_realloc_r+0x218>
 200971c:	017fff84 	movi	r5,-2
 2009720:	414a703a 	and	r5,r8,r5
 2009724:	214b883a 	add	r5,r4,r5
 2009728:	29800117 	ldw	r6,4(r5)
 200972c:	3180004c 	andi	r6,r6,1
 2009730:	30003f26 	beq	r6,zero,2009830 <_realloc_r+0x1a0>
 2009734:	1080004c 	andi	r2,r2,1
 2009738:	10008326 	beq	r2,zero,2009948 <_realloc_r+0x2b8>
 200973c:	900b883a 	mov	r5,r18
 2009740:	a009883a 	mov	r4,r20
 2009744:	20055680 	call	2005568 <_malloc_r>
 2009748:	1025883a 	mov	r18,r2
 200974c:	10011e26 	beq	r2,zero,2009bc8 <_realloc_r+0x538>
 2009750:	a93fff17 	ldw	r4,-4(r21)
 2009754:	10fffe04 	addi	r3,r2,-8
 2009758:	00bfff84 	movi	r2,-2
 200975c:	2084703a 	and	r2,r4,r2
 2009760:	9885883a 	add	r2,r19,r2
 2009764:	1880ee26 	beq	r3,r2,2009b20 <_realloc_r+0x490>
 2009768:	81bfff04 	addi	r6,r16,-4
 200976c:	00800904 	movi	r2,36
 2009770:	1180b836 	bltu	r2,r6,2009a54 <_realloc_r+0x3c4>
 2009774:	00c004c4 	movi	r3,19
 2009778:	19809636 	bltu	r3,r6,20099d4 <_realloc_r+0x344>
 200977c:	9005883a 	mov	r2,r18
 2009780:	a807883a 	mov	r3,r21
 2009784:	19000017 	ldw	r4,0(r3)
 2009788:	11000015 	stw	r4,0(r2)
 200978c:	19000117 	ldw	r4,4(r3)
 2009790:	11000115 	stw	r4,4(r2)
 2009794:	18c00217 	ldw	r3,8(r3)
 2009798:	10c00215 	stw	r3,8(r2)
 200979c:	a80b883a 	mov	r5,r21
 20097a0:	a009883a 	mov	r4,r20
 20097a4:	2004e380 	call	2004e38 <_free_r>
 20097a8:	a009883a 	mov	r4,r20
 20097ac:	200d3780 	call	200d378 <__malloc_unlock>
 20097b0:	9005883a 	mov	r2,r18
 20097b4:	00001206 	br	2009800 <_realloc_r+0x170>
 20097b8:	00c00404 	movi	r3,16
 20097bc:	1823883a 	mov	r17,r3
 20097c0:	003fce06 	br	20096fc <__alt_mem_mem_0+0xfcfe96fc>
 20097c4:	a825883a 	mov	r18,r21
 20097c8:	8445c83a 	sub	r2,r16,r17
 20097cc:	00c003c4 	movi	r3,15
 20097d0:	18802636 	bltu	r3,r2,200986c <_realloc_r+0x1dc>
 20097d4:	99800117 	ldw	r6,4(r19)
 20097d8:	9c07883a 	add	r3,r19,r16
 20097dc:	3180004c 	andi	r6,r6,1
 20097e0:	3420b03a 	or	r16,r6,r16
 20097e4:	9c000115 	stw	r16,4(r19)
 20097e8:	18800117 	ldw	r2,4(r3)
 20097ec:	10800054 	ori	r2,r2,1
 20097f0:	18800115 	stw	r2,4(r3)
 20097f4:	a009883a 	mov	r4,r20
 20097f8:	200d3780 	call	200d378 <__malloc_unlock>
 20097fc:	9005883a 	mov	r2,r18
 2009800:	dfc00917 	ldw	ra,36(sp)
 2009804:	df000817 	ldw	fp,32(sp)
 2009808:	ddc00717 	ldw	r23,28(sp)
 200980c:	dd800617 	ldw	r22,24(sp)
 2009810:	dd400517 	ldw	r21,20(sp)
 2009814:	dd000417 	ldw	r20,16(sp)
 2009818:	dcc00317 	ldw	r19,12(sp)
 200981c:	dc800217 	ldw	r18,8(sp)
 2009820:	dc400117 	ldw	r17,4(sp)
 2009824:	dc000017 	ldw	r16,0(sp)
 2009828:	dec00a04 	addi	sp,sp,40
 200982c:	f800283a 	ret
 2009830:	017fff04 	movi	r5,-4
 2009834:	414a703a 	and	r5,r8,r5
 2009838:	814d883a 	add	r6,r16,r5
 200983c:	30c01f16 	blt	r6,r3,20098bc <_realloc_r+0x22c>
 2009840:	20800317 	ldw	r2,12(r4)
 2009844:	20c00217 	ldw	r3,8(r4)
 2009848:	a825883a 	mov	r18,r21
 200984c:	3021883a 	mov	r16,r6
 2009850:	18800315 	stw	r2,12(r3)
 2009854:	10c00215 	stw	r3,8(r2)
 2009858:	003fdb06 	br	20097c8 <__alt_mem_mem_0+0xfcfe97c8>
 200985c:	00800304 	movi	r2,12
 2009860:	a0800015 	stw	r2,0(r20)
 2009864:	0005883a 	mov	r2,zero
 2009868:	003fe506 	br	2009800 <__alt_mem_mem_0+0xfcfe9800>
 200986c:	98c00117 	ldw	r3,4(r19)
 2009870:	9c4b883a 	add	r5,r19,r17
 2009874:	11000054 	ori	r4,r2,1
 2009878:	18c0004c 	andi	r3,r3,1
 200987c:	1c62b03a 	or	r17,r3,r17
 2009880:	9c400115 	stw	r17,4(r19)
 2009884:	29000115 	stw	r4,4(r5)
 2009888:	2885883a 	add	r2,r5,r2
 200988c:	10c00117 	ldw	r3,4(r2)
 2009890:	29400204 	addi	r5,r5,8
 2009894:	a009883a 	mov	r4,r20
 2009898:	18c00054 	ori	r3,r3,1
 200989c:	10c00115 	stw	r3,4(r2)
 20098a0:	2004e380 	call	2004e38 <_free_r>
 20098a4:	003fd306 	br	20097f4 <__alt_mem_mem_0+0xfcfe97f4>
 20098a8:	017fff04 	movi	r5,-4
 20098ac:	414a703a 	and	r5,r8,r5
 20098b0:	89800404 	addi	r6,r17,16
 20098b4:	8151883a 	add	r8,r16,r5
 20098b8:	4180590e 	bge	r8,r6,2009a20 <_realloc_r+0x390>
 20098bc:	1080004c 	andi	r2,r2,1
 20098c0:	103f9e1e 	bne	r2,zero,200973c <__alt_mem_mem_0+0xfcfe973c>
 20098c4:	adbffe17 	ldw	r22,-8(r21)
 20098c8:	00bfff04 	movi	r2,-4
 20098cc:	9dadc83a 	sub	r22,r19,r22
 20098d0:	b1800117 	ldw	r6,4(r22)
 20098d4:	3084703a 	and	r2,r6,r2
 20098d8:	20002026 	beq	r4,zero,200995c <_realloc_r+0x2cc>
 20098dc:	80af883a 	add	r23,r16,r2
 20098e0:	b96f883a 	add	r23,r23,r5
 20098e4:	21c05f26 	beq	r4,r7,2009a64 <_realloc_r+0x3d4>
 20098e8:	b8c01c16 	blt	r23,r3,200995c <_realloc_r+0x2cc>
 20098ec:	20800317 	ldw	r2,12(r4)
 20098f0:	20c00217 	ldw	r3,8(r4)
 20098f4:	81bfff04 	addi	r6,r16,-4
 20098f8:	01000904 	movi	r4,36
 20098fc:	18800315 	stw	r2,12(r3)
 2009900:	10c00215 	stw	r3,8(r2)
 2009904:	b0c00217 	ldw	r3,8(r22)
 2009908:	b0800317 	ldw	r2,12(r22)
 200990c:	b4800204 	addi	r18,r22,8
 2009910:	18800315 	stw	r2,12(r3)
 2009914:	10c00215 	stw	r3,8(r2)
 2009918:	21801b36 	bltu	r4,r6,2009988 <_realloc_r+0x2f8>
 200991c:	008004c4 	movi	r2,19
 2009920:	1180352e 	bgeu	r2,r6,20099f8 <_realloc_r+0x368>
 2009924:	a8800017 	ldw	r2,0(r21)
 2009928:	b0800215 	stw	r2,8(r22)
 200992c:	a8800117 	ldw	r2,4(r21)
 2009930:	b0800315 	stw	r2,12(r22)
 2009934:	008006c4 	movi	r2,27
 2009938:	11807f36 	bltu	r2,r6,2009b38 <_realloc_r+0x4a8>
 200993c:	b0800404 	addi	r2,r22,16
 2009940:	ad400204 	addi	r21,r21,8
 2009944:	00002d06 	br	20099fc <_realloc_r+0x36c>
 2009948:	adbffe17 	ldw	r22,-8(r21)
 200994c:	00bfff04 	movi	r2,-4
 2009950:	9dadc83a 	sub	r22,r19,r22
 2009954:	b1000117 	ldw	r4,4(r22)
 2009958:	2084703a 	and	r2,r4,r2
 200995c:	b03f7726 	beq	r22,zero,200973c <__alt_mem_mem_0+0xfcfe973c>
 2009960:	80af883a 	add	r23,r16,r2
 2009964:	b8ff7516 	blt	r23,r3,200973c <__alt_mem_mem_0+0xfcfe973c>
 2009968:	b0800317 	ldw	r2,12(r22)
 200996c:	b0c00217 	ldw	r3,8(r22)
 2009970:	81bfff04 	addi	r6,r16,-4
 2009974:	01000904 	movi	r4,36
 2009978:	18800315 	stw	r2,12(r3)
 200997c:	10c00215 	stw	r3,8(r2)
 2009980:	b4800204 	addi	r18,r22,8
 2009984:	21bfe52e 	bgeu	r4,r6,200991c <__alt_mem_mem_0+0xfcfe991c>
 2009988:	a80b883a 	mov	r5,r21
 200998c:	9009883a 	mov	r4,r18
 2009990:	20094d40 	call	20094d4 <memmove>
 2009994:	b821883a 	mov	r16,r23
 2009998:	b027883a 	mov	r19,r22
 200999c:	003f8a06 	br	20097c8 <__alt_mem_mem_0+0xfcfe97c8>
 20099a0:	300b883a 	mov	r5,r6
 20099a4:	dfc00917 	ldw	ra,36(sp)
 20099a8:	df000817 	ldw	fp,32(sp)
 20099ac:	ddc00717 	ldw	r23,28(sp)
 20099b0:	dd800617 	ldw	r22,24(sp)
 20099b4:	dd400517 	ldw	r21,20(sp)
 20099b8:	dd000417 	ldw	r20,16(sp)
 20099bc:	dcc00317 	ldw	r19,12(sp)
 20099c0:	dc800217 	ldw	r18,8(sp)
 20099c4:	dc400117 	ldw	r17,4(sp)
 20099c8:	dc000017 	ldw	r16,0(sp)
 20099cc:	dec00a04 	addi	sp,sp,40
 20099d0:	20055681 	jmpi	2005568 <_malloc_r>
 20099d4:	a8c00017 	ldw	r3,0(r21)
 20099d8:	90c00015 	stw	r3,0(r18)
 20099dc:	a8c00117 	ldw	r3,4(r21)
 20099e0:	90c00115 	stw	r3,4(r18)
 20099e4:	00c006c4 	movi	r3,27
 20099e8:	19804536 	bltu	r3,r6,2009b00 <_realloc_r+0x470>
 20099ec:	90800204 	addi	r2,r18,8
 20099f0:	a8c00204 	addi	r3,r21,8
 20099f4:	003f6306 	br	2009784 <__alt_mem_mem_0+0xfcfe9784>
 20099f8:	9005883a 	mov	r2,r18
 20099fc:	a8c00017 	ldw	r3,0(r21)
 2009a00:	b821883a 	mov	r16,r23
 2009a04:	b027883a 	mov	r19,r22
 2009a08:	10c00015 	stw	r3,0(r2)
 2009a0c:	a8c00117 	ldw	r3,4(r21)
 2009a10:	10c00115 	stw	r3,4(r2)
 2009a14:	a8c00217 	ldw	r3,8(r21)
 2009a18:	10c00215 	stw	r3,8(r2)
 2009a1c:	003f6a06 	br	20097c8 <__alt_mem_mem_0+0xfcfe97c8>
 2009a20:	9c67883a 	add	r19,r19,r17
 2009a24:	4445c83a 	sub	r2,r8,r17
 2009a28:	e4c00215 	stw	r19,8(fp)
 2009a2c:	10800054 	ori	r2,r2,1
 2009a30:	98800115 	stw	r2,4(r19)
 2009a34:	a8bfff17 	ldw	r2,-4(r21)
 2009a38:	a009883a 	mov	r4,r20
 2009a3c:	1080004c 	andi	r2,r2,1
 2009a40:	1462b03a 	or	r17,r2,r17
 2009a44:	ac7fff15 	stw	r17,-4(r21)
 2009a48:	200d3780 	call	200d378 <__malloc_unlock>
 2009a4c:	a805883a 	mov	r2,r21
 2009a50:	003f6b06 	br	2009800 <__alt_mem_mem_0+0xfcfe9800>
 2009a54:	a80b883a 	mov	r5,r21
 2009a58:	9009883a 	mov	r4,r18
 2009a5c:	20094d40 	call	20094d4 <memmove>
 2009a60:	003f4e06 	br	200979c <__alt_mem_mem_0+0xfcfe979c>
 2009a64:	89000404 	addi	r4,r17,16
 2009a68:	b93fbc16 	blt	r23,r4,200995c <__alt_mem_mem_0+0xfcfe995c>
 2009a6c:	b0800317 	ldw	r2,12(r22)
 2009a70:	b0c00217 	ldw	r3,8(r22)
 2009a74:	81bfff04 	addi	r6,r16,-4
 2009a78:	01000904 	movi	r4,36
 2009a7c:	18800315 	stw	r2,12(r3)
 2009a80:	10c00215 	stw	r3,8(r2)
 2009a84:	b4800204 	addi	r18,r22,8
 2009a88:	21804336 	bltu	r4,r6,2009b98 <_realloc_r+0x508>
 2009a8c:	008004c4 	movi	r2,19
 2009a90:	11803f2e 	bgeu	r2,r6,2009b90 <_realloc_r+0x500>
 2009a94:	a8800017 	ldw	r2,0(r21)
 2009a98:	b0800215 	stw	r2,8(r22)
 2009a9c:	a8800117 	ldw	r2,4(r21)
 2009aa0:	b0800315 	stw	r2,12(r22)
 2009aa4:	008006c4 	movi	r2,27
 2009aa8:	11803f36 	bltu	r2,r6,2009ba8 <_realloc_r+0x518>
 2009aac:	b0800404 	addi	r2,r22,16
 2009ab0:	ad400204 	addi	r21,r21,8
 2009ab4:	a8c00017 	ldw	r3,0(r21)
 2009ab8:	10c00015 	stw	r3,0(r2)
 2009abc:	a8c00117 	ldw	r3,4(r21)
 2009ac0:	10c00115 	stw	r3,4(r2)
 2009ac4:	a8c00217 	ldw	r3,8(r21)
 2009ac8:	10c00215 	stw	r3,8(r2)
 2009acc:	b447883a 	add	r3,r22,r17
 2009ad0:	bc45c83a 	sub	r2,r23,r17
 2009ad4:	e0c00215 	stw	r3,8(fp)
 2009ad8:	10800054 	ori	r2,r2,1
 2009adc:	18800115 	stw	r2,4(r3)
 2009ae0:	b0800117 	ldw	r2,4(r22)
 2009ae4:	a009883a 	mov	r4,r20
 2009ae8:	1080004c 	andi	r2,r2,1
 2009aec:	1462b03a 	or	r17,r2,r17
 2009af0:	b4400115 	stw	r17,4(r22)
 2009af4:	200d3780 	call	200d378 <__malloc_unlock>
 2009af8:	9005883a 	mov	r2,r18
 2009afc:	003f4006 	br	2009800 <__alt_mem_mem_0+0xfcfe9800>
 2009b00:	a8c00217 	ldw	r3,8(r21)
 2009b04:	90c00215 	stw	r3,8(r18)
 2009b08:	a8c00317 	ldw	r3,12(r21)
 2009b0c:	90c00315 	stw	r3,12(r18)
 2009b10:	30801126 	beq	r6,r2,2009b58 <_realloc_r+0x4c8>
 2009b14:	90800404 	addi	r2,r18,16
 2009b18:	a8c00404 	addi	r3,r21,16
 2009b1c:	003f1906 	br	2009784 <__alt_mem_mem_0+0xfcfe9784>
 2009b20:	90ffff17 	ldw	r3,-4(r18)
 2009b24:	00bfff04 	movi	r2,-4
 2009b28:	a825883a 	mov	r18,r21
 2009b2c:	1884703a 	and	r2,r3,r2
 2009b30:	80a1883a 	add	r16,r16,r2
 2009b34:	003f2406 	br	20097c8 <__alt_mem_mem_0+0xfcfe97c8>
 2009b38:	a8800217 	ldw	r2,8(r21)
 2009b3c:	b0800415 	stw	r2,16(r22)
 2009b40:	a8800317 	ldw	r2,12(r21)
 2009b44:	b0800515 	stw	r2,20(r22)
 2009b48:	31000a26 	beq	r6,r4,2009b74 <_realloc_r+0x4e4>
 2009b4c:	b0800604 	addi	r2,r22,24
 2009b50:	ad400404 	addi	r21,r21,16
 2009b54:	003fa906 	br	20099fc <__alt_mem_mem_0+0xfcfe99fc>
 2009b58:	a9000417 	ldw	r4,16(r21)
 2009b5c:	90800604 	addi	r2,r18,24
 2009b60:	a8c00604 	addi	r3,r21,24
 2009b64:	91000415 	stw	r4,16(r18)
 2009b68:	a9000517 	ldw	r4,20(r21)
 2009b6c:	91000515 	stw	r4,20(r18)
 2009b70:	003f0406 	br	2009784 <__alt_mem_mem_0+0xfcfe9784>
 2009b74:	a8c00417 	ldw	r3,16(r21)
 2009b78:	ad400604 	addi	r21,r21,24
 2009b7c:	b0800804 	addi	r2,r22,32
 2009b80:	b0c00615 	stw	r3,24(r22)
 2009b84:	a8ffff17 	ldw	r3,-4(r21)
 2009b88:	b0c00715 	stw	r3,28(r22)
 2009b8c:	003f9b06 	br	20099fc <__alt_mem_mem_0+0xfcfe99fc>
 2009b90:	9005883a 	mov	r2,r18
 2009b94:	003fc706 	br	2009ab4 <__alt_mem_mem_0+0xfcfe9ab4>
 2009b98:	a80b883a 	mov	r5,r21
 2009b9c:	9009883a 	mov	r4,r18
 2009ba0:	20094d40 	call	20094d4 <memmove>
 2009ba4:	003fc906 	br	2009acc <__alt_mem_mem_0+0xfcfe9acc>
 2009ba8:	a8800217 	ldw	r2,8(r21)
 2009bac:	b0800415 	stw	r2,16(r22)
 2009bb0:	a8800317 	ldw	r2,12(r21)
 2009bb4:	b0800515 	stw	r2,20(r22)
 2009bb8:	31000726 	beq	r6,r4,2009bd8 <_realloc_r+0x548>
 2009bbc:	b0800604 	addi	r2,r22,24
 2009bc0:	ad400404 	addi	r21,r21,16
 2009bc4:	003fbb06 	br	2009ab4 <__alt_mem_mem_0+0xfcfe9ab4>
 2009bc8:	a009883a 	mov	r4,r20
 2009bcc:	200d3780 	call	200d378 <__malloc_unlock>
 2009bd0:	0005883a 	mov	r2,zero
 2009bd4:	003f0a06 	br	2009800 <__alt_mem_mem_0+0xfcfe9800>
 2009bd8:	a8c00417 	ldw	r3,16(r21)
 2009bdc:	ad400604 	addi	r21,r21,24
 2009be0:	b0800804 	addi	r2,r22,32
 2009be4:	b0c00615 	stw	r3,24(r22)
 2009be8:	a8ffff17 	ldw	r3,-4(r21)
 2009bec:	b0c00715 	stw	r3,28(r22)
 2009bf0:	003fb006 	br	2009ab4 <__alt_mem_mem_0+0xfcfe9ab4>

02009bf4 <__swbuf_r>:
 2009bf4:	defffb04 	addi	sp,sp,-20
 2009bf8:	dcc00315 	stw	r19,12(sp)
 2009bfc:	dc800215 	stw	r18,8(sp)
 2009c00:	dc000015 	stw	r16,0(sp)
 2009c04:	dfc00415 	stw	ra,16(sp)
 2009c08:	dc400115 	stw	r17,4(sp)
 2009c0c:	2025883a 	mov	r18,r4
 2009c10:	2827883a 	mov	r19,r5
 2009c14:	3021883a 	mov	r16,r6
 2009c18:	20000226 	beq	r4,zero,2009c24 <__swbuf_r+0x30>
 2009c1c:	20800e17 	ldw	r2,56(r4)
 2009c20:	10004226 	beq	r2,zero,2009d2c <__swbuf_r+0x138>
 2009c24:	80800617 	ldw	r2,24(r16)
 2009c28:	8100030b 	ldhu	r4,12(r16)
 2009c2c:	80800215 	stw	r2,8(r16)
 2009c30:	2080020c 	andi	r2,r4,8
 2009c34:	10003626 	beq	r2,zero,2009d10 <__swbuf_r+0x11c>
 2009c38:	80c00417 	ldw	r3,16(r16)
 2009c3c:	18003426 	beq	r3,zero,2009d10 <__swbuf_r+0x11c>
 2009c40:	2088000c 	andi	r2,r4,8192
 2009c44:	9c403fcc 	andi	r17,r19,255
 2009c48:	10001a26 	beq	r2,zero,2009cb4 <__swbuf_r+0xc0>
 2009c4c:	80800017 	ldw	r2,0(r16)
 2009c50:	81000517 	ldw	r4,20(r16)
 2009c54:	10c7c83a 	sub	r3,r2,r3
 2009c58:	1900200e 	bge	r3,r4,2009cdc <__swbuf_r+0xe8>
 2009c5c:	18c00044 	addi	r3,r3,1
 2009c60:	81000217 	ldw	r4,8(r16)
 2009c64:	11400044 	addi	r5,r2,1
 2009c68:	81400015 	stw	r5,0(r16)
 2009c6c:	213fffc4 	addi	r4,r4,-1
 2009c70:	81000215 	stw	r4,8(r16)
 2009c74:	14c00005 	stb	r19,0(r2)
 2009c78:	80800517 	ldw	r2,20(r16)
 2009c7c:	10c01e26 	beq	r2,r3,2009cf8 <__swbuf_r+0x104>
 2009c80:	8080030b 	ldhu	r2,12(r16)
 2009c84:	1080004c 	andi	r2,r2,1
 2009c88:	10000226 	beq	r2,zero,2009c94 <__swbuf_r+0xa0>
 2009c8c:	00800284 	movi	r2,10
 2009c90:	88801926 	beq	r17,r2,2009cf8 <__swbuf_r+0x104>
 2009c94:	8805883a 	mov	r2,r17
 2009c98:	dfc00417 	ldw	ra,16(sp)
 2009c9c:	dcc00317 	ldw	r19,12(sp)
 2009ca0:	dc800217 	ldw	r18,8(sp)
 2009ca4:	dc400117 	ldw	r17,4(sp)
 2009ca8:	dc000017 	ldw	r16,0(sp)
 2009cac:	dec00504 	addi	sp,sp,20
 2009cb0:	f800283a 	ret
 2009cb4:	81401917 	ldw	r5,100(r16)
 2009cb8:	00b7ffc4 	movi	r2,-8193
 2009cbc:	21080014 	ori	r4,r4,8192
 2009cc0:	2884703a 	and	r2,r5,r2
 2009cc4:	80801915 	stw	r2,100(r16)
 2009cc8:	80800017 	ldw	r2,0(r16)
 2009ccc:	8100030d 	sth	r4,12(r16)
 2009cd0:	81000517 	ldw	r4,20(r16)
 2009cd4:	10c7c83a 	sub	r3,r2,r3
 2009cd8:	193fe016 	blt	r3,r4,2009c5c <__alt_mem_mem_0+0xfcfe9c5c>
 2009cdc:	800b883a 	mov	r5,r16
 2009ce0:	9009883a 	mov	r4,r18
 2009ce4:	20048e80 	call	20048e8 <_fflush_r>
 2009ce8:	1000071e 	bne	r2,zero,2009d08 <__swbuf_r+0x114>
 2009cec:	80800017 	ldw	r2,0(r16)
 2009cf0:	00c00044 	movi	r3,1
 2009cf4:	003fda06 	br	2009c60 <__alt_mem_mem_0+0xfcfe9c60>
 2009cf8:	800b883a 	mov	r5,r16
 2009cfc:	9009883a 	mov	r4,r18
 2009d00:	20048e80 	call	20048e8 <_fflush_r>
 2009d04:	103fe326 	beq	r2,zero,2009c94 <__alt_mem_mem_0+0xfcfe9c94>
 2009d08:	00bfffc4 	movi	r2,-1
 2009d0c:	003fe206 	br	2009c98 <__alt_mem_mem_0+0xfcfe9c98>
 2009d10:	800b883a 	mov	r5,r16
 2009d14:	9009883a 	mov	r4,r18
 2009d18:	2002cf00 	call	2002cf0 <__swsetup_r>
 2009d1c:	103ffa1e 	bne	r2,zero,2009d08 <__alt_mem_mem_0+0xfcfe9d08>
 2009d20:	8100030b 	ldhu	r4,12(r16)
 2009d24:	80c00417 	ldw	r3,16(r16)
 2009d28:	003fc506 	br	2009c40 <__alt_mem_mem_0+0xfcfe9c40>
 2009d2c:	2004cc40 	call	2004cc4 <__sinit>
 2009d30:	003fbc06 	br	2009c24 <__alt_mem_mem_0+0xfcfe9c24>

02009d34 <__swbuf>:
 2009d34:	00808134 	movhi	r2,516
 2009d38:	1095e804 	addi	r2,r2,22432
 2009d3c:	280d883a 	mov	r6,r5
 2009d40:	200b883a 	mov	r5,r4
 2009d44:	11000017 	ldw	r4,0(r2)
 2009d48:	2009bf41 	jmpi	2009bf4 <__swbuf_r>

02009d4c <_wcrtomb_r>:
 2009d4c:	defff604 	addi	sp,sp,-40
 2009d50:	00808134 	movhi	r2,516
 2009d54:	dc800815 	stw	r18,32(sp)
 2009d58:	dc400715 	stw	r17,28(sp)
 2009d5c:	dc000615 	stw	r16,24(sp)
 2009d60:	1095ec04 	addi	r2,r2,22448
 2009d64:	dfc00915 	stw	ra,36(sp)
 2009d68:	2021883a 	mov	r16,r4
 2009d6c:	3823883a 	mov	r17,r7
 2009d70:	14800017 	ldw	r18,0(r2)
 2009d74:	28001426 	beq	r5,zero,2009dc8 <_wcrtomb_r+0x7c>
 2009d78:	d9400415 	stw	r5,16(sp)
 2009d7c:	d9800515 	stw	r6,20(sp)
 2009d80:	200534c0 	call	200534c <__locale_charset>
 2009d84:	d9800517 	ldw	r6,20(sp)
 2009d88:	d9400417 	ldw	r5,16(sp)
 2009d8c:	100f883a 	mov	r7,r2
 2009d90:	dc400015 	stw	r17,0(sp)
 2009d94:	8009883a 	mov	r4,r16
 2009d98:	903ee83a 	callr	r18
 2009d9c:	00ffffc4 	movi	r3,-1
 2009da0:	10c0031e 	bne	r2,r3,2009db0 <_wcrtomb_r+0x64>
 2009da4:	88000015 	stw	zero,0(r17)
 2009da8:	00c02284 	movi	r3,138
 2009dac:	80c00015 	stw	r3,0(r16)
 2009db0:	dfc00917 	ldw	ra,36(sp)
 2009db4:	dc800817 	ldw	r18,32(sp)
 2009db8:	dc400717 	ldw	r17,28(sp)
 2009dbc:	dc000617 	ldw	r16,24(sp)
 2009dc0:	dec00a04 	addi	sp,sp,40
 2009dc4:	f800283a 	ret
 2009dc8:	200534c0 	call	200534c <__locale_charset>
 2009dcc:	100f883a 	mov	r7,r2
 2009dd0:	dc400015 	stw	r17,0(sp)
 2009dd4:	000d883a 	mov	r6,zero
 2009dd8:	d9400104 	addi	r5,sp,4
 2009ddc:	8009883a 	mov	r4,r16
 2009de0:	903ee83a 	callr	r18
 2009de4:	003fed06 	br	2009d9c <__alt_mem_mem_0+0xfcfe9d9c>

02009de8 <wcrtomb>:
 2009de8:	defff604 	addi	sp,sp,-40
 2009dec:	00808134 	movhi	r2,516
 2009df0:	dc800615 	stw	r18,24(sp)
 2009df4:	dc400515 	stw	r17,20(sp)
 2009df8:	1095e804 	addi	r2,r2,22432
 2009dfc:	dfc00915 	stw	ra,36(sp)
 2009e00:	dd000815 	stw	r20,32(sp)
 2009e04:	dcc00715 	stw	r19,28(sp)
 2009e08:	dc000415 	stw	r16,16(sp)
 2009e0c:	3025883a 	mov	r18,r6
 2009e10:	14400017 	ldw	r17,0(r2)
 2009e14:	20001926 	beq	r4,zero,2009e7c <wcrtomb+0x94>
 2009e18:	00808134 	movhi	r2,516
 2009e1c:	1095ec04 	addi	r2,r2,22448
 2009e20:	15000017 	ldw	r20,0(r2)
 2009e24:	2021883a 	mov	r16,r4
 2009e28:	2827883a 	mov	r19,r5
 2009e2c:	200534c0 	call	200534c <__locale_charset>
 2009e30:	100f883a 	mov	r7,r2
 2009e34:	dc800015 	stw	r18,0(sp)
 2009e38:	980d883a 	mov	r6,r19
 2009e3c:	800b883a 	mov	r5,r16
 2009e40:	8809883a 	mov	r4,r17
 2009e44:	a03ee83a 	callr	r20
 2009e48:	00ffffc4 	movi	r3,-1
 2009e4c:	10c0031e 	bne	r2,r3,2009e5c <wcrtomb+0x74>
 2009e50:	90000015 	stw	zero,0(r18)
 2009e54:	00c02284 	movi	r3,138
 2009e58:	88c00015 	stw	r3,0(r17)
 2009e5c:	dfc00917 	ldw	ra,36(sp)
 2009e60:	dd000817 	ldw	r20,32(sp)
 2009e64:	dcc00717 	ldw	r19,28(sp)
 2009e68:	dc800617 	ldw	r18,24(sp)
 2009e6c:	dc400517 	ldw	r17,20(sp)
 2009e70:	dc000417 	ldw	r16,16(sp)
 2009e74:	dec00a04 	addi	sp,sp,40
 2009e78:	f800283a 	ret
 2009e7c:	00808134 	movhi	r2,516
 2009e80:	1095ec04 	addi	r2,r2,22448
 2009e84:	14000017 	ldw	r16,0(r2)
 2009e88:	200534c0 	call	200534c <__locale_charset>
 2009e8c:	100f883a 	mov	r7,r2
 2009e90:	dc800015 	stw	r18,0(sp)
 2009e94:	000d883a 	mov	r6,zero
 2009e98:	d9400104 	addi	r5,sp,4
 2009e9c:	8809883a 	mov	r4,r17
 2009ea0:	803ee83a 	callr	r16
 2009ea4:	003fe806 	br	2009e48 <__alt_mem_mem_0+0xfcfe9e48>

02009ea8 <__ascii_wctomb>:
 2009ea8:	28000526 	beq	r5,zero,2009ec0 <__ascii_wctomb+0x18>
 2009eac:	00803fc4 	movi	r2,255
 2009eb0:	11800536 	bltu	r2,r6,2009ec8 <__ascii_wctomb+0x20>
 2009eb4:	29800005 	stb	r6,0(r5)
 2009eb8:	00800044 	movi	r2,1
 2009ebc:	f800283a 	ret
 2009ec0:	0005883a 	mov	r2,zero
 2009ec4:	f800283a 	ret
 2009ec8:	00802284 	movi	r2,138
 2009ecc:	20800015 	stw	r2,0(r4)
 2009ed0:	00bfffc4 	movi	r2,-1
 2009ed4:	f800283a 	ret

02009ed8 <_wctomb_r>:
 2009ed8:	00808134 	movhi	r2,516
 2009edc:	defff904 	addi	sp,sp,-28
 2009ee0:	1095ec04 	addi	r2,r2,22448
 2009ee4:	dfc00615 	stw	ra,24(sp)
 2009ee8:	dc400515 	stw	r17,20(sp)
 2009eec:	dc000415 	stw	r16,16(sp)
 2009ef0:	3823883a 	mov	r17,r7
 2009ef4:	14000017 	ldw	r16,0(r2)
 2009ef8:	d9000115 	stw	r4,4(sp)
 2009efc:	d9400215 	stw	r5,8(sp)
 2009f00:	d9800315 	stw	r6,12(sp)
 2009f04:	200534c0 	call	200534c <__locale_charset>
 2009f08:	d9800317 	ldw	r6,12(sp)
 2009f0c:	d9400217 	ldw	r5,8(sp)
 2009f10:	d9000117 	ldw	r4,4(sp)
 2009f14:	100f883a 	mov	r7,r2
 2009f18:	dc400015 	stw	r17,0(sp)
 2009f1c:	803ee83a 	callr	r16
 2009f20:	dfc00617 	ldw	ra,24(sp)
 2009f24:	dc400517 	ldw	r17,20(sp)
 2009f28:	dc000417 	ldw	r16,16(sp)
 2009f2c:	dec00704 	addi	sp,sp,28
 2009f30:	f800283a 	ret

02009f34 <__udivdi3>:
 2009f34:	defff504 	addi	sp,sp,-44
 2009f38:	dcc00415 	stw	r19,16(sp)
 2009f3c:	dc000115 	stw	r16,4(sp)
 2009f40:	dfc00a15 	stw	ra,40(sp)
 2009f44:	df000915 	stw	fp,36(sp)
 2009f48:	ddc00815 	stw	r23,32(sp)
 2009f4c:	dd800715 	stw	r22,28(sp)
 2009f50:	dd400615 	stw	r21,24(sp)
 2009f54:	dd000515 	stw	r20,20(sp)
 2009f58:	dc800315 	stw	r18,12(sp)
 2009f5c:	dc400215 	stw	r17,8(sp)
 2009f60:	2027883a 	mov	r19,r4
 2009f64:	2821883a 	mov	r16,r5
 2009f68:	3800411e 	bne	r7,zero,200a070 <__udivdi3+0x13c>
 2009f6c:	3023883a 	mov	r17,r6
 2009f70:	2025883a 	mov	r18,r4
 2009f74:	2980522e 	bgeu	r5,r6,200a0c0 <__udivdi3+0x18c>
 2009f78:	00bfffd4 	movui	r2,65535
 2009f7c:	282d883a 	mov	r22,r5
 2009f80:	1180a836 	bltu	r2,r6,200a224 <__udivdi3+0x2f0>
 2009f84:	00803fc4 	movi	r2,255
 2009f88:	1185803a 	cmpltu	r2,r2,r6
 2009f8c:	100490fa 	slli	r2,r2,3
 2009f90:	3086d83a 	srl	r3,r6,r2
 2009f94:	01008134 	movhi	r4,516
 2009f98:	2103e204 	addi	r4,r4,3976
 2009f9c:	20c7883a 	add	r3,r4,r3
 2009fa0:	18c00003 	ldbu	r3,0(r3)
 2009fa4:	1885883a 	add	r2,r3,r2
 2009fa8:	00c00804 	movi	r3,32
 2009fac:	1887c83a 	sub	r3,r3,r2
 2009fb0:	18000526 	beq	r3,zero,2009fc8 <__udivdi3+0x94>
 2009fb4:	80e0983a 	sll	r16,r16,r3
 2009fb8:	9884d83a 	srl	r2,r19,r2
 2009fbc:	30e2983a 	sll	r17,r6,r3
 2009fc0:	98e4983a 	sll	r18,r19,r3
 2009fc4:	142cb03a 	or	r22,r2,r16
 2009fc8:	882ad43a 	srli	r21,r17,16
 2009fcc:	b009883a 	mov	r4,r22
 2009fd0:	8d3fffcc 	andi	r20,r17,65535
 2009fd4:	a80b883a 	mov	r5,r21
 2009fd8:	200ab400 	call	200ab40 <__umodsi3>
 2009fdc:	b009883a 	mov	r4,r22
 2009fe0:	a80b883a 	mov	r5,r21
 2009fe4:	1027883a 	mov	r19,r2
 2009fe8:	200aadc0 	call	200aadc <__udivsi3>
 2009fec:	102d883a 	mov	r22,r2
 2009ff0:	9826943a 	slli	r19,r19,16
 2009ff4:	9004d43a 	srli	r2,r18,16
 2009ff8:	a5a1383a 	mul	r16,r20,r22
 2009ffc:	14c4b03a 	or	r2,r2,r19
 200a000:	1400052e 	bgeu	r2,r16,200a018 <__udivdi3+0xe4>
 200a004:	1445883a 	add	r2,r2,r17
 200a008:	b0ffffc4 	addi	r3,r22,-1
 200a00c:	14400136 	bltu	r2,r17,200a014 <__udivdi3+0xe0>
 200a010:	14012336 	bltu	r2,r16,200a4a0 <__udivdi3+0x56c>
 200a014:	182d883a 	mov	r22,r3
 200a018:	1421c83a 	sub	r16,r2,r16
 200a01c:	a80b883a 	mov	r5,r21
 200a020:	8009883a 	mov	r4,r16
 200a024:	200ab400 	call	200ab40 <__umodsi3>
 200a028:	1027883a 	mov	r19,r2
 200a02c:	a80b883a 	mov	r5,r21
 200a030:	8009883a 	mov	r4,r16
 200a034:	200aadc0 	call	200aadc <__udivsi3>
 200a038:	9826943a 	slli	r19,r19,16
 200a03c:	a0a9383a 	mul	r20,r20,r2
 200a040:	94bfffcc 	andi	r18,r18,65535
 200a044:	94e4b03a 	or	r18,r18,r19
 200a048:	9500052e 	bgeu	r18,r20,200a060 <__udivdi3+0x12c>
 200a04c:	8ca5883a 	add	r18,r17,r18
 200a050:	10ffffc4 	addi	r3,r2,-1
 200a054:	9440f136 	bltu	r18,r17,200a41c <__udivdi3+0x4e8>
 200a058:	9500f02e 	bgeu	r18,r20,200a41c <__udivdi3+0x4e8>
 200a05c:	10bfff84 	addi	r2,r2,-2
 200a060:	b00c943a 	slli	r6,r22,16
 200a064:	0007883a 	mov	r3,zero
 200a068:	3084b03a 	or	r2,r6,r2
 200a06c:	00005906 	br	200a1d4 <__udivdi3+0x2a0>
 200a070:	29c05636 	bltu	r5,r7,200a1cc <__udivdi3+0x298>
 200a074:	00bfffd4 	movui	r2,65535
 200a078:	11c0622e 	bgeu	r2,r7,200a204 <__udivdi3+0x2d0>
 200a07c:	00804034 	movhi	r2,256
 200a080:	10bfffc4 	addi	r2,r2,-1
 200a084:	11c0ee36 	bltu	r2,r7,200a440 <__udivdi3+0x50c>
 200a088:	00800404 	movi	r2,16
 200a08c:	3886d83a 	srl	r3,r7,r2
 200a090:	01008134 	movhi	r4,516
 200a094:	2103e204 	addi	r4,r4,3976
 200a098:	20c7883a 	add	r3,r4,r3
 200a09c:	18c00003 	ldbu	r3,0(r3)
 200a0a0:	05400804 	movi	r21,32
 200a0a4:	1885883a 	add	r2,r3,r2
 200a0a8:	a8abc83a 	sub	r21,r21,r2
 200a0ac:	a800621e 	bne	r21,zero,200a238 <__udivdi3+0x304>
 200a0b0:	3c00e936 	bltu	r7,r16,200a458 <__udivdi3+0x524>
 200a0b4:	9985403a 	cmpgeu	r2,r19,r6
 200a0b8:	0007883a 	mov	r3,zero
 200a0bc:	00004506 	br	200a1d4 <__udivdi3+0x2a0>
 200a0c0:	3000041e 	bne	r6,zero,200a0d4 <__udivdi3+0x1a0>
 200a0c4:	000b883a 	mov	r5,zero
 200a0c8:	01000044 	movi	r4,1
 200a0cc:	200aadc0 	call	200aadc <__udivsi3>
 200a0d0:	1023883a 	mov	r17,r2
 200a0d4:	00bfffd4 	movui	r2,65535
 200a0d8:	14404e2e 	bgeu	r2,r17,200a214 <__udivdi3+0x2e0>
 200a0dc:	00804034 	movhi	r2,256
 200a0e0:	10bfffc4 	addi	r2,r2,-1
 200a0e4:	1440d836 	bltu	r2,r17,200a448 <__udivdi3+0x514>
 200a0e8:	00800404 	movi	r2,16
 200a0ec:	8886d83a 	srl	r3,r17,r2
 200a0f0:	01008134 	movhi	r4,516
 200a0f4:	2103e204 	addi	r4,r4,3976
 200a0f8:	20c7883a 	add	r3,r4,r3
 200a0fc:	18c00003 	ldbu	r3,0(r3)
 200a100:	1885883a 	add	r2,r3,r2
 200a104:	00c00804 	movi	r3,32
 200a108:	1887c83a 	sub	r3,r3,r2
 200a10c:	18008f1e 	bne	r3,zero,200a34c <__udivdi3+0x418>
 200a110:	882ad43a 	srli	r21,r17,16
 200a114:	8461c83a 	sub	r16,r16,r17
 200a118:	8d3fffcc 	andi	r20,r17,65535
 200a11c:	00c00044 	movi	r3,1
 200a120:	8009883a 	mov	r4,r16
 200a124:	a80b883a 	mov	r5,r21
 200a128:	d8c00015 	stw	r3,0(sp)
 200a12c:	200ab400 	call	200ab40 <__umodsi3>
 200a130:	8009883a 	mov	r4,r16
 200a134:	a80b883a 	mov	r5,r21
 200a138:	1027883a 	mov	r19,r2
 200a13c:	200aadc0 	call	200aadc <__udivsi3>
 200a140:	9826943a 	slli	r19,r19,16
 200a144:	9008d43a 	srli	r4,r18,16
 200a148:	1521383a 	mul	r16,r2,r20
 200a14c:	102d883a 	mov	r22,r2
 200a150:	24c8b03a 	or	r4,r4,r19
 200a154:	d8c00017 	ldw	r3,0(sp)
 200a158:	2400052e 	bgeu	r4,r16,200a170 <__udivdi3+0x23c>
 200a15c:	2449883a 	add	r4,r4,r17
 200a160:	b0bfffc4 	addi	r2,r22,-1
 200a164:	24400136 	bltu	r4,r17,200a16c <__udivdi3+0x238>
 200a168:	2400ca36 	bltu	r4,r16,200a494 <__udivdi3+0x560>
 200a16c:	102d883a 	mov	r22,r2
 200a170:	2421c83a 	sub	r16,r4,r16
 200a174:	a80b883a 	mov	r5,r21
 200a178:	8009883a 	mov	r4,r16
 200a17c:	d8c00015 	stw	r3,0(sp)
 200a180:	200ab400 	call	200ab40 <__umodsi3>
 200a184:	1027883a 	mov	r19,r2
 200a188:	a80b883a 	mov	r5,r21
 200a18c:	8009883a 	mov	r4,r16
 200a190:	200aadc0 	call	200aadc <__udivsi3>
 200a194:	9826943a 	slli	r19,r19,16
 200a198:	1529383a 	mul	r20,r2,r20
 200a19c:	94bfffcc 	andi	r18,r18,65535
 200a1a0:	94e4b03a 	or	r18,r18,r19
 200a1a4:	d8c00017 	ldw	r3,0(sp)
 200a1a8:	9500052e 	bgeu	r18,r20,200a1c0 <__udivdi3+0x28c>
 200a1ac:	8ca5883a 	add	r18,r17,r18
 200a1b0:	113fffc4 	addi	r4,r2,-1
 200a1b4:	94409736 	bltu	r18,r17,200a414 <__udivdi3+0x4e0>
 200a1b8:	9500962e 	bgeu	r18,r20,200a414 <__udivdi3+0x4e0>
 200a1bc:	10bfff84 	addi	r2,r2,-2
 200a1c0:	b00c943a 	slli	r6,r22,16
 200a1c4:	3084b03a 	or	r2,r6,r2
 200a1c8:	00000206 	br	200a1d4 <__udivdi3+0x2a0>
 200a1cc:	0007883a 	mov	r3,zero
 200a1d0:	0005883a 	mov	r2,zero
 200a1d4:	dfc00a17 	ldw	ra,40(sp)
 200a1d8:	df000917 	ldw	fp,36(sp)
 200a1dc:	ddc00817 	ldw	r23,32(sp)
 200a1e0:	dd800717 	ldw	r22,28(sp)
 200a1e4:	dd400617 	ldw	r21,24(sp)
 200a1e8:	dd000517 	ldw	r20,20(sp)
 200a1ec:	dcc00417 	ldw	r19,16(sp)
 200a1f0:	dc800317 	ldw	r18,12(sp)
 200a1f4:	dc400217 	ldw	r17,8(sp)
 200a1f8:	dc000117 	ldw	r16,4(sp)
 200a1fc:	dec00b04 	addi	sp,sp,44
 200a200:	f800283a 	ret
 200a204:	00803fc4 	movi	r2,255
 200a208:	11c5803a 	cmpltu	r2,r2,r7
 200a20c:	100490fa 	slli	r2,r2,3
 200a210:	003f9e06 	br	200a08c <__alt_mem_mem_0+0xfcfea08c>
 200a214:	00803fc4 	movi	r2,255
 200a218:	1445803a 	cmpltu	r2,r2,r17
 200a21c:	100490fa 	slli	r2,r2,3
 200a220:	003fb206 	br	200a0ec <__alt_mem_mem_0+0xfcfea0ec>
 200a224:	00804034 	movhi	r2,256
 200a228:	10bfffc4 	addi	r2,r2,-1
 200a22c:	11808836 	bltu	r2,r6,200a450 <__udivdi3+0x51c>
 200a230:	00800404 	movi	r2,16
 200a234:	003f5606 	br	2009f90 <__alt_mem_mem_0+0xfcfe9f90>
 200a238:	30aed83a 	srl	r23,r6,r2
 200a23c:	3d4e983a 	sll	r7,r7,r21
 200a240:	80acd83a 	srl	r22,r16,r2
 200a244:	9884d83a 	srl	r2,r19,r2
 200a248:	3deeb03a 	or	r23,r7,r23
 200a24c:	b824d43a 	srli	r18,r23,16
 200a250:	8560983a 	sll	r16,r16,r21
 200a254:	b009883a 	mov	r4,r22
 200a258:	900b883a 	mov	r5,r18
 200a25c:	3568983a 	sll	r20,r6,r21
 200a260:	1420b03a 	or	r16,r2,r16
 200a264:	200ab400 	call	200ab40 <__umodsi3>
 200a268:	b009883a 	mov	r4,r22
 200a26c:	900b883a 	mov	r5,r18
 200a270:	1023883a 	mov	r17,r2
 200a274:	200aadc0 	call	200aadc <__udivsi3>
 200a278:	8808943a 	slli	r4,r17,16
 200a27c:	bf3fffcc 	andi	fp,r23,65535
 200a280:	8006d43a 	srli	r3,r16,16
 200a284:	e0a3383a 	mul	r17,fp,r2
 200a288:	100d883a 	mov	r6,r2
 200a28c:	1906b03a 	or	r3,r3,r4
 200a290:	1c40042e 	bgeu	r3,r17,200a2a4 <__udivdi3+0x370>
 200a294:	1dc7883a 	add	r3,r3,r23
 200a298:	10bfffc4 	addi	r2,r2,-1
 200a29c:	1dc0752e 	bgeu	r3,r23,200a474 <__udivdi3+0x540>
 200a2a0:	100d883a 	mov	r6,r2
 200a2a4:	1c63c83a 	sub	r17,r3,r17
 200a2a8:	900b883a 	mov	r5,r18
 200a2ac:	8809883a 	mov	r4,r17
 200a2b0:	d9800015 	stw	r6,0(sp)
 200a2b4:	200ab400 	call	200ab40 <__umodsi3>
 200a2b8:	102d883a 	mov	r22,r2
 200a2bc:	8809883a 	mov	r4,r17
 200a2c0:	900b883a 	mov	r5,r18
 200a2c4:	200aadc0 	call	200aadc <__udivsi3>
 200a2c8:	b02c943a 	slli	r22,r22,16
 200a2cc:	e089383a 	mul	r4,fp,r2
 200a2d0:	843fffcc 	andi	r16,r16,65535
 200a2d4:	85a0b03a 	or	r16,r16,r22
 200a2d8:	d9800017 	ldw	r6,0(sp)
 200a2dc:	8100042e 	bgeu	r16,r4,200a2f0 <__udivdi3+0x3bc>
 200a2e0:	85e1883a 	add	r16,r16,r23
 200a2e4:	10ffffc4 	addi	r3,r2,-1
 200a2e8:	85c05e2e 	bgeu	r16,r23,200a464 <__udivdi3+0x530>
 200a2ec:	1805883a 	mov	r2,r3
 200a2f0:	300c943a 	slli	r6,r6,16
 200a2f4:	a17fffcc 	andi	r5,r20,65535
 200a2f8:	a028d43a 	srli	r20,r20,16
 200a2fc:	3084b03a 	or	r2,r6,r2
 200a300:	10ffffcc 	andi	r3,r2,65535
 200a304:	100cd43a 	srli	r6,r2,16
 200a308:	194f383a 	mul	r7,r3,r5
 200a30c:	1d07383a 	mul	r3,r3,r20
 200a310:	314b383a 	mul	r5,r6,r5
 200a314:	3810d43a 	srli	r8,r7,16
 200a318:	8121c83a 	sub	r16,r16,r4
 200a31c:	1947883a 	add	r3,r3,r5
 200a320:	40c7883a 	add	r3,r8,r3
 200a324:	350d383a 	mul	r6,r6,r20
 200a328:	1940022e 	bgeu	r3,r5,200a334 <__udivdi3+0x400>
 200a32c:	01000074 	movhi	r4,1
 200a330:	310d883a 	add	r6,r6,r4
 200a334:	1828d43a 	srli	r20,r3,16
 200a338:	a18d883a 	add	r6,r20,r6
 200a33c:	81803e36 	bltu	r16,r6,200a438 <__udivdi3+0x504>
 200a340:	81803826 	beq	r16,r6,200a424 <__udivdi3+0x4f0>
 200a344:	0007883a 	mov	r3,zero
 200a348:	003fa206 	br	200a1d4 <__alt_mem_mem_0+0xfcfea1d4>
 200a34c:	88e2983a 	sll	r17,r17,r3
 200a350:	80a8d83a 	srl	r20,r16,r2
 200a354:	80e0983a 	sll	r16,r16,r3
 200a358:	882ad43a 	srli	r21,r17,16
 200a35c:	9884d83a 	srl	r2,r19,r2
 200a360:	a009883a 	mov	r4,r20
 200a364:	a80b883a 	mov	r5,r21
 200a368:	142eb03a 	or	r23,r2,r16
 200a36c:	98e4983a 	sll	r18,r19,r3
 200a370:	200ab400 	call	200ab40 <__umodsi3>
 200a374:	a009883a 	mov	r4,r20
 200a378:	a80b883a 	mov	r5,r21
 200a37c:	1021883a 	mov	r16,r2
 200a380:	200aadc0 	call	200aadc <__udivsi3>
 200a384:	1039883a 	mov	fp,r2
 200a388:	8d3fffcc 	andi	r20,r17,65535
 200a38c:	8020943a 	slli	r16,r16,16
 200a390:	b804d43a 	srli	r2,r23,16
 200a394:	a72d383a 	mul	r22,r20,fp
 200a398:	1404b03a 	or	r2,r2,r16
 200a39c:	1580062e 	bgeu	r2,r22,200a3b8 <__udivdi3+0x484>
 200a3a0:	1445883a 	add	r2,r2,r17
 200a3a4:	e0ffffc4 	addi	r3,fp,-1
 200a3a8:	14403836 	bltu	r2,r17,200a48c <__udivdi3+0x558>
 200a3ac:	1580372e 	bgeu	r2,r22,200a48c <__udivdi3+0x558>
 200a3b0:	e73fff84 	addi	fp,fp,-2
 200a3b4:	1445883a 	add	r2,r2,r17
 200a3b8:	15adc83a 	sub	r22,r2,r22
 200a3bc:	a80b883a 	mov	r5,r21
 200a3c0:	b009883a 	mov	r4,r22
 200a3c4:	200ab400 	call	200ab40 <__umodsi3>
 200a3c8:	1027883a 	mov	r19,r2
 200a3cc:	b009883a 	mov	r4,r22
 200a3d0:	a80b883a 	mov	r5,r21
 200a3d4:	200aadc0 	call	200aadc <__udivsi3>
 200a3d8:	9826943a 	slli	r19,r19,16
 200a3dc:	a0a1383a 	mul	r16,r20,r2
 200a3e0:	b93fffcc 	andi	r4,r23,65535
 200a3e4:	24c8b03a 	or	r4,r4,r19
 200a3e8:	2400062e 	bgeu	r4,r16,200a404 <__udivdi3+0x4d0>
 200a3ec:	2449883a 	add	r4,r4,r17
 200a3f0:	10ffffc4 	addi	r3,r2,-1
 200a3f4:	24402336 	bltu	r4,r17,200a484 <__udivdi3+0x550>
 200a3f8:	2400222e 	bgeu	r4,r16,200a484 <__udivdi3+0x550>
 200a3fc:	10bfff84 	addi	r2,r2,-2
 200a400:	2449883a 	add	r4,r4,r17
 200a404:	e038943a 	slli	fp,fp,16
 200a408:	2421c83a 	sub	r16,r4,r16
 200a40c:	e086b03a 	or	r3,fp,r2
 200a410:	003f4306 	br	200a120 <__alt_mem_mem_0+0xfcfea120>
 200a414:	2005883a 	mov	r2,r4
 200a418:	003f6906 	br	200a1c0 <__alt_mem_mem_0+0xfcfea1c0>
 200a41c:	1805883a 	mov	r2,r3
 200a420:	003f0f06 	br	200a060 <__alt_mem_mem_0+0xfcfea060>
 200a424:	1806943a 	slli	r3,r3,16
 200a428:	9d66983a 	sll	r19,r19,r21
 200a42c:	39ffffcc 	andi	r7,r7,65535
 200a430:	19c7883a 	add	r3,r3,r7
 200a434:	98ffc32e 	bgeu	r19,r3,200a344 <__alt_mem_mem_0+0xfcfea344>
 200a438:	10bfffc4 	addi	r2,r2,-1
 200a43c:	003fc106 	br	200a344 <__alt_mem_mem_0+0xfcfea344>
 200a440:	00800604 	movi	r2,24
 200a444:	003f1106 	br	200a08c <__alt_mem_mem_0+0xfcfea08c>
 200a448:	00800604 	movi	r2,24
 200a44c:	003f2706 	br	200a0ec <__alt_mem_mem_0+0xfcfea0ec>
 200a450:	00800604 	movi	r2,24
 200a454:	003ece06 	br	2009f90 <__alt_mem_mem_0+0xfcfe9f90>
 200a458:	0007883a 	mov	r3,zero
 200a45c:	00800044 	movi	r2,1
 200a460:	003f5c06 	br	200a1d4 <__alt_mem_mem_0+0xfcfea1d4>
 200a464:	813fa12e 	bgeu	r16,r4,200a2ec <__alt_mem_mem_0+0xfcfea2ec>
 200a468:	10bfff84 	addi	r2,r2,-2
 200a46c:	85e1883a 	add	r16,r16,r23
 200a470:	003f9f06 	br	200a2f0 <__alt_mem_mem_0+0xfcfea2f0>
 200a474:	1c7f8a2e 	bgeu	r3,r17,200a2a0 <__alt_mem_mem_0+0xfcfea2a0>
 200a478:	31bfff84 	addi	r6,r6,-2
 200a47c:	1dc7883a 	add	r3,r3,r23
 200a480:	003f8806 	br	200a2a4 <__alt_mem_mem_0+0xfcfea2a4>
 200a484:	1805883a 	mov	r2,r3
 200a488:	003fde06 	br	200a404 <__alt_mem_mem_0+0xfcfea404>
 200a48c:	1839883a 	mov	fp,r3
 200a490:	003fc906 	br	200a3b8 <__alt_mem_mem_0+0xfcfea3b8>
 200a494:	b5bfff84 	addi	r22,r22,-2
 200a498:	2449883a 	add	r4,r4,r17
 200a49c:	003f3406 	br	200a170 <__alt_mem_mem_0+0xfcfea170>
 200a4a0:	b5bfff84 	addi	r22,r22,-2
 200a4a4:	1445883a 	add	r2,r2,r17
 200a4a8:	003edb06 	br	200a018 <__alt_mem_mem_0+0xfcfea018>

0200a4ac <__umoddi3>:
 200a4ac:	defff404 	addi	sp,sp,-48
 200a4b0:	df000a15 	stw	fp,40(sp)
 200a4b4:	dc400315 	stw	r17,12(sp)
 200a4b8:	dc000215 	stw	r16,8(sp)
 200a4bc:	dfc00b15 	stw	ra,44(sp)
 200a4c0:	ddc00915 	stw	r23,36(sp)
 200a4c4:	dd800815 	stw	r22,32(sp)
 200a4c8:	dd400715 	stw	r21,28(sp)
 200a4cc:	dd000615 	stw	r20,24(sp)
 200a4d0:	dcc00515 	stw	r19,20(sp)
 200a4d4:	dc800415 	stw	r18,16(sp)
 200a4d8:	2021883a 	mov	r16,r4
 200a4dc:	2823883a 	mov	r17,r5
 200a4e0:	2839883a 	mov	fp,r5
 200a4e4:	38003c1e 	bne	r7,zero,200a5d8 <__umoddi3+0x12c>
 200a4e8:	3027883a 	mov	r19,r6
 200a4ec:	2029883a 	mov	r20,r4
 200a4f0:	2980512e 	bgeu	r5,r6,200a638 <__umoddi3+0x18c>
 200a4f4:	00bfffd4 	movui	r2,65535
 200a4f8:	11809a36 	bltu	r2,r6,200a764 <__umoddi3+0x2b8>
 200a4fc:	01003fc4 	movi	r4,255
 200a500:	2189803a 	cmpltu	r4,r4,r6
 200a504:	200890fa 	slli	r4,r4,3
 200a508:	3104d83a 	srl	r2,r6,r4
 200a50c:	00c08134 	movhi	r3,516
 200a510:	18c3e204 	addi	r3,r3,3976
 200a514:	1885883a 	add	r2,r3,r2
 200a518:	10c00003 	ldbu	r3,0(r2)
 200a51c:	00800804 	movi	r2,32
 200a520:	1909883a 	add	r4,r3,r4
 200a524:	1125c83a 	sub	r18,r2,r4
 200a528:	90000526 	beq	r18,zero,200a540 <__umoddi3+0x94>
 200a52c:	8ca2983a 	sll	r17,r17,r18
 200a530:	8108d83a 	srl	r4,r16,r4
 200a534:	34a6983a 	sll	r19,r6,r18
 200a538:	84a8983a 	sll	r20,r16,r18
 200a53c:	2478b03a 	or	fp,r4,r17
 200a540:	982ed43a 	srli	r23,r19,16
 200a544:	e009883a 	mov	r4,fp
 200a548:	9dbfffcc 	andi	r22,r19,65535
 200a54c:	b80b883a 	mov	r5,r23
 200a550:	200ab400 	call	200ab40 <__umodsi3>
 200a554:	e009883a 	mov	r4,fp
 200a558:	b80b883a 	mov	r5,r23
 200a55c:	102b883a 	mov	r21,r2
 200a560:	200aadc0 	call	200aadc <__udivsi3>
 200a564:	a806943a 	slli	r3,r21,16
 200a568:	a008d43a 	srli	r4,r20,16
 200a56c:	b085383a 	mul	r2,r22,r2
 200a570:	20c8b03a 	or	r4,r4,r3
 200a574:	2080032e 	bgeu	r4,r2,200a584 <__umoddi3+0xd8>
 200a578:	24c9883a 	add	r4,r4,r19
 200a57c:	24c00136 	bltu	r4,r19,200a584 <__umoddi3+0xd8>
 200a580:	20811036 	bltu	r4,r2,200a9c4 <__umoddi3+0x518>
 200a584:	20abc83a 	sub	r21,r4,r2
 200a588:	b80b883a 	mov	r5,r23
 200a58c:	a809883a 	mov	r4,r21
 200a590:	200ab400 	call	200ab40 <__umodsi3>
 200a594:	1023883a 	mov	r17,r2
 200a598:	b80b883a 	mov	r5,r23
 200a59c:	a809883a 	mov	r4,r21
 200a5a0:	200aadc0 	call	200aadc <__udivsi3>
 200a5a4:	8822943a 	slli	r17,r17,16
 200a5a8:	b085383a 	mul	r2,r22,r2
 200a5ac:	a0ffffcc 	andi	r3,r20,65535
 200a5b0:	1c46b03a 	or	r3,r3,r17
 200a5b4:	1880042e 	bgeu	r3,r2,200a5c8 <__umoddi3+0x11c>
 200a5b8:	1cc7883a 	add	r3,r3,r19
 200a5bc:	1cc00236 	bltu	r3,r19,200a5c8 <__umoddi3+0x11c>
 200a5c0:	1880012e 	bgeu	r3,r2,200a5c8 <__umoddi3+0x11c>
 200a5c4:	1cc7883a 	add	r3,r3,r19
 200a5c8:	1885c83a 	sub	r2,r3,r2
 200a5cc:	1484d83a 	srl	r2,r2,r18
 200a5d0:	0007883a 	mov	r3,zero
 200a5d4:	00004f06 	br	200a714 <__umoddi3+0x268>
 200a5d8:	29c04c36 	bltu	r5,r7,200a70c <__umoddi3+0x260>
 200a5dc:	00bfffd4 	movui	r2,65535
 200a5e0:	11c0582e 	bgeu	r2,r7,200a744 <__umoddi3+0x298>
 200a5e4:	00804034 	movhi	r2,256
 200a5e8:	10bfffc4 	addi	r2,r2,-1
 200a5ec:	11c0e736 	bltu	r2,r7,200a98c <__umoddi3+0x4e0>
 200a5f0:	01000404 	movi	r4,16
 200a5f4:	3904d83a 	srl	r2,r7,r4
 200a5f8:	00c08134 	movhi	r3,516
 200a5fc:	18c3e204 	addi	r3,r3,3976
 200a600:	1885883a 	add	r2,r3,r2
 200a604:	14c00003 	ldbu	r19,0(r2)
 200a608:	00c00804 	movi	r3,32
 200a60c:	9927883a 	add	r19,r19,r4
 200a610:	1ce9c83a 	sub	r20,r3,r19
 200a614:	a000581e 	bne	r20,zero,200a778 <__umoddi3+0x2cc>
 200a618:	3c400136 	bltu	r7,r17,200a620 <__umoddi3+0x174>
 200a61c:	8180eb36 	bltu	r16,r6,200a9cc <__umoddi3+0x520>
 200a620:	8185c83a 	sub	r2,r16,r6
 200a624:	89e3c83a 	sub	r17,r17,r7
 200a628:	8089803a 	cmpltu	r4,r16,r2
 200a62c:	8939c83a 	sub	fp,r17,r4
 200a630:	e007883a 	mov	r3,fp
 200a634:	00003706 	br	200a714 <__umoddi3+0x268>
 200a638:	3000041e 	bne	r6,zero,200a64c <__umoddi3+0x1a0>
 200a63c:	000b883a 	mov	r5,zero
 200a640:	01000044 	movi	r4,1
 200a644:	200aadc0 	call	200aadc <__udivsi3>
 200a648:	1027883a 	mov	r19,r2
 200a64c:	00bfffd4 	movui	r2,65535
 200a650:	14c0402e 	bgeu	r2,r19,200a754 <__umoddi3+0x2a8>
 200a654:	00804034 	movhi	r2,256
 200a658:	10bfffc4 	addi	r2,r2,-1
 200a65c:	14c0cd36 	bltu	r2,r19,200a994 <__umoddi3+0x4e8>
 200a660:	00800404 	movi	r2,16
 200a664:	9886d83a 	srl	r3,r19,r2
 200a668:	01008134 	movhi	r4,516
 200a66c:	2103e204 	addi	r4,r4,3976
 200a670:	20c7883a 	add	r3,r4,r3
 200a674:	18c00003 	ldbu	r3,0(r3)
 200a678:	1887883a 	add	r3,r3,r2
 200a67c:	00800804 	movi	r2,32
 200a680:	10e5c83a 	sub	r18,r2,r3
 200a684:	9000901e 	bne	r18,zero,200a8c8 <__umoddi3+0x41c>
 200a688:	982cd43a 	srli	r22,r19,16
 200a68c:	8ce3c83a 	sub	r17,r17,r19
 200a690:	9d7fffcc 	andi	r21,r19,65535
 200a694:	b00b883a 	mov	r5,r22
 200a698:	8809883a 	mov	r4,r17
 200a69c:	200ab400 	call	200ab40 <__umodsi3>
 200a6a0:	8809883a 	mov	r4,r17
 200a6a4:	b00b883a 	mov	r5,r22
 200a6a8:	1021883a 	mov	r16,r2
 200a6ac:	200aadc0 	call	200aadc <__udivsi3>
 200a6b0:	8006943a 	slli	r3,r16,16
 200a6b4:	a008d43a 	srli	r4,r20,16
 200a6b8:	1545383a 	mul	r2,r2,r21
 200a6bc:	20c8b03a 	or	r4,r4,r3
 200a6c0:	2080042e 	bgeu	r4,r2,200a6d4 <__umoddi3+0x228>
 200a6c4:	24c9883a 	add	r4,r4,r19
 200a6c8:	24c00236 	bltu	r4,r19,200a6d4 <__umoddi3+0x228>
 200a6cc:	2080012e 	bgeu	r4,r2,200a6d4 <__umoddi3+0x228>
 200a6d0:	24c9883a 	add	r4,r4,r19
 200a6d4:	20a1c83a 	sub	r16,r4,r2
 200a6d8:	b00b883a 	mov	r5,r22
 200a6dc:	8009883a 	mov	r4,r16
 200a6e0:	200ab400 	call	200ab40 <__umodsi3>
 200a6e4:	1023883a 	mov	r17,r2
 200a6e8:	b00b883a 	mov	r5,r22
 200a6ec:	8009883a 	mov	r4,r16
 200a6f0:	200aadc0 	call	200aadc <__udivsi3>
 200a6f4:	8822943a 	slli	r17,r17,16
 200a6f8:	1545383a 	mul	r2,r2,r21
 200a6fc:	a53fffcc 	andi	r20,r20,65535
 200a700:	a446b03a 	or	r3,r20,r17
 200a704:	18bfb02e 	bgeu	r3,r2,200a5c8 <__alt_mem_mem_0+0xfcfea5c8>
 200a708:	003fab06 	br	200a5b8 <__alt_mem_mem_0+0xfcfea5b8>
 200a70c:	2005883a 	mov	r2,r4
 200a710:	2807883a 	mov	r3,r5
 200a714:	dfc00b17 	ldw	ra,44(sp)
 200a718:	df000a17 	ldw	fp,40(sp)
 200a71c:	ddc00917 	ldw	r23,36(sp)
 200a720:	dd800817 	ldw	r22,32(sp)
 200a724:	dd400717 	ldw	r21,28(sp)
 200a728:	dd000617 	ldw	r20,24(sp)
 200a72c:	dcc00517 	ldw	r19,20(sp)
 200a730:	dc800417 	ldw	r18,16(sp)
 200a734:	dc400317 	ldw	r17,12(sp)
 200a738:	dc000217 	ldw	r16,8(sp)
 200a73c:	dec00c04 	addi	sp,sp,48
 200a740:	f800283a 	ret
 200a744:	04c03fc4 	movi	r19,255
 200a748:	99c9803a 	cmpltu	r4,r19,r7
 200a74c:	200890fa 	slli	r4,r4,3
 200a750:	003fa806 	br	200a5f4 <__alt_mem_mem_0+0xfcfea5f4>
 200a754:	00803fc4 	movi	r2,255
 200a758:	14c5803a 	cmpltu	r2,r2,r19
 200a75c:	100490fa 	slli	r2,r2,3
 200a760:	003fc006 	br	200a664 <__alt_mem_mem_0+0xfcfea664>
 200a764:	00804034 	movhi	r2,256
 200a768:	10bfffc4 	addi	r2,r2,-1
 200a76c:	11808b36 	bltu	r2,r6,200a99c <__umoddi3+0x4f0>
 200a770:	01000404 	movi	r4,16
 200a774:	003f6406 	br	200a508 <__alt_mem_mem_0+0xfcfea508>
 200a778:	34c4d83a 	srl	r2,r6,r19
 200a77c:	3d0e983a 	sll	r7,r7,r20
 200a780:	8cf8d83a 	srl	fp,r17,r19
 200a784:	8d10983a 	sll	r8,r17,r20
 200a788:	38aab03a 	or	r21,r7,r2
 200a78c:	a82cd43a 	srli	r22,r21,16
 200a790:	84e2d83a 	srl	r17,r16,r19
 200a794:	e009883a 	mov	r4,fp
 200a798:	b00b883a 	mov	r5,r22
 200a79c:	8a22b03a 	or	r17,r17,r8
 200a7a0:	3524983a 	sll	r18,r6,r20
 200a7a4:	200ab400 	call	200ab40 <__umodsi3>
 200a7a8:	e009883a 	mov	r4,fp
 200a7ac:	b00b883a 	mov	r5,r22
 200a7b0:	102f883a 	mov	r23,r2
 200a7b4:	200aadc0 	call	200aadc <__udivsi3>
 200a7b8:	100d883a 	mov	r6,r2
 200a7bc:	b808943a 	slli	r4,r23,16
 200a7c0:	aa3fffcc 	andi	r8,r21,65535
 200a7c4:	8804d43a 	srli	r2,r17,16
 200a7c8:	41af383a 	mul	r23,r8,r6
 200a7cc:	8520983a 	sll	r16,r16,r20
 200a7d0:	1104b03a 	or	r2,r2,r4
 200a7d4:	15c0042e 	bgeu	r2,r23,200a7e8 <__umoddi3+0x33c>
 200a7d8:	1545883a 	add	r2,r2,r21
 200a7dc:	30ffffc4 	addi	r3,r6,-1
 200a7e0:	1540742e 	bgeu	r2,r21,200a9b4 <__umoddi3+0x508>
 200a7e4:	180d883a 	mov	r6,r3
 200a7e8:	15efc83a 	sub	r23,r2,r23
 200a7ec:	b00b883a 	mov	r5,r22
 200a7f0:	b809883a 	mov	r4,r23
 200a7f4:	d9800115 	stw	r6,4(sp)
 200a7f8:	da000015 	stw	r8,0(sp)
 200a7fc:	200ab400 	call	200ab40 <__umodsi3>
 200a800:	b00b883a 	mov	r5,r22
 200a804:	b809883a 	mov	r4,r23
 200a808:	1039883a 	mov	fp,r2
 200a80c:	200aadc0 	call	200aadc <__udivsi3>
 200a810:	da000017 	ldw	r8,0(sp)
 200a814:	e038943a 	slli	fp,fp,16
 200a818:	100b883a 	mov	r5,r2
 200a81c:	4089383a 	mul	r4,r8,r2
 200a820:	8a3fffcc 	andi	r8,r17,65535
 200a824:	4710b03a 	or	r8,r8,fp
 200a828:	d9800117 	ldw	r6,4(sp)
 200a82c:	4100042e 	bgeu	r8,r4,200a840 <__umoddi3+0x394>
 200a830:	4551883a 	add	r8,r8,r21
 200a834:	10bfffc4 	addi	r2,r2,-1
 200a838:	45405a2e 	bgeu	r8,r21,200a9a4 <__umoddi3+0x4f8>
 200a83c:	100b883a 	mov	r5,r2
 200a840:	300c943a 	slli	r6,r6,16
 200a844:	91ffffcc 	andi	r7,r18,65535
 200a848:	9004d43a 	srli	r2,r18,16
 200a84c:	314cb03a 	or	r6,r6,r5
 200a850:	317fffcc 	andi	r5,r6,65535
 200a854:	300cd43a 	srli	r6,r6,16
 200a858:	29d3383a 	mul	r9,r5,r7
 200a85c:	288b383a 	mul	r5,r5,r2
 200a860:	31cf383a 	mul	r7,r6,r7
 200a864:	4806d43a 	srli	r3,r9,16
 200a868:	4111c83a 	sub	r8,r8,r4
 200a86c:	29cb883a 	add	r5,r5,r7
 200a870:	194b883a 	add	r5,r3,r5
 200a874:	3085383a 	mul	r2,r6,r2
 200a878:	29c0022e 	bgeu	r5,r7,200a884 <__umoddi3+0x3d8>
 200a87c:	00c00074 	movhi	r3,1
 200a880:	10c5883a 	add	r2,r2,r3
 200a884:	2808d43a 	srli	r4,r5,16
 200a888:	280a943a 	slli	r5,r5,16
 200a88c:	4a7fffcc 	andi	r9,r9,65535
 200a890:	2085883a 	add	r2,r4,r2
 200a894:	2a4b883a 	add	r5,r5,r9
 200a898:	40803636 	bltu	r8,r2,200a974 <__umoddi3+0x4c8>
 200a89c:	40804d26 	beq	r8,r2,200a9d4 <__umoddi3+0x528>
 200a8a0:	4089c83a 	sub	r4,r8,r2
 200a8a4:	280f883a 	mov	r7,r5
 200a8a8:	81cfc83a 	sub	r7,r16,r7
 200a8ac:	81c7803a 	cmpltu	r3,r16,r7
 200a8b0:	20c7c83a 	sub	r3,r4,r3
 200a8b4:	1cc4983a 	sll	r2,r3,r19
 200a8b8:	3d0ed83a 	srl	r7,r7,r20
 200a8bc:	1d06d83a 	srl	r3,r3,r20
 200a8c0:	11c4b03a 	or	r2,r2,r7
 200a8c4:	003f9306 	br	200a714 <__alt_mem_mem_0+0xfcfea714>
 200a8c8:	9ca6983a 	sll	r19,r19,r18
 200a8cc:	88e8d83a 	srl	r20,r17,r3
 200a8d0:	80c4d83a 	srl	r2,r16,r3
 200a8d4:	982cd43a 	srli	r22,r19,16
 200a8d8:	8ca2983a 	sll	r17,r17,r18
 200a8dc:	a009883a 	mov	r4,r20
 200a8e0:	b00b883a 	mov	r5,r22
 200a8e4:	1478b03a 	or	fp,r2,r17
 200a8e8:	200ab400 	call	200ab40 <__umodsi3>
 200a8ec:	a009883a 	mov	r4,r20
 200a8f0:	b00b883a 	mov	r5,r22
 200a8f4:	1023883a 	mov	r17,r2
 200a8f8:	200aadc0 	call	200aadc <__udivsi3>
 200a8fc:	9d7fffcc 	andi	r21,r19,65535
 200a900:	880a943a 	slli	r5,r17,16
 200a904:	e008d43a 	srli	r4,fp,16
 200a908:	a885383a 	mul	r2,r21,r2
 200a90c:	84a8983a 	sll	r20,r16,r18
 200a910:	2148b03a 	or	r4,r4,r5
 200a914:	2080042e 	bgeu	r4,r2,200a928 <__umoddi3+0x47c>
 200a918:	24c9883a 	add	r4,r4,r19
 200a91c:	24c00236 	bltu	r4,r19,200a928 <__umoddi3+0x47c>
 200a920:	2080012e 	bgeu	r4,r2,200a928 <__umoddi3+0x47c>
 200a924:	24c9883a 	add	r4,r4,r19
 200a928:	20a3c83a 	sub	r17,r4,r2
 200a92c:	b00b883a 	mov	r5,r22
 200a930:	8809883a 	mov	r4,r17
 200a934:	200ab400 	call	200ab40 <__umodsi3>
 200a938:	102f883a 	mov	r23,r2
 200a93c:	8809883a 	mov	r4,r17
 200a940:	b00b883a 	mov	r5,r22
 200a944:	200aadc0 	call	200aadc <__udivsi3>
 200a948:	b82e943a 	slli	r23,r23,16
 200a94c:	a885383a 	mul	r2,r21,r2
 200a950:	e13fffcc 	andi	r4,fp,65535
 200a954:	25c8b03a 	or	r4,r4,r23
 200a958:	2080042e 	bgeu	r4,r2,200a96c <__umoddi3+0x4c0>
 200a95c:	24c9883a 	add	r4,r4,r19
 200a960:	24c00236 	bltu	r4,r19,200a96c <__umoddi3+0x4c0>
 200a964:	2080012e 	bgeu	r4,r2,200a96c <__umoddi3+0x4c0>
 200a968:	24c9883a 	add	r4,r4,r19
 200a96c:	20a3c83a 	sub	r17,r4,r2
 200a970:	003f4806 	br	200a694 <__alt_mem_mem_0+0xfcfea694>
 200a974:	2c8fc83a 	sub	r7,r5,r18
 200a978:	1545c83a 	sub	r2,r2,r21
 200a97c:	29cb803a 	cmpltu	r5,r5,r7
 200a980:	1145c83a 	sub	r2,r2,r5
 200a984:	4089c83a 	sub	r4,r8,r2
 200a988:	003fc706 	br	200a8a8 <__alt_mem_mem_0+0xfcfea8a8>
 200a98c:	01000604 	movi	r4,24
 200a990:	003f1806 	br	200a5f4 <__alt_mem_mem_0+0xfcfea5f4>
 200a994:	00800604 	movi	r2,24
 200a998:	003f3206 	br	200a664 <__alt_mem_mem_0+0xfcfea664>
 200a99c:	01000604 	movi	r4,24
 200a9a0:	003ed906 	br	200a508 <__alt_mem_mem_0+0xfcfea508>
 200a9a4:	413fa52e 	bgeu	r8,r4,200a83c <__alt_mem_mem_0+0xfcfea83c>
 200a9a8:	297fff84 	addi	r5,r5,-2
 200a9ac:	4551883a 	add	r8,r8,r21
 200a9b0:	003fa306 	br	200a840 <__alt_mem_mem_0+0xfcfea840>
 200a9b4:	15ff8b2e 	bgeu	r2,r23,200a7e4 <__alt_mem_mem_0+0xfcfea7e4>
 200a9b8:	31bfff84 	addi	r6,r6,-2
 200a9bc:	1545883a 	add	r2,r2,r21
 200a9c0:	003f8906 	br	200a7e8 <__alt_mem_mem_0+0xfcfea7e8>
 200a9c4:	24c9883a 	add	r4,r4,r19
 200a9c8:	003eee06 	br	200a584 <__alt_mem_mem_0+0xfcfea584>
 200a9cc:	8005883a 	mov	r2,r16
 200a9d0:	003f1706 	br	200a630 <__alt_mem_mem_0+0xfcfea630>
 200a9d4:	817fe736 	bltu	r16,r5,200a974 <__alt_mem_mem_0+0xfcfea974>
 200a9d8:	280f883a 	mov	r7,r5
 200a9dc:	0009883a 	mov	r4,zero
 200a9e0:	003fb106 	br	200a8a8 <__alt_mem_mem_0+0xfcfea8a8>

0200a9e4 <__divsi3>:
 200a9e4:	20001b16 	blt	r4,zero,200aa54 <__divsi3+0x70>
 200a9e8:	000f883a 	mov	r7,zero
 200a9ec:	28001616 	blt	r5,zero,200aa48 <__divsi3+0x64>
 200a9f0:	200d883a 	mov	r6,r4
 200a9f4:	29001a2e 	bgeu	r5,r4,200aa60 <__divsi3+0x7c>
 200a9f8:	00800804 	movi	r2,32
 200a9fc:	00c00044 	movi	r3,1
 200aa00:	00000106 	br	200aa08 <__divsi3+0x24>
 200aa04:	10000d26 	beq	r2,zero,200aa3c <__divsi3+0x58>
 200aa08:	294b883a 	add	r5,r5,r5
 200aa0c:	10bfffc4 	addi	r2,r2,-1
 200aa10:	18c7883a 	add	r3,r3,r3
 200aa14:	293ffb36 	bltu	r5,r4,200aa04 <__alt_mem_mem_0+0xfcfeaa04>
 200aa18:	0005883a 	mov	r2,zero
 200aa1c:	18000726 	beq	r3,zero,200aa3c <__divsi3+0x58>
 200aa20:	0005883a 	mov	r2,zero
 200aa24:	31400236 	bltu	r6,r5,200aa30 <__divsi3+0x4c>
 200aa28:	314dc83a 	sub	r6,r6,r5
 200aa2c:	10c4b03a 	or	r2,r2,r3
 200aa30:	1806d07a 	srli	r3,r3,1
 200aa34:	280ad07a 	srli	r5,r5,1
 200aa38:	183ffa1e 	bne	r3,zero,200aa24 <__alt_mem_mem_0+0xfcfeaa24>
 200aa3c:	38000126 	beq	r7,zero,200aa44 <__divsi3+0x60>
 200aa40:	0085c83a 	sub	r2,zero,r2
 200aa44:	f800283a 	ret
 200aa48:	014bc83a 	sub	r5,zero,r5
 200aa4c:	39c0005c 	xori	r7,r7,1
 200aa50:	003fe706 	br	200a9f0 <__alt_mem_mem_0+0xfcfea9f0>
 200aa54:	0109c83a 	sub	r4,zero,r4
 200aa58:	01c00044 	movi	r7,1
 200aa5c:	003fe306 	br	200a9ec <__alt_mem_mem_0+0xfcfea9ec>
 200aa60:	00c00044 	movi	r3,1
 200aa64:	003fee06 	br	200aa20 <__alt_mem_mem_0+0xfcfeaa20>

0200aa68 <__modsi3>:
 200aa68:	20001716 	blt	r4,zero,200aac8 <__modsi3+0x60>
 200aa6c:	000f883a 	mov	r7,zero
 200aa70:	2005883a 	mov	r2,r4
 200aa74:	28001216 	blt	r5,zero,200aac0 <__modsi3+0x58>
 200aa78:	2900162e 	bgeu	r5,r4,200aad4 <__modsi3+0x6c>
 200aa7c:	01800804 	movi	r6,32
 200aa80:	00c00044 	movi	r3,1
 200aa84:	00000106 	br	200aa8c <__modsi3+0x24>
 200aa88:	30000a26 	beq	r6,zero,200aab4 <__modsi3+0x4c>
 200aa8c:	294b883a 	add	r5,r5,r5
 200aa90:	31bfffc4 	addi	r6,r6,-1
 200aa94:	18c7883a 	add	r3,r3,r3
 200aa98:	293ffb36 	bltu	r5,r4,200aa88 <__alt_mem_mem_0+0xfcfeaa88>
 200aa9c:	18000526 	beq	r3,zero,200aab4 <__modsi3+0x4c>
 200aaa0:	1806d07a 	srli	r3,r3,1
 200aaa4:	11400136 	bltu	r2,r5,200aaac <__modsi3+0x44>
 200aaa8:	1145c83a 	sub	r2,r2,r5
 200aaac:	280ad07a 	srli	r5,r5,1
 200aab0:	183ffb1e 	bne	r3,zero,200aaa0 <__alt_mem_mem_0+0xfcfeaaa0>
 200aab4:	38000126 	beq	r7,zero,200aabc <__modsi3+0x54>
 200aab8:	0085c83a 	sub	r2,zero,r2
 200aabc:	f800283a 	ret
 200aac0:	014bc83a 	sub	r5,zero,r5
 200aac4:	003fec06 	br	200aa78 <__alt_mem_mem_0+0xfcfeaa78>
 200aac8:	0109c83a 	sub	r4,zero,r4
 200aacc:	01c00044 	movi	r7,1
 200aad0:	003fe706 	br	200aa70 <__alt_mem_mem_0+0xfcfeaa70>
 200aad4:	00c00044 	movi	r3,1
 200aad8:	003ff106 	br	200aaa0 <__alt_mem_mem_0+0xfcfeaaa0>

0200aadc <__udivsi3>:
 200aadc:	200d883a 	mov	r6,r4
 200aae0:	2900152e 	bgeu	r5,r4,200ab38 <__udivsi3+0x5c>
 200aae4:	28001416 	blt	r5,zero,200ab38 <__udivsi3+0x5c>
 200aae8:	00800804 	movi	r2,32
 200aaec:	00c00044 	movi	r3,1
 200aaf0:	00000206 	br	200aafc <__udivsi3+0x20>
 200aaf4:	10000e26 	beq	r2,zero,200ab30 <__udivsi3+0x54>
 200aaf8:	28000516 	blt	r5,zero,200ab10 <__udivsi3+0x34>
 200aafc:	294b883a 	add	r5,r5,r5
 200ab00:	10bfffc4 	addi	r2,r2,-1
 200ab04:	18c7883a 	add	r3,r3,r3
 200ab08:	293ffa36 	bltu	r5,r4,200aaf4 <__alt_mem_mem_0+0xfcfeaaf4>
 200ab0c:	18000826 	beq	r3,zero,200ab30 <__udivsi3+0x54>
 200ab10:	0005883a 	mov	r2,zero
 200ab14:	31400236 	bltu	r6,r5,200ab20 <__udivsi3+0x44>
 200ab18:	314dc83a 	sub	r6,r6,r5
 200ab1c:	10c4b03a 	or	r2,r2,r3
 200ab20:	1806d07a 	srli	r3,r3,1
 200ab24:	280ad07a 	srli	r5,r5,1
 200ab28:	183ffa1e 	bne	r3,zero,200ab14 <__alt_mem_mem_0+0xfcfeab14>
 200ab2c:	f800283a 	ret
 200ab30:	0005883a 	mov	r2,zero
 200ab34:	f800283a 	ret
 200ab38:	00c00044 	movi	r3,1
 200ab3c:	003ff406 	br	200ab10 <__alt_mem_mem_0+0xfcfeab10>

0200ab40 <__umodsi3>:
 200ab40:	2005883a 	mov	r2,r4
 200ab44:	2900122e 	bgeu	r5,r4,200ab90 <__umodsi3+0x50>
 200ab48:	28001116 	blt	r5,zero,200ab90 <__umodsi3+0x50>
 200ab4c:	01800804 	movi	r6,32
 200ab50:	00c00044 	movi	r3,1
 200ab54:	00000206 	br	200ab60 <__umodsi3+0x20>
 200ab58:	30000c26 	beq	r6,zero,200ab8c <__umodsi3+0x4c>
 200ab5c:	28000516 	blt	r5,zero,200ab74 <__umodsi3+0x34>
 200ab60:	294b883a 	add	r5,r5,r5
 200ab64:	31bfffc4 	addi	r6,r6,-1
 200ab68:	18c7883a 	add	r3,r3,r3
 200ab6c:	293ffa36 	bltu	r5,r4,200ab58 <__alt_mem_mem_0+0xfcfeab58>
 200ab70:	18000626 	beq	r3,zero,200ab8c <__umodsi3+0x4c>
 200ab74:	1806d07a 	srli	r3,r3,1
 200ab78:	11400136 	bltu	r2,r5,200ab80 <__umodsi3+0x40>
 200ab7c:	1145c83a 	sub	r2,r2,r5
 200ab80:	280ad07a 	srli	r5,r5,1
 200ab84:	183ffb1e 	bne	r3,zero,200ab74 <__alt_mem_mem_0+0xfcfeab74>
 200ab88:	f800283a 	ret
 200ab8c:	f800283a 	ret
 200ab90:	00c00044 	movi	r3,1
 200ab94:	003ff706 	br	200ab74 <__alt_mem_mem_0+0xfcfeab74>

0200ab98 <__adddf3>:
 200ab98:	02c00434 	movhi	r11,16
 200ab9c:	5affffc4 	addi	r11,r11,-1
 200aba0:	2806d7fa 	srli	r3,r5,31
 200aba4:	2ad4703a 	and	r10,r5,r11
 200aba8:	3ad2703a 	and	r9,r7,r11
 200abac:	3804d53a 	srli	r2,r7,20
 200abb0:	3018d77a 	srli	r12,r6,29
 200abb4:	280ad53a 	srli	r5,r5,20
 200abb8:	501490fa 	slli	r10,r10,3
 200abbc:	2010d77a 	srli	r8,r4,29
 200abc0:	481290fa 	slli	r9,r9,3
 200abc4:	380ed7fa 	srli	r7,r7,31
 200abc8:	defffb04 	addi	sp,sp,-20
 200abcc:	dc800215 	stw	r18,8(sp)
 200abd0:	dc400115 	stw	r17,4(sp)
 200abd4:	dc000015 	stw	r16,0(sp)
 200abd8:	dfc00415 	stw	ra,16(sp)
 200abdc:	dcc00315 	stw	r19,12(sp)
 200abe0:	1c803fcc 	andi	r18,r3,255
 200abe4:	2c01ffcc 	andi	r16,r5,2047
 200abe8:	5210b03a 	or	r8,r10,r8
 200abec:	202290fa 	slli	r17,r4,3
 200abf0:	1081ffcc 	andi	r2,r2,2047
 200abf4:	4b12b03a 	or	r9,r9,r12
 200abf8:	300c90fa 	slli	r6,r6,3
 200abfc:	91c07526 	beq	r18,r7,200add4 <__adddf3+0x23c>
 200ac00:	8087c83a 	sub	r3,r16,r2
 200ac04:	00c0ab0e 	bge	zero,r3,200aeb4 <__adddf3+0x31c>
 200ac08:	10002a1e 	bne	r2,zero,200acb4 <__adddf3+0x11c>
 200ac0c:	4984b03a 	or	r2,r9,r6
 200ac10:	1000961e 	bne	r2,zero,200ae6c <__adddf3+0x2d4>
 200ac14:	888001cc 	andi	r2,r17,7
 200ac18:	10000726 	beq	r2,zero,200ac38 <__adddf3+0xa0>
 200ac1c:	888003cc 	andi	r2,r17,15
 200ac20:	00c00104 	movi	r3,4
 200ac24:	10c00426 	beq	r2,r3,200ac38 <__adddf3+0xa0>
 200ac28:	88c7883a 	add	r3,r17,r3
 200ac2c:	1c63803a 	cmpltu	r17,r3,r17
 200ac30:	4451883a 	add	r8,r8,r17
 200ac34:	1823883a 	mov	r17,r3
 200ac38:	4080202c 	andhi	r2,r8,128
 200ac3c:	10005926 	beq	r2,zero,200ada4 <__adddf3+0x20c>
 200ac40:	84000044 	addi	r16,r16,1
 200ac44:	0081ffc4 	movi	r2,2047
 200ac48:	8080ba26 	beq	r16,r2,200af34 <__adddf3+0x39c>
 200ac4c:	00bfe034 	movhi	r2,65408
 200ac50:	10bfffc4 	addi	r2,r2,-1
 200ac54:	4090703a 	and	r8,r8,r2
 200ac58:	4004977a 	slli	r2,r8,29
 200ac5c:	4010927a 	slli	r8,r8,9
 200ac60:	8822d0fa 	srli	r17,r17,3
 200ac64:	8401ffcc 	andi	r16,r16,2047
 200ac68:	4010d33a 	srli	r8,r8,12
 200ac6c:	9007883a 	mov	r3,r18
 200ac70:	1444b03a 	or	r2,r2,r17
 200ac74:	8401ffcc 	andi	r16,r16,2047
 200ac78:	8020953a 	slli	r16,r16,20
 200ac7c:	18c03fcc 	andi	r3,r3,255
 200ac80:	01000434 	movhi	r4,16
 200ac84:	213fffc4 	addi	r4,r4,-1
 200ac88:	180697fa 	slli	r3,r3,31
 200ac8c:	4110703a 	and	r8,r8,r4
 200ac90:	4410b03a 	or	r8,r8,r16
 200ac94:	40c6b03a 	or	r3,r8,r3
 200ac98:	dfc00417 	ldw	ra,16(sp)
 200ac9c:	dcc00317 	ldw	r19,12(sp)
 200aca0:	dc800217 	ldw	r18,8(sp)
 200aca4:	dc400117 	ldw	r17,4(sp)
 200aca8:	dc000017 	ldw	r16,0(sp)
 200acac:	dec00504 	addi	sp,sp,20
 200acb0:	f800283a 	ret
 200acb4:	0081ffc4 	movi	r2,2047
 200acb8:	80bfd626 	beq	r16,r2,200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200acbc:	4a402034 	orhi	r9,r9,128
 200acc0:	00800e04 	movi	r2,56
 200acc4:	10c09f16 	blt	r2,r3,200af44 <__adddf3+0x3ac>
 200acc8:	008007c4 	movi	r2,31
 200accc:	10c0c216 	blt	r2,r3,200afd8 <__adddf3+0x440>
 200acd0:	00800804 	movi	r2,32
 200acd4:	10c5c83a 	sub	r2,r2,r3
 200acd8:	488a983a 	sll	r5,r9,r2
 200acdc:	30c8d83a 	srl	r4,r6,r3
 200ace0:	3084983a 	sll	r2,r6,r2
 200ace4:	48c6d83a 	srl	r3,r9,r3
 200ace8:	290cb03a 	or	r6,r5,r4
 200acec:	1004c03a 	cmpne	r2,r2,zero
 200acf0:	308cb03a 	or	r6,r6,r2
 200acf4:	898dc83a 	sub	r6,r17,r6
 200acf8:	89a3803a 	cmpltu	r17,r17,r6
 200acfc:	40d1c83a 	sub	r8,r8,r3
 200ad00:	4451c83a 	sub	r8,r8,r17
 200ad04:	3023883a 	mov	r17,r6
 200ad08:	4080202c 	andhi	r2,r8,128
 200ad0c:	10002326 	beq	r2,zero,200ad9c <__adddf3+0x204>
 200ad10:	04c02034 	movhi	r19,128
 200ad14:	9cffffc4 	addi	r19,r19,-1
 200ad18:	44e6703a 	and	r19,r8,r19
 200ad1c:	98007626 	beq	r19,zero,200aef8 <__adddf3+0x360>
 200ad20:	9809883a 	mov	r4,r19
 200ad24:	200d19c0 	call	200d19c <__clzsi2>
 200ad28:	10fffe04 	addi	r3,r2,-8
 200ad2c:	010007c4 	movi	r4,31
 200ad30:	20c07716 	blt	r4,r3,200af10 <__adddf3+0x378>
 200ad34:	00800804 	movi	r2,32
 200ad38:	10c5c83a 	sub	r2,r2,r3
 200ad3c:	8884d83a 	srl	r2,r17,r2
 200ad40:	98d0983a 	sll	r8,r19,r3
 200ad44:	88e2983a 	sll	r17,r17,r3
 200ad48:	1204b03a 	or	r2,r2,r8
 200ad4c:	1c007416 	blt	r3,r16,200af20 <__adddf3+0x388>
 200ad50:	1c21c83a 	sub	r16,r3,r16
 200ad54:	82000044 	addi	r8,r16,1
 200ad58:	00c007c4 	movi	r3,31
 200ad5c:	1a009116 	blt	r3,r8,200afa4 <__adddf3+0x40c>
 200ad60:	00c00804 	movi	r3,32
 200ad64:	1a07c83a 	sub	r3,r3,r8
 200ad68:	8a08d83a 	srl	r4,r17,r8
 200ad6c:	88e2983a 	sll	r17,r17,r3
 200ad70:	10c6983a 	sll	r3,r2,r3
 200ad74:	1210d83a 	srl	r8,r2,r8
 200ad78:	8804c03a 	cmpne	r2,r17,zero
 200ad7c:	1906b03a 	or	r3,r3,r4
 200ad80:	18a2b03a 	or	r17,r3,r2
 200ad84:	0021883a 	mov	r16,zero
 200ad88:	003fa206 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200ad8c:	1890b03a 	or	r8,r3,r2
 200ad90:	40017d26 	beq	r8,zero,200b388 <__adddf3+0x7f0>
 200ad94:	1011883a 	mov	r8,r2
 200ad98:	1823883a 	mov	r17,r3
 200ad9c:	888001cc 	andi	r2,r17,7
 200ada0:	103f9e1e 	bne	r2,zero,200ac1c <__alt_mem_mem_0+0xfcfeac1c>
 200ada4:	4004977a 	slli	r2,r8,29
 200ada8:	8822d0fa 	srli	r17,r17,3
 200adac:	4010d0fa 	srli	r8,r8,3
 200adb0:	9007883a 	mov	r3,r18
 200adb4:	1444b03a 	or	r2,r2,r17
 200adb8:	0101ffc4 	movi	r4,2047
 200adbc:	81002426 	beq	r16,r4,200ae50 <__adddf3+0x2b8>
 200adc0:	8120703a 	and	r16,r16,r4
 200adc4:	01000434 	movhi	r4,16
 200adc8:	213fffc4 	addi	r4,r4,-1
 200adcc:	4110703a 	and	r8,r8,r4
 200add0:	003fa806 	br	200ac74 <__alt_mem_mem_0+0xfcfeac74>
 200add4:	8089c83a 	sub	r4,r16,r2
 200add8:	01005e0e 	bge	zero,r4,200af54 <__adddf3+0x3bc>
 200addc:	10002b26 	beq	r2,zero,200ae8c <__adddf3+0x2f4>
 200ade0:	0081ffc4 	movi	r2,2047
 200ade4:	80bf8b26 	beq	r16,r2,200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200ade8:	4a402034 	orhi	r9,r9,128
 200adec:	00800e04 	movi	r2,56
 200adf0:	1100a40e 	bge	r2,r4,200b084 <__adddf3+0x4ec>
 200adf4:	498cb03a 	or	r6,r9,r6
 200adf8:	300ac03a 	cmpne	r5,r6,zero
 200adfc:	0013883a 	mov	r9,zero
 200ae00:	2c4b883a 	add	r5,r5,r17
 200ae04:	2c63803a 	cmpltu	r17,r5,r17
 200ae08:	4a11883a 	add	r8,r9,r8
 200ae0c:	8a11883a 	add	r8,r17,r8
 200ae10:	2823883a 	mov	r17,r5
 200ae14:	4080202c 	andhi	r2,r8,128
 200ae18:	103fe026 	beq	r2,zero,200ad9c <__alt_mem_mem_0+0xfcfead9c>
 200ae1c:	84000044 	addi	r16,r16,1
 200ae20:	0081ffc4 	movi	r2,2047
 200ae24:	8080d226 	beq	r16,r2,200b170 <__adddf3+0x5d8>
 200ae28:	00bfe034 	movhi	r2,65408
 200ae2c:	10bfffc4 	addi	r2,r2,-1
 200ae30:	4090703a 	and	r8,r8,r2
 200ae34:	880ad07a 	srli	r5,r17,1
 200ae38:	400897fa 	slli	r4,r8,31
 200ae3c:	88c0004c 	andi	r3,r17,1
 200ae40:	28e2b03a 	or	r17,r5,r3
 200ae44:	4010d07a 	srli	r8,r8,1
 200ae48:	2462b03a 	or	r17,r4,r17
 200ae4c:	003f7106 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200ae50:	4088b03a 	or	r4,r8,r2
 200ae54:	20014526 	beq	r4,zero,200b36c <__adddf3+0x7d4>
 200ae58:	01000434 	movhi	r4,16
 200ae5c:	42000234 	orhi	r8,r8,8
 200ae60:	213fffc4 	addi	r4,r4,-1
 200ae64:	4110703a 	and	r8,r8,r4
 200ae68:	003f8206 	br	200ac74 <__alt_mem_mem_0+0xfcfeac74>
 200ae6c:	18ffffc4 	addi	r3,r3,-1
 200ae70:	1800491e 	bne	r3,zero,200af98 <__adddf3+0x400>
 200ae74:	898bc83a 	sub	r5,r17,r6
 200ae78:	8963803a 	cmpltu	r17,r17,r5
 200ae7c:	4251c83a 	sub	r8,r8,r9
 200ae80:	4451c83a 	sub	r8,r8,r17
 200ae84:	2823883a 	mov	r17,r5
 200ae88:	003f9f06 	br	200ad08 <__alt_mem_mem_0+0xfcfead08>
 200ae8c:	4984b03a 	or	r2,r9,r6
 200ae90:	103f6026 	beq	r2,zero,200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200ae94:	213fffc4 	addi	r4,r4,-1
 200ae98:	2000931e 	bne	r4,zero,200b0e8 <__adddf3+0x550>
 200ae9c:	898d883a 	add	r6,r17,r6
 200aea0:	3463803a 	cmpltu	r17,r6,r17
 200aea4:	4251883a 	add	r8,r8,r9
 200aea8:	8a11883a 	add	r8,r17,r8
 200aeac:	3023883a 	mov	r17,r6
 200aeb0:	003fd806 	br	200ae14 <__alt_mem_mem_0+0xfcfeae14>
 200aeb4:	1800541e 	bne	r3,zero,200b008 <__adddf3+0x470>
 200aeb8:	80800044 	addi	r2,r16,1
 200aebc:	1081ffcc 	andi	r2,r2,2047
 200aec0:	00c00044 	movi	r3,1
 200aec4:	1880a00e 	bge	r3,r2,200b148 <__adddf3+0x5b0>
 200aec8:	8989c83a 	sub	r4,r17,r6
 200aecc:	8905803a 	cmpltu	r2,r17,r4
 200aed0:	4267c83a 	sub	r19,r8,r9
 200aed4:	98a7c83a 	sub	r19,r19,r2
 200aed8:	9880202c 	andhi	r2,r19,128
 200aedc:	10006326 	beq	r2,zero,200b06c <__adddf3+0x4d4>
 200aee0:	3463c83a 	sub	r17,r6,r17
 200aee4:	4a07c83a 	sub	r3,r9,r8
 200aee8:	344d803a 	cmpltu	r6,r6,r17
 200aeec:	19a7c83a 	sub	r19,r3,r6
 200aef0:	3825883a 	mov	r18,r7
 200aef4:	983f8a1e 	bne	r19,zero,200ad20 <__alt_mem_mem_0+0xfcfead20>
 200aef8:	8809883a 	mov	r4,r17
 200aefc:	200d19c0 	call	200d19c <__clzsi2>
 200af00:	10800804 	addi	r2,r2,32
 200af04:	10fffe04 	addi	r3,r2,-8
 200af08:	010007c4 	movi	r4,31
 200af0c:	20ff890e 	bge	r4,r3,200ad34 <__alt_mem_mem_0+0xfcfead34>
 200af10:	10bff604 	addi	r2,r2,-40
 200af14:	8884983a 	sll	r2,r17,r2
 200af18:	0023883a 	mov	r17,zero
 200af1c:	1c3f8c0e 	bge	r3,r16,200ad50 <__alt_mem_mem_0+0xfcfead50>
 200af20:	023fe034 	movhi	r8,65408
 200af24:	423fffc4 	addi	r8,r8,-1
 200af28:	80e1c83a 	sub	r16,r16,r3
 200af2c:	1210703a 	and	r8,r2,r8
 200af30:	003f3806 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200af34:	9007883a 	mov	r3,r18
 200af38:	0011883a 	mov	r8,zero
 200af3c:	0005883a 	mov	r2,zero
 200af40:	003f4c06 	br	200ac74 <__alt_mem_mem_0+0xfcfeac74>
 200af44:	498cb03a 	or	r6,r9,r6
 200af48:	300cc03a 	cmpne	r6,r6,zero
 200af4c:	0007883a 	mov	r3,zero
 200af50:	003f6806 	br	200acf4 <__alt_mem_mem_0+0xfcfeacf4>
 200af54:	20009c1e 	bne	r4,zero,200b1c8 <__adddf3+0x630>
 200af58:	80800044 	addi	r2,r16,1
 200af5c:	1141ffcc 	andi	r5,r2,2047
 200af60:	01000044 	movi	r4,1
 200af64:	2140670e 	bge	r4,r5,200b104 <__adddf3+0x56c>
 200af68:	0101ffc4 	movi	r4,2047
 200af6c:	11007f26 	beq	r2,r4,200b16c <__adddf3+0x5d4>
 200af70:	898d883a 	add	r6,r17,r6
 200af74:	4247883a 	add	r3,r8,r9
 200af78:	3451803a 	cmpltu	r8,r6,r17
 200af7c:	40d1883a 	add	r8,r8,r3
 200af80:	402297fa 	slli	r17,r8,31
 200af84:	300cd07a 	srli	r6,r6,1
 200af88:	4010d07a 	srli	r8,r8,1
 200af8c:	1021883a 	mov	r16,r2
 200af90:	89a2b03a 	or	r17,r17,r6
 200af94:	003f1f06 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200af98:	0081ffc4 	movi	r2,2047
 200af9c:	80bf481e 	bne	r16,r2,200acc0 <__alt_mem_mem_0+0xfcfeacc0>
 200afa0:	003f1c06 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200afa4:	843ff844 	addi	r16,r16,-31
 200afa8:	01000804 	movi	r4,32
 200afac:	1406d83a 	srl	r3,r2,r16
 200afb0:	41005026 	beq	r8,r4,200b0f4 <__adddf3+0x55c>
 200afb4:	01001004 	movi	r4,64
 200afb8:	2211c83a 	sub	r8,r4,r8
 200afbc:	1204983a 	sll	r2,r2,r8
 200afc0:	88a2b03a 	or	r17,r17,r2
 200afc4:	8822c03a 	cmpne	r17,r17,zero
 200afc8:	1c62b03a 	or	r17,r3,r17
 200afcc:	0011883a 	mov	r8,zero
 200afd0:	0021883a 	mov	r16,zero
 200afd4:	003f7106 	br	200ad9c <__alt_mem_mem_0+0xfcfead9c>
 200afd8:	193ff804 	addi	r4,r3,-32
 200afdc:	00800804 	movi	r2,32
 200afe0:	4908d83a 	srl	r4,r9,r4
 200afe4:	18804526 	beq	r3,r2,200b0fc <__adddf3+0x564>
 200afe8:	00801004 	movi	r2,64
 200afec:	10c5c83a 	sub	r2,r2,r3
 200aff0:	4886983a 	sll	r3,r9,r2
 200aff4:	198cb03a 	or	r6,r3,r6
 200aff8:	300cc03a 	cmpne	r6,r6,zero
 200affc:	218cb03a 	or	r6,r4,r6
 200b000:	0007883a 	mov	r3,zero
 200b004:	003f3b06 	br	200acf4 <__alt_mem_mem_0+0xfcfeacf4>
 200b008:	80002a26 	beq	r16,zero,200b0b4 <__adddf3+0x51c>
 200b00c:	0101ffc4 	movi	r4,2047
 200b010:	11006826 	beq	r2,r4,200b1b4 <__adddf3+0x61c>
 200b014:	00c7c83a 	sub	r3,zero,r3
 200b018:	42002034 	orhi	r8,r8,128
 200b01c:	01000e04 	movi	r4,56
 200b020:	20c07c16 	blt	r4,r3,200b214 <__adddf3+0x67c>
 200b024:	010007c4 	movi	r4,31
 200b028:	20c0da16 	blt	r4,r3,200b394 <__adddf3+0x7fc>
 200b02c:	01000804 	movi	r4,32
 200b030:	20c9c83a 	sub	r4,r4,r3
 200b034:	4114983a 	sll	r10,r8,r4
 200b038:	88cad83a 	srl	r5,r17,r3
 200b03c:	8908983a 	sll	r4,r17,r4
 200b040:	40c6d83a 	srl	r3,r8,r3
 200b044:	5162b03a 	or	r17,r10,r5
 200b048:	2008c03a 	cmpne	r4,r4,zero
 200b04c:	8922b03a 	or	r17,r17,r4
 200b050:	3463c83a 	sub	r17,r6,r17
 200b054:	48c7c83a 	sub	r3,r9,r3
 200b058:	344d803a 	cmpltu	r6,r6,r17
 200b05c:	1991c83a 	sub	r8,r3,r6
 200b060:	1021883a 	mov	r16,r2
 200b064:	3825883a 	mov	r18,r7
 200b068:	003f2706 	br	200ad08 <__alt_mem_mem_0+0xfcfead08>
 200b06c:	24d0b03a 	or	r8,r4,r19
 200b070:	40001b1e 	bne	r8,zero,200b0e0 <__adddf3+0x548>
 200b074:	0005883a 	mov	r2,zero
 200b078:	0007883a 	mov	r3,zero
 200b07c:	0021883a 	mov	r16,zero
 200b080:	003f4d06 	br	200adb8 <__alt_mem_mem_0+0xfcfeadb8>
 200b084:	008007c4 	movi	r2,31
 200b088:	11003c16 	blt	r2,r4,200b17c <__adddf3+0x5e4>
 200b08c:	00800804 	movi	r2,32
 200b090:	1105c83a 	sub	r2,r2,r4
 200b094:	488e983a 	sll	r7,r9,r2
 200b098:	310ad83a 	srl	r5,r6,r4
 200b09c:	3084983a 	sll	r2,r6,r2
 200b0a0:	4912d83a 	srl	r9,r9,r4
 200b0a4:	394ab03a 	or	r5,r7,r5
 200b0a8:	1004c03a 	cmpne	r2,r2,zero
 200b0ac:	288ab03a 	or	r5,r5,r2
 200b0b0:	003f5306 	br	200ae00 <__alt_mem_mem_0+0xfcfeae00>
 200b0b4:	4448b03a 	or	r4,r8,r17
 200b0b8:	20003e26 	beq	r4,zero,200b1b4 <__adddf3+0x61c>
 200b0bc:	00c6303a 	nor	r3,zero,r3
 200b0c0:	18003a1e 	bne	r3,zero,200b1ac <__adddf3+0x614>
 200b0c4:	3463c83a 	sub	r17,r6,r17
 200b0c8:	4a07c83a 	sub	r3,r9,r8
 200b0cc:	344d803a 	cmpltu	r6,r6,r17
 200b0d0:	1991c83a 	sub	r8,r3,r6
 200b0d4:	1021883a 	mov	r16,r2
 200b0d8:	3825883a 	mov	r18,r7
 200b0dc:	003f0a06 	br	200ad08 <__alt_mem_mem_0+0xfcfead08>
 200b0e0:	2023883a 	mov	r17,r4
 200b0e4:	003f0d06 	br	200ad1c <__alt_mem_mem_0+0xfcfead1c>
 200b0e8:	0081ffc4 	movi	r2,2047
 200b0ec:	80bf3f1e 	bne	r16,r2,200adec <__alt_mem_mem_0+0xfcfeadec>
 200b0f0:	003ec806 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b0f4:	0005883a 	mov	r2,zero
 200b0f8:	003fb106 	br	200afc0 <__alt_mem_mem_0+0xfcfeafc0>
 200b0fc:	0007883a 	mov	r3,zero
 200b100:	003fbc06 	br	200aff4 <__alt_mem_mem_0+0xfcfeaff4>
 200b104:	4444b03a 	or	r2,r8,r17
 200b108:	8000871e 	bne	r16,zero,200b328 <__adddf3+0x790>
 200b10c:	1000ba26 	beq	r2,zero,200b3f8 <__adddf3+0x860>
 200b110:	4984b03a 	or	r2,r9,r6
 200b114:	103ebf26 	beq	r2,zero,200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b118:	8985883a 	add	r2,r17,r6
 200b11c:	4247883a 	add	r3,r8,r9
 200b120:	1451803a 	cmpltu	r8,r2,r17
 200b124:	40d1883a 	add	r8,r8,r3
 200b128:	40c0202c 	andhi	r3,r8,128
 200b12c:	1023883a 	mov	r17,r2
 200b130:	183f1a26 	beq	r3,zero,200ad9c <__alt_mem_mem_0+0xfcfead9c>
 200b134:	00bfe034 	movhi	r2,65408
 200b138:	10bfffc4 	addi	r2,r2,-1
 200b13c:	2021883a 	mov	r16,r4
 200b140:	4090703a 	and	r8,r8,r2
 200b144:	003eb306 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b148:	4444b03a 	or	r2,r8,r17
 200b14c:	8000291e 	bne	r16,zero,200b1f4 <__adddf3+0x65c>
 200b150:	10004b1e 	bne	r2,zero,200b280 <__adddf3+0x6e8>
 200b154:	4990b03a 	or	r8,r9,r6
 200b158:	40008b26 	beq	r8,zero,200b388 <__adddf3+0x7f0>
 200b15c:	4811883a 	mov	r8,r9
 200b160:	3023883a 	mov	r17,r6
 200b164:	3825883a 	mov	r18,r7
 200b168:	003eaa06 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b16c:	1021883a 	mov	r16,r2
 200b170:	0011883a 	mov	r8,zero
 200b174:	0005883a 	mov	r2,zero
 200b178:	003f0f06 	br	200adb8 <__alt_mem_mem_0+0xfcfeadb8>
 200b17c:	217ff804 	addi	r5,r4,-32
 200b180:	00800804 	movi	r2,32
 200b184:	494ad83a 	srl	r5,r9,r5
 200b188:	20807d26 	beq	r4,r2,200b380 <__adddf3+0x7e8>
 200b18c:	00801004 	movi	r2,64
 200b190:	1109c83a 	sub	r4,r2,r4
 200b194:	4912983a 	sll	r9,r9,r4
 200b198:	498cb03a 	or	r6,r9,r6
 200b19c:	300cc03a 	cmpne	r6,r6,zero
 200b1a0:	298ab03a 	or	r5,r5,r6
 200b1a4:	0013883a 	mov	r9,zero
 200b1a8:	003f1506 	br	200ae00 <__alt_mem_mem_0+0xfcfeae00>
 200b1ac:	0101ffc4 	movi	r4,2047
 200b1b0:	113f9a1e 	bne	r2,r4,200b01c <__alt_mem_mem_0+0xfcfeb01c>
 200b1b4:	4811883a 	mov	r8,r9
 200b1b8:	3023883a 	mov	r17,r6
 200b1bc:	1021883a 	mov	r16,r2
 200b1c0:	3825883a 	mov	r18,r7
 200b1c4:	003e9306 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b1c8:	8000161e 	bne	r16,zero,200b224 <__adddf3+0x68c>
 200b1cc:	444ab03a 	or	r5,r8,r17
 200b1d0:	28005126 	beq	r5,zero,200b318 <__adddf3+0x780>
 200b1d4:	0108303a 	nor	r4,zero,r4
 200b1d8:	20004d1e 	bne	r4,zero,200b310 <__adddf3+0x778>
 200b1dc:	89a3883a 	add	r17,r17,r6
 200b1e0:	4253883a 	add	r9,r8,r9
 200b1e4:	898d803a 	cmpltu	r6,r17,r6
 200b1e8:	3251883a 	add	r8,r6,r9
 200b1ec:	1021883a 	mov	r16,r2
 200b1f0:	003f0806 	br	200ae14 <__alt_mem_mem_0+0xfcfeae14>
 200b1f4:	1000301e 	bne	r2,zero,200b2b8 <__adddf3+0x720>
 200b1f8:	4984b03a 	or	r2,r9,r6
 200b1fc:	10007126 	beq	r2,zero,200b3c4 <__adddf3+0x82c>
 200b200:	4811883a 	mov	r8,r9
 200b204:	3023883a 	mov	r17,r6
 200b208:	3825883a 	mov	r18,r7
 200b20c:	0401ffc4 	movi	r16,2047
 200b210:	003e8006 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b214:	4462b03a 	or	r17,r8,r17
 200b218:	8822c03a 	cmpne	r17,r17,zero
 200b21c:	0007883a 	mov	r3,zero
 200b220:	003f8b06 	br	200b050 <__alt_mem_mem_0+0xfcfeb050>
 200b224:	0141ffc4 	movi	r5,2047
 200b228:	11403b26 	beq	r2,r5,200b318 <__adddf3+0x780>
 200b22c:	0109c83a 	sub	r4,zero,r4
 200b230:	42002034 	orhi	r8,r8,128
 200b234:	01400e04 	movi	r5,56
 200b238:	29006716 	blt	r5,r4,200b3d8 <__adddf3+0x840>
 200b23c:	014007c4 	movi	r5,31
 200b240:	29007016 	blt	r5,r4,200b404 <__adddf3+0x86c>
 200b244:	01400804 	movi	r5,32
 200b248:	290bc83a 	sub	r5,r5,r4
 200b24c:	4154983a 	sll	r10,r8,r5
 200b250:	890ed83a 	srl	r7,r17,r4
 200b254:	894a983a 	sll	r5,r17,r5
 200b258:	4108d83a 	srl	r4,r8,r4
 200b25c:	51e2b03a 	or	r17,r10,r7
 200b260:	280ac03a 	cmpne	r5,r5,zero
 200b264:	8962b03a 	or	r17,r17,r5
 200b268:	89a3883a 	add	r17,r17,r6
 200b26c:	2253883a 	add	r9,r4,r9
 200b270:	898d803a 	cmpltu	r6,r17,r6
 200b274:	3251883a 	add	r8,r6,r9
 200b278:	1021883a 	mov	r16,r2
 200b27c:	003ee506 	br	200ae14 <__alt_mem_mem_0+0xfcfeae14>
 200b280:	4984b03a 	or	r2,r9,r6
 200b284:	103e6326 	beq	r2,zero,200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b288:	8987c83a 	sub	r3,r17,r6
 200b28c:	88c9803a 	cmpltu	r4,r17,r3
 200b290:	4245c83a 	sub	r2,r8,r9
 200b294:	1105c83a 	sub	r2,r2,r4
 200b298:	1100202c 	andhi	r4,r2,128
 200b29c:	203ebb26 	beq	r4,zero,200ad8c <__alt_mem_mem_0+0xfcfead8c>
 200b2a0:	3463c83a 	sub	r17,r6,r17
 200b2a4:	4a07c83a 	sub	r3,r9,r8
 200b2a8:	344d803a 	cmpltu	r6,r6,r17
 200b2ac:	1991c83a 	sub	r8,r3,r6
 200b2b0:	3825883a 	mov	r18,r7
 200b2b4:	003e5706 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b2b8:	4984b03a 	or	r2,r9,r6
 200b2bc:	10002e26 	beq	r2,zero,200b378 <__adddf3+0x7e0>
 200b2c0:	4004d0fa 	srli	r2,r8,3
 200b2c4:	8822d0fa 	srli	r17,r17,3
 200b2c8:	4010977a 	slli	r8,r8,29
 200b2cc:	10c0022c 	andhi	r3,r2,8
 200b2d0:	4462b03a 	or	r17,r8,r17
 200b2d4:	18000826 	beq	r3,zero,200b2f8 <__adddf3+0x760>
 200b2d8:	4808d0fa 	srli	r4,r9,3
 200b2dc:	20c0022c 	andhi	r3,r4,8
 200b2e0:	1800051e 	bne	r3,zero,200b2f8 <__adddf3+0x760>
 200b2e4:	300cd0fa 	srli	r6,r6,3
 200b2e8:	4806977a 	slli	r3,r9,29
 200b2ec:	2005883a 	mov	r2,r4
 200b2f0:	3825883a 	mov	r18,r7
 200b2f4:	19a2b03a 	or	r17,r3,r6
 200b2f8:	8810d77a 	srli	r8,r17,29
 200b2fc:	100490fa 	slli	r2,r2,3
 200b300:	882290fa 	slli	r17,r17,3
 200b304:	0401ffc4 	movi	r16,2047
 200b308:	4090b03a 	or	r8,r8,r2
 200b30c:	003e4106 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b310:	0141ffc4 	movi	r5,2047
 200b314:	117fc71e 	bne	r2,r5,200b234 <__alt_mem_mem_0+0xfcfeb234>
 200b318:	4811883a 	mov	r8,r9
 200b31c:	3023883a 	mov	r17,r6
 200b320:	1021883a 	mov	r16,r2
 200b324:	003e3b06 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b328:	10002f26 	beq	r2,zero,200b3e8 <__adddf3+0x850>
 200b32c:	4984b03a 	or	r2,r9,r6
 200b330:	10001126 	beq	r2,zero,200b378 <__adddf3+0x7e0>
 200b334:	4004d0fa 	srli	r2,r8,3
 200b338:	8822d0fa 	srli	r17,r17,3
 200b33c:	4010977a 	slli	r8,r8,29
 200b340:	10c0022c 	andhi	r3,r2,8
 200b344:	4462b03a 	or	r17,r8,r17
 200b348:	183feb26 	beq	r3,zero,200b2f8 <__alt_mem_mem_0+0xfcfeb2f8>
 200b34c:	4808d0fa 	srli	r4,r9,3
 200b350:	20c0022c 	andhi	r3,r4,8
 200b354:	183fe81e 	bne	r3,zero,200b2f8 <__alt_mem_mem_0+0xfcfeb2f8>
 200b358:	300cd0fa 	srli	r6,r6,3
 200b35c:	4806977a 	slli	r3,r9,29
 200b360:	2005883a 	mov	r2,r4
 200b364:	19a2b03a 	or	r17,r3,r6
 200b368:	003fe306 	br	200b2f8 <__alt_mem_mem_0+0xfcfeb2f8>
 200b36c:	0011883a 	mov	r8,zero
 200b370:	0005883a 	mov	r2,zero
 200b374:	003e3f06 	br	200ac74 <__alt_mem_mem_0+0xfcfeac74>
 200b378:	0401ffc4 	movi	r16,2047
 200b37c:	003e2506 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b380:	0013883a 	mov	r9,zero
 200b384:	003f8406 	br	200b198 <__alt_mem_mem_0+0xfcfeb198>
 200b388:	0005883a 	mov	r2,zero
 200b38c:	0007883a 	mov	r3,zero
 200b390:	003e8906 	br	200adb8 <__alt_mem_mem_0+0xfcfeadb8>
 200b394:	197ff804 	addi	r5,r3,-32
 200b398:	01000804 	movi	r4,32
 200b39c:	414ad83a 	srl	r5,r8,r5
 200b3a0:	19002426 	beq	r3,r4,200b434 <__adddf3+0x89c>
 200b3a4:	01001004 	movi	r4,64
 200b3a8:	20c7c83a 	sub	r3,r4,r3
 200b3ac:	40c6983a 	sll	r3,r8,r3
 200b3b0:	1c46b03a 	or	r3,r3,r17
 200b3b4:	1806c03a 	cmpne	r3,r3,zero
 200b3b8:	28e2b03a 	or	r17,r5,r3
 200b3bc:	0007883a 	mov	r3,zero
 200b3c0:	003f2306 	br	200b050 <__alt_mem_mem_0+0xfcfeb050>
 200b3c4:	0007883a 	mov	r3,zero
 200b3c8:	5811883a 	mov	r8,r11
 200b3cc:	00bfffc4 	movi	r2,-1
 200b3d0:	0401ffc4 	movi	r16,2047
 200b3d4:	003e7806 	br	200adb8 <__alt_mem_mem_0+0xfcfeadb8>
 200b3d8:	4462b03a 	or	r17,r8,r17
 200b3dc:	8822c03a 	cmpne	r17,r17,zero
 200b3e0:	0009883a 	mov	r4,zero
 200b3e4:	003fa006 	br	200b268 <__alt_mem_mem_0+0xfcfeb268>
 200b3e8:	4811883a 	mov	r8,r9
 200b3ec:	3023883a 	mov	r17,r6
 200b3f0:	0401ffc4 	movi	r16,2047
 200b3f4:	003e0706 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b3f8:	4811883a 	mov	r8,r9
 200b3fc:	3023883a 	mov	r17,r6
 200b400:	003e0406 	br	200ac14 <__alt_mem_mem_0+0xfcfeac14>
 200b404:	21fff804 	addi	r7,r4,-32
 200b408:	01400804 	movi	r5,32
 200b40c:	41ced83a 	srl	r7,r8,r7
 200b410:	21400a26 	beq	r4,r5,200b43c <__adddf3+0x8a4>
 200b414:	01401004 	movi	r5,64
 200b418:	2909c83a 	sub	r4,r5,r4
 200b41c:	4108983a 	sll	r4,r8,r4
 200b420:	2448b03a 	or	r4,r4,r17
 200b424:	2008c03a 	cmpne	r4,r4,zero
 200b428:	3922b03a 	or	r17,r7,r4
 200b42c:	0009883a 	mov	r4,zero
 200b430:	003f8d06 	br	200b268 <__alt_mem_mem_0+0xfcfeb268>
 200b434:	0007883a 	mov	r3,zero
 200b438:	003fdd06 	br	200b3b0 <__alt_mem_mem_0+0xfcfeb3b0>
 200b43c:	0009883a 	mov	r4,zero
 200b440:	003ff706 	br	200b420 <__alt_mem_mem_0+0xfcfeb420>

0200b444 <__divdf3>:
 200b444:	defff204 	addi	sp,sp,-56
 200b448:	dd400915 	stw	r21,36(sp)
 200b44c:	282ad53a 	srli	r21,r5,20
 200b450:	dd000815 	stw	r20,32(sp)
 200b454:	2828d7fa 	srli	r20,r5,31
 200b458:	dc000415 	stw	r16,16(sp)
 200b45c:	04000434 	movhi	r16,16
 200b460:	df000c15 	stw	fp,48(sp)
 200b464:	843fffc4 	addi	r16,r16,-1
 200b468:	dfc00d15 	stw	ra,52(sp)
 200b46c:	ddc00b15 	stw	r23,44(sp)
 200b470:	dd800a15 	stw	r22,40(sp)
 200b474:	dcc00715 	stw	r19,28(sp)
 200b478:	dc800615 	stw	r18,24(sp)
 200b47c:	dc400515 	stw	r17,20(sp)
 200b480:	ad41ffcc 	andi	r21,r21,2047
 200b484:	2c20703a 	and	r16,r5,r16
 200b488:	a7003fcc 	andi	fp,r20,255
 200b48c:	a8006126 	beq	r21,zero,200b614 <__divdf3+0x1d0>
 200b490:	0081ffc4 	movi	r2,2047
 200b494:	2025883a 	mov	r18,r4
 200b498:	a8803726 	beq	r21,r2,200b578 <__divdf3+0x134>
 200b49c:	80800434 	orhi	r2,r16,16
 200b4a0:	100490fa 	slli	r2,r2,3
 200b4a4:	2020d77a 	srli	r16,r4,29
 200b4a8:	202490fa 	slli	r18,r4,3
 200b4ac:	ad7f0044 	addi	r21,r21,-1023
 200b4b0:	80a0b03a 	or	r16,r16,r2
 200b4b4:	0027883a 	mov	r19,zero
 200b4b8:	0013883a 	mov	r9,zero
 200b4bc:	3804d53a 	srli	r2,r7,20
 200b4c0:	382cd7fa 	srli	r22,r7,31
 200b4c4:	04400434 	movhi	r17,16
 200b4c8:	8c7fffc4 	addi	r17,r17,-1
 200b4cc:	1081ffcc 	andi	r2,r2,2047
 200b4d0:	3011883a 	mov	r8,r6
 200b4d4:	3c62703a 	and	r17,r7,r17
 200b4d8:	b5c03fcc 	andi	r23,r22,255
 200b4dc:	10006c26 	beq	r2,zero,200b690 <__divdf3+0x24c>
 200b4e0:	00c1ffc4 	movi	r3,2047
 200b4e4:	10c06426 	beq	r2,r3,200b678 <__divdf3+0x234>
 200b4e8:	88c00434 	orhi	r3,r17,16
 200b4ec:	180690fa 	slli	r3,r3,3
 200b4f0:	3022d77a 	srli	r17,r6,29
 200b4f4:	301090fa 	slli	r8,r6,3
 200b4f8:	10bf0044 	addi	r2,r2,-1023
 200b4fc:	88e2b03a 	or	r17,r17,r3
 200b500:	000f883a 	mov	r7,zero
 200b504:	a58cf03a 	xor	r6,r20,r22
 200b508:	3cc8b03a 	or	r4,r7,r19
 200b50c:	a8abc83a 	sub	r21,r21,r2
 200b510:	008003c4 	movi	r2,15
 200b514:	3007883a 	mov	r3,r6
 200b518:	34c03fcc 	andi	r19,r6,255
 200b51c:	11009036 	bltu	r2,r4,200b760 <__divdf3+0x31c>
 200b520:	200890ba 	slli	r4,r4,2
 200b524:	00808074 	movhi	r2,513
 200b528:	10ad4e04 	addi	r2,r2,-19144
 200b52c:	2089883a 	add	r4,r4,r2
 200b530:	20800017 	ldw	r2,0(r4)
 200b534:	1000683a 	jmp	r2
 200b538:	0200b760 	cmpeqi	r8,zero,733
 200b53c:	0200b5b0 	cmpltui	r8,zero,726
 200b540:	0200b750 	cmplti	r8,zero,733
 200b544:	0200b5a4 	muli	r8,zero,726
 200b548:	0200b750 	cmplti	r8,zero,733
 200b54c:	0200b724 	muli	r8,zero,732
 200b550:	0200b750 	cmplti	r8,zero,733
 200b554:	0200b5a4 	muli	r8,zero,726
 200b558:	0200b5b0 	cmpltui	r8,zero,726
 200b55c:	0200b5b0 	cmpltui	r8,zero,726
 200b560:	0200b724 	muli	r8,zero,732
 200b564:	0200b5a4 	muli	r8,zero,726
 200b568:	0200b594 	movui	r8,726
 200b56c:	0200b594 	movui	r8,726
 200b570:	0200b594 	movui	r8,726
 200b574:	0200ba44 	movi	r8,745
 200b578:	2404b03a 	or	r2,r4,r16
 200b57c:	1000661e 	bne	r2,zero,200b718 <__divdf3+0x2d4>
 200b580:	04c00204 	movi	r19,8
 200b584:	0021883a 	mov	r16,zero
 200b588:	0025883a 	mov	r18,zero
 200b58c:	02400084 	movi	r9,2
 200b590:	003fca06 	br	200b4bc <__alt_mem_mem_0+0xfcfeb4bc>
 200b594:	8023883a 	mov	r17,r16
 200b598:	9011883a 	mov	r8,r18
 200b59c:	e02f883a 	mov	r23,fp
 200b5a0:	480f883a 	mov	r7,r9
 200b5a4:	00800084 	movi	r2,2
 200b5a8:	3881311e 	bne	r7,r2,200ba70 <__divdf3+0x62c>
 200b5ac:	b827883a 	mov	r19,r23
 200b5b0:	98c0004c 	andi	r3,r19,1
 200b5b4:	0081ffc4 	movi	r2,2047
 200b5b8:	000b883a 	mov	r5,zero
 200b5bc:	0025883a 	mov	r18,zero
 200b5c0:	1004953a 	slli	r2,r2,20
 200b5c4:	18c03fcc 	andi	r3,r3,255
 200b5c8:	04400434 	movhi	r17,16
 200b5cc:	8c7fffc4 	addi	r17,r17,-1
 200b5d0:	180697fa 	slli	r3,r3,31
 200b5d4:	2c4a703a 	and	r5,r5,r17
 200b5d8:	288ab03a 	or	r5,r5,r2
 200b5dc:	28c6b03a 	or	r3,r5,r3
 200b5e0:	9005883a 	mov	r2,r18
 200b5e4:	dfc00d17 	ldw	ra,52(sp)
 200b5e8:	df000c17 	ldw	fp,48(sp)
 200b5ec:	ddc00b17 	ldw	r23,44(sp)
 200b5f0:	dd800a17 	ldw	r22,40(sp)
 200b5f4:	dd400917 	ldw	r21,36(sp)
 200b5f8:	dd000817 	ldw	r20,32(sp)
 200b5fc:	dcc00717 	ldw	r19,28(sp)
 200b600:	dc800617 	ldw	r18,24(sp)
 200b604:	dc400517 	ldw	r17,20(sp)
 200b608:	dc000417 	ldw	r16,16(sp)
 200b60c:	dec00e04 	addi	sp,sp,56
 200b610:	f800283a 	ret
 200b614:	2404b03a 	or	r2,r4,r16
 200b618:	2027883a 	mov	r19,r4
 200b61c:	10003926 	beq	r2,zero,200b704 <__divdf3+0x2c0>
 200b620:	80012e26 	beq	r16,zero,200badc <__divdf3+0x698>
 200b624:	8009883a 	mov	r4,r16
 200b628:	d9800315 	stw	r6,12(sp)
 200b62c:	d9c00215 	stw	r7,8(sp)
 200b630:	200d19c0 	call	200d19c <__clzsi2>
 200b634:	d9800317 	ldw	r6,12(sp)
 200b638:	d9c00217 	ldw	r7,8(sp)
 200b63c:	113ffd44 	addi	r4,r2,-11
 200b640:	00c00704 	movi	r3,28
 200b644:	19012116 	blt	r3,r4,200bacc <__divdf3+0x688>
 200b648:	00c00744 	movi	r3,29
 200b64c:	147ffe04 	addi	r17,r2,-8
 200b650:	1907c83a 	sub	r3,r3,r4
 200b654:	8460983a 	sll	r16,r16,r17
 200b658:	98c6d83a 	srl	r3,r19,r3
 200b65c:	9c64983a 	sll	r18,r19,r17
 200b660:	1c20b03a 	or	r16,r3,r16
 200b664:	1080fcc4 	addi	r2,r2,1011
 200b668:	00abc83a 	sub	r21,zero,r2
 200b66c:	0027883a 	mov	r19,zero
 200b670:	0013883a 	mov	r9,zero
 200b674:	003f9106 	br	200b4bc <__alt_mem_mem_0+0xfcfeb4bc>
 200b678:	3446b03a 	or	r3,r6,r17
 200b67c:	18001f1e 	bne	r3,zero,200b6fc <__divdf3+0x2b8>
 200b680:	0023883a 	mov	r17,zero
 200b684:	0011883a 	mov	r8,zero
 200b688:	01c00084 	movi	r7,2
 200b68c:	003f9d06 	br	200b504 <__alt_mem_mem_0+0xfcfeb504>
 200b690:	3446b03a 	or	r3,r6,r17
 200b694:	18001526 	beq	r3,zero,200b6ec <__divdf3+0x2a8>
 200b698:	88011b26 	beq	r17,zero,200bb08 <__divdf3+0x6c4>
 200b69c:	8809883a 	mov	r4,r17
 200b6a0:	d9800315 	stw	r6,12(sp)
 200b6a4:	da400115 	stw	r9,4(sp)
 200b6a8:	200d19c0 	call	200d19c <__clzsi2>
 200b6ac:	d9800317 	ldw	r6,12(sp)
 200b6b0:	da400117 	ldw	r9,4(sp)
 200b6b4:	113ffd44 	addi	r4,r2,-11
 200b6b8:	00c00704 	movi	r3,28
 200b6bc:	19010e16 	blt	r3,r4,200baf8 <__divdf3+0x6b4>
 200b6c0:	00c00744 	movi	r3,29
 200b6c4:	123ffe04 	addi	r8,r2,-8
 200b6c8:	1907c83a 	sub	r3,r3,r4
 200b6cc:	8a22983a 	sll	r17,r17,r8
 200b6d0:	30c6d83a 	srl	r3,r6,r3
 200b6d4:	3210983a 	sll	r8,r6,r8
 200b6d8:	1c62b03a 	or	r17,r3,r17
 200b6dc:	1080fcc4 	addi	r2,r2,1011
 200b6e0:	0085c83a 	sub	r2,zero,r2
 200b6e4:	000f883a 	mov	r7,zero
 200b6e8:	003f8606 	br	200b504 <__alt_mem_mem_0+0xfcfeb504>
 200b6ec:	0023883a 	mov	r17,zero
 200b6f0:	0011883a 	mov	r8,zero
 200b6f4:	01c00044 	movi	r7,1
 200b6f8:	003f8206 	br	200b504 <__alt_mem_mem_0+0xfcfeb504>
 200b6fc:	01c000c4 	movi	r7,3
 200b700:	003f8006 	br	200b504 <__alt_mem_mem_0+0xfcfeb504>
 200b704:	04c00104 	movi	r19,4
 200b708:	0021883a 	mov	r16,zero
 200b70c:	0025883a 	mov	r18,zero
 200b710:	02400044 	movi	r9,1
 200b714:	003f6906 	br	200b4bc <__alt_mem_mem_0+0xfcfeb4bc>
 200b718:	04c00304 	movi	r19,12
 200b71c:	024000c4 	movi	r9,3
 200b720:	003f6606 	br	200b4bc <__alt_mem_mem_0+0xfcfeb4bc>
 200b724:	01400434 	movhi	r5,16
 200b728:	0007883a 	mov	r3,zero
 200b72c:	297fffc4 	addi	r5,r5,-1
 200b730:	04bfffc4 	movi	r18,-1
 200b734:	0081ffc4 	movi	r2,2047
 200b738:	003fa106 	br	200b5c0 <__alt_mem_mem_0+0xfcfeb5c0>
 200b73c:	00c00044 	movi	r3,1
 200b740:	1887c83a 	sub	r3,r3,r2
 200b744:	01000e04 	movi	r4,56
 200b748:	20c1210e 	bge	r4,r3,200bbd0 <__divdf3+0x78c>
 200b74c:	98c0004c 	andi	r3,r19,1
 200b750:	0005883a 	mov	r2,zero
 200b754:	000b883a 	mov	r5,zero
 200b758:	0025883a 	mov	r18,zero
 200b75c:	003f9806 	br	200b5c0 <__alt_mem_mem_0+0xfcfeb5c0>
 200b760:	8c00fd36 	bltu	r17,r16,200bb58 <__divdf3+0x714>
 200b764:	8440fb26 	beq	r16,r17,200bb54 <__divdf3+0x710>
 200b768:	8007883a 	mov	r3,r16
 200b76c:	ad7fffc4 	addi	r21,r21,-1
 200b770:	0021883a 	mov	r16,zero
 200b774:	4004d63a 	srli	r2,r8,24
 200b778:	8822923a 	slli	r17,r17,8
 200b77c:	1809883a 	mov	r4,r3
 200b780:	402c923a 	slli	r22,r8,8
 200b784:	88b8b03a 	or	fp,r17,r2
 200b788:	e028d43a 	srli	r20,fp,16
 200b78c:	d8c00015 	stw	r3,0(sp)
 200b790:	e5ffffcc 	andi	r23,fp,65535
 200b794:	a00b883a 	mov	r5,r20
 200b798:	200aadc0 	call	200aadc <__udivsi3>
 200b79c:	d8c00017 	ldw	r3,0(sp)
 200b7a0:	a00b883a 	mov	r5,r20
 200b7a4:	d8800315 	stw	r2,12(sp)
 200b7a8:	1809883a 	mov	r4,r3
 200b7ac:	200ab400 	call	200ab40 <__umodsi3>
 200b7b0:	d9800317 	ldw	r6,12(sp)
 200b7b4:	1006943a 	slli	r3,r2,16
 200b7b8:	9004d43a 	srli	r2,r18,16
 200b7bc:	b9a3383a 	mul	r17,r23,r6
 200b7c0:	10c4b03a 	or	r2,r2,r3
 200b7c4:	1440062e 	bgeu	r2,r17,200b7e0 <__divdf3+0x39c>
 200b7c8:	1705883a 	add	r2,r2,fp
 200b7cc:	30ffffc4 	addi	r3,r6,-1
 200b7d0:	1700ee36 	bltu	r2,fp,200bb8c <__divdf3+0x748>
 200b7d4:	1440ed2e 	bgeu	r2,r17,200bb8c <__divdf3+0x748>
 200b7d8:	31bfff84 	addi	r6,r6,-2
 200b7dc:	1705883a 	add	r2,r2,fp
 200b7e0:	1463c83a 	sub	r17,r2,r17
 200b7e4:	a00b883a 	mov	r5,r20
 200b7e8:	8809883a 	mov	r4,r17
 200b7ec:	d9800315 	stw	r6,12(sp)
 200b7f0:	200aadc0 	call	200aadc <__udivsi3>
 200b7f4:	a00b883a 	mov	r5,r20
 200b7f8:	8809883a 	mov	r4,r17
 200b7fc:	d8800215 	stw	r2,8(sp)
 200b800:	200ab400 	call	200ab40 <__umodsi3>
 200b804:	d9c00217 	ldw	r7,8(sp)
 200b808:	1004943a 	slli	r2,r2,16
 200b80c:	94bfffcc 	andi	r18,r18,65535
 200b810:	b9d1383a 	mul	r8,r23,r7
 200b814:	90a4b03a 	or	r18,r18,r2
 200b818:	d9800317 	ldw	r6,12(sp)
 200b81c:	9200062e 	bgeu	r18,r8,200b838 <__divdf3+0x3f4>
 200b820:	9725883a 	add	r18,r18,fp
 200b824:	38bfffc4 	addi	r2,r7,-1
 200b828:	9700d636 	bltu	r18,fp,200bb84 <__divdf3+0x740>
 200b82c:	9200d52e 	bgeu	r18,r8,200bb84 <__divdf3+0x740>
 200b830:	39ffff84 	addi	r7,r7,-2
 200b834:	9725883a 	add	r18,r18,fp
 200b838:	3004943a 	slli	r2,r6,16
 200b83c:	b012d43a 	srli	r9,r22,16
 200b840:	b1bfffcc 	andi	r6,r22,65535
 200b844:	11e2b03a 	or	r17,r2,r7
 200b848:	8806d43a 	srli	r3,r17,16
 200b84c:	893fffcc 	andi	r4,r17,65535
 200b850:	218b383a 	mul	r5,r4,r6
 200b854:	30c5383a 	mul	r2,r6,r3
 200b858:	2249383a 	mul	r4,r4,r9
 200b85c:	280ed43a 	srli	r7,r5,16
 200b860:	9225c83a 	sub	r18,r18,r8
 200b864:	2089883a 	add	r4,r4,r2
 200b868:	3909883a 	add	r4,r7,r4
 200b86c:	1a47383a 	mul	r3,r3,r9
 200b870:	2080022e 	bgeu	r4,r2,200b87c <__divdf3+0x438>
 200b874:	00800074 	movhi	r2,1
 200b878:	1887883a 	add	r3,r3,r2
 200b87c:	2004d43a 	srli	r2,r4,16
 200b880:	2008943a 	slli	r4,r4,16
 200b884:	297fffcc 	andi	r5,r5,65535
 200b888:	10c7883a 	add	r3,r2,r3
 200b88c:	2149883a 	add	r4,r4,r5
 200b890:	90c0a536 	bltu	r18,r3,200bb28 <__divdf3+0x6e4>
 200b894:	90c0bf26 	beq	r18,r3,200bb94 <__divdf3+0x750>
 200b898:	90c7c83a 	sub	r3,r18,r3
 200b89c:	810fc83a 	sub	r7,r16,r4
 200b8a0:	81e5803a 	cmpltu	r18,r16,r7
 200b8a4:	1ca5c83a 	sub	r18,r3,r18
 200b8a8:	e480c126 	beq	fp,r18,200bbb0 <__divdf3+0x76c>
 200b8ac:	a00b883a 	mov	r5,r20
 200b8b0:	9009883a 	mov	r4,r18
 200b8b4:	d9800315 	stw	r6,12(sp)
 200b8b8:	d9c00215 	stw	r7,8(sp)
 200b8bc:	da400115 	stw	r9,4(sp)
 200b8c0:	200aadc0 	call	200aadc <__udivsi3>
 200b8c4:	a00b883a 	mov	r5,r20
 200b8c8:	9009883a 	mov	r4,r18
 200b8cc:	d8800015 	stw	r2,0(sp)
 200b8d0:	200ab400 	call	200ab40 <__umodsi3>
 200b8d4:	d9c00217 	ldw	r7,8(sp)
 200b8d8:	da000017 	ldw	r8,0(sp)
 200b8dc:	1006943a 	slli	r3,r2,16
 200b8e0:	3804d43a 	srli	r2,r7,16
 200b8e4:	ba21383a 	mul	r16,r23,r8
 200b8e8:	d9800317 	ldw	r6,12(sp)
 200b8ec:	10c4b03a 	or	r2,r2,r3
 200b8f0:	da400117 	ldw	r9,4(sp)
 200b8f4:	1400062e 	bgeu	r2,r16,200b910 <__divdf3+0x4cc>
 200b8f8:	1705883a 	add	r2,r2,fp
 200b8fc:	40ffffc4 	addi	r3,r8,-1
 200b900:	1700ad36 	bltu	r2,fp,200bbb8 <__divdf3+0x774>
 200b904:	1400ac2e 	bgeu	r2,r16,200bbb8 <__divdf3+0x774>
 200b908:	423fff84 	addi	r8,r8,-2
 200b90c:	1705883a 	add	r2,r2,fp
 200b910:	1421c83a 	sub	r16,r2,r16
 200b914:	a00b883a 	mov	r5,r20
 200b918:	8009883a 	mov	r4,r16
 200b91c:	d9800315 	stw	r6,12(sp)
 200b920:	d9c00215 	stw	r7,8(sp)
 200b924:	da000015 	stw	r8,0(sp)
 200b928:	da400115 	stw	r9,4(sp)
 200b92c:	200aadc0 	call	200aadc <__udivsi3>
 200b930:	8009883a 	mov	r4,r16
 200b934:	a00b883a 	mov	r5,r20
 200b938:	1025883a 	mov	r18,r2
 200b93c:	200ab400 	call	200ab40 <__umodsi3>
 200b940:	d9c00217 	ldw	r7,8(sp)
 200b944:	1004943a 	slli	r2,r2,16
 200b948:	bcaf383a 	mul	r23,r23,r18
 200b94c:	393fffcc 	andi	r4,r7,65535
 200b950:	2088b03a 	or	r4,r4,r2
 200b954:	d9800317 	ldw	r6,12(sp)
 200b958:	da000017 	ldw	r8,0(sp)
 200b95c:	da400117 	ldw	r9,4(sp)
 200b960:	25c0062e 	bgeu	r4,r23,200b97c <__divdf3+0x538>
 200b964:	2709883a 	add	r4,r4,fp
 200b968:	90bfffc4 	addi	r2,r18,-1
 200b96c:	27009436 	bltu	r4,fp,200bbc0 <__divdf3+0x77c>
 200b970:	25c0932e 	bgeu	r4,r23,200bbc0 <__divdf3+0x77c>
 200b974:	94bfff84 	addi	r18,r18,-2
 200b978:	2709883a 	add	r4,r4,fp
 200b97c:	4004943a 	slli	r2,r8,16
 200b980:	25efc83a 	sub	r23,r4,r23
 200b984:	1490b03a 	or	r8,r2,r18
 200b988:	4008d43a 	srli	r4,r8,16
 200b98c:	40ffffcc 	andi	r3,r8,65535
 200b990:	30c5383a 	mul	r2,r6,r3
 200b994:	1a47383a 	mul	r3,r3,r9
 200b998:	310d383a 	mul	r6,r6,r4
 200b99c:	100ad43a 	srli	r5,r2,16
 200b9a0:	4913383a 	mul	r9,r9,r4
 200b9a4:	1987883a 	add	r3,r3,r6
 200b9a8:	28c7883a 	add	r3,r5,r3
 200b9ac:	1980022e 	bgeu	r3,r6,200b9b8 <__divdf3+0x574>
 200b9b0:	01000074 	movhi	r4,1
 200b9b4:	4913883a 	add	r9,r9,r4
 200b9b8:	1808d43a 	srli	r4,r3,16
 200b9bc:	1806943a 	slli	r3,r3,16
 200b9c0:	10bfffcc 	andi	r2,r2,65535
 200b9c4:	2253883a 	add	r9,r4,r9
 200b9c8:	1887883a 	add	r3,r3,r2
 200b9cc:	ba403836 	bltu	r23,r9,200bab0 <__divdf3+0x66c>
 200b9d0:	ba403626 	beq	r23,r9,200baac <__divdf3+0x668>
 200b9d4:	42000054 	ori	r8,r8,1
 200b9d8:	a880ffc4 	addi	r2,r21,1023
 200b9dc:	00bf570e 	bge	zero,r2,200b73c <__alt_mem_mem_0+0xfcfeb73c>
 200b9e0:	40c001cc 	andi	r3,r8,7
 200b9e4:	18000726 	beq	r3,zero,200ba04 <__divdf3+0x5c0>
 200b9e8:	40c003cc 	andi	r3,r8,15
 200b9ec:	01000104 	movi	r4,4
 200b9f0:	19000426 	beq	r3,r4,200ba04 <__divdf3+0x5c0>
 200b9f4:	4107883a 	add	r3,r8,r4
 200b9f8:	1a11803a 	cmpltu	r8,r3,r8
 200b9fc:	8a23883a 	add	r17,r17,r8
 200ba00:	1811883a 	mov	r8,r3
 200ba04:	88c0402c 	andhi	r3,r17,256
 200ba08:	18000426 	beq	r3,zero,200ba1c <__divdf3+0x5d8>
 200ba0c:	00ffc034 	movhi	r3,65280
 200ba10:	18ffffc4 	addi	r3,r3,-1
 200ba14:	a8810004 	addi	r2,r21,1024
 200ba18:	88e2703a 	and	r17,r17,r3
 200ba1c:	00c1ff84 	movi	r3,2046
 200ba20:	18bee316 	blt	r3,r2,200b5b0 <__alt_mem_mem_0+0xfcfeb5b0>
 200ba24:	8824977a 	slli	r18,r17,29
 200ba28:	4010d0fa 	srli	r8,r8,3
 200ba2c:	8822927a 	slli	r17,r17,9
 200ba30:	1081ffcc 	andi	r2,r2,2047
 200ba34:	9224b03a 	or	r18,r18,r8
 200ba38:	880ad33a 	srli	r5,r17,12
 200ba3c:	98c0004c 	andi	r3,r19,1
 200ba40:	003edf06 	br	200b5c0 <__alt_mem_mem_0+0xfcfeb5c0>
 200ba44:	8080022c 	andhi	r2,r16,8
 200ba48:	10001226 	beq	r2,zero,200ba94 <__divdf3+0x650>
 200ba4c:	8880022c 	andhi	r2,r17,8
 200ba50:	1000101e 	bne	r2,zero,200ba94 <__divdf3+0x650>
 200ba54:	00800434 	movhi	r2,16
 200ba58:	89400234 	orhi	r5,r17,8
 200ba5c:	10bfffc4 	addi	r2,r2,-1
 200ba60:	b007883a 	mov	r3,r22
 200ba64:	288a703a 	and	r5,r5,r2
 200ba68:	4025883a 	mov	r18,r8
 200ba6c:	003f3106 	br	200b734 <__alt_mem_mem_0+0xfcfeb734>
 200ba70:	008000c4 	movi	r2,3
 200ba74:	3880a626 	beq	r7,r2,200bd10 <__divdf3+0x8cc>
 200ba78:	00800044 	movi	r2,1
 200ba7c:	3880521e 	bne	r7,r2,200bbc8 <__divdf3+0x784>
 200ba80:	b807883a 	mov	r3,r23
 200ba84:	0005883a 	mov	r2,zero
 200ba88:	000b883a 	mov	r5,zero
 200ba8c:	0025883a 	mov	r18,zero
 200ba90:	003ecb06 	br	200b5c0 <__alt_mem_mem_0+0xfcfeb5c0>
 200ba94:	00800434 	movhi	r2,16
 200ba98:	81400234 	orhi	r5,r16,8
 200ba9c:	10bfffc4 	addi	r2,r2,-1
 200baa0:	a007883a 	mov	r3,r20
 200baa4:	288a703a 	and	r5,r5,r2
 200baa8:	003f2206 	br	200b734 <__alt_mem_mem_0+0xfcfeb734>
 200baac:	183fca26 	beq	r3,zero,200b9d8 <__alt_mem_mem_0+0xfcfeb9d8>
 200bab0:	e5ef883a 	add	r23,fp,r23
 200bab4:	40bfffc4 	addi	r2,r8,-1
 200bab8:	bf00392e 	bgeu	r23,fp,200bba0 <__divdf3+0x75c>
 200babc:	1011883a 	mov	r8,r2
 200bac0:	ba7fc41e 	bne	r23,r9,200b9d4 <__alt_mem_mem_0+0xfcfeb9d4>
 200bac4:	b0ffc31e 	bne	r22,r3,200b9d4 <__alt_mem_mem_0+0xfcfeb9d4>
 200bac8:	003fc306 	br	200b9d8 <__alt_mem_mem_0+0xfcfeb9d8>
 200bacc:	143ff604 	addi	r16,r2,-40
 200bad0:	9c20983a 	sll	r16,r19,r16
 200bad4:	0025883a 	mov	r18,zero
 200bad8:	003ee206 	br	200b664 <__alt_mem_mem_0+0xfcfeb664>
 200badc:	d9800315 	stw	r6,12(sp)
 200bae0:	d9c00215 	stw	r7,8(sp)
 200bae4:	200d19c0 	call	200d19c <__clzsi2>
 200bae8:	10800804 	addi	r2,r2,32
 200baec:	d9c00217 	ldw	r7,8(sp)
 200baf0:	d9800317 	ldw	r6,12(sp)
 200baf4:	003ed106 	br	200b63c <__alt_mem_mem_0+0xfcfeb63c>
 200baf8:	147ff604 	addi	r17,r2,-40
 200bafc:	3462983a 	sll	r17,r6,r17
 200bb00:	0011883a 	mov	r8,zero
 200bb04:	003ef506 	br	200b6dc <__alt_mem_mem_0+0xfcfeb6dc>
 200bb08:	3009883a 	mov	r4,r6
 200bb0c:	d9800315 	stw	r6,12(sp)
 200bb10:	da400115 	stw	r9,4(sp)
 200bb14:	200d19c0 	call	200d19c <__clzsi2>
 200bb18:	10800804 	addi	r2,r2,32
 200bb1c:	da400117 	ldw	r9,4(sp)
 200bb20:	d9800317 	ldw	r6,12(sp)
 200bb24:	003ee306 	br	200b6b4 <__alt_mem_mem_0+0xfcfeb6b4>
 200bb28:	85a1883a 	add	r16,r16,r22
 200bb2c:	8585803a 	cmpltu	r2,r16,r22
 200bb30:	1705883a 	add	r2,r2,fp
 200bb34:	14a5883a 	add	r18,r2,r18
 200bb38:	88bfffc4 	addi	r2,r17,-1
 200bb3c:	e4800c2e 	bgeu	fp,r18,200bb70 <__divdf3+0x72c>
 200bb40:	90c03e36 	bltu	r18,r3,200bc3c <__divdf3+0x7f8>
 200bb44:	1c806926 	beq	r3,r18,200bcec <__divdf3+0x8a8>
 200bb48:	90c7c83a 	sub	r3,r18,r3
 200bb4c:	1023883a 	mov	r17,r2
 200bb50:	003f5206 	br	200b89c <__alt_mem_mem_0+0xfcfeb89c>
 200bb54:	923f0436 	bltu	r18,r8,200b768 <__alt_mem_mem_0+0xfcfeb768>
 200bb58:	800897fa 	slli	r4,r16,31
 200bb5c:	9004d07a 	srli	r2,r18,1
 200bb60:	8006d07a 	srli	r3,r16,1
 200bb64:	902097fa 	slli	r16,r18,31
 200bb68:	20a4b03a 	or	r18,r4,r2
 200bb6c:	003f0106 	br	200b774 <__alt_mem_mem_0+0xfcfeb774>
 200bb70:	e4bff51e 	bne	fp,r18,200bb48 <__alt_mem_mem_0+0xfcfebb48>
 200bb74:	85bff22e 	bgeu	r16,r22,200bb40 <__alt_mem_mem_0+0xfcfebb40>
 200bb78:	e0c7c83a 	sub	r3,fp,r3
 200bb7c:	1023883a 	mov	r17,r2
 200bb80:	003f4606 	br	200b89c <__alt_mem_mem_0+0xfcfeb89c>
 200bb84:	100f883a 	mov	r7,r2
 200bb88:	003f2b06 	br	200b838 <__alt_mem_mem_0+0xfcfeb838>
 200bb8c:	180d883a 	mov	r6,r3
 200bb90:	003f1306 	br	200b7e0 <__alt_mem_mem_0+0xfcfeb7e0>
 200bb94:	813fe436 	bltu	r16,r4,200bb28 <__alt_mem_mem_0+0xfcfebb28>
 200bb98:	0007883a 	mov	r3,zero
 200bb9c:	003f3f06 	br	200b89c <__alt_mem_mem_0+0xfcfeb89c>
 200bba0:	ba402c36 	bltu	r23,r9,200bc54 <__divdf3+0x810>
 200bba4:	4dc05426 	beq	r9,r23,200bcf8 <__divdf3+0x8b4>
 200bba8:	1011883a 	mov	r8,r2
 200bbac:	003f8906 	br	200b9d4 <__alt_mem_mem_0+0xfcfeb9d4>
 200bbb0:	023fffc4 	movi	r8,-1
 200bbb4:	003f8806 	br	200b9d8 <__alt_mem_mem_0+0xfcfeb9d8>
 200bbb8:	1811883a 	mov	r8,r3
 200bbbc:	003f5406 	br	200b910 <__alt_mem_mem_0+0xfcfeb910>
 200bbc0:	1025883a 	mov	r18,r2
 200bbc4:	003f6d06 	br	200b97c <__alt_mem_mem_0+0xfcfeb97c>
 200bbc8:	b827883a 	mov	r19,r23
 200bbcc:	003f8206 	br	200b9d8 <__alt_mem_mem_0+0xfcfeb9d8>
 200bbd0:	010007c4 	movi	r4,31
 200bbd4:	20c02616 	blt	r4,r3,200bc70 <__divdf3+0x82c>
 200bbd8:	00800804 	movi	r2,32
 200bbdc:	10c5c83a 	sub	r2,r2,r3
 200bbe0:	888a983a 	sll	r5,r17,r2
 200bbe4:	40c8d83a 	srl	r4,r8,r3
 200bbe8:	4084983a 	sll	r2,r8,r2
 200bbec:	88e2d83a 	srl	r17,r17,r3
 200bbf0:	2906b03a 	or	r3,r5,r4
 200bbf4:	1004c03a 	cmpne	r2,r2,zero
 200bbf8:	1886b03a 	or	r3,r3,r2
 200bbfc:	188001cc 	andi	r2,r3,7
 200bc00:	10000726 	beq	r2,zero,200bc20 <__divdf3+0x7dc>
 200bc04:	188003cc 	andi	r2,r3,15
 200bc08:	01000104 	movi	r4,4
 200bc0c:	11000426 	beq	r2,r4,200bc20 <__divdf3+0x7dc>
 200bc10:	1805883a 	mov	r2,r3
 200bc14:	10c00104 	addi	r3,r2,4
 200bc18:	1885803a 	cmpltu	r2,r3,r2
 200bc1c:	88a3883a 	add	r17,r17,r2
 200bc20:	8880202c 	andhi	r2,r17,128
 200bc24:	10002726 	beq	r2,zero,200bcc4 <__divdf3+0x880>
 200bc28:	98c0004c 	andi	r3,r19,1
 200bc2c:	00800044 	movi	r2,1
 200bc30:	000b883a 	mov	r5,zero
 200bc34:	0025883a 	mov	r18,zero
 200bc38:	003e6106 	br	200b5c0 <__alt_mem_mem_0+0xfcfeb5c0>
 200bc3c:	85a1883a 	add	r16,r16,r22
 200bc40:	8585803a 	cmpltu	r2,r16,r22
 200bc44:	1705883a 	add	r2,r2,fp
 200bc48:	14a5883a 	add	r18,r2,r18
 200bc4c:	8c7fff84 	addi	r17,r17,-2
 200bc50:	003f1106 	br	200b898 <__alt_mem_mem_0+0xfcfeb898>
 200bc54:	b589883a 	add	r4,r22,r22
 200bc58:	25ad803a 	cmpltu	r22,r4,r22
 200bc5c:	b739883a 	add	fp,r22,fp
 200bc60:	40bfff84 	addi	r2,r8,-2
 200bc64:	bf2f883a 	add	r23,r23,fp
 200bc68:	202d883a 	mov	r22,r4
 200bc6c:	003f9306 	br	200babc <__alt_mem_mem_0+0xfcfebabc>
 200bc70:	013ff844 	movi	r4,-31
 200bc74:	2085c83a 	sub	r2,r4,r2
 200bc78:	8888d83a 	srl	r4,r17,r2
 200bc7c:	00800804 	movi	r2,32
 200bc80:	18802126 	beq	r3,r2,200bd08 <__divdf3+0x8c4>
 200bc84:	00801004 	movi	r2,64
 200bc88:	10c5c83a 	sub	r2,r2,r3
 200bc8c:	8884983a 	sll	r2,r17,r2
 200bc90:	1204b03a 	or	r2,r2,r8
 200bc94:	1004c03a 	cmpne	r2,r2,zero
 200bc98:	2084b03a 	or	r2,r4,r2
 200bc9c:	144001cc 	andi	r17,r2,7
 200bca0:	88000d1e 	bne	r17,zero,200bcd8 <__divdf3+0x894>
 200bca4:	000b883a 	mov	r5,zero
 200bca8:	1024d0fa 	srli	r18,r2,3
 200bcac:	98c0004c 	andi	r3,r19,1
 200bcb0:	0005883a 	mov	r2,zero
 200bcb4:	9464b03a 	or	r18,r18,r17
 200bcb8:	003e4106 	br	200b5c0 <__alt_mem_mem_0+0xfcfeb5c0>
 200bcbc:	1007883a 	mov	r3,r2
 200bcc0:	0023883a 	mov	r17,zero
 200bcc4:	880a927a 	slli	r5,r17,9
 200bcc8:	1805883a 	mov	r2,r3
 200bccc:	8822977a 	slli	r17,r17,29
 200bcd0:	280ad33a 	srli	r5,r5,12
 200bcd4:	003ff406 	br	200bca8 <__alt_mem_mem_0+0xfcfebca8>
 200bcd8:	10c003cc 	andi	r3,r2,15
 200bcdc:	01000104 	movi	r4,4
 200bce0:	193ff626 	beq	r3,r4,200bcbc <__alt_mem_mem_0+0xfcfebcbc>
 200bce4:	0023883a 	mov	r17,zero
 200bce8:	003fca06 	br	200bc14 <__alt_mem_mem_0+0xfcfebc14>
 200bcec:	813fd336 	bltu	r16,r4,200bc3c <__alt_mem_mem_0+0xfcfebc3c>
 200bcf0:	1023883a 	mov	r17,r2
 200bcf4:	003fa806 	br	200bb98 <__alt_mem_mem_0+0xfcfebb98>
 200bcf8:	b0ffd636 	bltu	r22,r3,200bc54 <__alt_mem_mem_0+0xfcfebc54>
 200bcfc:	1011883a 	mov	r8,r2
 200bd00:	b0ff341e 	bne	r22,r3,200b9d4 <__alt_mem_mem_0+0xfcfeb9d4>
 200bd04:	003f3406 	br	200b9d8 <__alt_mem_mem_0+0xfcfeb9d8>
 200bd08:	0005883a 	mov	r2,zero
 200bd0c:	003fe006 	br	200bc90 <__alt_mem_mem_0+0xfcfebc90>
 200bd10:	00800434 	movhi	r2,16
 200bd14:	89400234 	orhi	r5,r17,8
 200bd18:	10bfffc4 	addi	r2,r2,-1
 200bd1c:	b807883a 	mov	r3,r23
 200bd20:	288a703a 	and	r5,r5,r2
 200bd24:	4025883a 	mov	r18,r8
 200bd28:	003e8206 	br	200b734 <__alt_mem_mem_0+0xfcfeb734>

0200bd2c <__eqdf2>:
 200bd2c:	2804d53a 	srli	r2,r5,20
 200bd30:	3806d53a 	srli	r3,r7,20
 200bd34:	02000434 	movhi	r8,16
 200bd38:	423fffc4 	addi	r8,r8,-1
 200bd3c:	1081ffcc 	andi	r2,r2,2047
 200bd40:	0281ffc4 	movi	r10,2047
 200bd44:	2a12703a 	and	r9,r5,r8
 200bd48:	18c1ffcc 	andi	r3,r3,2047
 200bd4c:	3a10703a 	and	r8,r7,r8
 200bd50:	280ad7fa 	srli	r5,r5,31
 200bd54:	380ed7fa 	srli	r7,r7,31
 200bd58:	12801026 	beq	r2,r10,200bd9c <__eqdf2+0x70>
 200bd5c:	0281ffc4 	movi	r10,2047
 200bd60:	1a800a26 	beq	r3,r10,200bd8c <__eqdf2+0x60>
 200bd64:	10c00226 	beq	r2,r3,200bd70 <__eqdf2+0x44>
 200bd68:	00800044 	movi	r2,1
 200bd6c:	f800283a 	ret
 200bd70:	4a3ffd1e 	bne	r9,r8,200bd68 <__alt_mem_mem_0+0xfcfebd68>
 200bd74:	21bffc1e 	bne	r4,r6,200bd68 <__alt_mem_mem_0+0xfcfebd68>
 200bd78:	29c00c26 	beq	r5,r7,200bdac <__eqdf2+0x80>
 200bd7c:	103ffa1e 	bne	r2,zero,200bd68 <__alt_mem_mem_0+0xfcfebd68>
 200bd80:	2244b03a 	or	r2,r4,r9
 200bd84:	1004c03a 	cmpne	r2,r2,zero
 200bd88:	f800283a 	ret
 200bd8c:	3214b03a 	or	r10,r6,r8
 200bd90:	503ff426 	beq	r10,zero,200bd64 <__alt_mem_mem_0+0xfcfebd64>
 200bd94:	00800044 	movi	r2,1
 200bd98:	f800283a 	ret
 200bd9c:	2254b03a 	or	r10,r4,r9
 200bda0:	503fee26 	beq	r10,zero,200bd5c <__alt_mem_mem_0+0xfcfebd5c>
 200bda4:	00800044 	movi	r2,1
 200bda8:	f800283a 	ret
 200bdac:	0005883a 	mov	r2,zero
 200bdb0:	f800283a 	ret

0200bdb4 <__gedf2>:
 200bdb4:	2804d53a 	srli	r2,r5,20
 200bdb8:	3806d53a 	srli	r3,r7,20
 200bdbc:	02000434 	movhi	r8,16
 200bdc0:	423fffc4 	addi	r8,r8,-1
 200bdc4:	1081ffcc 	andi	r2,r2,2047
 200bdc8:	0241ffc4 	movi	r9,2047
 200bdcc:	2a14703a 	and	r10,r5,r8
 200bdd0:	18c1ffcc 	andi	r3,r3,2047
 200bdd4:	3a10703a 	and	r8,r7,r8
 200bdd8:	280ad7fa 	srli	r5,r5,31
 200bddc:	380ed7fa 	srli	r7,r7,31
 200bde0:	12401d26 	beq	r2,r9,200be58 <__gedf2+0xa4>
 200bde4:	0241ffc4 	movi	r9,2047
 200bde8:	1a401226 	beq	r3,r9,200be34 <__gedf2+0x80>
 200bdec:	1000081e 	bne	r2,zero,200be10 <__gedf2+0x5c>
 200bdf0:	2296b03a 	or	r11,r4,r10
 200bdf4:	5813003a 	cmpeq	r9,r11,zero
 200bdf8:	1800091e 	bne	r3,zero,200be20 <__gedf2+0x6c>
 200bdfc:	3218b03a 	or	r12,r6,r8
 200be00:	6000071e 	bne	r12,zero,200be20 <__gedf2+0x6c>
 200be04:	0005883a 	mov	r2,zero
 200be08:	5800101e 	bne	r11,zero,200be4c <__gedf2+0x98>
 200be0c:	f800283a 	ret
 200be10:	18000c1e 	bne	r3,zero,200be44 <__gedf2+0x90>
 200be14:	3212b03a 	or	r9,r6,r8
 200be18:	48000c26 	beq	r9,zero,200be4c <__gedf2+0x98>
 200be1c:	0013883a 	mov	r9,zero
 200be20:	39c03fcc 	andi	r7,r7,255
 200be24:	48000826 	beq	r9,zero,200be48 <__gedf2+0x94>
 200be28:	38000926 	beq	r7,zero,200be50 <__gedf2+0x9c>
 200be2c:	00800044 	movi	r2,1
 200be30:	f800283a 	ret
 200be34:	3212b03a 	or	r9,r6,r8
 200be38:	483fec26 	beq	r9,zero,200bdec <__alt_mem_mem_0+0xfcfebdec>
 200be3c:	00bfff84 	movi	r2,-2
 200be40:	f800283a 	ret
 200be44:	39c03fcc 	andi	r7,r7,255
 200be48:	29c00626 	beq	r5,r7,200be64 <__gedf2+0xb0>
 200be4c:	283ff726 	beq	r5,zero,200be2c <__alt_mem_mem_0+0xfcfebe2c>
 200be50:	00bfffc4 	movi	r2,-1
 200be54:	f800283a 	ret
 200be58:	2292b03a 	or	r9,r4,r10
 200be5c:	483fe126 	beq	r9,zero,200bde4 <__alt_mem_mem_0+0xfcfebde4>
 200be60:	003ff606 	br	200be3c <__alt_mem_mem_0+0xfcfebe3c>
 200be64:	18bff916 	blt	r3,r2,200be4c <__alt_mem_mem_0+0xfcfebe4c>
 200be68:	10c00316 	blt	r2,r3,200be78 <__gedf2+0xc4>
 200be6c:	42bff736 	bltu	r8,r10,200be4c <__alt_mem_mem_0+0xfcfebe4c>
 200be70:	52000326 	beq	r10,r8,200be80 <__gedf2+0xcc>
 200be74:	5200042e 	bgeu	r10,r8,200be88 <__gedf2+0xd4>
 200be78:	283fec1e 	bne	r5,zero,200be2c <__alt_mem_mem_0+0xfcfebe2c>
 200be7c:	003ff406 	br	200be50 <__alt_mem_mem_0+0xfcfebe50>
 200be80:	313ff236 	bltu	r6,r4,200be4c <__alt_mem_mem_0+0xfcfebe4c>
 200be84:	21bffc36 	bltu	r4,r6,200be78 <__alt_mem_mem_0+0xfcfebe78>
 200be88:	0005883a 	mov	r2,zero
 200be8c:	f800283a 	ret

0200be90 <__ledf2>:
 200be90:	2804d53a 	srli	r2,r5,20
 200be94:	3810d53a 	srli	r8,r7,20
 200be98:	00c00434 	movhi	r3,16
 200be9c:	18ffffc4 	addi	r3,r3,-1
 200bea0:	1081ffcc 	andi	r2,r2,2047
 200bea4:	0241ffc4 	movi	r9,2047
 200bea8:	28d4703a 	and	r10,r5,r3
 200beac:	4201ffcc 	andi	r8,r8,2047
 200beb0:	38c6703a 	and	r3,r7,r3
 200beb4:	280ad7fa 	srli	r5,r5,31
 200beb8:	380ed7fa 	srli	r7,r7,31
 200bebc:	12401f26 	beq	r2,r9,200bf3c <__ledf2+0xac>
 200bec0:	0241ffc4 	movi	r9,2047
 200bec4:	42401426 	beq	r8,r9,200bf18 <__ledf2+0x88>
 200bec8:	1000091e 	bne	r2,zero,200bef0 <__ledf2+0x60>
 200becc:	2296b03a 	or	r11,r4,r10
 200bed0:	5813003a 	cmpeq	r9,r11,zero
 200bed4:	29403fcc 	andi	r5,r5,255
 200bed8:	40000a1e 	bne	r8,zero,200bf04 <__ledf2+0x74>
 200bedc:	30d8b03a 	or	r12,r6,r3
 200bee0:	6000081e 	bne	r12,zero,200bf04 <__ledf2+0x74>
 200bee4:	0005883a 	mov	r2,zero
 200bee8:	5800111e 	bne	r11,zero,200bf30 <__ledf2+0xa0>
 200beec:	f800283a 	ret
 200bef0:	29403fcc 	andi	r5,r5,255
 200bef4:	40000c1e 	bne	r8,zero,200bf28 <__ledf2+0x98>
 200bef8:	30d2b03a 	or	r9,r6,r3
 200befc:	48000c26 	beq	r9,zero,200bf30 <__ledf2+0xa0>
 200bf00:	0013883a 	mov	r9,zero
 200bf04:	39c03fcc 	andi	r7,r7,255
 200bf08:	48000826 	beq	r9,zero,200bf2c <__ledf2+0x9c>
 200bf0c:	38001126 	beq	r7,zero,200bf54 <__ledf2+0xc4>
 200bf10:	00800044 	movi	r2,1
 200bf14:	f800283a 	ret
 200bf18:	30d2b03a 	or	r9,r6,r3
 200bf1c:	483fea26 	beq	r9,zero,200bec8 <__alt_mem_mem_0+0xfcfebec8>
 200bf20:	00800084 	movi	r2,2
 200bf24:	f800283a 	ret
 200bf28:	39c03fcc 	andi	r7,r7,255
 200bf2c:	39400726 	beq	r7,r5,200bf4c <__ledf2+0xbc>
 200bf30:	2800081e 	bne	r5,zero,200bf54 <__ledf2+0xc4>
 200bf34:	00800044 	movi	r2,1
 200bf38:	f800283a 	ret
 200bf3c:	2292b03a 	or	r9,r4,r10
 200bf40:	483fdf26 	beq	r9,zero,200bec0 <__alt_mem_mem_0+0xfcfebec0>
 200bf44:	00800084 	movi	r2,2
 200bf48:	f800283a 	ret
 200bf4c:	4080030e 	bge	r8,r2,200bf5c <__ledf2+0xcc>
 200bf50:	383fef26 	beq	r7,zero,200bf10 <__alt_mem_mem_0+0xfcfebf10>
 200bf54:	00bfffc4 	movi	r2,-1
 200bf58:	f800283a 	ret
 200bf5c:	123feb16 	blt	r2,r8,200bf0c <__alt_mem_mem_0+0xfcfebf0c>
 200bf60:	1abff336 	bltu	r3,r10,200bf30 <__alt_mem_mem_0+0xfcfebf30>
 200bf64:	50c00326 	beq	r10,r3,200bf74 <__ledf2+0xe4>
 200bf68:	50c0042e 	bgeu	r10,r3,200bf7c <__ledf2+0xec>
 200bf6c:	283fe81e 	bne	r5,zero,200bf10 <__alt_mem_mem_0+0xfcfebf10>
 200bf70:	003ff806 	br	200bf54 <__alt_mem_mem_0+0xfcfebf54>
 200bf74:	313fee36 	bltu	r6,r4,200bf30 <__alt_mem_mem_0+0xfcfebf30>
 200bf78:	21bffc36 	bltu	r4,r6,200bf6c <__alt_mem_mem_0+0xfcfebf6c>
 200bf7c:	0005883a 	mov	r2,zero
 200bf80:	f800283a 	ret

0200bf84 <__muldf3>:
 200bf84:	defff304 	addi	sp,sp,-52
 200bf88:	2804d53a 	srli	r2,r5,20
 200bf8c:	dd800915 	stw	r22,36(sp)
 200bf90:	282cd7fa 	srli	r22,r5,31
 200bf94:	dc000315 	stw	r16,12(sp)
 200bf98:	04000434 	movhi	r16,16
 200bf9c:	dd400815 	stw	r21,32(sp)
 200bfa0:	dc800515 	stw	r18,20(sp)
 200bfa4:	843fffc4 	addi	r16,r16,-1
 200bfa8:	dfc00c15 	stw	ra,48(sp)
 200bfac:	df000b15 	stw	fp,44(sp)
 200bfb0:	ddc00a15 	stw	r23,40(sp)
 200bfb4:	dd000715 	stw	r20,28(sp)
 200bfb8:	dcc00615 	stw	r19,24(sp)
 200bfbc:	dc400415 	stw	r17,16(sp)
 200bfc0:	1481ffcc 	andi	r18,r2,2047
 200bfc4:	2c20703a 	and	r16,r5,r16
 200bfc8:	b02b883a 	mov	r21,r22
 200bfcc:	b2403fcc 	andi	r9,r22,255
 200bfd0:	90006026 	beq	r18,zero,200c154 <__muldf3+0x1d0>
 200bfd4:	0081ffc4 	movi	r2,2047
 200bfd8:	2029883a 	mov	r20,r4
 200bfdc:	90803626 	beq	r18,r2,200c0b8 <__muldf3+0x134>
 200bfe0:	80800434 	orhi	r2,r16,16
 200bfe4:	100490fa 	slli	r2,r2,3
 200bfe8:	2020d77a 	srli	r16,r4,29
 200bfec:	202890fa 	slli	r20,r4,3
 200bff0:	94bf0044 	addi	r18,r18,-1023
 200bff4:	80a0b03a 	or	r16,r16,r2
 200bff8:	0027883a 	mov	r19,zero
 200bffc:	0039883a 	mov	fp,zero
 200c000:	3804d53a 	srli	r2,r7,20
 200c004:	382ed7fa 	srli	r23,r7,31
 200c008:	04400434 	movhi	r17,16
 200c00c:	8c7fffc4 	addi	r17,r17,-1
 200c010:	1081ffcc 	andi	r2,r2,2047
 200c014:	3011883a 	mov	r8,r6
 200c018:	3c62703a 	and	r17,r7,r17
 200c01c:	ba803fcc 	andi	r10,r23,255
 200c020:	10006d26 	beq	r2,zero,200c1d8 <__muldf3+0x254>
 200c024:	00c1ffc4 	movi	r3,2047
 200c028:	10c06526 	beq	r2,r3,200c1c0 <__muldf3+0x23c>
 200c02c:	88c00434 	orhi	r3,r17,16
 200c030:	180690fa 	slli	r3,r3,3
 200c034:	3022d77a 	srli	r17,r6,29
 200c038:	301090fa 	slli	r8,r6,3
 200c03c:	10bf0044 	addi	r2,r2,-1023
 200c040:	88e2b03a 	or	r17,r17,r3
 200c044:	000b883a 	mov	r5,zero
 200c048:	9085883a 	add	r2,r18,r2
 200c04c:	2cc8b03a 	or	r4,r5,r19
 200c050:	00c003c4 	movi	r3,15
 200c054:	bdacf03a 	xor	r22,r23,r22
 200c058:	12c00044 	addi	r11,r2,1
 200c05c:	19009936 	bltu	r3,r4,200c2c4 <__muldf3+0x340>
 200c060:	200890ba 	slli	r4,r4,2
 200c064:	00c08074 	movhi	r3,513
 200c068:	18f01e04 	addi	r3,r3,-16264
 200c06c:	20c9883a 	add	r4,r4,r3
 200c070:	20c00017 	ldw	r3,0(r4)
 200c074:	1800683a 	jmp	r3
 200c078:	0200c2c4 	movi	r8,779
 200c07c:	0200c0d8 	cmpnei	r8,zero,771
 200c080:	0200c0d8 	cmpnei	r8,zero,771
 200c084:	0200c0d4 	movui	r8,771
 200c088:	0200c2a0 	cmpeqi	r8,zero,778
 200c08c:	0200c2a0 	cmpeqi	r8,zero,778
 200c090:	0200c288 	cmpgei	r8,zero,778
 200c094:	0200c0d4 	movui	r8,771
 200c098:	0200c2a0 	cmpeqi	r8,zero,778
 200c09c:	0200c288 	cmpgei	r8,zero,778
 200c0a0:	0200c2a0 	cmpeqi	r8,zero,778
 200c0a4:	0200c0d4 	movui	r8,771
 200c0a8:	0200c2b0 	cmpltui	r8,zero,778
 200c0ac:	0200c2b0 	cmpltui	r8,zero,778
 200c0b0:	0200c2b0 	cmpltui	r8,zero,778
 200c0b4:	0200c4cc 	andi	r8,zero,787
 200c0b8:	2404b03a 	or	r2,r4,r16
 200c0bc:	10006f1e 	bne	r2,zero,200c27c <__muldf3+0x2f8>
 200c0c0:	04c00204 	movi	r19,8
 200c0c4:	0021883a 	mov	r16,zero
 200c0c8:	0029883a 	mov	r20,zero
 200c0cc:	07000084 	movi	fp,2
 200c0d0:	003fcb06 	br	200c000 <__alt_mem_mem_0+0xfcfec000>
 200c0d4:	502d883a 	mov	r22,r10
 200c0d8:	00800084 	movi	r2,2
 200c0dc:	28805726 	beq	r5,r2,200c23c <__muldf3+0x2b8>
 200c0e0:	008000c4 	movi	r2,3
 200c0e4:	28816626 	beq	r5,r2,200c680 <__muldf3+0x6fc>
 200c0e8:	00800044 	movi	r2,1
 200c0ec:	2881411e 	bne	r5,r2,200c5f4 <__muldf3+0x670>
 200c0f0:	b02b883a 	mov	r21,r22
 200c0f4:	0005883a 	mov	r2,zero
 200c0f8:	000b883a 	mov	r5,zero
 200c0fc:	0029883a 	mov	r20,zero
 200c100:	1004953a 	slli	r2,r2,20
 200c104:	a8c03fcc 	andi	r3,r21,255
 200c108:	04400434 	movhi	r17,16
 200c10c:	8c7fffc4 	addi	r17,r17,-1
 200c110:	180697fa 	slli	r3,r3,31
 200c114:	2c4a703a 	and	r5,r5,r17
 200c118:	288ab03a 	or	r5,r5,r2
 200c11c:	28c6b03a 	or	r3,r5,r3
 200c120:	a005883a 	mov	r2,r20
 200c124:	dfc00c17 	ldw	ra,48(sp)
 200c128:	df000b17 	ldw	fp,44(sp)
 200c12c:	ddc00a17 	ldw	r23,40(sp)
 200c130:	dd800917 	ldw	r22,36(sp)
 200c134:	dd400817 	ldw	r21,32(sp)
 200c138:	dd000717 	ldw	r20,28(sp)
 200c13c:	dcc00617 	ldw	r19,24(sp)
 200c140:	dc800517 	ldw	r18,20(sp)
 200c144:	dc400417 	ldw	r17,16(sp)
 200c148:	dc000317 	ldw	r16,12(sp)
 200c14c:	dec00d04 	addi	sp,sp,52
 200c150:	f800283a 	ret
 200c154:	2404b03a 	or	r2,r4,r16
 200c158:	2027883a 	mov	r19,r4
 200c15c:	10004226 	beq	r2,zero,200c268 <__muldf3+0x2e4>
 200c160:	8000fc26 	beq	r16,zero,200c554 <__muldf3+0x5d0>
 200c164:	8009883a 	mov	r4,r16
 200c168:	d9800215 	stw	r6,8(sp)
 200c16c:	d9c00015 	stw	r7,0(sp)
 200c170:	da400115 	stw	r9,4(sp)
 200c174:	200d19c0 	call	200d19c <__clzsi2>
 200c178:	d9800217 	ldw	r6,8(sp)
 200c17c:	d9c00017 	ldw	r7,0(sp)
 200c180:	da400117 	ldw	r9,4(sp)
 200c184:	113ffd44 	addi	r4,r2,-11
 200c188:	00c00704 	movi	r3,28
 200c18c:	1900ed16 	blt	r3,r4,200c544 <__muldf3+0x5c0>
 200c190:	00c00744 	movi	r3,29
 200c194:	147ffe04 	addi	r17,r2,-8
 200c198:	1907c83a 	sub	r3,r3,r4
 200c19c:	8460983a 	sll	r16,r16,r17
 200c1a0:	98c6d83a 	srl	r3,r19,r3
 200c1a4:	9c68983a 	sll	r20,r19,r17
 200c1a8:	1c20b03a 	or	r16,r3,r16
 200c1ac:	1080fcc4 	addi	r2,r2,1011
 200c1b0:	00a5c83a 	sub	r18,zero,r2
 200c1b4:	0027883a 	mov	r19,zero
 200c1b8:	0039883a 	mov	fp,zero
 200c1bc:	003f9006 	br	200c000 <__alt_mem_mem_0+0xfcfec000>
 200c1c0:	3446b03a 	or	r3,r6,r17
 200c1c4:	1800261e 	bne	r3,zero,200c260 <__muldf3+0x2dc>
 200c1c8:	0023883a 	mov	r17,zero
 200c1cc:	0011883a 	mov	r8,zero
 200c1d0:	01400084 	movi	r5,2
 200c1d4:	003f9c06 	br	200c048 <__alt_mem_mem_0+0xfcfec048>
 200c1d8:	3446b03a 	or	r3,r6,r17
 200c1dc:	18001c26 	beq	r3,zero,200c250 <__muldf3+0x2cc>
 200c1e0:	8800ce26 	beq	r17,zero,200c51c <__muldf3+0x598>
 200c1e4:	8809883a 	mov	r4,r17
 200c1e8:	d9800215 	stw	r6,8(sp)
 200c1ec:	da400115 	stw	r9,4(sp)
 200c1f0:	da800015 	stw	r10,0(sp)
 200c1f4:	200d19c0 	call	200d19c <__clzsi2>
 200c1f8:	d9800217 	ldw	r6,8(sp)
 200c1fc:	da400117 	ldw	r9,4(sp)
 200c200:	da800017 	ldw	r10,0(sp)
 200c204:	113ffd44 	addi	r4,r2,-11
 200c208:	00c00704 	movi	r3,28
 200c20c:	1900bf16 	blt	r3,r4,200c50c <__muldf3+0x588>
 200c210:	00c00744 	movi	r3,29
 200c214:	123ffe04 	addi	r8,r2,-8
 200c218:	1907c83a 	sub	r3,r3,r4
 200c21c:	8a22983a 	sll	r17,r17,r8
 200c220:	30c6d83a 	srl	r3,r6,r3
 200c224:	3210983a 	sll	r8,r6,r8
 200c228:	1c62b03a 	or	r17,r3,r17
 200c22c:	1080fcc4 	addi	r2,r2,1011
 200c230:	0085c83a 	sub	r2,zero,r2
 200c234:	000b883a 	mov	r5,zero
 200c238:	003f8306 	br	200c048 <__alt_mem_mem_0+0xfcfec048>
 200c23c:	b02b883a 	mov	r21,r22
 200c240:	0081ffc4 	movi	r2,2047
 200c244:	000b883a 	mov	r5,zero
 200c248:	0029883a 	mov	r20,zero
 200c24c:	003fac06 	br	200c100 <__alt_mem_mem_0+0xfcfec100>
 200c250:	0023883a 	mov	r17,zero
 200c254:	0011883a 	mov	r8,zero
 200c258:	01400044 	movi	r5,1
 200c25c:	003f7a06 	br	200c048 <__alt_mem_mem_0+0xfcfec048>
 200c260:	014000c4 	movi	r5,3
 200c264:	003f7806 	br	200c048 <__alt_mem_mem_0+0xfcfec048>
 200c268:	04c00104 	movi	r19,4
 200c26c:	0021883a 	mov	r16,zero
 200c270:	0029883a 	mov	r20,zero
 200c274:	07000044 	movi	fp,1
 200c278:	003f6106 	br	200c000 <__alt_mem_mem_0+0xfcfec000>
 200c27c:	04c00304 	movi	r19,12
 200c280:	070000c4 	movi	fp,3
 200c284:	003f5e06 	br	200c000 <__alt_mem_mem_0+0xfcfec000>
 200c288:	01400434 	movhi	r5,16
 200c28c:	002b883a 	mov	r21,zero
 200c290:	297fffc4 	addi	r5,r5,-1
 200c294:	053fffc4 	movi	r20,-1
 200c298:	0081ffc4 	movi	r2,2047
 200c29c:	003f9806 	br	200c100 <__alt_mem_mem_0+0xfcfec100>
 200c2a0:	8023883a 	mov	r17,r16
 200c2a4:	a011883a 	mov	r8,r20
 200c2a8:	e00b883a 	mov	r5,fp
 200c2ac:	003f8a06 	br	200c0d8 <__alt_mem_mem_0+0xfcfec0d8>
 200c2b0:	8023883a 	mov	r17,r16
 200c2b4:	a011883a 	mov	r8,r20
 200c2b8:	482d883a 	mov	r22,r9
 200c2bc:	e00b883a 	mov	r5,fp
 200c2c0:	003f8506 	br	200c0d8 <__alt_mem_mem_0+0xfcfec0d8>
 200c2c4:	a00ad43a 	srli	r5,r20,16
 200c2c8:	401ad43a 	srli	r13,r8,16
 200c2cc:	a53fffcc 	andi	r20,r20,65535
 200c2d0:	423fffcc 	andi	r8,r8,65535
 200c2d4:	4519383a 	mul	r12,r8,r20
 200c2d8:	4147383a 	mul	r3,r8,r5
 200c2dc:	6d09383a 	mul	r4,r13,r20
 200c2e0:	600cd43a 	srli	r6,r12,16
 200c2e4:	2b5d383a 	mul	r14,r5,r13
 200c2e8:	20c9883a 	add	r4,r4,r3
 200c2ec:	310d883a 	add	r6,r6,r4
 200c2f0:	30c0022e 	bgeu	r6,r3,200c2fc <__muldf3+0x378>
 200c2f4:	00c00074 	movhi	r3,1
 200c2f8:	70dd883a 	add	r14,r14,r3
 200c2fc:	8826d43a 	srli	r19,r17,16
 200c300:	8bffffcc 	andi	r15,r17,65535
 200c304:	7d23383a 	mul	r17,r15,r20
 200c308:	7949383a 	mul	r4,r15,r5
 200c30c:	9d29383a 	mul	r20,r19,r20
 200c310:	8814d43a 	srli	r10,r17,16
 200c314:	3012943a 	slli	r9,r6,16
 200c318:	a129883a 	add	r20,r20,r4
 200c31c:	633fffcc 	andi	r12,r12,65535
 200c320:	5515883a 	add	r10,r10,r20
 200c324:	3006d43a 	srli	r3,r6,16
 200c328:	4b13883a 	add	r9,r9,r12
 200c32c:	2ccb383a 	mul	r5,r5,r19
 200c330:	5100022e 	bgeu	r10,r4,200c33c <__muldf3+0x3b8>
 200c334:	01000074 	movhi	r4,1
 200c338:	290b883a 	add	r5,r5,r4
 200c33c:	802ad43a 	srli	r21,r16,16
 200c340:	843fffcc 	andi	r16,r16,65535
 200c344:	440d383a 	mul	r6,r8,r16
 200c348:	4565383a 	mul	r18,r8,r21
 200c34c:	8349383a 	mul	r4,r16,r13
 200c350:	500e943a 	slli	r7,r10,16
 200c354:	3010d43a 	srli	r8,r6,16
 200c358:	5028d43a 	srli	r20,r10,16
 200c35c:	2489883a 	add	r4,r4,r18
 200c360:	8abfffcc 	andi	r10,r17,65535
 200c364:	3a95883a 	add	r10,r7,r10
 200c368:	4119883a 	add	r12,r8,r4
 200c36c:	a169883a 	add	r20,r20,r5
 200c370:	1a87883a 	add	r3,r3,r10
 200c374:	6d5b383a 	mul	r13,r13,r21
 200c378:	6480022e 	bgeu	r12,r18,200c384 <__muldf3+0x400>
 200c37c:	01000074 	movhi	r4,1
 200c380:	691b883a 	add	r13,r13,r4
 200c384:	7c25383a 	mul	r18,r15,r16
 200c388:	7d4b383a 	mul	r5,r15,r21
 200c38c:	84cf383a 	mul	r7,r16,r19
 200c390:	901ed43a 	srli	r15,r18,16
 200c394:	6008d43a 	srli	r4,r12,16
 200c398:	6010943a 	slli	r8,r12,16
 200c39c:	394f883a 	add	r7,r7,r5
 200c3a0:	333fffcc 	andi	r12,r6,65535
 200c3a4:	79df883a 	add	r15,r15,r7
 200c3a8:	235b883a 	add	r13,r4,r13
 200c3ac:	9d63383a 	mul	r17,r19,r21
 200c3b0:	4309883a 	add	r4,r8,r12
 200c3b4:	7940022e 	bgeu	r15,r5,200c3c0 <__muldf3+0x43c>
 200c3b8:	01400074 	movhi	r5,1
 200c3bc:	8963883a 	add	r17,r17,r5
 200c3c0:	780a943a 	slli	r5,r15,16
 200c3c4:	91bfffcc 	andi	r6,r18,65535
 200c3c8:	70c7883a 	add	r3,r14,r3
 200c3cc:	298d883a 	add	r6,r5,r6
 200c3d0:	1a8f803a 	cmpltu	r7,r3,r10
 200c3d4:	350b883a 	add	r5,r6,r20
 200c3d8:	20c7883a 	add	r3,r4,r3
 200c3dc:	3955883a 	add	r10,r7,r5
 200c3e0:	1909803a 	cmpltu	r4,r3,r4
 200c3e4:	6a91883a 	add	r8,r13,r10
 200c3e8:	780cd43a 	srli	r6,r15,16
 200c3ec:	2219883a 	add	r12,r4,r8
 200c3f0:	2d0b803a 	cmpltu	r5,r5,r20
 200c3f4:	51cf803a 	cmpltu	r7,r10,r7
 200c3f8:	29ceb03a 	or	r7,r5,r7
 200c3fc:	4351803a 	cmpltu	r8,r8,r13
 200c400:	610b803a 	cmpltu	r5,r12,r4
 200c404:	4148b03a 	or	r4,r8,r5
 200c408:	398f883a 	add	r7,r7,r6
 200c40c:	3909883a 	add	r4,r7,r4
 200c410:	1810927a 	slli	r8,r3,9
 200c414:	2449883a 	add	r4,r4,r17
 200c418:	2008927a 	slli	r4,r4,9
 200c41c:	6022d5fa 	srli	r17,r12,23
 200c420:	1806d5fa 	srli	r3,r3,23
 200c424:	4252b03a 	or	r9,r8,r9
 200c428:	600a927a 	slli	r5,r12,9
 200c42c:	4810c03a 	cmpne	r8,r9,zero
 200c430:	2462b03a 	or	r17,r4,r17
 200c434:	40c6b03a 	or	r3,r8,r3
 200c438:	8900402c 	andhi	r4,r17,256
 200c43c:	1950b03a 	or	r8,r3,r5
 200c440:	20000726 	beq	r4,zero,200c460 <__muldf3+0x4dc>
 200c444:	4006d07a 	srli	r3,r8,1
 200c448:	880497fa 	slli	r2,r17,31
 200c44c:	4200004c 	andi	r8,r8,1
 200c450:	8822d07a 	srli	r17,r17,1
 200c454:	1a10b03a 	or	r8,r3,r8
 200c458:	1210b03a 	or	r8,r2,r8
 200c45c:	5805883a 	mov	r2,r11
 200c460:	1140ffc4 	addi	r5,r2,1023
 200c464:	0140440e 	bge	zero,r5,200c578 <__muldf3+0x5f4>
 200c468:	40c001cc 	andi	r3,r8,7
 200c46c:	18000726 	beq	r3,zero,200c48c <__muldf3+0x508>
 200c470:	40c003cc 	andi	r3,r8,15
 200c474:	01000104 	movi	r4,4
 200c478:	19000426 	beq	r3,r4,200c48c <__muldf3+0x508>
 200c47c:	4107883a 	add	r3,r8,r4
 200c480:	1a11803a 	cmpltu	r8,r3,r8
 200c484:	8a23883a 	add	r17,r17,r8
 200c488:	1811883a 	mov	r8,r3
 200c48c:	88c0402c 	andhi	r3,r17,256
 200c490:	18000426 	beq	r3,zero,200c4a4 <__muldf3+0x520>
 200c494:	11410004 	addi	r5,r2,1024
 200c498:	00bfc034 	movhi	r2,65280
 200c49c:	10bfffc4 	addi	r2,r2,-1
 200c4a0:	88a2703a 	and	r17,r17,r2
 200c4a4:	0081ff84 	movi	r2,2046
 200c4a8:	117f6416 	blt	r2,r5,200c23c <__alt_mem_mem_0+0xfcfec23c>
 200c4ac:	8828977a 	slli	r20,r17,29
 200c4b0:	4010d0fa 	srli	r8,r8,3
 200c4b4:	8822927a 	slli	r17,r17,9
 200c4b8:	2881ffcc 	andi	r2,r5,2047
 200c4bc:	a228b03a 	or	r20,r20,r8
 200c4c0:	880ad33a 	srli	r5,r17,12
 200c4c4:	b02b883a 	mov	r21,r22
 200c4c8:	003f0d06 	br	200c100 <__alt_mem_mem_0+0xfcfec100>
 200c4cc:	8080022c 	andhi	r2,r16,8
 200c4d0:	10000926 	beq	r2,zero,200c4f8 <__muldf3+0x574>
 200c4d4:	8880022c 	andhi	r2,r17,8
 200c4d8:	1000071e 	bne	r2,zero,200c4f8 <__muldf3+0x574>
 200c4dc:	00800434 	movhi	r2,16
 200c4e0:	89400234 	orhi	r5,r17,8
 200c4e4:	10bfffc4 	addi	r2,r2,-1
 200c4e8:	b82b883a 	mov	r21,r23
 200c4ec:	288a703a 	and	r5,r5,r2
 200c4f0:	4029883a 	mov	r20,r8
 200c4f4:	003f6806 	br	200c298 <__alt_mem_mem_0+0xfcfec298>
 200c4f8:	00800434 	movhi	r2,16
 200c4fc:	81400234 	orhi	r5,r16,8
 200c500:	10bfffc4 	addi	r2,r2,-1
 200c504:	288a703a 	and	r5,r5,r2
 200c508:	003f6306 	br	200c298 <__alt_mem_mem_0+0xfcfec298>
 200c50c:	147ff604 	addi	r17,r2,-40
 200c510:	3462983a 	sll	r17,r6,r17
 200c514:	0011883a 	mov	r8,zero
 200c518:	003f4406 	br	200c22c <__alt_mem_mem_0+0xfcfec22c>
 200c51c:	3009883a 	mov	r4,r6
 200c520:	d9800215 	stw	r6,8(sp)
 200c524:	da400115 	stw	r9,4(sp)
 200c528:	da800015 	stw	r10,0(sp)
 200c52c:	200d19c0 	call	200d19c <__clzsi2>
 200c530:	10800804 	addi	r2,r2,32
 200c534:	da800017 	ldw	r10,0(sp)
 200c538:	da400117 	ldw	r9,4(sp)
 200c53c:	d9800217 	ldw	r6,8(sp)
 200c540:	003f3006 	br	200c204 <__alt_mem_mem_0+0xfcfec204>
 200c544:	143ff604 	addi	r16,r2,-40
 200c548:	9c20983a 	sll	r16,r19,r16
 200c54c:	0029883a 	mov	r20,zero
 200c550:	003f1606 	br	200c1ac <__alt_mem_mem_0+0xfcfec1ac>
 200c554:	d9800215 	stw	r6,8(sp)
 200c558:	d9c00015 	stw	r7,0(sp)
 200c55c:	da400115 	stw	r9,4(sp)
 200c560:	200d19c0 	call	200d19c <__clzsi2>
 200c564:	10800804 	addi	r2,r2,32
 200c568:	da400117 	ldw	r9,4(sp)
 200c56c:	d9c00017 	ldw	r7,0(sp)
 200c570:	d9800217 	ldw	r6,8(sp)
 200c574:	003f0306 	br	200c184 <__alt_mem_mem_0+0xfcfec184>
 200c578:	00c00044 	movi	r3,1
 200c57c:	1947c83a 	sub	r3,r3,r5
 200c580:	00800e04 	movi	r2,56
 200c584:	10feda16 	blt	r2,r3,200c0f0 <__alt_mem_mem_0+0xfcfec0f0>
 200c588:	008007c4 	movi	r2,31
 200c58c:	10c01b16 	blt	r2,r3,200c5fc <__muldf3+0x678>
 200c590:	00800804 	movi	r2,32
 200c594:	10c5c83a 	sub	r2,r2,r3
 200c598:	888a983a 	sll	r5,r17,r2
 200c59c:	40c8d83a 	srl	r4,r8,r3
 200c5a0:	4084983a 	sll	r2,r8,r2
 200c5a4:	88e2d83a 	srl	r17,r17,r3
 200c5a8:	2906b03a 	or	r3,r5,r4
 200c5ac:	1004c03a 	cmpne	r2,r2,zero
 200c5b0:	1886b03a 	or	r3,r3,r2
 200c5b4:	188001cc 	andi	r2,r3,7
 200c5b8:	10000726 	beq	r2,zero,200c5d8 <__muldf3+0x654>
 200c5bc:	188003cc 	andi	r2,r3,15
 200c5c0:	01000104 	movi	r4,4
 200c5c4:	11000426 	beq	r2,r4,200c5d8 <__muldf3+0x654>
 200c5c8:	1805883a 	mov	r2,r3
 200c5cc:	10c00104 	addi	r3,r2,4
 200c5d0:	1885803a 	cmpltu	r2,r3,r2
 200c5d4:	88a3883a 	add	r17,r17,r2
 200c5d8:	8880202c 	andhi	r2,r17,128
 200c5dc:	10001c26 	beq	r2,zero,200c650 <__muldf3+0x6cc>
 200c5e0:	b02b883a 	mov	r21,r22
 200c5e4:	00800044 	movi	r2,1
 200c5e8:	000b883a 	mov	r5,zero
 200c5ec:	0029883a 	mov	r20,zero
 200c5f0:	003ec306 	br	200c100 <__alt_mem_mem_0+0xfcfec100>
 200c5f4:	5805883a 	mov	r2,r11
 200c5f8:	003f9906 	br	200c460 <__alt_mem_mem_0+0xfcfec460>
 200c5fc:	00bff844 	movi	r2,-31
 200c600:	1145c83a 	sub	r2,r2,r5
 200c604:	8888d83a 	srl	r4,r17,r2
 200c608:	00800804 	movi	r2,32
 200c60c:	18801a26 	beq	r3,r2,200c678 <__muldf3+0x6f4>
 200c610:	00801004 	movi	r2,64
 200c614:	10c5c83a 	sub	r2,r2,r3
 200c618:	8884983a 	sll	r2,r17,r2
 200c61c:	1204b03a 	or	r2,r2,r8
 200c620:	1004c03a 	cmpne	r2,r2,zero
 200c624:	2084b03a 	or	r2,r4,r2
 200c628:	144001cc 	andi	r17,r2,7
 200c62c:	88000d1e 	bne	r17,zero,200c664 <__muldf3+0x6e0>
 200c630:	000b883a 	mov	r5,zero
 200c634:	1028d0fa 	srli	r20,r2,3
 200c638:	b02b883a 	mov	r21,r22
 200c63c:	0005883a 	mov	r2,zero
 200c640:	a468b03a 	or	r20,r20,r17
 200c644:	003eae06 	br	200c100 <__alt_mem_mem_0+0xfcfec100>
 200c648:	1007883a 	mov	r3,r2
 200c64c:	0023883a 	mov	r17,zero
 200c650:	880a927a 	slli	r5,r17,9
 200c654:	1805883a 	mov	r2,r3
 200c658:	8822977a 	slli	r17,r17,29
 200c65c:	280ad33a 	srli	r5,r5,12
 200c660:	003ff406 	br	200c634 <__alt_mem_mem_0+0xfcfec634>
 200c664:	10c003cc 	andi	r3,r2,15
 200c668:	01000104 	movi	r4,4
 200c66c:	193ff626 	beq	r3,r4,200c648 <__alt_mem_mem_0+0xfcfec648>
 200c670:	0023883a 	mov	r17,zero
 200c674:	003fd506 	br	200c5cc <__alt_mem_mem_0+0xfcfec5cc>
 200c678:	0005883a 	mov	r2,zero
 200c67c:	003fe706 	br	200c61c <__alt_mem_mem_0+0xfcfec61c>
 200c680:	00800434 	movhi	r2,16
 200c684:	89400234 	orhi	r5,r17,8
 200c688:	10bfffc4 	addi	r2,r2,-1
 200c68c:	b02b883a 	mov	r21,r22
 200c690:	288a703a 	and	r5,r5,r2
 200c694:	4029883a 	mov	r20,r8
 200c698:	003eff06 	br	200c298 <__alt_mem_mem_0+0xfcfec298>

0200c69c <__subdf3>:
 200c69c:	02000434 	movhi	r8,16
 200c6a0:	423fffc4 	addi	r8,r8,-1
 200c6a4:	defffb04 	addi	sp,sp,-20
 200c6a8:	2a14703a 	and	r10,r5,r8
 200c6ac:	3812d53a 	srli	r9,r7,20
 200c6b0:	3a10703a 	and	r8,r7,r8
 200c6b4:	2006d77a 	srli	r3,r4,29
 200c6b8:	3004d77a 	srli	r2,r6,29
 200c6bc:	dc000015 	stw	r16,0(sp)
 200c6c0:	501490fa 	slli	r10,r10,3
 200c6c4:	2820d53a 	srli	r16,r5,20
 200c6c8:	401090fa 	slli	r8,r8,3
 200c6cc:	dc800215 	stw	r18,8(sp)
 200c6d0:	dc400115 	stw	r17,4(sp)
 200c6d4:	dfc00415 	stw	ra,16(sp)
 200c6d8:	202290fa 	slli	r17,r4,3
 200c6dc:	dcc00315 	stw	r19,12(sp)
 200c6e0:	4a41ffcc 	andi	r9,r9,2047
 200c6e4:	0101ffc4 	movi	r4,2047
 200c6e8:	2824d7fa 	srli	r18,r5,31
 200c6ec:	8401ffcc 	andi	r16,r16,2047
 200c6f0:	50c6b03a 	or	r3,r10,r3
 200c6f4:	380ed7fa 	srli	r7,r7,31
 200c6f8:	408ab03a 	or	r5,r8,r2
 200c6fc:	300c90fa 	slli	r6,r6,3
 200c700:	49009626 	beq	r9,r4,200c95c <__subdf3+0x2c0>
 200c704:	39c0005c 	xori	r7,r7,1
 200c708:	8245c83a 	sub	r2,r16,r9
 200c70c:	3c807426 	beq	r7,r18,200c8e0 <__subdf3+0x244>
 200c710:	0080af0e 	bge	zero,r2,200c9d0 <__subdf3+0x334>
 200c714:	48002a1e 	bne	r9,zero,200c7c0 <__subdf3+0x124>
 200c718:	2988b03a 	or	r4,r5,r6
 200c71c:	20009a1e 	bne	r4,zero,200c988 <__subdf3+0x2ec>
 200c720:	888001cc 	andi	r2,r17,7
 200c724:	10000726 	beq	r2,zero,200c744 <__subdf3+0xa8>
 200c728:	888003cc 	andi	r2,r17,15
 200c72c:	01000104 	movi	r4,4
 200c730:	11000426 	beq	r2,r4,200c744 <__subdf3+0xa8>
 200c734:	890b883a 	add	r5,r17,r4
 200c738:	2c63803a 	cmpltu	r17,r5,r17
 200c73c:	1c47883a 	add	r3,r3,r17
 200c740:	2823883a 	mov	r17,r5
 200c744:	1880202c 	andhi	r2,r3,128
 200c748:	10005926 	beq	r2,zero,200c8b0 <__subdf3+0x214>
 200c74c:	84000044 	addi	r16,r16,1
 200c750:	0081ffc4 	movi	r2,2047
 200c754:	8080be26 	beq	r16,r2,200ca50 <__subdf3+0x3b4>
 200c758:	017fe034 	movhi	r5,65408
 200c75c:	297fffc4 	addi	r5,r5,-1
 200c760:	1946703a 	and	r3,r3,r5
 200c764:	1804977a 	slli	r2,r3,29
 200c768:	1806927a 	slli	r3,r3,9
 200c76c:	8822d0fa 	srli	r17,r17,3
 200c770:	8401ffcc 	andi	r16,r16,2047
 200c774:	180ad33a 	srli	r5,r3,12
 200c778:	9100004c 	andi	r4,r18,1
 200c77c:	1444b03a 	or	r2,r2,r17
 200c780:	80c1ffcc 	andi	r3,r16,2047
 200c784:	1820953a 	slli	r16,r3,20
 200c788:	20c03fcc 	andi	r3,r4,255
 200c78c:	180897fa 	slli	r4,r3,31
 200c790:	00c00434 	movhi	r3,16
 200c794:	18ffffc4 	addi	r3,r3,-1
 200c798:	28c6703a 	and	r3,r5,r3
 200c79c:	1c06b03a 	or	r3,r3,r16
 200c7a0:	1906b03a 	or	r3,r3,r4
 200c7a4:	dfc00417 	ldw	ra,16(sp)
 200c7a8:	dcc00317 	ldw	r19,12(sp)
 200c7ac:	dc800217 	ldw	r18,8(sp)
 200c7b0:	dc400117 	ldw	r17,4(sp)
 200c7b4:	dc000017 	ldw	r16,0(sp)
 200c7b8:	dec00504 	addi	sp,sp,20
 200c7bc:	f800283a 	ret
 200c7c0:	0101ffc4 	movi	r4,2047
 200c7c4:	813fd626 	beq	r16,r4,200c720 <__alt_mem_mem_0+0xfcfec720>
 200c7c8:	29402034 	orhi	r5,r5,128
 200c7cc:	01000e04 	movi	r4,56
 200c7d0:	2080a316 	blt	r4,r2,200ca60 <__subdf3+0x3c4>
 200c7d4:	010007c4 	movi	r4,31
 200c7d8:	2080c616 	blt	r4,r2,200caf4 <__subdf3+0x458>
 200c7dc:	01000804 	movi	r4,32
 200c7e0:	2089c83a 	sub	r4,r4,r2
 200c7e4:	2910983a 	sll	r8,r5,r4
 200c7e8:	308ed83a 	srl	r7,r6,r2
 200c7ec:	3108983a 	sll	r4,r6,r4
 200c7f0:	2884d83a 	srl	r2,r5,r2
 200c7f4:	41ccb03a 	or	r6,r8,r7
 200c7f8:	2008c03a 	cmpne	r4,r4,zero
 200c7fc:	310cb03a 	or	r6,r6,r4
 200c800:	898dc83a 	sub	r6,r17,r6
 200c804:	89a3803a 	cmpltu	r17,r17,r6
 200c808:	1887c83a 	sub	r3,r3,r2
 200c80c:	1c47c83a 	sub	r3,r3,r17
 200c810:	3023883a 	mov	r17,r6
 200c814:	1880202c 	andhi	r2,r3,128
 200c818:	10002326 	beq	r2,zero,200c8a8 <__subdf3+0x20c>
 200c81c:	04c02034 	movhi	r19,128
 200c820:	9cffffc4 	addi	r19,r19,-1
 200c824:	1ce6703a 	and	r19,r3,r19
 200c828:	98007a26 	beq	r19,zero,200ca14 <__subdf3+0x378>
 200c82c:	9809883a 	mov	r4,r19
 200c830:	200d19c0 	call	200d19c <__clzsi2>
 200c834:	113ffe04 	addi	r4,r2,-8
 200c838:	00c007c4 	movi	r3,31
 200c83c:	19007b16 	blt	r3,r4,200ca2c <__subdf3+0x390>
 200c840:	00800804 	movi	r2,32
 200c844:	1105c83a 	sub	r2,r2,r4
 200c848:	8884d83a 	srl	r2,r17,r2
 200c84c:	9906983a 	sll	r3,r19,r4
 200c850:	8922983a 	sll	r17,r17,r4
 200c854:	10c4b03a 	or	r2,r2,r3
 200c858:	24007816 	blt	r4,r16,200ca3c <__subdf3+0x3a0>
 200c85c:	2421c83a 	sub	r16,r4,r16
 200c860:	80c00044 	addi	r3,r16,1
 200c864:	010007c4 	movi	r4,31
 200c868:	20c09516 	blt	r4,r3,200cac0 <__subdf3+0x424>
 200c86c:	01400804 	movi	r5,32
 200c870:	28cbc83a 	sub	r5,r5,r3
 200c874:	88c8d83a 	srl	r4,r17,r3
 200c878:	8962983a 	sll	r17,r17,r5
 200c87c:	114a983a 	sll	r5,r2,r5
 200c880:	10c6d83a 	srl	r3,r2,r3
 200c884:	8804c03a 	cmpne	r2,r17,zero
 200c888:	290ab03a 	or	r5,r5,r4
 200c88c:	28a2b03a 	or	r17,r5,r2
 200c890:	0021883a 	mov	r16,zero
 200c894:	003fa206 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200c898:	2090b03a 	or	r8,r4,r2
 200c89c:	40018e26 	beq	r8,zero,200ced8 <__subdf3+0x83c>
 200c8a0:	1007883a 	mov	r3,r2
 200c8a4:	2023883a 	mov	r17,r4
 200c8a8:	888001cc 	andi	r2,r17,7
 200c8ac:	103f9e1e 	bne	r2,zero,200c728 <__alt_mem_mem_0+0xfcfec728>
 200c8b0:	1804977a 	slli	r2,r3,29
 200c8b4:	8822d0fa 	srli	r17,r17,3
 200c8b8:	1810d0fa 	srli	r8,r3,3
 200c8bc:	9100004c 	andi	r4,r18,1
 200c8c0:	1444b03a 	or	r2,r2,r17
 200c8c4:	00c1ffc4 	movi	r3,2047
 200c8c8:	80c02826 	beq	r16,r3,200c96c <__subdf3+0x2d0>
 200c8cc:	01400434 	movhi	r5,16
 200c8d0:	297fffc4 	addi	r5,r5,-1
 200c8d4:	80e0703a 	and	r16,r16,r3
 200c8d8:	414a703a 	and	r5,r8,r5
 200c8dc:	003fa806 	br	200c780 <__alt_mem_mem_0+0xfcfec780>
 200c8e0:	0080630e 	bge	zero,r2,200ca70 <__subdf3+0x3d4>
 200c8e4:	48003026 	beq	r9,zero,200c9a8 <__subdf3+0x30c>
 200c8e8:	0101ffc4 	movi	r4,2047
 200c8ec:	813f8c26 	beq	r16,r4,200c720 <__alt_mem_mem_0+0xfcfec720>
 200c8f0:	29402034 	orhi	r5,r5,128
 200c8f4:	01000e04 	movi	r4,56
 200c8f8:	2080a90e 	bge	r4,r2,200cba0 <__subdf3+0x504>
 200c8fc:	298cb03a 	or	r6,r5,r6
 200c900:	3012c03a 	cmpne	r9,r6,zero
 200c904:	0005883a 	mov	r2,zero
 200c908:	4c53883a 	add	r9,r9,r17
 200c90c:	4c63803a 	cmpltu	r17,r9,r17
 200c910:	10c7883a 	add	r3,r2,r3
 200c914:	88c7883a 	add	r3,r17,r3
 200c918:	4823883a 	mov	r17,r9
 200c91c:	1880202c 	andhi	r2,r3,128
 200c920:	1000d026 	beq	r2,zero,200cc64 <__subdf3+0x5c8>
 200c924:	84000044 	addi	r16,r16,1
 200c928:	0081ffc4 	movi	r2,2047
 200c92c:	8080fe26 	beq	r16,r2,200cd28 <__subdf3+0x68c>
 200c930:	00bfe034 	movhi	r2,65408
 200c934:	10bfffc4 	addi	r2,r2,-1
 200c938:	1886703a 	and	r3,r3,r2
 200c93c:	880ad07a 	srli	r5,r17,1
 200c940:	180497fa 	slli	r2,r3,31
 200c944:	8900004c 	andi	r4,r17,1
 200c948:	2922b03a 	or	r17,r5,r4
 200c94c:	1806d07a 	srli	r3,r3,1
 200c950:	1462b03a 	or	r17,r2,r17
 200c954:	3825883a 	mov	r18,r7
 200c958:	003f7106 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200c95c:	2984b03a 	or	r2,r5,r6
 200c960:	103f6826 	beq	r2,zero,200c704 <__alt_mem_mem_0+0xfcfec704>
 200c964:	39c03fcc 	andi	r7,r7,255
 200c968:	003f6706 	br	200c708 <__alt_mem_mem_0+0xfcfec708>
 200c96c:	4086b03a 	or	r3,r8,r2
 200c970:	18015226 	beq	r3,zero,200cebc <__subdf3+0x820>
 200c974:	00c00434 	movhi	r3,16
 200c978:	41400234 	orhi	r5,r8,8
 200c97c:	18ffffc4 	addi	r3,r3,-1
 200c980:	28ca703a 	and	r5,r5,r3
 200c984:	003f7e06 	br	200c780 <__alt_mem_mem_0+0xfcfec780>
 200c988:	10bfffc4 	addi	r2,r2,-1
 200c98c:	1000491e 	bne	r2,zero,200cab4 <__subdf3+0x418>
 200c990:	898fc83a 	sub	r7,r17,r6
 200c994:	89e3803a 	cmpltu	r17,r17,r7
 200c998:	1947c83a 	sub	r3,r3,r5
 200c99c:	1c47c83a 	sub	r3,r3,r17
 200c9a0:	3823883a 	mov	r17,r7
 200c9a4:	003f9b06 	br	200c814 <__alt_mem_mem_0+0xfcfec814>
 200c9a8:	2988b03a 	or	r4,r5,r6
 200c9ac:	203f5c26 	beq	r4,zero,200c720 <__alt_mem_mem_0+0xfcfec720>
 200c9b0:	10bfffc4 	addi	r2,r2,-1
 200c9b4:	1000931e 	bne	r2,zero,200cc04 <__subdf3+0x568>
 200c9b8:	898d883a 	add	r6,r17,r6
 200c9bc:	3463803a 	cmpltu	r17,r6,r17
 200c9c0:	1947883a 	add	r3,r3,r5
 200c9c4:	88c7883a 	add	r3,r17,r3
 200c9c8:	3023883a 	mov	r17,r6
 200c9cc:	003fd306 	br	200c91c <__alt_mem_mem_0+0xfcfec91c>
 200c9d0:	1000541e 	bne	r2,zero,200cb24 <__subdf3+0x488>
 200c9d4:	80800044 	addi	r2,r16,1
 200c9d8:	1081ffcc 	andi	r2,r2,2047
 200c9dc:	01000044 	movi	r4,1
 200c9e0:	2080a20e 	bge	r4,r2,200cc6c <__subdf3+0x5d0>
 200c9e4:	8989c83a 	sub	r4,r17,r6
 200c9e8:	8905803a 	cmpltu	r2,r17,r4
 200c9ec:	1967c83a 	sub	r19,r3,r5
 200c9f0:	98a7c83a 	sub	r19,r19,r2
 200c9f4:	9880202c 	andhi	r2,r19,128
 200c9f8:	10006326 	beq	r2,zero,200cb88 <__subdf3+0x4ec>
 200c9fc:	3463c83a 	sub	r17,r6,r17
 200ca00:	28c7c83a 	sub	r3,r5,r3
 200ca04:	344d803a 	cmpltu	r6,r6,r17
 200ca08:	19a7c83a 	sub	r19,r3,r6
 200ca0c:	3825883a 	mov	r18,r7
 200ca10:	983f861e 	bne	r19,zero,200c82c <__alt_mem_mem_0+0xfcfec82c>
 200ca14:	8809883a 	mov	r4,r17
 200ca18:	200d19c0 	call	200d19c <__clzsi2>
 200ca1c:	10800804 	addi	r2,r2,32
 200ca20:	113ffe04 	addi	r4,r2,-8
 200ca24:	00c007c4 	movi	r3,31
 200ca28:	193f850e 	bge	r3,r4,200c840 <__alt_mem_mem_0+0xfcfec840>
 200ca2c:	10bff604 	addi	r2,r2,-40
 200ca30:	8884983a 	sll	r2,r17,r2
 200ca34:	0023883a 	mov	r17,zero
 200ca38:	243f880e 	bge	r4,r16,200c85c <__alt_mem_mem_0+0xfcfec85c>
 200ca3c:	00ffe034 	movhi	r3,65408
 200ca40:	18ffffc4 	addi	r3,r3,-1
 200ca44:	8121c83a 	sub	r16,r16,r4
 200ca48:	10c6703a 	and	r3,r2,r3
 200ca4c:	003f3406 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200ca50:	9100004c 	andi	r4,r18,1
 200ca54:	000b883a 	mov	r5,zero
 200ca58:	0005883a 	mov	r2,zero
 200ca5c:	003f4806 	br	200c780 <__alt_mem_mem_0+0xfcfec780>
 200ca60:	298cb03a 	or	r6,r5,r6
 200ca64:	300cc03a 	cmpne	r6,r6,zero
 200ca68:	0005883a 	mov	r2,zero
 200ca6c:	003f6406 	br	200c800 <__alt_mem_mem_0+0xfcfec800>
 200ca70:	10009a1e 	bne	r2,zero,200ccdc <__subdf3+0x640>
 200ca74:	82400044 	addi	r9,r16,1
 200ca78:	4881ffcc 	andi	r2,r9,2047
 200ca7c:	02800044 	movi	r10,1
 200ca80:	5080670e 	bge	r10,r2,200cc20 <__subdf3+0x584>
 200ca84:	0081ffc4 	movi	r2,2047
 200ca88:	4880af26 	beq	r9,r2,200cd48 <__subdf3+0x6ac>
 200ca8c:	898d883a 	add	r6,r17,r6
 200ca90:	1945883a 	add	r2,r3,r5
 200ca94:	3447803a 	cmpltu	r3,r6,r17
 200ca98:	1887883a 	add	r3,r3,r2
 200ca9c:	182297fa 	slli	r17,r3,31
 200caa0:	300cd07a 	srli	r6,r6,1
 200caa4:	1806d07a 	srli	r3,r3,1
 200caa8:	4821883a 	mov	r16,r9
 200caac:	89a2b03a 	or	r17,r17,r6
 200cab0:	003f1b06 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200cab4:	0101ffc4 	movi	r4,2047
 200cab8:	813f441e 	bne	r16,r4,200c7cc <__alt_mem_mem_0+0xfcfec7cc>
 200cabc:	003f1806 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200cac0:	843ff844 	addi	r16,r16,-31
 200cac4:	01400804 	movi	r5,32
 200cac8:	1408d83a 	srl	r4,r2,r16
 200cacc:	19405026 	beq	r3,r5,200cc10 <__subdf3+0x574>
 200cad0:	01401004 	movi	r5,64
 200cad4:	28c7c83a 	sub	r3,r5,r3
 200cad8:	10c4983a 	sll	r2,r2,r3
 200cadc:	88a2b03a 	or	r17,r17,r2
 200cae0:	8822c03a 	cmpne	r17,r17,zero
 200cae4:	2462b03a 	or	r17,r4,r17
 200cae8:	0007883a 	mov	r3,zero
 200caec:	0021883a 	mov	r16,zero
 200caf0:	003f6d06 	br	200c8a8 <__alt_mem_mem_0+0xfcfec8a8>
 200caf4:	11fff804 	addi	r7,r2,-32
 200caf8:	01000804 	movi	r4,32
 200cafc:	29ced83a 	srl	r7,r5,r7
 200cb00:	11004526 	beq	r2,r4,200cc18 <__subdf3+0x57c>
 200cb04:	01001004 	movi	r4,64
 200cb08:	2089c83a 	sub	r4,r4,r2
 200cb0c:	2904983a 	sll	r2,r5,r4
 200cb10:	118cb03a 	or	r6,r2,r6
 200cb14:	300cc03a 	cmpne	r6,r6,zero
 200cb18:	398cb03a 	or	r6,r7,r6
 200cb1c:	0005883a 	mov	r2,zero
 200cb20:	003f3706 	br	200c800 <__alt_mem_mem_0+0xfcfec800>
 200cb24:	80002a26 	beq	r16,zero,200cbd0 <__subdf3+0x534>
 200cb28:	0101ffc4 	movi	r4,2047
 200cb2c:	49006626 	beq	r9,r4,200ccc8 <__subdf3+0x62c>
 200cb30:	0085c83a 	sub	r2,zero,r2
 200cb34:	18c02034 	orhi	r3,r3,128
 200cb38:	01000e04 	movi	r4,56
 200cb3c:	20807e16 	blt	r4,r2,200cd38 <__subdf3+0x69c>
 200cb40:	010007c4 	movi	r4,31
 200cb44:	2080e716 	blt	r4,r2,200cee4 <__subdf3+0x848>
 200cb48:	01000804 	movi	r4,32
 200cb4c:	2089c83a 	sub	r4,r4,r2
 200cb50:	1914983a 	sll	r10,r3,r4
 200cb54:	8890d83a 	srl	r8,r17,r2
 200cb58:	8908983a 	sll	r4,r17,r4
 200cb5c:	1884d83a 	srl	r2,r3,r2
 200cb60:	5222b03a 	or	r17,r10,r8
 200cb64:	2006c03a 	cmpne	r3,r4,zero
 200cb68:	88e2b03a 	or	r17,r17,r3
 200cb6c:	3463c83a 	sub	r17,r6,r17
 200cb70:	2885c83a 	sub	r2,r5,r2
 200cb74:	344d803a 	cmpltu	r6,r6,r17
 200cb78:	1187c83a 	sub	r3,r2,r6
 200cb7c:	4821883a 	mov	r16,r9
 200cb80:	3825883a 	mov	r18,r7
 200cb84:	003f2306 	br	200c814 <__alt_mem_mem_0+0xfcfec814>
 200cb88:	24d0b03a 	or	r8,r4,r19
 200cb8c:	40001b1e 	bne	r8,zero,200cbfc <__subdf3+0x560>
 200cb90:	0005883a 	mov	r2,zero
 200cb94:	0009883a 	mov	r4,zero
 200cb98:	0021883a 	mov	r16,zero
 200cb9c:	003f4906 	br	200c8c4 <__alt_mem_mem_0+0xfcfec8c4>
 200cba0:	010007c4 	movi	r4,31
 200cba4:	20803a16 	blt	r4,r2,200cc90 <__subdf3+0x5f4>
 200cba8:	01000804 	movi	r4,32
 200cbac:	2089c83a 	sub	r4,r4,r2
 200cbb0:	2912983a 	sll	r9,r5,r4
 200cbb4:	3090d83a 	srl	r8,r6,r2
 200cbb8:	3108983a 	sll	r4,r6,r4
 200cbbc:	2884d83a 	srl	r2,r5,r2
 200cbc0:	4a12b03a 	or	r9,r9,r8
 200cbc4:	2008c03a 	cmpne	r4,r4,zero
 200cbc8:	4912b03a 	or	r9,r9,r4
 200cbcc:	003f4e06 	br	200c908 <__alt_mem_mem_0+0xfcfec908>
 200cbd0:	1c48b03a 	or	r4,r3,r17
 200cbd4:	20003c26 	beq	r4,zero,200ccc8 <__subdf3+0x62c>
 200cbd8:	0084303a 	nor	r2,zero,r2
 200cbdc:	1000381e 	bne	r2,zero,200ccc0 <__subdf3+0x624>
 200cbe0:	3463c83a 	sub	r17,r6,r17
 200cbe4:	28c5c83a 	sub	r2,r5,r3
 200cbe8:	344d803a 	cmpltu	r6,r6,r17
 200cbec:	1187c83a 	sub	r3,r2,r6
 200cbf0:	4821883a 	mov	r16,r9
 200cbf4:	3825883a 	mov	r18,r7
 200cbf8:	003f0606 	br	200c814 <__alt_mem_mem_0+0xfcfec814>
 200cbfc:	2023883a 	mov	r17,r4
 200cc00:	003f0906 	br	200c828 <__alt_mem_mem_0+0xfcfec828>
 200cc04:	0101ffc4 	movi	r4,2047
 200cc08:	813f3a1e 	bne	r16,r4,200c8f4 <__alt_mem_mem_0+0xfcfec8f4>
 200cc0c:	003ec406 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200cc10:	0005883a 	mov	r2,zero
 200cc14:	003fb106 	br	200cadc <__alt_mem_mem_0+0xfcfecadc>
 200cc18:	0005883a 	mov	r2,zero
 200cc1c:	003fbc06 	br	200cb10 <__alt_mem_mem_0+0xfcfecb10>
 200cc20:	1c44b03a 	or	r2,r3,r17
 200cc24:	80008e1e 	bne	r16,zero,200ce60 <__subdf3+0x7c4>
 200cc28:	1000c826 	beq	r2,zero,200cf4c <__subdf3+0x8b0>
 200cc2c:	2984b03a 	or	r2,r5,r6
 200cc30:	103ebb26 	beq	r2,zero,200c720 <__alt_mem_mem_0+0xfcfec720>
 200cc34:	8989883a 	add	r4,r17,r6
 200cc38:	1945883a 	add	r2,r3,r5
 200cc3c:	2447803a 	cmpltu	r3,r4,r17
 200cc40:	1887883a 	add	r3,r3,r2
 200cc44:	1880202c 	andhi	r2,r3,128
 200cc48:	2023883a 	mov	r17,r4
 200cc4c:	103f1626 	beq	r2,zero,200c8a8 <__alt_mem_mem_0+0xfcfec8a8>
 200cc50:	00bfe034 	movhi	r2,65408
 200cc54:	10bfffc4 	addi	r2,r2,-1
 200cc58:	5021883a 	mov	r16,r10
 200cc5c:	1886703a 	and	r3,r3,r2
 200cc60:	003eaf06 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200cc64:	3825883a 	mov	r18,r7
 200cc68:	003f0f06 	br	200c8a8 <__alt_mem_mem_0+0xfcfec8a8>
 200cc6c:	1c44b03a 	or	r2,r3,r17
 200cc70:	8000251e 	bne	r16,zero,200cd08 <__subdf3+0x66c>
 200cc74:	1000661e 	bne	r2,zero,200ce10 <__subdf3+0x774>
 200cc78:	2990b03a 	or	r8,r5,r6
 200cc7c:	40009626 	beq	r8,zero,200ced8 <__subdf3+0x83c>
 200cc80:	2807883a 	mov	r3,r5
 200cc84:	3023883a 	mov	r17,r6
 200cc88:	3825883a 	mov	r18,r7
 200cc8c:	003ea406 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200cc90:	127ff804 	addi	r9,r2,-32
 200cc94:	01000804 	movi	r4,32
 200cc98:	2a52d83a 	srl	r9,r5,r9
 200cc9c:	11008c26 	beq	r2,r4,200ced0 <__subdf3+0x834>
 200cca0:	01001004 	movi	r4,64
 200cca4:	2085c83a 	sub	r2,r4,r2
 200cca8:	2884983a 	sll	r2,r5,r2
 200ccac:	118cb03a 	or	r6,r2,r6
 200ccb0:	300cc03a 	cmpne	r6,r6,zero
 200ccb4:	4992b03a 	or	r9,r9,r6
 200ccb8:	0005883a 	mov	r2,zero
 200ccbc:	003f1206 	br	200c908 <__alt_mem_mem_0+0xfcfec908>
 200ccc0:	0101ffc4 	movi	r4,2047
 200ccc4:	493f9c1e 	bne	r9,r4,200cb38 <__alt_mem_mem_0+0xfcfecb38>
 200ccc8:	2807883a 	mov	r3,r5
 200cccc:	3023883a 	mov	r17,r6
 200ccd0:	4821883a 	mov	r16,r9
 200ccd4:	3825883a 	mov	r18,r7
 200ccd8:	003e9106 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200ccdc:	80001f1e 	bne	r16,zero,200cd5c <__subdf3+0x6c0>
 200cce0:	1c48b03a 	or	r4,r3,r17
 200cce4:	20005a26 	beq	r4,zero,200ce50 <__subdf3+0x7b4>
 200cce8:	0084303a 	nor	r2,zero,r2
 200ccec:	1000561e 	bne	r2,zero,200ce48 <__subdf3+0x7ac>
 200ccf0:	89a3883a 	add	r17,r17,r6
 200ccf4:	1945883a 	add	r2,r3,r5
 200ccf8:	898d803a 	cmpltu	r6,r17,r6
 200ccfc:	3087883a 	add	r3,r6,r2
 200cd00:	4821883a 	mov	r16,r9
 200cd04:	003f0506 	br	200c91c <__alt_mem_mem_0+0xfcfec91c>
 200cd08:	10002b1e 	bne	r2,zero,200cdb8 <__subdf3+0x71c>
 200cd0c:	2984b03a 	or	r2,r5,r6
 200cd10:	10008026 	beq	r2,zero,200cf14 <__subdf3+0x878>
 200cd14:	2807883a 	mov	r3,r5
 200cd18:	3023883a 	mov	r17,r6
 200cd1c:	3825883a 	mov	r18,r7
 200cd20:	0401ffc4 	movi	r16,2047
 200cd24:	003e7e06 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200cd28:	3809883a 	mov	r4,r7
 200cd2c:	0011883a 	mov	r8,zero
 200cd30:	0005883a 	mov	r2,zero
 200cd34:	003ee306 	br	200c8c4 <__alt_mem_mem_0+0xfcfec8c4>
 200cd38:	1c62b03a 	or	r17,r3,r17
 200cd3c:	8822c03a 	cmpne	r17,r17,zero
 200cd40:	0005883a 	mov	r2,zero
 200cd44:	003f8906 	br	200cb6c <__alt_mem_mem_0+0xfcfecb6c>
 200cd48:	3809883a 	mov	r4,r7
 200cd4c:	4821883a 	mov	r16,r9
 200cd50:	0011883a 	mov	r8,zero
 200cd54:	0005883a 	mov	r2,zero
 200cd58:	003eda06 	br	200c8c4 <__alt_mem_mem_0+0xfcfec8c4>
 200cd5c:	0101ffc4 	movi	r4,2047
 200cd60:	49003b26 	beq	r9,r4,200ce50 <__subdf3+0x7b4>
 200cd64:	0085c83a 	sub	r2,zero,r2
 200cd68:	18c02034 	orhi	r3,r3,128
 200cd6c:	01000e04 	movi	r4,56
 200cd70:	20806e16 	blt	r4,r2,200cf2c <__subdf3+0x890>
 200cd74:	010007c4 	movi	r4,31
 200cd78:	20807716 	blt	r4,r2,200cf58 <__subdf3+0x8bc>
 200cd7c:	01000804 	movi	r4,32
 200cd80:	2089c83a 	sub	r4,r4,r2
 200cd84:	1914983a 	sll	r10,r3,r4
 200cd88:	8890d83a 	srl	r8,r17,r2
 200cd8c:	8908983a 	sll	r4,r17,r4
 200cd90:	1884d83a 	srl	r2,r3,r2
 200cd94:	5222b03a 	or	r17,r10,r8
 200cd98:	2006c03a 	cmpne	r3,r4,zero
 200cd9c:	88e2b03a 	or	r17,r17,r3
 200cda0:	89a3883a 	add	r17,r17,r6
 200cda4:	1145883a 	add	r2,r2,r5
 200cda8:	898d803a 	cmpltu	r6,r17,r6
 200cdac:	3087883a 	add	r3,r6,r2
 200cdb0:	4821883a 	mov	r16,r9
 200cdb4:	003ed906 	br	200c91c <__alt_mem_mem_0+0xfcfec91c>
 200cdb8:	2984b03a 	or	r2,r5,r6
 200cdbc:	10004226 	beq	r2,zero,200cec8 <__subdf3+0x82c>
 200cdc0:	1808d0fa 	srli	r4,r3,3
 200cdc4:	8822d0fa 	srli	r17,r17,3
 200cdc8:	1806977a 	slli	r3,r3,29
 200cdcc:	2080022c 	andhi	r2,r4,8
 200cdd0:	1c62b03a 	or	r17,r3,r17
 200cdd4:	10000826 	beq	r2,zero,200cdf8 <__subdf3+0x75c>
 200cdd8:	2812d0fa 	srli	r9,r5,3
 200cddc:	4880022c 	andhi	r2,r9,8
 200cde0:	1000051e 	bne	r2,zero,200cdf8 <__subdf3+0x75c>
 200cde4:	300cd0fa 	srli	r6,r6,3
 200cde8:	2804977a 	slli	r2,r5,29
 200cdec:	4809883a 	mov	r4,r9
 200cdf0:	3825883a 	mov	r18,r7
 200cdf4:	11a2b03a 	or	r17,r2,r6
 200cdf8:	8806d77a 	srli	r3,r17,29
 200cdfc:	200890fa 	slli	r4,r4,3
 200ce00:	882290fa 	slli	r17,r17,3
 200ce04:	0401ffc4 	movi	r16,2047
 200ce08:	1906b03a 	or	r3,r3,r4
 200ce0c:	003e4406 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200ce10:	2984b03a 	or	r2,r5,r6
 200ce14:	103e4226 	beq	r2,zero,200c720 <__alt_mem_mem_0+0xfcfec720>
 200ce18:	8989c83a 	sub	r4,r17,r6
 200ce1c:	8911803a 	cmpltu	r8,r17,r4
 200ce20:	1945c83a 	sub	r2,r3,r5
 200ce24:	1205c83a 	sub	r2,r2,r8
 200ce28:	1200202c 	andhi	r8,r2,128
 200ce2c:	403e9a26 	beq	r8,zero,200c898 <__alt_mem_mem_0+0xfcfec898>
 200ce30:	3463c83a 	sub	r17,r6,r17
 200ce34:	28c5c83a 	sub	r2,r5,r3
 200ce38:	344d803a 	cmpltu	r6,r6,r17
 200ce3c:	1187c83a 	sub	r3,r2,r6
 200ce40:	3825883a 	mov	r18,r7
 200ce44:	003e3606 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200ce48:	0101ffc4 	movi	r4,2047
 200ce4c:	493fc71e 	bne	r9,r4,200cd6c <__alt_mem_mem_0+0xfcfecd6c>
 200ce50:	2807883a 	mov	r3,r5
 200ce54:	3023883a 	mov	r17,r6
 200ce58:	4821883a 	mov	r16,r9
 200ce5c:	003e3006 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200ce60:	10003626 	beq	r2,zero,200cf3c <__subdf3+0x8a0>
 200ce64:	2984b03a 	or	r2,r5,r6
 200ce68:	10001726 	beq	r2,zero,200cec8 <__subdf3+0x82c>
 200ce6c:	1808d0fa 	srli	r4,r3,3
 200ce70:	8822d0fa 	srli	r17,r17,3
 200ce74:	1806977a 	slli	r3,r3,29
 200ce78:	2080022c 	andhi	r2,r4,8
 200ce7c:	1c62b03a 	or	r17,r3,r17
 200ce80:	10000726 	beq	r2,zero,200cea0 <__subdf3+0x804>
 200ce84:	2812d0fa 	srli	r9,r5,3
 200ce88:	4880022c 	andhi	r2,r9,8
 200ce8c:	1000041e 	bne	r2,zero,200cea0 <__subdf3+0x804>
 200ce90:	300cd0fa 	srli	r6,r6,3
 200ce94:	2804977a 	slli	r2,r5,29
 200ce98:	4809883a 	mov	r4,r9
 200ce9c:	11a2b03a 	or	r17,r2,r6
 200cea0:	8806d77a 	srli	r3,r17,29
 200cea4:	200890fa 	slli	r4,r4,3
 200cea8:	882290fa 	slli	r17,r17,3
 200ceac:	3825883a 	mov	r18,r7
 200ceb0:	1906b03a 	or	r3,r3,r4
 200ceb4:	0401ffc4 	movi	r16,2047
 200ceb8:	003e1906 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200cebc:	000b883a 	mov	r5,zero
 200cec0:	0005883a 	mov	r2,zero
 200cec4:	003e2e06 	br	200c780 <__alt_mem_mem_0+0xfcfec780>
 200cec8:	0401ffc4 	movi	r16,2047
 200cecc:	003e1406 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200ced0:	0005883a 	mov	r2,zero
 200ced4:	003f7506 	br	200ccac <__alt_mem_mem_0+0xfcfeccac>
 200ced8:	0005883a 	mov	r2,zero
 200cedc:	0009883a 	mov	r4,zero
 200cee0:	003e7806 	br	200c8c4 <__alt_mem_mem_0+0xfcfec8c4>
 200cee4:	123ff804 	addi	r8,r2,-32
 200cee8:	01000804 	movi	r4,32
 200ceec:	1a10d83a 	srl	r8,r3,r8
 200cef0:	11002526 	beq	r2,r4,200cf88 <__subdf3+0x8ec>
 200cef4:	01001004 	movi	r4,64
 200cef8:	2085c83a 	sub	r2,r4,r2
 200cefc:	1884983a 	sll	r2,r3,r2
 200cf00:	1444b03a 	or	r2,r2,r17
 200cf04:	1004c03a 	cmpne	r2,r2,zero
 200cf08:	40a2b03a 	or	r17,r8,r2
 200cf0c:	0005883a 	mov	r2,zero
 200cf10:	003f1606 	br	200cb6c <__alt_mem_mem_0+0xfcfecb6c>
 200cf14:	02000434 	movhi	r8,16
 200cf18:	0009883a 	mov	r4,zero
 200cf1c:	423fffc4 	addi	r8,r8,-1
 200cf20:	00bfffc4 	movi	r2,-1
 200cf24:	0401ffc4 	movi	r16,2047
 200cf28:	003e6606 	br	200c8c4 <__alt_mem_mem_0+0xfcfec8c4>
 200cf2c:	1c62b03a 	or	r17,r3,r17
 200cf30:	8822c03a 	cmpne	r17,r17,zero
 200cf34:	0005883a 	mov	r2,zero
 200cf38:	003f9906 	br	200cda0 <__alt_mem_mem_0+0xfcfecda0>
 200cf3c:	2807883a 	mov	r3,r5
 200cf40:	3023883a 	mov	r17,r6
 200cf44:	0401ffc4 	movi	r16,2047
 200cf48:	003df506 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200cf4c:	2807883a 	mov	r3,r5
 200cf50:	3023883a 	mov	r17,r6
 200cf54:	003df206 	br	200c720 <__alt_mem_mem_0+0xfcfec720>
 200cf58:	123ff804 	addi	r8,r2,-32
 200cf5c:	01000804 	movi	r4,32
 200cf60:	1a10d83a 	srl	r8,r3,r8
 200cf64:	11000a26 	beq	r2,r4,200cf90 <__subdf3+0x8f4>
 200cf68:	01001004 	movi	r4,64
 200cf6c:	2085c83a 	sub	r2,r4,r2
 200cf70:	1884983a 	sll	r2,r3,r2
 200cf74:	1444b03a 	or	r2,r2,r17
 200cf78:	1004c03a 	cmpne	r2,r2,zero
 200cf7c:	40a2b03a 	or	r17,r8,r2
 200cf80:	0005883a 	mov	r2,zero
 200cf84:	003f8606 	br	200cda0 <__alt_mem_mem_0+0xfcfecda0>
 200cf88:	0005883a 	mov	r2,zero
 200cf8c:	003fdc06 	br	200cf00 <__alt_mem_mem_0+0xfcfecf00>
 200cf90:	0005883a 	mov	r2,zero
 200cf94:	003ff706 	br	200cf74 <__alt_mem_mem_0+0xfcfecf74>

0200cf98 <__fixdfsi>:
 200cf98:	280cd53a 	srli	r6,r5,20
 200cf9c:	00c00434 	movhi	r3,16
 200cfa0:	18ffffc4 	addi	r3,r3,-1
 200cfa4:	3181ffcc 	andi	r6,r6,2047
 200cfa8:	01c0ff84 	movi	r7,1022
 200cfac:	28c6703a 	and	r3,r5,r3
 200cfb0:	280ad7fa 	srli	r5,r5,31
 200cfb4:	3980120e 	bge	r7,r6,200d000 <__fixdfsi+0x68>
 200cfb8:	00810744 	movi	r2,1053
 200cfbc:	11800c16 	blt	r2,r6,200cff0 <__fixdfsi+0x58>
 200cfc0:	00810cc4 	movi	r2,1075
 200cfc4:	1185c83a 	sub	r2,r2,r6
 200cfc8:	01c007c4 	movi	r7,31
 200cfcc:	18c00434 	orhi	r3,r3,16
 200cfd0:	38800d16 	blt	r7,r2,200d008 <__fixdfsi+0x70>
 200cfd4:	31befb44 	addi	r6,r6,-1043
 200cfd8:	2084d83a 	srl	r2,r4,r2
 200cfdc:	1986983a 	sll	r3,r3,r6
 200cfe0:	1884b03a 	or	r2,r3,r2
 200cfe4:	28000726 	beq	r5,zero,200d004 <__fixdfsi+0x6c>
 200cfe8:	0085c83a 	sub	r2,zero,r2
 200cfec:	f800283a 	ret
 200cff0:	00a00034 	movhi	r2,32768
 200cff4:	10bfffc4 	addi	r2,r2,-1
 200cff8:	2885883a 	add	r2,r5,r2
 200cffc:	f800283a 	ret
 200d000:	0005883a 	mov	r2,zero
 200d004:	f800283a 	ret
 200d008:	008104c4 	movi	r2,1043
 200d00c:	1185c83a 	sub	r2,r2,r6
 200d010:	1884d83a 	srl	r2,r3,r2
 200d014:	003ff306 	br	200cfe4 <__alt_mem_mem_0+0xfcfecfe4>

0200d018 <__floatsidf>:
 200d018:	defffd04 	addi	sp,sp,-12
 200d01c:	dfc00215 	stw	ra,8(sp)
 200d020:	dc400115 	stw	r17,4(sp)
 200d024:	dc000015 	stw	r16,0(sp)
 200d028:	20002b26 	beq	r4,zero,200d0d8 <__floatsidf+0xc0>
 200d02c:	2023883a 	mov	r17,r4
 200d030:	2020d7fa 	srli	r16,r4,31
 200d034:	20002d16 	blt	r4,zero,200d0ec <__floatsidf+0xd4>
 200d038:	8809883a 	mov	r4,r17
 200d03c:	200d19c0 	call	200d19c <__clzsi2>
 200d040:	01410784 	movi	r5,1054
 200d044:	288bc83a 	sub	r5,r5,r2
 200d048:	01010cc4 	movi	r4,1075
 200d04c:	2149c83a 	sub	r4,r4,r5
 200d050:	00c007c4 	movi	r3,31
 200d054:	1900160e 	bge	r3,r4,200d0b0 <__floatsidf+0x98>
 200d058:	00c104c4 	movi	r3,1043
 200d05c:	1947c83a 	sub	r3,r3,r5
 200d060:	88c6983a 	sll	r3,r17,r3
 200d064:	00800434 	movhi	r2,16
 200d068:	10bfffc4 	addi	r2,r2,-1
 200d06c:	1886703a 	and	r3,r3,r2
 200d070:	2941ffcc 	andi	r5,r5,2047
 200d074:	800d883a 	mov	r6,r16
 200d078:	0005883a 	mov	r2,zero
 200d07c:	280a953a 	slli	r5,r5,20
 200d080:	31803fcc 	andi	r6,r6,255
 200d084:	01000434 	movhi	r4,16
 200d088:	300c97fa 	slli	r6,r6,31
 200d08c:	213fffc4 	addi	r4,r4,-1
 200d090:	1906703a 	and	r3,r3,r4
 200d094:	1946b03a 	or	r3,r3,r5
 200d098:	1986b03a 	or	r3,r3,r6
 200d09c:	dfc00217 	ldw	ra,8(sp)
 200d0a0:	dc400117 	ldw	r17,4(sp)
 200d0a4:	dc000017 	ldw	r16,0(sp)
 200d0a8:	dec00304 	addi	sp,sp,12
 200d0ac:	f800283a 	ret
 200d0b0:	00c002c4 	movi	r3,11
 200d0b4:	1887c83a 	sub	r3,r3,r2
 200d0b8:	88c6d83a 	srl	r3,r17,r3
 200d0bc:	8904983a 	sll	r2,r17,r4
 200d0c0:	01000434 	movhi	r4,16
 200d0c4:	213fffc4 	addi	r4,r4,-1
 200d0c8:	2941ffcc 	andi	r5,r5,2047
 200d0cc:	1906703a 	and	r3,r3,r4
 200d0d0:	800d883a 	mov	r6,r16
 200d0d4:	003fe906 	br	200d07c <__alt_mem_mem_0+0xfcfed07c>
 200d0d8:	000d883a 	mov	r6,zero
 200d0dc:	000b883a 	mov	r5,zero
 200d0e0:	0007883a 	mov	r3,zero
 200d0e4:	0005883a 	mov	r2,zero
 200d0e8:	003fe406 	br	200d07c <__alt_mem_mem_0+0xfcfed07c>
 200d0ec:	0123c83a 	sub	r17,zero,r4
 200d0f0:	003fd106 	br	200d038 <__alt_mem_mem_0+0xfcfed038>

0200d0f4 <__floatunsidf>:
 200d0f4:	defffe04 	addi	sp,sp,-8
 200d0f8:	dc000015 	stw	r16,0(sp)
 200d0fc:	dfc00115 	stw	ra,4(sp)
 200d100:	2021883a 	mov	r16,r4
 200d104:	20002226 	beq	r4,zero,200d190 <__floatunsidf+0x9c>
 200d108:	200d19c0 	call	200d19c <__clzsi2>
 200d10c:	01010784 	movi	r4,1054
 200d110:	2089c83a 	sub	r4,r4,r2
 200d114:	01810cc4 	movi	r6,1075
 200d118:	310dc83a 	sub	r6,r6,r4
 200d11c:	00c007c4 	movi	r3,31
 200d120:	1980120e 	bge	r3,r6,200d16c <__floatunsidf+0x78>
 200d124:	00c104c4 	movi	r3,1043
 200d128:	1907c83a 	sub	r3,r3,r4
 200d12c:	80ca983a 	sll	r5,r16,r3
 200d130:	00800434 	movhi	r2,16
 200d134:	10bfffc4 	addi	r2,r2,-1
 200d138:	2101ffcc 	andi	r4,r4,2047
 200d13c:	0021883a 	mov	r16,zero
 200d140:	288a703a 	and	r5,r5,r2
 200d144:	2008953a 	slli	r4,r4,20
 200d148:	00c00434 	movhi	r3,16
 200d14c:	18ffffc4 	addi	r3,r3,-1
 200d150:	28c6703a 	and	r3,r5,r3
 200d154:	8005883a 	mov	r2,r16
 200d158:	1906b03a 	or	r3,r3,r4
 200d15c:	dfc00117 	ldw	ra,4(sp)
 200d160:	dc000017 	ldw	r16,0(sp)
 200d164:	dec00204 	addi	sp,sp,8
 200d168:	f800283a 	ret
 200d16c:	00c002c4 	movi	r3,11
 200d170:	188bc83a 	sub	r5,r3,r2
 200d174:	814ad83a 	srl	r5,r16,r5
 200d178:	00c00434 	movhi	r3,16
 200d17c:	18ffffc4 	addi	r3,r3,-1
 200d180:	81a0983a 	sll	r16,r16,r6
 200d184:	2101ffcc 	andi	r4,r4,2047
 200d188:	28ca703a 	and	r5,r5,r3
 200d18c:	003fed06 	br	200d144 <__alt_mem_mem_0+0xfcfed144>
 200d190:	0009883a 	mov	r4,zero
 200d194:	000b883a 	mov	r5,zero
 200d198:	003fea06 	br	200d144 <__alt_mem_mem_0+0xfcfed144>

0200d19c <__clzsi2>:
 200d19c:	00bfffd4 	movui	r2,65535
 200d1a0:	11000536 	bltu	r2,r4,200d1b8 <__clzsi2+0x1c>
 200d1a4:	00803fc4 	movi	r2,255
 200d1a8:	11000f36 	bltu	r2,r4,200d1e8 <__clzsi2+0x4c>
 200d1ac:	00800804 	movi	r2,32
 200d1b0:	0007883a 	mov	r3,zero
 200d1b4:	00000506 	br	200d1cc <__clzsi2+0x30>
 200d1b8:	00804034 	movhi	r2,256
 200d1bc:	10bfffc4 	addi	r2,r2,-1
 200d1c0:	11000c2e 	bgeu	r2,r4,200d1f4 <__clzsi2+0x58>
 200d1c4:	00800204 	movi	r2,8
 200d1c8:	00c00604 	movi	r3,24
 200d1cc:	20c8d83a 	srl	r4,r4,r3
 200d1d0:	00c08134 	movhi	r3,516
 200d1d4:	18c3e204 	addi	r3,r3,3976
 200d1d8:	1909883a 	add	r4,r3,r4
 200d1dc:	20c00003 	ldbu	r3,0(r4)
 200d1e0:	10c5c83a 	sub	r2,r2,r3
 200d1e4:	f800283a 	ret
 200d1e8:	00800604 	movi	r2,24
 200d1ec:	00c00204 	movi	r3,8
 200d1f0:	003ff606 	br	200d1cc <__alt_mem_mem_0+0xfcfed1cc>
 200d1f4:	00800404 	movi	r2,16
 200d1f8:	1007883a 	mov	r3,r2
 200d1fc:	003ff306 	br	200d1cc <__alt_mem_mem_0+0xfcfed1cc>

0200d200 <pre_constructors>:
/*
 * We want this pre_constructors and post_constructors functions to be called when it is defined by the user, if the user didn't define it
 * we don't want a link error, just call this empty function
 */
void __attribute__((weak)) pre_constructors()
{
 200d200:	deffff04 	addi	sp,sp,-4
 200d204:	df000015 	stw	fp,0(sp)
 200d208:	d839883a 	mov	fp,sp
	// nothing to do here... may be overloaded by the application
}
 200d20c:	0001883a 	nop
 200d210:	e037883a 	mov	sp,fp
 200d214:	df000017 	ldw	fp,0(sp)
 200d218:	dec00104 	addi	sp,sp,4
 200d21c:	f800283a 	ret

0200d220 <post_constructors>:

void __attribute__((weak)) post_constructors()
{
 200d220:	deffff04 	addi	sp,sp,-4
 200d224:	df000015 	stw	fp,0(sp)
 200d228:	d839883a 	mov	fp,sp
	// nothing to do here... may be overloaded by the application
}
 200d22c:	0001883a 	nop
 200d230:	e037883a 	mov	sp,fp
 200d234:	df000017 	ldw	fp,0(sp)
 200d238:	dec00104 	addi	sp,sp,4
 200d23c:	f800283a 	ret

0200d240 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200d240:	defff904 	addi	sp,sp,-28
 200d244:	dfc00615 	stw	ra,24(sp)
 200d248:	df000515 	stw	fp,20(sp)
 200d24c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200d250:	0009883a 	mov	r4,zero
 200d254:	20244f00 	call	20244f0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 200d258:	01000104 	movi	r4,4
 200d25c:	200d6680 	call	200d668 <xQueueCreateMutex>
 200d260:	d0a7d215 	stw	r2,-24760(gp)
 200d264:	01000104 	movi	r4,4
 200d268:	200d6680 	call	200d668 <xQueueCreateMutex>
 200d26c:	d0a80015 	stw	r2,-24576(gp)
 200d270:	d0a7e704 	addi	r2,gp,-24676
 200d274:	e0bffc15 	stw	r2,-16(fp)
 200d278:	00800044 	movi	r2,1
 200d27c:	e0bffd0d 	sth	r2,-12(fp)
 * alt_sem_create() is a wrapper for xSemaphoreCreateCounting(). The return value is 0 if 
 * the semaphore has been successfully created, or non-zero otherwise.
 */
static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (xSemaphoreHandle* sem, alt_u16 value)
{
	*sem = xSemaphoreCreateCounting(value ? value : 1, value);
 200d280:	e0bffd0b 	ldhu	r2,-12(fp)
 200d284:	10000226 	beq	r2,zero,200d290 <alt_main+0x50>
 200d288:	e0bffd0b 	ldhu	r2,-12(fp)
 200d28c:	00000106 	br	200d294 <alt_main+0x54>
 200d290:	00800044 	movi	r2,1
 200d294:	e0fffd0b 	ldhu	r3,-12(fp)
 200d298:	180b883a 	mov	r5,r3
 200d29c:	1009883a 	mov	r4,r2
 200d2a0:	200d7f00 	call	200d7f0 <xQueueCreateCountingSemaphore>
 200d2a4:	1007883a 	mov	r3,r2
 200d2a8:	e0bffc17 	ldw	r2,-16(fp)
 200d2ac:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200d2b0:	20245280 	call	2024528 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200d2b4:	01808134 	movhi	r6,516
 200d2b8:	31842204 	addi	r6,r6,4232
 200d2bc:	01408134 	movhi	r5,516
 200d2c0:	29442204 	addi	r5,r5,4232
 200d2c4:	01008134 	movhi	r4,516
 200d2c8:	21042204 	addi	r4,r4,4232
 200d2cc:	20127140 	call	2012714 <alt_io_redirect>
#endif

  /*
   * Call the pre_constructors function
   */
  pre_constructors();
 200d2d0:	200d2000 	call	200d200 <pre_constructors>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200d2d4:	20124a40 	call	20124a4 <_do_ctors>
#endif /* ALT_NO_C_PLUS_PLUS */

  /*
   * Call the post_constructors function
   */
  post_constructors();
 200d2d8:	200d2200 	call	200d220 <post_constructors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200d2dc:	01008074 	movhi	r4,513
 200d2e0:	21094104 	addi	r4,r4,9476
 200d2e4:	203ca480 	call	203ca48 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200d2e8:	d0a7cf17 	ldw	r2,-24772(gp)
 200d2ec:	d0e7d017 	ldw	r3,-24768(gp)
 200d2f0:	d127d117 	ldw	r4,-24764(gp)
 200d2f4:	200d883a 	mov	r6,r4
 200d2f8:	180b883a 	mov	r5,r3
 200d2fc:	1009883a 	mov	r4,r2
 200d300:	20008d00 	call	20008d0 <main>
 200d304:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 200d308:	01000044 	movi	r4,1
 200d30c:	201303c0 	call	201303c <close>
  exit (result);
 200d310:	e13ffb17 	ldw	r4,-20(fp)
 200d314:	203ca5c0 	call	203ca5c <exit>

0200d318 <__malloc_lock>:
xSemaphoreHandle alt_heapsem;

/* __malloc_lock needs to provide recursive mutex locking */

void __malloc_lock ( struct _reent *_r )
{
 200d318:	defffd04 	addi	sp,sp,-12
 200d31c:	dfc00215 	stw	ra,8(sp)
 200d320:	df000115 	stw	fp,4(sp)
 200d324:	df000104 	addi	fp,sp,4
 200d328:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 200d32c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200d330:	10000b26 	beq	r2,zero,200d360 <__malloc_lock+0x48>
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_heapsem, 10) != pdTRUE)
 200d334:	00000206 	br	200d340 <__malloc_lock+0x28>
		vTaskDelay(1);
 200d338:	01000044 	movi	r4,1
 200d33c:	200f0980 	call	200f098 <vTaskDelay>
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_heapsem, 10) != pdTRUE)
 200d340:	d0a7d217 	ldw	r2,-24760(gp)
 200d344:	01400284 	movi	r5,10
 200d348:	1009883a 	mov	r4,r2
 200d34c:	200d7540 	call	200d754 <xQueueTakeMutexRecursive>
 200d350:	10800058 	cmpnei	r2,r2,1
 200d354:	103ff81e 	bne	r2,zero,200d338 <__alt_mem_mem_0+0xfcfed338>
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
 200d358:	0001883a 	nop
 200d35c:	00000106 	br	200d364 <__malloc_lock+0x4c>

void __malloc_lock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 200d360:	0001883a 	nop
	while (xSemaphoreTakeRecursive(alt_heapsem, 10) != pdTRUE)
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
}
 200d364:	e037883a 	mov	sp,fp
 200d368:	dfc00117 	ldw	ra,4(sp)
 200d36c:	df000017 	ldw	fp,0(sp)
 200d370:	dec00204 	addi	sp,sp,8
 200d374:	f800283a 	ret

0200d378 <__malloc_unlock>:

/* __malloc_unlock needs to provide recursive mutex unlocking */

void __malloc_unlock ( struct _reent *_r )
{
 200d378:	defffd04 	addi	sp,sp,-12
 200d37c:	dfc00215 	stw	ra,8(sp)
 200d380:	df000115 	stw	fp,4(sp)
 200d384:	df000104 	addi	fp,sp,4
 200d388:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 200d38c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200d390:	10000426 	beq	r2,zero,200d3a4 <__malloc_unlock+0x2c>
		return;
	  
	xSemaphoreGiveRecursive(alt_heapsem);
 200d394:	d0a7d217 	ldw	r2,-24760(gp)
 200d398:	1009883a 	mov	r4,r2
 200d39c:	200d6c40 	call	200d6c4 <xQueueGiveMutexRecursive>
 200d3a0:	00000106 	br	200d3a8 <__malloc_unlock+0x30>

void __malloc_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 200d3a4:	0001883a 	nop
	  
	xSemaphoreGiveRecursive(alt_heapsem);
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 200d3a8:	e037883a 	mov	sp,fp
 200d3ac:	dfc00117 	ldw	ra,4(sp)
 200d3b0:	df000017 	ldw	fp,0(sp)
 200d3b4:	dec00204 	addi	sp,sp,8
 200d3b8:	f800283a 	ret

0200d3bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 200d3bc:	defffb04 	addi	sp,sp,-20
 200d3c0:	dfc00415 	stw	ra,16(sp)
 200d3c4:	df000315 	stw	fp,12(sp)
 200d3c8:	df000304 	addi	fp,sp,12
 200d3cc:	e13ffe15 	stw	r4,-8(fp)
 200d3d0:	e17fff15 	stw	r5,-4(fp)
Queue_t * const pxQueue = xQueue;
 200d3d4:	e0bffe17 	ldw	r2,-8(fp)
 200d3d8:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 200d3dc:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200d3e0:	10000126 	beq	r2,zero,200d3e8 <xQueueGenericReset+0x2c>
 200d3e4:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 200d3e8:	e0bffd17 	ldw	r2,-12(fp)
 200d3ec:	10c00017 	ldw	r3,0(r2)
 200d3f0:	e0bffd17 	ldw	r2,-12(fp)
 200d3f4:	11000f17 	ldw	r4,60(r2)
 200d3f8:	e0bffd17 	ldw	r2,-12(fp)
 200d3fc:	10801017 	ldw	r2,64(r2)
 200d400:	2085383a 	mul	r2,r4,r2
 200d404:	1887883a 	add	r3,r3,r2
 200d408:	e0bffd17 	ldw	r2,-12(fp)
 200d40c:	10c00215 	stw	r3,8(r2)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 200d410:	e0bffd17 	ldw	r2,-12(fp)
 200d414:	10000e15 	stw	zero,56(r2)
		pxQueue->pcWriteTo = pxQueue->pcHead;
 200d418:	e0bffd17 	ldw	r2,-12(fp)
 200d41c:	10c00017 	ldw	r3,0(r2)
 200d420:	e0bffd17 	ldw	r2,-12(fp)
 200d424:	10c00115 	stw	r3,4(r2)
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 200d428:	e0bffd17 	ldw	r2,-12(fp)
 200d42c:	10c00017 	ldw	r3,0(r2)
 200d430:	e0bffd17 	ldw	r2,-12(fp)
 200d434:	10800f17 	ldw	r2,60(r2)
 200d438:	113fffc4 	addi	r4,r2,-1
 200d43c:	e0bffd17 	ldw	r2,-12(fp)
 200d440:	10801017 	ldw	r2,64(r2)
 200d444:	2085383a 	mul	r2,r4,r2
 200d448:	1887883a 	add	r3,r3,r2
 200d44c:	e0bffd17 	ldw	r2,-12(fp)
 200d450:	10c00315 	stw	r3,12(r2)
		pxQueue->cRxLock = queueUNLOCKED;
 200d454:	e0bffd17 	ldw	r2,-12(fp)
 200d458:	00ffffc4 	movi	r3,-1
 200d45c:	10c01105 	stb	r3,68(r2)
		pxQueue->cTxLock = queueUNLOCKED;
 200d460:	e0bffd17 	ldw	r2,-12(fp)
 200d464:	00ffffc4 	movi	r3,-1
 200d468:	10c01145 	stb	r3,69(r2)

		if( xNewQueue == pdFALSE )
 200d46c:	e0bfff17 	ldw	r2,-4(fp)
 200d470:	10000a1e 	bne	r2,zero,200d49c <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 200d474:	e0bffd17 	ldw	r2,-12(fp)
 200d478:	10800417 	ldw	r2,16(r2)
 200d47c:	10000f26 	beq	r2,zero,200d4bc <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 200d480:	e0bffd17 	ldw	r2,-12(fp)
 200d484:	10800404 	addi	r2,r2,16
 200d488:	1009883a 	mov	r4,r2
 200d48c:	20100c40 	call	20100c4 <xTaskRemoveFromEventList>
 200d490:	10000a26 	beq	r2,zero,200d4bc <xQueueGenericReset+0x100>
				{
					queueYIELD_IF_USING_PREEMPTION();
 200d494:	003b683a 	trap	0
 200d498:	00000806 	br	200d4bc <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 200d49c:	e0bffd17 	ldw	r2,-12(fp)
 200d4a0:	10800404 	addi	r2,r2,16
 200d4a4:	1009883a 	mov	r4,r2
 200d4a8:	2026b9c0 	call	2026b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 200d4ac:	e0bffd17 	ldw	r2,-12(fp)
 200d4b0:	10800904 	addi	r2,r2,36
 200d4b4:	1009883a 	mov	r4,r2
 200d4b8:	2026b9c0 	call	2026b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 200d4bc:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200d4c0:	10000126 	beq	r2,zero,200d4c8 <xQueueGenericReset+0x10c>
 200d4c4:	2010e300 	call	2010e30 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 200d4c8:	00800044 	movi	r2,1
}
 200d4cc:	e037883a 	mov	sp,fp
 200d4d0:	dfc00117 	ldw	ra,4(sp)
 200d4d4:	df000017 	ldw	fp,0(sp)
 200d4d8:	dec00204 	addi	sp,sp,8
 200d4dc:	f800283a 	ret

0200d4e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 200d4e0:	defff704 	addi	sp,sp,-36
 200d4e4:	dfc00815 	stw	ra,32(sp)
 200d4e8:	df000715 	stw	fp,28(sp)
 200d4ec:	df000704 	addi	fp,sp,28
 200d4f0:	e13ffd15 	stw	r4,-12(fp)
 200d4f4:	e17ffe15 	stw	r5,-8(fp)
 200d4f8:	3005883a 	mov	r2,r6
 200d4fc:	e0bfff05 	stb	r2,-4(fp)
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 200d500:	e0fffd17 	ldw	r3,-12(fp)
 200d504:	e0bffe17 	ldw	r2,-8(fp)
 200d508:	1885383a 	mul	r2,r3,r2
 200d50c:	e0bffa15 	stw	r2,-24(fp)
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 200d510:	e0bffa17 	ldw	r2,-24(fp)
 200d514:	10801404 	addi	r2,r2,80
 200d518:	1009883a 	mov	r4,r2
 200d51c:	2026a680 	call	2026a68 <pvPortMalloc>
 200d520:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewQueue != NULL )
 200d524:	e0bffb17 	ldw	r2,-20(fp)
 200d528:	10000d26 	beq	r2,zero,200d560 <xQueueGenericCreate+0x80>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 200d52c:	e0bffb17 	ldw	r2,-20(fp)
 200d530:	e0bffc15 	stw	r2,-16(fp)
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 200d534:	e0bffc17 	ldw	r2,-16(fp)
 200d538:	10801404 	addi	r2,r2,80
 200d53c:	e0bffc15 	stw	r2,-16(fp)
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 200d540:	e0ffff03 	ldbu	r3,-4(fp)
 200d544:	e0bffb17 	ldw	r2,-20(fp)
 200d548:	d8800015 	stw	r2,0(sp)
 200d54c:	180f883a 	mov	r7,r3
 200d550:	e1bffc17 	ldw	r6,-16(fp)
 200d554:	e17ffe17 	ldw	r5,-8(fp)
 200d558:	e13ffd17 	ldw	r4,-12(fp)
 200d55c:	200d5780 	call	200d578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 200d560:	e0bffb17 	ldw	r2,-20(fp)
	}
 200d564:	e037883a 	mov	sp,fp
 200d568:	dfc00117 	ldw	ra,4(sp)
 200d56c:	df000017 	ldw	fp,0(sp)
 200d570:	dec00204 	addi	sp,sp,8
 200d574:	f800283a 	ret

0200d578 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 200d578:	defffa04 	addi	sp,sp,-24
 200d57c:	dfc00515 	stw	ra,20(sp)
 200d580:	df000415 	stw	fp,16(sp)
 200d584:	df000404 	addi	fp,sp,16
 200d588:	e13ffc15 	stw	r4,-16(fp)
 200d58c:	e17ffd15 	stw	r5,-12(fp)
 200d590:	e1bffe15 	stw	r6,-8(fp)
 200d594:	3805883a 	mov	r2,r7
 200d598:	e0bfff05 	stb	r2,-4(fp)
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 200d59c:	e0bffd17 	ldw	r2,-12(fp)
 200d5a0:	1000041e 	bne	r2,zero,200d5b4 <prvInitialiseNewQueue+0x3c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 200d5a4:	e0800217 	ldw	r2,8(fp)
 200d5a8:	e0c00217 	ldw	r3,8(fp)
 200d5ac:	10c00015 	stw	r3,0(r2)
 200d5b0:	00000306 	br	200d5c0 <prvInitialiseNewQueue+0x48>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 200d5b4:	e0800217 	ldw	r2,8(fp)
 200d5b8:	e0fffe17 	ldw	r3,-8(fp)
 200d5bc:	10c00015 	stw	r3,0(r2)
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 200d5c0:	e0800217 	ldw	r2,8(fp)
 200d5c4:	e0fffc17 	ldw	r3,-16(fp)
 200d5c8:	10c00f15 	stw	r3,60(r2)
	pxNewQueue->uxItemSize = uxItemSize;
 200d5cc:	e0800217 	ldw	r2,8(fp)
 200d5d0:	e0fffd17 	ldw	r3,-12(fp)
 200d5d4:	10c01015 	stw	r3,64(r2)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 200d5d8:	01400044 	movi	r5,1
 200d5dc:	e1000217 	ldw	r4,8(fp)
 200d5e0:	200d3bc0 	call	200d3bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 200d5e4:	e0800217 	ldw	r2,8(fp)
 200d5e8:	e0ffff03 	ldbu	r3,-4(fp)
 200d5ec:	10c01305 	stb	r3,76(r2)
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 200d5f0:	0001883a 	nop
 200d5f4:	e037883a 	mov	sp,fp
 200d5f8:	dfc00117 	ldw	ra,4(sp)
 200d5fc:	df000017 	ldw	fp,0(sp)
 200d600:	dec00204 	addi	sp,sp,8
 200d604:	f800283a 	ret

0200d608 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 200d608:	defffd04 	addi	sp,sp,-12
 200d60c:	dfc00215 	stw	ra,8(sp)
 200d610:	df000115 	stw	fp,4(sp)
 200d614:	df000104 	addi	fp,sp,4
 200d618:	e13fff15 	stw	r4,-4(fp)
		if( pxNewQueue != NULL )
 200d61c:	e0bfff17 	ldw	r2,-4(fp)
 200d620:	10000b26 	beq	r2,zero,200d650 <prvInitialiseMutex+0x48>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 200d624:	e0bfff17 	ldw	r2,-4(fp)
 200d628:	10000215 	stw	zero,8(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 200d62c:	e0bfff17 	ldw	r2,-4(fp)
 200d630:	10000015 	stw	zero,0(r2)

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 200d634:	e0bfff17 	ldw	r2,-4(fp)
 200d638:	10000315 	stw	zero,12(r2)

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 200d63c:	000f883a 	mov	r7,zero
 200d640:	000d883a 	mov	r6,zero
 200d644:	000b883a 	mov	r5,zero
 200d648:	e13fff17 	ldw	r4,-4(fp)
 200d64c:	200d8480 	call	200d848 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 200d650:	0001883a 	nop
 200d654:	e037883a 	mov	sp,fp
 200d658:	dfc00117 	ldw	ra,4(sp)
 200d65c:	df000017 	ldw	fp,0(sp)
 200d660:	dec00204 	addi	sp,sp,8
 200d664:	f800283a 	ret

0200d668 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 200d668:	defffa04 	addi	sp,sp,-24
 200d66c:	dfc00515 	stw	ra,20(sp)
 200d670:	df000415 	stw	fp,16(sp)
 200d674:	df000404 	addi	fp,sp,16
 200d678:	2005883a 	mov	r2,r4
 200d67c:	e0bfff05 	stb	r2,-4(fp)
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 200d680:	00800044 	movi	r2,1
 200d684:	e0bffc15 	stw	r2,-16(fp)
 200d688:	e03ffd15 	stw	zero,-12(fp)

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 200d68c:	e0bfff03 	ldbu	r2,-4(fp)
 200d690:	100d883a 	mov	r6,r2
 200d694:	e17ffd17 	ldw	r5,-12(fp)
 200d698:	e13ffc17 	ldw	r4,-16(fp)
 200d69c:	200d4e00 	call	200d4e0 <xQueueGenericCreate>
 200d6a0:	e0bffe15 	stw	r2,-8(fp)
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 200d6a4:	e13ffe17 	ldw	r4,-8(fp)
 200d6a8:	200d6080 	call	200d608 <prvInitialiseMutex>

		return xNewQueue;
 200d6ac:	e0bffe17 	ldw	r2,-8(fp)
	}
 200d6b0:	e037883a 	mov	sp,fp
 200d6b4:	dfc00117 	ldw	ra,4(sp)
 200d6b8:	df000017 	ldw	fp,0(sp)
 200d6bc:	dec00204 	addi	sp,sp,8
 200d6c0:	f800283a 	ret

0200d6c4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 200d6c4:	defffa04 	addi	sp,sp,-24
 200d6c8:	dfc00515 	stw	ra,20(sp)
 200d6cc:	df000415 	stw	fp,16(sp)
 200d6d0:	dc000315 	stw	r16,12(sp)
 200d6d4:	df000404 	addi	fp,sp,16
 200d6d8:	e13ffe15 	stw	r4,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 200d6dc:	e0bffe17 	ldw	r2,-8(fp)
 200d6e0:	e0bffd15 	stw	r2,-12(fp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 200d6e4:	e0bffd17 	ldw	r2,-12(fp)
 200d6e8:	14000217 	ldw	r16,8(r2)
 200d6ec:	20109f80 	call	20109f8 <xTaskGetCurrentTaskHandle>
 200d6f0:	8080101e 	bne	r16,r2,200d734 <xQueueGiveMutexRecursive+0x70>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 200d6f4:	e0bffd17 	ldw	r2,-12(fp)
 200d6f8:	10800317 	ldw	r2,12(r2)
 200d6fc:	10ffffc4 	addi	r3,r2,-1
 200d700:	e0bffd17 	ldw	r2,-12(fp)
 200d704:	10c00315 	stw	r3,12(r2)

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 200d708:	e0bffd17 	ldw	r2,-12(fp)
 200d70c:	10800317 	ldw	r2,12(r2)
 200d710:	1000051e 	bne	r2,zero,200d728 <xQueueGiveMutexRecursive+0x64>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 200d714:	000f883a 	mov	r7,zero
 200d718:	000d883a 	mov	r6,zero
 200d71c:	000b883a 	mov	r5,zero
 200d720:	e13ffd17 	ldw	r4,-12(fp)
 200d724:	200d8480 	call	200d848 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 200d728:	00800044 	movi	r2,1
 200d72c:	e0bffc15 	stw	r2,-16(fp)
 200d730:	00000106 	br	200d738 <xQueueGiveMutexRecursive+0x74>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 200d734:	e03ffc15 	stw	zero,-16(fp)

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 200d738:	e0bffc17 	ldw	r2,-16(fp)
	}
 200d73c:	e6ffff04 	addi	sp,fp,-4
 200d740:	dfc00217 	ldw	ra,8(sp)
 200d744:	df000117 	ldw	fp,4(sp)
 200d748:	dc000017 	ldw	r16,0(sp)
 200d74c:	dec00304 	addi	sp,sp,12
 200d750:	f800283a 	ret

0200d754 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 200d754:	defff904 	addi	sp,sp,-28
 200d758:	dfc00615 	stw	ra,24(sp)
 200d75c:	df000515 	stw	fp,20(sp)
 200d760:	dc000415 	stw	r16,16(sp)
 200d764:	df000504 	addi	fp,sp,20
 200d768:	e13ffd15 	stw	r4,-12(fp)
 200d76c:	e17ffe15 	stw	r5,-8(fp)
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 200d770:	e0bffd17 	ldw	r2,-12(fp)
 200d774:	e0bffc15 	stw	r2,-16(fp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 200d778:	e0bffc17 	ldw	r2,-16(fp)
 200d77c:	14000217 	ldw	r16,8(r2)
 200d780:	20109f80 	call	20109f8 <xTaskGetCurrentTaskHandle>
 200d784:	8080081e 	bne	r16,r2,200d7a8 <xQueueTakeMutexRecursive+0x54>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 200d788:	e0bffc17 	ldw	r2,-16(fp)
 200d78c:	10800317 	ldw	r2,12(r2)
 200d790:	10c00044 	addi	r3,r2,1
 200d794:	e0bffc17 	ldw	r2,-16(fp)
 200d798:	10c00315 	stw	r3,12(r2)
			xReturn = pdPASS;
 200d79c:	00800044 	movi	r2,1
 200d7a0:	e0bffb15 	stw	r2,-20(fp)
 200d7a4:	00000b06 	br	200d7d4 <xQueueTakeMutexRecursive+0x80>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 200d7a8:	e17ffe17 	ldw	r5,-8(fp)
 200d7ac:	e13ffc17 	ldw	r4,-16(fp)
 200d7b0:	200ddd40 	call	200ddd4 <xQueueSemaphoreTake>
 200d7b4:	e0bffb15 	stw	r2,-20(fp)

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 200d7b8:	e0bffb17 	ldw	r2,-20(fp)
 200d7bc:	10000526 	beq	r2,zero,200d7d4 <xQueueTakeMutexRecursive+0x80>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 200d7c0:	e0bffc17 	ldw	r2,-16(fp)
 200d7c4:	10800317 	ldw	r2,12(r2)
 200d7c8:	10c00044 	addi	r3,r2,1
 200d7cc:	e0bffc17 	ldw	r2,-16(fp)
 200d7d0:	10c00315 	stw	r3,12(r2)
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 200d7d4:	e0bffb17 	ldw	r2,-20(fp)
	}
 200d7d8:	e6ffff04 	addi	sp,fp,-4
 200d7dc:	dfc00217 	ldw	ra,8(sp)
 200d7e0:	df000117 	ldw	fp,4(sp)
 200d7e4:	dc000017 	ldw	r16,0(sp)
 200d7e8:	dec00304 	addi	sp,sp,12
 200d7ec:	f800283a 	ret

0200d7f0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 200d7f0:	defffb04 	addi	sp,sp,-20
 200d7f4:	dfc00415 	stw	ra,16(sp)
 200d7f8:	df000315 	stw	fp,12(sp)
 200d7fc:	df000304 	addi	fp,sp,12
 200d800:	e13ffe15 	stw	r4,-8(fp)
 200d804:	e17fff15 	stw	r5,-4(fp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 200d808:	01800084 	movi	r6,2
 200d80c:	000b883a 	mov	r5,zero
 200d810:	e13ffe17 	ldw	r4,-8(fp)
 200d814:	200d4e00 	call	200d4e0 <xQueueGenericCreate>
 200d818:	e0bffd15 	stw	r2,-12(fp)

		if( xHandle != NULL )
 200d81c:	e0bffd17 	ldw	r2,-12(fp)
 200d820:	10000326 	beq	r2,zero,200d830 <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 200d824:	e0bffd17 	ldw	r2,-12(fp)
 200d828:	e0ffff17 	ldw	r3,-4(fp)
 200d82c:	10c00e15 	stw	r3,56(r2)
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 200d830:	e0bffd17 	ldw	r2,-12(fp)
	}
 200d834:	e037883a 	mov	sp,fp
 200d838:	dfc00117 	ldw	ra,4(sp)
 200d83c:	df000017 	ldw	fp,0(sp)
 200d840:	dec00204 	addi	sp,sp,8
 200d844:	f800283a 	ret

0200d848 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 200d848:	defff504 	addi	sp,sp,-44
 200d84c:	dfc00a15 	stw	ra,40(sp)
 200d850:	df000915 	stw	fp,36(sp)
 200d854:	df000904 	addi	fp,sp,36
 200d858:	e13ffc15 	stw	r4,-16(fp)
 200d85c:	e17ffd15 	stw	r5,-12(fp)
 200d860:	e1bffe15 	stw	r6,-8(fp)
 200d864:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 200d868:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 200d86c:	e0bffc17 	ldw	r2,-16(fp)
 200d870:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 200d874:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200d878:	10000126 	beq	r2,zero,200d880 <xQueueGenericSend+0x38>
 200d87c:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 200d880:	e0bff817 	ldw	r2,-32(fp)
 200d884:	10c00e17 	ldw	r3,56(r2)
 200d888:	e0bff817 	ldw	r2,-32(fp)
 200d88c:	10800f17 	ldw	r2,60(r2)
 200d890:	18800336 	bltu	r3,r2,200d8a0 <xQueueGenericSend+0x58>
 200d894:	e0bfff17 	ldw	r2,-4(fp)
 200d898:	10800098 	cmpnei	r2,r2,2
 200d89c:	1000171e 	bne	r2,zero,200d8fc <xQueueGenericSend+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 200d8a0:	e1bfff17 	ldw	r6,-4(fp)
 200d8a4:	e17ffd17 	ldw	r5,-12(fp)
 200d8a8:	e13ff817 	ldw	r4,-32(fp)
 200d8ac:	200e5700 	call	200e570 <prvCopyDataToQueue>
 200d8b0:	e0bff915 	stw	r2,-28(fp)

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 200d8b4:	e0bff817 	ldw	r2,-32(fp)
 200d8b8:	10800917 	ldw	r2,36(r2)
 200d8bc:	10000726 	beq	r2,zero,200d8dc <xQueueGenericSend+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 200d8c0:	e0bff817 	ldw	r2,-32(fp)
 200d8c4:	10800904 	addi	r2,r2,36
 200d8c8:	1009883a 	mov	r4,r2
 200d8cc:	20100c40 	call	20100c4 <xTaskRemoveFromEventList>
 200d8d0:	10000526 	beq	r2,zero,200d8e8 <xQueueGenericSend+0xa0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 200d8d4:	003b683a 	trap	0
 200d8d8:	00000306 	br	200d8e8 <xQueueGenericSend+0xa0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 200d8dc:	e0bff917 	ldw	r2,-28(fp)
 200d8e0:	10000126 	beq	r2,zero,200d8e8 <xQueueGenericSend+0xa0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 200d8e4:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 200d8e8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200d8ec:	10000126 	beq	r2,zero,200d8f4 <xQueueGenericSend+0xac>
 200d8f0:	2010e300 	call	2010e30 <vTaskExitCritical>
				return pdPASS;
 200d8f4:	00800044 	movi	r2,1
 200d8f8:	00004706 	br	200da18 <xQueueGenericSend+0x1d0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 200d8fc:	e0bffe17 	ldw	r2,-8(fp)
 200d900:	1000051e 	bne	r2,zero,200d918 <xQueueGenericSend+0xd0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 200d904:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200d908:	10000126 	beq	r2,zero,200d910 <xQueueGenericSend+0xc8>
 200d90c:	2010e300 	call	2010e30 <vTaskExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 200d910:	0005883a 	mov	r2,zero
 200d914:	00004006 	br	200da18 <xQueueGenericSend+0x1d0>
				}
				else if( xEntryTimeSet == pdFALSE )
 200d918:	e0bff717 	ldw	r2,-36(fp)
 200d91c:	1000051e 	bne	r2,zero,200d934 <xQueueGenericSend+0xec>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 200d920:	e0bffa04 	addi	r2,fp,-24
 200d924:	1009883a 	mov	r4,r2
 200d928:	20102dc0 	call	20102dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 200d92c:	00800044 	movi	r2,1
 200d930:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 200d934:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200d938:	10000126 	beq	r2,zero,200d940 <xQueueGenericSend+0xf8>
 200d93c:	2010e300 	call	2010e30 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 200d940:	200f8840 	call	200f884 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 200d944:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200d948:	10000126 	beq	r2,zero,200d950 <xQueueGenericSend+0x108>
 200d94c:	2010de80 	call	2010de8 <vTaskEnterCritical>
 200d950:	e0bff817 	ldw	r2,-32(fp)
 200d954:	10801103 	ldbu	r2,68(r2)
 200d958:	10803fcc 	andi	r2,r2,255
 200d95c:	1080201c 	xori	r2,r2,128
 200d960:	10bfe004 	addi	r2,r2,-128
 200d964:	10bfffd8 	cmpnei	r2,r2,-1
 200d968:	1000021e 	bne	r2,zero,200d974 <xQueueGenericSend+0x12c>
 200d96c:	e0bff817 	ldw	r2,-32(fp)
 200d970:	10001105 	stb	zero,68(r2)
 200d974:	e0bff817 	ldw	r2,-32(fp)
 200d978:	10801143 	ldbu	r2,69(r2)
 200d97c:	10803fcc 	andi	r2,r2,255
 200d980:	1080201c 	xori	r2,r2,128
 200d984:	10bfe004 	addi	r2,r2,-128
 200d988:	10bfffd8 	cmpnei	r2,r2,-1
 200d98c:	1000021e 	bne	r2,zero,200d998 <xQueueGenericSend+0x150>
 200d990:	e0bff817 	ldw	r2,-32(fp)
 200d994:	10001145 	stb	zero,69(r2)
 200d998:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200d99c:	10000126 	beq	r2,zero,200d9a4 <xQueueGenericSend+0x15c>
 200d9a0:	2010e300 	call	2010e30 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 200d9a4:	e0fffe04 	addi	r3,fp,-8
 200d9a8:	e0bffa04 	addi	r2,fp,-24
 200d9ac:	180b883a 	mov	r5,r3
 200d9b0:	1009883a 	mov	r4,r2
 200d9b4:	20103180 	call	2010318 <xTaskCheckForTimeOut>
 200d9b8:	1000131e 	bne	r2,zero,200da08 <xQueueGenericSend+0x1c0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 200d9bc:	e13ff817 	ldw	r4,-32(fp)
 200d9c0:	200e9540 	call	200e954 <prvIsQueueFull>
 200d9c4:	10000c26 	beq	r2,zero,200d9f8 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 200d9c8:	e0bff817 	ldw	r2,-32(fp)
 200d9cc:	10800404 	addi	r2,r2,16
 200d9d0:	e0fffe17 	ldw	r3,-8(fp)
 200d9d4:	180b883a 	mov	r5,r3
 200d9d8:	1009883a 	mov	r4,r2
 200d9dc:	200ffac0 	call	200ffac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 200d9e0:	e13ff817 	ldw	r4,-32(fp)
 200d9e4:	200e7980 	call	200e798 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 200d9e8:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 200d9ec:	103fa11e 	bne	r2,zero,200d874 <__alt_mem_mem_0+0xfcfed874>
				{
					portYIELD_WITHIN_API();
 200d9f0:	003b683a 	trap	0
 200d9f4:	003f9f06 	br	200d874 <__alt_mem_mem_0+0xfcfed874>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 200d9f8:	e13ff817 	ldw	r4,-32(fp)
 200d9fc:	200e7980 	call	200e798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 200da00:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 200da04:	003f9b06 	br	200d874 <__alt_mem_mem_0+0xfcfed874>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 200da08:	e13ff817 	ldw	r4,-32(fp)
 200da0c:	200e7980 	call	200e798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 200da10:	200f8b00 	call	200f8b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 200da14:	0005883a 	mov	r2,zero
		}
	} /*lint -restore */
}
 200da18:	e037883a 	mov	sp,fp
 200da1c:	dfc00117 	ldw	ra,4(sp)
 200da20:	df000017 	ldw	fp,0(sp)
 200da24:	dec00204 	addi	sp,sp,8
 200da28:	f800283a 	ret

0200da2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 200da2c:	defff504 	addi	sp,sp,-44
 200da30:	dfc00a15 	stw	ra,40(sp)
 200da34:	df000915 	stw	fp,36(sp)
 200da38:	df000904 	addi	fp,sp,36
 200da3c:	e13ffc15 	stw	r4,-16(fp)
 200da40:	e17ffd15 	stw	r5,-12(fp)
 200da44:	e1bffe15 	stw	r6,-8(fp)
 200da48:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 200da4c:	e0bffc17 	ldw	r2,-16(fp)
 200da50:	e0bff815 	stw	r2,-32(fp)
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 200da54:	e03ff915 	stw	zero,-28(fp)
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 200da58:	e0bff817 	ldw	r2,-32(fp)
 200da5c:	10c00e17 	ldw	r3,56(r2)
 200da60:	e0bff817 	ldw	r2,-32(fp)
 200da64:	10800f17 	ldw	r2,60(r2)
 200da68:	18800336 	bltu	r3,r2,200da78 <xQueueGenericSendFromISR+0x4c>
 200da6c:	e0bfff17 	ldw	r2,-4(fp)
 200da70:	10800098 	cmpnei	r2,r2,2
 200da74:	1000231e 	bne	r2,zero,200db04 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 200da78:	e0bff817 	ldw	r2,-32(fp)
 200da7c:	10801143 	ldbu	r2,69(r2)
 200da80:	e0bffa05 	stb	r2,-24(fp)
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 200da84:	e0bff817 	ldw	r2,-32(fp)
 200da88:	10800e17 	ldw	r2,56(r2)
 200da8c:	e0bffb15 	stw	r2,-20(fp)
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 200da90:	e1bfff17 	ldw	r6,-4(fp)
 200da94:	e17ffd17 	ldw	r5,-12(fp)
 200da98:	e13ff817 	ldw	r4,-32(fp)
 200da9c:	200e5700 	call	200e570 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 200daa0:	e0bffa07 	ldb	r2,-24(fp)
 200daa4:	10bfffd8 	cmpnei	r2,r2,-1
 200daa8:	10000e1e 	bne	r2,zero,200dae4 <xQueueGenericSendFromISR+0xb8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 200daac:	e0bff817 	ldw	r2,-32(fp)
 200dab0:	10800917 	ldw	r2,36(r2)
 200dab4:	10001026 	beq	r2,zero,200daf8 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 200dab8:	e0bff817 	ldw	r2,-32(fp)
 200dabc:	10800904 	addi	r2,r2,36
 200dac0:	1009883a 	mov	r4,r2
 200dac4:	20100c40 	call	20100c4 <xTaskRemoveFromEventList>
 200dac8:	10000b26 	beq	r2,zero,200daf8 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 200dacc:	e0bffe17 	ldw	r2,-8(fp)
 200dad0:	10000926 	beq	r2,zero,200daf8 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 200dad4:	e0bffe17 	ldw	r2,-8(fp)
 200dad8:	00c00044 	movi	r3,1
 200dadc:	10c00015 	stw	r3,0(r2)
 200dae0:	00000506 	br	200daf8 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 200dae4:	e0bffa03 	ldbu	r2,-24(fp)
 200dae8:	10800044 	addi	r2,r2,1
 200daec:	1007883a 	mov	r3,r2
 200daf0:	e0bff817 	ldw	r2,-32(fp)
 200daf4:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 200daf8:	00800044 	movi	r2,1
 200dafc:	e0bff715 	stw	r2,-36(fp)
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 200db00:	00000106 	br	200db08 <xQueueGenericSendFromISR+0xdc>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 200db04:	e03ff715 	stw	zero,-36(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 200db08:	e0bff717 	ldw	r2,-36(fp)
}
 200db0c:	e037883a 	mov	sp,fp
 200db10:	dfc00117 	ldw	ra,4(sp)
 200db14:	df000017 	ldw	fp,0(sp)
 200db18:	dec00204 	addi	sp,sp,8
 200db1c:	f800283a 	ret

0200db20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 200db20:	defff704 	addi	sp,sp,-36
 200db24:	dfc00815 	stw	ra,32(sp)
 200db28:	df000715 	stw	fp,28(sp)
 200db2c:	df000704 	addi	fp,sp,28
 200db30:	e13ffe15 	stw	r4,-8(fp)
 200db34:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 200db38:	e0bffe17 	ldw	r2,-8(fp)
 200db3c:	e0bffa15 	stw	r2,-24(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 200db40:	e03ffb15 	stw	zero,-20(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 200db44:	e0bffa17 	ldw	r2,-24(fp)
 200db48:	10800e17 	ldw	r2,56(r2)
 200db4c:	e0bffc15 	stw	r2,-16(fp)

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 200db50:	e0bffa17 	ldw	r2,-24(fp)
 200db54:	10800f17 	ldw	r2,60(r2)
 200db58:	e0fffc17 	ldw	r3,-16(fp)
 200db5c:	1880202e 	bgeu	r3,r2,200dbe0 <xQueueGiveFromISR+0xc0>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 200db60:	e0bffa17 	ldw	r2,-24(fp)
 200db64:	10801143 	ldbu	r2,69(r2)
 200db68:	e0bffd05 	stb	r2,-12(fp)
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 200db6c:	e0bffc17 	ldw	r2,-16(fp)
 200db70:	10c00044 	addi	r3,r2,1
 200db74:	e0bffa17 	ldw	r2,-24(fp)
 200db78:	10c00e15 	stw	r3,56(r2)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 200db7c:	e0bffd07 	ldb	r2,-12(fp)
 200db80:	10bfffd8 	cmpnei	r2,r2,-1
 200db84:	10000e1e 	bne	r2,zero,200dbc0 <xQueueGiveFromISR+0xa0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 200db88:	e0bffa17 	ldw	r2,-24(fp)
 200db8c:	10800917 	ldw	r2,36(r2)
 200db90:	10001026 	beq	r2,zero,200dbd4 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 200db94:	e0bffa17 	ldw	r2,-24(fp)
 200db98:	10800904 	addi	r2,r2,36
 200db9c:	1009883a 	mov	r4,r2
 200dba0:	20100c40 	call	20100c4 <xTaskRemoveFromEventList>
 200dba4:	10000b26 	beq	r2,zero,200dbd4 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 200dba8:	e0bfff17 	ldw	r2,-4(fp)
 200dbac:	10000926 	beq	r2,zero,200dbd4 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 200dbb0:	e0bfff17 	ldw	r2,-4(fp)
 200dbb4:	00c00044 	movi	r3,1
 200dbb8:	10c00015 	stw	r3,0(r2)
 200dbbc:	00000506 	br	200dbd4 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 200dbc0:	e0bffd03 	ldbu	r2,-12(fp)
 200dbc4:	10800044 	addi	r2,r2,1
 200dbc8:	1007883a 	mov	r3,r2
 200dbcc:	e0bffa17 	ldw	r2,-24(fp)
 200dbd0:	10c01145 	stb	r3,69(r2)
			}

			xReturn = pdPASS;
 200dbd4:	00800044 	movi	r2,1
 200dbd8:	e0bff915 	stw	r2,-28(fp)
 200dbdc:	00000106 	br	200dbe4 <xQueueGiveFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 200dbe0:	e03ff915 	stw	zero,-28(fp)
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 200dbe4:	e0bff917 	ldw	r2,-28(fp)
}
 200dbe8:	e037883a 	mov	sp,fp
 200dbec:	dfc00117 	ldw	ra,4(sp)
 200dbf0:	df000017 	ldw	fp,0(sp)
 200dbf4:	dec00204 	addi	sp,sp,8
 200dbf8:	f800283a 	ret

0200dbfc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 200dbfc:	defff604 	addi	sp,sp,-40
 200dc00:	dfc00915 	stw	ra,36(sp)
 200dc04:	df000815 	stw	fp,32(sp)
 200dc08:	df000804 	addi	fp,sp,32
 200dc0c:	e13ffd15 	stw	r4,-12(fp)
 200dc10:	e17ffe15 	stw	r5,-8(fp)
 200dc14:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 200dc18:	e03ff815 	stw	zero,-32(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 200dc1c:	e0bffd17 	ldw	r2,-12(fp)
 200dc20:	e0bff915 	stw	r2,-28(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 200dc24:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200dc28:	10000126 	beq	r2,zero,200dc30 <xQueueReceive+0x34>
 200dc2c:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 200dc30:	e0bff917 	ldw	r2,-28(fp)
 200dc34:	10800e17 	ldw	r2,56(r2)
 200dc38:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 200dc3c:	e0bffa17 	ldw	r2,-24(fp)
 200dc40:	10001526 	beq	r2,zero,200dc98 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 200dc44:	e17ffe17 	ldw	r5,-8(fp)
 200dc48:	e13ff917 	ldw	r4,-28(fp)
 200dc4c:	200e6fc0 	call	200e6fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 200dc50:	e0bffa17 	ldw	r2,-24(fp)
 200dc54:	10ffffc4 	addi	r3,r2,-1
 200dc58:	e0bff917 	ldw	r2,-28(fp)
 200dc5c:	10c00e15 	stw	r3,56(r2)

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 200dc60:	e0bff917 	ldw	r2,-28(fp)
 200dc64:	10800417 	ldw	r2,16(r2)
 200dc68:	10000626 	beq	r2,zero,200dc84 <xQueueReceive+0x88>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 200dc6c:	e0bff917 	ldw	r2,-28(fp)
 200dc70:	10800404 	addi	r2,r2,16
 200dc74:	1009883a 	mov	r4,r2
 200dc78:	20100c40 	call	20100c4 <xTaskRemoveFromEventList>
 200dc7c:	10000126 	beq	r2,zero,200dc84 <xQueueReceive+0x88>
					{
						queueYIELD_IF_USING_PREEMPTION();
 200dc80:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 200dc84:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200dc88:	10000126 	beq	r2,zero,200dc90 <xQueueReceive+0x94>
 200dc8c:	2010e300 	call	2010e30 <vTaskExitCritical>
				return pdPASS;
 200dc90:	00800044 	movi	r2,1
 200dc94:	00004a06 	br	200ddc0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 200dc98:	e0bfff17 	ldw	r2,-4(fp)
 200dc9c:	1000051e 	bne	r2,zero,200dcb4 <xQueueReceive+0xb8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 200dca0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200dca4:	10000126 	beq	r2,zero,200dcac <xQueueReceive+0xb0>
 200dca8:	2010e300 	call	2010e30 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 200dcac:	0005883a 	mov	r2,zero
 200dcb0:	00004306 	br	200ddc0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 200dcb4:	e0bff817 	ldw	r2,-32(fp)
 200dcb8:	1000051e 	bne	r2,zero,200dcd0 <xQueueReceive+0xd4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 200dcbc:	e0bffb04 	addi	r2,fp,-20
 200dcc0:	1009883a 	mov	r4,r2
 200dcc4:	20102dc0 	call	20102dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 200dcc8:	00800044 	movi	r2,1
 200dccc:	e0bff815 	stw	r2,-32(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 200dcd0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200dcd4:	10000126 	beq	r2,zero,200dcdc <xQueueReceive+0xe0>
 200dcd8:	2010e300 	call	2010e30 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 200dcdc:	200f8840 	call	200f884 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 200dce0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200dce4:	10000126 	beq	r2,zero,200dcec <xQueueReceive+0xf0>
 200dce8:	2010de80 	call	2010de8 <vTaskEnterCritical>
 200dcec:	e0bff917 	ldw	r2,-28(fp)
 200dcf0:	10801103 	ldbu	r2,68(r2)
 200dcf4:	10803fcc 	andi	r2,r2,255
 200dcf8:	1080201c 	xori	r2,r2,128
 200dcfc:	10bfe004 	addi	r2,r2,-128
 200dd00:	10bfffd8 	cmpnei	r2,r2,-1
 200dd04:	1000021e 	bne	r2,zero,200dd10 <xQueueReceive+0x114>
 200dd08:	e0bff917 	ldw	r2,-28(fp)
 200dd0c:	10001105 	stb	zero,68(r2)
 200dd10:	e0bff917 	ldw	r2,-28(fp)
 200dd14:	10801143 	ldbu	r2,69(r2)
 200dd18:	10803fcc 	andi	r2,r2,255
 200dd1c:	1080201c 	xori	r2,r2,128
 200dd20:	10bfe004 	addi	r2,r2,-128
 200dd24:	10bfffd8 	cmpnei	r2,r2,-1
 200dd28:	1000021e 	bne	r2,zero,200dd34 <xQueueReceive+0x138>
 200dd2c:	e0bff917 	ldw	r2,-28(fp)
 200dd30:	10001145 	stb	zero,69(r2)
 200dd34:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200dd38:	10000126 	beq	r2,zero,200dd40 <xQueueReceive+0x144>
 200dd3c:	2010e300 	call	2010e30 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 200dd40:	e0ffff04 	addi	r3,fp,-4
 200dd44:	e0bffb04 	addi	r2,fp,-20
 200dd48:	180b883a 	mov	r5,r3
 200dd4c:	1009883a 	mov	r4,r2
 200dd50:	20103180 	call	2010318 <xTaskCheckForTimeOut>
 200dd54:	1000131e 	bne	r2,zero,200dda4 <xQueueReceive+0x1a8>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 200dd58:	e13ff917 	ldw	r4,-28(fp)
 200dd5c:	200e8ac0 	call	200e8ac <prvIsQueueEmpty>
 200dd60:	10000c26 	beq	r2,zero,200dd94 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 200dd64:	e0bff917 	ldw	r2,-28(fp)
 200dd68:	10800904 	addi	r2,r2,36
 200dd6c:	e0ffff17 	ldw	r3,-4(fp)
 200dd70:	180b883a 	mov	r5,r3
 200dd74:	1009883a 	mov	r4,r2
 200dd78:	200ffac0 	call	200ffac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 200dd7c:	e13ff917 	ldw	r4,-28(fp)
 200dd80:	200e7980 	call	200e798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 200dd84:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 200dd88:	103fa61e 	bne	r2,zero,200dc24 <__alt_mem_mem_0+0xfcfedc24>
				{
					portYIELD_WITHIN_API();
 200dd8c:	003b683a 	trap	0
 200dd90:	003fa406 	br	200dc24 <__alt_mem_mem_0+0xfcfedc24>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 200dd94:	e13ff917 	ldw	r4,-28(fp)
 200dd98:	200e7980 	call	200e798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 200dd9c:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 200dda0:	003fa006 	br	200dc24 <__alt_mem_mem_0+0xfcfedc24>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 200dda4:	e13ff917 	ldw	r4,-28(fp)
 200dda8:	200e7980 	call	200e798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 200ddac:	200f8b00 	call	200f8b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 200ddb0:	e13ff917 	ldw	r4,-28(fp)
 200ddb4:	200e8ac0 	call	200e8ac <prvIsQueueEmpty>
 200ddb8:	103f9a26 	beq	r2,zero,200dc24 <__alt_mem_mem_0+0xfcfedc24>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 200ddbc:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 200ddc0:	e037883a 	mov	sp,fp
 200ddc4:	dfc00117 	ldw	ra,4(sp)
 200ddc8:	df000017 	ldw	fp,0(sp)
 200ddcc:	dec00204 	addi	sp,sp,8
 200ddd0:	f800283a 	ret

0200ddd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 200ddd4:	defff504 	addi	sp,sp,-44
 200ddd8:	dfc00a15 	stw	ra,40(sp)
 200dddc:	df000915 	stw	fp,36(sp)
 200dde0:	df000904 	addi	fp,sp,36
 200dde4:	e13ffe15 	stw	r4,-8(fp)
 200dde8:	e17fff15 	stw	r5,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 200ddec:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 200ddf0:	e0bffe17 	ldw	r2,-8(fp)
 200ddf4:	e0bff915 	stw	r2,-28(fp)

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 200ddf8:	e03ff815 	stw	zero,-32(fp)
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 200ddfc:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200de00:	10000126 	beq	r2,zero,200de08 <xQueueSemaphoreTake+0x34>
 200de04:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 200de08:	e0bff917 	ldw	r2,-28(fp)
 200de0c:	10800e17 	ldw	r2,56(r2)
 200de10:	e0bffa15 	stw	r2,-24(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 200de14:	e0bffa17 	ldw	r2,-24(fp)
 200de18:	10001926 	beq	r2,zero,200de80 <xQueueSemaphoreTake+0xac>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 200de1c:	e0bffa17 	ldw	r2,-24(fp)
 200de20:	10ffffc4 	addi	r3,r2,-1
 200de24:	e0bff917 	ldw	r2,-28(fp)
 200de28:	10c00e15 	stw	r3,56(r2)

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 200de2c:	e0bff917 	ldw	r2,-28(fp)
 200de30:	10800017 	ldw	r2,0(r2)
 200de34:	1000041e 	bne	r2,zero,200de48 <xQueueSemaphoreTake+0x74>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 200de38:	2010ed00 	call	2010ed0 <pvTaskIncrementMutexHeldCount>
 200de3c:	1007883a 	mov	r3,r2
 200de40:	e0bff917 	ldw	r2,-28(fp)
 200de44:	10c00215 	stw	r3,8(r2)
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 200de48:	e0bff917 	ldw	r2,-28(fp)
 200de4c:	10800417 	ldw	r2,16(r2)
 200de50:	10000626 	beq	r2,zero,200de6c <xQueueSemaphoreTake+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 200de54:	e0bff917 	ldw	r2,-28(fp)
 200de58:	10800404 	addi	r2,r2,16
 200de5c:	1009883a 	mov	r4,r2
 200de60:	20100c40 	call	20100c4 <xTaskRemoveFromEventList>
 200de64:	10000126 	beq	r2,zero,200de6c <xQueueSemaphoreTake+0x98>
					{
						queueYIELD_IF_USING_PREEMPTION();
 200de68:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 200de6c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200de70:	10000126 	beq	r2,zero,200de78 <xQueueSemaphoreTake+0xa4>
 200de74:	2010e300 	call	2010e30 <vTaskExitCritical>
				return pdPASS;
 200de78:	00800044 	movi	r2,1
 200de7c:	00006806 	br	200e020 <xQueueSemaphoreTake+0x24c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 200de80:	e0bfff17 	ldw	r2,-4(fp)
 200de84:	1000051e 	bne	r2,zero,200de9c <xQueueSemaphoreTake+0xc8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 200de88:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200de8c:	10000126 	beq	r2,zero,200de94 <xQueueSemaphoreTake+0xc0>
 200de90:	2010e300 	call	2010e30 <vTaskExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 200de94:	0005883a 	mov	r2,zero
 200de98:	00006106 	br	200e020 <xQueueSemaphoreTake+0x24c>
				}
				else if( xEntryTimeSet == pdFALSE )
 200de9c:	e0bff717 	ldw	r2,-36(fp)
 200dea0:	1000051e 	bne	r2,zero,200deb8 <xQueueSemaphoreTake+0xe4>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 200dea4:	e0bffc04 	addi	r2,fp,-16
 200dea8:	1009883a 	mov	r4,r2
 200deac:	20102dc0 	call	20102dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 200deb0:	00800044 	movi	r2,1
 200deb4:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 200deb8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200debc:	10000126 	beq	r2,zero,200dec4 <xQueueSemaphoreTake+0xf0>
 200dec0:	2010e300 	call	2010e30 <vTaskExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 200dec4:	200f8840 	call	200f884 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 200dec8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200decc:	10000126 	beq	r2,zero,200ded4 <xQueueSemaphoreTake+0x100>
 200ded0:	2010de80 	call	2010de8 <vTaskEnterCritical>
 200ded4:	e0bff917 	ldw	r2,-28(fp)
 200ded8:	10801103 	ldbu	r2,68(r2)
 200dedc:	10803fcc 	andi	r2,r2,255
 200dee0:	1080201c 	xori	r2,r2,128
 200dee4:	10bfe004 	addi	r2,r2,-128
 200dee8:	10bfffd8 	cmpnei	r2,r2,-1
 200deec:	1000021e 	bne	r2,zero,200def8 <xQueueSemaphoreTake+0x124>
 200def0:	e0bff917 	ldw	r2,-28(fp)
 200def4:	10001105 	stb	zero,68(r2)
 200def8:	e0bff917 	ldw	r2,-28(fp)
 200defc:	10801143 	ldbu	r2,69(r2)
 200df00:	10803fcc 	andi	r2,r2,255
 200df04:	1080201c 	xori	r2,r2,128
 200df08:	10bfe004 	addi	r2,r2,-128
 200df0c:	10bfffd8 	cmpnei	r2,r2,-1
 200df10:	1000021e 	bne	r2,zero,200df1c <xQueueSemaphoreTake+0x148>
 200df14:	e0bff917 	ldw	r2,-28(fp)
 200df18:	10001145 	stb	zero,69(r2)
 200df1c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200df20:	10000126 	beq	r2,zero,200df28 <xQueueSemaphoreTake+0x154>
 200df24:	2010e300 	call	2010e30 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 200df28:	e0ffff04 	addi	r3,fp,-4
 200df2c:	e0bffc04 	addi	r2,fp,-16
 200df30:	180b883a 	mov	r5,r3
 200df34:	1009883a 	mov	r4,r2
 200df38:	20103180 	call	2010318 <xTaskCheckForTimeOut>
 200df3c:	1000211e 	bne	r2,zero,200dfc4 <xQueueSemaphoreTake+0x1f0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 200df40:	e13ff917 	ldw	r4,-28(fp)
 200df44:	200e8ac0 	call	200e8ac <prvIsQueueEmpty>
 200df48:	10001a26 	beq	r2,zero,200dfb4 <xQueueSemaphoreTake+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 200df4c:	e0bff917 	ldw	r2,-28(fp)
 200df50:	10800017 	ldw	r2,0(r2)
 200df54:	10000b1e 	bne	r2,zero,200df84 <xQueueSemaphoreTake+0x1b0>
					{
						taskENTER_CRITICAL();
 200df58:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200df5c:	10000126 	beq	r2,zero,200df64 <xQueueSemaphoreTake+0x190>
 200df60:	2010de80 	call	2010de8 <vTaskEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 200df64:	e0bff917 	ldw	r2,-28(fp)
 200df68:	10800217 	ldw	r2,8(r2)
 200df6c:	1009883a 	mov	r4,r2
 200df70:	2010a6c0 	call	2010a6c <xTaskPriorityInherit>
 200df74:	e0bff815 	stw	r2,-32(fp)
						}
						taskEXIT_CRITICAL();
 200df78:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200df7c:	10000126 	beq	r2,zero,200df84 <xQueueSemaphoreTake+0x1b0>
 200df80:	2010e300 	call	2010e30 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 200df84:	e0bff917 	ldw	r2,-28(fp)
 200df88:	10800904 	addi	r2,r2,36
 200df8c:	e0ffff17 	ldw	r3,-4(fp)
 200df90:	180b883a 	mov	r5,r3
 200df94:	1009883a 	mov	r4,r2
 200df98:	200ffac0 	call	200ffac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 200df9c:	e13ff917 	ldw	r4,-28(fp)
 200dfa0:	200e7980 	call	200e798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 200dfa4:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 200dfa8:	103f941e 	bne	r2,zero,200ddfc <__alt_mem_mem_0+0xfcfeddfc>
				{
					portYIELD_WITHIN_API();
 200dfac:	003b683a 	trap	0
 200dfb0:	003f9206 	br	200ddfc <__alt_mem_mem_0+0xfcfeddfc>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 200dfb4:	e13ff917 	ldw	r4,-28(fp)
 200dfb8:	200e7980 	call	200e798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 200dfbc:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 200dfc0:	003f8e06 	br	200ddfc <__alt_mem_mem_0+0xfcfeddfc>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 200dfc4:	e13ff917 	ldw	r4,-28(fp)
 200dfc8:	200e7980 	call	200e798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 200dfcc:	200f8b00 	call	200f8b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 200dfd0:	e13ff917 	ldw	r4,-28(fp)
 200dfd4:	200e8ac0 	call	200e8ac <prvIsQueueEmpty>
 200dfd8:	103f8826 	beq	r2,zero,200ddfc <__alt_mem_mem_0+0xfcfeddfc>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 200dfdc:	e0bff817 	ldw	r2,-32(fp)
 200dfe0:	10000e26 	beq	r2,zero,200e01c <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 200dfe4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200dfe8:	10000126 	beq	r2,zero,200dff0 <xQueueSemaphoreTake+0x21c>
 200dfec:	2010de80 	call	2010de8 <vTaskEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 200dff0:	e13ff917 	ldw	r4,-28(fp)
 200dff4:	200e5200 	call	200e520 <prvGetDisinheritPriorityAfterTimeout>
 200dff8:	e0bffb15 	stw	r2,-20(fp)
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 200dffc:	e0bff917 	ldw	r2,-28(fp)
 200e000:	10800217 	ldw	r2,8(r2)
 200e004:	e17ffb17 	ldw	r5,-20(fp)
 200e008:	1009883a 	mov	r4,r2
 200e00c:	2010ca80 	call	2010ca8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 200e010:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e014:	10000126 	beq	r2,zero,200e01c <xQueueSemaphoreTake+0x248>
 200e018:	2010e300 	call	2010e30 <vTaskExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 200e01c:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 200e020:	e037883a 	mov	sp,fp
 200e024:	dfc00117 	ldw	ra,4(sp)
 200e028:	df000017 	ldw	fp,0(sp)
 200e02c:	dec00204 	addi	sp,sp,8
 200e030:	f800283a 	ret

0200e034 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 200e034:	defff504 	addi	sp,sp,-44
 200e038:	dfc00a15 	stw	ra,40(sp)
 200e03c:	df000915 	stw	fp,36(sp)
 200e040:	df000904 	addi	fp,sp,36
 200e044:	e13ffd15 	stw	r4,-12(fp)
 200e048:	e17ffe15 	stw	r5,-8(fp)
 200e04c:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xEntryTimeSet = pdFALSE;
 200e050:	e03ff715 	stw	zero,-36(fp)
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 200e054:	e0bffd17 	ldw	r2,-12(fp)
 200e058:	e0bff815 	stw	r2,-32(fp)
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 200e05c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e060:	10000126 	beq	r2,zero,200e068 <xQueuePeek+0x34>
 200e064:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 200e068:	e0bff817 	ldw	r2,-32(fp)
 200e06c:	10800e17 	ldw	r2,56(r2)
 200e070:	e0bff915 	stw	r2,-28(fp)

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 200e074:	e0bff917 	ldw	r2,-28(fp)
 200e078:	10001726 	beq	r2,zero,200e0d8 <xQueuePeek+0xa4>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 200e07c:	e0bff817 	ldw	r2,-32(fp)
 200e080:	10800317 	ldw	r2,12(r2)
 200e084:	e0bffa15 	stw	r2,-24(fp)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 200e088:	e17ffe17 	ldw	r5,-8(fp)
 200e08c:	e13ff817 	ldw	r4,-32(fp)
 200e090:	200e6fc0 	call	200e6fc <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 200e094:	e0bff817 	ldw	r2,-32(fp)
 200e098:	e0fffa17 	ldw	r3,-24(fp)
 200e09c:	10c00315 	stw	r3,12(r2)

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 200e0a0:	e0bff817 	ldw	r2,-32(fp)
 200e0a4:	10800917 	ldw	r2,36(r2)
 200e0a8:	10000626 	beq	r2,zero,200e0c4 <xQueuePeek+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 200e0ac:	e0bff817 	ldw	r2,-32(fp)
 200e0b0:	10800904 	addi	r2,r2,36
 200e0b4:	1009883a 	mov	r4,r2
 200e0b8:	20100c40 	call	20100c4 <xTaskRemoveFromEventList>
 200e0bc:	10000126 	beq	r2,zero,200e0c4 <xQueuePeek+0x90>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 200e0c0:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 200e0c4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e0c8:	10000126 	beq	r2,zero,200e0d0 <xQueuePeek+0x9c>
 200e0cc:	2010e300 	call	2010e30 <vTaskExitCritical>
				return pdPASS;
 200e0d0:	00800044 	movi	r2,1
 200e0d4:	00004a06 	br	200e200 <xQueuePeek+0x1cc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 200e0d8:	e0bfff17 	ldw	r2,-4(fp)
 200e0dc:	1000051e 	bne	r2,zero,200e0f4 <xQueuePeek+0xc0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 200e0e0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e0e4:	10000126 	beq	r2,zero,200e0ec <xQueuePeek+0xb8>
 200e0e8:	2010e300 	call	2010e30 <vTaskExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 200e0ec:	0005883a 	mov	r2,zero
 200e0f0:	00004306 	br	200e200 <xQueuePeek+0x1cc>
				}
				else if( xEntryTimeSet == pdFALSE )
 200e0f4:	e0bff717 	ldw	r2,-36(fp)
 200e0f8:	1000051e 	bne	r2,zero,200e110 <xQueuePeek+0xdc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 200e0fc:	e0bffb04 	addi	r2,fp,-20
 200e100:	1009883a 	mov	r4,r2
 200e104:	20102dc0 	call	20102dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 200e108:	00800044 	movi	r2,1
 200e10c:	e0bff715 	stw	r2,-36(fp)
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 200e110:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e114:	10000126 	beq	r2,zero,200e11c <xQueuePeek+0xe8>
 200e118:	2010e300 	call	2010e30 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 200e11c:	200f8840 	call	200f884 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 200e120:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e124:	10000126 	beq	r2,zero,200e12c <xQueuePeek+0xf8>
 200e128:	2010de80 	call	2010de8 <vTaskEnterCritical>
 200e12c:	e0bff817 	ldw	r2,-32(fp)
 200e130:	10801103 	ldbu	r2,68(r2)
 200e134:	10803fcc 	andi	r2,r2,255
 200e138:	1080201c 	xori	r2,r2,128
 200e13c:	10bfe004 	addi	r2,r2,-128
 200e140:	10bfffd8 	cmpnei	r2,r2,-1
 200e144:	1000021e 	bne	r2,zero,200e150 <xQueuePeek+0x11c>
 200e148:	e0bff817 	ldw	r2,-32(fp)
 200e14c:	10001105 	stb	zero,68(r2)
 200e150:	e0bff817 	ldw	r2,-32(fp)
 200e154:	10801143 	ldbu	r2,69(r2)
 200e158:	10803fcc 	andi	r2,r2,255
 200e15c:	1080201c 	xori	r2,r2,128
 200e160:	10bfe004 	addi	r2,r2,-128
 200e164:	10bfffd8 	cmpnei	r2,r2,-1
 200e168:	1000021e 	bne	r2,zero,200e174 <xQueuePeek+0x140>
 200e16c:	e0bff817 	ldw	r2,-32(fp)
 200e170:	10001145 	stb	zero,69(r2)
 200e174:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e178:	10000126 	beq	r2,zero,200e180 <xQueuePeek+0x14c>
 200e17c:	2010e300 	call	2010e30 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 200e180:	e0ffff04 	addi	r3,fp,-4
 200e184:	e0bffb04 	addi	r2,fp,-20
 200e188:	180b883a 	mov	r5,r3
 200e18c:	1009883a 	mov	r4,r2
 200e190:	20103180 	call	2010318 <xTaskCheckForTimeOut>
 200e194:	1000131e 	bne	r2,zero,200e1e4 <xQueuePeek+0x1b0>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 200e198:	e13ff817 	ldw	r4,-32(fp)
 200e19c:	200e8ac0 	call	200e8ac <prvIsQueueEmpty>
 200e1a0:	10000c26 	beq	r2,zero,200e1d4 <xQueuePeek+0x1a0>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 200e1a4:	e0bff817 	ldw	r2,-32(fp)
 200e1a8:	10800904 	addi	r2,r2,36
 200e1ac:	e0ffff17 	ldw	r3,-4(fp)
 200e1b0:	180b883a 	mov	r5,r3
 200e1b4:	1009883a 	mov	r4,r2
 200e1b8:	200ffac0 	call	200ffac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 200e1bc:	e13ff817 	ldw	r4,-32(fp)
 200e1c0:	200e7980 	call	200e798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 200e1c4:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 200e1c8:	103fa41e 	bne	r2,zero,200e05c <__alt_mem_mem_0+0xfcfee05c>
				{
					portYIELD_WITHIN_API();
 200e1cc:	003b683a 	trap	0
 200e1d0:	003fa206 	br	200e05c <__alt_mem_mem_0+0xfcfee05c>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 200e1d4:	e13ff817 	ldw	r4,-32(fp)
 200e1d8:	200e7980 	call	200e798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 200e1dc:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 200e1e0:	003f9e06 	br	200e05c <__alt_mem_mem_0+0xfcfee05c>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 200e1e4:	e13ff817 	ldw	r4,-32(fp)
 200e1e8:	200e7980 	call	200e798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 200e1ec:	200f8b00 	call	200f8b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 200e1f0:	e13ff817 	ldw	r4,-32(fp)
 200e1f4:	200e8ac0 	call	200e8ac <prvIsQueueEmpty>
 200e1f8:	103f9826 	beq	r2,zero,200e05c <__alt_mem_mem_0+0xfcfee05c>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 200e1fc:	0005883a 	mov	r2,zero
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 200e200:	e037883a 	mov	sp,fp
 200e204:	dfc00117 	ldw	ra,4(sp)
 200e208:	df000017 	ldw	fp,0(sp)
 200e20c:	dec00204 	addi	sp,sp,8
 200e210:	f800283a 	ret

0200e214 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 200e214:	defff604 	addi	sp,sp,-40
 200e218:	dfc00915 	stw	ra,36(sp)
 200e21c:	df000815 	stw	fp,32(sp)
 200e220:	df000804 	addi	fp,sp,32
 200e224:	e13ffd15 	stw	r4,-12(fp)
 200e228:	e17ffe15 	stw	r5,-8(fp)
 200e22c:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 200e230:	e0bffd17 	ldw	r2,-12(fp)
 200e234:	e0bff915 	stw	r2,-28(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 200e238:	e03ffa15 	stw	zero,-24(fp)
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 200e23c:	e0bff917 	ldw	r2,-28(fp)
 200e240:	10800e17 	ldw	r2,56(r2)
 200e244:	e0bffb15 	stw	r2,-20(fp)

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 200e248:	e0bffb17 	ldw	r2,-20(fp)
 200e24c:	10002326 	beq	r2,zero,200e2dc <xQueueReceiveFromISR+0xc8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 200e250:	e0bff917 	ldw	r2,-28(fp)
 200e254:	10801103 	ldbu	r2,68(r2)
 200e258:	e0bffc05 	stb	r2,-16(fp)

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 200e25c:	e17ffe17 	ldw	r5,-8(fp)
 200e260:	e13ff917 	ldw	r4,-28(fp)
 200e264:	200e6fc0 	call	200e6fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 200e268:	e0bffb17 	ldw	r2,-20(fp)
 200e26c:	10ffffc4 	addi	r3,r2,-1
 200e270:	e0bff917 	ldw	r2,-28(fp)
 200e274:	10c00e15 	stw	r3,56(r2)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 200e278:	e0bffc07 	ldb	r2,-16(fp)
 200e27c:	10bfffd8 	cmpnei	r2,r2,-1
 200e280:	10000e1e 	bne	r2,zero,200e2bc <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 200e284:	e0bff917 	ldw	r2,-28(fp)
 200e288:	10800417 	ldw	r2,16(r2)
 200e28c:	10001026 	beq	r2,zero,200e2d0 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 200e290:	e0bff917 	ldw	r2,-28(fp)
 200e294:	10800404 	addi	r2,r2,16
 200e298:	1009883a 	mov	r4,r2
 200e29c:	20100c40 	call	20100c4 <xTaskRemoveFromEventList>
 200e2a0:	10000b26 	beq	r2,zero,200e2d0 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 200e2a4:	e0bfff17 	ldw	r2,-4(fp)
 200e2a8:	10000926 	beq	r2,zero,200e2d0 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 200e2ac:	e0bfff17 	ldw	r2,-4(fp)
 200e2b0:	00c00044 	movi	r3,1
 200e2b4:	10c00015 	stw	r3,0(r2)
 200e2b8:	00000506 	br	200e2d0 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 200e2bc:	e0bffc03 	ldbu	r2,-16(fp)
 200e2c0:	10800044 	addi	r2,r2,1
 200e2c4:	1007883a 	mov	r3,r2
 200e2c8:	e0bff917 	ldw	r2,-28(fp)
 200e2cc:	10c01105 	stb	r3,68(r2)
			}

			xReturn = pdPASS;
 200e2d0:	00800044 	movi	r2,1
 200e2d4:	e0bff815 	stw	r2,-32(fp)
 200e2d8:	00000106 	br	200e2e0 <xQueueReceiveFromISR+0xcc>
		}
		else
		{
			xReturn = pdFAIL;
 200e2dc:	e03ff815 	stw	zero,-32(fp)
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 200e2e0:	e0bff817 	ldw	r2,-32(fp)
}
 200e2e4:	e037883a 	mov	sp,fp
 200e2e8:	dfc00117 	ldw	ra,4(sp)
 200e2ec:	df000017 	ldw	fp,0(sp)
 200e2f0:	dec00204 	addi	sp,sp,8
 200e2f4:	f800283a 	ret

0200e2f8 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 200e2f8:	defff804 	addi	sp,sp,-32
 200e2fc:	dfc00715 	stw	ra,28(sp)
 200e300:	df000615 	stw	fp,24(sp)
 200e304:	df000604 	addi	fp,sp,24
 200e308:	e13ffe15 	stw	r4,-8(fp)
 200e30c:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 200e310:	e0bffe17 	ldw	r2,-8(fp)
 200e314:	e0bffb15 	stw	r2,-20(fp)
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 200e318:	e03ffc15 	stw	zero,-16(fp)
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 200e31c:	e0bffb17 	ldw	r2,-20(fp)
 200e320:	10800e17 	ldw	r2,56(r2)
 200e324:	10000c26 	beq	r2,zero,200e358 <xQueuePeekFromISR+0x60>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 200e328:	e0bffb17 	ldw	r2,-20(fp)
 200e32c:	10800317 	ldw	r2,12(r2)
 200e330:	e0bffd15 	stw	r2,-12(fp)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 200e334:	e17fff17 	ldw	r5,-4(fp)
 200e338:	e13ffb17 	ldw	r4,-20(fp)
 200e33c:	200e6fc0 	call	200e6fc <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 200e340:	e0bffb17 	ldw	r2,-20(fp)
 200e344:	e0fffd17 	ldw	r3,-12(fp)
 200e348:	10c00315 	stw	r3,12(r2)

			xReturn = pdPASS;
 200e34c:	00800044 	movi	r2,1
 200e350:	e0bffa15 	stw	r2,-24(fp)
 200e354:	00000106 	br	200e35c <xQueuePeekFromISR+0x64>
		}
		else
		{
			xReturn = pdFAIL;
 200e358:	e03ffa15 	stw	zero,-24(fp)
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 200e35c:	e0bffa17 	ldw	r2,-24(fp)
}
 200e360:	e037883a 	mov	sp,fp
 200e364:	dfc00117 	ldw	ra,4(sp)
 200e368:	df000017 	ldw	fp,0(sp)
 200e36c:	dec00204 	addi	sp,sp,8
 200e370:	f800283a 	ret

0200e374 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 200e374:	defffc04 	addi	sp,sp,-16
 200e378:	dfc00315 	stw	ra,12(sp)
 200e37c:	df000215 	stw	fp,8(sp)
 200e380:	df000204 	addi	fp,sp,8
 200e384:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
 200e388:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e38c:	10000126 	beq	r2,zero,200e394 <uxQueueMessagesWaiting+0x20>
 200e390:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 200e394:	e0bfff17 	ldw	r2,-4(fp)
 200e398:	10800e17 	ldw	r2,56(r2)
 200e39c:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 200e3a0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e3a4:	10000126 	beq	r2,zero,200e3ac <uxQueueMessagesWaiting+0x38>
 200e3a8:	2010e300 	call	2010e30 <vTaskExitCritical>

	return uxReturn;
 200e3ac:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 200e3b0:	e037883a 	mov	sp,fp
 200e3b4:	dfc00117 	ldw	ra,4(sp)
 200e3b8:	df000017 	ldw	fp,0(sp)
 200e3bc:	dec00204 	addi	sp,sp,8
 200e3c0:	f800283a 	ret

0200e3c4 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 200e3c4:	defffb04 	addi	sp,sp,-20
 200e3c8:	dfc00415 	stw	ra,16(sp)
 200e3cc:	df000315 	stw	fp,12(sp)
 200e3d0:	df000304 	addi	fp,sp,12
 200e3d4:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 200e3d8:	e0bfff17 	ldw	r2,-4(fp)
 200e3dc:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 200e3e0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e3e4:	10000126 	beq	r2,zero,200e3ec <uxQueueSpacesAvailable+0x28>
 200e3e8:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 200e3ec:	e0bffd17 	ldw	r2,-12(fp)
 200e3f0:	10c00f17 	ldw	r3,60(r2)
 200e3f4:	e0bffd17 	ldw	r2,-12(fp)
 200e3f8:	10800e17 	ldw	r2,56(r2)
 200e3fc:	1885c83a 	sub	r2,r3,r2
 200e400:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 200e404:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e408:	10000126 	beq	r2,zero,200e410 <uxQueueSpacesAvailable+0x4c>
 200e40c:	2010e300 	call	2010e30 <vTaskExitCritical>

	return uxReturn;
 200e410:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 200e414:	e037883a 	mov	sp,fp
 200e418:	dfc00117 	ldw	ra,4(sp)
 200e41c:	df000017 	ldw	fp,0(sp)
 200e420:	dec00204 	addi	sp,sp,8
 200e424:	f800283a 	ret

0200e428 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 200e428:	defffc04 	addi	sp,sp,-16
 200e42c:	df000315 	stw	fp,12(sp)
 200e430:	df000304 	addi	fp,sp,12
 200e434:	e13fff15 	stw	r4,-4(fp)
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 200e438:	e0bfff17 	ldw	r2,-4(fp)
 200e43c:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( pxQueue );
	uxReturn = pxQueue->uxMessagesWaiting;
 200e440:	e0bffd17 	ldw	r2,-12(fp)
 200e444:	10800e17 	ldw	r2,56(r2)
 200e448:	e0bffe15 	stw	r2,-8(fp)

	return uxReturn;
 200e44c:	e0bffe17 	ldw	r2,-8(fp)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 200e450:	e037883a 	mov	sp,fp
 200e454:	df000017 	ldw	fp,0(sp)
 200e458:	dec00104 	addi	sp,sp,4
 200e45c:	f800283a 	ret

0200e460 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 200e460:	defffc04 	addi	sp,sp,-16
 200e464:	dfc00315 	stw	ra,12(sp)
 200e468:	df000215 	stw	fp,8(sp)
 200e46c:	df000204 	addi	fp,sp,8
 200e470:	e13fff15 	stw	r4,-4(fp)
Queue_t * const pxQueue = xQueue;
 200e474:	e0bfff17 	ldw	r2,-4(fp)
 200e478:	e0bffe15 	stw	r2,-8(fp)

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 200e47c:	e13ffe17 	ldw	r4,-8(fp)
 200e480:	2026b280 	call	2026b28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 200e484:	0001883a 	nop
 200e488:	e037883a 	mov	sp,fp
 200e48c:	dfc00117 	ldw	ra,4(sp)
 200e490:	df000017 	ldw	fp,0(sp)
 200e494:	dec00204 	addi	sp,sp,8
 200e498:	f800283a 	ret

0200e49c <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 200e49c:	defffe04 	addi	sp,sp,-8
 200e4a0:	df000115 	stw	fp,4(sp)
 200e4a4:	df000104 	addi	fp,sp,4
 200e4a8:	e13fff15 	stw	r4,-4(fp)
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 200e4ac:	e0bfff17 	ldw	r2,-4(fp)
 200e4b0:	10801217 	ldw	r2,72(r2)
	}
 200e4b4:	e037883a 	mov	sp,fp
 200e4b8:	df000017 	ldw	fp,0(sp)
 200e4bc:	dec00104 	addi	sp,sp,4
 200e4c0:	f800283a 	ret

0200e4c4 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 200e4c4:	defffd04 	addi	sp,sp,-12
 200e4c8:	df000215 	stw	fp,8(sp)
 200e4cc:	df000204 	addi	fp,sp,8
 200e4d0:	e13ffe15 	stw	r4,-8(fp)
 200e4d4:	e17fff15 	stw	r5,-4(fp)
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 200e4d8:	e0bffe17 	ldw	r2,-8(fp)
 200e4dc:	e0ffff17 	ldw	r3,-4(fp)
 200e4e0:	10c01215 	stw	r3,72(r2)
	}
 200e4e4:	0001883a 	nop
 200e4e8:	e037883a 	mov	sp,fp
 200e4ec:	df000017 	ldw	fp,0(sp)
 200e4f0:	dec00104 	addi	sp,sp,4
 200e4f4:	f800283a 	ret

0200e4f8 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 200e4f8:	defffe04 	addi	sp,sp,-8
 200e4fc:	df000115 	stw	fp,4(sp)
 200e500:	df000104 	addi	fp,sp,4
 200e504:	e13fff15 	stw	r4,-4(fp)
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 200e508:	e0bfff17 	ldw	r2,-4(fp)
 200e50c:	10801303 	ldbu	r2,76(r2)
	}
 200e510:	e037883a 	mov	sp,fp
 200e514:	df000017 	ldw	fp,0(sp)
 200e518:	dec00104 	addi	sp,sp,4
 200e51c:	f800283a 	ret

0200e520 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 200e520:	defffd04 	addi	sp,sp,-12
 200e524:	df000215 	stw	fp,8(sp)
 200e528:	df000204 	addi	fp,sp,8
 200e52c:	e13fff15 	stw	r4,-4(fp)
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 200e530:	e0bfff17 	ldw	r2,-4(fp)
 200e534:	10800917 	ldw	r2,36(r2)
 200e538:	10000726 	beq	r2,zero,200e558 <prvGetDisinheritPriorityAfterTimeout+0x38>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 200e53c:	e0bfff17 	ldw	r2,-4(fp)
 200e540:	10800c17 	ldw	r2,48(r2)
 200e544:	10800017 	ldw	r2,0(r2)
 200e548:	00c00144 	movi	r3,5
 200e54c:	1885c83a 	sub	r2,r3,r2
 200e550:	e0bffe15 	stw	r2,-8(fp)
 200e554:	00000106 	br	200e55c <prvGetDisinheritPriorityAfterTimeout+0x3c>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 200e558:	e03ffe15 	stw	zero,-8(fp)
		}

		return uxHighestPriorityOfWaitingTasks;
 200e55c:	e0bffe17 	ldw	r2,-8(fp)
	}
 200e560:	e037883a 	mov	sp,fp
 200e564:	df000017 	ldw	fp,0(sp)
 200e568:	dec00104 	addi	sp,sp,4
 200e56c:	f800283a 	ret

0200e570 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 200e570:	defff904 	addi	sp,sp,-28
 200e574:	dfc00615 	stw	ra,24(sp)
 200e578:	df000515 	stw	fp,20(sp)
 200e57c:	df000504 	addi	fp,sp,20
 200e580:	e13ffd15 	stw	r4,-12(fp)
 200e584:	e17ffe15 	stw	r5,-8(fp)
 200e588:	e1bfff15 	stw	r6,-4(fp)
BaseType_t xReturn = pdFALSE;
 200e58c:	e03ffb15 	stw	zero,-20(fp)
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 200e590:	e0bffd17 	ldw	r2,-12(fp)
 200e594:	10800e17 	ldw	r2,56(r2)
 200e598:	e0bffc15 	stw	r2,-16(fp)

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 200e59c:	e0bffd17 	ldw	r2,-12(fp)
 200e5a0:	10801017 	ldw	r2,64(r2)
 200e5a4:	10000b1e 	bne	r2,zero,200e5d4 <prvCopyDataToQueue+0x64>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 200e5a8:	e0bffd17 	ldw	r2,-12(fp)
 200e5ac:	10800017 	ldw	r2,0(r2)
 200e5b0:	1000481e 	bne	r2,zero,200e6d4 <prvCopyDataToQueue+0x164>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 200e5b4:	e0bffd17 	ldw	r2,-12(fp)
 200e5b8:	10800217 	ldw	r2,8(r2)
 200e5bc:	1009883a 	mov	r4,r2
 200e5c0:	2010bac0 	call	2010bac <xTaskPriorityDisinherit>
 200e5c4:	e0bffb15 	stw	r2,-20(fp)
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 200e5c8:	e0bffd17 	ldw	r2,-12(fp)
 200e5cc:	10000215 	stw	zero,8(r2)
 200e5d0:	00004006 	br	200e6d4 <prvCopyDataToQueue+0x164>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 200e5d4:	e0bfff17 	ldw	r2,-4(fp)
 200e5d8:	1000191e 	bne	r2,zero,200e640 <prvCopyDataToQueue+0xd0>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 200e5dc:	e0bffd17 	ldw	r2,-12(fp)
 200e5e0:	10c00117 	ldw	r3,4(r2)
 200e5e4:	e0bffd17 	ldw	r2,-12(fp)
 200e5e8:	10801017 	ldw	r2,64(r2)
 200e5ec:	100d883a 	mov	r6,r2
 200e5f0:	e17ffe17 	ldw	r5,-8(fp)
 200e5f4:	1809883a 	mov	r4,r3
 200e5f8:	2005e580 	call	2005e58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 200e5fc:	e0bffd17 	ldw	r2,-12(fp)
 200e600:	10c00117 	ldw	r3,4(r2)
 200e604:	e0bffd17 	ldw	r2,-12(fp)
 200e608:	10801017 	ldw	r2,64(r2)
 200e60c:	1887883a 	add	r3,r3,r2
 200e610:	e0bffd17 	ldw	r2,-12(fp)
 200e614:	10c00115 	stw	r3,4(r2)
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 200e618:	e0bffd17 	ldw	r2,-12(fp)
 200e61c:	10c00117 	ldw	r3,4(r2)
 200e620:	e0bffd17 	ldw	r2,-12(fp)
 200e624:	10800217 	ldw	r2,8(r2)
 200e628:	18802a36 	bltu	r3,r2,200e6d4 <prvCopyDataToQueue+0x164>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 200e62c:	e0bffd17 	ldw	r2,-12(fp)
 200e630:	10c00017 	ldw	r3,0(r2)
 200e634:	e0bffd17 	ldw	r2,-12(fp)
 200e638:	10c00115 	stw	r3,4(r2)
 200e63c:	00002506 	br	200e6d4 <prvCopyDataToQueue+0x164>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 200e640:	e0bffd17 	ldw	r2,-12(fp)
 200e644:	10c00317 	ldw	r3,12(r2)
 200e648:	e0bffd17 	ldw	r2,-12(fp)
 200e64c:	10801017 	ldw	r2,64(r2)
 200e650:	100d883a 	mov	r6,r2
 200e654:	e17ffe17 	ldw	r5,-8(fp)
 200e658:	1809883a 	mov	r4,r3
 200e65c:	2005e580 	call	2005e58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 200e660:	e0bffd17 	ldw	r2,-12(fp)
 200e664:	10c00317 	ldw	r3,12(r2)
 200e668:	e0bffd17 	ldw	r2,-12(fp)
 200e66c:	10801017 	ldw	r2,64(r2)
 200e670:	0085c83a 	sub	r2,zero,r2
 200e674:	1887883a 	add	r3,r3,r2
 200e678:	e0bffd17 	ldw	r2,-12(fp)
 200e67c:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 200e680:	e0bffd17 	ldw	r2,-12(fp)
 200e684:	10c00317 	ldw	r3,12(r2)
 200e688:	e0bffd17 	ldw	r2,-12(fp)
 200e68c:	10800017 	ldw	r2,0(r2)
 200e690:	1880082e 	bgeu	r3,r2,200e6b4 <prvCopyDataToQueue+0x144>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 200e694:	e0bffd17 	ldw	r2,-12(fp)
 200e698:	10c00217 	ldw	r3,8(r2)
 200e69c:	e0bffd17 	ldw	r2,-12(fp)
 200e6a0:	10801017 	ldw	r2,64(r2)
 200e6a4:	0085c83a 	sub	r2,zero,r2
 200e6a8:	1887883a 	add	r3,r3,r2
 200e6ac:	e0bffd17 	ldw	r2,-12(fp)
 200e6b0:	10c00315 	stw	r3,12(r2)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 200e6b4:	e0bfff17 	ldw	r2,-4(fp)
 200e6b8:	10800098 	cmpnei	r2,r2,2
 200e6bc:	1000051e 	bne	r2,zero,200e6d4 <prvCopyDataToQueue+0x164>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 200e6c0:	e0bffc17 	ldw	r2,-16(fp)
 200e6c4:	10000326 	beq	r2,zero,200e6d4 <prvCopyDataToQueue+0x164>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 200e6c8:	e0bffc17 	ldw	r2,-16(fp)
 200e6cc:	10bfffc4 	addi	r2,r2,-1
 200e6d0:	e0bffc15 	stw	r2,-16(fp)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 200e6d4:	e0bffc17 	ldw	r2,-16(fp)
 200e6d8:	10c00044 	addi	r3,r2,1
 200e6dc:	e0bffd17 	ldw	r2,-12(fp)
 200e6e0:	10c00e15 	stw	r3,56(r2)

	return xReturn;
 200e6e4:	e0bffb17 	ldw	r2,-20(fp)
}
 200e6e8:	e037883a 	mov	sp,fp
 200e6ec:	dfc00117 	ldw	ra,4(sp)
 200e6f0:	df000017 	ldw	fp,0(sp)
 200e6f4:	dec00204 	addi	sp,sp,8
 200e6f8:	f800283a 	ret

0200e6fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 200e6fc:	defffc04 	addi	sp,sp,-16
 200e700:	dfc00315 	stw	ra,12(sp)
 200e704:	df000215 	stw	fp,8(sp)
 200e708:	df000204 	addi	fp,sp,8
 200e70c:	e13ffe15 	stw	r4,-8(fp)
 200e710:	e17fff15 	stw	r5,-4(fp)
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 200e714:	e0bffe17 	ldw	r2,-8(fp)
 200e718:	10801017 	ldw	r2,64(r2)
 200e71c:	10001826 	beq	r2,zero,200e780 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 200e720:	e0bffe17 	ldw	r2,-8(fp)
 200e724:	10c00317 	ldw	r3,12(r2)
 200e728:	e0bffe17 	ldw	r2,-8(fp)
 200e72c:	10801017 	ldw	r2,64(r2)
 200e730:	1887883a 	add	r3,r3,r2
 200e734:	e0bffe17 	ldw	r2,-8(fp)
 200e738:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 200e73c:	e0bffe17 	ldw	r2,-8(fp)
 200e740:	10c00317 	ldw	r3,12(r2)
 200e744:	e0bffe17 	ldw	r2,-8(fp)
 200e748:	10800217 	ldw	r2,8(r2)
 200e74c:	18800436 	bltu	r3,r2,200e760 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 200e750:	e0bffe17 	ldw	r2,-8(fp)
 200e754:	10c00017 	ldw	r3,0(r2)
 200e758:	e0bffe17 	ldw	r2,-8(fp)
 200e75c:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 200e760:	e0bffe17 	ldw	r2,-8(fp)
 200e764:	10c00317 	ldw	r3,12(r2)
 200e768:	e0bffe17 	ldw	r2,-8(fp)
 200e76c:	10801017 	ldw	r2,64(r2)
 200e770:	100d883a 	mov	r6,r2
 200e774:	180b883a 	mov	r5,r3
 200e778:	e13fff17 	ldw	r4,-4(fp)
 200e77c:	2005e580 	call	2005e58 <memcpy>
	}
}
 200e780:	0001883a 	nop
 200e784:	e037883a 	mov	sp,fp
 200e788:	dfc00117 	ldw	ra,4(sp)
 200e78c:	df000017 	ldw	fp,0(sp)
 200e790:	dec00204 	addi	sp,sp,8
 200e794:	f800283a 	ret

0200e798 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 200e798:	defffc04 	addi	sp,sp,-16
 200e79c:	dfc00315 	stw	ra,12(sp)
 200e7a0:	df000215 	stw	fp,8(sp)
 200e7a4:	df000204 	addi	fp,sp,8
 200e7a8:	e13fff15 	stw	r4,-4(fp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 200e7ac:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e7b0:	10000126 	beq	r2,zero,200e7b8 <prvUnlockQueue+0x20>
 200e7b4:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 200e7b8:	e0bfff17 	ldw	r2,-4(fp)
 200e7bc:	10801143 	ldbu	r2,69(r2)
 200e7c0:	e0bffe05 	stb	r2,-8(fp)

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 200e7c4:	00000c06 	br	200e7f8 <prvUnlockQueue+0x60>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 200e7c8:	e0bfff17 	ldw	r2,-4(fp)
 200e7cc:	10800917 	ldw	r2,36(r2)
 200e7d0:	10000c26 	beq	r2,zero,200e804 <prvUnlockQueue+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 200e7d4:	e0bfff17 	ldw	r2,-4(fp)
 200e7d8:	10800904 	addi	r2,r2,36
 200e7dc:	1009883a 	mov	r4,r2
 200e7e0:	20100c40 	call	20100c4 <xTaskRemoveFromEventList>
 200e7e4:	10000126 	beq	r2,zero,200e7ec <prvUnlockQueue+0x54>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 200e7e8:	20104080 	call	2010408 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 200e7ec:	e0bffe03 	ldbu	r2,-8(fp)
 200e7f0:	10bfffc4 	addi	r2,r2,-1
 200e7f4:	e0bffe05 	stb	r2,-8(fp)
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 200e7f8:	e0bffe07 	ldb	r2,-8(fp)
 200e7fc:	00bff216 	blt	zero,r2,200e7c8 <__alt_mem_mem_0+0xfcfee7c8>
 200e800:	00000106 	br	200e808 <prvUnlockQueue+0x70>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 200e804:	0001883a 	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 200e808:	e0bfff17 	ldw	r2,-4(fp)
 200e80c:	00ffffc4 	movi	r3,-1
 200e810:	10c01145 	stb	r3,69(r2)
	}
	taskEXIT_CRITICAL();
 200e814:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e818:	10000126 	beq	r2,zero,200e820 <prvUnlockQueue+0x88>
 200e81c:	2010e300 	call	2010e30 <vTaskExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 200e820:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e824:	10000126 	beq	r2,zero,200e82c <prvUnlockQueue+0x94>
 200e828:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 200e82c:	e0bfff17 	ldw	r2,-4(fp)
 200e830:	10801103 	ldbu	r2,68(r2)
 200e834:	e0bffe45 	stb	r2,-7(fp)

		while( cRxLock > queueLOCKED_UNMODIFIED )
 200e838:	00000c06 	br	200e86c <prvUnlockQueue+0xd4>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 200e83c:	e0bfff17 	ldw	r2,-4(fp)
 200e840:	10800417 	ldw	r2,16(r2)
 200e844:	10000c26 	beq	r2,zero,200e878 <prvUnlockQueue+0xe0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 200e848:	e0bfff17 	ldw	r2,-4(fp)
 200e84c:	10800404 	addi	r2,r2,16
 200e850:	1009883a 	mov	r4,r2
 200e854:	20100c40 	call	20100c4 <xTaskRemoveFromEventList>
 200e858:	10000126 	beq	r2,zero,200e860 <prvUnlockQueue+0xc8>
				{
					vTaskMissedYield();
 200e85c:	20104080 	call	2010408 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 200e860:	e0bffe43 	ldbu	r2,-7(fp)
 200e864:	10bfffc4 	addi	r2,r2,-1
 200e868:	e0bffe45 	stb	r2,-7(fp)
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 200e86c:	e0bffe47 	ldb	r2,-7(fp)
 200e870:	00bff216 	blt	zero,r2,200e83c <__alt_mem_mem_0+0xfcfee83c>
 200e874:	00000106 	br	200e87c <prvUnlockQueue+0xe4>

				--cRxLock;
			}
			else
			{
				break;
 200e878:	0001883a 	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 200e87c:	e0bfff17 	ldw	r2,-4(fp)
 200e880:	00ffffc4 	movi	r3,-1
 200e884:	10c01105 	stb	r3,68(r2)
	}
	taskEXIT_CRITICAL();
 200e888:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e88c:	10000126 	beq	r2,zero,200e894 <prvUnlockQueue+0xfc>
 200e890:	2010e300 	call	2010e30 <vTaskExitCritical>
}
 200e894:	0001883a 	nop
 200e898:	e037883a 	mov	sp,fp
 200e89c:	dfc00117 	ldw	ra,4(sp)
 200e8a0:	df000017 	ldw	fp,0(sp)
 200e8a4:	dec00204 	addi	sp,sp,8
 200e8a8:	f800283a 	ret

0200e8ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 200e8ac:	defffc04 	addi	sp,sp,-16
 200e8b0:	dfc00315 	stw	ra,12(sp)
 200e8b4:	df000215 	stw	fp,8(sp)
 200e8b8:	df000204 	addi	fp,sp,8
 200e8bc:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 200e8c0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e8c4:	10000126 	beq	r2,zero,200e8cc <prvIsQueueEmpty+0x20>
 200e8c8:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 200e8cc:	e0bfff17 	ldw	r2,-4(fp)
 200e8d0:	10800e17 	ldw	r2,56(r2)
 200e8d4:	1000031e 	bne	r2,zero,200e8e4 <prvIsQueueEmpty+0x38>
		{
			xReturn = pdTRUE;
 200e8d8:	00800044 	movi	r2,1
 200e8dc:	e0bffe15 	stw	r2,-8(fp)
 200e8e0:	00000106 	br	200e8e8 <prvIsQueueEmpty+0x3c>
		}
		else
		{
			xReturn = pdFALSE;
 200e8e4:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 200e8e8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e8ec:	10000126 	beq	r2,zero,200e8f4 <prvIsQueueEmpty+0x48>
 200e8f0:	2010e300 	call	2010e30 <vTaskExitCritical>

	return xReturn;
 200e8f4:	e0bffe17 	ldw	r2,-8(fp)
}
 200e8f8:	e037883a 	mov	sp,fp
 200e8fc:	dfc00117 	ldw	ra,4(sp)
 200e900:	df000017 	ldw	fp,0(sp)
 200e904:	dec00204 	addi	sp,sp,8
 200e908:	f800283a 	ret

0200e90c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 200e90c:	defffc04 	addi	sp,sp,-16
 200e910:	df000315 	stw	fp,12(sp)
 200e914:	df000304 	addi	fp,sp,12
 200e918:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 200e91c:	e0bfff17 	ldw	r2,-4(fp)
 200e920:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 200e924:	e0bffe17 	ldw	r2,-8(fp)
 200e928:	10800e17 	ldw	r2,56(r2)
 200e92c:	1000031e 	bne	r2,zero,200e93c <xQueueIsQueueEmptyFromISR+0x30>
	{
		xReturn = pdTRUE;
 200e930:	00800044 	movi	r2,1
 200e934:	e0bffd15 	stw	r2,-12(fp)
 200e938:	00000106 	br	200e940 <xQueueIsQueueEmptyFromISR+0x34>
	}
	else
	{
		xReturn = pdFALSE;
 200e93c:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 200e940:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 200e944:	e037883a 	mov	sp,fp
 200e948:	df000017 	ldw	fp,0(sp)
 200e94c:	dec00104 	addi	sp,sp,4
 200e950:	f800283a 	ret

0200e954 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 200e954:	defffc04 	addi	sp,sp,-16
 200e958:	dfc00315 	stw	ra,12(sp)
 200e95c:	df000215 	stw	fp,8(sp)
 200e960:	df000204 	addi	fp,sp,8
 200e964:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;

	taskENTER_CRITICAL();
 200e968:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e96c:	10000126 	beq	r2,zero,200e974 <prvIsQueueFull+0x20>
 200e970:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 200e974:	e0bfff17 	ldw	r2,-4(fp)
 200e978:	10c00e17 	ldw	r3,56(r2)
 200e97c:	e0bfff17 	ldw	r2,-4(fp)
 200e980:	10800f17 	ldw	r2,60(r2)
 200e984:	1880031e 	bne	r3,r2,200e994 <prvIsQueueFull+0x40>
		{
			xReturn = pdTRUE;
 200e988:	00800044 	movi	r2,1
 200e98c:	e0bffe15 	stw	r2,-8(fp)
 200e990:	00000106 	br	200e998 <prvIsQueueFull+0x44>
		}
		else
		{
			xReturn = pdFALSE;
 200e994:	e03ffe15 	stw	zero,-8(fp)
		}
	}
	taskEXIT_CRITICAL();
 200e998:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200e99c:	10000126 	beq	r2,zero,200e9a4 <prvIsQueueFull+0x50>
 200e9a0:	2010e300 	call	2010e30 <vTaskExitCritical>

	return xReturn;
 200e9a4:	e0bffe17 	ldw	r2,-8(fp)
}
 200e9a8:	e037883a 	mov	sp,fp
 200e9ac:	dfc00117 	ldw	ra,4(sp)
 200e9b0:	df000017 	ldw	fp,0(sp)
 200e9b4:	dec00204 	addi	sp,sp,8
 200e9b8:	f800283a 	ret

0200e9bc <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 200e9bc:	defffc04 	addi	sp,sp,-16
 200e9c0:	df000315 	stw	fp,12(sp)
 200e9c4:	df000304 	addi	fp,sp,12
 200e9c8:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 200e9cc:	e0bfff17 	ldw	r2,-4(fp)
 200e9d0:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( pxQueue );
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 200e9d4:	e0bffe17 	ldw	r2,-8(fp)
 200e9d8:	10c00e17 	ldw	r3,56(r2)
 200e9dc:	e0bffe17 	ldw	r2,-8(fp)
 200e9e0:	10800f17 	ldw	r2,60(r2)
 200e9e4:	1880031e 	bne	r3,r2,200e9f4 <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 200e9e8:	00800044 	movi	r2,1
 200e9ec:	e0bffd15 	stw	r2,-12(fp)
 200e9f0:	00000106 	br	200e9f8 <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 200e9f4:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 200e9f8:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 200e9fc:	e037883a 	mov	sp,fp
 200ea00:	df000017 	ldw	fp,0(sp)
 200ea04:	dec00104 	addi	sp,sp,4
 200ea08:	f800283a 	ret

0200ea0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 200ea0c:	defffa04 	addi	sp,sp,-24
 200ea10:	dfc00515 	stw	ra,20(sp)
 200ea14:	df000415 	stw	fp,16(sp)
 200ea18:	df000404 	addi	fp,sp,16
 200ea1c:	e13ffd15 	stw	r4,-12(fp)
 200ea20:	e17ffe15 	stw	r5,-8(fp)
 200ea24:	e1bfff15 	stw	r6,-4(fp)
	Queue_t * const pxQueue = xQueue;
 200ea28:	e0bffd17 	ldw	r2,-12(fp)
 200ea2c:	e0bffc15 	stw	r2,-16(fp)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 200ea30:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200ea34:	10000126 	beq	r2,zero,200ea3c <vQueueWaitForMessageRestricted+0x30>
 200ea38:	2010de80 	call	2010de8 <vTaskEnterCritical>
 200ea3c:	e0bffc17 	ldw	r2,-16(fp)
 200ea40:	10801103 	ldbu	r2,68(r2)
 200ea44:	10803fcc 	andi	r2,r2,255
 200ea48:	1080201c 	xori	r2,r2,128
 200ea4c:	10bfe004 	addi	r2,r2,-128
 200ea50:	10bfffd8 	cmpnei	r2,r2,-1
 200ea54:	1000021e 	bne	r2,zero,200ea60 <vQueueWaitForMessageRestricted+0x54>
 200ea58:	e0bffc17 	ldw	r2,-16(fp)
 200ea5c:	10001105 	stb	zero,68(r2)
 200ea60:	e0bffc17 	ldw	r2,-16(fp)
 200ea64:	10801143 	ldbu	r2,69(r2)
 200ea68:	10803fcc 	andi	r2,r2,255
 200ea6c:	1080201c 	xori	r2,r2,128
 200ea70:	10bfe004 	addi	r2,r2,-128
 200ea74:	10bfffd8 	cmpnei	r2,r2,-1
 200ea78:	1000021e 	bne	r2,zero,200ea84 <vQueueWaitForMessageRestricted+0x78>
 200ea7c:	e0bffc17 	ldw	r2,-16(fp)
 200ea80:	10001145 	stb	zero,69(r2)
 200ea84:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200ea88:	10000126 	beq	r2,zero,200ea90 <vQueueWaitForMessageRestricted+0x84>
 200ea8c:	2010e300 	call	2010e30 <vTaskExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 200ea90:	e0bffc17 	ldw	r2,-16(fp)
 200ea94:	10800e17 	ldw	r2,56(r2)
 200ea98:	1000061e 	bne	r2,zero,200eab4 <vQueueWaitForMessageRestricted+0xa8>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 200ea9c:	e0bffc17 	ldw	r2,-16(fp)
 200eaa0:	10800904 	addi	r2,r2,36
 200eaa4:	e1bfff17 	ldw	r6,-4(fp)
 200eaa8:	e17ffe17 	ldw	r5,-8(fp)
 200eaac:	1009883a 	mov	r4,r2
 200eab0:	20100600 	call	2010060 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 200eab4:	e13ffc17 	ldw	r4,-16(fp)
 200eab8:	200e7980 	call	200e798 <prvUnlockQueue>
	}
 200eabc:	0001883a 	nop
 200eac0:	e037883a 	mov	sp,fp
 200eac4:	dfc00117 	ldw	ra,4(sp)
 200eac8:	df000017 	ldw	fp,0(sp)
 200eacc:	dec00204 	addi	sp,sp,8
 200ead0:	f800283a 	ret

0200ead4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 200ead4:	defff304 	addi	sp,sp,-52
 200ead8:	dfc00c15 	stw	ra,48(sp)
 200eadc:	df000b15 	stw	fp,44(sp)
 200eae0:	df000b04 	addi	fp,sp,44
 200eae4:	e13ffc15 	stw	r4,-16(fp)
 200eae8:	e17ffd15 	stw	r5,-12(fp)
 200eaec:	e1bffe15 	stw	r6,-8(fp)
 200eaf0:	e1ffff15 	stw	r7,-4(fp)
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 200eaf4:	e0bffe17 	ldw	r2,-8(fp)
 200eaf8:	1085883a 	add	r2,r2,r2
 200eafc:	1085883a 	add	r2,r2,r2
 200eb00:	1009883a 	mov	r4,r2
 200eb04:	2026a680 	call	2026a68 <pvPortMalloc>
 200eb08:	e0bffb15 	stw	r2,-20(fp)

			if( pxStack != NULL )
 200eb0c:	e0bffb17 	ldw	r2,-20(fp)
 200eb10:	10000c26 	beq	r2,zero,200eb44 <xTaskCreate+0x70>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 200eb14:	01001e04 	movi	r4,120
 200eb18:	2026a680 	call	2026a68 <pvPortMalloc>
 200eb1c:	e0bff915 	stw	r2,-28(fp)

				if( pxNewTCB != NULL )
 200eb20:	e0bff917 	ldw	r2,-28(fp)
 200eb24:	10000426 	beq	r2,zero,200eb38 <xTaskCreate+0x64>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 200eb28:	e0bff917 	ldw	r2,-28(fp)
 200eb2c:	e0fffb17 	ldw	r3,-20(fp)
 200eb30:	10c00c15 	stw	r3,48(r2)
 200eb34:	00000406 	br	200eb48 <xTaskCreate+0x74>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 200eb38:	e13ffb17 	ldw	r4,-20(fp)
 200eb3c:	2026b280 	call	2026b28 <vPortFree>
 200eb40:	00000106 	br	200eb48 <xTaskCreate+0x74>
				}
			}
			else
			{
				pxNewTCB = NULL;
 200eb44:	e03ff915 	stw	zero,-28(fp)
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 200eb48:	e0bff917 	ldw	r2,-28(fp)
 200eb4c:	10001126 	beq	r2,zero,200eb94 <xTaskCreate+0xc0>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 200eb50:	d8000315 	stw	zero,12(sp)
 200eb54:	e0bff917 	ldw	r2,-28(fp)
 200eb58:	d8800215 	stw	r2,8(sp)
 200eb5c:	e0800317 	ldw	r2,12(fp)
 200eb60:	d8800115 	stw	r2,4(sp)
 200eb64:	e0800217 	ldw	r2,8(fp)
 200eb68:	d8800015 	stw	r2,0(sp)
 200eb6c:	e1ffff17 	ldw	r7,-4(fp)
 200eb70:	e1bffe17 	ldw	r6,-8(fp)
 200eb74:	e17ffd17 	ldw	r5,-12(fp)
 200eb78:	e13ffc17 	ldw	r4,-16(fp)
 200eb7c:	200ebb40 	call	200ebb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 200eb80:	e13ff917 	ldw	r4,-28(fp)
 200eb84:	200ed980 	call	200ed98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 200eb88:	00800044 	movi	r2,1
 200eb8c:	e0bffa15 	stw	r2,-24(fp)
 200eb90:	00000206 	br	200eb9c <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 200eb94:	00bfffc4 	movi	r2,-1
 200eb98:	e0bffa15 	stw	r2,-24(fp)
		}

		return xReturn;
 200eb9c:	e0bffa17 	ldw	r2,-24(fp)
	}
 200eba0:	e037883a 	mov	sp,fp
 200eba4:	dfc00117 	ldw	ra,4(sp)
 200eba8:	df000017 	ldw	fp,0(sp)
 200ebac:	dec00204 	addi	sp,sp,8
 200ebb0:	f800283a 	ret

0200ebb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 200ebb4:	defff804 	addi	sp,sp,-32
 200ebb8:	dfc00715 	stw	ra,28(sp)
 200ebbc:	df000615 	stw	fp,24(sp)
 200ebc0:	df000604 	addi	fp,sp,24
 200ebc4:	e13ffc15 	stw	r4,-16(fp)
 200ebc8:	e17ffd15 	stw	r5,-12(fp)
 200ebcc:	e1bffe15 	stw	r6,-8(fp)
 200ebd0:	e1ffff15 	stw	r7,-4(fp)

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 200ebd4:	e0800417 	ldw	r2,16(fp)
 200ebd8:	10c00c17 	ldw	r3,48(r2)
 200ebdc:	e0bffe17 	ldw	r2,-8(fp)
 200ebe0:	1085883a 	add	r2,r2,r2
 200ebe4:	1085883a 	add	r2,r2,r2
 200ebe8:	100d883a 	mov	r6,r2
 200ebec:	01402944 	movi	r5,165
 200ebf0:	1809883a 	mov	r4,r3
 200ebf4:	2005fa00 	call	2005fa0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 200ebf8:	e0800417 	ldw	r2,16(fp)
 200ebfc:	10c00c17 	ldw	r3,48(r2)
 200ec00:	e13ffe17 	ldw	r4,-8(fp)
 200ec04:	00900034 	movhi	r2,16384
 200ec08:	10bfffc4 	addi	r2,r2,-1
 200ec0c:	2085883a 	add	r2,r4,r2
 200ec10:	1085883a 	add	r2,r2,r2
 200ec14:	1085883a 	add	r2,r2,r2
 200ec18:	1885883a 	add	r2,r3,r2
 200ec1c:	e0bffb15 	stw	r2,-20(fp)
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 200ec20:	e0fffb17 	ldw	r3,-20(fp)
 200ec24:	00bfff04 	movi	r2,-4
 200ec28:	1884703a 	and	r2,r3,r2
 200ec2c:	e0bffb15 	stw	r2,-20(fp)
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 200ec30:	e0bffd17 	ldw	r2,-12(fp)
 200ec34:	10001e26 	beq	r2,zero,200ecb0 <prvInitialiseNewTask+0xfc>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 200ec38:	e03ffa15 	stw	zero,-24(fp)
 200ec3c:	00001406 	br	200ec90 <prvInitialiseNewTask+0xdc>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 200ec40:	e0fffd17 	ldw	r3,-12(fp)
 200ec44:	e0bffa17 	ldw	r2,-24(fp)
 200ec48:	1885883a 	add	r2,r3,r2
 200ec4c:	10c00003 	ldbu	r3,0(r2)
 200ec50:	e1000417 	ldw	r4,16(fp)
 200ec54:	e0bffa17 	ldw	r2,-24(fp)
 200ec58:	2085883a 	add	r2,r4,r2
 200ec5c:	10800d04 	addi	r2,r2,52
 200ec60:	10c00005 	stb	r3,0(r2)

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 200ec64:	e0fffd17 	ldw	r3,-12(fp)
 200ec68:	e0bffa17 	ldw	r2,-24(fp)
 200ec6c:	1885883a 	add	r2,r3,r2
 200ec70:	10800003 	ldbu	r2,0(r2)
 200ec74:	10803fcc 	andi	r2,r2,255
 200ec78:	1080201c 	xori	r2,r2,128
 200ec7c:	10bfe004 	addi	r2,r2,-128
 200ec80:	10000726 	beq	r2,zero,200eca0 <prvInitialiseNewTask+0xec>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 200ec84:	e0bffa17 	ldw	r2,-24(fp)
 200ec88:	10800044 	addi	r2,r2,1
 200ec8c:	e0bffa15 	stw	r2,-24(fp)
 200ec90:	e0bffa17 	ldw	r2,-24(fp)
 200ec94:	10800a30 	cmpltui	r2,r2,40
 200ec98:	103fe91e 	bne	r2,zero,200ec40 <__alt_mem_mem_0+0xfcfeec40>
 200ec9c:	00000106 	br	200eca4 <prvInitialiseNewTask+0xf0>
			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
			{
				break;
 200eca0:	0001883a 	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 200eca4:	e0800417 	ldw	r2,16(fp)
 200eca8:	100016c5 	stb	zero,91(r2)
 200ecac:	00000206 	br	200ecb8 <prvInitialiseNewTask+0x104>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 200ecb0:	e0800417 	ldw	r2,16(fp)
 200ecb4:	10000d05 	stb	zero,52(r2)
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 200ecb8:	e0800217 	ldw	r2,8(fp)
 200ecbc:	10800170 	cmpltui	r2,r2,5
 200ecc0:	1000021e 	bne	r2,zero,200eccc <prvInitialiseNewTask+0x118>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 200ecc4:	00800104 	movi	r2,4
 200ecc8:	e0800215 	stw	r2,8(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 200eccc:	e0800417 	ldw	r2,16(fp)
 200ecd0:	e0c00217 	ldw	r3,8(fp)
 200ecd4:	10c00b15 	stw	r3,44(r2)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 200ecd8:	e0800417 	ldw	r2,16(fp)
 200ecdc:	e0c00217 	ldw	r3,8(fp)
 200ece0:	10c01a15 	stw	r3,104(r2)
		pxNewTCB->uxMutexesHeld = 0;
 200ece4:	e0800417 	ldw	r2,16(fp)
 200ece8:	10001b15 	stw	zero,108(r2)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 200ecec:	e0800417 	ldw	r2,16(fp)
 200ecf0:	10800104 	addi	r2,r2,4
 200ecf4:	1009883a 	mov	r4,r2
 200ecf8:	2026c040 	call	2026c04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 200ecfc:	e0800417 	ldw	r2,16(fp)
 200ed00:	10800604 	addi	r2,r2,24
 200ed04:	1009883a 	mov	r4,r2
 200ed08:	2026c040 	call	2026c04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 200ed0c:	e0800417 	ldw	r2,16(fp)
 200ed10:	e0c00417 	ldw	r3,16(fp)
 200ed14:	10c00415 	stw	r3,16(r2)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 200ed18:	00c00144 	movi	r3,5
 200ed1c:	e0800217 	ldw	r2,8(fp)
 200ed20:	1887c83a 	sub	r3,r3,r2
 200ed24:	e0800417 	ldw	r2,16(fp)
 200ed28:	10c00615 	stw	r3,24(r2)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 200ed2c:	e0800417 	ldw	r2,16(fp)
 200ed30:	e0c00417 	ldw	r3,16(fp)
 200ed34:	10c00915 	stw	r3,36(r2)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 200ed38:	e0800417 	ldw	r2,16(fp)
 200ed3c:	10001715 	stw	zero,92(r2)
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 200ed40:	e0800417 	ldw	r2,16(fp)
 200ed44:	10001c15 	stw	zero,112(r2)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 200ed48:	e0800417 	ldw	r2,16(fp)
 200ed4c:	10001d05 	stb	zero,116(r2)
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 200ed50:	e1bfff17 	ldw	r6,-4(fp)
 200ed54:	e17ffc17 	ldw	r5,-16(fp)
 200ed58:	e13ffb17 	ldw	r4,-20(fp)
 200ed5c:	2026ee40 	call	2026ee4 <pxPortInitialiseStack>
 200ed60:	1007883a 	mov	r3,r2
 200ed64:	e0800417 	ldw	r2,16(fp)
 200ed68:	10c00015 	stw	r3,0(r2)
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 200ed6c:	e0800317 	ldw	r2,12(fp)
 200ed70:	10000326 	beq	r2,zero,200ed80 <prvInitialiseNewTask+0x1cc>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 200ed74:	e0800317 	ldw	r2,12(fp)
 200ed78:	e0c00417 	ldw	r3,16(fp)
 200ed7c:	10c00015 	stw	r3,0(r2)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 200ed80:	0001883a 	nop
 200ed84:	e037883a 	mov	sp,fp
 200ed88:	dfc00117 	ldw	ra,4(sp)
 200ed8c:	df000017 	ldw	fp,0(sp)
 200ed90:	dec00204 	addi	sp,sp,8
 200ed94:	f800283a 	ret

0200ed98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 200ed98:	defffd04 	addi	sp,sp,-12
 200ed9c:	dfc00215 	stw	ra,8(sp)
 200eda0:	df000115 	stw	fp,4(sp)
 200eda4:	df000104 	addi	fp,sp,4
 200eda8:	e13fff15 	stw	r4,-4(fp)
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 200edac:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200edb0:	10000126 	beq	r2,zero,200edb8 <prvAddNewTaskToReadyList+0x20>
 200edb4:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 200edb8:	d0a7d717 	ldw	r2,-24740(gp)
 200edbc:	10800044 	addi	r2,r2,1
 200edc0:	d0a7d715 	stw	r2,-24740(gp)
		if( pxCurrentTCB == NULL )
 200edc4:	d0a7d317 	ldw	r2,-24756(gp)
 200edc8:	1000071e 	bne	r2,zero,200ede8 <prvAddNewTaskToReadyList+0x50>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 200edcc:	e0bfff17 	ldw	r2,-4(fp)
 200edd0:	d0a7d315 	stw	r2,-24756(gp)

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 200edd4:	d0a7d717 	ldw	r2,-24740(gp)
 200edd8:	10800058 	cmpnei	r2,r2,1
 200eddc:	10000b1e 	bne	r2,zero,200ee0c <prvAddNewTaskToReadyList+0x74>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 200ede0:	20104d80 	call	20104d8 <prvInitialiseTaskLists>
 200ede4:	00000906 	br	200ee0c <prvAddNewTaskToReadyList+0x74>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 200ede8:	d0a7da17 	ldw	r2,-24728(gp)
 200edec:	1000071e 	bne	r2,zero,200ee0c <prvAddNewTaskToReadyList+0x74>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 200edf0:	d0a7d317 	ldw	r2,-24756(gp)
 200edf4:	10800b17 	ldw	r2,44(r2)
 200edf8:	e0ffff17 	ldw	r3,-4(fp)
 200edfc:	18c00b17 	ldw	r3,44(r3)
 200ee00:	18800236 	bltu	r3,r2,200ee0c <prvAddNewTaskToReadyList+0x74>
				{
					pxCurrentTCB = pxNewTCB;
 200ee04:	e0bfff17 	ldw	r2,-4(fp)
 200ee08:	d0a7d315 	stw	r2,-24756(gp)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 200ee0c:	d0a7de17 	ldw	r2,-24712(gp)
 200ee10:	10800044 	addi	r2,r2,1
 200ee14:	d0a7de15 	stw	r2,-24712(gp)

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 200ee18:	d0e7de17 	ldw	r3,-24712(gp)
 200ee1c:	e0bfff17 	ldw	r2,-4(fp)
 200ee20:	10c01815 	stw	r3,96(r2)
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 200ee24:	e0bfff17 	ldw	r2,-4(fp)
 200ee28:	10800b17 	ldw	r2,44(r2)
 200ee2c:	d0e7d917 	ldw	r3,-24732(gp)
 200ee30:	1880032e 	bgeu	r3,r2,200ee40 <prvAddNewTaskToReadyList+0xa8>
 200ee34:	e0bfff17 	ldw	r2,-4(fp)
 200ee38:	10800b17 	ldw	r2,44(r2)
 200ee3c:	d0a7d915 	stw	r2,-24732(gp)
 200ee40:	e0bfff17 	ldw	r2,-4(fp)
 200ee44:	10800b17 	ldw	r2,44(r2)
 200ee48:	10c00524 	muli	r3,r2,20
 200ee4c:	00808134 	movhi	r2,516
 200ee50:	109e1204 	addi	r2,r2,30792
 200ee54:	1887883a 	add	r3,r3,r2
 200ee58:	e0bfff17 	ldw	r2,-4(fp)
 200ee5c:	10800104 	addi	r2,r2,4
 200ee60:	100b883a 	mov	r5,r2
 200ee64:	1809883a 	mov	r4,r3
 200ee68:	2026c300 	call	2026c30 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 200ee6c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200ee70:	10000126 	beq	r2,zero,200ee78 <prvAddNewTaskToReadyList+0xe0>
 200ee74:	2010e300 	call	2010e30 <vTaskExitCritical>

	if( xSchedulerRunning != pdFALSE )
 200ee78:	d0a7da17 	ldw	r2,-24728(gp)
 200ee7c:	10000626 	beq	r2,zero,200ee98 <prvAddNewTaskToReadyList+0x100>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 200ee80:	d0a7d317 	ldw	r2,-24756(gp)
 200ee84:	10c00b17 	ldw	r3,44(r2)
 200ee88:	e0bfff17 	ldw	r2,-4(fp)
 200ee8c:	10800b17 	ldw	r2,44(r2)
 200ee90:	1880012e 	bgeu	r3,r2,200ee98 <prvAddNewTaskToReadyList+0x100>
		{
			taskYIELD_IF_USING_PREEMPTION();
 200ee94:	003b683a 	trap	0
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 200ee98:	0001883a 	nop
 200ee9c:	e037883a 	mov	sp,fp
 200eea0:	dfc00117 	ldw	ra,4(sp)
 200eea4:	df000017 	ldw	fp,0(sp)
 200eea8:	dec00204 	addi	sp,sp,8
 200eeac:	f800283a 	ret

0200eeb0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 200eeb0:	defffc04 	addi	sp,sp,-16
 200eeb4:	dfc00315 	stw	ra,12(sp)
 200eeb8:	df000215 	stw	fp,8(sp)
 200eebc:	df000204 	addi	fp,sp,8
 200eec0:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 200eec4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200eec8:	10000126 	beq	r2,zero,200eed0 <vTaskDelete+0x20>
 200eecc:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 200eed0:	e0bfff17 	ldw	r2,-4(fp)
 200eed4:	1000021e 	bne	r2,zero,200eee0 <vTaskDelete+0x30>
 200eed8:	d0a7d317 	ldw	r2,-24756(gp)
 200eedc:	00000106 	br	200eee4 <vTaskDelete+0x34>
 200eee0:	e0bfff17 	ldw	r2,-4(fp)
 200eee4:	e0bffe15 	stw	r2,-8(fp)

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 200eee8:	e0bffe17 	ldw	r2,-8(fp)
 200eeec:	10800104 	addi	r2,r2,4
 200eef0:	1009883a 	mov	r4,r2
 200eef4:	2026d940 	call	2026d94 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 200eef8:	e0bffe17 	ldw	r2,-8(fp)
 200eefc:	10800a17 	ldw	r2,40(r2)
 200ef00:	10000426 	beq	r2,zero,200ef14 <vTaskDelete+0x64>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 200ef04:	e0bffe17 	ldw	r2,-8(fp)
 200ef08:	10800604 	addi	r2,r2,24
 200ef0c:	1009883a 	mov	r4,r2
 200ef10:	2026d940 	call	2026d94 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 200ef14:	d0a7de17 	ldw	r2,-24712(gp)
 200ef18:	10800044 	addi	r2,r2,1
 200ef1c:	d0a7de15 	stw	r2,-24712(gp)

			if( pxTCB == pxCurrentTCB )
 200ef20:	d0a7d317 	ldw	r2,-24756(gp)
 200ef24:	e0fffe17 	ldw	r3,-8(fp)
 200ef28:	18800a1e 	bne	r3,r2,200ef54 <vTaskDelete+0xa4>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 200ef2c:	e0bffe17 	ldw	r2,-8(fp)
 200ef30:	10800104 	addi	r2,r2,4
 200ef34:	100b883a 	mov	r5,r2
 200ef38:	01008134 	movhi	r4,516
 200ef3c:	211e3a04 	addi	r4,r4,30952
 200ef40:	2026c300 	call	2026c30 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 200ef44:	d0a7d617 	ldw	r2,-24744(gp)
 200ef48:	10800044 	addi	r2,r2,1
 200ef4c:	d0a7d615 	stw	r2,-24744(gp)
 200ef50:	00000606 	br	200ef6c <vTaskDelete+0xbc>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 200ef54:	d0a7d717 	ldw	r2,-24740(gp)
 200ef58:	10bfffc4 	addi	r2,r2,-1
 200ef5c:	d0a7d715 	stw	r2,-24740(gp)
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 200ef60:	e13ffe17 	ldw	r4,-8(fp)
 200ef64:	20109600 	call	2010960 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 200ef68:	20109a40 	call	20109a4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 200ef6c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200ef70:	10000126 	beq	r2,zero,200ef78 <vTaskDelete+0xc8>
 200ef74:	2010e300 	call	2010e30 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 200ef78:	d0a7da17 	ldw	r2,-24728(gp)
 200ef7c:	10000426 	beq	r2,zero,200ef90 <vTaskDelete+0xe0>
		{
			if( pxTCB == pxCurrentTCB )
 200ef80:	d0a7d317 	ldw	r2,-24756(gp)
 200ef84:	e0fffe17 	ldw	r3,-8(fp)
 200ef88:	1880011e 	bne	r3,r2,200ef90 <vTaskDelete+0xe0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 200ef8c:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 200ef90:	0001883a 	nop
 200ef94:	e037883a 	mov	sp,fp
 200ef98:	dfc00117 	ldw	ra,4(sp)
 200ef9c:	df000017 	ldw	fp,0(sp)
 200efa0:	dec00204 	addi	sp,sp,8
 200efa4:	f800283a 	ret

0200efa8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 200efa8:	defff804 	addi	sp,sp,-32
 200efac:	dfc00715 	stw	ra,28(sp)
 200efb0:	df000615 	stw	fp,24(sp)
 200efb4:	df000604 	addi	fp,sp,24
 200efb8:	e13ffe15 	stw	r4,-8(fp)
 200efbc:	e17fff15 	stw	r5,-4(fp)
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 200efc0:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
 200efc4:	200f8840 	call	200f884 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 200efc8:	d0a7d817 	ldw	r2,-24736(gp)
 200efcc:	e0bffb15 	stw	r2,-20(fp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 200efd0:	e0bffe17 	ldw	r2,-8(fp)
 200efd4:	10c00017 	ldw	r3,0(r2)
 200efd8:	e0bfff17 	ldw	r2,-4(fp)
 200efdc:	1885883a 	add	r2,r3,r2
 200efe0:	e0bffc15 	stw	r2,-16(fp)

			if( xConstTickCount < *pxPreviousWakeTime )
 200efe4:	e0bffe17 	ldw	r2,-8(fp)
 200efe8:	10800017 	ldw	r2,0(r2)
 200efec:	e0fffb17 	ldw	r3,-20(fp)
 200eff0:	18800a2e 	bgeu	r3,r2,200f01c <vTaskDelayUntil+0x74>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 200eff4:	e0bffe17 	ldw	r2,-8(fp)
 200eff8:	10800017 	ldw	r2,0(r2)
 200effc:	e0fffc17 	ldw	r3,-16(fp)
 200f000:	18800f2e 	bgeu	r3,r2,200f040 <vTaskDelayUntil+0x98>
 200f004:	e0bffc17 	ldw	r2,-16(fp)
 200f008:	e0fffb17 	ldw	r3,-20(fp)
 200f00c:	18800c2e 	bgeu	r3,r2,200f040 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 200f010:	00800044 	movi	r2,1
 200f014:	e0bffa15 	stw	r2,-24(fp)
 200f018:	00000906 	br	200f040 <vTaskDelayUntil+0x98>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 200f01c:	e0bffe17 	ldw	r2,-8(fp)
 200f020:	10800017 	ldw	r2,0(r2)
 200f024:	e0fffc17 	ldw	r3,-16(fp)
 200f028:	18800336 	bltu	r3,r2,200f038 <vTaskDelayUntil+0x90>
 200f02c:	e0bffc17 	ldw	r2,-16(fp)
 200f030:	e0fffb17 	ldw	r3,-20(fp)
 200f034:	1880022e 	bgeu	r3,r2,200f040 <vTaskDelayUntil+0x98>
				{
					xShouldDelay = pdTRUE;
 200f038:	00800044 	movi	r2,1
 200f03c:	e0bffa15 	stw	r2,-24(fp)
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 200f040:	e0bffe17 	ldw	r2,-8(fp)
 200f044:	e0fffc17 	ldw	r3,-16(fp)
 200f048:	10c00015 	stw	r3,0(r2)

			if( xShouldDelay != pdFALSE )
 200f04c:	e0bffa17 	ldw	r2,-24(fp)
 200f050:	10000626 	beq	r2,zero,200f06c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 200f054:	e0fffc17 	ldw	r3,-16(fp)
 200f058:	e0bffb17 	ldw	r2,-20(fp)
 200f05c:	1885c83a 	sub	r2,r3,r2
 200f060:	000b883a 	mov	r5,zero
 200f064:	1009883a 	mov	r4,r2
 200f068:	20116bc0 	call	20116bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 200f06c:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 200f070:	e0bffd15 	stw	r2,-12(fp)

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 200f074:	e0bffd17 	ldw	r2,-12(fp)
 200f078:	1000011e 	bne	r2,zero,200f080 <vTaskDelayUntil+0xd8>
		{
			portYIELD_WITHIN_API();
 200f07c:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 200f080:	0001883a 	nop
 200f084:	e037883a 	mov	sp,fp
 200f088:	dfc00117 	ldw	ra,4(sp)
 200f08c:	df000017 	ldw	fp,0(sp)
 200f090:	dec00204 	addi	sp,sp,8
 200f094:	f800283a 	ret

0200f098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 200f098:	defffc04 	addi	sp,sp,-16
 200f09c:	dfc00315 	stw	ra,12(sp)
 200f0a0:	df000215 	stw	fp,8(sp)
 200f0a4:	df000204 	addi	fp,sp,8
 200f0a8:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xAlreadyYielded = pdFALSE;
 200f0ac:	e03ffe15 	stw	zero,-8(fp)

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 200f0b0:	e0bfff17 	ldw	r2,-4(fp)
 200f0b4:	10000626 	beq	r2,zero,200f0d0 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 200f0b8:	200f8840 	call	200f884 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 200f0bc:	000b883a 	mov	r5,zero
 200f0c0:	e13fff17 	ldw	r4,-4(fp)
 200f0c4:	20116bc0 	call	20116bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 200f0c8:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 200f0cc:	e0bffe15 	stw	r2,-8(fp)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 200f0d0:	e0bffe17 	ldw	r2,-8(fp)
 200f0d4:	1000011e 	bne	r2,zero,200f0dc <vTaskDelay+0x44>
		{
			portYIELD_WITHIN_API();
 200f0d8:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 200f0dc:	0001883a 	nop
 200f0e0:	e037883a 	mov	sp,fp
 200f0e4:	dfc00117 	ldw	ra,4(sp)
 200f0e8:	df000017 	ldw	fp,0(sp)
 200f0ec:	dec00204 	addi	sp,sp,8
 200f0f0:	f800283a 	ret

0200f0f4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 200f0f4:	defff804 	addi	sp,sp,-32
 200f0f8:	dfc00715 	stw	ra,28(sp)
 200f0fc:	df000615 	stw	fp,24(sp)
 200f100:	df000604 	addi	fp,sp,24
 200f104:	e13fff15 	stw	r4,-4(fp)
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 200f108:	e0bfff17 	ldw	r2,-4(fp)
 200f10c:	e0bffb15 	stw	r2,-20(fp)

		configASSERT( pxTCB );

		if( pxTCB == pxCurrentTCB )
 200f110:	d0a7d317 	ldw	r2,-24756(gp)
 200f114:	e0fffb17 	ldw	r3,-20(fp)
 200f118:	1880021e 	bne	r3,r2,200f124 <eTaskGetState+0x30>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 200f11c:	e03ffa15 	stw	zero,-24(fp)
 200f120:	00003606 	br	200f1fc <eTaskGetState+0x108>
		}
		else
		{
			taskENTER_CRITICAL();
 200f124:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f128:	10000126 	beq	r2,zero,200f130 <eTaskGetState+0x3c>
 200f12c:	2010de80 	call	2010de8 <vTaskEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 200f130:	e0bffb17 	ldw	r2,-20(fp)
 200f134:	10800517 	ldw	r2,20(r2)
 200f138:	e0bffc15 	stw	r2,-16(fp)
				pxDelayedList = pxDelayedTaskList;
 200f13c:	d0a7d417 	ldw	r2,-24752(gp)
 200f140:	e0bffd15 	stw	r2,-12(fp)
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 200f144:	d0a7d517 	ldw	r2,-24748(gp)
 200f148:	e0bffe15 	stw	r2,-8(fp)
			}
			taskEXIT_CRITICAL();
 200f14c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f150:	10000126 	beq	r2,zero,200f158 <eTaskGetState+0x64>
 200f154:	2010e300 	call	2010e30 <vTaskExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 200f158:	e0fffc17 	ldw	r3,-16(fp)
 200f15c:	e0bffd17 	ldw	r2,-12(fp)
 200f160:	18800326 	beq	r3,r2,200f170 <eTaskGetState+0x7c>
 200f164:	e0fffc17 	ldw	r3,-16(fp)
 200f168:	e0bffe17 	ldw	r2,-8(fp)
 200f16c:	1880031e 	bne	r3,r2,200f17c <eTaskGetState+0x88>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 200f170:	00800084 	movi	r2,2
 200f174:	e0bffa15 	stw	r2,-24(fp)
 200f178:	00002006 	br	200f1fc <eTaskGetState+0x108>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 200f17c:	e0fffc17 	ldw	r3,-16(fp)
 200f180:	00808134 	movhi	r2,516
 200f184:	109e3f04 	addi	r2,r2,30972
 200f188:	1880111e 	bne	r3,r2,200f1d0 <eTaskGetState+0xdc>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 200f18c:	e0bffb17 	ldw	r2,-20(fp)
 200f190:	10800a17 	ldw	r2,40(r2)
 200f194:	10000b1e 	bne	r2,zero,200f1c4 <eTaskGetState+0xd0>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 200f198:	e0bffb17 	ldw	r2,-20(fp)
 200f19c:	10801d03 	ldbu	r2,116(r2)
 200f1a0:	10803fcc 	andi	r2,r2,255
 200f1a4:	10800058 	cmpnei	r2,r2,1
 200f1a8:	1000031e 	bne	r2,zero,200f1b8 <eTaskGetState+0xc4>
							{
								eReturn = eBlocked;
 200f1ac:	00800084 	movi	r2,2
 200f1b0:	e0bffa15 	stw	r2,-24(fp)
 200f1b4:	00001106 	br	200f1fc <eTaskGetState+0x108>
							}
							else
							{
								eReturn = eSuspended;
 200f1b8:	008000c4 	movi	r2,3
 200f1bc:	e0bffa15 	stw	r2,-24(fp)
 200f1c0:	00000e06 	br	200f1fc <eTaskGetState+0x108>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 200f1c4:	00800084 	movi	r2,2
 200f1c8:	e0bffa15 	stw	r2,-24(fp)
 200f1cc:	00000b06 	br	200f1fc <eTaskGetState+0x108>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 200f1d0:	e0fffc17 	ldw	r3,-16(fp)
 200f1d4:	00808134 	movhi	r2,516
 200f1d8:	109e3a04 	addi	r2,r2,30952
 200f1dc:	18800226 	beq	r3,r2,200f1e8 <eTaskGetState+0xf4>
 200f1e0:	e0bffc17 	ldw	r2,-16(fp)
 200f1e4:	1000031e 	bne	r2,zero,200f1f4 <eTaskGetState+0x100>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 200f1e8:	00800104 	movi	r2,4
 200f1ec:	e0bffa15 	stw	r2,-24(fp)
 200f1f0:	00000206 	br	200f1fc <eTaskGetState+0x108>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 200f1f4:	00800044 	movi	r2,1
 200f1f8:	e0bffa15 	stw	r2,-24(fp)
			}
		}

		return eReturn;
 200f1fc:	e0bffa17 	ldw	r2,-24(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 200f200:	e037883a 	mov	sp,fp
 200f204:	dfc00117 	ldw	ra,4(sp)
 200f208:	df000017 	ldw	fp,0(sp)
 200f20c:	dec00204 	addi	sp,sp,8
 200f210:	f800283a 	ret

0200f214 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 200f214:	defffb04 	addi	sp,sp,-20
 200f218:	dfc00415 	stw	ra,16(sp)
 200f21c:	df000315 	stw	fp,12(sp)
 200f220:	df000304 	addi	fp,sp,12
 200f224:	e13fff15 	stw	r4,-4(fp)
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 200f228:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f22c:	10000126 	beq	r2,zero,200f234 <uxTaskPriorityGet+0x20>
 200f230:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 200f234:	e0bfff17 	ldw	r2,-4(fp)
 200f238:	1000021e 	bne	r2,zero,200f244 <uxTaskPriorityGet+0x30>
 200f23c:	d0a7d317 	ldw	r2,-24756(gp)
 200f240:	00000106 	br	200f248 <uxTaskPriorityGet+0x34>
 200f244:	e0bfff17 	ldw	r2,-4(fp)
 200f248:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 200f24c:	e0bffd17 	ldw	r2,-12(fp)
 200f250:	10800b17 	ldw	r2,44(r2)
 200f254:	e0bffe15 	stw	r2,-8(fp)
		}
		taskEXIT_CRITICAL();
 200f258:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f25c:	10000126 	beq	r2,zero,200f264 <uxTaskPriorityGet+0x50>
 200f260:	2010e300 	call	2010e30 <vTaskExitCritical>

		return uxReturn;
 200f264:	e0bffe17 	ldw	r2,-8(fp)
	}
 200f268:	e037883a 	mov	sp,fp
 200f26c:	dfc00117 	ldw	ra,4(sp)
 200f270:	df000017 	ldw	fp,0(sp)
 200f274:	dec00204 	addi	sp,sp,8
 200f278:	f800283a 	ret

0200f27c <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 200f27c:	defffb04 	addi	sp,sp,-20
 200f280:	df000415 	stw	fp,16(sp)
 200f284:	df000404 	addi	fp,sp,16
 200f288:	e13fff15 	stw	r4,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 200f28c:	e03ffc15 	stw	zero,-16(fp)
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 200f290:	e0bfff17 	ldw	r2,-4(fp)
 200f294:	1000021e 	bne	r2,zero,200f2a0 <uxTaskPriorityGetFromISR+0x24>
 200f298:	d0a7d317 	ldw	r2,-24756(gp)
 200f29c:	00000106 	br	200f2a4 <uxTaskPriorityGetFromISR+0x28>
 200f2a0:	e0bfff17 	ldw	r2,-4(fp)
 200f2a4:	e0bffd15 	stw	r2,-12(fp)
			uxReturn = pxTCB->uxPriority;
 200f2a8:	e0bffd17 	ldw	r2,-12(fp)
 200f2ac:	10800b17 	ldw	r2,44(r2)
 200f2b0:	e0bffe15 	stw	r2,-8(fp)
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 200f2b4:	e0bffe17 	ldw	r2,-8(fp)
	}
 200f2b8:	e037883a 	mov	sp,fp
 200f2bc:	df000017 	ldw	fp,0(sp)
 200f2c0:	dec00104 	addi	sp,sp,4
 200f2c4:	f800283a 	ret

0200f2c8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 200f2c8:	defff804 	addi	sp,sp,-32
 200f2cc:	dfc00715 	stw	ra,28(sp)
 200f2d0:	df000615 	stw	fp,24(sp)
 200f2d4:	df000604 	addi	fp,sp,24
 200f2d8:	e13ffe15 	stw	r4,-8(fp)
 200f2dc:	e17fff15 	stw	r5,-4(fp)
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 200f2e0:	e03ffa15 	stw	zero,-24(fp)

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 200f2e4:	e0bfff17 	ldw	r2,-4(fp)
 200f2e8:	10800170 	cmpltui	r2,r2,5
 200f2ec:	1000021e 	bne	r2,zero,200f2f8 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 200f2f0:	00800104 	movi	r2,4
 200f2f4:	e0bfff15 	stw	r2,-4(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 200f2f8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f2fc:	10000126 	beq	r2,zero,200f304 <vTaskPrioritySet+0x3c>
 200f300:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 200f304:	e0bffe17 	ldw	r2,-8(fp)
 200f308:	1000021e 	bne	r2,zero,200f314 <vTaskPrioritySet+0x4c>
 200f30c:	d0a7d317 	ldw	r2,-24756(gp)
 200f310:	00000106 	br	200f318 <vTaskPrioritySet+0x50>
 200f314:	e0bffe17 	ldw	r2,-8(fp)
 200f318:	e0bffb15 	stw	r2,-20(fp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 200f31c:	e0bffb17 	ldw	r2,-20(fp)
 200f320:	10801a17 	ldw	r2,104(r2)
 200f324:	e0bffc15 	stw	r2,-16(fp)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 200f328:	e0fffc17 	ldw	r3,-16(fp)
 200f32c:	e0bfff17 	ldw	r2,-4(fp)
 200f330:	18804926 	beq	r3,r2,200f458 <vTaskPrioritySet+0x190>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 200f334:	e0bfff17 	ldw	r2,-4(fp)
 200f338:	e0fffc17 	ldw	r3,-16(fp)
 200f33c:	18800a2e 	bgeu	r3,r2,200f368 <vTaskPrioritySet+0xa0>
				{
					if( pxTCB != pxCurrentTCB )
 200f340:	d0a7d317 	ldw	r2,-24756(gp)
 200f344:	e0fffb17 	ldw	r3,-20(fp)
 200f348:	18800c26 	beq	r3,r2,200f37c <vTaskPrioritySet+0xb4>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 200f34c:	d0a7d317 	ldw	r2,-24756(gp)
 200f350:	10800b17 	ldw	r2,44(r2)
 200f354:	e0ffff17 	ldw	r3,-4(fp)
 200f358:	18800836 	bltu	r3,r2,200f37c <vTaskPrioritySet+0xb4>
						{
							xYieldRequired = pdTRUE;
 200f35c:	00800044 	movi	r2,1
 200f360:	e0bffa15 	stw	r2,-24(fp)
 200f364:	00000506 	br	200f37c <vTaskPrioritySet+0xb4>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 200f368:	d0a7d317 	ldw	r2,-24756(gp)
 200f36c:	e0fffb17 	ldw	r3,-20(fp)
 200f370:	1880021e 	bne	r3,r2,200f37c <vTaskPrioritySet+0xb4>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 200f374:	00800044 	movi	r2,1
 200f378:	e0bffa15 	stw	r2,-24(fp)
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 200f37c:	e0bffb17 	ldw	r2,-20(fp)
 200f380:	10800b17 	ldw	r2,44(r2)
 200f384:	e0bffd15 	stw	r2,-12(fp)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 200f388:	e0bffb17 	ldw	r2,-20(fp)
 200f38c:	10c01a17 	ldw	r3,104(r2)
 200f390:	e0bffb17 	ldw	r2,-20(fp)
 200f394:	10800b17 	ldw	r2,44(r2)
 200f398:	1880031e 	bne	r3,r2,200f3a8 <vTaskPrioritySet+0xe0>
					{
						pxTCB->uxPriority = uxNewPriority;
 200f39c:	e0bffb17 	ldw	r2,-20(fp)
 200f3a0:	e0ffff17 	ldw	r3,-4(fp)
 200f3a4:	10c00b15 	stw	r3,44(r2)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 200f3a8:	e0bffb17 	ldw	r2,-20(fp)
 200f3ac:	e0ffff17 	ldw	r3,-4(fp)
 200f3b0:	10c01a15 	stw	r3,104(r2)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 200f3b4:	e0bffb17 	ldw	r2,-20(fp)
 200f3b8:	10800617 	ldw	r2,24(r2)
 200f3bc:	10000516 	blt	r2,zero,200f3d4 <vTaskPrioritySet+0x10c>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 200f3c0:	00c00144 	movi	r3,5
 200f3c4:	e0bfff17 	ldw	r2,-4(fp)
 200f3c8:	1887c83a 	sub	r3,r3,r2
 200f3cc:	e0bffb17 	ldw	r2,-20(fp)
 200f3d0:	10c00615 	stw	r3,24(r2)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 200f3d4:	e0bffb17 	ldw	r2,-20(fp)
 200f3d8:	10c00517 	ldw	r3,20(r2)
 200f3dc:	e0bffd17 	ldw	r2,-12(fp)
 200f3e0:	11000524 	muli	r4,r2,20
 200f3e4:	00808134 	movhi	r2,516
 200f3e8:	109e1204 	addi	r2,r2,30792
 200f3ec:	2085883a 	add	r2,r4,r2
 200f3f0:	1880161e 	bne	r3,r2,200f44c <vTaskPrioritySet+0x184>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 200f3f4:	e0bffb17 	ldw	r2,-20(fp)
 200f3f8:	10800104 	addi	r2,r2,4
 200f3fc:	1009883a 	mov	r4,r2
 200f400:	2026d940 	call	2026d94 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 200f404:	e0bffb17 	ldw	r2,-20(fp)
 200f408:	10800b17 	ldw	r2,44(r2)
 200f40c:	d0e7d917 	ldw	r3,-24732(gp)
 200f410:	1880032e 	bgeu	r3,r2,200f420 <vTaskPrioritySet+0x158>
 200f414:	e0bffb17 	ldw	r2,-20(fp)
 200f418:	10800b17 	ldw	r2,44(r2)
 200f41c:	d0a7d915 	stw	r2,-24732(gp)
 200f420:	e0bffb17 	ldw	r2,-20(fp)
 200f424:	10800b17 	ldw	r2,44(r2)
 200f428:	10c00524 	muli	r3,r2,20
 200f42c:	00808134 	movhi	r2,516
 200f430:	109e1204 	addi	r2,r2,30792
 200f434:	1887883a 	add	r3,r3,r2
 200f438:	e0bffb17 	ldw	r2,-20(fp)
 200f43c:	10800104 	addi	r2,r2,4
 200f440:	100b883a 	mov	r5,r2
 200f444:	1809883a 	mov	r4,r3
 200f448:	2026c300 	call	2026c30 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 200f44c:	e0bffa17 	ldw	r2,-24(fp)
 200f450:	10000126 	beq	r2,zero,200f458 <vTaskPrioritySet+0x190>
				{
					taskYIELD_IF_USING_PREEMPTION();
 200f454:	003b683a 	trap	0
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 200f458:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f45c:	10000126 	beq	r2,zero,200f464 <vTaskPrioritySet+0x19c>
 200f460:	2010e300 	call	2010e30 <vTaskExitCritical>
	}
 200f464:	0001883a 	nop
 200f468:	e037883a 	mov	sp,fp
 200f46c:	dfc00117 	ldw	ra,4(sp)
 200f470:	df000017 	ldw	fp,0(sp)
 200f474:	dec00204 	addi	sp,sp,8
 200f478:	f800283a 	ret

0200f47c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 200f47c:	defffc04 	addi	sp,sp,-16
 200f480:	dfc00315 	stw	ra,12(sp)
 200f484:	df000215 	stw	fp,8(sp)
 200f488:	df000204 	addi	fp,sp,8
 200f48c:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 200f490:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f494:	10000126 	beq	r2,zero,200f49c <vTaskSuspend+0x20>
 200f498:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 200f49c:	e0bfff17 	ldw	r2,-4(fp)
 200f4a0:	1000021e 	bne	r2,zero,200f4ac <vTaskSuspend+0x30>
 200f4a4:	d0a7d317 	ldw	r2,-24756(gp)
 200f4a8:	00000106 	br	200f4b0 <vTaskSuspend+0x34>
 200f4ac:	e0bfff17 	ldw	r2,-4(fp)
 200f4b0:	e0bffe15 	stw	r2,-8(fp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 200f4b4:	e0bffe17 	ldw	r2,-8(fp)
 200f4b8:	10800104 	addi	r2,r2,4
 200f4bc:	1009883a 	mov	r4,r2
 200f4c0:	2026d940 	call	2026d94 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 200f4c4:	e0bffe17 	ldw	r2,-8(fp)
 200f4c8:	10800a17 	ldw	r2,40(r2)
 200f4cc:	10000426 	beq	r2,zero,200f4e0 <vTaskSuspend+0x64>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 200f4d0:	e0bffe17 	ldw	r2,-8(fp)
 200f4d4:	10800604 	addi	r2,r2,24
 200f4d8:	1009883a 	mov	r4,r2
 200f4dc:	2026d940 	call	2026d94 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 200f4e0:	e0bffe17 	ldw	r2,-8(fp)
 200f4e4:	10800104 	addi	r2,r2,4
 200f4e8:	100b883a 	mov	r5,r2
 200f4ec:	01008134 	movhi	r4,516
 200f4f0:	211e3f04 	addi	r4,r4,30972
 200f4f4:	2026c300 	call	2026c30 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 200f4f8:	e0bffe17 	ldw	r2,-8(fp)
 200f4fc:	10801d03 	ldbu	r2,116(r2)
 200f500:	10803fcc 	andi	r2,r2,255
 200f504:	10800058 	cmpnei	r2,r2,1
 200f508:	1000021e 	bne	r2,zero,200f514 <vTaskSuspend+0x98>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 200f50c:	e0bffe17 	ldw	r2,-8(fp)
 200f510:	10001d05 	stb	zero,116(r2)
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 200f514:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f518:	10000126 	beq	r2,zero,200f520 <vTaskSuspend+0xa4>
 200f51c:	2010e300 	call	2010e30 <vTaskExitCritical>

		if( xSchedulerRunning != pdFALSE )
 200f520:	d0a7da17 	ldw	r2,-24728(gp)
 200f524:	10000726 	beq	r2,zero,200f544 <vTaskSuspend+0xc8>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 200f528:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f52c:	10000126 	beq	r2,zero,200f534 <vTaskSuspend+0xb8>
 200f530:	2010de80 	call	2010de8 <vTaskEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 200f534:	20109a40 	call	20109a4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 200f538:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f53c:	10000126 	beq	r2,zero,200f544 <vTaskSuspend+0xc8>
 200f540:	2010e300 	call	2010e30 <vTaskExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 200f544:	d0a7d317 	ldw	r2,-24756(gp)
 200f548:	e0fffe17 	ldw	r3,-8(fp)
 200f54c:	18800c1e 	bne	r3,r2,200f580 <vTaskSuspend+0x104>
		{
			if( xSchedulerRunning != pdFALSE )
 200f550:	d0a7da17 	ldw	r2,-24728(gp)
 200f554:	10000226 	beq	r2,zero,200f560 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 200f558:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 200f55c:	00000806 	br	200f580 <vTaskSuspend+0x104>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 200f560:	00808134 	movhi	r2,516
 200f564:	109e3f04 	addi	r2,r2,30972
 200f568:	10c00017 	ldw	r3,0(r2)
 200f56c:	d0a7d717 	ldw	r2,-24740(gp)
 200f570:	1880021e 	bne	r3,r2,200f57c <vTaskSuspend+0x100>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
 200f574:	d027d315 	stw	zero,-24756(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 200f578:	00000106 	br	200f580 <vTaskSuspend+0x104>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
 200f57c:	200fe500 	call	200fe50 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 200f580:	0001883a 	nop
 200f584:	e037883a 	mov	sp,fp
 200f588:	dfc00117 	ldw	ra,4(sp)
 200f58c:	df000017 	ldw	fp,0(sp)
 200f590:	dec00204 	addi	sp,sp,8
 200f594:	f800283a 	ret

0200f598 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 200f598:	defffc04 	addi	sp,sp,-16
 200f59c:	df000315 	stw	fp,12(sp)
 200f5a0:	df000304 	addi	fp,sp,12
 200f5a4:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xReturn = pdFALSE;
 200f5a8:	e03ffd15 	stw	zero,-12(fp)
	const TCB_t * const pxTCB = xTask;
 200f5ac:	e0bfff17 	ldw	r2,-4(fp)
 200f5b0:	e0bffe15 	stw	r2,-8(fp)

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 200f5b4:	e0bffe17 	ldw	r2,-8(fp)
 200f5b8:	10c00517 	ldw	r3,20(r2)
 200f5bc:	00808134 	movhi	r2,516
 200f5c0:	109e3f04 	addi	r2,r2,30972
 200f5c4:	18800a1e 	bne	r3,r2,200f5f0 <prvTaskIsTaskSuspended+0x58>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 200f5c8:	e0bffe17 	ldw	r2,-8(fp)
 200f5cc:	10c00a17 	ldw	r3,40(r2)
 200f5d0:	00808134 	movhi	r2,516
 200f5d4:	109e3504 	addi	r2,r2,30932
 200f5d8:	18800526 	beq	r3,r2,200f5f0 <prvTaskIsTaskSuspended+0x58>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 200f5dc:	e0bffe17 	ldw	r2,-8(fp)
 200f5e0:	10800a17 	ldw	r2,40(r2)
 200f5e4:	1000021e 	bne	r2,zero,200f5f0 <prvTaskIsTaskSuspended+0x58>
				{
					xReturn = pdTRUE;
 200f5e8:	00800044 	movi	r2,1
 200f5ec:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 200f5f0:	e0bffd17 	ldw	r2,-12(fp)
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 200f5f4:	e037883a 	mov	sp,fp
 200f5f8:	df000017 	ldw	fp,0(sp)
 200f5fc:	dec00104 	addi	sp,sp,4
 200f600:	f800283a 	ret

0200f604 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 200f604:	defffc04 	addi	sp,sp,-16
 200f608:	dfc00315 	stw	ra,12(sp)
 200f60c:	df000215 	stw	fp,8(sp)
 200f610:	df000204 	addi	fp,sp,8
 200f614:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = xTaskToResume;
 200f618:	e0bfff17 	ldw	r2,-4(fp)
 200f61c:	e0bffe15 	stw	r2,-8(fp)
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 200f620:	d0a7d317 	ldw	r2,-24756(gp)
 200f624:	e0fffe17 	ldw	r3,-8(fp)
 200f628:	18802726 	beq	r3,r2,200f6c8 <vTaskResume+0xc4>
 200f62c:	e0bffe17 	ldw	r2,-8(fp)
 200f630:	10002526 	beq	r2,zero,200f6c8 <vTaskResume+0xc4>
		{
			taskENTER_CRITICAL();
 200f634:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f638:	10000126 	beq	r2,zero,200f640 <vTaskResume+0x3c>
 200f63c:	2010de80 	call	2010de8 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 200f640:	e13ffe17 	ldw	r4,-8(fp)
 200f644:	200f5980 	call	200f598 <prvTaskIsTaskSuspended>
 200f648:	10001c26 	beq	r2,zero,200f6bc <vTaskResume+0xb8>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 200f64c:	e0bffe17 	ldw	r2,-8(fp)
 200f650:	10800104 	addi	r2,r2,4
 200f654:	1009883a 	mov	r4,r2
 200f658:	2026d940 	call	2026d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 200f65c:	e0bffe17 	ldw	r2,-8(fp)
 200f660:	10800b17 	ldw	r2,44(r2)
 200f664:	d0e7d917 	ldw	r3,-24732(gp)
 200f668:	1880032e 	bgeu	r3,r2,200f678 <vTaskResume+0x74>
 200f66c:	e0bffe17 	ldw	r2,-8(fp)
 200f670:	10800b17 	ldw	r2,44(r2)
 200f674:	d0a7d915 	stw	r2,-24732(gp)
 200f678:	e0bffe17 	ldw	r2,-8(fp)
 200f67c:	10800b17 	ldw	r2,44(r2)
 200f680:	10c00524 	muli	r3,r2,20
 200f684:	00808134 	movhi	r2,516
 200f688:	109e1204 	addi	r2,r2,30792
 200f68c:	1887883a 	add	r3,r3,r2
 200f690:	e0bffe17 	ldw	r2,-8(fp)
 200f694:	10800104 	addi	r2,r2,4
 200f698:	100b883a 	mov	r5,r2
 200f69c:	1809883a 	mov	r4,r3
 200f6a0:	2026c300 	call	2026c30 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 200f6a4:	e0bffe17 	ldw	r2,-8(fp)
 200f6a8:	10c00b17 	ldw	r3,44(r2)
 200f6ac:	d0a7d317 	ldw	r2,-24756(gp)
 200f6b0:	10800b17 	ldw	r2,44(r2)
 200f6b4:	18800136 	bltu	r3,r2,200f6bc <vTaskResume+0xb8>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 200f6b8:	003b683a 	trap	0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 200f6bc:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f6c0:	10000126 	beq	r2,zero,200f6c8 <vTaskResume+0xc4>
 200f6c4:	2010e300 	call	2010e30 <vTaskExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 200f6c8:	0001883a 	nop
 200f6cc:	e037883a 	mov	sp,fp
 200f6d0:	dfc00117 	ldw	ra,4(sp)
 200f6d4:	df000017 	ldw	fp,0(sp)
 200f6d8:	dec00204 	addi	sp,sp,8
 200f6dc:	f800283a 	ret

0200f6e0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 200f6e0:	defffa04 	addi	sp,sp,-24
 200f6e4:	dfc00515 	stw	ra,20(sp)
 200f6e8:	df000415 	stw	fp,16(sp)
 200f6ec:	df000404 	addi	fp,sp,16
 200f6f0:	e13fff15 	stw	r4,-4(fp)
	BaseType_t xYieldRequired = pdFALSE;
 200f6f4:	e03ffc15 	stw	zero,-16(fp)
	TCB_t * const pxTCB = xTaskToResume;
 200f6f8:	e0bfff17 	ldw	r2,-4(fp)
 200f6fc:	e0bffd15 	stw	r2,-12(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 200f700:	e03ffe15 	stw	zero,-8(fp)
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 200f704:	e13ffd17 	ldw	r4,-12(fp)
 200f708:	200f5980 	call	200f598 <prvTaskIsTaskSuspended>
 200f70c:	10002626 	beq	r2,zero,200f7a8 <xTaskResumeFromISR+0xc8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 200f710:	d0a7e117 	ldw	r2,-24700(gp)
 200f714:	10001e1e 	bne	r2,zero,200f790 <xTaskResumeFromISR+0xb0>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 200f718:	e0bffd17 	ldw	r2,-12(fp)
 200f71c:	10c00b17 	ldw	r3,44(r2)
 200f720:	d0a7d317 	ldw	r2,-24756(gp)
 200f724:	10800b17 	ldw	r2,44(r2)
 200f728:	18800236 	bltu	r3,r2,200f734 <xTaskResumeFromISR+0x54>
					{
						xYieldRequired = pdTRUE;
 200f72c:	00800044 	movi	r2,1
 200f730:	e0bffc15 	stw	r2,-16(fp)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 200f734:	e0bffd17 	ldw	r2,-12(fp)
 200f738:	10800104 	addi	r2,r2,4
 200f73c:	1009883a 	mov	r4,r2
 200f740:	2026d940 	call	2026d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 200f744:	e0bffd17 	ldw	r2,-12(fp)
 200f748:	10800b17 	ldw	r2,44(r2)
 200f74c:	d0e7d917 	ldw	r3,-24732(gp)
 200f750:	1880032e 	bgeu	r3,r2,200f760 <xTaskResumeFromISR+0x80>
 200f754:	e0bffd17 	ldw	r2,-12(fp)
 200f758:	10800b17 	ldw	r2,44(r2)
 200f75c:	d0a7d915 	stw	r2,-24732(gp)
 200f760:	e0bffd17 	ldw	r2,-12(fp)
 200f764:	10800b17 	ldw	r2,44(r2)
 200f768:	10c00524 	muli	r3,r2,20
 200f76c:	00808134 	movhi	r2,516
 200f770:	109e1204 	addi	r2,r2,30792
 200f774:	1887883a 	add	r3,r3,r2
 200f778:	e0bffd17 	ldw	r2,-12(fp)
 200f77c:	10800104 	addi	r2,r2,4
 200f780:	100b883a 	mov	r5,r2
 200f784:	1809883a 	mov	r4,r3
 200f788:	2026c300 	call	2026c30 <vListInsertEnd>
 200f78c:	00000606 	br	200f7a8 <xTaskResumeFromISR+0xc8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 200f790:	e0bffd17 	ldw	r2,-12(fp)
 200f794:	10800604 	addi	r2,r2,24
 200f798:	100b883a 	mov	r5,r2
 200f79c:	01008134 	movhi	r4,516
 200f7a0:	211e3504 	addi	r4,r4,30932
 200f7a4:	2026c300 	call	2026c30 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 200f7a8:	e0bffc17 	ldw	r2,-16(fp)
	}
 200f7ac:	e037883a 	mov	sp,fp
 200f7b0:	dfc00117 	ldw	ra,4(sp)
 200f7b4:	df000017 	ldw	fp,0(sp)
 200f7b8:	dec00204 	addi	sp,sp,8
 200f7bc:	f800283a 	ret

0200f7c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 200f7c0:	defffb04 	addi	sp,sp,-20
 200f7c4:	dfc00415 	stw	ra,16(sp)
 200f7c8:	df000315 	stw	fp,12(sp)
 200f7cc:	df000304 	addi	fp,sp,12
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 200f7d0:	d0a7e004 	addi	r2,gp,-24704
 200f7d4:	d8800115 	stw	r2,4(sp)
 200f7d8:	d8000015 	stw	zero,0(sp)
 200f7dc:	000f883a 	mov	r7,zero
 200f7e0:	01840004 	movi	r6,4096
 200f7e4:	01408134 	movhi	r5,516
 200f7e8:	29442504 	addi	r5,r5,4244
 200f7ec:	01008074 	movhi	r4,513
 200f7f0:	21012f04 	addi	r4,r4,1212
 200f7f4:	200ead40 	call	200ead4 <xTaskCreate>
 200f7f8:	e0bfff15 	stw	r2,-4(fp)
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 200f7fc:	e0bfff17 	ldw	r2,-4(fp)
 200f800:	10800058 	cmpnei	r2,r2,1
 200f804:	1000021e 	bne	r2,zero,200f810 <vTaskStartScheduler+0x50>
		{
			xReturn = xTimerCreateTimerTask();
 200f808:	20117a40 	call	20117a4 <xTimerCreateTimerTask>
 200f80c:	e0bfff15 	stw	r2,-4(fp)
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 200f810:	e0bfff17 	ldw	r2,-4(fp)
 200f814:	10800058 	cmpnei	r2,r2,1
 200f818:	1000071e 	bne	r2,zero,200f838 <vTaskStartScheduler+0x78>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 200f81c:	2026e580 	call	2026e58 <enh_alt_irq_disable_all>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 200f820:	00bfffc4 	movi	r2,-1
 200f824:	d0a7df15 	stw	r2,-24708(gp)
		xSchedulerRunning = pdTRUE;
 200f828:	00800044 	movi	r2,1
 200f82c:	d0a7da15 	stw	r2,-24728(gp)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 200f830:	d027d815 	stw	zero,-24736(gp)

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 200f834:	2026fc40 	call	2026fc4 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 200f838:	0001883a 	nop
 200f83c:	e037883a 	mov	sp,fp
 200f840:	dfc00117 	ldw	ra,4(sp)
 200f844:	df000017 	ldw	fp,0(sp)
 200f848:	dec00204 	addi	sp,sp,8
 200f84c:	f800283a 	ret

0200f850 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 200f850:	defffe04 	addi	sp,sp,-8
 200f854:	dfc00115 	stw	ra,4(sp)
 200f858:	df000015 	stw	fp,0(sp)
 200f85c:	d839883a 	mov	fp,sp
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
 200f860:	2026e580 	call	2026e58 <enh_alt_irq_disable_all>
	xSchedulerRunning = pdFALSE;
 200f864:	d027da15 	stw	zero,-24728(gp)
	vPortEndScheduler();
 200f868:	2026ffc0 	call	2026ffc <vPortEndScheduler>
}
 200f86c:	0001883a 	nop
 200f870:	e037883a 	mov	sp,fp
 200f874:	dfc00117 	ldw	ra,4(sp)
 200f878:	df000017 	ldw	fp,0(sp)
 200f87c:	dec00204 	addi	sp,sp,8
 200f880:	f800283a 	ret

0200f884 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 200f884:	deffff04 	addi	sp,sp,-4
 200f888:	df000015 	stw	fp,0(sp)
 200f88c:	d839883a 	mov	fp,sp
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 200f890:	d0a7e117 	ldw	r2,-24700(gp)
 200f894:	10800044 	addi	r2,r2,1
 200f898:	d0a7e115 	stw	r2,-24700(gp)

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 200f89c:	0001883a 	nop
 200f8a0:	e037883a 	mov	sp,fp
 200f8a4:	df000017 	ldw	fp,0(sp)
 200f8a8:	dec00104 	addi	sp,sp,4
 200f8ac:	f800283a 	ret

0200f8b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 200f8b0:	defffb04 	addi	sp,sp,-20
 200f8b4:	dfc00415 	stw	ra,16(sp)
 200f8b8:	df000315 	stw	fp,12(sp)
 200f8bc:	df000304 	addi	fp,sp,12
TCB_t *pxTCB = NULL;
 200f8c0:	e03ffd15 	stw	zero,-12(fp)
BaseType_t xAlreadyYielded = pdFALSE;
 200f8c4:	e03ffe15 	stw	zero,-8(fp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 200f8c8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f8cc:	10000126 	beq	r2,zero,200f8d4 <xTaskResumeAll+0x24>
 200f8d0:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
 200f8d4:	d0a7e117 	ldw	r2,-24700(gp)
 200f8d8:	10bfffc4 	addi	r2,r2,-1
 200f8dc:	d0a7e115 	stw	r2,-24700(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 200f8e0:	d0a7e117 	ldw	r2,-24700(gp)
 200f8e4:	1000431e 	bne	r2,zero,200f9f4 <xTaskResumeAll+0x144>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 200f8e8:	d0a7d717 	ldw	r2,-24740(gp)
 200f8ec:	10004126 	beq	r2,zero,200f9f4 <xTaskResumeAll+0x144>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 200f8f0:	00002606 	br	200f98c <xTaskResumeAll+0xdc>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 200f8f4:	00808134 	movhi	r2,516
 200f8f8:	109e3504 	addi	r2,r2,30932
 200f8fc:	10800317 	ldw	r2,12(r2)
 200f900:	10800317 	ldw	r2,12(r2)
 200f904:	e0bffd15 	stw	r2,-12(fp)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 200f908:	e0bffd17 	ldw	r2,-12(fp)
 200f90c:	10800604 	addi	r2,r2,24
 200f910:	1009883a 	mov	r4,r2
 200f914:	2026d940 	call	2026d94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 200f918:	e0bffd17 	ldw	r2,-12(fp)
 200f91c:	10800104 	addi	r2,r2,4
 200f920:	1009883a 	mov	r4,r2
 200f924:	2026d940 	call	2026d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 200f928:	e0bffd17 	ldw	r2,-12(fp)
 200f92c:	10800b17 	ldw	r2,44(r2)
 200f930:	d0e7d917 	ldw	r3,-24732(gp)
 200f934:	1880032e 	bgeu	r3,r2,200f944 <xTaskResumeAll+0x94>
 200f938:	e0bffd17 	ldw	r2,-12(fp)
 200f93c:	10800b17 	ldw	r2,44(r2)
 200f940:	d0a7d915 	stw	r2,-24732(gp)
 200f944:	e0bffd17 	ldw	r2,-12(fp)
 200f948:	10800b17 	ldw	r2,44(r2)
 200f94c:	10c00524 	muli	r3,r2,20
 200f950:	00808134 	movhi	r2,516
 200f954:	109e1204 	addi	r2,r2,30792
 200f958:	1887883a 	add	r3,r3,r2
 200f95c:	e0bffd17 	ldw	r2,-12(fp)
 200f960:	10800104 	addi	r2,r2,4
 200f964:	100b883a 	mov	r5,r2
 200f968:	1809883a 	mov	r4,r3
 200f96c:	2026c300 	call	2026c30 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 200f970:	e0bffd17 	ldw	r2,-12(fp)
 200f974:	10c00b17 	ldw	r3,44(r2)
 200f978:	d0a7d317 	ldw	r2,-24756(gp)
 200f97c:	10800b17 	ldw	r2,44(r2)
 200f980:	18800236 	bltu	r3,r2,200f98c <xTaskResumeAll+0xdc>
					{
						xYieldPending = pdTRUE;
 200f984:	00800044 	movi	r2,1
 200f988:	d0a7dc15 	stw	r2,-24720(gp)
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 200f98c:	00808134 	movhi	r2,516
 200f990:	109e3504 	addi	r2,r2,30932
 200f994:	10800017 	ldw	r2,0(r2)
 200f998:	103fd61e 	bne	r2,zero,200f8f4 <__alt_mem_mem_0+0xfcfef8f4>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 200f99c:	e0bffd17 	ldw	r2,-12(fp)
 200f9a0:	10000126 	beq	r2,zero,200f9a8 <xTaskResumeAll+0xf8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 200f9a4:	20109a40 	call	20109a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 200f9a8:	d0a7db17 	ldw	r2,-24724(gp)
 200f9ac:	e0bfff15 	stw	r2,-4(fp)

					if( xPendedCounts > ( TickType_t ) 0U )
 200f9b0:	e0bfff17 	ldw	r2,-4(fp)
 200f9b4:	10000a26 	beq	r2,zero,200f9e0 <xTaskResumeAll+0x130>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 200f9b8:	200fca00 	call	200fca0 <xTaskIncrementTick>
 200f9bc:	10000226 	beq	r2,zero,200f9c8 <xTaskResumeAll+0x118>
							{
								xYieldPending = pdTRUE;
 200f9c0:	00800044 	movi	r2,1
 200f9c4:	d0a7dc15 	stw	r2,-24720(gp)
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 200f9c8:	e0bfff17 	ldw	r2,-4(fp)
 200f9cc:	10bfffc4 	addi	r2,r2,-1
 200f9d0:	e0bfff15 	stw	r2,-4(fp)
						} while( xPendedCounts > ( TickType_t ) 0U );
 200f9d4:	e0bfff17 	ldw	r2,-4(fp)
 200f9d8:	103ff71e 	bne	r2,zero,200f9b8 <__alt_mem_mem_0+0xfcfef9b8>

						xPendedTicks = 0;
 200f9dc:	d027db15 	stw	zero,-24724(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 200f9e0:	d0a7dc17 	ldw	r2,-24720(gp)
 200f9e4:	10000326 	beq	r2,zero,200f9f4 <xTaskResumeAll+0x144>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 200f9e8:	00800044 	movi	r2,1
 200f9ec:	e0bffe15 	stw	r2,-8(fp)
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 200f9f0:	003b683a 	trap	0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 200f9f4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 200f9f8:	10000126 	beq	r2,zero,200fa00 <xTaskResumeAll+0x150>
 200f9fc:	2010e300 	call	2010e30 <vTaskExitCritical>

	return xAlreadyYielded;
 200fa00:	e0bffe17 	ldw	r2,-8(fp)
}
 200fa04:	e037883a 	mov	sp,fp
 200fa08:	dfc00117 	ldw	ra,4(sp)
 200fa0c:	df000017 	ldw	fp,0(sp)
 200fa10:	dec00204 	addi	sp,sp,8
 200fa14:	f800283a 	ret

0200fa18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 200fa18:	defffe04 	addi	sp,sp,-8
 200fa1c:	df000115 	stw	fp,4(sp)
 200fa20:	df000104 	addi	fp,sp,4
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 200fa24:	d0a7d817 	ldw	r2,-24736(gp)
 200fa28:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 200fa2c:	e0bfff17 	ldw	r2,-4(fp)
}
 200fa30:	e037883a 	mov	sp,fp
 200fa34:	df000017 	ldw	fp,0(sp)
 200fa38:	dec00104 	addi	sp,sp,4
 200fa3c:	f800283a 	ret

0200fa40 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 200fa40:	defffd04 	addi	sp,sp,-12
 200fa44:	df000215 	stw	fp,8(sp)
 200fa48:	df000204 	addi	fp,sp,8
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 200fa4c:	e03ffe15 	stw	zero,-8(fp)
	{
		xReturn = xTickCount;
 200fa50:	d0a7d817 	ldw	r2,-24736(gp)
 200fa54:	e0bfff15 	stw	r2,-4(fp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 200fa58:	e0bfff17 	ldw	r2,-4(fp)
}
 200fa5c:	e037883a 	mov	sp,fp
 200fa60:	df000017 	ldw	fp,0(sp)
 200fa64:	dec00104 	addi	sp,sp,4
 200fa68:	f800283a 	ret

0200fa6c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 200fa6c:	deffff04 	addi	sp,sp,-4
 200fa70:	df000015 	stw	fp,0(sp)
 200fa74:	d839883a 	mov	fp,sp
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 200fa78:	d0a7d717 	ldw	r2,-24740(gp)
}
 200fa7c:	e037883a 	mov	sp,fp
 200fa80:	df000017 	ldw	fp,0(sp)
 200fa84:	dec00104 	addi	sp,sp,4
 200fa88:	f800283a 	ret

0200fa8c <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 200fa8c:	defffd04 	addi	sp,sp,-12
 200fa90:	df000215 	stw	fp,8(sp)
 200fa94:	df000204 	addi	fp,sp,8
 200fa98:	e13fff15 	stw	r4,-4(fp)
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 200fa9c:	e0bfff17 	ldw	r2,-4(fp)
 200faa0:	1000021e 	bne	r2,zero,200faac <pcTaskGetName+0x20>
 200faa4:	d0a7d317 	ldw	r2,-24756(gp)
 200faa8:	00000106 	br	200fab0 <pcTaskGetName+0x24>
 200faac:	e0bfff17 	ldw	r2,-4(fp)
 200fab0:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
 200fab4:	e0bffe17 	ldw	r2,-8(fp)
 200fab8:	10800d04 	addi	r2,r2,52
}
 200fabc:	e037883a 	mov	sp,fp
 200fac0:	df000017 	ldw	fp,0(sp)
 200fac4:	dec00104 	addi	sp,sp,4
 200fac8:	f800283a 	ret

0200facc <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 200facc:	defff904 	addi	sp,sp,-28
 200fad0:	dfc00615 	stw	ra,24(sp)
 200fad4:	df000515 	stw	fp,20(sp)
 200fad8:	df000504 	addi	fp,sp,20
 200fadc:	e13ffd15 	stw	r4,-12(fp)
 200fae0:	e17ffe15 	stw	r5,-8(fp)
 200fae4:	e1bfff15 	stw	r6,-4(fp)
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 200fae8:	e03ffb15 	stw	zero,-20(fp)
 200faec:	00800144 	movi	r2,5
 200faf0:	e0bffc15 	stw	r2,-16(fp)

		vTaskSuspendAll();
 200faf4:	200f8840 	call	200f884 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 200faf8:	d0a7d717 	ldw	r2,-24740(gp)
 200fafc:	e0fffe17 	ldw	r3,-8(fp)
 200fb00:	18804d36 	bltu	r3,r2,200fc38 <uxTaskGetSystemState+0x16c>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 200fb04:	e0bffc17 	ldw	r2,-16(fp)
 200fb08:	10bfffc4 	addi	r2,r2,-1
 200fb0c:	e0bffc15 	stw	r2,-16(fp)
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 200fb10:	e0bffb17 	ldw	r2,-20(fp)
 200fb14:	10800924 	muli	r2,r2,36
 200fb18:	e0fffd17 	ldw	r3,-12(fp)
 200fb1c:	1889883a 	add	r4,r3,r2
 200fb20:	e0bffc17 	ldw	r2,-16(fp)
 200fb24:	10c00524 	muli	r3,r2,20
 200fb28:	00808134 	movhi	r2,516
 200fb2c:	109e1204 	addi	r2,r2,30792
 200fb30:	1885883a 	add	r2,r3,r2
 200fb34:	01800044 	movi	r6,1
 200fb38:	100b883a 	mov	r5,r2
 200fb3c:	20107780 	call	2010778 <prvListTasksWithinSingleList>
 200fb40:	1007883a 	mov	r3,r2
 200fb44:	e0bffb17 	ldw	r2,-20(fp)
 200fb48:	10c5883a 	add	r2,r2,r3
 200fb4c:	e0bffb15 	stw	r2,-20(fp)

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 200fb50:	e0bffc17 	ldw	r2,-16(fp)
 200fb54:	103feb1e 	bne	r2,zero,200fb04 <__alt_mem_mem_0+0xfcfefb04>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 200fb58:	e0bffb17 	ldw	r2,-20(fp)
 200fb5c:	10800924 	muli	r2,r2,36
 200fb60:	e0fffd17 	ldw	r3,-12(fp)
 200fb64:	1885883a 	add	r2,r3,r2
 200fb68:	d0e7d417 	ldw	r3,-24752(gp)
 200fb6c:	01800084 	movi	r6,2
 200fb70:	180b883a 	mov	r5,r3
 200fb74:	1009883a 	mov	r4,r2
 200fb78:	20107780 	call	2010778 <prvListTasksWithinSingleList>
 200fb7c:	1007883a 	mov	r3,r2
 200fb80:	e0bffb17 	ldw	r2,-20(fp)
 200fb84:	10c5883a 	add	r2,r2,r3
 200fb88:	e0bffb15 	stw	r2,-20(fp)
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 200fb8c:	e0bffb17 	ldw	r2,-20(fp)
 200fb90:	10800924 	muli	r2,r2,36
 200fb94:	e0fffd17 	ldw	r3,-12(fp)
 200fb98:	1885883a 	add	r2,r3,r2
 200fb9c:	d0e7d517 	ldw	r3,-24748(gp)
 200fba0:	01800084 	movi	r6,2
 200fba4:	180b883a 	mov	r5,r3
 200fba8:	1009883a 	mov	r4,r2
 200fbac:	20107780 	call	2010778 <prvListTasksWithinSingleList>
 200fbb0:	1007883a 	mov	r3,r2
 200fbb4:	e0bffb17 	ldw	r2,-20(fp)
 200fbb8:	10c5883a 	add	r2,r2,r3
 200fbbc:	e0bffb15 	stw	r2,-20(fp)

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 200fbc0:	e0bffb17 	ldw	r2,-20(fp)
 200fbc4:	10800924 	muli	r2,r2,36
 200fbc8:	e0fffd17 	ldw	r3,-12(fp)
 200fbcc:	1885883a 	add	r2,r3,r2
 200fbd0:	01800104 	movi	r6,4
 200fbd4:	01408134 	movhi	r5,516
 200fbd8:	295e3a04 	addi	r5,r5,30952
 200fbdc:	1009883a 	mov	r4,r2
 200fbe0:	20107780 	call	2010778 <prvListTasksWithinSingleList>
 200fbe4:	1007883a 	mov	r3,r2
 200fbe8:	e0bffb17 	ldw	r2,-20(fp)
 200fbec:	10c5883a 	add	r2,r2,r3
 200fbf0:	e0bffb15 	stw	r2,-20(fp)

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 200fbf4:	e0bffb17 	ldw	r2,-20(fp)
 200fbf8:	10800924 	muli	r2,r2,36
 200fbfc:	e0fffd17 	ldw	r3,-12(fp)
 200fc00:	1885883a 	add	r2,r3,r2
 200fc04:	018000c4 	movi	r6,3
 200fc08:	01408134 	movhi	r5,516
 200fc0c:	295e3f04 	addi	r5,r5,30972
 200fc10:	1009883a 	mov	r4,r2
 200fc14:	20107780 	call	2010778 <prvListTasksWithinSingleList>
 200fc18:	1007883a 	mov	r3,r2
 200fc1c:	e0bffb17 	ldw	r2,-20(fp)
 200fc20:	10c5883a 	add	r2,r2,r3
 200fc24:	e0bffb15 	stw	r2,-20(fp)
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 200fc28:	e0bfff17 	ldw	r2,-4(fp)
 200fc2c:	10000226 	beq	r2,zero,200fc38 <uxTaskGetSystemState+0x16c>
					{
						*pulTotalRunTime = 0;
 200fc30:	e0bfff17 	ldw	r2,-4(fp)
 200fc34:	10000015 	stw	zero,0(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 200fc38:	200f8b00 	call	200f8b0 <xTaskResumeAll>

		return uxTask;
 200fc3c:	e0bffb17 	ldw	r2,-20(fp)
	}
 200fc40:	e037883a 	mov	sp,fp
 200fc44:	dfc00117 	ldw	ra,4(sp)
 200fc48:	df000017 	ldw	fp,0(sp)
 200fc4c:	dec00204 	addi	sp,sp,8
 200fc50:	f800283a 	ret

0200fc54 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
 200fc54:	defffc04 	addi	sp,sp,-16
 200fc58:	dfc00315 	stw	ra,12(sp)
 200fc5c:	df000215 	stw	fp,8(sp)
 200fc60:	df000204 	addi	fp,sp,8
 200fc64:	e13fff15 	stw	r4,-4(fp)
BaseType_t xYieldRequired = pdFALSE;
 200fc68:	e03ffe15 	stw	zero,-8(fp)
	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
	configASSERT( uxSchedulerSuspended == 0 );

	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
	vTaskSuspendAll();
 200fc6c:	200f8840 	call	200f884 <vTaskSuspendAll>
	xPendedTicks += xTicksToCatchUp;
 200fc70:	d0e7db17 	ldw	r3,-24724(gp)
 200fc74:	e0bfff17 	ldw	r2,-4(fp)
 200fc78:	1885883a 	add	r2,r3,r2
 200fc7c:	d0a7db15 	stw	r2,-24724(gp)
	xYieldRequired = xTaskResumeAll();
 200fc80:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 200fc84:	e0bffe15 	stw	r2,-8(fp)

	return xYieldRequired;
 200fc88:	e0bffe17 	ldw	r2,-8(fp)
}
 200fc8c:	e037883a 	mov	sp,fp
 200fc90:	dfc00117 	ldw	ra,4(sp)
 200fc94:	df000017 	ldw	fp,0(sp)
 200fc98:	dec00204 	addi	sp,sp,8
 200fc9c:	f800283a 	ret

0200fca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 200fca0:	defff904 	addi	sp,sp,-28
 200fca4:	dfc00615 	stw	ra,24(sp)
 200fca8:	df000515 	stw	fp,20(sp)
 200fcac:	df000504 	addi	fp,sp,20
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 200fcb0:	e03ffb15 	stw	zero,-20(fp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 200fcb4:	d0a7e117 	ldw	r2,-24700(gp)
 200fcb8:	10005c1e 	bne	r2,zero,200fe2c <xTaskIncrementTick+0x18c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 200fcbc:	d0a7d817 	ldw	r2,-24736(gp)
 200fcc0:	10800044 	addi	r2,r2,1
 200fcc4:	e0bffc15 	stw	r2,-16(fp)

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 200fcc8:	e0bffc17 	ldw	r2,-16(fp)
 200fccc:	d0a7d815 	stw	r2,-24736(gp)

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 200fcd0:	e0bffc17 	ldw	r2,-16(fp)
 200fcd4:	10000a1e 	bne	r2,zero,200fd00 <xTaskIncrementTick+0x60>
		{
			taskSWITCH_DELAYED_LISTS();
 200fcd8:	d0a7d417 	ldw	r2,-24752(gp)
 200fcdc:	e0bffd15 	stw	r2,-12(fp)
 200fce0:	d0a7d517 	ldw	r2,-24748(gp)
 200fce4:	d0a7d415 	stw	r2,-24752(gp)
 200fce8:	e0bffd17 	ldw	r2,-12(fp)
 200fcec:	d0a7d515 	stw	r2,-24748(gp)
 200fcf0:	d0a7dd17 	ldw	r2,-24716(gp)
 200fcf4:	10800044 	addi	r2,r2,1
 200fcf8:	d0a7dd15 	stw	r2,-24716(gp)
 200fcfc:	20109a40 	call	20109a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 200fd00:	d0a7df17 	ldw	r2,-24708(gp)
 200fd04:	e0fffc17 	ldw	r3,-16(fp)
 200fd08:	18803836 	bltu	r3,r2,200fdec <xTaskIncrementTick+0x14c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 200fd0c:	d0a7d417 	ldw	r2,-24752(gp)
 200fd10:	10800017 	ldw	r2,0(r2)
 200fd14:	1000031e 	bne	r2,zero,200fd24 <xTaskIncrementTick+0x84>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 200fd18:	00bfffc4 	movi	r2,-1
 200fd1c:	d0a7df15 	stw	r2,-24708(gp)
					break;
 200fd20:	00003206 	br	200fdec <xTaskIncrementTick+0x14c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 200fd24:	d0a7d417 	ldw	r2,-24752(gp)
 200fd28:	10800317 	ldw	r2,12(r2)
 200fd2c:	10800317 	ldw	r2,12(r2)
 200fd30:	e0bffe15 	stw	r2,-8(fp)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 200fd34:	e0bffe17 	ldw	r2,-8(fp)
 200fd38:	10800117 	ldw	r2,4(r2)
 200fd3c:	e0bfff15 	stw	r2,-4(fp)

					if( xConstTickCount < xItemValue )
 200fd40:	e0fffc17 	ldw	r3,-16(fp)
 200fd44:	e0bfff17 	ldw	r2,-4(fp)
 200fd48:	1880032e 	bgeu	r3,r2,200fd58 <xTaskIncrementTick+0xb8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 200fd4c:	e0bfff17 	ldw	r2,-4(fp)
 200fd50:	d0a7df15 	stw	r2,-24708(gp)
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 200fd54:	00002506 	br	200fdec <xTaskIncrementTick+0x14c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 200fd58:	e0bffe17 	ldw	r2,-8(fp)
 200fd5c:	10800104 	addi	r2,r2,4
 200fd60:	1009883a 	mov	r4,r2
 200fd64:	2026d940 	call	2026d94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 200fd68:	e0bffe17 	ldw	r2,-8(fp)
 200fd6c:	10800a17 	ldw	r2,40(r2)
 200fd70:	10000426 	beq	r2,zero,200fd84 <xTaskIncrementTick+0xe4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 200fd74:	e0bffe17 	ldw	r2,-8(fp)
 200fd78:	10800604 	addi	r2,r2,24
 200fd7c:	1009883a 	mov	r4,r2
 200fd80:	2026d940 	call	2026d94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 200fd84:	e0bffe17 	ldw	r2,-8(fp)
 200fd88:	10800b17 	ldw	r2,44(r2)
 200fd8c:	d0e7d917 	ldw	r3,-24732(gp)
 200fd90:	1880032e 	bgeu	r3,r2,200fda0 <xTaskIncrementTick+0x100>
 200fd94:	e0bffe17 	ldw	r2,-8(fp)
 200fd98:	10800b17 	ldw	r2,44(r2)
 200fd9c:	d0a7d915 	stw	r2,-24732(gp)
 200fda0:	e0bffe17 	ldw	r2,-8(fp)
 200fda4:	10800b17 	ldw	r2,44(r2)
 200fda8:	10c00524 	muli	r3,r2,20
 200fdac:	00808134 	movhi	r2,516
 200fdb0:	109e1204 	addi	r2,r2,30792
 200fdb4:	1887883a 	add	r3,r3,r2
 200fdb8:	e0bffe17 	ldw	r2,-8(fp)
 200fdbc:	10800104 	addi	r2,r2,4
 200fdc0:	100b883a 	mov	r5,r2
 200fdc4:	1809883a 	mov	r4,r3
 200fdc8:	2026c300 	call	2026c30 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 200fdcc:	e0bffe17 	ldw	r2,-8(fp)
 200fdd0:	10c00b17 	ldw	r3,44(r2)
 200fdd4:	d0a7d317 	ldw	r2,-24756(gp)
 200fdd8:	10800b17 	ldw	r2,44(r2)
 200fddc:	18bfcb36 	bltu	r3,r2,200fd0c <__alt_mem_mem_0+0xfcfefd0c>
						{
							xSwitchRequired = pdTRUE;
 200fde0:	00800044 	movi	r2,1
 200fde4:	e0bffb15 	stw	r2,-20(fp)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 200fde8:	003fc806 	br	200fd0c <__alt_mem_mem_0+0xfcfefd0c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 200fdec:	d0a7d317 	ldw	r2,-24756(gp)
 200fdf0:	10c00b17 	ldw	r3,44(r2)
 200fdf4:	00808134 	movhi	r2,516
 200fdf8:	109e1204 	addi	r2,r2,30792
 200fdfc:	18c00524 	muli	r3,r3,20
 200fe00:	10c5883a 	add	r2,r2,r3
 200fe04:	10800017 	ldw	r2,0(r2)
 200fe08:	108000b0 	cmpltui	r2,r2,2
 200fe0c:	1000021e 	bne	r2,zero,200fe18 <xTaskIncrementTick+0x178>
			{
				xSwitchRequired = pdTRUE;
 200fe10:	00800044 	movi	r2,1
 200fe14:	e0bffb15 	stw	r2,-20(fp)
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 200fe18:	d0a7dc17 	ldw	r2,-24720(gp)
 200fe1c:	10000626 	beq	r2,zero,200fe38 <xTaskIncrementTick+0x198>
			{
				xSwitchRequired = pdTRUE;
 200fe20:	00800044 	movi	r2,1
 200fe24:	e0bffb15 	stw	r2,-20(fp)
 200fe28:	00000306 	br	200fe38 <xTaskIncrementTick+0x198>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 200fe2c:	d0a7db17 	ldw	r2,-24724(gp)
 200fe30:	10800044 	addi	r2,r2,1
 200fe34:	d0a7db15 	stw	r2,-24724(gp)
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 200fe38:	e0bffb17 	ldw	r2,-20(fp)
}
 200fe3c:	e037883a 	mov	sp,fp
 200fe40:	dfc00117 	ldw	ra,4(sp)
 200fe44:	df000017 	ldw	fp,0(sp)
 200fe48:	dec00204 	addi	sp,sp,8
 200fe4c:	f800283a 	ret

0200fe50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 200fe50:	defffa04 	addi	sp,sp,-24
 200fe54:	dfc00515 	stw	ra,20(sp)
 200fe58:	df000415 	stw	fp,16(sp)
 200fe5c:	df000404 	addi	fp,sp,16
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 200fe60:	d0a7e117 	ldw	r2,-24700(gp)
 200fe64:	10000326 	beq	r2,zero,200fe74 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 200fe68:	00800044 	movi	r2,1
 200fe6c:	d0a7dc15 	stw	r2,-24720(gp)
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 200fe70:	00004806 	br	200ff94 <vTaskSwitchContext+0x144>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 200fe74:	d027dc15 	stw	zero,-24720(gp)
			ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
 200fe78:	d0a7d317 	ldw	r2,-24756(gp)
 200fe7c:	10800c17 	ldw	r2,48(r2)
 200fe80:	e0bffd15 	stw	r2,-12(fp)
 200fe84:	00a969b4 	movhi	r2,42406
 200fe88:	10a96944 	addi	r2,r2,-23131
 200fe8c:	e0bffe15 	stw	r2,-8(fp)
 200fe90:	e0bffd17 	ldw	r2,-12(fp)
 200fe94:	10c00017 	ldw	r3,0(r2)
 200fe98:	e0bffe17 	ldw	r2,-8(fp)
 200fe9c:	18800f1e 	bne	r3,r2,200fedc <vTaskSwitchContext+0x8c>
 200fea0:	e0bffd17 	ldw	r2,-12(fp)
 200fea4:	10800104 	addi	r2,r2,4
 200fea8:	10c00017 	ldw	r3,0(r2)
 200feac:	e0bffe17 	ldw	r2,-8(fp)
 200feb0:	18800a1e 	bne	r3,r2,200fedc <vTaskSwitchContext+0x8c>
 200feb4:	e0bffd17 	ldw	r2,-12(fp)
 200feb8:	10800204 	addi	r2,r2,8
 200febc:	10c00017 	ldw	r3,0(r2)
 200fec0:	e0bffe17 	ldw	r2,-8(fp)
 200fec4:	1880051e 	bne	r3,r2,200fedc <vTaskSwitchContext+0x8c>
 200fec8:	e0bffd17 	ldw	r2,-12(fp)
 200fecc:	10800304 	addi	r2,r2,12
 200fed0:	10c00017 	ldw	r3,0(r2)
 200fed4:	e0bffe17 	ldw	r2,-8(fp)
 200fed8:	18800626 	beq	r3,r2,200fef4 <vTaskSwitchContext+0xa4>
 200fedc:	d0e7d317 	ldw	r3,-24756(gp)
 200fee0:	d0a7d317 	ldw	r2,-24756(gp)
 200fee4:	10800d04 	addi	r2,r2,52
 200fee8:	100b883a 	mov	r5,r2
 200feec:	1809883a 	mov	r4,r3
 200fef0:	20002ac0 	call	20002ac <vApplicationStackOverflowHook>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 200fef4:	d0a7d917 	ldw	r2,-24732(gp)
 200fef8:	e0bffc15 	stw	r2,-16(fp)
 200fefc:	00000306 	br	200ff0c <vTaskSwitchContext+0xbc>
 200ff00:	e0bffc17 	ldw	r2,-16(fp)
 200ff04:	10bfffc4 	addi	r2,r2,-1
 200ff08:	e0bffc15 	stw	r2,-16(fp)
 200ff0c:	00808134 	movhi	r2,516
 200ff10:	109e1204 	addi	r2,r2,30792
 200ff14:	e0fffc17 	ldw	r3,-16(fp)
 200ff18:	18c00524 	muli	r3,r3,20
 200ff1c:	10c5883a 	add	r2,r2,r3
 200ff20:	10800017 	ldw	r2,0(r2)
 200ff24:	103ff626 	beq	r2,zero,200ff00 <__alt_mem_mem_0+0xfcfeff00>
 200ff28:	e0bffc17 	ldw	r2,-16(fp)
 200ff2c:	10c00524 	muli	r3,r2,20
 200ff30:	00808134 	movhi	r2,516
 200ff34:	109e1204 	addi	r2,r2,30792
 200ff38:	1885883a 	add	r2,r3,r2
 200ff3c:	e0bfff15 	stw	r2,-4(fp)
 200ff40:	e0bfff17 	ldw	r2,-4(fp)
 200ff44:	10800117 	ldw	r2,4(r2)
 200ff48:	10c00117 	ldw	r3,4(r2)
 200ff4c:	e0bfff17 	ldw	r2,-4(fp)
 200ff50:	10c00115 	stw	r3,4(r2)
 200ff54:	e0bfff17 	ldw	r2,-4(fp)
 200ff58:	10c00117 	ldw	r3,4(r2)
 200ff5c:	e0bfff17 	ldw	r2,-4(fp)
 200ff60:	10800204 	addi	r2,r2,8
 200ff64:	1880051e 	bne	r3,r2,200ff7c <vTaskSwitchContext+0x12c>
 200ff68:	e0bfff17 	ldw	r2,-4(fp)
 200ff6c:	10800117 	ldw	r2,4(r2)
 200ff70:	10c00117 	ldw	r3,4(r2)
 200ff74:	e0bfff17 	ldw	r2,-4(fp)
 200ff78:	10c00115 	stw	r3,4(r2)
 200ff7c:	e0bfff17 	ldw	r2,-4(fp)
 200ff80:	10800117 	ldw	r2,4(r2)
 200ff84:	10800317 	ldw	r2,12(r2)
 200ff88:	d0a7d315 	stw	r2,-24756(gp)
 200ff8c:	e0bffc17 	ldw	r2,-16(fp)
 200ff90:	d0a7d915 	stw	r2,-24732(gp)
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 200ff94:	0001883a 	nop
 200ff98:	e037883a 	mov	sp,fp
 200ff9c:	dfc00117 	ldw	ra,4(sp)
 200ffa0:	df000017 	ldw	fp,0(sp)
 200ffa4:	dec00204 	addi	sp,sp,8
 200ffa8:	f800283a 	ret

0200ffac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 200ffac:	defffc04 	addi	sp,sp,-16
 200ffb0:	dfc00315 	stw	ra,12(sp)
 200ffb4:	df000215 	stw	fp,8(sp)
 200ffb8:	df000204 	addi	fp,sp,8
 200ffbc:	e13ffe15 	stw	r4,-8(fp)
 200ffc0:	e17fff15 	stw	r5,-4(fp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 200ffc4:	d0a7d317 	ldw	r2,-24756(gp)
 200ffc8:	10800604 	addi	r2,r2,24
 200ffcc:	100b883a 	mov	r5,r2
 200ffd0:	e13ffe17 	ldw	r4,-8(fp)
 200ffd4:	2026cbc0 	call	2026cbc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 200ffd8:	01400044 	movi	r5,1
 200ffdc:	e13fff17 	ldw	r4,-4(fp)
 200ffe0:	20116bc0 	call	20116bc <prvAddCurrentTaskToDelayedList>
}
 200ffe4:	0001883a 	nop
 200ffe8:	e037883a 	mov	sp,fp
 200ffec:	dfc00117 	ldw	ra,4(sp)
 200fff0:	df000017 	ldw	fp,0(sp)
 200fff4:	dec00204 	addi	sp,sp,8
 200fff8:	f800283a 	ret

0200fffc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 200fffc:	defffb04 	addi	sp,sp,-20
 2010000:	dfc00415 	stw	ra,16(sp)
 2010004:	df000315 	stw	fp,12(sp)
 2010008:	df000304 	addi	fp,sp,12
 201000c:	e13ffd15 	stw	r4,-12(fp)
 2010010:	e17ffe15 	stw	r5,-8(fp)
 2010014:	e1bfff15 	stw	r6,-4(fp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 2010018:	d0a7d317 	ldw	r2,-24756(gp)
 201001c:	e0fffe17 	ldw	r3,-8(fp)
 2010020:	18e00034 	orhi	r3,r3,32768
 2010024:	10c00615 	stw	r3,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2010028:	d0a7d317 	ldw	r2,-24756(gp)
 201002c:	10800604 	addi	r2,r2,24
 2010030:	100b883a 	mov	r5,r2
 2010034:	e13ffd17 	ldw	r4,-12(fp)
 2010038:	2026c300 	call	2026c30 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 201003c:	01400044 	movi	r5,1
 2010040:	e13fff17 	ldw	r4,-4(fp)
 2010044:	20116bc0 	call	20116bc <prvAddCurrentTaskToDelayedList>
}
 2010048:	0001883a 	nop
 201004c:	e037883a 	mov	sp,fp
 2010050:	dfc00117 	ldw	ra,4(sp)
 2010054:	df000017 	ldw	fp,0(sp)
 2010058:	dec00204 	addi	sp,sp,8
 201005c:	f800283a 	ret

02010060 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 2010060:	defffb04 	addi	sp,sp,-20
 2010064:	dfc00415 	stw	ra,16(sp)
 2010068:	df000315 	stw	fp,12(sp)
 201006c:	df000304 	addi	fp,sp,12
 2010070:	e13ffd15 	stw	r4,-12(fp)
 2010074:	e17ffe15 	stw	r5,-8(fp)
 2010078:	e1bfff15 	stw	r6,-4(fp)

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 201007c:	d0a7d317 	ldw	r2,-24756(gp)
 2010080:	10800604 	addi	r2,r2,24
 2010084:	100b883a 	mov	r5,r2
 2010088:	e13ffd17 	ldw	r4,-12(fp)
 201008c:	2026c300 	call	2026c30 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 2010090:	e0bfff17 	ldw	r2,-4(fp)
 2010094:	10000226 	beq	r2,zero,20100a0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 2010098:	00bfffc4 	movi	r2,-1
 201009c:	e0bffe15 	stw	r2,-8(fp)
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 20100a0:	e17fff17 	ldw	r5,-4(fp)
 20100a4:	e13ffe17 	ldw	r4,-8(fp)
 20100a8:	20116bc0 	call	20116bc <prvAddCurrentTaskToDelayedList>
	}
 20100ac:	0001883a 	nop
 20100b0:	e037883a 	mov	sp,fp
 20100b4:	dfc00117 	ldw	ra,4(sp)
 20100b8:	df000017 	ldw	fp,0(sp)
 20100bc:	dec00204 	addi	sp,sp,8
 20100c0:	f800283a 	ret

020100c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 20100c4:	defffb04 	addi	sp,sp,-20
 20100c8:	dfc00415 	stw	ra,16(sp)
 20100cc:	df000315 	stw	fp,12(sp)
 20100d0:	df000304 	addi	fp,sp,12
 20100d4:	e13fff15 	stw	r4,-4(fp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 20100d8:	e0bfff17 	ldw	r2,-4(fp)
 20100dc:	10800317 	ldw	r2,12(r2)
 20100e0:	10800317 	ldw	r2,12(r2)
 20100e4:	e0bffe15 	stw	r2,-8(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 20100e8:	e0bffe17 	ldw	r2,-8(fp)
 20100ec:	10800604 	addi	r2,r2,24
 20100f0:	1009883a 	mov	r4,r2
 20100f4:	2026d940 	call	2026d94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20100f8:	d0a7e117 	ldw	r2,-24700(gp)
 20100fc:	1000171e 	bne	r2,zero,201015c <xTaskRemoveFromEventList+0x98>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 2010100:	e0bffe17 	ldw	r2,-8(fp)
 2010104:	10800104 	addi	r2,r2,4
 2010108:	1009883a 	mov	r4,r2
 201010c:	2026d940 	call	2026d94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 2010110:	e0bffe17 	ldw	r2,-8(fp)
 2010114:	10800b17 	ldw	r2,44(r2)
 2010118:	d0e7d917 	ldw	r3,-24732(gp)
 201011c:	1880032e 	bgeu	r3,r2,201012c <xTaskRemoveFromEventList+0x68>
 2010120:	e0bffe17 	ldw	r2,-8(fp)
 2010124:	10800b17 	ldw	r2,44(r2)
 2010128:	d0a7d915 	stw	r2,-24732(gp)
 201012c:	e0bffe17 	ldw	r2,-8(fp)
 2010130:	10800b17 	ldw	r2,44(r2)
 2010134:	10c00524 	muli	r3,r2,20
 2010138:	00808134 	movhi	r2,516
 201013c:	109e1204 	addi	r2,r2,30792
 2010140:	1887883a 	add	r3,r3,r2
 2010144:	e0bffe17 	ldw	r2,-8(fp)
 2010148:	10800104 	addi	r2,r2,4
 201014c:	100b883a 	mov	r5,r2
 2010150:	1809883a 	mov	r4,r3
 2010154:	2026c300 	call	2026c30 <vListInsertEnd>
 2010158:	00000606 	br	2010174 <xTaskRemoveFromEventList+0xb0>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 201015c:	e0bffe17 	ldw	r2,-8(fp)
 2010160:	10800604 	addi	r2,r2,24
 2010164:	100b883a 	mov	r5,r2
 2010168:	01008134 	movhi	r4,516
 201016c:	211e3504 	addi	r4,r4,30932
 2010170:	2026c300 	call	2026c30 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 2010174:	e0bffe17 	ldw	r2,-8(fp)
 2010178:	10800b17 	ldw	r2,44(r2)
 201017c:	d0e7d317 	ldw	r3,-24756(gp)
 2010180:	18c00b17 	ldw	r3,44(r3)
 2010184:	1880052e 	bgeu	r3,r2,201019c <xTaskRemoveFromEventList+0xd8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 2010188:	00800044 	movi	r2,1
 201018c:	e0bffd15 	stw	r2,-12(fp)

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 2010190:	00800044 	movi	r2,1
 2010194:	d0a7dc15 	stw	r2,-24720(gp)
 2010198:	00000106 	br	20101a0 <xTaskRemoveFromEventList+0xdc>
	}
	else
	{
		xReturn = pdFALSE;
 201019c:	e03ffd15 	stw	zero,-12(fp)
	}

	return xReturn;
 20101a0:	e0bffd17 	ldw	r2,-12(fp)
}
 20101a4:	e037883a 	mov	sp,fp
 20101a8:	dfc00117 	ldw	ra,4(sp)
 20101ac:	df000017 	ldw	fp,0(sp)
 20101b0:	dec00204 	addi	sp,sp,8
 20101b4:	f800283a 	ret

020101b8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 20101b8:	defffb04 	addi	sp,sp,-20
 20101bc:	dfc00415 	stw	ra,16(sp)
 20101c0:	df000315 	stw	fp,12(sp)
 20101c4:	df000304 	addi	fp,sp,12
 20101c8:	e13ffe15 	stw	r4,-8(fp)
 20101cc:	e17fff15 	stw	r5,-4(fp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 20101d0:	e0bfff17 	ldw	r2,-4(fp)
 20101d4:	10e00034 	orhi	r3,r2,32768
 20101d8:	e0bffe17 	ldw	r2,-8(fp)
 20101dc:	10c00015 	stw	r3,0(r2)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 20101e0:	e0bffe17 	ldw	r2,-8(fp)
 20101e4:	10800317 	ldw	r2,12(r2)
 20101e8:	e0bffd15 	stw	r2,-12(fp)
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
 20101ec:	e13ffe17 	ldw	r4,-8(fp)
 20101f0:	2026d940 	call	2026d94 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 20101f4:	e0bffd17 	ldw	r2,-12(fp)
 20101f8:	10800104 	addi	r2,r2,4
 20101fc:	1009883a 	mov	r4,r2
 2010200:	2026d940 	call	2026d94 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 2010204:	e0bffd17 	ldw	r2,-12(fp)
 2010208:	10800b17 	ldw	r2,44(r2)
 201020c:	d0e7d917 	ldw	r3,-24732(gp)
 2010210:	1880032e 	bgeu	r3,r2,2010220 <vTaskRemoveFromUnorderedEventList+0x68>
 2010214:	e0bffd17 	ldw	r2,-12(fp)
 2010218:	10800b17 	ldw	r2,44(r2)
 201021c:	d0a7d915 	stw	r2,-24732(gp)
 2010220:	e0bffd17 	ldw	r2,-12(fp)
 2010224:	10800b17 	ldw	r2,44(r2)
 2010228:	10c00524 	muli	r3,r2,20
 201022c:	00808134 	movhi	r2,516
 2010230:	109e1204 	addi	r2,r2,30792
 2010234:	1887883a 	add	r3,r3,r2
 2010238:	e0bffd17 	ldw	r2,-12(fp)
 201023c:	10800104 	addi	r2,r2,4
 2010240:	100b883a 	mov	r5,r2
 2010244:	1809883a 	mov	r4,r3
 2010248:	2026c300 	call	2026c30 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 201024c:	e0bffd17 	ldw	r2,-12(fp)
 2010250:	10800b17 	ldw	r2,44(r2)
 2010254:	d0e7d317 	ldw	r3,-24756(gp)
 2010258:	18c00b17 	ldw	r3,44(r3)
 201025c:	1880022e 	bgeu	r3,r2,2010268 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 2010260:	00800044 	movi	r2,1
 2010264:	d0a7dc15 	stw	r2,-24720(gp)
	}
}
 2010268:	0001883a 	nop
 201026c:	e037883a 	mov	sp,fp
 2010270:	dfc00117 	ldw	ra,4(sp)
 2010274:	df000017 	ldw	fp,0(sp)
 2010278:	dec00204 	addi	sp,sp,8
 201027c:	f800283a 	ret

02010280 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 2010280:	defffd04 	addi	sp,sp,-12
 2010284:	dfc00215 	stw	ra,8(sp)
 2010288:	df000115 	stw	fp,4(sp)
 201028c:	df000104 	addi	fp,sp,4
 2010290:	e13fff15 	stw	r4,-4(fp)
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 2010294:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2010298:	10000126 	beq	r2,zero,20102a0 <vTaskSetTimeOutState+0x20>
 201029c:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 20102a0:	d0e7dd17 	ldw	r3,-24716(gp)
 20102a4:	e0bfff17 	ldw	r2,-4(fp)
 20102a8:	10c00015 	stw	r3,0(r2)
		pxTimeOut->xTimeOnEntering = xTickCount;
 20102ac:	d0e7d817 	ldw	r3,-24736(gp)
 20102b0:	e0bfff17 	ldw	r2,-4(fp)
 20102b4:	10c00115 	stw	r3,4(r2)
	}
	taskEXIT_CRITICAL();
 20102b8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20102bc:	10000126 	beq	r2,zero,20102c4 <vTaskSetTimeOutState+0x44>
 20102c0:	2010e300 	call	2010e30 <vTaskExitCritical>
}
 20102c4:	0001883a 	nop
 20102c8:	e037883a 	mov	sp,fp
 20102cc:	dfc00117 	ldw	ra,4(sp)
 20102d0:	df000017 	ldw	fp,0(sp)
 20102d4:	dec00204 	addi	sp,sp,8
 20102d8:	f800283a 	ret

020102dc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 20102dc:	defffe04 	addi	sp,sp,-8
 20102e0:	df000115 	stw	fp,4(sp)
 20102e4:	df000104 	addi	fp,sp,4
 20102e8:	e13fff15 	stw	r4,-4(fp)
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 20102ec:	d0e7dd17 	ldw	r3,-24716(gp)
 20102f0:	e0bfff17 	ldw	r2,-4(fp)
 20102f4:	10c00015 	stw	r3,0(r2)
	pxTimeOut->xTimeOnEntering = xTickCount;
 20102f8:	d0e7d817 	ldw	r3,-24736(gp)
 20102fc:	e0bfff17 	ldw	r2,-4(fp)
 2010300:	10c00115 	stw	r3,4(r2)
}
 2010304:	0001883a 	nop
 2010308:	e037883a 	mov	sp,fp
 201030c:	df000017 	ldw	fp,0(sp)
 2010310:	dec00104 	addi	sp,sp,4
 2010314:	f800283a 	ret

02010318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 2010318:	defff904 	addi	sp,sp,-28
 201031c:	dfc00615 	stw	ra,24(sp)
 2010320:	df000515 	stw	fp,20(sp)
 2010324:	df000504 	addi	fp,sp,20
 2010328:	e13ffe15 	stw	r4,-8(fp)
 201032c:	e17fff15 	stw	r5,-4(fp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 2010330:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2010334:	10000126 	beq	r2,zero,201033c <xTaskCheckForTimeOut+0x24>
 2010338:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 201033c:	d0a7d817 	ldw	r2,-24736(gp)
 2010340:	e0bffc15 	stw	r2,-16(fp)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 2010344:	e0bffe17 	ldw	r2,-8(fp)
 2010348:	10800117 	ldw	r2,4(r2)
 201034c:	e0fffc17 	ldw	r3,-16(fp)
 2010350:	1885c83a 	sub	r2,r3,r2
 2010354:	e0bffd15 	stw	r2,-12(fp)
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 2010358:	e0bfff17 	ldw	r2,-4(fp)
 201035c:	10800017 	ldw	r2,0(r2)
 2010360:	10bfffd8 	cmpnei	r2,r2,-1
 2010364:	1000021e 	bne	r2,zero,2010370 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 2010368:	e03ffb15 	stw	zero,-20(fp)
 201036c:	00001d06 	br	20103e4 <xTaskCheckForTimeOut+0xcc>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 2010370:	e0bffe17 	ldw	r2,-8(fp)
 2010374:	10c00017 	ldw	r3,0(r2)
 2010378:	d0a7dd17 	ldw	r2,-24716(gp)
 201037c:	18800726 	beq	r3,r2,201039c <xTaskCheckForTimeOut+0x84>
 2010380:	e0bffe17 	ldw	r2,-8(fp)
 2010384:	10800117 	ldw	r2,4(r2)
 2010388:	e0fffc17 	ldw	r3,-16(fp)
 201038c:	18800336 	bltu	r3,r2,201039c <xTaskCheckForTimeOut+0x84>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 2010390:	00800044 	movi	r2,1
 2010394:	e0bffb15 	stw	r2,-20(fp)
 2010398:	00001206 	br	20103e4 <xTaskCheckForTimeOut+0xcc>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 201039c:	e0bfff17 	ldw	r2,-4(fp)
 20103a0:	10800017 	ldw	r2,0(r2)
 20103a4:	e0fffd17 	ldw	r3,-12(fp)
 20103a8:	18800a2e 	bgeu	r3,r2,20103d4 <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 20103ac:	e0bfff17 	ldw	r2,-4(fp)
 20103b0:	10c00017 	ldw	r3,0(r2)
 20103b4:	e0bffd17 	ldw	r2,-12(fp)
 20103b8:	1887c83a 	sub	r3,r3,r2
 20103bc:	e0bfff17 	ldw	r2,-4(fp)
 20103c0:	10c00015 	stw	r3,0(r2)
			vTaskInternalSetTimeOutState( pxTimeOut );
 20103c4:	e13ffe17 	ldw	r4,-8(fp)
 20103c8:	20102dc0 	call	20102dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 20103cc:	e03ffb15 	stw	zero,-20(fp)
 20103d0:	00000406 	br	20103e4 <xTaskCheckForTimeOut+0xcc>
		}
		else
		{
			*pxTicksToWait = 0;
 20103d4:	e0bfff17 	ldw	r2,-4(fp)
 20103d8:	10000015 	stw	zero,0(r2)
			xReturn = pdTRUE;
 20103dc:	00800044 	movi	r2,1
 20103e0:	e0bffb15 	stw	r2,-20(fp)
		}
	}
	taskEXIT_CRITICAL();
 20103e4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20103e8:	10000126 	beq	r2,zero,20103f0 <xTaskCheckForTimeOut+0xd8>
 20103ec:	2010e300 	call	2010e30 <vTaskExitCritical>

	return xReturn;
 20103f0:	e0bffb17 	ldw	r2,-20(fp)
}
 20103f4:	e037883a 	mov	sp,fp
 20103f8:	dfc00117 	ldw	ra,4(sp)
 20103fc:	df000017 	ldw	fp,0(sp)
 2010400:	dec00204 	addi	sp,sp,8
 2010404:	f800283a 	ret

02010408 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 2010408:	deffff04 	addi	sp,sp,-4
 201040c:	df000015 	stw	fp,0(sp)
 2010410:	d839883a 	mov	fp,sp
	xYieldPending = pdTRUE;
 2010414:	00800044 	movi	r2,1
 2010418:	d0a7dc15 	stw	r2,-24720(gp)
}
 201041c:	0001883a 	nop
 2010420:	e037883a 	mov	sp,fp
 2010424:	df000017 	ldw	fp,0(sp)
 2010428:	dec00104 	addi	sp,sp,4
 201042c:	f800283a 	ret

02010430 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 2010430:	defffc04 	addi	sp,sp,-16
 2010434:	df000315 	stw	fp,12(sp)
 2010438:	df000304 	addi	fp,sp,12
 201043c:	e13fff15 	stw	r4,-4(fp)
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 2010440:	e0bfff17 	ldw	r2,-4(fp)
 2010444:	10000626 	beq	r2,zero,2010460 <uxTaskGetTaskNumber+0x30>
		{
			pxTCB = xTask;
 2010448:	e0bfff17 	ldw	r2,-4(fp)
 201044c:	e0bffe15 	stw	r2,-8(fp)
			uxReturn = pxTCB->uxTaskNumber;
 2010450:	e0bffe17 	ldw	r2,-8(fp)
 2010454:	10801917 	ldw	r2,100(r2)
 2010458:	e0bffd15 	stw	r2,-12(fp)
 201045c:	00000106 	br	2010464 <uxTaskGetTaskNumber+0x34>
		}
		else
		{
			uxReturn = 0U;
 2010460:	e03ffd15 	stw	zero,-12(fp)
		}

		return uxReturn;
 2010464:	e0bffd17 	ldw	r2,-12(fp)
	}
 2010468:	e037883a 	mov	sp,fp
 201046c:	df000017 	ldw	fp,0(sp)
 2010470:	dec00104 	addi	sp,sp,4
 2010474:	f800283a 	ret

02010478 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 2010478:	defffc04 	addi	sp,sp,-16
 201047c:	df000315 	stw	fp,12(sp)
 2010480:	df000304 	addi	fp,sp,12
 2010484:	e13ffe15 	stw	r4,-8(fp)
 2010488:	e17fff15 	stw	r5,-4(fp)
	TCB_t * pxTCB;

		if( xTask != NULL )
 201048c:	e0bffe17 	ldw	r2,-8(fp)
 2010490:	10000526 	beq	r2,zero,20104a8 <vTaskSetTaskNumber+0x30>
		{
			pxTCB = xTask;
 2010494:	e0bffe17 	ldw	r2,-8(fp)
 2010498:	e0bffd15 	stw	r2,-12(fp)
			pxTCB->uxTaskNumber = uxHandle;
 201049c:	e0bffd17 	ldw	r2,-12(fp)
 20104a0:	e0ffff17 	ldw	r3,-4(fp)
 20104a4:	10c01915 	stw	r3,100(r2)
		}
	}
 20104a8:	0001883a 	nop
 20104ac:	e037883a 	mov	sp,fp
 20104b0:	df000017 	ldw	fp,0(sp)
 20104b4:	dec00104 	addi	sp,sp,4
 20104b8:	f800283a 	ret

020104bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 20104bc:	defffd04 	addi	sp,sp,-12
 20104c0:	dfc00215 	stw	ra,8(sp)
 20104c4:	df000115 	stw	fp,4(sp)
 20104c8:	df000104 	addi	fp,sp,4
 20104cc:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 20104d0:	20105900 	call	2010590 <prvCheckTasksWaitingTermination>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 20104d4:	003ffe06 	br	20104d0 <__alt_mem_mem_0+0xfcff04d0>

020104d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 20104d8:	defffd04 	addi	sp,sp,-12
 20104dc:	dfc00215 	stw	ra,8(sp)
 20104e0:	df000115 	stw	fp,4(sp)
 20104e4:	df000104 	addi	fp,sp,4
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 20104e8:	e03fff15 	stw	zero,-4(fp)
 20104ec:	00000a06 	br	2010518 <prvInitialiseTaskLists+0x40>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 20104f0:	e0bfff17 	ldw	r2,-4(fp)
 20104f4:	10c00524 	muli	r3,r2,20
 20104f8:	00808134 	movhi	r2,516
 20104fc:	109e1204 	addi	r2,r2,30792
 2010500:	1885883a 	add	r2,r3,r2
 2010504:	1009883a 	mov	r4,r2
 2010508:	2026b9c0 	call	2026b9c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 201050c:	e0bfff17 	ldw	r2,-4(fp)
 2010510:	10800044 	addi	r2,r2,1
 2010514:	e0bfff15 	stw	r2,-4(fp)
 2010518:	e0bfff17 	ldw	r2,-4(fp)
 201051c:	10800170 	cmpltui	r2,r2,5
 2010520:	103ff31e 	bne	r2,zero,20104f0 <__alt_mem_mem_0+0xfcff04f0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 2010524:	01008134 	movhi	r4,516
 2010528:	211e2b04 	addi	r4,r4,30892
 201052c:	2026b9c0 	call	2026b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 2010530:	01008134 	movhi	r4,516
 2010534:	211e3004 	addi	r4,r4,30912
 2010538:	2026b9c0 	call	2026b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 201053c:	01008134 	movhi	r4,516
 2010540:	211e3504 	addi	r4,r4,30932
 2010544:	2026b9c0 	call	2026b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 2010548:	01008134 	movhi	r4,516
 201054c:	211e3a04 	addi	r4,r4,30952
 2010550:	2026b9c0 	call	2026b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 2010554:	01008134 	movhi	r4,516
 2010558:	211e3f04 	addi	r4,r4,30972
 201055c:	2026b9c0 	call	2026b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 2010560:	00808134 	movhi	r2,516
 2010564:	109e2b04 	addi	r2,r2,30892
 2010568:	d0a7d415 	stw	r2,-24752(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 201056c:	00808134 	movhi	r2,516
 2010570:	109e3004 	addi	r2,r2,30912
 2010574:	d0a7d515 	stw	r2,-24748(gp)
}
 2010578:	0001883a 	nop
 201057c:	e037883a 	mov	sp,fp
 2010580:	dfc00117 	ldw	ra,4(sp)
 2010584:	df000017 	ldw	fp,0(sp)
 2010588:	dec00204 	addi	sp,sp,8
 201058c:	f800283a 	ret

02010590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 2010590:	defffd04 	addi	sp,sp,-12
 2010594:	dfc00215 	stw	ra,8(sp)
 2010598:	df000115 	stw	fp,4(sp)
 201059c:	df000104 	addi	fp,sp,4
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 20105a0:	00001706 	br	2010600 <prvCheckTasksWaitingTermination+0x70>
		{
			taskENTER_CRITICAL();
 20105a4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20105a8:	10000126 	beq	r2,zero,20105b0 <prvCheckTasksWaitingTermination+0x20>
 20105ac:	2010de80 	call	2010de8 <vTaskEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 20105b0:	00808134 	movhi	r2,516
 20105b4:	109e3a04 	addi	r2,r2,30952
 20105b8:	10800317 	ldw	r2,12(r2)
 20105bc:	10800317 	ldw	r2,12(r2)
 20105c0:	e0bfff15 	stw	r2,-4(fp)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 20105c4:	e0bfff17 	ldw	r2,-4(fp)
 20105c8:	10800104 	addi	r2,r2,4
 20105cc:	1009883a 	mov	r4,r2
 20105d0:	2026d940 	call	2026d94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 20105d4:	d0a7d717 	ldw	r2,-24740(gp)
 20105d8:	10bfffc4 	addi	r2,r2,-1
 20105dc:	d0a7d715 	stw	r2,-24740(gp)
				--uxDeletedTasksWaitingCleanUp;
 20105e0:	d0a7d617 	ldw	r2,-24744(gp)
 20105e4:	10bfffc4 	addi	r2,r2,-1
 20105e8:	d0a7d615 	stw	r2,-24744(gp)
			}
			taskEXIT_CRITICAL();
 20105ec:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20105f0:	10000126 	beq	r2,zero,20105f8 <prvCheckTasksWaitingTermination+0x68>
 20105f4:	2010e300 	call	2010e30 <vTaskExitCritical>

			prvDeleteTCB( pxTCB );
 20105f8:	e13fff17 	ldw	r4,-4(fp)
 20105fc:	20109600 	call	2010960 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 2010600:	d0a7d617 	ldw	r2,-24744(gp)
 2010604:	103fe71e 	bne	r2,zero,20105a4 <__alt_mem_mem_0+0xfcff05a4>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 2010608:	0001883a 	nop
 201060c:	e037883a 	mov	sp,fp
 2010610:	dfc00117 	ldw	ra,4(sp)
 2010614:	df000017 	ldw	fp,0(sp)
 2010618:	dec00204 	addi	sp,sp,8
 201061c:	f800283a 	ret

02010620 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 2010620:	defff904 	addi	sp,sp,-28
 2010624:	dfc00615 	stw	ra,24(sp)
 2010628:	df000515 	stw	fp,20(sp)
 201062c:	df000504 	addi	fp,sp,20
 2010630:	e13ffc15 	stw	r4,-16(fp)
 2010634:	e17ffd15 	stw	r5,-12(fp)
 2010638:	e1bffe15 	stw	r6,-8(fp)
 201063c:	e1ffff15 	stw	r7,-4(fp)
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 2010640:	e0bffc17 	ldw	r2,-16(fp)
 2010644:	1000021e 	bne	r2,zero,2010650 <vTaskGetInfo+0x30>
 2010648:	d0a7d317 	ldw	r2,-24756(gp)
 201064c:	00000106 	br	2010654 <vTaskGetInfo+0x34>
 2010650:	e0bffc17 	ldw	r2,-16(fp)
 2010654:	e0bffb15 	stw	r2,-20(fp)

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 2010658:	e0bffd17 	ldw	r2,-12(fp)
 201065c:	e0fffb17 	ldw	r3,-20(fp)
 2010660:	10c00015 	stw	r3,0(r2)
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 2010664:	e0bffb17 	ldw	r2,-20(fp)
 2010668:	10c00d04 	addi	r3,r2,52
 201066c:	e0bffd17 	ldw	r2,-12(fp)
 2010670:	10c00115 	stw	r3,4(r2)
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 2010674:	e0bffb17 	ldw	r2,-20(fp)
 2010678:	10c00b17 	ldw	r3,44(r2)
 201067c:	e0bffd17 	ldw	r2,-12(fp)
 2010680:	10c00415 	stw	r3,16(r2)
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 2010684:	e0bffb17 	ldw	r2,-20(fp)
 2010688:	10c00c17 	ldw	r3,48(r2)
 201068c:	e0bffd17 	ldw	r2,-12(fp)
 2010690:	10c00715 	stw	r3,28(r2)
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 2010694:	e0bffb17 	ldw	r2,-20(fp)
 2010698:	10c01817 	ldw	r3,96(r2)
 201069c:	e0bffd17 	ldw	r2,-12(fp)
 20106a0:	10c00215 	stw	r3,8(r2)

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 20106a4:	e0bffb17 	ldw	r2,-20(fp)
 20106a8:	10c01a17 	ldw	r3,104(r2)
 20106ac:	e0bffd17 	ldw	r2,-12(fp)
 20106b0:	10c00515 	stw	r3,20(r2)
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 20106b4:	e0bffd17 	ldw	r2,-12(fp)
 20106b8:	10000615 	stw	zero,24(r2)
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 20106bc:	e0bfff17 	ldw	r2,-4(fp)
 20106c0:	10800160 	cmpeqi	r2,r2,5
 20106c4:	1000151e 	bne	r2,zero,201071c <vTaskGetInfo+0xfc>
		{
			if( pxTCB == pxCurrentTCB )
 20106c8:	d0a7d317 	ldw	r2,-24756(gp)
 20106cc:	e0fffb17 	ldw	r3,-20(fp)
 20106d0:	1880031e 	bne	r3,r2,20106e0 <vTaskGetInfo+0xc0>
			{
				pxTaskStatus->eCurrentState = eRunning;
 20106d4:	e0bffd17 	ldw	r2,-12(fp)
 20106d8:	10000315 	stw	zero,12(r2)
 20106dc:	00001406 	br	2010730 <vTaskGetInfo+0x110>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 20106e0:	e0bffd17 	ldw	r2,-12(fp)
 20106e4:	e0ffff17 	ldw	r3,-4(fp)
 20106e8:	10c00315 	stw	r3,12(r2)
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 20106ec:	e0bfff17 	ldw	r2,-4(fp)
 20106f0:	108000d8 	cmpnei	r2,r2,3
 20106f4:	10000e1e 	bne	r2,zero,2010730 <vTaskGetInfo+0x110>
					{
						vTaskSuspendAll();
 20106f8:	200f8840 	call	200f884 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 20106fc:	e0bffb17 	ldw	r2,-20(fp)
 2010700:	10800a17 	ldw	r2,40(r2)
 2010704:	10000326 	beq	r2,zero,2010714 <vTaskGetInfo+0xf4>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 2010708:	e0bffd17 	ldw	r2,-12(fp)
 201070c:	00c00084 	movi	r3,2
 2010710:	10c00315 	stw	r3,12(r2)
							}
						}
						( void ) xTaskResumeAll();
 2010714:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 2010718:	00000506 	br	2010730 <vTaskGetInfo+0x110>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 201071c:	e13ffb17 	ldw	r4,-20(fp)
 2010720:	200f0f40 	call	200f0f4 <eTaskGetState>
 2010724:	1007883a 	mov	r3,r2
 2010728:	e0bffd17 	ldw	r2,-12(fp)
 201072c:	10c00315 	stw	r3,12(r2)
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 2010730:	e0bffe17 	ldw	r2,-8(fp)
 2010734:	10000826 	beq	r2,zero,2010758 <vTaskGetInfo+0x138>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 2010738:	e0bffb17 	ldw	r2,-20(fp)
 201073c:	10800c17 	ldw	r2,48(r2)
 2010740:	1009883a 	mov	r4,r2
 2010744:	20108a00 	call	20108a0 <prvTaskCheckFreeStackSpace>
 2010748:	1007883a 	mov	r3,r2
 201074c:	e0bffd17 	ldw	r2,-12(fp)
 2010750:	10c00815 	stw	r3,32(r2)
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 2010754:	00000206 	br	2010760 <vTaskGetInfo+0x140>
			}
			#endif
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
 2010758:	e0bffd17 	ldw	r2,-12(fp)
 201075c:	10000815 	stw	zero,32(r2)
		}
	}
 2010760:	0001883a 	nop
 2010764:	e037883a 	mov	sp,fp
 2010768:	dfc00117 	ldw	ra,4(sp)
 201076c:	df000017 	ldw	fp,0(sp)
 2010770:	dec00204 	addi	sp,sp,8
 2010774:	f800283a 	ret

02010778 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 2010778:	defff604 	addi	sp,sp,-40
 201077c:	dfc00915 	stw	ra,36(sp)
 2010780:	df000815 	stw	fp,32(sp)
 2010784:	df000804 	addi	fp,sp,32
 2010788:	e13ffd15 	stw	r4,-12(fp)
 201078c:	e17ffe15 	stw	r5,-8(fp)
 2010790:	e1bfff15 	stw	r6,-4(fp)
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 2010794:	e03ff815 	stw	zero,-32(fp)

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 2010798:	e0bffe17 	ldw	r2,-8(fp)
 201079c:	10800017 	ldw	r2,0(r2)
 20107a0:	10003926 	beq	r2,zero,2010888 <prvListTasksWithinSingleList+0x110>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 20107a4:	e0bffe17 	ldw	r2,-8(fp)
 20107a8:	e0bff915 	stw	r2,-28(fp)
 20107ac:	e0bff917 	ldw	r2,-28(fp)
 20107b0:	10800117 	ldw	r2,4(r2)
 20107b4:	10c00117 	ldw	r3,4(r2)
 20107b8:	e0bff917 	ldw	r2,-28(fp)
 20107bc:	10c00115 	stw	r3,4(r2)
 20107c0:	e0bff917 	ldw	r2,-28(fp)
 20107c4:	10c00117 	ldw	r3,4(r2)
 20107c8:	e0bff917 	ldw	r2,-28(fp)
 20107cc:	10800204 	addi	r2,r2,8
 20107d0:	1880051e 	bne	r3,r2,20107e8 <prvListTasksWithinSingleList+0x70>
 20107d4:	e0bff917 	ldw	r2,-28(fp)
 20107d8:	10800117 	ldw	r2,4(r2)
 20107dc:	10c00117 	ldw	r3,4(r2)
 20107e0:	e0bff917 	ldw	r2,-28(fp)
 20107e4:	10c00115 	stw	r3,4(r2)
 20107e8:	e0bff917 	ldw	r2,-28(fp)
 20107ec:	10800117 	ldw	r2,4(r2)
 20107f0:	10800317 	ldw	r2,12(r2)
 20107f4:	e0bffa15 	stw	r2,-24(fp)
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 20107f8:	e0bffe17 	ldw	r2,-8(fp)
 20107fc:	e0bffb15 	stw	r2,-20(fp)
 2010800:	e0bffb17 	ldw	r2,-20(fp)
 2010804:	10800117 	ldw	r2,4(r2)
 2010808:	10c00117 	ldw	r3,4(r2)
 201080c:	e0bffb17 	ldw	r2,-20(fp)
 2010810:	10c00115 	stw	r3,4(r2)
 2010814:	e0bffb17 	ldw	r2,-20(fp)
 2010818:	10c00117 	ldw	r3,4(r2)
 201081c:	e0bffb17 	ldw	r2,-20(fp)
 2010820:	10800204 	addi	r2,r2,8
 2010824:	1880051e 	bne	r3,r2,201083c <prvListTasksWithinSingleList+0xc4>
 2010828:	e0bffb17 	ldw	r2,-20(fp)
 201082c:	10800117 	ldw	r2,4(r2)
 2010830:	10c00117 	ldw	r3,4(r2)
 2010834:	e0bffb17 	ldw	r2,-20(fp)
 2010838:	10c00115 	stw	r3,4(r2)
 201083c:	e0bffb17 	ldw	r2,-20(fp)
 2010840:	10800117 	ldw	r2,4(r2)
 2010844:	10800317 	ldw	r2,12(r2)
 2010848:	e0bffc15 	stw	r2,-16(fp)
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 201084c:	e0bff817 	ldw	r2,-32(fp)
 2010850:	10800924 	muli	r2,r2,36
 2010854:	e0fffd17 	ldw	r3,-12(fp)
 2010858:	1885883a 	add	r2,r3,r2
 201085c:	e1ffff17 	ldw	r7,-4(fp)
 2010860:	01800044 	movi	r6,1
 2010864:	100b883a 	mov	r5,r2
 2010868:	e13ffc17 	ldw	r4,-16(fp)
 201086c:	20106200 	call	2010620 <vTaskGetInfo>
				uxTask++;
 2010870:	e0bff817 	ldw	r2,-32(fp)
 2010874:	10800044 	addi	r2,r2,1
 2010878:	e0bff815 	stw	r2,-32(fp)
			} while( pxNextTCB != pxFirstTCB );
 201087c:	e0fffc17 	ldw	r3,-16(fp)
 2010880:	e0bffa17 	ldw	r2,-24(fp)
 2010884:	18bfdc1e 	bne	r3,r2,20107f8 <__alt_mem_mem_0+0xfcff07f8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 2010888:	e0bff817 	ldw	r2,-32(fp)
	}
 201088c:	e037883a 	mov	sp,fp
 2010890:	dfc00117 	ldw	ra,4(sp)
 2010894:	df000017 	ldw	fp,0(sp)
 2010898:	dec00204 	addi	sp,sp,8
 201089c:	f800283a 	ret

020108a0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 20108a0:	defffd04 	addi	sp,sp,-12
 20108a4:	df000215 	stw	fp,8(sp)
 20108a8:	df000204 	addi	fp,sp,8
 20108ac:	e13fff15 	stw	r4,-4(fp)
	uint32_t ulCount = 0U;
 20108b0:	e03ffe15 	stw	zero,-8(fp)

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 20108b4:	00000606 	br	20108d0 <prvTaskCheckFreeStackSpace+0x30>
		{
			pucStackByte -= portSTACK_GROWTH;
 20108b8:	e0bfff17 	ldw	r2,-4(fp)
 20108bc:	10800044 	addi	r2,r2,1
 20108c0:	e0bfff15 	stw	r2,-4(fp)
			ulCount++;
 20108c4:	e0bffe17 	ldw	r2,-8(fp)
 20108c8:	10800044 	addi	r2,r2,1
 20108cc:	e0bffe15 	stw	r2,-8(fp)

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 20108d0:	e0bfff17 	ldw	r2,-4(fp)
 20108d4:	10800003 	ldbu	r2,0(r2)
 20108d8:	10803fcc 	andi	r2,r2,255
 20108dc:	10802960 	cmpeqi	r2,r2,165
 20108e0:	103ff51e 	bne	r2,zero,20108b8 <__alt_mem_mem_0+0xfcff08b8>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 20108e4:	e0bffe17 	ldw	r2,-8(fp)
 20108e8:	1004d0ba 	srli	r2,r2,2
 20108ec:	e0bffe15 	stw	r2,-8(fp)

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 20108f0:	e0bffe17 	ldw	r2,-8(fp)
	}
 20108f4:	e037883a 	mov	sp,fp
 20108f8:	df000017 	ldw	fp,0(sp)
 20108fc:	dec00104 	addi	sp,sp,4
 2010900:	f800283a 	ret

02010904 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 2010904:	defffa04 	addi	sp,sp,-24
 2010908:	dfc00515 	stw	ra,20(sp)
 201090c:	df000415 	stw	fp,16(sp)
 2010910:	df000404 	addi	fp,sp,16
 2010914:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 2010918:	e0bfff17 	ldw	r2,-4(fp)
 201091c:	1000021e 	bne	r2,zero,2010928 <uxTaskGetStackHighWaterMark+0x24>
 2010920:	d0a7d317 	ldw	r2,-24756(gp)
 2010924:	00000106 	br	201092c <uxTaskGetStackHighWaterMark+0x28>
 2010928:	e0bfff17 	ldw	r2,-4(fp)
 201092c:	e0bffc15 	stw	r2,-16(fp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 2010930:	e0bffc17 	ldw	r2,-16(fp)
 2010934:	10800c17 	ldw	r2,48(r2)
 2010938:	e0bffd15 	stw	r2,-12(fp)
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 201093c:	e13ffd17 	ldw	r4,-12(fp)
 2010940:	20108a00 	call	20108a0 <prvTaskCheckFreeStackSpace>
 2010944:	e0bffe15 	stw	r2,-8(fp)

		return uxReturn;
 2010948:	e0bffe17 	ldw	r2,-8(fp)
	}
 201094c:	e037883a 	mov	sp,fp
 2010950:	dfc00117 	ldw	ra,4(sp)
 2010954:	df000017 	ldw	fp,0(sp)
 2010958:	dec00204 	addi	sp,sp,8
 201095c:	f800283a 	ret

02010960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 2010960:	defffd04 	addi	sp,sp,-12
 2010964:	dfc00215 	stw	ra,8(sp)
 2010968:	df000115 	stw	fp,4(sp)
 201096c:	df000104 	addi	fp,sp,4
 2010970:	e13fff15 	stw	r4,-4(fp)

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 2010974:	e0bfff17 	ldw	r2,-4(fp)
 2010978:	10800c17 	ldw	r2,48(r2)
 201097c:	1009883a 	mov	r4,r2
 2010980:	2026b280 	call	2026b28 <vPortFree>
			vPortFree( pxTCB );
 2010984:	e13fff17 	ldw	r4,-4(fp)
 2010988:	2026b280 	call	2026b28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 201098c:	0001883a 	nop
 2010990:	e037883a 	mov	sp,fp
 2010994:	dfc00117 	ldw	ra,4(sp)
 2010998:	df000017 	ldw	fp,0(sp)
 201099c:	dec00204 	addi	sp,sp,8
 20109a0:	f800283a 	ret

020109a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 20109a4:	defffe04 	addi	sp,sp,-8
 20109a8:	df000115 	stw	fp,4(sp)
 20109ac:	df000104 	addi	fp,sp,4
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 20109b0:	d0a7d417 	ldw	r2,-24752(gp)
 20109b4:	10800017 	ldw	r2,0(r2)
 20109b8:	1000031e 	bne	r2,zero,20109c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 20109bc:	00bfffc4 	movi	r2,-1
 20109c0:	d0a7df15 	stw	r2,-24708(gp)
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 20109c4:	00000706 	br	20109e4 <prvResetNextTaskUnblockTime+0x40>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 20109c8:	d0a7d417 	ldw	r2,-24752(gp)
 20109cc:	10800317 	ldw	r2,12(r2)
 20109d0:	10800317 	ldw	r2,12(r2)
 20109d4:	e0bfff15 	stw	r2,-4(fp)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 20109d8:	e0bfff17 	ldw	r2,-4(fp)
 20109dc:	10800117 	ldw	r2,4(r2)
 20109e0:	d0a7df15 	stw	r2,-24708(gp)
	}
}
 20109e4:	0001883a 	nop
 20109e8:	e037883a 	mov	sp,fp
 20109ec:	df000017 	ldw	fp,0(sp)
 20109f0:	dec00104 	addi	sp,sp,4
 20109f4:	f800283a 	ret

020109f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 20109f8:	defffe04 	addi	sp,sp,-8
 20109fc:	df000115 	stw	fp,4(sp)
 2010a00:	df000104 	addi	fp,sp,4
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 2010a04:	d0a7d317 	ldw	r2,-24756(gp)
 2010a08:	e0bfff15 	stw	r2,-4(fp)

		return xReturn;
 2010a0c:	e0bfff17 	ldw	r2,-4(fp)
	}
 2010a10:	e037883a 	mov	sp,fp
 2010a14:	df000017 	ldw	fp,0(sp)
 2010a18:	dec00104 	addi	sp,sp,4
 2010a1c:	f800283a 	ret

02010a20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 2010a20:	defffe04 	addi	sp,sp,-8
 2010a24:	df000115 	stw	fp,4(sp)
 2010a28:	df000104 	addi	fp,sp,4
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 2010a2c:	d0a7da17 	ldw	r2,-24728(gp)
 2010a30:	1000031e 	bne	r2,zero,2010a40 <xTaskGetSchedulerState+0x20>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 2010a34:	00800044 	movi	r2,1
 2010a38:	e0bfff15 	stw	r2,-4(fp)
 2010a3c:	00000606 	br	2010a58 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2010a40:	d0a7e117 	ldw	r2,-24700(gp)
 2010a44:	1000031e 	bne	r2,zero,2010a54 <xTaskGetSchedulerState+0x34>
			{
				xReturn = taskSCHEDULER_RUNNING;
 2010a48:	00800084 	movi	r2,2
 2010a4c:	e0bfff15 	stw	r2,-4(fp)
 2010a50:	00000106 	br	2010a58 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 2010a54:	e03fff15 	stw	zero,-4(fp)
			}
		}

		return xReturn;
 2010a58:	e0bfff17 	ldw	r2,-4(fp)
	}
 2010a5c:	e037883a 	mov	sp,fp
 2010a60:	df000017 	ldw	fp,0(sp)
 2010a64:	dec00104 	addi	sp,sp,4
 2010a68:	f800283a 	ret

02010a6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 2010a6c:	defffb04 	addi	sp,sp,-20
 2010a70:	dfc00415 	stw	ra,16(sp)
 2010a74:	df000315 	stw	fp,12(sp)
 2010a78:	df000304 	addi	fp,sp,12
 2010a7c:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 2010a80:	e0bfff17 	ldw	r2,-4(fp)
 2010a84:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 2010a88:	e03ffd15 	stw	zero,-12(fp)

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 2010a8c:	e0bfff17 	ldw	r2,-4(fp)
 2010a90:	10004026 	beq	r2,zero,2010b94 <xTaskPriorityInherit+0x128>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 2010a94:	e0bffe17 	ldw	r2,-8(fp)
 2010a98:	10c00b17 	ldw	r3,44(r2)
 2010a9c:	d0a7d317 	ldw	r2,-24756(gp)
 2010aa0:	10800b17 	ldw	r2,44(r2)
 2010aa4:	1880342e 	bgeu	r3,r2,2010b78 <xTaskPriorityInherit+0x10c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 2010aa8:	e0bffe17 	ldw	r2,-8(fp)
 2010aac:	10800617 	ldw	r2,24(r2)
 2010ab0:	10000616 	blt	r2,zero,2010acc <xTaskPriorityInherit+0x60>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2010ab4:	d0a7d317 	ldw	r2,-24756(gp)
 2010ab8:	10800b17 	ldw	r2,44(r2)
 2010abc:	00c00144 	movi	r3,5
 2010ac0:	1887c83a 	sub	r3,r3,r2
 2010ac4:	e0bffe17 	ldw	r2,-8(fp)
 2010ac8:	10c00615 	stw	r3,24(r2)
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 2010acc:	e0bffe17 	ldw	r2,-8(fp)
 2010ad0:	10c00517 	ldw	r3,20(r2)
 2010ad4:	e0bffe17 	ldw	r2,-8(fp)
 2010ad8:	10800b17 	ldw	r2,44(r2)
 2010adc:	11000524 	muli	r4,r2,20
 2010ae0:	00808134 	movhi	r2,516
 2010ae4:	109e1204 	addi	r2,r2,30792
 2010ae8:	2085883a 	add	r2,r4,r2
 2010aec:	18801b1e 	bne	r3,r2,2010b5c <xTaskPriorityInherit+0xf0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2010af0:	e0bffe17 	ldw	r2,-8(fp)
 2010af4:	10800104 	addi	r2,r2,4
 2010af8:	1009883a 	mov	r4,r2
 2010afc:	2026d940 	call	2026d94 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 2010b00:	d0a7d317 	ldw	r2,-24756(gp)
 2010b04:	10c00b17 	ldw	r3,44(r2)
 2010b08:	e0bffe17 	ldw	r2,-8(fp)
 2010b0c:	10c00b15 	stw	r3,44(r2)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 2010b10:	e0bffe17 	ldw	r2,-8(fp)
 2010b14:	10800b17 	ldw	r2,44(r2)
 2010b18:	d0e7d917 	ldw	r3,-24732(gp)
 2010b1c:	1880032e 	bgeu	r3,r2,2010b2c <xTaskPriorityInherit+0xc0>
 2010b20:	e0bffe17 	ldw	r2,-8(fp)
 2010b24:	10800b17 	ldw	r2,44(r2)
 2010b28:	d0a7d915 	stw	r2,-24732(gp)
 2010b2c:	e0bffe17 	ldw	r2,-8(fp)
 2010b30:	10800b17 	ldw	r2,44(r2)
 2010b34:	10c00524 	muli	r3,r2,20
 2010b38:	00808134 	movhi	r2,516
 2010b3c:	109e1204 	addi	r2,r2,30792
 2010b40:	1887883a 	add	r3,r3,r2
 2010b44:	e0bffe17 	ldw	r2,-8(fp)
 2010b48:	10800104 	addi	r2,r2,4
 2010b4c:	100b883a 	mov	r5,r2
 2010b50:	1809883a 	mov	r4,r3
 2010b54:	2026c300 	call	2026c30 <vListInsertEnd>
 2010b58:	00000406 	br	2010b6c <xTaskPriorityInherit+0x100>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 2010b5c:	d0a7d317 	ldw	r2,-24756(gp)
 2010b60:	10c00b17 	ldw	r3,44(r2)
 2010b64:	e0bffe17 	ldw	r2,-8(fp)
 2010b68:	10c00b15 	stw	r3,44(r2)
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 2010b6c:	00800044 	movi	r2,1
 2010b70:	e0bffd15 	stw	r2,-12(fp)
 2010b74:	00000706 	br	2010b94 <xTaskPriorityInherit+0x128>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 2010b78:	e0bffe17 	ldw	r2,-8(fp)
 2010b7c:	10c01a17 	ldw	r3,104(r2)
 2010b80:	d0a7d317 	ldw	r2,-24756(gp)
 2010b84:	10800b17 	ldw	r2,44(r2)
 2010b88:	1880022e 	bgeu	r3,r2,2010b94 <xTaskPriorityInherit+0x128>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 2010b8c:	00800044 	movi	r2,1
 2010b90:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 2010b94:	e0bffd17 	ldw	r2,-12(fp)
	}
 2010b98:	e037883a 	mov	sp,fp
 2010b9c:	dfc00117 	ldw	ra,4(sp)
 2010ba0:	df000017 	ldw	fp,0(sp)
 2010ba4:	dec00204 	addi	sp,sp,8
 2010ba8:	f800283a 	ret

02010bac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 2010bac:	defffb04 	addi	sp,sp,-20
 2010bb0:	dfc00415 	stw	ra,16(sp)
 2010bb4:	df000315 	stw	fp,12(sp)
 2010bb8:	df000304 	addi	fp,sp,12
 2010bbc:	e13fff15 	stw	r4,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 2010bc0:	e0bfff17 	ldw	r2,-4(fp)
 2010bc4:	e0bffe15 	stw	r2,-8(fp)
	BaseType_t xReturn = pdFALSE;
 2010bc8:	e03ffd15 	stw	zero,-12(fp)

		if( pxMutexHolder != NULL )
 2010bcc:	e0bfff17 	ldw	r2,-4(fp)
 2010bd0:	10002f26 	beq	r2,zero,2010c90 <xTaskPriorityDisinherit+0xe4>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 2010bd4:	e0bffe17 	ldw	r2,-8(fp)
 2010bd8:	10801b17 	ldw	r2,108(r2)
 2010bdc:	10ffffc4 	addi	r3,r2,-1
 2010be0:	e0bffe17 	ldw	r2,-8(fp)
 2010be4:	10c01b15 	stw	r3,108(r2)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 2010be8:	e0bffe17 	ldw	r2,-8(fp)
 2010bec:	10c00b17 	ldw	r3,44(r2)
 2010bf0:	e0bffe17 	ldw	r2,-8(fp)
 2010bf4:	10801a17 	ldw	r2,104(r2)
 2010bf8:	18802526 	beq	r3,r2,2010c90 <xTaskPriorityDisinherit+0xe4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 2010bfc:	e0bffe17 	ldw	r2,-8(fp)
 2010c00:	10801b17 	ldw	r2,108(r2)
 2010c04:	1000221e 	bne	r2,zero,2010c90 <xTaskPriorityDisinherit+0xe4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2010c08:	e0bffe17 	ldw	r2,-8(fp)
 2010c0c:	10800104 	addi	r2,r2,4
 2010c10:	1009883a 	mov	r4,r2
 2010c14:	2026d940 	call	2026d94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 2010c18:	e0bffe17 	ldw	r2,-8(fp)
 2010c1c:	10c01a17 	ldw	r3,104(r2)
 2010c20:	e0bffe17 	ldw	r2,-8(fp)
 2010c24:	10c00b15 	stw	r3,44(r2)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2010c28:	e0bffe17 	ldw	r2,-8(fp)
 2010c2c:	10800b17 	ldw	r2,44(r2)
 2010c30:	00c00144 	movi	r3,5
 2010c34:	1887c83a 	sub	r3,r3,r2
 2010c38:	e0bffe17 	ldw	r2,-8(fp)
 2010c3c:	10c00615 	stw	r3,24(r2)
					prvAddTaskToReadyList( pxTCB );
 2010c40:	e0bffe17 	ldw	r2,-8(fp)
 2010c44:	10800b17 	ldw	r2,44(r2)
 2010c48:	d0e7d917 	ldw	r3,-24732(gp)
 2010c4c:	1880032e 	bgeu	r3,r2,2010c5c <xTaskPriorityDisinherit+0xb0>
 2010c50:	e0bffe17 	ldw	r2,-8(fp)
 2010c54:	10800b17 	ldw	r2,44(r2)
 2010c58:	d0a7d915 	stw	r2,-24732(gp)
 2010c5c:	e0bffe17 	ldw	r2,-8(fp)
 2010c60:	10800b17 	ldw	r2,44(r2)
 2010c64:	10c00524 	muli	r3,r2,20
 2010c68:	00808134 	movhi	r2,516
 2010c6c:	109e1204 	addi	r2,r2,30792
 2010c70:	1887883a 	add	r3,r3,r2
 2010c74:	e0bffe17 	ldw	r2,-8(fp)
 2010c78:	10800104 	addi	r2,r2,4
 2010c7c:	100b883a 	mov	r5,r2
 2010c80:	1809883a 	mov	r4,r3
 2010c84:	2026c300 	call	2026c30 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 2010c88:	00800044 	movi	r2,1
 2010c8c:	e0bffd15 	stw	r2,-12(fp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 2010c90:	e0bffd17 	ldw	r2,-12(fp)
	}
 2010c94:	e037883a 	mov	sp,fp
 2010c98:	dfc00117 	ldw	ra,4(sp)
 2010c9c:	df000017 	ldw	fp,0(sp)
 2010ca0:	dec00204 	addi	sp,sp,8
 2010ca4:	f800283a 	ret

02010ca8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 2010ca8:	defff804 	addi	sp,sp,-32
 2010cac:	dfc00715 	stw	ra,28(sp)
 2010cb0:	df000615 	stw	fp,24(sp)
 2010cb4:	df000604 	addi	fp,sp,24
 2010cb8:	e13ffe15 	stw	r4,-8(fp)
 2010cbc:	e17fff15 	stw	r5,-4(fp)
	TCB_t * const pxTCB = pxMutexHolder;
 2010cc0:	e0bffe17 	ldw	r2,-8(fp)
 2010cc4:	e0bffb15 	stw	r2,-20(fp)
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 2010cc8:	00800044 	movi	r2,1
 2010ccc:	e0bffc15 	stw	r2,-16(fp)

		if( pxMutexHolder != NULL )
 2010cd0:	e0bffe17 	ldw	r2,-8(fp)
 2010cd4:	10003e26 	beq	r2,zero,2010dd0 <vTaskPriorityDisinheritAfterTimeout+0x128>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 2010cd8:	e0bffb17 	ldw	r2,-20(fp)
 2010cdc:	10c01a17 	ldw	r3,104(r2)
 2010ce0:	e0bfff17 	ldw	r2,-4(fp)
 2010ce4:	1880032e 	bgeu	r3,r2,2010cf4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 2010ce8:	e0bfff17 	ldw	r2,-4(fp)
 2010cec:	e0bffa15 	stw	r2,-24(fp)
 2010cf0:	00000306 	br	2010d00 <vTaskPriorityDisinheritAfterTimeout+0x58>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 2010cf4:	e0bffb17 	ldw	r2,-20(fp)
 2010cf8:	10801a17 	ldw	r2,104(r2)
 2010cfc:	e0bffa15 	stw	r2,-24(fp)
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 2010d00:	e0bffb17 	ldw	r2,-20(fp)
 2010d04:	10c00b17 	ldw	r3,44(r2)
 2010d08:	e0bffa17 	ldw	r2,-24(fp)
 2010d0c:	18803026 	beq	r3,r2,2010dd0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 2010d10:	e0bffb17 	ldw	r2,-20(fp)
 2010d14:	10c01b17 	ldw	r3,108(r2)
 2010d18:	e0bffc17 	ldw	r2,-16(fp)
 2010d1c:	18802c1e 	bne	r3,r2,2010dd0 <vTaskPriorityDisinheritAfterTimeout+0x128>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 2010d20:	e0bffb17 	ldw	r2,-20(fp)
 2010d24:	10800b17 	ldw	r2,44(r2)
 2010d28:	e0bffd15 	stw	r2,-12(fp)
					pxTCB->uxPriority = uxPriorityToUse;
 2010d2c:	e0bffb17 	ldw	r2,-20(fp)
 2010d30:	e0fffa17 	ldw	r3,-24(fp)
 2010d34:	10c00b15 	stw	r3,44(r2)

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 2010d38:	e0bffb17 	ldw	r2,-20(fp)
 2010d3c:	10800617 	ldw	r2,24(r2)
 2010d40:	10000516 	blt	r2,zero,2010d58 <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2010d44:	00c00144 	movi	r3,5
 2010d48:	e0bffa17 	ldw	r2,-24(fp)
 2010d4c:	1887c83a 	sub	r3,r3,r2
 2010d50:	e0bffb17 	ldw	r2,-20(fp)
 2010d54:	10c00615 	stw	r3,24(r2)
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 2010d58:	e0bffb17 	ldw	r2,-20(fp)
 2010d5c:	10c00517 	ldw	r3,20(r2)
 2010d60:	e0bffd17 	ldw	r2,-12(fp)
 2010d64:	11000524 	muli	r4,r2,20
 2010d68:	00808134 	movhi	r2,516
 2010d6c:	109e1204 	addi	r2,r2,30792
 2010d70:	2085883a 	add	r2,r4,r2
 2010d74:	1880161e 	bne	r3,r2,2010dd0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 2010d78:	e0bffb17 	ldw	r2,-20(fp)
 2010d7c:	10800104 	addi	r2,r2,4
 2010d80:	1009883a 	mov	r4,r2
 2010d84:	2026d940 	call	2026d94 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 2010d88:	e0bffb17 	ldw	r2,-20(fp)
 2010d8c:	10800b17 	ldw	r2,44(r2)
 2010d90:	d0e7d917 	ldw	r3,-24732(gp)
 2010d94:	1880032e 	bgeu	r3,r2,2010da4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 2010d98:	e0bffb17 	ldw	r2,-20(fp)
 2010d9c:	10800b17 	ldw	r2,44(r2)
 2010da0:	d0a7d915 	stw	r2,-24732(gp)
 2010da4:	e0bffb17 	ldw	r2,-20(fp)
 2010da8:	10800b17 	ldw	r2,44(r2)
 2010dac:	10c00524 	muli	r3,r2,20
 2010db0:	00808134 	movhi	r2,516
 2010db4:	109e1204 	addi	r2,r2,30792
 2010db8:	1887883a 	add	r3,r3,r2
 2010dbc:	e0bffb17 	ldw	r2,-20(fp)
 2010dc0:	10800104 	addi	r2,r2,4
 2010dc4:	100b883a 	mov	r5,r2
 2010dc8:	1809883a 	mov	r4,r3
 2010dcc:	2026c300 	call	2026c30 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2010dd0:	0001883a 	nop
 2010dd4:	e037883a 	mov	sp,fp
 2010dd8:	dfc00117 	ldw	ra,4(sp)
 2010ddc:	df000017 	ldw	fp,0(sp)
 2010de0:	dec00204 	addi	sp,sp,8
 2010de4:	f800283a 	ret

02010de8 <vTaskEnterCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
 2010de8:	defffe04 	addi	sp,sp,-8
 2010dec:	dfc00115 	stw	ra,4(sp)
 2010df0:	df000015 	stw	fp,0(sp)
 2010df4:	d839883a 	mov	fp,sp
		portDISABLE_INTERRUPTS();
 2010df8:	2026e580 	call	2026e58 <enh_alt_irq_disable_all>

		if( xSchedulerRunning != pdFALSE )
 2010dfc:	d0a7da17 	ldw	r2,-24728(gp)
 2010e00:	10000526 	beq	r2,zero,2010e18 <vTaskEnterCritical+0x30>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
 2010e04:	d0a7d317 	ldw	r2,-24756(gp)
 2010e08:	10c01717 	ldw	r3,92(r2)
 2010e0c:	18c00044 	addi	r3,r3,1
 2010e10:	10c01715 	stw	r3,92(r2)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
 2010e14:	d0a7d317 	ldw	r2,-24756(gp)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2010e18:	0001883a 	nop
 2010e1c:	e037883a 	mov	sp,fp
 2010e20:	dfc00117 	ldw	ra,4(sp)
 2010e24:	df000017 	ldw	fp,0(sp)
 2010e28:	dec00204 	addi	sp,sp,8
 2010e2c:	f800283a 	ret

02010e30 <vTaskExitCritical>:
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
 2010e30:	defffe04 	addi	sp,sp,-8
 2010e34:	dfc00115 	stw	ra,4(sp)
 2010e38:	df000015 	stw	fp,0(sp)
 2010e3c:	d839883a 	mov	fp,sp
		if( xSchedulerRunning != pdFALSE )
 2010e40:	d0a7da17 	ldw	r2,-24728(gp)
 2010e44:	10000b26 	beq	r2,zero,2010e74 <vTaskExitCritical+0x44>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
 2010e48:	d0a7d317 	ldw	r2,-24756(gp)
 2010e4c:	10801717 	ldw	r2,92(r2)
 2010e50:	10000826 	beq	r2,zero,2010e74 <vTaskExitCritical+0x44>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
 2010e54:	d0a7d317 	ldw	r2,-24756(gp)
 2010e58:	10c01717 	ldw	r3,92(r2)
 2010e5c:	18ffffc4 	addi	r3,r3,-1
 2010e60:	10c01715 	stw	r3,92(r2)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
 2010e64:	d0a7d317 	ldw	r2,-24756(gp)
 2010e68:	10801717 	ldw	r2,92(r2)
 2010e6c:	1000011e 	bne	r2,zero,2010e74 <vTaskExitCritical+0x44>
				{
					portENABLE_INTERRUPTS();
 2010e70:	2026ea80 	call	2026ea8 <enh_alt_irq_enable_all>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 2010e74:	0001883a 	nop
 2010e78:	e037883a 	mov	sp,fp
 2010e7c:	dfc00117 	ldw	ra,4(sp)
 2010e80:	df000017 	ldw	fp,0(sp)
 2010e84:	dec00204 	addi	sp,sp,8
 2010e88:	f800283a 	ret

02010e8c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 2010e8c:	defffe04 	addi	sp,sp,-8
 2010e90:	df000115 	stw	fp,4(sp)
 2010e94:	df000104 	addi	fp,sp,4
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 2010e98:	d0a7d317 	ldw	r2,-24756(gp)
 2010e9c:	10800617 	ldw	r2,24(r2)
 2010ea0:	e0bfff15 	stw	r2,-4(fp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2010ea4:	d0a7d317 	ldw	r2,-24756(gp)
 2010ea8:	d0e7d317 	ldw	r3,-24756(gp)
 2010eac:	18c00b17 	ldw	r3,44(r3)
 2010eb0:	01000144 	movi	r4,5
 2010eb4:	20c7c83a 	sub	r3,r4,r3
 2010eb8:	10c00615 	stw	r3,24(r2)

	return uxReturn;
 2010ebc:	e0bfff17 	ldw	r2,-4(fp)
}
 2010ec0:	e037883a 	mov	sp,fp
 2010ec4:	df000017 	ldw	fp,0(sp)
 2010ec8:	dec00104 	addi	sp,sp,4
 2010ecc:	f800283a 	ret

02010ed0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 2010ed0:	deffff04 	addi	sp,sp,-4
 2010ed4:	df000015 	stw	fp,0(sp)
 2010ed8:	d839883a 	mov	fp,sp
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 2010edc:	d0a7d317 	ldw	r2,-24756(gp)
 2010ee0:	10000426 	beq	r2,zero,2010ef4 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 2010ee4:	d0a7d317 	ldw	r2,-24756(gp)
 2010ee8:	10c01b17 	ldw	r3,108(r2)
 2010eec:	18c00044 	addi	r3,r3,1
 2010ef0:	10c01b15 	stw	r3,108(r2)
		}

		return pxCurrentTCB;
 2010ef4:	d0a7d317 	ldw	r2,-24756(gp)
	}
 2010ef8:	e037883a 	mov	sp,fp
 2010efc:	df000017 	ldw	fp,0(sp)
 2010f00:	dec00104 	addi	sp,sp,4
 2010f04:	f800283a 	ret

02010f08 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 2010f08:	defffb04 	addi	sp,sp,-20
 2010f0c:	dfc00415 	stw	ra,16(sp)
 2010f10:	df000315 	stw	fp,12(sp)
 2010f14:	df000304 	addi	fp,sp,12
 2010f18:	e13ffe15 	stw	r4,-8(fp)
 2010f1c:	e17fff15 	stw	r5,-4(fp)
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 2010f20:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2010f24:	10000126 	beq	r2,zero,2010f2c <ulTaskNotifyTake+0x24>
 2010f28:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 2010f2c:	d0a7d317 	ldw	r2,-24756(gp)
 2010f30:	10801c17 	ldw	r2,112(r2)
 2010f34:	1000091e 	bne	r2,zero,2010f5c <ulTaskNotifyTake+0x54>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 2010f38:	d0a7d317 	ldw	r2,-24756(gp)
 2010f3c:	00c00044 	movi	r3,1
 2010f40:	10c01d05 	stb	r3,116(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 2010f44:	e0bfff17 	ldw	r2,-4(fp)
 2010f48:	10000426 	beq	r2,zero,2010f5c <ulTaskNotifyTake+0x54>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2010f4c:	01400044 	movi	r5,1
 2010f50:	e13fff17 	ldw	r4,-4(fp)
 2010f54:	20116bc0 	call	20116bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 2010f58:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 2010f5c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2010f60:	10000126 	beq	r2,zero,2010f68 <ulTaskNotifyTake+0x60>
 2010f64:	2010e300 	call	2010e30 <vTaskExitCritical>

		taskENTER_CRITICAL();
 2010f68:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2010f6c:	10000126 	beq	r2,zero,2010f74 <ulTaskNotifyTake+0x6c>
 2010f70:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 2010f74:	d0a7d317 	ldw	r2,-24756(gp)
 2010f78:	10801c17 	ldw	r2,112(r2)
 2010f7c:	e0bffd15 	stw	r2,-12(fp)

			if( ulReturn != 0UL )
 2010f80:	e0bffd17 	ldw	r2,-12(fp)
 2010f84:	10000926 	beq	r2,zero,2010fac <ulTaskNotifyTake+0xa4>
			{
				if( xClearCountOnExit != pdFALSE )
 2010f88:	e0bffe17 	ldw	r2,-8(fp)
 2010f8c:	10000326 	beq	r2,zero,2010f9c <ulTaskNotifyTake+0x94>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 2010f90:	d0a7d317 	ldw	r2,-24756(gp)
 2010f94:	10001c15 	stw	zero,112(r2)
 2010f98:	00000406 	br	2010fac <ulTaskNotifyTake+0xa4>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 2010f9c:	d0a7d317 	ldw	r2,-24756(gp)
 2010fa0:	e0fffd17 	ldw	r3,-12(fp)
 2010fa4:	18ffffc4 	addi	r3,r3,-1
 2010fa8:	10c01c15 	stw	r3,112(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 2010fac:	d0a7d317 	ldw	r2,-24756(gp)
 2010fb0:	10001d05 	stb	zero,116(r2)
		}
		taskEXIT_CRITICAL();
 2010fb4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2010fb8:	10000126 	beq	r2,zero,2010fc0 <ulTaskNotifyTake+0xb8>
 2010fbc:	2010e300 	call	2010e30 <vTaskExitCritical>

		return ulReturn;
 2010fc0:	e0bffd17 	ldw	r2,-12(fp)
	}
 2010fc4:	e037883a 	mov	sp,fp
 2010fc8:	dfc00117 	ldw	ra,4(sp)
 2010fcc:	df000017 	ldw	fp,0(sp)
 2010fd0:	dec00204 	addi	sp,sp,8
 2010fd4:	f800283a 	ret

02010fd8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 2010fd8:	defff904 	addi	sp,sp,-28
 2010fdc:	dfc00615 	stw	ra,24(sp)
 2010fe0:	df000515 	stw	fp,20(sp)
 2010fe4:	df000504 	addi	fp,sp,20
 2010fe8:	e13ffc15 	stw	r4,-16(fp)
 2010fec:	e17ffd15 	stw	r5,-12(fp)
 2010ff0:	e1bffe15 	stw	r6,-8(fp)
 2010ff4:	e1ffff15 	stw	r7,-4(fp)
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 2010ff8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2010ffc:	10000126 	beq	r2,zero,2011004 <xTaskNotifyWait+0x2c>
 2011000:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 2011004:	d0a7d317 	ldw	r2,-24756(gp)
 2011008:	10801d03 	ldbu	r2,116(r2)
 201100c:	10803fcc 	andi	r2,r2,255
 2011010:	108000a0 	cmpeqi	r2,r2,2
 2011014:	10000f1e 	bne	r2,zero,2011054 <xTaskNotifyWait+0x7c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 2011018:	d0a7d317 	ldw	r2,-24756(gp)
 201101c:	11001c17 	ldw	r4,112(r2)
 2011020:	e0fffc17 	ldw	r3,-16(fp)
 2011024:	00c6303a 	nor	r3,zero,r3
 2011028:	20c6703a 	and	r3,r4,r3
 201102c:	10c01c15 	stw	r3,112(r2)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 2011030:	d0a7d317 	ldw	r2,-24756(gp)
 2011034:	00c00044 	movi	r3,1
 2011038:	10c01d05 	stb	r3,116(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
 201103c:	e0bfff17 	ldw	r2,-4(fp)
 2011040:	10000426 	beq	r2,zero,2011054 <xTaskNotifyWait+0x7c>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2011044:	01400044 	movi	r5,1
 2011048:	e13fff17 	ldw	r4,-4(fp)
 201104c:	20116bc0 	call	20116bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 2011050:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 2011054:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2011058:	10000126 	beq	r2,zero,2011060 <xTaskNotifyWait+0x88>
 201105c:	2010e300 	call	2010e30 <vTaskExitCritical>

		taskENTER_CRITICAL();
 2011060:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2011064:	10000126 	beq	r2,zero,201106c <xTaskNotifyWait+0x94>
 2011068:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 201106c:	e0bffe17 	ldw	r2,-8(fp)
 2011070:	10000426 	beq	r2,zero,2011084 <xTaskNotifyWait+0xac>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 2011074:	d0a7d317 	ldw	r2,-24756(gp)
 2011078:	10c01c17 	ldw	r3,112(r2)
 201107c:	e0bffe17 	ldw	r2,-8(fp)
 2011080:	10c00015 	stw	r3,0(r2)

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 2011084:	d0a7d317 	ldw	r2,-24756(gp)
 2011088:	10801d03 	ldbu	r2,116(r2)
 201108c:	10803fcc 	andi	r2,r2,255
 2011090:	108000a0 	cmpeqi	r2,r2,2
 2011094:	1000021e 	bne	r2,zero,20110a0 <xTaskNotifyWait+0xc8>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 2011098:	e03ffb15 	stw	zero,-20(fp)
 201109c:	00000806 	br	20110c0 <xTaskNotifyWait+0xe8>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 20110a0:	d0a7d317 	ldw	r2,-24756(gp)
 20110a4:	11001c17 	ldw	r4,112(r2)
 20110a8:	e0fffd17 	ldw	r3,-12(fp)
 20110ac:	00c6303a 	nor	r3,zero,r3
 20110b0:	20c6703a 	and	r3,r4,r3
 20110b4:	10c01c15 	stw	r3,112(r2)
				xReturn = pdTRUE;
 20110b8:	00800044 	movi	r2,1
 20110bc:	e0bffb15 	stw	r2,-20(fp)
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 20110c0:	d0a7d317 	ldw	r2,-24756(gp)
 20110c4:	10001d05 	stb	zero,116(r2)
		}
		taskEXIT_CRITICAL();
 20110c8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20110cc:	10000126 	beq	r2,zero,20110d4 <xTaskNotifyWait+0xfc>
 20110d0:	2010e300 	call	2010e30 <vTaskExitCritical>

		return xReturn;
 20110d4:	e0bffb17 	ldw	r2,-20(fp)
	}
 20110d8:	e037883a 	mov	sp,fp
 20110dc:	dfc00117 	ldw	ra,4(sp)
 20110e0:	df000017 	ldw	fp,0(sp)
 20110e4:	dec00204 	addi	sp,sp,8
 20110e8:	f800283a 	ret

020110ec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 20110ec:	defff704 	addi	sp,sp,-36
 20110f0:	dfc00815 	stw	ra,32(sp)
 20110f4:	df000715 	stw	fp,28(sp)
 20110f8:	df000704 	addi	fp,sp,28
 20110fc:	e13ffc15 	stw	r4,-16(fp)
 2011100:	e17ffd15 	stw	r5,-12(fp)
 2011104:	e1bffe15 	stw	r6,-8(fp)
 2011108:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 201110c:	00800044 	movi	r2,1
 2011110:	e0bff915 	stw	r2,-28(fp)
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = xTaskToNotify;
 2011114:	e0bffc17 	ldw	r2,-16(fp)
 2011118:	e0bffa15 	stw	r2,-24(fp)

		taskENTER_CRITICAL();
 201111c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2011120:	10000126 	beq	r2,zero,2011128 <xTaskGenericNotify+0x3c>
 2011124:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 2011128:	e0bfff17 	ldw	r2,-4(fp)
 201112c:	10000426 	beq	r2,zero,2011140 <xTaskGenericNotify+0x54>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 2011130:	e0bffa17 	ldw	r2,-24(fp)
 2011134:	10c01c17 	ldw	r3,112(r2)
 2011138:	e0bfff17 	ldw	r2,-4(fp)
 201113c:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 2011140:	e0bffa17 	ldw	r2,-24(fp)
 2011144:	10801d03 	ldbu	r2,116(r2)
 2011148:	e0bffb05 	stb	r2,-20(fp)

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 201114c:	e0bffa17 	ldw	r2,-24(fp)
 2011150:	00c00084 	movi	r3,2
 2011154:	10c01d05 	stb	r3,116(r2)

			switch( eAction )
 2011158:	e0bffe17 	ldw	r2,-8(fp)
 201115c:	10800168 	cmpgeui	r2,r2,5
 2011160:	1000261e 	bne	r2,zero,20111fc <xTaskGenericNotify+0x110>
 2011164:	e0bffe17 	ldw	r2,-8(fp)
 2011168:	100690ba 	slli	r3,r2,2
 201116c:	00808074 	movhi	r2,513
 2011170:	10846004 	addi	r2,r2,4480
 2011174:	1885883a 	add	r2,r3,r2
 2011178:	10800017 	ldw	r2,0(r2)
 201117c:	1000683a 	jmp	r2
 2011180:	02011204 	movi	r8,1096
 2011184:	02011194 	movui	r8,1094
 2011188:	020111b0 	cmpltui	r8,zero,1094
 201118c:	020111c8 	cmpgei	r8,zero,1095
 2011190:	020111d8 	cmpnei	r8,zero,1095
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 2011194:	e0bffa17 	ldw	r2,-24(fp)
 2011198:	10c01c17 	ldw	r3,112(r2)
 201119c:	e0bffd17 	ldw	r2,-12(fp)
 20111a0:	1886b03a 	or	r3,r3,r2
 20111a4:	e0bffa17 	ldw	r2,-24(fp)
 20111a8:	10c01c15 	stw	r3,112(r2)
					break;
 20111ac:	00001606 	br	2011208 <xTaskGenericNotify+0x11c>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 20111b0:	e0bffa17 	ldw	r2,-24(fp)
 20111b4:	10801c17 	ldw	r2,112(r2)
 20111b8:	10c00044 	addi	r3,r2,1
 20111bc:	e0bffa17 	ldw	r2,-24(fp)
 20111c0:	10c01c15 	stw	r3,112(r2)
					break;
 20111c4:	00001006 	br	2011208 <xTaskGenericNotify+0x11c>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 20111c8:	e0bffa17 	ldw	r2,-24(fp)
 20111cc:	e0fffd17 	ldw	r3,-12(fp)
 20111d0:	10c01c15 	stw	r3,112(r2)
					break;
 20111d4:	00000c06 	br	2011208 <xTaskGenericNotify+0x11c>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 20111d8:	e0bffb03 	ldbu	r2,-20(fp)
 20111dc:	108000a0 	cmpeqi	r2,r2,2
 20111e0:	1000041e 	bne	r2,zero,20111f4 <xTaskGenericNotify+0x108>
					{
						pxTCB->ulNotifiedValue = ulValue;
 20111e4:	e0bffa17 	ldw	r2,-24(fp)
 20111e8:	e0fffd17 	ldw	r3,-12(fp)
 20111ec:	10c01c15 	stw	r3,112(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 20111f0:	00000506 	br	2011208 <xTaskGenericNotify+0x11c>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 20111f4:	e03ff915 	stw	zero,-28(fp)
					}
					break;
 20111f8:	00000306 	br	2011208 <xTaskGenericNotify+0x11c>
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );

					break;
 20111fc:	0001883a 	nop
 2011200:	00000106 	br	2011208 <xTaskGenericNotify+0x11c>
					break;

				case eNoAction:
					/* The task is being notified without its notify value being
					updated. */
					break;
 2011204:	0001883a 	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 2011208:	e0bffb03 	ldbu	r2,-20(fp)
 201120c:	10800058 	cmpnei	r2,r2,1
 2011210:	10001c1e 	bne	r2,zero,2011284 <xTaskGenericNotify+0x198>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2011214:	e0bffa17 	ldw	r2,-24(fp)
 2011218:	10800104 	addi	r2,r2,4
 201121c:	1009883a 	mov	r4,r2
 2011220:	2026d940 	call	2026d94 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 2011224:	e0bffa17 	ldw	r2,-24(fp)
 2011228:	10800b17 	ldw	r2,44(r2)
 201122c:	d0e7d917 	ldw	r3,-24732(gp)
 2011230:	1880032e 	bgeu	r3,r2,2011240 <xTaskGenericNotify+0x154>
 2011234:	e0bffa17 	ldw	r2,-24(fp)
 2011238:	10800b17 	ldw	r2,44(r2)
 201123c:	d0a7d915 	stw	r2,-24732(gp)
 2011240:	e0bffa17 	ldw	r2,-24(fp)
 2011244:	10800b17 	ldw	r2,44(r2)
 2011248:	10c00524 	muli	r3,r2,20
 201124c:	00808134 	movhi	r2,516
 2011250:	109e1204 	addi	r2,r2,30792
 2011254:	1887883a 	add	r3,r3,r2
 2011258:	e0bffa17 	ldw	r2,-24(fp)
 201125c:	10800104 	addi	r2,r2,4
 2011260:	100b883a 	mov	r5,r2
 2011264:	1809883a 	mov	r4,r3
 2011268:	2026c300 	call	2026c30 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 201126c:	e0bffa17 	ldw	r2,-24(fp)
 2011270:	10800b17 	ldw	r2,44(r2)
 2011274:	d0e7d317 	ldw	r3,-24756(gp)
 2011278:	18c00b17 	ldw	r3,44(r3)
 201127c:	1880012e 	bgeu	r3,r2,2011284 <xTaskGenericNotify+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 2011280:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 2011284:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2011288:	10000126 	beq	r2,zero,2011290 <xTaskGenericNotify+0x1a4>
 201128c:	2010e300 	call	2010e30 <vTaskExitCritical>

		return xReturn;
 2011290:	e0bff917 	ldw	r2,-28(fp)
	}
 2011294:	e037883a 	mov	sp,fp
 2011298:	dfc00117 	ldw	ra,4(sp)
 201129c:	df000017 	ldw	fp,0(sp)
 20112a0:	dec00204 	addi	sp,sp,8
 20112a4:	f800283a 	ret

020112a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 20112a8:	defff604 	addi	sp,sp,-40
 20112ac:	dfc00915 	stw	ra,36(sp)
 20112b0:	df000815 	stw	fp,32(sp)
 20112b4:	df000804 	addi	fp,sp,32
 20112b8:	e13ffc15 	stw	r4,-16(fp)
 20112bc:	e17ffd15 	stw	r5,-12(fp)
 20112c0:	e1bffe15 	stw	r6,-8(fp)
 20112c4:	e1ffff15 	stw	r7,-4(fp)
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 20112c8:	00800044 	movi	r2,1
 20112cc:	e0bff815 	stw	r2,-32(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 20112d0:	e0bffc17 	ldw	r2,-16(fp)
 20112d4:	e0bff915 	stw	r2,-28(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20112d8:	e03ffa15 	stw	zero,-24(fp)
		{
			if( pulPreviousNotificationValue != NULL )
 20112dc:	e0bfff17 	ldw	r2,-4(fp)
 20112e0:	10000426 	beq	r2,zero,20112f4 <xTaskGenericNotifyFromISR+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 20112e4:	e0bff917 	ldw	r2,-28(fp)
 20112e8:	10c01c17 	ldw	r3,112(r2)
 20112ec:	e0bfff17 	ldw	r2,-4(fp)
 20112f0:	10c00015 	stw	r3,0(r2)
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 20112f4:	e0bff917 	ldw	r2,-28(fp)
 20112f8:	10801d03 	ldbu	r2,116(r2)
 20112fc:	e0bffb05 	stb	r2,-20(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 2011300:	e0bff917 	ldw	r2,-28(fp)
 2011304:	00c00084 	movi	r3,2
 2011308:	10c01d05 	stb	r3,116(r2)

			switch( eAction )
 201130c:	e0bffe17 	ldw	r2,-8(fp)
 2011310:	10800168 	cmpgeui	r2,r2,5
 2011314:	1000261e 	bne	r2,zero,20113b0 <xTaskGenericNotifyFromISR+0x108>
 2011318:	e0bffe17 	ldw	r2,-8(fp)
 201131c:	100690ba 	slli	r3,r2,2
 2011320:	00808074 	movhi	r2,513
 2011324:	1084cd04 	addi	r2,r2,4916
 2011328:	1885883a 	add	r2,r3,r2
 201132c:	10800017 	ldw	r2,0(r2)
 2011330:	1000683a 	jmp	r2
 2011334:	020113b8 	rdprs	r8,zero,1102
 2011338:	02011348 	cmpgei	r8,zero,1101
 201133c:	02011364 	muli	r8,zero,1101
 2011340:	0201137c 	xorhi	r8,zero,1101
 2011344:	0201138c 	andi	r8,zero,1102
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 2011348:	e0bff917 	ldw	r2,-28(fp)
 201134c:	10c01c17 	ldw	r3,112(r2)
 2011350:	e0bffd17 	ldw	r2,-12(fp)
 2011354:	1886b03a 	or	r3,r3,r2
 2011358:	e0bff917 	ldw	r2,-28(fp)
 201135c:	10c01c15 	stw	r3,112(r2)
					break;
 2011360:	00001606 	br	20113bc <xTaskGenericNotifyFromISR+0x114>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 2011364:	e0bff917 	ldw	r2,-28(fp)
 2011368:	10801c17 	ldw	r2,112(r2)
 201136c:	10c00044 	addi	r3,r2,1
 2011370:	e0bff917 	ldw	r2,-28(fp)
 2011374:	10c01c15 	stw	r3,112(r2)
					break;
 2011378:	00001006 	br	20113bc <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 201137c:	e0bff917 	ldw	r2,-28(fp)
 2011380:	e0fffd17 	ldw	r3,-12(fp)
 2011384:	10c01c15 	stw	r3,112(r2)
					break;
 2011388:	00000c06 	br	20113bc <xTaskGenericNotifyFromISR+0x114>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 201138c:	e0bffb03 	ldbu	r2,-20(fp)
 2011390:	108000a0 	cmpeqi	r2,r2,2
 2011394:	1000041e 	bne	r2,zero,20113a8 <xTaskGenericNotifyFromISR+0x100>
					{
						pxTCB->ulNotifiedValue = ulValue;
 2011398:	e0bff917 	ldw	r2,-28(fp)
 201139c:	e0fffd17 	ldw	r3,-12(fp)
 20113a0:	10c01c15 	stw	r3,112(r2)
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 20113a4:	00000506 	br	20113bc <xTaskGenericNotifyFromISR+0x114>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 20113a8:	e03ff815 	stw	zero,-32(fp)
					}
					break;
 20113ac:	00000306 	br	20113bc <xTaskGenericNotifyFromISR+0x114>
				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
					break;
 20113b0:	0001883a 	nop
 20113b4:	00000106 	br	20113bc <xTaskGenericNotifyFromISR+0x114>
					break;

				case eNoAction :
					/* The task is being notified without its notify value being
					updated. */
					break;
 20113b8:	0001883a 	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 20113bc:	e0bffb03 	ldbu	r2,-20(fp)
 20113c0:	10800058 	cmpnei	r2,r2,1
 20113c4:	10002b1e 	bne	r2,zero,2011474 <xTaskGenericNotifyFromISR+0x1cc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20113c8:	d0a7e117 	ldw	r2,-24700(gp)
 20113cc:	1000171e 	bne	r2,zero,201142c <xTaskGenericNotifyFromISR+0x184>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 20113d0:	e0bff917 	ldw	r2,-28(fp)
 20113d4:	10800104 	addi	r2,r2,4
 20113d8:	1009883a 	mov	r4,r2
 20113dc:	2026d940 	call	2026d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 20113e0:	e0bff917 	ldw	r2,-28(fp)
 20113e4:	10800b17 	ldw	r2,44(r2)
 20113e8:	d0e7d917 	ldw	r3,-24732(gp)
 20113ec:	1880032e 	bgeu	r3,r2,20113fc <xTaskGenericNotifyFromISR+0x154>
 20113f0:	e0bff917 	ldw	r2,-28(fp)
 20113f4:	10800b17 	ldw	r2,44(r2)
 20113f8:	d0a7d915 	stw	r2,-24732(gp)
 20113fc:	e0bff917 	ldw	r2,-28(fp)
 2011400:	10800b17 	ldw	r2,44(r2)
 2011404:	10c00524 	muli	r3,r2,20
 2011408:	00808134 	movhi	r2,516
 201140c:	109e1204 	addi	r2,r2,30792
 2011410:	1887883a 	add	r3,r3,r2
 2011414:	e0bff917 	ldw	r2,-28(fp)
 2011418:	10800104 	addi	r2,r2,4
 201141c:	100b883a 	mov	r5,r2
 2011420:	1809883a 	mov	r4,r3
 2011424:	2026c300 	call	2026c30 <vListInsertEnd>
 2011428:	00000606 	br	2011444 <xTaskGenericNotifyFromISR+0x19c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 201142c:	e0bff917 	ldw	r2,-28(fp)
 2011430:	10800604 	addi	r2,r2,24
 2011434:	100b883a 	mov	r5,r2
 2011438:	01008134 	movhi	r4,516
 201143c:	211e3504 	addi	r4,r4,30932
 2011440:	2026c300 	call	2026c30 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 2011444:	e0bff917 	ldw	r2,-28(fp)
 2011448:	10800b17 	ldw	r2,44(r2)
 201144c:	d0e7d317 	ldw	r3,-24756(gp)
 2011450:	18c00b17 	ldw	r3,44(r3)
 2011454:	1880072e 	bgeu	r3,r2,2011474 <xTaskGenericNotifyFromISR+0x1cc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 2011458:	e0800217 	ldw	r2,8(fp)
 201145c:	10000326 	beq	r2,zero,201146c <xTaskGenericNotifyFromISR+0x1c4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 2011460:	e0800217 	ldw	r2,8(fp)
 2011464:	00c00044 	movi	r3,1
 2011468:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 201146c:	00800044 	movi	r2,1
 2011470:	d0a7dc15 	stw	r2,-24720(gp)
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 2011474:	e0bff817 	ldw	r2,-32(fp)
	}
 2011478:	e037883a 	mov	sp,fp
 201147c:	dfc00117 	ldw	ra,4(sp)
 2011480:	df000017 	ldw	fp,0(sp)
 2011484:	dec00204 	addi	sp,sp,8
 2011488:	f800283a 	ret

0201148c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 201148c:	defff904 	addi	sp,sp,-28
 2011490:	dfc00615 	stw	ra,24(sp)
 2011494:	df000515 	stw	fp,20(sp)
 2011498:	df000504 	addi	fp,sp,20
 201149c:	e13ffe15 	stw	r4,-8(fp)
 20114a0:	e17fff15 	stw	r5,-4(fp)
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 20114a4:	e0bffe17 	ldw	r2,-8(fp)
 20114a8:	e0bffb15 	stw	r2,-20(fp)

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 20114ac:	e03ffc15 	stw	zero,-16(fp)
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 20114b0:	e0bffb17 	ldw	r2,-20(fp)
 20114b4:	10801d03 	ldbu	r2,116(r2)
 20114b8:	e0bffd05 	stb	r2,-12(fp)
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 20114bc:	e0bffb17 	ldw	r2,-20(fp)
 20114c0:	00c00084 	movi	r3,2
 20114c4:	10c01d05 	stb	r3,116(r2)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 20114c8:	e0bffb17 	ldw	r2,-20(fp)
 20114cc:	10801c17 	ldw	r2,112(r2)
 20114d0:	10c00044 	addi	r3,r2,1
 20114d4:	e0bffb17 	ldw	r2,-20(fp)
 20114d8:	10c01c15 	stw	r3,112(r2)

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 20114dc:	e0bffd03 	ldbu	r2,-12(fp)
 20114e0:	10800058 	cmpnei	r2,r2,1
 20114e4:	10002b1e 	bne	r2,zero,2011594 <vTaskNotifyGiveFromISR+0x108>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 20114e8:	d0a7e117 	ldw	r2,-24700(gp)
 20114ec:	1000171e 	bne	r2,zero,201154c <vTaskNotifyGiveFromISR+0xc0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 20114f0:	e0bffb17 	ldw	r2,-20(fp)
 20114f4:	10800104 	addi	r2,r2,4
 20114f8:	1009883a 	mov	r4,r2
 20114fc:	2026d940 	call	2026d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 2011500:	e0bffb17 	ldw	r2,-20(fp)
 2011504:	10800b17 	ldw	r2,44(r2)
 2011508:	d0e7d917 	ldw	r3,-24732(gp)
 201150c:	1880032e 	bgeu	r3,r2,201151c <vTaskNotifyGiveFromISR+0x90>
 2011510:	e0bffb17 	ldw	r2,-20(fp)
 2011514:	10800b17 	ldw	r2,44(r2)
 2011518:	d0a7d915 	stw	r2,-24732(gp)
 201151c:	e0bffb17 	ldw	r2,-20(fp)
 2011520:	10800b17 	ldw	r2,44(r2)
 2011524:	10c00524 	muli	r3,r2,20
 2011528:	00808134 	movhi	r2,516
 201152c:	109e1204 	addi	r2,r2,30792
 2011530:	1887883a 	add	r3,r3,r2
 2011534:	e0bffb17 	ldw	r2,-20(fp)
 2011538:	10800104 	addi	r2,r2,4
 201153c:	100b883a 	mov	r5,r2
 2011540:	1809883a 	mov	r4,r3
 2011544:	2026c300 	call	2026c30 <vListInsertEnd>
 2011548:	00000606 	br	2011564 <vTaskNotifyGiveFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 201154c:	e0bffb17 	ldw	r2,-20(fp)
 2011550:	10800604 	addi	r2,r2,24
 2011554:	100b883a 	mov	r5,r2
 2011558:	01008134 	movhi	r4,516
 201155c:	211e3504 	addi	r4,r4,30932
 2011560:	2026c300 	call	2026c30 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 2011564:	e0bffb17 	ldw	r2,-20(fp)
 2011568:	10800b17 	ldw	r2,44(r2)
 201156c:	d0e7d317 	ldw	r3,-24756(gp)
 2011570:	18c00b17 	ldw	r3,44(r3)
 2011574:	1880072e 	bgeu	r3,r2,2011594 <vTaskNotifyGiveFromISR+0x108>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 2011578:	e0bfff17 	ldw	r2,-4(fp)
 201157c:	10000326 	beq	r2,zero,201158c <vTaskNotifyGiveFromISR+0x100>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 2011580:	e0bfff17 	ldw	r2,-4(fp)
 2011584:	00c00044 	movi	r3,1
 2011588:	10c00015 	stw	r3,0(r2)
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 201158c:	00800044 	movi	r2,1
 2011590:	d0a7dc15 	stw	r2,-24720(gp)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 2011594:	0001883a 	nop
 2011598:	e037883a 	mov	sp,fp
 201159c:	dfc00117 	ldw	ra,4(sp)
 20115a0:	df000017 	ldw	fp,0(sp)
 20115a4:	dec00204 	addi	sp,sp,8
 20115a8:	f800283a 	ret

020115ac <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 20115ac:	defffb04 	addi	sp,sp,-20
 20115b0:	dfc00415 	stw	ra,16(sp)
 20115b4:	df000315 	stw	fp,12(sp)
 20115b8:	df000304 	addi	fp,sp,12
 20115bc:	e13fff15 	stw	r4,-4(fp)
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 20115c0:	e0bfff17 	ldw	r2,-4(fp)
 20115c4:	1000021e 	bne	r2,zero,20115d0 <xTaskNotifyStateClear+0x24>
 20115c8:	d0a7d317 	ldw	r2,-24756(gp)
 20115cc:	00000106 	br	20115d4 <xTaskNotifyStateClear+0x28>
 20115d0:	e0bfff17 	ldw	r2,-4(fp)
 20115d4:	e0bffe15 	stw	r2,-8(fp)

		taskENTER_CRITICAL();
 20115d8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20115dc:	10000126 	beq	r2,zero,20115e4 <xTaskNotifyStateClear+0x38>
 20115e0:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 20115e4:	e0bffe17 	ldw	r2,-8(fp)
 20115e8:	10801d03 	ldbu	r2,116(r2)
 20115ec:	10803fcc 	andi	r2,r2,255
 20115f0:	10800098 	cmpnei	r2,r2,2
 20115f4:	1000051e 	bne	r2,zero,201160c <xTaskNotifyStateClear+0x60>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 20115f8:	e0bffe17 	ldw	r2,-8(fp)
 20115fc:	10001d05 	stb	zero,116(r2)
				xReturn = pdPASS;
 2011600:	00800044 	movi	r2,1
 2011604:	e0bffd15 	stw	r2,-12(fp)
 2011608:	00000106 	br	2011610 <xTaskNotifyStateClear+0x64>
			}
			else
			{
				xReturn = pdFAIL;
 201160c:	e03ffd15 	stw	zero,-12(fp)
			}
		}
		taskEXIT_CRITICAL();
 2011610:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2011614:	10000126 	beq	r2,zero,201161c <xTaskNotifyStateClear+0x70>
 2011618:	2010e300 	call	2010e30 <vTaskExitCritical>

		return xReturn;
 201161c:	e0bffd17 	ldw	r2,-12(fp)
	}
 2011620:	e037883a 	mov	sp,fp
 2011624:	dfc00117 	ldw	ra,4(sp)
 2011628:	df000017 	ldw	fp,0(sp)
 201162c:	dec00204 	addi	sp,sp,8
 2011630:	f800283a 	ret

02011634 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 2011634:	defffa04 	addi	sp,sp,-24
 2011638:	dfc00515 	stw	ra,20(sp)
 201163c:	df000415 	stw	fp,16(sp)
 2011640:	df000404 	addi	fp,sp,16
 2011644:	e13ffe15 	stw	r4,-8(fp)
 2011648:	e17fff15 	stw	r5,-4(fp)
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 201164c:	e0bffe17 	ldw	r2,-8(fp)
 2011650:	1000021e 	bne	r2,zero,201165c <ulTaskNotifyValueClear+0x28>
 2011654:	d0a7d317 	ldw	r2,-24756(gp)
 2011658:	00000106 	br	2011660 <ulTaskNotifyValueClear+0x2c>
 201165c:	e0bffe17 	ldw	r2,-8(fp)
 2011660:	e0bffc15 	stw	r2,-16(fp)

		taskENTER_CRITICAL();
 2011664:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2011668:	10000126 	beq	r2,zero,2011670 <ulTaskNotifyValueClear+0x3c>
 201166c:	2010de80 	call	2010de8 <vTaskEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 2011670:	d0a7d317 	ldw	r2,-24756(gp)
 2011674:	10801c17 	ldw	r2,112(r2)
 2011678:	e0bffd15 	stw	r2,-12(fp)
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 201167c:	e0bffc17 	ldw	r2,-16(fp)
 2011680:	10c01c17 	ldw	r3,112(r2)
 2011684:	e0bfff17 	ldw	r2,-4(fp)
 2011688:	0084303a 	nor	r2,zero,r2
 201168c:	1886703a 	and	r3,r3,r2
 2011690:	e0bffc17 	ldw	r2,-16(fp)
 2011694:	10c01c15 	stw	r3,112(r2)
		}
		taskEXIT_CRITICAL();
 2011698:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201169c:	10000126 	beq	r2,zero,20116a4 <ulTaskNotifyValueClear+0x70>
 20116a0:	2010e300 	call	2010e30 <vTaskExitCritical>

		return ulReturn;
 20116a4:	e0bffd17 	ldw	r2,-12(fp)
	}
 20116a8:	e037883a 	mov	sp,fp
 20116ac:	dfc00117 	ldw	ra,4(sp)
 20116b0:	df000017 	ldw	fp,0(sp)
 20116b4:	dec00204 	addi	sp,sp,8
 20116b8:	f800283a 	ret

020116bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 20116bc:	defffa04 	addi	sp,sp,-24
 20116c0:	dfc00515 	stw	ra,20(sp)
 20116c4:	df000415 	stw	fp,16(sp)
 20116c8:	df000404 	addi	fp,sp,16
 20116cc:	e13ffe15 	stw	r4,-8(fp)
 20116d0:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 20116d4:	d0a7d817 	ldw	r2,-24736(gp)
 20116d8:	e0bffc15 	stw	r2,-16(fp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 20116dc:	d0a7d317 	ldw	r2,-24756(gp)
 20116e0:	10800104 	addi	r2,r2,4
 20116e4:	1009883a 	mov	r4,r2
 20116e8:	2026d940 	call	2026d94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 20116ec:	e0bffe17 	ldw	r2,-8(fp)
 20116f0:	10bfffd8 	cmpnei	r2,r2,-1
 20116f4:	1000091e 	bne	r2,zero,201171c <prvAddCurrentTaskToDelayedList+0x60>
 20116f8:	e0bfff17 	ldw	r2,-4(fp)
 20116fc:	10000726 	beq	r2,zero,201171c <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 2011700:	d0a7d317 	ldw	r2,-24756(gp)
 2011704:	10800104 	addi	r2,r2,4
 2011708:	100b883a 	mov	r5,r2
 201170c:	01008134 	movhi	r4,516
 2011710:	211e3f04 	addi	r4,r4,30972
 2011714:	2026c300 	call	2026c30 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 2011718:	00001c06 	br	201178c <prvAddCurrentTaskToDelayedList+0xd0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 201171c:	e0fffc17 	ldw	r3,-16(fp)
 2011720:	e0bffe17 	ldw	r2,-8(fp)
 2011724:	1885883a 	add	r2,r3,r2
 2011728:	e0bffd15 	stw	r2,-12(fp)

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 201172c:	d0a7d317 	ldw	r2,-24756(gp)
 2011730:	e0fffd17 	ldw	r3,-12(fp)
 2011734:	10c00115 	stw	r3,4(r2)

			if( xTimeToWake < xConstTickCount )
 2011738:	e0fffd17 	ldw	r3,-12(fp)
 201173c:	e0bffc17 	ldw	r2,-16(fp)
 2011740:	1880072e 	bgeu	r3,r2,2011760 <prvAddCurrentTaskToDelayedList+0xa4>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 2011744:	d0e7d517 	ldw	r3,-24748(gp)
 2011748:	d0a7d317 	ldw	r2,-24756(gp)
 201174c:	10800104 	addi	r2,r2,4
 2011750:	100b883a 	mov	r5,r2
 2011754:	1809883a 	mov	r4,r3
 2011758:	2026cbc0 	call	2026cbc <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 201175c:	00000b06 	br	201178c <prvAddCurrentTaskToDelayedList+0xd0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 2011760:	d0e7d417 	ldw	r3,-24752(gp)
 2011764:	d0a7d317 	ldw	r2,-24756(gp)
 2011768:	10800104 	addi	r2,r2,4
 201176c:	100b883a 	mov	r5,r2
 2011770:	1809883a 	mov	r4,r3
 2011774:	2026cbc0 	call	2026cbc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 2011778:	d0a7df17 	ldw	r2,-24708(gp)
 201177c:	e0fffd17 	ldw	r3,-12(fp)
 2011780:	1880022e 	bgeu	r3,r2,201178c <prvAddCurrentTaskToDelayedList+0xd0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 2011784:	e0bffd17 	ldw	r2,-12(fp)
 2011788:	d0a7df15 	stw	r2,-24708(gp)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 201178c:	0001883a 	nop
 2011790:	e037883a 	mov	sp,fp
 2011794:	dfc00117 	ldw	ra,4(sp)
 2011798:	df000017 	ldw	fp,0(sp)
 201179c:	dec00204 	addi	sp,sp,8
 20117a0:	f800283a 	ret

020117a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 20117a4:	defffb04 	addi	sp,sp,-20
 20117a8:	dfc00415 	stw	ra,16(sp)
 20117ac:	df000315 	stw	fp,12(sp)
 20117b0:	df000304 	addi	fp,sp,12
BaseType_t xReturn = pdFAIL;
 20117b4:	e03fff15 	stw	zero,-4(fp)

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 20117b8:	201226c0 	call	201226c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 20117bc:	d0a7e417 	ldw	r2,-24688(gp)
 20117c0:	10000c26 	beq	r2,zero,20117f4 <xTimerCreateTimerTask+0x50>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 20117c4:	d0a7e504 	addi	r2,gp,-24684
 20117c8:	d8800115 	stw	r2,4(sp)
 20117cc:	00800144 	movi	r2,5
 20117d0:	d8800015 	stw	r2,0(sp)
 20117d4:	000f883a 	mov	r7,zero
 20117d8:	01840004 	movi	r6,4096
 20117dc:	01408134 	movhi	r5,516
 20117e0:	29442704 	addi	r5,r5,4252
 20117e4:	01008074 	movhi	r4,513
 20117e8:	21072504 	addi	r4,r4,7316
 20117ec:	200ead40 	call	200ead4 <xTaskCreate>
 20117f0:	e0bfff15 	stw	r2,-4(fp)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 20117f4:	e0bfff17 	ldw	r2,-4(fp)
}
 20117f8:	e037883a 	mov	sp,fp
 20117fc:	dfc00117 	ldw	ra,4(sp)
 2011800:	df000017 	ldw	fp,0(sp)
 2011804:	dec00204 	addi	sp,sp,8
 2011808:	f800283a 	ret

0201180c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 201180c:	defff704 	addi	sp,sp,-36
 2011810:	dfc00815 	stw	ra,32(sp)
 2011814:	df000715 	stw	fp,28(sp)
 2011818:	df000704 	addi	fp,sp,28
 201181c:	e13ffc15 	stw	r4,-16(fp)
 2011820:	e17ffd15 	stw	r5,-12(fp)
 2011824:	e1bffe15 	stw	r6,-8(fp)
 2011828:	e1ffff15 	stw	r7,-4(fp)
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 201182c:	01000b04 	movi	r4,44
 2011830:	2026a680 	call	2026a68 <pvPortMalloc>
 2011834:	e0bffb15 	stw	r2,-20(fp)

		if( pxNewTimer != NULL )
 2011838:	e0bffb17 	ldw	r2,-20(fp)
 201183c:	10000b26 	beq	r2,zero,201186c <xTimerCreate+0x60>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 2011840:	e0bffb17 	ldw	r2,-20(fp)
 2011844:	10000a05 	stb	zero,40(r2)
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 2011848:	e0bffb17 	ldw	r2,-20(fp)
 201184c:	d8800115 	stw	r2,4(sp)
 2011850:	e0800217 	ldw	r2,8(fp)
 2011854:	d8800015 	stw	r2,0(sp)
 2011858:	e1ffff17 	ldw	r7,-4(fp)
 201185c:	e1bffe17 	ldw	r6,-8(fp)
 2011860:	e17ffd17 	ldw	r5,-12(fp)
 2011864:	e13ffc17 	ldw	r4,-16(fp)
 2011868:	20118840 	call	2011884 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 201186c:	e0bffb17 	ldw	r2,-20(fp)
	}
 2011870:	e037883a 	mov	sp,fp
 2011874:	dfc00117 	ldw	ra,4(sp)
 2011878:	df000017 	ldw	fp,0(sp)
 201187c:	dec00204 	addi	sp,sp,8
 2011880:	f800283a 	ret

02011884 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 2011884:	defffa04 	addi	sp,sp,-24
 2011888:	dfc00515 	stw	ra,20(sp)
 201188c:	df000415 	stw	fp,16(sp)
 2011890:	df000404 	addi	fp,sp,16
 2011894:	e13ffc15 	stw	r4,-16(fp)
 2011898:	e17ffd15 	stw	r5,-12(fp)
 201189c:	e1bffe15 	stw	r6,-8(fp)
 20118a0:	e1ffff15 	stw	r7,-4(fp)
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );

	if( pxNewTimer != NULL )
 20118a4:	e0800317 	ldw	r2,12(fp)
 20118a8:	10001926 	beq	r2,zero,2011910 <prvInitialiseNewTimer+0x8c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 20118ac:	201226c0 	call	201226c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 20118b0:	e0800317 	ldw	r2,12(fp)
 20118b4:	e0fffc17 	ldw	r3,-16(fp)
 20118b8:	10c00015 	stw	r3,0(r2)
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 20118bc:	e0800317 	ldw	r2,12(fp)
 20118c0:	e0fffd17 	ldw	r3,-12(fp)
 20118c4:	10c00615 	stw	r3,24(r2)
		pxNewTimer->pvTimerID = pvTimerID;
 20118c8:	e0800317 	ldw	r2,12(fp)
 20118cc:	e0ffff17 	ldw	r3,-4(fp)
 20118d0:	10c00715 	stw	r3,28(r2)
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 20118d4:	e0800317 	ldw	r2,12(fp)
 20118d8:	e0c00217 	ldw	r3,8(fp)
 20118dc:	10c00815 	stw	r3,32(r2)
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 20118e0:	e0800317 	ldw	r2,12(fp)
 20118e4:	10800104 	addi	r2,r2,4
 20118e8:	1009883a 	mov	r4,r2
 20118ec:	2026c040 	call	2026c04 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 20118f0:	e0bffe17 	ldw	r2,-8(fp)
 20118f4:	10000626 	beq	r2,zero,2011910 <prvInitialiseNewTimer+0x8c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 20118f8:	e0800317 	ldw	r2,12(fp)
 20118fc:	10800a03 	ldbu	r2,40(r2)
 2011900:	10800114 	ori	r2,r2,4
 2011904:	1007883a 	mov	r3,r2
 2011908:	e0800317 	ldw	r2,12(fp)
 201190c:	10c00a05 	stb	r3,40(r2)
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 2011910:	0001883a 	nop
 2011914:	e037883a 	mov	sp,fp
 2011918:	dfc00117 	ldw	ra,4(sp)
 201191c:	df000017 	ldw	fp,0(sp)
 2011920:	dec00204 	addi	sp,sp,8
 2011924:	f800283a 	ret

02011928 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 2011928:	defff604 	addi	sp,sp,-40
 201192c:	dfc00915 	stw	ra,36(sp)
 2011930:	df000815 	stw	fp,32(sp)
 2011934:	df000804 	addi	fp,sp,32
 2011938:	e13ffc15 	stw	r4,-16(fp)
 201193c:	e17ffd15 	stw	r5,-12(fp)
 2011940:	e1bffe15 	stw	r6,-8(fp)
 2011944:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xReturn = pdFAIL;
 2011948:	e03ff815 	stw	zero,-32(fp)

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 201194c:	d0a7e417 	ldw	r2,-24688(gp)
 2011950:	10002626 	beq	r2,zero,20119ec <xTimerGenericCommand+0xc4>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 2011954:	e0bffd17 	ldw	r2,-12(fp)
 2011958:	e0bff915 	stw	r2,-28(fp)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 201195c:	e0bffe17 	ldw	r2,-8(fp)
 2011960:	e0bffa15 	stw	r2,-24(fp)
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 2011964:	e0bffc17 	ldw	r2,-16(fp)
 2011968:	e0bffb15 	stw	r2,-20(fp)

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 201196c:	e0bffd17 	ldw	r2,-12(fp)
 2011970:	10800188 	cmpgei	r2,r2,6
 2011974:	1000151e 	bne	r2,zero,20119cc <xTimerGenericCommand+0xa4>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 2011978:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201197c:	10800098 	cmpnei	r2,r2,2
 2011980:	1000091e 	bne	r2,zero,20119a8 <xTimerGenericCommand+0x80>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 2011984:	d0a7e417 	ldw	r2,-24688(gp)
 2011988:	e0fff904 	addi	r3,fp,-28
 201198c:	000f883a 	mov	r7,zero
 2011990:	e1800217 	ldw	r6,8(fp)
 2011994:	180b883a 	mov	r5,r3
 2011998:	1009883a 	mov	r4,r2
 201199c:	200d8480 	call	200d848 <xQueueGenericSend>
 20119a0:	e0bff815 	stw	r2,-32(fp)
 20119a4:	00001106 	br	20119ec <xTimerGenericCommand+0xc4>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 20119a8:	d0a7e417 	ldw	r2,-24688(gp)
 20119ac:	e0fff904 	addi	r3,fp,-28
 20119b0:	000f883a 	mov	r7,zero
 20119b4:	000d883a 	mov	r6,zero
 20119b8:	180b883a 	mov	r5,r3
 20119bc:	1009883a 	mov	r4,r2
 20119c0:	200d8480 	call	200d848 <xQueueGenericSend>
 20119c4:	e0bff815 	stw	r2,-32(fp)
 20119c8:	00000806 	br	20119ec <xTimerGenericCommand+0xc4>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 20119cc:	d0a7e417 	ldw	r2,-24688(gp)
 20119d0:	e0fff904 	addi	r3,fp,-28
 20119d4:	000f883a 	mov	r7,zero
 20119d8:	e1bfff17 	ldw	r6,-4(fp)
 20119dc:	180b883a 	mov	r5,r3
 20119e0:	1009883a 	mov	r4,r2
 20119e4:	200da2c0 	call	200da2c <xQueueGenericSendFromISR>
 20119e8:	e0bff815 	stw	r2,-32(fp)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 20119ec:	e0bff817 	ldw	r2,-32(fp)
}
 20119f0:	e037883a 	mov	sp,fp
 20119f4:	dfc00117 	ldw	ra,4(sp)
 20119f8:	df000017 	ldw	fp,0(sp)
 20119fc:	dec00204 	addi	sp,sp,8
 2011a00:	f800283a 	ret

02011a04 <xTimerGetTimerDaemonTaskHandle>:
/*-----------------------------------------------------------*/

TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
{
 2011a04:	deffff04 	addi	sp,sp,-4
 2011a08:	df000015 	stw	fp,0(sp)
 2011a0c:	d839883a 	mov	fp,sp
	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
	started, then xTimerTaskHandle will be NULL. */
	configASSERT( ( xTimerTaskHandle != NULL ) );
	return xTimerTaskHandle;
 2011a10:	d0a7e517 	ldw	r2,-24684(gp)
}
 2011a14:	e037883a 	mov	sp,fp
 2011a18:	df000017 	ldw	fp,0(sp)
 2011a1c:	dec00104 	addi	sp,sp,4
 2011a20:	f800283a 	ret

02011a24 <xTimerGetPeriod>:
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 2011a24:	defffd04 	addi	sp,sp,-12
 2011a28:	df000215 	stw	fp,8(sp)
 2011a2c:	df000204 	addi	fp,sp,8
 2011a30:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = xTimer;
 2011a34:	e0bfff17 	ldw	r2,-4(fp)
 2011a38:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( xTimer );
	return pxTimer->xTimerPeriodInTicks;
 2011a3c:	e0bffe17 	ldw	r2,-8(fp)
 2011a40:	10800617 	ldw	r2,24(r2)
}
 2011a44:	e037883a 	mov	sp,fp
 2011a48:	df000017 	ldw	fp,0(sp)
 2011a4c:	dec00104 	addi	sp,sp,4
 2011a50:	f800283a 	ret

02011a54 <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
{
 2011a54:	defffb04 	addi	sp,sp,-20
 2011a58:	dfc00415 	stw	ra,16(sp)
 2011a5c:	df000315 	stw	fp,12(sp)
 2011a60:	df000304 	addi	fp,sp,12
 2011a64:	e13ffe15 	stw	r4,-8(fp)
 2011a68:	e17fff15 	stw	r5,-4(fp)
Timer_t * pxTimer =  xTimer;
 2011a6c:	e0bffe17 	ldw	r2,-8(fp)
 2011a70:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( xTimer );
	taskENTER_CRITICAL();
 2011a74:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2011a78:	10000126 	beq	r2,zero,2011a80 <vTimerSetReloadMode+0x2c>
 2011a7c:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		if( uxAutoReload != pdFALSE )
 2011a80:	e0bfff17 	ldw	r2,-4(fp)
 2011a84:	10000726 	beq	r2,zero,2011aa4 <vTimerSetReloadMode+0x50>
		{
			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 2011a88:	e0bffd17 	ldw	r2,-12(fp)
 2011a8c:	10800a03 	ldbu	r2,40(r2)
 2011a90:	10800114 	ori	r2,r2,4
 2011a94:	1007883a 	mov	r3,r2
 2011a98:	e0bffd17 	ldw	r2,-12(fp)
 2011a9c:	10c00a05 	stb	r3,40(r2)
 2011aa0:	00000706 	br	2011ac0 <vTimerSetReloadMode+0x6c>
		}
		else
		{
			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 2011aa4:	e0bffd17 	ldw	r2,-12(fp)
 2011aa8:	10c00a03 	ldbu	r3,40(r2)
 2011aac:	00bffec4 	movi	r2,-5
 2011ab0:	1884703a 	and	r2,r3,r2
 2011ab4:	1007883a 	mov	r3,r2
 2011ab8:	e0bffd17 	ldw	r2,-12(fp)
 2011abc:	10c00a05 	stb	r3,40(r2)
		}
	}
	taskEXIT_CRITICAL();
 2011ac0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2011ac4:	10000126 	beq	r2,zero,2011acc <vTimerSetReloadMode+0x78>
 2011ac8:	2010e300 	call	2010e30 <vTaskExitCritical>
}
 2011acc:	0001883a 	nop
 2011ad0:	e037883a 	mov	sp,fp
 2011ad4:	dfc00117 	ldw	ra,4(sp)
 2011ad8:	df000017 	ldw	fp,0(sp)
 2011adc:	dec00204 	addi	sp,sp,8
 2011ae0:	f800283a 	ret

02011ae4 <uxTimerGetReloadMode>:
/*-----------------------------------------------------------*/

UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
{
 2011ae4:	defffb04 	addi	sp,sp,-20
 2011ae8:	dfc00415 	stw	ra,16(sp)
 2011aec:	df000315 	stw	fp,12(sp)
 2011af0:	df000304 	addi	fp,sp,12
 2011af4:	e13fff15 	stw	r4,-4(fp)
Timer_t * pxTimer =  xTimer;
 2011af8:	e0bfff17 	ldw	r2,-4(fp)
 2011afc:	e0bffe15 	stw	r2,-8(fp)
UBaseType_t uxReturn;

	configASSERT( xTimer );
	taskENTER_CRITICAL();
 2011b00:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2011b04:	10000126 	beq	r2,zero,2011b0c <uxTimerGetReloadMode+0x28>
 2011b08:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 2011b0c:	e0bffe17 	ldw	r2,-8(fp)
 2011b10:	10800a03 	ldbu	r2,40(r2)
 2011b14:	10803fcc 	andi	r2,r2,255
 2011b18:	1080010c 	andi	r2,r2,4
 2011b1c:	1000021e 	bne	r2,zero,2011b28 <uxTimerGetReloadMode+0x44>
		{
			/* Not an auto-reload timer. */
			uxReturn = ( UBaseType_t ) pdFALSE;
 2011b20:	e03ffd15 	stw	zero,-12(fp)
 2011b24:	00000206 	br	2011b30 <uxTimerGetReloadMode+0x4c>
		}
		else
		{
			/* Is an auto-reload timer. */
			uxReturn = ( UBaseType_t ) pdTRUE;
 2011b28:	00800044 	movi	r2,1
 2011b2c:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	taskEXIT_CRITICAL();
 2011b30:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2011b34:	10000126 	beq	r2,zero,2011b3c <uxTimerGetReloadMode+0x58>
 2011b38:	2010e300 	call	2010e30 <vTaskExitCritical>

	return uxReturn;
 2011b3c:	e0bffd17 	ldw	r2,-12(fp)
}
 2011b40:	e037883a 	mov	sp,fp
 2011b44:	dfc00117 	ldw	ra,4(sp)
 2011b48:	df000017 	ldw	fp,0(sp)
 2011b4c:	dec00204 	addi	sp,sp,8
 2011b50:	f800283a 	ret

02011b54 <xTimerGetExpiryTime>:
/*-----------------------------------------------------------*/

TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
{
 2011b54:	defffc04 	addi	sp,sp,-16
 2011b58:	df000315 	stw	fp,12(sp)
 2011b5c:	df000304 	addi	fp,sp,12
 2011b60:	e13fff15 	stw	r4,-4(fp)
Timer_t * pxTimer =  xTimer;
 2011b64:	e0bfff17 	ldw	r2,-4(fp)
 2011b68:	e0bffd15 	stw	r2,-12(fp)
TickType_t xReturn;

	configASSERT( xTimer );
	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 2011b6c:	e0bffd17 	ldw	r2,-12(fp)
 2011b70:	10800117 	ldw	r2,4(r2)
 2011b74:	e0bffe15 	stw	r2,-8(fp)
	return xReturn;
 2011b78:	e0bffe17 	ldw	r2,-8(fp)
}
 2011b7c:	e037883a 	mov	sp,fp
 2011b80:	df000017 	ldw	fp,0(sp)
 2011b84:	dec00104 	addi	sp,sp,4
 2011b88:	f800283a 	ret

02011b8c <pcTimerGetName>:
/*-----------------------------------------------------------*/

const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 2011b8c:	defffd04 	addi	sp,sp,-12
 2011b90:	df000215 	stw	fp,8(sp)
 2011b94:	df000204 	addi	fp,sp,8
 2011b98:	e13fff15 	stw	r4,-4(fp)
Timer_t *pxTimer = xTimer;
 2011b9c:	e0bfff17 	ldw	r2,-4(fp)
 2011ba0:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( xTimer );
	return pxTimer->pcTimerName;
 2011ba4:	e0bffe17 	ldw	r2,-8(fp)
 2011ba8:	10800017 	ldw	r2,0(r2)
}
 2011bac:	e037883a 	mov	sp,fp
 2011bb0:	df000017 	ldw	fp,0(sp)
 2011bb4:	dec00104 	addi	sp,sp,4
 2011bb8:	f800283a 	ret

02011bbc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 2011bbc:	defff904 	addi	sp,sp,-28
 2011bc0:	dfc00615 	stw	ra,24(sp)
 2011bc4:	df000515 	stw	fp,20(sp)
 2011bc8:	df000504 	addi	fp,sp,20
 2011bcc:	e13ffe15 	stw	r4,-8(fp)
 2011bd0:	e17fff15 	stw	r5,-4(fp)
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 2011bd4:	d0a7e217 	ldw	r2,-24696(gp)
 2011bd8:	10800317 	ldw	r2,12(r2)
 2011bdc:	10800317 	ldw	r2,12(r2)
 2011be0:	e0bffc15 	stw	r2,-16(fp)

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 2011be4:	e0bffc17 	ldw	r2,-16(fp)
 2011be8:	10800104 	addi	r2,r2,4
 2011bec:	1009883a 	mov	r4,r2
 2011bf0:	2026d940 	call	2026d94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 2011bf4:	e0bffc17 	ldw	r2,-16(fp)
 2011bf8:	10800a03 	ldbu	r2,40(r2)
 2011bfc:	10803fcc 	andi	r2,r2,255
 2011c00:	1080010c 	andi	r2,r2,4
 2011c04:	10001226 	beq	r2,zero,2011c50 <prvProcessExpiredTimer+0x94>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 2011c08:	e0bffc17 	ldw	r2,-16(fp)
 2011c0c:	10c00617 	ldw	r3,24(r2)
 2011c10:	e0bffe17 	ldw	r2,-8(fp)
 2011c14:	1885883a 	add	r2,r3,r2
 2011c18:	e1fffe17 	ldw	r7,-8(fp)
 2011c1c:	e1bfff17 	ldw	r6,-4(fp)
 2011c20:	100b883a 	mov	r5,r2
 2011c24:	e13ffc17 	ldw	r4,-16(fp)
 2011c28:	2011e640 	call	2011e64 <prvInsertTimerInActiveList>
 2011c2c:	10000f26 	beq	r2,zero,2011c6c <prvProcessExpiredTimer+0xb0>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 2011c30:	d8000015 	stw	zero,0(sp)
 2011c34:	000f883a 	mov	r7,zero
 2011c38:	e1bffe17 	ldw	r6,-8(fp)
 2011c3c:	000b883a 	mov	r5,zero
 2011c40:	e13ffc17 	ldw	r4,-16(fp)
 2011c44:	20119280 	call	2011928 <xTimerGenericCommand>
 2011c48:	e0bffd15 	stw	r2,-12(fp)
 2011c4c:	00000706 	br	2011c6c <prvProcessExpiredTimer+0xb0>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 2011c50:	e0bffc17 	ldw	r2,-16(fp)
 2011c54:	10c00a03 	ldbu	r3,40(r2)
 2011c58:	00bfff84 	movi	r2,-2
 2011c5c:	1884703a 	and	r2,r3,r2
 2011c60:	1007883a 	mov	r3,r2
 2011c64:	e0bffc17 	ldw	r2,-16(fp)
 2011c68:	10c00a05 	stb	r3,40(r2)
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 2011c6c:	e0bffc17 	ldw	r2,-16(fp)
 2011c70:	10800817 	ldw	r2,32(r2)
 2011c74:	e13ffc17 	ldw	r4,-16(fp)
 2011c78:	103ee83a 	callr	r2
}
 2011c7c:	0001883a 	nop
 2011c80:	e037883a 	mov	sp,fp
 2011c84:	dfc00117 	ldw	ra,4(sp)
 2011c88:	df000017 	ldw	fp,0(sp)
 2011c8c:	dec00204 	addi	sp,sp,8
 2011c90:	f800283a 	ret

02011c94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 2011c94:	defffb04 	addi	sp,sp,-20
 2011c98:	dfc00415 	stw	ra,16(sp)
 2011c9c:	df000315 	stw	fp,12(sp)
 2011ca0:	df000304 	addi	fp,sp,12
 2011ca4:	e13fff15 	stw	r4,-4(fp)

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 2011ca8:	e0bffe04 	addi	r2,fp,-8
 2011cac:	1009883a 	mov	r4,r2
 2011cb0:	2011d980 	call	2011d98 <prvGetNextExpireTime>
 2011cb4:	e0bffd15 	stw	r2,-12(fp)

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 2011cb8:	e0bffe17 	ldw	r2,-8(fp)
 2011cbc:	100b883a 	mov	r5,r2
 2011cc0:	e13ffd17 	ldw	r4,-12(fp)
 2011cc4:	2011cd00 	call	2011cd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 2011cc8:	2011f400 	call	2011f40 <prvProcessReceivedCommands>
	}
 2011ccc:	003ff606 	br	2011ca8 <__alt_mem_mem_0+0xfcff1ca8>

02011cd0 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 2011cd0:	defffa04 	addi	sp,sp,-24
 2011cd4:	dfc00515 	stw	ra,20(sp)
 2011cd8:	df000415 	stw	fp,16(sp)
 2011cdc:	df000404 	addi	fp,sp,16
 2011ce0:	e13ffe15 	stw	r4,-8(fp)
 2011ce4:	e17fff15 	stw	r5,-4(fp)
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 2011ce8:	200f8840 	call	200f884 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 2011cec:	e0bffd04 	addi	r2,fp,-12
 2011cf0:	1009883a 	mov	r4,r2
 2011cf4:	2011e000 	call	2011e00 <prvSampleTimeNow>
 2011cf8:	e0bffc15 	stw	r2,-16(fp)
		if( xTimerListsWereSwitched == pdFALSE )
 2011cfc:	e0bffd17 	ldw	r2,-12(fp)
 2011d00:	10001e1e 	bne	r2,zero,2011d7c <prvProcessTimerOrBlockTask+0xac>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 2011d04:	e0bfff17 	ldw	r2,-4(fp)
 2011d08:	1000081e 	bne	r2,zero,2011d2c <prvProcessTimerOrBlockTask+0x5c>
 2011d0c:	e0bffe17 	ldw	r2,-8(fp)
 2011d10:	e0fffc17 	ldw	r3,-16(fp)
 2011d14:	18800536 	bltu	r3,r2,2011d2c <prvProcessTimerOrBlockTask+0x5c>
			{
				( void ) xTaskResumeAll();
 2011d18:	200f8b00 	call	200f8b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 2011d1c:	e17ffc17 	ldw	r5,-16(fp)
 2011d20:	e13ffe17 	ldw	r4,-8(fp)
 2011d24:	2011bbc0 	call	2011bbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 2011d28:	00001506 	br	2011d80 <prvProcessTimerOrBlockTask+0xb0>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 2011d2c:	e0bfff17 	ldw	r2,-4(fp)
 2011d30:	10000726 	beq	r2,zero,2011d50 <prvProcessTimerOrBlockTask+0x80>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 2011d34:	d0a7e317 	ldw	r2,-24692(gp)
 2011d38:	10800017 	ldw	r2,0(r2)
 2011d3c:	1000021e 	bne	r2,zero,2011d48 <prvProcessTimerOrBlockTask+0x78>
 2011d40:	00800044 	movi	r2,1
 2011d44:	00000106 	br	2011d4c <prvProcessTimerOrBlockTask+0x7c>
 2011d48:	0005883a 	mov	r2,zero
 2011d4c:	e0bfff15 	stw	r2,-4(fp)
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 2011d50:	d127e417 	ldw	r4,-24688(gp)
 2011d54:	e0fffe17 	ldw	r3,-8(fp)
 2011d58:	e0bffc17 	ldw	r2,-16(fp)
 2011d5c:	1885c83a 	sub	r2,r3,r2
 2011d60:	e1bfff17 	ldw	r6,-4(fp)
 2011d64:	100b883a 	mov	r5,r2
 2011d68:	200ea0c0 	call	200ea0c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 2011d6c:	200f8b00 	call	200f8b0 <xTaskResumeAll>
 2011d70:	1000031e 	bne	r2,zero,2011d80 <prvProcessTimerOrBlockTask+0xb0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 2011d74:	003b683a 	trap	0
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 2011d78:	00000106 	br	2011d80 <prvProcessTimerOrBlockTask+0xb0>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 2011d7c:	200f8b00 	call	200f8b0 <xTaskResumeAll>
		}
	}
}
 2011d80:	0001883a 	nop
 2011d84:	e037883a 	mov	sp,fp
 2011d88:	dfc00117 	ldw	ra,4(sp)
 2011d8c:	df000017 	ldw	fp,0(sp)
 2011d90:	dec00204 	addi	sp,sp,8
 2011d94:	f800283a 	ret

02011d98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 2011d98:	defffd04 	addi	sp,sp,-12
 2011d9c:	df000215 	stw	fp,8(sp)
 2011da0:	df000204 	addi	fp,sp,8
 2011da4:	e13fff15 	stw	r4,-4(fp)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 2011da8:	d0a7e217 	ldw	r2,-24696(gp)
 2011dac:	10800017 	ldw	r2,0(r2)
 2011db0:	1000021e 	bne	r2,zero,2011dbc <prvGetNextExpireTime+0x24>
 2011db4:	00800044 	movi	r2,1
 2011db8:	00000106 	br	2011dc0 <prvGetNextExpireTime+0x28>
 2011dbc:	0005883a 	mov	r2,zero
 2011dc0:	e0ffff17 	ldw	r3,-4(fp)
 2011dc4:	18800015 	stw	r2,0(r3)
	if( *pxListWasEmpty == pdFALSE )
 2011dc8:	e0bfff17 	ldw	r2,-4(fp)
 2011dcc:	10800017 	ldw	r2,0(r2)
 2011dd0:	1000051e 	bne	r2,zero,2011de8 <prvGetNextExpireTime+0x50>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 2011dd4:	d0a7e217 	ldw	r2,-24696(gp)
 2011dd8:	10800317 	ldw	r2,12(r2)
 2011ddc:	10800017 	ldw	r2,0(r2)
 2011de0:	e0bffe15 	stw	r2,-8(fp)
 2011de4:	00000106 	br	2011dec <prvGetNextExpireTime+0x54>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 2011de8:	e03ffe15 	stw	zero,-8(fp)
	}

	return xNextExpireTime;
 2011dec:	e0bffe17 	ldw	r2,-8(fp)
}
 2011df0:	e037883a 	mov	sp,fp
 2011df4:	df000017 	ldw	fp,0(sp)
 2011df8:	dec00104 	addi	sp,sp,4
 2011dfc:	f800283a 	ret

02011e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 2011e00:	defffc04 	addi	sp,sp,-16
 2011e04:	dfc00315 	stw	ra,12(sp)
 2011e08:	df000215 	stw	fp,8(sp)
 2011e0c:	df000204 	addi	fp,sp,8
 2011e10:	e13fff15 	stw	r4,-4(fp)
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 2011e14:	200fa180 	call	200fa18 <xTaskGetTickCount>
 2011e18:	e0bffe15 	stw	r2,-8(fp)

	if( xTimeNow < xLastTime )
 2011e1c:	d0a7e617 	ldw	r2,-24680(gp)
 2011e20:	e0fffe17 	ldw	r3,-8(fp)
 2011e24:	1880052e 	bgeu	r3,r2,2011e3c <prvSampleTimeNow+0x3c>
	{
		prvSwitchTimerLists();
 2011e28:	20121580 	call	2012158 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 2011e2c:	e0bfff17 	ldw	r2,-4(fp)
 2011e30:	00c00044 	movi	r3,1
 2011e34:	10c00015 	stw	r3,0(r2)
 2011e38:	00000206 	br	2011e44 <prvSampleTimeNow+0x44>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 2011e3c:	e0bfff17 	ldw	r2,-4(fp)
 2011e40:	10000015 	stw	zero,0(r2)
	}

	xLastTime = xTimeNow;
 2011e44:	e0bffe17 	ldw	r2,-8(fp)
 2011e48:	d0a7e615 	stw	r2,-24680(gp)

	return xTimeNow;
 2011e4c:	e0bffe17 	ldw	r2,-8(fp)
}
 2011e50:	e037883a 	mov	sp,fp
 2011e54:	dfc00117 	ldw	ra,4(sp)
 2011e58:	df000017 	ldw	fp,0(sp)
 2011e5c:	dec00204 	addi	sp,sp,8
 2011e60:	f800283a 	ret

02011e64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 2011e64:	defff904 	addi	sp,sp,-28
 2011e68:	dfc00615 	stw	ra,24(sp)
 2011e6c:	df000515 	stw	fp,20(sp)
 2011e70:	df000504 	addi	fp,sp,20
 2011e74:	e13ffc15 	stw	r4,-16(fp)
 2011e78:	e17ffd15 	stw	r5,-12(fp)
 2011e7c:	e1bffe15 	stw	r6,-8(fp)
 2011e80:	e1ffff15 	stw	r7,-4(fp)
BaseType_t xProcessTimerNow = pdFALSE;
 2011e84:	e03ffb15 	stw	zero,-20(fp)

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 2011e88:	e0bffc17 	ldw	r2,-16(fp)
 2011e8c:	e0fffd17 	ldw	r3,-12(fp)
 2011e90:	10c00115 	stw	r3,4(r2)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 2011e94:	e0bffc17 	ldw	r2,-16(fp)
 2011e98:	e0fffc17 	ldw	r3,-16(fp)
 2011e9c:	10c00415 	stw	r3,16(r2)

	if( xNextExpiryTime <= xTimeNow )
 2011ea0:	e0bffd17 	ldw	r2,-12(fp)
 2011ea4:	e0fffe17 	ldw	r3,-8(fp)
 2011ea8:	18801036 	bltu	r3,r2,2011eec <prvInsertTimerInActiveList+0x88>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 2011eac:	e0fffe17 	ldw	r3,-8(fp)
 2011eb0:	e0bfff17 	ldw	r2,-4(fp)
 2011eb4:	1887c83a 	sub	r3,r3,r2
 2011eb8:	e0bffc17 	ldw	r2,-16(fp)
 2011ebc:	10800617 	ldw	r2,24(r2)
 2011ec0:	18800336 	bltu	r3,r2,2011ed0 <prvInsertTimerInActiveList+0x6c>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 2011ec4:	00800044 	movi	r2,1
 2011ec8:	e0bffb15 	stw	r2,-20(fp)
 2011ecc:	00001606 	br	2011f28 <prvInsertTimerInActiveList+0xc4>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 2011ed0:	d0e7e317 	ldw	r3,-24692(gp)
 2011ed4:	e0bffc17 	ldw	r2,-16(fp)
 2011ed8:	10800104 	addi	r2,r2,4
 2011edc:	100b883a 	mov	r5,r2
 2011ee0:	1809883a 	mov	r4,r3
 2011ee4:	2026cbc0 	call	2026cbc <vListInsert>
 2011ee8:	00000f06 	br	2011f28 <prvInsertTimerInActiveList+0xc4>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 2011eec:	e0fffe17 	ldw	r3,-8(fp)
 2011ef0:	e0bfff17 	ldw	r2,-4(fp)
 2011ef4:	1880062e 	bgeu	r3,r2,2011f10 <prvInsertTimerInActiveList+0xac>
 2011ef8:	e0fffd17 	ldw	r3,-12(fp)
 2011efc:	e0bfff17 	ldw	r2,-4(fp)
 2011f00:	18800336 	bltu	r3,r2,2011f10 <prvInsertTimerInActiveList+0xac>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 2011f04:	00800044 	movi	r2,1
 2011f08:	e0bffb15 	stw	r2,-20(fp)
 2011f0c:	00000606 	br	2011f28 <prvInsertTimerInActiveList+0xc4>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 2011f10:	d0e7e217 	ldw	r3,-24696(gp)
 2011f14:	e0bffc17 	ldw	r2,-16(fp)
 2011f18:	10800104 	addi	r2,r2,4
 2011f1c:	100b883a 	mov	r5,r2
 2011f20:	1809883a 	mov	r4,r3
 2011f24:	2026cbc0 	call	2026cbc <vListInsert>
		}
	}

	return xProcessTimerNow;
 2011f28:	e0bffb17 	ldw	r2,-20(fp)
}
 2011f2c:	e037883a 	mov	sp,fp
 2011f30:	dfc00117 	ldw	ra,4(sp)
 2011f34:	df000017 	ldw	fp,0(sp)
 2011f38:	dec00204 	addi	sp,sp,8
 2011f3c:	f800283a 	ret

02011f40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 2011f40:	defff604 	addi	sp,sp,-40
 2011f44:	dfc00915 	stw	ra,36(sp)
 2011f48:	df000815 	stw	fp,32(sp)
 2011f4c:	df000804 	addi	fp,sp,32
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 2011f50:	00007406 	br	2012124 <prvProcessReceivedCommands+0x1e4>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 2011f54:	e0bffc17 	ldw	r2,-16(fp)
 2011f58:	10007216 	blt	r2,zero,2012124 <prvProcessReceivedCommands+0x1e4>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 2011f5c:	e0bffe17 	ldw	r2,-8(fp)
 2011f60:	e0bff915 	stw	r2,-28(fp)

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 2011f64:	e0bff917 	ldw	r2,-28(fp)
 2011f68:	10800517 	ldw	r2,20(r2)
 2011f6c:	10000426 	beq	r2,zero,2011f80 <prvProcessReceivedCommands+0x40>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 2011f70:	e0bff917 	ldw	r2,-28(fp)
 2011f74:	10800104 	addi	r2,r2,4
 2011f78:	1009883a 	mov	r4,r2
 2011f7c:	2026d940 	call	2026d94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 2011f80:	e0bfff04 	addi	r2,fp,-4
 2011f84:	1009883a 	mov	r4,r2
 2011f88:	2011e000 	call	2011e00 <prvSampleTimeNow>
 2011f8c:	e0bffa15 	stw	r2,-24(fp)

			switch( xMessage.xMessageID )
 2011f90:	e0bffc17 	ldw	r2,-16(fp)
 2011f94:	10c002a8 	cmpgeui	r3,r2,10
 2011f98:	1800611e 	bne	r3,zero,2012120 <prvProcessReceivedCommands+0x1e0>
 2011f9c:	100690ba 	slli	r3,r2,2
 2011fa0:	00808074 	movhi	r2,513
 2011fa4:	1087ed04 	addi	r2,r2,8116
 2011fa8:	1885883a 	add	r2,r3,r2
 2011fac:	10800017 	ldw	r2,0(r2)
 2011fb0:	1000683a 	jmp	r2
 2011fb4:	02011fdc 	xori	r8,zero,1151
 2011fb8:	02011fdc 	xori	r8,zero,1151
 2011fbc:	02011fdc 	xori	r8,zero,1151
 2011fc0:	02012074 	movhi	r8,1153
 2011fc4:	02012094 	movui	r8,1154
 2011fc8:	020120e0 	cmpeqi	r8,zero,1155
 2011fcc:	02011fdc 	xori	r8,zero,1151
 2011fd0:	02011fdc 	xori	r8,zero,1151
 2011fd4:	02012074 	movhi	r8,1153
 2011fd8:	02012094 	movui	r8,1154
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 2011fdc:	e0bff917 	ldw	r2,-28(fp)
 2011fe0:	10800a03 	ldbu	r2,40(r2)
 2011fe4:	10800054 	ori	r2,r2,1
 2011fe8:	1007883a 	mov	r3,r2
 2011fec:	e0bff917 	ldw	r2,-28(fp)
 2011ff0:	10c00a05 	stb	r3,40(r2)
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 2011ff4:	e0fffd17 	ldw	r3,-12(fp)
 2011ff8:	e0bff917 	ldw	r2,-28(fp)
 2011ffc:	10800617 	ldw	r2,24(r2)
 2012000:	1885883a 	add	r2,r3,r2
 2012004:	e0fffd17 	ldw	r3,-12(fp)
 2012008:	180f883a 	mov	r7,r3
 201200c:	e1bffa17 	ldw	r6,-24(fp)
 2012010:	100b883a 	mov	r5,r2
 2012014:	e13ff917 	ldw	r4,-28(fp)
 2012018:	2011e640 	call	2011e64 <prvInsertTimerInActiveList>
 201201c:	10004126 	beq	r2,zero,2012124 <prvProcessReceivedCommands+0x1e4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 2012020:	e0bff917 	ldw	r2,-28(fp)
 2012024:	10800817 	ldw	r2,32(r2)
 2012028:	e13ff917 	ldw	r4,-28(fp)
 201202c:	103ee83a 	callr	r2
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 2012030:	e0bff917 	ldw	r2,-28(fp)
 2012034:	10800a03 	ldbu	r2,40(r2)
 2012038:	10803fcc 	andi	r2,r2,255
 201203c:	1080010c 	andi	r2,r2,4
 2012040:	10003826 	beq	r2,zero,2012124 <prvProcessReceivedCommands+0x1e4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 2012044:	e0fffd17 	ldw	r3,-12(fp)
 2012048:	e0bff917 	ldw	r2,-28(fp)
 201204c:	10800617 	ldw	r2,24(r2)
 2012050:	1885883a 	add	r2,r3,r2
 2012054:	d8000015 	stw	zero,0(sp)
 2012058:	000f883a 	mov	r7,zero
 201205c:	100d883a 	mov	r6,r2
 2012060:	000b883a 	mov	r5,zero
 2012064:	e13ff917 	ldw	r4,-28(fp)
 2012068:	20119280 	call	2011928 <xTimerGenericCommand>
 201206c:	e0bffb15 	stw	r2,-20(fp)
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 2012070:	00002c06 	br	2012124 <prvProcessReceivedCommands+0x1e4>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 2012074:	e0bff917 	ldw	r2,-28(fp)
 2012078:	10c00a03 	ldbu	r3,40(r2)
 201207c:	00bfff84 	movi	r2,-2
 2012080:	1884703a 	and	r2,r3,r2
 2012084:	1007883a 	mov	r3,r2
 2012088:	e0bff917 	ldw	r2,-28(fp)
 201208c:	10c00a05 	stb	r3,40(r2)
					break;
 2012090:	00002406 	br	2012124 <prvProcessReceivedCommands+0x1e4>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 2012094:	e0bff917 	ldw	r2,-28(fp)
 2012098:	10800a03 	ldbu	r2,40(r2)
 201209c:	10800054 	ori	r2,r2,1
 20120a0:	1007883a 	mov	r3,r2
 20120a4:	e0bff917 	ldw	r2,-28(fp)
 20120a8:	10c00a05 	stb	r3,40(r2)
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 20120ac:	e0fffd17 	ldw	r3,-12(fp)
 20120b0:	e0bff917 	ldw	r2,-28(fp)
 20120b4:	10c00615 	stw	r3,24(r2)
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 20120b8:	e0bff917 	ldw	r2,-28(fp)
 20120bc:	10c00617 	ldw	r3,24(r2)
 20120c0:	e0bffa17 	ldw	r2,-24(fp)
 20120c4:	1885883a 	add	r2,r3,r2
 20120c8:	e1fffa17 	ldw	r7,-24(fp)
 20120cc:	e1bffa17 	ldw	r6,-24(fp)
 20120d0:	100b883a 	mov	r5,r2
 20120d4:	e13ff917 	ldw	r4,-28(fp)
 20120d8:	2011e640 	call	2011e64 <prvInsertTimerInActiveList>
					break;
 20120dc:	00001106 	br	2012124 <prvProcessReceivedCommands+0x1e4>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 20120e0:	e0bff917 	ldw	r2,-28(fp)
 20120e4:	10800a03 	ldbu	r2,40(r2)
 20120e8:	10803fcc 	andi	r2,r2,255
 20120ec:	1080008c 	andi	r2,r2,2
 20120f0:	1000031e 	bne	r2,zero,2012100 <prvProcessReceivedCommands+0x1c0>
						{
							vPortFree( pxTimer );
 20120f4:	e13ff917 	ldw	r4,-28(fp)
 20120f8:	2026b280 	call	2026b28 <vPortFree>
 20120fc:	00000906 	br	2012124 <prvProcessReceivedCommands+0x1e4>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 2012100:	e0bff917 	ldw	r2,-28(fp)
 2012104:	10c00a03 	ldbu	r3,40(r2)
 2012108:	00bfff84 	movi	r2,-2
 201210c:	1884703a 	and	r2,r3,r2
 2012110:	1007883a 	mov	r3,r2
 2012114:	e0bff917 	ldw	r2,-28(fp)
 2012118:	10c00a05 	stb	r3,40(r2)
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 201211c:	00000106 	br	2012124 <prvProcessReceivedCommands+0x1e4>

				default	:
					/* Don't expect to get here. */
					break;
 2012120:	0001883a 	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 2012124:	d0a7e417 	ldw	r2,-24688(gp)
 2012128:	e0fffc04 	addi	r3,fp,-16
 201212c:	000d883a 	mov	r6,zero
 2012130:	180b883a 	mov	r5,r3
 2012134:	1009883a 	mov	r4,r2
 2012138:	200dbfc0 	call	200dbfc <xQueueReceive>
 201213c:	103f851e 	bne	r2,zero,2011f54 <__alt_mem_mem_0+0xfcff1f54>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 2012140:	0001883a 	nop
 2012144:	e037883a 	mov	sp,fp
 2012148:	dfc00117 	ldw	ra,4(sp)
 201214c:	df000017 	ldw	fp,0(sp)
 2012150:	dec00204 	addi	sp,sp,8
 2012154:	f800283a 	ret

02012158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 2012158:	defff804 	addi	sp,sp,-32
 201215c:	dfc00715 	stw	ra,28(sp)
 2012160:	df000615 	stw	fp,24(sp)
 2012164:	df000604 	addi	fp,sp,24

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 2012168:	00003106 	br	2012230 <prvSwitchTimerLists+0xd8>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 201216c:	d0a7e217 	ldw	r2,-24696(gp)
 2012170:	10800317 	ldw	r2,12(r2)
 2012174:	10800017 	ldw	r2,0(r2)
 2012178:	e0bffb15 	stw	r2,-20(fp)

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 201217c:	d0a7e217 	ldw	r2,-24696(gp)
 2012180:	10800317 	ldw	r2,12(r2)
 2012184:	10800317 	ldw	r2,12(r2)
 2012188:	e0bffc15 	stw	r2,-16(fp)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 201218c:	e0bffc17 	ldw	r2,-16(fp)
 2012190:	10800104 	addi	r2,r2,4
 2012194:	1009883a 	mov	r4,r2
 2012198:	2026d940 	call	2026d94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 201219c:	e0bffc17 	ldw	r2,-16(fp)
 20121a0:	10800817 	ldw	r2,32(r2)
 20121a4:	e13ffc17 	ldw	r4,-16(fp)
 20121a8:	103ee83a 	callr	r2

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 20121ac:	e0bffc17 	ldw	r2,-16(fp)
 20121b0:	10800a03 	ldbu	r2,40(r2)
 20121b4:	10803fcc 	andi	r2,r2,255
 20121b8:	1080010c 	andi	r2,r2,4
 20121bc:	10001c26 	beq	r2,zero,2012230 <prvSwitchTimerLists+0xd8>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 20121c0:	e0bffc17 	ldw	r2,-16(fp)
 20121c4:	10c00617 	ldw	r3,24(r2)
 20121c8:	e0bffb17 	ldw	r2,-20(fp)
 20121cc:	1885883a 	add	r2,r3,r2
 20121d0:	e0bffd15 	stw	r2,-12(fp)
			if( xReloadTime > xNextExpireTime )
 20121d4:	e0bffd17 	ldw	r2,-12(fp)
 20121d8:	e0fffb17 	ldw	r3,-20(fp)
 20121dc:	18800d2e 	bgeu	r3,r2,2012214 <prvSwitchTimerLists+0xbc>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 20121e0:	e0bffc17 	ldw	r2,-16(fp)
 20121e4:	e0fffd17 	ldw	r3,-12(fp)
 20121e8:	10c00115 	stw	r3,4(r2)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 20121ec:	e0bffc17 	ldw	r2,-16(fp)
 20121f0:	e0fffc17 	ldw	r3,-16(fp)
 20121f4:	10c00415 	stw	r3,16(r2)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 20121f8:	d0e7e217 	ldw	r3,-24696(gp)
 20121fc:	e0bffc17 	ldw	r2,-16(fp)
 2012200:	10800104 	addi	r2,r2,4
 2012204:	100b883a 	mov	r5,r2
 2012208:	1809883a 	mov	r4,r3
 201220c:	2026cbc0 	call	2026cbc <vListInsert>
 2012210:	00000706 	br	2012230 <prvSwitchTimerLists+0xd8>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 2012214:	d8000015 	stw	zero,0(sp)
 2012218:	000f883a 	mov	r7,zero
 201221c:	e1bffb17 	ldw	r6,-20(fp)
 2012220:	000b883a 	mov	r5,zero
 2012224:	e13ffc17 	ldw	r4,-16(fp)
 2012228:	20119280 	call	2011928 <xTimerGenericCommand>
 201222c:	e0bffe15 	stw	r2,-8(fp)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 2012230:	d0a7e217 	ldw	r2,-24696(gp)
 2012234:	10800017 	ldw	r2,0(r2)
 2012238:	103fcc1e 	bne	r2,zero,201216c <__alt_mem_mem_0+0xfcff216c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 201223c:	d0a7e217 	ldw	r2,-24696(gp)
 2012240:	e0bfff15 	stw	r2,-4(fp)
	pxCurrentTimerList = pxOverflowTimerList;
 2012244:	d0a7e317 	ldw	r2,-24692(gp)
 2012248:	d0a7e215 	stw	r2,-24696(gp)
	pxOverflowTimerList = pxTemp;
 201224c:	e0bfff17 	ldw	r2,-4(fp)
 2012250:	d0a7e315 	stw	r2,-24692(gp)
}
 2012254:	0001883a 	nop
 2012258:	e037883a 	mov	sp,fp
 201225c:	dfc00117 	ldw	ra,4(sp)
 2012260:	df000017 	ldw	fp,0(sp)
 2012264:	dec00204 	addi	sp,sp,8
 2012268:	f800283a 	ret

0201226c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 201226c:	defffe04 	addi	sp,sp,-8
 2012270:	dfc00115 	stw	ra,4(sp)
 2012274:	df000015 	stw	fp,0(sp)
 2012278:	d839883a 	mov	fp,sp
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 201227c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2012280:	10000126 	beq	r2,zero,2012288 <prvCheckForValidListAndQueue+0x1c>
 2012284:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		if( xTimerQueue == NULL )
 2012288:	d0a7e417 	ldw	r2,-24688(gp)
 201228c:	1000111e 	bne	r2,zero,20122d4 <prvCheckForValidListAndQueue+0x68>
		{
			vListInitialise( &xActiveTimerList1 );
 2012290:	01008134 	movhi	r4,516
 2012294:	211e4404 	addi	r4,r4,30992
 2012298:	2026b9c0 	call	2026b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 201229c:	01008134 	movhi	r4,516
 20122a0:	211e4904 	addi	r4,r4,31012
 20122a4:	2026b9c0 	call	2026b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 20122a8:	00808134 	movhi	r2,516
 20122ac:	109e4404 	addi	r2,r2,30992
 20122b0:	d0a7e215 	stw	r2,-24696(gp)
			pxOverflowTimerList = &xActiveTimerList2;
 20122b4:	00808134 	movhi	r2,516
 20122b8:	109e4904 	addi	r2,r2,31012
 20122bc:	d0a7e315 	stw	r2,-24692(gp)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 20122c0:	000d883a 	mov	r6,zero
 20122c4:	01400304 	movi	r5,12
 20122c8:	01000284 	movi	r4,10
 20122cc:	200d4e00 	call	200d4e0 <xQueueGenericCreate>
 20122d0:	d0a7e415 	stw	r2,-24688(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 20122d4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20122d8:	10000126 	beq	r2,zero,20122e0 <prvCheckForValidListAndQueue+0x74>
 20122dc:	2010e300 	call	2010e30 <vTaskExitCritical>
}
 20122e0:	0001883a 	nop
 20122e4:	e037883a 	mov	sp,fp
 20122e8:	dfc00117 	ldw	ra,4(sp)
 20122ec:	df000017 	ldw	fp,0(sp)
 20122f0:	dec00204 	addi	sp,sp,8
 20122f4:	f800283a 	ret

020122f8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 20122f8:	defffb04 	addi	sp,sp,-20
 20122fc:	dfc00415 	stw	ra,16(sp)
 2012300:	df000315 	stw	fp,12(sp)
 2012304:	df000304 	addi	fp,sp,12
 2012308:	e13fff15 	stw	r4,-4(fp)
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 201230c:	e0bfff17 	ldw	r2,-4(fp)
 2012310:	e0bffe15 	stw	r2,-8(fp)

	configASSERT( xTimer );

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 2012314:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2012318:	10000126 	beq	r2,zero,2012320 <xTimerIsTimerActive+0x28>
 201231c:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 2012320:	e0bffe17 	ldw	r2,-8(fp)
 2012324:	10800a03 	ldbu	r2,40(r2)
 2012328:	10803fcc 	andi	r2,r2,255
 201232c:	1080004c 	andi	r2,r2,1
 2012330:	1000021e 	bne	r2,zero,201233c <xTimerIsTimerActive+0x44>
		{
			xReturn = pdFALSE;
 2012334:	e03ffd15 	stw	zero,-12(fp)
 2012338:	00000206 	br	2012344 <xTimerIsTimerActive+0x4c>
		}
		else
		{
			xReturn = pdTRUE;
 201233c:	00800044 	movi	r2,1
 2012340:	e0bffd15 	stw	r2,-12(fp)
		}
	}
	taskEXIT_CRITICAL();
 2012344:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2012348:	10000126 	beq	r2,zero,2012350 <xTimerIsTimerActive+0x58>
 201234c:	2010e300 	call	2010e30 <vTaskExitCritical>

	return xReturn;
 2012350:	e0bffd17 	ldw	r2,-12(fp)
} /*lint !e818 Can't be pointer to const due to the typedef. */
 2012354:	e037883a 	mov	sp,fp
 2012358:	dfc00117 	ldw	ra,4(sp)
 201235c:	df000017 	ldw	fp,0(sp)
 2012360:	dec00204 	addi	sp,sp,8
 2012364:	f800283a 	ret

02012368 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 2012368:	defffb04 	addi	sp,sp,-20
 201236c:	dfc00415 	stw	ra,16(sp)
 2012370:	df000315 	stw	fp,12(sp)
 2012374:	df000304 	addi	fp,sp,12
 2012378:	e13fff15 	stw	r4,-4(fp)
Timer_t * const pxTimer = xTimer;
 201237c:	e0bfff17 	ldw	r2,-4(fp)
 2012380:	e0bffd15 	stw	r2,-12(fp)
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 2012384:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2012388:	10000126 	beq	r2,zero,2012390 <pvTimerGetTimerID+0x28>
 201238c:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 2012390:	e0bffd17 	ldw	r2,-12(fp)
 2012394:	10800717 	ldw	r2,28(r2)
 2012398:	e0bffe15 	stw	r2,-8(fp)
	}
	taskEXIT_CRITICAL();
 201239c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20123a0:	10000126 	beq	r2,zero,20123a8 <pvTimerGetTimerID+0x40>
 20123a4:	2010e300 	call	2010e30 <vTaskExitCritical>

	return pvReturn;
 20123a8:	e0bffe17 	ldw	r2,-8(fp)
}
 20123ac:	e037883a 	mov	sp,fp
 20123b0:	dfc00117 	ldw	ra,4(sp)
 20123b4:	df000017 	ldw	fp,0(sp)
 20123b8:	dec00204 	addi	sp,sp,8
 20123bc:	f800283a 	ret

020123c0 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 20123c0:	defffb04 	addi	sp,sp,-20
 20123c4:	dfc00415 	stw	ra,16(sp)
 20123c8:	df000315 	stw	fp,12(sp)
 20123cc:	df000304 	addi	fp,sp,12
 20123d0:	e13ffe15 	stw	r4,-8(fp)
 20123d4:	e17fff15 	stw	r5,-4(fp)
Timer_t * const pxTimer = xTimer;
 20123d8:	e0bffe17 	ldw	r2,-8(fp)
 20123dc:	e0bffd15 	stw	r2,-12(fp)

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 20123e0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20123e4:	10000126 	beq	r2,zero,20123ec <vTimerSetTimerID+0x2c>
 20123e8:	2010de80 	call	2010de8 <vTaskEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 20123ec:	e0bffd17 	ldw	r2,-12(fp)
 20123f0:	e0ffff17 	ldw	r3,-4(fp)
 20123f4:	10c00715 	stw	r3,28(r2)
	}
	taskEXIT_CRITICAL();
 20123f8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20123fc:	10000126 	beq	r2,zero,2012404 <vTimerSetTimerID+0x44>
 2012400:	2010e300 	call	2010e30 <vTaskExitCritical>
}
 2012404:	0001883a 	nop
 2012408:	e037883a 	mov	sp,fp
 201240c:	dfc00117 	ldw	ra,4(sp)
 2012410:	df000017 	ldw	fp,0(sp)
 2012414:	dec00204 	addi	sp,sp,8
 2012418:	f800283a 	ret

0201241c <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
	{
 201241c:	defffe04 	addi	sp,sp,-8
 2012420:	df000115 	stw	fp,4(sp)
 2012424:	df000104 	addi	fp,sp,4
 2012428:	e13fff15 	stw	r4,-4(fp)
		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 201242c:	e0bfff17 	ldw	r2,-4(fp)
 2012430:	10800917 	ldw	r2,36(r2)
	}
 2012434:	e037883a 	mov	sp,fp
 2012438:	df000017 	ldw	fp,0(sp)
 201243c:	dec00104 	addi	sp,sp,4
 2012440:	f800283a 	ret

02012444 <vTimerSetTimerNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
	{
 2012444:	defffd04 	addi	sp,sp,-12
 2012448:	df000215 	stw	fp,8(sp)
 201244c:	df000204 	addi	fp,sp,8
 2012450:	e13ffe15 	stw	r4,-8(fp)
 2012454:	e17fff15 	stw	r5,-4(fp)
		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 2012458:	e0bffe17 	ldw	r2,-8(fp)
 201245c:	e0ffff17 	ldw	r3,-4(fp)
 2012460:	10c00915 	stw	r3,36(r2)
	}
 2012464:	0001883a 	nop
 2012468:	e037883a 	mov	sp,fp
 201246c:	df000017 	ldw	fp,0(sp)
 2012470:	dec00104 	addi	sp,sp,4
 2012474:	f800283a 	ret

02012478 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2012478:	defffc04 	addi	sp,sp,-16
 201247c:	df000315 	stw	fp,12(sp)
 2012480:	df000304 	addi	fp,sp,12
 2012484:	e13ffd15 	stw	r4,-12(fp)
 2012488:	e17ffe15 	stw	r5,-8(fp)
 201248c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2012490:	e0bfff17 	ldw	r2,-4(fp)
}
 2012494:	e037883a 	mov	sp,fp
 2012498:	df000017 	ldw	fp,0(sp)
 201249c:	dec00104 	addi	sp,sp,4
 20124a0:	f800283a 	ret

020124a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20124a4:	defffd04 	addi	sp,sp,-12
 20124a8:	dfc00215 	stw	ra,8(sp)
 20124ac:	df000115 	stw	fp,4(sp)
 20124b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20124b4:	00808134 	movhi	r2,516
 20124b8:	10823204 	addi	r2,r2,2248
 20124bc:	e0bfff15 	stw	r2,-4(fp)
 20124c0:	00000606 	br	20124dc <_do_ctors+0x38>
        (*ctor) (); 
 20124c4:	e0bfff17 	ldw	r2,-4(fp)
 20124c8:	10800017 	ldw	r2,0(r2)
 20124cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20124d0:	e0bfff17 	ldw	r2,-4(fp)
 20124d4:	10bfff04 	addi	r2,r2,-4
 20124d8:	e0bfff15 	stw	r2,-4(fp)
 20124dc:	e0ffff17 	ldw	r3,-4(fp)
 20124e0:	00808134 	movhi	r2,516
 20124e4:	10823304 	addi	r2,r2,2252
 20124e8:	18bff62e 	bgeu	r3,r2,20124c4 <__alt_mem_mem_0+0xfcff24c4>
        (*ctor) (); 
}
 20124ec:	0001883a 	nop
 20124f0:	e037883a 	mov	sp,fp
 20124f4:	dfc00117 	ldw	ra,4(sp)
 20124f8:	df000017 	ldw	fp,0(sp)
 20124fc:	dec00204 	addi	sp,sp,8
 2012500:	f800283a 	ret

02012504 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2012504:	defffd04 	addi	sp,sp,-12
 2012508:	dfc00215 	stw	ra,8(sp)
 201250c:	df000115 	stw	fp,4(sp)
 2012510:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2012514:	00808134 	movhi	r2,516
 2012518:	10823204 	addi	r2,r2,2248
 201251c:	e0bfff15 	stw	r2,-4(fp)
 2012520:	00000606 	br	201253c <_do_dtors+0x38>
        (*dtor) (); 
 2012524:	e0bfff17 	ldw	r2,-4(fp)
 2012528:	10800017 	ldw	r2,0(r2)
 201252c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2012530:	e0bfff17 	ldw	r2,-4(fp)
 2012534:	10bfff04 	addi	r2,r2,-4
 2012538:	e0bfff15 	stw	r2,-4(fp)
 201253c:	e0ffff17 	ldw	r3,-4(fp)
 2012540:	00808134 	movhi	r2,516
 2012544:	10823304 	addi	r2,r2,2252
 2012548:	18bff62e 	bgeu	r3,r2,2012524 <__alt_mem_mem_0+0xfcff2524>
        (*dtor) (); 
}
 201254c:	0001883a 	nop
 2012550:	e037883a 	mov	sp,fp
 2012554:	dfc00117 	ldw	ra,4(sp)
 2012558:	df000017 	ldw	fp,0(sp)
 201255c:	dec00204 	addi	sp,sp,8
 2012560:	f800283a 	ret

02012564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012564:	defffe04 	addi	sp,sp,-8
 2012568:	dfc00115 	stw	ra,4(sp)
 201256c:	df000015 	stw	fp,0(sp)
 2012570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2012574:	d0a01917 	ldw	r2,-32668(gp)
 2012578:	10000326 	beq	r2,zero,2012588 <alt_get_errno+0x24>
 201257c:	d0a01917 	ldw	r2,-32668(gp)
 2012580:	103ee83a 	callr	r2
 2012584:	00000106 	br	201258c <alt_get_errno+0x28>
 2012588:	d0a7ce04 	addi	r2,gp,-24776
}
 201258c:	e037883a 	mov	sp,fp
 2012590:	dfc00117 	ldw	ra,4(sp)
 2012594:	df000017 	ldw	fp,0(sp)
 2012598:	dec00204 	addi	sp,sp,8
 201259c:	f800283a 	ret

020125a0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 20125a0:	defffb04 	addi	sp,sp,-20
 20125a4:	dfc00415 	stw	ra,16(sp)
 20125a8:	df000315 	stw	fp,12(sp)
 20125ac:	df000304 	addi	fp,sp,12
 20125b0:	e13ffe15 	stw	r4,-8(fp)
 20125b4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20125b8:	e0bffe17 	ldw	r2,-8(fp)
 20125bc:	10000616 	blt	r2,zero,20125d8 <fstat+0x38>
 20125c0:	e0bffe17 	ldw	r2,-8(fp)
 20125c4:	10c00324 	muli	r3,r2,12
 20125c8:	00808134 	movhi	r2,516
 20125cc:	10909204 	addi	r2,r2,16968
 20125d0:	1885883a 	add	r2,r3,r2
 20125d4:	00000106 	br	20125dc <fstat+0x3c>
 20125d8:	0005883a 	mov	r2,zero
 20125dc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 20125e0:	e0bffd17 	ldw	r2,-12(fp)
 20125e4:	10001026 	beq	r2,zero,2012628 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 20125e8:	e0bffd17 	ldw	r2,-12(fp)
 20125ec:	10800017 	ldw	r2,0(r2)
 20125f0:	10800817 	ldw	r2,32(r2)
 20125f4:	10000726 	beq	r2,zero,2012614 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 20125f8:	e0bffd17 	ldw	r2,-12(fp)
 20125fc:	10800017 	ldw	r2,0(r2)
 2012600:	10800817 	ldw	r2,32(r2)
 2012604:	e17fff17 	ldw	r5,-4(fp)
 2012608:	e13ffd17 	ldw	r4,-12(fp)
 201260c:	103ee83a 	callr	r2
 2012610:	00000a06 	br	201263c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2012614:	e0bfff17 	ldw	r2,-4(fp)
 2012618:	00c80004 	movi	r3,8192
 201261c:	10c00115 	stw	r3,4(r2)
      return 0;
 2012620:	0005883a 	mov	r2,zero
 2012624:	00000506 	br	201263c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2012628:	20125640 	call	2012564 <alt_get_errno>
 201262c:	1007883a 	mov	r3,r2
 2012630:	00801444 	movi	r2,81
 2012634:	18800015 	stw	r2,0(r3)
    return -1;
 2012638:	00bfffc4 	movi	r2,-1
  }
}
 201263c:	e037883a 	mov	sp,fp
 2012640:	dfc00117 	ldw	ra,4(sp)
 2012644:	df000017 	ldw	fp,0(sp)
 2012648:	dec00204 	addi	sp,sp,8
 201264c:	f800283a 	ret

02012650 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2012650:	defff904 	addi	sp,sp,-28
 2012654:	dfc00615 	stw	ra,24(sp)
 2012658:	df000515 	stw	fp,20(sp)
 201265c:	df000504 	addi	fp,sp,20
 2012660:	e13ffc15 	stw	r4,-16(fp)
 2012664:	e17ffd15 	stw	r5,-12(fp)
 2012668:	e1bffe15 	stw	r6,-8(fp)
 201266c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2012670:	e1bfff17 	ldw	r6,-4(fp)
 2012674:	e17ffe17 	ldw	r5,-8(fp)
 2012678:	e13ffd17 	ldw	r4,-12(fp)
 201267c:	2012b6c0 	call	2012b6c <open>
 2012680:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2012684:	e0bffb17 	ldw	r2,-20(fp)
 2012688:	10001c16 	blt	r2,zero,20126fc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 201268c:	00808134 	movhi	r2,516
 2012690:	10909204 	addi	r2,r2,16968
 2012694:	e0fffb17 	ldw	r3,-20(fp)
 2012698:	18c00324 	muli	r3,r3,12
 201269c:	10c5883a 	add	r2,r2,r3
 20126a0:	10c00017 	ldw	r3,0(r2)
 20126a4:	e0bffc17 	ldw	r2,-16(fp)
 20126a8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 20126ac:	00808134 	movhi	r2,516
 20126b0:	10909204 	addi	r2,r2,16968
 20126b4:	e0fffb17 	ldw	r3,-20(fp)
 20126b8:	18c00324 	muli	r3,r3,12
 20126bc:	10c5883a 	add	r2,r2,r3
 20126c0:	10800104 	addi	r2,r2,4
 20126c4:	10c00017 	ldw	r3,0(r2)
 20126c8:	e0bffc17 	ldw	r2,-16(fp)
 20126cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20126d0:	00808134 	movhi	r2,516
 20126d4:	10909204 	addi	r2,r2,16968
 20126d8:	e0fffb17 	ldw	r3,-20(fp)
 20126dc:	18c00324 	muli	r3,r3,12
 20126e0:	10c5883a 	add	r2,r2,r3
 20126e4:	10800204 	addi	r2,r2,8
 20126e8:	10c00017 	ldw	r3,0(r2)
 20126ec:	e0bffc17 	ldw	r2,-16(fp)
 20126f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 20126f4:	e13ffb17 	ldw	r4,-20(fp)
 20126f8:	2012f280 	call	2012f28 <alt_release_fd>
  }
} 
 20126fc:	0001883a 	nop
 2012700:	e037883a 	mov	sp,fp
 2012704:	dfc00117 	ldw	ra,4(sp)
 2012708:	df000017 	ldw	fp,0(sp)
 201270c:	dec00204 	addi	sp,sp,8
 2012710:	f800283a 	ret

02012714 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2012714:	defffb04 	addi	sp,sp,-20
 2012718:	dfc00415 	stw	ra,16(sp)
 201271c:	df000315 	stw	fp,12(sp)
 2012720:	df000304 	addi	fp,sp,12
 2012724:	e13ffd15 	stw	r4,-12(fp)
 2012728:	e17ffe15 	stw	r5,-8(fp)
 201272c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2012730:	01c07fc4 	movi	r7,511
 2012734:	01800044 	movi	r6,1
 2012738:	e17ffd17 	ldw	r5,-12(fp)
 201273c:	01008134 	movhi	r4,516
 2012740:	21109504 	addi	r4,r4,16980
 2012744:	20126500 	call	2012650 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2012748:	01c07fc4 	movi	r7,511
 201274c:	000d883a 	mov	r6,zero
 2012750:	e17ffe17 	ldw	r5,-8(fp)
 2012754:	01008134 	movhi	r4,516
 2012758:	21109204 	addi	r4,r4,16968
 201275c:	20126500 	call	2012650 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2012760:	01c07fc4 	movi	r7,511
 2012764:	01800044 	movi	r6,1
 2012768:	e17fff17 	ldw	r5,-4(fp)
 201276c:	01008134 	movhi	r4,516
 2012770:	21109804 	addi	r4,r4,16992
 2012774:	20126500 	call	2012650 <alt_open_fd>
}  
 2012778:	0001883a 	nop
 201277c:	e037883a 	mov	sp,fp
 2012780:	dfc00117 	ldw	ra,4(sp)
 2012784:	df000017 	ldw	fp,0(sp)
 2012788:	dec00204 	addi	sp,sp,8
 201278c:	f800283a 	ret

02012790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012790:	defffe04 	addi	sp,sp,-8
 2012794:	dfc00115 	stw	ra,4(sp)
 2012798:	df000015 	stw	fp,0(sp)
 201279c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20127a0:	d0a01917 	ldw	r2,-32668(gp)
 20127a4:	10000326 	beq	r2,zero,20127b4 <alt_get_errno+0x24>
 20127a8:	d0a01917 	ldw	r2,-32668(gp)
 20127ac:	103ee83a 	callr	r2
 20127b0:	00000106 	br	20127b8 <alt_get_errno+0x28>
 20127b4:	d0a7ce04 	addi	r2,gp,-24776
}
 20127b8:	e037883a 	mov	sp,fp
 20127bc:	dfc00117 	ldw	ra,4(sp)
 20127c0:	df000017 	ldw	fp,0(sp)
 20127c4:	dec00204 	addi	sp,sp,8
 20127c8:	f800283a 	ret

020127cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 20127cc:	deffed04 	addi	sp,sp,-76
 20127d0:	dfc01215 	stw	ra,72(sp)
 20127d4:	df001115 	stw	fp,68(sp)
 20127d8:	df001104 	addi	fp,sp,68
 20127dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20127e0:	e0bfff17 	ldw	r2,-4(fp)
 20127e4:	10000616 	blt	r2,zero,2012800 <isatty+0x34>
 20127e8:	e0bfff17 	ldw	r2,-4(fp)
 20127ec:	10c00324 	muli	r3,r2,12
 20127f0:	00808134 	movhi	r2,516
 20127f4:	10909204 	addi	r2,r2,16968
 20127f8:	1885883a 	add	r2,r3,r2
 20127fc:	00000106 	br	2012804 <isatty+0x38>
 2012800:	0005883a 	mov	r2,zero
 2012804:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2012808:	e0bfef17 	ldw	r2,-68(fp)
 201280c:	10000e26 	beq	r2,zero,2012848 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2012810:	e0bfef17 	ldw	r2,-68(fp)
 2012814:	10800017 	ldw	r2,0(r2)
 2012818:	10800817 	ldw	r2,32(r2)
 201281c:	1000021e 	bne	r2,zero,2012828 <isatty+0x5c>
    {
      return 1;
 2012820:	00800044 	movi	r2,1
 2012824:	00000d06 	br	201285c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2012828:	e0bff004 	addi	r2,fp,-64
 201282c:	100b883a 	mov	r5,r2
 2012830:	e13fff17 	ldw	r4,-4(fp)
 2012834:	20125a00 	call	20125a0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2012838:	e0bff117 	ldw	r2,-60(fp)
 201283c:	10880020 	cmpeqi	r2,r2,8192
 2012840:	10803fcc 	andi	r2,r2,255
 2012844:	00000506 	br	201285c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2012848:	20127900 	call	2012790 <alt_get_errno>
 201284c:	1007883a 	mov	r3,r2
 2012850:	00801444 	movi	r2,81
 2012854:	18800015 	stw	r2,0(r3)
    return 0;
 2012858:	0005883a 	mov	r2,zero
  }
}
 201285c:	e037883a 	mov	sp,fp
 2012860:	dfc00117 	ldw	ra,4(sp)
 2012864:	df000017 	ldw	fp,0(sp)
 2012868:	dec00204 	addi	sp,sp,8
 201286c:	f800283a 	ret

02012870 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2012870:	defffc04 	addi	sp,sp,-16
 2012874:	df000315 	stw	fp,12(sp)
 2012878:	df000304 	addi	fp,sp,12
 201287c:	e13ffd15 	stw	r4,-12(fp)
 2012880:	e17ffe15 	stw	r5,-8(fp)
 2012884:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2012888:	e0fffe17 	ldw	r3,-8(fp)
 201288c:	e0bffd17 	ldw	r2,-12(fp)
 2012890:	18800c26 	beq	r3,r2,20128c4 <alt_load_section+0x54>
  {
    while( to != end )
 2012894:	00000806 	br	20128b8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 2012898:	e0bffe17 	ldw	r2,-8(fp)
 201289c:	10c00104 	addi	r3,r2,4
 20128a0:	e0fffe15 	stw	r3,-8(fp)
 20128a4:	e0fffd17 	ldw	r3,-12(fp)
 20128a8:	19000104 	addi	r4,r3,4
 20128ac:	e13ffd15 	stw	r4,-12(fp)
 20128b0:	18c00017 	ldw	r3,0(r3)
 20128b4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 20128b8:	e0fffe17 	ldw	r3,-8(fp)
 20128bc:	e0bfff17 	ldw	r2,-4(fp)
 20128c0:	18bff51e 	bne	r3,r2,2012898 <__alt_mem_mem_0+0xfcff2898>
    {
      *to++ = *from++;
    }
  }
}
 20128c4:	0001883a 	nop
 20128c8:	e037883a 	mov	sp,fp
 20128cc:	df000017 	ldw	fp,0(sp)
 20128d0:	dec00104 	addi	sp,sp,4
 20128d4:	f800283a 	ret

020128d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 20128d8:	defffe04 	addi	sp,sp,-8
 20128dc:	dfc00115 	stw	ra,4(sp)
 20128e0:	df000015 	stw	fp,0(sp)
 20128e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 20128e8:	01808134 	movhi	r6,516
 20128ec:	31960504 	addi	r6,r6,22548
 20128f0:	01408134 	movhi	r5,516
 20128f4:	294e5f04 	addi	r5,r5,14716
 20128f8:	01008134 	movhi	r4,516
 20128fc:	21160504 	addi	r4,r4,22548
 2012900:	20128700 	call	2012870 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2012904:	01808034 	movhi	r6,512
 2012908:	31809204 	addi	r6,r6,584
 201290c:	01408034 	movhi	r5,512
 2012910:	29400804 	addi	r5,r5,32
 2012914:	01008034 	movhi	r4,512
 2012918:	21000804 	addi	r4,r4,32
 201291c:	20128700 	call	2012870 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2012920:	01808134 	movhi	r6,516
 2012924:	318e5f04 	addi	r6,r6,14716
 2012928:	01408134 	movhi	r5,516
 201292c:	29423304 	addi	r5,r5,2252
 2012930:	01008134 	movhi	r4,516
 2012934:	21023304 	addi	r4,r4,2252
 2012938:	20128700 	call	2012870 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 201293c:	20274d40 	call	20274d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2012940:	2027a400 	call	2027a40 <alt_icache_flush_all>
}
 2012944:	0001883a 	nop
 2012948:	e037883a 	mov	sp,fp
 201294c:	dfc00117 	ldw	ra,4(sp)
 2012950:	df000017 	ldw	fp,0(sp)
 2012954:	dec00204 	addi	sp,sp,8
 2012958:	f800283a 	ret

0201295c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201295c:	defffe04 	addi	sp,sp,-8
 2012960:	dfc00115 	stw	ra,4(sp)
 2012964:	df000015 	stw	fp,0(sp)
 2012968:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201296c:	d0a01917 	ldw	r2,-32668(gp)
 2012970:	10000326 	beq	r2,zero,2012980 <alt_get_errno+0x24>
 2012974:	d0a01917 	ldw	r2,-32668(gp)
 2012978:	103ee83a 	callr	r2
 201297c:	00000106 	br	2012984 <alt_get_errno+0x28>
 2012980:	d0a7ce04 	addi	r2,gp,-24776
}
 2012984:	e037883a 	mov	sp,fp
 2012988:	dfc00117 	ldw	ra,4(sp)
 201298c:	df000017 	ldw	fp,0(sp)
 2012990:	dec00204 	addi	sp,sp,8
 2012994:	f800283a 	ret

02012998 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2012998:	defff904 	addi	sp,sp,-28
 201299c:	dfc00615 	stw	ra,24(sp)
 20129a0:	df000515 	stw	fp,20(sp)
 20129a4:	df000504 	addi	fp,sp,20
 20129a8:	e13ffd15 	stw	r4,-12(fp)
 20129ac:	e17ffe15 	stw	r5,-8(fp)
 20129b0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 20129b4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20129b8:	e0bffd17 	ldw	r2,-12(fp)
 20129bc:	10000616 	blt	r2,zero,20129d8 <lseek+0x40>
 20129c0:	e0bffd17 	ldw	r2,-12(fp)
 20129c4:	10c00324 	muli	r3,r2,12
 20129c8:	00808134 	movhi	r2,516
 20129cc:	10909204 	addi	r2,r2,16968
 20129d0:	1885883a 	add	r2,r3,r2
 20129d4:	00000106 	br	20129dc <lseek+0x44>
 20129d8:	0005883a 	mov	r2,zero
 20129dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 20129e0:	e0bffc17 	ldw	r2,-16(fp)
 20129e4:	10001026 	beq	r2,zero,2012a28 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 20129e8:	e0bffc17 	ldw	r2,-16(fp)
 20129ec:	10800017 	ldw	r2,0(r2)
 20129f0:	10800717 	ldw	r2,28(r2)
 20129f4:	10000926 	beq	r2,zero,2012a1c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 20129f8:	e0bffc17 	ldw	r2,-16(fp)
 20129fc:	10800017 	ldw	r2,0(r2)
 2012a00:	10800717 	ldw	r2,28(r2)
 2012a04:	e1bfff17 	ldw	r6,-4(fp)
 2012a08:	e17ffe17 	ldw	r5,-8(fp)
 2012a0c:	e13ffc17 	ldw	r4,-16(fp)
 2012a10:	103ee83a 	callr	r2
 2012a14:	e0bffb15 	stw	r2,-20(fp)
 2012a18:	00000506 	br	2012a30 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2012a1c:	00bfde84 	movi	r2,-134
 2012a20:	e0bffb15 	stw	r2,-20(fp)
 2012a24:	00000206 	br	2012a30 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 2012a28:	00bfebc4 	movi	r2,-81
 2012a2c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2012a30:	e0bffb17 	ldw	r2,-20(fp)
 2012a34:	1000070e 	bge	r2,zero,2012a54 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 2012a38:	201295c0 	call	201295c <alt_get_errno>
 2012a3c:	1007883a 	mov	r3,r2
 2012a40:	e0bffb17 	ldw	r2,-20(fp)
 2012a44:	0085c83a 	sub	r2,zero,r2
 2012a48:	18800015 	stw	r2,0(r3)
    rc = -1;
 2012a4c:	00bfffc4 	movi	r2,-1
 2012a50:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2012a54:	e0bffb17 	ldw	r2,-20(fp)
}
 2012a58:	e037883a 	mov	sp,fp
 2012a5c:	dfc00117 	ldw	ra,4(sp)
 2012a60:	df000017 	ldw	fp,0(sp)
 2012a64:	dec00204 	addi	sp,sp,8
 2012a68:	f800283a 	ret

02012a6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012a6c:	defffe04 	addi	sp,sp,-8
 2012a70:	dfc00115 	stw	ra,4(sp)
 2012a74:	df000015 	stw	fp,0(sp)
 2012a78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2012a7c:	d0a01917 	ldw	r2,-32668(gp)
 2012a80:	10000326 	beq	r2,zero,2012a90 <alt_get_errno+0x24>
 2012a84:	d0a01917 	ldw	r2,-32668(gp)
 2012a88:	103ee83a 	callr	r2
 2012a8c:	00000106 	br	2012a94 <alt_get_errno+0x28>
 2012a90:	d0a7ce04 	addi	r2,gp,-24776
}
 2012a94:	e037883a 	mov	sp,fp
 2012a98:	dfc00117 	ldw	ra,4(sp)
 2012a9c:	df000017 	ldw	fp,0(sp)
 2012aa0:	dec00204 	addi	sp,sp,8
 2012aa4:	f800283a 	ret

02012aa8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2012aa8:	defffd04 	addi	sp,sp,-12
 2012aac:	df000215 	stw	fp,8(sp)
 2012ab0:	df000204 	addi	fp,sp,8
 2012ab4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2012ab8:	e0bfff17 	ldw	r2,-4(fp)
 2012abc:	10800217 	ldw	r2,8(r2)
 2012ac0:	10d00034 	orhi	r3,r2,16384
 2012ac4:	e0bfff17 	ldw	r2,-4(fp)
 2012ac8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2012acc:	e03ffe15 	stw	zero,-8(fp)
 2012ad0:	00001d06 	br	2012b48 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2012ad4:	00808134 	movhi	r2,516
 2012ad8:	10909204 	addi	r2,r2,16968
 2012adc:	e0fffe17 	ldw	r3,-8(fp)
 2012ae0:	18c00324 	muli	r3,r3,12
 2012ae4:	10c5883a 	add	r2,r2,r3
 2012ae8:	10c00017 	ldw	r3,0(r2)
 2012aec:	e0bfff17 	ldw	r2,-4(fp)
 2012af0:	10800017 	ldw	r2,0(r2)
 2012af4:	1880111e 	bne	r3,r2,2012b3c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2012af8:	00808134 	movhi	r2,516
 2012afc:	10909204 	addi	r2,r2,16968
 2012b00:	e0fffe17 	ldw	r3,-8(fp)
 2012b04:	18c00324 	muli	r3,r3,12
 2012b08:	10c5883a 	add	r2,r2,r3
 2012b0c:	10800204 	addi	r2,r2,8
 2012b10:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2012b14:	1000090e 	bge	r2,zero,2012b3c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2012b18:	e0bffe17 	ldw	r2,-8(fp)
 2012b1c:	10c00324 	muli	r3,r2,12
 2012b20:	00808134 	movhi	r2,516
 2012b24:	10909204 	addi	r2,r2,16968
 2012b28:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2012b2c:	e0bfff17 	ldw	r2,-4(fp)
 2012b30:	18800226 	beq	r3,r2,2012b3c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2012b34:	00bffcc4 	movi	r2,-13
 2012b38:	00000806 	br	2012b5c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2012b3c:	e0bffe17 	ldw	r2,-8(fp)
 2012b40:	10800044 	addi	r2,r2,1
 2012b44:	e0bffe15 	stw	r2,-8(fp)
 2012b48:	d0a00a17 	ldw	r2,-32728(gp)
 2012b4c:	1007883a 	mov	r3,r2
 2012b50:	e0bffe17 	ldw	r2,-8(fp)
 2012b54:	18bfdf2e 	bgeu	r3,r2,2012ad4 <__alt_mem_mem_0+0xfcff2ad4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2012b58:	0005883a 	mov	r2,zero
}
 2012b5c:	e037883a 	mov	sp,fp
 2012b60:	df000017 	ldw	fp,0(sp)
 2012b64:	dec00104 	addi	sp,sp,4
 2012b68:	f800283a 	ret

02012b6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2012b6c:	defff604 	addi	sp,sp,-40
 2012b70:	dfc00915 	stw	ra,36(sp)
 2012b74:	df000815 	stw	fp,32(sp)
 2012b78:	df000804 	addi	fp,sp,32
 2012b7c:	e13ffd15 	stw	r4,-12(fp)
 2012b80:	e17ffe15 	stw	r5,-8(fp)
 2012b84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2012b88:	00bfffc4 	movi	r2,-1
 2012b8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2012b90:	00bffb44 	movi	r2,-19
 2012b94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2012b98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2012b9c:	d1600804 	addi	r5,gp,-32736
 2012ba0:	e13ffd17 	ldw	r4,-12(fp)
 2012ba4:	20275d40 	call	20275d4 <alt_find_dev>
 2012ba8:	e0bff815 	stw	r2,-32(fp)
 2012bac:	e0bff817 	ldw	r2,-32(fp)
 2012bb0:	1000051e 	bne	r2,zero,2012bc8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2012bb4:	e13ffd17 	ldw	r4,-12(fp)
 2012bb8:	20276640 	call	2027664 <alt_find_file>
 2012bbc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2012bc0:	00800044 	movi	r2,1
 2012bc4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2012bc8:	e0bff817 	ldw	r2,-32(fp)
 2012bcc:	10002926 	beq	r2,zero,2012c74 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2012bd0:	e13ff817 	ldw	r4,-32(fp)
 2012bd4:	202776c0 	call	202776c <alt_get_fd>
 2012bd8:	e0bff915 	stw	r2,-28(fp)
 2012bdc:	e0bff917 	ldw	r2,-28(fp)
 2012be0:	1000030e 	bge	r2,zero,2012bf0 <open+0x84>
    {
      status = index;
 2012be4:	e0bff917 	ldw	r2,-28(fp)
 2012be8:	e0bffa15 	stw	r2,-24(fp)
 2012bec:	00002306 	br	2012c7c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 2012bf0:	e0bff917 	ldw	r2,-28(fp)
 2012bf4:	10c00324 	muli	r3,r2,12
 2012bf8:	00808134 	movhi	r2,516
 2012bfc:	10909204 	addi	r2,r2,16968
 2012c00:	1885883a 	add	r2,r3,r2
 2012c04:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2012c08:	e0fffe17 	ldw	r3,-8(fp)
 2012c0c:	00900034 	movhi	r2,16384
 2012c10:	10bfffc4 	addi	r2,r2,-1
 2012c14:	1886703a 	and	r3,r3,r2
 2012c18:	e0bffc17 	ldw	r2,-16(fp)
 2012c1c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2012c20:	e0bffb17 	ldw	r2,-20(fp)
 2012c24:	1000051e 	bne	r2,zero,2012c3c <open+0xd0>
 2012c28:	e13ffc17 	ldw	r4,-16(fp)
 2012c2c:	2012aa80 	call	2012aa8 <alt_file_locked>
 2012c30:	e0bffa15 	stw	r2,-24(fp)
 2012c34:	e0bffa17 	ldw	r2,-24(fp)
 2012c38:	10001016 	blt	r2,zero,2012c7c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2012c3c:	e0bff817 	ldw	r2,-32(fp)
 2012c40:	10800317 	ldw	r2,12(r2)
 2012c44:	10000826 	beq	r2,zero,2012c68 <open+0xfc>
 2012c48:	e0bff817 	ldw	r2,-32(fp)
 2012c4c:	10800317 	ldw	r2,12(r2)
 2012c50:	e1ffff17 	ldw	r7,-4(fp)
 2012c54:	e1bffe17 	ldw	r6,-8(fp)
 2012c58:	e17ffd17 	ldw	r5,-12(fp)
 2012c5c:	e13ffc17 	ldw	r4,-16(fp)
 2012c60:	103ee83a 	callr	r2
 2012c64:	00000106 	br	2012c6c <open+0x100>
 2012c68:	0005883a 	mov	r2,zero
 2012c6c:	e0bffa15 	stw	r2,-24(fp)
 2012c70:	00000206 	br	2012c7c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2012c74:	00bffb44 	movi	r2,-19
 2012c78:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2012c7c:	e0bffa17 	ldw	r2,-24(fp)
 2012c80:	1000090e 	bge	r2,zero,2012ca8 <open+0x13c>
  {
    alt_release_fd (index);  
 2012c84:	e13ff917 	ldw	r4,-28(fp)
 2012c88:	2012f280 	call	2012f28 <alt_release_fd>
    ALT_ERRNO = -status;
 2012c8c:	2012a6c0 	call	2012a6c <alt_get_errno>
 2012c90:	1007883a 	mov	r3,r2
 2012c94:	e0bffa17 	ldw	r2,-24(fp)
 2012c98:	0085c83a 	sub	r2,zero,r2
 2012c9c:	18800015 	stw	r2,0(r3)
    return -1;
 2012ca0:	00bfffc4 	movi	r2,-1
 2012ca4:	00000106 	br	2012cac <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 2012ca8:	e0bff917 	ldw	r2,-28(fp)
}
 2012cac:	e037883a 	mov	sp,fp
 2012cb0:	dfc00117 	ldw	ra,4(sp)
 2012cb4:	df000017 	ldw	fp,0(sp)
 2012cb8:	dec00204 	addi	sp,sp,8
 2012cbc:	f800283a 	ret

02012cc0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 2012cc0:	defff204 	addi	sp,sp,-56
 2012cc4:	dfc00a15 	stw	ra,40(sp)
 2012cc8:	df000915 	stw	fp,36(sp)
 2012ccc:	df000904 	addi	fp,sp,36
 2012cd0:	e13fff15 	stw	r4,-4(fp)
 2012cd4:	e1400215 	stw	r5,8(fp)
 2012cd8:	e1800315 	stw	r6,12(fp)
 2012cdc:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 2012ce0:	e0800204 	addi	r2,fp,8
 2012ce4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 2012ce8:	e0bfff17 	ldw	r2,-4(fp)
 2012cec:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 2012cf0:	00006f06 	br	2012eb0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 2012cf4:	e0bff807 	ldb	r2,-32(fp)
 2012cf8:	10800960 	cmpeqi	r2,r2,37
 2012cfc:	1000041e 	bne	r2,zero,2012d10 <alt_printf+0x50>
        {
            alt_putchar(c);
 2012d00:	e0bff807 	ldb	r2,-32(fp)
 2012d04:	1009883a 	mov	r4,r2
 2012d08:	2012eec0 	call	2012eec <alt_putchar>
 2012d0c:	00006806 	br	2012eb0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 2012d10:	e0bff717 	ldw	r2,-36(fp)
 2012d14:	10c00044 	addi	r3,r2,1
 2012d18:	e0fff715 	stw	r3,-36(fp)
 2012d1c:	10800003 	ldbu	r2,0(r2)
 2012d20:	e0bff805 	stb	r2,-32(fp)
 2012d24:	e0bff807 	ldb	r2,-32(fp)
 2012d28:	10006926 	beq	r2,zero,2012ed0 <alt_printf+0x210>
            {
                if (c == '%')
 2012d2c:	e0bff807 	ldb	r2,-32(fp)
 2012d30:	10800958 	cmpnei	r2,r2,37
 2012d34:	1000041e 	bne	r2,zero,2012d48 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 2012d38:	e0bff807 	ldb	r2,-32(fp)
 2012d3c:	1009883a 	mov	r4,r2
 2012d40:	2012eec0 	call	2012eec <alt_putchar>
 2012d44:	00005a06 	br	2012eb0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 2012d48:	e0bff807 	ldb	r2,-32(fp)
 2012d4c:	108018d8 	cmpnei	r2,r2,99
 2012d50:	1000081e 	bne	r2,zero,2012d74 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 2012d54:	e0bffe17 	ldw	r2,-8(fp)
 2012d58:	10c00104 	addi	r3,r2,4
 2012d5c:	e0fffe15 	stw	r3,-8(fp)
 2012d60:	10800017 	ldw	r2,0(r2)
 2012d64:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 2012d68:	e13ffd17 	ldw	r4,-12(fp)
 2012d6c:	2012eec0 	call	2012eec <alt_putchar>
 2012d70:	00004f06 	br	2012eb0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 2012d74:	e0bff807 	ldb	r2,-32(fp)
 2012d78:	10801e18 	cmpnei	r2,r2,120
 2012d7c:	1000341e 	bne	r2,zero,2012e50 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 2012d80:	e0bffe17 	ldw	r2,-8(fp)
 2012d84:	10c00104 	addi	r3,r2,4
 2012d88:	e0fffe15 	stw	r3,-8(fp)
 2012d8c:	10800017 	ldw	r2,0(r2)
 2012d90:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 2012d94:	e0bffb17 	ldw	r2,-20(fp)
 2012d98:	1000031e 	bne	r2,zero,2012da8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 2012d9c:	01000c04 	movi	r4,48
 2012da0:	2012eec0 	call	2012eec <alt_putchar>
                        continue;
 2012da4:	00004206 	br	2012eb0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 2012da8:	00800704 	movi	r2,28
 2012dac:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 2012db0:	00000306 	br	2012dc0 <alt_printf+0x100>
                        digit_shift -= 4;
 2012db4:	e0bff917 	ldw	r2,-28(fp)
 2012db8:	10bfff04 	addi	r2,r2,-4
 2012dbc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 2012dc0:	00c003c4 	movi	r3,15
 2012dc4:	e0bff917 	ldw	r2,-28(fp)
 2012dc8:	1884983a 	sll	r2,r3,r2
 2012dcc:	1007883a 	mov	r3,r2
 2012dd0:	e0bffb17 	ldw	r2,-20(fp)
 2012dd4:	1884703a 	and	r2,r3,r2
 2012dd8:	103ff626 	beq	r2,zero,2012db4 <__alt_mem_mem_0+0xfcff2db4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 2012ddc:	00001906 	br	2012e44 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 2012de0:	00c003c4 	movi	r3,15
 2012de4:	e0bff917 	ldw	r2,-28(fp)
 2012de8:	1884983a 	sll	r2,r3,r2
 2012dec:	1007883a 	mov	r3,r2
 2012df0:	e0bffb17 	ldw	r2,-20(fp)
 2012df4:	1886703a 	and	r3,r3,r2
 2012df8:	e0bff917 	ldw	r2,-28(fp)
 2012dfc:	1884d83a 	srl	r2,r3,r2
 2012e00:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 2012e04:	e0bffc17 	ldw	r2,-16(fp)
 2012e08:	108002a8 	cmpgeui	r2,r2,10
 2012e0c:	1000041e 	bne	r2,zero,2012e20 <alt_printf+0x160>
                            c = '0' + digit;
 2012e10:	e0bffc17 	ldw	r2,-16(fp)
 2012e14:	10800c04 	addi	r2,r2,48
 2012e18:	e0bff805 	stb	r2,-32(fp)
 2012e1c:	00000306 	br	2012e2c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 2012e20:	e0bffc17 	ldw	r2,-16(fp)
 2012e24:	108015c4 	addi	r2,r2,87
 2012e28:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 2012e2c:	e0bff807 	ldb	r2,-32(fp)
 2012e30:	1009883a 	mov	r4,r2
 2012e34:	2012eec0 	call	2012eec <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 2012e38:	e0bff917 	ldw	r2,-28(fp)
 2012e3c:	10bfff04 	addi	r2,r2,-4
 2012e40:	e0bff915 	stw	r2,-28(fp)
 2012e44:	e0bff917 	ldw	r2,-28(fp)
 2012e48:	103fe50e 	bge	r2,zero,2012de0 <__alt_mem_mem_0+0xfcff2de0>
 2012e4c:	00001806 	br	2012eb0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 2012e50:	e0bff807 	ldb	r2,-32(fp)
 2012e54:	10801cd8 	cmpnei	r2,r2,115
 2012e58:	1000151e 	bne	r2,zero,2012eb0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 2012e5c:	e0bffe17 	ldw	r2,-8(fp)
 2012e60:	10c00104 	addi	r3,r2,4
 2012e64:	e0fffe15 	stw	r3,-8(fp)
 2012e68:	10800017 	ldw	r2,0(r2)
 2012e6c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 2012e70:	00000906 	br	2012e98 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 2012e74:	e0bffa17 	ldw	r2,-24(fp)
 2012e78:	10c00044 	addi	r3,r2,1
 2012e7c:	e0fffa15 	stw	r3,-24(fp)
 2012e80:	10800003 	ldbu	r2,0(r2)
 2012e84:	10803fcc 	andi	r2,r2,255
 2012e88:	1080201c 	xori	r2,r2,128
 2012e8c:	10bfe004 	addi	r2,r2,-128
 2012e90:	1009883a 	mov	r4,r2
 2012e94:	2012eec0 	call	2012eec <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 2012e98:	e0bffa17 	ldw	r2,-24(fp)
 2012e9c:	10800003 	ldbu	r2,0(r2)
 2012ea0:	10803fcc 	andi	r2,r2,255
 2012ea4:	1080201c 	xori	r2,r2,128
 2012ea8:	10bfe004 	addi	r2,r2,-128
 2012eac:	103ff11e 	bne	r2,zero,2012e74 <__alt_mem_mem_0+0xfcff2e74>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 2012eb0:	e0bff717 	ldw	r2,-36(fp)
 2012eb4:	10c00044 	addi	r3,r2,1
 2012eb8:	e0fff715 	stw	r3,-36(fp)
 2012ebc:	10800003 	ldbu	r2,0(r2)
 2012ec0:	e0bff805 	stb	r2,-32(fp)
 2012ec4:	e0bff807 	ldb	r2,-32(fp)
 2012ec8:	103f8a1e 	bne	r2,zero,2012cf4 <__alt_mem_mem_0+0xfcff2cf4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 2012ecc:	00000106 	br	2012ed4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 2012ed0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 2012ed4:	0001883a 	nop
 2012ed8:	e037883a 	mov	sp,fp
 2012edc:	dfc00117 	ldw	ra,4(sp)
 2012ee0:	df000017 	ldw	fp,0(sp)
 2012ee4:	dec00504 	addi	sp,sp,20
 2012ee8:	f800283a 	ret

02012eec <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 2012eec:	defffd04 	addi	sp,sp,-12
 2012ef0:	dfc00215 	stw	ra,8(sp)
 2012ef4:	df000115 	stw	fp,4(sp)
 2012ef8:	df000104 	addi	fp,sp,4
 2012efc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 2012f00:	d0a00117 	ldw	r2,-32764(gp)
 2012f04:	10800217 	ldw	r2,8(r2)
 2012f08:	100b883a 	mov	r5,r2
 2012f0c:	e13fff17 	ldw	r4,-4(fp)
 2012f10:	203cbd80 	call	203cbd8 <putc>
#endif
#endif
}
 2012f14:	e037883a 	mov	sp,fp
 2012f18:	dfc00117 	ldw	ra,4(sp)
 2012f1c:	df000017 	ldw	fp,0(sp)
 2012f20:	dec00204 	addi	sp,sp,8
 2012f24:	f800283a 	ret

02012f28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2012f28:	defffe04 	addi	sp,sp,-8
 2012f2c:	df000115 	stw	fp,4(sp)
 2012f30:	df000104 	addi	fp,sp,4
 2012f34:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2012f38:	e0bfff17 	ldw	r2,-4(fp)
 2012f3c:	108000d0 	cmplti	r2,r2,3
 2012f40:	10000d1e 	bne	r2,zero,2012f78 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2012f44:	00808134 	movhi	r2,516
 2012f48:	10909204 	addi	r2,r2,16968
 2012f4c:	e0ffff17 	ldw	r3,-4(fp)
 2012f50:	18c00324 	muli	r3,r3,12
 2012f54:	10c5883a 	add	r2,r2,r3
 2012f58:	10800204 	addi	r2,r2,8
 2012f5c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2012f60:	00808134 	movhi	r2,516
 2012f64:	10909204 	addi	r2,r2,16968
 2012f68:	e0ffff17 	ldw	r3,-4(fp)
 2012f6c:	18c00324 	muli	r3,r3,12
 2012f70:	10c5883a 	add	r2,r2,r3
 2012f74:	10000015 	stw	zero,0(r2)
  }
}
 2012f78:	0001883a 	nop
 2012f7c:	e037883a 	mov	sp,fp
 2012f80:	df000017 	ldw	fp,0(sp)
 2012f84:	dec00104 	addi	sp,sp,4
 2012f88:	f800283a 	ret

02012f8c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2012f8c:	defff904 	addi	sp,sp,-28
 2012f90:	df000615 	stw	fp,24(sp)
 2012f94:	df000604 	addi	fp,sp,24
 2012f98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012f9c:	0005303a 	rdctl	r2,status
 2012fa0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012fa4:	e0fffe17 	ldw	r3,-8(fp)
 2012fa8:	00bfff84 	movi	r2,-2
 2012fac:	1884703a 	and	r2,r3,r2
 2012fb0:	1001703a 	wrctl	status,r2
  
  return context;
 2012fb4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2012fb8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2012fbc:	d0a00b17 	ldw	r2,-32724(gp)
 2012fc0:	10c000c4 	addi	r3,r2,3
 2012fc4:	00bfff04 	movi	r2,-4
 2012fc8:	1884703a 	and	r2,r3,r2
 2012fcc:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2012fd0:	d0e00b17 	ldw	r3,-32724(gp)
 2012fd4:	e0bfff17 	ldw	r2,-4(fp)
 2012fd8:	1887883a 	add	r3,r3,r2
 2012fdc:	00810034 	movhi	r2,1024
 2012fe0:	10800004 	addi	r2,r2,0
 2012fe4:	10c0062e 	bgeu	r2,r3,2013000 <sbrk+0x74>
 2012fe8:	e0bffb17 	ldw	r2,-20(fp)
 2012fec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012ff0:	e0bffa17 	ldw	r2,-24(fp)
 2012ff4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2012ff8:	00bfffc4 	movi	r2,-1
 2012ffc:	00000b06 	br	201302c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2013000:	d0a00b17 	ldw	r2,-32724(gp)
 2013004:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 2013008:	d0e00b17 	ldw	r3,-32724(gp)
 201300c:	e0bfff17 	ldw	r2,-4(fp)
 2013010:	1885883a 	add	r2,r3,r2
 2013014:	d0a00b15 	stw	r2,-32724(gp)
 2013018:	e0bffb17 	ldw	r2,-20(fp)
 201301c:	e0bffc15 	stw	r2,-16(fp)
 2013020:	e0bffc17 	ldw	r2,-16(fp)
 2013024:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2013028:	e0bffd17 	ldw	r2,-12(fp)
} 
 201302c:	e037883a 	mov	sp,fp
 2013030:	df000017 	ldw	fp,0(sp)
 2013034:	dec00104 	addi	sp,sp,4
 2013038:	f800283a 	ret

0201303c <close>:
 * (for files and device drivers) or the InterNiche soclose() function for
 * sockets.
 */
 
int close (int fd)
{
 201303c:	defffd04 	addi	sp,sp,-12
 2013040:	dfc00215 	stw	ra,8(sp)
 2013044:	df000115 	stw	fp,4(sp)
 2013048:	df000104 	addi	fp,sp,4
 201304c:	e13fff15 	stw	r4,-4(fp)
	if (fd < ALT_MAX_FD)
 2013050:	e0bfff17 	ldw	r2,-4(fp)
 2013054:	10800808 	cmpgei	r2,r2,32
 2013058:	1000031e 	bne	r2,zero,2013068 <close+0x2c>
		return ALT_CLOSE (fd);
 201305c:	e13fff17 	ldw	r4,-4(fp)
 2013060:	20273dc0 	call	20273dc <alt_close>
 2013064:	00000206 	br	2013070 <close+0x34>
#if LWIP_SOCKET
	else
		return lwip_close((long) fd);
 2013068:	e13fff17 	ldw	r4,-4(fp)
 201306c:	20289500 	call	2028950 <lwip_close>
#else
	else
		return -1;
#endif
}
 2013070:	e037883a 	mov	sp,fp
 2013074:	dfc00117 	ldw	ra,4(sp)
 2013078:	df000017 	ldw	fp,0(sp)
 201307c:	dec00204 	addi	sp,sp,8
 2013080:	f800283a 	ret

02013084 <read>:
 * (for files and device drivers) or the InterNiche recvfrom() function for
 * sockets.
 */

int read (int fd, void *ptr, size_t len)
{
 2013084:	defff904 	addi	sp,sp,-28
 2013088:	dfc00615 	stw	ra,24(sp)
 201308c:	df000515 	stw	fp,20(sp)
 2013090:	df000504 	addi	fp,sp,20
 2013094:	e13ffd15 	stw	r4,-12(fp)
 2013098:	e17ffe15 	stw	r5,-8(fp)
 201309c:	e1bfff15 	stw	r6,-4(fp)
	if (fd < ALT_MAX_FD)
 20130a0:	e0bffd17 	ldw	r2,-12(fp)
 20130a4:	10800808 	cmpgei	r2,r2,32
 20130a8:	1000051e 	bne	r2,zero,20130c0 <read+0x3c>
		return ALT_READ (fd, ptr, len);
 20130ac:	e1bfff17 	ldw	r6,-4(fp)
 20130b0:	e17ffe17 	ldw	r5,-8(fp)
 20130b4:	e13ffd17 	ldw	r4,-12(fp)
 20130b8:	2027d500 	call	2027d50 <alt_read>
 20130bc:	00000706 	br	20130dc <read+0x58>
#if LWIP_SOCKET
	else
		return recvfrom(fd, ptr, len, 0, NULL, NULL);
 20130c0:	d8000115 	stw	zero,4(sp)
 20130c4:	d8000015 	stw	zero,0(sp)
 20130c8:	000f883a 	mov	r7,zero
 20130cc:	e1bfff17 	ldw	r6,-4(fp)
 20130d0:	e17ffe17 	ldw	r5,-8(fp)
 20130d4:	e13ffd17 	ldw	r4,-12(fp)
 20130d8:	2028c680 	call	2028c68 <lwip_recvfrom>
#else
	else
		return -1;
#endif
}
 20130dc:	e037883a 	mov	sp,fp
 20130e0:	dfc00117 	ldw	ra,4(sp)
 20130e4:	df000017 	ldw	fp,0(sp)
 20130e8:	dec00204 	addi	sp,sp,8
 20130ec:	f800283a 	ret

020130f0 <write>:
 * This implementation vectors requests to either the HAL alt_write() function 
 * (for files and device drivers) or the InterNiche send() function for sockets.
 */

int write (int fd, const void *ptr, size_t len)
{
 20130f0:	defffb04 	addi	sp,sp,-20
 20130f4:	dfc00415 	stw	ra,16(sp)
 20130f8:	df000315 	stw	fp,12(sp)
 20130fc:	df000304 	addi	fp,sp,12
 2013100:	e13ffd15 	stw	r4,-12(fp)
 2013104:	e17ffe15 	stw	r5,-8(fp)
 2013108:	e1bfff15 	stw	r6,-4(fp)
  if (fd < ALT_MAX_FD)
 201310c:	e0bffd17 	ldw	r2,-12(fp)
 2013110:	10800808 	cmpgei	r2,r2,32
 2013114:	1000051e 	bne	r2,zero,201312c <write+0x3c>
    return ALT_WRITE(fd, ptr, len);
 2013118:	e1bfff17 	ldw	r6,-4(fp)
 201311c:	e17ffe17 	ldw	r5,-8(fp)
 2013120:	e13ffd17 	ldw	r4,-12(fp)
 2013124:	202808c0 	call	202808c <alt_write>
 2013128:	00000506 	br	2013140 <write+0x50>
#if LWIP_SOCKET
  else
    return send (fd, (void*) ptr, len, 0);
 201312c:	000f883a 	mov	r7,zero
 2013130:	e1bfff17 	ldw	r6,-4(fp)
 2013134:	e17ffe17 	ldw	r5,-8(fp)
 2013138:	e13ffd17 	ldw	r4,-12(fp)
 201313c:	20291dc0 	call	20291dc <lwip_send>
#else
	else
		return -1;
#endif
}
 2013140:	e037883a 	mov	sp,fp
 2013144:	dfc00117 	ldw	ra,4(sp)
 2013148:	df000017 	ldw	fp,0(sp)
 201314c:	dec00204 	addi	sp,sp,8
 2013150:	f800283a 	ret

02013154 <low_level_init>:
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void
low_level_init(struct netif *netif)
{
 2013154:	defffc04 	addi	sp,sp,-16
 2013158:	dfc00315 	stw	ra,12(sp)
 201315c:	df000215 	stw	fp,8(sp)
 2013160:	df000204 	addi	fp,sp,8
 2013164:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif = netif->state;
 2013168:	e0bfff17 	ldw	r2,-4(fp)
 201316c:	10800917 	ldw	r2,36(r2)
 2013170:	e0bffe15 	stw	r2,-8(fp)

	/* set MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;
 2013174:	e0bfff17 	ldw	r2,-4(fp)
 2013178:	00c00184 	movi	r3,6
 201317c:	10c00c85 	stb	r3,50(r2)

	/* maximum transfer unit */
	netif->mtu = IP_FRAG_MAX_MTU;
 2013180:	e0bfff17 	ldw	r2,-4(fp)
 2013184:	00c17704 	movi	r3,1500
 2013188:	10c00c0d 	sth	r3,48(r2)

	/* device capabilities */
	/* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
	netif->flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_LINK_UP;
 201318c:	e0bfff17 	ldw	r2,-4(fp)
 2013190:	00c00c84 	movi	r3,50
 2013194:	10c00e45 	stb	r3,57(r2)

	tse_mac_init(netif->num, ethernetif);
 2013198:	e0bfff17 	ldw	r2,-4(fp)
 201319c:	10800f03 	ldbu	r2,60(r2)
 20131a0:	10803fcc 	andi	r2,r2,255
 20131a4:	e17ffe17 	ldw	r5,-8(fp)
 20131a8:	1009883a 	mov	r4,r2
 20131ac:	2013f8c0 	call	2013f8c <tse_mac_init>
}
 20131b0:	0001883a 	nop
 20131b4:	e037883a 	mov	sp,fp
 20131b8:	dfc00117 	ldw	ra,4(sp)
 20131bc:	df000017 	ldw	fp,0(sp)
 20131c0:	dec00204 	addi	sp,sp,8
 20131c4:	f800283a 	ret

020131c8 <low_level_input>:
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf *
low_level_input(struct netif *netif)
{
 20131c8:	defffa04 	addi	sp,sp,-24
 20131cc:	dfc00515 	stw	ra,20(sp)
 20131d0:	df000415 	stw	fp,16(sp)
 20131d4:	df000404 	addi	fp,sp,16
 20131d8:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif = netif->state;
 20131dc:	e0bfff17 	ldw	r2,-4(fp)
 20131e0:	10800917 	ldw	r2,36(r2)
 20131e4:	e0bffd15 	stw	r2,-12(fp)
	struct pbuf *p, *nextPkt;

	if(ethernetif->lwipRxCount <= 0)
 20131e8:	e0bffd17 	ldw	r2,-12(fp)
 20131ec:	10801517 	ldw	r2,84(r2)
 20131f0:	00800216 	blt	zero,r2,20131fc <low_level_input+0x34>
		return NULL;
 20131f4:	0005883a 	mov	r2,zero
 20131f8:	00004306 	br	2013308 <low_level_input+0x140>

	//  Dump current packet if there is no memory for the next packet.
	//  The lwipRxPbuf must contain pointers to pbufs at all times.
	nextPkt = pbuf_alloc(PBUF_RAW,  PBUF_POOL_BUFSIZE, PBUF_POOL);
 20131fc:	018000c4 	movi	r6,3
 2013200:	01417b04 	movi	r5,1516
 2013204:	010000c4 	movi	r4,3
 2013208:	201a2640 	call	201a264 <pbuf_alloc>
 201320c:	e0bffe15 	stw	r2,-8(fp)
	if(nextPkt == NULL)
 2013210:	e0bffe17 	ldw	r2,-8(fp)
 2013214:	1000101e 	bne	r2,zero,2013258 <low_level_input+0x90>
	{
		LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("no pbuf available\n"));

		LINK_STATS_INC(link.memerr);
 2013218:	008085f4 	movhi	r2,535
 201321c:	10a86704 	addi	r2,r2,-24164
 2013220:	10800617 	ldw	r2,24(r2)
 2013224:	10c00044 	addi	r3,r2,1
 2013228:	008085f4 	movhi	r2,535
 201322c:	10a86704 	addi	r2,r2,-24164
 2013230:	10c00615 	stw	r3,24(r2)
		LINK_STATS_INC(link.drop);
 2013234:	008085f4 	movhi	r2,535
 2013238:	10a86704 	addi	r2,r2,-24164
 201323c:	10800317 	ldw	r2,12(r2)
 2013240:	10c00044 	addi	r3,r2,1
 2013244:	008085f4 	movhi	r2,535
 2013248:	10a86704 	addi	r2,r2,-24164
 201324c:	10c00315 	stw	r3,12(r2)
		return NULL;
 2013250:	0005883a 	mov	r2,zero
 2013254:	00002c06 	br	2013308 <low_level_input+0x140>
	}

	nextPkt = (void*)(((alt_u32)nextPkt));
	nextPkt->payload = (void*)(((alt_u32)nextPkt->payload));
 2013258:	e0bffe17 	ldw	r2,-8(fp)
 201325c:	10c00117 	ldw	r3,4(r2)
 2013260:	e0bffe17 	ldw	r2,-8(fp)
 2013264:	10c00115 	stw	r3,4(r2)

	enh_alt_irq_disable_all();
 2013268:	2026e580 	call	2026e58 <enh_alt_irq_disable_all>

	p = ethernetif->lwipRxPbuf[ethernetif->lwipRxIndex];
 201326c:	e0bffd17 	ldw	r2,-12(fp)
 2013270:	10801417 	ldw	r2,80(r2)
 2013274:	e0fffd17 	ldw	r3,-12(fp)
 2013278:	108001c4 	addi	r2,r2,7
 201327c:	1085883a 	add	r2,r2,r2
 2013280:	1085883a 	add	r2,r2,r2
 2013284:	1885883a 	add	r2,r3,r2
 2013288:	10800017 	ldw	r2,0(r2)
 201328c:	e0bffc15 	stw	r2,-16(fp)
	ethernetif->lwipRxPbuf[ethernetif->lwipRxIndex] = nextPkt;
 2013290:	e0bffd17 	ldw	r2,-12(fp)
 2013294:	10801417 	ldw	r2,80(r2)
 2013298:	e0fffd17 	ldw	r3,-12(fp)
 201329c:	108001c4 	addi	r2,r2,7
 20132a0:	1085883a 	add	r2,r2,r2
 20132a4:	1085883a 	add	r2,r2,r2
 20132a8:	1885883a 	add	r2,r3,r2
 20132ac:	e0fffe17 	ldw	r3,-8(fp)
 20132b0:	10c00015 	stw	r3,0(r2)
	if(++ethernetif->lwipRxIndex >= LWIP_RX_ETH_BUFFER)
 20132b4:	e0bffd17 	ldw	r2,-12(fp)
 20132b8:	10801417 	ldw	r2,80(r2)
 20132bc:	10800044 	addi	r2,r2,1
 20132c0:	e0fffd17 	ldw	r3,-12(fp)
 20132c4:	18801415 	stw	r2,80(r3)
 20132c8:	10800310 	cmplti	r2,r2,12
 20132cc:	1000021e 	bne	r2,zero,20132d8 <low_level_input+0x110>
		ethernetif->lwipRxIndex = 0;
 20132d0:	e0bffd17 	ldw	r2,-12(fp)
 20132d4:	10001415 	stw	zero,80(r2)

	--ethernetif->lwipRxCount;
 20132d8:	e0bffd17 	ldw	r2,-12(fp)
 20132dc:	10801517 	ldw	r2,84(r2)
 20132e0:	10ffffc4 	addi	r3,r2,-1
 20132e4:	e0bffd17 	ldw	r2,-12(fp)
 20132e8:	10c01515 	stw	r3,84(r2)

	enh_alt_irq_enable_all();
 20132ec:	2026ea80 	call	2026ea8 <enh_alt_irq_enable_all>

	LWIP_ASSERT("low_level_input: pbuf in rx buffer is NULL", p != NULL );
	LWIP_ASSERT("low_level_input: pbuf->len in rx buffer is 0", p->len != 0 );

	if( p->len == 0 )
 20132f0:	e0bffc17 	ldw	r2,-16(fp)
 20132f4:	1080028b 	ldhu	r2,10(r2)
 20132f8:	10bfffcc 	andi	r2,r2,65535
 20132fc:	1000011e 	bne	r2,zero,2013304 <low_level_input+0x13c>
		p = NULL;
 2013300:	e03ffc15 	stw	zero,-16(fp)

	return p;
 2013304:	e0bffc17 	ldw	r2,-16(fp)
}
 2013308:	e037883a 	mov	sp,fp
 201330c:	dfc00117 	ldw	ra,4(sp)
 2013310:	df000017 	ldw	fp,0(sp)
 2013314:	dec00204 	addi	sp,sp,8
 2013318:	f800283a 	ret

0201331c <ethernetif_input>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
int
ethernetif_input(struct netif *netif)
{
 201331c:	defffa04 	addi	sp,sp,-24
 2013320:	dfc00515 	stw	ra,20(sp)
 2013324:	df000415 	stw	fp,16(sp)
 2013328:	df000404 	addi	fp,sp,16
 201332c:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif;
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	ethernetif = netif->state;
 2013330:	e0bfff17 	ldw	r2,-4(fp)
 2013334:	10800917 	ldw	r2,36(r2)
 2013338:	e0bffc15 	stw	r2,-16(fp)

	/* move received packet into a new pbuf */
	p = low_level_input(netif);
 201333c:	e13fff17 	ldw	r4,-4(fp)
 2013340:	20131c80 	call	20131c8 <low_level_input>
 2013344:	e0bffd15 	stw	r2,-12(fp)

	/* no packet could be read, silently ignore this */
	if (p == NULL) return -1;
 2013348:	e0bffd17 	ldw	r2,-12(fp)
 201334c:	1000021e 	bne	r2,zero,2013358 <ethernetif_input+0x3c>
 2013350:	00bfffc4 	movi	r2,-1
 2013354:	00002b06 	br	2013404 <ethernetif_input+0xe8>

	/* points to packet payload, which starts with an Ethernet header */
	ethhdr = p->payload;
 2013358:	e0bffd17 	ldw	r2,-12(fp)
 201335c:	10800117 	ldw	r2,4(r2)
 2013360:	e0bffe15 	stw	r2,-8(fp)

	LINK_STATS_INC(link.recv);
 2013364:	008085f4 	movhi	r2,535
 2013368:	10a86704 	addi	r2,r2,-24164
 201336c:	10800117 	ldw	r2,4(r2)
 2013370:	10c00044 	addi	r3,r2,1
 2013374:	008085f4 	movhi	r2,535
 2013378:	10a86704 	addi	r2,r2,-24164
 201337c:	10c00115 	stw	r3,4(r2)
		pbuf_free(p);
		p = NULL;
		break;
	}
#else
	switch (htons(ethhdr->type)) {
 2013380:	e0bffe17 	ldw	r2,-8(fp)
 2013384:	10c00383 	ldbu	r3,14(r2)
 2013388:	108003c3 	ldbu	r2,15(r2)
 201338c:	1004923a 	slli	r2,r2,8
 2013390:	10c4b03a 	or	r2,r2,r3
 2013394:	10bfffcc 	andi	r2,r2,65535
 2013398:	1004d23a 	srli	r2,r2,8
 201339c:	10ffffcc 	andi	r3,r2,65535
 20133a0:	e0bffe17 	ldw	r2,-8(fp)
 20133a4:	11000383 	ldbu	r4,14(r2)
 20133a8:	108003c3 	ldbu	r2,15(r2)
 20133ac:	1004923a 	slli	r2,r2,8
 20133b0:	1104b03a 	or	r2,r2,r4
 20133b4:	10bfffcc 	andi	r2,r2,65535
 20133b8:	1004923a 	slli	r2,r2,8
 20133bc:	10bfffcc 	andi	r2,r2,65535
 20133c0:	1884b03a 	or	r2,r3,r2
 20133c4:	10c20020 	cmpeqi	r3,r2,2048
 20133c8:	1800021e 	bne	r3,zero,20133d4 <ethernetif_input+0xb8>
 20133cc:	108201a0 	cmpeqi	r2,r2,2054
 20133d0:	10000626 	beq	r2,zero,20133ec <ethernetif_input+0xd0>
#if PPPOE_SUPPORT
	/* PPPoE packet? */
	case ETHTYPE_PPPOEDISC:
	case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
		netif->input(p, netif);
 20133d4:	e0bfff17 	ldw	r2,-4(fp)
 20133d8:	10800417 	ldw	r2,16(r2)
 20133dc:	e17fff17 	ldw	r5,-4(fp)
 20133e0:	e13ffd17 	ldw	r4,-12(fp)
 20133e4:	103ee83a 	callr	r2
		break;
 20133e8:	00000406 	br	20133fc <ethernetif_input+0xe0>

	default:
		pbuf_free( p );
 20133ec:	e13ffd17 	ldw	r4,-12(fp)
 20133f0:	201aa200 	call	201aa20 <pbuf_free>
		p = NULL;
 20133f4:	e03ffd15 	stw	zero,-12(fp)
		break;
 20133f8:	0001883a 	nop
	}
#endif

	// return the waiting packet count
	return ethernetif->lwipRxCount;
 20133fc:	e0bffc17 	ldw	r2,-16(fp)
 2013400:	10801517 	ldw	r2,84(r2)
}
 2013404:	e037883a 	mov	sp,fp
 2013408:	dfc00117 	ldw	ra,4(sp)
 201340c:	df000017 	ldw	fp,0(sp)
 2013410:	dec00204 	addi	sp,sp,8
 2013414:	f800283a 	ret

02013418 <ethernetif_init>:
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t
ethernetif_init(struct netif *netif)
{
 2013418:	defff904 	addi	sp,sp,-28
 201341c:	dfc00615 	stw	ra,24(sp)
 2013420:	df000515 	stw	fp,20(sp)
 2013424:	df000504 	addi	fp,sp,20
 2013428:	e13fff15 	stw	r4,-4(fp)
	err_t tse_mac_raw_send(struct netif *netif, struct pbuf *p);
	char *tmpptr;

	LWIP_ASSERT("netif != NULL", (netif != NULL));

	ethernetif = mem_malloc(sizeof(struct ethernetif));
 201342c:	01001804 	movi	r4,96
 2013430:	201956c0 	call	201956c <mem_malloc>
 2013434:	e0bffc15 	stw	r2,-16(fp)
	if (ethernetif == NULL) {
 2013438:	e0bffc17 	ldw	r2,-16(fp)
 201343c:	1000021e 	bne	r2,zero,2013448 <ethernetif_init+0x30>
		LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("ethernetif_init: out of memory\n"));
		return ERR_MEM;
 2013440:	00bfffc4 	movi	r2,-1
 2013444:	00005b06 	br	20135b4 <ethernetif_init+0x19c>
	}

#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	if (get_hostname(netif->num, (const char**)&tmpptr) == ERR_OK)
 2013448:	e0bfff17 	ldw	r2,-4(fp)
 201344c:	10800f03 	ldbu	r2,60(r2)
 2013450:	10803fcc 	andi	r2,r2,255
 2013454:	e0fffe04 	addi	r3,fp,-8
 2013458:	180b883a 	mov	r5,r3
 201345c:	1009883a 	mov	r4,r2
 2013460:	200082c0 	call	200082c <get_hostname>
 2013464:	1000041e 	bne	r2,zero,2013478 <ethernetif_init+0x60>
		netif->hostname = tmpptr;
 2013468:	e0fffe17 	ldw	r3,-8(fp)
 201346c:	e0bfff17 	ldw	r2,-4(fp)
 2013470:	10c00b15 	stw	r3,44(r2)
 2013474:	00000406 	br	2013488 <ethernetif_init+0x70>
	else
		netif->hostname = "lwip";
 2013478:	e0ffff17 	ldw	r3,-4(fp)
 201347c:	00808134 	movhi	r2,516
 2013480:	10842c04 	addi	r2,r2,4272
 2013484:	18800b15 	stw	r2,44(r3)
	 * of bits per second.
	 */
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

	// pointer abuse, don't worry ;)
	netif->state = ethernetif;
 2013488:	e0bfff17 	ldw	r2,-4(fp)
 201348c:	e0fffc17 	ldw	r3,-16(fp)
 2013490:	10c00915 	stw	r3,36(r2)
	if (get_iface_name(netif->num, (char*)&tmpptr) == ERR_OK) {
 2013494:	e0bfff17 	ldw	r2,-4(fp)
 2013498:	10800f03 	ldbu	r2,60(r2)
 201349c:	10803fcc 	andi	r2,r2,255
 20134a0:	e0fffe04 	addi	r3,fp,-8
 20134a4:	180b883a 	mov	r5,r3
 20134a8:	1009883a 	mov	r4,r2
 20134ac:	20008640 	call	2000864 <get_iface_name>
 20134b0:	1000081e 	bne	r2,zero,20134d4 <ethernetif_init+0xbc>
		netif->name[0] = ((char*)&tmpptr)[0];
 20134b4:	e0bffe04 	addi	r2,fp,-8
 20134b8:	10c00003 	ldbu	r3,0(r2)
 20134bc:	e0bfff17 	ldw	r2,-4(fp)
 20134c0:	10c00e85 	stb	r3,58(r2)
		netif->name[1] = ((char*)&tmpptr)[1];
 20134c4:	e0fffe43 	ldbu	r3,-7(fp)
 20134c8:	e0bfff17 	ldw	r2,-4(fp)
 20134cc:	10c00ec5 	stb	r3,59(r2)
 20134d0:	00000606 	br	20134ec <ethernetif_init+0xd4>
	} else {
		netif->name[0] = 'e';
 20134d4:	e0bfff17 	ldw	r2,-4(fp)
 20134d8:	00c01944 	movi	r3,101
 20134dc:	10c00e85 	stb	r3,58(r2)
		netif->name[1] = 't';
 20134e0:	e0bfff17 	ldw	r2,-4(fp)
 20134e4:	00c01d04 	movi	r3,116
 20134e8:	10c00ec5 	stb	r3,59(r2)

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
 20134ec:	e0ffff17 	ldw	r3,-4(fp)
 20134f0:	008080b4 	movhi	r2,514
 20134f4:	108e4504 	addi	r2,r2,14612
 20134f8:	18800515 	stw	r2,20(r3)
	netif->linkoutput = tse_mac_raw_send;
 20134fc:	e0ffff17 	ldw	r3,-4(fp)
 2013500:	00808074 	movhi	r2,513
 2013504:	10924404 	addi	r2,r2,18704
 2013508:	18800615 	stw	r2,24(r3)

	ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);
 201350c:	e0bfff17 	ldw	r2,-4(fp)
 2013510:	10c00cc4 	addi	r3,r2,51
 2013514:	e0bffc17 	ldw	r2,-16(fp)
 2013518:	10c00015 	stw	r3,0(r2)

	/* initialize the rx buffer for access by the TSE ISR */
	for(idx = 0; idx < LWIP_RX_ETH_BUFFER; ++idx)
 201351c:	e03ffb15 	stw	zero,-20(fp)
 2013520:	00001806 	br	2013584 <ethernetif_init+0x16c>
	{
		p = pbuf_alloc(PBUF_RAW, PBUF_POOL_BUFSIZE, PBUF_POOL);
 2013524:	018000c4 	movi	r6,3
 2013528:	01417b04 	movi	r5,1516
 201352c:	010000c4 	movi	r4,3
 2013530:	201a2640 	call	201a264 <pbuf_alloc>
 2013534:	e0bffd15 	stw	r2,-12(fp)
		if (p == NULL)
 2013538:	e0bffd17 	ldw	r2,-12(fp)
 201353c:	1000021e 	bne	r2,zero,2013548 <ethernetif_init+0x130>
			return ERR_MEM;
 2013540:	00bfffc4 	movi	r2,-1
 2013544:	00001b06 	br	20135b4 <ethernetif_init+0x19c>
		p = (void*)(((alt_u32) p));
		p->payload = (void*)(((alt_u32) p->payload));
 2013548:	e0bffd17 	ldw	r2,-12(fp)
 201354c:	10c00117 	ldw	r3,4(r2)
 2013550:	e0bffd17 	ldw	r2,-12(fp)
 2013554:	10c00115 	stw	r3,4(r2)
		ethernetif->lwipRxPbuf[idx] = p;
 2013558:	e0fffc17 	ldw	r3,-16(fp)
 201355c:	e0bffb17 	ldw	r2,-20(fp)
 2013560:	108001c4 	addi	r2,r2,7
 2013564:	1085883a 	add	r2,r2,r2
 2013568:	1085883a 	add	r2,r2,r2
 201356c:	1885883a 	add	r2,r3,r2
 2013570:	e0fffd17 	ldw	r3,-12(fp)
 2013574:	10c00015 	stw	r3,0(r2)
	netif->linkoutput = tse_mac_raw_send;

	ethernetif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);

	/* initialize the rx buffer for access by the TSE ISR */
	for(idx = 0; idx < LWIP_RX_ETH_BUFFER; ++idx)
 2013578:	e0bffb17 	ldw	r2,-20(fp)
 201357c:	10800044 	addi	r2,r2,1
 2013580:	e0bffb15 	stw	r2,-20(fp)
 2013584:	e0bffb17 	ldw	r2,-20(fp)
 2013588:	10800310 	cmplti	r2,r2,12
 201358c:	103fe51e 	bne	r2,zero,2013524 <__alt_mem_mem_0+0xfcff3524>
			return ERR_MEM;
		p = (void*)(((alt_u32) p));
		p->payload = (void*)(((alt_u32) p->payload));
		ethernetif->lwipRxPbuf[idx] = p;
	}
	ethernetif->lwipRxCount = 0;
 2013590:	e0bffc17 	ldw	r2,-16(fp)
 2013594:	10001515 	stw	zero,84(r2)
	ethernetif->lwipRxIndex = 0;
 2013598:	e0bffc17 	ldw	r2,-16(fp)
 201359c:	10001415 	stw	zero,80(r2)
	ethernetif->lwipRxIndexIsr = 0;
 20135a0:	e0bffc17 	ldw	r2,-16(fp)
 20135a4:	10001315 	stw	zero,76(r2)

	/* initialize the low level hardware */
	low_level_init(netif);
 20135a8:	e13fff17 	ldw	r4,-4(fp)
 20135ac:	20131540 	call	2013154 <low_level_init>

	return ERR_OK;
 20135b0:	0005883a 	mov	r2,zero
}
 20135b4:	e037883a 	mov	sp,fp
 20135b8:	dfc00117 	ldw	ra,4(sp)
 20135bc:	df000017 	ldw	fp,0(sp)
 20135c0:	dec00204 	addi	sp,sp,8
 20135c4:	f800283a 	ret

020135c8 <lwip_initialize>:
}
#endif

// Function which initializes the LwIP TCP/IP stack
void lwip_initialize(int waitForAll)
{
 20135c8:	defffa04 	addi	sp,sp,-24
 20135cc:	dfc00515 	stw	ra,20(sp)
 20135d0:	df000415 	stw	fp,16(sp)
 20135d4:	df000404 	addi	fp,sp,16
 20135d8:	e13fff15 	stw	r4,-4(fp)
	int idx;
	int upCount = 0;
 20135dc:	e03ffd15 	stw	zero,-12(fp)
	int activeCount = 0;
 20135e0:	e03ffe15 	stw	zero,-8(fp)
		return;
	}
#endif

	// Initialize the TCP/IP stack and give our configuration function as callback
	tcpip_init(lwip_handle_interfaces, NULL);
 20135e4:	000b883a 	mov	r5,zero
 20135e8:	01008074 	movhi	r4,513
 20135ec:	210dda04 	addi	r4,r4,14184
 20135f0:	202b9f80 	call	202b9f8 <tcpip_init>

	for (idx = 0; idx < PHY_COUNT; ++idx)
 20135f4:	e03ffc15 	stw	zero,-16(fp)
 20135f8:	00000906 	br	2013620 <lwip_initialize+0x58>
		if (is_interface_active(idx))
 20135fc:	e13ffc17 	ldw	r4,-16(fp)
 2013600:	20008ac0 	call	20008ac <is_interface_active>
 2013604:	10000326 	beq	r2,zero,2013614 <lwip_initialize+0x4c>
			++activeCount;
 2013608:	e0bffe17 	ldw	r2,-8(fp)
 201360c:	10800044 	addi	r2,r2,1
 2013610:	e0bffe15 	stw	r2,-8(fp)
#endif

	// Initialize the TCP/IP stack and give our configuration function as callback
	tcpip_init(lwip_handle_interfaces, NULL);

	for (idx = 0; idx < PHY_COUNT; ++idx)
 2013614:	e0bffc17 	ldw	r2,-16(fp)
 2013618:	10800044 	addi	r2,r2,1
 201361c:	e0bffc15 	stw	r2,-16(fp)
 2013620:	e0bffc17 	ldw	r2,-16(fp)
 2013624:	00bff50e 	bge	zero,r2,20135fc <__alt_mem_mem_0+0xfcff35fc>
		if (is_interface_active(idx))
			++activeCount;

	// Wait for the network to get up
	while ((waitForAll && activeCount != upCount) || (!waitForAll && !upCount))
 2013628:	00001d06 	br	20136a0 <lwip_initialize+0xd8>
	{
		for (idx = 0; idx < PHY_COUNT; ++idx)
 201362c:	e03ffc15 	stw	zero,-16(fp)
 2013630:	00001706 	br	2013690 <lwip_initialize+0xc8>
		{
			if (is_interface_active(idx) && netif_is_up(&eth_tse[idx]))
 2013634:	e13ffc17 	ldw	r4,-16(fp)
 2013638:	20008ac0 	call	20008ac <is_interface_active>
 201363c:	10001126 	beq	r2,zero,2013684 <lwip_initialize+0xbc>
 2013640:	008085b4 	movhi	r2,534
 2013644:	10883b04 	addi	r2,r2,8428
 2013648:	e0fffc17 	ldw	r3,-16(fp)
 201364c:	18c01124 	muli	r3,r3,68
 2013650:	10c5883a 	add	r2,r2,r3
 2013654:	10800e44 	addi	r2,r2,57
 2013658:	10800003 	ldbu	r2,0(r2)
 201365c:	10803fcc 	andi	r2,r2,255
 2013660:	1080004c 	andi	r2,r2,1
 2013664:	10000726 	beq	r2,zero,2013684 <lwip_initialize+0xbc>
			{
				printf("[lwip_eth%d] up\r\n", idx);
 2013668:	e17ffc17 	ldw	r5,-16(fp)
 201366c:	01008134 	movhi	r4,516
 2013670:	21042e04 	addi	r4,r4,4280
 2013674:	20009e40 	call	20009e4 <printf>
				++upCount;
 2013678:	e0bffd17 	ldw	r2,-12(fp)
 201367c:	10800044 	addi	r2,r2,1
 2013680:	e0bffd15 	stw	r2,-12(fp)
			++activeCount;

	// Wait for the network to get up
	while ((waitForAll && activeCount != upCount) || (!waitForAll && !upCount))
	{
		for (idx = 0; idx < PHY_COUNT; ++idx)
 2013684:	e0bffc17 	ldw	r2,-16(fp)
 2013688:	10800044 	addi	r2,r2,1
 201368c:	e0bffc15 	stw	r2,-16(fp)
 2013690:	e0bffc17 	ldw	r2,-16(fp)
 2013694:	00bfe70e 	bge	zero,r2,2013634 <__alt_mem_mem_0+0xfcff3634>
				printf("[lwip_eth%d] up\r\n", idx);
				++upCount;
			}
		}

		mssleep(10);
 2013698:	0109c404 	movi	r4,10000
 201369c:	20280200 	call	2028020 <usleep>
	for (idx = 0; idx < PHY_COUNT; ++idx)
		if (is_interface_active(idx))
			++activeCount;

	// Wait for the network to get up
	while ((waitForAll && activeCount != upCount) || (!waitForAll && !upCount))
 20136a0:	e0bfff17 	ldw	r2,-4(fp)
 20136a4:	10000326 	beq	r2,zero,20136b4 <lwip_initialize+0xec>
 20136a8:	e0fffe17 	ldw	r3,-8(fp)
 20136ac:	e0bffd17 	ldw	r2,-12(fp)
 20136b0:	18bfde1e 	bne	r3,r2,201362c <__alt_mem_mem_0+0xfcff362c>
 20136b4:	e0bfff17 	ldw	r2,-4(fp)
 20136b8:	1000021e 	bne	r2,zero,20136c4 <lwip_initialize+0xfc>
 20136bc:	e0bffd17 	ldw	r2,-12(fp)
 20136c0:	103fda26 	beq	r2,zero,201362c <__alt_mem_mem_0+0xfcff362c>
			}
		}

		mssleep(10);
	}
}
 20136c4:	0001883a 	nop
 20136c8:	e037883a 	mov	sp,fp
 20136cc:	dfc00117 	ldw	ra,4(sp)
 20136d0:	df000017 	ldw	fp,0(sp)
 20136d4:	dec00204 	addi	sp,sp,8
 20136d8:	f800283a 	ret

020136dc <lwip_wait_for_an>:
#endif

#define MAX_RETRY_COUNT			3

int lwip_wait_for_an(int idx, struct ethernetif *ethernetif)
{
 20136dc:	defffb04 	addi	sp,sp,-20
 20136e0:	dfc00415 	stw	ra,16(sp)
 20136e4:	df000315 	stw	fp,12(sp)
 20136e8:	df000304 	addi	fp,sp,12
 20136ec:	e13ffe15 	stw	r4,-8(fp)
 20136f0:	e17fff15 	stw	r5,-4(fp)
	int retryCount = MAX_RETRY_COUNT;
 20136f4:	008000c4 	movi	r2,3
 20136f8:	e0bffd15 	stw	r2,-12(fp)

	while (ethernetif->link_alive != 1 && --retryCount) {
 20136fc:	00000b06 	br	201372c <lwip_wait_for_an+0x50>
		mssleep(100 * (MAX_RETRY_COUNT - retryCount));
 2013700:	00c000c4 	movi	r3,3
 2013704:	e0bffd17 	ldw	r2,-12(fp)
 2013708:	1887c83a 	sub	r3,r3,r2
 201370c:	008000b4 	movhi	r2,2
 2013710:	10a1a804 	addi	r2,r2,-31072
 2013714:	1885383a 	mul	r2,r3,r2
 2013718:	1009883a 	mov	r4,r2
 201371c:	20280200 	call	2028020 <usleep>
		tse_mac_init(idx, ethernetif);
 2013720:	e17fff17 	ldw	r5,-4(fp)
 2013724:	e13ffe17 	ldw	r4,-8(fp)
 2013728:	2013f8c0 	call	2013f8c <tse_mac_init>

int lwip_wait_for_an(int idx, struct ethernetif *ethernetif)
{
	int retryCount = MAX_RETRY_COUNT;

	while (ethernetif->link_alive != 1 && --retryCount) {
 201372c:	e0bfff17 	ldw	r2,-4(fp)
 2013730:	10800217 	ldw	r2,8(r2)
 2013734:	10800060 	cmpeqi	r2,r2,1
 2013738:	1000051e 	bne	r2,zero,2013750 <lwip_wait_for_an+0x74>
 201373c:	e0bffd17 	ldw	r2,-12(fp)
 2013740:	10bfffc4 	addi	r2,r2,-1
 2013744:	e0bffd15 	stw	r2,-12(fp)
 2013748:	e0bffd17 	ldw	r2,-12(fp)
 201374c:	103fec1e 	bne	r2,zero,2013700 <__alt_mem_mem_0+0xfcff3700>
		mssleep(100 * (MAX_RETRY_COUNT - retryCount));
		tse_mac_init(idx, ethernetif);
	}

	return retryCount;
 2013750:	e0bffd17 	ldw	r2,-12(fp)
}
 2013754:	e037883a 	mov	sp,fp
 2013758:	dfc00117 	ldw	ra,4(sp)
 201375c:	df000017 	ldw	fp,0(sp)
 2013760:	dec00204 	addi	sp,sp,8
 2013764:	f800283a 	ret

02013768 <lwip_handle_interfaces>:

void lwip_handle_interfaces(__unused void *params)
{
 2013768:	deffe904 	addi	sp,sp,-92
 201376c:	dfc01615 	stw	ra,88(sp)
 2013770:	df001515 	stw	fp,84(sp)
 2013774:	df001504 	addi	fp,sp,84
 2013778:	e13fff15 	stw	r4,-4(fp)
	int idx;
	int active_macs = 0;
 201377c:	e03fef15 	stw	zero,-68(fp)
	char tmpbuf[OS_MAX_TASK_NAME_LEN];

	ip_addr_t ip = {0}, subnet = {0}, gateway = {0};
 2013780:	e03ffb15 	stw	zero,-20(fp)
 2013784:	e03ffc15 	stw	zero,-16(fp)
 2013788:	e03ffd15 	stw	zero,-12(fp)
	int dhcp;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 201378c:	e03fee15 	stw	zero,-72(fp)
 2013790:	00008406 	br	20139a4 <lwip_handle_interfaces+0x23c>
	{
		struct netif *eth = &eth_tse[idx];
 2013794:	e0bfee17 	ldw	r2,-72(fp)
 2013798:	10c01124 	muli	r3,r2,68
 201379c:	008085b4 	movhi	r2,534
 20137a0:	10883b04 	addi	r2,r2,8428
 20137a4:	1885883a 	add	r2,r3,r2
 20137a8:	e0bff015 	stw	r2,-64(fp)

		// Load platform specific MAC address into netif
		if (get_mac_addr(idx, eth, eth->hwaddr) != EXIT_SUCCESS)
 20137ac:	e0bff017 	ldw	r2,-64(fp)
 20137b0:	10800cc4 	addi	r2,r2,51
 20137b4:	100d883a 	mov	r6,r2
 20137b8:	e17ff017 	ldw	r5,-64(fp)
 20137bc:	e13fee17 	ldw	r4,-72(fp)
 20137c0:	20006580 	call	2000658 <get_mac_addr>
 20137c4:	10000326 	beq	r2,zero,20137d4 <lwip_handle_interfaces+0x6c>
			printf("[LwIP] Failed to get MAC address\n");
 20137c8:	01008134 	movhi	r4,516
 20137cc:	21043304 	addi	r4,r4,4300
 20137d0:	203cd600 	call	203cd60 <puts>

		// Get the requested IP configuration for the given interface
		if (get_ip_addr(idx, &ip, &subnet, &gateway, &dhcp) != EXIT_SUCCESS)
 20137d4:	e17ffd04 	addi	r5,fp,-12
 20137d8:	e13ffc04 	addi	r4,fp,-16
 20137dc:	e0fffb04 	addi	r3,fp,-20
 20137e0:	e0bffe04 	addi	r2,fp,-8
 20137e4:	d8800015 	stw	r2,0(sp)
 20137e8:	280f883a 	mov	r7,r5
 20137ec:	200d883a 	mov	r6,r4
 20137f0:	180b883a 	mov	r5,r3
 20137f4:	e13fee17 	ldw	r4,-72(fp)
 20137f8:	20007740 	call	2000774 <get_ip_addr>
 20137fc:	10000326 	beq	r2,zero,201380c <lwip_handle_interfaces+0xa4>
			printf("[LwIP] Failed to get IP config\n");
 2013800:	01008134 	movhi	r4,516
 2013804:	21043c04 	addi	r4,r4,4336
 2013808:	203cd600 	call	203cd60 <puts>

		//  Initialize lwIP, Altera TSE and the ethernetif
#if NO_SYS
		if (netif_add(eth, &ip, &subnet, &gateway, eth->state, ethernetif_init, ethernet_input) == NULL)
#else
			if (netif_add(eth, &ip, &subnet, &gateway, eth->state, ethernetif_init, tcpip_input) == NULL)
 201380c:	e0bff017 	ldw	r2,-64(fp)
 2013810:	10c00917 	ldw	r3,36(r2)
 2013814:	e1bffd04 	addi	r6,fp,-12
 2013818:	e17ffc04 	addi	r5,fp,-16
 201381c:	e13ffb04 	addi	r4,fp,-20
 2013820:	008080f4 	movhi	r2,515
 2013824:	10ad7d04 	addi	r2,r2,-18956
 2013828:	d8800215 	stw	r2,8(sp)
 201382c:	00808074 	movhi	r2,513
 2013830:	108d0604 	addi	r2,r2,13336
 2013834:	d8800115 	stw	r2,4(sp)
 2013838:	d8c00015 	stw	r3,0(sp)
 201383c:	300f883a 	mov	r7,r6
 2013840:	280d883a 	mov	r6,r5
 2013844:	200b883a 	mov	r5,r4
 2013848:	e13ff017 	ldw	r4,-64(fp)
 201384c:	20199340 	call	2019934 <netif_add>
 2013850:	1000051e 	bne	r2,zero,2013868 <lwip_handle_interfaces+0x100>
#endif
			{
				printf("[eth%d] Fatal error initializing...\n", idx);
 2013854:	e17fee17 	ldw	r5,-72(fp)
 2013858:	01008134 	movhi	r4,516
 201385c:	21044404 	addi	r4,r4,4368
 2013860:	20009e40 	call	20009e4 <printf>
				for(;;) ;
 2013864:	003fff06 	br	2013864 <__alt_mem_mem_0+0xfcff3864>
			}

		// check whether this interface should be used
		if (!is_interface_active(idx))
 2013868:	e13fee17 	ldw	r4,-72(fp)
 201386c:	20008ac0 	call	20008ac <is_interface_active>
 2013870:	10004826 	beq	r2,zero,2013994 <lwip_handle_interfaces+0x22c>
			continue;

		// update the active phy count
		++active_macs;
 2013874:	e0bfef17 	ldw	r2,-68(fp)
 2013878:	10800044 	addi	r2,r2,1
 201387c:	e0bfef15 	stw	r2,-68(fp)

		if (active_macs == 1)
 2013880:	e0bfef17 	ldw	r2,-68(fp)
 2013884:	10800058 	cmpnei	r2,r2,1
 2013888:	1000021e 	bne	r2,zero,2013894 <lwip_handle_interfaces+0x12c>
			netif_set_default(eth);
 201388c:	e13ff017 	ldw	r4,-64(fp)
 2013890:	2019df00 	call	2019df0 <netif_set_default>

		// Set status and link callback (link is not working?)
		netif_set_status_callback(eth, lwip_status_callback);
 2013894:	01408074 	movhi	r5,513
 2013898:	294f5704 	addi	r5,r5,15708
 201389c:	e13ff017 	ldw	r4,-64(fp)
 20138a0:	2019f600 	call	2019f60 <netif_set_status_callback>

		if (link_callback)
 20138a4:	d0a7e917 	ldw	r2,-24668(gp)
 20138a8:	10000426 	beq	r2,zero,20138bc <lwip_handle_interfaces+0x154>
			netif_set_link_callback(eth, link_callback);
 20138ac:	d0a7e917 	ldw	r2,-24668(gp)
 20138b0:	100b883a 	mov	r5,r2
 20138b4:	e13ff017 	ldw	r4,-64(fp)
 20138b8:	201a0d80 	call	201a0d8 <netif_set_link_callback>

		// Initialize Altera TSE in a loop if waiting for a link
		printf("Waiting for link... ");
 20138bc:	01008134 	movhi	r4,516
 20138c0:	21044e04 	addi	r4,r4,4408
 20138c4:	20009e40 	call	20009e4 <printf>
		if (lwip_wait_for_an(idx, eth->state) < 0) {
 20138c8:	e0bff017 	ldw	r2,-64(fp)
 20138cc:	10800917 	ldw	r2,36(r2)
 20138d0:	100b883a 	mov	r5,r2
 20138d4:	e13fee17 	ldw	r4,-72(fp)
 20138d8:	20136dc0 	call	20136dc <lwip_wait_for_an>
 20138dc:	1000040e 	bge	r2,zero,20138f0 <lwip_handle_interfaces+0x188>
			printf("FAILED\n");
 20138e0:	01008134 	movhi	r4,516
 20138e4:	21045404 	addi	r4,r4,4432
 20138e8:	203cd600 	call	203cd60 <puts>
			continue;
 20138ec:	00002a06 	br	2013998 <lwip_handle_interfaces+0x230>
		}

		printf("OK\n");
 20138f0:	01008134 	movhi	r4,516
 20138f4:	21045604 	addi	r4,r4,4440
 20138f8:	203cd600 	call	203cd60 <puts>

		// create input output task and start DHCP or static w/e
		snprintf(tmpbuf, OS_MAX_TASK_NAME_LEN, "LwIP %*sih", 2, eth->name);
 20138fc:	e0bff017 	ldw	r2,-64(fp)
 2013900:	10800e84 	addi	r2,r2,58
 2013904:	e0fff104 	addi	r3,fp,-60
 2013908:	d8800015 	stw	r2,0(sp)
 201390c:	01c00084 	movi	r7,2
 2013910:	01808134 	movhi	r6,516
 2013914:	31845704 	addi	r6,r6,4444
 2013918:	01400a04 	movi	r5,40
 201391c:	1809883a 	mov	r4,r3
 2013920:	203ce4c0 	call	203ce4c <snprintf>
		tmpbuf[(OS_MAX_TASK_NAME_LEN - 1)] = 0;
 2013924:	e03ffac5 	stb	zero,-21(fp)

		// create input task, this must be started before we can do any DHCP request
		if (sys_thread_new(tmpbuf, lwip_handle_ethernet_input, eth, KB(32), TCPIP_THREAD_PRIO) == NULL)
 2013928:	e0fff104 	addi	r3,fp,-60
 201392c:	008000c4 	movi	r2,3
 2013930:	d8800015 	stw	r2,0(sp)
 2013934:	01e00014 	movui	r7,32768
 2013938:	e1bff017 	ldw	r6,-64(fp)
 201393c:	01408074 	movhi	r5,513
 2013940:	294ef504 	addi	r5,r5,15316
 2013944:	1809883a 	mov	r4,r3
 2013948:	20154180 	call	2015418 <sys_thread_new>
 201394c:	1000031e 	bne	r2,zero,201395c <lwip_handle_interfaces+0x1f4>
			printf("LwIP Couldn't create input / output task for ethernet\n");
 2013950:	01008134 	movhi	r4,516
 2013954:	21045a04 	addi	r4,r4,4456
 2013958:	203cd600 	call	203cd60 <puts>

		// wait previous DHCP to finish
		if (dhcp) {
 201395c:	e0bffe17 	ldw	r2,-8(fp)
 2013960:	10000926 	beq	r2,zero,2013988 <lwip_handle_interfaces+0x220>
			printf("[LwIP] Start DHCP request...\n");
 2013964:	01008134 	movhi	r4,516
 2013968:	21046804 	addi	r4,r4,4512
 201396c:	203cd600 	call	203cd60 <puts>

			dhcp_start(eth);
 2013970:	e13ff017 	ldw	r4,-64(fp)
 2013974:	2015fd00 	call	2015fd0 <dhcp_start>

			// wait till we got our address
			printf("[LwIP] Waiting for DHCP IP address...\n");
 2013978:	01008134 	movhi	r4,516
 201397c:	21047004 	addi	r4,r4,4544
 2013980:	203cd600 	call	203cd60 <puts>
 2013984:	00000406 	br	2013998 <lwip_handle_interfaces+0x230>
		} else {
			// the static IP has already been set, just bring up the interface
			netif_set_up(eth);
 2013988:	e13ff017 	ldw	r4,-64(fp)
 201398c:	2019e1c0 	call	2019e1c <netif_set_up>
 2013990:	00000106 	br	2013998 <lwip_handle_interfaces+0x230>
				for(;;) ;
			}

		// check whether this interface should be used
		if (!is_interface_active(idx))
			continue;
 2013994:	0001883a 	nop
	char tmpbuf[OS_MAX_TASK_NAME_LEN];

	ip_addr_t ip = {0}, subnet = {0}, gateway = {0};
	int dhcp;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 2013998:	e0bfee17 	ldw	r2,-72(fp)
 201399c:	10800044 	addi	r2,r2,1
 20139a0:	e0bfee15 	stw	r2,-72(fp)
 20139a4:	e0bfee17 	ldw	r2,-72(fp)
 20139a8:	00bf7a0e 	bge	zero,r2,2013794 <__alt_mem_mem_0+0xfcff3794>
		} else {
			// the static IP has already been set, just bring up the interface
			netif_set_up(eth);
		}
	}
}
 20139ac:	0001883a 	nop
 20139b0:	e037883a 	mov	sp,fp
 20139b4:	dfc00117 	ldw	ra,4(sp)
 20139b8:	df000017 	ldw	fp,0(sp)
 20139bc:	dec00204 	addi	sp,sp,8
 20139c0:	f800283a 	ret

020139c4 <get_mac_count>:
 * \brief Get the number of MAC's available in the NIOS build
 *
 * \returns the number of MAC's in the NIOS build
 */
int get_mac_count(void)
{
 20139c4:	deffff04 	addi	sp,sp,-4
 20139c8:	df000015 	stw	fp,0(sp)
 20139cc:	d839883a 	mov	fp,sp
	return PHY_COUNT;
 20139d0:	00800044 	movi	r2,1
}
 20139d4:	e037883a 	mov	sp,fp
 20139d8:	df000017 	ldw	fp,0(sp)
 20139dc:	dec00104 	addi	sp,sp,4
 20139e0:	f800283a 	ret

020139e4 <get_mac_base>:
 * \param [in] idx the index of the MAC
 *
 * \returns the base address of the MAC
 */
volatile np_tse_mac* get_mac_base(int idx)
{
 20139e4:	defffe04 	addi	sp,sp,-8
 20139e8:	df000115 	stw	fp,4(sp)
 20139ec:	df000104 	addi	fp,sp,4
 20139f0:	e13fff15 	stw	r4,-4(fp)
	if (idx > PHY_COUNT)
 20139f4:	e0bfff17 	ldw	r2,-4(fp)
 20139f8:	10800090 	cmplti	r2,r2,2
 20139fc:	1000021e 	bne	r2,zero,2013a08 <get_mac_base+0x24>
		return NULL;
 2013a00:	0005883a 	mov	r2,zero
 2013a04:	00000606 	br	2013a20 <get_mac_base+0x3c>

	return (volatile np_tse_mac*)tse_mac_device[idx].tse_mac_base;
 2013a08:	00808134 	movhi	r2,516
 2013a0c:	10955704 	addi	r2,r2,21852
 2013a10:	e0ffff17 	ldw	r3,-4(fp)
 2013a14:	18c01224 	muli	r3,r3,72
 2013a18:	10c5883a 	add	r2,r2,r3
 2013a1c:	10800017 	ldw	r2,0(r2)
}
 2013a20:	e037883a 	mov	sp,fp
 2013a24:	df000017 	ldw	fp,0(sp)
 2013a28:	dec00104 	addi	sp,sp,4
 2013a2c:	f800283a 	ret

02013a30 <get_netif>:
 * \brief Get the netif struct used by LwIP
 *
 * \return the reference to the netif used by LwIP
 */
struct netif* get_netif(int idx)
{
 2013a30:	defffe04 	addi	sp,sp,-8
 2013a34:	df000115 	stw	fp,4(sp)
 2013a38:	df000104 	addi	fp,sp,4
 2013a3c:	e13fff15 	stw	r4,-4(fp)
	if (idx > PHY_COUNT)
 2013a40:	e0bfff17 	ldw	r2,-4(fp)
 2013a44:	10800090 	cmplti	r2,r2,2
 2013a48:	1000021e 	bne	r2,zero,2013a54 <get_netif+0x24>
		return NULL;
 2013a4c:	0005883a 	mov	r2,zero
 2013a50:	00000506 	br	2013a68 <get_netif+0x38>

	return eth_tse + idx;
 2013a54:	e0bfff17 	ldw	r2,-4(fp)
 2013a58:	10c01124 	muli	r3,r2,68
 2013a5c:	008085b4 	movhi	r2,534
 2013a60:	10883b04 	addi	r2,r2,8428
 2013a64:	1885883a 	add	r2,r3,r2
}
 2013a68:	e037883a 	mov	sp,fp
 2013a6c:	df000017 	ldw	fp,0(sp)
 2013a70:	dec00104 	addi	sp,sp,4
 2013a74:	f800283a 	ret

02013a78 <lwip_set_status_callback>:

netif_status_callback_fn lwip_set_status_callback(netif_status_callback_fn callback)
{
 2013a78:	defffd04 	addi	sp,sp,-12
 2013a7c:	df000215 	stw	fp,8(sp)
 2013a80:	df000204 	addi	fp,sp,8
 2013a84:	e13fff15 	stw	r4,-4(fp)
	netif_status_callback_fn old = status_callback;
 2013a88:	d0a7e817 	ldw	r2,-24672(gp)
 2013a8c:	e0bffe15 	stw	r2,-8(fp)

	status_callback = callback;
 2013a90:	e0bfff17 	ldw	r2,-4(fp)
 2013a94:	d0a7e815 	stw	r2,-24672(gp)

	return old;
 2013a98:	e0bffe17 	ldw	r2,-8(fp)
}
 2013a9c:	e037883a 	mov	sp,fp
 2013aa0:	df000017 	ldw	fp,0(sp)
 2013aa4:	dec00104 	addi	sp,sp,4
 2013aa8:	f800283a 	ret

02013aac <lwip_set_link_callback>:

netif_status_callback_fn lwip_set_link_callback(netif_status_callback_fn callback)
{
 2013aac:	defffd04 	addi	sp,sp,-12
 2013ab0:	df000215 	stw	fp,8(sp)
 2013ab4:	df000204 	addi	fp,sp,8
 2013ab8:	e13fff15 	stw	r4,-4(fp)
	netif_status_callback_fn old = link_callback;
 2013abc:	d0a7e917 	ldw	r2,-24668(gp)
 2013ac0:	e0bffe15 	stw	r2,-8(fp)

	link_callback = callback;
 2013ac4:	e0bfff17 	ldw	r2,-4(fp)
 2013ac8:	d0a7e915 	stw	r2,-24668(gp)

	return old;
 2013acc:	e0bffe17 	ldw	r2,-8(fp)
}
 2013ad0:	e037883a 	mov	sp,fp
 2013ad4:	df000017 	ldw	fp,0(sp)
 2013ad8:	dec00104 	addi	sp,sp,4
 2013adc:	f800283a 	ret

02013ae0 <lwip_is_interface_up>:

#define REG_STATS_LS					(1 << 2)	// Link Status

int __attribute__((weak)) lwip_is_interface_up(__unused np_tse_mac* pmac)
{
 2013ae0:	defffd04 	addi	sp,sp,-12
 2013ae4:	df000215 	stw	fp,8(sp)
 2013ae8:	df000204 	addi	fp,sp,8
 2013aec:	e13fff15 	stw	r4,-4(fp)
	alt_u16 reg = IORD(&pmac->mdio1.STATUS, 0);
 2013af0:	e0bfff17 	ldw	r2,-4(fp)
 2013af4:	1080a104 	addi	r2,r2,644
 2013af8:	10800037 	ldwio	r2,0(r2)
 2013afc:	e0bffe0d 	sth	r2,-8(fp)

	return ((reg & (REG_STATS_LS)) == REG_STATS_LS) ? ETH_INTERFACE_UP : ETH_INTERFACE_DOWN;
 2013b00:	e0bffe0b 	ldhu	r2,-8(fp)
 2013b04:	1080010c 	andi	r2,r2,4
 2013b08:	1004c03a 	cmpne	r2,r2,zero
 2013b0c:	10803fcc 	andi	r2,r2,255
}
 2013b10:	e037883a 	mov	sp,fp
 2013b14:	df000017 	ldw	fp,0(sp)
 2013b18:	dec00104 	addi	sp,sp,4
 2013b1c:	f800283a 	ret

02013b20 <lwip_check_link_status>:

static void lwip_check_link_status(struct netif *netif, np_tse_mac* base)
{
 2013b20:	defffa04 	addi	sp,sp,-24
 2013b24:	dfc00515 	stw	ra,20(sp)
 2013b28:	df000415 	stw	fp,16(sp)
 2013b2c:	df000404 	addi	fp,sp,16
 2013b30:	e13ffe15 	stw	r4,-8(fp)
 2013b34:	e17fff15 	stw	r5,-4(fp)
	struct ethernetif *ethif = (struct ethernetif*)netif->state;
 2013b38:	e0bffe17 	ldw	r2,-8(fp)
 2013b3c:	10800917 	ldw	r2,36(r2)
 2013b40:	e0bffc15 	stw	r2,-16(fp)

	// check if the interface is up
	int cur_status = lwip_is_interface_up(base);
 2013b44:	e13fff17 	ldw	r4,-4(fp)
 2013b48:	2013ae00 	call	2013ae0 <lwip_is_interface_up>
 2013b4c:	e0bffd15 	stw	r2,-12(fp)

	// is there a state change in the ethernet connectivity
	if (cur_status != ethif->current_state)
 2013b50:	e0bffc17 	ldw	r2,-16(fp)
 2013b54:	10c01617 	ldw	r3,88(r2)
 2013b58:	e0bffd17 	ldw	r2,-12(fp)
 2013b5c:	18801726 	beq	r3,r2,2013bbc <lwip_check_link_status+0x9c>
	{
		// check if the Auto-Negotiate is successful
		if (cur_status == ETH_INTERFACE_UP)
 2013b60:	e0bffd17 	ldw	r2,-12(fp)
 2013b64:	10800058 	cmpnei	r2,r2,1
 2013b68:	10000d1e 	bne	r2,zero,2013ba0 <lwip_check_link_status+0x80>
		{
			// wait for auto-negotiate...
			if (lwip_wait_for_an(netif->num, ethif) > 0)
 2013b6c:	e0bffe17 	ldw	r2,-8(fp)
 2013b70:	10800f03 	ldbu	r2,60(r2)
 2013b74:	10803fcc 	andi	r2,r2,255
 2013b78:	e17ffc17 	ldw	r5,-16(fp)
 2013b7c:	1009883a 	mov	r4,r2
 2013b80:	20136dc0 	call	20136dc <lwip_wait_for_an>
 2013b84:	00800d0e 	bge	zero,r2,2013bbc <lwip_check_link_status+0x9c>
			{
				netif_set_link_up(netif);
 2013b88:	e13ffe17 	ldw	r4,-8(fp)
 2013b8c:	2019f9c0 	call	2019f9c <netif_set_link_up>
				ethif->current_state = cur_status;
 2013b90:	e0bffc17 	ldw	r2,-16(fp)
 2013b94:	e0fffd17 	ldw	r3,-12(fp)
 2013b98:	10c01615 	stw	r3,88(r2)

			netif_set_link_down(netif);
			ethif->current_state = cur_status;
		}
	}
}
 2013b9c:	00000706 	br	2013bbc <lwip_check_link_status+0x9c>
			}
		}
		else
		{
			// bring down the link
			ethif->link_alive = 0;
 2013ba0:	e0bffc17 	ldw	r2,-16(fp)
 2013ba4:	10000215 	stw	zero,8(r2)

			netif_set_link_down(netif);
 2013ba8:	e13ffe17 	ldw	r4,-8(fp)
 2013bac:	201a0600 	call	201a060 <netif_set_link_down>
			ethif->current_state = cur_status;
 2013bb0:	e0bffc17 	ldw	r2,-16(fp)
 2013bb4:	e0fffd17 	ldw	r3,-12(fp)
 2013bb8:	10c01615 	stw	r3,88(r2)
		}
	}
}
 2013bbc:	0001883a 	nop
 2013bc0:	e037883a 	mov	sp,fp
 2013bc4:	dfc00117 	ldw	ra,4(sp)
 2013bc8:	df000017 	ldw	fp,0(sp)
 2013bcc:	dec00204 	addi	sp,sp,8
 2013bd0:	f800283a 	ret

02013bd4 <lwip_handle_ethernet_input>:

#define NR_TEST_PACKETS						50000

// Input / monitor task per ethernet device
static void lwip_handle_ethernet_input(void *pvParameters)
{
 2013bd4:	defe7104 	addi	sp,sp,-1596
 2013bd8:	dfc18e15 	stw	ra,1592(sp)
 2013bdc:	df018d15 	stw	fp,1588(sp)
 2013be0:	df018d04 	addi	fp,sp,1588
 2013be4:	e13fff15 	stw	r4,-4(fp)
	sys_sem_t rcvsem = NULL;
 2013be8:	e03e7815 	stw	zero,-1568(fp)
	np_tse_mac* base = NULL;
 2013bec:	e03e7415 	stw	zero,-1584(fp)
	struct netif *cur_netif = (struct netif*)pvParameters;
 2013bf0:	e0bfff17 	ldw	r2,-4(fp)
 2013bf4:	e0be7515 	stw	r2,-1580(fp)
	struct ethernetif *cur_ethif = (struct ethernetif*)cur_netif->state;
 2013bf8:	e0be7517 	ldw	r2,-1580(fp)
 2013bfc:	10800917 	ldw	r2,36(r2)
 2013c00:	e0be7615 	stw	r2,-1576(fp)
	int packets_waiting = 0;
 2013c04:	e03e7315 	stw	zero,-1588(fp)

	/* Intermediate buffers used for temporary copy of frames that cannot be directrly DMA'ed*/
	char buf2[1560]; // TODO remove
	int replug_state = 0; // TODO remove
 2013c08:	e03e7715 	stw	zero,-1572(fp)

#if LWIP_RECEIVE_SEMAPHORE
	rcvsem = cur_ethif->tse_info->rx_semaphore;
 2013c0c:	e0be7617 	ldw	r2,-1576(fp)
 2013c10:	10801717 	ldw	r2,92(r2)
 2013c14:	10800817 	ldw	r2,32(r2)
 2013c18:	e0be7815 	stw	r2,-1568(fp)
#endif

	// get the actual MAC peripheral
	base = get_mac_base(cur_netif->num);
 2013c1c:	e0be7517 	ldw	r2,-1580(fp)
 2013c20:	10800f03 	ldbu	r2,60(r2)
 2013c24:	10803fcc 	andi	r2,r2,255
 2013c28:	1009883a 	mov	r4,r2
 2013c2c:	20139e40 	call	20139e4 <get_mac_base>
 2013c30:	e0be7415 	stw	r2,-1584(fp)
	if (!base)
 2013c34:	e0be7417 	ldw	r2,-1584(fp)
 2013c38:	10001426 	beq	r2,zero,2013c8c <lwip_handle_ethernet_input+0xb8>
	// else we'll poll the function once every 100ms
		while (1) {
		// if we have a semaphore wait for it to be released by the SGDMA IRQ, or sleep for 1 ms
			// if we timeout also call ethernetif_input although most likely it would be useless
			// it is use full however to check the link status
		if (rcvsem)
 2013c3c:	e0be7817 	ldw	r2,-1568(fp)
 2013c40:	10000526 	beq	r2,zero,2013c58 <lwip_handle_ethernet_input+0x84>
			sys_arch_sem_wait(&rcvsem, 100);
 2013c44:	e0be7804 	addi	r2,fp,-1568
 2013c48:	01401904 	movi	r5,100
 2013c4c:	1009883a 	mov	r4,r2
 2013c50:	2014e380 	call	2014e38 <sys_arch_sem_wait>
 2013c54:	00000406 	br	2013c68 <lwip_handle_ethernet_input+0x94>
		else if (packets_waiting <= 0)	// only sleep if there are no packets waiting
 2013c58:	e0be7317 	ldw	r2,-1588(fp)
 2013c5c:	00800216 	blt	zero,r2,2013c68 <lwip_handle_ethernet_input+0x94>
			mssleep(1);					// sleep a bit to be nice to the CPU
 2013c60:	0100fa04 	movi	r4,1000
 2013c64:	20280200 	call	2028020 <usleep>

			// Use semaphore or the timeout to call ethernet_input
			// this to avoid unnecessary load and faster responses ;)
		packets_waiting = ethernetif_input(cur_netif);
 2013c68:	e13e7517 	ldw	r4,-1580(fp)
 2013c6c:	201331c0 	call	201331c <ethernetif_input>
 2013c70:	e0be7315 	stw	r2,-1588(fp)

		// check the link status if there are no packets waiting
		if (packets_waiting <= 0)
 2013c74:	e0be7317 	ldw	r2,-1588(fp)
 2013c78:	00bff016 	blt	zero,r2,2013c3c <__alt_mem_mem_0+0xfcff3c3c>
			lwip_check_link_status(cur_netif, base);
 2013c7c:	e17e7417 	ldw	r5,-1584(fp)
 2013c80:	e13e7517 	ldw	r4,-1580(fp)
 2013c84:	2013b200 	call	2013b20 <lwip_check_link_status>
	}
 2013c88:	003fec06 	br	2013c3c <__alt_mem_mem_0+0xfcff3c3c>
#endif

	// get the actual MAC peripheral
	base = get_mac_base(cur_netif->num);
	if (!base)
		return;
 2013c8c:	0001883a 	nop

		// check the link status if there are no packets waiting
		if (packets_waiting <= 0)
			lwip_check_link_status(cur_netif, base);
	}
}
 2013c90:	e037883a 	mov	sp,fp
 2013c94:	dfc00117 	ldw	ra,4(sp)
 2013c98:	df000017 	ldw	fp,0(sp)
 2013c9c:	dec00204 	addi	sp,sp,8
 2013ca0:	f800283a 	ret

02013ca4 <print_ipad>:

const char* print_ipad(alt_u32 ip, char* buf)
{
 2013ca4:	defff704 	addi	sp,sp,-36
 2013ca8:	dfc00815 	stw	ra,32(sp)
 2013cac:	df000715 	stw	fp,28(sp)
 2013cb0:	df000704 	addi	fp,sp,28
 2013cb4:	e13ffe15 	stw	r4,-8(fp)
 2013cb8:	e17fff15 	stw	r5,-4(fp)
	alt_u8 bip[4];
	alt_u32 idx = 0;
 2013cbc:	e03ffc15 	stw	zero,-16(fp)

	for (; idx < sizeof(bip); idx++) {
 2013cc0:	00000c06 	br	2013cf4 <print_ipad+0x50>
		bip[idx] = ip & 0xFF;
 2013cc4:	e0bffe17 	ldw	r2,-8(fp)
 2013cc8:	1009883a 	mov	r4,r2
 2013ccc:	e0fffd04 	addi	r3,fp,-12
 2013cd0:	e0bffc17 	ldw	r2,-16(fp)
 2013cd4:	1885883a 	add	r2,r3,r2
 2013cd8:	11000005 	stb	r4,0(r2)
		ip >>= 8;
 2013cdc:	e0bffe17 	ldw	r2,-8(fp)
 2013ce0:	1004d23a 	srli	r2,r2,8
 2013ce4:	e0bffe15 	stw	r2,-8(fp)
const char* print_ipad(alt_u32 ip, char* buf)
{
	alt_u8 bip[4];
	alt_u32 idx = 0;

	for (; idx < sizeof(bip); idx++) {
 2013ce8:	e0bffc17 	ldw	r2,-16(fp)
 2013cec:	10800044 	addi	r2,r2,1
 2013cf0:	e0bffc15 	stw	r2,-16(fp)
 2013cf4:	e0bffc17 	ldw	r2,-16(fp)
 2013cf8:	10800130 	cmpltui	r2,r2,4
 2013cfc:	103ff11e 	bne	r2,zero,2013cc4 <__alt_mem_mem_0+0xfcff3cc4>
		bip[idx] = ip & 0xFF;
		ip >>= 8;
	}

	snprintf(buf, 17, "%d.%d.%d.%d", bip[0], bip[1], bip[2], bip[3]);
 2013d00:	e0bffd03 	ldbu	r2,-12(fp)
 2013d04:	11403fcc 	andi	r5,r2,255
 2013d08:	e0bffd43 	ldbu	r2,-11(fp)
 2013d0c:	10803fcc 	andi	r2,r2,255
 2013d10:	e0fffd83 	ldbu	r3,-10(fp)
 2013d14:	18c03fcc 	andi	r3,r3,255
 2013d18:	e13ffdc3 	ldbu	r4,-9(fp)
 2013d1c:	21003fcc 	andi	r4,r4,255
 2013d20:	d9000215 	stw	r4,8(sp)
 2013d24:	d8c00115 	stw	r3,4(sp)
 2013d28:	d8800015 	stw	r2,0(sp)
 2013d2c:	280f883a 	mov	r7,r5
 2013d30:	01808134 	movhi	r6,516
 2013d34:	31847a04 	addi	r6,r6,4584
 2013d38:	01400444 	movi	r5,17
 2013d3c:	e13fff17 	ldw	r4,-4(fp)
 2013d40:	203ce4c0 	call	203ce4c <snprintf>

	return buf;
 2013d44:	e0bfff17 	ldw	r2,-4(fp)
}
 2013d48:	e037883a 	mov	sp,fp
 2013d4c:	dfc00117 	ldw	ra,4(sp)
 2013d50:	df000017 	ldw	fp,0(sp)
 2013d54:	dec00204 	addi	sp,sp,8
 2013d58:	f800283a 	ret

02013d5c <lwip_status_callback>:

static void lwip_status_callback(struct netif *netif)
{
 2013d5c:	defffd04 	addi	sp,sp,-12
 2013d60:	dfc00215 	stw	ra,8(sp)
 2013d64:	df000115 	stw	fp,4(sp)
 2013d68:	df000104 	addi	fp,sp,4
 2013d6c:	e13fff15 	stw	r4,-4(fp)
	if (status_callback)
 2013d70:	d0a7e817 	ldw	r2,-24672(gp)
 2013d74:	10000326 	beq	r2,zero,2013d84 <lwip_status_callback+0x28>
		status_callback(netif);
 2013d78:	d0a7e817 	ldw	r2,-24672(gp)
 2013d7c:	e13fff17 	ldw	r4,-4(fp)
 2013d80:	103ee83a 	callr	r2
}
 2013d84:	0001883a 	nop
 2013d88:	e037883a 	mov	sp,fp
 2013d8c:	dfc00117 	ldw	ra,4(sp)
 2013d90:	df000017 	ldw	fp,0(sp)
 2013d94:	dec00204 	addi	sp,sp,8
 2013d98:	f800283a 	ret

02013d9c <lwip_initialize_phys>:

void lwip_initialize_phys(void)
{
 2013d9c:	defff604 	addi	sp,sp,-40
 2013da0:	dfc00915 	stw	ra,36(sp)
 2013da4:	df000815 	stw	fp,32(sp)
 2013da8:	df000804 	addi	fp,sp,32
	int idx, phyadd, phyid, phyid2;
	np_tse_mac *pmac;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 2013dac:	e03ff815 	stw	zero,-32(fp)
 2013db0:	00006e06 	br	2013f6c <lwip_initialize_phys+0x1d0>
	{
		// check whether this interface should be used
		if (!is_interface_active(idx))
 2013db4:	e13ff817 	ldw	r4,-32(fp)
 2013db8:	20008ac0 	call	20008ac <is_interface_active>
 2013dbc:	10006326 	beq	r2,zero,2013f4c <lwip_initialize_phys+0x1b0>
			continue;

		// the PHY is active... let's get the mac base
		pmac = get_mac_base(idx);
 2013dc0:	e13ff817 	ldw	r4,-32(fp)
 2013dc4:	20139e40 	call	20139e4 <get_mac_base>
 2013dc8:	e0bffd15 	stw	r2,-12(fp)
		if (!pmac)
 2013dcc:	e0bffd17 	ldw	r2,-12(fp)
 2013dd0:	10006026 	beq	r2,zero,2013f54 <lwip_initialize_phys+0x1b8>
			continue;

		// search the PHY and it's ID
		for (phyadd = 0x00; phyadd < 0x20; ++phyadd)
 2013dd4:	e03ff915 	stw	zero,-28(fp)
 2013dd8:	00001206 	br	2013e24 <lwip_initialize_phys+0x88>
		{
			IOWR(&pmac->MDIO_ADDR1, 0, phyadd);
 2013ddc:	e0bffd17 	ldw	r2,-12(fp)
 2013de0:	10801004 	addi	r2,r2,64
 2013de4:	e0fff917 	ldw	r3,-28(fp)
 2013de8:	10c00035 	stwio	r3,0(r2)

			phyid = IORD(&pmac->mdio1.PHY_ID1, 0);
 2013dec:	e0bffd17 	ldw	r2,-12(fp)
 2013df0:	1080a204 	addi	r2,r2,648
 2013df4:	10800037 	ldwio	r2,0(r2)
 2013df8:	e0bffa15 	stw	r2,-24(fp)
			phyid2 = IORD(&pmac->mdio1.PHY_ID2, 0);
 2013dfc:	e0bffd17 	ldw	r2,-12(fp)
 2013e00:	1080a304 	addi	r2,r2,652
 2013e04:	10800037 	ldwio	r2,0(r2)
 2013e08:	e0bffb15 	stw	r2,-20(fp)

			if (phyid != phyid2)
 2013e0c:	e0fffa17 	ldw	r3,-24(fp)
 2013e10:	e0bffb17 	ldw	r2,-20(fp)
 2013e14:	1880071e 	bne	r3,r2,2013e34 <lwip_initialize_phys+0x98>
		pmac = get_mac_base(idx);
		if (!pmac)
			continue;

		// search the PHY and it's ID
		for (phyadd = 0x00; phyadd < 0x20; ++phyadd)
 2013e18:	e0bff917 	ldw	r2,-28(fp)
 2013e1c:	10800044 	addi	r2,r2,1
 2013e20:	e0bff915 	stw	r2,-28(fp)
 2013e24:	e0bff917 	ldw	r2,-28(fp)
 2013e28:	10800810 	cmplti	r2,r2,32
 2013e2c:	103feb1e 	bne	r2,zero,2013ddc <__alt_mem_mem_0+0xfcff3ddc>
 2013e30:	00000106 	br	2013e38 <lwip_initialize_phys+0x9c>

			phyid = IORD(&pmac->mdio1.PHY_ID1, 0);
			phyid2 = IORD(&pmac->mdio1.PHY_ID2, 0);

			if (phyid != phyid2)
				break;
 2013e34:	0001883a 	nop
		}

		// if we have the PHY we can initialize it if we can find the driver in the pphy_profiles array
		if (phyid != phyid2)
 2013e38:	e0fffa17 	ldw	r3,-24(fp)
 2013e3c:	e0bffb17 	ldw	r2,-20(fp)
 2013e40:	18804726 	beq	r3,r2,2013f60 <lwip_initialize_phys+0x1c4>
            extern alt_tse_phy_profile *pphy_profiles[];
            extern alt_u8 phy_profile_count;

            int i;

            for(i = 0; i < phy_profile_count; i++) {
 2013e44:	e03ffc15 	stw	zero,-16(fp)
 2013e48:	00003b06 	br	2013f38 <lwip_initialize_phys+0x19c>
                alt_u32 oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
 2013e4c:	e0bffa17 	ldw	r2,-24(fp)
 2013e50:	100691ba 	slli	r3,r2,6
 2013e54:	e0bffb17 	ldw	r2,-20(fp)
 2013e58:	1005d2ba 	srai	r2,r2,10
 2013e5c:	10800fcc 	andi	r2,r2,63
 2013e60:	1884b03a 	or	r2,r3,r2
 2013e64:	e0bffe15 	stw	r2,-8(fp)
                alt_u8 model_number = (phyid2 >> 4) & 0x3f;
 2013e68:	e0bffb17 	ldw	r2,-20(fp)
 2013e6c:	1005d13a 	srai	r2,r2,4
 2013e70:	10800fcc 	andi	r2,r2,63
 2013e74:	e0bfff05 	stb	r2,-4(fp)
                // unused so far... alt_u8 revision_number = phyid2 & 0x0f;

                // if PHY match with PHY in profile we can call the initialize function
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 2013e78:	008085f4 	movhi	r2,535
 2013e7c:	10a94c04 	addi	r2,r2,-23248
 2013e80:	e0fffc17 	ldw	r3,-16(fp)
 2013e84:	18c7883a 	add	r3,r3,r3
 2013e88:	18c7883a 	add	r3,r3,r3
 2013e8c:	10c5883a 	add	r2,r2,r3
 2013e90:	10800017 	ldw	r2,0(r2)
 2013e94:	10c01417 	ldw	r3,80(r2)
 2013e98:	e0bffe17 	ldw	r2,-8(fp)
 2013e9c:	1880231e 	bne	r3,r2,2013f2c <lwip_initialize_phys+0x190>
 2013ea0:	008085f4 	movhi	r2,535
 2013ea4:	10a94c04 	addi	r2,r2,-23248
 2013ea8:	e0fffc17 	ldw	r3,-16(fp)
 2013eac:	18c7883a 	add	r3,r3,r3
 2013eb0:	18c7883a 	add	r3,r3,r3
 2013eb4:	10c5883a 	add	r2,r2,r3
 2013eb8:	10800017 	ldw	r2,0(r2)
 2013ebc:	10801503 	ldbu	r2,84(r2)
 2013ec0:	10c03fcc 	andi	r3,r2,255
 2013ec4:	e0bfff03 	ldbu	r2,-4(fp)
 2013ec8:	1880181e 	bne	r3,r2,2013f2c <lwip_initialize_phys+0x190>
                {
                    if (pphy_profiles[i]->phy_cfg)
 2013ecc:	008085f4 	movhi	r2,535
 2013ed0:	10a94c04 	addi	r2,r2,-23248
 2013ed4:	e0fffc17 	ldw	r3,-16(fp)
 2013ed8:	18c7883a 	add	r3,r3,r3
 2013edc:	18c7883a 	add	r3,r3,r3
 2013ee0:	10c5883a 	add	r2,r2,r3
 2013ee4:	10800017 	ldw	r2,0(r2)
 2013ee8:	10801717 	ldw	r2,92(r2)
 2013eec:	10001b26 	beq	r2,zero,2013f5c <lwip_initialize_phys+0x1c0>
                    {
                    	// initialize the PHY
                    	pphy_profiles[i]->phy_cfg(pmac);
 2013ef0:	008085f4 	movhi	r2,535
 2013ef4:	10a94c04 	addi	r2,r2,-23248
 2013ef8:	e0fffc17 	ldw	r3,-16(fp)
 2013efc:	18c7883a 	add	r3,r3,r3
 2013f00:	18c7883a 	add	r3,r3,r3
 2013f04:	10c5883a 	add	r2,r2,r3
 2013f08:	10800017 	ldw	r2,0(r2)
 2013f0c:	10801717 	ldw	r2,92(r2)
 2013f10:	e13ffd17 	ldw	r4,-12(fp)
 2013f14:	103ee83a 	callr	r2

                    	// and restart the Auto-Negotiation
                    	IOWR(&pmac->mdio1.CONTROL, 0, (1<<12 | 1<<9));
 2013f18:	e0bffd17 	ldw	r2,-12(fp)
 2013f1c:	1080a004 	addi	r2,r2,640
 2013f20:	00c48004 	movi	r3,4608
 2013f24:	10c00035 	stwio	r3,0(r2)
                    }

                    // and done for this PHY
                    break;
 2013f28:	00000c06 	br	2013f5c <lwip_initialize_phys+0x1c0>
            extern alt_tse_phy_profile *pphy_profiles[];
            extern alt_u8 phy_profile_count;

            int i;

            for(i = 0; i < phy_profile_count; i++) {
 2013f2c:	e0bffc17 	ldw	r2,-16(fp)
 2013f30:	10800044 	addi	r2,r2,1
 2013f34:	e0bffc15 	stw	r2,-16(fp)
 2013f38:	d0a81003 	ldbu	r2,-24512(gp)
 2013f3c:	10803fcc 	andi	r2,r2,255
 2013f40:	e0fffc17 	ldw	r3,-16(fp)
 2013f44:	18bfc116 	blt	r3,r2,2013e4c <__alt_mem_mem_0+0xfcff3e4c>
 2013f48:	00000506 	br	2013f60 <lwip_initialize_phys+0x1c4>

	for (idx = 0; idx < PHY_COUNT; ++idx)
	{
		// check whether this interface should be used
		if (!is_interface_active(idx))
			continue;
 2013f4c:	0001883a 	nop
 2013f50:	00000306 	br	2013f60 <lwip_initialize_phys+0x1c4>

		// the PHY is active... let's get the mac base
		pmac = get_mac_base(idx);
		if (!pmac)
			continue;
 2013f54:	0001883a 	nop
 2013f58:	00000106 	br	2013f60 <lwip_initialize_phys+0x1c4>
                    	// and restart the Auto-Negotiation
                    	IOWR(&pmac->mdio1.CONTROL, 0, (1<<12 | 1<<9));
                    }

                    // and done for this PHY
                    break;
 2013f5c:	0001883a 	nop
void lwip_initialize_phys(void)
{
	int idx, phyadd, phyid, phyid2;
	np_tse_mac *pmac;

	for (idx = 0; idx < PHY_COUNT; ++idx)
 2013f60:	e0bff817 	ldw	r2,-32(fp)
 2013f64:	10800044 	addi	r2,r2,1
 2013f68:	e0bff815 	stw	r2,-32(fp)
 2013f6c:	e0bff817 	ldw	r2,-32(fp)
 2013f70:	00bf900e 	bge	zero,r2,2013db4 <__alt_mem_mem_0+0xfcff3db4>
                    break;
                }
            }
		}
	}
}
 2013f74:	0001883a 	nop
 2013f78:	e037883a 	mov	sp,fp
 2013f7c:	dfc00117 	ldw	ra,4(sp)
 2013f80:	df000017 	ldw	fp,0(sp)
 2013f84:	dec00204 	addi	sp,sp,8
 2013f88:	f800283a 	ret

02013f8c <tse_mac_init>:
 * @API TYPE: Internal
 * @Param iface index of the NET structure associated with TSE instance
 * @Return 0 if ok, else -1 if error
 */
int tse_mac_init(int iface, struct ethernetif *ethernetif)
{
 2013f8c:	defff004 	addi	sp,sp,-64
 2013f90:	dfc00f15 	stw	ra,60(sp)
 2013f94:	df000e15 	stw	fp,56(sp)
 2013f98:	df000e04 	addi	fp,sp,56
 2013f9c:	e13ffe15 	stw	r4,-8(fp)
 2013fa0:	e17fff15 	stw	r5,-4(fp)
	int speed, duplex, result;
	int x;

	alt_sgdma_dev *sgdma_tx_dev;
	alt_sgdma_dev *sgdma_rx_dev;
	alt_tse_system_info* tse_hw = (alt_tse_system_info *) tse[iface].tse;
 2013fa4:	008085b4 	movhi	r2,534
 2013fa8:	10884c04 	addi	r2,r2,8496
 2013fac:	e0fffe17 	ldw	r3,-8(fp)
 2013fb0:	18c00924 	muli	r3,r3,36
 2013fb4:	10c5883a 	add	r2,r2,r3
 2013fb8:	10800704 	addi	r2,r2,28
 2013fbc:	10800017 	ldw	r2,0(r2)
 2013fc0:	e0bff715 	stw	r2,-36(fp)
	np_tse_mac *mi_base;
	alt_tse_mac_info *pmac_info;

#if LWIP_RECEIVE_SEMAPHORE
	if (!tse[iface].rx_semaphore) {
 2013fc4:	008085b4 	movhi	r2,534
 2013fc8:	10884c04 	addi	r2,r2,8496
 2013fcc:	e0fffe17 	ldw	r3,-8(fp)
 2013fd0:	18c00924 	muli	r3,r3,36
 2013fd4:	10c5883a 	add	r2,r2,r3
 2013fd8:	10800804 	addi	r2,r2,32
 2013fdc:	10800017 	ldw	r2,0(r2)
 2013fe0:	10001e1e 	bne	r2,zero,201405c <tse_mac_init+0xd0>
		dprintf(("creating RX SGDMA semaphore\n"));
		// create a counting semaphore so we can 'release' the semaphore for each rx input buffer filled
		if (sys_sem_new(&tse[iface].rx_semaphore, LWIP_RX_ETH_BUFFER) != ERR_OK) {
 2013fe4:	e0bffe17 	ldw	r2,-8(fp)
 2013fe8:	10800924 	muli	r2,r2,36
 2013fec:	10c00804 	addi	r3,r2,32
 2013ff0:	008085b4 	movhi	r2,534
 2013ff4:	10884c04 	addi	r2,r2,8496
 2013ff8:	1885883a 	add	r2,r3,r2
 2013ffc:	01400304 	movi	r5,12
 2014000:	1009883a 	mov	r4,r2
 2014004:	2014cb40 	call	2014cb4 <sys_sem_new>
 2014008:	10803fcc 	andi	r2,r2,255
 201400c:	1080201c 	xori	r2,r2,128
 2014010:	10bfe004 	addi	r2,r2,-128
 2014014:	1000111e 	bne	r2,zero,201405c <tse_mac_init+0xd0>
			dprintf(("[LwIP] Couldn't create the rx_semephore\n"));
		} else {
			// we got a semaphore, completely lock it
			for (x = 0; x < LWIP_RX_ETH_BUFFER; x++)
 2014018:	e03ff515 	stw	zero,-44(fp)
 201401c:	00000c06 	br	2014050 <tse_mac_init+0xc4>
				sys_arch_sem_wait(&tse[iface].rx_semaphore, 1);
 2014020:	e0bffe17 	ldw	r2,-8(fp)
 2014024:	10800924 	muli	r2,r2,36
 2014028:	10c00804 	addi	r3,r2,32
 201402c:	008085b4 	movhi	r2,534
 2014030:	10884c04 	addi	r2,r2,8496
 2014034:	1885883a 	add	r2,r3,r2
 2014038:	01400044 	movi	r5,1
 201403c:	1009883a 	mov	r4,r2
 2014040:	2014e380 	call	2014e38 <sys_arch_sem_wait>
		// create a counting semaphore so we can 'release' the semaphore for each rx input buffer filled
		if (sys_sem_new(&tse[iface].rx_semaphore, LWIP_RX_ETH_BUFFER) != ERR_OK) {
			dprintf(("[LwIP] Couldn't create the rx_semephore\n"));
		} else {
			// we got a semaphore, completely lock it
			for (x = 0; x < LWIP_RX_ETH_BUFFER; x++)
 2014044:	e0bff517 	ldw	r2,-44(fp)
 2014048:	10800044 	addi	r2,r2,1
 201404c:	e0bff515 	stw	r2,-44(fp)
 2014050:	e0bff517 	ldw	r2,-44(fp)
 2014054:	10800310 	cmplti	r2,r2,12
 2014058:	103ff11e 	bne	r2,zero,2014020 <__alt_mem_mem_0+0xfcff4020>
	dprintf(("[tse_mac_init]\n"));
#ifdef PRINTIF
	dprintf(("tse_mac_init %d\n", iface));
#endif    
	// These lines were done in prep_tse_mac
	tse_hw = &tse_mac_device[iface];
 201405c:	e0bffe17 	ldw	r2,-8(fp)
 2014060:	10c01224 	muli	r3,r2,72
 2014064:	00808134 	movhi	r2,516
 2014068:	10955704 	addi	r2,r2,21852
 201406c:	1885883a 	add	r2,r3,r2
 2014070:	e0bff715 	stw	r2,-36(fp)
	tse[iface].tse = tse_hw;
 2014074:	008085b4 	movhi	r2,534
 2014078:	10884c04 	addi	r2,r2,8496
 201407c:	e0fffe17 	ldw	r3,-8(fp)
 2014080:	18c00924 	muli	r3,r3,36
 2014084:	10c5883a 	add	r2,r2,r3
 2014088:	10800704 	addi	r2,r2,28
 201408c:	e0fff717 	ldw	r3,-36(fp)
 2014090:	10c00015 	stw	r3,0(r2)

	// Store ethernetif for access, and the tse in ethernetif for access in tse_mac_raw_send/tse_mac_rcv
	tse[iface].ethernetif = ethernetif;
 2014094:	008085b4 	movhi	r2,534
 2014098:	10884c04 	addi	r2,r2,8496
 201409c:	e0fffe17 	ldw	r3,-8(fp)
 20140a0:	18c00924 	muli	r3,r3,36
 20140a4:	10c5883a 	add	r2,r2,r3
 20140a8:	10800604 	addi	r2,r2,24
 20140ac:	e0ffff17 	ldw	r3,-4(fp)
 20140b0:	10c00015 	stw	r3,0(r2)
	ethernetif->iface = iface;
 20140b4:	e0bfff17 	ldw	r2,-4(fp)
 20140b8:	e0fffe17 	ldw	r3,-8(fp)
 20140bc:	10c00115 	stw	r3,4(r2)
	ethernetif->tse_info = &tse[iface];
 20140c0:	e0bffe17 	ldw	r2,-8(fp)
 20140c4:	10c00924 	muli	r3,r2,36
 20140c8:	008085b4 	movhi	r2,534
 20140cc:	10884c04 	addi	r2,r2,8496
 20140d0:	1887883a 	add	r3,r3,r2
 20140d4:	e0bfff17 	ldw	r2,-4(fp)
 20140d8:	10c01715 	stw	r3,92(r2)

	if (tse_hw->ext_desc_mem == 1)
 20140dc:	e0bff717 	ldw	r2,-36(fp)
 20140e0:	10800783 	ldbu	r2,30(r2)
 20140e4:	10803fcc 	andi	r2,r2,255
 20140e8:	10800058 	cmpnei	r2,r2,1
 20140ec:	10000b1e 	bne	r2,zero,201411c <tse_mac_init+0x190>
	{
		tse[iface].desc = (alt_sgdma_descriptor *) tse_hw->desc_mem_base;
 20140f0:	e0bff717 	ldw	r2,-36(fp)
 20140f4:	10800817 	ldw	r2,32(r2)
 20140f8:	1009883a 	mov	r4,r2
 20140fc:	008085b4 	movhi	r2,534
 2014100:	10884c04 	addi	r2,r2,8496
 2014104:	e0fffe17 	ldw	r3,-8(fp)
 2014108:	18c00924 	muli	r3,r3,36
 201410c:	10c5883a 	add	r2,r2,r3
 2014110:	10800504 	addi	r2,r2,20
 2014114:	11000015 	stw	r4,0(r2)
 2014118:	00001206 	br	2014164 <tse_mac_init+0x1d8>
	}
	else
	{
		unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));
 201411c:	01002804 	movi	r4,160
 2014120:	2027ff00 	call	2027ff0 <alt_uncached_malloc>
 2014124:	e0bff615 	stw	r2,-40(fp)

		while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
 2014128:	00000306 	br	2014138 <tse_mac_init+0x1ac>
			temp_desc++;
 201412c:	e0bff617 	ldw	r2,-40(fp)
 2014130:	10800044 	addi	r2,r2,1
 2014134:	e0bff615 	stw	r2,-40(fp)
	}
	else
	{
		unsigned char *temp_desc = (unsigned char *)alt_uncached_malloc((4+ALTERA_TSE_SGDMA_RX_DESC_CHAIN_SIZE)*(sizeof(alt_sgdma_descriptor)));

		while ((((alt_u32)temp_desc) % ALTERA_AVALON_SGDMA_DESCRIPTOR_SIZE) != 0)
 2014138:	e0bff617 	ldw	r2,-40(fp)
 201413c:	108007cc 	andi	r2,r2,31
 2014140:	103ffa1e 	bne	r2,zero,201412c <__alt_mem_mem_0+0xfcff412c>
			temp_desc++;
		tse[iface].desc = (alt_sgdma_descriptor *) temp_desc;
 2014144:	008085b4 	movhi	r2,534
 2014148:	10884c04 	addi	r2,r2,8496
 201414c:	e0fffe17 	ldw	r3,-8(fp)
 2014150:	18c00924 	muli	r3,r3,36
 2014154:	10c5883a 	add	r2,r2,r3
 2014158:	10800504 	addi	r2,r2,20
 201415c:	e0fff617 	ldw	r3,-40(fp)
 2014160:	10c00015 	stw	r3,0(r2)
	}

	/* Get the Rx and Tx SGDMA addresses */
	sgdma_tx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_tx);
 2014164:	e0bff717 	ldw	r2,-36(fp)
 2014168:	10800517 	ldw	r2,20(r2)
 201416c:	1009883a 	mov	r4,r2
 2014170:	20257f40 	call	20257f4 <alt_avalon_sgdma_open>
 2014174:	e0bff815 	stw	r2,-32(fp)

	if (!sgdma_tx_dev)
 2014178:	e0bff817 	ldw	r2,-32(fp)
 201417c:	1000021e 	bne	r2,zero,2014188 <tse_mac_init+0x1fc>
	{
		dprintf(("[triple_speed_ethernet_init] Error opening TX SGDMA\n"));
		return ENP_RESOURCE;
 2014180:	00bffa84 	movi	r2,-22
 2014184:	00018f06 	br	20147c4 <tse_mac_init+0x838>
	}

	sgdma_rx_dev = alt_avalon_sgdma_open(tse_hw->tse_sgdma_rx);
 2014188:	e0bff717 	ldw	r2,-36(fp)
 201418c:	10800617 	ldw	r2,24(r2)
 2014190:	1009883a 	mov	r4,r2
 2014194:	20257f40 	call	20257f4 <alt_avalon_sgdma_open>
 2014198:	e0bff915 	stw	r2,-28(fp)
	if (!sgdma_rx_dev)
 201419c:	e0bff917 	ldw	r2,-28(fp)
 20141a0:	1000021e 	bne	r2,zero,20141ac <tse_mac_init+0x220>
	{
		dprintf(("[triple_speed_ethernet_init] Error opening RX SGDMA\n"));
		return ENP_RESOURCE;
 20141a4:	00bffa84 	movi	r2,-22
 20141a8:	00018606 	br	20147c4 <tse_mac_init+0x838>
	}

	/* Initialize mtip_mac_trans_info structure with values from <system.h>*/

	tse_mac_initTransInfo2(&tse[iface].mi, (int)tse_hw->tse_mac_base,
 20141ac:	e0bffe17 	ldw	r2,-8(fp)
 20141b0:	10c00924 	muli	r3,r2,36
 20141b4:	008085b4 	movhi	r2,534
 20141b8:	10884c04 	addi	r2,r2,8496
 20141bc:	1887883a 	add	r3,r3,r2
 20141c0:	e0bff717 	ldw	r2,-36(fp)
 20141c4:	10800017 	ldw	r2,0(r2)
 20141c8:	e13ff817 	ldw	r4,-32(fp)
 20141cc:	e17ff917 	ldw	r5,-28(fp)
 20141d0:	d8000015 	stw	zero,0(sp)
 20141d4:	280f883a 	mov	r7,r5
 20141d8:	200d883a 	mov	r6,r4
 20141dc:	100b883a 	mov	r5,r2
 20141e0:	1809883a 	mov	r4,r3
 20141e4:	202bb500 	call	202bb50 <tse_mac_initTransInfo2>
			(unsigned int)sgdma_tx_dev,
			(unsigned int)sgdma_rx_dev,
			0);
	mi_base = tse[iface].mi.base;
 20141e8:	008085b4 	movhi	r2,534
 20141ec:	10884c04 	addi	r2,r2,8496
 20141f0:	e0fffe17 	ldw	r3,-8(fp)
 20141f4:	18c00924 	muli	r3,r3,36
 20141f8:	10c5883a 	add	r2,r2,r3
 20141fc:	10800017 	ldw	r2,0(r2)
 2014200:	e0bffa15 	stw	r2,-24(fp)

	IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
 2014204:	008085b4 	movhi	r2,534
 2014208:	10884c04 	addi	r2,r2,8496
 201420c:	e0fffe17 	ldw	r3,-8(fp)
 2014210:	18c00924 	muli	r3,r3,36
 2014214:	10c5883a 	add	r2,r2,r3
 2014218:	10800204 	addi	r2,r2,8
 201421c:	10800017 	ldw	r2,0(r2)
 2014220:	10800317 	ldw	r2,12(r2)
 2014224:	10800404 	addi	r2,r2,16
 2014228:	00c00074 	movhi	r3,1
 201422c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_SGDMA_CONTROL(tse[iface].mi.rx_sgdma->base, 0x0);
 2014230:	008085b4 	movhi	r2,534
 2014234:	10884c04 	addi	r2,r2,8496
 2014238:	e0fffe17 	ldw	r3,-8(fp)
 201423c:	18c00924 	muli	r3,r3,36
 2014240:	10c5883a 	add	r2,r2,r3
 2014244:	10800204 	addi	r2,r2,8
 2014248:	10800017 	ldw	r2,0(r2)
 201424c:	10800317 	ldw	r2,12(r2)
 2014250:	10800404 	addi	r2,r2,16
 2014254:	0007883a 	mov	r3,zero
 2014258:	10c00035 	stwio	r3,0(r2)

	/* reset the PHY if necessary */
	result = getPHYSpeed(tse[iface].mi.base);
 201425c:	008085b4 	movhi	r2,534
 2014260:	10884c04 	addi	r2,r2,8496
 2014264:	e0fffe17 	ldw	r3,-8(fp)
 2014268:	18c00924 	muli	r3,r3,36
 201426c:	10c5883a 	add	r2,r2,r3
 2014270:	10800017 	ldw	r2,0(r2)
 2014274:	1009883a 	mov	r4,r2
 2014278:	202cfdc0 	call	202cfdc <getPHYSpeed>
 201427c:	e0bffb15 	stw	r2,-20(fp)
	speed = (result >> 1) & 0x07;
 2014280:	e0bffb17 	ldw	r2,-20(fp)
 2014284:	1005d07a 	srai	r2,r2,1
 2014288:	108001cc 	andi	r2,r2,7
 201428c:	e0bffc15 	stw	r2,-16(fp)
	duplex = result & 0x01;
 2014290:	e0bffb17 	ldw	r2,-20(fp)
 2014294:	1080004c 	andi	r2,r2,1
 2014298:	e0bff415 	stw	r2,-48(fp)

	/* reset the mac */
	IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base,
 201429c:	008085b4 	movhi	r2,534
 20142a0:	10884c04 	addi	r2,r2,8496
 20142a4:	e0fffe17 	ldw	r3,-8(fp)
 20142a8:	18c00924 	muli	r3,r3,36
 20142ac:	10c5883a 	add	r2,r2,r3
 20142b0:	10800017 	ldw	r2,0(r2)
 20142b4:	10800204 	addi	r2,r2,8
 20142b8:	00c800c4 	movi	r3,8195
 20142bc:	10c00035 	stwio	r3,0(r2)
			mmac_cc_SW_RESET_mask |
			mmac_cc_TX_ENA_mask |
			mmac_cc_RX_ENA_mask);

	x = 0;
 20142c0:	e03ff515 	stw	zero,-44(fp)
	while (IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) &
 20142c4:	00000506 	br	20142dc <tse_mac_init+0x350>
			ALTERA_TSEMAC_CMD_SW_RESET_MSK)
	{
		if( x++ > 10000 )
 20142c8:	e0bff517 	ldw	r2,-44(fp)
 20142cc:	10c00044 	addi	r3,r2,1
 20142d0:	e0fff515 	stw	r3,-44(fp)
 20142d4:	1089c450 	cmplti	r2,r2,10001
 20142d8:	10000b26 	beq	r2,zero,2014308 <tse_mac_init+0x37c>
			mmac_cc_SW_RESET_mask |
			mmac_cc_TX_ENA_mask |
			mmac_cc_RX_ENA_mask);

	x = 0;
	while (IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base) &
 20142dc:	008085b4 	movhi	r2,534
 20142e0:	10884c04 	addi	r2,r2,8496
 20142e4:	e0fffe17 	ldw	r3,-8(fp)
 20142e8:	18c00924 	muli	r3,r3,36
 20142ec:	10c5883a 	add	r2,r2,r3
 20142f0:	10800017 	ldw	r2,0(r2)
 20142f4:	10800204 	addi	r2,r2,8
 20142f8:	10800037 	ldwio	r2,0(r2)
 20142fc:	1088000c 	andi	r2,r2,8192
 2014300:	103ff11e 	bne	r2,zero,20142c8 <__alt_mem_mem_0+0xfcff42c8>
 2014304:	00000106 	br	201430c <tse_mac_init+0x380>
			ALTERA_TSEMAC_CMD_SW_RESET_MSK)
	{
		if( x++ > 10000 )
			break;
 2014308:	0001883a 	nop
	}

	if (x >= 10000)
		dprintf(("TSEMAC SW reset bit never cleared!\n"));

	dat = IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base);
 201430c:	008085b4 	movhi	r2,534
 2014310:	10884c04 	addi	r2,r2,8496
 2014314:	e0fffe17 	ldw	r3,-8(fp)
 2014318:	18c00924 	muli	r3,r3,36
 201431c:	10c5883a 	add	r2,r2,r3
 2014320:	10800017 	ldw	r2,0(r2)
 2014324:	10800204 	addi	r2,r2,8
 2014328:	10800037 	ldwio	r2,0(r2)
 201432c:	e0bff315 	stw	r2,-52(fp)
		dprintf(("WARN: RX/TX not disabled after reset... missing PHY clock? CMD_CONFIG=0x%08x\n", dat));
	else
		dprintf(("OK, x=%d, CMD_CONFIG=0x%08x\n", x, dat));

	/* Initialize MAC registers */
	IOWR_ALTERA_TSEMAC_FRM_LENGTH(mi_base, PBUF_POOL_BUFSIZE+ETH_PAD_SIZE);
 2014330:	e0bffa17 	ldw	r2,-24(fp)
 2014334:	10800504 	addi	r2,r2,20
 2014338:	00c17b84 	movi	r3,1518
 201433c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_ALMOST_EMPTY(mi_base, 8);
 2014340:	e0bffa17 	ldw	r2,-24(fp)
 2014344:	10800b04 	addi	r2,r2,44
 2014348:	00c00204 	movi	r3,8
 201434c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_ALMOST_FULL(mi_base, 8);
 2014350:	e0bffa17 	ldw	r2,-24(fp)
 2014354:	10800c04 	addi	r2,r2,48
 2014358:	00c00204 	movi	r3,8
 201435c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_ALMOST_EMPTY(mi_base, 8);
 2014360:	e0bffa17 	ldw	r2,-24(fp)
 2014364:	10800d04 	addi	r2,r2,52
 2014368:	00c00204 	movi	r3,8
 201436c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_ALMOST_FULL(mi_base,  3);
 2014370:	e0bffa17 	ldw	r2,-24(fp)
 2014374:	10800e04 	addi	r2,r2,56
 2014378:	00c000c4 	movi	r3,3
 201437c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_SECTION_EMPTY(mi_base, tse_hw->tse_tx_depth - 16);
 2014380:	e0bffa17 	ldw	r2,-24(fp)
 2014384:	10800904 	addi	r2,r2,36
 2014388:	e0fff717 	ldw	r3,-36(fp)
 201438c:	18c0010b 	ldhu	r3,4(r3)
 2014390:	18ffffcc 	andi	r3,r3,65535
 2014394:	18fffc04 	addi	r3,r3,-16
 2014398:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_TX_SECTION_FULL(mi_base,  0);
 201439c:	e0bffa17 	ldw	r2,-24(fp)
 20143a0:	10800a04 	addi	r2,r2,40
 20143a4:	0007883a 	mov	r3,zero
 20143a8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_SECTION_EMPTY(mi_base, tse_hw->tse_rx_depth - 16);
 20143ac:	e0bffa17 	ldw	r2,-24(fp)
 20143b0:	10800704 	addi	r2,r2,28
 20143b4:	e0fff717 	ldw	r3,-36(fp)
 20143b8:	18c0018b 	ldhu	r3,6(r3)
 20143bc:	18ffffcc 	andi	r3,r3,65535
 20143c0:	18fffc04 	addi	r3,r3,-16
 20143c4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_TSEMAC_RX_SECTION_FULL(mi_base,  0);
 20143c8:	e0bffa17 	ldw	r2,-24(fp)
 20143cc:	10800804 	addi	r2,r2,32
 20143d0:	0007883a 	mov	r3,zero
 20143d4:	10c00035 	stwio	r3,0(r2)

	/* Enable TX shift 16 for removing two bytes from the start of all transmitted frames */
	IOWR_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK);
 20143d8:	008085b4 	movhi	r2,534
 20143dc:	10884c04 	addi	r2,r2,8496
 20143e0:	e0fffe17 	ldw	r3,-8(fp)
 20143e4:	18c00924 	muli	r3,r3,36
 20143e8:	10c5883a 	add	r2,r2,r3
 20143ec:	10800017 	ldw	r2,0(r2)
 20143f0:	10803a04 	addi	r2,r2,232
 20143f4:	00c00134 	movhi	r3,4
 20143f8:	10c00035 	stwio	r3,0(r2)

	/*
	 * check if the MAC supports the 16-bit shift option allowing us
	 * to send BIASed frames without copying. Used by the send function later.
	 */
	if ((IORD_ALTERA_TSEMAC_TX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_TX_CMD_STAT_TXSHIFT16_MSK) == 0)
 20143fc:	008085b4 	movhi	r2,534
 2014400:	10884c04 	addi	r2,r2,8496
 2014404:	e0fffe17 	ldw	r3,-8(fp)
 2014408:	18c00924 	muli	r3,r3,36
 201440c:	10c5883a 	add	r2,r2,r3
 2014410:	10800017 	ldw	r2,0(r2)
 2014414:	10803a04 	addi	r2,r2,232
 2014418:	10800037 	ldwio	r2,0(r2)
 201441c:	1080012c 	andhi	r2,r2,4
 2014420:	1000021e 	bne	r2,zero,201442c <tse_mac_init+0x4a0>
	{
		dprintf(("[tse_mac_init] Error: Incompatible %d value with TX_CMD_STAT register return TxShift16 value. \n",ETH_PAD_SIZE));
		return ERR_IF;
 2014424:	00bffc44 	movi	r2,-15
 2014428:	0000e606 	br	20147c4 <tse_mac_init+0x838>
	}

	/* Enable RX shift 16 for alignment of all received frames on 16-bit start address */
	IOWR_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base,ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK);
 201442c:	008085b4 	movhi	r2,534
 2014430:	10884c04 	addi	r2,r2,8496
 2014434:	e0fffe17 	ldw	r3,-8(fp)
 2014438:	18c00924 	muli	r3,r3,36
 201443c:	10c5883a 	add	r2,r2,r3
 2014440:	10800017 	ldw	r2,0(r2)
 2014444:	10803b04 	addi	r2,r2,236
 2014448:	00c08034 	movhi	r3,512
 201444c:	10c00035 	stwio	r3,0(r2)

	/* check if the MAC supports the 16-bit shift option at the RX CMD STATUS Register  */
	if ((IORD_ALTERA_TSEMAC_RX_CMD_STAT(tse[iface].mi.base) & ALTERA_TSEMAC_RX_CMD_STAT_RXSHIFT16_MSK) == 0)
 2014450:	008085b4 	movhi	r2,534
 2014454:	10884c04 	addi	r2,r2,8496
 2014458:	e0fffe17 	ldw	r3,-8(fp)
 201445c:	18c00924 	muli	r3,r3,36
 2014460:	10c5883a 	add	r2,r2,r3
 2014464:	10800017 	ldw	r2,0(r2)
 2014468:	10803b04 	addi	r2,r2,236
 201446c:	10800037 	ldwio	r2,0(r2)
 2014470:	1080802c 	andhi	r2,r2,512
 2014474:	1000021e 	bne	r2,zero,2014480 <tse_mac_init+0x4f4>
	{
		dprintf(("[tse_mac_init] Error: Incompatible %d value with RX_CMD_STAT register return RxShift16 value. \n",ETH_PAD_SIZE));
		return ERR_IF;
 2014478:	00bffc44 	movi	r2,-15
 201447c:	0000d106 	br	20147c4 <tse_mac_init+0x838>
	}

	/* Set the MAC address */
	IOWR_ALTERA_TSEMAC_MAC_0(mi_base,
 2014480:	e0bffa17 	ldw	r2,-24(fp)
 2014484:	10800304 	addi	r2,r2,12
 2014488:	e0ffff17 	ldw	r3,-4(fp)
 201448c:	18c00017 	ldw	r3,0(r3)
 2014490:	18c00003 	ldbu	r3,0(r3)
 2014494:	19003fcc 	andi	r4,r3,255
 2014498:	e0ffff17 	ldw	r3,-4(fp)
 201449c:	18c00017 	ldw	r3,0(r3)
 20144a0:	18c00043 	ldbu	r3,1(r3)
 20144a4:	18c03fcc 	andi	r3,r3,255
 20144a8:	1806923a 	slli	r3,r3,8
 20144ac:	20c8b03a 	or	r4,r4,r3
 20144b0:	e0ffff17 	ldw	r3,-4(fp)
 20144b4:	18c00017 	ldw	r3,0(r3)
 20144b8:	18c00083 	ldbu	r3,2(r3)
 20144bc:	18c03fcc 	andi	r3,r3,255
 20144c0:	1806943a 	slli	r3,r3,16
 20144c4:	20c8b03a 	or	r4,r4,r3
 20144c8:	e0ffff17 	ldw	r3,-4(fp)
 20144cc:	18c00017 	ldw	r3,0(r3)
 20144d0:	18c000c3 	ldbu	r3,3(r3)
 20144d4:	18c03fcc 	andi	r3,r3,255
 20144d8:	1806963a 	slli	r3,r3,24
 20144dc:	20c6b03a 	or	r3,r4,r3
 20144e0:	10c00035 	stwio	r3,0(r2)
			((int)((unsigned char) ethernetif->ethaddr->addr[0]) |
					(int)((unsigned char) ethernetif->ethaddr->addr[1] <<  8) |
					(int)((unsigned char) ethernetif->ethaddr->addr[2] << 16) |
					(int)((unsigned char) ethernetif->ethaddr->addr[3] << 24)));

	IOWR_ALTERA_TSEMAC_MAC_1(mi_base,
 20144e4:	e0bffa17 	ldw	r2,-24(fp)
 20144e8:	10800404 	addi	r2,r2,16
 20144ec:	e0ffff17 	ldw	r3,-4(fp)
 20144f0:	18c00017 	ldw	r3,0(r3)
 20144f4:	18c00103 	ldbu	r3,4(r3)
 20144f8:	19003fcc 	andi	r4,r3,255
 20144fc:	e0ffff17 	ldw	r3,-4(fp)
 2014500:	18c00017 	ldw	r3,0(r3)
 2014504:	18c00143 	ldbu	r3,5(r3)
 2014508:	18c03fcc 	andi	r3,r3,255
 201450c:	1806923a 	slli	r3,r3,8
 2014510:	20c6b03a 	or	r3,r4,r3
 2014514:	18ffffcc 	andi	r3,r3,65535
 2014518:	10c00035 	stwio	r3,0(r2)
			(((int)((unsigned char) ethernetif->ethaddr->addr[4]) |
					(int)((unsigned char) ethernetif->ethaddr->addr[5] <<  8)) & 0xFFFF));

	/* enable MAC */
	dat = ALTERA_TSEMAC_CMD_TX_ENA_MSK       |
 201451c:	00810034 	movhi	r2,1024
 2014520:	108080c4 	addi	r2,r2,515
 2014524:	e0bff315 	stw	r2,-52(fp)
			ALTERA_TSEMAC_CMD_LOOPBACK_MSK     |     // promiscuous mode
#endif
			ALTERA_TSEMAC_CMD_TX_ADDR_INS_MSK  |
			ALTERA_TSEMAC_CMD_RX_ERR_DISC_MSK;  /* automatically discard frames with CRC errors */

	if ((result & ALT_TSE_E_AN_NOT_COMPLETE) == 0)
 2014528:	e0bffb17 	ldw	r2,-20(fp)
 201452c:	1080022c 	andhi	r2,r2,8
 2014530:	1000461e 	bne	r2,zero,201464c <tse_mac_init+0x6c0>
	{
		speed = (result >> 1) & 0x07;
 2014534:	e0bffb17 	ldw	r2,-20(fp)
 2014538:	1005d07a 	srai	r2,r2,1
 201453c:	108001cc 	andi	r2,r2,7
 2014540:	e0bffc15 	stw	r2,-16(fp)
		duplex = result & 0x01;
 2014544:	e0bffb17 	ldw	r2,-20(fp)
 2014548:	1080004c 	andi	r2,r2,1
 201454c:	e0bff415 	stw	r2,-48(fp)

		/* 1000 Mbps */
		if(speed == 0x01)
 2014550:	e0bffc17 	ldw	r2,-16(fp)
 2014554:	10800058 	cmpnei	r2,r2,1
 2014558:	1000121e 	bne	r2,zero,20145a4 <tse_mac_init+0x618>
		{
			dat |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 201455c:	e0bff317 	ldw	r2,-52(fp)
 2014560:	10800214 	ori	r2,r2,8
 2014564:	e0bff315 	stw	r2,-52(fp)
			dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 2014568:	e0fff317 	ldw	r3,-52(fp)
 201456c:	00bf8034 	movhi	r2,65024
 2014570:	10bfffc4 	addi	r2,r2,-1
 2014574:	1884703a 	and	r2,r3,r2
 2014578:	e0bff315 	stw	r2,-52(fp)
			tse[iface].ethernetif->link_speed = 1000;
 201457c:	008085b4 	movhi	r2,534
 2014580:	10884c04 	addi	r2,r2,8496
 2014584:	e0fffe17 	ldw	r3,-8(fp)
 2014588:	18c00924 	muli	r3,r3,36
 201458c:	10c5883a 	add	r2,r2,r3
 2014590:	10800604 	addi	r2,r2,24
 2014594:	10800017 	ldw	r2,0(r2)
 2014598:	00c0fa04 	movi	r3,1000
 201459c:	10c00315 	stw	r3,12(r2)
 20145a0:	00003306 	br	2014670 <tse_mac_init+0x6e4>
		}
		/* 100 Mbps */
		else if(speed == 0x02)
 20145a4:	e0bffc17 	ldw	r2,-16(fp)
 20145a8:	10800098 	cmpnei	r2,r2,2
 20145ac:	1000131e 	bne	r2,zero,20145fc <tse_mac_init+0x670>
		{
			dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 20145b0:	e0fff317 	ldw	r3,-52(fp)
 20145b4:	00bffdc4 	movi	r2,-9
 20145b8:	1884703a 	and	r2,r3,r2
 20145bc:	e0bff315 	stw	r2,-52(fp)
			dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 20145c0:	e0fff317 	ldw	r3,-52(fp)
 20145c4:	00bf8034 	movhi	r2,65024
 20145c8:	10bfffc4 	addi	r2,r2,-1
 20145cc:	1884703a 	and	r2,r3,r2
 20145d0:	e0bff315 	stw	r2,-52(fp)
			tse[iface].ethernetif->link_speed = 100;
 20145d4:	008085b4 	movhi	r2,534
 20145d8:	10884c04 	addi	r2,r2,8496
 20145dc:	e0fffe17 	ldw	r3,-8(fp)
 20145e0:	18c00924 	muli	r3,r3,36
 20145e4:	10c5883a 	add	r2,r2,r3
 20145e8:	10800604 	addi	r2,r2,24
 20145ec:	10800017 	ldw	r2,0(r2)
 20145f0:	00c01904 	movi	r3,100
 20145f4:	10c00315 	stw	r3,12(r2)
 20145f8:	00001d06 	br	2014670 <tse_mac_init+0x6e4>
		}
		/* 10 Mbps */
		else if(speed == 0x04)
 20145fc:	e0bffc17 	ldw	r2,-16(fp)
 2014600:	10800118 	cmpnei	r2,r2,4
 2014604:	10001a1e 	bne	r2,zero,2014670 <tse_mac_init+0x6e4>
		{
			dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 2014608:	e0fff317 	ldw	r3,-52(fp)
 201460c:	00bffdc4 	movi	r2,-9
 2014610:	1884703a 	and	r2,r3,r2
 2014614:	e0bff315 	stw	r2,-52(fp)
			dat |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 2014618:	e0bff317 	ldw	r2,-52(fp)
 201461c:	10808034 	orhi	r2,r2,512
 2014620:	e0bff315 	stw	r2,-52(fp)
			tse[iface].ethernetif->link_speed = 10;
 2014624:	008085b4 	movhi	r2,534
 2014628:	10884c04 	addi	r2,r2,8496
 201462c:	e0fffe17 	ldw	r3,-8(fp)
 2014630:	18c00924 	muli	r3,r3,36
 2014634:	10c5883a 	add	r2,r2,r3
 2014638:	10800604 	addi	r2,r2,24
 201463c:	10800017 	ldw	r2,0(r2)
 2014640:	00c00284 	movi	r3,10
 2014644:	10c00315 	stw	r3,12(r2)
 2014648:	00000906 	br	2014670 <tse_mac_init+0x6e4>
		}
	}
	/* default to 100 Mbps if returned invalid speed */
	else
	{
		dat &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 201464c:	e0fff317 	ldw	r3,-52(fp)
 2014650:	00bffdc4 	movi	r2,-9
 2014654:	1884703a 	and	r2,r3,r2
 2014658:	e0bff315 	stw	r2,-52(fp)
		dat &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 201465c:	e0fff317 	ldw	r3,-52(fp)
 2014660:	00bf8034 	movhi	r2,65024
 2014664:	10bfffc4 	addi	r2,r2,-1
 2014668:	1884703a 	and	r2,r3,r2
 201466c:	e0bff315 	stw	r2,-52(fp)
	}

	/* Half Duplex */
	if(duplex == TSE_PHY_DUPLEX_HALF)
 2014670:	e0bff417 	ldw	r2,-48(fp)
 2014674:	10000c1e 	bne	r2,zero,20146a8 <tse_mac_init+0x71c>
	{
		dat |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 2014678:	e0bff317 	ldw	r2,-52(fp)
 201467c:	10810014 	ori	r2,r2,1024
 2014680:	e0bff315 	stw	r2,-52(fp)
		tse[iface].ethernetif->full_duplex = 0;
 2014684:	008085b4 	movhi	r2,534
 2014688:	10884c04 	addi	r2,r2,8496
 201468c:	e0fffe17 	ldw	r3,-8(fp)
 2014690:	18c00924 	muli	r3,r3,36
 2014694:	10c5883a 	add	r2,r2,r3
 2014698:	10800604 	addi	r2,r2,24
 201469c:	10800017 	ldw	r2,0(r2)
 20146a0:	10000415 	stw	zero,16(r2)
 20146a4:	00000d06 	br	20146dc <tse_mac_init+0x750>
	}
	/* Full Duplex */
	else
	{
		dat &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 20146a8:	e0fff317 	ldw	r3,-52(fp)
 20146ac:	00beffc4 	movi	r2,-1025
 20146b0:	1884703a 	and	r2,r3,r2
 20146b4:	e0bff315 	stw	r2,-52(fp)
		tse[iface].ethernetif->full_duplex = 1;
 20146b8:	008085b4 	movhi	r2,534
 20146bc:	10884c04 	addi	r2,r2,8496
 20146c0:	e0fffe17 	ldw	r3,-8(fp)
 20146c4:	18c00924 	muli	r3,r3,36
 20146c8:	10c5883a 	add	r2,r2,r3
 20146cc:	10800604 	addi	r2,r2,24
 20146d0:	10800017 	ldw	r2,0(r2)
 20146d4:	00c00044 	movi	r3,1
 20146d8:	10c00415 	stw	r3,16(r2)
	}

	IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
 20146dc:	008085b4 	movhi	r2,534
 20146e0:	10884c04 	addi	r2,r2,8496
 20146e4:	e0fffe17 	ldw	r3,-8(fp)
 20146e8:	18c00924 	muli	r3,r3,36
 20146ec:	10c5883a 	add	r2,r2,r3
 20146f0:	10800017 	ldw	r2,0(r2)
 20146f4:	10800204 	addi	r2,r2,8
 20146f8:	e0fff317 	ldw	r3,-52(fp)
 20146fc:	10c00035 	stwio	r3,0(r2)
	dprintf(("\nMAC post-initialization: CMD_CONFIG=0x%08x\n",
			IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base)));

	alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma,
 2014700:	008085b4 	movhi	r2,534
 2014704:	10884c04 	addi	r2,r2,8496
 2014708:	e0fffe17 	ldw	r3,-8(fp)
 201470c:	18c00924 	muli	r3,r3,36
 2014710:	10c5883a 	add	r2,r2,r3
 2014714:	10800204 	addi	r2,r2,8
 2014718:	11000017 	ldw	r4,0(r2)
#ifndef ALTERA_TSE_IRQ_R
			(alt_avalon_sgdma_callback)&tse_sgdma_rx_isr,
#else
			(alt_avalon_sgdma_callback)&ALTERA_TSE_IRQ_R,
#endif
			(alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,(void*)(&tse[iface]));
 201471c:	e0bffe17 	ldw	r2,-8(fp)
 2014720:	10c00924 	muli	r3,r2,36
 2014724:	008085b4 	movhi	r2,534
 2014728:	10884c04 	addi	r2,r2,8496
 201472c:	1885883a 	add	r2,r3,r2

	IOWR_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base, dat);
	dprintf(("\nMAC post-initialization: CMD_CONFIG=0x%08x\n",
			IORD_ALTERA_TSEMAC_CMD_CONFIG(tse[iface].mi.base)));

	alt_avalon_sgdma_register_callback(tse[iface].mi.rx_sgdma,
 2014730:	100f883a 	mov	r7,r2
 2014734:	01800604 	movi	r6,24
 2014738:	01408074 	movhi	r5,513
 201473c:	29521f04 	addi	r5,r5,18556
 2014740:	20256880 	call	2025688 <alt_avalon_sgdma_register_callback>
#else
			(alt_avalon_sgdma_callback)&ALTERA_TSE_IRQ_R,
#endif
			(alt_u16)ALTERA_TSE_SGDMA_INTR_MASK,(void*)(&tse[iface]));

	tse_sgdma_read_init(&tse[iface]);
 2014744:	e0bffe17 	ldw	r2,-8(fp)
 2014748:	10c00924 	muli	r3,r2,36
 201474c:	008085b4 	movhi	r2,534
 2014750:	10884c04 	addi	r2,r2,8496
 2014754:	1885883a 	add	r2,r3,r2
 2014758:	1009883a 	mov	r4,r2
 201475c:	20147d80 	call	20147d8 <tse_sgdma_read_init>
	pmac_info = alt_tse_get_mac_info(mi_base);
 2014760:	e13ffa17 	ldw	r4,-24(fp)
 2014764:	202cd980 	call	202cd98 <alt_tse_get_mac_info>
 2014768:	e0bffd15 	stw	r2,-12(fp)
	alt_tse_phy_wr_mdio_addr(pmac_info->pphy_info, pmac_info->pphy_info->mdio_address);
 201476c:	e0bffd17 	ldw	r2,-12(fp)
 2014770:	10c00117 	ldw	r3,4(r2)
 2014774:	e0bffd17 	ldw	r2,-12(fp)
 2014778:	10800117 	ldw	r2,4(r2)
 201477c:	10800003 	ldbu	r2,0(r2)
 2014780:	10803fcc 	andi	r2,r2,255
 2014784:	100b883a 	mov	r5,r2
 2014788:	1809883a 	mov	r4,r3
 201478c:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
	ethernetif->link_alive = alt_tse_phy_rd_mdio_reg(pmac_info->pphy_info, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) != 0;// && (((IORD(&(mi_base->mdio1.reg10), 0) >> 4) & 0xF) <= 3);
 2014790:	e0bffd17 	ldw	r2,-12(fp)
 2014794:	10800117 	ldw	r2,4(r2)
 2014798:	01c00044 	movi	r7,1
 201479c:	01800144 	movi	r6,5
 20147a0:	01400044 	movi	r5,1
 20147a4:	1009883a 	mov	r4,r2
 20147a8:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 20147ac:	1004c03a 	cmpne	r2,r2,zero
 20147b0:	10c03fcc 	andi	r3,r2,255
 20147b4:	e0bfff17 	ldw	r2,-4(fp)
 20147b8:	10c00215 	stw	r3,8(r2)
	return ethernetif->link_alive;
 20147bc:	e0bfff17 	ldw	r2,-4(fp)
 20147c0:	10800217 	ldw	r2,8(r2)
}
 20147c4:	e037883a 	mov	sp,fp
 20147c8:	dfc00117 	ldw	ra,4(sp)
 20147cc:	df000017 	ldw	fp,0(sp)
 20147d0:	dec00204 	addi	sp,sp,8
 20147d4:	f800283a 	ret

020147d8 <tse_sgdma_read_init>:
 * 
 * @API TYPE - Internal
 * @return SUCCESS on success 
 */
int tse_sgdma_read_init(lwip_tse_info* tse_ptr)
{     
 20147d8:	defffb04 	addi	sp,sp,-20
 20147dc:	dfc00415 	stw	ra,16(sp)
 20147e0:	df000315 	stw	fp,12(sp)
 20147e4:	df000304 	addi	fp,sp,12
 20147e8:	e13fff15 	stw	r4,-4(fp)
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;
 20147ec:	e0bfff17 	ldw	r2,-4(fp)
 20147f0:	10800617 	ldw	r2,24(r2)
 20147f4:	e0bffe15 	stw	r2,-8(fp)

	alt_avalon_sgdma_construct_stream_to_mem_desc(
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
 20147f8:	e0bfff17 	ldw	r2,-4(fp)
 20147fc:	10800517 	ldw	r2,20(r2)
{     
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;

	alt_avalon_sgdma_construct_stream_to_mem_desc(
 2014800:	11001004 	addi	r4,r2,64
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
 2014804:	e0bfff17 	ldw	r2,-4(fp)
 2014808:	10800517 	ldw	r2,20(r2)
{     
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;

	alt_avalon_sgdma_construct_stream_to_mem_desc(
 201480c:	11401804 	addi	r5,r2,96
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],  // descriptor I want to work with
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
			(alt_u32 *) ethernetif->lwipRxPbuf[tse_ptr->ethernetif->lwipRxIndexIsr]->payload,          // starting write_address
 2014810:	e0bfff17 	ldw	r2,-4(fp)
 2014814:	10800617 	ldw	r2,24(r2)
 2014818:	10801317 	ldw	r2,76(r2)
 201481c:	e0fffe17 	ldw	r3,-8(fp)
 2014820:	108001c4 	addi	r2,r2,7
 2014824:	1085883a 	add	r2,r2,r2
 2014828:	1085883a 	add	r2,r2,r2
 201482c:	1885883a 	add	r2,r3,r2
 2014830:	10800017 	ldw	r2,0(r2)
 2014834:	10800117 	ldw	r2,4(r2)
{     
	struct ethernetif *ethernetif;

	ethernetif = tse_ptr->ethernetif;

	alt_avalon_sgdma_construct_stream_to_mem_desc(
 2014838:	d8000015 	stw	zero,0(sp)
 201483c:	000f883a 	mov	r7,zero
 2014840:	100d883a 	mov	r6,r2
 2014844:	20254a40 	call	20254a4 <alt_avalon_sgdma_construct_stream_to_mem_desc>
			0,                                  // read until EOP
			0);          // don't write to constant address

	dprintf(("[tse_sgdma_read_init] RX descriptor chain desc (%d depth) created\n",0));

	tse_mac_aRxRead( &tse_ptr->mi, &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
 2014848:	e0ffff17 	ldw	r3,-4(fp)
 201484c:	e0bfff17 	ldw	r2,-4(fp)
 2014850:	10800517 	ldw	r2,20(r2)
 2014854:	10801004 	addi	r2,r2,64
 2014858:	100b883a 	mov	r5,r2
 201485c:	1809883a 	mov	r4,r3
 2014860:	202bc940 	call	202bc94 <tse_mac_aRxRead>

	return SUCCESS;
 2014864:	0005883a 	mov	r2,zero
}
 2014868:	e037883a 	mov	sp,fp
 201486c:	dfc00117 	ldw	ra,4(sp)
 2014870:	df000017 	ldw	fp,0(sp)
 2014874:	dec00204 	addi	sp,sp,8
 2014878:	f800283a 	ret

0201487c <tse_sgdma_rx_isr>:
 * @API TYPE - callback
 * @param  context  - context of the TSE MAC instance
 * @param  intnum - temporary storage
 */
int tse_sgdma_rx_isr(void * context, __unused u_long intnum)
{
 201487c:	defffb04 	addi	sp,sp,-20
 2014880:	dfc00415 	stw	ra,16(sp)
 2014884:	df000315 	stw	fp,12(sp)
 2014888:	df000304 	addi	fp,sp,12
 201488c:	e13ffe15 	stw	r4,-8(fp)
 2014890:	e17fff15 	stw	r5,-4(fp)
	lwip_tse_info* tse_ptr = (lwip_tse_info *) context;
 2014894:	e0bffe17 	ldw	r2,-8(fp)
 2014898:	e0bffd15 	stw	r2,-12(fp)

	IOWR_ALTERA_AVALON_SGDMA_CONTROL(&tse_ptr->mi.rx_sgdma->base,ALTERA_AVALON_SGDMA_CONTROL_CLEAR_INTERRUPT_MSK);
 201489c:	e0bffd17 	ldw	r2,-12(fp)
 20148a0:	10800217 	ldw	r2,8(r2)
 20148a4:	10800304 	addi	r2,r2,12
 20148a8:	10800404 	addi	r2,r2,16
 20148ac:	00e00034 	movhi	r3,32768
 20148b0:	10c00035 	stwio	r3,0(r2)

	// process the newly received data and cycle to the next free pbuf for receive
	tse_mac_rcv(tse_ptr->ethernetif);
 20148b4:	e0bffd17 	ldw	r2,-12(fp)
 20148b8:	10800617 	ldw	r2,24(r2)
 20148bc:	1009883a 	mov	r4,r2
 20148c0:	2014a700 	call	2014a70 <tse_mac_rcv>

	// start a new async read transaction
	tse_mac_aRxRead( &tse_ptr->mi, &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]);
 20148c4:	e0fffd17 	ldw	r3,-12(fp)
 20148c8:	e0bffd17 	ldw	r2,-12(fp)
 20148cc:	10800517 	ldw	r2,20(r2)
 20148d0:	10801004 	addi	r2,r2,64
 20148d4:	100b883a 	mov	r5,r2
 20148d8:	1809883a 	mov	r4,r3
 20148dc:	202bc940 	call	202bc94 <tse_mac_aRxRead>

	IOWR_ALTERA_AVALON_SGDMA_CONTROL(&tse_ptr->mi.rx_sgdma->base, ALTERA_TSE_SGDMA_INTR_MASK);
 20148e0:	e0bffd17 	ldw	r2,-12(fp)
 20148e4:	10800217 	ldw	r2,8(r2)
 20148e8:	10800304 	addi	r2,r2,12
 20148ec:	10800404 	addi	r2,r2,16
 20148f0:	00c00604 	movi	r3,24
 20148f4:	10c00035 	stwio	r3,0(r2)

	return SUCCESS;
 20148f8:	0005883a 	mov	r2,zero
}
 20148fc:	e037883a 	mov	sp,fp
 2014900:	dfc00117 	ldw	ra,4(sp)
 2014904:	df000017 	ldw	fp,0(sp)
 2014908:	dec00204 	addi	sp,sp,8
 201490c:	f800283a 	ret

02014910 <tse_mac_raw_send>:
 * @param  data - pointer to the data payload
 * @param  data_bytes - number of bytes of the data payload to be sent to the MAC
 * @return SUCCESS if success, else a negative value
 */
err_t tse_mac_raw_send(struct netif *netif, struct pbuf *pkt)
{
 2014910:	defe6a04 	addi	sp,sp,-1624
 2014914:	dfc19515 	stw	ra,1620(sp)
 2014918:	df019415 	stw	fp,1616(sp)
 201491c:	df019404 	addi	fp,sp,1616
 2014920:	e13ffe15 	stw	r4,-8(fp)
 2014924:	e17fff15 	stw	r5,-4(fp)
	alt_u32			   *ActualData;

	/* Intermediate buffers used for temporary copy of frames that cannot be directrly DMA'ed*/
	char buf2[1560];

	ethernetif = netif->state;
 2014928:	e0bffe17 	ldw	r2,-8(fp)
 201492c:	10800917 	ldw	r2,36(r2)
 2014930:	e0be7215 	stw	r2,-1592(fp)
	tse_ptr = ethernetif->tse_info;
 2014934:	e0be7217 	ldw	r2,-1592(fp)
 2014938:	10801717 	ldw	r2,92(r2)
 201493c:	e0be7315 	stw	r2,-1588(fp)
	mi = &tse_ptr->mi;
 2014940:	e0be7317 	ldw	r2,-1588(fp)
 2014944:	e0be7415 	stw	r2,-1584(fp)

	for(p = pkt; p != NULL; p = p->next)
 2014948:	e0bfff17 	ldw	r2,-4(fp)
 201494c:	e0be7015 	stw	r2,-1600(fp)
 2014950:	00003806 	br	2014a34 <tse_mac_raw_send+0x124>
	{
		data = p->payload;
 2014954:	e0be7017 	ldw	r2,-1600(fp)
 2014958:	10800117 	ldw	r2,4(r2)
 201495c:	e0be7115 	stw	r2,-1596(fp)
		len = p->len;
 2014960:	e0be7017 	ldw	r2,-1600(fp)
 2014964:	1080028b 	ldhu	r2,10(r2)
 2014968:	10bfffcc 	andi	r2,r2,65535
 201496c:	e0be7515 	stw	r2,-1580(fp)

		// just in case we have an unaligned buffer, this should never occur
		if(((unsigned long)data & 0x03) != 0)
 2014970:	e0be7117 	ldw	r2,-1596(fp)
 2014974:	108000cc 	andi	r2,r2,3
 2014978:	10000726 	beq	r2,zero,2014998 <tse_mac_raw_send+0x88>
			/*
			 * Copy data to temporary buffer <buf2>. This is done because of alignment
			 * issues. The SGDMA cannot copy the data directly from (data + ETH_PAD_SIZE)
			 * because it needs a 32-bit aligned address space.
			 */
			memcpy(buf2,data,len);
 201497c:	e0be7804 	addi	r2,fp,-1568
 2014980:	e1be7517 	ldw	r6,-1580(fp)
 2014984:	e17e7117 	ldw	r5,-1596(fp)
 2014988:	1009883a 	mov	r4,r2
 201498c:	2005e580 	call	2005e58 <memcpy>
			data = (alt_u32 *)buf2;
 2014990:	e0be7804 	addi	r2,fp,-1568
 2014994:	e0be7115 	stw	r2,-1596(fp)
		}

		// uncache the ethernet frame
		ActualData = (void*)(((alt_u32)data));
 2014998:	e0be7117 	ldw	r2,-1596(fp)
 201499c:	e0be7615 	stw	r2,-1576(fp)

		/* Write data to Tx FIFO using the DMA */
		alt_avalon_sgdma_construct_mem_to_stream_desc(
 20149a0:	e0be7317 	ldw	r2,-1588(fp)
 20149a4:	11000517 	ldw	r4,20(r2)
				(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST], // descriptor I want to work with
				(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_TX_SGDMA_DESC_OFST],// pointer to "next"
 20149a8:	e0be7317 	ldw	r2,-1588(fp)
 20149ac:	10800517 	ldw	r2,20(r2)

		// uncache the ethernet frame
		ActualData = (void*)(((alt_u32)data));

		/* Write data to Tx FIFO using the DMA */
		alt_avalon_sgdma_construct_mem_to_stream_desc(
 20149b0:	11400804 	addi	r5,r2,32
 20149b4:	e0be7517 	ldw	r2,-1580(fp)
 20149b8:	11bfffcc 	andi	r6,r2,65535
 20149bc:	e0fe7017 	ldw	r3,-1600(fp)
 20149c0:	e0bfff17 	ldw	r2,-4(fp)
 20149c4:	1885003a 	cmpeq	r2,r3,r2
 20149c8:	10803fcc 	andi	r2,r2,255
				(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_TX_SGDMA_DESC_OFST],// pointer to "next"
				(alt_u32*)ActualData,                    // starting read address
				(len),                                   // # bytes
				0,                                       // don't read from constant address
				p == pkt,                                // generate sop
				p->next == NULL,                         // generate endofpacket signal
 20149cc:	e0fe7017 	ldw	r3,-1600(fp)
 20149d0:	18c00017 	ldw	r3,0(r3)

		// uncache the ethernet frame
		ActualData = (void*)(((alt_u32)data));

		/* Write data to Tx FIFO using the DMA */
		alt_avalon_sgdma_construct_mem_to_stream_desc(
 20149d4:	1807003a 	cmpeq	r3,r3,zero
 20149d8:	18c03fcc 	andi	r3,r3,255
 20149dc:	d8000315 	stw	zero,12(sp)
 20149e0:	d8c00215 	stw	r3,8(sp)
 20149e4:	d8800115 	stw	r2,4(sp)
 20149e8:	d8000015 	stw	zero,0(sp)
 20149ec:	300f883a 	mov	r7,r6
 20149f0:	e1be7617 	ldw	r6,-1576(fp)
 20149f4:	202557c0 	call	202557c <alt_avalon_sgdma_construct_mem_to_stream_desc>
				0,                                       // don't read from constant address
				p == pkt,                                // generate sop
				p->next == NULL,                         // generate endofpacket signal
				0);                                      // atlantic channel (don't know/don't care: set to 0)

		tx_length = tse_mac_sTxWrite(mi,&tse_ptr->desc[ALTERA_TSE_FIRST_TX_SGDMA_DESC_OFST]);
 20149f8:	e0be7317 	ldw	r2,-1588(fp)
 20149fc:	10800517 	ldw	r2,20(r2)
 2014a00:	100b883a 	mov	r5,r2
 2014a04:	e13e7417 	ldw	r4,-1584(fp)
 2014a08:	202bbb00 	call	202bbb0 <tse_mac_sTxWrite>
 2014a0c:	e0be7715 	stw	r2,-1572(fp)

		if (tx_length != p->len)
			dprintf(("failed to send all bytes, send %d out of %d\r\n", tx_length, p->len));

		ethernetif->bytes_sent += tx_length;
 2014a10:	e0be7217 	ldw	r2,-1592(fp)
 2014a14:	10c00517 	ldw	r3,20(r2)
 2014a18:	e0be7717 	ldw	r2,-1572(fp)
 2014a1c:	1887883a 	add	r3,r3,r2
 2014a20:	e0be7217 	ldw	r2,-1592(fp)
 2014a24:	10c00515 	stw	r3,20(r2)

	ethernetif = netif->state;
	tse_ptr = ethernetif->tse_info;
	mi = &tse_ptr->mi;

	for(p = pkt; p != NULL; p = p->next)
 2014a28:	e0be7017 	ldw	r2,-1600(fp)
 2014a2c:	10800017 	ldw	r2,0(r2)
 2014a30:	e0be7015 	stw	r2,-1600(fp)
 2014a34:	e0be7017 	ldw	r2,-1600(fp)
 2014a38:	103fc61e 	bne	r2,zero,2014954 <__alt_mem_mem_0+0xfcff4954>
			dprintf(("failed to send all bytes, send %d out of %d\r\n", tx_length, p->len));

		ethernetif->bytes_sent += tx_length;
	}

	LINK_STATS_INC(link.xmit);
 2014a3c:	008085f4 	movhi	r2,535
 2014a40:	10a86704 	addi	r2,r2,-24164
 2014a44:	10800017 	ldw	r2,0(r2)
 2014a48:	10c00044 	addi	r3,r2,1
 2014a4c:	008085f4 	movhi	r2,535
 2014a50:	10a86704 	addi	r2,r2,-24164
 2014a54:	10c00015 	stw	r3,0(r2)

	return ERR_OK;
 2014a58:	0005883a 	mov	r2,zero
}
 2014a5c:	e037883a 	mov	sp,fp
 2014a60:	dfc00117 	ldw	ra,4(sp)
 2014a64:	df000017 	ldw	fp,0(sp)
 2014a68:	dec00204 	addi	sp,sp,8
 2014a6c:	f800283a 	ret

02014a70 <tse_mac_rcv>:
 * 
 * @API TYPE        - callback internal function
 * @return SUCCESS on success
 */
int tse_mac_rcv(struct ethernetif *ethernetif)
{
 2014a70:	defff704 	addi	sp,sp,-36
 2014a74:	dfc00815 	stw	ra,32(sp)
 2014a78:	df000715 	stw	fp,28(sp)
 2014a7c:	df000704 	addi	fp,sp,28
 2014a80:	e13fff15 	stw	r4,-4(fp)
#if LWIP_RECEIVE_SEMAPHORE
	signed portBASE_TYPE switch_context = 0;
 2014a84:	e03ffe15 	stw	zero,-8(fp)
	int pklen;
	lwip_tse_info* tse_ptr;
	alt_u32 *uncached_packet_payload;
	struct pbuf *p;

	tse_ptr = ethernetif->tse_info;
 2014a88:	e0bfff17 	ldw	r2,-4(fp)
 2014a8c:	10801717 	ldw	r2,92(r2)
 2014a90:	e0bffa15 	stw	r2,-24(fp)
	pklen = IORD_16DIRECT(&(tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST].actual_bytes_transferred),0);
 2014a94:	e0bffa17 	ldw	r2,-24(fp)
 2014a98:	10800517 	ldw	r2,20(r2)
 2014a9c:	10801004 	addi	r2,r2,64
 2014aa0:	10800704 	addi	r2,r2,28
 2014aa4:	1080002b 	ldhuio	r2,0(r2)
 2014aa8:	10bfffcc 	andi	r2,r2,65535
 2014aac:	e0bffb15 	stw	r2,-20(fp)
	p = ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr];
 2014ab0:	e0bfff17 	ldw	r2,-4(fp)
 2014ab4:	10801317 	ldw	r2,76(r2)
 2014ab8:	e0ffff17 	ldw	r3,-4(fp)
 2014abc:	108001c4 	addi	r2,r2,7
 2014ac0:	1085883a 	add	r2,r2,r2
 2014ac4:	1085883a 	add	r2,r2,r2
 2014ac8:	1885883a 	add	r2,r3,r2
 2014acc:	10800017 	ldw	r2,0(r2)
 2014ad0:	e0bffc15 	stw	r2,-16(fp)
	p->tot_len = pklen;
 2014ad4:	e0bffb17 	ldw	r2,-20(fp)
 2014ad8:	1007883a 	mov	r3,r2
 2014adc:	e0bffc17 	ldw	r2,-16(fp)
 2014ae0:	10c0020d 	sth	r3,8(r2)
	p->len = pklen;
 2014ae4:	e0bffb17 	ldw	r2,-20(fp)
 2014ae8:	1007883a 	mov	r3,r2
 2014aec:	e0bffc17 	ldw	r2,-16(fp)
 2014af0:	10c0028d 	sth	r3,10(r2)
	if ((IORD_ALTERA_TSE_SGDMA_DESC_STATUS(&tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST]) & ( ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_CRC_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_PARITY_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK | ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK )) == 0)
 2014af4:	e0bffa17 	ldw	r2,-24(fp)
 2014af8:	10800517 	ldw	r2,20(r2)
 2014afc:	10801704 	addi	r2,r2,92
 2014b00:	10800037 	ldwio	r2,0(r2)
 2014b04:	1005d43a 	srai	r2,r2,16
 2014b08:	10801fcc 	andi	r2,r2,127
 2014b0c:	10002d1e 	bne	r2,zero,2014bc4 <tse_mac_rcv+0x154>
	{
		enh_alt_irq_disable_all();
 2014b10:	2026e580 	call	2026e58 <enh_alt_irq_disable_all>

		if (++ethernetif->lwipRxCount >= LWIP_RX_ETH_BUFFER)
 2014b14:	e0bfff17 	ldw	r2,-4(fp)
 2014b18:	10801517 	ldw	r2,84(r2)
 2014b1c:	10800044 	addi	r2,r2,1
 2014b20:	e0ffff17 	ldw	r3,-4(fp)
 2014b24:	18801515 	stw	r2,84(r3)
 2014b28:	10800310 	cmplti	r2,r2,12
 2014b2c:	10000e1e 	bne	r2,zero,2014b68 <tse_mac_rcv+0xf8>
		{
			LINK_STATS_INC(link.drop);
 2014b30:	008085f4 	movhi	r2,535
 2014b34:	10a86704 	addi	r2,r2,-24164
 2014b38:	10800317 	ldw	r2,12(r2)
 2014b3c:	10c00044 	addi	r3,r2,1
 2014b40:	008085f4 	movhi	r2,535
 2014b44:	10a86704 	addi	r2,r2,-24164
 2014b48:	10c00315 	stw	r3,12(r2)
			--ethernetif->lwipRxCount;
 2014b4c:	e0bfff17 	ldw	r2,-4(fp)
 2014b50:	10801517 	ldw	r2,84(r2)
 2014b54:	10ffffc4 	addi	r3,r2,-1
 2014b58:	e0bfff17 	ldw	r2,-4(fp)
 2014b5c:	10c01515 	stw	r3,84(r2)

			enh_alt_irq_enable_all();
 2014b60:	2026ea80 	call	2026ea8 <enh_alt_irq_enable_all>
 2014b64:	00001706 	br	2014bc4 <tse_mac_rcv+0x154>

			dprintf(("No free buffers for RX on iface: %hhd\n", ethernetif->iface));
		}
		else
		{
			ethernetif->bytes_recv += pklen;
 2014b68:	e0bfff17 	ldw	r2,-4(fp)
 2014b6c:	10c00617 	ldw	r3,24(r2)
 2014b70:	e0bffb17 	ldw	r2,-20(fp)
 2014b74:	1887883a 	add	r3,r3,r2
 2014b78:	e0bfff17 	ldw	r2,-4(fp)
 2014b7c:	10c00615 	stw	r3,24(r2)

			//  Set up DMA for the next pbuf in the buffer
			if (++ethernetif->lwipRxIndexIsr >= LWIP_RX_ETH_BUFFER)
 2014b80:	e0bfff17 	ldw	r2,-4(fp)
 2014b84:	10801317 	ldw	r2,76(r2)
 2014b88:	10800044 	addi	r2,r2,1
 2014b8c:	e0ffff17 	ldw	r3,-4(fp)
 2014b90:	18801315 	stw	r2,76(r3)
 2014b94:	10800310 	cmplti	r2,r2,12
 2014b98:	1000021e 	bne	r2,zero,2014ba4 <tse_mac_rcv+0x134>
				ethernetif->lwipRxIndexIsr = 0;
 2014b9c:	e0bfff17 	ldw	r2,-4(fp)
 2014ba0:	10001315 	stw	zero,76(r2)

			enh_alt_irq_enable_all();
 2014ba4:	2026ea80 	call	2026ea8 <enh_alt_irq_enable_all>

#if LWIP_RECEIVE_SEMAPHORE
			// we can't use the LwIP sys_signal_sem since this can't be used in an ISR
			// release the semaphore and check if a task with a higher priority then the current one is waiting for it
			xSemaphoreGiveFromISR(ethernetif->tse_info->rx_semaphore, &switch_context);
 2014ba8:	e0bfff17 	ldw	r2,-4(fp)
 2014bac:	10801717 	ldw	r2,92(r2)
 2014bb0:	10800817 	ldw	r2,32(r2)
 2014bb4:	e0fffe04 	addi	r3,fp,-8
 2014bb8:	180b883a 	mov	r5,r3
 2014bbc:	1009883a 	mov	r4,r2
 2014bc0:	200db200 	call	200db20 <xQueueGiveFromISR>
#endif
		}
	}

	uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
 2014bc4:	e0bfff17 	ldw	r2,-4(fp)
 2014bc8:	10801317 	ldw	r2,76(r2)
 2014bcc:	e0ffff17 	ldw	r3,-4(fp)
 2014bd0:	108001c4 	addi	r2,r2,7
 2014bd4:	1085883a 	add	r2,r2,r2
 2014bd8:	1085883a 	add	r2,r2,r2
 2014bdc:	1885883a 	add	r2,r3,r2
 2014be0:	10800017 	ldw	r2,0(r2)
 2014be4:	10800117 	ldw	r2,4(r2)
 2014be8:	e0bffd15 	stw	r2,-12(fp)
	alt_avalon_sgdma_construct_stream_to_mem_desc(
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],	// descriptor I want to work with
 2014bec:	e0bffa17 	ldw	r2,-24(fp)
 2014bf0:	10800517 	ldw	r2,20(r2)
#endif
		}
	}

	uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
	alt_avalon_sgdma_construct_stream_to_mem_desc(
 2014bf4:	10c01004 	addi	r3,r2,64
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_FIRST_RX_SGDMA_DESC_OFST],	// descriptor I want to work with
			(alt_sgdma_descriptor *) &tse_ptr->desc[ALTERA_TSE_SECOND_RX_SGDMA_DESC_OFST],  // pointer to "next"
 2014bf8:	e0bffa17 	ldw	r2,-24(fp)
 2014bfc:	10800517 	ldw	r2,20(r2)
#endif
		}
	}

	uncached_packet_payload = (alt_u32 *) ethernetif->lwipRxPbuf[ethernetif->lwipRxIndexIsr]->payload;
	alt_avalon_sgdma_construct_stream_to_mem_desc(
 2014c00:	10801804 	addi	r2,r2,96
 2014c04:	d8000015 	stw	zero,0(sp)
 2014c08:	000f883a 	mov	r7,zero
 2014c0c:	e1bffd17 	ldw	r6,-12(fp)
 2014c10:	100b883a 	mov	r5,r2
 2014c14:	1809883a 	mov	r4,r3
 2014c18:	20254a40 	call	20254a4 <alt_avalon_sgdma_construct_stream_to_mem_desc>
			0,                                  											// read until EOP
			0);          																	// don't write to constant address

#if LWIP_RECEIVE_SEMAPHORE
	// if it's waiting we will force a context switch so this task will run right away
	portEND_SWITCHING_ISR(switch_context);
 2014c1c:	e0bffe17 	ldw	r2,-8(fp)
 2014c20:	10000126 	beq	r2,zero,2014c28 <tse_mac_rcv+0x1b8>
 2014c24:	200fe500 	call	200fe50 <vTaskSwitchContext>
#endif

	return ERR_OK;
 2014c28:	0005883a 	mov	r2,zero
}
 2014c2c:	e037883a 	mov	sp,fp
 2014c30:	dfc00117 	ldw	ra,4(sp)
 2014c34:	df000017 	ldw	fp,0(sp)
 2014c38:	dec00204 	addi	sp,sp,8
 2014c3c:	f800283a 	ret

02014c40 <sys_init>:
#include <lwip/err.h>
#include <lwip/stats.h>

// LwIP FreeRTOS port
void sys_init(void)
{
 2014c40:	deffff04 	addi	sp,sp,-4
 2014c44:	df000015 	stw	fp,0(sp)
 2014c48:	d839883a 	mov	fp,sp
	return;
 2014c4c:	0001883a 	nop
}
 2014c50:	e037883a 	mov	sp,fp
 2014c54:	df000017 	ldw	fp,0(sp)
 2014c58:	dec00104 	addi	sp,sp,4
 2014c5c:	f800283a 	ret

02014c60 <sys_now>:

u32_t sys_now(void)
{
 2014c60:	defffb04 	addi	sp,sp,-20
 2014c64:	dfc00415 	stw	ra,16(sp)
 2014c68:	df000315 	stw	fp,12(sp)
 2014c6c:	dc000215 	stw	r16,8(sp)
 2014c70:	df000304 	addi	fp,sp,12
	struct timeval tv;
	gettimeofday(&tv, NULL);
 2014c74:	000b883a 	mov	r5,zero
 2014c78:	e13ffd04 	addi	r4,fp,-12
 2014c7c:	202784c0 	call	202784c <gettimeofday>

	return ((tv.tv_sec * 1000) + (tv.tv_usec / 1000));
 2014c80:	e0bffd17 	ldw	r2,-12(fp)
 2014c84:	1400fa24 	muli	r16,r2,1000
 2014c88:	e0bffe17 	ldw	r2,-8(fp)
 2014c8c:	0140fa04 	movi	r5,1000
 2014c90:	1009883a 	mov	r4,r2
 2014c94:	200a9e40 	call	200a9e4 <__divsi3>
 2014c98:	8085883a 	add	r2,r16,r2
}
 2014c9c:	e6ffff04 	addi	sp,fp,-4
 2014ca0:	dfc00217 	ldw	ra,8(sp)
 2014ca4:	df000117 	ldw	fp,4(sp)
 2014ca8:	dc000017 	ldw	r16,0(sp)
 2014cac:	dec00304 	addi	sp,sp,12
 2014cb0:	f800283a 	ret

02014cb4 <sys_sem_new>:
/**
 * Creates and returns a new semaphore. The "count" argument specifies
 * the initial state of the semaphore.
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 2014cb4:	defffc04 	addi	sp,sp,-16
 2014cb8:	dfc00315 	stw	ra,12(sp)
 2014cbc:	df000215 	stw	fp,8(sp)
 2014cc0:	df000204 	addi	fp,sp,8
 2014cc4:	e13ffe15 	stw	r4,-8(fp)
 2014cc8:	2805883a 	mov	r2,r5
 2014ccc:	e0bfff05 	stb	r2,-4(fp)
	// count 0 means a binary semaphore so max value should be 1
	*sem = xSemaphoreCreateCounting((count ? count : 1), count);
 2014cd0:	e0bfff03 	ldbu	r2,-4(fp)
 2014cd4:	10000226 	beq	r2,zero,2014ce0 <sys_sem_new+0x2c>
 2014cd8:	e0bfff03 	ldbu	r2,-4(fp)
 2014cdc:	00000106 	br	2014ce4 <sys_sem_new+0x30>
 2014ce0:	00800044 	movi	r2,1
 2014ce4:	e0ffff03 	ldbu	r3,-4(fp)
 2014ce8:	180b883a 	mov	r5,r3
 2014cec:	1009883a 	mov	r4,r2
 2014cf0:	200d7f00 	call	200d7f0 <xQueueCreateCountingSemaphore>
 2014cf4:	1007883a 	mov	r3,r2
 2014cf8:	e0bffe17 	ldw	r2,-8(fp)
 2014cfc:	10c00015 	stw	r3,0(r2)

	if (*sem == NULL) {
 2014d00:	e0bffe17 	ldw	r2,-8(fp)
 2014d04:	10800017 	ldw	r2,0(r2)
 2014d08:	1000091e 	bne	r2,zero,2014d30 <sys_sem_new+0x7c>
		SYS_STATS_INC(sem.err);
 2014d0c:	008085f4 	movhi	r2,535
 2014d10:	10a86704 	addi	r2,r2,-24164
 2014d14:	10809617 	ldw	r2,600(r2)
 2014d18:	10c00044 	addi	r3,r2,1
 2014d1c:	008085f4 	movhi	r2,535
 2014d20:	10a86704 	addi	r2,r2,-24164
 2014d24:	10c09615 	stw	r3,600(r2)
		return ERR_MEM;  // TBD need assert
 2014d28:	00bfffc4 	movi	r2,-1
 2014d2c:	00001506 	br	2014d84 <sys_sem_new+0xd0>
	}

	SYS_STATS_INC_USED(sem);
 2014d30:	008085f4 	movhi	r2,535
 2014d34:	10a86704 	addi	r2,r2,-24164
 2014d38:	10809417 	ldw	r2,592(r2)
 2014d3c:	10c00044 	addi	r3,r2,1
 2014d40:	008085f4 	movhi	r2,535
 2014d44:	10a86704 	addi	r2,r2,-24164
 2014d48:	10c09415 	stw	r3,592(r2)
 2014d4c:	008085f4 	movhi	r2,535
 2014d50:	10a86704 	addi	r2,r2,-24164
 2014d54:	10c09517 	ldw	r3,596(r2)
 2014d58:	008085f4 	movhi	r2,535
 2014d5c:	10a86704 	addi	r2,r2,-24164
 2014d60:	10809417 	ldw	r2,592(r2)
 2014d64:	1880062e 	bgeu	r3,r2,2014d80 <sys_sem_new+0xcc>
 2014d68:	008085f4 	movhi	r2,535
 2014d6c:	10a86704 	addi	r2,r2,-24164
 2014d70:	10c09417 	ldw	r3,592(r2)
 2014d74:	008085f4 	movhi	r2,535
 2014d78:	10a86704 	addi	r2,r2,-24164
 2014d7c:	10c09515 	stw	r3,596(r2)

	return ERR_OK;
 2014d80:	0005883a 	mov	r2,zero
}
 2014d84:	e037883a 	mov	sp,fp
 2014d88:	dfc00117 	ldw	ra,4(sp)
 2014d8c:	df000017 	ldw	fp,0(sp)
 2014d90:	dec00204 	addi	sp,sp,8
 2014d94:	f800283a 	ret

02014d98 <sys_sem_free>:

/**
 * Deallocates a semaphore.
 */
void sys_sem_free(sys_sem_t *sem)
{
 2014d98:	defffd04 	addi	sp,sp,-12
 2014d9c:	dfc00215 	stw	ra,8(sp)
 2014da0:	df000115 	stw	fp,4(sp)
 2014da4:	df000104 	addi	fp,sp,4
 2014da8:	e13fff15 	stw	r4,-4(fp)
	vQueueDelete(*sem);
 2014dac:	e0bfff17 	ldw	r2,-4(fp)
 2014db0:	10800017 	ldw	r2,0(r2)
 2014db4:	1009883a 	mov	r4,r2
 2014db8:	200e4600 	call	200e460 <vQueueDelete>

	SYS_STATS_DEC(sem.used);
 2014dbc:	008085f4 	movhi	r2,535
 2014dc0:	10a86704 	addi	r2,r2,-24164
 2014dc4:	10809417 	ldw	r2,592(r2)
 2014dc8:	10ffffc4 	addi	r3,r2,-1
 2014dcc:	008085f4 	movhi	r2,535
 2014dd0:	10a86704 	addi	r2,r2,-24164
 2014dd4:	10c09415 	stw	r3,592(r2)
}
 2014dd8:	0001883a 	nop
 2014ddc:	e037883a 	mov	sp,fp
 2014de0:	dfc00117 	ldw	ra,4(sp)
 2014de4:	df000017 	ldw	fp,0(sp)
 2014de8:	dec00204 	addi	sp,sp,8
 2014dec:	f800283a 	ret

02014df0 <sys_sem_signal>:

/**
 * Signals a semaphore.
 */
void sys_sem_signal(sys_sem_t *sem)
{
 2014df0:	defffd04 	addi	sp,sp,-12
 2014df4:	dfc00215 	stw	ra,8(sp)
 2014df8:	df000115 	stw	fp,4(sp)
 2014dfc:	df000104 	addi	fp,sp,4
 2014e00:	e13fff15 	stw	r4,-4(fp)
	xSemaphoreGive(*sem);
 2014e04:	e0bfff17 	ldw	r2,-4(fp)
 2014e08:	10800017 	ldw	r2,0(r2)
 2014e0c:	000f883a 	mov	r7,zero
 2014e10:	000d883a 	mov	r6,zero
 2014e14:	000b883a 	mov	r5,zero
 2014e18:	1009883a 	mov	r4,r2
 2014e1c:	200d8480 	call	200d848 <xQueueGenericSend>
}
 2014e20:	0001883a 	nop
 2014e24:	e037883a 	mov	sp,fp
 2014e28:	dfc00117 	ldw	ra,4(sp)
 2014e2c:	df000017 	ldw	fp,0(sp)
 2014e30:	dec00204 	addi	sp,sp,8
 2014e34:	f800283a 	ret

02014e38 <sys_arch_sem_wait>:
 *
 * Notice that lwIP implements a function with a similar name,
 * sys_sem_wait(), that uses the sys_arch_sem_wait() function.
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 2014e38:	defff904 	addi	sp,sp,-28
 2014e3c:	dfc00615 	stw	ra,24(sp)
 2014e40:	df000515 	stw	fp,20(sp)
 2014e44:	df000504 	addi	fp,sp,20
 2014e48:	e13ffe15 	stw	r4,-8(fp)
 2014e4c:	e17fff15 	stw	r5,-4(fp)
	portTickType nStartTime, nEndTime, nElapsed;

	nStartTime = xTaskGetTickCount();
 2014e50:	200fa180 	call	200fa18 <xTaskGetTickCount>
 2014e54:	e0bffc15 	stw	r2,-16(fp)

	if (timeout != 0)
 2014e58:	e0bfff17 	ldw	r2,-4(fp)
 2014e5c:	10001526 	beq	r2,zero,2014eb4 <sys_arch_sem_wait+0x7c>
	{
		if (xSemaphoreTake(*sem, timeout) == pdTRUE)
 2014e60:	e0bffe17 	ldw	r2,-8(fp)
 2014e64:	10800017 	ldw	r2,0(r2)
 2014e68:	e17fff17 	ldw	r5,-4(fp)
 2014e6c:	1009883a 	mov	r4,r2
 2014e70:	200ddd40 	call	200ddd4 <xQueueSemaphoreTake>
 2014e74:	10800058 	cmpnei	r2,r2,1
 2014e78:	10000c1e 	bne	r2,zero,2014eac <sys_arch_sem_wait+0x74>
		{
			nEndTime = xTaskGetTickCount();
 2014e7c:	200fa180 	call	200fa18 <xTaskGetTickCount>
 2014e80:	e0bffd15 	stw	r2,-12(fp)
			nElapsed = nEndTime - nStartTime;
 2014e84:	e0fffd17 	ldw	r3,-12(fp)
 2014e88:	e0bffc17 	ldw	r2,-16(fp)
 2014e8c:	1885c83a 	sub	r2,r3,r2
 2014e90:	e0bffb15 	stw	r2,-20(fp)

			if (nElapsed == 0)
 2014e94:	e0bffb17 	ldw	r2,-20(fp)
 2014e98:	1000021e 	bne	r2,zero,2014ea4 <sys_arch_sem_wait+0x6c>
				nElapsed = 1;
 2014e9c:	00800044 	movi	r2,1
 2014ea0:	e0bffb15 	stw	r2,-20(fp)

			return nElapsed; // return time blocked TBD test
 2014ea4:	e0bffb17 	ldw	r2,-20(fp)
 2014ea8:	00001506 	br	2014f00 <sys_arch_sem_wait+0xc8>
		}
		else
			return SYS_ARCH_TIMEOUT;
 2014eac:	00bfffc4 	movi	r2,-1
 2014eb0:	00001306 	br	2014f00 <sys_arch_sem_wait+0xc8>
	}
	else // must block without a timeout
	{
		while (xSemaphoreTake(*sem, 10000) != pdTRUE);
 2014eb4:	0001883a 	nop
 2014eb8:	e0bffe17 	ldw	r2,-8(fp)
 2014ebc:	10800017 	ldw	r2,0(r2)
 2014ec0:	0149c404 	movi	r5,10000
 2014ec4:	1009883a 	mov	r4,r2
 2014ec8:	200ddd40 	call	200ddd4 <xQueueSemaphoreTake>
 2014ecc:	10800058 	cmpnei	r2,r2,1
 2014ed0:	103ff91e 	bne	r2,zero,2014eb8 <__alt_mem_mem_0+0xfcff4eb8>

		nEndTime = xTaskGetTickCount();
 2014ed4:	200fa180 	call	200fa18 <xTaskGetTickCount>
 2014ed8:	e0bffd15 	stw	r2,-12(fp)
		nElapsed = nEndTime - nStartTime;
 2014edc:	e0fffd17 	ldw	r3,-12(fp)
 2014ee0:	e0bffc17 	ldw	r2,-16(fp)
 2014ee4:	1885c83a 	sub	r2,r3,r2
 2014ee8:	e0bffb15 	stw	r2,-20(fp)
		if( nElapsed == 0 )
 2014eec:	e0bffb17 	ldw	r2,-20(fp)
 2014ef0:	1000021e 	bne	r2,zero,2014efc <sys_arch_sem_wait+0xc4>
			nElapsed = 1;
 2014ef4:	00800044 	movi	r2,1
 2014ef8:	e0bffb15 	stw	r2,-20(fp)

		return nElapsed; // return time blocked
 2014efc:	e0bffb17 	ldw	r2,-20(fp)
	}
}
 2014f00:	e037883a 	mov	sp,fp
 2014f04:	dfc00117 	ldw	ra,4(sp)
 2014f08:	df000017 	ldw	fp,0(sp)
 2014f0c:	dec00204 	addi	sp,sp,8
 2014f10:	f800283a 	ret

02014f14 <sys_mutex_new>:
#if ! LWIP_COMPAT_MUTEX
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
 2014f14:	defffd04 	addi	sp,sp,-12
 2014f18:	dfc00215 	stw	ra,8(sp)
 2014f1c:	df000115 	stw	fp,4(sp)
 2014f20:	df000104 	addi	fp,sp,4
 2014f24:	e13fff15 	stw	r4,-4(fp)
	*mutex = xSemaphoreCreateMutex();
 2014f28:	01000044 	movi	r4,1
 2014f2c:	200d6680 	call	200d668 <xQueueCreateMutex>
 2014f30:	1007883a 	mov	r3,r2
 2014f34:	e0bfff17 	ldw	r2,-4(fp)
 2014f38:	10c00015 	stw	r3,0(r2)

	if (!*mutex) {
 2014f3c:	e0bfff17 	ldw	r2,-4(fp)
 2014f40:	10800017 	ldw	r2,0(r2)
 2014f44:	1000091e 	bne	r2,zero,2014f6c <sys_mutex_new+0x58>
		SYS_STATS_INC(mutex.err);
 2014f48:	008085f4 	movhi	r2,535
 2014f4c:	10a86704 	addi	r2,r2,-24164
 2014f50:	10809917 	ldw	r2,612(r2)
 2014f54:	10c00044 	addi	r3,r2,1
 2014f58:	008085f4 	movhi	r2,535
 2014f5c:	10a86704 	addi	r2,r2,-24164
 2014f60:	10c09915 	stw	r3,612(r2)
		return ERR_MEM;
 2014f64:	00bfffc4 	movi	r2,-1
 2014f68:	00001506 	br	2014fc0 <sys_mutex_new+0xac>
	}

	SYS_STATS_INC_USED(mutex);
 2014f6c:	008085f4 	movhi	r2,535
 2014f70:	10a86704 	addi	r2,r2,-24164
 2014f74:	10809717 	ldw	r2,604(r2)
 2014f78:	10c00044 	addi	r3,r2,1
 2014f7c:	008085f4 	movhi	r2,535
 2014f80:	10a86704 	addi	r2,r2,-24164
 2014f84:	10c09715 	stw	r3,604(r2)
 2014f88:	008085f4 	movhi	r2,535
 2014f8c:	10a86704 	addi	r2,r2,-24164
 2014f90:	10c09817 	ldw	r3,608(r2)
 2014f94:	008085f4 	movhi	r2,535
 2014f98:	10a86704 	addi	r2,r2,-24164
 2014f9c:	10809717 	ldw	r2,604(r2)
 2014fa0:	1880062e 	bgeu	r3,r2,2014fbc <sys_mutex_new+0xa8>
 2014fa4:	008085f4 	movhi	r2,535
 2014fa8:	10a86704 	addi	r2,r2,-24164
 2014fac:	10c09717 	ldw	r3,604(r2)
 2014fb0:	008085f4 	movhi	r2,535
 2014fb4:	10a86704 	addi	r2,r2,-24164
 2014fb8:	10c09815 	stw	r3,608(r2)

	return ERR_OK;
 2014fbc:	0005883a 	mov	r2,zero
}
 2014fc0:	e037883a 	mov	sp,fp
 2014fc4:	dfc00117 	ldw	ra,4(sp)
 2014fc8:	df000017 	ldw	fp,0(sp)
 2014fcc:	dec00204 	addi	sp,sp,8
 2014fd0:	f800283a 	ret

02014fd4 <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock */
void sys_mutex_lock(sys_mutex_t *mutex)
{
 2014fd4:	defffd04 	addi	sp,sp,-12
 2014fd8:	dfc00215 	stw	ra,8(sp)
 2014fdc:	df000115 	stw	fp,4(sp)
 2014fe0:	df000104 	addi	fp,sp,4
 2014fe4:	e13fff15 	stw	r4,-4(fp)
	// wait on mutex forever
	while (xSemaphoreTake(*mutex, 10000) != pdTRUE);
 2014fe8:	0001883a 	nop
 2014fec:	e0bfff17 	ldw	r2,-4(fp)
 2014ff0:	10800017 	ldw	r2,0(r2)
 2014ff4:	0149c404 	movi	r5,10000
 2014ff8:	1009883a 	mov	r4,r2
 2014ffc:	200ddd40 	call	200ddd4 <xQueueSemaphoreTake>
 2015000:	10800058 	cmpnei	r2,r2,1
 2015004:	103ff91e 	bne	r2,zero,2014fec <__alt_mem_mem_0+0xfcff4fec>
}
 2015008:	0001883a 	nop
 201500c:	e037883a 	mov	sp,fp
 2015010:	dfc00117 	ldw	ra,4(sp)
 2015014:	df000017 	ldw	fp,0(sp)
 2015018:	dec00204 	addi	sp,sp,8
 201501c:	f800283a 	ret

02015020 <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 2015020:	defffd04 	addi	sp,sp,-12
 2015024:	dfc00215 	stw	ra,8(sp)
 2015028:	df000115 	stw	fp,4(sp)
 201502c:	df000104 	addi	fp,sp,4
 2015030:	e13fff15 	stw	r4,-4(fp)
	xSemaphoreGive(*mutex);
 2015034:	e0bfff17 	ldw	r2,-4(fp)
 2015038:	10800017 	ldw	r2,0(r2)
 201503c:	000f883a 	mov	r7,zero
 2015040:	000d883a 	mov	r6,zero
 2015044:	000b883a 	mov	r5,zero
 2015048:	1009883a 	mov	r4,r2
 201504c:	200d8480 	call	200d848 <xQueueGenericSend>
}
 2015050:	0001883a 	nop
 2015054:	e037883a 	mov	sp,fp
 2015058:	dfc00117 	ldw	ra,4(sp)
 201505c:	df000017 	ldw	fp,0(sp)
 2015060:	dec00204 	addi	sp,sp,8
 2015064:	f800283a 	ret

02015068 <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete */
void sys_mutex_free(sys_mutex_t *mutex)
{
 2015068:	defffd04 	addi	sp,sp,-12
 201506c:	dfc00215 	stw	ra,8(sp)
 2015070:	df000115 	stw	fp,4(sp)
 2015074:	df000104 	addi	fp,sp,4
 2015078:	e13fff15 	stw	r4,-4(fp)
	vQueueDelete(*mutex);
 201507c:	e0bfff17 	ldw	r2,-4(fp)
 2015080:	10800017 	ldw	r2,0(r2)
 2015084:	1009883a 	mov	r4,r2
 2015088:	200e4600 	call	200e460 <vQueueDelete>
	SYS_STATS_DEC(mutex.used);
 201508c:	008085f4 	movhi	r2,535
 2015090:	10a86704 	addi	r2,r2,-24164
 2015094:	10809717 	ldw	r2,604(r2)
 2015098:	10ffffc4 	addi	r3,r2,-1
 201509c:	008085f4 	movhi	r2,535
 20150a0:	10a86704 	addi	r2,r2,-24164
 20150a4:	10c09715 	stw	r3,604(r2)
}
 20150a8:	0001883a 	nop
 20150ac:	e037883a 	mov	sp,fp
 20150b0:	dfc00117 	ldw	ra,4(sp)
 20150b4:	df000017 	ldw	fp,0(sp)
 20150b8:	dec00204 	addi	sp,sp,8
 20150bc:	f800283a 	ret

020150c0 <sys_mbox_new>:
 * in mailboxes are pointers. You have to define macros "_MBOX_SIZE"
 * in your lwipopts.h, or ignore this parameter in your implementation
 * and use a default size.
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 20150c0:	defffc04 	addi	sp,sp,-16
 20150c4:	dfc00315 	stw	ra,12(sp)
 20150c8:	df000215 	stw	fp,8(sp)
 20150cc:	df000204 	addi	fp,sp,8
 20150d0:	e13ffe15 	stw	r4,-8(fp)
 20150d4:	e17fff15 	stw	r5,-4(fp)
	*mbox = xQueueCreate(size, sizeof(void *)); // XXX correct? We are posting pointers so I guess it is...
 20150d8:	e0bfff17 	ldw	r2,-4(fp)
 20150dc:	000d883a 	mov	r6,zero
 20150e0:	01400104 	movi	r5,4
 20150e4:	1009883a 	mov	r4,r2
 20150e8:	200d4e00 	call	200d4e0 <xQueueGenericCreate>
 20150ec:	1007883a 	mov	r3,r2
 20150f0:	e0bffe17 	ldw	r2,-8(fp)
 20150f4:	10c00015 	stw	r3,0(r2)

	if (!*mbox) {
 20150f8:	e0bffe17 	ldw	r2,-8(fp)
 20150fc:	10800017 	ldw	r2,0(r2)
 2015100:	1000091e 	bne	r2,zero,2015128 <sys_mbox_new+0x68>
		SYS_STATS_INC(mbox.err);
 2015104:	008085f4 	movhi	r2,535
 2015108:	10a86704 	addi	r2,r2,-24164
 201510c:	10809c17 	ldw	r2,624(r2)
 2015110:	10c00044 	addi	r3,r2,1
 2015114:	008085f4 	movhi	r2,535
 2015118:	10a86704 	addi	r2,r2,-24164
 201511c:	10c09c15 	stw	r3,624(r2)
		return ERR_MEM;
 2015120:	00bfffc4 	movi	r2,-1
 2015124:	00001506 	br	201517c <sys_mbox_new+0xbc>
	}

	SYS_STATS_INC_USED(mbox);
 2015128:	008085f4 	movhi	r2,535
 201512c:	10a86704 	addi	r2,r2,-24164
 2015130:	10809a17 	ldw	r2,616(r2)
 2015134:	10c00044 	addi	r3,r2,1
 2015138:	008085f4 	movhi	r2,535
 201513c:	10a86704 	addi	r2,r2,-24164
 2015140:	10c09a15 	stw	r3,616(r2)
 2015144:	008085f4 	movhi	r2,535
 2015148:	10a86704 	addi	r2,r2,-24164
 201514c:	10c09b17 	ldw	r3,620(r2)
 2015150:	008085f4 	movhi	r2,535
 2015154:	10a86704 	addi	r2,r2,-24164
 2015158:	10809a17 	ldw	r2,616(r2)
 201515c:	1880062e 	bgeu	r3,r2,2015178 <sys_mbox_new+0xb8>
 2015160:	008085f4 	movhi	r2,535
 2015164:	10a86704 	addi	r2,r2,-24164
 2015168:	10c09a17 	ldw	r3,616(r2)
 201516c:	008085f4 	movhi	r2,535
 2015170:	10a86704 	addi	r2,r2,-24164
 2015174:	10c09b15 	stw	r3,620(r2)

	return ERR_OK;
 2015178:	0005883a 	mov	r2,zero
}
 201517c:	e037883a 	mov	sp,fp
 2015180:	dfc00117 	ldw	ra,4(sp)
 2015184:	df000017 	ldw	fp,0(sp)
 2015188:	dec00204 	addi	sp,sp,8
 201518c:	f800283a 	ret

02015190 <sys_mbox_free>:
 * Deallocates a mailbox. If there are messages still present in the
 * mailbox when the mailbox is deallocated, it is an indication of a
 * programming error in lwIP and the developer should be notified.
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
 2015190:	defffd04 	addi	sp,sp,-12
 2015194:	dfc00215 	stw	ra,8(sp)
 2015198:	df000115 	stw	fp,4(sp)
 201519c:	df000104 	addi	fp,sp,4
 20151a0:	e13fff15 	stw	r4,-4(fp)
	if (uxQueueMessagesWaiting(*mbox))
 20151a4:	e0bfff17 	ldw	r2,-4(fp)
 20151a8:	10800017 	ldw	r2,0(r2)
 20151ac:	1009883a 	mov	r4,r2
 20151b0:	200e3740 	call	200e374 <uxQueueMessagesWaiting>
 20151b4:	10000126 	beq	r2,zero,20151bc <sys_mbox_free+0x2c>
	{
		// Line for breakpoint.  Should never break here!
		__asm__ __volatile__ ( "nop" );
 20151b8:	0001883a 	nop
	}

	vQueueDelete(*mbox);
 20151bc:	e0bfff17 	ldw	r2,-4(fp)
 20151c0:	10800017 	ldw	r2,0(r2)
 20151c4:	1009883a 	mov	r4,r2
 20151c8:	200e4600 	call	200e460 <vQueueDelete>

	SYS_STATS_DEC(mbox.used);
 20151cc:	008085f4 	movhi	r2,535
 20151d0:	10a86704 	addi	r2,r2,-24164
 20151d4:	10809a17 	ldw	r2,616(r2)
 20151d8:	10ffffc4 	addi	r3,r2,-1
 20151dc:	008085f4 	movhi	r2,535
 20151e0:	10a86704 	addi	r2,r2,-24164
 20151e4:	10c09a15 	stw	r3,616(r2)
}
 20151e8:	0001883a 	nop
 20151ec:	e037883a 	mov	sp,fp
 20151f0:	dfc00117 	ldw	ra,4(sp)
 20151f4:	df000017 	ldw	fp,0(sp)
 20151f8:	dec00204 	addi	sp,sp,8
 20151fc:	f800283a 	ret

02015200 <sys_mbox_post>:
/**
 * Posts the "msg" to the mailbox. This function have to block until
 * the "msg" is really posted.
 */
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 2015200:	defffc04 	addi	sp,sp,-16
 2015204:	dfc00315 	stw	ra,12(sp)
 2015208:	df000215 	stw	fp,8(sp)
 201520c:	df000204 	addi	fp,sp,8
 2015210:	e13ffe15 	stw	r4,-8(fp)
 2015214:	e17fff15 	stw	r5,-4(fp)
	xQueueSend(*mbox, &data, (portTickType)(archPOST_BLOCK_TIME_MS / portTICK_RATE_MS));
 2015218:	e0bffe17 	ldw	r2,-8(fp)
 201521c:	10800017 	ldw	r2,0(r2)
 2015220:	e0ffff04 	addi	r3,fp,-4
 2015224:	000f883a 	mov	r7,zero
 2015228:	0189c404 	movi	r6,10000
 201522c:	180b883a 	mov	r5,r3
 2015230:	1009883a 	mov	r4,r2
 2015234:	200d8480 	call	200d848 <xQueueGenericSend>
}
 2015238:	0001883a 	nop
 201523c:	e037883a 	mov	sp,fp
 2015240:	dfc00117 	ldw	ra,4(sp)
 2015244:	df000017 	ldw	fp,0(sp)
 2015248:	dec00204 	addi	sp,sp,8
 201524c:	f800283a 	ret

02015250 <sys_mbox_trypost>:
/**
 * Try to post the "msg" to the mailbox. Returns ERR_MEM if this one
 * is full, else, ERR_OK if the "msg" is posted.
 */
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *data)
{
 2015250:	defffc04 	addi	sp,sp,-16
 2015254:	dfc00315 	stw	ra,12(sp)
 2015258:	df000215 	stw	fp,8(sp)
 201525c:	df000204 	addi	fp,sp,8
 2015260:	e13ffe15 	stw	r4,-8(fp)
 2015264:	e17fff15 	stw	r5,-4(fp)
	return (xQueueSend(*mbox, &data, 0) == pdTRUE) ? ERR_OK : ERR_MEM;
 2015268:	e0bffe17 	ldw	r2,-8(fp)
 201526c:	10800017 	ldw	r2,0(r2)
 2015270:	e0ffff04 	addi	r3,fp,-4
 2015274:	000f883a 	mov	r7,zero
 2015278:	000d883a 	mov	r6,zero
 201527c:	180b883a 	mov	r5,r3
 2015280:	1009883a 	mov	r4,r2
 2015284:	200d8480 	call	200d848 <xQueueGenericSend>
 2015288:	10800058 	cmpnei	r2,r2,1
 201528c:	1000021e 	bne	r2,zero,2015298 <sys_mbox_trypost+0x48>
 2015290:	0005883a 	mov	r2,zero
 2015294:	00000106 	br	201529c <sys_mbox_trypost+0x4c>
 2015298:	00bfffc4 	movi	r2,-1
}
 201529c:	e037883a 	mov	sp,fp
 20152a0:	dfc00117 	ldw	ra,4(sp)
 20152a4:	df000017 	ldw	fp,0(sp)
 20152a8:	dec00204 	addi	sp,sp,8
 20152ac:	f800283a 	ret

020152b0 <sys_arch_mbox_fetch>:
 *
 * Note that a function with a similar name, sys_mbox_fetch(), is
 * implemented by lwIP.
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 20152b0:	defff704 	addi	sp,sp,-36
 20152b4:	dfc00815 	stw	ra,32(sp)
 20152b8:	df000715 	stw	fp,28(sp)
 20152bc:	df000704 	addi	fp,sp,28
 20152c0:	e13ffd15 	stw	r4,-12(fp)
 20152c4:	e17ffe15 	stw	r5,-8(fp)
 20152c8:	e1bfff15 	stw	r6,-4(fp)
	void *dummyptr;
	portTickType nStartTime, nEndTime, nElapsed;

	nStartTime = xTaskGetTickCount();
 20152cc:	200fa180 	call	200fa18 <xTaskGetTickCount>
 20152d0:	e0bffa15 	stw	r2,-24(fp)

	if (msg == NULL)
 20152d4:	e0bffe17 	ldw	r2,-8(fp)
 20152d8:	1000021e 	bne	r2,zero,20152e4 <sys_arch_mbox_fetch+0x34>
		msg = &dummyptr;
 20152dc:	e0bffc04 	addi	r2,fp,-16
 20152e0:	e0bffe15 	stw	r2,-8(fp)

	if (timeout != 0)
 20152e4:	e0bfff17 	ldw	r2,-4(fp)
 20152e8:	10001826 	beq	r2,zero,201534c <sys_arch_mbox_fetch+0x9c>
	{
		if (pdTRUE == xQueueReceive(*mbox, msg, timeout))
 20152ec:	e0bffd17 	ldw	r2,-12(fp)
 20152f0:	10800017 	ldw	r2,0(r2)
 20152f4:	e1bfff17 	ldw	r6,-4(fp)
 20152f8:	e17ffe17 	ldw	r5,-8(fp)
 20152fc:	1009883a 	mov	r4,r2
 2015300:	200dbfc0 	call	200dbfc <xQueueReceive>
 2015304:	10800058 	cmpnei	r2,r2,1
 2015308:	10000c1e 	bne	r2,zero,201533c <sys_arch_mbox_fetch+0x8c>
		{
			nEndTime = xTaskGetTickCount();
 201530c:	200fa180 	call	200fa18 <xTaskGetTickCount>
 2015310:	e0bffb15 	stw	r2,-20(fp)
			nElapsed = nEndTime - nStartTime;
 2015314:	e0fffb17 	ldw	r3,-20(fp)
 2015318:	e0bffa17 	ldw	r2,-24(fp)
 201531c:	1885c83a 	sub	r2,r3,r2
 2015320:	e0bff915 	stw	r2,-28(fp)

			if (nElapsed == 0)
 2015324:	e0bff917 	ldw	r2,-28(fp)
 2015328:	1000021e 	bne	r2,zero,2015334 <sys_arch_mbox_fetch+0x84>
				nElapsed = 1;
 201532c:	00800044 	movi	r2,1
 2015330:	e0bff915 	stw	r2,-28(fp)

			return nElapsed;
 2015334:	e0bff917 	ldw	r2,-28(fp)
 2015338:	00001806 	br	201539c <sys_arch_mbox_fetch+0xec>
		}
		else // timed out blocking for message
		{
			*msg = NULL;
 201533c:	e0bffe17 	ldw	r2,-8(fp)
 2015340:	10000015 	stw	zero,0(r2)
			return SYS_ARCH_TIMEOUT;
 2015344:	00bfffc4 	movi	r2,-1
 2015348:	00001406 	br	201539c <sys_arch_mbox_fetch+0xec>
		}
	}
	else // block forever for a message.
	{
		// wait on message forever
		while (pdTRUE != xQueueReceive(*mbox, msg, 10000));
 201534c:	0001883a 	nop
 2015350:	e0bffd17 	ldw	r2,-12(fp)
 2015354:	10800017 	ldw	r2,0(r2)
 2015358:	0189c404 	movi	r6,10000
 201535c:	e17ffe17 	ldw	r5,-8(fp)
 2015360:	1009883a 	mov	r4,r2
 2015364:	200dbfc0 	call	200dbfc <xQueueReceive>
 2015368:	10800058 	cmpnei	r2,r2,1
 201536c:	103ff81e 	bne	r2,zero,2015350 <__alt_mem_mem_0+0xfcff5350>

		nEndTime = xTaskGetTickCount();
 2015370:	200fa180 	call	200fa18 <xTaskGetTickCount>
 2015374:	e0bffb15 	stw	r2,-20(fp)
		nElapsed = nEndTime - nStartTime;
 2015378:	e0fffb17 	ldw	r3,-20(fp)
 201537c:	e0bffa17 	ldw	r2,-24(fp)
 2015380:	1885c83a 	sub	r2,r3,r2
 2015384:	e0bff915 	stw	r2,-28(fp)

		if (nElapsed == 0)
 2015388:	e0bff917 	ldw	r2,-28(fp)
 201538c:	1000021e 	bne	r2,zero,2015398 <sys_arch_mbox_fetch+0xe8>
			nElapsed = 1;
 2015390:	00800044 	movi	r2,1
 2015394:	e0bff915 	stw	r2,-28(fp)

		return nElapsed; // return time blocked TBD test
 2015398:	e0bff917 	ldw	r2,-28(fp)
	}
}
 201539c:	e037883a 	mov	sp,fp
 20153a0:	dfc00117 	ldw	ra,4(sp)
 20153a4:	df000017 	ldw	fp,0(sp)
 20153a8:	dec00204 	addi	sp,sp,8
 20153ac:	f800283a 	ret

020153b0 <sys_arch_mbox_tryfetch>:
 * #define sys_arch_mbox_tryfetch(mbox,msg) \
 * 		sys_arch_mbox_fetch(mbox,msg,1)
 * although this would introduce unnecessary delays.
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 20153b0:	defffb04 	addi	sp,sp,-20
 20153b4:	dfc00415 	stw	ra,16(sp)
 20153b8:	df000315 	stw	fp,12(sp)
 20153bc:	df000304 	addi	fp,sp,12
 20153c0:	e13ffe15 	stw	r4,-8(fp)
 20153c4:	e17fff15 	stw	r5,-4(fp)
	void *dummyptr;

	if (msg == NULL)
 20153c8:	e0bfff17 	ldw	r2,-4(fp)
 20153cc:	1000021e 	bne	r2,zero,20153d8 <sys_arch_mbox_tryfetch+0x28>
		msg = &dummyptr;
 20153d0:	e0bffd04 	addi	r2,fp,-12
 20153d4:	e0bfff15 	stw	r2,-4(fp)

	return (pdTRUE == xQueueReceive(*mbox, msg, 0)) ? 0 : SYS_MBOX_EMPTY;
 20153d8:	e0bffe17 	ldw	r2,-8(fp)
 20153dc:	10800017 	ldw	r2,0(r2)
 20153e0:	000d883a 	mov	r6,zero
 20153e4:	e17fff17 	ldw	r5,-4(fp)
 20153e8:	1009883a 	mov	r4,r2
 20153ec:	200dbfc0 	call	200dbfc <xQueueReceive>
 20153f0:	10800058 	cmpnei	r2,r2,1
 20153f4:	1000021e 	bne	r2,zero,2015400 <sys_arch_mbox_tryfetch+0x50>
 20153f8:	0005883a 	mov	r2,zero
 20153fc:	00000106 	br	2015404 <sys_arch_mbox_tryfetch+0x54>
 2015400:	00bfffc4 	movi	r2,-1
}
 2015404:	e037883a 	mov	sp,fp
 2015408:	dfc00117 	ldw	ra,4(sp)
 201540c:	df000017 	ldw	fp,0(sp)
 2015410:	dec00204 	addi	sp,sp,8
 2015414:	f800283a 	ret

02015418 <sys_thread_new>:
 * argument to the thread() function. The stack size to used for this thread is
 * the "stacksize" parameter. The id of the new thread is returned. Both the id
 * and the priority are system dependent.
 */
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg, int stacksize, int prio)
{
 2015418:	defff604 	addi	sp,sp,-40
 201541c:	dfc00915 	stw	ra,36(sp)
 2015420:	df000815 	stw	fp,32(sp)
 2015424:	df000804 	addi	fp,sp,32
 2015428:	e13ffc15 	stw	r4,-16(fp)
 201542c:	e17ffd15 	stw	r5,-12(fp)
 2015430:	e1bffe15 	stw	r6,-8(fp)
 2015434:	e1ffff15 	stw	r7,-4(fp)
	xTaskHandle objTask;
	int result = pdFAIL;
 2015438:	e03ffa15 	stw	zero,-24(fp)

	result = xTaskCreate(thread, (signed portCHAR*)name, stacksize, arg, prio, &objTask);
 201543c:	e13fff17 	ldw	r4,-4(fp)
 2015440:	e0800217 	ldw	r2,8(fp)
 2015444:	e0fffb04 	addi	r3,fp,-20
 2015448:	d8c00115 	stw	r3,4(sp)
 201544c:	d8800015 	stw	r2,0(sp)
 2015450:	e1fffe17 	ldw	r7,-8(fp)
 2015454:	200d883a 	mov	r6,r4
 2015458:	e17ffc17 	ldw	r5,-16(fp)
 201545c:	e13ffd17 	ldw	r4,-12(fp)
 2015460:	200ead40 	call	200ead4 <xTaskCreate>
 2015464:	e0bffa15 	stw	r2,-24(fp)

	return (result == pdPASS) ? objTask : NULL;
 2015468:	e0bffa17 	ldw	r2,-24(fp)
 201546c:	10800058 	cmpnei	r2,r2,1
 2015470:	1000021e 	bne	r2,zero,201547c <sys_thread_new+0x64>
 2015474:	e0bffb17 	ldw	r2,-20(fp)
 2015478:	00000106 	br	2015480 <sys_thread_new+0x68>
 201547c:	0005883a 	mov	r2,zero
}
 2015480:	e037883a 	mov	sp,fp
 2015484:	dfc00117 	ldw	ra,4(sp)
 2015488:	df000017 	ldw	fp,0(sp)
 201548c:	dec00204 	addi	sp,sp,8
 2015490:	f800283a 	ret

02015494 <dhcp_clear_assignment>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_clear_assignment(struct netif *netif)
{
 2015494:	defffd04 	addi	sp,sp,-12
 2015498:	dfc00215 	stw	ra,8(sp)
 201549c:	df000115 	stw	fp,4(sp)
 20154a0:	df000104 	addi	fp,sp,4
 20154a4:	e13fff15 	stw	r4,-4(fp)
  netif_set_down(netif);
 20154a8:	e13fff17 	ldw	r4,-4(fp)
 20154ac:	2019ecc0 	call	2019ecc <netif_set_down>
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
 20154b0:	d1600d04 	addi	r5,gp,-32716
 20154b4:	e13fff17 	ldw	r4,-4(fp)
 20154b8:	2019c380 	call	2019c38 <netif_set_ipaddr>
  netif_set_gw(netif, IP_ADDR_ANY);
 20154bc:	d1600d04 	addi	r5,gp,-32716
 20154c0:	e13fff17 	ldw	r4,-4(fp)
 20154c4:	2019d600 	call	2019d60 <netif_set_gw>
  netif_set_netmask(netif, IP_ADDR_ANY); 
 20154c8:	d1600d04 	addi	r5,gp,-32716
 20154cc:	e13fff17 	ldw	r4,-4(fp)
 20154d0:	2019da80 	call	2019da8 <netif_set_netmask>
}
 20154d4:	0001883a 	nop
 20154d8:	e037883a 	mov	sp,fp
 20154dc:	dfc00117 	ldw	ra,4(sp)
 20154e0:	df000017 	ldw	fp,0(sp)
 20154e4:	dec00204 	addi	sp,sp,8
 20154e8:	f800283a 	ret

020154ec <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 20154ec:	defffc04 	addi	sp,sp,-16
 20154f0:	dfc00315 	stw	ra,12(sp)
 20154f4:	df000215 	stw	fp,8(sp)
 20154f8:	df000204 	addi	fp,sp,8
 20154fc:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 2015500:	e0bfff17 	ldw	r2,-4(fp)
 2015504:	10800a17 	ldw	r2,40(r2)
 2015508:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Set the interface down since the address must no longer be used, as per RFC2131 */
  dhcp_clear_assignment(netif);
 201550c:	e13fff17 	ldw	r4,-4(fp)
 2015510:	20154940 	call	2015494 <dhcp_clear_assignment>
  /* Change to a defined state */
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
 2015514:	01400304 	movi	r5,12
 2015518:	e13ffe17 	ldw	r4,-8(fp)
 201551c:	20171000 	call	2017100 <dhcp_set_state>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 2015520:	e13fff17 	ldw	r4,-4(fp)
 2015524:	20166140 	call	2016614 <dhcp_discover>
}
 2015528:	0001883a 	nop
 201552c:	e037883a 	mov	sp,fp
 2015530:	dfc00117 	ldw	ra,4(sp)
 2015534:	df000017 	ldw	fp,0(sp)
 2015538:	dec00204 	addi	sp,sp,8
 201553c:	f800283a 	ret

02015540 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 2015540:	defffb04 	addi	sp,sp,-20
 2015544:	dfc00415 	stw	ra,16(sp)
 2015548:	df000315 	stw	fp,12(sp)
 201554c:	df000304 	addi	fp,sp,12
 2015550:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 2015554:	e0bfff17 	ldw	r2,-4(fp)
 2015558:	10800a17 	ldw	r2,40(r2)
 201555c:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_CHECKING);
 2015560:	01400204 	movi	r5,8
 2015564:	e13ffd17 	ldw	r4,-12(fp)
 2015568:	20171000 	call	2017100 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 201556c:	e0bffd17 	ldw	r2,-12(fp)
 2015570:	10800904 	addi	r2,r2,36
 2015574:	000d883a 	mov	r6,zero
 2015578:	100b883a 	mov	r5,r2
 201557c:	e13fff17 	ldw	r4,-4(fp)
 2015580:	2023c000 	call	2023c00 <etharp_query>
 2015584:	e0bffe05 	stb	r2,-8(fp)
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  dhcp->tries++;
 2015588:	e0bffd17 	ldw	r2,-12(fp)
 201558c:	10800343 	ldbu	r2,13(r2)
 2015590:	10800044 	addi	r2,r2,1
 2015594:	1007883a 	mov	r3,r2
 2015598:	e0bffd17 	ldw	r2,-12(fp)
 201559c:	10c00345 	stb	r3,13(r2)
  msecs = 500;
 20155a0:	00807d04 	movi	r2,500
 20155a4:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 20155a8:	e0bffe8b 	ldhu	r2,-6(fp)
 20155ac:	10807cc4 	addi	r2,r2,499
 20155b0:	01407d04 	movi	r5,500
 20155b4:	1009883a 	mov	r4,r2
 20155b8:	200a9e40 	call	200a9e4 <__divsi3>
 20155bc:	1007883a 	mov	r3,r2
 20155c0:	e0bffd17 	ldw	r2,-12(fp)
 20155c4:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 20155c8:	0001883a 	nop
 20155cc:	e037883a 	mov	sp,fp
 20155d0:	dfc00117 	ldw	ra,4(sp)
 20155d4:	df000017 	ldw	fp,0(sp)
 20155d8:	dec00204 	addi	sp,sp,8
 20155dc:	f800283a 	ret

020155e0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 20155e0:	defffc04 	addi	sp,sp,-16
 20155e4:	dfc00315 	stw	ra,12(sp)
 20155e8:	df000215 	stw	fp,8(sp)
 20155ec:	df000204 	addi	fp,sp,8
 20155f0:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 20155f4:	e0bfff17 	ldw	r2,-4(fp)
 20155f8:	10800a17 	ldw	r2,40(r2)
 20155fc:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 2015600:	008085b4 	movhi	r2,534
 2015604:	10885504 	addi	r2,r2,8532
 2015608:	10800083 	ldbu	r2,2(r2)
 201560c:	10803fcc 	andi	r2,r2,255
 2015610:	10002826 	beq	r2,zero,20156b4 <dhcp_handle_offer+0xd4>
    ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 2015614:	008085b4 	movhi	r2,534
 2015618:	10885804 	addi	r2,r2,8544
 201561c:	10800217 	ldw	r2,8(r2)
 2015620:	1006d63a 	srli	r3,r2,24
 2015624:	008085b4 	movhi	r2,534
 2015628:	10885804 	addi	r2,r2,8544
 201562c:	10800217 	ldw	r2,8(r2)
 2015630:	1004d23a 	srli	r2,r2,8
 2015634:	10bfc00c 	andi	r2,r2,65280
 2015638:	1886b03a 	or	r3,r3,r2
 201563c:	008085b4 	movhi	r2,534
 2015640:	10885804 	addi	r2,r2,8544
 2015644:	10800217 	ldw	r2,8(r2)
 2015648:	10bfc00c 	andi	r2,r2,65280
 201564c:	1004923a 	slli	r2,r2,8
 2015650:	1886b03a 	or	r3,r3,r2
 2015654:	008085b4 	movhi	r2,534
 2015658:	10885804 	addi	r2,r2,8544
 201565c:	10800217 	ldw	r2,8(r2)
 2015660:	1004963a 	slli	r2,r2,24
 2015664:	1886b03a 	or	r3,r3,r2
 2015668:	e0bffe17 	ldw	r2,-8(fp)
 201566c:	10c00815 	stw	r3,32(r2)
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->server_ip_addr)));
    /* remember offered address */
    ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 2015670:	e0bffe17 	ldw	r2,-8(fp)
 2015674:	10800217 	ldw	r2,8(r2)
 2015678:	10c00403 	ldbu	r3,16(r2)
 201567c:	11000443 	ldbu	r4,17(r2)
 2015680:	2008923a 	slli	r4,r4,8
 2015684:	20c6b03a 	or	r3,r4,r3
 2015688:	11000483 	ldbu	r4,18(r2)
 201568c:	2008943a 	slli	r4,r4,16
 2015690:	20c6b03a 	or	r3,r4,r3
 2015694:	108004c3 	ldbu	r2,19(r2)
 2015698:	1004963a 	slli	r2,r2,24
 201569c:	10c4b03a 	or	r2,r2,r3
 20156a0:	1007883a 	mov	r3,r2
 20156a4:	e0bffe17 	ldw	r2,-8(fp)
 20156a8:	10c00915 	stw	r3,36(r2)
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 20156ac:	e13fff17 	ldw	r4,-4(fp)
 20156b0:	20156cc0 	call	20156cc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 20156b4:	0001883a 	nop
 20156b8:	e037883a 	mov	sp,fp
 20156bc:	dfc00117 	ldw	ra,4(sp)
 20156c0:	df000017 	ldw	fp,0(sp)
 20156c4:	dec00204 	addi	sp,sp,8
 20156c8:	f800283a 	ret

020156cc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 20156cc:	defffa04 	addi	sp,sp,-24
 20156d0:	dfc00515 	stw	ra,20(sp)
 20156d4:	df000415 	stw	fp,16(sp)
 20156d8:	df000404 	addi	fp,sp,16
 20156dc:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 20156e0:	e0bfff17 	ldw	r2,-4(fp)
 20156e4:	10800a17 	ldw	r2,40(r2)
 20156e8:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_REQUESTING);
 20156ec:	01400044 	movi	r5,1
 20156f0:	e13ffd17 	ldw	r4,-12(fp)
 20156f4:	20171000 	call	2017100 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 20156f8:	018000c4 	movi	r6,3
 20156fc:	e17ffd17 	ldw	r5,-12(fp)
 2015700:	e13fff17 	ldw	r4,-4(fp)
 2015704:	20180d80 	call	20180d8 <dhcp_create_msg>
 2015708:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 201570c:	e0bffe07 	ldb	r2,-8(fp)
 2015710:	1000651e 	bne	r2,zero,20158a8 <dhcp_select+0x1dc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 2015714:	01800084 	movi	r6,2
 2015718:	01400e44 	movi	r5,57
 201571c:	e13ffd17 	ldw	r4,-12(fp)
 2015720:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 2015724:	e0bfff17 	ldw	r2,-4(fp)
 2015728:	10800c0b 	ldhu	r2,48(r2)
 201572c:	10bfffcc 	andi	r2,r2,65535
 2015730:	100b883a 	mov	r5,r2
 2015734:	e13ffd17 	ldw	r4,-12(fp)
 2015738:	20172580 	call	2017258 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 201573c:	01800104 	movi	r6,4
 2015740:	01400c84 	movi	r5,50
 2015744:	e13ffd17 	ldw	r4,-12(fp)
 2015748:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 201574c:	e0bffd17 	ldw	r2,-12(fp)
 2015750:	10800917 	ldw	r2,36(r2)
 2015754:	1006d63a 	srli	r3,r2,24
 2015758:	e0bffd17 	ldw	r2,-12(fp)
 201575c:	10800917 	ldw	r2,36(r2)
 2015760:	1004d23a 	srli	r2,r2,8
 2015764:	10bfc00c 	andi	r2,r2,65280
 2015768:	1886b03a 	or	r3,r3,r2
 201576c:	e0bffd17 	ldw	r2,-12(fp)
 2015770:	10800917 	ldw	r2,36(r2)
 2015774:	10bfc00c 	andi	r2,r2,65280
 2015778:	1004923a 	slli	r2,r2,8
 201577c:	1886b03a 	or	r3,r3,r2
 2015780:	e0bffd17 	ldw	r2,-12(fp)
 2015784:	10800917 	ldw	r2,36(r2)
 2015788:	1004963a 	slli	r2,r2,24
 201578c:	1884b03a 	or	r2,r3,r2
 2015790:	100b883a 	mov	r5,r2
 2015794:	e13ffd17 	ldw	r4,-12(fp)
 2015798:	20172f00 	call	20172f0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 201579c:	01800104 	movi	r6,4
 20157a0:	01400d84 	movi	r5,54
 20157a4:	e13ffd17 	ldw	r4,-12(fp)
 20157a8:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
 20157ac:	e0bffd17 	ldw	r2,-12(fp)
 20157b0:	10800817 	ldw	r2,32(r2)
 20157b4:	1006d63a 	srli	r3,r2,24
 20157b8:	e0bffd17 	ldw	r2,-12(fp)
 20157bc:	10800817 	ldw	r2,32(r2)
 20157c0:	1004d23a 	srli	r2,r2,8
 20157c4:	10bfc00c 	andi	r2,r2,65280
 20157c8:	1886b03a 	or	r3,r3,r2
 20157cc:	e0bffd17 	ldw	r2,-12(fp)
 20157d0:	10800817 	ldw	r2,32(r2)
 20157d4:	10bfc00c 	andi	r2,r2,65280
 20157d8:	1004923a 	slli	r2,r2,8
 20157dc:	1886b03a 	or	r3,r3,r2
 20157e0:	e0bffd17 	ldw	r2,-12(fp)
 20157e4:	10800817 	ldw	r2,32(r2)
 20157e8:	1004963a 	slli	r2,r2,24
 20157ec:	1884b03a 	or	r2,r3,r2
 20157f0:	100b883a 	mov	r5,r2
 20157f4:	e13ffd17 	ldw	r4,-12(fp)
 20157f8:	20172f00 	call	20172f0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
 20157fc:	01800104 	movi	r6,4
 2015800:	01400dc4 	movi	r5,55
 2015804:	e13ffd17 	ldw	r4,-12(fp)
 2015808:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
 201580c:	01400044 	movi	r5,1
 2015810:	e13ffd17 	ldw	r4,-12(fp)
 2015814:	20171f80 	call	20171f8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
 2015818:	014000c4 	movi	r5,3
 201581c:	e13ffd17 	ldw	r4,-12(fp)
 2015820:	20171f80 	call	20171f8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
 2015824:	01400704 	movi	r5,28
 2015828:	e13ffd17 	ldw	r4,-12(fp)
 201582c:	20171f80 	call	20171f8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
 2015830:	01400184 	movi	r5,6
 2015834:	e13ffd17 	ldw	r4,-12(fp)
 2015838:	20171f80 	call	20171f8 <dhcp_option_byte>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
 201583c:	e17fff17 	ldw	r5,-4(fp)
 2015840:	e13ffd17 	ldw	r4,-12(fp)
 2015844:	20173fc0 	call	20173fc <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 2015848:	e13ffd17 	ldw	r4,-12(fp)
 201584c:	20186e00 	call	20186e0 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 2015850:	e0bffd17 	ldw	r2,-12(fp)
 2015854:	10c00417 	ldw	r3,16(r2)
 2015858:	e0bffd17 	ldw	r2,-12(fp)
 201585c:	1080060b 	ldhu	r2,24(r2)
 2015860:	10803c04 	addi	r2,r2,240
 2015864:	10bfffcc 	andi	r2,r2,65535
 2015868:	100b883a 	mov	r5,r2
 201586c:	1809883a 	mov	r4,r3
 2015870:	201a7100 	call	201a710 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 2015874:	e0bffd17 	ldw	r2,-12(fp)
 2015878:	10c00117 	ldw	r3,4(r2)
 201587c:	e0bffd17 	ldw	r2,-12(fp)
 2015880:	11000417 	ldw	r4,16(r2)
 2015884:	e0bfff17 	ldw	r2,-4(fp)
 2015888:	d8800015 	stw	r2,0(sp)
 201588c:	01c010c4 	movi	r7,67
 2015890:	d1a00e04 	addi	r6,gp,-32712
 2015894:	200b883a 	mov	r5,r4
 2015898:	1809883a 	mov	r4,r3
 201589c:	20221880 	call	2022188 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 20158a0:	e13ffd17 	ldw	r4,-12(fp)
 20158a4:	201865c0 	call	201865c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 20158a8:	e0bffd17 	ldw	r2,-12(fp)
 20158ac:	10800343 	ldbu	r2,13(r2)
 20158b0:	10800044 	addi	r2,r2,1
 20158b4:	1007883a 	mov	r3,r2
 20158b8:	e0bffd17 	ldw	r2,-12(fp)
 20158bc:	10c00345 	stb	r3,13(r2)
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 20158c0:	e0bffd17 	ldw	r2,-12(fp)
 20158c4:	10800343 	ldbu	r2,13(r2)
 20158c8:	10803fcc 	andi	r2,r2,255
 20158cc:	108001a8 	cmpgeui	r2,r2,6
 20158d0:	1000061e 	bne	r2,zero,20158ec <dhcp_select+0x220>
 20158d4:	e0bffd17 	ldw	r2,-12(fp)
 20158d8:	10800343 	ldbu	r2,13(r2)
 20158dc:	10803fcc 	andi	r2,r2,255
 20158e0:	00c0fa04 	movi	r3,1000
 20158e4:	1884983a 	sll	r2,r3,r2
 20158e8:	00000106 	br	20158f0 <dhcp_select+0x224>
 20158ec:	00ba9804 	movi	r2,-5536
 20158f0:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 20158f4:	e0bffe8b 	ldhu	r2,-6(fp)
 20158f8:	10807cc4 	addi	r2,r2,499
 20158fc:	01407d04 	movi	r5,500
 2015900:	1009883a 	mov	r4,r2
 2015904:	200a9e40 	call	200a9e4 <__divsi3>
 2015908:	1007883a 	mov	r3,r2
 201590c:	e0bffd17 	ldw	r2,-12(fp)
 2015910:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 2015914:	e0bffe03 	ldbu	r2,-8(fp)
}
 2015918:	e037883a 	mov	sp,fp
 201591c:	dfc00117 	ldw	ra,4(sp)
 2015920:	df000017 	ldw	fp,0(sp)
 2015924:	dec00204 	addi	sp,sp,8
 2015928:	f800283a 	ret

0201592c <dhcp_coarse_tmr>:
/**
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr()
{
 201592c:	defffd04 	addi	sp,sp,-12
 2015930:	dfc00215 	stw	ra,8(sp)
 2015934:	df000115 	stw	fp,4(sp)
 2015938:	df000104 	addi	fp,sp,4
  struct netif *netif = netif_list;
 201593c:	d0a7f317 	ldw	r2,-24628(gp)
 2015940:	e0bfff15 	stw	r2,-4(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 2015944:	00001b06 	br	20159b4 <dhcp_coarse_tmr+0x88>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
 2015948:	e0bfff17 	ldw	r2,-4(fp)
 201594c:	10800a17 	ldw	r2,40(r2)
 2015950:	10001526 	beq	r2,zero,20159a8 <dhcp_coarse_tmr+0x7c>
      /* timer is active (non zero), and triggers (zeroes) now? */
      if (netif->dhcp->t2_timeout-- == 1) {
 2015954:	e0bfff17 	ldw	r2,-4(fp)
 2015958:	10800a17 	ldw	r2,40(r2)
 201595c:	10c0078b 	ldhu	r3,30(r2)
 2015960:	193fffc4 	addi	r4,r3,-1
 2015964:	1100078d 	sth	r4,30(r2)
 2015968:	18bfffcc 	andi	r2,r3,65535
 201596c:	10800058 	cmpnei	r2,r2,1
 2015970:	1000031e 	bne	r2,zero,2015980 <dhcp_coarse_tmr+0x54>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 2015974:	e13fff17 	ldw	r4,-4(fp)
 2015978:	2015ca00 	call	2015ca0 <dhcp_t2_timeout>
 201597c:	00000a06 	br	20159a8 <dhcp_coarse_tmr+0x7c>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (netif->dhcp->t1_timeout-- == 1) {
 2015980:	e0bfff17 	ldw	r2,-4(fp)
 2015984:	10800a17 	ldw	r2,40(r2)
 2015988:	10c0070b 	ldhu	r3,28(r2)
 201598c:	193fffc4 	addi	r4,r3,-1
 2015990:	1100070d 	sth	r4,28(r2)
 2015994:	18bfffcc 	andi	r2,r3,65535
 2015998:	10800058 	cmpnei	r2,r2,1
 201599c:	1000021e 	bne	r2,zero,20159a8 <dhcp_coarse_tmr+0x7c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 20159a0:	e13fff17 	ldw	r4,-4(fp)
 20159a4:	2015c240 	call	2015c24 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 20159a8:	e0bfff17 	ldw	r2,-4(fp)
 20159ac:	10800017 	ldw	r2,0(r2)
 20159b0:	e0bfff15 	stw	r2,-4(fp)
dhcp_coarse_tmr()
{
  struct netif *netif = netif_list;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 20159b4:	e0bfff17 	ldw	r2,-4(fp)
 20159b8:	103fe31e 	bne	r2,zero,2015948 <__alt_mem_mem_0+0xfcff5948>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  }
}
 20159bc:	0001883a 	nop
 20159c0:	e037883a 	mov	sp,fp
 20159c4:	dfc00117 	ldw	ra,4(sp)
 20159c8:	df000017 	ldw	fp,0(sp)
 20159cc:	dec00204 	addi	sp,sp,8
 20159d0:	f800283a 	ret

020159d4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr()
{
 20159d4:	defffd04 	addi	sp,sp,-12
 20159d8:	dfc00215 	stw	ra,8(sp)
 20159dc:	df000115 	stw	fp,4(sp)
 20159e0:	df000104 	addi	fp,sp,4
  struct netif *netif = netif_list;
 20159e4:	d0a7f317 	ldw	r2,-24628(gp)
 20159e8:	e0bfff15 	stw	r2,-4(fp)
  /* loop through netif's */
  while (netif != NULL) {
 20159ec:	00001f06 	br	2015a6c <dhcp_fine_tmr+0x98>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
 20159f0:	e0bfff17 	ldw	r2,-4(fp)
 20159f4:	10800a17 	ldw	r2,40(r2)
 20159f8:	10001926 	beq	r2,zero,2015a60 <dhcp_fine_tmr+0x8c>
      /* timer is active (non zero), and is about to trigger now */      
      if (netif->dhcp->request_timeout > 1) {
 20159fc:	e0bfff17 	ldw	r2,-4(fp)
 2015a00:	10800a17 	ldw	r2,40(r2)
 2015a04:	1080068b 	ldhu	r2,26(r2)
 2015a08:	10bfffcc 	andi	r2,r2,65535
 2015a0c:	108000b0 	cmpltui	r2,r2,2
 2015a10:	1000061e 	bne	r2,zero,2015a2c <dhcp_fine_tmr+0x58>
        netif->dhcp->request_timeout--;
 2015a14:	e0bfff17 	ldw	r2,-4(fp)
 2015a18:	10800a17 	ldw	r2,40(r2)
 2015a1c:	10c0068b 	ldhu	r3,26(r2)
 2015a20:	18ffffc4 	addi	r3,r3,-1
 2015a24:	10c0068d 	sth	r3,26(r2)
 2015a28:	00000d06 	br	2015a60 <dhcp_fine_tmr+0x8c>
      }
      else if (netif->dhcp->request_timeout == 1) {
 2015a2c:	e0bfff17 	ldw	r2,-4(fp)
 2015a30:	10800a17 	ldw	r2,40(r2)
 2015a34:	1080068b 	ldhu	r2,26(r2)
 2015a38:	10bfffcc 	andi	r2,r2,65535
 2015a3c:	10800058 	cmpnei	r2,r2,1
 2015a40:	1000071e 	bne	r2,zero,2015a60 <dhcp_fine_tmr+0x8c>
        netif->dhcp->request_timeout--;
 2015a44:	e0bfff17 	ldw	r2,-4(fp)
 2015a48:	10800a17 	ldw	r2,40(r2)
 2015a4c:	10c0068b 	ldhu	r3,26(r2)
 2015a50:	18ffffc4 	addi	r3,r3,-1
 2015a54:	10c0068d 	sth	r3,26(r2)
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 2015a58:	e13fff17 	ldw	r4,-4(fp)
 2015a5c:	2015a8c0 	call	2015a8c <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 2015a60:	e0bfff17 	ldw	r2,-4(fp)
 2015a64:	10800017 	ldw	r2,0(r2)
 2015a68:	e0bfff15 	stw	r2,-4(fp)
void
dhcp_fine_tmr()
{
  struct netif *netif = netif_list;
  /* loop through netif's */
  while (netif != NULL) {
 2015a6c:	e0bfff17 	ldw	r2,-4(fp)
 2015a70:	103fdf1e 	bne	r2,zero,20159f0 <__alt_mem_mem_0+0xfcff59f0>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  }
}
 2015a74:	0001883a 	nop
 2015a78:	e037883a 	mov	sp,fp
 2015a7c:	dfc00117 	ldw	ra,4(sp)
 2015a80:	df000017 	ldw	fp,0(sp)
 2015a84:	dec00204 	addi	sp,sp,8
 2015a88:	f800283a 	ret

02015a8c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 2015a8c:	defffc04 	addi	sp,sp,-16
 2015a90:	dfc00315 	stw	ra,12(sp)
 2015a94:	df000215 	stw	fp,8(sp)
 2015a98:	df000204 	addi	fp,sp,8
 2015a9c:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 2015aa0:	e0bfff17 	ldw	r2,-4(fp)
 2015aa4:	10800a17 	ldw	r2,40(r2)
 2015aa8:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
 2015aac:	e0bffe17 	ldw	r2,-8(fp)
 2015ab0:	10800303 	ldbu	r2,12(r2)
 2015ab4:	10803fcc 	andi	r2,r2,255
 2015ab8:	10800320 	cmpeqi	r2,r2,12
 2015abc:	1000051e 	bne	r2,zero,2015ad4 <dhcp_timeout+0x48>
 2015ac0:	e0bffe17 	ldw	r2,-8(fp)
 2015ac4:	10800303 	ldbu	r2,12(r2)
 2015ac8:	10803fcc 	andi	r2,r2,255
 2015acc:	10800198 	cmpnei	r2,r2,6
 2015ad0:	1000031e 	bne	r2,zero,2015ae0 <dhcp_timeout+0x54>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 2015ad4:	e13fff17 	ldw	r4,-4(fp)
 2015ad8:	20166140 	call	2016614 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 2015adc:	00004b06 	br	2015c0c <dhcp_timeout+0x180>
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  /* receiving the requested lease timed out */
  } else if (dhcp->state == DHCP_REQUESTING) {
 2015ae0:	e0bffe17 	ldw	r2,-8(fp)
 2015ae4:	10800303 	ldbu	r2,12(r2)
 2015ae8:	10803fcc 	andi	r2,r2,255
 2015aec:	10800058 	cmpnei	r2,r2,1
 2015af0:	10000d1e 	bne	r2,zero,2015b28 <dhcp_timeout+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
 2015af4:	e0bffe17 	ldw	r2,-8(fp)
 2015af8:	10800343 	ldbu	r2,13(r2)
 2015afc:	10803fcc 	andi	r2,r2,255
 2015b00:	108001a8 	cmpgeui	r2,r2,6
 2015b04:	1000031e 	bne	r2,zero,2015b14 <dhcp_timeout+0x88>
      dhcp_select(netif);
 2015b08:	e13fff17 	ldw	r4,-4(fp)
 2015b0c:	20156cc0 	call	20156cc <dhcp_select>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 2015b10:	00003e06 	br	2015c0c <dhcp_timeout+0x180>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
      dhcp_select(netif);
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
      dhcp_release(netif);
 2015b14:	e13fff17 	ldw	r4,-4(fp)
 2015b18:	2016ea40 	call	2016ea4 <dhcp_release>
      dhcp_discover(netif);
 2015b1c:	e13fff17 	ldw	r4,-4(fp)
 2015b20:	20166140 	call	2016614 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 2015b24:	00003906 	br	2015c0c <dhcp_timeout+0x180>
      dhcp_release(netif);
      dhcp_discover(netif);
    }
#if DHCP_DOES_ARP_CHECK
  /* received no ARP reply for the offered address (which is good) */
  } else if (dhcp->state == DHCP_CHECKING) {
 2015b28:	e0bffe17 	ldw	r2,-8(fp)
 2015b2c:	10800303 	ldbu	r2,12(r2)
 2015b30:	10803fcc 	andi	r2,r2,255
 2015b34:	10800218 	cmpnei	r2,r2,8
 2015b38:	10000b1e 	bne	r2,zero,2015b68 <dhcp_timeout+0xdc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
    if (dhcp->tries <= 1) {
 2015b3c:	e0bffe17 	ldw	r2,-8(fp)
 2015b40:	10800343 	ldbu	r2,13(r2)
 2015b44:	10803fcc 	andi	r2,r2,255
 2015b48:	108000a8 	cmpgeui	r2,r2,2
 2015b4c:	1000031e 	bne	r2,zero,2015b5c <dhcp_timeout+0xd0>
      dhcp_check(netif);
 2015b50:	e13fff17 	ldw	r4,-4(fp)
 2015b54:	20155400 	call	2015540 <dhcp_check>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 2015b58:	00002c06 	br	2015c0c <dhcp_timeout+0x180>
      dhcp_check(netif);
    /* no ARP replies on the offered address,
       looks like the IP address is indeed free */
    } else {
      /* bind the interface to the offered address */
      dhcp_bind(netif);
 2015b5c:	e13fff17 	ldw	r4,-4(fp)
 2015b60:	20167b40 	call	20167b4 <dhcp_bind>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 2015b64:	00002906 	br	2015c0c <dhcp_timeout+0x180>
      dhcp_bind(netif);
    }
#endif /* DHCP_DOES_ARP_CHECK */
  }
  /* did not get response to renew request? */
  else if (dhcp->state == DHCP_RENEWING) {
 2015b68:	e0bffe17 	ldw	r2,-8(fp)
 2015b6c:	10800303 	ldbu	r2,12(r2)
 2015b70:	10803fcc 	andi	r2,r2,255
 2015b74:	10800158 	cmpnei	r2,r2,5
 2015b78:	1000031e 	bne	r2,zero,2015b88 <dhcp_timeout+0xfc>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
    /* just retry renewal */
    /* note that the rebind timer will eventually time-out if renew does not work */
    dhcp_renew(netif);
 2015b7c:	e13fff17 	ldw	r4,-4(fp)
 2015b80:	2016a400 	call	2016a40 <dhcp_renew>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 2015b84:	00002106 	br	2015c0c <dhcp_timeout+0x180>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
    /* just retry renewal */
    /* note that the rebind timer will eventually time-out if renew does not work */
    dhcp_renew(netif);
  /* did not get response to rebind request? */
  } else if (dhcp->state == DHCP_REBINDING) {
 2015b88:	e0bffe17 	ldw	r2,-8(fp)
 2015b8c:	10800303 	ldbu	r2,12(r2)
 2015b90:	10803fcc 	andi	r2,r2,255
 2015b94:	10800118 	cmpnei	r2,r2,4
 2015b98:	10000d1e 	bne	r2,zero,2015bd0 <dhcp_timeout+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
 2015b9c:	e0bffe17 	ldw	r2,-8(fp)
 2015ba0:	10800343 	ldbu	r2,13(r2)
 2015ba4:	10803fcc 	andi	r2,r2,255
 2015ba8:	10800268 	cmpgeui	r2,r2,9
 2015bac:	1000031e 	bne	r2,zero,2015bbc <dhcp_timeout+0x130>
      dhcp_rebind(netif);
 2015bb0:	e13fff17 	ldw	r4,-4(fp)
 2015bb4:	2016ba40 	call	2016ba4 <dhcp_rebind>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 2015bb8:	00001406 	br	2015c0c <dhcp_timeout+0x180>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
    if (dhcp->tries <= 8) {
      dhcp_rebind(netif);
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
 2015bbc:	e13fff17 	ldw	r4,-4(fp)
 2015bc0:	2016ea40 	call	2016ea4 <dhcp_release>
      dhcp_discover(netif);
 2015bc4:	e13fff17 	ldw	r4,-4(fp)
 2015bc8:	20166140 	call	2016614 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 2015bcc:	00000f06 	br	2015c0c <dhcp_timeout+0x180>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
      dhcp_release(netif);
      dhcp_discover(netif);
    }
  } else if (dhcp->state == DHCP_REBOOTING) {
 2015bd0:	e0bffe17 	ldw	r2,-8(fp)
 2015bd4:	10800303 	ldbu	r2,12(r2)
 2015bd8:	10803fcc 	andi	r2,r2,255
 2015bdc:	108000d8 	cmpnei	r2,r2,3
 2015be0:	10000a1e 	bne	r2,zero,2015c0c <dhcp_timeout+0x180>
    if (dhcp->tries < REBOOT_TRIES) {
 2015be4:	e0bffe17 	ldw	r2,-8(fp)
 2015be8:	10800343 	ldbu	r2,13(r2)
 2015bec:	10803fcc 	andi	r2,r2,255
 2015bf0:	108000a8 	cmpgeui	r2,r2,2
 2015bf4:	1000031e 	bne	r2,zero,2015c04 <dhcp_timeout+0x178>
      dhcp_reboot(netif);
 2015bf8:	e13fff17 	ldw	r4,-4(fp)
 2015bfc:	2016d000 	call	2016d00 <dhcp_reboot>
    } else {
      dhcp_discover(netif);
    }
  }
}
 2015c00:	00000206 	br	2015c0c <dhcp_timeout+0x180>
    }
  } else if (dhcp->state == DHCP_REBOOTING) {
    if (dhcp->tries < REBOOT_TRIES) {
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
 2015c04:	e13fff17 	ldw	r4,-4(fp)
 2015c08:	20166140 	call	2016614 <dhcp_discover>
    }
  }
}
 2015c0c:	0001883a 	nop
 2015c10:	e037883a 	mov	sp,fp
 2015c14:	dfc00117 	ldw	ra,4(sp)
 2015c18:	df000017 	ldw	fp,0(sp)
 2015c1c:	dec00204 	addi	sp,sp,8
 2015c20:	f800283a 	ret

02015c24 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 2015c24:	defffc04 	addi	sp,sp,-16
 2015c28:	dfc00315 	stw	ra,12(sp)
 2015c2c:	df000215 	stw	fp,8(sp)
 2015c30:	df000204 	addi	fp,sp,8
 2015c34:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 2015c38:	e0bfff17 	ldw	r2,-4(fp)
 2015c3c:	10800a17 	ldw	r2,40(r2)
 2015c40:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 2015c44:	e0bffe17 	ldw	r2,-8(fp)
 2015c48:	10800303 	ldbu	r2,12(r2)
 2015c4c:	10803fcc 	andi	r2,r2,255
 2015c50:	10800060 	cmpeqi	r2,r2,1
 2015c54:	10000a1e 	bne	r2,zero,2015c80 <dhcp_t1_timeout+0x5c>
 2015c58:	e0bffe17 	ldw	r2,-8(fp)
 2015c5c:	10800303 	ldbu	r2,12(r2)
 2015c60:	10803fcc 	andi	r2,r2,255
 2015c64:	108002a0 	cmpeqi	r2,r2,10
 2015c68:	1000051e 	bne	r2,zero,2015c80 <dhcp_t1_timeout+0x5c>
      (dhcp->state == DHCP_RENEWING)) {
 2015c6c:	e0bffe17 	ldw	r2,-8(fp)
 2015c70:	10800303 	ldbu	r2,12(r2)
static void
dhcp_t1_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 2015c74:	10803fcc 	andi	r2,r2,255
 2015c78:	10800158 	cmpnei	r2,r2,5
 2015c7c:	1000021e 	bne	r2,zero,2015c88 <dhcp_t1_timeout+0x64>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_RENEWING, not DHCP_BOUND */
    dhcp_renew(netif);
 2015c80:	e13fff17 	ldw	r4,-4(fp)
 2015c84:	2016a400 	call	2016a40 <dhcp_renew>
  }
}
 2015c88:	0001883a 	nop
 2015c8c:	e037883a 	mov	sp,fp
 2015c90:	dfc00117 	ldw	ra,4(sp)
 2015c94:	df000017 	ldw	fp,0(sp)
 2015c98:	dec00204 	addi	sp,sp,8
 2015c9c:	f800283a 	ret

02015ca0 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 2015ca0:	defffc04 	addi	sp,sp,-16
 2015ca4:	dfc00315 	stw	ra,12(sp)
 2015ca8:	df000215 	stw	fp,8(sp)
 2015cac:	df000204 	addi	fp,sp,8
 2015cb0:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 2015cb4:	e0bfff17 	ldw	r2,-4(fp)
 2015cb8:	10800a17 	ldw	r2,40(r2)
 2015cbc:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 2015cc0:	e0bffe17 	ldw	r2,-8(fp)
 2015cc4:	10800303 	ldbu	r2,12(r2)
 2015cc8:	10803fcc 	andi	r2,r2,255
 2015ccc:	10800060 	cmpeqi	r2,r2,1
 2015cd0:	10000a1e 	bne	r2,zero,2015cfc <dhcp_t2_timeout+0x5c>
 2015cd4:	e0bffe17 	ldw	r2,-8(fp)
 2015cd8:	10800303 	ldbu	r2,12(r2)
 2015cdc:	10803fcc 	andi	r2,r2,255
 2015ce0:	108002a0 	cmpeqi	r2,r2,10
 2015ce4:	1000051e 	bne	r2,zero,2015cfc <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_RENEWING)) {
 2015ce8:	e0bffe17 	ldw	r2,-8(fp)
 2015cec:	10800303 	ldbu	r2,12(r2)
static void
dhcp_t2_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
 2015cf0:	10803fcc 	andi	r2,r2,255
 2015cf4:	10800158 	cmpnei	r2,r2,5
 2015cf8:	1000021e 	bne	r2,zero,2015d04 <dhcp_t2_timeout+0x64>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_REBINDING, not DHCP_BOUND */
    dhcp_rebind(netif);
 2015cfc:	e13fff17 	ldw	r4,-4(fp)
 2015d00:	2016ba40 	call	2016ba4 <dhcp_rebind>
  }
}
 2015d04:	0001883a 	nop
 2015d08:	e037883a 	mov	sp,fp
 2015d0c:	dfc00117 	ldw	ra,4(sp)
 2015d10:	df000017 	ldw	fp,0(sp)
 2015d14:	dec00204 	addi	sp,sp,8
 2015d18:	f800283a 	ret

02015d1c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 2015d1c:	defffd04 	addi	sp,sp,-12
 2015d20:	df000215 	stw	fp,8(sp)
 2015d24:	df000204 	addi	fp,sp,8
 2015d28:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 2015d2c:	e0bfff17 	ldw	r2,-4(fp)
 2015d30:	10800a17 	ldw	r2,40(r2)
 2015d34:	e0bffe15 	stw	r2,-8(fp)
#if LWIP_DNS
  u8_t n;
#endif /* LWIP_DNS */

  /* clear options we might not get from the ACK */
  ip_addr_set_zero(&dhcp->offered_sn_mask);
 2015d38:	e0bffe17 	ldw	r2,-8(fp)
 2015d3c:	10000a15 	stw	zero,40(r2)
  ip_addr_set_zero(&dhcp->offered_gw_addr);
 2015d40:	e0bffe17 	ldw	r2,-8(fp)
 2015d44:	10000b15 	stw	zero,44(r2)
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 2015d48:	008085b4 	movhi	r2,534
 2015d4c:	10885504 	addi	r2,r2,8532
 2015d50:	108000c3 	ldbu	r2,3(r2)
 2015d54:	10803fcc 	andi	r2,r2,255
 2015d58:	10000526 	beq	r2,zero,2015d70 <dhcp_handle_ack+0x54>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 2015d5c:	008085b4 	movhi	r2,534
 2015d60:	10885804 	addi	r2,r2,8544
 2015d64:	10c00317 	ldw	r3,12(r2)
 2015d68:	e0bffe17 	ldw	r2,-8(fp)
 2015d6c:	10c00c15 	stw	r3,48(r2)
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 2015d70:	008085b4 	movhi	r2,534
 2015d74:	10885504 	addi	r2,r2,8532
 2015d78:	10800103 	ldbu	r2,4(r2)
 2015d7c:	10803fcc 	andi	r2,r2,255
 2015d80:	10000626 	beq	r2,zero,2015d9c <dhcp_handle_ack+0x80>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 2015d84:	008085b4 	movhi	r2,534
 2015d88:	10885804 	addi	r2,r2,8544
 2015d8c:	10c00417 	ldw	r3,16(r2)
 2015d90:	e0bffe17 	ldw	r2,-8(fp)
 2015d94:	10c00d15 	stw	r3,52(r2)
 2015d98:	00000506 	br	2015db0 <dhcp_handle_ack+0x94>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 2015d9c:	e0bffe17 	ldw	r2,-8(fp)
 2015da0:	10800c17 	ldw	r2,48(r2)
 2015da4:	1006d07a 	srli	r3,r2,1
 2015da8:	e0bffe17 	ldw	r2,-8(fp)
 2015dac:	10c00d15 	stw	r3,52(r2)
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 2015db0:	008085b4 	movhi	r2,534
 2015db4:	10885504 	addi	r2,r2,8532
 2015db8:	10800143 	ldbu	r2,5(r2)
 2015dbc:	10803fcc 	andi	r2,r2,255
 2015dc0:	10000626 	beq	r2,zero,2015ddc <dhcp_handle_ack+0xc0>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 2015dc4:	008085b4 	movhi	r2,534
 2015dc8:	10885804 	addi	r2,r2,8544
 2015dcc:	10c00517 	ldw	r3,20(r2)
 2015dd0:	e0bffe17 	ldw	r2,-8(fp)
 2015dd4:	10c00e15 	stw	r3,56(r2)
 2015dd8:	00000406 	br	2015dec <dhcp_handle_ack+0xd0>
  } else {
    /* calculate safe periods for rebinding */
    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
 2015ddc:	e0bffe17 	ldw	r2,-8(fp)
 2015de0:	10c00c17 	ldw	r3,48(r2)
 2015de4:	e0bffe17 	ldw	r2,-8(fp)
 2015de8:	10c00e15 	stw	r3,56(r2)
  }

  /* (y)our internet address */
  ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 2015dec:	e0bffe17 	ldw	r2,-8(fp)
 2015df0:	10800217 	ldw	r2,8(r2)
 2015df4:	10c00403 	ldbu	r3,16(r2)
 2015df8:	11000443 	ldbu	r4,17(r2)
 2015dfc:	2008923a 	slli	r4,r4,8
 2015e00:	20c6b03a 	or	r3,r4,r3
 2015e04:	11000483 	ldbu	r4,18(r2)
 2015e08:	2008943a 	slli	r4,r4,16
 2015e0c:	20c6b03a 	or	r3,r4,r3
 2015e10:	108004c3 	ldbu	r2,19(r2)
 2015e14:	1004963a 	slli	r2,r2,24
 2015e18:	10c4b03a 	or	r2,r2,r3
 2015e1c:	1007883a 	mov	r3,r2
 2015e20:	e0bffe17 	ldw	r2,-8(fp)
 2015e24:	10c00915 	stw	r3,36(r2)
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 2015e28:	008085b4 	movhi	r2,534
 2015e2c:	10885504 	addi	r2,r2,8532
 2015e30:	10800183 	ldbu	r2,6(r2)
 2015e34:	10803fcc 	andi	r2,r2,255
 2015e38:	10001b26 	beq	r2,zero,2015ea8 <dhcp_handle_ack+0x18c>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 2015e3c:	008085b4 	movhi	r2,534
 2015e40:	10885804 	addi	r2,r2,8544
 2015e44:	10800617 	ldw	r2,24(r2)
 2015e48:	1006d63a 	srli	r3,r2,24
 2015e4c:	008085b4 	movhi	r2,534
 2015e50:	10885804 	addi	r2,r2,8544
 2015e54:	10800617 	ldw	r2,24(r2)
 2015e58:	1004d23a 	srli	r2,r2,8
 2015e5c:	10bfc00c 	andi	r2,r2,65280
 2015e60:	1886b03a 	or	r3,r3,r2
 2015e64:	008085b4 	movhi	r2,534
 2015e68:	10885804 	addi	r2,r2,8544
 2015e6c:	10800617 	ldw	r2,24(r2)
 2015e70:	10bfc00c 	andi	r2,r2,65280
 2015e74:	1004923a 	slli	r2,r2,8
 2015e78:	1886b03a 	or	r3,r3,r2
 2015e7c:	008085b4 	movhi	r2,534
 2015e80:	10885804 	addi	r2,r2,8544
 2015e84:	10800617 	ldw	r2,24(r2)
 2015e88:	1004963a 	slli	r2,r2,24
 2015e8c:	1886b03a 	or	r3,r3,r2
 2015e90:	e0bffe17 	ldw	r2,-8(fp)
 2015e94:	10c00a15 	stw	r3,40(r2)
    dhcp->subnet_mask_given = 1;
 2015e98:	e0bffe17 	ldw	r2,-8(fp)
 2015e9c:	00c00044 	movi	r3,1
 2015ea0:	10c00385 	stb	r3,14(r2)
 2015ea4:	00000206 	br	2015eb0 <dhcp_handle_ack+0x194>
  } else {
    dhcp->subnet_mask_given = 0;
 2015ea8:	e0bffe17 	ldw	r2,-8(fp)
 2015eac:	10000385 	stb	zero,14(r2)
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 2015eb0:	008085b4 	movhi	r2,534
 2015eb4:	10885504 	addi	r2,r2,8532
 2015eb8:	108001c3 	ldbu	r2,7(r2)
 2015ebc:	10803fcc 	andi	r2,r2,255
 2015ec0:	10001726 	beq	r2,zero,2015f20 <dhcp_handle_ack+0x204>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 2015ec4:	008085b4 	movhi	r2,534
 2015ec8:	10885804 	addi	r2,r2,8544
 2015ecc:	10800717 	ldw	r2,28(r2)
 2015ed0:	1006d63a 	srli	r3,r2,24
 2015ed4:	008085b4 	movhi	r2,534
 2015ed8:	10885804 	addi	r2,r2,8544
 2015edc:	10800717 	ldw	r2,28(r2)
 2015ee0:	1004d23a 	srli	r2,r2,8
 2015ee4:	10bfc00c 	andi	r2,r2,65280
 2015ee8:	1886b03a 	or	r3,r3,r2
 2015eec:	008085b4 	movhi	r2,534
 2015ef0:	10885804 	addi	r2,r2,8544
 2015ef4:	10800717 	ldw	r2,28(r2)
 2015ef8:	10bfc00c 	andi	r2,r2,65280
 2015efc:	1004923a 	slli	r2,r2,8
 2015f00:	1886b03a 	or	r3,r3,r2
 2015f04:	008085b4 	movhi	r2,534
 2015f08:	10885804 	addi	r2,r2,8544
 2015f0c:	10800717 	ldw	r2,28(r2)
 2015f10:	1004963a 	slli	r2,r2,24
 2015f14:	1886b03a 	or	r3,r3,r2
 2015f18:	e0bffe17 	ldw	r2,-8(fp)
 2015f1c:	10c00b15 	stw	r3,44(r2)
    ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
    n++;
  }
#endif /* LWIP_DNS */
}
 2015f20:	0001883a 	nop
 2015f24:	e037883a 	mov	sp,fp
 2015f28:	df000017 	ldw	fp,0(sp)
 2015f2c:	dec00104 	addi	sp,sp,4
 2015f30:	f800283a 	ret

02015f34 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
 2015f34:	defffc04 	addi	sp,sp,-16
 2015f38:	dfc00315 	stw	ra,12(sp)
 2015f3c:	df000215 	stw	fp,8(sp)
 2015f40:	df000204 	addi	fp,sp,8
 2015f44:	e13ffe15 	stw	r4,-8(fp)
 2015f48:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  LWIP_ASSERT("netif already has a struct dhcp set", netif->dhcp == NULL);

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 2015f4c:	01800f04 	movi	r6,60
 2015f50:	000b883a 	mov	r5,zero
 2015f54:	e13fff17 	ldw	r4,-4(fp)
 2015f58:	2005fa00 	call	2005fa0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  netif->dhcp = dhcp;
 2015f5c:	e0bffe17 	ldw	r2,-8(fp)
 2015f60:	e0ffff17 	ldw	r3,-4(fp)
 2015f64:	10c00a15 	stw	r3,40(r2)
}
 2015f68:	0001883a 	nop
 2015f6c:	e037883a 	mov	sp,fp
 2015f70:	dfc00117 	ldw	ra,4(sp)
 2015f74:	df000017 	ldw	fp,0(sp)
 2015f78:	dec00204 	addi	sp,sp,8
 2015f7c:	f800283a 	ret

02015f80 <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
 2015f80:	defffd04 	addi	sp,sp,-12
 2015f84:	dfc00215 	stw	ra,8(sp)
 2015f88:	df000115 	stw	fp,4(sp)
 2015f8c:	df000104 	addi	fp,sp,4
 2015f90:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("netif != NULL", netif != NULL);

  if (netif->dhcp != NULL) {
 2015f94:	e0bfff17 	ldw	r2,-4(fp)
 2015f98:	10800a17 	ldw	r2,40(r2)
 2015f9c:	10000626 	beq	r2,zero,2015fb8 <dhcp_cleanup+0x38>
    mem_free(netif->dhcp);
 2015fa0:	e0bfff17 	ldw	r2,-4(fp)
 2015fa4:	10800a17 	ldw	r2,40(r2)
 2015fa8:	1009883a 	mov	r4,r2
 2015fac:	20191580 	call	2019158 <mem_free>
    netif->dhcp = NULL;
 2015fb0:	e0bfff17 	ldw	r2,-4(fp)
 2015fb4:	10000a15 	stw	zero,40(r2)
  }
}
 2015fb8:	0001883a 	nop
 2015fbc:	e037883a 	mov	sp,fp
 2015fc0:	dfc00117 	ldw	ra,4(sp)
 2015fc4:	df000017 	ldw	fp,0(sp)
 2015fc8:	dec00204 	addi	sp,sp,8
 2015fcc:	f800283a 	ret

02015fd0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 2015fd0:	defffb04 	addi	sp,sp,-20
 2015fd4:	dfc00415 	stw	ra,16(sp)
 2015fd8:	df000315 	stw	fp,12(sp)
 2015fdc:	df000304 	addi	fp,sp,12
 2015fe0:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp;
  err_t result = ERR_OK;
 2015fe4:	e03ffe05 	stb	zero,-8(fp)

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 2015fe8:	e0bfff17 	ldw	r2,-4(fp)
 2015fec:	1000091e 	bne	r2,zero,2016014 <dhcp_start+0x44>
 2015ff0:	01c08134 	movhi	r7,516
 2015ff4:	39c47d04 	addi	r7,r7,4596
 2015ff8:	0180a144 	movi	r6,645
 2015ffc:	01408134 	movhi	r5,516
 2016000:	29448304 	addi	r5,r5,4620
 2016004:	01008134 	movhi	r4,516
 2016008:	21048704 	addi	r4,r4,4636
 201600c:	20009e40 	call	20009e4 <printf>
 2016010:	003fff06 	br	2016010 <__alt_mem_mem_0+0xfcff6010>
  dhcp = netif->dhcp;
 2016014:	e0bfff17 	ldw	r2,-4(fp)
 2016018:	10800a17 	ldw	r2,40(r2)
 201601c:	e0bffd15 	stw	r2,-12(fp)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Remove the flag that says this netif is handled by DHCP,
     it is set when we succeeded starting. */
  netif->flags &= ~NETIF_FLAG_DHCP;
 2016020:	e0bfff17 	ldw	r2,-4(fp)
 2016024:	10c00e43 	ldbu	r3,57(r2)
 2016028:	00bffdc4 	movi	r2,-9
 201602c:	1884703a 	and	r2,r3,r2
 2016030:	1007883a 	mov	r3,r2
 2016034:	e0bfff17 	ldw	r2,-4(fp)
 2016038:	10c00e45 	stb	r3,57(r2)

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
 201603c:	e0bfff17 	ldw	r2,-4(fp)
 2016040:	10800e43 	ldbu	r2,57(r2)
 2016044:	10803fcc 	andi	r2,r2,255
 2016048:	1080080c 	andi	r2,r2,32
 201604c:	1000021e 	bne	r2,zero,2016058 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
    return ERR_ARG;
 2016050:	00bffc84 	movi	r2,-14
 2016054:	00005406 	br	20161a8 <dhcp_start+0x1d8>
  }

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 2016058:	e0bfff17 	ldw	r2,-4(fp)
 201605c:	10800c0b 	ldhu	r2,48(r2)
 2016060:	10bfffcc 	andi	r2,r2,65535
 2016064:	10809028 	cmpgeui	r2,r2,576
 2016068:	1000021e 	bne	r2,zero,2016074 <dhcp_start+0xa4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 201606c:	00bfffc4 	movi	r2,-1
 2016070:	00004d06 	br	20161a8 <dhcp_start+0x1d8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 2016074:	e0bffd17 	ldw	r2,-12(fp)
 2016078:	10000b1e 	bne	r2,zero,20160a8 <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 201607c:	01000f04 	movi	r4,60
 2016080:	201956c0 	call	201956c <mem_malloc>
 2016084:	e0bffd15 	stw	r2,-12(fp)
    if (dhcp == NULL) {
 2016088:	e0bffd17 	ldw	r2,-12(fp)
 201608c:	1000021e 	bne	r2,zero,2016098 <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 2016090:	00bfffc4 	movi	r2,-1
 2016094:	00004406 	br	20161a8 <dhcp_start+0x1d8>
    }
    /* store this dhcp client in the netif */
    netif->dhcp = dhcp;
 2016098:	e0bfff17 	ldw	r2,-4(fp)
 201609c:	e0fffd17 	ldw	r3,-12(fp)
 20160a0:	10c00a15 	stw	r3,40(r2)
 20160a4:	00000706 	br	20160c4 <dhcp_start+0xf4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    if (dhcp->pcb != NULL) {
 20160a8:	e0bffd17 	ldw	r2,-12(fp)
 20160ac:	10800117 	ldw	r2,4(r2)
 20160b0:	10000426 	beq	r2,zero,20160c4 <dhcp_start+0xf4>
      udp_remove(dhcp->pcb);
 20160b4:	e0bffd17 	ldw	r2,-12(fp)
 20160b8:	10800117 	ldw	r2,4(r2)
 20160bc:	1009883a 	mov	r4,r2
 20160c0:	20229340 	call	2022934 <udp_remove>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  }
    
  /* clear the previous IP assignment */
  dhcp_clear_assignment(netif);
 20160c4:	e13fff17 	ldw	r4,-4(fp)
 20160c8:	20154940 	call	2015494 <dhcp_clear_assignment>
  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 20160cc:	01800f04 	movi	r6,60
 20160d0:	000b883a 	mov	r5,zero
 20160d4:	e13ffd17 	ldw	r4,-12(fp)
 20160d8:	2005fa00 	call	2005fa0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
 20160dc:	20229d40 	call	20229d4 <udp_new>
 20160e0:	1007883a 	mov	r3,r2
 20160e4:	e0bffd17 	ldw	r2,-12(fp)
 20160e8:	10c00115 	stw	r3,4(r2)
  if (dhcp->pcb == NULL) {
 20160ec:	e0bffd17 	ldw	r2,-12(fp)
 20160f0:	10800117 	ldw	r2,4(r2)
 20160f4:	1000021e 	bne	r2,zero,2016100 <dhcp_start+0x130>
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
 20160f8:	00bfffc4 	movi	r2,-1
 20160fc:	00002a06 	br	20161a8 <dhcp_start+0x1d8>
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
 2016100:	e0bffd17 	ldw	r2,-12(fp)
 2016104:	10800117 	ldw	r2,4(r2)
 2016108:	e0fffd17 	ldw	r3,-12(fp)
 201610c:	18c00117 	ldw	r3,4(r3)
 2016110:	18c00203 	ldbu	r3,8(r3)
 2016114:	18c00814 	ori	r3,r3,32
 2016118:	10c00205 	stb	r3,8(r2)
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 201611c:	e0bffd17 	ldw	r2,-12(fp)
 2016120:	10800117 	ldw	r2,4(r2)
 2016124:	01801104 	movi	r6,68
 2016128:	d1600d04 	addi	r5,gp,-32716
 201612c:	1009883a 	mov	r4,r2
 2016130:	202263c0 	call	202263c <udp_bind>
  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 2016134:	e0bffd17 	ldw	r2,-12(fp)
 2016138:	10800117 	ldw	r2,4(r2)
 201613c:	018010c4 	movi	r6,67
 2016140:	d1600d04 	addi	r5,gp,-32716
 2016144:	1009883a 	mov	r4,r2
 2016148:	20227980 	call	2022798 <udp_connect>
  /* set up the recv callback and argument */
  udp_recv(dhcp->pcb, dhcp_recv, netif);
 201614c:	e0bffd17 	ldw	r2,-12(fp)
 2016150:	10800117 	ldw	r2,4(r2)
 2016154:	e1bfff17 	ldw	r6,-4(fp)
 2016158:	01408074 	movhi	r5,513
 201615c:	295f6004 	addi	r5,r5,32128
 2016160:	1009883a 	mov	r4,r2
 2016164:	20228f00 	call	20228f0 <udp_recv>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 2016168:	e13fff17 	ldw	r4,-4(fp)
 201616c:	20166140 	call	2016614 <dhcp_discover>
 2016170:	e0bffe05 	stb	r2,-8(fp)
  if (result != ERR_OK) {
 2016174:	e0bffe07 	ldb	r2,-8(fp)
 2016178:	10000426 	beq	r2,zero,201618c <dhcp_start+0x1bc>
    /* free resources allocated above */
    dhcp_stop(netif);
 201617c:	e13fff17 	ldw	r4,-4(fp)
 2016180:	20170480 	call	2017048 <dhcp_stop>
    return ERR_MEM;
 2016184:	00bfffc4 	movi	r2,-1
 2016188:	00000706 	br	20161a8 <dhcp_start+0x1d8>
  }
  /* Set the flag that says this netif is handled by DHCP. */
  netif->flags |= NETIF_FLAG_DHCP;
 201618c:	e0bfff17 	ldw	r2,-4(fp)
 2016190:	10800e43 	ldbu	r2,57(r2)
 2016194:	10800214 	ori	r2,r2,8
 2016198:	1007883a 	mov	r3,r2
 201619c:	e0bfff17 	ldw	r2,-4(fp)
 20161a0:	10c00e45 	stb	r3,57(r2)
  return result;
 20161a4:	e0bffe03 	ldbu	r2,-8(fp)
}
 20161a8:	e037883a 	mov	sp,fp
 20161ac:	dfc00117 	ldw	ra,4(sp)
 20161b0:	df000017 	ldw	fp,0(sp)
 20161b4:	dec00204 	addi	sp,sp,8
 20161b8:	f800283a 	ret

020161bc <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
 20161bc:	deffeb04 	addi	sp,sp,-84
 20161c0:	dfc01415 	stw	ra,80(sp)
 20161c4:	df001315 	stw	fp,76(sp)
 20161c8:	df001304 	addi	fp,sp,76
 20161cc:	e13fff15 	stw	r4,-4(fp)
  struct dhcp dhcp;
  err_t result = ERR_OK;
 20161d0:	e03fef05 	stb	zero,-68(fp)
  struct udp_pcb *pcb;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 20161d4:	e0bfff17 	ldw	r2,-4(fp)
 20161d8:	1000091e 	bne	r2,zero,2016200 <dhcp_inform+0x44>
 20161dc:	01c08134 	movhi	r7,516
 20161e0:	39c47d04 	addi	r7,r7,4596
 20161e4:	0180b6c4 	movi	r6,731
 20161e8:	01408134 	movhi	r5,516
 20161ec:	29448304 	addi	r5,r5,4620
 20161f0:	01008134 	movhi	r4,516
 20161f4:	21048704 	addi	r4,r4,4636
 20161f8:	20009e40 	call	20009e4 <printf>
 20161fc:	003fff06 	br	20161fc <__alt_mem_mem_0+0xfcff61fc>

  memset(&dhcp, 0, sizeof(struct dhcp));
 2016200:	e0bff004 	addi	r2,fp,-64
 2016204:	01800f04 	movi	r6,60
 2016208:	000b883a 	mov	r5,zero
 201620c:	1009883a 	mov	r4,r2
 2016210:	2005fa00 	call	2005fa0 <memset>
  dhcp_set_state(&dhcp, DHCP_INFORM);
 2016214:	e0bff004 	addi	r2,fp,-64
 2016218:	01400204 	movi	r5,8
 201621c:	1009883a 	mov	r4,r2
 2016220:	20171000 	call	2017100 <dhcp_set_state>

  if ((netif->dhcp != NULL) && (netif->dhcp->pcb != NULL)) {
 2016224:	e0bfff17 	ldw	r2,-4(fp)
 2016228:	10800a17 	ldw	r2,40(r2)
 201622c:	10000926 	beq	r2,zero,2016254 <dhcp_inform+0x98>
 2016230:	e0bfff17 	ldw	r2,-4(fp)
 2016234:	10800a17 	ldw	r2,40(r2)
 2016238:	10800117 	ldw	r2,4(r2)
 201623c:	10000526 	beq	r2,zero,2016254 <dhcp_inform+0x98>
    /* re-use existing pcb */
    pcb = netif->dhcp->pcb;
 2016240:	e0bfff17 	ldw	r2,-4(fp)
 2016244:	10800a17 	ldw	r2,40(r2)
 2016248:	10800117 	ldw	r2,4(r2)
 201624c:	e0bfee15 	stw	r2,-72(fp)
 2016250:	00001006 	br	2016294 <dhcp_inform+0xd8>
  } else {
    pcb = udp_new();
 2016254:	20229d40 	call	20229d4 <udp_new>
 2016258:	e0bfee15 	stw	r2,-72(fp)
    if (pcb == NULL) {
 201625c:	e0bfee17 	ldw	r2,-72(fp)
 2016260:	10003b26 	beq	r2,zero,2016350 <dhcp_inform+0x194>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
      return;
    }
    dhcp.pcb = pcb;
 2016264:	e0bfee17 	ldw	r2,-72(fp)
 2016268:	e0bff115 	stw	r2,-60(fp)
    ip_set_option(dhcp.pcb, SOF_BROADCAST);
 201626c:	e0bff117 	ldw	r2,-60(fp)
 2016270:	e0fff117 	ldw	r3,-60(fp)
 2016274:	18c00203 	ldbu	r3,8(r3)
 2016278:	18c00814 	ori	r3,r3,32
 201627c:	10c00205 	stb	r3,8(r2)
    udp_bind(dhcp.pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 2016280:	e0bff117 	ldw	r2,-60(fp)
 2016284:	01801104 	movi	r6,68
 2016288:	d1600d04 	addi	r5,gp,-32716
 201628c:	1009883a 	mov	r4,r2
 2016290:	202263c0 	call	202263c <udp_bind>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
  }
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
 2016294:	e0bff004 	addi	r2,fp,-64
 2016298:	01800204 	movi	r6,8
 201629c:	100b883a 	mov	r5,r2
 20162a0:	e13fff17 	ldw	r4,-4(fp)
 20162a4:	20180d80 	call	20180d8 <dhcp_create_msg>
 20162a8:	e0bfef05 	stb	r2,-68(fp)
  if (result == ERR_OK) {
 20162ac:	e0bfef07 	ldb	r2,-68(fp)
 20162b0:	1000211e 	bne	r2,zero,2016338 <dhcp_inform+0x17c>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 20162b4:	e0bff004 	addi	r2,fp,-64
 20162b8:	01800084 	movi	r6,2
 20162bc:	01400e44 	movi	r5,57
 20162c0:	1009883a 	mov	r4,r2
 20162c4:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
 20162c8:	e0bfff17 	ldw	r2,-4(fp)
 20162cc:	10800c0b 	ldhu	r2,48(r2)
 20162d0:	10ffffcc 	andi	r3,r2,65535
 20162d4:	e0bff004 	addi	r2,fp,-64
 20162d8:	180b883a 	mov	r5,r3
 20162dc:	1009883a 	mov	r4,r2
 20162e0:	20172580 	call	2017258 <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
 20162e4:	e0bff004 	addi	r2,fp,-64
 20162e8:	1009883a 	mov	r4,r2
 20162ec:	20186e00 	call	20186e0 <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
 20162f0:	e0fff417 	ldw	r3,-48(fp)
 20162f4:	e0bff60b 	ldhu	r2,-40(fp)
 20162f8:	10803c04 	addi	r2,r2,240
 20162fc:	10bfffcc 	andi	r2,r2,65535
 2016300:	100b883a 	mov	r5,r2
 2016304:	1809883a 	mov	r4,r3
 2016308:	201a7100 	call	201a710 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
    udp_sendto_if(pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 201630c:	e0fff417 	ldw	r3,-48(fp)
 2016310:	e0bfff17 	ldw	r2,-4(fp)
 2016314:	d8800015 	stw	r2,0(sp)
 2016318:	01c010c4 	movi	r7,67
 201631c:	d1a00e04 	addi	r6,gp,-32712
 2016320:	180b883a 	mov	r5,r3
 2016324:	e13fee17 	ldw	r4,-72(fp)
 2016328:	20221880 	call	2022188 <udp_sendto_if>
    dhcp_delete_msg(&dhcp);
 201632c:	e0bff004 	addi	r2,fp,-64
 2016330:	1009883a 	mov	r4,r2
 2016334:	201865c0 	call	201865c <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  if (dhcp.pcb != NULL) {
 2016338:	e0bff117 	ldw	r2,-60(fp)
 201633c:	10000526 	beq	r2,zero,2016354 <dhcp_inform+0x198>
    /* otherwise, the existing pcb was used */
    udp_remove(dhcp.pcb);
 2016340:	e0bff117 	ldw	r2,-60(fp)
 2016344:	1009883a 	mov	r4,r2
 2016348:	20229340 	call	2022934 <udp_remove>
 201634c:	00000106 	br	2016354 <dhcp_inform+0x198>
    pcb = netif->dhcp->pcb;
  } else {
    pcb = udp_new();
    if (pcb == NULL) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
      return;
 2016350:	0001883a 	nop

  if (dhcp.pcb != NULL) {
    /* otherwise, the existing pcb was used */
    udp_remove(dhcp.pcb);
  }
}
 2016354:	e037883a 	mov	sp,fp
 2016358:	dfc00117 	ldw	ra,4(sp)
 201635c:	df000017 	ldw	fp,0(sp)
 2016360:	dec00204 	addi	sp,sp,8
 2016364:	f800283a 	ret

02016368 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 2016368:	defffc04 	addi	sp,sp,-16
 201636c:	dfc00315 	stw	ra,12(sp)
 2016370:	df000215 	stw	fp,8(sp)
 2016374:	df000204 	addi	fp,sp,8
 2016378:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 201637c:	e0bfff17 	ldw	r2,-4(fp)
 2016380:	10800a17 	ldw	r2,40(r2)
 2016384:	e0bffe15 	stw	r2,-8(fp)
  if (!dhcp)
 2016388:	e0bffe17 	ldw	r2,-8(fp)
 201638c:	10001826 	beq	r2,zero,20163f0 <dhcp_network_changed+0x88>
    return;
  switch (dhcp->state) {
 2016390:	e0bffe17 	ldw	r2,-8(fp)
 2016394:	10800303 	ldbu	r2,12(r2)
 2016398:	10803fcc 	andi	r2,r2,255
 201639c:	10c00188 	cmpgei	r3,r2,6
 20163a0:	1800041e 	bne	r3,zero,20163b4 <dhcp_network_changed+0x4c>
 20163a4:	10c000c8 	cmpgei	r3,r2,3
 20163a8:	1800041e 	bne	r3,zero,20163bc <dhcp_network_changed+0x54>
 20163ac:	10001226 	beq	r2,zero,20163f8 <dhcp_network_changed+0x90>
 20163b0:	00000906 	br	20163d8 <dhcp_network_changed+0x70>
 20163b4:	108002a0 	cmpeqi	r2,r2,10
 20163b8:	10000726 	beq	r2,zero,20163d8 <dhcp_network_changed+0x70>
  case DHCP_REBINDING:
  case DHCP_RENEWING:
  case DHCP_BOUND:
  case DHCP_REBOOTING:
    netif_set_down(netif);
 20163bc:	e13fff17 	ldw	r4,-4(fp)
 20163c0:	2019ecc0 	call	2019ecc <netif_set_down>
    dhcp->tries = 0;
 20163c4:	e0bffe17 	ldw	r2,-8(fp)
 20163c8:	10000345 	stb	zero,13(r2)
    dhcp_reboot(netif);
 20163cc:	e13fff17 	ldw	r4,-4(fp)
 20163d0:	2016d000 	call	2016d00 <dhcp_reboot>
    break;
 20163d4:	00000906 	br	20163fc <dhcp_network_changed+0x94>
  case DHCP_OFF:
    /* stay off */
    break;
  default:
    dhcp->tries = 0;
 20163d8:	e0bffe17 	ldw	r2,-8(fp)
 20163dc:	10000345 	stb	zero,13(r2)
    if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    dhcp_discover(netif);
 20163e0:	e13fff17 	ldw	r4,-4(fp)
 20163e4:	20166140 	call	2016614 <dhcp_discover>
    break;
 20163e8:	0001883a 	nop
 20163ec:	00000306 	br	20163fc <dhcp_network_changed+0x94>
void
dhcp_network_changed(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  if (!dhcp)
    return;
 20163f0:	0001883a 	nop
 20163f4:	00000106 	br	20163fc <dhcp_network_changed+0x94>
    dhcp->tries = 0;
    dhcp_reboot(netif);
    break;
  case DHCP_OFF:
    /* stay off */
    break;
 20163f8:	0001883a 	nop
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    dhcp_discover(netif);
    break;
  }
}
 20163fc:	e037883a 	mov	sp,fp
 2016400:	dfc00117 	ldw	ra,4(sp)
 2016404:	df000017 	ldw	fp,0(sp)
 2016408:	dec00204 	addi	sp,sp,8
 201640c:	f800283a 	ret

02016410 <dhcp_arp_reply>:
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
{
 2016410:	defffc04 	addi	sp,sp,-16
 2016414:	dfc00315 	stw	ra,12(sp)
 2016418:	df000215 	stw	fp,8(sp)
 201641c:	df000204 	addi	fp,sp,8
 2016420:	e13ffe15 	stw	r4,-8(fp)
 2016424:	e17fff15 	stw	r5,-4(fp)
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 2016428:	e0bffe17 	ldw	r2,-8(fp)
 201642c:	1000091e 	bne	r2,zero,2016454 <dhcp_arp_reply+0x44>
 2016430:	01c08134 	movhi	r7,516
 2016434:	39c47d04 	addi	r7,r7,4596
 2016438:	0180cc84 	movi	r6,818
 201643c:	01408134 	movhi	r5,516
 2016440:	29448304 	addi	r5,r5,4620
 2016444:	01008134 	movhi	r4,516
 2016448:	21048704 	addi	r4,r4,4636
 201644c:	20009e40 	call	20009e4 <printf>
 2016450:	003fff06 	br	2016450 <__alt_mem_mem_0+0xfcff6450>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
 2016454:	e0bffe17 	ldw	r2,-8(fp)
 2016458:	10800a17 	ldw	r2,40(r2)
 201645c:	10000e26 	beq	r2,zero,2016498 <dhcp_arp_reply+0x88>
 2016460:	e0bffe17 	ldw	r2,-8(fp)
 2016464:	10800a17 	ldw	r2,40(r2)
 2016468:	10800303 	ldbu	r2,12(r2)
 201646c:	10803fcc 	andi	r2,r2,255
 2016470:	10800218 	cmpnei	r2,r2,8
 2016474:	1000081e 	bne	r2,zero,2016498 <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
 2016478:	e0bfff17 	ldw	r2,-4(fp)
 201647c:	10c00017 	ldw	r3,0(r2)
 2016480:	e0bffe17 	ldw	r2,-8(fp)
 2016484:	10800a17 	ldw	r2,40(r2)
 2016488:	10800917 	ldw	r2,36(r2)
 201648c:	1880021e 	bne	r3,r2,2016498 <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 2016490:	e13ffe17 	ldw	r4,-8(fp)
 2016494:	20164b00 	call	20164b0 <dhcp_decline>
    }
  }
}
 2016498:	0001883a 	nop
 201649c:	e037883a 	mov	sp,fp
 20164a0:	dfc00117 	ldw	ra,4(sp)
 20164a4:	df000017 	ldw	fp,0(sp)
 20164a8:	dec00204 	addi	sp,sp,8
 20164ac:	f800283a 	ret

020164b0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 20164b0:	defffa04 	addi	sp,sp,-24
 20164b4:	dfc00515 	stw	ra,20(sp)
 20164b8:	df000415 	stw	fp,16(sp)
 20164bc:	df000404 	addi	fp,sp,16
 20164c0:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 20164c4:	e0bfff17 	ldw	r2,-4(fp)
 20164c8:	10800a17 	ldw	r2,40(r2)
 20164cc:	e0bffd15 	stw	r2,-12(fp)
  err_t result = ERR_OK;
 20164d0:	e03ffe05 	stb	zero,-8(fp)
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
 20164d4:	01400304 	movi	r5,12
 20164d8:	e13ffd17 	ldw	r4,-12(fp)
 20164dc:	20171000 	call	2017100 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 20164e0:	01800104 	movi	r6,4
 20164e4:	e17ffd17 	ldw	r5,-12(fp)
 20164e8:	e13fff17 	ldw	r4,-4(fp)
 20164ec:	20180d80 	call	20180d8 <dhcp_create_msg>
 20164f0:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 20164f4:	e0bffe07 	ldb	r2,-8(fp)
 20164f8:	1000301e 	bne	r2,zero,20165bc <dhcp_decline+0x10c>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 20164fc:	01800104 	movi	r6,4
 2016500:	01400c84 	movi	r5,50
 2016504:	e13ffd17 	ldw	r4,-12(fp)
 2016508:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 201650c:	e0bffd17 	ldw	r2,-12(fp)
 2016510:	10800917 	ldw	r2,36(r2)
 2016514:	1006d63a 	srli	r3,r2,24
 2016518:	e0bffd17 	ldw	r2,-12(fp)
 201651c:	10800917 	ldw	r2,36(r2)
 2016520:	1004d23a 	srli	r2,r2,8
 2016524:	10bfc00c 	andi	r2,r2,65280
 2016528:	1886b03a 	or	r3,r3,r2
 201652c:	e0bffd17 	ldw	r2,-12(fp)
 2016530:	10800917 	ldw	r2,36(r2)
 2016534:	10bfc00c 	andi	r2,r2,65280
 2016538:	1004923a 	slli	r2,r2,8
 201653c:	1886b03a 	or	r3,r3,r2
 2016540:	e0bffd17 	ldw	r2,-12(fp)
 2016544:	10800917 	ldw	r2,36(r2)
 2016548:	1004963a 	slli	r2,r2,24
 201654c:	1884b03a 	or	r2,r3,r2
 2016550:	100b883a 	mov	r5,r2
 2016554:	e13ffd17 	ldw	r4,-12(fp)
 2016558:	20172f00 	call	20172f0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 201655c:	e13ffd17 	ldw	r4,-12(fp)
 2016560:	20186e00 	call	20186e0 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 2016564:	e0bffd17 	ldw	r2,-12(fp)
 2016568:	10c00417 	ldw	r3,16(r2)
 201656c:	e0bffd17 	ldw	r2,-12(fp)
 2016570:	1080060b 	ldhu	r2,24(r2)
 2016574:	10803c04 	addi	r2,r2,240
 2016578:	10bfffcc 	andi	r2,r2,65535
 201657c:	100b883a 	mov	r5,r2
 2016580:	1809883a 	mov	r4,r3
 2016584:	201a7100 	call	201a710 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 2016588:	e0bffd17 	ldw	r2,-12(fp)
 201658c:	10c00117 	ldw	r3,4(r2)
 2016590:	e0bffd17 	ldw	r2,-12(fp)
 2016594:	11000417 	ldw	r4,16(r2)
 2016598:	e0bfff17 	ldw	r2,-4(fp)
 201659c:	d8800015 	stw	r2,0(sp)
 20165a0:	01c010c4 	movi	r7,67
 20165a4:	d1a00e04 	addi	r6,gp,-32712
 20165a8:	200b883a 	mov	r5,r4
 20165ac:	1809883a 	mov	r4,r3
 20165b0:	20221880 	call	2022188 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 20165b4:	e13ffd17 	ldw	r4,-12(fp)
 20165b8:	201865c0 	call	201865c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 20165bc:	e0bffd17 	ldw	r2,-12(fp)
 20165c0:	10800343 	ldbu	r2,13(r2)
 20165c4:	10800044 	addi	r2,r2,1
 20165c8:	1007883a 	mov	r3,r2
 20165cc:	e0bffd17 	ldw	r2,-12(fp)
 20165d0:	10c00345 	stb	r3,13(r2)
  msecs = 10*1000;
 20165d4:	0089c404 	movi	r2,10000
 20165d8:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 20165dc:	e0bffe8b 	ldhu	r2,-6(fp)
 20165e0:	10807cc4 	addi	r2,r2,499
 20165e4:	01407d04 	movi	r5,500
 20165e8:	1009883a 	mov	r4,r2
 20165ec:	200a9e40 	call	200a9e4 <__divsi3>
 20165f0:	1007883a 	mov	r3,r2
 20165f4:	e0bffd17 	ldw	r2,-12(fp)
 20165f8:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 20165fc:	e0bffe03 	ldbu	r2,-8(fp)
}
 2016600:	e037883a 	mov	sp,fp
 2016604:	dfc00117 	ldw	ra,4(sp)
 2016608:	df000017 	ldw	fp,0(sp)
 201660c:	dec00204 	addi	sp,sp,8
 2016610:	f800283a 	ret

02016614 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 2016614:	defffa04 	addi	sp,sp,-24
 2016618:	dfc00515 	stw	ra,20(sp)
 201661c:	df000415 	stw	fp,16(sp)
 2016620:	df000404 	addi	fp,sp,16
 2016624:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 2016628:	e0bfff17 	ldw	r2,-4(fp)
 201662c:	10800a17 	ldw	r2,40(r2)
 2016630:	e0bffd15 	stw	r2,-12(fp)
  err_t result = ERR_OK;
 2016634:	e03ffe05 	stb	zero,-8(fp)
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip_addr_set_any(&dhcp->offered_ip_addr);
 2016638:	e0bffd17 	ldw	r2,-12(fp)
 201663c:	10000915 	stw	zero,36(r2)
  dhcp_set_state(dhcp, DHCP_SELECTING);
 2016640:	01400184 	movi	r5,6
 2016644:	e13ffd17 	ldw	r4,-12(fp)
 2016648:	20171000 	call	2017100 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 201664c:	01800044 	movi	r6,1
 2016650:	e17ffd17 	ldw	r5,-12(fp)
 2016654:	e13fff17 	ldw	r4,-4(fp)
 2016658:	20180d80 	call	20180d8 <dhcp_create_msg>
 201665c:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 2016660:	e0bffe07 	ldb	r2,-8(fp)
 2016664:	1000321e 	bne	r2,zero,2016730 <dhcp_discover+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 2016668:	01800084 	movi	r6,2
 201666c:	01400e44 	movi	r5,57
 2016670:	e13ffd17 	ldw	r4,-12(fp)
 2016674:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 2016678:	e0bfff17 	ldw	r2,-4(fp)
 201667c:	10800c0b 	ldhu	r2,48(r2)
 2016680:	10bfffcc 	andi	r2,r2,65535
 2016684:	100b883a 	mov	r5,r2
 2016688:	e13ffd17 	ldw	r4,-12(fp)
 201668c:	20172580 	call	2017258 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
 2016690:	01800104 	movi	r6,4
 2016694:	01400dc4 	movi	r5,55
 2016698:	e13ffd17 	ldw	r4,-12(fp)
 201669c:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
 20166a0:	01400044 	movi	r5,1
 20166a4:	e13ffd17 	ldw	r4,-12(fp)
 20166a8:	20171f80 	call	20171f8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
 20166ac:	014000c4 	movi	r5,3
 20166b0:	e13ffd17 	ldw	r4,-12(fp)
 20166b4:	20171f80 	call	20171f8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
 20166b8:	01400704 	movi	r5,28
 20166bc:	e13ffd17 	ldw	r4,-12(fp)
 20166c0:	20171f80 	call	20171f8 <dhcp_option_byte>
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
 20166c4:	01400184 	movi	r5,6
 20166c8:	e13ffd17 	ldw	r4,-12(fp)
 20166cc:	20171f80 	call	20171f8 <dhcp_option_byte>

    dhcp_option_trailer(dhcp);
 20166d0:	e13ffd17 	ldw	r4,-12(fp)
 20166d4:	20186e00 	call	20186e0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 20166d8:	e0bffd17 	ldw	r2,-12(fp)
 20166dc:	10c00417 	ldw	r3,16(r2)
 20166e0:	e0bffd17 	ldw	r2,-12(fp)
 20166e4:	1080060b 	ldhu	r2,24(r2)
 20166e8:	10803c04 	addi	r2,r2,240
 20166ec:	10bfffcc 	andi	r2,r2,65535
 20166f0:	100b883a 	mov	r5,r2
 20166f4:	1809883a 	mov	r4,r3
 20166f8:	201a7100 	call	201a710 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 20166fc:	e0bffd17 	ldw	r2,-12(fp)
 2016700:	10c00117 	ldw	r3,4(r2)
 2016704:	e0bffd17 	ldw	r2,-12(fp)
 2016708:	11000417 	ldw	r4,16(r2)
 201670c:	e0bfff17 	ldw	r2,-4(fp)
 2016710:	d8800015 	stw	r2,0(sp)
 2016714:	01c010c4 	movi	r7,67
 2016718:	d1a00e04 	addi	r6,gp,-32712
 201671c:	200b883a 	mov	r5,r4
 2016720:	1809883a 	mov	r4,r3
 2016724:	20221880 	call	2022188 <udp_sendto_if>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 2016728:	e13ffd17 	ldw	r4,-12(fp)
 201672c:	201865c0 	call	201865c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 2016730:	e0bffd17 	ldw	r2,-12(fp)
 2016734:	10800343 	ldbu	r2,13(r2)
 2016738:	10800044 	addi	r2,r2,1
 201673c:	1007883a 	mov	r3,r2
 2016740:	e0bffd17 	ldw	r2,-12(fp)
 2016744:	10c00345 	stb	r3,13(r2)
  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 2016748:	e0bffd17 	ldw	r2,-12(fp)
 201674c:	10800343 	ldbu	r2,13(r2)
 2016750:	10803fcc 	andi	r2,r2,255
 2016754:	108001a8 	cmpgeui	r2,r2,6
 2016758:	1000061e 	bne	r2,zero,2016774 <dhcp_discover+0x160>
 201675c:	e0bffd17 	ldw	r2,-12(fp)
 2016760:	10800343 	ldbu	r2,13(r2)
 2016764:	10803fcc 	andi	r2,r2,255
 2016768:	00c0fa04 	movi	r3,1000
 201676c:	1884983a 	sll	r2,r3,r2
 2016770:	00000106 	br	2016778 <dhcp_discover+0x164>
 2016774:	00ba9804 	movi	r2,-5536
 2016778:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 201677c:	e0bffe8b 	ldhu	r2,-6(fp)
 2016780:	10807cc4 	addi	r2,r2,499
 2016784:	01407d04 	movi	r5,500
 2016788:	1009883a 	mov	r4,r2
 201678c:	200a9e40 	call	200a9e4 <__divsi3>
 2016790:	1007883a 	mov	r3,r2
 2016794:	e0bffd17 	ldw	r2,-12(fp)
 2016798:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 201679c:	e0bffe03 	ldbu	r2,-8(fp)
}
 20167a0:	e037883a 	mov	sp,fp
 20167a4:	dfc00117 	ldw	ra,4(sp)
 20167a8:	df000017 	ldw	fp,0(sp)
 20167ac:	dec00204 	addi	sp,sp,8
 20167b0:	f800283a 	ret

020167b4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 20167b4:	defff804 	addi	sp,sp,-32
 20167b8:	dfc00715 	stw	ra,28(sp)
 20167bc:	df000615 	stw	fp,24(sp)
 20167c0:	df000604 	addi	fp,sp,24
 20167c4:	e13fff15 	stw	r4,-4(fp)
  u32_t timeout;
  struct dhcp *dhcp;
  ip_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 20167c8:	e0bfff17 	ldw	r2,-4(fp)
 20167cc:	1000091e 	bne	r2,zero,20167f4 <dhcp_bind+0x40>
 20167d0:	01c08134 	movhi	r7,516
 20167d4:	39c47d04 	addi	r7,r7,4596
 20167d8:	0180ec44 	movi	r6,945
 20167dc:	01408134 	movhi	r5,516
 20167e0:	29449304 	addi	r5,r5,4684
 20167e4:	01008134 	movhi	r4,516
 20167e8:	21048704 	addi	r4,r4,4636
 20167ec:	20009e40 	call	20009e4 <printf>
 20167f0:	003fff06 	br	20167f0 <__alt_mem_mem_0+0xfcff67f0>
  dhcp = netif->dhcp;
 20167f4:	e0bfff17 	ldw	r2,-4(fp)
 20167f8:	10800a17 	ldw	r2,40(r2)
 20167fc:	e0bffb15 	stw	r2,-20(fp)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 2016800:	e0bffb17 	ldw	r2,-20(fp)
 2016804:	1000091e 	bne	r2,zero,201682c <dhcp_bind+0x78>
 2016808:	01c08134 	movhi	r7,516
 201680c:	39c47d04 	addi	r7,r7,4596
 2016810:	0180ecc4 	movi	r6,947
 2016814:	01408134 	movhi	r5,516
 2016818:	29449a04 	addi	r5,r5,4712
 201681c:	01008134 	movhi	r4,516
 2016820:	21048704 	addi	r4,r4,4636
 2016824:	20009e40 	call	20009e4 <printf>
 2016828:	003fff06 	br	2016828 <__alt_mem_mem_0+0xfcff6828>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 201682c:	e0bffb17 	ldw	r2,-20(fp)
 2016830:	10800d17 	ldw	r2,52(r2)
 2016834:	10bfffe0 	cmpeqi	r2,r2,-1
 2016838:	1000171e 	bne	r2,zero,2016898 <dhcp_bind+0xe4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 201683c:	e0bffb17 	ldw	r2,-20(fp)
 2016840:	10800d17 	ldw	r2,52(r2)
 2016844:	10800784 	addi	r2,r2,30
 2016848:	01400f04 	movi	r5,60
 201684c:	1009883a 	mov	r4,r2
 2016850:	200aadc0 	call	200aadc <__udivsi3>
 2016854:	e0bffa15 	stw	r2,-24(fp)
    if(timeout > 0xffff) {
 2016858:	e0bffa17 	ldw	r2,-24(fp)
 201685c:	00ffffd4 	movui	r3,65535
 2016860:	1880022e 	bgeu	r3,r2,201686c <dhcp_bind+0xb8>
      timeout = 0xffff;
 2016864:	00bfffd4 	movui	r2,65535
 2016868:	e0bffa15 	stw	r2,-24(fp)
    }
    dhcp->t1_timeout = (u16_t)timeout;
 201686c:	e0bffa17 	ldw	r2,-24(fp)
 2016870:	1007883a 	mov	r3,r2
 2016874:	e0bffb17 	ldw	r2,-20(fp)
 2016878:	10c0070d 	sth	r3,28(r2)
    if (dhcp->t1_timeout == 0) {
 201687c:	e0bffb17 	ldw	r2,-20(fp)
 2016880:	1080070b 	ldhu	r2,28(r2)
 2016884:	10bfffcc 	andi	r2,r2,65535
 2016888:	1000031e 	bne	r2,zero,2016898 <dhcp_bind+0xe4>
      dhcp->t1_timeout = 1;
 201688c:	e0bffb17 	ldw	r2,-20(fp)
 2016890:	00c00044 	movi	r3,1
 2016894:	10c0070d 	sth	r3,28(r2)
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 2016898:	e0bffb17 	ldw	r2,-20(fp)
 201689c:	10800e17 	ldw	r2,56(r2)
 20168a0:	10bfffe0 	cmpeqi	r2,r2,-1
 20168a4:	1000171e 	bne	r2,zero,2016904 <dhcp_bind+0x150>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 20168a8:	e0bffb17 	ldw	r2,-20(fp)
 20168ac:	10800e17 	ldw	r2,56(r2)
 20168b0:	10800784 	addi	r2,r2,30
 20168b4:	01400f04 	movi	r5,60
 20168b8:	1009883a 	mov	r4,r2
 20168bc:	200aadc0 	call	200aadc <__udivsi3>
 20168c0:	e0bffa15 	stw	r2,-24(fp)
    if(timeout > 0xffff) {
 20168c4:	e0bffa17 	ldw	r2,-24(fp)
 20168c8:	00ffffd4 	movui	r3,65535
 20168cc:	1880022e 	bgeu	r3,r2,20168d8 <dhcp_bind+0x124>
      timeout = 0xffff;
 20168d0:	00bfffd4 	movui	r2,65535
 20168d4:	e0bffa15 	stw	r2,-24(fp)
    }
    dhcp->t2_timeout = (u16_t)timeout;
 20168d8:	e0bffa17 	ldw	r2,-24(fp)
 20168dc:	1007883a 	mov	r3,r2
 20168e0:	e0bffb17 	ldw	r2,-20(fp)
 20168e4:	10c0078d 	sth	r3,30(r2)
    if (dhcp->t2_timeout == 0) {
 20168e8:	e0bffb17 	ldw	r2,-20(fp)
 20168ec:	1080078b 	ldhu	r2,30(r2)
 20168f0:	10bfffcc 	andi	r2,r2,65535
 20168f4:	1000031e 	bne	r2,zero,2016904 <dhcp_bind+0x150>
      dhcp->t2_timeout = 1;
 20168f8:	e0bffb17 	ldw	r2,-20(fp)
 20168fc:	00c00044 	movi	r3,1
 2016900:	10c0078d 	sth	r3,30(r2)
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 2016904:	e0bffb17 	ldw	r2,-20(fp)
 2016908:	10c0070b 	ldhu	r3,28(r2)
 201690c:	e0bffb17 	ldw	r2,-20(fp)
 2016910:	1080078b 	ldhu	r2,30(r2)
 2016914:	18ffffcc 	andi	r3,r3,65535
 2016918:	10bfffcc 	andi	r2,r2,65535
 201691c:	18800636 	bltu	r3,r2,2016938 <dhcp_bind+0x184>
 2016920:	e0bffb17 	ldw	r2,-20(fp)
 2016924:	1080078b 	ldhu	r2,30(r2)
 2016928:	10bfffcc 	andi	r2,r2,65535
 201692c:	10000226 	beq	r2,zero,2016938 <dhcp_bind+0x184>
    dhcp->t1_timeout = 0;
 2016930:	e0bffb17 	ldw	r2,-20(fp)
 2016934:	1000070d 	sth	zero,28(r2)
  }

  if (dhcp->subnet_mask_given) {
 2016938:	e0bffb17 	ldw	r2,-20(fp)
 201693c:	10800383 	ldbu	r2,14(r2)
 2016940:	10803fcc 	andi	r2,r2,255
 2016944:	10000426 	beq	r2,zero,2016958 <dhcp_bind+0x1a4>
    /* copy offered network mask */
    ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
 2016948:	e0bffb17 	ldw	r2,-20(fp)
 201694c:	10800a17 	ldw	r2,40(r2)
 2016950:	e0bffd15 	stw	r2,-12(fp)
 2016954:	00001506 	br	20169ac <dhcp_bind+0x1f8>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 2016958:	e0bffb17 	ldw	r2,-20(fp)
 201695c:	10800904 	addi	r2,r2,36
 2016960:	10800003 	ldbu	r2,0(r2)
 2016964:	e0bffc05 	stb	r2,-16(fp)
    if (first_octet <= 127) {
 2016968:	e0bffc03 	ldbu	r2,-16(fp)
 201696c:	10803fcc 	andi	r2,r2,255
 2016970:	1080201c 	xori	r2,r2,128
 2016974:	10bfe004 	addi	r2,r2,-128
 2016978:	10000316 	blt	r2,zero,2016988 <dhcp_bind+0x1d4>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 201697c:	00803fc4 	movi	r2,255
 2016980:	e0bffd15 	stw	r2,-12(fp)
 2016984:	00000906 	br	20169ac <dhcp_bind+0x1f8>
    } else if (first_octet >= 192) {
 2016988:	e0bffc03 	ldbu	r2,-16(fp)
 201698c:	10803030 	cmpltui	r2,r2,192
 2016990:	1000041e 	bne	r2,zero,20169a4 <dhcp_bind+0x1f0>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 2016994:	00804034 	movhi	r2,256
 2016998:	10bfffc4 	addi	r2,r2,-1
 201699c:	e0bffd15 	stw	r2,-12(fp)
 20169a0:	00000206 	br	20169ac <dhcp_bind+0x1f8>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 20169a4:	00bfffd4 	movui	r2,65535
 20169a8:	e0bffd15 	stw	r2,-12(fp)
    }
  }

  ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
 20169ac:	e0bffb17 	ldw	r2,-20(fp)
 20169b0:	10800b17 	ldw	r2,44(r2)
 20169b4:	e0bffe15 	stw	r2,-8(fp)
  /* gateway address not given? */
  if (ip_addr_isany(&gw_addr)) {
 20169b8:	e0bffe17 	ldw	r2,-8(fp)
 20169bc:	1000081e 	bne	r2,zero,20169e0 <dhcp_bind+0x22c>
    /* copy network address */
    ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 20169c0:	e0bffb17 	ldw	r2,-20(fp)
 20169c4:	10c00917 	ldw	r3,36(r2)
 20169c8:	e0bffd17 	ldw	r2,-12(fp)
 20169cc:	1884703a 	and	r2,r3,r2
 20169d0:	e0bffe15 	stw	r2,-8(fp)
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 20169d4:	e0bffe17 	ldw	r2,-8(fp)
 20169d8:	10804034 	orhi	r2,r2,256
 20169dc:	e0bffe15 	stw	r2,-8(fp)
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
 20169e0:	e0bffb17 	ldw	r2,-20(fp)
 20169e4:	10800904 	addi	r2,r2,36
 20169e8:	100b883a 	mov	r5,r2
 20169ec:	e13fff17 	ldw	r4,-4(fp)
 20169f0:	2019c380 	call	2019c38 <netif_set_ipaddr>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&sn_mask)));
  netif_set_netmask(netif, &sn_mask);
 20169f4:	e0bffd04 	addi	r2,fp,-12
 20169f8:	100b883a 	mov	r5,r2
 20169fc:	e13fff17 	ldw	r4,-4(fp)
 2016a00:	2019da80 	call	2019da8 <netif_set_netmask>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&gw_addr)));
  netif_set_gw(netif, &gw_addr);
 2016a04:	e0bffe04 	addi	r2,fp,-8
 2016a08:	100b883a 	mov	r5,r2
 2016a0c:	e13fff17 	ldw	r4,-4(fp)
 2016a10:	2019d600 	call	2019d60 <netif_set_gw>
  /* bring the interface up */
  netif_set_up(netif);
 2016a14:	e13fff17 	ldw	r4,-4(fp)
 2016a18:	2019e1c0 	call	2019e1c <netif_set_up>
  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_BOUND);
 2016a1c:	01400284 	movi	r5,10
 2016a20:	e13ffb17 	ldw	r4,-20(fp)
 2016a24:	20171000 	call	2017100 <dhcp_set_state>
}
 2016a28:	0001883a 	nop
 2016a2c:	e037883a 	mov	sp,fp
 2016a30:	dfc00117 	ldw	ra,4(sp)
 2016a34:	df000017 	ldw	fp,0(sp)
 2016a38:	dec00204 	addi	sp,sp,8
 2016a3c:	f800283a 	ret

02016a40 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 2016a40:	defffa04 	addi	sp,sp,-24
 2016a44:	dfc00515 	stw	ra,20(sp)
 2016a48:	df000415 	stw	fp,16(sp)
 2016a4c:	df000404 	addi	fp,sp,16
 2016a50:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 2016a54:	e0bfff17 	ldw	r2,-4(fp)
 2016a58:	10800a17 	ldw	r2,40(r2)
 2016a5c:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_RENEWING);
 2016a60:	01400144 	movi	r5,5
 2016a64:	e13ffd17 	ldw	r4,-12(fp)
 2016a68:	20171000 	call	2017100 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 2016a6c:	018000c4 	movi	r6,3
 2016a70:	e17ffd17 	ldw	r5,-12(fp)
 2016a74:	e13fff17 	ldw	r4,-4(fp)
 2016a78:	20180d80 	call	20180d8 <dhcp_create_msg>
 2016a7c:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 2016a80:	e0bffe07 	ldb	r2,-8(fp)
 2016a84:	1000271e 	bne	r2,zero,2016b24 <dhcp_renew+0xe4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 2016a88:	01800084 	movi	r6,2
 2016a8c:	01400e44 	movi	r5,57
 2016a90:	e13ffd17 	ldw	r4,-12(fp)
 2016a94:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 2016a98:	e0bfff17 	ldw	r2,-4(fp)
 2016a9c:	10800c0b 	ldhu	r2,48(r2)
 2016aa0:	10bfffcc 	andi	r2,r2,65535
 2016aa4:	100b883a 	mov	r5,r2
 2016aa8:	e13ffd17 	ldw	r4,-12(fp)
 2016aac:	20172580 	call	2017258 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
 2016ab0:	e17fff17 	ldw	r5,-4(fp)
 2016ab4:	e13ffd17 	ldw	r4,-12(fp)
 2016ab8:	20173fc0 	call	20173fc <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 2016abc:	e13ffd17 	ldw	r4,-12(fp)
 2016ac0:	20186e00 	call	20186e0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 2016ac4:	e0bffd17 	ldw	r2,-12(fp)
 2016ac8:	10c00417 	ldw	r3,16(r2)
 2016acc:	e0bffd17 	ldw	r2,-12(fp)
 2016ad0:	1080060b 	ldhu	r2,24(r2)
 2016ad4:	10803c04 	addi	r2,r2,240
 2016ad8:	10bfffcc 	andi	r2,r2,65535
 2016adc:	100b883a 	mov	r5,r2
 2016ae0:	1809883a 	mov	r4,r3
 2016ae4:	201a7100 	call	201a710 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 2016ae8:	e0bffd17 	ldw	r2,-12(fp)
 2016aec:	10c00117 	ldw	r3,4(r2)
 2016af0:	e0bffd17 	ldw	r2,-12(fp)
 2016af4:	11000417 	ldw	r4,16(r2)
 2016af8:	e0bffd17 	ldw	r2,-12(fp)
 2016afc:	11400804 	addi	r5,r2,32
 2016b00:	e0bfff17 	ldw	r2,-4(fp)
 2016b04:	d8800015 	stw	r2,0(sp)
 2016b08:	01c010c4 	movi	r7,67
 2016b0c:	280d883a 	mov	r6,r5
 2016b10:	200b883a 	mov	r5,r4
 2016b14:	1809883a 	mov	r4,r3
 2016b18:	20221880 	call	2022188 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 2016b1c:	e13ffd17 	ldw	r4,-12(fp)
 2016b20:	201865c0 	call	201865c <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 2016b24:	e0bffd17 	ldw	r2,-12(fp)
 2016b28:	10800343 	ldbu	r2,13(r2)
 2016b2c:	10800044 	addi	r2,r2,1
 2016b30:	1007883a 	mov	r3,r2
 2016b34:	e0bffd17 	ldw	r2,-12(fp)
 2016b38:	10c00345 	stb	r3,13(r2)
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 2016b3c:	e0bffd17 	ldw	r2,-12(fp)
 2016b40:	10800343 	ldbu	r2,13(r2)
 2016b44:	10803fcc 	andi	r2,r2,255
 2016b48:	108002a8 	cmpgeui	r2,r2,10
 2016b4c:	1000051e 	bne	r2,zero,2016b64 <dhcp_renew+0x124>
 2016b50:	e0bffd17 	ldw	r2,-12(fp)
 2016b54:	10800343 	ldbu	r2,13(r2)
 2016b58:	10803fcc 	andi	r2,r2,255
 2016b5c:	1081f424 	muli	r2,r2,2000
 2016b60:	00000106 	br	2016b68 <dhcp_renew+0x128>
 2016b64:	00938804 	movi	r2,20000
 2016b68:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 2016b6c:	e0bffe8b 	ldhu	r2,-6(fp)
 2016b70:	10807cc4 	addi	r2,r2,499
 2016b74:	01407d04 	movi	r5,500
 2016b78:	1009883a 	mov	r4,r2
 2016b7c:	200a9e40 	call	200a9e4 <__divsi3>
 2016b80:	1007883a 	mov	r3,r2
 2016b84:	e0bffd17 	ldw	r2,-12(fp)
 2016b88:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 2016b8c:	e0bffe03 	ldbu	r2,-8(fp)
}
 2016b90:	e037883a 	mov	sp,fp
 2016b94:	dfc00117 	ldw	ra,4(sp)
 2016b98:	df000017 	ldw	fp,0(sp)
 2016b9c:	dec00204 	addi	sp,sp,8
 2016ba0:	f800283a 	ret

02016ba4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 2016ba4:	defffa04 	addi	sp,sp,-24
 2016ba8:	dfc00515 	stw	ra,20(sp)
 2016bac:	df000415 	stw	fp,16(sp)
 2016bb0:	df000404 	addi	fp,sp,16
 2016bb4:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 2016bb8:	e0bfff17 	ldw	r2,-4(fp)
 2016bbc:	10800a17 	ldw	r2,40(r2)
 2016bc0:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_REBINDING);
 2016bc4:	01400104 	movi	r5,4
 2016bc8:	e13ffd17 	ldw	r4,-12(fp)
 2016bcc:	20171000 	call	2017100 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 2016bd0:	018000c4 	movi	r6,3
 2016bd4:	e17ffd17 	ldw	r5,-12(fp)
 2016bd8:	e13fff17 	ldw	r4,-4(fp)
 2016bdc:	20180d80 	call	20180d8 <dhcp_create_msg>
 2016be0:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 2016be4:	e0bffe07 	ldb	r2,-8(fp)
 2016be8:	1000251e 	bne	r2,zero,2016c80 <dhcp_rebind+0xdc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 2016bec:	01800084 	movi	r6,2
 2016bf0:	01400e44 	movi	r5,57
 2016bf4:	e13ffd17 	ldw	r4,-12(fp)
 2016bf8:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 2016bfc:	e0bfff17 	ldw	r2,-4(fp)
 2016c00:	10800c0b 	ldhu	r2,48(r2)
 2016c04:	10bfffcc 	andi	r2,r2,65535
 2016c08:	100b883a 	mov	r5,r2
 2016c0c:	e13ffd17 	ldw	r4,-12(fp)
 2016c10:	20172580 	call	2017258 <dhcp_option_short>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
 2016c14:	e17fff17 	ldw	r5,-4(fp)
 2016c18:	e13ffd17 	ldw	r4,-12(fp)
 2016c1c:	20173fc0 	call	20173fc <dhcp_option_hostname>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

    dhcp_option_trailer(dhcp);
 2016c20:	e13ffd17 	ldw	r4,-12(fp)
 2016c24:	20186e00 	call	20186e0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 2016c28:	e0bffd17 	ldw	r2,-12(fp)
 2016c2c:	10c00417 	ldw	r3,16(r2)
 2016c30:	e0bffd17 	ldw	r2,-12(fp)
 2016c34:	1080060b 	ldhu	r2,24(r2)
 2016c38:	10803c04 	addi	r2,r2,240
 2016c3c:	10bfffcc 	andi	r2,r2,65535
 2016c40:	100b883a 	mov	r5,r2
 2016c44:	1809883a 	mov	r4,r3
 2016c48:	201a7100 	call	201a710 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 2016c4c:	e0bffd17 	ldw	r2,-12(fp)
 2016c50:	10c00117 	ldw	r3,4(r2)
 2016c54:	e0bffd17 	ldw	r2,-12(fp)
 2016c58:	11000417 	ldw	r4,16(r2)
 2016c5c:	e0bfff17 	ldw	r2,-4(fp)
 2016c60:	d8800015 	stw	r2,0(sp)
 2016c64:	01c010c4 	movi	r7,67
 2016c68:	d1a00e04 	addi	r6,gp,-32712
 2016c6c:	200b883a 	mov	r5,r4
 2016c70:	1809883a 	mov	r4,r3
 2016c74:	20221880 	call	2022188 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 2016c78:	e13ffd17 	ldw	r4,-12(fp)
 2016c7c:	201865c0 	call	201865c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 2016c80:	e0bffd17 	ldw	r2,-12(fp)
 2016c84:	10800343 	ldbu	r2,13(r2)
 2016c88:	10800044 	addi	r2,r2,1
 2016c8c:	1007883a 	mov	r3,r2
 2016c90:	e0bffd17 	ldw	r2,-12(fp)
 2016c94:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 2016c98:	e0bffd17 	ldw	r2,-12(fp)
 2016c9c:	10800343 	ldbu	r2,13(r2)
 2016ca0:	10803fcc 	andi	r2,r2,255
 2016ca4:	108002a8 	cmpgeui	r2,r2,10
 2016ca8:	1000051e 	bne	r2,zero,2016cc0 <dhcp_rebind+0x11c>
 2016cac:	e0bffd17 	ldw	r2,-12(fp)
 2016cb0:	10800343 	ldbu	r2,13(r2)
 2016cb4:	10803fcc 	andi	r2,r2,255
 2016cb8:	1080fa24 	muli	r2,r2,1000
 2016cbc:	00000106 	br	2016cc4 <dhcp_rebind+0x120>
 2016cc0:	0089c404 	movi	r2,10000
 2016cc4:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 2016cc8:	e0bffe8b 	ldhu	r2,-6(fp)
 2016ccc:	10807cc4 	addi	r2,r2,499
 2016cd0:	01407d04 	movi	r5,500
 2016cd4:	1009883a 	mov	r4,r2
 2016cd8:	200a9e40 	call	200a9e4 <__divsi3>
 2016cdc:	1007883a 	mov	r3,r2
 2016ce0:	e0bffd17 	ldw	r2,-12(fp)
 2016ce4:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 2016ce8:	e0bffe03 	ldbu	r2,-8(fp)
}
 2016cec:	e037883a 	mov	sp,fp
 2016cf0:	dfc00117 	ldw	ra,4(sp)
 2016cf4:	df000017 	ldw	fp,0(sp)
 2016cf8:	dec00204 	addi	sp,sp,8
 2016cfc:	f800283a 	ret

02016d00 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 2016d00:	defffa04 	addi	sp,sp,-24
 2016d04:	dfc00515 	stw	ra,20(sp)
 2016d08:	df000415 	stw	fp,16(sp)
 2016d0c:	df000404 	addi	fp,sp,16
 2016d10:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 2016d14:	e0bfff17 	ldw	r2,-4(fp)
 2016d18:	10800a17 	ldw	r2,40(r2)
 2016d1c:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_REBOOTING);
 2016d20:	014000c4 	movi	r5,3
 2016d24:	e13ffd17 	ldw	r4,-12(fp)
 2016d28:	20171000 	call	2017100 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 2016d2c:	018000c4 	movi	r6,3
 2016d30:	e17ffd17 	ldw	r5,-12(fp)
 2016d34:	e13fff17 	ldw	r4,-4(fp)
 2016d38:	20180d80 	call	20180d8 <dhcp_create_msg>
 2016d3c:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 2016d40:	e0bffe07 	ldb	r2,-8(fp)
 2016d44:	1000371e 	bne	r2,zero,2016e24 <dhcp_reboot+0x124>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 2016d48:	01800084 	movi	r6,2
 2016d4c:	01400e44 	movi	r5,57
 2016d50:	e13ffd17 	ldw	r4,-12(fp)
 2016d54:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_short(dhcp, 576);
 2016d58:	01409004 	movi	r5,576
 2016d5c:	e13ffd17 	ldw	r4,-12(fp)
 2016d60:	20172580 	call	2017258 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 2016d64:	01800104 	movi	r6,4
 2016d68:	01400c84 	movi	r5,50
 2016d6c:	e13ffd17 	ldw	r4,-12(fp)
 2016d70:	201715c0 	call	201715c <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 2016d74:	e0bffd17 	ldw	r2,-12(fp)
 2016d78:	10800917 	ldw	r2,36(r2)
 2016d7c:	1006d63a 	srli	r3,r2,24
 2016d80:	e0bffd17 	ldw	r2,-12(fp)
 2016d84:	10800917 	ldw	r2,36(r2)
 2016d88:	1004d23a 	srli	r2,r2,8
 2016d8c:	10bfc00c 	andi	r2,r2,65280
 2016d90:	1886b03a 	or	r3,r3,r2
 2016d94:	e0bffd17 	ldw	r2,-12(fp)
 2016d98:	10800917 	ldw	r2,36(r2)
 2016d9c:	10bfc00c 	andi	r2,r2,65280
 2016da0:	1004923a 	slli	r2,r2,8
 2016da4:	1886b03a 	or	r3,r3,r2
 2016da8:	e0bffd17 	ldw	r2,-12(fp)
 2016dac:	10800917 	ldw	r2,36(r2)
 2016db0:	1004963a 	slli	r2,r2,24
 2016db4:	1884b03a 	or	r2,r3,r2
 2016db8:	100b883a 	mov	r5,r2
 2016dbc:	e13ffd17 	ldw	r4,-12(fp)
 2016dc0:	20172f00 	call	20172f0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 2016dc4:	e13ffd17 	ldw	r4,-12(fp)
 2016dc8:	20186e00 	call	20186e0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 2016dcc:	e0bffd17 	ldw	r2,-12(fp)
 2016dd0:	10c00417 	ldw	r3,16(r2)
 2016dd4:	e0bffd17 	ldw	r2,-12(fp)
 2016dd8:	1080060b 	ldhu	r2,24(r2)
 2016ddc:	10803c04 	addi	r2,r2,240
 2016de0:	10bfffcc 	andi	r2,r2,65535
 2016de4:	100b883a 	mov	r5,r2
 2016de8:	1809883a 	mov	r4,r3
 2016dec:	201a7100 	call	201a710 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 2016df0:	e0bffd17 	ldw	r2,-12(fp)
 2016df4:	10c00117 	ldw	r3,4(r2)
 2016df8:	e0bffd17 	ldw	r2,-12(fp)
 2016dfc:	11000417 	ldw	r4,16(r2)
 2016e00:	e0bfff17 	ldw	r2,-4(fp)
 2016e04:	d8800015 	stw	r2,0(sp)
 2016e08:	01c010c4 	movi	r7,67
 2016e0c:	d1a00e04 	addi	r6,gp,-32712
 2016e10:	200b883a 	mov	r5,r4
 2016e14:	1809883a 	mov	r4,r3
 2016e18:	20221880 	call	2022188 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 2016e1c:	e13ffd17 	ldw	r4,-12(fp)
 2016e20:	201865c0 	call	201865c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 2016e24:	e0bffd17 	ldw	r2,-12(fp)
 2016e28:	10800343 	ldbu	r2,13(r2)
 2016e2c:	10800044 	addi	r2,r2,1
 2016e30:	1007883a 	mov	r3,r2
 2016e34:	e0bffd17 	ldw	r2,-12(fp)
 2016e38:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 2016e3c:	e0bffd17 	ldw	r2,-12(fp)
 2016e40:	10800343 	ldbu	r2,13(r2)
 2016e44:	10803fcc 	andi	r2,r2,255
 2016e48:	108002a8 	cmpgeui	r2,r2,10
 2016e4c:	1000051e 	bne	r2,zero,2016e64 <dhcp_reboot+0x164>
 2016e50:	e0bffd17 	ldw	r2,-12(fp)
 2016e54:	10800343 	ldbu	r2,13(r2)
 2016e58:	10803fcc 	andi	r2,r2,255
 2016e5c:	1080fa24 	muli	r2,r2,1000
 2016e60:	00000106 	br	2016e68 <dhcp_reboot+0x168>
 2016e64:	0089c404 	movi	r2,10000
 2016e68:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 2016e6c:	e0bffe8b 	ldhu	r2,-6(fp)
 2016e70:	10807cc4 	addi	r2,r2,499
 2016e74:	01407d04 	movi	r5,500
 2016e78:	1009883a 	mov	r4,r2
 2016e7c:	200a9e40 	call	200a9e4 <__divsi3>
 2016e80:	1007883a 	mov	r3,r2
 2016e84:	e0bffd17 	ldw	r2,-12(fp)
 2016e88:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 2016e8c:	e0bffe03 	ldbu	r2,-8(fp)
}
 2016e90:	e037883a 	mov	sp,fp
 2016e94:	dfc00117 	ldw	ra,4(sp)
 2016e98:	df000017 	ldw	fp,0(sp)
 2016e9c:	dec00204 	addi	sp,sp,8
 2016ea0:	f800283a 	ret

02016ea4 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 2016ea4:	defffa04 	addi	sp,sp,-24
 2016ea8:	dfc00515 	stw	ra,20(sp)
 2016eac:	df000415 	stw	fp,16(sp)
 2016eb0:	df000404 	addi	fp,sp,16
 2016eb4:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp = netif->dhcp;
 2016eb8:	e0bfff17 	ldw	r2,-4(fp)
 2016ebc:	10800a17 	ldw	r2,40(r2)
 2016ec0:	e0bffd15 	stw	r2,-12(fp)
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_OFF);
 2016ec4:	000b883a 	mov	r5,zero
 2016ec8:	e13ffd17 	ldw	r4,-12(fp)
 2016ecc:	20171000 	call	2017100 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero(&dhcp->server_ip_addr);
 2016ed0:	e0bffd17 	ldw	r2,-12(fp)
 2016ed4:	10000815 	stw	zero,32(r2)
  ip_addr_set_zero(&dhcp->offered_ip_addr);
 2016ed8:	e0bffd17 	ldw	r2,-12(fp)
 2016edc:	10000915 	stw	zero,36(r2)
  ip_addr_set_zero(&dhcp->offered_sn_mask);
 2016ee0:	e0bffd17 	ldw	r2,-12(fp)
 2016ee4:	10000a15 	stw	zero,40(r2)
  ip_addr_set_zero(&dhcp->offered_gw_addr);
 2016ee8:	e0bffd17 	ldw	r2,-12(fp)
 2016eec:	10000b15 	stw	zero,44(r2)
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 2016ef0:	e0bffd17 	ldw	r2,-12(fp)
 2016ef4:	10000e15 	stw	zero,56(r2)
 2016ef8:	e0bffd17 	ldw	r2,-12(fp)
 2016efc:	10c00e17 	ldw	r3,56(r2)
 2016f00:	e0bffd17 	ldw	r2,-12(fp)
 2016f04:	10c00d15 	stw	r3,52(r2)
 2016f08:	e0bffd17 	ldw	r2,-12(fp)
 2016f0c:	10c00d17 	ldw	r3,52(r2)
 2016f10:	e0bffd17 	ldw	r2,-12(fp)
 2016f14:	10c00c15 	stw	r3,48(r2)
  
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 2016f18:	018001c4 	movi	r6,7
 2016f1c:	e17ffd17 	ldw	r5,-12(fp)
 2016f20:	e13fff17 	ldw	r4,-4(fp)
 2016f24:	20180d80 	call	20180d8 <dhcp_create_msg>
 2016f28:	e0bffe05 	stb	r2,-8(fp)
  if (result == ERR_OK) {
 2016f2c:	e0bffe07 	ldb	r2,-8(fp)
 2016f30:	10001a1e 	bne	r2,zero,2016f9c <dhcp_release+0xf8>
    dhcp_option_trailer(dhcp);
 2016f34:	e13ffd17 	ldw	r4,-12(fp)
 2016f38:	20186e00 	call	20186e0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 2016f3c:	e0bffd17 	ldw	r2,-12(fp)
 2016f40:	10c00417 	ldw	r3,16(r2)
 2016f44:	e0bffd17 	ldw	r2,-12(fp)
 2016f48:	1080060b 	ldhu	r2,24(r2)
 2016f4c:	10803c04 	addi	r2,r2,240
 2016f50:	10bfffcc 	andi	r2,r2,65535
 2016f54:	100b883a 	mov	r5,r2
 2016f58:	1809883a 	mov	r4,r3
 2016f5c:	201a7100 	call	201a710 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 2016f60:	e0bffd17 	ldw	r2,-12(fp)
 2016f64:	10c00117 	ldw	r3,4(r2)
 2016f68:	e0bffd17 	ldw	r2,-12(fp)
 2016f6c:	11000417 	ldw	r4,16(r2)
 2016f70:	e0bffd17 	ldw	r2,-12(fp)
 2016f74:	11400804 	addi	r5,r2,32
 2016f78:	e0bfff17 	ldw	r2,-4(fp)
 2016f7c:	d8800015 	stw	r2,0(sp)
 2016f80:	01c010c4 	movi	r7,67
 2016f84:	280d883a 	mov	r6,r5
 2016f88:	200b883a 	mov	r5,r4
 2016f8c:	1809883a 	mov	r4,r3
 2016f90:	20221880 	call	2022188 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 2016f94:	e13ffd17 	ldw	r4,-12(fp)
 2016f98:	201865c0 	call	201865c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
 2016f9c:	e0bffd17 	ldw	r2,-12(fp)
 2016fa0:	10800343 	ldbu	r2,13(r2)
 2016fa4:	10800044 	addi	r2,r2,1
 2016fa8:	1007883a 	mov	r3,r2
 2016fac:	e0bffd17 	ldw	r2,-12(fp)
 2016fb0:	10c00345 	stb	r3,13(r2)
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 2016fb4:	e0bffd17 	ldw	r2,-12(fp)
 2016fb8:	10800343 	ldbu	r2,13(r2)
 2016fbc:	10803fcc 	andi	r2,r2,255
 2016fc0:	108002a8 	cmpgeui	r2,r2,10
 2016fc4:	1000051e 	bne	r2,zero,2016fdc <dhcp_release+0x138>
 2016fc8:	e0bffd17 	ldw	r2,-12(fp)
 2016fcc:	10800343 	ldbu	r2,13(r2)
 2016fd0:	10803fcc 	andi	r2,r2,255
 2016fd4:	1080fa24 	muli	r2,r2,1000
 2016fd8:	00000106 	br	2016fe0 <dhcp_release+0x13c>
 2016fdc:	0089c404 	movi	r2,10000
 2016fe0:	e0bffe8d 	sth	r2,-6(fp)
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 2016fe4:	e0bffe8b 	ldhu	r2,-6(fp)
 2016fe8:	10807cc4 	addi	r2,r2,499
 2016fec:	01407d04 	movi	r5,500
 2016ff0:	1009883a 	mov	r4,r2
 2016ff4:	200a9e40 	call	200a9e4 <__divsi3>
 2016ff8:	1007883a 	mov	r3,r2
 2016ffc:	e0bffd17 	ldw	r2,-12(fp)
 2017000:	10c0068d 	sth	r3,26(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
  /* bring the interface down */
  netif_set_down(netif);
 2017004:	e13fff17 	ldw	r4,-4(fp)
 2017008:	2019ecc0 	call	2019ecc <netif_set_down>
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
 201700c:	d1600d04 	addi	r5,gp,-32716
 2017010:	e13fff17 	ldw	r4,-4(fp)
 2017014:	2019c380 	call	2019c38 <netif_set_ipaddr>
  netif_set_gw(netif, IP_ADDR_ANY);
 2017018:	d1600d04 	addi	r5,gp,-32716
 201701c:	e13fff17 	ldw	r4,-4(fp)
 2017020:	2019d600 	call	2019d60 <netif_set_gw>
  netif_set_netmask(netif, IP_ADDR_ANY);
 2017024:	d1600d04 	addi	r5,gp,-32716
 2017028:	e13fff17 	ldw	r4,-4(fp)
 201702c:	2019da80 	call	2019da8 <netif_set_netmask>
  
  return result;
 2017030:	e0bffe03 	ldbu	r2,-8(fp)
}
 2017034:	e037883a 	mov	sp,fp
 2017038:	dfc00117 	ldw	ra,4(sp)
 201703c:	df000017 	ldw	fp,0(sp)
 2017040:	dec00204 	addi	sp,sp,8
 2017044:	f800283a 	ret

02017048 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 2017048:	defffc04 	addi	sp,sp,-16
 201704c:	dfc00315 	stw	ra,12(sp)
 2017050:	df000215 	stw	fp,8(sp)
 2017054:	df000204 	addi	fp,sp,8
 2017058:	e13fff15 	stw	r4,-4(fp)
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 201705c:	e0bfff17 	ldw	r2,-4(fp)
 2017060:	1000091e 	bne	r2,zero,2017088 <dhcp_stop+0x40>
 2017064:	01c08134 	movhi	r7,516
 2017068:	39c47d04 	addi	r7,r7,4596
 201706c:	01813504 	movi	r6,1236
 2017070:	01408134 	movhi	r5,516
 2017074:	2944a004 	addi	r5,r5,4736
 2017078:	01008134 	movhi	r4,516
 201707c:	21048704 	addi	r4,r4,4636
 2017080:	20009e40 	call	20009e4 <printf>
 2017084:	003fff06 	br	2017084 <__alt_mem_mem_0+0xfcff7084>
  dhcp = netif->dhcp;
 2017088:	e0bfff17 	ldw	r2,-4(fp)
 201708c:	10800a17 	ldw	r2,40(r2)
 2017090:	e0bffe15 	stw	r2,-8(fp)
  /* Remove the flag that says this netif is handled by DHCP. */
  netif->flags &= ~NETIF_FLAG_DHCP;
 2017094:	e0bfff17 	ldw	r2,-4(fp)
 2017098:	10c00e43 	ldbu	r3,57(r2)
 201709c:	00bffdc4 	movi	r2,-9
 20170a0:	1884703a 	and	r2,r3,r2
 20170a4:	1007883a 	mov	r3,r2
 20170a8:	e0bfff17 	ldw	r2,-4(fp)
 20170ac:	10c00e45 	stb	r3,57(r2)

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 20170b0:	e0bffe17 	ldw	r2,-8(fp)
 20170b4:	10000c26 	beq	r2,zero,20170e8 <dhcp_stop+0xa0>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    if (dhcp->pcb != NULL) {
 20170b8:	e0bffe17 	ldw	r2,-8(fp)
 20170bc:	10800117 	ldw	r2,4(r2)
 20170c0:	10000626 	beq	r2,zero,20170dc <dhcp_stop+0x94>
      udp_remove(dhcp->pcb);
 20170c4:	e0bffe17 	ldw	r2,-8(fp)
 20170c8:	10800117 	ldw	r2,4(r2)
 20170cc:	1009883a 	mov	r4,r2
 20170d0:	20229340 	call	2022934 <udp_remove>
      dhcp->pcb = NULL;
 20170d4:	e0bffe17 	ldw	r2,-8(fp)
 20170d8:	10000115 	stw	zero,4(r2)
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    dhcp_set_state(dhcp, DHCP_OFF);
 20170dc:	000b883a 	mov	r5,zero
 20170e0:	e13ffe17 	ldw	r4,-8(fp)
 20170e4:	20171000 	call	2017100 <dhcp_set_state>
  }
}
 20170e8:	0001883a 	nop
 20170ec:	e037883a 	mov	sp,fp
 20170f0:	dfc00117 	ldw	ra,4(sp)
 20170f4:	df000017 	ldw	fp,0(sp)
 20170f8:	dec00204 	addi	sp,sp,8
 20170fc:	f800283a 	ret

02017100 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 2017100:	defffd04 	addi	sp,sp,-12
 2017104:	df000215 	stw	fp,8(sp)
 2017108:	df000204 	addi	fp,sp,8
 201710c:	e13ffe15 	stw	r4,-8(fp)
 2017110:	2805883a 	mov	r2,r5
 2017114:	e0bfff05 	stb	r2,-4(fp)
  if (new_state != dhcp->state) {
 2017118:	e0bffe17 	ldw	r2,-8(fp)
 201711c:	10800303 	ldbu	r2,12(r2)
 2017120:	10c03fcc 	andi	r3,r2,255
 2017124:	e0bfff03 	ldbu	r2,-4(fp)
 2017128:	18800726 	beq	r3,r2,2017148 <dhcp_set_state+0x48>
    dhcp->state = new_state;
 201712c:	e0bffe17 	ldw	r2,-8(fp)
 2017130:	e0ffff03 	ldbu	r3,-4(fp)
 2017134:	10c00305 	stb	r3,12(r2)
    dhcp->tries = 0;
 2017138:	e0bffe17 	ldw	r2,-8(fp)
 201713c:	10000345 	stb	zero,13(r2)
    dhcp->request_timeout = 0;
 2017140:	e0bffe17 	ldw	r2,-8(fp)
 2017144:	1000068d 	sth	zero,26(r2)
  }
}
 2017148:	0001883a 	nop
 201714c:	e037883a 	mov	sp,fp
 2017150:	df000017 	ldw	fp,0(sp)
 2017154:	dec00104 	addi	sp,sp,4
 2017158:	f800283a 	ret

0201715c <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 201715c:	defffc04 	addi	sp,sp,-16
 2017160:	df000315 	stw	fp,12(sp)
 2017164:	df000304 	addi	fp,sp,12
 2017168:	e13ffd15 	stw	r4,-12(fp)
 201716c:	2807883a 	mov	r3,r5
 2017170:	3005883a 	mov	r2,r6
 2017174:	e0fffe05 	stb	r3,-8(fp)
 2017178:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 201717c:	e0bffd17 	ldw	r2,-12(fp)
 2017180:	10c00517 	ldw	r3,20(r2)
 2017184:	e0bffd17 	ldw	r2,-12(fp)
 2017188:	1080060b 	ldhu	r2,24(r2)
 201718c:	11000044 	addi	r4,r2,1
 2017190:	200b883a 	mov	r5,r4
 2017194:	e13ffd17 	ldw	r4,-12(fp)
 2017198:	2140060d 	sth	r5,24(r4)
 201719c:	10bfffcc 	andi	r2,r2,65535
 20171a0:	1885883a 	add	r2,r3,r2
 20171a4:	10803c04 	addi	r2,r2,240
 20171a8:	e0fffe03 	ldbu	r3,-8(fp)
 20171ac:	10c00005 	stb	r3,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 20171b0:	e0bffd17 	ldw	r2,-12(fp)
 20171b4:	10c00517 	ldw	r3,20(r2)
 20171b8:	e0bffd17 	ldw	r2,-12(fp)
 20171bc:	1080060b 	ldhu	r2,24(r2)
 20171c0:	11000044 	addi	r4,r2,1
 20171c4:	200b883a 	mov	r5,r4
 20171c8:	e13ffd17 	ldw	r4,-12(fp)
 20171cc:	2140060d 	sth	r5,24(r4)
 20171d0:	10bfffcc 	andi	r2,r2,65535
 20171d4:	1885883a 	add	r2,r3,r2
 20171d8:	10803c04 	addi	r2,r2,240
 20171dc:	e0ffff03 	ldbu	r3,-4(fp)
 20171e0:	10c00005 	stb	r3,0(r2)
}
 20171e4:	0001883a 	nop
 20171e8:	e037883a 	mov	sp,fp
 20171ec:	df000017 	ldw	fp,0(sp)
 20171f0:	dec00104 	addi	sp,sp,4
 20171f4:	f800283a 	ret

020171f8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 20171f8:	defffd04 	addi	sp,sp,-12
 20171fc:	df000215 	stw	fp,8(sp)
 2017200:	df000204 	addi	fp,sp,8
 2017204:	e13ffe15 	stw	r4,-8(fp)
 2017208:	2805883a 	mov	r2,r5
 201720c:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 2017210:	e0bffe17 	ldw	r2,-8(fp)
 2017214:	10c00517 	ldw	r3,20(r2)
 2017218:	e0bffe17 	ldw	r2,-8(fp)
 201721c:	1080060b 	ldhu	r2,24(r2)
 2017220:	11000044 	addi	r4,r2,1
 2017224:	200b883a 	mov	r5,r4
 2017228:	e13ffe17 	ldw	r4,-8(fp)
 201722c:	2140060d 	sth	r5,24(r4)
 2017230:	10bfffcc 	andi	r2,r2,65535
 2017234:	1885883a 	add	r2,r3,r2
 2017238:	10803c04 	addi	r2,r2,240
 201723c:	e0ffff03 	ldbu	r3,-4(fp)
 2017240:	10c00005 	stb	r3,0(r2)
}
 2017244:	0001883a 	nop
 2017248:	e037883a 	mov	sp,fp
 201724c:	df000017 	ldw	fp,0(sp)
 2017250:	dec00104 	addi	sp,sp,4
 2017254:	f800283a 	ret

02017258 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 2017258:	defffd04 	addi	sp,sp,-12
 201725c:	df000215 	stw	fp,8(sp)
 2017260:	df000204 	addi	fp,sp,8
 2017264:	e13ffe15 	stw	r4,-8(fp)
 2017268:	2805883a 	mov	r2,r5
 201726c:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 2017270:	e0bffe17 	ldw	r2,-8(fp)
 2017274:	10c00517 	ldw	r3,20(r2)
 2017278:	e0bffe17 	ldw	r2,-8(fp)
 201727c:	1080060b 	ldhu	r2,24(r2)
 2017280:	11000044 	addi	r4,r2,1
 2017284:	200b883a 	mov	r5,r4
 2017288:	e13ffe17 	ldw	r4,-8(fp)
 201728c:	2140060d 	sth	r5,24(r4)
 2017290:	10bfffcc 	andi	r2,r2,65535
 2017294:	e13fff0b 	ldhu	r4,-4(fp)
 2017298:	2008d23a 	srli	r4,r4,8
 201729c:	1885883a 	add	r2,r3,r2
 20172a0:	10803c04 	addi	r2,r2,240
 20172a4:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 20172a8:	e0bffe17 	ldw	r2,-8(fp)
 20172ac:	10c00517 	ldw	r3,20(r2)
 20172b0:	e0bffe17 	ldw	r2,-8(fp)
 20172b4:	1080060b 	ldhu	r2,24(r2)
 20172b8:	11000044 	addi	r4,r2,1
 20172bc:	200b883a 	mov	r5,r4
 20172c0:	e13ffe17 	ldw	r4,-8(fp)
 20172c4:	2140060d 	sth	r5,24(r4)
 20172c8:	10bfffcc 	andi	r2,r2,65535
 20172cc:	e13fff0b 	ldhu	r4,-4(fp)
 20172d0:	1885883a 	add	r2,r3,r2
 20172d4:	10803c04 	addi	r2,r2,240
 20172d8:	11000005 	stb	r4,0(r2)
}
 20172dc:	0001883a 	nop
 20172e0:	e037883a 	mov	sp,fp
 20172e4:	df000017 	ldw	fp,0(sp)
 20172e8:	dec00104 	addi	sp,sp,4
 20172ec:	f800283a 	ret

020172f0 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 20172f0:	defffd04 	addi	sp,sp,-12
 20172f4:	df000215 	stw	fp,8(sp)
 20172f8:	df000204 	addi	fp,sp,8
 20172fc:	e13ffe15 	stw	r4,-8(fp)
 2017300:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 2017304:	e0bffe17 	ldw	r2,-8(fp)
 2017308:	10c00517 	ldw	r3,20(r2)
 201730c:	e0bffe17 	ldw	r2,-8(fp)
 2017310:	1080060b 	ldhu	r2,24(r2)
 2017314:	11000044 	addi	r4,r2,1
 2017318:	200b883a 	mov	r5,r4
 201731c:	e13ffe17 	ldw	r4,-8(fp)
 2017320:	2140060d 	sth	r5,24(r4)
 2017324:	10bfffcc 	andi	r2,r2,65535
 2017328:	e13fff17 	ldw	r4,-4(fp)
 201732c:	2008d63a 	srli	r4,r4,24
 2017330:	1885883a 	add	r2,r3,r2
 2017334:	10803c04 	addi	r2,r2,240
 2017338:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 201733c:	e0bffe17 	ldw	r2,-8(fp)
 2017340:	10c00517 	ldw	r3,20(r2)
 2017344:	e0bffe17 	ldw	r2,-8(fp)
 2017348:	1080060b 	ldhu	r2,24(r2)
 201734c:	11000044 	addi	r4,r2,1
 2017350:	200b883a 	mov	r5,r4
 2017354:	e13ffe17 	ldw	r4,-8(fp)
 2017358:	2140060d 	sth	r5,24(r4)
 201735c:	10bfffcc 	andi	r2,r2,65535
 2017360:	e13fff17 	ldw	r4,-4(fp)
 2017364:	21003fec 	andhi	r4,r4,255
 2017368:	2008d43a 	srli	r4,r4,16
 201736c:	1885883a 	add	r2,r3,r2
 2017370:	10803c04 	addi	r2,r2,240
 2017374:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 2017378:	e0bffe17 	ldw	r2,-8(fp)
 201737c:	10c00517 	ldw	r3,20(r2)
 2017380:	e0bffe17 	ldw	r2,-8(fp)
 2017384:	1080060b 	ldhu	r2,24(r2)
 2017388:	11000044 	addi	r4,r2,1
 201738c:	200b883a 	mov	r5,r4
 2017390:	e13ffe17 	ldw	r4,-8(fp)
 2017394:	2140060d 	sth	r5,24(r4)
 2017398:	10bfffcc 	andi	r2,r2,65535
 201739c:	e13fff17 	ldw	r4,-4(fp)
 20173a0:	213fc00c 	andi	r4,r4,65280
 20173a4:	2008d23a 	srli	r4,r4,8
 20173a8:	1885883a 	add	r2,r3,r2
 20173ac:	10803c04 	addi	r2,r2,240
 20173b0:	11000005 	stb	r4,0(r2)
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 20173b4:	e0bffe17 	ldw	r2,-8(fp)
 20173b8:	10c00517 	ldw	r3,20(r2)
 20173bc:	e0bffe17 	ldw	r2,-8(fp)
 20173c0:	1080060b 	ldhu	r2,24(r2)
 20173c4:	11000044 	addi	r4,r2,1
 20173c8:	200b883a 	mov	r5,r4
 20173cc:	e13ffe17 	ldw	r4,-8(fp)
 20173d0:	2140060d 	sth	r5,24(r4)
 20173d4:	10bfffcc 	andi	r2,r2,65535
 20173d8:	e13fff17 	ldw	r4,-4(fp)
 20173dc:	1885883a 	add	r2,r3,r2
 20173e0:	10803c04 	addi	r2,r2,240
 20173e4:	11000005 	stb	r4,0(r2)
}
 20173e8:	0001883a 	nop
 20173ec:	e037883a 	mov	sp,fp
 20173f0:	df000017 	ldw	fp,0(sp)
 20173f4:	dec00104 	addi	sp,sp,4
 20173f8:	f800283a 	ret

020173fc <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
 20173fc:	defff804 	addi	sp,sp,-32
 2017400:	dfc00715 	stw	ra,28(sp)
 2017404:	df000615 	stw	fp,24(sp)
 2017408:	df000604 	addi	fp,sp,24
 201740c:	e13ffe15 	stw	r4,-8(fp)
 2017410:	e17fff15 	stw	r5,-4(fp)
  if (netif->hostname != NULL) {
 2017414:	e0bfff17 	ldw	r2,-4(fp)
 2017418:	10800b17 	ldw	r2,44(r2)
 201741c:	10002826 	beq	r2,zero,20174c0 <dhcp_option_hostname+0xc4>
    size_t namelen = strlen(netif->hostname);
 2017420:	e0bfff17 	ldw	r2,-4(fp)
 2017424:	10800b17 	ldw	r2,44(r2)
 2017428:	1009883a 	mov	r4,r2
 201742c:	20073a40 	call	20073a4 <strlen>
 2017430:	e0bffc15 	stw	r2,-16(fp)
    if (namelen > 0) {
 2017434:	e0bffc17 	ldw	r2,-16(fp)
 2017438:	10002126 	beq	r2,zero,20174c0 <dhcp_option_hostname+0xc4>
      u8_t len;
      const char *p = netif->hostname;
 201743c:	e0bfff17 	ldw	r2,-4(fp)
 2017440:	10800b17 	ldw	r2,44(r2)
 2017444:	e0bffb15 	stw	r2,-20(fp)
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
 2017448:	e0bffe17 	ldw	r2,-8(fp)
 201744c:	1080060b 	ldhu	r2,24(r2)
 2017450:	10bfffcc 	andi	r2,r2,65535
 2017454:	00c01044 	movi	r3,65
 2017458:	1885c83a 	sub	r2,r3,r2
 201745c:	e0bffd15 	stw	r2,-12(fp)
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
      len = LWIP_MIN(namelen, available);
 2017460:	e0fffc17 	ldw	r3,-16(fp)
 2017464:	e0bffd17 	ldw	r2,-12(fp)
 2017468:	1880012e 	bgeu	r3,r2,2017470 <dhcp_option_hostname+0x74>
 201746c:	1805883a 	mov	r2,r3
 2017470:	e0bffa05 	stb	r2,-24(fp)
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, len);
 2017474:	e0bffa03 	ldbu	r2,-24(fp)
 2017478:	100d883a 	mov	r6,r2
 201747c:	01400304 	movi	r5,12
 2017480:	e13ffe17 	ldw	r4,-8(fp)
 2017484:	201715c0 	call	201715c <dhcp_option>
      while (len--) {
 2017488:	00000806 	br	20174ac <dhcp_option_hostname+0xb0>
        dhcp_option_byte(dhcp, *p++);
 201748c:	e0bffb17 	ldw	r2,-20(fp)
 2017490:	10c00044 	addi	r3,r2,1
 2017494:	e0fffb15 	stw	r3,-20(fp)
 2017498:	10800003 	ldbu	r2,0(r2)
 201749c:	10803fcc 	andi	r2,r2,255
 20174a0:	100b883a 	mov	r5,r2
 20174a4:	e13ffe17 	ldw	r4,-8(fp)
 20174a8:	20171f80 	call	20171f8 <dhcp_option_byte>
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
      len = LWIP_MIN(namelen, available);
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, len);
      while (len--) {
 20174ac:	e0bffa03 	ldbu	r2,-24(fp)
 20174b0:	10ffffc4 	addi	r3,r2,-1
 20174b4:	e0fffa05 	stb	r3,-24(fp)
 20174b8:	10803fcc 	andi	r2,r2,255
 20174bc:	103ff31e 	bne	r2,zero,201748c <__alt_mem_mem_0+0xfcff748c>
        dhcp_option_byte(dhcp, *p++);
      }
    }
  }
}
 20174c0:	0001883a 	nop
 20174c4:	e037883a 	mov	sp,fp
 20174c8:	dfc00117 	ldw	ra,4(sp)
 20174cc:	df000017 	ldw	fp,0(sp)
 20174d0:	dec00204 	addi	sp,sp,8
 20174d4:	f800283a 	ret

020174d8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 20174d8:	defff004 	addi	sp,sp,-64
 20174dc:	dfc00f15 	stw	ra,60(sp)
 20174e0:	df000e15 	stw	fp,56(sp)
 20174e4:	df000e04 	addi	fp,sp,56
 20174e8:	e13ffe15 	stw	r4,-8(fp)
 20174ec:	e17fff15 	stw	r5,-4(fp)
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 20174f0:	e03ff615 	stw	zero,-40(fp)
  int parse_sname_as_options = 0;
 20174f4:	e03ff715 	stw	zero,-36(fp)

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 20174f8:	01800284 	movi	r6,10
 20174fc:	000b883a 	mov	r5,zero
 2017500:	010085b4 	movhi	r4,534
 2017504:	21085504 	addi	r4,r4,8532
 2017508:	2005fa00 	call	2005fa0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 201750c:	e0bfff17 	ldw	r2,-4(fp)
 2017510:	1080028b 	ldhu	r2,10(r2)
 2017514:	10bfffcc 	andi	r2,r2,65535
 2017518:	10800b28 	cmpgeui	r2,r2,44
 201751c:	1000021e 	bne	r2,zero,2017528 <dhcp_parse_reply+0x50>
    return ERR_BUF;
 2017520:	00bfff84 	movi	r2,-2
 2017524:	00021106 	br	2017d6c <dhcp_parse_reply+0x894>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 2017528:	e0bfff17 	ldw	r2,-4(fp)
 201752c:	10c00117 	ldw	r3,4(r2)
 2017530:	e0bffe17 	ldw	r2,-8(fp)
 2017534:	10c00215 	stw	r3,8(r2)
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 2017538:	00803c04 	movi	r2,240
 201753c:	e0bff40d 	sth	r2,-48(fp)
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 2017540:	e0bfff17 	ldw	r2,-4(fp)
 2017544:	1080020b 	ldhu	r2,8(r2)
 2017548:	e0bff48d 	sth	r2,-46(fp)
again:
  q = p;
 201754c:	e0bfff17 	ldw	r2,-4(fp)
 2017550:	e0bff515 	stw	r2,-44(fp)
  while((q != NULL) && (options_idx >= q->len)) {
 2017554:	00000d06 	br	201758c <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
 2017558:	e0bff517 	ldw	r2,-44(fp)
 201755c:	1080028b 	ldhu	r2,10(r2)
 2017560:	e0fff40b 	ldhu	r3,-48(fp)
 2017564:	1885c83a 	sub	r2,r3,r2
 2017568:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max -= q->len;
 201756c:	e0bff517 	ldw	r2,-44(fp)
 2017570:	1080028b 	ldhu	r2,10(r2)
 2017574:	e0fff48b 	ldhu	r3,-46(fp)
 2017578:	1885c83a 	sub	r2,r3,r2
 201757c:	e0bff48d 	sth	r2,-46(fp)
    q = q->next;
 2017580:	e0bff517 	ldw	r2,-44(fp)
 2017584:	10800017 	ldw	r2,0(r2)
 2017588:	e0bff515 	stw	r2,-44(fp)
  options_idx = DHCP_OPTIONS_OFS;
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while((q != NULL) && (options_idx >= q->len)) {
 201758c:	e0bff517 	ldw	r2,-44(fp)
 2017590:	10000526 	beq	r2,zero,20175a8 <dhcp_parse_reply+0xd0>
 2017594:	e0bff517 	ldw	r2,-44(fp)
 2017598:	1080028b 	ldhu	r2,10(r2)
 201759c:	10bfffcc 	andi	r2,r2,65535
 20175a0:	e0fff40b 	ldhu	r3,-48(fp)
 20175a4:	18bfec2e 	bgeu	r3,r2,2017558 <__alt_mem_mem_0+0xfcff7558>
    options_idx -= q->len;
    options_idx_max -= q->len;
    q = q->next;
  }
  if (q == NULL) {
 20175a8:	e0bff517 	ldw	r2,-44(fp)
 20175ac:	1000021e 	bne	r2,zero,20175b8 <dhcp_parse_reply+0xe0>
    return ERR_BUF;
 20175b0:	00bfff84 	movi	r2,-2
 20175b4:	0001ed06 	br	2017d6c <dhcp_parse_reply+0x894>
  }
  offset = options_idx;
 20175b8:	e0bff40b 	ldhu	r2,-48(fp)
 20175bc:	e0bff30d 	sth	r2,-52(fp)
  offset_max = options_idx_max;
 20175c0:	e0bff48b 	ldhu	r2,-46(fp)
 20175c4:	e0bff38d 	sth	r2,-50(fp)
  options = (u8_t*)q->payload;
 20175c8:	e0bff517 	ldw	r2,-44(fp)
 20175cc:	10800117 	ldw	r2,4(r2)
 20175d0:	e0bff215 	stw	r2,-56(fp)
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
 20175d4:	0001a906 	br	2017c7c <dhcp_parse_reply+0x7a4>
    u8_t op = options[offset];
 20175d8:	e0bff30b 	ldhu	r2,-52(fp)
 20175dc:	e0fff217 	ldw	r3,-56(fp)
 20175e0:	1885883a 	add	r2,r3,r2
 20175e4:	10800003 	ldbu	r2,0(r2)
 20175e8:	e0bffa85 	stb	r2,-22(fp)
    u8_t len;
    u8_t decode_len = 0;
 20175ec:	e03ff845 	stb	zero,-31(fp)
    int decode_idx = -1;
 20175f0:	00bfffc4 	movi	r2,-1
 20175f4:	e0bff915 	stw	r2,-28(fp)
    u16_t val_offset = offset + 2;
 20175f8:	e0bff30b 	ldhu	r2,-52(fp)
 20175fc:	10800084 	addi	r2,r2,2
 2017600:	e0bffa0d 	sth	r2,-24(fp)
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
 2017604:	e0bff30b 	ldhu	r2,-52(fp)
 2017608:	10c00044 	addi	r3,r2,1
 201760c:	e0bff517 	ldw	r2,-44(fp)
 2017610:	1080028b 	ldhu	r2,10(r2)
 2017614:	10bfffcc 	andi	r2,r2,65535
 2017618:	1880070e 	bge	r3,r2,2017638 <dhcp_parse_reply+0x160>
      len = options[offset + 1];
 201761c:	e0bff30b 	ldhu	r2,-52(fp)
 2017620:	10800044 	addi	r2,r2,1
 2017624:	e0fff217 	ldw	r3,-56(fp)
 2017628:	1885883a 	add	r2,r3,r2
 201762c:	10800003 	ldbu	r2,0(r2)
 2017630:	e0bff805 	stb	r2,-32(fp)
 2017634:	00000a06 	br	2017660 <dhcp_parse_reply+0x188>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 2017638:	e0bff517 	ldw	r2,-44(fp)
 201763c:	10800017 	ldw	r2,0(r2)
 2017640:	10000526 	beq	r2,zero,2017658 <dhcp_parse_reply+0x180>
 2017644:	e0bff517 	ldw	r2,-44(fp)
 2017648:	10800017 	ldw	r2,0(r2)
 201764c:	10800117 	ldw	r2,4(r2)
 2017650:	10800003 	ldbu	r2,0(r2)
 2017654:	00000106 	br	201765c <dhcp_parse_reply+0x184>
 2017658:	0005883a 	mov	r2,zero
 201765c:	e0bff805 	stb	r2,-32(fp)
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 2017660:	e0bff803 	ldbu	r2,-32(fp)
 2017664:	e0bff845 	stb	r2,-31(fp)
    switch(op) {
 2017668:	e0bffa83 	ldbu	r2,-22(fp)
 201766c:	10c00f28 	cmpgeui	r3,r2,60
 2017670:	1800e41e 	bne	r3,zero,2017a04 <dhcp_parse_reply+0x52c>
 2017674:	100690ba 	slli	r3,r2,2
 2017678:	00808074 	movhi	r2,513
 201767c:	109da304 	addi	r2,r2,30348
 2017680:	1885883a 	add	r2,r3,r2
 2017684:	10800017 	ldw	r2,0(r2)
 2017688:	1000683a 	jmp	r2
 201768c:	0201777c 	xorhi	r8,zero,1501
 2017690:	02017798 	cmpnei	r8,zero,1502
 2017694:	02017a04 	movi	r8,1512
 2017698:	020177d4 	movui	r8,1503
 201769c:	02017a04 	movi	r8,1512
 20176a0:	02017a04 	movi	r8,1512
 20176a4:	02017818 	cmpnei	r8,zero,1504
 20176a8:	02017a04 	movi	r8,1512
 20176ac:	02017a04 	movi	r8,1512
 20176b0:	02017a04 	movi	r8,1512
 20176b4:	02017a04 	movi	r8,1512
 20176b8:	02017a04 	movi	r8,1512
 20176bc:	02017a04 	movi	r8,1512
 20176c0:	02017a04 	movi	r8,1512
 20176c4:	02017a04 	movi	r8,1512
 20176c8:	02017a04 	movi	r8,1512
 20176cc:	02017a04 	movi	r8,1512
 20176d0:	02017a04 	movi	r8,1512
 20176d4:	02017a04 	movi	r8,1512
 20176d8:	02017a04 	movi	r8,1512
 20176dc:	02017a04 	movi	r8,1512
 20176e0:	02017a04 	movi	r8,1512
 20176e4:	02017a04 	movi	r8,1512
 20176e8:	02017a04 	movi	r8,1512
 20176ec:	02017a04 	movi	r8,1512
 20176f0:	02017a04 	movi	r8,1512
 20176f4:	02017a04 	movi	r8,1512
 20176f8:	02017a04 	movi	r8,1512
 20176fc:	02017a04 	movi	r8,1512
 2017700:	02017a04 	movi	r8,1512
 2017704:	02017a04 	movi	r8,1512
 2017708:	02017a04 	movi	r8,1512
 201770c:	02017a04 	movi	r8,1512
 2017710:	02017a04 	movi	r8,1512
 2017714:	02017a04 	movi	r8,1512
 2017718:	02017a04 	movi	r8,1512
 201771c:	02017a04 	movi	r8,1512
 2017720:	02017a04 	movi	r8,1512
 2017724:	02017a04 	movi	r8,1512
 2017728:	02017a04 	movi	r8,1512
 201772c:	02017a04 	movi	r8,1512
 2017730:	02017a04 	movi	r8,1512
 2017734:	02017a04 	movi	r8,1512
 2017738:	02017a04 	movi	r8,1512
 201773c:	02017a04 	movi	r8,1512
 2017740:	02017a04 	movi	r8,1512
 2017744:	02017a04 	movi	r8,1512
 2017748:	02017a04 	movi	r8,1512
 201774c:	02017a04 	movi	r8,1512
 2017750:	02017a04 	movi	r8,1512
 2017754:	02017a04 	movi	r8,1512
 2017758:	020178a0 	cmpeqi	r8,zero,1506
 201775c:	020178dc 	xori	r8,zero,1507
 2017760:	02017914 	movui	r8,1508
 2017764:	02017950 	cmplti	r8,zero,1509
 2017768:	02017a04 	movi	r8,1512
 201776c:	02017a04 	movi	r8,1512
 2017770:	02017a04 	movi	r8,1512
 2017774:	0201798c 	andi	r8,zero,1510
 2017778:	020179c8 	cmpgei	r8,zero,1511
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 201777c:	e03ff805 	stb	zero,-32(fp)
 2017780:	e0bff803 	ldbu	r2,-32(fp)
 2017784:	e0bff845 	stb	r2,-31(fp)
        /* will be increased below */
        offset--;
 2017788:	e0bff30b 	ldhu	r2,-52(fp)
 201778c:	10bfffc4 	addi	r2,r2,-1
 2017790:	e0bff30d 	sth	r2,-52(fp)
        break;
 2017794:	00009d06 	br	2017a0c <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 2017798:	e0bff803 	ldbu	r2,-32(fp)
 201779c:	10800120 	cmpeqi	r2,r2,4
 20177a0:	1000091e 	bne	r2,zero,20177c8 <dhcp_parse_reply+0x2f0>
 20177a4:	01c08134 	movhi	r7,516
 20177a8:	39c47d04 	addi	r7,r7,4596
 20177ac:	01816204 	movi	r6,1416
 20177b0:	01408134 	movhi	r5,516
 20177b4:	2944a704 	addi	r5,r5,4764
 20177b8:	01008134 	movhi	r4,516
 20177bc:	21048704 	addi	r4,r4,4636
 20177c0:	20009e40 	call	20009e4 <printf>
 20177c4:	003fff06 	br	20177c4 <__alt_mem_mem_0+0xfcff77c4>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 20177c8:	00800184 	movi	r2,6
 20177cc:	e0bff915 	stw	r2,-28(fp)
        break;
 20177d0:	00008e06 	br	2017a0c <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 20177d4:	00800104 	movi	r2,4
 20177d8:	e0bff845 	stb	r2,-31(fp)
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 20177dc:	e0fff803 	ldbu	r3,-32(fp)
 20177e0:	e0bff843 	ldbu	r2,-31(fp)
 20177e4:	1880092e 	bgeu	r3,r2,201780c <dhcp_parse_reply+0x334>
 20177e8:	01c08134 	movhi	r7,516
 20177ec:	39c47d04 	addi	r7,r7,4596
 20177f0:	01816344 	movi	r6,1421
 20177f4:	01408134 	movhi	r5,516
 20177f8:	2944aa04 	addi	r5,r5,4776
 20177fc:	01008134 	movhi	r4,516
 2017800:	21048704 	addi	r4,r4,4636
 2017804:	20009e40 	call	20009e4 <printf>
 2017808:	003fff06 	br	2017808 <__alt_mem_mem_0+0xfcff7808>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 201780c:	008001c4 	movi	r2,7
 2017810:	e0bff915 	stw	r2,-28(fp)
        break;
 2017814:	00007d06 	br	2017a0c <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
 2017818:	e0bff803 	ldbu	r2,-32(fp)
 201781c:	108000cc 	andi	r2,r2,3
 2017820:	10803fcc 	andi	r2,r2,255
 2017824:	10000926 	beq	r2,zero,201784c <dhcp_parse_reply+0x374>
 2017828:	01c08134 	movhi	r7,516
 201782c:	39c47d04 	addi	r7,r7,4596
 2017830:	01816484 	movi	r6,1426
 2017834:	01408134 	movhi	r5,516
 2017838:	2944af04 	addi	r5,r5,4796
 201783c:	01008134 	movhi	r4,516
 2017840:	21048704 	addi	r4,r4,4636
 2017844:	20009e40 	call	20009e4 <printf>
 2017848:	003fff06 	br	2017848 <__alt_mem_mem_0+0xfcff7848>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 201784c:	e0bff803 	ldbu	r2,-32(fp)
 2017850:	10c03fcc 	andi	r3,r2,255
 2017854:	18c00270 	cmpltui	r3,r3,9
 2017858:	1800011e 	bne	r3,zero,2017860 <dhcp_parse_reply+0x388>
 201785c:	00800204 	movi	r2,8
 2017860:	e0bff845 	stb	r2,-31(fp)
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 2017864:	e0fff803 	ldbu	r3,-32(fp)
 2017868:	e0bff843 	ldbu	r2,-31(fp)
 201786c:	1880092e 	bgeu	r3,r2,2017894 <dhcp_parse_reply+0x3bc>
 2017870:	01c08134 	movhi	r7,516
 2017874:	39c47d04 	addi	r7,r7,4596
 2017878:	01816544 	movi	r6,1429
 201787c:	01408134 	movhi	r5,516
 2017880:	2944aa04 	addi	r5,r5,4776
 2017884:	01008134 	movhi	r4,516
 2017888:	21048704 	addi	r4,r4,4636
 201788c:	20009e40 	call	20009e4 <printf>
 2017890:	003fff06 	br	2017890 <__alt_mem_mem_0+0xfcff7890>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 2017894:	00800204 	movi	r2,8
 2017898:	e0bff915 	stw	r2,-28(fp)
        break;
 201789c:	00005b06 	br	2017a0c <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 20178a0:	e0bff803 	ldbu	r2,-32(fp)
 20178a4:	10800120 	cmpeqi	r2,r2,4
 20178a8:	1000091e 	bne	r2,zero,20178d0 <dhcp_parse_reply+0x3f8>
 20178ac:	01c08134 	movhi	r7,516
 20178b0:	39c47d04 	addi	r7,r7,4596
 20178b4:	01816644 	movi	r6,1433
 20178b8:	01408134 	movhi	r5,516
 20178bc:	2944a704 	addi	r5,r5,4764
 20178c0:	01008134 	movhi	r4,516
 20178c4:	21048704 	addi	r4,r4,4636
 20178c8:	20009e40 	call	20009e4 <printf>
 20178cc:	003fff06 	br	20178cc <__alt_mem_mem_0+0xfcff78cc>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 20178d0:	008000c4 	movi	r2,3
 20178d4:	e0bff915 	stw	r2,-28(fp)
        break;
 20178d8:	00004c06 	br	2017a0c <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 20178dc:	e0bff803 	ldbu	r2,-32(fp)
 20178e0:	10800060 	cmpeqi	r2,r2,1
 20178e4:	1000091e 	bne	r2,zero,201790c <dhcp_parse_reply+0x434>
 20178e8:	01c08134 	movhi	r7,516
 20178ec:	39c47d04 	addi	r7,r7,4596
 20178f0:	01816744 	movi	r6,1437
 20178f4:	01408134 	movhi	r5,516
 20178f8:	2944b304 	addi	r5,r5,4812
 20178fc:	01008134 	movhi	r4,516
 2017900:	21048704 	addi	r4,r4,4636
 2017904:	20009e40 	call	20009e4 <printf>
 2017908:	003fff06 	br	2017908 <__alt_mem_mem_0+0xfcff7908>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 201790c:	e03ff915 	stw	zero,-28(fp)
        break;
 2017910:	00003e06 	br	2017a0c <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 2017914:	e0bff803 	ldbu	r2,-32(fp)
 2017918:	10800060 	cmpeqi	r2,r2,1
 201791c:	1000091e 	bne	r2,zero,2017944 <dhcp_parse_reply+0x46c>
 2017920:	01c08134 	movhi	r7,516
 2017924:	39c47d04 	addi	r7,r7,4596
 2017928:	01816844 	movi	r6,1441
 201792c:	01408134 	movhi	r5,516
 2017930:	2944b304 	addi	r5,r5,4812
 2017934:	01008134 	movhi	r4,516
 2017938:	21048704 	addi	r4,r4,4636
 201793c:	20009e40 	call	20009e4 <printf>
 2017940:	003fff06 	br	2017940 <__alt_mem_mem_0+0xfcff7940>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 2017944:	00800044 	movi	r2,1
 2017948:	e0bff915 	stw	r2,-28(fp)
        break;
 201794c:	00002f06 	br	2017a0c <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 2017950:	e0bff803 	ldbu	r2,-32(fp)
 2017954:	10800120 	cmpeqi	r2,r2,4
 2017958:	1000091e 	bne	r2,zero,2017980 <dhcp_parse_reply+0x4a8>
 201795c:	01c08134 	movhi	r7,516
 2017960:	39c47d04 	addi	r7,r7,4596
 2017964:	01816944 	movi	r6,1445
 2017968:	01408134 	movhi	r5,516
 201796c:	2944a704 	addi	r5,r5,4764
 2017970:	01008134 	movhi	r4,516
 2017974:	21048704 	addi	r4,r4,4636
 2017978:	20009e40 	call	20009e4 <printf>
 201797c:	003fff06 	br	201797c <__alt_mem_mem_0+0xfcff797c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 2017980:	00800084 	movi	r2,2
 2017984:	e0bff915 	stw	r2,-28(fp)
        break;
 2017988:	00002006 	br	2017a0c <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 201798c:	e0bff803 	ldbu	r2,-32(fp)
 2017990:	10800120 	cmpeqi	r2,r2,4
 2017994:	1000091e 	bne	r2,zero,20179bc <dhcp_parse_reply+0x4e4>
 2017998:	01c08134 	movhi	r7,516
 201799c:	39c47d04 	addi	r7,r7,4596
 20179a0:	01816a44 	movi	r6,1449
 20179a4:	01408134 	movhi	r5,516
 20179a8:	2944a704 	addi	r5,r5,4764
 20179ac:	01008134 	movhi	r4,516
 20179b0:	21048704 	addi	r4,r4,4636
 20179b4:	20009e40 	call	20009e4 <printf>
 20179b8:	003fff06 	br	20179b8 <__alt_mem_mem_0+0xfcff79b8>
        decode_idx = DHCP_OPTION_IDX_T1;
 20179bc:	00800104 	movi	r2,4
 20179c0:	e0bff915 	stw	r2,-28(fp)
        break;
 20179c4:	00001106 	br	2017a0c <dhcp_parse_reply+0x534>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 20179c8:	e0bff803 	ldbu	r2,-32(fp)
 20179cc:	10800120 	cmpeqi	r2,r2,4
 20179d0:	1000091e 	bne	r2,zero,20179f8 <dhcp_parse_reply+0x520>
 20179d4:	01c08134 	movhi	r7,516
 20179d8:	39c47d04 	addi	r7,r7,4596
 20179dc:	01816b44 	movi	r6,1453
 20179e0:	01408134 	movhi	r5,516
 20179e4:	2944a704 	addi	r5,r5,4764
 20179e8:	01008134 	movhi	r4,516
 20179ec:	21048704 	addi	r4,r4,4636
 20179f0:	20009e40 	call	20009e4 <printf>
 20179f4:	003fff06 	br	20179f4 <__alt_mem_mem_0+0xfcff79f4>
        decode_idx = DHCP_OPTION_IDX_T2;
 20179f8:	00800144 	movi	r2,5
 20179fc:	e0bff915 	stw	r2,-28(fp)
        break;
 2017a00:	00000206 	br	2017a0c <dhcp_parse_reply+0x534>
      default:
        decode_len = 0;
 2017a04:	e03ff845 	stb	zero,-31(fp)
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
 2017a08:	0001883a 	nop
    }
    offset += len + 2;
 2017a0c:	e0fff803 	ldbu	r3,-32(fp)
 2017a10:	e0bff30b 	ldhu	r2,-52(fp)
 2017a14:	1885883a 	add	r2,r3,r2
 2017a18:	10800084 	addi	r2,r2,2
 2017a1c:	e0bff30d 	sth	r2,-52(fp)
    if (decode_len > 0) {
 2017a20:	e0bff843 	ldbu	r2,-31(fp)
 2017a24:	10007b26 	beq	r2,zero,2017c14 <dhcp_parse_reply+0x73c>
      u32_t value = 0;
 2017a28:	e03ffd15 	stw	zero,-12(fp)
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
 2017a2c:	008085b4 	movhi	r2,534
 2017a30:	10885504 	addi	r2,r2,8532
 2017a34:	e0fff917 	ldw	r3,-28(fp)
 2017a38:	10c5883a 	add	r2,r2,r3
 2017a3c:	10800003 	ldbu	r2,0(r2)
 2017a40:	10803fcc 	andi	r2,r2,255
 2017a44:	1000731e 	bne	r2,zero,2017c14 <dhcp_parse_reply+0x73c>
        copy_len = LWIP_MIN(decode_len, 4);
 2017a48:	e0bff843 	ldbu	r2,-31(fp)
 2017a4c:	10800128 	cmpgeui	r2,r2,4
 2017a50:	1000021e 	bne	r2,zero,2017a5c <dhcp_parse_reply+0x584>
 2017a54:	e0bff843 	ldbu	r2,-31(fp)
 2017a58:	00000106 	br	2017a60 <dhcp_parse_reply+0x588>
 2017a5c:	00800104 	movi	r2,4
 2017a60:	e0bffb0d 	sth	r2,-20(fp)
        pbuf_copy_partial(q, &value, copy_len, val_offset);
 2017a64:	e0fffb0b 	ldhu	r3,-20(fp)
 2017a68:	e13ffa0b 	ldhu	r4,-24(fp)
 2017a6c:	e0bffd04 	addi	r2,fp,-12
 2017a70:	200f883a 	mov	r7,r4
 2017a74:	180d883a 	mov	r6,r3
 2017a78:	100b883a 	mov	r5,r2
 2017a7c:	e13ff517 	ldw	r4,-44(fp)
 2017a80:	201b0240 	call	201b024 <pbuf_copy_partial>
        if (decode_len > 4) {
 2017a84:	e0bff843 	ldbu	r2,-31(fp)
 2017a88:	10800170 	cmpltui	r2,r2,5
 2017a8c:	1000311e 	bne	r2,zero,2017b54 <dhcp_parse_reply+0x67c>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 2017a90:	e0bff843 	ldbu	r2,-31(fp)
 2017a94:	108000cc 	andi	r2,r2,3
 2017a98:	10803fcc 	andi	r2,r2,255
 2017a9c:	10000926 	beq	r2,zero,2017ac4 <dhcp_parse_reply+0x5ec>
 2017aa0:	01c08134 	movhi	r7,516
 2017aa4:	39c47d04 	addi	r7,r7,4596
 2017aa8:	01817004 	movi	r6,1472
 2017aac:	01408134 	movhi	r5,516
 2017ab0:	2944b604 	addi	r5,r5,4824
 2017ab4:	01008134 	movhi	r4,516
 2017ab8:	21048704 	addi	r4,r4,4636
 2017abc:	20009e40 	call	20009e4 <printf>
 2017ac0:	003fff06 	br	2017ac0 <__alt_mem_mem_0+0xfcff7ac0>
          dhcp_got_option(dhcp, decode_idx);
 2017ac4:	008085b4 	movhi	r2,534
 2017ac8:	10885504 	addi	r2,r2,8532
 2017acc:	e0fff917 	ldw	r3,-28(fp)
 2017ad0:	10c5883a 	add	r2,r2,r3
 2017ad4:	00c00044 	movi	r3,1
 2017ad8:	10c00005 	stb	r3,0(r2)
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
 2017adc:	e0bffd17 	ldw	r2,-12(fp)
 2017ae0:	1006d63a 	srli	r3,r2,24
 2017ae4:	e0bffd17 	ldw	r2,-12(fp)
 2017ae8:	1004d23a 	srli	r2,r2,8
 2017aec:	10bfc00c 	andi	r2,r2,65280
 2017af0:	1886b03a 	or	r3,r3,r2
 2017af4:	e0bffd17 	ldw	r2,-12(fp)
 2017af8:	10bfc00c 	andi	r2,r2,65280
 2017afc:	1004923a 	slli	r2,r2,8
 2017b00:	1886b03a 	or	r3,r3,r2
 2017b04:	e0bffd17 	ldw	r2,-12(fp)
 2017b08:	1004963a 	slli	r2,r2,24
 2017b0c:	1888b03a 	or	r4,r3,r2
 2017b10:	008085b4 	movhi	r2,534
 2017b14:	10885804 	addi	r2,r2,8544
 2017b18:	e0fff917 	ldw	r3,-28(fp)
 2017b1c:	18c7883a 	add	r3,r3,r3
 2017b20:	18c7883a 	add	r3,r3,r3
 2017b24:	10c5883a 	add	r2,r2,r3
 2017b28:	11000015 	stw	r4,0(r2)
          decode_len -= 4;
 2017b2c:	e0bff843 	ldbu	r2,-31(fp)
 2017b30:	10bfff04 	addi	r2,r2,-4
 2017b34:	e0bff845 	stb	r2,-31(fp)
          val_offset += 4;
 2017b38:	e0bffa0b 	ldhu	r2,-24(fp)
 2017b3c:	10800104 	addi	r2,r2,4
 2017b40:	e0bffa0d 	sth	r2,-24(fp)
          decode_idx++;
 2017b44:	e0bff917 	ldw	r2,-28(fp)
 2017b48:	10800044 	addi	r2,r2,1
 2017b4c:	e0bff915 	stw	r2,-28(fp)
          goto decode_next;
 2017b50:	003fb606 	br	2017a2c <__alt_mem_mem_0+0xfcff7a2c>
        } else if (decode_len == 4) {
 2017b54:	e0bff843 	ldbu	r2,-31(fp)
 2017b58:	10800118 	cmpnei	r2,r2,4
 2017b5c:	10000f1e 	bne	r2,zero,2017b9c <dhcp_parse_reply+0x6c4>
          value = ntohl(value);
 2017b60:	e0bffd17 	ldw	r2,-12(fp)
 2017b64:	1006d63a 	srli	r3,r2,24
 2017b68:	e0bffd17 	ldw	r2,-12(fp)
 2017b6c:	1004d23a 	srli	r2,r2,8
 2017b70:	10bfc00c 	andi	r2,r2,65280
 2017b74:	1886b03a 	or	r3,r3,r2
 2017b78:	e0bffd17 	ldw	r2,-12(fp)
 2017b7c:	10bfc00c 	andi	r2,r2,65280
 2017b80:	1004923a 	slli	r2,r2,8
 2017b84:	1886b03a 	or	r3,r3,r2
 2017b88:	e0bffd17 	ldw	r2,-12(fp)
 2017b8c:	1004963a 	slli	r2,r2,24
 2017b90:	1884b03a 	or	r2,r3,r2
 2017b94:	e0bffd15 	stw	r2,-12(fp)
 2017b98:	00001006 	br	2017bdc <dhcp_parse_reply+0x704>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 2017b9c:	e0bff843 	ldbu	r2,-31(fp)
 2017ba0:	10800060 	cmpeqi	r2,r2,1
 2017ba4:	1000091e 	bne	r2,zero,2017bcc <dhcp_parse_reply+0x6f4>
 2017ba8:	01c08134 	movhi	r7,516
 2017bac:	39c47d04 	addi	r7,r7,4596
 2017bb0:	01817284 	movi	r6,1482
 2017bb4:	01408134 	movhi	r5,516
 2017bb8:	2944bb04 	addi	r5,r5,4844
 2017bbc:	01008134 	movhi	r4,516
 2017bc0:	21048704 	addi	r4,r4,4636
 2017bc4:	20009e40 	call	20009e4 <printf>
 2017bc8:	003fff06 	br	2017bc8 <__alt_mem_mem_0+0xfcff7bc8>
          value = ((u8_t*)&value)[0];
 2017bcc:	e0bffd04 	addi	r2,fp,-12
 2017bd0:	10800003 	ldbu	r2,0(r2)
 2017bd4:	10803fcc 	andi	r2,r2,255
 2017bd8:	e0bffd15 	stw	r2,-12(fp)
        }
        dhcp_got_option(dhcp, decode_idx);
 2017bdc:	008085b4 	movhi	r2,534
 2017be0:	10885504 	addi	r2,r2,8532
 2017be4:	e0fff917 	ldw	r3,-28(fp)
 2017be8:	10c5883a 	add	r2,r2,r3
 2017bec:	00c00044 	movi	r3,1
 2017bf0:	10c00005 	stb	r3,0(r2)
        dhcp_set_option_value(dhcp, decode_idx, value);
 2017bf4:	e13ffd17 	ldw	r4,-12(fp)
 2017bf8:	008085b4 	movhi	r2,534
 2017bfc:	10885804 	addi	r2,r2,8544
 2017c00:	e0fff917 	ldw	r3,-28(fp)
 2017c04:	18c7883a 	add	r3,r3,r3
 2017c08:	18c7883a 	add	r3,r3,r3
 2017c0c:	10c5883a 	add	r2,r2,r3
 2017c10:	11000015 	stw	r4,0(r2)
      }
    }
    if (offset >= q->len) {
 2017c14:	e0bff517 	ldw	r2,-44(fp)
 2017c18:	1080028b 	ldhu	r2,10(r2)
 2017c1c:	10bfffcc 	andi	r2,r2,65535
 2017c20:	e0fff30b 	ldhu	r3,-52(fp)
 2017c24:	18801536 	bltu	r3,r2,2017c7c <dhcp_parse_reply+0x7a4>
      offset -= q->len;
 2017c28:	e0bff517 	ldw	r2,-44(fp)
 2017c2c:	1080028b 	ldhu	r2,10(r2)
 2017c30:	e0fff30b 	ldhu	r3,-52(fp)
 2017c34:	1885c83a 	sub	r2,r3,r2
 2017c38:	e0bff30d 	sth	r2,-52(fp)
      offset_max -= q->len;
 2017c3c:	e0bff517 	ldw	r2,-44(fp)
 2017c40:	1080028b 	ldhu	r2,10(r2)
 2017c44:	e0fff38b 	ldhu	r3,-50(fp)
 2017c48:	1885c83a 	sub	r2,r3,r2
 2017c4c:	e0bff38d 	sth	r2,-50(fp)
      if ((offset < offset_max) && offset_max) {
 2017c50:	e0fff30b 	ldhu	r3,-52(fp)
 2017c54:	e0bff38b 	ldhu	r2,-50(fp)
 2017c58:	1880142e 	bgeu	r3,r2,2017cac <dhcp_parse_reply+0x7d4>
 2017c5c:	e0bff38b 	ldhu	r2,-50(fp)
 2017c60:	10001226 	beq	r2,zero,2017cac <dhcp_parse_reply+0x7d4>
        q = q->next;
 2017c64:	e0bff517 	ldw	r2,-44(fp)
 2017c68:	10800017 	ldw	r2,0(r2)
 2017c6c:	e0bff515 	stw	r2,-44(fp)
        LWIP_ASSERT("next pbuf was null", q);
        options = (u8_t*)q->payload;
 2017c70:	e0bff517 	ldw	r2,-44(fp)
 2017c74:	10800117 	ldw	r2,4(r2)
 2017c78:	e0bff215 	stw	r2,-56(fp)
  }
  offset = options_idx;
  offset_max = options_idx_max;
  options = (u8_t*)q->payload;
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
 2017c7c:	e0bff517 	ldw	r2,-44(fp)
 2017c80:	10000a26 	beq	r2,zero,2017cac <dhcp_parse_reply+0x7d4>
 2017c84:	e0bff30b 	ldhu	r2,-52(fp)
 2017c88:	e0fff217 	ldw	r3,-56(fp)
 2017c8c:	1885883a 	add	r2,r3,r2
 2017c90:	10800003 	ldbu	r2,0(r2)
 2017c94:	10803fcc 	andi	r2,r2,255
 2017c98:	10803fe0 	cmpeqi	r2,r2,255
 2017c9c:	1000031e 	bne	r2,zero,2017cac <dhcp_parse_reply+0x7d4>
 2017ca0:	e0fff30b 	ldhu	r3,-52(fp)
 2017ca4:	e0bff38b 	ldhu	r2,-50(fp)
 2017ca8:	18be4b36 	bltu	r3,r2,20175d8 <__alt_mem_mem_0+0xfcff75d8>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 2017cac:	008085b4 	movhi	r2,534
 2017cb0:	10885504 	addi	r2,r2,8532
 2017cb4:	10800003 	ldbu	r2,0(r2)
 2017cb8:	10803fcc 	andi	r2,r2,255
 2017cbc:	10001a26 	beq	r2,zero,2017d28 <dhcp_parse_reply+0x850>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 2017cc0:	008085b4 	movhi	r2,534
 2017cc4:	10885804 	addi	r2,r2,8544
 2017cc8:	10800017 	ldw	r2,0(r2)
 2017ccc:	e0bffc15 	stw	r2,-16(fp)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 2017cd0:	008085b4 	movhi	r2,534
 2017cd4:	10885504 	addi	r2,r2,8532
 2017cd8:	10000005 	stb	zero,0(r2)
    if (overload == DHCP_OVERLOAD_FILE) {
 2017cdc:	e0bffc17 	ldw	r2,-16(fp)
 2017ce0:	10800058 	cmpnei	r2,r2,1
 2017ce4:	1000031e 	bne	r2,zero,2017cf4 <dhcp_parse_reply+0x81c>
      parse_file_as_options = 1;
 2017ce8:	00800044 	movi	r2,1
 2017cec:	e0bff615 	stw	r2,-40(fp)
 2017cf0:	00000d06 	br	2017d28 <dhcp_parse_reply+0x850>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 2017cf4:	e0bffc17 	ldw	r2,-16(fp)
 2017cf8:	10800098 	cmpnei	r2,r2,2
 2017cfc:	1000031e 	bne	r2,zero,2017d0c <dhcp_parse_reply+0x834>
      parse_sname_as_options = 1;
 2017d00:	00800044 	movi	r2,1
 2017d04:	e0bff715 	stw	r2,-36(fp)
 2017d08:	00000706 	br	2017d28 <dhcp_parse_reply+0x850>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 2017d0c:	e0bffc17 	ldw	r2,-16(fp)
 2017d10:	108000d8 	cmpnei	r2,r2,3
 2017d14:	1000041e 	bne	r2,zero,2017d28 <dhcp_parse_reply+0x850>
      parse_sname_as_options = 1;
 2017d18:	00800044 	movi	r2,1
 2017d1c:	e0bff715 	stw	r2,-36(fp)
      parse_file_as_options = 1;
 2017d20:	00800044 	movi	r2,1
 2017d24:	e0bff615 	stw	r2,-40(fp)
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 2017d28:	e0bff617 	ldw	r2,-40(fp)
 2017d2c:	10000626 	beq	r2,zero,2017d48 <dhcp_parse_reply+0x870>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 2017d30:	e03ff615 	stw	zero,-40(fp)
    options_idx = DHCP_FILE_OFS;
 2017d34:	00801b04 	movi	r2,108
 2017d38:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 2017d3c:	00803b04 	movi	r2,236
 2017d40:	e0bff48d 	sth	r2,-46(fp)
    goto again;
 2017d44:	003e0106 	br	201754c <__alt_mem_mem_0+0xfcff754c>
  } else if (parse_sname_as_options) {
 2017d48:	e0bff717 	ldw	r2,-36(fp)
 2017d4c:	10000626 	beq	r2,zero,2017d68 <dhcp_parse_reply+0x890>
    parse_sname_as_options = 0;
 2017d50:	e03ff715 	stw	zero,-36(fp)
    options_idx = DHCP_SNAME_OFS;
 2017d54:	00800b04 	movi	r2,44
 2017d58:	e0bff40d 	sth	r2,-48(fp)
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 2017d5c:	00801b04 	movi	r2,108
 2017d60:	e0bff48d 	sth	r2,-46(fp)
    goto again;
 2017d64:	003df906 	br	201754c <__alt_mem_mem_0+0xfcff754c>
  }
  return ERR_OK;
 2017d68:	0005883a 	mov	r2,zero
}
 2017d6c:	e037883a 	mov	sp,fp
 2017d70:	dfc00117 	ldw	ra,4(sp)
 2017d74:	df000017 	ldw	fp,0(sp)
 2017d78:	dec00204 	addi	sp,sp,8
 2017d7c:	f800283a 	ret

02017d80 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
{
 2017d80:	defff404 	addi	sp,sp,-48
 2017d84:	dfc00b15 	stw	ra,44(sp)
 2017d88:	df000a15 	stw	fp,40(sp)
 2017d8c:	df000a04 	addi	fp,sp,40
 2017d90:	e13ffb15 	stw	r4,-20(fp)
 2017d94:	e17ffc15 	stw	r5,-16(fp)
 2017d98:	e1bffd15 	stw	r6,-12(fp)
 2017d9c:	e1fffe15 	stw	r7,-8(fp)
 2017da0:	e0800217 	ldw	r2,8(fp)
 2017da4:	e0bfff0d 	sth	r2,-4(fp)
  struct netif *netif = (struct netif *)arg;
 2017da8:	e0bffb17 	ldw	r2,-20(fp)
 2017dac:	e0bff715 	stw	r2,-36(fp)
  struct dhcp *dhcp = netif->dhcp;
 2017db0:	e0bff717 	ldw	r2,-36(fp)
 2017db4:	10800a17 	ldw	r2,40(r2)
 2017db8:	e0bff815 	stw	r2,-32(fp)
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 2017dbc:	e0bffd17 	ldw	r2,-12(fp)
 2017dc0:	10800117 	ldw	r2,4(r2)
 2017dc4:	e0bff915 	stw	r2,-28(fp)
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 2017dc8:	e0bffd17 	ldw	r2,-12(fp)
 2017dcc:	1080028b 	ldhu	r2,10(r2)
 2017dd0:	10bfffcc 	andi	r2,r2,65535
 2017dd4:	10800b28 	cmpgeui	r2,r2,44
 2017dd8:	1000aa26 	beq	r2,zero,2018084 <dhcp_recv+0x304>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 2017ddc:	e0bff917 	ldw	r2,-28(fp)
 2017de0:	10800003 	ldbu	r2,0(r2)
 2017de4:	10803fcc 	andi	r2,r2,255
 2017de8:	108000a0 	cmpeqi	r2,r2,2
 2017dec:	1000a726 	beq	r2,zero,201808c <dhcp_recv+0x30c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
 2017df0:	e03ff605 	stb	zero,-40(fp)
 2017df4:	00001006 	br	2017e38 <dhcp_recv+0xb8>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 2017df8:	e0bff603 	ldbu	r2,-40(fp)
 2017dfc:	e0fff717 	ldw	r3,-36(fp)
 2017e00:	1885883a 	add	r2,r3,r2
 2017e04:	10800cc4 	addi	r2,r2,51
 2017e08:	11000003 	ldbu	r4,0(r2)
 2017e0c:	e0bff603 	ldbu	r2,-40(fp)
 2017e10:	e0fff917 	ldw	r3,-28(fp)
 2017e14:	1885883a 	add	r2,r3,r2
 2017e18:	10800704 	addi	r2,r2,28
 2017e1c:	10800003 	ldbu	r2,0(r2)
 2017e20:	20c03fcc 	andi	r3,r4,255
 2017e24:	10803fcc 	andi	r2,r2,255
 2017e28:	18809a1e 	bne	r3,r2,2018094 <dhcp_recv+0x314>
  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
 2017e2c:	e0bff603 	ldbu	r2,-40(fp)
 2017e30:	10800044 	addi	r2,r2,1
 2017e34:	e0bff605 	stb	r2,-40(fp)
 2017e38:	e0bff717 	ldw	r2,-36(fp)
 2017e3c:	10800c83 	ldbu	r2,50(r2)
 2017e40:	10803fcc 	andi	r2,r2,255
 2017e44:	e0fff603 	ldbu	r3,-40(fp)
 2017e48:	18bfeb36 	bltu	r3,r2,2017df8 <__alt_mem_mem_0+0xfcff7df8>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
 2017e4c:	e0bff917 	ldw	r2,-28(fp)
 2017e50:	10c00103 	ldbu	r3,4(r2)
 2017e54:	11000143 	ldbu	r4,5(r2)
 2017e58:	2008923a 	slli	r4,r4,8
 2017e5c:	20c6b03a 	or	r3,r4,r3
 2017e60:	11000183 	ldbu	r4,6(r2)
 2017e64:	2008943a 	slli	r4,r4,16
 2017e68:	20c6b03a 	or	r3,r4,r3
 2017e6c:	108001c3 	ldbu	r2,7(r2)
 2017e70:	1004963a 	slli	r2,r2,24
 2017e74:	10c4b03a 	or	r2,r2,r3
 2017e78:	1006d63a 	srli	r3,r2,24
 2017e7c:	e0bff917 	ldw	r2,-28(fp)
 2017e80:	11000103 	ldbu	r4,4(r2)
 2017e84:	11400143 	ldbu	r5,5(r2)
 2017e88:	280a923a 	slli	r5,r5,8
 2017e8c:	2908b03a 	or	r4,r5,r4
 2017e90:	11400183 	ldbu	r5,6(r2)
 2017e94:	280a943a 	slli	r5,r5,16
 2017e98:	2908b03a 	or	r4,r5,r4
 2017e9c:	108001c3 	ldbu	r2,7(r2)
 2017ea0:	1004963a 	slli	r2,r2,24
 2017ea4:	1104b03a 	or	r2,r2,r4
 2017ea8:	1004d23a 	srli	r2,r2,8
 2017eac:	10bfc00c 	andi	r2,r2,65280
 2017eb0:	1886b03a 	or	r3,r3,r2
 2017eb4:	e0bff917 	ldw	r2,-28(fp)
 2017eb8:	11000103 	ldbu	r4,4(r2)
 2017ebc:	11400143 	ldbu	r5,5(r2)
 2017ec0:	280a923a 	slli	r5,r5,8
 2017ec4:	2908b03a 	or	r4,r5,r4
 2017ec8:	11400183 	ldbu	r5,6(r2)
 2017ecc:	280a943a 	slli	r5,r5,16
 2017ed0:	2908b03a 	or	r4,r5,r4
 2017ed4:	108001c3 	ldbu	r2,7(r2)
 2017ed8:	1004963a 	slli	r2,r2,24
 2017edc:	1104b03a 	or	r2,r2,r4
 2017ee0:	10bfc00c 	andi	r2,r2,65280
 2017ee4:	1004923a 	slli	r2,r2,8
 2017ee8:	1886b03a 	or	r3,r3,r2
 2017eec:	e0bff917 	ldw	r2,-28(fp)
 2017ef0:	11000103 	ldbu	r4,4(r2)
 2017ef4:	11400143 	ldbu	r5,5(r2)
 2017ef8:	280a923a 	slli	r5,r5,8
 2017efc:	2908b03a 	or	r4,r5,r4
 2017f00:	11400183 	ldbu	r5,6(r2)
 2017f04:	280a943a 	slli	r5,r5,16
 2017f08:	2908b03a 	or	r4,r5,r4
 2017f0c:	108001c3 	ldbu	r2,7(r2)
 2017f10:	1004963a 	slli	r2,r2,24
 2017f14:	1104b03a 	or	r2,r2,r4
 2017f18:	1004963a 	slli	r2,r2,24
 2017f1c:	1886b03a 	or	r3,r3,r2
 2017f20:	e0bff817 	ldw	r2,-32(fp)
 2017f24:	10800017 	ldw	r2,0(r2)
 2017f28:	18805c1e 	bne	r3,r2,201809c <dhcp_recv+0x31c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 2017f2c:	e17ffd17 	ldw	r5,-12(fp)
 2017f30:	e13ff817 	ldw	r4,-32(fp)
 2017f34:	20174d80 	call	20174d8 <dhcp_parse_reply>
 2017f38:	10803fcc 	andi	r2,r2,255
 2017f3c:	1080201c 	xori	r2,r2,128
 2017f40:	10bfe004 	addi	r2,r2,-128
 2017f44:	1000571e 	bne	r2,zero,20180a4 <dhcp_recv+0x324>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 2017f48:	008085b4 	movhi	r2,534
 2017f4c:	10885504 	addi	r2,r2,8532
 2017f50:	10800043 	ldbu	r2,1(r2)
 2017f54:	10803fcc 	andi	r2,r2,255
 2017f58:	10005426 	beq	r2,zero,20180ac <dhcp_recv+0x32c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 2017f5c:	008085b4 	movhi	r2,534
 2017f60:	10885804 	addi	r2,r2,8544
 2017f64:	10800117 	ldw	r2,4(r2)
 2017f68:	e0bffa05 	stb	r2,-24(fp)
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 2017f6c:	e0bffa03 	ldbu	r2,-24(fp)
 2017f70:	10800158 	cmpnei	r2,r2,5
 2017f74:	10001c1e 	bne	r2,zero,2017fe8 <dhcp_recv+0x268>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
 2017f78:	e0bff817 	ldw	r2,-32(fp)
 2017f7c:	10800303 	ldbu	r2,12(r2)
 2017f80:	10803fcc 	andi	r2,r2,255
 2017f84:	10800058 	cmpnei	r2,r2,1
 2017f88:	1000051e 	bne	r2,zero,2017fa0 <dhcp_recv+0x220>
      dhcp_handle_ack(netif);
 2017f8c:	e13ff717 	ldw	r4,-36(fp)
 2017f90:	2015d1c0 	call	2015d1c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
 2017f94:	e13ff717 	ldw	r4,-36(fp)
 2017f98:	20155400 	call	2015540 <dhcp_check>
 2017f9c:	00004406 	br	20180b0 <dhcp_recv+0x330>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
 2017fa0:	e0bff817 	ldw	r2,-32(fp)
 2017fa4:	10800303 	ldbu	r2,12(r2)
 2017fa8:	10803fcc 	andi	r2,r2,255
 2017fac:	108000e0 	cmpeqi	r2,r2,3
 2017fb0:	10000a1e 	bne	r2,zero,2017fdc <dhcp_recv+0x25c>
 2017fb4:	e0bff817 	ldw	r2,-32(fp)
 2017fb8:	10800303 	ldbu	r2,12(r2)
 2017fbc:	10803fcc 	andi	r2,r2,255
 2017fc0:	10800120 	cmpeqi	r2,r2,4
 2017fc4:	1000051e 	bne	r2,zero,2017fdc <dhcp_recv+0x25c>
 2017fc8:	e0bff817 	ldw	r2,-32(fp)
 2017fcc:	10800303 	ldbu	r2,12(r2)
 2017fd0:	10803fcc 	andi	r2,r2,255
 2017fd4:	10800158 	cmpnei	r2,r2,5
 2017fd8:	1000351e 	bne	r2,zero,20180b0 <dhcp_recv+0x330>
      dhcp_bind(netif);
 2017fdc:	e13ff717 	ldw	r4,-36(fp)
 2017fe0:	20167b40 	call	20167b4 <dhcp_bind>
 2017fe4:	00003206 	br	20180b0 <dhcp_recv+0x330>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 2017fe8:	e0bffa03 	ldbu	r2,-24(fp)
 2017fec:	10800198 	cmpnei	r2,r2,6
 2017ff0:	1000171e 	bne	r2,zero,2018050 <dhcp_recv+0x2d0>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
 2017ff4:	e0bff817 	ldw	r2,-32(fp)
 2017ff8:	10800303 	ldbu	r2,12(r2)
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 2017ffc:	10803fcc 	andi	r2,r2,255
 2018000:	108000e0 	cmpeqi	r2,r2,3
 2018004:	10000f1e 	bne	r2,zero,2018044 <dhcp_recv+0x2c4>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
 2018008:	e0bff817 	ldw	r2,-32(fp)
 201800c:	10800303 	ldbu	r2,12(r2)
 2018010:	10803fcc 	andi	r2,r2,255
 2018014:	10800060 	cmpeqi	r2,r2,1
 2018018:	10000a1e 	bne	r2,zero,2018044 <dhcp_recv+0x2c4>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
 201801c:	e0bff817 	ldw	r2,-32(fp)
 2018020:	10800303 	ldbu	r2,12(r2)
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
 2018024:	10803fcc 	andi	r2,r2,255
 2018028:	10800120 	cmpeqi	r2,r2,4
 201802c:	1000051e 	bne	r2,zero,2018044 <dhcp_recv+0x2c4>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
 2018030:	e0bff817 	ldw	r2,-32(fp)
 2018034:	10800303 	ldbu	r2,12(r2)
 2018038:	10803fcc 	andi	r2,r2,255
 201803c:	10800158 	cmpnei	r2,r2,5
 2018040:	1000031e 	bne	r2,zero,2018050 <dhcp_recv+0x2d0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 2018044:	e13ff717 	ldw	r4,-36(fp)
 2018048:	20154ec0 	call	20154ec <dhcp_handle_nak>
 201804c:	00001806 	br	20180b0 <dhcp_recv+0x330>
  }
  /* received a DHCP_OFFER in DHCP_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
 2018050:	e0bffa03 	ldbu	r2,-24(fp)
 2018054:	10800098 	cmpnei	r2,r2,2
 2018058:	1000151e 	bne	r2,zero,20180b0 <dhcp_recv+0x330>
 201805c:	e0bff817 	ldw	r2,-32(fp)
 2018060:	10800303 	ldbu	r2,12(r2)
 2018064:	10803fcc 	andi	r2,r2,255
 2018068:	10800198 	cmpnei	r2,r2,6
 201806c:	1000101e 	bne	r2,zero,20180b0 <dhcp_recv+0x330>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
    dhcp->request_timeout = 0;
 2018070:	e0bff817 	ldw	r2,-32(fp)
 2018074:	1000068d 	sth	zero,26(r2)
    /* remember offered lease */
    dhcp_handle_offer(netif);
 2018078:	e13ff717 	ldw	r4,-36(fp)
 201807c:	20155e00 	call	20155e0 <dhcp_handle_offer>
 2018080:	00000b06 	br	20180b0 <dhcp_recv+0x330>

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
 2018084:	0001883a 	nop
 2018088:	00000906 	br	20180b0 <dhcp_recv+0x330>
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
 201808c:	0001883a 	nop
 2018090:	00000706 	br	20180b0 <dhcp_recv+0x330>
  for (i = 0; i < netif->hwaddr_len; i++) {
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
        ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
 2018094:	0001883a 	nop
 2018098:	00000506 	br	20180b0 <dhcp_recv+0x330>
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
 201809c:	0001883a 	nop
 20180a0:	00000306 	br	20180b0 <dhcp_recv+0x330>
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
 20180a4:	0001883a 	nop
 20180a8:	00000106 	br	20180b0 <dhcp_recv+0x330>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
 20180ac:	0001883a 	nop
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
 20180b0:	e0bff817 	ldw	r2,-32(fp)
 20180b4:	10000215 	stw	zero,8(r2)
  pbuf_free(p);
 20180b8:	e13ffd17 	ldw	r4,-12(fp)
 20180bc:	201aa200 	call	201aa20 <pbuf_free>
}
 20180c0:	0001883a 	nop
 20180c4:	e037883a 	mov	sp,fp
 20180c8:	dfc00117 	ldw	ra,4(sp)
 20180cc:	df000017 	ldw	fp,0(sp)
 20180d0:	dec00204 	addi	sp,sp,8
 20180d4:	f800283a 	ret

020180d8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 20180d8:	defffa04 	addi	sp,sp,-24
 20180dc:	dfc00515 	stw	ra,20(sp)
 20180e0:	df000415 	stw	fp,16(sp)
 20180e4:	df000404 	addi	fp,sp,16
 20180e8:	e13ffd15 	stw	r4,-12(fp)
 20180ec:	e17ffe15 	stw	r5,-8(fp)
 20180f0:	3005883a 	mov	r2,r6
 20180f4:	e0bfff05 	stb	r2,-4(fp)
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 20180f8:	e0bffd17 	ldw	r2,-12(fp)
 20180fc:	1000091e 	bne	r2,zero,2018124 <dhcp_create_msg+0x4c>
 2018100:	01c08134 	movhi	r7,516
 2018104:	39c47d04 	addi	r7,r7,4596
 2018108:	0181a244 	movi	r6,1673
 201810c:	01408134 	movhi	r5,516
 2018110:	2944c004 	addi	r5,r5,4864
 2018114:	01008134 	movhi	r4,516
 2018118:	21048704 	addi	r4,r4,4636
 201811c:	20009e40 	call	20009e4 <printf>
 2018120:	003fff06 	br	2018120 <__alt_mem_mem_0+0xfcff8120>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 2018124:	e0bffe17 	ldw	r2,-8(fp)
 2018128:	1000091e 	bne	r2,zero,2018150 <dhcp_create_msg+0x78>
 201812c:	01c08134 	movhi	r7,516
 2018130:	39c47d04 	addi	r7,r7,4596
 2018134:	0181a284 	movi	r6,1674
 2018138:	01408134 	movhi	r5,516
 201813c:	2944c804 	addi	r5,r5,4896
 2018140:	01008134 	movhi	r4,516
 2018144:	21048704 	addi	r4,r4,4636
 2018148:	20009e40 	call	20009e4 <printf>
 201814c:	003fff06 	br	201814c <__alt_mem_mem_0+0xfcff814c>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 2018150:	000d883a 	mov	r6,zero
 2018154:	01404d04 	movi	r5,308
 2018158:	0009883a 	mov	r4,zero
 201815c:	201a2640 	call	201a264 <pbuf_alloc>
 2018160:	1007883a 	mov	r3,r2
 2018164:	e0bffe17 	ldw	r2,-8(fp)
 2018168:	10c00415 	stw	r3,16(r2)
  if (dhcp->p_out == NULL) {
 201816c:	e0bffe17 	ldw	r2,-8(fp)
 2018170:	10800417 	ldw	r2,16(r2)
 2018174:	1000021e 	bne	r2,zero,2018180 <dhcp_create_msg+0xa8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 2018178:	00bfffc4 	movi	r2,-1
 201817c:	00013206 	br	2018648 <dhcp_create_msg+0x570>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* reuse transaction identifier in retransmissions */
  if (dhcp->tries == 0) {
 2018180:	e0bffe17 	ldw	r2,-8(fp)
 2018184:	10800343 	ldbu	r2,13(r2)
 2018188:	10803fcc 	andi	r2,r2,255
 201818c:	1000031e 	bne	r2,zero,201819c <dhcp_create_msg+0xc4>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
    xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    xid++;
 2018190:	d0a00c17 	ldw	r2,-32720(gp)
 2018194:	10800044 	addi	r2,r2,1
 2018198:	d0a00c15 	stw	r2,-32720(gp)
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
  }
  dhcp->xid = xid;
 201819c:	d0e00c17 	ldw	r3,-32720(gp)
 20181a0:	e0bffe17 	ldw	r2,-8(fp)
 20181a4:	10c00015 	stw	r3,0(r2)
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 20181a8:	e0bffe17 	ldw	r2,-8(fp)
 20181ac:	10800417 	ldw	r2,16(r2)
 20181b0:	10c00117 	ldw	r3,4(r2)
 20181b4:	e0bffe17 	ldw	r2,-8(fp)
 20181b8:	10c00515 	stw	r3,20(r2)

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 20181bc:	e0bffe17 	ldw	r2,-8(fp)
 20181c0:	10800517 	ldw	r2,20(r2)
 20181c4:	00c00044 	movi	r3,1
 20181c8:	10c00005 	stb	r3,0(r2)
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 20181cc:	e0bffe17 	ldw	r2,-8(fp)
 20181d0:	10800517 	ldw	r2,20(r2)
 20181d4:	00c00044 	movi	r3,1
 20181d8:	10c00045 	stb	r3,1(r2)
  dhcp->msg_out->hlen = netif->hwaddr_len;
 20181dc:	e0bffe17 	ldw	r2,-8(fp)
 20181e0:	10800517 	ldw	r2,20(r2)
 20181e4:	e0fffd17 	ldw	r3,-12(fp)
 20181e8:	18c00c83 	ldbu	r3,50(r3)
 20181ec:	10c00085 	stb	r3,2(r2)
  dhcp->msg_out->hops = 0;
 20181f0:	e0bffe17 	ldw	r2,-8(fp)
 20181f4:	10800517 	ldw	r2,20(r2)
 20181f8:	100000c5 	stb	zero,3(r2)
  dhcp->msg_out->xid = htonl(dhcp->xid);
 20181fc:	e0bffe17 	ldw	r2,-8(fp)
 2018200:	10800517 	ldw	r2,20(r2)
 2018204:	e0fffe17 	ldw	r3,-8(fp)
 2018208:	18c00017 	ldw	r3,0(r3)
 201820c:	1808d63a 	srli	r4,r3,24
 2018210:	e0fffe17 	ldw	r3,-8(fp)
 2018214:	18c00017 	ldw	r3,0(r3)
 2018218:	1806d23a 	srli	r3,r3,8
 201821c:	18ffc00c 	andi	r3,r3,65280
 2018220:	20c8b03a 	or	r4,r4,r3
 2018224:	e0fffe17 	ldw	r3,-8(fp)
 2018228:	18c00017 	ldw	r3,0(r3)
 201822c:	18ffc00c 	andi	r3,r3,65280
 2018230:	1806923a 	slli	r3,r3,8
 2018234:	20c8b03a 	or	r4,r4,r3
 2018238:	e0fffe17 	ldw	r3,-8(fp)
 201823c:	18c00017 	ldw	r3,0(r3)
 2018240:	1806963a 	slli	r3,r3,24
 2018244:	20c6b03a 	or	r3,r4,r3
 2018248:	19803fcc 	andi	r6,r3,255
 201824c:	11000103 	ldbu	r4,4(r2)
 2018250:	2008703a 	and	r4,r4,zero
 2018254:	200b883a 	mov	r5,r4
 2018258:	3009883a 	mov	r4,r6
 201825c:	2908b03a 	or	r4,r5,r4
 2018260:	11000105 	stb	r4,4(r2)
 2018264:	1808d23a 	srli	r4,r3,8
 2018268:	21803fcc 	andi	r6,r4,255
 201826c:	11000143 	ldbu	r4,5(r2)
 2018270:	2008703a 	and	r4,r4,zero
 2018274:	200b883a 	mov	r5,r4
 2018278:	3009883a 	mov	r4,r6
 201827c:	2908b03a 	or	r4,r5,r4
 2018280:	11000145 	stb	r4,5(r2)
 2018284:	1808d43a 	srli	r4,r3,16
 2018288:	21803fcc 	andi	r6,r4,255
 201828c:	11000183 	ldbu	r4,6(r2)
 2018290:	2008703a 	and	r4,r4,zero
 2018294:	200b883a 	mov	r5,r4
 2018298:	3009883a 	mov	r4,r6
 201829c:	2908b03a 	or	r4,r5,r4
 20182a0:	11000185 	stb	r4,6(r2)
 20182a4:	180ad63a 	srli	r5,r3,24
 20182a8:	10c001c3 	ldbu	r3,7(r2)
 20182ac:	1806703a 	and	r3,r3,zero
 20182b0:	1809883a 	mov	r4,r3
 20182b4:	2807883a 	mov	r3,r5
 20182b8:	20c6b03a 	or	r3,r4,r3
 20182bc:	10c001c5 	stb	r3,7(r2)
  dhcp->msg_out->secs = 0;
 20182c0:	e0bffe17 	ldw	r2,-8(fp)
 20182c4:	10800517 	ldw	r2,20(r2)
 20182c8:	10c00203 	ldbu	r3,8(r2)
 20182cc:	1806703a 	and	r3,r3,zero
 20182d0:	10c00205 	stb	r3,8(r2)
 20182d4:	10c00243 	ldbu	r3,9(r2)
 20182d8:	1806703a 	and	r3,r3,zero
 20182dc:	10c00245 	stb	r3,9(r2)
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 20182e0:	e0bffe17 	ldw	r2,-8(fp)
 20182e4:	10800517 	ldw	r2,20(r2)
 20182e8:	10c00283 	ldbu	r3,10(r2)
 20182ec:	1806703a 	and	r3,r3,zero
 20182f0:	10c00285 	stb	r3,10(r2)
 20182f4:	10c002c3 	ldbu	r3,11(r2)
 20182f8:	1806703a 	and	r3,r3,zero
 20182fc:	10c002c5 	stb	r3,11(r2)
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
 2018300:	e0bffe17 	ldw	r2,-8(fp)
 2018304:	10800517 	ldw	r2,20(r2)
 2018308:	10c00303 	ldbu	r3,12(r2)
 201830c:	1806703a 	and	r3,r3,zero
 2018310:	10c00305 	stb	r3,12(r2)
 2018314:	10c00343 	ldbu	r3,13(r2)
 2018318:	1806703a 	and	r3,r3,zero
 201831c:	10c00345 	stb	r3,13(r2)
 2018320:	10c00383 	ldbu	r3,14(r2)
 2018324:	1806703a 	and	r3,r3,zero
 2018328:	10c00385 	stb	r3,14(r2)
 201832c:	10c003c3 	ldbu	r3,15(r2)
 2018330:	1806703a 	and	r3,r3,zero
 2018334:	10c003c5 	stb	r3,15(r2)
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
 2018338:	e0bfff03 	ldbu	r2,-4(fp)
 201833c:	10800220 	cmpeqi	r2,r2,8
 2018340:	1000101e 	bne	r2,zero,2018384 <dhcp_create_msg+0x2ac>
 2018344:	e0bfff03 	ldbu	r2,-4(fp)
 2018348:	10800120 	cmpeqi	r2,r2,4
 201834c:	10000d1e 	bne	r2,zero,2018384 <dhcp_create_msg+0x2ac>
 2018350:	e0bfff03 	ldbu	r2,-4(fp)
 2018354:	108000d8 	cmpnei	r2,r2,3
 2018358:	10002c1e 	bne	r2,zero,201840c <dhcp_create_msg+0x334>
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
 201835c:	e0bffe17 	ldw	r2,-8(fp)
 2018360:	10800303 	ldbu	r2,12(r2)
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
 2018364:	10803fcc 	andi	r2,r2,255
 2018368:	10800160 	cmpeqi	r2,r2,5
 201836c:	1000051e 	bne	r2,zero,2018384 <dhcp_create_msg+0x2ac>
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
 2018370:	e0bffe17 	ldw	r2,-8(fp)
 2018374:	10800303 	ldbu	r2,12(r2)
 2018378:	10803fcc 	andi	r2,r2,255
 201837c:	10800118 	cmpnei	r2,r2,4
 2018380:	1000221e 	bne	r2,zero,201840c <dhcp_create_msg+0x334>
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
 2018384:	e0bffe17 	ldw	r2,-8(fp)
 2018388:	10800517 	ldw	r2,20(r2)
 201838c:	e0fffd17 	ldw	r3,-12(fp)
 2018390:	18c00117 	ldw	r3,4(r3)
 2018394:	19803fcc 	andi	r6,r3,255
 2018398:	11000303 	ldbu	r4,12(r2)
 201839c:	2008703a 	and	r4,r4,zero
 20183a0:	200b883a 	mov	r5,r4
 20183a4:	3009883a 	mov	r4,r6
 20183a8:	2908b03a 	or	r4,r5,r4
 20183ac:	11000305 	stb	r4,12(r2)
 20183b0:	1808d23a 	srli	r4,r3,8
 20183b4:	21803fcc 	andi	r6,r4,255
 20183b8:	11000343 	ldbu	r4,13(r2)
 20183bc:	2008703a 	and	r4,r4,zero
 20183c0:	200b883a 	mov	r5,r4
 20183c4:	3009883a 	mov	r4,r6
 20183c8:	2908b03a 	or	r4,r5,r4
 20183cc:	11000345 	stb	r4,13(r2)
 20183d0:	1808d43a 	srli	r4,r3,16
 20183d4:	21803fcc 	andi	r6,r4,255
 20183d8:	11000383 	ldbu	r4,14(r2)
 20183dc:	2008703a 	and	r4,r4,zero
 20183e0:	200b883a 	mov	r5,r4
 20183e4:	3009883a 	mov	r4,r6
 20183e8:	2908b03a 	or	r4,r5,r4
 20183ec:	11000385 	stb	r4,14(r2)
 20183f0:	180ad63a 	srli	r5,r3,24
 20183f4:	10c003c3 	ldbu	r3,15(r2)
 20183f8:	1806703a 	and	r3,r3,zero
 20183fc:	1809883a 	mov	r4,r3
 2018400:	2807883a 	mov	r3,r5
 2018404:	20c6b03a 	or	r3,r4,r3
 2018408:	10c003c5 	stb	r3,15(r2)
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
 201840c:	e0bffe17 	ldw	r2,-8(fp)
 2018410:	10800517 	ldw	r2,20(r2)
 2018414:	10c00403 	ldbu	r3,16(r2)
 2018418:	1806703a 	and	r3,r3,zero
 201841c:	10c00405 	stb	r3,16(r2)
 2018420:	10c00443 	ldbu	r3,17(r2)
 2018424:	1806703a 	and	r3,r3,zero
 2018428:	10c00445 	stb	r3,17(r2)
 201842c:	10c00483 	ldbu	r3,18(r2)
 2018430:	1806703a 	and	r3,r3,zero
 2018434:	10c00485 	stb	r3,18(r2)
 2018438:	10c004c3 	ldbu	r3,19(r2)
 201843c:	1806703a 	and	r3,r3,zero
 2018440:	10c004c5 	stb	r3,19(r2)
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
 2018444:	e0bffe17 	ldw	r2,-8(fp)
 2018448:	10800517 	ldw	r2,20(r2)
 201844c:	10c00503 	ldbu	r3,20(r2)
 2018450:	1806703a 	and	r3,r3,zero
 2018454:	10c00505 	stb	r3,20(r2)
 2018458:	10c00543 	ldbu	r3,21(r2)
 201845c:	1806703a 	and	r3,r3,zero
 2018460:	10c00545 	stb	r3,21(r2)
 2018464:	10c00583 	ldbu	r3,22(r2)
 2018468:	1806703a 	and	r3,r3,zero
 201846c:	10c00585 	stb	r3,22(r2)
 2018470:	10c005c3 	ldbu	r3,23(r2)
 2018474:	1806703a 	and	r3,r3,zero
 2018478:	10c005c5 	stb	r3,23(r2)
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
 201847c:	e0bffe17 	ldw	r2,-8(fp)
 2018480:	10800517 	ldw	r2,20(r2)
 2018484:	10c00603 	ldbu	r3,24(r2)
 2018488:	1806703a 	and	r3,r3,zero
 201848c:	10c00605 	stb	r3,24(r2)
 2018490:	10c00643 	ldbu	r3,25(r2)
 2018494:	1806703a 	and	r3,r3,zero
 2018498:	10c00645 	stb	r3,25(r2)
 201849c:	10c00683 	ldbu	r3,26(r2)
 20184a0:	1806703a 	and	r3,r3,zero
 20184a4:	10c00685 	stb	r3,26(r2)
 20184a8:	10c006c3 	ldbu	r3,27(r2)
 20184ac:	1806703a 	and	r3,r3,zero
 20184b0:	10c006c5 	stb	r3,27(r2)
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 20184b4:	e03ffc0d 	sth	zero,-16(fp)
 20184b8:	00001606 	br	2018514 <dhcp_create_msg+0x43c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
 20184bc:	e0bffe17 	ldw	r2,-8(fp)
 20184c0:	11000517 	ldw	r4,20(r2)
 20184c4:	e0fffc0b 	ldhu	r3,-16(fp)
 20184c8:	e0bffd17 	ldw	r2,-12(fp)
 20184cc:	10800c83 	ldbu	r2,50(r2)
 20184d0:	10803fcc 	andi	r2,r2,255
 20184d4:	10bfffcc 	andi	r2,r2,65535
 20184d8:	e17ffc0b 	ldhu	r5,-16(fp)
 20184dc:	2880062e 	bgeu	r5,r2,20184f8 <dhcp_create_msg+0x420>
 20184e0:	e0bffc0b 	ldhu	r2,-16(fp)
 20184e4:	e17ffd17 	ldw	r5,-12(fp)
 20184e8:	2885883a 	add	r2,r5,r2
 20184ec:	10800cc4 	addi	r2,r2,51
 20184f0:	10800003 	ldbu	r2,0(r2)
 20184f4:	00000106 	br	20184fc <dhcp_create_msg+0x424>
 20184f8:	0005883a 	mov	r2,zero
 20184fc:	20c7883a 	add	r3,r4,r3
 2018500:	18c00704 	addi	r3,r3,28
 2018504:	18800005 	stb	r2,0(r3)
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 2018508:	e0bffc0b 	ldhu	r2,-16(fp)
 201850c:	10800044 	addi	r2,r2,1
 2018510:	e0bffc0d 	sth	r2,-16(fp)
 2018514:	e0bffc0b 	ldhu	r2,-16(fp)
 2018518:	10800430 	cmpltui	r2,r2,16
 201851c:	103fe71e 	bne	r2,zero,20184bc <__alt_mem_mem_0+0xfcff84bc>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 2018520:	e03ffc0d 	sth	zero,-16(fp)
 2018524:	00000906 	br	201854c <dhcp_create_msg+0x474>
    dhcp->msg_out->sname[i] = 0;
 2018528:	e0bffe17 	ldw	r2,-8(fp)
 201852c:	10c00517 	ldw	r3,20(r2)
 2018530:	e0bffc0b 	ldhu	r2,-16(fp)
 2018534:	1885883a 	add	r2,r3,r2
 2018538:	10800b04 	addi	r2,r2,44
 201853c:	10000005 	stb	zero,0(r2)
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 2018540:	e0bffc0b 	ldhu	r2,-16(fp)
 2018544:	10800044 	addi	r2,r2,1
 2018548:	e0bffc0d 	sth	r2,-16(fp)
 201854c:	e0bffc0b 	ldhu	r2,-16(fp)
 2018550:	10801030 	cmpltui	r2,r2,64
 2018554:	103ff41e 	bne	r2,zero,2018528 <__alt_mem_mem_0+0xfcff8528>
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 2018558:	e03ffc0d 	sth	zero,-16(fp)
 201855c:	00000906 	br	2018584 <dhcp_create_msg+0x4ac>
    dhcp->msg_out->file[i] = 0;
 2018560:	e0bffe17 	ldw	r2,-8(fp)
 2018564:	10c00517 	ldw	r3,20(r2)
 2018568:	e0bffc0b 	ldhu	r2,-16(fp)
 201856c:	1885883a 	add	r2,r3,r2
 2018570:	10801b04 	addi	r2,r2,108
 2018574:	10000005 	stb	zero,0(r2)
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 2018578:	e0bffc0b 	ldhu	r2,-16(fp)
 201857c:	10800044 	addi	r2,r2,1
 2018580:	e0bffc0d 	sth	r2,-16(fp)
 2018584:	e0bffc0b 	ldhu	r2,-16(fp)
 2018588:	10802030 	cmpltui	r2,r2,128
 201858c:	103ff41e 	bne	r2,zero,2018560 <__alt_mem_mem_0+0xfcff8560>
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 2018590:	e0bffe17 	ldw	r2,-8(fp)
 2018594:	10800517 	ldw	r2,20(r2)
 2018598:	10c03b03 	ldbu	r3,236(r2)
 201859c:	1806703a 	and	r3,r3,zero
 20185a0:	18c018d4 	ori	r3,r3,99
 20185a4:	10c03b05 	stb	r3,236(r2)
 20185a8:	10c03b43 	ldbu	r3,237(r2)
 20185ac:	1806703a 	and	r3,r3,zero
 20185b0:	1809883a 	mov	r4,r3
 20185b4:	00ffe084 	movi	r3,-126
 20185b8:	20c6b03a 	or	r3,r4,r3
 20185bc:	10c03b45 	stb	r3,237(r2)
 20185c0:	10c03b83 	ldbu	r3,238(r2)
 20185c4:	1806703a 	and	r3,r3,zero
 20185c8:	18c014d4 	ori	r3,r3,83
 20185cc:	10c03b85 	stb	r3,238(r2)
 20185d0:	10c03bc3 	ldbu	r3,239(r2)
 20185d4:	1806703a 	and	r3,r3,zero
 20185d8:	18c018d4 	ori	r3,r3,99
 20185dc:	10c03bc5 	stb	r3,239(r2)
  dhcp->options_out_len = 0;
 20185e0:	e0bffe17 	ldw	r2,-8(fp)
 20185e4:	1000060d 	sth	zero,24(r2)
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 20185e8:	e03ffc0d 	sth	zero,-16(fp)
 20185ec:	00000a06 	br	2018618 <dhcp_create_msg+0x540>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 20185f0:	e0bffe17 	ldw	r2,-8(fp)
 20185f4:	10c00517 	ldw	r3,20(r2)
 20185f8:	e0bffc0b 	ldhu	r2,-16(fp)
 20185fc:	e13ffc0b 	ldhu	r4,-16(fp)
 2018600:	1885883a 	add	r2,r3,r2
 2018604:	10803c04 	addi	r2,r2,240
 2018608:	11000005 	stb	r4,0(r2)
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 201860c:	e0bffc0b 	ldhu	r2,-16(fp)
 2018610:	10800044 	addi	r2,r2,1
 2018614:	e0bffc0d 	sth	r2,-16(fp)
 2018618:	e0bffc0b 	ldhu	r2,-16(fp)
 201861c:	10801130 	cmpltui	r2,r2,68
 2018620:	103ff31e 	bne	r2,zero,20185f0 <__alt_mem_mem_0+0xfcff85f0>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 2018624:	01800044 	movi	r6,1
 2018628:	01400d44 	movi	r5,53
 201862c:	e13ffe17 	ldw	r4,-8(fp)
 2018630:	201715c0 	call	201715c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 2018634:	e0bfff03 	ldbu	r2,-4(fp)
 2018638:	100b883a 	mov	r5,r2
 201863c:	e13ffe17 	ldw	r4,-8(fp)
 2018640:	20171f80 	call	20171f8 <dhcp_option_byte>
  return ERR_OK;
 2018644:	0005883a 	mov	r2,zero
}
 2018648:	e037883a 	mov	sp,fp
 201864c:	dfc00117 	ldw	ra,4(sp)
 2018650:	df000017 	ldw	fp,0(sp)
 2018654:	dec00204 	addi	sp,sp,8
 2018658:	f800283a 	ret

0201865c <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 201865c:	defffd04 	addi	sp,sp,-12
 2018660:	dfc00215 	stw	ra,8(sp)
 2018664:	df000115 	stw	fp,4(sp)
 2018668:	df000104 	addi	fp,sp,4
 201866c:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 2018670:	e0bfff17 	ldw	r2,-4(fp)
 2018674:	1000091e 	bne	r2,zero,201869c <dhcp_delete_msg+0x40>
 2018678:	01c08134 	movhi	r7,516
 201867c:	39c47d04 	addi	r7,r7,4596
 2018680:	0181b584 	movi	r6,1750
 2018684:	01408134 	movhi	r5,516
 2018688:	2944d004 	addi	r5,r5,4928
 201868c:	01008134 	movhi	r4,516
 2018690:	21048704 	addi	r4,r4,4636
 2018694:	20009e40 	call	20009e4 <printf>
 2018698:	003fff06 	br	2018698 <__alt_mem_mem_0+0xfcff8698>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  if (dhcp->p_out != NULL) {
 201869c:	e0bfff17 	ldw	r2,-4(fp)
 20186a0:	10800417 	ldw	r2,16(r2)
 20186a4:	10000426 	beq	r2,zero,20186b8 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 20186a8:	e0bfff17 	ldw	r2,-4(fp)
 20186ac:	10800417 	ldw	r2,16(r2)
 20186b0:	1009883a 	mov	r4,r2
 20186b4:	201aa200 	call	201aa20 <pbuf_free>
  }
  dhcp->p_out = NULL;
 20186b8:	e0bfff17 	ldw	r2,-4(fp)
 20186bc:	10000415 	stw	zero,16(r2)
  dhcp->msg_out = NULL;
 20186c0:	e0bfff17 	ldw	r2,-4(fp)
 20186c4:	10000515 	stw	zero,20(r2)
}
 20186c8:	0001883a 	nop
 20186cc:	e037883a 	mov	sp,fp
 20186d0:	dfc00117 	ldw	ra,4(sp)
 20186d4:	df000017 	ldw	fp,0(sp)
 20186d8:	dec00204 	addi	sp,sp,8
 20186dc:	f800283a 	ret

020186e0 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 20186e0:	defffd04 	addi	sp,sp,-12
 20186e4:	dfc00215 	stw	ra,8(sp)
 20186e8:	df000115 	stw	fp,4(sp)
 20186ec:	df000104 	addi	fp,sp,4
 20186f0:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 20186f4:	e0bfff17 	ldw	r2,-4(fp)
 20186f8:	1000091e 	bne	r2,zero,2018720 <dhcp_option_trailer+0x40>
 20186fc:	01c08134 	movhi	r7,516
 2018700:	39c47d04 	addi	r7,r7,4596
 2018704:	0181bac4 	movi	r6,1771
 2018708:	01408134 	movhi	r5,516
 201870c:	2944d804 	addi	r5,r5,4960
 2018710:	01008134 	movhi	r4,516
 2018714:	21048704 	addi	r4,r4,4636
 2018718:	20009e40 	call	20009e4 <printf>
 201871c:	003fff06 	br	201871c <__alt_mem_mem_0+0xfcff871c>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 2018720:	e0bfff17 	ldw	r2,-4(fp)
 2018724:	10c00517 	ldw	r3,20(r2)
 2018728:	e0bfff17 	ldw	r2,-4(fp)
 201872c:	1080060b 	ldhu	r2,24(r2)
 2018730:	11000044 	addi	r4,r2,1
 2018734:	200b883a 	mov	r5,r4
 2018738:	e13fff17 	ldw	r4,-4(fp)
 201873c:	2140060d 	sth	r5,24(r4)
 2018740:	10bfffcc 	andi	r2,r2,65535
 2018744:	1885883a 	add	r2,r3,r2
 2018748:	10803c04 	addi	r2,r2,240
 201874c:	00ffffc4 	movi	r3,-1
 2018750:	10c00005 	stb	r3,0(r2)
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 2018754:	00000c06 	br	2018788 <dhcp_option_trailer+0xa8>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 2018758:	e0bfff17 	ldw	r2,-4(fp)
 201875c:	10c00517 	ldw	r3,20(r2)
 2018760:	e0bfff17 	ldw	r2,-4(fp)
 2018764:	1080060b 	ldhu	r2,24(r2)
 2018768:	11000044 	addi	r4,r2,1
 201876c:	200b883a 	mov	r5,r4
 2018770:	e13fff17 	ldw	r4,-4(fp)
 2018774:	2140060d 	sth	r5,24(r4)
 2018778:	10bfffcc 	andi	r2,r2,65535
 201877c:	1885883a 	add	r2,r3,r2
 2018780:	10803c04 	addi	r2,r2,240
 2018784:	10000005 	stb	zero,0(r2)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 2018788:	e0bfff17 	ldw	r2,-4(fp)
 201878c:	1080060b 	ldhu	r2,24(r2)
 2018790:	10bfffcc 	andi	r2,r2,65535
 2018794:	10801130 	cmpltui	r2,r2,68
 2018798:	1000051e 	bne	r2,zero,20187b0 <dhcp_option_trailer+0xd0>
 201879c:	e0bfff17 	ldw	r2,-4(fp)
 20187a0:	1080060b 	ldhu	r2,24(r2)
 20187a4:	10bfffcc 	andi	r2,r2,65535
 20187a8:	108000cc 	andi	r2,r2,3
 20187ac:	10000526 	beq	r2,zero,20187c4 <dhcp_option_trailer+0xe4>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 20187b0:	e0bfff17 	ldw	r2,-4(fp)
 20187b4:	1080060b 	ldhu	r2,24(r2)
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 20187b8:	10bfffcc 	andi	r2,r2,65535
 20187bc:	10801130 	cmpltui	r2,r2,68
 20187c0:	103fe51e 	bne	r2,zero,2018758 <__alt_mem_mem_0+0xfcff8758>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 20187c4:	0001883a 	nop
 20187c8:	e037883a 	mov	sp,fp
 20187cc:	dfc00117 	ldw	ra,4(sp)
 20187d0:	df000017 	ldw	fp,0(sp)
 20187d4:	dec00204 	addi	sp,sp,8
 20187d8:	f800283a 	ret

020187dc <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
 20187dc:	defffc04 	addi	sp,sp,-16
 20187e0:	df000315 	stw	fp,12(sp)
 20187e4:	df000304 	addi	fp,sp,12
 20187e8:	e13ffe15 	stw	r4,-8(fp)
 20187ec:	e17fff15 	stw	r5,-4(fp)
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 20187f0:	e0bffe17 	ldw	r2,-8(fp)
 20187f4:	e0bffd15 	stw	r2,-12(fp)

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 20187f8:	e0bffe17 	ldw	r2,-8(fp)
 20187fc:	10bfffe0 	cmpeqi	r2,r2,-1
 2018800:	1000021e 	bne	r2,zero,201880c <ip4_addr_isbroadcast+0x30>
 2018804:	e0bffe17 	ldw	r2,-8(fp)
 2018808:	1000021e 	bne	r2,zero,2018814 <ip4_addr_isbroadcast+0x38>
      (addr == IPADDR_ANY)) {
    return 1;
 201880c:	00800044 	movi	r2,1
 2018810:	00002106 	br	2018898 <ip4_addr_isbroadcast+0xbc>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 2018814:	e0bfff17 	ldw	r2,-4(fp)
 2018818:	10800e43 	ldbu	r2,57(r2)
 201881c:	10803fcc 	andi	r2,r2,255
 2018820:	1080008c 	andi	r2,r2,2
 2018824:	1000021e 	bne	r2,zero,2018830 <ip4_addr_isbroadcast+0x54>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 2018828:	0005883a 	mov	r2,zero
 201882c:	00001a06 	br	2018898 <ip4_addr_isbroadcast+0xbc>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
 2018830:	e0bfff17 	ldw	r2,-4(fp)
 2018834:	10c00117 	ldw	r3,4(r2)
 2018838:	e0bffe17 	ldw	r2,-8(fp)
 201883c:	1880021e 	bne	r3,r2,2018848 <ip4_addr_isbroadcast+0x6c>
    return 0;
 2018840:	0005883a 	mov	r2,zero
 2018844:	00001406 	br	2018898 <ip4_addr_isbroadcast+0xbc>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
 2018848:	e0fffd17 	ldw	r3,-12(fp)
 201884c:	e0bfff17 	ldw	r2,-4(fp)
 2018850:	10800117 	ldw	r2,4(r2)
 2018854:	1886f03a 	xor	r3,r3,r2
 2018858:	e0bfff17 	ldw	r2,-4(fp)
 201885c:	10800217 	ldw	r2,8(r2)
 2018860:	1884703a 	and	r2,r3,r2
 2018864:	10000b1e 	bne	r2,zero,2018894 <ip4_addr_isbroadcast+0xb8>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 2018868:	e0bfff17 	ldw	r2,-4(fp)
 201886c:	10800217 	ldw	r2,8(r2)
 2018870:	0086303a 	nor	r3,zero,r2
 2018874:	e0bffe17 	ldw	r2,-8(fp)
 2018878:	1886703a 	and	r3,r3,r2
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
 201887c:	e0bfff17 	ldw	r2,-4(fp)
 2018880:	10800217 	ldw	r2,8(r2)
 2018884:	0084303a 	nor	r2,zero,r2
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 2018888:	1880021e 	bne	r3,r2,2018894 <ip4_addr_isbroadcast+0xb8>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
 201888c:	00800044 	movi	r2,1
 2018890:	00000106 	br	2018898 <ip4_addr_isbroadcast+0xbc>
  } else {
    return 0;
 2018894:	0005883a 	mov	r2,zero
  }
}
 2018898:	e037883a 	mov	sp,fp
 201889c:	df000017 	ldw	fp,0(sp)
 20188a0:	dec00104 	addi	sp,sp,4
 20188a4:	f800283a 	ret

020188a8 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
 20188a8:	defffc04 	addi	sp,sp,-16
 20188ac:	df000315 	stw	fp,12(sp)
 20188b0:	df000304 	addi	fp,sp,12
 20188b4:	e13fff15 	stw	r4,-4(fp)
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
 20188b8:	e0bfff17 	ldw	r2,-4(fp)
 20188bc:	1006d63a 	srli	r3,r2,24
 20188c0:	e0bfff17 	ldw	r2,-4(fp)
 20188c4:	1004d23a 	srli	r2,r2,8
 20188c8:	10bfc00c 	andi	r2,r2,65280
 20188cc:	1886b03a 	or	r3,r3,r2
 20188d0:	e0bfff17 	ldw	r2,-4(fp)
 20188d4:	10bfc00c 	andi	r2,r2,65280
 20188d8:	1004923a 	slli	r2,r2,8
 20188dc:	1886b03a 	or	r3,r3,r2
 20188e0:	e0bfff17 	ldw	r2,-4(fp)
 20188e4:	1004963a 	slli	r2,r2,24
 20188e8:	1884b03a 	or	r2,r3,r2
 20188ec:	e0bffe15 	stw	r2,-8(fp)

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
 20188f0:	00a00034 	movhi	r2,32768
 20188f4:	e0bffd15 	stw	r2,-12(fp)
 20188f8:	00000706 	br	2018918 <ip4_addr_netmask_valid+0x70>
    if ((nm_hostorder & mask) == 0) {
 20188fc:	e0fffe17 	ldw	r3,-8(fp)
 2018900:	e0bffd17 	ldw	r2,-12(fp)
 2018904:	1884703a 	and	r2,r3,r2
 2018908:	10000626 	beq	r2,zero,2018924 <ip4_addr_netmask_valid+0x7c>
{
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
 201890c:	e0bffd17 	ldw	r2,-12(fp)
 2018910:	1004d07a 	srli	r2,r2,1
 2018914:	e0bffd15 	stw	r2,-12(fp)
 2018918:	e0bffd17 	ldw	r2,-12(fp)
 201891c:	103ff71e 	bne	r2,zero,20188fc <__alt_mem_mem_0+0xfcff88fc>
 2018920:	00000b06 	br	2018950 <ip4_addr_netmask_valid+0xa8>
    if ((nm_hostorder & mask) == 0) {
      break;
 2018924:	0001883a 	nop
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
 2018928:	00000906 	br	2018950 <ip4_addr_netmask_valid+0xa8>
    if ((nm_hostorder & mask) != 0) {
 201892c:	e0fffe17 	ldw	r3,-8(fp)
 2018930:	e0bffd17 	ldw	r2,-12(fp)
 2018934:	1884703a 	and	r2,r3,r2
 2018938:	10000226 	beq	r2,zero,2018944 <ip4_addr_netmask_valid+0x9c>
      /* there is a one after the first zero -> invalid */
      return 0;
 201893c:	0005883a 	mov	r2,zero
 2018940:	00000606 	br	201895c <ip4_addr_netmask_valid+0xb4>
    if ((nm_hostorder & mask) == 0) {
      break;
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
 2018944:	e0bffd17 	ldw	r2,-12(fp)
 2018948:	1004d07a 	srli	r2,r2,1
 201894c:	e0bffd15 	stw	r2,-12(fp)
 2018950:	e0bffd17 	ldw	r2,-12(fp)
 2018954:	103ff51e 	bne	r2,zero,201892c <__alt_mem_mem_0+0xfcff892c>
      /* there is a one after the first zero -> invalid */
      return 0;
    }
  }
  /* no one after the first zero -> valid */
  return 1;
 2018958:	00800044 	movi	r2,1
}
 201895c:	e037883a 	mov	sp,fp
 2018960:	df000017 	ldw	fp,0(sp)
 2018964:	dec00104 	addi	sp,sp,4
 2018968:	f800283a 	ret

0201896c <ipaddr_addr>:
 * @param cp IP address in ascii represenation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 201896c:	defffc04 	addi	sp,sp,-16
 2018970:	dfc00315 	stw	ra,12(sp)
 2018974:	df000215 	stw	fp,8(sp)
 2018978:	df000204 	addi	fp,sp,8
 201897c:	e13fff15 	stw	r4,-4(fp)
  ip_addr_t val;

  if (ipaddr_aton(cp, &val)) {
 2018980:	e17ffe04 	addi	r5,fp,-8
 2018984:	e13fff17 	ldw	r4,-4(fp)
 2018988:	20189b00 	call	20189b0 <ipaddr_aton>
 201898c:	10000226 	beq	r2,zero,2018998 <ipaddr_addr+0x2c>
    return ip4_addr_get_u32(&val);
 2018990:	e0bffe17 	ldw	r2,-8(fp)
 2018994:	00000106 	br	201899c <ipaddr_addr+0x30>
  }
  return (IPADDR_NONE);
 2018998:	00bfffc4 	movi	r2,-1
}
 201899c:	e037883a 	mov	sp,fp
 20189a0:	dfc00117 	ldw	ra,4(sp)
 20189a4:	df000017 	ldw	fp,0(sp)
 20189a8:	dec00204 	addi	sp,sp,8
 20189ac:	f800283a 	ret

020189b0 <ipaddr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ipaddr_aton(const char *cp, ip_addr_t *addr)
{
 20189b0:	defff604 	addi	sp,sp,-40
 20189b4:	df000915 	stw	fp,36(sp)
 20189b8:	df000904 	addi	fp,sp,36
 20189bc:	e13ffe15 	stw	r4,-8(fp)
 20189c0:	e17fff15 	stw	r5,-4(fp)
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 20189c4:	e0bffa04 	addi	r2,fp,-24
 20189c8:	e0bff915 	stw	r2,-28(fp)

  c = *cp;
 20189cc:	e0bffe17 	ldw	r2,-8(fp)
 20189d0:	10800003 	ldbu	r2,0(r2)
 20189d4:	e0bff845 	stb	r2,-31(fp)
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c))
 20189d8:	e0bff843 	ldbu	r2,-31(fp)
 20189dc:	10803fcc 	andi	r2,r2,255
 20189e0:	10800c30 	cmpltui	r2,r2,48
 20189e4:	1000041e 	bne	r2,zero,20189f8 <ipaddr_aton+0x48>
 20189e8:	e0bff843 	ldbu	r2,-31(fp)
 20189ec:	10803fcc 	andi	r2,r2,255
 20189f0:	10800eb0 	cmpltui	r2,r2,58
 20189f4:	1000021e 	bne	r2,zero,2018a00 <ipaddr_aton+0x50>
      return (0);
 20189f8:	0005883a 	mov	r2,zero
 20189fc:	0000e606 	br	2018d98 <ipaddr_aton+0x3e8>
    val = 0;
 2018a00:	e03ff715 	stw	zero,-36(fp)
    base = 10;
 2018a04:	00800284 	movi	r2,10
 2018a08:	e0bff805 	stb	r2,-32(fp)
    if (c == '0') {
 2018a0c:	e0bff847 	ldb	r2,-31(fp)
 2018a10:	10800c18 	cmpnei	r2,r2,48
 2018a14:	1000171e 	bne	r2,zero,2018a74 <ipaddr_aton+0xc4>
      c = *++cp;
 2018a18:	e0bffe17 	ldw	r2,-8(fp)
 2018a1c:	10800044 	addi	r2,r2,1
 2018a20:	e0bffe15 	stw	r2,-8(fp)
 2018a24:	e0bffe17 	ldw	r2,-8(fp)
 2018a28:	10800003 	ldbu	r2,0(r2)
 2018a2c:	e0bff845 	stb	r2,-31(fp)
      if (c == 'x' || c == 'X') {
 2018a30:	e0bff847 	ldb	r2,-31(fp)
 2018a34:	10801e20 	cmpeqi	r2,r2,120
 2018a38:	1000031e 	bne	r2,zero,2018a48 <ipaddr_aton+0x98>
 2018a3c:	e0bff847 	ldb	r2,-31(fp)
 2018a40:	10801618 	cmpnei	r2,r2,88
 2018a44:	1000091e 	bne	r2,zero,2018a6c <ipaddr_aton+0xbc>
        base = 16;
 2018a48:	00800404 	movi	r2,16
 2018a4c:	e0bff805 	stb	r2,-32(fp)
        c = *++cp;
 2018a50:	e0bffe17 	ldw	r2,-8(fp)
 2018a54:	10800044 	addi	r2,r2,1
 2018a58:	e0bffe15 	stw	r2,-8(fp)
 2018a5c:	e0bffe17 	ldw	r2,-8(fp)
 2018a60:	10800003 	ldbu	r2,0(r2)
 2018a64:	e0bff845 	stb	r2,-31(fp)
 2018a68:	00000206 	br	2018a74 <ipaddr_aton+0xc4>
      } else
        base = 8;
 2018a6c:	00800204 	movi	r2,8
 2018a70:	e0bff805 	stb	r2,-32(fp)
    }
    for (;;) {
      if (isdigit(c)) {
 2018a74:	e0bff843 	ldbu	r2,-31(fp)
 2018a78:	10803fcc 	andi	r2,r2,255
 2018a7c:	10800c30 	cmpltui	r2,r2,48
 2018a80:	1000121e 	bne	r2,zero,2018acc <ipaddr_aton+0x11c>
 2018a84:	e0bff843 	ldbu	r2,-31(fp)
 2018a88:	10803fcc 	andi	r2,r2,255
 2018a8c:	10800ea8 	cmpgeui	r2,r2,58
 2018a90:	10000e1e 	bne	r2,zero,2018acc <ipaddr_aton+0x11c>
        val = (val * base) + (int)(c - '0');
 2018a94:	e0fff803 	ldbu	r3,-32(fp)
 2018a98:	e0bff717 	ldw	r2,-36(fp)
 2018a9c:	1887383a 	mul	r3,r3,r2
 2018aa0:	e0bff847 	ldb	r2,-31(fp)
 2018aa4:	1885883a 	add	r2,r3,r2
 2018aa8:	10bff404 	addi	r2,r2,-48
 2018aac:	e0bff715 	stw	r2,-36(fp)
        c = *++cp;
 2018ab0:	e0bffe17 	ldw	r2,-8(fp)
 2018ab4:	10800044 	addi	r2,r2,1
 2018ab8:	e0bffe15 	stw	r2,-8(fp)
 2018abc:	e0bffe17 	ldw	r2,-8(fp)
 2018ac0:	10800003 	ldbu	r2,0(r2)
 2018ac4:	e0bff845 	stb	r2,-31(fp)
 2018ac8:	00003306 	br	2018b98 <ipaddr_aton+0x1e8>
      } else if (base == 16 && isxdigit(c)) {
 2018acc:	e0bff803 	ldbu	r2,-32(fp)
 2018ad0:	10800418 	cmpnei	r2,r2,16
 2018ad4:	1000311e 	bne	r2,zero,2018b9c <ipaddr_aton+0x1ec>
 2018ad8:	e0bff843 	ldbu	r2,-31(fp)
 2018adc:	10803fcc 	andi	r2,r2,255
 2018ae0:	10800c30 	cmpltui	r2,r2,48
 2018ae4:	1000041e 	bne	r2,zero,2018af8 <ipaddr_aton+0x148>
 2018ae8:	e0bff843 	ldbu	r2,-31(fp)
 2018aec:	10803fcc 	andi	r2,r2,255
 2018af0:	10800eb0 	cmpltui	r2,r2,58
 2018af4:	1000101e 	bne	r2,zero,2018b38 <ipaddr_aton+0x188>
 2018af8:	e0bff843 	ldbu	r2,-31(fp)
 2018afc:	10803fcc 	andi	r2,r2,255
 2018b00:	10801870 	cmpltui	r2,r2,97
 2018b04:	1000041e 	bne	r2,zero,2018b18 <ipaddr_aton+0x168>
 2018b08:	e0bff843 	ldbu	r2,-31(fp)
 2018b0c:	10803fcc 	andi	r2,r2,255
 2018b10:	108019f0 	cmpltui	r2,r2,103
 2018b14:	1000081e 	bne	r2,zero,2018b38 <ipaddr_aton+0x188>
 2018b18:	e0bff843 	ldbu	r2,-31(fp)
 2018b1c:	10803fcc 	andi	r2,r2,255
 2018b20:	10801070 	cmpltui	r2,r2,65
 2018b24:	10001d1e 	bne	r2,zero,2018b9c <ipaddr_aton+0x1ec>
 2018b28:	e0bff843 	ldbu	r2,-31(fp)
 2018b2c:	10803fcc 	andi	r2,r2,255
 2018b30:	108011e8 	cmpgeui	r2,r2,71
 2018b34:	1000191e 	bne	r2,zero,2018b9c <ipaddr_aton+0x1ec>
        val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
 2018b38:	e0bff717 	ldw	r2,-36(fp)
 2018b3c:	1006913a 	slli	r3,r2,4
 2018b40:	e0bff847 	ldb	r2,-31(fp)
 2018b44:	11000284 	addi	r4,r2,10
 2018b48:	e0bff843 	ldbu	r2,-31(fp)
 2018b4c:	10803fcc 	andi	r2,r2,255
 2018b50:	10801870 	cmpltui	r2,r2,97
 2018b54:	1000061e 	bne	r2,zero,2018b70 <ipaddr_aton+0x1c0>
 2018b58:	e0bff843 	ldbu	r2,-31(fp)
 2018b5c:	10803fcc 	andi	r2,r2,255
 2018b60:	10801ee8 	cmpgeui	r2,r2,123
 2018b64:	1000021e 	bne	r2,zero,2018b70 <ipaddr_aton+0x1c0>
 2018b68:	00801844 	movi	r2,97
 2018b6c:	00000106 	br	2018b74 <ipaddr_aton+0x1c4>
 2018b70:	00801044 	movi	r2,65
 2018b74:	2085c83a 	sub	r2,r4,r2
 2018b78:	1884b03a 	or	r2,r3,r2
 2018b7c:	e0bff715 	stw	r2,-36(fp)
        c = *++cp;
 2018b80:	e0bffe17 	ldw	r2,-8(fp)
 2018b84:	10800044 	addi	r2,r2,1
 2018b88:	e0bffe15 	stw	r2,-8(fp)
 2018b8c:	e0bffe17 	ldw	r2,-8(fp)
 2018b90:	10800003 	ldbu	r2,0(r2)
 2018b94:	e0bff845 	stb	r2,-31(fp)
      } else
        break;
    }
 2018b98:	003fb606 	br	2018a74 <__alt_mem_mem_0+0xfcff8a74>
    if (c == '.') {
 2018b9c:	e0bff847 	ldb	r2,-31(fp)
 2018ba0:	10800b98 	cmpnei	r2,r2,46
 2018ba4:	1000121e 	bne	r2,zero,2018bf0 <ipaddr_aton+0x240>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 2018ba8:	e0bffa04 	addi	r2,fp,-24
 2018bac:	10800304 	addi	r2,r2,12
 2018bb0:	e0fff917 	ldw	r3,-28(fp)
 2018bb4:	18800236 	bltu	r3,r2,2018bc0 <ipaddr_aton+0x210>
        return (0);
 2018bb8:	0005883a 	mov	r2,zero
 2018bbc:	00007606 	br	2018d98 <ipaddr_aton+0x3e8>
      }
      *pp++ = val;
 2018bc0:	e0bff917 	ldw	r2,-28(fp)
 2018bc4:	10c00104 	addi	r3,r2,4
 2018bc8:	e0fff915 	stw	r3,-28(fp)
 2018bcc:	e0fff717 	ldw	r3,-36(fp)
 2018bd0:	10c00015 	stw	r3,0(r2)
      c = *++cp;
 2018bd4:	e0bffe17 	ldw	r2,-8(fp)
 2018bd8:	10800044 	addi	r2,r2,1
 2018bdc:	e0bffe15 	stw	r2,-8(fp)
 2018be0:	e0bffe17 	ldw	r2,-8(fp)
 2018be4:	10800003 	ldbu	r2,0(r2)
 2018be8:	e0bff845 	stb	r2,-31(fp)
    } else
      break;
  }
 2018bec:	003f7a06 	br	20189d8 <__alt_mem_mem_0+0xfcff89d8>
        return (0);
      }
      *pp++ = val;
      c = *++cp;
    } else
      break;
 2018bf0:	0001883a 	nop
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 2018bf4:	e0bff847 	ldb	r2,-31(fp)
 2018bf8:	10001426 	beq	r2,zero,2018c4c <ipaddr_aton+0x29c>
 2018bfc:	e0bff847 	ldb	r2,-31(fp)
 2018c00:	10800820 	cmpeqi	r2,r2,32
 2018c04:	1000111e 	bne	r2,zero,2018c4c <ipaddr_aton+0x29c>
 2018c08:	e0bff847 	ldb	r2,-31(fp)
 2018c0c:	10800320 	cmpeqi	r2,r2,12
 2018c10:	10000e1e 	bne	r2,zero,2018c4c <ipaddr_aton+0x29c>
 2018c14:	e0bff847 	ldb	r2,-31(fp)
 2018c18:	108002a0 	cmpeqi	r2,r2,10
 2018c1c:	10000b1e 	bne	r2,zero,2018c4c <ipaddr_aton+0x29c>
 2018c20:	e0bff847 	ldb	r2,-31(fp)
 2018c24:	10800360 	cmpeqi	r2,r2,13
 2018c28:	1000081e 	bne	r2,zero,2018c4c <ipaddr_aton+0x29c>
 2018c2c:	e0bff847 	ldb	r2,-31(fp)
 2018c30:	10800260 	cmpeqi	r2,r2,9
 2018c34:	1000051e 	bne	r2,zero,2018c4c <ipaddr_aton+0x29c>
 2018c38:	e0bff847 	ldb	r2,-31(fp)
 2018c3c:	108002e0 	cmpeqi	r2,r2,11
 2018c40:	1000021e 	bne	r2,zero,2018c4c <ipaddr_aton+0x29c>
    return (0);
 2018c44:	0005883a 	mov	r2,zero
 2018c48:	00005306 	br	2018d98 <ipaddr_aton+0x3e8>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 2018c4c:	e0fff917 	ldw	r3,-28(fp)
 2018c50:	e0bffa04 	addi	r2,fp,-24
 2018c54:	1885c83a 	sub	r2,r3,r2
 2018c58:	1005d0ba 	srai	r2,r2,2
 2018c5c:	10800044 	addi	r2,r2,1
 2018c60:	10c00168 	cmpgeui	r3,r2,5
 2018c64:	1800371e 	bne	r3,zero,2018d44 <ipaddr_aton+0x394>
 2018c68:	100690ba 	slli	r3,r2,2
 2018c6c:	008080b4 	movhi	r2,514
 2018c70:	10a32004 	addi	r2,r2,-29568
 2018c74:	1885883a 	add	r2,r3,r2
 2018c78:	10800017 	ldw	r2,0(r2)
 2018c7c:	1000683a 	jmp	r2
 2018c80:	02018c94 	movui	r8,1586
 2018c84:	02018d4c 	andi	r8,zero,1589
 2018c88:	02018c9c 	xori	r8,zero,1586
 2018c8c:	02018cc8 	cmpgei	r8,zero,1587
 2018c90:	02018d00 	call	2018d0 <__alt_mem_sdram_controller_0-0x1dfe730>

  case 0:
    return (0);       /* initial nondigit */
 2018c94:	0005883a 	mov	r2,zero
 2018c98:	00003f06 	br	2018d98 <ipaddr_aton+0x3e8>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 2018c9c:	e0fff717 	ldw	r3,-36(fp)
 2018ca0:	00804034 	movhi	r2,256
 2018ca4:	18800236 	bltu	r3,r2,2018cb0 <ipaddr_aton+0x300>
      return (0);
 2018ca8:	0005883a 	mov	r2,zero
 2018cac:	00003a06 	br	2018d98 <ipaddr_aton+0x3e8>
    }
    val |= parts[0] << 24;
 2018cb0:	e0bffa17 	ldw	r2,-24(fp)
 2018cb4:	1004963a 	slli	r2,r2,24
 2018cb8:	e0fff717 	ldw	r3,-36(fp)
 2018cbc:	1884b03a 	or	r2,r3,r2
 2018cc0:	e0bff715 	stw	r2,-36(fp)
    break;
 2018cc4:	00002206 	br	2018d50 <ipaddr_aton+0x3a0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 2018cc8:	e0bff717 	ldw	r2,-36(fp)
 2018ccc:	00ffffd4 	movui	r3,65535
 2018cd0:	1880022e 	bgeu	r3,r2,2018cdc <ipaddr_aton+0x32c>
      return (0);
 2018cd4:	0005883a 	mov	r2,zero
 2018cd8:	00002f06 	br	2018d98 <ipaddr_aton+0x3e8>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 2018cdc:	e0bffa17 	ldw	r2,-24(fp)
 2018ce0:	1006963a 	slli	r3,r2,24
 2018ce4:	e0bffb17 	ldw	r2,-20(fp)
 2018ce8:	1004943a 	slli	r2,r2,16
 2018cec:	1884b03a 	or	r2,r3,r2
 2018cf0:	e0fff717 	ldw	r3,-36(fp)
 2018cf4:	1884b03a 	or	r2,r3,r2
 2018cf8:	e0bff715 	stw	r2,-36(fp)
    break;
 2018cfc:	00001406 	br	2018d50 <ipaddr_aton+0x3a0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 2018d00:	e0bff717 	ldw	r2,-36(fp)
 2018d04:	10804030 	cmpltui	r2,r2,256
 2018d08:	1000021e 	bne	r2,zero,2018d14 <ipaddr_aton+0x364>
      return (0);
 2018d0c:	0005883a 	mov	r2,zero
 2018d10:	00002106 	br	2018d98 <ipaddr_aton+0x3e8>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 2018d14:	e0bffa17 	ldw	r2,-24(fp)
 2018d18:	1006963a 	slli	r3,r2,24
 2018d1c:	e0bffb17 	ldw	r2,-20(fp)
 2018d20:	1004943a 	slli	r2,r2,16
 2018d24:	1886b03a 	or	r3,r3,r2
 2018d28:	e0bffc17 	ldw	r2,-16(fp)
 2018d2c:	1004923a 	slli	r2,r2,8
 2018d30:	1884b03a 	or	r2,r3,r2
 2018d34:	e0fff717 	ldw	r3,-36(fp)
 2018d38:	1884b03a 	or	r2,r3,r2
 2018d3c:	e0bff715 	stw	r2,-36(fp)
    break;
 2018d40:	00000306 	br	2018d50 <ipaddr_aton+0x3a0>
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
 2018d44:	0001883a 	nop
 2018d48:	00000106 	br	2018d50 <ipaddr_aton+0x3a0>

  case 0:
    return (0);       /* initial nondigit */

  case 1:             /* a -- 32 bits */
    break;
 2018d4c:	0001883a 	nop
    break;
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
  }
  if (addr) {
 2018d50:	e0bfff17 	ldw	r2,-4(fp)
 2018d54:	10000f26 	beq	r2,zero,2018d94 <ipaddr_aton+0x3e4>
    ip4_addr_set_u32(addr, htonl(val));
 2018d58:	e0bff717 	ldw	r2,-36(fp)
 2018d5c:	1006d63a 	srli	r3,r2,24
 2018d60:	e0bff717 	ldw	r2,-36(fp)
 2018d64:	1004d23a 	srli	r2,r2,8
 2018d68:	10bfc00c 	andi	r2,r2,65280
 2018d6c:	1886b03a 	or	r3,r3,r2
 2018d70:	e0bff717 	ldw	r2,-36(fp)
 2018d74:	10bfc00c 	andi	r2,r2,65280
 2018d78:	1004923a 	slli	r2,r2,8
 2018d7c:	1886b03a 	or	r3,r3,r2
 2018d80:	e0bff717 	ldw	r2,-36(fp)
 2018d84:	1004963a 	slli	r2,r2,24
 2018d88:	1886b03a 	or	r3,r3,r2
 2018d8c:	e0bfff17 	ldw	r2,-4(fp)
 2018d90:	10c00015 	stw	r3,0(r2)
  }
  return (1);
 2018d94:	00800044 	movi	r2,1
}
 2018d98:	e037883a 	mov	sp,fp
 2018d9c:	df000017 	ldw	fp,0(sp)
 2018da0:	dec00104 	addi	sp,sp,4
 2018da4:	f800283a 	ret

02018da8 <ipaddr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         represenation of addr
 */
char *
ipaddr_ntoa(const ip_addr_t *addr)
{
 2018da8:	defffd04 	addi	sp,sp,-12
 2018dac:	dfc00215 	stw	ra,8(sp)
 2018db0:	df000115 	stw	fp,4(sp)
 2018db4:	df000104 	addi	fp,sp,4
 2018db8:	e13fff15 	stw	r4,-4(fp)
  static char str[16];
  return ipaddr_ntoa_r(addr, str, 16);
 2018dbc:	01800404 	movi	r6,16
 2018dc0:	01408134 	movhi	r5,516
 2018dc4:	295e4e04 	addi	r5,r5,31032
 2018dc8:	e13fff17 	ldw	r4,-4(fp)
 2018dcc:	2018de40 	call	2018de4 <ipaddr_ntoa_r>
}
 2018dd0:	e037883a 	mov	sp,fp
 2018dd4:	dfc00117 	ldw	ra,4(sp)
 2018dd8:	df000017 	ldw	fp,0(sp)
 2018ddc:	dec00204 	addi	sp,sp,8
 2018de0:	f800283a 	ret

02018de4 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
 2018de4:	defff404 	addi	sp,sp,-48
 2018de8:	dfc00b15 	stw	ra,44(sp)
 2018dec:	df000a15 	stw	fp,40(sp)
 2018df0:	df000a04 	addi	fp,sp,40
 2018df4:	e13ffd15 	stw	r4,-12(fp)
 2018df8:	e17ffe15 	stw	r5,-8(fp)
 2018dfc:	e1bfff15 	stw	r6,-4(fp)
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 2018e00:	e03ff915 	stw	zero,-28(fp)

  s_addr = ip4_addr_get_u32(addr);
 2018e04:	e0bffd17 	ldw	r2,-12(fp)
 2018e08:	10800017 	ldw	r2,0(r2)
 2018e0c:	e0bffb15 	stw	r2,-20(fp)

  rp = buf;
 2018e10:	e0bffe17 	ldw	r2,-8(fp)
 2018e14:	e0bff615 	stw	r2,-40(fp)
  ap = (u8_t *)&s_addr;
 2018e18:	e0bffb04 	addi	r2,fp,-20
 2018e1c:	e0bff715 	stw	r2,-36(fp)
  for(n = 0; n < 4; n++) {
 2018e20:	e03ff805 	stb	zero,-32(fp)
 2018e24:	00004606 	br	2018f40 <ipaddr_ntoa_r+0x15c>
    i = 0;
 2018e28:	e03ff845 	stb	zero,-31(fp)
    do {
      rem = *ap % (u8_t)10;
 2018e2c:	e0bff717 	ldw	r2,-36(fp)
 2018e30:	10800003 	ldbu	r2,0(r2)
 2018e34:	10803fcc 	andi	r2,r2,255
 2018e38:	01400284 	movi	r5,10
 2018e3c:	1009883a 	mov	r4,r2
 2018e40:	200ab400 	call	200ab40 <__umodsi3>
 2018e44:	e0bffa05 	stb	r2,-24(fp)
      *ap /= (u8_t)10;
 2018e48:	e0bff717 	ldw	r2,-36(fp)
 2018e4c:	10800003 	ldbu	r2,0(r2)
 2018e50:	10803fcc 	andi	r2,r2,255
 2018e54:	01400284 	movi	r5,10
 2018e58:	1009883a 	mov	r4,r2
 2018e5c:	200aadc0 	call	200aadc <__udivsi3>
 2018e60:	1007883a 	mov	r3,r2
 2018e64:	e0bff717 	ldw	r2,-36(fp)
 2018e68:	10c00005 	stb	r3,0(r2)
      inv[i++] = '0' + rem;
 2018e6c:	e0bff843 	ldbu	r2,-31(fp)
 2018e70:	10c00044 	addi	r3,r2,1
 2018e74:	e0fff845 	stb	r3,-31(fp)
 2018e78:	10803fcc 	andi	r2,r2,255
 2018e7c:	e0fffa03 	ldbu	r3,-24(fp)
 2018e80:	18c00c04 	addi	r3,r3,48
 2018e84:	1809883a 	mov	r4,r3
 2018e88:	e0fffc04 	addi	r3,fp,-16
 2018e8c:	1885883a 	add	r2,r3,r2
 2018e90:	11000005 	stb	r4,0(r2)
    } while(*ap);
 2018e94:	e0bff717 	ldw	r2,-36(fp)
 2018e98:	10800003 	ldbu	r2,0(r2)
 2018e9c:	10803fcc 	andi	r2,r2,255
 2018ea0:	103fe21e 	bne	r2,zero,2018e2c <__alt_mem_mem_0+0xfcff8e2c>
    while(i--) {
 2018ea4:	00000f06 	br	2018ee4 <ipaddr_ntoa_r+0x100>
      if (len++ >= buflen) {
 2018ea8:	e0bff917 	ldw	r2,-28(fp)
 2018eac:	10c00044 	addi	r3,r2,1
 2018eb0:	e0fff915 	stw	r3,-28(fp)
 2018eb4:	e0ffff17 	ldw	r3,-4(fp)
 2018eb8:	10c00216 	blt	r2,r3,2018ec4 <ipaddr_ntoa_r+0xe0>
        return NULL;
 2018ebc:	0005883a 	mov	r2,zero
 2018ec0:	00002806 	br	2018f64 <ipaddr_ntoa_r+0x180>
      }
      *rp++ = inv[i];
 2018ec4:	e0bff617 	ldw	r2,-40(fp)
 2018ec8:	10c00044 	addi	r3,r2,1
 2018ecc:	e0fff615 	stw	r3,-40(fp)
 2018ed0:	e0fff843 	ldbu	r3,-31(fp)
 2018ed4:	e13ffc04 	addi	r4,fp,-16
 2018ed8:	20c7883a 	add	r3,r4,r3
 2018edc:	18c00003 	ldbu	r3,0(r3)
 2018ee0:	10c00005 	stb	r3,0(r2)
    do {
      rem = *ap % (u8_t)10;
      *ap /= (u8_t)10;
      inv[i++] = '0' + rem;
    } while(*ap);
    while(i--) {
 2018ee4:	e0bff843 	ldbu	r2,-31(fp)
 2018ee8:	10ffffc4 	addi	r3,r2,-1
 2018eec:	e0fff845 	stb	r3,-31(fp)
 2018ef0:	10803fcc 	andi	r2,r2,255
 2018ef4:	103fec1e 	bne	r2,zero,2018ea8 <__alt_mem_mem_0+0xfcff8ea8>
      if (len++ >= buflen) {
        return NULL;
      }
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
 2018ef8:	e0bff917 	ldw	r2,-28(fp)
 2018efc:	10c00044 	addi	r3,r2,1
 2018f00:	e0fff915 	stw	r3,-28(fp)
 2018f04:	e0ffff17 	ldw	r3,-4(fp)
 2018f08:	10c00216 	blt	r2,r3,2018f14 <ipaddr_ntoa_r+0x130>
      return NULL;
 2018f0c:	0005883a 	mov	r2,zero
 2018f10:	00001406 	br	2018f64 <ipaddr_ntoa_r+0x180>
    }
    *rp++ = '.';
 2018f14:	e0bff617 	ldw	r2,-40(fp)
 2018f18:	10c00044 	addi	r3,r2,1
 2018f1c:	e0fff615 	stw	r3,-40(fp)
 2018f20:	00c00b84 	movi	r3,46
 2018f24:	10c00005 	stb	r3,0(r2)
    ap++;
 2018f28:	e0bff717 	ldw	r2,-36(fp)
 2018f2c:	10800044 	addi	r2,r2,1
 2018f30:	e0bff715 	stw	r2,-36(fp)

  s_addr = ip4_addr_get_u32(addr);

  rp = buf;
  ap = (u8_t *)&s_addr;
  for(n = 0; n < 4; n++) {
 2018f34:	e0bff803 	ldbu	r2,-32(fp)
 2018f38:	10800044 	addi	r2,r2,1
 2018f3c:	e0bff805 	stb	r2,-32(fp)
 2018f40:	e0bff803 	ldbu	r2,-32(fp)
 2018f44:	10800130 	cmpltui	r2,r2,4
 2018f48:	103fb71e 	bne	r2,zero,2018e28 <__alt_mem_mem_0+0xfcff8e28>
      return NULL;
    }
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
 2018f4c:	e0bff617 	ldw	r2,-40(fp)
 2018f50:	10bfffc4 	addi	r2,r2,-1
 2018f54:	e0bff615 	stw	r2,-40(fp)
 2018f58:	e0bff617 	ldw	r2,-40(fp)
 2018f5c:	10000005 	stb	zero,0(r2)
  return buf;
 2018f60:	e0bffe17 	ldw	r2,-8(fp)
}
 2018f64:	e037883a 	mov	sp,fp
 2018f68:	dfc00117 	ldw	ra,4(sp)
 2018f6c:	df000017 	ldw	fp,0(sp)
 2018f70:	dec00204 	addi	sp,sp,8
 2018f74:	f800283a 	ret

02018f78 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 2018f78:	defffc04 	addi	sp,sp,-16
 2018f7c:	df000315 	stw	fp,12(sp)
 2018f80:	df000304 	addi	fp,sp,12
 2018f84:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 2018f88:	d0e7ee17 	ldw	r3,-24648(gp)
 2018f8c:	e0bfff17 	ldw	r2,-4(fp)
 2018f90:	1080000b 	ldhu	r2,0(r2)
 2018f94:	10bfffcc 	andi	r2,r2,65535
 2018f98:	1885883a 	add	r2,r3,r2
 2018f9c:	e0bffd15 	stw	r2,-12(fp)
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 2018fa0:	e0ffff17 	ldw	r3,-4(fp)
 2018fa4:	e0bffd17 	ldw	r2,-12(fp)
 2018fa8:	18801926 	beq	r3,r2,2019010 <plug_holes+0x98>
 2018fac:	e0bffd17 	ldw	r2,-12(fp)
 2018fb0:	10800103 	ldbu	r2,4(r2)
 2018fb4:	10803fcc 	andi	r2,r2,255
 2018fb8:	1000151e 	bne	r2,zero,2019010 <plug_holes+0x98>
 2018fbc:	d0a7ef17 	ldw	r2,-24644(gp)
 2018fc0:	e0fffd17 	ldw	r3,-12(fp)
 2018fc4:	18801226 	beq	r3,r2,2019010 <plug_holes+0x98>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 2018fc8:	d0e7f017 	ldw	r3,-24640(gp)
 2018fcc:	e0bffd17 	ldw	r2,-12(fp)
 2018fd0:	1880021e 	bne	r3,r2,2018fdc <plug_holes+0x64>
      lfree = mem;
 2018fd4:	e0bfff17 	ldw	r2,-4(fp)
 2018fd8:	d0a7f015 	stw	r2,-24640(gp)
    }
    mem->next = nmem->next;
 2018fdc:	e0bffd17 	ldw	r2,-12(fp)
 2018fe0:	10c0000b 	ldhu	r3,0(r2)
 2018fe4:	e0bfff17 	ldw	r2,-4(fp)
 2018fe8:	10c0000d 	sth	r3,0(r2)
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 2018fec:	d0e7ee17 	ldw	r3,-24648(gp)
 2018ff0:	e0bffd17 	ldw	r2,-12(fp)
 2018ff4:	1080000b 	ldhu	r2,0(r2)
 2018ff8:	10bfffcc 	andi	r2,r2,65535
 2018ffc:	1885883a 	add	r2,r3,r2
 2019000:	e0ffff17 	ldw	r3,-4(fp)
 2019004:	d127ee17 	ldw	r4,-24648(gp)
 2019008:	1907c83a 	sub	r3,r3,r4
 201900c:	10c0008d 	sth	r3,2(r2)
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 2019010:	d0e7ee17 	ldw	r3,-24648(gp)
 2019014:	e0bfff17 	ldw	r2,-4(fp)
 2019018:	1080008b 	ldhu	r2,2(r2)
 201901c:	10bfffcc 	andi	r2,r2,65535
 2019020:	1885883a 	add	r2,r3,r2
 2019024:	e0bffe15 	stw	r2,-8(fp)
  if (pmem != mem && pmem->used == 0) {
 2019028:	e0fffe17 	ldw	r3,-8(fp)
 201902c:	e0bfff17 	ldw	r2,-4(fp)
 2019030:	18801626 	beq	r3,r2,201908c <plug_holes+0x114>
 2019034:	e0bffe17 	ldw	r2,-8(fp)
 2019038:	10800103 	ldbu	r2,4(r2)
 201903c:	10803fcc 	andi	r2,r2,255
 2019040:	1000121e 	bne	r2,zero,201908c <plug_holes+0x114>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 2019044:	d0e7f017 	ldw	r3,-24640(gp)
 2019048:	e0bfff17 	ldw	r2,-4(fp)
 201904c:	1880021e 	bne	r3,r2,2019058 <plug_holes+0xe0>
      lfree = pmem;
 2019050:	e0bffe17 	ldw	r2,-8(fp)
 2019054:	d0a7f015 	stw	r2,-24640(gp)
    }
    pmem->next = mem->next;
 2019058:	e0bfff17 	ldw	r2,-4(fp)
 201905c:	10c0000b 	ldhu	r3,0(r2)
 2019060:	e0bffe17 	ldw	r2,-8(fp)
 2019064:	10c0000d 	sth	r3,0(r2)
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 2019068:	d0e7ee17 	ldw	r3,-24648(gp)
 201906c:	e0bfff17 	ldw	r2,-4(fp)
 2019070:	1080000b 	ldhu	r2,0(r2)
 2019074:	10bfffcc 	andi	r2,r2,65535
 2019078:	1885883a 	add	r2,r3,r2
 201907c:	e0fffe17 	ldw	r3,-8(fp)
 2019080:	d127ee17 	ldw	r4,-24648(gp)
 2019084:	1907c83a 	sub	r3,r3,r4
 2019088:	10c0008d 	sth	r3,2(r2)
  }
}
 201908c:	0001883a 	nop
 2019090:	e037883a 	mov	sp,fp
 2019094:	df000017 	ldw	fp,0(sp)
 2019098:	dec00104 	addi	sp,sp,4
 201909c:	f800283a 	ret

020190a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 20190a0:	defffd04 	addi	sp,sp,-12
 20190a4:	dfc00215 	stw	ra,8(sp)
 20190a8:	df000115 	stw	fp,4(sp)
 20190ac:	df000104 	addi	fp,sp,4

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 20190b0:	008085b4 	movhi	r2,534
 20190b4:	10886204 	addi	r2,r2,8584
 20190b8:	10c000c4 	addi	r3,r2,3
 20190bc:	00bfff04 	movi	r2,-4
 20190c0:	1884703a 	and	r2,r3,r2
 20190c4:	d0a7ee15 	stw	r2,-24648(gp)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 20190c8:	d0a7ee17 	ldw	r2,-24648(gp)
 20190cc:	e0bfff15 	stw	r2,-4(fp)
  mem->next = MEM_SIZE_ALIGNED;
 20190d0:	e0bfff17 	ldw	r2,-4(fp)
 20190d4:	00e00004 	movi	r3,-32768
 20190d8:	10c0000d 	sth	r3,0(r2)
  mem->prev = 0;
 20190dc:	e0bfff17 	ldw	r2,-4(fp)
 20190e0:	1000008d 	sth	zero,2(r2)
  mem->used = 0;
 20190e4:	e0bfff17 	ldw	r2,-4(fp)
 20190e8:	10000105 	stb	zero,4(r2)
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 20190ec:	d0e7ee17 	ldw	r3,-24648(gp)
 20190f0:	00a00014 	movui	r2,32768
 20190f4:	1885883a 	add	r2,r3,r2
 20190f8:	d0a7ef15 	stw	r2,-24644(gp)
  ram_end->used = 1;
 20190fc:	d0a7ef17 	ldw	r2,-24644(gp)
 2019100:	00c00044 	movi	r3,1
 2019104:	10c00105 	stb	r3,4(r2)
  ram_end->next = MEM_SIZE_ALIGNED;
 2019108:	d0a7ef17 	ldw	r2,-24644(gp)
 201910c:	00e00004 	movi	r3,-32768
 2019110:	10c0000d 	sth	r3,0(r2)
  ram_end->prev = MEM_SIZE_ALIGNED;
 2019114:	d0a7ef17 	ldw	r2,-24644(gp)
 2019118:	00e00004 	movi	r3,-32768
 201911c:	10c0008d 	sth	r3,2(r2)

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 2019120:	d0a7ee17 	ldw	r2,-24648(gp)
 2019124:	d0a7f015 	stw	r2,-24640(gp)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 2019128:	008085f4 	movhi	r2,535
 201912c:	10a86704 	addi	r2,r2,-24164
 2019130:	00e00004 	movi	r3,-32768
 2019134:	10c0540d 	sth	r3,336(r2)

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
 2019138:	d127f104 	addi	r4,gp,-24636
 201913c:	2014f140 	call	2014f14 <sys_mutex_new>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 2019140:	0001883a 	nop
 2019144:	e037883a 	mov	sp,fp
 2019148:	dfc00117 	ldw	ra,4(sp)
 201914c:	df000017 	ldw	fp,0(sp)
 2019150:	dec00204 	addi	sp,sp,8
 2019154:	f800283a 	ret

02019158 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 2019158:	defffc04 	addi	sp,sp,-16
 201915c:	dfc00315 	stw	ra,12(sp)
 2019160:	df000215 	stw	fp,8(sp)
 2019164:	df000204 	addi	fp,sp,8
 2019168:	e13fff15 	stw	r4,-4(fp)
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 201916c:	e0bfff17 	ldw	r2,-4(fp)
 2019170:	10003426 	beq	r2,zero,2019244 <mem_free+0xec>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 2019174:	d0a7ee17 	ldw	r2,-24648(gp)
 2019178:	e0ffff17 	ldw	r3,-4(fp)
 201917c:	18800336 	bltu	r3,r2,201918c <mem_free+0x34>
 2019180:	d0a7ef17 	ldw	r2,-24644(gp)
 2019184:	e0ffff17 	ldw	r3,-4(fp)
 2019188:	18800e36 	bltu	r3,r2,20191c4 <mem_free+0x6c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 201918c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2019190:	10000126 	beq	r2,zero,2019198 <mem_free+0x40>
 2019194:	2010de80 	call	2010de8 <vTaskEnterCritical>
    MEM_STATS_INC(illegal);
 2019198:	008085f4 	movhi	r2,535
 201919c:	10a86704 	addi	r2,r2,-24164
 20191a0:	10805717 	ldw	r2,348(r2)
 20191a4:	10c00044 	addi	r3,r2,1
 20191a8:	008085f4 	movhi	r2,535
 20191ac:	10a86704 	addi	r2,r2,-24164
 20191b0:	10c05715 	stw	r3,348(r2)
    SYS_ARCH_UNPROTECT(lev);
 20191b4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20191b8:	10002426 	beq	r2,zero,201924c <mem_free+0xf4>
 20191bc:	2010e300 	call	2010e30 <vTaskExitCritical>
    return;
 20191c0:	00002206 	br	201924c <mem_free+0xf4>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 20191c4:	d127f104 	addi	r4,gp,-24636
 20191c8:	2014fd40 	call	2014fd4 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 20191cc:	e0bfff17 	ldw	r2,-4(fp)
 20191d0:	10bffe04 	addi	r2,r2,-8
 20191d4:	e0bffe15 	stw	r2,-8(fp)
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 20191d8:	e0bffe17 	ldw	r2,-8(fp)
 20191dc:	10000105 	stb	zero,4(r2)

  if (mem < lfree) {
 20191e0:	d0a7f017 	ldw	r2,-24640(gp)
 20191e4:	e0fffe17 	ldw	r3,-8(fp)
 20191e8:	1880022e 	bgeu	r3,r2,20191f4 <mem_free+0x9c>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 20191ec:	e0bffe17 	ldw	r2,-8(fp)
 20191f0:	d0a7f015 	stw	r2,-24640(gp)
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 20191f4:	008085f4 	movhi	r2,535
 20191f8:	10a86704 	addi	r2,r2,-24164
 20191fc:	1080548b 	ldhu	r2,338(r2)
 2019200:	e0fffe17 	ldw	r3,-8(fp)
 2019204:	d127ee17 	ldw	r4,-24648(gp)
 2019208:	1907c83a 	sub	r3,r3,r4
 201920c:	1809883a 	mov	r4,r3
 2019210:	e0fffe17 	ldw	r3,-8(fp)
 2019214:	18c0000b 	ldhu	r3,0(r3)
 2019218:	20c7c83a 	sub	r3,r4,r3
 201921c:	10c5883a 	add	r2,r2,r3
 2019220:	1007883a 	mov	r3,r2
 2019224:	008085f4 	movhi	r2,535
 2019228:	10a86704 	addi	r2,r2,-24164
 201922c:	10c0548d 	sth	r3,338(r2)

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 2019230:	e13ffe17 	ldw	r4,-8(fp)
 2019234:	2018f780 	call	2018f78 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 2019238:	d127f104 	addi	r4,gp,-24636
 201923c:	20150200 	call	2015020 <sys_mutex_unlock>
 2019240:	00000306 	br	2019250 <mem_free+0xf8>
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
 2019244:	0001883a 	nop
 2019248:	00000106 	br	2019250 <mem_free+0xf8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
 201924c:	0001883a 	nop
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 2019250:	e037883a 	mov	sp,fp
 2019254:	dfc00117 	ldw	ra,4(sp)
 2019258:	df000017 	ldw	fp,0(sp)
 201925c:	dec00204 	addi	sp,sp,8
 2019260:	f800283a 	ret

02019264 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 2019264:	defff804 	addi	sp,sp,-32
 2019268:	dfc00715 	stw	ra,28(sp)
 201926c:	df000615 	stw	fp,24(sp)
 2019270:	df000604 	addi	fp,sp,24
 2019274:	e13ffe15 	stw	r4,-8(fp)
 2019278:	2805883a 	mov	r2,r5
 201927c:	e0bfff0d 	sth	r2,-4(fp)
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 2019280:	e0bfff0b 	ldhu	r2,-4(fp)
 2019284:	108000c4 	addi	r2,r2,3
 2019288:	1007883a 	mov	r3,r2
 201928c:	00bfff04 	movi	r2,-4
 2019290:	1884703a 	and	r2,r3,r2
 2019294:	e0bfff0d 	sth	r2,-4(fp)

  if(newsize < MIN_SIZE_ALIGNED) {
 2019298:	e0bfff0b 	ldhu	r2,-4(fp)
 201929c:	10800328 	cmpgeui	r2,r2,12
 20192a0:	1000021e 	bne	r2,zero,20192ac <mem_trim+0x48>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 20192a4:	00800304 	movi	r2,12
 20192a8:	e0bfff0d 	sth	r2,-4(fp)
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 20192ac:	e0bfff0b 	ldhu	r2,-4(fp)
 20192b0:	10a00070 	cmpltui	r2,r2,32769
 20192b4:	1000021e 	bne	r2,zero,20192c0 <mem_trim+0x5c>
    return NULL;
 20192b8:	0005883a 	mov	r2,zero
 20192bc:	0000a606 	br	2019558 <mem_trim+0x2f4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 20192c0:	d0a7ee17 	ldw	r2,-24648(gp)
 20192c4:	e0fffe17 	ldw	r3,-8(fp)
 20192c8:	18800336 	bltu	r3,r2,20192d8 <mem_trim+0x74>
 20192cc:	d0a7ef17 	ldw	r2,-24644(gp)
 20192d0:	e0fffe17 	ldw	r3,-8(fp)
 20192d4:	18800f36 	bltu	r3,r2,2019314 <mem_trim+0xb0>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 20192d8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20192dc:	10000126 	beq	r2,zero,20192e4 <mem_trim+0x80>
 20192e0:	2010de80 	call	2010de8 <vTaskEnterCritical>
    MEM_STATS_INC(illegal);
 20192e4:	008085f4 	movhi	r2,535
 20192e8:	10a86704 	addi	r2,r2,-24164
 20192ec:	10805717 	ldw	r2,348(r2)
 20192f0:	10c00044 	addi	r3,r2,1
 20192f4:	008085f4 	movhi	r2,535
 20192f8:	10a86704 	addi	r2,r2,-24164
 20192fc:	10c05715 	stw	r3,348(r2)
    SYS_ARCH_UNPROTECT(lev);
 2019300:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2019304:	10000126 	beq	r2,zero,201930c <mem_trim+0xa8>
 2019308:	2010e300 	call	2010e30 <vTaskExitCritical>
    return rmem;
 201930c:	e0bffe17 	ldw	r2,-8(fp)
 2019310:	00009106 	br	2019558 <mem_trim+0x2f4>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 2019314:	e0bffe17 	ldw	r2,-8(fp)
 2019318:	10bffe04 	addi	r2,r2,-8
 201931c:	e0bffa15 	stw	r2,-24(fp)
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 2019320:	e0bffa17 	ldw	r2,-24(fp)
 2019324:	d0e7ee17 	ldw	r3,-24648(gp)
 2019328:	10c5c83a 	sub	r2,r2,r3
 201932c:	e0bffb0d 	sth	r2,-20(fp)

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 2019330:	e0bffa17 	ldw	r2,-24(fp)
 2019334:	10c0000b 	ldhu	r3,0(r2)
 2019338:	e0bffb0b 	ldhu	r2,-20(fp)
 201933c:	1885c83a 	sub	r2,r3,r2
 2019340:	10bffe04 	addi	r2,r2,-8
 2019344:	e0bffb8d 	sth	r2,-18(fp)
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 2019348:	e0bfff0b 	ldhu	r2,-4(fp)
 201934c:	e0fffb8b 	ldhu	r3,-18(fp)
 2019350:	1880022e 	bgeu	r3,r2,201935c <mem_trim+0xf8>
    /* not supported */
    return NULL;
 2019354:	0005883a 	mov	r2,zero
 2019358:	00007f06 	br	2019558 <mem_trim+0x2f4>
  }
  if (newsize == size) {
 201935c:	e0ffff0b 	ldhu	r3,-4(fp)
 2019360:	e0bffb8b 	ldhu	r2,-18(fp)
 2019364:	1880021e 	bne	r3,r2,2019370 <mem_trim+0x10c>
    /* No change in size, simply return */
    return rmem;
 2019368:	e0bffe17 	ldw	r2,-8(fp)
 201936c:	00007a06 	br	2019558 <mem_trim+0x2f4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 2019370:	d127f104 	addi	r4,gp,-24636
 2019374:	2014fd40 	call	2014fd4 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 2019378:	d0e7ee17 	ldw	r3,-24648(gp)
 201937c:	e0bffa17 	ldw	r2,-24(fp)
 2019380:	1080000b 	ldhu	r2,0(r2)
 2019384:	10bfffcc 	andi	r2,r2,65535
 2019388:	1885883a 	add	r2,r3,r2
 201938c:	e0bffc15 	stw	r2,-16(fp)
  if(mem2->used == 0) {
 2019390:	e0bffc17 	ldw	r2,-16(fp)
 2019394:	10800103 	ldbu	r2,4(r2)
 2019398:	10803fcc 	andi	r2,r2,255
 201939c:	1000361e 	bne	r2,zero,2019478 <mem_trim+0x214>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 20193a0:	e0bffc17 	ldw	r2,-16(fp)
 20193a4:	1080000b 	ldhu	r2,0(r2)
 20193a8:	e0bffd0d 	sth	r2,-12(fp)
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 20193ac:	e0fffb0b 	ldhu	r3,-20(fp)
 20193b0:	e0bfff0b 	ldhu	r2,-4(fp)
 20193b4:	1885883a 	add	r2,r3,r2
 20193b8:	10800204 	addi	r2,r2,8
 20193bc:	e0bffd8d 	sth	r2,-10(fp)
    if (lfree == mem2) {
 20193c0:	d0e7f017 	ldw	r3,-24640(gp)
 20193c4:	e0bffc17 	ldw	r2,-16(fp)
 20193c8:	1880041e 	bne	r3,r2,20193dc <mem_trim+0x178>
      lfree = (struct mem *)(void *)&ram[ptr2];
 20193cc:	d0e7ee17 	ldw	r3,-24648(gp)
 20193d0:	e0bffd8b 	ldhu	r2,-10(fp)
 20193d4:	1885883a 	add	r2,r3,r2
 20193d8:	d0a7f015 	stw	r2,-24640(gp)
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 20193dc:	d0e7ee17 	ldw	r3,-24648(gp)
 20193e0:	e0bffd8b 	ldhu	r2,-10(fp)
 20193e4:	1885883a 	add	r2,r3,r2
 20193e8:	e0bffc15 	stw	r2,-16(fp)
    mem2->used = 0;
 20193ec:	e0bffc17 	ldw	r2,-16(fp)
 20193f0:	10000105 	stb	zero,4(r2)
    /* restore the next pointer */
    mem2->next = next;
 20193f4:	e0bffc17 	ldw	r2,-16(fp)
 20193f8:	e0fffd0b 	ldhu	r3,-12(fp)
 20193fc:	10c0000d 	sth	r3,0(r2)
    /* link it back to mem */
    mem2->prev = ptr;
 2019400:	e0bffc17 	ldw	r2,-16(fp)
 2019404:	e0fffb0b 	ldhu	r3,-20(fp)
 2019408:	10c0008d 	sth	r3,2(r2)
    /* link mem to it */
    mem->next = ptr2;
 201940c:	e0bffa17 	ldw	r2,-24(fp)
 2019410:	e0fffd8b 	ldhu	r3,-10(fp)
 2019414:	10c0000d 	sth	r3,0(r2)
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 2019418:	e0bffc17 	ldw	r2,-16(fp)
 201941c:	1080000b 	ldhu	r2,0(r2)
 2019420:	10ffffcc 	andi	r3,r2,65535
 2019424:	00a00014 	movui	r2,32768
 2019428:	18800726 	beq	r3,r2,2019448 <mem_trim+0x1e4>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 201942c:	d0e7ee17 	ldw	r3,-24648(gp)
 2019430:	e0bffc17 	ldw	r2,-16(fp)
 2019434:	1080000b 	ldhu	r2,0(r2)
 2019438:	10bfffcc 	andi	r2,r2,65535
 201943c:	1885883a 	add	r2,r3,r2
 2019440:	e0fffd8b 	ldhu	r3,-10(fp)
 2019444:	10c0008d 	sth	r3,2(r2)
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 2019448:	008085f4 	movhi	r2,535
 201944c:	10a86704 	addi	r2,r2,-24164
 2019450:	1080548b 	ldhu	r2,338(r2)
 2019454:	e13fff0b 	ldhu	r4,-4(fp)
 2019458:	e0fffb8b 	ldhu	r3,-18(fp)
 201945c:	20c7c83a 	sub	r3,r4,r3
 2019460:	10c5883a 	add	r2,r2,r3
 2019464:	1007883a 	mov	r3,r2
 2019468:	008085f4 	movhi	r2,535
 201946c:	10a86704 	addi	r2,r2,-24164
 2019470:	10c0548d 	sth	r3,338(r2)
 2019474:	00003506 	br	201954c <mem_trim+0x2e8>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 2019478:	e0bfff0b 	ldhu	r2,-4(fp)
 201947c:	10800504 	addi	r2,r2,20
 2019480:	e0fffb8b 	ldhu	r3,-18(fp)
 2019484:	18803136 	bltu	r3,r2,201954c <mem_trim+0x2e8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 2019488:	e0fffb0b 	ldhu	r3,-20(fp)
 201948c:	e0bfff0b 	ldhu	r2,-4(fp)
 2019490:	1885883a 	add	r2,r3,r2
 2019494:	10800204 	addi	r2,r2,8
 2019498:	e0bffd8d 	sth	r2,-10(fp)
    mem2 = (struct mem *)(void *)&ram[ptr2];
 201949c:	d0e7ee17 	ldw	r3,-24648(gp)
 20194a0:	e0bffd8b 	ldhu	r2,-10(fp)
 20194a4:	1885883a 	add	r2,r3,r2
 20194a8:	e0bffc15 	stw	r2,-16(fp)
    if (mem2 < lfree) {
 20194ac:	d0a7f017 	ldw	r2,-24640(gp)
 20194b0:	e0fffc17 	ldw	r3,-16(fp)
 20194b4:	1880022e 	bgeu	r3,r2,20194c0 <mem_trim+0x25c>
      lfree = mem2;
 20194b8:	e0bffc17 	ldw	r2,-16(fp)
 20194bc:	d0a7f015 	stw	r2,-24640(gp)
    }
    mem2->used = 0;
 20194c0:	e0bffc17 	ldw	r2,-16(fp)
 20194c4:	10000105 	stb	zero,4(r2)
    mem2->next = mem->next;
 20194c8:	e0bffa17 	ldw	r2,-24(fp)
 20194cc:	10c0000b 	ldhu	r3,0(r2)
 20194d0:	e0bffc17 	ldw	r2,-16(fp)
 20194d4:	10c0000d 	sth	r3,0(r2)
    mem2->prev = ptr;
 20194d8:	e0bffc17 	ldw	r2,-16(fp)
 20194dc:	e0fffb0b 	ldhu	r3,-20(fp)
 20194e0:	10c0008d 	sth	r3,2(r2)
    mem->next = ptr2;
 20194e4:	e0bffa17 	ldw	r2,-24(fp)
 20194e8:	e0fffd8b 	ldhu	r3,-10(fp)
 20194ec:	10c0000d 	sth	r3,0(r2)
    if (mem2->next != MEM_SIZE_ALIGNED) {
 20194f0:	e0bffc17 	ldw	r2,-16(fp)
 20194f4:	1080000b 	ldhu	r2,0(r2)
 20194f8:	10ffffcc 	andi	r3,r2,65535
 20194fc:	00a00014 	movui	r2,32768
 2019500:	18800726 	beq	r3,r2,2019520 <mem_trim+0x2bc>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 2019504:	d0e7ee17 	ldw	r3,-24648(gp)
 2019508:	e0bffc17 	ldw	r2,-16(fp)
 201950c:	1080000b 	ldhu	r2,0(r2)
 2019510:	10bfffcc 	andi	r2,r2,65535
 2019514:	1885883a 	add	r2,r3,r2
 2019518:	e0fffd8b 	ldhu	r3,-10(fp)
 201951c:	10c0008d 	sth	r3,2(r2)
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 2019520:	008085f4 	movhi	r2,535
 2019524:	10a86704 	addi	r2,r2,-24164
 2019528:	1080548b 	ldhu	r2,338(r2)
 201952c:	e13fff0b 	ldhu	r4,-4(fp)
 2019530:	e0fffb8b 	ldhu	r3,-18(fp)
 2019534:	20c7c83a 	sub	r3,r4,r3
 2019538:	10c5883a 	add	r2,r2,r3
 201953c:	1007883a 	mov	r3,r2
 2019540:	008085f4 	movhi	r2,535
 2019544:	10a86704 	addi	r2,r2,-24164
 2019548:	10c0548d 	sth	r3,338(r2)
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 201954c:	d127f104 	addi	r4,gp,-24636
 2019550:	20150200 	call	2015020 <sys_mutex_unlock>
  return rmem;
 2019554:	e0bffe17 	ldw	r2,-8(fp)
}
 2019558:	e037883a 	mov	sp,fp
 201955c:	dfc00117 	ldw	ra,4(sp)
 2019560:	df000017 	ldw	fp,0(sp)
 2019564:	dec00204 	addi	sp,sp,8
 2019568:	f800283a 	ret

0201956c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 201956c:	defff804 	addi	sp,sp,-32
 2019570:	dfc00715 	stw	ra,28(sp)
 2019574:	df000615 	stw	fp,24(sp)
 2019578:	df000604 	addi	fp,sp,24
 201957c:	2005883a 	mov	r2,r4
 2019580:	e0bfff0d 	sth	r2,-4(fp)
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 2019584:	e0bfff0b 	ldhu	r2,-4(fp)
 2019588:	1000021e 	bne	r2,zero,2019594 <mem_malloc+0x28>
    return NULL;
 201958c:	0005883a 	mov	r2,zero
 2019590:	0000bd06 	br	2019888 <mem_malloc+0x31c>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 2019594:	e0bfff0b 	ldhu	r2,-4(fp)
 2019598:	108000c4 	addi	r2,r2,3
 201959c:	1007883a 	mov	r3,r2
 20195a0:	00bfff04 	movi	r2,-4
 20195a4:	1884703a 	and	r2,r3,r2
 20195a8:	e0bfff0d 	sth	r2,-4(fp)

  if(size < MIN_SIZE_ALIGNED) {
 20195ac:	e0bfff0b 	ldhu	r2,-4(fp)
 20195b0:	10800328 	cmpgeui	r2,r2,12
 20195b4:	1000021e 	bne	r2,zero,20195c0 <mem_malloc+0x54>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 20195b8:	00800304 	movi	r2,12
 20195bc:	e0bfff0d 	sth	r2,-4(fp)
  }

  if (size > MEM_SIZE_ALIGNED) {
 20195c0:	e0bfff0b 	ldhu	r2,-4(fp)
 20195c4:	10a00070 	cmpltui	r2,r2,32769
 20195c8:	1000021e 	bne	r2,zero,20195d4 <mem_malloc+0x68>
    return NULL;
 20195cc:	0005883a 	mov	r2,zero
 20195d0:	0000ad06 	br	2019888 <mem_malloc+0x31c>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 20195d4:	d127f104 	addi	r4,gp,-24636
 20195d8:	2014fd40 	call	2014fd4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 20195dc:	d0a7f017 	ldw	r2,-24640(gp)
 20195e0:	1007883a 	mov	r3,r2
 20195e4:	d0a7ee17 	ldw	r2,-24648(gp)
 20195e8:	1885c83a 	sub	r2,r3,r2
 20195ec:	e0bffa0d 	sth	r2,-24(fp)
 20195f0:	00009606 	br	201984c <mem_malloc+0x2e0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 20195f4:	d0e7ee17 	ldw	r3,-24648(gp)
 20195f8:	e0bffa0b 	ldhu	r2,-24(fp)
 20195fc:	1885883a 	add	r2,r3,r2
 2019600:	e0bffc15 	stw	r2,-16(fp)
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 2019604:	e0bffc17 	ldw	r2,-16(fp)
 2019608:	10800103 	ldbu	r2,4(r2)
 201960c:	10803fcc 	andi	r2,r2,255
 2019610:	1000891e 	bne	r2,zero,2019838 <mem_malloc+0x2cc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 2019614:	e0bffc17 	ldw	r2,-16(fp)
 2019618:	1080000b 	ldhu	r2,0(r2)
 201961c:	10ffffcc 	andi	r3,r2,65535
 2019620:	e0bffa0b 	ldhu	r2,-24(fp)
 2019624:	1885c83a 	sub	r2,r3,r2
 2019628:	10fffe04 	addi	r3,r2,-8
 201962c:	e0bfff0b 	ldhu	r2,-4(fp)
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 2019630:	18808136 	bltu	r3,r2,2019838 <mem_malloc+0x2cc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 2019634:	e0bffc17 	ldw	r2,-16(fp)
 2019638:	1080000b 	ldhu	r2,0(r2)
 201963c:	10ffffcc 	andi	r3,r2,65535
 2019640:	e0bffa0b 	ldhu	r2,-24(fp)
 2019644:	1885c83a 	sub	r2,r3,r2
 2019648:	10fffe04 	addi	r3,r2,-8
 201964c:	e0bfff0b 	ldhu	r2,-4(fp)
 2019650:	10800504 	addi	r2,r2,20
 2019654:	18803e36 	bltu	r3,r2,2019750 <mem_malloc+0x1e4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 2019658:	e0fffa0b 	ldhu	r3,-24(fp)
 201965c:	e0bfff0b 	ldhu	r2,-4(fp)
 2019660:	1885883a 	add	r2,r3,r2
 2019664:	10800204 	addi	r2,r2,8
 2019668:	e0bffd0d 	sth	r2,-12(fp)
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 201966c:	d0e7ee17 	ldw	r3,-24648(gp)
 2019670:	e0bffd0b 	ldhu	r2,-12(fp)
 2019674:	1885883a 	add	r2,r3,r2
 2019678:	e0bffe15 	stw	r2,-8(fp)
          mem2->used = 0;
 201967c:	e0bffe17 	ldw	r2,-8(fp)
 2019680:	10000105 	stb	zero,4(r2)
          mem2->next = mem->next;
 2019684:	e0bffc17 	ldw	r2,-16(fp)
 2019688:	10c0000b 	ldhu	r3,0(r2)
 201968c:	e0bffe17 	ldw	r2,-8(fp)
 2019690:	10c0000d 	sth	r3,0(r2)
          mem2->prev = ptr;
 2019694:	e0bffe17 	ldw	r2,-8(fp)
 2019698:	e0fffa0b 	ldhu	r3,-24(fp)
 201969c:	10c0008d 	sth	r3,2(r2)
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 20196a0:	e0bffc17 	ldw	r2,-16(fp)
 20196a4:	e0fffd0b 	ldhu	r3,-12(fp)
 20196a8:	10c0000d 	sth	r3,0(r2)
          mem->used = 1;
 20196ac:	e0bffc17 	ldw	r2,-16(fp)
 20196b0:	00c00044 	movi	r3,1
 20196b4:	10c00105 	stb	r3,4(r2)

          if (mem2->next != MEM_SIZE_ALIGNED) {
 20196b8:	e0bffe17 	ldw	r2,-8(fp)
 20196bc:	1080000b 	ldhu	r2,0(r2)
 20196c0:	10ffffcc 	andi	r3,r2,65535
 20196c4:	00a00014 	movui	r2,32768
 20196c8:	18800726 	beq	r3,r2,20196e8 <mem_malloc+0x17c>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 20196cc:	d0e7ee17 	ldw	r3,-24648(gp)
 20196d0:	e0bffe17 	ldw	r2,-8(fp)
 20196d4:	1080000b 	ldhu	r2,0(r2)
 20196d8:	10bfffcc 	andi	r2,r2,65535
 20196dc:	1885883a 	add	r2,r3,r2
 20196e0:	e0fffd0b 	ldhu	r3,-12(fp)
 20196e4:	10c0008d 	sth	r3,2(r2)
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 20196e8:	008085f4 	movhi	r2,535
 20196ec:	10a86704 	addi	r2,r2,-24164
 20196f0:	10c0548b 	ldhu	r3,338(r2)
 20196f4:	e0bfff0b 	ldhu	r2,-4(fp)
 20196f8:	1885883a 	add	r2,r3,r2
 20196fc:	10800204 	addi	r2,r2,8
 2019700:	1007883a 	mov	r3,r2
 2019704:	008085f4 	movhi	r2,535
 2019708:	10a86704 	addi	r2,r2,-24164
 201970c:	10c0548d 	sth	r3,338(r2)
 2019710:	008085f4 	movhi	r2,535
 2019714:	10a86704 	addi	r2,r2,-24164
 2019718:	10c0550b 	ldhu	r3,340(r2)
 201971c:	008085f4 	movhi	r2,535
 2019720:	10a86704 	addi	r2,r2,-24164
 2019724:	1080548b 	ldhu	r2,338(r2)
 2019728:	18ffffcc 	andi	r3,r3,65535
 201972c:	10bfffcc 	andi	r2,r2,65535
 2019730:	1880272e 	bgeu	r3,r2,20197d0 <mem_malloc+0x264>
 2019734:	008085f4 	movhi	r2,535
 2019738:	10a86704 	addi	r2,r2,-24164
 201973c:	10c0548b 	ldhu	r3,338(r2)
 2019740:	008085f4 	movhi	r2,535
 2019744:	10a86704 	addi	r2,r2,-24164
 2019748:	10c0550d 	sth	r3,340(r2)
 201974c:	00002006 	br	20197d0 <mem_malloc+0x264>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 2019750:	e0bffc17 	ldw	r2,-16(fp)
 2019754:	00c00044 	movi	r3,1
 2019758:	10c00105 	stb	r3,4(r2)
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 201975c:	008085f4 	movhi	r2,535
 2019760:	10a86704 	addi	r2,r2,-24164
 2019764:	1080548b 	ldhu	r2,338(r2)
 2019768:	e0fffc17 	ldw	r3,-16(fp)
 201976c:	18c0000b 	ldhu	r3,0(r3)
 2019770:	e13ffc17 	ldw	r4,-16(fp)
 2019774:	d167ee17 	ldw	r5,-24648(gp)
 2019778:	2149c83a 	sub	r4,r4,r5
 201977c:	1907c83a 	sub	r3,r3,r4
 2019780:	10c5883a 	add	r2,r2,r3
 2019784:	1007883a 	mov	r3,r2
 2019788:	008085f4 	movhi	r2,535
 201978c:	10a86704 	addi	r2,r2,-24164
 2019790:	10c0548d 	sth	r3,338(r2)
 2019794:	008085f4 	movhi	r2,535
 2019798:	10a86704 	addi	r2,r2,-24164
 201979c:	10c0550b 	ldhu	r3,340(r2)
 20197a0:	008085f4 	movhi	r2,535
 20197a4:	10a86704 	addi	r2,r2,-24164
 20197a8:	1080548b 	ldhu	r2,338(r2)
 20197ac:	18ffffcc 	andi	r3,r3,65535
 20197b0:	10bfffcc 	andi	r2,r2,65535
 20197b4:	1880062e 	bgeu	r3,r2,20197d0 <mem_malloc+0x264>
 20197b8:	008085f4 	movhi	r2,535
 20197bc:	10a86704 	addi	r2,r2,-24164
 20197c0:	10c0548b 	ldhu	r3,338(r2)
 20197c4:	008085f4 	movhi	r2,535
 20197c8:	10a86704 	addi	r2,r2,-24164
 20197cc:	10c0550d 	sth	r3,340(r2)
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 20197d0:	d0a7f017 	ldw	r2,-24640(gp)
 20197d4:	e0fffc17 	ldw	r3,-16(fp)
 20197d8:	1880121e 	bne	r3,r2,2019824 <mem_malloc+0x2b8>
          struct mem *cur = lfree;
 20197dc:	d0a7f017 	ldw	r2,-24640(gp)
 20197e0:	e0bffb15 	stw	r2,-20(fp)
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 20197e4:	00000606 	br	2019800 <mem_malloc+0x294>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 20197e8:	d0e7ee17 	ldw	r3,-24648(gp)
 20197ec:	e0bffb17 	ldw	r2,-20(fp)
 20197f0:	1080000b 	ldhu	r2,0(r2)
 20197f4:	10bfffcc 	andi	r2,r2,65535
 20197f8:	1885883a 	add	r2,r3,r2
 20197fc:	e0bffb15 	stw	r2,-20(fp)
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 2019800:	e0bffb17 	ldw	r2,-20(fp)
 2019804:	10800103 	ldbu	r2,4(r2)
 2019808:	10803fcc 	andi	r2,r2,255
 201980c:	10000326 	beq	r2,zero,201981c <mem_malloc+0x2b0>
 2019810:	d0a7ef17 	ldw	r2,-24644(gp)
 2019814:	e0fffb17 	ldw	r3,-20(fp)
 2019818:	18bff31e 	bne	r3,r2,20197e8 <__alt_mem_mem_0+0xfcff97e8>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
          }
          lfree = cur;
 201981c:	e0bffb17 	ldw	r2,-20(fp)
 2019820:	d0a7f015 	stw	r2,-24640(gp)
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 2019824:	d127f104 	addi	r4,gp,-24636
 2019828:	20150200 	call	2015020 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 201982c:	e0bffc17 	ldw	r2,-16(fp)
 2019830:	10800204 	addi	r2,r2,8
 2019834:	00001406 	br	2019888 <mem_malloc+0x31c>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 2019838:	d0e7ee17 	ldw	r3,-24648(gp)
 201983c:	e0bffa0b 	ldhu	r2,-24(fp)
 2019840:	1885883a 	add	r2,r3,r2
 2019844:	1080000b 	ldhu	r2,0(r2)
 2019848:	e0bffa0d 	sth	r2,-24(fp)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 201984c:	e0fffa0b 	ldhu	r3,-24(fp)
 2019850:	e0bfff0b 	ldhu	r2,-4(fp)
 2019854:	01200014 	movui	r4,32768
 2019858:	2085c83a 	sub	r2,r4,r2
 201985c:	18bf6516 	blt	r3,r2,20195f4 <__alt_mem_mem_0+0xfcff95f4>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while(local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 2019860:	008085f4 	movhi	r2,535
 2019864:	10a86704 	addi	r2,r2,-24164
 2019868:	10805617 	ldw	r2,344(r2)
 201986c:	10c00044 	addi	r3,r2,1
 2019870:	008085f4 	movhi	r2,535
 2019874:	10a86704 	addi	r2,r2,-24164
 2019878:	10c05615 	stw	r3,344(r2)
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 201987c:	d127f104 	addi	r4,gp,-24636
 2019880:	20150200 	call	2015020 <sys_mutex_unlock>
  return NULL;
 2019884:	0005883a 	mov	r2,zero
}
 2019888:	e037883a 	mov	sp,fp
 201988c:	dfc00117 	ldw	ra,4(sp)
 2019890:	df000017 	ldw	fp,0(sp)
 2019894:	dec00204 	addi	sp,sp,8
 2019898:	f800283a 	ret

0201989c <mem_calloc>:
 * @param count number of objects to allocate
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *mem_calloc(mem_size_t count, mem_size_t size)
{
 201989c:	defffb04 	addi	sp,sp,-20
 20198a0:	dfc00415 	stw	ra,16(sp)
 20198a4:	df000315 	stw	fp,12(sp)
 20198a8:	df000304 	addi	fp,sp,12
 20198ac:	2007883a 	mov	r3,r4
 20198b0:	2805883a 	mov	r2,r5
 20198b4:	e0fffe0d 	sth	r3,-8(fp)
 20198b8:	e0bfff0d 	sth	r2,-4(fp)
  void *p;

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc(count * size);
 20198bc:	e0fffe0b 	ldhu	r3,-8(fp)
 20198c0:	e0bfff0b 	ldhu	r2,-4(fp)
 20198c4:	1885383a 	mul	r2,r3,r2
 20198c8:	10bfffcc 	andi	r2,r2,65535
 20198cc:	1009883a 	mov	r4,r2
 20198d0:	201956c0 	call	201956c <mem_malloc>
 20198d4:	e0bffd15 	stw	r2,-12(fp)
  if (p) {
 20198d8:	e0bffd17 	ldw	r2,-12(fp)
 20198dc:	10000726 	beq	r2,zero,20198fc <mem_calloc+0x60>
    /* zero the memory */
    memset(p, 0, count * size);
 20198e0:	e0fffe0b 	ldhu	r3,-8(fp)
 20198e4:	e0bfff0b 	ldhu	r2,-4(fp)
 20198e8:	1885383a 	mul	r2,r3,r2
 20198ec:	100d883a 	mov	r6,r2
 20198f0:	000b883a 	mov	r5,zero
 20198f4:	e13ffd17 	ldw	r4,-12(fp)
 20198f8:	2005fa00 	call	2005fa0 <memset>
  }
  return p;
 20198fc:	e0bffd17 	ldw	r2,-12(fp)
}
 2019900:	e037883a 	mov	sp,fp
 2019904:	dfc00117 	ldw	ra,4(sp)
 2019908:	df000017 	ldw	fp,0(sp)
 201990c:	dec00204 	addi	sp,sp,8
 2019910:	f800283a 	ret

02019914 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 2019914:	deffff04 	addi	sp,sp,-4
 2019918:	df000015 	stw	fp,0(sp)
 201991c:	d839883a 	mov	fp,sp
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 2019920:	0001883a 	nop
 2019924:	e037883a 	mov	sp,fp
 2019928:	df000017 	ldw	fp,0(sp)
 201992c:	dec00104 	addi	sp,sp,4
 2019930:	f800283a 	ret

02019934 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
 2019934:	defffa04 	addi	sp,sp,-24
 2019938:	dfc00515 	stw	ra,20(sp)
 201993c:	df000415 	stw	fp,16(sp)
 2019940:	df000404 	addi	fp,sp,16
 2019944:	e13ffc15 	stw	r4,-16(fp)
 2019948:	e17ffd15 	stw	r5,-12(fp)
 201994c:	e1bffe15 	stw	r6,-8(fp)
 2019950:	e1ffff15 	stw	r7,-4(fp)

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
 2019954:	e0bffc17 	ldw	r2,-16(fp)
 2019958:	10000115 	stw	zero,4(r2)
  ip_addr_set_zero(&netif->netmask);
 201995c:	e0bffc17 	ldw	r2,-16(fp)
 2019960:	10000215 	stw	zero,8(r2)
  ip_addr_set_zero(&netif->gw);
 2019964:	e0bffc17 	ldw	r2,-16(fp)
 2019968:	10000315 	stw	zero,12(r2)
  netif->flags = 0;
 201996c:	e0bffc17 	ldw	r2,-16(fp)
 2019970:	10000e45 	stb	zero,57(r2)
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
 2019974:	e0bffc17 	ldw	r2,-16(fp)
 2019978:	10000a15 	stw	zero,40(r2)
#if LWIP_AUTOIP
  /* netif not under AutoIP control by default */
  netif->autoip = NULL;
#endif /* LWIP_AUTOIP */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 201997c:	e0bffc17 	ldw	r2,-16(fp)
 2019980:	10000715 	stw	zero,28(r2)
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 2019984:	e0bffc17 	ldw	r2,-16(fp)
 2019988:	10000815 	stw	zero,32(r2)
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 201998c:	e0bffc17 	ldw	r2,-16(fp)
 2019990:	e0c00217 	ldw	r3,8(fp)
 2019994:	10c00915 	stw	r3,36(r2)
  netif->num = netif_num++;
 2019998:	d0a7f203 	ldbu	r2,-24632(gp)
 201999c:	10c00044 	addi	r3,r2,1
 20199a0:	d0e7f205 	stb	r3,-24632(gp)
 20199a4:	e0fffc17 	ldw	r3,-16(fp)
 20199a8:	18800f05 	stb	r2,60(r3)
  netif->input = input;
 20199ac:	e0bffc17 	ldw	r2,-16(fp)
 20199b0:	e0c00417 	ldw	r3,16(fp)
 20199b4:	10c00415 	stw	r3,16(r2)
  NETIF_SET_HWADDRHINT(netif, NULL);
 20199b8:	e0bffc17 	ldw	r2,-16(fp)
 20199bc:	10001015 	stw	zero,64(r2)
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
 20199c0:	e1ffff17 	ldw	r7,-4(fp)
 20199c4:	e1bffe17 	ldw	r6,-8(fp)
 20199c8:	e17ffd17 	ldw	r5,-12(fp)
 20199cc:	e13ffc17 	ldw	r4,-16(fp)
 20199d0:	2019a240 	call	2019a24 <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 20199d4:	e0800317 	ldw	r2,12(fp)
 20199d8:	e13ffc17 	ldw	r4,-16(fp)
 20199dc:	103ee83a 	callr	r2
 20199e0:	10803fcc 	andi	r2,r2,255
 20199e4:	1080201c 	xori	r2,r2,128
 20199e8:	10bfe004 	addi	r2,r2,-128
 20199ec:	10000226 	beq	r2,zero,20199f8 <netif_add+0xc4>
    return NULL;
 20199f0:	0005883a 	mov	r2,zero
 20199f4:	00000606 	br	2019a10 <netif_add+0xdc>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 20199f8:	d0e7f317 	ldw	r3,-24628(gp)
 20199fc:	e0bffc17 	ldw	r2,-16(fp)
 2019a00:	10c00015 	stw	r3,0(r2)
  netif_list = netif;
 2019a04:	e0bffc17 	ldw	r2,-16(fp)
 2019a08:	d0a7f315 	stw	r2,-24628(gp)
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 2019a0c:	e0bffc17 	ldw	r2,-16(fp)
}
 2019a10:	e037883a 	mov	sp,fp
 2019a14:	dfc00117 	ldw	ra,4(sp)
 2019a18:	df000017 	ldw	fp,0(sp)
 2019a1c:	dec00204 	addi	sp,sp,8
 2019a20:	f800283a 	ret

02019a24 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
 2019a24:	defffa04 	addi	sp,sp,-24
 2019a28:	dfc00515 	stw	ra,20(sp)
 2019a2c:	df000415 	stw	fp,16(sp)
 2019a30:	df000404 	addi	fp,sp,16
 2019a34:	e13ffc15 	stw	r4,-16(fp)
 2019a38:	e17ffd15 	stw	r5,-12(fp)
 2019a3c:	e1bffe15 	stw	r6,-8(fp)
 2019a40:	e1ffff15 	stw	r7,-4(fp)
  netif_set_ipaddr(netif, ipaddr);
 2019a44:	e17ffd17 	ldw	r5,-12(fp)
 2019a48:	e13ffc17 	ldw	r4,-16(fp)
 2019a4c:	2019c380 	call	2019c38 <netif_set_ipaddr>
  netif_set_netmask(netif, netmask);
 2019a50:	e17ffe17 	ldw	r5,-8(fp)
 2019a54:	e13ffc17 	ldw	r4,-16(fp)
 2019a58:	2019da80 	call	2019da8 <netif_set_netmask>
  netif_set_gw(netif, gw);
 2019a5c:	e17fff17 	ldw	r5,-4(fp)
 2019a60:	e13ffc17 	ldw	r4,-16(fp)
 2019a64:	2019d600 	call	2019d60 <netif_set_gw>
}
 2019a68:	0001883a 	nop
 2019a6c:	e037883a 	mov	sp,fp
 2019a70:	dfc00117 	ldw	ra,4(sp)
 2019a74:	df000017 	ldw	fp,0(sp)
 2019a78:	dec00204 	addi	sp,sp,8
 2019a7c:	f800283a 	ret

02019a80 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
 2019a80:	defffc04 	addi	sp,sp,-16
 2019a84:	dfc00315 	stw	ra,12(sp)
 2019a88:	df000215 	stw	fp,8(sp)
 2019a8c:	df000204 	addi	fp,sp,8
 2019a90:	e13fff15 	stw	r4,-4(fp)
  if (netif == NULL) {
 2019a94:	e0bfff17 	ldw	r2,-4(fp)
 2019a98:	10002726 	beq	r2,zero,2019b38 <netif_remove+0xb8>
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_stop(netif);
  }
#endif /* LWIP_IGMP */
  if (netif_is_up(netif)) {
 2019a9c:	e0bfff17 	ldw	r2,-4(fp)
 2019aa0:	10800e43 	ldbu	r2,57(r2)
 2019aa4:	10803fcc 	andi	r2,r2,255
 2019aa8:	1080004c 	andi	r2,r2,1
 2019aac:	10000226 	beq	r2,zero,2019ab8 <netif_remove+0x38>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
 2019ab0:	e13fff17 	ldw	r4,-4(fp)
 2019ab4:	2019ecc0 	call	2019ecc <netif_set_down>
  }

  snmp_delete_ipaddridx_tree(netif);

  /*  is it the first netif? */
  if (netif_list == netif) {
 2019ab8:	d0e7f317 	ldw	r3,-24628(gp)
 2019abc:	e0bfff17 	ldw	r2,-4(fp)
 2019ac0:	1880041e 	bne	r3,r2,2019ad4 <netif_remove+0x54>
    netif_list = netif->next;
 2019ac4:	e0bfff17 	ldw	r2,-4(fp)
 2019ac8:	10800017 	ldw	r2,0(r2)
 2019acc:	d0a7f315 	stw	r2,-24628(gp)
 2019ad0:	00001306 	br	2019b20 <netif_remove+0xa0>
  } else {
    /*  look for netif further down the list */
    struct netif * tmpNetif;
    for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
 2019ad4:	d0a7f317 	ldw	r2,-24628(gp)
 2019ad8:	e0bffe15 	stw	r2,-8(fp)
 2019adc:	00000c06 	br	2019b10 <netif_remove+0x90>
      if (tmpNetif->next == netif) {
 2019ae0:	e0bffe17 	ldw	r2,-8(fp)
 2019ae4:	10c00017 	ldw	r3,0(r2)
 2019ae8:	e0bfff17 	ldw	r2,-4(fp)
 2019aec:	1880051e 	bne	r3,r2,2019b04 <netif_remove+0x84>
        tmpNetif->next = netif->next;
 2019af0:	e0bfff17 	ldw	r2,-4(fp)
 2019af4:	10c00017 	ldw	r3,0(r2)
 2019af8:	e0bffe17 	ldw	r2,-8(fp)
 2019afc:	10c00015 	stw	r3,0(r2)
        break;
 2019b00:	00000506 	br	2019b18 <netif_remove+0x98>
  if (netif_list == netif) {
    netif_list = netif->next;
  } else {
    /*  look for netif further down the list */
    struct netif * tmpNetif;
    for (tmpNetif = netif_list; tmpNetif != NULL; tmpNetif = tmpNetif->next) {
 2019b04:	e0bffe17 	ldw	r2,-8(fp)
 2019b08:	10800017 	ldw	r2,0(r2)
 2019b0c:	e0bffe15 	stw	r2,-8(fp)
 2019b10:	e0bffe17 	ldw	r2,-8(fp)
 2019b14:	103ff21e 	bne	r2,zero,2019ae0 <__alt_mem_mem_0+0xfcff9ae0>
      if (tmpNetif->next == netif) {
        tmpNetif->next = netif->next;
        break;
      }
    }
    if (tmpNetif == NULL)
 2019b18:	e0bffe17 	ldw	r2,-8(fp)
 2019b1c:	10000826 	beq	r2,zero,2019b40 <netif_remove+0xc0>
      return; /*  we didn't find any netif today */
  }
  snmp_dec_iflist();
  /* this netif is default? */
  if (netif_default == netif) {
 2019b20:	d0e7f417 	ldw	r3,-24624(gp)
 2019b24:	e0bfff17 	ldw	r2,-4(fp)
 2019b28:	1880061e 	bne	r3,r2,2019b44 <netif_remove+0xc4>
    /* reset default netif */
    netif_set_default(NULL);
 2019b2c:	0009883a 	mov	r4,zero
 2019b30:	2019df00 	call	2019df0 <netif_set_default>
 2019b34:	00000306 	br	2019b44 <netif_remove+0xc4>
 */
void
netif_remove(struct netif *netif)
{
  if (netif == NULL) {
    return;
 2019b38:	0001883a 	nop
 2019b3c:	00000106 	br	2019b44 <netif_remove+0xc4>
        tmpNetif->next = netif->next;
        break;
      }
    }
    if (tmpNetif == NULL)
      return; /*  we didn't find any netif today */
 2019b40:	0001883a 	nop
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
 2019b44:	e037883a 	mov	sp,fp
 2019b48:	dfc00117 	ldw	ra,4(sp)
 2019b4c:	df000017 	ldw	fp,0(sp)
 2019b50:	dec00204 	addi	sp,sp,8
 2019b54:	f800283a 	ret

02019b58 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(char *name)
{
 2019b58:	defffc04 	addi	sp,sp,-16
 2019b5c:	df000315 	stw	fp,12(sp)
 2019b60:	df000304 	addi	fp,sp,12
 2019b64:	e13fff15 	stw	r4,-4(fp)
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
 2019b68:	e0bfff17 	ldw	r2,-4(fp)
 2019b6c:	1000021e 	bne	r2,zero,2019b78 <netif_find+0x20>
    return NULL;
 2019b70:	0005883a 	mov	r2,zero
 2019b74:	00002c06 	br	2019c28 <netif_find+0xd0>
  }

  num = name[2] - '0';
 2019b78:	e0bfff17 	ldw	r2,-4(fp)
 2019b7c:	10800084 	addi	r2,r2,2
 2019b80:	10800003 	ldbu	r2,0(r2)
 2019b84:	10bff404 	addi	r2,r2,-48
 2019b88:	e0bffe05 	stb	r2,-8(fp)

  for(netif = netif_list; netif != NULL; netif = netif->next) {
 2019b8c:	d0a7f317 	ldw	r2,-24628(gp)
 2019b90:	e0bffd15 	stw	r2,-12(fp)
 2019b94:	00002106 	br	2019c1c <netif_find+0xc4>
    if (num == netif->num &&
 2019b98:	e0bffd17 	ldw	r2,-12(fp)
 2019b9c:	10800f03 	ldbu	r2,60(r2)
 2019ba0:	10c03fcc 	andi	r3,r2,255
 2019ba4:	e0bffe03 	ldbu	r2,-8(fp)
 2019ba8:	1880191e 	bne	r3,r2,2019c10 <netif_find+0xb8>
       name[0] == netif->name[0] &&
 2019bac:	e0bfff17 	ldw	r2,-4(fp)
 2019bb0:	10c00003 	ldbu	r3,0(r2)
 2019bb4:	e0bffd17 	ldw	r2,-12(fp)
 2019bb8:	10800e83 	ldbu	r2,58(r2)
  }

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
    if (num == netif->num &&
 2019bbc:	18c03fcc 	andi	r3,r3,255
 2019bc0:	18c0201c 	xori	r3,r3,128
 2019bc4:	18ffe004 	addi	r3,r3,-128
 2019bc8:	10803fcc 	andi	r2,r2,255
 2019bcc:	1080201c 	xori	r2,r2,128
 2019bd0:	10bfe004 	addi	r2,r2,-128
 2019bd4:	18800e1e 	bne	r3,r2,2019c10 <netif_find+0xb8>
       name[0] == netif->name[0] &&
       name[1] == netif->name[1]) {
 2019bd8:	e0bfff17 	ldw	r2,-4(fp)
 2019bdc:	10800044 	addi	r2,r2,1
 2019be0:	10c00003 	ldbu	r3,0(r2)
 2019be4:	e0bffd17 	ldw	r2,-12(fp)
 2019be8:	10800ec3 	ldbu	r2,59(r2)

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
    if (num == netif->num &&
       name[0] == netif->name[0] &&
 2019bec:	18c03fcc 	andi	r3,r3,255
 2019bf0:	18c0201c 	xori	r3,r3,128
 2019bf4:	18ffe004 	addi	r3,r3,-128
 2019bf8:	10803fcc 	andi	r2,r2,255
 2019bfc:	1080201c 	xori	r2,r2,128
 2019c00:	10bfe004 	addi	r2,r2,-128
 2019c04:	1880021e 	bne	r3,r2,2019c10 <netif_find+0xb8>
       name[1] == netif->name[1]) {
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 2019c08:	e0bffd17 	ldw	r2,-12(fp)
 2019c0c:	00000606 	br	2019c28 <netif_find+0xd0>
    return NULL;
  }

  num = name[2] - '0';

  for(netif = netif_list; netif != NULL; netif = netif->next) {
 2019c10:	e0bffd17 	ldw	r2,-12(fp)
 2019c14:	10800017 	ldw	r2,0(r2)
 2019c18:	e0bffd15 	stw	r2,-12(fp)
 2019c1c:	e0bffd17 	ldw	r2,-12(fp)
 2019c20:	103fdd1e 	bne	r2,zero,2019b98 <__alt_mem_mem_0+0xfcff9b98>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 2019c24:	0005883a 	mov	r2,zero
}
 2019c28:	e037883a 	mov	sp,fp
 2019c2c:	df000017 	ldw	fp,0(sp)
 2019c30:	dec00104 	addi	sp,sp,4
 2019c34:	f800283a 	ret

02019c38 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
 2019c38:	defff904 	addi	sp,sp,-28
 2019c3c:	dfc00615 	stw	ra,24(sp)
 2019c40:	df000515 	stw	fp,20(sp)
 2019c44:	df000504 	addi	fp,sp,20
 2019c48:	e13ffe15 	stw	r4,-8(fp)
 2019c4c:	e17fff15 	stw	r5,-4(fp)
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
 2019c50:	e0bfff17 	ldw	r2,-4(fp)
 2019c54:	10003426 	beq	r2,zero,2019d28 <netif_set_ipaddr+0xf0>
 2019c58:	e0bfff17 	ldw	r2,-4(fp)
 2019c5c:	10c00017 	ldw	r3,0(r2)
 2019c60:	e0bffe17 	ldw	r2,-8(fp)
 2019c64:	10800117 	ldw	r2,4(r2)
 2019c68:	18802f26 	beq	r3,r2,2019d28 <netif_set_ipaddr+0xf0>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
 2019c6c:	d0a7f717 	ldw	r2,-24612(gp)
 2019c70:	e0bffb15 	stw	r2,-20(fp)
    while (pcb != NULL) {
 2019c74:	00001006 	br	2019cb8 <netif_set_ipaddr+0x80>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
 2019c78:	e0bffb17 	ldw	r2,-20(fp)
 2019c7c:	10c00017 	ldw	r3,0(r2)
 2019c80:	e0bffe17 	ldw	r2,-8(fp)
 2019c84:	10800117 	ldw	r2,4(r2)
 2019c88:	1880081e 	bne	r3,r2,2019cac <netif_set_ipaddr+0x74>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
 2019c8c:	e0bffb17 	ldw	r2,-20(fp)
 2019c90:	10800317 	ldw	r2,12(r2)
 2019c94:	e0bffd15 	stw	r2,-12(fp)
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
 2019c98:	e13ffb17 	ldw	r4,-20(fp)
 2019c9c:	201be6c0 	call	201be6c <tcp_abort>
        pcb = next;
 2019ca0:	e0bffd17 	ldw	r2,-12(fp)
 2019ca4:	e0bffb15 	stw	r2,-20(fp)
 2019ca8:	00000306 	br	2019cb8 <netif_set_ipaddr+0x80>
      } else {
        pcb = pcb->next;
 2019cac:	e0bffb17 	ldw	r2,-20(fp)
 2019cb0:	10800317 	ldw	r2,12(r2)
 2019cb4:	e0bffb15 	stw	r2,-20(fp)
  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
 2019cb8:	e0bffb17 	ldw	r2,-20(fp)
 2019cbc:	103fee1e 	bne	r2,zero,2019c78 <__alt_mem_mem_0+0xfcff9c78>
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 2019cc0:	d0a7f917 	ldw	r2,-24604(gp)
 2019cc4:	e0bffc15 	stw	r2,-16(fp)
 2019cc8:	00001506 	br	2019d20 <netif_set_ipaddr+0xe8>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 2019ccc:	e0bffc17 	ldw	r2,-16(fp)
 2019cd0:	10001026 	beq	r2,zero,2019d14 <netif_set_ipaddr+0xdc>
 2019cd4:	e0bffc17 	ldw	r2,-16(fp)
 2019cd8:	10800017 	ldw	r2,0(r2)
 2019cdc:	10000d26 	beq	r2,zero,2019d14 <netif_set_ipaddr+0xdc>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
 2019ce0:	e0bffc17 	ldw	r2,-16(fp)
 2019ce4:	10c00017 	ldw	r3,0(r2)
 2019ce8:	e0bffe17 	ldw	r2,-8(fp)
 2019cec:	10800117 	ldw	r2,4(r2)
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
 2019cf0:	1880081e 	bne	r3,r2,2019d14 <netif_set_ipaddr+0xdc>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
 2019cf4:	e0bfff17 	ldw	r2,-4(fp)
 2019cf8:	10000326 	beq	r2,zero,2019d08 <netif_set_ipaddr+0xd0>
 2019cfc:	e0bfff17 	ldw	r2,-4(fp)
 2019d00:	10800017 	ldw	r2,0(r2)
 2019d04:	00000106 	br	2019d0c <netif_set_ipaddr+0xd4>
 2019d08:	0005883a 	mov	r2,zero
 2019d0c:	e0fffc17 	ldw	r3,-16(fp)
 2019d10:	18800015 	stw	r2,0(r3)
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 2019d14:	e0bffc17 	ldw	r2,-16(fp)
 2019d18:	10800317 	ldw	r2,12(r2)
 2019d1c:	e0bffc15 	stw	r2,-16(fp)
 2019d20:	e0bffc17 	ldw	r2,-16(fp)
 2019d24:	103fe91e 	bne	r2,zero,2019ccc <__alt_mem_mem_0+0xfcff9ccc>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
 2019d28:	e0bfff17 	ldw	r2,-4(fp)
 2019d2c:	10000326 	beq	r2,zero,2019d3c <netif_set_ipaddr+0x104>
 2019d30:	e0bfff17 	ldw	r2,-4(fp)
 2019d34:	10800017 	ldw	r2,0(r2)
 2019d38:	00000106 	br	2019d40 <netif_set_ipaddr+0x108>
 2019d3c:	0005883a 	mov	r2,zero
 2019d40:	e0fffe17 	ldw	r3,-8(fp)
 2019d44:	18800115 	stw	r2,4(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
 2019d48:	0001883a 	nop
 2019d4c:	e037883a 	mov	sp,fp
 2019d50:	dfc00117 	ldw	ra,4(sp)
 2019d54:	df000017 	ldw	fp,0(sp)
 2019d58:	dec00204 	addi	sp,sp,8
 2019d5c:	f800283a 	ret

02019d60 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
 2019d60:	defffd04 	addi	sp,sp,-12
 2019d64:	df000215 	stw	fp,8(sp)
 2019d68:	df000204 	addi	fp,sp,8
 2019d6c:	e13ffe15 	stw	r4,-8(fp)
 2019d70:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&(netif->gw), gw);
 2019d74:	e0bfff17 	ldw	r2,-4(fp)
 2019d78:	10000326 	beq	r2,zero,2019d88 <netif_set_gw+0x28>
 2019d7c:	e0bfff17 	ldw	r2,-4(fp)
 2019d80:	10800017 	ldw	r2,0(r2)
 2019d84:	00000106 	br	2019d8c <netif_set_gw+0x2c>
 2019d88:	0005883a 	mov	r2,zero
 2019d8c:	e0fffe17 	ldw	r3,-8(fp)
 2019d90:	18800315 	stw	r2,12(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
 2019d94:	0001883a 	nop
 2019d98:	e037883a 	mov	sp,fp
 2019d9c:	df000017 	ldw	fp,0(sp)
 2019da0:	dec00104 	addi	sp,sp,4
 2019da4:	f800283a 	ret

02019da8 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
 2019da8:	defffd04 	addi	sp,sp,-12
 2019dac:	df000215 	stw	fp,8(sp)
 2019db0:	df000204 	addi	fp,sp,8
 2019db4:	e13ffe15 	stw	r4,-8(fp)
 2019db8:	e17fff15 	stw	r5,-4(fp)
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
 2019dbc:	e0bfff17 	ldw	r2,-4(fp)
 2019dc0:	10000326 	beq	r2,zero,2019dd0 <netif_set_netmask+0x28>
 2019dc4:	e0bfff17 	ldw	r2,-4(fp)
 2019dc8:	10800017 	ldw	r2,0(r2)
 2019dcc:	00000106 	br	2019dd4 <netif_set_netmask+0x2c>
 2019dd0:	0005883a 	mov	r2,zero
 2019dd4:	e0fffe17 	ldw	r3,-8(fp)
 2019dd8:	18800215 	stw	r2,8(r3)
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
 2019ddc:	0001883a 	nop
 2019de0:	e037883a 	mov	sp,fp
 2019de4:	df000017 	ldw	fp,0(sp)
 2019de8:	dec00104 	addi	sp,sp,4
 2019dec:	f800283a 	ret

02019df0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 2019df0:	defffe04 	addi	sp,sp,-8
 2019df4:	df000115 	stw	fp,4(sp)
 2019df8:	df000104 	addi	fp,sp,4
 2019dfc:	e13fff15 	stw	r4,-4(fp)
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
 2019e00:	e0bfff17 	ldw	r2,-4(fp)
 2019e04:	d0a7f415 	stw	r2,-24624(gp)
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 2019e08:	0001883a 	nop
 2019e0c:	e037883a 	mov	sp,fp
 2019e10:	df000017 	ldw	fp,0(sp)
 2019e14:	dec00104 	addi	sp,sp,4
 2019e18:	f800283a 	ret

02019e1c <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
 2019e1c:	defffd04 	addi	sp,sp,-12
 2019e20:	dfc00215 	stw	ra,8(sp)
 2019e24:	df000115 	stw	fp,4(sp)
 2019e28:	df000104 	addi	fp,sp,4
 2019e2c:	e13fff15 	stw	r4,-4(fp)
  if (!(netif->flags & NETIF_FLAG_UP)) {
 2019e30:	e0bfff17 	ldw	r2,-4(fp)
 2019e34:	10800e43 	ldbu	r2,57(r2)
 2019e38:	10803fcc 	andi	r2,r2,255
 2019e3c:	1080004c 	andi	r2,r2,1
 2019e40:	10001c1e 	bne	r2,zero,2019eb4 <netif_set_up+0x98>
    netif->flags |= NETIF_FLAG_UP;
 2019e44:	e0bfff17 	ldw	r2,-4(fp)
 2019e48:	10800e43 	ldbu	r2,57(r2)
 2019e4c:	10800054 	ori	r2,r2,1
 2019e50:	1007883a 	mov	r3,r2
 2019e54:	e0bfff17 	ldw	r2,-4(fp)
 2019e58:	10c00e45 	stb	r3,57(r2)
    
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);
 2019e5c:	e0bfff17 	ldw	r2,-4(fp)
 2019e60:	10800717 	ldw	r2,28(r2)
 2019e64:	10000426 	beq	r2,zero,2019e78 <netif_set_up+0x5c>
 2019e68:	e0bfff17 	ldw	r2,-4(fp)
 2019e6c:	10800717 	ldw	r2,28(r2)
 2019e70:	e13fff17 	ldw	r4,-4(fp)
 2019e74:	103ee83a 	callr	r2

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 2019e78:	e0bfff17 	ldw	r2,-4(fp)
 2019e7c:	10800e43 	ldbu	r2,57(r2)
 2019e80:	10803fcc 	andi	r2,r2,255
 2019e84:	1080040c 	andi	r2,r2,16
 2019e88:	10000a26 	beq	r2,zero,2019eb4 <netif_set_up+0x98>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
 2019e8c:	e0bfff17 	ldw	r2,-4(fp)
 2019e90:	10800e43 	ldbu	r2,57(r2)
 2019e94:	10803fcc 	andi	r2,r2,255
 2019e98:	1080080c 	andi	r2,r2,32
 2019e9c:	10000526 	beq	r2,zero,2019eb4 <netif_set_up+0x98>
        etharp_gratuitous(netif);
 2019ea0:	e0bfff17 	ldw	r2,-4(fp)
 2019ea4:	10800104 	addi	r2,r2,4
 2019ea8:	100b883a 	mov	r5,r2
 2019eac:	e13fff17 	ldw	r4,-4(fp)
 2019eb0:	20242000 	call	2024200 <etharp_request>
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
  }
}
 2019eb4:	0001883a 	nop
 2019eb8:	e037883a 	mov	sp,fp
 2019ebc:	dfc00117 	ldw	ra,4(sp)
 2019ec0:	df000017 	ldw	fp,0(sp)
 2019ec4:	dec00204 	addi	sp,sp,8
 2019ec8:	f800283a 	ret

02019ecc <netif_set_down>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
 2019ecc:	defffd04 	addi	sp,sp,-12
 2019ed0:	dfc00215 	stw	ra,8(sp)
 2019ed4:	df000115 	stw	fp,4(sp)
 2019ed8:	df000104 	addi	fp,sp,4
 2019edc:	e13fff15 	stw	r4,-4(fp)
  if (netif->flags & NETIF_FLAG_UP) {
 2019ee0:	e0bfff17 	ldw	r2,-4(fp)
 2019ee4:	10800e43 	ldbu	r2,57(r2)
 2019ee8:	10803fcc 	andi	r2,r2,255
 2019eec:	1080004c 	andi	r2,r2,1
 2019ef0:	10001526 	beq	r2,zero,2019f48 <netif_set_down+0x7c>
    netif->flags &= ~NETIF_FLAG_UP;
 2019ef4:	e0bfff17 	ldw	r2,-4(fp)
 2019ef8:	10c00e43 	ldbu	r3,57(r2)
 2019efc:	00bfff84 	movi	r2,-2
 2019f00:	1884703a 	and	r2,r3,r2
 2019f04:	1007883a 	mov	r3,r2
 2019f08:	e0bfff17 	ldw	r2,-4(fp)
 2019f0c:	10c00e45 	stb	r3,57(r2)
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 2019f10:	e0bfff17 	ldw	r2,-4(fp)
 2019f14:	10800e43 	ldbu	r2,57(r2)
 2019f18:	10803fcc 	andi	r2,r2,255
 2019f1c:	1080080c 	andi	r2,r2,32
 2019f20:	10000226 	beq	r2,zero,2019f2c <netif_set_down+0x60>
      etharp_cleanup_netif(netif);
 2019f24:	e13fff17 	ldw	r4,-4(fp)
 2019f28:	20232300 	call	2023230 <etharp_cleanup_netif>
    }
#endif /* LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
 2019f2c:	e0bfff17 	ldw	r2,-4(fp)
 2019f30:	10800717 	ldw	r2,28(r2)
 2019f34:	10000426 	beq	r2,zero,2019f48 <netif_set_down+0x7c>
 2019f38:	e0bfff17 	ldw	r2,-4(fp)
 2019f3c:	10800717 	ldw	r2,28(r2)
 2019f40:	e13fff17 	ldw	r4,-4(fp)
 2019f44:	103ee83a 	callr	r2
  }
}
 2019f48:	0001883a 	nop
 2019f4c:	e037883a 	mov	sp,fp
 2019f50:	dfc00117 	ldw	ra,4(sp)
 2019f54:	df000017 	ldw	fp,0(sp)
 2019f58:	dec00204 	addi	sp,sp,8
 2019f5c:	f800283a 	ret

02019f60 <netif_set_status_callback>:
#if LWIP_NETIF_STATUS_CALLBACK
/**
 * Set callback to be called when interface is brought up/down
 */
void netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
 2019f60:	defffd04 	addi	sp,sp,-12
 2019f64:	df000215 	stw	fp,8(sp)
 2019f68:	df000204 	addi	fp,sp,8
 2019f6c:	e13ffe15 	stw	r4,-8(fp)
 2019f70:	e17fff15 	stw	r5,-4(fp)
  if (netif) {
 2019f74:	e0bffe17 	ldw	r2,-8(fp)
 2019f78:	10000326 	beq	r2,zero,2019f88 <netif_set_status_callback+0x28>
    netif->status_callback = status_callback;
 2019f7c:	e0bffe17 	ldw	r2,-8(fp)
 2019f80:	e0ffff17 	ldw	r3,-4(fp)
 2019f84:	10c00715 	stw	r3,28(r2)
  }
}
 2019f88:	0001883a 	nop
 2019f8c:	e037883a 	mov	sp,fp
 2019f90:	df000017 	ldw	fp,0(sp)
 2019f94:	dec00104 	addi	sp,sp,4
 2019f98:	f800283a 	ret

02019f9c <netif_set_link_up>:

/**
 * Called by a driver when its link goes up
 */
void netif_set_link_up(struct netif *netif )
{
 2019f9c:	defffd04 	addi	sp,sp,-12
 2019fa0:	dfc00215 	stw	ra,8(sp)
 2019fa4:	df000115 	stw	fp,4(sp)
 2019fa8:	df000104 	addi	fp,sp,4
 2019fac:	e13fff15 	stw	r4,-4(fp)
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 2019fb0:	e0bfff17 	ldw	r2,-4(fp)
 2019fb4:	10800e43 	ldbu	r2,57(r2)
 2019fb8:	10803fcc 	andi	r2,r2,255
 2019fbc:	1080040c 	andi	r2,r2,16
 2019fc0:	1000211e 	bne	r2,zero,201a048 <netif_set_link_up+0xac>
    netif->flags |= NETIF_FLAG_LINK_UP;
 2019fc4:	e0bfff17 	ldw	r2,-4(fp)
 2019fc8:	10800e43 	ldbu	r2,57(r2)
 2019fcc:	10800414 	ori	r2,r2,16
 2019fd0:	1007883a 	mov	r3,r2
 2019fd4:	e0bfff17 	ldw	r2,-4(fp)
 2019fd8:	10c00e45 	stb	r3,57(r2)

#if LWIP_DHCP
    if (netif->dhcp) {
 2019fdc:	e0bfff17 	ldw	r2,-4(fp)
 2019fe0:	10800a17 	ldw	r2,40(r2)
 2019fe4:	10000226 	beq	r2,zero,2019ff0 <netif_set_link_up+0x54>
      dhcp_network_changed(netif);
 2019fe8:	e13fff17 	ldw	r4,-4(fp)
 2019fec:	20163680 	call	2016368 <dhcp_network_changed>
    if (netif->autoip) {
      autoip_network_changed(netif);
    }
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 2019ff0:	e0bfff17 	ldw	r2,-4(fp)
 2019ff4:	10800e43 	ldbu	r2,57(r2)
 2019ff8:	10803fcc 	andi	r2,r2,255
 2019ffc:	1080004c 	andi	r2,r2,1
 201a000:	10000a26 	beq	r2,zero,201a02c <netif_set_link_up+0x90>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & NETIF_FLAG_ETHARP) {
 201a004:	e0bfff17 	ldw	r2,-4(fp)
 201a008:	10800e43 	ldbu	r2,57(r2)
 201a00c:	10803fcc 	andi	r2,r2,255
 201a010:	1080080c 	andi	r2,r2,32
 201a014:	10000526 	beq	r2,zero,201a02c <netif_set_link_up+0x90>
        etharp_gratuitous(netif);
 201a018:	e0bfff17 	ldw	r2,-4(fp)
 201a01c:	10800104 	addi	r2,r2,4
 201a020:	100b883a 	mov	r5,r2
 201a024:	e13fff17 	ldw	r4,-4(fp)
 201a028:	20242000 	call	2024200 <etharp_request>
      if (netif->flags & NETIF_FLAG_IGMP) {
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
    NETIF_LINK_CALLBACK(netif);
 201a02c:	e0bfff17 	ldw	r2,-4(fp)
 201a030:	10800817 	ldw	r2,32(r2)
 201a034:	10000426 	beq	r2,zero,201a048 <netif_set_link_up+0xac>
 201a038:	e0bfff17 	ldw	r2,-4(fp)
 201a03c:	10800817 	ldw	r2,32(r2)
 201a040:	e13fff17 	ldw	r4,-4(fp)
 201a044:	103ee83a 	callr	r2
  }
}
 201a048:	0001883a 	nop
 201a04c:	e037883a 	mov	sp,fp
 201a050:	dfc00117 	ldw	ra,4(sp)
 201a054:	df000017 	ldw	fp,0(sp)
 201a058:	dec00204 	addi	sp,sp,8
 201a05c:	f800283a 	ret

0201a060 <netif_set_link_down>:

/**
 * Called by a driver when its link goes down
 */
void netif_set_link_down(struct netif *netif )
{
 201a060:	defffd04 	addi	sp,sp,-12
 201a064:	dfc00215 	stw	ra,8(sp)
 201a068:	df000115 	stw	fp,4(sp)
 201a06c:	df000104 	addi	fp,sp,4
 201a070:	e13fff15 	stw	r4,-4(fp)
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 201a074:	e0bfff17 	ldw	r2,-4(fp)
 201a078:	10800e43 	ldbu	r2,57(r2)
 201a07c:	10803fcc 	andi	r2,r2,255
 201a080:	1080040c 	andi	r2,r2,16
 201a084:	10000e26 	beq	r2,zero,201a0c0 <netif_set_link_down+0x60>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 201a088:	e0bfff17 	ldw	r2,-4(fp)
 201a08c:	10c00e43 	ldbu	r3,57(r2)
 201a090:	00bffbc4 	movi	r2,-17
 201a094:	1884703a 	and	r2,r3,r2
 201a098:	1007883a 	mov	r3,r2
 201a09c:	e0bfff17 	ldw	r2,-4(fp)
 201a0a0:	10c00e45 	stb	r3,57(r2)
    NETIF_LINK_CALLBACK(netif);
 201a0a4:	e0bfff17 	ldw	r2,-4(fp)
 201a0a8:	10800817 	ldw	r2,32(r2)
 201a0ac:	10000426 	beq	r2,zero,201a0c0 <netif_set_link_down+0x60>
 201a0b0:	e0bfff17 	ldw	r2,-4(fp)
 201a0b4:	10800817 	ldw	r2,32(r2)
 201a0b8:	e13fff17 	ldw	r4,-4(fp)
 201a0bc:	103ee83a 	callr	r2
  }
}
 201a0c0:	0001883a 	nop
 201a0c4:	e037883a 	mov	sp,fp
 201a0c8:	dfc00117 	ldw	ra,4(sp)
 201a0cc:	df000017 	ldw	fp,0(sp)
 201a0d0:	dec00204 	addi	sp,sp,8
 201a0d4:	f800283a 	ret

0201a0d8 <netif_set_link_callback>:
#if LWIP_NETIF_LINK_CALLBACK
/**
 * Set callback to be called when link is brought up/down
 */
void netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 201a0d8:	defffd04 	addi	sp,sp,-12
 201a0dc:	df000215 	stw	fp,8(sp)
 201a0e0:	df000204 	addi	fp,sp,8
 201a0e4:	e13ffe15 	stw	r4,-8(fp)
 201a0e8:	e17fff15 	stw	r5,-4(fp)
  if (netif) {
 201a0ec:	e0bffe17 	ldw	r2,-8(fp)
 201a0f0:	10000326 	beq	r2,zero,201a100 <netif_set_link_callback+0x28>
    netif->link_callback = link_callback;
 201a0f4:	e0bffe17 	ldw	r2,-8(fp)
 201a0f8:	e0ffff17 	ldw	r3,-4(fp)
 201a0fc:	10c00815 	stw	r3,32(r2)
  }
}
 201a100:	0001883a 	nop
 201a104:	e037883a 	mov	sp,fp
 201a108:	df000017 	ldw	fp,0(sp)
 201a10c:	dec00104 	addi	sp,sp,4
 201a110:	f800283a 	ret

0201a114 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 201a114:	defffd04 	addi	sp,sp,-12
 201a118:	dfc00215 	stw	ra,8(sp)
 201a11c:	df000115 	stw	fp,4(sp)
 201a120:	df000104 	addi	fp,sp,4
  struct tcp_pcb* pcb;
  SYS_ARCH_DECL_PROTECT(old_level);

  SYS_ARCH_PROTECT(old_level);
 201a124:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201a128:	10000126 	beq	r2,zero,201a130 <pbuf_free_ooseq+0x1c>
 201a12c:	2010de80 	call	2010de8 <vTaskEnterCritical>
  pbuf_free_ooseq_pending = 0;
 201a130:	d027f505 	stb	zero,-24620(gp)
  SYS_ARCH_UNPROTECT(old_level);
 201a134:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201a138:	10000126 	beq	r2,zero,201a140 <pbuf_free_ooseq+0x2c>
 201a13c:	2010e300 	call	2010e30 <vTaskExitCritical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 201a140:	d0a7f717 	ldw	r2,-24612(gp)
 201a144:	e0bfff15 	stw	r2,-4(fp)
 201a148:	00000d06 	br	201a180 <pbuf_free_ooseq+0x6c>
    if (NULL != pcb->ooseq) {
 201a14c:	e0bfff17 	ldw	r2,-4(fp)
 201a150:	10801e17 	ldw	r2,120(r2)
 201a154:	10000726 	beq	r2,zero,201a174 <pbuf_free_ooseq+0x60>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 201a158:	e0bfff17 	ldw	r2,-4(fp)
 201a15c:	10801e17 	ldw	r2,120(r2)
 201a160:	1009883a 	mov	r4,r2
 201a164:	201d2940 	call	201d294 <tcp_segs_free>
      pcb->ooseq = NULL;
 201a168:	e0bfff17 	ldw	r2,-4(fp)
 201a16c:	10001e15 	stw	zero,120(r2)
      return;
 201a170:	00000506 	br	201a188 <pbuf_free_ooseq+0x74>

  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 0;
  SYS_ARCH_UNPROTECT(old_level);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 201a174:	e0bfff17 	ldw	r2,-4(fp)
 201a178:	10800317 	ldw	r2,12(r2)
 201a17c:	e0bfff15 	stw	r2,-4(fp)
 201a180:	e0bfff17 	ldw	r2,-4(fp)
 201a184:	103ff11e 	bne	r2,zero,201a14c <__alt_mem_mem_0+0xfcffa14c>
      tcp_segs_free(pcb->ooseq);
      pcb->ooseq = NULL;
      return;
    }
  }
}
 201a188:	e037883a 	mov	sp,fp
 201a18c:	dfc00117 	ldw	ra,4(sp)
 201a190:	df000017 	ldw	fp,0(sp)
 201a194:	dec00204 	addi	sp,sp,8
 201a198:	f800283a 	ret

0201a19c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_timeout() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 201a19c:	defffd04 	addi	sp,sp,-12
 201a1a0:	dfc00215 	stw	ra,8(sp)
 201a1a4:	df000115 	stw	fp,4(sp)
 201a1a8:	df000104 	addi	fp,sp,4
 201a1ac:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 201a1b0:	201a1140 	call	201a114 <pbuf_free_ooseq>
}
 201a1b4:	0001883a 	nop
 201a1b8:	e037883a 	mov	sp,fp
 201a1bc:	dfc00117 	ldw	ra,4(sp)
 201a1c0:	df000017 	ldw	fp,0(sp)
 201a1c4:	dec00204 	addi	sp,sp,8
 201a1c8:	f800283a 	ret

0201a1cc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 201a1cc:	defffd04 	addi	sp,sp,-12
 201a1d0:	dfc00215 	stw	ra,8(sp)
 201a1d4:	df000115 	stw	fp,4(sp)
 201a1d8:	df000104 	addi	fp,sp,4
  pbuf_free_ooseq_pending = 1;
  SYS_ARCH_UNPROTECT(old_level);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 201a1dc:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201a1e0:	10000126 	beq	r2,zero,201a1e8 <pbuf_pool_is_empty+0x1c>
 201a1e4:	2010de80 	call	2010de8 <vTaskEnterCritical>
  queued = pbuf_free_ooseq_pending;
 201a1e8:	d0a7f503 	ldbu	r2,-24620(gp)
 201a1ec:	e0bfff05 	stb	r2,-4(fp)
  pbuf_free_ooseq_pending = 1;
 201a1f0:	00800044 	movi	r2,1
 201a1f4:	d0a7f505 	stb	r2,-24620(gp)
  SYS_ARCH_UNPROTECT(old_level);
 201a1f8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201a1fc:	10000126 	beq	r2,zero,201a204 <pbuf_pool_is_empty+0x38>
 201a200:	2010e300 	call	2010e30 <vTaskExitCritical>

  if(!queued) {
 201a204:	e0bfff03 	ldbu	r2,-4(fp)
 201a208:	1000101e 	bne	r2,zero,201a24c <pbuf_pool_is_empty+0x80>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 201a20c:	000d883a 	mov	r6,zero
 201a210:	000b883a 	mov	r5,zero
 201a214:	010080b4 	movhi	r4,514
 201a218:	21286704 	addi	r4,r4,-24164
 201a21c:	202b6a40 	call	202b6a4 <tcpip_callback_with_block>
 201a220:	10803fcc 	andi	r2,r2,255
 201a224:	1080201c 	xori	r2,r2,128
 201a228:	10bfe004 	addi	r2,r2,-128
 201a22c:	10000726 	beq	r2,zero,201a24c <pbuf_pool_is_empty+0x80>
 201a230:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201a234:	10000126 	beq	r2,zero,201a23c <pbuf_pool_is_empty+0x70>
 201a238:	2010de80 	call	2010de8 <vTaskEnterCritical>
 201a23c:	d027f505 	stb	zero,-24620(gp)
 201a240:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201a244:	10000126 	beq	r2,zero,201a24c <pbuf_pool_is_empty+0x80>
 201a248:	2010e300 	call	2010e30 <vTaskExitCritical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 201a24c:	0001883a 	nop
 201a250:	e037883a 	mov	sp,fp
 201a254:	dfc00117 	ldw	ra,4(sp)
 201a258:	df000017 	ldw	fp,0(sp)
 201a25c:	dec00204 	addi	sp,sp,8
 201a260:	f800283a 	ret

0201a264 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 201a264:	defff604 	addi	sp,sp,-40
 201a268:	dfc00915 	stw	ra,36(sp)
 201a26c:	df000815 	stw	fp,32(sp)
 201a270:	df000804 	addi	fp,sp,32
 201a274:	e13ffd15 	stw	r4,-12(fp)
 201a278:	2805883a 	mov	r2,r5
 201a27c:	e1bfff15 	stw	r6,-4(fp)
 201a280:	e0bffe0d 	sth	r2,-8(fp)
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 201a284:	e0bffd17 	ldw	r2,-12(fp)
 201a288:	10c00060 	cmpeqi	r3,r2,1
 201a28c:	1800091e 	bne	r3,zero,201a2b4 <pbuf_alloc+0x50>
 201a290:	0080052e 	bgeu	zero,r2,201a2a8 <pbuf_alloc+0x44>
 201a294:	10c000a0 	cmpeqi	r3,r2,2
 201a298:	1800091e 	bne	r3,zero,201a2c0 <pbuf_alloc+0x5c>
 201a29c:	108000e0 	cmpeqi	r2,r2,3
 201a2a0:	10000a1e 	bne	r2,zero,201a2cc <pbuf_alloc+0x68>
 201a2a4:	00000b06 	br	201a2d4 <pbuf_alloc+0x70>
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 201a2a8:	00800e04 	movi	r2,56
 201a2ac:	e0bffa0d 	sth	r2,-24(fp)
    break;
 201a2b0:	00000a06 	br	201a2dc <pbuf_alloc+0x78>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 201a2b4:	00800904 	movi	r2,36
 201a2b8:	e0bffa0d 	sth	r2,-24(fp)
    break;
 201a2bc:	00000706 	br	201a2dc <pbuf_alloc+0x78>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 201a2c0:	00800404 	movi	r2,16
 201a2c4:	e0bffa0d 	sth	r2,-24(fp)
    break;
 201a2c8:	00000406 	br	201a2dc <pbuf_alloc+0x78>
  case PBUF_RAW:
    offset = 0;
 201a2cc:	e03ffa0d 	sth	zero,-24(fp)
    break;
 201a2d0:	00000206 	br	201a2dc <pbuf_alloc+0x78>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
 201a2d4:	0005883a 	mov	r2,zero
 201a2d8:	0000b806 	br	201a5bc <pbuf_alloc+0x358>
  }

  switch (type) {
 201a2dc:	e0bfff17 	ldw	r2,-4(fp)
 201a2e0:	10c000e8 	cmpgeui	r3,r2,3
 201a2e4:	1800021e 	bne	r3,zero,201a2f0 <pbuf_alloc+0x8c>
 201a2e8:	00809536 	bltu	zero,r2,201a540 <pbuf_alloc+0x2dc>
 201a2ec:	00006806 	br	201a490 <pbuf_alloc+0x22c>
 201a2f0:	108000e0 	cmpeqi	r2,r2,3
 201a2f4:	1000a926 	beq	r2,zero,201a59c <pbuf_alloc+0x338>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 201a2f8:	01000384 	movi	r4,14
 201a2fc:	20342e00 	call	20342e0 <memp_malloc>
 201a300:	e0bff815 	stw	r2,-32(fp)
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 201a304:	e0bff817 	ldw	r2,-32(fp)
 201a308:	1000031e 	bne	r2,zero,201a318 <pbuf_alloc+0xb4>
      PBUF_POOL_IS_EMPTY();
 201a30c:	201a1cc0 	call	201a1cc <pbuf_pool_is_empty>
      return NULL;
 201a310:	0005883a 	mov	r2,zero
 201a314:	0000a906 	br	201a5bc <pbuf_alloc+0x358>
    }
    p->type = type;
 201a318:	e0bfff17 	ldw	r2,-4(fp)
 201a31c:	1007883a 	mov	r3,r2
 201a320:	e0bff817 	ldw	r2,-32(fp)
 201a324:	10c00305 	stb	r3,12(r2)
    p->next = NULL;
 201a328:	e0bff817 	ldw	r2,-32(fp)
 201a32c:	10000015 	stw	zero,0(r2)

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 201a330:	e0bffa0b 	ldhu	r2,-24(fp)
 201a334:	10800404 	addi	r2,r2,16
 201a338:	e0fff817 	ldw	r3,-32(fp)
 201a33c:	1885883a 	add	r2,r3,r2
 201a340:	10c000c4 	addi	r3,r2,3
 201a344:	00bfff04 	movi	r2,-4
 201a348:	1884703a 	and	r2,r3,r2
 201a34c:	1007883a 	mov	r3,r2
 201a350:	e0bff817 	ldw	r2,-32(fp)
 201a354:	10c00115 	stw	r3,4(r2)
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 201a358:	e0bff817 	ldw	r2,-32(fp)
 201a35c:	e0fffe0b 	ldhu	r3,-8(fp)
 201a360:	10c0020d 	sth	r3,8(r2)
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 201a364:	e0bffa0b 	ldhu	r2,-24(fp)
 201a368:	10c000c4 	addi	r3,r2,3
 201a36c:	00bfff04 	movi	r2,-4
 201a370:	1884703a 	and	r2,r3,r2
 201a374:	00c17b04 	movi	r3,1516
 201a378:	1885c83a 	sub	r2,r3,r2
 201a37c:	e0fffe0b 	ldhu	r3,-8(fp)
 201a380:	1880010e 	bge	r3,r2,201a388 <pbuf_alloc+0x124>
 201a384:	1805883a 	mov	r2,r3
 201a388:	1007883a 	mov	r3,r2
 201a38c:	e0bff817 	ldw	r2,-32(fp)
 201a390:	10c0028d 	sth	r3,10(r2)
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 201a394:	e0bff817 	ldw	r2,-32(fp)
 201a398:	00c00044 	movi	r3,1
 201a39c:	10c0038d 	sth	r3,14(r2)

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 201a3a0:	e0bff817 	ldw	r2,-32(fp)
 201a3a4:	e0bff915 	stw	r2,-28(fp)
    /* remaining length to be allocated */
    rem_len = length - p->len;
 201a3a8:	e0fffe0b 	ldhu	r3,-8(fp)
 201a3ac:	e0bff817 	ldw	r2,-32(fp)
 201a3b0:	1080028b 	ldhu	r2,10(r2)
 201a3b4:	10bfffcc 	andi	r2,r2,65535
 201a3b8:	1885c83a 	sub	r2,r3,r2
 201a3bc:	e0bffb15 	stw	r2,-20(fp)
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 201a3c0:	00003006 	br	201a484 <pbuf_alloc+0x220>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 201a3c4:	01000384 	movi	r4,14
 201a3c8:	20342e00 	call	20342e0 <memp_malloc>
 201a3cc:	e0bffc15 	stw	r2,-16(fp)
      if (q == NULL) {
 201a3d0:	e0bffc17 	ldw	r2,-16(fp)
 201a3d4:	1000051e 	bne	r2,zero,201a3ec <pbuf_alloc+0x188>
        PBUF_POOL_IS_EMPTY();
 201a3d8:	201a1cc0 	call	201a1cc <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 201a3dc:	e13ff817 	ldw	r4,-32(fp)
 201a3e0:	201aa200 	call	201aa20 <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
 201a3e4:	0005883a 	mov	r2,zero
 201a3e8:	00007406 	br	201a5bc <pbuf_alloc+0x358>
      }
      q->type = type;
 201a3ec:	e0bfff17 	ldw	r2,-4(fp)
 201a3f0:	1007883a 	mov	r3,r2
 201a3f4:	e0bffc17 	ldw	r2,-16(fp)
 201a3f8:	10c00305 	stb	r3,12(r2)
      q->flags = 0;
 201a3fc:	e0bffc17 	ldw	r2,-16(fp)
 201a400:	10000345 	stb	zero,13(r2)
      q->next = NULL;
 201a404:	e0bffc17 	ldw	r2,-16(fp)
 201a408:	10000015 	stw	zero,0(r2)
      /* make previous pbuf point to this pbuf */
      r->next = q;
 201a40c:	e0bff917 	ldw	r2,-28(fp)
 201a410:	e0fffc17 	ldw	r3,-16(fp)
 201a414:	10c00015 	stw	r3,0(r2)
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 201a418:	e0bffb17 	ldw	r2,-20(fp)
 201a41c:	1007883a 	mov	r3,r2
 201a420:	e0bffc17 	ldw	r2,-16(fp)
 201a424:	10c0020d 	sth	r3,8(r2)
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 201a428:	e0bffb17 	ldw	r2,-20(fp)
 201a42c:	10bfffcc 	andi	r2,r2,65535
 201a430:	10c17b50 	cmplti	r3,r2,1517
 201a434:	1800011e 	bne	r3,zero,201a43c <pbuf_alloc+0x1d8>
 201a438:	00817b04 	movi	r2,1516
 201a43c:	1007883a 	mov	r3,r2
 201a440:	e0bffc17 	ldw	r2,-16(fp)
 201a444:	10c0028d 	sth	r3,10(r2)
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 201a448:	e0bffc17 	ldw	r2,-16(fp)
 201a44c:	10c00404 	addi	r3,r2,16
 201a450:	e0bffc17 	ldw	r2,-16(fp)
 201a454:	10c00115 	stw	r3,4(r2)
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 201a458:	e0bffc17 	ldw	r2,-16(fp)
 201a45c:	00c00044 	movi	r3,1
 201a460:	10c0038d 	sth	r3,14(r2)
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 201a464:	e0bffc17 	ldw	r2,-16(fp)
 201a468:	1080028b 	ldhu	r2,10(r2)
 201a46c:	10bfffcc 	andi	r2,r2,65535
 201a470:	e0fffb17 	ldw	r3,-20(fp)
 201a474:	1885c83a 	sub	r2,r3,r2
 201a478:	e0bffb15 	stw	r2,-20(fp)
      /* remember this pbuf for linkage in next iteration */
      r = q;
 201a47c:	e0bffc17 	ldw	r2,-16(fp)
 201a480:	e0bff915 	stw	r2,-28(fp)
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 201a484:	e0bffb17 	ldw	r2,-20(fp)
 201a488:	00bfce16 	blt	zero,r2,201a3c4 <__alt_mem_mem_0+0xfcffa3c4>
      r = q;
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 201a48c:	00004506 	br	201a5a4 <pbuf_alloc+0x340>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 201a490:	e0bffa0b 	ldhu	r2,-24(fp)
 201a494:	108004c4 	addi	r2,r2,19
 201a498:	1007883a 	mov	r3,r2
 201a49c:	00bfff04 	movi	r2,-4
 201a4a0:	1884703a 	and	r2,r3,r2
 201a4a4:	1007883a 	mov	r3,r2
 201a4a8:	e0bffe0b 	ldhu	r2,-8(fp)
 201a4ac:	108000c4 	addi	r2,r2,3
 201a4b0:	1009883a 	mov	r4,r2
 201a4b4:	00bfff04 	movi	r2,-4
 201a4b8:	2084703a 	and	r2,r4,r2
 201a4bc:	1885883a 	add	r2,r3,r2
 201a4c0:	10bfffcc 	andi	r2,r2,65535
 201a4c4:	1009883a 	mov	r4,r2
 201a4c8:	201956c0 	call	201956c <mem_malloc>
 201a4cc:	e0bff815 	stw	r2,-32(fp)
    if (p == NULL) {
 201a4d0:	e0bff817 	ldw	r2,-32(fp)
 201a4d4:	1000021e 	bne	r2,zero,201a4e0 <pbuf_alloc+0x27c>
      return NULL;
 201a4d8:	0005883a 	mov	r2,zero
 201a4dc:	00003706 	br	201a5bc <pbuf_alloc+0x358>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 201a4e0:	e0bffa0b 	ldhu	r2,-24(fp)
 201a4e4:	10800404 	addi	r2,r2,16
 201a4e8:	e0fff817 	ldw	r3,-32(fp)
 201a4ec:	1885883a 	add	r2,r3,r2
 201a4f0:	10c000c4 	addi	r3,r2,3
 201a4f4:	00bfff04 	movi	r2,-4
 201a4f8:	1884703a 	and	r2,r3,r2
 201a4fc:	1007883a 	mov	r3,r2
 201a500:	e0bff817 	ldw	r2,-32(fp)
 201a504:	10c00115 	stw	r3,4(r2)
    p->len = p->tot_len = length;
 201a508:	e0bff817 	ldw	r2,-32(fp)
 201a50c:	e0fffe0b 	ldhu	r3,-8(fp)
 201a510:	10c0020d 	sth	r3,8(r2)
 201a514:	e0bff817 	ldw	r2,-32(fp)
 201a518:	10c0020b 	ldhu	r3,8(r2)
 201a51c:	e0bff817 	ldw	r2,-32(fp)
 201a520:	10c0028d 	sth	r3,10(r2)
    p->next = NULL;
 201a524:	e0bff817 	ldw	r2,-32(fp)
 201a528:	10000015 	stw	zero,0(r2)
    p->type = type;
 201a52c:	e0bfff17 	ldw	r2,-4(fp)
 201a530:	1007883a 	mov	r3,r2
 201a534:	e0bff817 	ldw	r2,-32(fp)
 201a538:	10c00305 	stb	r3,12(r2)

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 201a53c:	00001906 	br	201a5a4 <pbuf_alloc+0x340>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 201a540:	01000344 	movi	r4,13
 201a544:	20342e00 	call	20342e0 <memp_malloc>
 201a548:	e0bff815 	stw	r2,-32(fp)
    if (p == NULL) {
 201a54c:	e0bff817 	ldw	r2,-32(fp)
 201a550:	1000021e 	bne	r2,zero,201a55c <pbuf_alloc+0x2f8>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 201a554:	0005883a 	mov	r2,zero
 201a558:	00001806 	br	201a5bc <pbuf_alloc+0x358>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 201a55c:	e0bff817 	ldw	r2,-32(fp)
 201a560:	10000115 	stw	zero,4(r2)
    p->len = p->tot_len = length;
 201a564:	e0bff817 	ldw	r2,-32(fp)
 201a568:	e0fffe0b 	ldhu	r3,-8(fp)
 201a56c:	10c0020d 	sth	r3,8(r2)
 201a570:	e0bff817 	ldw	r2,-32(fp)
 201a574:	10c0020b 	ldhu	r3,8(r2)
 201a578:	e0bff817 	ldw	r2,-32(fp)
 201a57c:	10c0028d 	sth	r3,10(r2)
    p->next = NULL;
 201a580:	e0bff817 	ldw	r2,-32(fp)
 201a584:	10000015 	stw	zero,0(r2)
    p->type = type;
 201a588:	e0bfff17 	ldw	r2,-4(fp)
 201a58c:	1007883a 	mov	r3,r2
 201a590:	e0bff817 	ldw	r2,-32(fp)
 201a594:	10c00305 	stb	r3,12(r2)
    break;
 201a598:	00000206 	br	201a5a4 <pbuf_alloc+0x340>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 201a59c:	0005883a 	mov	r2,zero
 201a5a0:	00000606 	br	201a5bc <pbuf_alloc+0x358>
  }
  /* set reference count */
  p->ref = 1;
 201a5a4:	e0bff817 	ldw	r2,-32(fp)
 201a5a8:	00c00044 	movi	r3,1
 201a5ac:	10c0038d 	sth	r3,14(r2)
  /* set flags */
  p->flags = 0;
 201a5b0:	e0bff817 	ldw	r2,-32(fp)
 201a5b4:	10000345 	stb	zero,13(r2)
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 201a5b8:	e0bff817 	ldw	r2,-32(fp)
}
 201a5bc:	e037883a 	mov	sp,fp
 201a5c0:	dfc00117 	ldw	ra,4(sp)
 201a5c4:	df000017 	ldw	fp,0(sp)
 201a5c8:	dec00204 	addi	sp,sp,8
 201a5cc:	f800283a 	ret

0201a5d0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 201a5d0:	defff904 	addi	sp,sp,-28
 201a5d4:	df000615 	stw	fp,24(sp)
 201a5d8:	df000604 	addi	fp,sp,24
 201a5dc:	e13ffb15 	stw	r4,-20(fp)
 201a5e0:	2807883a 	mov	r3,r5
 201a5e4:	e1bffd15 	stw	r6,-12(fp)
 201a5e8:	e1fffe15 	stw	r7,-8(fp)
 201a5ec:	e0800217 	ldw	r2,8(fp)
 201a5f0:	e0fffc0d 	sth	r3,-16(fp)
 201a5f4:	e0bfff0d 	sth	r2,-4(fp)
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 201a5f8:	e0bffb17 	ldw	r2,-20(fp)
 201a5fc:	10c00060 	cmpeqi	r3,r2,1
 201a600:	1800091e 	bne	r3,zero,201a628 <pbuf_alloced_custom+0x58>
 201a604:	0080052e 	bgeu	zero,r2,201a61c <pbuf_alloced_custom+0x4c>
 201a608:	10c000a0 	cmpeqi	r3,r2,2
 201a60c:	1800091e 	bne	r3,zero,201a634 <pbuf_alloced_custom+0x64>
 201a610:	108000e0 	cmpeqi	r2,r2,3
 201a614:	10000a1e 	bne	r2,zero,201a640 <pbuf_alloced_custom+0x70>
 201a618:	00000b06 	br	201a648 <pbuf_alloced_custom+0x78>
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 201a61c:	00800e04 	movi	r2,56
 201a620:	e0bffa0d 	sth	r2,-24(fp)
    break;
 201a624:	00000a06 	br	201a650 <pbuf_alloced_custom+0x80>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 201a628:	00800904 	movi	r2,36
 201a62c:	e0bffa0d 	sth	r2,-24(fp)
    break;
 201a630:	00000706 	br	201a650 <pbuf_alloced_custom+0x80>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 201a634:	00800404 	movi	r2,16
 201a638:	e0bffa0d 	sth	r2,-24(fp)
    break;
 201a63c:	00000406 	br	201a650 <pbuf_alloced_custom+0x80>
  case PBUF_RAW:
    offset = 0;
 201a640:	e03ffa0d 	sth	zero,-24(fp)
    break;
 201a644:	00000206 	br	201a650 <pbuf_alloced_custom+0x80>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
    return NULL;
 201a648:	0005883a 	mov	r2,zero
 201a64c:	00002c06 	br	201a700 <pbuf_alloced_custom+0x130>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 201a650:	e0bffa0b 	ldhu	r2,-24(fp)
 201a654:	10c000c4 	addi	r3,r2,3
 201a658:	00bfff04 	movi	r2,-4
 201a65c:	1886703a 	and	r3,r3,r2
 201a660:	e0bffc0b 	ldhu	r2,-16(fp)
 201a664:	1885883a 	add	r2,r3,r2
 201a668:	e0ffff0b 	ldhu	r3,-4(fp)
 201a66c:	1880020e 	bge	r3,r2,201a678 <pbuf_alloced_custom+0xa8>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 201a670:	0005883a 	mov	r2,zero
 201a674:	00002206 	br	201a700 <pbuf_alloced_custom+0x130>
  }

  p->pbuf.next = NULL;
 201a678:	e0bffe17 	ldw	r2,-8(fp)
 201a67c:	10000015 	stw	zero,0(r2)
  if (payload_mem != NULL) {
 201a680:	e0800117 	ldw	r2,4(fp)
 201a684:	10000a26 	beq	r2,zero,201a6b0 <pbuf_alloced_custom+0xe0>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 201a688:	e0bffa0b 	ldhu	r2,-24(fp)
 201a68c:	108000c4 	addi	r2,r2,3
 201a690:	1007883a 	mov	r3,r2
 201a694:	00bfff04 	movi	r2,-4
 201a698:	1884703a 	and	r2,r3,r2
 201a69c:	e0c00117 	ldw	r3,4(fp)
 201a6a0:	1887883a 	add	r3,r3,r2
 201a6a4:	e0bffe17 	ldw	r2,-8(fp)
 201a6a8:	10c00115 	stw	r3,4(r2)
 201a6ac:	00000206 	br	201a6b8 <pbuf_alloced_custom+0xe8>
  } else {
    p->pbuf.payload = NULL;
 201a6b0:	e0bffe17 	ldw	r2,-8(fp)
 201a6b4:	10000115 	stw	zero,4(r2)
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 201a6b8:	e0bffe17 	ldw	r2,-8(fp)
 201a6bc:	00c00084 	movi	r3,2
 201a6c0:	10c00345 	stb	r3,13(r2)
  p->pbuf.len = p->pbuf.tot_len = length;
 201a6c4:	e0bffe17 	ldw	r2,-8(fp)
 201a6c8:	e0fffc0b 	ldhu	r3,-16(fp)
 201a6cc:	10c0020d 	sth	r3,8(r2)
 201a6d0:	e0bffe17 	ldw	r2,-8(fp)
 201a6d4:	10c0020b 	ldhu	r3,8(r2)
 201a6d8:	e0bffe17 	ldw	r2,-8(fp)
 201a6dc:	10c0028d 	sth	r3,10(r2)
  p->pbuf.type = type;
 201a6e0:	e0bffd17 	ldw	r2,-12(fp)
 201a6e4:	1007883a 	mov	r3,r2
 201a6e8:	e0bffe17 	ldw	r2,-8(fp)
 201a6ec:	10c00305 	stb	r3,12(r2)
  p->pbuf.ref = 1;
 201a6f0:	e0bffe17 	ldw	r2,-8(fp)
 201a6f4:	00c00044 	movi	r3,1
 201a6f8:	10c0038d 	sth	r3,14(r2)
  return &p->pbuf;
 201a6fc:	e0bffe17 	ldw	r2,-8(fp)
}
 201a700:	e037883a 	mov	sp,fp
 201a704:	df000017 	ldw	fp,0(sp)
 201a708:	dec00104 	addi	sp,sp,4
 201a70c:	f800283a 	ret

0201a710 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 201a710:	defff904 	addi	sp,sp,-28
 201a714:	dfc00615 	stw	ra,24(sp)
 201a718:	df000515 	stw	fp,20(sp)
 201a71c:	df000504 	addi	fp,sp,20
 201a720:	e13ffe15 	stw	r4,-8(fp)
 201a724:	2805883a 	mov	r2,r5
 201a728:	e0bfff0d 	sth	r2,-4(fp)
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 201a72c:	e0bffe17 	ldw	r2,-8(fp)
 201a730:	1080020b 	ldhu	r2,8(r2)
 201a734:	10bfffcc 	andi	r2,r2,65535
 201a738:	e0ffff0b 	ldhu	r3,-4(fp)
 201a73c:	1880462e 	bgeu	r3,r2,201a858 <pbuf_realloc+0x148>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 201a740:	e0ffff0b 	ldhu	r3,-4(fp)
 201a744:	e0bffe17 	ldw	r2,-8(fp)
 201a748:	1080020b 	ldhu	r2,8(r2)
 201a74c:	10bfffcc 	andi	r2,r2,65535
 201a750:	1885c83a 	sub	r2,r3,r2
 201a754:	e0bffd15 	stw	r2,-12(fp)

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 201a758:	e0bfff0b 	ldhu	r2,-4(fp)
 201a75c:	e0bffc0d 	sth	r2,-16(fp)
  q = p;
 201a760:	e0bffe17 	ldw	r2,-8(fp)
 201a764:	e0bffb15 	stw	r2,-20(fp)
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 201a768:	00000f06 	br	201a7a8 <pbuf_realloc+0x98>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 201a76c:	e0bffb17 	ldw	r2,-20(fp)
 201a770:	1080028b 	ldhu	r2,10(r2)
 201a774:	e0fffc0b 	ldhu	r3,-16(fp)
 201a778:	1885c83a 	sub	r2,r3,r2
 201a77c:	e0bffc0d 	sth	r2,-16(fp)
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 201a780:	e0bffb17 	ldw	r2,-20(fp)
 201a784:	1080020b 	ldhu	r2,8(r2)
 201a788:	e0fffd17 	ldw	r3,-12(fp)
 201a78c:	10c5883a 	add	r2,r2,r3
 201a790:	1007883a 	mov	r3,r2
 201a794:	e0bffb17 	ldw	r2,-20(fp)
 201a798:	10c0020d 	sth	r3,8(r2)
    /* proceed to next pbuf in chain */
    q = q->next;
 201a79c:	e0bffb17 	ldw	r2,-20(fp)
 201a7a0:	10800017 	ldw	r2,0(r2)
 201a7a4:	e0bffb15 	stw	r2,-20(fp)

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 201a7a8:	e0bffb17 	ldw	r2,-20(fp)
 201a7ac:	1080028b 	ldhu	r2,10(r2)
 201a7b0:	10ffffcc 	andi	r3,r2,65535
 201a7b4:	e0bffc0b 	ldhu	r2,-16(fp)
 201a7b8:	18bfec36 	bltu	r3,r2,201a76c <__alt_mem_mem_0+0xfcffa76c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
 201a7bc:	e0bffb17 	ldw	r2,-20(fp)
 201a7c0:	10800303 	ldbu	r2,12(r2)
 201a7c4:	10803fcc 	andi	r2,r2,255
 201a7c8:	1000121e 	bne	r2,zero,201a814 <pbuf_realloc+0x104>
 201a7cc:	e0bffb17 	ldw	r2,-20(fp)
 201a7d0:	1080028b 	ldhu	r2,10(r2)
 201a7d4:	10ffffcc 	andi	r3,r2,65535
 201a7d8:	e0bffc0b 	ldhu	r2,-16(fp)
 201a7dc:	18800d26 	beq	r3,r2,201a814 <pbuf_realloc+0x104>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 201a7e0:	e0bffb17 	ldw	r2,-20(fp)
 201a7e4:	10800117 	ldw	r2,4(r2)
 201a7e8:	1007883a 	mov	r3,r2
 201a7ec:	e0bffb17 	ldw	r2,-20(fp)
 201a7f0:	1885c83a 	sub	r2,r3,r2
 201a7f4:	1007883a 	mov	r3,r2
 201a7f8:	e0bffc0b 	ldhu	r2,-16(fp)
 201a7fc:	1885883a 	add	r2,r3,r2
 201a800:	10bfffcc 	andi	r2,r2,65535
 201a804:	100b883a 	mov	r5,r2
 201a808:	e13ffb17 	ldw	r4,-20(fp)
 201a80c:	20192640 	call	2019264 <mem_trim>
 201a810:	e0bffb15 	stw	r2,-20(fp)
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 201a814:	e0bffb17 	ldw	r2,-20(fp)
 201a818:	e0fffc0b 	ldhu	r3,-16(fp)
 201a81c:	10c0028d 	sth	r3,10(r2)
  q->tot_len = q->len;
 201a820:	e0bffb17 	ldw	r2,-20(fp)
 201a824:	10c0028b 	ldhu	r3,10(r2)
 201a828:	e0bffb17 	ldw	r2,-20(fp)
 201a82c:	10c0020d 	sth	r3,8(r2)

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 201a830:	e0bffb17 	ldw	r2,-20(fp)
 201a834:	10800017 	ldw	r2,0(r2)
 201a838:	10000426 	beq	r2,zero,201a84c <pbuf_realloc+0x13c>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 201a83c:	e0bffb17 	ldw	r2,-20(fp)
 201a840:	10800017 	ldw	r2,0(r2)
 201a844:	1009883a 	mov	r4,r2
 201a848:	201aa200 	call	201aa20 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 201a84c:	e0bffb17 	ldw	r2,-20(fp)
 201a850:	10000015 	stw	zero,0(r2)
 201a854:	00000106 	br	201a85c <pbuf_realloc+0x14c>
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
    /* enlarging not yet supported */
    return;
 201a858:	0001883a 	nop
    pbuf_free(q->next);
  }
  /* q is last packet in chain */
  q->next = NULL;

}
 201a85c:	e037883a 	mov	sp,fp
 201a860:	dfc00117 	ldw	ra,4(sp)
 201a864:	df000017 	ldw	fp,0(sp)
 201a868:	dec00204 	addi	sp,sp,8
 201a86c:	f800283a 	ret

0201a870 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 201a870:	defffa04 	addi	sp,sp,-24
 201a874:	dfc00515 	stw	ra,20(sp)
 201a878:	df000415 	stw	fp,16(sp)
 201a87c:	df000404 	addi	fp,sp,16
 201a880:	e13ffe15 	stw	r4,-8(fp)
 201a884:	2805883a 	mov	r2,r5
 201a888:	e0bfff0d 	sth	r2,-4(fp)
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 201a88c:	e0bfff0f 	ldh	r2,-4(fp)
 201a890:	10000226 	beq	r2,zero,201a89c <pbuf_header+0x2c>
 201a894:	e0bffe17 	ldw	r2,-8(fp)
 201a898:	1000021e 	bne	r2,zero,201a8a4 <pbuf_header+0x34>
    return 0;
 201a89c:	0005883a 	mov	r2,zero
 201a8a0:	00005a06 	br	201aa0c <pbuf_header+0x19c>
  }
 
  if (header_size_increment < 0){
 201a8a4:	e0bfff0f 	ldh	r2,-4(fp)
 201a8a8:	1000110e 	bge	r2,zero,201a8f0 <pbuf_header+0x80>
    increment_magnitude = -header_size_increment;
 201a8ac:	e0bfff0b 	ldhu	r2,-4(fp)
 201a8b0:	0085c83a 	sub	r2,zero,r2
 201a8b4:	e0bffc0d 	sth	r2,-16(fp)
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 201a8b8:	e0bffe17 	ldw	r2,-8(fp)
 201a8bc:	1080028b 	ldhu	r2,10(r2)
 201a8c0:	10ffffcc 	andi	r3,r2,65535
 201a8c4:	e0bffc0b 	ldhu	r2,-16(fp)
 201a8c8:	18800b2e 	bgeu	r3,r2,201a8f8 <pbuf_header+0x88>
 201a8cc:	01c08134 	movhi	r7,516
 201a8d0:	39c4e104 	addi	r7,r7,4996
 201a8d4:	01808344 	movi	r6,525
 201a8d8:	01408134 	movhi	r5,516
 201a8dc:	2944e704 	addi	r5,r5,5020
 201a8e0:	01008134 	movhi	r4,516
 201a8e4:	2104ef04 	addi	r4,r4,5052
 201a8e8:	20009e40 	call	20009e4 <printf>
 201a8ec:	003fff06 	br	201a8ec <__alt_mem_mem_0+0xfcffa8ec>
  } else {
    increment_magnitude = header_size_increment;
 201a8f0:	e0bfff0b 	ldhu	r2,-4(fp)
 201a8f4:	e0bffc0d 	sth	r2,-16(fp)
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 201a8f8:	e0bffe17 	ldw	r2,-8(fp)
 201a8fc:	10800303 	ldbu	r2,12(r2)
 201a900:	10803fcc 	andi	r2,r2,255
 201a904:	e0bffc8d 	sth	r2,-14(fp)
  /* remember current payload pointer */
  payload = p->payload;
 201a908:	e0bffe17 	ldw	r2,-8(fp)
 201a90c:	10800117 	ldw	r2,4(r2)
 201a910:	e0bffd15 	stw	r2,-12(fp)

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 201a914:	e0bffc8b 	ldhu	r2,-14(fp)
 201a918:	10000326 	beq	r2,zero,201a928 <pbuf_header+0xb8>
 201a91c:	e0bffc8b 	ldhu	r2,-14(fp)
 201a920:	108000d8 	cmpnei	r2,r2,3
 201a924:	1000111e 	bne	r2,zero,201a96c <pbuf_header+0xfc>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 201a928:	e0bffe17 	ldw	r2,-8(fp)
 201a92c:	10c00117 	ldw	r3,4(r2)
 201a930:	e0bfff0f 	ldh	r2,-4(fp)
 201a934:	0085c83a 	sub	r2,zero,r2
 201a938:	1887883a 	add	r3,r3,r2
 201a93c:	e0bffe17 	ldw	r2,-8(fp)
 201a940:	10c00115 	stw	r3,4(r2)
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 201a944:	e0bffe17 	ldw	r2,-8(fp)
 201a948:	10c00117 	ldw	r3,4(r2)
 201a94c:	e0bffe17 	ldw	r2,-8(fp)
 201a950:	10800404 	addi	r2,r2,16
 201a954:	18801e2e 	bgeu	r3,r2,201a9d0 <pbuf_header+0x160>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
 201a958:	e0bffe17 	ldw	r2,-8(fp)
 201a95c:	e0fffd17 	ldw	r3,-12(fp)
 201a960:	10c00115 	stw	r3,4(r2)
      /* bail out unsuccesfully */
      return 1;
 201a964:	00800044 	movi	r2,1
 201a968:	00002806 	br	201aa0c <pbuf_header+0x19c>
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 201a96c:	e0bffc8b 	ldhu	r2,-14(fp)
 201a970:	108000a0 	cmpeqi	r2,r2,2
 201a974:	1000031e 	bne	r2,zero,201a984 <pbuf_header+0x114>
 201a978:	e0bffc8b 	ldhu	r2,-14(fp)
 201a97c:	10800058 	cmpnei	r2,r2,1
 201a980:	1000111e 	bne	r2,zero,201a9c8 <pbuf_header+0x158>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 201a984:	e0bfff0f 	ldh	r2,-4(fp)
 201a988:	10000d0e 	bge	r2,zero,201a9c0 <pbuf_header+0x150>
 201a98c:	e0bffe17 	ldw	r2,-8(fp)
 201a990:	1080028b 	ldhu	r2,10(r2)
 201a994:	10ffffcc 	andi	r3,r2,65535
 201a998:	e0bffc0b 	ldhu	r2,-16(fp)
 201a99c:	18800836 	bltu	r3,r2,201a9c0 <pbuf_header+0x150>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 201a9a0:	e0bffe17 	ldw	r2,-8(fp)
 201a9a4:	10c00117 	ldw	r3,4(r2)
 201a9a8:	e0bfff0f 	ldh	r2,-4(fp)
 201a9ac:	0085c83a 	sub	r2,zero,r2
 201a9b0:	1887883a 	add	r3,r3,r2
 201a9b4:	e0bffe17 	ldw	r2,-8(fp)
 201a9b8:	10c00115 	stw	r3,4(r2)
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 201a9bc:	00000406 	br	201a9d0 <pbuf_header+0x160>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
 201a9c0:	00800044 	movi	r2,1
 201a9c4:	00001106 	br	201aa0c <pbuf_header+0x19c>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
 201a9c8:	00800044 	movi	r2,1
 201a9cc:	00000f06 	br	201aa0c <pbuf_header+0x19c>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 201a9d0:	e0bffe17 	ldw	r2,-8(fp)
 201a9d4:	10c0028b 	ldhu	r3,10(r2)
 201a9d8:	e0bfff0b 	ldhu	r2,-4(fp)
 201a9dc:	1885883a 	add	r2,r3,r2
 201a9e0:	1007883a 	mov	r3,r2
 201a9e4:	e0bffe17 	ldw	r2,-8(fp)
 201a9e8:	10c0028d 	sth	r3,10(r2)
  p->tot_len += header_size_increment;
 201a9ec:	e0bffe17 	ldw	r2,-8(fp)
 201a9f0:	10c0020b 	ldhu	r3,8(r2)
 201a9f4:	e0bfff0b 	ldhu	r2,-4(fp)
 201a9f8:	1885883a 	add	r2,r3,r2
 201a9fc:	1007883a 	mov	r3,r2
 201aa00:	e0bffe17 	ldw	r2,-8(fp)
 201aa04:	10c0020d 	sth	r3,8(r2)

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 201aa08:	0005883a 	mov	r2,zero
}
 201aa0c:	e037883a 	mov	sp,fp
 201aa10:	dfc00117 	ldw	ra,4(sp)
 201aa14:	df000017 	ldw	fp,0(sp)
 201aa18:	dec00204 	addi	sp,sp,8
 201aa1c:	f800283a 	ret

0201aa20 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 201aa20:	defff904 	addi	sp,sp,-28
 201aa24:	dfc00615 	stw	ra,24(sp)
 201aa28:	df000515 	stw	fp,20(sp)
 201aa2c:	df000504 	addi	fp,sp,20
 201aa30:	e13fff15 	stw	r4,-4(fp)
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 201aa34:	e0bfff17 	ldw	r2,-4(fp)
 201aa38:	1000021e 	bne	r2,zero,201aa44 <pbuf_free+0x24>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 201aa3c:	0005883a 	mov	r2,zero
 201aa40:	00004306 	br	201ab50 <pbuf_free+0x130>

  LWIP_ASSERT("pbuf_free: sane type",
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 201aa44:	e03ffb05 	stb	zero,-20(fp)
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 201aa48:	00003e06 	br	201ab44 <pbuf_free+0x124>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 201aa4c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201aa50:	10000126 	beq	r2,zero,201aa58 <pbuf_free+0x38>
 201aa54:	2010de80 	call	2010de8 <vTaskEnterCritical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 201aa58:	e0bfff17 	ldw	r2,-4(fp)
 201aa5c:	1080038b 	ldhu	r2,14(r2)
 201aa60:	10bfffc4 	addi	r2,r2,-1
 201aa64:	1007883a 	mov	r3,r2
 201aa68:	e0bfff17 	ldw	r2,-4(fp)
 201aa6c:	10c0038d 	sth	r3,14(r2)
 201aa70:	e0bfff17 	ldw	r2,-4(fp)
 201aa74:	1080038b 	ldhu	r2,14(r2)
 201aa78:	e0bffb8d 	sth	r2,-18(fp)
    SYS_ARCH_UNPROTECT(old_level);
 201aa7c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201aa80:	10000126 	beq	r2,zero,201aa88 <pbuf_free+0x68>
 201aa84:	2010e300 	call	2010e30 <vTaskExitCritical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 201aa88:	e0bffb8b 	ldhu	r2,-18(fp)
 201aa8c:	10002c1e 	bne	r2,zero,201ab40 <pbuf_free+0x120>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 201aa90:	e0bfff17 	ldw	r2,-4(fp)
 201aa94:	10800017 	ldw	r2,0(r2)
 201aa98:	e0bffc15 	stw	r2,-16(fp)
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 201aa9c:	e0bfff17 	ldw	r2,-4(fp)
 201aaa0:	10800303 	ldbu	r2,12(r2)
 201aaa4:	10803fcc 	andi	r2,r2,255
 201aaa8:	e0bffd0d 	sth	r2,-12(fp)
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 201aaac:	e0bfff17 	ldw	r2,-4(fp)
 201aab0:	10800343 	ldbu	r2,13(r2)
 201aab4:	10803fcc 	andi	r2,r2,255
 201aab8:	1080008c 	andi	r2,r2,2
 201aabc:	10000726 	beq	r2,zero,201aadc <pbuf_free+0xbc>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 201aac0:	e0bfff17 	ldw	r2,-4(fp)
 201aac4:	e0bffe15 	stw	r2,-8(fp)
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
        pc->custom_free_function(p);
 201aac8:	e0bffe17 	ldw	r2,-8(fp)
 201aacc:	10800417 	ldw	r2,16(r2)
 201aad0:	e13fff17 	ldw	r4,-4(fp)
 201aad4:	103ee83a 	callr	r2
 201aad8:	00001306 	br	201ab28 <pbuf_free+0x108>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 201aadc:	e0bffd0b 	ldhu	r2,-12(fp)
 201aae0:	108000d8 	cmpnei	r2,r2,3
 201aae4:	1000041e 	bne	r2,zero,201aaf8 <pbuf_free+0xd8>
          memp_free(MEMP_PBUF_POOL, p);
 201aae8:	e17fff17 	ldw	r5,-4(fp)
 201aaec:	01000384 	movi	r4,14
 201aaf0:	20344ac0 	call	20344ac <memp_free>
 201aaf4:	00000c06 	br	201ab28 <pbuf_free+0x108>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 201aaf8:	e0bffd0b 	ldhu	r2,-12(fp)
 201aafc:	10800060 	cmpeqi	r2,r2,1
 201ab00:	1000031e 	bne	r2,zero,201ab10 <pbuf_free+0xf0>
 201ab04:	e0bffd0b 	ldhu	r2,-12(fp)
 201ab08:	10800098 	cmpnei	r2,r2,2
 201ab0c:	1000041e 	bne	r2,zero,201ab20 <pbuf_free+0x100>
          memp_free(MEMP_PBUF, p);
 201ab10:	e17fff17 	ldw	r5,-4(fp)
 201ab14:	01000344 	movi	r4,13
 201ab18:	20344ac0 	call	20344ac <memp_free>
 201ab1c:	00000206 	br	201ab28 <pbuf_free+0x108>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 201ab20:	e13fff17 	ldw	r4,-4(fp)
 201ab24:	20191580 	call	2019158 <mem_free>
        }
      }
      count++;
 201ab28:	e0bffb03 	ldbu	r2,-20(fp)
 201ab2c:	10800044 	addi	r2,r2,1
 201ab30:	e0bffb05 	stb	r2,-20(fp)
      /* proceed to next pbuf */
      p = q;
 201ab34:	e0bffc17 	ldw	r2,-16(fp)
 201ab38:	e0bfff15 	stw	r2,-4(fp)
 201ab3c:	00000106 	br	201ab44 <pbuf_free+0x124>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 201ab40:	e03fff15 	stw	zero,-4(fp)
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 201ab44:	e0bfff17 	ldw	r2,-4(fp)
 201ab48:	103fc01e 	bne	r2,zero,201aa4c <__alt_mem_mem_0+0xfcffaa4c>
      p = NULL;
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 201ab4c:	e0bffb03 	ldbu	r2,-20(fp)
}
 201ab50:	e037883a 	mov	sp,fp
 201ab54:	dfc00117 	ldw	ra,4(sp)
 201ab58:	df000017 	ldw	fp,0(sp)
 201ab5c:	dec00204 	addi	sp,sp,8
 201ab60:	f800283a 	ret

0201ab64 <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
 201ab64:	defffd04 	addi	sp,sp,-12
 201ab68:	df000215 	stw	fp,8(sp)
 201ab6c:	df000204 	addi	fp,sp,8
 201ab70:	e13fff15 	stw	r4,-4(fp)
  u8_t len;

  len = 0;
 201ab74:	e03ffe05 	stb	zero,-8(fp)
  while (p != NULL) {
 201ab78:	00000606 	br	201ab94 <pbuf_clen+0x30>
    ++len;
 201ab7c:	e0bffe03 	ldbu	r2,-8(fp)
 201ab80:	10800044 	addi	r2,r2,1
 201ab84:	e0bffe05 	stb	r2,-8(fp)
    p = p->next;
 201ab88:	e0bfff17 	ldw	r2,-4(fp)
 201ab8c:	10800017 	ldw	r2,0(r2)
 201ab90:	e0bfff15 	stw	r2,-4(fp)
pbuf_clen(struct pbuf *p)
{
  u8_t len;

  len = 0;
  while (p != NULL) {
 201ab94:	e0bfff17 	ldw	r2,-4(fp)
 201ab98:	103ff81e 	bne	r2,zero,201ab7c <__alt_mem_mem_0+0xfcffab7c>
    ++len;
    p = p->next;
  }
  return len;
 201ab9c:	e0bffe03 	ldbu	r2,-8(fp)
}
 201aba0:	e037883a 	mov	sp,fp
 201aba4:	df000017 	ldw	fp,0(sp)
 201aba8:	dec00104 	addi	sp,sp,4
 201abac:	f800283a 	ret

0201abb0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 201abb0:	defffd04 	addi	sp,sp,-12
 201abb4:	dfc00215 	stw	ra,8(sp)
 201abb8:	df000115 	stw	fp,4(sp)
 201abbc:	df000104 	addi	fp,sp,4
 201abc0:	e13fff15 	stw	r4,-4(fp)
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 201abc4:	e0bfff17 	ldw	r2,-4(fp)
 201abc8:	10000c26 	beq	r2,zero,201abfc <pbuf_ref+0x4c>
    SYS_ARCH_PROTECT(old_level);
 201abcc:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201abd0:	10000126 	beq	r2,zero,201abd8 <pbuf_ref+0x28>
 201abd4:	2010de80 	call	2010de8 <vTaskEnterCritical>
    ++(p->ref);
 201abd8:	e0bfff17 	ldw	r2,-4(fp)
 201abdc:	1080038b 	ldhu	r2,14(r2)
 201abe0:	10800044 	addi	r2,r2,1
 201abe4:	1007883a 	mov	r3,r2
 201abe8:	e0bfff17 	ldw	r2,-4(fp)
 201abec:	10c0038d 	sth	r3,14(r2)
    SYS_ARCH_UNPROTECT(old_level);
 201abf0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 201abf4:	10000126 	beq	r2,zero,201abfc <pbuf_ref+0x4c>
 201abf8:	2010e300 	call	2010e30 <vTaskExitCritical>
  }
}
 201abfc:	0001883a 	nop
 201ac00:	e037883a 	mov	sp,fp
 201ac04:	dfc00117 	ldw	ra,4(sp)
 201ac08:	df000017 	ldw	fp,0(sp)
 201ac0c:	dec00204 	addi	sp,sp,8
 201ac10:	f800283a 	ret

0201ac14 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 201ac14:	defffb04 	addi	sp,sp,-20
 201ac18:	dfc00415 	stw	ra,16(sp)
 201ac1c:	df000315 	stw	fp,12(sp)
 201ac20:	df000304 	addi	fp,sp,12
 201ac24:	e13ffe15 	stw	r4,-8(fp)
 201ac28:	e17fff15 	stw	r5,-4(fp)
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 201ac2c:	e0bffe17 	ldw	r2,-8(fp)
 201ac30:	10000226 	beq	r2,zero,201ac3c <pbuf_cat+0x28>
 201ac34:	e0bfff17 	ldw	r2,-4(fp)
 201ac38:	1000091e 	bne	r2,zero,201ac60 <pbuf_cat+0x4c>
 201ac3c:	01c08134 	movhi	r7,516
 201ac40:	39c4e104 	addi	r7,r7,4996
 201ac44:	0180bb84 	movi	r6,750
 201ac48:	01408134 	movhi	r5,516
 201ac4c:	2944fb04 	addi	r5,r5,5100
 201ac50:	01008134 	movhi	r4,516
 201ac54:	2104ef04 	addi	r4,r4,5052
 201ac58:	20009e40 	call	20009e4 <printf>
 201ac5c:	003fff06 	br	201ac5c <__alt_mem_mem_0+0xfcffac5c>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 201ac60:	e0bffe17 	ldw	r2,-8(fp)
 201ac64:	e0bffd15 	stw	r2,-12(fp)
 201ac68:	00000b06 	br	201ac98 <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 201ac6c:	e0bffd17 	ldw	r2,-12(fp)
 201ac70:	10c0020b 	ldhu	r3,8(r2)
 201ac74:	e0bfff17 	ldw	r2,-4(fp)
 201ac78:	1080020b 	ldhu	r2,8(r2)
 201ac7c:	1885883a 	add	r2,r3,r2
 201ac80:	1007883a 	mov	r3,r2
 201ac84:	e0bffd17 	ldw	r2,-12(fp)
 201ac88:	10c0020d 	sth	r3,8(r2)

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 201ac8c:	e0bffd17 	ldw	r2,-12(fp)
 201ac90:	10800017 	ldw	r2,0(r2)
 201ac94:	e0bffd15 	stw	r2,-12(fp)
 201ac98:	e0bffd17 	ldw	r2,-12(fp)
 201ac9c:	10800017 	ldw	r2,0(r2)
 201aca0:	103ff21e 	bne	r2,zero,201ac6c <__alt_mem_mem_0+0xfcffac6c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 201aca4:	e0bffd17 	ldw	r2,-12(fp)
 201aca8:	10c0020b 	ldhu	r3,8(r2)
 201acac:	e0bfff17 	ldw	r2,-4(fp)
 201acb0:	1080020b 	ldhu	r2,8(r2)
 201acb4:	1885883a 	add	r2,r3,r2
 201acb8:	1007883a 	mov	r3,r2
 201acbc:	e0bffd17 	ldw	r2,-12(fp)
 201acc0:	10c0020d 	sth	r3,8(r2)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 201acc4:	e0bffd17 	ldw	r2,-12(fp)
 201acc8:	e0ffff17 	ldw	r3,-4(fp)
 201accc:	10c00015 	stw	r3,0(r2)
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 201acd0:	0001883a 	nop
 201acd4:	e037883a 	mov	sp,fp
 201acd8:	dfc00117 	ldw	ra,4(sp)
 201acdc:	df000017 	ldw	fp,0(sp)
 201ace0:	dec00204 	addi	sp,sp,8
 201ace4:	f800283a 	ret

0201ace8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 201ace8:	defffc04 	addi	sp,sp,-16
 201acec:	dfc00315 	stw	ra,12(sp)
 201acf0:	df000215 	stw	fp,8(sp)
 201acf4:	df000204 	addi	fp,sp,8
 201acf8:	e13ffe15 	stw	r4,-8(fp)
 201acfc:	e17fff15 	stw	r5,-4(fp)
  pbuf_cat(h, t);
 201ad00:	e17fff17 	ldw	r5,-4(fp)
 201ad04:	e13ffe17 	ldw	r4,-8(fp)
 201ad08:	201ac140 	call	201ac14 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 201ad0c:	e13fff17 	ldw	r4,-4(fp)
 201ad10:	201abb00 	call	201abb0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 201ad14:	0001883a 	nop
 201ad18:	e037883a 	mov	sp,fp
 201ad1c:	dfc00117 	ldw	ra,4(sp)
 201ad20:	df000017 	ldw	fp,0(sp)
 201ad24:	dec00204 	addi	sp,sp,8
 201ad28:	f800283a 	ret

0201ad2c <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
 201ad2c:	defffb04 	addi	sp,sp,-20
 201ad30:	dfc00415 	stw	ra,16(sp)
 201ad34:	df000315 	stw	fp,12(sp)
 201ad38:	df000304 	addi	fp,sp,12
 201ad3c:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *q;
  u8_t tail_gone = 1;
 201ad40:	00800044 	movi	r2,1
 201ad44:	e0bffd05 	stb	r2,-12(fp)
  /* tail */
  q = p->next;
 201ad48:	e0bfff17 	ldw	r2,-4(fp)
 201ad4c:	10800017 	ldw	r2,0(r2)
 201ad50:	e0bffe15 	stw	r2,-8(fp)
  /* pbuf has successor in chain? */
  if (q != NULL) {
 201ad54:	e0bffe17 	ldw	r2,-8(fp)
 201ad58:	10001126 	beq	r2,zero,201ada0 <pbuf_dechain+0x74>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
 201ad5c:	e0bfff17 	ldw	r2,-4(fp)
 201ad60:	10c0020b 	ldhu	r3,8(r2)
 201ad64:	e0bfff17 	ldw	r2,-4(fp)
 201ad68:	1080028b 	ldhu	r2,10(r2)
 201ad6c:	1885c83a 	sub	r2,r3,r2
 201ad70:	1007883a 	mov	r3,r2
 201ad74:	e0bffe17 	ldw	r2,-8(fp)
 201ad78:	10c0020d 	sth	r3,8(r2)
    /* decouple pbuf from remainder */
    p->next = NULL;
 201ad7c:	e0bfff17 	ldw	r2,-4(fp)
 201ad80:	10000015 	stw	zero,0(r2)
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
 201ad84:	e0bfff17 	ldw	r2,-4(fp)
 201ad88:	10c0028b 	ldhu	r3,10(r2)
 201ad8c:	e0bfff17 	ldw	r2,-4(fp)
 201ad90:	10c0020d 	sth	r3,8(r2)
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
 201ad94:	e13ffe17 	ldw	r4,-8(fp)
 201ad98:	201aa200 	call	201aa20 <pbuf_free>
 201ad9c:	e0bffd05 	stb	r2,-12(fp)
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  return ((tail_gone > 0) ? NULL : q);
 201ada0:	e0bffd03 	ldbu	r2,-12(fp)
 201ada4:	1000021e 	bne	r2,zero,201adb0 <pbuf_dechain+0x84>
 201ada8:	e0bffe17 	ldw	r2,-8(fp)
 201adac:	00000106 	br	201adb4 <pbuf_dechain+0x88>
 201adb0:	0005883a 	mov	r2,zero
}
 201adb4:	e037883a 	mov	sp,fp
 201adb8:	dfc00117 	ldw	ra,4(sp)
 201adbc:	df000017 	ldw	fp,0(sp)
 201adc0:	dec00204 	addi	sp,sp,8
 201adc4:	f800283a 	ret

0201adc8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 201adc8:	defffa04 	addi	sp,sp,-24
 201adcc:	dfc00515 	stw	ra,20(sp)
 201add0:	df000415 	stw	fp,16(sp)
 201add4:	df000404 	addi	fp,sp,16
 201add8:	e13ffe15 	stw	r4,-8(fp)
 201addc:	e17fff15 	stw	r5,-4(fp)
  u16_t offset_to=0, offset_from=0, len;
 201ade0:	e03ffc0d 	sth	zero,-16(fp)
 201ade4:	e03ffc8d 	sth	zero,-14(fp)

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 201ade8:	e0bffe17 	ldw	r2,-8(fp)
 201adec:	10000926 	beq	r2,zero,201ae14 <pbuf_copy+0x4c>
 201adf0:	e0bfff17 	ldw	r2,-4(fp)
 201adf4:	10000726 	beq	r2,zero,201ae14 <pbuf_copy+0x4c>
 201adf8:	e0bffe17 	ldw	r2,-8(fp)
 201adfc:	10c0020b 	ldhu	r3,8(r2)
 201ae00:	e0bfff17 	ldw	r2,-4(fp)
 201ae04:	1080020b 	ldhu	r2,8(r2)
 201ae08:	18ffffcc 	andi	r3,r3,65535
 201ae0c:	10bfffcc 	andi	r2,r2,65535
 201ae10:	1880092e 	bgeu	r3,r2,201ae38 <pbuf_copy+0x70>
 201ae14:	01c08134 	movhi	r7,516
 201ae18:	39c4e104 	addi	r7,r7,4996
 201ae1c:	0180d744 	movi	r6,861
 201ae20:	01408134 	movhi	r5,516
 201ae24:	29450904 	addi	r5,r5,5156
 201ae28:	01008134 	movhi	r4,516
 201ae2c:	2104ef04 	addi	r4,r4,5052
 201ae30:	20009e40 	call	20009e4 <printf>
 201ae34:	003fff06 	br	201ae34 <__alt_mem_mem_0+0xfcffae34>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 201ae38:	e0bffe17 	ldw	r2,-8(fp)
 201ae3c:	1080028b 	ldhu	r2,10(r2)
 201ae40:	10ffffcc 	andi	r3,r2,65535
 201ae44:	e0bffc0b 	ldhu	r2,-16(fp)
 201ae48:	1887c83a 	sub	r3,r3,r2
 201ae4c:	e0bfff17 	ldw	r2,-4(fp)
 201ae50:	1080028b 	ldhu	r2,10(r2)
 201ae54:	113fffcc 	andi	r4,r2,65535
 201ae58:	e0bffc8b 	ldhu	r2,-14(fp)
 201ae5c:	2085c83a 	sub	r2,r4,r2
 201ae60:	18800616 	blt	r3,r2,201ae7c <pbuf_copy+0xb4>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 201ae64:	e0bfff17 	ldw	r2,-4(fp)
 201ae68:	10c0028b 	ldhu	r3,10(r2)
 201ae6c:	e0bffc8b 	ldhu	r2,-14(fp)
 201ae70:	1885c83a 	sub	r2,r3,r2
 201ae74:	e0bffd0d 	sth	r2,-12(fp)
 201ae78:	00000506 	br	201ae90 <pbuf_copy+0xc8>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 201ae7c:	e0bffe17 	ldw	r2,-8(fp)
 201ae80:	10c0028b 	ldhu	r3,10(r2)
 201ae84:	e0bffc0b 	ldhu	r2,-16(fp)
 201ae88:	1885c83a 	sub	r2,r3,r2
 201ae8c:	e0bffd0d 	sth	r2,-12(fp)
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 201ae90:	e0bffe17 	ldw	r2,-8(fp)
 201ae94:	10c00117 	ldw	r3,4(r2)
 201ae98:	e0bffc0b 	ldhu	r2,-16(fp)
 201ae9c:	1889883a 	add	r4,r3,r2
 201aea0:	e0bfff17 	ldw	r2,-4(fp)
 201aea4:	10c00117 	ldw	r3,4(r2)
 201aea8:	e0bffc8b 	ldhu	r2,-14(fp)
 201aeac:	1885883a 	add	r2,r3,r2
 201aeb0:	e0fffd0b 	ldhu	r3,-12(fp)
 201aeb4:	180d883a 	mov	r6,r3
 201aeb8:	100b883a 	mov	r5,r2
 201aebc:	2005e580 	call	2005e58 <memcpy>
    offset_to += len;
 201aec0:	e0fffc0b 	ldhu	r3,-16(fp)
 201aec4:	e0bffd0b 	ldhu	r2,-12(fp)
 201aec8:	1885883a 	add	r2,r3,r2
 201aecc:	e0bffc0d 	sth	r2,-16(fp)
    offset_from += len;
 201aed0:	e0fffc8b 	ldhu	r3,-14(fp)
 201aed4:	e0bffd0b 	ldhu	r2,-12(fp)
 201aed8:	1885883a 	add	r2,r3,r2
 201aedc:	e0bffc8d 	sth	r2,-14(fp)
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 201aee0:	e0bfff17 	ldw	r2,-4(fp)
 201aee4:	1080028b 	ldhu	r2,10(r2)
 201aee8:	10bfffcc 	andi	r2,r2,65535
 201aeec:	e0fffc8b 	ldhu	r3,-14(fp)
 201aef0:	18800436 	bltu	r3,r2,201af04 <pbuf_copy+0x13c>
      /* on to next p_from (if any) */
      offset_from = 0;
 201aef4:	e03ffc8d 	sth	zero,-14(fp)
      p_from = p_from->next;
 201aef8:	e0bfff17 	ldw	r2,-4(fp)
 201aefc:	10800017 	ldw	r2,0(r2)
 201af00:	e0bfff15 	stw	r2,-4(fp)
    }
    if (offset_to == p_to->len) {
 201af04:	e0bffe17 	ldw	r2,-8(fp)
 201af08:	1080028b 	ldhu	r2,10(r2)
 201af0c:	10ffffcc 	andi	r3,r2,65535
 201af10:	e0bffc0b 	ldhu	r2,-16(fp)
 201af14:	1880111e 	bne	r3,r2,201af5c <pbuf_copy+0x194>
      /* on to next p_to (if any) */
      offset_to = 0;
 201af18:	e03ffc0d 	sth	zero,-16(fp)
      p_to = p_to->next;
 201af1c:	e0bffe17 	ldw	r2,-8(fp)
 201af20:	10800017 	ldw	r2,0(r2)
 201af24:	e0bffe15 	stw	r2,-8(fp)
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 201af28:	e0bffe17 	ldw	r2,-8(fp)
 201af2c:	10000b1e 	bne	r2,zero,201af5c <pbuf_copy+0x194>
 201af30:	e0bfff17 	ldw	r2,-4(fp)
 201af34:	10000926 	beq	r2,zero,201af5c <pbuf_copy+0x194>
 201af38:	01c08134 	movhi	r7,516
 201af3c:	39c4e104 	addi	r7,r7,4996
 201af40:	0180de04 	movi	r6,888
 201af44:	01408134 	movhi	r5,516
 201af48:	29451504 	addi	r5,r5,5204
 201af4c:	01008134 	movhi	r4,516
 201af50:	2104ef04 	addi	r4,r4,5052
 201af54:	20009e40 	call	20009e4 <printf>
 201af58:	003fff06 	br	201af58 <__alt_mem_mem_0+0xfcffaf58>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 201af5c:	e0bfff17 	ldw	r2,-4(fp)
 201af60:	10001326 	beq	r2,zero,201afb0 <pbuf_copy+0x1e8>
 201af64:	e0bfff17 	ldw	r2,-4(fp)
 201af68:	10c0028b 	ldhu	r3,10(r2)
 201af6c:	e0bfff17 	ldw	r2,-4(fp)
 201af70:	1080020b 	ldhu	r2,8(r2)
 201af74:	18ffffcc 	andi	r3,r3,65535
 201af78:	10bfffcc 	andi	r2,r2,65535
 201af7c:	18800c1e 	bne	r3,r2,201afb0 <pbuf_copy+0x1e8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 201af80:	e0bfff17 	ldw	r2,-4(fp)
 201af84:	10800017 	ldw	r2,0(r2)
 201af88:	10000926 	beq	r2,zero,201afb0 <pbuf_copy+0x1e8>
 201af8c:	01c08134 	movhi	r7,516
 201af90:	39c4e104 	addi	r7,r7,4996
 201af94:	0180df84 	movi	r6,894
 201af98:	01408134 	movhi	r5,516
 201af9c:	29451904 	addi	r5,r5,5220
 201afa0:	01008134 	movhi	r4,516
 201afa4:	2104ef04 	addi	r4,r4,5052
 201afa8:	20009e40 	call	20009e4 <printf>
 201afac:	003fff06 	br	201afac <__alt_mem_mem_0+0xfcffafac>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 201afb0:	e0bffe17 	ldw	r2,-8(fp)
 201afb4:	10001326 	beq	r2,zero,201b004 <pbuf_copy+0x23c>
 201afb8:	e0bffe17 	ldw	r2,-8(fp)
 201afbc:	10c0028b 	ldhu	r3,10(r2)
 201afc0:	e0bffe17 	ldw	r2,-8(fp)
 201afc4:	1080020b 	ldhu	r2,8(r2)
 201afc8:	18ffffcc 	andi	r3,r3,65535
 201afcc:	10bfffcc 	andi	r2,r2,65535
 201afd0:	18800c1e 	bne	r3,r2,201b004 <pbuf_copy+0x23c>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 201afd4:	e0bffe17 	ldw	r2,-8(fp)
 201afd8:	10800017 	ldw	r2,0(r2)
 201afdc:	10000926 	beq	r2,zero,201b004 <pbuf_copy+0x23c>
 201afe0:	01c08134 	movhi	r7,516
 201afe4:	39c4e104 	addi	r7,r7,4996
 201afe8:	0180e0c4 	movi	r6,899
 201afec:	01408134 	movhi	r5,516
 201aff0:	29451904 	addi	r5,r5,5220
 201aff4:	01008134 	movhi	r4,516
 201aff8:	2104ef04 	addi	r4,r4,5052
 201affc:	20009e40 	call	20009e4 <printf>
 201b000:	003fff06 	br	201b000 <__alt_mem_mem_0+0xfcffb000>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 201b004:	e0bfff17 	ldw	r2,-4(fp)
 201b008:	103f8b1e 	bne	r2,zero,201ae38 <__alt_mem_mem_0+0xfcffae38>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 201b00c:	0005883a 	mov	r2,zero
}
 201b010:	e037883a 	mov	sp,fp
 201b014:	dfc00117 	ldw	ra,4(sp)
 201b018:	df000017 	ldw	fp,0(sp)
 201b01c:	dec00204 	addi	sp,sp,8
 201b020:	f800283a 	ret

0201b024 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 201b024:	defff704 	addi	sp,sp,-36
 201b028:	dfc00815 	stw	ra,32(sp)
 201b02c:	df000715 	stw	fp,28(sp)
 201b030:	df000704 	addi	fp,sp,28
 201b034:	e13ffc15 	stw	r4,-16(fp)
 201b038:	e17ffd15 	stw	r5,-12(fp)
 201b03c:	3007883a 	mov	r3,r6
 201b040:	3805883a 	mov	r2,r7
 201b044:	e0fffe0d 	sth	r3,-8(fp)
 201b048:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 201b04c:	e03ffb0d 	sth	zero,-20(fp)

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 201b050:	e0bffc17 	ldw	r2,-16(fp)
 201b054:	1000091e 	bne	r2,zero,201b07c <pbuf_copy_partial+0x58>
 201b058:	01c08134 	movhi	r7,516
 201b05c:	39c4e104 	addi	r7,r7,4996
 201b060:	0180e744 	movi	r6,925
 201b064:	01408134 	movhi	r5,516
 201b068:	29452404 	addi	r5,r5,5264
 201b06c:	01008134 	movhi	r4,516
 201b070:	2104ef04 	addi	r4,r4,5052
 201b074:	20009e40 	call	20009e4 <printf>
 201b078:	003fff06 	br	201b078 <__alt_mem_mem_0+0xfcffb078>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 201b07c:	e0bffd17 	ldw	r2,-12(fp)
 201b080:	1000091e 	bne	r2,zero,201b0a8 <pbuf_copy_partial+0x84>
 201b084:	01c08134 	movhi	r7,516
 201b088:	39c4e104 	addi	r7,r7,4996
 201b08c:	0180e784 	movi	r6,926
 201b090:	01408134 	movhi	r5,516
 201b094:	29452c04 	addi	r5,r5,5296
 201b098:	01008134 	movhi	r4,516
 201b09c:	2104ef04 	addi	r4,r4,5052
 201b0a0:	20009e40 	call	20009e4 <printf>
 201b0a4:	003fff06 	br	201b0a4 <__alt_mem_mem_0+0xfcffb0a4>

  left = 0;
 201b0a8:	e03ffa0d 	sth	zero,-24(fp)

  if((buf == NULL) || (dataptr == NULL)) {
 201b0ac:	e0bffc17 	ldw	r2,-16(fp)
 201b0b0:	10000226 	beq	r2,zero,201b0bc <pbuf_copy_partial+0x98>
 201b0b4:	e0bffd17 	ldw	r2,-12(fp)
 201b0b8:	1000021e 	bne	r2,zero,201b0c4 <pbuf_copy_partial+0xa0>
    return 0;
 201b0bc:	0005883a 	mov	r2,zero
 201b0c0:	00003a06 	br	201b1ac <pbuf_copy_partial+0x188>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 201b0c4:	e0bffc17 	ldw	r2,-16(fp)
 201b0c8:	e0bff915 	stw	r2,-28(fp)
 201b0cc:	00003206 	br	201b198 <pbuf_copy_partial+0x174>
    if ((offset != 0) && (offset >= p->len)) {
 201b0d0:	e0bfff0b 	ldhu	r2,-4(fp)
 201b0d4:	10000b26 	beq	r2,zero,201b104 <pbuf_copy_partial+0xe0>
 201b0d8:	e0bff917 	ldw	r2,-28(fp)
 201b0dc:	1080028b 	ldhu	r2,10(r2)
 201b0e0:	10bfffcc 	andi	r2,r2,65535
 201b0e4:	e0ffff0b 	ldhu	r3,-4(fp)
 201b0e8:	18800636 	bltu	r3,r2,201b104 <pbuf_copy_partial+0xe0>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 201b0ec:	e0bff917 	ldw	r2,-28(fp)
 201b0f0:	1080028b 	ldhu	r2,10(r2)
 201b0f4:	e0ffff0b 	ldhu	r3,-4(fp)
 201b0f8:	1885c83a 	sub	r2,r3,r2
 201b0fc:	e0bfff0d 	sth	r2,-4(fp)
 201b100:	00002206 	br	201b18c <pbuf_copy_partial+0x168>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 201b104:	e0bff917 	ldw	r2,-28(fp)
 201b108:	10c0028b 	ldhu	r3,10(r2)
 201b10c:	e0bfff0b 	ldhu	r2,-4(fp)
 201b110:	1885c83a 	sub	r2,r3,r2
 201b114:	e0bffa8d 	sth	r2,-22(fp)
      if (buf_copy_len > len)
 201b118:	e0bffa8b 	ldhu	r2,-22(fp)
 201b11c:	e0fffe0b 	ldhu	r3,-8(fp)
 201b120:	1880022e 	bgeu	r3,r2,201b12c <pbuf_copy_partial+0x108>
          buf_copy_len = len;
 201b124:	e0bffe0b 	ldhu	r2,-8(fp)
 201b128:	e0bffa8d 	sth	r2,-22(fp)
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 201b12c:	e0bffa0b 	ldhu	r2,-24(fp)
 201b130:	e0fffd17 	ldw	r3,-12(fp)
 201b134:	1889883a 	add	r4,r3,r2
 201b138:	e0bff917 	ldw	r2,-28(fp)
 201b13c:	10c00117 	ldw	r3,4(r2)
 201b140:	e0bfff0b 	ldhu	r2,-4(fp)
 201b144:	1885883a 	add	r2,r3,r2
 201b148:	e0fffa8b 	ldhu	r3,-22(fp)
 201b14c:	180d883a 	mov	r6,r3
 201b150:	100b883a 	mov	r5,r2
 201b154:	2005e580 	call	2005e58 <memcpy>
      copied_total += buf_copy_len;
 201b158:	e0fffb0b 	ldhu	r3,-20(fp)
 201b15c:	e0bffa8b 	ldhu	r2,-22(fp)
 201b160:	1885883a 	add	r2,r3,r2
 201b164:	e0bffb0d 	sth	r2,-20(fp)
      left += buf_copy_len;
 201b168:	e0fffa0b 	ldhu	r3,-24(fp)
 201b16c:	e0bffa8b 	ldhu	r2,-22(fp)
 201b170:	1885883a 	add	r2,r3,r2
 201b174:	e0bffa0d 	sth	r2,-24(fp)
      len -= buf_copy_len;
 201b178:	e0fffe0b 	ldhu	r3,-8(fp)
 201b17c:	e0bffa8b 	ldhu	r2,-22(fp)
 201b180:	1885c83a 	sub	r2,r3,r2
 201b184:	e0bffe0d 	sth	r2,-8(fp)
      offset = 0;
 201b188:	e03fff0d 	sth	zero,-4(fp)
  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
 201b18c:	e0bff917 	ldw	r2,-28(fp)
 201b190:	10800017 	ldw	r2,0(r2)
 201b194:	e0bff915 	stw	r2,-28(fp)
 201b198:	e0bffe0b 	ldhu	r2,-8(fp)
 201b19c:	10000226 	beq	r2,zero,201b1a8 <pbuf_copy_partial+0x184>
 201b1a0:	e0bff917 	ldw	r2,-28(fp)
 201b1a4:	103fca1e 	bne	r2,zero,201b0d0 <__alt_mem_mem_0+0xfcffb0d0>
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
 201b1a8:	e0bffb0b 	ldhu	r2,-20(fp)
}
 201b1ac:	e037883a 	mov	sp,fp
 201b1b0:	dfc00117 	ldw	ra,4(sp)
 201b1b4:	df000017 	ldw	fp,0(sp)
 201b1b8:	dec00204 	addi	sp,sp,8
 201b1bc:	f800283a 	ret

0201b1c0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 201b1c0:	defff804 	addi	sp,sp,-32
 201b1c4:	dfc00715 	stw	ra,28(sp)
 201b1c8:	df000615 	stw	fp,24(sp)
 201b1cc:	df000604 	addi	fp,sp,24
 201b1d0:	e13ffd15 	stw	r4,-12(fp)
 201b1d4:	e17ffe15 	stw	r5,-8(fp)
 201b1d8:	3005883a 	mov	r2,r6
 201b1dc:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 201b1e0:	e0bfff0b 	ldhu	r2,-4(fp)
 201b1e4:	e0bffb8d 	sth	r2,-18(fp)
  u16_t copied_total = 0;
 201b1e8:	e03ffc0d 	sth	zero,-16(fp)

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return 0;);
 201b1ec:	e0bffd17 	ldw	r2,-12(fp)
 201b1f0:	1000091e 	bne	r2,zero,201b218 <pbuf_take+0x58>
 201b1f4:	01c08134 	movhi	r7,516
 201b1f8:	39c4e104 	addi	r7,r7,4996
 201b1fc:	0180f344 	movi	r6,973
 201b200:	01408134 	movhi	r5,516
 201b204:	29453504 	addi	r5,r5,5332
 201b208:	01008134 	movhi	r4,516
 201b20c:	2104ef04 	addi	r4,r4,5052
 201b210:	20009e40 	call	20009e4 <printf>
 201b214:	003fff06 	br	201b214 <__alt_mem_mem_0+0xfcffb214>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return 0;);
 201b218:	e0bffe17 	ldw	r2,-8(fp)
 201b21c:	1000091e 	bne	r2,zero,201b244 <pbuf_take+0x84>
 201b220:	01c08134 	movhi	r7,516
 201b224:	39c4e104 	addi	r7,r7,4996
 201b228:	0180f384 	movi	r6,974
 201b22c:	01408134 	movhi	r5,516
 201b230:	29453b04 	addi	r5,r5,5356
 201b234:	01008134 	movhi	r4,516
 201b238:	2104ef04 	addi	r4,r4,5052
 201b23c:	20009e40 	call	20009e4 <printf>
 201b240:	003fff06 	br	201b240 <__alt_mem_mem_0+0xfcffb240>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 201b244:	e0bffd17 	ldw	r2,-12(fp)
 201b248:	10000726 	beq	r2,zero,201b268 <pbuf_take+0xa8>
 201b24c:	e0bffe17 	ldw	r2,-8(fp)
 201b250:	10000526 	beq	r2,zero,201b268 <pbuf_take+0xa8>
 201b254:	e0bffd17 	ldw	r2,-12(fp)
 201b258:	1080020b 	ldhu	r2,8(r2)
 201b25c:	10ffffcc 	andi	r3,r2,65535
 201b260:	e0bfff0b 	ldhu	r2,-4(fp)
 201b264:	1880022e 	bgeu	r3,r2,201b270 <pbuf_take+0xb0>
    return ERR_ARG;
 201b268:	00bffc84 	movi	r2,-14
 201b26c:	00002406 	br	201b300 <pbuf_take+0x140>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; total_copy_len != 0; p = p->next) {
 201b270:	e0bffd17 	ldw	r2,-12(fp)
 201b274:	e0bffa15 	stw	r2,-24(fp)
 201b278:	00001e06 	br	201b2f4 <pbuf_take+0x134>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
    buf_copy_len = total_copy_len;
 201b27c:	e0bffb8b 	ldhu	r2,-18(fp)
 201b280:	e0bffb0d 	sth	r2,-20(fp)
    if (buf_copy_len > p->len) {
 201b284:	e0bffa17 	ldw	r2,-24(fp)
 201b288:	1080028b 	ldhu	r2,10(r2)
 201b28c:	10ffffcc 	andi	r3,r2,65535
 201b290:	e0bffb0b 	ldhu	r2,-20(fp)
 201b294:	1880032e 	bgeu	r3,r2,201b2a4 <pbuf_take+0xe4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 201b298:	e0bffa17 	ldw	r2,-24(fp)
 201b29c:	1080028b 	ldhu	r2,10(r2)
 201b2a0:	e0bffb0d 	sth	r2,-20(fp)
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((char*)dataptr)[copied_total], buf_copy_len);
 201b2a4:	e0bffa17 	ldw	r2,-24(fp)
 201b2a8:	11000117 	ldw	r4,4(r2)
 201b2ac:	e0bffc0b 	ldhu	r2,-16(fp)
 201b2b0:	e0fffe17 	ldw	r3,-8(fp)
 201b2b4:	1885883a 	add	r2,r3,r2
 201b2b8:	e0fffb0b 	ldhu	r3,-20(fp)
 201b2bc:	180d883a 	mov	r6,r3
 201b2c0:	100b883a 	mov	r5,r2
 201b2c4:	2005e580 	call	2005e58 <memcpy>
    total_copy_len -= buf_copy_len;
 201b2c8:	e0fffb8b 	ldhu	r3,-18(fp)
 201b2cc:	e0bffb0b 	ldhu	r2,-20(fp)
 201b2d0:	1885c83a 	sub	r2,r3,r2
 201b2d4:	e0bffb8d 	sth	r2,-18(fp)
    copied_total += buf_copy_len;
 201b2d8:	e0fffc0b 	ldhu	r3,-16(fp)
 201b2dc:	e0bffb0b 	ldhu	r2,-20(fp)
 201b2e0:	1885883a 	add	r2,r3,r2
 201b2e4:	e0bffc0d 	sth	r2,-16(fp)
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; total_copy_len != 0; p = p->next) {
 201b2e8:	e0bffa17 	ldw	r2,-24(fp)
 201b2ec:	10800017 	ldw	r2,0(r2)
 201b2f0:	e0bffa15 	stw	r2,-24(fp)
 201b2f4:	e0bffb8b 	ldhu	r2,-18(fp)
 201b2f8:	103fe01e 	bne	r2,zero,201b27c <__alt_mem_mem_0+0xfcffb27c>
    MEMCPY(p->payload, &((char*)dataptr)[copied_total], buf_copy_len);
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
 201b2fc:	0005883a 	mov	r2,zero
}
 201b300:	e037883a 	mov	sp,fp
 201b304:	dfc00117 	ldw	ra,4(sp)
 201b308:	df000017 	ldw	fp,0(sp)
 201b30c:	dec00204 	addi	sp,sp,8
 201b310:	f800283a 	ret

0201b314 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
 201b314:	defffa04 	addi	sp,sp,-24
 201b318:	dfc00515 	stw	ra,20(sp)
 201b31c:	df000415 	stw	fp,16(sp)
 201b320:	df000404 	addi	fp,sp,16
 201b324:	e13ffe15 	stw	r4,-8(fp)
 201b328:	e17fff15 	stw	r5,-4(fp)
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
 201b32c:	e0bffe17 	ldw	r2,-8(fp)
 201b330:	10800017 	ldw	r2,0(r2)
 201b334:	1000021e 	bne	r2,zero,201b340 <pbuf_coalesce+0x2c>
    return p;
 201b338:	e0bffe17 	ldw	r2,-8(fp)
 201b33c:	00001306 	br	201b38c <pbuf_coalesce+0x78>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
 201b340:	e0bffe17 	ldw	r2,-8(fp)
 201b344:	1080020b 	ldhu	r2,8(r2)
 201b348:	10bfffcc 	andi	r2,r2,65535
 201b34c:	000d883a 	mov	r6,zero
 201b350:	100b883a 	mov	r5,r2
 201b354:	e13fff17 	ldw	r4,-4(fp)
 201b358:	201a2640 	call	201a264 <pbuf_alloc>
 201b35c:	e0bffc15 	stw	r2,-16(fp)
  if (q == NULL) {
 201b360:	e0bffc17 	ldw	r2,-16(fp)
 201b364:	1000021e 	bne	r2,zero,201b370 <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
 201b368:	e0bffe17 	ldw	r2,-8(fp)
 201b36c:	00000706 	br	201b38c <pbuf_coalesce+0x78>
  }
  err = pbuf_copy(q, p);
 201b370:	e17ffe17 	ldw	r5,-8(fp)
 201b374:	e13ffc17 	ldw	r4,-16(fp)
 201b378:	201adc80 	call	201adc8 <pbuf_copy>
 201b37c:	e0bffd05 	stb	r2,-12(fp)
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  pbuf_free(p);
 201b380:	e13ffe17 	ldw	r4,-8(fp)
 201b384:	201aa200 	call	201aa20 <pbuf_free>
  return q;
 201b388:	e0bffc17 	ldw	r2,-16(fp)
}
 201b38c:	e037883a 	mov	sp,fp
 201b390:	dfc00117 	ldw	ra,4(sp)
 201b394:	df000017 	ldw	fp,0(sp)
 201b398:	dec00204 	addi	sp,sp,8
 201b39c:	f800283a 	ret

0201b3a0 <pbuf_fill_chksum>:
 *         within the (first) pbuf (no pbuf queues!)
 */
err_t
pbuf_fill_chksum(struct pbuf *p, u16_t start_offset, const void *dataptr,
                 u16_t len, u16_t *chksum)
{
 201b3a0:	defff704 	addi	sp,sp,-36
 201b3a4:	dfc00815 	stw	ra,32(sp)
 201b3a8:	df000715 	stw	fp,28(sp)
 201b3ac:	df000704 	addi	fp,sp,28
 201b3b0:	e13ffc15 	stw	r4,-16(fp)
 201b3b4:	2807883a 	mov	r3,r5
 201b3b8:	e1bffe15 	stw	r6,-8(fp)
 201b3bc:	3805883a 	mov	r2,r7
 201b3c0:	e0fffd0d 	sth	r3,-12(fp)
 201b3c4:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ASSERT("p != NULL", p != NULL);
  LWIP_ASSERT("dataptr != NULL", dataptr != NULL);
  LWIP_ASSERT("chksum != NULL", chksum != NULL);
  LWIP_ASSERT("len != 0", len != 0);

  if ((start_offset >= p->len) || (start_offset + len > p->len)) {
 201b3c8:	e0bffc17 	ldw	r2,-16(fp)
 201b3cc:	1080028b 	ldhu	r2,10(r2)
 201b3d0:	10bfffcc 	andi	r2,r2,65535
 201b3d4:	e0fffd0b 	ldhu	r3,-12(fp)
 201b3d8:	1880072e 	bgeu	r3,r2,201b3f8 <pbuf_fill_chksum+0x58>
 201b3dc:	e0fffd0b 	ldhu	r3,-12(fp)
 201b3e0:	e0bfff0b 	ldhu	r2,-4(fp)
 201b3e4:	1885883a 	add	r2,r3,r2
 201b3e8:	e0fffc17 	ldw	r3,-16(fp)
 201b3ec:	18c0028b 	ldhu	r3,10(r3)
 201b3f0:	18ffffcc 	andi	r3,r3,65535
 201b3f4:	1880020e 	bge	r3,r2,201b400 <pbuf_fill_chksum+0x60>
    return ERR_ARG;
 201b3f8:	00bffc84 	movi	r2,-14
 201b3fc:	00002606 	br	201b498 <pbuf_fill_chksum+0xf8>
  }

  dst_ptr = ((char*)p->payload) + start_offset;
 201b400:	e0bffc17 	ldw	r2,-16(fp)
 201b404:	10c00117 	ldw	r3,4(r2)
 201b408:	e0bffd0b 	ldhu	r2,-12(fp)
 201b40c:	1885883a 	add	r2,r3,r2
 201b410:	e0bffa15 	stw	r2,-24(fp)
  copy_chksum = LWIP_CHKSUM_COPY(dst_ptr, dataptr, len);
 201b414:	e0bfff0b 	ldhu	r2,-4(fp)
 201b418:	100d883a 	mov	r6,r2
 201b41c:	e17ffe17 	ldw	r5,-8(fp)
 201b420:	e13ffa17 	ldw	r4,-24(fp)
 201b424:	2031b700 	call	2031b70 <lwip_chksum_copy>
 201b428:	e0bff90d 	sth	r2,-28(fp)
  if ((start_offset & 1) != 0) {
 201b42c:	e0bffd0b 	ldhu	r2,-12(fp)
 201b430:	1080004c 	andi	r2,r2,1
 201b434:	10000726 	beq	r2,zero,201b454 <pbuf_fill_chksum+0xb4>
    copy_chksum = SWAP_BYTES_IN_WORD(copy_chksum);
 201b438:	e0bff90b 	ldhu	r2,-28(fp)
 201b43c:	1004d23a 	srli	r2,r2,8
 201b440:	1007883a 	mov	r3,r2
 201b444:	e0bff90b 	ldhu	r2,-28(fp)
 201b448:	1004923a 	slli	r2,r2,8
 201b44c:	1884b03a 	or	r2,r3,r2
 201b450:	e0bff90d 	sth	r2,-28(fp)
  }
  acc = *chksum;
 201b454:	e0800217 	ldw	r2,8(fp)
 201b458:	1080000b 	ldhu	r2,0(r2)
 201b45c:	10bfffcc 	andi	r2,r2,65535
 201b460:	e0bffb15 	stw	r2,-20(fp)
  acc += copy_chksum;
 201b464:	e0bff90b 	ldhu	r2,-28(fp)
 201b468:	e0fffb17 	ldw	r3,-20(fp)
 201b46c:	1885883a 	add	r2,r3,r2
 201b470:	e0bffb15 	stw	r2,-20(fp)
  *chksum = FOLD_U32T(acc);
 201b474:	e0bffb17 	ldw	r2,-20(fp)
 201b478:	1004d43a 	srli	r2,r2,16
 201b47c:	1007883a 	mov	r3,r2
 201b480:	e0bffb17 	ldw	r2,-20(fp)
 201b484:	1885883a 	add	r2,r3,r2
 201b488:	1007883a 	mov	r3,r2
 201b48c:	e0800217 	ldw	r2,8(fp)
 201b490:	10c0000d 	sth	r3,0(r2)
  return ERR_OK;
 201b494:	0005883a 	mov	r2,zero
}
 201b498:	e037883a 	mov	sp,fp
 201b49c:	dfc00117 	ldw	ra,4(sp)
 201b4a0:	df000017 	ldw	fp,0(sp)
 201b4a4:	dec00204 	addi	sp,sp,8
 201b4a8:	f800283a 	ret

0201b4ac <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(struct pbuf* p, u16_t offset)
{
 201b4ac:	defffb04 	addi	sp,sp,-20
 201b4b0:	df000415 	stw	fp,16(sp)
 201b4b4:	df000404 	addi	fp,sp,16
 201b4b8:	e13ffe15 	stw	r4,-8(fp)
 201b4bc:	2805883a 	mov	r2,r5
 201b4c0:	e0bfff0d 	sth	r2,-4(fp)
  u16_t copy_from = offset;
 201b4c4:	e0bfff0b 	ldhu	r2,-4(fp)
 201b4c8:	e0bffc0d 	sth	r2,-16(fp)
  struct pbuf* q = p;
 201b4cc:	e0bffe17 	ldw	r2,-8(fp)
 201b4d0:	e0bffd15 	stw	r2,-12(fp)

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= copy_from)) {
 201b4d4:	00000806 	br	201b4f8 <pbuf_get_at+0x4c>
    copy_from -= q->len;
 201b4d8:	e0bffd17 	ldw	r2,-12(fp)
 201b4dc:	1080028b 	ldhu	r2,10(r2)
 201b4e0:	e0fffc0b 	ldhu	r3,-16(fp)
 201b4e4:	1885c83a 	sub	r2,r3,r2
 201b4e8:	e0bffc0d 	sth	r2,-16(fp)
    q = q->next;
 201b4ec:	e0bffd17 	ldw	r2,-12(fp)
 201b4f0:	10800017 	ldw	r2,0(r2)
 201b4f4:	e0bffd15 	stw	r2,-12(fp)
{
  u16_t copy_from = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= copy_from)) {
 201b4f8:	e0bffd17 	ldw	r2,-12(fp)
 201b4fc:	10000526 	beq	r2,zero,201b514 <pbuf_get_at+0x68>
 201b500:	e0bffd17 	ldw	r2,-12(fp)
 201b504:	1080028b 	ldhu	r2,10(r2)
 201b508:	10bfffcc 	andi	r2,r2,65535
 201b50c:	e0fffc0b 	ldhu	r3,-16(fp)
 201b510:	18bff12e 	bgeu	r3,r2,201b4d8 <__alt_mem_mem_0+0xfcffb4d8>
    copy_from -= q->len;
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > copy_from)) {
 201b514:	e0bffd17 	ldw	r2,-12(fp)
 201b518:	10000b26 	beq	r2,zero,201b548 <pbuf_get_at+0x9c>
 201b51c:	e0bffd17 	ldw	r2,-12(fp)
 201b520:	1080028b 	ldhu	r2,10(r2)
 201b524:	10bfffcc 	andi	r2,r2,65535
 201b528:	e0fffc0b 	ldhu	r3,-16(fp)
 201b52c:	1880062e 	bgeu	r3,r2,201b548 <pbuf_get_at+0x9c>
    return ((u8_t*)q->payload)[copy_from];
 201b530:	e0bffd17 	ldw	r2,-12(fp)
 201b534:	10c00117 	ldw	r3,4(r2)
 201b538:	e0bffc0b 	ldhu	r2,-16(fp)
 201b53c:	1885883a 	add	r2,r3,r2
 201b540:	10800003 	ldbu	r2,0(r2)
 201b544:	00000106 	br	201b54c <pbuf_get_at+0xa0>
  }
  return 0;
 201b548:	0005883a 	mov	r2,zero
}
 201b54c:	e037883a 	mov	sp,fp
 201b550:	df000017 	ldw	fp,0(sp)
 201b554:	dec00104 	addi	sp,sp,4
 201b558:	f800283a 	ret

0201b55c <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
 201b55c:	defff704 	addi	sp,sp,-36
 201b560:	dfc00815 	stw	ra,32(sp)
 201b564:	df000715 	stw	fp,28(sp)
 201b568:	df000704 	addi	fp,sp,28
 201b56c:	e13ffc15 	stw	r4,-16(fp)
 201b570:	2807883a 	mov	r3,r5
 201b574:	e1bffe15 	stw	r6,-8(fp)
 201b578:	3805883a 	mov	r2,r7
 201b57c:	e0fffd0d 	sth	r3,-12(fp)
 201b580:	e0bfff0d 	sth	r2,-4(fp)
  u16_t start = offset;
 201b584:	e0bffd0b 	ldhu	r2,-12(fp)
 201b588:	e0bff90d 	sth	r2,-28(fp)
  struct pbuf* q = p;
 201b58c:	e0bffc17 	ldw	r2,-16(fp)
 201b590:	e0bffa15 	stw	r2,-24(fp)

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= start)) {
 201b594:	00000806 	br	201b5b8 <pbuf_memcmp+0x5c>
    start -= q->len;
 201b598:	e0bffa17 	ldw	r2,-24(fp)
 201b59c:	1080028b 	ldhu	r2,10(r2)
 201b5a0:	e0fff90b 	ldhu	r3,-28(fp)
 201b5a4:	1885c83a 	sub	r2,r3,r2
 201b5a8:	e0bff90d 	sth	r2,-28(fp)
    q = q->next;
 201b5ac:	e0bffa17 	ldw	r2,-24(fp)
 201b5b0:	10800017 	ldw	r2,0(r2)
 201b5b4:	e0bffa15 	stw	r2,-24(fp)
{
  u16_t start = offset;
  struct pbuf* q = p;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= start)) {
 201b5b8:	e0bffa17 	ldw	r2,-24(fp)
 201b5bc:	10000526 	beq	r2,zero,201b5d4 <pbuf_memcmp+0x78>
 201b5c0:	e0bffa17 	ldw	r2,-24(fp)
 201b5c4:	1080028b 	ldhu	r2,10(r2)
 201b5c8:	10bfffcc 	andi	r2,r2,65535
 201b5cc:	e0fff90b 	ldhu	r3,-28(fp)
 201b5d0:	18bff12e 	bgeu	r3,r2,201b598 <__alt_mem_mem_0+0xfcffb598>
    start -= q->len;
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > start)) {
 201b5d4:	e0bffa17 	ldw	r2,-24(fp)
 201b5d8:	10002226 	beq	r2,zero,201b664 <pbuf_memcmp+0x108>
 201b5dc:	e0bffa17 	ldw	r2,-24(fp)
 201b5e0:	1080028b 	ldhu	r2,10(r2)
 201b5e4:	10bfffcc 	andi	r2,r2,65535
 201b5e8:	e0fff90b 	ldhu	r3,-28(fp)
 201b5ec:	18801d2e 	bgeu	r3,r2,201b664 <pbuf_memcmp+0x108>
    u16_t i;
    for(i = 0; i < n; i++) {
 201b5f0:	e03ffb0d 	sth	zero,-20(fp)
 201b5f4:	00001606 	br	201b650 <pbuf_memcmp+0xf4>
      u8_t a = pbuf_get_at(q, start + i);
 201b5f8:	e0fff90b 	ldhu	r3,-28(fp)
 201b5fc:	e0bffb0b 	ldhu	r2,-20(fp)
 201b600:	1885883a 	add	r2,r3,r2
 201b604:	10bfffcc 	andi	r2,r2,65535
 201b608:	100b883a 	mov	r5,r2
 201b60c:	e13ffa17 	ldw	r4,-24(fp)
 201b610:	201b4ac0 	call	201b4ac <pbuf_get_at>
 201b614:	e0bffb85 	stb	r2,-18(fp)
      u8_t b = ((u8_t*)s2)[i];
 201b618:	e0bffb0b 	ldhu	r2,-20(fp)
 201b61c:	e0fffe17 	ldw	r3,-8(fp)
 201b620:	1885883a 	add	r2,r3,r2
 201b624:	10800003 	ldbu	r2,0(r2)
 201b628:	e0bffbc5 	stb	r2,-17(fp)
      if (a != b) {
 201b62c:	e0fffb83 	ldbu	r3,-18(fp)
 201b630:	e0bffbc3 	ldbu	r2,-17(fp)
 201b634:	18800326 	beq	r3,r2,201b644 <pbuf_memcmp+0xe8>
        return i+1;
 201b638:	e0bffb0b 	ldhu	r2,-20(fp)
 201b63c:	10800044 	addi	r2,r2,1
 201b640:	00000906 	br	201b668 <pbuf_memcmp+0x10c>
    q = q->next;
  }
  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > start)) {
    u16_t i;
    for(i = 0; i < n; i++) {
 201b644:	e0bffb0b 	ldhu	r2,-20(fp)
 201b648:	10800044 	addi	r2,r2,1
 201b64c:	e0bffb0d 	sth	r2,-20(fp)
 201b650:	e0fffb0b 	ldhu	r3,-20(fp)
 201b654:	e0bfff0b 	ldhu	r2,-4(fp)
 201b658:	18bfe736 	bltu	r3,r2,201b5f8 <__alt_mem_mem_0+0xfcffb5f8>
      u8_t b = ((u8_t*)s2)[i];
      if (a != b) {
        return i+1;
      }
    }
    return 0;
 201b65c:	0005883a 	mov	r2,zero
 201b660:	00000106 	br	201b668 <pbuf_memcmp+0x10c>
  }
  return 0xffff;
 201b664:	00bfffc4 	movi	r2,-1
}
 201b668:	e037883a 	mov	sp,fp
 201b66c:	dfc00117 	ldw	ra,4(sp)
 201b670:	df000017 	ldw	fp,0(sp)
 201b674:	dec00204 	addi	sp,sp,8
 201b678:	f800283a 	ret

0201b67c <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
 201b67c:	defff804 	addi	sp,sp,-32
 201b680:	dfc00715 	stw	ra,28(sp)
 201b684:	df000615 	stw	fp,24(sp)
 201b688:	df000604 	addi	fp,sp,24
 201b68c:	e13ffc15 	stw	r4,-16(fp)
 201b690:	e17ffd15 	stw	r5,-12(fp)
 201b694:	3007883a 	mov	r3,r6
 201b698:	3805883a 	mov	r2,r7
 201b69c:	e0fffe0d 	sth	r3,-8(fp)
 201b6a0:	e0bfff0d 	sth	r2,-4(fp)
  u16_t i;
  u16_t max = p->tot_len - mem_len;
 201b6a4:	e0bffc17 	ldw	r2,-16(fp)
 201b6a8:	10c0020b 	ldhu	r3,8(r2)
 201b6ac:	e0bffe0b 	ldhu	r2,-8(fp)
 201b6b0:	1885c83a 	sub	r2,r3,r2
 201b6b4:	e0bffa8d 	sth	r2,-22(fp)
  if (p->tot_len >= mem_len + start_offset) {
 201b6b8:	e0bffc17 	ldw	r2,-16(fp)
 201b6bc:	1080020b 	ldhu	r2,8(r2)
 201b6c0:	10ffffcc 	andi	r3,r2,65535
 201b6c4:	e13ffe0b 	ldhu	r4,-8(fp)
 201b6c8:	e0bfff0b 	ldhu	r2,-4(fp)
 201b6cc:	2085883a 	add	r2,r4,r2
 201b6d0:	18801616 	blt	r3,r2,201b72c <pbuf_memfind+0xb0>
    for(i = start_offset; i <= max; ) {
 201b6d4:	e0bfff0b 	ldhu	r2,-4(fp)
 201b6d8:	e0bffa0d 	sth	r2,-24(fp)
 201b6dc:	00001006 	br	201b720 <pbuf_memfind+0xa4>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 201b6e0:	e0bffa0b 	ldhu	r2,-24(fp)
 201b6e4:	e0fffe0b 	ldhu	r3,-8(fp)
 201b6e8:	180f883a 	mov	r7,r3
 201b6ec:	e1bffd17 	ldw	r6,-12(fp)
 201b6f0:	100b883a 	mov	r5,r2
 201b6f4:	e13ffc17 	ldw	r4,-16(fp)
 201b6f8:	201b55c0 	call	201b55c <pbuf_memcmp>
 201b6fc:	e0bffb0d 	sth	r2,-20(fp)
      if (plus == 0) {
 201b700:	e0bffb0b 	ldhu	r2,-20(fp)
 201b704:	1000021e 	bne	r2,zero,201b710 <pbuf_memfind+0x94>
        return i;
 201b708:	e0bffa0b 	ldhu	r2,-24(fp)
 201b70c:	00000806 	br	201b730 <pbuf_memfind+0xb4>
      } else {
        i += plus;
 201b710:	e0fffa0b 	ldhu	r3,-24(fp)
 201b714:	e0bffb0b 	ldhu	r2,-20(fp)
 201b718:	1885883a 	add	r2,r3,r2
 201b71c:	e0bffa0d 	sth	r2,-24(fp)
pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  if (p->tot_len >= mem_len + start_offset) {
    for(i = start_offset; i <= max; ) {
 201b720:	e0bffa0b 	ldhu	r2,-24(fp)
 201b724:	e0fffa8b 	ldhu	r3,-22(fp)
 201b728:	18bfed2e 	bgeu	r3,r2,201b6e0 <__alt_mem_mem_0+0xfcffb6e0>
      } else {
        i += plus;
      }
    }
  }
  return 0xFFFF;
 201b72c:	00bfffc4 	movi	r2,-1
}
 201b730:	e037883a 	mov	sp,fp
 201b734:	dfc00117 	ldw	ra,4(sp)
 201b738:	df000017 	ldw	fp,0(sp)
 201b73c:	dec00204 	addi	sp,sp,8
 201b740:	f800283a 	ret

0201b744 <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(struct pbuf* p, const char* substr)
{
 201b744:	defffb04 	addi	sp,sp,-20
 201b748:	dfc00415 	stw	ra,16(sp)
 201b74c:	df000315 	stw	fp,12(sp)
 201b750:	df000304 	addi	fp,sp,12
 201b754:	e13ffe15 	stw	r4,-8(fp)
 201b758:	e17fff15 	stw	r5,-4(fp)
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
 201b75c:	e0bfff17 	ldw	r2,-4(fp)
 201b760:	10000b26 	beq	r2,zero,201b790 <pbuf_strstr+0x4c>
 201b764:	e0bfff17 	ldw	r2,-4(fp)
 201b768:	10800003 	ldbu	r2,0(r2)
 201b76c:	10803fcc 	andi	r2,r2,255
 201b770:	1080201c 	xori	r2,r2,128
 201b774:	10bfe004 	addi	r2,r2,-128
 201b778:	10000526 	beq	r2,zero,201b790 <pbuf_strstr+0x4c>
 201b77c:	e0bffe17 	ldw	r2,-8(fp)
 201b780:	1080020b 	ldhu	r2,8(r2)
 201b784:	10ffffcc 	andi	r3,r2,65535
 201b788:	00bfffd4 	movui	r2,65535
 201b78c:	1880021e 	bne	r3,r2,201b798 <pbuf_strstr+0x54>
    return 0xFFFF;
 201b790:	00bfffc4 	movi	r2,-1
 201b794:	00000f06 	br	201b7d4 <pbuf_strstr+0x90>
  }
  substr_len = strlen(substr);
 201b798:	e13fff17 	ldw	r4,-4(fp)
 201b79c:	20073a40 	call	20073a4 <strlen>
 201b7a0:	e0bffd15 	stw	r2,-12(fp)
  if (substr_len >= 0xFFFF) {
 201b7a4:	e0bffd17 	ldw	r2,-12(fp)
 201b7a8:	10bffff0 	cmpltui	r2,r2,65535
 201b7ac:	1000021e 	bne	r2,zero,201b7b8 <pbuf_strstr+0x74>
    return 0xFFFF;
 201b7b0:	00bfffc4 	movi	r2,-1
 201b7b4:	00000706 	br	201b7d4 <pbuf_strstr+0x90>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
 201b7b8:	e0bffd17 	ldw	r2,-12(fp)
 201b7bc:	10bfffcc 	andi	r2,r2,65535
 201b7c0:	000f883a 	mov	r7,zero
 201b7c4:	100d883a 	mov	r6,r2
 201b7c8:	e17fff17 	ldw	r5,-4(fp)
 201b7cc:	e13ffe17 	ldw	r4,-8(fp)
 201b7d0:	201b67c0 	call	201b67c <pbuf_memfind>
}
 201b7d4:	e037883a 	mov	sp,fp
 201b7d8:	dfc00117 	ldw	ra,4(sp)
 201b7dc:	df000017 	ldw	fp,0(sp)
 201b7e0:	dec00204 	addi	sp,sp,8
 201b7e4:	f800283a 	ret

0201b7e8 <stats_init>:
#include <string.h>

struct stats_ lwip_stats;

void stats_init(void)
{
 201b7e8:	deffff04 	addi	sp,sp,-4
 201b7ec:	df000015 	stw	fp,0(sp)
 201b7f0:	d839883a 	mov	fp,sp
#endif /* MEMP_STATS */
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 201b7f4:	0001883a 	nop
 201b7f8:	e037883a 	mov	sp,fp
 201b7fc:	df000017 	ldw	fp,0(sp)
 201b800:	dec00104 	addi	sp,sp,4
 201b804:	f800283a 	ret

0201b808 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 201b808:	deffff04 	addi	sp,sp,-4
 201b80c:	df000015 	stw	fp,0(sp)
 201b810:	d839883a 	mov	fp,sp
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 201b814:	0001883a 	nop
 201b818:	e037883a 	mov	sp,fp
 201b81c:	df000017 	ldw	fp,0(sp)
 201b820:	dec00104 	addi	sp,sp,4
 201b824:	f800283a 	ret

0201b828 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 201b828:	defffe04 	addi	sp,sp,-8
 201b82c:	dfc00115 	stw	ra,4(sp)
 201b830:	df000015 	stw	fp,0(sp)
 201b834:	d839883a 	mov	fp,sp
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 201b838:	201d04c0 	call	201d04c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 201b83c:	d0a7f603 	ldbu	r2,-24616(gp)
 201b840:	10800044 	addi	r2,r2,1
 201b844:	d0a7f605 	stb	r2,-24616(gp)
 201b848:	d0a7f603 	ldbu	r2,-24616(gp)
 201b84c:	10803fcc 	andi	r2,r2,255
 201b850:	1080004c 	andi	r2,r2,1
 201b854:	10000126 	beq	r2,zero,201b85c <tcp_tmr+0x34>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 201b858:	201c9140 	call	201c914 <tcp_slowtmr>
  }
}
 201b85c:	0001883a 	nop
 201b860:	e037883a 	mov	sp,fp
 201b864:	dfc00117 	ldw	ra,4(sp)
 201b868:	df000017 	ldw	fp,0(sp)
 201b86c:	dec00204 	addi	sp,sp,8
 201b870:	f800283a 	ret

0201b874 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 201b874:	defff904 	addi	sp,sp,-28
 201b878:	dfc00615 	stw	ra,24(sp)
 201b87c:	df000515 	stw	fp,20(sp)
 201b880:	df000504 	addi	fp,sp,20
 201b884:	e13ffe15 	stw	r4,-8(fp)
 201b888:	2805883a 	mov	r2,r5
 201b88c:	e0bfff05 	stb	r2,-4(fp)
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 201b890:	e0bfff03 	ldbu	r2,-4(fp)
 201b894:	10005126 	beq	r2,zero,201b9dc <tcp_close_shutdown+0x168>
 201b898:	e0bffe17 	ldw	r2,-8(fp)
 201b89c:	10800617 	ldw	r2,24(r2)
 201b8a0:	10800120 	cmpeqi	r2,r2,4
 201b8a4:	1000041e 	bne	r2,zero,201b8b8 <tcp_close_shutdown+0x44>
 201b8a8:	e0bffe17 	ldw	r2,-8(fp)
 201b8ac:	10800617 	ldw	r2,24(r2)
 201b8b0:	108001d8 	cmpnei	r2,r2,7
 201b8b4:	1000491e 	bne	r2,zero,201b9dc <tcp_close_shutdown+0x168>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
 201b8b8:	e0bffe17 	ldw	r2,-8(fp)
 201b8bc:	10801f17 	ldw	r2,124(r2)
 201b8c0:	1000051e 	bne	r2,zero,201b8d8 <tcp_close_shutdown+0x64>
 201b8c4:	e0bffe17 	ldw	r2,-8(fp)
 201b8c8:	10800c0b 	ldhu	r2,48(r2)
 201b8cc:	10bfffcc 	andi	r2,r2,65535
 201b8d0:	10880020 	cmpeqi	r2,r2,8192
 201b8d4:	1000411e 	bne	r2,zero,201b9dc <tcp_close_shutdown+0x168>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 201b8d8:	e0bffe17 	ldw	r2,-8(fp)
 201b8dc:	11001517 	ldw	r4,84(r2)
 201b8e0:	e0bffe17 	ldw	r2,-8(fp)
 201b8e4:	11400b17 	ldw	r5,44(r2)
 201b8e8:	e1bffe17 	ldw	r6,-8(fp)
 201b8ec:	e0bffe17 	ldw	r2,-8(fp)
 201b8f0:	11c00104 	addi	r7,r2,4
        pcb->local_port, pcb->remote_port);
 201b8f4:	e0bffe17 	ldw	r2,-8(fp)
 201b8f8:	1080078b 	ldhu	r2,30(r2)
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 201b8fc:	10bfffcc 	andi	r2,r2,65535
        pcb->local_port, pcb->remote_port);
 201b900:	e0fffe17 	ldw	r3,-8(fp)
 201b904:	18c0080b 	ldhu	r3,32(r3)
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 201b908:	18ffffcc 	andi	r3,r3,65535
 201b90c:	d8c00115 	stw	r3,4(sp)
 201b910:	d8800015 	stw	r2,0(sp)
 201b914:	20206e40 	call	20206e4 <tcp_rst>
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 201b918:	e13ffe17 	ldw	r4,-8(fp)
 201b91c:	201d9440 	call	201d944 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 201b920:	d0e7f717 	ldw	r3,-24612(gp)
 201b924:	e0bffe17 	ldw	r2,-8(fp)
 201b928:	1880041e 	bne	r3,r2,201b93c <tcp_close_shutdown+0xc8>
 201b92c:	d0a7f717 	ldw	r2,-24612(gp)
 201b930:	10800317 	ldw	r2,12(r2)
 201b934:	d0a7f715 	stw	r2,-24612(gp)
 201b938:	00001106 	br	201b980 <tcp_close_shutdown+0x10c>
 201b93c:	d0a7f717 	ldw	r2,-24612(gp)
 201b940:	d0a7fa15 	stw	r2,-24600(gp)
 201b944:	00000c06 	br	201b978 <tcp_close_shutdown+0x104>
 201b948:	d0a7fa17 	ldw	r2,-24600(gp)
 201b94c:	10c00317 	ldw	r3,12(r2)
 201b950:	e0bffe17 	ldw	r2,-8(fp)
 201b954:	1880051e 	bne	r3,r2,201b96c <tcp_close_shutdown+0xf8>
 201b958:	d0a7fa17 	ldw	r2,-24600(gp)
 201b95c:	e0fffe17 	ldw	r3,-8(fp)
 201b960:	18c00317 	ldw	r3,12(r3)
 201b964:	10c00315 	stw	r3,12(r2)
 201b968:	00000506 	br	201b980 <tcp_close_shutdown+0x10c>
 201b96c:	d0a7fa17 	ldw	r2,-24600(gp)
 201b970:	10800317 	ldw	r2,12(r2)
 201b974:	d0a7fa15 	stw	r2,-24600(gp)
 201b978:	d0a7fa17 	ldw	r2,-24600(gp)
 201b97c:	103ff21e 	bne	r2,zero,201b948 <__alt_mem_mem_0+0xfcffb948>
 201b980:	e0bffe17 	ldw	r2,-8(fp)
 201b984:	10000315 	stw	zero,12(r2)
 201b988:	00800044 	movi	r2,1
 201b98c:	d0a7f685 	stb	r2,-24614(gp)
      if (pcb->state == ESTABLISHED) {
 201b990:	e0bffe17 	ldw	r2,-8(fp)
 201b994:	10800617 	ldw	r2,24(r2)
 201b998:	10800118 	cmpnei	r2,r2,4
 201b99c:	10000a1e 	bne	r2,zero,201b9c8 <tcp_close_shutdown+0x154>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 201b9a0:	e0bffe17 	ldw	r2,-8(fp)
 201b9a4:	00c00284 	movi	r3,10
 201b9a8:	10c00615 	stw	r3,24(r2)
        TCP_REG(&tcp_tw_pcbs, pcb);
 201b9ac:	d0e7fc17 	ldw	r3,-24592(gp)
 201b9b0:	e0bffe17 	ldw	r2,-8(fp)
 201b9b4:	10c00315 	stw	r3,12(r2)
 201b9b8:	e0bffe17 	ldw	r2,-8(fp)
 201b9bc:	d0a7fc15 	stw	r2,-24592(gp)
 201b9c0:	202140c0 	call	202140c <tcp_timer_needed>
 201b9c4:	00000306 	br	201b9d4 <tcp_close_shutdown+0x160>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
 201b9c8:	e17ffe17 	ldw	r5,-8(fp)
 201b9cc:	01000084 	movi	r4,2
 201b9d0:	20344ac0 	call	20344ac <memp_free>
      }
      return ERR_OK;
 201b9d4:	0005883a 	mov	r2,zero
 201b9d8:	00007406 	br	201bbac <tcp_close_shutdown+0x338>
    }
  }

  switch (pcb->state) {
 201b9dc:	e0bffe17 	ldw	r2,-8(fp)
 201b9e0:	10800617 	ldw	r2,24(r2)
 201b9e4:	10c00228 	cmpgeui	r3,r2,8
 201b9e8:	1800611e 	bne	r3,zero,201bb70 <tcp_close_shutdown+0x2fc>
 201b9ec:	100690ba 	slli	r3,r2,2
 201b9f0:	008080b4 	movhi	r2,514
 201b9f4:	10ae8104 	addi	r2,r2,-17916
 201b9f8:	1885883a 	add	r2,r3,r2
 201b9fc:	10800017 	ldw	r2,0(r2)
 201ba00:	1000683a 	jmp	r2
 201ba04:	0201ba24 	muli	r8,zero,1768
 201ba08:	0201bab4 	movhi	r8,1770
 201ba0c:	0201bad8 	cmpnei	r8,zero,1771
 201ba10:	0201bb04 	movi	r8,1772
 201ba14:	0201bb28 	cmpgeui	r8,zero,1772
 201ba18:	0201bb70 	cmpltui	r8,zero,1773
 201ba1c:	0201bb70 	cmpltui	r8,zero,1773
 201ba20:	0201bb4c 	andi	r8,zero,1773
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
 201ba24:	e03ffd05 	stb	zero,-12(fp)
    if (pcb->local_port != 0) {
 201ba28:	e0bffe17 	ldw	r2,-8(fp)
 201ba2c:	1080078b 	ldhu	r2,30(r2)
 201ba30:	10bfffcc 	andi	r2,r2,65535
 201ba34:	10001a26 	beq	r2,zero,201baa0 <tcp_close_shutdown+0x22c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 201ba38:	d0e7fb17 	ldw	r3,-24596(gp)
 201ba3c:	e0bffe17 	ldw	r2,-8(fp)
 201ba40:	1880041e 	bne	r3,r2,201ba54 <tcp_close_shutdown+0x1e0>
 201ba44:	d0a7fb17 	ldw	r2,-24596(gp)
 201ba48:	10800317 	ldw	r2,12(r2)
 201ba4c:	d0a7fb15 	stw	r2,-24596(gp)
 201ba50:	00001106 	br	201ba98 <tcp_close_shutdown+0x224>
 201ba54:	d0a7fb17 	ldw	r2,-24596(gp)
 201ba58:	d0a7fa15 	stw	r2,-24600(gp)
 201ba5c:	00000c06 	br	201ba90 <tcp_close_shutdown+0x21c>
 201ba60:	d0a7fa17 	ldw	r2,-24600(gp)
 201ba64:	10c00317 	ldw	r3,12(r2)
 201ba68:	e0bffe17 	ldw	r2,-8(fp)
 201ba6c:	1880051e 	bne	r3,r2,201ba84 <tcp_close_shutdown+0x210>
 201ba70:	d0a7fa17 	ldw	r2,-24600(gp)
 201ba74:	e0fffe17 	ldw	r3,-8(fp)
 201ba78:	18c00317 	ldw	r3,12(r3)
 201ba7c:	10c00315 	stw	r3,12(r2)
 201ba80:	00000506 	br	201ba98 <tcp_close_shutdown+0x224>
 201ba84:	d0a7fa17 	ldw	r2,-24600(gp)
 201ba88:	10800317 	ldw	r2,12(r2)
 201ba8c:	d0a7fa15 	stw	r2,-24600(gp)
 201ba90:	d0a7fa17 	ldw	r2,-24600(gp)
 201ba94:	103ff21e 	bne	r2,zero,201ba60 <__alt_mem_mem_0+0xfcffba60>
 201ba98:	e0bffe17 	ldw	r2,-8(fp)
 201ba9c:	10000315 	stw	zero,12(r2)
    }
    memp_free(MEMP_TCP_PCB, pcb);
 201baa0:	e17ffe17 	ldw	r5,-8(fp)
 201baa4:	01000084 	movi	r4,2
 201baa8:	20344ac0 	call	20344ac <memp_free>
    pcb = NULL;
 201baac:	e03ffe15 	stw	zero,-8(fp)
    break;
 201bab0:	00003706 	br	201bb90 <tcp_close_shutdown+0x31c>
  case LISTEN:
    err = ERR_OK;
 201bab4:	e03ffd05 	stb	zero,-12(fp)
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 201bab8:	e17ffe17 	ldw	r5,-8(fp)
 201babc:	d127f904 	addi	r4,gp,-24604
 201bac0:	201dab40 	call	201dab4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 201bac4:	e17ffe17 	ldw	r5,-8(fp)
 201bac8:	010000c4 	movi	r4,3
 201bacc:	20344ac0 	call	20344ac <memp_free>
    pcb = NULL;
 201bad0:	e03ffe15 	stw	zero,-8(fp)
    break;
 201bad4:	00002e06 	br	201bb90 <tcp_close_shutdown+0x31c>
  case SYN_SENT:
    err = ERR_OK;
 201bad8:	e03ffd05 	stb	zero,-12(fp)
    TCP_PCB_REMOVE_ACTIVE(pcb);
 201badc:	e17ffe17 	ldw	r5,-8(fp)
 201bae0:	d127f704 	addi	r4,gp,-24612
 201bae4:	201dab40 	call	201dab4 <tcp_pcb_remove>
 201bae8:	00800044 	movi	r2,1
 201baec:	d0a7f685 	stb	r2,-24614(gp)
    memp_free(MEMP_TCP_PCB, pcb);
 201baf0:	e17ffe17 	ldw	r5,-8(fp)
 201baf4:	01000084 	movi	r4,2
 201baf8:	20344ac0 	call	20344ac <memp_free>
    pcb = NULL;
 201bafc:	e03ffe15 	stw	zero,-8(fp)
    snmp_inc_tcpattemptfails();
    break;
 201bb00:	00002306 	br	201bb90 <tcp_close_shutdown+0x31c>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 201bb04:	e13ffe17 	ldw	r4,-8(fp)
 201bb08:	201e0a00 	call	201e0a0 <tcp_send_fin>
 201bb0c:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
 201bb10:	e0bffd07 	ldb	r2,-12(fp)
 201bb14:	1000191e 	bne	r2,zero,201bb7c <tcp_close_shutdown+0x308>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
 201bb18:	e0bffe17 	ldw	r2,-8(fp)
 201bb1c:	00c00144 	movi	r3,5
 201bb20:	10c00615 	stw	r3,24(r2)
    }
    break;
 201bb24:	00001506 	br	201bb7c <tcp_close_shutdown+0x308>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 201bb28:	e13ffe17 	ldw	r4,-8(fp)
 201bb2c:	201e0a00 	call	201e0a0 <tcp_send_fin>
 201bb30:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
 201bb34:	e0bffd07 	ldb	r2,-12(fp)
 201bb38:	1000121e 	bne	r2,zero,201bb84 <tcp_close_shutdown+0x310>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
 201bb3c:	e0bffe17 	ldw	r2,-8(fp)
 201bb40:	00c00144 	movi	r3,5
 201bb44:	10c00615 	stw	r3,24(r2)
    }
    break;
 201bb48:	00000e06 	br	201bb84 <tcp_close_shutdown+0x310>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 201bb4c:	e13ffe17 	ldw	r4,-8(fp)
 201bb50:	201e0a00 	call	201e0a0 <tcp_send_fin>
 201bb54:	e0bffd05 	stb	r2,-12(fp)
    if (err == ERR_OK) {
 201bb58:	e0bffd07 	ldb	r2,-12(fp)
 201bb5c:	10000b1e 	bne	r2,zero,201bb8c <tcp_close_shutdown+0x318>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
 201bb60:	e0bffe17 	ldw	r2,-8(fp)
 201bb64:	00c00244 	movi	r3,9
 201bb68:	10c00615 	stw	r3,24(r2)
    }
    break;
 201bb6c:	00000706 	br	201bb8c <tcp_close_shutdown+0x318>
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
 201bb70:	e03ffd05 	stb	zero,-12(fp)
    pcb = NULL;
 201bb74:	e03ffe15 	stw	zero,-8(fp)
    break;
 201bb78:	00000506 	br	201bb90 <tcp_close_shutdown+0x31c>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
    }
    break;
 201bb7c:	0001883a 	nop
 201bb80:	00000306 	br	201bb90 <tcp_close_shutdown+0x31c>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
    }
    break;
 201bb84:	0001883a 	nop
 201bb88:	00000106 	br	201bb90 <tcp_close_shutdown+0x31c>
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
    }
    break;
 201bb8c:	0001883a 	nop
    err = ERR_OK;
    pcb = NULL;
    break;
  }

  if (pcb != NULL && err == ERR_OK) {
 201bb90:	e0bffe17 	ldw	r2,-8(fp)
 201bb94:	10000426 	beq	r2,zero,201bba8 <tcp_close_shutdown+0x334>
 201bb98:	e0bffd07 	ldb	r2,-12(fp)
 201bb9c:	1000021e 	bne	r2,zero,201bba8 <tcp_close_shutdown+0x334>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
 201bba0:	e13ffe17 	ldw	r4,-8(fp)
 201bba4:	201f6380 	call	201f638 <tcp_output>
  }
  return err;
 201bba8:	e0bffd03 	ldbu	r2,-12(fp)
}
 201bbac:	e037883a 	mov	sp,fp
 201bbb0:	dfc00117 	ldw	ra,4(sp)
 201bbb4:	df000017 	ldw	fp,0(sp)
 201bbb8:	dec00204 	addi	sp,sp,8
 201bbbc:	f800283a 	ret

0201bbc0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 201bbc0:	defffd04 	addi	sp,sp,-12
 201bbc4:	dfc00215 	stw	ra,8(sp)
 201bbc8:	df000115 	stw	fp,4(sp)
 201bbcc:	df000104 	addi	fp,sp,4
 201bbd0:	e13fff15 	stw	r4,-4(fp)
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
 201bbd4:	e0bfff17 	ldw	r2,-4(fp)
 201bbd8:	10800617 	ldw	r2,24(r2)
 201bbdc:	10800060 	cmpeqi	r2,r2,1
 201bbe0:	1000061e 	bne	r2,zero,201bbfc <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 201bbe4:	e0bfff17 	ldw	r2,-4(fp)
 201bbe8:	10800883 	ldbu	r2,34(r2)
 201bbec:	10800414 	ori	r2,r2,16
 201bbf0:	1007883a 	mov	r3,r2
 201bbf4:	e0bfff17 	ldw	r2,-4(fp)
 201bbf8:	10c00885 	stb	r3,34(r2)
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 201bbfc:	01400044 	movi	r5,1
 201bc00:	e13fff17 	ldw	r4,-4(fp)
 201bc04:	201b8740 	call	201b874 <tcp_close_shutdown>
}
 201bc08:	e037883a 	mov	sp,fp
 201bc0c:	dfc00117 	ldw	ra,4(sp)
 201bc10:	df000017 	ldw	fp,0(sp)
 201bc14:	dec00204 	addi	sp,sp,8
 201bc18:	f800283a 	ret

0201bc1c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 201bc1c:	defffb04 	addi	sp,sp,-20
 201bc20:	dfc00415 	stw	ra,16(sp)
 201bc24:	df000315 	stw	fp,12(sp)
 201bc28:	df000304 	addi	fp,sp,12
 201bc2c:	e13ffd15 	stw	r4,-12(fp)
 201bc30:	e17ffe15 	stw	r5,-8(fp)
 201bc34:	e1bfff15 	stw	r6,-4(fp)
  if (pcb->state == LISTEN) {
 201bc38:	e0bffd17 	ldw	r2,-12(fp)
 201bc3c:	10800617 	ldw	r2,24(r2)
 201bc40:	10800058 	cmpnei	r2,r2,1
 201bc44:	1000021e 	bne	r2,zero,201bc50 <tcp_shutdown+0x34>
    return ERR_CONN;
 201bc48:	00bffcc4 	movi	r2,-13
 201bc4c:	00002a06 	br	201bcf8 <tcp_shutdown+0xdc>
  }
  if (shut_rx) {
 201bc50:	e0bffe17 	ldw	r2,-8(fp)
 201bc54:	10001526 	beq	r2,zero,201bcac <tcp_shutdown+0x90>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 201bc58:	e0bffd17 	ldw	r2,-12(fp)
 201bc5c:	10800883 	ldbu	r2,34(r2)
 201bc60:	10800414 	ori	r2,r2,16
 201bc64:	1007883a 	mov	r3,r2
 201bc68:	e0bffd17 	ldw	r2,-12(fp)
 201bc6c:	10c00885 	stb	r3,34(r2)
    if (shut_tx) {
 201bc70:	e0bfff17 	ldw	r2,-4(fp)
 201bc74:	10000426 	beq	r2,zero,201bc88 <tcp_shutdown+0x6c>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 201bc78:	01400044 	movi	r5,1
 201bc7c:	e13ffd17 	ldw	r4,-12(fp)
 201bc80:	201b8740 	call	201b874 <tcp_close_shutdown>
 201bc84:	00001c06 	br	201bcf8 <tcp_shutdown+0xdc>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 201bc88:	e0bffd17 	ldw	r2,-12(fp)
 201bc8c:	10801f17 	ldw	r2,124(r2)
 201bc90:	10000626 	beq	r2,zero,201bcac <tcp_shutdown+0x90>
      pbuf_free(pcb->refused_data);
 201bc94:	e0bffd17 	ldw	r2,-12(fp)
 201bc98:	10801f17 	ldw	r2,124(r2)
 201bc9c:	1009883a 	mov	r4,r2
 201bca0:	201aa200 	call	201aa20 <pbuf_free>
      pcb->refused_data = NULL;
 201bca4:	e0bffd17 	ldw	r2,-12(fp)
 201bca8:	10001f15 	stw	zero,124(r2)
    }
  }
  if (shut_tx) {
 201bcac:	e0bfff17 	ldw	r2,-4(fp)
 201bcb0:	10001026 	beq	r2,zero,201bcf4 <tcp_shutdown+0xd8>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 201bcb4:	e0bffd17 	ldw	r2,-12(fp)
 201bcb8:	10800617 	ldw	r2,24(r2)
 201bcbc:	10c000f0 	cmpltui	r3,r2,3
 201bcc0:	18000a1e 	bne	r3,zero,201bcec <tcp_shutdown+0xd0>
 201bcc4:	10c00170 	cmpltui	r3,r2,5
 201bcc8:	1800021e 	bne	r3,zero,201bcd4 <tcp_shutdown+0xb8>
 201bccc:	108001e0 	cmpeqi	r2,r2,7
 201bcd0:	10000626 	beq	r2,zero,201bcec <tcp_shutdown+0xd0>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, shut_rx);
 201bcd4:	e0bffe17 	ldw	r2,-8(fp)
 201bcd8:	10803fcc 	andi	r2,r2,255
 201bcdc:	100b883a 	mov	r5,r2
 201bce0:	e13ffd17 	ldw	r4,-12(fp)
 201bce4:	201b8740 	call	201b874 <tcp_close_shutdown>
 201bce8:	00000306 	br	201bcf8 <tcp_shutdown+0xdc>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 201bcec:	00bffcc4 	movi	r2,-13
 201bcf0:	00000106 	br	201bcf8 <tcp_shutdown+0xdc>
    }
  }
  return ERR_OK;
 201bcf4:	0005883a 	mov	r2,zero
}
 201bcf8:	e037883a 	mov	sp,fp
 201bcfc:	dfc00117 	ldw	ra,4(sp)
 201bd00:	df000017 	ldw	fp,0(sp)
 201bd04:	dec00204 	addi	sp,sp,8
 201bd08:	f800283a 	ret

0201bd0c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 201bd0c:	defff604 	addi	sp,sp,-40
 201bd10:	dfc00915 	stw	ra,36(sp)
 201bd14:	df000815 	stw	fp,32(sp)
 201bd18:	df000804 	addi	fp,sp,32
 201bd1c:	e13ffe15 	stw	r4,-8(fp)
 201bd20:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 201bd24:	e0bffe17 	ldw	r2,-8(fp)
 201bd28:	10800617 	ldw	r2,24(r2)
 201bd2c:	10800298 	cmpnei	r2,r2,10
 201bd30:	1000071e 	bne	r2,zero,201bd50 <tcp_abandon+0x44>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 201bd34:	e17ffe17 	ldw	r5,-8(fp)
 201bd38:	d127fc04 	addi	r4,gp,-24592
 201bd3c:	201dab40 	call	201dab4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 201bd40:	e17ffe17 	ldw	r5,-8(fp)
 201bd44:	01000084 	movi	r4,2
 201bd48:	20344ac0 	call	20344ac <memp_free>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
 201bd4c:	00004106 	br	201be54 <tcp_abandon+0x148>
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
  } else {
    seqno = pcb->snd_nxt;
 201bd50:	e0bffe17 	ldw	r2,-8(fp)
 201bd54:	10801517 	ldw	r2,84(r2)
 201bd58:	e0bffa15 	stw	r2,-24(fp)
    ackno = pcb->rcv_nxt;
 201bd5c:	e0bffe17 	ldw	r2,-8(fp)
 201bd60:	10800b17 	ldw	r2,44(r2)
 201bd64:	e0bffb15 	stw	r2,-20(fp)
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 201bd68:	e0bffe17 	ldw	r2,-8(fp)
 201bd6c:	10802417 	ldw	r2,144(r2)
 201bd70:	e0bffc15 	stw	r2,-16(fp)
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 201bd74:	e0bffe17 	ldw	r2,-8(fp)
 201bd78:	10800417 	ldw	r2,16(r2)
 201bd7c:	e0bffd15 	stw	r2,-12(fp)
    TCP_PCB_REMOVE_ACTIVE(pcb);
 201bd80:	e17ffe17 	ldw	r5,-8(fp)
 201bd84:	d127f704 	addi	r4,gp,-24612
 201bd88:	201dab40 	call	201dab4 <tcp_pcb_remove>
 201bd8c:	00800044 	movi	r2,1
 201bd90:	d0a7f685 	stb	r2,-24614(gp)
    if (pcb->unacked != NULL) {
 201bd94:	e0bffe17 	ldw	r2,-8(fp)
 201bd98:	10801d17 	ldw	r2,116(r2)
 201bd9c:	10000426 	beq	r2,zero,201bdb0 <tcp_abandon+0xa4>
      tcp_segs_free(pcb->unacked);
 201bda0:	e0bffe17 	ldw	r2,-8(fp)
 201bda4:	10801d17 	ldw	r2,116(r2)
 201bda8:	1009883a 	mov	r4,r2
 201bdac:	201d2940 	call	201d294 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 201bdb0:	e0bffe17 	ldw	r2,-8(fp)
 201bdb4:	10801c17 	ldw	r2,112(r2)
 201bdb8:	10000426 	beq	r2,zero,201bdcc <tcp_abandon+0xc0>
      tcp_segs_free(pcb->unsent);
 201bdbc:	e0bffe17 	ldw	r2,-8(fp)
 201bdc0:	10801c17 	ldw	r2,112(r2)
 201bdc4:	1009883a 	mov	r4,r2
 201bdc8:	201d2940 	call	201d294 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL) {
 201bdcc:	e0bffe17 	ldw	r2,-8(fp)
 201bdd0:	10801e17 	ldw	r2,120(r2)
 201bdd4:	10000426 	beq	r2,zero,201bde8 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->ooseq);
 201bdd8:	e0bffe17 	ldw	r2,-8(fp)
 201bddc:	10801e17 	ldw	r2,120(r2)
 201bde0:	1009883a 	mov	r4,r2
 201bde4:	201d2940 	call	201d294 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    if (reset) {
 201bde8:	e0bfff17 	ldw	r2,-4(fp)
 201bdec:	10001026 	beq	r2,zero,201be30 <tcp_abandon+0x124>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
 201bdf0:	e13ffe17 	ldw	r4,-8(fp)
 201bdf4:	e0bffe17 	ldw	r2,-8(fp)
 201bdf8:	11400104 	addi	r5,r2,4
 201bdfc:	e0bffe17 	ldw	r2,-8(fp)
 201be00:	1080078b 	ldhu	r2,30(r2)
 201be04:	10bfffcc 	andi	r2,r2,65535
 201be08:	e0fffe17 	ldw	r3,-8(fp)
 201be0c:	18c0080b 	ldhu	r3,32(r3)
 201be10:	18ffffcc 	andi	r3,r3,65535
 201be14:	d8c00115 	stw	r3,4(sp)
 201be18:	d8800015 	stw	r2,0(sp)
 201be1c:	280f883a 	mov	r7,r5
 201be20:	200d883a 	mov	r6,r4
 201be24:	e17ffb17 	ldw	r5,-20(fp)
 201be28:	e13ffa17 	ldw	r4,-24(fp)
 201be2c:	20206e40 	call	20206e4 <tcp_rst>
    }
    memp_free(MEMP_TCP_PCB, pcb);
 201be30:	e17ffe17 	ldw	r5,-8(fp)
 201be34:	01000084 	movi	r4,2
 201be38:	20344ac0 	call	20344ac <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 201be3c:	e0bffc17 	ldw	r2,-16(fp)
 201be40:	10000426 	beq	r2,zero,201be54 <tcp_abandon+0x148>
 201be44:	e0bffc17 	ldw	r2,-16(fp)
 201be48:	017ffd84 	movi	r5,-10
 201be4c:	e13ffd17 	ldw	r4,-12(fp)
 201be50:	103ee83a 	callr	r2
  }
}
 201be54:	0001883a 	nop
 201be58:	e037883a 	mov	sp,fp
 201be5c:	dfc00117 	ldw	ra,4(sp)
 201be60:	df000017 	ldw	fp,0(sp)
 201be64:	dec00204 	addi	sp,sp,8
 201be68:	f800283a 	ret

0201be6c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 201be6c:	defffd04 	addi	sp,sp,-12
 201be70:	dfc00215 	stw	ra,8(sp)
 201be74:	df000115 	stw	fp,4(sp)
 201be78:	df000104 	addi	fp,sp,4
 201be7c:	e13fff15 	stw	r4,-4(fp)
  tcp_abandon(pcb, 1);
 201be80:	01400044 	movi	r5,1
 201be84:	e13fff17 	ldw	r4,-4(fp)
 201be88:	201bd0c0 	call	201bd0c <tcp_abandon>
}
 201be8c:	0001883a 	nop
 201be90:	e037883a 	mov	sp,fp
 201be94:	dfc00117 	ldw	ra,4(sp)
 201be98:	df000017 	ldw	fp,0(sp)
 201be9c:	dec00204 	addi	sp,sp,8
 201bea0:	f800283a 	ret

0201bea4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 201bea4:	defff804 	addi	sp,sp,-32
 201bea8:	dfc00715 	stw	ra,28(sp)
 201beac:	df000615 	stw	fp,24(sp)
 201beb0:	df000604 	addi	fp,sp,24
 201beb4:	e13ffd15 	stw	r4,-12(fp)
 201beb8:	e17ffe15 	stw	r5,-8(fp)
 201bebc:	3005883a 	mov	r2,r6
 201bec0:	e0bfff0d 	sth	r2,-4(fp)
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 201bec4:	00800104 	movi	r2,4
 201bec8:	e0bffb15 	stw	r2,-20(fp)
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 201becc:	e0bffd17 	ldw	r2,-12(fp)
 201bed0:	10800617 	ldw	r2,24(r2)
 201bed4:	10000926 	beq	r2,zero,201befc <tcp_bind+0x58>
 201bed8:	01c08134 	movhi	r7,516
 201bedc:	39c57304 	addi	r7,r7,5580
 201bee0:	01806dc4 	movi	r6,439
 201bee4:	01408134 	movhi	r5,516
 201bee8:	29457804 	addi	r5,r5,5600
 201beec:	01008134 	movhi	r4,516
 201bef0:	21058204 	addi	r4,r4,5640
 201bef4:	20009e40 	call	20009e4 <printf>
 201bef8:	003fff06 	br	201bef8 <__alt_mem_mem_0+0xfcffbef8>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 201befc:	e0bffd17 	ldw	r2,-12(fp)
 201bf00:	10800203 	ldbu	r2,8(r2)
 201bf04:	10803fcc 	andi	r2,r2,255
 201bf08:	1080010c 	andi	r2,r2,4
 201bf0c:	10000226 	beq	r2,zero,201bf18 <tcp_bind+0x74>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 201bf10:	008000c4 	movi	r2,3
 201bf14:	e0bffb15 	stw	r2,-20(fp)
  }
#endif /* SO_REUSE */

  if (port == 0) {
 201bf18:	e0bfff0b 	ldhu	r2,-4(fp)
 201bf1c:	1000061e 	bne	r2,zero,201bf38 <tcp_bind+0x94>
    port = tcp_new_port();
 201bf20:	201c4a40 	call	201c4a4 <tcp_new_port>
 201bf24:	e0bfff0d 	sth	r2,-4(fp)
    if (port == 0) {
 201bf28:	e0bfff0b 	ldhu	r2,-4(fp)
 201bf2c:	1000021e 	bne	r2,zero,201bf38 <tcp_bind+0x94>
      return ERR_BUF;
 201bf30:	00bfff84 	movi	r2,-2
 201bf34:	00004a06 	br	201c060 <tcp_bind+0x1bc>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
 201bf38:	e03ffa15 	stw	zero,-24(fp)
 201bf3c:	00003206 	br	201c008 <tcp_bind+0x164>
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 201bf40:	00808134 	movhi	r2,516
 201bf44:	10856f04 	addi	r2,r2,5564
 201bf48:	e0fffa17 	ldw	r3,-24(fp)
 201bf4c:	18c7883a 	add	r3,r3,r3
 201bf50:	18c7883a 	add	r3,r3,r3
 201bf54:	10c5883a 	add	r2,r2,r3
 201bf58:	10800017 	ldw	r2,0(r2)
 201bf5c:	10800017 	ldw	r2,0(r2)
 201bf60:	e0bffc15 	stw	r2,-16(fp)
 201bf64:	00002306 	br	201bff4 <tcp_bind+0x150>
      if (cpcb->local_port == port) {
 201bf68:	e0bffc17 	ldw	r2,-16(fp)
 201bf6c:	1080078b 	ldhu	r2,30(r2)
 201bf70:	10ffffcc 	andi	r3,r2,65535
 201bf74:	e0bfff0b 	ldhu	r2,-4(fp)
 201bf78:	18801b1e 	bne	r3,r2,201bfe8 <tcp_bind+0x144>
#if SO_REUSE
        /* Omit checking for the same port if both pcbs have REUSEADDR set.
           For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
           tcp_connect. */
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 201bf7c:	e0bffd17 	ldw	r2,-12(fp)
 201bf80:	10800203 	ldbu	r2,8(r2)
 201bf84:	10803fcc 	andi	r2,r2,255
 201bf88:	1080010c 	andi	r2,r2,4
 201bf8c:	10000526 	beq	r2,zero,201bfa4 <tcp_bind+0x100>
            !ip_get_option(cpcb, SOF_REUSEADDR))
 201bf90:	e0bffc17 	ldw	r2,-16(fp)
 201bf94:	10800203 	ldbu	r2,8(r2)
 201bf98:	10803fcc 	andi	r2,r2,255
 201bf9c:	1080010c 	andi	r2,r2,4
      if (cpcb->local_port == port) {
#if SO_REUSE
        /* Omit checking for the same port if both pcbs have REUSEADDR set.
           For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
           tcp_connect. */
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 201bfa0:	1000111e 	bne	r2,zero,201bfe8 <tcp_bind+0x144>
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
 201bfa4:	e0bffc17 	ldw	r2,-16(fp)
 201bfa8:	10000d26 	beq	r2,zero,201bfe0 <tcp_bind+0x13c>
 201bfac:	e0bffc17 	ldw	r2,-16(fp)
 201bfb0:	10800017 	ldw	r2,0(r2)
 201bfb4:	10000a26 	beq	r2,zero,201bfe0 <tcp_bind+0x13c>
 201bfb8:	e0bffe17 	ldw	r2,-8(fp)
 201bfbc:	10000826 	beq	r2,zero,201bfe0 <tcp_bind+0x13c>
              ip_addr_isany(ipaddr) ||
 201bfc0:	e0bffe17 	ldw	r2,-8(fp)
 201bfc4:	10800017 	ldw	r2,0(r2)
 201bfc8:	10000526 	beq	r2,zero,201bfe0 <tcp_bind+0x13c>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
 201bfcc:	e0bffc17 	ldw	r2,-16(fp)
 201bfd0:	10c00017 	ldw	r3,0(r2)
 201bfd4:	e0bffe17 	ldw	r2,-8(fp)
 201bfd8:	10800017 	ldw	r2,0(r2)
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
              ip_addr_isany(ipaddr) ||
 201bfdc:	1880021e 	bne	r3,r2,201bfe8 <tcp_bind+0x144>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
            return ERR_USE;
 201bfe0:	00bffe04 	movi	r2,-8
 201bfe4:	00001e06 	br	201c060 <tcp_bind+0x1bc>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 201bfe8:	e0bffc17 	ldw	r2,-16(fp)
 201bfec:	10800317 	ldw	r2,12(r2)
 201bff0:	e0bffc15 	stw	r2,-16(fp)
 201bff4:	e0bffc17 	ldw	r2,-16(fp)
 201bff8:	103fdb1e 	bne	r2,zero,201bf68 <__alt_mem_mem_0+0xfcffbf68>
      return ERR_BUF;
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
 201bffc:	e0bffa17 	ldw	r2,-24(fp)
 201c000:	10800044 	addi	r2,r2,1
 201c004:	e0bffa15 	stw	r2,-24(fp)
 201c008:	e0fffa17 	ldw	r3,-24(fp)
 201c00c:	e0bffb17 	ldw	r2,-20(fp)
 201c010:	18bfcb16 	blt	r3,r2,201bf40 <__alt_mem_mem_0+0xfcffbf40>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 201c014:	e0bffe17 	ldw	r2,-8(fp)
 201c018:	10000726 	beq	r2,zero,201c038 <tcp_bind+0x194>
 201c01c:	e0bffe17 	ldw	r2,-8(fp)
 201c020:	10800017 	ldw	r2,0(r2)
 201c024:	10000426 	beq	r2,zero,201c038 <tcp_bind+0x194>
    pcb->local_ip = *ipaddr;
 201c028:	e0bffd17 	ldw	r2,-12(fp)
 201c02c:	e0fffe17 	ldw	r3,-8(fp)
 201c030:	18c00017 	ldw	r3,0(r3)
 201c034:	10c00015 	stw	r3,0(r2)
  }
  pcb->local_port = port;
 201c038:	e0bffd17 	ldw	r2,-12(fp)
 201c03c:	e0ffff0b 	ldhu	r3,-4(fp)
 201c040:	10c0078d 	sth	r3,30(r2)
  TCP_REG(&tcp_bound_pcbs, pcb);
 201c044:	d0e7fb17 	ldw	r3,-24596(gp)
 201c048:	e0bffd17 	ldw	r2,-12(fp)
 201c04c:	10c00315 	stw	r3,12(r2)
 201c050:	e0bffd17 	ldw	r2,-12(fp)
 201c054:	d0a7fb15 	stw	r2,-24596(gp)
 201c058:	202140c0 	call	202140c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 201c05c:	0005883a 	mov	r2,zero
}
 201c060:	e037883a 	mov	sp,fp
 201c064:	dfc00117 	ldw	ra,4(sp)
 201c068:	df000017 	ldw	fp,0(sp)
 201c06c:	dec00204 	addi	sp,sp,8
 201c070:	f800283a 	ret

0201c074 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 201c074:	defffc04 	addi	sp,sp,-16
 201c078:	df000315 	stw	fp,12(sp)
 201c07c:	df000304 	addi	fp,sp,12
 201c080:	e13ffd15 	stw	r4,-12(fp)
 201c084:	e17ffe15 	stw	r5,-8(fp)
 201c088:	3005883a 	mov	r2,r6
 201c08c:	e0bfff05 	stb	r2,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
 201c090:	00bffd84 	movi	r2,-10
}
 201c094:	e037883a 	mov	sp,fp
 201c098:	df000017 	ldw	fp,0(sp)
 201c09c:	dec00104 	addi	sp,sp,4
 201c0a0:	f800283a 	ret

0201c0a4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 201c0a4:	defffb04 	addi	sp,sp,-20
 201c0a8:	dfc00415 	stw	ra,16(sp)
 201c0ac:	df000315 	stw	fp,12(sp)
 201c0b0:	df000304 	addi	fp,sp,12
 201c0b4:	e13ffe15 	stw	r4,-8(fp)
 201c0b8:	2805883a 	mov	r2,r5
 201c0bc:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 201c0c0:	e0bffe17 	ldw	r2,-8(fp)
 201c0c4:	10800617 	ldw	r2,24(r2)
 201c0c8:	10000926 	beq	r2,zero,201c0f0 <tcp_listen_with_backlog+0x4c>
 201c0cc:	01c08134 	movhi	r7,516
 201c0d0:	39c57304 	addi	r7,r7,5580
 201c0d4:	01808304 	movi	r6,524
 201c0d8:	01408134 	movhi	r5,516
 201c0dc:	29458e04 	addi	r5,r5,5688
 201c0e0:	01008134 	movhi	r4,516
 201c0e4:	21058204 	addi	r4,r4,5640
 201c0e8:	20009e40 	call	20009e4 <printf>
 201c0ec:	003fff06 	br	201c0ec <__alt_mem_mem_0+0xfcffc0ec>

  /* already listening? */
  if (pcb->state == LISTEN) {
 201c0f0:	e0bffe17 	ldw	r2,-8(fp)
 201c0f4:	10800617 	ldw	r2,24(r2)
 201c0f8:	10800058 	cmpnei	r2,r2,1
 201c0fc:	1000021e 	bne	r2,zero,201c108 <tcp_listen_with_backlog+0x64>
    return pcb;
 201c100:	e0bffe17 	ldw	r2,-8(fp)
 201c104:	00007c06 	br	201c2f8 <tcp_listen_with_backlog+0x254>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 201c108:	e0bffe17 	ldw	r2,-8(fp)
 201c10c:	10800203 	ldbu	r2,8(r2)
 201c110:	10803fcc 	andi	r2,r2,255
 201c114:	1080010c 	andi	r2,r2,4
 201c118:	10001626 	beq	r2,zero,201c174 <tcp_listen_with_backlog+0xd0>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 201c11c:	d0a7f917 	ldw	r2,-24604(gp)
 201c120:	e0bffd15 	stw	r2,-12(fp)
 201c124:	00001106 	br	201c16c <tcp_listen_with_backlog+0xc8>
      if (lpcb->local_port == pcb->local_port) {
 201c128:	e0bffd17 	ldw	r2,-12(fp)
 201c12c:	10c0078b 	ldhu	r3,30(r2)
 201c130:	e0bffe17 	ldw	r2,-8(fp)
 201c134:	1080078b 	ldhu	r2,30(r2)
 201c138:	18ffffcc 	andi	r3,r3,65535
 201c13c:	10bfffcc 	andi	r2,r2,65535
 201c140:	1880071e 	bne	r3,r2,201c160 <tcp_listen_with_backlog+0xbc>
        if (ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
 201c144:	e0bffd17 	ldw	r2,-12(fp)
 201c148:	10c00017 	ldw	r3,0(r2)
 201c14c:	e0bffe17 	ldw	r2,-8(fp)
 201c150:	10800017 	ldw	r2,0(r2)
 201c154:	1880021e 	bne	r3,r2,201c160 <tcp_listen_with_backlog+0xbc>
          /* this address/port is already used */
          return NULL;
 201c158:	0005883a 	mov	r2,zero
 201c15c:	00006606 	br	201c2f8 <tcp_listen_with_backlog+0x254>
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 201c160:	e0bffd17 	ldw	r2,-12(fp)
 201c164:	10800317 	ldw	r2,12(r2)
 201c168:	e0bffd15 	stw	r2,-12(fp)
 201c16c:	e0bffd17 	ldw	r2,-12(fp)
 201c170:	103fed1e 	bne	r2,zero,201c128 <__alt_mem_mem_0+0xfcffc128>
        }
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 201c174:	010000c4 	movi	r4,3
 201c178:	20342e00 	call	20342e0 <memp_malloc>
 201c17c:	e0bffd15 	stw	r2,-12(fp)
  if (lpcb == NULL) {
 201c180:	e0bffd17 	ldw	r2,-12(fp)
 201c184:	1000021e 	bne	r2,zero,201c190 <tcp_listen_with_backlog+0xec>
    return NULL;
 201c188:	0005883a 	mov	r2,zero
 201c18c:	00005a06 	br	201c2f8 <tcp_listen_with_backlog+0x254>
  }
  lpcb->callback_arg = pcb->callback_arg;
 201c190:	e0bffe17 	ldw	r2,-8(fp)
 201c194:	10c00417 	ldw	r3,16(r2)
 201c198:	e0bffd17 	ldw	r2,-12(fp)
 201c19c:	10c00415 	stw	r3,16(r2)
  lpcb->local_port = pcb->local_port;
 201c1a0:	e0bffe17 	ldw	r2,-8(fp)
 201c1a4:	10c0078b 	ldhu	r3,30(r2)
 201c1a8:	e0bffd17 	ldw	r2,-12(fp)
 201c1ac:	10c0078d 	sth	r3,30(r2)
  lpcb->state = LISTEN;
 201c1b0:	e0bffd17 	ldw	r2,-12(fp)
 201c1b4:	00c00044 	movi	r3,1
 201c1b8:	10c00615 	stw	r3,24(r2)
  lpcb->prio = pcb->prio;
 201c1bc:	e0bffe17 	ldw	r2,-8(fp)
 201c1c0:	10c00703 	ldbu	r3,28(r2)
 201c1c4:	e0bffd17 	ldw	r2,-12(fp)
 201c1c8:	10c00705 	stb	r3,28(r2)
  lpcb->so_options = pcb->so_options;
 201c1cc:	e0bffe17 	ldw	r2,-8(fp)
 201c1d0:	10c00203 	ldbu	r3,8(r2)
 201c1d4:	e0bffd17 	ldw	r2,-12(fp)
 201c1d8:	10c00205 	stb	r3,8(r2)
  ip_set_option(lpcb, SOF_ACCEPTCONN);
 201c1dc:	e0bffd17 	ldw	r2,-12(fp)
 201c1e0:	10800203 	ldbu	r2,8(r2)
 201c1e4:	10800094 	ori	r2,r2,2
 201c1e8:	1007883a 	mov	r3,r2
 201c1ec:	e0bffd17 	ldw	r2,-12(fp)
 201c1f0:	10c00205 	stb	r3,8(r2)
  lpcb->ttl = pcb->ttl;
 201c1f4:	e0bffe17 	ldw	r2,-8(fp)
 201c1f8:	10c00283 	ldbu	r3,10(r2)
 201c1fc:	e0bffd17 	ldw	r2,-12(fp)
 201c200:	10c00285 	stb	r3,10(r2)
  lpcb->tos = pcb->tos;
 201c204:	e0bffe17 	ldw	r2,-8(fp)
 201c208:	10c00243 	ldbu	r3,9(r2)
 201c20c:	e0bffd17 	ldw	r2,-12(fp)
 201c210:	10c00245 	stb	r3,9(r2)
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 201c214:	e0bffe17 	ldw	r2,-8(fp)
 201c218:	10c00017 	ldw	r3,0(r2)
 201c21c:	e0bffd17 	ldw	r2,-12(fp)
 201c220:	10c00015 	stw	r3,0(r2)
  if (pcb->local_port != 0) {
 201c224:	e0bffe17 	ldw	r2,-8(fp)
 201c228:	1080078b 	ldhu	r2,30(r2)
 201c22c:	10bfffcc 	andi	r2,r2,65535
 201c230:	10001a26 	beq	r2,zero,201c29c <tcp_listen_with_backlog+0x1f8>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 201c234:	d0e7fb17 	ldw	r3,-24596(gp)
 201c238:	e0bffe17 	ldw	r2,-8(fp)
 201c23c:	1880041e 	bne	r3,r2,201c250 <tcp_listen_with_backlog+0x1ac>
 201c240:	d0a7fb17 	ldw	r2,-24596(gp)
 201c244:	10800317 	ldw	r2,12(r2)
 201c248:	d0a7fb15 	stw	r2,-24596(gp)
 201c24c:	00001106 	br	201c294 <tcp_listen_with_backlog+0x1f0>
 201c250:	d0a7fb17 	ldw	r2,-24596(gp)
 201c254:	d0a7fa15 	stw	r2,-24600(gp)
 201c258:	00000c06 	br	201c28c <tcp_listen_with_backlog+0x1e8>
 201c25c:	d0a7fa17 	ldw	r2,-24600(gp)
 201c260:	10c00317 	ldw	r3,12(r2)
 201c264:	e0bffe17 	ldw	r2,-8(fp)
 201c268:	1880051e 	bne	r3,r2,201c280 <tcp_listen_with_backlog+0x1dc>
 201c26c:	d0a7fa17 	ldw	r2,-24600(gp)
 201c270:	e0fffe17 	ldw	r3,-8(fp)
 201c274:	18c00317 	ldw	r3,12(r3)
 201c278:	10c00315 	stw	r3,12(r2)
 201c27c:	00000506 	br	201c294 <tcp_listen_with_backlog+0x1f0>
 201c280:	d0a7fa17 	ldw	r2,-24600(gp)
 201c284:	10800317 	ldw	r2,12(r2)
 201c288:	d0a7fa15 	stw	r2,-24600(gp)
 201c28c:	d0a7fa17 	ldw	r2,-24600(gp)
 201c290:	103ff21e 	bne	r2,zero,201c25c <__alt_mem_mem_0+0xfcffc25c>
 201c294:	e0bffe17 	ldw	r2,-8(fp)
 201c298:	10000315 	stw	zero,12(r2)
  }
  memp_free(MEMP_TCP_PCB, pcb);
 201c29c:	e17ffe17 	ldw	r5,-8(fp)
 201c2a0:	01000084 	movi	r4,2
 201c2a4:	20344ac0 	call	20344ac <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 201c2a8:	e0fffd17 	ldw	r3,-12(fp)
 201c2ac:	008080b4 	movhi	r2,514
 201c2b0:	10b01d04 	addi	r2,r2,-16268
 201c2b4:	18800515 	stw	r2,20(r3)
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
 201c2b8:	e0bffd17 	ldw	r2,-12(fp)
 201c2bc:	10000845 	stb	zero,33(r2)
  lpcb->backlog = (backlog ? backlog : 1);
 201c2c0:	e0bfff03 	ldbu	r2,-4(fp)
 201c2c4:	10000226 	beq	r2,zero,201c2d0 <tcp_listen_with_backlog+0x22c>
 201c2c8:	e0bfff03 	ldbu	r2,-4(fp)
 201c2cc:	00000106 	br	201c2d4 <tcp_listen_with_backlog+0x230>
 201c2d0:	00800044 	movi	r2,1
 201c2d4:	e0fffd17 	ldw	r3,-12(fp)
 201c2d8:	18800805 	stb	r2,32(r3)
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 201c2dc:	d0e7f917 	ldw	r3,-24604(gp)
 201c2e0:	e0bffd17 	ldw	r2,-12(fp)
 201c2e4:	10c00315 	stw	r3,12(r2)
 201c2e8:	e0bffd17 	ldw	r2,-12(fp)
 201c2ec:	d0a7f915 	stw	r2,-24604(gp)
 201c2f0:	202140c0 	call	202140c <tcp_timer_needed>
  return (struct tcp_pcb *)lpcb;
 201c2f4:	e0bffd17 	ldw	r2,-12(fp)
}
 201c2f8:	e037883a 	mov	sp,fp
 201c2fc:	dfc00117 	ldw	ra,4(sp)
 201c300:	df000017 	ldw	fp,0(sp)
 201c304:	dec00204 	addi	sp,sp,8
 201c308:	f800283a 	ret

0201c30c <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 201c30c:	defffc04 	addi	sp,sp,-16
 201c310:	df000315 	stw	fp,12(sp)
 201c314:	df000304 	addi	fp,sp,12
 201c318:	e13fff15 	stw	r4,-4(fp)
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 201c31c:	e0bfff17 	ldw	r2,-4(fp)
 201c320:	10c00b17 	ldw	r3,44(r2)
 201c324:	e0bfff17 	ldw	r2,-4(fp)
 201c328:	10800c0b 	ldhu	r2,48(r2)
 201c32c:	10bfffcc 	andi	r2,r2,65535
 201c330:	1885883a 	add	r2,r3,r2
 201c334:	e0bffd15 	stw	r2,-12(fp)

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 201c338:	e0bfff17 	ldw	r2,-4(fp)
 201c33c:	10c00d17 	ldw	r3,52(r2)
 201c340:	e0bfff17 	ldw	r2,-4(fp)
 201c344:	10800e8b 	ldhu	r2,58(r2)
 201c348:	10bfffcc 	andi	r2,r2,65535
 201c34c:	10840068 	cmpgeui	r2,r2,4097
 201c350:	1000041e 	bne	r2,zero,201c364 <tcp_update_rcv_ann_wnd+0x58>
 201c354:	e0bfff17 	ldw	r2,-4(fp)
 201c358:	10800e8b 	ldhu	r2,58(r2)
 201c35c:	10bfffcc 	andi	r2,r2,65535
 201c360:	00000106 	br	201c368 <tcp_update_rcv_ann_wnd+0x5c>
 201c364:	00840004 	movi	r2,4096
 201c368:	1885883a 	add	r2,r3,r2
 201c36c:	e0fffd17 	ldw	r3,-12(fp)
 201c370:	1885c83a 	sub	r2,r3,r2
 201c374:	10000916 	blt	r2,zero,201c39c <tcp_update_rcv_ann_wnd+0x90>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 201c378:	e0bfff17 	ldw	r2,-4(fp)
 201c37c:	10c00c0b 	ldhu	r3,48(r2)
 201c380:	e0bfff17 	ldw	r2,-4(fp)
 201c384:	10c00c8d 	sth	r3,50(r2)
    return new_right_edge - pcb->rcv_ann_right_edge;
 201c388:	e0bfff17 	ldw	r2,-4(fp)
 201c38c:	10800d17 	ldw	r2,52(r2)
 201c390:	e0fffd17 	ldw	r3,-12(fp)
 201c394:	1885c83a 	sub	r2,r3,r2
 201c398:	00001406 	br	201c3ec <tcp_update_rcv_ann_wnd+0xe0>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 201c39c:	e0bfff17 	ldw	r2,-4(fp)
 201c3a0:	10c00b17 	ldw	r3,44(r2)
 201c3a4:	e0bfff17 	ldw	r2,-4(fp)
 201c3a8:	10800d17 	ldw	r2,52(r2)
 201c3ac:	1885c83a 	sub	r2,r3,r2
 201c3b0:	0080030e 	bge	zero,r2,201c3c0 <tcp_update_rcv_ann_wnd+0xb4>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 201c3b4:	e0bfff17 	ldw	r2,-4(fp)
 201c3b8:	10000c8d 	sth	zero,50(r2)
 201c3bc:	00000a06 	br	201c3e8 <tcp_update_rcv_ann_wnd+0xdc>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 201c3c0:	e0bfff17 	ldw	r2,-4(fp)
 201c3c4:	10c00d17 	ldw	r3,52(r2)
 201c3c8:	e0bfff17 	ldw	r2,-4(fp)
 201c3cc:	10800b17 	ldw	r2,44(r2)
 201c3d0:	1885c83a 	sub	r2,r3,r2
 201c3d4:	e0bffe15 	stw	r2,-8(fp)
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
 201c3d8:	e0bffe17 	ldw	r2,-8(fp)
 201c3dc:	1007883a 	mov	r3,r2
 201c3e0:	e0bfff17 	ldw	r2,-4(fp)
 201c3e4:	10c00c8d 	sth	r3,50(r2)
    }
    return 0;
 201c3e8:	0005883a 	mov	r2,zero
  }
}
 201c3ec:	e037883a 	mov	sp,fp
 201c3f0:	df000017 	ldw	fp,0(sp)
 201c3f4:	dec00104 	addi	sp,sp,4
 201c3f8:	f800283a 	ret

0201c3fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 201c3fc:	defffb04 	addi	sp,sp,-20
 201c400:	dfc00415 	stw	ra,16(sp)
 201c404:	df000315 	stw	fp,12(sp)
 201c408:	df000304 	addi	fp,sp,12
 201c40c:	e13ffe15 	stw	r4,-8(fp)
 201c410:	2805883a 	mov	r2,r5
 201c414:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
 201c418:	e0bffe17 	ldw	r2,-8(fp)
 201c41c:	10c00c0b 	ldhu	r3,48(r2)
 201c420:	e0bfff0b 	ldhu	r2,-4(fp)
 201c424:	1885883a 	add	r2,r3,r2
 201c428:	1007883a 	mov	r3,r2
 201c42c:	e0bffe17 	ldw	r2,-8(fp)
 201c430:	10c00c0d 	sth	r3,48(r2)
  if (pcb->rcv_wnd > TCP_WND) {
 201c434:	e0bffe17 	ldw	r2,-8(fp)
 201c438:	10800c0b 	ldhu	r2,48(r2)
 201c43c:	10bfffcc 	andi	r2,r2,65535
 201c440:	10880070 	cmpltui	r2,r2,8193
 201c444:	1000031e 	bne	r2,zero,201c454 <tcp_recved+0x58>
    pcb->rcv_wnd = TCP_WND;
 201c448:	e0bffe17 	ldw	r2,-8(fp)
 201c44c:	00c80004 	movi	r3,8192
 201c450:	10c00c0d 	sth	r3,48(r2)
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 201c454:	e13ffe17 	ldw	r4,-8(fp)
 201c458:	201c30c0 	call	201c30c <tcp_update_rcv_ann_wnd>
 201c45c:	e0bffd15 	stw	r2,-12(fp)

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 201c460:	e0bffd17 	ldw	r2,-12(fp)
 201c464:	10820010 	cmplti	r2,r2,2048
 201c468:	1000081e 	bne	r2,zero,201c48c <tcp_recved+0x90>
    tcp_ack_now(pcb);
 201c46c:	e0bffe17 	ldw	r2,-8(fp)
 201c470:	10800883 	ldbu	r2,34(r2)
 201c474:	10800094 	ori	r2,r2,2
 201c478:	1007883a 	mov	r3,r2
 201c47c:	e0bffe17 	ldw	r2,-8(fp)
 201c480:	10c00885 	stb	r3,34(r2)
    tcp_output(pcb);
 201c484:	e13ffe17 	ldw	r4,-8(fp)
 201c488:	201f6380 	call	201f638 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
 201c48c:	0001883a 	nop
 201c490:	e037883a 	mov	sp,fp
 201c494:	dfc00117 	ldw	ra,4(sp)
 201c498:	df000017 	ldw	fp,0(sp)
 201c49c:	dec00204 	addi	sp,sp,8
 201c4a0:	f800283a 	ret

0201c4a4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 201c4a4:	defffd04 	addi	sp,sp,-12
 201c4a8:	df000215 	stw	fp,8(sp)
 201c4ac:	df000204 	addi	fp,sp,8
  u8_t i;
  u16_t n = 0;
 201c4b0:	e03ffe8d 	sth	zero,-6(fp)
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 201c4b4:	d0a00f0b 	ldhu	r2,-32708(gp)
 201c4b8:	10c00044 	addi	r3,r2,1
 201c4bc:	d0e00f0d 	sth	r3,-32708(gp)
 201c4c0:	10ffffcc 	andi	r3,r2,65535
 201c4c4:	00bfffd4 	movui	r2,65535
 201c4c8:	1880021e 	bne	r3,r2,201c4d4 <tcp_new_port+0x30>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 201c4cc:	00b00004 	movi	r2,-16384
 201c4d0:	d0a00f0d 	sth	r2,-32708(gp)
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 201c4d4:	e03ffe05 	stb	zero,-8(fp)
 201c4d8:	00002006 	br	201c55c <tcp_new_port+0xb8>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 201c4dc:	e0fffe03 	ldbu	r3,-8(fp)
 201c4e0:	00808134 	movhi	r2,516
 201c4e4:	10856f04 	addi	r2,r2,5564
 201c4e8:	18c7883a 	add	r3,r3,r3
 201c4ec:	18c7883a 	add	r3,r3,r3
 201c4f0:	10c5883a 	add	r2,r2,r3
 201c4f4:	10800017 	ldw	r2,0(r2)
 201c4f8:	10800017 	ldw	r2,0(r2)
 201c4fc:	e0bfff15 	stw	r2,-4(fp)
 201c500:	00001106 	br	201c548 <tcp_new_port+0xa4>
      if (pcb->local_port == tcp_port) {
 201c504:	e0bfff17 	ldw	r2,-4(fp)
 201c508:	10c0078b 	ldhu	r3,30(r2)
 201c50c:	d0a00f0b 	ldhu	r2,-32708(gp)
 201c510:	18ffffcc 	andi	r3,r3,65535
 201c514:	10bfffcc 	andi	r2,r2,65535
 201c518:	1880081e 	bne	r3,r2,201c53c <tcp_new_port+0x98>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 201c51c:	e0bffe8b 	ldhu	r2,-6(fp)
 201c520:	10800044 	addi	r2,r2,1
 201c524:	e0bffe8d 	sth	r2,-6(fp)
 201c528:	e0bffe8b 	ldhu	r2,-6(fp)
 201c52c:	10900030 	cmpltui	r2,r2,16384
 201c530:	103fe01e 	bne	r2,zero,201c4b4 <__alt_mem_mem_0+0xfcffc4b4>
          return 0;
 201c534:	0005883a 	mov	r2,zero
 201c538:	00000c06 	br	201c56c <tcp_new_port+0xc8>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 201c53c:	e0bfff17 	ldw	r2,-4(fp)
 201c540:	10800317 	ldw	r2,12(r2)
 201c544:	e0bfff15 	stw	r2,-4(fp)
 201c548:	e0bfff17 	ldw	r2,-4(fp)
 201c54c:	103fed1e 	bne	r2,zero,201c504 <__alt_mem_mem_0+0xfcffc504>
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 201c550:	e0bffe03 	ldbu	r2,-8(fp)
 201c554:	10800044 	addi	r2,r2,1
 201c558:	e0bffe05 	stb	r2,-8(fp)
 201c55c:	e0bffe03 	ldbu	r2,-8(fp)
 201c560:	10800130 	cmpltui	r2,r2,4
 201c564:	103fdd1e 	bne	r2,zero,201c4dc <__alt_mem_mem_0+0xfcffc4dc>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 201c568:	d0a00f0b 	ldhu	r2,-32708(gp)
}
 201c56c:	e037883a 	mov	sp,fp
 201c570:	df000017 	ldw	fp,0(sp)
 201c574:	dec00104 	addi	sp,sp,4
 201c578:	f800283a 	ret

0201c57c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 201c57c:	defff404 	addi	sp,sp,-48
 201c580:	dfc00b15 	stw	ra,44(sp)
 201c584:	df000a15 	stw	fp,40(sp)
 201c588:	df000a04 	addi	fp,sp,40
 201c58c:	e13ffc15 	stw	r4,-16(fp)
 201c590:	e17ffd15 	stw	r5,-12(fp)
 201c594:	3005883a 	mov	r2,r6
 201c598:	e1ffff15 	stw	r7,-4(fp)
 201c59c:	e0bffe0d 	sth	r2,-8(fp)
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 201c5a0:	e0bffc17 	ldw	r2,-16(fp)
 201c5a4:	10800617 	ldw	r2,24(r2)
 201c5a8:	10000926 	beq	r2,zero,201c5d0 <tcp_connect+0x54>
 201c5ac:	01c08134 	movhi	r7,516
 201c5b0:	39c57304 	addi	r7,r7,5580
 201c5b4:	0180acc4 	movi	r6,691
 201c5b8:	01408134 	movhi	r5,516
 201c5bc:	29459704 	addi	r5,r5,5724
 201c5c0:	01008134 	movhi	r4,516
 201c5c4:	21058204 	addi	r4,r4,5640
 201c5c8:	20009e40 	call	20009e4 <printf>
 201c5cc:	003fff06 	br	201c5cc <__alt_mem_mem_0+0xfcffc5cc>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
 201c5d0:	e0bffd17 	ldw	r2,-12(fp)
 201c5d4:	10000a26 	beq	r2,zero,201c600 <tcp_connect+0x84>
    pcb->remote_ip = *ipaddr;
 201c5d8:	e0bffc17 	ldw	r2,-16(fp)
 201c5dc:	e0fffd17 	ldw	r3,-12(fp)
 201c5e0:	18c00017 	ldw	r3,0(r3)
 201c5e4:	10c00115 	stw	r3,4(r2)
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
 201c5e8:	e0bffc17 	ldw	r2,-16(fp)
 201c5ec:	e0fffe0b 	ldhu	r3,-8(fp)
 201c5f0:	10c0080d 	sth	r3,32(r2)

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
 201c5f4:	e0bffc17 	ldw	r2,-16(fp)
 201c5f8:	10000626 	beq	r2,zero,201c614 <tcp_connect+0x98>
 201c5fc:	00000206 	br	201c608 <tcp_connect+0x8c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    pcb->remote_ip = *ipaddr;
  } else {
    return ERR_VAL;
 201c600:	00bffe84 	movi	r2,-6
 201c604:	0000be06 	br	201c900 <tcp_connect+0x384>
  }
  pcb->remote_port = port;

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
 201c608:	e0bffc17 	ldw	r2,-16(fp)
 201c60c:	10800017 	ldw	r2,0(r2)
 201c610:	10000f1e 	bne	r2,zero,201c650 <tcp_connect+0xd4>
    /* no local IP address set, yet. */
    struct netif *netif = ip_route(&(pcb->local_ip), &(pcb->remote_ip));
 201c614:	e0fffc17 	ldw	r3,-16(fp)
 201c618:	e0bffc17 	ldw	r2,-16(fp)
 201c61c:	10800104 	addi	r2,r2,4
 201c620:	100b883a 	mov	r5,r2
 201c624:	1809883a 	mov	r4,r3
 201c628:	2031bc80 	call	2031bc8 <ip_route>
 201c62c:	e0bff815 	stw	r2,-32(fp)
    if (netif == NULL) {
 201c630:	e0bff817 	ldw	r2,-32(fp)
 201c634:	1000021e 	bne	r2,zero,201c640 <tcp_connect+0xc4>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 201c638:	00bfff04 	movi	r2,-4
 201c63c:	0000b006 	br	201c900 <tcp_connect+0x384>
    }
    /* Use the netif's IP address as local address. */
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
 201c640:	e0bff817 	ldw	r2,-32(fp)
 201c644:	10c00117 	ldw	r3,4(r2)
 201c648:	e0bffc17 	ldw	r2,-16(fp)
 201c64c:	10c00015 	stw	r3,0(r2)
  }

  old_local_port = pcb->local_port;
 201c650:	e0bffc17 	ldw	r2,-16(fp)
 201c654:	1080078b 	ldhu	r2,30(r2)
 201c658:	e0bff90d 	sth	r2,-28(fp)
  if (pcb->local_port == 0) {
 201c65c:	e0bffc17 	ldw	r2,-16(fp)
 201c660:	1080078b 	ldhu	r2,30(r2)
 201c664:	10bfffcc 	andi	r2,r2,65535
 201c668:	10000a1e 	bne	r2,zero,201c694 <tcp_connect+0x118>
    pcb->local_port = tcp_new_port();
 201c66c:	201c4a40 	call	201c4a4 <tcp_new_port>
 201c670:	1007883a 	mov	r3,r2
 201c674:	e0bffc17 	ldw	r2,-16(fp)
 201c678:	10c0078d 	sth	r3,30(r2)
    if (pcb->local_port == 0) {
 201c67c:	e0bffc17 	ldw	r2,-16(fp)
 201c680:	1080078b 	ldhu	r2,30(r2)
 201c684:	10bfffcc 	andi	r2,r2,65535
 201c688:	1000021e 	bne	r2,zero,201c694 <tcp_connect+0x118>
      return ERR_BUF;
 201c68c:	00bfff84 	movi	r2,-2
 201c690:	00009b06 	br	201c900 <tcp_connect+0x384>
    }
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 201c694:	e0bffc17 	ldw	r2,-16(fp)
 201c698:	10800203 	ldbu	r2,8(r2)
 201c69c:	10803fcc 	andi	r2,r2,255
 201c6a0:	1080010c 	andi	r2,r2,4
 201c6a4:	10003026 	beq	r2,zero,201c768 <tcp_connect+0x1ec>
    /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
       now that the 5-tuple is unique. */
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
 201c6a8:	00800084 	movi	r2,2
 201c6ac:	e0bff715 	stw	r2,-36(fp)
 201c6b0:	00002a06 	br	201c75c <tcp_connect+0x1e0>
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 201c6b4:	00808134 	movhi	r2,516
 201c6b8:	10856f04 	addi	r2,r2,5564
 201c6bc:	e0fff717 	ldw	r3,-36(fp)
 201c6c0:	18c7883a 	add	r3,r3,r3
 201c6c4:	18c7883a 	add	r3,r3,r3
 201c6c8:	10c5883a 	add	r2,r2,r3
 201c6cc:	10800017 	ldw	r2,0(r2)
 201c6d0:	10800017 	ldw	r2,0(r2)
 201c6d4:	e0bff615 	stw	r2,-40(fp)
 201c6d8:	00001b06 	br	201c748 <tcp_connect+0x1cc>
        if ((cpcb->local_port == pcb->local_port) &&
 201c6dc:	e0bff617 	ldw	r2,-40(fp)
 201c6e0:	10c0078b 	ldhu	r3,30(r2)
 201c6e4:	e0bffc17 	ldw	r2,-16(fp)
 201c6e8:	1080078b 	ldhu	r2,30(r2)
 201c6ec:	18ffffcc 	andi	r3,r3,65535
 201c6f0:	10bfffcc 	andi	r2,r2,65535
 201c6f4:	1880111e 	bne	r3,r2,201c73c <tcp_connect+0x1c0>
            (cpcb->remote_port == port) &&
 201c6f8:	e0bff617 	ldw	r2,-40(fp)
 201c6fc:	1080080b 	ldhu	r2,32(r2)
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
        if ((cpcb->local_port == pcb->local_port) &&
 201c700:	10ffffcc 	andi	r3,r2,65535
 201c704:	e0bffe0b 	ldhu	r2,-8(fp)
 201c708:	18800c1e 	bne	r3,r2,201c73c <tcp_connect+0x1c0>
            (cpcb->remote_port == port) &&
            ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
 201c70c:	e0bff617 	ldw	r2,-40(fp)
 201c710:	10c00017 	ldw	r3,0(r2)
 201c714:	e0bffc17 	ldw	r2,-16(fp)
 201c718:	10800017 	ldw	r2,0(r2)
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
        if ((cpcb->local_port == pcb->local_port) &&
            (cpcb->remote_port == port) &&
 201c71c:	1880071e 	bne	r3,r2,201c73c <tcp_connect+0x1c0>
            ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
            ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
 201c720:	e0bff617 	ldw	r2,-40(fp)
 201c724:	10c00117 	ldw	r3,4(r2)
 201c728:	e0bffd17 	ldw	r2,-12(fp)
 201c72c:	10800017 	ldw	r2,0(r2)
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
        if ((cpcb->local_port == pcb->local_port) &&
            (cpcb->remote_port == port) &&
            ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
 201c730:	1880021e 	bne	r3,r2,201c73c <tcp_connect+0x1c0>
            ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
          /* linux returns EISCONN here, but ERR_USE should be OK for us */
          return ERR_USE;
 201c734:	00bffe04 	movi	r2,-8
 201c738:	00007106 	br	201c900 <tcp_connect+0x384>
       now that the 5-tuple is unique. */
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
      for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 201c73c:	e0bff617 	ldw	r2,-40(fp)
 201c740:	10800317 	ldw	r2,12(r2)
 201c744:	e0bff615 	stw	r2,-40(fp)
 201c748:	e0bff617 	ldw	r2,-40(fp)
 201c74c:	103fe31e 	bne	r2,zero,201c6dc <__alt_mem_mem_0+0xfcffc6dc>
    /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
       now that the 5-tuple is unique. */
    struct tcp_pcb *cpcb;
    int i;
    /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
    for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
 201c750:	e0bff717 	ldw	r2,-36(fp)
 201c754:	10800044 	addi	r2,r2,1
 201c758:	e0bff715 	stw	r2,-36(fp)
 201c75c:	e0bff717 	ldw	r2,-36(fp)
 201c760:	10800110 	cmplti	r2,r2,4
 201c764:	103fd31e 	bne	r2,zero,201c6b4 <__alt_mem_mem_0+0xfcffc6b4>
        }
      }
    }
  }
#endif /* SO_REUSE */
  iss = tcp_next_iss();
 201c768:	201dbc00 	call	201dbc0 <tcp_next_iss>
 201c76c:	e0bffa15 	stw	r2,-24(fp)
  pcb->rcv_nxt = 0;
 201c770:	e0bffc17 	ldw	r2,-16(fp)
 201c774:	10000b15 	stw	zero,44(r2)
  pcb->snd_nxt = iss;
 201c778:	e0bffc17 	ldw	r2,-16(fp)
 201c77c:	e0fffa17 	ldw	r3,-24(fp)
 201c780:	10c01515 	stw	r3,84(r2)
  pcb->lastack = iss - 1;
 201c784:	e0bffa17 	ldw	r2,-24(fp)
 201c788:	10ffffc4 	addi	r3,r2,-1
 201c78c:	e0bffc17 	ldw	r2,-16(fp)
 201c790:	10c01315 	stw	r3,76(r2)
  pcb->snd_lbb = iss - 1;
 201c794:	e0bffa17 	ldw	r2,-24(fp)
 201c798:	10ffffc4 	addi	r3,r2,-1
 201c79c:	e0bffc17 	ldw	r2,-16(fp)
 201c7a0:	10c01815 	stw	r3,96(r2)
  pcb->rcv_wnd = TCP_WND;
 201c7a4:	e0bffc17 	ldw	r2,-16(fp)
 201c7a8:	00c80004 	movi	r3,8192
 201c7ac:	10c00c0d 	sth	r3,48(r2)
  pcb->rcv_ann_wnd = TCP_WND;
 201c7b0:	e0bffc17 	ldw	r2,-16(fp)
 201c7b4:	00c80004 	movi	r3,8192
 201c7b8:	10c00c8d 	sth	r3,50(r2)
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 201c7bc:	e0bffc17 	ldw	r2,-16(fp)
 201c7c0:	10c00b17 	ldw	r3,44(r2)
 201c7c4:	e0bffc17 	ldw	r2,-16(fp)
 201c7c8:	10c00d15 	stw	r3,52(r2)
  pcb->snd_wnd = TCP_WND;
 201c7cc:	e0bffc17 	ldw	r2,-16(fp)
 201c7d0:	00c80004 	movi	r3,8192
 201c7d4:	10c0190d 	sth	r3,100(r2)
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 201c7d8:	e0bffc17 	ldw	r2,-16(fp)
 201c7dc:	00c08604 	movi	r3,536
 201c7e0:	10c00e8d 	sth	r3,58(r2)
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->local_ip), ipaddr);
 201c7e4:	e0bffc17 	ldw	r2,-16(fp)
 201c7e8:	10800e8b 	ldhu	r2,58(r2)
 201c7ec:	10bfffcc 	andi	r2,r2,65535
 201c7f0:	e0fffc17 	ldw	r3,-16(fp)
 201c7f4:	e1bffd17 	ldw	r6,-12(fp)
 201c7f8:	180b883a 	mov	r5,r3
 201c7fc:	1009883a 	mov	r4,r2
 201c800:	201dbf00 	call	201dbf0 <tcp_eff_send_mss>
 201c804:	1007883a 	mov	r3,r2
 201c808:	e0bffc17 	ldw	r2,-16(fp)
 201c80c:	10c00e8d 	sth	r3,58(r2)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 201c810:	e0bffc17 	ldw	r2,-16(fp)
 201c814:	00c00044 	movi	r3,1
 201c818:	10c0140d 	sth	r3,80(r2)
  pcb->ssthresh = pcb->mss * 10;
 201c81c:	e0bffc17 	ldw	r2,-16(fp)
 201c820:	10800e8b 	ldhu	r2,58(r2)
 201c824:	108002a4 	muli	r2,r2,10
 201c828:	1007883a 	mov	r3,r2
 201c82c:	e0bffc17 	ldw	r2,-16(fp)
 201c830:	10c0148d 	sth	r3,82(r2)
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 201c834:	e0bffc17 	ldw	r2,-16(fp)
 201c838:	e0ffff17 	ldw	r3,-4(fp)
 201c83c:	10c02215 	stw	r3,136(r2)
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 201c840:	01400084 	movi	r5,2
 201c844:	e13ffc17 	ldw	r4,-16(fp)
 201c848:	201f1b40 	call	201f1b4 <tcp_enqueue_flags>
 201c84c:	e0bffb05 	stb	r2,-20(fp)
  if (ret == ERR_OK) {
 201c850:	e0bffb07 	ldb	r2,-20(fp)
 201c854:	1000291e 	bne	r2,zero,201c8fc <tcp_connect+0x380>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 201c858:	e0bffc17 	ldw	r2,-16(fp)
 201c85c:	00c00084 	movi	r3,2
 201c860:	10c00615 	stw	r3,24(r2)
    if (old_local_port != 0) {
 201c864:	e0bff90b 	ldhu	r2,-28(fp)
 201c868:	10001a26 	beq	r2,zero,201c8d4 <tcp_connect+0x358>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 201c86c:	d0e7fb17 	ldw	r3,-24596(gp)
 201c870:	e0bffc17 	ldw	r2,-16(fp)
 201c874:	1880041e 	bne	r3,r2,201c888 <tcp_connect+0x30c>
 201c878:	d0a7fb17 	ldw	r2,-24596(gp)
 201c87c:	10800317 	ldw	r2,12(r2)
 201c880:	d0a7fb15 	stw	r2,-24596(gp)
 201c884:	00001106 	br	201c8cc <tcp_connect+0x350>
 201c888:	d0a7fb17 	ldw	r2,-24596(gp)
 201c88c:	d0a7fa15 	stw	r2,-24600(gp)
 201c890:	00000c06 	br	201c8c4 <tcp_connect+0x348>
 201c894:	d0a7fa17 	ldw	r2,-24600(gp)
 201c898:	10c00317 	ldw	r3,12(r2)
 201c89c:	e0bffc17 	ldw	r2,-16(fp)
 201c8a0:	1880051e 	bne	r3,r2,201c8b8 <tcp_connect+0x33c>
 201c8a4:	d0a7fa17 	ldw	r2,-24600(gp)
 201c8a8:	e0fffc17 	ldw	r3,-16(fp)
 201c8ac:	18c00317 	ldw	r3,12(r3)
 201c8b0:	10c00315 	stw	r3,12(r2)
 201c8b4:	00000506 	br	201c8cc <tcp_connect+0x350>
 201c8b8:	d0a7fa17 	ldw	r2,-24600(gp)
 201c8bc:	10800317 	ldw	r2,12(r2)
 201c8c0:	d0a7fa15 	stw	r2,-24600(gp)
 201c8c4:	d0a7fa17 	ldw	r2,-24600(gp)
 201c8c8:	103ff21e 	bne	r2,zero,201c894 <__alt_mem_mem_0+0xfcffc894>
 201c8cc:	e0bffc17 	ldw	r2,-16(fp)
 201c8d0:	10000315 	stw	zero,12(r2)
    }
    TCP_REG_ACTIVE(pcb);
 201c8d4:	d0e7f717 	ldw	r3,-24612(gp)
 201c8d8:	e0bffc17 	ldw	r2,-16(fp)
 201c8dc:	10c00315 	stw	r3,12(r2)
 201c8e0:	e0bffc17 	ldw	r2,-16(fp)
 201c8e4:	d0a7f715 	stw	r2,-24612(gp)
 201c8e8:	202140c0 	call	202140c <tcp_timer_needed>
 201c8ec:	00800044 	movi	r2,1
 201c8f0:	d0a7f685 	stb	r2,-24614(gp)
    snmp_inc_tcpactiveopens();

    tcp_output(pcb);
 201c8f4:	e13ffc17 	ldw	r4,-16(fp)
 201c8f8:	201f6380 	call	201f638 <tcp_output>
  }
  return ret;
 201c8fc:	e0bffb03 	ldbu	r2,-20(fp)
}
 201c900:	e037883a 	mov	sp,fp
 201c904:	dfc00117 	ldw	ra,4(sp)
 201c908:	df000017 	ldw	fp,0(sp)
 201c90c:	dec00204 	addi	sp,sp,8
 201c910:	f800283a 	ret

0201c914 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 201c914:	defff304 	addi	sp,sp,-52
 201c918:	dfc00c15 	stw	ra,48(sp)
 201c91c:	df000b15 	stw	fp,44(sp)
 201c920:	dc000a15 	stw	r16,40(sp)
 201c924:	df000b04 	addi	fp,sp,44
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 201c928:	e03ff985 	stb	zero,-26(fp)

  ++tcp_ticks;
 201c92c:	d0a7f817 	ldw	r2,-24608(gp)
 201c930:	10800044 	addi	r2,r2,1
 201c934:	d0a7f815 	stw	r2,-24608(gp)
  ++tcp_timer_ctr;
 201c938:	d0a7f643 	ldbu	r2,-24615(gp)
 201c93c:	10800044 	addi	r2,r2,1
 201c940:	d0a7f645 	stb	r2,-24615(gp)

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 201c944:	e03ff815 	stw	zero,-32(fp)
  pcb = tcp_active_pcbs;
 201c948:	d0a7f717 	ldw	r2,-24612(gp)
 201c94c:	e0bff715 	stw	r2,-36(fp)
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 201c950:	00018906 	br	201cf78 <tcp_slowtmr+0x664>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 201c954:	e0bff717 	ldw	r2,-36(fp)
 201c958:	10c00943 	ldbu	r3,37(r2)
 201c95c:	d0a7f643 	ldbu	r2,-24615(gp)
 201c960:	18c03fcc 	andi	r3,r3,255
 201c964:	10803fcc 	andi	r2,r2,255
 201c968:	1880041e 	bne	r3,r2,201c97c <tcp_slowtmr+0x68>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 201c96c:	e0bff717 	ldw	r2,-36(fp)
 201c970:	10800317 	ldw	r2,12(r2)
 201c974:	e0bff715 	stw	r2,-36(fp)
      continue;
 201c978:	00017f06 	br	201cf78 <tcp_slowtmr+0x664>
    }
    pcb->last_timer = tcp_timer_ctr;
 201c97c:	d0e7f643 	ldbu	r3,-24615(gp)
 201c980:	e0bff717 	ldw	r2,-36(fp)
 201c984:	10c00945 	stb	r3,37(r2)

    pcb_remove = 0;
 201c988:	e03ff905 	stb	zero,-28(fp)
    pcb_reset = 0;
 201c98c:	e03ff945 	stb	zero,-27(fp)

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 201c990:	e0bff717 	ldw	r2,-36(fp)
 201c994:	10800617 	ldw	r2,24(r2)
 201c998:	10800098 	cmpnei	r2,r2,2
 201c99c:	1000091e 	bne	r2,zero,201c9c4 <tcp_slowtmr+0xb0>
 201c9a0:	e0bff717 	ldw	r2,-36(fp)
 201c9a4:	10801283 	ldbu	r2,74(r2)
 201c9a8:	10803fcc 	andi	r2,r2,255
 201c9ac:	10800198 	cmpnei	r2,r2,6
 201c9b0:	1000041e 	bne	r2,zero,201c9c4 <tcp_slowtmr+0xb0>
      ++pcb_remove;
 201c9b4:	e0bff903 	ldbu	r2,-28(fp)
 201c9b8:	10800044 	addi	r2,r2,1
 201c9bc:	e0bff905 	stb	r2,-28(fp)
 201c9c0:	00008d06 	br	201cbf8 <tcp_slowtmr+0x2e4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
 201c9c4:	e0bff717 	ldw	r2,-36(fp)
 201c9c8:	10801283 	ldbu	r2,74(r2)
 201c9cc:	10803fcc 	andi	r2,r2,255
 201c9d0:	10800318 	cmpnei	r2,r2,12
 201c9d4:	1000041e 	bne	r2,zero,201c9e8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 201c9d8:	e0bff903 	ldbu	r2,-28(fp)
 201c9dc:	10800044 	addi	r2,r2,1
 201c9e0:	e0bff905 	stb	r2,-28(fp)
 201c9e4:	00008406 	br	201cbf8 <tcp_slowtmr+0x2e4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 201c9e8:	e0bff717 	ldw	r2,-36(fp)
 201c9ec:	10802843 	ldbu	r2,161(r2)
 201c9f0:	10803fcc 	andi	r2,r2,255
 201c9f4:	10002226 	beq	r2,zero,201ca80 <tcp_slowtmr+0x16c>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
 201c9f8:	e0bff717 	ldw	r2,-36(fp)
 201c9fc:	10802803 	ldbu	r2,160(r2)
 201ca00:	10800044 	addi	r2,r2,1
 201ca04:	1007883a 	mov	r3,r2
 201ca08:	e0bff717 	ldw	r2,-36(fp)
 201ca0c:	10c02805 	stb	r3,160(r2)
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
 201ca10:	e0bff717 	ldw	r2,-36(fp)
 201ca14:	11002803 	ldbu	r4,160(r2)
 201ca18:	e0bff717 	ldw	r2,-36(fp)
 201ca1c:	10802843 	ldbu	r2,161(r2)
 201ca20:	10803fcc 	andi	r2,r2,255
 201ca24:	10ffffc4 	addi	r3,r2,-1
 201ca28:	d0a00f84 	addi	r2,gp,-32706
 201ca2c:	1885883a 	add	r2,r3,r2
 201ca30:	10800003 	ldbu	r2,0(r2)
 201ca34:	20c03fcc 	andi	r3,r4,255
 201ca38:	10803fcc 	andi	r2,r2,255
 201ca3c:	18806e36 	bltu	r3,r2,201cbf8 <tcp_slowtmr+0x2e4>
          pcb->persist_cnt = 0;
 201ca40:	e0bff717 	ldw	r2,-36(fp)
 201ca44:	10002805 	stb	zero,160(r2)
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 201ca48:	e0bff717 	ldw	r2,-36(fp)
 201ca4c:	10802843 	ldbu	r2,161(r2)
 201ca50:	10803fcc 	andi	r2,r2,255
 201ca54:	108001e8 	cmpgeui	r2,r2,7
 201ca58:	1000061e 	bne	r2,zero,201ca74 <tcp_slowtmr+0x160>
            pcb->persist_backoff++;
 201ca5c:	e0bff717 	ldw	r2,-36(fp)
 201ca60:	10802843 	ldbu	r2,161(r2)
 201ca64:	10800044 	addi	r2,r2,1
 201ca68:	1007883a 	mov	r3,r2
 201ca6c:	e0bff717 	ldw	r2,-36(fp)
 201ca70:	10c02845 	stb	r3,161(r2)
          }
          tcp_zero_window_probe(pcb);
 201ca74:	e13ff717 	ldw	r4,-36(fp)
 201ca78:	20210c80 	call	20210c8 <tcp_zero_window_probe>
 201ca7c:	00005e06 	br	201cbf8 <tcp_slowtmr+0x2e4>
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
 201ca80:	e0bff717 	ldw	r2,-36(fp)
 201ca84:	10800e0b 	ldhu	r2,56(r2)
 201ca88:	10bfffcc 	andi	r2,r2,65535
 201ca8c:	10a0001c 	xori	r2,r2,32768
 201ca90:	10a00004 	addi	r2,r2,-32768
 201ca94:	10000616 	blt	r2,zero,201cab0 <tcp_slowtmr+0x19c>
          ++pcb->rtime;
 201ca98:	e0bff717 	ldw	r2,-36(fp)
 201ca9c:	10800e0b 	ldhu	r2,56(r2)
 201caa0:	10800044 	addi	r2,r2,1
 201caa4:	1007883a 	mov	r3,r2
 201caa8:	e0bff717 	ldw	r2,-36(fp)
 201caac:	10c00e0d 	sth	r3,56(r2)
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 201cab0:	e0bff717 	ldw	r2,-36(fp)
 201cab4:	10801d17 	ldw	r2,116(r2)
 201cab8:	10004f26 	beq	r2,zero,201cbf8 <tcp_slowtmr+0x2e4>
 201cabc:	e0bff717 	ldw	r2,-36(fp)
 201cac0:	10c00e0b 	ldhu	r3,56(r2)
 201cac4:	e0bff717 	ldw	r2,-36(fp)
 201cac8:	1080120b 	ldhu	r2,72(r2)
 201cacc:	18ffffcc 	andi	r3,r3,65535
 201cad0:	18e0001c 	xori	r3,r3,32768
 201cad4:	18e00004 	addi	r3,r3,-32768
 201cad8:	10bfffcc 	andi	r2,r2,65535
 201cadc:	10a0001c 	xori	r2,r2,32768
 201cae0:	10a00004 	addi	r2,r2,-32768
 201cae4:	18804416 	blt	r3,r2,201cbf8 <tcp_slowtmr+0x2e4>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 201cae8:	e0bff717 	ldw	r2,-36(fp)
 201caec:	10800617 	ldw	r2,24(r2)
 201caf0:	108000a0 	cmpeqi	r2,r2,2
 201caf4:	10001b1e 	bne	r2,zero,201cb64 <tcp_slowtmr+0x250>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 201caf8:	e0bff717 	ldw	r2,-36(fp)
 201cafc:	1080110b 	ldhu	r2,68(r2)
 201cb00:	10bfffcc 	andi	r2,r2,65535
 201cb04:	10a0001c 	xori	r2,r2,32768
 201cb08:	10a00004 	addi	r2,r2,-32768
 201cb0c:	1005d0fa 	srai	r2,r2,3
 201cb10:	10ffffcc 	andi	r3,r2,65535
 201cb14:	18e0001c 	xori	r3,r3,32768
 201cb18:	18e00004 	addi	r3,r3,-32768
 201cb1c:	e0bff717 	ldw	r2,-36(fp)
 201cb20:	1080118b 	ldhu	r2,70(r2)
 201cb24:	10bfffcc 	andi	r2,r2,65535
 201cb28:	10a0001c 	xori	r2,r2,32768
 201cb2c:	10a00004 	addi	r2,r2,-32768
 201cb30:	1887883a 	add	r3,r3,r2
 201cb34:	e0bff717 	ldw	r2,-36(fp)
 201cb38:	10801283 	ldbu	r2,74(r2)
 201cb3c:	11003fcc 	andi	r4,r2,255
 201cb40:	00808134 	movhi	r2,516
 201cb44:	10856b04 	addi	r2,r2,5548
 201cb48:	1105883a 	add	r2,r2,r4
 201cb4c:	10800003 	ldbu	r2,0(r2)
 201cb50:	10803fcc 	andi	r2,r2,255
 201cb54:	1884983a 	sll	r2,r3,r2
 201cb58:	1007883a 	mov	r3,r2
 201cb5c:	e0bff717 	ldw	r2,-36(fp)
 201cb60:	10c0120d 	sth	r3,72(r2)
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 201cb64:	e0bff717 	ldw	r2,-36(fp)
 201cb68:	10000e0d 	sth	zero,56(r2)

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 201cb6c:	e0bff717 	ldw	r2,-36(fp)
 201cb70:	10c0190b 	ldhu	r3,100(r2)
 201cb74:	e0bff717 	ldw	r2,-36(fp)
 201cb78:	1140140b 	ldhu	r5,80(r2)
 201cb7c:	1805883a 	mov	r2,r3
 201cb80:	10ffffcc 	andi	r3,r2,65535
 201cb84:	293fffcc 	andi	r4,r5,65535
 201cb88:	20c0012e 	bgeu	r4,r3,201cb90 <tcp_slowtmr+0x27c>
 201cb8c:	2805883a 	mov	r2,r5
 201cb90:	e0bffa0d 	sth	r2,-24(fp)
          pcb->ssthresh = eff_wnd >> 1;
 201cb94:	e0bffa0b 	ldhu	r2,-24(fp)
 201cb98:	1004d07a 	srli	r2,r2,1
 201cb9c:	1007883a 	mov	r3,r2
 201cba0:	e0bff717 	ldw	r2,-36(fp)
 201cba4:	10c0148d 	sth	r3,82(r2)
          if (pcb->ssthresh < (pcb->mss << 1)) {
 201cba8:	e0bff717 	ldw	r2,-36(fp)
 201cbac:	1080148b 	ldhu	r2,82(r2)
 201cbb0:	10ffffcc 	andi	r3,r2,65535
 201cbb4:	e0bff717 	ldw	r2,-36(fp)
 201cbb8:	10800e8b 	ldhu	r2,58(r2)
 201cbbc:	10bfffcc 	andi	r2,r2,65535
 201cbc0:	1085883a 	add	r2,r2,r2
 201cbc4:	1880060e 	bge	r3,r2,201cbe0 <tcp_slowtmr+0x2cc>
            pcb->ssthresh = (pcb->mss << 1);
 201cbc8:	e0bff717 	ldw	r2,-36(fp)
 201cbcc:	10800e8b 	ldhu	r2,58(r2)
 201cbd0:	1085883a 	add	r2,r2,r2
 201cbd4:	1007883a 	mov	r3,r2
 201cbd8:	e0bff717 	ldw	r2,-36(fp)
 201cbdc:	10c0148d 	sth	r3,82(r2)
          }
          pcb->cwnd = pcb->mss;
 201cbe0:	e0bff717 	ldw	r2,-36(fp)
 201cbe4:	10c00e8b 	ldhu	r3,58(r2)
 201cbe8:	e0bff717 	ldw	r2,-36(fp)
 201cbec:	10c0140d 	sth	r3,80(r2)
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 201cbf0:	e13ff717 	ldw	r4,-36(fp)
 201cbf4:	2020ab00 	call	2020ab0 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 201cbf8:	e0bff717 	ldw	r2,-36(fp)
 201cbfc:	10800617 	ldw	r2,24(r2)
 201cc00:	10800198 	cmpnei	r2,r2,6
 201cc04:	10000e1e 	bne	r2,zero,201cc40 <tcp_slowtmr+0x32c>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 201cc08:	e0bff717 	ldw	r2,-36(fp)
 201cc0c:	10800883 	ldbu	r2,34(r2)
 201cc10:	10803fcc 	andi	r2,r2,255
 201cc14:	1080040c 	andi	r2,r2,16
 201cc18:	10000926 	beq	r2,zero,201cc40 <tcp_slowtmr+0x32c>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 201cc1c:	d0e7f817 	ldw	r3,-24608(gp)
 201cc20:	e0bff717 	ldw	r2,-36(fp)
 201cc24:	10800a17 	ldw	r2,40(r2)
 201cc28:	1885c83a 	sub	r2,r3,r2
 201cc2c:	10800a70 	cmpltui	r2,r2,41
 201cc30:	1000031e 	bne	r2,zero,201cc40 <tcp_slowtmr+0x32c>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 201cc34:	e0bff903 	ldbu	r2,-28(fp)
 201cc38:	10800044 	addi	r2,r2,1
 201cc3c:	e0bff905 	stb	r2,-28(fp)
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 201cc40:	e0bff717 	ldw	r2,-36(fp)
 201cc44:	10800203 	ldbu	r2,8(r2)
 201cc48:	10803fcc 	andi	r2,r2,255
 201cc4c:	1080020c 	andi	r2,r2,8
 201cc50:	10003826 	beq	r2,zero,201cd34 <tcp_slowtmr+0x420>
       ((pcb->state == ESTABLISHED) ||
 201cc54:	e0bff717 	ldw	r2,-36(fp)
 201cc58:	10800617 	ldw	r2,24(r2)
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
 201cc5c:	10800120 	cmpeqi	r2,r2,4
 201cc60:	1000041e 	bne	r2,zero,201cc74 <tcp_slowtmr+0x360>
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
 201cc64:	e0bff717 	ldw	r2,-36(fp)
 201cc68:	10800617 	ldw	r2,24(r2)
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
 201cc6c:	108001d8 	cmpnei	r2,r2,7
 201cc70:	1000301e 	bne	r2,zero,201cd34 <tcp_slowtmr+0x420>
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
 201cc74:	d0e7f817 	ldw	r3,-24608(gp)
 201cc78:	e0bff717 	ldw	r2,-36(fp)
 201cc7c:	10800a17 	ldw	r2,40(r2)
 201cc80:	18a1c83a 	sub	r16,r3,r2
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 201cc84:	e0bff717 	ldw	r2,-36(fp)
 201cc88:	10c02517 	ldw	r3,148(r2)
 201cc8c:	e0bff717 	ldw	r2,-36(fp)
 201cc90:	11002717 	ldw	r4,156(r2)
 201cc94:	e0bff717 	ldw	r2,-36(fp)
 201cc98:	10802617 	ldw	r2,152(r2)
 201cc9c:	2085383a 	mul	r2,r4,r2
 201cca0:	1885883a 	add	r2,r3,r2
 201cca4:	01407d04 	movi	r5,500
 201cca8:	1009883a 	mov	r4,r2
 201ccac:	200aadc0 	call	200aadc <__udivsi3>

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if((u32_t)(tcp_ticks - pcb->tmr) >
 201ccb0:	1400072e 	bgeu	r2,r16,201ccd0 <tcp_slowtmr+0x3bc>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
 201ccb4:	e0bff903 	ldbu	r2,-28(fp)
 201ccb8:	10800044 	addi	r2,r2,1
 201ccbc:	e0bff905 	stb	r2,-28(fp)
        ++pcb_reset;
 201ccc0:	e0bff943 	ldbu	r2,-27(fp)
 201ccc4:	10800044 	addi	r2,r2,1
 201ccc8:	e0bff945 	stb	r2,-27(fp)
 201cccc:	00001906 	br	201cd34 <tcp_slowtmr+0x420>
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 201ccd0:	d0e7f817 	ldw	r3,-24608(gp)
 201ccd4:	e0bff717 	ldw	r2,-36(fp)
 201ccd8:	10800a17 	ldw	r2,40(r2)
 201ccdc:	18a1c83a 	sub	r16,r3,r2
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 201cce0:	e0bff717 	ldw	r2,-36(fp)
 201cce4:	10c02517 	ldw	r3,148(r2)
 201cce8:	e0bff717 	ldw	r2,-36(fp)
 201ccec:	10802883 	ldbu	r2,162(r2)
 201ccf0:	11003fcc 	andi	r4,r2,255
 201ccf4:	e0bff717 	ldw	r2,-36(fp)
 201ccf8:	10802617 	ldw	r2,152(r2)
 201ccfc:	2085383a 	mul	r2,r4,r2
 201cd00:	1885883a 	add	r2,r3,r2
              / TCP_SLOW_INTERVAL)
 201cd04:	01407d04 	movi	r5,500
 201cd08:	1009883a 	mov	r4,r2
 201cd0c:	200aadc0 	call	200aadc <__udivsi3>
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
        ++pcb_reset;
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
 201cd10:	1400082e 	bgeu	r2,r16,201cd34 <tcp_slowtmr+0x420>
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
              / TCP_SLOW_INTERVAL)
      {
        tcp_keepalive(pcb);
 201cd14:	e13ff717 	ldw	r4,-36(fp)
 201cd18:	2020f340 	call	2020f34 <tcp_keepalive>
        pcb->keep_cnt_sent++;
 201cd1c:	e0bff717 	ldw	r2,-36(fp)
 201cd20:	10802883 	ldbu	r2,162(r2)
 201cd24:	10800044 	addi	r2,r2,1
 201cd28:	1007883a 	mov	r3,r2
 201cd2c:	e0bff717 	ldw	r2,-36(fp)
 201cd30:	10c02885 	stb	r3,162(r2)

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 201cd34:	e0bff717 	ldw	r2,-36(fp)
 201cd38:	10801e17 	ldw	r2,120(r2)
 201cd3c:	10001126 	beq	r2,zero,201cd84 <tcp_slowtmr+0x470>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 201cd40:	d0e7f817 	ldw	r3,-24608(gp)
 201cd44:	e0bff717 	ldw	r2,-36(fp)
 201cd48:	10800a17 	ldw	r2,40(r2)
 201cd4c:	1887c83a 	sub	r3,r3,r2
 201cd50:	e0bff717 	ldw	r2,-36(fp)
 201cd54:	1080120b 	ldhu	r2,72(r2)
 201cd58:	10bfffcc 	andi	r2,r2,65535
 201cd5c:	10a0001c 	xori	r2,r2,32768
 201cd60:	10a00004 	addi	r2,r2,-32768
 201cd64:	108001a4 	muli	r2,r2,6

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 201cd68:	18800636 	bltu	r3,r2,201cd84 <tcp_slowtmr+0x470>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
      tcp_segs_free(pcb->ooseq);
 201cd6c:	e0bff717 	ldw	r2,-36(fp)
 201cd70:	10801e17 	ldw	r2,120(r2)
 201cd74:	1009883a 	mov	r4,r2
 201cd78:	201d2940 	call	201d294 <tcp_segs_free>
      pcb->ooseq = NULL;
 201cd7c:	e0bff717 	ldw	r2,-36(fp)
 201cd80:	10001e15 	stw	zero,120(r2)
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 201cd84:	e0bff717 	ldw	r2,-36(fp)
 201cd88:	10800617 	ldw	r2,24(r2)
 201cd8c:	108000d8 	cmpnei	r2,r2,3
 201cd90:	1000091e 	bne	r2,zero,201cdb8 <tcp_slowtmr+0x4a4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 201cd94:	d0e7f817 	ldw	r3,-24608(gp)
 201cd98:	e0bff717 	ldw	r2,-36(fp)
 201cd9c:	10800a17 	ldw	r2,40(r2)
 201cda0:	1885c83a 	sub	r2,r3,r2
 201cda4:	10800a70 	cmpltui	r2,r2,41
 201cda8:	1000031e 	bne	r2,zero,201cdb8 <tcp_slowtmr+0x4a4>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 201cdac:	e0bff903 	ldbu	r2,-28(fp)
 201cdb0:	10800044 	addi	r2,r2,1
 201cdb4:	e0bff905 	stb	r2,-28(fp)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 201cdb8:	e0bff717 	ldw	r2,-36(fp)
 201cdbc:	10800617 	ldw	r2,24(r2)
 201cdc0:	10800258 	cmpnei	r2,r2,9
 201cdc4:	1000091e 	bne	r2,zero,201cdec <tcp_slowtmr+0x4d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 201cdc8:	d0e7f817 	ldw	r3,-24608(gp)
 201cdcc:	e0bff717 	ldw	r2,-36(fp)
 201cdd0:	10800a17 	ldw	r2,40(r2)
 201cdd4:	1885c83a 	sub	r2,r3,r2
 201cdd8:	10803c70 	cmpltui	r2,r2,241
 201cddc:	1000031e 	bne	r2,zero,201cdec <tcp_slowtmr+0x4d8>
        ++pcb_remove;
 201cde0:	e0bff903 	ldbu	r2,-28(fp)
 201cde4:	10800044 	addi	r2,r2,1
 201cde8:	e0bff905 	stb	r2,-28(fp)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 201cdec:	e0bff903 	ldbu	r2,-28(fp)
 201cdf0:	10003726 	beq	r2,zero,201ced0 <tcp_slowtmr+0x5bc>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
 201cdf4:	e13ff717 	ldw	r4,-36(fp)
 201cdf8:	201d9440 	call	201d944 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 201cdfc:	e0bff817 	ldw	r2,-32(fp)
 201ce00:	10000526 	beq	r2,zero,201ce18 <tcp_slowtmr+0x504>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 201ce04:	e0bff717 	ldw	r2,-36(fp)
 201ce08:	10c00317 	ldw	r3,12(r2)
 201ce0c:	e0bff817 	ldw	r2,-32(fp)
 201ce10:	10c00315 	stw	r3,12(r2)
 201ce14:	00000306 	br	201ce24 <tcp_slowtmr+0x510>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 201ce18:	e0bff717 	ldw	r2,-36(fp)
 201ce1c:	10800317 	ldw	r2,12(r2)
 201ce20:	d0a7f715 	stw	r2,-24612(gp)
      }

      if (pcb_reset) {
 201ce24:	e0bff943 	ldbu	r2,-27(fp)
 201ce28:	10001026 	beq	r2,zero,201ce6c <tcp_slowtmr+0x558>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 201ce2c:	e0bff717 	ldw	r2,-36(fp)
 201ce30:	11001517 	ldw	r4,84(r2)
 201ce34:	e0bff717 	ldw	r2,-36(fp)
 201ce38:	11400b17 	ldw	r5,44(r2)
 201ce3c:	e1bff717 	ldw	r6,-36(fp)
 201ce40:	e0bff717 	ldw	r2,-36(fp)
 201ce44:	11c00104 	addi	r7,r2,4
          pcb->local_port, pcb->remote_port);
 201ce48:	e0bff717 	ldw	r2,-36(fp)
 201ce4c:	1080078b 	ldhu	r2,30(r2)
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
      }

      if (pcb_reset) {
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 201ce50:	10bfffcc 	andi	r2,r2,65535
          pcb->local_port, pcb->remote_port);
 201ce54:	e0fff717 	ldw	r3,-36(fp)
 201ce58:	18c0080b 	ldhu	r3,32(r3)
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
      }

      if (pcb_reset) {
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 201ce5c:	18ffffcc 	andi	r3,r3,65535
 201ce60:	d8c00115 	stw	r3,4(sp)
 201ce64:	d8800015 	stw	r2,0(sp)
 201ce68:	20206e40 	call	20206e4 <tcp_rst>
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
 201ce6c:	e0bff717 	ldw	r2,-36(fp)
 201ce70:	10802417 	ldw	r2,144(r2)
 201ce74:	e0bffb15 	stw	r2,-20(fp)
      err_arg = pcb->callback_arg;
 201ce78:	e0bff717 	ldw	r2,-36(fp)
 201ce7c:	10800417 	ldw	r2,16(r2)
 201ce80:	e0bffc15 	stw	r2,-16(fp)
      pcb2 = pcb;
 201ce84:	e0bff717 	ldw	r2,-36(fp)
 201ce88:	e0bffd15 	stw	r2,-12(fp)
      pcb = pcb->next;
 201ce8c:	e0bff717 	ldw	r2,-36(fp)
 201ce90:	10800317 	ldw	r2,12(r2)
 201ce94:	e0bff715 	stw	r2,-36(fp)
      memp_free(MEMP_TCP_PCB, pcb2);
 201ce98:	e17ffd17 	ldw	r5,-12(fp)
 201ce9c:	01000084 	movi	r4,2
 201cea0:	20344ac0 	call	20344ac <memp_free>

      tcp_active_pcbs_changed = 0;
 201cea4:	d027f685 	stb	zero,-24614(gp)
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 201cea8:	e0bffb17 	ldw	r2,-20(fp)
 201ceac:	10000426 	beq	r2,zero,201cec0 <tcp_slowtmr+0x5ac>
 201ceb0:	e0bffb17 	ldw	r2,-20(fp)
 201ceb4:	017ffd84 	movi	r5,-10
 201ceb8:	e13ffc17 	ldw	r4,-16(fp)
 201cebc:	103ee83a 	callr	r2
      if (tcp_active_pcbs_changed) {
 201cec0:	d0a7f683 	ldbu	r2,-24614(gp)
 201cec4:	10803fcc 	andi	r2,r2,255
 201cec8:	10002b26 	beq	r2,zero,201cf78 <tcp_slowtmr+0x664>
        goto tcp_slowtmr_start;
 201cecc:	003e9d06 	br	201c944 <__alt_mem_mem_0+0xfcffc944>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 201ced0:	e0bff717 	ldw	r2,-36(fp)
 201ced4:	e0bff815 	stw	r2,-32(fp)
      pcb = pcb->next;
 201ced8:	e0bff717 	ldw	r2,-36(fp)
 201cedc:	10800317 	ldw	r2,12(r2)
 201cee0:	e0bff715 	stw	r2,-36(fp)

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 201cee4:	e0bff817 	ldw	r2,-32(fp)
 201cee8:	108008c3 	ldbu	r2,35(r2)
 201ceec:	10800044 	addi	r2,r2,1
 201cef0:	1007883a 	mov	r3,r2
 201cef4:	e0bff817 	ldw	r2,-32(fp)
 201cef8:	10c008c5 	stb	r3,35(r2)
      if (prev->polltmr >= prev->pollinterval) {
 201cefc:	e0bff817 	ldw	r2,-32(fp)
 201cf00:	10c008c3 	ldbu	r3,35(r2)
 201cf04:	e0bff817 	ldw	r2,-32(fp)
 201cf08:	10800903 	ldbu	r2,36(r2)
 201cf0c:	18c03fcc 	andi	r3,r3,255
 201cf10:	10803fcc 	andi	r2,r2,255
 201cf14:	18801836 	bltu	r3,r2,201cf78 <tcp_slowtmr+0x664>
        prev->polltmr = 0;
 201cf18:	e0bff817 	ldw	r2,-32(fp)
 201cf1c:	100008c5 	stb	zero,35(r2)
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 201cf20:	d027f685 	stb	zero,-24614(gp)
        TCP_EVENT_POLL(prev, err);
 201cf24:	e0bff817 	ldw	r2,-32(fp)
 201cf28:	10802317 	ldw	r2,140(r2)
 201cf2c:	10000926 	beq	r2,zero,201cf54 <tcp_slowtmr+0x640>
 201cf30:	e0bff817 	ldw	r2,-32(fp)
 201cf34:	10802317 	ldw	r2,140(r2)
 201cf38:	e0fff817 	ldw	r3,-32(fp)
 201cf3c:	18c00417 	ldw	r3,16(r3)
 201cf40:	e17ff817 	ldw	r5,-32(fp)
 201cf44:	1809883a 	mov	r4,r3
 201cf48:	103ee83a 	callr	r2
 201cf4c:	e0bff985 	stb	r2,-26(fp)
 201cf50:	00000106 	br	201cf58 <tcp_slowtmr+0x644>
 201cf54:	e03ff985 	stb	zero,-26(fp)
        if (tcp_active_pcbs_changed) {
 201cf58:	d0a7f683 	ldbu	r2,-24614(gp)
 201cf5c:	10803fcc 	andi	r2,r2,255
 201cf60:	10000126 	beq	r2,zero,201cf68 <tcp_slowtmr+0x654>
          goto tcp_slowtmr_start;
 201cf64:	003e7706 	br	201c944 <__alt_mem_mem_0+0xfcffc944>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 201cf68:	e0bff987 	ldb	r2,-26(fp)
 201cf6c:	1000021e 	bne	r2,zero,201cf78 <tcp_slowtmr+0x664>
          tcp_output(prev);
 201cf70:	e13ff817 	ldw	r4,-32(fp)
 201cf74:	201f6380 	call	201f638 <tcp_output>
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 201cf78:	e0bff717 	ldw	r2,-36(fp)
 201cf7c:	103e751e 	bne	r2,zero,201c954 <__alt_mem_mem_0+0xfcffc954>
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 201cf80:	e03ff815 	stw	zero,-32(fp)
  pcb = tcp_tw_pcbs;
 201cf84:	d0a7fc17 	ldw	r2,-24592(gp)
 201cf88:	e0bff715 	stw	r2,-36(fp)
  while (pcb != NULL) {
 201cf8c:	00002606 	br	201d028 <tcp_slowtmr+0x714>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
 201cf90:	e03ff905 	stb	zero,-28(fp)

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 201cf94:	d0e7f817 	ldw	r3,-24608(gp)
 201cf98:	e0bff717 	ldw	r2,-36(fp)
 201cf9c:	10800a17 	ldw	r2,40(r2)
 201cfa0:	1885c83a 	sub	r2,r3,r2
 201cfa4:	10803c70 	cmpltui	r2,r2,241
 201cfa8:	1000031e 	bne	r2,zero,201cfb8 <tcp_slowtmr+0x6a4>
      ++pcb_remove;
 201cfac:	e0bff903 	ldbu	r2,-28(fp)
 201cfb0:	10800044 	addi	r2,r2,1
 201cfb4:	e0bff905 	stb	r2,-28(fp)
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 201cfb8:	e0bff903 	ldbu	r2,-28(fp)
 201cfbc:	10001526 	beq	r2,zero,201d014 <tcp_slowtmr+0x700>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 201cfc0:	e13ff717 	ldw	r4,-36(fp)
 201cfc4:	201d9440 	call	201d944 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 201cfc8:	e0bff817 	ldw	r2,-32(fp)
 201cfcc:	10000526 	beq	r2,zero,201cfe4 <tcp_slowtmr+0x6d0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 201cfd0:	e0bff717 	ldw	r2,-36(fp)
 201cfd4:	10c00317 	ldw	r3,12(r2)
 201cfd8:	e0bff817 	ldw	r2,-32(fp)
 201cfdc:	10c00315 	stw	r3,12(r2)
 201cfe0:	00000306 	br	201cff0 <tcp_slowtmr+0x6dc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 201cfe4:	e0bff717 	ldw	r2,-36(fp)
 201cfe8:	10800317 	ldw	r2,12(r2)
 201cfec:	d0a7fc15 	stw	r2,-24592(gp)
      }
      pcb2 = pcb;
 201cff0:	e0bff717 	ldw	r2,-36(fp)
 201cff4:	e0bffe15 	stw	r2,-8(fp)
      pcb = pcb->next;
 201cff8:	e0bff717 	ldw	r2,-36(fp)
 201cffc:	10800317 	ldw	r2,12(r2)
 201d000:	e0bff715 	stw	r2,-36(fp)
      memp_free(MEMP_TCP_PCB, pcb2);
 201d004:	e17ffe17 	ldw	r5,-8(fp)
 201d008:	01000084 	movi	r4,2
 201d00c:	20344ac0 	call	20344ac <memp_free>
 201d010:	00000506 	br	201d028 <tcp_slowtmr+0x714>
    } else {
      prev = pcb;
 201d014:	e0bff717 	ldw	r2,-36(fp)
 201d018:	e0bff815 	stw	r2,-32(fp)
      pcb = pcb->next;
 201d01c:	e0bff717 	ldw	r2,-36(fp)
 201d020:	10800317 	ldw	r2,12(r2)
 201d024:	e0bff715 	stw	r2,-36(fp)

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
 201d028:	e0bff717 	ldw	r2,-36(fp)
 201d02c:	103fd81e 	bne	r2,zero,201cf90 <__alt_mem_mem_0+0xfcffcf90>
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}
 201d030:	0001883a 	nop
 201d034:	e6ffff04 	addi	sp,fp,-4
 201d038:	dfc00217 	ldw	ra,8(sp)
 201d03c:	df000117 	ldw	fp,4(sp)
 201d040:	dc000017 	ldw	r16,0(sp)
 201d044:	dec00304 	addi	sp,sp,12
 201d048:	f800283a 	ret

0201d04c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 201d04c:	defffc04 	addi	sp,sp,-16
 201d050:	dfc00315 	stw	ra,12(sp)
 201d054:	df000215 	stw	fp,8(sp)
 201d058:	df000204 	addi	fp,sp,8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 201d05c:	d0a7f643 	ldbu	r2,-24615(gp)
 201d060:	10800044 	addi	r2,r2,1
 201d064:	d0a7f645 	stb	r2,-24615(gp)

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 201d068:	d0a7f717 	ldw	r2,-24612(gp)
 201d06c:	e0bffe15 	stw	r2,-8(fp)

  while(pcb != NULL) {
 201d070:	00002c06 	br	201d124 <tcp_fasttmr+0xd8>
    if (pcb->last_timer != tcp_timer_ctr) {
 201d074:	e0bffe17 	ldw	r2,-8(fp)
 201d078:	10c00943 	ldbu	r3,37(r2)
 201d07c:	d0a7f643 	ldbu	r2,-24615(gp)
 201d080:	18c03fcc 	andi	r3,r3,255
 201d084:	10803fcc 	andi	r2,r2,255
 201d088:	18802626 	beq	r3,r2,201d124 <tcp_fasttmr+0xd8>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 201d08c:	d0e7f643 	ldbu	r3,-24615(gp)
 201d090:	e0bffe17 	ldw	r2,-8(fp)
 201d094:	10c00945 	stb	r3,37(r2)
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 201d098:	e0bffe17 	ldw	r2,-8(fp)
 201d09c:	10800883 	ldbu	r2,34(r2)
 201d0a0:	10803fcc 	andi	r2,r2,255
 201d0a4:	1080004c 	andi	r2,r2,1
 201d0a8:	10000f26 	beq	r2,zero,201d0e8 <tcp_fasttmr+0x9c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 201d0ac:	e0bffe17 	ldw	r2,-8(fp)
 201d0b0:	10800883 	ldbu	r2,34(r2)
 201d0b4:	10800094 	ori	r2,r2,2
 201d0b8:	1007883a 	mov	r3,r2
 201d0bc:	e0bffe17 	ldw	r2,-8(fp)
 201d0c0:	10c00885 	stb	r3,34(r2)
        tcp_output(pcb);
 201d0c4:	e13ffe17 	ldw	r4,-8(fp)
 201d0c8:	201f6380 	call	201f638 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 201d0cc:	e0bffe17 	ldw	r2,-8(fp)
 201d0d0:	10c00883 	ldbu	r3,34(r2)
 201d0d4:	00bfff04 	movi	r2,-4
 201d0d8:	1884703a 	and	r2,r3,r2
 201d0dc:	1007883a 	mov	r3,r2
 201d0e0:	e0bffe17 	ldw	r2,-8(fp)
 201d0e4:	10c00885 	stb	r3,34(r2)
      }

      next = pcb->next;
 201d0e8:	e0bffe17 	ldw	r2,-8(fp)
 201d0ec:	10800317 	ldw	r2,12(r2)
 201d0f0:	e0bfff15 	stw	r2,-4(fp)

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 201d0f4:	e0bffe17 	ldw	r2,-8(fp)
 201d0f8:	10801f17 	ldw	r2,124(r2)
 201d0fc:	10000726 	beq	r2,zero,201d11c <tcp_fasttmr+0xd0>
        tcp_active_pcbs_changed = 0;
 201d100:	d027f685 	stb	zero,-24614(gp)
        tcp_process_refused_data(pcb);
 201d104:	e13ffe17 	ldw	r4,-8(fp)
 201d108:	201d1440 	call	201d144 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 201d10c:	d0a7f683 	ldbu	r2,-24614(gp)
 201d110:	10803fcc 	andi	r2,r2,255
 201d114:	10000126 	beq	r2,zero,201d11c <tcp_fasttmr+0xd0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 201d118:	003fd306 	br	201d068 <__alt_mem_mem_0+0xfcffd068>
        }
      }
      pcb = next;
 201d11c:	e0bfff17 	ldw	r2,-4(fp)
 201d120:	e0bffe15 	stw	r2,-8(fp)
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while(pcb != NULL) {
 201d124:	e0bffe17 	ldw	r2,-8(fp)
 201d128:	103fd21e 	bne	r2,zero,201d074 <__alt_mem_mem_0+0xfcffd074>
        }
      }
      pcb = next;
    }
  }
}
 201d12c:	0001883a 	nop
 201d130:	e037883a 	mov	sp,fp
 201d134:	dfc00117 	ldw	ra,4(sp)
 201d138:	df000017 	ldw	fp,0(sp)
 201d13c:	dec00204 	addi	sp,sp,8
 201d140:	f800283a 	ret

0201d144 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 201d144:	defffb04 	addi	sp,sp,-20
 201d148:	dfc00415 	stw	ra,16(sp)
 201d14c:	df000315 	stw	fp,12(sp)
 201d150:	df000304 	addi	fp,sp,12
 201d154:	e13fff15 	stw	r4,-4(fp)
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
 201d158:	e0bfff17 	ldw	r2,-4(fp)
 201d15c:	10801f17 	ldw	r2,124(r2)
 201d160:	10800343 	ldbu	r2,13(r2)
 201d164:	e0bffd45 	stb	r2,-11(fp)
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
 201d168:	e0bfff17 	ldw	r2,-4(fp)
 201d16c:	10801f17 	ldw	r2,124(r2)
 201d170:	e0bffe15 	stw	r2,-8(fp)
  pcb->refused_data = NULL;
 201d174:	e0bfff17 	ldw	r2,-4(fp)
 201d178:	10001f15 	stw	zero,124(r2)
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 201d17c:	e0bfff17 	ldw	r2,-4(fp)
 201d180:	10802117 	ldw	r2,132(r2)
 201d184:	10000b26 	beq	r2,zero,201d1b4 <tcp_process_refused_data+0x70>
 201d188:	e0bfff17 	ldw	r2,-4(fp)
 201d18c:	10802117 	ldw	r2,132(r2)
 201d190:	e0ffff17 	ldw	r3,-4(fp)
 201d194:	18c00417 	ldw	r3,16(r3)
 201d198:	000f883a 	mov	r7,zero
 201d19c:	e1bffe17 	ldw	r6,-8(fp)
 201d1a0:	e17fff17 	ldw	r5,-4(fp)
 201d1a4:	1809883a 	mov	r4,r3
 201d1a8:	103ee83a 	callr	r2
 201d1ac:	e0bffd05 	stb	r2,-12(fp)
 201d1b0:	00000606 	br	201d1cc <tcp_process_refused_data+0x88>
 201d1b4:	000f883a 	mov	r7,zero
 201d1b8:	e1bffe17 	ldw	r6,-8(fp)
 201d1bc:	e17fff17 	ldw	r5,-4(fp)
 201d1c0:	0009883a 	mov	r4,zero
 201d1c4:	201d3e40 	call	201d3e4 <tcp_recv_null>
 201d1c8:	e0bffd05 	stb	r2,-12(fp)
  if (err == ERR_OK) {
 201d1cc:	e0bffd07 	ldb	r2,-12(fp)
 201d1d0:	1000221e 	bne	r2,zero,201d25c <tcp_process_refused_data+0x118>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
 201d1d4:	e0bffd43 	ldbu	r2,-11(fp)
 201d1d8:	1080080c 	andi	r2,r2,32
 201d1dc:	10002726 	beq	r2,zero,201d27c <tcp_process_refused_data+0x138>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
 201d1e0:	e0bfff17 	ldw	r2,-4(fp)
 201d1e4:	10800c0b 	ldhu	r2,48(r2)
 201d1e8:	10bfffcc 	andi	r2,r2,65535
 201d1ec:	10880020 	cmpeqi	r2,r2,8192
 201d1f0:	1000061e 	bne	r2,zero,201d20c <tcp_process_refused_data+0xc8>
        pcb->rcv_wnd++;
 201d1f4:	e0bfff17 	ldw	r2,-4(fp)
 201d1f8:	10800c0b 	ldhu	r2,48(r2)
 201d1fc:	10800044 	addi	r2,r2,1
 201d200:	1007883a 	mov	r3,r2
 201d204:	e0bfff17 	ldw	r2,-4(fp)
 201d208:	10c00c0d 	sth	r3,48(r2)
      }
      TCP_EVENT_CLOSED(pcb, err);
 201d20c:	e0bfff17 	ldw	r2,-4(fp)
 201d210:	10802117 	ldw	r2,132(r2)
 201d214:	10000b26 	beq	r2,zero,201d244 <tcp_process_refused_data+0x100>
 201d218:	e0bfff17 	ldw	r2,-4(fp)
 201d21c:	10802117 	ldw	r2,132(r2)
 201d220:	e0ffff17 	ldw	r3,-4(fp)
 201d224:	18c00417 	ldw	r3,16(r3)
 201d228:	000f883a 	mov	r7,zero
 201d22c:	000d883a 	mov	r6,zero
 201d230:	e17fff17 	ldw	r5,-4(fp)
 201d234:	1809883a 	mov	r4,r3
 201d238:	103ee83a 	callr	r2
 201d23c:	e0bffd05 	stb	r2,-12(fp)
 201d240:	00000106 	br	201d248 <tcp_process_refused_data+0x104>
 201d244:	e03ffd05 	stb	zero,-12(fp)
      if (err == ERR_ABRT) {
 201d248:	e0bffd07 	ldb	r2,-12(fp)
 201d24c:	10bffd98 	cmpnei	r2,r2,-10
 201d250:	10000a1e 	bne	r2,zero,201d27c <tcp_process_refused_data+0x138>
        return ERR_ABRT;
 201d254:	00bffd84 	movi	r2,-10
 201d258:	00000906 	br	201d280 <tcp_process_refused_data+0x13c>
      }
    }
  } else if (err == ERR_ABRT) {
 201d25c:	e0bffd07 	ldb	r2,-12(fp)
 201d260:	10bffd98 	cmpnei	r2,r2,-10
 201d264:	1000021e 	bne	r2,zero,201d270 <tcp_process_refused_data+0x12c>
    /* if err == ERR_ABRT, 'pcb' is already deallocated */
    /* Drop incoming packets because pcb is "full" (only if the incoming
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
 201d268:	00bffd84 	movi	r2,-10
 201d26c:	00000406 	br	201d280 <tcp_process_refused_data+0x13c>
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
 201d270:	e0bfff17 	ldw	r2,-4(fp)
 201d274:	e0fffe17 	ldw	r3,-8(fp)
 201d278:	10c01f15 	stw	r3,124(r2)
  }
  return ERR_OK;
 201d27c:	0005883a 	mov	r2,zero
}
 201d280:	e037883a 	mov	sp,fp
 201d284:	dfc00117 	ldw	ra,4(sp)
 201d288:	df000017 	ldw	fp,0(sp)
 201d28c:	dec00204 	addi	sp,sp,8
 201d290:	f800283a 	ret

0201d294 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 201d294:	defffc04 	addi	sp,sp,-16
 201d298:	dfc00315 	stw	ra,12(sp)
 201d29c:	df000215 	stw	fp,8(sp)
 201d2a0:	df000204 	addi	fp,sp,8
 201d2a4:	e13fff15 	stw	r4,-4(fp)
  while (seg != NULL) {
 201d2a8:	00000706 	br	201d2c8 <tcp_segs_free+0x34>
    struct tcp_seg *next = seg->next;
 201d2ac:	e0bfff17 	ldw	r2,-4(fp)
 201d2b0:	10800017 	ldw	r2,0(r2)
 201d2b4:	e0bffe15 	stw	r2,-8(fp)
    tcp_seg_free(seg);
 201d2b8:	e13fff17 	ldw	r4,-4(fp)
 201d2bc:	201d2e80 	call	201d2e8 <tcp_seg_free>
    seg = next;
 201d2c0:	e0bffe17 	ldw	r2,-8(fp)
 201d2c4:	e0bfff15 	stw	r2,-4(fp)
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
 201d2c8:	e0bfff17 	ldw	r2,-4(fp)
 201d2cc:	103ff71e 	bne	r2,zero,201d2ac <__alt_mem_mem_0+0xfcffd2ac>
    struct tcp_seg *next = seg->next;
    tcp_seg_free(seg);
    seg = next;
  }
}
 201d2d0:	0001883a 	nop
 201d2d4:	e037883a 	mov	sp,fp
 201d2d8:	dfc00117 	ldw	ra,4(sp)
 201d2dc:	df000017 	ldw	fp,0(sp)
 201d2e0:	dec00204 	addi	sp,sp,8
 201d2e4:	f800283a 	ret

0201d2e8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 201d2e8:	defffd04 	addi	sp,sp,-12
 201d2ec:	dfc00215 	stw	ra,8(sp)
 201d2f0:	df000115 	stw	fp,4(sp)
 201d2f4:	df000104 	addi	fp,sp,4
 201d2f8:	e13fff15 	stw	r4,-4(fp)
  if (seg != NULL) {
 201d2fc:	e0bfff17 	ldw	r2,-4(fp)
 201d300:	10000a26 	beq	r2,zero,201d32c <tcp_seg_free+0x44>
    if (seg->p != NULL) {
 201d304:	e0bfff17 	ldw	r2,-4(fp)
 201d308:	10800117 	ldw	r2,4(r2)
 201d30c:	10000426 	beq	r2,zero,201d320 <tcp_seg_free+0x38>
      pbuf_free(seg->p);
 201d310:	e0bfff17 	ldw	r2,-4(fp)
 201d314:	10800117 	ldw	r2,4(r2)
 201d318:	1009883a 	mov	r4,r2
 201d31c:	201aa200 	call	201aa20 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 201d320:	e17fff17 	ldw	r5,-4(fp)
 201d324:	01000104 	movi	r4,4
 201d328:	20344ac0 	call	20344ac <memp_free>
  }
}
 201d32c:	0001883a 	nop
 201d330:	e037883a 	mov	sp,fp
 201d334:	dfc00117 	ldw	ra,4(sp)
 201d338:	df000017 	ldw	fp,0(sp)
 201d33c:	dec00204 	addi	sp,sp,8
 201d340:	f800283a 	ret

0201d344 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 201d344:	defffd04 	addi	sp,sp,-12
 201d348:	df000215 	stw	fp,8(sp)
 201d34c:	df000204 	addi	fp,sp,8
 201d350:	e13ffe15 	stw	r4,-8(fp)
 201d354:	2805883a 	mov	r2,r5
 201d358:	e0bfff05 	stb	r2,-4(fp)
  pcb->prio = prio;
 201d35c:	e0bffe17 	ldw	r2,-8(fp)
 201d360:	e0ffff03 	ldbu	r3,-4(fp)
 201d364:	10c00705 	stb	r3,28(r2)
}
 201d368:	0001883a 	nop
 201d36c:	e037883a 	mov	sp,fp
 201d370:	df000017 	ldw	fp,0(sp)
 201d374:	dec00104 	addi	sp,sp,4
 201d378:	f800283a 	ret

0201d37c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 201d37c:	defffc04 	addi	sp,sp,-16
 201d380:	dfc00315 	stw	ra,12(sp)
 201d384:	df000215 	stw	fp,8(sp)
 201d388:	df000204 	addi	fp,sp,8
 201d38c:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 201d390:	01000104 	movi	r4,4
 201d394:	20342e00 	call	20342e0 <memp_malloc>
 201d398:	e0bffe15 	stw	r2,-8(fp)
  if (cseg == NULL) {
 201d39c:	e0bffe17 	ldw	r2,-8(fp)
 201d3a0:	1000021e 	bne	r2,zero,201d3ac <tcp_seg_copy+0x30>
    return NULL;
 201d3a4:	0005883a 	mov	r2,zero
 201d3a8:	00000906 	br	201d3d0 <tcp_seg_copy+0x54>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
 201d3ac:	01800504 	movi	r6,20
 201d3b0:	e17fff17 	ldw	r5,-4(fp)
 201d3b4:	e13ffe17 	ldw	r4,-8(fp)
 201d3b8:	2005e580 	call	2005e58 <memcpy>
  pbuf_ref(cseg->p);
 201d3bc:	e0bffe17 	ldw	r2,-8(fp)
 201d3c0:	10800117 	ldw	r2,4(r2)
 201d3c4:	1009883a 	mov	r4,r2
 201d3c8:	201abb00 	call	201abb0 <pbuf_ref>
  return cseg;
 201d3cc:	e0bffe17 	ldw	r2,-8(fp)
}
 201d3d0:	e037883a 	mov	sp,fp
 201d3d4:	dfc00117 	ldw	ra,4(sp)
 201d3d8:	df000017 	ldw	fp,0(sp)
 201d3dc:	dec00204 	addi	sp,sp,8
 201d3e0:	f800283a 	ret

0201d3e4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 201d3e4:	defffa04 	addi	sp,sp,-24
 201d3e8:	dfc00515 	stw	ra,20(sp)
 201d3ec:	df000415 	stw	fp,16(sp)
 201d3f0:	df000404 	addi	fp,sp,16
 201d3f4:	e13ffc15 	stw	r4,-16(fp)
 201d3f8:	e17ffd15 	stw	r5,-12(fp)
 201d3fc:	e1bffe15 	stw	r6,-8(fp)
 201d400:	3805883a 	mov	r2,r7
 201d404:	e0bfff05 	stb	r2,-4(fp)
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 201d408:	e0bffe17 	ldw	r2,-8(fp)
 201d40c:	10000926 	beq	r2,zero,201d434 <tcp_recv_null+0x50>
    tcp_recved(pcb, p->tot_len);
 201d410:	e0bffe17 	ldw	r2,-8(fp)
 201d414:	1080020b 	ldhu	r2,8(r2)
 201d418:	10bfffcc 	andi	r2,r2,65535
 201d41c:	100b883a 	mov	r5,r2
 201d420:	e13ffd17 	ldw	r4,-12(fp)
 201d424:	201c3fc0 	call	201c3fc <tcp_recved>
    pbuf_free(p);
 201d428:	e13ffe17 	ldw	r4,-8(fp)
 201d42c:	201aa200 	call	201aa20 <pbuf_free>
 201d430:	00000506 	br	201d448 <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
 201d434:	e0bfff07 	ldb	r2,-4(fp)
 201d438:	1000031e 	bne	r2,zero,201d448 <tcp_recv_null+0x64>
    return tcp_close(pcb);
 201d43c:	e13ffd17 	ldw	r4,-12(fp)
 201d440:	201bbc00 	call	201bbc0 <tcp_close>
 201d444:	00000106 	br	201d44c <tcp_recv_null+0x68>
  }
  return ERR_OK;
 201d448:	0005883a 	mov	r2,zero
}
 201d44c:	e037883a 	mov	sp,fp
 201d450:	dfc00117 	ldw	ra,4(sp)
 201d454:	df000017 	ldw	fp,0(sp)
 201d458:	dec00204 	addi	sp,sp,8
 201d45c:	f800283a 	ret

0201d460 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 201d460:	defff904 	addi	sp,sp,-28
 201d464:	dfc00615 	stw	ra,24(sp)
 201d468:	df000515 	stw	fp,20(sp)
 201d46c:	df000504 	addi	fp,sp,20
 201d470:	2005883a 	mov	r2,r4
 201d474:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
 201d478:	00801fc4 	movi	r2,127
 201d47c:	e0bffe05 	stb	r2,-8(fp)
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 201d480:	e03ffd15 	stw	zero,-12(fp)
  inactive = NULL;
 201d484:	e03ffc15 	stw	zero,-16(fp)
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 201d488:	d0a7f717 	ldw	r2,-24612(gp)
 201d48c:	e0bffb15 	stw	r2,-20(fp)
 201d490:	00001d06 	br	201d508 <tcp_kill_prio+0xa8>
    if (pcb->prio <= prio &&
 201d494:	e0bffb17 	ldw	r2,-20(fp)
 201d498:	10800703 	ldbu	r2,28(r2)
 201d49c:	10803fcc 	andi	r2,r2,255
 201d4a0:	e0ffff03 	ldbu	r3,-4(fp)
 201d4a4:	18801536 	bltu	r3,r2,201d4fc <tcp_kill_prio+0x9c>
       pcb->prio <= mprio &&
 201d4a8:	e0bffb17 	ldw	r2,-20(fp)
 201d4ac:	10800703 	ldbu	r2,28(r2)
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
 201d4b0:	10803fcc 	andi	r2,r2,255
 201d4b4:	e0fffe03 	ldbu	r3,-8(fp)
 201d4b8:	18801036 	bltu	r3,r2,201d4fc <tcp_kill_prio+0x9c>
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 201d4bc:	d0e7f817 	ldw	r3,-24608(gp)
 201d4c0:	e0bffb17 	ldw	r2,-20(fp)
 201d4c4:	10800a17 	ldw	r2,40(r2)
 201d4c8:	1887c83a 	sub	r3,r3,r2
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
 201d4cc:	e0bffd17 	ldw	r2,-12(fp)
 201d4d0:	18800a36 	bltu	r3,r2,201d4fc <tcp_kill_prio+0x9c>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
 201d4d4:	d0e7f817 	ldw	r3,-24608(gp)
 201d4d8:	e0bffb17 	ldw	r2,-20(fp)
 201d4dc:	10800a17 	ldw	r2,40(r2)
 201d4e0:	1885c83a 	sub	r2,r3,r2
 201d4e4:	e0bffd15 	stw	r2,-12(fp)
      inactive = pcb;
 201d4e8:	e0bffb17 	ldw	r2,-20(fp)
 201d4ec:	e0bffc15 	stw	r2,-16(fp)
      mprio = pcb->prio;
 201d4f0:	e0bffb17 	ldw	r2,-20(fp)
 201d4f4:	10800703 	ldbu	r2,28(r2)
 201d4f8:	e0bffe05 	stb	r2,-8(fp)
  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 201d4fc:	e0bffb17 	ldw	r2,-20(fp)
 201d500:	10800317 	ldw	r2,12(r2)
 201d504:	e0bffb15 	stw	r2,-20(fp)
 201d508:	e0bffb17 	ldw	r2,-20(fp)
 201d50c:	103fe11e 	bne	r2,zero,201d494 <__alt_mem_mem_0+0xfcffd494>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
 201d510:	e0bffc17 	ldw	r2,-16(fp)
 201d514:	10000226 	beq	r2,zero,201d520 <tcp_kill_prio+0xc0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 201d518:	e13ffc17 	ldw	r4,-16(fp)
 201d51c:	201be6c0 	call	201be6c <tcp_abort>
  }
}
 201d520:	0001883a 	nop
 201d524:	e037883a 	mov	sp,fp
 201d528:	dfc00117 	ldw	ra,4(sp)
 201d52c:	df000017 	ldw	fp,0(sp)
 201d530:	dec00204 	addi	sp,sp,8
 201d534:	f800283a 	ret

0201d538 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 201d538:	defffb04 	addi	sp,sp,-20
 201d53c:	dfc00415 	stw	ra,16(sp)
 201d540:	df000315 	stw	fp,12(sp)
 201d544:	df000304 	addi	fp,sp,12
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 201d548:	e03fff15 	stw	zero,-4(fp)
  inactive = NULL;
 201d54c:	e03ffe15 	stw	zero,-8(fp)
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 201d550:	d0a7fc17 	ldw	r2,-24592(gp)
 201d554:	e0bffd15 	stw	r2,-12(fp)
 201d558:	00001006 	br	201d59c <tcp_kill_timewait+0x64>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 201d55c:	d0e7f817 	ldw	r3,-24608(gp)
 201d560:	e0bffd17 	ldw	r2,-12(fp)
 201d564:	10800a17 	ldw	r2,40(r2)
 201d568:	1887c83a 	sub	r3,r3,r2
 201d56c:	e0bfff17 	ldw	r2,-4(fp)
 201d570:	18800736 	bltu	r3,r2,201d590 <tcp_kill_timewait+0x58>
      inactivity = tcp_ticks - pcb->tmr;
 201d574:	d0e7f817 	ldw	r3,-24608(gp)
 201d578:	e0bffd17 	ldw	r2,-12(fp)
 201d57c:	10800a17 	ldw	r2,40(r2)
 201d580:	1885c83a 	sub	r2,r3,r2
 201d584:	e0bfff15 	stw	r2,-4(fp)
      inactive = pcb;
 201d588:	e0bffd17 	ldw	r2,-12(fp)
 201d58c:	e0bffe15 	stw	r2,-8(fp)
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 201d590:	e0bffd17 	ldw	r2,-12(fp)
 201d594:	10800317 	ldw	r2,12(r2)
 201d598:	e0bffd15 	stw	r2,-12(fp)
 201d59c:	e0bffd17 	ldw	r2,-12(fp)
 201d5a0:	103fee1e 	bne	r2,zero,201d55c <__alt_mem_mem_0+0xfcffd55c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
 201d5a4:	e0bffe17 	ldw	r2,-8(fp)
 201d5a8:	10000226 	beq	r2,zero,201d5b4 <tcp_kill_timewait+0x7c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 201d5ac:	e13ffe17 	ldw	r4,-8(fp)
 201d5b0:	201be6c0 	call	201be6c <tcp_abort>
  }
}
 201d5b4:	0001883a 	nop
 201d5b8:	e037883a 	mov	sp,fp
 201d5bc:	dfc00117 	ldw	ra,4(sp)
 201d5c0:	df000017 	ldw	fp,0(sp)
 201d5c4:	dec00204 	addi	sp,sp,8
 201d5c8:	f800283a 	ret

0201d5cc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 201d5cc:	defffb04 	addi	sp,sp,-20
 201d5d0:	dfc00415 	stw	ra,16(sp)
 201d5d4:	df000315 	stw	fp,12(sp)
 201d5d8:	df000304 	addi	fp,sp,12
 201d5dc:	2005883a 	mov	r2,r4
 201d5e0:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 201d5e4:	01000084 	movi	r4,2
 201d5e8:	20342e00 	call	20342e0 <memp_malloc>
 201d5ec:	e0bffd15 	stw	r2,-12(fp)
  if (pcb == NULL) {
 201d5f0:	e0bffd17 	ldw	r2,-12(fp)
 201d5f4:	10001e1e 	bne	r2,zero,201d670 <tcp_alloc+0xa4>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 201d5f8:	201d5380 	call	201d538 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 201d5fc:	01000084 	movi	r4,2
 201d600:	20342e00 	call	20342e0 <memp_malloc>
 201d604:	e0bffd15 	stw	r2,-12(fp)
    if (pcb == NULL) {
 201d608:	e0bffd17 	ldw	r2,-12(fp)
 201d60c:	10000f1e 	bne	r2,zero,201d64c <tcp_alloc+0x80>
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
 201d610:	e0bfff03 	ldbu	r2,-4(fp)
 201d614:	1009883a 	mov	r4,r2
 201d618:	201d4600 	call	201d460 <tcp_kill_prio>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 201d61c:	01000084 	movi	r4,2
 201d620:	20342e00 	call	20342e0 <memp_malloc>
 201d624:	e0bffd15 	stw	r2,-12(fp)
      if (pcb != NULL) {
 201d628:	e0bffd17 	ldw	r2,-12(fp)
 201d62c:	10000726 	beq	r2,zero,201d64c <tcp_alloc+0x80>
        /* adjust err stats: memp_malloc failed twice before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 201d630:	008085f4 	movhi	r2,535
 201d634:	10a86704 	addi	r2,r2,-24164
 201d638:	10806217 	ldw	r2,392(r2)
 201d63c:	10ffffc4 	addi	r3,r2,-1
 201d640:	008085f4 	movhi	r2,535
 201d644:	10a86704 	addi	r2,r2,-24164
 201d648:	10c06215 	stw	r3,392(r2)
      }
    }
    if (pcb != NULL) {
 201d64c:	e0bffd17 	ldw	r2,-12(fp)
 201d650:	10000726 	beq	r2,zero,201d670 <tcp_alloc+0xa4>
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 201d654:	008085f4 	movhi	r2,535
 201d658:	10a86704 	addi	r2,r2,-24164
 201d65c:	10806217 	ldw	r2,392(r2)
 201d660:	10ffffc4 	addi	r3,r2,-1
 201d664:	008085f4 	movhi	r2,535
 201d668:	10a86704 	addi	r2,r2,-24164
 201d66c:	10c06215 	stw	r3,392(r2)
    }
  }
  if (pcb != NULL) {
 201d670:	e0bffd17 	ldw	r2,-12(fp)
 201d674:	10004f26 	beq	r2,zero,201d7b4 <tcp_alloc+0x1e8>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 201d678:	01802904 	movi	r6,164
 201d67c:	000b883a 	mov	r5,zero
 201d680:	e13ffd17 	ldw	r4,-12(fp)
 201d684:	2005fa00 	call	2005fa0 <memset>
    pcb->prio = prio;
 201d688:	e0bffd17 	ldw	r2,-12(fp)
 201d68c:	e0ffff03 	ldbu	r3,-4(fp)
 201d690:	10c00705 	stb	r3,28(r2)
    pcb->snd_buf = TCP_SND_BUF;
 201d694:	e0bffd17 	ldw	r2,-12(fp)
 201d698:	00c2da04 	movi	r3,2920
 201d69c:	10c01a8d 	sth	r3,106(r2)
    pcb->snd_queuelen = 0;
 201d6a0:	e0bffd17 	ldw	r2,-12(fp)
 201d6a4:	10001b0d 	sth	zero,108(r2)
    pcb->rcv_wnd = TCP_WND;
 201d6a8:	e0bffd17 	ldw	r2,-12(fp)
 201d6ac:	00c80004 	movi	r3,8192
 201d6b0:	10c00c0d 	sth	r3,48(r2)
    pcb->rcv_ann_wnd = TCP_WND;
 201d6b4:	e0bffd17 	ldw	r2,-12(fp)
 201d6b8:	00c80004 	movi	r3,8192
 201d6bc:	10c00c8d 	sth	r3,50(r2)
    pcb->tos = 0;
 201d6c0:	e0bffd17 	ldw	r2,-12(fp)
 201d6c4:	10000245 	stb	zero,9(r2)
    pcb->ttl = TCP_TTL;
 201d6c8:	e0bffd17 	ldw	r2,-12(fp)
 201d6cc:	00c01004 	movi	r3,64
 201d6d0:	10c00285 	stb	r3,10(r2)
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 201d6d4:	e0bffd17 	ldw	r2,-12(fp)
 201d6d8:	00c08604 	movi	r3,536
 201d6dc:	10c00e8d 	sth	r3,58(r2)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 201d6e0:	e0bffd17 	ldw	r2,-12(fp)
 201d6e4:	00c00184 	movi	r3,6
 201d6e8:	10c0120d 	sth	r3,72(r2)
    pcb->sa = 0;
 201d6ec:	e0bffd17 	ldw	r2,-12(fp)
 201d6f0:	1000110d 	sth	zero,68(r2)
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 201d6f4:	e0bffd17 	ldw	r2,-12(fp)
 201d6f8:	00c00184 	movi	r3,6
 201d6fc:	10c0118d 	sth	r3,70(r2)
    pcb->rtime = -1;
 201d700:	e0bffd17 	ldw	r2,-12(fp)
 201d704:	00ffffc4 	movi	r3,-1
 201d708:	10c00e0d 	sth	r3,56(r2)
    pcb->cwnd = 1;
 201d70c:	e0bffd17 	ldw	r2,-12(fp)
 201d710:	00c00044 	movi	r3,1
 201d714:	10c0140d 	sth	r3,80(r2)
    iss = tcp_next_iss();
 201d718:	201dbc00 	call	201dbc0 <tcp_next_iss>
 201d71c:	e0bffe15 	stw	r2,-8(fp)
    pcb->snd_wl2 = iss;
 201d720:	e0bffd17 	ldw	r2,-12(fp)
 201d724:	e0fffe17 	ldw	r3,-8(fp)
 201d728:	10c01715 	stw	r3,92(r2)
    pcb->snd_nxt = iss;
 201d72c:	e0bffd17 	ldw	r2,-12(fp)
 201d730:	e0fffe17 	ldw	r3,-8(fp)
 201d734:	10c01515 	stw	r3,84(r2)
    pcb->lastack = iss;
 201d738:	e0bffd17 	ldw	r2,-12(fp)
 201d73c:	e0fffe17 	ldw	r3,-8(fp)
 201d740:	10c01315 	stw	r3,76(r2)
    pcb->snd_lbb = iss;   
 201d744:	e0bffd17 	ldw	r2,-12(fp)
 201d748:	e0fffe17 	ldw	r3,-8(fp)
 201d74c:	10c01815 	stw	r3,96(r2)
    pcb->tmr = tcp_ticks;
 201d750:	d0e7f817 	ldw	r3,-24608(gp)
 201d754:	e0bffd17 	ldw	r2,-12(fp)
 201d758:	10c00a15 	stw	r3,40(r2)
    pcb->last_timer = tcp_timer_ctr;
 201d75c:	d0e7f643 	ldbu	r3,-24615(gp)
 201d760:	e0bffd17 	ldw	r2,-12(fp)
 201d764:	10c00945 	stb	r3,37(r2)

    pcb->polltmr = 0;
 201d768:	e0bffd17 	ldw	r2,-12(fp)
 201d76c:	100008c5 	stb	zero,35(r2)

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 201d770:	e0fffd17 	ldw	r3,-12(fp)
 201d774:	008080b4 	movhi	r2,514
 201d778:	10b4f904 	addi	r2,r2,-11292
 201d77c:	18802115 	stw	r2,132(r3)
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 201d780:	e0fffd17 	ldw	r3,-12(fp)
 201d784:	00801bb4 	movhi	r2,110
 201d788:	10b74004 	addi	r2,r2,-8960
 201d78c:	18802515 	stw	r2,148(r3)
    
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 201d790:	e0fffd17 	ldw	r3,-12(fp)
 201d794:	00800074 	movhi	r2,1
 201d798:	10893e04 	addi	r2,r2,9464
 201d79c:	18802615 	stw	r2,152(r3)
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 201d7a0:	e0bffd17 	ldw	r2,-12(fp)
 201d7a4:	00c00244 	movi	r3,9
 201d7a8:	10c02715 	stw	r3,156(r2)
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
 201d7ac:	e0bffd17 	ldw	r2,-12(fp)
 201d7b0:	10002885 	stb	zero,162(r2)
  }
  return pcb;
 201d7b4:	e0bffd17 	ldw	r2,-12(fp)
}
 201d7b8:	e037883a 	mov	sp,fp
 201d7bc:	dfc00117 	ldw	ra,4(sp)
 201d7c0:	df000017 	ldw	fp,0(sp)
 201d7c4:	dec00204 	addi	sp,sp,8
 201d7c8:	f800283a 	ret

0201d7cc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 201d7cc:	defffe04 	addi	sp,sp,-8
 201d7d0:	dfc00115 	stw	ra,4(sp)
 201d7d4:	df000015 	stw	fp,0(sp)
 201d7d8:	d839883a 	mov	fp,sp
  return tcp_alloc(TCP_PRIO_NORMAL);
 201d7dc:	01001004 	movi	r4,64
 201d7e0:	201d5cc0 	call	201d5cc <tcp_alloc>
}
 201d7e4:	e037883a 	mov	sp,fp
 201d7e8:	dfc00117 	ldw	ra,4(sp)
 201d7ec:	df000017 	ldw	fp,0(sp)
 201d7f0:	dec00204 	addi	sp,sp,8
 201d7f4:	f800283a 	ret

0201d7f8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */ 
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 201d7f8:	defffd04 	addi	sp,sp,-12
 201d7fc:	df000215 	stw	fp,8(sp)
 201d800:	df000204 	addi	fp,sp,8
 201d804:	e13ffe15 	stw	r4,-8(fp)
 201d808:	e17fff15 	stw	r5,-4(fp)
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
 201d80c:	e0bffe17 	ldw	r2,-8(fp)
 201d810:	e0ffff17 	ldw	r3,-4(fp)
 201d814:	10c00415 	stw	r3,16(r2)
}
 201d818:	0001883a 	nop
 201d81c:	e037883a 	mov	sp,fp
 201d820:	df000017 	ldw	fp,0(sp)
 201d824:	dec00104 	addi	sp,sp,4
 201d828:	f800283a 	ret

0201d82c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 201d82c:	defffd04 	addi	sp,sp,-12
 201d830:	df000215 	stw	fp,8(sp)
 201d834:	df000204 	addi	fp,sp,8
 201d838:	e13ffe15 	stw	r4,-8(fp)
 201d83c:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
 201d840:	e0bffe17 	ldw	r2,-8(fp)
 201d844:	e0ffff17 	ldw	r3,-4(fp)
 201d848:	10c02115 	stw	r3,132(r2)
}
 201d84c:	0001883a 	nop
 201d850:	e037883a 	mov	sp,fp
 201d854:	df000017 	ldw	fp,0(sp)
 201d858:	dec00104 	addi	sp,sp,4
 201d85c:	f800283a 	ret

0201d860 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 201d860:	defffd04 	addi	sp,sp,-12
 201d864:	df000215 	stw	fp,8(sp)
 201d868:	df000204 	addi	fp,sp,8
 201d86c:	e13ffe15 	stw	r4,-8(fp)
 201d870:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
 201d874:	e0bffe17 	ldw	r2,-8(fp)
 201d878:	e0ffff17 	ldw	r3,-4(fp)
 201d87c:	10c02015 	stw	r3,128(r2)
}
 201d880:	0001883a 	nop
 201d884:	e037883a 	mov	sp,fp
 201d888:	df000017 	ldw	fp,0(sp)
 201d88c:	dec00104 	addi	sp,sp,4
 201d890:	f800283a 	ret

0201d894 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 201d894:	defffd04 	addi	sp,sp,-12
 201d898:	df000215 	stw	fp,8(sp)
 201d89c:	df000204 	addi	fp,sp,8
 201d8a0:	e13ffe15 	stw	r4,-8(fp)
 201d8a4:	e17fff15 	stw	r5,-4(fp)
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
 201d8a8:	e0bffe17 	ldw	r2,-8(fp)
 201d8ac:	e0ffff17 	ldw	r3,-4(fp)
 201d8b0:	10c02415 	stw	r3,144(r2)
}
 201d8b4:	0001883a 	nop
 201d8b8:	e037883a 	mov	sp,fp
 201d8bc:	df000017 	ldw	fp,0(sp)
 201d8c0:	dec00104 	addi	sp,sp,4
 201d8c4:	f800283a 	ret

0201d8c8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */ 
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 201d8c8:	defffd04 	addi	sp,sp,-12
 201d8cc:	df000215 	stw	fp,8(sp)
 201d8d0:	df000204 	addi	fp,sp,8
 201d8d4:	e13ffe15 	stw	r4,-8(fp)
 201d8d8:	e17fff15 	stw	r5,-4(fp)
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
 201d8dc:	e0bffe17 	ldw	r2,-8(fp)
 201d8e0:	e0ffff17 	ldw	r3,-4(fp)
 201d8e4:	10c00515 	stw	r3,20(r2)
}
 201d8e8:	0001883a 	nop
 201d8ec:	e037883a 	mov	sp,fp
 201d8f0:	df000017 	ldw	fp,0(sp)
 201d8f4:	dec00104 	addi	sp,sp,4
 201d8f8:	f800283a 	ret

0201d8fc <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */ 
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 201d8fc:	defffc04 	addi	sp,sp,-16
 201d900:	df000315 	stw	fp,12(sp)
 201d904:	df000304 	addi	fp,sp,12
 201d908:	e13ffd15 	stw	r4,-12(fp)
 201d90c:	e17ffe15 	stw	r5,-8(fp)
 201d910:	3005883a 	mov	r2,r6
 201d914:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 201d918:	e0bffd17 	ldw	r2,-12(fp)
 201d91c:	e0fffe17 	ldw	r3,-8(fp)
 201d920:	10c02315 	stw	r3,140(r2)
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
 201d924:	e0bffd17 	ldw	r2,-12(fp)
 201d928:	e0ffff03 	ldbu	r3,-4(fp)
 201d92c:	10c00905 	stb	r3,36(r2)
}
 201d930:	0001883a 	nop
 201d934:	e037883a 	mov	sp,fp
 201d938:	df000017 	ldw	fp,0(sp)
 201d93c:	dec00104 	addi	sp,sp,4
 201d940:	f800283a 	ret

0201d944 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 201d944:	defffc04 	addi	sp,sp,-16
 201d948:	dfc00315 	stw	ra,12(sp)
 201d94c:	df000215 	stw	fp,8(sp)
 201d950:	df000204 	addi	fp,sp,8
 201d954:	e13fff15 	stw	r4,-4(fp)
  if (pcb->state != CLOSED &&
 201d958:	e0bfff17 	ldw	r2,-4(fp)
 201d95c:	10800617 	ldw	r2,24(r2)
 201d960:	10004e26 	beq	r2,zero,201da9c <tcp_pcb_purge+0x158>
     pcb->state != TIME_WAIT &&
 201d964:	e0bfff17 	ldw	r2,-4(fp)
 201d968:	10800617 	ldw	r2,24(r2)
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
 201d96c:	108002a0 	cmpeqi	r2,r2,10
 201d970:	10004a1e 	bne	r2,zero,201da9c <tcp_pcb_purge+0x158>
     pcb->state != TIME_WAIT &&
     pcb->state != LISTEN) {
 201d974:	e0bfff17 	ldw	r2,-4(fp)
 201d978:	10800617 	ldw	r2,24(r2)
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
     pcb->state != TIME_WAIT &&
 201d97c:	10800060 	cmpeqi	r2,r2,1
 201d980:	1000461e 	bne	r2,zero,201da9c <tcp_pcb_purge+0x158>
     pcb->state != LISTEN) {

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

#if TCP_LISTEN_BACKLOG
    if (pcb->state == SYN_RCVD) {
 201d984:	e0bfff17 	ldw	r2,-4(fp)
 201d988:	10800617 	ldw	r2,24(r2)
 201d98c:	108000d8 	cmpnei	r2,r2,3
 201d990:	1000201e 	bne	r2,zero,201da14 <tcp_pcb_purge+0xd0>
      /* Need to find the corresponding listen_pcb and decrease its accepts_pending */
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 201d994:	d0a7f917 	ldw	r2,-24604(gp)
 201d998:	e0bffe15 	stw	r2,-8(fp)
 201d99c:	00001b06 	br	201da0c <tcp_pcb_purge+0xc8>
        if ((lpcb->local_port == pcb->local_port) &&
 201d9a0:	e0bffe17 	ldw	r2,-8(fp)
 201d9a4:	10c0078b 	ldhu	r3,30(r2)
 201d9a8:	e0bfff17 	ldw	r2,-4(fp)
 201d9ac:	1080078b 	ldhu	r2,30(r2)
 201d9b0:	18ffffcc 	andi	r3,r3,65535
 201d9b4:	10bfffcc 	andi	r2,r2,65535
 201d9b8:	1880111e 	bne	r3,r2,201da00 <tcp_pcb_purge+0xbc>
            (ip_addr_isany(&lpcb->local_ip) ||
 201d9bc:	e0bffe17 	ldw	r2,-8(fp)
      /* Need to find the corresponding listen_pcb and decrease its accepts_pending */
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
        if ((lpcb->local_port == pcb->local_port) &&
 201d9c0:	10000826 	beq	r2,zero,201d9e4 <tcp_pcb_purge+0xa0>
            (ip_addr_isany(&lpcb->local_ip) ||
 201d9c4:	e0bffe17 	ldw	r2,-8(fp)
 201d9c8:	10800017 	ldw	r2,0(r2)
 201d9cc:	10000526 	beq	r2,zero,201d9e4 <tcp_pcb_purge+0xa0>
             ip_addr_cmp(&pcb->local_ip, &lpcb->local_ip))) {
 201d9d0:	e0bfff17 	ldw	r2,-4(fp)
 201d9d4:	10c00017 	ldw	r3,0(r2)
 201d9d8:	e0bffe17 	ldw	r2,-8(fp)
 201d9dc:	10800017 	ldw	r2,0(r2)
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
        if ((lpcb->local_port == pcb->local_port) &&
            (ip_addr_isany(&lpcb->local_ip) ||
 201d9e0:	1880071e 	bne	r3,r2,201da00 <tcp_pcb_purge+0xbc>
             ip_addr_cmp(&pcb->local_ip, &lpcb->local_ip))) {
            /* port and address of the listen pcb match the timed-out pcb */
            LWIP_ASSERT("tcp_pcb_purge: listen pcb does not have accepts pending",
              lpcb->accepts_pending > 0);
            lpcb->accepts_pending--;
 201d9e4:	e0bffe17 	ldw	r2,-8(fp)
 201d9e8:	10800843 	ldbu	r2,33(r2)
 201d9ec:	10bfffc4 	addi	r2,r2,-1
 201d9f0:	1007883a 	mov	r3,r2
 201d9f4:	e0bffe17 	ldw	r2,-8(fp)
 201d9f8:	10c00845 	stb	r3,33(r2)
            break;
 201d9fc:	00000506 	br	201da14 <tcp_pcb_purge+0xd0>
    if (pcb->state == SYN_RCVD) {
      /* Need to find the corresponding listen_pcb and decrease its accepts_pending */
      struct tcp_pcb_listen *lpcb;
      LWIP_ASSERT("tcp_pcb_purge: pcb->state == SYN_RCVD but tcp_listen_pcbs is NULL",
        tcp_listen_pcbs.listen_pcbs != NULL);
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 201da00:	e0bffe17 	ldw	r2,-8(fp)
 201da04:	10800317 	ldw	r2,12(r2)
 201da08:	e0bffe15 	stw	r2,-8(fp)
 201da0c:	e0bffe17 	ldw	r2,-8(fp)
 201da10:	103fe31e 	bne	r2,zero,201d9a0 <__alt_mem_mem_0+0xfcffd9a0>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
 201da14:	e0bfff17 	ldw	r2,-4(fp)
 201da18:	10801f17 	ldw	r2,124(r2)
 201da1c:	10000626 	beq	r2,zero,201da38 <tcp_pcb_purge+0xf4>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 201da20:	e0bfff17 	ldw	r2,-4(fp)
 201da24:	10801f17 	ldw	r2,124(r2)
 201da28:	1009883a 	mov	r4,r2
 201da2c:	201aa200 	call	201aa20 <pbuf_free>
      pcb->refused_data = NULL;
 201da30:	e0bfff17 	ldw	r2,-4(fp)
 201da34:	10001f15 	stw	zero,124(r2)
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 201da38:	e0bfff17 	ldw	r2,-4(fp)
 201da3c:	10801e17 	ldw	r2,120(r2)
 201da40:	1009883a 	mov	r4,r2
 201da44:	201d2940 	call	201d294 <tcp_segs_free>
    pcb->ooseq = NULL;
 201da48:	e0bfff17 	ldw	r2,-4(fp)
 201da4c:	10001e15 	stw	zero,120(r2)
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 201da50:	e0bfff17 	ldw	r2,-4(fp)
 201da54:	00ffffc4 	movi	r3,-1
 201da58:	10c00e0d 	sth	r3,56(r2)

    tcp_segs_free(pcb->unsent);
 201da5c:	e0bfff17 	ldw	r2,-4(fp)
 201da60:	10801c17 	ldw	r2,112(r2)
 201da64:	1009883a 	mov	r4,r2
 201da68:	201d2940 	call	201d294 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 201da6c:	e0bfff17 	ldw	r2,-4(fp)
 201da70:	10801d17 	ldw	r2,116(r2)
 201da74:	1009883a 	mov	r4,r2
 201da78:	201d2940 	call	201d294 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 201da7c:	e0bfff17 	ldw	r2,-4(fp)
 201da80:	10001c15 	stw	zero,112(r2)
 201da84:	e0bfff17 	ldw	r2,-4(fp)
 201da88:	10c01c17 	ldw	r3,112(r2)
 201da8c:	e0bfff17 	ldw	r2,-4(fp)
 201da90:	10c01d15 	stw	r3,116(r2)
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 201da94:	e0bfff17 	ldw	r2,-4(fp)
 201da98:	10001b8d 	sth	zero,110(r2)
#endif /* TCP_OVERSIZE */
  }
}
 201da9c:	0001883a 	nop
 201daa0:	e037883a 	mov	sp,fp
 201daa4:	dfc00117 	ldw	ra,4(sp)
 201daa8:	df000017 	ldw	fp,0(sp)
 201daac:	dec00204 	addi	sp,sp,8
 201dab0:	f800283a 	ret

0201dab4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 201dab4:	defffc04 	addi	sp,sp,-16
 201dab8:	dfc00315 	stw	ra,12(sp)
 201dabc:	df000215 	stw	fp,8(sp)
 201dac0:	df000204 	addi	fp,sp,8
 201dac4:	e13ffe15 	stw	r4,-8(fp)
 201dac8:	e17fff15 	stw	r5,-4(fp)
  TCP_RMV(pcblist, pcb);
 201dacc:	e0bffe17 	ldw	r2,-8(fp)
 201dad0:	10c00017 	ldw	r3,0(r2)
 201dad4:	e0bfff17 	ldw	r2,-4(fp)
 201dad8:	1880061e 	bne	r3,r2,201daf4 <tcp_pcb_remove+0x40>
 201dadc:	e0bffe17 	ldw	r2,-8(fp)
 201dae0:	10800017 	ldw	r2,0(r2)
 201dae4:	10c00317 	ldw	r3,12(r2)
 201dae8:	e0bffe17 	ldw	r2,-8(fp)
 201daec:	10c00015 	stw	r3,0(r2)
 201daf0:	00001206 	br	201db3c <tcp_pcb_remove+0x88>
 201daf4:	e0bffe17 	ldw	r2,-8(fp)
 201daf8:	10800017 	ldw	r2,0(r2)
 201dafc:	d0a7fa15 	stw	r2,-24600(gp)
 201db00:	00000c06 	br	201db34 <tcp_pcb_remove+0x80>
 201db04:	d0a7fa17 	ldw	r2,-24600(gp)
 201db08:	10c00317 	ldw	r3,12(r2)
 201db0c:	e0bfff17 	ldw	r2,-4(fp)
 201db10:	1880051e 	bne	r3,r2,201db28 <tcp_pcb_remove+0x74>
 201db14:	d0a7fa17 	ldw	r2,-24600(gp)
 201db18:	e0ffff17 	ldw	r3,-4(fp)
 201db1c:	18c00317 	ldw	r3,12(r3)
 201db20:	10c00315 	stw	r3,12(r2)
 201db24:	00000506 	br	201db3c <tcp_pcb_remove+0x88>
 201db28:	d0a7fa17 	ldw	r2,-24600(gp)
 201db2c:	10800317 	ldw	r2,12(r2)
 201db30:	d0a7fa15 	stw	r2,-24600(gp)
 201db34:	d0a7fa17 	ldw	r2,-24600(gp)
 201db38:	103ff21e 	bne	r2,zero,201db04 <__alt_mem_mem_0+0xfcffdb04>
 201db3c:	e0bfff17 	ldw	r2,-4(fp)
 201db40:	10000315 	stw	zero,12(r2)

  tcp_pcb_purge(pcb);
 201db44:	e13fff17 	ldw	r4,-4(fp)
 201db48:	201d9440 	call	201d944 <tcp_pcb_purge>
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 201db4c:	e0bfff17 	ldw	r2,-4(fp)
 201db50:	10800617 	ldw	r2,24(r2)
 201db54:	108002a0 	cmpeqi	r2,r2,10
 201db58:	1000111e 	bne	r2,zero,201dba0 <tcp_pcb_remove+0xec>
     pcb->state != LISTEN &&
 201db5c:	e0bfff17 	ldw	r2,-4(fp)
 201db60:	10800617 	ldw	r2,24(r2)
  TCP_RMV(pcblist, pcb);

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 201db64:	10800060 	cmpeqi	r2,r2,1
 201db68:	10000d1e 	bne	r2,zero,201dba0 <tcp_pcb_remove+0xec>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 201db6c:	e0bfff17 	ldw	r2,-4(fp)
 201db70:	10800883 	ldbu	r2,34(r2)
 201db74:	10803fcc 	andi	r2,r2,255
 201db78:	1080004c 	andi	r2,r2,1

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
 201db7c:	10000826 	beq	r2,zero,201dba0 <tcp_pcb_remove+0xec>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
 201db80:	e0bfff17 	ldw	r2,-4(fp)
 201db84:	10800883 	ldbu	r2,34(r2)
 201db88:	10800094 	ori	r2,r2,2
 201db8c:	1007883a 	mov	r3,r2
 201db90:	e0bfff17 	ldw	r2,-4(fp)
 201db94:	10c00885 	stb	r3,34(r2)
    tcp_output(pcb);
 201db98:	e13fff17 	ldw	r4,-4(fp)
 201db9c:	201f6380 	call	201f638 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 201dba0:	e0bfff17 	ldw	r2,-4(fp)
 201dba4:	10000615 	stw	zero,24(r2)

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 201dba8:	0001883a 	nop
 201dbac:	e037883a 	mov	sp,fp
 201dbb0:	dfc00117 	ldw	ra,4(sp)
 201dbb4:	df000017 	ldw	fp,0(sp)
 201dbb8:	dec00204 	addi	sp,sp,8
 201dbbc:	f800283a 	ret

0201dbc0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
 201dbc0:	deffff04 	addi	sp,sp,-4
 201dbc4:	df000015 	stw	fp,0(sp)
 201dbc8:	d839883a 	mov	fp,sp
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
 201dbcc:	d0e01217 	ldw	r3,-32696(gp)
 201dbd0:	d0a7f817 	ldw	r2,-24608(gp)
 201dbd4:	1885883a 	add	r2,r3,r2
 201dbd8:	d0a01215 	stw	r2,-32696(gp)
  return iss;
 201dbdc:	d0a01217 	ldw	r2,-32696(gp)
}
 201dbe0:	e037883a 	mov	sp,fp
 201dbe4:	df000017 	ldw	fp,0(sp)
 201dbe8:	dec00104 	addi	sp,sp,4
 201dbec:	f800283a 	ret

0201dbf0 <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *src, ip_addr_t *addr)
{
 201dbf0:	defff904 	addi	sp,sp,-28
 201dbf4:	dfc00615 	stw	ra,24(sp)
 201dbf8:	df000515 	stw	fp,20(sp)
 201dbfc:	df000504 	addi	fp,sp,20
 201dc00:	2005883a 	mov	r2,r4
 201dc04:	e17ffe15 	stw	r5,-8(fp)
 201dc08:	e1bfff15 	stw	r6,-4(fp)
 201dc0c:	e0bffd0d 	sth	r2,-12(fp)
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(src, addr);
 201dc10:	e17fff17 	ldw	r5,-4(fp)
 201dc14:	e13ffe17 	ldw	r4,-8(fp)
 201dc18:	2031bc80 	call	2031bc8 <ip_route>
 201dc1c:	e0bffb15 	stw	r2,-20(fp)
  if ((outif != NULL) && (outif->mtu != 0)) {
 201dc20:	e0bffb17 	ldw	r2,-20(fp)
 201dc24:	10000f26 	beq	r2,zero,201dc64 <tcp_eff_send_mss+0x74>
 201dc28:	e0bffb17 	ldw	r2,-20(fp)
 201dc2c:	10800c0b 	ldhu	r2,48(r2)
 201dc30:	10bfffcc 	andi	r2,r2,65535
 201dc34:	10000b26 	beq	r2,zero,201dc64 <tcp_eff_send_mss+0x74>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
 201dc38:	e0bffb17 	ldw	r2,-20(fp)
 201dc3c:	10800c0b 	ldhu	r2,48(r2)
 201dc40:	10bff604 	addi	r2,r2,-40
 201dc44:	e0bffc0d 	sth	r2,-16(fp)
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 201dc48:	e17ffd0b 	ldhu	r5,-12(fp)
 201dc4c:	e0bffc0b 	ldhu	r2,-16(fp)
 201dc50:	10ffffcc 	andi	r3,r2,65535
 201dc54:	293fffcc 	andi	r4,r5,65535
 201dc58:	20c0012e 	bgeu	r4,r3,201dc60 <tcp_eff_send_mss+0x70>
 201dc5c:	2805883a 	mov	r2,r5
 201dc60:	e0bffd0d 	sth	r2,-12(fp)
  }
  return sendmss;
 201dc64:	e0bffd0b 	ldhu	r2,-12(fp)
}
 201dc68:	e037883a 	mov	sp,fp
 201dc6c:	dfc00117 	ldw	ra,4(sp)
 201dc70:	df000017 	ldw	fp,0(sp)
 201dc74:	dec00204 	addi	sp,sp,8
 201dc78:	f800283a 	ret

0201dc7c <tcp_debug_state_str>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

const char*
tcp_debug_state_str(enum tcp_state s)
{
 201dc7c:	defffe04 	addi	sp,sp,-8
 201dc80:	df000115 	stw	fp,4(sp)
 201dc84:	df000104 	addi	fp,sp,4
 201dc88:	e13fff15 	stw	r4,-4(fp)
  return tcp_state_str[s];
 201dc8c:	00808134 	movhi	r2,516
 201dc90:	10856004 	addi	r2,r2,5504
 201dc94:	e0ffff17 	ldw	r3,-4(fp)
 201dc98:	18c7883a 	add	r3,r3,r3
 201dc9c:	18c7883a 	add	r3,r3,r3
 201dca0:	10c5883a 	add	r2,r2,r3
 201dca4:	10800017 	ldw	r2,0(r2)
}
 201dca8:	e037883a 	mov	sp,fp
 201dcac:	df000017 	ldw	fp,0(sp)
 201dcb0:	dec00104 	addi	sp,sp,4
 201dcb4:	f800283a 	ret

0201dcb8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 201dcb8:	defff804 	addi	sp,sp,-32
 201dcbc:	dfc00715 	stw	ra,28(sp)
 201dcc0:	df000615 	stw	fp,24(sp)
 201dcc4:	df000604 	addi	fp,sp,24
 201dcc8:	e13ffc15 	stw	r4,-16(fp)
 201dccc:	2807883a 	mov	r3,r5
 201dcd0:	3005883a 	mov	r2,r6
 201dcd4:	e1ffff15 	stw	r7,-4(fp)
 201dcd8:	e0fffd0d 	sth	r3,-12(fp)
 201dcdc:	e0bffe0d 	sth	r2,-8(fp)
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 201dce0:	e0fffd0b 	ldhu	r3,-12(fp)
 201dce4:	e0bffe0b 	ldhu	r2,-8(fp)
 201dce8:	1885883a 	add	r2,r3,r2
 201dcec:	10800504 	addi	r2,r2,20
 201dcf0:	10bfffcc 	andi	r2,r2,65535
 201dcf4:	000d883a 	mov	r6,zero
 201dcf8:	100b883a 	mov	r5,r2
 201dcfc:	01000044 	movi	r4,1
 201dd00:	201a2640 	call	201a264 <pbuf_alloc>
 201dd04:	e0bffa15 	stw	r2,-24(fp)
  if (p != NULL) {
 201dd08:	e0bffa17 	ldw	r2,-24(fp)
 201dd0c:	1000de26 	beq	r2,zero,201e088 <tcp_output_alloc_header+0x3d0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 201dd10:	e0bffa17 	ldw	r2,-24(fp)
 201dd14:	10800117 	ldw	r2,4(r2)
 201dd18:	e0bffb15 	stw	r2,-20(fp)
    tcphdr->src = htons(pcb->local_port);
 201dd1c:	e0bffc17 	ldw	r2,-16(fp)
 201dd20:	1080078b 	ldhu	r2,30(r2)
 201dd24:	10bfffcc 	andi	r2,r2,65535
 201dd28:	1004d23a 	srli	r2,r2,8
 201dd2c:	1007883a 	mov	r3,r2
 201dd30:	e0bffc17 	ldw	r2,-16(fp)
 201dd34:	1080078b 	ldhu	r2,30(r2)
 201dd38:	10bfffcc 	andi	r2,r2,65535
 201dd3c:	1004923a 	slli	r2,r2,8
 201dd40:	1884b03a 	or	r2,r3,r2
 201dd44:	100d883a 	mov	r6,r2
 201dd48:	e0bffb17 	ldw	r2,-20(fp)
 201dd4c:	30ffffcc 	andi	r3,r6,65535
 201dd50:	19403fcc 	andi	r5,r3,255
 201dd54:	10c00003 	ldbu	r3,0(r2)
 201dd58:	1806703a 	and	r3,r3,zero
 201dd5c:	1809883a 	mov	r4,r3
 201dd60:	2807883a 	mov	r3,r5
 201dd64:	20c6b03a 	or	r3,r4,r3
 201dd68:	10c00005 	stb	r3,0(r2)
 201dd6c:	30ffffcc 	andi	r3,r6,65535
 201dd70:	1806d23a 	srli	r3,r3,8
 201dd74:	197fffcc 	andi	r5,r3,65535
 201dd78:	10c00043 	ldbu	r3,1(r2)
 201dd7c:	1806703a 	and	r3,r3,zero
 201dd80:	1809883a 	mov	r4,r3
 201dd84:	2807883a 	mov	r3,r5
 201dd88:	20c6b03a 	or	r3,r4,r3
 201dd8c:	10c00045 	stb	r3,1(r2)
    tcphdr->dest = htons(pcb->remote_port);
 201dd90:	e0bffc17 	ldw	r2,-16(fp)
 201dd94:	1080080b 	ldhu	r2,32(r2)
 201dd98:	10bfffcc 	andi	r2,r2,65535
 201dd9c:	1004d23a 	srli	r2,r2,8
 201dda0:	1007883a 	mov	r3,r2
 201dda4:	e0bffc17 	ldw	r2,-16(fp)
 201dda8:	1080080b 	ldhu	r2,32(r2)
 201ddac:	10bfffcc 	andi	r2,r2,65535
 201ddb0:	1004923a 	slli	r2,r2,8
 201ddb4:	1884b03a 	or	r2,r3,r2
 201ddb8:	100d883a 	mov	r6,r2
 201ddbc:	e0bffb17 	ldw	r2,-20(fp)
 201ddc0:	30ffffcc 	andi	r3,r6,65535
 201ddc4:	19403fcc 	andi	r5,r3,255
 201ddc8:	10c00083 	ldbu	r3,2(r2)
 201ddcc:	1806703a 	and	r3,r3,zero
 201ddd0:	1809883a 	mov	r4,r3
 201ddd4:	2807883a 	mov	r3,r5
 201ddd8:	20c6b03a 	or	r3,r4,r3
 201dddc:	10c00085 	stb	r3,2(r2)
 201dde0:	30ffffcc 	andi	r3,r6,65535
 201dde4:	1806d23a 	srli	r3,r3,8
 201dde8:	197fffcc 	andi	r5,r3,65535
 201ddec:	10c000c3 	ldbu	r3,3(r2)
 201ddf0:	1806703a 	and	r3,r3,zero
 201ddf4:	1809883a 	mov	r4,r3
 201ddf8:	2807883a 	mov	r3,r5
 201ddfc:	20c6b03a 	or	r3,r4,r3
 201de00:	10c000c5 	stb	r3,3(r2)
    tcphdr->seqno = seqno_be;
 201de04:	e0bffb17 	ldw	r2,-20(fp)
 201de08:	e0ffff17 	ldw	r3,-4(fp)
 201de0c:	19403fcc 	andi	r5,r3,255
 201de10:	10c00103 	ldbu	r3,4(r2)
 201de14:	1806703a 	and	r3,r3,zero
 201de18:	1809883a 	mov	r4,r3
 201de1c:	2807883a 	mov	r3,r5
 201de20:	20c6b03a 	or	r3,r4,r3
 201de24:	10c00105 	stb	r3,4(r2)
 201de28:	e0ffff17 	ldw	r3,-4(fp)
 201de2c:	1806d23a 	srli	r3,r3,8
 201de30:	19403fcc 	andi	r5,r3,255
 201de34:	10c00143 	ldbu	r3,5(r2)
 201de38:	1806703a 	and	r3,r3,zero
 201de3c:	1809883a 	mov	r4,r3
 201de40:	2807883a 	mov	r3,r5
 201de44:	20c6b03a 	or	r3,r4,r3
 201de48:	10c00145 	stb	r3,5(r2)
 201de4c:	e0ffff17 	ldw	r3,-4(fp)
 201de50:	1806d43a 	srli	r3,r3,16
 201de54:	19403fcc 	andi	r5,r3,255
 201de58:	10c00183 	ldbu	r3,6(r2)
 201de5c:	1806703a 	and	r3,r3,zero
 201de60:	1809883a 	mov	r4,r3
 201de64:	2807883a 	mov	r3,r5
 201de68:	20c6b03a 	or	r3,r4,r3
 201de6c:	10c00185 	stb	r3,6(r2)
 201de70:	e0ffff17 	ldw	r3,-4(fp)
 201de74:	180ad63a 	srli	r5,r3,24
 201de78:	10c001c3 	ldbu	r3,7(r2)
 201de7c:	1806703a 	and	r3,r3,zero
 201de80:	1809883a 	mov	r4,r3
 201de84:	2807883a 	mov	r3,r5
 201de88:	20c6b03a 	or	r3,r4,r3
 201de8c:	10c001c5 	stb	r3,7(r2)
    tcphdr->ackno = htonl(pcb->rcv_nxt);
 201de90:	e0bffc17 	ldw	r2,-16(fp)
 201de94:	10800b17 	ldw	r2,44(r2)
 201de98:	1006d63a 	srli	r3,r2,24
 201de9c:	e0bffc17 	ldw	r2,-16(fp)
 201dea0:	10800b17 	ldw	r2,44(r2)
 201dea4:	1004d23a 	srli	r2,r2,8
 201dea8:	10bfc00c 	andi	r2,r2,65280
 201deac:	1886b03a 	or	r3,r3,r2
 201deb0:	e0bffc17 	ldw	r2,-16(fp)
 201deb4:	10800b17 	ldw	r2,44(r2)
 201deb8:	10bfc00c 	andi	r2,r2,65280
 201debc:	1004923a 	slli	r2,r2,8
 201dec0:	1886b03a 	or	r3,r3,r2
 201dec4:	e0bffc17 	ldw	r2,-16(fp)
 201dec8:	10800b17 	ldw	r2,44(r2)
 201decc:	1004963a 	slli	r2,r2,24
 201ded0:	1886b03a 	or	r3,r3,r2
 201ded4:	e0bffb17 	ldw	r2,-20(fp)
 201ded8:	19803fcc 	andi	r6,r3,255
 201dedc:	11000203 	ldbu	r4,8(r2)
 201dee0:	2008703a 	and	r4,r4,zero
 201dee4:	200b883a 	mov	r5,r4
 201dee8:	3009883a 	mov	r4,r6
 201deec:	2908b03a 	or	r4,r5,r4
 201def0:	11000205 	stb	r4,8(r2)
 201def4:	1808d23a 	srli	r4,r3,8
 201def8:	21803fcc 	andi	r6,r4,255
 201defc:	11000243 	ldbu	r4,9(r2)
 201df00:	2008703a 	and	r4,r4,zero
 201df04:	200b883a 	mov	r5,r4
 201df08:	3009883a 	mov	r4,r6
 201df0c:	2908b03a 	or	r4,r5,r4
 201df10:	11000245 	stb	r4,9(r2)
 201df14:	1808d43a 	srli	r4,r3,16
 201df18:	21803fcc 	andi	r6,r4,255
 201df1c:	11000283 	ldbu	r4,10(r2)
 201df20:	2008703a 	and	r4,r4,zero
 201df24:	200b883a 	mov	r5,r4
 201df28:	3009883a 	mov	r4,r6
 201df2c:	2908b03a 	or	r4,r5,r4
 201df30:	11000285 	stb	r4,10(r2)
 201df34:	180ad63a 	srli	r5,r3,24
 201df38:	10c002c3 	ldbu	r3,11(r2)
 201df3c:	1806703a 	and	r3,r3,zero
 201df40:	1809883a 	mov	r4,r3
 201df44:	2807883a 	mov	r3,r5
 201df48:	20c6b03a 	or	r3,r4,r3
 201df4c:	10c002c5 	stb	r3,11(r2)
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 201df50:	e0bffd0b 	ldhu	r2,-12(fp)
 201df54:	1004d0ba 	srli	r2,r2,2
 201df58:	10bfffcc 	andi	r2,r2,65535
 201df5c:	10800144 	addi	r2,r2,5
 201df60:	1004933a 	slli	r2,r2,12
 201df64:	10bfffcc 	andi	r2,r2,65535
 201df68:	1004d23a 	srli	r2,r2,8
 201df6c:	10840014 	ori	r2,r2,4096
 201df70:	100d883a 	mov	r6,r2
 201df74:	e0bffb17 	ldw	r2,-20(fp)
 201df78:	30ffffcc 	andi	r3,r6,65535
 201df7c:	19403fcc 	andi	r5,r3,255
 201df80:	10c00303 	ldbu	r3,12(r2)
 201df84:	1806703a 	and	r3,r3,zero
 201df88:	1809883a 	mov	r4,r3
 201df8c:	2807883a 	mov	r3,r5
 201df90:	20c6b03a 	or	r3,r4,r3
 201df94:	10c00305 	stb	r3,12(r2)
 201df98:	30ffffcc 	andi	r3,r6,65535
 201df9c:	1806d23a 	srli	r3,r3,8
 201dfa0:	197fffcc 	andi	r5,r3,65535
 201dfa4:	10c00343 	ldbu	r3,13(r2)
 201dfa8:	1806703a 	and	r3,r3,zero
 201dfac:	1809883a 	mov	r4,r3
 201dfb0:	2807883a 	mov	r3,r5
 201dfb4:	20c6b03a 	or	r3,r4,r3
 201dfb8:	10c00345 	stb	r3,13(r2)
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 201dfbc:	e0bffc17 	ldw	r2,-16(fp)
 201dfc0:	10800c8b 	ldhu	r2,50(r2)
 201dfc4:	10bfffcc 	andi	r2,r2,65535
 201dfc8:	1004d23a 	srli	r2,r2,8
 201dfcc:	1007883a 	mov	r3,r2
 201dfd0:	e0bffc17 	ldw	r2,-16(fp)
 201dfd4:	10800c8b 	ldhu	r2,50(r2)
 201dfd8:	10bfffcc 	andi	r2,r2,65535
 201dfdc:	1004923a 	slli	r2,r2,8
 201dfe0:	1884b03a 	or	r2,r3,r2
 201dfe4:	100d883a 	mov	r6,r2
 201dfe8:	e0bffb17 	ldw	r2,-20(fp)
 201dfec:	30ffffcc 	andi	r3,r6,65535
 201dff0:	19403fcc 	andi	r5,r3,255
 201dff4:	10c00383 	ldbu	r3,14(r2)
 201dff8:	1806703a 	and	r3,r3,zero
 201dffc:	1809883a 	mov	r4,r3
 201e000:	2807883a 	mov	r3,r5
 201e004:	20c6b03a 	or	r3,r4,r3
 201e008:	10c00385 	stb	r3,14(r2)
 201e00c:	30ffffcc 	andi	r3,r6,65535
 201e010:	1806d23a 	srli	r3,r3,8
 201e014:	197fffcc 	andi	r5,r3,65535
 201e018:	10c003c3 	ldbu	r3,15(r2)
 201e01c:	1806703a 	and	r3,r3,zero
 201e020:	1809883a 	mov	r4,r3
 201e024:	2807883a 	mov	r3,r5
 201e028:	20c6b03a 	or	r3,r4,r3
 201e02c:	10c003c5 	stb	r3,15(r2)
    tcphdr->chksum = 0;
 201e030:	e0bffb17 	ldw	r2,-20(fp)
 201e034:	10c00403 	ldbu	r3,16(r2)
 201e038:	1806703a 	and	r3,r3,zero
 201e03c:	10c00405 	stb	r3,16(r2)
 201e040:	10c00443 	ldbu	r3,17(r2)
 201e044:	1806703a 	and	r3,r3,zero
 201e048:	10c00445 	stb	r3,17(r2)
    tcphdr->urgp = 0;
 201e04c:	e0bffb17 	ldw	r2,-20(fp)
 201e050:	10c00483 	ldbu	r3,18(r2)
 201e054:	1806703a 	and	r3,r3,zero
 201e058:	10c00485 	stb	r3,18(r2)
 201e05c:	10c004c3 	ldbu	r3,19(r2)
 201e060:	1806703a 	and	r3,r3,zero
 201e064:	10c004c5 	stb	r3,19(r2)

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 201e068:	e0bffc17 	ldw	r2,-16(fp)
 201e06c:	10c00b17 	ldw	r3,44(r2)
 201e070:	e0bffc17 	ldw	r2,-16(fp)
 201e074:	10800c8b 	ldhu	r2,50(r2)
 201e078:	10bfffcc 	andi	r2,r2,65535
 201e07c:	1887883a 	add	r3,r3,r2
 201e080:	e0bffc17 	ldw	r2,-16(fp)
 201e084:	10c00d15 	stw	r3,52(r2)
  }
  return p;
 201e088:	e0bffa17 	ldw	r2,-24(fp)
}
 201e08c:	e037883a 	mov	sp,fp
 201e090:	dfc00117 	ldw	ra,4(sp)
 201e094:	df000017 	ldw	fp,0(sp)
 201e098:	dec00204 	addi	sp,sp,8
 201e09c:	f800283a 	ret

0201e0a0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 201e0a0:	defffc04 	addi	sp,sp,-16
 201e0a4:	dfc00315 	stw	ra,12(sp)
 201e0a8:	df000215 	stw	fp,8(sp)
 201e0ac:	df000204 	addi	fp,sp,8
 201e0b0:	e13fff15 	stw	r4,-4(fp)
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 201e0b4:	e0bfff17 	ldw	r2,-4(fp)
 201e0b8:	10801c17 	ldw	r2,112(r2)
 201e0bc:	10004226 	beq	r2,zero,201e1c8 <tcp_send_fin+0x128>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 201e0c0:	e0bfff17 	ldw	r2,-4(fp)
 201e0c4:	10801c17 	ldw	r2,112(r2)
 201e0c8:	e0bffe15 	stw	r2,-8(fp)
 201e0cc:	00000306 	br	201e0dc <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
 201e0d0:	e0bffe17 	ldw	r2,-8(fp)
 201e0d4:	10800017 	ldw	r2,0(r2)
 201e0d8:	e0bffe15 	stw	r2,-8(fp)
tcp_send_fin(struct tcp_pcb *pcb)
{
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 201e0dc:	e0bffe17 	ldw	r2,-8(fp)
 201e0e0:	10800017 	ldw	r2,0(r2)
 201e0e4:	103ffa1e 	bne	r2,zero,201e0d0 <__alt_mem_mem_0+0xfcffe0d0>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 201e0e8:	e0bffe17 	ldw	r2,-8(fp)
 201e0ec:	10800417 	ldw	r2,16(r2)
 201e0f0:	10c00303 	ldbu	r3,12(r2)
 201e0f4:	10800343 	ldbu	r2,13(r2)
 201e0f8:	1004923a 	slli	r2,r2,8
 201e0fc:	10c4b03a 	or	r2,r2,r3
 201e100:	10bfffcc 	andi	r2,r2,65535
 201e104:	1004d23a 	srli	r2,r2,8
 201e108:	10ffffcc 	andi	r3,r2,65535
 201e10c:	e0bffe17 	ldw	r2,-8(fp)
 201e110:	10800417 	ldw	r2,16(r2)
 201e114:	11000303 	ldbu	r4,12(r2)
 201e118:	10800343 	ldbu	r2,13(r2)
 201e11c:	1004923a 	slli	r2,r2,8
 201e120:	1104b03a 	or	r2,r2,r4
 201e124:	10bfffcc 	andi	r2,r2,65535
 201e128:	1004923a 	slli	r2,r2,8
 201e12c:	10bfffcc 	andi	r2,r2,65535
 201e130:	1884b03a 	or	r2,r3,r2
 201e134:	108001cc 	andi	r2,r2,7
 201e138:	1000231e 	bne	r2,zero,201e1c8 <tcp_send_fin+0x128>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 201e13c:	e0bffe17 	ldw	r2,-8(fp)
 201e140:	10800417 	ldw	r2,16(r2)
 201e144:	e0fffe17 	ldw	r3,-8(fp)
 201e148:	18c00417 	ldw	r3,16(r3)
 201e14c:	19000303 	ldbu	r4,12(r3)
 201e150:	18c00343 	ldbu	r3,13(r3)
 201e154:	1806923a 	slli	r3,r3,8
 201e158:	1906b03a 	or	r3,r3,r4
 201e15c:	18c04014 	ori	r3,r3,256
 201e160:	180d883a 	mov	r6,r3
 201e164:	30ffffcc 	andi	r3,r6,65535
 201e168:	19403fcc 	andi	r5,r3,255
 201e16c:	10c00303 	ldbu	r3,12(r2)
 201e170:	1806703a 	and	r3,r3,zero
 201e174:	1809883a 	mov	r4,r3
 201e178:	2807883a 	mov	r3,r5
 201e17c:	20c6b03a 	or	r3,r4,r3
 201e180:	10c00305 	stb	r3,12(r2)
 201e184:	30ffffcc 	andi	r3,r6,65535
 201e188:	1806d23a 	srli	r3,r3,8
 201e18c:	197fffcc 	andi	r5,r3,65535
 201e190:	10c00343 	ldbu	r3,13(r2)
 201e194:	1806703a 	and	r3,r3,zero
 201e198:	1809883a 	mov	r4,r3
 201e19c:	2807883a 	mov	r3,r5
 201e1a0:	20c6b03a 	or	r3,r4,r3
 201e1a4:	10c00345 	stb	r3,13(r2)
      pcb->flags |= TF_FIN;
 201e1a8:	e0bfff17 	ldw	r2,-4(fp)
 201e1ac:	10800883 	ldbu	r2,34(r2)
 201e1b0:	10800814 	ori	r2,r2,32
 201e1b4:	1007883a 	mov	r3,r2
 201e1b8:	e0bfff17 	ldw	r2,-4(fp)
 201e1bc:	10c00885 	stb	r3,34(r2)
      return ERR_OK;
 201e1c0:	0005883a 	mov	r2,zero
 201e1c4:	00000306 	br	201e1d4 <tcp_send_fin+0x134>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 201e1c8:	01400044 	movi	r5,1
 201e1cc:	e13fff17 	ldw	r4,-4(fp)
 201e1d0:	201f1b40 	call	201f1b4 <tcp_enqueue_flags>
}
 201e1d4:	e037883a 	mov	sp,fp
 201e1d8:	dfc00117 	ldw	ra,4(sp)
 201e1dc:	df000017 	ldw	fp,0(sp)
 201e1e0:	dec00204 	addi	sp,sp,8
 201e1e4:	f800283a 	ret

0201e1e8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 201e1e8:	defff704 	addi	sp,sp,-36
 201e1ec:	dfc00815 	stw	ra,32(sp)
 201e1f0:	df000715 	stw	fp,28(sp)
 201e1f4:	df000704 	addi	fp,sp,28
 201e1f8:	e13ffb15 	stw	r4,-20(fp)
 201e1fc:	e17ffc15 	stw	r5,-16(fp)
 201e200:	3007883a 	mov	r3,r6
 201e204:	e1fffe15 	stw	r7,-8(fp)
 201e208:	e0800217 	ldw	r2,8(fp)
 201e20c:	e0fffd05 	stb	r3,-12(fp)
 201e210:	e0bfff05 	stb	r2,-4(fp)
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 201e214:	e0bfff03 	ldbu	r2,-4(fp)
 201e218:	1080004c 	andi	r2,r2,1
 201e21c:	10000226 	beq	r2,zero,201e228 <tcp_create_segment+0x40>
 201e220:	00c00104 	movi	r3,4
 201e224:	00000106 	br	201e22c <tcp_create_segment+0x44>
 201e228:	0007883a 	mov	r3,zero
 201e22c:	e0bfff03 	ldbu	r2,-4(fp)
 201e230:	1080008c 	andi	r2,r2,2
 201e234:	10000226 	beq	r2,zero,201e240 <tcp_create_segment+0x58>
 201e238:	00800304 	movi	r2,12
 201e23c:	00000106 	br	201e244 <tcp_create_segment+0x5c>
 201e240:	0005883a 	mov	r2,zero
 201e244:	1885883a 	add	r2,r3,r2
 201e248:	e0bff905 	stb	r2,-28(fp)

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 201e24c:	01000104 	movi	r4,4
 201e250:	20342e00 	call	20342e0 <memp_malloc>
 201e254:	e0bffa15 	stw	r2,-24(fp)
 201e258:	e0bffa17 	ldw	r2,-24(fp)
 201e25c:	1000041e 	bne	r2,zero,201e270 <tcp_create_segment+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 201e260:	e13ffc17 	ldw	r4,-16(fp)
 201e264:	201aa200 	call	201aa20 <pbuf_free>
    return NULL;
 201e268:	0005883a 	mov	r2,zero
 201e26c:	0000c106 	br	201e574 <tcp_create_segment+0x38c>
  }
  seg->flags = optflags;
 201e270:	e0bffa17 	ldw	r2,-24(fp)
 201e274:	e0ffff03 	ldbu	r3,-4(fp)
 201e278:	10c00345 	stb	r3,13(r2)
  seg->next = NULL;
 201e27c:	e0bffa17 	ldw	r2,-24(fp)
 201e280:	10000015 	stw	zero,0(r2)
  seg->p = p;
 201e284:	e0bffa17 	ldw	r2,-24(fp)
 201e288:	e0fffc17 	ldw	r3,-16(fp)
 201e28c:	10c00115 	stw	r3,4(r2)
  seg->len = p->tot_len - optlen;
 201e290:	e0bffc17 	ldw	r2,-16(fp)
 201e294:	10c0020b 	ldhu	r3,8(r2)
 201e298:	e0bff903 	ldbu	r2,-28(fp)
 201e29c:	1885c83a 	sub	r2,r3,r2
 201e2a0:	1007883a 	mov	r3,r2
 201e2a4:	e0bffa17 	ldw	r2,-24(fp)
 201e2a8:	10c0020d 	sth	r3,8(r2)
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
#if TCP_CHECKSUM_ON_COPY
  seg->chksum = 0;
 201e2ac:	e0bffa17 	ldw	r2,-24(fp)
 201e2b0:	1000028d 	sth	zero,10(r2)
  seg->chksum_swapped = 0;
 201e2b4:	e0bffa17 	ldw	r2,-24(fp)
 201e2b8:	10000305 	stb	zero,12(r2)
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 201e2bc:	01400504 	movi	r5,20
 201e2c0:	e13ffc17 	ldw	r4,-16(fp)
 201e2c4:	201a8700 	call	201a870 <pbuf_header>
 201e2c8:	10803fcc 	andi	r2,r2,255
 201e2cc:	10000b26 	beq	r2,zero,201e2fc <tcp_create_segment+0x114>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 201e2d0:	008085f4 	movhi	r2,535
 201e2d4:	10a86704 	addi	r2,r2,-24164
 201e2d8:	10805217 	ldw	r2,328(r2)
 201e2dc:	10c00044 	addi	r3,r2,1
 201e2e0:	008085f4 	movhi	r2,535
 201e2e4:	10a86704 	addi	r2,r2,-24164
 201e2e8:	10c05215 	stw	r3,328(r2)
    tcp_seg_free(seg);
 201e2ec:	e13ffa17 	ldw	r4,-24(fp)
 201e2f0:	201d2e80 	call	201d2e8 <tcp_seg_free>
    return NULL;
 201e2f4:	0005883a 	mov	r2,zero
 201e2f8:	00009e06 	br	201e574 <tcp_create_segment+0x38c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 201e2fc:	e0bffa17 	ldw	r2,-24(fp)
 201e300:	10800117 	ldw	r2,4(r2)
 201e304:	10c00117 	ldw	r3,4(r2)
 201e308:	e0bffa17 	ldw	r2,-24(fp)
 201e30c:	10c00415 	stw	r3,16(r2)
  seg->tcphdr->src = htons(pcb->local_port);
 201e310:	e0bffa17 	ldw	r2,-24(fp)
 201e314:	10800417 	ldw	r2,16(r2)
 201e318:	e0fffb17 	ldw	r3,-20(fp)
 201e31c:	18c0078b 	ldhu	r3,30(r3)
 201e320:	18ffffcc 	andi	r3,r3,65535
 201e324:	1806d23a 	srli	r3,r3,8
 201e328:	1809883a 	mov	r4,r3
 201e32c:	e0fffb17 	ldw	r3,-20(fp)
 201e330:	18c0078b 	ldhu	r3,30(r3)
 201e334:	18ffffcc 	andi	r3,r3,65535
 201e338:	1806923a 	slli	r3,r3,8
 201e33c:	20c6b03a 	or	r3,r4,r3
 201e340:	180d883a 	mov	r6,r3
 201e344:	30ffffcc 	andi	r3,r6,65535
 201e348:	19403fcc 	andi	r5,r3,255
 201e34c:	10c00003 	ldbu	r3,0(r2)
 201e350:	1806703a 	and	r3,r3,zero
 201e354:	1809883a 	mov	r4,r3
 201e358:	2807883a 	mov	r3,r5
 201e35c:	20c6b03a 	or	r3,r4,r3
 201e360:	10c00005 	stb	r3,0(r2)
 201e364:	30ffffcc 	andi	r3,r6,65535
 201e368:	1806d23a 	srli	r3,r3,8
 201e36c:	197fffcc 	andi	r5,r3,65535
 201e370:	10c00043 	ldbu	r3,1(r2)
 201e374:	1806703a 	and	r3,r3,zero
 201e378:	1809883a 	mov	r4,r3
 201e37c:	2807883a 	mov	r3,r5
 201e380:	20c6b03a 	or	r3,r4,r3
 201e384:	10c00045 	stb	r3,1(r2)
  seg->tcphdr->dest = htons(pcb->remote_port);
 201e388:	e0bffa17 	ldw	r2,-24(fp)
 201e38c:	10800417 	ldw	r2,16(r2)
 201e390:	e0fffb17 	ldw	r3,-20(fp)
 201e394:	18c0080b 	ldhu	r3,32(r3)
 201e398:	18ffffcc 	andi	r3,r3,65535
 201e39c:	1806d23a 	srli	r3,r3,8
 201e3a0:	1809883a 	mov	r4,r3
 201e3a4:	e0fffb17 	ldw	r3,-20(fp)
 201e3a8:	18c0080b 	ldhu	r3,32(r3)
 201e3ac:	18ffffcc 	andi	r3,r3,65535
 201e3b0:	1806923a 	slli	r3,r3,8
 201e3b4:	20c6b03a 	or	r3,r4,r3
 201e3b8:	180d883a 	mov	r6,r3
 201e3bc:	30ffffcc 	andi	r3,r6,65535
 201e3c0:	19403fcc 	andi	r5,r3,255
 201e3c4:	10c00083 	ldbu	r3,2(r2)
 201e3c8:	1806703a 	and	r3,r3,zero
 201e3cc:	1809883a 	mov	r4,r3
 201e3d0:	2807883a 	mov	r3,r5
 201e3d4:	20c6b03a 	or	r3,r4,r3
 201e3d8:	10c00085 	stb	r3,2(r2)
 201e3dc:	30ffffcc 	andi	r3,r6,65535
 201e3e0:	1806d23a 	srli	r3,r3,8
 201e3e4:	197fffcc 	andi	r5,r3,65535
 201e3e8:	10c000c3 	ldbu	r3,3(r2)
 201e3ec:	1806703a 	and	r3,r3,zero
 201e3f0:	1809883a 	mov	r4,r3
 201e3f4:	2807883a 	mov	r3,r5
 201e3f8:	20c6b03a 	or	r3,r4,r3
 201e3fc:	10c000c5 	stb	r3,3(r2)
  seg->tcphdr->seqno = htonl(seqno);
 201e400:	e0bffa17 	ldw	r2,-24(fp)
 201e404:	10800417 	ldw	r2,16(r2)
 201e408:	e0fffe17 	ldw	r3,-8(fp)
 201e40c:	1808d63a 	srli	r4,r3,24
 201e410:	e0fffe17 	ldw	r3,-8(fp)
 201e414:	1806d23a 	srli	r3,r3,8
 201e418:	18ffc00c 	andi	r3,r3,65280
 201e41c:	20c8b03a 	or	r4,r4,r3
 201e420:	e0fffe17 	ldw	r3,-8(fp)
 201e424:	18ffc00c 	andi	r3,r3,65280
 201e428:	1806923a 	slli	r3,r3,8
 201e42c:	20c8b03a 	or	r4,r4,r3
 201e430:	e0fffe17 	ldw	r3,-8(fp)
 201e434:	1806963a 	slli	r3,r3,24
 201e438:	20c6b03a 	or	r3,r4,r3
 201e43c:	19803fcc 	andi	r6,r3,255
 201e440:	11000103 	ldbu	r4,4(r2)
 201e444:	2008703a 	and	r4,r4,zero
 201e448:	200b883a 	mov	r5,r4
 201e44c:	3009883a 	mov	r4,r6
 201e450:	2908b03a 	or	r4,r5,r4
 201e454:	11000105 	stb	r4,4(r2)
 201e458:	1808d23a 	srli	r4,r3,8
 201e45c:	21803fcc 	andi	r6,r4,255
 201e460:	11000143 	ldbu	r4,5(r2)
 201e464:	2008703a 	and	r4,r4,zero
 201e468:	200b883a 	mov	r5,r4
 201e46c:	3009883a 	mov	r4,r6
 201e470:	2908b03a 	or	r4,r5,r4
 201e474:	11000145 	stb	r4,5(r2)
 201e478:	1808d43a 	srli	r4,r3,16
 201e47c:	21803fcc 	andi	r6,r4,255
 201e480:	11000183 	ldbu	r4,6(r2)
 201e484:	2008703a 	and	r4,r4,zero
 201e488:	200b883a 	mov	r5,r4
 201e48c:	3009883a 	mov	r4,r6
 201e490:	2908b03a 	or	r4,r5,r4
 201e494:	11000185 	stb	r4,6(r2)
 201e498:	180ad63a 	srli	r5,r3,24
 201e49c:	10c001c3 	ldbu	r3,7(r2)
 201e4a0:	1806703a 	and	r3,r3,zero
 201e4a4:	1809883a 	mov	r4,r3
 201e4a8:	2807883a 	mov	r3,r5
 201e4ac:	20c6b03a 	or	r3,r4,r3
 201e4b0:	10c001c5 	stb	r3,7(r2)
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 201e4b4:	e0bffa17 	ldw	r2,-24(fp)
 201e4b8:	10800417 	ldw	r2,16(r2)
 201e4bc:	e0fff903 	ldbu	r3,-28(fp)
 201e4c0:	1806d0ba 	srli	r3,r3,2
 201e4c4:	18c03fcc 	andi	r3,r3,255
 201e4c8:	18c00144 	addi	r3,r3,5
 201e4cc:	1808933a 	slli	r4,r3,12
 201e4d0:	e0fffd03 	ldbu	r3,-12(fp)
 201e4d4:	20c6b03a 	or	r3,r4,r3
 201e4d8:	18ffc00c 	andi	r3,r3,65280
 201e4dc:	1807d23a 	srai	r3,r3,8
 201e4e0:	180b883a 	mov	r5,r3
 201e4e4:	e0fff903 	ldbu	r3,-28(fp)
 201e4e8:	1806d0ba 	srli	r3,r3,2
 201e4ec:	18c03fcc 	andi	r3,r3,255
 201e4f0:	18c00144 	addi	r3,r3,5
 201e4f4:	1808933a 	slli	r4,r3,12
 201e4f8:	e0fffd03 	ldbu	r3,-12(fp)
 201e4fc:	20c6b03a 	or	r3,r4,r3
 201e500:	1806923a 	slli	r3,r3,8
 201e504:	28c6b03a 	or	r3,r5,r3
 201e508:	180d883a 	mov	r6,r3
 201e50c:	30ffffcc 	andi	r3,r6,65535
 201e510:	19403fcc 	andi	r5,r3,255
 201e514:	10c00303 	ldbu	r3,12(r2)
 201e518:	1806703a 	and	r3,r3,zero
 201e51c:	1809883a 	mov	r4,r3
 201e520:	2807883a 	mov	r3,r5
 201e524:	20c6b03a 	or	r3,r4,r3
 201e528:	10c00305 	stb	r3,12(r2)
 201e52c:	30ffffcc 	andi	r3,r6,65535
 201e530:	1806d23a 	srli	r3,r3,8
 201e534:	197fffcc 	andi	r5,r3,65535
 201e538:	10c00343 	ldbu	r3,13(r2)
 201e53c:	1806703a 	and	r3,r3,zero
 201e540:	1809883a 	mov	r4,r3
 201e544:	2807883a 	mov	r3,r5
 201e548:	20c6b03a 	or	r3,r4,r3
 201e54c:	10c00345 	stb	r3,13(r2)
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 201e550:	e0bffa17 	ldw	r2,-24(fp)
 201e554:	10800417 	ldw	r2,16(r2)
 201e558:	10c00483 	ldbu	r3,18(r2)
 201e55c:	1806703a 	and	r3,r3,zero
 201e560:	10c00485 	stb	r3,18(r2)
 201e564:	10c004c3 	ldbu	r3,19(r2)
 201e568:	1806703a 	and	r3,r3,zero
 201e56c:	10c004c5 	stb	r3,19(r2)
  return seg;
 201e570:	e0bffa17 	ldw	r2,-24(fp)
} 
 201e574:	e037883a 	mov	sp,fp
 201e578:	dfc00117 	ldw	ra,4(sp)
 201e57c:	df000017 	ldw	fp,0(sp)
 201e580:	dec00204 	addi	sp,sp,8
 201e584:	f800283a 	ret

0201e588 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 201e588:	defff604 	addi	sp,sp,-40
 201e58c:	dfc00915 	stw	ra,36(sp)
 201e590:	df000815 	stw	fp,32(sp)
 201e594:	df000804 	addi	fp,sp,32
 201e598:	e13ffa15 	stw	r4,-24(fp)
 201e59c:	3009883a 	mov	r4,r6
 201e5a0:	e1fffd15 	stw	r7,-12(fp)
 201e5a4:	e0c00317 	ldw	r3,12(fp)
 201e5a8:	e0800417 	ldw	r2,16(fp)
 201e5ac:	e17ffb0d 	sth	r5,-20(fp)
 201e5b0:	e13ffc0d 	sth	r4,-16(fp)
 201e5b4:	e0fffe05 	stb	r3,-8(fp)
 201e5b8:	e0bfff05 	stb	r2,-4(fp)
  struct pbuf *p;
  u16_t alloc = length;
 201e5bc:	e0bffb0b 	ldhu	r2,-20(fp)
 201e5c0:	e0bff80d 	sth	r2,-32(fp)
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 201e5c4:	e0fffb0b 	ldhu	r3,-20(fp)
 201e5c8:	e0bffc0b 	ldhu	r2,-16(fp)
 201e5cc:	1880182e 	bgeu	r3,r2,201e630 <tcp_pbuf_prealloc+0xa8>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 201e5d0:	e0bffe03 	ldbu	r2,-8(fp)
 201e5d4:	1080008c 	andi	r2,r2,2
 201e5d8:	10000d1e 	bne	r2,zero,201e610 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 201e5dc:	e0800217 	ldw	r2,8(fp)
 201e5e0:	10800883 	ldbu	r2,34(r2)
 201e5e4:	10803fcc 	andi	r2,r2,255
 201e5e8:	1080100c 	andi	r2,r2,64
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 201e5ec:	1000101e 	bne	r2,zero,201e630 <tcp_pbuf_prealloc+0xa8>
        (!(pcb->flags & TF_NODELAY) &&
 201e5f0:	e0bfff03 	ldbu	r2,-4(fp)
 201e5f4:	10000626 	beq	r2,zero,201e610 <tcp_pbuf_prealloc+0x88>
         (!first_seg ||
          pcb->unsent != NULL ||
 201e5f8:	e0800217 	ldw	r2,8(fp)
 201e5fc:	10801c17 	ldw	r2,112(r2)
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
 201e600:	1000031e 	bne	r2,zero,201e610 <tcp_pbuf_prealloc+0x88>
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
 201e604:	e0800217 	ldw	r2,8(fp)
 201e608:	10801d17 	ldw	r2,116(r2)
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
 201e60c:	10000826 	beq	r2,zero,201e630 <tcp_pbuf_prealloc+0xa8>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
 201e610:	e0bffb0b 	ldhu	r2,-20(fp)
 201e614:	10c16dc4 	addi	r3,r2,1463
 201e618:	00bfff04 	movi	r2,-4
 201e61c:	1884703a 	and	r2,r3,r2
 201e620:	e0fffc0b 	ldhu	r3,-16(fp)
 201e624:	1880010e 	bge	r3,r2,201e62c <tcp_pbuf_prealloc+0xa4>
 201e628:	1805883a 	mov	r2,r3
 201e62c:	e0bff80d 	sth	r2,-32(fp)
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 201e630:	e0bff80b 	ldhu	r2,-32(fp)
 201e634:	000d883a 	mov	r6,zero
 201e638:	100b883a 	mov	r5,r2
 201e63c:	e13ffa17 	ldw	r4,-24(fp)
 201e640:	201a2640 	call	201a264 <pbuf_alloc>
 201e644:	e0bff915 	stw	r2,-28(fp)
  if (p == NULL) {
 201e648:	e0bff917 	ldw	r2,-28(fp)
 201e64c:	1000021e 	bne	r2,zero,201e658 <tcp_pbuf_prealloc+0xd0>
    return NULL;
 201e650:	0005883a 	mov	r2,zero
 201e654:	00000f06 	br	201e694 <tcp_pbuf_prealloc+0x10c>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 201e658:	e0bff917 	ldw	r2,-28(fp)
 201e65c:	10c0028b 	ldhu	r3,10(r2)
 201e660:	e0bffb0b 	ldhu	r2,-20(fp)
 201e664:	1885c83a 	sub	r2,r3,r2
 201e668:	1007883a 	mov	r3,r2
 201e66c:	e0bffd17 	ldw	r2,-12(fp)
 201e670:	10c0000d 	sth	r3,0(r2)
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 201e674:	e0bff917 	ldw	r2,-28(fp)
 201e678:	e0fffb0b 	ldhu	r3,-20(fp)
 201e67c:	10c0020d 	sth	r3,8(r2)
 201e680:	e0bff917 	ldw	r2,-28(fp)
 201e684:	10c0020b 	ldhu	r3,8(r2)
 201e688:	e0bff917 	ldw	r2,-28(fp)
 201e68c:	10c0028d 	sth	r3,10(r2)
  return p;
 201e690:	e0bff917 	ldw	r2,-28(fp)
}
 201e694:	e037883a 	mov	sp,fp
 201e698:	dfc00117 	ldw	ra,4(sp)
 201e69c:	df000017 	ldw	fp,0(sp)
 201e6a0:	dec00204 	addi	sp,sp,8
 201e6a4:	f800283a 	ret

0201e6a8 <tcp_seg_add_chksum>:
#if TCP_CHECKSUM_ON_COPY
/** Add a checksum of newly added data to the segment */
static void
tcp_seg_add_chksum(u16_t chksum, u16_t len, u16_t *seg_chksum,
                   u8_t *seg_chksum_swapped)
{
 201e6a8:	defffa04 	addi	sp,sp,-24
 201e6ac:	df000515 	stw	fp,20(sp)
 201e6b0:	df000504 	addi	fp,sp,20
 201e6b4:	2007883a 	mov	r3,r4
 201e6b8:	2805883a 	mov	r2,r5
 201e6bc:	e1bffe15 	stw	r6,-8(fp)
 201e6c0:	e1ffff15 	stw	r7,-4(fp)
 201e6c4:	e0fffc0d 	sth	r3,-16(fp)
 201e6c8:	e0bffd0d 	sth	r2,-12(fp)
  u32_t helper;
  /* add chksum to old chksum and fold to u16_t */
  helper = chksum + *seg_chksum;
 201e6cc:	e0fffc0b 	ldhu	r3,-16(fp)
 201e6d0:	e0bffe17 	ldw	r2,-8(fp)
 201e6d4:	1080000b 	ldhu	r2,0(r2)
 201e6d8:	10bfffcc 	andi	r2,r2,65535
 201e6dc:	1885883a 	add	r2,r3,r2
 201e6e0:	e0bffb15 	stw	r2,-20(fp)
  chksum = FOLD_U32T(helper);
 201e6e4:	e0bffb17 	ldw	r2,-20(fp)
 201e6e8:	1004d43a 	srli	r2,r2,16
 201e6ec:	1007883a 	mov	r3,r2
 201e6f0:	e0bffb17 	ldw	r2,-20(fp)
 201e6f4:	1885883a 	add	r2,r3,r2
 201e6f8:	e0bffc0d 	sth	r2,-16(fp)
  if ((len & 1) != 0) {
 201e6fc:	e0bffd0b 	ldhu	r2,-12(fp)
 201e700:	1080004c 	andi	r2,r2,1
 201e704:	10000e26 	beq	r2,zero,201e740 <tcp_seg_add_chksum+0x98>
    *seg_chksum_swapped = 1 - *seg_chksum_swapped;
 201e708:	e0bfff17 	ldw	r2,-4(fp)
 201e70c:	10800003 	ldbu	r2,0(r2)
 201e710:	00c00044 	movi	r3,1
 201e714:	1885c83a 	sub	r2,r3,r2
 201e718:	1007883a 	mov	r3,r2
 201e71c:	e0bfff17 	ldw	r2,-4(fp)
 201e720:	10c00005 	stb	r3,0(r2)
    chksum = SWAP_BYTES_IN_WORD(chksum);
 201e724:	e0bffc0b 	ldhu	r2,-16(fp)
 201e728:	1004d23a 	srli	r2,r2,8
 201e72c:	1007883a 	mov	r3,r2
 201e730:	e0bffc0b 	ldhu	r2,-16(fp)
 201e734:	1004923a 	slli	r2,r2,8
 201e738:	1884b03a 	or	r2,r3,r2
 201e73c:	e0bffc0d 	sth	r2,-16(fp)
  }
  *seg_chksum = chksum;
 201e740:	e0bffe17 	ldw	r2,-8(fp)
 201e744:	e0fffc0b 	ldhu	r3,-16(fp)
 201e748:	10c0000d 	sth	r3,0(r2)
}
 201e74c:	0001883a 	nop
 201e750:	e037883a 	mov	sp,fp
 201e754:	df000017 	ldw	fp,0(sp)
 201e758:	dec00104 	addi	sp,sp,4
 201e75c:	f800283a 	ret

0201e760 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 201e760:	defffd04 	addi	sp,sp,-12
 201e764:	df000215 	stw	fp,8(sp)
 201e768:	df000204 	addi	fp,sp,8
 201e76c:	e13ffe15 	stw	r4,-8(fp)
 201e770:	2805883a 	mov	r2,r5
 201e774:	e0bfff0d 	sth	r2,-4(fp)
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 201e778:	e0bffe17 	ldw	r2,-8(fp)
 201e77c:	10800617 	ldw	r2,24(r2)
 201e780:	10800120 	cmpeqi	r2,r2,4
 201e784:	10000e1e 	bne	r2,zero,201e7c0 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
 201e788:	e0bffe17 	ldw	r2,-8(fp)
 201e78c:	10800617 	ldw	r2,24(r2)
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 201e790:	108001e0 	cmpeqi	r2,r2,7
 201e794:	10000a1e 	bne	r2,zero,201e7c0 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
 201e798:	e0bffe17 	ldw	r2,-8(fp)
 201e79c:	10800617 	ldw	r2,24(r2)
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
 201e7a0:	108000a0 	cmpeqi	r2,r2,2
 201e7a4:	1000061e 	bne	r2,zero,201e7c0 <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
 201e7a8:	e0bffe17 	ldw	r2,-8(fp)
 201e7ac:	10800617 	ldw	r2,24(r2)
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
 201e7b0:	108000e0 	cmpeqi	r2,r2,3
 201e7b4:	1000021e 	bne	r2,zero,201e7c0 <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 201e7b8:	00bffcc4 	movi	r2,-13
 201e7bc:	00002d06 	br	201e874 <tcp_write_checks+0x114>
  } else if (len == 0) {
 201e7c0:	e0bfff0b 	ldhu	r2,-4(fp)
 201e7c4:	1000021e 	bne	r2,zero,201e7d0 <tcp_write_checks+0x70>
    return ERR_OK;
 201e7c8:	0005883a 	mov	r2,zero
 201e7cc:	00002906 	br	201e874 <tcp_write_checks+0x114>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 201e7d0:	e0bffe17 	ldw	r2,-8(fp)
 201e7d4:	10801a8b 	ldhu	r2,106(r2)
 201e7d8:	10ffffcc 	andi	r3,r2,65535
 201e7dc:	e0bfff0b 	ldhu	r2,-4(fp)
 201e7e0:	1880092e 	bgeu	r3,r2,201e808 <tcp_write_checks+0xa8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 201e7e4:	e0bffe17 	ldw	r2,-8(fp)
 201e7e8:	10c00883 	ldbu	r3,34(r2)
 201e7ec:	00bfe004 	movi	r2,-128
 201e7f0:	1884b03a 	or	r2,r3,r2
 201e7f4:	1007883a 	mov	r3,r2
 201e7f8:	e0bffe17 	ldw	r2,-8(fp)
 201e7fc:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
 201e800:	00bfffc4 	movi	r2,-1
 201e804:	00001b06 	br	201e874 <tcp_write_checks+0x114>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 201e808:	e0bffe17 	ldw	r2,-8(fp)
 201e80c:	10801b0b 	ldhu	r2,108(r2)
 201e810:	10bfffcc 	andi	r2,r2,65535
 201e814:	10800228 	cmpgeui	r2,r2,8
 201e818:	1000051e 	bne	r2,zero,201e830 <tcp_write_checks+0xd0>
 201e81c:	e0bffe17 	ldw	r2,-8(fp)
 201e820:	10801b0b 	ldhu	r2,108(r2)
 201e824:	10bfffcc 	andi	r2,r2,65535
 201e828:	10bfff70 	cmpltui	r2,r2,65533
 201e82c:	1000101e 	bne	r2,zero,201e870 <tcp_write_checks+0x110>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 201e830:	008085f4 	movhi	r2,535
 201e834:	10a86704 	addi	r2,r2,-24164
 201e838:	10804e17 	ldw	r2,312(r2)
 201e83c:	10c00044 	addi	r3,r2,1
 201e840:	008085f4 	movhi	r2,535
 201e844:	10a86704 	addi	r2,r2,-24164
 201e848:	10c04e15 	stw	r3,312(r2)
    pcb->flags |= TF_NAGLEMEMERR;
 201e84c:	e0bffe17 	ldw	r2,-8(fp)
 201e850:	10c00883 	ldbu	r3,34(r2)
 201e854:	00bfe004 	movi	r2,-128
 201e858:	1884b03a 	or	r2,r3,r2
 201e85c:	1007883a 	mov	r3,r2
 201e860:	e0bffe17 	ldw	r2,-8(fp)
 201e864:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
 201e868:	00bfffc4 	movi	r2,-1
 201e86c:	00000106 	br	201e874 <tcp_write_checks+0x114>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 201e870:	0005883a 	mov	r2,zero
}
 201e874:	e037883a 	mov	sp,fp
 201e878:	df000017 	ldw	fp,0(sp)
 201e87c:	dec00104 	addi	sp,sp,4
 201e880:	f800283a 	ret

0201e884 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 201e884:	deffe504 	addi	sp,sp,-108
 201e888:	dfc01a15 	stw	ra,104(sp)
 201e88c:	df001915 	stw	fp,100(sp)
 201e890:	df001904 	addi	fp,sp,100
 201e894:	e13ffc15 	stw	r4,-16(fp)
 201e898:	e17ffd15 	stw	r5,-12(fp)
 201e89c:	3007883a 	mov	r3,r6
 201e8a0:	3805883a 	mov	r2,r7
 201e8a4:	e0fffe0d 	sth	r3,-8(fp)
 201e8a8:	e0bfff05 	stb	r2,-4(fp)
  struct pbuf *concat_p = NULL;
 201e8ac:	e03fea15 	stw	zero,-88(fp)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 201e8b0:	e03feb15 	stw	zero,-84(fp)
 201e8b4:	e03fec15 	stw	zero,-80(fp)
 201e8b8:	e03fed15 	stw	zero,-76(fp)
 201e8bc:	e03fee15 	stw	zero,-72(fp)
  u16_t pos = 0; /* position in 'arg' data */
 201e8c0:	e03fef0d 	sth	zero,-68(fp)
  u16_t queuelen;
  u8_t optlen = 0;
 201e8c4:	e03ff405 	stb	zero,-48(fp)
  u8_t optflags = 0;
 201e8c8:	e03ff445 	stb	zero,-47(fp)
#if TCP_OVERSIZE
  u16_t oversize = 0;
 201e8cc:	e03ff90d 	sth	zero,-28(fp)
  u16_t oversize_used = 0;
 201e8d0:	e03ff00d 	sth	zero,-64(fp)
#endif /* TCP_OVERSIZE */
#if TCP_CHECKSUM_ON_COPY
  u16_t concat_chksum = 0;
 201e8d4:	e03ff98d 	sth	zero,-26(fp)
  u8_t concat_chksum_swapped = 0;
 201e8d8:	e03ffa05 	stb	zero,-24(fp)
  u16_t concat_chksummed = 0;
 201e8dc:	e03ff08d 	sth	zero,-62(fp)
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
 201e8e0:	e0bffc17 	ldw	r2,-16(fp)
 201e8e4:	1080198b 	ldhu	r2,102(r2)
 201e8e8:	10bfffcc 	andi	r2,r2,65535
 201e8ec:	1004d07a 	srli	r2,r2,1
 201e8f0:	1007883a 	mov	r3,r2
 201e8f4:	e0bffc17 	ldw	r2,-16(fp)
 201e8f8:	11400e8b 	ldhu	r5,58(r2)
 201e8fc:	1805883a 	mov	r2,r3
 201e900:	10ffffcc 	andi	r3,r2,65535
 201e904:	293fffcc 	andi	r4,r5,65535
 201e908:	20c0012e 	bgeu	r4,r3,201e910 <tcp_write+0x8c>
 201e90c:	2805883a 	mov	r2,r5
 201e910:	e0bff48d 	sth	r2,-46(fp)
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
 201e914:	e0bffd17 	ldw	r2,-12(fp)
 201e918:	1000091e 	bne	r2,zero,201e940 <tcp_write+0xbc>
 201e91c:	01c08134 	movhi	r7,516
 201e920:	39c5a304 	addi	r7,r7,5772
 201e924:	01805fc4 	movi	r6,383
 201e928:	01408134 	movhi	r5,516
 201e92c:	2945a904 	addi	r5,r5,5796
 201e930:	01008134 	movhi	r4,516
 201e934:	2105b604 	addi	r4,r4,5848
 201e938:	20009e40 	call	20009e4 <printf>
 201e93c:	003fff06 	br	201e93c <__alt_mem_mem_0+0xfcffe93c>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 201e940:	e0bffe0b 	ldhu	r2,-8(fp)
 201e944:	100b883a 	mov	r5,r2
 201e948:	e13ffc17 	ldw	r4,-16(fp)
 201e94c:	201e7600 	call	201e760 <tcp_write_checks>
 201e950:	e0bff505 	stb	r2,-44(fp)
  if (err != ERR_OK) {
 201e954:	e0bff507 	ldb	r2,-44(fp)
 201e958:	10000226 	beq	r2,zero,201e964 <tcp_write+0xe0>
    return err;
 201e95c:	e0bff503 	ldbu	r2,-44(fp)
 201e960:	00020f06 	br	201f1a0 <tcp_write+0x91c>
  }
  queuelen = pcb->snd_queuelen;
 201e964:	e0bffc17 	ldw	r2,-16(fp)
 201e968:	10801b0b 	ldhu	r2,108(r2)
 201e96c:	e0bfef8d 	sth	r2,-66(fp)
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 201e970:	e0bffc17 	ldw	r2,-16(fp)
 201e974:	10801c17 	ldw	r2,112(r2)
 201e978:	10014326 	beq	r2,zero,201ee88 <tcp_write+0x604>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 201e97c:	e0bffc17 	ldw	r2,-16(fp)
 201e980:	10801c17 	ldw	r2,112(r2)
 201e984:	e0bfeb15 	stw	r2,-84(fp)
 201e988:	00000306 	br	201e998 <tcp_write+0x114>
         last_unsent = last_unsent->next);
 201e98c:	e0bfeb17 	ldw	r2,-84(fp)
 201e990:	10800017 	ldw	r2,0(r2)
 201e994:	e0bfeb15 	stw	r2,-84(fp)
  if (pcb->unsent != NULL) {
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 201e998:	e0bfeb17 	ldw	r2,-84(fp)
 201e99c:	10800017 	ldw	r2,0(r2)
 201e9a0:	103ffa1e 	bne	r2,zero,201e98c <__alt_mem_mem_0+0xfcffe98c>
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 201e9a4:	e0bfeb17 	ldw	r2,-84(fp)
 201e9a8:	10800343 	ldbu	r2,13(r2)
 201e9ac:	10803fcc 	andi	r2,r2,255
 201e9b0:	1080004c 	andi	r2,r2,1
 201e9b4:	10000226 	beq	r2,zero,201e9c0 <tcp_write+0x13c>
 201e9b8:	00c00104 	movi	r3,4
 201e9bc:	00000106 	br	201e9c4 <tcp_write+0x140>
 201e9c0:	0007883a 	mov	r3,zero
 201e9c4:	e0bfeb17 	ldw	r2,-84(fp)
 201e9c8:	10800343 	ldbu	r2,13(r2)
 201e9cc:	10803fcc 	andi	r2,r2,255
 201e9d0:	1080008c 	andi	r2,r2,2
 201e9d4:	10000226 	beq	r2,zero,201e9e0 <tcp_write+0x15c>
 201e9d8:	00800304 	movi	r2,12
 201e9dc:	00000106 	br	201e9e4 <tcp_write+0x160>
 201e9e0:	0005883a 	mov	r2,zero
 201e9e4:	1885883a 	add	r2,r3,r2
 201e9e8:	e0bff58d 	sth	r2,-42(fp)
    space = mss_local - (last_unsent->len + unsent_optlen);
 201e9ec:	e0bfeb17 	ldw	r2,-84(fp)
 201e9f0:	10c0020b 	ldhu	r3,8(r2)
 201e9f4:	e0bff58b 	ldhu	r2,-42(fp)
 201e9f8:	1885883a 	add	r2,r3,r2
 201e9fc:	1007883a 	mov	r3,r2
 201ea00:	e0bff48b 	ldhu	r2,-46(fp)
 201ea04:	10c5c83a 	sub	r2,r2,r3
 201ea08:	e0bff10d 	sth	r2,-60(fp)
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 201ea0c:	e0bffc17 	ldw	r2,-16(fp)
 201ea10:	10801b8b 	ldhu	r2,110(r2)
 201ea14:	e0bff90d 	sth	r2,-28(fp)
    if (oversize > 0) {
 201ea18:	e0bff90b 	ldhu	r2,-28(fp)
 201ea1c:	10bfffcc 	andi	r2,r2,65535
 201ea20:	10001526 	beq	r2,zero,201ea78 <tcp_write+0x1f4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
 201ea24:	e0bfeb17 	ldw	r2,-84(fp)
 201ea28:	e0bfec15 	stw	r2,-80(fp)
      oversize_used = oversize < len ? oversize : len;
 201ea2c:	e17ff90b 	ldhu	r5,-28(fp)
 201ea30:	e0bffe0b 	ldhu	r2,-8(fp)
 201ea34:	10ffffcc 	andi	r3,r2,65535
 201ea38:	293fffcc 	andi	r4,r5,65535
 201ea3c:	20c0012e 	bgeu	r4,r3,201ea44 <tcp_write+0x1c0>
 201ea40:	2805883a 	mov	r2,r5
 201ea44:	e0bff00d 	sth	r2,-64(fp)
      pos += oversize_used;
 201ea48:	e0ffef0b 	ldhu	r3,-68(fp)
 201ea4c:	e0bff00b 	ldhu	r2,-64(fp)
 201ea50:	1885883a 	add	r2,r3,r2
 201ea54:	e0bfef0d 	sth	r2,-68(fp)
      oversize -= oversize_used;
 201ea58:	e0fff90b 	ldhu	r3,-28(fp)
 201ea5c:	e0bff00b 	ldhu	r2,-64(fp)
 201ea60:	1885c83a 	sub	r2,r3,r2
 201ea64:	e0bff90d 	sth	r2,-28(fp)
      space -= oversize_used;
 201ea68:	e0fff10b 	ldhu	r3,-60(fp)
 201ea6c:	e0bff00b 	ldhu	r2,-64(fp)
 201ea70:	1885c83a 	sub	r2,r3,r2
 201ea74:	e0bff10d 	sth	r2,-60(fp)
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 201ea78:	e0ffef0b 	ldhu	r3,-68(fp)
 201ea7c:	e0bffe0b 	ldhu	r2,-8(fp)
 201ea80:	1881012e 	bgeu	r3,r2,201ee88 <tcp_write+0x604>
 201ea84:	e0bff10b 	ldhu	r2,-60(fp)
 201ea88:	1000ff26 	beq	r2,zero,201ee88 <tcp_write+0x604>
 201ea8c:	e0bfeb17 	ldw	r2,-84(fp)
 201ea90:	1080020b 	ldhu	r2,8(r2)
 201ea94:	10bfffcc 	andi	r2,r2,65535
 201ea98:	1000fb26 	beq	r2,zero,201ee88 <tcp_write+0x604>
      u16_t seglen = space < len - pos ? space : len - pos;
 201ea9c:	e0fffe0b 	ldhu	r3,-8(fp)
 201eaa0:	e0bfef0b 	ldhu	r2,-68(fp)
 201eaa4:	1885c83a 	sub	r2,r3,r2
 201eaa8:	e0fff10b 	ldhu	r3,-60(fp)
 201eaac:	1880010e 	bge	r3,r2,201eab4 <tcp_write+0x230>
 201eab0:	1805883a 	mov	r2,r3
 201eab4:	e0bff60d 	sth	r2,-40(fp)
      seg = last_unsent;
 201eab8:	e0bfeb17 	ldw	r2,-84(fp)
 201eabc:	e0bfec15 	stw	r2,-80(fp)

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 201eac0:	e0bfff03 	ldbu	r2,-4(fp)
 201eac4:	1080004c 	andi	r2,r2,1
 201eac8:	10002826 	beq	r2,zero,201eb6c <tcp_write+0x2e8>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 201eacc:	e13ff60b 	ldhu	r4,-40(fp)
 201ead0:	e17ff10b 	ldhu	r5,-60(fp)
 201ead4:	e0bfff03 	ldbu	r2,-4(fp)
 201ead8:	e1bff904 	addi	r6,fp,-28
 201eadc:	00c00044 	movi	r3,1
 201eae0:	d8c00215 	stw	r3,8(sp)
 201eae4:	d8800115 	stw	r2,4(sp)
 201eae8:	e0bffc17 	ldw	r2,-16(fp)
 201eaec:	d8800015 	stw	r2,0(sp)
 201eaf0:	300f883a 	mov	r7,r6
 201eaf4:	280d883a 	mov	r6,r5
 201eaf8:	200b883a 	mov	r5,r4
 201eafc:	010000c4 	movi	r4,3
 201eb00:	201e5880 	call	201e588 <tcp_pbuf_prealloc>
 201eb04:	e0bfea15 	stw	r2,-88(fp)
 201eb08:	e0bfea17 	ldw	r2,-88(fp)
 201eb0c:	10018426 	beq	r2,zero,201f120 <tcp_write+0x89c>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 201eb10:	e0bfea17 	ldw	r2,-88(fp)
 201eb14:	11000117 	ldw	r4,4(r2)
 201eb18:	e0bfef0b 	ldhu	r2,-68(fp)
 201eb1c:	e0fffd17 	ldw	r3,-12(fp)
 201eb20:	1885883a 	add	r2,r3,r2
 201eb24:	e0fff60b 	ldhu	r3,-40(fp)
 201eb28:	180d883a 	mov	r6,r3
 201eb2c:	100b883a 	mov	r5,r2
 201eb30:	2031b700 	call	2031b70 <lwip_chksum_copy>
 201eb34:	10bfffcc 	andi	r2,r2,65535
 201eb38:	e0fff60b 	ldhu	r3,-40(fp)
 201eb3c:	e17ffa04 	addi	r5,fp,-24
 201eb40:	e13ff984 	addi	r4,fp,-26
 201eb44:	280f883a 	mov	r7,r5
 201eb48:	200d883a 	mov	r6,r4
 201eb4c:	180b883a 	mov	r5,r3
 201eb50:	1009883a 	mov	r4,r2
 201eb54:	201e6a80 	call	201e6a8 <tcp_seg_add_chksum>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
 201eb58:	e0fff08b 	ldhu	r3,-62(fp)
 201eb5c:	e0bff60b 	ldhu	r2,-40(fp)
 201eb60:	1885883a 	add	r2,r3,r2
 201eb64:	e0bff08d 	sth	r2,-62(fp)
 201eb68:	00002206 	br	201ebf4 <tcp_write+0x370>
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 201eb6c:	e0bff60b 	ldhu	r2,-40(fp)
 201eb70:	01800044 	movi	r6,1
 201eb74:	100b883a 	mov	r5,r2
 201eb78:	010000c4 	movi	r4,3
 201eb7c:	201a2640 	call	201a264 <pbuf_alloc>
 201eb80:	e0bfea15 	stw	r2,-88(fp)
 201eb84:	e0bfea17 	ldw	r2,-88(fp)
 201eb88:	10016726 	beq	r2,zero,201f128 <tcp_write+0x8a4>
                      ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
          goto memerr;
        }
#if TCP_CHECKSUM_ON_COPY
        /* calculate the checksum of nocopy-data */
        tcp_seg_add_chksum(~inet_chksum((u8_t*)arg + pos, seglen), seglen,
 201eb8c:	e0bfef0b 	ldhu	r2,-68(fp)
 201eb90:	e0fffd17 	ldw	r3,-12(fp)
 201eb94:	1885883a 	add	r2,r3,r2
 201eb98:	e0fff60b 	ldhu	r3,-40(fp)
 201eb9c:	180b883a 	mov	r5,r3
 201eba0:	1009883a 	mov	r4,r2
 201eba4:	2031a200 	call	2031a20 <inet_chksum>
 201eba8:	0084303a 	nor	r2,zero,r2
 201ebac:	10bfffcc 	andi	r2,r2,65535
 201ebb0:	e0fff60b 	ldhu	r3,-40(fp)
 201ebb4:	e17ffa04 	addi	r5,fp,-24
 201ebb8:	e13ff984 	addi	r4,fp,-26
 201ebbc:	280f883a 	mov	r7,r5
 201ebc0:	200d883a 	mov	r6,r4
 201ebc4:	180b883a 	mov	r5,r3
 201ebc8:	1009883a 	mov	r4,r2
 201ebcc:	201e6a80 	call	201e6a8 <tcp_seg_add_chksum>
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
 201ebd0:	e0fff08b 	ldhu	r3,-62(fp)
 201ebd4:	e0bff60b 	ldhu	r2,-40(fp)
 201ebd8:	1885883a 	add	r2,r3,r2
 201ebdc:	e0bff08d 	sth	r2,-62(fp)
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
 201ebe0:	e0bfef0b 	ldhu	r2,-68(fp)
 201ebe4:	e0fffd17 	ldw	r3,-12(fp)
 201ebe8:	1887883a 	add	r3,r3,r2
 201ebec:	e0bfea17 	ldw	r2,-88(fp)
 201ebf0:	10c00115 	stw	r3,4(r2)
      }

      pos += seglen;
 201ebf4:	e0ffef0b 	ldhu	r3,-68(fp)
 201ebf8:	e0bff60b 	ldhu	r2,-40(fp)
 201ebfc:	1885883a 	add	r2,r3,r2
 201ec00:	e0bfef0d 	sth	r2,-68(fp)
      queuelen += pbuf_clen(concat_p);
 201ec04:	e13fea17 	ldw	r4,-88(fp)
 201ec08:	201ab640 	call	201ab64 <pbuf_clen>
 201ec0c:	10c03fcc 	andi	r3,r2,255
 201ec10:	e0bfef8b 	ldhu	r2,-66(fp)
 201ec14:	1885883a 	add	r2,r3,r2
 201ec18:	e0bfef8d 	sth	r2,-66(fp)
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 201ec1c:	00009a06 	br	201ee88 <tcp_write+0x604>
    struct pbuf *p;
    u16_t left = len - pos;
 201ec20:	e0fffe0b 	ldhu	r3,-8(fp)
 201ec24:	e0bfef0b 	ldhu	r2,-68(fp)
 201ec28:	1885c83a 	sub	r2,r3,r2
 201ec2c:	e0bff68d 	sth	r2,-38(fp)
    u16_t max_len = mss_local - optlen;
 201ec30:	e0bff403 	ldbu	r2,-48(fp)
 201ec34:	e0fff48b 	ldhu	r3,-46(fp)
 201ec38:	1885c83a 	sub	r2,r3,r2
 201ec3c:	e0bff70d 	sth	r2,-36(fp)
    u16_t seglen = left > max_len ? max_len : left;
 201ec40:	e17ff70b 	ldhu	r5,-36(fp)
 201ec44:	e0bff68b 	ldhu	r2,-38(fp)
 201ec48:	10ffffcc 	andi	r3,r2,65535
 201ec4c:	293fffcc 	andi	r4,r5,65535
 201ec50:	20c0012e 	bgeu	r4,r3,201ec58 <tcp_write+0x3d4>
 201ec54:	2805883a 	mov	r2,r5
 201ec58:	e0bff78d 	sth	r2,-34(fp)
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
 201ec5c:	e03ffa8d 	sth	zero,-22(fp)
    u8_t chksum_swapped = 0;
 201ec60:	e03ffb05 	stb	zero,-20(fp)
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 201ec64:	e0bfff03 	ldbu	r2,-4(fp)
 201ec68:	1080004c 	andi	r2,r2,1
 201ec6c:	10002b26 	beq	r2,zero,201ed1c <tcp_write+0x498>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 201ec70:	e0fff403 	ldbu	r3,-48(fp)
 201ec74:	e0bff78b 	ldhu	r2,-34(fp)
 201ec78:	1885883a 	add	r2,r3,r2
 201ec7c:	113fffcc 	andi	r4,r2,65535
 201ec80:	e17ff48b 	ldhu	r5,-46(fp)
 201ec84:	e0bfff03 	ldbu	r2,-4(fp)
 201ec88:	e0ffee17 	ldw	r3,-72(fp)
 201ec8c:	1807003a 	cmpeq	r3,r3,zero
 201ec90:	18c03fcc 	andi	r3,r3,255
 201ec94:	e1bff904 	addi	r6,fp,-28
 201ec98:	d8c00215 	stw	r3,8(sp)
 201ec9c:	d8800115 	stw	r2,4(sp)
 201eca0:	e0bffc17 	ldw	r2,-16(fp)
 201eca4:	d8800015 	stw	r2,0(sp)
 201eca8:	300f883a 	mov	r7,r6
 201ecac:	280d883a 	mov	r6,r5
 201ecb0:	200b883a 	mov	r5,r4
 201ecb4:	0009883a 	mov	r4,zero
 201ecb8:	201e5880 	call	201e588 <tcp_pbuf_prealloc>
 201ecbc:	e0bff215 	stw	r2,-56(fp)
 201ecc0:	e0bff217 	ldw	r2,-56(fp)
 201ecc4:	10011a26 	beq	r2,zero,201f130 <tcp_write+0x8ac>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 201ecc8:	e0bff217 	ldw	r2,-56(fp)
 201eccc:	10c00117 	ldw	r3,4(r2)
 201ecd0:	e0bff403 	ldbu	r2,-48(fp)
 201ecd4:	1889883a 	add	r4,r3,r2
 201ecd8:	e0bfef0b 	ldhu	r2,-68(fp)
 201ecdc:	e0fffd17 	ldw	r3,-12(fp)
 201ece0:	1885883a 	add	r2,r3,r2
 201ece4:	e0fff78b 	ldhu	r3,-34(fp)
 201ece8:	180d883a 	mov	r6,r3
 201ecec:	100b883a 	mov	r5,r2
 201ecf0:	2031b700 	call	2031b70 <lwip_chksum_copy>
 201ecf4:	10bfffcc 	andi	r2,r2,65535
 201ecf8:	e0fff78b 	ldhu	r3,-34(fp)
 201ecfc:	e17ffb04 	addi	r5,fp,-20
 201ed00:	e13ffa84 	addi	r4,fp,-22
 201ed04:	280f883a 	mov	r7,r5
 201ed08:	200d883a 	mov	r6,r4
 201ed0c:	180b883a 	mov	r5,r3
 201ed10:	1009883a 	mov	r4,r2
 201ed14:	201e6a80 	call	201e6a8 <tcp_seg_add_chksum>
 201ed18:	00002406 	br	201edac <tcp_write+0x528>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 201ed1c:	e0bff78b 	ldhu	r2,-34(fp)
 201ed20:	01800044 	movi	r6,1
 201ed24:	100b883a 	mov	r5,r2
 201ed28:	0009883a 	mov	r4,zero
 201ed2c:	201a2640 	call	201a264 <pbuf_alloc>
 201ed30:	e0bff815 	stw	r2,-32(fp)
 201ed34:	e0bff817 	ldw	r2,-32(fp)
 201ed38:	1000ff26 	beq	r2,zero,201f138 <tcp_write+0x8b4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
        goto memerr;
      }
#if TCP_CHECKSUM_ON_COPY
      /* calculate the checksum of nocopy-data */
      chksum = ~inet_chksum((u8_t*)arg + pos, seglen);
 201ed3c:	e0bfef0b 	ldhu	r2,-68(fp)
 201ed40:	e0fffd17 	ldw	r3,-12(fp)
 201ed44:	1885883a 	add	r2,r3,r2
 201ed48:	e0fff78b 	ldhu	r3,-34(fp)
 201ed4c:	180b883a 	mov	r5,r3
 201ed50:	1009883a 	mov	r4,r2
 201ed54:	2031a200 	call	2031a20 <inet_chksum>
 201ed58:	0084303a 	nor	r2,zero,r2
 201ed5c:	e0bffa8d 	sth	r2,-22(fp)
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      p2->payload = (u8_t*)arg + pos;
 201ed60:	e0bfef0b 	ldhu	r2,-68(fp)
 201ed64:	e0fffd17 	ldw	r3,-12(fp)
 201ed68:	1887883a 	add	r3,r3,r2
 201ed6c:	e0bff817 	ldw	r2,-32(fp)
 201ed70:	10c00115 	stw	r3,4(r2)

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 201ed74:	e0bff403 	ldbu	r2,-48(fp)
 201ed78:	000d883a 	mov	r6,zero
 201ed7c:	100b883a 	mov	r5,r2
 201ed80:	0009883a 	mov	r4,zero
 201ed84:	201a2640 	call	201a264 <pbuf_alloc>
 201ed88:	e0bff215 	stw	r2,-56(fp)
 201ed8c:	e0bff217 	ldw	r2,-56(fp)
 201ed90:	1000031e 	bne	r2,zero,201eda0 <tcp_write+0x51c>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 201ed94:	e13ff817 	ldw	r4,-32(fp)
 201ed98:	201aa200 	call	201aa20 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 201ed9c:	0000e906 	br	201f144 <tcp_write+0x8c0>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 201eda0:	e17ff817 	ldw	r5,-32(fp)
 201eda4:	e13ff217 	ldw	r4,-56(fp)
 201eda8:	201ac140 	call	201ac14 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 201edac:	e13ff217 	ldw	r4,-56(fp)
 201edb0:	201ab640 	call	201ab64 <pbuf_clen>
 201edb4:	10c03fcc 	andi	r3,r2,255
 201edb8:	e0bfef8b 	ldhu	r2,-66(fp)
 201edbc:	1885883a 	add	r2,r3,r2
 201edc0:	e0bfef8d 	sth	r2,-66(fp)

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 201edc4:	e0bfef8b 	ldhu	r2,-66(fp)
 201edc8:	10800268 	cmpgeui	r2,r2,9
 201edcc:	1000031e 	bne	r2,zero,201eddc <tcp_write+0x558>
 201edd0:	e0bfef8b 	ldhu	r2,-66(fp)
 201edd4:	10bfff70 	cmpltui	r2,r2,65533
 201edd8:	1000031e 	bne	r2,zero,201ede8 <tcp_write+0x564>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
 201eddc:	e13ff217 	ldw	r4,-56(fp)
 201ede0:	201aa200 	call	201aa20 <pbuf_free>
      goto memerr;
 201ede4:	0000d706 	br	201f144 <tcp_write+0x8c0>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 201ede8:	e0bffc17 	ldw	r2,-16(fp)
 201edec:	10c01817 	ldw	r3,96(r2)
 201edf0:	e0bfef0b 	ldhu	r2,-68(fp)
 201edf4:	1887883a 	add	r3,r3,r2
 201edf8:	e0bff443 	ldbu	r2,-47(fp)
 201edfc:	d8800015 	stw	r2,0(sp)
 201ee00:	180f883a 	mov	r7,r3
 201ee04:	000d883a 	mov	r6,zero
 201ee08:	e17ff217 	ldw	r5,-56(fp)
 201ee0c:	e13ffc17 	ldw	r4,-16(fp)
 201ee10:	201e1e80 	call	201e1e8 <tcp_create_segment>
 201ee14:	e0bfec15 	stw	r2,-80(fp)
 201ee18:	e0bfec17 	ldw	r2,-80(fp)
 201ee1c:	1000c826 	beq	r2,zero,201f140 <tcp_write+0x8bc>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
#if TCP_CHECKSUM_ON_COPY
    seg->chksum = chksum;
 201ee20:	e0fffa8b 	ldhu	r3,-22(fp)
 201ee24:	e0bfec17 	ldw	r2,-80(fp)
 201ee28:	10c0028d 	sth	r3,10(r2)
    seg->chksum_swapped = chksum_swapped;
 201ee2c:	e0fffb03 	ldbu	r3,-20(fp)
 201ee30:	e0bfec17 	ldw	r2,-80(fp)
 201ee34:	10c00305 	stb	r3,12(r2)
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
 201ee38:	e0bfec17 	ldw	r2,-80(fp)
 201ee3c:	10800343 	ldbu	r2,13(r2)
 201ee40:	10800114 	ori	r2,r2,4
 201ee44:	1007883a 	mov	r3,r2
 201ee48:	e0bfec17 	ldw	r2,-80(fp)
 201ee4c:	10c00345 	stb	r3,13(r2)
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 201ee50:	e0bfee17 	ldw	r2,-72(fp)
 201ee54:	1000031e 	bne	r2,zero,201ee64 <tcp_write+0x5e0>
      queue = seg;
 201ee58:	e0bfec17 	ldw	r2,-80(fp)
 201ee5c:	e0bfee15 	stw	r2,-72(fp)
 201ee60:	00000306 	br	201ee70 <tcp_write+0x5ec>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
 201ee64:	e0bfed17 	ldw	r2,-76(fp)
 201ee68:	e0ffec17 	ldw	r3,-80(fp)
 201ee6c:	10c00015 	stw	r3,0(r2)
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 201ee70:	e0bfec17 	ldw	r2,-80(fp)
 201ee74:	e0bfed15 	stw	r2,-76(fp)

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 201ee78:	e0ffef0b 	ldhu	r3,-68(fp)
 201ee7c:	e0bff78b 	ldhu	r2,-34(fp)
 201ee80:	1885883a 	add	r2,r3,r2
 201ee84:	e0bfef0d 	sth	r2,-68(fp)
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 201ee88:	e0ffef0b 	ldhu	r3,-68(fp)
 201ee8c:	e0bffe0b 	ldhu	r2,-8(fp)
 201ee90:	18bf6336 	bltu	r3,r2,201ec20 <__alt_mem_mem_0+0xfcffec20>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 201ee94:	e0bff00b 	ldhu	r2,-64(fp)
 201ee98:	10003d26 	beq	r2,zero,201ef90 <tcp_write+0x70c>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 201ee9c:	e0bfeb17 	ldw	r2,-84(fp)
 201eea0:	10800117 	ldw	r2,4(r2)
 201eea4:	e0bff315 	stw	r2,-52(fp)
 201eea8:	00003006 	br	201ef6c <tcp_write+0x6e8>
      p->tot_len += oversize_used;
 201eeac:	e0bff317 	ldw	r2,-52(fp)
 201eeb0:	10c0020b 	ldhu	r3,8(r2)
 201eeb4:	e0bff00b 	ldhu	r2,-64(fp)
 201eeb8:	1885883a 	add	r2,r3,r2
 201eebc:	1007883a 	mov	r3,r2
 201eec0:	e0bff317 	ldw	r2,-52(fp)
 201eec4:	10c0020d 	sth	r3,8(r2)
      if (p->next == NULL) {
 201eec8:	e0bff317 	ldw	r2,-52(fp)
 201eecc:	10800017 	ldw	r2,0(r2)
 201eed0:	1000231e 	bne	r2,zero,201ef60 <tcp_write+0x6dc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 201eed4:	e0bff317 	ldw	r2,-52(fp)
 201eed8:	10c00117 	ldw	r3,4(r2)
 201eedc:	e0bff317 	ldw	r2,-52(fp)
 201eee0:	1080028b 	ldhu	r2,10(r2)
 201eee4:	10bfffcc 	andi	r2,r2,65535
 201eee8:	1885883a 	add	r2,r3,r2
 201eeec:	e0fff00b 	ldhu	r3,-64(fp)
 201eef0:	180d883a 	mov	r6,r3
 201eef4:	e17ffd17 	ldw	r5,-12(fp)
 201eef8:	1009883a 	mov	r4,r2
 201eefc:	2031b700 	call	2031b70 <lwip_chksum_copy>
 201ef00:	10ffffcc 	andi	r3,r2,65535
 201ef04:	e13ff00b 	ldhu	r4,-64(fp)
 201ef08:	e0bfeb17 	ldw	r2,-84(fp)
 201ef0c:	11400284 	addi	r5,r2,10
 201ef10:	e0bfeb17 	ldw	r2,-84(fp)
 201ef14:	10800304 	addi	r2,r2,12
 201ef18:	100f883a 	mov	r7,r2
 201ef1c:	280d883a 	mov	r6,r5
 201ef20:	200b883a 	mov	r5,r4
 201ef24:	1809883a 	mov	r4,r3
 201ef28:	201e6a80 	call	201e6a8 <tcp_seg_add_chksum>
 201ef2c:	e0bfeb17 	ldw	r2,-84(fp)
 201ef30:	10800343 	ldbu	r2,13(r2)
 201ef34:	10800114 	ori	r2,r2,4
 201ef38:	1007883a 	mov	r3,r2
 201ef3c:	e0bfeb17 	ldw	r2,-84(fp)
 201ef40:	10c00345 	stb	r3,13(r2)
        p->len += oversize_used;
 201ef44:	e0bff317 	ldw	r2,-52(fp)
 201ef48:	10c0028b 	ldhu	r3,10(r2)
 201ef4c:	e0bff00b 	ldhu	r2,-64(fp)
 201ef50:	1885883a 	add	r2,r3,r2
 201ef54:	1007883a 	mov	r3,r2
 201ef58:	e0bff317 	ldw	r2,-52(fp)
 201ef5c:	10c0028d 	sth	r3,10(r2)
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 201ef60:	e0bff317 	ldw	r2,-52(fp)
 201ef64:	10800017 	ldw	r2,0(r2)
 201ef68:	e0bff315 	stw	r2,-52(fp)
 201ef6c:	e0bff317 	ldw	r2,-52(fp)
 201ef70:	103fce1e 	bne	r2,zero,201eeac <__alt_mem_mem_0+0xfcffeeac>
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
        p->len += oversize_used;
      }
    }
    last_unsent->len += oversize_used;
 201ef74:	e0bfeb17 	ldw	r2,-84(fp)
 201ef78:	10c0020b 	ldhu	r3,8(r2)
 201ef7c:	e0bff00b 	ldhu	r2,-64(fp)
 201ef80:	1885883a 	add	r2,r3,r2
 201ef84:	1007883a 	mov	r3,r2
 201ef88:	e0bfeb17 	ldw	r2,-84(fp)
 201ef8c:	10c0020d 	sth	r3,8(r2)
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 201ef90:	e0fff90b 	ldhu	r3,-28(fp)
 201ef94:	e0bffc17 	ldw	r2,-16(fp)
 201ef98:	10c01b8d 	sth	r3,110(r2)
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
 201ef9c:	e0bfea17 	ldw	r2,-88(fp)
 201efa0:	10002126 	beq	r2,zero,201f028 <tcp_write+0x7a4>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 201efa4:	e0bfeb17 	ldw	r2,-84(fp)
 201efa8:	10800117 	ldw	r2,4(r2)
 201efac:	e17fea17 	ldw	r5,-88(fp)
 201efb0:	1009883a 	mov	r4,r2
 201efb4:	201ac140 	call	201ac14 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 201efb8:	e0bfeb17 	ldw	r2,-84(fp)
 201efbc:	10c0020b 	ldhu	r3,8(r2)
 201efc0:	e0bfea17 	ldw	r2,-88(fp)
 201efc4:	1080020b 	ldhu	r2,8(r2)
 201efc8:	1885883a 	add	r2,r3,r2
 201efcc:	1007883a 	mov	r3,r2
 201efd0:	e0bfeb17 	ldw	r2,-84(fp)
 201efd4:	10c0020d 	sth	r3,8(r2)
#if TCP_CHECKSUM_ON_COPY
    if (concat_chksummed) {
 201efd8:	e0bff08b 	ldhu	r2,-62(fp)
 201efdc:	10001226 	beq	r2,zero,201f028 <tcp_write+0x7a4>
      tcp_seg_add_chksum(concat_chksum, concat_chksummed, &last_unsent->chksum,
 201efe0:	e0bff98b 	ldhu	r2,-26(fp)
 201efe4:	10ffffcc 	andi	r3,r2,65535
 201efe8:	e13ff08b 	ldhu	r4,-62(fp)
 201efec:	e0bfeb17 	ldw	r2,-84(fp)
 201eff0:	11400284 	addi	r5,r2,10
 201eff4:	e0bfeb17 	ldw	r2,-84(fp)
 201eff8:	10800304 	addi	r2,r2,12
 201effc:	100f883a 	mov	r7,r2
 201f000:	280d883a 	mov	r6,r5
 201f004:	200b883a 	mov	r5,r4
 201f008:	1809883a 	mov	r4,r3
 201f00c:	201e6a80 	call	201e6a8 <tcp_seg_add_chksum>
        &last_unsent->chksum_swapped);
      last_unsent->flags |= TF_SEG_DATA_CHECKSUMMED;
 201f010:	e0bfeb17 	ldw	r2,-84(fp)
 201f014:	10800343 	ldbu	r2,13(r2)
 201f018:	10800114 	ori	r2,r2,4
 201f01c:	1007883a 	mov	r3,r2
 201f020:	e0bfeb17 	ldw	r2,-84(fp)
 201f024:	10c00345 	stb	r3,13(r2)

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 201f028:	e0bfeb17 	ldw	r2,-84(fp)
 201f02c:	1000041e 	bne	r2,zero,201f040 <tcp_write+0x7bc>
    pcb->unsent = queue;
 201f030:	e0bffc17 	ldw	r2,-16(fp)
 201f034:	e0ffee17 	ldw	r3,-72(fp)
 201f038:	10c01c15 	stw	r3,112(r2)
 201f03c:	00000306 	br	201f04c <tcp_write+0x7c8>
  } else {
    last_unsent->next = queue;
 201f040:	e0bfeb17 	ldw	r2,-84(fp)
 201f044:	e0ffee17 	ldw	r3,-72(fp)
 201f048:	10c00015 	stw	r3,0(r2)
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 201f04c:	e0bffc17 	ldw	r2,-16(fp)
 201f050:	10c01817 	ldw	r3,96(r2)
 201f054:	e0bffe0b 	ldhu	r2,-8(fp)
 201f058:	1887883a 	add	r3,r3,r2
 201f05c:	e0bffc17 	ldw	r2,-16(fp)
 201f060:	10c01815 	stw	r3,96(r2)
  pcb->snd_buf -= len;
 201f064:	e0bffc17 	ldw	r2,-16(fp)
 201f068:	10c01a8b 	ldhu	r3,106(r2)
 201f06c:	e0bffe0b 	ldhu	r2,-8(fp)
 201f070:	1885c83a 	sub	r2,r3,r2
 201f074:	1007883a 	mov	r3,r2
 201f078:	e0bffc17 	ldw	r2,-16(fp)
 201f07c:	10c01a8d 	sth	r3,106(r2)
  pcb->snd_queuelen = queuelen;
 201f080:	e0bffc17 	ldw	r2,-16(fp)
 201f084:	e0ffef8b 	ldhu	r3,-66(fp)
 201f088:	10c01b0d 	sth	r3,108(r2)
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 201f08c:	e0bfec17 	ldw	r2,-80(fp)
 201f090:	10002126 	beq	r2,zero,201f118 <tcp_write+0x894>
 201f094:	e0bfec17 	ldw	r2,-80(fp)
 201f098:	10800417 	ldw	r2,16(r2)
 201f09c:	10001e26 	beq	r2,zero,201f118 <tcp_write+0x894>
 201f0a0:	e0bfff03 	ldbu	r2,-4(fp)
 201f0a4:	1080008c 	andi	r2,r2,2
 201f0a8:	10001b1e 	bne	r2,zero,201f118 <tcp_write+0x894>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 201f0ac:	e0bfec17 	ldw	r2,-80(fp)
 201f0b0:	10800417 	ldw	r2,16(r2)
 201f0b4:	e0ffec17 	ldw	r3,-80(fp)
 201f0b8:	18c00417 	ldw	r3,16(r3)
 201f0bc:	19000303 	ldbu	r4,12(r3)
 201f0c0:	18c00343 	ldbu	r3,13(r3)
 201f0c4:	1806923a 	slli	r3,r3,8
 201f0c8:	1906b03a 	or	r3,r3,r4
 201f0cc:	18c20014 	ori	r3,r3,2048
 201f0d0:	180d883a 	mov	r6,r3
 201f0d4:	30ffffcc 	andi	r3,r6,65535
 201f0d8:	19403fcc 	andi	r5,r3,255
 201f0dc:	10c00303 	ldbu	r3,12(r2)
 201f0e0:	1806703a 	and	r3,r3,zero
 201f0e4:	1809883a 	mov	r4,r3
 201f0e8:	2807883a 	mov	r3,r5
 201f0ec:	20c6b03a 	or	r3,r4,r3
 201f0f0:	10c00305 	stb	r3,12(r2)
 201f0f4:	30ffffcc 	andi	r3,r6,65535
 201f0f8:	1806d23a 	srli	r3,r3,8
 201f0fc:	197fffcc 	andi	r5,r3,65535
 201f100:	10c00343 	ldbu	r3,13(r2)
 201f104:	1806703a 	and	r3,r3,zero
 201f108:	1809883a 	mov	r4,r3
 201f10c:	2807883a 	mov	r3,r5
 201f110:	20c6b03a 	or	r3,r4,r3
 201f114:	10c00345 	stb	r3,13(r2)
  }

  return ERR_OK;
 201f118:	0005883a 	mov	r2,zero
 201f11c:	00002006 	br	201f1a0 <tcp_write+0x91c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2,
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
 201f120:	0001883a 	nop
 201f124:	00000706 	br	201f144 <tcp_write+0x8c0>
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2,
                      ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
          goto memerr;
 201f128:	0001883a 	nop
 201f12c:	00000506 	br	201f144 <tcp_write+0x8c0>
    if (apiflags & TCP_WRITE_FLAG_COPY) {
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
 201f130:	0001883a 	nop
 201f134:	00000306 	br	201f144 <tcp_write+0x8c0>
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
        goto memerr;
 201f138:	0001883a 	nop
 201f13c:	00000106 	br	201f144 <tcp_write+0x8c0>
      pbuf_free(p);
      goto memerr;
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
      goto memerr;
 201f140:	0001883a 	nop
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 201f144:	e0bffc17 	ldw	r2,-16(fp)
 201f148:	10c00883 	ldbu	r3,34(r2)
 201f14c:	00bfe004 	movi	r2,-128
 201f150:	1884b03a 	or	r2,r3,r2
 201f154:	1007883a 	mov	r3,r2
 201f158:	e0bffc17 	ldw	r2,-16(fp)
 201f15c:	10c00885 	stb	r3,34(r2)
  TCP_STATS_INC(tcp.memerr);
 201f160:	008085f4 	movhi	r2,535
 201f164:	10a86704 	addi	r2,r2,-24164
 201f168:	10804e17 	ldw	r2,312(r2)
 201f16c:	10c00044 	addi	r3,r2,1
 201f170:	008085f4 	movhi	r2,535
 201f174:	10a86704 	addi	r2,r2,-24164
 201f178:	10c04e15 	stw	r3,312(r2)

  if (concat_p != NULL) {
 201f17c:	e0bfea17 	ldw	r2,-88(fp)
 201f180:	10000226 	beq	r2,zero,201f18c <tcp_write+0x908>
    pbuf_free(concat_p);
 201f184:	e13fea17 	ldw	r4,-88(fp)
 201f188:	201aa200 	call	201aa20 <pbuf_free>
  }
  if (queue != NULL) {
 201f18c:	e0bfee17 	ldw	r2,-72(fp)
 201f190:	10000226 	beq	r2,zero,201f19c <tcp_write+0x918>
    tcp_segs_free(queue);
 201f194:	e13fee17 	ldw	r4,-72(fp)
 201f198:	201d2940 	call	201d294 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 201f19c:	00bfffc4 	movi	r2,-1
}
 201f1a0:	e037883a 	mov	sp,fp
 201f1a4:	dfc00117 	ldw	ra,4(sp)
 201f1a8:	df000017 	ldw	fp,0(sp)
 201f1ac:	dec00204 	addi	sp,sp,8
 201f1b0:	f800283a 	ret

0201f1b4 <tcp_enqueue_flags>:
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 201f1b4:	defff604 	addi	sp,sp,-40
 201f1b8:	dfc00915 	stw	ra,36(sp)
 201f1bc:	df000815 	stw	fp,32(sp)
 201f1c0:	df000804 	addi	fp,sp,32
 201f1c4:	e13ffe15 	stw	r4,-8(fp)
 201f1c8:	2805883a 	mov	r2,r5
 201f1cc:	e0bfff05 	stb	r2,-4(fp)
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 201f1d0:	e03ff905 	stb	zero,-28(fp)
  u8_t optlen = 0;
 201f1d4:	e03ffb05 	stb	zero,-20(fp)

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 201f1d8:	e0bffe17 	ldw	r2,-8(fp)
 201f1dc:	10801b0b 	ldhu	r2,108(r2)
 201f1e0:	10bfffcc 	andi	r2,r2,65535
 201f1e4:	10800228 	cmpgeui	r2,r2,8
 201f1e8:	1000051e 	bne	r2,zero,201f200 <tcp_enqueue_flags+0x4c>
 201f1ec:	e0bffe17 	ldw	r2,-8(fp)
 201f1f0:	10801b0b 	ldhu	r2,108(r2)
 201f1f4:	10bfffcc 	andi	r2,r2,65535
 201f1f8:	10bfff70 	cmpltui	r2,r2,65533
 201f1fc:	1000101e 	bne	r2,zero,201f240 <tcp_enqueue_flags+0x8c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 201f200:	008085f4 	movhi	r2,535
 201f204:	10a86704 	addi	r2,r2,-24164
 201f208:	10804e17 	ldw	r2,312(r2)
 201f20c:	10c00044 	addi	r3,r2,1
 201f210:	008085f4 	movhi	r2,535
 201f214:	10a86704 	addi	r2,r2,-24164
 201f218:	10c04e15 	stw	r3,312(r2)
    pcb->flags |= TF_NAGLEMEMERR;
 201f21c:	e0bffe17 	ldw	r2,-8(fp)
 201f220:	10c00883 	ldbu	r3,34(r2)
 201f224:	00bfe004 	movi	r2,-128
 201f228:	1884b03a 	or	r2,r3,r2
 201f22c:	1007883a 	mov	r3,r2
 201f230:	e0bffe17 	ldw	r2,-8(fp)
 201f234:	10c00885 	stb	r3,34(r2)
    return ERR_MEM;
 201f238:	00bfffc4 	movi	r2,-1
 201f23c:	00009206 	br	201f488 <tcp_enqueue_flags+0x2d4>
  }

  if (flags & TCP_SYN) {
 201f240:	e0bfff03 	ldbu	r2,-4(fp)
 201f244:	1080008c 	andi	r2,r2,2
 201f248:	10000226 	beq	r2,zero,201f254 <tcp_enqueue_flags+0xa0>
    optflags = TF_SEG_OPTS_MSS;
 201f24c:	00800044 	movi	r2,1
 201f250:	e0bff905 	stb	r2,-28(fp)
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 201f254:	e0bff903 	ldbu	r2,-28(fp)
 201f258:	1080004c 	andi	r2,r2,1
 201f25c:	10000226 	beq	r2,zero,201f268 <tcp_enqueue_flags+0xb4>
 201f260:	00c00104 	movi	r3,4
 201f264:	00000106 	br	201f26c <tcp_enqueue_flags+0xb8>
 201f268:	0007883a 	mov	r3,zero
 201f26c:	e0bff903 	ldbu	r2,-28(fp)
 201f270:	1080008c 	andi	r2,r2,2
 201f274:	10000226 	beq	r2,zero,201f280 <tcp_enqueue_flags+0xcc>
 201f278:	00800304 	movi	r2,12
 201f27c:	00000106 	br	201f284 <tcp_enqueue_flags+0xd0>
 201f280:	0005883a 	mov	r2,zero
 201f284:	1885883a 	add	r2,r3,r2
 201f288:	e0bffb05 	stb	r2,-20(fp)

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
 201f28c:	e0bffe17 	ldw	r2,-8(fp)
 201f290:	10801a8b 	ldhu	r2,106(r2)
 201f294:	10bfffcc 	andi	r2,r2,65535
 201f298:	1000091e 	bne	r2,zero,201f2c0 <tcp_enqueue_flags+0x10c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
 201f29c:	008085f4 	movhi	r2,535
 201f2a0:	10a86704 	addi	r2,r2,-24164
 201f2a4:	10804e17 	ldw	r2,312(r2)
 201f2a8:	10c00044 	addi	r3,r2,1
 201f2ac:	008085f4 	movhi	r2,535
 201f2b0:	10a86704 	addi	r2,r2,-24164
 201f2b4:	10c04e15 	stw	r3,312(r2)
    return ERR_MEM;
 201f2b8:	00bfffc4 	movi	r2,-1
 201f2bc:	00007206 	br	201f488 <tcp_enqueue_flags+0x2d4>
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 201f2c0:	e0bffb03 	ldbu	r2,-20(fp)
 201f2c4:	000d883a 	mov	r6,zero
 201f2c8:	100b883a 	mov	r5,r2
 201f2cc:	0009883a 	mov	r4,zero
 201f2d0:	201a2640 	call	201a264 <pbuf_alloc>
 201f2d4:	e0bffc15 	stw	r2,-16(fp)
 201f2d8:	e0bffc17 	ldw	r2,-16(fp)
 201f2dc:	1000101e 	bne	r2,zero,201f320 <tcp_enqueue_flags+0x16c>
    pcb->flags |= TF_NAGLEMEMERR;
 201f2e0:	e0bffe17 	ldw	r2,-8(fp)
 201f2e4:	10c00883 	ldbu	r3,34(r2)
 201f2e8:	00bfe004 	movi	r2,-128
 201f2ec:	1884b03a 	or	r2,r3,r2
 201f2f0:	1007883a 	mov	r3,r2
 201f2f4:	e0bffe17 	ldw	r2,-8(fp)
 201f2f8:	10c00885 	stb	r3,34(r2)
    TCP_STATS_INC(tcp.memerr);
 201f2fc:	008085f4 	movhi	r2,535
 201f300:	10a86704 	addi	r2,r2,-24164
 201f304:	10804e17 	ldw	r2,312(r2)
 201f308:	10c00044 	addi	r3,r2,1
 201f30c:	008085f4 	movhi	r2,535
 201f310:	10a86704 	addi	r2,r2,-24164
 201f314:	10c04e15 	stw	r3,312(r2)
    return ERR_MEM;
 201f318:	00bfffc4 	movi	r2,-1
 201f31c:	00005a06 	br	201f488 <tcp_enqueue_flags+0x2d4>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 201f320:	e0ffff03 	ldbu	r3,-4(fp)
 201f324:	e0bffe17 	ldw	r2,-8(fp)
 201f328:	11001817 	ldw	r4,96(r2)
 201f32c:	e0bff903 	ldbu	r2,-28(fp)
 201f330:	d8800015 	stw	r2,0(sp)
 201f334:	200f883a 	mov	r7,r4
 201f338:	180d883a 	mov	r6,r3
 201f33c:	e17ffc17 	ldw	r5,-16(fp)
 201f340:	e13ffe17 	ldw	r4,-8(fp)
 201f344:	201e1e80 	call	201e1e8 <tcp_create_segment>
 201f348:	e0bffd15 	stw	r2,-12(fp)
 201f34c:	e0bffd17 	ldw	r2,-12(fp)
 201f350:	1000101e 	bne	r2,zero,201f394 <tcp_enqueue_flags+0x1e0>
    pcb->flags |= TF_NAGLEMEMERR;
 201f354:	e0bffe17 	ldw	r2,-8(fp)
 201f358:	10c00883 	ldbu	r3,34(r2)
 201f35c:	00bfe004 	movi	r2,-128
 201f360:	1884b03a 	or	r2,r3,r2
 201f364:	1007883a 	mov	r3,r2
 201f368:	e0bffe17 	ldw	r2,-8(fp)
 201f36c:	10c00885 	stb	r3,34(r2)
    TCP_STATS_INC(tcp.memerr);
 201f370:	008085f4 	movhi	r2,535
 201f374:	10a86704 	addi	r2,r2,-24164
 201f378:	10804e17 	ldw	r2,312(r2)
 201f37c:	10c00044 	addi	r3,r2,1
 201f380:	008085f4 	movhi	r2,535
 201f384:	10a86704 	addi	r2,r2,-24164
 201f388:	10c04e15 	stw	r3,312(r2)
    return ERR_MEM;
 201f38c:	00bfffc4 	movi	r2,-1
 201f390:	00003d06 	br	201f488 <tcp_enqueue_flags+0x2d4>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 201f394:	e0bffe17 	ldw	r2,-8(fp)
 201f398:	10801c17 	ldw	r2,112(r2)
 201f39c:	1000041e 	bne	r2,zero,201f3b0 <tcp_enqueue_flags+0x1fc>
    pcb->unsent = seg;
 201f3a0:	e0bffe17 	ldw	r2,-8(fp)
 201f3a4:	e0fffd17 	ldw	r3,-12(fp)
 201f3a8:	10c01c15 	stw	r3,112(r2)
 201f3ac:	00000d06 	br	201f3e4 <tcp_enqueue_flags+0x230>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 201f3b0:	e0bffe17 	ldw	r2,-8(fp)
 201f3b4:	10801c17 	ldw	r2,112(r2)
 201f3b8:	e0bffa15 	stw	r2,-24(fp)
 201f3bc:	00000306 	br	201f3cc <tcp_enqueue_flags+0x218>
 201f3c0:	e0bffa17 	ldw	r2,-24(fp)
 201f3c4:	10800017 	ldw	r2,0(r2)
 201f3c8:	e0bffa15 	stw	r2,-24(fp)
 201f3cc:	e0bffa17 	ldw	r2,-24(fp)
 201f3d0:	10800017 	ldw	r2,0(r2)
 201f3d4:	103ffa1e 	bne	r2,zero,201f3c0 <__alt_mem_mem_0+0xfcfff3c0>
    useg->next = seg;
 201f3d8:	e0bffa17 	ldw	r2,-24(fp)
 201f3dc:	e0fffd17 	ldw	r3,-12(fp)
 201f3e0:	10c00015 	stw	r3,0(r2)
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 201f3e4:	e0bffe17 	ldw	r2,-8(fp)
 201f3e8:	10001b8d 	sth	zero,110(r2)
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 201f3ec:	e0bfff03 	ldbu	r2,-4(fp)
 201f3f0:	1080008c 	andi	r2,r2,2
 201f3f4:	1000031e 	bne	r2,zero,201f404 <tcp_enqueue_flags+0x250>
 201f3f8:	e0bfff03 	ldbu	r2,-4(fp)
 201f3fc:	1080004c 	andi	r2,r2,1
 201f400:	10000b26 	beq	r2,zero,201f430 <tcp_enqueue_flags+0x27c>
    pcb->snd_lbb++;
 201f404:	e0bffe17 	ldw	r2,-8(fp)
 201f408:	10801817 	ldw	r2,96(r2)
 201f40c:	10c00044 	addi	r3,r2,1
 201f410:	e0bffe17 	ldw	r2,-8(fp)
 201f414:	10c01815 	stw	r3,96(r2)
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
 201f418:	e0bffe17 	ldw	r2,-8(fp)
 201f41c:	10801a8b 	ldhu	r2,106(r2)
 201f420:	10bfffc4 	addi	r2,r2,-1
 201f424:	1007883a 	mov	r3,r2
 201f428:	e0bffe17 	ldw	r2,-8(fp)
 201f42c:	10c01a8d 	sth	r3,106(r2)
  }
  if (flags & TCP_FIN) {
 201f430:	e0bfff03 	ldbu	r2,-4(fp)
 201f434:	1080004c 	andi	r2,r2,1
 201f438:	10000626 	beq	r2,zero,201f454 <tcp_enqueue_flags+0x2a0>
    pcb->flags |= TF_FIN;
 201f43c:	e0bffe17 	ldw	r2,-8(fp)
 201f440:	10800883 	ldbu	r2,34(r2)
 201f444:	10800814 	ori	r2,r2,32
 201f448:	1007883a 	mov	r3,r2
 201f44c:	e0bffe17 	ldw	r2,-8(fp)
 201f450:	10c00885 	stb	r3,34(r2)
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 201f454:	e0bffd17 	ldw	r2,-12(fp)
 201f458:	10800117 	ldw	r2,4(r2)
 201f45c:	1009883a 	mov	r4,r2
 201f460:	201ab640 	call	201ab64 <pbuf_clen>
 201f464:	1009883a 	mov	r4,r2
 201f468:	e0bffe17 	ldw	r2,-8(fp)
 201f46c:	10c01b0b 	ldhu	r3,108(r2)
 201f470:	20803fcc 	andi	r2,r4,255
 201f474:	1885883a 	add	r2,r3,r2
 201f478:	1007883a 	mov	r3,r2
 201f47c:	e0bffe17 	ldw	r2,-8(fp)
 201f480:	10c01b0d 	sth	r3,108(r2)
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 201f484:	0005883a 	mov	r2,zero
}
 201f488:	e037883a 	mov	sp,fp
 201f48c:	dfc00117 	ldw	ra,4(sp)
 201f490:	df000017 	ldw	fp,0(sp)
 201f494:	dec00204 	addi	sp,sp,8
 201f498:	f800283a 	ret

0201f49c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 201f49c:	defff704 	addi	sp,sp,-36
 201f4a0:	dfc00815 	stw	ra,32(sp)
 201f4a4:	df000715 	stw	fp,28(sp)
 201f4a8:	df000704 	addi	fp,sp,28
 201f4ac:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  u8_t optlen = 0;
 201f4b0:	e03ffc05 	stb	zero,-16(fp)
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
 201f4b4:	e13ffc03 	ldbu	r4,-16(fp)
 201f4b8:	e0bfff17 	ldw	r2,-4(fp)
 201f4bc:	10801517 	ldw	r2,84(r2)
 201f4c0:	1006d63a 	srli	r3,r2,24
 201f4c4:	e0bfff17 	ldw	r2,-4(fp)
 201f4c8:	10801517 	ldw	r2,84(r2)
 201f4cc:	1004d23a 	srli	r2,r2,8
 201f4d0:	10bfc00c 	andi	r2,r2,65280
 201f4d4:	1886b03a 	or	r3,r3,r2
 201f4d8:	e0bfff17 	ldw	r2,-4(fp)
 201f4dc:	10801517 	ldw	r2,84(r2)
 201f4e0:	10bfc00c 	andi	r2,r2,65280
 201f4e4:	1004923a 	slli	r2,r2,8
 201f4e8:	1886b03a 	or	r3,r3,r2
 201f4ec:	e0bfff17 	ldw	r2,-4(fp)
 201f4f0:	10801517 	ldw	r2,84(r2)
 201f4f4:	1004963a 	slli	r2,r2,24
 201f4f8:	1884b03a 	or	r2,r3,r2
 201f4fc:	100f883a 	mov	r7,r2
 201f500:	000d883a 	mov	r6,zero
 201f504:	200b883a 	mov	r5,r4
 201f508:	e13fff17 	ldw	r4,-4(fp)
 201f50c:	201dcb80 	call	201dcb8 <tcp_output_alloc_header>
 201f510:	e0bffd15 	stw	r2,-12(fp)
  if (p == NULL) {
 201f514:	e0bffd17 	ldw	r2,-12(fp)
 201f518:	1000021e 	bne	r2,zero,201f524 <tcp_send_empty_ack+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 201f51c:	00bfff84 	movi	r2,-2
 201f520:	00004006 	br	201f624 <tcp_send_empty_ack+0x188>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 201f524:	e0bffd17 	ldw	r2,-12(fp)
 201f528:	10800117 	ldw	r2,4(r2)
 201f52c:	e0bffe15 	stw	r2,-8(fp)
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 201f530:	e0bfff17 	ldw	r2,-4(fp)
 201f534:	10c00883 	ldbu	r3,34(r2)
 201f538:	00bfff04 	movi	r2,-4
 201f53c:	1884703a 	and	r2,r3,r2
 201f540:	1007883a 	mov	r3,r2
 201f544:	e0bfff17 	ldw	r2,-4(fp)
 201f548:	10c00885 	stb	r3,34(r2)
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
 201f54c:	e0ffff17 	ldw	r3,-4(fp)
 201f550:	e0bfff17 	ldw	r2,-4(fp)
 201f554:	11000104 	addi	r4,r2,4
        IP_PROTO_TCP, p->tot_len);
 201f558:	e0bffd17 	ldw	r2,-12(fp)
 201f55c:	1080020b 	ldhu	r2,8(r2)
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
 201f560:	10bfffcc 	andi	r2,r2,65535
 201f564:	d8800015 	stw	r2,0(sp)
 201f568:	01c00184 	movi	r7,6
 201f56c:	200d883a 	mov	r6,r4
 201f570:	180b883a 	mov	r5,r3
 201f574:	e13ffd17 	ldw	r4,-12(fp)
 201f578:	20315e80 	call	20315e8 <inet_chksum_pseudo>
 201f57c:	100d883a 	mov	r6,r2
 201f580:	e0bffe17 	ldw	r2,-8(fp)
 201f584:	30ffffcc 	andi	r3,r6,65535
 201f588:	19403fcc 	andi	r5,r3,255
 201f58c:	10c00403 	ldbu	r3,16(r2)
 201f590:	1806703a 	and	r3,r3,zero
 201f594:	1809883a 	mov	r4,r3
 201f598:	2807883a 	mov	r3,r5
 201f59c:	20c6b03a 	or	r3,r4,r3
 201f5a0:	10c00405 	stb	r3,16(r2)
 201f5a4:	30ffffcc 	andi	r3,r6,65535
 201f5a8:	1806d23a 	srli	r3,r3,8
 201f5ac:	197fffcc 	andi	r5,r3,65535
 201f5b0:	10c00443 	ldbu	r3,17(r2)
 201f5b4:	1806703a 	and	r3,r3,zero
 201f5b8:	1809883a 	mov	r4,r3
 201f5bc:	2807883a 	mov	r3,r5
 201f5c0:	20c6b03a 	or	r3,r4,r3
 201f5c4:	10c00445 	stb	r3,17(r2)
        IP_PROTO_TCP, p->tot_len);
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 201f5c8:	e13fff17 	ldw	r4,-4(fp)
 201f5cc:	e0bfff17 	ldw	r2,-4(fp)
 201f5d0:	11400104 	addi	r5,r2,4
 201f5d4:	e0bfff17 	ldw	r2,-4(fp)
 201f5d8:	10800283 	ldbu	r2,10(r2)
 201f5dc:	11803fcc 	andi	r6,r2,255
 201f5e0:	e0bfff17 	ldw	r2,-4(fp)
 201f5e4:	10800243 	ldbu	r2,9(r2)
 201f5e8:	10803fcc 	andi	r2,r2,255
 201f5ec:	e0ffff17 	ldw	r3,-4(fp)
 201f5f0:	18c002c4 	addi	r3,r3,11
 201f5f4:	d8c00215 	stw	r3,8(sp)
 201f5f8:	00c00184 	movi	r3,6
 201f5fc:	d8c00115 	stw	r3,4(sp)
 201f600:	d8800015 	stw	r2,0(sp)
 201f604:	300f883a 	mov	r7,r6
 201f608:	280d883a 	mov	r6,r5
 201f60c:	200b883a 	mov	r5,r4
 201f610:	e13ffd17 	ldw	r4,-12(fp)
 201f614:	20328f40 	call	20328f4 <ip_output_hinted>
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
 201f618:	e13ffd17 	ldw	r4,-12(fp)
 201f61c:	201aa200 	call	201aa20 <pbuf_free>

  return ERR_OK;
 201f620:	0005883a 	mov	r2,zero
}
 201f624:	e037883a 	mov	sp,fp
 201f628:	dfc00117 	ldw	ra,4(sp)
 201f62c:	df000017 	ldw	fp,0(sp)
 201f630:	dec00204 	addi	sp,sp,8
 201f634:	f800283a 	ret

0201f638 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 201f638:	defff804 	addi	sp,sp,-32
 201f63c:	dfc00715 	stw	ra,28(sp)
 201f640:	df000615 	stw	fp,24(sp)
 201f644:	df000604 	addi	fp,sp,24
 201f648:	e13fff15 	stw	r4,-4(fp)

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 201f64c:	d0e82017 	ldw	r3,-24448(gp)
 201f650:	e0bfff17 	ldw	r2,-4(fp)
 201f654:	1880021e 	bne	r3,r2,201f660 <tcp_output+0x28>
    return ERR_OK;
 201f658:	0005883a 	mov	r2,zero
 201f65c:	00029c06 	br	20200d0 <tcp_output+0xa98>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 201f660:	e0bfff17 	ldw	r2,-4(fp)
 201f664:	10c0140b 	ldhu	r3,80(r2)
 201f668:	e0bfff17 	ldw	r2,-4(fp)
 201f66c:	1140190b 	ldhu	r5,100(r2)
 201f670:	1809883a 	mov	r4,r3
 201f674:	20bfffcc 	andi	r2,r4,65535
 201f678:	28ffffcc 	andi	r3,r5,65535
 201f67c:	1880012e 	bgeu	r3,r2,201f684 <tcp_output+0x4c>
 201f680:	2809883a 	mov	r4,r5
 201f684:	20bfffcc 	andi	r2,r4,65535
 201f688:	e0bffd15 	stw	r2,-12(fp)

  seg = pcb->unsent;
 201f68c:	e0bfff17 	ldw	r2,-4(fp)
 201f690:	10801c17 	ldw	r2,112(r2)
 201f694:	e0bffa15 	stw	r2,-24(fp)
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 201f698:	e0bfff17 	ldw	r2,-4(fp)
 201f69c:	10800883 	ldbu	r2,34(r2)
 201f6a0:	10803fcc 	andi	r2,r2,255
 201f6a4:	1080008c 	andi	r2,r2,2
 201f6a8:	10004726 	beq	r2,zero,201f7c8 <tcp_output+0x190>
 201f6ac:	e0bffa17 	ldw	r2,-24(fp)
 201f6b0:	10004226 	beq	r2,zero,201f7bc <tcp_output+0x184>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 201f6b4:	e0bffa17 	ldw	r2,-24(fp)
 201f6b8:	10800417 	ldw	r2,16(r2)
 201f6bc:	10c00103 	ldbu	r3,4(r2)
 201f6c0:	11000143 	ldbu	r4,5(r2)
 201f6c4:	2008923a 	slli	r4,r4,8
 201f6c8:	20c6b03a 	or	r3,r4,r3
 201f6cc:	11000183 	ldbu	r4,6(r2)
 201f6d0:	2008943a 	slli	r4,r4,16
 201f6d4:	20c6b03a 	or	r3,r4,r3
 201f6d8:	108001c3 	ldbu	r2,7(r2)
 201f6dc:	1004963a 	slli	r2,r2,24
 201f6e0:	10c4b03a 	or	r2,r2,r3
 201f6e4:	1006d63a 	srli	r3,r2,24
 201f6e8:	e0bffa17 	ldw	r2,-24(fp)
 201f6ec:	10800417 	ldw	r2,16(r2)
 201f6f0:	11000103 	ldbu	r4,4(r2)
 201f6f4:	11400143 	ldbu	r5,5(r2)
 201f6f8:	280a923a 	slli	r5,r5,8
 201f6fc:	2908b03a 	or	r4,r5,r4
 201f700:	11400183 	ldbu	r5,6(r2)
 201f704:	280a943a 	slli	r5,r5,16
 201f708:	2908b03a 	or	r4,r5,r4
 201f70c:	108001c3 	ldbu	r2,7(r2)
 201f710:	1004963a 	slli	r2,r2,24
 201f714:	1104b03a 	or	r2,r2,r4
 201f718:	1004d23a 	srli	r2,r2,8
 201f71c:	10bfc00c 	andi	r2,r2,65280
 201f720:	1886b03a 	or	r3,r3,r2
 201f724:	e0bffa17 	ldw	r2,-24(fp)
 201f728:	10800417 	ldw	r2,16(r2)
 201f72c:	11000103 	ldbu	r4,4(r2)
 201f730:	11400143 	ldbu	r5,5(r2)
 201f734:	280a923a 	slli	r5,r5,8
 201f738:	2908b03a 	or	r4,r5,r4
 201f73c:	11400183 	ldbu	r5,6(r2)
 201f740:	280a943a 	slli	r5,r5,16
 201f744:	2908b03a 	or	r4,r5,r4
 201f748:	108001c3 	ldbu	r2,7(r2)
 201f74c:	1004963a 	slli	r2,r2,24
 201f750:	1104b03a 	or	r2,r2,r4
 201f754:	10bfc00c 	andi	r2,r2,65280
 201f758:	1004923a 	slli	r2,r2,8
 201f75c:	1886b03a 	or	r3,r3,r2
 201f760:	e0bffa17 	ldw	r2,-24(fp)
 201f764:	10800417 	ldw	r2,16(r2)
 201f768:	11000103 	ldbu	r4,4(r2)
 201f76c:	11400143 	ldbu	r5,5(r2)
 201f770:	280a923a 	slli	r5,r5,8
 201f774:	2908b03a 	or	r4,r5,r4
 201f778:	11400183 	ldbu	r5,6(r2)
 201f77c:	280a943a 	slli	r5,r5,16
 201f780:	2908b03a 	or	r4,r5,r4
 201f784:	108001c3 	ldbu	r2,7(r2)
 201f788:	1004963a 	slli	r2,r2,24
 201f78c:	1104b03a 	or	r2,r2,r4
 201f790:	1004963a 	slli	r2,r2,24
 201f794:	1886b03a 	or	r3,r3,r2
 201f798:	e0bfff17 	ldw	r2,-4(fp)
 201f79c:	10801317 	ldw	r2,76(r2)
 201f7a0:	1887c83a 	sub	r3,r3,r2
 201f7a4:	e0bffa17 	ldw	r2,-24(fp)
 201f7a8:	1080020b 	ldhu	r2,8(r2)
 201f7ac:	10bfffcc 	andi	r2,r2,65535
 201f7b0:	1885883a 	add	r2,r3,r2
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
 201f7b4:	e0fffd17 	ldw	r3,-12(fp)
 201f7b8:	1880032e 	bgeu	r3,r2,201f7c8 <tcp_output+0x190>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 201f7bc:	e13fff17 	ldw	r4,-4(fp)
 201f7c0:	201f49c0 	call	201f49c <tcp_send_empty_ack>
 201f7c4:	00024206 	br	20200d0 <tcp_output+0xa98>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 201f7c8:	e0bfff17 	ldw	r2,-4(fp)
 201f7cc:	10801d17 	ldw	r2,116(r2)
 201f7d0:	e0bffb15 	stw	r2,-20(fp)
  if (useg != NULL) {
 201f7d4:	e0bffb17 	ldw	r2,-20(fp)
 201f7d8:	1001eb26 	beq	r2,zero,201ff88 <tcp_output+0x950>
    for (; useg->next != NULL; useg = useg->next);
 201f7dc:	00000306 	br	201f7ec <tcp_output+0x1b4>
 201f7e0:	e0bffb17 	ldw	r2,-20(fp)
 201f7e4:	10800017 	ldw	r2,0(r2)
 201f7e8:	e0bffb15 	stw	r2,-20(fp)
 201f7ec:	e0bffb17 	ldw	r2,-20(fp)
 201f7f0:	10800017 	ldw	r2,0(r2)
 201f7f4:	103ffa1e 	bne	r2,zero,201f7e0 <__alt_mem_mem_0+0xfcfff7e0>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 201f7f8:	0001e306 	br	201ff88 <tcp_output+0x950>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 201f7fc:	e0bfff17 	ldw	r2,-4(fp)
 201f800:	10801d17 	ldw	r2,116(r2)
 201f804:	10001d26 	beq	r2,zero,201f87c <tcp_output+0x244>
 201f808:	e0bfff17 	ldw	r2,-4(fp)
 201f80c:	10800883 	ldbu	r2,34(r2)
 201f810:	10803fcc 	andi	r2,r2,255
 201f814:	1080110c 	andi	r2,r2,68
 201f818:	1000181e 	bne	r2,zero,201f87c <tcp_output+0x244>
 201f81c:	e0bfff17 	ldw	r2,-4(fp)
 201f820:	10801c17 	ldw	r2,112(r2)
 201f824:	10000c26 	beq	r2,zero,201f858 <tcp_output+0x220>
 201f828:	e0bfff17 	ldw	r2,-4(fp)
 201f82c:	10801c17 	ldw	r2,112(r2)
 201f830:	10800017 	ldw	r2,0(r2)
 201f834:	1000111e 	bne	r2,zero,201f87c <tcp_output+0x244>
 201f838:	e0bfff17 	ldw	r2,-4(fp)
 201f83c:	10801c17 	ldw	r2,112(r2)
 201f840:	10c0020b 	ldhu	r3,8(r2)
 201f844:	e0bfff17 	ldw	r2,-4(fp)
 201f848:	10800e8b 	ldhu	r2,58(r2)
 201f84c:	18ffffcc 	andi	r3,r3,65535
 201f850:	10bfffcc 	andi	r2,r2,65535
 201f854:	1880092e 	bgeu	r3,r2,201f87c <tcp_output+0x244>
 201f858:	e0bfff17 	ldw	r2,-4(fp)
 201f85c:	10801a8b 	ldhu	r2,106(r2)
 201f860:	10bfffcc 	andi	r2,r2,65535
 201f864:	10000526 	beq	r2,zero,201f87c <tcp_output+0x244>
 201f868:	e0bfff17 	ldw	r2,-4(fp)
 201f86c:	10801b0b 	ldhu	r2,108(r2)
 201f870:	10bfffcc 	andi	r2,r2,65535
 201f874:	10800230 	cmpltui	r2,r2,8
 201f878:	1000021e 	bne	r2,zero,201f884 <tcp_output+0x24c>
 201f87c:	00800044 	movi	r2,1
 201f880:	00000106 	br	201f888 <tcp_output+0x250>
 201f884:	0005883a 	mov	r2,zero
 201f888:	1000051e 	bne	r2,zero,201f8a0 <tcp_output+0x268>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
 201f88c:	e0bfff17 	ldw	r2,-4(fp)
 201f890:	10800883 	ldbu	r2,34(r2)
 201f894:	10803fcc 	andi	r2,r2,255
 201f898:	1080280c 	andi	r2,r2,160
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 201f89c:	1001ff26 	beq	r2,zero,202009c <tcp_output+0xa64>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
 201f8a0:	e0bffa17 	ldw	r2,-24(fp)
 201f8a4:	10c00017 	ldw	r3,0(r2)
 201f8a8:	e0bfff17 	ldw	r2,-4(fp)
 201f8ac:	10c01c15 	stw	r3,112(r2)

    if (pcb->state != SYN_SENT) {
 201f8b0:	e0bfff17 	ldw	r2,-4(fp)
 201f8b4:	10800617 	ldw	r2,24(r2)
 201f8b8:	108000a0 	cmpeqi	r2,r2,2
 201f8bc:	1000221e 	bne	r2,zero,201f948 <tcp_output+0x310>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 201f8c0:	e0bffa17 	ldw	r2,-24(fp)
 201f8c4:	10800417 	ldw	r2,16(r2)
 201f8c8:	e0fffa17 	ldw	r3,-24(fp)
 201f8cc:	18c00417 	ldw	r3,16(r3)
 201f8d0:	19000303 	ldbu	r4,12(r3)
 201f8d4:	18c00343 	ldbu	r3,13(r3)
 201f8d8:	1806923a 	slli	r3,r3,8
 201f8dc:	1906b03a 	or	r3,r3,r4
 201f8e0:	18c40014 	ori	r3,r3,4096
 201f8e4:	180d883a 	mov	r6,r3
 201f8e8:	30ffffcc 	andi	r3,r6,65535
 201f8ec:	19403fcc 	andi	r5,r3,255
 201f8f0:	10c00303 	ldbu	r3,12(r2)
 201f8f4:	1806703a 	and	r3,r3,zero
 201f8f8:	1809883a 	mov	r4,r3
 201f8fc:	2807883a 	mov	r3,r5
 201f900:	20c6b03a 	or	r3,r4,r3
 201f904:	10c00305 	stb	r3,12(r2)
 201f908:	30ffffcc 	andi	r3,r6,65535
 201f90c:	1806d23a 	srli	r3,r3,8
 201f910:	197fffcc 	andi	r5,r3,65535
 201f914:	10c00343 	ldbu	r3,13(r2)
 201f918:	1806703a 	and	r3,r3,zero
 201f91c:	1809883a 	mov	r4,r3
 201f920:	2807883a 	mov	r3,r5
 201f924:	20c6b03a 	or	r3,r4,r3
 201f928:	10c00345 	stb	r3,13(r2)
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 201f92c:	e0bfff17 	ldw	r2,-4(fp)
 201f930:	10c00883 	ldbu	r3,34(r2)
 201f934:	00bfff04 	movi	r2,-4
 201f938:	1884703a 	and	r2,r3,r2
 201f93c:	1007883a 	mov	r3,r2
 201f940:	e0bfff17 	ldw	r2,-4(fp)
 201f944:	10c00885 	stb	r3,34(r2)
    }

    tcp_output_segment(seg, pcb);
 201f948:	e17fff17 	ldw	r5,-4(fp)
 201f94c:	e13ffa17 	ldw	r4,-24(fp)
 201f950:	20200e40 	call	20200e4 <tcp_output_segment>
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 201f954:	e0bffa17 	ldw	r2,-24(fp)
 201f958:	10800417 	ldw	r2,16(r2)
 201f95c:	10c00103 	ldbu	r3,4(r2)
 201f960:	11000143 	ldbu	r4,5(r2)
 201f964:	2008923a 	slli	r4,r4,8
 201f968:	20c6b03a 	or	r3,r4,r3
 201f96c:	11000183 	ldbu	r4,6(r2)
 201f970:	2008943a 	slli	r4,r4,16
 201f974:	20c6b03a 	or	r3,r4,r3
 201f978:	108001c3 	ldbu	r2,7(r2)
 201f97c:	1004963a 	slli	r2,r2,24
 201f980:	10c4b03a 	or	r2,r2,r3
 201f984:	1006d63a 	srli	r3,r2,24
 201f988:	e0bffa17 	ldw	r2,-24(fp)
 201f98c:	10800417 	ldw	r2,16(r2)
 201f990:	11000103 	ldbu	r4,4(r2)
 201f994:	11400143 	ldbu	r5,5(r2)
 201f998:	280a923a 	slli	r5,r5,8
 201f99c:	2908b03a 	or	r4,r5,r4
 201f9a0:	11400183 	ldbu	r5,6(r2)
 201f9a4:	280a943a 	slli	r5,r5,16
 201f9a8:	2908b03a 	or	r4,r5,r4
 201f9ac:	108001c3 	ldbu	r2,7(r2)
 201f9b0:	1004963a 	slli	r2,r2,24
 201f9b4:	1104b03a 	or	r2,r2,r4
 201f9b8:	1004d23a 	srli	r2,r2,8
 201f9bc:	10bfc00c 	andi	r2,r2,65280
 201f9c0:	1886b03a 	or	r3,r3,r2
 201f9c4:	e0bffa17 	ldw	r2,-24(fp)
 201f9c8:	10800417 	ldw	r2,16(r2)
 201f9cc:	11000103 	ldbu	r4,4(r2)
 201f9d0:	11400143 	ldbu	r5,5(r2)
 201f9d4:	280a923a 	slli	r5,r5,8
 201f9d8:	2908b03a 	or	r4,r5,r4
 201f9dc:	11400183 	ldbu	r5,6(r2)
 201f9e0:	280a943a 	slli	r5,r5,16
 201f9e4:	2908b03a 	or	r4,r5,r4
 201f9e8:	108001c3 	ldbu	r2,7(r2)
 201f9ec:	1004963a 	slli	r2,r2,24
 201f9f0:	1104b03a 	or	r2,r2,r4
 201f9f4:	10bfc00c 	andi	r2,r2,65280
 201f9f8:	1004923a 	slli	r2,r2,8
 201f9fc:	1886b03a 	or	r3,r3,r2
 201fa00:	e0bffa17 	ldw	r2,-24(fp)
 201fa04:	10800417 	ldw	r2,16(r2)
 201fa08:	11000103 	ldbu	r4,4(r2)
 201fa0c:	11400143 	ldbu	r5,5(r2)
 201fa10:	280a923a 	slli	r5,r5,8
 201fa14:	2908b03a 	or	r4,r5,r4
 201fa18:	11400183 	ldbu	r5,6(r2)
 201fa1c:	280a943a 	slli	r5,r5,16
 201fa20:	2908b03a 	or	r4,r5,r4
 201fa24:	108001c3 	ldbu	r2,7(r2)
 201fa28:	1004963a 	slli	r2,r2,24
 201fa2c:	1104b03a 	or	r2,r2,r4
 201fa30:	1004963a 	slli	r2,r2,24
 201fa34:	1886b03a 	or	r3,r3,r2
 201fa38:	e0bffa17 	ldw	r2,-24(fp)
 201fa3c:	1080020b 	ldhu	r2,8(r2)
 201fa40:	113fffcc 	andi	r4,r2,65535
 201fa44:	e0bffa17 	ldw	r2,-24(fp)
 201fa48:	10800417 	ldw	r2,16(r2)
 201fa4c:	11400303 	ldbu	r5,12(r2)
 201fa50:	10800343 	ldbu	r2,13(r2)
 201fa54:	1004923a 	slli	r2,r2,8
 201fa58:	1144b03a 	or	r2,r2,r5
 201fa5c:	10bfffcc 	andi	r2,r2,65535
 201fa60:	1004d23a 	srli	r2,r2,8
 201fa64:	117fffcc 	andi	r5,r2,65535
 201fa68:	e0bffa17 	ldw	r2,-24(fp)
 201fa6c:	10800417 	ldw	r2,16(r2)
 201fa70:	11800303 	ldbu	r6,12(r2)
 201fa74:	10800343 	ldbu	r2,13(r2)
 201fa78:	1004923a 	slli	r2,r2,8
 201fa7c:	1184b03a 	or	r2,r2,r6
 201fa80:	10bfffcc 	andi	r2,r2,65535
 201fa84:	1004923a 	slli	r2,r2,8
 201fa88:	10bfffcc 	andi	r2,r2,65535
 201fa8c:	2884b03a 	or	r2,r5,r2
 201fa90:	108000cc 	andi	r2,r2,3
 201fa94:	1004c03a 	cmpne	r2,r2,zero
 201fa98:	10803fcc 	andi	r2,r2,255
 201fa9c:	2085883a 	add	r2,r4,r2
 201faa0:	1885883a 	add	r2,r3,r2
 201faa4:	e0bffe15 	stw	r2,-8(fp)
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 201faa8:	e0bfff17 	ldw	r2,-4(fp)
 201faac:	10c01517 	ldw	r3,84(r2)
 201fab0:	e0bffe17 	ldw	r2,-8(fp)
 201fab4:	1885c83a 	sub	r2,r3,r2
 201fab8:	1000030e 	bge	r2,zero,201fac8 <tcp_output+0x490>
      pcb->snd_nxt = snd_nxt;
 201fabc:	e0bfff17 	ldw	r2,-4(fp)
 201fac0:	e0fffe17 	ldw	r3,-8(fp)
 201fac4:	10c01515 	stw	r3,84(r2)
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 201fac8:	e0bffa17 	ldw	r2,-24(fp)
 201facc:	1080020b 	ldhu	r2,8(r2)
 201fad0:	10ffffcc 	andi	r3,r2,65535
 201fad4:	e0bffa17 	ldw	r2,-24(fp)
 201fad8:	10800417 	ldw	r2,16(r2)
 201fadc:	11000303 	ldbu	r4,12(r2)
 201fae0:	10800343 	ldbu	r2,13(r2)
 201fae4:	1004923a 	slli	r2,r2,8
 201fae8:	1104b03a 	or	r2,r2,r4
 201faec:	10bfffcc 	andi	r2,r2,65535
 201faf0:	1004d23a 	srli	r2,r2,8
 201faf4:	113fffcc 	andi	r4,r2,65535
 201faf8:	e0bffa17 	ldw	r2,-24(fp)
 201fafc:	10800417 	ldw	r2,16(r2)
 201fb00:	11400303 	ldbu	r5,12(r2)
 201fb04:	10800343 	ldbu	r2,13(r2)
 201fb08:	1004923a 	slli	r2,r2,8
 201fb0c:	1144b03a 	or	r2,r2,r5
 201fb10:	10bfffcc 	andi	r2,r2,65535
 201fb14:	1004923a 	slli	r2,r2,8
 201fb18:	10bfffcc 	andi	r2,r2,65535
 201fb1c:	2084b03a 	or	r2,r4,r2
 201fb20:	108000cc 	andi	r2,r2,3
 201fb24:	1004c03a 	cmpne	r2,r2,zero
 201fb28:	10803fcc 	andi	r2,r2,255
 201fb2c:	1885883a 	add	r2,r3,r2
 201fb30:	0081100e 	bge	zero,r2,201ff74 <tcp_output+0x93c>
      seg->next = NULL;
 201fb34:	e0bffa17 	ldw	r2,-24(fp)
 201fb38:	10000015 	stw	zero,0(r2)
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 201fb3c:	e0bfff17 	ldw	r2,-4(fp)
 201fb40:	10801d17 	ldw	r2,116(r2)
 201fb44:	1000061e 	bne	r2,zero,201fb60 <tcp_output+0x528>
        pcb->unacked = seg;
 201fb48:	e0bfff17 	ldw	r2,-4(fp)
 201fb4c:	e0fffa17 	ldw	r3,-24(fp)
 201fb50:	10c01d15 	stw	r3,116(r2)
        useg = seg;
 201fb54:	e0bffa17 	ldw	r2,-24(fp)
 201fb58:	e0bffb15 	stw	r2,-20(fp)
 201fb5c:	00010706 	br	201ff7c <tcp_output+0x944>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
 201fb60:	e0bffa17 	ldw	r2,-24(fp)
 201fb64:	10800417 	ldw	r2,16(r2)
 201fb68:	10c00103 	ldbu	r3,4(r2)
 201fb6c:	11000143 	ldbu	r4,5(r2)
 201fb70:	2008923a 	slli	r4,r4,8
 201fb74:	20c6b03a 	or	r3,r4,r3
 201fb78:	11000183 	ldbu	r4,6(r2)
 201fb7c:	2008943a 	slli	r4,r4,16
 201fb80:	20c6b03a 	or	r3,r4,r3
 201fb84:	108001c3 	ldbu	r2,7(r2)
 201fb88:	1004963a 	slli	r2,r2,24
 201fb8c:	10c4b03a 	or	r2,r2,r3
 201fb90:	1006d63a 	srli	r3,r2,24
 201fb94:	e0bffa17 	ldw	r2,-24(fp)
 201fb98:	10800417 	ldw	r2,16(r2)
 201fb9c:	11000103 	ldbu	r4,4(r2)
 201fba0:	11400143 	ldbu	r5,5(r2)
 201fba4:	280a923a 	slli	r5,r5,8
 201fba8:	2908b03a 	or	r4,r5,r4
 201fbac:	11400183 	ldbu	r5,6(r2)
 201fbb0:	280a943a 	slli	r5,r5,16
 201fbb4:	2908b03a 	or	r4,r5,r4
 201fbb8:	108001c3 	ldbu	r2,7(r2)
 201fbbc:	1004963a 	slli	r2,r2,24
 201fbc0:	1104b03a 	or	r2,r2,r4
 201fbc4:	1004d23a 	srli	r2,r2,8
 201fbc8:	10bfc00c 	andi	r2,r2,65280
 201fbcc:	1886b03a 	or	r3,r3,r2
 201fbd0:	e0bffa17 	ldw	r2,-24(fp)
 201fbd4:	10800417 	ldw	r2,16(r2)
 201fbd8:	11000103 	ldbu	r4,4(r2)
 201fbdc:	11400143 	ldbu	r5,5(r2)
 201fbe0:	280a923a 	slli	r5,r5,8
 201fbe4:	2908b03a 	or	r4,r5,r4
 201fbe8:	11400183 	ldbu	r5,6(r2)
 201fbec:	280a943a 	slli	r5,r5,16
 201fbf0:	2908b03a 	or	r4,r5,r4
 201fbf4:	108001c3 	ldbu	r2,7(r2)
 201fbf8:	1004963a 	slli	r2,r2,24
 201fbfc:	1104b03a 	or	r2,r2,r4
 201fc00:	10bfc00c 	andi	r2,r2,65280
 201fc04:	1004923a 	slli	r2,r2,8
 201fc08:	1886b03a 	or	r3,r3,r2
 201fc0c:	e0bffa17 	ldw	r2,-24(fp)
 201fc10:	10800417 	ldw	r2,16(r2)
 201fc14:	11000103 	ldbu	r4,4(r2)
 201fc18:	11400143 	ldbu	r5,5(r2)
 201fc1c:	280a923a 	slli	r5,r5,8
 201fc20:	2908b03a 	or	r4,r5,r4
 201fc24:	11400183 	ldbu	r5,6(r2)
 201fc28:	280a943a 	slli	r5,r5,16
 201fc2c:	2908b03a 	or	r4,r5,r4
 201fc30:	108001c3 	ldbu	r2,7(r2)
 201fc34:	1004963a 	slli	r2,r2,24
 201fc38:	1104b03a 	or	r2,r2,r4
 201fc3c:	1004963a 	slli	r2,r2,24
 201fc40:	1886b03a 	or	r3,r3,r2
 201fc44:	e0bffb17 	ldw	r2,-20(fp)
 201fc48:	10800417 	ldw	r2,16(r2)
 201fc4c:	11000103 	ldbu	r4,4(r2)
 201fc50:	11400143 	ldbu	r5,5(r2)
 201fc54:	280a923a 	slli	r5,r5,8
 201fc58:	2908b03a 	or	r4,r5,r4
 201fc5c:	11400183 	ldbu	r5,6(r2)
 201fc60:	280a943a 	slli	r5,r5,16
 201fc64:	2908b03a 	or	r4,r5,r4
 201fc68:	108001c3 	ldbu	r2,7(r2)
 201fc6c:	1004963a 	slli	r2,r2,24
 201fc70:	1104b03a 	or	r2,r2,r4
 201fc74:	1008d63a 	srli	r4,r2,24
 201fc78:	e0bffb17 	ldw	r2,-20(fp)
 201fc7c:	10800417 	ldw	r2,16(r2)
 201fc80:	11400103 	ldbu	r5,4(r2)
 201fc84:	11800143 	ldbu	r6,5(r2)
 201fc88:	300c923a 	slli	r6,r6,8
 201fc8c:	314ab03a 	or	r5,r6,r5
 201fc90:	11800183 	ldbu	r6,6(r2)
 201fc94:	300c943a 	slli	r6,r6,16
 201fc98:	314ab03a 	or	r5,r6,r5
 201fc9c:	108001c3 	ldbu	r2,7(r2)
 201fca0:	1004963a 	slli	r2,r2,24
 201fca4:	1144b03a 	or	r2,r2,r5
 201fca8:	1004d23a 	srli	r2,r2,8
 201fcac:	10bfc00c 	andi	r2,r2,65280
 201fcb0:	2088b03a 	or	r4,r4,r2
 201fcb4:	e0bffb17 	ldw	r2,-20(fp)
 201fcb8:	10800417 	ldw	r2,16(r2)
 201fcbc:	11400103 	ldbu	r5,4(r2)
 201fcc0:	11800143 	ldbu	r6,5(r2)
 201fcc4:	300c923a 	slli	r6,r6,8
 201fcc8:	314ab03a 	or	r5,r6,r5
 201fccc:	11800183 	ldbu	r6,6(r2)
 201fcd0:	300c943a 	slli	r6,r6,16
 201fcd4:	314ab03a 	or	r5,r6,r5
 201fcd8:	108001c3 	ldbu	r2,7(r2)
 201fcdc:	1004963a 	slli	r2,r2,24
 201fce0:	1144b03a 	or	r2,r2,r5
 201fce4:	10bfc00c 	andi	r2,r2,65280
 201fce8:	1004923a 	slli	r2,r2,8
 201fcec:	2088b03a 	or	r4,r4,r2
 201fcf0:	e0bffb17 	ldw	r2,-20(fp)
 201fcf4:	10800417 	ldw	r2,16(r2)
 201fcf8:	11400103 	ldbu	r5,4(r2)
 201fcfc:	11800143 	ldbu	r6,5(r2)
 201fd00:	300c923a 	slli	r6,r6,8
 201fd04:	314ab03a 	or	r5,r6,r5
 201fd08:	11800183 	ldbu	r6,6(r2)
 201fd0c:	300c943a 	slli	r6,r6,16
 201fd10:	314ab03a 	or	r5,r6,r5
 201fd14:	108001c3 	ldbu	r2,7(r2)
 201fd18:	1004963a 	slli	r2,r2,24
 201fd1c:	1144b03a 	or	r2,r2,r5
 201fd20:	1004963a 	slli	r2,r2,24
 201fd24:	2084b03a 	or	r2,r4,r2
 201fd28:	1885c83a 	sub	r2,r3,r2
 201fd2c:	10008a0e 	bge	r2,zero,201ff58 <tcp_output+0x920>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 201fd30:	e0bfff17 	ldw	r2,-4(fp)
 201fd34:	10801d04 	addi	r2,r2,116
 201fd38:	e0bffc15 	stw	r2,-16(fp)
          while (*cur_seg &&
 201fd3c:	00000306 	br	201fd4c <tcp_output+0x714>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 201fd40:	e0bffc17 	ldw	r2,-16(fp)
 201fd44:	10800017 	ldw	r2,0(r2)
 201fd48:	e0bffc15 	stw	r2,-16(fp)
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 201fd4c:	e0bffc17 	ldw	r2,-16(fp)
 201fd50:	10800017 	ldw	r2,0(r2)
 201fd54:	10007826 	beq	r2,zero,201ff38 <tcp_output+0x900>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 201fd58:	e0bffc17 	ldw	r2,-16(fp)
 201fd5c:	10800017 	ldw	r2,0(r2)
 201fd60:	10800417 	ldw	r2,16(r2)
 201fd64:	10c00103 	ldbu	r3,4(r2)
 201fd68:	11000143 	ldbu	r4,5(r2)
 201fd6c:	2008923a 	slli	r4,r4,8
 201fd70:	20c6b03a 	or	r3,r4,r3
 201fd74:	11000183 	ldbu	r4,6(r2)
 201fd78:	2008943a 	slli	r4,r4,16
 201fd7c:	20c6b03a 	or	r3,r4,r3
 201fd80:	108001c3 	ldbu	r2,7(r2)
 201fd84:	1004963a 	slli	r2,r2,24
 201fd88:	10c4b03a 	or	r2,r2,r3
 201fd8c:	1006d63a 	srli	r3,r2,24
 201fd90:	e0bffc17 	ldw	r2,-16(fp)
 201fd94:	10800017 	ldw	r2,0(r2)
 201fd98:	10800417 	ldw	r2,16(r2)
 201fd9c:	11000103 	ldbu	r4,4(r2)
 201fda0:	11400143 	ldbu	r5,5(r2)
 201fda4:	280a923a 	slli	r5,r5,8
 201fda8:	2908b03a 	or	r4,r5,r4
 201fdac:	11400183 	ldbu	r5,6(r2)
 201fdb0:	280a943a 	slli	r5,r5,16
 201fdb4:	2908b03a 	or	r4,r5,r4
 201fdb8:	108001c3 	ldbu	r2,7(r2)
 201fdbc:	1004963a 	slli	r2,r2,24
 201fdc0:	1104b03a 	or	r2,r2,r4
 201fdc4:	1004d23a 	srli	r2,r2,8
 201fdc8:	10bfc00c 	andi	r2,r2,65280
 201fdcc:	1886b03a 	or	r3,r3,r2
 201fdd0:	e0bffc17 	ldw	r2,-16(fp)
 201fdd4:	10800017 	ldw	r2,0(r2)
 201fdd8:	10800417 	ldw	r2,16(r2)
 201fddc:	11000103 	ldbu	r4,4(r2)
 201fde0:	11400143 	ldbu	r5,5(r2)
 201fde4:	280a923a 	slli	r5,r5,8
 201fde8:	2908b03a 	or	r4,r5,r4
 201fdec:	11400183 	ldbu	r5,6(r2)
 201fdf0:	280a943a 	slli	r5,r5,16
 201fdf4:	2908b03a 	or	r4,r5,r4
 201fdf8:	108001c3 	ldbu	r2,7(r2)
 201fdfc:	1004963a 	slli	r2,r2,24
 201fe00:	1104b03a 	or	r2,r2,r4
 201fe04:	10bfc00c 	andi	r2,r2,65280
 201fe08:	1004923a 	slli	r2,r2,8
 201fe0c:	1886b03a 	or	r3,r3,r2
 201fe10:	e0bffc17 	ldw	r2,-16(fp)
 201fe14:	10800017 	ldw	r2,0(r2)
 201fe18:	10800417 	ldw	r2,16(r2)
 201fe1c:	11000103 	ldbu	r4,4(r2)
 201fe20:	11400143 	ldbu	r5,5(r2)
 201fe24:	280a923a 	slli	r5,r5,8
 201fe28:	2908b03a 	or	r4,r5,r4
 201fe2c:	11400183 	ldbu	r5,6(r2)
 201fe30:	280a943a 	slli	r5,r5,16
 201fe34:	2908b03a 	or	r4,r5,r4
 201fe38:	108001c3 	ldbu	r2,7(r2)
 201fe3c:	1004963a 	slli	r2,r2,24
 201fe40:	1104b03a 	or	r2,r2,r4
 201fe44:	1004963a 	slli	r2,r2,24
 201fe48:	1886b03a 	or	r3,r3,r2
 201fe4c:	e0bffa17 	ldw	r2,-24(fp)
 201fe50:	10800417 	ldw	r2,16(r2)
 201fe54:	11000103 	ldbu	r4,4(r2)
 201fe58:	11400143 	ldbu	r5,5(r2)
 201fe5c:	280a923a 	slli	r5,r5,8
 201fe60:	2908b03a 	or	r4,r5,r4
 201fe64:	11400183 	ldbu	r5,6(r2)
 201fe68:	280a943a 	slli	r5,r5,16
 201fe6c:	2908b03a 	or	r4,r5,r4
 201fe70:	108001c3 	ldbu	r2,7(r2)
 201fe74:	1004963a 	slli	r2,r2,24
 201fe78:	1104b03a 	or	r2,r2,r4
 201fe7c:	1008d63a 	srli	r4,r2,24
 201fe80:	e0bffa17 	ldw	r2,-24(fp)
 201fe84:	10800417 	ldw	r2,16(r2)
 201fe88:	11400103 	ldbu	r5,4(r2)
 201fe8c:	11800143 	ldbu	r6,5(r2)
 201fe90:	300c923a 	slli	r6,r6,8
 201fe94:	314ab03a 	or	r5,r6,r5
 201fe98:	11800183 	ldbu	r6,6(r2)
 201fe9c:	300c943a 	slli	r6,r6,16
 201fea0:	314ab03a 	or	r5,r6,r5
 201fea4:	108001c3 	ldbu	r2,7(r2)
 201fea8:	1004963a 	slli	r2,r2,24
 201feac:	1144b03a 	or	r2,r2,r5
 201feb0:	1004d23a 	srli	r2,r2,8
 201feb4:	10bfc00c 	andi	r2,r2,65280
 201feb8:	2088b03a 	or	r4,r4,r2
 201febc:	e0bffa17 	ldw	r2,-24(fp)
 201fec0:	10800417 	ldw	r2,16(r2)
 201fec4:	11400103 	ldbu	r5,4(r2)
 201fec8:	11800143 	ldbu	r6,5(r2)
 201fecc:	300c923a 	slli	r6,r6,8
 201fed0:	314ab03a 	or	r5,r6,r5
 201fed4:	11800183 	ldbu	r6,6(r2)
 201fed8:	300c943a 	slli	r6,r6,16
 201fedc:	314ab03a 	or	r5,r6,r5
 201fee0:	108001c3 	ldbu	r2,7(r2)
 201fee4:	1004963a 	slli	r2,r2,24
 201fee8:	1144b03a 	or	r2,r2,r5
 201feec:	10bfc00c 	andi	r2,r2,65280
 201fef0:	1004923a 	slli	r2,r2,8
 201fef4:	2088b03a 	or	r4,r4,r2
 201fef8:	e0bffa17 	ldw	r2,-24(fp)
 201fefc:	10800417 	ldw	r2,16(r2)
 201ff00:	11400103 	ldbu	r5,4(r2)
 201ff04:	11800143 	ldbu	r6,5(r2)
 201ff08:	300c923a 	slli	r6,r6,8
 201ff0c:	314ab03a 	or	r5,r6,r5
 201ff10:	11800183 	ldbu	r6,6(r2)
 201ff14:	300c943a 	slli	r6,r6,16
 201ff18:	314ab03a 	or	r5,r6,r5
 201ff1c:	108001c3 	ldbu	r2,7(r2)
 201ff20:	1004963a 	slli	r2,r2,24
 201ff24:	1144b03a 	or	r2,r2,r5
 201ff28:	1004963a 	slli	r2,r2,24
 201ff2c:	2084b03a 	or	r2,r4,r2
 201ff30:	1885c83a 	sub	r2,r3,r2
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 201ff34:	103f8216 	blt	r2,zero,201fd40 <__alt_mem_mem_0+0xfcfffd40>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
 201ff38:	e0bffc17 	ldw	r2,-16(fp)
 201ff3c:	10c00017 	ldw	r3,0(r2)
 201ff40:	e0bffa17 	ldw	r2,-24(fp)
 201ff44:	10c00015 	stw	r3,0(r2)
          (*cur_seg) = seg;
 201ff48:	e0bffc17 	ldw	r2,-16(fp)
 201ff4c:	e0fffa17 	ldw	r3,-24(fp)
 201ff50:	10c00015 	stw	r3,0(r2)
 201ff54:	00000906 	br	201ff7c <tcp_output+0x944>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 201ff58:	e0bffb17 	ldw	r2,-20(fp)
 201ff5c:	e0fffa17 	ldw	r3,-24(fp)
 201ff60:	10c00015 	stw	r3,0(r2)
          useg = useg->next;
 201ff64:	e0bffb17 	ldw	r2,-20(fp)
 201ff68:	10800017 	ldw	r2,0(r2)
 201ff6c:	e0bffb15 	stw	r2,-20(fp)
 201ff70:	00000206 	br	201ff7c <tcp_output+0x944>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 201ff74:	e13ffa17 	ldw	r4,-24(fp)
 201ff78:	201d2e80 	call	201d2e8 <tcp_seg_free>
    }
    seg = pcb->unsent;
 201ff7c:	e0bfff17 	ldw	r2,-4(fp)
 201ff80:	10801c17 	ldw	r2,112(r2)
 201ff84:	e0bffa15 	stw	r2,-24(fp)
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 201ff88:	e0bffa17 	ldw	r2,-24(fp)
 201ff8c:	10004426 	beq	r2,zero,20200a0 <tcp_output+0xa68>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 201ff90:	e0bffa17 	ldw	r2,-24(fp)
 201ff94:	10800417 	ldw	r2,16(r2)
 201ff98:	10c00103 	ldbu	r3,4(r2)
 201ff9c:	11000143 	ldbu	r4,5(r2)
 201ffa0:	2008923a 	slli	r4,r4,8
 201ffa4:	20c6b03a 	or	r3,r4,r3
 201ffa8:	11000183 	ldbu	r4,6(r2)
 201ffac:	2008943a 	slli	r4,r4,16
 201ffb0:	20c6b03a 	or	r3,r4,r3
 201ffb4:	108001c3 	ldbu	r2,7(r2)
 201ffb8:	1004963a 	slli	r2,r2,24
 201ffbc:	10c4b03a 	or	r2,r2,r3
 201ffc0:	1006d63a 	srli	r3,r2,24
 201ffc4:	e0bffa17 	ldw	r2,-24(fp)
 201ffc8:	10800417 	ldw	r2,16(r2)
 201ffcc:	11000103 	ldbu	r4,4(r2)
 201ffd0:	11400143 	ldbu	r5,5(r2)
 201ffd4:	280a923a 	slli	r5,r5,8
 201ffd8:	2908b03a 	or	r4,r5,r4
 201ffdc:	11400183 	ldbu	r5,6(r2)
 201ffe0:	280a943a 	slli	r5,r5,16
 201ffe4:	2908b03a 	or	r4,r5,r4
 201ffe8:	108001c3 	ldbu	r2,7(r2)
 201ffec:	1004963a 	slli	r2,r2,24
 201fff0:	1104b03a 	or	r2,r2,r4
 201fff4:	1004d23a 	srli	r2,r2,8
 201fff8:	10bfc00c 	andi	r2,r2,65280
 201fffc:	1886b03a 	or	r3,r3,r2
 2020000:	e0bffa17 	ldw	r2,-24(fp)
 2020004:	10800417 	ldw	r2,16(r2)
 2020008:	11000103 	ldbu	r4,4(r2)
 202000c:	11400143 	ldbu	r5,5(r2)
 2020010:	280a923a 	slli	r5,r5,8
 2020014:	2908b03a 	or	r4,r5,r4
 2020018:	11400183 	ldbu	r5,6(r2)
 202001c:	280a943a 	slli	r5,r5,16
 2020020:	2908b03a 	or	r4,r5,r4
 2020024:	108001c3 	ldbu	r2,7(r2)
 2020028:	1004963a 	slli	r2,r2,24
 202002c:	1104b03a 	or	r2,r2,r4
 2020030:	10bfc00c 	andi	r2,r2,65280
 2020034:	1004923a 	slli	r2,r2,8
 2020038:	1886b03a 	or	r3,r3,r2
 202003c:	e0bffa17 	ldw	r2,-24(fp)
 2020040:	10800417 	ldw	r2,16(r2)
 2020044:	11000103 	ldbu	r4,4(r2)
 2020048:	11400143 	ldbu	r5,5(r2)
 202004c:	280a923a 	slli	r5,r5,8
 2020050:	2908b03a 	or	r4,r5,r4
 2020054:	11400183 	ldbu	r5,6(r2)
 2020058:	280a943a 	slli	r5,r5,16
 202005c:	2908b03a 	or	r4,r5,r4
 2020060:	108001c3 	ldbu	r2,7(r2)
 2020064:	1004963a 	slli	r2,r2,24
 2020068:	1104b03a 	or	r2,r2,r4
 202006c:	1004963a 	slli	r2,r2,24
 2020070:	1886b03a 	or	r3,r3,r2
 2020074:	e0bfff17 	ldw	r2,-4(fp)
 2020078:	10801317 	ldw	r2,76(r2)
 202007c:	1887c83a 	sub	r3,r3,r2
 2020080:	e0bffa17 	ldw	r2,-24(fp)
 2020084:	1080020b 	ldhu	r2,8(r2)
 2020088:	10bfffcc 	andi	r2,r2,65535
 202008c:	1885883a 	add	r2,r3,r2
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 2020090:	e0fffd17 	ldw	r3,-12(fp)
 2020094:	18bdd92e 	bgeu	r3,r2,201f7fc <__alt_mem_mem_0+0xfcfff7fc>
 2020098:	00000106 	br	20200a0 <tcp_output+0xa68>
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
      break;
 202009c:	0001883a 	nop
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 20200a0:	e0bfff17 	ldw	r2,-4(fp)
 20200a4:	10801c17 	ldw	r2,112(r2)
 20200a8:	1000021e 	bne	r2,zero,20200b4 <tcp_output+0xa7c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 20200ac:	e0bfff17 	ldw	r2,-4(fp)
 20200b0:	10001b8d 	sth	zero,110(r2)
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 20200b4:	e0bfff17 	ldw	r2,-4(fp)
 20200b8:	10800883 	ldbu	r2,34(r2)
 20200bc:	10801fcc 	andi	r2,r2,127
 20200c0:	1007883a 	mov	r3,r2
 20200c4:	e0bfff17 	ldw	r2,-4(fp)
 20200c8:	10c00885 	stb	r3,34(r2)
  return ERR_OK;
 20200cc:	0005883a 	mov	r2,zero
}
 20200d0:	e037883a 	mov	sp,fp
 20200d4:	dfc00117 	ldw	ra,4(sp)
 20200d8:	df000017 	ldw	fp,0(sp)
 20200dc:	dec00204 	addi	sp,sp,8
 20200e0:	f800283a 	ret

020200e4 <tcp_output_segment>:
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
 20200e4:	defff404 	addi	sp,sp,-48
 20200e8:	dfc00b15 	stw	ra,44(sp)
 20200ec:	df000a15 	stw	fp,40(sp)
 20200f0:	df000a04 	addi	fp,sp,40
 20200f4:	e13ffe15 	stw	r4,-8(fp)
 20200f8:	e17fff15 	stw	r5,-4(fp)
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 20200fc:	e0bffe17 	ldw	r2,-8(fp)
 2020100:	10800417 	ldw	r2,16(r2)
 2020104:	e0ffff17 	ldw	r3,-4(fp)
 2020108:	18c00b17 	ldw	r3,44(r3)
 202010c:	1808d63a 	srli	r4,r3,24
 2020110:	e0ffff17 	ldw	r3,-4(fp)
 2020114:	18c00b17 	ldw	r3,44(r3)
 2020118:	1806d23a 	srli	r3,r3,8
 202011c:	18ffc00c 	andi	r3,r3,65280
 2020120:	20c8b03a 	or	r4,r4,r3
 2020124:	e0ffff17 	ldw	r3,-4(fp)
 2020128:	18c00b17 	ldw	r3,44(r3)
 202012c:	18ffc00c 	andi	r3,r3,65280
 2020130:	1806923a 	slli	r3,r3,8
 2020134:	20c8b03a 	or	r4,r4,r3
 2020138:	e0ffff17 	ldw	r3,-4(fp)
 202013c:	18c00b17 	ldw	r3,44(r3)
 2020140:	1806963a 	slli	r3,r3,24
 2020144:	20c6b03a 	or	r3,r4,r3
 2020148:	19803fcc 	andi	r6,r3,255
 202014c:	11000203 	ldbu	r4,8(r2)
 2020150:	2008703a 	and	r4,r4,zero
 2020154:	200b883a 	mov	r5,r4
 2020158:	3009883a 	mov	r4,r6
 202015c:	2908b03a 	or	r4,r5,r4
 2020160:	11000205 	stb	r4,8(r2)
 2020164:	1808d23a 	srli	r4,r3,8
 2020168:	21803fcc 	andi	r6,r4,255
 202016c:	11000243 	ldbu	r4,9(r2)
 2020170:	2008703a 	and	r4,r4,zero
 2020174:	200b883a 	mov	r5,r4
 2020178:	3009883a 	mov	r4,r6
 202017c:	2908b03a 	or	r4,r5,r4
 2020180:	11000245 	stb	r4,9(r2)
 2020184:	1808d43a 	srli	r4,r3,16
 2020188:	21803fcc 	andi	r6,r4,255
 202018c:	11000283 	ldbu	r4,10(r2)
 2020190:	2008703a 	and	r4,r4,zero
 2020194:	200b883a 	mov	r5,r4
 2020198:	3009883a 	mov	r4,r6
 202019c:	2908b03a 	or	r4,r5,r4
 20201a0:	11000285 	stb	r4,10(r2)
 20201a4:	180ad63a 	srli	r5,r3,24
 20201a8:	10c002c3 	ldbu	r3,11(r2)
 20201ac:	1806703a 	and	r3,r3,zero
 20201b0:	1809883a 	mov	r4,r3
 20201b4:	2807883a 	mov	r3,r5
 20201b8:	20c6b03a 	or	r3,r4,r3
 20201bc:	10c002c5 	stb	r3,11(r2)

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
 20201c0:	e0bffe17 	ldw	r2,-8(fp)
 20201c4:	10800417 	ldw	r2,16(r2)
 20201c8:	e0ffff17 	ldw	r3,-4(fp)
 20201cc:	18c00c8b 	ldhu	r3,50(r3)
 20201d0:	18ffffcc 	andi	r3,r3,65535
 20201d4:	1806d23a 	srli	r3,r3,8
 20201d8:	1809883a 	mov	r4,r3
 20201dc:	e0ffff17 	ldw	r3,-4(fp)
 20201e0:	18c00c8b 	ldhu	r3,50(r3)
 20201e4:	18ffffcc 	andi	r3,r3,65535
 20201e8:	1806923a 	slli	r3,r3,8
 20201ec:	20c6b03a 	or	r3,r4,r3
 20201f0:	180d883a 	mov	r6,r3
 20201f4:	30ffffcc 	andi	r3,r6,65535
 20201f8:	19403fcc 	andi	r5,r3,255
 20201fc:	10c00383 	ldbu	r3,14(r2)
 2020200:	1806703a 	and	r3,r3,zero
 2020204:	1809883a 	mov	r4,r3
 2020208:	2807883a 	mov	r3,r5
 202020c:	20c6b03a 	or	r3,r4,r3
 2020210:	10c00385 	stb	r3,14(r2)
 2020214:	30ffffcc 	andi	r3,r6,65535
 2020218:	1806d23a 	srli	r3,r3,8
 202021c:	197fffcc 	andi	r5,r3,65535
 2020220:	10c003c3 	ldbu	r3,15(r2)
 2020224:	1806703a 	and	r3,r3,zero
 2020228:	1809883a 	mov	r4,r3
 202022c:	2807883a 	mov	r3,r5
 2020230:	20c6b03a 	or	r3,r4,r3
 2020234:	10c003c5 	stb	r3,15(r2)

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 2020238:	e0bfff17 	ldw	r2,-4(fp)
 202023c:	10c00b17 	ldw	r3,44(r2)
 2020240:	e0bfff17 	ldw	r2,-4(fp)
 2020244:	10800c8b 	ldhu	r2,50(r2)
 2020248:	10bfffcc 	andi	r2,r2,65535
 202024c:	1887883a 	add	r3,r3,r2
 2020250:	e0bfff17 	ldw	r2,-4(fp)
 2020254:	10c00d15 	stw	r3,52(r2)

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 2020258:	e0bffe17 	ldw	r2,-8(fp)
 202025c:	10800417 	ldw	r2,16(r2)
 2020260:	10800504 	addi	r2,r2,20
 2020264:	e0bff915 	stw	r2,-28(fp)
  if (seg->flags & TF_SEG_OPTS_MSS) {
 2020268:	e0bffe17 	ldw	r2,-8(fp)
 202026c:	10800343 	ldbu	r2,13(r2)
 2020270:	10803fcc 	andi	r2,r2,255
 2020274:	1080004c 	andi	r2,r2,1
 2020278:	10001e26 	beq	r2,zero,20202f4 <tcp_output_segment+0x210>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &(pcb->local_ip), &(pcb->remote_ip));
 202027c:	e0ffff17 	ldw	r3,-4(fp)
 2020280:	e0bfff17 	ldw	r2,-4(fp)
 2020284:	10800104 	addi	r2,r2,4
 2020288:	100d883a 	mov	r6,r2
 202028c:	180b883a 	mov	r5,r3
 2020290:	01016d04 	movi	r4,1460
 2020294:	201dbf00 	call	201dbf0 <tcp_eff_send_mss>
 2020298:	e0bffa0d 	sth	r2,-24(fp)
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 202029c:	e0bffa0b 	ldhu	r2,-24(fp)
 20202a0:	10808134 	orhi	r2,r2,516
 20202a4:	1004d63a 	srli	r2,r2,24
 20202a8:	1007883a 	mov	r3,r2
 20202ac:	e0bffa0b 	ldhu	r2,-24(fp)
 20202b0:	10808134 	orhi	r2,r2,516
 20202b4:	1005d23a 	srai	r2,r2,8
 20202b8:	10bfc00c 	andi	r2,r2,65280
 20202bc:	1886b03a 	or	r3,r3,r2
 20202c0:	e0bffa0b 	ldhu	r2,-24(fp)
 20202c4:	10bfc00c 	andi	r2,r2,65280
 20202c8:	1004923a 	slli	r2,r2,8
 20202cc:	1886b03a 	or	r3,r3,r2
 20202d0:	e0bffa0b 	ldhu	r2,-24(fp)
 20202d4:	1004963a 	slli	r2,r2,24
 20202d8:	1884b03a 	or	r2,r3,r2
 20202dc:	1007883a 	mov	r3,r2
 20202e0:	e0bff917 	ldw	r2,-28(fp)
 20202e4:	10c00015 	stw	r3,0(r2)
    opts += 1;
 20202e8:	e0bff917 	ldw	r2,-28(fp)
 20202ec:	10800104 	addi	r2,r2,4
 20202f0:	e0bff915 	stw	r2,-28(fp)
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
 20202f4:	e0bfff17 	ldw	r2,-4(fp)
 20202f8:	10800e0b 	ldhu	r2,56(r2)
 20202fc:	10bfffcc 	andi	r2,r2,65535
 2020300:	10a0001c 	xori	r2,r2,32768
 2020304:	10a00004 	addi	r2,r2,-32768
 2020308:	10bfffd8 	cmpnei	r2,r2,-1
 202030c:	1000021e 	bne	r2,zero,2020318 <tcp_output_segment+0x234>
    pcb->rtime = 0;
 2020310:	e0bfff17 	ldw	r2,-4(fp)
 2020314:	10000e0d 	sth	zero,56(r2)
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
 2020318:	e0bfff17 	ldw	r2,-4(fp)
 202031c:	10000326 	beq	r2,zero,202032c <tcp_output_segment+0x248>
 2020320:	e0bfff17 	ldw	r2,-4(fp)
 2020324:	10800017 	ldw	r2,0(r2)
 2020328:	10000d1e 	bne	r2,zero,2020360 <tcp_output_segment+0x27c>
    netif = ip_route(&(pcb->local_ip), &(pcb->remote_ip));
 202032c:	e0ffff17 	ldw	r3,-4(fp)
 2020330:	e0bfff17 	ldw	r2,-4(fp)
 2020334:	10800104 	addi	r2,r2,4
 2020338:	100b883a 	mov	r5,r2
 202033c:	1809883a 	mov	r4,r3
 2020340:	2031bc80 	call	2031bc8 <ip_route>
 2020344:	e0bffb15 	stw	r2,-20(fp)
    if (netif == NULL) {
 2020348:	e0bffb17 	ldw	r2,-20(fp)
 202034c:	1000df26 	beq	r2,zero,20206cc <tcp_output_segment+0x5e8>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
 2020350:	e0bffb17 	ldw	r2,-20(fp)
 2020354:	10c00117 	ldw	r3,4(r2)
 2020358:	e0bfff17 	ldw	r2,-4(fp)
 202035c:	10c00015 	stw	r3,0(r2)
  }

  if (pcb->rttest == 0) {
 2020360:	e0bfff17 	ldw	r2,-4(fp)
 2020364:	10800f17 	ldw	r2,60(r2)
 2020368:	10003e1e 	bne	r2,zero,2020464 <tcp_output_segment+0x380>
    pcb->rttest = tcp_ticks;
 202036c:	d0e7f817 	ldw	r3,-24608(gp)
 2020370:	e0bfff17 	ldw	r2,-4(fp)
 2020374:	10c00f15 	stw	r3,60(r2)
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
 2020378:	e0bffe17 	ldw	r2,-8(fp)
 202037c:	10800417 	ldw	r2,16(r2)
 2020380:	10c00103 	ldbu	r3,4(r2)
 2020384:	11000143 	ldbu	r4,5(r2)
 2020388:	2008923a 	slli	r4,r4,8
 202038c:	20c6b03a 	or	r3,r4,r3
 2020390:	11000183 	ldbu	r4,6(r2)
 2020394:	2008943a 	slli	r4,r4,16
 2020398:	20c6b03a 	or	r3,r4,r3
 202039c:	108001c3 	ldbu	r2,7(r2)
 20203a0:	1004963a 	slli	r2,r2,24
 20203a4:	10c4b03a 	or	r2,r2,r3
 20203a8:	1006d63a 	srli	r3,r2,24
 20203ac:	e0bffe17 	ldw	r2,-8(fp)
 20203b0:	10800417 	ldw	r2,16(r2)
 20203b4:	11000103 	ldbu	r4,4(r2)
 20203b8:	11400143 	ldbu	r5,5(r2)
 20203bc:	280a923a 	slli	r5,r5,8
 20203c0:	2908b03a 	or	r4,r5,r4
 20203c4:	11400183 	ldbu	r5,6(r2)
 20203c8:	280a943a 	slli	r5,r5,16
 20203cc:	2908b03a 	or	r4,r5,r4
 20203d0:	108001c3 	ldbu	r2,7(r2)
 20203d4:	1004963a 	slli	r2,r2,24
 20203d8:	1104b03a 	or	r2,r2,r4
 20203dc:	1004d23a 	srli	r2,r2,8
 20203e0:	10bfc00c 	andi	r2,r2,65280
 20203e4:	1886b03a 	or	r3,r3,r2
 20203e8:	e0bffe17 	ldw	r2,-8(fp)
 20203ec:	10800417 	ldw	r2,16(r2)
 20203f0:	11000103 	ldbu	r4,4(r2)
 20203f4:	11400143 	ldbu	r5,5(r2)
 20203f8:	280a923a 	slli	r5,r5,8
 20203fc:	2908b03a 	or	r4,r5,r4
 2020400:	11400183 	ldbu	r5,6(r2)
 2020404:	280a943a 	slli	r5,r5,16
 2020408:	2908b03a 	or	r4,r5,r4
 202040c:	108001c3 	ldbu	r2,7(r2)
 2020410:	1004963a 	slli	r2,r2,24
 2020414:	1104b03a 	or	r2,r2,r4
 2020418:	10bfc00c 	andi	r2,r2,65280
 202041c:	1004923a 	slli	r2,r2,8
 2020420:	1886b03a 	or	r3,r3,r2
 2020424:	e0bffe17 	ldw	r2,-8(fp)
 2020428:	10800417 	ldw	r2,16(r2)
 202042c:	11000103 	ldbu	r4,4(r2)
 2020430:	11400143 	ldbu	r5,5(r2)
 2020434:	280a923a 	slli	r5,r5,8
 2020438:	2908b03a 	or	r4,r5,r4
 202043c:	11400183 	ldbu	r5,6(r2)
 2020440:	280a943a 	slli	r5,r5,16
 2020444:	2908b03a 	or	r4,r5,r4
 2020448:	108001c3 	ldbu	r2,7(r2)
 202044c:	1004963a 	slli	r2,r2,24
 2020450:	1104b03a 	or	r2,r2,r4
 2020454:	1004963a 	slli	r2,r2,24
 2020458:	1886b03a 	or	r3,r3,r2
 202045c:	e0bfff17 	ldw	r2,-4(fp)
 2020460:	10c01015 	stw	r3,64(r2)
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 2020464:	e0bffe17 	ldw	r2,-8(fp)
 2020468:	10800417 	ldw	r2,16(r2)
 202046c:	1007883a 	mov	r3,r2
 2020470:	e0bffe17 	ldw	r2,-8(fp)
 2020474:	10800117 	ldw	r2,4(r2)
 2020478:	10800117 	ldw	r2,4(r2)
 202047c:	1885c83a 	sub	r2,r3,r2
 2020480:	e0bffc0d 	sth	r2,-16(fp)

  seg->p->len -= len;
 2020484:	e0bffe17 	ldw	r2,-8(fp)
 2020488:	10800117 	ldw	r2,4(r2)
 202048c:	e0fffe17 	ldw	r3,-8(fp)
 2020490:	18c00117 	ldw	r3,4(r3)
 2020494:	1900028b 	ldhu	r4,10(r3)
 2020498:	e0fffc0b 	ldhu	r3,-16(fp)
 202049c:	20c7c83a 	sub	r3,r4,r3
 20204a0:	10c0028d 	sth	r3,10(r2)
  seg->p->tot_len -= len;
 20204a4:	e0bffe17 	ldw	r2,-8(fp)
 20204a8:	10800117 	ldw	r2,4(r2)
 20204ac:	e0fffe17 	ldw	r3,-8(fp)
 20204b0:	18c00117 	ldw	r3,4(r3)
 20204b4:	1900020b 	ldhu	r4,8(r3)
 20204b8:	e0fffc0b 	ldhu	r3,-16(fp)
 20204bc:	20c7c83a 	sub	r3,r4,r3
 20204c0:	10c0020d 	sth	r3,8(r2)

  seg->p->payload = seg->tcphdr;
 20204c4:	e0bffe17 	ldw	r2,-8(fp)
 20204c8:	10800117 	ldw	r2,4(r2)
 20204cc:	e0fffe17 	ldw	r3,-8(fp)
 20204d0:	18c00417 	ldw	r3,16(r3)
 20204d4:	10c00115 	stw	r3,4(r2)

  seg->tcphdr->chksum = 0;
 20204d8:	e0bffe17 	ldw	r2,-8(fp)
 20204dc:	10800417 	ldw	r2,16(r2)
 20204e0:	10c00403 	ldbu	r3,16(r2)
 20204e4:	1806703a 	and	r3,r3,zero
 20204e8:	10c00405 	stb	r3,16(r2)
 20204ec:	10c00443 	ldbu	r3,17(r2)
 20204f0:	1806703a 	and	r3,r3,zero
 20204f4:	10c00445 	stb	r3,17(r2)
      LWIP_ASSERT("data included but not checksummed",
        seg->p->tot_len == (TCPH_HDRLEN(seg->tcphdr) * 4));
    }

    /* rebuild TCP header checksum (TCP header changes for retransmissions!) */
    acc = inet_chksum_pseudo_partial(seg->p, &(pcb->local_ip),
 20204f8:	e0bffe17 	ldw	r2,-8(fp)
 20204fc:	12000117 	ldw	r8,4(r2)
 2020500:	e27fff17 	ldw	r9,-4(fp)
 2020504:	e0bfff17 	ldw	r2,-4(fp)
 2020508:	11800104 	addi	r6,r2,4
             &(pcb->remote_ip),
             IP_PROTO_TCP, seg->p->tot_len, TCPH_HDRLEN(seg->tcphdr) * 4);
 202050c:	e0bffe17 	ldw	r2,-8(fp)
 2020510:	10800117 	ldw	r2,4(r2)
 2020514:	1080020b 	ldhu	r2,8(r2)
      LWIP_ASSERT("data included but not checksummed",
        seg->p->tot_len == (TCPH_HDRLEN(seg->tcphdr) * 4));
    }

    /* rebuild TCP header checksum (TCP header changes for retransmissions!) */
    acc = inet_chksum_pseudo_partial(seg->p, &(pcb->local_ip),
 2020518:	10ffffcc 	andi	r3,r2,65535
             &(pcb->remote_ip),
             IP_PROTO_TCP, seg->p->tot_len, TCPH_HDRLEN(seg->tcphdr) * 4);
 202051c:	e0bffe17 	ldw	r2,-8(fp)
 2020520:	10800417 	ldw	r2,16(r2)
 2020524:	11000303 	ldbu	r4,12(r2)
 2020528:	10800343 	ldbu	r2,13(r2)
 202052c:	1004923a 	slli	r2,r2,8
 2020530:	1104b03a 	or	r2,r2,r4
 2020534:	10bfffcc 	andi	r2,r2,65535
 2020538:	1004d23a 	srli	r2,r2,8
 202053c:	113fffcc 	andi	r4,r2,65535
 2020540:	e0bffe17 	ldw	r2,-8(fp)
 2020544:	10800417 	ldw	r2,16(r2)
 2020548:	11400303 	ldbu	r5,12(r2)
 202054c:	10800343 	ldbu	r2,13(r2)
 2020550:	1004923a 	slli	r2,r2,8
 2020554:	1144b03a 	or	r2,r2,r5
 2020558:	10bfffcc 	andi	r2,r2,65535
 202055c:	1004923a 	slli	r2,r2,8
 2020560:	10bfffcc 	andi	r2,r2,65535
 2020564:	2084b03a 	or	r2,r4,r2
 2020568:	1005d33a 	srai	r2,r2,12
      LWIP_ASSERT("data included but not checksummed",
        seg->p->tot_len == (TCPH_HDRLEN(seg->tcphdr) * 4));
    }

    /* rebuild TCP header checksum (TCP header changes for retransmissions!) */
    acc = inet_chksum_pseudo_partial(seg->p, &(pcb->local_ip),
 202056c:	1085883a 	add	r2,r2,r2
 2020570:	1085883a 	add	r2,r2,r2
 2020574:	10bfffcc 	andi	r2,r2,65535
 2020578:	d8800115 	stw	r2,4(sp)
 202057c:	d8c00015 	stw	r3,0(sp)
 2020580:	01c00184 	movi	r7,6
 2020584:	480b883a 	mov	r5,r9
 2020588:	4009883a 	mov	r4,r8
 202058c:	20317e80 	call	20317e8 <inet_chksum_pseudo_partial>
 2020590:	10bfffcc 	andi	r2,r2,65535
 2020594:	e0bffd15 	stw	r2,-12(fp)
             &(pcb->remote_ip),
             IP_PROTO_TCP, seg->p->tot_len, TCPH_HDRLEN(seg->tcphdr) * 4);
    /* add payload checksum */
    if (seg->chksum_swapped) {
 2020598:	e0bffe17 	ldw	r2,-8(fp)
 202059c:	10800303 	ldbu	r2,12(r2)
 20205a0:	10803fcc 	andi	r2,r2,255
 20205a4:	10000f26 	beq	r2,zero,20205e4 <tcp_output_segment+0x500>
      seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
 20205a8:	e0bffe17 	ldw	r2,-8(fp)
 20205ac:	1080028b 	ldhu	r2,10(r2)
 20205b0:	10bfffcc 	andi	r2,r2,65535
 20205b4:	1004d23a 	srli	r2,r2,8
 20205b8:	1007883a 	mov	r3,r2
 20205bc:	e0bffe17 	ldw	r2,-8(fp)
 20205c0:	1080028b 	ldhu	r2,10(r2)
 20205c4:	10bfffcc 	andi	r2,r2,65535
 20205c8:	1004923a 	slli	r2,r2,8
 20205cc:	1884b03a 	or	r2,r3,r2
 20205d0:	1007883a 	mov	r3,r2
 20205d4:	e0bffe17 	ldw	r2,-8(fp)
 20205d8:	10c0028d 	sth	r3,10(r2)
      seg->chksum_swapped = 0;
 20205dc:	e0bffe17 	ldw	r2,-8(fp)
 20205e0:	10000305 	stb	zero,12(r2)
    }
    acc += (u16_t)~(seg->chksum);
 20205e4:	e0bffe17 	ldw	r2,-8(fp)
 20205e8:	1080028b 	ldhu	r2,10(r2)
 20205ec:	0084303a 	nor	r2,zero,r2
 20205f0:	10bfffcc 	andi	r2,r2,65535
 20205f4:	e0fffd17 	ldw	r3,-12(fp)
 20205f8:	1885883a 	add	r2,r3,r2
 20205fc:	e0bffd15 	stw	r2,-12(fp)
    seg->tcphdr->chksum = FOLD_U32T(acc);
 2020600:	e0bffe17 	ldw	r2,-8(fp)
 2020604:	10800417 	ldw	r2,16(r2)
 2020608:	e0fffd17 	ldw	r3,-12(fp)
 202060c:	1806d43a 	srli	r3,r3,16
 2020610:	1809883a 	mov	r4,r3
 2020614:	e0fffd17 	ldw	r3,-12(fp)
 2020618:	20c7883a 	add	r3,r4,r3
 202061c:	180d883a 	mov	r6,r3
 2020620:	30ffffcc 	andi	r3,r6,65535
 2020624:	19403fcc 	andi	r5,r3,255
 2020628:	10c00403 	ldbu	r3,16(r2)
 202062c:	1806703a 	and	r3,r3,zero
 2020630:	1809883a 	mov	r4,r3
 2020634:	2807883a 	mov	r3,r5
 2020638:	20c6b03a 	or	r3,r4,r3
 202063c:	10c00405 	stb	r3,16(r2)
 2020640:	30ffffcc 	andi	r3,r6,65535
 2020644:	1806d23a 	srli	r3,r3,8
 2020648:	197fffcc 	andi	r5,r3,65535
 202064c:	10c00443 	ldbu	r3,17(r2)
 2020650:	1806703a 	and	r3,r3,zero
 2020654:	1809883a 	mov	r4,r3
 2020658:	2807883a 	mov	r3,r5
 202065c:	20c6b03a 	or	r3,r4,r3
 2020660:	10c00445 	stb	r3,17(r2)
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
#endif /* TCP_CHECKSUM_ON_COPY */
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 2020664:	008085f4 	movhi	r2,535
 2020668:	10a86704 	addi	r2,r2,-24164
 202066c:	10804817 	ldw	r2,288(r2)
 2020670:	10c00044 	addi	r3,r2,1
 2020674:	008085f4 	movhi	r2,535
 2020678:	10a86704 	addi	r2,r2,-24164
 202067c:	10c04815 	stw	r3,288(r2)

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
 2020680:	e0bffe17 	ldw	r2,-8(fp)
 2020684:	11000117 	ldw	r4,4(r2)
 2020688:	e17fff17 	ldw	r5,-4(fp)
 202068c:	e0bfff17 	ldw	r2,-4(fp)
 2020690:	11800104 	addi	r6,r2,4
 2020694:	e0bfff17 	ldw	r2,-4(fp)
 2020698:	10800283 	ldbu	r2,10(r2)
 202069c:	11c03fcc 	andi	r7,r2,255
 20206a0:	e0bfff17 	ldw	r2,-4(fp)
 20206a4:	10800243 	ldbu	r2,9(r2)
 20206a8:	10803fcc 	andi	r2,r2,255
 20206ac:	e0ffff17 	ldw	r3,-4(fp)
 20206b0:	18c002c4 	addi	r3,r3,11
 20206b4:	d8c00215 	stw	r3,8(sp)
 20206b8:	00c00184 	movi	r3,6
 20206bc:	d8c00115 	stw	r3,4(sp)
 20206c0:	d8800015 	stw	r2,0(sp)
 20206c4:	20328f40 	call	20328f4 <ip_output_hinted>
 20206c8:	00000106 	br	20206d0 <tcp_output_segment+0x5ec>
  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
    netif = ip_route(&(pcb->local_ip), &(pcb->remote_ip));
    if (netif == NULL) {
      return;
 20206cc:	0001883a 	nop
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
}
 20206d0:	e037883a 	mov	sp,fp
 20206d4:	dfc00117 	ldw	ra,4(sp)
 20206d8:	df000017 	ldw	fp,0(sp)
 20206dc:	dec00204 	addi	sp,sp,8
 20206e0:	f800283a 	ret

020206e4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 20206e4:	defff404 	addi	sp,sp,-48
 20206e8:	dfc00b15 	stw	ra,44(sp)
 20206ec:	df000a15 	stw	fp,40(sp)
 20206f0:	df000a04 	addi	fp,sp,40
 20206f4:	e13ffa15 	stw	r4,-24(fp)
 20206f8:	e17ffb15 	stw	r5,-20(fp)
 20206fc:	e1bffc15 	stw	r6,-16(fp)
 2020700:	e1fffd15 	stw	r7,-12(fp)
 2020704:	e0c00217 	ldw	r3,8(fp)
 2020708:	e0800317 	ldw	r2,12(fp)
 202070c:	e0fffe0d 	sth	r3,-8(fp)
 2020710:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 2020714:	000d883a 	mov	r6,zero
 2020718:	01400504 	movi	r5,20
 202071c:	01000044 	movi	r4,1
 2020720:	201a2640 	call	201a264 <pbuf_alloc>
 2020724:	e0bff815 	stw	r2,-32(fp)
  if (p == NULL) {
 2020728:	e0bff817 	ldw	r2,-32(fp)
 202072c:	1000da26 	beq	r2,zero,2020a98 <tcp_rst+0x3b4>
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 2020730:	e0bff817 	ldw	r2,-32(fp)
 2020734:	10800117 	ldw	r2,4(r2)
 2020738:	e0bff915 	stw	r2,-28(fp)
  tcphdr->src = htons(local_port);
 202073c:	e0bffe0b 	ldhu	r2,-8(fp)
 2020740:	1004d23a 	srli	r2,r2,8
 2020744:	1007883a 	mov	r3,r2
 2020748:	e0bffe0b 	ldhu	r2,-8(fp)
 202074c:	1004923a 	slli	r2,r2,8
 2020750:	1884b03a 	or	r2,r3,r2
 2020754:	100d883a 	mov	r6,r2
 2020758:	e0bff917 	ldw	r2,-28(fp)
 202075c:	30ffffcc 	andi	r3,r6,65535
 2020760:	19403fcc 	andi	r5,r3,255
 2020764:	10c00003 	ldbu	r3,0(r2)
 2020768:	1806703a 	and	r3,r3,zero
 202076c:	1809883a 	mov	r4,r3
 2020770:	2807883a 	mov	r3,r5
 2020774:	20c6b03a 	or	r3,r4,r3
 2020778:	10c00005 	stb	r3,0(r2)
 202077c:	30ffffcc 	andi	r3,r6,65535
 2020780:	1806d23a 	srli	r3,r3,8
 2020784:	197fffcc 	andi	r5,r3,65535
 2020788:	10c00043 	ldbu	r3,1(r2)
 202078c:	1806703a 	and	r3,r3,zero
 2020790:	1809883a 	mov	r4,r3
 2020794:	2807883a 	mov	r3,r5
 2020798:	20c6b03a 	or	r3,r4,r3
 202079c:	10c00045 	stb	r3,1(r2)
  tcphdr->dest = htons(remote_port);
 20207a0:	e0bfff0b 	ldhu	r2,-4(fp)
 20207a4:	1004d23a 	srli	r2,r2,8
 20207a8:	1007883a 	mov	r3,r2
 20207ac:	e0bfff0b 	ldhu	r2,-4(fp)
 20207b0:	1004923a 	slli	r2,r2,8
 20207b4:	1884b03a 	or	r2,r3,r2
 20207b8:	100d883a 	mov	r6,r2
 20207bc:	e0bff917 	ldw	r2,-28(fp)
 20207c0:	30ffffcc 	andi	r3,r6,65535
 20207c4:	19403fcc 	andi	r5,r3,255
 20207c8:	10c00083 	ldbu	r3,2(r2)
 20207cc:	1806703a 	and	r3,r3,zero
 20207d0:	1809883a 	mov	r4,r3
 20207d4:	2807883a 	mov	r3,r5
 20207d8:	20c6b03a 	or	r3,r4,r3
 20207dc:	10c00085 	stb	r3,2(r2)
 20207e0:	30ffffcc 	andi	r3,r6,65535
 20207e4:	1806d23a 	srli	r3,r3,8
 20207e8:	197fffcc 	andi	r5,r3,65535
 20207ec:	10c000c3 	ldbu	r3,3(r2)
 20207f0:	1806703a 	and	r3,r3,zero
 20207f4:	1809883a 	mov	r4,r3
 20207f8:	2807883a 	mov	r3,r5
 20207fc:	20c6b03a 	or	r3,r4,r3
 2020800:	10c000c5 	stb	r3,3(r2)
  tcphdr->seqno = htonl(seqno);
 2020804:	e0bffa17 	ldw	r2,-24(fp)
 2020808:	1006d63a 	srli	r3,r2,24
 202080c:	e0bffa17 	ldw	r2,-24(fp)
 2020810:	1004d23a 	srli	r2,r2,8
 2020814:	10bfc00c 	andi	r2,r2,65280
 2020818:	1886b03a 	or	r3,r3,r2
 202081c:	e0bffa17 	ldw	r2,-24(fp)
 2020820:	10bfc00c 	andi	r2,r2,65280
 2020824:	1004923a 	slli	r2,r2,8
 2020828:	1886b03a 	or	r3,r3,r2
 202082c:	e0bffa17 	ldw	r2,-24(fp)
 2020830:	1004963a 	slli	r2,r2,24
 2020834:	1886b03a 	or	r3,r3,r2
 2020838:	e0bff917 	ldw	r2,-28(fp)
 202083c:	19803fcc 	andi	r6,r3,255
 2020840:	11000103 	ldbu	r4,4(r2)
 2020844:	2008703a 	and	r4,r4,zero
 2020848:	200b883a 	mov	r5,r4
 202084c:	3009883a 	mov	r4,r6
 2020850:	2908b03a 	or	r4,r5,r4
 2020854:	11000105 	stb	r4,4(r2)
 2020858:	1808d23a 	srli	r4,r3,8
 202085c:	21803fcc 	andi	r6,r4,255
 2020860:	11000143 	ldbu	r4,5(r2)
 2020864:	2008703a 	and	r4,r4,zero
 2020868:	200b883a 	mov	r5,r4
 202086c:	3009883a 	mov	r4,r6
 2020870:	2908b03a 	or	r4,r5,r4
 2020874:	11000145 	stb	r4,5(r2)
 2020878:	1808d43a 	srli	r4,r3,16
 202087c:	21803fcc 	andi	r6,r4,255
 2020880:	11000183 	ldbu	r4,6(r2)
 2020884:	2008703a 	and	r4,r4,zero
 2020888:	200b883a 	mov	r5,r4
 202088c:	3009883a 	mov	r4,r6
 2020890:	2908b03a 	or	r4,r5,r4
 2020894:	11000185 	stb	r4,6(r2)
 2020898:	180ad63a 	srli	r5,r3,24
 202089c:	10c001c3 	ldbu	r3,7(r2)
 20208a0:	1806703a 	and	r3,r3,zero
 20208a4:	1809883a 	mov	r4,r3
 20208a8:	2807883a 	mov	r3,r5
 20208ac:	20c6b03a 	or	r3,r4,r3
 20208b0:	10c001c5 	stb	r3,7(r2)
  tcphdr->ackno = htonl(ackno);
 20208b4:	e0bffb17 	ldw	r2,-20(fp)
 20208b8:	1006d63a 	srli	r3,r2,24
 20208bc:	e0bffb17 	ldw	r2,-20(fp)
 20208c0:	1004d23a 	srli	r2,r2,8
 20208c4:	10bfc00c 	andi	r2,r2,65280
 20208c8:	1886b03a 	or	r3,r3,r2
 20208cc:	e0bffb17 	ldw	r2,-20(fp)
 20208d0:	10bfc00c 	andi	r2,r2,65280
 20208d4:	1004923a 	slli	r2,r2,8
 20208d8:	1886b03a 	or	r3,r3,r2
 20208dc:	e0bffb17 	ldw	r2,-20(fp)
 20208e0:	1004963a 	slli	r2,r2,24
 20208e4:	1886b03a 	or	r3,r3,r2
 20208e8:	e0bff917 	ldw	r2,-28(fp)
 20208ec:	19803fcc 	andi	r6,r3,255
 20208f0:	11000203 	ldbu	r4,8(r2)
 20208f4:	2008703a 	and	r4,r4,zero
 20208f8:	200b883a 	mov	r5,r4
 20208fc:	3009883a 	mov	r4,r6
 2020900:	2908b03a 	or	r4,r5,r4
 2020904:	11000205 	stb	r4,8(r2)
 2020908:	1808d23a 	srli	r4,r3,8
 202090c:	21803fcc 	andi	r6,r4,255
 2020910:	11000243 	ldbu	r4,9(r2)
 2020914:	2008703a 	and	r4,r4,zero
 2020918:	200b883a 	mov	r5,r4
 202091c:	3009883a 	mov	r4,r6
 2020920:	2908b03a 	or	r4,r5,r4
 2020924:	11000245 	stb	r4,9(r2)
 2020928:	1808d43a 	srli	r4,r3,16
 202092c:	21803fcc 	andi	r6,r4,255
 2020930:	11000283 	ldbu	r4,10(r2)
 2020934:	2008703a 	and	r4,r4,zero
 2020938:	200b883a 	mov	r5,r4
 202093c:	3009883a 	mov	r4,r6
 2020940:	2908b03a 	or	r4,r5,r4
 2020944:	11000285 	stb	r4,10(r2)
 2020948:	180ad63a 	srli	r5,r3,24
 202094c:	10c002c3 	ldbu	r3,11(r2)
 2020950:	1806703a 	and	r3,r3,zero
 2020954:	1809883a 	mov	r4,r3
 2020958:	2807883a 	mov	r3,r5
 202095c:	20c6b03a 	or	r3,r4,r3
 2020960:	10c002c5 	stb	r3,11(r2)
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 2020964:	e0bff917 	ldw	r2,-28(fp)
 2020968:	10c00303 	ldbu	r3,12(r2)
 202096c:	1806703a 	and	r3,r3,zero
 2020970:	18c01414 	ori	r3,r3,80
 2020974:	10c00305 	stb	r3,12(r2)
 2020978:	10c00343 	ldbu	r3,13(r2)
 202097c:	1806703a 	and	r3,r3,zero
 2020980:	18c00514 	ori	r3,r3,20
 2020984:	10c00345 	stb	r3,13(r2)
  tcphdr->wnd = PP_HTONS(TCP_WND);
 2020988:	e0bff917 	ldw	r2,-28(fp)
 202098c:	10c00383 	ldbu	r3,14(r2)
 2020990:	1806703a 	and	r3,r3,zero
 2020994:	18c00814 	ori	r3,r3,32
 2020998:	10c00385 	stb	r3,14(r2)
 202099c:	10c003c3 	ldbu	r3,15(r2)
 20209a0:	1806703a 	and	r3,r3,zero
 20209a4:	10c003c5 	stb	r3,15(r2)
  tcphdr->chksum = 0;
 20209a8:	e0bff917 	ldw	r2,-28(fp)
 20209ac:	10c00403 	ldbu	r3,16(r2)
 20209b0:	1806703a 	and	r3,r3,zero
 20209b4:	10c00405 	stb	r3,16(r2)
 20209b8:	10c00443 	ldbu	r3,17(r2)
 20209bc:	1806703a 	and	r3,r3,zero
 20209c0:	10c00445 	stb	r3,17(r2)
  tcphdr->urgp = 0;
 20209c4:	e0bff917 	ldw	r2,-28(fp)
 20209c8:	10c00483 	ldbu	r3,18(r2)
 20209cc:	1806703a 	and	r3,r3,zero
 20209d0:	10c00485 	stb	r3,18(r2)
 20209d4:	10c004c3 	ldbu	r3,19(r2)
 20209d8:	1806703a 	and	r3,r3,zero
 20209dc:	10c004c5 	stb	r3,19(r2)

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
              IP_PROTO_TCP, p->tot_len);
 20209e0:	e0bff817 	ldw	r2,-32(fp)
 20209e4:	1080020b 	ldhu	r2,8(r2)
  tcphdr->wnd = PP_HTONS(TCP_WND);
  tcphdr->chksum = 0;
  tcphdr->urgp = 0;

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
 20209e8:	10bfffcc 	andi	r2,r2,65535
 20209ec:	d8800015 	stw	r2,0(sp)
 20209f0:	01c00184 	movi	r7,6
 20209f4:	e1bffd17 	ldw	r6,-12(fp)
 20209f8:	e17ffc17 	ldw	r5,-16(fp)
 20209fc:	e13ff817 	ldw	r4,-32(fp)
 2020a00:	20315e80 	call	20315e8 <inet_chksum_pseudo>
 2020a04:	100d883a 	mov	r6,r2
 2020a08:	e0bff917 	ldw	r2,-28(fp)
 2020a0c:	30ffffcc 	andi	r3,r6,65535
 2020a10:	19403fcc 	andi	r5,r3,255
 2020a14:	10c00403 	ldbu	r3,16(r2)
 2020a18:	1806703a 	and	r3,r3,zero
 2020a1c:	1809883a 	mov	r4,r3
 2020a20:	2807883a 	mov	r3,r5
 2020a24:	20c6b03a 	or	r3,r4,r3
 2020a28:	10c00405 	stb	r3,16(r2)
 2020a2c:	30ffffcc 	andi	r3,r6,65535
 2020a30:	1806d23a 	srli	r3,r3,8
 2020a34:	197fffcc 	andi	r5,r3,65535
 2020a38:	10c00443 	ldbu	r3,17(r2)
 2020a3c:	1806703a 	and	r3,r3,zero
 2020a40:	1809883a 	mov	r4,r3
 2020a44:	2807883a 	mov	r3,r5
 2020a48:	20c6b03a 	or	r3,r4,r3
 2020a4c:	10c00445 	stb	r3,17(r2)
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 2020a50:	008085f4 	movhi	r2,535
 2020a54:	10a86704 	addi	r2,r2,-24164
 2020a58:	10804817 	ldw	r2,288(r2)
 2020a5c:	10c00044 	addi	r3,r2,1
 2020a60:	008085f4 	movhi	r2,535
 2020a64:	10a86704 	addi	r2,r2,-24164
 2020a68:	10c04815 	stw	r3,288(r2)
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
 2020a6c:	00800184 	movi	r2,6
 2020a70:	d8800115 	stw	r2,4(sp)
 2020a74:	d8000015 	stw	zero,0(sp)
 2020a78:	01c01004 	movi	r7,64
 2020a7c:	e1bffd17 	ldw	r6,-12(fp)
 2020a80:	e17ffc17 	ldw	r5,-16(fp)
 2020a84:	e13ff817 	ldw	r4,-32(fp)
 2020a88:	20328400 	call	2032840 <ip_output>
  pbuf_free(p);
 2020a8c:	e13ff817 	ldw	r4,-32(fp)
 2020a90:	201aa200 	call	201aa20 <pbuf_free>
 2020a94:	00000106 	br	2020a9c <tcp_rst+0x3b8>
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  if (p == NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
      return;
 2020a98:	0001883a 	nop
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  pbuf_free(p);
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 2020a9c:	e037883a 	mov	sp,fp
 2020aa0:	dfc00117 	ldw	ra,4(sp)
 2020aa4:	df000017 	ldw	fp,0(sp)
 2020aa8:	dec00204 	addi	sp,sp,8
 2020aac:	f800283a 	ret

02020ab0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 2020ab0:	defffc04 	addi	sp,sp,-16
 2020ab4:	dfc00315 	stw	ra,12(sp)
 2020ab8:	df000215 	stw	fp,8(sp)
 2020abc:	df000204 	addi	fp,sp,8
 2020ac0:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 2020ac4:	e0bfff17 	ldw	r2,-4(fp)
 2020ac8:	10801d17 	ldw	r2,116(r2)
 2020acc:	10001f26 	beq	r2,zero,2020b4c <tcp_rexmit_rto+0x9c>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 2020ad0:	e0bfff17 	ldw	r2,-4(fp)
 2020ad4:	10801d17 	ldw	r2,116(r2)
 2020ad8:	e0bffe15 	stw	r2,-8(fp)
 2020adc:	00000306 	br	2020aec <tcp_rexmit_rto+0x3c>
 2020ae0:	e0bffe17 	ldw	r2,-8(fp)
 2020ae4:	10800017 	ldw	r2,0(r2)
 2020ae8:	e0bffe15 	stw	r2,-8(fp)
 2020aec:	e0bffe17 	ldw	r2,-8(fp)
 2020af0:	10800017 	ldw	r2,0(r2)
 2020af4:	103ffa1e 	bne	r2,zero,2020ae0 <__alt_mem_mem_0+0xfd000ae0>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 2020af8:	e0bfff17 	ldw	r2,-4(fp)
 2020afc:	10c01c17 	ldw	r3,112(r2)
 2020b00:	e0bffe17 	ldw	r2,-8(fp)
 2020b04:	10c00015 	stw	r3,0(r2)
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 2020b08:	e0bfff17 	ldw	r2,-4(fp)
 2020b0c:	10c01d17 	ldw	r3,116(r2)
 2020b10:	e0bfff17 	ldw	r2,-4(fp)
 2020b14:	10c01c15 	stw	r3,112(r2)
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 2020b18:	e0bfff17 	ldw	r2,-4(fp)
 2020b1c:	10001d15 	stw	zero,116(r2)
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
 2020b20:	e0bfff17 	ldw	r2,-4(fp)
 2020b24:	10801283 	ldbu	r2,74(r2)
 2020b28:	10800044 	addi	r2,r2,1
 2020b2c:	1007883a 	mov	r3,r2
 2020b30:	e0bfff17 	ldw	r2,-4(fp)
 2020b34:	10c01285 	stb	r3,74(r2)

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 2020b38:	e0bfff17 	ldw	r2,-4(fp)
 2020b3c:	10000f15 	stw	zero,60(r2)

  /* Do the actual retransmission */
  tcp_output(pcb);
 2020b40:	e13fff17 	ldw	r4,-4(fp)
 2020b44:	201f6380 	call	201f638 <tcp_output>
 2020b48:	00000106 	br	2020b50 <tcp_rexmit_rto+0xa0>
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
    return;
 2020b4c:	0001883a 	nop
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 2020b50:	e037883a 	mov	sp,fp
 2020b54:	dfc00117 	ldw	ra,4(sp)
 2020b58:	df000017 	ldw	fp,0(sp)
 2020b5c:	dec00204 	addi	sp,sp,8
 2020b60:	f800283a 	ret

02020b64 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 2020b64:	defffc04 	addi	sp,sp,-16
 2020b68:	df000315 	stw	fp,12(sp)
 2020b6c:	df000304 	addi	fp,sp,12
 2020b70:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 2020b74:	e0bfff17 	ldw	r2,-4(fp)
 2020b78:	10801d17 	ldw	r2,116(r2)
 2020b7c:	10009e26 	beq	r2,zero,2020df8 <tcp_rexmit+0x294>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 2020b80:	e0bfff17 	ldw	r2,-4(fp)
 2020b84:	10801d17 	ldw	r2,116(r2)
 2020b88:	e0bffe15 	stw	r2,-8(fp)
  pcb->unacked = seg->next;
 2020b8c:	e0bffe17 	ldw	r2,-8(fp)
 2020b90:	10c00017 	ldw	r3,0(r2)
 2020b94:	e0bfff17 	ldw	r2,-4(fp)
 2020b98:	10c01d15 	stw	r3,116(r2)

  cur_seg = &(pcb->unsent);
 2020b9c:	e0bfff17 	ldw	r2,-4(fp)
 2020ba0:	10801c04 	addi	r2,r2,112
 2020ba4:	e0bffd15 	stw	r2,-12(fp)
  while (*cur_seg &&
 2020ba8:	00000306 	br	2020bb8 <tcp_rexmit+0x54>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 2020bac:	e0bffd17 	ldw	r2,-12(fp)
 2020bb0:	10800017 	ldw	r2,0(r2)
 2020bb4:	e0bffd15 	stw	r2,-12(fp)
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 2020bb8:	e0bffd17 	ldw	r2,-12(fp)
 2020bbc:	10800017 	ldw	r2,0(r2)
 2020bc0:	10007826 	beq	r2,zero,2020da4 <tcp_rexmit+0x240>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 2020bc4:	e0bffd17 	ldw	r2,-12(fp)
 2020bc8:	10800017 	ldw	r2,0(r2)
 2020bcc:	10800417 	ldw	r2,16(r2)
 2020bd0:	10c00103 	ldbu	r3,4(r2)
 2020bd4:	11000143 	ldbu	r4,5(r2)
 2020bd8:	2008923a 	slli	r4,r4,8
 2020bdc:	20c6b03a 	or	r3,r4,r3
 2020be0:	11000183 	ldbu	r4,6(r2)
 2020be4:	2008943a 	slli	r4,r4,16
 2020be8:	20c6b03a 	or	r3,r4,r3
 2020bec:	108001c3 	ldbu	r2,7(r2)
 2020bf0:	1004963a 	slli	r2,r2,24
 2020bf4:	10c4b03a 	or	r2,r2,r3
 2020bf8:	1006d63a 	srli	r3,r2,24
 2020bfc:	e0bffd17 	ldw	r2,-12(fp)
 2020c00:	10800017 	ldw	r2,0(r2)
 2020c04:	10800417 	ldw	r2,16(r2)
 2020c08:	11000103 	ldbu	r4,4(r2)
 2020c0c:	11400143 	ldbu	r5,5(r2)
 2020c10:	280a923a 	slli	r5,r5,8
 2020c14:	2908b03a 	or	r4,r5,r4
 2020c18:	11400183 	ldbu	r5,6(r2)
 2020c1c:	280a943a 	slli	r5,r5,16
 2020c20:	2908b03a 	or	r4,r5,r4
 2020c24:	108001c3 	ldbu	r2,7(r2)
 2020c28:	1004963a 	slli	r2,r2,24
 2020c2c:	1104b03a 	or	r2,r2,r4
 2020c30:	1004d23a 	srli	r2,r2,8
 2020c34:	10bfc00c 	andi	r2,r2,65280
 2020c38:	1886b03a 	or	r3,r3,r2
 2020c3c:	e0bffd17 	ldw	r2,-12(fp)
 2020c40:	10800017 	ldw	r2,0(r2)
 2020c44:	10800417 	ldw	r2,16(r2)
 2020c48:	11000103 	ldbu	r4,4(r2)
 2020c4c:	11400143 	ldbu	r5,5(r2)
 2020c50:	280a923a 	slli	r5,r5,8
 2020c54:	2908b03a 	or	r4,r5,r4
 2020c58:	11400183 	ldbu	r5,6(r2)
 2020c5c:	280a943a 	slli	r5,r5,16
 2020c60:	2908b03a 	or	r4,r5,r4
 2020c64:	108001c3 	ldbu	r2,7(r2)
 2020c68:	1004963a 	slli	r2,r2,24
 2020c6c:	1104b03a 	or	r2,r2,r4
 2020c70:	10bfc00c 	andi	r2,r2,65280
 2020c74:	1004923a 	slli	r2,r2,8
 2020c78:	1886b03a 	or	r3,r3,r2
 2020c7c:	e0bffd17 	ldw	r2,-12(fp)
 2020c80:	10800017 	ldw	r2,0(r2)
 2020c84:	10800417 	ldw	r2,16(r2)
 2020c88:	11000103 	ldbu	r4,4(r2)
 2020c8c:	11400143 	ldbu	r5,5(r2)
 2020c90:	280a923a 	slli	r5,r5,8
 2020c94:	2908b03a 	or	r4,r5,r4
 2020c98:	11400183 	ldbu	r5,6(r2)
 2020c9c:	280a943a 	slli	r5,r5,16
 2020ca0:	2908b03a 	or	r4,r5,r4
 2020ca4:	108001c3 	ldbu	r2,7(r2)
 2020ca8:	1004963a 	slli	r2,r2,24
 2020cac:	1104b03a 	or	r2,r2,r4
 2020cb0:	1004963a 	slli	r2,r2,24
 2020cb4:	1886b03a 	or	r3,r3,r2
 2020cb8:	e0bffe17 	ldw	r2,-8(fp)
 2020cbc:	10800417 	ldw	r2,16(r2)
 2020cc0:	11000103 	ldbu	r4,4(r2)
 2020cc4:	11400143 	ldbu	r5,5(r2)
 2020cc8:	280a923a 	slli	r5,r5,8
 2020ccc:	2908b03a 	or	r4,r5,r4
 2020cd0:	11400183 	ldbu	r5,6(r2)
 2020cd4:	280a943a 	slli	r5,r5,16
 2020cd8:	2908b03a 	or	r4,r5,r4
 2020cdc:	108001c3 	ldbu	r2,7(r2)
 2020ce0:	1004963a 	slli	r2,r2,24
 2020ce4:	1104b03a 	or	r2,r2,r4
 2020ce8:	1008d63a 	srli	r4,r2,24
 2020cec:	e0bffe17 	ldw	r2,-8(fp)
 2020cf0:	10800417 	ldw	r2,16(r2)
 2020cf4:	11400103 	ldbu	r5,4(r2)
 2020cf8:	11800143 	ldbu	r6,5(r2)
 2020cfc:	300c923a 	slli	r6,r6,8
 2020d00:	314ab03a 	or	r5,r6,r5
 2020d04:	11800183 	ldbu	r6,6(r2)
 2020d08:	300c943a 	slli	r6,r6,16
 2020d0c:	314ab03a 	or	r5,r6,r5
 2020d10:	108001c3 	ldbu	r2,7(r2)
 2020d14:	1004963a 	slli	r2,r2,24
 2020d18:	1144b03a 	or	r2,r2,r5
 2020d1c:	1004d23a 	srli	r2,r2,8
 2020d20:	10bfc00c 	andi	r2,r2,65280
 2020d24:	2088b03a 	or	r4,r4,r2
 2020d28:	e0bffe17 	ldw	r2,-8(fp)
 2020d2c:	10800417 	ldw	r2,16(r2)
 2020d30:	11400103 	ldbu	r5,4(r2)
 2020d34:	11800143 	ldbu	r6,5(r2)
 2020d38:	300c923a 	slli	r6,r6,8
 2020d3c:	314ab03a 	or	r5,r6,r5
 2020d40:	11800183 	ldbu	r6,6(r2)
 2020d44:	300c943a 	slli	r6,r6,16
 2020d48:	314ab03a 	or	r5,r6,r5
 2020d4c:	108001c3 	ldbu	r2,7(r2)
 2020d50:	1004963a 	slli	r2,r2,24
 2020d54:	1144b03a 	or	r2,r2,r5
 2020d58:	10bfc00c 	andi	r2,r2,65280
 2020d5c:	1004923a 	slli	r2,r2,8
 2020d60:	2088b03a 	or	r4,r4,r2
 2020d64:	e0bffe17 	ldw	r2,-8(fp)
 2020d68:	10800417 	ldw	r2,16(r2)
 2020d6c:	11400103 	ldbu	r5,4(r2)
 2020d70:	11800143 	ldbu	r6,5(r2)
 2020d74:	300c923a 	slli	r6,r6,8
 2020d78:	314ab03a 	or	r5,r6,r5
 2020d7c:	11800183 	ldbu	r6,6(r2)
 2020d80:	300c943a 	slli	r6,r6,16
 2020d84:	314ab03a 	or	r5,r6,r5
 2020d88:	108001c3 	ldbu	r2,7(r2)
 2020d8c:	1004963a 	slli	r2,r2,24
 2020d90:	1144b03a 	or	r2,r2,r5
 2020d94:	1004963a 	slli	r2,r2,24
 2020d98:	2084b03a 	or	r2,r4,r2
 2020d9c:	1885c83a 	sub	r2,r3,r2
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 2020da0:	103f8216 	blt	r2,zero,2020bac <__alt_mem_mem_0+0xfd000bac>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 2020da4:	e0bffd17 	ldw	r2,-12(fp)
 2020da8:	10c00017 	ldw	r3,0(r2)
 2020dac:	e0bffe17 	ldw	r2,-8(fp)
 2020db0:	10c00015 	stw	r3,0(r2)
  *cur_seg = seg;
 2020db4:	e0bffd17 	ldw	r2,-12(fp)
 2020db8:	e0fffe17 	ldw	r3,-8(fp)
 2020dbc:	10c00015 	stw	r3,0(r2)
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 2020dc0:	e0bffe17 	ldw	r2,-8(fp)
 2020dc4:	10800017 	ldw	r2,0(r2)
 2020dc8:	1000021e 	bne	r2,zero,2020dd4 <tcp_rexmit+0x270>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 2020dcc:	e0bfff17 	ldw	r2,-4(fp)
 2020dd0:	10001b8d 	sth	zero,110(r2)
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 2020dd4:	e0bfff17 	ldw	r2,-4(fp)
 2020dd8:	10801283 	ldbu	r2,74(r2)
 2020ddc:	10800044 	addi	r2,r2,1
 2020de0:	1007883a 	mov	r3,r2
 2020de4:	e0bfff17 	ldw	r2,-4(fp)
 2020de8:	10c01285 	stb	r3,74(r2)

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 2020dec:	e0bfff17 	ldw	r2,-4(fp)
 2020df0:	10000f15 	stw	zero,60(r2)
 2020df4:	00000106 	br	2020dfc <tcp_rexmit+0x298>
{
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
    return;
 2020df8:	0001883a 	nop

  /* Do the actual retransmission. */
  snmp_inc_tcpretranssegs();
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 2020dfc:	e037883a 	mov	sp,fp
 2020e00:	df000017 	ldw	fp,0(sp)
 2020e04:	dec00104 	addi	sp,sp,4
 2020e08:	f800283a 	ret

02020e0c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 2020e0c:	defffd04 	addi	sp,sp,-12
 2020e10:	dfc00215 	stw	ra,8(sp)
 2020e14:	df000115 	stw	fp,4(sp)
 2020e18:	df000104 	addi	fp,sp,4
 2020e1c:	e13fff15 	stw	r4,-4(fp)
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 2020e20:	e0bfff17 	ldw	r2,-4(fp)
 2020e24:	10801d17 	ldw	r2,116(r2)
 2020e28:	10003c26 	beq	r2,zero,2020f1c <tcp_rexmit_fast+0x110>
 2020e2c:	e0bfff17 	ldw	r2,-4(fp)
 2020e30:	10800883 	ldbu	r2,34(r2)
 2020e34:	10803fcc 	andi	r2,r2,255
 2020e38:	1080010c 	andi	r2,r2,4
 2020e3c:	1000371e 	bne	r2,zero,2020f1c <tcp_rexmit_fast+0x110>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 2020e40:	e13fff17 	ldw	r4,-4(fp)
 2020e44:	2020b640 	call	2020b64 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 2020e48:	e0bfff17 	ldw	r2,-4(fp)
 2020e4c:	1100140b 	ldhu	r4,80(r2)
 2020e50:	e0bfff17 	ldw	r2,-4(fp)
 2020e54:	10c0190b 	ldhu	r3,100(r2)
 2020e58:	20bfffcc 	andi	r2,r4,65535
 2020e5c:	18ffffcc 	andi	r3,r3,65535
 2020e60:	1880082e 	bgeu	r3,r2,2020e84 <tcp_rexmit_fast+0x78>
      pcb->ssthresh = pcb->snd_wnd / 2;
 2020e64:	e0bfff17 	ldw	r2,-4(fp)
 2020e68:	1080190b 	ldhu	r2,100(r2)
 2020e6c:	10bfffcc 	andi	r2,r2,65535
 2020e70:	1004d07a 	srli	r2,r2,1
 2020e74:	1007883a 	mov	r3,r2
 2020e78:	e0bfff17 	ldw	r2,-4(fp)
 2020e7c:	10c0148d 	sth	r3,82(r2)
 2020e80:	00000706 	br	2020ea0 <tcp_rexmit_fast+0x94>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 2020e84:	e0bfff17 	ldw	r2,-4(fp)
 2020e88:	1080140b 	ldhu	r2,80(r2)
 2020e8c:	10bfffcc 	andi	r2,r2,65535
 2020e90:	1004d07a 	srli	r2,r2,1
 2020e94:	1007883a 	mov	r3,r2
 2020e98:	e0bfff17 	ldw	r2,-4(fp)
 2020e9c:	10c0148d 	sth	r3,82(r2)
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
 2020ea0:	e0bfff17 	ldw	r2,-4(fp)
 2020ea4:	1080148b 	ldhu	r2,82(r2)
 2020ea8:	10ffffcc 	andi	r3,r2,65535
 2020eac:	e0bfff17 	ldw	r2,-4(fp)
 2020eb0:	10800e8b 	ldhu	r2,58(r2)
 2020eb4:	10bfffcc 	andi	r2,r2,65535
 2020eb8:	1085883a 	add	r2,r2,r2
 2020ebc:	1880060e 	bge	r3,r2,2020ed8 <tcp_rexmit_fast+0xcc>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
 2020ec0:	e0bfff17 	ldw	r2,-4(fp)
 2020ec4:	10800e8b 	ldhu	r2,58(r2)
 2020ec8:	1085883a 	add	r2,r2,r2
 2020ecc:	1007883a 	mov	r3,r2
 2020ed0:	e0bfff17 	ldw	r2,-4(fp)
 2020ed4:	10c0148d 	sth	r3,82(r2)
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 2020ed8:	e0bfff17 	ldw	r2,-4(fp)
 2020edc:	1100148b 	ldhu	r4,82(r2)
 2020ee0:	e0bfff17 	ldw	r2,-4(fp)
 2020ee4:	10c00e8b 	ldhu	r3,58(r2)
 2020ee8:	1805883a 	mov	r2,r3
 2020eec:	1085883a 	add	r2,r2,r2
 2020ef0:	10c5883a 	add	r2,r2,r3
 2020ef4:	2085883a 	add	r2,r4,r2
 2020ef8:	1007883a 	mov	r3,r2
 2020efc:	e0bfff17 	ldw	r2,-4(fp)
 2020f00:	10c0140d 	sth	r3,80(r2)
    pcb->flags |= TF_INFR;
 2020f04:	e0bfff17 	ldw	r2,-4(fp)
 2020f08:	10800883 	ldbu	r2,34(r2)
 2020f0c:	10800114 	ori	r2,r2,4
 2020f10:	1007883a 	mov	r3,r2
 2020f14:	e0bfff17 	ldw	r2,-4(fp)
 2020f18:	10c00885 	stb	r3,34(r2)
  } 
}
 2020f1c:	0001883a 	nop
 2020f20:	e037883a 	mov	sp,fp
 2020f24:	dfc00117 	ldw	ra,4(sp)
 2020f28:	df000017 	ldw	fp,0(sp)
 2020f2c:	dec00204 	addi	sp,sp,8
 2020f30:	f800283a 	ret

02020f34 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
 2020f34:	defff804 	addi	sp,sp,-32
 2020f38:	dfc00715 	stw	ra,28(sp)
 2020f3c:	df000615 	stw	fp,24(sp)
 2020f40:	df000604 	addi	fp,sp,24
 2020f44:	e13fff15 	stw	r4,-4(fp)
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
 2020f48:	e0bfff17 	ldw	r2,-4(fp)
 2020f4c:	10801517 	ldw	r2,84(r2)
 2020f50:	10bfffc4 	addi	r2,r2,-1
 2020f54:	1006d63a 	srli	r3,r2,24
 2020f58:	e0bfff17 	ldw	r2,-4(fp)
 2020f5c:	10801517 	ldw	r2,84(r2)
 2020f60:	10bfffc4 	addi	r2,r2,-1
 2020f64:	1004d23a 	srli	r2,r2,8
 2020f68:	10bfc00c 	andi	r2,r2,65280
 2020f6c:	1886b03a 	or	r3,r3,r2
 2020f70:	e0bfff17 	ldw	r2,-4(fp)
 2020f74:	10801517 	ldw	r2,84(r2)
 2020f78:	10bfffc4 	addi	r2,r2,-1
 2020f7c:	10bfc00c 	andi	r2,r2,65280
 2020f80:	1004923a 	slli	r2,r2,8
 2020f84:	1886b03a 	or	r3,r3,r2
 2020f88:	e0bfff17 	ldw	r2,-4(fp)
 2020f8c:	10801517 	ldw	r2,84(r2)
 2020f90:	10bfffc4 	addi	r2,r2,-1
 2020f94:	1004963a 	slli	r2,r2,24
 2020f98:	1884b03a 	or	r2,r3,r2
 2020f9c:	100f883a 	mov	r7,r2
 2020fa0:	000d883a 	mov	r6,zero
 2020fa4:	000b883a 	mov	r5,zero
 2020fa8:	e13fff17 	ldw	r4,-4(fp)
 2020fac:	201dcb80 	call	201dcb8 <tcp_output_alloc_header>
 2020fb0:	e0bffd15 	stw	r2,-12(fp)
  if(p == NULL) {
 2020fb4:	e0bffd17 	ldw	r2,-12(fp)
 2020fb8:	10003d26 	beq	r2,zero,20210b0 <tcp_keepalive+0x17c>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 2020fbc:	e0bffd17 	ldw	r2,-12(fp)
 2020fc0:	10800117 	ldw	r2,4(r2)
 2020fc4:	e0bffe15 	stw	r2,-8(fp)

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 2020fc8:	e0ffff17 	ldw	r3,-4(fp)
 2020fcc:	e0bfff17 	ldw	r2,-4(fp)
 2020fd0:	11000104 	addi	r4,r2,4
                                      IP_PROTO_TCP, p->tot_len);
 2020fd4:	e0bffd17 	ldw	r2,-12(fp)
 2020fd8:	1080020b 	ldhu	r2,8(r2)
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 2020fdc:	10bfffcc 	andi	r2,r2,65535
 2020fe0:	d8800015 	stw	r2,0(sp)
 2020fe4:	01c00184 	movi	r7,6
 2020fe8:	200d883a 	mov	r6,r4
 2020fec:	180b883a 	mov	r5,r3
 2020ff0:	e13ffd17 	ldw	r4,-12(fp)
 2020ff4:	20315e80 	call	20315e8 <inet_chksum_pseudo>
 2020ff8:	100d883a 	mov	r6,r2
 2020ffc:	e0bffe17 	ldw	r2,-8(fp)
 2021000:	30ffffcc 	andi	r3,r6,65535
 2021004:	19403fcc 	andi	r5,r3,255
 2021008:	10c00403 	ldbu	r3,16(r2)
 202100c:	1806703a 	and	r3,r3,zero
 2021010:	1809883a 	mov	r4,r3
 2021014:	2807883a 	mov	r3,r5
 2021018:	20c6b03a 	or	r3,r4,r3
 202101c:	10c00405 	stb	r3,16(r2)
 2021020:	30ffffcc 	andi	r3,r6,65535
 2021024:	1806d23a 	srli	r3,r3,8
 2021028:	197fffcc 	andi	r5,r3,65535
 202102c:	10c00443 	ldbu	r3,17(r2)
 2021030:	1806703a 	and	r3,r3,zero
 2021034:	1809883a 	mov	r4,r3
 2021038:	2807883a 	mov	r3,r5
 202103c:	20c6b03a 	or	r3,r4,r3
 2021040:	10c00445 	stb	r3,17(r2)
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 2021044:	008085f4 	movhi	r2,535
 2021048:	10a86704 	addi	r2,r2,-24164
 202104c:	10804817 	ldw	r2,288(r2)
 2021050:	10c00044 	addi	r3,r2,1
 2021054:	008085f4 	movhi	r2,535
 2021058:	10a86704 	addi	r2,r2,-24164
 202105c:	10c04815 	stw	r3,288(r2)

  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
 2021060:	e0ffff17 	ldw	r3,-4(fp)
 2021064:	e0bfff17 	ldw	r2,-4(fp)
 2021068:	11000104 	addi	r4,r2,4
 202106c:	e0bfff17 	ldw	r2,-4(fp)
 2021070:	10800283 	ldbu	r2,10(r2)
 2021074:	11403fcc 	andi	r5,r2,255
 2021078:	e0bfff17 	ldw	r2,-4(fp)
 202107c:	108002c4 	addi	r2,r2,11
 2021080:	d8800215 	stw	r2,8(sp)
 2021084:	00800184 	movi	r2,6
 2021088:	d8800115 	stw	r2,4(sp)
 202108c:	d8000015 	stw	zero,0(sp)
 2021090:	280f883a 	mov	r7,r5
 2021094:	200d883a 	mov	r6,r4
 2021098:	180b883a 	mov	r5,r3
 202109c:	e13ffd17 	ldw	r4,-12(fp)
 20210a0:	20328f40 	call	20328f4 <ip_output_hinted>
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 20210a4:	e13ffd17 	ldw	r4,-12(fp)
 20210a8:	201aa200 	call	201aa20 <pbuf_free>
 20210ac:	00000106 	br	20210b4 <tcp_keepalive+0x180>
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
 20210b0:	0001883a 	nop

  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 20210b4:	e037883a 	mov	sp,fp
 20210b8:	dfc00117 	ldw	ra,4(sp)
 20210bc:	df000017 	ldw	fp,0(sp)
 20210c0:	dec00204 	addi	sp,sp,8
 20210c4:	f800283a 	ret

020210c8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 20210c8:	defff504 	addi	sp,sp,-44
 20210cc:	dfc00a15 	stw	ra,40(sp)
 20210d0:	df000915 	stw	fp,36(sp)
 20210d4:	df000904 	addi	fp,sp,36
 20210d8:	e13fff15 	stw	r4,-4(fp)
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
 20210dc:	e0bfff17 	ldw	r2,-4(fp)
 20210e0:	10801d17 	ldw	r2,116(r2)
 20210e4:	e0bffa15 	stw	r2,-24(fp)

  if(seg == NULL) {
 20210e8:	e0bffa17 	ldw	r2,-24(fp)
 20210ec:	1000031e 	bne	r2,zero,20210fc <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
 20210f0:	e0bfff17 	ldw	r2,-4(fp)
 20210f4:	10801c17 	ldw	r2,112(r2)
 20210f8:	e0bffa15 	stw	r2,-24(fp)
  }
  if(seg == NULL) {
 20210fc:	e0bffa17 	ldw	r2,-24(fp)
 2021100:	1000a326 	beq	r2,zero,2021390 <tcp_zero_window_probe+0x2c8>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 2021104:	e0bffa17 	ldw	r2,-24(fp)
 2021108:	10800417 	ldw	r2,16(r2)
 202110c:	10c00303 	ldbu	r3,12(r2)
 2021110:	10800343 	ldbu	r2,13(r2)
 2021114:	1004923a 	slli	r2,r2,8
 2021118:	10c4b03a 	or	r2,r2,r3
 202111c:	10bfffcc 	andi	r2,r2,65535
 2021120:	1004d23a 	srli	r2,r2,8
 2021124:	10ffffcc 	andi	r3,r2,65535
 2021128:	e0bffa17 	ldw	r2,-24(fp)
 202112c:	10800417 	ldw	r2,16(r2)
 2021130:	11000303 	ldbu	r4,12(r2)
 2021134:	10800343 	ldbu	r2,13(r2)
 2021138:	1004923a 	slli	r2,r2,8
 202113c:	1104b03a 	or	r2,r2,r4
 2021140:	10bfffcc 	andi	r2,r2,65535
 2021144:	1004923a 	slli	r2,r2,8
 2021148:	10bfffcc 	andi	r2,r2,65535
 202114c:	1884b03a 	or	r2,r3,r2
 2021150:	1080004c 	andi	r2,r2,1
 2021154:	10000626 	beq	r2,zero,2021170 <tcp_zero_window_probe+0xa8>
 2021158:	e0bffa17 	ldw	r2,-24(fp)
 202115c:	1080020b 	ldhu	r2,8(r2)
 2021160:	10bfffcc 	andi	r2,r2,65535
 2021164:	1000021e 	bne	r2,zero,2021170 <tcp_zero_window_probe+0xa8>
 2021168:	00800044 	movi	r2,1
 202116c:	00000106 	br	2021174 <tcp_zero_window_probe+0xac>
 2021170:	0005883a 	mov	r2,zero
 2021174:	e0bffb05 	stb	r2,-20(fp)
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 2021178:	e0bffb03 	ldbu	r2,-20(fp)
 202117c:	1005003a 	cmpeq	r2,r2,zero
 2021180:	10803fcc 	andi	r2,r2,255
 2021184:	e0bffb8d 	sth	r2,-18(fp)

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 2021188:	e17ffb8b 	ldhu	r5,-18(fp)
 202118c:	e0bffa17 	ldw	r2,-24(fp)
 2021190:	10800417 	ldw	r2,16(r2)
 2021194:	10c00103 	ldbu	r3,4(r2)
 2021198:	11000143 	ldbu	r4,5(r2)
 202119c:	2008923a 	slli	r4,r4,8
 20211a0:	20c6b03a 	or	r3,r4,r3
 20211a4:	11000183 	ldbu	r4,6(r2)
 20211a8:	2008943a 	slli	r4,r4,16
 20211ac:	20c6b03a 	or	r3,r4,r3
 20211b0:	108001c3 	ldbu	r2,7(r2)
 20211b4:	1004963a 	slli	r2,r2,24
 20211b8:	10c4b03a 	or	r2,r2,r3
 20211bc:	100f883a 	mov	r7,r2
 20211c0:	280d883a 	mov	r6,r5
 20211c4:	000b883a 	mov	r5,zero
 20211c8:	e13fff17 	ldw	r4,-4(fp)
 20211cc:	201dcb80 	call	201dcb8 <tcp_output_alloc_header>
 20211d0:	e0bffc15 	stw	r2,-16(fp)
  if(p == NULL) {
 20211d4:	e0bffc17 	ldw	r2,-16(fp)
 20211d8:	10006f26 	beq	r2,zero,2021398 <tcp_zero_window_probe+0x2d0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 20211dc:	e0bffc17 	ldw	r2,-16(fp)
 20211e0:	10800117 	ldw	r2,4(r2)
 20211e4:	e0bffd15 	stw	r2,-12(fp)

  if (is_fin) {
 20211e8:	e0bffb03 	ldbu	r2,-20(fp)
 20211ec:	10001d26 	beq	r2,zero,2021264 <tcp_zero_window_probe+0x19c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 20211f0:	e0bffd17 	ldw	r2,-12(fp)
 20211f4:	10c00303 	ldbu	r3,12(r2)
 20211f8:	10800343 	ldbu	r2,13(r2)
 20211fc:	1004923a 	slli	r2,r2,8
 2021200:	10c4b03a 	or	r2,r2,r3
 2021204:	1007883a 	mov	r3,r2
 2021208:	00b03fc4 	movi	r2,-16129
 202120c:	1884703a 	and	r2,r3,r2
 2021210:	10844014 	ori	r2,r2,4352
 2021214:	100d883a 	mov	r6,r2
 2021218:	e0bffd17 	ldw	r2,-12(fp)
 202121c:	30ffffcc 	andi	r3,r6,65535
 2021220:	19403fcc 	andi	r5,r3,255
 2021224:	10c00303 	ldbu	r3,12(r2)
 2021228:	1806703a 	and	r3,r3,zero
 202122c:	1809883a 	mov	r4,r3
 2021230:	2807883a 	mov	r3,r5
 2021234:	20c6b03a 	or	r3,r4,r3
 2021238:	10c00305 	stb	r3,12(r2)
 202123c:	30ffffcc 	andi	r3,r6,65535
 2021240:	1806d23a 	srli	r3,r3,8
 2021244:	197fffcc 	andi	r5,r3,65535
 2021248:	10c00343 	ldbu	r3,13(r2)
 202124c:	1806703a 	and	r3,r3,zero
 2021250:	1809883a 	mov	r4,r3
 2021254:	2807883a 	mov	r3,r5
 2021258:	20c6b03a 	or	r3,r4,r3
 202125c:	10c00345 	stb	r3,13(r2)
 2021260:	00001106 	br	20212a8 <tcp_zero_window_probe+0x1e0>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 2021264:	e0bffc17 	ldw	r2,-16(fp)
 2021268:	10800117 	ldw	r2,4(r2)
 202126c:	10800504 	addi	r2,r2,20
 2021270:	e0bffe15 	stw	r2,-8(fp)
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 2021274:	e0bffa17 	ldw	r2,-24(fp)
 2021278:	11000117 	ldw	r4,4(r2)
 202127c:	e0bffa17 	ldw	r2,-24(fp)
 2021280:	10800117 	ldw	r2,4(r2)
 2021284:	10c0020b 	ldhu	r3,8(r2)
 2021288:	e0bffa17 	ldw	r2,-24(fp)
 202128c:	1080020b 	ldhu	r2,8(r2)
 2021290:	1885c83a 	sub	r2,r3,r2
 2021294:	10bfffcc 	andi	r2,r2,65535
 2021298:	100f883a 	mov	r7,r2
 202129c:	01800044 	movi	r6,1
 20212a0:	e17ffe17 	ldw	r5,-8(fp)
 20212a4:	201b0240 	call	201b024 <pbuf_copy_partial>
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 20212a8:	e0ffff17 	ldw	r3,-4(fp)
 20212ac:	e0bfff17 	ldw	r2,-4(fp)
 20212b0:	11000104 	addi	r4,r2,4
                                      IP_PROTO_TCP, p->tot_len);
 20212b4:	e0bffc17 	ldw	r2,-16(fp)
 20212b8:	1080020b 	ldhu	r2,8(r2)
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
 20212bc:	10bfffcc 	andi	r2,r2,65535
 20212c0:	d8800015 	stw	r2,0(sp)
 20212c4:	01c00184 	movi	r7,6
 20212c8:	200d883a 	mov	r6,r4
 20212cc:	180b883a 	mov	r5,r3
 20212d0:	e13ffc17 	ldw	r4,-16(fp)
 20212d4:	20315e80 	call	20315e8 <inet_chksum_pseudo>
 20212d8:	100d883a 	mov	r6,r2
 20212dc:	e0bffd17 	ldw	r2,-12(fp)
 20212e0:	30ffffcc 	andi	r3,r6,65535
 20212e4:	19403fcc 	andi	r5,r3,255
 20212e8:	10c00403 	ldbu	r3,16(r2)
 20212ec:	1806703a 	and	r3,r3,zero
 20212f0:	1809883a 	mov	r4,r3
 20212f4:	2807883a 	mov	r3,r5
 20212f8:	20c6b03a 	or	r3,r4,r3
 20212fc:	10c00405 	stb	r3,16(r2)
 2021300:	30ffffcc 	andi	r3,r6,65535
 2021304:	1806d23a 	srli	r3,r3,8
 2021308:	197fffcc 	andi	r5,r3,65535
 202130c:	10c00443 	ldbu	r3,17(r2)
 2021310:	1806703a 	and	r3,r3,zero
 2021314:	1809883a 	mov	r4,r3
 2021318:	2807883a 	mov	r3,r5
 202131c:	20c6b03a 	or	r3,r4,r3
 2021320:	10c00445 	stb	r3,17(r2)
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
 2021324:	008085f4 	movhi	r2,535
 2021328:	10a86704 	addi	r2,r2,-24164
 202132c:	10804817 	ldw	r2,288(r2)
 2021330:	10c00044 	addi	r3,r2,1
 2021334:	008085f4 	movhi	r2,535
 2021338:	10a86704 	addi	r2,r2,-24164
 202133c:	10c04815 	stw	r3,288(r2)

  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
 2021340:	e0ffff17 	ldw	r3,-4(fp)
 2021344:	e0bfff17 	ldw	r2,-4(fp)
 2021348:	11000104 	addi	r4,r2,4
 202134c:	e0bfff17 	ldw	r2,-4(fp)
 2021350:	10800283 	ldbu	r2,10(r2)
 2021354:	11403fcc 	andi	r5,r2,255
 2021358:	e0bfff17 	ldw	r2,-4(fp)
 202135c:	108002c4 	addi	r2,r2,11
 2021360:	d8800215 	stw	r2,8(sp)
 2021364:	00800184 	movi	r2,6
 2021368:	d8800115 	stw	r2,4(sp)
 202136c:	d8000015 	stw	zero,0(sp)
 2021370:	280f883a 	mov	r7,r5
 2021374:	200d883a 	mov	r6,r4
 2021378:	180b883a 	mov	r5,r3
 202137c:	e13ffc17 	ldw	r4,-16(fp)
 2021380:	20328f40 	call	20328f4 <ip_output_hinted>
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
 2021384:	e13ffc17 	ldw	r4,-16(fp)
 2021388:	201aa200 	call	201aa20 <pbuf_free>
 202138c:	00000306 	br	202139c <tcp_zero_window_probe+0x2d4>

  if(seg == NULL) {
    seg = pcb->unsent;
  }
  if(seg == NULL) {
    return;
 2021390:	0001883a 	nop
 2021394:	00000106 	br	202139c <tcp_zero_window_probe+0x2d4>
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  if(p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
 2021398:	0001883a 	nop
  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
 202139c:	e037883a 	mov	sp,fp
 20213a0:	dfc00117 	ldw	ra,4(sp)
 20213a4:	df000017 	ldw	fp,0(sp)
 20213a8:	dec00204 	addi	sp,sp,8
 20213ac:	f800283a 	ret

020213b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 20213b0:	defffd04 	addi	sp,sp,-12
 20213b4:	dfc00215 	stw	ra,8(sp)
 20213b8:	df000115 	stw	fp,4(sp)
 20213bc:	df000104 	addi	fp,sp,4
 20213c0:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 20213c4:	201b8280 	call	201b828 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 20213c8:	d0a7f717 	ldw	r2,-24612(gp)
 20213cc:	1000021e 	bne	r2,zero,20213d8 <tcpip_tcp_timer+0x28>
 20213d0:	d0a7fc17 	ldw	r2,-24592(gp)
 20213d4:	10000626 	beq	r2,zero,20213f0 <tcpip_tcp_timer+0x40>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 20213d8:	000d883a 	mov	r6,zero
 20213dc:	014080b4 	movhi	r5,514
 20213e0:	2944ec04 	addi	r5,r5,5040
 20213e4:	01003e84 	movi	r4,250
 20213e8:	20215f00 	call	20215f0 <sys_timeout>
 20213ec:	00000106 	br	20213f4 <tcpip_tcp_timer+0x44>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 20213f0:	d027fe15 	stw	zero,-24584(gp)
  }
}
 20213f4:	0001883a 	nop
 20213f8:	e037883a 	mov	sp,fp
 20213fc:	dfc00117 	ldw	ra,4(sp)
 2021400:	df000017 	ldw	fp,0(sp)
 2021404:	dec00204 	addi	sp,sp,8
 2021408:	f800283a 	ret

0202140c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 202140c:	defffe04 	addi	sp,sp,-8
 2021410:	dfc00115 	stw	ra,4(sp)
 2021414:	df000015 	stw	fp,0(sp)
 2021418:	d839883a 	mov	fp,sp
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 202141c:	d0a7fe17 	ldw	r2,-24584(gp)
 2021420:	10000b1e 	bne	r2,zero,2021450 <tcp_timer_needed+0x44>
 2021424:	d0a7f717 	ldw	r2,-24612(gp)
 2021428:	1000021e 	bne	r2,zero,2021434 <tcp_timer_needed+0x28>
 202142c:	d0a7fc17 	ldw	r2,-24592(gp)
 2021430:	10000726 	beq	r2,zero,2021450 <tcp_timer_needed+0x44>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 2021434:	00800044 	movi	r2,1
 2021438:	d0a7fe15 	stw	r2,-24584(gp)
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 202143c:	000d883a 	mov	r6,zero
 2021440:	014080b4 	movhi	r5,514
 2021444:	2944ec04 	addi	r5,r5,5040
 2021448:	01003e84 	movi	r4,250
 202144c:	20215f00 	call	20215f0 <sys_timeout>
  }
}
 2021450:	0001883a 	nop
 2021454:	e037883a 	mov	sp,fp
 2021458:	dfc00117 	ldw	ra,4(sp)
 202145c:	df000017 	ldw	fp,0(sp)
 2021460:	dec00204 	addi	sp,sp,8
 2021464:	f800283a 	ret

02021468 <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
 2021468:	defffd04 	addi	sp,sp,-12
 202146c:	dfc00215 	stw	ra,8(sp)
 2021470:	df000115 	stw	fp,4(sp)
 2021474:	df000104 	addi	fp,sp,4
 2021478:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
 202147c:	20329c40 	call	20329c4 <ip_reass_tmr>
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 2021480:	000d883a 	mov	r6,zero
 2021484:	014080b4 	movhi	r5,514
 2021488:	29451a04 	addi	r5,r5,5224
 202148c:	0100fa04 	movi	r4,1000
 2021490:	20215f00 	call	20215f0 <sys_timeout>
}
 2021494:	0001883a 	nop
 2021498:	e037883a 	mov	sp,fp
 202149c:	dfc00117 	ldw	ra,4(sp)
 20214a0:	df000017 	ldw	fp,0(sp)
 20214a4:	dec00204 	addi	sp,sp,8
 20214a8:	f800283a 	ret

020214ac <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
 20214ac:	defffd04 	addi	sp,sp,-12
 20214b0:	dfc00215 	stw	ra,8(sp)
 20214b4:	df000115 	stw	fp,4(sp)
 20214b8:	df000104 	addi	fp,sp,4
 20214bc:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
 20214c0:	2022b300 	call	2022b30 <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 20214c4:	000d883a 	mov	r6,zero
 20214c8:	014080b4 	movhi	r5,514
 20214cc:	29452b04 	addi	r5,r5,5292
 20214d0:	0104e204 	movi	r4,5000
 20214d4:	20215f00 	call	20215f0 <sys_timeout>
}
 20214d8:	0001883a 	nop
 20214dc:	e037883a 	mov	sp,fp
 20214e0:	dfc00117 	ldw	ra,4(sp)
 20214e4:	df000017 	ldw	fp,0(sp)
 20214e8:	dec00204 	addi	sp,sp,8
 20214ec:	f800283a 	ret

020214f0 <dhcp_timer_coarse>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_coarse(void *arg)
{
 20214f0:	defffd04 	addi	sp,sp,-12
 20214f4:	dfc00215 	stw	ra,8(sp)
 20214f8:	df000115 	stw	fp,4(sp)
 20214fc:	df000104 	addi	fp,sp,4
 2021500:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
 2021504:	201592c0 	call	201592c <dhcp_coarse_tmr>
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 2021508:	000d883a 	mov	r6,zero
 202150c:	014080b4 	movhi	r5,514
 2021510:	29453c04 	addi	r5,r5,5360
 2021514:	013a9814 	movui	r4,60000
 2021518:	20215f00 	call	20215f0 <sys_timeout>
}
 202151c:	0001883a 	nop
 2021520:	e037883a 	mov	sp,fp
 2021524:	dfc00117 	ldw	ra,4(sp)
 2021528:	df000017 	ldw	fp,0(sp)
 202152c:	dec00204 	addi	sp,sp,8
 2021530:	f800283a 	ret

02021534 <dhcp_timer_fine>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_fine(void *arg)
{
 2021534:	defffd04 	addi	sp,sp,-12
 2021538:	dfc00215 	stw	ra,8(sp)
 202153c:	df000115 	stw	fp,4(sp)
 2021540:	df000104 	addi	fp,sp,4
 2021544:	e13fff15 	stw	r4,-4(fp)
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
 2021548:	20159d40 	call	20159d4 <dhcp_fine_tmr>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 202154c:	000d883a 	mov	r6,zero
 2021550:	014080b4 	movhi	r5,514
 2021554:	29454d04 	addi	r5,r5,5428
 2021558:	01007d04 	movi	r4,500
 202155c:	20215f00 	call	20215f0 <sys_timeout>
}
 2021560:	0001883a 	nop
 2021564:	e037883a 	mov	sp,fp
 2021568:	dfc00117 	ldw	ra,4(sp)
 202156c:	df000017 	ldw	fp,0(sp)
 2021570:	dec00204 	addi	sp,sp,8
 2021574:	f800283a 	ret

02021578 <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
 2021578:	defffe04 	addi	sp,sp,-8
 202157c:	dfc00115 	stw	ra,4(sp)
 2021580:	df000015 	stw	fp,0(sp)
 2021584:	d839883a 	mov	fp,sp
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
 2021588:	000d883a 	mov	r6,zero
 202158c:	014080b4 	movhi	r5,514
 2021590:	29451a04 	addi	r5,r5,5224
 2021594:	0100fa04 	movi	r4,1000
 2021598:	20215f00 	call	20215f0 <sys_timeout>
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 202159c:	000d883a 	mov	r6,zero
 20215a0:	014080b4 	movhi	r5,514
 20215a4:	29452b04 	addi	r5,r5,5292
 20215a8:	0104e204 	movi	r4,5000
 20215ac:	20215f00 	call	20215f0 <sys_timeout>
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 20215b0:	000d883a 	mov	r6,zero
 20215b4:	014080b4 	movhi	r5,514
 20215b8:	29453c04 	addi	r5,r5,5360
 20215bc:	013a9814 	movui	r4,60000
 20215c0:	20215f00 	call	20215f0 <sys_timeout>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 20215c4:	000d883a 	mov	r6,zero
 20215c8:	014080b4 	movhi	r5,514
 20215cc:	29454d04 	addi	r5,r5,5428
 20215d0:	01007d04 	movi	r4,500
 20215d4:	20215f00 	call	20215f0 <sys_timeout>

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
#endif
}
 20215d8:	0001883a 	nop
 20215dc:	e037883a 	mov	sp,fp
 20215e0:	dfc00117 	ldw	ra,4(sp)
 20215e4:	df000017 	ldw	fp,0(sp)
 20215e8:	dec00204 	addi	sp,sp,8
 20215ec:	f800283a 	ret

020215f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 20215f0:	defff904 	addi	sp,sp,-28
 20215f4:	dfc00615 	stw	ra,24(sp)
 20215f8:	df000515 	stw	fp,20(sp)
 20215fc:	df000504 	addi	fp,sp,20
 2021600:	e13ffd15 	stw	r4,-12(fp)
 2021604:	e17ffe15 	stw	r5,-8(fp)
 2021608:	e1bfff15 	stw	r6,-4(fp)
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 202160c:	01000304 	movi	r4,12
 2021610:	20342e00 	call	20342e0 <memp_malloc>
 2021614:	e0bffc15 	stw	r2,-16(fp)
  if (timeout == NULL) {
 2021618:	e0bffc17 	ldw	r2,-16(fp)
 202161c:	10004d26 	beq	r2,zero,2021754 <sys_timeout+0x164>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
 2021620:	e0bffc17 	ldw	r2,-16(fp)
 2021624:	10000015 	stw	zero,0(r2)
  timeout->h = handler;
 2021628:	e0bffc17 	ldw	r2,-16(fp)
 202162c:	e0fffe17 	ldw	r3,-8(fp)
 2021630:	10c00215 	stw	r3,8(r2)
  timeout->arg = arg;
 2021634:	e0bffc17 	ldw	r2,-16(fp)
 2021638:	e0ffff17 	ldw	r3,-4(fp)
 202163c:	10c00315 	stw	r3,12(r2)
  timeout->time = msecs;
 2021640:	e0bffc17 	ldw	r2,-16(fp)
 2021644:	e0fffd17 	ldw	r3,-12(fp)
 2021648:	10c00115 	stw	r3,4(r2)
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 202164c:	d0a7fd17 	ldw	r2,-24588(gp)
 2021650:	1000031e 	bne	r2,zero,2021660 <sys_timeout+0x70>
    next_timeout = timeout;
 2021654:	e0bffc17 	ldw	r2,-16(fp)
 2021658:	d0a7fd15 	stw	r2,-24588(gp)
    return;
 202165c:	00003e06 	br	2021758 <sys_timeout+0x168>
  }

  if (next_timeout->time > msecs) {
 2021660:	d0a7fd17 	ldw	r2,-24588(gp)
 2021664:	10800117 	ldw	r2,4(r2)
 2021668:	e0fffd17 	ldw	r3,-12(fp)
 202166c:	18800c2e 	bgeu	r3,r2,20216a0 <sys_timeout+0xb0>
    next_timeout->time -= msecs;
 2021670:	d0a7fd17 	ldw	r2,-24588(gp)
 2021674:	d0e7fd17 	ldw	r3,-24588(gp)
 2021678:	19000117 	ldw	r4,4(r3)
 202167c:	e0fffd17 	ldw	r3,-12(fp)
 2021680:	20c7c83a 	sub	r3,r4,r3
 2021684:	10c00115 	stw	r3,4(r2)
    timeout->next = next_timeout;
 2021688:	d0e7fd17 	ldw	r3,-24588(gp)
 202168c:	e0bffc17 	ldw	r2,-16(fp)
 2021690:	10c00015 	stw	r3,0(r2)
    next_timeout = timeout;
 2021694:	e0bffc17 	ldw	r2,-16(fp)
 2021698:	d0a7fd15 	stw	r2,-24588(gp)
 202169c:	00002e06 	br	2021758 <sys_timeout+0x168>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 20216a0:	d0a7fd17 	ldw	r2,-24588(gp)
 20216a4:	e0bffb15 	stw	r2,-20(fp)
 20216a8:	00002706 	br	2021748 <sys_timeout+0x158>
      timeout->time -= t->time;
 20216ac:	e0bffc17 	ldw	r2,-16(fp)
 20216b0:	10c00117 	ldw	r3,4(r2)
 20216b4:	e0bffb17 	ldw	r2,-20(fp)
 20216b8:	10800117 	ldw	r2,4(r2)
 20216bc:	1887c83a 	sub	r3,r3,r2
 20216c0:	e0bffc17 	ldw	r2,-16(fp)
 20216c4:	10c00115 	stw	r3,4(r2)
      if (t->next == NULL || t->next->time > timeout->time) {
 20216c8:	e0bffb17 	ldw	r2,-20(fp)
 20216cc:	10800017 	ldw	r2,0(r2)
 20216d0:	10000626 	beq	r2,zero,20216ec <sys_timeout+0xfc>
 20216d4:	e0bffb17 	ldw	r2,-20(fp)
 20216d8:	10800017 	ldw	r2,0(r2)
 20216dc:	10800117 	ldw	r2,4(r2)
 20216e0:	e0fffc17 	ldw	r3,-16(fp)
 20216e4:	18c00117 	ldw	r3,4(r3)
 20216e8:	1880142e 	bgeu	r3,r2,202173c <sys_timeout+0x14c>
        if (t->next != NULL) {
 20216ec:	e0bffb17 	ldw	r2,-20(fp)
 20216f0:	10800017 	ldw	r2,0(r2)
 20216f4:	10000926 	beq	r2,zero,202171c <sys_timeout+0x12c>
          t->next->time -= timeout->time;
 20216f8:	e0bffb17 	ldw	r2,-20(fp)
 20216fc:	10800017 	ldw	r2,0(r2)
 2021700:	e0fffb17 	ldw	r3,-20(fp)
 2021704:	18c00017 	ldw	r3,0(r3)
 2021708:	19000117 	ldw	r4,4(r3)
 202170c:	e0fffc17 	ldw	r3,-16(fp)
 2021710:	18c00117 	ldw	r3,4(r3)
 2021714:	20c7c83a 	sub	r3,r4,r3
 2021718:	10c00115 	stw	r3,4(r2)
        }
        timeout->next = t->next;
 202171c:	e0bffb17 	ldw	r2,-20(fp)
 2021720:	10c00017 	ldw	r3,0(r2)
 2021724:	e0bffc17 	ldw	r2,-16(fp)
 2021728:	10c00015 	stw	r3,0(r2)
        t->next = timeout;
 202172c:	e0bffb17 	ldw	r2,-20(fp)
 2021730:	e0fffc17 	ldw	r3,-16(fp)
 2021734:	10c00015 	stw	r3,0(r2)
        break;
 2021738:	00000706 	br	2021758 <sys_timeout+0x168>
  if (next_timeout->time > msecs) {
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 202173c:	e0bffb17 	ldw	r2,-20(fp)
 2021740:	10800017 	ldw	r2,0(r2)
 2021744:	e0bffb15 	stw	r2,-20(fp)
 2021748:	e0bffb17 	ldw	r2,-20(fp)
 202174c:	103fd71e 	bne	r2,zero,20216ac <__alt_mem_mem_0+0xfd0016ac>
 2021750:	00000106 	br	2021758 <sys_timeout+0x168>
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  if (timeout == NULL) {
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
 2021754:	0001883a 	nop
        t->next = timeout;
        break;
      }
    }
  }
}
 2021758:	e037883a 	mov	sp,fp
 202175c:	dfc00117 	ldw	ra,4(sp)
 2021760:	df000017 	ldw	fp,0(sp)
 2021764:	dec00204 	addi	sp,sp,8
 2021768:	f800283a 	ret

0202176c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 202176c:	defffa04 	addi	sp,sp,-24
 2021770:	dfc00515 	stw	ra,20(sp)
 2021774:	df000415 	stw	fp,16(sp)
 2021778:	df000404 	addi	fp,sp,16
 202177c:	e13ffe15 	stw	r4,-8(fp)
 2021780:	e17fff15 	stw	r5,-4(fp)
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
 2021784:	d0a7fd17 	ldw	r2,-24588(gp)
 2021788:	10002f26 	beq	r2,zero,2021848 <sys_untimeout+0xdc>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 202178c:	d0a7fd17 	ldw	r2,-24588(gp)
 2021790:	e0bffd15 	stw	r2,-12(fp)
 2021794:	e03ffc15 	stw	zero,-16(fp)
 2021798:	00002706 	br	2021838 <sys_untimeout+0xcc>
    if ((t->h == handler) && (t->arg == arg)) {
 202179c:	e0bffd17 	ldw	r2,-12(fp)
 20217a0:	10c00217 	ldw	r3,8(r2)
 20217a4:	e0bffe17 	ldw	r2,-8(fp)
 20217a8:	18801e1e 	bne	r3,r2,2021824 <sys_untimeout+0xb8>
 20217ac:	e0bffd17 	ldw	r2,-12(fp)
 20217b0:	10c00317 	ldw	r3,12(r2)
 20217b4:	e0bfff17 	ldw	r2,-4(fp)
 20217b8:	18801a1e 	bne	r3,r2,2021824 <sys_untimeout+0xb8>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 20217bc:	e0bffc17 	ldw	r2,-16(fp)
 20217c0:	1000041e 	bne	r2,zero,20217d4 <sys_untimeout+0x68>
        next_timeout = t->next;
 20217c4:	e0bffd17 	ldw	r2,-12(fp)
 20217c8:	10800017 	ldw	r2,0(r2)
 20217cc:	d0a7fd15 	stw	r2,-24588(gp)
 20217d0:	00000406 	br	20217e4 <sys_untimeout+0x78>
      } else {
        prev_t->next = t->next;
 20217d4:	e0bffd17 	ldw	r2,-12(fp)
 20217d8:	10c00017 	ldw	r3,0(r2)
 20217dc:	e0bffc17 	ldw	r2,-16(fp)
 20217e0:	10c00015 	stw	r3,0(r2)
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
 20217e4:	e0bffd17 	ldw	r2,-12(fp)
 20217e8:	10800017 	ldw	r2,0(r2)
 20217ec:	10000926 	beq	r2,zero,2021814 <sys_untimeout+0xa8>
        t->next->time += t->time;
 20217f0:	e0bffd17 	ldw	r2,-12(fp)
 20217f4:	10800017 	ldw	r2,0(r2)
 20217f8:	e0fffd17 	ldw	r3,-12(fp)
 20217fc:	18c00017 	ldw	r3,0(r3)
 2021800:	19000117 	ldw	r4,4(r3)
 2021804:	e0fffd17 	ldw	r3,-12(fp)
 2021808:	18c00117 	ldw	r3,4(r3)
 202180c:	20c7883a 	add	r3,r4,r3
 2021810:	10c00115 	stw	r3,4(r2)
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 2021814:	e17ffd17 	ldw	r5,-12(fp)
 2021818:	01000304 	movi	r4,12
 202181c:	20344ac0 	call	20344ac <memp_free>
      return;
 2021820:	00000a06 	br	202184c <sys_untimeout+0xe0>

  if (next_timeout == NULL) {
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 2021824:	e0bffd17 	ldw	r2,-12(fp)
 2021828:	e0bffc15 	stw	r2,-16(fp)
 202182c:	e0bffd17 	ldw	r2,-12(fp)
 2021830:	10800017 	ldw	r2,0(r2)
 2021834:	e0bffd15 	stw	r2,-12(fp)
 2021838:	e0bffd17 	ldw	r2,-12(fp)
 202183c:	103fd71e 	bne	r2,zero,202179c <__alt_mem_mem_0+0xfd00179c>
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
      return;
    }
  }
  return;
 2021840:	0001883a 	nop
 2021844:	00000106 	br	202184c <sys_untimeout+0xe0>
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
    return;
 2021848:	0001883a 	nop
      memp_free(MEMP_SYS_TIMEOUT, t);
      return;
    }
  }
  return;
}
 202184c:	e037883a 	mov	sp,fp
 2021850:	dfc00117 	ldw	ra,4(sp)
 2021854:	df000017 	ldw	fp,0(sp)
 2021858:	dec00204 	addi	sp,sp,8
 202185c:	f800283a 	ret

02021860 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 2021860:	defff804 	addi	sp,sp,-32
 2021864:	dfc00715 	stw	ra,28(sp)
 2021868:	df000615 	stw	fp,24(sp)
 202186c:	df000604 	addi	fp,sp,24
 2021870:	e13ffe15 	stw	r4,-8(fp)
 2021874:	e17fff15 	stw	r5,-4(fp)
  struct sys_timeo *tmptimeout;
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
 2021878:	d0a7fd17 	ldw	r2,-24588(gp)
 202187c:	1000061e 	bne	r2,zero,2021898 <sys_timeouts_mbox_fetch+0x38>
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
 2021880:	000d883a 	mov	r6,zero
 2021884:	e17fff17 	ldw	r5,-4(fp)
 2021888:	e13ffe17 	ldw	r4,-8(fp)
 202188c:	20152b00 	call	20152b0 <sys_arch_mbox_fetch>
 2021890:	e0bffa15 	stw	r2,-24(fp)
      } else {
        next_timeout->time = 0;
      }
    }
  }
}
 2021894:	00003106 	br	202195c <sys_timeouts_mbox_fetch+0xfc>

 again:
  if (!next_timeout) {
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
  } else {
    if (next_timeout->time > 0) {
 2021898:	d0a7fd17 	ldw	r2,-24588(gp)
 202189c:	10800117 	ldw	r2,4(r2)
 20218a0:	10000826 	beq	r2,zero,20218c4 <sys_timeouts_mbox_fetch+0x64>
      time_needed = sys_arch_mbox_fetch(mbox, msg, next_timeout->time);
 20218a4:	d0a7fd17 	ldw	r2,-24588(gp)
 20218a8:	10800117 	ldw	r2,4(r2)
 20218ac:	100d883a 	mov	r6,r2
 20218b0:	e17fff17 	ldw	r5,-4(fp)
 20218b4:	e13ffe17 	ldw	r4,-8(fp)
 20218b8:	20152b00 	call	20152b0 <sys_arch_mbox_fetch>
 20218bc:	e0bffa15 	stw	r2,-24(fp)
 20218c0:	00000206 	br	20218cc <sys_timeouts_mbox_fetch+0x6c>
    } else {
      time_needed = SYS_ARCH_TIMEOUT;
 20218c4:	00bfffc4 	movi	r2,-1
 20218c8:	e0bffa15 	stw	r2,-24(fp)
    }

    if (time_needed == SYS_ARCH_TIMEOUT) {
 20218cc:	e0bffa17 	ldw	r2,-24(fp)
 20218d0:	10bfffd8 	cmpnei	r2,r2,-1
 20218d4:	1000141e 	bne	r2,zero,2021928 <sys_timeouts_mbox_fetch+0xc8>
      /* If time == SYS_ARCH_TIMEOUT, a timeout occured before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = next_timeout;
 20218d8:	d0a7fd17 	ldw	r2,-24588(gp)
 20218dc:	e0bffb15 	stw	r2,-20(fp)
      next_timeout = tmptimeout->next;
 20218e0:	e0bffb17 	ldw	r2,-20(fp)
 20218e4:	10800017 	ldw	r2,0(r2)
 20218e8:	d0a7fd15 	stw	r2,-24588(gp)
      handler = tmptimeout->h;
 20218ec:	e0bffb17 	ldw	r2,-20(fp)
 20218f0:	10800217 	ldw	r2,8(r2)
 20218f4:	e0bffc15 	stw	r2,-16(fp)
      arg = tmptimeout->arg;
 20218f8:	e0bffb17 	ldw	r2,-20(fp)
 20218fc:	10800317 	ldw	r2,12(r2)
 2021900:	e0bffd15 	stw	r2,-12(fp)
      if (handler != NULL) {
        LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n",
          tmptimeout->handler_name, arg));
      }
#endif /* LWIP_DEBUG_TIMERNAMES */
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 2021904:	e17ffb17 	ldw	r5,-20(fp)
 2021908:	01000304 	movi	r4,12
 202190c:	20344ac0 	call	20344ac <memp_free>
      if (handler != NULL) {
 2021910:	e0bffc17 	ldw	r2,-16(fp)
 2021914:	103fd826 	beq	r2,zero,2021878 <__alt_mem_mem_0+0xfd001878>
        /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
           timeout handler function. */
        LOCK_TCPIP_CORE();
        handler(arg);
 2021918:	e0bffc17 	ldw	r2,-16(fp)
 202191c:	e13ffd17 	ldw	r4,-12(fp)
 2021920:	103ee83a 	callr	r2
        UNLOCK_TCPIP_CORE();
      }
      LWIP_TCPIP_THREAD_ALIVE();

      /* We try again to fetch a message from the mbox. */
      goto again;
 2021924:	003fd406 	br	2021878 <__alt_mem_mem_0+0xfd001878>
    } else {
      /* If time != SYS_ARCH_TIMEOUT, a message was received before the timeout
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < next_timeout->time) {
 2021928:	d0a7fd17 	ldw	r2,-24588(gp)
 202192c:	10800117 	ldw	r2,4(r2)
 2021930:	e0fffa17 	ldw	r3,-24(fp)
 2021934:	1880072e 	bgeu	r3,r2,2021954 <sys_timeouts_mbox_fetch+0xf4>
        next_timeout->time -= time_needed;
 2021938:	d0a7fd17 	ldw	r2,-24588(gp)
 202193c:	d0e7fd17 	ldw	r3,-24588(gp)
 2021940:	19000117 	ldw	r4,4(r3)
 2021944:	e0fffa17 	ldw	r3,-24(fp)
 2021948:	20c7c83a 	sub	r3,r4,r3
 202194c:	10c00115 	stw	r3,4(r2)
      } else {
        next_timeout->time = 0;
      }
    }
  }
}
 2021950:	00000206 	br	202195c <sys_timeouts_mbox_fetch+0xfc>
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < next_timeout->time) {
        next_timeout->time -= time_needed;
      } else {
        next_timeout->time = 0;
 2021954:	d0a7fd17 	ldw	r2,-24588(gp)
 2021958:	10000115 	stw	zero,4(r2)
      }
    }
  }
}
 202195c:	0001883a 	nop
 2021960:	e037883a 	mov	sp,fp
 2021964:	dfc00117 	ldw	ra,4(sp)
 2021968:	df000017 	ldw	fp,0(sp)
 202196c:	dec00204 	addi	sp,sp,8
 2021970:	f800283a 	ret

02021974 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 2021974:	deffff04 	addi	sp,sp,-4
 2021978:	df000015 	stw	fp,0(sp)
 202197c:	d839883a 	mov	fp,sp
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 2021980:	0001883a 	nop
 2021984:	e037883a 	mov	sp,fp
 2021988:	df000017 	ldw	fp,0(sp)
 202198c:	dec00104 	addi	sp,sp,4
 2021990:	f800283a 	ret

02021994 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 2021994:	defffd04 	addi	sp,sp,-12
 2021998:	df000215 	stw	fp,8(sp)
 202199c:	df000204 	addi	fp,sp,8
  u16_t n = 0;
 20219a0:	e03ffe0d 	sth	zero,-8(fp)
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 20219a4:	d0a0130b 	ldhu	r2,-32692(gp)
 20219a8:	10c00044 	addi	r3,r2,1
 20219ac:	d0e0130d 	sth	r3,-32692(gp)
 20219b0:	10ffffcc 	andi	r3,r2,65535
 20219b4:	00bfffd4 	movui	r2,65535
 20219b8:	1880021e 	bne	r3,r2,20219c4 <udp_new_port+0x30>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 20219bc:	00b00004 	movi	r2,-16384
 20219c0:	d0a0130d 	sth	r2,-32692(gp)
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 20219c4:	d0a7ff17 	ldw	r2,-24580(gp)
 20219c8:	e0bfff15 	stw	r2,-4(fp)
 20219cc:	00001106 	br	2021a14 <udp_new_port+0x80>
    if (pcb->local_port == udp_port) {
 20219d0:	e0bfff17 	ldw	r2,-4(fp)
 20219d4:	10c0048b 	ldhu	r3,18(r2)
 20219d8:	d0a0130b 	ldhu	r2,-32692(gp)
 20219dc:	18ffffcc 	andi	r3,r3,65535
 20219e0:	10bfffcc 	andi	r2,r2,65535
 20219e4:	1880081e 	bne	r3,r2,2021a08 <udp_new_port+0x74>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 20219e8:	e0bffe0b 	ldhu	r2,-8(fp)
 20219ec:	10800044 	addi	r2,r2,1
 20219f0:	e0bffe0d 	sth	r2,-8(fp)
 20219f4:	e0bffe0b 	ldhu	r2,-8(fp)
 20219f8:	10900030 	cmpltui	r2,r2,16384
 20219fc:	103fe91e 	bne	r2,zero,20219a4 <__alt_mem_mem_0+0xfd0019a4>
        return 0;
 2021a00:	0005883a 	mov	r2,zero
 2021a04:	00000606 	br	2021a20 <udp_new_port+0x8c>
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 2021a08:	e0bfff17 	ldw	r2,-4(fp)
 2021a0c:	10800317 	ldw	r2,12(r2)
 2021a10:	e0bfff15 	stw	r2,-4(fp)
 2021a14:	e0bfff17 	ldw	r2,-4(fp)
 2021a18:	103fed1e 	bne	r2,zero,20219d0 <__alt_mem_mem_0+0xfd0019d0>
        return 0;
      }
      goto again;
    }
  }
  return udp_port;
 2021a1c:	d0a0130b 	ldhu	r2,-32692(gp)
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
 2021a20:	e037883a 	mov	sp,fp
 2021a24:	df000017 	ldw	fp,0(sp)
 2021a28:	dec00104 	addi	sp,sp,4
 2021a2c:	f800283a 	ret

02021a30 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 2021a30:	defff304 	addi	sp,sp,-52
 2021a34:	dfc00c15 	stw	ra,48(sp)
 2021a38:	df000b15 	stw	fp,44(sp)
 2021a3c:	df000b04 	addi	fp,sp,44
 2021a40:	e13ffe15 	stw	r4,-8(fp)
 2021a44:	e17fff15 	stw	r5,-4(fp)
  u8_t local_match;
  u8_t broadcast;

  PERF_START;

  UDP_STATS_INC(udp.recv);
 2021a48:	008085f4 	movhi	r2,535
 2021a4c:	10a86704 	addi	r2,r2,-24164
 2021a50:	10803d17 	ldw	r2,244(r2)
 2021a54:	10c00044 	addi	r3,r2,1
 2021a58:	008085f4 	movhi	r2,535
 2021a5c:	10a86704 	addi	r2,r2,-24164
 2021a60:	10c03d15 	stw	r3,244(r2)

  iphdr = (struct ip_hdr *)p->payload;
 2021a64:	e0bffe17 	ldw	r2,-8(fp)
 2021a68:	10800117 	ldw	r2,4(r2)
 2021a6c:	e0bffa15 	stw	r2,-24(fp)

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 2021a70:	e0bffe17 	ldw	r2,-8(fp)
 2021a74:	1080020b 	ldhu	r2,8(r2)
 2021a78:	10ffffcc 	andi	r3,r2,65535
 2021a7c:	e0bffa17 	ldw	r2,-24(fp)
 2021a80:	10800003 	ldbu	r2,0(r2)
 2021a84:	10803fcc 	andi	r2,r2,255
 2021a88:	108003cc 	andi	r2,r2,15
 2021a8c:	10800084 	addi	r2,r2,2
 2021a90:	1085883a 	add	r2,r2,r2
 2021a94:	1085883a 	add	r2,r2,r2
 2021a98:	18800f16 	blt	r3,r2,2021ad8 <udp_input+0xa8>
 2021a9c:	e0bffa17 	ldw	r2,-24(fp)
 2021aa0:	10800003 	ldbu	r2,0(r2)
 2021aa4:	10803fcc 	andi	r2,r2,255
 2021aa8:	108003cc 	andi	r2,r2,15
 2021aac:	1085883a 	add	r2,r2,r2
 2021ab0:	1085883a 	add	r2,r2,r2
 2021ab4:	0085c83a 	sub	r2,zero,r2
 2021ab8:	10bfffcc 	andi	r2,r2,65535
 2021abc:	10a0001c 	xori	r2,r2,32768
 2021ac0:	10a00004 	addi	r2,r2,-32768
 2021ac4:	100b883a 	mov	r5,r2
 2021ac8:	e13ffe17 	ldw	r4,-8(fp)
 2021acc:	201a8700 	call	201a870 <pbuf_header>
 2021ad0:	10803fcc 	andi	r2,r2,255
 2021ad4:	10001126 	beq	r2,zero,2021b1c <udp_input+0xec>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 2021ad8:	008085f4 	movhi	r2,535
 2021adc:	10a86704 	addi	r2,r2,-24164
 2021ae0:	10804117 	ldw	r2,260(r2)
 2021ae4:	10c00044 	addi	r3,r2,1
 2021ae8:	008085f4 	movhi	r2,535
 2021aec:	10a86704 	addi	r2,r2,-24164
 2021af0:	10c04115 	stw	r3,260(r2)
    UDP_STATS_INC(udp.drop);
 2021af4:	008085f4 	movhi	r2,535
 2021af8:	10a86704 	addi	r2,r2,-24164
 2021afc:	10803f17 	ldw	r2,252(r2)
 2021b00:	10c00044 	addi	r3,r2,1
 2021b04:	008085f4 	movhi	r2,535
 2021b08:	10a86704 	addi	r2,r2,-24164
 2021b0c:	10c03f15 	stw	r3,252(r2)
    snmp_inc_udpinerrors();
    pbuf_free(p);
 2021b10:	e13ffe17 	ldw	r4,-8(fp)
 2021b14:	201aa200 	call	201aa20 <pbuf_free>
    goto end;
 2021b18:	00011f06 	br	2021f98 <udp_input+0x568>
  }

  udphdr = (struct udp_hdr *)p->payload;
 2021b1c:	e0bffe17 	ldw	r2,-8(fp)
 2021b20:	10800117 	ldw	r2,4(r2)
 2021b24:	e0bffb15 	stw	r2,-20(fp)

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 2021b28:	d0a81417 	ldw	r2,-24496(gp)
 2021b2c:	e17fff17 	ldw	r5,-4(fp)
 2021b30:	1009883a 	mov	r4,r2
 2021b34:	20187dc0 	call	20187dc <ip4_addr_isbroadcast>
 2021b38:	e0bffc05 	stb	r2,-16(fp)

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 2021b3c:	e0bffb17 	ldw	r2,-20(fp)
 2021b40:	10c00003 	ldbu	r3,0(r2)
 2021b44:	10800043 	ldbu	r2,1(r2)
 2021b48:	1004923a 	slli	r2,r2,8
 2021b4c:	10c4b03a 	or	r2,r2,r3
 2021b50:	10bfffcc 	andi	r2,r2,65535
 2021b54:	1004d23a 	srli	r2,r2,8
 2021b58:	1009883a 	mov	r4,r2
 2021b5c:	e0bffb17 	ldw	r2,-20(fp)
 2021b60:	10c00003 	ldbu	r3,0(r2)
 2021b64:	10800043 	ldbu	r2,1(r2)
 2021b68:	1004923a 	slli	r2,r2,8
 2021b6c:	10c4b03a 	or	r2,r2,r3
 2021b70:	10bfffcc 	andi	r2,r2,65535
 2021b74:	1004923a 	slli	r2,r2,8
 2021b78:	2084b03a 	or	r2,r4,r2
 2021b7c:	e0bffc8d 	sth	r2,-14(fp)
  dest = ntohs(udphdr->dest);
 2021b80:	e0bffb17 	ldw	r2,-20(fp)
 2021b84:	10c00083 	ldbu	r3,2(r2)
 2021b88:	108000c3 	ldbu	r2,3(r2)
 2021b8c:	1004923a 	slli	r2,r2,8
 2021b90:	10c4b03a 	or	r2,r2,r3
 2021b94:	10bfffcc 	andi	r2,r2,65535
 2021b98:	1004d23a 	srli	r2,r2,8
 2021b9c:	1009883a 	mov	r4,r2
 2021ba0:	e0bffb17 	ldw	r2,-20(fp)
 2021ba4:	10c00083 	ldbu	r3,2(r2)
 2021ba8:	108000c3 	ldbu	r2,3(r2)
 2021bac:	1004923a 	slli	r2,r2,8
 2021bb0:	10c4b03a 	or	r2,r2,r3
 2021bb4:	10bfffcc 	andi	r2,r2,65535
 2021bb8:	1004923a 	slli	r2,r2,8
 2021bbc:	2084b03a 	or	r2,r4,r2
 2021bc0:	e0bffd0d 	sth	r2,-12(fp)
               ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
               ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
               ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));

#if LWIP_DHCP
  pcb = NULL;
 2021bc4:	e03ff615 	stw	zero,-40(fp)
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
 2021bc8:	e0bffd0b 	ldhu	r2,-12(fp)
 2021bcc:	10801118 	cmpnei	r2,r2,68
 2021bd0:	10001f1e 	bne	r2,zero,2021c50 <udp_input+0x220>
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
 2021bd4:	e0bffc8b 	ldhu	r2,-14(fp)
 2021bd8:	108010d8 	cmpnei	r2,r2,67
 2021bdc:	10007a1e 	bne	r2,zero,2021dc8 <udp_input+0x398>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
 2021be0:	e0bfff17 	ldw	r2,-4(fp)
 2021be4:	10800a17 	ldw	r2,40(r2)
 2021be8:	10007726 	beq	r2,zero,2021dc8 <udp_input+0x398>
 2021bec:	e0bfff17 	ldw	r2,-4(fp)
 2021bf0:	10800a17 	ldw	r2,40(r2)
 2021bf4:	10800117 	ldw	r2,4(r2)
 2021bf8:	10007326 	beq	r2,zero,2021dc8 <udp_input+0x398>
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
 2021bfc:	e0bfff17 	ldw	r2,-4(fp)
 2021c00:	10800a17 	ldw	r2,40(r2)
 2021c04:	10800117 	ldw	r2,4(r2)
 2021c08:	10800104 	addi	r2,r2,4
 2021c0c:	10000b26 	beq	r2,zero,2021c3c <udp_input+0x20c>
 2021c10:	e0bfff17 	ldw	r2,-4(fp)
 2021c14:	10800a17 	ldw	r2,40(r2)
 2021c18:	10800117 	ldw	r2,4(r2)
 2021c1c:	10800117 	ldw	r2,4(r2)
 2021c20:	10000626 	beq	r2,zero,2021c3c <udp_input+0x20c>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
 2021c24:	e0bfff17 	ldw	r2,-4(fp)
 2021c28:	10800a17 	ldw	r2,40(r2)
 2021c2c:	10800117 	ldw	r2,4(r2)
 2021c30:	10c00117 	ldw	r3,4(r2)
 2021c34:	d0a81217 	ldw	r2,-24504(gp)
    if (src == DHCP_SERVER_PORT) {
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
 2021c38:	1880631e 	bne	r3,r2,2021dc8 <udp_input+0x398>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
          pcb = inp->dhcp->pcb;
 2021c3c:	e0bfff17 	ldw	r2,-4(fp)
 2021c40:	10800a17 	ldw	r2,40(r2)
 2021c44:	10800117 	ldw	r2,4(r2)
 2021c48:	e0bff615 	stw	r2,-40(fp)
 2021c4c:	00005e06 	br	2021dc8 <udp_input+0x398>
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
 2021c50:	e03ff715 	stw	zero,-36(fp)
    local_match = 0;
 2021c54:	e03ff905 	stb	zero,-28(fp)
    uncon_pcb = NULL;
 2021c58:	e03ff815 	stw	zero,-32(fp)
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 2021c5c:	d0a7ff17 	ldw	r2,-24580(gp)
 2021c60:	e0bff615 	stw	r2,-40(fp)
 2021c64:	00005206 	br	2021db0 <udp_input+0x380>
      local_match = 0;
 2021c68:	e03ff905 	stb	zero,-28(fp)
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
 2021c6c:	e0bff617 	ldw	r2,-40(fp)
 2021c70:	1080048b 	ldhu	r2,18(r2)
 2021c74:	10ffffcc 	andi	r3,r2,65535
 2021c78:	e0bffd0b 	ldhu	r2,-12(fp)
 2021c7c:	1880221e 	bne	r3,r2,2021d08 <udp_input+0x2d8>
 2021c80:	e0bffc03 	ldbu	r2,-16(fp)
 2021c84:	1000051e 	bne	r2,zero,2021c9c <udp_input+0x26c>
          ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 2021c88:	e0bff617 	ldw	r2,-40(fp)
 2021c8c:	10001326 	beq	r2,zero,2021cdc <udp_input+0x2ac>
 2021c90:	e0bff617 	ldw	r2,-40(fp)
 2021c94:	10800017 	ldw	r2,0(r2)
 2021c98:	10001026 	beq	r2,zero,2021cdc <udp_input+0x2ac>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 2021c9c:	e0bff617 	ldw	r2,-40(fp)
 2021ca0:	10c00017 	ldw	r3,0(r2)
 2021ca4:	d0a81417 	ldw	r2,-24496(gp)
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if ((pcb->local_port == dest) &&
          ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 2021ca8:	18800c26 	beq	r3,r2,2021cdc <udp_input+0x2ac>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 2021cac:	e0bffc03 	ldbu	r2,-16(fp)
 2021cb0:	10001526 	beq	r2,zero,2021d08 <udp_input+0x2d8>
#endif /* LWIP_IGMP */
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
 2021cb4:	e0bff617 	ldw	r2,-40(fp)
 2021cb8:	10c00017 	ldw	r3,0(r2)
 2021cbc:	e0bfff17 	ldw	r2,-4(fp)
 2021cc0:	10800117 	ldw	r2,4(r2)
           ip_addr_ismulticast(&current_iphdr_dest) ||
#endif /* LWIP_IGMP */
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
 2021cc4:	18800526 	beq	r3,r2,2021cdc <udp_input+0x2ac>
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
			 ip_addr_isany(&pcb->local_ip))))) {
 2021cc8:	e0bff617 	ldw	r2,-40(fp)
#endif /* LWIP_IGMP */
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
 2021ccc:	10000326 	beq	r2,zero,2021cdc <udp_input+0x2ac>
			 ip_addr_isany(&pcb->local_ip))))) {
 2021cd0:	e0bff617 	ldw	r2,-40(fp)
 2021cd4:	10800017 	ldw	r2,0(r2)
 2021cd8:	10000b1e 	bne	r2,zero,2021d08 <udp_input+0x2d8>
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
 2021cdc:	00800044 	movi	r2,1
 2021ce0:	e0bff905 	stb	r2,-28(fp)
          if ((uncon_pcb == NULL) && 
 2021ce4:	e0bff817 	ldw	r2,-32(fp)
 2021ce8:	1000071e 	bne	r2,zero,2021d08 <udp_input+0x2d8>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
 2021cec:	e0bff617 	ldw	r2,-40(fp)
 2021cf0:	10800403 	ldbu	r2,16(r2)
 2021cf4:	10803fcc 	andi	r2,r2,255
 2021cf8:	1080010c 	andi	r2,r2,4
            (broadcast &&
			(ip_addr_cmp(&(pcb->local_ip), &(inp->ip_addr)) || 
			 ip_addr_isany(&pcb->local_ip))))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
          if ((uncon_pcb == NULL) && 
 2021cfc:	1000021e 	bne	r2,zero,2021d08 <udp_input+0x2d8>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
 2021d00:	e0bff617 	ldw	r2,-40(fp)
 2021d04:	e0bff815 	stw	r2,-32(fp)
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 2021d08:	e0bff903 	ldbu	r2,-28(fp)
 2021d0c:	10002326 	beq	r2,zero,2021d9c <udp_input+0x36c>
          (pcb->remote_port == src) &&
 2021d10:	e0bff617 	ldw	r2,-40(fp)
 2021d14:	1080050b 	ldhu	r2,20(r2)
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 2021d18:	10ffffcc 	andi	r3,r2,65535
 2021d1c:	e0bffc8b 	ldhu	r2,-14(fp)
 2021d20:	18801e1e 	bne	r3,r2,2021d9c <udp_input+0x36c>
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 2021d24:	e0bff617 	ldw	r2,-40(fp)
 2021d28:	10800104 	addi	r2,r2,4
            uncon_pcb = pcb;
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
 2021d2c:	10000726 	beq	r2,zero,2021d4c <udp_input+0x31c>
          (ip_addr_isany(&pcb->remote_ip) ||
 2021d30:	e0bff617 	ldw	r2,-40(fp)
 2021d34:	10800117 	ldw	r2,4(r2)
 2021d38:	10000426 	beq	r2,zero,2021d4c <udp_input+0x31c>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 2021d3c:	e0bff617 	ldw	r2,-40(fp)
 2021d40:	10c00117 	ldw	r3,4(r2)
 2021d44:	d0a81217 	ldw	r2,-24504(gp)
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 2021d48:	1880141e 	bne	r3,r2,2021d9c <udp_input+0x36c>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 2021d4c:	e0bff717 	ldw	r2,-36(fp)
 2021d50:	10000a26 	beq	r2,zero,2021d7c <udp_input+0x34c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 2021d54:	e0bff617 	ldw	r2,-40(fp)
 2021d58:	10c00317 	ldw	r3,12(r2)
 2021d5c:	e0bff717 	ldw	r2,-36(fp)
 2021d60:	10c00315 	stw	r3,12(r2)
          pcb->next = udp_pcbs;
 2021d64:	d0e7ff17 	ldw	r3,-24580(gp)
 2021d68:	e0bff617 	ldw	r2,-40(fp)
 2021d6c:	10c00315 	stw	r3,12(r2)
          udp_pcbs = pcb;
 2021d70:	e0bff617 	ldw	r2,-40(fp)
 2021d74:	d0a7ff15 	stw	r2,-24580(gp)
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 2021d78:	00000f06 	br	2021db8 <udp_input+0x388>
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
        } else {
          UDP_STATS_INC(udp.cachehit);
 2021d7c:	008085f4 	movhi	r2,535
 2021d80:	10a86704 	addi	r2,r2,-24164
 2021d84:	10804717 	ldw	r2,284(r2)
 2021d88:	10c00044 	addi	r3,r2,1
 2021d8c:	008085f4 	movhi	r2,535
 2021d90:	10a86704 	addi	r2,r2,-24164
 2021d94:	10c04715 	stw	r3,284(r2)
        }
        break;
 2021d98:	00000706 	br	2021db8 <udp_input+0x388>
      }
      prev = pcb;
 2021d9c:	e0bff617 	ldw	r2,-40(fp)
 2021da0:	e0bff715 	stw	r2,-36(fp)
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 2021da4:	e0bff617 	ldw	r2,-40(fp)
 2021da8:	10800317 	ldw	r2,12(r2)
 2021dac:	e0bff615 	stw	r2,-40(fp)
 2021db0:	e0bff617 	ldw	r2,-40(fp)
 2021db4:	103fac1e 	bne	r2,zero,2021c68 <__alt_mem_mem_0+0xfd001c68>
        break;
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
 2021db8:	e0bff617 	ldw	r2,-40(fp)
 2021dbc:	1000021e 	bne	r2,zero,2021dc8 <udp_input+0x398>
      pcb = uncon_pcb;
 2021dc0:	e0bff817 	ldw	r2,-32(fp)
 2021dc4:	e0bff615 	stw	r2,-40(fp)
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
 2021dc8:	e0bff617 	ldw	r2,-40(fp)
 2021dcc:	1000041e 	bne	r2,zero,2021de0 <udp_input+0x3b0>
 2021dd0:	e0bfff17 	ldw	r2,-4(fp)
 2021dd4:	10c00117 	ldw	r3,4(r2)
 2021dd8:	d0a81417 	ldw	r2,-24496(gp)
 2021ddc:	18806c1e 	bne	r3,r2,2021f90 <udp_input+0x560>
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
 2021de0:	e0bffb17 	ldw	r2,-20(fp)
 2021de4:	10c00183 	ldbu	r3,6(r2)
 2021de8:	108001c3 	ldbu	r2,7(r2)
 2021dec:	1004923a 	slli	r2,r2,8
 2021df0:	10c4b03a 	or	r2,r2,r3
 2021df4:	10bfffcc 	andi	r2,r2,65535
 2021df8:	10001c26 	beq	r2,zero,2021e6c <udp_input+0x43c>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
                               IP_PROTO_UDP, p->tot_len) != 0) {
 2021dfc:	e0bffe17 	ldw	r2,-8(fp)
 2021e00:	1080020b 	ldhu	r2,8(r2)
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 2021e04:	10bfffcc 	andi	r2,r2,65535
 2021e08:	d8800015 	stw	r2,0(sp)
 2021e0c:	01c00444 	movi	r7,17
 2021e10:	d1a81404 	addi	r6,gp,-24496
 2021e14:	d1681204 	addi	r5,gp,-24504
 2021e18:	e13ffe17 	ldw	r4,-8(fp)
 2021e1c:	20315e80 	call	20315e8 <inet_chksum_pseudo>
 2021e20:	10bfffcc 	andi	r2,r2,65535
 2021e24:	10001126 	beq	r2,zero,2021e6c <udp_input+0x43c>
                               IP_PROTO_UDP, p->tot_len) != 0) {
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
 2021e28:	008085f4 	movhi	r2,535
 2021e2c:	10a86704 	addi	r2,r2,-24164
 2021e30:	10804017 	ldw	r2,256(r2)
 2021e34:	10c00044 	addi	r3,r2,1
 2021e38:	008085f4 	movhi	r2,535
 2021e3c:	10a86704 	addi	r2,r2,-24164
 2021e40:	10c04015 	stw	r3,256(r2)
          UDP_STATS_INC(udp.drop);
 2021e44:	008085f4 	movhi	r2,535
 2021e48:	10a86704 	addi	r2,r2,-24164
 2021e4c:	10803f17 	ldw	r2,252(r2)
 2021e50:	10c00044 	addi	r3,r2,1
 2021e54:	008085f4 	movhi	r2,535
 2021e58:	10a86704 	addi	r2,r2,-24164
 2021e5c:	10c03f15 	stw	r3,252(r2)
          snmp_inc_udpinerrors();
          pbuf_free(p);
 2021e60:	e13ffe17 	ldw	r4,-8(fp)
 2021e64:	201aa200 	call	201aa20 <pbuf_free>
          goto end;
 2021e68:	00004b06 	br	2021f98 <udp_input+0x568>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
 2021e6c:	017ffe04 	movi	r5,-8
 2021e70:	e13ffe17 	ldw	r4,-8(fp)
 2021e74:	201a8700 	call	201a870 <pbuf_header>
 2021e78:	10803fcc 	andi	r2,r2,255
 2021e7c:	10000a26 	beq	r2,zero,2021ea8 <udp_input+0x478>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
 2021e80:	008085f4 	movhi	r2,535
 2021e84:	10a86704 	addi	r2,r2,-24164
 2021e88:	10803f17 	ldw	r2,252(r2)
 2021e8c:	10c00044 	addi	r3,r2,1
 2021e90:	008085f4 	movhi	r2,535
 2021e94:	10a86704 	addi	r2,r2,-24164
 2021e98:	10c03f15 	stw	r3,252(r2)
      snmp_inc_udpinerrors();
      pbuf_free(p);
 2021e9c:	e13ffe17 	ldw	r4,-8(fp)
 2021ea0:	201aa200 	call	201aa20 <pbuf_free>
      goto end;
 2021ea4:	00003c06 	br	2021f98 <udp_input+0x568>
    }
    if (pcb != NULL) {
 2021ea8:	e0bff617 	ldw	r2,-40(fp)
 2021eac:	10001126 	beq	r2,zero,2021ef4 <udp_input+0x4c4>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 2021eb0:	e0bff617 	ldw	r2,-40(fp)
 2021eb4:	10800617 	ldw	r2,24(r2)
 2021eb8:	10000b26 	beq	r2,zero,2021ee8 <udp_input+0x4b8>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 2021ebc:	e0bff617 	ldw	r2,-40(fp)
 2021ec0:	10800617 	ldw	r2,24(r2)
 2021ec4:	e0fff617 	ldw	r3,-40(fp)
 2021ec8:	19000717 	ldw	r4,28(r3)
 2021ecc:	e0fffc8b 	ldhu	r3,-14(fp)
 2021ed0:	d8c00015 	stw	r3,0(sp)
 2021ed4:	d1e81204 	addi	r7,gp,-24504
 2021ed8:	e1bffe17 	ldw	r6,-8(fp)
 2021edc:	e17ff617 	ldw	r5,-40(fp)
 2021ee0:	103ee83a 	callr	r2
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 2021ee4:	00002c06 	br	2021f98 <udp_input+0x568>
      if (pcb->recv != NULL) {
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
 2021ee8:	e13ffe17 	ldw	r4,-8(fp)
 2021eec:	201aa200 	call	201aa20 <pbuf_free>
        goto end;
 2021ef0:	00002906 	br	2021f98 <udp_input+0x568>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 2021ef4:	e0bffc03 	ldbu	r2,-16(fp)
 2021ef8:	1000141e 	bne	r2,zero,2021f4c <udp_input+0x51c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 2021efc:	d0a81417 	ldw	r2,-24496(gp)
 2021f00:	10803c0c 	andi	r2,r2,240
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 2021f04:	10803820 	cmpeqi	r2,r2,224
 2021f08:	1000101e 	bne	r2,zero,2021f4c <udp_input+0x51c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
 2021f0c:	e0bffa17 	ldw	r2,-24(fp)
 2021f10:	10800003 	ldbu	r2,0(r2)
 2021f14:	10803fcc 	andi	r2,r2,255
 2021f18:	108003cc 	andi	r2,r2,15
 2021f1c:	10800084 	addi	r2,r2,2
 2021f20:	1085883a 	add	r2,r2,r2
 2021f24:	1085883a 	add	r2,r2,r2
 2021f28:	10bfffcc 	andi	r2,r2,65535
 2021f2c:	10a0001c 	xori	r2,r2,32768
 2021f30:	10a00004 	addi	r2,r2,-32768
 2021f34:	100b883a 	mov	r5,r2
 2021f38:	e13ffe17 	ldw	r4,-8(fp)
 2021f3c:	201a8700 	call	201a870 <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
 2021f40:	014000c4 	movi	r5,3
 2021f44:	e13ffe17 	ldw	r4,-8(fp)
 2021f48:	20311440 	call	2031144 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
 2021f4c:	008085f4 	movhi	r2,535
 2021f50:	10a86704 	addi	r2,r2,-24164
 2021f54:	10804417 	ldw	r2,272(r2)
 2021f58:	10c00044 	addi	r3,r2,1
 2021f5c:	008085f4 	movhi	r2,535
 2021f60:	10a86704 	addi	r2,r2,-24164
 2021f64:	10c04415 	stw	r3,272(r2)
      UDP_STATS_INC(udp.drop);
 2021f68:	008085f4 	movhi	r2,535
 2021f6c:	10a86704 	addi	r2,r2,-24164
 2021f70:	10803f17 	ldw	r2,252(r2)
 2021f74:	10c00044 	addi	r3,r2,1
 2021f78:	008085f4 	movhi	r2,535
 2021f7c:	10a86704 	addi	r2,r2,-24164
 2021f80:	10c03f15 	stw	r3,252(r2)
      snmp_inc_udpnoports();
      pbuf_free(p);
 2021f84:	e13ffe17 	ldw	r4,-8(fp)
 2021f88:	201aa200 	call	201aa20 <pbuf_free>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 2021f8c:	00000206 	br	2021f98 <udp_input+0x568>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
    }
  } else {
    pbuf_free(p);
 2021f90:	e13ffe17 	ldw	r4,-8(fp)
 2021f94:	201aa200 	call	201aa20 <pbuf_free>
  }
end:
  PERF_STOP("udp_input");
}
 2021f98:	0001883a 	nop
 2021f9c:	e037883a 	mov	sp,fp
 2021fa0:	dfc00117 	ldw	ra,4(sp)
 2021fa4:	df000017 	ldw	fp,0(sp)
 2021fa8:	dec00204 	addi	sp,sp,8
 2021fac:	f800283a 	ret

02021fb0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 2021fb0:	defffc04 	addi	sp,sp,-16
 2021fb4:	dfc00315 	stw	ra,12(sp)
 2021fb8:	df000215 	stw	fp,8(sp)
 2021fbc:	df000204 	addi	fp,sp,8
 2021fc0:	e13ffe15 	stw	r4,-8(fp)
 2021fc4:	e17fff15 	stw	r5,-4(fp)
  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 2021fc8:	e0bffe17 	ldw	r2,-8(fp)
 2021fcc:	10c00104 	addi	r3,r2,4
 2021fd0:	e0bffe17 	ldw	r2,-8(fp)
 2021fd4:	1080050b 	ldhu	r2,20(r2)
 2021fd8:	10bfffcc 	andi	r2,r2,65535
 2021fdc:	100f883a 	mov	r7,r2
 2021fe0:	180d883a 	mov	r6,r3
 2021fe4:	e17fff17 	ldw	r5,-4(fp)
 2021fe8:	e13ffe17 	ldw	r4,-8(fp)
 2021fec:	20220780 	call	2022078 <udp_sendto>
}
 2021ff0:	e037883a 	mov	sp,fp
 2021ff4:	dfc00117 	ldw	ra,4(sp)
 2021ff8:	df000017 	ldw	fp,0(sp)
 2021ffc:	dec00204 	addi	sp,sp,8
 2022000:	f800283a 	ret

02022004 <udp_send_chksum>:
/** Same as udp_send() but with checksum
 */
err_t
udp_send_chksum(struct udp_pcb *pcb, struct pbuf *p,
                u8_t have_chksum, u16_t chksum)
{
 2022004:	defff804 	addi	sp,sp,-32
 2022008:	dfc00715 	stw	ra,28(sp)
 202200c:	df000615 	stw	fp,24(sp)
 2022010:	df000604 	addi	fp,sp,24
 2022014:	e13ffc15 	stw	r4,-16(fp)
 2022018:	e17ffd15 	stw	r5,-12(fp)
 202201c:	3007883a 	mov	r3,r6
 2022020:	3805883a 	mov	r2,r7
 2022024:	e0fffe05 	stb	r3,-8(fp)
 2022028:	e0bfff0d 	sth	r2,-4(fp)
  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto_chksum(pcb, p, &pcb->remote_ip, pcb->remote_port,
 202202c:	e0bffc17 	ldw	r2,-16(fp)
 2022030:	11000104 	addi	r4,r2,4
 2022034:	e0bffc17 	ldw	r2,-16(fp)
 2022038:	1080050b 	ldhu	r2,20(r2)
 202203c:	117fffcc 	andi	r5,r2,65535
 2022040:	e0bffe03 	ldbu	r2,-8(fp)
 2022044:	e0ffff0b 	ldhu	r3,-4(fp)
 2022048:	d8c00115 	stw	r3,4(sp)
 202204c:	d8800015 	stw	r2,0(sp)
 2022050:	280f883a 	mov	r7,r5
 2022054:	200d883a 	mov	r6,r4
 2022058:	e17ffd17 	ldw	r5,-12(fp)
 202205c:	e13ffc17 	ldw	r4,-16(fp)
 2022060:	20220d00 	call	20220d0 <udp_sendto_chksum>
    have_chksum, chksum);
}
 2022064:	e037883a 	mov	sp,fp
 2022068:	dfc00117 	ldw	ra,4(sp)
 202206c:	df000017 	ldw	fp,0(sp)
 2022070:	dec00204 	addi	sp,sp,8
 2022074:	f800283a 	ret

02022078 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port)
{
 2022078:	defff804 	addi	sp,sp,-32
 202207c:	dfc00715 	stw	ra,28(sp)
 2022080:	df000615 	stw	fp,24(sp)
 2022084:	df000604 	addi	fp,sp,24
 2022088:	e13ffc15 	stw	r4,-16(fp)
 202208c:	e17ffd15 	stw	r5,-12(fp)
 2022090:	e1bffe15 	stw	r6,-8(fp)
 2022094:	3805883a 	mov	r2,r7
 2022098:	e0bfff0d 	sth	r2,-4(fp)
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_chksum(pcb, p, dst_ip, dst_port, 0, 0);
 202209c:	e0bfff0b 	ldhu	r2,-4(fp)
 20220a0:	d8000115 	stw	zero,4(sp)
 20220a4:	d8000015 	stw	zero,0(sp)
 20220a8:	100f883a 	mov	r7,r2
 20220ac:	e1bffe17 	ldw	r6,-8(fp)
 20220b0:	e17ffd17 	ldw	r5,-12(fp)
 20220b4:	e13ffc17 	ldw	r4,-16(fp)
 20220b8:	20220d00 	call	20220d0 <udp_sendto_chksum>
}
 20220bc:	e037883a 	mov	sp,fp
 20220c0:	dfc00117 	ldw	ra,4(sp)
 20220c4:	df000017 	ldw	fp,0(sp)
 20220c8:	dec00204 	addi	sp,sp,8
 20220cc:	f800283a 	ret

020220d0 <udp_sendto_chksum>:

/** Same as udp_sendto(), but with checksum */
err_t
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
 20220d0:	defff404 	addi	sp,sp,-48
 20220d4:	dfc00b15 	stw	ra,44(sp)
 20220d8:	df000a15 	stw	fp,40(sp)
 20220dc:	df000a04 	addi	fp,sp,40
 20220e0:	e13ffa15 	stw	r4,-24(fp)
 20220e4:	e17ffb15 	stw	r5,-20(fp)
 20220e8:	e1bffc15 	stw	r6,-16(fp)
 20220ec:	3809883a 	mov	r4,r7
 20220f0:	e0c00217 	ldw	r3,8(fp)
 20220f4:	e0800317 	ldw	r2,12(fp)
 20220f8:	e13ffd0d 	sth	r4,-12(fp)
 20220fc:	e0fffe05 	stb	r3,-8(fp)
 2022100:	e0bfff0d 	sth	r2,-4(fp)

  /* find the outgoing network interface for this packet */
#if LWIP_IGMP
  netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
#else
  netif = ip_route(&(pcb->local_ip), dst_ip);
 2022104:	e0bffa17 	ldw	r2,-24(fp)
 2022108:	e17ffc17 	ldw	r5,-16(fp)
 202210c:	1009883a 	mov	r4,r2
 2022110:	2031bc80 	call	2031bc8 <ip_route>
 2022114:	e0bff915 	stw	r2,-28(fp)
#endif /* LWIP_IGMP */

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 2022118:	e0bff917 	ldw	r2,-28(fp)
 202211c:	1000091e 	bne	r2,zero,2022144 <udp_sendto_chksum+0x74>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
    UDP_STATS_INC(udp.rterr);
 2022120:	008085f4 	movhi	r2,535
 2022124:	10a86704 	addi	r2,r2,-24164
 2022128:	10804317 	ldw	r2,268(r2)
 202212c:	10c00044 	addi	r3,r2,1
 2022130:	008085f4 	movhi	r2,535
 2022134:	10a86704 	addi	r2,r2,-24164
 2022138:	10c04315 	stw	r3,268(r2)
    return ERR_RTE;
 202213c:	00bfff04 	movi	r2,-4
 2022140:	00000c06 	br	2022174 <udp_sendto_chksum+0xa4>
  }
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
 2022144:	e13ffd0b 	ldhu	r4,-12(fp)
 2022148:	e0bffe03 	ldbu	r2,-8(fp)
 202214c:	e0ffff0b 	ldhu	r3,-4(fp)
 2022150:	d8c00215 	stw	r3,8(sp)
 2022154:	d8800115 	stw	r2,4(sp)
 2022158:	e0bff917 	ldw	r2,-28(fp)
 202215c:	d8800015 	stw	r2,0(sp)
 2022160:	200f883a 	mov	r7,r4
 2022164:	e1bffc17 	ldw	r6,-16(fp)
 2022168:	e17ffb17 	ldw	r5,-20(fp)
 202216c:	e13ffa17 	ldw	r4,-24(fp)
 2022170:	20221e80 	call	20221e8 <udp_sendto_if_chksum>
#else /* LWIP_CHECKSUM_ON_COPY */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 2022174:	e037883a 	mov	sp,fp
 2022178:	dfc00117 	ldw	ra,4(sp)
 202217c:	df000017 	ldw	fp,0(sp)
 2022180:	dec00204 	addi	sp,sp,8
 2022184:	f800283a 	ret

02022188 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 2022188:	defff704 	addi	sp,sp,-36
 202218c:	dfc00815 	stw	ra,32(sp)
 2022190:	df000715 	stw	fp,28(sp)
 2022194:	df000704 	addi	fp,sp,28
 2022198:	e13ffc15 	stw	r4,-16(fp)
 202219c:	e17ffd15 	stw	r5,-12(fp)
 20221a0:	e1bffe15 	stw	r6,-8(fp)
 20221a4:	3805883a 	mov	r2,r7
 20221a8:	e0bfff0d 	sth	r2,-4(fp)
#if LWIP_CHECKSUM_ON_COPY
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, 0, 0);
 20221ac:	e0ffff0b 	ldhu	r3,-4(fp)
 20221b0:	d8000215 	stw	zero,8(sp)
 20221b4:	d8000115 	stw	zero,4(sp)
 20221b8:	e0800217 	ldw	r2,8(fp)
 20221bc:	d8800015 	stw	r2,0(sp)
 20221c0:	180f883a 	mov	r7,r3
 20221c4:	e1bffe17 	ldw	r6,-8(fp)
 20221c8:	e17ffd17 	ldw	r5,-12(fp)
 20221cc:	e13ffc17 	ldw	r4,-16(fp)
 20221d0:	20221e80 	call	20221e8 <udp_sendto_if_chksum>
}
 20221d4:	e037883a 	mov	sp,fp
 20221d8:	dfc00117 	ldw	ra,4(sp)
 20221dc:	df000017 	ldw	fp,0(sp)
 20221e0:	dec00204 	addi	sp,sp,8
 20221e4:	f800283a 	ret

020221e8 <udp_sendto_if_chksum>:
/** Same as udp_sendto_if(), but with checksum */
err_t
udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
                     u16_t dst_port, struct netif *netif, u8_t have_chksum,
                     u16_t chksum)
{
 20221e8:	defff004 	addi	sp,sp,-64
 20221ec:	dfc00f15 	stw	ra,60(sp)
 20221f0:	df000e15 	stw	fp,56(sp)
 20221f4:	df000e04 	addi	fp,sp,56
 20221f8:	e13ffa15 	stw	r4,-24(fp)
 20221fc:	e17ffb15 	stw	r5,-20(fp)
 2022200:	e1bffc15 	stw	r6,-16(fp)
 2022204:	3809883a 	mov	r4,r7
 2022208:	e0c00317 	ldw	r3,12(fp)
 202220c:	e0800417 	ldw	r2,16(fp)
 2022210:	e13ffd0d 	sth	r4,-12(fp)
 2022214:	e0fffe05 	stb	r3,-8(fp)
 2022218:	e0bfff0d 	sth	r2,-4(fp)
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 202221c:	e0bffa17 	ldw	r2,-24(fp)
 2022220:	1080048b 	ldhu	r2,18(r2)
 2022224:	10bfffcc 	andi	r2,r2,65535
 2022228:	10000d1e 	bne	r2,zero,2022260 <udp_sendto_if_chksum+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 202222c:	e0fffa17 	ldw	r3,-24(fp)
 2022230:	e0bffa17 	ldw	r2,-24(fp)
 2022234:	1080048b 	ldhu	r2,18(r2)
 2022238:	10bfffcc 	andi	r2,r2,65535
 202223c:	100d883a 	mov	r6,r2
 2022240:	180b883a 	mov	r5,r3
 2022244:	e13ffa17 	ldw	r4,-24(fp)
 2022248:	202263c0 	call	202263c <udp_bind>
 202224c:	e0bff785 	stb	r2,-34(fp)
    if (err != ERR_OK) {
 2022250:	e0bff787 	ldb	r2,-34(fp)
 2022254:	10000226 	beq	r2,zero,2022260 <udp_sendto_if_chksum+0x78>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 2022258:	e0bff783 	ldbu	r2,-34(fp)
 202225c:	0000f206 	br	2022628 <udp_sendto_if_chksum+0x440>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 2022260:	01400204 	movi	r5,8
 2022264:	e13ffb17 	ldw	r4,-20(fp)
 2022268:	201a8700 	call	201a870 <pbuf_header>
 202226c:	10803fcc 	andi	r2,r2,255
 2022270:	10001126 	beq	r2,zero,20222b8 <udp_sendto_if_chksum+0xd0>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 2022274:	000d883a 	mov	r6,zero
 2022278:	01400204 	movi	r5,8
 202227c:	01000044 	movi	r4,1
 2022280:	201a2640 	call	201a264 <pbuf_alloc>
 2022284:	e0bff615 	stw	r2,-40(fp)
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 2022288:	e0bff617 	ldw	r2,-40(fp)
 202228c:	1000021e 	bne	r2,zero,2022298 <udp_sendto_if_chksum+0xb0>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 2022290:	00bfffc4 	movi	r2,-1
 2022294:	0000e406 	br	2022628 <udp_sendto_if_chksum+0x440>
    }
    if (p->tot_len != 0) {
 2022298:	e0bffb17 	ldw	r2,-20(fp)
 202229c:	1080020b 	ldhu	r2,8(r2)
 20222a0:	10bfffcc 	andi	r2,r2,65535
 20222a4:	10000626 	beq	r2,zero,20222c0 <udp_sendto_if_chksum+0xd8>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 20222a8:	e17ffb17 	ldw	r5,-20(fp)
 20222ac:	e13ff617 	ldw	r4,-40(fp)
 20222b0:	201ace80 	call	201ace8 <pbuf_chain>
 20222b4:	00000206 	br	20222c0 <udp_sendto_if_chksum+0xd8>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 20222b8:	e0bffb17 	ldw	r2,-20(fp)
 20222bc:	e0bff615 	stw	r2,-40(fp)
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 20222c0:	e0bff617 	ldw	r2,-40(fp)
 20222c4:	10800117 	ldw	r2,4(r2)
 20222c8:	e0bff815 	stw	r2,-32(fp)
  udphdr->src = htons(pcb->local_port);
 20222cc:	e0bffa17 	ldw	r2,-24(fp)
 20222d0:	1080048b 	ldhu	r2,18(r2)
 20222d4:	10bfffcc 	andi	r2,r2,65535
 20222d8:	1004d23a 	srli	r2,r2,8
 20222dc:	1007883a 	mov	r3,r2
 20222e0:	e0bffa17 	ldw	r2,-24(fp)
 20222e4:	1080048b 	ldhu	r2,18(r2)
 20222e8:	10bfffcc 	andi	r2,r2,65535
 20222ec:	1004923a 	slli	r2,r2,8
 20222f0:	1884b03a 	or	r2,r3,r2
 20222f4:	100d883a 	mov	r6,r2
 20222f8:	e0bff817 	ldw	r2,-32(fp)
 20222fc:	30ffffcc 	andi	r3,r6,65535
 2022300:	19403fcc 	andi	r5,r3,255
 2022304:	10c00003 	ldbu	r3,0(r2)
 2022308:	1806703a 	and	r3,r3,zero
 202230c:	1809883a 	mov	r4,r3
 2022310:	2807883a 	mov	r3,r5
 2022314:	20c6b03a 	or	r3,r4,r3
 2022318:	10c00005 	stb	r3,0(r2)
 202231c:	30ffffcc 	andi	r3,r6,65535
 2022320:	1806d23a 	srli	r3,r3,8
 2022324:	197fffcc 	andi	r5,r3,65535
 2022328:	10c00043 	ldbu	r3,1(r2)
 202232c:	1806703a 	and	r3,r3,zero
 2022330:	1809883a 	mov	r4,r3
 2022334:	2807883a 	mov	r3,r5
 2022338:	20c6b03a 	or	r3,r4,r3
 202233c:	10c00045 	stb	r3,1(r2)
  udphdr->dest = htons(dst_port);
 2022340:	e0bffd0b 	ldhu	r2,-12(fp)
 2022344:	1004d23a 	srli	r2,r2,8
 2022348:	1007883a 	mov	r3,r2
 202234c:	e0bffd0b 	ldhu	r2,-12(fp)
 2022350:	1004923a 	slli	r2,r2,8
 2022354:	1884b03a 	or	r2,r3,r2
 2022358:	100d883a 	mov	r6,r2
 202235c:	e0bff817 	ldw	r2,-32(fp)
 2022360:	30ffffcc 	andi	r3,r6,65535
 2022364:	19403fcc 	andi	r5,r3,255
 2022368:	10c00083 	ldbu	r3,2(r2)
 202236c:	1806703a 	and	r3,r3,zero
 2022370:	1809883a 	mov	r4,r3
 2022374:	2807883a 	mov	r3,r5
 2022378:	20c6b03a 	or	r3,r4,r3
 202237c:	10c00085 	stb	r3,2(r2)
 2022380:	30ffffcc 	andi	r3,r6,65535
 2022384:	1806d23a 	srli	r3,r3,8
 2022388:	197fffcc 	andi	r5,r3,65535
 202238c:	10c000c3 	ldbu	r3,3(r2)
 2022390:	1806703a 	and	r3,r3,zero
 2022394:	1809883a 	mov	r4,r3
 2022398:	2807883a 	mov	r3,r5
 202239c:	20c6b03a 	or	r3,r4,r3
 20223a0:	10c000c5 	stb	r3,3(r2)
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
 20223a4:	e0bff817 	ldw	r2,-32(fp)
 20223a8:	10c00183 	ldbu	r3,6(r2)
 20223ac:	1806703a 	and	r3,r3,zero
 20223b0:	10c00185 	stb	r3,6(r2)
 20223b4:	10c001c3 	ldbu	r3,7(r2)
 20223b8:	1806703a 	and	r3,r3,zero
 20223bc:	10c001c5 	stb	r3,7(r2)
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
 20223c0:	e0bffa17 	ldw	r2,-24(fp)
 20223c4:	10000326 	beq	r2,zero,20223d4 <udp_sendto_if_chksum+0x1ec>
 20223c8:	e0bffa17 	ldw	r2,-24(fp)
 20223cc:	10800017 	ldw	r2,0(r2)
 20223d0:	1000041e 	bne	r2,zero,20223e4 <udp_sendto_if_chksum+0x1fc>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 20223d4:	e0800217 	ldw	r2,8(fp)
 20223d8:	10800104 	addi	r2,r2,4
 20223dc:	e0bff515 	stw	r2,-44(fp)
 20223e0:	00000f06 	br	2022420 <udp_sendto_if_chksum+0x238>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
 20223e4:	e0bffa17 	ldw	r2,-24(fp)
 20223e8:	10c00017 	ldw	r3,0(r2)
 20223ec:	e0800217 	ldw	r2,8(fp)
 20223f0:	10800117 	ldw	r2,4(r2)
 20223f4:	18800826 	beq	r3,r2,2022418 <udp_sendto_if_chksum+0x230>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
 20223f8:	e0fff617 	ldw	r3,-40(fp)
 20223fc:	e0bffb17 	ldw	r2,-20(fp)
 2022400:	18800326 	beq	r3,r2,2022410 <udp_sendto_if_chksum+0x228>
        /* free the header pbuf */
        pbuf_free(q);
 2022404:	e13ff617 	ldw	r4,-40(fp)
 2022408:	201aa200 	call	201aa20 <pbuf_free>
        q = NULL;
 202240c:	e03ff615 	stw	zero,-40(fp)
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
 2022410:	00bffe84 	movi	r2,-6
 2022414:	00008406 	br	2022628 <udp_sendto_if_chksum+0x440>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
 2022418:	e0bffa17 	ldw	r2,-24(fp)
 202241c:	e0bff515 	stw	r2,-44(fp)
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 2022420:	e0bff617 	ldw	r2,-40(fp)
 2022424:	1080020b 	ldhu	r2,8(r2)
 2022428:	10bfffcc 	andi	r2,r2,65535
 202242c:	1004d23a 	srli	r2,r2,8
 2022430:	1007883a 	mov	r3,r2
 2022434:	e0bff617 	ldw	r2,-40(fp)
 2022438:	1080020b 	ldhu	r2,8(r2)
 202243c:	10bfffcc 	andi	r2,r2,65535
 2022440:	1004923a 	slli	r2,r2,8
 2022444:	1884b03a 	or	r2,r3,r2
 2022448:	100d883a 	mov	r6,r2
 202244c:	e0bff817 	ldw	r2,-32(fp)
 2022450:	30ffffcc 	andi	r3,r6,65535
 2022454:	19403fcc 	andi	r5,r3,255
 2022458:	10c00103 	ldbu	r3,4(r2)
 202245c:	1806703a 	and	r3,r3,zero
 2022460:	1809883a 	mov	r4,r3
 2022464:	2807883a 	mov	r3,r5
 2022468:	20c6b03a 	or	r3,r4,r3
 202246c:	10c00105 	stb	r3,4(r2)
 2022470:	30ffffcc 	andi	r3,r6,65535
 2022474:	1806d23a 	srli	r3,r3,8
 2022478:	197fffcc 	andi	r5,r3,65535
 202247c:	10c00143 	ldbu	r3,5(r2)
 2022480:	1806703a 	and	r3,r3,zero
 2022484:	1809883a 	mov	r4,r3
 2022488:	2807883a 	mov	r3,r5
 202248c:	20c6b03a 	or	r3,r4,r3
 2022490:	10c00145 	stb	r3,5(r2)
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 2022494:	e0bffa17 	ldw	r2,-24(fp)
 2022498:	10800403 	ldbu	r2,16(r2)
 202249c:	10803fcc 	andi	r2,r2,255
 20224a0:	1080004c 	andi	r2,r2,1
 20224a4:	10003b1e 	bne	r2,zero,2022594 <udp_sendto_if_chksum+0x3ac>
      u16_t udpchksum;
#if LWIP_CHECKSUM_ON_COPY
      if (have_chksum) {
 20224a8:	e0bffe03 	ldbu	r2,-8(fp)
 20224ac:	10001926 	beq	r2,zero,2022514 <udp_sendto_if_chksum+0x32c>
        u32_t acc;
        udpchksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip, IP_PROTO_UDP,
          q->tot_len, UDP_HLEN);
 20224b0:	e0bff617 	ldw	r2,-40(fp)
 20224b4:	1080020b 	ldhu	r2,8(r2)
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
      u16_t udpchksum;
#if LWIP_CHECKSUM_ON_COPY
      if (have_chksum) {
        u32_t acc;
        udpchksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip, IP_PROTO_UDP,
 20224b8:	10bfffcc 	andi	r2,r2,65535
 20224bc:	00c00204 	movi	r3,8
 20224c0:	d8c00115 	stw	r3,4(sp)
 20224c4:	d8800015 	stw	r2,0(sp)
 20224c8:	01c00444 	movi	r7,17
 20224cc:	e1bffc17 	ldw	r6,-16(fp)
 20224d0:	e17ff517 	ldw	r5,-44(fp)
 20224d4:	e13ff617 	ldw	r4,-40(fp)
 20224d8:	20317e80 	call	20317e8 <inet_chksum_pseudo_partial>
 20224dc:	e0bff70d 	sth	r2,-36(fp)
          q->tot_len, UDP_HLEN);
        acc = udpchksum + (u16_t)~(chksum);
 20224e0:	e0fff70b 	ldhu	r3,-36(fp)
 20224e4:	e0bfff0b 	ldhu	r2,-4(fp)
 20224e8:	0084303a 	nor	r2,zero,r2
 20224ec:	10bfffcc 	andi	r2,r2,65535
 20224f0:	1885883a 	add	r2,r3,r2
 20224f4:	e0bff915 	stw	r2,-28(fp)
        udpchksum = FOLD_U32T(acc);
 20224f8:	e0bff917 	ldw	r2,-28(fp)
 20224fc:	1004d43a 	srli	r2,r2,16
 2022500:	1007883a 	mov	r3,r2
 2022504:	e0bff917 	ldw	r2,-28(fp)
 2022508:	1885883a 	add	r2,r3,r2
 202250c:	e0bff70d 	sth	r2,-36(fp)
 2022510:	00000a06 	br	202253c <udp_sendto_if_chksum+0x354>
      } else
#endif /* LWIP_CHECKSUM_ON_COPY */
      {
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
 2022514:	e0bff617 	ldw	r2,-40(fp)
 2022518:	1080020b 	ldhu	r2,8(r2)
 202251c:	10bfffcc 	andi	r2,r2,65535
 2022520:	d8800015 	stw	r2,0(sp)
 2022524:	01c00444 	movi	r7,17
 2022528:	e1bffc17 	ldw	r6,-16(fp)
 202252c:	e17ff517 	ldw	r5,-44(fp)
 2022530:	e13ff617 	ldw	r4,-40(fp)
 2022534:	20315e80 	call	20315e8 <inet_chksum_pseudo>
 2022538:	e0bff70d 	sth	r2,-36(fp)
      }

      /* chksum zero must become 0xffff, as zero means 'no checksum' */
      if (udpchksum == 0x0000) {
 202253c:	e0bff70b 	ldhu	r2,-36(fp)
 2022540:	1000021e 	bne	r2,zero,202254c <udp_sendto_if_chksum+0x364>
        udpchksum = 0xffff;
 2022544:	00bfffc4 	movi	r2,-1
 2022548:	e0bff70d 	sth	r2,-36(fp)
      }
      udphdr->chksum = udpchksum;
 202254c:	e0bff817 	ldw	r2,-32(fp)
 2022550:	e0fff70b 	ldhu	r3,-36(fp)
 2022554:	19403fcc 	andi	r5,r3,255
 2022558:	10c00183 	ldbu	r3,6(r2)
 202255c:	1806703a 	and	r3,r3,zero
 2022560:	1809883a 	mov	r4,r3
 2022564:	2807883a 	mov	r3,r5
 2022568:	20c6b03a 	or	r3,r4,r3
 202256c:	10c00185 	stb	r3,6(r2)
 2022570:	e0fff70b 	ldhu	r3,-36(fp)
 2022574:	1806d23a 	srli	r3,r3,8
 2022578:	197fffcc 	andi	r5,r3,65535
 202257c:	10c001c3 	ldbu	r3,7(r2)
 2022580:	1806703a 	and	r3,r3,zero
 2022584:	1809883a 	mov	r4,r3
 2022588:	2807883a 	mov	r3,r5
 202258c:	20c6b03a 	or	r3,r4,r3
 2022590:	10c001c5 	stb	r3,7(r2)
    }
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
 2022594:	e0bffa17 	ldw	r2,-24(fp)
 2022598:	10c002c4 	addi	r3,r2,11
 202259c:	e0800217 	ldw	r2,8(fp)
 20225a0:	10c01015 	stw	r3,64(r2)
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 20225a4:	e0bffa17 	ldw	r2,-24(fp)
 20225a8:	10800283 	ldbu	r2,10(r2)
 20225ac:	11003fcc 	andi	r4,r2,255
 20225b0:	e0bffa17 	ldw	r2,-24(fp)
 20225b4:	10800243 	ldbu	r2,9(r2)
 20225b8:	10803fcc 	andi	r2,r2,255
 20225bc:	e0c00217 	ldw	r3,8(fp)
 20225c0:	d8c00215 	stw	r3,8(sp)
 20225c4:	00c00444 	movi	r3,17
 20225c8:	d8c00115 	stw	r3,4(sp)
 20225cc:	d8800015 	stw	r2,0(sp)
 20225d0:	200f883a 	mov	r7,r4
 20225d4:	e1bffc17 	ldw	r6,-16(fp)
 20225d8:	e17ff517 	ldw	r5,-44(fp)
 20225dc:	e13ff617 	ldw	r4,-40(fp)
 20225e0:	20321f40 	call	20321f4 <ip_output_if>
 20225e4:	e0bff785 	stb	r2,-34(fp)
    NETIF_SET_HWADDRHINT(netif, NULL);
 20225e8:	e0800217 	ldw	r2,8(fp)
 20225ec:	10001015 	stw	zero,64(r2)
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 20225f0:	e0fff617 	ldw	r3,-40(fp)
 20225f4:	e0bffb17 	ldw	r2,-20(fp)
 20225f8:	18800326 	beq	r3,r2,2022608 <udp_sendto_if_chksum+0x420>
    /* free the header pbuf */
    pbuf_free(q);
 20225fc:	e13ff617 	ldw	r4,-40(fp)
 2022600:	201aa200 	call	201aa20 <pbuf_free>
    q = NULL;
 2022604:	e03ff615 	stw	zero,-40(fp)
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 2022608:	008085f4 	movhi	r2,535
 202260c:	10a86704 	addi	r2,r2,-24164
 2022610:	10803c17 	ldw	r2,240(r2)
 2022614:	10c00044 	addi	r3,r2,1
 2022618:	008085f4 	movhi	r2,535
 202261c:	10a86704 	addi	r2,r2,-24164
 2022620:	10c03c15 	stw	r3,240(r2)
  return err;
 2022624:	e0bff783 	ldbu	r2,-34(fp)
}
 2022628:	e037883a 	mov	sp,fp
 202262c:	dfc00117 	ldw	ra,4(sp)
 2022630:	df000017 	ldw	fp,0(sp)
 2022634:	dec00204 	addi	sp,sp,8
 2022638:	f800283a 	ret

0202263c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 202263c:	defff904 	addi	sp,sp,-28
 2022640:	dfc00615 	stw	ra,24(sp)
 2022644:	df000515 	stw	fp,20(sp)
 2022648:	df000504 	addi	fp,sp,20
 202264c:	e13ffd15 	stw	r4,-12(fp)
 2022650:	e17ffe15 	stw	r5,-8(fp)
 2022654:	3005883a 	mov	r2,r6
 2022658:	e0bfff0d 	sth	r2,-4(fp)

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 202265c:	e03ffc05 	stb	zero,-16(fp)
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 2022660:	d0a7ff17 	ldw	r2,-24580(gp)
 2022664:	e0bffb15 	stw	r2,-20(fp)
 2022668:	00002906 	br	2022710 <udp_bind+0xd4>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 202266c:	e0fffd17 	ldw	r3,-12(fp)
 2022670:	e0bffb17 	ldw	r2,-20(fp)
 2022674:	1880031e 	bne	r3,r2,2022684 <udp_bind+0x48>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
 2022678:	00800044 	movi	r2,1
 202267c:	e0bffc05 	stb	r2,-16(fp)
 2022680:	00002006 	br	2022704 <udp_bind+0xc8>

    /* By default, we don't allow to bind to a port that any other udp
       PCB is alread bound to, unless *all* PCBs with that port have tha
       REUSEADDR flag set. */
#if SO_REUSE
    else if (!ip_get_option(pcb, SOF_REUSEADDR) &&
 2022684:	e0bffd17 	ldw	r2,-12(fp)
 2022688:	10800203 	ldbu	r2,8(r2)
 202268c:	10803fcc 	andi	r2,r2,255
 2022690:	1080010c 	andi	r2,r2,4
 2022694:	10001b1e 	bne	r2,zero,2022704 <udp_bind+0xc8>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
 2022698:	e0bffb17 	ldw	r2,-20(fp)
 202269c:	10800203 	ldbu	r2,8(r2)
 20226a0:	10803fcc 	andi	r2,r2,255
 20226a4:	1080010c 	andi	r2,r2,4

    /* By default, we don't allow to bind to a port that any other udp
       PCB is alread bound to, unless *all* PCBs with that port have tha
       REUSEADDR flag set. */
#if SO_REUSE
    else if (!ip_get_option(pcb, SOF_REUSEADDR) &&
 20226a8:	1000161e 	bne	r2,zero,2022704 <udp_bind+0xc8>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 20226ac:	e0bffb17 	ldw	r2,-20(fp)
 20226b0:	1080048b 	ldhu	r2,18(r2)
 20226b4:	10ffffcc 	andi	r3,r2,65535
 20226b8:	e0bfff0b 	ldhu	r2,-4(fp)
 20226bc:	1880111e 	bne	r3,r2,2022704 <udp_bind+0xc8>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 20226c0:	e0bffb17 	ldw	r2,-20(fp)
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 20226c4:	10000d26 	beq	r2,zero,20226fc <udp_bind+0xc0>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 20226c8:	e0bffb17 	ldw	r2,-20(fp)
 20226cc:	10800017 	ldw	r2,0(r2)
 20226d0:	10000a26 	beq	r2,zero,20226fc <udp_bind+0xc0>
 20226d4:	e0bffe17 	ldw	r2,-8(fp)
 20226d8:	10000826 	beq	r2,zero,20226fc <udp_bind+0xc0>
           ip_addr_isany(ipaddr) ||
 20226dc:	e0bffe17 	ldw	r2,-8(fp)
 20226e0:	10800017 	ldw	r2,0(r2)
 20226e4:	10000526 	beq	r2,zero,20226fc <udp_bind+0xc0>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
 20226e8:	e0bffb17 	ldw	r2,-20(fp)
 20226ec:	10c00017 	ldw	r3,0(r2)
 20226f0:	e0bffe17 	ldw	r2,-8(fp)
 20226f4:	10800017 	ldw	r2,0(r2)
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
           ip_addr_isany(ipaddr) ||
 20226f8:	1880021e 	bne	r3,r2,2022704 <udp_bind+0xc8>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
 20226fc:	00bffe04 	movi	r2,-8
 2022700:	00002006 	br	2022784 <udp_bind+0x148>
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 2022704:	e0bffb17 	ldw	r2,-20(fp)
 2022708:	10800317 	ldw	r2,12(r2)
 202270c:	e0bffb15 	stw	r2,-20(fp)
 2022710:	e0bffb17 	ldw	r2,-20(fp)
 2022714:	103fd51e 	bne	r2,zero,202266c <__alt_mem_mem_0+0xfd00266c>
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
 2022718:	e0bffe17 	ldw	r2,-8(fp)
 202271c:	10000326 	beq	r2,zero,202272c <udp_bind+0xf0>
 2022720:	e0bffe17 	ldw	r2,-8(fp)
 2022724:	10800017 	ldw	r2,0(r2)
 2022728:	00000106 	br	2022730 <udp_bind+0xf4>
 202272c:	0005883a 	mov	r2,zero
 2022730:	e0fffd17 	ldw	r3,-12(fp)
 2022734:	18800015 	stw	r2,0(r3)

  /* no port specified? */
  if (port == 0) {
 2022738:	e0bfff0b 	ldhu	r2,-4(fp)
 202273c:	1000061e 	bne	r2,zero,2022758 <udp_bind+0x11c>
    port = udp_new_port();
 2022740:	20219940 	call	2021994 <udp_new_port>
 2022744:	e0bfff0d 	sth	r2,-4(fp)
    if (port == 0) {
 2022748:	e0bfff0b 	ldhu	r2,-4(fp)
 202274c:	1000021e 	bne	r2,zero,2022758 <udp_bind+0x11c>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 2022750:	00bffe04 	movi	r2,-8
 2022754:	00000b06 	br	2022784 <udp_bind+0x148>
    }
  }
  pcb->local_port = port;
 2022758:	e0bffd17 	ldw	r2,-12(fp)
 202275c:	e0ffff0b 	ldhu	r3,-4(fp)
 2022760:	10c0048d 	sth	r3,18(r2)
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 2022764:	e0bffc03 	ldbu	r2,-16(fp)
 2022768:	1000051e 	bne	r2,zero,2022780 <udp_bind+0x144>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 202276c:	d0e7ff17 	ldw	r3,-24580(gp)
 2022770:	e0bffd17 	ldw	r2,-12(fp)
 2022774:	10c00315 	stw	r3,12(r2)
    udp_pcbs = pcb;
 2022778:	e0bffd17 	ldw	r2,-12(fp)
 202277c:	d0a7ff15 	stw	r2,-24580(gp)
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
 2022780:	0005883a 	mov	r2,zero
}
 2022784:	e037883a 	mov	sp,fp
 2022788:	dfc00117 	ldw	ra,4(sp)
 202278c:	df000017 	ldw	fp,0(sp)
 2022790:	dec00204 	addi	sp,sp,8
 2022794:	f800283a 	ret

02022798 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 2022798:	defff904 	addi	sp,sp,-28
 202279c:	dfc00615 	stw	ra,24(sp)
 20227a0:	df000515 	stw	fp,20(sp)
 20227a4:	df000504 	addi	fp,sp,20
 20227a8:	e13ffd15 	stw	r4,-12(fp)
 20227ac:	e17ffe15 	stw	r5,-8(fp)
 20227b0:	3005883a 	mov	r2,r6
 20227b4:	e0bfff0d 	sth	r2,-4(fp)
  struct udp_pcb *ipcb;

  if (pcb->local_port == 0) {
 20227b8:	e0bffd17 	ldw	r2,-12(fp)
 20227bc:	1080048b 	ldhu	r2,18(r2)
 20227c0:	10bfffcc 	andi	r2,r2,65535
 20227c4:	10000d1e 	bne	r2,zero,20227fc <udp_connect+0x64>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 20227c8:	e0fffd17 	ldw	r3,-12(fp)
 20227cc:	e0bffd17 	ldw	r2,-12(fp)
 20227d0:	1080048b 	ldhu	r2,18(r2)
 20227d4:	10bfffcc 	andi	r2,r2,65535
 20227d8:	100d883a 	mov	r6,r2
 20227dc:	180b883a 	mov	r5,r3
 20227e0:	e13ffd17 	ldw	r4,-12(fp)
 20227e4:	202263c0 	call	202263c <udp_bind>
 20227e8:	e0bffc05 	stb	r2,-16(fp)
    if (err != ERR_OK) {
 20227ec:	e0bffc07 	ldb	r2,-16(fp)
 20227f0:	10000226 	beq	r2,zero,20227fc <udp_connect+0x64>
      return err;
 20227f4:	e0bffc03 	ldbu	r2,-16(fp)
 20227f8:	00002406 	br	202288c <udp_connect+0xf4>
    }
  }

  ip_addr_set(&pcb->remote_ip, ipaddr);
 20227fc:	e0bffe17 	ldw	r2,-8(fp)
 2022800:	10000326 	beq	r2,zero,2022810 <udp_connect+0x78>
 2022804:	e0bffe17 	ldw	r2,-8(fp)
 2022808:	10800017 	ldw	r2,0(r2)
 202280c:	00000106 	br	2022814 <udp_connect+0x7c>
 2022810:	0005883a 	mov	r2,zero
 2022814:	e0fffd17 	ldw	r3,-12(fp)
 2022818:	18800115 	stw	r2,4(r3)
  pcb->remote_port = port;
 202281c:	e0bffd17 	ldw	r2,-12(fp)
 2022820:	e0ffff0b 	ldhu	r3,-4(fp)
 2022824:	10c0050d 	sth	r3,20(r2)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 2022828:	e0bffd17 	ldw	r2,-12(fp)
 202282c:	10800403 	ldbu	r2,16(r2)
 2022830:	10800114 	ori	r2,r2,4
 2022834:	1007883a 	mov	r3,r2
 2022838:	e0bffd17 	ldw	r2,-12(fp)
 202283c:	10c00405 	stb	r3,16(r2)
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 2022840:	d0a7ff17 	ldw	r2,-24580(gp)
 2022844:	e0bffb15 	stw	r2,-20(fp)
 2022848:	00000806 	br	202286c <udp_connect+0xd4>
    if (pcb == ipcb) {
 202284c:	e0fffd17 	ldw	r3,-12(fp)
 2022850:	e0bffb17 	ldw	r2,-20(fp)
 2022854:	1880021e 	bne	r3,r2,2022860 <udp_connect+0xc8>
      /* already on the list, just return */
      return ERR_OK;
 2022858:	0005883a 	mov	r2,zero
 202285c:	00000b06 	br	202288c <udp_connect+0xf4>
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 2022860:	e0bffb17 	ldw	r2,-20(fp)
 2022864:	10800317 	ldw	r2,12(r2)
 2022868:	e0bffb15 	stw	r2,-20(fp)
 202286c:	e0bffb17 	ldw	r2,-20(fp)
 2022870:	103ff61e 	bne	r2,zero,202284c <__alt_mem_mem_0+0xfd00284c>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 2022874:	d0e7ff17 	ldw	r3,-24580(gp)
 2022878:	e0bffd17 	ldw	r2,-12(fp)
 202287c:	10c00315 	stw	r3,12(r2)
  udp_pcbs = pcb;
 2022880:	e0bffd17 	ldw	r2,-12(fp)
 2022884:	d0a7ff15 	stw	r2,-24580(gp)
  return ERR_OK;
 2022888:	0005883a 	mov	r2,zero
}
 202288c:	e037883a 	mov	sp,fp
 2022890:	dfc00117 	ldw	ra,4(sp)
 2022894:	df000017 	ldw	fp,0(sp)
 2022898:	dec00204 	addi	sp,sp,8
 202289c:	f800283a 	ret

020228a0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 20228a0:	defffe04 	addi	sp,sp,-8
 20228a4:	df000115 	stw	fp,4(sp)
 20228a8:	df000104 	addi	fp,sp,4
 20228ac:	e13fff15 	stw	r4,-4(fp)
  /* reset remote address association */
  ip_addr_set_any(&pcb->remote_ip);
 20228b0:	e0bfff17 	ldw	r2,-4(fp)
 20228b4:	10000115 	stw	zero,4(r2)
  pcb->remote_port = 0;
 20228b8:	e0bfff17 	ldw	r2,-4(fp)
 20228bc:	1000050d 	sth	zero,20(r2)
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 20228c0:	e0bfff17 	ldw	r2,-4(fp)
 20228c4:	10c00403 	ldbu	r3,16(r2)
 20228c8:	00bffec4 	movi	r2,-5
 20228cc:	1884703a 	and	r2,r3,r2
 20228d0:	1007883a 	mov	r3,r2
 20228d4:	e0bfff17 	ldw	r2,-4(fp)
 20228d8:	10c00405 	stb	r3,16(r2)
}
 20228dc:	0001883a 	nop
 20228e0:	e037883a 	mov	sp,fp
 20228e4:	df000017 	ldw	fp,0(sp)
 20228e8:	dec00104 	addi	sp,sp,4
 20228ec:	f800283a 	ret

020228f0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 20228f0:	defffc04 	addi	sp,sp,-16
 20228f4:	df000315 	stw	fp,12(sp)
 20228f8:	df000304 	addi	fp,sp,12
 20228fc:	e13ffd15 	stw	r4,-12(fp)
 2022900:	e17ffe15 	stw	r5,-8(fp)
 2022904:	e1bfff15 	stw	r6,-4(fp)
  /* remember recv() callback and user data */
  pcb->recv = recv;
 2022908:	e0bffd17 	ldw	r2,-12(fp)
 202290c:	e0fffe17 	ldw	r3,-8(fp)
 2022910:	10c00615 	stw	r3,24(r2)
  pcb->recv_arg = recv_arg;
 2022914:	e0bffd17 	ldw	r2,-12(fp)
 2022918:	e0ffff17 	ldw	r3,-4(fp)
 202291c:	10c00715 	stw	r3,28(r2)
}
 2022920:	0001883a 	nop
 2022924:	e037883a 	mov	sp,fp
 2022928:	df000017 	ldw	fp,0(sp)
 202292c:	dec00104 	addi	sp,sp,4
 2022930:	f800283a 	ret

02022934 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 2022934:	defffc04 	addi	sp,sp,-16
 2022938:	dfc00315 	stw	ra,12(sp)
 202293c:	df000215 	stw	fp,8(sp)
 2022940:	df000204 	addi	fp,sp,8
 2022944:	e13fff15 	stw	r4,-4(fp)
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 2022948:	d0e7ff17 	ldw	r3,-24580(gp)
 202294c:	e0bfff17 	ldw	r2,-4(fp)
 2022950:	1880041e 	bne	r3,r2,2022964 <udp_remove+0x30>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 2022954:	d0a7ff17 	ldw	r2,-24580(gp)
 2022958:	10800317 	ldw	r2,12(r2)
 202295c:	d0a7ff15 	stw	r2,-24580(gp)
 2022960:	00001306 	br	20229b0 <udp_remove+0x7c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 2022964:	d0a7ff17 	ldw	r2,-24580(gp)
 2022968:	e0bffe15 	stw	r2,-8(fp)
 202296c:	00000e06 	br	20229a8 <udp_remove+0x74>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 2022970:	e0bffe17 	ldw	r2,-8(fp)
 2022974:	10800317 	ldw	r2,12(r2)
 2022978:	10000826 	beq	r2,zero,202299c <udp_remove+0x68>
 202297c:	e0bffe17 	ldw	r2,-8(fp)
 2022980:	10c00317 	ldw	r3,12(r2)
 2022984:	e0bfff17 	ldw	r2,-4(fp)
 2022988:	1880041e 	bne	r3,r2,202299c <udp_remove+0x68>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 202298c:	e0bfff17 	ldw	r2,-4(fp)
 2022990:	10c00317 	ldw	r3,12(r2)
 2022994:	e0bffe17 	ldw	r2,-8(fp)
 2022998:	10c00315 	stw	r3,12(r2)
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 202299c:	e0bffe17 	ldw	r2,-8(fp)
 20229a0:	10800317 	ldw	r2,12(r2)
 20229a4:	e0bffe15 	stw	r2,-8(fp)
 20229a8:	e0bffe17 	ldw	r2,-8(fp)
 20229ac:	103ff01e 	bne	r2,zero,2022970 <__alt_mem_mem_0+0xfd002970>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 20229b0:	e17fff17 	ldw	r5,-4(fp)
 20229b4:	01000044 	movi	r4,1
 20229b8:	20344ac0 	call	20344ac <memp_free>
}
 20229bc:	0001883a 	nop
 20229c0:	e037883a 	mov	sp,fp
 20229c4:	dfc00117 	ldw	ra,4(sp)
 20229c8:	df000017 	ldw	fp,0(sp)
 20229cc:	dec00204 	addi	sp,sp,8
 20229d0:	f800283a 	ret

020229d4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 20229d4:	defffd04 	addi	sp,sp,-12
 20229d8:	dfc00215 	stw	ra,8(sp)
 20229dc:	df000115 	stw	fp,4(sp)
 20229e0:	df000104 	addi	fp,sp,4
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 20229e4:	01000044 	movi	r4,1
 20229e8:	20342e00 	call	20342e0 <memp_malloc>
 20229ec:	e0bfff15 	stw	r2,-4(fp)
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 20229f0:	e0bfff17 	ldw	r2,-4(fp)
 20229f4:	10000726 	beq	r2,zero,2022a14 <udp_new+0x40>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 20229f8:	01800804 	movi	r6,32
 20229fc:	000b883a 	mov	r5,zero
 2022a00:	e13fff17 	ldw	r4,-4(fp)
 2022a04:	2005fa00 	call	2005fa0 <memset>
    pcb->ttl = UDP_TTL;
 2022a08:	e0bfff17 	ldw	r2,-4(fp)
 2022a0c:	00c01004 	movi	r3,64
 2022a10:	10c00285 	stb	r3,10(r2)
  }
  return pcb;
 2022a14:	e0bfff17 	ldw	r2,-4(fp)
}
 2022a18:	e037883a 	mov	sp,fp
 2022a1c:	dfc00117 	ldw	ra,4(sp)
 2022a20:	df000017 	ldw	fp,0(sp)
 2022a24:	dec00204 	addi	sp,sp,8
 2022a28:	f800283a 	ret

02022a2c <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 2022a2c:	defffc04 	addi	sp,sp,-16
 2022a30:	dfc00315 	stw	ra,12(sp)
 2022a34:	df000215 	stw	fp,8(sp)
 2022a38:	df000204 	addi	fp,sp,8
 2022a3c:	e13fff15 	stw	r4,-4(fp)
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  while (q) {
 2022a40:	00000c06 	br	2022a74 <free_etharp_q+0x48>
    r = q;
 2022a44:	e0bfff17 	ldw	r2,-4(fp)
 2022a48:	e0bffe15 	stw	r2,-8(fp)
    q = q->next;
 2022a4c:	e0bfff17 	ldw	r2,-4(fp)
 2022a50:	10800017 	ldw	r2,0(r2)
 2022a54:	e0bfff15 	stw	r2,-4(fp)
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
 2022a58:	e0bffe17 	ldw	r2,-8(fp)
 2022a5c:	10800117 	ldw	r2,4(r2)
 2022a60:	1009883a 	mov	r4,r2
 2022a64:	201aa200 	call	201aa20 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 2022a68:	e17ffe17 	ldw	r5,-8(fp)
 2022a6c:	010002c4 	movi	r4,11
 2022a70:	20344ac0 	call	20344ac <memp_free>
free_etharp_q(struct etharp_q_entry *q)
{
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  while (q) {
 2022a74:	e0bfff17 	ldw	r2,-4(fp)
 2022a78:	103ff21e 	bne	r2,zero,2022a44 <__alt_mem_mem_0+0xfd002a44>
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
    pbuf_free(r->p);
    memp_free(MEMP_ARP_QUEUE, r);
  }
}
 2022a7c:	0001883a 	nop
 2022a80:	e037883a 	mov	sp,fp
 2022a84:	dfc00117 	ldw	ra,4(sp)
 2022a88:	df000017 	ldw	fp,0(sp)
 2022a8c:	dec00204 	addi	sp,sp,8
 2022a90:	f800283a 	ret

02022a94 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 2022a94:	defffd04 	addi	sp,sp,-12
 2022a98:	dfc00215 	stw	ra,8(sp)
 2022a9c:	df000115 	stw	fp,4(sp)
 2022aa0:	df000104 	addi	fp,sp,4
 2022aa4:	e13fff15 	stw	r4,-4(fp)
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 2022aa8:	00808134 	movhi	r2,516
 2022aac:	109e5204 	addi	r2,r2,31048
 2022ab0:	e0ffff17 	ldw	r3,-4(fp)
 2022ab4:	18c00524 	muli	r3,r3,20
 2022ab8:	10c5883a 	add	r2,r2,r3
 2022abc:	10800017 	ldw	r2,0(r2)
 2022ac0:	10000e26 	beq	r2,zero,2022afc <etharp_free_entry+0x68>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 2022ac4:	00808134 	movhi	r2,516
 2022ac8:	109e5204 	addi	r2,r2,31048
 2022acc:	e0ffff17 	ldw	r3,-4(fp)
 2022ad0:	18c00524 	muli	r3,r3,20
 2022ad4:	10c5883a 	add	r2,r2,r3
 2022ad8:	10800017 	ldw	r2,0(r2)
 2022adc:	1009883a 	mov	r4,r2
 2022ae0:	2022a2c0 	call	2022a2c <free_etharp_q>
    arp_table[i].q = NULL;
 2022ae4:	00808134 	movhi	r2,516
 2022ae8:	109e5204 	addi	r2,r2,31048
 2022aec:	e0ffff17 	ldw	r3,-4(fp)
 2022af0:	18c00524 	muli	r3,r3,20
 2022af4:	10c5883a 	add	r2,r2,r3
 2022af8:	10000015 	stw	zero,0(r2)
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 2022afc:	00808134 	movhi	r2,516
 2022b00:	109e5204 	addi	r2,r2,31048
 2022b04:	e0ffff17 	ldw	r3,-4(fp)
 2022b08:	18c00524 	muli	r3,r3,20
 2022b0c:	10c5883a 	add	r2,r2,r3
 2022b10:	10800484 	addi	r2,r2,18
 2022b14:	10000005 	stb	zero,0(r2)
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 2022b18:	0001883a 	nop
 2022b1c:	e037883a 	mov	sp,fp
 2022b20:	dfc00117 	ldw	ra,4(sp)
 2022b24:	df000017 	ldw	fp,0(sp)
 2022b28:	dec00204 	addi	sp,sp,8
 2022b2c:	f800283a 	ret

02022b30 <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 2022b30:	defffd04 	addi	sp,sp,-12
 2022b34:	dfc00215 	stw	ra,8(sp)
 2022b38:	df000115 	stw	fp,4(sp)
 2022b3c:	df000104 	addi	fp,sp,4
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 2022b40:	e03fff05 	stb	zero,-4(fp)
 2022b44:	00005006 	br	2022c88 <etharp_tmr+0x158>
    u8_t state = arp_table[i].state;
 2022b48:	e0ffff03 	ldbu	r3,-4(fp)
 2022b4c:	00808134 	movhi	r2,516
 2022b50:	109e5204 	addi	r2,r2,31048
 2022b54:	18c00524 	muli	r3,r3,20
 2022b58:	10c5883a 	add	r2,r2,r3
 2022b5c:	10800484 	addi	r2,r2,18
 2022b60:	10800003 	ldbu	r2,0(r2)
 2022b64:	e0bfff45 	stb	r2,-3(fp)
    if (state != ETHARP_STATE_EMPTY
 2022b68:	e0bfff43 	ldbu	r2,-3(fp)
 2022b6c:	10004326 	beq	r2,zero,2022c7c <etharp_tmr+0x14c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 2022b70:	e0ffff03 	ldbu	r3,-4(fp)
 2022b74:	00808134 	movhi	r2,516
 2022b78:	109e5204 	addi	r2,r2,31048
 2022b7c:	19000524 	muli	r4,r3,20
 2022b80:	1105883a 	add	r2,r2,r4
 2022b84:	108004c4 	addi	r2,r2,19
 2022b88:	10800003 	ldbu	r2,0(r2)
 2022b8c:	10800044 	addi	r2,r2,1
 2022b90:	1009883a 	mov	r4,r2
 2022b94:	00808134 	movhi	r2,516
 2022b98:	109e5204 	addi	r2,r2,31048
 2022b9c:	18c00524 	muli	r3,r3,20
 2022ba0:	10c5883a 	add	r2,r2,r3
 2022ba4:	108004c4 	addi	r2,r2,19
 2022ba8:	11000005 	stb	r4,0(r2)
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 2022bac:	e0ffff03 	ldbu	r3,-4(fp)
 2022bb0:	00808134 	movhi	r2,516
 2022bb4:	109e5204 	addi	r2,r2,31048
 2022bb8:	18c00524 	muli	r3,r3,20
 2022bbc:	10c5883a 	add	r2,r2,r3
 2022bc0:	108004c4 	addi	r2,r2,19
 2022bc4:	10800003 	ldbu	r2,0(r2)
 2022bc8:	10803fcc 	andi	r2,r2,255
 2022bcc:	10803c28 	cmpgeui	r2,r2,240
 2022bd0:	1000141e 	bne	r2,zero,2022c24 <etharp_tmr+0xf4>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 2022bd4:	e0ffff03 	ldbu	r3,-4(fp)
 2022bd8:	00808134 	movhi	r2,516
 2022bdc:	109e5204 	addi	r2,r2,31048
 2022be0:	18c00524 	muli	r3,r3,20
 2022be4:	10c5883a 	add	r2,r2,r3
 2022be8:	10800484 	addi	r2,r2,18
 2022bec:	10800003 	ldbu	r2,0(r2)
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 2022bf0:	10803fcc 	andi	r2,r2,255
 2022bf4:	10800058 	cmpnei	r2,r2,1
 2022bf8:	10000e1e 	bne	r2,zero,2022c34 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 2022bfc:	e0ffff03 	ldbu	r3,-4(fp)
 2022c00:	00808134 	movhi	r2,516
 2022c04:	109e5204 	addi	r2,r2,31048
 2022c08:	18c00524 	muli	r3,r3,20
 2022c0c:	10c5883a 	add	r2,r2,r3
 2022c10:	108004c4 	addi	r2,r2,19
 2022c14:	10800003 	ldbu	r2,0(r2)
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 2022c18:	10803fcc 	andi	r2,r2,255
 2022c1c:	108000b0 	cmpltui	r2,r2,2
 2022c20:	1000041e 	bne	r2,zero,2022c34 <etharp_tmr+0x104>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 2022c24:	e0bfff03 	ldbu	r2,-4(fp)
 2022c28:	1009883a 	mov	r4,r2
 2022c2c:	2022a940 	call	2022a94 <etharp_free_entry>
 2022c30:	00001206 	br	2022c7c <etharp_tmr+0x14c>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
 2022c34:	e0ffff03 	ldbu	r3,-4(fp)
 2022c38:	00808134 	movhi	r2,516
 2022c3c:	109e5204 	addi	r2,r2,31048
 2022c40:	18c00524 	muli	r3,r3,20
 2022c44:	10c5883a 	add	r2,r2,r3
 2022c48:	10800484 	addi	r2,r2,18
 2022c4c:	10800003 	ldbu	r2,0(r2)
 2022c50:	10803fcc 	andi	r2,r2,255
 2022c54:	108000d8 	cmpnei	r2,r2,3
 2022c58:	1000081e 	bne	r2,zero,2022c7c <etharp_tmr+0x14c>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 2022c5c:	e0ffff03 	ldbu	r3,-4(fp)
 2022c60:	00808134 	movhi	r2,516
 2022c64:	109e5204 	addi	r2,r2,31048
 2022c68:	18c00524 	muli	r3,r3,20
 2022c6c:	10c5883a 	add	r2,r2,r3
 2022c70:	10800484 	addi	r2,r2,18
 2022c74:	00c00084 	movi	r3,2
 2022c78:	10c00005 	stb	r3,0(r2)
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 2022c7c:	e0bfff03 	ldbu	r2,-4(fp)
 2022c80:	10800044 	addi	r2,r2,1
 2022c84:	e0bfff05 	stb	r2,-4(fp)
 2022c88:	e0bfff03 	ldbu	r2,-4(fp)
 2022c8c:	10800670 	cmpltui	r2,r2,25
 2022c90:	103fad1e 	bne	r2,zero,2022b48 <__alt_mem_mem_0+0xfd002b48>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
 2022c94:	0001883a 	nop
 2022c98:	e037883a 	mov	sp,fp
 2022c9c:	dfc00117 	ldw	ra,4(sp)
 2022ca0:	df000017 	ldw	fp,0(sp)
 2022ca4:	dec00204 	addi	sp,sp,8
 2022ca8:	f800283a 	ret

02022cac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
 2022cac:	defff904 	addi	sp,sp,-28
 2022cb0:	dfc00615 	stw	ra,24(sp)
 2022cb4:	df000515 	stw	fp,20(sp)
 2022cb8:	df000504 	addi	fp,sp,20
 2022cbc:	e13ffe15 	stw	r4,-8(fp)
 2022cc0:	2805883a 	mov	r2,r5
 2022cc4:	e0bfff05 	stb	r2,-4(fp)
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 2022cc8:	00800644 	movi	r2,25
 2022ccc:	e0bffb05 	stb	r2,-20(fp)
 2022cd0:	00800644 	movi	r2,25
 2022cd4:	e0bffb45 	stb	r2,-19(fp)
  s8_t empty = ARP_TABLE_SIZE;
 2022cd8:	00800644 	movi	r2,25
 2022cdc:	e0bffb85 	stb	r2,-18(fp)
  u8_t i = 0, age_pending = 0, age_stable = 0;
 2022ce0:	e03ffbc5 	stb	zero,-17(fp)
 2022ce4:	e03ffc05 	stb	zero,-16(fp)
 2022ce8:	e03ffc45 	stb	zero,-15(fp)
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 2022cec:	00800644 	movi	r2,25
 2022cf0:	e0bffc85 	stb	r2,-14(fp)
  /* its age */
  u8_t age_queue = 0;
 2022cf4:	e03ffcc5 	stb	zero,-13(fp)
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 2022cf8:	e03ffbc5 	stb	zero,-17(fp)
 2022cfc:	00006e06 	br	2022eb8 <etharp_find_entry+0x20c>
    u8_t state = arp_table[i].state;
 2022d00:	e0fffbc3 	ldbu	r3,-17(fp)
 2022d04:	00808134 	movhi	r2,516
 2022d08:	109e5204 	addi	r2,r2,31048
 2022d0c:	18c00524 	muli	r3,r3,20
 2022d10:	10c5883a 	add	r2,r2,r3
 2022d14:	10800484 	addi	r2,r2,18
 2022d18:	10800003 	ldbu	r2,0(r2)
 2022d1c:	e0bffd05 	stb	r2,-12(fp)
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 2022d20:	e0bffb87 	ldb	r2,-18(fp)
 2022d24:	10800658 	cmpnei	r2,r2,25
 2022d28:	1000051e 	bne	r2,zero,2022d40 <etharp_find_entry+0x94>
 2022d2c:	e0bffd03 	ldbu	r2,-12(fp)
 2022d30:	1000031e 	bne	r2,zero,2022d40 <etharp_find_entry+0x94>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 2022d34:	e0bffbc3 	ldbu	r2,-17(fp)
 2022d38:	e0bffb85 	stb	r2,-18(fp)
 2022d3c:	00005b06 	br	2022eac <etharp_find_entry+0x200>
    } else if (state != ETHARP_STATE_EMPTY) {
 2022d40:	e0bffd03 	ldbu	r2,-12(fp)
 2022d44:	10005926 	beq	r2,zero,2022eac <etharp_find_entry+0x200>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 2022d48:	e0bffe17 	ldw	r2,-8(fp)
 2022d4c:	10000c26 	beq	r2,zero,2022d80 <etharp_find_entry+0xd4>
 2022d50:	e0bffe17 	ldw	r2,-8(fp)
 2022d54:	10c00017 	ldw	r3,0(r2)
 2022d58:	e13ffbc3 	ldbu	r4,-17(fp)
 2022d5c:	00808134 	movhi	r2,516
 2022d60:	109e5204 	addi	r2,r2,31048
 2022d64:	21000524 	muli	r4,r4,20
 2022d68:	1105883a 	add	r2,r2,r4
 2022d6c:	10800104 	addi	r2,r2,4
 2022d70:	10800017 	ldw	r2,0(r2)
 2022d74:	1880021e 	bne	r3,r2,2022d80 <etharp_find_entry+0xd4>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 2022d78:	e0bffbc3 	ldbu	r2,-17(fp)
 2022d7c:	00008c06 	br	2022fb0 <etharp_find_entry+0x304>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 2022d80:	e0bffd03 	ldbu	r2,-12(fp)
 2022d84:	10800058 	cmpnei	r2,r2,1
 2022d88:	1000311e 	bne	r2,zero,2022e50 <etharp_find_entry+0x1a4>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 2022d8c:	e0fffbc3 	ldbu	r3,-17(fp)
 2022d90:	00808134 	movhi	r2,516
 2022d94:	109e5204 	addi	r2,r2,31048
 2022d98:	18c00524 	muli	r3,r3,20
 2022d9c:	10c5883a 	add	r2,r2,r3
 2022da0:	10800017 	ldw	r2,0(r2)
 2022da4:	10001526 	beq	r2,zero,2022dfc <etharp_find_entry+0x150>
          if (arp_table[i].ctime >= age_queue) {
 2022da8:	e0fffbc3 	ldbu	r3,-17(fp)
 2022dac:	00808134 	movhi	r2,516
 2022db0:	109e5204 	addi	r2,r2,31048
 2022db4:	18c00524 	muli	r3,r3,20
 2022db8:	10c5883a 	add	r2,r2,r3
 2022dbc:	108004c4 	addi	r2,r2,19
 2022dc0:	10800003 	ldbu	r2,0(r2)
 2022dc4:	10c03fcc 	andi	r3,r2,255
 2022dc8:	e0bffcc3 	ldbu	r2,-13(fp)
 2022dcc:	18803736 	bltu	r3,r2,2022eac <etharp_find_entry+0x200>
            old_queue = i;
 2022dd0:	e0bffbc3 	ldbu	r2,-17(fp)
 2022dd4:	e0bffc85 	stb	r2,-14(fp)
            age_queue = arp_table[i].ctime;
 2022dd8:	e0fffbc3 	ldbu	r3,-17(fp)
 2022ddc:	00808134 	movhi	r2,516
 2022de0:	109e5204 	addi	r2,r2,31048
 2022de4:	18c00524 	muli	r3,r3,20
 2022de8:	10c5883a 	add	r2,r2,r3
 2022dec:	108004c4 	addi	r2,r2,19
 2022df0:	10800003 	ldbu	r2,0(r2)
 2022df4:	e0bffcc5 	stb	r2,-13(fp)
 2022df8:	00002c06 	br	2022eac <etharp_find_entry+0x200>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 2022dfc:	e0fffbc3 	ldbu	r3,-17(fp)
 2022e00:	00808134 	movhi	r2,516
 2022e04:	109e5204 	addi	r2,r2,31048
 2022e08:	18c00524 	muli	r3,r3,20
 2022e0c:	10c5883a 	add	r2,r2,r3
 2022e10:	108004c4 	addi	r2,r2,19
 2022e14:	10800003 	ldbu	r2,0(r2)
 2022e18:	10c03fcc 	andi	r3,r2,255
 2022e1c:	e0bffc03 	ldbu	r2,-16(fp)
 2022e20:	18802236 	bltu	r3,r2,2022eac <etharp_find_entry+0x200>
            old_pending = i;
 2022e24:	e0bffbc3 	ldbu	r2,-17(fp)
 2022e28:	e0bffb05 	stb	r2,-20(fp)
            age_pending = arp_table[i].ctime;
 2022e2c:	e0fffbc3 	ldbu	r3,-17(fp)
 2022e30:	00808134 	movhi	r2,516
 2022e34:	109e5204 	addi	r2,r2,31048
 2022e38:	18c00524 	muli	r3,r3,20
 2022e3c:	10c5883a 	add	r2,r2,r3
 2022e40:	108004c4 	addi	r2,r2,19
 2022e44:	10800003 	ldbu	r2,0(r2)
 2022e48:	e0bffc05 	stb	r2,-16(fp)
 2022e4c:	00001706 	br	2022eac <etharp_find_entry+0x200>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 2022e50:	e0bffd03 	ldbu	r2,-12(fp)
 2022e54:	108000b0 	cmpltui	r2,r2,2
 2022e58:	1000141e 	bne	r2,zero,2022eac <etharp_find_entry+0x200>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 2022e5c:	e0fffbc3 	ldbu	r3,-17(fp)
 2022e60:	00808134 	movhi	r2,516
 2022e64:	109e5204 	addi	r2,r2,31048
 2022e68:	18c00524 	muli	r3,r3,20
 2022e6c:	10c5883a 	add	r2,r2,r3
 2022e70:	108004c4 	addi	r2,r2,19
 2022e74:	10800003 	ldbu	r2,0(r2)
 2022e78:	10c03fcc 	andi	r3,r2,255
 2022e7c:	e0bffc43 	ldbu	r2,-15(fp)
 2022e80:	18800a36 	bltu	r3,r2,2022eac <etharp_find_entry+0x200>
            old_stable = i;
 2022e84:	e0bffbc3 	ldbu	r2,-17(fp)
 2022e88:	e0bffb45 	stb	r2,-19(fp)
            age_stable = arp_table[i].ctime;
 2022e8c:	e0fffbc3 	ldbu	r3,-17(fp)
 2022e90:	00808134 	movhi	r2,516
 2022e94:	109e5204 	addi	r2,r2,31048
 2022e98:	18c00524 	muli	r3,r3,20
 2022e9c:	10c5883a 	add	r2,r2,r3
 2022ea0:	108004c4 	addi	r2,r2,19
 2022ea4:	10800003 	ldbu	r2,0(r2)
 2022ea8:	e0bffc45 	stb	r2,-15(fp)
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 2022eac:	e0bffbc3 	ldbu	r2,-17(fp)
 2022eb0:	10800044 	addi	r2,r2,1
 2022eb4:	e0bffbc5 	stb	r2,-17(fp)
 2022eb8:	e0bffbc3 	ldbu	r2,-17(fp)
 2022ebc:	10800670 	cmpltui	r2,r2,25
 2022ec0:	103f8f1e 	bne	r2,zero,2022d00 <__alt_mem_mem_0+0xfd002d00>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 2022ec4:	e0bfff03 	ldbu	r2,-4(fp)
 2022ec8:	1080008c 	andi	r2,r2,2
 2022ecc:	1000061e 	bne	r2,zero,2022ee8 <etharp_find_entry+0x23c>
 2022ed0:	e0bffb87 	ldb	r2,-18(fp)
 2022ed4:	10800658 	cmpnei	r2,r2,25
 2022ed8:	1000051e 	bne	r2,zero,2022ef0 <etharp_find_entry+0x244>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 2022edc:	e0bfff03 	ldbu	r2,-4(fp)
 2022ee0:	1080004c 	andi	r2,r2,1
 2022ee4:	1000021e 	bne	r2,zero,2022ef0 <etharp_find_entry+0x244>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 2022ee8:	00bfffc4 	movi	r2,-1
 2022eec:	00003006 	br	2022fb0 <etharp_find_entry+0x304>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 2022ef0:	e0bffb87 	ldb	r2,-18(fp)
 2022ef4:	10800648 	cmpgei	r2,r2,25
 2022ef8:	1000031e 	bne	r2,zero,2022f08 <etharp_find_entry+0x25c>
    i = empty;
 2022efc:	e0bffb83 	ldbu	r2,-18(fp)
 2022f00:	e0bffbc5 	stb	r2,-17(fp)
 2022f04:	00001706 	br	2022f64 <etharp_find_entry+0x2b8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 2022f08:	e0bffb47 	ldb	r2,-19(fp)
 2022f0c:	10800648 	cmpgei	r2,r2,25
 2022f10:	1000031e 	bne	r2,zero,2022f20 <etharp_find_entry+0x274>
      /* recycle oldest stable*/
      i = old_stable;
 2022f14:	e0bffb43 	ldbu	r2,-19(fp)
 2022f18:	e0bffbc5 	stb	r2,-17(fp)
 2022f1c:	00000e06 	br	2022f58 <etharp_find_entry+0x2ac>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 2022f20:	e0bffb07 	ldb	r2,-20(fp)
 2022f24:	10800648 	cmpgei	r2,r2,25
 2022f28:	1000031e 	bne	r2,zero,2022f38 <etharp_find_entry+0x28c>
      /* recycle oldest pending */
      i = old_pending;
 2022f2c:	e0bffb03 	ldbu	r2,-20(fp)
 2022f30:	e0bffbc5 	stb	r2,-17(fp)
 2022f34:	00000806 	br	2022f58 <etharp_find_entry+0x2ac>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 2022f38:	e0bffc87 	ldb	r2,-14(fp)
 2022f3c:	10800648 	cmpgei	r2,r2,25
 2022f40:	1000031e 	bne	r2,zero,2022f50 <etharp_find_entry+0x2a4>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 2022f44:	e0bffc83 	ldbu	r2,-14(fp)
 2022f48:	e0bffbc5 	stb	r2,-17(fp)
 2022f4c:	00000206 	br	2022f58 <etharp_find_entry+0x2ac>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 2022f50:	00bfffc4 	movi	r2,-1
 2022f54:	00001606 	br	2022fb0 <etharp_find_entry+0x304>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 2022f58:	e0bffbc3 	ldbu	r2,-17(fp)
 2022f5c:	1009883a 	mov	r4,r2
 2022f60:	2022a940 	call	2022a94 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 2022f64:	e0bffe17 	ldw	r2,-8(fp)
 2022f68:	10000926 	beq	r2,zero,2022f90 <etharp_find_entry+0x2e4>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
 2022f6c:	e13ffbc3 	ldbu	r4,-17(fp)
 2022f70:	e0bffe17 	ldw	r2,-8(fp)
 2022f74:	10c00017 	ldw	r3,0(r2)
 2022f78:	00808134 	movhi	r2,516
 2022f7c:	109e5204 	addi	r2,r2,31048
 2022f80:	21000524 	muli	r4,r4,20
 2022f84:	1105883a 	add	r2,r2,r4
 2022f88:	10800104 	addi	r2,r2,4
 2022f8c:	10c00015 	stw	r3,0(r2)
  }
  arp_table[i].ctime = 0;
 2022f90:	e0fffbc3 	ldbu	r3,-17(fp)
 2022f94:	00808134 	movhi	r2,516
 2022f98:	109e5204 	addi	r2,r2,31048
 2022f9c:	18c00524 	muli	r3,r3,20
 2022fa0:	10c5883a 	add	r2,r2,r3
 2022fa4:	108004c4 	addi	r2,r2,19
 2022fa8:	10000005 	stb	zero,0(r2)
  return (err_t)i;
 2022fac:	e0bffbc3 	ldbu	r2,-17(fp)
}
 2022fb0:	e037883a 	mov	sp,fp
 2022fb4:	dfc00117 	ldw	ra,4(sp)
 2022fb8:	df000017 	ldw	fp,0(sp)
 2022fbc:	dec00204 	addi	sp,sp,8
 2022fc0:	f800283a 	ret

02022fc4 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
 2022fc4:	defff904 	addi	sp,sp,-28
 2022fc8:	dfc00615 	stw	ra,24(sp)
 2022fcc:	df000515 	stw	fp,20(sp)
 2022fd0:	df000504 	addi	fp,sp,20
 2022fd4:	e13ffc15 	stw	r4,-16(fp)
 2022fd8:	e17ffd15 	stw	r5,-12(fp)
 2022fdc:	e1bffe15 	stw	r6,-8(fp)
 2022fe0:	e1ffff15 	stw	r7,-4(fp)
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 2022fe4:	e0bffd17 	ldw	r2,-12(fp)
 2022fe8:	10800117 	ldw	r2,4(r2)
 2022fec:	e0bffb15 	stw	r2,-20(fp)

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
 2022ff0:	e0bffb17 	ldw	r2,-20(fp)
 2022ff4:	10800084 	addi	r2,r2,2
 2022ff8:	01800184 	movi	r6,6
 2022ffc:	e17fff17 	ldw	r5,-4(fp)
 2023000:	1009883a 	mov	r4,r2
 2023004:	2005e580 	call	2005e58 <memcpy>
  ETHADDR16_COPY(&ethhdr->src, src);
 2023008:	e0bffb17 	ldw	r2,-20(fp)
 202300c:	10800204 	addi	r2,r2,8
 2023010:	01800184 	movi	r6,6
 2023014:	e17ffe17 	ldw	r5,-8(fp)
 2023018:	1009883a 	mov	r4,r2
 202301c:	2005e580 	call	2005e58 <memcpy>
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
 2023020:	e0bffb17 	ldw	r2,-20(fp)
 2023024:	10c00383 	ldbu	r3,14(r2)
 2023028:	1806703a 	and	r3,r3,zero
 202302c:	18c00214 	ori	r3,r3,8
 2023030:	10c00385 	stb	r3,14(r2)
 2023034:	10c003c3 	ldbu	r3,15(r2)
 2023038:	1806703a 	and	r3,r3,zero
 202303c:	10c003c5 	stb	r3,15(r2)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 2023040:	e0bffc17 	ldw	r2,-16(fp)
 2023044:	10800617 	ldw	r2,24(r2)
 2023048:	e17ffd17 	ldw	r5,-12(fp)
 202304c:	e13ffc17 	ldw	r4,-16(fp)
 2023050:	103ee83a 	callr	r2
}
 2023054:	e037883a 	mov	sp,fp
 2023058:	dfc00117 	ldw	ra,4(sp)
 202305c:	df000017 	ldw	fp,0(sp)
 2023060:	dec00204 	addi	sp,sp,8
 2023064:	f800283a 	ret

02023068 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 2023068:	defff704 	addi	sp,sp,-36
 202306c:	dfc00815 	stw	ra,32(sp)
 2023070:	df000715 	stw	fp,28(sp)
 2023074:	df000704 	addi	fp,sp,28
 2023078:	e13ffc15 	stw	r4,-16(fp)
 202307c:	e17ffd15 	stw	r5,-12(fp)
 2023080:	e1bffe15 	stw	r6,-8(fp)
 2023084:	3805883a 	mov	r2,r7
 2023088:	e0bfff05 	stb	r2,-4(fp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 202308c:	e0bffd17 	ldw	r2,-12(fp)
 2023090:	10000f26 	beq	r2,zero,20230d0 <etharp_update_arp_entry+0x68>
 2023094:	e0bffd17 	ldw	r2,-12(fp)
 2023098:	10800017 	ldw	r2,0(r2)
 202309c:	10000c26 	beq	r2,zero,20230d0 <etharp_update_arp_entry+0x68>
      ip_addr_isbroadcast(ipaddr, netif) ||
 20230a0:	e0bffd17 	ldw	r2,-12(fp)
 20230a4:	10800017 	ldw	r2,0(r2)
 20230a8:	e17ffc17 	ldw	r5,-16(fp)
 20230ac:	1009883a 	mov	r4,r2
 20230b0:	20187dc0 	call	20187dc <ip4_addr_isbroadcast>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 20230b4:	10803fcc 	andi	r2,r2,255
 20230b8:	1000051e 	bne	r2,zero,20230d0 <etharp_update_arp_entry+0x68>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
 20230bc:	e0bffd17 	ldw	r2,-12(fp)
 20230c0:	10800017 	ldw	r2,0(r2)
 20230c4:	10803c0c 	andi	r2,r2,240
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
 20230c8:	10803818 	cmpnei	r2,r2,224
 20230cc:	1000021e 	bne	r2,zero,20230d8 <etharp_update_arp_entry+0x70>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 20230d0:	00bffc84 	movi	r2,-14
 20230d4:	00005106 	br	202321c <etharp_update_arp_entry+0x1b4>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
 20230d8:	e0bfff03 	ldbu	r2,-4(fp)
 20230dc:	100b883a 	mov	r5,r2
 20230e0:	e13ffd17 	ldw	r4,-12(fp)
 20230e4:	2022cac0 	call	2022cac <etharp_find_entry>
 20230e8:	e0bff905 	stb	r2,-28(fp)
  /* bail out if no entry could be found */
  if (i < 0) {
 20230ec:	e0bff907 	ldb	r2,-28(fp)
 20230f0:	1000020e 	bge	r2,zero,20230fc <etharp_update_arp_entry+0x94>
    return (err_t)i;
 20230f4:	e0bff903 	ldbu	r2,-28(fp)
 20230f8:	00004806 	br	202321c <etharp_update_arp_entry+0x1b4>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 20230fc:	e0fff907 	ldb	r3,-28(fp)
 2023100:	00808134 	movhi	r2,516
 2023104:	109e5204 	addi	r2,r2,31048
 2023108:	18c00524 	muli	r3,r3,20
 202310c:	10c5883a 	add	r2,r2,r3
 2023110:	10800484 	addi	r2,r2,18
 2023114:	00c00084 	movi	r3,2
 2023118:	10c00005 	stb	r3,0(r2)
  }

  /* record network interface */
  arp_table[i].netif = netif;
 202311c:	e0fff907 	ldb	r3,-28(fp)
 2023120:	00808134 	movhi	r2,516
 2023124:	109e5204 	addi	r2,r2,31048
 2023128:	18c00524 	muli	r3,r3,20
 202312c:	10c5883a 	add	r2,r2,r3
 2023130:	10800204 	addi	r2,r2,8
 2023134:	e0fffc17 	ldw	r3,-16(fp)
 2023138:	10c00015 	stw	r3,0(r2)
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 202313c:	e0bff907 	ldb	r2,-28(fp)
 2023140:	10800524 	muli	r2,r2,20
 2023144:	10c00304 	addi	r3,r2,12
 2023148:	00808134 	movhi	r2,516
 202314c:	109e5204 	addi	r2,r2,31048
 2023150:	1885883a 	add	r2,r3,r2
 2023154:	01800184 	movi	r6,6
 2023158:	e17ffe17 	ldw	r5,-8(fp)
 202315c:	1009883a 	mov	r4,r2
 2023160:	2005e580 	call	2005e58 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 2023164:	e0fff907 	ldb	r3,-28(fp)
 2023168:	00808134 	movhi	r2,516
 202316c:	109e5204 	addi	r2,r2,31048
 2023170:	18c00524 	muli	r3,r3,20
 2023174:	10c5883a 	add	r2,r2,r3
 2023178:	108004c4 	addi	r2,r2,19
 202317c:	10000005 	stb	zero,0(r2)
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 2023180:	00001e06 	br	20231fc <etharp_update_arp_entry+0x194>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 2023184:	e0fff907 	ldb	r3,-28(fp)
 2023188:	00808134 	movhi	r2,516
 202318c:	109e5204 	addi	r2,r2,31048
 2023190:	18c00524 	muli	r3,r3,20
 2023194:	10c5883a 	add	r2,r2,r3
 2023198:	10800017 	ldw	r2,0(r2)
 202319c:	e0bffa15 	stw	r2,-24(fp)
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 20231a0:	e13ff907 	ldb	r4,-28(fp)
 20231a4:	e0bffa17 	ldw	r2,-24(fp)
 20231a8:	10c00017 	ldw	r3,0(r2)
 20231ac:	00808134 	movhi	r2,516
 20231b0:	109e5204 	addi	r2,r2,31048
 20231b4:	21000524 	muli	r4,r4,20
 20231b8:	1105883a 	add	r2,r2,r4
 20231bc:	10c00015 	stw	r3,0(r2)
    /* get the packet pointer */
    p = q->p;
 20231c0:	e0bffa17 	ldw	r2,-24(fp)
 20231c4:	10800117 	ldw	r2,4(r2)
 20231c8:	e0bffb15 	stw	r2,-20(fp)
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 20231cc:	e17ffa17 	ldw	r5,-24(fp)
 20231d0:	010002c4 	movi	r4,11
 20231d4:	20344ac0 	call	20344ac <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 20231d8:	e0bffc17 	ldw	r2,-16(fp)
 20231dc:	10800cc4 	addi	r2,r2,51
 20231e0:	e1fffe17 	ldw	r7,-8(fp)
 20231e4:	100d883a 	mov	r6,r2
 20231e8:	e17ffb17 	ldw	r5,-20(fp)
 20231ec:	e13ffc17 	ldw	r4,-16(fp)
 20231f0:	2022fc40 	call	2022fc4 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 20231f4:	e13ffb17 	ldw	r4,-20(fp)
 20231f8:	201aa200 	call	201aa20 <pbuf_free>
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  /* reset time stamp */
  arp_table[i].ctime = 0;
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 20231fc:	e0fff907 	ldb	r3,-28(fp)
 2023200:	00808134 	movhi	r2,516
 2023204:	109e5204 	addi	r2,r2,31048
 2023208:	18c00524 	muli	r3,r3,20
 202320c:	10c5883a 	add	r2,r2,r3
 2023210:	10800017 	ldw	r2,0(r2)
 2023214:	103fdb1e 	bne	r2,zero,2023184 <__alt_mem_mem_0+0xfd003184>
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
    /* free the queued IP packet */
    pbuf_free(p);
  }
  return ERR_OK;
 2023218:	0005883a 	mov	r2,zero
}
 202321c:	e037883a 	mov	sp,fp
 2023220:	dfc00117 	ldw	ra,4(sp)
 2023224:	df000017 	ldw	fp,0(sp)
 2023228:	dec00204 	addi	sp,sp,8
 202322c:	f800283a 	ret

02023230 <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
 2023230:	defffc04 	addi	sp,sp,-16
 2023234:	dfc00315 	stw	ra,12(sp)
 2023238:	df000215 	stw	fp,8(sp)
 202323c:	df000204 	addi	fp,sp,8
 2023240:	e13fff15 	stw	r4,-4(fp)
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 2023244:	e03ffe05 	stb	zero,-8(fp)
 2023248:	00001906 	br	20232b0 <etharp_cleanup_netif+0x80>
    u8_t state = arp_table[i].state;
 202324c:	e0fffe03 	ldbu	r3,-8(fp)
 2023250:	00808134 	movhi	r2,516
 2023254:	109e5204 	addi	r2,r2,31048
 2023258:	18c00524 	muli	r3,r3,20
 202325c:	10c5883a 	add	r2,r2,r3
 2023260:	10800484 	addi	r2,r2,18
 2023264:	10800003 	ldbu	r2,0(r2)
 2023268:	e0bffe45 	stb	r2,-7(fp)
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 202326c:	e0bffe43 	ldbu	r2,-7(fp)
 2023270:	10000c26 	beq	r2,zero,20232a4 <etharp_cleanup_netif+0x74>
 2023274:	e0fffe03 	ldbu	r3,-8(fp)
 2023278:	00808134 	movhi	r2,516
 202327c:	109e5204 	addi	r2,r2,31048
 2023280:	18c00524 	muli	r3,r3,20
 2023284:	10c5883a 	add	r2,r2,r3
 2023288:	10800204 	addi	r2,r2,8
 202328c:	10c00017 	ldw	r3,0(r2)
 2023290:	e0bfff17 	ldw	r2,-4(fp)
 2023294:	1880031e 	bne	r3,r2,20232a4 <etharp_cleanup_netif+0x74>
      etharp_free_entry(i);
 2023298:	e0bffe03 	ldbu	r2,-8(fp)
 202329c:	1009883a 	mov	r4,r2
 20232a0:	2022a940 	call	2022a94 <etharp_free_entry>
 */
void etharp_cleanup_netif(struct netif *netif)
{
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 20232a4:	e0bffe03 	ldbu	r2,-8(fp)
 20232a8:	10800044 	addi	r2,r2,1
 20232ac:	e0bffe05 	stb	r2,-8(fp)
 20232b0:	e0bffe03 	ldbu	r2,-8(fp)
 20232b4:	10800670 	cmpltui	r2,r2,25
 20232b8:	103fe41e 	bne	r2,zero,202324c <__alt_mem_mem_0+0xfd00324c>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
 20232bc:	0001883a 	nop
 20232c0:	e037883a 	mov	sp,fp
 20232c4:	dfc00117 	ldw	ra,4(sp)
 20232c8:	df000017 	ldw	fp,0(sp)
 20232cc:	dec00204 	addi	sp,sp,8
 20232d0:	f800283a 	ret

020232d4 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, ip_addr_t *ipaddr,
         struct eth_addr **eth_ret, ip_addr_t **ip_ret)
{
 20232d4:	defff904 	addi	sp,sp,-28
 20232d8:	dfc00615 	stw	ra,24(sp)
 20232dc:	df000515 	stw	fp,20(sp)
 20232e0:	df000504 	addi	fp,sp,20
 20232e4:	e13ffc15 	stw	r4,-16(fp)
 20232e8:	e17ffd15 	stw	r5,-12(fp)
 20232ec:	e1bffe15 	stw	r6,-8(fp)
 20232f0:	e1ffff15 	stw	r7,-4(fp)
  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY);
 20232f4:	01400084 	movi	r5,2
 20232f8:	e13ffd17 	ldw	r4,-12(fp)
 20232fc:	2022cac0 	call	2022cac <etharp_find_entry>
 2023300:	e0bffb05 	stb	r2,-20(fp)
  if((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
 2023304:	e0bffb07 	ldb	r2,-20(fp)
 2023308:	10001c16 	blt	r2,zero,202337c <etharp_find_addr+0xa8>
 202330c:	e0fffb07 	ldb	r3,-20(fp)
 2023310:	00808134 	movhi	r2,516
 2023314:	109e5204 	addi	r2,r2,31048
 2023318:	18c00524 	muli	r3,r3,20
 202331c:	10c5883a 	add	r2,r2,r3
 2023320:	10800484 	addi	r2,r2,18
 2023324:	10800003 	ldbu	r2,0(r2)
 2023328:	10803fcc 	andi	r2,r2,255
 202332c:	108000b0 	cmpltui	r2,r2,2
 2023330:	1000121e 	bne	r2,zero,202337c <etharp_find_addr+0xa8>
      *eth_ret = &arp_table[i].ethaddr;
 2023334:	e0bffb07 	ldb	r2,-20(fp)
 2023338:	10800524 	muli	r2,r2,20
 202333c:	10c00304 	addi	r3,r2,12
 2023340:	00808134 	movhi	r2,516
 2023344:	109e5204 	addi	r2,r2,31048
 2023348:	1887883a 	add	r3,r3,r2
 202334c:	e0bffe17 	ldw	r2,-8(fp)
 2023350:	10c00015 	stw	r3,0(r2)
      *ip_ret = &arp_table[i].ipaddr;
 2023354:	e0bffb07 	ldb	r2,-20(fp)
 2023358:	10800524 	muli	r2,r2,20
 202335c:	10c00104 	addi	r3,r2,4
 2023360:	00808134 	movhi	r2,516
 2023364:	109e5204 	addi	r2,r2,31048
 2023368:	1887883a 	add	r3,r3,r2
 202336c:	e0bfff17 	ldw	r2,-4(fp)
 2023370:	10c00015 	stw	r3,0(r2)
      return i;
 2023374:	e0bffb03 	ldbu	r2,-20(fp)
 2023378:	00000106 	br	2023380 <etharp_find_addr+0xac>
  }
  return -1;
 202337c:	00bfffc4 	movi	r2,-1
}
 2023380:	e037883a 	mov	sp,fp
 2023384:	dfc00117 	ldw	ra,4(sp)
 2023388:	df000017 	ldw	fp,0(sp)
 202338c:	dec00204 	addi	sp,sp,8
 2023390:	f800283a 	ret

02023394 <etharp_ip_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_ip_input(struct netif *netif, struct pbuf *p)
{
 2023394:	defff904 	addi	sp,sp,-28
 2023398:	dfc00615 	stw	ra,24(sp)
 202339c:	df000515 	stw	fp,20(sp)
 20233a0:	df000504 	addi	fp,sp,20
 20233a4:	e13ffe15 	stw	r4,-8(fp)
 20233a8:	e17fff15 	stw	r5,-4(fp)
  struct eth_hdr *ethhdr;
  struct ip_hdr *iphdr;
  ip_addr_t iphdr_src;
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 20233ac:	e0bffe17 	ldw	r2,-8(fp)
 20233b0:	1000091e 	bne	r2,zero,20233d8 <etharp_ip_input+0x44>
 20233b4:	01c08134 	movhi	r7,516
 20233b8:	39c5c204 	addi	r7,r7,5896
 20233bc:	0180a104 	movi	r6,644
 20233c0:	01408134 	movhi	r5,516
 20233c4:	2945c804 	addi	r5,r5,5920
 20233c8:	01008134 	movhi	r4,516
 20233cc:	2105cc04 	addi	r4,r4,5936
 20233d0:	20009e40 	call	20009e4 <printf>
 20233d4:	003fff06 	br	20233d4 <__alt_mem_mem_0+0xfd0033d4>

  /* Only insert an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  ethhdr = (struct eth_hdr *)p->payload;
 20233d8:	e0bfff17 	ldw	r2,-4(fp)
 20233dc:	10800117 	ldw	r2,4(r2)
 20233e0:	e0bffb15 	stw	r2,-20(fp)
  iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 20233e4:	e0bffb17 	ldw	r2,-20(fp)
 20233e8:	10800404 	addi	r2,r2,16
 20233ec:	e0bffc15 	stw	r2,-16(fp)
  if (ethhdr->type == PP_HTONS(ETHTYPE_VLAN)) {
    iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  ip_addr_copy(iphdr_src, iphdr->src);
 20233f0:	e0bffc17 	ldw	r2,-16(fp)
 20233f4:	10c00303 	ldbu	r3,12(r2)
 20233f8:	11000343 	ldbu	r4,13(r2)
 20233fc:	2008923a 	slli	r4,r4,8
 2023400:	20c6b03a 	or	r3,r4,r3
 2023404:	11000383 	ldbu	r4,14(r2)
 2023408:	2008943a 	slli	r4,r4,16
 202340c:	20c6b03a 	or	r3,r4,r3
 2023410:	108003c3 	ldbu	r2,15(r2)
 2023414:	1004963a 	slli	r2,r2,24
 2023418:	10c4b03a 	or	r2,r2,r3
 202341c:	e0bffd15 	stw	r2,-12(fp)

  /* source is not on the local network? */
  if (!ip_addr_netcmp(&iphdr_src, &(netif->ip_addr), &(netif->netmask))) {
 2023420:	e0fffd17 	ldw	r3,-12(fp)
 2023424:	e0bffe17 	ldw	r2,-8(fp)
 2023428:	10800117 	ldw	r2,4(r2)
 202342c:	1886f03a 	xor	r3,r3,r2
 2023430:	e0bffe17 	ldw	r2,-8(fp)
 2023434:	10800217 	ldw	r2,8(r2)
 2023438:	1884703a 	and	r2,r3,r2
 202343c:	1000091e 	bne	r2,zero,2023464 <etharp_ip_input+0xd0>

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
  /* update the source IP address in the cache, if present */
  /* @todo We could use ETHARP_FLAG_TRY_HARD if we think we are going to talk
   * back soon (for example, if the destination IP address is ours. */
  etharp_update_arp_entry(netif, &iphdr_src, &(ethhdr->src), ETHARP_FLAG_FIND_ONLY);
 2023440:	e0bffb17 	ldw	r2,-20(fp)
 2023444:	10c00204 	addi	r3,r2,8
 2023448:	e0bffd04 	addi	r2,fp,-12
 202344c:	01c00084 	movi	r7,2
 2023450:	180d883a 	mov	r6,r3
 2023454:	100b883a 	mov	r5,r2
 2023458:	e13ffe17 	ldw	r4,-8(fp)
 202345c:	20230680 	call	2023068 <etharp_update_arp_entry>
 2023460:	00000106 	br	2023468 <etharp_ip_input+0xd4>
  ip_addr_copy(iphdr_src, iphdr->src);

  /* source is not on the local network? */
  if (!ip_addr_netcmp(&iphdr_src, &(netif->ip_addr), &(netif->netmask))) {
    /* do nothing */
    return;
 2023464:	0001883a 	nop
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
  /* update the source IP address in the cache, if present */
  /* @todo We could use ETHARP_FLAG_TRY_HARD if we think we are going to talk
   * back soon (for example, if the destination IP address is ours. */
  etharp_update_arp_entry(netif, &iphdr_src, &(ethhdr->src), ETHARP_FLAG_FIND_ONLY);
}
 2023468:	e037883a 	mov	sp,fp
 202346c:	dfc00117 	ldw	ra,4(sp)
 2023470:	df000017 	ldw	fp,0(sp)
 2023474:	dec00204 	addi	sp,sp,8
 2023478:	f800283a 	ret

0202347c <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
 202347c:	defff404 	addi	sp,sp,-48
 2023480:	dfc00b15 	stw	ra,44(sp)
 2023484:	df000a15 	stw	fp,40(sp)
 2023488:	df000a04 	addi	fp,sp,40
 202348c:	e13ffb15 	stw	r4,-20(fp)
 2023490:	e17ffc15 	stw	r5,-16(fp)
 2023494:	e1bffd15 	stw	r6,-12(fp)
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 2023498:	e0bffb17 	ldw	r2,-20(fp)
 202349c:	1000091e 	bne	r2,zero,20234c4 <etharp_arp_input+0x48>
 20234a0:	01c08134 	movhi	r7,516
 20234a4:	39c5c204 	addi	r7,r7,5896
 20234a8:	0180aec4 	movi	r6,699
 20234ac:	01408134 	movhi	r5,516
 20234b0:	2945c804 	addi	r5,r5,5920
 20234b4:	01008134 	movhi	r4,516
 20234b8:	2105cc04 	addi	r4,r4,5936
 20234bc:	20009e40 	call	20009e4 <printf>
 20234c0:	003fff06 	br	20234c0 <__alt_mem_mem_0+0xfd0034c0>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
 20234c4:	e0bffd17 	ldw	r2,-12(fp)
 20234c8:	1080028b 	ldhu	r2,10(r2)
 20234cc:	10bfffcc 	andi	r2,r2,65535
 20234d0:	10800b28 	cmpgeui	r2,r2,44
 20234d4:	1000111e 	bne	r2,zero,202351c <etharp_arp_input+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
 20234d8:	008085f4 	movhi	r2,535
 20234dc:	10a86704 	addi	r2,r2,-24164
 20234e0:	10801117 	ldw	r2,68(r2)
 20234e4:	10c00044 	addi	r3,r2,1
 20234e8:	008085f4 	movhi	r2,535
 20234ec:	10a86704 	addi	r2,r2,-24164
 20234f0:	10c01115 	stw	r3,68(r2)
    ETHARP_STATS_INC(etharp.drop);
 20234f4:	008085f4 	movhi	r2,535
 20234f8:	10a86704 	addi	r2,r2,-24164
 20234fc:	10800f17 	ldw	r2,60(r2)
 2023500:	10c00044 	addi	r3,r2,1
 2023504:	008085f4 	movhi	r2,535
 2023508:	10a86704 	addi	r2,r2,-24164
 202350c:	10c00f15 	stw	r3,60(r2)
    pbuf_free(p);
 2023510:	e13ffd17 	ldw	r4,-12(fp)
 2023514:	201aa200 	call	201aa20 <pbuf_free>
    return;
 2023518:	0000b606 	br	20237f4 <etharp_arp_input+0x378>
  }

  ethhdr = (struct eth_hdr *)p->payload;
 202351c:	e0bffd17 	ldw	r2,-12(fp)
 2023520:	10800117 	ldw	r2,4(r2)
 2023524:	e0bff715 	stw	r2,-36(fp)
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 2023528:	e0bff717 	ldw	r2,-36(fp)
 202352c:	10800404 	addi	r2,r2,16
 2023530:	e0bff815 	stw	r2,-32(fp)
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 2023534:	e0bff817 	ldw	r2,-32(fp)
 2023538:	10c00003 	ldbu	r3,0(r2)
 202353c:	10800043 	ldbu	r2,1(r2)
 2023540:	1004923a 	slli	r2,r2,8
 2023544:	10c4b03a 	or	r2,r2,r3
 2023548:	10bfffcc 	andi	r2,r2,65535
 202354c:	10804018 	cmpnei	r2,r2,256
 2023550:	1000121e 	bne	r2,zero,202359c <etharp_arp_input+0x120>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 2023554:	e0bff817 	ldw	r2,-32(fp)
 2023558:	10800103 	ldbu	r2,4(r2)
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 202355c:	10803fcc 	andi	r2,r2,255
 2023560:	10800198 	cmpnei	r2,r2,6
 2023564:	10000d1e 	bne	r2,zero,202359c <etharp_arp_input+0x120>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 2023568:	e0bff817 	ldw	r2,-32(fp)
 202356c:	10800143 	ldbu	r2,5(r2)
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 2023570:	10803fcc 	andi	r2,r2,255
 2023574:	10800118 	cmpnei	r2,r2,4
 2023578:	1000081e 	bne	r2,zero,202359c <etharp_arp_input+0x120>
      (hdr->protolen != sizeof(ip_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 202357c:	e0bff817 	ldw	r2,-32(fp)
 2023580:	10c00083 	ldbu	r3,2(r2)
 2023584:	108000c3 	ldbu	r2,3(r2)
 2023588:	1004923a 	slli	r2,r2,8
 202358c:	10c4b03a 	or	r2,r2,r3
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 2023590:	10bfffcc 	andi	r2,r2,65535
 2023594:	10800220 	cmpeqi	r2,r2,8
 2023598:	1000111e 	bne	r2,zero,20235e0 <etharp_arp_input+0x164>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 202359c:	008085f4 	movhi	r2,535
 20235a0:	10a86704 	addi	r2,r2,-24164
 20235a4:	10801417 	ldw	r2,80(r2)
 20235a8:	10c00044 	addi	r3,r2,1
 20235ac:	008085f4 	movhi	r2,535
 20235b0:	10a86704 	addi	r2,r2,-24164
 20235b4:	10c01415 	stw	r3,80(r2)
    ETHARP_STATS_INC(etharp.drop);
 20235b8:	008085f4 	movhi	r2,535
 20235bc:	10a86704 	addi	r2,r2,-24164
 20235c0:	10800f17 	ldw	r2,60(r2)
 20235c4:	10c00044 	addi	r3,r2,1
 20235c8:	008085f4 	movhi	r2,535
 20235cc:	10a86704 	addi	r2,r2,-24164
 20235d0:	10c00f15 	stw	r3,60(r2)
    pbuf_free(p);
 20235d4:	e13ffd17 	ldw	r4,-12(fp)
 20235d8:	201aa200 	call	201aa20 <pbuf_free>
    return;
 20235dc:	00008506 	br	20237f4 <etharp_arp_input+0x378>
  }
  ETHARP_STATS_INC(etharp.recv);
 20235e0:	008085f4 	movhi	r2,535
 20235e4:	10a86704 	addi	r2,r2,-24164
 20235e8:	10800d17 	ldw	r2,52(r2)
 20235ec:	10c00044 	addi	r3,r2,1
 20235f0:	008085f4 	movhi	r2,535
 20235f4:	10a86704 	addi	r2,r2,-24164
 20235f8:	10c00d15 	stw	r3,52(r2)
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 20235fc:	e0bff817 	ldw	r2,-32(fp)
 2023600:	10c00384 	addi	r3,r2,14
 2023604:	e0bff904 	addi	r2,fp,-28
 2023608:	01800104 	movi	r6,4
 202360c:	180b883a 	mov	r5,r3
 2023610:	1009883a 	mov	r4,r2
 2023614:	2005e580 	call	2005e58 <memcpy>
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 2023618:	e0bff817 	ldw	r2,-32(fp)
 202361c:	10c00604 	addi	r3,r2,24
 2023620:	e0bffa04 	addi	r2,fp,-24
 2023624:	01800104 	movi	r6,4
 2023628:	180b883a 	mov	r5,r3
 202362c:	1009883a 	mov	r4,r2
 2023630:	2005e580 	call	2005e58 <memcpy>

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
 2023634:	e0bffb17 	ldw	r2,-20(fp)
 2023638:	10800104 	addi	r2,r2,4
 202363c:	10000326 	beq	r2,zero,202364c <etharp_arp_input+0x1d0>
 2023640:	e0bffb17 	ldw	r2,-20(fp)
 2023644:	10800117 	ldw	r2,4(r2)
 2023648:	1000021e 	bne	r2,zero,2023654 <etharp_arp_input+0x1d8>
    for_us = 0;
 202364c:	e03ff605 	stb	zero,-40(fp)
 2023650:	00000506 	br	2023668 <etharp_arp_input+0x1ec>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 2023654:	e0fffa17 	ldw	r3,-24(fp)
 2023658:	e0bffb17 	ldw	r2,-20(fp)
 202365c:	10800117 	ldw	r2,4(r2)
 2023660:	1885003a 	cmpeq	r2,r3,r2
 2023664:	e0bff605 	stb	r2,-40(fp)
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 2023668:	e0bff817 	ldw	r2,-32(fp)
 202366c:	11000204 	addi	r4,r2,8
 2023670:	e0bff603 	ldbu	r2,-40(fp)
 2023674:	10000226 	beq	r2,zero,2023680 <etharp_arp_input+0x204>
 2023678:	00800044 	movi	r2,1
 202367c:	00000106 	br	2023684 <etharp_arp_input+0x208>
 2023680:	00800084 	movi	r2,2
 2023684:	e0fff904 	addi	r3,fp,-28
 2023688:	100f883a 	mov	r7,r2
 202368c:	200d883a 	mov	r6,r4
 2023690:	180b883a 	mov	r5,r3
 2023694:	e13ffb17 	ldw	r4,-20(fp)
 2023698:	20230680 	call	2023068 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 202369c:	e0bff817 	ldw	r2,-32(fp)
 20236a0:	10c00183 	ldbu	r3,6(r2)
 20236a4:	108001c3 	ldbu	r2,7(r2)
 20236a8:	1004923a 	slli	r2,r2,8
 20236ac:	10c4b03a 	or	r2,r2,r3
 20236b0:	10bfffcc 	andi	r2,r2,65535
 20236b4:	10c04020 	cmpeqi	r3,r2,256
 20236b8:	1800031e 	bne	r3,zero,20236c8 <etharp_arp_input+0x24c>
 20236bc:	10808020 	cmpeqi	r2,r2,512
 20236c0:	10003d1e 	bne	r2,zero,20237b8 <etharp_arp_input+0x33c>
 20236c4:	00004106 	br	20237cc <etharp_arp_input+0x350>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 20236c8:	e0bff603 	ldbu	r2,-40(fp)
 20236cc:	10004726 	beq	r2,zero,20237ec <etharp_arp_input+0x370>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 20236d0:	e0bff817 	ldw	r2,-32(fp)
 20236d4:	10c00183 	ldbu	r3,6(r2)
 20236d8:	1806703a 	and	r3,r3,zero
 20236dc:	10c00185 	stb	r3,6(r2)
 20236e0:	10c001c3 	ldbu	r3,7(r2)
 20236e4:	1806703a 	and	r3,r3,zero
 20236e8:	18c00094 	ori	r3,r3,2
 20236ec:	10c001c5 	stb	r3,7(r2)

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 20236f0:	e0bff817 	ldw	r2,-32(fp)
 20236f4:	10c00604 	addi	r3,r2,24
 20236f8:	e0bff817 	ldw	r2,-32(fp)
 20236fc:	10800384 	addi	r2,r2,14
 2023700:	01800104 	movi	r6,4
 2023704:	100b883a 	mov	r5,r2
 2023708:	1809883a 	mov	r4,r3
 202370c:	2005e580 	call	2005e58 <memcpy>
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
 2023710:	e0bff817 	ldw	r2,-32(fp)
 2023714:	10c00384 	addi	r3,r2,14
 2023718:	e0bffb17 	ldw	r2,-20(fp)
 202371c:	10800104 	addi	r2,r2,4
 2023720:	01800104 	movi	r6,4
 2023724:	100b883a 	mov	r5,r2
 2023728:	1809883a 	mov	r4,r3
 202372c:	2005e580 	call	2005e58 <memcpy>
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 2023730:	e0bff817 	ldw	r2,-32(fp)
 2023734:	10c00484 	addi	r3,r2,18
 2023738:	e0bff817 	ldw	r2,-32(fp)
 202373c:	10800204 	addi	r2,r2,8
 2023740:	01800184 	movi	r6,6
 2023744:	100b883a 	mov	r5,r2
 2023748:	1809883a 	mov	r4,r3
 202374c:	2005e580 	call	2005e58 <memcpy>
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 2023750:	e0bff717 	ldw	r2,-36(fp)
 2023754:	10c00084 	addi	r3,r2,2
 2023758:	e0bff817 	ldw	r2,-32(fp)
 202375c:	10800204 	addi	r2,r2,8
 2023760:	01800184 	movi	r6,6
 2023764:	100b883a 	mov	r5,r2
 2023768:	1809883a 	mov	r4,r3
 202376c:	2005e580 	call	2005e58 <memcpy>
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 2023770:	e0bff817 	ldw	r2,-32(fp)
 2023774:	10800204 	addi	r2,r2,8
 2023778:	01800184 	movi	r6,6
 202377c:	e17ffc17 	ldw	r5,-16(fp)
 2023780:	1009883a 	mov	r4,r2
 2023784:	2005e580 	call	2005e58 <memcpy>
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 2023788:	e0bff717 	ldw	r2,-36(fp)
 202378c:	10800204 	addi	r2,r2,8
 2023790:	01800184 	movi	r6,6
 2023794:	e17ffc17 	ldw	r5,-16(fp)
 2023798:	1009883a 	mov	r4,r2
 202379c:	2005e580 	call	2005e58 <memcpy>

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 20237a0:	e0bffb17 	ldw	r2,-20(fp)
 20237a4:	10800617 	ldw	r2,24(r2)
 20237a8:	e17ffd17 	ldw	r5,-12(fp)
 20237ac:	e13ffb17 	ldw	r4,-20(fp)
 20237b0:	103ee83a 	callr	r2
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
 20237b4:	00000d06 	br	20237ec <etharp_arp_input+0x370>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
 20237b8:	e0bff904 	addi	r2,fp,-28
 20237bc:	100b883a 	mov	r5,r2
 20237c0:	e13ffb17 	ldw	r4,-20(fp)
 20237c4:	20164100 	call	2016410 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
 20237c8:	00000806 	br	20237ec <etharp_arp_input+0x370>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 20237cc:	008085f4 	movhi	r2,535
 20237d0:	10a86704 	addi	r2,r2,-24164
 20237d4:	10801617 	ldw	r2,88(r2)
 20237d8:	10c00044 	addi	r3,r2,1
 20237dc:	008085f4 	movhi	r2,535
 20237e0:	10a86704 	addi	r2,r2,-24164
 20237e4:	10c01615 	stw	r3,88(r2)
    break;
 20237e8:	0001883a 	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 20237ec:	e13ffd17 	ldw	r4,-12(fp)
 20237f0:	201aa200 	call	201aa20 <pbuf_free>
}
 20237f4:	e037883a 	mov	sp,fp
 20237f8:	dfc00117 	ldw	ra,4(sp)
 20237fc:	df000017 	ldw	fp,0(sp)
 2023800:	dec00204 	addi	sp,sp,8
 2023804:	f800283a 	ret

02023808 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 2023808:	defffb04 	addi	sp,sp,-20
 202380c:	dfc00415 	stw	ra,16(sp)
 2023810:	df000315 	stw	fp,12(sp)
 2023814:	df000304 	addi	fp,sp,12
 2023818:	e13ffd15 	stw	r4,-12(fp)
 202381c:	e17ffe15 	stw	r5,-8(fp)
 2023820:	3005883a 	mov	r2,r6
 2023824:	e0bfff05 	stb	r2,-4(fp)
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 2023828:	e0ffff03 	ldbu	r3,-4(fp)
 202382c:	00808134 	movhi	r2,516
 2023830:	109e5204 	addi	r2,r2,31048
 2023834:	18c00524 	muli	r3,r3,20
 2023838:	10c5883a 	add	r2,r2,r3
 202383c:	10800484 	addi	r2,r2,18
 2023840:	10800003 	ldbu	r2,0(r2)
 2023844:	10803fcc 	andi	r2,r2,255
 2023848:	10800098 	cmpnei	r2,r2,2
 202384c:	10001f1e 	bne	r2,zero,20238cc <etharp_output_to_arp_index+0xc4>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
 2023850:	e0ffff03 	ldbu	r3,-4(fp)
 2023854:	00808134 	movhi	r2,516
 2023858:	109e5204 	addi	r2,r2,31048
 202385c:	18c00524 	muli	r3,r3,20
 2023860:	10c5883a 	add	r2,r2,r3
 2023864:	108004c4 	addi	r2,r2,19
 2023868:	10800003 	ldbu	r2,0(r2)
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 202386c:	10803fcc 	andi	r2,r2,255
 2023870:	10803930 	cmpltui	r2,r2,228
 2023874:	1000151e 	bne	r2,zero,20238cc <etharp_output_to_arp_index+0xc4>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 2023878:	e0bfff03 	ldbu	r2,-4(fp)
 202387c:	10800524 	muli	r2,r2,20
 2023880:	10c00104 	addi	r3,r2,4
 2023884:	00808134 	movhi	r2,516
 2023888:	109e5204 	addi	r2,r2,31048
 202388c:	1885883a 	add	r2,r3,r2
 2023890:	100b883a 	mov	r5,r2
 2023894:	e13ffd17 	ldw	r4,-12(fp)
 2023898:	20242000 	call	2024200 <etharp_request>
 202389c:	10803fcc 	andi	r2,r2,255
 20238a0:	1080201c 	xori	r2,r2,128
 20238a4:	10bfe004 	addi	r2,r2,-128
 20238a8:	1000081e 	bne	r2,zero,20238cc <etharp_output_to_arp_index+0xc4>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
 20238ac:	e0ffff03 	ldbu	r3,-4(fp)
 20238b0:	00808134 	movhi	r2,516
 20238b4:	109e5204 	addi	r2,r2,31048
 20238b8:	18c00524 	muli	r3,r3,20
 20238bc:	10c5883a 	add	r2,r2,r3
 20238c0:	10800484 	addi	r2,r2,18
 20238c4:	00c000c4 	movi	r3,3
 20238c8:	10c00005 	stb	r3,0(r2)
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 20238cc:	e0bffd17 	ldw	r2,-12(fp)
 20238d0:	11000cc4 	addi	r4,r2,51
    &arp_table[arp_idx].ethaddr);
 20238d4:	e0bfff03 	ldbu	r2,-4(fp)
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 20238d8:	10800524 	muli	r2,r2,20
 20238dc:	10c00304 	addi	r3,r2,12
 20238e0:	00808134 	movhi	r2,516
 20238e4:	109e5204 	addi	r2,r2,31048
 20238e8:	1885883a 	add	r2,r3,r2
 20238ec:	100f883a 	mov	r7,r2
 20238f0:	200d883a 	mov	r6,r4
 20238f4:	e17ffe17 	ldw	r5,-8(fp)
 20238f8:	e13ffd17 	ldw	r4,-12(fp)
 20238fc:	2022fc40 	call	2022fc4 <etharp_send_ip>
    &arp_table[arp_idx].ethaddr);
}
 2023900:	e037883a 	mov	sp,fp
 2023904:	dfc00117 	ldw	ra,4(sp)
 2023908:	df000017 	ldw	fp,0(sp)
 202390c:	dec00204 	addi	sp,sp,8
 2023910:	f800283a 	ret

02023914 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
 2023914:	defff704 	addi	sp,sp,-36
 2023918:	dfc00815 	stw	ra,32(sp)
 202391c:	df000715 	stw	fp,28(sp)
 2023920:	df000704 	addi	fp,sp,28
 2023924:	e13ffd15 	stw	r4,-12(fp)
 2023928:	e17ffe15 	stw	r5,-8(fp)
 202392c:	e1bfff15 	stw	r6,-4(fp)
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
 2023930:	e0bfff17 	ldw	r2,-4(fp)
 2023934:	e0bffa15 	stw	r2,-24(fp)
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 2023938:	01400404 	movi	r5,16
 202393c:	e13ffe17 	ldw	r4,-8(fp)
 2023940:	201a8700 	call	201a870 <pbuf_header>
 2023944:	10803fcc 	andi	r2,r2,255
 2023948:	10000926 	beq	r2,zero,2023970 <etharp_output+0x5c>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
 202394c:	008085f4 	movhi	r2,535
 2023950:	10a86704 	addi	r2,r2,-24164
 2023954:	10800517 	ldw	r2,20(r2)
 2023958:	10c00044 	addi	r3,r2,1
 202395c:	008085f4 	movhi	r2,535
 2023960:	10a86704 	addi	r2,r2,-24164
 2023964:	10c00515 	stw	r3,20(r2)
    return ERR_BUF;
 2023968:	00bfff84 	movi	r2,-2
 202396c:	00009f06 	br	2023bec <etharp_output+0x2d8>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
 2023970:	e0bfff17 	ldw	r2,-4(fp)
 2023974:	10800017 	ldw	r2,0(r2)
 2023978:	e17ffd17 	ldw	r5,-12(fp)
 202397c:	1009883a 	mov	r4,r2
 2023980:	20187dc0 	call	20187dc <ip4_addr_isbroadcast>
 2023984:	10803fcc 	andi	r2,r2,255
 2023988:	10000326 	beq	r2,zero,2023998 <etharp_output+0x84>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
 202398c:	d0a01384 	addi	r2,gp,-32690
 2023990:	e0bff915 	stw	r2,-28(fp)
 2023994:	00008e06 	br	2023bd0 <etharp_output+0x2bc>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
 2023998:	e0bfff17 	ldw	r2,-4(fp)
 202399c:	10800017 	ldw	r2,0(r2)
 20239a0:	10803c0c 	andi	r2,r2,240
 20239a4:	10803818 	cmpnei	r2,r2,224
 20239a8:	1000131e 	bne	r2,zero,20239f8 <etharp_output+0xe4>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 20239ac:	00800044 	movi	r2,1
 20239b0:	e0bffb85 	stb	r2,-18(fp)
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 20239b4:	e03ffbc5 	stb	zero,-17(fp)
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 20239b8:	00801784 	movi	r2,94
 20239bc:	e0bffc05 	stb	r2,-16(fp)
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 20239c0:	e0bfff17 	ldw	r2,-4(fp)
 20239c4:	10800044 	addi	r2,r2,1
 20239c8:	10800003 	ldbu	r2,0(r2)
 20239cc:	10801fcc 	andi	r2,r2,127
 20239d0:	e0bffc45 	stb	r2,-15(fp)
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 20239d4:	e0bfff17 	ldw	r2,-4(fp)
 20239d8:	10800083 	ldbu	r2,2(r2)
 20239dc:	e0bffc85 	stb	r2,-14(fp)
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 20239e0:	e0bfff17 	ldw	r2,-4(fp)
 20239e4:	108000c3 	ldbu	r2,3(r2)
 20239e8:	e0bffcc5 	stb	r2,-13(fp)
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 20239ec:	e0bffb84 	addi	r2,fp,-18
 20239f0:	e0bff915 	stw	r2,-28(fp)
 20239f4:	00007606 	br	2023bd0 <etharp_output+0x2bc>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 20239f8:	e0bfff17 	ldw	r2,-4(fp)
 20239fc:	10c00017 	ldw	r3,0(r2)
 2023a00:	e0bffd17 	ldw	r2,-12(fp)
 2023a04:	10800117 	ldw	r2,4(r2)
 2023a08:	1886f03a 	xor	r3,r3,r2
 2023a0c:	e0bffd17 	ldw	r2,-12(fp)
 2023a10:	10800217 	ldw	r2,8(r2)
 2023a14:	1884703a 	and	r2,r3,r2
 2023a18:	10001126 	beq	r2,zero,2023a60 <etharp_output+0x14c>
        !ip_addr_islinklocal(ipaddr)) {
 2023a1c:	e0bfff17 	ldw	r2,-4(fp)
 2023a20:	10800017 	ldw	r2,0(r2)
 2023a24:	10ffffcc 	andi	r3,r2,65535
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 2023a28:	00bfaa54 	movui	r2,65193
 2023a2c:	18800c26 	beq	r3,r2,2023a60 <etharp_output+0x14c>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
 2023a30:	e0bffd17 	ldw	r2,-12(fp)
 2023a34:	10800304 	addi	r2,r2,12
 2023a38:	10000726 	beq	r2,zero,2023a58 <etharp_output+0x144>
 2023a3c:	e0bffd17 	ldw	r2,-12(fp)
 2023a40:	10800317 	ldw	r2,12(r2)
 2023a44:	10000426 	beq	r2,zero,2023a58 <etharp_output+0x144>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
 2023a48:	e0bffd17 	ldw	r2,-12(fp)
 2023a4c:	10800304 	addi	r2,r2,12
 2023a50:	e0bffa15 	stw	r2,-24(fp)
 2023a54:	00000206 	br	2023a60 <etharp_output+0x14c>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
 2023a58:	00bfff04 	movi	r2,-4
 2023a5c:	00006306 	br	2023bec <etharp_output+0x2d8>
        }
      }
    }
#if LWIP_NETIF_HWADDRHINT
    if (netif->addr_hint != NULL) {
 2023a60:	e0bffd17 	ldw	r2,-12(fp)
 2023a64:	10801017 	ldw	r2,64(r2)
 2023a68:	10002826 	beq	r2,zero,2023b0c <etharp_output+0x1f8>
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
 2023a6c:	e0bffd17 	ldw	r2,-12(fp)
 2023a70:	10801017 	ldw	r2,64(r2)
 2023a74:	10800003 	ldbu	r2,0(r2)
 2023a78:	e0bffb45 	stb	r2,-19(fp)
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
 2023a7c:	e0bffb43 	ldbu	r2,-19(fp)
 2023a80:	10800668 	cmpgeui	r2,r2,25
 2023a84:	1000211e 	bne	r2,zero,2023b0c <etharp_output+0x1f8>
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 2023a88:	e0fffb43 	ldbu	r3,-19(fp)
 2023a8c:	00808134 	movhi	r2,516
 2023a90:	109e5204 	addi	r2,r2,31048
 2023a94:	18c00524 	muli	r3,r3,20
 2023a98:	10c5883a 	add	r2,r2,r3
 2023a9c:	10800484 	addi	r2,r2,18
 2023aa0:	10800003 	ldbu	r2,0(r2)
 2023aa4:	10803fcc 	andi	r2,r2,255
 2023aa8:	108000b0 	cmpltui	r2,r2,2
 2023aac:	1000171e 	bne	r2,zero,2023b0c <etharp_output+0x1f8>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 2023ab0:	e0bffa17 	ldw	r2,-24(fp)
 2023ab4:	10c00017 	ldw	r3,0(r2)
 2023ab8:	e13ffb43 	ldbu	r4,-19(fp)
 2023abc:	00808134 	movhi	r2,516
 2023ac0:	109e5204 	addi	r2,r2,31048
 2023ac4:	21000524 	muli	r4,r4,20
 2023ac8:	1105883a 	add	r2,r2,r4
 2023acc:	10800104 	addi	r2,r2,4
 2023ad0:	10800017 	ldw	r2,0(r2)
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 2023ad4:	18800d1e 	bne	r3,r2,2023b0c <etharp_output+0x1f8>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 2023ad8:	008085f4 	movhi	r2,535
 2023adc:	10a86704 	addi	r2,r2,-24164
 2023ae0:	10801717 	ldw	r2,92(r2)
 2023ae4:	10c00044 	addi	r3,r2,1
 2023ae8:	008085f4 	movhi	r2,535
 2023aec:	10a86704 	addi	r2,r2,-24164
 2023af0:	10c01715 	stw	r3,92(r2)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 2023af4:	e0bffb43 	ldbu	r2,-19(fp)
 2023af8:	100d883a 	mov	r6,r2
 2023afc:	e17ffe17 	ldw	r5,-8(fp)
 2023b00:	e13ffd17 	ldw	r4,-12(fp)
 2023b04:	20238080 	call	2023808 <etharp_output_to_arp_index>
 2023b08:	00003806 	br	2023bec <etharp_output+0x2d8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 2023b0c:	e03ffb05 	stb	zero,-20(fp)
 2023b10:	00002706 	br	2023bb0 <etharp_output+0x29c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 2023b14:	e0fffb07 	ldb	r3,-20(fp)
 2023b18:	00808134 	movhi	r2,516
 2023b1c:	109e5204 	addi	r2,r2,31048
 2023b20:	18c00524 	muli	r3,r3,20
 2023b24:	10c5883a 	add	r2,r2,r3
 2023b28:	10800484 	addi	r2,r2,18
 2023b2c:	10800003 	ldbu	r2,0(r2)
 2023b30:	10803fcc 	andi	r2,r2,255
 2023b34:	108000b0 	cmpltui	r2,r2,2
 2023b38:	10001a1e 	bne	r2,zero,2023ba4 <etharp_output+0x290>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 2023b3c:	e0bffa17 	ldw	r2,-24(fp)
 2023b40:	10c00017 	ldw	r3,0(r2)
 2023b44:	e13ffb07 	ldb	r4,-20(fp)
 2023b48:	00808134 	movhi	r2,516
 2023b4c:	109e5204 	addi	r2,r2,31048
 2023b50:	21000524 	muli	r4,r4,20
 2023b54:	1105883a 	add	r2,r2,r4
 2023b58:	10800104 	addi	r2,r2,4
 2023b5c:	10800017 	ldw	r2,0(r2)
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 2023b60:	1880101e 	bne	r3,r2,2023ba4 <etharp_output+0x290>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 2023b64:	e0bffd17 	ldw	r2,-12(fp)
 2023b68:	10000726 	beq	r2,zero,2023b88 <etharp_output+0x274>
 2023b6c:	e0bffd17 	ldw	r2,-12(fp)
 2023b70:	10801017 	ldw	r2,64(r2)
 2023b74:	10000426 	beq	r2,zero,2023b88 <etharp_output+0x274>
 2023b78:	e0bffd17 	ldw	r2,-12(fp)
 2023b7c:	10801017 	ldw	r2,64(r2)
 2023b80:	e0fffb03 	ldbu	r3,-20(fp)
 2023b84:	10c00005 	stb	r3,0(r2)
        return etharp_output_to_arp_index(netif, q, i);
 2023b88:	e0bffb03 	ldbu	r2,-20(fp)
 2023b8c:	10803fcc 	andi	r2,r2,255
 2023b90:	100d883a 	mov	r6,r2
 2023b94:	e17ffe17 	ldw	r5,-8(fp)
 2023b98:	e13ffd17 	ldw	r4,-12(fp)
 2023b9c:	20238080 	call	2023808 <etharp_output_to_arp_index>
 2023ba0:	00001206 	br	2023bec <etharp_output+0x2d8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 2023ba4:	e0bffb03 	ldbu	r2,-20(fp)
 2023ba8:	10800044 	addi	r2,r2,1
 2023bac:	e0bffb05 	stb	r2,-20(fp)
 2023bb0:	e0bffb07 	ldb	r2,-20(fp)
 2023bb4:	10800650 	cmplti	r2,r2,25
 2023bb8:	103fd61e 	bne	r2,zero,2023b14 <__alt_mem_mem_0+0xfd003b14>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 2023bbc:	e1bffe17 	ldw	r6,-8(fp)
 2023bc0:	e17ffa17 	ldw	r5,-24(fp)
 2023bc4:	e13ffd17 	ldw	r4,-12(fp)
 2023bc8:	2023c000 	call	2023c00 <etharp_query>
 2023bcc:	00000706 	br	2023bec <etharp_output+0x2d8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 2023bd0:	e0bffd17 	ldw	r2,-12(fp)
 2023bd4:	10800cc4 	addi	r2,r2,51
 2023bd8:	e1fff917 	ldw	r7,-28(fp)
 2023bdc:	100d883a 	mov	r6,r2
 2023be0:	e17ffe17 	ldw	r5,-8(fp)
 2023be4:	e13ffd17 	ldw	r4,-12(fp)
 2023be8:	2022fc40 	call	2022fc4 <etharp_send_ip>
}
 2023bec:	e037883a 	mov	sp,fp
 2023bf0:	dfc00117 	ldw	ra,4(sp)
 2023bf4:	df000017 	ldw	fp,0(sp)
 2023bf8:	dec00204 	addi	sp,sp,8
 2023bfc:	f800283a 	ret

02023c00 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
 2023c00:	defff404 	addi	sp,sp,-48
 2023c04:	dfc00b15 	stw	ra,44(sp)
 2023c08:	df000a15 	stw	fp,40(sp)
 2023c0c:	df000a04 	addi	fp,sp,40
 2023c10:	e13ffd15 	stw	r4,-12(fp)
 2023c14:	e17ffe15 	stw	r5,-8(fp)
 2023c18:	e1bfff15 	stw	r6,-4(fp)
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 2023c1c:	e0bffd17 	ldw	r2,-12(fp)
 2023c20:	10800cc4 	addi	r2,r2,51
 2023c24:	e0bffa15 	stw	r2,-24(fp)
  err_t result = ERR_MEM;
 2023c28:	00bfffc4 	movi	r2,-1
 2023c2c:	e0bff605 	stb	r2,-40(fp)
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 2023c30:	e0bffe17 	ldw	r2,-8(fp)
 2023c34:	10800017 	ldw	r2,0(r2)
 2023c38:	e17ffd17 	ldw	r5,-12(fp)
 2023c3c:	1009883a 	mov	r4,r2
 2023c40:	20187dc0 	call	20187dc <ip4_addr_isbroadcast>
 2023c44:	10803fcc 	andi	r2,r2,255
 2023c48:	10000a1e 	bne	r2,zero,2023c74 <etharp_query+0x74>
      ip_addr_ismulticast(ipaddr) ||
 2023c4c:	e0bffe17 	ldw	r2,-8(fp)
 2023c50:	10800017 	ldw	r2,0(r2)
 2023c54:	10803c0c 	andi	r2,r2,240
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 2023c58:	10803820 	cmpeqi	r2,r2,224
 2023c5c:	1000051e 	bne	r2,zero,2023c74 <etharp_query+0x74>
      ip_addr_ismulticast(ipaddr) ||
 2023c60:	e0bffe17 	ldw	r2,-8(fp)
 2023c64:	10000326 	beq	r2,zero,2023c74 <etharp_query+0x74>
      ip_addr_isany(ipaddr)) {
 2023c68:	e0bffe17 	ldw	r2,-8(fp)
 2023c6c:	10800017 	ldw	r2,0(r2)
 2023c70:	1000021e 	bne	r2,zero,2023c7c <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 2023c74:	00bffc84 	movi	r2,-14
 2023c78:	0000c906 	br	2023fa0 <etharp_query+0x3a0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
 2023c7c:	01400044 	movi	r5,1
 2023c80:	e13ffe17 	ldw	r4,-8(fp)
 2023c84:	2022cac0 	call	2022cac <etharp_find_entry>
 2023c88:	e0bffb05 	stb	r2,-20(fp)

  /* could not find or create entry? */
  if (i < 0) {
 2023c8c:	e0bffb07 	ldb	r2,-20(fp)
 2023c90:	10000b0e 	bge	r2,zero,2023cc0 <etharp_query+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 2023c94:	e0bfff17 	ldw	r2,-4(fp)
 2023c98:	10000726 	beq	r2,zero,2023cb8 <etharp_query+0xb8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 2023c9c:	008085f4 	movhi	r2,535
 2023ca0:	10a86704 	addi	r2,r2,-24164
 2023ca4:	10801217 	ldw	r2,72(r2)
 2023ca8:	10c00044 	addi	r3,r2,1
 2023cac:	008085f4 	movhi	r2,535
 2023cb0:	10a86704 	addi	r2,r2,-24164
 2023cb4:	10c01215 	stw	r3,72(r2)
    }
    return (err_t)i;
 2023cb8:	e0bffb03 	ldbu	r2,-20(fp)
 2023cbc:	0000b806 	br	2023fa0 <etharp_query+0x3a0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 2023cc0:	e0fffb07 	ldb	r3,-20(fp)
 2023cc4:	00808134 	movhi	r2,516
 2023cc8:	109e5204 	addi	r2,r2,31048
 2023ccc:	18c00524 	muli	r3,r3,20
 2023cd0:	10c5883a 	add	r2,r2,r3
 2023cd4:	10800484 	addi	r2,r2,18
 2023cd8:	10800003 	ldbu	r2,0(r2)
 2023cdc:	10803fcc 	andi	r2,r2,255
 2023ce0:	1000081e 	bne	r2,zero,2023d04 <etharp_query+0x104>
    arp_table[i].state = ETHARP_STATE_PENDING;
 2023ce4:	e0fffb07 	ldb	r3,-20(fp)
 2023ce8:	00808134 	movhi	r2,516
 2023cec:	109e5204 	addi	r2,r2,31048
 2023cf0:	18c00524 	muli	r3,r3,20
 2023cf4:	10c5883a 	add	r2,r2,r3
 2023cf8:	10800484 	addi	r2,r2,18
 2023cfc:	00c00044 	movi	r3,1
 2023d00:	10c00005 	stb	r3,0(r2)
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 2023d04:	e0fffb07 	ldb	r3,-20(fp)
 2023d08:	00808134 	movhi	r2,516
 2023d0c:	109e5204 	addi	r2,r2,31048
 2023d10:	18c00524 	muli	r3,r3,20
 2023d14:	10c5883a 	add	r2,r2,r3
 2023d18:	10800484 	addi	r2,r2,18
 2023d1c:	10800003 	ldbu	r2,0(r2)
 2023d20:	10803fcc 	andi	r2,r2,255
 2023d24:	10800060 	cmpeqi	r2,r2,1
 2023d28:	1000021e 	bne	r2,zero,2023d34 <etharp_query+0x134>
 2023d2c:	e0bfff17 	ldw	r2,-4(fp)
 2023d30:	1000081e 	bne	r2,zero,2023d54 <etharp_query+0x154>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 2023d34:	e17ffe17 	ldw	r5,-8(fp)
 2023d38:	e13ffd17 	ldw	r4,-12(fp)
 2023d3c:	20242000 	call	2024200 <etharp_request>
 2023d40:	e0bff605 	stb	r2,-40(fp)
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 2023d44:	e0bfff17 	ldw	r2,-4(fp)
 2023d48:	1000021e 	bne	r2,zero,2023d54 <etharp_query+0x154>
      return result;
 2023d4c:	e0bff603 	ldbu	r2,-40(fp)
 2023d50:	00009306 	br	2023fa0 <etharp_query+0x3a0>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 2023d54:	e0fffb07 	ldb	r3,-20(fp)
 2023d58:	00808134 	movhi	r2,516
 2023d5c:	109e5204 	addi	r2,r2,31048
 2023d60:	18c00524 	muli	r3,r3,20
 2023d64:	10c5883a 	add	r2,r2,r3
 2023d68:	10800484 	addi	r2,r2,18
 2023d6c:	10800003 	ldbu	r2,0(r2)
 2023d70:	10803fcc 	andi	r2,r2,255
 2023d74:	108000b0 	cmpltui	r2,r2,2
 2023d78:	1000161e 	bne	r2,zero,2023dd4 <etharp_query+0x1d4>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 2023d7c:	e0bffd17 	ldw	r2,-12(fp)
 2023d80:	10000726 	beq	r2,zero,2023da0 <etharp_query+0x1a0>
 2023d84:	e0bffd17 	ldw	r2,-12(fp)
 2023d88:	10801017 	ldw	r2,64(r2)
 2023d8c:	10000426 	beq	r2,zero,2023da0 <etharp_query+0x1a0>
 2023d90:	e0bffd17 	ldw	r2,-12(fp)
 2023d94:	10801017 	ldw	r2,64(r2)
 2023d98:	e0fffb03 	ldbu	r3,-20(fp)
 2023d9c:	10c00005 	stb	r3,0(r2)
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 2023da0:	e0bffb07 	ldb	r2,-20(fp)
 2023da4:	10800524 	muli	r2,r2,20
 2023da8:	10c00304 	addi	r3,r2,12
 2023dac:	00808134 	movhi	r2,516
 2023db0:	109e5204 	addi	r2,r2,31048
 2023db4:	1885883a 	add	r2,r3,r2
 2023db8:	100f883a 	mov	r7,r2
 2023dbc:	e1bffa17 	ldw	r6,-24(fp)
 2023dc0:	e17fff17 	ldw	r5,-4(fp)
 2023dc4:	e13ffd17 	ldw	r4,-12(fp)
 2023dc8:	2022fc40 	call	2022fc4 <etharp_send_ip>
 2023dcc:	e0bff605 	stb	r2,-40(fp)
 2023dd0:	00007206 	br	2023f9c <etharp_query+0x39c>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 2023dd4:	e0fffb07 	ldb	r3,-20(fp)
 2023dd8:	00808134 	movhi	r2,516
 2023ddc:	109e5204 	addi	r2,r2,31048
 2023de0:	18c00524 	muli	r3,r3,20
 2023de4:	10c5883a 	add	r2,r2,r3
 2023de8:	10800484 	addi	r2,r2,18
 2023dec:	10800003 	ldbu	r2,0(r2)
 2023df0:	10803fcc 	andi	r2,r2,255
 2023df4:	10800058 	cmpnei	r2,r2,1
 2023df8:	1000681e 	bne	r2,zero,2023f9c <etharp_query+0x39c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 2023dfc:	e03ff815 	stw	zero,-32(fp)
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 2023e00:	e0bfff17 	ldw	r2,-4(fp)
 2023e04:	e0bff715 	stw	r2,-36(fp)
    while (p) {
 2023e08:	00000b06 	br	2023e38 <etharp_query+0x238>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
 2023e0c:	e0bff717 	ldw	r2,-36(fp)
 2023e10:	10800303 	ldbu	r2,12(r2)
 2023e14:	10803fcc 	andi	r2,r2,255
 2023e18:	10800060 	cmpeqi	r2,r2,1
 2023e1c:	1000031e 	bne	r2,zero,2023e2c <etharp_query+0x22c>
        copy_needed = 1;
 2023e20:	00800044 	movi	r2,1
 2023e24:	e0bff815 	stw	r2,-32(fp)
        break;
 2023e28:	00000506 	br	2023e40 <etharp_query+0x240>
      }
      p = p->next;
 2023e2c:	e0bff717 	ldw	r2,-36(fp)
 2023e30:	10800017 	ldw	r2,0(r2)
 2023e34:	e0bff715 	stw	r2,-36(fp)
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
 2023e38:	e0bff717 	ldw	r2,-36(fp)
 2023e3c:	103ff31e 	bne	r2,zero,2023e0c <__alt_mem_mem_0+0xfd003e0c>
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if(copy_needed) {
 2023e40:	e0bff817 	ldw	r2,-32(fp)
 2023e44:	10001526 	beq	r2,zero,2023e9c <etharp_query+0x29c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 2023e48:	e0bff717 	ldw	r2,-36(fp)
 2023e4c:	1080020b 	ldhu	r2,8(r2)
 2023e50:	10bfffcc 	andi	r2,r2,65535
 2023e54:	000d883a 	mov	r6,zero
 2023e58:	100b883a 	mov	r5,r2
 2023e5c:	010000c4 	movi	r4,3
 2023e60:	201a2640 	call	201a264 <pbuf_alloc>
 2023e64:	e0bff715 	stw	r2,-36(fp)
      if(p != NULL) {
 2023e68:	e0bff717 	ldw	r2,-36(fp)
 2023e6c:	10000f26 	beq	r2,zero,2023eac <etharp_query+0x2ac>
        if (pbuf_copy(p, q) != ERR_OK) {
 2023e70:	e17fff17 	ldw	r5,-4(fp)
 2023e74:	e13ff717 	ldw	r4,-36(fp)
 2023e78:	201adc80 	call	201adc8 <pbuf_copy>
 2023e7c:	10803fcc 	andi	r2,r2,255
 2023e80:	1080201c 	xori	r2,r2,128
 2023e84:	10bfe004 	addi	r2,r2,-128
 2023e88:	10000826 	beq	r2,zero,2023eac <etharp_query+0x2ac>
          pbuf_free(p);
 2023e8c:	e13ff717 	ldw	r4,-36(fp)
 2023e90:	201aa200 	call	201aa20 <pbuf_free>
          p = NULL;
 2023e94:	e03ff715 	stw	zero,-36(fp)
 2023e98:	00000406 	br	2023eac <etharp_query+0x2ac>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 2023e9c:	e0bfff17 	ldw	r2,-4(fp)
 2023ea0:	e0bff715 	stw	r2,-36(fp)
      pbuf_ref(p);
 2023ea4:	e13ff717 	ldw	r4,-36(fp)
 2023ea8:	201abb00 	call	201abb0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 2023eac:	e0bff717 	ldw	r2,-36(fp)
 2023eb0:	10003126 	beq	r2,zero,2023f78 <etharp_query+0x378>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 2023eb4:	010002c4 	movi	r4,11
 2023eb8:	20342e00 	call	20342e0 <memp_malloc>
 2023ebc:	e0bffc15 	stw	r2,-16(fp)
      if (new_entry != NULL) {
 2023ec0:	e0bffc17 	ldw	r2,-16(fp)
 2023ec4:	10002726 	beq	r2,zero,2023f64 <etharp_query+0x364>
        new_entry->next = 0;
 2023ec8:	e0bffc17 	ldw	r2,-16(fp)
 2023ecc:	10000015 	stw	zero,0(r2)
        new_entry->p = p;
 2023ed0:	e0bffc17 	ldw	r2,-16(fp)
 2023ed4:	e0fff717 	ldw	r3,-36(fp)
 2023ed8:	10c00115 	stw	r3,4(r2)
        if(arp_table[i].q != NULL) {
 2023edc:	e0fffb07 	ldb	r3,-20(fp)
 2023ee0:	00808134 	movhi	r2,516
 2023ee4:	109e5204 	addi	r2,r2,31048
 2023ee8:	18c00524 	muli	r3,r3,20
 2023eec:	10c5883a 	add	r2,r2,r3
 2023ef0:	10800017 	ldw	r2,0(r2)
 2023ef4:	10001226 	beq	r2,zero,2023f40 <etharp_query+0x340>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 2023ef8:	e0fffb07 	ldb	r3,-20(fp)
 2023efc:	00808134 	movhi	r2,516
 2023f00:	109e5204 	addi	r2,r2,31048
 2023f04:	18c00524 	muli	r3,r3,20
 2023f08:	10c5883a 	add	r2,r2,r3
 2023f0c:	10800017 	ldw	r2,0(r2)
 2023f10:	e0bff915 	stw	r2,-28(fp)
          while (r->next != NULL) {
 2023f14:	00000306 	br	2023f24 <etharp_query+0x324>
            r = r->next;
 2023f18:	e0bff917 	ldw	r2,-28(fp)
 2023f1c:	10800017 	ldw	r2,0(r2)
 2023f20:	e0bff915 	stw	r2,-28(fp)
        new_entry->p = p;
        if(arp_table[i].q != NULL) {
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
          while (r->next != NULL) {
 2023f24:	e0bff917 	ldw	r2,-28(fp)
 2023f28:	10800017 	ldw	r2,0(r2)
 2023f2c:	103ffa1e 	bne	r2,zero,2023f18 <__alt_mem_mem_0+0xfd003f18>
            r = r->next;
          }
          r->next = new_entry;
 2023f30:	e0bff917 	ldw	r2,-28(fp)
 2023f34:	e0fffc17 	ldw	r3,-16(fp)
 2023f38:	10c00015 	stw	r3,0(r2)
 2023f3c:	00000706 	br	2023f5c <etharp_query+0x35c>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 2023f40:	e0fffb07 	ldb	r3,-20(fp)
 2023f44:	00808134 	movhi	r2,516
 2023f48:	109e5204 	addi	r2,r2,31048
 2023f4c:	18c00524 	muli	r3,r3,20
 2023f50:	10c5883a 	add	r2,r2,r3
 2023f54:	e0fffc17 	ldw	r3,-16(fp)
 2023f58:	10c00015 	stw	r3,0(r2)
        }
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
 2023f5c:	e03ff605 	stb	zero,-40(fp)
 2023f60:	00000e06 	br	2023f9c <etharp_query+0x39c>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 2023f64:	e13ff717 	ldw	r4,-36(fp)
 2023f68:	201aa200 	call	201aa20 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 2023f6c:	00bfffc4 	movi	r2,-1
 2023f70:	e0bff605 	stb	r2,-40(fp)
 2023f74:	00000906 	br	2023f9c <etharp_query+0x39c>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 2023f78:	008085f4 	movhi	r2,535
 2023f7c:	10a86704 	addi	r2,r2,-24164
 2023f80:	10801217 	ldw	r2,72(r2)
 2023f84:	10c00044 	addi	r3,r2,1
 2023f88:	008085f4 	movhi	r2,535
 2023f8c:	10a86704 	addi	r2,r2,-24164
 2023f90:	10c01215 	stw	r3,72(r2)
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 2023f94:	00bfffc4 	movi	r2,-1
 2023f98:	e0bff605 	stb	r2,-40(fp)
    }
  }
  return result;
 2023f9c:	e0bff603 	ldbu	r2,-40(fp)
}
 2023fa0:	e037883a 	mov	sp,fp
 2023fa4:	dfc00117 	ldw	ra,4(sp)
 2023fa8:	df000017 	ldw	fp,0(sp)
 2023fac:	dec00204 	addi	sp,sp,8
 2023fb0:	f800283a 	ret

02023fb4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
 2023fb4:	defff504 	addi	sp,sp,-44
 2023fb8:	dfc00a15 	stw	ra,40(sp)
 2023fbc:	df000915 	stw	fp,36(sp)
 2023fc0:	df000904 	addi	fp,sp,36
 2023fc4:	e13ffb15 	stw	r4,-20(fp)
 2023fc8:	e17ffc15 	stw	r5,-16(fp)
 2023fcc:	e1bffd15 	stw	r6,-12(fp)
 2023fd0:	e1fffe15 	stw	r7,-8(fp)
 2023fd4:	e0800517 	ldw	r2,20(fp)
 2023fd8:	e0bfff0d 	sth	r2,-4(fp)
  struct pbuf *p;
  err_t result = ERR_OK;
 2023fdc:	e03ff705 	stb	zero,-36(fp)
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 2023fe0:	000d883a 	mov	r6,zero
 2023fe4:	01400b04 	movi	r5,44
 2023fe8:	010000c4 	movi	r4,3
 2023fec:	201a2640 	call	201a264 <pbuf_alloc>
 2023ff0:	e0bff815 	stw	r2,-32(fp)
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 2023ff4:	e0bff817 	ldw	r2,-32(fp)
 2023ff8:	1000091e 	bne	r2,zero,2024020 <etharp_raw+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 2023ffc:	008085f4 	movhi	r2,535
 2024000:	10a86704 	addi	r2,r2,-24164
 2024004:	10801217 	ldw	r2,72(r2)
 2024008:	10c00044 	addi	r3,r2,1
 202400c:	008085f4 	movhi	r2,535
 2024010:	10a86704 	addi	r2,r2,-24164
 2024014:	10c01215 	stw	r3,72(r2)
    return ERR_MEM;
 2024018:	00bfffc4 	movi	r2,-1
 202401c:	00007306 	br	20241ec <etharp_raw+0x238>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
 2024020:	e0bff817 	ldw	r2,-32(fp)
 2024024:	10800117 	ldw	r2,4(r2)
 2024028:	e0bff915 	stw	r2,-28(fp)
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 202402c:	e0bff917 	ldw	r2,-28(fp)
 2024030:	10800404 	addi	r2,r2,16
 2024034:	e0bffa15 	stw	r2,-24(fp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 2024038:	e0bfff0b 	ldhu	r2,-4(fp)
 202403c:	1004d23a 	srli	r2,r2,8
 2024040:	1007883a 	mov	r3,r2
 2024044:	e0bfff0b 	ldhu	r2,-4(fp)
 2024048:	1004923a 	slli	r2,r2,8
 202404c:	1884b03a 	or	r2,r3,r2
 2024050:	100d883a 	mov	r6,r2
 2024054:	e0bffa17 	ldw	r2,-24(fp)
 2024058:	30ffffcc 	andi	r3,r6,65535
 202405c:	19403fcc 	andi	r5,r3,255
 2024060:	10c00183 	ldbu	r3,6(r2)
 2024064:	1806703a 	and	r3,r3,zero
 2024068:	1809883a 	mov	r4,r3
 202406c:	2807883a 	mov	r3,r5
 2024070:	20c6b03a 	or	r3,r4,r3
 2024074:	10c00185 	stb	r3,6(r2)
 2024078:	30ffffcc 	andi	r3,r6,65535
 202407c:	1806d23a 	srli	r3,r3,8
 2024080:	197fffcc 	andi	r5,r3,65535
 2024084:	10c001c3 	ldbu	r3,7(r2)
 2024088:	1806703a 	and	r3,r3,zero
 202408c:	1809883a 	mov	r4,r3
 2024090:	2807883a 	mov	r3,r5
 2024094:	20c6b03a 	or	r3,r4,r3
 2024098:	10c001c5 	stb	r3,7(r2)
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 202409c:	e0bffa17 	ldw	r2,-24(fp)
 20240a0:	10800204 	addi	r2,r2,8
 20240a4:	01800184 	movi	r6,6
 20240a8:	e17ffe17 	ldw	r5,-8(fp)
 20240ac:	1009883a 	mov	r4,r2
 20240b0:	2005e580 	call	2005e58 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 20240b4:	e0bffa17 	ldw	r2,-24(fp)
 20240b8:	10800484 	addi	r2,r2,18
 20240bc:	01800184 	movi	r6,6
 20240c0:	e1400317 	ldw	r5,12(fp)
 20240c4:	1009883a 	mov	r4,r2
 20240c8:	2005e580 	call	2005e58 <memcpy>
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 20240cc:	e0bff917 	ldw	r2,-28(fp)
 20240d0:	10800084 	addi	r2,r2,2
 20240d4:	01800184 	movi	r6,6
 20240d8:	e17ffd17 	ldw	r5,-12(fp)
 20240dc:	1009883a 	mov	r4,r2
 20240e0:	2005e580 	call	2005e58 <memcpy>
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 20240e4:	e0bff917 	ldw	r2,-28(fp)
 20240e8:	10800204 	addi	r2,r2,8
 20240ec:	01800184 	movi	r6,6
 20240f0:	e17ffc17 	ldw	r5,-16(fp)
 20240f4:	1009883a 	mov	r4,r2
 20240f8:	2005e580 	call	2005e58 <memcpy>
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 20240fc:	e0bffa17 	ldw	r2,-24(fp)
 2024100:	10800384 	addi	r2,r2,14
 2024104:	01800104 	movi	r6,4
 2024108:	e1400217 	ldw	r5,8(fp)
 202410c:	1009883a 	mov	r4,r2
 2024110:	2005e580 	call	2005e58 <memcpy>
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 2024114:	e0bffa17 	ldw	r2,-24(fp)
 2024118:	10800604 	addi	r2,r2,24
 202411c:	01800104 	movi	r6,4
 2024120:	e1400417 	ldw	r5,16(fp)
 2024124:	1009883a 	mov	r4,r2
 2024128:	2005e580 	call	2005e58 <memcpy>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 202412c:	e0bffa17 	ldw	r2,-24(fp)
 2024130:	10c00003 	ldbu	r3,0(r2)
 2024134:	1806703a 	and	r3,r3,zero
 2024138:	10c00005 	stb	r3,0(r2)
 202413c:	10c00043 	ldbu	r3,1(r2)
 2024140:	1806703a 	and	r3,r3,zero
 2024144:	18c00054 	ori	r3,r3,1
 2024148:	10c00045 	stb	r3,1(r2)
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 202414c:	e0bffa17 	ldw	r2,-24(fp)
 2024150:	10c00083 	ldbu	r3,2(r2)
 2024154:	1806703a 	and	r3,r3,zero
 2024158:	18c00214 	ori	r3,r3,8
 202415c:	10c00085 	stb	r3,2(r2)
 2024160:	10c000c3 	ldbu	r3,3(r2)
 2024164:	1806703a 	and	r3,r3,zero
 2024168:	10c000c5 	stb	r3,3(r2)
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 202416c:	e0bffa17 	ldw	r2,-24(fp)
 2024170:	00c00184 	movi	r3,6
 2024174:	10c00105 	stb	r3,4(r2)
  hdr->protolen = sizeof(ip_addr_t);
 2024178:	e0bffa17 	ldw	r2,-24(fp)
 202417c:	00c00104 	movi	r3,4
 2024180:	10c00145 	stb	r3,5(r2)

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 2024184:	e0bff917 	ldw	r2,-28(fp)
 2024188:	10c00383 	ldbu	r3,14(r2)
 202418c:	1806703a 	and	r3,r3,zero
 2024190:	18c00214 	ori	r3,r3,8
 2024194:	10c00385 	stb	r3,14(r2)
 2024198:	10c003c3 	ldbu	r3,15(r2)
 202419c:	1806703a 	and	r3,r3,zero
 20241a0:	18c00194 	ori	r3,r3,6
 20241a4:	10c003c5 	stb	r3,15(r2)
  /* send ARP query */
  result = netif->linkoutput(netif, p);
 20241a8:	e0bffb17 	ldw	r2,-20(fp)
 20241ac:	10800617 	ldw	r2,24(r2)
 20241b0:	e17ff817 	ldw	r5,-32(fp)
 20241b4:	e13ffb17 	ldw	r4,-20(fp)
 20241b8:	103ee83a 	callr	r2
 20241bc:	e0bff705 	stb	r2,-36(fp)
  ETHARP_STATS_INC(etharp.xmit);
 20241c0:	008085f4 	movhi	r2,535
 20241c4:	10a86704 	addi	r2,r2,-24164
 20241c8:	10800c17 	ldw	r2,48(r2)
 20241cc:	10c00044 	addi	r3,r2,1
 20241d0:	008085f4 	movhi	r2,535
 20241d4:	10a86704 	addi	r2,r2,-24164
 20241d8:	10c00c15 	stw	r3,48(r2)
  /* free ARP query packet */
  pbuf_free(p);
 20241dc:	e13ff817 	ldw	r4,-32(fp)
 20241e0:	201aa200 	call	201aa20 <pbuf_free>
  p = NULL;
 20241e4:	e03ff815 	stw	zero,-32(fp)
  /* could not allocate pbuf for ARP request */

  return result;
 20241e8:	e0bff703 	ldbu	r2,-36(fp)
}
 20241ec:	e037883a 	mov	sp,fp
 20241f0:	dfc00117 	ldw	ra,4(sp)
 20241f4:	df000017 	ldw	fp,0(sp)
 20241f8:	dec00204 	addi	sp,sp,8
 20241fc:	f800283a 	ret

02024200 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
 2024200:	defff804 	addi	sp,sp,-32
 2024204:	dfc00715 	stw	ra,28(sp)
 2024208:	df000615 	stw	fp,24(sp)
 202420c:	df000604 	addi	fp,sp,24
 2024210:	e13ffe15 	stw	r4,-8(fp)
 2024214:	e17fff15 	stw	r5,-4(fp)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 2024218:	e0bffe17 	ldw	r2,-8(fp)
 202421c:	11000cc4 	addi	r4,r2,51
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
 2024220:	e0bffe17 	ldw	r2,-8(fp)
 2024224:	11400cc4 	addi	r5,r2,51
 2024228:	e0bffe17 	ldw	r2,-8(fp)
 202422c:	10800104 	addi	r2,r2,4
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 2024230:	00c00044 	movi	r3,1
 2024234:	d8c00315 	stw	r3,12(sp)
 2024238:	e0ffff17 	ldw	r3,-4(fp)
 202423c:	d8c00215 	stw	r3,8(sp)
 2024240:	d0e01504 	addi	r3,gp,-32684
 2024244:	d8c00115 	stw	r3,4(sp)
 2024248:	d8800015 	stw	r2,0(sp)
 202424c:	280f883a 	mov	r7,r5
 2024250:	d1a01384 	addi	r6,gp,-32690
 2024254:	200b883a 	mov	r5,r4
 2024258:	e13ffe17 	ldw	r4,-8(fp)
 202425c:	2023fb40 	call	2023fb4 <etharp_raw>
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
 2024260:	e037883a 	mov	sp,fp
 2024264:	dfc00117 	ldw	ra,4(sp)
 2024268:	df000017 	ldw	fp,0(sp)
 202426c:	dec00204 	addi	sp,sp,8
 2024270:	f800283a 	ret

02024274 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 2024274:	defff904 	addi	sp,sp,-28
 2024278:	dfc00615 	stw	ra,24(sp)
 202427c:	df000515 	stw	fp,20(sp)
 2024280:	df000504 	addi	fp,sp,20
 2024284:	e13ffe15 	stw	r4,-8(fp)
 2024288:	e17fff15 	stw	r5,-4(fp)
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 202428c:	00800404 	movi	r2,16
 2024290:	e0bffb0d 	sth	r2,-20(fp)
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 2024294:	e0bffe17 	ldw	r2,-8(fp)
 2024298:	1080028b 	ldhu	r2,10(r2)
 202429c:	10bfffcc 	andi	r2,r2,65535
 20242a0:	10800468 	cmpgeui	r2,r2,17
 20242a4:	10000f1e 	bne	r2,zero,20242e4 <ethernet_input+0x70>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 20242a8:	008085f4 	movhi	r2,535
 20242ac:	10a86704 	addi	r2,r2,-24164
 20242b0:	10801417 	ldw	r2,80(r2)
 20242b4:	10c00044 	addi	r3,r2,1
 20242b8:	008085f4 	movhi	r2,535
 20242bc:	10a86704 	addi	r2,r2,-24164
 20242c0:	10c01415 	stw	r3,80(r2)
    ETHARP_STATS_INC(etharp.drop);
 20242c4:	008085f4 	movhi	r2,535
 20242c8:	10a86704 	addi	r2,r2,-24164
 20242cc:	10800f17 	ldw	r2,60(r2)
 20242d0:	10c00044 	addi	r3,r2,1
 20242d4:	008085f4 	movhi	r2,535
 20242d8:	10a86704 	addi	r2,r2,-24164
 20242dc:	10c00f15 	stw	r3,60(r2)
    goto free_and_return;
 20242e0:	00006e06 	br	202449c <ethernet_input+0x228>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 20242e4:	e0bffe17 	ldw	r2,-8(fp)
 20242e8:	10800117 	ldw	r2,4(r2)
 20242ec:	e0bffc15 	stw	r2,-16(fp)
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 20242f0:	e0bffc17 	ldw	r2,-16(fp)
 20242f4:	10c00383 	ldbu	r3,14(r2)
 20242f8:	108003c3 	ldbu	r2,15(r2)
 20242fc:	1004923a 	slli	r2,r2,8
 2024300:	10c4b03a 	or	r2,r2,r3
 2024304:	e0bffd0d 	sth	r2,-12(fp)

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 2024308:	e0bffc17 	ldw	r2,-16(fp)
 202430c:	10800083 	ldbu	r2,2(r2)
 2024310:	10803fcc 	andi	r2,r2,255
 2024314:	1080004c 	andi	r2,r2,1
 2024318:	10002226 	beq	r2,zero,20243a4 <ethernet_input+0x130>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 202431c:	e0bffc17 	ldw	r2,-16(fp)
 2024320:	10800083 	ldbu	r2,2(r2)
 2024324:	10803fcc 	andi	r2,r2,255
 2024328:	10800058 	cmpnei	r2,r2,1
 202432c:	1000101e 	bne	r2,zero,2024370 <ethernet_input+0xfc>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 2024330:	e0bffc17 	ldw	r2,-16(fp)
 2024334:	108000c3 	ldbu	r2,3(r2)
 2024338:	10803fcc 	andi	r2,r2,255
 202433c:	1000191e 	bne	r2,zero,20243a4 <ethernet_input+0x130>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
 2024340:	e0bffc17 	ldw	r2,-16(fp)
 2024344:	10800103 	ldbu	r2,4(r2)
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 2024348:	10803fcc 	andi	r2,r2,255
 202434c:	10801798 	cmpnei	r2,r2,94
 2024350:	1000141e 	bne	r2,zero,20243a4 <ethernet_input+0x130>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 2024354:	e0bffe17 	ldw	r2,-8(fp)
 2024358:	10800343 	ldbu	r2,13(r2)
 202435c:	10800414 	ori	r2,r2,16
 2024360:	1007883a 	mov	r3,r2
 2024364:	e0bffe17 	ldw	r2,-8(fp)
 2024368:	10c00345 	stb	r3,13(r2)
 202436c:	00000d06 	br	20243a4 <ethernet_input+0x130>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 2024370:	e0bffc17 	ldw	r2,-16(fp)
 2024374:	10800084 	addi	r2,r2,2
 2024378:	01800184 	movi	r6,6
 202437c:	d1601384 	addi	r5,gp,-32690
 2024380:	1009883a 	mov	r4,r2
 2024384:	203cabc0 	call	203cabc <memcmp>
 2024388:	1000061e 	bne	r2,zero,20243a4 <ethernet_input+0x130>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 202438c:	e0bffe17 	ldw	r2,-8(fp)
 2024390:	10800343 	ldbu	r2,13(r2)
 2024394:	10800214 	ori	r2,r2,8
 2024398:	1007883a 	mov	r3,r2
 202439c:	e0bffe17 	ldw	r2,-8(fp)
 20243a0:	10c00345 	stb	r3,13(r2)
    }
  }

  switch (type) {
 20243a4:	e0bffd0b 	ldhu	r2,-12(fp)
 20243a8:	10c00220 	cmpeqi	r3,r2,8
 20243ac:	1800031e 	bne	r3,zero,20243bc <ethernet_input+0x148>
 20243b0:	10818220 	cmpeqi	r2,r2,1544
 20243b4:	1000171e 	bne	r2,zero,2024414 <ethernet_input+0x1a0>
 20243b8:	00002206 	br	2024444 <ethernet_input+0x1d0>
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 20243bc:	e0bfff17 	ldw	r2,-4(fp)
 20243c0:	10800e43 	ldbu	r2,57(r2)
 20243c4:	10803fcc 	andi	r2,r2,255
 20243c8:	1080080c 	andi	r2,r2,32
 20243cc:	10002e26 	beq	r2,zero,2024488 <ethernet_input+0x214>
        goto free_and_return;
      }
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
 20243d0:	e17ffe17 	ldw	r5,-8(fp)
 20243d4:	e13fff17 	ldw	r4,-4(fp)
 20243d8:	20233940 	call	2023394 <etharp_ip_input>
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
 20243dc:	e0bffb0b 	ldhu	r2,-20(fp)
 20243e0:	0085c83a 	sub	r2,zero,r2
 20243e4:	10bfffcc 	andi	r2,r2,65535
 20243e8:	10a0001c 	xori	r2,r2,32768
 20243ec:	10a00004 	addi	r2,r2,-32768
 20243f0:	100b883a 	mov	r5,r2
 20243f4:	e13ffe17 	ldw	r4,-8(fp)
 20243f8:	201a8700 	call	201a870 <pbuf_header>
 20243fc:	10803fcc 	andi	r2,r2,255
 2024400:	1000231e 	bne	r2,zero,2024490 <ethernet_input+0x21c>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
 2024404:	e17fff17 	ldw	r5,-4(fp)
 2024408:	e13ffe17 	ldw	r4,-8(fp)
 202440c:	2031cb80 	call	2031cb8 <ip_input>
      }
      break;
 2024410:	00001b06 	br	2024480 <ethernet_input+0x20c>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 2024414:	e0bfff17 	ldw	r2,-4(fp)
 2024418:	10800e43 	ldbu	r2,57(r2)
 202441c:	10803fcc 	andi	r2,r2,255
 2024420:	1080080c 	andi	r2,r2,32
 2024424:	10001c26 	beq	r2,zero,2024498 <ethernet_input+0x224>
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 2024428:	e0bfff17 	ldw	r2,-4(fp)
 202442c:	10800cc4 	addi	r2,r2,51
 2024430:	e1bffe17 	ldw	r6,-8(fp)
 2024434:	100b883a 	mov	r5,r2
 2024438:	e13fff17 	ldw	r4,-4(fp)
 202443c:	202347c0 	call	202347c <etharp_arp_input>
      break;
 2024440:	00000f06 	br	2024480 <ethernet_input+0x20c>
      pppoe_data_input(netif, p);
      break;
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
 2024444:	008085f4 	movhi	r2,535
 2024448:	10a86704 	addi	r2,r2,-24164
 202444c:	10801417 	ldw	r2,80(r2)
 2024450:	10c00044 	addi	r3,r2,1
 2024454:	008085f4 	movhi	r2,535
 2024458:	10a86704 	addi	r2,r2,-24164
 202445c:	10c01415 	stw	r3,80(r2)
      ETHARP_STATS_INC(etharp.drop);
 2024460:	008085f4 	movhi	r2,535
 2024464:	10a86704 	addi	r2,r2,-24164
 2024468:	10800f17 	ldw	r2,60(r2)
 202446c:	10c00044 	addi	r3,r2,1
 2024470:	008085f4 	movhi	r2,535
 2024474:	10a86704 	addi	r2,r2,-24164
 2024478:	10c00f15 	stw	r3,60(r2)
      goto free_and_return;
 202447c:	00000706 	br	202449c <ethernet_input+0x228>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 2024480:	0005883a 	mov	r2,zero
 2024484:	00000806 	br	20244a8 <ethernet_input+0x234>
  switch (type) {
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
 2024488:	0001883a 	nop
 202448c:	00000306 	br	202449c <ethernet_input+0x228>
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
 2024490:	0001883a 	nop
 2024494:	00000106 	br	202449c <ethernet_input+0x228>
      }
      break;
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
 2024498:	0001883a 	nop
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 202449c:	e13ffe17 	ldw	r4,-8(fp)
 20244a0:	201aa200 	call	201aa20 <pbuf_free>
  return ERR_OK;
 20244a4:	0005883a 	mov	r2,zero
}
 20244a8:	e037883a 	mov	sp,fp
 20244ac:	dfc00117 	ldw	ra,4(sp)
 20244b0:	df000017 	ldw	fp,0(sp)
 20244b4:	dec00204 	addi	sp,sp,8
 20244b8:	f800283a 	ret

020244bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20244bc:	defffd04 	addi	sp,sp,-12
 20244c0:	dfc00215 	stw	ra,8(sp)
 20244c4:	df000115 	stw	fp,4(sp)
 20244c8:	df000104 	addi	fp,sp,4
 20244cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20244d0:	d1600804 	addi	r5,gp,-32736
 20244d4:	e13fff17 	ldw	r4,-4(fp)
 20244d8:	20275300 	call	2027530 <alt_dev_llist_insert>
}
 20244dc:	e037883a 	mov	sp,fp
 20244e0:	dfc00117 	ldw	ra,4(sp)
 20244e4:	df000017 	ldw	fp,0(sp)
 20244e8:	dec00204 	addi	sp,sp,8
 20244ec:	f800283a 	ret

020244f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20244f0:	defffd04 	addi	sp,sp,-12
 20244f4:	dfc00215 	stw	ra,8(sp)
 20244f8:	df000115 	stw	fp,4(sp)
 20244fc:	df000104 	addi	fp,sp,4
 2024500:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 2024504:	20281840 	call	2028184 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2024508:	00800044 	movi	r2,1
 202450c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2024510:	0001883a 	nop
 2024514:	e037883a 	mov	sp,fp
 2024518:	dfc00117 	ldw	ra,4(sp)
 202451c:	df000017 	ldw	fp,0(sp)
 2024520:	dec00204 	addi	sp,sp,8
 2024524:	f800283a 	ret

02024528 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2024528:	defffe04 	addi	sp,sp,-8
 202452c:	dfc00115 	stw	ra,4(sp)
 2024530:	df000015 	stw	fp,0(sp)
 2024534:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 2024538:	01c0fa04 	movi	r7,1000
 202453c:	018000c4 	movi	r6,3
 2024540:	000b883a 	mov	r5,zero
 2024544:	01014134 	movhi	r4,1284
 2024548:	21040804 	addi	r4,r4,4128
 202454c:	2025f480 	call	2025f48 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 2024550:	01800084 	movi	r6,2
 2024554:	000b883a 	mov	r5,zero
 2024558:	01008134 	movhi	r4,516
 202455c:	2110fc04 	addi	r4,r4,17392
 2024560:	20247380 	call	2024738 <altera_avalon_jtag_uart_init>
 2024564:	01008134 	movhi	r4,516
 2024568:	2110f204 	addi	r4,r4,17352
 202456c:	20244bc0 	call	20244bc <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TSE_RX_0, sgdma_tse_rx_0);
 2024570:	000d883a 	mov	r6,zero
 2024574:	000b883a 	mov	r5,zero
 2024578:	01008134 	movhi	r4,516
 202457c:	21150c04 	addi	r4,r4,21552
 2024580:	2025e280 	call	2025e28 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TSE_TX_0, sgdma_tse_tx_0);
 2024584:	01800044 	movi	r6,1
 2024588:	000b883a 	mov	r5,zero
 202458c:	01008134 	movhi	r4,516
 2024590:	21151804 	addi	r4,r4,21600
 2024594:	2025e280 	call	2025e28 <alt_avalon_sgdma_init>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 2024598:	01800104 	movi	r6,4
 202459c:	000b883a 	mov	r5,zero
 20245a0:	01008134 	movhi	r4,516
 20245a4:	21152e04 	addi	r4,r4,21688
 20245a8:	20260d40 	call	20260d4 <altera_avalon_uart_init>
 20245ac:	01008134 	movhi	r4,516
 20245b0:	21152404 	addi	r4,r4,21648
 20245b4:	20244bc0 	call	20244bc <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE_MAC_0, tse_mac_0);
 20245b8:	0001883a 	nop
}
 20245bc:	0001883a 	nop
 20245c0:	e037883a 	mov	sp,fp
 20245c4:	dfc00117 	ldw	ra,4(sp)
 20245c8:	df000017 	ldw	fp,0(sp)
 20245cc:	dec00204 	addi	sp,sp,8
 20245d0:	f800283a 	ret

020245d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 20245d4:	defffa04 	addi	sp,sp,-24
 20245d8:	dfc00515 	stw	ra,20(sp)
 20245dc:	df000415 	stw	fp,16(sp)
 20245e0:	df000404 	addi	fp,sp,16
 20245e4:	e13ffd15 	stw	r4,-12(fp)
 20245e8:	e17ffe15 	stw	r5,-8(fp)
 20245ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20245f0:	e0bffd17 	ldw	r2,-12(fp)
 20245f4:	10800017 	ldw	r2,0(r2)
 20245f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20245fc:	e0bffc17 	ldw	r2,-16(fp)
 2024600:	10c00a04 	addi	r3,r2,40
 2024604:	e0bffd17 	ldw	r2,-12(fp)
 2024608:	10800217 	ldw	r2,8(r2)
 202460c:	100f883a 	mov	r7,r2
 2024610:	e1bfff17 	ldw	r6,-4(fp)
 2024614:	e17ffe17 	ldw	r5,-8(fp)
 2024618:	1809883a 	mov	r4,r3
 202461c:	2024c840 	call	2024c84 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2024620:	e037883a 	mov	sp,fp
 2024624:	dfc00117 	ldw	ra,4(sp)
 2024628:	df000017 	ldw	fp,0(sp)
 202462c:	dec00204 	addi	sp,sp,8
 2024630:	f800283a 	ret

02024634 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2024634:	defffa04 	addi	sp,sp,-24
 2024638:	dfc00515 	stw	ra,20(sp)
 202463c:	df000415 	stw	fp,16(sp)
 2024640:	df000404 	addi	fp,sp,16
 2024644:	e13ffd15 	stw	r4,-12(fp)
 2024648:	e17ffe15 	stw	r5,-8(fp)
 202464c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2024650:	e0bffd17 	ldw	r2,-12(fp)
 2024654:	10800017 	ldw	r2,0(r2)
 2024658:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 202465c:	e0bffc17 	ldw	r2,-16(fp)
 2024660:	10c00a04 	addi	r3,r2,40
 2024664:	e0bffd17 	ldw	r2,-12(fp)
 2024668:	10800217 	ldw	r2,8(r2)
 202466c:	100f883a 	mov	r7,r2
 2024670:	e1bfff17 	ldw	r6,-4(fp)
 2024674:	e17ffe17 	ldw	r5,-8(fp)
 2024678:	1809883a 	mov	r4,r3
 202467c:	2024edc0 	call	2024edc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2024680:	e037883a 	mov	sp,fp
 2024684:	dfc00117 	ldw	ra,4(sp)
 2024688:	df000017 	ldw	fp,0(sp)
 202468c:	dec00204 	addi	sp,sp,8
 2024690:	f800283a 	ret

02024694 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2024694:	defffc04 	addi	sp,sp,-16
 2024698:	dfc00315 	stw	ra,12(sp)
 202469c:	df000215 	stw	fp,8(sp)
 20246a0:	df000204 	addi	fp,sp,8
 20246a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20246a8:	e0bfff17 	ldw	r2,-4(fp)
 20246ac:	10800017 	ldw	r2,0(r2)
 20246b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 20246b4:	e0bffe17 	ldw	r2,-8(fp)
 20246b8:	10c00a04 	addi	r3,r2,40
 20246bc:	e0bfff17 	ldw	r2,-4(fp)
 20246c0:	10800217 	ldw	r2,8(r2)
 20246c4:	100b883a 	mov	r5,r2
 20246c8:	1809883a 	mov	r4,r3
 20246cc:	2024b2c0 	call	2024b2c <altera_avalon_jtag_uart_close>
}
 20246d0:	e037883a 	mov	sp,fp
 20246d4:	dfc00117 	ldw	ra,4(sp)
 20246d8:	df000017 	ldw	fp,0(sp)
 20246dc:	dec00204 	addi	sp,sp,8
 20246e0:	f800283a 	ret

020246e4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 20246e4:	defffa04 	addi	sp,sp,-24
 20246e8:	dfc00515 	stw	ra,20(sp)
 20246ec:	df000415 	stw	fp,16(sp)
 20246f0:	df000404 	addi	fp,sp,16
 20246f4:	e13ffd15 	stw	r4,-12(fp)
 20246f8:	e17ffe15 	stw	r5,-8(fp)
 20246fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2024700:	e0bffd17 	ldw	r2,-12(fp)
 2024704:	10800017 	ldw	r2,0(r2)
 2024708:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 202470c:	e0bffc17 	ldw	r2,-16(fp)
 2024710:	10800a04 	addi	r2,r2,40
 2024714:	e1bfff17 	ldw	r6,-4(fp)
 2024718:	e17ffe17 	ldw	r5,-8(fp)
 202471c:	1009883a 	mov	r4,r2
 2024720:	2024b940 	call	2024b94 <altera_avalon_jtag_uart_ioctl>
}
 2024724:	e037883a 	mov	sp,fp
 2024728:	dfc00117 	ldw	ra,4(sp)
 202472c:	df000017 	ldw	fp,0(sp)
 2024730:	dec00204 	addi	sp,sp,8
 2024734:	f800283a 	ret

02024738 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2024738:	defff304 	addi	sp,sp,-52
 202473c:	dfc00c15 	stw	ra,48(sp)
 2024740:	df000b15 	stw	fp,44(sp)
 2024744:	df000b04 	addi	fp,sp,44
 2024748:	e13ff915 	stw	r4,-28(fp)
 202474c:	e17ffa15 	stw	r5,-24(fp)
 2024750:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
 2024754:	e0bff917 	ldw	r2,-28(fp)
 2024758:	10800a04 	addi	r2,r2,40
 202475c:	e0bff615 	stw	r2,-40(fp)
 2024760:	00800044 	movi	r2,1
 2024764:	e0bff88d 	sth	r2,-30(fp)
 2024768:	e0bff88b 	ldhu	r2,-30(fp)
 202476c:	10000226 	beq	r2,zero,2024778 <altera_avalon_jtag_uart_init+0x40>
 2024770:	e0bff88b 	ldhu	r2,-30(fp)
 2024774:	00000106 	br	202477c <altera_avalon_jtag_uart_init+0x44>
 2024778:	00800044 	movi	r2,1
 202477c:	e0fff88b 	ldhu	r3,-30(fp)
 2024780:	180b883a 	mov	r5,r3
 2024784:	1009883a 	mov	r4,r2
 2024788:	200d7f00 	call	200d7f0 <xQueueCreateCountingSemaphore>
 202478c:	1007883a 	mov	r3,r2
 2024790:	e0bff617 	ldw	r2,-40(fp)
 2024794:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 2024798:	e0bff917 	ldw	r2,-28(fp)
 202479c:	10800b04 	addi	r2,r2,44
 20247a0:	e0bff715 	stw	r2,-36(fp)
 20247a4:	00800044 	movi	r2,1
 20247a8:	e0bff80d 	sth	r2,-32(fp)
 20247ac:	e0bff80b 	ldhu	r2,-32(fp)
 20247b0:	10000226 	beq	r2,zero,20247bc <altera_avalon_jtag_uart_init+0x84>
 20247b4:	e0bff80b 	ldhu	r2,-32(fp)
 20247b8:	00000106 	br	20247c0 <altera_avalon_jtag_uart_init+0x88>
 20247bc:	00800044 	movi	r2,1
 20247c0:	e0fff80b 	ldhu	r3,-32(fp)
 20247c4:	180b883a 	mov	r5,r3
 20247c8:	1009883a 	mov	r4,r2
 20247cc:	200d7f00 	call	200d7f0 <xQueueCreateCountingSemaphore>
 20247d0:	1007883a 	mov	r3,r2
 20247d4:	e0bff717 	ldw	r2,-36(fp)
 20247d8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20247dc:	e0bff917 	ldw	r2,-28(fp)
 20247e0:	00c00044 	movi	r3,1
 20247e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 20247e8:	e0bff917 	ldw	r2,-28(fp)
 20247ec:	10800017 	ldw	r2,0(r2)
 20247f0:	10800104 	addi	r2,r2,4
 20247f4:	1007883a 	mov	r3,r2
 20247f8:	e0bff917 	ldw	r2,-28(fp)
 20247fc:	10800817 	ldw	r2,32(r2)
 2024800:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2024804:	e0bffa17 	ldw	r2,-24(fp)
 2024808:	e0fffb17 	ldw	r3,-20(fp)
 202480c:	d8000015 	stw	zero,0(sp)
 2024810:	e1fff917 	ldw	r7,-28(fp)
 2024814:	018080b4 	movhi	r6,514
 2024818:	31922004 	addi	r6,r6,18560
 202481c:	180b883a 	mov	r5,r3
 2024820:	1009883a 	mov	r4,r2
 2024824:	2027a740 	call	2027a74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2024828:	e0bff917 	ldw	r2,-28(fp)
 202482c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2024830:	e0bff917 	ldw	r2,-28(fp)
 2024834:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2024838:	d0e80917 	ldw	r3,-24540(gp)
 202483c:	e1fff917 	ldw	r7,-28(fp)
 2024840:	018080b4 	movhi	r6,514
 2024844:	3192a304 	addi	r6,r6,19084
 2024848:	180b883a 	mov	r5,r3
 202484c:	1009883a 	mov	r4,r2
 2024850:	20272740 	call	2027274 <alt_alarm_start>
 2024854:	1000040e 	bge	r2,zero,2024868 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2024858:	e0fff917 	ldw	r3,-28(fp)
 202485c:	00a00034 	movhi	r2,32768
 2024860:	10bfffc4 	addi	r2,r2,-1
 2024864:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2024868:	0001883a 	nop
 202486c:	e037883a 	mov	sp,fp
 2024870:	dfc00117 	ldw	ra,4(sp)
 2024874:	df000017 	ldw	fp,0(sp)
 2024878:	dec00204 	addi	sp,sp,8
 202487c:	f800283a 	ret

02024880 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2024880:	defff804 	addi	sp,sp,-32
 2024884:	df000715 	stw	fp,28(sp)
 2024888:	df000704 	addi	fp,sp,28
 202488c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2024890:	e0bfff17 	ldw	r2,-4(fp)
 2024894:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2024898:	e0bffb17 	ldw	r2,-20(fp)
 202489c:	10800017 	ldw	r2,0(r2)
 20248a0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20248a4:	e0bffc17 	ldw	r2,-16(fp)
 20248a8:	10800104 	addi	r2,r2,4
 20248ac:	10800037 	ldwio	r2,0(r2)
 20248b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 20248b4:	e0bffd17 	ldw	r2,-12(fp)
 20248b8:	1080c00c 	andi	r2,r2,768
 20248bc:	10006d26 	beq	r2,zero,2024a74 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 20248c0:	e0bffd17 	ldw	r2,-12(fp)
 20248c4:	1080400c 	andi	r2,r2,256
 20248c8:	10003526 	beq	r2,zero,20249a0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 20248cc:	00800074 	movhi	r2,1
 20248d0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20248d4:	e0bffb17 	ldw	r2,-20(fp)
 20248d8:	10800c17 	ldw	r2,48(r2)
 20248dc:	10800044 	addi	r2,r2,1
 20248e0:	1081ffcc 	andi	r2,r2,2047
 20248e4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 20248e8:	e0bffb17 	ldw	r2,-20(fp)
 20248ec:	10c00d17 	ldw	r3,52(r2)
 20248f0:	e0bffe17 	ldw	r2,-8(fp)
 20248f4:	18801526 	beq	r3,r2,202494c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 20248f8:	e0bffc17 	ldw	r2,-16(fp)
 20248fc:	10800037 	ldwio	r2,0(r2)
 2024900:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2024904:	e0bff917 	ldw	r2,-28(fp)
 2024908:	10a0000c 	andi	r2,r2,32768
 202490c:	10001126 	beq	r2,zero,2024954 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2024910:	e0bffb17 	ldw	r2,-20(fp)
 2024914:	10800c17 	ldw	r2,48(r2)
 2024918:	e0fff917 	ldw	r3,-28(fp)
 202491c:	1809883a 	mov	r4,r3
 2024920:	e0fffb17 	ldw	r3,-20(fp)
 2024924:	1885883a 	add	r2,r3,r2
 2024928:	10801004 	addi	r2,r2,64
 202492c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2024930:	e0bffb17 	ldw	r2,-20(fp)
 2024934:	10800c17 	ldw	r2,48(r2)
 2024938:	10800044 	addi	r2,r2,1
 202493c:	10c1ffcc 	andi	r3,r2,2047
 2024940:	e0bffb17 	ldw	r2,-20(fp)
 2024944:	10c00c15 	stw	r3,48(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2024948:	003fe206 	br	20248d4 <__alt_mem_mem_0+0xfd0048d4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 202494c:	0001883a 	nop
 2024950:	00000106 	br	2024958 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2024954:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2024958:	e0bff917 	ldw	r2,-28(fp)
 202495c:	10bfffec 	andhi	r2,r2,65535
 2024960:	10000f26 	beq	r2,zero,20249a0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2024964:	e0bffb17 	ldw	r2,-20(fp)
 2024968:	10c00817 	ldw	r3,32(r2)
 202496c:	00bfff84 	movi	r2,-2
 2024970:	1886703a 	and	r3,r3,r2
 2024974:	e0bffb17 	ldw	r2,-20(fp)
 2024978:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 202497c:	e0bffc17 	ldw	r2,-16(fp)
 2024980:	10800104 	addi	r2,r2,4
 2024984:	1007883a 	mov	r3,r2
 2024988:	e0bffb17 	ldw	r2,-20(fp)
 202498c:	10800817 	ldw	r2,32(r2)
 2024990:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2024994:	e0bffc17 	ldw	r2,-16(fp)
 2024998:	10800104 	addi	r2,r2,4
 202499c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 20249a0:	e0bffd17 	ldw	r2,-12(fp)
 20249a4:	1080800c 	andi	r2,r2,512
 20249a8:	103fbe26 	beq	r2,zero,20248a4 <__alt_mem_mem_0+0xfd0048a4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 20249ac:	e0bffd17 	ldw	r2,-12(fp)
 20249b0:	1004d43a 	srli	r2,r2,16
 20249b4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20249b8:	00001406 	br	2024a0c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 20249bc:	e0bffc17 	ldw	r2,-16(fp)
 20249c0:	e0fffb17 	ldw	r3,-20(fp)
 20249c4:	18c00f17 	ldw	r3,60(r3)
 20249c8:	e13ffb17 	ldw	r4,-20(fp)
 20249cc:	20c7883a 	add	r3,r4,r3
 20249d0:	18c21004 	addi	r3,r3,2112
 20249d4:	18c00003 	ldbu	r3,0(r3)
 20249d8:	18c03fcc 	andi	r3,r3,255
 20249dc:	18c0201c 	xori	r3,r3,128
 20249e0:	18ffe004 	addi	r3,r3,-128
 20249e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20249e8:	e0bffb17 	ldw	r2,-20(fp)
 20249ec:	10800f17 	ldw	r2,60(r2)
 20249f0:	10800044 	addi	r2,r2,1
 20249f4:	10c1ffcc 	andi	r3,r2,2047
 20249f8:	e0bffb17 	ldw	r2,-20(fp)
 20249fc:	10c00f15 	stw	r3,60(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2024a00:	e0bffa17 	ldw	r2,-24(fp)
 2024a04:	10bfffc4 	addi	r2,r2,-1
 2024a08:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2024a0c:	e0bffa17 	ldw	r2,-24(fp)
 2024a10:	10000526 	beq	r2,zero,2024a28 <altera_avalon_jtag_uart_irq+0x1a8>
 2024a14:	e0bffb17 	ldw	r2,-20(fp)
 2024a18:	10c00f17 	ldw	r3,60(r2)
 2024a1c:	e0bffb17 	ldw	r2,-20(fp)
 2024a20:	10800e17 	ldw	r2,56(r2)
 2024a24:	18bfe51e 	bne	r3,r2,20249bc <__alt_mem_mem_0+0xfd0049bc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2024a28:	e0bffa17 	ldw	r2,-24(fp)
 2024a2c:	103f9d26 	beq	r2,zero,20248a4 <__alt_mem_mem_0+0xfd0048a4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2024a30:	e0bffb17 	ldw	r2,-20(fp)
 2024a34:	10c00817 	ldw	r3,32(r2)
 2024a38:	00bfff44 	movi	r2,-3
 2024a3c:	1886703a 	and	r3,r3,r2
 2024a40:	e0bffb17 	ldw	r2,-20(fp)
 2024a44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2024a48:	e0bffb17 	ldw	r2,-20(fp)
 2024a4c:	10800017 	ldw	r2,0(r2)
 2024a50:	10800104 	addi	r2,r2,4
 2024a54:	1007883a 	mov	r3,r2
 2024a58:	e0bffb17 	ldw	r2,-20(fp)
 2024a5c:	10800817 	ldw	r2,32(r2)
 2024a60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2024a64:	e0bffc17 	ldw	r2,-16(fp)
 2024a68:	10800104 	addi	r2,r2,4
 2024a6c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2024a70:	003f8c06 	br	20248a4 <__alt_mem_mem_0+0xfd0048a4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2024a74:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2024a78:	0001883a 	nop
 2024a7c:	e037883a 	mov	sp,fp
 2024a80:	df000017 	ldw	fp,0(sp)
 2024a84:	dec00104 	addi	sp,sp,4
 2024a88:	f800283a 	ret

02024a8c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2024a8c:	defff804 	addi	sp,sp,-32
 2024a90:	df000715 	stw	fp,28(sp)
 2024a94:	df000704 	addi	fp,sp,28
 2024a98:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2024a9c:	e0bffb17 	ldw	r2,-20(fp)
 2024aa0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2024aa4:	e0bff917 	ldw	r2,-28(fp)
 2024aa8:	10800017 	ldw	r2,0(r2)
 2024aac:	10800104 	addi	r2,r2,4
 2024ab0:	10800037 	ldwio	r2,0(r2)
 2024ab4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2024ab8:	e0bffa17 	ldw	r2,-24(fp)
 2024abc:	1081000c 	andi	r2,r2,1024
 2024ac0:	10000b26 	beq	r2,zero,2024af0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2024ac4:	e0bff917 	ldw	r2,-28(fp)
 2024ac8:	10800017 	ldw	r2,0(r2)
 2024acc:	10800104 	addi	r2,r2,4
 2024ad0:	1007883a 	mov	r3,r2
 2024ad4:	e0bff917 	ldw	r2,-28(fp)
 2024ad8:	10800817 	ldw	r2,32(r2)
 2024adc:	10810014 	ori	r2,r2,1024
 2024ae0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2024ae4:	e0bff917 	ldw	r2,-28(fp)
 2024ae8:	10000915 	stw	zero,36(r2)
 2024aec:	00000a06 	br	2024b18 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2024af0:	e0bff917 	ldw	r2,-28(fp)
 2024af4:	10c00917 	ldw	r3,36(r2)
 2024af8:	00a00034 	movhi	r2,32768
 2024afc:	10bfff04 	addi	r2,r2,-4
 2024b00:	10c00536 	bltu	r2,r3,2024b18 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 2024b04:	e0bff917 	ldw	r2,-28(fp)
 2024b08:	10800917 	ldw	r2,36(r2)
 2024b0c:	10c00044 	addi	r3,r2,1
 2024b10:	e0bff917 	ldw	r2,-28(fp)
 2024b14:	10c00915 	stw	r3,36(r2)
 2024b18:	d0a80917 	ldw	r2,-24540(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2024b1c:	e037883a 	mov	sp,fp
 2024b20:	df000017 	ldw	fp,0(sp)
 2024b24:	dec00104 	addi	sp,sp,4
 2024b28:	f800283a 	ret

02024b2c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2024b2c:	defffd04 	addi	sp,sp,-12
 2024b30:	df000215 	stw	fp,8(sp)
 2024b34:	df000204 	addi	fp,sp,8
 2024b38:	e13ffe15 	stw	r4,-8(fp)
 2024b3c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2024b40:	00000506 	br	2024b58 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2024b44:	e0bfff17 	ldw	r2,-4(fp)
 2024b48:	1090000c 	andi	r2,r2,16384
 2024b4c:	10000226 	beq	r2,zero,2024b58 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2024b50:	00bffd44 	movi	r2,-11
 2024b54:	00000b06 	br	2024b84 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2024b58:	e0bffe17 	ldw	r2,-8(fp)
 2024b5c:	10c00f17 	ldw	r3,60(r2)
 2024b60:	e0bffe17 	ldw	r2,-8(fp)
 2024b64:	10800e17 	ldw	r2,56(r2)
 2024b68:	18800526 	beq	r3,r2,2024b80 <altera_avalon_jtag_uart_close+0x54>
 2024b6c:	e0bffe17 	ldw	r2,-8(fp)
 2024b70:	10c00917 	ldw	r3,36(r2)
 2024b74:	e0bffe17 	ldw	r2,-8(fp)
 2024b78:	10800117 	ldw	r2,4(r2)
 2024b7c:	18bff136 	bltu	r3,r2,2024b44 <__alt_mem_mem_0+0xfd004b44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2024b80:	0005883a 	mov	r2,zero
}
 2024b84:	e037883a 	mov	sp,fp
 2024b88:	df000017 	ldw	fp,0(sp)
 2024b8c:	dec00104 	addi	sp,sp,4
 2024b90:	f800283a 	ret

02024b94 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2024b94:	defffa04 	addi	sp,sp,-24
 2024b98:	df000515 	stw	fp,20(sp)
 2024b9c:	df000504 	addi	fp,sp,20
 2024ba0:	e13ffd15 	stw	r4,-12(fp)
 2024ba4:	e17ffe15 	stw	r5,-8(fp)
 2024ba8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2024bac:	00bff9c4 	movi	r2,-25
 2024bb0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2024bb4:	e0bffe17 	ldw	r2,-8(fp)
 2024bb8:	10da8060 	cmpeqi	r3,r2,27137
 2024bbc:	1800031e 	bne	r3,zero,2024bcc <altera_avalon_jtag_uart_ioctl+0x38>
 2024bc0:	109a80a0 	cmpeqi	r2,r2,27138
 2024bc4:	1000181e 	bne	r2,zero,2024c28 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 2024bc8:	00002906 	br	2024c70 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2024bcc:	e0bffd17 	ldw	r2,-12(fp)
 2024bd0:	10c00117 	ldw	r3,4(r2)
 2024bd4:	00a00034 	movhi	r2,32768
 2024bd8:	10bfffc4 	addi	r2,r2,-1
 2024bdc:	18802126 	beq	r3,r2,2024c64 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 2024be0:	e0bfff17 	ldw	r2,-4(fp)
 2024be4:	10800017 	ldw	r2,0(r2)
 2024be8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2024bec:	e0bffc17 	ldw	r2,-16(fp)
 2024bf0:	10800090 	cmplti	r2,r2,2
 2024bf4:	1000061e 	bne	r2,zero,2024c10 <altera_avalon_jtag_uart_ioctl+0x7c>
 2024bf8:	e0fffc17 	ldw	r3,-16(fp)
 2024bfc:	00a00034 	movhi	r2,32768
 2024c00:	10bfffc4 	addi	r2,r2,-1
 2024c04:	18800226 	beq	r3,r2,2024c10 <altera_avalon_jtag_uart_ioctl+0x7c>
 2024c08:	e0bffc17 	ldw	r2,-16(fp)
 2024c0c:	00000206 	br	2024c18 <altera_avalon_jtag_uart_ioctl+0x84>
 2024c10:	00a00034 	movhi	r2,32768
 2024c14:	10bfff84 	addi	r2,r2,-2
 2024c18:	e0fffd17 	ldw	r3,-12(fp)
 2024c1c:	18800115 	stw	r2,4(r3)
      rc = 0;
 2024c20:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2024c24:	00000f06 	br	2024c64 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2024c28:	e0bffd17 	ldw	r2,-12(fp)
 2024c2c:	10c00117 	ldw	r3,4(r2)
 2024c30:	00a00034 	movhi	r2,32768
 2024c34:	10bfffc4 	addi	r2,r2,-1
 2024c38:	18800c26 	beq	r3,r2,2024c6c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2024c3c:	e0bffd17 	ldw	r2,-12(fp)
 2024c40:	10c00917 	ldw	r3,36(r2)
 2024c44:	e0bffd17 	ldw	r2,-12(fp)
 2024c48:	10800117 	ldw	r2,4(r2)
 2024c4c:	1885803a 	cmpltu	r2,r3,r2
 2024c50:	10c03fcc 	andi	r3,r2,255
 2024c54:	e0bfff17 	ldw	r2,-4(fp)
 2024c58:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2024c5c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2024c60:	00000206 	br	2024c6c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2024c64:	0001883a 	nop
 2024c68:	00000106 	br	2024c70 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2024c6c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2024c70:	e0bffb17 	ldw	r2,-20(fp)
}
 2024c74:	e037883a 	mov	sp,fp
 2024c78:	df000017 	ldw	fp,0(sp)
 2024c7c:	dec00104 	addi	sp,sp,4
 2024c80:	f800283a 	ret

02024c84 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2024c84:	defff004 	addi	sp,sp,-64
 2024c88:	dfc00f15 	stw	ra,60(sp)
 2024c8c:	df000e15 	stw	fp,56(sp)
 2024c90:	df000e04 	addi	fp,sp,56
 2024c94:	e13ffb15 	stw	r4,-20(fp)
 2024c98:	e17ffc15 	stw	r5,-16(fp)
 2024c9c:	e1bffd15 	stw	r6,-12(fp)
 2024ca0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 2024ca4:	e0bffc17 	ldw	r2,-16(fp)
 2024ca8:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 2024cac:	e0bffb17 	ldw	r2,-20(fp)
 2024cb0:	10800a17 	ldw	r2,40(r2)
 2024cb4:	e0bff915 	stw	r2,-28(fp)
 2024cb8:	e03ffa0d 	sth	zero,-24(fp)
 * converted into the functions return value.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (xSemaphoreHandle sem, alt_u16 timeout)
{
	return xSemaphoreTake(sem, timeout) ? 0 : -1;
 2024cbc:	e0bffa0b 	ldhu	r2,-24(fp)
 2024cc0:	100b883a 	mov	r5,r2
 2024cc4:	e13ff917 	ldw	r4,-28(fp)
 2024cc8:	200ddd40 	call	200ddd4 <xQueueSemaphoreTake>

  while (space > 0)
 2024ccc:	00004706 	br	2024dec <altera_avalon_jtag_uart_read+0x168>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2024cd0:	e0bffb17 	ldw	r2,-20(fp)
 2024cd4:	10800c17 	ldw	r2,48(r2)
 2024cd8:	e0bff515 	stw	r2,-44(fp)
      out = sp->rx_out;
 2024cdc:	e0bffb17 	ldw	r2,-20(fp)
 2024ce0:	10800d17 	ldw	r2,52(r2)
 2024ce4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 2024ce8:	e0fff517 	ldw	r3,-44(fp)
 2024cec:	e0bff617 	ldw	r2,-40(fp)
 2024cf0:	18800536 	bltu	r3,r2,2024d08 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 2024cf4:	e0fff517 	ldw	r3,-44(fp)
 2024cf8:	e0bff617 	ldw	r2,-40(fp)
 2024cfc:	1885c83a 	sub	r2,r3,r2
 2024d00:	e0bff315 	stw	r2,-52(fp)
 2024d04:	00000406 	br	2024d18 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2024d08:	00c20004 	movi	r3,2048
 2024d0c:	e0bff617 	ldw	r2,-40(fp)
 2024d10:	1885c83a 	sub	r2,r3,r2
 2024d14:	e0bff315 	stw	r2,-52(fp)

      if (n == 0)
 2024d18:	e0bff317 	ldw	r2,-52(fp)
 2024d1c:	10001e26 	beq	r2,zero,2024d98 <altera_avalon_jtag_uart_read+0x114>
        break; /* No more data available */

      if (n > space)
 2024d20:	e0fffd17 	ldw	r3,-12(fp)
 2024d24:	e0bff317 	ldw	r2,-52(fp)
 2024d28:	1880022e 	bgeu	r3,r2,2024d34 <altera_avalon_jtag_uart_read+0xb0>
        n = space;
 2024d2c:	e0bffd17 	ldw	r2,-12(fp)
 2024d30:	e0bff315 	stw	r2,-52(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2024d34:	e0bffb17 	ldw	r2,-20(fp)
 2024d38:	10c01004 	addi	r3,r2,64
 2024d3c:	e0bff617 	ldw	r2,-40(fp)
 2024d40:	1885883a 	add	r2,r3,r2
 2024d44:	e1bff317 	ldw	r6,-52(fp)
 2024d48:	100b883a 	mov	r5,r2
 2024d4c:	e13ff217 	ldw	r4,-56(fp)
 2024d50:	2005e580 	call	2005e58 <memcpy>
      ptr   += n;
 2024d54:	e0fff217 	ldw	r3,-56(fp)
 2024d58:	e0bff317 	ldw	r2,-52(fp)
 2024d5c:	1885883a 	add	r2,r3,r2
 2024d60:	e0bff215 	stw	r2,-56(fp)
      space -= n;
 2024d64:	e0fffd17 	ldw	r3,-12(fp)
 2024d68:	e0bff317 	ldw	r2,-52(fp)
 2024d6c:	1885c83a 	sub	r2,r3,r2
 2024d70:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2024d74:	e0fff617 	ldw	r3,-40(fp)
 2024d78:	e0bff317 	ldw	r2,-52(fp)
 2024d7c:	1885883a 	add	r2,r3,r2
 2024d80:	10c1ffcc 	andi	r3,r2,2047
 2024d84:	e0bffb17 	ldw	r2,-20(fp)
 2024d88:	10c00d15 	stw	r3,52(r2)
    }
    while (space > 0);
 2024d8c:	e0bffd17 	ldw	r2,-12(fp)
 2024d90:	00bfcf16 	blt	zero,r2,2024cd0 <__alt_mem_mem_0+0xfd004cd0>
 2024d94:	00000106 	br	2024d9c <altera_avalon_jtag_uart_read+0x118>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2024d98:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2024d9c:	e0fff217 	ldw	r3,-56(fp)
 2024da0:	e0bffc17 	ldw	r2,-16(fp)
 2024da4:	1880141e 	bne	r3,r2,2024df8 <altera_avalon_jtag_uart_read+0x174>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2024da8:	e0bffe17 	ldw	r2,-8(fp)
 2024dac:	1090000c 	andi	r2,r2,16384
 2024db0:	1000131e 	bne	r2,zero,2024e00 <altera_avalon_jtag_uart_read+0x17c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2024db4:	0001883a 	nop
 2024db8:	e0bffb17 	ldw	r2,-20(fp)
 2024dbc:	10c00c17 	ldw	r3,48(r2)
 2024dc0:	e0bff517 	ldw	r2,-44(fp)
 2024dc4:	1880051e 	bne	r3,r2,2024ddc <altera_avalon_jtag_uart_read+0x158>
 2024dc8:	e0bffb17 	ldw	r2,-20(fp)
 2024dcc:	10c00917 	ldw	r3,36(r2)
 2024dd0:	e0bffb17 	ldw	r2,-20(fp)
 2024dd4:	10800117 	ldw	r2,4(r2)
 2024dd8:	18bff736 	bltu	r3,r2,2024db8 <__alt_mem_mem_0+0xfd004db8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2024ddc:	e0bffb17 	ldw	r2,-20(fp)
 2024de0:	10c00c17 	ldw	r3,48(r2)
 2024de4:	e0bff517 	ldw	r2,-44(fp)
 2024de8:	18800726 	beq	r3,r2,2024e08 <altera_avalon_jtag_uart_read+0x184>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2024dec:	e0bffd17 	ldw	r2,-12(fp)
 2024df0:	00bfb716 	blt	zero,r2,2024cd0 <__alt_mem_mem_0+0xfd004cd0>
 2024df4:	00000506 	br	2024e0c <altera_avalon_jtag_uart_read+0x188>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2024df8:	0001883a 	nop
 2024dfc:	00000306 	br	2024e0c <altera_avalon_jtag_uart_read+0x188>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2024e00:	0001883a 	nop
 2024e04:	00000106 	br	2024e0c <altera_avalon_jtag_uart_read+0x188>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2024e08:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 2024e0c:	e0bffb17 	ldw	r2,-20(fp)
 2024e10:	10800a17 	ldw	r2,40(r2)
 2024e14:	000f883a 	mov	r7,zero
 2024e18:	000d883a 	mov	r6,zero
 2024e1c:	000b883a 	mov	r5,zero
 2024e20:	1009883a 	mov	r4,r2
 2024e24:	200d8480 	call	200d848 <xQueueGenericSend>

  if (ptr != buffer)
 2024e28:	e0fff217 	ldw	r3,-56(fp)
 2024e2c:	e0bffc17 	ldw	r2,-16(fp)
 2024e30:	18801826 	beq	r3,r2,2024e94 <altera_avalon_jtag_uart_read+0x210>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2024e34:	0005303a 	rdctl	r2,status
 2024e38:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2024e3c:	e0fff817 	ldw	r3,-32(fp)
 2024e40:	00bfff84 	movi	r2,-2
 2024e44:	1884703a 	and	r2,r3,r2
 2024e48:	1001703a 	wrctl	status,r2
  
  return context;
 2024e4c:	e0bff817 	ldw	r2,-32(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2024e50:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2024e54:	e0bffb17 	ldw	r2,-20(fp)
 2024e58:	10800817 	ldw	r2,32(r2)
 2024e5c:	10c00054 	ori	r3,r2,1
 2024e60:	e0bffb17 	ldw	r2,-20(fp)
 2024e64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2024e68:	e0bffb17 	ldw	r2,-20(fp)
 2024e6c:	10800017 	ldw	r2,0(r2)
 2024e70:	10800104 	addi	r2,r2,4
 2024e74:	1007883a 	mov	r3,r2
 2024e78:	e0bffb17 	ldw	r2,-20(fp)
 2024e7c:	10800817 	ldw	r2,32(r2)
 2024e80:	18800035 	stwio	r2,0(r3)
 2024e84:	e0bff717 	ldw	r2,-36(fp)
 2024e88:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2024e8c:	e0bff417 	ldw	r2,-48(fp)
 2024e90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2024e94:	e0fff217 	ldw	r3,-56(fp)
 2024e98:	e0bffc17 	ldw	r2,-16(fp)
 2024e9c:	18800426 	beq	r3,r2,2024eb0 <altera_avalon_jtag_uart_read+0x22c>
    return ptr - buffer;
 2024ea0:	e0fff217 	ldw	r3,-56(fp)
 2024ea4:	e0bffc17 	ldw	r2,-16(fp)
 2024ea8:	1885c83a 	sub	r2,r3,r2
 2024eac:	00000606 	br	2024ec8 <altera_avalon_jtag_uart_read+0x244>
  else if (flags & O_NONBLOCK)
 2024eb0:	e0bffe17 	ldw	r2,-8(fp)
 2024eb4:	1090000c 	andi	r2,r2,16384
 2024eb8:	10000226 	beq	r2,zero,2024ec4 <altera_avalon_jtag_uart_read+0x240>
    return -EWOULDBLOCK;
 2024ebc:	00bffd44 	movi	r2,-11
 2024ec0:	00000106 	br	2024ec8 <altera_avalon_jtag_uart_read+0x244>
  else
    return -EIO;
 2024ec4:	00bffec4 	movi	r2,-5
}
 2024ec8:	e037883a 	mov	sp,fp
 2024ecc:	dfc00117 	ldw	ra,4(sp)
 2024ed0:	df000017 	ldw	fp,0(sp)
 2024ed4:	dec00204 	addi	sp,sp,8
 2024ed8:	f800283a 	ret

02024edc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2024edc:	defff004 	addi	sp,sp,-64
 2024ee0:	dfc00f15 	stw	ra,60(sp)
 2024ee4:	df000e15 	stw	fp,56(sp)
 2024ee8:	df000e04 	addi	fp,sp,56
 2024eec:	e13ffb15 	stw	r4,-20(fp)
 2024ef0:	e17ffc15 	stw	r5,-16(fp)
 2024ef4:	e1bffd15 	stw	r6,-12(fp)
 2024ef8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2024efc:	e03ff215 	stw	zero,-56(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2024f00:	e0bffc17 	ldw	r2,-16(fp)
 2024f04:	e0bff415 	stw	r2,-48(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 2024f08:	e0bffb17 	ldw	r2,-20(fp)
 2024f0c:	10800b17 	ldw	r2,44(r2)
 2024f10:	e0bff915 	stw	r2,-28(fp)
 2024f14:	e03ffa0d 	sth	zero,-24(fp)
 2024f18:	e0bffa0b 	ldhu	r2,-24(fp)
 2024f1c:	100b883a 	mov	r5,r2
 2024f20:	e13ff917 	ldw	r4,-28(fp)
 2024f24:	200ddd40 	call	200ddd4 <xQueueSemaphoreTake>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2024f28:	00003706 	br	2025008 <altera_avalon_jtag_uart_write+0x12c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2024f2c:	e0bffb17 	ldw	r2,-20(fp)
 2024f30:	10800e17 	ldw	r2,56(r2)
 2024f34:	e0bff615 	stw	r2,-40(fp)
      out = sp->tx_out;
 2024f38:	e0bffb17 	ldw	r2,-20(fp)
 2024f3c:	10800f17 	ldw	r2,60(r2)
 2024f40:	e0bff215 	stw	r2,-56(fp)

      if (in < out)
 2024f44:	e0fff617 	ldw	r3,-40(fp)
 2024f48:	e0bff217 	ldw	r2,-56(fp)
 2024f4c:	1880062e 	bgeu	r3,r2,2024f68 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 2024f50:	e0fff217 	ldw	r3,-56(fp)
 2024f54:	e0bff617 	ldw	r2,-40(fp)
 2024f58:	1885c83a 	sub	r2,r3,r2
 2024f5c:	10bfffc4 	addi	r2,r2,-1
 2024f60:	e0bff315 	stw	r2,-52(fp)
 2024f64:	00000b06 	br	2024f94 <altera_avalon_jtag_uart_write+0xb8>
      else if (out > 0)
 2024f68:	e0bff217 	ldw	r2,-56(fp)
 2024f6c:	10000526 	beq	r2,zero,2024f84 <altera_avalon_jtag_uart_write+0xa8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2024f70:	00c20004 	movi	r3,2048
 2024f74:	e0bff617 	ldw	r2,-40(fp)
 2024f78:	1885c83a 	sub	r2,r3,r2
 2024f7c:	e0bff315 	stw	r2,-52(fp)
 2024f80:	00000406 	br	2024f94 <altera_avalon_jtag_uart_write+0xb8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2024f84:	00c1ffc4 	movi	r3,2047
 2024f88:	e0bff617 	ldw	r2,-40(fp)
 2024f8c:	1885c83a 	sub	r2,r3,r2
 2024f90:	e0bff315 	stw	r2,-52(fp)

      if (n == 0)
 2024f94:	e0bff317 	ldw	r2,-52(fp)
 2024f98:	10001e26 	beq	r2,zero,2025014 <altera_avalon_jtag_uart_write+0x138>
        break;

      if (n > count)
 2024f9c:	e0fffd17 	ldw	r3,-12(fp)
 2024fa0:	e0bff317 	ldw	r2,-52(fp)
 2024fa4:	1880022e 	bgeu	r3,r2,2024fb0 <altera_avalon_jtag_uart_write+0xd4>
        n = count;
 2024fa8:	e0bffd17 	ldw	r2,-12(fp)
 2024fac:	e0bff315 	stw	r2,-52(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2024fb0:	e0bffb17 	ldw	r2,-20(fp)
 2024fb4:	10c21004 	addi	r3,r2,2112
 2024fb8:	e0bff617 	ldw	r2,-40(fp)
 2024fbc:	1885883a 	add	r2,r3,r2
 2024fc0:	e1bff317 	ldw	r6,-52(fp)
 2024fc4:	e17ffc17 	ldw	r5,-16(fp)
 2024fc8:	1009883a 	mov	r4,r2
 2024fcc:	2005e580 	call	2005e58 <memcpy>
      ptr   += n;
 2024fd0:	e0fffc17 	ldw	r3,-16(fp)
 2024fd4:	e0bff317 	ldw	r2,-52(fp)
 2024fd8:	1885883a 	add	r2,r3,r2
 2024fdc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 2024fe0:	e0fffd17 	ldw	r3,-12(fp)
 2024fe4:	e0bff317 	ldw	r2,-52(fp)
 2024fe8:	1885c83a 	sub	r2,r3,r2
 2024fec:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2024ff0:	e0fff617 	ldw	r3,-40(fp)
 2024ff4:	e0bff317 	ldw	r2,-52(fp)
 2024ff8:	1885883a 	add	r2,r3,r2
 2024ffc:	10c1ffcc 	andi	r3,r2,2047
 2025000:	e0bffb17 	ldw	r2,-20(fp)
 2025004:	10c00e15 	stw	r3,56(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2025008:	e0bffd17 	ldw	r2,-12(fp)
 202500c:	00bfc716 	blt	zero,r2,2024f2c <__alt_mem_mem_0+0xfd004f2c>
 2025010:	00000106 	br	2025018 <altera_avalon_jtag_uart_write+0x13c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2025014:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2025018:	0005303a 	rdctl	r2,status
 202501c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2025020:	e0fff817 	ldw	r3,-32(fp)
 2025024:	00bfff84 	movi	r2,-2
 2025028:	1884703a 	and	r2,r3,r2
 202502c:	1001703a 	wrctl	status,r2
  
  return context;
 2025030:	e0bff817 	ldw	r2,-32(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2025034:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2025038:	e0bffb17 	ldw	r2,-20(fp)
 202503c:	10800817 	ldw	r2,32(r2)
 2025040:	10c00094 	ori	r3,r2,2
 2025044:	e0bffb17 	ldw	r2,-20(fp)
 2025048:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 202504c:	e0bffb17 	ldw	r2,-20(fp)
 2025050:	10800017 	ldw	r2,0(r2)
 2025054:	10800104 	addi	r2,r2,4
 2025058:	1007883a 	mov	r3,r2
 202505c:	e0bffb17 	ldw	r2,-20(fp)
 2025060:	10800817 	ldw	r2,32(r2)
 2025064:	18800035 	stwio	r2,0(r3)
 2025068:	e0bff717 	ldw	r2,-36(fp)
 202506c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2025070:	e0bff517 	ldw	r2,-44(fp)
 2025074:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2025078:	e0bffd17 	ldw	r2,-12(fp)
 202507c:	0080100e 	bge	zero,r2,20250c0 <altera_avalon_jtag_uart_write+0x1e4>
    {
      if (flags & O_NONBLOCK)
 2025080:	e0bffe17 	ldw	r2,-8(fp)
 2025084:	1090000c 	andi	r2,r2,16384
 2025088:	1000101e 	bne	r2,zero,20250cc <altera_avalon_jtag_uart_write+0x1f0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 202508c:	0001883a 	nop
 2025090:	e0bffb17 	ldw	r2,-20(fp)
 2025094:	10c00f17 	ldw	r3,60(r2)
 2025098:	e0bff217 	ldw	r2,-56(fp)
 202509c:	1880051e 	bne	r3,r2,20250b4 <altera_avalon_jtag_uart_write+0x1d8>
 20250a0:	e0bffb17 	ldw	r2,-20(fp)
 20250a4:	10c00917 	ldw	r3,36(r2)
 20250a8:	e0bffb17 	ldw	r2,-20(fp)
 20250ac:	10800117 	ldw	r2,4(r2)
 20250b0:	18bff736 	bltu	r3,r2,2025090 <__alt_mem_mem_0+0xfd005090>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 20250b4:	e0bffb17 	ldw	r2,-20(fp)
 20250b8:	10800917 	ldw	r2,36(r2)
 20250bc:	1000051e 	bne	r2,zero,20250d4 <altera_avalon_jtag_uart_write+0x1f8>
         break;
    }
  }
  while (count > 0);
 20250c0:	e0bffd17 	ldw	r2,-12(fp)
 20250c4:	00bfd016 	blt	zero,r2,2025008 <__alt_mem_mem_0+0xfd005008>
 20250c8:	00000306 	br	20250d8 <altera_avalon_jtag_uart_write+0x1fc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 20250cc:	0001883a 	nop
 20250d0:	00000106 	br	20250d8 <altera_avalon_jtag_uart_write+0x1fc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 20250d4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 20250d8:	e0bffb17 	ldw	r2,-20(fp)
 20250dc:	10800b17 	ldw	r2,44(r2)
 20250e0:	000f883a 	mov	r7,zero
 20250e4:	000d883a 	mov	r6,zero
 20250e8:	000b883a 	mov	r5,zero
 20250ec:	1009883a 	mov	r4,r2
 20250f0:	200d8480 	call	200d848 <xQueueGenericSend>

  if (ptr != start)
 20250f4:	e0fffc17 	ldw	r3,-16(fp)
 20250f8:	e0bff417 	ldw	r2,-48(fp)
 20250fc:	18800426 	beq	r3,r2,2025110 <altera_avalon_jtag_uart_write+0x234>
    return ptr - start;
 2025100:	e0fffc17 	ldw	r3,-16(fp)
 2025104:	e0bff417 	ldw	r2,-48(fp)
 2025108:	1885c83a 	sub	r2,r3,r2
 202510c:	00000606 	br	2025128 <altera_avalon_jtag_uart_write+0x24c>
  else if (flags & O_NONBLOCK)
 2025110:	e0bffe17 	ldw	r2,-8(fp)
 2025114:	1090000c 	andi	r2,r2,16384
 2025118:	10000226 	beq	r2,zero,2025124 <altera_avalon_jtag_uart_write+0x248>
    return -EWOULDBLOCK;
 202511c:	00bffd44 	movi	r2,-11
 2025120:	00000106 	br	2025128 <altera_avalon_jtag_uart_write+0x24c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2025124:	00bffec4 	movi	r2,-5
}
 2025128:	e037883a 	mov	sp,fp
 202512c:	dfc00117 	ldw	ra,4(sp)
 2025130:	df000017 	ldw	fp,0(sp)
 2025134:	dec00204 	addi	sp,sp,8
 2025138:	f800283a 	ret

0202513c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 202513c:	defffe04 	addi	sp,sp,-8
 2025140:	dfc00115 	stw	ra,4(sp)
 2025144:	df000015 	stw	fp,0(sp)
 2025148:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 202514c:	d0a01917 	ldw	r2,-32668(gp)
 2025150:	10000326 	beq	r2,zero,2025160 <alt_get_errno+0x24>
 2025154:	d0a01917 	ldw	r2,-32668(gp)
 2025158:	103ee83a 	callr	r2
 202515c:	00000106 	br	2025164 <alt_get_errno+0x28>
 2025160:	d0a7ce04 	addi	r2,gp,-24776
}
 2025164:	e037883a 	mov	sp,fp
 2025168:	dfc00117 	ldw	ra,4(sp)
 202516c:	df000017 	ldw	fp,0(sp)
 2025170:	dec00204 	addi	sp,sp,8
 2025174:	f800283a 	ret

02025178 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 2025178:	defffc04 	addi	sp,sp,-16
 202517c:	df000315 	stw	fp,12(sp)
 2025180:	df000304 	addi	fp,sp,12
 2025184:	e13ffe15 	stw	r4,-8(fp)
 2025188:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 202518c:	e0bffe17 	ldw	r2,-8(fp)
 2025190:	10800317 	ldw	r2,12(r2)
 2025194:	10800037 	ldwio	r2,0(r2)
 2025198:	1080040c 	andi	r2,r2,16
 202519c:	10000226 	beq	r2,zero,20251a8 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
 20251a0:	00bffc04 	movi	r2,-16
 20251a4:	00003906 	br	202528c <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 20251a8:	e0bffe17 	ldw	r2,-8(fp)
 20251ac:	10800317 	ldw	r2,12(r2)
 20251b0:	10800404 	addi	r2,r2,16
 20251b4:	e0fffe17 	ldw	r3,-8(fp)
 20251b8:	18c00317 	ldw	r3,12(r3)
 20251bc:	18c00404 	addi	r3,r3,16
 20251c0:	19000037 	ldwio	r4,0(r3)
 20251c4:	00fff7c4 	movi	r3,-33
 20251c8:	20c6703a 	and	r3,r4,r3
 20251cc:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 20251d0:	e0bffe17 	ldw	r2,-8(fp)
 20251d4:	10800317 	ldw	r2,12(r2)
 20251d8:	00c03fc4 	movi	r3,255
 20251dc:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 20251e0:	e0bffe17 	ldw	r2,-8(fp)
 20251e4:	10800317 	ldw	r2,12(r2)
 20251e8:	10800804 	addi	r2,r2,32
 20251ec:	e0ffff17 	ldw	r3,-4(fp)
 20251f0:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 20251f4:	e0bffe17 	ldw	r2,-8(fp)
 20251f8:	10800917 	ldw	r2,36(r2)
 20251fc:	10001126 	beq	r2,zero,2025244 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 2025200:	e0bffe17 	ldw	r2,-8(fp)
 2025204:	10800317 	ldw	r2,12(r2)
 2025208:	10800404 	addi	r2,r2,16
 202520c:	10800037 	ldwio	r2,0(r2)
 2025210:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
 2025214:	e0bffe17 	ldw	r2,-8(fp)
 2025218:	10c00b17 	ldw	r3,44(r2)
 202521c:	e0bffd17 	ldw	r2,-12(fp)
 2025220:	1884b03a 	or	r2,r3,r2
 2025224:	10801814 	ori	r2,r2,96
 2025228:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 202522c:	e0bffe17 	ldw	r2,-8(fp)
 2025230:	10800317 	ldw	r2,12(r2)
 2025234:	10800404 	addi	r2,r2,16
 2025238:	e0fffd17 	ldw	r3,-12(fp)
 202523c:	10c00035 	stwio	r3,0(r2)
 2025240:	00001106 	br	2025288 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 2025244:	e0bffe17 	ldw	r2,-8(fp)
 2025248:	10800317 	ldw	r2,12(r2)
 202524c:	10800404 	addi	r2,r2,16
 2025250:	10800037 	ldwio	r2,0(r2)
 2025254:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 2025258:	e0bffd17 	ldw	r2,-12(fp)
 202525c:	10801814 	ori	r2,r2,96
 2025260:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
 2025264:	e0fffd17 	ldw	r3,-12(fp)
 2025268:	00bffbc4 	movi	r2,-17
 202526c:	1884703a 	and	r2,r3,r2
 2025270:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 2025274:	e0bffe17 	ldw	r2,-8(fp)
 2025278:	10800317 	ldw	r2,12(r2)
 202527c:	10800404 	addi	r2,r2,16
 2025280:	e0fffd17 	ldw	r3,-12(fp)
 2025284:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
 2025288:	0005883a 	mov	r2,zero
}
 202528c:	e037883a 	mov	sp,fp
 2025290:	df000017 	ldw	fp,0(sp)
 2025294:	dec00104 	addi	sp,sp,4
 2025298:	f800283a 	ret

0202529c <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 202529c:	defffc04 	addi	sp,sp,-16
 20252a0:	df000315 	stw	fp,12(sp)
 20252a4:	df000304 	addi	fp,sp,12
 20252a8:	e13ffe15 	stw	r4,-8(fp)
 20252ac:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 20252b0:	0001883a 	nop
 20252b4:	e0bffe17 	ldw	r2,-8(fp)
 20252b8:	10800317 	ldw	r2,12(r2)
 20252bc:	10800037 	ldwio	r2,0(r2)
 20252c0:	1080040c 	andi	r2,r2,16
 20252c4:	103ffb1e 	bne	r2,zero,20252b4 <__alt_mem_mem_0+0xfd0052b4>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 20252c8:	e0bffe17 	ldw	r2,-8(fp)
 20252cc:	10800317 	ldw	r2,12(r2)
 20252d0:	10800404 	addi	r2,r2,16
 20252d4:	e0fffe17 	ldw	r3,-8(fp)
 20252d8:	18c00317 	ldw	r3,12(r3)
 20252dc:	18c00404 	addi	r3,r3,16
 20252e0:	19000037 	ldwio	r4,0(r3)
 20252e4:	00fff7c4 	movi	r3,-33
 20252e8:	20c6703a 	and	r3,r4,r3
 20252ec:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 20252f0:	e0bffe17 	ldw	r2,-8(fp)
 20252f4:	10800317 	ldw	r2,12(r2)
 20252f8:	00c03fc4 	movi	r3,255
 20252fc:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 2025300:	e0bffe17 	ldw	r2,-8(fp)
 2025304:	10800317 	ldw	r2,12(r2)
 2025308:	10800804 	addi	r2,r2,32
 202530c:	e0ffff17 	ldw	r3,-4(fp)
 2025310:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 2025314:	e0bffe17 	ldw	r2,-8(fp)
 2025318:	10800317 	ldw	r2,12(r2)
 202531c:	10800404 	addi	r2,r2,16
 2025320:	e0fffe17 	ldw	r3,-8(fp)
 2025324:	18c00317 	ldw	r3,12(r3)
 2025328:	18c00404 	addi	r3,r3,16
 202532c:	18c00037 	ldwio	r3,0(r3)
 2025330:	18c01814 	ori	r3,r3,96
 2025334:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 2025338:	0001883a 	nop
 202533c:	e0bffe17 	ldw	r2,-8(fp)
 2025340:	10800317 	ldw	r2,12(r2)
 2025344:	10800037 	ldwio	r2,0(r2)
 2025348:	1080040c 	andi	r2,r2,16
 202534c:	103ffb1e 	bne	r2,zero,202533c <__alt_mem_mem_0+0xfd00533c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 2025350:	e0bffe17 	ldw	r2,-8(fp)
 2025354:	10800317 	ldw	r2,12(r2)
 2025358:	10800404 	addi	r2,r2,16
 202535c:	e0fffe17 	ldw	r3,-8(fp)
 2025360:	18c00317 	ldw	r3,12(r3)
 2025364:	18c00404 	addi	r3,r3,16
 2025368:	19000037 	ldwio	r4,0(r3)
 202536c:	00fff7c4 	movi	r3,-33
 2025370:	20c6703a 	and	r3,r4,r3
 2025374:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 2025378:	e0bffe17 	ldw	r2,-8(fp)
 202537c:	10800317 	ldw	r2,12(r2)
 2025380:	10800037 	ldwio	r2,0(r2)
 2025384:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 2025388:	e0bffe17 	ldw	r2,-8(fp)
 202538c:	10800317 	ldw	r2,12(r2)
 2025390:	00c03fc4 	movi	r3,255
 2025394:	10c00035 	stwio	r3,0(r2)

  return status;
 2025398:	e0bffd03 	ldbu	r2,-12(fp)
}
 202539c:	e037883a 	mov	sp,fp
 20253a0:	df000017 	ldw	fp,0(sp)
 20253a4:	dec00104 	addi	sp,sp,4
 20253a8:	f800283a 	ret

020253ac <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 20253ac:	defff404 	addi	sp,sp,-48
 20253b0:	dfc00b15 	stw	ra,44(sp)
 20253b4:	df000a15 	stw	fp,40(sp)
 20253b8:	df000a04 	addi	fp,sp,40
 20253bc:	e13ffb15 	stw	r4,-20(fp)
 20253c0:	e17ffc15 	stw	r5,-16(fp)
 20253c4:	e1bffd15 	stw	r6,-12(fp)
 20253c8:	e1fffe15 	stw	r7,-8(fp)
 20253cc:	e0800217 	ldw	r2,8(fp)
 20253d0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 20253d4:	e0bfff0b 	ldhu	r2,-4(fp)
 20253d8:	d8000415 	stw	zero,16(sp)
 20253dc:	d8000315 	stw	zero,12(sp)
 20253e0:	e0c00417 	ldw	r3,16(fp)
 20253e4:	d8c00215 	stw	r3,8(sp)
 20253e8:	e0c00317 	ldw	r3,12(fp)
 20253ec:	d8c00115 	stw	r3,4(sp)
 20253f0:	d8800015 	stw	r2,0(sp)
 20253f4:	e1fffe17 	ldw	r7,-8(fp)
 20253f8:	e1bffd17 	ldw	r6,-12(fp)
 20253fc:	e17ffc17 	ldw	r5,-16(fp)
 2025400:	e13ffb17 	ldw	r4,-20(fp)
 2025404:	20254200 	call	2025420 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 2025408:	0001883a 	nop
 202540c:	e037883a 	mov	sp,fp
 2025410:	dfc00117 	ldw	ra,4(sp)
 2025414:	df000017 	ldw	fp,0(sp)
 2025418:	dec00204 	addi	sp,sp,8
 202541c:	f800283a 	ret

02025420 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 2025420:	defff204 	addi	sp,sp,-56
 2025424:	dfc00d15 	stw	ra,52(sp)
 2025428:	df000c15 	stw	fp,48(sp)
 202542c:	df000c04 	addi	fp,sp,48
 2025430:	e13ffb15 	stw	r4,-20(fp)
 2025434:	e17ffc15 	stw	r5,-16(fp)
 2025438:	e1bffd15 	stw	r6,-12(fp)
 202543c:	e1fffe15 	stw	r7,-8(fp)
 2025440:	e0800217 	ldw	r2,8(fp)
 2025444:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 2025448:	e0bfff0b 	ldhu	r2,-4(fp)
 202544c:	d8000615 	stw	zero,24(sp)
 2025450:	e0c00617 	ldw	r3,24(fp)
 2025454:	d8c00515 	stw	r3,20(sp)
 2025458:	e0c00517 	ldw	r3,20(fp)
 202545c:	d8c00415 	stw	r3,16(sp)
 2025460:	e0c00417 	ldw	r3,16(fp)
 2025464:	d8c00315 	stw	r3,12(sp)
 2025468:	e0c00317 	ldw	r3,12(fp)
 202546c:	d8c00215 	stw	r3,8(sp)
 2025470:	d8000115 	stw	zero,4(sp)
 2025474:	d8800015 	stw	r2,0(sp)
 2025478:	e1fffe17 	ldw	r7,-8(fp)
 202547c:	e1bffd17 	ldw	r6,-12(fp)
 2025480:	e17ffc17 	ldw	r5,-16(fp)
 2025484:	e13ffb17 	ldw	r4,-20(fp)
 2025488:	20259b40 	call	20259b4 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 202548c:	0001883a 	nop
 2025490:	e037883a 	mov	sp,fp
 2025494:	dfc00117 	ldw	ra,4(sp)
 2025498:	df000017 	ldw	fp,0(sp)
 202549c:	dec00204 	addi	sp,sp,8
 20254a0:	f800283a 	ret

020254a4 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 20254a4:	defff804 	addi	sp,sp,-32
 20254a8:	dfc00715 	stw	ra,28(sp)
 20254ac:	df000615 	stw	fp,24(sp)
 20254b0:	df000604 	addi	fp,sp,24
 20254b4:	e13ffc15 	stw	r4,-16(fp)
 20254b8:	e17ffd15 	stw	r5,-12(fp)
 20254bc:	e1bffe15 	stw	r6,-8(fp)
 20254c0:	3805883a 	mov	r2,r7
 20254c4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 20254c8:	e0ffff0b 	ldhu	r3,-4(fp)
 20254cc:	d8000115 	stw	zero,4(sp)
 20254d0:	e0800217 	ldw	r2,8(fp)
 20254d4:	d8800015 	stw	r2,0(sp)
 20254d8:	180f883a 	mov	r7,r3
 20254dc:	e1bffe17 	ldw	r6,-8(fp)
 20254e0:	e17ffd17 	ldw	r5,-12(fp)
 20254e4:	e13ffc17 	ldw	r4,-16(fp)
 20254e8:	20255040 	call	2025504 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 20254ec:	0001883a 	nop
 20254f0:	e037883a 	mov	sp,fp
 20254f4:	dfc00117 	ldw	ra,4(sp)
 20254f8:	df000017 	ldw	fp,0(sp)
 20254fc:	dec00204 	addi	sp,sp,8
 2025500:	f800283a 	ret

02025504 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 2025504:	defff304 	addi	sp,sp,-52
 2025508:	dfc00c15 	stw	ra,48(sp)
 202550c:	df000b15 	stw	fp,44(sp)
 2025510:	df000b04 	addi	fp,sp,44
 2025514:	e13ffc15 	stw	r4,-16(fp)
 2025518:	e17ffd15 	stw	r5,-12(fp)
 202551c:	e1bffe15 	stw	r6,-8(fp)
 2025520:	3805883a 	mov	r2,r7
 2025524:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 2025528:	e0bfff0b 	ldhu	r2,-4(fp)
 202552c:	d8000615 	stw	zero,24(sp)
 2025530:	e0c00317 	ldw	r3,12(fp)
 2025534:	d8c00515 	stw	r3,20(sp)
 2025538:	d8000415 	stw	zero,16(sp)
 202553c:	e0c00217 	ldw	r3,8(fp)
 2025540:	d8c00315 	stw	r3,12(sp)
 2025544:	d8000215 	stw	zero,8(sp)
 2025548:	d8000115 	stw	zero,4(sp)
 202554c:	d8800015 	stw	r2,0(sp)
 2025550:	e1fffe17 	ldw	r7,-8(fp)
 2025554:	000d883a 	mov	r6,zero
 2025558:	e17ffd17 	ldw	r5,-12(fp)
 202555c:	e13ffc17 	ldw	r4,-16(fp)
 2025560:	20259b40 	call	20259b4 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 2025564:	0001883a 	nop
 2025568:	e037883a 	mov	sp,fp
 202556c:	dfc00117 	ldw	ra,4(sp)
 2025570:	df000017 	ldw	fp,0(sp)
 2025574:	dec00204 	addi	sp,sp,8
 2025578:	f800283a 	ret

0202557c <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 202557c:	defff404 	addi	sp,sp,-48
 2025580:	dfc00b15 	stw	ra,44(sp)
 2025584:	df000a15 	stw	fp,40(sp)
 2025588:	df000a04 	addi	fp,sp,40
 202558c:	e13ffb15 	stw	r4,-20(fp)
 2025590:	e17ffc15 	stw	r5,-16(fp)
 2025594:	e1bffd15 	stw	r6,-12(fp)
 2025598:	3807883a 	mov	r3,r7
 202559c:	e0800517 	ldw	r2,20(fp)
 20255a0:	e0fffe0d 	sth	r3,-8(fp)
 20255a4:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 20255a8:	e0fffe0b 	ldhu	r3,-8(fp)
 20255ac:	e0bfff03 	ldbu	r2,-4(fp)
 20255b0:	d8800415 	stw	r2,16(sp)
 20255b4:	d8000315 	stw	zero,12(sp)
 20255b8:	e0800417 	ldw	r2,16(fp)
 20255bc:	d8800215 	stw	r2,8(sp)
 20255c0:	e0800317 	ldw	r2,12(fp)
 20255c4:	d8800115 	stw	r2,4(sp)
 20255c8:	e0800217 	ldw	r2,8(fp)
 20255cc:	d8800015 	stw	r2,0(sp)
 20255d0:	180f883a 	mov	r7,r3
 20255d4:	e1bffd17 	ldw	r6,-12(fp)
 20255d8:	e17ffc17 	ldw	r5,-16(fp)
 20255dc:	e13ffb17 	ldw	r4,-20(fp)
 20255e0:	20255fc0 	call	20255fc <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 20255e4:	0001883a 	nop
 20255e8:	e037883a 	mov	sp,fp
 20255ec:	dfc00117 	ldw	ra,4(sp)
 20255f0:	df000017 	ldw	fp,0(sp)
 20255f4:	dec00204 	addi	sp,sp,8
 20255f8:	f800283a 	ret

020255fc <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 20255fc:	defff204 	addi	sp,sp,-56
 2025600:	dfc00d15 	stw	ra,52(sp)
 2025604:	df000c15 	stw	fp,48(sp)
 2025608:	df000c04 	addi	fp,sp,48
 202560c:	e13ffb15 	stw	r4,-20(fp)
 2025610:	e17ffc15 	stw	r5,-16(fp)
 2025614:	e1bffd15 	stw	r6,-12(fp)
 2025618:	3807883a 	mov	r3,r7
 202561c:	e0800617 	ldw	r2,24(fp)
 2025620:	e0fffe0d 	sth	r3,-8(fp)
 2025624:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 2025628:	e0bffe0b 	ldhu	r2,-8(fp)
 202562c:	e0ffff03 	ldbu	r3,-4(fp)
 2025630:	d8c00615 	stw	r3,24(sp)
 2025634:	d8000515 	stw	zero,20(sp)
 2025638:	e0c00517 	ldw	r3,20(fp)
 202563c:	d8c00415 	stw	r3,16(sp)
 2025640:	e0c00317 	ldw	r3,12(fp)
 2025644:	d8c00315 	stw	r3,12(sp)
 2025648:	e0c00217 	ldw	r3,8(fp)
 202564c:	d8c00215 	stw	r3,8(sp)
 2025650:	e0c00417 	ldw	r3,16(fp)
 2025654:	d8c00115 	stw	r3,4(sp)
 2025658:	d8800015 	stw	r2,0(sp)
 202565c:	000f883a 	mov	r7,zero
 2025660:	e1bffd17 	ldw	r6,-12(fp)
 2025664:	e17ffc17 	ldw	r5,-16(fp)
 2025668:	e13ffb17 	ldw	r4,-20(fp)
 202566c:	20259b40 	call	20259b4 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 2025670:	0001883a 	nop
 2025674:	e037883a 	mov	sp,fp
 2025678:	dfc00117 	ldw	ra,4(sp)
 202567c:	df000017 	ldw	fp,0(sp)
 2025680:	dec00204 	addi	sp,sp,8
 2025684:	f800283a 	ret

02025688 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
 2025688:	defffb04 	addi	sp,sp,-20
 202568c:	df000415 	stw	fp,16(sp)
 2025690:	df000404 	addi	fp,sp,16
 2025694:	e13ffc15 	stw	r4,-16(fp)
 2025698:	e17ffd15 	stw	r5,-12(fp)
 202569c:	e1bffe15 	stw	r6,-8(fp)
 20256a0:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
 20256a4:	e0bffc17 	ldw	r2,-16(fp)
 20256a8:	e0fffd17 	ldw	r3,-12(fp)
 20256ac:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
 20256b0:	e0bffc17 	ldw	r2,-16(fp)
 20256b4:	e0ffff17 	ldw	r3,-4(fp)
 20256b8:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
 20256bc:	e0bffc17 	ldw	r2,-16(fp)
 20256c0:	e0fffe17 	ldw	r3,-8(fp)
 20256c4:	10c00b15 	stw	r3,44(r2)
}
 20256c8:	0001883a 	nop
 20256cc:	e037883a 	mov	sp,fp
 20256d0:	df000017 	ldw	fp,0(sp)
 20256d4:	dec00104 	addi	sp,sp,4
 20256d8:	f800283a 	ret

020256dc <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
 20256dc:	defffd04 	addi	sp,sp,-12
 20256e0:	df000215 	stw	fp,8(sp)
 20256e4:	df000204 	addi	fp,sp,8
 20256e8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 20256ec:	e0bfff17 	ldw	r2,-4(fp)
 20256f0:	10800317 	ldw	r2,12(r2)
 20256f4:	10800404 	addi	r2,r2,16
 20256f8:	10800037 	ldwio	r2,0(r2)
 20256fc:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 2025700:	e0bffe17 	ldw	r2,-8(fp)
 2025704:	10800814 	ori	r2,r2,32
 2025708:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 202570c:	e0bfff17 	ldw	r2,-4(fp)
 2025710:	10800317 	ldw	r2,12(r2)
 2025714:	10800404 	addi	r2,r2,16
 2025718:	e0fffe17 	ldw	r3,-8(fp)
 202571c:	10c00035 	stwio	r3,0(r2)
}
 2025720:	0001883a 	nop
 2025724:	e037883a 	mov	sp,fp
 2025728:	df000017 	ldw	fp,0(sp)
 202572c:	dec00104 	addi	sp,sp,4
 2025730:	f800283a 	ret

02025734 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
 2025734:	defffd04 	addi	sp,sp,-12
 2025738:	df000215 	stw	fp,8(sp)
 202573c:	df000204 	addi	fp,sp,8
 2025740:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 2025744:	e0bfff17 	ldw	r2,-4(fp)
 2025748:	10800317 	ldw	r2,12(r2)
 202574c:	10800404 	addi	r2,r2,16
 2025750:	10800037 	ldwio	r2,0(r2)
 2025754:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 2025758:	e0fffe17 	ldw	r3,-8(fp)
 202575c:	00bff7c4 	movi	r2,-33
 2025760:	1884703a 	and	r2,r3,r2
 2025764:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 2025768:	e0bfff17 	ldw	r2,-4(fp)
 202576c:	10800317 	ldw	r2,12(r2)
 2025770:	10800404 	addi	r2,r2,16
 2025774:	e0fffe17 	ldw	r3,-8(fp)
 2025778:	10c00035 	stwio	r3,0(r2)
}
 202577c:	0001883a 	nop
 2025780:	e037883a 	mov	sp,fp
 2025784:	df000017 	ldw	fp,0(sp)
 2025788:	dec00104 	addi	sp,sp,4
 202578c:	f800283a 	ret

02025790 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
 2025790:	defffe04 	addi	sp,sp,-8
 2025794:	df000115 	stw	fp,4(sp)
 2025798:	df000104 	addi	fp,sp,4
 202579c:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 20257a0:	e0bfff17 	ldw	r2,-4(fp)
 20257a4:	10800784 	addi	r2,r2,30
 20257a8:	10800023 	ldbuio	r2,0(r2)
 20257ac:	10803fcc 	andi	r2,r2,255
 20257b0:	10801fcc 	andi	r2,r2,127
 20257b4:	10000226 	beq	r2,zero,20257c0 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
 20257b8:	00bffec4 	movi	r2,-5
 20257bc:	00000906 	br	20257e4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 20257c0:	e0bfff17 	ldw	r2,-4(fp)
 20257c4:	108007c4 	addi	r2,r2,31
 20257c8:	10800023 	ldbuio	r2,0(r2)
 20257cc:	10803fcc 	andi	r2,r2,255
 20257d0:	1080200c 	andi	r2,r2,128
 20257d4:	10000226 	beq	r2,zero,20257e0 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
 20257d8:	00bfe244 	movi	r2,-119
 20257dc:	00000106 	br	20257e4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
 20257e0:	0005883a 	mov	r2,zero
}
 20257e4:	e037883a 	mov	sp,fp
 20257e8:	df000017 	ldw	fp,0(sp)
 20257ec:	dec00104 	addi	sp,sp,4
 20257f0:	f800283a 	ret

020257f4 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 20257f4:	defffc04 	addi	sp,sp,-16
 20257f8:	dfc00315 	stw	ra,12(sp)
 20257fc:	df000215 	stw	fp,8(sp)
 2025800:	df000204 	addi	fp,sp,8
 2025804:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 2025808:	d1601704 	addi	r5,gp,-32676
 202580c:	e13fff17 	ldw	r4,-4(fp)
 2025810:	20275d40 	call	20275d4 <alt_find_dev>
 2025814:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
 2025818:	e0bffe17 	ldw	r2,-8(fp)
 202581c:	1000041e 	bne	r2,zero,2025830 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
 2025820:	202513c0 	call	202513c <alt_get_errno>
 2025824:	1007883a 	mov	r3,r2
 2025828:	008004c4 	movi	r2,19
 202582c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 2025830:	e0bffe17 	ldw	r2,-8(fp)
}
 2025834:	e037883a 	mov	sp,fp
 2025838:	dfc00117 	ldw	ra,4(sp)
 202583c:	df000017 	ldw	fp,0(sp)
 2025840:	dec00204 	addi	sp,sp,8
 2025844:	f800283a 	ret

02025848 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 2025848:	defff104 	addi	sp,sp,-60
 202584c:	dfc00e15 	stw	ra,56(sp)
 2025850:	df000d15 	stw	fp,52(sp)
 2025854:	df000d04 	addi	fp,sp,52
 2025858:	e13ffa15 	stw	r4,-24(fp)
 202585c:	e17ffb15 	stw	r5,-20(fp)
 2025860:	e1bffc15 	stw	r6,-16(fp)
 2025864:	e1fffd15 	stw	r7,-12(fp)
 2025868:	e0c00217 	ldw	r3,8(fp)
 202586c:	e0800617 	ldw	r2,24(fp)
 2025870:	e0fffe0d 	sth	r3,-8(fp)
 2025874:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 2025878:	e0bffe0b 	ldhu	r2,-8(fp)
 202587c:	e0ffff03 	ldbu	r3,-4(fp)
 2025880:	d8c00615 	stw	r3,24(sp)
 2025884:	d8000515 	stw	zero,20(sp)
 2025888:	d8000415 	stw	zero,16(sp)
 202588c:	e0c00517 	ldw	r3,20(fp)
 2025890:	d8c00315 	stw	r3,12(sp)
 2025894:	e0c00417 	ldw	r3,16(fp)
 2025898:	d8c00215 	stw	r3,8(sp)
 202589c:	e0c00317 	ldw	r3,12(fp)
 20258a0:	d8c00115 	stw	r3,4(sp)
 20258a4:	d8800015 	stw	r2,0(sp)
 20258a8:	e1fffd17 	ldw	r7,-12(fp)
 20258ac:	e1bffc17 	ldw	r6,-16(fp)
 20258b0:	e17ffb17 	ldw	r5,-20(fp)
 20258b4:	e13ffa17 	ldw	r4,-24(fp)
 20258b8:	20259b40 	call	20259b4 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 20258bc:	0001883a 	nop
 20258c0:	e037883a 	mov	sp,fp
 20258c4:	dfc00117 	ldw	ra,4(sp)
 20258c8:	df000017 	ldw	fp,0(sp)
 20258cc:	dec00204 	addi	sp,sp,8
 20258d0:	f800283a 	ret

020258d4 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
 20258d4:	defffc04 	addi	sp,sp,-16
 20258d8:	df000315 	stw	fp,12(sp)
 20258dc:	df000304 	addi	fp,sp,12
 20258e0:	e13ffe15 	stw	r4,-8(fp)
 20258e4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 20258e8:	e0bffe17 	ldw	r2,-8(fp)
 20258ec:	10800317 	ldw	r2,12(r2)
 20258f0:	10800404 	addi	r2,r2,16
 20258f4:	10800037 	ldwio	r2,0(r2)
 20258f8:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 20258fc:	e0fffd17 	ldw	r3,-12(fp)
 2025900:	00a00434 	movhi	r2,32784
 2025904:	10bfffc4 	addi	r2,r2,-1
 2025908:	1884703a 	and	r2,r3,r2
 202590c:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
 2025910:	e0bfff17 	ldw	r2,-4(fp)
 2025914:	1004953a 	slli	r2,r2,20
 2025918:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
 202591c:	e0bffd17 	ldw	r2,-12(fp)
 2025920:	1884b03a 	or	r2,r3,r2
 2025924:	10800134 	orhi	r2,r2,4
 2025928:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 202592c:	e0bffe17 	ldw	r2,-8(fp)
 2025930:	10800317 	ldw	r2,12(r2)
 2025934:	10800404 	addi	r2,r2,16
 2025938:	e0fffd17 	ldw	r3,-12(fp)
 202593c:	10c00035 	stwio	r3,0(r2)
  
  return;
 2025940:	0001883a 	nop
}
 2025944:	e037883a 	mov	sp,fp
 2025948:	df000017 	ldw	fp,0(sp)
 202594c:	dec00104 	addi	sp,sp,4
 2025950:	f800283a 	ret

02025954 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
 2025954:	defffd04 	addi	sp,sp,-12
 2025958:	df000215 	stw	fp,8(sp)
 202595c:	df000204 	addi	fp,sp,8
 2025960:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 2025964:	e0bfff17 	ldw	r2,-4(fp)
 2025968:	10800317 	ldw	r2,12(r2)
 202596c:	10800404 	addi	r2,r2,16
 2025970:	10800037 	ldwio	r2,0(r2)
 2025974:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
 2025978:	e0fffe17 	ldw	r3,-8(fp)
 202597c:	00bfff34 	movhi	r2,65532
 2025980:	10bfffc4 	addi	r2,r2,-1
 2025984:	1884703a 	and	r2,r3,r2
 2025988:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 202598c:	e0bfff17 	ldw	r2,-4(fp)
 2025990:	10800317 	ldw	r2,12(r2)
 2025994:	10800404 	addi	r2,r2,16
 2025998:	e0fffe17 	ldw	r3,-8(fp)
 202599c:	10c00035 	stwio	r3,0(r2)
  
  return;
 20259a0:	0001883a 	nop
}
 20259a4:	e037883a 	mov	sp,fp
 20259a8:	df000017 	ldw	fp,0(sp)
 20259ac:	dec00104 	addi	sp,sp,4
 20259b0:	f800283a 	ret

020259b4 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 20259b4:	defff804 	addi	sp,sp,-32
 20259b8:	dfc00715 	stw	ra,28(sp)
 20259bc:	df000615 	stw	fp,24(sp)
 20259c0:	df000604 	addi	fp,sp,24
 20259c4:	e13ffa15 	stw	r4,-24(fp)
 20259c8:	e17ffb15 	stw	r5,-20(fp)
 20259cc:	e1bffc15 	stw	r6,-16(fp)
 20259d0:	e1fffd15 	stw	r7,-12(fp)
 20259d4:	e0c00217 	ldw	r3,8(fp)
 20259d8:	e0800817 	ldw	r2,32(fp)
 20259dc:	e0fffe0d 	sth	r3,-8(fp)
 20259e0:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 20259e4:	e0bffb17 	ldw	r2,-20(fp)
 20259e8:	108007c4 	addi	r2,r2,31
 20259ec:	e0fffb17 	ldw	r3,-20(fp)
 20259f0:	18c007c3 	ldbu	r3,31(r3)
 20259f4:	19003fcc 	andi	r4,r3,255
 20259f8:	00ffdfc4 	movi	r3,-129
 20259fc:	20c6703a 	and	r3,r4,r3
 2025a00:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 2025a04:	e0bffa17 	ldw	r2,-24(fp)
 2025a08:	e0fffc17 	ldw	r3,-16(fp)
 2025a0c:	19403fcc 	andi	r5,r3,255
 2025a10:	10c00003 	ldbu	r3,0(r2)
 2025a14:	1806703a 	and	r3,r3,zero
 2025a18:	1809883a 	mov	r4,r3
 2025a1c:	2807883a 	mov	r3,r5
 2025a20:	20c6b03a 	or	r3,r4,r3
 2025a24:	10c00005 	stb	r3,0(r2)
 2025a28:	e0fffc17 	ldw	r3,-16(fp)
 2025a2c:	1806d23a 	srli	r3,r3,8
 2025a30:	19403fcc 	andi	r5,r3,255
 2025a34:	10c00043 	ldbu	r3,1(r2)
 2025a38:	1806703a 	and	r3,r3,zero
 2025a3c:	1809883a 	mov	r4,r3
 2025a40:	2807883a 	mov	r3,r5
 2025a44:	20c6b03a 	or	r3,r4,r3
 2025a48:	10c00045 	stb	r3,1(r2)
 2025a4c:	e0fffc17 	ldw	r3,-16(fp)
 2025a50:	1806d43a 	srli	r3,r3,16
 2025a54:	19403fcc 	andi	r5,r3,255
 2025a58:	10c00083 	ldbu	r3,2(r2)
 2025a5c:	1806703a 	and	r3,r3,zero
 2025a60:	1809883a 	mov	r4,r3
 2025a64:	2807883a 	mov	r3,r5
 2025a68:	20c6b03a 	or	r3,r4,r3
 2025a6c:	10c00085 	stb	r3,2(r2)
 2025a70:	e0fffc17 	ldw	r3,-16(fp)
 2025a74:	180ad63a 	srli	r5,r3,24
 2025a78:	10c000c3 	ldbu	r3,3(r2)
 2025a7c:	1806703a 	and	r3,r3,zero
 2025a80:	1809883a 	mov	r4,r3
 2025a84:	2807883a 	mov	r3,r5
 2025a88:	20c6b03a 	or	r3,r4,r3
 2025a8c:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
 2025a90:	e0bffa17 	ldw	r2,-24(fp)
 2025a94:	e0fffd17 	ldw	r3,-12(fp)
 2025a98:	19403fcc 	andi	r5,r3,255
 2025a9c:	10c00203 	ldbu	r3,8(r2)
 2025aa0:	1806703a 	and	r3,r3,zero
 2025aa4:	1809883a 	mov	r4,r3
 2025aa8:	2807883a 	mov	r3,r5
 2025aac:	20c6b03a 	or	r3,r4,r3
 2025ab0:	10c00205 	stb	r3,8(r2)
 2025ab4:	e0fffd17 	ldw	r3,-12(fp)
 2025ab8:	1806d23a 	srli	r3,r3,8
 2025abc:	19403fcc 	andi	r5,r3,255
 2025ac0:	10c00243 	ldbu	r3,9(r2)
 2025ac4:	1806703a 	and	r3,r3,zero
 2025ac8:	1809883a 	mov	r4,r3
 2025acc:	2807883a 	mov	r3,r5
 2025ad0:	20c6b03a 	or	r3,r4,r3
 2025ad4:	10c00245 	stb	r3,9(r2)
 2025ad8:	e0fffd17 	ldw	r3,-12(fp)
 2025adc:	1806d43a 	srli	r3,r3,16
 2025ae0:	19403fcc 	andi	r5,r3,255
 2025ae4:	10c00283 	ldbu	r3,10(r2)
 2025ae8:	1806703a 	and	r3,r3,zero
 2025aec:	1809883a 	mov	r4,r3
 2025af0:	2807883a 	mov	r3,r5
 2025af4:	20c6b03a 	or	r3,r4,r3
 2025af8:	10c00285 	stb	r3,10(r2)
 2025afc:	e0fffd17 	ldw	r3,-12(fp)
 2025b00:	180ad63a 	srli	r5,r3,24
 2025b04:	10c002c3 	ldbu	r3,11(r2)
 2025b08:	1806703a 	and	r3,r3,zero
 2025b0c:	1809883a 	mov	r4,r3
 2025b10:	2807883a 	mov	r3,r5
 2025b14:	20c6b03a 	or	r3,r4,r3
 2025b18:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
 2025b1c:	e0bffa17 	ldw	r2,-24(fp)
 2025b20:	e0fffb17 	ldw	r3,-20(fp)
 2025b24:	19403fcc 	andi	r5,r3,255
 2025b28:	10c00403 	ldbu	r3,16(r2)
 2025b2c:	1806703a 	and	r3,r3,zero
 2025b30:	1809883a 	mov	r4,r3
 2025b34:	2807883a 	mov	r3,r5
 2025b38:	20c6b03a 	or	r3,r4,r3
 2025b3c:	10c00405 	stb	r3,16(r2)
 2025b40:	e0fffb17 	ldw	r3,-20(fp)
 2025b44:	1806d23a 	srli	r3,r3,8
 2025b48:	19403fcc 	andi	r5,r3,255
 2025b4c:	10c00443 	ldbu	r3,17(r2)
 2025b50:	1806703a 	and	r3,r3,zero
 2025b54:	1809883a 	mov	r4,r3
 2025b58:	2807883a 	mov	r3,r5
 2025b5c:	20c6b03a 	or	r3,r4,r3
 2025b60:	10c00445 	stb	r3,17(r2)
 2025b64:	e0fffb17 	ldw	r3,-20(fp)
 2025b68:	1806d43a 	srli	r3,r3,16
 2025b6c:	19403fcc 	andi	r5,r3,255
 2025b70:	10c00483 	ldbu	r3,18(r2)
 2025b74:	1806703a 	and	r3,r3,zero
 2025b78:	1809883a 	mov	r4,r3
 2025b7c:	2807883a 	mov	r3,r5
 2025b80:	20c6b03a 	or	r3,r4,r3
 2025b84:	10c00485 	stb	r3,18(r2)
 2025b88:	e0fffb17 	ldw	r3,-20(fp)
 2025b8c:	180ad63a 	srli	r5,r3,24
 2025b90:	10c004c3 	ldbu	r3,19(r2)
 2025b94:	1806703a 	and	r3,r3,zero
 2025b98:	1809883a 	mov	r4,r3
 2025b9c:	2807883a 	mov	r3,r5
 2025ba0:	20c6b03a 	or	r3,r4,r3
 2025ba4:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
 2025ba8:	e0bffa17 	ldw	r2,-24(fp)
 2025bac:	10c00103 	ldbu	r3,4(r2)
 2025bb0:	1806703a 	and	r3,r3,zero
 2025bb4:	10c00105 	stb	r3,4(r2)
 2025bb8:	10c00143 	ldbu	r3,5(r2)
 2025bbc:	1806703a 	and	r3,r3,zero
 2025bc0:	10c00145 	stb	r3,5(r2)
 2025bc4:	10c00183 	ldbu	r3,6(r2)
 2025bc8:	1806703a 	and	r3,r3,zero
 2025bcc:	10c00185 	stb	r3,6(r2)
 2025bd0:	10c001c3 	ldbu	r3,7(r2)
 2025bd4:	1806703a 	and	r3,r3,zero
 2025bd8:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
 2025bdc:	e0bffa17 	ldw	r2,-24(fp)
 2025be0:	10c00303 	ldbu	r3,12(r2)
 2025be4:	1806703a 	and	r3,r3,zero
 2025be8:	10c00305 	stb	r3,12(r2)
 2025bec:	10c00343 	ldbu	r3,13(r2)
 2025bf0:	1806703a 	and	r3,r3,zero
 2025bf4:	10c00345 	stb	r3,13(r2)
 2025bf8:	10c00383 	ldbu	r3,14(r2)
 2025bfc:	1806703a 	and	r3,r3,zero
 2025c00:	10c00385 	stb	r3,14(r2)
 2025c04:	10c003c3 	ldbu	r3,15(r2)
 2025c08:	1806703a 	and	r3,r3,zero
 2025c0c:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
 2025c10:	e0bffa17 	ldw	r2,-24(fp)
 2025c14:	10c00503 	ldbu	r3,20(r2)
 2025c18:	1806703a 	and	r3,r3,zero
 2025c1c:	10c00505 	stb	r3,20(r2)
 2025c20:	10c00543 	ldbu	r3,21(r2)
 2025c24:	1806703a 	and	r3,r3,zero
 2025c28:	10c00545 	stb	r3,21(r2)
 2025c2c:	10c00583 	ldbu	r3,22(r2)
 2025c30:	1806703a 	and	r3,r3,zero
 2025c34:	10c00585 	stb	r3,22(r2)
 2025c38:	10c005c3 	ldbu	r3,23(r2)
 2025c3c:	1806703a 	and	r3,r3,zero
 2025c40:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
 2025c44:	e0bffa17 	ldw	r2,-24(fp)
 2025c48:	e0fffe17 	ldw	r3,-8(fp)
 2025c4c:	19403fcc 	andi	r5,r3,255
 2025c50:	10c00603 	ldbu	r3,24(r2)
 2025c54:	1806703a 	and	r3,r3,zero
 2025c58:	1809883a 	mov	r4,r3
 2025c5c:	2807883a 	mov	r3,r5
 2025c60:	20c6b03a 	or	r3,r4,r3
 2025c64:	10c00605 	stb	r3,24(r2)
 2025c68:	e0fffe17 	ldw	r3,-8(fp)
 2025c6c:	1806d23a 	srli	r3,r3,8
 2025c70:	19403fcc 	andi	r5,r3,255
 2025c74:	10c00643 	ldbu	r3,25(r2)
 2025c78:	1806703a 	and	r3,r3,zero
 2025c7c:	1809883a 	mov	r4,r3
 2025c80:	2807883a 	mov	r3,r5
 2025c84:	20c6b03a 	or	r3,r4,r3
 2025c88:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
 2025c8c:	e0bffa17 	ldw	r2,-24(fp)
 2025c90:	10c00703 	ldbu	r3,28(r2)
 2025c94:	1806703a 	and	r3,r3,zero
 2025c98:	10c00705 	stb	r3,28(r2)
 2025c9c:	10c00743 	ldbu	r3,29(r2)
 2025ca0:	1806703a 	and	r3,r3,zero
 2025ca4:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
 2025ca8:	e0bffa17 	ldw	r2,-24(fp)
 2025cac:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 2025cb0:	e0800617 	ldw	r2,24(fp)
 2025cb4:	1007883a 	mov	r3,r2
 2025cb8:	e0bffa17 	ldw	r2,-24(fp)
 2025cbc:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
 2025cc0:	e0800717 	ldw	r2,28(fp)
 2025cc4:	1007883a 	mov	r3,r2
 2025cc8:	e0bffa17 	ldw	r2,-24(fp)
 2025ccc:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 2025cd0:	e0800317 	ldw	r2,12(fp)
 2025cd4:	10000226 	beq	r2,zero,2025ce0 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
 2025cd8:	00bfe044 	movi	r2,-127
 2025cdc:	00000106 	br	2025ce4 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
 2025ce0:	00bfe004 	movi	r2,-128
 2025ce4:	e0c00417 	ldw	r3,16(fp)
 2025ce8:	18000226 	beq	r3,zero,2025cf4 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
 2025cec:	00c00084 	movi	r3,2
 2025cf0:	00000106 	br	2025cf8 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
 2025cf4:	0007883a 	mov	r3,zero
 2025cf8:	10c4b03a 	or	r2,r2,r3
 2025cfc:	1007883a 	mov	r3,r2
 2025d00:	e0800517 	ldw	r2,20(fp)
 2025d04:	10000226 	beq	r2,zero,2025d10 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
 2025d08:	00800104 	movi	r2,4
 2025d0c:	00000106 	br	2025d14 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
 2025d10:	0005883a 	mov	r2,zero
 2025d14:	1884b03a 	or	r2,r3,r2
 2025d18:	1007883a 	mov	r3,r2
 2025d1c:	e0bfff03 	ldbu	r2,-4(fp)
 2025d20:	10000426 	beq	r2,zero,2025d34 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
 2025d24:	e0bfff03 	ldbu	r2,-4(fp)
 2025d28:	108003cc 	andi	r2,r2,15
 2025d2c:	100490fa 	slli	r2,r2,3
 2025d30:	00000106 	br	2025d38 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 2025d34:	0005883a 	mov	r2,zero
 2025d38:	1884b03a 	or	r2,r3,r2
 2025d3c:	1007883a 	mov	r3,r2
 2025d40:	e0bffa17 	ldw	r2,-24(fp)
 2025d44:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
 2025d48:	01400804 	movi	r5,32
 2025d4c:	e13ffa17 	ldw	r4,-24(fp)
 2025d50:	20274ac0 	call	20274ac <alt_dcache_flush>
}
 2025d54:	0001883a 	nop
 2025d58:	e037883a 	mov	sp,fp
 2025d5c:	dfc00117 	ldw	ra,4(sp)
 2025d60:	df000017 	ldw	fp,0(sp)
 2025d64:	dec00204 	addi	sp,sp,8
 2025d68:	f800283a 	ret

02025d6c <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 2025d6c:	defff904 	addi	sp,sp,-28
 2025d70:	dfc00615 	stw	ra,24(sp)
 2025d74:	df000515 	stw	fp,20(sp)
 2025d78:	df000504 	addi	fp,sp,20
 2025d7c:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
 2025d80:	e0bfff17 	ldw	r2,-4(fp)
 2025d84:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 2025d88:	e0bffb17 	ldw	r2,-20(fp)
 2025d8c:	10800317 	ldw	r2,12(r2)
 2025d90:	10800404 	addi	r2,r2,16
 2025d94:	e0fffb17 	ldw	r3,-20(fp)
 2025d98:	18c00317 	ldw	r3,12(r3)
 2025d9c:	18c00404 	addi	r3,r3,16
 2025da0:	18c00037 	ldwio	r3,0(r3)
 2025da4:	18e00034 	orhi	r3,r3,32768
 2025da8:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 2025dac:	e0bffb17 	ldw	r2,-20(fp)
 2025db0:	10800317 	ldw	r2,12(r2)
 2025db4:	10800404 	addi	r2,r2,16
 2025db8:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 2025dbc:	e0bffb17 	ldw	r2,-20(fp)
 2025dc0:	10800917 	ldw	r2,36(r2)
 2025dc4:	10001226 	beq	r2,zero,2025e10 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2025dc8:	0005303a 	rdctl	r2,status
 2025dcc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2025dd0:	e0fffd17 	ldw	r3,-12(fp)
 2025dd4:	00bfff84 	movi	r2,-2
 2025dd8:	1884703a 	and	r2,r3,r2
 2025ddc:	1001703a 	wrctl	status,r2
  
  return context;
 2025de0:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
 2025de4:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
 2025de8:	e0bffb17 	ldw	r2,-20(fp)
 2025dec:	10800917 	ldw	r2,36(r2)
 2025df0:	e0fffb17 	ldw	r3,-20(fp)
 2025df4:	18c00a17 	ldw	r3,40(r3)
 2025df8:	1809883a 	mov	r4,r3
 2025dfc:	103ee83a 	callr	r2
 2025e00:	e0bffc17 	ldw	r2,-16(fp)
 2025e04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2025e08:	e0bffe17 	ldw	r2,-8(fp)
 2025e0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 2025e10:	0001883a 	nop
 2025e14:	e037883a 	mov	sp,fp
 2025e18:	dfc00117 	ldw	ra,4(sp)
 2025e1c:	df000017 	ldw	fp,0(sp)
 2025e20:	dec00204 	addi	sp,sp,8
 2025e24:	f800283a 	ret

02025e28 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 2025e28:	defffa04 	addi	sp,sp,-24
 2025e2c:	dfc00515 	stw	ra,20(sp)
 2025e30:	df000415 	stw	fp,16(sp)
 2025e34:	df000404 	addi	fp,sp,16
 2025e38:	e13ffd15 	stw	r4,-12(fp)
 2025e3c:	e17ffe15 	stw	r5,-8(fp)
 2025e40:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 2025e44:	e0bffd17 	ldw	r2,-12(fp)
 2025e48:	10800317 	ldw	r2,12(r2)
 2025e4c:	10800404 	addi	r2,r2,16
 2025e50:	00c00074 	movhi	r3,1
 2025e54:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 2025e58:	e0bffd17 	ldw	r2,-12(fp)
 2025e5c:	10800317 	ldw	r2,12(r2)
 2025e60:	10800404 	addi	r2,r2,16
 2025e64:	00c00074 	movhi	r3,1
 2025e68:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 2025e6c:	e0bffd17 	ldw	r2,-12(fp)
 2025e70:	10800317 	ldw	r2,12(r2)
 2025e74:	10800404 	addi	r2,r2,16
 2025e78:	0007883a 	mov	r3,zero
 2025e7c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 2025e80:	e0bffd17 	ldw	r2,-12(fp)
 2025e84:	10800317 	ldw	r2,12(r2)
 2025e88:	00c03fc4 	movi	r3,255
 2025e8c:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 2025e90:	d1601704 	addi	r5,gp,-32676
 2025e94:	e13ffd17 	ldw	r4,-12(fp)
 2025e98:	20275300 	call	2027530 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 2025e9c:	d8000015 	stw	zero,0(sp)
 2025ea0:	e1fffd17 	ldw	r7,-12(fp)
 2025ea4:	018080b4 	movhi	r6,514
 2025ea8:	31975b04 	addi	r6,r6,23916
 2025eac:	e17fff17 	ldw	r5,-4(fp)
 2025eb0:	e13ffe17 	ldw	r4,-8(fp)
 2025eb4:	2027a740 	call	2027a74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 2025eb8:	0001883a 	nop
 2025ebc:	e037883a 	mov	sp,fp
 2025ec0:	dfc00117 	ldw	ra,4(sp)
 2025ec4:	df000017 	ldw	fp,0(sp)
 2025ec8:	dec00204 	addi	sp,sp,8
 2025ecc:	f800283a 	ret

02025ed0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2025ed0:	defffa04 	addi	sp,sp,-24
 2025ed4:	dfc00515 	stw	ra,20(sp)
 2025ed8:	df000415 	stw	fp,16(sp)
 2025edc:	df000404 	addi	fp,sp,16
 2025ee0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2025ee4:	0007883a 	mov	r3,zero
 2025ee8:	e0bfff17 	ldw	r2,-4(fp)
 2025eec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2025ef0:	e0bfff17 	ldw	r2,-4(fp)
 2025ef4:	10800104 	addi	r2,r2,4
 2025ef8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2025efc:	0005303a 	rdctl	r2,status
 2025f00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2025f04:	e0fffd17 	ldw	r3,-12(fp)
 2025f08:	00bfff84 	movi	r2,-2
 2025f0c:	1884703a 	and	r2,r3,r2
 2025f10:	1001703a 	wrctl	status,r2
  
  return context;
 2025f14:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2025f18:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 2025f1c:	2027ee80 	call	2027ee8 <alt_tick>
 2025f20:	e0bffc17 	ldw	r2,-16(fp)
 2025f24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2025f28:	e0bffe17 	ldw	r2,-8(fp)
 2025f2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2025f30:	0001883a 	nop
 2025f34:	e037883a 	mov	sp,fp
 2025f38:	dfc00117 	ldw	ra,4(sp)
 2025f3c:	df000017 	ldw	fp,0(sp)
 2025f40:	dec00204 	addi	sp,sp,8
 2025f44:	f800283a 	ret

02025f48 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2025f48:	defff804 	addi	sp,sp,-32
 2025f4c:	dfc00715 	stw	ra,28(sp)
 2025f50:	df000615 	stw	fp,24(sp)
 2025f54:	df000604 	addi	fp,sp,24
 2025f58:	e13ffc15 	stw	r4,-16(fp)
 2025f5c:	e17ffd15 	stw	r5,-12(fp)
 2025f60:	e1bffe15 	stw	r6,-8(fp)
 2025f64:	e1ffff15 	stw	r7,-4(fp)
 2025f68:	e0bfff17 	ldw	r2,-4(fp)
 2025f6c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2025f70:	d0a80917 	ldw	r2,-24540(gp)
 2025f74:	1000021e 	bne	r2,zero,2025f80 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 2025f78:	e0bffb17 	ldw	r2,-20(fp)
 2025f7c:	d0a80915 	stw	r2,-24540(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2025f80:	e0bffc17 	ldw	r2,-16(fp)
 2025f84:	10800104 	addi	r2,r2,4
 2025f88:	00c001c4 	movi	r3,7
 2025f8c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2025f90:	d8000015 	stw	zero,0(sp)
 2025f94:	e1fffc17 	ldw	r7,-16(fp)
 2025f98:	018080b4 	movhi	r6,514
 2025f9c:	3197b404 	addi	r6,r6,24272
 2025fa0:	e17ffe17 	ldw	r5,-8(fp)
 2025fa4:	e13ffd17 	ldw	r4,-12(fp)
 2025fa8:	2027a740 	call	2027a74 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2025fac:	0001883a 	nop
 2025fb0:	e037883a 	mov	sp,fp
 2025fb4:	dfc00117 	ldw	ra,4(sp)
 2025fb8:	df000017 	ldw	fp,0(sp)
 2025fbc:	dec00204 	addi	sp,sp,8
 2025fc0:	f800283a 	ret

02025fc4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2025fc4:	defffa04 	addi	sp,sp,-24
 2025fc8:	dfc00515 	stw	ra,20(sp)
 2025fcc:	df000415 	stw	fp,16(sp)
 2025fd0:	df000404 	addi	fp,sp,16
 2025fd4:	e13ffd15 	stw	r4,-12(fp)
 2025fd8:	e17ffe15 	stw	r5,-8(fp)
 2025fdc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2025fe0:	e0bffd17 	ldw	r2,-12(fp)
 2025fe4:	10800017 	ldw	r2,0(r2)
 2025fe8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2025fec:	e0bffc17 	ldw	r2,-16(fp)
 2025ff0:	10c00a04 	addi	r3,r2,40
 2025ff4:	e0bffd17 	ldw	r2,-12(fp)
 2025ff8:	10800217 	ldw	r2,8(r2)
 2025ffc:	100f883a 	mov	r7,r2
 2026000:	e1bfff17 	ldw	r6,-4(fp)
 2026004:	e17ffe17 	ldw	r5,-8(fp)
 2026008:	1809883a 	mov	r4,r3
 202600c:	20265880 	call	2026588 <altera_avalon_uart_read>
      fd->fd_flags);
}
 2026010:	e037883a 	mov	sp,fp
 2026014:	dfc00117 	ldw	ra,4(sp)
 2026018:	df000017 	ldw	fp,0(sp)
 202601c:	dec00204 	addi	sp,sp,8
 2026020:	f800283a 	ret

02026024 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2026024:	defffa04 	addi	sp,sp,-24
 2026028:	dfc00515 	stw	ra,20(sp)
 202602c:	df000415 	stw	fp,16(sp)
 2026030:	df000404 	addi	fp,sp,16
 2026034:	e13ffd15 	stw	r4,-12(fp)
 2026038:	e17ffe15 	stw	r5,-8(fp)
 202603c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2026040:	e0bffd17 	ldw	r2,-12(fp)
 2026044:	10800017 	ldw	r2,0(r2)
 2026048:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 202604c:	e0bffc17 	ldw	r2,-16(fp)
 2026050:	10c00a04 	addi	r3,r2,40
 2026054:	e0bffd17 	ldw	r2,-12(fp)
 2026058:	10800217 	ldw	r2,8(r2)
 202605c:	100f883a 	mov	r7,r2
 2026060:	e1bfff17 	ldw	r6,-4(fp)
 2026064:	e17ffe17 	ldw	r5,-8(fp)
 2026068:	1809883a 	mov	r4,r3
 202606c:	20267dc0 	call	20267dc <altera_avalon_uart_write>
      fd->fd_flags);
}
 2026070:	e037883a 	mov	sp,fp
 2026074:	dfc00117 	ldw	ra,4(sp)
 2026078:	df000017 	ldw	fp,0(sp)
 202607c:	dec00204 	addi	sp,sp,8
 2026080:	f800283a 	ret

02026084 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 2026084:	defffc04 	addi	sp,sp,-16
 2026088:	dfc00315 	stw	ra,12(sp)
 202608c:	df000215 	stw	fp,8(sp)
 2026090:	df000204 	addi	fp,sp,8
 2026094:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2026098:	e0bfff17 	ldw	r2,-4(fp)
 202609c:	10800017 	ldw	r2,0(r2)
 20260a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 20260a4:	e0bffe17 	ldw	r2,-8(fp)
 20260a8:	10c00a04 	addi	r3,r2,40
 20260ac:	e0bfff17 	ldw	r2,-4(fp)
 20260b0:	10800217 	ldw	r2,8(r2)
 20260b4:	100b883a 	mov	r5,r2
 20260b8:	1809883a 	mov	r4,r3
 20260bc:	20264f80 	call	20264f8 <altera_avalon_uart_close>
}
 20260c0:	e037883a 	mov	sp,fp
 20260c4:	dfc00117 	ldw	ra,4(sp)
 20260c8:	df000017 	ldw	fp,0(sp)
 20260cc:	dec00204 	addi	sp,sp,8
 20260d0:	f800283a 	ret

020260d4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 20260d4:	defff504 	addi	sp,sp,-44
 20260d8:	dfc00a15 	stw	ra,40(sp)
 20260dc:	df000915 	stw	fp,36(sp)
 20260e0:	df000904 	addi	fp,sp,36
 20260e4:	e13ffd15 	stw	r4,-12(fp)
 20260e8:	e17ffe15 	stw	r5,-8(fp)
 20260ec:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 20260f0:	e0bffd17 	ldw	r2,-12(fp)
 20260f4:	10800017 	ldw	r2,0(r2)
 20260f8:	e0bff815 	stw	r2,-32(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 20260fc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2026100:	1000301e 	bne	r2,zero,20261c4 <altera_avalon_uart_init+0xf0>
 2026104:	e0bffd17 	ldw	r2,-12(fp)
 2026108:	10800704 	addi	r2,r2,28
 202610c:	e0bff915 	stw	r2,-28(fp)
 2026110:	00800044 	movi	r2,1
 2026114:	e0bffc0d 	sth	r2,-16(fp)
 * alt_sem_create() is a wrapper for xSemaphoreCreateCounting(). The return value is 0 if 
 * the semaphore has been successfully created, or non-zero otherwise.
 */
static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (xSemaphoreHandle* sem, alt_u16 value)
{
	*sem = xSemaphoreCreateCounting(value ? value : 1, value);
 2026118:	e0bffc0b 	ldhu	r2,-16(fp)
 202611c:	10000226 	beq	r2,zero,2026128 <altera_avalon_uart_init+0x54>
 2026120:	e0bffc0b 	ldhu	r2,-16(fp)
 2026124:	00000106 	br	202612c <altera_avalon_uart_init+0x58>
 2026128:	00800044 	movi	r2,1
 202612c:	e0fffc0b 	ldhu	r3,-16(fp)
 2026130:	180b883a 	mov	r5,r3
 2026134:	1009883a 	mov	r4,r2
 2026138:	200d7f00 	call	200d7f0 <xQueueCreateCountingSemaphore>
 202613c:	1007883a 	mov	r3,r2
 2026140:	e0bff917 	ldw	r2,-28(fp)
 2026144:	10c00015 	stw	r3,0(r2)
	return *sem ? 0 : -1;
 2026148:	e0bff917 	ldw	r2,-28(fp)
 202614c:	10800017 	ldw	r2,0(r2)
 2026150:	10000226 	beq	r2,zero,202615c <altera_avalon_uart_init+0x88>
 2026154:	0005883a 	mov	r2,zero
 2026158:	00000106 	br	2026160 <altera_avalon_uart_init+0x8c>
 202615c:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2026160:	1000181e 	bne	r2,zero,20261c4 <altera_avalon_uart_init+0xf0>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
 2026164:	e0bffd17 	ldw	r2,-12(fp)
 2026168:	10800804 	addi	r2,r2,32
 202616c:	e0bffa15 	stw	r2,-24(fp)
 2026170:	00800044 	movi	r2,1
 2026174:	e0bffc8d 	sth	r2,-14(fp)
 * alt_sem_create() is a wrapper for xSemaphoreCreateCounting(). The return value is 0 if 
 * the semaphore has been successfully created, or non-zero otherwise.
 */
static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (xSemaphoreHandle* sem, alt_u16 value)
{
	*sem = xSemaphoreCreateCounting(value ? value : 1, value);
 2026178:	e0bffc8b 	ldhu	r2,-14(fp)
 202617c:	10000226 	beq	r2,zero,2026188 <altera_avalon_uart_init+0xb4>
 2026180:	e0bffc8b 	ldhu	r2,-14(fp)
 2026184:	00000106 	br	202618c <altera_avalon_uart_init+0xb8>
 2026188:	00800044 	movi	r2,1
 202618c:	e0fffc8b 	ldhu	r3,-14(fp)
 2026190:	180b883a 	mov	r5,r3
 2026194:	1009883a 	mov	r4,r2
 2026198:	200d7f00 	call	200d7f0 <xQueueCreateCountingSemaphore>
 202619c:	1007883a 	mov	r3,r2
 20261a0:	e0bffa17 	ldw	r2,-24(fp)
 20261a4:	10c00015 	stw	r3,0(r2)
	return *sem ? 0 : -1;
 20261a8:	e0bffa17 	ldw	r2,-24(fp)
 20261ac:	10800017 	ldw	r2,0(r2)
 20261b0:	10000226 	beq	r2,zero,20261bc <altera_avalon_uart_init+0xe8>
 20261b4:	0005883a 	mov	r2,zero
 20261b8:	00000106 	br	20261c0 <altera_avalon_uart_init+0xec>
 20261bc:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 20261c0:	10000226 	beq	r2,zero,20261cc <altera_avalon_uart_init+0xf8>
 20261c4:	00800044 	movi	r2,1
 20261c8:	00000106 	br	20261d0 <altera_avalon_uart_init+0xfc>
 20261cc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 20261d0:	e0bffb15 	stw	r2,-20(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 20261d4:	e0bffb17 	ldw	r2,-20(fp)
 20261d8:	10000f1e 	bne	r2,zero,2026218 <altera_avalon_uart_init+0x144>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 20261dc:	e0bffd17 	ldw	r2,-12(fp)
 20261e0:	00c32004 	movi	r3,3200
 20261e4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 20261e8:	e0bff817 	ldw	r2,-32(fp)
 20261ec:	10800304 	addi	r2,r2,12
 20261f0:	e0fffd17 	ldw	r3,-12(fp)
 20261f4:	18c00117 	ldw	r3,4(r3)
 20261f8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 20261fc:	d8000015 	stw	zero,0(sp)
 2026200:	e1fffd17 	ldw	r7,-12(fp)
 2026204:	018080b4 	movhi	r6,514
 2026208:	31988c04 	addi	r6,r6,25136
 202620c:	e17fff17 	ldw	r5,-4(fp)
 2026210:	e13ffe17 	ldw	r4,-8(fp)
 2026214:	2027a740 	call	2027a74 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 2026218:	0001883a 	nop
 202621c:	e037883a 	mov	sp,fp
 2026220:	dfc00117 	ldw	ra,4(sp)
 2026224:	df000017 	ldw	fp,0(sp)
 2026228:	dec00204 	addi	sp,sp,8
 202622c:	f800283a 	ret

02026230 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 2026230:	defffa04 	addi	sp,sp,-24
 2026234:	dfc00515 	stw	ra,20(sp)
 2026238:	df000415 	stw	fp,16(sp)
 202623c:	df000404 	addi	fp,sp,16
 2026240:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 2026244:	e0bfff17 	ldw	r2,-4(fp)
 2026248:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 202624c:	e0bffc17 	ldw	r2,-16(fp)
 2026250:	10800017 	ldw	r2,0(r2)
 2026254:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 2026258:	e0bffd17 	ldw	r2,-12(fp)
 202625c:	10800204 	addi	r2,r2,8
 2026260:	10800037 	ldwio	r2,0(r2)
 2026264:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 2026268:	e0bffd17 	ldw	r2,-12(fp)
 202626c:	10800204 	addi	r2,r2,8
 2026270:	0007883a 	mov	r3,zero
 2026274:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 2026278:	e0bffd17 	ldw	r2,-12(fp)
 202627c:	10800204 	addi	r2,r2,8
 2026280:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 2026284:	e0bffe17 	ldw	r2,-8(fp)
 2026288:	1080200c 	andi	r2,r2,128
 202628c:	10000326 	beq	r2,zero,202629c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 2026290:	e17ffe17 	ldw	r5,-8(fp)
 2026294:	e13ffc17 	ldw	r4,-16(fp)
 2026298:	20262cc0 	call	20262cc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 202629c:	e0bffe17 	ldw	r2,-8(fp)
 20262a0:	1081100c 	andi	r2,r2,1088
 20262a4:	10000326 	beq	r2,zero,20262b4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 20262a8:	e17ffe17 	ldw	r5,-8(fp)
 20262ac:	e13ffc17 	ldw	r4,-16(fp)
 20262b0:	20263b00 	call	20263b0 <altera_avalon_uart_txirq>
  }
  

}
 20262b4:	0001883a 	nop
 20262b8:	e037883a 	mov	sp,fp
 20262bc:	dfc00117 	ldw	ra,4(sp)
 20262c0:	df000017 	ldw	fp,0(sp)
 20262c4:	dec00204 	addi	sp,sp,8
 20262c8:	f800283a 	ret

020262cc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 20262cc:	defffc04 	addi	sp,sp,-16
 20262d0:	df000315 	stw	fp,12(sp)
 20262d4:	df000304 	addi	fp,sp,12
 20262d8:	e13ffe15 	stw	r4,-8(fp)
 20262dc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 20262e0:	e0bfff17 	ldw	r2,-4(fp)
 20262e4:	108000cc 	andi	r2,r2,3
 20262e8:	10002c1e 	bne	r2,zero,202639c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 20262ec:	e0bffe17 	ldw	r2,-8(fp)
 20262f0:	10800317 	ldw	r2,12(r2)
 20262f4:	e0bffe17 	ldw	r2,-8(fp)
 20262f8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 20262fc:	e0bffe17 	ldw	r2,-8(fp)
 2026300:	10800317 	ldw	r2,12(r2)
 2026304:	10800044 	addi	r2,r2,1
 2026308:	10800fcc 	andi	r2,r2,63
 202630c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 2026310:	e0bffe17 	ldw	r2,-8(fp)
 2026314:	10800317 	ldw	r2,12(r2)
 2026318:	e0fffe17 	ldw	r3,-8(fp)
 202631c:	18c00017 	ldw	r3,0(r3)
 2026320:	18c00037 	ldwio	r3,0(r3)
 2026324:	1809883a 	mov	r4,r3
 2026328:	e0fffe17 	ldw	r3,-8(fp)
 202632c:	1885883a 	add	r2,r3,r2
 2026330:	10800904 	addi	r2,r2,36
 2026334:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 2026338:	e0bffe17 	ldw	r2,-8(fp)
 202633c:	e0fffd17 	ldw	r3,-12(fp)
 2026340:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2026344:	e0bffe17 	ldw	r2,-8(fp)
 2026348:	10800317 	ldw	r2,12(r2)
 202634c:	10800044 	addi	r2,r2,1
 2026350:	10800fcc 	andi	r2,r2,63
 2026354:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 2026358:	e0bffe17 	ldw	r2,-8(fp)
 202635c:	10c00217 	ldw	r3,8(r2)
 2026360:	e0bffd17 	ldw	r2,-12(fp)
 2026364:	18800e1e 	bne	r3,r2,20263a0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2026368:	e0bffe17 	ldw	r2,-8(fp)
 202636c:	10c00117 	ldw	r3,4(r2)
 2026370:	00bfdfc4 	movi	r2,-129
 2026374:	1886703a 	and	r3,r3,r2
 2026378:	e0bffe17 	ldw	r2,-8(fp)
 202637c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 2026380:	e0bffe17 	ldw	r2,-8(fp)
 2026384:	10800017 	ldw	r2,0(r2)
 2026388:	10800304 	addi	r2,r2,12
 202638c:	e0fffe17 	ldw	r3,-8(fp)
 2026390:	18c00117 	ldw	r3,4(r3)
 2026394:	10c00035 	stwio	r3,0(r2)
 2026398:	00000106 	br	20263a0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 202639c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 20263a0:	e037883a 	mov	sp,fp
 20263a4:	df000017 	ldw	fp,0(sp)
 20263a8:	dec00104 	addi	sp,sp,4
 20263ac:	f800283a 	ret

020263b0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 20263b0:	defffb04 	addi	sp,sp,-20
 20263b4:	df000415 	stw	fp,16(sp)
 20263b8:	df000404 	addi	fp,sp,16
 20263bc:	e13ffc15 	stw	r4,-16(fp)
 20263c0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 20263c4:	e0bffc17 	ldw	r2,-16(fp)
 20263c8:	10c00417 	ldw	r3,16(r2)
 20263cc:	e0bffc17 	ldw	r2,-16(fp)
 20263d0:	10800517 	ldw	r2,20(r2)
 20263d4:	18803226 	beq	r3,r2,20264a0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 20263d8:	e0bffc17 	ldw	r2,-16(fp)
 20263dc:	10800617 	ldw	r2,24(r2)
 20263e0:	1080008c 	andi	r2,r2,2
 20263e4:	10000326 	beq	r2,zero,20263f4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 20263e8:	e0bffd17 	ldw	r2,-12(fp)
 20263ec:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 20263f0:	10001d26 	beq	r2,zero,2026468 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 20263f4:	e0bffc17 	ldw	r2,-16(fp)
 20263f8:	10800417 	ldw	r2,16(r2)
 20263fc:	e0bffc17 	ldw	r2,-16(fp)
 2026400:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 2026404:	e0bffc17 	ldw	r2,-16(fp)
 2026408:	10800017 	ldw	r2,0(r2)
 202640c:	10800104 	addi	r2,r2,4
 2026410:	e0fffc17 	ldw	r3,-16(fp)
 2026414:	18c00417 	ldw	r3,16(r3)
 2026418:	e13ffc17 	ldw	r4,-16(fp)
 202641c:	20c7883a 	add	r3,r4,r3
 2026420:	18c01904 	addi	r3,r3,100
 2026424:	18c00003 	ldbu	r3,0(r3)
 2026428:	18c03fcc 	andi	r3,r3,255
 202642c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 2026430:	e0bffc17 	ldw	r2,-16(fp)
 2026434:	10800417 	ldw	r2,16(r2)
 2026438:	10800044 	addi	r2,r2,1
 202643c:	e0fffc17 	ldw	r3,-16(fp)
 2026440:	18800415 	stw	r2,16(r3)
 2026444:	10c00fcc 	andi	r3,r2,63
 2026448:	e0bffc17 	ldw	r2,-16(fp)
 202644c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2026450:	e0bffc17 	ldw	r2,-16(fp)
 2026454:	10800117 	ldw	r2,4(r2)
 2026458:	10c01014 	ori	r3,r2,64
 202645c:	e0bffc17 	ldw	r2,-16(fp)
 2026460:	10c00115 	stw	r3,4(r2)
 2026464:	00000e06 	br	20264a0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 2026468:	e0bffc17 	ldw	r2,-16(fp)
 202646c:	10800017 	ldw	r2,0(r2)
 2026470:	10800204 	addi	r2,r2,8
 2026474:	10800037 	ldwio	r2,0(r2)
 2026478:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 202647c:	e0bffd17 	ldw	r2,-12(fp)
 2026480:	1082000c 	andi	r2,r2,2048
 2026484:	1000061e 	bne	r2,zero,20264a0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2026488:	e0bffc17 	ldw	r2,-16(fp)
 202648c:	10c00117 	ldw	r3,4(r2)
 2026490:	00bfefc4 	movi	r2,-65
 2026494:	1886703a 	and	r3,r3,r2
 2026498:	e0bffc17 	ldw	r2,-16(fp)
 202649c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 20264a0:	e0bffc17 	ldw	r2,-16(fp)
 20264a4:	10c00417 	ldw	r3,16(r2)
 20264a8:	e0bffc17 	ldw	r2,-16(fp)
 20264ac:	10800517 	ldw	r2,20(r2)
 20264b0:	1880061e 	bne	r3,r2,20264cc <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 20264b4:	e0bffc17 	ldw	r2,-16(fp)
 20264b8:	10c00117 	ldw	r3,4(r2)
 20264bc:	00beefc4 	movi	r2,-1089
 20264c0:	1886703a 	and	r3,r3,r2
 20264c4:	e0bffc17 	ldw	r2,-16(fp)
 20264c8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20264cc:	e0bffc17 	ldw	r2,-16(fp)
 20264d0:	10800017 	ldw	r2,0(r2)
 20264d4:	10800304 	addi	r2,r2,12
 20264d8:	e0fffc17 	ldw	r3,-16(fp)
 20264dc:	18c00117 	ldw	r3,4(r3)
 20264e0:	10c00035 	stwio	r3,0(r2)
}
 20264e4:	0001883a 	nop
 20264e8:	e037883a 	mov	sp,fp
 20264ec:	df000017 	ldw	fp,0(sp)
 20264f0:	dec00104 	addi	sp,sp,4
 20264f4:	f800283a 	ret

020264f8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 20264f8:	defffd04 	addi	sp,sp,-12
 20264fc:	df000215 	stw	fp,8(sp)
 2026500:	df000204 	addi	fp,sp,8
 2026504:	e13ffe15 	stw	r4,-8(fp)
 2026508:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 202650c:	00000506 	br	2026524 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2026510:	e0bfff17 	ldw	r2,-4(fp)
 2026514:	1090000c 	andi	r2,r2,16384
 2026518:	10000226 	beq	r2,zero,2026524 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 202651c:	00bffd44 	movi	r2,-11
 2026520:	00000606 	br	202653c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 2026524:	e0bffe17 	ldw	r2,-8(fp)
 2026528:	10c00417 	ldw	r3,16(r2)
 202652c:	e0bffe17 	ldw	r2,-8(fp)
 2026530:	10800517 	ldw	r2,20(r2)
 2026534:	18bff61e 	bne	r3,r2,2026510 <__alt_mem_mem_0+0xfd006510>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2026538:	0005883a 	mov	r2,zero
}
 202653c:	e037883a 	mov	sp,fp
 2026540:	df000017 	ldw	fp,0(sp)
 2026544:	dec00104 	addi	sp,sp,4
 2026548:	f800283a 	ret

0202654c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 202654c:	defffe04 	addi	sp,sp,-8
 2026550:	dfc00115 	stw	ra,4(sp)
 2026554:	df000015 	stw	fp,0(sp)
 2026558:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 202655c:	d0a01917 	ldw	r2,-32668(gp)
 2026560:	10000326 	beq	r2,zero,2026570 <alt_get_errno+0x24>
 2026564:	d0a01917 	ldw	r2,-32668(gp)
 2026568:	103ee83a 	callr	r2
 202656c:	00000106 	br	2026574 <alt_get_errno+0x28>
 2026570:	d0a7ce04 	addi	r2,gp,-24776
}
 2026574:	e037883a 	mov	sp,fp
 2026578:	dfc00117 	ldw	ra,4(sp)
 202657c:	df000017 	ldw	fp,0(sp)
 2026580:	dec00204 	addi	sp,sp,8
 2026584:	f800283a 	ret

02026588 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 2026588:	deffef04 	addi	sp,sp,-68
 202658c:	dfc01015 	stw	ra,64(sp)
 2026590:	df000f15 	stw	fp,60(sp)
 2026594:	df000f04 	addi	fp,sp,60
 2026598:	e13ffb15 	stw	r4,-20(fp)
 202659c:	e17ffc15 	stw	r5,-16(fp)
 20265a0:	e1bffd15 	stw	r6,-12(fp)
 20265a4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 20265a8:	e03ff105 	stb	zero,-60(fp)
  int             count = 0;
 20265ac:	e03ff215 	stw	zero,-56(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 20265b0:	e0bffe17 	ldw	r2,-8(fp)
 20265b4:	1090000c 	andi	r2,r2,16384
 20265b8:	1005003a 	cmpeq	r2,r2,zero
 20265bc:	10803fcc 	andi	r2,r2,255
 20265c0:	e0bff315 	stw	r2,-52(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
 20265c4:	e0bffb17 	ldw	r2,-20(fp)
 20265c8:	10800717 	ldw	r2,28(r2)
 20265cc:	e0bff915 	stw	r2,-28(fp)
 20265d0:	e03ffa0d 	sth	zero,-24(fp)
 * converted into the functions return value.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (xSemaphoreHandle sem, alt_u16 timeout)
{
	return xSemaphoreTake(sem, timeout) ? 0 : -1;
 20265d4:	e0bffa0b 	ldhu	r2,-24(fp)
 20265d8:	100b883a 	mov	r5,r2
 20265dc:	e13ff917 	ldw	r4,-28(fp)
 20265e0:	200ddd40 	call	200ddd4 <xQueueSemaphoreTake>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 20265e4:	00001306 	br	2026634 <altera_avalon_uart_read+0xac>
    {
      count++;
 20265e8:	e0bff217 	ldw	r2,-56(fp)
 20265ec:	10800044 	addi	r2,r2,1
 20265f0:	e0bff215 	stw	r2,-56(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 20265f4:	e0bffc17 	ldw	r2,-16(fp)
 20265f8:	10c00044 	addi	r3,r2,1
 20265fc:	e0fffc15 	stw	r3,-16(fp)
 2026600:	e0fffb17 	ldw	r3,-20(fp)
 2026604:	18c00217 	ldw	r3,8(r3)
 2026608:	e13ffb17 	ldw	r4,-20(fp)
 202660c:	20c7883a 	add	r3,r4,r3
 2026610:	18c00904 	addi	r3,r3,36
 2026614:	18c00003 	ldbu	r3,0(r3)
 2026618:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 202661c:	e0bffb17 	ldw	r2,-20(fp)
 2026620:	10800217 	ldw	r2,8(r2)
 2026624:	10800044 	addi	r2,r2,1
 2026628:	10c00fcc 	andi	r3,r2,63
 202662c:	e0bffb17 	ldw	r2,-20(fp)
 2026630:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2026634:	e0fff217 	ldw	r3,-56(fp)
 2026638:	e0bffd17 	ldw	r2,-12(fp)
 202663c:	1880050e 	bge	r3,r2,2026654 <altera_avalon_uart_read+0xcc>
 2026640:	e0bffb17 	ldw	r2,-20(fp)
 2026644:	10c00217 	ldw	r3,8(r2)
 2026648:	e0bffb17 	ldw	r2,-20(fp)
 202664c:	10800317 	ldw	r2,12(r2)
 2026650:	18bfe51e 	bne	r3,r2,20265e8 <__alt_mem_mem_0+0xfd0065e8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 2026654:	e0bff217 	ldw	r2,-56(fp)
 2026658:	1000251e 	bne	r2,zero,20266f0 <altera_avalon_uart_read+0x168>
 202665c:	e0bffb17 	ldw	r2,-20(fp)
 2026660:	10c00217 	ldw	r3,8(r2)
 2026664:	e0bffb17 	ldw	r2,-20(fp)
 2026668:	10800317 	ldw	r2,12(r2)
 202666c:	1880201e 	bne	r3,r2,20266f0 <altera_avalon_uart_read+0x168>
    {
      if (!block)
 2026670:	e0bff317 	ldw	r2,-52(fp)
 2026674:	1000071e 	bne	r2,zero,2026694 <altera_avalon_uart_read+0x10c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 2026678:	202654c0 	call	202654c <alt_get_errno>
 202667c:	1007883a 	mov	r3,r2
 2026680:	008002c4 	movi	r2,11
 2026684:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 2026688:	00800044 	movi	r2,1
 202668c:	e0bff105 	stb	r2,-60(fp)
        break;
 2026690:	00001b06 	br	2026700 <altera_avalon_uart_read+0x178>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2026694:	0005303a 	rdctl	r2,status
 2026698:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 202669c:	e0fff617 	ldw	r3,-40(fp)
 20266a0:	00bfff84 	movi	r2,-2
 20266a4:	1884703a 	and	r2,r3,r2
 20266a8:	1001703a 	wrctl	status,r2
  
  return context;
 20266ac:	e0bff617 	ldw	r2,-40(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 20266b0:	e0bff515 	stw	r2,-44(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 20266b4:	e0bffb17 	ldw	r2,-20(fp)
 20266b8:	10800117 	ldw	r2,4(r2)
 20266bc:	10c02014 	ori	r3,r2,128
 20266c0:	e0bffb17 	ldw	r2,-20(fp)
 20266c4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20266c8:	e0bffb17 	ldw	r2,-20(fp)
 20266cc:	10800017 	ldw	r2,0(r2)
 20266d0:	10800304 	addi	r2,r2,12
 20266d4:	e0fffb17 	ldw	r3,-20(fp)
 20266d8:	18c00117 	ldw	r3,4(r3)
 20266dc:	10c00035 	stwio	r3,0(r2)
 20266e0:	e0bff517 	ldw	r2,-44(fp)
 20266e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20266e8:	e0bff717 	ldw	r2,-36(fp)
 20266ec:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 20266f0:	e0bff217 	ldw	r2,-56(fp)
 20266f4:	1000021e 	bne	r2,zero,2026700 <altera_avalon_uart_read+0x178>
 20266f8:	e0bffd17 	ldw	r2,-12(fp)
 20266fc:	103fcd1e 	bne	r2,zero,2026634 <__alt_mem_mem_0+0xfd006634>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 2026700:	e0bffb17 	ldw	r2,-20(fp)
 2026704:	10800717 	ldw	r2,28(r2)
 2026708:	000f883a 	mov	r7,zero
 202670c:	000d883a 	mov	r6,zero
 2026710:	000b883a 	mov	r5,zero
 2026714:	1009883a 	mov	r4,r2
 2026718:	200d8480 	call	200d848 <xQueueGenericSend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 202671c:	0005303a 	rdctl	r2,status
 2026720:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2026724:	e0fff817 	ldw	r3,-32(fp)
 2026728:	00bfff84 	movi	r2,-2
 202672c:	1884703a 	and	r2,r3,r2
 2026730:	1001703a 	wrctl	status,r2
  
  return context;
 2026734:	e0bff817 	ldw	r2,-32(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 2026738:	e0bff515 	stw	r2,-44(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 202673c:	e0bffb17 	ldw	r2,-20(fp)
 2026740:	10800117 	ldw	r2,4(r2)
 2026744:	10c02014 	ori	r3,r2,128
 2026748:	e0bffb17 	ldw	r2,-20(fp)
 202674c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2026750:	e0bffb17 	ldw	r2,-20(fp)
 2026754:	10800017 	ldw	r2,0(r2)
 2026758:	10800304 	addi	r2,r2,12
 202675c:	e0fffb17 	ldw	r3,-20(fp)
 2026760:	18c00117 	ldw	r3,4(r3)
 2026764:	10c00035 	stwio	r3,0(r2)
 2026768:	e0bff517 	ldw	r2,-44(fp)
 202676c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2026770:	e0bff417 	ldw	r2,-48(fp)
 2026774:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 2026778:	e0bff103 	ldbu	r2,-60(fp)
 202677c:	10000226 	beq	r2,zero,2026788 <altera_avalon_uart_read+0x200>
    return -EWOULDBLOCK;
 2026780:	00bffd44 	movi	r2,-11
 2026784:	00000106 	br	202678c <altera_avalon_uart_read+0x204>
  }
  else {
    return count;
 2026788:	e0bff217 	ldw	r2,-56(fp)
  }
}
 202678c:	e037883a 	mov	sp,fp
 2026790:	dfc00117 	ldw	ra,4(sp)
 2026794:	df000017 	ldw	fp,0(sp)
 2026798:	dec00204 	addi	sp,sp,8
 202679c:	f800283a 	ret

020267a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20267a0:	defffe04 	addi	sp,sp,-8
 20267a4:	dfc00115 	stw	ra,4(sp)
 20267a8:	df000015 	stw	fp,0(sp)
 20267ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20267b0:	d0a01917 	ldw	r2,-32668(gp)
 20267b4:	10000326 	beq	r2,zero,20267c4 <alt_get_errno+0x24>
 20267b8:	d0a01917 	ldw	r2,-32668(gp)
 20267bc:	103ee83a 	callr	r2
 20267c0:	00000106 	br	20267c8 <alt_get_errno+0x28>
 20267c4:	d0a7ce04 	addi	r2,gp,-24776
}
 20267c8:	e037883a 	mov	sp,fp
 20267cc:	dfc00117 	ldw	ra,4(sp)
 20267d0:	df000017 	ldw	fp,0(sp)
 20267d4:	dec00204 	addi	sp,sp,8
 20267d8:	f800283a 	ret

020267dc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 20267dc:	deffef04 	addi	sp,sp,-68
 20267e0:	dfc01015 	stw	ra,64(sp)
 20267e4:	df000f15 	stw	fp,60(sp)
 20267e8:	df000f04 	addi	fp,sp,60
 20267ec:	e13ffb15 	stw	r4,-20(fp)
 20267f0:	e17ffc15 	stw	r5,-16(fp)
 20267f4:	e1bffd15 	stw	r6,-12(fp)
 20267f8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 20267fc:	e0bffd17 	ldw	r2,-12(fp)
 2026800:	e0bff115 	stw	r2,-60(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 2026804:	e0bffe17 	ldw	r2,-8(fp)
 2026808:	1090000c 	andi	r2,r2,16384
 202680c:	e0bff215 	stw	r2,-56(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
 2026810:	e0bffb17 	ldw	r2,-20(fp)
 2026814:	10800817 	ldw	r2,32(r2)
 2026818:	e0bff915 	stw	r2,-28(fp)
 202681c:	e03ffa0d 	sth	zero,-24(fp)
 2026820:	e0bffa0b 	ldhu	r2,-24(fp)
 2026824:	100b883a 	mov	r5,r2
 2026828:	e13ff917 	ldw	r4,-28(fp)
 202682c:	200ddd40 	call	200ddd4 <xQueueSemaphoreTake>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2026830:	00003c06 	br	2026924 <altera_avalon_uart_write+0x148>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2026834:	e0bffb17 	ldw	r2,-20(fp)
 2026838:	10800517 	ldw	r2,20(r2)
 202683c:	10800044 	addi	r2,r2,1
 2026840:	10800fcc 	andi	r2,r2,63
 2026844:	e0bff415 	stw	r2,-48(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 2026848:	e0bffb17 	ldw	r2,-20(fp)
 202684c:	10c00417 	ldw	r3,16(r2)
 2026850:	e0bff417 	ldw	r2,-48(fp)
 2026854:	1880221e 	bne	r3,r2,20268e0 <altera_avalon_uart_write+0x104>
    {
      if (no_block)
 2026858:	e0bff217 	ldw	r2,-56(fp)
 202685c:	10000526 	beq	r2,zero,2026874 <altera_avalon_uart_write+0x98>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 2026860:	20267a00 	call	20267a0 <alt_get_errno>
 2026864:	1007883a 	mov	r3,r2
 2026868:	008002c4 	movi	r2,11
 202686c:	18800015 	stw	r2,0(r3)
        break;
 2026870:	00002e06 	br	202692c <altera_avalon_uart_write+0x150>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2026874:	0005303a 	rdctl	r2,status
 2026878:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 202687c:	e0fff617 	ldw	r3,-40(fp)
 2026880:	00bfff84 	movi	r2,-2
 2026884:	1884703a 	and	r2,r3,r2
 2026888:	1001703a 	wrctl	status,r2
  
  return context;
 202688c:	e0bff617 	ldw	r2,-40(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 2026890:	e0bff515 	stw	r2,-44(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2026894:	e0bffb17 	ldw	r2,-20(fp)
 2026898:	10800117 	ldw	r2,4(r2)
 202689c:	10c11014 	ori	r3,r2,1088
 20268a0:	e0bffb17 	ldw	r2,-20(fp)
 20268a4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 20268a8:	e0bffb17 	ldw	r2,-20(fp)
 20268ac:	10800017 	ldw	r2,0(r2)
 20268b0:	10800304 	addi	r2,r2,12
 20268b4:	e0fffb17 	ldw	r3,-20(fp)
 20268b8:	18c00117 	ldw	r3,4(r3)
 20268bc:	10c00035 	stwio	r3,0(r2)
 20268c0:	e0bff517 	ldw	r2,-44(fp)
 20268c4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20268c8:	e0bff317 	ldw	r2,-52(fp)
 20268cc:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 20268d0:	e0bffb17 	ldw	r2,-20(fp)
 20268d4:	10c00417 	ldw	r3,16(r2)
 20268d8:	e0bff417 	ldw	r2,-48(fp)
 20268dc:	18bffc26 	beq	r3,r2,20268d0 <__alt_mem_mem_0+0xfd0068d0>
      }
    }

    count--;
 20268e0:	e0bff117 	ldw	r2,-60(fp)
 20268e4:	10bfffc4 	addi	r2,r2,-1
 20268e8:	e0bff115 	stw	r2,-60(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 20268ec:	e0bffb17 	ldw	r2,-20(fp)
 20268f0:	10c00517 	ldw	r3,20(r2)
 20268f4:	e0bffc17 	ldw	r2,-16(fp)
 20268f8:	11000044 	addi	r4,r2,1
 20268fc:	e13ffc15 	stw	r4,-16(fp)
 2026900:	10800003 	ldbu	r2,0(r2)
 2026904:	1009883a 	mov	r4,r2
 2026908:	e0bffb17 	ldw	r2,-20(fp)
 202690c:	10c5883a 	add	r2,r2,r3
 2026910:	10801904 	addi	r2,r2,100
 2026914:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 2026918:	e0bffb17 	ldw	r2,-20(fp)
 202691c:	e0fff417 	ldw	r3,-48(fp)
 2026920:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2026924:	e0bff117 	ldw	r2,-60(fp)
 2026928:	103fc21e 	bne	r2,zero,2026834 <__alt_mem_mem_0+0xfd006834>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
 202692c:	e0bffb17 	ldw	r2,-20(fp)
 2026930:	10800817 	ldw	r2,32(r2)
 2026934:	000f883a 	mov	r7,zero
 2026938:	000d883a 	mov	r6,zero
 202693c:	000b883a 	mov	r5,zero
 2026940:	1009883a 	mov	r4,r2
 2026944:	200d8480 	call	200d848 <xQueueGenericSend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2026948:	0005303a 	rdctl	r2,status
 202694c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2026950:	e0fff817 	ldw	r3,-32(fp)
 2026954:	00bfff84 	movi	r2,-2
 2026958:	1884703a 	and	r2,r3,r2
 202695c:	1001703a 	wrctl	status,r2
  
  return context;
 2026960:	e0bff817 	ldw	r2,-32(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 2026964:	e0bff515 	stw	r2,-44(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2026968:	e0bffb17 	ldw	r2,-20(fp)
 202696c:	10800117 	ldw	r2,4(r2)
 2026970:	10c11014 	ori	r3,r2,1088
 2026974:	e0bffb17 	ldw	r2,-20(fp)
 2026978:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 202697c:	e0bffb17 	ldw	r2,-20(fp)
 2026980:	10800017 	ldw	r2,0(r2)
 2026984:	10800304 	addi	r2,r2,12
 2026988:	e0fffb17 	ldw	r3,-20(fp)
 202698c:	18c00117 	ldw	r3,4(r3)
 2026990:	10c00035 	stwio	r3,0(r2)
 2026994:	e0bff517 	ldw	r2,-44(fp)
 2026998:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 202699c:	e0bff717 	ldw	r2,-36(fp)
 20269a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 20269a4:	e0fffd17 	ldw	r3,-12(fp)
 20269a8:	e0bff117 	ldw	r2,-60(fp)
 20269ac:	1885c83a 	sub	r2,r3,r2
}
 20269b0:	e037883a 	mov	sp,fp
 20269b4:	dfc00117 	ldw	ra,4(sp)
 20269b8:	df000017 	ldw	fp,0(sp)
 20269bc:	dec00204 	addi	sp,sp,8
 20269c0:	f800283a 	ret

020269c4 <__env_lock>:
xSemaphoreHandle alt_envsem;

/* __env_lock needs to provide recursive mutex locking */

void __env_lock ( struct _reent *_r )
{
 20269c4:	defffd04 	addi	sp,sp,-12
 20269c8:	dfc00215 	stw	ra,8(sp)
 20269cc:	df000115 	stw	fp,4(sp)
 20269d0:	df000104 	addi	fp,sp,4
 20269d4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 20269d8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20269dc:	10000b26 	beq	r2,zero,2026a0c <__env_lock+0x48>
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_envsem, 10) != pdTRUE)
 20269e0:	00000206 	br	20269ec <__env_lock+0x28>
		vTaskDelay(1);
 20269e4:	01000044 	movi	r4,1
 20269e8:	200f0980 	call	200f098 <vTaskDelay>
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;

	// wait for the mutex to be released
	while (xSemaphoreTakeRecursive(alt_envsem, 10) != pdTRUE)
 20269ec:	d0a80017 	ldw	r2,-24576(gp)
 20269f0:	01400284 	movi	r5,10
 20269f4:	1009883a 	mov	r4,r2
 20269f8:	200d7540 	call	200d754 <xQueueTakeMutexRecursive>
 20269fc:	10800058 	cmpnei	r2,r2,1
 2026a00:	103ff81e 	bne	r2,zero,20269e4 <__alt_mem_mem_0+0xfd0069e4>
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
 2026a04:	0001883a 	nop
 2026a08:	00000106 	br	2026a10 <__env_lock+0x4c>

void __env_lock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 2026a0c:	0001883a 	nop
	while (xSemaphoreTakeRecursive(alt_envsem, 10) != pdTRUE)
		vTaskDelay(1);

#endif /* OS_THREAD_SAFE_NEWLIB */
	return;
}
 2026a10:	e037883a 	mov	sp,fp
 2026a14:	dfc00117 	ldw	ra,4(sp)
 2026a18:	df000017 	ldw	fp,0(sp)
 2026a1c:	dec00204 	addi	sp,sp,8
 2026a20:	f800283a 	ret

02026a24 <__env_unlock>:

/* __env_unlock needs to provide recursive mutex unlocking */

void __env_unlock ( struct _reent *_r )
{
 2026a24:	defffd04 	addi	sp,sp,-12
 2026a28:	dfc00215 	stw	ra,8(sp)
 2026a2c:	df000115 	stw	fp,4(sp)
 2026a30:	df000104 	addi	fp,sp,4
 2026a34:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
 2026a38:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2026a3c:	10000426 	beq	r2,zero,2026a50 <__env_unlock+0x2c>
		return;
	  
	xSemaphoreGiveRecursive(alt_envsem);
 2026a40:	d0a80017 	ldw	r2,-24576(gp)
 2026a44:	1009883a 	mov	r4,r2
 2026a48:	200d6c40 	call	200d6c4 <xQueueGiveMutexRecursive>
 2026a4c:	00000106 	br	2026a54 <__env_unlock+0x30>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
	if (!xTaskGetSchedulerState())
		return;
 2026a50:	0001883a 	nop
	  
	xSemaphoreGiveRecursive(alt_envsem);
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 2026a54:	e037883a 	mov	sp,fp
 2026a58:	dfc00117 	ldw	ra,4(sp)
 2026a5c:	df000017 	ldw	fp,0(sp)
 2026a60:	dec00204 	addi	sp,sp,8
 2026a64:	f800283a 	ret

02026a68 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 2026a68:	defffc04 	addi	sp,sp,-16
 2026a6c:	dfc00315 	stw	ra,12(sp)
 2026a70:	df000215 	stw	fp,8(sp)
 2026a74:	df000204 	addi	fp,sp,8
 2026a78:	e13fff15 	stw	r4,-4(fp)
void *pvReturn = NULL;
 2026a7c:	e03ffe15 	stw	zero,-8(fp)
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 2026a80:	e0bfff17 	ldw	r2,-4(fp)
 2026a84:	108000cc 	andi	r2,r2,3
 2026a88:	10000526 	beq	r2,zero,2026aa0 <pvPortMalloc+0x38>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 2026a8c:	e0ffff17 	ldw	r3,-4(fp)
 2026a90:	00bfff04 	movi	r2,-4
 2026a94:	1884703a 	and	r2,r3,r2
 2026a98:	10800104 	addi	r2,r2,4
 2026a9c:	e0bfff15 	stw	r2,-4(fp)
		}
	}
	#endif

	vTaskSuspendAll();
 2026aa0:	200f8840 	call	200f884 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 2026aa4:	d0a80217 	ldw	r2,-24568(gp)
 2026aa8:	1000051e 	bne	r2,zero,2026ac0 <pvPortMalloc+0x58>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 2026aac:	00808134 	movhi	r2,516
 2026ab0:	109ed004 	addi	r2,r2,31552
 2026ab4:	00ffff04 	movi	r3,-4
 2026ab8:	10c4703a 	and	r2,r2,r3
 2026abc:	d0a80215 	stw	r2,-24568(gp)
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 2026ac0:	d0e80117 	ldw	r3,-24572(gp)
 2026ac4:	e0bfff17 	ldw	r2,-4(fp)
 2026ac8:	1887883a 	add	r3,r3,r2
 2026acc:	00800434 	movhi	r2,16
 2026ad0:	10bffec4 	addi	r2,r2,-5
 2026ad4:	10c00d36 	bltu	r2,r3,2026b0c <pvPortMalloc+0xa4>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 2026ad8:	d0e80117 	ldw	r3,-24572(gp)
 2026adc:	e0bfff17 	ldw	r2,-4(fp)
 2026ae0:	1885883a 	add	r2,r3,r2
 2026ae4:	d0e80117 	ldw	r3,-24572(gp)
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 2026ae8:	1880082e 	bgeu	r3,r2,2026b0c <pvPortMalloc+0xa4>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 2026aec:	d0e80217 	ldw	r3,-24568(gp)
 2026af0:	d0a80117 	ldw	r2,-24572(gp)
 2026af4:	1885883a 	add	r2,r3,r2
 2026af8:	e0bffe15 	stw	r2,-8(fp)
			xNextFreeByte += xWantedSize;
 2026afc:	d0e80117 	ldw	r3,-24572(gp)
 2026b00:	e0bfff17 	ldw	r2,-4(fp)
 2026b04:	1885883a 	add	r2,r3,r2
 2026b08:	d0a80115 	stw	r2,-24572(gp)
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 2026b0c:	200f8b00 	call	200f8b0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 2026b10:	e0bffe17 	ldw	r2,-8(fp)
}
 2026b14:	e037883a 	mov	sp,fp
 2026b18:	dfc00117 	ldw	ra,4(sp)
 2026b1c:	df000017 	ldw	fp,0(sp)
 2026b20:	dec00204 	addi	sp,sp,8
 2026b24:	f800283a 	ret

02026b28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 2026b28:	defffe04 	addi	sp,sp,-8
 2026b2c:	df000115 	stw	fp,4(sp)
 2026b30:	df000104 	addi	fp,sp,4
 2026b34:	e13fff15 	stw	r4,-4(fp)
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
 2026b38:	0001883a 	nop
 2026b3c:	e037883a 	mov	sp,fp
 2026b40:	df000017 	ldw	fp,0(sp)
 2026b44:	dec00104 	addi	sp,sp,4
 2026b48:	f800283a 	ret

02026b4c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 2026b4c:	deffff04 	addi	sp,sp,-4
 2026b50:	df000015 	stw	fp,0(sp)
 2026b54:	d839883a 	mov	fp,sp
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
 2026b58:	d0280115 	stw	zero,-24572(gp)
}
 2026b5c:	0001883a 	nop
 2026b60:	e037883a 	mov	sp,fp
 2026b64:	df000017 	ldw	fp,0(sp)
 2026b68:	dec00104 	addi	sp,sp,4
 2026b6c:	f800283a 	ret

02026b70 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 2026b70:	deffff04 	addi	sp,sp,-4
 2026b74:	df000015 	stw	fp,0(sp)
 2026b78:	d839883a 	mov	fp,sp
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 2026b7c:	d0e80117 	ldw	r3,-24572(gp)
 2026b80:	00800434 	movhi	r2,16
 2026b84:	10bfff04 	addi	r2,r2,-4
 2026b88:	10c5c83a 	sub	r2,r2,r3
}
 2026b8c:	e037883a 	mov	sp,fp
 2026b90:	df000017 	ldw	fp,0(sp)
 2026b94:	dec00104 	addi	sp,sp,4
 2026b98:	f800283a 	ret

02026b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 2026b9c:	defffe04 	addi	sp,sp,-8
 2026ba0:	df000115 	stw	fp,4(sp)
 2026ba4:	df000104 	addi	fp,sp,4
 2026ba8:	e13fff15 	stw	r4,-4(fp)
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 2026bac:	e0bfff17 	ldw	r2,-4(fp)
 2026bb0:	10c00204 	addi	r3,r2,8
 2026bb4:	e0bfff17 	ldw	r2,-4(fp)
 2026bb8:	10c00115 	stw	r3,4(r2)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 2026bbc:	e0bfff17 	ldw	r2,-4(fp)
 2026bc0:	00ffffc4 	movi	r3,-1
 2026bc4:	10c00215 	stw	r3,8(r2)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 2026bc8:	e0bfff17 	ldw	r2,-4(fp)
 2026bcc:	10c00204 	addi	r3,r2,8
 2026bd0:	e0bfff17 	ldw	r2,-4(fp)
 2026bd4:	10c00315 	stw	r3,12(r2)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 2026bd8:	e0bfff17 	ldw	r2,-4(fp)
 2026bdc:	10c00204 	addi	r3,r2,8
 2026be0:	e0bfff17 	ldw	r2,-4(fp)
 2026be4:	10c00415 	stw	r3,16(r2)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 2026be8:	e0bfff17 	ldw	r2,-4(fp)
 2026bec:	10000015 	stw	zero,0(r2)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 2026bf0:	0001883a 	nop
 2026bf4:	e037883a 	mov	sp,fp
 2026bf8:	df000017 	ldw	fp,0(sp)
 2026bfc:	dec00104 	addi	sp,sp,4
 2026c00:	f800283a 	ret

02026c04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 2026c04:	defffe04 	addi	sp,sp,-8
 2026c08:	df000115 	stw	fp,4(sp)
 2026c0c:	df000104 	addi	fp,sp,4
 2026c10:	e13fff15 	stw	r4,-4(fp)
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 2026c14:	e0bfff17 	ldw	r2,-4(fp)
 2026c18:	10000415 	stw	zero,16(r2)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 2026c1c:	0001883a 	nop
 2026c20:	e037883a 	mov	sp,fp
 2026c24:	df000017 	ldw	fp,0(sp)
 2026c28:	dec00104 	addi	sp,sp,4
 2026c2c:	f800283a 	ret

02026c30 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 2026c30:	defffc04 	addi	sp,sp,-16
 2026c34:	df000315 	stw	fp,12(sp)
 2026c38:	df000304 	addi	fp,sp,12
 2026c3c:	e13ffe15 	stw	r4,-8(fp)
 2026c40:	e17fff15 	stw	r5,-4(fp)
ListItem_t * const pxIndex = pxList->pxIndex;
 2026c44:	e0bffe17 	ldw	r2,-8(fp)
 2026c48:	10800117 	ldw	r2,4(r2)
 2026c4c:	e0bffd15 	stw	r2,-12(fp)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 2026c50:	e0bfff17 	ldw	r2,-4(fp)
 2026c54:	e0fffd17 	ldw	r3,-12(fp)
 2026c58:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 2026c5c:	e0bffd17 	ldw	r2,-12(fp)
 2026c60:	10c00217 	ldw	r3,8(r2)
 2026c64:	e0bfff17 	ldw	r2,-4(fp)
 2026c68:	10c00215 	stw	r3,8(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 2026c6c:	e0bffd17 	ldw	r2,-12(fp)
 2026c70:	10800217 	ldw	r2,8(r2)
 2026c74:	e0ffff17 	ldw	r3,-4(fp)
 2026c78:	10c00115 	stw	r3,4(r2)
	pxIndex->pxPrevious = pxNewListItem;
 2026c7c:	e0bffd17 	ldw	r2,-12(fp)
 2026c80:	e0ffff17 	ldw	r3,-4(fp)
 2026c84:	10c00215 	stw	r3,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 2026c88:	e0bfff17 	ldw	r2,-4(fp)
 2026c8c:	e0fffe17 	ldw	r3,-8(fp)
 2026c90:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 2026c94:	e0bffe17 	ldw	r2,-8(fp)
 2026c98:	10800017 	ldw	r2,0(r2)
 2026c9c:	10c00044 	addi	r3,r2,1
 2026ca0:	e0bffe17 	ldw	r2,-8(fp)
 2026ca4:	10c00015 	stw	r3,0(r2)
}
 2026ca8:	0001883a 	nop
 2026cac:	e037883a 	mov	sp,fp
 2026cb0:	df000017 	ldw	fp,0(sp)
 2026cb4:	dec00104 	addi	sp,sp,4
 2026cb8:	f800283a 	ret

02026cbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 2026cbc:	defffb04 	addi	sp,sp,-20
 2026cc0:	df000415 	stw	fp,16(sp)
 2026cc4:	df000404 	addi	fp,sp,16
 2026cc8:	e13ffe15 	stw	r4,-8(fp)
 2026ccc:	e17fff15 	stw	r5,-4(fp)
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 2026cd0:	e0bfff17 	ldw	r2,-4(fp)
 2026cd4:	10800017 	ldw	r2,0(r2)
 2026cd8:	e0bffd15 	stw	r2,-12(fp)
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 2026cdc:	e0bffd17 	ldw	r2,-12(fp)
 2026ce0:	10bfffd8 	cmpnei	r2,r2,-1
 2026ce4:	1000041e 	bne	r2,zero,2026cf8 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 2026ce8:	e0bffe17 	ldw	r2,-8(fp)
 2026cec:	10800417 	ldw	r2,16(r2)
 2026cf0:	e0bffc15 	stw	r2,-16(fp)
 2026cf4:	00000c06 	br	2026d28 <vListInsert+0x6c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 2026cf8:	e0bffe17 	ldw	r2,-8(fp)
 2026cfc:	10800204 	addi	r2,r2,8
 2026d00:	e0bffc15 	stw	r2,-16(fp)
 2026d04:	00000306 	br	2026d14 <vListInsert+0x58>
 2026d08:	e0bffc17 	ldw	r2,-16(fp)
 2026d0c:	10800117 	ldw	r2,4(r2)
 2026d10:	e0bffc15 	stw	r2,-16(fp)
 2026d14:	e0bffc17 	ldw	r2,-16(fp)
 2026d18:	10800117 	ldw	r2,4(r2)
 2026d1c:	10800017 	ldw	r2,0(r2)
 2026d20:	e0fffd17 	ldw	r3,-12(fp)
 2026d24:	18bff82e 	bgeu	r3,r2,2026d08 <__alt_mem_mem_0+0xfd006d08>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 2026d28:	e0bffc17 	ldw	r2,-16(fp)
 2026d2c:	10c00117 	ldw	r3,4(r2)
 2026d30:	e0bfff17 	ldw	r2,-4(fp)
 2026d34:	10c00115 	stw	r3,4(r2)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 2026d38:	e0bfff17 	ldw	r2,-4(fp)
 2026d3c:	10800117 	ldw	r2,4(r2)
 2026d40:	e0ffff17 	ldw	r3,-4(fp)
 2026d44:	10c00215 	stw	r3,8(r2)
	pxNewListItem->pxPrevious = pxIterator;
 2026d48:	e0bfff17 	ldw	r2,-4(fp)
 2026d4c:	e0fffc17 	ldw	r3,-16(fp)
 2026d50:	10c00215 	stw	r3,8(r2)
	pxIterator->pxNext = pxNewListItem;
 2026d54:	e0bffc17 	ldw	r2,-16(fp)
 2026d58:	e0ffff17 	ldw	r3,-4(fp)
 2026d5c:	10c00115 	stw	r3,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 2026d60:	e0bfff17 	ldw	r2,-4(fp)
 2026d64:	e0fffe17 	ldw	r3,-8(fp)
 2026d68:	10c00415 	stw	r3,16(r2)

	( pxList->uxNumberOfItems )++;
 2026d6c:	e0bffe17 	ldw	r2,-8(fp)
 2026d70:	10800017 	ldw	r2,0(r2)
 2026d74:	10c00044 	addi	r3,r2,1
 2026d78:	e0bffe17 	ldw	r2,-8(fp)
 2026d7c:	10c00015 	stw	r3,0(r2)
}
 2026d80:	0001883a 	nop
 2026d84:	e037883a 	mov	sp,fp
 2026d88:	df000017 	ldw	fp,0(sp)
 2026d8c:	dec00104 	addi	sp,sp,4
 2026d90:	f800283a 	ret

02026d94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 2026d94:	defffd04 	addi	sp,sp,-12
 2026d98:	df000215 	stw	fp,8(sp)
 2026d9c:	df000204 	addi	fp,sp,8
 2026da0:	e13fff15 	stw	r4,-4(fp)
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 2026da4:	e0bfff17 	ldw	r2,-4(fp)
 2026da8:	10800417 	ldw	r2,16(r2)
 2026dac:	e0bffe15 	stw	r2,-8(fp)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 2026db0:	e0bfff17 	ldw	r2,-4(fp)
 2026db4:	10800117 	ldw	r2,4(r2)
 2026db8:	e0ffff17 	ldw	r3,-4(fp)
 2026dbc:	18c00217 	ldw	r3,8(r3)
 2026dc0:	10c00215 	stw	r3,8(r2)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 2026dc4:	e0bfff17 	ldw	r2,-4(fp)
 2026dc8:	10800217 	ldw	r2,8(r2)
 2026dcc:	e0ffff17 	ldw	r3,-4(fp)
 2026dd0:	18c00117 	ldw	r3,4(r3)
 2026dd4:	10c00115 	stw	r3,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 2026dd8:	e0bffe17 	ldw	r2,-8(fp)
 2026ddc:	10c00117 	ldw	r3,4(r2)
 2026de0:	e0bfff17 	ldw	r2,-4(fp)
 2026de4:	1880041e 	bne	r3,r2,2026df8 <uxListRemove+0x64>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 2026de8:	e0bfff17 	ldw	r2,-4(fp)
 2026dec:	10c00217 	ldw	r3,8(r2)
 2026df0:	e0bffe17 	ldw	r2,-8(fp)
 2026df4:	10c00115 	stw	r3,4(r2)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 2026df8:	e0bfff17 	ldw	r2,-4(fp)
 2026dfc:	10000415 	stw	zero,16(r2)
	( pxList->uxNumberOfItems )--;
 2026e00:	e0bffe17 	ldw	r2,-8(fp)
 2026e04:	10800017 	ldw	r2,0(r2)
 2026e08:	10ffffc4 	addi	r3,r2,-1
 2026e0c:	e0bffe17 	ldw	r2,-8(fp)
 2026e10:	10c00015 	stw	r3,0(r2)

	return pxList->uxNumberOfItems;
 2026e14:	e0bffe17 	ldw	r2,-8(fp)
 2026e18:	10800017 	ldw	r2,0(r2)
}
 2026e1c:	e037883a 	mov	sp,fp
 2026e20:	df000017 	ldw	fp,0(sp)
 2026e24:	dec00104 	addi	sp,sp,4
 2026e28:	f800283a 	ret

02026e2c <prvReadGp>:
void vPortSysTickHandler( void * context, alt_u32 id );

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
 2026e2c:	defffe04 	addi	sp,sp,-8
 2026e30:	df000115 	stw	fp,4(sp)
 2026e34:	df000104 	addi	fp,sp,4
 2026e38:	e13fff15 	stw	r4,-4(fp)
	asm( "stw gp, (%0)" :: "r"(ulValue) );
 2026e3c:	e0bfff17 	ldw	r2,-4(fp)
 2026e40:	16800015 	stw	gp,0(r2)
}
 2026e44:	0001883a 	nop
 2026e48:	e037883a 	mov	sp,fp
 2026e4c:	df000017 	ldw	fp,0(sp)
 2026e50:	dec00104 	addi	sp,sp,4
 2026e54:	f800283a 	ret

02026e58 <enh_alt_irq_disable_all>:


static volatile alt_irq_context lastContext;

void enh_alt_irq_disable_all()
{
 2026e58:	defffd04 	addi	sp,sp,-12
 2026e5c:	df000215 	stw	fp,8(sp)
 2026e60:	df000204 	addi	fp,sp,8
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2026e64:	0005303a 	rdctl	r2,status
 2026e68:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2026e6c:	e0ffff17 	ldw	r3,-4(fp)
 2026e70:	00bfff84 	movi	r2,-2
 2026e74:	1884703a 	and	r2,r3,r2
 2026e78:	1001703a 	wrctl	status,r2
  
  return context;
 2026e7c:	e0bfff17 	ldw	r2,-4(fp)
	alt_irq_context ctxt = alt_irq_disable_all();
 2026e80:	e0bffe15 	stw	r2,-8(fp)
	lastContext |= ctxt;
 2026e84:	d0e80317 	ldw	r3,-24564(gp)
 2026e88:	e0bffe17 	ldw	r2,-8(fp)
 2026e8c:	1884b03a 	or	r2,r3,r2
 2026e90:	d0a80315 	stw	r2,-24564(gp)
}
 2026e94:	0001883a 	nop
 2026e98:	e037883a 	mov	sp,fp
 2026e9c:	df000017 	ldw	fp,0(sp)
 2026ea0:	dec00104 	addi	sp,sp,4
 2026ea4:	f800283a 	ret

02026ea8 <enh_alt_irq_enable_all>:

void enh_alt_irq_enable_all()
{
 2026ea8:	defffd04 	addi	sp,sp,-12
 2026eac:	df000215 	stw	fp,8(sp)
 2026eb0:	df000204 	addi	fp,sp,8
	alt_irq_context restore = lastContext;
 2026eb4:	d0a80317 	ldw	r2,-24564(gp)
 2026eb8:	e0bffe15 	stw	r2,-8(fp)
	lastContext = 0;
 2026ebc:	d0280315 	stw	zero,-24564(gp)
 2026ec0:	e0bffe17 	ldw	r2,-8(fp)
 2026ec4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2026ec8:	e0bfff17 	ldw	r2,-4(fp)
 2026ecc:	1001703a 	wrctl	status,r2
	alt_irq_enable_all(restore);
}
 2026ed0:	0001883a 	nop
 2026ed4:	e037883a 	mov	sp,fp
 2026ed8:	df000017 	ldw	fp,0(sp)
 2026edc:	dec00104 	addi	sp,sp,4
 2026ee0:	f800283a 	ret

02026ee4 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{    
 2026ee4:	defff904 	addi	sp,sp,-28
 2026ee8:	dfc00615 	stw	ra,24(sp)
 2026eec:	df000515 	stw	fp,20(sp)
 2026ef0:	df000504 	addi	fp,sp,20
 2026ef4:	e13ffd15 	stw	r4,-12(fp)
 2026ef8:	e17ffe15 	stw	r5,-8(fp)
 2026efc:	e1bfff15 	stw	r6,-4(fp)
StackType_t *pxFramePointer = pxTopOfStack - 1;
 2026f00:	e0bffd17 	ldw	r2,-12(fp)
 2026f04:	10bfff04 	addi	r2,r2,-4
 2026f08:	e0bffb15 	stw	r2,-20(fp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer ); 
 2026f0c:	e0bffc04 	addi	r2,fp,-16
 2026f10:	1009883a 	mov	r4,r2
 2026f14:	2026e2c0 	call	2026e2c <prvReadGp>

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
 2026f18:	e0fffd17 	ldw	r3,-12(fp)
 2026f1c:	00b7abb4 	movhi	r2,57006
 2026f20:	10afbbc4 	addi	r2,r2,-16657
 2026f24:	18800015 	stw	r2,0(r3)
    pxTopOfStack--;
 2026f28:	e0bffd17 	ldw	r2,-12(fp)
 2026f2c:	10bfff04 	addi	r2,r2,-4
 2026f30:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pxFramePointer; 
 2026f34:	e0fffb17 	ldw	r3,-20(fp)
 2026f38:	e0bffd17 	ldw	r2,-12(fp)
 2026f3c:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 2026f40:	e0bffd17 	ldw	r2,-12(fp)
 2026f44:	10bfff04 	addi	r2,r2,-4
 2026f48:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = xGlobalPointer; 
 2026f4c:	e0fffc17 	ldw	r3,-16(fp)
 2026f50:	e0bffd17 	ldw	r2,-12(fp)
 2026f54:	10c00015 	stw	r3,0(r2)
    
    /* Space for R23 to R16. */
    pxTopOfStack -= 9;
 2026f58:	e0bffd17 	ldw	r2,-12(fp)
 2026f5c:	10bff704 	addi	r2,r2,-36
 2026f60:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = ( StackType_t ) pxCode; 
 2026f64:	e0fffe17 	ldw	r3,-8(fp)
 2026f68:	e0bffd17 	ldw	r2,-12(fp)
 2026f6c:	10c00015 	stw	r3,0(r2)
    pxTopOfStack--;
 2026f70:	e0bffd17 	ldw	r2,-12(fp)
 2026f74:	10bfff04 	addi	r2,r2,-4
 2026f78:	e0bffd15 	stw	r2,-12(fp)

    *pxTopOfStack = portINITIAL_ESTATUS; 
 2026f7c:	e0bffd17 	ldw	r2,-12(fp)
 2026f80:	00c00044 	movi	r3,1
 2026f84:	10c00015 	stw	r3,0(r2)

    /* Space for R15 to R5. */    
    pxTopOfStack -= 12;
 2026f88:	e0bffd17 	ldw	r2,-12(fp)
 2026f8c:	10bff404 	addi	r2,r2,-48
 2026f90:	e0bffd15 	stw	r2,-12(fp)
    
    *pxTopOfStack = ( StackType_t ) pvParameters; 
 2026f94:	e0ffff17 	ldw	r3,-4(fp)
 2026f98:	e0bffd17 	ldw	r2,-12(fp)
 2026f9c:	10c00015 	stw	r3,0(r2)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;
 2026fa0:	e0bffd17 	ldw	r2,-12(fp)
 2026fa4:	10bffb04 	addi	r2,r2,-20
 2026fa8:	e0bffd15 	stw	r2,-12(fp)
    
    return pxTopOfStack;
 2026fac:	e0bffd17 	ldw	r2,-12(fp)
}
 2026fb0:	e037883a 	mov	sp,fp
 2026fb4:	dfc00117 	ldw	ra,4(sp)
 2026fb8:	df000017 	ldw	fp,0(sp)
 2026fbc:	dec00204 	addi	sp,sp,8
 2026fc0:	f800283a 	ret

02026fc4 <xPortStartScheduler>:

/* 
 * See header file for description. 
 */
BaseType_t xPortStartScheduler( void )
{
 2026fc4:	defffe04 	addi	sp,sp,-8
 2026fc8:	dfc00115 	stw	ra,4(sp)
 2026fcc:	df000015 	stw	fp,0(sp)
 2026fd0:	d839883a 	mov	fp,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 2026fd4:	202701c0 	call	202701c <prvSetupTimerInterrupt>
 2026fd8:	00808034 	movhi	r2,512
	
	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
 2026fdc:	10803104 	addi	r2,r2,196
 2026fe0:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
 2026fe4:	0005883a 	mov	r2,zero
}
 2026fe8:	e037883a 	mov	sp,fp
 2026fec:	dfc00117 	ldw	ra,4(sp)
 2026ff0:	df000017 	ldw	fp,0(sp)
 2026ff4:	dec00204 	addi	sp,sp,8
 2026ff8:	f800283a 	ret

02026ffc <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2026ffc:	deffff04 	addi	sp,sp,-4
 2027000:	df000015 	stw	fp,0(sp)
 2027004:	d839883a 	mov	fp,sp
	/* It is unlikely that the NIOS2 port will require this function as there
	is nothing to return to.  */
}
 2027008:	0001883a 	nop
 202700c:	e037883a 	mov	sp,fp
 2027010:	df000017 	ldw	fp,0(sp)
 2027014:	dec00104 	addi	sp,sp,4
 2027018:	f800283a 	ret

0202701c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 202701c:	defffe04 	addi	sp,sp,-8
 2027020:	dfc00115 	stw	ra,4(sp)
 2027024:	df000015 	stw	fp,0(sp)
 2027028:	d839883a 	mov	fp,sp
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( SYS_CLK_IRQ, 0x0, vPortSysTickHandler ) )
 202702c:	018080b4 	movhi	r6,514
 2027030:	319c2e04 	addi	r6,r6,28856
 2027034:	000b883a 	mov	r5,zero
 2027038:	010000c4 	movi	r4,3
 202703c:	20271040 	call	2027104 <alt_irq_register>
 2027040:	10bffa98 	cmpnei	r2,r2,-22
 2027044:	1000021e 	bne	r2,zero,2027050 <prvSetupTimerInterrupt+0x34>
	{ 
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
 2027048:	003da03a 	break	0
 202704c:	00001006 	br	2027090 <prvSetupTimerInterrupt+0x74>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
 2027050:	00c00204 	movi	r3,8
 2027054:	00814134 	movhi	r2,1284
 2027058:	10840904 	addi	r2,r2,4132
 202705c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
 2027060:	00e1a814 	movui	r3,34464
 2027064:	00814134 	movhi	r2,1284
 2027068:	10840a04 	addi	r2,r2,4136
 202706c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( SYS_CLK_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
 2027070:	00c00044 	movi	r3,1
 2027074:	00814134 	movhi	r2,1284
 2027078:	10840b04 	addi	r2,r2,4140
 202707c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( SYS_CLK_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
 2027080:	00c001c4 	movi	r3,7
 2027084:	00814134 	movhi	r2,1284
 2027088:	10840904 	addi	r2,r2,4132
 202708c:	10c00035 	stwio	r3,0(r2)
	} 

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 2027090:	00ffff84 	movi	r3,-2
 2027094:	00814134 	movhi	r2,1284
 2027098:	10840804 	addi	r2,r2,4128
 202709c:	10c00035 	stwio	r3,0(r2)
}
 20270a0:	0001883a 	nop
 20270a4:	e037883a 	mov	sp,fp
 20270a8:	dfc00117 	ldw	ra,4(sp)
 20270ac:	df000017 	ldw	fp,0(sp)
 20270b0:	dec00204 	addi	sp,sp,8
 20270b4:	f800283a 	ret

020270b8 <vPortSysTickHandler>:
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
 20270b8:	defffc04 	addi	sp,sp,-16
 20270bc:	dfc00315 	stw	ra,12(sp)
 20270c0:	df000215 	stw	fp,8(sp)
 20270c4:	df000204 	addi	fp,sp,8
 20270c8:	e13ffe15 	stw	r4,-8(fp)
 20270cc:	e17fff15 	stw	r5,-4(fp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
 20270d0:	200fca00 	call	200fca0 <xTaskIncrementTick>
 20270d4:	10000126 	beq	r2,zero,20270dc <vPortSysTickHandler+0x24>
	{
        vTaskSwitchContext();
 20270d8:	200fe500 	call	200fe50 <vTaskSwitchContext>
	}
		
	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( SYS_CLK_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
 20270dc:	00ffff84 	movi	r3,-2
 20270e0:	00814134 	movhi	r2,1284
 20270e4:	10840804 	addi	r2,r2,4128
 20270e8:	10c00035 	stwio	r3,0(r2)
}
 20270ec:	0001883a 	nop
 20270f0:	e037883a 	mov	sp,fp
 20270f4:	dfc00117 	ldw	ra,4(sp)
 20270f8:	df000017 	ldw	fp,0(sp)
 20270fc:	dec00204 	addi	sp,sp,8
 2027100:	f800283a 	ret

02027104 <alt_irq_register>:
 * when it is registered. Interrupts should only be enabled after the FreeRTOS.org
 * kernel has its scheduler started so that contexts are saved and switched 
 * correctly.
 */
int alt_irq_register( alt_u32 id, void* context, alt_isr_func handler)
{
 2027104:	defff104 	addi	sp,sp,-60
 2027108:	df000e15 	stw	fp,56(sp)
 202710c:	df000e04 	addi	fp,sp,56
 2027110:	e13ffd15 	stw	r4,-12(fp)
 2027114:	e17ffe15 	stw	r5,-8(fp)
 2027118:	e1bfff15 	stw	r6,-4(fp)
	int rc = -EINVAL;  
 202711c:	00bffa84 	movi	r2,-22
 2027120:	e0bff215 	stw	r2,-56(fp)
	alt_irq_context status;

	if (id < ALT_NIRQ)
 2027124:	e0bffd17 	ldw	r2,-12(fp)
 2027128:	10800828 	cmpgeui	r2,r2,32
 202712c:	10004c1e 	bne	r2,zero,2027260 <alt_irq_register+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2027130:	0005303a 	rdctl	r2,status
 2027134:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2027138:	e0fff617 	ldw	r3,-40(fp)
 202713c:	00bfff84 	movi	r2,-2
 2027140:	1884703a 	and	r2,r3,r2
 2027144:	1001703a 	wrctl	status,r2
  
  return context;
 2027148:	e0bff617 	ldw	r2,-40(fp)
		 * interrupts are disabled while the handler tables are updated to ensure
		 * that an interrupt doesn't occur while the tables are in an inconsistent
		 * state.
		 */
	
		status = alt_irq_disable_all();
 202714c:	e0bff415 	stw	r2,-48(fp)
	
		alt_irq[id].handler = handler;
 2027150:	008085f4 	movhi	r2,535
 2027154:	10a90404 	addi	r2,r2,-23536
 2027158:	e0fffd17 	ldw	r3,-12(fp)
 202715c:	180690fa 	slli	r3,r3,3
 2027160:	10c5883a 	add	r2,r2,r3
 2027164:	e0ffff17 	ldw	r3,-4(fp)
 2027168:	10c00015 	stw	r3,0(r2)
		alt_irq[id].context = context;
 202716c:	008085f4 	movhi	r2,535
 2027170:	10a90404 	addi	r2,r2,-23536
 2027174:	e0fffd17 	ldw	r3,-12(fp)
 2027178:	180690fa 	slli	r3,r3,3
 202717c:	10c5883a 	add	r2,r2,r3
 2027180:	10800104 	addi	r2,r2,4
 2027184:	e0fffe17 	ldw	r3,-8(fp)
 2027188:	10c00015 	stw	r3,0(r2)
	
		rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 202718c:	e0bfff17 	ldw	r2,-4(fp)
 2027190:	10001926 	beq	r2,zero,20271f8 <alt_irq_register+0xf4>
 2027194:	e0bffd17 	ldw	r2,-12(fp)
 2027198:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 202719c:	0005303a 	rdctl	r2,status
 20271a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20271a4:	e0fff717 	ldw	r3,-36(fp)
 20271a8:	00bfff84 	movi	r2,-2
 20271ac:	1884703a 	and	r2,r3,r2
 20271b0:	1001703a 	wrctl	status,r2
  
  return context;
 20271b4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20271b8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 20271bc:	00c00044 	movi	r3,1
 20271c0:	e0bff317 	ldw	r2,-52(fp)
 20271c4:	1884983a 	sll	r2,r3,r2
 20271c8:	1007883a 	mov	r3,r2
 20271cc:	d0a80817 	ldw	r2,-24544(gp)
 20271d0:	1884b03a 	or	r2,r3,r2
 20271d4:	d0a80815 	stw	r2,-24544(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20271d8:	d0a80817 	ldw	r2,-24544(gp)
 20271dc:	100170fa 	wrctl	ienable,r2
 20271e0:	e0bff817 	ldw	r2,-32(fp)
 20271e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20271e8:	e0bff917 	ldw	r2,-28(fp)
 20271ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20271f0:	0005883a 	mov	r2,zero
 20271f4:	00001906 	br	202725c <alt_irq_register+0x158>
 20271f8:	e0bffd17 	ldw	r2,-12(fp)
 20271fc:	e0bff515 	stw	r2,-44(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2027200:	0005303a 	rdctl	r2,status
 2027204:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2027208:	e0fffa17 	ldw	r3,-24(fp)
 202720c:	00bfff84 	movi	r2,-2
 2027210:	1884703a 	and	r2,r3,r2
 2027214:	1001703a 	wrctl	status,r2
  
  return context;
 2027218:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 202721c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 2027220:	00c00044 	movi	r3,1
 2027224:	e0bff517 	ldw	r2,-44(fp)
 2027228:	1884983a 	sll	r2,r3,r2
 202722c:	0084303a 	nor	r2,zero,r2
 2027230:	1007883a 	mov	r3,r2
 2027234:	d0a80817 	ldw	r2,-24544(gp)
 2027238:	1884703a 	and	r2,r3,r2
 202723c:	d0a80815 	stw	r2,-24544(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2027240:	d0a80817 	ldw	r2,-24544(gp)
 2027244:	100170fa 	wrctl	ienable,r2
 2027248:	e0bffb17 	ldw	r2,-20(fp)
 202724c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2027250:	e0bffc17 	ldw	r2,-16(fp)
 2027254:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2027258:	0005883a 	mov	r2,zero
 202725c:	e0bff215 	stw	r2,-56(fp)
	
		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}
    
	return rc; 
 2027260:	e0bff217 	ldw	r2,-56(fp)
}
 2027264:	e037883a 	mov	sp,fp
 2027268:	df000017 	ldw	fp,0(sp)
 202726c:	dec00104 	addi	sp,sp,4
 2027270:	f800283a 	ret

02027274 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2027274:	defff504 	addi	sp,sp,-44
 2027278:	df000a15 	stw	fp,40(sp)
 202727c:	df000a04 	addi	fp,sp,40
 2027280:	e13ffc15 	stw	r4,-16(fp)
 2027284:	e17ffd15 	stw	r5,-12(fp)
 2027288:	e1bffe15 	stw	r6,-8(fp)
 202728c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2027290:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2027294:	d0a80917 	ldw	r2,-24540(gp)
  
  if (alt_ticks_per_second ())
 2027298:	10003c26 	beq	r2,zero,202738c <alt_alarm_start+0x118>
  {
    if (alarm)
 202729c:	e0bffc17 	ldw	r2,-16(fp)
 20272a0:	10003826 	beq	r2,zero,2027384 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 20272a4:	e0bffc17 	ldw	r2,-16(fp)
 20272a8:	e0fffe17 	ldw	r3,-8(fp)
 20272ac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 20272b0:	e0bffc17 	ldw	r2,-16(fp)
 20272b4:	e0ffff17 	ldw	r3,-4(fp)
 20272b8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20272bc:	0005303a 	rdctl	r2,status
 20272c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20272c4:	e0fff917 	ldw	r3,-28(fp)
 20272c8:	00bfff84 	movi	r2,-2
 20272cc:	1884703a 	and	r2,r3,r2
 20272d0:	1001703a 	wrctl	status,r2
  
  return context;
 20272d4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 20272d8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20272dc:	d0a80a17 	ldw	r2,-24536(gp)
      
      current_nticks = alt_nticks();
 20272e0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 20272e4:	e0fffd17 	ldw	r3,-12(fp)
 20272e8:	e0bff617 	ldw	r2,-40(fp)
 20272ec:	1885883a 	add	r2,r3,r2
 20272f0:	10c00044 	addi	r3,r2,1
 20272f4:	e0bffc17 	ldw	r2,-16(fp)
 20272f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 20272fc:	e0bffc17 	ldw	r2,-16(fp)
 2027300:	10c00217 	ldw	r3,8(r2)
 2027304:	e0bff617 	ldw	r2,-40(fp)
 2027308:	1880042e 	bgeu	r3,r2,202731c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 202730c:	e0bffc17 	ldw	r2,-16(fp)
 2027310:	00c00044 	movi	r3,1
 2027314:	10c00405 	stb	r3,16(r2)
 2027318:	00000206 	br	2027324 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 202731c:	e0bffc17 	ldw	r2,-16(fp)
 2027320:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2027324:	e0bffc17 	ldw	r2,-16(fp)
 2027328:	d0e01b04 	addi	r3,gp,-32660
 202732c:	e0fffa15 	stw	r3,-24(fp)
 2027330:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2027334:	e0bffb17 	ldw	r2,-20(fp)
 2027338:	e0fffa17 	ldw	r3,-24(fp)
 202733c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2027340:	e0bffa17 	ldw	r2,-24(fp)
 2027344:	10c00017 	ldw	r3,0(r2)
 2027348:	e0bffb17 	ldw	r2,-20(fp)
 202734c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2027350:	e0bffa17 	ldw	r2,-24(fp)
 2027354:	10800017 	ldw	r2,0(r2)
 2027358:	e0fffb17 	ldw	r3,-20(fp)
 202735c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2027360:	e0bffa17 	ldw	r2,-24(fp)
 2027364:	e0fffb17 	ldw	r3,-20(fp)
 2027368:	10c00015 	stw	r3,0(r2)
 202736c:	e0bff817 	ldw	r2,-32(fp)
 2027370:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2027374:	e0bff717 	ldw	r2,-36(fp)
 2027378:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 202737c:	0005883a 	mov	r2,zero
 2027380:	00000306 	br	2027390 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 2027384:	00bffa84 	movi	r2,-22
 2027388:	00000106 	br	2027390 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 202738c:	00bfde84 	movi	r2,-134
  }
}
 2027390:	e037883a 	mov	sp,fp
 2027394:	df000017 	ldw	fp,0(sp)
 2027398:	dec00104 	addi	sp,sp,4
 202739c:	f800283a 	ret

020273a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20273a0:	defffe04 	addi	sp,sp,-8
 20273a4:	dfc00115 	stw	ra,4(sp)
 20273a8:	df000015 	stw	fp,0(sp)
 20273ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20273b0:	d0a01917 	ldw	r2,-32668(gp)
 20273b4:	10000326 	beq	r2,zero,20273c4 <alt_get_errno+0x24>
 20273b8:	d0a01917 	ldw	r2,-32668(gp)
 20273bc:	103ee83a 	callr	r2
 20273c0:	00000106 	br	20273c8 <alt_get_errno+0x28>
 20273c4:	d0a7ce04 	addi	r2,gp,-24776
}
 20273c8:	e037883a 	mov	sp,fp
 20273cc:	dfc00117 	ldw	ra,4(sp)
 20273d0:	df000017 	ldw	fp,0(sp)
 20273d4:	dec00204 	addi	sp,sp,8
 20273d8:	f800283a 	ret

020273dc <alt_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 20273dc:	defffb04 	addi	sp,sp,-20
 20273e0:	dfc00415 	stw	ra,16(sp)
 20273e4:	df000315 	stw	fp,12(sp)
 20273e8:	df000304 	addi	fp,sp,12
 20273ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 20273f0:	e0bfff17 	ldw	r2,-4(fp)
 20273f4:	10000616 	blt	r2,zero,2027410 <alt_close+0x34>
 20273f8:	e0bfff17 	ldw	r2,-4(fp)
 20273fc:	10c00324 	muli	r3,r2,12
 2027400:	00808134 	movhi	r2,516
 2027404:	10909204 	addi	r2,r2,16968
 2027408:	1885883a 	add	r2,r3,r2
 202740c:	00000106 	br	2027414 <alt_close+0x38>
 2027410:	0005883a 	mov	r2,zero
 2027414:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2027418:	e0bffd17 	ldw	r2,-12(fp)
 202741c:	10001926 	beq	r2,zero,2027484 <alt_close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2027420:	e0bffd17 	ldw	r2,-12(fp)
 2027424:	10800017 	ldw	r2,0(r2)
 2027428:	10800417 	ldw	r2,16(r2)
 202742c:	10000626 	beq	r2,zero,2027448 <alt_close+0x6c>
 2027430:	e0bffd17 	ldw	r2,-12(fp)
 2027434:	10800017 	ldw	r2,0(r2)
 2027438:	10800417 	ldw	r2,16(r2)
 202743c:	e13ffd17 	ldw	r4,-12(fp)
 2027440:	103ee83a 	callr	r2
 2027444:	00000106 	br	202744c <alt_close+0x70>
 2027448:	0005883a 	mov	r2,zero
 202744c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2027450:	e13fff17 	ldw	r4,-4(fp)
 2027454:	2012f280 	call	2012f28 <alt_release_fd>
    if (rval < 0)
 2027458:	e0bffe17 	ldw	r2,-8(fp)
 202745c:	1000070e 	bge	r2,zero,202747c <alt_close+0xa0>
    {
      ALT_ERRNO = -rval;
 2027460:	20273a00 	call	20273a0 <alt_get_errno>
 2027464:	1007883a 	mov	r3,r2
 2027468:	e0bffe17 	ldw	r2,-8(fp)
 202746c:	0085c83a 	sub	r2,zero,r2
 2027470:	18800015 	stw	r2,0(r3)
      return -1;
 2027474:	00bfffc4 	movi	r2,-1
 2027478:	00000706 	br	2027498 <alt_close+0xbc>
    }
    return 0;
 202747c:	0005883a 	mov	r2,zero
 2027480:	00000506 	br	2027498 <alt_close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2027484:	20273a00 	call	20273a0 <alt_get_errno>
 2027488:	1007883a 	mov	r3,r2
 202748c:	00801444 	movi	r2,81
 2027490:	18800015 	stw	r2,0(r3)
    return -1;
 2027494:	00bfffc4 	movi	r2,-1
  }
}
 2027498:	e037883a 	mov	sp,fp
 202749c:	dfc00117 	ldw	ra,4(sp)
 20274a0:	df000017 	ldw	fp,0(sp)
 20274a4:	dec00204 	addi	sp,sp,8
 20274a8:	f800283a 	ret

020274ac <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 20274ac:	defffd04 	addi	sp,sp,-12
 20274b0:	df000215 	stw	fp,8(sp)
 20274b4:	df000204 	addi	fp,sp,8
 20274b8:	e13ffe15 	stw	r4,-8(fp)
 20274bc:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 20274c0:	0001883a 	nop
 20274c4:	e037883a 	mov	sp,fp
 20274c8:	df000017 	ldw	fp,0(sp)
 20274cc:	dec00104 	addi	sp,sp,4
 20274d0:	f800283a 	ret

020274d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 20274d4:	deffff04 	addi	sp,sp,-4
 20274d8:	df000015 	stw	fp,0(sp)
 20274dc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 20274e0:	0001883a 	nop
 20274e4:	e037883a 	mov	sp,fp
 20274e8:	df000017 	ldw	fp,0(sp)
 20274ec:	dec00104 	addi	sp,sp,4
 20274f0:	f800283a 	ret

020274f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20274f4:	defffe04 	addi	sp,sp,-8
 20274f8:	dfc00115 	stw	ra,4(sp)
 20274fc:	df000015 	stw	fp,0(sp)
 2027500:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2027504:	d0a01917 	ldw	r2,-32668(gp)
 2027508:	10000326 	beq	r2,zero,2027518 <alt_get_errno+0x24>
 202750c:	d0a01917 	ldw	r2,-32668(gp)
 2027510:	103ee83a 	callr	r2
 2027514:	00000106 	br	202751c <alt_get_errno+0x28>
 2027518:	d0a7ce04 	addi	r2,gp,-24776
}
 202751c:	e037883a 	mov	sp,fp
 2027520:	dfc00117 	ldw	ra,4(sp)
 2027524:	df000017 	ldw	fp,0(sp)
 2027528:	dec00204 	addi	sp,sp,8
 202752c:	f800283a 	ret

02027530 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2027530:	defffa04 	addi	sp,sp,-24
 2027534:	dfc00515 	stw	ra,20(sp)
 2027538:	df000415 	stw	fp,16(sp)
 202753c:	df000404 	addi	fp,sp,16
 2027540:	e13ffe15 	stw	r4,-8(fp)
 2027544:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2027548:	e0bffe17 	ldw	r2,-8(fp)
 202754c:	10000326 	beq	r2,zero,202755c <alt_dev_llist_insert+0x2c>
 2027550:	e0bffe17 	ldw	r2,-8(fp)
 2027554:	10800217 	ldw	r2,8(r2)
 2027558:	1000061e 	bne	r2,zero,2027574 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 202755c:	20274f40 	call	20274f4 <alt_get_errno>
 2027560:	1007883a 	mov	r3,r2
 2027564:	00800584 	movi	r2,22
 2027568:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 202756c:	00bffa84 	movi	r2,-22
 2027570:	00001306 	br	20275c0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2027574:	e0bffe17 	ldw	r2,-8(fp)
 2027578:	e0ffff17 	ldw	r3,-4(fp)
 202757c:	e0fffc15 	stw	r3,-16(fp)
 2027580:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2027584:	e0bffd17 	ldw	r2,-12(fp)
 2027588:	e0fffc17 	ldw	r3,-16(fp)
 202758c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2027590:	e0bffc17 	ldw	r2,-16(fp)
 2027594:	10c00017 	ldw	r3,0(r2)
 2027598:	e0bffd17 	ldw	r2,-12(fp)
 202759c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20275a0:	e0bffc17 	ldw	r2,-16(fp)
 20275a4:	10800017 	ldw	r2,0(r2)
 20275a8:	e0fffd17 	ldw	r3,-12(fp)
 20275ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20275b0:	e0bffc17 	ldw	r2,-16(fp)
 20275b4:	e0fffd17 	ldw	r3,-12(fp)
 20275b8:	10c00015 	stw	r3,0(r2)

  return 0;  
 20275bc:	0005883a 	mov	r2,zero
}
 20275c0:	e037883a 	mov	sp,fp
 20275c4:	dfc00117 	ldw	ra,4(sp)
 20275c8:	df000017 	ldw	fp,0(sp)
 20275cc:	dec00204 	addi	sp,sp,8
 20275d0:	f800283a 	ret

020275d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 20275d4:	defffa04 	addi	sp,sp,-24
 20275d8:	dfc00515 	stw	ra,20(sp)
 20275dc:	df000415 	stw	fp,16(sp)
 20275e0:	df000404 	addi	fp,sp,16
 20275e4:	e13ffe15 	stw	r4,-8(fp)
 20275e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 20275ec:	e0bfff17 	ldw	r2,-4(fp)
 20275f0:	10800017 	ldw	r2,0(r2)
 20275f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20275f8:	e13ffe17 	ldw	r4,-8(fp)
 20275fc:	20073a40 	call	20073a4 <strlen>
 2027600:	10800044 	addi	r2,r2,1
 2027604:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2027608:	00000d06 	br	2027640 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 202760c:	e0bffc17 	ldw	r2,-16(fp)
 2027610:	10800217 	ldw	r2,8(r2)
 2027614:	e0fffd17 	ldw	r3,-12(fp)
 2027618:	180d883a 	mov	r6,r3
 202761c:	e17ffe17 	ldw	r5,-8(fp)
 2027620:	1009883a 	mov	r4,r2
 2027624:	203cabc0 	call	203cabc <memcmp>
 2027628:	1000021e 	bne	r2,zero,2027634 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 202762c:	e0bffc17 	ldw	r2,-16(fp)
 2027630:	00000706 	br	2027650 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2027634:	e0bffc17 	ldw	r2,-16(fp)
 2027638:	10800017 	ldw	r2,0(r2)
 202763c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2027640:	e0fffc17 	ldw	r3,-16(fp)
 2027644:	e0bfff17 	ldw	r2,-4(fp)
 2027648:	18bff01e 	bne	r3,r2,202760c <__alt_mem_mem_0+0xfd00760c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 202764c:	0005883a 	mov	r2,zero
}
 2027650:	e037883a 	mov	sp,fp
 2027654:	dfc00117 	ldw	ra,4(sp)
 2027658:	df000017 	ldw	fp,0(sp)
 202765c:	dec00204 	addi	sp,sp,8
 2027660:	f800283a 	ret

02027664 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2027664:	defffb04 	addi	sp,sp,-20
 2027668:	dfc00415 	stw	ra,16(sp)
 202766c:	df000315 	stw	fp,12(sp)
 2027670:	df000304 	addi	fp,sp,12
 2027674:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2027678:	d0a00617 	ldw	r2,-32744(gp)
 202767c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2027680:	00003106 	br	2027748 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2027684:	e0bffd17 	ldw	r2,-12(fp)
 2027688:	10800217 	ldw	r2,8(r2)
 202768c:	1009883a 	mov	r4,r2
 2027690:	20073a40 	call	20073a4 <strlen>
 2027694:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2027698:	e0bffd17 	ldw	r2,-12(fp)
 202769c:	10c00217 	ldw	r3,8(r2)
 20276a0:	e0bffe17 	ldw	r2,-8(fp)
 20276a4:	10bfffc4 	addi	r2,r2,-1
 20276a8:	1885883a 	add	r2,r3,r2
 20276ac:	10800003 	ldbu	r2,0(r2)
 20276b0:	10803fcc 	andi	r2,r2,255
 20276b4:	1080201c 	xori	r2,r2,128
 20276b8:	10bfe004 	addi	r2,r2,-128
 20276bc:	10800bd8 	cmpnei	r2,r2,47
 20276c0:	1000031e 	bne	r2,zero,20276d0 <alt_find_file+0x6c>
    {
      len -= 1;
 20276c4:	e0bffe17 	ldw	r2,-8(fp)
 20276c8:	10bfffc4 	addi	r2,r2,-1
 20276cc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20276d0:	e0bffe17 	ldw	r2,-8(fp)
 20276d4:	e0ffff17 	ldw	r3,-4(fp)
 20276d8:	1885883a 	add	r2,r3,r2
 20276dc:	10800003 	ldbu	r2,0(r2)
 20276e0:	10803fcc 	andi	r2,r2,255
 20276e4:	1080201c 	xori	r2,r2,128
 20276e8:	10bfe004 	addi	r2,r2,-128
 20276ec:	10800be0 	cmpeqi	r2,r2,47
 20276f0:	1000081e 	bne	r2,zero,2027714 <alt_find_file+0xb0>
 20276f4:	e0bffe17 	ldw	r2,-8(fp)
 20276f8:	e0ffff17 	ldw	r3,-4(fp)
 20276fc:	1885883a 	add	r2,r3,r2
 2027700:	10800003 	ldbu	r2,0(r2)
 2027704:	10803fcc 	andi	r2,r2,255
 2027708:	1080201c 	xori	r2,r2,128
 202770c:	10bfe004 	addi	r2,r2,-128
 2027710:	10000a1e 	bne	r2,zero,202773c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2027714:	e0bffd17 	ldw	r2,-12(fp)
 2027718:	10800217 	ldw	r2,8(r2)
 202771c:	e0fffe17 	ldw	r3,-8(fp)
 2027720:	180d883a 	mov	r6,r3
 2027724:	e17fff17 	ldw	r5,-4(fp)
 2027728:	1009883a 	mov	r4,r2
 202772c:	203cabc0 	call	203cabc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2027730:	1000021e 	bne	r2,zero,202773c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2027734:	e0bffd17 	ldw	r2,-12(fp)
 2027738:	00000706 	br	2027758 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 202773c:	e0bffd17 	ldw	r2,-12(fp)
 2027740:	10800017 	ldw	r2,0(r2)
 2027744:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2027748:	e0fffd17 	ldw	r3,-12(fp)
 202774c:	d0a00604 	addi	r2,gp,-32744
 2027750:	18bfcc1e 	bne	r3,r2,2027684 <__alt_mem_mem_0+0xfd007684>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2027754:	0005883a 	mov	r2,zero
}
 2027758:	e037883a 	mov	sp,fp
 202775c:	dfc00117 	ldw	ra,4(sp)
 2027760:	df000017 	ldw	fp,0(sp)
 2027764:	dec00204 	addi	sp,sp,8
 2027768:	f800283a 	ret

0202776c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 202776c:	defff804 	addi	sp,sp,-32
 2027770:	dfc00715 	stw	ra,28(sp)
 2027774:	df000615 	stw	fp,24(sp)
 2027778:	df000604 	addi	fp,sp,24
 202777c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 2027780:	00bffa04 	movi	r2,-24
 2027784:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 2027788:	d0a7e717 	ldw	r2,-24676(gp)
 202778c:	e0bffc15 	stw	r2,-16(fp)
 2027790:	e03ffd0d 	sth	zero,-12(fp)
 2027794:	e0bffd0b 	ldhu	r2,-12(fp)
 2027798:	100b883a 	mov	r5,r2
 202779c:	e13ffc17 	ldw	r4,-16(fp)
 20277a0:	200ddd40 	call	200ddd4 <xQueueSemaphoreTake>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20277a4:	e03ffa15 	stw	zero,-24(fp)
 20277a8:	00001906 	br	2027810 <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
 20277ac:	00808134 	movhi	r2,516
 20277b0:	10909204 	addi	r2,r2,16968
 20277b4:	e0fffa17 	ldw	r3,-24(fp)
 20277b8:	18c00324 	muli	r3,r3,12
 20277bc:	10c5883a 	add	r2,r2,r3
 20277c0:	10800017 	ldw	r2,0(r2)
 20277c4:	10000f1e 	bne	r2,zero,2027804 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
 20277c8:	00808134 	movhi	r2,516
 20277cc:	10909204 	addi	r2,r2,16968
 20277d0:	e0fffa17 	ldw	r3,-24(fp)
 20277d4:	18c00324 	muli	r3,r3,12
 20277d8:	10c5883a 	add	r2,r2,r3
 20277dc:	e0fffe17 	ldw	r3,-8(fp)
 20277e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 20277e4:	d0e00a17 	ldw	r3,-32728(gp)
 20277e8:	e0bffa17 	ldw	r2,-24(fp)
 20277ec:	1880020e 	bge	r3,r2,20277f8 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
 20277f0:	e0bffa17 	ldw	r2,-24(fp)
 20277f4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 20277f8:	e0bffa17 	ldw	r2,-24(fp)
 20277fc:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
 2027800:	00000606 	br	202781c <alt_get_fd+0xb0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2027804:	e0bffa17 	ldw	r2,-24(fp)
 2027808:	10800044 	addi	r2,r2,1
 202780c:	e0bffa15 	stw	r2,-24(fp)
 2027810:	e0bffa17 	ldw	r2,-24(fp)
 2027814:	10800810 	cmplti	r2,r2,32
 2027818:	103fe41e 	bne	r2,zero,20277ac <__alt_mem_mem_0+0xfd0077ac>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 202781c:	d0a7e717 	ldw	r2,-24676(gp)
 2027820:	000f883a 	mov	r7,zero
 2027824:	000d883a 	mov	r6,zero
 2027828:	000b883a 	mov	r5,zero
 202782c:	1009883a 	mov	r4,r2
 2027830:	200d8480 	call	200d848 <xQueueGenericSend>

  return rc;
 2027834:	e0bffb17 	ldw	r2,-20(fp)
}
 2027838:	e037883a 	mov	sp,fp
 202783c:	dfc00117 	ldw	ra,4(sp)
 2027840:	df000017 	ldw	fp,0(sp)
 2027844:	dec00204 	addi	sp,sp,8
 2027848:	f800283a 	ret

0202784c <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 202784c:	defff404 	addi	sp,sp,-48
 2027850:	dfc00b15 	stw	ra,44(sp)
 2027854:	df000a15 	stw	fp,40(sp)
 2027858:	dd000915 	stw	r20,36(sp)
 202785c:	dcc00815 	stw	r19,32(sp)
 2027860:	dc800715 	stw	r18,28(sp)
 2027864:	dc400615 	stw	r17,24(sp)
 2027868:	dc000515 	stw	r16,20(sp)
 202786c:	df000a04 	addi	fp,sp,40
 2027870:	e13ff915 	stw	r4,-28(fp)
 2027874:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 2027878:	e0bffa17 	ldw	r2,-24(fp)
 202787c:	e0bff615 	stw	r2,-40(fp)
 2027880:	d0a80a17 	ldw	r2,-24536(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 2027884:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2027888:	d0a80917 	ldw	r2,-24540(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 202788c:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 2027890:	e0bff817 	ldw	r2,-32(fp)
 2027894:	10005f26 	beq	r2,zero,2027a14 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 2027898:	d0a80617 	ldw	r2,-24552(gp)
 202789c:	1029883a 	mov	r20,r2
 20278a0:	e17ff817 	ldw	r5,-32(fp)
 20278a4:	e13ff717 	ldw	r4,-36(fp)
 20278a8:	200aadc0 	call	200aadc <__udivsi3>
 20278ac:	a085883a 	add	r2,r20,r2
 20278b0:	1007883a 	mov	r3,r2
 20278b4:	e0bff917 	ldw	r2,-28(fp)
 20278b8:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 20278bc:	d0a80717 	ldw	r2,-24548(gp)
 20278c0:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 20278c4:	e0bff717 	ldw	r2,-36(fp)
 20278c8:	1021883a 	mov	r16,r2
 20278cc:	0023883a 	mov	r17,zero
 20278d0:	e17ff817 	ldw	r5,-32(fp)
 20278d4:	010003f4 	movhi	r4,15
 20278d8:	21109004 	addi	r4,r4,16960
 20278dc:	200aadc0 	call	200aadc <__udivsi3>
 20278e0:	1025883a 	mov	r18,r2
 20278e4:	0027883a 	mov	r19,zero
 20278e8:	900d883a 	mov	r6,r18
 20278ec:	980f883a 	mov	r7,r19
 20278f0:	8009883a 	mov	r4,r16
 20278f4:	880b883a 	mov	r5,r17
 20278f8:	204083c0 	call	204083c <__muldi3>
 20278fc:	1009883a 	mov	r4,r2
 2027900:	180b883a 	mov	r5,r3
 2027904:	2005883a 	mov	r2,r4
 2027908:	2807883a 	mov	r3,r5
 202790c:	018003f4 	movhi	r6,15
 2027910:	31909004 	addi	r6,r6,16960
 2027914:	000f883a 	mov	r7,zero
 2027918:	1009883a 	mov	r4,r2
 202791c:	180b883a 	mov	r5,r3
 2027920:	200a4ac0 	call	200a4ac <__umoddi3>
 2027924:	1009883a 	mov	r4,r2
 2027928:	180b883a 	mov	r5,r3
 202792c:	2005883a 	mov	r2,r4
 2027930:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 2027934:	a085883a 	add	r2,r20,r2
 2027938:	1007883a 	mov	r3,r2
 202793c:	e0bff917 	ldw	r2,-28(fp)
 2027940:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 2027944:	00001406 	br	2027998 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 2027948:	e0bff917 	ldw	r2,-28(fp)
 202794c:	10800017 	ldw	r2,0(r2)
 2027950:	00800516 	blt	zero,r2,2027968 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 2027954:	e0bff917 	ldw	r2,-28(fp)
 2027958:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 202795c:	e0bff917 	ldw	r2,-28(fp)
 2027960:	10000115 	stw	zero,4(r2)
          break;
 2027964:	00000f06 	br	20279a4 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 2027968:	e0bff917 	ldw	r2,-28(fp)
 202796c:	10800017 	ldw	r2,0(r2)
 2027970:	10ffffc4 	addi	r3,r2,-1
 2027974:	e0bff917 	ldw	r2,-28(fp)
 2027978:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 202797c:	e0bff917 	ldw	r2,-28(fp)
 2027980:	10c00117 	ldw	r3,4(r2)
 2027984:	008003f4 	movhi	r2,15
 2027988:	10909004 	addi	r2,r2,16960
 202798c:	1887883a 	add	r3,r3,r2
 2027990:	e0bff917 	ldw	r2,-28(fp)
 2027994:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 2027998:	e0bff917 	ldw	r2,-28(fp)
 202799c:	10800117 	ldw	r2,4(r2)
 20279a0:	103fe916 	blt	r2,zero,2027948 <__alt_mem_mem_0+0xfd007948>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 20279a4:	00000c06 	br	20279d8 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 20279a8:	e0bff917 	ldw	r2,-28(fp)
 20279ac:	10800017 	ldw	r2,0(r2)
 20279b0:	10c00044 	addi	r3,r2,1
 20279b4:	e0bff917 	ldw	r2,-28(fp)
 20279b8:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 20279bc:	e0bff917 	ldw	r2,-28(fp)
 20279c0:	10c00117 	ldw	r3,4(r2)
 20279c4:	00bffc74 	movhi	r2,65521
 20279c8:	10af7004 	addi	r2,r2,-16960
 20279cc:	1887883a 	add	r3,r3,r2
 20279d0:	e0bff917 	ldw	r2,-28(fp)
 20279d4:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 20279d8:	e0bff917 	ldw	r2,-28(fp)
 20279dc:	10c00117 	ldw	r3,4(r2)
 20279e0:	008003f4 	movhi	r2,15
 20279e4:	10908fc4 	addi	r2,r2,16959
 20279e8:	10ffef16 	blt	r2,r3,20279a8 <__alt_mem_mem_0+0xfd0079a8>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 20279ec:	e0bff617 	ldw	r2,-40(fp)
 20279f0:	10000626 	beq	r2,zero,2027a0c <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 20279f4:	d0e80417 	ldw	r3,-24560(gp)
 20279f8:	e0bff617 	ldw	r2,-40(fp)
 20279fc:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 2027a00:	d0e80517 	ldw	r3,-24556(gp)
 2027a04:	e0bff617 	ldw	r2,-40(fp)
 2027a08:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 2027a0c:	0005883a 	mov	r2,zero
 2027a10:	00000106 	br	2027a18 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 2027a14:	00bfde84 	movi	r2,-134
}
 2027a18:	e6fffb04 	addi	sp,fp,-20
 2027a1c:	dfc00617 	ldw	ra,24(sp)
 2027a20:	df000517 	ldw	fp,20(sp)
 2027a24:	dd000417 	ldw	r20,16(sp)
 2027a28:	dcc00317 	ldw	r19,12(sp)
 2027a2c:	dc800217 	ldw	r18,8(sp)
 2027a30:	dc400117 	ldw	r17,4(sp)
 2027a34:	dc000017 	ldw	r16,0(sp)
 2027a38:	dec00704 	addi	sp,sp,28
 2027a3c:	f800283a 	ret

02027a40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2027a40:	defffe04 	addi	sp,sp,-8
 2027a44:	dfc00115 	stw	ra,4(sp)
 2027a48:	df000015 	stw	fp,0(sp)
 2027a4c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 2027a50:	01500004 	movi	r5,16384
 2027a54:	0009883a 	mov	r4,zero
 2027a58:	2038de80 	call	2038de8 <alt_icache_flush>
#endif
}
 2027a5c:	0001883a 	nop
 2027a60:	e037883a 	mov	sp,fp
 2027a64:	dfc00117 	ldw	ra,4(sp)
 2027a68:	df000017 	ldw	fp,0(sp)
 2027a6c:	dec00204 	addi	sp,sp,8
 2027a70:	f800283a 	ret

02027a74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2027a74:	defff904 	addi	sp,sp,-28
 2027a78:	dfc00615 	stw	ra,24(sp)
 2027a7c:	df000515 	stw	fp,20(sp)
 2027a80:	df000504 	addi	fp,sp,20
 2027a84:	e13ffc15 	stw	r4,-16(fp)
 2027a88:	e17ffd15 	stw	r5,-12(fp)
 2027a8c:	e1bffe15 	stw	r6,-8(fp)
 2027a90:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2027a94:	e0800217 	ldw	r2,8(fp)
 2027a98:	d8800015 	stw	r2,0(sp)
 2027a9c:	e1ffff17 	ldw	r7,-4(fp)
 2027aa0:	e1bffe17 	ldw	r6,-8(fp)
 2027aa4:	e17ffd17 	ldw	r5,-12(fp)
 2027aa8:	e13ffc17 	ldw	r4,-16(fp)
 2027aac:	2027c240 	call	2027c24 <alt_iic_isr_register>
}  
 2027ab0:	e037883a 	mov	sp,fp
 2027ab4:	dfc00117 	ldw	ra,4(sp)
 2027ab8:	df000017 	ldw	fp,0(sp)
 2027abc:	dec00204 	addi	sp,sp,8
 2027ac0:	f800283a 	ret

02027ac4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2027ac4:	defff904 	addi	sp,sp,-28
 2027ac8:	df000615 	stw	fp,24(sp)
 2027acc:	df000604 	addi	fp,sp,24
 2027ad0:	e13ffe15 	stw	r4,-8(fp)
 2027ad4:	e17fff15 	stw	r5,-4(fp)
 2027ad8:	e0bfff17 	ldw	r2,-4(fp)
 2027adc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2027ae0:	0005303a 	rdctl	r2,status
 2027ae4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2027ae8:	e0fffb17 	ldw	r3,-20(fp)
 2027aec:	00bfff84 	movi	r2,-2
 2027af0:	1884703a 	and	r2,r3,r2
 2027af4:	1001703a 	wrctl	status,r2
  
  return context;
 2027af8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2027afc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2027b00:	00c00044 	movi	r3,1
 2027b04:	e0bffa17 	ldw	r2,-24(fp)
 2027b08:	1884983a 	sll	r2,r3,r2
 2027b0c:	1007883a 	mov	r3,r2
 2027b10:	d0a80817 	ldw	r2,-24544(gp)
 2027b14:	1884b03a 	or	r2,r3,r2
 2027b18:	d0a80815 	stw	r2,-24544(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2027b1c:	d0a80817 	ldw	r2,-24544(gp)
 2027b20:	100170fa 	wrctl	ienable,r2
 2027b24:	e0bffc17 	ldw	r2,-16(fp)
 2027b28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2027b2c:	e0bffd17 	ldw	r2,-12(fp)
 2027b30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2027b34:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 2027b38:	0001883a 	nop
}
 2027b3c:	e037883a 	mov	sp,fp
 2027b40:	df000017 	ldw	fp,0(sp)
 2027b44:	dec00104 	addi	sp,sp,4
 2027b48:	f800283a 	ret

02027b4c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2027b4c:	defff904 	addi	sp,sp,-28
 2027b50:	df000615 	stw	fp,24(sp)
 2027b54:	df000604 	addi	fp,sp,24
 2027b58:	e13ffe15 	stw	r4,-8(fp)
 2027b5c:	e17fff15 	stw	r5,-4(fp)
 2027b60:	e0bfff17 	ldw	r2,-4(fp)
 2027b64:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2027b68:	0005303a 	rdctl	r2,status
 2027b6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2027b70:	e0fffb17 	ldw	r3,-20(fp)
 2027b74:	00bfff84 	movi	r2,-2
 2027b78:	1884703a 	and	r2,r3,r2
 2027b7c:	1001703a 	wrctl	status,r2
  
  return context;
 2027b80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2027b84:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2027b88:	00c00044 	movi	r3,1
 2027b8c:	e0bffa17 	ldw	r2,-24(fp)
 2027b90:	1884983a 	sll	r2,r3,r2
 2027b94:	0084303a 	nor	r2,zero,r2
 2027b98:	1007883a 	mov	r3,r2
 2027b9c:	d0a80817 	ldw	r2,-24544(gp)
 2027ba0:	1884703a 	and	r2,r3,r2
 2027ba4:	d0a80815 	stw	r2,-24544(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2027ba8:	d0a80817 	ldw	r2,-24544(gp)
 2027bac:	100170fa 	wrctl	ienable,r2
 2027bb0:	e0bffc17 	ldw	r2,-16(fp)
 2027bb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2027bb8:	e0bffd17 	ldw	r2,-12(fp)
 2027bbc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2027bc0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 2027bc4:	0001883a 	nop
}
 2027bc8:	e037883a 	mov	sp,fp
 2027bcc:	df000017 	ldw	fp,0(sp)
 2027bd0:	dec00104 	addi	sp,sp,4
 2027bd4:	f800283a 	ret

02027bd8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2027bd8:	defffc04 	addi	sp,sp,-16
 2027bdc:	df000315 	stw	fp,12(sp)
 2027be0:	df000304 	addi	fp,sp,12
 2027be4:	e13ffe15 	stw	r4,-8(fp)
 2027be8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2027bec:	000530fa 	rdctl	r2,ienable
 2027bf0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2027bf4:	00c00044 	movi	r3,1
 2027bf8:	e0bfff17 	ldw	r2,-4(fp)
 2027bfc:	1884983a 	sll	r2,r3,r2
 2027c00:	1007883a 	mov	r3,r2
 2027c04:	e0bffd17 	ldw	r2,-12(fp)
 2027c08:	1884703a 	and	r2,r3,r2
 2027c0c:	1004c03a 	cmpne	r2,r2,zero
 2027c10:	10803fcc 	andi	r2,r2,255
}
 2027c14:	e037883a 	mov	sp,fp
 2027c18:	df000017 	ldw	fp,0(sp)
 2027c1c:	dec00104 	addi	sp,sp,4
 2027c20:	f800283a 	ret

02027c24 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2027c24:	defff504 	addi	sp,sp,-44
 2027c28:	dfc00a15 	stw	ra,40(sp)
 2027c2c:	df000915 	stw	fp,36(sp)
 2027c30:	df000904 	addi	fp,sp,36
 2027c34:	e13ffc15 	stw	r4,-16(fp)
 2027c38:	e17ffd15 	stw	r5,-12(fp)
 2027c3c:	e1bffe15 	stw	r6,-8(fp)
 2027c40:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2027c44:	00bffa84 	movi	r2,-22
 2027c48:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2027c4c:	e0bffd17 	ldw	r2,-12(fp)
 2027c50:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2027c54:	e0bff817 	ldw	r2,-32(fp)
 2027c58:	10800808 	cmpgei	r2,r2,32
 2027c5c:	1000271e 	bne	r2,zero,2027cfc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2027c60:	0005303a 	rdctl	r2,status
 2027c64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2027c68:	e0fffb17 	ldw	r3,-20(fp)
 2027c6c:	00bfff84 	movi	r2,-2
 2027c70:	1884703a 	and	r2,r3,r2
 2027c74:	1001703a 	wrctl	status,r2
  
  return context;
 2027c78:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2027c7c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 2027c80:	008085f4 	movhi	r2,535
 2027c84:	10a90404 	addi	r2,r2,-23536
 2027c88:	e0fff817 	ldw	r3,-32(fp)
 2027c8c:	180690fa 	slli	r3,r3,3
 2027c90:	10c5883a 	add	r2,r2,r3
 2027c94:	e0fffe17 	ldw	r3,-8(fp)
 2027c98:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2027c9c:	008085f4 	movhi	r2,535
 2027ca0:	10a90404 	addi	r2,r2,-23536
 2027ca4:	e0fff817 	ldw	r3,-32(fp)
 2027ca8:	180690fa 	slli	r3,r3,3
 2027cac:	10c5883a 	add	r2,r2,r3
 2027cb0:	10800104 	addi	r2,r2,4
 2027cb4:	e0ffff17 	ldw	r3,-4(fp)
 2027cb8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2027cbc:	e0bffe17 	ldw	r2,-8(fp)
 2027cc0:	10000526 	beq	r2,zero,2027cd8 <alt_iic_isr_register+0xb4>
 2027cc4:	e0bff817 	ldw	r2,-32(fp)
 2027cc8:	100b883a 	mov	r5,r2
 2027ccc:	e13ffc17 	ldw	r4,-16(fp)
 2027cd0:	2027ac40 	call	2027ac4 <alt_ic_irq_enable>
 2027cd4:	00000406 	br	2027ce8 <alt_iic_isr_register+0xc4>
 2027cd8:	e0bff817 	ldw	r2,-32(fp)
 2027cdc:	100b883a 	mov	r5,r2
 2027ce0:	e13ffc17 	ldw	r4,-16(fp)
 2027ce4:	2027b4c0 	call	2027b4c <alt_ic_irq_disable>
 2027ce8:	e0bff715 	stw	r2,-36(fp)
 2027cec:	e0bffa17 	ldw	r2,-24(fp)
 2027cf0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2027cf4:	e0bff917 	ldw	r2,-28(fp)
 2027cf8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2027cfc:	e0bff717 	ldw	r2,-36(fp)
}
 2027d00:	e037883a 	mov	sp,fp
 2027d04:	dfc00117 	ldw	ra,4(sp)
 2027d08:	df000017 	ldw	fp,0(sp)
 2027d0c:	dec00204 	addi	sp,sp,8
 2027d10:	f800283a 	ret

02027d14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2027d14:	defffe04 	addi	sp,sp,-8
 2027d18:	dfc00115 	stw	ra,4(sp)
 2027d1c:	df000015 	stw	fp,0(sp)
 2027d20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2027d24:	d0a01917 	ldw	r2,-32668(gp)
 2027d28:	10000326 	beq	r2,zero,2027d38 <alt_get_errno+0x24>
 2027d2c:	d0a01917 	ldw	r2,-32668(gp)
 2027d30:	103ee83a 	callr	r2
 2027d34:	00000106 	br	2027d3c <alt_get_errno+0x28>
 2027d38:	d0a7ce04 	addi	r2,gp,-24776
}
 2027d3c:	e037883a 	mov	sp,fp
 2027d40:	dfc00117 	ldw	ra,4(sp)
 2027d44:	df000017 	ldw	fp,0(sp)
 2027d48:	dec00204 	addi	sp,sp,8
 2027d4c:	f800283a 	ret

02027d50 <alt_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2027d50:	defff904 	addi	sp,sp,-28
 2027d54:	dfc00615 	stw	ra,24(sp)
 2027d58:	df000515 	stw	fp,20(sp)
 2027d5c:	df000504 	addi	fp,sp,20
 2027d60:	e13ffd15 	stw	r4,-12(fp)
 2027d64:	e17ffe15 	stw	r5,-8(fp)
 2027d68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2027d6c:	e0bffd17 	ldw	r2,-12(fp)
 2027d70:	10000616 	blt	r2,zero,2027d8c <alt_read+0x3c>
 2027d74:	e0bffd17 	ldw	r2,-12(fp)
 2027d78:	10c00324 	muli	r3,r2,12
 2027d7c:	00808134 	movhi	r2,516
 2027d80:	10909204 	addi	r2,r2,16968
 2027d84:	1885883a 	add	r2,r3,r2
 2027d88:	00000106 	br	2027d90 <alt_read+0x40>
 2027d8c:	0005883a 	mov	r2,zero
 2027d90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2027d94:	e0bffb17 	ldw	r2,-20(fp)
 2027d98:	10002226 	beq	r2,zero,2027e24 <alt_read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2027d9c:	e0bffb17 	ldw	r2,-20(fp)
 2027da0:	10800217 	ldw	r2,8(r2)
 2027da4:	108000cc 	andi	r2,r2,3
 2027da8:	10800060 	cmpeqi	r2,r2,1
 2027dac:	1000181e 	bne	r2,zero,2027e10 <alt_read+0xc0>
        (fd->dev->read))
 2027db0:	e0bffb17 	ldw	r2,-20(fp)
 2027db4:	10800017 	ldw	r2,0(r2)
 2027db8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2027dbc:	10001426 	beq	r2,zero,2027e10 <alt_read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2027dc0:	e0bffb17 	ldw	r2,-20(fp)
 2027dc4:	10800017 	ldw	r2,0(r2)
 2027dc8:	10800517 	ldw	r2,20(r2)
 2027dcc:	e0ffff17 	ldw	r3,-4(fp)
 2027dd0:	180d883a 	mov	r6,r3
 2027dd4:	e17ffe17 	ldw	r5,-8(fp)
 2027dd8:	e13ffb17 	ldw	r4,-20(fp)
 2027ddc:	103ee83a 	callr	r2
 2027de0:	e0bffc15 	stw	r2,-16(fp)
 2027de4:	e0bffc17 	ldw	r2,-16(fp)
 2027de8:	1000070e 	bge	r2,zero,2027e08 <alt_read+0xb8>
        {
          ALT_ERRNO = -rval;
 2027dec:	2027d140 	call	2027d14 <alt_get_errno>
 2027df0:	1007883a 	mov	r3,r2
 2027df4:	e0bffc17 	ldw	r2,-16(fp)
 2027df8:	0085c83a 	sub	r2,zero,r2
 2027dfc:	18800015 	stw	r2,0(r3)
          return -1;
 2027e00:	00bfffc4 	movi	r2,-1
 2027e04:	00000c06 	br	2027e38 <alt_read+0xe8>
        }
        return rval;
 2027e08:	e0bffc17 	ldw	r2,-16(fp)
 2027e0c:	00000a06 	br	2027e38 <alt_read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2027e10:	2027d140 	call	2027d14 <alt_get_errno>
 2027e14:	1007883a 	mov	r3,r2
 2027e18:	00800344 	movi	r2,13
 2027e1c:	18800015 	stw	r2,0(r3)
 2027e20:	00000406 	br	2027e34 <alt_read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2027e24:	2027d140 	call	2027d14 <alt_get_errno>
 2027e28:	1007883a 	mov	r3,r2
 2027e2c:	00801444 	movi	r2,81
 2027e30:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2027e34:	00bfffc4 	movi	r2,-1
}
 2027e38:	e037883a 	mov	sp,fp
 2027e3c:	dfc00117 	ldw	ra,4(sp)
 2027e40:	df000017 	ldw	fp,0(sp)
 2027e44:	dec00204 	addi	sp,sp,8
 2027e48:	f800283a 	ret

02027e4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2027e4c:	defffa04 	addi	sp,sp,-24
 2027e50:	df000515 	stw	fp,20(sp)
 2027e54:	df000504 	addi	fp,sp,20
 2027e58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2027e5c:	0005303a 	rdctl	r2,status
 2027e60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2027e64:	e0fffc17 	ldw	r3,-16(fp)
 2027e68:	00bfff84 	movi	r2,-2
 2027e6c:	1884703a 	and	r2,r3,r2
 2027e70:	1001703a 	wrctl	status,r2
  
  return context;
 2027e74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2027e78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2027e7c:	e0bfff17 	ldw	r2,-4(fp)
 2027e80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2027e84:	e0bffd17 	ldw	r2,-12(fp)
 2027e88:	10800017 	ldw	r2,0(r2)
 2027e8c:	e0fffd17 	ldw	r3,-12(fp)
 2027e90:	18c00117 	ldw	r3,4(r3)
 2027e94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2027e98:	e0bffd17 	ldw	r2,-12(fp)
 2027e9c:	10800117 	ldw	r2,4(r2)
 2027ea0:	e0fffd17 	ldw	r3,-12(fp)
 2027ea4:	18c00017 	ldw	r3,0(r3)
 2027ea8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2027eac:	e0bffd17 	ldw	r2,-12(fp)
 2027eb0:	e0fffd17 	ldw	r3,-12(fp)
 2027eb4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2027eb8:	e0bffd17 	ldw	r2,-12(fp)
 2027ebc:	e0fffd17 	ldw	r3,-12(fp)
 2027ec0:	10c00015 	stw	r3,0(r2)
 2027ec4:	e0bffb17 	ldw	r2,-20(fp)
 2027ec8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2027ecc:	e0bffe17 	ldw	r2,-8(fp)
 2027ed0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2027ed4:	0001883a 	nop
 2027ed8:	e037883a 	mov	sp,fp
 2027edc:	df000017 	ldw	fp,0(sp)
 2027ee0:	dec00104 	addi	sp,sp,4
 2027ee4:	f800283a 	ret

02027ee8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2027ee8:	defffb04 	addi	sp,sp,-20
 2027eec:	dfc00415 	stw	ra,16(sp)
 2027ef0:	df000315 	stw	fp,12(sp)
 2027ef4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2027ef8:	d0a01b17 	ldw	r2,-32660(gp)
 2027efc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2027f00:	d0a80a17 	ldw	r2,-24536(gp)
 2027f04:	10800044 	addi	r2,r2,1
 2027f08:	d0a80a15 	stw	r2,-24536(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2027f0c:	00002e06 	br	2027fc8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2027f10:	e0bffd17 	ldw	r2,-12(fp)
 2027f14:	10800017 	ldw	r2,0(r2)
 2027f18:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2027f1c:	e0bffd17 	ldw	r2,-12(fp)
 2027f20:	10800403 	ldbu	r2,16(r2)
 2027f24:	10803fcc 	andi	r2,r2,255
 2027f28:	10000426 	beq	r2,zero,2027f3c <alt_tick+0x54>
 2027f2c:	d0a80a17 	ldw	r2,-24536(gp)
 2027f30:	1000021e 	bne	r2,zero,2027f3c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2027f34:	e0bffd17 	ldw	r2,-12(fp)
 2027f38:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2027f3c:	e0bffd17 	ldw	r2,-12(fp)
 2027f40:	10800217 	ldw	r2,8(r2)
 2027f44:	d0e80a17 	ldw	r3,-24536(gp)
 2027f48:	18801d36 	bltu	r3,r2,2027fc0 <alt_tick+0xd8>
 2027f4c:	e0bffd17 	ldw	r2,-12(fp)
 2027f50:	10800403 	ldbu	r2,16(r2)
 2027f54:	10803fcc 	andi	r2,r2,255
 2027f58:	1000191e 	bne	r2,zero,2027fc0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2027f5c:	e0bffd17 	ldw	r2,-12(fp)
 2027f60:	10800317 	ldw	r2,12(r2)
 2027f64:	e0fffd17 	ldw	r3,-12(fp)
 2027f68:	18c00517 	ldw	r3,20(r3)
 2027f6c:	1809883a 	mov	r4,r3
 2027f70:	103ee83a 	callr	r2
 2027f74:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2027f78:	e0bfff17 	ldw	r2,-4(fp)
 2027f7c:	1000031e 	bne	r2,zero,2027f8c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2027f80:	e13ffd17 	ldw	r4,-12(fp)
 2027f84:	2027e4c0 	call	2027e4c <alt_alarm_stop>
 2027f88:	00000d06 	br	2027fc0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2027f8c:	e0bffd17 	ldw	r2,-12(fp)
 2027f90:	10c00217 	ldw	r3,8(r2)
 2027f94:	e0bfff17 	ldw	r2,-4(fp)
 2027f98:	1887883a 	add	r3,r3,r2
 2027f9c:	e0bffd17 	ldw	r2,-12(fp)
 2027fa0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2027fa4:	e0bffd17 	ldw	r2,-12(fp)
 2027fa8:	10c00217 	ldw	r3,8(r2)
 2027fac:	d0a80a17 	ldw	r2,-24536(gp)
 2027fb0:	1880032e 	bgeu	r3,r2,2027fc0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2027fb4:	e0bffd17 	ldw	r2,-12(fp)
 2027fb8:	00c00044 	movi	r3,1
 2027fbc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2027fc0:	e0bffe17 	ldw	r2,-8(fp)
 2027fc4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2027fc8:	e0fffd17 	ldw	r3,-12(fp)
 2027fcc:	d0a01b04 	addi	r2,gp,-32660
 2027fd0:	18bfcf1e 	bne	r3,r2,2027f10 <__alt_mem_mem_0+0xfd007f10>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2027fd4:	20270b80 	call	20270b8 <vPortSysTickHandler>
}
 2027fd8:	0001883a 	nop
 2027fdc:	e037883a 	mov	sp,fp
 2027fe0:	dfc00117 	ldw	ra,4(sp)
 2027fe4:	df000017 	ldw	fp,0(sp)
 2027fe8:	dec00204 	addi	sp,sp,8
 2027fec:	f800283a 	ret

02027ff0 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
 2027ff0:	defffd04 	addi	sp,sp,-12
 2027ff4:	dfc00215 	stw	ra,8(sp)
 2027ff8:	df000115 	stw	fp,4(sp)
 2027ffc:	df000104 	addi	fp,sp,4
 2028000:	e13fff15 	stw	r4,-4(fp)
  ALT_LINK_ERROR("alt_uncached_malloc() is not available because CPU is not configured to use bit 31 of address to bypass data cache");
  return NULL;
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
 2028004:	e13fff17 	ldw	r4,-4(fp)
 2028008:	203ca940 	call	203ca94 <malloc>
#endif /* No data cache */
}
 202800c:	e037883a 	mov	sp,fp
 2028010:	dfc00117 	ldw	ra,4(sp)
 2028014:	df000017 	ldw	fp,0(sp)
 2028018:	dec00204 	addi	sp,sp,8
 202801c:	f800283a 	ret

02028020 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 2028020:	defffd04 	addi	sp,sp,-12
 2028024:	dfc00215 	stw	ra,8(sp)
 2028028:	df000115 	stw	fp,4(sp)
 202802c:	df000104 	addi	fp,sp,4
 2028030:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 2028034:	e13fff17 	ldw	r4,-4(fp)
 2028038:	2038c900 	call	2038c90 <alt_busy_sleep>
}
 202803c:	e037883a 	mov	sp,fp
 2028040:	dfc00117 	ldw	ra,4(sp)
 2028044:	df000017 	ldw	fp,0(sp)
 2028048:	dec00204 	addi	sp,sp,8
 202804c:	f800283a 	ret

02028050 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2028050:	defffe04 	addi	sp,sp,-8
 2028054:	dfc00115 	stw	ra,4(sp)
 2028058:	df000015 	stw	fp,0(sp)
 202805c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2028060:	d0a01917 	ldw	r2,-32668(gp)
 2028064:	10000326 	beq	r2,zero,2028074 <alt_get_errno+0x24>
 2028068:	d0a01917 	ldw	r2,-32668(gp)
 202806c:	103ee83a 	callr	r2
 2028070:	00000106 	br	2028078 <alt_get_errno+0x28>
 2028074:	d0a7ce04 	addi	r2,gp,-24776
}
 2028078:	e037883a 	mov	sp,fp
 202807c:	dfc00117 	ldw	ra,4(sp)
 2028080:	df000017 	ldw	fp,0(sp)
 2028084:	dec00204 	addi	sp,sp,8
 2028088:	f800283a 	ret

0202808c <alt_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 202808c:	defff904 	addi	sp,sp,-28
 2028090:	dfc00615 	stw	ra,24(sp)
 2028094:	df000515 	stw	fp,20(sp)
 2028098:	df000504 	addi	fp,sp,20
 202809c:	e13ffd15 	stw	r4,-12(fp)
 20280a0:	e17ffe15 	stw	r5,-8(fp)
 20280a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20280a8:	e0bffd17 	ldw	r2,-12(fp)
 20280ac:	10000616 	blt	r2,zero,20280c8 <alt_write+0x3c>
 20280b0:	e0bffd17 	ldw	r2,-12(fp)
 20280b4:	10c00324 	muli	r3,r2,12
 20280b8:	00808134 	movhi	r2,516
 20280bc:	10909204 	addi	r2,r2,16968
 20280c0:	1885883a 	add	r2,r3,r2
 20280c4:	00000106 	br	20280cc <alt_write+0x40>
 20280c8:	0005883a 	mov	r2,zero
 20280cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20280d0:	e0bffb17 	ldw	r2,-20(fp)
 20280d4:	10002126 	beq	r2,zero,202815c <alt_write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 20280d8:	e0bffb17 	ldw	r2,-20(fp)
 20280dc:	10800217 	ldw	r2,8(r2)
 20280e0:	108000cc 	andi	r2,r2,3
 20280e4:	10001826 	beq	r2,zero,2028148 <alt_write+0xbc>
 20280e8:	e0bffb17 	ldw	r2,-20(fp)
 20280ec:	10800017 	ldw	r2,0(r2)
 20280f0:	10800617 	ldw	r2,24(r2)
 20280f4:	10001426 	beq	r2,zero,2028148 <alt_write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 20280f8:	e0bffb17 	ldw	r2,-20(fp)
 20280fc:	10800017 	ldw	r2,0(r2)
 2028100:	10800617 	ldw	r2,24(r2)
 2028104:	e0ffff17 	ldw	r3,-4(fp)
 2028108:	180d883a 	mov	r6,r3
 202810c:	e17ffe17 	ldw	r5,-8(fp)
 2028110:	e13ffb17 	ldw	r4,-20(fp)
 2028114:	103ee83a 	callr	r2
 2028118:	e0bffc15 	stw	r2,-16(fp)
 202811c:	e0bffc17 	ldw	r2,-16(fp)
 2028120:	1000070e 	bge	r2,zero,2028140 <alt_write+0xb4>
      {
        ALT_ERRNO = -rval;
 2028124:	20280500 	call	2028050 <alt_get_errno>
 2028128:	1007883a 	mov	r3,r2
 202812c:	e0bffc17 	ldw	r2,-16(fp)
 2028130:	0085c83a 	sub	r2,zero,r2
 2028134:	18800015 	stw	r2,0(r3)
        return -1;
 2028138:	00bfffc4 	movi	r2,-1
 202813c:	00000c06 	br	2028170 <alt_write+0xe4>
      }
      return rval;
 2028140:	e0bffc17 	ldw	r2,-16(fp)
 2028144:	00000a06 	br	2028170 <alt_write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2028148:	20280500 	call	2028050 <alt_get_errno>
 202814c:	1007883a 	mov	r3,r2
 2028150:	00800344 	movi	r2,13
 2028154:	18800015 	stw	r2,0(r3)
 2028158:	00000406 	br	202816c <alt_write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 202815c:	20280500 	call	2028050 <alt_get_errno>
 2028160:	1007883a 	mov	r3,r2
 2028164:	00801444 	movi	r2,81
 2028168:	18800015 	stw	r2,0(r3)
  }
  return -1;
 202816c:	00bfffc4 	movi	r2,-1
}
 2028170:	e037883a 	mov	sp,fp
 2028174:	dfc00117 	ldw	ra,4(sp)
 2028178:	df000017 	ldw	fp,0(sp)
 202817c:	dec00204 	addi	sp,sp,8
 2028180:	f800283a 	ret

02028184 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2028184:	deffff04 	addi	sp,sp,-4
 2028188:	df000015 	stw	fp,0(sp)
 202818c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2028190:	000170fa 	wrctl	ienable,zero
}
 2028194:	0001883a 	nop
 2028198:	e037883a 	mov	sp,fp
 202819c:	df000017 	ldw	fp,0(sp)
 20281a0:	dec00104 	addi	sp,sp,4
 20281a4:	f800283a 	ret

020281a8 <lwip_socket_init>:
 * Initialize this module. This function has to be called before any other
 * functions in this module!
 */
void
lwip_socket_init(void)
{
 20281a8:	deffff04 	addi	sp,sp,-4
 20281ac:	df000015 	stw	fp,0(sp)
 20281b0:	d839883a 	mov	fp,sp
}
 20281b4:	0001883a 	nop
 20281b8:	e037883a 	mov	sp,fp
 20281bc:	df000017 	ldw	fp,0(sp)
 20281c0:	dec00104 	addi	sp,sp,4
 20281c4:	f800283a 	ret

020281c8 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int s)
{
 20281c8:	defffd04 	addi	sp,sp,-12
 20281cc:	df000215 	stw	fp,8(sp)
 20281d0:	df000204 	addi	fp,sp,8
 20281d4:	e13fff15 	stw	r4,-4(fp)
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;
 20281d8:	e0bfff17 	ldw	r2,-4(fp)
 20281dc:	10bff804 	addi	r2,r2,-32
 20281e0:	e0bfff15 	stw	r2,-4(fp)

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 20281e4:	e0bfff17 	ldw	r2,-4(fp)
 20281e8:	10000316 	blt	r2,zero,20281f8 <get_socket+0x30>
 20281ec:	e0bfff17 	ldw	r2,-4(fp)
 20281f0:	10800a90 	cmplti	r2,r2,42
 20281f4:	1000021e 	bne	r2,zero,2028200 <get_socket+0x38>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s));
    set_errno(EBADF);
    return NULL;
 20281f8:	0005883a 	mov	r2,zero
 20281fc:	00000c06 	br	2028230 <get_socket+0x68>
  }

  sock = &sockets[s];
 2028200:	e0bfff17 	ldw	r2,-4(fp)
 2028204:	10c00624 	muli	r3,r2,24
 2028208:	00808534 	movhi	r2,532
 202820c:	109ecf04 	addi	r2,r2,31548
 2028210:	1885883a 	add	r2,r3,r2
 2028214:	e0bffe15 	stw	r2,-8(fp)

  if (!sock->conn) {
 2028218:	e0bffe17 	ldw	r2,-8(fp)
 202821c:	10800017 	ldw	r2,0(r2)
 2028220:	1000021e 	bne	r2,zero,202822c <get_socket+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s));
    set_errno(EBADF);
    return NULL;
 2028224:	0005883a 	mov	r2,zero
 2028228:	00000106 	br	2028230 <get_socket+0x68>
  }

  return sock;
 202822c:	e0bffe17 	ldw	r2,-8(fp)
}
 2028230:	e037883a 	mov	sp,fp
 2028234:	df000017 	ldw	fp,0(sp)
 2028238:	dec00104 	addi	sp,sp,4
 202823c:	f800283a 	ret

02028240 <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
 2028240:	defffe04 	addi	sp,sp,-8
 2028244:	df000115 	stw	fp,4(sp)
 2028248:	df000104 	addi	fp,sp,4
 202824c:	e13fff15 	stw	r4,-4(fp)
	s -= LWIP_SOCKET_OFFSET;
 2028250:	e0bfff17 	ldw	r2,-4(fp)
 2028254:	10bff804 	addi	r2,r2,-32
 2028258:	e0bfff15 	stw	r2,-4(fp)

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 202825c:	e0bfff17 	ldw	r2,-4(fp)
 2028260:	10000316 	blt	r2,zero,2028270 <tryget_socket+0x30>
 2028264:	e0bfff17 	ldw	r2,-4(fp)
 2028268:	10800a90 	cmplti	r2,r2,42
 202826c:	1000021e 	bne	r2,zero,2028278 <tryget_socket+0x38>
    return NULL;
 2028270:	0005883a 	mov	r2,zero
 2028274:	00000e06 	br	20282b0 <tryget_socket+0x70>
  }
  if (!sockets[s].conn) {
 2028278:	00808534 	movhi	r2,532
 202827c:	109ecf04 	addi	r2,r2,31548
 2028280:	e0ffff17 	ldw	r3,-4(fp)
 2028284:	18c00624 	muli	r3,r3,24
 2028288:	10c5883a 	add	r2,r2,r3
 202828c:	10800017 	ldw	r2,0(r2)
 2028290:	1000021e 	bne	r2,zero,202829c <tryget_socket+0x5c>
    return NULL;
 2028294:	0005883a 	mov	r2,zero
 2028298:	00000506 	br	20282b0 <tryget_socket+0x70>
  }
  return &sockets[s];
 202829c:	e0bfff17 	ldw	r2,-4(fp)
 20282a0:	10c00624 	muli	r3,r2,24
 20282a4:	00808534 	movhi	r2,532
 20282a8:	109ecf04 	addi	r2,r2,31548
 20282ac:	1885883a 	add	r2,r3,r2
}
 20282b0:	e037883a 	mov	sp,fp
 20282b4:	df000017 	ldw	fp,0(sp)
 20282b8:	dec00104 	addi	sp,sp,4
 20282bc:	f800283a 	ret

020282c0 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 20282c0:	defffb04 	addi	sp,sp,-20
 20282c4:	dfc00415 	stw	ra,16(sp)
 20282c8:	df000315 	stw	fp,12(sp)
 20282cc:	df000304 	addi	fp,sp,12
 20282d0:	e13ffe15 	stw	r4,-8(fp)
 20282d4:	e17fff15 	stw	r5,-4(fp)
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 20282d8:	e03ffd15 	stw	zero,-12(fp)
 20282dc:	00005706 	br	202843c <alloc_socket+0x17c>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 20282e0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20282e4:	10000126 	beq	r2,zero,20282ec <alloc_socket+0x2c>
 20282e8:	2010de80 	call	2010de8 <vTaskEnterCritical>
    if (!sockets[i].conn) {
 20282ec:	00808534 	movhi	r2,532
 20282f0:	109ecf04 	addi	r2,r2,31548
 20282f4:	e0fffd17 	ldw	r3,-12(fp)
 20282f8:	18c00624 	muli	r3,r3,24
 20282fc:	10c5883a 	add	r2,r2,r3
 2028300:	10800017 	ldw	r2,0(r2)
 2028304:	1000471e 	bne	r2,zero,2028424 <alloc_socket+0x164>
      sockets[i].conn       = newconn;
 2028308:	00808534 	movhi	r2,532
 202830c:	109ecf04 	addi	r2,r2,31548
 2028310:	e0fffd17 	ldw	r3,-12(fp)
 2028314:	18c00624 	muli	r3,r3,24
 2028318:	10c5883a 	add	r2,r2,r3
 202831c:	e0fffe17 	ldw	r3,-8(fp)
 2028320:	10c00015 	stw	r3,0(r2)
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 2028324:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2028328:	10000126 	beq	r2,zero,2028330 <alloc_socket+0x70>
 202832c:	2010e300 	call	2010e30 <vTaskExitCritical>
      sockets[i].lastdata   = NULL;
 2028330:	00808534 	movhi	r2,532
 2028334:	109ecf04 	addi	r2,r2,31548
 2028338:	e0fffd17 	ldw	r3,-12(fp)
 202833c:	18c00624 	muli	r3,r3,24
 2028340:	10c5883a 	add	r2,r2,r3
 2028344:	10800104 	addi	r2,r2,4
 2028348:	10000015 	stw	zero,0(r2)
      sockets[i].lastoffset = 0;
 202834c:	00808534 	movhi	r2,532
 2028350:	109ecf04 	addi	r2,r2,31548
 2028354:	e0fffd17 	ldw	r3,-12(fp)
 2028358:	18c00624 	muli	r3,r3,24
 202835c:	10c5883a 	add	r2,r2,r3
 2028360:	10800204 	addi	r2,r2,8
 2028364:	1000000d 	sth	zero,0(r2)
      sockets[i].rcvevent   = 0;
 2028368:	00808534 	movhi	r2,532
 202836c:	109ecf04 	addi	r2,r2,31548
 2028370:	e0fffd17 	ldw	r3,-12(fp)
 2028374:	18c00624 	muli	r3,r3,24
 2028378:	10c5883a 	add	r2,r2,r3
 202837c:	10800284 	addi	r2,r2,10
 2028380:	1000000d 	sth	zero,0(r2)
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (newconn->type == NETCONN_TCP ? (accepted != 0) : 1);
 2028384:	e0bffe17 	ldw	r2,-8(fp)
 2028388:	10800017 	ldw	r2,0(r2)
 202838c:	10800418 	cmpnei	r2,r2,16
 2028390:	1000021e 	bne	r2,zero,202839c <alloc_socket+0xdc>
 2028394:	e0bfff17 	ldw	r2,-4(fp)
 2028398:	10000226 	beq	r2,zero,20283a4 <alloc_socket+0xe4>
 202839c:	00800044 	movi	r2,1
 20283a0:	00000106 	br	20283a8 <alloc_socket+0xe8>
 20283a4:	0005883a 	mov	r2,zero
 20283a8:	1009883a 	mov	r4,r2
 20283ac:	00808534 	movhi	r2,532
 20283b0:	109ecf04 	addi	r2,r2,31548
 20283b4:	e0fffd17 	ldw	r3,-12(fp)
 20283b8:	18c00624 	muli	r3,r3,24
 20283bc:	10c5883a 	add	r2,r2,r3
 20283c0:	10800304 	addi	r2,r2,12
 20283c4:	1100000d 	sth	r4,0(r2)
      sockets[i].errevent   = 0;
 20283c8:	00808534 	movhi	r2,532
 20283cc:	109ecf04 	addi	r2,r2,31548
 20283d0:	e0fffd17 	ldw	r3,-12(fp)
 20283d4:	18c00624 	muli	r3,r3,24
 20283d8:	10c5883a 	add	r2,r2,r3
 20283dc:	10800384 	addi	r2,r2,14
 20283e0:	1000000d 	sth	zero,0(r2)
      sockets[i].err        = 0;
 20283e4:	00808534 	movhi	r2,532
 20283e8:	109ecf04 	addi	r2,r2,31548
 20283ec:	e0fffd17 	ldw	r3,-12(fp)
 20283f0:	18c00624 	muli	r3,r3,24
 20283f4:	10c5883a 	add	r2,r2,r3
 20283f8:	10800404 	addi	r2,r2,16
 20283fc:	10000015 	stw	zero,0(r2)
      sockets[i].select_waiting = 0;
 2028400:	00808534 	movhi	r2,532
 2028404:	109ecf04 	addi	r2,r2,31548
 2028408:	e0fffd17 	ldw	r3,-12(fp)
 202840c:	18c00624 	muli	r3,r3,24
 2028410:	10c5883a 	add	r2,r2,r3
 2028414:	10800504 	addi	r2,r2,20
 2028418:	10000015 	stw	zero,0(r2)
      return i;
 202841c:	e0bffd17 	ldw	r2,-12(fp)
 2028420:	00000a06 	br	202844c <alloc_socket+0x18c>
    }
    SYS_ARCH_UNPROTECT(lev);
 2028424:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2028428:	10000126 	beq	r2,zero,2028430 <alloc_socket+0x170>
 202842c:	2010e300 	call	2010e30 <vTaskExitCritical>
{
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 2028430:	e0bffd17 	ldw	r2,-12(fp)
 2028434:	10800044 	addi	r2,r2,1
 2028438:	e0bffd15 	stw	r2,-12(fp)
 202843c:	e0bffd17 	ldw	r2,-12(fp)
 2028440:	10800a90 	cmplti	r2,r2,42
 2028444:	103fa61e 	bne	r2,zero,20282e0 <__alt_mem_mem_0+0xfd0082e0>
      sockets[i].select_waiting = 0;
      return i;
    }
    SYS_ARCH_UNPROTECT(lev);
  }
  return -1;
 2028448:	00bfffc4 	movi	r2,-1
}
 202844c:	e037883a 	mov	sp,fp
 2028450:	dfc00117 	ldw	ra,4(sp)
 2028454:	df000017 	ldw	fp,0(sp)
 2028458:	dec00204 	addi	sp,sp,8
 202845c:	f800283a 	ret

02028460 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 2028460:	defffb04 	addi	sp,sp,-20
 2028464:	dfc00415 	stw	ra,16(sp)
 2028468:	df000315 	stw	fp,12(sp)
 202846c:	df000304 	addi	fp,sp,12
 2028470:	e13ffe15 	stw	r4,-8(fp)
 2028474:	e17fff15 	stw	r5,-4(fp)
  void *lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  lastdata         = sock->lastdata;
 2028478:	e0bffe17 	ldw	r2,-8(fp)
 202847c:	10800117 	ldw	r2,4(r2)
 2028480:	e0bffd15 	stw	r2,-12(fp)
  sock->lastdata   = NULL;
 2028484:	e0bffe17 	ldw	r2,-8(fp)
 2028488:	10000115 	stw	zero,4(r2)
  sock->lastoffset = 0;
 202848c:	e0bffe17 	ldw	r2,-8(fp)
 2028490:	1000020d 	sth	zero,8(r2)
  sock->err        = 0;
 2028494:	e0bffe17 	ldw	r2,-8(fp)
 2028498:	10000415 	stw	zero,16(r2)

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 202849c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20284a0:	10000126 	beq	r2,zero,20284a8 <free_socket+0x48>
 20284a4:	2010de80 	call	2010de8 <vTaskEnterCritical>
  sock->conn       = NULL;
 20284a8:	e0bffe17 	ldw	r2,-8(fp)
 20284ac:	10000015 	stw	zero,0(r2)
  SYS_ARCH_UNPROTECT(lev);
 20284b0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20284b4:	10000126 	beq	r2,zero,20284bc <free_socket+0x5c>
 20284b8:	2010e300 	call	2010e30 <vTaskExitCritical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
 20284bc:	e0bffd17 	ldw	r2,-12(fp)
 20284c0:	10000726 	beq	r2,zero,20284e0 <free_socket+0x80>
    if (is_tcp) {
 20284c4:	e0bfff17 	ldw	r2,-4(fp)
 20284c8:	10000326 	beq	r2,zero,20284d8 <free_socket+0x78>
      pbuf_free((struct pbuf *)lastdata);
 20284cc:	e13ffd17 	ldw	r4,-12(fp)
 20284d0:	201aa200 	call	201aa20 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
 20284d4:	00000206 	br	20284e0 <free_socket+0x80>

  if (lastdata != NULL) {
    if (is_tcp) {
      pbuf_free((struct pbuf *)lastdata);
    } else {
      netbuf_delete((struct netbuf *)lastdata);
 20284d8:	e13ffd17 	ldw	r4,-12(fp)
 20284dc:	203c4d00 	call	203c4d0 <netbuf_delete>
    }
  }
}
 20284e0:	0001883a 	nop
 20284e4:	e037883a 	mov	sp,fp
 20284e8:	dfc00117 	ldw	ra,4(sp)
 20284ec:	df000017 	ldw	fp,0(sp)
 20284f0:	dec00204 	addi	sp,sp,8
 20284f4:	f800283a 	ret

020284f8 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 20284f8:	defff004 	addi	sp,sp,-64
 20284fc:	dfc00f15 	stw	ra,60(sp)
 2028500:	df000e15 	stw	fp,56(sp)
 2028504:	df000e04 	addi	fp,sp,56
 2028508:	e13ffd15 	stw	r4,-12(fp)
 202850c:	e17ffe15 	stw	r5,-8(fp)
 2028510:	e1bfff15 	stw	r6,-4(fp)
  struct sockaddr_in sin;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 2028514:	e13ffd17 	ldw	r4,-12(fp)
 2028518:	20281c80 	call	20281c8 <get_socket>
 202851c:	e0bff215 	stw	r2,-56(fp)
  if (!sock) {
 2028520:	e0bff217 	ldw	r2,-56(fp)
 2028524:	1000021e 	bne	r2,zero,2028530 <lwip_accept+0x38>
    return -1;
 2028528:	00bfffc4 	movi	r2,-1
 202852c:	0000ae06 	br	20287e8 <lwip_accept+0x2f0>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
 2028530:	e0bff217 	ldw	r2,-56(fp)
 2028534:	10800017 	ldw	r2,0(r2)
 2028538:	10800903 	ldbu	r2,36(r2)
 202853c:	10803fcc 	andi	r2,r2,255
 2028540:	1080008c 	andi	r2,r2,2
 2028544:	10000b26 	beq	r2,zero,2028574 <lwip_accept+0x7c>
 2028548:	e0bff217 	ldw	r2,-56(fp)
 202854c:	1080028b 	ldhu	r2,10(r2)
 2028550:	10bfffcc 	andi	r2,r2,65535
 2028554:	10a0001c 	xori	r2,r2,32768
 2028558:	10a00004 	addi	r2,r2,-32768
 202855c:	00800516 	blt	zero,r2,2028574 <lwip_accept+0x7c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    sock_set_errno(sock, EWOULDBLOCK);
 2028560:	e0bff217 	ldw	r2,-56(fp)
 2028564:	00c002c4 	movi	r3,11
 2028568:	10c00415 	stw	r3,16(r2)
    return -1;
 202856c:	00bfffc4 	movi	r2,-1
 2028570:	00009d06 	br	20287e8 <lwip_accept+0x2f0>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 2028574:	e0bff217 	ldw	r2,-56(fp)
 2028578:	10800017 	ldw	r2,0(r2)
 202857c:	e0fff604 	addi	r3,fp,-40
 2028580:	180b883a 	mov	r5,r3
 2028584:	1009883a 	mov	r4,r2
 2028588:	20394080 	call	2039408 <netconn_accept>
 202858c:	e0bff305 	stb	r2,-52(fp)
  if (err != ERR_OK) {
 2028590:	e0bff307 	ldb	r2,-52(fp)
 2028594:	10001c26 	beq	r2,zero,2028608 <lwip_accept+0x110>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (netconn_type(sock->conn) != NETCONN_TCP) {
 2028598:	e0bff217 	ldw	r2,-56(fp)
 202859c:	10800017 	ldw	r2,0(r2)
 20285a0:	10800017 	ldw	r2,0(r2)
 20285a4:	10800420 	cmpeqi	r2,r2,16
 20285a8:	1000051e 	bne	r2,zero,20285c0 <lwip_accept+0xc8>
      sock_set_errno(sock, EOPNOTSUPP);
 20285ac:	e0bff217 	ldw	r2,-56(fp)
 20285b0:	00c017c4 	movi	r3,95
 20285b4:	10c00415 	stw	r3,16(r2)
      return EOPNOTSUPP;
 20285b8:	008017c4 	movi	r2,95
 20285bc:	00008a06 	br	20287e8 <lwip_accept+0x2f0>
    }
    sock_set_errno(sock, err_to_errno(err));
 20285c0:	e0bff307 	ldb	r2,-52(fp)
 20285c4:	0085c83a 	sub	r2,zero,r2
 20285c8:	10800428 	cmpgeui	r2,r2,16
 20285cc:	1000091e 	bne	r2,zero,20285f4 <lwip_accept+0xfc>
 20285d0:	e0bff307 	ldb	r2,-52(fp)
 20285d4:	0087c83a 	sub	r3,zero,r2
 20285d8:	00808134 	movhi	r2,516
 20285dc:	1085f404 	addi	r2,r2,6096
 20285e0:	18c7883a 	add	r3,r3,r3
 20285e4:	18c7883a 	add	r3,r3,r3
 20285e8:	10c5883a 	add	r2,r2,r3
 20285ec:	10800017 	ldw	r2,0(r2)
 20285f0:	00000106 	br	20285f8 <lwip_accept+0x100>
 20285f4:	00800144 	movi	r2,5
 20285f8:	e0fff217 	ldw	r3,-56(fp)
 20285fc:	18800415 	stw	r2,16(r3)
    return -1;
 2028600:	00bfffc4 	movi	r2,-1
 2028604:	00007806 	br	20287e8 <lwip_accept+0x2f0>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  /* Prevent automatic window updates, we do this on our own! */
  netconn_set_noautorecved(newconn, 1);
 2028608:	e0bff617 	ldw	r2,-40(fp)
 202860c:	e0fff617 	ldw	r3,-40(fp)
 2028610:	18c00903 	ldbu	r3,36(r3)
 2028614:	18c00214 	ori	r3,r3,8
 2028618:	10c00905 	stb	r3,36(r2)

  /* get the IP address and port of the remote host */
  err = netconn_peer(newconn, &naddr, &port);
 202861c:	e0bff617 	ldw	r2,-40(fp)
 2028620:	e13ff804 	addi	r4,fp,-32
 2028624:	e0fff704 	addi	r3,fp,-36
 2028628:	000f883a 	mov	r7,zero
 202862c:	200d883a 	mov	r6,r4
 2028630:	180b883a 	mov	r5,r3
 2028634:	1009883a 	mov	r4,r2
 2028638:	2038f940 	call	2038f94 <netconn_getaddr>
 202863c:	e0bff305 	stb	r2,-52(fp)
  if (err != ERR_OK) {
 2028640:	e0bff307 	ldb	r2,-52(fp)
 2028644:	10001526 	beq	r2,zero,202869c <lwip_accept+0x1a4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
    netconn_delete(newconn);
 2028648:	e0bff617 	ldw	r2,-40(fp)
 202864c:	1009883a 	mov	r4,r2
 2028650:	2038f340 	call	2038f34 <netconn_delete>
    sock_set_errno(sock, err_to_errno(err));
 2028654:	e0bff307 	ldb	r2,-52(fp)
 2028658:	0085c83a 	sub	r2,zero,r2
 202865c:	10800428 	cmpgeui	r2,r2,16
 2028660:	1000091e 	bne	r2,zero,2028688 <lwip_accept+0x190>
 2028664:	e0bff307 	ldb	r2,-52(fp)
 2028668:	0087c83a 	sub	r3,zero,r2
 202866c:	00808134 	movhi	r2,516
 2028670:	1085f404 	addi	r2,r2,6096
 2028674:	18c7883a 	add	r3,r3,r3
 2028678:	18c7883a 	add	r3,r3,r3
 202867c:	10c5883a 	add	r2,r2,r3
 2028680:	10800017 	ldw	r2,0(r2)
 2028684:	00000106 	br	202868c <lwip_accept+0x194>
 2028688:	00800144 	movi	r2,5
 202868c:	e0fff217 	ldw	r3,-56(fp)
 2028690:	18800415 	stw	r2,16(r3)
    return -1;
 2028694:	00bfffc4 	movi	r2,-1
 2028698:	00005306 	br	20287e8 <lwip_accept+0x2f0>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (NULL != addr) {
 202869c:	e0bffe17 	ldw	r2,-8(fp)
 20286a0:	10002226 	beq	r2,zero,202872c <lwip_accept+0x234>
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
    memset(&sin, 0, sizeof(sin));
 20286a4:	e0bff904 	addi	r2,fp,-28
 20286a8:	01800404 	movi	r6,16
 20286ac:	000b883a 	mov	r5,zero
 20286b0:	1009883a 	mov	r4,r2
 20286b4:	2005fa00 	call	2005fa0 <memset>
    sin.sin_len = sizeof(sin);
 20286b8:	00800404 	movi	r2,16
 20286bc:	e0bff905 	stb	r2,-28(fp)
    sin.sin_family = AF_INET;
 20286c0:	00800084 	movi	r2,2
 20286c4:	e0bff945 	stb	r2,-27(fp)
    sin.sin_port = htons(port);
 20286c8:	e0bff80b 	ldhu	r2,-32(fp)
 20286cc:	10bfffcc 	andi	r2,r2,65535
 20286d0:	1004d23a 	srli	r2,r2,8
 20286d4:	1007883a 	mov	r3,r2
 20286d8:	e0bff80b 	ldhu	r2,-32(fp)
 20286dc:	10bfffcc 	andi	r2,r2,65535
 20286e0:	1004923a 	slli	r2,r2,8
 20286e4:	1884b03a 	or	r2,r3,r2
 20286e8:	e0bff98d 	sth	r2,-26(fp)
    inet_addr_from_ipaddr(&sin.sin_addr, &naddr);
 20286ec:	e0bff717 	ldw	r2,-36(fp)
 20286f0:	e0bffa15 	stw	r2,-24(fp)

    if (*addrlen > sizeof(sin))
 20286f4:	e0bfff17 	ldw	r2,-4(fp)
 20286f8:	10800017 	ldw	r2,0(r2)
 20286fc:	10800470 	cmpltui	r2,r2,17
 2028700:	1000031e 	bne	r2,zero,2028710 <lwip_accept+0x218>
      *addrlen = sizeof(sin);
 2028704:	e0bfff17 	ldw	r2,-4(fp)
 2028708:	00c00404 	movi	r3,16
 202870c:	10c00015 	stw	r3,0(r2)

    MEMCPY(addr, &sin, *addrlen);
 2028710:	e0bfff17 	ldw	r2,-4(fp)
 2028714:	10c00017 	ldw	r3,0(r2)
 2028718:	e0bff904 	addi	r2,fp,-28
 202871c:	180d883a 	mov	r6,r3
 2028720:	100b883a 	mov	r5,r2
 2028724:	e13ffe17 	ldw	r4,-8(fp)
 2028728:	2005e580 	call	2005e58 <memcpy>
  }

  newsock = alloc_socket(newconn, 1);
 202872c:	e0bff617 	ldw	r2,-40(fp)
 2028730:	01400044 	movi	r5,1
 2028734:	1009883a 	mov	r4,r2
 2028738:	20282c00 	call	20282c0 <alloc_socket>
 202873c:	e0bff415 	stw	r2,-48(fp)
  if (newsock == -1) {
 2028740:	e0bff417 	ldw	r2,-48(fp)
 2028744:	10bfffd8 	cmpnei	r2,r2,-1
 2028748:	1000081e 	bne	r2,zero,202876c <lwip_accept+0x274>
    netconn_delete(newconn);
 202874c:	e0bff617 	ldw	r2,-40(fp)
 2028750:	1009883a 	mov	r4,r2
 2028754:	2038f340 	call	2038f34 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 2028758:	e0bff217 	ldw	r2,-56(fp)
 202875c:	00c005c4 	movi	r3,23
 2028760:	10c00415 	stw	r3,16(r2)
    return -1;
 2028764:	00bfffc4 	movi	r2,-1
 2028768:	00001f06 	br	20287e8 <lwip_accept+0x2f0>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= 0) && (newsock < NUM_SOCKETS));
  LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock];
 202876c:	e0bff417 	ldw	r2,-48(fp)
 2028770:	10c00624 	muli	r3,r2,24
 2028774:	00808534 	movhi	r2,532
 2028778:	109ecf04 	addi	r2,r2,31548
 202877c:	1885883a 	add	r2,r3,r2
 2028780:	e0bff515 	stw	r2,-44(fp)

  newsock += LWIP_SOCKET_OFFSET;
 2028784:	e0bff417 	ldw	r2,-48(fp)
 2028788:	10800804 	addi	r2,r2,32
 202878c:	e0bff415 	stw	r2,-48(fp)
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 2028790:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2028794:	10000126 	beq	r2,zero,202879c <lwip_accept+0x2a4>
 2028798:	2010de80 	call	2010de8 <vTaskEnterCritical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
 202879c:	e0bff517 	ldw	r2,-44(fp)
 20287a0:	1080028b 	ldhu	r2,10(r2)
 20287a4:	1007883a 	mov	r3,r2
 20287a8:	e0bff617 	ldw	r2,-40(fp)
 20287ac:	10800717 	ldw	r2,28(r2)
 20287b0:	1885c83a 	sub	r2,r3,r2
 20287b4:	10bfffc4 	addi	r2,r2,-1
 20287b8:	1007883a 	mov	r3,r2
 20287bc:	e0bff517 	ldw	r2,-44(fp)
 20287c0:	10c0028d 	sth	r3,10(r2)
  newconn->socket = newsock;
 20287c4:	e0bff617 	ldw	r2,-40(fp)
 20287c8:	e0fff417 	ldw	r3,-48(fp)
 20287cc:	10c00715 	stw	r3,28(r2)
  SYS_ARCH_UNPROTECT(lev);
 20287d0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20287d4:	10000126 	beq	r2,zero,20287dc <lwip_accept+0x2e4>
 20287d8:	2010e300 	call	2010e30 <vTaskExitCritical>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d addr=", s, newsock));
  ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));

  sock_set_errno(sock, 0);
 20287dc:	e0bff217 	ldw	r2,-56(fp)
 20287e0:	10000415 	stw	zero,16(r2)
  return newsock;
 20287e4:	e0bff417 	ldw	r2,-48(fp)
}
 20287e8:	e037883a 	mov	sp,fp
 20287ec:	dfc00117 	ldw	ra,4(sp)
 20287f0:	df000017 	ldw	fp,0(sp)
 20287f4:	dec00204 	addi	sp,sp,8
 20287f8:	f800283a 	ret

020287fc <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 20287fc:	defff704 	addi	sp,sp,-36
 2028800:	dfc00815 	stw	ra,32(sp)
 2028804:	df000715 	stw	fp,28(sp)
 2028808:	df000704 	addi	fp,sp,28
 202880c:	e13ffd15 	stw	r4,-12(fp)
 2028810:	e17ffe15 	stw	r5,-8(fp)
 2028814:	e1bfff15 	stw	r6,-4(fp)
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;
  const struct sockaddr_in *name_in;

  sock = get_socket(s);
 2028818:	e13ffd17 	ldw	r4,-12(fp)
 202881c:	20281c80 	call	20281c8 <get_socket>
 2028820:	e0bff915 	stw	r2,-28(fp)
  if (!sock) {
 2028824:	e0bff917 	ldw	r2,-28(fp)
 2028828:	1000021e 	bne	r2,zero,2028834 <lwip_bind+0x38>
    return -1;
 202882c:	00bfffc4 	movi	r2,-1
 2028830:	00004206 	br	202893c <lwip_bind+0x140>
  }

  /* check size, familiy and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
 2028834:	e0bfff17 	ldw	r2,-4(fp)
 2028838:	10800418 	cmpnei	r2,r2,16
 202883c:	1000081e 	bne	r2,zero,2028860 <lwip_bind+0x64>
 2028840:	e0bffe17 	ldw	r2,-8(fp)
 2028844:	10800043 	ldbu	r2,1(r2)
 2028848:	10803fcc 	andi	r2,r2,255
 202884c:	10800098 	cmpnei	r2,r2,2
 2028850:	1000031e 	bne	r2,zero,2028860 <lwip_bind+0x64>
 2028854:	e0bffe17 	ldw	r2,-8(fp)
 2028858:	108000cc 	andi	r2,r2,3
 202885c:	10000926 	beq	r2,zero,2028884 <lwip_bind+0x88>
 2028860:	01c08134 	movhi	r7,516
 2028864:	39c60404 	addi	r7,r7,6160
 2028868:	01806ac4 	movi	r6,427
 202886c:	01408134 	movhi	r5,516
 2028870:	29460a04 	addi	r5,r5,6184
 2028874:	01008134 	movhi	r4,516
 2028878:	21061104 	addi	r4,r4,6212
 202887c:	20009e40 	call	20009e4 <printf>
 2028880:	003fff06 	br	2028880 <__alt_mem_mem_0+0xfd008880>
             ((name->sa_family) == AF_INET) && ((((mem_ptr_t)name) % 4) == 0)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  name_in = (const struct sockaddr_in *)(void*)name;
 2028884:	e0bffe17 	ldw	r2,-8(fp)
 2028888:	e0bffa15 	stw	r2,-24(fp)

  inet_addr_to_ipaddr(&local_addr, &name_in->sin_addr);
 202888c:	e0bffa17 	ldw	r2,-24(fp)
 2028890:	10800117 	ldw	r2,4(r2)
 2028894:	e0bffc15 	stw	r2,-16(fp)
  local_port = name_in->sin_port;
 2028898:	e0bffa17 	ldw	r2,-24(fp)
 202889c:	1080008b 	ldhu	r2,2(r2)
 20288a0:	e0bffb0d 	sth	r2,-20(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d, addr=", s));
  ip_addr_debug_print(SOCKETS_DEBUG, &local_addr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", ntohs(local_port)));

  err = netconn_bind(sock->conn, &local_addr, ntohs(local_port));
 20288a4:	e0bff917 	ldw	r2,-28(fp)
 20288a8:	10c00017 	ldw	r3,0(r2)
 20288ac:	e0bffb0b 	ldhu	r2,-20(fp)
 20288b0:	1004d23a 	srli	r2,r2,8
 20288b4:	1009883a 	mov	r4,r2
 20288b8:	e0bffb0b 	ldhu	r2,-20(fp)
 20288bc:	1004923a 	slli	r2,r2,8
 20288c0:	2084b03a 	or	r2,r4,r2
 20288c4:	113fffcc 	andi	r4,r2,65535
 20288c8:	e0bffc04 	addi	r2,fp,-16
 20288cc:	200d883a 	mov	r6,r4
 20288d0:	100b883a 	mov	r5,r2
 20288d4:	1809883a 	mov	r4,r3
 20288d8:	20390d00 	call	20390d0 <netconn_bind>
 20288dc:	e0bffb85 	stb	r2,-18(fp)

  if (err != ERR_OK) {
 20288e0:	e0bffb87 	ldb	r2,-18(fp)
 20288e4:	10001226 	beq	r2,zero,2028930 <lwip_bind+0x134>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 20288e8:	e0bffb87 	ldb	r2,-18(fp)
 20288ec:	0085c83a 	sub	r2,zero,r2
 20288f0:	10800428 	cmpgeui	r2,r2,16
 20288f4:	1000091e 	bne	r2,zero,202891c <lwip_bind+0x120>
 20288f8:	e0bffb87 	ldb	r2,-18(fp)
 20288fc:	0087c83a 	sub	r3,zero,r2
 2028900:	00808134 	movhi	r2,516
 2028904:	1085f404 	addi	r2,r2,6096
 2028908:	18c7883a 	add	r3,r3,r3
 202890c:	18c7883a 	add	r3,r3,r3
 2028910:	10c5883a 	add	r2,r2,r3
 2028914:	10800017 	ldw	r2,0(r2)
 2028918:	00000106 	br	2028920 <lwip_bind+0x124>
 202891c:	00800144 	movi	r2,5
 2028920:	e0fff917 	ldw	r3,-28(fp)
 2028924:	18800415 	stw	r2,16(r3)
    return -1;
 2028928:	00bfffc4 	movi	r2,-1
 202892c:	00000306 	br	202893c <lwip_bind+0x140>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 2028930:	e0bff917 	ldw	r2,-28(fp)
 2028934:	10000415 	stw	zero,16(r2)
  return 0;
 2028938:	0005883a 	mov	r2,zero
}
 202893c:	e037883a 	mov	sp,fp
 2028940:	dfc00117 	ldw	ra,4(sp)
 2028944:	df000017 	ldw	fp,0(sp)
 2028948:	dec00204 	addi	sp,sp,8
 202894c:	f800283a 	ret

02028950 <lwip_close>:

int
lwip_close(int s)
{
 2028950:	defffb04 	addi	sp,sp,-20
 2028954:	dfc00415 	stw	ra,16(sp)
 2028958:	df000315 	stw	fp,12(sp)
 202895c:	df000304 	addi	fp,sp,12
 2028960:	e13fff15 	stw	r4,-4(fp)
  struct lwip_sock *sock;
  int is_tcp = 0;
 2028964:	e03ffd15 	stw	zero,-12(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 2028968:	e13fff17 	ldw	r4,-4(fp)
 202896c:	20281c80 	call	20281c8 <get_socket>
 2028970:	e0bffe15 	stw	r2,-8(fp)
  if (!sock) {
 2028974:	e0bffe17 	ldw	r2,-8(fp)
 2028978:	1000021e 	bne	r2,zero,2028984 <lwip_close+0x34>
    return -1;
 202897c:	00bfffc4 	movi	r2,-1
 2028980:	00001106 	br	20289c8 <lwip_close+0x78>
  }

  if(sock->conn != NULL) {
 2028984:	e0bffe17 	ldw	r2,-8(fp)
 2028988:	10800017 	ldw	r2,0(r2)
 202898c:	10000626 	beq	r2,zero,20289a8 <lwip_close+0x58>
    is_tcp = netconn_type(sock->conn) == NETCONN_TCP;
 2028990:	e0bffe17 	ldw	r2,-8(fp)
 2028994:	10800017 	ldw	r2,0(r2)
 2028998:	10800017 	ldw	r2,0(r2)
 202899c:	10800420 	cmpeqi	r2,r2,16
 20289a0:	10803fcc 	andi	r2,r2,255
 20289a4:	e0bffd15 	stw	r2,-12(fp)
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  }

  netconn_delete(sock->conn);
 20289a8:	e0bffe17 	ldw	r2,-8(fp)
 20289ac:	10800017 	ldw	r2,0(r2)
 20289b0:	1009883a 	mov	r4,r2
 20289b4:	2038f340 	call	2038f34 <netconn_delete>

  free_socket(sock, is_tcp);
 20289b8:	e17ffd17 	ldw	r5,-12(fp)
 20289bc:	e13ffe17 	ldw	r4,-8(fp)
 20289c0:	20284600 	call	2028460 <free_socket>
  set_errno(0);
  return 0;
 20289c4:	0005883a 	mov	r2,zero
}
 20289c8:	e037883a 	mov	sp,fp
 20289cc:	dfc00117 	ldw	ra,4(sp)
 20289d0:	df000017 	ldw	fp,0(sp)
 20289d4:	dec00204 	addi	sp,sp,8
 20289d8:	f800283a 	ret

020289dc <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 20289dc:	defff604 	addi	sp,sp,-40
 20289e0:	dfc00915 	stw	ra,36(sp)
 20289e4:	df000815 	stw	fp,32(sp)
 20289e8:	df000804 	addi	fp,sp,32
 20289ec:	e13ffd15 	stw	r4,-12(fp)
 20289f0:	e17ffe15 	stw	r5,-8(fp)
 20289f4:	e1bfff15 	stw	r6,-4(fp)
  struct lwip_sock *sock;
  err_t err;
  const struct sockaddr_in *name_in;

  sock = get_socket(s);
 20289f8:	e13ffd17 	ldw	r4,-12(fp)
 20289fc:	20281c80 	call	20281c8 <get_socket>
 2028a00:	e0bff915 	stw	r2,-28(fp)
  if (!sock) {
 2028a04:	e0bff917 	ldw	r2,-28(fp)
 2028a08:	1000021e 	bne	r2,zero,2028a14 <lwip_connect+0x38>
    return -1;
 2028a0c:	00bfffc4 	movi	r2,-1
 2028a10:	00004c06 	br	2028b44 <lwip_connect+0x168>
  }

  /* check size, familiy and alignment of 'name' */
  LWIP_ERROR("lwip_connect: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
 2028a14:	e0bfff17 	ldw	r2,-4(fp)
 2028a18:	10800418 	cmpnei	r2,r2,16
 2028a1c:	1000081e 	bne	r2,zero,2028a40 <lwip_connect+0x64>
 2028a20:	e0bffe17 	ldw	r2,-8(fp)
 2028a24:	10800043 	ldbu	r2,1(r2)
 2028a28:	10803fcc 	andi	r2,r2,255
 2028a2c:	10800098 	cmpnei	r2,r2,2
 2028a30:	1000031e 	bne	r2,zero,2028a40 <lwip_connect+0x64>
 2028a34:	e0bffe17 	ldw	r2,-8(fp)
 2028a38:	108000cc 	andi	r2,r2,3
 2028a3c:	10000926 	beq	r2,zero,2028a64 <lwip_connect+0x88>
 2028a40:	01c08134 	movhi	r7,516
 2028a44:	39c60404 	addi	r7,r7,6160
 2028a48:	01807ac4 	movi	r6,491
 2028a4c:	01408134 	movhi	r5,516
 2028a50:	29461d04 	addi	r5,r5,6260
 2028a54:	01008134 	movhi	r4,516
 2028a58:	21061104 	addi	r4,r4,6212
 2028a5c:	20009e40 	call	20009e4 <printf>
 2028a60:	003fff06 	br	2028a60 <__alt_mem_mem_0+0xfd008a60>
             ((name->sa_family) == AF_INET) && ((((mem_ptr_t)name) % 4) == 0)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  name_in = (const struct sockaddr_in *)(void*)name;
 2028a64:	e0bffe17 	ldw	r2,-8(fp)
 2028a68:	e0bffa15 	stw	r2,-24(fp)

  if (name_in->sin_family == AF_UNSPEC) {
 2028a6c:	e0bffa17 	ldw	r2,-24(fp)
 2028a70:	10800043 	ldbu	r2,1(r2)
 2028a74:	10803fcc 	andi	r2,r2,255
 2028a78:	1000061e 	bne	r2,zero,2028a94 <lwip_connect+0xb8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 2028a7c:	e0bff917 	ldw	r2,-28(fp)
 2028a80:	10800017 	ldw	r2,0(r2)
 2028a84:	1009883a 	mov	r4,r2
 2028a88:	20392800 	call	2039280 <netconn_disconnect>
 2028a8c:	e0bff805 	stb	r2,-32(fp)
 2028a90:	00001506 	br	2028ae8 <lwip_connect+0x10c>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    inet_addr_to_ipaddr(&remote_addr, &name_in->sin_addr);
 2028a94:	e0bffa17 	ldw	r2,-24(fp)
 2028a98:	10800117 	ldw	r2,4(r2)
 2028a9c:	e0bffc15 	stw	r2,-16(fp)
    remote_port = name_in->sin_port;
 2028aa0:	e0bffa17 	ldw	r2,-24(fp)
 2028aa4:	1080008b 	ldhu	r2,2(r2)
 2028aa8:	e0bffb0d 	sth	r2,-20(fp)

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, addr=", s));
    ip_addr_debug_print(SOCKETS_DEBUG, &remote_addr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", ntohs(remote_port)));

    err = netconn_connect(sock->conn, &remote_addr, ntohs(remote_port));
 2028aac:	e0bff917 	ldw	r2,-28(fp)
 2028ab0:	10c00017 	ldw	r3,0(r2)
 2028ab4:	e0bffb0b 	ldhu	r2,-20(fp)
 2028ab8:	1004d23a 	srli	r2,r2,8
 2028abc:	1009883a 	mov	r4,r2
 2028ac0:	e0bffb0b 	ldhu	r2,-20(fp)
 2028ac4:	1004923a 	slli	r2,r2,8
 2028ac8:	2084b03a 	or	r2,r4,r2
 2028acc:	113fffcc 	andi	r4,r2,65535
 2028ad0:	e0bffc04 	addi	r2,fp,-16
 2028ad4:	200d883a 	mov	r6,r4
 2028ad8:	100b883a 	mov	r5,r2
 2028adc:	1809883a 	mov	r4,r3
 2028ae0:	20391a80 	call	20391a8 <netconn_connect>
 2028ae4:	e0bff805 	stb	r2,-32(fp)
  }

  if (err != ERR_OK) {
 2028ae8:	e0bff807 	ldb	r2,-32(fp)
 2028aec:	10001226 	beq	r2,zero,2028b38 <lwip_connect+0x15c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 2028af0:	e0bff807 	ldb	r2,-32(fp)
 2028af4:	0085c83a 	sub	r2,zero,r2
 2028af8:	10800428 	cmpgeui	r2,r2,16
 2028afc:	1000091e 	bne	r2,zero,2028b24 <lwip_connect+0x148>
 2028b00:	e0bff807 	ldb	r2,-32(fp)
 2028b04:	0087c83a 	sub	r3,zero,r2
 2028b08:	00808134 	movhi	r2,516
 2028b0c:	1085f404 	addi	r2,r2,6096
 2028b10:	18c7883a 	add	r3,r3,r3
 2028b14:	18c7883a 	add	r3,r3,r3
 2028b18:	10c5883a 	add	r2,r2,r3
 2028b1c:	10800017 	ldw	r2,0(r2)
 2028b20:	00000106 	br	2028b28 <lwip_connect+0x14c>
 2028b24:	00800144 	movi	r2,5
 2028b28:	e0fff917 	ldw	r3,-28(fp)
 2028b2c:	18800415 	stw	r2,16(r3)
    return -1;
 2028b30:	00bfffc4 	movi	r2,-1
 2028b34:	00000306 	br	2028b44 <lwip_connect+0x168>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 2028b38:	e0bff917 	ldw	r2,-28(fp)
 2028b3c:	10000415 	stw	zero,16(r2)
  return 0;
 2028b40:	0005883a 	mov	r2,zero
}
 2028b44:	e037883a 	mov	sp,fp
 2028b48:	dfc00117 	ldw	ra,4(sp)
 2028b4c:	df000017 	ldw	fp,0(sp)
 2028b50:	dec00204 	addi	sp,sp,8
 2028b54:	f800283a 	ret

02028b58 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 2028b58:	defffa04 	addi	sp,sp,-24
 2028b5c:	dfc00515 	stw	ra,20(sp)
 2028b60:	df000415 	stw	fp,16(sp)
 2028b64:	df000404 	addi	fp,sp,16
 2028b68:	e13ffe15 	stw	r4,-8(fp)
 2028b6c:	e17fff15 	stw	r5,-4(fp)
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 2028b70:	e13ffe17 	ldw	r4,-8(fp)
 2028b74:	20281c80 	call	20281c8 <get_socket>
 2028b78:	e0bffc15 	stw	r2,-16(fp)
  if (!sock) {
 2028b7c:	e0bffc17 	ldw	r2,-16(fp)
 2028b80:	1000021e 	bne	r2,zero,2028b8c <lwip_listen+0x34>
    return -1;
 2028b84:	00bfffc4 	movi	r2,-1
 2028b88:	00003206 	br	2028c54 <lwip_listen+0xfc>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 2028b8c:	e0bfff17 	ldw	r2,-4(fp)
 2028b90:	10803fc8 	cmpgei	r2,r2,255
 2028b94:	1000041e 	bne	r2,zero,2028ba8 <lwip_listen+0x50>
 2028b98:	e0bfff17 	ldw	r2,-4(fp)
 2028b9c:	1000030e 	bge	r2,zero,2028bac <lwip_listen+0x54>
 2028ba0:	0005883a 	mov	r2,zero
 2028ba4:	00000106 	br	2028bac <lwip_listen+0x54>
 2028ba8:	00803fc4 	movi	r2,255
 2028bac:	e0bfff15 	stw	r2,-4(fp)

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 2028bb0:	e0bffc17 	ldw	r2,-16(fp)
 2028bb4:	10c00017 	ldw	r3,0(r2)
 2028bb8:	e0bfff17 	ldw	r2,-4(fp)
 2028bbc:	10803fcc 	andi	r2,r2,255
 2028bc0:	100b883a 	mov	r5,r2
 2028bc4:	1809883a 	mov	r4,r3
 2028bc8:	203933c0 	call	203933c <netconn_listen_with_backlog>
 2028bcc:	e0bffd05 	stb	r2,-12(fp)

  if (err != ERR_OK) {
 2028bd0:	e0bffd07 	ldb	r2,-12(fp)
 2028bd4:	10001c26 	beq	r2,zero,2028c48 <lwip_listen+0xf0>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (netconn_type(sock->conn) != NETCONN_TCP) {
 2028bd8:	e0bffc17 	ldw	r2,-16(fp)
 2028bdc:	10800017 	ldw	r2,0(r2)
 2028be0:	10800017 	ldw	r2,0(r2)
 2028be4:	10800420 	cmpeqi	r2,r2,16
 2028be8:	1000051e 	bne	r2,zero,2028c00 <lwip_listen+0xa8>
      sock_set_errno(sock, EOPNOTSUPP);
 2028bec:	e0bffc17 	ldw	r2,-16(fp)
 2028bf0:	00c017c4 	movi	r3,95
 2028bf4:	10c00415 	stw	r3,16(r2)
      return EOPNOTSUPP;
 2028bf8:	008017c4 	movi	r2,95
 2028bfc:	00001506 	br	2028c54 <lwip_listen+0xfc>
    }
    sock_set_errno(sock, err_to_errno(err));
 2028c00:	e0bffd07 	ldb	r2,-12(fp)
 2028c04:	0085c83a 	sub	r2,zero,r2
 2028c08:	10800428 	cmpgeui	r2,r2,16
 2028c0c:	1000091e 	bne	r2,zero,2028c34 <lwip_listen+0xdc>
 2028c10:	e0bffd07 	ldb	r2,-12(fp)
 2028c14:	0087c83a 	sub	r3,zero,r2
 2028c18:	00808134 	movhi	r2,516
 2028c1c:	1085f404 	addi	r2,r2,6096
 2028c20:	18c7883a 	add	r3,r3,r3
 2028c24:	18c7883a 	add	r3,r3,r3
 2028c28:	10c5883a 	add	r2,r2,r3
 2028c2c:	10800017 	ldw	r2,0(r2)
 2028c30:	00000106 	br	2028c38 <lwip_listen+0xe0>
 2028c34:	00800144 	movi	r2,5
 2028c38:	e0fffc17 	ldw	r3,-16(fp)
 2028c3c:	18800415 	stw	r2,16(r3)
    return -1;
 2028c40:	00bfffc4 	movi	r2,-1
 2028c44:	00000306 	br	2028c54 <lwip_listen+0xfc>
  }

  sock_set_errno(sock, 0);
 2028c48:	e0bffc17 	ldw	r2,-16(fp)
 2028c4c:	10000415 	stw	zero,16(r2)
  return 0;
 2028c50:	0005883a 	mov	r2,zero
}
 2028c54:	e037883a 	mov	sp,fp
 2028c58:	dfc00117 	ldw	ra,4(sp)
 2028c5c:	df000017 	ldw	fp,0(sp)
 2028c60:	dec00204 	addi	sp,sp,8
 2028c64:	f800283a 	ret

02028c68 <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
        struct sockaddr *from, socklen_t *fromlen)
{
 2028c68:	deffec04 	addi	sp,sp,-80
 2028c6c:	dfc01315 	stw	ra,76(sp)
 2028c70:	df001215 	stw	fp,72(sp)
 2028c74:	df001204 	addi	fp,sp,72
 2028c78:	e13ffc15 	stw	r4,-16(fp)
 2028c7c:	e17ffd15 	stw	r5,-12(fp)
 2028c80:	e1bffe15 	stw	r6,-8(fp)
 2028c84:	e1ffff15 	stw	r7,-4(fp)
  struct lwip_sock *sock;
  void             *buf = NULL;
 2028c88:	e03ff515 	stw	zero,-44(fp)
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
 2028c8c:	e03ff015 	stw	zero,-64(fp)
  ip_addr_t        *addr;
  u16_t            port;
  u8_t             done = 0;
 2028c90:	e03ff205 	stb	zero,-56(fp)
  err_t            err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 2028c94:	e13ffc17 	ldw	r4,-16(fp)
 2028c98:	20281c80 	call	20281c8 <get_socket>
 2028c9c:	e0bff315 	stw	r2,-52(fp)
  if (!sock) {
 2028ca0:	e0bff317 	ldw	r2,-52(fp)
 2028ca4:	1000021e 	bne	r2,zero,2028cb0 <lwip_recvfrom+0x48>
    return -1;
 2028ca8:	00bfffc4 	movi	r2,-1
 2028cac:	00011f06 	br	202912c <lwip_recvfrom+0x4c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
 2028cb0:	e0bff317 	ldw	r2,-52(fp)
 2028cb4:	10800117 	ldw	r2,4(r2)
 2028cb8:	10000426 	beq	r2,zero,2028ccc <lwip_recvfrom+0x64>
      buf = sock->lastdata;
 2028cbc:	e0bff317 	ldw	r2,-52(fp)
 2028cc0:	10800117 	ldw	r2,4(r2)
 2028cc4:	e0bff515 	stw	r2,-44(fp)
 2028cc8:	00005c06 	br	2028e3c <lwip_recvfrom+0x1d4>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) && 
 2028ccc:	e0bfff17 	ldw	r2,-4(fp)
 2028cd0:	1080020c 	andi	r2,r2,8
 2028cd4:	1000061e 	bne	r2,zero,2028cf0 <lwip_recvfrom+0x88>
 2028cd8:	e0bff317 	ldw	r2,-52(fp)
 2028cdc:	10800017 	ldw	r2,0(r2)
 2028ce0:	10800903 	ldbu	r2,36(r2)
 2028ce4:	10803fcc 	andi	r2,r2,255
 2028ce8:	1080008c 	andi	r2,r2,2
 2028cec:	10001726 	beq	r2,zero,2028d4c <lwip_recvfrom+0xe4>
          (sock->rcvevent <= 0)) {
 2028cf0:	e0bff317 	ldw	r2,-52(fp)
 2028cf4:	1080028b 	ldhu	r2,10(r2)
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
      buf = sock->lastdata;
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) && 
 2028cf8:	10bfffcc 	andi	r2,r2,65535
 2028cfc:	10a0001c 	xori	r2,r2,32768
 2028d00:	10a00004 	addi	r2,r2,-32768
 2028d04:	00801116 	blt	zero,r2,2028d4c <lwip_recvfrom+0xe4>
          (sock->rcvevent <= 0)) {
        if (off > 0) {
 2028d08:	e0bff017 	ldw	r2,-64(fp)
 2028d0c:	00800a0e 	bge	zero,r2,2028d38 <lwip_recvfrom+0xd0>
          /* update receive window */
          netconn_recved(sock->conn, (u32_t)off);
 2028d10:	e0bff317 	ldw	r2,-52(fp)
 2028d14:	10800017 	ldw	r2,0(r2)
 2028d18:	e0fff017 	ldw	r3,-64(fp)
 2028d1c:	180b883a 	mov	r5,r3
 2028d20:	1009883a 	mov	r4,r2
 2028d24:	2039ab00 	call	2039ab0 <netconn_recved>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 2028d28:	e0bff317 	ldw	r2,-52(fp)
 2028d2c:	10000415 	stw	zero,16(r2)
          return off;
 2028d30:	e0bff017 	ldw	r2,-64(fp)
 2028d34:	0000fd06 	br	202912c <lwip_recvfrom+0x4c4>
        }
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        sock_set_errno(sock, EWOULDBLOCK);
 2028d38:	e0bff317 	ldw	r2,-52(fp)
 2028d3c:	00c002c4 	movi	r3,11
 2028d40:	10c00415 	stw	r3,16(r2)
        return -1;
 2028d44:	00bfffc4 	movi	r2,-1
 2028d48:	0000f806 	br	202912c <lwip_recvfrom+0x4c4>
      }

      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (netconn_type(sock->conn) == NETCONN_TCP) {
 2028d4c:	e0bff317 	ldw	r2,-52(fp)
 2028d50:	10800017 	ldw	r2,0(r2)
 2028d54:	10800017 	ldw	r2,0(r2)
 2028d58:	10800418 	cmpnei	r2,r2,16
 2028d5c:	1000081e 	bne	r2,zero,2028d80 <lwip_recvfrom+0x118>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 2028d60:	e0bff317 	ldw	r2,-52(fp)
 2028d64:	10800017 	ldw	r2,0(r2)
 2028d68:	e0fff504 	addi	r3,fp,-44
 2028d6c:	180b883a 	mov	r5,r3
 2028d70:	1009883a 	mov	r4,r2
 2028d74:	20398940 	call	2039894 <netconn_recv_tcp_pbuf>
 2028d78:	e0bff245 	stb	r2,-55(fp)
 2028d7c:	00000706 	br	2028d9c <lwip_recvfrom+0x134>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 2028d80:	e0bff317 	ldw	r2,-52(fp)
 2028d84:	10800017 	ldw	r2,0(r2)
 2028d88:	e0fff504 	addi	r3,fp,-44
 2028d8c:	180b883a 	mov	r5,r3
 2028d90:	1009883a 	mov	r4,r2
 2028d94:	20399080 	call	2039908 <netconn_recv>
 2028d98:	e0bff245 	stb	r2,-55(fp)
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
 2028d9c:	e0bff247 	ldb	r2,-55(fp)
 2028da0:	10002326 	beq	r2,zero,2028e30 <lwip_recvfrom+0x1c8>
        if (off > 0) {
 2028da4:	e0bff017 	ldw	r2,-64(fp)
 2028da8:	00800a0e 	bge	zero,r2,2028dd4 <lwip_recvfrom+0x16c>
          /* update receive window */
          netconn_recved(sock->conn, (u32_t)off);
 2028dac:	e0bff317 	ldw	r2,-52(fp)
 2028db0:	10800017 	ldw	r2,0(r2)
 2028db4:	e0fff017 	ldw	r3,-64(fp)
 2028db8:	180b883a 	mov	r5,r3
 2028dbc:	1009883a 	mov	r4,r2
 2028dc0:	2039ab00 	call	2039ab0 <netconn_recved>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 2028dc4:	e0bff317 	ldw	r2,-52(fp)
 2028dc8:	10000415 	stw	zero,16(r2)
          return off;
 2028dcc:	e0bff017 	ldw	r2,-64(fp)
 2028dd0:	0000d606 	br	202912c <lwip_recvfrom+0x4c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 2028dd4:	e0bff247 	ldb	r2,-55(fp)
 2028dd8:	0085c83a 	sub	r2,zero,r2
 2028ddc:	10800428 	cmpgeui	r2,r2,16
 2028de0:	1000091e 	bne	r2,zero,2028e08 <lwip_recvfrom+0x1a0>
 2028de4:	e0bff247 	ldb	r2,-55(fp)
 2028de8:	0087c83a 	sub	r3,zero,r2
 2028dec:	00808134 	movhi	r2,516
 2028df0:	1085f404 	addi	r2,r2,6096
 2028df4:	18c7883a 	add	r3,r3,r3
 2028df8:	18c7883a 	add	r3,r3,r3
 2028dfc:	10c5883a 	add	r2,r2,r3
 2028e00:	10800017 	ldw	r2,0(r2)
 2028e04:	00000106 	br	2028e0c <lwip_recvfrom+0x1a4>
 2028e08:	00800144 	movi	r2,5
 2028e0c:	e0fff317 	ldw	r3,-52(fp)
 2028e10:	18800415 	stw	r2,16(r3)
        if (err == ERR_CLSD) {
 2028e14:	e0bff247 	ldb	r2,-55(fp)
 2028e18:	10bffd18 	cmpnei	r2,r2,-12
 2028e1c:	1000021e 	bne	r2,zero,2028e28 <lwip_recvfrom+0x1c0>
          return 0;
 2028e20:	0005883a 	mov	r2,zero
 2028e24:	0000c106 	br	202912c <lwip_recvfrom+0x4c4>
        } else {
          return -1;
 2028e28:	00bfffc4 	movi	r2,-1
 2028e2c:	0000bf06 	br	202912c <lwip_recvfrom+0x4c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
      sock->lastdata = buf;
 2028e30:	e0fff517 	ldw	r3,-44(fp)
 2028e34:	e0bff317 	ldw	r2,-52(fp)
 2028e38:	10c00115 	stw	r3,4(r2)
    }

    if (netconn_type(sock->conn) == NETCONN_TCP) {
 2028e3c:	e0bff317 	ldw	r2,-52(fp)
 2028e40:	10800017 	ldw	r2,0(r2)
 2028e44:	10800017 	ldw	r2,0(r2)
 2028e48:	10800418 	cmpnei	r2,r2,16
 2028e4c:	1000031e 	bne	r2,zero,2028e5c <lwip_recvfrom+0x1f4>
      p = (struct pbuf *)buf;
 2028e50:	e0bff517 	ldw	r2,-44(fp)
 2028e54:	e0bfee15 	stw	r2,-72(fp)
 2028e58:	00000306 	br	2028e68 <lwip_recvfrom+0x200>
    } else {
      p = ((struct netbuf *)buf)->p;
 2028e5c:	e0bff517 	ldw	r2,-44(fp)
 2028e60:	10800017 	ldw	r2,0(r2)
 2028e64:	e0bfee15 	stw	r2,-72(fp)
    }
    buflen = p->tot_len;
 2028e68:	e0bfee17 	ldw	r2,-72(fp)
 2028e6c:	1080020b 	ldhu	r2,8(r2)
 2028e70:	e0bff40d 	sth	r2,-48(fp)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
 2028e74:	e0bff317 	ldw	r2,-52(fp)
 2028e78:	1080020b 	ldhu	r2,8(r2)
 2028e7c:	e0fff40b 	ldhu	r3,-48(fp)
 2028e80:	1885c83a 	sub	r2,r3,r2
 2028e84:	e0bff40d 	sth	r2,-48(fp)

    if (len > buflen) {
 2028e88:	e0fff40b 	ldhu	r3,-48(fp)
 2028e8c:	e0bffe17 	ldw	r2,-8(fp)
 2028e90:	1880032e 	bgeu	r3,r2,2028ea0 <lwip_recvfrom+0x238>
      copylen = buflen;
 2028e94:	e0bff40b 	ldhu	r2,-48(fp)
 2028e98:	e0bfef0d 	sth	r2,-68(fp)
 2028e9c:	00000206 	br	2028ea8 <lwip_recvfrom+0x240>
    } else {
      copylen = (u16_t)len;
 2028ea0:	e0bffe17 	ldw	r2,-8(fp)
 2028ea4:	e0bfef0d 	sth	r2,-68(fp)
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 2028ea8:	e0bff017 	ldw	r2,-64(fp)
 2028eac:	e0fffd17 	ldw	r3,-12(fp)
 2028eb0:	1887883a 	add	r3,r3,r2
 2028eb4:	e13fef0b 	ldhu	r4,-68(fp)
 2028eb8:	e0bff317 	ldw	r2,-52(fp)
 2028ebc:	1080020b 	ldhu	r2,8(r2)
 2028ec0:	10bfffcc 	andi	r2,r2,65535
 2028ec4:	100f883a 	mov	r7,r2
 2028ec8:	200d883a 	mov	r6,r4
 2028ecc:	180b883a 	mov	r5,r3
 2028ed0:	e13fee17 	ldw	r4,-72(fp)
 2028ed4:	201b0240 	call	201b024 <pbuf_copy_partial>

    off += copylen;
 2028ed8:	e0bfef0b 	ldhu	r2,-68(fp)
 2028edc:	e0fff017 	ldw	r3,-64(fp)
 2028ee0:	1885883a 	add	r2,r3,r2
 2028ee4:	e0bff015 	stw	r2,-64(fp)

    if (netconn_type(sock->conn) == NETCONN_TCP) {
 2028ee8:	e0bff317 	ldw	r2,-52(fp)
 2028eec:	10800017 	ldw	r2,0(r2)
 2028ef0:	10800017 	ldw	r2,0(r2)
 2028ef4:	10800418 	cmpnei	r2,r2,16
 2028ef8:	1000171e 	bne	r2,zero,2028f58 <lwip_recvfrom+0x2f0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
 2028efc:	e0bfef0b 	ldhu	r2,-68(fp)
 2028f00:	e0fffe17 	ldw	r3,-8(fp)
 2028f04:	1885c83a 	sub	r2,r3,r2
 2028f08:	e0bffe15 	stw	r2,-8(fp)
      if ( (len <= 0) || 
 2028f0c:	e0bffe17 	ldw	r2,-8(fp)
 2028f10:	10000e26 	beq	r2,zero,2028f4c <lwip_recvfrom+0x2e4>
           (p->flags & PBUF_FLAG_PUSH) || 
 2028f14:	e0bfee17 	ldw	r2,-72(fp)
 2028f18:	10800343 	ldbu	r2,13(r2)
 2028f1c:	10803fcc 	andi	r2,r2,255
 2028f20:	1080004c 	andi	r2,r2,1
    off += copylen;

    if (netconn_type(sock->conn) == NETCONN_TCP) {
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
      if ( (len <= 0) || 
 2028f24:	1000091e 	bne	r2,zero,2028f4c <lwip_recvfrom+0x2e4>
           (p->flags & PBUF_FLAG_PUSH) || 
           (sock->rcvevent <= 0) || 
 2028f28:	e0bff317 	ldw	r2,-52(fp)
 2028f2c:	1080028b 	ldhu	r2,10(r2)

    if (netconn_type(sock->conn) == NETCONN_TCP) {
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
      if ( (len <= 0) || 
           (p->flags & PBUF_FLAG_PUSH) || 
 2028f30:	10bfffcc 	andi	r2,r2,65535
 2028f34:	10a0001c 	xori	r2,r2,32768
 2028f38:	10a00004 	addi	r2,r2,-32768
 2028f3c:	0080030e 	bge	zero,r2,2028f4c <lwip_recvfrom+0x2e4>
           (sock->rcvevent <= 0) || 
           ((flags & MSG_PEEK)!=0)) {
 2028f40:	e0bfff17 	ldw	r2,-4(fp)
 2028f44:	1080004c 	andi	r2,r2,1
    if (netconn_type(sock->conn) == NETCONN_TCP) {
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
      len -= copylen;
      if ( (len <= 0) || 
           (p->flags & PBUF_FLAG_PUSH) || 
           (sock->rcvevent <= 0) || 
 2028f48:	10000526 	beq	r2,zero,2028f60 <lwip_recvfrom+0x2f8>
           ((flags & MSG_PEEK)!=0)) {
        done = 1;
 2028f4c:	00800044 	movi	r2,1
 2028f50:	e0bff205 	stb	r2,-56(fp)
 2028f54:	00000206 	br	2028f60 <lwip_recvfrom+0x2f8>
      }
    } else {
      done = 1;
 2028f58:	00800044 	movi	r2,1
 2028f5c:	e0bff205 	stb	r2,-56(fp)
    }

    /* Check to see from where the data was.*/
    if (done) {
 2028f60:	e0bff203 	ldbu	r2,-56(fp)
 2028f64:	10003d26 	beq	r2,zero,202905c <lwip_recvfrom+0x3f4>
      ip_addr_t fromaddr;
      if (from && fromlen) {
 2028f68:	e0800217 	ldw	r2,8(fp)
 2028f6c:	10003b26 	beq	r2,zero,202905c <lwip_recvfrom+0x3f4>
 2028f70:	e0800317 	ldw	r2,12(fp)
 2028f74:	10003926 	beq	r2,zero,202905c <lwip_recvfrom+0x3f4>
        struct sockaddr_in sin;

        if (netconn_type(sock->conn) == NETCONN_TCP) {
 2028f78:	e0bff317 	ldw	r2,-52(fp)
 2028f7c:	10800017 	ldw	r2,0(r2)
 2028f80:	10800017 	ldw	r2,0(r2)
 2028f84:	10800418 	cmpnei	r2,r2,16
 2028f88:	10000b1e 	bne	r2,zero,2028fb8 <lwip_recvfrom+0x350>
          addr = &fromaddr;
 2028f8c:	e0bff704 	addi	r2,fp,-36
 2028f90:	e0bff115 	stw	r2,-60(fp)
          netconn_getaddr(sock->conn, addr, &port, 0);
 2028f94:	e0bff317 	ldw	r2,-52(fp)
 2028f98:	10800017 	ldw	r2,0(r2)
 2028f9c:	e0fff604 	addi	r3,fp,-40
 2028fa0:	000f883a 	mov	r7,zero
 2028fa4:	180d883a 	mov	r6,r3
 2028fa8:	e17ff117 	ldw	r5,-60(fp)
 2028fac:	1009883a 	mov	r4,r2
 2028fb0:	2038f940 	call	2038f94 <netconn_getaddr>
 2028fb4:	00000606 	br	2028fd0 <lwip_recvfrom+0x368>
        } else {
          addr = netbuf_fromaddr((struct netbuf *)buf);
 2028fb8:	e0bff517 	ldw	r2,-44(fp)
 2028fbc:	10800204 	addi	r2,r2,8
 2028fc0:	e0bff115 	stw	r2,-60(fp)
          port = netbuf_fromport((struct netbuf *)buf);
 2028fc4:	e0bff517 	ldw	r2,-44(fp)
 2028fc8:	1080030b 	ldhu	r2,12(r2)
 2028fcc:	e0bff60d 	sth	r2,-40(fp)
        }

        memset(&sin, 0, sizeof(sin));
 2028fd0:	e0bff804 	addi	r2,fp,-32
 2028fd4:	01800404 	movi	r6,16
 2028fd8:	000b883a 	mov	r5,zero
 2028fdc:	1009883a 	mov	r4,r2
 2028fe0:	2005fa00 	call	2005fa0 <memset>
        sin.sin_len = sizeof(sin);
 2028fe4:	00800404 	movi	r2,16
 2028fe8:	e0bff805 	stb	r2,-32(fp)
        sin.sin_family = AF_INET;
 2028fec:	00800084 	movi	r2,2
 2028ff0:	e0bff845 	stb	r2,-31(fp)
        sin.sin_port = htons(port);
 2028ff4:	e0bff60b 	ldhu	r2,-40(fp)
 2028ff8:	10bfffcc 	andi	r2,r2,65535
 2028ffc:	1004d23a 	srli	r2,r2,8
 2029000:	1007883a 	mov	r3,r2
 2029004:	e0bff60b 	ldhu	r2,-40(fp)
 2029008:	10bfffcc 	andi	r2,r2,65535
 202900c:	1004923a 	slli	r2,r2,8
 2029010:	1884b03a 	or	r2,r3,r2
 2029014:	e0bff88d 	sth	r2,-30(fp)
        inet_addr_from_ipaddr(&sin.sin_addr, addr);
 2029018:	e0bff117 	ldw	r2,-60(fp)
 202901c:	10800017 	ldw	r2,0(r2)
 2029020:	e0bff915 	stw	r2,-28(fp)

        if (*fromlen > sizeof(sin)) {
 2029024:	e0800317 	ldw	r2,12(fp)
 2029028:	10800017 	ldw	r2,0(r2)
 202902c:	10800470 	cmpltui	r2,r2,17
 2029030:	1000031e 	bne	r2,zero,2029040 <lwip_recvfrom+0x3d8>
          *fromlen = sizeof(sin);
 2029034:	e0800317 	ldw	r2,12(fp)
 2029038:	00c00404 	movi	r3,16
 202903c:	10c00015 	stw	r3,0(r2)
        }

        MEMCPY(from, &sin, *fromlen);
 2029040:	e0800317 	ldw	r2,12(fp)
 2029044:	10c00017 	ldw	r3,0(r2)
 2029048:	e0bff804 	addi	r2,fp,-32
 202904c:	180d883a 	mov	r6,r3
 2029050:	100b883a 	mov	r5,r2
 2029054:	e1000217 	ldw	r4,8(fp)
 2029058:	2005e580 	call	2005e58 <memcpy>
#endif /*  SOCKETS_DEBUG */
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 202905c:	e0bfff17 	ldw	r2,-4(fp)
 2029060:	1080004c 	andi	r2,r2,1
 2029064:	1000241e 	bne	r2,zero,20290f8 <lwip_recvfrom+0x490>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((netconn_type(sock->conn) == NETCONN_TCP) && (buflen - copylen > 0)) {
 2029068:	e0bff317 	ldw	r2,-52(fp)
 202906c:	10800017 	ldw	r2,0(r2)
 2029070:	10800017 	ldw	r2,0(r2)
 2029074:	10800418 	cmpnei	r2,r2,16
 2029078:	10000f1e 	bne	r2,zero,20290b8 <lwip_recvfrom+0x450>
 202907c:	e0fff40b 	ldhu	r3,-48(fp)
 2029080:	e0bfef0b 	ldhu	r2,-68(fp)
 2029084:	1885c83a 	sub	r2,r3,r2
 2029088:	00800b0e 	bge	zero,r2,20290b8 <lwip_recvfrom+0x450>
        sock->lastdata = buf;
 202908c:	e0fff517 	ldw	r3,-44(fp)
 2029090:	e0bff317 	ldw	r2,-52(fp)
 2029094:	10c00115 	stw	r3,4(r2)
        sock->lastoffset += copylen;
 2029098:	e0bff317 	ldw	r2,-52(fp)
 202909c:	10c0020b 	ldhu	r3,8(r2)
 20290a0:	e0bfef0b 	ldhu	r2,-68(fp)
 20290a4:	1885883a 	add	r2,r3,r2
 20290a8:	1007883a 	mov	r3,r2
 20290ac:	e0bff317 	ldw	r2,-52(fp)
 20290b0:	10c0020d 	sth	r3,8(r2)
 20290b4:	00001006 	br	20290f8 <lwip_recvfrom+0x490>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
 20290b8:	e0bff317 	ldw	r2,-52(fp)
 20290bc:	10000115 	stw	zero,4(r2)
        sock->lastoffset = 0;
 20290c0:	e0bff317 	ldw	r2,-52(fp)
 20290c4:	1000020d 	sth	zero,8(r2)
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (netconn_type(sock->conn) == NETCONN_TCP) {
 20290c8:	e0bff317 	ldw	r2,-52(fp)
 20290cc:	10800017 	ldw	r2,0(r2)
 20290d0:	10800017 	ldw	r2,0(r2)
 20290d4:	10800418 	cmpnei	r2,r2,16
 20290d8:	1000041e 	bne	r2,zero,20290ec <lwip_recvfrom+0x484>
          pbuf_free((struct pbuf *)buf);
 20290dc:	e0bff517 	ldw	r2,-44(fp)
 20290e0:	1009883a 	mov	r4,r2
 20290e4:	201aa200 	call	201aa20 <pbuf_free>
 20290e8:	00000306 	br	20290f8 <lwip_recvfrom+0x490>
        } else {
          netbuf_delete((struct netbuf *)buf);
 20290ec:	e0bff517 	ldw	r2,-44(fp)
 20290f0:	1009883a 	mov	r4,r2
 20290f4:	203c4d00 	call	203c4d0 <netbuf_delete>
        }
      }
    }
  } while (!done);
 20290f8:	e0bff203 	ldbu	r2,-56(fp)
 20290fc:	103eec26 	beq	r2,zero,2028cb0 <__alt_mem_mem_0+0xfd008cb0>

  if (off > 0) {
 2029100:	e0bff017 	ldw	r2,-64(fp)
 2029104:	0080060e 	bge	zero,r2,2029120 <lwip_recvfrom+0x4b8>
    /* update receive window */
    netconn_recved(sock->conn, (u32_t)off);
 2029108:	e0bff317 	ldw	r2,-52(fp)
 202910c:	10800017 	ldw	r2,0(r2)
 2029110:	e0fff017 	ldw	r3,-64(fp)
 2029114:	180b883a 	mov	r5,r3
 2029118:	1009883a 	mov	r4,r2
 202911c:	2039ab00 	call	2039ab0 <netconn_recved>
  }
  sock_set_errno(sock, 0);
 2029120:	e0bff317 	ldw	r2,-52(fp)
 2029124:	10000415 	stw	zero,16(r2)
  return off;
 2029128:	e0bff017 	ldw	r2,-64(fp)
}
 202912c:	e037883a 	mov	sp,fp
 2029130:	dfc00117 	ldw	ra,4(sp)
 2029134:	df000017 	ldw	fp,0(sp)
 2029138:	dec00204 	addi	sp,sp,8
 202913c:	f800283a 	ret

02029140 <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
 2029140:	defff904 	addi	sp,sp,-28
 2029144:	dfc00615 	stw	ra,24(sp)
 2029148:	df000515 	stw	fp,20(sp)
 202914c:	df000504 	addi	fp,sp,20
 2029150:	e13ffd15 	stw	r4,-12(fp)
 2029154:	e17ffe15 	stw	r5,-8(fp)
 2029158:	e1bfff15 	stw	r6,-4(fp)
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 202915c:	d8000115 	stw	zero,4(sp)
 2029160:	d8000015 	stw	zero,0(sp)
 2029164:	000f883a 	mov	r7,zero
 2029168:	e1bfff17 	ldw	r6,-4(fp)
 202916c:	e17ffe17 	ldw	r5,-8(fp)
 2029170:	e13ffd17 	ldw	r4,-12(fp)
 2029174:	2028c680 	call	2028c68 <lwip_recvfrom>
}
 2029178:	e037883a 	mov	sp,fp
 202917c:	dfc00117 	ldw	ra,4(sp)
 2029180:	df000017 	ldw	fp,0(sp)
 2029184:	dec00204 	addi	sp,sp,8
 2029188:	f800283a 	ret

0202918c <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
 202918c:	defff804 	addi	sp,sp,-32
 2029190:	dfc00715 	stw	ra,28(sp)
 2029194:	df000615 	stw	fp,24(sp)
 2029198:	df000604 	addi	fp,sp,24
 202919c:	e13ffc15 	stw	r4,-16(fp)
 20291a0:	e17ffd15 	stw	r5,-12(fp)
 20291a4:	e1bffe15 	stw	r6,-8(fp)
 20291a8:	e1ffff15 	stw	r7,-4(fp)
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 20291ac:	d8000115 	stw	zero,4(sp)
 20291b0:	d8000015 	stw	zero,0(sp)
 20291b4:	e1ffff17 	ldw	r7,-4(fp)
 20291b8:	e1bffe17 	ldw	r6,-8(fp)
 20291bc:	e17ffd17 	ldw	r5,-12(fp)
 20291c0:	e13ffc17 	ldw	r4,-16(fp)
 20291c4:	2028c680 	call	2028c68 <lwip_recvfrom>
}
 20291c8:	e037883a 	mov	sp,fp
 20291cc:	dfc00117 	ldw	ra,4(sp)
 20291d0:	df000017 	ldw	fp,0(sp)
 20291d4:	dec00204 	addi	sp,sp,8
 20291d8:	f800283a 	ret

020291dc <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
 20291dc:	defff504 	addi	sp,sp,-44
 20291e0:	dfc00a15 	stw	ra,40(sp)
 20291e4:	df000915 	stw	fp,36(sp)
 20291e8:	df000904 	addi	fp,sp,36
 20291ec:	e13ffc15 	stw	r4,-16(fp)
 20291f0:	e17ffd15 	stw	r5,-12(fp)
 20291f4:	e1bffe15 	stw	r6,-8(fp)
 20291f8:	e1ffff15 	stw	r7,-4(fp)
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 20291fc:	e13ffc17 	ldw	r4,-16(fp)
 2029200:	20281c80 	call	20281c8 <get_socket>
 2029204:	e0bff915 	stw	r2,-28(fp)
  if (!sock) {
 2029208:	e0bff917 	ldw	r2,-28(fp)
 202920c:	1000021e 	bne	r2,zero,2029218 <lwip_send+0x3c>
    return -1;
 2029210:	00bfffc4 	movi	r2,-1
 2029214:	00003d06 	br	202930c <lwip_send+0x130>
  }

  if (sock->conn->type != NETCONN_TCP) {
 2029218:	e0bff917 	ldw	r2,-28(fp)
 202921c:	10800017 	ldw	r2,0(r2)
 2029220:	10800017 	ldw	r2,0(r2)
 2029224:	10800420 	cmpeqi	r2,r2,16
 2029228:	1000081e 	bne	r2,zero,202924c <lwip_send+0x70>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
 202922c:	d8000115 	stw	zero,4(sp)
 2029230:	d8000015 	stw	zero,0(sp)
 2029234:	e1ffff17 	ldw	r7,-4(fp)
 2029238:	e1bffe17 	ldw	r6,-8(fp)
 202923c:	e17ffd17 	ldw	r5,-12(fp)
 2029240:	e13ffc17 	ldw	r4,-16(fp)
 2029244:	20293200 	call	2029320 <lwip_sendto>
 2029248:	00003006 	br	202930c <lwip_send+0x130>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 202924c:	e0bfff17 	ldw	r2,-4(fp)
 2029250:	1080040c 	andi	r2,r2,16
    sock_set_errno(sock, err_to_errno(ERR_ARG));
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
 2029254:	10000226 	beq	r2,zero,2029260 <lwip_send+0x84>
 2029258:	008000c4 	movi	r2,3
 202925c:	00000106 	br	2029264 <lwip_send+0x88>
 2029260:	00800044 	movi	r2,1
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
 2029264:	e0ffff17 	ldw	r3,-4(fp)
 2029268:	18c0020c 	andi	r3,r3,8
    sock_set_errno(sock, err_to_errno(ERR_ARG));
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
 202926c:	18000226 	beq	r3,zero,2029278 <lwip_send+0x9c>
 2029270:	00c00104 	movi	r3,4
 2029274:	00000106 	br	202927c <lwip_send+0xa0>
 2029278:	0007883a 	mov	r3,zero
 202927c:	10c4b03a 	or	r2,r2,r3
 2029280:	e0bffa05 	stb	r2,-24(fp)
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  written = 0;
 2029284:	e03ffb15 	stw	zero,-20(fp)
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 2029288:	e0bff917 	ldw	r2,-28(fp)
 202928c:	10c00017 	ldw	r3,0(r2)
 2029290:	e13ffa03 	ldbu	r4,-24(fp)
 2029294:	e0bffb04 	addi	r2,fp,-20
 2029298:	d8800015 	stw	r2,0(sp)
 202929c:	200f883a 	mov	r7,r4
 20292a0:	e1bffe17 	ldw	r6,-8(fp)
 20292a4:	e17ffd17 	ldw	r5,-12(fp)
 20292a8:	1809883a 	mov	r4,r3
 20292ac:	2039c780 	call	2039c78 <netconn_write_partly>
 20292b0:	e0bffa45 	stb	r2,-23(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 20292b4:	e0bffa47 	ldb	r2,-23(fp)
 20292b8:	0085c83a 	sub	r2,zero,r2
 20292bc:	10800428 	cmpgeui	r2,r2,16
 20292c0:	1000091e 	bne	r2,zero,20292e8 <lwip_send+0x10c>
 20292c4:	e0bffa47 	ldb	r2,-23(fp)
 20292c8:	0087c83a 	sub	r3,zero,r2
 20292cc:	00808134 	movhi	r2,516
 20292d0:	1085f404 	addi	r2,r2,6096
 20292d4:	18c7883a 	add	r3,r3,r3
 20292d8:	18c7883a 	add	r3,r3,r3
 20292dc:	10c5883a 	add	r2,r2,r3
 20292e0:	10800017 	ldw	r2,0(r2)
 20292e4:	00000106 	br	20292ec <lwip_send+0x110>
 20292e8:	00800144 	movi	r2,5
 20292ec:	e0fff917 	ldw	r3,-28(fp)
 20292f0:	18800415 	stw	r2,16(r3)
  return (err == ERR_OK ? (int)written : -1);
 20292f4:	e0bffa47 	ldb	r2,-23(fp)
 20292f8:	1000021e 	bne	r2,zero,2029304 <lwip_send+0x128>
 20292fc:	e0bffb17 	ldw	r2,-20(fp)
 2029300:	00000206 	br	202930c <lwip_send+0x130>
 2029304:	00bfffc4 	movi	r2,-1
 2029308:	0001883a 	nop
}
 202930c:	e037883a 	mov	sp,fp
 2029310:	dfc00117 	ldw	ra,4(sp)
 2029314:	df000017 	ldw	fp,0(sp)
 2029318:	dec00204 	addi	sp,sp,8
 202931c:	f800283a 	ret

02029320 <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
 2029320:	defff004 	addi	sp,sp,-64
 2029324:	dfc00f15 	stw	ra,60(sp)
 2029328:	df000e15 	stw	fp,56(sp)
 202932c:	df000e04 	addi	fp,sp,56
 2029330:	e13ffc15 	stw	r4,-16(fp)
 2029334:	e17ffd15 	stw	r5,-12(fp)
 2029338:	e1bffe15 	stw	r6,-8(fp)
 202933c:	e1ffff15 	stw	r7,-4(fp)
  u16_t remote_port;
#if !LWIP_TCPIP_CORE_LOCKING
  struct netbuf buf;
#endif

  sock = get_socket(s);
 2029340:	e13ffc17 	ldw	r4,-16(fp)
 2029344:	20281c80 	call	20281c8 <get_socket>
 2029348:	e0bff315 	stw	r2,-52(fp)
  if (!sock) {
 202934c:	e0bff317 	ldw	r2,-52(fp)
 2029350:	1000021e 	bne	r2,zero,202935c <lwip_sendto+0x3c>
    return -1;
 2029354:	00bfffc4 	movi	r2,-1
 2029358:	00006a06 	br	2029504 <lwip_sendto+0x1e4>
  }

  if (sock->conn->type == NETCONN_TCP) {
 202935c:	e0bff317 	ldw	r2,-52(fp)
 2029360:	10800017 	ldw	r2,0(r2)
 2029364:	10800017 	ldw	r2,0(r2)
 2029368:	10800418 	cmpnei	r2,r2,16
 202936c:	1000061e 	bne	r2,zero,2029388 <lwip_sendto+0x68>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
 2029370:	e1ffff17 	ldw	r7,-4(fp)
 2029374:	e1bffe17 	ldw	r6,-8(fp)
 2029378:	e17ffd17 	ldw	r5,-12(fp)
 202937c:	e13ffc17 	ldw	r4,-16(fp)
 2029380:	20291dc0 	call	20291dc <lwip_send>
 2029384:	00005f06 	br	2029504 <lwip_sendto+0x1e4>
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  short_size = (u16_t)size;
 2029388:	e0bffe17 	ldw	r2,-8(fp)
 202938c:	e0bff40d 	sth	r2,-48(fp)
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 2029390:	e0800217 	ldw	r2,8(fp)
 2029394:	1000021e 	bne	r2,zero,20293a0 <lwip_sendto+0x80>
 2029398:	e0800317 	ldw	r2,12(fp)
 202939c:	10001426 	beq	r2,zero,20293f0 <lwip_sendto+0xd0>
 20293a0:	e0800317 	ldw	r2,12(fp)
 20293a4:	10800418 	cmpnei	r2,r2,16
 20293a8:	1000081e 	bne	r2,zero,20293cc <lwip_sendto+0xac>
 20293ac:	e0800217 	ldw	r2,8(fp)
 20293b0:	10800043 	ldbu	r2,1(r2)
 20293b4:	10803fcc 	andi	r2,r2,255
 20293b8:	10800098 	cmpnei	r2,r2,2
 20293bc:	1000031e 	bne	r2,zero,20293cc <lwip_sendto+0xac>
 20293c0:	e0800217 	ldw	r2,8(fp)
 20293c4:	108000cc 	andi	r2,r2,3
 20293c8:	10000926 	beq	r2,zero,20293f0 <lwip_sendto+0xd0>
 20293cc:	01c08134 	movhi	r7,516
 20293d0:	39c60404 	addi	r7,r7,6160
 20293d4:	0180cf44 	movi	r6,829
 20293d8:	01408134 	movhi	r5,516
 20293dc:	29462504 	addi	r5,r5,6292
 20293e0:	01008134 	movhi	r4,516
 20293e4:	21061104 	addi	r4,r4,6212
 20293e8:	20009e40 	call	20009e4 <printf>
 20293ec:	003fff06 	br	20293ec <__alt_mem_mem_0+0xfd0093ec>
             ((tolen == sizeof(struct sockaddr_in)) &&
             ((to->sa_family) == AF_INET) && ((((mem_ptr_t)to) % 4) == 0))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  to_in = (const struct sockaddr_in *)(void*)to;
 20293f0:	e0800217 	ldw	r2,8(fp)
 20293f4:	e0bff515 	stw	r2,-44(fp)
      err = ERR_MEM;
    }
  }
#else /* LWIP_TCPIP_CORE_LOCKING */
  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 20293f8:	e03ff815 	stw	zero,-32(fp)
 20293fc:	e0bff817 	ldw	r2,-32(fp)
 2029400:	e0bff715 	stw	r2,-36(fp)
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
 2029404:	e03ffa85 	stb	zero,-22(fp)
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 2029408:	e0800217 	ldw	r2,8(fp)
 202940c:	10001126 	beq	r2,zero,2029454 <lwip_sendto+0x134>
    inet_addr_to_ipaddr(&buf.addr, &to_in->sin_addr);
 2029410:	e0bff517 	ldw	r2,-44(fp)
 2029414:	10800117 	ldw	r2,4(r2)
 2029418:	e0bff915 	stw	r2,-28(fp)
    remote_port           = ntohs(to_in->sin_port);
 202941c:	e0bff517 	ldw	r2,-44(fp)
 2029420:	1080008b 	ldhu	r2,2(r2)
 2029424:	10bfffcc 	andi	r2,r2,65535
 2029428:	1004d23a 	srli	r2,r2,8
 202942c:	1007883a 	mov	r3,r2
 2029430:	e0bff517 	ldw	r2,-44(fp)
 2029434:	1080008b 	ldhu	r2,2(r2)
 2029438:	10bfffcc 	andi	r2,r2,65535
 202943c:	1004923a 	slli	r2,r2,8
 2029440:	1884b03a 	or	r2,r3,r2
 2029444:	e0bff60d 	sth	r2,-40(fp)
    netbuf_fromport(&buf) = remote_port;
 2029448:	e0bff60b 	ldhu	r2,-40(fp)
 202944c:	e0bffa0d 	sth	r2,-24(fp)
 2029450:	00000306 	br	2029460 <lwip_sendto+0x140>
  } else {
    remote_port           = 0;
 2029454:	e03ff60d 	sth	zero,-40(fp)
    ip_addr_set_any(&buf.addr);
 2029458:	e03ff915 	stw	zero,-28(fp)
    netbuf_fromport(&buf) = 0;
 202945c:	e03ffa0d 	sth	zero,-24(fp)
    {
      err = netbuf_take(&buf, data, short_size);
    }
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 2029460:	e0fff40b 	ldhu	r3,-48(fp)
 2029464:	e0bff704 	addi	r2,fp,-36
 2029468:	180d883a 	mov	r6,r3
 202946c:	e17ffd17 	ldw	r5,-12(fp)
 2029470:	1009883a 	mov	r4,r2
 2029474:	203c6980 	call	203c698 <netbuf_ref>
 2029478:	e0bff205 	stb	r2,-56(fp)
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 202947c:	e0bff207 	ldb	r2,-56(fp)
 2029480:	1000071e 	bne	r2,zero,20294a0 <lwip_sendto+0x180>
    /* send the data */
    err = netconn_send(sock->conn, &buf);
 2029484:	e0bff317 	ldw	r2,-52(fp)
 2029488:	10800017 	ldw	r2,0(r2)
 202948c:	e0fff704 	addi	r3,fp,-36
 2029490:	180b883a 	mov	r5,r3
 2029494:	1009883a 	mov	r4,r2
 2029498:	2039bb00 	call	2039bb0 <netconn_send>
 202949c:	e0bff205 	stb	r2,-56(fp)
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 20294a0:	e0bff704 	addi	r2,fp,-36
 20294a4:	1009883a 	mov	r4,r2
 20294a8:	203c60c0 	call	203c60c <netbuf_free>
#endif /* LWIP_TCPIP_CORE_LOCKING */
  sock_set_errno(sock, err_to_errno(err));
 20294ac:	e0bff207 	ldb	r2,-56(fp)
 20294b0:	0085c83a 	sub	r2,zero,r2
 20294b4:	10800428 	cmpgeui	r2,r2,16
 20294b8:	1000091e 	bne	r2,zero,20294e0 <lwip_sendto+0x1c0>
 20294bc:	e0bff207 	ldb	r2,-56(fp)
 20294c0:	0087c83a 	sub	r3,zero,r2
 20294c4:	00808134 	movhi	r2,516
 20294c8:	1085f404 	addi	r2,r2,6096
 20294cc:	18c7883a 	add	r3,r3,r3
 20294d0:	18c7883a 	add	r3,r3,r3
 20294d4:	10c5883a 	add	r2,r2,r3
 20294d8:	10800017 	ldw	r2,0(r2)
 20294dc:	00000106 	br	20294e4 <lwip_sendto+0x1c4>
 20294e0:	00800144 	movi	r2,5
 20294e4:	e0fff317 	ldw	r3,-52(fp)
 20294e8:	18800415 	stw	r2,16(r3)
  return (err == ERR_OK ? short_size : -1);
 20294ec:	e0bff207 	ldb	r2,-56(fp)
 20294f0:	1000021e 	bne	r2,zero,20294fc <lwip_sendto+0x1dc>
 20294f4:	e0bff40b 	ldhu	r2,-48(fp)
 20294f8:	00000206 	br	2029504 <lwip_sendto+0x1e4>
 20294fc:	00bfffc4 	movi	r2,-1
 2029500:	0001883a 	nop
}
 2029504:	e037883a 	mov	sp,fp
 2029508:	dfc00117 	ldw	ra,4(sp)
 202950c:	df000017 	ldw	fp,0(sp)
 2029510:	dec00204 	addi	sp,sp,8
 2029514:	f800283a 	ret

02029518 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 2029518:	defff904 	addi	sp,sp,-28
 202951c:	dfc00615 	stw	ra,24(sp)
 2029520:	df000515 	stw	fp,20(sp)
 2029524:	df000504 	addi	fp,sp,20
 2029528:	e13ffd15 	stw	r4,-12(fp)
 202952c:	e17ffe15 	stw	r5,-8(fp)
 2029530:	e1bfff15 	stw	r6,-4(fp)
  int i;

  LWIP_UNUSED_ARG(domain);

  /* create a netconn */
  switch (type) {
 2029534:	e0bffe17 	ldw	r2,-8(fp)
 2029538:	10c000a0 	cmpeqi	r3,r2,2
 202953c:	18000e1e 	bne	r3,zero,2029578 <lwip_socket+0x60>
 2029540:	10c000e0 	cmpeqi	r3,r2,3
 2029544:	1800031e 	bne	r3,zero,2029554 <lwip_socket+0x3c>
 2029548:	10800060 	cmpeqi	r2,r2,1
 202954c:	1000171e 	bne	r2,zero,20295ac <lwip_socket+0x94>
 2029550:	00002506 	br	20295e8 <lwip_socket+0xd0>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(NETCONN_RAW, (u8_t)protocol, event_callback);
 2029554:	e0bfff17 	ldw	r2,-4(fp)
 2029558:	10803fcc 	andi	r2,r2,255
 202955c:	018080f4 	movhi	r6,515
 2029560:	31a7c104 	addi	r6,r6,-24828
 2029564:	100b883a 	mov	r5,r2
 2029568:	01001004 	movi	r4,64
 202956c:	2038e780 	call	2038e78 <netconn_new_with_proto_and_callback>
 2029570:	e0bffb15 	stw	r2,-20(fp)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 2029574:	00001f06 	br	20295f4 <lwip_socket+0xdc>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback( (protocol == IPPROTO_UDPLITE) ?
 2029578:	e0bfff17 	ldw	r2,-4(fp)
 202957c:	10802218 	cmpnei	r2,r2,136
 2029580:	1000021e 	bne	r2,zero,202958c <lwip_socket+0x74>
 2029584:	00800844 	movi	r2,33
 2029588:	00000106 	br	2029590 <lwip_socket+0x78>
 202958c:	00800804 	movi	r2,32
 2029590:	018080f4 	movhi	r6,515
 2029594:	31a7c104 	addi	r6,r6,-24828
 2029598:	000b883a 	mov	r5,zero
 202959c:	1009883a 	mov	r4,r2
 20295a0:	2038e780 	call	2038e78 <netconn_new_with_proto_and_callback>
 20295a4:	e0bffb15 	stw	r2,-20(fp)
                 NETCONN_UDPLITE : NETCONN_UDP, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 20295a8:	00001206 	br	20295f4 <lwip_socket+0xdc>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(NETCONN_TCP, event_callback);
 20295ac:	018080f4 	movhi	r6,515
 20295b0:	31a7c104 	addi	r6,r6,-24828
 20295b4:	000b883a 	mov	r5,zero
 20295b8:	01000404 	movi	r4,16
 20295bc:	2038e780 	call	2038e78 <netconn_new_with_proto_and_callback>
 20295c0:	e0bffb15 	stw	r2,-20(fp)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    if (conn != NULL) {
 20295c4:	e0bffb17 	ldw	r2,-20(fp)
 20295c8:	10000926 	beq	r2,zero,20295f0 <lwip_socket+0xd8>
      /* Prevent automatic window updates, we do this on our own! */
      netconn_set_noautorecved(conn, 1);
 20295cc:	e0bffb17 	ldw	r2,-20(fp)
 20295d0:	10800903 	ldbu	r2,36(r2)
 20295d4:	10800214 	ori	r2,r2,8
 20295d8:	1007883a 	mov	r3,r2
 20295dc:	e0bffb17 	ldw	r2,-20(fp)
 20295e0:	10c00905 	stb	r3,36(r2)
    }
    break;
 20295e4:	00000206 	br	20295f0 <lwip_socket+0xd8>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
    return -1;
 20295e8:	00bfffc4 	movi	r2,-1
 20295ec:	00001706 	br	202964c <lwip_socket+0x134>
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    if (conn != NULL) {
      /* Prevent automatic window updates, we do this on our own! */
      netconn_set_noautorecved(conn, 1);
    }
    break;
 20295f0:	0001883a 	nop
                                 domain, type, protocol));
    set_errno(EINVAL);
    return -1;
  }

  if (!conn) {
 20295f4:	e0bffb17 	ldw	r2,-20(fp)
 20295f8:	1000021e 	bne	r2,zero,2029604 <lwip_socket+0xec>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
    return -1;
 20295fc:	00bfffc4 	movi	r2,-1
 2029600:	00001206 	br	202964c <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
 2029604:	000b883a 	mov	r5,zero
 2029608:	e13ffb17 	ldw	r4,-20(fp)
 202960c:	20282c00 	call	20282c0 <alloc_socket>
 2029610:	e0bffc15 	stw	r2,-16(fp)

  if (i == -1) {
 2029614:	e0bffc17 	ldw	r2,-16(fp)
 2029618:	10bfffd8 	cmpnei	r2,r2,-1
 202961c:	1000041e 	bne	r2,zero,2029630 <lwip_socket+0x118>
    netconn_delete(conn);
 2029620:	e13ffb17 	ldw	r4,-20(fp)
 2029624:	2038f340 	call	2038f34 <netconn_delete>
    set_errno(ENFILE);
    return -1;
 2029628:	00bfffc4 	movi	r2,-1
 202962c:	00000706 	br	202964c <lwip_socket+0x134>
  }

  i += LWIP_SOCKET_OFFSET;
 2029630:	e0bffc17 	ldw	r2,-16(fp)
 2029634:	10800804 	addi	r2,r2,32
 2029638:	e0bffc15 	stw	r2,-16(fp)

  conn->socket = i;
 202963c:	e0bffb17 	ldw	r2,-20(fp)
 2029640:	e0fffc17 	ldw	r3,-16(fp)
 2029644:	10c00715 	stw	r3,28(r2)
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 2029648:	e0bffc17 	ldw	r2,-16(fp)
}
 202964c:	e037883a 	mov	sp,fp
 2029650:	dfc00117 	ldw	ra,4(sp)
 2029654:	df000017 	ldw	fp,0(sp)
 2029658:	dec00204 	addi	sp,sp,8
 202965c:	f800283a 	ret

02029660 <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
 2029660:	defffb04 	addi	sp,sp,-20
 2029664:	dfc00415 	stw	ra,16(sp)
 2029668:	df000315 	stw	fp,12(sp)
 202966c:	df000304 	addi	fp,sp,12
 2029670:	e13ffd15 	stw	r4,-12(fp)
 2029674:	e17ffe15 	stw	r5,-8(fp)
 2029678:	e1bfff15 	stw	r6,-4(fp)
  return lwip_send(s, data, size, 0);
 202967c:	000f883a 	mov	r7,zero
 2029680:	e1bfff17 	ldw	r6,-4(fp)
 2029684:	e17ffe17 	ldw	r5,-8(fp)
 2029688:	e13ffd17 	ldw	r4,-12(fp)
 202968c:	20291dc0 	call	20291dc <lwip_send>
}
 2029690:	e037883a 	mov	sp,fp
 2029694:	dfc00117 	ldw	ra,4(sp)
 2029698:	df000017 	ldw	fp,0(sp)
 202969c:	dec00204 	addi	sp,sp,8
 20296a0:	f800283a 	ret

020296a4 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 20296a4:	deffe804 	addi	sp,sp,-96
 20296a8:	dfc01715 	stw	ra,92(sp)
 20296ac:	df001615 	stw	fp,88(sp)
 20296b0:	df001604 	addi	fp,sp,88
 20296b4:	e13ffc15 	stw	r4,-16(fp)
 20296b8:	e17ffd15 	stw	r5,-12(fp)
 20296bc:	e1bffe15 	stw	r6,-8(fp)
 20296c0:	e1ffff15 	stw	r7,-4(fp)
  int i, nready = 0;
 20296c4:	e03feb15 	stw	zero,-84(fp)
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 20296c8:	e0bff604 	addi	r2,fp,-40
 20296cc:	e0bfed15 	stw	r2,-76(fp)
 20296d0:	e03fec15 	stw	zero,-80(fp)
 20296d4:	00000706 	br	20296f4 <lwip_selscan+0x50>
 20296d8:	e0bfed17 	ldw	r2,-76(fp)
 20296dc:	10c00044 	addi	r3,r2,1
 20296e0:	e0ffed15 	stw	r3,-76(fp)
 20296e4:	10000005 	stb	zero,0(r2)
 20296e8:	e0bfec17 	ldw	r2,-80(fp)
 20296ec:	10800044 	addi	r2,r2,1
 20296f0:	e0bfec15 	stw	r2,-80(fp)
 20296f4:	e0bfec17 	ldw	r2,-80(fp)
 20296f8:	10800230 	cmpltui	r2,r2,8
 20296fc:	103ff61e 	bne	r2,zero,20296d8 <__alt_mem_mem_0+0xfd0096d8>
  FD_ZERO(&lwriteset);
 2029700:	e0bff804 	addi	r2,fp,-32
 2029704:	e0bfef15 	stw	r2,-68(fp)
 2029708:	e03fee15 	stw	zero,-72(fp)
 202970c:	00000706 	br	202972c <lwip_selscan+0x88>
 2029710:	e0bfef17 	ldw	r2,-68(fp)
 2029714:	10c00044 	addi	r3,r2,1
 2029718:	e0ffef15 	stw	r3,-68(fp)
 202971c:	10000005 	stb	zero,0(r2)
 2029720:	e0bfee17 	ldw	r2,-72(fp)
 2029724:	10800044 	addi	r2,r2,1
 2029728:	e0bfee15 	stw	r2,-72(fp)
 202972c:	e0bfee17 	ldw	r2,-72(fp)
 2029730:	10800230 	cmpltui	r2,r2,8
 2029734:	103ff61e 	bne	r2,zero,2029710 <__alt_mem_mem_0+0xfd009710>
  FD_ZERO(&lexceptset);
 2029738:	e0bffa04 	addi	r2,fp,-24
 202973c:	e0bff115 	stw	r2,-60(fp)
 2029740:	e03ff015 	stw	zero,-64(fp)
 2029744:	00000706 	br	2029764 <lwip_selscan+0xc0>
 2029748:	e0bff117 	ldw	r2,-60(fp)
 202974c:	10c00044 	addi	r3,r2,1
 2029750:	e0fff115 	stw	r3,-60(fp)
 2029754:	10000005 	stb	zero,0(r2)
 2029758:	e0bff017 	ldw	r2,-64(fp)
 202975c:	10800044 	addi	r2,r2,1
 2029760:	e0bff015 	stw	r2,-64(fp)
 2029764:	e0bff017 	ldw	r2,-64(fp)
 2029768:	10800230 	cmpltui	r2,r2,8
 202976c:	103ff61e 	bne	r2,zero,2029748 <__alt_mem_mem_0+0xfd009748>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 2029770:	00800804 	movi	r2,32
 2029774:	e0bfea15 	stw	r2,-88(fp)
 2029778:	00009206 	br	20299c4 <lwip_selscan+0x320>
    void* lastdata = NULL;
 202977c:	e03ff215 	stw	zero,-56(fp)
    s16_t rcvevent = 0;
 2029780:	e03ff30d 	sth	zero,-52(fp)
    u16_t sendevent = 0;
 2029784:	e03ff38d 	sth	zero,-50(fp)
    u16_t errevent = 0;
 2029788:	e03ff40d 	sth	zero,-48(fp)
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 202978c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029790:	10000126 	beq	r2,zero,2029798 <lwip_selscan+0xf4>
 2029794:	2010de80 	call	2010de8 <vTaskEnterCritical>
    sock = tryget_socket(i);
 2029798:	e13fea17 	ldw	r4,-88(fp)
 202979c:	20282400 	call	2028240 <tryget_socket>
 20297a0:	e0bff515 	stw	r2,-44(fp)
    if (sock != NULL) {
 20297a4:	e0bff517 	ldw	r2,-44(fp)
 20297a8:	10000c26 	beq	r2,zero,20297dc <lwip_selscan+0x138>
      lastdata = sock->lastdata;
 20297ac:	e0bff517 	ldw	r2,-44(fp)
 20297b0:	10800117 	ldw	r2,4(r2)
 20297b4:	e0bff215 	stw	r2,-56(fp)
      rcvevent = sock->rcvevent;
 20297b8:	e0bff517 	ldw	r2,-44(fp)
 20297bc:	1080028b 	ldhu	r2,10(r2)
 20297c0:	e0bff30d 	sth	r2,-52(fp)
      sendevent = sock->sendevent;
 20297c4:	e0bff517 	ldw	r2,-44(fp)
 20297c8:	1080030b 	ldhu	r2,12(r2)
 20297cc:	e0bff38d 	sth	r2,-50(fp)
      errevent = sock->errevent;
 20297d0:	e0bff517 	ldw	r2,-44(fp)
 20297d4:	1080038b 	ldhu	r2,14(r2)
 20297d8:	e0bff40d 	sth	r2,-48(fp)
    }
    SYS_ARCH_UNPROTECT(lev);
 20297dc:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20297e0:	10000126 	beq	r2,zero,20297e8 <lwip_selscan+0x144>
 20297e4:	2010e300 	call	2010e30 <vTaskExitCritical>
    /* ... then examine it: */
    /* See if netconn of this socket is ready for read */
    if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 20297e8:	e0bffd17 	ldw	r2,-12(fp)
 20297ec:	10002626 	beq	r2,zero,2029888 <lwip_selscan+0x1e4>
 20297f0:	e0bfea17 	ldw	r2,-88(fp)
 20297f4:	1004d17a 	srli	r2,r2,5
 20297f8:	e0fffd17 	ldw	r3,-12(fp)
 20297fc:	1085883a 	add	r2,r2,r2
 2029800:	1085883a 	add	r2,r2,r2
 2029804:	1885883a 	add	r2,r3,r2
 2029808:	10c00017 	ldw	r3,0(r2)
 202980c:	e0bfea17 	ldw	r2,-88(fp)
 2029810:	108007cc 	andi	r2,r2,31
 2029814:	1885d83a 	sra	r2,r3,r2
 2029818:	1080004c 	andi	r2,r2,1
 202981c:	10001a26 	beq	r2,zero,2029888 <lwip_selscan+0x1e4>
 2029820:	e0bff217 	ldw	r2,-56(fp)
 2029824:	1000021e 	bne	r2,zero,2029830 <lwip_selscan+0x18c>
 2029828:	e0bff30f 	ldh	r2,-52(fp)
 202982c:	0080160e 	bge	zero,r2,2029888 <lwip_selscan+0x1e4>
      FD_SET(i, &lreadset);
 2029830:	e0bfea17 	ldw	r2,-88(fp)
 2029834:	1004d17a 	srli	r2,r2,5
 2029838:	1087883a 	add	r3,r2,r2
 202983c:	18c7883a 	add	r3,r3,r3
 2029840:	e13fea04 	addi	r4,fp,-88
 2029844:	20c7883a 	add	r3,r4,r3
 2029848:	18c00c04 	addi	r3,r3,48
 202984c:	19000017 	ldw	r4,0(r3)
 2029850:	e0ffea17 	ldw	r3,-88(fp)
 2029854:	18c007cc 	andi	r3,r3,31
 2029858:	01400044 	movi	r5,1
 202985c:	28c6983a 	sll	r3,r5,r3
 2029860:	20c6b03a 	or	r3,r4,r3
 2029864:	1085883a 	add	r2,r2,r2
 2029868:	1085883a 	add	r2,r2,r2
 202986c:	e13fea04 	addi	r4,fp,-88
 2029870:	2085883a 	add	r2,r4,r2
 2029874:	10800c04 	addi	r2,r2,48
 2029878:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
      nready++;
 202987c:	e0bfeb17 	ldw	r2,-84(fp)
 2029880:	10800044 	addi	r2,r2,1
 2029884:	e0bfeb15 	stw	r2,-84(fp)
    }
    /* See if netconn of this socket is ready for write */
    if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 2029888:	e0bffe17 	ldw	r2,-8(fp)
 202988c:	10002426 	beq	r2,zero,2029920 <lwip_selscan+0x27c>
 2029890:	e0bfea17 	ldw	r2,-88(fp)
 2029894:	1004d17a 	srli	r2,r2,5
 2029898:	e0fffe17 	ldw	r3,-8(fp)
 202989c:	1085883a 	add	r2,r2,r2
 20298a0:	1085883a 	add	r2,r2,r2
 20298a4:	1885883a 	add	r2,r3,r2
 20298a8:	10c00017 	ldw	r3,0(r2)
 20298ac:	e0bfea17 	ldw	r2,-88(fp)
 20298b0:	108007cc 	andi	r2,r2,31
 20298b4:	1885d83a 	sra	r2,r3,r2
 20298b8:	1080004c 	andi	r2,r2,1
 20298bc:	10001826 	beq	r2,zero,2029920 <lwip_selscan+0x27c>
 20298c0:	e0bff38b 	ldhu	r2,-50(fp)
 20298c4:	10001626 	beq	r2,zero,2029920 <lwip_selscan+0x27c>
      FD_SET(i, &lwriteset);
 20298c8:	e0bfea17 	ldw	r2,-88(fp)
 20298cc:	1004d17a 	srli	r2,r2,5
 20298d0:	1087883a 	add	r3,r2,r2
 20298d4:	18c7883a 	add	r3,r3,r3
 20298d8:	e13fea04 	addi	r4,fp,-88
 20298dc:	20c7883a 	add	r3,r4,r3
 20298e0:	18c00e04 	addi	r3,r3,56
 20298e4:	19000017 	ldw	r4,0(r3)
 20298e8:	e0ffea17 	ldw	r3,-88(fp)
 20298ec:	18c007cc 	andi	r3,r3,31
 20298f0:	01400044 	movi	r5,1
 20298f4:	28c6983a 	sll	r3,r5,r3
 20298f8:	20c6b03a 	or	r3,r4,r3
 20298fc:	1085883a 	add	r2,r2,r2
 2029900:	1085883a 	add	r2,r2,r2
 2029904:	e13fea04 	addi	r4,fp,-88
 2029908:	2085883a 	add	r2,r4,r2
 202990c:	10800e04 	addi	r2,r2,56
 2029910:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
      nready++;
 2029914:	e0bfeb17 	ldw	r2,-84(fp)
 2029918:	10800044 	addi	r2,r2,1
 202991c:	e0bfeb15 	stw	r2,-84(fp)
    }
    /* See if netconn of this socket had an error */
    if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 2029920:	e0bfff17 	ldw	r2,-4(fp)
 2029924:	10002426 	beq	r2,zero,20299b8 <lwip_selscan+0x314>
 2029928:	e0bfea17 	ldw	r2,-88(fp)
 202992c:	1004d17a 	srli	r2,r2,5
 2029930:	e0ffff17 	ldw	r3,-4(fp)
 2029934:	1085883a 	add	r2,r2,r2
 2029938:	1085883a 	add	r2,r2,r2
 202993c:	1885883a 	add	r2,r3,r2
 2029940:	10c00017 	ldw	r3,0(r2)
 2029944:	e0bfea17 	ldw	r2,-88(fp)
 2029948:	108007cc 	andi	r2,r2,31
 202994c:	1885d83a 	sra	r2,r3,r2
 2029950:	1080004c 	andi	r2,r2,1
 2029954:	10001826 	beq	r2,zero,20299b8 <lwip_selscan+0x314>
 2029958:	e0bff40b 	ldhu	r2,-48(fp)
 202995c:	10001626 	beq	r2,zero,20299b8 <lwip_selscan+0x314>
      FD_SET(i, &lexceptset);
 2029960:	e0bfea17 	ldw	r2,-88(fp)
 2029964:	1004d17a 	srli	r2,r2,5
 2029968:	1087883a 	add	r3,r2,r2
 202996c:	18c7883a 	add	r3,r3,r3
 2029970:	e13fea04 	addi	r4,fp,-88
 2029974:	20c7883a 	add	r3,r4,r3
 2029978:	18c01004 	addi	r3,r3,64
 202997c:	19000017 	ldw	r4,0(r3)
 2029980:	e0ffea17 	ldw	r3,-88(fp)
 2029984:	18c007cc 	andi	r3,r3,31
 2029988:	01400044 	movi	r5,1
 202998c:	28c6983a 	sll	r3,r5,r3
 2029990:	20c6b03a 	or	r3,r4,r3
 2029994:	1085883a 	add	r2,r2,r2
 2029998:	1085883a 	add	r2,r2,r2
 202999c:	e13fea04 	addi	r4,fp,-88
 20299a0:	2085883a 	add	r2,r4,r2
 20299a4:	10801004 	addi	r2,r2,64
 20299a8:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
      nready++;
 20299ac:	e0bfeb17 	ldw	r2,-84(fp)
 20299b0:	10800044 	addi	r2,r2,1
 20299b4:	e0bfeb15 	stw	r2,-84(fp)
  FD_ZERO(&lwriteset);
  FD_ZERO(&lexceptset);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 20299b8:	e0bfea17 	ldw	r2,-88(fp)
 20299bc:	10800044 	addi	r2,r2,1
 20299c0:	e0bfea15 	stw	r2,-88(fp)
 20299c4:	e0ffea17 	ldw	r3,-88(fp)
 20299c8:	e0bffc17 	ldw	r2,-16(fp)
 20299cc:	18bf6b16 	blt	r3,r2,202977c <__alt_mem_mem_0+0xfd00977c>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
      nready++;
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 20299d0:	e0800217 	ldw	r2,8(fp)
 20299d4:	e0fff617 	ldw	r3,-40(fp)
 20299d8:	10c00015 	stw	r3,0(r2)
 20299dc:	e0fff717 	ldw	r3,-36(fp)
 20299e0:	10c00115 	stw	r3,4(r2)
  *writeset_out = lwriteset;
 20299e4:	e0800317 	ldw	r2,12(fp)
 20299e8:	e0fff817 	ldw	r3,-32(fp)
 20299ec:	10c00015 	stw	r3,0(r2)
 20299f0:	e0fff917 	ldw	r3,-28(fp)
 20299f4:	10c00115 	stw	r3,4(r2)
  *exceptset_out = lexceptset;
 20299f8:	e0800417 	ldw	r2,16(fp)
 20299fc:	e0fffa17 	ldw	r3,-24(fp)
 2029a00:	10c00015 	stw	r3,0(r2)
 2029a04:	e0fffb17 	ldw	r3,-20(fp)
 2029a08:	10c00115 	stw	r3,4(r2)

  LWIP_ASSERT("nready >= 0", nready >= 0);
  return nready;
 2029a0c:	e0bfeb17 	ldw	r2,-84(fp)
}
 2029a10:	e037883a 	mov	sp,fp
 2029a14:	dfc00117 	ldw	ra,4(sp)
 2029a18:	df000017 	ldw	fp,0(sp)
 2029a1c:	dec00204 	addi	sp,sp,8
 2029a20:	f800283a 	ret

02029a24 <lwip_select>:
 * Processing exceptset is not yet implemented.
 */
int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 2029a24:	deffe204 	addi	sp,sp,-120
 2029a28:	dfc01d15 	stw	ra,116(sp)
 2029a2c:	df001c15 	stw	fp,112(sp)
 2029a30:	dc001b15 	stw	r16,108(sp)
 2029a34:	df001c04 	addi	fp,sp,112
 2029a38:	e13ffb15 	stw	r4,-20(fp)
 2029a3c:	e17ffc15 	stw	r5,-16(fp)
 2029a40:	e1bffd15 	stw	r6,-12(fp)
 2029a44:	e1fffe15 	stw	r7,-8(fp)
  u32_t waitres = 0;
 2029a48:	e03fe715 	stw	zero,-100(fp)
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 2029a4c:	e0bff204 	addi	r2,fp,-56
 2029a50:	d8800215 	stw	r2,8(sp)
 2029a54:	e0bff004 	addi	r2,fp,-64
 2029a58:	d8800115 	stw	r2,4(sp)
 2029a5c:	e0bfee04 	addi	r2,fp,-72
 2029a60:	d8800015 	stw	r2,0(sp)
 2029a64:	e1fffe17 	ldw	r7,-8(fp)
 2029a68:	e1bffd17 	ldw	r6,-12(fp)
 2029a6c:	e17ffc17 	ldw	r5,-16(fp)
 2029a70:	e13ffb17 	ldw	r4,-20(fp)
 2029a74:	20296a40 	call	20296a4 <lwip_selscan>
 2029a78:	e0bfe815 	stw	r2,-96(fp)

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
 2029a7c:	e0bfe817 	ldw	r2,-96(fp)
 2029a80:	1001041e 	bne	r2,zero,2029e94 <lwip_select+0x470>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 2029a84:	e0800217 	ldw	r2,8(fp)
 2029a88:	10000626 	beq	r2,zero,2029aa4 <lwip_select+0x80>
 2029a8c:	e0800217 	ldw	r2,8(fp)
 2029a90:	10800017 	ldw	r2,0(r2)
 2029a94:	1000031e 	bne	r2,zero,2029aa4 <lwip_select+0x80>
 2029a98:	e0800217 	ldw	r2,8(fp)
 2029a9c:	10800117 	ldw	r2,4(r2)
 2029aa0:	1000f926 	beq	r2,zero,2029e88 <lwip_select+0x464>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
 2029aa4:	e03ff415 	stw	zero,-48(fp)
    select_cb.prev = NULL;
 2029aa8:	e03ff515 	stw	zero,-44(fp)
    select_cb.readset = readset;
 2029aac:	e0bffc17 	ldw	r2,-16(fp)
 2029ab0:	e0bff615 	stw	r2,-40(fp)
    select_cb.writeset = writeset;
 2029ab4:	e0bffd17 	ldw	r2,-12(fp)
 2029ab8:	e0bff715 	stw	r2,-36(fp)
    select_cb.exceptset = exceptset;
 2029abc:	e0bffe17 	ldw	r2,-8(fp)
 2029ac0:	e0bff815 	stw	r2,-32(fp)
    select_cb.sem_signalled = 0;
 2029ac4:	e03ff915 	stw	zero,-28(fp)
    err = sys_sem_new(&select_cb.sem, 0);
 2029ac8:	e0bff404 	addi	r2,fp,-48
 2029acc:	10800604 	addi	r2,r2,24
 2029ad0:	000b883a 	mov	r5,zero
 2029ad4:	1009883a 	mov	r4,r2
 2029ad8:	2014cb40 	call	2014cb4 <sys_sem_new>
 2029adc:	e0bfeb05 	stb	r2,-84(fp)
    if (err != ERR_OK) {
 2029ae0:	e0bfeb07 	ldb	r2,-84(fp)
 2029ae4:	10000226 	beq	r2,zero,2029af0 <lwip_select+0xcc>
      /* failed to create semaphore */
      set_errno(ENOMEM);
      return -1;
 2029ae8:	00bfffc4 	movi	r2,-1
 2029aec:	0000ff06 	br	2029eec <lwip_select+0x4c8>
    }

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
 2029af0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029af4:	10000126 	beq	r2,zero,2029afc <lwip_select+0xd8>
 2029af8:	2010de80 	call	2010de8 <vTaskEnterCritical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
 2029afc:	d0a80b17 	ldw	r2,-24532(gp)
 2029b00:	e0bff415 	stw	r2,-48(fp)
    if (select_cb_list != NULL) {
 2029b04:	d0a80b17 	ldw	r2,-24532(gp)
 2029b08:	10000326 	beq	r2,zero,2029b18 <lwip_select+0xf4>
      select_cb_list->prev = &select_cb;
 2029b0c:	d0a80b17 	ldw	r2,-24532(gp)
 2029b10:	e0fff404 	addi	r3,fp,-48
 2029b14:	10c00115 	stw	r3,4(r2)
    }
    select_cb_list = &select_cb;
 2029b18:	e0bff404 	addi	r2,fp,-48
 2029b1c:	d0a80b15 	stw	r2,-24532(gp)
    /* Increasing this counter tells even_callback that the list has changed. */
    select_cb_ctr++;
 2029b20:	d0a80c17 	ldw	r2,-24528(gp)
 2029b24:	10800044 	addi	r2,r2,1
 2029b28:	d0a80c15 	stw	r2,-24528(gp)

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
 2029b2c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029b30:	10000126 	beq	r2,zero,2029b38 <lwip_select+0x114>
 2029b34:	2010e300 	call	2010e30 <vTaskExitCritical>

    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 2029b38:	00800804 	movi	r2,32
 2029b3c:	e0bfea15 	stw	r2,-88(fp)
 2029b40:	00003b06 	br	2029c30 <lwip_select+0x20c>
      if ((readset && FD_ISSET(i, readset)) ||
 2029b44:	e0bffc17 	ldw	r2,-16(fp)
 2029b48:	10000c26 	beq	r2,zero,2029b7c <lwip_select+0x158>
 2029b4c:	e0bfea17 	ldw	r2,-88(fp)
 2029b50:	1004d17a 	srli	r2,r2,5
 2029b54:	e0fffc17 	ldw	r3,-16(fp)
 2029b58:	1085883a 	add	r2,r2,r2
 2029b5c:	1085883a 	add	r2,r2,r2
 2029b60:	1885883a 	add	r2,r3,r2
 2029b64:	10c00017 	ldw	r3,0(r2)
 2029b68:	e0bfea17 	ldw	r2,-88(fp)
 2029b6c:	108007cc 	andi	r2,r2,31
 2029b70:	1885d83a 	sra	r2,r3,r2
 2029b74:	1080004c 	andi	r2,r2,1
 2029b78:	10001c1e 	bne	r2,zero,2029bec <lwip_select+0x1c8>
 2029b7c:	e0bffd17 	ldw	r2,-12(fp)
 2029b80:	10000c26 	beq	r2,zero,2029bb4 <lwip_select+0x190>
          (writeset && FD_ISSET(i, writeset)) ||
 2029b84:	e0bfea17 	ldw	r2,-88(fp)
 2029b88:	1004d17a 	srli	r2,r2,5
 2029b8c:	e0fffd17 	ldw	r3,-12(fp)
 2029b90:	1085883a 	add	r2,r2,r2
 2029b94:	1085883a 	add	r2,r2,r2
 2029b98:	1885883a 	add	r2,r3,r2
 2029b9c:	10c00017 	ldw	r3,0(r2)
 2029ba0:	e0bfea17 	ldw	r2,-88(fp)
 2029ba4:	108007cc 	andi	r2,r2,31
 2029ba8:	1885d83a 	sra	r2,r3,r2
 2029bac:	1080004c 	andi	r2,r2,1
 2029bb0:	10000e1e 	bne	r2,zero,2029bec <lwip_select+0x1c8>
 2029bb4:	e0bffe17 	ldw	r2,-8(fp)
 2029bb8:	10001a26 	beq	r2,zero,2029c24 <lwip_select+0x200>
          (exceptset && FD_ISSET(i, exceptset))) {
 2029bbc:	e0bfea17 	ldw	r2,-88(fp)
 2029bc0:	1004d17a 	srli	r2,r2,5
 2029bc4:	e0fffe17 	ldw	r3,-8(fp)
 2029bc8:	1085883a 	add	r2,r2,r2
 2029bcc:	1085883a 	add	r2,r2,r2
 2029bd0:	1885883a 	add	r2,r3,r2
 2029bd4:	10c00017 	ldw	r3,0(r2)
 2029bd8:	e0bfea17 	ldw	r2,-88(fp)
 2029bdc:	108007cc 	andi	r2,r2,31
 2029be0:	1885d83a 	sra	r2,r3,r2
 2029be4:	1080004c 	andi	r2,r2,1
 2029be8:	10000e26 	beq	r2,zero,2029c24 <lwip_select+0x200>
        struct lwip_sock *sock = tryget_socket(i);
 2029bec:	e13fea17 	ldw	r4,-88(fp)
 2029bf0:	20282400 	call	2028240 <tryget_socket>
 2029bf4:	e0bfec15 	stw	r2,-80(fp)
        LWIP_ASSERT("sock != NULL", sock != NULL);
        SYS_ARCH_PROTECT(lev);
 2029bf8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029bfc:	10000126 	beq	r2,zero,2029c04 <lwip_select+0x1e0>
 2029c00:	2010de80 	call	2010de8 <vTaskEnterCritical>
        sock->select_waiting++;
 2029c04:	e0bfec17 	ldw	r2,-80(fp)
 2029c08:	10800517 	ldw	r2,20(r2)
 2029c0c:	10c00044 	addi	r3,r2,1
 2029c10:	e0bfec17 	ldw	r2,-80(fp)
 2029c14:	10c00515 	stw	r3,20(r2)
        LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
        SYS_ARCH_UNPROTECT(lev);
 2029c18:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029c1c:	10000126 	beq	r2,zero,2029c24 <lwip_select+0x200>
 2029c20:	2010e300 	call	2010e30 <vTaskExitCritical>

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);

    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 2029c24:	e0bfea17 	ldw	r2,-88(fp)
 2029c28:	10800044 	addi	r2,r2,1
 2029c2c:	e0bfea15 	stw	r2,-88(fp)
 2029c30:	e0ffea17 	ldw	r3,-88(fp)
 2029c34:	e0bffb17 	ldw	r2,-20(fp)
 2029c38:	18bfc216 	blt	r3,r2,2029b44 <__alt_mem_mem_0+0xfd009b44>
      }
    }

    /* Call lwip_selscan again: there could have been events between
       the last scan (whithout us on the list) and putting us on the list! */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 2029c3c:	e0bff204 	addi	r2,fp,-56
 2029c40:	d8800215 	stw	r2,8(sp)
 2029c44:	e0bff004 	addi	r2,fp,-64
 2029c48:	d8800115 	stw	r2,4(sp)
 2029c4c:	e0bfee04 	addi	r2,fp,-72
 2029c50:	d8800015 	stw	r2,0(sp)
 2029c54:	e1fffe17 	ldw	r7,-8(fp)
 2029c58:	e1bffd17 	ldw	r6,-12(fp)
 2029c5c:	e17ffc17 	ldw	r5,-16(fp)
 2029c60:	e13ffb17 	ldw	r4,-20(fp)
 2029c64:	20296a40 	call	20296a4 <lwip_selscan>
 2029c68:	e0bfe815 	stw	r2,-96(fp)
    if (!nready) {
 2029c6c:	e0bfe817 	ldw	r2,-96(fp)
 2029c70:	1000191e 	bne	r2,zero,2029cd8 <lwip_select+0x2b4>
      /* Still none ready, just wait to be woken */
      if (timeout == 0) {
 2029c74:	e0800217 	ldw	r2,8(fp)
 2029c78:	1000021e 	bne	r2,zero,2029c84 <lwip_select+0x260>
        /* Wait forever */
        msectimeout = 0;
 2029c7c:	e03fe915 	stw	zero,-92(fp)
 2029c80:	00000f06 	br	2029cc0 <lwip_select+0x29c>
      } else {
        msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
 2029c84:	e0800217 	ldw	r2,8(fp)
 2029c88:	10800017 	ldw	r2,0(r2)
 2029c8c:	1400fa24 	muli	r16,r2,1000
 2029c90:	e0800217 	ldw	r2,8(fp)
 2029c94:	10800117 	ldw	r2,4(r2)
 2029c98:	10807d04 	addi	r2,r2,500
 2029c9c:	0140fa04 	movi	r5,1000
 2029ca0:	1009883a 	mov	r4,r2
 2029ca4:	200a9e40 	call	200a9e4 <__divsi3>
 2029ca8:	8085883a 	add	r2,r16,r2
 2029cac:	e0bfe915 	stw	r2,-92(fp)
        if (msectimeout == 0) {
 2029cb0:	e0bfe917 	ldw	r2,-92(fp)
 2029cb4:	1000021e 	bne	r2,zero,2029cc0 <lwip_select+0x29c>
          /* Wait 1ms at least (0 means wait forever) */
          msectimeout = 1;
 2029cb8:	00800044 	movi	r2,1
 2029cbc:	e0bfe915 	stw	r2,-92(fp)
        }
      }

      waitres = sys_arch_sem_wait(&select_cb.sem, msectimeout);
 2029cc0:	e0bff404 	addi	r2,fp,-48
 2029cc4:	10800604 	addi	r2,r2,24
 2029cc8:	e17fe917 	ldw	r5,-92(fp)
 2029ccc:	1009883a 	mov	r4,r2
 2029cd0:	2014e380 	call	2014e38 <sys_arch_sem_wait>
 2029cd4:	e0bfe715 	stw	r2,-100(fp)
    }
    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 2029cd8:	00800804 	movi	r2,32
 2029cdc:	e0bfea15 	stw	r2,-88(fp)
 2029ce0:	00003b06 	br	2029dd0 <lwip_select+0x3ac>
      if ((readset && FD_ISSET(i, readset)) ||
 2029ce4:	e0bffc17 	ldw	r2,-16(fp)
 2029ce8:	10000c26 	beq	r2,zero,2029d1c <lwip_select+0x2f8>
 2029cec:	e0bfea17 	ldw	r2,-88(fp)
 2029cf0:	1004d17a 	srli	r2,r2,5
 2029cf4:	e0fffc17 	ldw	r3,-16(fp)
 2029cf8:	1085883a 	add	r2,r2,r2
 2029cfc:	1085883a 	add	r2,r2,r2
 2029d00:	1885883a 	add	r2,r3,r2
 2029d04:	10c00017 	ldw	r3,0(r2)
 2029d08:	e0bfea17 	ldw	r2,-88(fp)
 2029d0c:	108007cc 	andi	r2,r2,31
 2029d10:	1885d83a 	sra	r2,r3,r2
 2029d14:	1080004c 	andi	r2,r2,1
 2029d18:	10001c1e 	bne	r2,zero,2029d8c <lwip_select+0x368>
 2029d1c:	e0bffd17 	ldw	r2,-12(fp)
 2029d20:	10000c26 	beq	r2,zero,2029d54 <lwip_select+0x330>
          (writeset && FD_ISSET(i, writeset)) ||
 2029d24:	e0bfea17 	ldw	r2,-88(fp)
 2029d28:	1004d17a 	srli	r2,r2,5
 2029d2c:	e0fffd17 	ldw	r3,-12(fp)
 2029d30:	1085883a 	add	r2,r2,r2
 2029d34:	1085883a 	add	r2,r2,r2
 2029d38:	1885883a 	add	r2,r3,r2
 2029d3c:	10c00017 	ldw	r3,0(r2)
 2029d40:	e0bfea17 	ldw	r2,-88(fp)
 2029d44:	108007cc 	andi	r2,r2,31
 2029d48:	1885d83a 	sra	r2,r3,r2
 2029d4c:	1080004c 	andi	r2,r2,1
 2029d50:	10000e1e 	bne	r2,zero,2029d8c <lwip_select+0x368>
 2029d54:	e0bffe17 	ldw	r2,-8(fp)
 2029d58:	10001a26 	beq	r2,zero,2029dc4 <lwip_select+0x3a0>
          (exceptset && FD_ISSET(i, exceptset))) {
 2029d5c:	e0bfea17 	ldw	r2,-88(fp)
 2029d60:	1004d17a 	srli	r2,r2,5
 2029d64:	e0fffe17 	ldw	r3,-8(fp)
 2029d68:	1085883a 	add	r2,r2,r2
 2029d6c:	1085883a 	add	r2,r2,r2
 2029d70:	1885883a 	add	r2,r3,r2
 2029d74:	10c00017 	ldw	r3,0(r2)
 2029d78:	e0bfea17 	ldw	r2,-88(fp)
 2029d7c:	108007cc 	andi	r2,r2,31
 2029d80:	1885d83a 	sra	r2,r3,r2
 2029d84:	1080004c 	andi	r2,r2,1
 2029d88:	10000e26 	beq	r2,zero,2029dc4 <lwip_select+0x3a0>
        struct lwip_sock *sock = tryget_socket(i);
 2029d8c:	e13fea17 	ldw	r4,-88(fp)
 2029d90:	20282400 	call	2028240 <tryget_socket>
 2029d94:	e0bfed15 	stw	r2,-76(fp)
        LWIP_ASSERT("sock != NULL", sock != NULL);
        SYS_ARCH_PROTECT(lev);
 2029d98:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029d9c:	10000126 	beq	r2,zero,2029da4 <lwip_select+0x380>
 2029da0:	2010de80 	call	2010de8 <vTaskEnterCritical>
        sock->select_waiting--;
 2029da4:	e0bfed17 	ldw	r2,-76(fp)
 2029da8:	10800517 	ldw	r2,20(r2)
 2029dac:	10ffffc4 	addi	r3,r2,-1
 2029db0:	e0bfed17 	ldw	r2,-76(fp)
 2029db4:	10c00515 	stw	r3,20(r2)
        LWIP_ASSERT("sock->select_waiting >= 0", sock->select_waiting >= 0);
        SYS_ARCH_UNPROTECT(lev);
 2029db8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029dbc:	10000126 	beq	r2,zero,2029dc4 <lwip_select+0x3a0>
 2029dc0:	2010e300 	call	2010e30 <vTaskExitCritical>
      }

      waitres = sys_arch_sem_wait(&select_cb.sem, msectimeout);
    }
    /* Increase select_waiting for each socket we are interested in */
    for(i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 2029dc4:	e0bfea17 	ldw	r2,-88(fp)
 2029dc8:	10800044 	addi	r2,r2,1
 2029dcc:	e0bfea15 	stw	r2,-88(fp)
 2029dd0:	e0ffea17 	ldw	r3,-88(fp)
 2029dd4:	e0bffb17 	ldw	r2,-20(fp)
 2029dd8:	18bfc216 	blt	r3,r2,2029ce4 <__alt_mem_mem_0+0xfd009ce4>
        LWIP_ASSERT("sock->select_waiting >= 0", sock->select_waiting >= 0);
        SYS_ARCH_UNPROTECT(lev);
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
 2029ddc:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029de0:	10000126 	beq	r2,zero,2029de8 <lwip_select+0x3c4>
 2029de4:	2010de80 	call	2010de8 <vTaskEnterCritical>
    if (select_cb.next != NULL) {
 2029de8:	e0bff417 	ldw	r2,-48(fp)
 2029dec:	10000326 	beq	r2,zero,2029dfc <lwip_select+0x3d8>
      select_cb.next->prev = select_cb.prev;
 2029df0:	e0bff417 	ldw	r2,-48(fp)
 2029df4:	e0fff517 	ldw	r3,-44(fp)
 2029df8:	10c00115 	stw	r3,4(r2)
    }
    if (select_cb_list == &select_cb) {
 2029dfc:	d0e80b17 	ldw	r3,-24532(gp)
 2029e00:	e0bff404 	addi	r2,fp,-48
 2029e04:	1880031e 	bne	r3,r2,2029e14 <lwip_select+0x3f0>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
      select_cb_list = select_cb.next;
 2029e08:	e0bff417 	ldw	r2,-48(fp)
 2029e0c:	d0a80b15 	stw	r2,-24532(gp)
 2029e10:	00000306 	br	2029e20 <lwip_select+0x3fc>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
      select_cb.prev->next = select_cb.next;
 2029e14:	e0bff517 	ldw	r2,-44(fp)
 2029e18:	e0fff417 	ldw	r3,-48(fp)
 2029e1c:	10c00015 	stw	r3,0(r2)
    }
    /* Increasing this counter tells even_callback that the list has changed. */
    select_cb_ctr++;
 2029e20:	d0a80c17 	ldw	r2,-24528(gp)
 2029e24:	10800044 	addi	r2,r2,1
 2029e28:	d0a80c15 	stw	r2,-24528(gp)
    SYS_ARCH_UNPROTECT(lev);
 2029e2c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029e30:	10000126 	beq	r2,zero,2029e38 <lwip_select+0x414>
 2029e34:	2010e300 	call	2010e30 <vTaskExitCritical>

    sys_sem_free(&select_cb.sem);
 2029e38:	e0bff404 	addi	r2,fp,-48
 2029e3c:	10800604 	addi	r2,r2,24
 2029e40:	1009883a 	mov	r4,r2
 2029e44:	2014d980 	call	2014d98 <sys_sem_free>
    if (waitres == SYS_ARCH_TIMEOUT)  {
 2029e48:	e0bfe717 	ldw	r2,-100(fp)
 2029e4c:	10bfffd8 	cmpnei	r2,r2,-1
 2029e50:	10000f26 	beq	r2,zero,2029e90 <lwip_select+0x46c>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 2029e54:	e0bff204 	addi	r2,fp,-56
 2029e58:	d8800215 	stw	r2,8(sp)
 2029e5c:	e0bff004 	addi	r2,fp,-64
 2029e60:	d8800115 	stw	r2,4(sp)
 2029e64:	e0bfee04 	addi	r2,fp,-72
 2029e68:	d8800015 	stw	r2,0(sp)
 2029e6c:	e1fffe17 	ldw	r7,-8(fp)
 2029e70:	e1bffd17 	ldw	r6,-12(fp)
 2029e74:	e17ffc17 	ldw	r5,-16(fp)
 2029e78:	e13ffb17 	ldw	r4,-20(fp)
 2029e7c:	20296a40 	call	20296a4 <lwip_selscan>
 2029e80:	e0bfe815 	stw	r2,-96(fp)
 2029e84:	00000306 	br	2029e94 <lwip_select+0x470>
  if (!nready) {
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: no timeout, returning 0\n"));
      /* This is OK as the local fdsets are empty and nready is zero,
         or we would have returned earlier. */
      goto return_copy_fdsets;
 2029e88:	0001883a 	nop
 2029e8c:	00000106 	br	2029e94 <lwip_select+0x470>
    if (waitres == SYS_ARCH_TIMEOUT)  {
      /* Timeout */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
      /* This is OK as the local fdsets are empty and nready is zero,
         or we would have returned earlier. */
      goto return_copy_fdsets;
 2029e90:	0001883a 	nop
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  set_errno(0);
  if (readset) {
 2029e94:	e0bffc17 	ldw	r2,-16(fp)
 2029e98:	10000526 	beq	r2,zero,2029eb0 <lwip_select+0x48c>
    *readset = lreadset;
 2029e9c:	e0bffc17 	ldw	r2,-16(fp)
 2029ea0:	e0ffee17 	ldw	r3,-72(fp)
 2029ea4:	10c00015 	stw	r3,0(r2)
 2029ea8:	e0ffef17 	ldw	r3,-68(fp)
 2029eac:	10c00115 	stw	r3,4(r2)
  }
  if (writeset) {
 2029eb0:	e0bffd17 	ldw	r2,-12(fp)
 2029eb4:	10000526 	beq	r2,zero,2029ecc <lwip_select+0x4a8>
    *writeset = lwriteset;
 2029eb8:	e0bffd17 	ldw	r2,-12(fp)
 2029ebc:	e0fff017 	ldw	r3,-64(fp)
 2029ec0:	10c00015 	stw	r3,0(r2)
 2029ec4:	e0fff117 	ldw	r3,-60(fp)
 2029ec8:	10c00115 	stw	r3,4(r2)
  }
  if (exceptset) {
 2029ecc:	e0bffe17 	ldw	r2,-8(fp)
 2029ed0:	10000526 	beq	r2,zero,2029ee8 <lwip_select+0x4c4>
    *exceptset = lexceptset;
 2029ed4:	e0bffe17 	ldw	r2,-8(fp)
 2029ed8:	e0fff217 	ldw	r3,-56(fp)
 2029edc:	10c00015 	stw	r3,0(r2)
 2029ee0:	e0fff317 	ldw	r3,-52(fp)
 2029ee4:	10c00115 	stw	r3,4(r2)
  }


  return nready;
 2029ee8:	e0bfe817 	ldw	r2,-96(fp)
}
 2029eec:	e6ffff04 	addi	sp,fp,-4
 2029ef0:	dfc00217 	ldw	ra,8(sp)
 2029ef4:	df000117 	ldw	fp,4(sp)
 2029ef8:	dc000017 	ldw	r16,0(sp)
 2029efc:	dec00304 	addi	sp,sp,12
 2029f00:	f800283a 	ret

02029f04 <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 2029f04:	defff604 	addi	sp,sp,-40
 2029f08:	dfc00915 	stw	ra,36(sp)
 2029f0c:	df000815 	stw	fp,32(sp)
 2029f10:	df000804 	addi	fp,sp,32
 2029f14:	e13ffd15 	stw	r4,-12(fp)
 2029f18:	e17ffe15 	stw	r5,-8(fp)
 2029f1c:	3005883a 	mov	r2,r6
 2029f20:	e0bfff0d 	sth	r2,-4(fp)
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 2029f24:	e0bffd17 	ldw	r2,-12(fp)
 2029f28:	1000d526 	beq	r2,zero,202a280 <event_callback+0x37c>
    s = conn->socket;
 2029f2c:	e0bffd17 	ldw	r2,-12(fp)
 2029f30:	10800717 	ldw	r2,28(r2)
 2029f34:	e0bff815 	stw	r2,-32(fp)
    if (s < 0) {
 2029f38:	e0bff817 	ldw	r2,-32(fp)
 2029f3c:	1000170e 	bge	r2,zero,2029f9c <event_callback+0x98>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 2029f40:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029f44:	10000126 	beq	r2,zero,2029f4c <event_callback+0x48>
 2029f48:	2010de80 	call	2010de8 <vTaskEnterCritical>
      if (conn->socket < 0) {
 2029f4c:	e0bffd17 	ldw	r2,-12(fp)
 2029f50:	10800717 	ldw	r2,28(r2)
 2029f54:	10000b0e 	bge	r2,zero,2029f84 <event_callback+0x80>
        if (evt == NETCONN_EVT_RCVPLUS) {
 2029f58:	e0bffe17 	ldw	r2,-8(fp)
 2029f5c:	1000051e 	bne	r2,zero,2029f74 <event_callback+0x70>
          conn->socket--;
 2029f60:	e0bffd17 	ldw	r2,-12(fp)
 2029f64:	10800717 	ldw	r2,28(r2)
 2029f68:	10ffffc4 	addi	r3,r2,-1
 2029f6c:	e0bffd17 	ldw	r2,-12(fp)
 2029f70:	10c00715 	stw	r3,28(r2)
        }
        SYS_ARCH_UNPROTECT(lev);
 2029f74:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029f78:	1000c326 	beq	r2,zero,202a288 <event_callback+0x384>
 2029f7c:	2010e300 	call	2010e30 <vTaskExitCritical>
        return;
 2029f80:	0000c106 	br	202a288 <event_callback+0x384>
      }
      s = conn->socket;
 2029f84:	e0bffd17 	ldw	r2,-12(fp)
 2029f88:	10800717 	ldw	r2,28(r2)
 2029f8c:	e0bff815 	stw	r2,-32(fp)
      SYS_ARCH_UNPROTECT(lev);
 2029f90:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029f94:	10000126 	beq	r2,zero,2029f9c <event_callback+0x98>
 2029f98:	2010e300 	call	2010e30 <vTaskExitCritical>
    }

    sock = get_socket(s);
 2029f9c:	e13ff817 	ldw	r4,-32(fp)
 2029fa0:	20281c80 	call	20281c8 <get_socket>
 2029fa4:	e0bffb15 	stw	r2,-20(fp)
    if (!sock) {
 2029fa8:	e0bffb17 	ldw	r2,-20(fp)
 2029fac:	1000b826 	beq	r2,zero,202a290 <event_callback+0x38c>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 2029fb0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2029fb4:	10000126 	beq	r2,zero,2029fbc <event_callback+0xb8>
 2029fb8:	2010de80 	call	2010de8 <vTaskEnterCritical>
  /* Set event as required */
  switch (evt) {
 2029fbc:	e0bffe17 	ldw	r2,-8(fp)
 2029fc0:	10800168 	cmpgeui	r2,r2,5
 2029fc4:	1000251e 	bne	r2,zero,202a05c <event_callback+0x158>
 2029fc8:	e0bffe17 	ldw	r2,-8(fp)
 2029fcc:	100690ba 	slli	r3,r2,2
 2029fd0:	008080f4 	movhi	r2,515
 2029fd4:	10a7f904 	addi	r2,r2,-24604
 2029fd8:	1885883a 	add	r2,r3,r2
 2029fdc:	10800017 	ldw	r2,0(r2)
 2029fe0:	1000683a 	jmp	r2
 2029fe4:	02029ff8 	rdprs	r8,zero,2687
 2029fe8:	0202a014 	movui	r8,2688
 2029fec:	0202a030 	cmpltui	r8,zero,2688
 2029ff0:	0202a040 	call	202a04 <__alt_mem_sdram_controller_0-0x1dfd5fc>
 2029ff4:	0202a04c 	andi	r8,zero,2689
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 2029ff8:	e0bffb17 	ldw	r2,-20(fp)
 2029ffc:	1080028b 	ldhu	r2,10(r2)
 202a000:	10800044 	addi	r2,r2,1
 202a004:	1007883a 	mov	r3,r2
 202a008:	e0bffb17 	ldw	r2,-20(fp)
 202a00c:	10c0028d 	sth	r3,10(r2)
      break;
 202a010:	00001306 	br	202a060 <event_callback+0x15c>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 202a014:	e0bffb17 	ldw	r2,-20(fp)
 202a018:	1080028b 	ldhu	r2,10(r2)
 202a01c:	10bfffc4 	addi	r2,r2,-1
 202a020:	1007883a 	mov	r3,r2
 202a024:	e0bffb17 	ldw	r2,-20(fp)
 202a028:	10c0028d 	sth	r3,10(r2)
      break;
 202a02c:	00000c06 	br	202a060 <event_callback+0x15c>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
 202a030:	e0bffb17 	ldw	r2,-20(fp)
 202a034:	00c00044 	movi	r3,1
 202a038:	10c0030d 	sth	r3,12(r2)
      break;
 202a03c:	00000806 	br	202a060 <event_callback+0x15c>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 202a040:	e0bffb17 	ldw	r2,-20(fp)
 202a044:	1000030d 	sth	zero,12(r2)
      break;
 202a048:	00000506 	br	202a060 <event_callback+0x15c>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 202a04c:	e0bffb17 	ldw	r2,-20(fp)
 202a050:	00c00044 	movi	r3,1
 202a054:	10c0038d 	sth	r3,14(r2)
      break;
 202a058:	00000106 	br	202a060 <event_callback+0x15c>
    default:
      LWIP_ASSERT("unknown event", 0);
      break;
 202a05c:	0001883a 	nop
  }

  if (sock->select_waiting == 0) {
 202a060:	e0bffb17 	ldw	r2,-20(fp)
 202a064:	10800517 	ldw	r2,20(r2)
 202a068:	1000041e 	bne	r2,zero,202a07c <event_callback+0x178>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
 202a06c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 202a070:	10008926 	beq	r2,zero,202a298 <event_callback+0x394>
 202a074:	2010e300 	call	2010e30 <vTaskExitCritical>
    return;
 202a078:	00008706 	br	202a298 <event_callback+0x394>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 202a07c:	d0a80b17 	ldw	r2,-24532(gp)
 202a080:	e0bff915 	stw	r2,-28(fp)
 202a084:	00007806 	br	202a268 <event_callback+0x364>
    if (scb->sem_signalled == 0) {
 202a088:	e0bff917 	ldw	r2,-28(fp)
 202a08c:	10800517 	ldw	r2,20(r2)
 202a090:	1000521e 	bne	r2,zero,202a1dc <event_callback+0x2d8>
      /* semaphore not signalled yet */
      int do_signal = 0;
 202a094:	e03ffa15 	stw	zero,-24(fp)
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
 202a098:	e0bffb17 	ldw	r2,-20(fp)
 202a09c:	1080028b 	ldhu	r2,10(r2)
 202a0a0:	10bfffcc 	andi	r2,r2,65535
 202a0a4:	10a0001c 	xori	r2,r2,32768
 202a0a8:	10a00004 	addi	r2,r2,-32768
 202a0ac:	0080120e 	bge	zero,r2,202a0f8 <event_callback+0x1f4>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 202a0b0:	e0bff917 	ldw	r2,-28(fp)
 202a0b4:	10800217 	ldw	r2,8(r2)
 202a0b8:	10000f26 	beq	r2,zero,202a0f8 <event_callback+0x1f4>
 202a0bc:	e0bff917 	ldw	r2,-28(fp)
 202a0c0:	10c00217 	ldw	r3,8(r2)
 202a0c4:	e0bff817 	ldw	r2,-32(fp)
 202a0c8:	1004d17a 	srli	r2,r2,5
 202a0cc:	1085883a 	add	r2,r2,r2
 202a0d0:	1085883a 	add	r2,r2,r2
 202a0d4:	1885883a 	add	r2,r3,r2
 202a0d8:	10c00017 	ldw	r3,0(r2)
 202a0dc:	e0bff817 	ldw	r2,-32(fp)
 202a0e0:	108007cc 	andi	r2,r2,31
 202a0e4:	1885d83a 	sra	r2,r3,r2
 202a0e8:	1080004c 	andi	r2,r2,1
 202a0ec:	10000226 	beq	r2,zero,202a0f8 <event_callback+0x1f4>
          do_signal = 1;
 202a0f0:	00800044 	movi	r2,1
 202a0f4:	e0bffa15 	stw	r2,-24(fp)
        }
      }
      if (sock->sendevent != 0) {
 202a0f8:	e0bffb17 	ldw	r2,-20(fp)
 202a0fc:	1080030b 	ldhu	r2,12(r2)
 202a100:	10bfffcc 	andi	r2,r2,65535
 202a104:	10001426 	beq	r2,zero,202a158 <event_callback+0x254>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 202a108:	e0bffa17 	ldw	r2,-24(fp)
 202a10c:	1000121e 	bne	r2,zero,202a158 <event_callback+0x254>
 202a110:	e0bff917 	ldw	r2,-28(fp)
 202a114:	10800317 	ldw	r2,12(r2)
 202a118:	10000f26 	beq	r2,zero,202a158 <event_callback+0x254>
 202a11c:	e0bff917 	ldw	r2,-28(fp)
 202a120:	10c00317 	ldw	r3,12(r2)
 202a124:	e0bff817 	ldw	r2,-32(fp)
 202a128:	1004d17a 	srli	r2,r2,5
 202a12c:	1085883a 	add	r2,r2,r2
 202a130:	1085883a 	add	r2,r2,r2
 202a134:	1885883a 	add	r2,r3,r2
 202a138:	10c00017 	ldw	r3,0(r2)
 202a13c:	e0bff817 	ldw	r2,-32(fp)
 202a140:	108007cc 	andi	r2,r2,31
 202a144:	1885d83a 	sra	r2,r3,r2
 202a148:	1080004c 	andi	r2,r2,1
 202a14c:	10000226 	beq	r2,zero,202a158 <event_callback+0x254>
          do_signal = 1;
 202a150:	00800044 	movi	r2,1
 202a154:	e0bffa15 	stw	r2,-24(fp)
        }
      }
      if (sock->errevent != 0) {
 202a158:	e0bffb17 	ldw	r2,-20(fp)
 202a15c:	1080038b 	ldhu	r2,14(r2)
 202a160:	10bfffcc 	andi	r2,r2,65535
 202a164:	10001426 	beq	r2,zero,202a1b8 <event_callback+0x2b4>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 202a168:	e0bffa17 	ldw	r2,-24(fp)
 202a16c:	1000121e 	bne	r2,zero,202a1b8 <event_callback+0x2b4>
 202a170:	e0bff917 	ldw	r2,-28(fp)
 202a174:	10800417 	ldw	r2,16(r2)
 202a178:	10000f26 	beq	r2,zero,202a1b8 <event_callback+0x2b4>
 202a17c:	e0bff917 	ldw	r2,-28(fp)
 202a180:	10c00417 	ldw	r3,16(r2)
 202a184:	e0bff817 	ldw	r2,-32(fp)
 202a188:	1004d17a 	srli	r2,r2,5
 202a18c:	1085883a 	add	r2,r2,r2
 202a190:	1085883a 	add	r2,r2,r2
 202a194:	1885883a 	add	r2,r3,r2
 202a198:	10c00017 	ldw	r3,0(r2)
 202a19c:	e0bff817 	ldw	r2,-32(fp)
 202a1a0:	108007cc 	andi	r2,r2,31
 202a1a4:	1885d83a 	sra	r2,r3,r2
 202a1a8:	1080004c 	andi	r2,r2,1
 202a1ac:	10000226 	beq	r2,zero,202a1b8 <event_callback+0x2b4>
          do_signal = 1;
 202a1b0:	00800044 	movi	r2,1
 202a1b4:	e0bffa15 	stw	r2,-24(fp)
        }
      }
      if (do_signal) {
 202a1b8:	e0bffa17 	ldw	r2,-24(fp)
 202a1bc:	10000726 	beq	r2,zero,202a1dc <event_callback+0x2d8>
        scb->sem_signalled = 1;
 202a1c0:	e0bff917 	ldw	r2,-28(fp)
 202a1c4:	00c00044 	movi	r3,1
 202a1c8:	10c00515 	stw	r3,20(r2)
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidagin the semaphore. */
        sys_sem_signal(&scb->sem);
 202a1cc:	e0bff917 	ldw	r2,-28(fp)
 202a1d0:	10800604 	addi	r2,r2,24
 202a1d4:	1009883a 	mov	r4,r2
 202a1d8:	2014df00 	call	2014df0 <sys_sem_signal>
      }
    }

    if ((scb->next) && (scb->next < 0x00800000 || scb->next > 0x00ffffff))
 202a1dc:	e0bff917 	ldw	r2,-28(fp)
 202a1e0:	10800017 	ldw	r2,0(r2)
 202a1e4:	10000a26 	beq	r2,zero,202a210 <event_callback+0x30c>
 202a1e8:	e0bff917 	ldw	r2,-28(fp)
 202a1ec:	10c00017 	ldw	r3,0(r2)
 202a1f0:	00802034 	movhi	r2,128
 202a1f4:	18800436 	bltu	r3,r2,202a208 <event_callback+0x304>
 202a1f8:	e0bff917 	ldw	r2,-28(fp)
 202a1fc:	10c00017 	ldw	r3,0(r2)
 202a200:	00804034 	movhi	r2,256
 202a204:	18800236 	bltu	r3,r2,202a210 <event_callback+0x30c>
    {
    	NIOS2_BREAK();
 202a208:	003da03a 	break	0
 202a20c:	00000706 	br	202a22c <event_callback+0x328>
    }
    else if (scb < 0x00800000 || scb > 0x00ffffff)
 202a210:	e0fff917 	ldw	r3,-28(fp)
 202a214:	00802034 	movhi	r2,128
 202a218:	18800336 	bltu	r3,r2,202a228 <event_callback+0x324>
 202a21c:	e0fff917 	ldw	r3,-28(fp)
 202a220:	00804034 	movhi	r2,256
 202a224:	18800136 	bltu	r3,r2,202a22c <event_callback+0x328>
    {
    	NIOS2_BREAK();
 202a228:	003da03a 	break	0
    }

    /* unlock interrupts with each step */
    last_select_cb_ctr = select_cb_ctr;
 202a22c:	d0a80c17 	ldw	r2,-24528(gp)
 202a230:	e0bffc15 	stw	r2,-16(fp)
    SYS_ARCH_UNPROTECT(lev);
 202a234:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 202a238:	10000126 	beq	r2,zero,202a240 <event_callback+0x33c>
 202a23c:	2010e300 	call	2010e30 <vTaskExitCritical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 202a240:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 202a244:	10000126 	beq	r2,zero,202a24c <event_callback+0x348>
 202a248:	2010de80 	call	2010de8 <vTaskEnterCritical>
    if (last_select_cb_ctr != select_cb_ctr) {
 202a24c:	d0a80c17 	ldw	r2,-24528(gp)
 202a250:	e0fffc17 	ldw	r3,-16(fp)
 202a254:	18800126 	beq	r3,r2,202a25c <event_callback+0x358>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
 202a258:	003f8806 	br	202a07c <__alt_mem_mem_0+0xfd00a07c>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 202a25c:	e0bff917 	ldw	r2,-28(fp)
 202a260:	10800017 	ldw	r2,0(r2)
 202a264:	e0bff915 	stw	r2,-28(fp)
 202a268:	e0bff917 	ldw	r2,-28(fp)
 202a26c:	103f861e 	bne	r2,zero,202a088 <__alt_mem_mem_0+0xfd00a088>
    if (last_select_cb_ctr != select_cb_ctr) {
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 202a270:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 202a274:	10000926 	beq	r2,zero,202a29c <event_callback+0x398>
 202a278:	2010e300 	call	2010e30 <vTaskExitCritical>
 202a27c:	00000706 	br	202a29c <event_callback+0x398>
    sock = get_socket(s);
    if (!sock) {
      return;
    }
  } else {
    return;
 202a280:	0001883a 	nop
 202a284:	00000506 	br	202a29c <event_callback+0x398>
      if (conn->socket < 0) {
        if (evt == NETCONN_EVT_RCVPLUS) {
          conn->socket--;
        }
        SYS_ARCH_UNPROTECT(lev);
        return;
 202a288:	0001883a 	nop
 202a28c:	00000306 	br	202a29c <event_callback+0x398>
      SYS_ARCH_UNPROTECT(lev);
    }

    sock = get_socket(s);
    if (!sock) {
      return;
 202a290:	0001883a 	nop
 202a294:	00000106 	br	202a29c <event_callback+0x398>
  }

  if (sock->select_waiting == 0) {
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
    return;
 202a298:	0001883a 	nop
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
    }
  }
  SYS_ARCH_UNPROTECT(lev);
}
 202a29c:	e037883a 	mov	sp,fp
 202a2a0:	dfc00117 	ldw	ra,4(sp)
 202a2a4:	df000017 	ldw	fp,0(sp)
 202a2a8:	dec00204 	addi	sp,sp,8
 202a2ac:	f800283a 	ret

0202a2b0 <lwip_shutdown>:
 * Unimplemented: Close one end of a full-duplex connection.
 * Currently, the full connection is closed.
 */
int
lwip_shutdown(int s, int how)
{
 202a2b0:	defff904 	addi	sp,sp,-28
 202a2b4:	dfc00615 	stw	ra,24(sp)
 202a2b8:	df000515 	stw	fp,20(sp)
 202a2bc:	df000504 	addi	fp,sp,20
 202a2c0:	e13ffe15 	stw	r4,-8(fp)
 202a2c4:	e17fff15 	stw	r5,-4(fp)
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
 202a2c8:	e03ffb05 	stb	zero,-20(fp)
 202a2cc:	e03ffb45 	stb	zero,-19(fp)

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
 202a2d0:	e13ffe17 	ldw	r4,-8(fp)
 202a2d4:	20281c80 	call	20281c8 <get_socket>
 202a2d8:	e0bffc15 	stw	r2,-16(fp)
  if (!sock) {
 202a2dc:	e0bffc17 	ldw	r2,-16(fp)
 202a2e0:	1000021e 	bne	r2,zero,202a2ec <lwip_shutdown+0x3c>
    return -1;
 202a2e4:	00bfffc4 	movi	r2,-1
 202a2e8:	00004906 	br	202a410 <lwip_shutdown+0x160>
  }

  if (sock->conn != NULL) {
 202a2ec:	e0bffc17 	ldw	r2,-16(fp)
 202a2f0:	10800017 	ldw	r2,0(r2)
 202a2f4:	10000a26 	beq	r2,zero,202a320 <lwip_shutdown+0x70>
    if (netconn_type(sock->conn) != NETCONN_TCP) {
 202a2f8:	e0bffc17 	ldw	r2,-16(fp)
 202a2fc:	10800017 	ldw	r2,0(r2)
 202a300:	10800017 	ldw	r2,0(r2)
 202a304:	10800420 	cmpeqi	r2,r2,16
 202a308:	10000a1e 	bne	r2,zero,202a334 <lwip_shutdown+0x84>
      sock_set_errno(sock, EOPNOTSUPP);
 202a30c:	e0bffc17 	ldw	r2,-16(fp)
 202a310:	00c017c4 	movi	r3,95
 202a314:	10c00415 	stw	r3,16(r2)
      return EOPNOTSUPP;
 202a318:	008017c4 	movi	r2,95
 202a31c:	00003c06 	br	202a410 <lwip_shutdown+0x160>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
 202a320:	e0bffc17 	ldw	r2,-16(fp)
 202a324:	00c02004 	movi	r3,128
 202a328:	10c00415 	stw	r3,16(r2)
    return ENOTCONN;
 202a32c:	00802004 	movi	r2,128
 202a330:	00003706 	br	202a410 <lwip_shutdown+0x160>
  }

  if (how == SHUT_RD) {
 202a334:	e0bfff17 	ldw	r2,-4(fp)
 202a338:	1000031e 	bne	r2,zero,202a348 <lwip_shutdown+0x98>
    shut_rx = 1;
 202a33c:	00800044 	movi	r2,1
 202a340:	e0bffb05 	stb	r2,-20(fp)
 202a344:	00001306 	br	202a394 <lwip_shutdown+0xe4>
  } else if (how == SHUT_WR) {
 202a348:	e0bfff17 	ldw	r2,-4(fp)
 202a34c:	10800058 	cmpnei	r2,r2,1
 202a350:	1000031e 	bne	r2,zero,202a360 <lwip_shutdown+0xb0>
    shut_tx = 1;
 202a354:	00800044 	movi	r2,1
 202a358:	e0bffb45 	stb	r2,-19(fp)
 202a35c:	00000d06 	br	202a394 <lwip_shutdown+0xe4>
  } else if(how == SHUT_RDWR) {
 202a360:	e0bfff17 	ldw	r2,-4(fp)
 202a364:	10800098 	cmpnei	r2,r2,2
 202a368:	1000051e 	bne	r2,zero,202a380 <lwip_shutdown+0xd0>
    shut_rx = 1;
 202a36c:	00800044 	movi	r2,1
 202a370:	e0bffb05 	stb	r2,-20(fp)
    shut_tx = 1;
 202a374:	00800044 	movi	r2,1
 202a378:	e0bffb45 	stb	r2,-19(fp)
 202a37c:	00000506 	br	202a394 <lwip_shutdown+0xe4>
  } else {
    sock_set_errno(sock, EINVAL);
 202a380:	e0bffc17 	ldw	r2,-16(fp)
 202a384:	00c00584 	movi	r3,22
 202a388:	10c00415 	stw	r3,16(r2)
    return EINVAL;
 202a38c:	00800584 	movi	r2,22
 202a390:	00001f06 	br	202a410 <lwip_shutdown+0x160>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
 202a394:	e0bffc17 	ldw	r2,-16(fp)
 202a398:	10800017 	ldw	r2,0(r2)
 202a39c:	e0fffb03 	ldbu	r3,-20(fp)
 202a3a0:	e13ffb43 	ldbu	r4,-19(fp)
 202a3a4:	200d883a 	mov	r6,r4
 202a3a8:	180b883a 	mov	r5,r3
 202a3ac:	1009883a 	mov	r4,r2
 202a3b0:	2039f1c0 	call	2039f1c <netconn_shutdown>
 202a3b4:	e0bffd05 	stb	r2,-12(fp)

  sock_set_errno(sock, err_to_errno(err));
 202a3b8:	e0bffd07 	ldb	r2,-12(fp)
 202a3bc:	0085c83a 	sub	r2,zero,r2
 202a3c0:	10800428 	cmpgeui	r2,r2,16
 202a3c4:	1000091e 	bne	r2,zero,202a3ec <lwip_shutdown+0x13c>
 202a3c8:	e0bffd07 	ldb	r2,-12(fp)
 202a3cc:	0087c83a 	sub	r3,zero,r2
 202a3d0:	00808134 	movhi	r2,516
 202a3d4:	1085f404 	addi	r2,r2,6096
 202a3d8:	18c7883a 	add	r3,r3,r3
 202a3dc:	18c7883a 	add	r3,r3,r3
 202a3e0:	10c5883a 	add	r2,r2,r3
 202a3e4:	10800017 	ldw	r2,0(r2)
 202a3e8:	00000106 	br	202a3f0 <lwip_shutdown+0x140>
 202a3ec:	00800144 	movi	r2,5
 202a3f0:	e0fffc17 	ldw	r3,-16(fp)
 202a3f4:	18800415 	stw	r2,16(r3)
  return (err == ERR_OK ? 0 : -1);
 202a3f8:	e0bffd07 	ldb	r2,-12(fp)
 202a3fc:	1000021e 	bne	r2,zero,202a408 <lwip_shutdown+0x158>
 202a400:	0005883a 	mov	r2,zero
 202a404:	00000106 	br	202a40c <lwip_shutdown+0x15c>
 202a408:	00bfffc4 	movi	r2,-1
 202a40c:	0001883a 	nop
}
 202a410:	e037883a 	mov	sp,fp
 202a414:	dfc00117 	ldw	ra,4(sp)
 202a418:	df000017 	ldw	fp,0(sp)
 202a41c:	dec00204 	addi	sp,sp,8
 202a420:	f800283a 	ret

0202a424 <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
 202a424:	defff404 	addi	sp,sp,-48
 202a428:	dfc00b15 	stw	ra,44(sp)
 202a42c:	df000a15 	stw	fp,40(sp)
 202a430:	df000a04 	addi	fp,sp,40
 202a434:	e13ffc15 	stw	r4,-16(fp)
 202a438:	e17ffd15 	stw	r5,-12(fp)
 202a43c:	e1bffe15 	stw	r6,-8(fp)
 202a440:	3805883a 	mov	r2,r7
 202a444:	e0bfff05 	stb	r2,-4(fp)
  struct lwip_sock *sock;
  struct sockaddr_in sin;
  ip_addr_t naddr;

  sock = get_socket(s);
 202a448:	e13ffc17 	ldw	r4,-16(fp)
 202a44c:	20281c80 	call	20281c8 <get_socket>
 202a450:	e0bff615 	stw	r2,-40(fp)
  if (!sock) {
 202a454:	e0bff617 	ldw	r2,-40(fp)
 202a458:	1000021e 	bne	r2,zero,202a464 <lwip_getaddrname+0x40>
    return -1;
 202a45c:	00bfffc4 	movi	r2,-1
 202a460:	00003006 	br	202a524 <lwip_getaddrname+0x100>
  }

  memset(&sin, 0, sizeof(sin));
 202a464:	e0bff704 	addi	r2,fp,-36
 202a468:	01800404 	movi	r6,16
 202a46c:	000b883a 	mov	r5,zero
 202a470:	1009883a 	mov	r4,r2
 202a474:	2005fa00 	call	2005fa0 <memset>
  sin.sin_len = sizeof(sin);
 202a478:	00800404 	movi	r2,16
 202a47c:	e0bff705 	stb	r2,-36(fp)
  sin.sin_family = AF_INET;
 202a480:	00800084 	movi	r2,2
 202a484:	e0bff745 	stb	r2,-35(fp)

  /* get the IP address and port */
  netconn_getaddr(sock->conn, &naddr, &sin.sin_port, local);
 202a488:	e0bff617 	ldw	r2,-40(fp)
 202a48c:	10c00017 	ldw	r3,0(r2)
 202a490:	e17fff03 	ldbu	r5,-4(fp)
 202a494:	e0bff704 	addi	r2,fp,-36
 202a498:	11000084 	addi	r4,r2,2
 202a49c:	e0bffb04 	addi	r2,fp,-20
 202a4a0:	280f883a 	mov	r7,r5
 202a4a4:	200d883a 	mov	r6,r4
 202a4a8:	100b883a 	mov	r5,r2
 202a4ac:	1809883a 	mov	r4,r3
 202a4b0:	2038f940 	call	2038f94 <netconn_getaddr>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", sin.sin_port));

  sin.sin_port = htons(sin.sin_port);
 202a4b4:	e0bff78b 	ldhu	r2,-34(fp)
 202a4b8:	10bfffcc 	andi	r2,r2,65535
 202a4bc:	1004d23a 	srli	r2,r2,8
 202a4c0:	1007883a 	mov	r3,r2
 202a4c4:	e0bff78b 	ldhu	r2,-34(fp)
 202a4c8:	10bfffcc 	andi	r2,r2,65535
 202a4cc:	1004923a 	slli	r2,r2,8
 202a4d0:	1884b03a 	or	r2,r3,r2
 202a4d4:	e0bff78d 	sth	r2,-34(fp)
  inet_addr_from_ipaddr(&sin.sin_addr, &naddr);
 202a4d8:	e0bffb17 	ldw	r2,-20(fp)
 202a4dc:	e0bff815 	stw	r2,-32(fp)

  if (*namelen > sizeof(sin)) {
 202a4e0:	e0bffe17 	ldw	r2,-8(fp)
 202a4e4:	10800017 	ldw	r2,0(r2)
 202a4e8:	10800470 	cmpltui	r2,r2,17
 202a4ec:	1000031e 	bne	r2,zero,202a4fc <lwip_getaddrname+0xd8>
    *namelen = sizeof(sin);
 202a4f0:	e0bffe17 	ldw	r2,-8(fp)
 202a4f4:	00c00404 	movi	r3,16
 202a4f8:	10c00015 	stw	r3,0(r2)
  }

  MEMCPY(name, &sin, *namelen);
 202a4fc:	e0bffe17 	ldw	r2,-8(fp)
 202a500:	10c00017 	ldw	r3,0(r2)
 202a504:	e0bff704 	addi	r2,fp,-36
 202a508:	180d883a 	mov	r6,r3
 202a50c:	100b883a 	mov	r5,r2
 202a510:	e13ffd17 	ldw	r4,-12(fp)
 202a514:	2005e580 	call	2005e58 <memcpy>
  sock_set_errno(sock, 0);
 202a518:	e0bff617 	ldw	r2,-40(fp)
 202a51c:	10000415 	stw	zero,16(r2)
  return 0;
 202a520:	0005883a 	mov	r2,zero
}
 202a524:	e037883a 	mov	sp,fp
 202a528:	dfc00117 	ldw	ra,4(sp)
 202a52c:	df000017 	ldw	fp,0(sp)
 202a530:	dec00204 	addi	sp,sp,8
 202a534:	f800283a 	ret

0202a538 <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
 202a538:	defffb04 	addi	sp,sp,-20
 202a53c:	dfc00415 	stw	ra,16(sp)
 202a540:	df000315 	stw	fp,12(sp)
 202a544:	df000304 	addi	fp,sp,12
 202a548:	e13ffd15 	stw	r4,-12(fp)
 202a54c:	e17ffe15 	stw	r5,-8(fp)
 202a550:	e1bfff15 	stw	r6,-4(fp)
  return lwip_getaddrname(s, name, namelen, 0);
 202a554:	000f883a 	mov	r7,zero
 202a558:	e1bfff17 	ldw	r6,-4(fp)
 202a55c:	e17ffe17 	ldw	r5,-8(fp)
 202a560:	e13ffd17 	ldw	r4,-12(fp)
 202a564:	202a4240 	call	202a424 <lwip_getaddrname>
}
 202a568:	e037883a 	mov	sp,fp
 202a56c:	dfc00117 	ldw	ra,4(sp)
 202a570:	df000017 	ldw	fp,0(sp)
 202a574:	dec00204 	addi	sp,sp,8
 202a578:	f800283a 	ret

0202a57c <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
 202a57c:	defffb04 	addi	sp,sp,-20
 202a580:	dfc00415 	stw	ra,16(sp)
 202a584:	df000315 	stw	fp,12(sp)
 202a588:	df000304 	addi	fp,sp,12
 202a58c:	e13ffd15 	stw	r4,-12(fp)
 202a590:	e17ffe15 	stw	r5,-8(fp)
 202a594:	e1bfff15 	stw	r6,-4(fp)
  return lwip_getaddrname(s, name, namelen, 1);
 202a598:	01c00044 	movi	r7,1
 202a59c:	e1bfff17 	ldw	r6,-4(fp)
 202a5a0:	e17ffe17 	ldw	r5,-8(fp)
 202a5a4:	e13ffd17 	ldw	r4,-12(fp)
 202a5a8:	202a4240 	call	202a424 <lwip_getaddrname>
}
 202a5ac:	e037883a 	mov	sp,fp
 202a5b0:	dfc00117 	ldw	ra,4(sp)
 202a5b4:	df000017 	ldw	fp,0(sp)
 202a5b8:	dec00204 	addi	sp,sp,8
 202a5bc:	f800283a 	ret

0202a5c0 <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
 202a5c0:	defff204 	addi	sp,sp,-56
 202a5c4:	dfc00d15 	stw	ra,52(sp)
 202a5c8:	df000c15 	stw	fp,48(sp)
 202a5cc:	df000c04 	addi	fp,sp,48
 202a5d0:	e13ffc15 	stw	r4,-16(fp)
 202a5d4:	e17ffd15 	stw	r5,-12(fp)
 202a5d8:	e1bffe15 	stw	r6,-8(fp)
 202a5dc:	e1ffff15 	stw	r7,-4(fp)
  err_t err = ERR_OK;
 202a5e0:	e03ff405 	stb	zero,-48(fp)
  struct lwip_sock *sock = get_socket(s);
 202a5e4:	e13ffc17 	ldw	r4,-16(fp)
 202a5e8:	20281c80 	call	20281c8 <get_socket>
 202a5ec:	e0bff515 	stw	r2,-44(fp)
  struct lwip_setgetsockopt_data data;

  if (!sock) {
 202a5f0:	e0bff517 	ldw	r2,-44(fp)
 202a5f4:	1000021e 	bne	r2,zero,202a600 <lwip_getsockopt+0x40>
    return -1;
 202a5f8:	00bfffc4 	movi	r2,-1
 202a5fc:	00009c06 	br	202a870 <lwip_getsockopt+0x2b0>
  }

  if ((NULL == optval) || (NULL == optlen)) {
 202a600:	e0bfff17 	ldw	r2,-4(fp)
 202a604:	10000226 	beq	r2,zero,202a610 <lwip_getsockopt+0x50>
 202a608:	e0800217 	ldw	r2,8(fp)
 202a60c:	1000051e 	bne	r2,zero,202a624 <lwip_getsockopt+0x64>
    sock_set_errno(sock, EFAULT);
 202a610:	e0bff517 	ldw	r2,-44(fp)
 202a614:	00c00384 	movi	r3,14
 202a618:	10c00415 	stw	r3,16(r2)
    return -1;
 202a61c:	00bfffc4 	movi	r2,-1
 202a620:	00009306 	br	202a870 <lwip_getsockopt+0x2b0>
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {
 202a624:	e0bffd17 	ldw	r2,-12(fp)
 202a628:	10c001a0 	cmpeqi	r3,r2,6
 202a62c:	18004d1e 	bne	r3,zero,202a764 <lwip_getsockopt+0x1a4>
 202a630:	10c3ffe0 	cmpeqi	r3,r2,4095
 202a634:	1800021e 	bne	r3,zero,202a640 <lwip_getsockopt+0x80>
 202a638:	10003a26 	beq	r2,zero,202a724 <lwip_getsockopt+0x164>
 202a63c:	00006006 	br	202a7c0 <lwip_getsockopt+0x200>
   
/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 202a640:	e0bffe17 	ldw	r2,-8(fp)
 202a644:	10c00820 	cmpeqi	r3,r2,32
 202a648:	1800131e 	bne	r3,zero,202a698 <lwip_getsockopt+0xd8>
 202a64c:	10c00848 	cmpgei	r3,r2,33
 202a650:	1800071e 	bne	r3,zero,202a670 <lwip_getsockopt+0xb0>
 202a654:	10c00120 	cmpeqi	r3,r2,4
 202a658:	18000f1e 	bne	r3,zero,202a698 <lwip_getsockopt+0xd8>
 202a65c:	10c00220 	cmpeqi	r3,r2,8
 202a660:	18000d1e 	bne	r3,zero,202a698 <lwip_getsockopt+0xd8>
 202a664:	108000a0 	cmpeqi	r2,r2,2
 202a668:	10000b1e 	bne	r2,zero,202a698 <lwip_getsockopt+0xd8>
 202a66c:	00002606 	br	202a708 <lwip_getsockopt+0x148>
 202a670:	10c40248 	cmpgei	r3,r2,4105
 202a674:	1800051e 	bne	r3,zero,202a68c <lwip_getsockopt+0xcc>
 202a678:	10c40188 	cmpgei	r3,r2,4102
 202a67c:	1800061e 	bne	r3,zero,202a698 <lwip_getsockopt+0xd8>
 202a680:	10808020 	cmpeqi	r2,r2,512
 202a684:	1000041e 	bne	r2,zero,202a698 <lwip_getsockopt+0xd8>
 202a688:	00001f06 	br	202a708 <lwip_getsockopt+0x148>
 202a68c:	108402a0 	cmpeqi	r2,r2,4106
 202a690:	1000081e 	bne	r2,zero,202a6b4 <lwip_getsockopt+0xf4>
 202a694:	00001c06 	br	202a708 <lwip_getsockopt+0x148>
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    case SO_TYPE:
    /* UNIMPL case SO_USELOOPBACK: */
      if (*optlen < sizeof(int)) {
 202a698:	e0800217 	ldw	r2,8(fp)
 202a69c:	10800017 	ldw	r2,0(r2)
 202a6a0:	10800128 	cmpgeui	r2,r2,4
 202a6a4:	10001b1e 	bne	r2,zero,202a714 <lwip_getsockopt+0x154>
        err = EINVAL;
 202a6a8:	00800584 	movi	r2,22
 202a6ac:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 202a6b0:	00001806 	br	202a714 <lwip_getsockopt+0x154>

    case SO_NO_CHECK:
      if (*optlen < sizeof(int)) {
 202a6b4:	e0800217 	ldw	r2,8(fp)
 202a6b8:	10800017 	ldw	r2,0(r2)
 202a6bc:	10800128 	cmpgeui	r2,r2,4
 202a6c0:	1000021e 	bne	r2,zero,202a6cc <lwip_getsockopt+0x10c>
        err = EINVAL;
 202a6c4:	00800584 	movi	r2,22
 202a6c8:	e0bff405 	stb	r2,-48(fp)
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 202a6cc:	e0bff517 	ldw	r2,-44(fp)
 202a6d0:	10800017 	ldw	r2,0(r2)
 202a6d4:	10800017 	ldw	r2,0(r2)
 202a6d8:	10800818 	cmpnei	r2,r2,32
 202a6dc:	1000071e 	bne	r2,zero,202a6fc <lwip_getsockopt+0x13c>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
 202a6e0:	e0bff517 	ldw	r2,-44(fp)
 202a6e4:	10800017 	ldw	r2,0(r2)
 202a6e8:	10800217 	ldw	r2,8(r2)
 202a6ec:	10800403 	ldbu	r2,16(r2)
 202a6f0:	10803fcc 	andi	r2,r2,255
 202a6f4:	1080008c 	andi	r2,r2,2
    case SO_NO_CHECK:
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 202a6f8:	10000826 	beq	r2,zero,202a71c <lwip_getsockopt+0x15c>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
 202a6fc:	00801a84 	movi	r2,106
 202a700:	e0bff405 	stb	r2,-48(fp)
      }
#endif /* LWIP_UDP */
      break;
 202a704:	00000506 	br	202a71c <lwip_getsockopt+0x15c>

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
 202a708:	00801b44 	movi	r2,109
 202a70c:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 202a710:	00002d06 	br	202a7c8 <lwip_getsockopt+0x208>
    case SO_TYPE:
    /* UNIMPL case SO_USELOOPBACK: */
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 202a714:	0001883a 	nop
 202a718:	00002b06 	br	202a7c8 <lwip_getsockopt+0x208>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
      }
#endif /* LWIP_UDP */
      break;
 202a71c:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 202a720:	00002906 	br	202a7c8 <lwip_getsockopt+0x208>
                     
/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 202a724:	e0bffe17 	ldw	r2,-8(fp)
 202a728:	10bfffc4 	addi	r2,r2,-1
 202a72c:	108000a8 	cmpgeui	r2,r2,2
 202a730:	1000071e 	bne	r2,zero,202a750 <lwip_getsockopt+0x190>
    /* UNIMPL case IP_HDRINCL: */
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (*optlen < sizeof(int)) {
 202a734:	e0800217 	ldw	r2,8(fp)
 202a738:	10800017 	ldw	r2,0(r2)
 202a73c:	10800128 	cmpgeui	r2,r2,4
 202a740:	1000061e 	bne	r2,zero,202a75c <lwip_getsockopt+0x19c>
        err = EINVAL;
 202a744:	00800584 	movi	r2,22
 202a748:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 202a74c:	00000306 	br	202a75c <lwip_getsockopt+0x19c>
#endif /* LWIP_IGMP */

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
 202a750:	00801b44 	movi	r2,109
 202a754:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 202a758:	00001b06 	br	202a7c8 <lwip_getsockopt+0x208>
    case IP_TTL:
    case IP_TOS:
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 202a75c:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 202a760:	00001906 	br	202a7c8 <lwip_getsockopt+0x208>
         
#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (*optlen < sizeof(int)) {
 202a764:	e0800217 	ldw	r2,8(fp)
 202a768:	10800017 	ldw	r2,0(r2)
 202a76c:	10800128 	cmpgeui	r2,r2,4
 202a770:	1000031e 	bne	r2,zero,202a780 <lwip_getsockopt+0x1c0>
      err = EINVAL;
 202a774:	00800584 	movi	r2,22
 202a778:	e0bff405 	stb	r2,-48(fp)
      break;
 202a77c:	00001206 	br	202a7c8 <lwip_getsockopt+0x208>
    }
    
    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
 202a780:	e0bff517 	ldw	r2,-44(fp)
 202a784:	10800017 	ldw	r2,0(r2)
 202a788:	10800017 	ldw	r2,0(r2)
 202a78c:	10800420 	cmpeqi	r2,r2,16
 202a790:	1000021e 	bne	r2,zero,202a79c <lwip_getsockopt+0x1dc>
      return 0;
 202a794:	0005883a 	mov	r2,zero
 202a798:	00003506 	br	202a870 <lwip_getsockopt+0x2b0>

    switch (optname) {
 202a79c:	e0bffe17 	ldw	r2,-8(fp)
 202a7a0:	10bfffc4 	addi	r2,r2,-1
 202a7a4:	10800168 	cmpgeui	r2,r2,5
 202a7a8:	10000326 	beq	r2,zero,202a7b8 <lwip_getsockopt+0x1f8>
      break;
       
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
 202a7ac:	00801b44 	movi	r2,109
 202a7b0:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 202a7b4:	00000406 	br	202a7c8 <lwip_getsockopt+0x208>
#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
    case TCP_KEEPINTVL:
    case TCP_KEEPCNT:
#endif /* LWIP_TCP_KEEPALIVE */
      break;
 202a7b8:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 202a7bc:	00000206 	br	202a7c8 <lwip_getsockopt+0x208>
#endif /* LWIP_UDP && LWIP_UDPLITE*/
/* UNDEFINED LEVEL */
  default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 202a7c0:	00801b44 	movi	r2,109
 202a7c4:	e0bff405 	stb	r2,-48(fp)
  }  /* switch */

   
  if (err != ERR_OK) {
 202a7c8:	e0bff407 	ldb	r2,-48(fp)
 202a7cc:	10000526 	beq	r2,zero,202a7e4 <lwip_getsockopt+0x224>
    sock_set_errno(sock, err);
 202a7d0:	e0fff407 	ldb	r3,-48(fp)
 202a7d4:	e0bff517 	ldw	r2,-44(fp)
 202a7d8:	10c00415 	stw	r3,16(r2)
    return -1;
 202a7dc:	00bfffc4 	movi	r2,-1
 202a7e0:	00002306 	br	202a870 <lwip_getsockopt+0x2b0>
  }

  /* Now do the actual option processing */
  data.sock = sock;
 202a7e4:	e0bff517 	ldw	r2,-44(fp)
 202a7e8:	e0bff615 	stw	r2,-40(fp)
#ifdef LWIP_DEBUG
  data.s = s;
#endif /* LWIP_DEBUG */
  data.level = level;
 202a7ec:	e0bffd17 	ldw	r2,-12(fp)
 202a7f0:	e0bff715 	stw	r2,-36(fp)
  data.optname = optname;
 202a7f4:	e0bffe17 	ldw	r2,-8(fp)
 202a7f8:	e0bff815 	stw	r2,-32(fp)
  data.optval = optval;
 202a7fc:	e0bfff17 	ldw	r2,-4(fp)
 202a800:	e0bff915 	stw	r2,-28(fp)
  data.optlen = optlen;
 202a804:	e0800217 	ldw	r2,8(fp)
 202a808:	e0bffa15 	stw	r2,-24(fp)
  data.err = err;
 202a80c:	e0bff403 	ldbu	r2,-48(fp)
 202a810:	e0bffb05 	stb	r2,-20(fp)
  tcpip_callback(lwip_getsockopt_internal, &data);
 202a814:	e0bff604 	addi	r2,fp,-40
 202a818:	01800044 	movi	r6,1
 202a81c:	100b883a 	mov	r5,r2
 202a820:	010080f4 	movhi	r4,515
 202a824:	212a2104 	addi	r4,r4,-22396
 202a828:	202b6a40 	call	202b6a4 <tcpip_callback_with_block>
  sys_arch_sem_wait(&sock->conn->op_completed, 0);
 202a82c:	e0bff517 	ldw	r2,-44(fp)
 202a830:	10800017 	ldw	r2,0(r2)
 202a834:	10800404 	addi	r2,r2,16
 202a838:	000b883a 	mov	r5,zero
 202a83c:	1009883a 	mov	r4,r2
 202a840:	2014e380 	call	2014e38 <sys_arch_sem_wait>
  /* maybe lwip_getsockopt_internal has changed err */
  err = data.err;
 202a844:	e0bffb03 	ldbu	r2,-20(fp)
 202a848:	e0bff405 	stb	r2,-48(fp)

  sock_set_errno(sock, err);
 202a84c:	e0fff407 	ldb	r3,-48(fp)
 202a850:	e0bff517 	ldw	r2,-44(fp)
 202a854:	10c00415 	stw	r3,16(r2)
  return err ? -1 : 0;
 202a858:	e0bff407 	ldb	r2,-48(fp)
 202a85c:	10000226 	beq	r2,zero,202a868 <lwip_getsockopt+0x2a8>
 202a860:	00bfffc4 	movi	r2,-1
 202a864:	00000206 	br	202a870 <lwip_getsockopt+0x2b0>
 202a868:	0005883a 	mov	r2,zero
 202a86c:	0001883a 	nop
}
 202a870:	e037883a 	mov	sp,fp
 202a874:	dfc00117 	ldw	ra,4(sp)
 202a878:	df000017 	ldw	fp,0(sp)
 202a87c:	dec00204 	addi	sp,sp,8
 202a880:	f800283a 	ret

0202a884 <lwip_getsockopt_internal>:

static void
lwip_getsockopt_internal(void *arg)
{
 202a884:	defff804 	addi	sp,sp,-32
 202a888:	dfc00715 	stw	ra,28(sp)
 202a88c:	df000615 	stw	fp,24(sp)
 202a890:	df000604 	addi	fp,sp,24
 202a894:	e13fff15 	stw	r4,-4(fp)
  void *optval;
  struct lwip_setgetsockopt_data *data;

  LWIP_ASSERT("arg != NULL", arg != NULL);

  data = (struct lwip_setgetsockopt_data*)arg;
 202a898:	e0bfff17 	ldw	r2,-4(fp)
 202a89c:	e0bffa15 	stw	r2,-24(fp)
  sock = data->sock;
 202a8a0:	e0bffa17 	ldw	r2,-24(fp)
 202a8a4:	10800017 	ldw	r2,0(r2)
 202a8a8:	e0bffb15 	stw	r2,-20(fp)
#ifdef LWIP_DEBUG
  s = data->s;
#endif /* LWIP_DEBUG */
  level = data->level;
 202a8ac:	e0bffa17 	ldw	r2,-24(fp)
 202a8b0:	10800117 	ldw	r2,4(r2)
 202a8b4:	e0bffc15 	stw	r2,-16(fp)
  optname = data->optname;
 202a8b8:	e0bffa17 	ldw	r2,-24(fp)
 202a8bc:	10800217 	ldw	r2,8(r2)
 202a8c0:	e0bffd15 	stw	r2,-12(fp)
  optval = data->optval;
 202a8c4:	e0bffa17 	ldw	r2,-24(fp)
 202a8c8:	10800317 	ldw	r2,12(r2)
 202a8cc:	e0bffe15 	stw	r2,-8(fp)

  switch (level) {
 202a8d0:	e0bffc17 	ldw	r2,-16(fp)
 202a8d4:	10c001a0 	cmpeqi	r3,r2,6
 202a8d8:	18009b1e 	bne	r3,zero,202ab48 <lwip_getsockopt_internal+0x2c4>
 202a8dc:	10c3ffe0 	cmpeqi	r3,r2,4095
 202a8e0:	1800021e 	bne	r3,zero,202a8ec <lwip_getsockopt_internal+0x68>
 202a8e4:	10008126 	beq	r2,zero,202aaec <lwip_getsockopt_internal+0x268>
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
 202a8e8:	0000da06 	br	202ac54 <lwip_getsockopt_internal+0x3d0>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 202a8ec:	e0bffd17 	ldw	r2,-12(fp)
 202a8f0:	10c08020 	cmpeqi	r3,r2,512
 202a8f4:	18001a1e 	bne	r3,zero,202a960 <lwip_getsockopt_internal+0xdc>
 202a8f8:	10c08048 	cmpgei	r3,r2,513
 202a8fc:	18000c1e 	bne	r3,zero,202a930 <lwip_getsockopt_internal+0xac>
 202a900:	10c00120 	cmpeqi	r3,r2,4
 202a904:	1800161e 	bne	r3,zero,202a960 <lwip_getsockopt_internal+0xdc>
 202a908:	10c00148 	cmpgei	r3,r2,5
 202a90c:	1800031e 	bne	r3,zero,202a91c <lwip_getsockopt_internal+0x98>
 202a910:	108000a0 	cmpeqi	r2,r2,2
 202a914:	1000121e 	bne	r2,zero,202a960 <lwip_getsockopt_internal+0xdc>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 202a918:	00007306 	br	202aae8 <lwip_getsockopt_internal+0x264>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 202a91c:	10c00220 	cmpeqi	r3,r2,8
 202a920:	18000f1e 	bne	r3,zero,202a960 <lwip_getsockopt_internal+0xdc>
 202a924:	10800820 	cmpeqi	r2,r2,32
 202a928:	10000d1e 	bne	r2,zero,202a960 <lwip_getsockopt_internal+0xdc>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 202a92c:	00006e06 	br	202aae8 <lwip_getsockopt_internal+0x264>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 202a930:	10c401e0 	cmpeqi	r3,r2,4103
 202a934:	1800331e 	bne	r3,zero,202aa04 <lwip_getsockopt_internal+0x180>
 202a938:	10c40208 	cmpgei	r3,r2,4104
 202a93c:	1800031e 	bne	r3,zero,202a94c <lwip_getsockopt_internal+0xc8>
 202a940:	108401a0 	cmpeqi	r2,r2,4102
 202a944:	1000571e 	bne	r2,zero,202aaa4 <lwip_getsockopt_internal+0x220>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 202a948:	00006706 	br	202aae8 <lwip_getsockopt_internal+0x264>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 202a94c:	10c40220 	cmpeqi	r3,r2,4104
 202a950:	18000d1e 	bne	r3,zero,202a988 <lwip_getsockopt_internal+0x104>
 202a954:	108402a0 	cmpeqi	r2,r2,4106
 202a958:	1000581e 	bne	r2,zero,202aabc <lwip_getsockopt_internal+0x238>
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 202a95c:	00006206 	br	202aae8 <lwip_getsockopt_internal+0x264>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /*case SO_USELOOPBACK: UNIMPL */
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
 202a960:	e0bffb17 	ldw	r2,-20(fp)
 202a964:	10800017 	ldw	r2,0(r2)
 202a968:	10800217 	ldw	r2,8(r2)
 202a96c:	10800203 	ldbu	r2,8(r2)
 202a970:	10c03fcc 	andi	r3,r2,255
 202a974:	e0bffd17 	ldw	r2,-12(fp)
 202a978:	1886703a 	and	r3,r3,r2
 202a97c:	e0bffe17 	ldw	r2,-8(fp)
 202a980:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
 202a984:	00005806 	br	202aae8 <lwip_getsockopt_internal+0x264>

    case SO_TYPE:
      switch (NETCONNTYPE_GROUP(sock->conn->type)) {
 202a988:	e0bffb17 	ldw	r2,-20(fp)
 202a98c:	10800017 	ldw	r2,0(r2)
 202a990:	10800017 	ldw	r2,0(r2)
 202a994:	10803c0c 	andi	r2,r2,240
 202a998:	10c00820 	cmpeqi	r3,r2,32
 202a99c:	18000d1e 	bne	r3,zero,202a9d4 <lwip_getsockopt_internal+0x150>
 202a9a0:	10c01020 	cmpeqi	r3,r2,64
 202a9a4:	1800031e 	bne	r3,zero,202a9b4 <lwip_getsockopt_internal+0x130>
 202a9a8:	10800420 	cmpeqi	r2,r2,16
 202a9ac:	1000051e 	bne	r2,zero,202a9c4 <lwip_getsockopt_internal+0x140>
 202a9b0:	00000c06 	br	202a9e4 <lwip_getsockopt_internal+0x160>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
 202a9b4:	e0bffe17 	ldw	r2,-8(fp)
 202a9b8:	00c000c4 	movi	r3,3
 202a9bc:	10c00015 	stw	r3,0(r2)
        break;
 202a9c0:	00000f06 	br	202aa00 <lwip_getsockopt_internal+0x17c>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
 202a9c4:	e0bffe17 	ldw	r2,-8(fp)
 202a9c8:	00c00044 	movi	r3,1
 202a9cc:	10c00015 	stw	r3,0(r2)
        break;
 202a9d0:	00000b06 	br	202aa00 <lwip_getsockopt_internal+0x17c>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
 202a9d4:	e0bffe17 	ldw	r2,-8(fp)
 202a9d8:	00c00084 	movi	r3,2
 202a9dc:	10c00015 	stw	r3,0(r2)
        break;
 202a9e0:	00000706 	br	202aa00 <lwip_getsockopt_internal+0x17c>
      default: /* unrecognized socket type */
        *(int*)optval = sock->conn->type;
 202a9e4:	e0bffb17 	ldw	r2,-20(fp)
 202a9e8:	10800017 	ldw	r2,0(r2)
 202a9ec:	10800017 	ldw	r2,0(r2)
 202a9f0:	1007883a 	mov	r3,r2
 202a9f4:	e0bffe17 	ldw	r2,-8(fp)
 202a9f8:	10c00015 	stw	r3,0(r2)
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (sock->conn->type) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
 202a9fc:	00003a06 	br	202aae8 <lwip_getsockopt_internal+0x264>
 202aa00:	00003906 	br	202aae8 <lwip_getsockopt_internal+0x264>

    case SO_ERROR:
      /* only overwrite ERR_OK or tempoary errors */
      if ((sock->err == 0) || (sock->err == EINPROGRESS)) {
 202aa04:	e0bffb17 	ldw	r2,-20(fp)
 202aa08:	10800417 	ldw	r2,16(r2)
 202aa0c:	10000426 	beq	r2,zero,202aa20 <lwip_getsockopt_internal+0x19c>
 202aa10:	e0bffb17 	ldw	r2,-20(fp)
 202aa14:	10800417 	ldw	r2,16(r2)
 202aa18:	10801dd8 	cmpnei	r2,r2,119
 202aa1c:	10001a1e 	bne	r2,zero,202aa88 <lwip_getsockopt_internal+0x204>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
 202aa20:	e0bffb17 	ldw	r2,-20(fp)
 202aa24:	10800017 	ldw	r2,0(r2)
 202aa28:	10800303 	ldbu	r2,12(r2)
 202aa2c:	10803fcc 	andi	r2,r2,255
 202aa30:	1080201c 	xori	r2,r2,128
 202aa34:	10bfe004 	addi	r2,r2,-128
 202aa38:	0085c83a 	sub	r2,zero,r2
 202aa3c:	10800428 	cmpgeui	r2,r2,16
 202aa40:	10000e1e 	bne	r2,zero,202aa7c <lwip_getsockopt_internal+0x1f8>
 202aa44:	e0bffb17 	ldw	r2,-20(fp)
 202aa48:	10800017 	ldw	r2,0(r2)
 202aa4c:	10800303 	ldbu	r2,12(r2)
 202aa50:	10803fcc 	andi	r2,r2,255
 202aa54:	1080201c 	xori	r2,r2,128
 202aa58:	10bfe004 	addi	r2,r2,-128
 202aa5c:	0087c83a 	sub	r3,zero,r2
 202aa60:	00808134 	movhi	r2,516
 202aa64:	1085f404 	addi	r2,r2,6096
 202aa68:	18c7883a 	add	r3,r3,r3
 202aa6c:	18c7883a 	add	r3,r3,r3
 202aa70:	10c5883a 	add	r2,r2,r3
 202aa74:	10800017 	ldw	r2,0(r2)
 202aa78:	00000106 	br	202aa80 <lwip_getsockopt_internal+0x1fc>
 202aa7c:	00800144 	movi	r2,5
 202aa80:	e0fffb17 	ldw	r3,-20(fp)
 202aa84:	18800415 	stw	r2,16(r3)
      } 
      *(int *)optval = sock->err;
 202aa88:	e0bffb17 	ldw	r2,-20(fp)
 202aa8c:	10c00417 	ldw	r3,16(r2)
 202aa90:	e0bffe17 	ldw	r2,-8(fp)
 202aa94:	10c00015 	stw	r3,0(r2)
      sock->err = 0;
 202aa98:	e0bffb17 	ldw	r2,-20(fp)
 202aa9c:	10000415 	stw	zero,16(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
 202aaa0:	00001106 	br	202aae8 <lwip_getsockopt_internal+0x264>
      *(int *)optval = netconn_get_sendtimeout(sock->conn);
      break;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      *(int *)optval = netconn_get_recvtimeout(sock->conn);
 202aaa4:	e0bffb17 	ldw	r2,-20(fp)
 202aaa8:	10800017 	ldw	r2,0(r2)
 202aaac:	10c00817 	ldw	r3,32(r2)
 202aab0:	e0bffe17 	ldw	r2,-8(fp)
 202aab4:	10c00015 	stw	r3,0(r2)
      break;
 202aab8:	00000b06 	br	202aae8 <lwip_getsockopt_internal+0x264>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
      break;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_UDP
    case SO_NO_CHECK:
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
 202aabc:	e0bffb17 	ldw	r2,-20(fp)
 202aac0:	10800017 	ldw	r2,0(r2)
 202aac4:	10800217 	ldw	r2,8(r2)
 202aac8:	10800403 	ldbu	r2,16(r2)
 202aacc:	10803fcc 	andi	r2,r2,255
 202aad0:	1080004c 	andi	r2,r2,1
 202aad4:	1004c03a 	cmpne	r2,r2,zero
 202aad8:	10c03fcc 	andi	r3,r2,255
 202aadc:	e0bffe17 	ldw	r2,-8(fp)
 202aae0:	10c00015 	stw	r3,0(r2)
      break;
 202aae4:	0001883a 	nop
#endif /* LWIP_UDP*/
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 202aae8:	00005a06 	br	202ac54 <lwip_getsockopt_internal+0x3d0>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 202aaec:	e0bffd17 	ldw	r2,-12(fp)
 202aaf0:	10c00060 	cmpeqi	r3,r2,1
 202aaf4:	18000b1e 	bne	r3,zero,202ab24 <lwip_getsockopt_internal+0x2a0>
 202aaf8:	108000a0 	cmpeqi	r2,r2,2
 202aafc:	1000011e 	bne	r2,zero,202ab04 <lwip_getsockopt_internal+0x280>
                  s, *(int *)optval));
      break;
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 202ab00:	00001006 	br	202ab44 <lwip_getsockopt_internal+0x2c0>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
    case IP_TTL:
      *(int*)optval = sock->conn->pcb.ip->ttl;
 202ab04:	e0bffb17 	ldw	r2,-20(fp)
 202ab08:	10800017 	ldw	r2,0(r2)
 202ab0c:	10800217 	ldw	r2,8(r2)
 202ab10:	10800283 	ldbu	r2,10(r2)
 202ab14:	10c03fcc 	andi	r3,r2,255
 202ab18:	e0bffe17 	ldw	r2,-8(fp)
 202ab1c:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
 202ab20:	00000806 	br	202ab44 <lwip_getsockopt_internal+0x2c0>
    case IP_TOS:
      *(int*)optval = sock->conn->pcb.ip->tos;
 202ab24:	e0bffb17 	ldw	r2,-20(fp)
 202ab28:	10800017 	ldw	r2,0(r2)
 202ab2c:	10800217 	ldw	r2,8(r2)
 202ab30:	10800243 	ldbu	r2,9(r2)
 202ab34:	10c03fcc 	andi	r3,r2,255
 202ab38:	e0bffe17 	ldw	r2,-8(fp)
 202ab3c:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
 202ab40:	0001883a 	nop
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 202ab44:	00004306 	br	202ac54 <lwip_getsockopt_internal+0x3d0>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    switch (optname) {
 202ab48:	e0bffd17 	ldw	r2,-12(fp)
 202ab4c:	108001a8 	cmpgeui	r2,r2,6
 202ab50:	10003e1e 	bne	r2,zero,202ac4c <lwip_getsockopt_internal+0x3c8>
 202ab54:	e0bffd17 	ldw	r2,-12(fp)
 202ab58:	100690ba 	slli	r3,r2,2
 202ab5c:	008080f4 	movhi	r2,515
 202ab60:	10aadc04 	addi	r2,r2,-21648
 202ab64:	1885883a 	add	r2,r3,r2
 202ab68:	10800017 	ldw	r2,0(r2)
 202ab6c:	1000683a 	jmp	r2
 202ab70:	0202ac4c 	andi	r8,zero,2737
 202ab74:	0202ab88 	cmpgei	r8,zero,2734
 202ab78:	0202abb4 	movhi	r8,2734
 202ab7c:	0202abd4 	movui	r8,2735
 202ab80:	0202ac00 	call	202ac0 <__alt_mem_sdram_controller_0-0x1dfd540>
 202ab84:	0202ac2c 	andhi	r8,zero,2736
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
 202ab88:	e0bffb17 	ldw	r2,-20(fp)
 202ab8c:	10800017 	ldw	r2,0(r2)
 202ab90:	10800217 	ldw	r2,8(r2)
 202ab94:	10800883 	ldbu	r2,34(r2)
 202ab98:	10803fcc 	andi	r2,r2,255
 202ab9c:	1080100c 	andi	r2,r2,64
 202aba0:	1004c03a 	cmpne	r2,r2,zero
 202aba4:	10c03fcc 	andi	r3,r2,255
 202aba8:	e0bffe17 	ldw	r2,-8(fp)
 202abac:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
 202abb0:	00002706 	br	202ac50 <lwip_getsockopt_internal+0x3cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
 202abb4:	e0bffb17 	ldw	r2,-20(fp)
 202abb8:	10800017 	ldw	r2,0(r2)
 202abbc:	10800217 	ldw	r2,8(r2)
 202abc0:	10802517 	ldw	r2,148(r2)
 202abc4:	1007883a 	mov	r3,r2
 202abc8:	e0bffe17 	ldw	r2,-8(fp)
 202abcc:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
 202abd0:	00001f06 	br	202ac50 <lwip_getsockopt_internal+0x3cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
 202abd4:	e0bffb17 	ldw	r2,-20(fp)
 202abd8:	10800017 	ldw	r2,0(r2)
 202abdc:	10800217 	ldw	r2,8(r2)
 202abe0:	10802517 	ldw	r2,148(r2)
 202abe4:	0140fa04 	movi	r5,1000
 202abe8:	1009883a 	mov	r4,r2
 202abec:	200aadc0 	call	200aadc <__udivsi3>
 202abf0:	1007883a 	mov	r3,r2
 202abf4:	e0bffe17 	ldw	r2,-8(fp)
 202abf8:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
 202abfc:	00001406 	br	202ac50 <lwip_getsockopt_internal+0x3cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
 202ac00:	e0bffb17 	ldw	r2,-20(fp)
 202ac04:	10800017 	ldw	r2,0(r2)
 202ac08:	10800217 	ldw	r2,8(r2)
 202ac0c:	10802617 	ldw	r2,152(r2)
 202ac10:	0140fa04 	movi	r5,1000
 202ac14:	1009883a 	mov	r4,r2
 202ac18:	200aadc0 	call	200aadc <__udivsi3>
 202ac1c:	1007883a 	mov	r3,r2
 202ac20:	e0bffe17 	ldw	r2,-8(fp)
 202ac24:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
 202ac28:	00000906 	br	202ac50 <lwip_getsockopt_internal+0x3cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
 202ac2c:	e0bffb17 	ldw	r2,-20(fp)
 202ac30:	10800017 	ldw	r2,0(r2)
 202ac34:	10800217 	ldw	r2,8(r2)
 202ac38:	10802717 	ldw	r2,156(r2)
 202ac3c:	1007883a 	mov	r3,r2
 202ac40:	e0bffe17 	ldw	r2,-8(fp)
 202ac44:	10c00015 	stw	r3,0(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
 202ac48:	00000106 	br	202ac50 <lwip_getsockopt_internal+0x3cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 202ac4c:	0001883a 	nop
    }  /* switch (optname) */
    break;
 202ac50:	0001883a 	nop
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
  } /* switch (level) */
  sys_sem_signal(&sock->conn->op_completed);
 202ac54:	e0bffb17 	ldw	r2,-20(fp)
 202ac58:	10800017 	ldw	r2,0(r2)
 202ac5c:	10800404 	addi	r2,r2,16
 202ac60:	1009883a 	mov	r4,r2
 202ac64:	2014df00 	call	2014df0 <sys_sem_signal>
}
 202ac68:	0001883a 	nop
 202ac6c:	e037883a 	mov	sp,fp
 202ac70:	dfc00117 	ldw	ra,4(sp)
 202ac74:	df000017 	ldw	fp,0(sp)
 202ac78:	dec00204 	addi	sp,sp,8
 202ac7c:	f800283a 	ret

0202ac80 <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 202ac80:	defff204 	addi	sp,sp,-56
 202ac84:	dfc00d15 	stw	ra,52(sp)
 202ac88:	df000c15 	stw	fp,48(sp)
 202ac8c:	df000c04 	addi	fp,sp,48
 202ac90:	e13ffc15 	stw	r4,-16(fp)
 202ac94:	e17ffd15 	stw	r5,-12(fp)
 202ac98:	e1bffe15 	stw	r6,-8(fp)
 202ac9c:	e1ffff15 	stw	r7,-4(fp)
  struct lwip_sock *sock = get_socket(s);
 202aca0:	e13ffc17 	ldw	r4,-16(fp)
 202aca4:	20281c80 	call	20281c8 <get_socket>
 202aca8:	e0bff515 	stw	r2,-44(fp)
  err_t err = ERR_OK;
 202acac:	e03ff405 	stb	zero,-48(fp)
  struct lwip_setgetsockopt_data data;

  if (!sock) {
 202acb0:	e0bff517 	ldw	r2,-44(fp)
 202acb4:	1000021e 	bne	r2,zero,202acc0 <lwip_setsockopt+0x40>
    return -1;
 202acb8:	00bfffc4 	movi	r2,-1
 202acbc:	00009006 	br	202af00 <lwip_setsockopt+0x280>
  }

  if (NULL == optval) {
 202acc0:	e0bfff17 	ldw	r2,-4(fp)
 202acc4:	1000051e 	bne	r2,zero,202acdc <lwip_setsockopt+0x5c>
    sock_set_errno(sock, EFAULT);
 202acc8:	e0bff517 	ldw	r2,-44(fp)
 202accc:	00c00384 	movi	r3,14
 202acd0:	10c00415 	stw	r3,16(r2)
    return -1;
 202acd4:	00bfffc4 	movi	r2,-1
 202acd8:	00008906 	br	202af00 <lwip_setsockopt+0x280>
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {
 202acdc:	e0bffd17 	ldw	r2,-12(fp)
 202ace0:	10c001a0 	cmpeqi	r3,r2,6
 202ace4:	1800441e 	bne	r3,zero,202adf8 <lwip_setsockopt+0x178>
 202ace8:	10c3ffe0 	cmpeqi	r3,r2,4095
 202acec:	1800021e 	bne	r3,zero,202acf8 <lwip_setsockopt+0x78>
 202acf0:	10003226 	beq	r2,zero,202adbc <lwip_setsockopt+0x13c>
 202acf4:	00005606 	br	202ae50 <lwip_setsockopt+0x1d0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 202acf8:	e0bffe17 	ldw	r2,-8(fp)
 202acfc:	10c00820 	cmpeqi	r3,r2,32
 202ad00:	18000d1e 	bne	r3,zero,202ad38 <lwip_setsockopt+0xb8>
 202ad04:	10c00848 	cmpgei	r3,r2,33
 202ad08:	1800051e 	bne	r3,zero,202ad20 <lwip_setsockopt+0xa0>
 202ad0c:	10c00120 	cmpeqi	r3,r2,4
 202ad10:	1800091e 	bne	r3,zero,202ad38 <lwip_setsockopt+0xb8>
 202ad14:	10800220 	cmpeqi	r2,r2,8
 202ad18:	1000071e 	bne	r2,zero,202ad38 <lwip_setsockopt+0xb8>
 202ad1c:	00002006 	br	202ada0 <lwip_setsockopt+0x120>
 202ad20:	10c401a0 	cmpeqi	r3,r2,4102
 202ad24:	1800041e 	bne	r3,zero,202ad38 <lwip_setsockopt+0xb8>
 202ad28:	10c402a0 	cmpeqi	r3,r2,4106
 202ad2c:	1800081e 	bne	r3,zero,202ad50 <lwip_setsockopt+0xd0>
 202ad30:	10808020 	cmpeqi	r2,r2,512
 202ad34:	10001a26 	beq	r2,zero,202ada0 <lwip_setsockopt+0x120>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (optlen < sizeof(int)) {
 202ad38:	e0800217 	ldw	r2,8(fp)
 202ad3c:	10800128 	cmpgeui	r2,r2,4
 202ad40:	10001a1e 	bne	r2,zero,202adac <lwip_setsockopt+0x12c>
        err = EINVAL;
 202ad44:	00800584 	movi	r2,22
 202ad48:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 202ad4c:	00001706 	br	202adac <lwip_setsockopt+0x12c>
    case SO_NO_CHECK:
      if (optlen < sizeof(int)) {
 202ad50:	e0800217 	ldw	r2,8(fp)
 202ad54:	10800128 	cmpgeui	r2,r2,4
 202ad58:	1000021e 	bne	r2,zero,202ad64 <lwip_setsockopt+0xe4>
        err = EINVAL;
 202ad5c:	00800584 	movi	r2,22
 202ad60:	e0bff405 	stb	r2,-48(fp)
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 202ad64:	e0bff517 	ldw	r2,-44(fp)
 202ad68:	10800017 	ldw	r2,0(r2)
 202ad6c:	10800017 	ldw	r2,0(r2)
 202ad70:	10800818 	cmpnei	r2,r2,32
 202ad74:	1000071e 	bne	r2,zero,202ad94 <lwip_setsockopt+0x114>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
 202ad78:	e0bff517 	ldw	r2,-44(fp)
 202ad7c:	10800017 	ldw	r2,0(r2)
 202ad80:	10800217 	ldw	r2,8(r2)
 202ad84:	10800403 	ldbu	r2,16(r2)
 202ad88:	10803fcc 	andi	r2,r2,255
 202ad8c:	1080008c 	andi	r2,r2,2
    case SO_NO_CHECK:
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
 202ad90:	10000826 	beq	r2,zero,202adb4 <lwip_setsockopt+0x134>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
 202ad94:	00801a84 	movi	r2,106
 202ad98:	e0bff405 	stb	r2,-48(fp)
      }
#endif /* LWIP_UDP */
      break;
 202ad9c:	00000506 	br	202adb4 <lwip_setsockopt+0x134>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
 202ada0:	00801b44 	movi	r2,109
 202ada4:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 202ada8:	00002b06 	br	202ae58 <lwip_setsockopt+0x1d8>
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 202adac:	0001883a 	nop
 202adb0:	00002906 	br	202ae58 <lwip_setsockopt+0x1d8>
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
      }
#endif /* LWIP_UDP */
      break;
 202adb4:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 202adb8:	00002706 	br	202ae58 <lwip_setsockopt+0x1d8>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 202adbc:	e0bffe17 	ldw	r2,-8(fp)
 202adc0:	10bfffc4 	addi	r2,r2,-1
 202adc4:	108000a8 	cmpgeui	r2,r2,2
 202adc8:	1000061e 	bne	r2,zero,202ade4 <lwip_setsockopt+0x164>
    /* UNIMPL case IP_HDRINCL: */
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (optlen < sizeof(int)) {
 202adcc:	e0800217 	ldw	r2,8(fp)
 202add0:	10800128 	cmpgeui	r2,r2,4
 202add4:	1000061e 	bne	r2,zero,202adf0 <lwip_setsockopt+0x170>
        err = EINVAL;
 202add8:	00800584 	movi	r2,22
 202addc:	e0bff405 	stb	r2,-48(fp)
      }
      break;
 202ade0:	00000306 	br	202adf0 <lwip_setsockopt+0x170>
      break;
#endif /* LWIP_IGMP */
      default:
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                    s, optname));
        err = ENOPROTOOPT;
 202ade4:	00801b44 	movi	r2,109
 202ade8:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 202adec:	00001a06 	br	202ae58 <lwip_setsockopt+0x1d8>
    case IP_TTL:
    case IP_TOS:
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
 202adf0:	0001883a 	nop
      default:
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                    s, optname));
        err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 202adf4:	00001806 	br	202ae58 <lwip_setsockopt+0x1d8>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (optlen < sizeof(int)) {
 202adf8:	e0800217 	ldw	r2,8(fp)
 202adfc:	10800128 	cmpgeui	r2,r2,4
 202ae00:	1000031e 	bne	r2,zero,202ae10 <lwip_setsockopt+0x190>
      err = EINVAL;
 202ae04:	00800584 	movi	r2,22
 202ae08:	e0bff405 	stb	r2,-48(fp)
      break;
 202ae0c:	00001206 	br	202ae58 <lwip_setsockopt+0x1d8>
    }

    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
 202ae10:	e0bff517 	ldw	r2,-44(fp)
 202ae14:	10800017 	ldw	r2,0(r2)
 202ae18:	10800017 	ldw	r2,0(r2)
 202ae1c:	10800420 	cmpeqi	r2,r2,16
 202ae20:	1000021e 	bne	r2,zero,202ae2c <lwip_setsockopt+0x1ac>
      return 0;
 202ae24:	0005883a 	mov	r2,zero
 202ae28:	00003506 	br	202af00 <lwip_setsockopt+0x280>

    switch (optname) {
 202ae2c:	e0bffe17 	ldw	r2,-8(fp)
 202ae30:	10bfffc4 	addi	r2,r2,-1
 202ae34:	10800168 	cmpgeui	r2,r2,5
 202ae38:	10000326 	beq	r2,zero,202ae48 <lwip_setsockopt+0x1c8>
      break;

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
 202ae3c:	00801b44 	movi	r2,109
 202ae40:	e0bff405 	stb	r2,-48(fp)
    }  /* switch (optname) */
    break;
 202ae44:	00000406 	br	202ae58 <lwip_setsockopt+0x1d8>
#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
    case TCP_KEEPINTVL:
    case TCP_KEEPCNT:
#endif /* LWIP_TCP_KEEPALIVE */
      break;
 202ae48:	0001883a 	nop
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
 202ae4c:	00000206 	br	202ae58 <lwip_setsockopt+0x1d8>
#endif /* LWIP_UDP && LWIP_UDPLITE */
/* UNDEFINED LEVEL */
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
 202ae50:	00801b44 	movi	r2,109
 202ae54:	e0bff405 	stb	r2,-48(fp)
  }  /* switch (level) */


  if (err != ERR_OK) {
 202ae58:	e0bff407 	ldb	r2,-48(fp)
 202ae5c:	10000526 	beq	r2,zero,202ae74 <lwip_setsockopt+0x1f4>
    sock_set_errno(sock, err);
 202ae60:	e0fff407 	ldb	r3,-48(fp)
 202ae64:	e0bff517 	ldw	r2,-44(fp)
 202ae68:	10c00415 	stw	r3,16(r2)
    return -1;
 202ae6c:	00bfffc4 	movi	r2,-1
 202ae70:	00002306 	br	202af00 <lwip_setsockopt+0x280>
  }


  /* Now do the actual option processing */
  data.sock = sock;
 202ae74:	e0bff517 	ldw	r2,-44(fp)
 202ae78:	e0bff615 	stw	r2,-40(fp)
#ifdef LWIP_DEBUG
  data.s = s;
#endif /* LWIP_DEBUG */
  data.level = level;
 202ae7c:	e0bffd17 	ldw	r2,-12(fp)
 202ae80:	e0bff715 	stw	r2,-36(fp)
  data.optname = optname;
 202ae84:	e0bffe17 	ldw	r2,-8(fp)
 202ae88:	e0bff815 	stw	r2,-32(fp)
  data.optval = (void*)optval;
 202ae8c:	e0bfff17 	ldw	r2,-4(fp)
 202ae90:	e0bff915 	stw	r2,-28(fp)
  data.optlen = &optlen;
 202ae94:	e0800204 	addi	r2,fp,8
 202ae98:	e0bffa15 	stw	r2,-24(fp)
  data.err = err;
 202ae9c:	e0bff403 	ldbu	r2,-48(fp)
 202aea0:	e0bffb05 	stb	r2,-20(fp)
  tcpip_callback(lwip_setsockopt_internal, &data);
 202aea4:	e0bff604 	addi	r2,fp,-40
 202aea8:	01800044 	movi	r6,1
 202aeac:	100b883a 	mov	r5,r2
 202aeb0:	010080f4 	movhi	r4,515
 202aeb4:	212bc504 	addi	r4,r4,-20716
 202aeb8:	202b6a40 	call	202b6a4 <tcpip_callback_with_block>
  sys_arch_sem_wait(&sock->conn->op_completed, 0);
 202aebc:	e0bff517 	ldw	r2,-44(fp)
 202aec0:	10800017 	ldw	r2,0(r2)
 202aec4:	10800404 	addi	r2,r2,16
 202aec8:	000b883a 	mov	r5,zero
 202aecc:	1009883a 	mov	r4,r2
 202aed0:	2014e380 	call	2014e38 <sys_arch_sem_wait>
  /* maybe lwip_setsockopt_internal has changed err */
  err = data.err;
 202aed4:	e0bffb03 	ldbu	r2,-20(fp)
 202aed8:	e0bff405 	stb	r2,-48(fp)

  sock_set_errno(sock, err);
 202aedc:	e0fff407 	ldb	r3,-48(fp)
 202aee0:	e0bff517 	ldw	r2,-44(fp)
 202aee4:	10c00415 	stw	r3,16(r2)
  return err ? -1 : 0;
 202aee8:	e0bff407 	ldb	r2,-48(fp)
 202aeec:	10000226 	beq	r2,zero,202aef8 <lwip_setsockopt+0x278>
 202aef0:	00bfffc4 	movi	r2,-1
 202aef4:	00000206 	br	202af00 <lwip_setsockopt+0x280>
 202aef8:	0005883a 	mov	r2,zero
 202aefc:	0001883a 	nop
}
 202af00:	e037883a 	mov	sp,fp
 202af04:	dfc00117 	ldw	ra,4(sp)
 202af08:	df000017 	ldw	fp,0(sp)
 202af0c:	dec00204 	addi	sp,sp,8
 202af10:	f800283a 	ret

0202af14 <lwip_setsockopt_internal>:

static void
lwip_setsockopt_internal(void *arg)
{
 202af14:	defff804 	addi	sp,sp,-32
 202af18:	dfc00715 	stw	ra,28(sp)
 202af1c:	df000615 	stw	fp,24(sp)
 202af20:	df000604 	addi	fp,sp,24
 202af24:	e13fff15 	stw	r4,-4(fp)
  const void *optval;
  struct lwip_setgetsockopt_data *data;

  LWIP_ASSERT("arg != NULL", arg != NULL);

  data = (struct lwip_setgetsockopt_data*)arg;
 202af28:	e0bfff17 	ldw	r2,-4(fp)
 202af2c:	e0bffa15 	stw	r2,-24(fp)
  sock = data->sock;
 202af30:	e0bffa17 	ldw	r2,-24(fp)
 202af34:	10800017 	ldw	r2,0(r2)
 202af38:	e0bffb15 	stw	r2,-20(fp)
#ifdef LWIP_DEBUG
  s = data->s;
#endif /* LWIP_DEBUG */
  level = data->level;
 202af3c:	e0bffa17 	ldw	r2,-24(fp)
 202af40:	10800117 	ldw	r2,4(r2)
 202af44:	e0bffc15 	stw	r2,-16(fp)
  optname = data->optname;
 202af48:	e0bffa17 	ldw	r2,-24(fp)
 202af4c:	10800217 	ldw	r2,8(r2)
 202af50:	e0bffd15 	stw	r2,-12(fp)
  optval = data->optval;
 202af54:	e0bffa17 	ldw	r2,-24(fp)
 202af58:	10800317 	ldw	r2,12(r2)
 202af5c:	e0bffe15 	stw	r2,-8(fp)

  switch (level) {
 202af60:	e0bffc17 	ldw	r2,-16(fp)
 202af64:	10c001a0 	cmpeqi	r3,r2,6
 202af68:	1800651e 	bne	r3,zero,202b100 <lwip_setsockopt_internal+0x1ec>
 202af6c:	10c3ffe0 	cmpeqi	r3,r2,4095
 202af70:	1800021e 	bne	r3,zero,202af7c <lwip_setsockopt_internal+0x68>
 202af74:	10004d26 	beq	r2,zero,202b0ac <lwip_setsockopt_internal+0x198>
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
 202af78:	0000a906 	br	202b220 <lwip_setsockopt_internal+0x30c>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 202af7c:	e0bffd17 	ldw	r2,-12(fp)
 202af80:	10c00820 	cmpeqi	r3,r2,32
 202af84:	18000e1e 	bne	r3,zero,202afc0 <lwip_setsockopt_internal+0xac>
 202af88:	10c00848 	cmpgei	r3,r2,33
 202af8c:	1800051e 	bne	r3,zero,202afa4 <lwip_setsockopt_internal+0x90>
 202af90:	10c00120 	cmpeqi	r3,r2,4
 202af94:	18000a1e 	bne	r3,zero,202afc0 <lwip_setsockopt_internal+0xac>
 202af98:	10800220 	cmpeqi	r2,r2,8
 202af9c:	1000081e 	bne	r2,zero,202afc0 <lwip_setsockopt_internal+0xac>
      }
      break;
#endif /* LWIP_UDP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 202afa0:	00004106 	br	202b0a8 <lwip_setsockopt_internal+0x194>

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
 202afa4:	10c401a0 	cmpeqi	r3,r2,4102
 202afa8:	1800211e 	bne	r3,zero,202b030 <lwip_setsockopt_internal+0x11c>
 202afac:	10c402a0 	cmpeqi	r3,r2,4106
 202afb0:	1800251e 	bne	r3,zero,202b048 <lwip_setsockopt_internal+0x134>
 202afb4:	10808020 	cmpeqi	r2,r2,512
 202afb8:	1000011e 	bne	r2,zero,202afc0 <lwip_setsockopt_internal+0xac>
      }
      break;
#endif /* LWIP_UDP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 202afbc:	00003a06 	br	202b0a8 <lwip_setsockopt_internal+0x194>
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (*(int*)optval) {
 202afc0:	e0bffe17 	ldw	r2,-8(fp)
 202afc4:	10800017 	ldw	r2,0(r2)
 202afc8:	10000c26 	beq	r2,zero,202affc <lwip_setsockopt_internal+0xe8>
        ip_set_option(sock->conn->pcb.ip, optname);
 202afcc:	e0bffb17 	ldw	r2,-20(fp)
 202afd0:	10800017 	ldw	r2,0(r2)
 202afd4:	10800217 	ldw	r2,8(r2)
 202afd8:	e0fffb17 	ldw	r3,-20(fp)
 202afdc:	18c00017 	ldw	r3,0(r3)
 202afe0:	18c00217 	ldw	r3,8(r3)
 202afe4:	18c00203 	ldbu	r3,8(r3)
 202afe8:	1809883a 	mov	r4,r3
 202afec:	e0fffd17 	ldw	r3,-12(fp)
 202aff0:	20c6b03a 	or	r3,r4,r3
 202aff4:	10c00205 	stb	r3,8(r2)
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(int*)optval?"on":"off")));
      break;
 202aff8:	00002b06 	br	202b0a8 <lwip_setsockopt_internal+0x194>
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (*(int*)optval) {
        ip_set_option(sock->conn->pcb.ip, optname);
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
 202affc:	e0bffb17 	ldw	r2,-20(fp)
 202b000:	10800017 	ldw	r2,0(r2)
 202b004:	10800217 	ldw	r2,8(r2)
 202b008:	e0fffb17 	ldw	r3,-20(fp)
 202b00c:	18c00017 	ldw	r3,0(r3)
 202b010:	18c00217 	ldw	r3,8(r3)
 202b014:	18c00203 	ldbu	r3,8(r3)
 202b018:	1809883a 	mov	r4,r3
 202b01c:	e0fffd17 	ldw	r3,-12(fp)
 202b020:	00c6303a 	nor	r3,zero,r3
 202b024:	20c6703a 	and	r3,r4,r3
 202b028:	10c00205 	stb	r3,8(r2)
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(int*)optval?"on":"off")));
      break;
 202b02c:	00001e06 	br	202b0a8 <lwip_setsockopt_internal+0x194>
      netconn_set_sendtimeout(sock->conn, (s32_t)*(int*)optval);
      break;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      netconn_set_recvtimeout(sock->conn, *(int*)optval);
 202b030:	e0bffb17 	ldw	r2,-20(fp)
 202b034:	10800017 	ldw	r2,0(r2)
 202b038:	e0fffe17 	ldw	r3,-8(fp)
 202b03c:	18c00017 	ldw	r3,0(r3)
 202b040:	10c00815 	stw	r3,32(r2)
      break;
 202b044:	00001806 	br	202b0a8 <lwip_setsockopt_internal+0x194>
      netconn_set_recvbufsize(sock->conn, *(int*)optval);
      break;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_UDP
    case SO_NO_CHECK:
      if (*(int*)optval) {
 202b048:	e0bffe17 	ldw	r2,-8(fp)
 202b04c:	10800017 	ldw	r2,0(r2)
 202b050:	10000a26 	beq	r2,zero,202b07c <lwip_setsockopt_internal+0x168>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
 202b054:	e0bffb17 	ldw	r2,-20(fp)
 202b058:	10800017 	ldw	r2,0(r2)
 202b05c:	10800217 	ldw	r2,8(r2)
 202b060:	e0fffb17 	ldw	r3,-20(fp)
 202b064:	18c00017 	ldw	r3,0(r3)
 202b068:	18c00217 	ldw	r3,8(r3)
 202b06c:	18c00403 	ldbu	r3,16(r3)
 202b070:	18c00054 	ori	r3,r3,1
 202b074:	10c00405 	stb	r3,16(r2)
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
 202b078:	00000a06 	br	202b0a4 <lwip_setsockopt_internal+0x190>
#if LWIP_UDP
    case SO_NO_CHECK:
      if (*(int*)optval) {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
 202b07c:	e0bffb17 	ldw	r2,-20(fp)
 202b080:	10800017 	ldw	r2,0(r2)
 202b084:	10800217 	ldw	r2,8(r2)
 202b088:	e0fffb17 	ldw	r3,-20(fp)
 202b08c:	18c00017 	ldw	r3,0(r3)
 202b090:	18c00217 	ldw	r3,8(r3)
 202b094:	19000403 	ldbu	r4,16(r3)
 202b098:	00ffff84 	movi	r3,-2
 202b09c:	20c6703a 	and	r3,r4,r3
 202b0a0:	10c00405 	stb	r3,16(r2)
      }
      break;
 202b0a4:	0001883a 	nop
#endif /* LWIP_UDP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 202b0a8:	00005d06 	br	202b220 <lwip_setsockopt_internal+0x30c>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
 202b0ac:	e0bffd17 	ldw	r2,-12(fp)
 202b0b0:	10c00060 	cmpeqi	r3,r2,1
 202b0b4:	18000a1e 	bne	r3,zero,202b0e0 <lwip_setsockopt_internal+0x1cc>
 202b0b8:	108000a0 	cmpeqi	r2,r2,2
 202b0bc:	1000011e 	bne	r2,zero,202b0c4 <lwip_setsockopt_internal+0x1b0>
      }
      break;
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 202b0c0:	00000e06 	br	202b0fc <lwip_setsockopt_internal+0x1e8>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
    case IP_TTL:
      sock->conn->pcb.ip->ttl = (u8_t)(*(int*)optval);
 202b0c4:	e0bffb17 	ldw	r2,-20(fp)
 202b0c8:	10800017 	ldw	r2,0(r2)
 202b0cc:	10800217 	ldw	r2,8(r2)
 202b0d0:	e0fffe17 	ldw	r3,-8(fp)
 202b0d4:	18c00017 	ldw	r3,0(r3)
 202b0d8:	10c00285 	stb	r3,10(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
 202b0dc:	00000706 	br	202b0fc <lwip_setsockopt_internal+0x1e8>
    case IP_TOS:
      sock->conn->pcb.ip->tos = (u8_t)(*(int*)optval);
 202b0e0:	e0bffb17 	ldw	r2,-20(fp)
 202b0e4:	10800017 	ldw	r2,0(r2)
 202b0e8:	10800217 	ldw	r2,8(r2)
 202b0ec:	e0fffe17 	ldw	r3,-8(fp)
 202b0f0:	18c00017 	ldw	r3,0(r3)
 202b0f4:	10c00245 	stb	r3,9(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
 202b0f8:	0001883a 	nop
#endif /* LWIP_IGMP */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
    }  /* switch (optname) */
    break;
 202b0fc:	00004806 	br	202b220 <lwip_setsockopt_internal+0x30c>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    switch (optname) {
 202b100:	e0bffd17 	ldw	r2,-12(fp)
 202b104:	108001a8 	cmpgeui	r2,r2,6
 202b108:	1000431e 	bne	r2,zero,202b218 <lwip_setsockopt_internal+0x304>
 202b10c:	e0bffd17 	ldw	r2,-12(fp)
 202b110:	100690ba 	slli	r3,r2,2
 202b114:	008080f4 	movhi	r2,515
 202b118:	10ac4a04 	addi	r2,r2,-20184
 202b11c:	1885883a 	add	r2,r3,r2
 202b120:	10800017 	ldw	r2,0(r2)
 202b124:	1000683a 	jmp	r2
 202b128:	0202b218 	cmpnei	r8,zero,2760
 202b12c:	0202b140 	call	202b14 <__alt_mem_sdram_controller_0-0x1dfd4ec>
 202b130:	0202b1a0 	cmpeqi	r8,zero,2758
 202b134:	0202b1bc 	xorhi	r8,zero,2758
 202b138:	0202b1dc 	xori	r8,zero,2759
 202b13c:	0202b1fc 	xorhi	r8,zero,2759
    case TCP_NODELAY:
      if (*(int*)optval) {
 202b140:	e0bffe17 	ldw	r2,-8(fp)
 202b144:	10800017 	ldw	r2,0(r2)
 202b148:	10000a26 	beq	r2,zero,202b174 <lwip_setsockopt_internal+0x260>
        tcp_nagle_disable(sock->conn->pcb.tcp);
 202b14c:	e0bffb17 	ldw	r2,-20(fp)
 202b150:	10800017 	ldw	r2,0(r2)
 202b154:	10800217 	ldw	r2,8(r2)
 202b158:	e0fffb17 	ldw	r3,-20(fp)
 202b15c:	18c00017 	ldw	r3,0(r3)
 202b160:	18c00217 	ldw	r3,8(r3)
 202b164:	18c00883 	ldbu	r3,34(r3)
 202b168:	18c01014 	ori	r3,r3,64
 202b16c:	10c00885 	stb	r3,34(r2)
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(int *)optval)?"on":"off") );
      break;
 202b170:	00002a06 	br	202b21c <lwip_setsockopt_internal+0x308>
    switch (optname) {
    case TCP_NODELAY:
      if (*(int*)optval) {
        tcp_nagle_disable(sock->conn->pcb.tcp);
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
 202b174:	e0bffb17 	ldw	r2,-20(fp)
 202b178:	10800017 	ldw	r2,0(r2)
 202b17c:	10800217 	ldw	r2,8(r2)
 202b180:	e0fffb17 	ldw	r3,-20(fp)
 202b184:	18c00017 	ldw	r3,0(r3)
 202b188:	18c00217 	ldw	r3,8(r3)
 202b18c:	19000883 	ldbu	r4,34(r3)
 202b190:	00ffefc4 	movi	r3,-65
 202b194:	20c6703a 	and	r3,r4,r3
 202b198:	10c00885 	stb	r3,34(r2)
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(int *)optval)?"on":"off") );
      break;
 202b19c:	00001f06 	br	202b21c <lwip_setsockopt_internal+0x308>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(int*)optval);
 202b1a0:	e0bffb17 	ldw	r2,-20(fp)
 202b1a4:	10800017 	ldw	r2,0(r2)
 202b1a8:	10800217 	ldw	r2,8(r2)
 202b1ac:	e0fffe17 	ldw	r3,-8(fp)
 202b1b0:	18c00017 	ldw	r3,0(r3)
 202b1b4:	10c02515 	stw	r3,148(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
 202b1b8:	00001806 	br	202b21c <lwip_setsockopt_internal+0x308>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(int*)optval);
 202b1bc:	e0bffb17 	ldw	r2,-20(fp)
 202b1c0:	10800017 	ldw	r2,0(r2)
 202b1c4:	10800217 	ldw	r2,8(r2)
 202b1c8:	e0fffe17 	ldw	r3,-8(fp)
 202b1cc:	18c00017 	ldw	r3,0(r3)
 202b1d0:	18c0fa24 	muli	r3,r3,1000
 202b1d4:	10c02515 	stw	r3,148(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
 202b1d8:	00001006 	br	202b21c <lwip_setsockopt_internal+0x308>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(int*)optval);
 202b1dc:	e0bffb17 	ldw	r2,-20(fp)
 202b1e0:	10800017 	ldw	r2,0(r2)
 202b1e4:	10800217 	ldw	r2,8(r2)
 202b1e8:	e0fffe17 	ldw	r3,-8(fp)
 202b1ec:	18c00017 	ldw	r3,0(r3)
 202b1f0:	18c0fa24 	muli	r3,r3,1000
 202b1f4:	10c02615 	stw	r3,152(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
 202b1f8:	00000806 	br	202b21c <lwip_setsockopt_internal+0x308>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(int*)optval);
 202b1fc:	e0bffb17 	ldw	r2,-20(fp)
 202b200:	10800017 	ldw	r2,0(r2)
 202b204:	10800217 	ldw	r2,8(r2)
 202b208:	e0fffe17 	ldw	r3,-8(fp)
 202b20c:	18c00017 	ldw	r3,0(r3)
 202b210:	10c02715 	stw	r3,156(r2)
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
 202b214:	00000106 	br	202b21c <lwip_setsockopt_internal+0x308>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_ASSERT("unhandled optname", 0);
      break;
 202b218:	0001883a 	nop
    }  /* switch (optname) */
    break;
 202b21c:	0001883a 	nop
#endif /* LWIP_UDP */
  default:
    LWIP_ASSERT("unhandled level", 0);
    break;
  }  /* switch (level) */
  sys_sem_signal(&sock->conn->op_completed);
 202b220:	e0bffb17 	ldw	r2,-20(fp)
 202b224:	10800017 	ldw	r2,0(r2)
 202b228:	10800404 	addi	r2,r2,16
 202b22c:	1009883a 	mov	r4,r2
 202b230:	2014df00 	call	2014df0 <sys_sem_signal>
}
 202b234:	0001883a 	nop
 202b238:	e037883a 	mov	sp,fp
 202b23c:	dfc00117 	ldw	ra,4(sp)
 202b240:	df000017 	ldw	fp,0(sp)
 202b244:	dec00204 	addi	sp,sp,8
 202b248:	f800283a 	ret

0202b24c <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
 202b24c:	defff904 	addi	sp,sp,-28
 202b250:	dfc00615 	stw	ra,24(sp)
 202b254:	df000515 	stw	fp,20(sp)
 202b258:	df000504 	addi	fp,sp,20
 202b25c:	e13ffd15 	stw	r4,-12(fp)
 202b260:	e17ffe15 	stw	r5,-8(fp)
 202b264:	e1bfff15 	stw	r6,-4(fp)
  struct lwip_sock *sock = get_socket(s);
 202b268:	e13ffd17 	ldw	r4,-12(fp)
 202b26c:	20281c80 	call	20281c8 <get_socket>
 202b270:	e0bffc15 	stw	r2,-16(fp)
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  s16_t recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
 202b274:	e0bffc17 	ldw	r2,-16(fp)
 202b278:	1000021e 	bne	r2,zero,202b284 <lwip_ioctl+0x38>
    return -1;
 202b27c:	00bfffc4 	movi	r2,-1
 202b280:	00002606 	br	202b31c <lwip_ioctl+0xd0>
  }

  switch (cmd) {
 202b284:	e0fffe17 	ldw	r3,-8(fp)
 202b288:	00a00134 	movhi	r2,32772
 202b28c:	10999f84 	addi	r2,r2,26238
 202b290:	18801e1e 	bne	r3,r2,202b30c <lwip_ioctl+0xc0>
    sock_set_errno(sock, 0);
    return 0;
#endif /* LWIP_SO_RCVBUF */

  case FIONBIO:
    val = 0;
 202b294:	e03ffb05 	stb	zero,-20(fp)
    if (argp && *(u32_t*)argp) {
 202b298:	e0bfff17 	ldw	r2,-4(fp)
 202b29c:	10000526 	beq	r2,zero,202b2b4 <lwip_ioctl+0x68>
 202b2a0:	e0bfff17 	ldw	r2,-4(fp)
 202b2a4:	10800017 	ldw	r2,0(r2)
 202b2a8:	10000226 	beq	r2,zero,202b2b4 <lwip_ioctl+0x68>
      val = 1;
 202b2ac:	00800044 	movi	r2,1
 202b2b0:	e0bffb05 	stb	r2,-20(fp)
    }
    netconn_set_nonblocking(sock->conn, val);
 202b2b4:	e0bffb03 	ldbu	r2,-20(fp)
 202b2b8:	10000826 	beq	r2,zero,202b2dc <lwip_ioctl+0x90>
 202b2bc:	e0bffc17 	ldw	r2,-16(fp)
 202b2c0:	10800017 	ldw	r2,0(r2)
 202b2c4:	e0fffc17 	ldw	r3,-16(fp)
 202b2c8:	18c00017 	ldw	r3,0(r3)
 202b2cc:	18c00903 	ldbu	r3,36(r3)
 202b2d0:	18c00094 	ori	r3,r3,2
 202b2d4:	10c00905 	stb	r3,36(r2)
 202b2d8:	00000806 	br	202b2fc <lwip_ioctl+0xb0>
 202b2dc:	e0bffc17 	ldw	r2,-16(fp)
 202b2e0:	10800017 	ldw	r2,0(r2)
 202b2e4:	e0fffc17 	ldw	r3,-16(fp)
 202b2e8:	18c00017 	ldw	r3,0(r3)
 202b2ec:	19000903 	ldbu	r4,36(r3)
 202b2f0:	00ffff44 	movi	r3,-3
 202b2f4:	20c6703a 	and	r3,r4,r3
 202b2f8:	10c00905 	stb	r3,36(r2)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
 202b2fc:	e0bffc17 	ldw	r2,-16(fp)
 202b300:	10000415 	stw	zero,16(r2)
    return 0;
 202b304:	0005883a 	mov	r2,zero
 202b308:	00000406 	br	202b31c <lwip_ioctl+0xd0>

  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
 202b30c:	e0bffc17 	ldw	r2,-16(fp)
 202b310:	00c01604 	movi	r3,88
 202b314:	10c00415 	stw	r3,16(r2)
    return -1;
 202b318:	00bfffc4 	movi	r2,-1
  } /* switch (cmd) */
}
 202b31c:	e037883a 	mov	sp,fp
 202b320:	dfc00117 	ldw	ra,4(sp)
 202b324:	df000017 	ldw	fp,0(sp)
 202b328:	dec00204 	addi	sp,sp,8
 202b32c:	f800283a 	ret

0202b330 <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
 202b330:	defff904 	addi	sp,sp,-28
 202b334:	dfc00615 	stw	ra,24(sp)
 202b338:	df000515 	stw	fp,20(sp)
 202b33c:	df000504 	addi	fp,sp,20
 202b340:	e13ffd15 	stw	r4,-12(fp)
 202b344:	e17ffe15 	stw	r5,-8(fp)
 202b348:	e1bfff15 	stw	r6,-4(fp)
  struct lwip_sock *sock = get_socket(s);
 202b34c:	e13ffd17 	ldw	r4,-12(fp)
 202b350:	20281c80 	call	20281c8 <get_socket>
 202b354:	e0bffc15 	stw	r2,-16(fp)
  int ret = -1;
 202b358:	00bfffc4 	movi	r2,-1
 202b35c:	e0bffb15 	stw	r2,-20(fp)

  if (!sock || !sock->conn) {
 202b360:	e0bffc17 	ldw	r2,-16(fp)
 202b364:	10000326 	beq	r2,zero,202b374 <lwip_fcntl+0x44>
 202b368:	e0bffc17 	ldw	r2,-16(fp)
 202b36c:	10800017 	ldw	r2,0(r2)
 202b370:	1000021e 	bne	r2,zero,202b37c <lwip_fcntl+0x4c>
    return -1;
 202b374:	00bfffc4 	movi	r2,-1
 202b378:	00002906 	br	202b420 <lwip_fcntl+0xf0>
  }

  switch (cmd) {
 202b37c:	e0bffe17 	ldw	r2,-8(fp)
 202b380:	10c000e0 	cmpeqi	r3,r2,3
 202b384:	1800031e 	bne	r3,zero,202b394 <lwip_fcntl+0x64>
 202b388:	10800120 	cmpeqi	r2,r2,4
 202b38c:	10000a1e 	bne	r2,zero,202b3b8 <lwip_fcntl+0x88>
      ret = 0;
    }
    break;
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    break;
 202b390:	00002206 	br	202b41c <lwip_fcntl+0xec>
    return -1;
  }

  switch (cmd) {
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
 202b394:	e0bffc17 	ldw	r2,-16(fp)
 202b398:	10800017 	ldw	r2,0(r2)
 202b39c:	10800903 	ldbu	r2,36(r2)
 202b3a0:	10803fcc 	andi	r2,r2,255
 202b3a4:	1080008c 	andi	r2,r2,2
 202b3a8:	1004c03a 	cmpne	r2,r2,zero
 202b3ac:	10803fcc 	andi	r2,r2,255
 202b3b0:	e0bffb15 	stw	r2,-20(fp)
    break;
 202b3b4:	00001906 	br	202b41c <lwip_fcntl+0xec>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
 202b3b8:	e0ffff17 	ldw	r3,-4(fp)
 202b3bc:	00bfff84 	movi	r2,-2
 202b3c0:	1884703a 	and	r2,r3,r2
 202b3c4:	1000141e 	bne	r2,zero,202b418 <lwip_fcntl+0xe8>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
 202b3c8:	e0bfff17 	ldw	r2,-4(fp)
 202b3cc:	1080004c 	andi	r2,r2,1
 202b3d0:	10000826 	beq	r2,zero,202b3f4 <lwip_fcntl+0xc4>
 202b3d4:	e0bffc17 	ldw	r2,-16(fp)
 202b3d8:	10800017 	ldw	r2,0(r2)
 202b3dc:	e0fffc17 	ldw	r3,-16(fp)
 202b3e0:	18c00017 	ldw	r3,0(r3)
 202b3e4:	18c00903 	ldbu	r3,36(r3)
 202b3e8:	18c00094 	ori	r3,r3,2
 202b3ec:	10c00905 	stb	r3,36(r2)
 202b3f0:	00000806 	br	202b414 <lwip_fcntl+0xe4>
 202b3f4:	e0bffc17 	ldw	r2,-16(fp)
 202b3f8:	10800017 	ldw	r2,0(r2)
 202b3fc:	e0fffc17 	ldw	r3,-16(fp)
 202b400:	18c00017 	ldw	r3,0(r3)
 202b404:	19000903 	ldbu	r4,36(r3)
 202b408:	00ffff44 	movi	r3,-3
 202b40c:	20c6703a 	and	r3,r4,r3
 202b410:	10c00905 	stb	r3,36(r2)
      ret = 0;
 202b414:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 202b418:	0001883a 	nop
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    break;
  }
  return ret;
 202b41c:	e0bffb17 	ldw	r2,-20(fp)
}
 202b420:	e037883a 	mov	sp,fp
 202b424:	dfc00117 	ldw	ra,4(sp)
 202b428:	df000017 	ldw	fp,0(sp)
 202b42c:	dec00204 	addi	sp,sp,8
 202b430:	f800283a 	ret

0202b434 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 202b434:	defffc04 	addi	sp,sp,-16
 202b438:	dfc00315 	stw	ra,12(sp)
 202b43c:	df000215 	stw	fp,8(sp)
 202b440:	df000204 	addi	fp,sp,8
 202b444:	e13fff15 	stw	r4,-4(fp)
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 202b448:	d0a80d17 	ldw	r2,-24524(gp)
 202b44c:	10000426 	beq	r2,zero,202b460 <tcpip_thread+0x2c>
    tcpip_init_done(tcpip_init_done_arg);
 202b450:	d0a80d17 	ldw	r2,-24524(gp)
 202b454:	d0e80e17 	ldw	r3,-24520(gp)
 202b458:	1809883a 	mov	r4,r3
 202b45c:	103ee83a 	callr	r2
  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    sys_timeouts_mbox_fetch(&mbox, (void **)&msg);
 202b460:	e17ffe04 	addi	r5,fp,-8
 202b464:	d1280f04 	addi	r4,gp,-24516
 202b468:	20218600 	call	2021860 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
    switch (msg->type) {
 202b46c:	e0bffe17 	ldw	r2,-8(fp)
 202b470:	10800017 	ldw	r2,0(r2)
 202b474:	10c001a8 	cmpgeui	r3,r2,6
 202b478:	18005c1e 	bne	r3,zero,202b5ec <tcpip_thread+0x1b8>
 202b47c:	100690ba 	slli	r3,r2,2
 202b480:	008080f4 	movhi	r2,515
 202b484:	10ad2504 	addi	r2,r2,-19308
 202b488:	1885883a 	add	r2,r3,r2
 202b48c:	10800017 	ldw	r2,0(r2)
 202b490:	1000683a 	jmp	r2
 202b494:	0202b4ac 	andhi	r8,zero,2770
 202b498:	0202b4d0 	cmplti	r8,zero,2771
 202b49c:	0202b538 	rdprs	r8,zero,2772
 202b4a0:	0202b574 	movhi	r8,2773
 202b4a4:	0202b5a4 	muli	r8,zero,2774
 202b4a8:	0202b5d0 	cmplti	r8,zero,2775
#if LWIP_NETCONN
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
 202b4ac:	e0bffe17 	ldw	r2,-8(fp)
 202b4b0:	10800217 	ldw	r2,8(r2)
 202b4b4:	10800017 	ldw	r2,0(r2)
 202b4b8:	e0fffe17 	ldw	r3,-8(fp)
 202b4bc:	18c00217 	ldw	r3,8(r3)
 202b4c0:	18c00104 	addi	r3,r3,4
 202b4c4:	1809883a 	mov	r4,r3
 202b4c8:	103ee83a 	callr	r2
      break;
 202b4cc:	00004806 	br	202b5f0 <tcpip_thread+0x1bc>

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ETHERNET
      if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 202b4d0:	e0bffe17 	ldw	r2,-8(fp)
 202b4d4:	10800317 	ldw	r2,12(r2)
 202b4d8:	10800e43 	ldbu	r2,57(r2)
 202b4dc:	10803fcc 	andi	r2,r2,255
 202b4e0:	1080180c 	andi	r2,r2,96
 202b4e4:	10000826 	beq	r2,zero,202b508 <tcpip_thread+0xd4>
        ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
 202b4e8:	e0bffe17 	ldw	r2,-8(fp)
 202b4ec:	10c00217 	ldw	r3,8(r2)
 202b4f0:	e0bffe17 	ldw	r2,-8(fp)
 202b4f4:	10800317 	ldw	r2,12(r2)
 202b4f8:	100b883a 	mov	r5,r2
 202b4fc:	1809883a 	mov	r4,r3
 202b500:	20242740 	call	2024274 <ethernet_input>
 202b504:	00000706 	br	202b524 <tcpip_thread+0xf0>
      } else
#endif /* LWIP_ETHERNET */
      {
        ip_input(msg->msg.inp.p, msg->msg.inp.netif);
 202b508:	e0bffe17 	ldw	r2,-8(fp)
 202b50c:	10c00217 	ldw	r3,8(r2)
 202b510:	e0bffe17 	ldw	r2,-8(fp)
 202b514:	10800317 	ldw	r2,12(r2)
 202b518:	100b883a 	mov	r5,r2
 202b51c:	1809883a 	mov	r4,r3
 202b520:	2031cb80 	call	2031cb8 <ip_input>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 202b524:	e0bffe17 	ldw	r2,-8(fp)
 202b528:	100b883a 	mov	r5,r2
 202b52c:	01000284 	movi	r4,10
 202b530:	20344ac0 	call	20344ac <memp_free>
      break;
 202b534:	00002e06 	br	202b5f0 <tcpip_thread+0x1bc>
#endif /* LWIP_NETIF_API */

#if LWIP_TCPIP_TIMEOUT
    case TCPIP_MSG_TIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 202b538:	e0bffe17 	ldw	r2,-8(fp)
 202b53c:	10c00217 	ldw	r3,8(r2)
 202b540:	e0bffe17 	ldw	r2,-8(fp)
 202b544:	11000317 	ldw	r4,12(r2)
 202b548:	e0bffe17 	ldw	r2,-8(fp)
 202b54c:	10800417 	ldw	r2,16(r2)
 202b550:	100d883a 	mov	r6,r2
 202b554:	200b883a 	mov	r5,r4
 202b558:	1809883a 	mov	r4,r3
 202b55c:	20215f00 	call	20215f0 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 202b560:	e0bffe17 	ldw	r2,-8(fp)
 202b564:	100b883a 	mov	r5,r2
 202b568:	01000244 	movi	r4,9
 202b56c:	20344ac0 	call	20344ac <memp_free>
      break;
 202b570:	00001f06 	br	202b5f0 <tcpip_thread+0x1bc>
    case TCPIP_MSG_UNTIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 202b574:	e0bffe17 	ldw	r2,-8(fp)
 202b578:	10c00317 	ldw	r3,12(r2)
 202b57c:	e0bffe17 	ldw	r2,-8(fp)
 202b580:	10800417 	ldw	r2,16(r2)
 202b584:	100b883a 	mov	r5,r2
 202b588:	1809883a 	mov	r4,r3
 202b58c:	202176c0 	call	202176c <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 202b590:	e0bffe17 	ldw	r2,-8(fp)
 202b594:	100b883a 	mov	r5,r2
 202b598:	01000244 	movi	r4,9
 202b59c:	20344ac0 	call	20344ac <memp_free>
      break;
 202b5a0:	00001306 	br	202b5f0 <tcpip_thread+0x1bc>
#endif /* LWIP_TCPIP_TIMEOUT */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 202b5a4:	e0bffe17 	ldw	r2,-8(fp)
 202b5a8:	10800217 	ldw	r2,8(r2)
 202b5ac:	e0fffe17 	ldw	r3,-8(fp)
 202b5b0:	18c00317 	ldw	r3,12(r3)
 202b5b4:	1809883a 	mov	r4,r3
 202b5b8:	103ee83a 	callr	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 202b5bc:	e0bffe17 	ldw	r2,-8(fp)
 202b5c0:	100b883a 	mov	r5,r2
 202b5c4:	01000244 	movi	r4,9
 202b5c8:	20344ac0 	call	20344ac <memp_free>
      break;
 202b5cc:	00000806 	br	202b5f0 <tcpip_thread+0x1bc>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 202b5d0:	e0bffe17 	ldw	r2,-8(fp)
 202b5d4:	10800217 	ldw	r2,8(r2)
 202b5d8:	e0fffe17 	ldw	r3,-8(fp)
 202b5dc:	18c00317 	ldw	r3,12(r3)
 202b5e0:	1809883a 	mov	r4,r3
 202b5e4:	103ee83a 	callr	r2
      break;
 202b5e8:	00000106 	br	202b5f0 <tcpip_thread+0x1bc>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
      break;
 202b5ec:	0001883a 	nop
    }
  }
 202b5f0:	003f9b06 	br	202b460 <__alt_mem_mem_0+0xfd00b460>

0202b5f4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 202b5f4:	defffb04 	addi	sp,sp,-20
 202b5f8:	dfc00415 	stw	ra,16(sp)
 202b5fc:	df000315 	stw	fp,12(sp)
 202b600:	df000304 	addi	fp,sp,12
 202b604:	e13ffe15 	stw	r4,-8(fp)
 202b608:	e17fff15 	stw	r5,-4(fp)
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  if (!sys_mbox_valid(&mbox)) {
 202b60c:	d0a80f17 	ldw	r2,-24516(gp)
 202b610:	1000021e 	bne	r2,zero,202b61c <tcpip_input+0x28>
    return ERR_VAL;
 202b614:	00bffe84 	movi	r2,-6
 202b618:	00001d06 	br	202b690 <tcpip_input+0x9c>
  }
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 202b61c:	01000284 	movi	r4,10
 202b620:	20342e00 	call	20342e0 <memp_malloc>
 202b624:	e0bffd15 	stw	r2,-12(fp)
  if (msg == NULL) {
 202b628:	e0bffd17 	ldw	r2,-12(fp)
 202b62c:	1000021e 	bne	r2,zero,202b638 <tcpip_input+0x44>
    return ERR_MEM;
 202b630:	00bfffc4 	movi	r2,-1
 202b634:	00001606 	br	202b690 <tcpip_input+0x9c>
  }

  msg->type = TCPIP_MSG_INPKT;
 202b638:	e0bffd17 	ldw	r2,-12(fp)
 202b63c:	00c00044 	movi	r3,1
 202b640:	10c00015 	stw	r3,0(r2)
  msg->msg.inp.p = p;
 202b644:	e0bffd17 	ldw	r2,-12(fp)
 202b648:	e0fffe17 	ldw	r3,-8(fp)
 202b64c:	10c00215 	stw	r3,8(r2)
  msg->msg.inp.netif = inp;
 202b650:	e0bffd17 	ldw	r2,-12(fp)
 202b654:	e0ffff17 	ldw	r3,-4(fp)
 202b658:	10c00315 	stw	r3,12(r2)
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 202b65c:	e17ffd17 	ldw	r5,-12(fp)
 202b660:	d1280f04 	addi	r4,gp,-24516
 202b664:	20152500 	call	2015250 <sys_mbox_trypost>
 202b668:	10803fcc 	andi	r2,r2,255
 202b66c:	1080201c 	xori	r2,r2,128
 202b670:	10bfe004 	addi	r2,r2,-128
 202b674:	10000526 	beq	r2,zero,202b68c <tcpip_input+0x98>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 202b678:	e17ffd17 	ldw	r5,-12(fp)
 202b67c:	01000284 	movi	r4,10
 202b680:	20344ac0 	call	20344ac <memp_free>
    return ERR_MEM;
 202b684:	00bfffc4 	movi	r2,-1
 202b688:	00000106 	br	202b690 <tcpip_input+0x9c>
  }
  return ERR_OK;
 202b68c:	0005883a 	mov	r2,zero
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 202b690:	e037883a 	mov	sp,fp
 202b694:	dfc00117 	ldw	ra,4(sp)
 202b698:	df000017 	ldw	fp,0(sp)
 202b69c:	dec00204 	addi	sp,sp,8
 202b6a0:	f800283a 	ret

0202b6a4 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 202b6a4:	defffa04 	addi	sp,sp,-24
 202b6a8:	dfc00515 	stw	ra,20(sp)
 202b6ac:	df000415 	stw	fp,16(sp)
 202b6b0:	df000404 	addi	fp,sp,16
 202b6b4:	e13ffd15 	stw	r4,-12(fp)
 202b6b8:	e17ffe15 	stw	r5,-8(fp)
 202b6bc:	3005883a 	mov	r2,r6
 202b6c0:	e0bfff05 	stb	r2,-4(fp)
  struct tcpip_msg *msg;

  if (sys_mbox_valid(&mbox)) {
 202b6c4:	d0a80f17 	ldw	r2,-24516(gp)
 202b6c8:	10002426 	beq	r2,zero,202b75c <tcpip_callback_with_block+0xb8>
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 202b6cc:	01000244 	movi	r4,9
 202b6d0:	20342e00 	call	20342e0 <memp_malloc>
 202b6d4:	e0bffc15 	stw	r2,-16(fp)
    if (msg == NULL) {
 202b6d8:	e0bffc17 	ldw	r2,-16(fp)
 202b6dc:	1000021e 	bne	r2,zero,202b6e8 <tcpip_callback_with_block+0x44>
      return ERR_MEM;
 202b6e0:	00bfffc4 	movi	r2,-1
 202b6e4:	00001e06 	br	202b760 <tcpip_callback_with_block+0xbc>
    }

    msg->type = TCPIP_MSG_CALLBACK;
 202b6e8:	e0bffc17 	ldw	r2,-16(fp)
 202b6ec:	00c00104 	movi	r3,4
 202b6f0:	10c00015 	stw	r3,0(r2)
    msg->msg.cb.function = function;
 202b6f4:	e0bffc17 	ldw	r2,-16(fp)
 202b6f8:	e0fffd17 	ldw	r3,-12(fp)
 202b6fc:	10c00215 	stw	r3,8(r2)
    msg->msg.cb.ctx = ctx;
 202b700:	e0bffc17 	ldw	r2,-16(fp)
 202b704:	e0fffe17 	ldw	r3,-8(fp)
 202b708:	10c00315 	stw	r3,12(r2)
    if (block) {
 202b70c:	e0bfff03 	ldbu	r2,-4(fp)
 202b710:	10000426 	beq	r2,zero,202b724 <tcpip_callback_with_block+0x80>
      sys_mbox_post(&mbox, msg);
 202b714:	e17ffc17 	ldw	r5,-16(fp)
 202b718:	d1280f04 	addi	r4,gp,-24516
 202b71c:	20152000 	call	2015200 <sys_mbox_post>
 202b720:	00000c06 	br	202b754 <tcpip_callback_with_block+0xb0>
    } else {
      if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 202b724:	e17ffc17 	ldw	r5,-16(fp)
 202b728:	d1280f04 	addi	r4,gp,-24516
 202b72c:	20152500 	call	2015250 <sys_mbox_trypost>
 202b730:	10803fcc 	andi	r2,r2,255
 202b734:	1080201c 	xori	r2,r2,128
 202b738:	10bfe004 	addi	r2,r2,-128
 202b73c:	10000526 	beq	r2,zero,202b754 <tcpip_callback_with_block+0xb0>
        memp_free(MEMP_TCPIP_MSG_API, msg);
 202b740:	e17ffc17 	ldw	r5,-16(fp)
 202b744:	01000244 	movi	r4,9
 202b748:	20344ac0 	call	20344ac <memp_free>
        return ERR_MEM;
 202b74c:	00bfffc4 	movi	r2,-1
 202b750:	00000306 	br	202b760 <tcpip_callback_with_block+0xbc>
      }
    }
    return ERR_OK;
 202b754:	0005883a 	mov	r2,zero
 202b758:	00000106 	br	202b760 <tcpip_callback_with_block+0xbc>
  }
  return ERR_VAL;
 202b75c:	00bffe84 	movi	r2,-6
}
 202b760:	e037883a 	mov	sp,fp
 202b764:	dfc00117 	ldw	ra,4(sp)
 202b768:	df000017 	ldw	fp,0(sp)
 202b76c:	dec00204 	addi	sp,sp,8
 202b770:	f800283a 	ret

0202b774 <tcpip_timeout>:
 * @param arg argument to pass to timeout function h
 * @return ERR_MEM on memory error, ERR_OK otherwise
 */
err_t
tcpip_timeout(u32_t msecs, sys_timeout_handler h, void *arg)
{
 202b774:	defffa04 	addi	sp,sp,-24
 202b778:	dfc00515 	stw	ra,20(sp)
 202b77c:	df000415 	stw	fp,16(sp)
 202b780:	df000404 	addi	fp,sp,16
 202b784:	e13ffd15 	stw	r4,-12(fp)
 202b788:	e17ffe15 	stw	r5,-8(fp)
 202b78c:	e1bfff15 	stw	r6,-4(fp)
  struct tcpip_msg *msg;

  if (sys_mbox_valid(&mbox)) {
 202b790:	d0a80f17 	ldw	r2,-24516(gp)
 202b794:	10001826 	beq	r2,zero,202b7f8 <tcpip_timeout+0x84>
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 202b798:	01000244 	movi	r4,9
 202b79c:	20342e00 	call	20342e0 <memp_malloc>
 202b7a0:	e0bffc15 	stw	r2,-16(fp)
    if (msg == NULL) {
 202b7a4:	e0bffc17 	ldw	r2,-16(fp)
 202b7a8:	1000021e 	bne	r2,zero,202b7b4 <tcpip_timeout+0x40>
      return ERR_MEM;
 202b7ac:	00bfffc4 	movi	r2,-1
 202b7b0:	00001206 	br	202b7fc <tcpip_timeout+0x88>
    }

    msg->type = TCPIP_MSG_TIMEOUT;
 202b7b4:	e0bffc17 	ldw	r2,-16(fp)
 202b7b8:	00c00084 	movi	r3,2
 202b7bc:	10c00015 	stw	r3,0(r2)
    msg->msg.tmo.msecs = msecs;
 202b7c0:	e0bffc17 	ldw	r2,-16(fp)
 202b7c4:	e0fffd17 	ldw	r3,-12(fp)
 202b7c8:	10c00215 	stw	r3,8(r2)
    msg->msg.tmo.h = h;
 202b7cc:	e0bffc17 	ldw	r2,-16(fp)
 202b7d0:	e0fffe17 	ldw	r3,-8(fp)
 202b7d4:	10c00315 	stw	r3,12(r2)
    msg->msg.tmo.arg = arg;
 202b7d8:	e0bffc17 	ldw	r2,-16(fp)
 202b7dc:	e0ffff17 	ldw	r3,-4(fp)
 202b7e0:	10c00415 	stw	r3,16(r2)
    sys_mbox_post(&mbox, msg);
 202b7e4:	e17ffc17 	ldw	r5,-16(fp)
 202b7e8:	d1280f04 	addi	r4,gp,-24516
 202b7ec:	20152000 	call	2015200 <sys_mbox_post>
    return ERR_OK;
 202b7f0:	0005883a 	mov	r2,zero
 202b7f4:	00000106 	br	202b7fc <tcpip_timeout+0x88>
  }
  return ERR_VAL;
 202b7f8:	00bffe84 	movi	r2,-6
}
 202b7fc:	e037883a 	mov	sp,fp
 202b800:	dfc00117 	ldw	ra,4(sp)
 202b804:	df000017 	ldw	fp,0(sp)
 202b808:	dec00204 	addi	sp,sp,8
 202b80c:	f800283a 	ret

0202b810 <tcpip_untimeout>:
 * @param arg argument to pass to timeout function h
 * @return ERR_MEM on memory error, ERR_OK otherwise
 */
err_t
tcpip_untimeout(sys_timeout_handler h, void *arg)
{
 202b810:	defffb04 	addi	sp,sp,-20
 202b814:	dfc00415 	stw	ra,16(sp)
 202b818:	df000315 	stw	fp,12(sp)
 202b81c:	df000304 	addi	fp,sp,12
 202b820:	e13ffe15 	stw	r4,-8(fp)
 202b824:	e17fff15 	stw	r5,-4(fp)
  struct tcpip_msg *msg;

  if (sys_mbox_valid(&mbox)) {
 202b828:	d0a80f17 	ldw	r2,-24516(gp)
 202b82c:	10001526 	beq	r2,zero,202b884 <tcpip_untimeout+0x74>
    msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 202b830:	01000244 	movi	r4,9
 202b834:	20342e00 	call	20342e0 <memp_malloc>
 202b838:	e0bffd15 	stw	r2,-12(fp)
    if (msg == NULL) {
 202b83c:	e0bffd17 	ldw	r2,-12(fp)
 202b840:	1000021e 	bne	r2,zero,202b84c <tcpip_untimeout+0x3c>
      return ERR_MEM;
 202b844:	00bfffc4 	movi	r2,-1
 202b848:	00000f06 	br	202b888 <tcpip_untimeout+0x78>
    }

    msg->type = TCPIP_MSG_UNTIMEOUT;
 202b84c:	e0bffd17 	ldw	r2,-12(fp)
 202b850:	00c000c4 	movi	r3,3
 202b854:	10c00015 	stw	r3,0(r2)
    msg->msg.tmo.h = h;
 202b858:	e0bffd17 	ldw	r2,-12(fp)
 202b85c:	e0fffe17 	ldw	r3,-8(fp)
 202b860:	10c00315 	stw	r3,12(r2)
    msg->msg.tmo.arg = arg;
 202b864:	e0bffd17 	ldw	r2,-12(fp)
 202b868:	e0ffff17 	ldw	r3,-4(fp)
 202b86c:	10c00415 	stw	r3,16(r2)
    sys_mbox_post(&mbox, msg);
 202b870:	e17ffd17 	ldw	r5,-12(fp)
 202b874:	d1280f04 	addi	r4,gp,-24516
 202b878:	20152000 	call	2015200 <sys_mbox_post>
    return ERR_OK;
 202b87c:	0005883a 	mov	r2,zero
 202b880:	00000106 	br	202b888 <tcpip_untimeout+0x78>
  }
  return ERR_VAL;
 202b884:	00bffe84 	movi	r2,-6
}
 202b888:	e037883a 	mov	sp,fp
 202b88c:	dfc00117 	ldw	ra,4(sp)
 202b890:	df000017 	ldw	fp,0(sp)
 202b894:	dec00204 	addi	sp,sp,8
 202b898:	f800283a 	ret

0202b89c <tcpip_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_apimsg(struct api_msg *apimsg)
{
 202b89c:	defff804 	addi	sp,sp,-32
 202b8a0:	dfc00715 	stw	ra,28(sp)
 202b8a4:	df000615 	stw	fp,24(sp)
 202b8a8:	df000604 	addi	fp,sp,24
 202b8ac:	e13fff15 	stw	r4,-4(fp)
#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->msg.err = ERR_VAL;
#endif
  
  if (sys_mbox_valid(&mbox)) {
 202b8b0:	d0a80f17 	ldw	r2,-24516(gp)
 202b8b4:	10000f26 	beq	r2,zero,202b8f4 <tcpip_apimsg+0x58>
    msg.type = TCPIP_MSG_API;
 202b8b8:	e03ffa15 	stw	zero,-24(fp)
    msg.msg.apimsg = apimsg;
 202b8bc:	e0bfff17 	ldw	r2,-4(fp)
 202b8c0:	e0bffc15 	stw	r2,-16(fp)
    sys_mbox_post(&mbox, &msg);
 202b8c4:	e17ffa04 	addi	r5,fp,-24
 202b8c8:	d1280f04 	addi	r4,gp,-24516
 202b8cc:	20152000 	call	2015200 <sys_mbox_post>
    sys_arch_sem_wait(&apimsg->msg.conn->op_completed, 0);
 202b8d0:	e0bfff17 	ldw	r2,-4(fp)
 202b8d4:	10800117 	ldw	r2,4(r2)
 202b8d8:	10800404 	addi	r2,r2,16
 202b8dc:	000b883a 	mov	r5,zero
 202b8e0:	1009883a 	mov	r4,r2
 202b8e4:	2014e380 	call	2014e38 <sys_arch_sem_wait>
    return apimsg->msg.err;
 202b8e8:	e0bfff17 	ldw	r2,-4(fp)
 202b8ec:	10800203 	ldbu	r2,8(r2)
 202b8f0:	00000106 	br	202b8f8 <tcpip_apimsg+0x5c>
  }
  return ERR_VAL;
 202b8f4:	00bffe84 	movi	r2,-6
}
 202b8f8:	e037883a 	mov	sp,fp
 202b8fc:	dfc00117 	ldw	ra,4(sp)
 202b900:	df000017 	ldw	fp,0(sp)
 202b904:	dec00204 	addi	sp,sp,8
 202b908:	f800283a 	ret

0202b90c <tcpip_callbackmsg_new>:
 * @param function the function to call
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg* tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
 202b90c:	defffb04 	addi	sp,sp,-20
 202b910:	dfc00415 	stw	ra,16(sp)
 202b914:	df000315 	stw	fp,12(sp)
 202b918:	df000304 	addi	fp,sp,12
 202b91c:	e13ffe15 	stw	r4,-8(fp)
 202b920:	e17fff15 	stw	r5,-4(fp)
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 202b924:	01000244 	movi	r4,9
 202b928:	20342e00 	call	20342e0 <memp_malloc>
 202b92c:	e0bffd15 	stw	r2,-12(fp)
  if (msg == NULL) {
 202b930:	e0bffd17 	ldw	r2,-12(fp)
 202b934:	1000021e 	bne	r2,zero,202b940 <tcpip_callbackmsg_new+0x34>
    return NULL;
 202b938:	0005883a 	mov	r2,zero
 202b93c:	00000a06 	br	202b968 <tcpip_callbackmsg_new+0x5c>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
 202b940:	e0bffd17 	ldw	r2,-12(fp)
 202b944:	00c00144 	movi	r3,5
 202b948:	10c00015 	stw	r3,0(r2)
  msg->msg.cb.function = function;
 202b94c:	e0bffd17 	ldw	r2,-12(fp)
 202b950:	e0fffe17 	ldw	r3,-8(fp)
 202b954:	10c00215 	stw	r3,8(r2)
  msg->msg.cb.ctx = ctx;
 202b958:	e0bffd17 	ldw	r2,-12(fp)
 202b95c:	e0ffff17 	ldw	r3,-4(fp)
 202b960:	10c00315 	stw	r3,12(r2)
  return (struct tcpip_callback_msg*)msg;
 202b964:	e0bffd17 	ldw	r2,-12(fp)
}
 202b968:	e037883a 	mov	sp,fp
 202b96c:	dfc00117 	ldw	ra,4(sp)
 202b970:	df000017 	ldw	fp,0(sp)
 202b974:	dec00204 	addi	sp,sp,8
 202b978:	f800283a 	ret

0202b97c <tcpip_callbackmsg_delete>:
 * Free a callback message allocated by tcpip_callbackmsg_new().
 *
 * @param msg the message to free
 */
void tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
 202b97c:	defffd04 	addi	sp,sp,-12
 202b980:	dfc00215 	stw	ra,8(sp)
 202b984:	df000115 	stw	fp,4(sp)
 202b988:	df000104 	addi	fp,sp,4
 202b98c:	e13fff15 	stw	r4,-4(fp)
  memp_free(MEMP_TCPIP_MSG_API, msg);
 202b990:	e17fff17 	ldw	r5,-4(fp)
 202b994:	01000244 	movi	r4,9
 202b998:	20344ac0 	call	20344ac <memp_free>
}
 202b99c:	0001883a 	nop
 202b9a0:	e037883a 	mov	sp,fp
 202b9a4:	dfc00117 	ldw	ra,4(sp)
 202b9a8:	df000017 	ldw	fp,0(sp)
 202b9ac:	dec00204 	addi	sp,sp,8
 202b9b0:	f800283a 	ret

0202b9b4 <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
 202b9b4:	defffd04 	addi	sp,sp,-12
 202b9b8:	dfc00215 	stw	ra,8(sp)
 202b9bc:	df000115 	stw	fp,4(sp)
 202b9c0:	df000104 	addi	fp,sp,4
 202b9c4:	e13fff15 	stw	r4,-4(fp)
  if (!sys_mbox_valid(&mbox)) {
 202b9c8:	d0a80f17 	ldw	r2,-24516(gp)
 202b9cc:	1000021e 	bne	r2,zero,202b9d8 <tcpip_trycallback+0x24>
    return ERR_VAL;
 202b9d0:	00bffe84 	movi	r2,-6
 202b9d4:	00000306 	br	202b9e4 <tcpip_trycallback+0x30>
  }
  return sys_mbox_trypost(&mbox, msg);
 202b9d8:	e17fff17 	ldw	r5,-4(fp)
 202b9dc:	d1280f04 	addi	r4,gp,-24516
 202b9e0:	20152500 	call	2015250 <sys_mbox_trypost>
}
 202b9e4:	e037883a 	mov	sp,fp
 202b9e8:	dfc00117 	ldw	ra,4(sp)
 202b9ec:	df000017 	ldw	fp,0(sp)
 202b9f0:	dec00204 	addi	sp,sp,8
 202b9f4:	f800283a 	ret

0202b9f8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 202b9f8:	defffb04 	addi	sp,sp,-20
 202b9fc:	dfc00415 	stw	ra,16(sp)
 202ba00:	df000315 	stw	fp,12(sp)
 202ba04:	df000304 	addi	fp,sp,12
 202ba08:	e13ffe15 	stw	r4,-8(fp)
 202ba0c:	e17fff15 	stw	r5,-4(fp)
  lwip_init();
 202ba10:	2030afc0 	call	2030afc <lwip_init>

  tcpip_init_done = initfunc;
 202ba14:	e0bffe17 	ldw	r2,-8(fp)
 202ba18:	d0a80d15 	stw	r2,-24524(gp)
  tcpip_init_done_arg = arg;
 202ba1c:	e0bfff17 	ldw	r2,-4(fp)
 202ba20:	d0a80e15 	stw	r2,-24520(gp)
  if(sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 202ba24:	01440004 	movi	r5,4096
 202ba28:	d1280f04 	addi	r4,gp,-24516
 202ba2c:	20150c00 	call	20150c0 <sys_mbox_new>
  if(sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 202ba30:	008000c4 	movi	r2,3
 202ba34:	d8800015 	stw	r2,0(sp)
 202ba38:	01c80004 	movi	r7,8192
 202ba3c:	000d883a 	mov	r6,zero
 202ba40:	014080f4 	movhi	r5,515
 202ba44:	296d0d04 	addi	r5,r5,-19404
 202ba48:	01008134 	movhi	r4,516
 202ba4c:	21062d04 	addi	r4,r4,6324
 202ba50:	20154180 	call	2015418 <sys_thread_new>
}
 202ba54:	0001883a 	nop
 202ba58:	e037883a 	mov	sp,fp
 202ba5c:	dfc00117 	ldw	ra,4(sp)
 202ba60:	df000017 	ldw	fp,0(sp)
 202ba64:	dec00204 	addi	sp,sp,8
 202ba68:	f800283a 	ret

0202ba6c <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
 202ba6c:	defffc04 	addi	sp,sp,-16
 202ba70:	dfc00315 	stw	ra,12(sp)
 202ba74:	df000215 	stw	fp,8(sp)
 202ba78:	df000204 	addi	fp,sp,8
 202ba7c:	e13fff15 	stw	r4,-4(fp)
  struct pbuf *q = (struct pbuf *)p;
 202ba80:	e0bfff17 	ldw	r2,-4(fp)
 202ba84:	e0bffe15 	stw	r2,-8(fp)
  pbuf_free(q);
 202ba88:	e13ffe17 	ldw	r4,-8(fp)
 202ba8c:	201aa200 	call	201aa20 <pbuf_free>
}
 202ba90:	0001883a 	nop
 202ba94:	e037883a 	mov	sp,fp
 202ba98:	dfc00117 	ldw	ra,4(sp)
 202ba9c:	df000017 	ldw	fp,0(sp)
 202baa0:	dec00204 	addi	sp,sp,8
 202baa4:	f800283a 	ret

0202baa8 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 202baa8:	defffd04 	addi	sp,sp,-12
 202baac:	dfc00215 	stw	ra,8(sp)
 202bab0:	df000115 	stw	fp,4(sp)
 202bab4:	df000104 	addi	fp,sp,4
 202bab8:	e13fff15 	stw	r4,-4(fp)
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
 202babc:	000d883a 	mov	r6,zero
 202bac0:	e17fff17 	ldw	r5,-4(fp)
 202bac4:	010080f4 	movhi	r4,515
 202bac8:	212e9b04 	addi	r4,r4,-17812
 202bacc:	202b6a40 	call	202b6a4 <tcpip_callback_with_block>
}
 202bad0:	e037883a 	mov	sp,fp
 202bad4:	dfc00117 	ldw	ra,4(sp)
 202bad8:	df000017 	ldw	fp,0(sp)
 202badc:	dec00204 	addi	sp,sp,8
 202bae0:	f800283a 	ret

0202bae4 <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
 202bae4:	defffd04 	addi	sp,sp,-12
 202bae8:	dfc00215 	stw	ra,8(sp)
 202baec:	df000115 	stw	fp,4(sp)
 202baf0:	df000104 	addi	fp,sp,4
 202baf4:	e13fff15 	stw	r4,-4(fp)
  return tcpip_callback_with_block(mem_free, m, 0);
 202baf8:	000d883a 	mov	r6,zero
 202bafc:	e17fff17 	ldw	r5,-4(fp)
 202bb00:	010080b4 	movhi	r4,514
 202bb04:	21245604 	addi	r4,r4,-28328
 202bb08:	202b6a40 	call	202b6a4 <tcpip_callback_with_block>
}
 202bb0c:	e037883a 	mov	sp,fp
 202bb10:	dfc00117 	ldw	ra,4(sp)
 202bb14:	df000017 	ldw	fp,0(sp)
 202bb18:	dec00204 	addi	sp,sp,8
 202bb1c:	f800283a 	ret

0202bb20 <no_printf>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

void no_printf (char *fmt, ...) {}
 202bb20:	defffb04 	addi	sp,sp,-20
 202bb24:	df000115 	stw	fp,4(sp)
 202bb28:	df000104 	addi	fp,sp,4
 202bb2c:	e13fff15 	stw	r4,-4(fp)
 202bb30:	e1400115 	stw	r5,4(fp)
 202bb34:	e1800215 	stw	r6,8(fp)
 202bb38:	e1c00315 	stw	r7,12(fp)
 202bb3c:	0001883a 	nop
 202bb40:	e037883a 	mov	sp,fp
 202bb44:	df000017 	ldw	fp,0(sp)
 202bb48:	dec00404 	addi	sp,sp,16
 202bb4c:	f800283a 	ret

0202bb50 <tse_mac_initTransInfo2>:

alt_32 tse_mac_initTransInfo2( tse_mac_trans_info *mi,
                                        alt_u32 mac_base,
                                        alt_32 tx_sgdma,
                                        alt_32 rx_sgdma,
                                        alt_32 cfgflags) {
 202bb50:	defffb04 	addi	sp,sp,-20
 202bb54:	df000415 	stw	fp,16(sp)
 202bb58:	df000404 	addi	fp,sp,16
 202bb5c:	e13ffc15 	stw	r4,-16(fp)
 202bb60:	e17ffd15 	stw	r5,-12(fp)
 202bb64:	e1bffe15 	stw	r6,-8(fp)
 202bb68:	e1ffff15 	stw	r7,-4(fp)
                                              
        mi->base     = (np_tse_mac*)mac_base;
 202bb6c:	e0fffd17 	ldw	r3,-12(fp)
 202bb70:	e0bffc17 	ldw	r2,-16(fp)
 202bb74:	10c00015 	stw	r3,0(r2)
        mi->tx_sgdma = (alt_sgdma_dev *)tx_sgdma;
 202bb78:	e0fffe17 	ldw	r3,-8(fp)
 202bb7c:	e0bffc17 	ldw	r2,-16(fp)
 202bb80:	10c00115 	stw	r3,4(r2)
        mi->rx_sgdma = (alt_sgdma_dev *)rx_sgdma;
 202bb84:	e0ffff17 	ldw	r3,-4(fp)
 202bb88:	e0bffc17 	ldw	r2,-16(fp)
 202bb8c:	10c00215 	stw	r3,8(r2)
        mi->cfgflags = cfgflags;     
 202bb90:	e0c00117 	ldw	r3,4(fp)
 202bb94:	e0bffc17 	ldw	r2,-16(fp)
 202bb98:	10c00415 	stw	r3,16(r2)
        return SUCCESS;
 202bb9c:	0005883a 	mov	r2,zero
}
 202bba0:	e037883a 	mov	sp,fp
 202bba4:	df000017 	ldw	fp,0(sp)
 202bba8:	dec00104 	addi	sp,sp,4
 202bbac:	f800283a 	ret

0202bbb0 <tse_mac_sTxWrite>:
  * @param txDesc           Pointer to the transmit SGDMA descriptor
  * @return actual bytes transferred if ok, else error (-1)
  */
alt_32 tse_mac_sTxWrite( tse_mac_trans_info *mi, 
                       alt_sgdma_descriptor *txDesc)   
{ 
 202bbb0:	defffa04 	addi	sp,sp,-24
 202bbb4:	dfc00515 	stw	ra,20(sp)
 202bbb8:	df000415 	stw	fp,16(sp)
 202bbbc:	df000404 	addi	fp,sp,16
 202bbc0:	e13ffe15 	stw	r4,-8(fp)
 202bbc4:	e17fff15 	stw	r5,-4(fp)

  alt_32 timeout;
  alt_u8 result = 0;
 202bbc8:	e03ffd05 	stb	zero,-12(fp)
  alt_u16 actualBytesTransferred;
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
 202bbcc:	e03ffc15 	stw	zero,-16(fp)
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
 202bbd0:	00000b06 	br	202bc00 <tse_mac_sTxWrite+0x50>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
           if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 202bbd4:	e0fffc17 	ldw	r3,-16(fp)
 202bbd8:	18800044 	addi	r2,r3,1
 202bbdc:	e0bffc15 	stw	r2,-16(fp)
 202bbe0:	008003f4 	movhi	r2,15
 202bbe4:	10909004 	addi	r2,r2,16960
 202bbe8:	1880051e 	bne	r3,r2,202bc00 <tse_mac_sTxWrite+0x50>
            tse_dprintf(4, "WARNING : TX SGDMA Timeout\n");
 202bbec:	01008134 	movhi	r4,516
 202bbf0:	21063104 	addi	r4,r4,6340
 202bbf4:	203cd600 	call	203cd60 <puts>
            return ENP_RESOURCE;  // avoid being stuck here
 202bbf8:	00bffa84 	movi	r2,-22
 202bbfc:	00002006 	br	202bc80 <tse_mac_sTxWrite+0xd0>
    
  // Make sure DMA controller is not busy from a former command
  // and TX is able to accept data
  timeout = 0;
  //tse_dprintf("\nWaiting while tx SGDMA is busy......... ");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->tx_sgdma->base) & 
 202bc00:	e0bffe17 	ldw	r2,-8(fp)
 202bc04:	10800117 	ldw	r2,4(r2)
 202bc08:	10800317 	ldw	r2,12(r2)
 202bc0c:	10800037 	ldwio	r2,0(r2)
 202bc10:	1080040c 	andi	r2,r2,16
 202bc14:	103fef1e 	bne	r2,zero,202bbd4 <__alt_mem_mem_0+0xfd00bbd4>
           }
  }

  // Set up the SGDMA
  // Clear the status and control bits of the SGDMA descriptor
  IOWR_ALTERA_AVALON_SGDMA_CONTROL (mi->tx_sgdma->base, 0);
 202bc18:	e0bffe17 	ldw	r2,-8(fp)
 202bc1c:	10800117 	ldw	r2,4(r2)
 202bc20:	10800317 	ldw	r2,12(r2)
 202bc24:	10800404 	addi	r2,r2,16
 202bc28:	0007883a 	mov	r3,zero
 202bc2c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS (mi->tx_sgdma->base, 0xFF);
 202bc30:	e0bffe17 	ldw	r2,-8(fp)
 202bc34:	10800117 	ldw	r2,4(r2)
 202bc38:	10800317 	ldw	r2,12(r2)
 202bc3c:	00c03fc4 	movi	r3,255
 202bc40:	10c00035 	stwio	r3,0(r2)
  
  // Start SGDMA (blocking call)
  result = alt_avalon_sgdma_do_sync_transfer(
 202bc44:	e0bffe17 	ldw	r2,-8(fp)
 202bc48:	10800117 	ldw	r2,4(r2)
 202bc4c:	e17fff17 	ldw	r5,-4(fp)
 202bc50:	1009883a 	mov	r4,r2
 202bc54:	202529c0 	call	202529c <alt_avalon_sgdma_do_sync_transfer>
 202bc58:	e0bffd05 	stb	r2,-12(fp)
                mi->tx_sgdma, 
                (alt_sgdma_descriptor *) &txDesc[0]);
  
  if (result != 0)
 202bc5c:	e0bffd03 	ldbu	r2,-12(fp)
 202bc60:	10000226 	beq	r2,zero,202bc6c <tse_mac_sTxWrite+0xbc>
    return -1;
 202bc64:	00bfffc4 	movi	r2,-1
 202bc68:	00000506 	br	202bc80 <tse_mac_sTxWrite+0xd0>
  
  /* perform cache save read to obtain actual bytes transferred for current sgdma descriptor */
  actualBytesTransferred = IORD_ALTERA_TSE_SGDMA_DESC_ACTUAL_BYTES_TRANSFERRED(&txDesc[0]);
 202bc6c:	e0bfff17 	ldw	r2,-4(fp)
 202bc70:	10800704 	addi	r2,r2,28
 202bc74:	10800037 	ldwio	r2,0(r2)
 202bc78:	e0bffd8d 	sth	r2,-10(fp)

  return actualBytesTransferred;
 202bc7c:	e0bffd8b 	ldhu	r2,-10(fp)
}
 202bc80:	e037883a 	mov	sp,fp
 202bc84:	dfc00117 	ldw	ra,4(sp)
 202bc88:	df000017 	ldw	fp,0(sp)
 202bc8c:	dec00204 	addi	sp,sp,8
 202bc90:	f800283a 	ret

0202bc94 <tse_mac_aRxRead>:
  *        the actual bytes transferred for current descriptor
  */
alt_32 tse_mac_aRxRead( 
  tse_mac_trans_info *mi,       
  alt_sgdma_descriptor *rxDesc)  
{
 202bc94:	defffa04 	addi	sp,sp,-24
 202bc98:	dfc00515 	stw	ra,20(sp)
 202bc9c:	df000415 	stw	fp,16(sp)
 202bca0:	df000404 	addi	fp,sp,16
 202bca4:	e13ffe15 	stw	r4,-8(fp)
 202bca8:	e17fff15 	stw	r5,-4(fp)
  alt_32 timeout;
  
  alt_u8 result = 0;
 202bcac:	e03ffd05 	stb	zero,-12(fp)
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
 202bcb0:	e03ffc15 	stw	zero,-16(fp)
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
 202bcb4:	00000b06 	br	202bce4 <tse_mac_aRxRead+0x50>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    if(timeout++ == ALTERA_TSE_SGDMA_BUSY_TIME_OUT_CNT) {
 202bcb8:	e0fffc17 	ldw	r3,-16(fp)
 202bcbc:	18800044 	addi	r2,r3,1
 202bcc0:	e0bffc15 	stw	r2,-16(fp)
 202bcc4:	008003f4 	movhi	r2,15
 202bcc8:	10909004 	addi	r2,r2,16960
 202bccc:	1880051e 	bne	r3,r2,202bce4 <tse_mac_aRxRead+0x50>
        tse_dprintf(4, "WARNING : RX SGDMA Timeout\n");
 202bcd0:	01008134 	movhi	r4,516
 202bcd4:	21063804 	addi	r4,r4,6368
 202bcd8:	203cd600 	call	203cd60 <puts>
        return ENP_RESOURCE;  // avoid being stuck here
 202bcdc:	00bffa84 	movi	r2,-22
 202bce0:	00001106 	br	202bd28 <tse_mac_aRxRead+0x94>
  alt_u8 result = 0;
         
  // Make sure SGDMA controller is not busy from a former command
  timeout = 0;
//  tse_dprintf("\nWaiting while rx SGDMA is busy.........");
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(mi->rx_sgdma->base) & 
 202bce4:	e0bffe17 	ldw	r2,-8(fp)
 202bce8:	10800217 	ldw	r2,8(r2)
 202bcec:	10800317 	ldw	r2,12(r2)
 202bcf0:	10800037 	ldwio	r2,0(r2)
 202bcf4:	1080040c 	andi	r2,r2,16
 202bcf8:	103fef1e 	bne	r2,zero,202bcb8 <__alt_mem_mem_0+0xfd00bcb8>
    }
  }

 
  // SGDMA operation invoked for RX (non-blocking call)
  result = alt_avalon_sgdma_do_async_transfer(
 202bcfc:	e0bffe17 	ldw	r2,-8(fp)
 202bd00:	10800217 	ldw	r2,8(r2)
 202bd04:	e17fff17 	ldw	r5,-4(fp)
 202bd08:	1009883a 	mov	r4,r2
 202bd0c:	20251780 	call	2025178 <alt_avalon_sgdma_do_async_transfer>
 202bd10:	e0bffd05 	stb	r2,-12(fp)
                mi->rx_sgdma, 
                (alt_sgdma_descriptor *) &rxDesc[0]);
  
  if (result != 0)
 202bd14:	e0bffd03 	ldbu	r2,-12(fp)
 202bd18:	10000226 	beq	r2,zero,202bd24 <tse_mac_aRxRead+0x90>
    return -1;
 202bd1c:	00bfffc4 	movi	r2,-1
 202bd20:	00000106 	br	202bd28 <tse_mac_aRxRead+0x94>
 
  return SUCCESS;
 202bd24:	0005883a 	mov	r2,zero
}
 202bd28:	e037883a 	mov	sp,fp
 202bd2c:	dfc00117 	ldw	ra,4(sp)
 202bd30:	df000017 	ldw	fp,0(sp)
 202bd34:	dec00204 	addi	sp,sp,8
 202bd38:	f800283a 	ret

0202bd3c <tse_mac_SwReset>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_SwReset(np_tse_mac *pmac) 
{
 202bd3c:	defffc04 	addi	sp,sp,-16
 202bd40:	df000315 	stw	fp,12(sp)
 202bd44:	df000304 	addi	fp,sp,12
 202bd48:	e13fff15 	stw	r4,-4(fp)
	alt_32 timeout;
	alt_32 cc;
        
    cc = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 202bd4c:	e0bfff17 	ldw	r2,-4(fp)
 202bd50:	10800204 	addi	r2,r2,8
 202bd54:	10800037 	ldwio	r2,0(r2)
 202bd58:	e0bffe15 	stw	r2,-8(fp)
    
    // set reset and Gig-Speed bits to make sure we have an incoming clock on
    // tx side. If there is a 10/100 PHY, we will still have a valid clock on
    // tx_clk no matter what setting we have here, but on a Gig phy the
    // MII clock may be missing.
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,(ALTERA_TSEMAC_CMD_SW_RESET_MSK | ALTERA_TSEMAC_CMD_ETH_SPEED_MSK));
 202bd5c:	e0bfff17 	ldw	r2,-4(fp)
 202bd60:	10800204 	addi	r2,r2,8
 202bd64:	00c80204 	movi	r3,8200
 202bd68:	10c00035 	stwio	r3,0(r2)

    
    // wait for completion with fallback in case there is no PHY or it is
    // not connected and hence might not provide any clocks at all.
    timeout=0;
 202bd6c:	e03ffd15 	stw	zero,-12(fp)
    while( (IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac) & ALTERA_TSEMAC_CMD_SW_RESET_MSK) != 0 && timeout < ALTERA_TSE_SW_RESET_TIME_OUT_CNT) timeout++;
 202bd70:	00000306 	br	202bd80 <tse_mac_SwReset+0x44>
 202bd74:	e0bffd17 	ldw	r2,-12(fp)
 202bd78:	10800044 	addi	r2,r2,1
 202bd7c:	e0bffd15 	stw	r2,-12(fp)
 202bd80:	e0bfff17 	ldw	r2,-4(fp)
 202bd84:	10800204 	addi	r2,r2,8
 202bd88:	10800037 	ldwio	r2,0(r2)
 202bd8c:	1088000c 	andi	r2,r2,8192
 202bd90:	10000326 	beq	r2,zero,202bda0 <tse_mac_SwReset+0x64>
 202bd94:	e0bffd17 	ldw	r2,-12(fp)
 202bd98:	1089c410 	cmplti	r2,r2,10000
 202bd9c:	103ff51e 	bne	r2,zero,202bd74 <__alt_mem_mem_0+0xfd00bd74>
   
    IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,cc); // Restore
 202bda0:	e0bfff17 	ldw	r2,-4(fp)
 202bda4:	10800204 	addi	r2,r2,8
 202bda8:	e0fffe17 	ldw	r3,-8(fp)
 202bdac:	10c00035 	stwio	r3,0(r2)
    return SUCCESS;
 202bdb0:	0005883a 	mov	r2,zero
}
 202bdb4:	e037883a 	mov	sp,fp
 202bdb8:	df000017 	ldw	fp,0(sp)
 202bdbc:	dec00104 	addi	sp,sp,4
 202bdc0:	f800283a 	ret

0202bdc4 <tse_mac_setMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
*/
alt_32 tse_mac_setMIImode(np_tse_mac *pmac)
{
 202bdc4:	defffd04 	addi	sp,sp,-12
 202bdc8:	df000215 	stw	fp,8(sp)
 202bdcc:	df000204 	addi	fp,sp,8
 202bdd0:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 202bdd4:	e0bfff17 	ldw	r2,-4(fp)
 202bdd8:	10800204 	addi	r2,r2,8
 202bddc:	10800037 	ldwio	r2,0(r2)
 202bde0:	e0bffe15 	stw	r2,-8(fp)
  helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK; 
 202bde4:	e0fffe17 	ldw	r3,-8(fp)
 202bde8:	00bffdc4 	movi	r2,-9
 202bdec:	1884703a 	and	r2,r3,r2
 202bdf0:	e0bffe15 	stw	r2,-8(fp)
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 202bdf4:	e0bfff17 	ldw	r2,-4(fp)
 202bdf8:	10800204 	addi	r2,r2,8
 202bdfc:	e0fffe17 	ldw	r3,-8(fp)
 202be00:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 202be04:	0005883a 	mov	r2,zero
}
 202be08:	e037883a 	mov	sp,fp
 202be0c:	df000017 	ldw	fp,0(sp)
 202be10:	dec00104 	addi	sp,sp,4
 202be14:	f800283a 	ret

0202be18 <tse_mac_setGMIImode>:
 *                        COMMAND_CONFIG register is restored after reset.
 * @API Type:   Public
 * @param pmac  Pointer to the TSE MAC Control Interface Base address 
 */
alt_32 tse_mac_setGMIImode(np_tse_mac *pmac)
{
 202be18:	defffd04 	addi	sp,sp,-12
 202be1c:	df000215 	stw	fp,8(sp)
 202be20:	df000204 	addi	fp,sp,8
 202be24:	e13fff15 	stw	r4,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 202be28:	e0bfff17 	ldw	r2,-4(fp)
 202be2c:	10800204 	addi	r2,r2,8
 202be30:	10800037 	ldwio	r2,0(r2)
 202be34:	e0bffe15 	stw	r2,-8(fp)
  helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 202be38:	e0bffe17 	ldw	r2,-8(fp)
 202be3c:	10800214 	ori	r2,r2,8
 202be40:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac,helpvar);
 202be44:	e0bfff17 	ldw	r2,-4(fp)
 202be48:	10800204 	addi	r2,r2,8
 202be4c:	e0fffe17 	ldw	r3,-8(fp)
 202be50:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 202be54:	0005883a 	mov	r2,zero
}
 202be58:	e037883a 	mov	sp,fp
 202be5c:	df000017 	ldw	fp,0(sp)
 202be60:	dec00104 	addi	sp,sp,4
 202be64:	f800283a 	ret

0202be68 <alt_tse_phy_add_profile>:
 * @param  phy  pointer to alt_tse_phy_profile structure describing PHY registers
 * @return      index of PHY added in PHY profile on success, else return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 * PHY which are currently supported by default :  Marvell 88E1111, Marvell Quad PHY 88E1145, National DP83865, and National DP83848C
 */
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
 202be68:	defffb04 	addi	sp,sp,-20
 202be6c:	dfc00415 	stw	ra,16(sp)
 202be70:	df000315 	stw	fp,12(sp)
 202be74:	dc000215 	stw	r16,8(sp)
 202be78:	df000304 	addi	fp,sp,12
 202be7c:	e13ffe15 	stw	r4,-8(fp)
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 202be80:	e03ffd15 	stw	zero,-12(fp)
 202be84:	00002906 	br	202bf2c <alt_tse_phy_add_profile+0xc4>
    {
        if(pphy_profiles[i]->oui == phy->oui && pphy_profiles[i]->model_number == phy->model_number)
 202be88:	008085f4 	movhi	r2,535
 202be8c:	10a94c04 	addi	r2,r2,-23248
 202be90:	e0fffd17 	ldw	r3,-12(fp)
 202be94:	18c7883a 	add	r3,r3,r3
 202be98:	18c7883a 	add	r3,r3,r3
 202be9c:	10c5883a 	add	r2,r2,r3
 202bea0:	10800017 	ldw	r2,0(r2)
 202bea4:	10c01417 	ldw	r3,80(r2)
 202bea8:	e0bffe17 	ldw	r2,-8(fp)
 202beac:	10801417 	ldw	r2,80(r2)
 202beb0:	18801b1e 	bne	r3,r2,202bf20 <alt_tse_phy_add_profile+0xb8>
 202beb4:	008085f4 	movhi	r2,535
 202beb8:	10a94c04 	addi	r2,r2,-23248
 202bebc:	e0fffd17 	ldw	r3,-12(fp)
 202bec0:	18c7883a 	add	r3,r3,r3
 202bec4:	18c7883a 	add	r3,r3,r3
 202bec8:	10c5883a 	add	r2,r2,r3
 202becc:	10800017 	ldw	r2,0(r2)
 202bed0:	10c01503 	ldbu	r3,84(r2)
 202bed4:	e0bffe17 	ldw	r2,-8(fp)
 202bed8:	10801503 	ldbu	r2,84(r2)
 202bedc:	18c03fcc 	andi	r3,r3,255
 202bee0:	10803fcc 	andi	r2,r2,255
 202bee4:	18800e1e 	bne	r3,r2,202bf20 <alt_tse_phy_add_profile+0xb8>
        {
            tse_dprintf(4, "WARNING : PHY OUI 0x%06x, PHY Model Number 0x%02x already exist in PHY profile\n", (int) phy->oui, phy->model_number);
 202bee8:	e0bffe17 	ldw	r2,-8(fp)
 202beec:	10801417 	ldw	r2,80(r2)
 202bef0:	1007883a 	mov	r3,r2
 202bef4:	e0bffe17 	ldw	r2,-8(fp)
 202bef8:	10801503 	ldbu	r2,84(r2)
 202befc:	10803fcc 	andi	r2,r2,255
 202bf00:	100d883a 	mov	r6,r2
 202bf04:	180b883a 	mov	r5,r3
 202bf08:	01008134 	movhi	r4,516
 202bf0c:	21063f04 	addi	r4,r4,6396
 202bf10:	20009e40 	call	20009e4 <printf>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
 202bf14:	01008134 	movhi	r4,516
 202bf18:	21065304 	addi	r4,r4,6476
 202bf1c:	203cd600 	call	203cd60 <puts>
alt_32 alt_tse_phy_add_profile(alt_tse_phy_profile *phy)
{
	alt_32 i;
    
    /* search PHY profile for same ID */
    for(i = 0; i < phy_profile_count; i++)
 202bf20:	e0bffd17 	ldw	r2,-12(fp)
 202bf24:	10800044 	addi	r2,r2,1
 202bf28:	e0bffd15 	stw	r2,-12(fp)
 202bf2c:	d0a81003 	ldbu	r2,-24512(gp)
 202bf30:	10803fcc 	andi	r2,r2,255
 202bf34:	e0fffd17 	ldw	r3,-12(fp)
 202bf38:	18bfd316 	blt	r3,r2,202be88 <__alt_mem_mem_0+0xfd00be88>
            tse_dprintf(4, "In case of same PHY OUI and PHY Model Number in profile, first added PHY setting will be used\n");
        }
    }

    /* Allocate memory space to store the profile */    
    pphy_profiles[phy_profile_count] = (alt_tse_phy_profile *) malloc(sizeof(alt_tse_phy_profile));
 202bf3c:	d0a81003 	ldbu	r2,-24512(gp)
 202bf40:	14003fcc 	andi	r16,r2,255
 202bf44:	01001904 	movi	r4,100
 202bf48:	203ca940 	call	203ca94 <malloc>
 202bf4c:	1009883a 	mov	r4,r2
 202bf50:	008085f4 	movhi	r2,535
 202bf54:	10a94c04 	addi	r2,r2,-23248
 202bf58:	8407883a 	add	r3,r16,r16
 202bf5c:	18c7883a 	add	r3,r3,r3
 202bf60:	10c5883a 	add	r2,r2,r3
 202bf64:	11000015 	stw	r4,0(r2)
    if(!pphy_profiles[phy_profile_count]) {
 202bf68:	d0a81003 	ldbu	r2,-24512(gp)
 202bf6c:	10c03fcc 	andi	r3,r2,255
 202bf70:	008085f4 	movhi	r2,535
 202bf74:	10a94c04 	addi	r2,r2,-23248
 202bf78:	18c7883a 	add	r3,r3,r3
 202bf7c:	18c7883a 	add	r3,r3,r3
 202bf80:	10c5883a 	add	r2,r2,r3
 202bf84:	10800017 	ldw	r2,0(r2)
 202bf88:	1000081e 	bne	r2,zero,202bfac <alt_tse_phy_add_profile+0x144>
        tse_dprintf(1, "ERROR   : Unable to allocate memory for pphy_profile[%d]\n", phy_profile_count);
 202bf8c:	d0a81003 	ldbu	r2,-24512(gp)
 202bf90:	10803fcc 	andi	r2,r2,255
 202bf94:	100b883a 	mov	r5,r2
 202bf98:	01008134 	movhi	r4,516
 202bf9c:	21066b04 	addi	r4,r4,6572
 202bfa0:	20009e40 	call	20009e4 <printf>
        return ALTERA_TSE_MALLOC_FAILED;
 202bfa4:	00bfffc4 	movi	r2,-1
 202bfa8:	00002206 	br	202c034 <alt_tse_phy_add_profile+0x1cc>
    }

    /* Store PHY information */
    *pphy_profiles[phy_profile_count] = *phy;
 202bfac:	d0a81003 	ldbu	r2,-24512(gp)
 202bfb0:	10c03fcc 	andi	r3,r2,255
 202bfb4:	008085f4 	movhi	r2,535
 202bfb8:	10a94c04 	addi	r2,r2,-23248
 202bfbc:	18c7883a 	add	r3,r3,r3
 202bfc0:	18c7883a 	add	r3,r3,r3
 202bfc4:	10c5883a 	add	r2,r2,r3
 202bfc8:	10c00017 	ldw	r3,0(r2)
 202bfcc:	e0bffe17 	ldw	r2,-8(fp)
 202bfd0:	1009883a 	mov	r4,r2
 202bfd4:	00801904 	movi	r2,100
 202bfd8:	100d883a 	mov	r6,r2
 202bfdc:	200b883a 	mov	r5,r4
 202bfe0:	1809883a 	mov	r4,r3
 202bfe4:	2005e580 	call	2005e58 <memcpy>
    strcpy(pphy_profiles[phy_profile_count]->name, phy->name);
 202bfe8:	d0a81003 	ldbu	r2,-24512(gp)
 202bfec:	10c03fcc 	andi	r3,r2,255
 202bff0:	008085f4 	movhi	r2,535
 202bff4:	10a94c04 	addi	r2,r2,-23248
 202bff8:	18c7883a 	add	r3,r3,r3
 202bffc:	18c7883a 	add	r3,r3,r3
 202c000:	10c5883a 	add	r2,r2,r3
 202c004:	10800017 	ldw	r2,0(r2)
 202c008:	1007883a 	mov	r3,r2
 202c00c:	e0bffe17 	ldw	r2,-8(fp)
 202c010:	100b883a 	mov	r5,r2
 202c014:	1809883a 	mov	r4,r3
 202c018:	203cf300 	call	203cf30 <strcpy>
    
    phy_profile_count++;
 202c01c:	d0a81003 	ldbu	r2,-24512(gp)
 202c020:	10800044 	addi	r2,r2,1
 202c024:	d0a81005 	stb	r2,-24512(gp)
    
    return phy_profile_count - 1;
 202c028:	d0a81003 	ldbu	r2,-24512(gp)
 202c02c:	10803fcc 	andi	r2,r2,255
 202c030:	10bfffc4 	addi	r2,r2,-1
}
 202c034:	e6ffff04 	addi	sp,fp,-4
 202c038:	dfc00217 	ldw	ra,8(sp)
 202c03c:	df000117 	ldw	fp,4(sp)
 202c040:	dc000017 	ldw	r16,0(sp)
 202c044:	dec00304 	addi	sp,sp,12
 202c048:	f800283a 	ret

0202c04c <alt_tse_system_add_sys>:
alt_32 alt_tse_system_add_sys(
	alt_tse_system_mac					*psys_mac,
	alt_tse_system_sgdma				*psys_sgdma,
	alt_tse_system_desc_mem				*psys_mem,
	alt_tse_system_shared_fifo			*psys_shared_fifo,
	alt_tse_system_phy 					*psys_phy ) {
 202c04c:	defff204 	addi	sp,sp,-56
 202c050:	dfc00d15 	stw	ra,52(sp)
 202c054:	df000c15 	stw	fp,48(sp)
 202c058:	dc000b15 	stw	r16,44(sp)
 202c05c:	df000c04 	addi	fp,sp,48
 202c060:	e13ffb15 	stw	r4,-20(fp)
 202c064:	e17ffc15 	stw	r5,-16(fp)
 202c068:	e1bffd15 	stw	r6,-12(fp)
 202c06c:	e1fffe15 	stw	r7,-8(fp)

	int i;
	int loop_end;
	
	alt_tse_system_mac					*pmac	= psys_mac;
 202c070:	e0bffb17 	ldw	r2,-20(fp)
 202c074:	e0bffa15 	stw	r2,-24(fp)
	alt_tse_system_sgdma				*psgdma	= psys_sgdma;
 202c078:	e0bffc17 	ldw	r2,-16(fp)
 202c07c:	e0bff615 	stw	r2,-40(fp)
	alt_tse_system_desc_mem				*pmem	= psys_mem;
 202c080:	e0bffd17 	ldw	r2,-12(fp)
 202c084:	e0bff715 	stw	r2,-36(fp)
	alt_tse_system_shared_fifo			*pfifo	= psys_shared_fifo;
 202c088:	e0bffe17 	ldw	r2,-8(fp)
 202c08c:	e0bff815 	stw	r2,-32(fp)
	alt_tse_system_phy 					*pphy	= psys_phy;
 202c090:	e0800217 	ldw	r2,8(fp)
 202c094:	e0bff915 	stw	r2,-28(fp)
	
	static alt_8 tse_system_count = 0;
	
	/* Determine number of loop */
	/* Run at least one for non-multi-channel MAC */
	if(pmac->tse_num_of_channel == 0) {
 202c098:	e0bffa17 	ldw	r2,-24(fp)
 202c09c:	10800303 	ldbu	r2,12(r2)
 202c0a0:	10803fcc 	andi	r2,r2,255
 202c0a4:	1000031e 	bne	r2,zero,202c0b4 <alt_tse_system_add_sys+0x68>
		loop_end = 1;
 202c0a8:	00800044 	movi	r2,1
 202c0ac:	e0bff515 	stw	r2,-44(fp)
 202c0b0:	00000e06 	br	202c0ec <alt_tse_system_add_sys+0xa0>
	}
	else if(pmac->tse_num_of_channel > 0) {
 202c0b4:	e0bffa17 	ldw	r2,-24(fp)
 202c0b8:	10800303 	ldbu	r2,12(r2)
 202c0bc:	10803fcc 	andi	r2,r2,255
 202c0c0:	10000526 	beq	r2,zero,202c0d8 <alt_tse_system_add_sys+0x8c>
		loop_end = pmac->tse_num_of_channel; 
 202c0c4:	e0bffa17 	ldw	r2,-24(fp)
 202c0c8:	10800303 	ldbu	r2,12(r2)
 202c0cc:	10803fcc 	andi	r2,r2,255
 202c0d0:	e0bff515 	stw	r2,-44(fp)
 202c0d4:	00000506 	br	202c0ec <alt_tse_system_add_sys+0xa0>
	}
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
 202c0d8:	01008134 	movhi	r4,516
 202c0dc:	21067a04 	addi	r4,r4,6632
 202c0e0:	203cd600 	call	203cd60 <puts>
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
 202c0e4:	00bfffc4 	movi	r2,-1
 202c0e8:	00025106 	br	202ca30 <alt_tse_system_add_sys+0x9e4>
	}

	for(i = 0; i < loop_end; i++) {
 202c0ec:	e03ff415 	stw	zero,-48(fp)
 202c0f0:	00024b06 	br	202ca20 <alt_tse_system_add_sys+0x9d4>
		
		/* Make sure the boundary of array is not exceeded */
		if(tse_system_count >= MAXNETS) {
 202c0f4:	d0a81083 	ldbu	r2,-24510(gp)
 202c0f8:	10803fcc 	andi	r2,r2,255
 202c0fc:	1080201c 	xori	r2,r2,128
 202c100:	10bfe004 	addi	r2,r2,-128
 202c104:	10800210 	cmplti	r2,r2,8
 202c108:	10000c1e 	bne	r2,zero,202c13c <alt_tse_system_add_sys+0xf0>
			tse_dprintf(2, "ERROR   : Number of TSE System added exceed the size of array!\n");
 202c10c:	01008134 	movhi	r4,516
 202c110:	21068604 	addi	r4,r4,6680
 202c114:	203cd600 	call	203cd60 <puts>
			tse_dprintf(2, "ERROR   : Size of array = %d, Number of TSE System = %d\n", MAXNETS, tse_system_count);
 202c118:	d0a81083 	ldbu	r2,-24510(gp)
 202c11c:	10803fcc 	andi	r2,r2,255
 202c120:	1080201c 	xori	r2,r2,128
 202c124:	10bfe004 	addi	r2,r2,-128
 202c128:	100d883a 	mov	r6,r2
 202c12c:	01400204 	movi	r5,8
 202c130:	01008134 	movhi	r4,516
 202c134:	21069604 	addi	r4,r4,6744
 202c138:	20009e40 	call	20009e4 <printf>
		}

		/* Add MAC info to alt_tse_system_info structure */
		if(pmac == 0) {
 202c13c:	e0bffa17 	ldw	r2,-24(fp)
 202c140:	1000081e 	bne	r2,zero,202c164 <alt_tse_system_add_sys+0x118>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 202c144:	01008134 	movhi	r4,516
 202c148:	2106a504 	addi	r4,r4,6804
 202c14c:	203cd600 	call	203cd60 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys()\n");
 202c150:	01008134 	movhi	r4,516
 202c154:	2106af04 	addi	r4,r4,6844
 202c158:	203cd600 	call	203cd60 <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 202c15c:	00bfffc4 	movi	r2,-1
 202c160:	00023306 	br	202ca30 <alt_tse_system_add_sys+0x9e4>
		}		
		
		tse_mac_device[tse_system_count].tse_mac_base 					= pmac->tse_mac_base + (i * 0x400);
 202c164:	d0a81083 	ldbu	r2,-24510(gp)
 202c168:	11003fcc 	andi	r4,r2,255
 202c16c:	2100201c 	xori	r4,r4,128
 202c170:	213fe004 	addi	r4,r4,-128
 202c174:	e0bffa17 	ldw	r2,-24(fp)
 202c178:	10800017 	ldw	r2,0(r2)
 202c17c:	e0fff417 	ldw	r3,-48(fp)
 202c180:	180692ba 	slli	r3,r3,10
 202c184:	10c7883a 	add	r3,r2,r3
 202c188:	00808134 	movhi	r2,516
 202c18c:	10955704 	addi	r2,r2,21852
 202c190:	21001224 	muli	r4,r4,72
 202c194:	1105883a 	add	r2,r2,r4
 202c198:	10c00015 	stw	r3,0(r2)
		tse_mac_device[tse_system_count].tse_tx_depth 					= pmac->tse_tx_depth;
 202c19c:	d0a81083 	ldbu	r2,-24510(gp)
 202c1a0:	11003fcc 	andi	r4,r2,255
 202c1a4:	2100201c 	xori	r4,r4,128
 202c1a8:	213fe004 	addi	r4,r4,-128
 202c1ac:	e0bffa17 	ldw	r2,-24(fp)
 202c1b0:	10c0010b 	ldhu	r3,4(r2)
 202c1b4:	00808134 	movhi	r2,516
 202c1b8:	10955704 	addi	r2,r2,21852
 202c1bc:	21001224 	muli	r4,r4,72
 202c1c0:	1105883a 	add	r2,r2,r4
 202c1c4:	10800104 	addi	r2,r2,4
 202c1c8:	10c0000d 	sth	r3,0(r2)
		tse_mac_device[tse_system_count].tse_rx_depth 					= pmac->tse_rx_depth;
 202c1cc:	d0a81083 	ldbu	r2,-24510(gp)
 202c1d0:	11003fcc 	andi	r4,r2,255
 202c1d4:	2100201c 	xori	r4,r4,128
 202c1d8:	213fe004 	addi	r4,r4,-128
 202c1dc:	e0bffa17 	ldw	r2,-24(fp)
 202c1e0:	10c0018b 	ldhu	r3,6(r2)
 202c1e4:	00808134 	movhi	r2,516
 202c1e8:	10955704 	addi	r2,r2,21852
 202c1ec:	21001224 	muli	r4,r4,72
 202c1f0:	1105883a 	add	r2,r2,r4
 202c1f4:	10800184 	addi	r2,r2,6
 202c1f8:	10c0000d 	sth	r3,0(r2)
		tse_mac_device[tse_system_count].tse_use_mdio 					= pmac->tse_use_mdio;
 202c1fc:	d0a81083 	ldbu	r2,-24510(gp)
 202c200:	11003fcc 	andi	r4,r2,255
 202c204:	2100201c 	xori	r4,r4,128
 202c208:	213fe004 	addi	r4,r4,-128
 202c20c:	e0bffa17 	ldw	r2,-24(fp)
 202c210:	10c00203 	ldbu	r3,8(r2)
 202c214:	00808134 	movhi	r2,516
 202c218:	10955704 	addi	r2,r2,21852
 202c21c:	21001224 	muli	r4,r4,72
 202c220:	1105883a 	add	r2,r2,r4
 202c224:	10800204 	addi	r2,r2,8
 202c228:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_en_maclite 				= pmac->tse_en_maclite;
 202c22c:	d0a81083 	ldbu	r2,-24510(gp)
 202c230:	11003fcc 	andi	r4,r2,255
 202c234:	2100201c 	xori	r4,r4,128
 202c238:	213fe004 	addi	r4,r4,-128
 202c23c:	e0bffa17 	ldw	r2,-24(fp)
 202c240:	10c00243 	ldbu	r3,9(r2)
 202c244:	00808134 	movhi	r2,516
 202c248:	10955704 	addi	r2,r2,21852
 202c24c:	21001224 	muli	r4,r4,72
 202c250:	1105883a 	add	r2,r2,r4
 202c254:	10800244 	addi	r2,r2,9
 202c258:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_maclite_gige 				= pmac->tse_maclite_gige;
 202c25c:	d0a81083 	ldbu	r2,-24510(gp)
 202c260:	11003fcc 	andi	r4,r2,255
 202c264:	2100201c 	xori	r4,r4,128
 202c268:	213fe004 	addi	r4,r4,-128
 202c26c:	e0bffa17 	ldw	r2,-24(fp)
 202c270:	10c00283 	ldbu	r3,10(r2)
 202c274:	00808134 	movhi	r2,516
 202c278:	10955704 	addi	r2,r2,21852
 202c27c:	21001224 	muli	r4,r4,72
 202c280:	1105883a 	add	r2,r2,r4
 202c284:	10800284 	addi	r2,r2,10
 202c288:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_multichannel_mac 			= pmac->tse_multichannel_mac;
 202c28c:	d0a81083 	ldbu	r2,-24510(gp)
 202c290:	11003fcc 	andi	r4,r2,255
 202c294:	2100201c 	xori	r4,r4,128
 202c298:	213fe004 	addi	r4,r4,-128
 202c29c:	e0bffa17 	ldw	r2,-24(fp)
 202c2a0:	10c002c3 	ldbu	r3,11(r2)
 202c2a4:	00808134 	movhi	r2,516
 202c2a8:	10955704 	addi	r2,r2,21852
 202c2ac:	21001224 	muli	r4,r4,72
 202c2b0:	1105883a 	add	r2,r2,r4
 202c2b4:	108002c4 	addi	r2,r2,11
 202c2b8:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_num_of_channel 			= pmac->tse_num_of_channel;
 202c2bc:	d0a81083 	ldbu	r2,-24510(gp)
 202c2c0:	11003fcc 	andi	r4,r2,255
 202c2c4:	2100201c 	xori	r4,r4,128
 202c2c8:	213fe004 	addi	r4,r4,-128
 202c2cc:	e0bffa17 	ldw	r2,-24(fp)
 202c2d0:	10c00303 	ldbu	r3,12(r2)
 202c2d4:	00808134 	movhi	r2,516
 202c2d8:	10955704 	addi	r2,r2,21852
 202c2dc:	21001224 	muli	r4,r4,72
 202c2e0:	1105883a 	add	r2,r2,r4
 202c2e4:	10800304 	addi	r2,r2,12
 202c2e8:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_mdio_shared 				= pmac->tse_mdio_shared;
 202c2ec:	d0a81083 	ldbu	r2,-24510(gp)
 202c2f0:	11003fcc 	andi	r4,r2,255
 202c2f4:	2100201c 	xori	r4,r4,128
 202c2f8:	213fe004 	addi	r4,r4,-128
 202c2fc:	e0bffa17 	ldw	r2,-24(fp)
 202c300:	10c00343 	ldbu	r3,13(r2)
 202c304:	00808134 	movhi	r2,516
 202c308:	10955704 	addi	r2,r2,21852
 202c30c:	21001224 	muli	r4,r4,72
 202c310:	1105883a 	add	r2,r2,r4
 202c314:	10800344 	addi	r2,r2,13
 202c318:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_number_of_mac_mdio_shared	= pmac->tse_number_of_mac_mdio_shared;
 202c31c:	d0a81083 	ldbu	r2,-24510(gp)
 202c320:	11003fcc 	andi	r4,r2,255
 202c324:	2100201c 	xori	r4,r4,128
 202c328:	213fe004 	addi	r4,r4,-128
 202c32c:	e0bffa17 	ldw	r2,-24(fp)
 202c330:	10c00383 	ldbu	r3,14(r2)
 202c334:	00808134 	movhi	r2,516
 202c338:	10955704 	addi	r2,r2,21852
 202c33c:	21001224 	muli	r4,r4,72
 202c340:	1105883a 	add	r2,r2,r4
 202c344:	10800384 	addi	r2,r2,14
 202c348:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_pcs_ena 					= pmac->tse_pcs_ena;
 202c34c:	d0a81083 	ldbu	r2,-24510(gp)
 202c350:	11003fcc 	andi	r4,r2,255
 202c354:	2100201c 	xori	r4,r4,128
 202c358:	213fe004 	addi	r4,r4,-128
 202c35c:	e0bffa17 	ldw	r2,-24(fp)
 202c360:	10c003c3 	ldbu	r3,15(r2)
 202c364:	00808134 	movhi	r2,516
 202c368:	10955704 	addi	r2,r2,21852
 202c36c:	21001224 	muli	r4,r4,72
 202c370:	1105883a 	add	r2,r2,r4
 202c374:	108003c4 	addi	r2,r2,15
 202c378:	10c00005 	stb	r3,0(r2)
		tse_mac_device[tse_system_count].tse_pcs_sgmii 					= pmac->tse_pcs_sgmii;
 202c37c:	d0a81083 	ldbu	r2,-24510(gp)
 202c380:	11003fcc 	andi	r4,r2,255
 202c384:	2100201c 	xori	r4,r4,128
 202c388:	213fe004 	addi	r4,r4,-128
 202c38c:	e0bffa17 	ldw	r2,-24(fp)
 202c390:	10c00403 	ldbu	r3,16(r2)
 202c394:	00808134 	movhi	r2,516
 202c398:	10955704 	addi	r2,r2,21852
 202c39c:	21001224 	muli	r4,r4,72
 202c3a0:	1105883a 	add	r2,r2,r4
 202c3a4:	10800404 	addi	r2,r2,16
 202c3a8:	10c00005 	stb	r3,0(r2)
		
		/* Add SGDMA info to alt_tse_system_info structure */
		if(psgdma == 0) {
 202c3ac:	e0bff617 	ldw	r2,-40(fp)
 202c3b0:	10000d1e 	bne	r2,zero,202c3e8 <alt_tse_system_add_sys+0x39c>
			tse_dprintf(2, "ERROR   : SGDMA system structure == NULL\n");
 202c3b4:	01008134 	movhi	r4,516
 202c3b8:	2106c104 	addi	r4,r4,6916
 202c3bc:	203cd600 	call	203cd60 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_system_add_sys() for tse_mac_device[%d]\n", tse_system_count);
 202c3c0:	d0a81083 	ldbu	r2,-24510(gp)
 202c3c4:	10803fcc 	andi	r2,r2,255
 202c3c8:	1080201c 	xori	r2,r2,128
 202c3cc:	10bfe004 	addi	r2,r2,-128
 202c3d0:	100b883a 	mov	r5,r2
 202c3d4:	01008134 	movhi	r4,516
 202c3d8:	2106cc04 	addi	r4,r4,6960
 202c3dc:	20009e40 	call	20009e4 <printf>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 202c3e0:	00bfffc4 	movi	r2,-1
 202c3e4:	00019206 	br	202ca30 <alt_tse_system_add_sys+0x9e4>
		}
		
		tse_mac_device[tse_system_count].tse_sgdma_tx = (char *) malloc(strlen(psgdma->tse_sgdma_tx) + 1);
 202c3e8:	d0a81083 	ldbu	r2,-24510(gp)
 202c3ec:	14003fcc 	andi	r16,r2,255
 202c3f0:	8400201c 	xori	r16,r16,128
 202c3f4:	843fe004 	addi	r16,r16,-128
 202c3f8:	e0bff617 	ldw	r2,-40(fp)
 202c3fc:	10800017 	ldw	r2,0(r2)
 202c400:	1009883a 	mov	r4,r2
 202c404:	20073a40 	call	20073a4 <strlen>
 202c408:	10800044 	addi	r2,r2,1
 202c40c:	1009883a 	mov	r4,r2
 202c410:	203ca940 	call	203ca94 <malloc>
 202c414:	1009883a 	mov	r4,r2
 202c418:	00808134 	movhi	r2,516
 202c41c:	10955704 	addi	r2,r2,21852
 202c420:	80c01224 	muli	r3,r16,72
 202c424:	10c5883a 	add	r2,r2,r3
 202c428:	10800504 	addi	r2,r2,20
 202c42c:	11000015 	stw	r4,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_tx) {
 202c430:	d0a81083 	ldbu	r2,-24510(gp)
 202c434:	10c03fcc 	andi	r3,r2,255
 202c438:	18c0201c 	xori	r3,r3,128
 202c43c:	18ffe004 	addi	r3,r3,-128
 202c440:	00808134 	movhi	r2,516
 202c444:	10955704 	addi	r2,r2,21852
 202c448:	18c01224 	muli	r3,r3,72
 202c44c:	10c5883a 	add	r2,r2,r3
 202c450:	10800504 	addi	r2,r2,20
 202c454:	10800017 	ldw	r2,0(r2)
 202c458:	10000a1e 	bne	r2,zero,202c484 <alt_tse_system_add_sys+0x438>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_tx\n", tse_system_count);
 202c45c:	d0a81083 	ldbu	r2,-24510(gp)
 202c460:	10803fcc 	andi	r2,r2,255
 202c464:	1080201c 	xori	r2,r2,128
 202c468:	10bfe004 	addi	r2,r2,-128
 202c46c:	100b883a 	mov	r5,r2
 202c470:	01008134 	movhi	r4,516
 202c474:	2106e404 	addi	r4,r4,7056
 202c478:	20009e40 	call	20009e4 <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
 202c47c:	00bfffc4 	movi	r2,-1
 202c480:	00016b06 	br	202ca30 <alt_tse_system_add_sys+0x9e4>
	    }   
		strcpy(tse_mac_device[tse_system_count].tse_sgdma_tx, psgdma->tse_sgdma_tx);
 202c484:	d0a81083 	ldbu	r2,-24510(gp)
 202c488:	10c03fcc 	andi	r3,r2,255
 202c48c:	18c0201c 	xori	r3,r3,128
 202c490:	18ffe004 	addi	r3,r3,-128
 202c494:	00808134 	movhi	r2,516
 202c498:	10955704 	addi	r2,r2,21852
 202c49c:	18c01224 	muli	r3,r3,72
 202c4a0:	10c5883a 	add	r2,r2,r3
 202c4a4:	10800504 	addi	r2,r2,20
 202c4a8:	10c00017 	ldw	r3,0(r2)
 202c4ac:	e0bff617 	ldw	r2,-40(fp)
 202c4b0:	10800017 	ldw	r2,0(r2)
 202c4b4:	100b883a 	mov	r5,r2
 202c4b8:	1809883a 	mov	r4,r3
 202c4bc:	203cf300 	call	203cf30 <strcpy>
		
		tse_mac_device[tse_system_count].tse_sgdma_rx = (char *) malloc(strlen(psgdma->tse_sgdma_rx) + 1);
 202c4c0:	d0a81083 	ldbu	r2,-24510(gp)
 202c4c4:	14003fcc 	andi	r16,r2,255
 202c4c8:	8400201c 	xori	r16,r16,128
 202c4cc:	843fe004 	addi	r16,r16,-128
 202c4d0:	e0bff617 	ldw	r2,-40(fp)
 202c4d4:	10800117 	ldw	r2,4(r2)
 202c4d8:	1009883a 	mov	r4,r2
 202c4dc:	20073a40 	call	20073a4 <strlen>
 202c4e0:	10800044 	addi	r2,r2,1
 202c4e4:	1009883a 	mov	r4,r2
 202c4e8:	203ca940 	call	203ca94 <malloc>
 202c4ec:	1009883a 	mov	r4,r2
 202c4f0:	00808134 	movhi	r2,516
 202c4f4:	10955704 	addi	r2,r2,21852
 202c4f8:	80c01224 	muli	r3,r16,72
 202c4fc:	10c5883a 	add	r2,r2,r3
 202c500:	10800604 	addi	r2,r2,24
 202c504:	11000015 	stw	r4,0(r2)
	    if(!tse_mac_device[tse_system_count].tse_sgdma_rx) {
 202c508:	d0a81083 	ldbu	r2,-24510(gp)
 202c50c:	10c03fcc 	andi	r3,r2,255
 202c510:	18c0201c 	xori	r3,r3,128
 202c514:	18ffe004 	addi	r3,r3,-128
 202c518:	00808134 	movhi	r2,516
 202c51c:	10955704 	addi	r2,r2,21852
 202c520:	18c01224 	muli	r3,r3,72
 202c524:	10c5883a 	add	r2,r2,r3
 202c528:	10800604 	addi	r2,r2,24
 202c52c:	10800017 	ldw	r2,0(r2)
 202c530:	10000a1e 	bne	r2,zero,202c55c <alt_tse_system_add_sys+0x510>
	        tse_dprintf(1, "ERROR   : Unable to allocate memory for tse_mac_device[%d].tse_sgdma_rx\n", tse_system_count);
 202c534:	d0a81083 	ldbu	r2,-24510(gp)
 202c538:	10803fcc 	andi	r2,r2,255
 202c53c:	1080201c 	xori	r2,r2,128
 202c540:	10bfe004 	addi	r2,r2,-128
 202c544:	100b883a 	mov	r5,r2
 202c548:	01008134 	movhi	r4,516
 202c54c:	2106f704 	addi	r4,r4,7132
 202c550:	20009e40 	call	20009e4 <printf>
	        return ALTERA_TSE_MALLOC_FAILED;
 202c554:	00bfffc4 	movi	r2,-1
 202c558:	00013506 	br	202ca30 <alt_tse_system_add_sys+0x9e4>
	    }
	    strcpy(tse_mac_device[tse_system_count].tse_sgdma_rx, psgdma->tse_sgdma_rx);
 202c55c:	d0a81083 	ldbu	r2,-24510(gp)
 202c560:	10c03fcc 	andi	r3,r2,255
 202c564:	18c0201c 	xori	r3,r3,128
 202c568:	18ffe004 	addi	r3,r3,-128
 202c56c:	00808134 	movhi	r2,516
 202c570:	10955704 	addi	r2,r2,21852
 202c574:	18c01224 	muli	r3,r3,72
 202c578:	10c5883a 	add	r2,r2,r3
 202c57c:	10800604 	addi	r2,r2,24
 202c580:	10c00017 	ldw	r3,0(r2)
 202c584:	e0bff617 	ldw	r2,-40(fp)
 202c588:	10800117 	ldw	r2,4(r2)
 202c58c:	100b883a 	mov	r5,r2
 202c590:	1809883a 	mov	r4,r3
 202c594:	203cf300 	call	203cf30 <strcpy>
	    
		tse_mac_device[tse_system_count].tse_sgdma_rx_irq = psgdma->tse_sgdma_rx_irq;
 202c598:	d0a81083 	ldbu	r2,-24510(gp)
 202c59c:	11003fcc 	andi	r4,r2,255
 202c5a0:	2100201c 	xori	r4,r4,128
 202c5a4:	213fe004 	addi	r4,r4,-128
 202c5a8:	e0bff617 	ldw	r2,-40(fp)
 202c5ac:	10c0020b 	ldhu	r3,8(r2)
 202c5b0:	00808134 	movhi	r2,516
 202c5b4:	10955704 	addi	r2,r2,21852
 202c5b8:	21001224 	muli	r4,r4,72
 202c5bc:	1105883a 	add	r2,r2,r4
 202c5c0:	10800704 	addi	r2,r2,28
 202c5c4:	10c0000d 	sth	r3,0(r2)
		
		/* Add descriptor memory info to alt_tse_system_info structure */
		if(pmem == 0) {
 202c5c8:	e0bff717 	ldw	r2,-36(fp)
 202c5cc:	1000151e 	bne	r2,zero,202c624 <alt_tse_system_add_sys+0x5d8>
			tse_mac_device[tse_system_count].ext_desc_mem	= TSE_INT_DESC_MEM;
 202c5d0:	d0a81083 	ldbu	r2,-24510(gp)
 202c5d4:	10c03fcc 	andi	r3,r2,255
 202c5d8:	18c0201c 	xori	r3,r3,128
 202c5dc:	18ffe004 	addi	r3,r3,-128
 202c5e0:	00808134 	movhi	r2,516
 202c5e4:	10955704 	addi	r2,r2,21852
 202c5e8:	18c01224 	muli	r3,r3,72
 202c5ec:	10c5883a 	add	r2,r2,r3
 202c5f0:	10800784 	addi	r2,r2,30
 202c5f4:	10000005 	stb	zero,0(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= TSE_INT_DESC_MEM;
 202c5f8:	d0a81083 	ldbu	r2,-24510(gp)
 202c5fc:	10c03fcc 	andi	r3,r2,255
 202c600:	18c0201c 	xori	r3,r3,128
 202c604:	18ffe004 	addi	r3,r3,-128
 202c608:	00808134 	movhi	r2,516
 202c60c:	10955704 	addi	r2,r2,21852
 202c610:	18c01224 	muli	r3,r3,72
 202c614:	10c5883a 	add	r2,r2,r3
 202c618:	10800804 	addi	r2,r2,32
 202c61c:	10000015 	stw	zero,0(r2)
 202c620:	00001806 	br	202c684 <alt_tse_system_add_sys+0x638>
		}
		else {
			tse_mac_device[tse_system_count].ext_desc_mem	= pmem->ext_desc_mem;
 202c624:	d0a81083 	ldbu	r2,-24510(gp)
 202c628:	11003fcc 	andi	r4,r2,255
 202c62c:	2100201c 	xori	r4,r4,128
 202c630:	213fe004 	addi	r4,r4,-128
 202c634:	e0bff717 	ldw	r2,-36(fp)
 202c638:	10c00003 	ldbu	r3,0(r2)
 202c63c:	00808134 	movhi	r2,516
 202c640:	10955704 	addi	r2,r2,21852
 202c644:	21001224 	muli	r4,r4,72
 202c648:	1105883a 	add	r2,r2,r4
 202c64c:	10800784 	addi	r2,r2,30
 202c650:	10c00005 	stb	r3,0(r2)
			tse_mac_device[tse_system_count].desc_mem_base	= pmem->desc_mem_base;
 202c654:	d0a81083 	ldbu	r2,-24510(gp)
 202c658:	11003fcc 	andi	r4,r2,255
 202c65c:	2100201c 	xori	r4,r4,128
 202c660:	213fe004 	addi	r4,r4,-128
 202c664:	e0bff717 	ldw	r2,-36(fp)
 202c668:	10c00117 	ldw	r3,4(r2)
 202c66c:	00808134 	movhi	r2,516
 202c670:	10955704 	addi	r2,r2,21852
 202c674:	21001224 	muli	r4,r4,72
 202c678:	1105883a 	add	r2,r2,r4
 202c67c:	10800804 	addi	r2,r2,32
 202c680:	10c00015 	stw	r3,0(r2)
		}
		
		/* Add shared fifo info to alt_tse_system_info structure */
		if(pfifo == 0) {
 202c684:	e0bff817 	ldw	r2,-32(fp)
 202c688:	1000471e 	bne	r2,zero,202c7a8 <alt_tse_system_add_sys+0x75c>
			tse_mac_device[tse_system_count].use_shared_fifo                = TSE_NO_SHARED_FIFO;
 202c68c:	d0a81083 	ldbu	r2,-24510(gp)
 202c690:	10c03fcc 	andi	r3,r2,255
 202c694:	18c0201c 	xori	r3,r3,128
 202c698:	18ffe004 	addi	r3,r3,-128
 202c69c:	00808134 	movhi	r2,516
 202c6a0:	10955704 	addi	r2,r2,21852
 202c6a4:	18c01224 	muli	r3,r3,72
 202c6a8:	10c5883a 	add	r2,r2,r3
 202c6ac:	10800904 	addi	r2,r2,36
 202c6b0:	10000005 	stb	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= TSE_NO_SHARED_FIFO;
 202c6b4:	d0a81083 	ldbu	r2,-24510(gp)
 202c6b8:	10c03fcc 	andi	r3,r2,255
 202c6bc:	18c0201c 	xori	r3,r3,128
 202c6c0:	18ffe004 	addi	r3,r3,-128
 202c6c4:	00808134 	movhi	r2,516
 202c6c8:	10955704 	addi	r2,r2,21852
 202c6cc:	18c01224 	muli	r3,r3,72
 202c6d0:	10c5883a 	add	r2,r2,r3
 202c6d4:	10800a04 	addi	r2,r2,40
 202c6d8:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= TSE_NO_SHARED_FIFO;
 202c6dc:	d0a81083 	ldbu	r2,-24510(gp)
 202c6e0:	10c03fcc 	andi	r3,r2,255
 202c6e4:	18c0201c 	xori	r3,r3,128
 202c6e8:	18ffe004 	addi	r3,r3,-128
 202c6ec:	00808134 	movhi	r2,516
 202c6f0:	10955704 	addi	r2,r2,21852
 202c6f4:	18c01224 	muli	r3,r3,72
 202c6f8:	10c5883a 	add	r2,r2,r3
 202c6fc:	10800b04 	addi	r2,r2,44
 202c700:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = TSE_NO_SHARED_FIFO;
 202c704:	d0a81083 	ldbu	r2,-24510(gp)
 202c708:	10c03fcc 	andi	r3,r2,255
 202c70c:	18c0201c 	xori	r3,r3,128
 202c710:	18ffe004 	addi	r3,r3,-128
 202c714:	00808134 	movhi	r2,516
 202c718:	10955704 	addi	r2,r2,21852
 202c71c:	18c01224 	muli	r3,r3,72
 202c720:	10c5883a 	add	r2,r2,r3
 202c724:	10800c04 	addi	r2,r2,48
 202c728:	10000015 	stw	zero,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= TSE_NO_SHARED_FIFO;
 202c72c:	d0a81083 	ldbu	r2,-24510(gp)
 202c730:	10c03fcc 	andi	r3,r2,255
 202c734:	18c0201c 	xori	r3,r3,128
 202c738:	18ffe004 	addi	r3,r3,-128
 202c73c:	00808134 	movhi	r2,516
 202c740:	10955704 	addi	r2,r2,21852
 202c744:	18c01224 	muli	r3,r3,72
 202c748:	10c5883a 	add	r2,r2,r3
 202c74c:	10800d04 	addi	r2,r2,52
 202c750:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= TSE_NO_SHARED_FIFO;
 202c754:	d0a81083 	ldbu	r2,-24510(gp)
 202c758:	10c03fcc 	andi	r3,r2,255
 202c75c:	18c0201c 	xori	r3,r3,128
 202c760:	18ffe004 	addi	r3,r3,-128
 202c764:	00808134 	movhi	r2,516
 202c768:	10955704 	addi	r2,r2,21852
 202c76c:	18c01224 	muli	r3,r3,72
 202c770:	10c5883a 	add	r2,r2,r3
 202c774:	10800e04 	addi	r2,r2,56
 202c778:	10000015 	stw	zero,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = TSE_NO_SHARED_FIFO;
 202c77c:	d0a81083 	ldbu	r2,-24510(gp)
 202c780:	10c03fcc 	andi	r3,r2,255
 202c784:	18c0201c 	xori	r3,r3,128
 202c788:	18ffe004 	addi	r3,r3,-128
 202c78c:	00808134 	movhi	r2,516
 202c790:	10955704 	addi	r2,r2,21852
 202c794:	18c01224 	muli	r3,r3,72
 202c798:	10c5883a 	add	r2,r2,r3
 202c79c:	10800f04 	addi	r2,r2,60
 202c7a0:	10000015 	stw	zero,0(r2)
 202c7a4:	00005406 	br	202c8f8 <alt_tse_system_add_sys+0x8ac>
		}
		else {
			tse_mac_device[tse_system_count].use_shared_fifo                = pfifo->use_shared_fifo;
 202c7a8:	d0a81083 	ldbu	r2,-24510(gp)
 202c7ac:	11003fcc 	andi	r4,r2,255
 202c7b0:	2100201c 	xori	r4,r4,128
 202c7b4:	213fe004 	addi	r4,r4,-128
 202c7b8:	e0bff817 	ldw	r2,-32(fp)
 202c7bc:	10c00003 	ldbu	r3,0(r2)
 202c7c0:	00808134 	movhi	r2,516
 202c7c4:	10955704 	addi	r2,r2,21852
 202c7c8:	21001224 	muli	r4,r4,72
 202c7cc:	1105883a 	add	r2,r2,r4
 202c7d0:	10800904 	addi	r2,r2,36
 202c7d4:	10c00005 	stb	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_ctrl_base	= pfifo->tse_shared_fifo_tx_ctrl_base;
 202c7d8:	d0a81083 	ldbu	r2,-24510(gp)
 202c7dc:	11003fcc 	andi	r4,r2,255
 202c7e0:	2100201c 	xori	r4,r4,128
 202c7e4:	213fe004 	addi	r4,r4,-128
 202c7e8:	e0bff817 	ldw	r2,-32(fp)
 202c7ec:	10c00117 	ldw	r3,4(r2)
 202c7f0:	00808134 	movhi	r2,516
 202c7f4:	10955704 	addi	r2,r2,21852
 202c7f8:	21001224 	muli	r4,r4,72
 202c7fc:	1105883a 	add	r2,r2,r4
 202c800:	10800a04 	addi	r2,r2,40
 202c804:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_stat_base	= pfifo->tse_shared_fifo_tx_stat_base;
 202c808:	d0a81083 	ldbu	r2,-24510(gp)
 202c80c:	11003fcc 	andi	r4,r2,255
 202c810:	2100201c 	xori	r4,r4,128
 202c814:	213fe004 	addi	r4,r4,-128
 202c818:	e0bff817 	ldw	r2,-32(fp)
 202c81c:	10c00217 	ldw	r3,8(r2)
 202c820:	00808134 	movhi	r2,516
 202c824:	10955704 	addi	r2,r2,21852
 202c828:	21001224 	muli	r4,r4,72
 202c82c:	1105883a 	add	r2,r2,r4
 202c830:	10800b04 	addi	r2,r2,44
 202c834:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_tx_depth       = pfifo->tse_shared_fifo_tx_depth;
 202c838:	d0a81083 	ldbu	r2,-24510(gp)
 202c83c:	11003fcc 	andi	r4,r2,255
 202c840:	2100201c 	xori	r4,r4,128
 202c844:	213fe004 	addi	r4,r4,-128
 202c848:	e0bff817 	ldw	r2,-32(fp)
 202c84c:	10c00317 	ldw	r3,12(r2)
 202c850:	00808134 	movhi	r2,516
 202c854:	10955704 	addi	r2,r2,21852
 202c858:	21001224 	muli	r4,r4,72
 202c85c:	1105883a 	add	r2,r2,r4
 202c860:	10800c04 	addi	r2,r2,48
 202c864:	10c00015 	stw	r3,0(r2)
			
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_ctrl_base	= pfifo->tse_shared_fifo_rx_ctrl_base;
 202c868:	d0a81083 	ldbu	r2,-24510(gp)
 202c86c:	11003fcc 	andi	r4,r2,255
 202c870:	2100201c 	xori	r4,r4,128
 202c874:	213fe004 	addi	r4,r4,-128
 202c878:	e0bff817 	ldw	r2,-32(fp)
 202c87c:	10c00417 	ldw	r3,16(r2)
 202c880:	00808134 	movhi	r2,516
 202c884:	10955704 	addi	r2,r2,21852
 202c888:	21001224 	muli	r4,r4,72
 202c88c:	1105883a 	add	r2,r2,r4
 202c890:	10800d04 	addi	r2,r2,52
 202c894:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_stat_base	= pfifo->tse_shared_fifo_rx_stat_base;
 202c898:	d0a81083 	ldbu	r2,-24510(gp)
 202c89c:	11003fcc 	andi	r4,r2,255
 202c8a0:	2100201c 	xori	r4,r4,128
 202c8a4:	213fe004 	addi	r4,r4,-128
 202c8a8:	e0bff817 	ldw	r2,-32(fp)
 202c8ac:	10c00517 	ldw	r3,20(r2)
 202c8b0:	00808134 	movhi	r2,516
 202c8b4:	10955704 	addi	r2,r2,21852
 202c8b8:	21001224 	muli	r4,r4,72
 202c8bc:	1105883a 	add	r2,r2,r4
 202c8c0:	10800e04 	addi	r2,r2,56
 202c8c4:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_shared_fifo_rx_depth       = pfifo->tse_shared_fifo_rx_depth;
 202c8c8:	d0a81083 	ldbu	r2,-24510(gp)
 202c8cc:	11003fcc 	andi	r4,r2,255
 202c8d0:	2100201c 	xori	r4,r4,128
 202c8d4:	213fe004 	addi	r4,r4,-128
 202c8d8:	e0bff817 	ldw	r2,-32(fp)
 202c8dc:	10c00617 	ldw	r3,24(r2)
 202c8e0:	00808134 	movhi	r2,516
 202c8e4:	10955704 	addi	r2,r2,21852
 202c8e8:	21001224 	muli	r4,r4,72
 202c8ec:	1105883a 	add	r2,r2,r4
 202c8f0:	10800f04 	addi	r2,r2,60
 202c8f4:	10c00015 	stw	r3,0(r2)
		}
		
		/* Add PHY info to alt_tse_system_info structure */
		if(pphy == 0) {
 202c8f8:	e0bff917 	ldw	r2,-28(fp)
 202c8fc:	1000161e 	bne	r2,zero,202c958 <alt_tse_system_add_sys+0x90c>
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= TSE_PHY_AUTO_ADDRESS;
 202c900:	d0a81083 	ldbu	r2,-24510(gp)
 202c904:	10c03fcc 	andi	r3,r2,255
 202c908:	18c0201c 	xori	r3,r3,128
 202c90c:	18ffe004 	addi	r3,r3,-128
 202c910:	00808134 	movhi	r2,516
 202c914:	10955704 	addi	r2,r2,21852
 202c918:	18c01224 	muli	r3,r3,72
 202c91c:	10c5883a 	add	r2,r2,r3
 202c920:	10801004 	addi	r2,r2,64
 202c924:	00ffffc4 	movi	r3,-1
 202c928:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= 0;
 202c92c:	d0a81083 	ldbu	r2,-24510(gp)
 202c930:	10c03fcc 	andi	r3,r2,255
 202c934:	18c0201c 	xori	r3,r3,128
 202c938:	18ffe004 	addi	r3,r3,-128
 202c93c:	00808134 	movhi	r2,516
 202c940:	10955704 	addi	r2,r2,21852
 202c944:	18c01224 	muli	r3,r3,72
 202c948:	10c5883a 	add	r2,r2,r3
 202c94c:	10801104 	addi	r2,r2,68
 202c950:	10000015 	stw	zero,0(r2)
 202c954:	00001806 	br	202c9b8 <alt_tse_system_add_sys+0x96c>
		}
		else {
			tse_mac_device[tse_system_count].tse_phy_mdio_address	= pphy->tse_phy_mdio_address;
 202c958:	d0a81083 	ldbu	r2,-24510(gp)
 202c95c:	11003fcc 	andi	r4,r2,255
 202c960:	2100201c 	xori	r4,r4,128
 202c964:	213fe004 	addi	r4,r4,-128
 202c968:	e0bff917 	ldw	r2,-28(fp)
 202c96c:	10c00017 	ldw	r3,0(r2)
 202c970:	00808134 	movhi	r2,516
 202c974:	10955704 	addi	r2,r2,21852
 202c978:	21001224 	muli	r4,r4,72
 202c97c:	1105883a 	add	r2,r2,r4
 202c980:	10801004 	addi	r2,r2,64
 202c984:	10c00015 	stw	r3,0(r2)
			tse_mac_device[tse_system_count].tse_phy_cfg 			= pphy->tse_phy_cfg;
 202c988:	d0a81083 	ldbu	r2,-24510(gp)
 202c98c:	11003fcc 	andi	r4,r2,255
 202c990:	2100201c 	xori	r4,r4,128
 202c994:	213fe004 	addi	r4,r4,-128
 202c998:	e0bff917 	ldw	r2,-28(fp)
 202c99c:	10c00117 	ldw	r3,4(r2)
 202c9a0:	00808134 	movhi	r2,516
 202c9a4:	10955704 	addi	r2,r2,21852
 202c9a8:	21001224 	muli	r4,r4,72
 202c9ac:	1105883a 	add	r2,r2,r4
 202c9b0:	10801104 	addi	r2,r2,68
 202c9b4:	10c00015 	stw	r3,0(r2)
		}
		
		/* Point to next structure */
		psgdma++;
 202c9b8:	e0bff617 	ldw	r2,-40(fp)
 202c9bc:	10800304 	addi	r2,r2,12
 202c9c0:	e0bff615 	stw	r2,-40(fp)
		if(pmem) pmem++;
 202c9c4:	e0bff717 	ldw	r2,-36(fp)
 202c9c8:	10000326 	beq	r2,zero,202c9d8 <alt_tse_system_add_sys+0x98c>
 202c9cc:	e0bff717 	ldw	r2,-36(fp)
 202c9d0:	10800204 	addi	r2,r2,8
 202c9d4:	e0bff715 	stw	r2,-36(fp)
		if(pfifo) pfifo++;
 202c9d8:	e0bff817 	ldw	r2,-32(fp)
 202c9dc:	10000326 	beq	r2,zero,202c9ec <alt_tse_system_add_sys+0x9a0>
 202c9e0:	e0bff817 	ldw	r2,-32(fp)
 202c9e4:	10800704 	addi	r2,r2,28
 202c9e8:	e0bff815 	stw	r2,-32(fp)
		if(pphy) pphy++;
 202c9ec:	e0bff917 	ldw	r2,-28(fp)
 202c9f0:	10000326 	beq	r2,zero,202ca00 <alt_tse_system_add_sys+0x9b4>
 202c9f4:	e0bff917 	ldw	r2,-28(fp)
 202c9f8:	10800204 	addi	r2,r2,8
 202c9fc:	e0bff915 	stw	r2,-28(fp)
		
		tse_system_count++;
 202ca00:	d0a81083 	ldbu	r2,-24510(gp)
 202ca04:	10800044 	addi	r2,r2,1
 202ca08:	d0a81085 	stb	r2,-24510(gp)
		max_mac_system = tse_system_count;
 202ca0c:	d0a81083 	ldbu	r2,-24510(gp)
 202ca10:	d0a01d05 	stb	r2,-32652(gp)
	else {
		tse_dprintf(2, "ERROR   : Invalid number of channel specified!\n");
		return ALTERA_TSE_SYSTEM_DEF_ERROR;
	}

	for(i = 0; i < loop_end; i++) {
 202ca14:	e0bff417 	ldw	r2,-48(fp)
 202ca18:	10800044 	addi	r2,r2,1
 202ca1c:	e0bff415 	stw	r2,-48(fp)
 202ca20:	e0fff417 	ldw	r3,-48(fp)
 202ca24:	e0bff517 	ldw	r2,-44(fp)
 202ca28:	18bdb216 	blt	r3,r2,202c0f4 <__alt_mem_mem_0+0xfd00c0f4>
		
		tse_system_count++;
		max_mac_system = tse_system_count;
	}
	
	return SUCCESS;
 202ca2c:	0005883a 	mov	r2,zero
	
}
 202ca30:	e6ffff04 	addi	sp,fp,-4
 202ca34:	dfc00217 	ldw	ra,8(sp)
 202ca38:	df000117 	ldw	fp,4(sp)
 202ca3c:	dc000017 	ldw	r16,0(sp)
 202ca40:	dec00304 	addi	sp,sp,12
 202ca44:	f800283a 	ret

0202ca48 <alt_tse_sys_enable_mdio_sharing>:
 * @param		number_of_mac  number of MAC sharing MDIO block
 * @return      SUCCESS on success
 * 				ALTERA_TSE_SYSTEM_DEF_ERROR if definition of system incorrect or pointer == NULL
 * Multi-channel MAC not supported
 */
alt_32 alt_tse_sys_enable_mdio_sharing(alt_tse_system_mac **psys_mac_list, alt_u8 number_of_mac) {
 202ca48:	defff904 	addi	sp,sp,-28
 202ca4c:	dfc00615 	stw	ra,24(sp)
 202ca50:	df000515 	stw	fp,20(sp)
 202ca54:	df000504 	addi	fp,sp,20
 202ca58:	e13ffe15 	stw	r4,-8(fp)
 202ca5c:	2805883a 	mov	r2,r5
 202ca60:	e0bfff05 	stb	r2,-4(fp)
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 202ca64:	e03ffb15 	stw	zero,-20(fp)
 202ca68:	00004806 	br	202cb8c <alt_tse_sys_enable_mdio_sharing+0x144>
		psys_mac = psys_mac_list[i];
 202ca6c:	e0bffb17 	ldw	r2,-20(fp)
 202ca70:	1085883a 	add	r2,r2,r2
 202ca74:	1085883a 	add	r2,r2,r2
 202ca78:	1007883a 	mov	r3,r2
 202ca7c:	e0bffe17 	ldw	r2,-8(fp)
 202ca80:	10c5883a 	add	r2,r2,r3
 202ca84:	10800017 	ldw	r2,0(r2)
 202ca88:	e0bffd15 	stw	r2,-12(fp)
		
		if(psys_mac == 0) {
 202ca8c:	e0bffd17 	ldw	r2,-12(fp)
 202ca90:	1000081e 	bne	r2,zero,202cab4 <alt_tse_sys_enable_mdio_sharing+0x6c>
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
 202ca94:	01008134 	movhi	r4,516
 202ca98:	2106a504 	addi	r4,r4,6804
 202ca9c:	203cd600 	call	203cd60 <puts>
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
 202caa0:	01008134 	movhi	r4,516
 202caa4:	21070a04 	addi	r4,r4,7208
 202caa8:	203cd600 	call	203cd60 <puts>
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
 202caac:	00bfffc4 	movi	r2,-1
 202cab0:	00003a06 	br	202cb9c <alt_tse_sys_enable_mdio_sharing+0x154>
		}
		
		for(j = 0; j < max_mac_system; j++) {
 202cab4:	e03ffc15 	stw	zero,-16(fp)
 202cab8:	00002d06 	br	202cb70 <alt_tse_sys_enable_mdio_sharing+0x128>
			
			if(psys_mac->tse_mac_base == tse_mac_device[j].tse_mac_base) {
 202cabc:	e0bffd17 	ldw	r2,-12(fp)
 202cac0:	10c00017 	ldw	r3,0(r2)
 202cac4:	00808134 	movhi	r2,516
 202cac8:	10955704 	addi	r2,r2,21852
 202cacc:	e13ffc17 	ldw	r4,-16(fp)
 202cad0:	21001224 	muli	r4,r4,72
 202cad4:	1105883a 	add	r2,r2,r4
 202cad8:	10800017 	ldw	r2,0(r2)
 202cadc:	1880211e 	bne	r3,r2,202cb64 <alt_tse_sys_enable_mdio_sharing+0x11c>
				if(tse_mac_device[j].tse_multichannel_mac) {
 202cae0:	00808134 	movhi	r2,516
 202cae4:	10955704 	addi	r2,r2,21852
 202cae8:	e0fffc17 	ldw	r3,-16(fp)
 202caec:	18c01224 	muli	r3,r3,72
 202caf0:	10c5883a 	add	r2,r2,r3
 202caf4:	108002c4 	addi	r2,r2,11
 202caf8:	10800003 	ldbu	r2,0(r2)
 202cafc:	10803fcc 	andi	r2,r2,255
 202cb00:	10000826 	beq	r2,zero,202cb24 <alt_tse_sys_enable_mdio_sharing+0xdc>
					tse_dprintf(2, "ERROR   : MDIO sharing supported by default for Multi-channel MAC\n");
 202cb04:	01008134 	movhi	r4,516
 202cb08:	21071e04 	addi	r4,r4,7288
 202cb0c:	203cd600 	call	203cd60 <puts>
					tse_dprintf(2, "ERROR   : Do not include Multi-channel MAC in the MAC List\n");
 202cb10:	01008134 	movhi	r4,516
 202cb14:	21072f04 	addi	r4,r4,7356
 202cb18:	203cd600 	call	203cd60 <puts>
					return ALTERA_TSE_SYSTEM_DEF_ERROR;
 202cb1c:	00bfffc4 	movi	r2,-1
 202cb20:	00001e06 	br	202cb9c <alt_tse_sys_enable_mdio_sharing+0x154>
				}
				
				tse_mac_device[j].tse_mdio_shared = 1;
 202cb24:	00808134 	movhi	r2,516
 202cb28:	10955704 	addi	r2,r2,21852
 202cb2c:	e0fffc17 	ldw	r3,-16(fp)
 202cb30:	18c01224 	muli	r3,r3,72
 202cb34:	10c5883a 	add	r2,r2,r3
 202cb38:	10800344 	addi	r2,r2,13
 202cb3c:	00c00044 	movi	r3,1
 202cb40:	10c00005 	stb	r3,0(r2)
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
 202cb44:	00808134 	movhi	r2,516
 202cb48:	10955704 	addi	r2,r2,21852
 202cb4c:	e0fffc17 	ldw	r3,-16(fp)
 202cb50:	18c01224 	muli	r3,r3,72
 202cb54:	10c5883a 	add	r2,r2,r3
 202cb58:	10800384 	addi	r2,r2,14
 202cb5c:	e0ffff03 	ldbu	r3,-4(fp)
 202cb60:	10c00005 	stb	r3,0(r2)
			tse_dprintf(2, "ERROR   : MAC system structure == NULL\n");
			tse_dprintf(2, "ERROR   : Please pass in correct pointer to alt_tse_sys_enable_mdio_sharing()\n");
			return ALTERA_TSE_SYSTEM_DEF_ERROR;
		}
		
		for(j = 0; j < max_mac_system; j++) {
 202cb64:	e0bffc17 	ldw	r2,-16(fp)
 202cb68:	10800044 	addi	r2,r2,1
 202cb6c:	e0bffc15 	stw	r2,-16(fp)
 202cb70:	d0a01d03 	ldbu	r2,-32652(gp)
 202cb74:	10803fcc 	andi	r2,r2,255
 202cb78:	e0fffc17 	ldw	r3,-16(fp)
 202cb7c:	18bfcf16 	blt	r3,r2,202cabc <__alt_mem_mem_0+0xfd00cabc>
	alt_32 i;
	alt_32 j;
	
	alt_tse_system_mac *psys_mac;
	
	for(i = 0; i < number_of_mac; i++) {
 202cb80:	e0bffb17 	ldw	r2,-20(fp)
 202cb84:	10800044 	addi	r2,r2,1
 202cb88:	e0bffb15 	stw	r2,-20(fp)
 202cb8c:	e0bfff03 	ldbu	r2,-4(fp)
 202cb90:	e0fffb17 	ldw	r3,-20(fp)
 202cb94:	18bfb516 	blt	r3,r2,202ca6c <__alt_mem_mem_0+0xfd00ca6c>
				tse_mac_device[j].tse_number_of_mac_mdio_shared = number_of_mac;
			}
		}	
	}
	
	return SUCCESS;
 202cb98:	0005883a 	mov	r2,zero
}
 202cb9c:	e037883a 	mov	sp,fp
 202cba0:	dfc00117 	ldw	ra,4(sp)
 202cba4:	df000017 	ldw	fp,0(sp)
 202cba8:	dec00204 	addi	sp,sp,8
 202cbac:	f800283a 	ret

0202cbb0 <alt_tse_mac_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Public
 * @param pmac          Pointer to the TSE MAC Control Interface Base address
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_mac_get_common_speed(np_tse_mac *pmac) {
 202cbb0:	defffc04 	addi	sp,sp,-16
 202cbb4:	dfc00315 	stw	ra,12(sp)
 202cbb8:	df000215 	stw	fp,8(sp)
 202cbbc:	df000204 	addi	fp,sp,8
 202cbc0:	e13fff15 	stw	r4,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 202cbc4:	e13fff17 	ldw	r4,-4(fp)
 202cbc8:	202cd980 	call	202cd98 <alt_tse_get_mac_info>
 202cbcc:	10800317 	ldw	r2,12(r2)
 202cbd0:	e0bffe15 	stw	r2,-8(fp)
    return alt_tse_phy_get_common_speed(pmac_group);
 202cbd4:	e13ffe17 	ldw	r4,-8(fp)
 202cbd8:	202ff580 	call	202ff58 <alt_tse_phy_get_common_speed>
}
 202cbdc:	e037883a 	mov	sp,fp
 202cbe0:	dfc00117 	ldw	ra,4(sp)
 202cbe4:	df000017 	ldw	fp,0(sp)
 202cbe8:	dec00204 	addi	sp,sp,8
 202cbec:	f800283a 	ret

0202cbf0 <alt_tse_mac_set_common_speed>:
 * @API Type:               Public
 * @param pmac              Pointer to the TSE MAC Control Interface Base address
 *        common_speed      common speed supported by all PHYs
 * @return                  common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_mac_set_common_speed(np_tse_mac *pmac, alt_32 common_speed) {
 202cbf0:	defffb04 	addi	sp,sp,-20
 202cbf4:	dfc00415 	stw	ra,16(sp)
 202cbf8:	df000315 	stw	fp,12(sp)
 202cbfc:	df000304 	addi	fp,sp,12
 202cc00:	e13ffe15 	stw	r4,-8(fp)
 202cc04:	e17fff15 	stw	r5,-4(fp)
    alt_tse_mac_group *pmac_group = alt_tse_get_mac_info(pmac)->pmac_group;
 202cc08:	e13ffe17 	ldw	r4,-8(fp)
 202cc0c:	202cd980 	call	202cd98 <alt_tse_get_mac_info>
 202cc10:	10800317 	ldw	r2,12(r2)
 202cc14:	e0bffd15 	stw	r2,-12(fp)
    return alt_tse_phy_set_common_speed(pmac_group, common_speed);
 202cc18:	e17fff17 	ldw	r5,-4(fp)
 202cc1c:	e13ffd17 	ldw	r4,-12(fp)
 202cc20:	20302800 	call	2030280 <alt_tse_phy_set_common_speed>
}
 202cc24:	e037883a 	mov	sp,fp
 202cc28:	dfc00117 	ldw	ra,4(sp)
 202cc2c:	df000017 	ldw	fp,0(sp)
 202cc30:	dec00204 	addi	sp,sp,8
 202cc34:	f800283a 	ret

0202cc38 <alt_tse_get_system_index>:
/* @Function Description: Get the index of alt_tse_system_info structure in tse_mac_device[]
 * @API Type:        Internal
 * @param psys_info  Pointer to the alt_tse_system_info structure
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
 202cc38:	defffd04 	addi	sp,sp,-12
 202cc3c:	df000215 	stw	fp,8(sp)
 202cc40:	df000204 	addi	fp,sp,8
 202cc44:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 202cc48:	e03ffe15 	stw	zero,-8(fp)
 202cc4c:	00000c06 	br	202cc80 <alt_tse_get_system_index+0x48>
        if(psys_info == &tse_mac_device[i]) {
 202cc50:	e0bffe17 	ldw	r2,-8(fp)
 202cc54:	10c01224 	muli	r3,r2,72
 202cc58:	00808134 	movhi	r2,516
 202cc5c:	10955704 	addi	r2,r2,21852
 202cc60:	1887883a 	add	r3,r3,r2
 202cc64:	e0bfff17 	ldw	r2,-4(fp)
 202cc68:	1880021e 	bne	r3,r2,202cc74 <alt_tse_get_system_index+0x3c>
            return i;
 202cc6c:	e0bffe17 	ldw	r2,-8(fp)
 202cc70:	00000806 	br	202cc94 <alt_tse_get_system_index+0x5c>
 * @return           Index of alt_tse_system_info structure in tse_mac_device[]
 */
alt_32 alt_tse_get_system_index(alt_tse_system_info *psys_info) {
	alt_32 i;
    
    for(i = 0; i < max_mac_system; i++) {
 202cc74:	e0bffe17 	ldw	r2,-8(fp)
 202cc78:	10800044 	addi	r2,r2,1
 202cc7c:	e0bffe15 	stw	r2,-8(fp)
 202cc80:	d0a01d03 	ldbu	r2,-32652(gp)
 202cc84:	10803fcc 	andi	r2,r2,255
 202cc88:	e0fffe17 	ldw	r3,-8(fp)
 202cc8c:	18bff016 	blt	r3,r2,202cc50 <__alt_mem_mem_0+0xfd00cc50>
        if(psys_info == &tse_mac_device[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 202cc90:	00bfffc4 	movi	r2,-1
}
 202cc94:	e037883a 	mov	sp,fp
 202cc98:	df000017 	ldw	fp,0(sp)
 202cc9c:	dec00104 	addi	sp,sp,4
 202cca0:	f800283a 	ret

0202cca4 <alt_tse_get_mac_group_index>:
/* @Function Description: Get the index of alt_tse_mac_group structure in pmac_groups[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_group structure
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
 202cca4:	defffd04 	addi	sp,sp,-12
 202cca8:	df000215 	stw	fp,8(sp)
 202ccac:	df000204 	addi	fp,sp,8
 202ccb0:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 202ccb4:	e03ffe15 	stw	zero,-8(fp)
 202ccb8:	00000e06 	br	202ccf4 <alt_tse_get_mac_group_index+0x50>
        if(pmac_group == pmac_groups[i]) {
 202ccbc:	008085f4 	movhi	r2,535
 202ccc0:	10a94404 	addi	r2,r2,-23280
 202ccc4:	e0fffe17 	ldw	r3,-8(fp)
 202ccc8:	18c7883a 	add	r3,r3,r3
 202cccc:	18c7883a 	add	r3,r3,r3
 202ccd0:	10c5883a 	add	r2,r2,r3
 202ccd4:	10c00017 	ldw	r3,0(r2)
 202ccd8:	e0bfff17 	ldw	r2,-4(fp)
 202ccdc:	1880021e 	bne	r3,r2,202cce8 <alt_tse_get_mac_group_index+0x44>
            return i;
 202cce0:	e0bffe17 	ldw	r2,-8(fp)
 202cce4:	00000806 	br	202cd08 <alt_tse_get_mac_group_index+0x64>
 * @return            Index of alt_tse_mac_group structure in pmac_groups[]
 */
alt_32 alt_tse_get_mac_group_index(alt_tse_mac_group *pmac_group) {
	alt_32 i;
    
    for(i = 0; i < mac_group_count; i++) {
 202cce8:	e0bffe17 	ldw	r2,-8(fp)
 202ccec:	10800044 	addi	r2,r2,1
 202ccf0:	e0bffe15 	stw	r2,-8(fp)
 202ccf4:	d0a81043 	ldbu	r2,-24511(gp)
 202ccf8:	10803fcc 	andi	r2,r2,255
 202ccfc:	e0fffe17 	ldw	r3,-8(fp)
 202cd00:	18bfee16 	blt	r3,r2,202ccbc <__alt_mem_mem_0+0xfd00ccbc>
        if(pmac_group == pmac_groups[i]) {
            return i;
        }
    }
    return ALTERA_TSE_NO_INDEX_FOUND;
 202cd04:	00bfffc4 	movi	r2,-1
}
 202cd08:	e037883a 	mov	sp,fp
 202cd0c:	df000017 	ldw	fp,0(sp)
 202cd10:	dec00104 	addi	sp,sp,4
 202cd14:	f800283a 	ret

0202cd18 <alt_tse_get_mac_info_index>:
/* @Function Description: Get the index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac_group  Pointer to the alt_tse_mac_info structure
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
 202cd18:	defffd04 	addi	sp,sp,-12
 202cd1c:	df000215 	stw	fp,8(sp)
 202cd20:	df000204 	addi	fp,sp,8
 202cd24:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 202cd28:	e03ffe15 	stw	zero,-8(fp)
 202cd2c:	00000f06 	br	202cd6c <alt_tse_get_mac_info_index+0x54>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
 202cd30:	e0bfff17 	ldw	r2,-4(fp)
 202cd34:	10c00317 	ldw	r3,12(r2)
 202cd38:	e0bffe17 	ldw	r2,-8(fp)
 202cd3c:	10800044 	addi	r2,r2,1
 202cd40:	1085883a 	add	r2,r2,r2
 202cd44:	1085883a 	add	r2,r2,r2
 202cd48:	1885883a 	add	r2,r3,r2
 202cd4c:	10c00017 	ldw	r3,0(r2)
 202cd50:	e0bfff17 	ldw	r2,-4(fp)
 202cd54:	1880021e 	bne	r3,r2,202cd60 <alt_tse_get_mac_info_index+0x48>
            return i;
 202cd58:	e0bffe17 	ldw	r2,-8(fp)
 202cd5c:	00000a06 	br	202cd88 <alt_tse_get_mac_info_index+0x70>
 * @return            Index of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_32 alt_tse_get_mac_info_index(alt_tse_mac_info *pmac_info) {
	alt_32 i;
    
    for(i = 0; i < pmac_info->pmac_group->channel; i++) {
 202cd60:	e0bffe17 	ldw	r2,-8(fp)
 202cd64:	10800044 	addi	r2,r2,1
 202cd68:	e0bffe15 	stw	r2,-8(fp)
 202cd6c:	e0bfff17 	ldw	r2,-4(fp)
 202cd70:	10800317 	ldw	r2,12(r2)
 202cd74:	10800003 	ldbu	r2,0(r2)
 202cd78:	10803fcc 	andi	r2,r2,255
 202cd7c:	e0fffe17 	ldw	r3,-8(fp)
 202cd80:	18bfeb16 	blt	r3,r2,202cd30 <__alt_mem_mem_0+0xfd00cd30>
        if(pmac_info == pmac_info->pmac_group->pmac_info[i]) {
            return i;
        }
    }
    
    return ALTERA_TSE_NO_INDEX_FOUND;
 202cd84:	00bfffc4 	movi	r2,-1
}
 202cd88:	e037883a 	mov	sp,fp
 202cd8c:	df000017 	ldw	fp,0(sp)
 202cd90:	dec00104 	addi	sp,sp,4
 202cd94:	f800283a 	ret

0202cd98 <alt_tse_get_mac_info>:
/* @Function Description: Get the pointer of alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 * @API Type:         Internal
 * @param pmac        Pointer to the TSE MAC Control Interface Base address
 * @return            Pointer to alt_tse_mac_info structure in pmac_groups[]->pmac_info[]
 */
alt_tse_mac_info *alt_tse_get_mac_info(np_tse_mac *pmac) {
 202cd98:	defffa04 	addi	sp,sp,-24
 202cd9c:	df000515 	stw	fp,20(sp)
 202cda0:	df000504 	addi	fp,sp,20
 202cda4:	e13fff15 	stw	r4,-4(fp)
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
 202cda8:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 202cdac:	e03ffe15 	stw	zero,-8(fp)
    
    for(i = 0; i < mac_group_count; i++) {
 202cdb0:	e03ffb15 	stw	zero,-20(fp)
 202cdb4:	00002506 	br	202ce4c <alt_tse_get_mac_info+0xb4>
        pmac_group = pmac_groups[i];
 202cdb8:	008085f4 	movhi	r2,535
 202cdbc:	10a94404 	addi	r2,r2,-23280
 202cdc0:	e0fffb17 	ldw	r3,-20(fp)
 202cdc4:	18c7883a 	add	r3,r3,r3
 202cdc8:	18c7883a 	add	r3,r3,r3
 202cdcc:	10c5883a 	add	r2,r2,r3
 202cdd0:	10800017 	ldw	r2,0(r2)
 202cdd4:	e0bffd15 	stw	r2,-12(fp)
        for(j = 0; j < pmac_group->channel; j++) {
 202cdd8:	e03ffc15 	stw	zero,-16(fp)
 202cddc:	00001306 	br	202ce2c <alt_tse_get_mac_info+0x94>
            pmac_info = pmac_group->pmac_info[j];
 202cde0:	e0fffd17 	ldw	r3,-12(fp)
 202cde4:	e0bffc17 	ldw	r2,-16(fp)
 202cde8:	10800044 	addi	r2,r2,1
 202cdec:	1085883a 	add	r2,r2,r2
 202cdf0:	1085883a 	add	r2,r2,r2
 202cdf4:	1885883a 	add	r2,r3,r2
 202cdf8:	10800017 	ldw	r2,0(r2)
 202cdfc:	e0bffe15 	stw	r2,-8(fp)
            if(((np_tse_mac *) pmac_info->psys_info->tse_mac_base) == pmac) {
 202ce00:	e0bffe17 	ldw	r2,-8(fp)
 202ce04:	10800217 	ldw	r2,8(r2)
 202ce08:	10800017 	ldw	r2,0(r2)
 202ce0c:	1007883a 	mov	r3,r2
 202ce10:	e0bfff17 	ldw	r2,-4(fp)
 202ce14:	1880021e 	bne	r3,r2,202ce20 <alt_tse_get_mac_info+0x88>
                return pmac_info;
 202ce18:	e0bffe17 	ldw	r2,-8(fp)
 202ce1c:	00001006 	br	202ce60 <alt_tse_get_mac_info+0xc8>
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
        pmac_group = pmac_groups[i];
        for(j = 0; j < pmac_group->channel; j++) {
 202ce20:	e0bffc17 	ldw	r2,-16(fp)
 202ce24:	10800044 	addi	r2,r2,1
 202ce28:	e0bffc15 	stw	r2,-16(fp)
 202ce2c:	e0bffd17 	ldw	r2,-12(fp)
 202ce30:	10800003 	ldbu	r2,0(r2)
 202ce34:	10803fcc 	andi	r2,r2,255
 202ce38:	e0fffc17 	ldw	r3,-16(fp)
 202ce3c:	18bfe816 	blt	r3,r2,202cde0 <__alt_mem_mem_0+0xfd00cde0>
	alt_32 i;
	alt_32 j;
    alt_tse_mac_group *pmac_group = 0;
    alt_tse_mac_info *pmac_info = 0;
    
    for(i = 0; i < mac_group_count; i++) {
 202ce40:	e0bffb17 	ldw	r2,-20(fp)
 202ce44:	10800044 	addi	r2,r2,1
 202ce48:	e0bffb15 	stw	r2,-20(fp)
 202ce4c:	d0a81043 	ldbu	r2,-24511(gp)
 202ce50:	10803fcc 	andi	r2,r2,255
 202ce54:	e0fffb17 	ldw	r3,-20(fp)
 202ce58:	18bfd716 	blt	r3,r2,202cdb8 <__alt_mem_mem_0+0xfd00cdb8>
                return pmac_info;
            }
        }        
    }
    
    return 0;
 202ce5c:	0005883a 	mov	r2,zero
}
 202ce60:	e037883a 	mov	sp,fp
 202ce64:	df000017 	ldw	fp,0(sp)
 202ce68:	dec00104 	addi	sp,sp,4
 202ce6c:	f800283a 	ret

0202ce70 <alt_tse_mac_set_speed>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param speed 2 = 1000 Mbps, 1 = 100 Mbps, 0 = 10 Mbps
 * @return ENP_PARAM if invalid speed specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_speed(np_tse_mac *pmac, alt_u8 speed)
{
 202ce70:	defffc04 	addi	sp,sp,-16
 202ce74:	df000315 	stw	fp,12(sp)
 202ce78:	df000304 	addi	fp,sp,12
 202ce7c:	e13ffe15 	stw	r4,-8(fp)
 202ce80:	2805883a 	mov	r2,r5
 202ce84:	e0bfff05 	stb	r2,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 202ce88:	e0bffe17 	ldw	r2,-8(fp)
 202ce8c:	10800204 	addi	r2,r2,8
 202ce90:	10800037 	ldwio	r2,0(r2)
 202ce94:	e0bffd15 	stw	r2,-12(fp)
  
  /* 1000 Mbps */
  if(speed == TSE_PHY_SPEED_1000) {
 202ce98:	e0bfff03 	ldbu	r2,-4(fp)
 202ce9c:	10800098 	cmpnei	r2,r2,2
 202cea0:	1000091e 	bne	r2,zero,202cec8 <alt_tse_mac_set_speed+0x58>
    helpvar |= ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 202cea4:	e0bffd17 	ldw	r2,-12(fp)
 202cea8:	10800214 	ori	r2,r2,8
 202ceac:	e0bffd15 	stw	r2,-12(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 202ceb0:	e0fffd17 	ldw	r3,-12(fp)
 202ceb4:	00bf8034 	movhi	r2,65024
 202ceb8:	10bfffc4 	addi	r2,r2,-1
 202cebc:	1884703a 	and	r2,r3,r2
 202cec0:	e0bffd15 	stw	r2,-12(fp)
 202cec4:	00001906 	br	202cf2c <alt_tse_mac_set_speed+0xbc>
  }
  /* 100 Mbps */
  else if(speed == TSE_PHY_SPEED_100) {
 202cec8:	e0bfff03 	ldbu	r2,-4(fp)
 202cecc:	10800058 	cmpnei	r2,r2,1
 202ced0:	10000a1e 	bne	r2,zero,202cefc <alt_tse_mac_set_speed+0x8c>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 202ced4:	e0fffd17 	ldw	r3,-12(fp)
 202ced8:	00bffdc4 	movi	r2,-9
 202cedc:	1884703a 	and	r2,r3,r2
 202cee0:	e0bffd15 	stw	r2,-12(fp)
	helpvar &= ~ALTERA_TSEMAC_CMD_ENA_10_MSK;
 202cee4:	e0fffd17 	ldw	r3,-12(fp)
 202cee8:	00bf8034 	movhi	r2,65024
 202ceec:	10bfffc4 	addi	r2,r2,-1
 202cef0:	1884703a 	and	r2,r3,r2
 202cef4:	e0bffd15 	stw	r2,-12(fp)
 202cef8:	00000c06 	br	202cf2c <alt_tse_mac_set_speed+0xbc>
  }
  /* 10 Mbps */
  else if(speed == TSE_PHY_SPEED_10) {
 202cefc:	e0bfff03 	ldbu	r2,-4(fp)
 202cf00:	1000081e 	bne	r2,zero,202cf24 <alt_tse_mac_set_speed+0xb4>
    helpvar &= ~ALTERA_TSEMAC_CMD_ETH_SPEED_MSK;
 202cf04:	e0fffd17 	ldw	r3,-12(fp)
 202cf08:	00bffdc4 	movi	r2,-9
 202cf0c:	1884703a 	and	r2,r3,r2
 202cf10:	e0bffd15 	stw	r2,-12(fp)
	helpvar |= ALTERA_TSEMAC_CMD_ENA_10_MSK;
 202cf14:	e0bffd17 	ldw	r2,-12(fp)
 202cf18:	10808034 	orhi	r2,r2,512
 202cf1c:	e0bffd15 	stw	r2,-12(fp)
 202cf20:	00000206 	br	202cf2c <alt_tse_mac_set_speed+0xbc>
  }  
  else {
    return ENP_PARAM;
 202cf24:	00bffd84 	movi	r2,-10
 202cf28:	00000506 	br	202cf40 <alt_tse_mac_set_speed+0xd0>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 202cf2c:	e0bffe17 	ldw	r2,-8(fp)
 202cf30:	10800204 	addi	r2,r2,8
 202cf34:	e0fffd17 	ldw	r3,-12(fp)
 202cf38:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 202cf3c:	0005883a 	mov	r2,zero
}
 202cf40:	e037883a 	mov	sp,fp
 202cf44:	df000017 	ldw	fp,0(sp)
 202cf48:	dec00104 	addi	sp,sp,4
 202cf4c:	f800283a 	ret

0202cf50 <alt_tse_mac_set_duplex>:
 * @param pmac  Pointer to the TSE MAC Control Interface Base address
 * @param duplex 1 = Full Duplex, 0 = Half Duplex
 * @return ENP_PARAM if invalid duplex specified, else return SUCCESS
 */
alt_32 alt_tse_mac_set_duplex(np_tse_mac *pmac, alt_u8 duplex)
{
 202cf50:	defffc04 	addi	sp,sp,-16
 202cf54:	df000315 	stw	fp,12(sp)
 202cf58:	df000304 	addi	fp,sp,12
 202cf5c:	e13ffe15 	stw	r4,-8(fp)
 202cf60:	2805883a 	mov	r2,r5
 202cf64:	e0bfff05 	stb	r2,-4(fp)
  alt_32 helpvar;
  
  helpvar = IORD_ALTERA_TSEMAC_CMD_CONFIG(pmac);
 202cf68:	e0bffe17 	ldw	r2,-8(fp)
 202cf6c:	10800204 	addi	r2,r2,8
 202cf70:	10800037 	ldwio	r2,0(r2)
 202cf74:	e0bffd15 	stw	r2,-12(fp)
  
  /* Half Duplex */
  if(duplex == TSE_PHY_DUPLEX_HALF) {
 202cf78:	e0bfff03 	ldbu	r2,-4(fp)
 202cf7c:	1000041e 	bne	r2,zero,202cf90 <alt_tse_mac_set_duplex+0x40>
    helpvar |= ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 202cf80:	e0bffd17 	ldw	r2,-12(fp)
 202cf84:	10810014 	ori	r2,r2,1024
 202cf88:	e0bffd15 	stw	r2,-12(fp)
 202cf8c:	00000a06 	br	202cfb8 <alt_tse_mac_set_duplex+0x68>
  } 
  /* Full Duplex */
  else if(duplex == TSE_PHY_DUPLEX_FULL) {
 202cf90:	e0bfff03 	ldbu	r2,-4(fp)
 202cf94:	10800058 	cmpnei	r2,r2,1
 202cf98:	1000051e 	bne	r2,zero,202cfb0 <alt_tse_mac_set_duplex+0x60>
    helpvar &= ~ALTERA_TSEMAC_CMD_HD_ENA_MSK;
 202cf9c:	e0fffd17 	ldw	r3,-12(fp)
 202cfa0:	00beffc4 	movi	r2,-1025
 202cfa4:	1884703a 	and	r2,r3,r2
 202cfa8:	e0bffd15 	stw	r2,-12(fp)
 202cfac:	00000206 	br	202cfb8 <alt_tse_mac_set_duplex+0x68>
  }
  else {
    return ENP_PARAM;
 202cfb0:	00bffd84 	movi	r2,-10
 202cfb4:	00000506 	br	202cfcc <alt_tse_mac_set_duplex+0x7c>
  }
  
  IOWR_ALTERA_TSEMAC_CMD_CONFIG(pmac, helpvar);
 202cfb8:	e0bffe17 	ldw	r2,-8(fp)
 202cfbc:	10800204 	addi	r2,r2,8
 202cfc0:	e0fffd17 	ldw	r3,-12(fp)
 202cfc4:	10c00035 	stwio	r3,0(r2)
  return SUCCESS;
 202cfc8:	0005883a 	mov	r2,zero

}
 202cfcc:	e037883a 	mov	sp,fp
 202cfd0:	df000017 	ldw	fp,0(sp)
 202cfd4:	dec00104 	addi	sp,sp,4
 202cfd8:	f800283a 	ret

0202cfdc <getPHYSpeed>:
  	(((speed == TSE_PHY_SPEED_1000) ? 1 : 0) << 1) |   \
	(((speed == TSE_PHY_SPEED_100) ? 1 : 0) << 2) |     \
	(((speed == TSE_PHY_SPEED_10) ? 1 : 0) << 3) |      \
	((speed == TSE_PHY_SPEED_INVALID) ? ALT_TSE_E_INVALID_SPEED : 0))
  
alt_32 getPHYSpeed(np_tse_mac *pmac) {
 202cfdc:	defff404 	addi	sp,sp,-48
 202cfe0:	dfc00b15 	stw	ra,44(sp)
 202cfe4:	df000a15 	stw	fp,40(sp)
 202cfe8:	df000a04 	addi	fp,sp,40
 202cfec:	e13fff15 	stw	r4,-4(fp)

	alt_u8 speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 202cff0:	00800044 	movi	r2,1
 202cff4:	e0bff705 	stb	r2,-36(fp)
	alt_u8 duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;     /* 1 = full ; 0 = half*/
 202cff8:	00800044 	movi	r2,1
 202cffc:	e0bff745 	stb	r2,-35(fp)
	alt_32 result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 202d000:	e0bff743 	ldbu	r2,-35(fp)
 202d004:	10c0004c 	andi	r3,r2,1
 202d008:	e0bff703 	ldbu	r2,-36(fp)
 202d00c:	10800098 	cmpnei	r2,r2,2
 202d010:	1000021e 	bne	r2,zero,202d01c <getPHYSpeed+0x40>
 202d014:	00800084 	movi	r2,2
 202d018:	00000106 	br	202d020 <getPHYSpeed+0x44>
 202d01c:	0005883a 	mov	r2,zero
 202d020:	1886b03a 	or	r3,r3,r2
 202d024:	e0bff703 	ldbu	r2,-36(fp)
 202d028:	10800058 	cmpnei	r2,r2,1
 202d02c:	1000021e 	bne	r2,zero,202d038 <getPHYSpeed+0x5c>
 202d030:	00800104 	movi	r2,4
 202d034:	00000106 	br	202d03c <getPHYSpeed+0x60>
 202d038:	0005883a 	mov	r2,zero
 202d03c:	1886b03a 	or	r3,r3,r2
 202d040:	e0bff703 	ldbu	r2,-36(fp)
 202d044:	1000021e 	bne	r2,zero,202d050 <getPHYSpeed+0x74>
 202d048:	00800204 	movi	r2,8
 202d04c:	00000106 	br	202d054 <getPHYSpeed+0x78>
 202d050:	0005883a 	mov	r2,zero
 202d054:	1886b03a 	or	r3,r3,r2
 202d058:	e0bff703 	ldbu	r2,-36(fp)
 202d05c:	108000d8 	cmpnei	r2,r2,3
 202d060:	1000021e 	bne	r2,zero,202d06c <getPHYSpeed+0x90>
 202d064:	00800074 	movhi	r2,1
 202d068:	00000106 	br	202d070 <getPHYSpeed+0x94>
 202d06c:	0005883a 	mov	r2,zero
 202d070:	1884b03a 	or	r2,r3,r2
 202d074:	e0bff815 	stw	r2,-32(fp)
    
    alt_tse_phy_info *pphy = 0;
 202d078:	e03ff915 	stw	zero,-28(fp)
    alt_tse_mac_info *pmac_info = 0;
 202d07c:	e03ffa15 	stw	zero,-24(fp)
    alt_tse_mac_group *pmac_group = 0;
 202d080:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_system_info *psys = 0;
 202d084:	e03ffc15 	stw	zero,-16(fp)
    
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 202d088:	e03ffd05 	stb	zero,-12(fp)
    alt_8 mac_group_index = 0;
 202d08c:	e03ffd45 	stb	zero,-11(fp)
    
    /* initialized PHYs only once */
    static alt_u8 is_init = 0;
    if(is_init == 0) {
 202d090:	d0a810c3 	ldbu	r2,-24509(gp)
 202d094:	10803fcc 	andi	r2,r2,255
 202d098:	1000031e 	bne	r2,zero,202d0a8 <getPHYSpeed+0xcc>
        alt_tse_phy_init();
 202d09c:	202efd00 	call	202efd0 <alt_tse_phy_init>
        is_init = 1;
 202d0a0:	00800044 	movi	r2,1
 202d0a4:	d0a810c5 	stb	r2,-24509(gp)
    }
    
    /* Look for pmac_group and pmac_info structure based on pmac or iface */
    pmac_info = alt_tse_get_mac_info(pmac);
 202d0a8:	e13fff17 	ldw	r4,-4(fp)
 202d0ac:	202cd980 	call	202cd98 <alt_tse_get_mac_info>
 202d0b0:	e0bffa15 	stw	r2,-24(fp)
    
    if(pmac_info == 0) {
 202d0b4:	e0bffa17 	ldw	r2,-24(fp)
 202d0b8:	1000481e 	bne	r2,zero,202d1dc <getPHYSpeed+0x200>
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 202d0bc:	00800044 	movi	r2,1
 202d0c0:	e0bff705 	stb	r2,-36(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 202d0c4:	00800044 	movi	r2,1
 202d0c8:	e0bff745 	stb	r2,-35(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PMAC_FOUND;
 202d0cc:	e0bff743 	ldbu	r2,-35(fp)
 202d0d0:	10c0004c 	andi	r3,r2,1
 202d0d4:	e0bff703 	ldbu	r2,-36(fp)
 202d0d8:	10800098 	cmpnei	r2,r2,2
 202d0dc:	1000021e 	bne	r2,zero,202d0e8 <getPHYSpeed+0x10c>
 202d0e0:	00800084 	movi	r2,2
 202d0e4:	00000106 	br	202d0ec <getPHYSpeed+0x110>
 202d0e8:	0005883a 	mov	r2,zero
 202d0ec:	1886b03a 	or	r3,r3,r2
 202d0f0:	e0bff703 	ldbu	r2,-36(fp)
 202d0f4:	10800058 	cmpnei	r2,r2,1
 202d0f8:	1000021e 	bne	r2,zero,202d104 <getPHYSpeed+0x128>
 202d0fc:	00800104 	movi	r2,4
 202d100:	00000106 	br	202d108 <getPHYSpeed+0x12c>
 202d104:	0005883a 	mov	r2,zero
 202d108:	1886b03a 	or	r3,r3,r2
 202d10c:	e0bff703 	ldbu	r2,-36(fp)
 202d110:	1000021e 	bne	r2,zero,202d11c <getPHYSpeed+0x140>
 202d114:	00800204 	movi	r2,8
 202d118:	00000106 	br	202d120 <getPHYSpeed+0x144>
 202d11c:	0005883a 	mov	r2,zero
 202d120:	1886b03a 	or	r3,r3,r2
 202d124:	e0bff703 	ldbu	r2,-36(fp)
 202d128:	108000d8 	cmpnei	r2,r2,3
 202d12c:	1000021e 	bne	r2,zero,202d138 <getPHYSpeed+0x15c>
 202d130:	00800074 	movhi	r2,1
 202d134:	00000106 	br	202d13c <getPHYSpeed+0x160>
 202d138:	0005883a 	mov	r2,zero
 202d13c:	1884b03a 	or	r2,r3,r2
 202d140:	10802034 	orhi	r2,r2,128
 202d144:	e0bff815 	stw	r2,-32(fp)
        tse_dprintf(2, "ERROR   : [getPHYSpeed] pmac not found from list of pmac_info[]! Speed = %s Mbps, Duplex = %s\n", speed == TSE_PHY_SPEED_1000 ? "1000" :
 202d148:	e0bff703 	ldbu	r2,-36(fp)
 202d14c:	108000a0 	cmpeqi	r2,r2,2
 202d150:	10000e1e 	bne	r2,zero,202d18c <getPHYSpeed+0x1b0>
 202d154:	e0bff703 	ldbu	r2,-36(fp)
 202d158:	10800060 	cmpeqi	r2,r2,1
 202d15c:	1000081e 	bne	r2,zero,202d180 <getPHYSpeed+0x1a4>
 202d160:	e0bff703 	ldbu	r2,-36(fp)
 202d164:	1000031e 	bne	r2,zero,202d174 <getPHYSpeed+0x198>
 202d168:	00808134 	movhi	r2,516
 202d16c:	10873e04 	addi	r2,r2,7416
 202d170:	00000806 	br	202d194 <getPHYSpeed+0x1b8>
 202d174:	00808134 	movhi	r2,516
 202d178:	10873f04 	addi	r2,r2,7420
 202d17c:	00000506 	br	202d194 <getPHYSpeed+0x1b8>
 202d180:	00808134 	movhi	r2,516
 202d184:	10874104 	addi	r2,r2,7428
 202d188:	00000206 	br	202d194 <getPHYSpeed+0x1b8>
 202d18c:	00808134 	movhi	r2,516
 202d190:	10874204 	addi	r2,r2,7432
 202d194:	e0fff743 	ldbu	r3,-35(fp)
 202d198:	18c00058 	cmpnei	r3,r3,1
 202d19c:	1800031e 	bne	r3,zero,202d1ac <getPHYSpeed+0x1d0>
 202d1a0:	00c08134 	movhi	r3,516
 202d1a4:	18c74404 	addi	r3,r3,7440
 202d1a8:	00000206 	br	202d1b4 <getPHYSpeed+0x1d8>
 202d1ac:	00c08134 	movhi	r3,516
 202d1b0:	18c74604 	addi	r3,r3,7448
 202d1b4:	180d883a 	mov	r6,r3
 202d1b8:	100b883a 	mov	r5,r2
 202d1bc:	01008134 	movhi	r4,516
 202d1c0:	21074804 	addi	r4,r4,7456
 202d1c4:	20009e40 	call	20009e4 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        tse_dprintf(2, "ERROR   : [getPHYSpeed] Please define tse_mac_device[] correctly\n");
 202d1c8:	01008134 	movhi	r4,516
 202d1cc:	21076004 	addi	r4,r4,7552
 202d1d0:	203cd600 	call	203cd60 <puts>
        return result;
 202d1d4:	e0bff817 	ldw	r2,-32(fp)
 202d1d8:	00021a06 	br	202da44 <getPHYSpeed+0xa68>
    }
    
    pphy = pmac_info->pphy_info;
 202d1dc:	e0bffa17 	ldw	r2,-24(fp)
 202d1e0:	10800117 	ldw	r2,4(r2)
 202d1e4:	e0bff915 	stw	r2,-28(fp)
    pmac_group = pmac_info->pmac_group;
 202d1e8:	e0bffa17 	ldw	r2,-24(fp)
 202d1ec:	10800317 	ldw	r2,12(r2)
 202d1f0:	e0bffb15 	stw	r2,-20(fp)
    psys = pmac_info->psys_info;
 202d1f4:	e0bffa17 	ldw	r2,-24(fp)
 202d1f8:	10800217 	ldw	r2,8(r2)
 202d1fc:	e0bffc15 	stw	r2,-16(fp)
    
    mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 202d200:	e13ffa17 	ldw	r4,-24(fp)
 202d204:	202cd180 	call	202cd18 <alt_tse_get_mac_info_index>
 202d208:	e0bffd05 	stb	r2,-12(fp)
    mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 202d20c:	e13ffb17 	ldw	r4,-20(fp)
 202d210:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 202d214:	e0bffd45 	stb	r2,-11(fp)
         
    /* MDIO is not used */
    if (pmac_group->pmac_info[0]->psys_info->tse_use_mdio == 0)
 202d218:	e0bffb17 	ldw	r2,-20(fp)
 202d21c:	10800117 	ldw	r2,4(r2)
 202d220:	10800217 	ldw	r2,8(r2)
 202d224:	10800203 	ldbu	r2,8(r2)
 202d228:	10803fcc 	andi	r2,r2,255
 202d22c:	10005a1e 	bne	r2,zero,202d398 <getPHYSpeed+0x3bc>
    {
        speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 202d230:	00800044 	movi	r2,1
 202d234:	e0bff705 	stb	r2,-36(fp)
        duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 202d238:	00800044 	movi	r2,1
 202d23c:	e0bff745 	stb	r2,-35(fp)
        result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_MDIO;
 202d240:	e0bff743 	ldbu	r2,-35(fp)
 202d244:	10c0004c 	andi	r3,r2,1
 202d248:	e0bff703 	ldbu	r2,-36(fp)
 202d24c:	10800098 	cmpnei	r2,r2,2
 202d250:	1000021e 	bne	r2,zero,202d25c <getPHYSpeed+0x280>
 202d254:	00800084 	movi	r2,2
 202d258:	00000106 	br	202d260 <getPHYSpeed+0x284>
 202d25c:	0005883a 	mov	r2,zero
 202d260:	1886b03a 	or	r3,r3,r2
 202d264:	e0bff703 	ldbu	r2,-36(fp)
 202d268:	10800058 	cmpnei	r2,r2,1
 202d26c:	1000021e 	bne	r2,zero,202d278 <getPHYSpeed+0x29c>
 202d270:	00800104 	movi	r2,4
 202d274:	00000106 	br	202d27c <getPHYSpeed+0x2a0>
 202d278:	0005883a 	mov	r2,zero
 202d27c:	1886b03a 	or	r3,r3,r2
 202d280:	e0bff703 	ldbu	r2,-36(fp)
 202d284:	1000021e 	bne	r2,zero,202d290 <getPHYSpeed+0x2b4>
 202d288:	00800204 	movi	r2,8
 202d28c:	00000106 	br	202d294 <getPHYSpeed+0x2b8>
 202d290:	0005883a 	mov	r2,zero
 202d294:	1886b03a 	or	r3,r3,r2
 202d298:	e0bff703 	ldbu	r2,-36(fp)
 202d29c:	108000d8 	cmpnei	r2,r2,3
 202d2a0:	1000021e 	bne	r2,zero,202d2ac <getPHYSpeed+0x2d0>
 202d2a4:	00800074 	movhi	r2,1
 202d2a8:	00000106 	br	202d2b0 <getPHYSpeed+0x2d4>
 202d2ac:	0005883a 	mov	r2,zero
 202d2b0:	1884b03a 	or	r2,r3,r2
 202d2b4:	10801034 	orhi	r2,r2,64
 202d2b8:	e0bff815 	stw	r2,-32(fp)
        usleep(ALTERA_NOMDIO_TIMEOUT_THRESHOLD);
 202d2bc:	010003f4 	movhi	r4,15
 202d2c0:	21109004 	addi	r4,r4,16960
 202d2c4:	20280200 	call	2028020 <usleep>
        if(psys->tse_phy_cfg) {
 202d2c8:	e0bffc17 	ldw	r2,-16(fp)
 202d2cc:	10801117 	ldw	r2,68(r2)
 202d2d0:	10000d26 	beq	r2,zero,202d308 <getPHYSpeed+0x32c>
        	tse_dprintf(4, "WARNING : PHY[%d.%d] - MDIO not enabled! Running user configuration...\n", mac_group_index, mac_info_index);
 202d2d4:	e0bffd47 	ldb	r2,-11(fp)
 202d2d8:	e0fffd07 	ldb	r3,-12(fp)
 202d2dc:	180d883a 	mov	r6,r3
 202d2e0:	100b883a 	mov	r5,r2
 202d2e4:	01008134 	movhi	r4,516
 202d2e8:	21077104 	addi	r4,r4,7620
 202d2ec:	20009e40 	call	20009e4 <printf>
        	result = psys->tse_phy_cfg(pmac);
 202d2f0:	e0bffc17 	ldw	r2,-16(fp)
 202d2f4:	10801117 	ldw	r2,68(r2)
 202d2f8:	e13fff17 	ldw	r4,-4(fp)
 202d2fc:	103ee83a 	callr	r2
 202d300:	e0bff815 	stw	r2,-32(fp)
 202d304:	00002206 	br	202d390 <getPHYSpeed+0x3b4>
        }
        else {
        	tse_dprintf(4, "WARNING : MAC Group[%d] - MDIO not enabled! Speed = %s, Duplex = %s\n", mac_group_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 202d308:	e13ffd47 	ldb	r4,-11(fp)
 202d30c:	e0bff703 	ldbu	r2,-36(fp)
 202d310:	108000a0 	cmpeqi	r2,r2,2
 202d314:	10000e1e 	bne	r2,zero,202d350 <getPHYSpeed+0x374>
 202d318:	e0bff703 	ldbu	r2,-36(fp)
 202d31c:	10800060 	cmpeqi	r2,r2,1
 202d320:	1000081e 	bne	r2,zero,202d344 <getPHYSpeed+0x368>
 202d324:	e0bff703 	ldbu	r2,-36(fp)
 202d328:	1000031e 	bne	r2,zero,202d338 <getPHYSpeed+0x35c>
 202d32c:	00808134 	movhi	r2,516
 202d330:	10873e04 	addi	r2,r2,7416
 202d334:	00000806 	br	202d358 <getPHYSpeed+0x37c>
 202d338:	00808134 	movhi	r2,516
 202d33c:	10873f04 	addi	r2,r2,7420
 202d340:	00000506 	br	202d358 <getPHYSpeed+0x37c>
 202d344:	00808134 	movhi	r2,516
 202d348:	10874104 	addi	r2,r2,7428
 202d34c:	00000206 	br	202d358 <getPHYSpeed+0x37c>
 202d350:	00808134 	movhi	r2,516
 202d354:	10874204 	addi	r2,r2,7432
 202d358:	e0fff743 	ldbu	r3,-35(fp)
 202d35c:	18c00058 	cmpnei	r3,r3,1
 202d360:	1800031e 	bne	r3,zero,202d370 <getPHYSpeed+0x394>
 202d364:	00c08134 	movhi	r3,516
 202d368:	18c74404 	addi	r3,r3,7440
 202d36c:	00000206 	br	202d378 <getPHYSpeed+0x39c>
 202d370:	00c08134 	movhi	r3,516
 202d374:	18c74604 	addi	r3,r3,7448
 202d378:	180f883a 	mov	r7,r3
 202d37c:	100d883a 	mov	r6,r2
 202d380:	200b883a 	mov	r5,r4
 202d384:	01008134 	movhi	r4,516
 202d388:	21078304 	addi	r4,r4,7692
 202d38c:	20009e40 	call	20009e4 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
        }
        return result;
 202d390:	e0bff817 	ldw	r2,-32(fp)
 202d394:	0001ab06 	br	202da44 <getPHYSpeed+0xa68>

    /* Not running simulation */
    #ifndef ALT_SIM_OPTIMIZE
	
		/* These variables declaration are here to avoid "warning: unused variable" message when compile for simulation */
		np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 202d398:	e0bffb17 	ldw	r2,-20(fp)
 202d39c:	10800117 	ldw	r2,4(r2)
 202d3a0:	10800217 	ldw	r2,8(r2)
 202d3a4:	10800017 	ldw	r2,0(r2)
 202d3a8:	e0bffe15 	stw	r2,-8(fp)
    
        /* if no PHY connected to the MAC */
        if(pphy == 0) {
 202d3ac:	e0bff917 	ldw	r2,-28(fp)
 202d3b0:	1000491e 	bne	r2,zero,202d4d8 <getPHYSpeed+0x4fc>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 202d3b4:	00800044 	movi	r2,1
 202d3b8:	e0bff705 	stb	r2,-36(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 202d3bc:	00800044 	movi	r2,1
 202d3c0:	e0bff745 	stb	r2,-35(fp)
            result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY;
 202d3c4:	e0bff743 	ldbu	r2,-35(fp)
 202d3c8:	10c0004c 	andi	r3,r2,1
 202d3cc:	e0bff703 	ldbu	r2,-36(fp)
 202d3d0:	10800098 	cmpnei	r2,r2,2
 202d3d4:	1000021e 	bne	r2,zero,202d3e0 <getPHYSpeed+0x404>
 202d3d8:	00800084 	movi	r2,2
 202d3dc:	00000106 	br	202d3e4 <getPHYSpeed+0x408>
 202d3e0:	0005883a 	mov	r2,zero
 202d3e4:	1886b03a 	or	r3,r3,r2
 202d3e8:	e0bff703 	ldbu	r2,-36(fp)
 202d3ec:	10800058 	cmpnei	r2,r2,1
 202d3f0:	1000021e 	bne	r2,zero,202d3fc <getPHYSpeed+0x420>
 202d3f4:	00800104 	movi	r2,4
 202d3f8:	00000106 	br	202d400 <getPHYSpeed+0x424>
 202d3fc:	0005883a 	mov	r2,zero
 202d400:	1886b03a 	or	r3,r3,r2
 202d404:	e0bff703 	ldbu	r2,-36(fp)
 202d408:	1000021e 	bne	r2,zero,202d414 <getPHYSpeed+0x438>
 202d40c:	00800204 	movi	r2,8
 202d410:	00000106 	br	202d418 <getPHYSpeed+0x43c>
 202d414:	0005883a 	mov	r2,zero
 202d418:	1886b03a 	or	r3,r3,r2
 202d41c:	e0bff703 	ldbu	r2,-36(fp)
 202d420:	108000d8 	cmpnei	r2,r2,3
 202d424:	1000021e 	bne	r2,zero,202d430 <getPHYSpeed+0x454>
 202d428:	00800074 	movhi	r2,1
 202d42c:	00000106 	br	202d434 <getPHYSpeed+0x458>
 202d430:	0005883a 	mov	r2,zero
 202d434:	1884b03a 	or	r2,r3,r2
 202d438:	10800834 	orhi	r2,r2,32
 202d43c:	e0bff815 	stw	r2,-32(fp)
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - No PHY connected! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 202d440:	e13ffd47 	ldb	r4,-11(fp)
 202d444:	e17ffd07 	ldb	r5,-12(fp)
 202d448:	e0bff703 	ldbu	r2,-36(fp)
 202d44c:	108000a0 	cmpeqi	r2,r2,2
 202d450:	10000e1e 	bne	r2,zero,202d48c <getPHYSpeed+0x4b0>
 202d454:	e0bff703 	ldbu	r2,-36(fp)
 202d458:	10800060 	cmpeqi	r2,r2,1
 202d45c:	1000081e 	bne	r2,zero,202d480 <getPHYSpeed+0x4a4>
 202d460:	e0bff703 	ldbu	r2,-36(fp)
 202d464:	1000031e 	bne	r2,zero,202d474 <getPHYSpeed+0x498>
 202d468:	00808134 	movhi	r2,516
 202d46c:	10873e04 	addi	r2,r2,7416
 202d470:	00000806 	br	202d494 <getPHYSpeed+0x4b8>
 202d474:	00808134 	movhi	r2,516
 202d478:	10873f04 	addi	r2,r2,7420
 202d47c:	00000506 	br	202d494 <getPHYSpeed+0x4b8>
 202d480:	00808134 	movhi	r2,516
 202d484:	10874104 	addi	r2,r2,7428
 202d488:	00000206 	br	202d494 <getPHYSpeed+0x4b8>
 202d48c:	00808134 	movhi	r2,516
 202d490:	10874204 	addi	r2,r2,7432
 202d494:	e0fff743 	ldbu	r3,-35(fp)
 202d498:	18c00058 	cmpnei	r3,r3,1
 202d49c:	1800031e 	bne	r3,zero,202d4ac <getPHYSpeed+0x4d0>
 202d4a0:	00c08134 	movhi	r3,516
 202d4a4:	18c74404 	addi	r3,r3,7440
 202d4a8:	00000206 	br	202d4b4 <getPHYSpeed+0x4d8>
 202d4ac:	00c08134 	movhi	r3,516
 202d4b0:	18c74604 	addi	r3,r3,7448
 202d4b4:	d8c00015 	stw	r3,0(sp)
 202d4b8:	100f883a 	mov	r7,r2
 202d4bc:	280d883a 	mov	r6,r5
 202d4c0:	200b883a 	mov	r5,r4
 202d4c4:	01008134 	movhi	r4,516
 202d4c8:	21079504 	addi	r4,r4,7764
 202d4cc:	20009e40 	call	20009e4 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");
            return result;
 202d4d0:	e0bff817 	ldw	r2,-32(fp)
 202d4d4:	00015b06 	br	202da44 <getPHYSpeed+0xa68>
        }

		/* Small MAC */
		if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 202d4d8:	e0bffa17 	ldw	r2,-24(fp)
 202d4dc:	10800003 	ldbu	r2,0(r2)
 202d4e0:	10803fcc 	andi	r2,r2,255
 202d4e4:	10800058 	cmpnei	r2,r2,1
 202d4e8:	1000071e 	bne	r2,zero,202d508 <getPHYSpeed+0x52c>
			alt_tse_phy_set_adv_1000(pphy, 0);
 202d4ec:	000b883a 	mov	r5,zero
 202d4f0:	e13ff917 	ldw	r4,-28(fp)
 202d4f4:	202f9980 	call	202f998 <alt_tse_phy_set_adv_1000>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 202d4f8:	017e0034 	movhi	r5,63488
 202d4fc:	e13ff917 	ldw	r4,-28(fp)
 202d500:	202f0e80 	call	202f0e8 <alt_tse_phy_restart_an>
 202d504:	00000e06 	br	202d540 <getPHYSpeed+0x564>
		}
		else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 202d508:	e0bffa17 	ldw	r2,-24(fp)
 202d50c:	10800003 	ldbu	r2,0(r2)
 202d510:	10803fcc 	andi	r2,r2,255
 202d514:	10800098 	cmpnei	r2,r2,2
 202d518:	1000091e 	bne	r2,zero,202d540 <getPHYSpeed+0x564>
			alt_tse_phy_set_adv_100(pphy, 0);
 202d51c:	000b883a 	mov	r5,zero
 202d520:	e13ff917 	ldw	r4,-28(fp)
 202d524:	202fb5c0 	call	202fb5c <alt_tse_phy_set_adv_100>
			alt_tse_phy_set_adv_10(pphy, 0);
 202d528:	000b883a 	mov	r5,zero
 202d52c:	e13ff917 	ldw	r4,-28(fp)
 202d530:	202fdb00 	call	202fdb0 <alt_tse_phy_set_adv_10>
			alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 202d534:	017e0034 	movhi	r5,63488
 202d538:	e13ff917 	ldw	r4,-28(fp)
 202d53c:	202f0e80 	call	202f0e8 <alt_tse_phy_restart_an>
		}
		
		/* check link connection for this PHY */
		if(alt_tse_phy_check_link(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD) == TSE_PHY_AN_NOT_COMPLETE) {
 202d540:	017e0034 	movhi	r5,63488
 202d544:	e13ff917 	ldw	r4,-28(fp)
 202d548:	202f2a40 	call	202f2a4 <alt_tse_phy_check_link>
 202d54c:	10bfffd8 	cmpnei	r2,r2,-1
 202d550:	1000491e 	bne	r2,zero,202d678 <getPHYSpeed+0x69c>
			speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 202d554:	00800044 	movi	r2,1
 202d558:	e0bff705 	stb	r2,-36(fp)
			duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 202d55c:	00800044 	movi	r2,1
 202d560:	e0bff745 	stb	r2,-35(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_AN_NOT_COMPLETE;
 202d564:	e0bff743 	ldbu	r2,-35(fp)
 202d568:	10c0004c 	andi	r3,r2,1
 202d56c:	e0bff703 	ldbu	r2,-36(fp)
 202d570:	10800098 	cmpnei	r2,r2,2
 202d574:	1000021e 	bne	r2,zero,202d580 <getPHYSpeed+0x5a4>
 202d578:	00800084 	movi	r2,2
 202d57c:	00000106 	br	202d584 <getPHYSpeed+0x5a8>
 202d580:	0005883a 	mov	r2,zero
 202d584:	1886b03a 	or	r3,r3,r2
 202d588:	e0bff703 	ldbu	r2,-36(fp)
 202d58c:	10800058 	cmpnei	r2,r2,1
 202d590:	1000021e 	bne	r2,zero,202d59c <getPHYSpeed+0x5c0>
 202d594:	00800104 	movi	r2,4
 202d598:	00000106 	br	202d5a0 <getPHYSpeed+0x5c4>
 202d59c:	0005883a 	mov	r2,zero
 202d5a0:	1886b03a 	or	r3,r3,r2
 202d5a4:	e0bff703 	ldbu	r2,-36(fp)
 202d5a8:	1000021e 	bne	r2,zero,202d5b4 <getPHYSpeed+0x5d8>
 202d5ac:	00800204 	movi	r2,8
 202d5b0:	00000106 	br	202d5b8 <getPHYSpeed+0x5dc>
 202d5b4:	0005883a 	mov	r2,zero
 202d5b8:	1886b03a 	or	r3,r3,r2
 202d5bc:	e0bff703 	ldbu	r2,-36(fp)
 202d5c0:	108000d8 	cmpnei	r2,r2,3
 202d5c4:	1000021e 	bne	r2,zero,202d5d0 <getPHYSpeed+0x5f4>
 202d5c8:	00800074 	movhi	r2,1
 202d5cc:	00000106 	br	202d5d4 <getPHYSpeed+0x5f8>
 202d5d0:	0005883a 	mov	r2,zero
 202d5d4:	1884b03a 	or	r2,r3,r2
 202d5d8:	10800234 	orhi	r2,r2,8
 202d5dc:	e0bff815 	stw	r2,-32(fp)
			tse_dprintf(3, "WARNING : PHY[%d.%d] - Auto-Negotiation not completed! Speed = %s, Duplex = %s\n", mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 202d5e0:	e13ffd47 	ldb	r4,-11(fp)
 202d5e4:	e17ffd07 	ldb	r5,-12(fp)
 202d5e8:	e0bff703 	ldbu	r2,-36(fp)
 202d5ec:	108000a0 	cmpeqi	r2,r2,2
 202d5f0:	10000e1e 	bne	r2,zero,202d62c <getPHYSpeed+0x650>
 202d5f4:	e0bff703 	ldbu	r2,-36(fp)
 202d5f8:	10800060 	cmpeqi	r2,r2,1
 202d5fc:	1000081e 	bne	r2,zero,202d620 <getPHYSpeed+0x644>
 202d600:	e0bff703 	ldbu	r2,-36(fp)
 202d604:	1000031e 	bne	r2,zero,202d614 <getPHYSpeed+0x638>
 202d608:	00808134 	movhi	r2,516
 202d60c:	10873e04 	addi	r2,r2,7416
 202d610:	00000806 	br	202d634 <getPHYSpeed+0x658>
 202d614:	00808134 	movhi	r2,516
 202d618:	10873f04 	addi	r2,r2,7420
 202d61c:	00000506 	br	202d634 <getPHYSpeed+0x658>
 202d620:	00808134 	movhi	r2,516
 202d624:	10874104 	addi	r2,r2,7428
 202d628:	00000206 	br	202d634 <getPHYSpeed+0x658>
 202d62c:	00808134 	movhi	r2,516
 202d630:	10874204 	addi	r2,r2,7432
 202d634:	e0fff743 	ldbu	r3,-35(fp)
 202d638:	18c00058 	cmpnei	r3,r3,1
 202d63c:	1800031e 	bne	r3,zero,202d64c <getPHYSpeed+0x670>
 202d640:	00c08134 	movhi	r3,516
 202d644:	18c74404 	addi	r3,r3,7440
 202d648:	00000206 	br	202d654 <getPHYSpeed+0x678>
 202d64c:	00c08134 	movhi	r3,516
 202d650:	18c74604 	addi	r3,r3,7448
 202d654:	d8c00015 	stw	r3,0(sp)
 202d658:	100f883a 	mov	r7,r2
 202d65c:	280d883a 	mov	r6,r5
 202d660:	200b883a 	mov	r5,r4
 202d664:	01008134 	movhi	r4,516
 202d668:	2107a604 	addi	r4,r4,7832
 202d66c:	20009e40 	call	20009e4 <printf>
																			 speed == TSE_PHY_SPEED_100 ? "100" :
																			 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
																			 duplex == 1 ? "Full" : "Half");
			return result;
 202d670:	e0bff817 	ldw	r2,-32(fp)
 202d674:	0000f306 	br	202da44 <getPHYSpeed+0xa68>
		}

        IOWR(&pmac_group_base->MDIO_ADDR1, 0, pphy->mdio_address);
 202d678:	e0bffe17 	ldw	r2,-8(fp)
 202d67c:	10801004 	addi	r2,r2,64
 202d680:	e0fff917 	ldw	r3,-28(fp)
 202d684:	18c00003 	ldbu	r3,0(r3)
 202d688:	18c03fcc 	andi	r3,r3,255
 202d68c:	10c00035 	stwio	r3,0(r2)
        /* To enable PHY loopback */
        #if ENABLE_PHY_LOOPBACK
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Putting PHY in loopback\n", mac_group_index, mac_info_index);
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 1);   // enable PHY loopback
		#else
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 202d690:	d8000015 	stw	zero,0(sp)
 202d694:	01c00044 	movi	r7,1
 202d698:	01800384 	movi	r6,14
 202d69c:	000b883a 	mov	r5,zero
 202d6a0:	e13ff917 	ldw	r4,-28(fp)
 202d6a4:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        #endif
       
        /* if PHY not found in profile */
        if(pphy->pphy_profile == 0) {
 202d6a8:	e0bff917 	ldw	r2,-28(fp)
 202d6ac:	10800517 	ldw	r2,20(r2)
 202d6b0:	10002b1e 	bne	r2,zero,202d760 <getPHYSpeed+0x784>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not found in PHY profile\n", mac_group_index, mac_info_index);
 202d6b4:	e0bffd47 	ldb	r2,-11(fp)
 202d6b8:	e0fffd07 	ldb	r3,-12(fp)
 202d6bc:	180d883a 	mov	r6,r3
 202d6c0:	100b883a 	mov	r5,r2
 202d6c4:	01008134 	movhi	r4,516
 202d6c8:	2107ba04 	addi	r4,r4,7912
 202d6cc:	20009e40 	call	20009e4 <printf>
            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 202d6d0:	00800044 	movi	r2,1
 202d6d4:	e0bff705 	stb	r2,-36(fp)
            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 202d6d8:	00800044 	movi	r2,1
 202d6dc:	e0bff745 	stb	r2,-35(fp)
			result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_NO_PHY_PROFILE;
 202d6e0:	e0bff743 	ldbu	r2,-35(fp)
 202d6e4:	10c0004c 	andi	r3,r2,1
 202d6e8:	e0bff703 	ldbu	r2,-36(fp)
 202d6ec:	10800098 	cmpnei	r2,r2,2
 202d6f0:	1000021e 	bne	r2,zero,202d6fc <getPHYSpeed+0x720>
 202d6f4:	00800084 	movi	r2,2
 202d6f8:	00000106 	br	202d700 <getPHYSpeed+0x724>
 202d6fc:	0005883a 	mov	r2,zero
 202d700:	1886b03a 	or	r3,r3,r2
 202d704:	e0bff703 	ldbu	r2,-36(fp)
 202d708:	10800058 	cmpnei	r2,r2,1
 202d70c:	1000021e 	bne	r2,zero,202d718 <getPHYSpeed+0x73c>
 202d710:	00800104 	movi	r2,4
 202d714:	00000106 	br	202d71c <getPHYSpeed+0x740>
 202d718:	0005883a 	mov	r2,zero
 202d71c:	1886b03a 	or	r3,r3,r2
 202d720:	e0bff703 	ldbu	r2,-36(fp)
 202d724:	1000021e 	bne	r2,zero,202d730 <getPHYSpeed+0x754>
 202d728:	00800204 	movi	r2,8
 202d72c:	00000106 	br	202d734 <getPHYSpeed+0x758>
 202d730:	0005883a 	mov	r2,zero
 202d734:	1886b03a 	or	r3,r3,r2
 202d738:	e0bff703 	ldbu	r2,-36(fp)
 202d73c:	108000d8 	cmpnei	r2,r2,3
 202d740:	1000021e 	bne	r2,zero,202d74c <getPHYSpeed+0x770>
 202d744:	00800074 	movhi	r2,1
 202d748:	00000106 	br	202d750 <getPHYSpeed+0x774>
 202d74c:	0005883a 	mov	r2,zero
 202d750:	1884b03a 	or	r2,r3,r2
 202d754:	10800134 	orhi	r2,r2,4
 202d758:	e0bff815 	stw	r2,-32(fp)
 202d75c:	00009406 	br	202d9b0 <getPHYSpeed+0x9d4>
        }
        // retrieve duplex information from PHY
		else
		{
			if(pphy->pphy_profile->link_status_read)
 202d760:	e0bff917 	ldw	r2,-28(fp)
 202d764:	10800517 	ldw	r2,20(r2)
 202d768:	10801817 	ldw	r2,96(r2)
 202d76c:	10002626 	beq	r2,zero,202d808 <getPHYSpeed+0x82c>
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
 202d770:	e0bff917 	ldw	r2,-28(fp)
 202d774:	10800517 	ldw	r2,20(r2)
 202d778:	10801817 	ldw	r2,96(r2)
 202d77c:	e13ffe17 	ldw	r4,-8(fp)
 202d780:	103ee83a 	callr	r2
 202d784:	e0bff815 	stw	r2,-32(fp)
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 202d788:	e0bff817 	ldw	r2,-32(fp)
 202d78c:	1080008c 	andi	r2,r2,2
 202d790:	10000c1e 	bne	r2,zero,202d7c4 <getPHYSpeed+0x7e8>
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
 202d794:	e0bff817 	ldw	r2,-32(fp)
 202d798:	1080010c 	andi	r2,r2,4
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 202d79c:	1000071e 	bne	r2,zero,202d7bc <getPHYSpeed+0x7e0>
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
 202d7a0:	e0bff817 	ldw	r2,-32(fp)
 202d7a4:	1080020c 	andi	r2,r2,8
		else
		{
			if(pphy->pphy_profile->link_status_read)
			{
				result = pphy->pphy_profile->link_status_read(pmac_group_base);
				speed = (result & 0x02) ? TSE_PHY_SPEED_1000 :
 202d7a8:	10000226 	beq	r2,zero,202d7b4 <getPHYSpeed+0x7d8>
 202d7ac:	0005883a 	mov	r2,zero
 202d7b0:	00000506 	br	202d7c8 <getPHYSpeed+0x7ec>
 202d7b4:	008000c4 	movi	r2,3
 202d7b8:	00000306 	br	202d7c8 <getPHYSpeed+0x7ec>
 202d7bc:	00800044 	movi	r2,1
 202d7c0:	00000106 	br	202d7c8 <getPHYSpeed+0x7ec>
 202d7c4:	00800084 	movi	r2,2
 202d7c8:	e0bff705 	stb	r2,-36(fp)
				        (result & 0x04) ? TSE_PHY_SPEED_100  :
						(result & 0x08) ? TSE_PHY_SPEED_10  : TSE_PHY_SPEED_INVALID;
				duplex = (result & 0x01) ? TSE_PHY_DUPLEX_FULL : TSE_PHY_DUPLEX_HALF;
 202d7cc:	e0bff817 	ldw	r2,-32(fp)
 202d7d0:	1080004c 	andi	r2,r2,1
 202d7d4:	1004c03a 	cmpne	r2,r2,zero
 202d7d8:	e0bff745 	stb	r2,-35(fp)
				
				if(result & ALT_TSE_E_INVALID_SPEED)
 202d7dc:	e0bff817 	ldw	r2,-32(fp)
 202d7e0:	1080006c 	andhi	r2,r2,1
 202d7e4:	10007226 	beq	r2,zero,202d9b0 <getPHYSpeed+0x9d4>
				{
					tse_dprintf(3, "WARNING : PHY[%d.%d] - Invalid speed read from PHY\n", mac_group_index, mac_info_index);
 202d7e8:	e0bffd47 	ldb	r2,-11(fp)
 202d7ec:	e0fffd07 	ldb	r3,-12(fp)
 202d7f0:	180d883a 	mov	r6,r3
 202d7f4:	100b883a 	mov	r5,r2
 202d7f8:	01008134 	movhi	r4,516
 202d7fc:	2107c804 	addi	r4,r4,7968
 202d800:	20009e40 	call	20009e4 <printf>
 202d804:	00006a06 	br	202d9b0 <getPHYSpeed+0x9d4>
				}
			}
			else if(pphy->pphy_profile->status_reg_location == 0)
 202d808:	e0bff917 	ldw	r2,-28(fp)
 202d80c:	10800517 	ldw	r2,20(r2)
 202d810:	10801583 	ldbu	r2,86(r2)
 202d814:	10803fcc 	andi	r2,r2,255
 202d818:	10002b1e 	bne	r2,zero,202d8c8 <getPHYSpeed+0x8ec>
	        {
	            tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY Specific Status register information not provided in profile\n", mac_group_index, mac_info_index);
 202d81c:	e0bffd47 	ldb	r2,-11(fp)
 202d820:	e0fffd07 	ldb	r3,-12(fp)
 202d824:	180d883a 	mov	r6,r3
 202d828:	100b883a 	mov	r5,r2
 202d82c:	01008134 	movhi	r4,516
 202d830:	2107d504 	addi	r4,r4,8020
 202d834:	20009e40 	call	20009e4 <printf>
	            speed = ALTERA_TSE_MAC_SPEED_DEFAULT;
 202d838:	00800044 	movi	r2,1
 202d83c:	e0bff705 	stb	r2,-36(fp)
	            duplex = ALTERA_TSE_DUPLEX_MODE_DEFAULT;
 202d840:	00800044 	movi	r2,1
 202d844:	e0bff745 	stb	r2,-35(fp)
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex) | ALT_TSE_E_PROFILE_INCORRECT_DEFINED;
 202d848:	e0bff743 	ldbu	r2,-35(fp)
 202d84c:	10c0004c 	andi	r3,r2,1
 202d850:	e0bff703 	ldbu	r2,-36(fp)
 202d854:	10800098 	cmpnei	r2,r2,2
 202d858:	1000021e 	bne	r2,zero,202d864 <getPHYSpeed+0x888>
 202d85c:	00800084 	movi	r2,2
 202d860:	00000106 	br	202d868 <getPHYSpeed+0x88c>
 202d864:	0005883a 	mov	r2,zero
 202d868:	1886b03a 	or	r3,r3,r2
 202d86c:	e0bff703 	ldbu	r2,-36(fp)
 202d870:	10800058 	cmpnei	r2,r2,1
 202d874:	1000021e 	bne	r2,zero,202d880 <getPHYSpeed+0x8a4>
 202d878:	00800104 	movi	r2,4
 202d87c:	00000106 	br	202d884 <getPHYSpeed+0x8a8>
 202d880:	0005883a 	mov	r2,zero
 202d884:	1886b03a 	or	r3,r3,r2
 202d888:	e0bff703 	ldbu	r2,-36(fp)
 202d88c:	1000021e 	bne	r2,zero,202d898 <getPHYSpeed+0x8bc>
 202d890:	00800204 	movi	r2,8
 202d894:	00000106 	br	202d89c <getPHYSpeed+0x8c0>
 202d898:	0005883a 	mov	r2,zero
 202d89c:	1886b03a 	or	r3,r3,r2
 202d8a0:	e0bff703 	ldbu	r2,-36(fp)
 202d8a4:	108000d8 	cmpnei	r2,r2,3
 202d8a8:	1000021e 	bne	r2,zero,202d8b4 <getPHYSpeed+0x8d8>
 202d8ac:	00800074 	movhi	r2,1
 202d8b0:	00000106 	br	202d8b8 <getPHYSpeed+0x8dc>
 202d8b4:	0005883a 	mov	r2,zero
 202d8b8:	1884b03a 	or	r2,r3,r2
 202d8bc:	108000b4 	orhi	r2,r2,2
 202d8c0:	e0bff815 	stw	r2,-32(fp)
 202d8c4:	00003a06 	br	202d9b0 <getPHYSpeed+0x9d4>
	        }
	        else
	        {
	            /* extract connection speed and duplex information */
	        	speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 202d8c8:	e0bff917 	ldw	r2,-28(fp)
 202d8cc:	10800517 	ldw	r2,20(r2)
 202d8d0:	10801583 	ldbu	r2,86(r2)
 202d8d4:	10c03fcc 	andi	r3,r2,255
 202d8d8:	e0bff917 	ldw	r2,-28(fp)
 202d8dc:	10800517 	ldw	r2,20(r2)
 202d8e0:	108015c3 	ldbu	r2,87(r2)
 202d8e4:	10803fcc 	andi	r2,r2,255
 202d8e8:	01c00084 	movi	r7,2
 202d8ec:	100d883a 	mov	r6,r2
 202d8f0:	180b883a 	mov	r5,r3
 202d8f4:	e13ff917 	ldw	r4,-28(fp)
 202d8f8:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202d8fc:	e0bff705 	stb	r2,-36(fp)
	            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 202d900:	e0bff917 	ldw	r2,-28(fp)
 202d904:	10800517 	ldw	r2,20(r2)
 202d908:	10801583 	ldbu	r2,86(r2)
 202d90c:	10c03fcc 	andi	r3,r2,255
 202d910:	e0bff917 	ldw	r2,-28(fp)
 202d914:	10800517 	ldw	r2,20(r2)
 202d918:	10801603 	ldbu	r2,88(r2)
 202d91c:	10803fcc 	andi	r2,r2,255
 202d920:	01c00044 	movi	r7,1
 202d924:	100d883a 	mov	r6,r2
 202d928:	180b883a 	mov	r5,r3
 202d92c:	e13ff917 	ldw	r4,-28(fp)
 202d930:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202d934:	e0bff745 	stb	r2,-35(fp)
				
				result = ALT_TSE_SPEED_DUPLEX(speed, duplex);
 202d938:	e0bff743 	ldbu	r2,-35(fp)
 202d93c:	10c0004c 	andi	r3,r2,1
 202d940:	e0bff703 	ldbu	r2,-36(fp)
 202d944:	10800098 	cmpnei	r2,r2,2
 202d948:	1000021e 	bne	r2,zero,202d954 <getPHYSpeed+0x978>
 202d94c:	00800084 	movi	r2,2
 202d950:	00000106 	br	202d958 <getPHYSpeed+0x97c>
 202d954:	0005883a 	mov	r2,zero
 202d958:	1886b03a 	or	r3,r3,r2
 202d95c:	e0bff703 	ldbu	r2,-36(fp)
 202d960:	10800058 	cmpnei	r2,r2,1
 202d964:	1000021e 	bne	r2,zero,202d970 <getPHYSpeed+0x994>
 202d968:	00800104 	movi	r2,4
 202d96c:	00000106 	br	202d974 <getPHYSpeed+0x998>
 202d970:	0005883a 	mov	r2,zero
 202d974:	1886b03a 	or	r3,r3,r2
 202d978:	e0bff703 	ldbu	r2,-36(fp)
 202d97c:	1000021e 	bne	r2,zero,202d988 <getPHYSpeed+0x9ac>
 202d980:	00800204 	movi	r2,8
 202d984:	00000106 	br	202d98c <getPHYSpeed+0x9b0>
 202d988:	0005883a 	mov	r2,zero
 202d98c:	1886b03a 	or	r3,r3,r2
 202d990:	e0bff703 	ldbu	r2,-36(fp)
 202d994:	108000d8 	cmpnei	r2,r2,3
 202d998:	1000021e 	bne	r2,zero,202d9a4 <getPHYSpeed+0x9c8>
 202d99c:	00800074 	movhi	r2,1
 202d9a0:	00000106 	br	202d9a8 <getPHYSpeed+0x9cc>
 202d9a4:	0005883a 	mov	r2,zero
 202d9a8:	1884b03a 	or	r2,r3,r2
 202d9ac:	e0bff815 	stw	r2,-32(fp)
        /* for simulation purpose, default to gigabit mode */
        speed = 1;
        duplex = 1;
    #endif

    tse_dprintf(5, "INFO    : PHY[%d.%d] - Speed = %s, Duplex = %s\n",  mac_group_index, mac_info_index, speed == TSE_PHY_SPEED_1000 ? "1000" :
 202d9b0:	e13ffd47 	ldb	r4,-11(fp)
 202d9b4:	e17ffd07 	ldb	r5,-12(fp)
 202d9b8:	e0bff703 	ldbu	r2,-36(fp)
 202d9bc:	108000a0 	cmpeqi	r2,r2,2
 202d9c0:	10000e1e 	bne	r2,zero,202d9fc <getPHYSpeed+0xa20>
 202d9c4:	e0bff703 	ldbu	r2,-36(fp)
 202d9c8:	10800060 	cmpeqi	r2,r2,1
 202d9cc:	1000081e 	bne	r2,zero,202d9f0 <getPHYSpeed+0xa14>
 202d9d0:	e0bff703 	ldbu	r2,-36(fp)
 202d9d4:	1000031e 	bne	r2,zero,202d9e4 <getPHYSpeed+0xa08>
 202d9d8:	00808134 	movhi	r2,516
 202d9dc:	10873e04 	addi	r2,r2,7416
 202d9e0:	00000806 	br	202da04 <getPHYSpeed+0xa28>
 202d9e4:	00808134 	movhi	r2,516
 202d9e8:	10873f04 	addi	r2,r2,7420
 202d9ec:	00000506 	br	202da04 <getPHYSpeed+0xa28>
 202d9f0:	00808134 	movhi	r2,516
 202d9f4:	10874104 	addi	r2,r2,7428
 202d9f8:	00000206 	br	202da04 <getPHYSpeed+0xa28>
 202d9fc:	00808134 	movhi	r2,516
 202da00:	10874204 	addi	r2,r2,7432
 202da04:	e0fff743 	ldbu	r3,-35(fp)
 202da08:	18c00058 	cmpnei	r3,r3,1
 202da0c:	1800031e 	bne	r3,zero,202da1c <getPHYSpeed+0xa40>
 202da10:	00c08134 	movhi	r3,516
 202da14:	18c74404 	addi	r3,r3,7440
 202da18:	00000206 	br	202da24 <getPHYSpeed+0xa48>
 202da1c:	00c08134 	movhi	r3,516
 202da20:	18c74604 	addi	r3,r3,7448
 202da24:	d8c00015 	stw	r3,0(sp)
 202da28:	100f883a 	mov	r7,r2
 202da2c:	280d883a 	mov	r6,r5
 202da30:	200b883a 	mov	r5,r4
 202da34:	01008134 	movhi	r4,516
 202da38:	2107ec04 	addi	r4,r4,8112
 202da3c:	20009e40 	call	20009e4 <printf>
                                                                                 speed == TSE_PHY_SPEED_100 ? "100" :
                                                                                 speed == TSE_PHY_SPEED_10 ? "10" : "Unknown",
                                                                                 duplex == 1 ? "Full" : "Half");

    return result;
 202da40:	e0bff817 	ldw	r2,-32(fp)
}
 202da44:	e037883a 	mov	sp,fp
 202da48:	dfc00117 	ldw	ra,4(sp)
 202da4c:	df000017 	ldw	fp,0(sp)
 202da50:	dec00204 	addi	sp,sp,8
 202da54:	f800283a 	ret

0202da58 <alt_tse_phy_rd_mdio_addr>:
/* @Function Description: Read MDIO address from the MDIO address1 register of first MAC within MAC group
 * @API Type:    Internal
 * @param pmac   Pointer to the alt_tse_phy_info structure
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_rd_mdio_addr(alt_tse_phy_info *pphy) {
 202da58:	defffd04 	addi	sp,sp,-12
 202da5c:	df000215 	stw	fp,8(sp)
 202da60:	df000204 	addi	fp,sp,8
 202da64:	e13fff15 	stw	r4,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 202da68:	e0bfff17 	ldw	r2,-4(fp)
 202da6c:	10800617 	ldw	r2,24(r2)
 202da70:	10800317 	ldw	r2,12(r2)
 202da74:	10800117 	ldw	r2,4(r2)
 202da78:	10800217 	ldw	r2,8(r2)
 202da7c:	10800017 	ldw	r2,0(r2)
 202da80:	e0bffe15 	stw	r2,-8(fp)
    return IORD(&pmac_group_base->MDIO_ADDR1, 0);
 202da84:	e0bffe17 	ldw	r2,-8(fp)
 202da88:	10801004 	addi	r2,r2,64
 202da8c:	10800037 	ldwio	r2,0(r2)
}
 202da90:	e037883a 	mov	sp,fp
 202da94:	df000017 	ldw	fp,0(sp)
 202da98:	dec00104 	addi	sp,sp,4
 202da9c:	f800283a 	ret

0202daa0 <alt_tse_phy_wr_mdio_addr>:
 * @API Type:           Internal
 * @param pmac          Pointer to the alt_tse_phy_info structure
 * @param mdio_address  MDIO address to be written
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_wr_mdio_addr(alt_tse_phy_info *pphy, alt_u8 mdio_address) {
 202daa0:	defffc04 	addi	sp,sp,-16
 202daa4:	df000315 	stw	fp,12(sp)
 202daa8:	df000304 	addi	fp,sp,12
 202daac:	e13ffe15 	stw	r4,-8(fp)
 202dab0:	2805883a 	mov	r2,r5
 202dab4:	e0bfff05 	stb	r2,-4(fp)
    np_tse_mac *pmac_group_base = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 202dab8:	e0bffe17 	ldw	r2,-8(fp)
 202dabc:	10800617 	ldw	r2,24(r2)
 202dac0:	10800317 	ldw	r2,12(r2)
 202dac4:	10800117 	ldw	r2,4(r2)
 202dac8:	10800217 	ldw	r2,8(r2)
 202dacc:	10800017 	ldw	r2,0(r2)
 202dad0:	e0bffd15 	stw	r2,-12(fp)
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdio_address);
 202dad4:	e0bffd17 	ldw	r2,-12(fp)
 202dad8:	10801004 	addi	r2,r2,64
 202dadc:	e0ffff03 	ldbu	r3,-4(fp)
 202dae0:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 202dae4:	0005883a 	mov	r2,zero
}
 202dae8:	e037883a 	mov	sp,fp
 202daec:	df000017 	ldw	fp,0(sp)
 202daf0:	dec00104 	addi	sp,sp,4
 202daf4:	f800283a 	ret

0202daf8 <alt_tse_phy_wr_mdio_reg>:
  * @param  bit_length       number of bits to be written to the register.
  * @param  data             data to be written to the register at specific bit location of register.
  * @return SUCCESS 
  */
alt_32 alt_tse_phy_wr_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length, alt_u16 data)
{
 202daf8:	defff604 	addi	sp,sp,-40
 202dafc:	df000915 	stw	fp,36(sp)
 202db00:	df000904 	addi	fp,sp,36
 202db04:	e13ffb15 	stw	r4,-20(fp)
 202db08:	3009883a 	mov	r4,r6
 202db0c:	3807883a 	mov	r3,r7
 202db10:	e0800117 	ldw	r2,4(fp)
 202db14:	e17ffc05 	stb	r5,-16(fp)
 202db18:	e13ffd05 	stb	r4,-12(fp)
 202db1c:	e0fffe05 	stb	r3,-8(fp)
 202db20:	e0bfff0d 	sth	r2,-4(fp)
    
    alt_u16 temp_data;
    alt_u16 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 202db24:	e0bffb17 	ldw	r2,-20(fp)
 202db28:	10800617 	ldw	r2,24(r2)
 202db2c:	10800317 	ldw	r2,12(r2)
 202db30:	10800117 	ldw	r2,4(r2)
 202db34:	10800217 	ldw	r2,8(r2)
 202db38:	10800017 	ldw	r2,0(r2)
 202db3c:	e0bff915 	stw	r2,-28(fp)
    
    bit_mask = 0x00;
 202db40:	e03ff70d 	sth	zero,-36(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 202db44:	e03ff815 	stw	zero,-32(fp)
 202db48:	00000906 	br	202db70 <alt_tse_phy_wr_mdio_reg+0x78>
    {
        bit_mask <<= 1;
 202db4c:	e0bff70b 	ldhu	r2,-36(fp)
 202db50:	1085883a 	add	r2,r2,r2
 202db54:	e0bff70d 	sth	r2,-36(fp)
        bit_mask |= 0x01;        
 202db58:	e0bff70b 	ldhu	r2,-36(fp)
 202db5c:	10800054 	ori	r2,r2,1
 202db60:	e0bff70d 	sth	r2,-36(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 202db64:	e0bff817 	ldw	r2,-32(fp)
 202db68:	10800044 	addi	r2,r2,1
 202db6c:	e0bff815 	stw	r2,-32(fp)
 202db70:	e0bffe03 	ldbu	r2,-8(fp)
 202db74:	e0fff817 	ldw	r3,-32(fp)
 202db78:	18bff416 	blt	r3,r2,202db4c <__alt_mem_mem_0+0xfd00db4c>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* shifting mask to left by bit_num */
    bit_mask <<= lsb_num;
 202db7c:	e0fff70b 	ldhu	r3,-36(fp)
 202db80:	e0bffd03 	ldbu	r2,-12(fp)
 202db84:	1884983a 	sll	r2,r3,r2
 202db88:	e0bff70d 	sth	r2,-36(fp)

    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 202db8c:	e0bff917 	ldw	r2,-28(fp)
 202db90:	10c0a004 	addi	r3,r2,640
 202db94:	e0bffc03 	ldbu	r2,-16(fp)
 202db98:	1085883a 	add	r2,r2,r2
 202db9c:	1085883a 	add	r2,r2,r2
 202dba0:	1885883a 	add	r2,r3,r2
 202dba4:	10800037 	ldwio	r2,0(r2)
 202dba8:	e0bffa0d 	sth	r2,-24(fp)
    
    /* clear bits to be written */
    temp_data &= ~bit_mask;
 202dbac:	e0bff70b 	ldhu	r2,-36(fp)
 202dbb0:	0084303a 	nor	r2,zero,r2
 202dbb4:	1007883a 	mov	r3,r2
 202dbb8:	e0bffa0b 	ldhu	r2,-24(fp)
 202dbbc:	1884703a 	and	r2,r3,r2
 202dbc0:	e0bffa0d 	sth	r2,-24(fp)
    
    /* OR-ed together corresponding bits data */
    temp_data |= ((data << lsb_num) & bit_mask);    
 202dbc4:	e0ffff0b 	ldhu	r3,-4(fp)
 202dbc8:	e0bffd03 	ldbu	r2,-12(fp)
 202dbcc:	1884983a 	sll	r2,r3,r2
 202dbd0:	1007883a 	mov	r3,r2
 202dbd4:	e0bff70b 	ldhu	r2,-36(fp)
 202dbd8:	1884703a 	and	r2,r3,r2
 202dbdc:	1007883a 	mov	r3,r2
 202dbe0:	e0bffa0b 	ldhu	r2,-24(fp)
 202dbe4:	1884b03a 	or	r2,r3,r2
 202dbe8:	e0bffa0d 	sth	r2,-24(fp)
    
    /* write data to MDIO register */
    IOWR(&pmac->mdio1, reg_num, temp_data);
 202dbec:	e0bff917 	ldw	r2,-28(fp)
 202dbf0:	10c0a004 	addi	r3,r2,640
 202dbf4:	e0bffc03 	ldbu	r2,-16(fp)
 202dbf8:	1085883a 	add	r2,r2,r2
 202dbfc:	1085883a 	add	r2,r2,r2
 202dc00:	1885883a 	add	r2,r3,r2
 202dc04:	e0fffa0b 	ldhu	r3,-24(fp)
 202dc08:	10c00035 	stwio	r3,0(r2)
    
    return SUCCESS;
 202dc0c:	0005883a 	mov	r2,zero
    
}
 202dc10:	e037883a 	mov	sp,fp
 202dc14:	df000017 	ldw	fp,0(sp)
 202dc18:	dec00104 	addi	sp,sp,4
 202dc1c:	f800283a 	ret

0202dc20 <alt_tse_phy_rd_mdio_reg>:
 * @param  bit_length       number of bits to be read from the register.
 * @return data read from MDIO register 
 */

alt_u32 alt_tse_phy_rd_mdio_reg(alt_tse_phy_info *pphy, alt_u8 reg_num, alt_u8 lsb_num, alt_u8 bit_length)
{
 202dc20:	defff704 	addi	sp,sp,-36
 202dc24:	df000815 	stw	fp,32(sp)
 202dc28:	df000804 	addi	fp,sp,32
 202dc2c:	e13ffc15 	stw	r4,-16(fp)
 202dc30:	2809883a 	mov	r4,r5
 202dc34:	3007883a 	mov	r3,r6
 202dc38:	3805883a 	mov	r2,r7
 202dc3c:	e13ffd05 	stb	r4,-12(fp)
 202dc40:	e0fffe05 	stb	r3,-8(fp)
 202dc44:	e0bfff05 	stb	r2,-4(fp)
    alt_u16 temp_data;
    alt_u32 bit_mask;
    alt_32 i;
    np_tse_mac *pmac = (np_tse_mac *) pphy->pmac_info->pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 202dc48:	e0bffc17 	ldw	r2,-16(fp)
 202dc4c:	10800617 	ldw	r2,24(r2)
 202dc50:	10800317 	ldw	r2,12(r2)
 202dc54:	10800117 	ldw	r2,4(r2)
 202dc58:	10800217 	ldw	r2,8(r2)
 202dc5c:	10800017 	ldw	r2,0(r2)
 202dc60:	e0bffa15 	stw	r2,-24(fp)
    
    bit_mask = 0x00;
 202dc64:	e03ff815 	stw	zero,-32(fp)
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 202dc68:	e03ff915 	stw	zero,-28(fp)
 202dc6c:	00000906 	br	202dc94 <alt_tse_phy_rd_mdio_reg+0x74>
    {
        bit_mask <<= 1;
 202dc70:	e0bff817 	ldw	r2,-32(fp)
 202dc74:	1085883a 	add	r2,r2,r2
 202dc78:	e0bff815 	stw	r2,-32(fp)
        bit_mask |= 0x01;        
 202dc7c:	e0bff817 	ldw	r2,-32(fp)
 202dc80:	10800054 	ori	r2,r2,1
 202dc84:	e0bff815 	stw	r2,-32(fp)
    
    bit_mask = 0x00;
    /* generate mask consist of bit_length number of 1
     * eg: bit_length = 3, bit_mask = 0b0000 0000 0000 0111
     */
    for(i = 0; i < bit_length; i++)
 202dc88:	e0bff917 	ldw	r2,-28(fp)
 202dc8c:	10800044 	addi	r2,r2,1
 202dc90:	e0bff915 	stw	r2,-28(fp)
 202dc94:	e0bfff03 	ldbu	r2,-4(fp)
 202dc98:	e0fff917 	ldw	r3,-28(fp)
 202dc9c:	18bff416 	blt	r3,r2,202dc70 <__alt_mem_mem_0+0xfd00dc70>
        bit_mask <<= 1;
        bit_mask |= 0x01;        
    }
    
    /* read register data */
    temp_data = IORD(&pmac->mdio1, reg_num);
 202dca0:	e0bffa17 	ldw	r2,-24(fp)
 202dca4:	10c0a004 	addi	r3,r2,640
 202dca8:	e0bffd03 	ldbu	r2,-12(fp)
 202dcac:	1085883a 	add	r2,r2,r2
 202dcb0:	1085883a 	add	r2,r2,r2
 202dcb4:	1885883a 	add	r2,r3,r2
 202dcb8:	10800037 	ldwio	r2,0(r2)
 202dcbc:	e0bffb0d 	sth	r2,-20(fp)
    
    /* shifting read data */
    temp_data >>= lsb_num;
 202dcc0:	e0fffb0b 	ldhu	r3,-20(fp)
 202dcc4:	e0bffe03 	ldbu	r2,-8(fp)
 202dcc8:	1885d83a 	sra	r2,r3,r2
 202dccc:	e0bffb0d 	sth	r2,-20(fp)
    
    return (temp_data & bit_mask);
 202dcd0:	e0fffb0b 	ldhu	r3,-20(fp)
 202dcd4:	e0bff817 	ldw	r2,-32(fp)
 202dcd8:	1884703a 	and	r2,r3,r2
}
 202dcdc:	e037883a 	mov	sp,fp
 202dce0:	df000017 	ldw	fp,0(sp)
 202dce4:	dec00104 	addi	sp,sp,4
 202dce8:	f800283a 	ret

0202dcec <alt_tse_phy_add_profile_default>:
 * @param pmac  N/A
 * @return      Number of PHY in profile
 * 
 * User might add their own PHY by calling alt_tse_phy_add_profile()
 */
alt_32 alt_tse_phy_add_profile_default() {
 202dcec:	deff9a04 	addi	sp,sp,-408
 202dcf0:	dfc06515 	stw	ra,404(sp)
 202dcf4:	df006415 	stw	fp,400(sp)
 202dcf8:	df006404 	addi	fp,sp,400
        
    /* ------------------------------ */
    /* Marvell PHY on PHYWORKX board  */
    /* ------------------------------ */
    
    alt_tse_phy_profile MV88E1111 = {"Marvell 88E1111",      /* Marvell 88E1111                                  */
 202dcfc:	e0ff9c04 	addi	r3,fp,-400
 202dd00:	00801904 	movi	r2,100
 202dd04:	100d883a 	mov	r6,r2
 202dd08:	000b883a 	mov	r5,zero
 202dd0c:	1809883a 	mov	r4,r3
 202dd10:	2005fa00 	call	2005fa0 <memset>
 202dd14:	009d9cb4 	movhi	r2,30322
 202dd18:	10985344 	addi	r2,r2,24909
 202dd1c:	e0bf9c15 	stw	r2,-400(fp)
 202dd20:	00881b34 	movhi	r2,8300
 202dd24:	109b1944 	addi	r2,r2,27749
 202dd28:	e0bf9d15 	stw	r2,-396(fp)
 202dd2c:	008c5174 	movhi	r2,12613
 202dd30:	108e0e04 	addi	r2,r2,14392
 202dd34:	e0bf9e15 	stw	r2,-392(fp)
 202dd38:	00800c74 	movhi	r2,49
 202dd3c:	108c4c44 	addi	r2,r2,12593
 202dd40:	e0bf9f15 	stw	r2,-388(fp)
 202dd44:	e0bfa004 	addi	r2,fp,-384
 202dd48:	00c01004 	movi	r3,64
 202dd4c:	180d883a 	mov	r6,r3
 202dd50:	000b883a 	mov	r5,zero
 202dd54:	1009883a 	mov	r4,r2
 202dd58:	2005fa00 	call	2005fa0 <memset>
 202dd5c:	009410c4 	movi	r2,20547
 202dd60:	e0bfb015 	stw	r2,-320(fp)
 202dd64:	00800304 	movi	r2,12
 202dd68:	e0bfb105 	stb	r2,-316(fp)
 202dd6c:	00800084 	movi	r2,2
 202dd70:	e0bfb145 	stb	r2,-315(fp)
 202dd74:	00800444 	movi	r2,17
 202dd78:	e0bfb185 	stb	r2,-314(fp)
 202dd7c:	00800384 	movi	r2,14
 202dd80:	e0bfb1c5 	stb	r2,-313(fp)
 202dd84:	00800344 	movi	r2,13
 202dd88:	e0bfb205 	stb	r2,-312(fp)
 202dd8c:	00800284 	movi	r2,10
 202dd90:	e0bfb245 	stb	r2,-311(fp)
 202dd94:	008080f4 	movhi	r2,515
 202dd98:	1081cd04 	addi	r2,r2,1844
 202dd9c:	e0bfb315 	stw	r2,-308(fp)
    
    /* ---------------------------------- */
    /* Marvell Quad PHY on PHYWORKX board */
    /* ---------------------------------- */
    
    alt_tse_phy_profile MV88E1145 = {"Marvell Quad PHY 88E1145",      /* Marvell 88E1145                                  */
 202dda0:	e0bfb504 	addi	r2,fp,-300
 202dda4:	00c01904 	movi	r3,100
 202dda8:	180d883a 	mov	r6,r3
 202ddac:	000b883a 	mov	r5,zero
 202ddb0:	1009883a 	mov	r4,r2
 202ddb4:	2005fa00 	call	2005fa0 <memset>
 202ddb8:	009d9cb4 	movhi	r2,30322
 202ddbc:	10985344 	addi	r2,r2,24909
 202ddc0:	e0bfb515 	stw	r2,-300(fp)
 202ddc4:	00881b34 	movhi	r2,8300
 202ddc8:	109b1944 	addi	r2,r2,27749
 202ddcc:	e0bfb615 	stw	r2,-296(fp)
 202ddd0:	00991874 	movhi	r2,25697
 202ddd4:	109d5444 	addi	r2,r2,30033
 202ddd8:	e0bfb715 	stw	r2,-292(fp)
 202dddc:	00965234 	movhi	r2,22856
 202dde0:	10940804 	addi	r2,r2,20512
 202dde4:	e0bfb815 	stw	r2,-288(fp)
 202dde8:	00914e34 	movhi	r2,17720
 202ddec:	108e0804 	addi	r2,r2,14368
 202ddf0:	e0bfb915 	stw	r2,-284(fp)
 202ddf4:	008d4d34 	movhi	r2,13620
 202ddf8:	108c4c44 	addi	r2,r2,12593
 202ddfc:	e0bfba15 	stw	r2,-280(fp)
 202de00:	e03fbb15 	stw	zero,-276(fp)
 202de04:	e03fbc15 	stw	zero,-272(fp)
 202de08:	e03fbd15 	stw	zero,-268(fp)
 202de0c:	e03fbe15 	stw	zero,-264(fp)
 202de10:	e03fbf15 	stw	zero,-260(fp)
 202de14:	e03fc015 	stw	zero,-256(fp)
 202de18:	e03fc115 	stw	zero,-252(fp)
 202de1c:	e03fc215 	stw	zero,-248(fp)
 202de20:	e03fc315 	stw	zero,-244(fp)
 202de24:	e03fc415 	stw	zero,-240(fp)
 202de28:	e03fc515 	stw	zero,-236(fp)
 202de2c:	e03fc615 	stw	zero,-232(fp)
 202de30:	e03fc715 	stw	zero,-228(fp)
 202de34:	e03fc815 	stw	zero,-224(fp)
 202de38:	009410c4 	movi	r2,20547
 202de3c:	e0bfc915 	stw	r2,-220(fp)
 202de40:	00800344 	movi	r2,13
 202de44:	e0bfca05 	stb	r2,-216(fp)
 202de48:	00800084 	movi	r2,2
 202de4c:	e0bfca45 	stb	r2,-215(fp)
 202de50:	00800444 	movi	r2,17
 202de54:	e0bfca85 	stb	r2,-214(fp)
 202de58:	00800384 	movi	r2,14
 202de5c:	e0bfcac5 	stb	r2,-213(fp)
 202de60:	00800344 	movi	r2,13
 202de64:	e0bfcb05 	stb	r2,-212(fp)
 202de68:	00800284 	movi	r2,10
 202de6c:	e0bfcb45 	stb	r2,-211(fp)
 202de70:	008080f4 	movhi	r2,515
 202de74:	1081cd04 	addi	r2,r2,1844
 202de78:	e0bfcc15 	stw	r2,-208(fp)
                      
    /* ------------------------------ */
    /* National PHY on PHYWORKX board */
    /* ------------------------------ */  
    
    alt_tse_phy_profile DP83865 = {"National DP83865",     /* National DP83865                                 */
 202de7c:	e0bfce04 	addi	r2,fp,-200
 202de80:	00c01904 	movi	r3,100
 202de84:	180d883a 	mov	r6,r3
 202de88:	000b883a 	mov	r5,zero
 202de8c:	1009883a 	mov	r4,r2
 202de90:	2005fa00 	call	2005fa0 <memset>
 202de94:	009a5d34 	movhi	r2,26996
 202de98:	10985384 	addi	r2,r2,24910
 202de9c:	e0bfce15 	stw	r2,-200(fp)
 202dea0:	009b1874 	movhi	r2,27745
 202dea4:	109b9bc4 	addi	r2,r2,28271
 202dea8:	e0bfcf15 	stw	r2,-196(fp)
 202deac:	008e1434 	movhi	r2,14416
 202deb0:	10910804 	addi	r2,r2,17440
 202deb4:	e0bfd015 	stw	r2,-192(fp)
 202deb8:	008d4db4 	movhi	r2,13622
 202debc:	108e0cc4 	addi	r2,r2,14387
 202dec0:	e0bfd115 	stw	r2,-188(fp)
 202dec4:	e03fd215 	stw	zero,-184(fp)
 202dec8:	e0bfd304 	addi	r2,fp,-180
 202decc:	00c00f04 	movi	r3,60
 202ded0:	180d883a 	mov	r6,r3
 202ded4:	000b883a 	mov	r5,zero
 202ded8:	1009883a 	mov	r4,r2
 202dedc:	2005fa00 	call	2005fa0 <memset>
 202dee0:	00800234 	movhi	r2,8
 202dee4:	108005c4 	addi	r2,r2,23
 202dee8:	e0bfe215 	stw	r2,-120(fp)
 202deec:	008001c4 	movi	r2,7
 202def0:	e0bfe305 	stb	r2,-116(fp)
 202def4:	00800284 	movi	r2,10
 202def8:	e0bfe345 	stb	r2,-115(fp)
 202defc:	00800444 	movi	r2,17
 202df00:	e0bfe385 	stb	r2,-114(fp)
 202df04:	008000c4 	movi	r2,3
 202df08:	e0bfe3c5 	stb	r2,-113(fp)
 202df0c:	00800044 	movi	r2,1
 202df10:	e0bfe405 	stb	r2,-112(fp)
 202df14:	00800084 	movi	r2,2
 202df18:	e0bfe445 	stb	r2,-111(fp)
                      
    /* -------------------------------------- */
    /* National 10/100 PHY on PHYWORKX board  */
    /* -------------------------------------- */ 
                      
    alt_tse_phy_profile DP83848C = {"National DP83848C",  /* National DP83848C                                          */
 202df1c:	00808134 	movhi	r2,516
 202df20:	1087f804 	addi	r2,r2,8160
 202df24:	e0ffe704 	addi	r3,fp,-100
 202df28:	1009883a 	mov	r4,r2
 202df2c:	00801904 	movi	r2,100
 202df30:	100d883a 	mov	r6,r2
 202df34:	200b883a 	mov	r5,r4
 202df38:	1809883a 	mov	r4,r3
 202df3c:	2005e580 	call	2005e58 <memcpy>
						   0,                              /* No function pointer configure National DP83848C            */
						   &DP83848C_link_status_read      /* Function pointer to read from PHY specific status register */           
                          };
                      
    /* add supported PHY to profile */                          
    alt_tse_phy_add_profile(&MV88E1111);
 202df40:	e13f9c04 	addi	r4,fp,-400
 202df44:	202be680 	call	202be68 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&MV88E1145);
 202df48:	e0bfb504 	addi	r2,fp,-300
 202df4c:	1009883a 	mov	r4,r2
 202df50:	202be680 	call	202be68 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83865);
 202df54:	e0bfce04 	addi	r2,fp,-200
 202df58:	1009883a 	mov	r4,r2
 202df5c:	202be680 	call	202be68 <alt_tse_phy_add_profile>
    alt_tse_phy_add_profile(&DP83848C);
 202df60:	e0bfe704 	addi	r2,fp,-100
 202df64:	1009883a 	mov	r4,r2
 202df68:	202be680 	call	202be68 <alt_tse_phy_add_profile>
    
    
    return phy_profile_count;
 202df6c:	d0a81003 	ldbu	r2,-24512(gp)
 202df70:	10803fcc 	andi	r2,r2,255
}
 202df74:	e037883a 	mov	sp,fp
 202df78:	dfc00117 	ldw	ra,4(sp)
 202df7c:	df000017 	ldw	fp,0(sp)
 202df80:	dec00204 	addi	sp,sp,8
 202df84:	f800283a 	ret

0202df88 <alt_tse_phy_print_profile>:
/* @Function Description: Display PHYs available in profile
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      Number of PHY in profile
 */
alt_32 alt_tse_phy_print_profile() {
 202df88:	defffd04 	addi	sp,sp,-12
 202df8c:	dfc00215 	stw	ra,8(sp)
 202df90:	df000115 	stw	fp,4(sp)
 202df94:	df000104 	addi	fp,sp,4
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
 202df98:	d0a81003 	ldbu	r2,-24512(gp)
 202df9c:	10803fcc 	andi	r2,r2,255
 202dfa0:	100b883a 	mov	r5,r2
 202dfa4:	01008134 	movhi	r4,516
 202dfa8:	21081104 	addi	r4,r4,8260
 202dfac:	202bb200 	call	202bb20 <no_printf>
    
    for(i = 0; i < phy_profile_count; i++)
 202dfb0:	e03fff05 	stb	zero,-4(fp)
 202dfb4:	00006d06 	br	202e16c <alt_tse_phy_print_profile+0x1e4>
    {
        tse_dprintf(6, "Profile No.%2d   :\n", i);
 202dfb8:	e0bfff07 	ldb	r2,-4(fp)
 202dfbc:	100b883a 	mov	r5,r2
 202dfc0:	01008134 	movhi	r4,516
 202dfc4:	21082004 	addi	r4,r4,8320
 202dfc8:	202bb200 	call	202bb20 <no_printf>
        tse_dprintf(6, "PHY Name        : %s\n", pphy_profiles[i]->name);
 202dfcc:	e0ffff07 	ldb	r3,-4(fp)
 202dfd0:	008085f4 	movhi	r2,535
 202dfd4:	10a94c04 	addi	r2,r2,-23248
 202dfd8:	18c7883a 	add	r3,r3,r3
 202dfdc:	18c7883a 	add	r3,r3,r3
 202dfe0:	10c5883a 	add	r2,r2,r3
 202dfe4:	10800017 	ldw	r2,0(r2)
 202dfe8:	100b883a 	mov	r5,r2
 202dfec:	01008134 	movhi	r4,516
 202dff0:	21082504 	addi	r4,r4,8340
 202dff4:	202bb200 	call	202bb20 <no_printf>
   
        tse_dprintf(6, "PHY OUI         : 0x%06x\n", (int)pphy_profiles[i]->oui);
 202dff8:	e0ffff07 	ldb	r3,-4(fp)
 202dffc:	008085f4 	movhi	r2,535
 202e000:	10a94c04 	addi	r2,r2,-23248
 202e004:	18c7883a 	add	r3,r3,r3
 202e008:	18c7883a 	add	r3,r3,r3
 202e00c:	10c5883a 	add	r2,r2,r3
 202e010:	10800017 	ldw	r2,0(r2)
 202e014:	10801417 	ldw	r2,80(r2)
 202e018:	100b883a 	mov	r5,r2
 202e01c:	01008134 	movhi	r4,516
 202e020:	21082b04 	addi	r4,r4,8364
 202e024:	202bb200 	call	202bb20 <no_printf>
        tse_dprintf(6, "PHY Model Num.  : 0x%02x\n", pphy_profiles[i]->model_number);
 202e028:	e0ffff07 	ldb	r3,-4(fp)
 202e02c:	008085f4 	movhi	r2,535
 202e030:	10a94c04 	addi	r2,r2,-23248
 202e034:	18c7883a 	add	r3,r3,r3
 202e038:	18c7883a 	add	r3,r3,r3
 202e03c:	10c5883a 	add	r2,r2,r3
 202e040:	10800017 	ldw	r2,0(r2)
 202e044:	10801503 	ldbu	r2,84(r2)
 202e048:	10803fcc 	andi	r2,r2,255
 202e04c:	100b883a 	mov	r5,r2
 202e050:	01008134 	movhi	r4,516
 202e054:	21083204 	addi	r4,r4,8392
 202e058:	202bb200 	call	202bb20 <no_printf>
        tse_dprintf(6, "PHY Rev. Num.   : 0x%02x\n", pphy_profiles[i]->revision_number);
 202e05c:	e0ffff07 	ldb	r3,-4(fp)
 202e060:	008085f4 	movhi	r2,535
 202e064:	10a94c04 	addi	r2,r2,-23248
 202e068:	18c7883a 	add	r3,r3,r3
 202e06c:	18c7883a 	add	r3,r3,r3
 202e070:	10c5883a 	add	r2,r2,r3
 202e074:	10800017 	ldw	r2,0(r2)
 202e078:	10801543 	ldbu	r2,85(r2)
 202e07c:	10803fcc 	andi	r2,r2,255
 202e080:	100b883a 	mov	r5,r2
 202e084:	01008134 	movhi	r4,516
 202e088:	21083904 	addi	r4,r4,8420
 202e08c:	202bb200 	call	202bb20 <no_printf>
        
        tse_dprintf(6, "Status Register : 0x%02x\n", pphy_profiles[i]->status_reg_location); 
 202e090:	e0ffff07 	ldb	r3,-4(fp)
 202e094:	008085f4 	movhi	r2,535
 202e098:	10a94c04 	addi	r2,r2,-23248
 202e09c:	18c7883a 	add	r3,r3,r3
 202e0a0:	18c7883a 	add	r3,r3,r3
 202e0a4:	10c5883a 	add	r2,r2,r3
 202e0a8:	10800017 	ldw	r2,0(r2)
 202e0ac:	10801583 	ldbu	r2,86(r2)
 202e0b0:	10803fcc 	andi	r2,r2,255
 202e0b4:	100b883a 	mov	r5,r2
 202e0b8:	01008134 	movhi	r4,516
 202e0bc:	21084004 	addi	r4,r4,8448
 202e0c0:	202bb200 	call	202bb20 <no_printf>
        
        tse_dprintf(6, "Speed Bit       : %d\n", pphy_profiles[i]->speed_lsb_location);
 202e0c4:	e0ffff07 	ldb	r3,-4(fp)
 202e0c8:	008085f4 	movhi	r2,535
 202e0cc:	10a94c04 	addi	r2,r2,-23248
 202e0d0:	18c7883a 	add	r3,r3,r3
 202e0d4:	18c7883a 	add	r3,r3,r3
 202e0d8:	10c5883a 	add	r2,r2,r3
 202e0dc:	10800017 	ldw	r2,0(r2)
 202e0e0:	108015c3 	ldbu	r2,87(r2)
 202e0e4:	10803fcc 	andi	r2,r2,255
 202e0e8:	100b883a 	mov	r5,r2
 202e0ec:	01008134 	movhi	r4,516
 202e0f0:	21084704 	addi	r4,r4,8476
 202e0f4:	202bb200 	call	202bb20 <no_printf>
        
        tse_dprintf(6, "Duplex Bit      : %d\n", pphy_profiles[i]->duplex_bit_location);
 202e0f8:	e0ffff07 	ldb	r3,-4(fp)
 202e0fc:	008085f4 	movhi	r2,535
 202e100:	10a94c04 	addi	r2,r2,-23248
 202e104:	18c7883a 	add	r3,r3,r3
 202e108:	18c7883a 	add	r3,r3,r3
 202e10c:	10c5883a 	add	r2,r2,r3
 202e110:	10800017 	ldw	r2,0(r2)
 202e114:	10801603 	ldbu	r2,88(r2)
 202e118:	10803fcc 	andi	r2,r2,255
 202e11c:	100b883a 	mov	r5,r2
 202e120:	01008134 	movhi	r4,516
 202e124:	21084d04 	addi	r4,r4,8500
 202e128:	202bb200 	call	202bb20 <no_printf>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 202e12c:	e0ffff07 	ldb	r3,-4(fp)
 202e130:	008085f4 	movhi	r2,535
 202e134:	10a94c04 	addi	r2,r2,-23248
 202e138:	18c7883a 	add	r3,r3,r3
 202e13c:	18c7883a 	add	r3,r3,r3
 202e140:	10c5883a 	add	r2,r2,r3
 202e144:	10800017 	ldw	r2,0(r2)
 202e148:	10801643 	ldbu	r2,89(r2)
 202e14c:	10803fcc 	andi	r2,r2,255
 202e150:	100b883a 	mov	r5,r2
 202e154:	01008134 	movhi	r4,516
 202e158:	21085304 	addi	r4,r4,8524
 202e15c:	202bb200 	call	202bb20 <no_printf>
   
	alt_8 i;
    /* display PHY in profile */
    tse_dprintf(6, "List of PHY profiles supported (Total profiles = %d)...\n", phy_profile_count);
    
    for(i = 0; i < phy_profile_count; i++)
 202e160:	e0bfff03 	ldbu	r2,-4(fp)
 202e164:	10800044 	addi	r2,r2,1
 202e168:	e0bfff05 	stb	r2,-4(fp)
 202e16c:	e0ffff07 	ldb	r3,-4(fp)
 202e170:	d0a81003 	ldbu	r2,-24512(gp)
 202e174:	10803fcc 	andi	r2,r2,255
 202e178:	18bf8f16 	blt	r3,r2,202dfb8 <__alt_mem_mem_0+0xfd00dfb8>
        
        tse_dprintf(6, "Link Bit        : %d\n\n", pphy_profiles[i]->link_bit_location);
 
    }
    
    return phy_profile_count;
 202e17c:	d0a81003 	ldbu	r2,-24512(gp)
 202e180:	10803fcc 	andi	r2,r2,255
}
 202e184:	e037883a 	mov	sp,fp
 202e188:	dfc00117 	ldw	ra,4(sp)
 202e18c:	df000017 	ldw	fp,0(sp)
 202e190:	dec00204 	addi	sp,sp,8
 202e194:	f800283a 	ret

0202e198 <alt_tse_mac_group_init>:
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      return SUCCESS
 *              return ALTERA_TSE_SYSTEM_DEF_ERROR if alt_tse_system_info structure definition error
 */
alt_32 alt_tse_mac_group_init() {
 202e198:	defffa04 	addi	sp,sp,-24
 202e19c:	dfc00515 	stw	ra,20(sp)
 202e1a0:	df000415 	stw	fp,16(sp)
 202e1a4:	df000404 	addi	fp,sp,16
    
	alt_8 i;
	alt_8 j;
    
    alt_tse_mac_group *pmac_group = 0;
 202e1a8:	e03ffd15 	stw	zero,-12(fp)
    alt_tse_mac_info *pmac_info = 0;
 202e1ac:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_system_info *psys = 0;
 202e1b0:	e03fff15 	stw	zero,-4(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
 202e1b4:	d0281045 	stb	zero,-24511(gp)
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 202e1b8:	e03ffc05 	stb	zero,-16(fp)
 202e1bc:	00019506 	br	202e814 <alt_tse_mac_group_init+0x67c>
        psys = &tse_mac_device[i];
 202e1c0:	e0bffc07 	ldb	r2,-16(fp)
 202e1c4:	10c01224 	muli	r3,r2,72
 202e1c8:	00808134 	movhi	r2,516
 202e1cc:	10955704 	addi	r2,r2,21852
 202e1d0:	1885883a 	add	r2,r3,r2
 202e1d4:	e0bfff15 	stw	r2,-4(fp)

        if((psys->tse_sgdma_tx != 0) && (psys->tse_sgdma_rx != 0)) {    	
 202e1d8:	e0bfff17 	ldw	r2,-4(fp)
 202e1dc:	10800517 	ldw	r2,20(r2)
 202e1e0:	10018926 	beq	r2,zero,202e808 <alt_tse_mac_group_init+0x670>
 202e1e4:	e0bfff17 	ldw	r2,-4(fp)
 202e1e8:	10800617 	ldw	r2,24(r2)
 202e1ec:	10018626 	beq	r2,zero,202e808 <alt_tse_mac_group_init+0x670>
            tse_dprintf(5, "INFO    : TSE MAC %d found at address 0x%08x\n", mac_group_count, (int) psys->tse_mac_base);
 202e1f0:	d0a81043 	ldbu	r2,-24511(gp)
 202e1f4:	10c03fcc 	andi	r3,r2,255
 202e1f8:	e0bfff17 	ldw	r2,-4(fp)
 202e1fc:	10800017 	ldw	r2,0(r2)
 202e200:	100d883a 	mov	r6,r2
 202e204:	180b883a 	mov	r5,r3
 202e208:	01008134 	movhi	r4,516
 202e20c:	21085904 	addi	r4,r4,8548
 202e210:	20009e40 	call	20009e4 <printf>
            
            /* Allocate memory for the structure */
            pmac_group = (alt_tse_mac_group *) malloc(sizeof(alt_tse_mac_group));
 202e214:	01000904 	movi	r4,36
 202e218:	203ca940 	call	203ca94 <malloc>
 202e21c:	e0bffd15 	stw	r2,-12(fp)
            if(!pmac_group) {
 202e220:	e0bffd17 	ldw	r2,-12(fp)
 202e224:	1000081e 	bne	r2,zero,202e248 <alt_tse_mac_group_init+0xb0>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]\n", mac_group_count);
 202e228:	d0a81043 	ldbu	r2,-24511(gp)
 202e22c:	10803fcc 	andi	r2,r2,255
 202e230:	100b883a 	mov	r5,r2
 202e234:	01008134 	movhi	r4,516
 202e238:	21086504 	addi	r4,r4,8596
 202e23c:	20009e40 	call	20009e4 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 202e240:	00bfffc4 	movi	r2,-1
 202e244:	00017806 	br	202e828 <alt_tse_mac_group_init+0x690>
            }
           
            /* Non-multi-channel MAC considered as 1 channel */
            if(psys->tse_multichannel_mac) {
 202e248:	e0bfff17 	ldw	r2,-4(fp)
 202e24c:	108002c3 	ldbu	r2,11(r2)
 202e250:	10803fcc 	andi	r2,r2,255
 202e254:	10001226 	beq	r2,zero,202e2a0 <alt_tse_mac_group_init+0x108>
                pmac_group->channel = psys->tse_num_of_channel;
 202e258:	e0bfff17 	ldw	r2,-4(fp)
 202e25c:	10c00303 	ldbu	r3,12(r2)
 202e260:	e0bffd17 	ldw	r2,-12(fp)
 202e264:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = Yes\n");
 202e268:	01008134 	movhi	r4,516
 202e26c:	21087304 	addi	r4,r4,8652
 202e270:	202bb200 	call	202bb20 <no_printf>
                tse_dprintf(6, "INFO    : Number of channel        = %d\n", pmac_group->channel);
 202e274:	e0bffd17 	ldw	r2,-12(fp)
 202e278:	10800003 	ldbu	r2,0(r2)
 202e27c:	10803fcc 	andi	r2,r2,255
 202e280:	100b883a 	mov	r5,r2
 202e284:	01008134 	movhi	r4,516
 202e288:	21087e04 	addi	r4,r4,8696
 202e28c:	202bb200 	call	202bb20 <no_printf>
            	tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 202e290:	01008134 	movhi	r4,516
 202e294:	21088904 	addi	r4,r4,8740
 202e298:	202bb200 	call	202bb20 <no_printf>
 202e29c:	00001f06 	br	202e31c <alt_tse_mac_group_init+0x184>
            }
            else if(psys->tse_mdio_shared) {
 202e2a0:	e0bfff17 	ldw	r2,-4(fp)
 202e2a4:	10800343 	ldbu	r2,13(r2)
 202e2a8:	10803fcc 	andi	r2,r2,255
 202e2ac:	10001226 	beq	r2,zero,202e2f8 <alt_tse_mac_group_init+0x160>
                pmac_group->channel = psys->tse_number_of_mac_mdio_shared;
 202e2b0:	e0bfff17 	ldw	r2,-4(fp)
 202e2b4:	10c00383 	ldbu	r3,14(r2)
 202e2b8:	e0bffd17 	ldw	r2,-12(fp)
 202e2bc:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 202e2c0:	01008134 	movhi	r4,516
 202e2c4:	21089404 	addi	r4,r4,8784
 202e2c8:	202bb200 	call	202bb20 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = Yes\n");
 202e2cc:	01008134 	movhi	r4,516
 202e2d0:	21088904 	addi	r4,r4,8740
 202e2d4:	202bb200 	call	202bb20 <no_printf>
                tse_dprintf(6, "INFO    : Number of MAC Share MDIO = %d\n", pmac_group->channel);
 202e2d8:	e0bffd17 	ldw	r2,-12(fp)
 202e2dc:	10800003 	ldbu	r2,0(r2)
 202e2e0:	10803fcc 	andi	r2,r2,255
 202e2e4:	100b883a 	mov	r5,r2
 202e2e8:	01008134 	movhi	r4,516
 202e2ec:	21089f04 	addi	r4,r4,8828
 202e2f0:	202bb200 	call	202bb20 <no_printf>
 202e2f4:	00000906 	br	202e31c <alt_tse_mac_group_init+0x184>
            }
            else {
                pmac_group->channel = 1;
 202e2f8:	e0bffd17 	ldw	r2,-12(fp)
 202e2fc:	00c00044 	movi	r3,1
 202e300:	10c00005 	stb	r3,0(r2)
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
 202e304:	01008134 	movhi	r4,516
 202e308:	21089404 	addi	r4,r4,8784
 202e30c:	202bb200 	call	202bb20 <no_printf>
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
 202e310:	01008134 	movhi	r4,516
 202e314:	2108aa04 	addi	r4,r4,8872
 202e318:	202bb200 	call	202bb20 <no_printf>
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 202e31c:	e03ffc45 	stb	zero,-15(fp)
 202e320:	00012206 	br	202e7ac <alt_tse_mac_group_init+0x614>
                /* Allocate memory for the structure */
                pmac_info = (alt_tse_mac_info *) malloc(sizeof(alt_tse_mac_info));
 202e324:	01000404 	movi	r4,16
 202e328:	203ca940 	call	203ca94 <malloc>
 202e32c:	e0bffe15 	stw	r2,-8(fp)
                if(!pmac_info) {
 202e330:	e0bffe17 	ldw	r2,-8(fp)
 202e334:	10000a1e 	bne	r2,zero,202e360 <alt_tse_mac_group_init+0x1c8>
                    tse_dprintf(1, "ERROR   : Unable to allocate memory for MAC Group[%d]->pmac_info[%d]\n", mac_group_count, j);
 202e338:	d0a81043 	ldbu	r2,-24511(gp)
 202e33c:	10803fcc 	andi	r2,r2,255
 202e340:	e0fffc47 	ldb	r3,-15(fp)
 202e344:	180d883a 	mov	r6,r3
 202e348:	100b883a 	mov	r5,r2
 202e34c:	01008134 	movhi	r4,516
 202e350:	2108b504 	addi	r4,r4,8916
 202e354:	20009e40 	call	20009e4 <printf>
                    return ALTERA_TSE_MALLOC_FAILED;
 202e358:	00bfffc4 	movi	r2,-1
 202e35c:	00013206 	br	202e828 <alt_tse_mac_group_init+0x690>
                }
                
                pmac_info->pmac_group = pmac_group;
 202e360:	e0bffe17 	ldw	r2,-8(fp)
 202e364:	e0fffd17 	ldw	r3,-12(fp)
 202e368:	10c00315 	stw	r3,12(r2)
                
                pmac_info->pphy_info = 0;
 202e36c:	e0bffe17 	ldw	r2,-8(fp)
 202e370:	10000115 	stw	zero,4(r2)
                
                pmac_info->psys_info = &tse_mac_device[i + j];
 202e374:	e0fffc07 	ldb	r3,-16(fp)
 202e378:	e0bffc47 	ldb	r2,-15(fp)
 202e37c:	1885883a 	add	r2,r3,r2
 202e380:	10c01224 	muli	r3,r2,72
 202e384:	00808134 	movhi	r2,516
 202e388:	10955704 	addi	r2,r2,21852
 202e38c:	1887883a 	add	r3,r3,r2
 202e390:	e0bffe17 	ldw	r2,-8(fp)
 202e394:	10c00215 	stw	r3,8(r2)
                
                /* check to make sure the alt_tse_system_info defined correctly or has been defined */
                if((pmac_info->psys_info->tse_sgdma_tx == 0) || (pmac_info->psys_info->tse_sgdma_rx == 0)){                	
 202e398:	e0bffe17 	ldw	r2,-8(fp)
 202e39c:	10800217 	ldw	r2,8(r2)
 202e3a0:	10800517 	ldw	r2,20(r2)
 202e3a4:	10000426 	beq	r2,zero,202e3b8 <alt_tse_mac_group_init+0x220>
 202e3a8:	e0bffe17 	ldw	r2,-8(fp)
 202e3ac:	10800217 	ldw	r2,8(r2)
 202e3b0:	10800617 	ldw	r2,24(r2)
 202e3b4:	1000091e 	bne	r2,zero,202e3dc <alt_tse_mac_group_init+0x244>
                    tse_dprintf(2, "ERROR   : tse_mac_device[%d] does not defined correctly!\n", i + j);
 202e3b8:	e0fffc07 	ldb	r3,-16(fp)
 202e3bc:	e0bffc47 	ldb	r2,-15(fp)
 202e3c0:	1885883a 	add	r2,r3,r2
 202e3c4:	100b883a 	mov	r5,r2
 202e3c8:	01008134 	movhi	r4,516
 202e3cc:	2108c704 	addi	r4,r4,8988
 202e3d0:	20009e40 	call	20009e4 <printf>
                    return ALTERA_TSE_SYSTEM_DEF_ERROR;
 202e3d4:	00bfffc4 	movi	r2,-1
 202e3d8:	00011306 	br	202e828 <alt_tse_mac_group_init+0x690>
                }
                
                /* MAC type detection */
                if(pmac_info->psys_info->tse_en_maclite) {
 202e3dc:	e0bffe17 	ldw	r2,-8(fp)
 202e3e0:	10800217 	ldw	r2,8(r2)
 202e3e4:	10800243 	ldbu	r2,9(r2)
 202e3e8:	10803fcc 	andi	r2,r2,255
 202e3ec:	10000d26 	beq	r2,zero,202e424 <alt_tse_mac_group_init+0x28c>
                    if(pmac_info->psys_info->tse_maclite_gige) {
 202e3f0:	e0bffe17 	ldw	r2,-8(fp)
 202e3f4:	10800217 	ldw	r2,8(r2)
 202e3f8:	10800283 	ldbu	r2,10(r2)
 202e3fc:	10803fcc 	andi	r2,r2,255
 202e400:	10000426 	beq	r2,zero,202e414 <alt_tse_mac_group_init+0x27c>
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_1000;
 202e404:	e0bffe17 	ldw	r2,-8(fp)
 202e408:	00c00084 	movi	r3,2
 202e40c:	10c00005 	stb	r3,0(r2)
 202e410:	00000606 	br	202e42c <alt_tse_mac_group_init+0x294>
                    }
                    else {
                        pmac_info->mac_type = ALTERA_TSE_MACLITE_10_100;
 202e414:	e0bffe17 	ldw	r2,-8(fp)
 202e418:	00c00044 	movi	r3,1
 202e41c:	10c00005 	stb	r3,0(r2)
 202e420:	00000206 	br	202e42c <alt_tse_mac_group_init+0x294>
                    }
                }
                else {
                    pmac_info->mac_type = ALTERA_TSE_FULL_MAC;                    
 202e424:	e0bffe17 	ldw	r2,-8(fp)
 202e428:	10000005 	stb	zero,0(r2)
                }
                
                if((pmac_info->psys_info->tse_mdio_shared) && (!pmac_info->psys_info->tse_multichannel_mac)){
 202e42c:	e0bffe17 	ldw	r2,-8(fp)
 202e430:	10800217 	ldw	r2,8(r2)
 202e434:	10800343 	ldbu	r2,13(r2)
 202e438:	10803fcc 	andi	r2,r2,255
 202e43c:	10006626 	beq	r2,zero,202e5d8 <alt_tse_mac_group_init+0x440>
 202e440:	e0bffe17 	ldw	r2,-8(fp)
 202e444:	10800217 	ldw	r2,8(r2)
 202e448:	108002c3 	ldbu	r2,11(r2)
 202e44c:	10803fcc 	andi	r2,r2,255
 202e450:	1000611e 	bne	r2,zero,202e5d8 <alt_tse_mac_group_init+0x440>
                	tse_dprintf(6, "INFO    : MAC %2d Address           = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 202e454:	e0fffc47 	ldb	r3,-15(fp)
 202e458:	e0bffe17 	ldw	r2,-8(fp)
 202e45c:	10800217 	ldw	r2,8(r2)
 202e460:	10800017 	ldw	r2,0(r2)
 202e464:	100d883a 	mov	r6,r2
 202e468:	180b883a 	mov	r5,r3
 202e46c:	01008134 	movhi	r4,516
 202e470:	2108d604 	addi	r4,r4,9048
 202e474:	202bb200 	call	202bb20 <no_printf>
                    tse_dprintf(6, "INFO    : MAC %2d Device            = tse_mac_device[%d]\n", j, i + j);
 202e478:	e13ffc47 	ldb	r4,-15(fp)
 202e47c:	e0fffc07 	ldb	r3,-16(fp)
 202e480:	e0bffc47 	ldb	r2,-15(fp)
 202e484:	1885883a 	add	r2,r3,r2
 202e488:	100d883a 	mov	r6,r2
 202e48c:	200b883a 	mov	r5,r4
 202e490:	01008134 	movhi	r4,516
 202e494:	2108e204 	addi	r4,r4,9096
 202e498:	202bb200 	call	202bb20 <no_printf>
                    
                	switch(pmac_info->mac_type) {
 202e49c:	e0bffe17 	ldw	r2,-8(fp)
 202e4a0:	10800003 	ldbu	r2,0(r2)
 202e4a4:	10803fcc 	andi	r2,r2,255
 202e4a8:	10c00060 	cmpeqi	r3,r2,1
 202e4ac:	18000c1e 	bne	r3,zero,202e4e0 <alt_tse_mac_group_init+0x348>
 202e4b0:	10c000a0 	cmpeqi	r3,r2,2
 202e4b4:	1800021e 	bne	r3,zero,202e4c0 <alt_tse_mac_group_init+0x328>
 202e4b8:	10001126 	beq	r2,zero,202e500 <alt_tse_mac_group_init+0x368>
 202e4bc:	00001806 	br	202e520 <alt_tse_mac_group_init+0x388>
                        case ALTERA_TSE_MACLITE_1000:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "1000 Mbps Small MAC");
 202e4c0:	e0bffc47 	ldb	r2,-15(fp)
 202e4c4:	01808134 	movhi	r6,516
 202e4c8:	3188f104 	addi	r6,r6,9156
 202e4cc:	100b883a 	mov	r5,r2
 202e4d0:	01008134 	movhi	r4,516
 202e4d4:	2108f604 	addi	r4,r4,9176
 202e4d8:	202bb200 	call	202bb20 <no_printf>
                            break;
 202e4dc:	00001806 	br	202e540 <alt_tse_mac_group_init+0x3a8>
                        case ALTERA_TSE_MACLITE_10_100:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100 Mbps Small MAC");
 202e4e0:	e0bffc47 	ldb	r2,-15(fp)
 202e4e4:	01808134 	movhi	r6,516
 202e4e8:	31890104 	addi	r6,r6,9220
 202e4ec:	100b883a 	mov	r5,r2
 202e4f0:	01008134 	movhi	r4,516
 202e4f4:	2108f604 	addi	r4,r4,9176
 202e4f8:	202bb200 	call	202bb20 <no_printf>
                            break;
 202e4fc:	00001006 	br	202e540 <alt_tse_mac_group_init+0x3a8>
                        case ALTERA_TSE_FULL_MAC:
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "10/100/1000 Ethernet MAC");
 202e500:	e0bffc47 	ldb	r2,-15(fp)
 202e504:	01808134 	movhi	r6,516
 202e508:	31890704 	addi	r6,r6,9244
 202e50c:	100b883a 	mov	r5,r2
 202e510:	01008134 	movhi	r4,516
 202e514:	2108f604 	addi	r4,r4,9176
 202e518:	202bb200 	call	202bb20 <no_printf>
                            break;
 202e51c:	00000806 	br	202e540 <alt_tse_mac_group_init+0x3a8>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
 202e520:	e0bffc47 	ldb	r2,-15(fp)
 202e524:	01808134 	movhi	r6,516
 202e528:	31873f04 	addi	r6,r6,7420
 202e52c:	100b883a 	mov	r5,r2
 202e530:	01008134 	movhi	r4,516
 202e534:	2108f604 	addi	r4,r4,9176
 202e538:	202bb200 	call	202bb20 <no_printf>
                            break;
 202e53c:	0001883a 	nop
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
 202e540:	e0bffe17 	ldw	r2,-8(fp)
 202e544:	10800217 	ldw	r2,8(r2)
 202e548:	108003c3 	ldbu	r2,15(r2)
 202e54c:	10803fcc 	andi	r2,r2,255
 202e550:	10008b26 	beq	r2,zero,202e780 <alt_tse_mac_group_init+0x5e8>
                        tse_dprintf(6, "INFO    : PCS %2d Enable            = %s\n", j, pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 202e554:	e0fffc47 	ldb	r3,-15(fp)
 202e558:	e0bffe17 	ldw	r2,-8(fp)
 202e55c:	10800217 	ldw	r2,8(r2)
 202e560:	108003c3 	ldbu	r2,15(r2)
 202e564:	10803fcc 	andi	r2,r2,255
 202e568:	10000326 	beq	r2,zero,202e578 <alt_tse_mac_group_init+0x3e0>
 202e56c:	00808134 	movhi	r2,516
 202e570:	10890e04 	addi	r2,r2,9272
 202e574:	00000206 	br	202e580 <alt_tse_mac_group_init+0x3e8>
 202e578:	00808134 	movhi	r2,516
 202e57c:	10890f04 	addi	r2,r2,9276
 202e580:	100d883a 	mov	r6,r2
 202e584:	180b883a 	mov	r5,r3
 202e588:	01008134 	movhi	r4,516
 202e58c:	21091004 	addi	r4,r4,9280
 202e590:	202bb200 	call	202bb20 <no_printf>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
 202e594:	e0fffc47 	ldb	r3,-15(fp)
 202e598:	e0bffe17 	ldw	r2,-8(fp)
 202e59c:	10800217 	ldw	r2,8(r2)
 202e5a0:	10800403 	ldbu	r2,16(r2)
 202e5a4:	10803fcc 	andi	r2,r2,255
 202e5a8:	10000326 	beq	r2,zero,202e5b8 <alt_tse_mac_group_init+0x420>
 202e5ac:	00808134 	movhi	r2,516
 202e5b0:	10890e04 	addi	r2,r2,9272
 202e5b4:	00000206 	br	202e5c0 <alt_tse_mac_group_init+0x428>
 202e5b8:	00808134 	movhi	r2,516
 202e5bc:	10890f04 	addi	r2,r2,9276
 202e5c0:	100d883a 	mov	r6,r2
 202e5c4:	180b883a 	mov	r5,r3
 202e5c8:	01008134 	movhi	r4,516
 202e5cc:	21091b04 	addi	r4,r4,9324
 202e5d0:	202bb200 	call	202bb20 <no_printf>
                        default :
                            tse_dprintf(6, "INFO    : MAC %2d Type              = %s\n", j, "Unknown");
                            break;
                    }
                    
                    if(pmac_info->psys_info->tse_pcs_ena) {
 202e5d4:	00006a06 	br	202e780 <alt_tse_mac_group_init+0x5e8>
                        tse_dprintf(6, "INFO    : PCS %2d SGMII Enable      = %s\n", j, pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");                        
                    }
                }
                else {
                	/* display only once for all MAC, except shared MDIO MACs */
	                if(j == 0) {
 202e5d8:	e0bffc47 	ldb	r2,-15(fp)
 202e5dc:	1000421e 	bne	r2,zero,202e6e8 <alt_tse_mac_group_init+0x550>
	                    switch(pmac_info->mac_type) {
 202e5e0:	e0bffe17 	ldw	r2,-8(fp)
 202e5e4:	10800003 	ldbu	r2,0(r2)
 202e5e8:	10803fcc 	andi	r2,r2,255
 202e5ec:	10c00060 	cmpeqi	r3,r2,1
 202e5f0:	18000a1e 	bne	r3,zero,202e61c <alt_tse_mac_group_init+0x484>
 202e5f4:	10c000a0 	cmpeqi	r3,r2,2
 202e5f8:	1800021e 	bne	r3,zero,202e604 <alt_tse_mac_group_init+0x46c>
 202e5fc:	10000d26 	beq	r2,zero,202e634 <alt_tse_mac_group_init+0x49c>
 202e600:	00001206 	br	202e64c <alt_tse_mac_group_init+0x4b4>
	                        case ALTERA_TSE_MACLITE_1000:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "1000 Mbps Small MAC");
 202e604:	01408134 	movhi	r5,516
 202e608:	2948f104 	addi	r5,r5,9156
 202e60c:	01008134 	movhi	r4,516
 202e610:	21092604 	addi	r4,r4,9368
 202e614:	202bb200 	call	202bb20 <no_printf>
	                            break;
 202e618:	00001206 	br	202e664 <alt_tse_mac_group_init+0x4cc>
	                        case ALTERA_TSE_MACLITE_10_100:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100 Mbps Small MAC");
 202e61c:	01408134 	movhi	r5,516
 202e620:	29490104 	addi	r5,r5,9220
 202e624:	01008134 	movhi	r4,516
 202e628:	21092604 	addi	r4,r4,9368
 202e62c:	202bb200 	call	202bb20 <no_printf>
	                            break;
 202e630:	00000c06 	br	202e664 <alt_tse_mac_group_init+0x4cc>
	                        case ALTERA_TSE_FULL_MAC:
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "10/100/1000 Ethernet MAC");
 202e634:	01408134 	movhi	r5,516
 202e638:	29490704 	addi	r5,r5,9244
 202e63c:	01008134 	movhi	r4,516
 202e640:	21092604 	addi	r4,r4,9368
 202e644:	202bb200 	call	202bb20 <no_printf>
	                            break;
 202e648:	00000606 	br	202e664 <alt_tse_mac_group_init+0x4cc>
	                        default :
	                            tse_dprintf(6, "INFO    : MAC Type                 = %s\n", "Unknown");
 202e64c:	01408134 	movhi	r5,516
 202e650:	29473f04 	addi	r5,r5,7420
 202e654:	01008134 	movhi	r4,516
 202e658:	21092604 	addi	r4,r4,9368
 202e65c:	202bb200 	call	202bb20 <no_printf>
                                    break;
 202e660:	0001883a 	nop
			    }
	                    
	                    if(pmac_info->psys_info->tse_pcs_ena) {
 202e664:	e0bffe17 	ldw	r2,-8(fp)
 202e668:	10800217 	ldw	r2,8(r2)
 202e66c:	108003c3 	ldbu	r2,15(r2)
 202e670:	10803fcc 	andi	r2,r2,255
 202e674:	10001c26 	beq	r2,zero,202e6e8 <alt_tse_mac_group_init+0x550>
	                        tse_dprintf(6, "INFO    : PCS Enable               = %s\n", pmac_info->psys_info->tse_pcs_ena ? "Yes" : "No");
 202e678:	e0bffe17 	ldw	r2,-8(fp)
 202e67c:	10800217 	ldw	r2,8(r2)
 202e680:	108003c3 	ldbu	r2,15(r2)
 202e684:	10803fcc 	andi	r2,r2,255
 202e688:	10000326 	beq	r2,zero,202e698 <alt_tse_mac_group_init+0x500>
 202e68c:	00808134 	movhi	r2,516
 202e690:	10890e04 	addi	r2,r2,9272
 202e694:	00000206 	br	202e6a0 <alt_tse_mac_group_init+0x508>
 202e698:	00808134 	movhi	r2,516
 202e69c:	10890f04 	addi	r2,r2,9276
 202e6a0:	100b883a 	mov	r5,r2
 202e6a4:	01008134 	movhi	r4,516
 202e6a8:	21093104 	addi	r4,r4,9412
 202e6ac:	202bb200 	call	202bb20 <no_printf>
	                        tse_dprintf(6, "INFO    : PCS SGMII Enable         = %s\n", pmac_info->psys_info->tse_pcs_sgmii ? "Yes" : "No");	                        
 202e6b0:	e0bffe17 	ldw	r2,-8(fp)
 202e6b4:	10800217 	ldw	r2,8(r2)
 202e6b8:	10800403 	ldbu	r2,16(r2)
 202e6bc:	10803fcc 	andi	r2,r2,255
 202e6c0:	10000326 	beq	r2,zero,202e6d0 <alt_tse_mac_group_init+0x538>
 202e6c4:	00808134 	movhi	r2,516
 202e6c8:	10890e04 	addi	r2,r2,9272
 202e6cc:	00000206 	br	202e6d8 <alt_tse_mac_group_init+0x540>
 202e6d0:	00808134 	movhi	r2,516
 202e6d4:	10890f04 	addi	r2,r2,9276
 202e6d8:	100b883a 	mov	r5,r2
 202e6dc:	01008134 	movhi	r4,516
 202e6e0:	21093c04 	addi	r4,r4,9456
 202e6e4:	202bb200 	call	202bb20 <no_printf>
	                    }
	                }
	                
                	if(pmac_info->psys_info->tse_multichannel_mac) {
 202e6e8:	e0bffe17 	ldw	r2,-8(fp)
 202e6ec:	10800217 	ldw	r2,8(r2)
 202e6f0:	108002c3 	ldbu	r2,11(r2)
 202e6f4:	10803fcc 	andi	r2,r2,255
 202e6f8:	10001326 	beq	r2,zero,202e748 <alt_tse_mac_group_init+0x5b0>
                		tse_dprintf(6, "INFO    : Channel %2d Address       = 0x%08x\n", j, (int) pmac_info->psys_info->tse_mac_base);
 202e6fc:	e0fffc47 	ldb	r3,-15(fp)
 202e700:	e0bffe17 	ldw	r2,-8(fp)
 202e704:	10800217 	ldw	r2,8(r2)
 202e708:	10800017 	ldw	r2,0(r2)
 202e70c:	100d883a 	mov	r6,r2
 202e710:	180b883a 	mov	r5,r3
 202e714:	01008134 	movhi	r4,516
 202e718:	21094704 	addi	r4,r4,9500
 202e71c:	202bb200 	call	202bb20 <no_printf>
	                    tse_dprintf(6, "INFO    : Channel %2d Device        = tse_mac_device[%d]\n", j, i + j);
 202e720:	e13ffc47 	ldb	r4,-15(fp)
 202e724:	e0fffc07 	ldb	r3,-16(fp)
 202e728:	e0bffc47 	ldb	r2,-15(fp)
 202e72c:	1885883a 	add	r2,r3,r2
 202e730:	100d883a 	mov	r6,r2
 202e734:	200b883a 	mov	r5,r4
 202e738:	01008134 	movhi	r4,516
 202e73c:	21095304 	addi	r4,r4,9548
 202e740:	202bb200 	call	202bb20 <no_printf>
 202e744:	00000e06 	br	202e780 <alt_tse_mac_group_init+0x5e8>
	            	}                
	                else {
	                    tse_dprintf(6, "INFO    : MAC Address              = 0x%08x\n", (int) pmac_info->psys_info->tse_mac_base);
 202e748:	e0bffe17 	ldw	r2,-8(fp)
 202e74c:	10800217 	ldw	r2,8(r2)
 202e750:	10800017 	ldw	r2,0(r2)
 202e754:	100b883a 	mov	r5,r2
 202e758:	01008134 	movhi	r4,516
 202e75c:	21096204 	addi	r4,r4,9608
 202e760:	202bb200 	call	202bb20 <no_printf>
	                    tse_dprintf(6, "INFO    : MAC Device               = tse_mac_device[%d]\n", i + j);
 202e764:	e0fffc07 	ldb	r3,-16(fp)
 202e768:	e0bffc47 	ldb	r2,-15(fp)
 202e76c:	1885883a 	add	r2,r3,r2
 202e770:	100b883a 	mov	r5,r2
 202e774:	01008134 	movhi	r4,516
 202e778:	21096e04 	addi	r4,r4,9656
 202e77c:	202bb200 	call	202bb20 <no_printf>
	                }
                }
                
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
 202e780:	e0bffc47 	ldb	r2,-15(fp)
 202e784:	e0fffd17 	ldw	r3,-12(fp)
 202e788:	10800044 	addi	r2,r2,1
 202e78c:	1085883a 	add	r2,r2,r2
 202e790:	1085883a 	add	r2,r2,r2
 202e794:	1885883a 	add	r2,r3,r2
 202e798:	e0fffe17 	ldw	r3,-8(fp)
 202e79c:	10c00015 	stw	r3,0(r2)
                pmac_group->channel = 1;
                tse_dprintf(6, "INFO    : Multi Channel            = No\n");
                tse_dprintf(6, "INFO    : MDIO Shared              = No\n");
            }
            
            for(j = 0; j < pmac_group->channel; j++) {
 202e7a0:	e0bffc43 	ldbu	r2,-15(fp)
 202e7a4:	10800044 	addi	r2,r2,1
 202e7a8:	e0bffc45 	stb	r2,-15(fp)
 202e7ac:	e0fffc47 	ldb	r3,-15(fp)
 202e7b0:	e0bffd17 	ldw	r2,-12(fp)
 202e7b4:	10800003 	ldbu	r2,0(r2)
 202e7b8:	10803fcc 	andi	r2,r2,255
 202e7bc:	18bed916 	blt	r3,r2,202e324 <__alt_mem_mem_0+0xfd00e324>
                /* store the pointer in MAC group variable for the detected channel */
                pmac_group->pmac_info[j] = pmac_info;
            }
            
            /* store the pointer in global variable */
            pmac_groups[mac_group_count] = pmac_group;
 202e7c0:	d0a81043 	ldbu	r2,-24511(gp)
 202e7c4:	10c03fcc 	andi	r3,r2,255
 202e7c8:	008085f4 	movhi	r2,535
 202e7cc:	10a94404 	addi	r2,r2,-23280
 202e7d0:	18c7883a 	add	r3,r3,r3
 202e7d4:	18c7883a 	add	r3,r3,r3
 202e7d8:	10c5883a 	add	r2,r2,r3
 202e7dc:	e0fffd17 	ldw	r3,-12(fp)
 202e7e0:	10c00015 	stw	r3,0(r2)
            
            mac_group_count++;
 202e7e4:	d0a81043 	ldbu	r2,-24511(gp)
 202e7e8:	10800044 	addi	r2,r2,1
 202e7ec:	d0a81045 	stb	r2,-24511(gp)

            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
 202e7f0:	e0bffd17 	ldw	r2,-12(fp)
 202e7f4:	10c00003 	ldbu	r3,0(r2)
 202e7f8:	e0bffc03 	ldbu	r2,-16(fp)
 202e7fc:	1885883a 	add	r2,r3,r2
 202e800:	10bfffc4 	addi	r2,r2,-1
 202e804:	e0bffc05 	stb	r2,-16(fp)

    /* reset number of MAC group */
    mac_group_count = 0;
    
    /* loop through every alt_tse_system_info structure */
    for(i = 0; i < max_mac_system; i++) {
 202e808:	e0bffc03 	ldbu	r2,-16(fp)
 202e80c:	10800044 	addi	r2,r2,1
 202e810:	e0bffc05 	stb	r2,-16(fp)
 202e814:	e0fffc07 	ldb	r3,-16(fp)
 202e818:	d0a01d03 	ldbu	r2,-32652(gp)
 202e81c:	10803fcc 	andi	r2,r2,255
 202e820:	18be6716 	blt	r3,r2,202e1c0 <__alt_mem_mem_0+0xfd00e1c0>
            /* skip for subsequent Multi-channel MAC */
            i += (pmac_group->channel - 1);
                        
        }
    }
    return SUCCESS;
 202e824:	0005883a 	mov	r2,zero
}
 202e828:	e037883a 	mov	sp,fp
 202e82c:	dfc00117 	ldw	ra,4(sp)
 202e830:	df000017 	ldw	fp,0(sp)
 202e834:	dec00204 	addi	sp,sp,8
 202e838:	f800283a 	ret

0202e83c <alt_tse_mac_get_phy>:
/* @Function Description: Store information of all the PHYs connected to MAC to phy_list
 * @API Type:         Internal
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @return            Number of PHY not in profile, return ALTERA_TSE_MALLOC_FAILED if memory allocation failed
 */
alt_32 alt_tse_mac_get_phy(alt_tse_mac_group *pmac_group) {
 202e83c:	deffed04 	addi	sp,sp,-76
 202e840:	dfc01215 	stw	ra,72(sp)
 202e844:	df001115 	stw	fp,68(sp)
 202e848:	df001104 	addi	fp,sp,68
 202e84c:	e13fff15 	stw	r4,-4(fp)
    
	alt_32 phyid; 
	alt_32 phyid2 = 0;
 202e850:	e03ff515 	stw	zero,-44(fp)
    alt_u8 revision_number;

    alt_32 i;

    alt_u8 is_phy_in_profile;
    alt_32 return_value = 0;
 202e854:	e03ff315 	stw	zero,-52(fp)
    
    alt_8 phy_info_count = 0;
 202e858:	e03ff405 	stb	zero,-48(fp)
    
    alt_tse_phy_info *pphy = 0;
 202e85c:	e03ff615 	stw	zero,-40(fp)
    alt_tse_mac_info *pmac_info = 0;
 202e860:	e03ff715 	stw	zero,-36(fp)
    alt_tse_system_info *psys = 0;
 202e864:	e03ff815 	stw	zero,-32(fp)
    
    np_tse_mac *pmac_group_base = (np_tse_mac *) pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 202e868:	e0bfff17 	ldw	r2,-4(fp)
 202e86c:	10800117 	ldw	r2,4(r2)
 202e870:	10800217 	ldw	r2,8(r2)
 202e874:	10800017 	ldw	r2,0(r2)
 202e878:	e0bff915 	stw	r2,-28(fp)
            
    /* Record previous MDIO address, to be restored at the end of function */
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 202e87c:	e0bff917 	ldw	r2,-28(fp)
 202e880:	10801004 	addi	r2,r2,64
 202e884:	10800037 	ldwio	r2,0(r2)
 202e888:	e0bffa15 	stw	r2,-24(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 202e88c:	e13fff17 	ldw	r4,-4(fp)
 202e890:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 202e894:	e0bffb05 	stb	r2,-20(fp)
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x01; phyadd < 0x20; phyadd++)
 202e898:	00800044 	movi	r2,1
 202e89c:	e0bff005 	stb	r2,-64(fp)
 202e8a0:	0000ca06 	br	202ebcc <alt_tse_mac_get_phy+0x390>
    {        
        IOWR(&pmac_group_base->MDIO_ADDR1, 0, phyadd);
 202e8a4:	e0bff917 	ldw	r2,-28(fp)
 202e8a8:	10801004 	addi	r2,r2,64
 202e8ac:	e0fff003 	ldbu	r3,-64(fp)
 202e8b0:	10c00035 	stwio	r3,0(r2)
        phyid = IORD(&pmac_group_base->mdio1.PHY_ID1,0);     // read PHY ID
 202e8b4:	e0bff917 	ldw	r2,-28(fp)
 202e8b8:	1080a204 	addi	r2,r2,648
 202e8bc:	10800037 	ldwio	r2,0(r2)
 202e8c0:	e0bffc15 	stw	r2,-16(fp)
        phyid2 = IORD(&pmac_group_base->mdio1.PHY_ID2,0);     // read PHY ID
 202e8c4:	e0bff917 	ldw	r2,-28(fp)
 202e8c8:	1080a304 	addi	r2,r2,652
 202e8cc:	10800037 	ldwio	r2,0(r2)
 202e8d0:	e0bff515 	stw	r2,-44(fp)
        
        /* PHY found */
        if (phyid != phyid2)
 202e8d4:	e0fffc17 	ldw	r3,-16(fp)
 202e8d8:	e0bff517 	ldw	r2,-44(fp)
 202e8dc:	1880b826 	beq	r3,r2,202ebc0 <alt_tse_mac_get_phy+0x384>
        {
            pphy = (alt_tse_phy_info *) malloc(sizeof(alt_tse_phy_info));
 202e8e0:	01000704 	movi	r4,28
 202e8e4:	203ca940 	call	203ca94 <malloc>
 202e8e8:	e0bff615 	stw	r2,-40(fp)
            if(!pphy) {
 202e8ec:	e0bff617 	ldw	r2,-40(fp)
 202e8f0:	1000091e 	bne	r2,zero,202e918 <alt_tse_mac_get_phy+0xdc>
                tse_dprintf(1, "ERROR   : Unable to allocate memory for phy_info[%d.%d]\n", mac_group_index, phy_info_count);
 202e8f4:	e0bffb07 	ldb	r2,-20(fp)
 202e8f8:	e0fff407 	ldb	r3,-48(fp)
 202e8fc:	180d883a 	mov	r6,r3
 202e900:	100b883a 	mov	r5,r2
 202e904:	01008134 	movhi	r4,516
 202e908:	21097d04 	addi	r4,r4,9716
 202e90c:	20009e40 	call	20009e4 <printf>
                return ALTERA_TSE_MALLOC_FAILED;
 202e910:	00bfffc4 	movi	r2,-1
 202e914:	0000cd06 	br	202ec4c <alt_tse_mac_get_phy+0x410>
            }
            
            /* store PHY address */
            pphy->mdio_address = phyadd;
 202e918:	e0bff617 	ldw	r2,-40(fp)
 202e91c:	e0fff003 	ldbu	r3,-64(fp)
 202e920:	10c00005 	stb	r3,0(r2)

            /* get oui, model number, and revision number from PHYID and PHYID2 */
            oui = (phyid << 6) | ((phyid2 >> 10) & 0x3f);
 202e924:	e0bffc17 	ldw	r2,-16(fp)
 202e928:	100691ba 	slli	r3,r2,6
 202e92c:	e0bff517 	ldw	r2,-44(fp)
 202e930:	1005d2ba 	srai	r2,r2,10
 202e934:	10800fcc 	andi	r2,r2,63
 202e938:	1884b03a 	or	r2,r3,r2
 202e93c:	e0bffd15 	stw	r2,-12(fp)
            model_number = (phyid2 >> 4) & 0x3f;
 202e940:	e0bff517 	ldw	r2,-44(fp)
 202e944:	1005d13a 	srai	r2,r2,4
 202e948:	10800fcc 	andi	r2,r2,63
 202e94c:	e0bffe05 	stb	r2,-8(fp)
            revision_number = phyid2 & 0x0f;
 202e950:	e0bff517 	ldw	r2,-44(fp)
 202e954:	108003cc 	andi	r2,r2,15
 202e958:	e0bffe45 	stb	r2,-7(fp)
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
 202e95c:	e03ff205 	stb	zero,-56(fp)
            for(i = 0; i < phy_profile_count; i++) {
 202e960:	e03ff115 	stw	zero,-60(fp)
 202e964:	00003406 	br	202ea38 <alt_tse_mac_get_phy+0x1fc>
                
                /* if PHY match with PHY in profile */
                if((pphy_profiles[i]->oui == oui) && (pphy_profiles[i]->model_number == model_number))
 202e968:	008085f4 	movhi	r2,535
 202e96c:	10a94c04 	addi	r2,r2,-23248
 202e970:	e0fff117 	ldw	r3,-60(fp)
 202e974:	18c7883a 	add	r3,r3,r3
 202e978:	18c7883a 	add	r3,r3,r3
 202e97c:	10c5883a 	add	r2,r2,r3
 202e980:	10800017 	ldw	r2,0(r2)
 202e984:	10c01417 	ldw	r3,80(r2)
 202e988:	e0bffd17 	ldw	r2,-12(fp)
 202e98c:	1880271e 	bne	r3,r2,202ea2c <alt_tse_mac_get_phy+0x1f0>
 202e990:	008085f4 	movhi	r2,535
 202e994:	10a94c04 	addi	r2,r2,-23248
 202e998:	e0fff117 	ldw	r3,-60(fp)
 202e99c:	18c7883a 	add	r3,r3,r3
 202e9a0:	18c7883a 	add	r3,r3,r3
 202e9a4:	10c5883a 	add	r2,r2,r3
 202e9a8:	10800017 	ldw	r2,0(r2)
 202e9ac:	10801503 	ldbu	r2,84(r2)
 202e9b0:	10c03fcc 	andi	r3,r2,255
 202e9b4:	e0bffe03 	ldbu	r2,-8(fp)
 202e9b8:	18801c1e 	bne	r3,r2,202ea2c <alt_tse_mac_get_phy+0x1f0>
                {
                    pphy->pphy_profile = pphy_profiles[i];
 202e9bc:	008085f4 	movhi	r2,535
 202e9c0:	10a94c04 	addi	r2,r2,-23248
 202e9c4:	e0fff117 	ldw	r3,-60(fp)
 202e9c8:	18c7883a 	add	r3,r3,r3
 202e9cc:	18c7883a 	add	r3,r3,r3
 202e9d0:	10c5883a 	add	r2,r2,r3
 202e9d4:	10c00017 	ldw	r3,0(r2)
 202e9d8:	e0bff617 	ldw	r2,-40(fp)
 202e9dc:	10c00515 	stw	r3,20(r2)
                    
                    /* PHY found, add it to phy_list */
                    tse_dprintf(5, "INFO    : PHY %s found at PHY address 0x%02x of MAC Group[%d]\n", pphy_profiles[i]->name, phyadd, mac_group_index);
 202e9e0:	008085f4 	movhi	r2,535
 202e9e4:	10a94c04 	addi	r2,r2,-23248
 202e9e8:	e0fff117 	ldw	r3,-60(fp)
 202e9ec:	18c7883a 	add	r3,r3,r3
 202e9f0:	18c7883a 	add	r3,r3,r3
 202e9f4:	10c5883a 	add	r2,r2,r3
 202e9f8:	10800017 	ldw	r2,0(r2)
 202e9fc:	1009883a 	mov	r4,r2
 202ea00:	e0bff003 	ldbu	r2,-64(fp)
 202ea04:	e0fffb07 	ldb	r3,-20(fp)
 202ea08:	180f883a 	mov	r7,r3
 202ea0c:	100d883a 	mov	r6,r2
 202ea10:	200b883a 	mov	r5,r4
 202ea14:	01008134 	movhi	r4,516
 202ea18:	21098c04 	addi	r4,r4,9776
 202ea1c:	20009e40 	call	20009e4 <printf>
                    is_phy_in_profile = 1;
 202ea20:	00800044 	movi	r2,1
 202ea24:	e0bff205 	stb	r2,-56(fp)
                    break;
 202ea28:	00000706 	br	202ea48 <alt_tse_mac_get_phy+0x20c>
            model_number = (phyid2 >> 4) & 0x3f;
            revision_number = phyid2 & 0x0f;
			
            /* map the PHY with PHY in profile */
            is_phy_in_profile = 0;
            for(i = 0; i < phy_profile_count; i++) {
 202ea2c:	e0bff117 	ldw	r2,-60(fp)
 202ea30:	10800044 	addi	r2,r2,1
 202ea34:	e0bff115 	stw	r2,-60(fp)
 202ea38:	d0a81003 	ldbu	r2,-24512(gp)
 202ea3c:	10803fcc 	andi	r2,r2,255
 202ea40:	e0fff117 	ldw	r3,-60(fp)
 202ea44:	18bfc816 	blt	r3,r2,202e968 <__alt_mem_mem_0+0xfd00e968>
                    is_phy_in_profile = 1;
                    break;
                }
            }
            /* PHY not found in PHY profile */
            if(is_phy_in_profile == 0) {
 202ea48:	e0bff203 	ldbu	r2,-56(fp)
 202ea4c:	10000f1e 	bne	r2,zero,202ea8c <alt_tse_mac_get_phy+0x250>
                pphy->pphy_profile = 0;
 202ea50:	e0bff617 	ldw	r2,-40(fp)
 202ea54:	10000515 	stw	zero,20(r2)
                tse_dprintf(3, "WARNING : Unknown PHY found at PHY address 0x%02x of MAC Group[%d]\n", phyadd, mac_group_index);
 202ea58:	e0bff003 	ldbu	r2,-64(fp)
 202ea5c:	e0fffb07 	ldb	r3,-20(fp)
 202ea60:	180d883a 	mov	r6,r3
 202ea64:	100b883a 	mov	r5,r2
 202ea68:	01008134 	movhi	r4,516
 202ea6c:	21099c04 	addi	r4,r4,9840
 202ea70:	20009e40 	call	20009e4 <printf>
                tse_dprintf(3, "WARNING : Please add PHY information to PHY profile\n");
 202ea74:	01008134 	movhi	r4,516
 202ea78:	2109ad04 	addi	r4,r4,9908
 202ea7c:	203cd600 	call	203cd60 <puts>
                return_value++;
 202ea80:	e0bff317 	ldw	r2,-52(fp)
 202ea84:	10800044 	addi	r2,r2,1
 202ea88:	e0bff315 	stw	r2,-52(fp)
            }
            
            tse_dprintf(6, "INFO    : PHY OUI             =  0x%06x\n", (int) oui);
 202ea8c:	e0bffd17 	ldw	r2,-12(fp)
 202ea90:	100b883a 	mov	r5,r2
 202ea94:	01008134 	movhi	r4,516
 202ea98:	2109ba04 	addi	r4,r4,9960
 202ea9c:	202bb200 	call	202bb20 <no_printf>
            tse_dprintf(6, "INFO    : PHY Model Number    =  0x%02x\n", model_number);
 202eaa0:	e0bffe03 	ldbu	r2,-8(fp)
 202eaa4:	100b883a 	mov	r5,r2
 202eaa8:	01008134 	movhi	r4,516
 202eaac:	2109c504 	addi	r4,r4,10004
 202eab0:	202bb200 	call	202bb20 <no_printf>
            tse_dprintf(6, "INFO    : PHY Revision Number =  0x%01x\n", revision_number);
 202eab4:	e0bffe43 	ldbu	r2,-7(fp)
 202eab8:	100b883a 	mov	r5,r2
 202eabc:	01008134 	movhi	r4,516
 202eac0:	2109d004 	addi	r4,r4,10048
 202eac4:	202bb200 	call	202bb20 <no_printf>
            
            /* map the detected PHY to connected MAC */
            if(alt_tse_mac_associate_phy(pmac_group, pphy) == TSE_PHY_MAP_SUCCESS) {
 202eac8:	e17ff617 	ldw	r5,-40(fp)
 202eacc:	e13fff17 	ldw	r4,-4(fp)
 202ead0:	202ec600 	call	202ec60 <alt_tse_mac_associate_phy>
 202ead4:	1000341e 	bne	r2,zero,202eba8 <alt_tse_mac_get_phy+0x36c>
            	
            	pmac_info = pphy->pmac_info;
 202ead8:	e0bff617 	ldw	r2,-40(fp)
 202eadc:	10800617 	ldw	r2,24(r2)
 202eae0:	e0bff715 	stw	r2,-36(fp)
            	psys = pmac_info->psys_info;
 202eae4:	e0bff717 	ldw	r2,-36(fp)
 202eae8:	10800217 	ldw	r2,8(r2)
 202eaec:	e0bff815 	stw	r2,-32(fp)
            	
            	/* Disable PHY loopback to allow Auto-Negotiation completed */
    	        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1, 0);   // disable PHY loopback
 202eaf0:	d8000015 	stw	zero,0(sp)
 202eaf4:	01c00044 	movi	r7,1
 202eaf8:	01800384 	movi	r6,14
 202eafc:	000b883a 	mov	r5,zero
 202eb00:	e13ff617 	ldw	r4,-40(fp)
 202eb04:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
				
				/* Reset auto-negotiation advertisement */
				alt_tse_phy_set_adv_1000(pphy, 1);
 202eb08:	01400044 	movi	r5,1
 202eb0c:	e13ff617 	ldw	r4,-40(fp)
 202eb10:	202f9980 	call	202f998 <alt_tse_phy_set_adv_1000>
				alt_tse_phy_set_adv_100(pphy, 1);
 202eb14:	01400044 	movi	r5,1
 202eb18:	e13ff617 	ldw	r4,-40(fp)
 202eb1c:	202fb5c0 	call	202fb5c <alt_tse_phy_set_adv_100>
				alt_tse_phy_set_adv_10(pphy, 1);
 202eb20:	01400044 	movi	r5,1
 202eb24:	e13ff617 	ldw	r4,-40(fp)
 202eb28:	202fdb00 	call	202fdb0 <alt_tse_phy_set_adv_10>
            	            	
	            /* check link connection for this PHY */
	            alt_tse_phy_restart_an(pphy, ALTERA_CHECKLINK_TIMEOUT_THRESHOLD);
 202eb2c:	017e0034 	movhi	r5,63488
 202eb30:	e13ff617 	ldw	r4,-40(fp)
 202eb34:	202f0e80 	call	202f0e8 <alt_tse_phy_restart_an>
	            
	            /* Perform additional setting if there is any */
	            /* Profile specific */
	            if(pphy->pphy_profile) {
 202eb38:	e0bff617 	ldw	r2,-40(fp)
 202eb3c:	10800517 	ldw	r2,20(r2)
 202eb40:	10000f26 	beq	r2,zero,202eb80 <alt_tse_mac_get_phy+0x344>
		            if(pphy->pphy_profile->phy_cfg) {
 202eb44:	e0bff617 	ldw	r2,-40(fp)
 202eb48:	10800517 	ldw	r2,20(r2)
 202eb4c:	10801717 	ldw	r2,92(r2)
 202eb50:	10000b26 	beq	r2,zero,202eb80 <alt_tse_mac_get_phy+0x344>
		                tse_dprintf(6, "INFO    : Applying additional PHY configuration of %s\n", pphy->pphy_profile->name);
 202eb54:	e0bff617 	ldw	r2,-40(fp)
 202eb58:	10800517 	ldw	r2,20(r2)
 202eb5c:	100b883a 	mov	r5,r2
 202eb60:	01008134 	movhi	r4,516
 202eb64:	2109db04 	addi	r4,r4,10092
 202eb68:	202bb200 	call	202bb20 <no_printf>
		                pphy->pphy_profile->phy_cfg(pmac_group_base);
 202eb6c:	e0bff617 	ldw	r2,-40(fp)
 202eb70:	10800517 	ldw	r2,20(r2)
 202eb74:	10801717 	ldw	r2,92(r2)
 202eb78:	e13ff917 	ldw	r4,-28(fp)
 202eb7c:	103ee83a 	callr	r2
		            }
	            }
	            
	            /* Initialize PHY, call user's function pointer in alt_tse_system_info structure */
	            /* Individual PHY specific */
            	if(psys->tse_phy_cfg) {
 202eb80:	e0bff817 	ldw	r2,-32(fp)
 202eb84:	10801117 	ldw	r2,68(r2)
 202eb88:	10000726 	beq	r2,zero,202eba8 <alt_tse_mac_get_phy+0x36c>
            		tse_dprintf(6, "INFO    : Applying additional user PHY configuration\n");
 202eb8c:	01008134 	movhi	r4,516
 202eb90:	2109e904 	addi	r4,r4,10148
 202eb94:	202bb200 	call	202bb20 <no_printf>
            		psys->tse_phy_cfg(pmac_group_base);
 202eb98:	e0bff817 	ldw	r2,-32(fp)
 202eb9c:	10801117 	ldw	r2,68(r2)
 202eba0:	e13ff917 	ldw	r4,-28(fp)
 202eba4:	103ee83a 	callr	r2
            	}
            }
            
            tse_dprintf(6, "\n");
 202eba8:	01008134 	movhi	r4,516
 202ebac:	2109f704 	addi	r4,r4,10204
 202ebb0:	202bb200 	call	202bb20 <no_printf>
	            
            phy_info_count++;
 202ebb4:	e0bff403 	ldbu	r2,-48(fp)
 202ebb8:	10800044 	addi	r2,r2,1
 202ebbc:	e0bff405 	stb	r2,-48(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* loop all valid PHY address to look for connected PHY */
    for (phyadd = 0x01; phyadd < 0x20; phyadd++)
 202ebc0:	e0bff003 	ldbu	r2,-64(fp)
 202ebc4:	10800044 	addi	r2,r2,1
 202ebc8:	e0bff005 	stb	r2,-64(fp)
 202ebcc:	e0bff003 	ldbu	r2,-64(fp)
 202ebd0:	10800830 	cmpltui	r2,r2,32
 202ebd4:	103f331e 	bne	r2,zero,202e8a4 <__alt_mem_mem_0+0xfd00e8a4>
            phy_info_count++;
        }
    }
    
    /* check to verify the number of connected PHY match the number of channel */
    if(pmac_group->channel != phy_info_count) {
 202ebd8:	e0bfff17 	ldw	r2,-4(fp)
 202ebdc:	10800003 	ldbu	r2,0(r2)
 202ebe0:	10c03fcc 	andi	r3,r2,255
 202ebe4:	e0bff407 	ldb	r2,-48(fp)
 202ebe8:	18801326 	beq	r3,r2,202ec38 <alt_tse_mac_get_phy+0x3fc>
        if(phy_info_count == 0) {
 202ebec:	e0bff407 	ldb	r2,-48(fp)
 202ebf0:	1000061e 	bne	r2,zero,202ec0c <alt_tse_mac_get_phy+0x3d0>
            tse_dprintf(2, "ERROR   : MAC Group[%d] - No PHY connected!\n", mac_group_index);
 202ebf4:	e0bffb07 	ldb	r2,-20(fp)
 202ebf8:	100b883a 	mov	r5,r2
 202ebfc:	01008134 	movhi	r4,516
 202ec00:	2109f804 	addi	r4,r4,10208
 202ec04:	20009e40 	call	20009e4 <printf>
 202ec08:	00000b06 	br	202ec38 <alt_tse_mac_get_phy+0x3fc>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Group[%d] - Number of PHY connected is not equal to the number of channel, Number of PHY : %d, Channel : %d\n", mac_group_index, phy_info_count, pmac_group->channel);
 202ec0c:	e0fffb07 	ldb	r3,-20(fp)
 202ec10:	e13ff407 	ldb	r4,-48(fp)
 202ec14:	e0bfff17 	ldw	r2,-4(fp)
 202ec18:	10800003 	ldbu	r2,0(r2)
 202ec1c:	10803fcc 	andi	r2,r2,255
 202ec20:	100f883a 	mov	r7,r2
 202ec24:	200d883a 	mov	r6,r4
 202ec28:	180b883a 	mov	r5,r3
 202ec2c:	01008134 	movhi	r4,516
 202ec30:	210a0404 	addi	r4,r4,10256
 202ec34:	20009e40 	call	20009e4 <printf>
        }
    }
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 202ec38:	e0bff917 	ldw	r2,-28(fp)
 202ec3c:	10801004 	addi	r2,r2,64
 202ec40:	e0fffa17 	ldw	r3,-24(fp)
 202ec44:	10c00035 	stwio	r3,0(r2)
    
    return return_value;
 202ec48:	e0bff317 	ldw	r2,-52(fp)
}
 202ec4c:	e037883a 	mov	sp,fp
 202ec50:	dfc00117 	ldw	ra,4(sp)
 202ec54:	df000017 	ldw	fp,0(sp)
 202ec58:	dec00204 	addi	sp,sp,8
 202ec5c:	f800283a 	ret

0202ec60 <alt_tse_mac_associate_phy>:
 * @param pmac_group  Pointer to the TSE MAC grouping structure
 * @param pphy        Pointer to the TSE PHY info structure which hold information of PHY
 * @return            return TSE_PHY_MAP_ERROR if mapping error
 *                    return TSE_PHY_MAP_SUCCESS otherwise
 */
alt_32 alt_tse_mac_associate_phy(alt_tse_mac_group *pmac_group, alt_tse_phy_info *pphy) {
 202ec60:	defff604 	addi	sp,sp,-40
 202ec64:	dfc00915 	stw	ra,36(sp)
 202ec68:	df000815 	stw	fp,32(sp)
 202ec6c:	df000804 	addi	fp,sp,32
 202ec70:	e13ffe15 	stw	r4,-8(fp)
 202ec74:	e17fff15 	stw	r5,-4(fp)
    
	alt_32 i;
	alt_32 return_value = TSE_PHY_MAP_SUCCESS;
 202ec78:	e03ff915 	stw	zero,-28(fp)
    
	alt_u8 is_mapped;

    alt_tse_system_info *psys = 0;
 202ec7c:	e03ffb15 	stw	zero,-20(fp)
    alt_tse_mac_info *pmac_info = 0;
 202ec80:	e03ffc15 	stw	zero,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 202ec84:	e03ffd05 	stb	zero,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 202ec88:	e13ffe17 	ldw	r4,-8(fp)
 202ec8c:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 202ec90:	e0bffd45 	stb	r2,-11(fp)
    alt_8 sys_info_index = 0;
 202ec94:	e03ffd85 	stb	zero,-10(fp)
    
    is_mapped = 0;
 202ec98:	e03ffa05 	stb	zero,-24(fp)
    
    for(i = 0; i < pmac_group->channel; i++) {
 202ec9c:	e03ff815 	stw	zero,-32(fp)
 202eca0:	00002c06 	br	202ed54 <alt_tse_mac_associate_phy+0xf4>
        pmac_info = pmac_group->pmac_info[i];
 202eca4:	e0fffe17 	ldw	r3,-8(fp)
 202eca8:	e0bff817 	ldw	r2,-32(fp)
 202ecac:	10800044 	addi	r2,r2,1
 202ecb0:	1085883a 	add	r2,r2,r2
 202ecb4:	1085883a 	add	r2,r2,r2
 202ecb8:	1885883a 	add	r2,r3,r2
 202ecbc:	10800017 	ldw	r2,0(r2)
 202ecc0:	e0bffc15 	stw	r2,-16(fp)
        psys = pmac_info->psys_info;
 202ecc4:	e0bffc17 	ldw	r2,-16(fp)
 202ecc8:	10800217 	ldw	r2,8(r2)
 202eccc:	e0bffb15 	stw	r2,-20(fp)
       
        /* map according to the PHY address in alt_tse_system_info.h */
        if(psys->tse_phy_mdio_address == pphy->mdio_address) {
 202ecd0:	e0bffb17 	ldw	r2,-20(fp)
 202ecd4:	10c01017 	ldw	r3,64(r2)
 202ecd8:	e0bfff17 	ldw	r2,-4(fp)
 202ecdc:	10800003 	ldbu	r2,0(r2)
 202ece0:	10803fcc 	andi	r2,r2,255
 202ece4:	1880181e 	bne	r3,r2,202ed48 <alt_tse_mac_associate_phy+0xe8>
        	mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 202ece8:	e13ffc17 	ldw	r4,-16(fp)
 202ecec:	202cd180 	call	202cd18 <alt_tse_get_mac_info_index>
 202ecf0:	e0bffd05 	stb	r2,-12(fp)
	        sys_info_index = alt_tse_get_system_index(psys);
 202ecf4:	e13ffb17 	ldw	r4,-20(fp)
 202ecf8:	202cc380 	call	202cc38 <alt_tse_get_system_index>
 202ecfc:	e0bffd85 	stb	r2,-10(fp)
	        
            pmac_info->pphy_info = pphy;
 202ed00:	e0bffc17 	ldw	r2,-16(fp)
 202ed04:	e0ffff17 	ldw	r3,-4(fp)
 202ed08:	10c00115 	stw	r3,4(r2)
            pphy->pmac_info = pmac_info;
 202ed0c:	e0bfff17 	ldw	r2,-4(fp)
 202ed10:	e0fffc17 	ldw	r3,-16(fp)
 202ed14:	10c00615 	stw	r3,24(r2)
            tse_dprintf(5, "INFO    : PHY[%d.%d] - Explicitly mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 202ed18:	e0bffd47 	ldb	r2,-11(fp)
 202ed1c:	e0fffd07 	ldb	r3,-12(fp)
 202ed20:	e13ffd87 	ldb	r4,-10(fp)
 202ed24:	200f883a 	mov	r7,r4
 202ed28:	180d883a 	mov	r6,r3
 202ed2c:	100b883a 	mov	r5,r2
 202ed30:	01008134 	movhi	r4,516
 202ed34:	210a2304 	addi	r4,r4,10380
 202ed38:	20009e40 	call	20009e4 <printf>
            is_mapped = 1;
 202ed3c:	00800044 	movi	r2,1
 202ed40:	e0bffa05 	stb	r2,-24(fp)
            break;
 202ed44:	00000806 	br	202ed68 <alt_tse_mac_associate_phy+0x108>
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    alt_8 sys_info_index = 0;
    
    is_mapped = 0;
    
    for(i = 0; i < pmac_group->channel; i++) {
 202ed48:	e0bff817 	ldw	r2,-32(fp)
 202ed4c:	10800044 	addi	r2,r2,1
 202ed50:	e0bff815 	stw	r2,-32(fp)
 202ed54:	e0bffe17 	ldw	r2,-8(fp)
 202ed58:	10800003 	ldbu	r2,0(r2)
 202ed5c:	10803fcc 	andi	r2,r2,255
 202ed60:	e0fff817 	ldw	r3,-32(fp)
 202ed64:	18bfcf16 	blt	r3,r2,202eca4 <__alt_mem_mem_0+0xfd00eca4>
            break;
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
 202ed68:	e0bffa03 	ldbu	r2,-24(fp)
 202ed6c:	10003d1e 	bne	r2,zero,202ee64 <alt_tse_mac_associate_phy+0x204>
        for(i = 0; i < pmac_group->channel; i++) {
 202ed70:	e03ff815 	stw	zero,-32(fp)
 202ed74:	00003606 	br	202ee50 <alt_tse_mac_associate_phy+0x1f0>
            pmac_info = pmac_group->pmac_info[i];
 202ed78:	e0fffe17 	ldw	r3,-8(fp)
 202ed7c:	e0bff817 	ldw	r2,-32(fp)
 202ed80:	10800044 	addi	r2,r2,1
 202ed84:	1085883a 	add	r2,r2,r2
 202ed88:	1085883a 	add	r2,r2,r2
 202ed8c:	1885883a 	add	r2,r3,r2
 202ed90:	10800017 	ldw	r2,0(r2)
 202ed94:	e0bffc15 	stw	r2,-16(fp)
            psys = pmac_info->psys_info;
 202ed98:	e0bffc17 	ldw	r2,-16(fp)
 202ed9c:	10800217 	ldw	r2,8(r2)
 202eda0:	e0bffb15 	stw	r2,-20(fp)
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
 202eda4:	e0bffb17 	ldw	r2,-20(fp)
 202eda8:	10800517 	ldw	r2,20(r2)
 202edac:	10002426 	beq	r2,zero,202ee40 <alt_tse_mac_associate_phy+0x1e0>
 202edb0:	e0bffb17 	ldw	r2,-20(fp)
 202edb4:	10800617 	ldw	r2,24(r2)
 202edb8:	10002126 	beq	r2,zero,202ee40 <alt_tse_mac_associate_phy+0x1e0>
            	continue;
            }
            
            if(psys->tse_phy_mdio_address == TSE_PHY_AUTO_ADDRESS) {
 202edbc:	e0bffb17 	ldw	r2,-20(fp)
 202edc0:	10801017 	ldw	r2,64(r2)
 202edc4:	10bfffd8 	cmpnei	r2,r2,-1
 202edc8:	10001e1e 	bne	r2,zero,202ee44 <alt_tse_mac_associate_phy+0x1e4>
                mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 202edcc:	e13ffc17 	ldw	r4,-16(fp)
 202edd0:	202cd180 	call	202cd18 <alt_tse_get_mac_info_index>
 202edd4:	e0bffd05 	stb	r2,-12(fp)
                sys_info_index = alt_tse_get_system_index(psys);
 202edd8:	e13ffb17 	ldw	r4,-20(fp)
 202eddc:	202cc380 	call	202cc38 <alt_tse_get_system_index>
 202ede0:	e0bffd85 	stb	r2,-10(fp)
                
                pmac_info->pphy_info = pphy;
 202ede4:	e0bffc17 	ldw	r2,-16(fp)
 202ede8:	e0ffff17 	ldw	r3,-4(fp)
 202edec:	10c00115 	stw	r3,4(r2)
                pphy->pmac_info = pmac_info;
 202edf0:	e0bfff17 	ldw	r2,-4(fp)
 202edf4:	e0fffc17 	ldw	r3,-16(fp)
 202edf8:	10c00615 	stw	r3,24(r2)
                psys->tse_phy_mdio_address = pphy->mdio_address;
 202edfc:	e0bfff17 	ldw	r2,-4(fp)
 202ee00:	10800003 	ldbu	r2,0(r2)
 202ee04:	10c03fcc 	andi	r3,r2,255
 202ee08:	e0bffb17 	ldw	r2,-20(fp)
 202ee0c:	10c01015 	stw	r3,64(r2)
                tse_dprintf(5, "INFO    : PHY[%d.%d] - Automatically mapped to tse_mac_device[%d]\n", mac_group_index, mac_info_index, sys_info_index);
 202ee10:	e0bffd47 	ldb	r2,-11(fp)
 202ee14:	e0fffd07 	ldb	r3,-12(fp)
 202ee18:	e13ffd87 	ldb	r4,-10(fp)
 202ee1c:	200f883a 	mov	r7,r4
 202ee20:	180d883a 	mov	r6,r3
 202ee24:	100b883a 	mov	r5,r2
 202ee28:	01008134 	movhi	r4,516
 202ee2c:	210a3304 	addi	r4,r4,10444
 202ee30:	20009e40 	call	20009e4 <printf>
                is_mapped = 1;
 202ee34:	00800044 	movi	r2,1
 202ee38:	e0bffa05 	stb	r2,-24(fp)
                break;
 202ee3c:	00000906 	br	202ee64 <alt_tse_mac_associate_phy+0x204>
            pmac_info = pmac_group->pmac_info[i];
            psys = pmac_info->psys_info;
            
            /* alt_tse_system_info structure definition error */
            if((psys->tse_sgdma_tx == 0) || (psys->tse_sgdma_rx == 0)){
            	continue;
 202ee40:	0001883a 	nop
        }
    }
    
    /* if not yet map, it will automatically mapped to the first TSE device encountered with tse_phy_mdio_address = TSE_PHY_AUTO_ADDRESS */
    if(is_mapped == 0) {
        for(i = 0; i < pmac_group->channel; i++) {
 202ee44:	e0bff817 	ldw	r2,-32(fp)
 202ee48:	10800044 	addi	r2,r2,1
 202ee4c:	e0bff815 	stw	r2,-32(fp)
 202ee50:	e0bffe17 	ldw	r2,-8(fp)
 202ee54:	10800003 	ldbu	r2,0(r2)
 202ee58:	10803fcc 	andi	r2,r2,255
 202ee5c:	e0fff817 	ldw	r3,-32(fp)
 202ee60:	18bfc516 	blt	r3,r2,202ed78 <__alt_mem_mem_0+0xfd00ed78>
            }
        }
    }
    
    /* Still cannot find any matched MAC-PHY */
    if(is_mapped == 0) {
 202ee64:	e0bffa03 	ldbu	r2,-24(fp)
 202ee68:	1000091e 	bne	r2,zero,202ee90 <alt_tse_mac_associate_phy+0x230>
    	pphy->pmac_info = 0;
 202ee6c:	e0bfff17 	ldw	r2,-4(fp)
 202ee70:	10000615 	stw	zero,24(r2)
        tse_dprintf(2, "WARNING : PHY[%d.X] - Mapping of PHY to MAC failed! Make sure the PHY address is defined correctly in tse_mac_device[] structure, and number of PHYs connected is equivalent to number of channel\n", mac_group_index);
 202ee74:	e0bffd47 	ldb	r2,-11(fp)
 202ee78:	100b883a 	mov	r5,r2
 202ee7c:	01008134 	movhi	r4,516
 202ee80:	210a4404 	addi	r4,r4,10512
 202ee84:	20009e40 	call	20009e4 <printf>
        return_value = TSE_PHY_MAP_ERROR;
 202ee88:	00bfffc4 	movi	r2,-1
 202ee8c:	e0bff915 	stw	r2,-28(fp)
    }
    
    return return_value;
 202ee90:	e0bff917 	ldw	r2,-28(fp)
}
 202ee94:	e037883a 	mov	sp,fp
 202ee98:	dfc00117 	ldw	ra,4(sp)
 202ee9c:	df000017 	ldw	fp,0(sp)
 202eea0:	dec00204 	addi	sp,sp,8
 202eea4:	f800283a 	ret

0202eea8 <alt_tse_phy_cfg_pcs>:
/* @Function Description: Configure operating mode of Altera PCS if available
 * @API Type:           Internal
 * @param pmac_info     pointer to MAC info variable
 * @return              return SUCCESS
 */
alt_32 alt_tse_phy_cfg_pcs(alt_tse_mac_info *pmac_info) {
 202eea8:	defff804 	addi	sp,sp,-32
 202eeac:	dfc00715 	stw	ra,28(sp)
 202eeb0:	df000615 	stw	fp,24(sp)
 202eeb4:	df000604 	addi	fp,sp,24
 202eeb8:	e13fff15 	stw	r4,-4(fp)
    
    alt_tse_system_info *psys = pmac_info->psys_info;
 202eebc:	e0bfff17 	ldw	r2,-4(fp)
 202eec0:	10800217 	ldw	r2,8(r2)
 202eec4:	e0bffa15 	stw	r2,-24(fp)
    np_tse_mac *pmac = (np_tse_mac *) psys->tse_mac_base;
 202eec8:	e0bffa17 	ldw	r2,-24(fp)
 202eecc:	10800017 	ldw	r2,0(r2)
 202eed0:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 202eed4:	e0bfff17 	ldw	r2,-4(fp)
 202eed8:	10800317 	ldw	r2,12(r2)
 202eedc:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 202eee0:	e13fff17 	ldw	r4,-4(fp)
 202eee4:	202cd180 	call	202cd18 <alt_tse_get_mac_info_index>
 202eee8:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 202eeec:	e13ffc17 	ldw	r4,-16(fp)
 202eef0:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 202eef4:	e0bffd45 	stb	r2,-11(fp)

    if(psys->tse_pcs_ena) {
 202eef8:	e0bffa17 	ldw	r2,-24(fp)
 202eefc:	108003c3 	ldbu	r2,15(r2)
 202ef00:	10803fcc 	andi	r2,r2,255
 202ef04:	10002c26 	beq	r2,zero,202efb8 <alt_tse_phy_cfg_pcs+0x110>
        tse_dprintf(5, "INFO    : PCS[%d.%d] - Configuring PCS operating mode\n", mac_group_index, mac_info_index);
 202ef08:	e0bffd47 	ldb	r2,-11(fp)
 202ef0c:	e0fffd07 	ldb	r3,-12(fp)
 202ef10:	180d883a 	mov	r6,r3
 202ef14:	100b883a 	mov	r5,r2
 202ef18:	01008134 	movhi	r4,516
 202ef1c:	210a7504 	addi	r4,r4,10708
 202ef20:	20009e40 	call	20009e4 <printf>
        
        alt_32 data = IORD(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE); 
 202ef24:	e0bffb17 	ldw	r2,-20(fp)
 202ef28:	10808004 	addi	r2,r2,512
 202ef2c:	10801404 	addi	r2,r2,80
 202ef30:	10800037 	ldwio	r2,0(r2)
 202ef34:	e0bffe15 	stw	r2,-8(fp)
        
        if(psys->tse_pcs_sgmii) {
 202ef38:	e0bffa17 	ldw	r2,-24(fp)
 202ef3c:	10800403 	ldbu	r2,16(r2)
 202ef40:	10803fcc 	andi	r2,r2,255
 202ef44:	10000e26 	beq	r2,zero,202ef80 <alt_tse_phy_cfg_pcs+0xd8>
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode enabled\n", mac_group_index, mac_info_index);
 202ef48:	e0bffd47 	ldb	r2,-11(fp)
 202ef4c:	e0fffd07 	ldb	r3,-12(fp)
 202ef50:	180d883a 	mov	r6,r3
 202ef54:	100b883a 	mov	r5,r2
 202ef58:	01008134 	movhi	r4,516
 202ef5c:	210a8304 	addi	r4,r4,10764
 202ef60:	20009e40 	call	20009e4 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data | 0x03);
 202ef64:	e0bffb17 	ldw	r2,-20(fp)
 202ef68:	10808004 	addi	r2,r2,512
 202ef6c:	10801404 	addi	r2,r2,80
 202ef70:	e0fffe17 	ldw	r3,-8(fp)
 202ef74:	18c000d4 	ori	r3,r3,3
 202ef78:	10c00035 	stwio	r3,0(r2)
 202ef7c:	00000e06 	br	202efb8 <alt_tse_phy_cfg_pcs+0x110>
            }
        else {
            tse_dprintf(5, "INFO    : PCS[%d.%d] - PCS SGMII mode disabled\n", mac_group_index, mac_info_index);
 202ef80:	e0bffd47 	ldb	r2,-11(fp)
 202ef84:	e0fffd07 	ldb	r3,-12(fp)
 202ef88:	180d883a 	mov	r6,r3
 202ef8c:	100b883a 	mov	r5,r2
 202ef90:	01008134 	movhi	r4,516
 202ef94:	210a8f04 	addi	r4,r4,10812
 202ef98:	20009e40 	call	20009e4 <printf>
            IOWR(&pmac->mdio0.CONTROL, ALTERA_TSE_PCS_IF_MODE, data & ~0x03);
 202ef9c:	e0bffb17 	ldw	r2,-20(fp)
 202efa0:	10808004 	addi	r2,r2,512
 202efa4:	10801404 	addi	r2,r2,80
 202efa8:	e13ffe17 	ldw	r4,-8(fp)
 202efac:	00ffff04 	movi	r3,-4
 202efb0:	20c6703a 	and	r3,r4,r3
 202efb4:	10c00035 	stwio	r3,0(r2)
        }
    }
    
    return SUCCESS;
 202efb8:	0005883a 	mov	r2,zero
}
 202efbc:	e037883a 	mov	sp,fp
 202efc0:	dfc00117 	ldw	ra,4(sp)
 202efc4:	df000017 	ldw	fp,0(sp)
 202efc8:	dec00204 	addi	sp,sp,8
 202efcc:	f800283a 	ret

0202efd0 <alt_tse_phy_init>:
/* @Function Description: Detect and initialize all the PHYs connected
 * @API Type:   Internal
 * @param pmac  N/A
 * @return      SUCCESS
 */
alt_32 alt_tse_phy_init() {
 202efd0:	defffb04 	addi	sp,sp,-20
 202efd4:	dfc00415 	stw	ra,16(sp)
 202efd8:	df000315 	stw	fp,12(sp)
 202efdc:	df000304 	addi	fp,sp,12
	alt_8 i = 0;
 202efe0:	e03ffd05 	stb	zero,-12(fp)
	alt_8 j = 0;
 202efe4:	e03ffd45 	stb	zero,-11(fp)
    
    alt_tse_mac_group *pmac_group = 0;
 202efe8:	e03ffe15 	stw	zero,-8(fp)
    alt_tse_mac_info *pmac_info = 0;
 202efec:	e03fff15 	stw	zero,-4(fp)
    
    /* add supported PHYs */
    alt_tse_phy_add_profile_default();
 202eff0:	202dcec0 	call	202dcec <alt_tse_phy_add_profile_default>
    
    /* display PHY in profile */
    alt_tse_phy_print_profile();
 202eff4:	202df880 	call	202df88 <alt_tse_phy_print_profile>
    
    alt_tse_mac_group_init();
 202eff8:	202e1980 	call	202e198 <alt_tse_mac_group_init>
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 202effc:	e03ffd05 	stb	zero,-12(fp)
 202f000:	00002f06 	br	202f0c0 <alt_tse_phy_init+0xf0>
        pmac_group = pmac_groups[i];
 202f004:	e0fffd07 	ldb	r3,-12(fp)
 202f008:	008085f4 	movhi	r2,535
 202f00c:	10a94404 	addi	r2,r2,-23280
 202f010:	18c7883a 	add	r3,r3,r3
 202f014:	18c7883a 	add	r3,r3,r3
 202f018:	10c5883a 	add	r2,r2,r3
 202f01c:	10800017 	ldw	r2,0(r2)
 202f020:	e0bffe15 	stw	r2,-8(fp)
        
        if(pmac_group->pmac_info[0]->psys_info->tse_use_mdio) {
 202f024:	e0bffe17 	ldw	r2,-8(fp)
 202f028:	10800117 	ldw	r2,4(r2)
 202f02c:	10800217 	ldw	r2,8(r2)
 202f030:	10800203 	ldbu	r2,8(r2)
 202f034:	10803fcc 	andi	r2,r2,255
 202f038:	10000326 	beq	r2,zero,202f048 <alt_tse_phy_init+0x78>
            
        	/* get connected PHYs */
            alt_tse_mac_get_phy(pmac_group);
 202f03c:	e13ffe17 	ldw	r4,-8(fp)
 202f040:	202e83c0 	call	202e83c <alt_tse_mac_get_phy>
 202f044:	00000706 	br	202f064 <alt_tse_phy_init+0x94>
        }
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
 202f048:	e0bffd07 	ldb	r2,-12(fp)
 202f04c:	e0fffd47 	ldb	r3,-11(fp)
 202f050:	180d883a 	mov	r6,r3
 202f054:	100b883a 	mov	r5,r2
 202f058:	01008134 	movhi	r4,516
 202f05c:	210a9b04 	addi	r4,r4,10860
 202f060:	20009e40 	call	20009e4 <printf>
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 202f064:	e03ffd45 	stb	zero,-11(fp)
 202f068:	00000d06 	br	202f0a0 <alt_tse_phy_init+0xd0>
            pmac_info = pmac_group->pmac_info[j];
 202f06c:	e0bffd47 	ldb	r2,-11(fp)
 202f070:	e0fffe17 	ldw	r3,-8(fp)
 202f074:	10800044 	addi	r2,r2,1
 202f078:	1085883a 	add	r2,r2,r2
 202f07c:	1085883a 	add	r2,r2,r2
 202f080:	1885883a 	add	r2,r3,r2
 202f084:	10800017 	ldw	r2,0(r2)
 202f088:	e0bfff15 	stw	r2,-4(fp)
            
            alt_tse_phy_cfg_pcs(pmac_info);
 202f08c:	e13fff17 	ldw	r4,-4(fp)
 202f090:	202eea80 	call	202eea8 <alt_tse_phy_cfg_pcs>
        else {
            tse_dprintf(3, "WARNING : MAC Groups[%d]->pmac_info[%d] MDIO is not used, unable to run PHY detection\n", i, j);
        }
        
        /* Configure PCS mode if MAC+PCS system is used */
        for(j = 0; j < pmac_group->channel; j++) {
 202f094:	e0bffd43 	ldbu	r2,-11(fp)
 202f098:	10800044 	addi	r2,r2,1
 202f09c:	e0bffd45 	stb	r2,-11(fp)
 202f0a0:	e0fffd47 	ldb	r3,-11(fp)
 202f0a4:	e0bffe17 	ldw	r2,-8(fp)
 202f0a8:	10800003 	ldbu	r2,0(r2)
 202f0ac:	10803fcc 	andi	r2,r2,255
 202f0b0:	18bfee16 	blt	r3,r2,202f06c <__alt_mem_mem_0+0xfd00f06c>
    
    alt_tse_mac_group_init();
        
    /* initialize for each TSE MAC */
    /* run once only for multi-channel MAC */
    for(i = 0; i < mac_group_count; i++) {
 202f0b4:	e0bffd03 	ldbu	r2,-12(fp)
 202f0b8:	10800044 	addi	r2,r2,1
 202f0bc:	e0bffd05 	stb	r2,-12(fp)
 202f0c0:	e0fffd07 	ldb	r3,-12(fp)
 202f0c4:	d0a81043 	ldbu	r2,-24511(gp)
 202f0c8:	10803fcc 	andi	r2,r2,255
 202f0cc:	18bfcd16 	blt	r3,r2,202f004 <__alt_mem_mem_0+0xfd00f004>
            
            alt_tse_phy_cfg_pcs(pmac_info);
        }
    }
                
    return SUCCESS;
 202f0d0:	0005883a 	mov	r2,zero
}
 202f0d4:	e037883a 	mov	sp,fp
 202f0d8:	dfc00117 	ldw	ra,4(sp)
 202f0dc:	df000017 	ldw	fp,0(sp)
 202f0e0:	dec00204 	addi	sp,sp,8
 202f0e4:	f800283a 	ret

0202f0e8 <alt_tse_phy_restart_an>:
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *                              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_restart_an(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 202f0e8:	defff704 	addi	sp,sp,-36
 202f0ec:	dfc00815 	stw	ra,32(sp)
 202f0f0:	df000715 	stw	fp,28(sp)
 202f0f4:	df000704 	addi	fp,sp,28
 202f0f8:	e13ffe15 	stw	r4,-8(fp)
 202f0fc:	e17fff15 	stw	r5,-4(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 202f100:	e0bffe17 	ldw	r2,-8(fp)
 202f104:	10800617 	ldw	r2,24(r2)
 202f108:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 202f10c:	e0bffb17 	ldw	r2,-20(fp)
 202f110:	10800317 	ldw	r2,12(r2)
 202f114:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 202f118:	e13ffb17 	ldw	r4,-20(fp)
 202f11c:	202cd180 	call	202cd18 <alt_tse_get_mac_info_index>
 202f120:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 202f124:	e13ffc17 	ldw	r4,-16(fp)
 202f128:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 202f12c:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 202f130:	e13ffe17 	ldw	r4,-8(fp)
 202f134:	202da580 	call	202da58 <alt_tse_phy_rd_mdio_addr>
 202f138:	e0bffd85 	stb	r2,-10(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 202f13c:	e0bffe17 	ldw	r2,-8(fp)
 202f140:	10800003 	ldbu	r2,0(r2)
 202f144:	10803fcc 	andi	r2,r2,255
 202f148:	100b883a 	mov	r5,r2
 202f14c:	e13ffe17 	ldw	r4,-8(fp)
 202f150:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
    
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 202f154:	01c00044 	movi	r7,1
 202f158:	018000c4 	movi	r6,3
 202f15c:	01400044 	movi	r5,1
 202f160:	e13ffe17 	ldw	r4,-8(fp)
 202f164:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f168:	10000d1e 	bne	r2,zero,202f1a0 <alt_tse_phy_restart_an+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 202f16c:	e0bffd47 	ldb	r2,-11(fp)
 202f170:	e0fffd07 	ldb	r3,-12(fp)
 202f174:	180d883a 	mov	r6,r3
 202f178:	100b883a 	mov	r5,r2
 202f17c:	01008134 	movhi	r4,516
 202f180:	210ab104 	addi	r4,r4,10948
 202f184:	20009e40 	call	20009e4 <printf>
        
		/* Restore previous MDIO address */
		alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 202f188:	e0bffd83 	ldbu	r2,-10(fp)
 202f18c:	100b883a 	mov	r5,r2
 202f190:	e13ffe17 	ldw	r4,-8(fp)
 202f194:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
		
		return TSE_PHY_AN_NOT_CAPABLE;
 202f198:	00bfff84 	movi	r2,-2
 202f19c:	00003c06 	br	202f290 <alt_tse_phy_restart_an+0x1a8>
    }
    
    /* enable Auto-Negotiation */    
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_AN_ENA, 1, 1);
 202f1a0:	00800044 	movi	r2,1
 202f1a4:	d8800015 	stw	r2,0(sp)
 202f1a8:	01c00044 	movi	r7,1
 202f1ac:	01800304 	movi	r6,12
 202f1b0:	000b883a 	mov	r5,zero
 202f1b4:	e13ffe17 	ldw	r4,-8(fp)
 202f1b8:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
    
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
 202f1bc:	00800044 	movi	r2,1
 202f1c0:	d8800015 	stw	r2,0(sp)
 202f1c4:	01c00044 	movi	r7,1
 202f1c8:	01800244 	movi	r6,9
 202f1cc:	000b883a 	mov	r5,zero
 202f1d0:	e13ffe17 	ldw	r4,-8(fp)
 202f1d4:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
 202f1d8:	e0bffd47 	ldb	r2,-11(fp)
 202f1dc:	e0fffd07 	ldb	r3,-12(fp)
 202f1e0:	180d883a 	mov	r6,r3
 202f1e4:	100b883a 	mov	r5,r2
 202f1e8:	01008134 	movhi	r4,516
 202f1ec:	210ac104 	addi	r4,r4,11012
 202f1f0:	20009e40 	call	20009e4 <printf>
    
    alt_32 timeout = 0;
 202f1f4:	e03ffa15 	stw	zero,-24(fp)
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 202f1f8:	00001306 	br	202f248 <alt_tse_phy_restart_an+0x160>
        if(timeout++ > timeout_threshold) {
 202f1fc:	e0bffa17 	ldw	r2,-24(fp)
 202f200:	10c00044 	addi	r3,r2,1
 202f204:	e0fffa15 	stw	r3,-24(fp)
 202f208:	1007883a 	mov	r3,r2
 202f20c:	e0bfff17 	ldw	r2,-4(fp)
 202f210:	10c00d2e 	bgeu	r2,r3,202f248 <alt_tse_phy_restart_an+0x160>
           tse_dprintf(4, "WARNING : PHY[%d.%d] - Auto-Negotiation FAILED\n", mac_group_index, mac_info_index);
 202f214:	e0bffd47 	ldb	r2,-11(fp)
 202f218:	e0fffd07 	ldb	r3,-12(fp)
 202f21c:	180d883a 	mov	r6,r3
 202f220:	100b883a 	mov	r5,r2
 202f224:	01008134 	movhi	r4,516
 202f228:	210ad304 	addi	r4,r4,11084
 202f22c:	20009e40 	call	20009e4 <printf>
		   
		   /* Restore previous MDIO address */
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 202f230:	e0bffd83 	ldbu	r2,-10(fp)
 202f234:	100b883a 	mov	r5,r2
 202f238:	e13ffe17 	ldw	r4,-8(fp)
 202f23c:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
           
		   return TSE_PHY_AN_NOT_COMPLETE;
 202f240:	00bfffc4 	movi	r2,-1
 202f244:	00001206 	br	202f290 <alt_tse_phy_restart_an+0x1a8>
    /* send PHY reset command */
    alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_RESTART_AN, 1, 1);
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Restart Auto-Negotiation, checking PHY link...\n", mac_group_index, mac_info_index);
    
    alt_32 timeout = 0;
    while(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0 ){ 
 202f248:	01c00044 	movi	r7,1
 202f24c:	01800144 	movi	r6,5
 202f250:	01400044 	movi	r5,1
 202f254:	e13ffe17 	ldw	r4,-8(fp)
 202f258:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f25c:	103fe726 	beq	r2,zero,202f1fc <__alt_mem_mem_0+0xfd00f1fc>
           alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
           
		   return TSE_PHY_AN_NOT_COMPLETE;
        }
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Auto-Negotiation PASSED\n", mac_group_index, mac_info_index);
 202f260:	e0bffd47 	ldb	r2,-11(fp)
 202f264:	e0fffd07 	ldb	r3,-12(fp)
 202f268:	180d883a 	mov	r6,r3
 202f26c:	100b883a 	mov	r5,r2
 202f270:	01008134 	movhi	r4,516
 202f274:	210adf04 	addi	r4,r4,11132
 202f278:	20009e40 	call	20009e4 <printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 202f27c:	e0bffd83 	ldbu	r2,-10(fp)
 202f280:	100b883a 	mov	r5,r2
 202f284:	e13ffe17 	ldw	r4,-8(fp)
 202f288:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE;
 202f28c:	0005883a 	mov	r2,zero
}
 202f290:	e037883a 	mov	sp,fp
 202f294:	dfc00117 	ldw	ra,4(sp)
 202f298:	df000017 	ldw	fp,0(sp)
 202f29c:	dec00204 	addi	sp,sp,8
 202f2a0:	f800283a 	ret

0202f2a4 <alt_tse_phy_check_link>:
 * @param pphy                  Pointer to the alt_tse_phy_info structure
 *        timeout_threshold     timeout value of Auto-Negotiation
 * @return                      return TSE_PHY_AN_COMPLETE if success
 *                              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 */
alt_32 alt_tse_phy_check_link(alt_tse_phy_info *pphy, alt_u32 timeout_threshold) {
 202f2a4:	defff904 	addi	sp,sp,-28
 202f2a8:	dfc00615 	stw	ra,24(sp)
 202f2ac:	df000515 	stw	fp,20(sp)
 202f2b0:	df000504 	addi	fp,sp,20
 202f2b4:	e13ffe15 	stw	r4,-8(fp)
 202f2b8:	e17fff15 	stw	r5,-4(fp)

    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 202f2bc:	e0bffe17 	ldw	r2,-8(fp)
 202f2c0:	10800617 	ldw	r2,24(r2)
 202f2c4:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 202f2c8:	e0bffb17 	ldw	r2,-20(fp)
 202f2cc:	10800317 	ldw	r2,12(r2)
 202f2d0:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 202f2d4:	e13ffb17 	ldw	r4,-20(fp)
 202f2d8:	202cd180 	call	202cd18 <alt_tse_get_mac_info_index>
 202f2dc:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group); 
 202f2e0:	e13ffc17 	ldw	r4,-16(fp)
 202f2e4:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 202f2e8:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 202f2ec:	e13ffe17 	ldw	r4,-8(fp)
 202f2f0:	202da580 	call	202da58 <alt_tse_phy_rd_mdio_addr>
 202f2f4:	e0bffd85 	stb	r2,-10(fp)
    
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 202f2f8:	e0bffe17 	ldw	r2,-8(fp)
 202f2fc:	10800003 	ldbu	r2,0(r2)
 202f300:	10803fcc 	andi	r2,r2,255
 202f304:	100b883a 	mov	r5,r2
 202f308:	e13ffe17 	ldw	r4,-8(fp)
 202f30c:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
    /* Issue a PHY reset here and wait for the link
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
 202f310:	e0bffd47 	ldb	r2,-11(fp)
 202f314:	e0fffd07 	ldb	r3,-12(fp)
 202f318:	180d883a 	mov	r6,r3
 202f31c:	100b883a 	mov	r5,r2
 202f320:	01008134 	movhi	r4,516
 202f324:	210aeb04 	addi	r4,r4,11180
 202f328:	20009e40 	call	20009e4 <printf>
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 202f32c:	01c00044 	movi	r7,1
 202f330:	01800384 	movi	r6,14
 202f334:	000b883a 	mov	r5,zero
 202f338:	e13ffe17 	ldw	r4,-8(fp)
 202f33c:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f340:	1000061e 	bne	r2,zero,202f35c <alt_tse_phy_check_link+0xb8>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
 202f344:	01c00044 	movi	r7,1
 202f348:	01800144 	movi	r6,5
 202f34c:	01400044 	movi	r5,1
 202f350:	e13ffe17 	ldw	r4,-8(fp)
 202f354:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
     * autonegotiation complete again... this takes several SECONDS(!)
     * so be very careful not to do it frequently
     * perform this when PHY is configured in loopback or has no link yet.
     */
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Checking link...\n", mac_group_index, mac_info_index);
    if( ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_LOOPBACK, 1)) != 0) ||
 202f358:	1000191e 	bne	r2,zero,202f3c0 <alt_tse_phy_check_link+0x11c>
        ((alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1)) == 0) ) {                 
        
        tse_dprintf(5, "INFO    : PHY[%d.%d] - Link not yet established, restart auto-negotiation...\n", mac_group_index, mac_info_index);
 202f35c:	e0bffd47 	ldb	r2,-11(fp)
 202f360:	e0fffd07 	ldb	r3,-12(fp)
 202f364:	180d883a 	mov	r6,r3
 202f368:	100b883a 	mov	r5,r2
 202f36c:	01008134 	movhi	r4,516
 202f370:	210af604 	addi	r4,r4,11224
 202f374:	20009e40 	call	20009e4 <printf>
        /* restart Auto-Negotiation */
        /* if Auto-Negotiation still cannot complete, then go to next PHY */
        if(alt_tse_phy_restart_an(pphy, timeout_threshold) == TSE_PHY_AN_NOT_COMPLETE) {
 202f378:	e17fff17 	ldw	r5,-4(fp)
 202f37c:	e13ffe17 	ldw	r4,-8(fp)
 202f380:	202f0e80 	call	202f0e8 <alt_tse_phy_restart_an>
 202f384:	10bfffd8 	cmpnei	r2,r2,-1
 202f388:	10000d1e 	bne	r2,zero,202f3c0 <alt_tse_phy_check_link+0x11c>
            tse_dprintf(3, "WARNING : PHY[%d.%d] - Link could not established\n", mac_group_index, mac_info_index);
 202f38c:	e0bffd47 	ldb	r2,-11(fp)
 202f390:	e0fffd07 	ldb	r3,-12(fp)
 202f394:	180d883a 	mov	r6,r3
 202f398:	100b883a 	mov	r5,r2
 202f39c:	01008134 	movhi	r4,516
 202f3a0:	210b0a04 	addi	r4,r4,11304
 202f3a4:	20009e40 	call	20009e4 <printf>
			
			/* Restore previous MDIO address */
			alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 202f3a8:	e0bffd83 	ldbu	r2,-10(fp)
 202f3ac:	100b883a 	mov	r5,r2
 202f3b0:	e13ffe17 	ldw	r4,-8(fp)
 202f3b4:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
	
            return TSE_PHY_AN_NOT_COMPLETE;
 202f3b8:	00bfffc4 	movi	r2,-1
 202f3bc:	00000c06 	br	202f3f0 <alt_tse_phy_check_link+0x14c>
        }            
    }
    tse_dprintf(5, "INFO    : PHY[%d.%d] - Link established\n", mac_group_index, mac_info_index);
 202f3c0:	e0bffd47 	ldb	r2,-11(fp)
 202f3c4:	e0fffd07 	ldb	r3,-12(fp)
 202f3c8:	180d883a 	mov	r6,r3
 202f3cc:	100b883a 	mov	r5,r2
 202f3d0:	01008134 	movhi	r4,516
 202f3d4:	210b1704 	addi	r4,r4,11356
 202f3d8:	20009e40 	call	20009e4 <printf>
            
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 202f3dc:	e0bffd83 	ldbu	r2,-10(fp)
 202f3e0:	100b883a 	mov	r5,r2
 202f3e4:	e13ffe17 	ldw	r4,-8(fp)
 202f3e8:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
    
    return TSE_PHY_AN_COMPLETE; 
 202f3ec:	0005883a 	mov	r2,zero
}
 202f3f0:	e037883a 	mov	sp,fp
 202f3f4:	dfc00117 	ldw	ra,4(sp)
 202f3f8:	df000017 	ldw	fp,0(sp)
 202f3fc:	dec00204 	addi	sp,sp,8
 202f400:	f800283a 	ret

0202f404 <alt_tse_phy_get_cap>:
 * @param pmac  Pointer to the alt_tse_phy_info structure
 * @return      return TSE_PHY_AN_COMPLETE if success
 *              return TSE_PHY_AN_NOT_COMPLETE if auto-negotiation not completed
 *              return TSE_PHY_AN_NOT_CAPABLE if the PHY not capable for AN
 */
alt_32 alt_tse_phy_get_cap(alt_tse_phy_info *pphy) {
 202f404:	defff904 	addi	sp,sp,-28
 202f408:	dfc00615 	stw	ra,24(sp)
 202f40c:	df000515 	stw	fp,20(sp)
 202f410:	df000504 	addi	fp,sp,20
 202f414:	e13fff15 	stw	r4,-4(fp)
	alt_32 return_value = TSE_PHY_AN_COMPLETE;
 202f418:	e03ffb15 	stw	zero,-20(fp)
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 202f41c:	e0bfff17 	ldw	r2,-4(fp)
 202f420:	10800617 	ldw	r2,24(r2)
 202f424:	e0bffc15 	stw	r2,-16(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 202f428:	e0bffc17 	ldw	r2,-16(fp)
 202f42c:	10800317 	ldw	r2,12(r2)
 202f430:	e0bffd15 	stw	r2,-12(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 202f434:	e13ffc17 	ldw	r4,-16(fp)
 202f438:	202cd180 	call	202cd18 <alt_tse_get_mac_info_index>
 202f43c:	e0bffe05 	stb	r2,-8(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);    
 202f440:	e13ffd17 	ldw	r4,-12(fp)
 202f444:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 202f448:	e0bffe45 	stb	r2,-7(fp)
        
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 202f44c:	e13fff17 	ldw	r4,-4(fp)
 202f450:	202da580 	call	202da58 <alt_tse_phy_rd_mdio_addr>
 202f454:	e0bffe85 	stb	r2,-6(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 202f458:	e0bfff17 	ldw	r2,-4(fp)
 202f45c:	10800003 	ldbu	r2,0(r2)
 202f460:	10803fcc 	andi	r2,r2,255
 202f464:	100b883a 	mov	r5,r2
 202f468:	e13fff17 	ldw	r4,-4(fp)
 202f46c:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
            
    if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 202f470:	01c00044 	movi	r7,1
 202f474:	018000c4 	movi	r6,3
 202f478:	01400044 	movi	r5,1
 202f47c:	e13fff17 	ldw	r4,-4(fp)
 202f480:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f484:	10000d1e 	bne	r2,zero,202f4bc <alt_tse_phy_get_cap+0xb8>
        tse_dprintf(3, "WARNING : PHY[%d.%d] - PHY not capable for Auto-Negotiation\n", mac_group_index, mac_info_index);
 202f488:	e0bffe47 	ldb	r2,-7(fp)
 202f48c:	e0fffe07 	ldb	r3,-8(fp)
 202f490:	180d883a 	mov	r6,r3
 202f494:	100b883a 	mov	r5,r2
 202f498:	01008134 	movhi	r4,516
 202f49c:	210ab104 	addi	r4,r4,10948
 202f4a0:	20009e40 	call	20009e4 <printf>
        
        /* Restore previous MDIO address */
        alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 202f4a4:	e0bffe83 	ldbu	r2,-6(fp)
 202f4a8:	100b883a 	mov	r5,r2
 202f4ac:	e13fff17 	ldw	r4,-4(fp)
 202f4b0:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
        
        return TSE_PHY_AN_NOT_CAPABLE;
 202f4b4:	00bfff84 	movi	r2,-2
 202f4b8:	00013206 	br	202f984 <alt_tse_phy_get_cap+0x580>
    }
    
    /* check whether link has been established */
    alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 202f4bc:	017e0034 	movhi	r5,63488
 202f4c0:	e13fff17 	ldw	r4,-4(fp)
 202f4c4:	202f0e80 	call	202f0e8 <alt_tse_phy_restart_an>
    
    if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 0) {
 202f4c8:	01c00044 	movi	r7,1
 202f4cc:	01800144 	movi	r6,5
 202f4d0:	01400044 	movi	r5,1
 202f4d4:	e13fff17 	ldw	r4,-4(fp)
 202f4d8:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f4dc:	1000021e 	bne	r2,zero,202f4e8 <alt_tse_phy_get_cap+0xe4>
        return_value = TSE_PHY_AN_NOT_COMPLETE;
 202f4e0:	00bfffc4 	movi	r2,-1
 202f4e4:	e0bffb15 	stw	r2,-20(fp)
    }
    
    /* get PHY capabilities */
    pphy->link_capability.cap_1000_base_x_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_FULL, 1);
 202f4e8:	01c00044 	movi	r7,1
 202f4ec:	018003c4 	movi	r6,15
 202f4f0:	014003c4 	movi	r5,15
 202f4f4:	e13fff17 	ldw	r4,-4(fp)
 202f4f8:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f4fc:	1007883a 	mov	r3,r2
 202f500:	e0bfff17 	ldw	r2,-4(fp)
 202f504:	10c00045 	stb	r3,1(r2)
    pphy->link_capability.cap_1000_base_x_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_X_HALF, 1);
 202f508:	01c00044 	movi	r7,1
 202f50c:	01800384 	movi	r6,14
 202f510:	014003c4 	movi	r5,15
 202f514:	e13fff17 	ldw	r4,-4(fp)
 202f518:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f51c:	1007883a 	mov	r3,r2
 202f520:	e0bfff17 	ldw	r2,-4(fp)
 202f524:	10c00085 	stb	r3,2(r2)
    pphy->link_capability.cap_1000_base_t_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1);
 202f528:	01c00044 	movi	r7,1
 202f52c:	01800344 	movi	r6,13
 202f530:	014003c4 	movi	r5,15
 202f534:	e13fff17 	ldw	r4,-4(fp)
 202f538:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f53c:	1007883a 	mov	r3,r2
 202f540:	e0bfff17 	ldw	r2,-4(fp)
 202f544:	10c000c5 	stb	r3,3(r2)
    pphy->link_capability.cap_1000_base_t_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 202f548:	01c00044 	movi	r7,1
 202f54c:	01800304 	movi	r6,12
 202f550:	014003c4 	movi	r5,15
 202f554:	e13fff17 	ldw	r4,-4(fp)
 202f558:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f55c:	1007883a 	mov	r3,r2
 202f560:	e0bfff17 	ldw	r2,-4(fp)
 202f564:	10c00105 	stb	r3,4(r2)
    
    pphy->link_capability.cap_100_base_t4      = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 202f568:	01c00044 	movi	r7,1
 202f56c:	018003c4 	movi	r6,15
 202f570:	01400044 	movi	r5,1
 202f574:	e13fff17 	ldw	r4,-4(fp)
 202f578:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f57c:	1007883a 	mov	r3,r2
 202f580:	e0bfff17 	ldw	r2,-4(fp)
 202f584:	10c00145 	stb	r3,5(r2)
    pphy->link_capability.cap_100_base_x_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 202f588:	01c00044 	movi	r7,1
 202f58c:	01800384 	movi	r6,14
 202f590:	01400044 	movi	r5,1
 202f594:	e13fff17 	ldw	r4,-4(fp)
 202f598:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f59c:	1007883a 	mov	r3,r2
 202f5a0:	e0bfff17 	ldw	r2,-4(fp)
 202f5a4:	10c00185 	stb	r3,6(r2)
    pphy->link_capability.cap_100_base_x_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 202f5a8:	01c00044 	movi	r7,1
 202f5ac:	01800344 	movi	r6,13
 202f5b0:	01400044 	movi	r5,1
 202f5b4:	e13fff17 	ldw	r4,-4(fp)
 202f5b8:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f5bc:	1007883a 	mov	r3,r2
 202f5c0:	e0bfff17 	ldw	r2,-4(fp)
 202f5c4:	10c001c5 	stb	r3,7(r2)
    pphy->link_capability.cap_100_base_t2_full = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_FULL, 1);
 202f5c8:	01c00044 	movi	r7,1
 202f5cc:	01800284 	movi	r6,10
 202f5d0:	01400044 	movi	r5,1
 202f5d4:	e13fff17 	ldw	r4,-4(fp)
 202f5d8:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f5dc:	1007883a 	mov	r3,r2
 202f5e0:	e0bfff17 	ldw	r2,-4(fp)
 202f5e4:	10c00205 	stb	r3,8(r2)
    pphy->link_capability.cap_100_base_t2_half = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T2_HALF, 1);
 202f5e8:	01c00044 	movi	r7,1
 202f5ec:	01800244 	movi	r6,9
 202f5f0:	01400044 	movi	r5,1
 202f5f4:	e13fff17 	ldw	r4,-4(fp)
 202f5f8:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f5fc:	1007883a 	mov	r3,r2
 202f600:	e0bfff17 	ldw	r2,-4(fp)
 202f604:	10c00245 	stb	r3,9(r2)
    pphy->link_capability.cap_10_base_t_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 202f608:	01c00044 	movi	r7,1
 202f60c:	01800304 	movi	r6,12
 202f610:	01400044 	movi	r5,1
 202f614:	e13fff17 	ldw	r4,-4(fp)
 202f618:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f61c:	1007883a 	mov	r3,r2
 202f620:	e0bfff17 	ldw	r2,-4(fp)
 202f624:	10c00285 	stb	r3,10(r2)
    pphy->link_capability.cap_10_base_t_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 202f628:	01c00044 	movi	r7,1
 202f62c:	018002c4 	movi	r6,11
 202f630:	01400044 	movi	r5,1
 202f634:	e13fff17 	ldw	r4,-4(fp)
 202f638:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f63c:	1007883a 	mov	r3,r2
 202f640:	e0bfff17 	ldw	r2,-4(fp)
 202f644:	10c002c5 	stb	r3,11(r2)
    
    /* get link partner capability */
    pphy->link_capability.lp_1000_base_t_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_FULL_ADV, 1);
 202f648:	01c00044 	movi	r7,1
 202f64c:	018002c4 	movi	r6,11
 202f650:	01400284 	movi	r5,10
 202f654:	e13fff17 	ldw	r4,-4(fp)
 202f658:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f65c:	1007883a 	mov	r3,r2
 202f660:	e0bfff17 	ldw	r2,-4(fp)
 202f664:	10c00305 	stb	r3,12(r2)
    pphy->link_capability.lp_1000_base_t_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_STATUS, TSE_PHY_MDIO_1000BASE_T_STATUS_LP_HALF_ADV, 1);
 202f668:	01c00044 	movi	r7,1
 202f66c:	01800284 	movi	r6,10
 202f670:	01400284 	movi	r5,10
 202f674:	e13fff17 	ldw	r4,-4(fp)
 202f678:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f67c:	1007883a 	mov	r3,r2
 202f680:	e0bfff17 	ldw	r2,-4(fp)
 202f684:	10c00345 	stb	r3,13(r2)
    
    pphy->link_capability.lp_100_base_t4       = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1);
 202f688:	01c00044 	movi	r7,1
 202f68c:	01800244 	movi	r6,9
 202f690:	01400144 	movi	r5,5
 202f694:	e13fff17 	ldw	r4,-4(fp)
 202f698:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f69c:	1007883a 	mov	r3,r2
 202f6a0:	e0bfff17 	ldw	r2,-4(fp)
 202f6a4:	10c00385 	stb	r3,14(r2)
    pphy->link_capability.lp_100_base_tx_full  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1);
 202f6a8:	01c00044 	movi	r7,1
 202f6ac:	01800204 	movi	r6,8
 202f6b0:	01400144 	movi	r5,5
 202f6b4:	e13fff17 	ldw	r4,-4(fp)
 202f6b8:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f6bc:	1007883a 	mov	r3,r2
 202f6c0:	e0bfff17 	ldw	r2,-4(fp)
 202f6c4:	10c003c5 	stb	r3,15(r2)
    pphy->link_capability.lp_100_base_tx_half  = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1);
 202f6c8:	01c00044 	movi	r7,1
 202f6cc:	018001c4 	movi	r6,7
 202f6d0:	01400144 	movi	r5,5
 202f6d4:	e13fff17 	ldw	r4,-4(fp)
 202f6d8:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f6dc:	1007883a 	mov	r3,r2
 202f6e0:	e0bfff17 	ldw	r2,-4(fp)
 202f6e4:	10c00405 	stb	r3,16(r2)
    pphy->link_capability.lp_10_base_tx_full   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1);
 202f6e8:	01c00044 	movi	r7,1
 202f6ec:	01800184 	movi	r6,6
 202f6f0:	01400144 	movi	r5,5
 202f6f4:	e13fff17 	ldw	r4,-4(fp)
 202f6f8:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f6fc:	1007883a 	mov	r3,r2
 202f700:	e0bfff17 	ldw	r2,-4(fp)
 202f704:	10c00445 	stb	r3,17(r2)
    pphy->link_capability.lp_10_base_tx_half   = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_REMADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1);
 202f708:	01c00044 	movi	r7,1
 202f70c:	01800144 	movi	r6,5
 202f710:	01400144 	movi	r5,5
 202f714:	e13fff17 	ldw	r4,-4(fp)
 202f718:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202f71c:	1007883a 	mov	r3,r2
 202f720:	e0bfff17 	ldw	r2,-4(fp)
 202f724:	10c00485 	stb	r3,18(r2)
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Capability of PHY :\n", mac_group_index, mac_info_index);
 202f728:	e0bffe47 	ldb	r2,-7(fp)
 202f72c:	e0fffe07 	ldb	r3,-8(fp)
 202f730:	180d883a 	mov	r6,r3
 202f734:	100b883a 	mov	r5,r2
 202f738:	01008134 	movhi	r4,516
 202f73c:	210b2204 	addi	r4,r4,11400
 202f740:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Full Duplex = %d\n", pphy->link_capability.cap_1000_base_x_full);
 202f744:	e0bfff17 	ldw	r2,-4(fp)
 202f748:	10800043 	ldbu	r2,1(r2)
 202f74c:	10803fcc 	andi	r2,r2,255
 202f750:	100b883a 	mov	r5,r2
 202f754:	01008134 	movhi	r4,516
 202f758:	210b2d04 	addi	r4,r4,11444
 202f75c:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-X Half Duplex = %d\n", pphy->link_capability.cap_1000_base_x_half);
 202f760:	e0bfff17 	ldw	r2,-4(fp)
 202f764:	10800083 	ldbu	r2,2(r2)
 202f768:	10803fcc 	andi	r2,r2,255
 202f76c:	100b883a 	mov	r5,r2
 202f770:	01008134 	movhi	r4,516
 202f774:	210b3704 	addi	r4,r4,11484
 202f778:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.cap_1000_base_t_full);
 202f77c:	e0bfff17 	ldw	r2,-4(fp)
 202f780:	108000c3 	ldbu	r2,3(r2)
 202f784:	10803fcc 	andi	r2,r2,255
 202f788:	100b883a 	mov	r5,r2
 202f78c:	01008134 	movhi	r4,516
 202f790:	210b4104 	addi	r4,r4,11524
 202f794:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.cap_1000_base_t_half);
 202f798:	e0bfff17 	ldw	r2,-4(fp)
 202f79c:	10800103 	ldbu	r2,4(r2)
 202f7a0:	10803fcc 	andi	r2,r2,255
 202f7a4:	100b883a 	mov	r5,r2
 202f7a8:	01008134 	movhi	r4,516
 202f7ac:	210b4b04 	addi	r4,r4,11564
 202f7b0:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.cap_100_base_t4);
 202f7b4:	e0bfff17 	ldw	r2,-4(fp)
 202f7b8:	10800143 	ldbu	r2,5(r2)
 202f7bc:	10803fcc 	andi	r2,r2,255
 202f7c0:	100b883a 	mov	r5,r2
 202f7c4:	01008134 	movhi	r4,516
 202f7c8:	210b5504 	addi	r4,r4,11604
 202f7cc:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Full Duplex  = %d\n", pphy->link_capability.cap_100_base_x_full);
 202f7d0:	e0bfff17 	ldw	r2,-4(fp)
 202f7d4:	10800183 	ldbu	r2,6(r2)
 202f7d8:	10803fcc 	andi	r2,r2,255
 202f7dc:	100b883a 	mov	r5,r2
 202f7e0:	01008134 	movhi	r4,516
 202f7e4:	210b5f04 	addi	r4,r4,11644
 202f7e8:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-X Half Duplex  = %d\n", pphy->link_capability.cap_100_base_x_half);
 202f7ec:	e0bfff17 	ldw	r2,-4(fp)
 202f7f0:	108001c3 	ldbu	r2,7(r2)
 202f7f4:	10803fcc 	andi	r2,r2,255
 202f7f8:	100b883a 	mov	r5,r2
 202f7fc:	01008134 	movhi	r4,516
 202f800:	210b6904 	addi	r4,r4,11684
 202f804:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Full Duplex = %d\n", pphy->link_capability.cap_100_base_t2_full);
 202f808:	e0bfff17 	ldw	r2,-4(fp)
 202f80c:	10800203 	ldbu	r2,8(r2)
 202f810:	10803fcc 	andi	r2,r2,255
 202f814:	100b883a 	mov	r5,r2
 202f818:	01008134 	movhi	r4,516
 202f81c:	210b7304 	addi	r4,r4,11724
 202f820:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T2 Half Duplex = %d\n", pphy->link_capability.cap_100_base_t2_half);
 202f824:	e0bfff17 	ldw	r2,-4(fp)
 202f828:	10800243 	ldbu	r2,9(r2)
 202f82c:	10803fcc 	andi	r2,r2,255
 202f830:	100b883a 	mov	r5,r2
 202f834:	01008134 	movhi	r4,516
 202f838:	210b7d04 	addi	r4,r4,11764
 202f83c:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Full Duplex   = %d\n", pphy->link_capability.cap_10_base_t_full);
 202f840:	e0bfff17 	ldw	r2,-4(fp)
 202f844:	10800283 	ldbu	r2,10(r2)
 202f848:	10803fcc 	andi	r2,r2,255
 202f84c:	100b883a 	mov	r5,r2
 202f850:	01008134 	movhi	r4,516
 202f854:	210b8704 	addi	r4,r4,11804
 202f858:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-T Half Duplex   = %d\n", pphy->link_capability.cap_10_base_t_half);
 202f85c:	e0bfff17 	ldw	r2,-4(fp)
 202f860:	108002c3 	ldbu	r2,11(r2)
 202f864:	10803fcc 	andi	r2,r2,255
 202f868:	100b883a 	mov	r5,r2
 202f86c:	01008134 	movhi	r4,516
 202f870:	210b9104 	addi	r4,r4,11844
 202f874:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "\n");
 202f878:	01008134 	movhi	r4,516
 202f87c:	2109f704 	addi	r4,r4,10204
 202f880:	202bb200 	call	202bb20 <no_printf>
    
    tse_dprintf(6, "INFO    : PHY[%d.%d] - Link Partner Capability :\n", mac_group_index, mac_info_index);
 202f884:	e0bffe47 	ldb	r2,-7(fp)
 202f888:	e0fffe07 	ldb	r3,-8(fp)
 202f88c:	180d883a 	mov	r6,r3
 202f890:	100b883a 	mov	r5,r2
 202f894:	01008134 	movhi	r4,516
 202f898:	210b9b04 	addi	r4,r4,11884
 202f89c:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Full Duplex = %d\n", pphy->link_capability.lp_1000_base_t_full);
 202f8a0:	e0bfff17 	ldw	r2,-4(fp)
 202f8a4:	10800303 	ldbu	r2,12(r2)
 202f8a8:	10803fcc 	andi	r2,r2,255
 202f8ac:	100b883a 	mov	r5,r2
 202f8b0:	01008134 	movhi	r4,516
 202f8b4:	210b4104 	addi	r4,r4,11524
 202f8b8:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 1000 Base-T Half Duplex = %d\n", pphy->link_capability.lp_1000_base_t_half);
 202f8bc:	e0bfff17 	ldw	r2,-4(fp)
 202f8c0:	10800343 	ldbu	r2,13(r2)
 202f8c4:	10803fcc 	andi	r2,r2,255
 202f8c8:	100b883a 	mov	r5,r2
 202f8cc:	01008134 	movhi	r4,516
 202f8d0:	210b4b04 	addi	r4,r4,11564
 202f8d4:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-T4             = %d\n", pphy->link_capability.lp_100_base_t4);
 202f8d8:	e0bfff17 	ldw	r2,-4(fp)
 202f8dc:	10800383 	ldbu	r2,14(r2)
 202f8e0:	10803fcc 	andi	r2,r2,255
 202f8e4:	100b883a 	mov	r5,r2
 202f8e8:	01008134 	movhi	r4,516
 202f8ec:	210b5504 	addi	r4,r4,11604
 202f8f0:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Full Duplex = %d\n", pphy->link_capability.lp_100_base_tx_full);
 202f8f4:	e0bfff17 	ldw	r2,-4(fp)
 202f8f8:	108003c3 	ldbu	r2,15(r2)
 202f8fc:	10803fcc 	andi	r2,r2,255
 202f900:	100b883a 	mov	r5,r2
 202f904:	01008134 	movhi	r4,516
 202f908:	210ba804 	addi	r4,r4,11936
 202f90c:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 100 Base-TX Half Duplex = %d\n", pphy->link_capability.lp_100_base_tx_half);
 202f910:	e0bfff17 	ldw	r2,-4(fp)
 202f914:	10800403 	ldbu	r2,16(r2)
 202f918:	10803fcc 	andi	r2,r2,255
 202f91c:	100b883a 	mov	r5,r2
 202f920:	01008134 	movhi	r4,516
 202f924:	210bb204 	addi	r4,r4,11976
 202f928:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Full Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_full);
 202f92c:	e0bfff17 	ldw	r2,-4(fp)
 202f930:	10800443 	ldbu	r2,17(r2)
 202f934:	10803fcc 	andi	r2,r2,255
 202f938:	100b883a 	mov	r5,r2
 202f93c:	01008134 	movhi	r4,516
 202f940:	210bbc04 	addi	r4,r4,12016
 202f944:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "INFO    : 10 Base-TX Half Duplex  = %d\n", pphy->link_capability.lp_10_base_tx_half);
 202f948:	e0bfff17 	ldw	r2,-4(fp)
 202f94c:	10800483 	ldbu	r2,18(r2)
 202f950:	10803fcc 	andi	r2,r2,255
 202f954:	100b883a 	mov	r5,r2
 202f958:	01008134 	movhi	r4,516
 202f95c:	210bc604 	addi	r4,r4,12056
 202f960:	202bb200 	call	202bb20 <no_printf>
    tse_dprintf(6, "\n");
 202f964:	01008134 	movhi	r4,516
 202f968:	2109f704 	addi	r4,r4,10204
 202f96c:	202bb200 	call	202bb20 <no_printf>
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 202f970:	e0bffe83 	ldbu	r2,-6(fp)
 202f974:	100b883a 	mov	r5,r2
 202f978:	e13fff17 	ldw	r4,-4(fp)
 202f97c:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
    
    return return_value;
 202f980:	e0bffb17 	ldw	r2,-20(fp)
    
}
 202f984:	e037883a 	mov	sp,fp
 202f988:	dfc00117 	ldw	ra,4(sp)
 202f98c:	df000017 	ldw	fp,0(sp)
 202f990:	dec00204 	addi	sp,sp,8
 202f994:	f800283a 	ret

0202f998 <alt_tse_phy_set_adv_1000>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_1000(alt_tse_phy_info *pphy, alt_u8 enable) {
 202f998:	defff804 	addi	sp,sp,-32
 202f99c:	dfc00715 	stw	ra,28(sp)
 202f9a0:	df000615 	stw	fp,24(sp)
 202f9a4:	df000604 	addi	fp,sp,24
 202f9a8:	e13ffe15 	stw	r4,-8(fp)
 202f9ac:	2805883a 	mov	r2,r5
 202f9b0:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 202f9b4:	e0bffe17 	ldw	r2,-8(fp)
 202f9b8:	10800617 	ldw	r2,24(r2)
 202f9bc:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 202f9c0:	e0bffb17 	ldw	r2,-20(fp)
 202f9c4:	10800317 	ldw	r2,12(r2)
 202f9c8:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 202f9cc:	e13ffb17 	ldw	r4,-20(fp)
 202f9d0:	202cd180 	call	202cd18 <alt_tse_get_mac_info_index>
 202f9d4:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 202f9d8:	e13ffc17 	ldw	r4,-16(fp)
 202f9dc:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 202f9e0:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 202f9e4:	e13ffe17 	ldw	r4,-8(fp)
 202f9e8:	202da580 	call	202da58 <alt_tse_phy_rd_mdio_addr>
 202f9ec:	e0bffd85 	stb	r2,-10(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 202f9f0:	e0bffe17 	ldw	r2,-8(fp)
 202f9f4:	10800003 	ldbu	r2,0(r2)
 202f9f8:	10803fcc 	andi	r2,r2,255
 202f9fc:	100b883a 	mov	r5,r2
 202fa00:	e13ffe17 	ldw	r4,-8(fp)
 202fa04:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 202fa08:	e0bfff03 	ldbu	r2,-4(fp)
 202fa0c:	10002d26 	beq	r2,zero,202fac4 <alt_tse_phy_set_adv_1000+0x12c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_FULL, 1); 
 202fa10:	01c00044 	movi	r7,1
 202fa14:	01800344 	movi	r6,13
 202fa18:	014003c4 	movi	r5,15
 202fa1c:	e13ffe17 	ldw	r4,-8(fp)
 202fa20:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202fa24:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, cap);
 202fa28:	e0bffdc3 	ldbu	r2,-9(fp)
 202fa2c:	d8800015 	stw	r2,0(sp)
 202fa30:	01c00044 	movi	r7,1
 202fa34:	01800244 	movi	r6,9
 202fa38:	01400244 	movi	r5,9
 202fa3c:	e13ffe17 	ldw	r4,-8(fp)
 202fa40:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 202fa44:	e0bffd47 	ldb	r2,-11(fp)
 202fa48:	e0fffd07 	ldb	r3,-12(fp)
 202fa4c:	e13ffdc3 	ldbu	r4,-9(fp)
 202fa50:	200f883a 	mov	r7,r4
 202fa54:	180d883a 	mov	r6,r3
 202fa58:	100b883a 	mov	r5,r2
 202fa5c:	01008134 	movhi	r4,516
 202fa60:	210bd004 	addi	r4,r4,12096
 202fa64:	202bb200 	call	202bb20 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_EXT_STATUS, TSE_PHY_MDIO_EXT_STATUS_1000BASE_T_HALF, 1);
 202fa68:	01c00044 	movi	r7,1
 202fa6c:	01800304 	movi	r6,12
 202fa70:	014003c4 	movi	r5,15
 202fa74:	e13ffe17 	ldw	r4,-8(fp)
 202fa78:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202fa7c:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, cap);
 202fa80:	e0bffdc3 	ldbu	r2,-9(fp)
 202fa84:	d8800015 	stw	r2,0(sp)
 202fa88:	01c00044 	movi	r7,1
 202fa8c:	01800204 	movi	r6,8
 202fa90:	01400244 	movi	r5,9
 202fa94:	e13ffe17 	ldw	r4,-8(fp)
 202fa98:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 202fa9c:	e0bffd47 	ldb	r2,-11(fp)
 202faa0:	e0fffd07 	ldb	r3,-12(fp)
 202faa4:	e13ffdc3 	ldbu	r4,-9(fp)
 202faa8:	200f883a 	mov	r7,r4
 202faac:	180d883a 	mov	r6,r3
 202fab0:	100b883a 	mov	r5,r2
 202fab4:	01008134 	movhi	r4,516
 202fab8:	210be304 	addi	r4,r4,12172
 202fabc:	202bb200 	call	202bb20 <no_printf>
 202fac0:	00001c06 	br	202fb34 <alt_tse_phy_set_adv_1000+0x19c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_FULL_ADV, 1, 0);
 202fac4:	d8000015 	stw	zero,0(sp)
 202fac8:	01c00044 	movi	r7,1
 202facc:	01800244 	movi	r6,9
 202fad0:	01400244 	movi	r5,9
 202fad4:	e13ffe17 	ldw	r4,-8(fp)
 202fad8:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 1000 Base-T Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 202fadc:	e0bffd47 	ldb	r2,-11(fp)
 202fae0:	e0fffd07 	ldb	r3,-12(fp)
 202fae4:	000f883a 	mov	r7,zero
 202fae8:	180d883a 	mov	r6,r3
 202faec:	100b883a 	mov	r5,r2
 202faf0:	01008134 	movhi	r4,516
 202faf4:	210bd004 	addi	r4,r4,12096
 202faf8:	202bb200 	call	202bb20 <no_printf>
        
        /* 1000 Mbps Half duplex not supported by TSE MAC */
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_1000BASE_T_CTRL, TSE_PHY_MDIO_1000BASE_T_CTRL_HALF_ADV, 1, 0);
 202fafc:	d8000015 	stw	zero,0(sp)
 202fb00:	01c00044 	movi	r7,1
 202fb04:	01800204 	movi	r6,8
 202fb08:	01400244 	movi	r5,9
 202fb0c:	e13ffe17 	ldw	r4,-8(fp)
 202fb10:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement 1000 Base-T half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 202fb14:	e0bffd47 	ldb	r2,-11(fp)
 202fb18:	e0fffd07 	ldb	r3,-12(fp)
 202fb1c:	000f883a 	mov	r7,zero
 202fb20:	180d883a 	mov	r6,r3
 202fb24:	100b883a 	mov	r5,r2
 202fb28:	01008134 	movhi	r4,516
 202fb2c:	210bf604 	addi	r4,r4,12248
 202fb30:	202bb200 	call	202bb20 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);    
 202fb34:	e0bffd83 	ldbu	r2,-10(fp)
 202fb38:	100b883a 	mov	r5,r2
 202fb3c:	e13ffe17 	ldw	r4,-8(fp)
 202fb40:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>

    return SUCCESS;
 202fb44:	0005883a 	mov	r2,zero
}
 202fb48:	e037883a 	mov	sp,fp
 202fb4c:	dfc00117 	ldw	ra,4(sp)
 202fb50:	df000017 	ldw	fp,0(sp)
 202fb54:	dec00204 	addi	sp,sp,8
 202fb58:	f800283a 	ret

0202fb5c <alt_tse_phy_set_adv_100>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_100(alt_tse_phy_info *pphy, alt_u8 enable) {
 202fb5c:	defff804 	addi	sp,sp,-32
 202fb60:	dfc00715 	stw	ra,28(sp)
 202fb64:	df000615 	stw	fp,24(sp)
 202fb68:	df000604 	addi	fp,sp,24
 202fb6c:	e13ffe15 	stw	r4,-8(fp)
 202fb70:	2805883a 	mov	r2,r5
 202fb74:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 202fb78:	e0bffe17 	ldw	r2,-8(fp)
 202fb7c:	10800617 	ldw	r2,24(r2)
 202fb80:	e0bffb15 	stw	r2,-20(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 202fb84:	e0bffb17 	ldw	r2,-20(fp)
 202fb88:	10800317 	ldw	r2,12(r2)
 202fb8c:	e0bffc15 	stw	r2,-16(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 202fb90:	e13ffb17 	ldw	r4,-20(fp)
 202fb94:	202cd180 	call	202cd18 <alt_tse_get_mac_info_index>
 202fb98:	e0bffd05 	stb	r2,-12(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 202fb9c:	e13ffc17 	ldw	r4,-16(fp)
 202fba0:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 202fba4:	e0bffd45 	stb	r2,-11(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    alt_u8 mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 202fba8:	e13ffe17 	ldw	r4,-8(fp)
 202fbac:	202da580 	call	202da58 <alt_tse_phy_rd_mdio_addr>
 202fbb0:	e0bffd85 	stb	r2,-10(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 202fbb4:	e0bffe17 	ldw	r2,-8(fp)
 202fbb8:	10800003 	ldbu	r2,0(r2)
 202fbbc:	10803fcc 	andi	r2,r2,255
 202fbc0:	100b883a 	mov	r5,r2
 202fbc4:	e13ffe17 	ldw	r4,-8(fp)
 202fbc8:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 202fbcc:	e0bfff03 	ldbu	r2,-4(fp)
 202fbd0:	10004326 	beq	r2,zero,202fce0 <alt_tse_phy_set_adv_100+0x184>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_T4, 1);
 202fbd4:	01c00044 	movi	r7,1
 202fbd8:	018003c4 	movi	r6,15
 202fbdc:	01400044 	movi	r5,1
 202fbe0:	e13ffe17 	ldw	r4,-8(fp)
 202fbe4:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202fbe8:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, cap);
 202fbec:	e0bffdc3 	ldbu	r2,-9(fp)
 202fbf0:	d8800015 	stw	r2,0(sp)
 202fbf4:	01c00044 	movi	r7,1
 202fbf8:	01800244 	movi	r6,9
 202fbfc:	01400104 	movi	r5,4
 202fc00:	e13ffe17 	ldw	r4,-8(fp)
 202fc04:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, cap);
 202fc08:	e0bffd47 	ldb	r2,-11(fp)
 202fc0c:	e0fffd07 	ldb	r3,-12(fp)
 202fc10:	e13ffdc3 	ldbu	r4,-9(fp)
 202fc14:	200f883a 	mov	r7,r4
 202fc18:	180d883a 	mov	r6,r3
 202fc1c:	100b883a 	mov	r5,r2
 202fc20:	01008134 	movhi	r4,516
 202fc24:	210c0804 	addi	r4,r4,12320
 202fc28:	202bb200 	call	202bb20 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_FULL, 1);
 202fc2c:	01c00044 	movi	r7,1
 202fc30:	01800384 	movi	r6,14
 202fc34:	01400044 	movi	r5,1
 202fc38:	e13ffe17 	ldw	r4,-8(fp)
 202fc3c:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202fc40:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, cap);
 202fc44:	e0bffdc3 	ldbu	r2,-9(fp)
 202fc48:	d8800015 	stw	r2,0(sp)
 202fc4c:	01c00044 	movi	r7,1
 202fc50:	01800204 	movi	r6,8
 202fc54:	01400104 	movi	r5,4
 202fc58:	e13ffe17 	ldw	r4,-8(fp)
 202fc5c:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 202fc60:	e0bffd47 	ldb	r2,-11(fp)
 202fc64:	e0fffd07 	ldb	r3,-12(fp)
 202fc68:	e13ffdc3 	ldbu	r4,-9(fp)
 202fc6c:	200f883a 	mov	r7,r4
 202fc70:	180d883a 	mov	r6,r3
 202fc74:	100b883a 	mov	r5,r2
 202fc78:	01008134 	movhi	r4,516
 202fc7c:	210c1804 	addi	r4,r4,12384
 202fc80:	202bb200 	call	202bb20 <no_printf>
        
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_100BASE_X_HALF, 1);
 202fc84:	01c00044 	movi	r7,1
 202fc88:	01800344 	movi	r6,13
 202fc8c:	01400044 	movi	r5,1
 202fc90:	e13ffe17 	ldw	r4,-8(fp)
 202fc94:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202fc98:	e0bffdc5 	stb	r2,-9(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, cap);
 202fc9c:	e0bffdc3 	ldbu	r2,-9(fp)
 202fca0:	d8800015 	stw	r2,0(sp)
 202fca4:	01c00044 	movi	r7,1
 202fca8:	018001c4 	movi	r6,7
 202fcac:	01400104 	movi	r5,4
 202fcb0:	e13ffe17 	ldw	r4,-8(fp)
 202fcb4:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 202fcb8:	e0bffd47 	ldb	r2,-11(fp)
 202fcbc:	e0fffd07 	ldb	r3,-12(fp)
 202fcc0:	e13ffdc3 	ldbu	r4,-9(fp)
 202fcc4:	200f883a 	mov	r7,r4
 202fcc8:	180d883a 	mov	r6,r3
 202fccc:	100b883a 	mov	r5,r2
 202fcd0:	01008134 	movhi	r4,516
 202fcd4:	210c2b04 	addi	r4,r4,12460
 202fcd8:	202bb200 	call	202bb20 <no_printf>
 202fcdc:	00002a06 	br	202fd88 <alt_tse_phy_set_adv_100+0x22c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_T4, 1, 0);
 202fce0:	d8000015 	stw	zero,0(sp)
 202fce4:	01c00044 	movi	r7,1
 202fce8:	01800244 	movi	r6,9
 202fcec:	01400104 	movi	r5,4
 202fcf0:	e13ffe17 	ldw	r4,-8(fp)
 202fcf4:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-T4 set to %d\n", mac_group_index, mac_info_index, 0);
 202fcf8:	e0bffd47 	ldb	r2,-11(fp)
 202fcfc:	e0fffd07 	ldb	r3,-12(fp)
 202fd00:	000f883a 	mov	r7,zero
 202fd04:	180d883a 	mov	r6,r3
 202fd08:	100b883a 	mov	r5,r2
 202fd0c:	01008134 	movhi	r4,516
 202fd10:	210c0804 	addi	r4,r4,12320
 202fd14:	202bb200 	call	202bb20 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_FULL, 1, 0);
 202fd18:	d8000015 	stw	zero,0(sp)
 202fd1c:	01c00044 	movi	r7,1
 202fd20:	01800204 	movi	r6,8
 202fd24:	01400104 	movi	r5,4
 202fd28:	e13ffe17 	ldw	r4,-8(fp)
 202fd2c:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 202fd30:	e0bffd47 	ldb	r2,-11(fp)
 202fd34:	e0fffd07 	ldb	r3,-12(fp)
 202fd38:	000f883a 	mov	r7,zero
 202fd3c:	180d883a 	mov	r6,r3
 202fd40:	100b883a 	mov	r5,r2
 202fd44:	01008134 	movhi	r4,516
 202fd48:	210c1804 	addi	r4,r4,12384
 202fd4c:	202bb200 	call	202bb20 <no_printf>
        
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_100BASE_TX_HALF, 1, 0);
 202fd50:	d8000015 	stw	zero,0(sp)
 202fd54:	01c00044 	movi	r7,1
 202fd58:	018001c4 	movi	r6,7
 202fd5c:	01400104 	movi	r5,4
 202fd60:	e13ffe17 	ldw	r4,-8(fp)
 202fd64:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 100 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 202fd68:	e0bffd47 	ldb	r2,-11(fp)
 202fd6c:	e0fffd07 	ldb	r3,-12(fp)
 202fd70:	000f883a 	mov	r7,zero
 202fd74:	180d883a 	mov	r6,r3
 202fd78:	100b883a 	mov	r5,r2
 202fd7c:	01008134 	movhi	r4,516
 202fd80:	210c2b04 	addi	r4,r4,12460
 202fd84:	202bb200 	call	202bb20 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);  
 202fd88:	e0bffd83 	ldbu	r2,-10(fp)
 202fd8c:	100b883a 	mov	r5,r2
 202fd90:	e13ffe17 	ldw	r4,-8(fp)
 202fd94:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 202fd98:	0005883a 	mov	r2,zero
}
 202fd9c:	e037883a 	mov	sp,fp
 202fda0:	dfc00117 	ldw	ra,4(sp)
 202fda4:	df000017 	ldw	fp,0(sp)
 202fda8:	dec00204 	addi	sp,sp,8
 202fdac:	f800283a 	ret

0202fdb0 <alt_tse_phy_set_adv_10>:
 * @param pmac   Pointer to the alt_tse_phy_info structure
 *        enable set Enable = 1 to advertise this speed if the PHY capable
 *               set Enable = 0 to disable advertise of this speed
 * @return       return SUCCESS
 */
alt_32 alt_tse_phy_set_adv_10(alt_tse_phy_info *pphy, alt_u8 enable) {
 202fdb0:	defff504 	addi	sp,sp,-44
 202fdb4:	dfc00a15 	stw	ra,40(sp)
 202fdb8:	df000915 	stw	fp,36(sp)
 202fdbc:	df000904 	addi	fp,sp,36
 202fdc0:	e13ffe15 	stw	r4,-8(fp)
 202fdc4:	2805883a 	mov	r2,r5
 202fdc8:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 cap;
    
    /* pointer to MAC associated and MAC group */
    alt_tse_mac_info *pmac_info = pphy->pmac_info;
 202fdcc:	e0bffe17 	ldw	r2,-8(fp)
 202fdd0:	10800617 	ldw	r2,24(r2)
 202fdd4:	e0bff815 	stw	r2,-32(fp)
    alt_tse_mac_group *pmac_group = pmac_info->pmac_group;
 202fdd8:	e0bff817 	ldw	r2,-32(fp)
 202fddc:	10800317 	ldw	r2,12(r2)
 202fde0:	e0bff915 	stw	r2,-28(fp)
    
    /* get index of the pointers in pointer array list */
    int mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 202fde4:	e13ff817 	ldw	r4,-32(fp)
 202fde8:	202cd180 	call	202cd18 <alt_tse_get_mac_info_index>
 202fdec:	e0bffa15 	stw	r2,-24(fp)
    int mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 202fdf0:	e13ff917 	ldw	r4,-28(fp)
 202fdf4:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 202fdf8:	e0bffb15 	stw	r2,-20(fp)
    
    /* Record previous MDIO address, to be restored at the end of function */
    int mdioadd_prev = alt_tse_phy_rd_mdio_addr(pphy); 
 202fdfc:	e13ffe17 	ldw	r4,-8(fp)
 202fe00:	202da580 	call	202da58 <alt_tse_phy_rd_mdio_addr>
 202fe04:	e0bffc15 	stw	r2,-16(fp)
       
    /* write PHY address to MDIO to access the i-th PHY */
    alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 202fe08:	e0bffe17 	ldw	r2,-8(fp)
 202fe0c:	10800003 	ldbu	r2,0(r2)
 202fe10:	10803fcc 	andi	r2,r2,255
 202fe14:	100b883a 	mov	r5,r2
 202fe18:	e13ffe17 	ldw	r4,-8(fp)
 202fe1c:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
    
    /* if enable = 1, set advertisement based on PHY capability */
    if(enable) {
 202fe20:	e0bfff03 	ldbu	r2,-4(fp)
 202fe24:	10002926 	beq	r2,zero,202fecc <alt_tse_phy_set_adv_10+0x11c>
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_FULL, 1);
 202fe28:	01c00044 	movi	r7,1
 202fe2c:	01800304 	movi	r6,12
 202fe30:	01400044 	movi	r5,1
 202fe34:	e13ffe17 	ldw	r4,-8(fp)
 202fe38:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202fe3c:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, cap);
 202fe40:	e0bffd03 	ldbu	r2,-12(fp)
 202fe44:	d8800015 	stw	r2,0(sp)
 202fe48:	01c00044 	movi	r7,1
 202fe4c:	01800184 	movi	r6,6
 202fe50:	01400104 	movi	r5,4
 202fe54:	e13ffe17 	ldw	r4,-8(fp)
 202fe58:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 202fe5c:	e0bffd03 	ldbu	r2,-12(fp)
 202fe60:	100f883a 	mov	r7,r2
 202fe64:	e1bffa17 	ldw	r6,-24(fp)
 202fe68:	e17ffb17 	ldw	r5,-20(fp)
 202fe6c:	01008134 	movhi	r4,516
 202fe70:	210c3e04 	addi	r4,r4,12536
 202fe74:	202bb200 	call	202bb20 <no_printf>
    
        cap = alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_10BASE_T_HALF, 1);
 202fe78:	01c00044 	movi	r7,1
 202fe7c:	018002c4 	movi	r6,11
 202fe80:	01400044 	movi	r5,1
 202fe84:	e13ffe17 	ldw	r4,-8(fp)
 202fe88:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 202fe8c:	e0bffd05 	stb	r2,-12(fp)
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, cap);
 202fe90:	e0bffd03 	ldbu	r2,-12(fp)
 202fe94:	d8800015 	stw	r2,0(sp)
 202fe98:	01c00044 	movi	r7,1
 202fe9c:	01800144 	movi	r6,5
 202fea0:	01400104 	movi	r5,4
 202fea4:	e13ffe17 	ldw	r4,-8(fp)
 202fea8:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, cap);
 202feac:	e0bffd03 	ldbu	r2,-12(fp)
 202feb0:	100f883a 	mov	r7,r2
 202feb4:	e1bffa17 	ldw	r6,-24(fp)
 202feb8:	e17ffb17 	ldw	r5,-20(fp)
 202febc:	01008134 	movhi	r4,516
 202fec0:	210c5104 	addi	r4,r4,12612
 202fec4:	202bb200 	call	202bb20 <no_printf>
 202fec8:	00001806 	br	202ff2c <alt_tse_phy_set_adv_10+0x17c>
    }
    /* else disable advertisement of this speed */
    else {
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_FULL, 1, 0);
 202fecc:	d8000015 	stw	zero,0(sp)
 202fed0:	01c00044 	movi	r7,1
 202fed4:	01800184 	movi	r6,6
 202fed8:	01400104 	movi	r5,4
 202fedc:	e13ffe17 	ldw	r4,-8(fp)
 202fee0:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Full Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 202fee4:	000f883a 	mov	r7,zero
 202fee8:	e1bffa17 	ldw	r6,-24(fp)
 202feec:	e17ffb17 	ldw	r5,-20(fp)
 202fef0:	01008134 	movhi	r4,516
 202fef4:	210c3e04 	addi	r4,r4,12536
 202fef8:	202bb200 	call	202bb20 <no_printf>
    
        alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_ADV, TSE_PHY_MDIO_ADV_10BASE_TX_HALF, 1, 0);
 202fefc:	d8000015 	stw	zero,0(sp)
 202ff00:	01c00044 	movi	r7,1
 202ff04:	01800144 	movi	r6,5
 202ff08:	01400104 	movi	r5,4
 202ff0c:	e13ffe17 	ldw	r4,-8(fp)
 202ff10:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
        tse_dprintf(6, "INFO    : PHY[%d.%d] - Advertisement of 10 Base-TX Half Duplex set to %d\n", mac_group_index, mac_info_index, 0);
 202ff14:	000f883a 	mov	r7,zero
 202ff18:	e1bffa17 	ldw	r6,-24(fp)
 202ff1c:	e17ffb17 	ldw	r5,-20(fp)
 202ff20:	01008134 	movhi	r4,516
 202ff24:	210c5104 	addi	r4,r4,12612
 202ff28:	202bb200 	call	202bb20 <no_printf>
    }
    
    /* Restore previous MDIO address */
    alt_tse_phy_wr_mdio_addr(pphy, mdioadd_prev);
 202ff2c:	e0bffc17 	ldw	r2,-16(fp)
 202ff30:	10803fcc 	andi	r2,r2,255
 202ff34:	100b883a 	mov	r5,r2
 202ff38:	e13ffe17 	ldw	r4,-8(fp)
 202ff3c:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>
    
    return SUCCESS;
 202ff40:	0005883a 	mov	r2,zero
}
 202ff44:	e037883a 	mov	sp,fp
 202ff48:	dfc00117 	ldw	ra,4(sp)
 202ff4c:	df000017 	ldw	fp,0(sp)
 202ff50:	dec00204 	addi	sp,sp,8
 202ff54:	f800283a 	ret

0202ff58 <alt_tse_phy_get_common_speed>:
/* @Function Description: Get the common speed supported by all PHYs connected to the MAC within the same group
 * @API Type:           Internal
 * @param pmac_group    Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 * @return              common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if no common speed found
 */
alt_32 alt_tse_phy_get_common_speed(alt_tse_mac_group *pmac_group) {
 202ff58:	defff604 	addi	sp,sp,-40
 202ff5c:	dfc00915 	stw	ra,36(sp)
 202ff60:	df000815 	stw	fp,32(sp)
 202ff64:	df000804 	addi	fp,sp,32
 202ff68:	e13fff15 	stw	r4,-4(fp)
    
	alt_32 i;
	alt_u8 common_1000 = 1;
 202ff6c:	00800044 	movi	r2,1
 202ff70:	e0bff905 	stb	r2,-28(fp)
	alt_u8 common_100 = 1;
 202ff74:	00800044 	movi	r2,1
 202ff78:	e0bff945 	stb	r2,-27(fp)
	alt_u8 common_10 = 1;
 202ff7c:	00800044 	movi	r2,1
 202ff80:	e0bff985 	stb	r2,-26(fp)
    
	alt_32 common_speed;
    
	alt_u8 none_an_complete = 1;
 202ff84:	00800044 	movi	r2,1
 202ff88:	e0bffb05 	stb	r2,-20(fp)
    
    alt_tse_mac_info *pmac_info = 0;
 202ff8c:	e03ffc15 	stw	zero,-16(fp)
    alt_tse_phy_info *pphy = 0;
 202ff90:	e03ffd15 	stw	zero,-12(fp)
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 202ff94:	e13fff17 	ldw	r4,-4(fp)
 202ff98:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 202ff9c:	e0bffe05 	stb	r2,-8(fp)
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 202ffa0:	e03ff815 	stw	zero,-32(fp)
 202ffa4:	00001c06 	br	2030018 <alt_tse_phy_get_common_speed+0xc0>
        pmac_info = pmac_group->pmac_info[i];
 202ffa8:	e0ffff17 	ldw	r3,-4(fp)
 202ffac:	e0bff817 	ldw	r2,-32(fp)
 202ffb0:	10800044 	addi	r2,r2,1
 202ffb4:	1085883a 	add	r2,r2,r2
 202ffb8:	1085883a 	add	r2,r2,r2
 202ffbc:	1885883a 	add	r2,r3,r2
 202ffc0:	10800017 	ldw	r2,0(r2)
 202ffc4:	e0bffc15 	stw	r2,-16(fp)
        pphy = pmac_info->pphy_info;
 202ffc8:	e0bffc17 	ldw	r2,-16(fp)
 202ffcc:	10800117 	ldw	r2,4(r2)
 202ffd0:	e0bffd15 	stw	r2,-12(fp)
        
        /* run only if PHY connected */
        if(pphy) {
 202ffd4:	e0bffd17 	ldw	r2,-12(fp)
 202ffd8:	10000926 	beq	r2,zero,2030000 <alt_tse_phy_get_common_speed+0xa8>
            alt_tse_phy_set_adv_1000(pphy, 1);
 202ffdc:	01400044 	movi	r5,1
 202ffe0:	e13ffd17 	ldw	r4,-12(fp)
 202ffe4:	202f9980 	call	202f998 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 202ffe8:	01400044 	movi	r5,1
 202ffec:	e13ffd17 	ldw	r4,-12(fp)
 202fff0:	202fb5c0 	call	202fb5c <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 202fff4:	01400044 	movi	r5,1
 202fff8:	e13ffd17 	ldw	r4,-12(fp)
 202fffc:	202fdb00 	call	202fdb0 <alt_tse_phy_set_adv_10>
        }
        tse_dprintf(6, "\n");
 2030000:	01008134 	movhi	r4,516
 2030004:	2109f704 	addi	r4,r4,10204
 2030008:	202bb200 	call	202bb20 <no_printf>
    alt_tse_phy_info *pphy = 0;
    
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
    
    /* reset Auto-Negotiation advertisement */
    for(i = 0; i < pmac_group->channel; i++) {
 203000c:	e0bff817 	ldw	r2,-32(fp)
 2030010:	10800044 	addi	r2,r2,1
 2030014:	e0bff815 	stw	r2,-32(fp)
 2030018:	e0bfff17 	ldw	r2,-4(fp)
 203001c:	10800003 	ldbu	r2,0(r2)
 2030020:	10803fcc 	andi	r2,r2,255
 2030024:	e0fff817 	ldw	r3,-32(fp)
 2030028:	18bfdf16 	blt	r3,r2,202ffa8 <__alt_mem_mem_0+0xfd00ffa8>
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 203002c:	e03ff815 	stw	zero,-32(fp)
 2030030:	00005606 	br	203018c <alt_tse_phy_get_common_speed+0x234>

        pmac_info = pmac_group->pmac_info[i];
 2030034:	e0ffff17 	ldw	r3,-4(fp)
 2030038:	e0bff817 	ldw	r2,-32(fp)
 203003c:	10800044 	addi	r2,r2,1
 2030040:	1085883a 	add	r2,r2,r2
 2030044:	1085883a 	add	r2,r2,r2
 2030048:	1885883a 	add	r2,r3,r2
 203004c:	10800017 	ldw	r2,0(r2)
 2030050:	e0bffc15 	stw	r2,-16(fp)
        pphy = pmac_info->pphy_info;
 2030054:	e0bffc17 	ldw	r2,-16(fp)
 2030058:	10800117 	ldw	r2,4(r2)
 203005c:	e0bffd15 	stw	r2,-12(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 2030060:	e0bffd17 	ldw	r2,-12(fp)
 2030064:	10004326 	beq	r2,zero,2030174 <alt_tse_phy_get_common_speed+0x21c>
            continue;
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
 2030068:	e13ffd17 	ldw	r4,-12(fp)
 203006c:	202f4040 	call	202f404 <alt_tse_phy_get_cap>
 2030070:	1000421e 	bne	r2,zero,203017c <alt_tse_phy_get_common_speed+0x224>
            continue;
        }
        
        none_an_complete = 0;
 2030074:	e03ffb05 	stb	zero,-20(fp)
        
        /* Small MAC */
        if(pmac_info->mac_type == ALTERA_TSE_MACLITE_10_100) {
 2030078:	e0bffc17 	ldw	r2,-16(fp)
 203007c:	10800003 	ldbu	r2,0(r2)
 2030080:	10803fcc 	andi	r2,r2,255
 2030084:	10800058 	cmpnei	r2,r2,1
 2030088:	1000021e 	bne	r2,zero,2030094 <alt_tse_phy_get_common_speed+0x13c>
            common_1000 = 0;
 203008c:	e03ff905 	stb	zero,-28(fp)
 2030090:	00000706 	br	20300b0 <alt_tse_phy_get_common_speed+0x158>
        }
        else if(pmac_info->mac_type == ALTERA_TSE_MACLITE_1000) {
 2030094:	e0bffc17 	ldw	r2,-16(fp)
 2030098:	10800003 	ldbu	r2,0(r2)
 203009c:	10803fcc 	andi	r2,r2,255
 20300a0:	10800098 	cmpnei	r2,r2,2
 20300a4:	1000021e 	bne	r2,zero,20300b0 <alt_tse_phy_get_common_speed+0x158>
            common_100 = 0;
 20300a8:	e03ff945 	stb	zero,-27(fp)
            common_10 = 0;            
 20300ac:	e03ff985 	stb	zero,-26(fp)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
 20300b0:	e0bffd17 	ldw	r2,-12(fp)
 20300b4:	10c000c3 	ldbu	r3,3(r2)
 20300b8:	e0bffd17 	ldw	r2,-12(fp)
 20300bc:	10800303 	ldbu	r2,12(r2)
 20300c0:	1884703a 	and	r2,r3,r2
 20300c4:	1007883a 	mov	r3,r2
 20300c8:	e0bff903 	ldbu	r2,-28(fp)
 20300cc:	1884703a 	and	r2,r3,r2
 20300d0:	e0bff905 	stb	r2,-28(fp)
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 20300d4:	e0bffd17 	ldw	r2,-12(fp)
 20300d8:	10c00183 	ldbu	r3,6(r2)
 20300dc:	e0bffd17 	ldw	r2,-12(fp)
 20300e0:	108003c3 	ldbu	r2,15(r2)
 20300e4:	1884703a 	and	r2,r3,r2
 20300e8:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
 20300ec:	e0bffd17 	ldw	r2,-12(fp)
 20300f0:	10c001c3 	ldbu	r3,7(r2)
 20300f4:	e0bffd17 	ldw	r2,-12(fp)
 20300f8:	10800403 	ldbu	r2,16(r2)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 20300fc:	1884703a 	and	r2,r3,r2
 2030100:	2084b03a 	or	r2,r4,r2
 2030104:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
 2030108:	e0bffd17 	ldw	r2,-12(fp)
 203010c:	10c00143 	ldbu	r3,5(r2)
 2030110:	e0bffd17 	ldw	r2,-12(fp)
 2030114:	10800383 	ldbu	r2,14(r2)
        }
        
        /* get common capabilities for all PHYs and link partners */
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
 2030118:	1884703a 	and	r2,r3,r2
 203011c:	2084b03a 	or	r2,r4,r2
 2030120:	1007883a 	mov	r3,r2
 2030124:	e0bff943 	ldbu	r2,-27(fp)
 2030128:	1884703a 	and	r2,r3,r2
 203012c:	e0bff945 	stb	r2,-27(fp)
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 2030130:	e0bffd17 	ldw	r2,-12(fp)
 2030134:	10c00283 	ldbu	r3,10(r2)
 2030138:	e0bffd17 	ldw	r2,-12(fp)
 203013c:	10800443 	ldbu	r2,17(r2)
 2030140:	1884703a 	and	r2,r3,r2
 2030144:	1009883a 	mov	r4,r2
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));
 2030148:	e0bffd17 	ldw	r2,-12(fp)
 203014c:	10c002c3 	ldbu	r3,11(r2)
 2030150:	e0bffd17 	ldw	r2,-12(fp)
 2030154:	10800483 	ldbu	r2,18(r2)
        common_1000 &= ((pphy->link_capability.cap_1000_base_t_full & pphy->link_capability.lp_1000_base_t_full));
                        //(pphy->link_capability.cap_1000_base_t_half & pphy->link_capability.lp_1000_base_t_half));
        common_100 &= ((pphy->link_capability.cap_100_base_x_full & pphy->link_capability.lp_100_base_tx_full) |
                        (pphy->link_capability.cap_100_base_x_half & pphy->link_capability.lp_100_base_tx_half) |
                        (pphy->link_capability.cap_100_base_t4 & pphy->link_capability.lp_100_base_t4));
        common_10 &= ((pphy->link_capability.cap_10_base_t_full & pphy->link_capability.lp_10_base_tx_full) |
 2030158:	1884703a 	and	r2,r3,r2
 203015c:	2084b03a 	or	r2,r4,r2
 2030160:	1007883a 	mov	r3,r2
 2030164:	e0bff983 	ldbu	r2,-26(fp)
 2030168:	1884703a 	and	r2,r3,r2
 203016c:	e0bff985 	stb	r2,-26(fp)
 2030170:	00000306 	br	2030180 <alt_tse_phy_get_common_speed+0x228>
        pmac_info = pmac_group->pmac_info[i];
        pphy = pmac_info->pphy_info;
        
        /* if no PHY connected */
        if(!pphy) {
            continue;
 2030174:	0001883a 	nop
 2030178:	00000106 	br	2030180 <alt_tse_phy_get_common_speed+0x228>
        }
        
        /* get PHY capability */
        /* skip for PHY with Auto-Negotiation not completed */
        if(alt_tse_phy_get_cap(pphy) != TSE_PHY_AN_COMPLETE) {
            continue;
 203017c:	0001883a 	nop
        }
        tse_dprintf(6, "\n");
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 2030180:	e0bff817 	ldw	r2,-32(fp)
 2030184:	10800044 	addi	r2,r2,1
 2030188:	e0bff815 	stw	r2,-32(fp)
 203018c:	e0bfff17 	ldw	r2,-4(fp)
 2030190:	10800003 	ldbu	r2,0(r2)
 2030194:	10803fcc 	andi	r2,r2,255
 2030198:	e0fff817 	ldw	r3,-32(fp)
 203019c:	18bfa516 	blt	r3,r2,2030034 <__alt_mem_mem_0+0xfd010034>
                        (pphy->link_capability.cap_10_base_t_half & pphy->link_capability.lp_10_base_tx_half));

    }
    
    /* get common speed based on capabilities */
    if(none_an_complete == 1) {
 20301a0:	e0bffb03 	ldbu	r2,-20(fp)
 20301a4:	10800058 	cmpnei	r2,r2,1
 20301a8:	1000081e 	bne	r2,zero,20301cc <alt_tse_phy_get_common_speed+0x274>
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 20301ac:	00bfffc4 	movi	r2,-1
 20301b0:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - None of the PHYs Auto-Negotiation completed!\n", mac_group_index);
 20301b4:	e0bffe07 	ldb	r2,-8(fp)
 20301b8:	100b883a 	mov	r5,r2
 20301bc:	01008134 	movhi	r4,516
 20301c0:	210c6404 	addi	r4,r4,12688
 20301c4:	20009e40 	call	20009e4 <printf>
 20301c8:	00002706 	br	2030268 <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_1000) {
 20301cc:	e0bff903 	ldbu	r2,-28(fp)
 20301d0:	10000926 	beq	r2,zero,20301f8 <alt_tse_phy_get_common_speed+0x2a0>
        common_speed = TSE_PHY_SPEED_1000;
 20301d4:	00800084 	movi	r2,2
 20301d8:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 1000);
 20301dc:	e0bffe07 	ldb	r2,-8(fp)
 20301e0:	0180fa04 	movi	r6,1000
 20301e4:	100b883a 	mov	r5,r2
 20301e8:	01008134 	movhi	r4,516
 20301ec:	210c7604 	addi	r4,r4,12760
 20301f0:	20009e40 	call	20009e4 <printf>
 20301f4:	00001c06 	br	2030268 <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_100) {
 20301f8:	e0bff943 	ldbu	r2,-27(fp)
 20301fc:	10000926 	beq	r2,zero,2030224 <alt_tse_phy_get_common_speed+0x2cc>
        common_speed = TSE_PHY_SPEED_100;
 2030200:	00800044 	movi	r2,1
 2030204:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 100);
 2030208:	e0bffe07 	ldb	r2,-8(fp)
 203020c:	01801904 	movi	r6,100
 2030210:	100b883a 	mov	r5,r2
 2030214:	01008134 	movhi	r4,516
 2030218:	210c7604 	addi	r4,r4,12760
 203021c:	20009e40 	call	20009e4 <printf>
 2030220:	00001106 	br	2030268 <alt_tse_phy_get_common_speed+0x310>
    }
    else if(common_10) {
 2030224:	e0bff983 	ldbu	r2,-26(fp)
 2030228:	10000826 	beq	r2,zero,203024c <alt_tse_phy_get_common_speed+0x2f4>
        common_speed = TSE_PHY_SPEED_10;
 203022c:	e03ffa15 	stw	zero,-24(fp)
        tse_dprintf(5, "INFO    : MAC Group[%d] - Common Speed : %d Mbps\n", mac_group_index, 10);
 2030230:	e0bffe07 	ldb	r2,-8(fp)
 2030234:	01800284 	movi	r6,10
 2030238:	100b883a 	mov	r5,r2
 203023c:	01008134 	movhi	r4,516
 2030240:	210c7604 	addi	r4,r4,12760
 2030244:	20009e40 	call	20009e4 <printf>
 2030248:	00000706 	br	2030268 <alt_tse_phy_get_common_speed+0x310>
    }
    else {
        common_speed = TSE_PHY_SPEED_NO_COMMON;
 203024c:	00bfffc4 	movi	r2,-1
 2030250:	e0bffa15 	stw	r2,-24(fp)
        tse_dprintf(2, "ERROR   : MAC Group[%d] - No common speed at all!\n", mac_group_index);    }
 2030254:	e0bffe07 	ldb	r2,-8(fp)
 2030258:	100b883a 	mov	r5,r2
 203025c:	01008134 	movhi	r4,516
 2030260:	210c8304 	addi	r4,r4,12812
 2030264:	20009e40 	call	20009e4 <printf>

    return common_speed;
 2030268:	e0bffa17 	ldw	r2,-24(fp)
}
 203026c:	e037883a 	mov	sp,fp
 2030270:	dfc00117 	ldw	ra,4(sp)
 2030274:	df000017 	ldw	fp,0(sp)
 2030278:	dec00204 	addi	sp,sp,8
 203027c:	f800283a 	ret

02030280 <alt_tse_phy_set_common_speed>:
 * @API Type:               Internal
 * @param pmac_group        Pointer to the TSE MAC Group structure which group all the MACs that should use the same speed
 *        common_speed      common speed supported by all PHYs
 * @return      common speed supported by all PHYs connected to the MAC, return TSE_PHY_SPEED_NO_COMMON if invalid common speed specified
 */
alt_32 alt_tse_phy_set_common_speed(alt_tse_mac_group *pmac_group, alt_32 common_speed) {
 2030280:	defff004 	addi	sp,sp,-64
 2030284:	dfc00f15 	stw	ra,60(sp)
 2030288:	df000e15 	stw	fp,56(sp)
 203028c:	dc400d15 	stw	r17,52(sp)
 2030290:	dc000c15 	stw	r16,48(sp)
 2030294:	df000e04 	addi	fp,sp,56
 2030298:	e13ffc15 	stw	r4,-16(fp)
 203029c:	e17ffd15 	stw	r5,-12(fp)
	alt_u8 speed;
	alt_u8 duplex;
    
	alt_u8 gb_capable;
    
    alt_tse_phy_info *pphy = 0;
 20302a0:	e03ff515 	stw	zero,-44(fp)
    alt_tse_mac_info *pmac_info = 0;
 20302a4:	e03ff615 	stw	zero,-40(fp)
    alt_tse_system_info *psys = 0;
 20302a8:	e03ff715 	stw	zero,-36(fp)
    
    /* get index of the pointers in pointer array list */
    alt_8 mac_info_index = 0;
 20302ac:	e03ff805 	stb	zero,-32(fp)
    alt_8 mac_group_index = alt_tse_get_mac_group_index(pmac_group);
 20302b0:	e13ffc17 	ldw	r4,-16(fp)
 20302b4:	202cca40 	call	202cca4 <alt_tse_get_mac_group_index>
 20302b8:	e0bff845 	stb	r2,-31(fp)
         
    /* Record previous MDIO address, to be restored at the end of function */
    np_tse_mac *pmac_group_base = (np_tse_mac *)pmac_group->pmac_info[0]->psys_info->tse_mac_base;
 20302bc:	e0bffc17 	ldw	r2,-16(fp)
 20302c0:	10800117 	ldw	r2,4(r2)
 20302c4:	10800217 	ldw	r2,8(r2)
 20302c8:	10800017 	ldw	r2,0(r2)
 20302cc:	e0bff915 	stw	r2,-28(fp)
    alt_32 mdioadd_prev = IORD(&pmac_group_base->MDIO_ADDR1, 0);
 20302d0:	e0bff917 	ldw	r2,-28(fp)
 20302d4:	10801004 	addi	r2,r2,64
 20302d8:	10800037 	ldwio	r2,0(r2)
 20302dc:	e0bffa15 	stw	r2,-24(fp)
    
    if((common_speed < TSE_PHY_SPEED_10) || (common_speed > TSE_PHY_SPEED_1000)) {
 20302e0:	e0bffd17 	ldw	r2,-12(fp)
 20302e4:	10000316 	blt	r2,zero,20302f4 <alt_tse_phy_set_common_speed+0x74>
 20302e8:	e0bffd17 	ldw	r2,-12(fp)
 20302ec:	108000d0 	cmplti	r2,r2,3
 20302f0:	10000c1e 	bne	r2,zero,2030324 <alt_tse_phy_set_common_speed+0xa4>
        tse_dprintf(2, "ERROR   : MAC Group[%d] - Invalid common speed specified! common speed = %d\n", mac_group_index, (int)common_speed);
 20302f4:	e0bff847 	ldb	r2,-31(fp)
 20302f8:	e1bffd17 	ldw	r6,-12(fp)
 20302fc:	100b883a 	mov	r5,r2
 2030300:	01008134 	movhi	r4,516
 2030304:	210c9004 	addi	r4,r4,12864
 2030308:	20009e40 	call	20009e4 <printf>
		/* Restore previous MDIO address */
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 203030c:	e0bff917 	ldw	r2,-28(fp)
 2030310:	10801004 	addi	r2,r2,64
 2030314:	e0fffa17 	ldw	r3,-24(fp)
 2030318:	10c00035 	stwio	r3,0(r2)
        return TSE_PHY_SPEED_NO_COMMON;
 203031c:	00bfffc4 	movi	r2,-1
 2030320:	0000fd06 	br	2030718 <alt_tse_phy_set_common_speed+0x498>
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 2030324:	e03ff315 	stw	zero,-52(fp)
 2030328:	0000db06 	br	2030698 <alt_tse_phy_set_common_speed+0x418>
        pmac_info = pmac_group->pmac_info[i];
 203032c:	e0fffc17 	ldw	r3,-16(fp)
 2030330:	e0bff317 	ldw	r2,-52(fp)
 2030334:	10800044 	addi	r2,r2,1
 2030338:	1085883a 	add	r2,r2,r2
 203033c:	1085883a 	add	r2,r2,r2
 2030340:	1885883a 	add	r2,r3,r2
 2030344:	10800017 	ldw	r2,0(r2)
 2030348:	e0bff615 	stw	r2,-40(fp)
        mac_info_index = alt_tse_get_mac_info_index(pmac_info);
 203034c:	e13ff617 	ldw	r4,-40(fp)
 2030350:	202cd180 	call	202cd18 <alt_tse_get_mac_info_index>
 2030354:	e0bff805 	stb	r2,-32(fp)

        pphy = pmac_info->pphy_info;
 2030358:	e0bff617 	ldw	r2,-40(fp)
 203035c:	10800117 	ldw	r2,4(r2)
 2030360:	e0bff515 	stw	r2,-44(fp)
        
        /* if no PHY connected */
        if(!pphy) {
 2030364:	e0bff517 	ldw	r2,-44(fp)
 2030368:	1000c726 	beq	r2,zero,2030688 <alt_tse_phy_set_common_speed+0x408>
            continue;
        }
        
        psys = pmac_info->psys_info; 
 203036c:	e0bff617 	ldw	r2,-40(fp)
 2030370:	10800217 	ldw	r2,8(r2)
 2030374:	e0bff715 	stw	r2,-36(fp)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);
 2030378:	e0bff517 	ldw	r2,-44(fp)
 203037c:	10800003 	ldbu	r2,0(r2)
 2030380:	10803fcc 	andi	r2,r2,255
 2030384:	100b883a 	mov	r5,r2
 2030388:	e13ff517 	ldw	r4,-44(fp)
 203038c:	202daa00 	call	202daa0 <alt_tse_phy_wr_mdio_addr>

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 2030390:	e0bff517 	ldw	r2,-44(fp)
 2030394:	108000c3 	ldbu	r2,3(r2)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 2030398:	10803fcc 	andi	r2,r2,255
 203039c:	10000c1e 	bne	r2,zero,20303d0 <alt_tse_phy_set_common_speed+0x150>
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 20303a0:	e0bff517 	ldw	r2,-44(fp)
 20303a4:	10800103 	ldbu	r2,4(r2)
 20303a8:	10803fcc 	andi	r2,r2,255
 20303ac:	1000081e 	bne	r2,zero,20303d0 <alt_tse_phy_set_common_speed+0x150>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 20303b0:	e0bff517 	ldw	r2,-44(fp)
 20303b4:	10800043 	ldbu	r2,1(r2)
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 20303b8:	10803fcc 	andi	r2,r2,255
 20303bc:	1000041e 	bne	r2,zero,20303d0 <alt_tse_phy_set_common_speed+0x150>
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
 20303c0:	e0bff517 	ldw	r2,-44(fp)
 20303c4:	10800083 	ldbu	r2,2(r2)
 20303c8:	10803fcc 	andi	r2,r2,255
 20303cc:	10000226 	beq	r2,zero,20303d8 <alt_tse_phy_set_common_speed+0x158>
 20303d0:	00800044 	movi	r2,1
 20303d4:	00000106 	br	20303dc <alt_tse_phy_set_common_speed+0x15c>
 20303d8:	0005883a 	mov	r2,zero
        	
        /* write PHY address to MDIO to access the i-th PHY */
        alt_tse_phy_wr_mdio_addr(pphy, pphy->mdio_address);

        /* capability of PHY supports 1000 Mbps */
        gb_capable = pphy->link_capability.cap_1000_base_t_full || pphy->link_capability.cap_1000_base_t_half || 
 20303dc:	e0bffb05 	stb	r2,-20(fp)
                 pphy->link_capability.cap_1000_base_x_full || pphy->link_capability.cap_1000_base_x_half;
        
        /* if PHY does not supports 1000 Mbps, and common speed is 1000 Mbps */
        if((!gb_capable) && (common_speed == TSE_PHY_SPEED_1000)) {
 20303e0:	e0bffb03 	ldbu	r2,-20(fp)
 20303e4:	1000101e 	bne	r2,zero,2030428 <alt_tse_phy_set_common_speed+0x1a8>
 20303e8:	e0bffd17 	ldw	r2,-12(fp)
 20303ec:	10800098 	cmpnei	r2,r2,2
 20303f0:	10000d1e 	bne	r2,zero,2030428 <alt_tse_phy_set_common_speed+0x1a8>
            tse_dprintf(2, "ERROR   : PHY[%d.%d] - PHY does not support 1000 Mbps, please specify valid common speed\n", mac_group_index, mac_info_index);
 20303f4:	e0bff847 	ldb	r2,-31(fp)
 20303f8:	e0fff807 	ldb	r3,-32(fp)
 20303fc:	180d883a 	mov	r6,r3
 2030400:	100b883a 	mov	r5,r2
 2030404:	01008134 	movhi	r4,516
 2030408:	210ca404 	addi	r4,r4,12944
 203040c:	20009e40 	call	20009e4 <printf>
			/* Restore previous MDIO address */
			IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 2030410:	e0bff917 	ldw	r2,-28(fp)
 2030414:	10801004 	addi	r2,r2,64
 2030418:	e0fffa17 	ldw	r3,-24(fp)
 203041c:	10c00035 	stwio	r3,0(r2)
            return TSE_PHY_SPEED_NO_COMMON;
 2030420:	00bfffc4 	movi	r2,-1
 2030424:	0000bc06 	br	2030718 <alt_tse_phy_set_common_speed+0x498>
        }
        
        /* if PHY is not Auto-Negotiation capable */
        if(!alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_ABILITY, 1)) {
 2030428:	01c00044 	movi	r7,1
 203042c:	018000c4 	movi	r6,3
 2030430:	01400044 	movi	r5,1
 2030434:	e13ff517 	ldw	r4,-44(fp)
 2030438:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 203043c:	1000141e 	bne	r2,zero,2030490 <alt_tse_phy_set_common_speed+0x210>
            
            /* if PHY supports 1000 Mbps, write msb of speed */
            if(gb_capable) {
 2030440:	e0bffb03 	ldbu	r2,-20(fp)
 2030444:	10000926 	beq	r2,zero,203046c <alt_tse_phy_set_common_speed+0x1ec>
                alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_MSB, 1, common_speed >> 1);
 2030448:	e0bffd17 	ldw	r2,-12(fp)
 203044c:	1005d07a 	srai	r2,r2,1
 2030450:	10bfffcc 	andi	r2,r2,65535
 2030454:	d8800015 	stw	r2,0(sp)
 2030458:	01c00044 	movi	r7,1
 203045c:	01800184 	movi	r6,6
 2030460:	000b883a 	mov	r5,zero
 2030464:	e13ff517 	ldw	r4,-44(fp)
 2030468:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
            }
            /* write lsb of speed */
            alt_tse_phy_wr_mdio_reg(pphy, TSE_PHY_MDIO_CONTROL, TSE_PHY_MDIO_CONTROL_SPEED_LSB, 1, common_speed);
 203046c:	e0bffd17 	ldw	r2,-12(fp)
 2030470:	10bfffcc 	andi	r2,r2,65535
 2030474:	d8800015 	stw	r2,0(sp)
 2030478:	01c00044 	movi	r7,1
 203047c:	01800344 	movi	r6,13
 2030480:	000b883a 	mov	r5,zero
 2030484:	e13ff517 	ldw	r4,-44(fp)
 2030488:	202daf80 	call	202daf8 <alt_tse_phy_wr_mdio_reg>
            
            /* continue to next PHY */
            continue;
 203048c:	00007f06 	br	203068c <alt_tse_phy_set_common_speed+0x40c>
        }
        
        /* set Auto-Negotiation advertisement based on common speed */
        if(common_speed == TSE_PHY_SPEED_1000) {
 2030490:	e0bffd17 	ldw	r2,-12(fp)
 2030494:	10800098 	cmpnei	r2,r2,2
 2030498:	10000a1e 	bne	r2,zero,20304c4 <alt_tse_phy_set_common_speed+0x244>
            alt_tse_phy_set_adv_1000(pphy, 1);
 203049c:	01400044 	movi	r5,1
 20304a0:	e13ff517 	ldw	r4,-44(fp)
 20304a4:	202f9980 	call	202f998 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 20304a8:	01400044 	movi	r5,1
 20304ac:	e13ff517 	ldw	r4,-44(fp)
 20304b0:	202fb5c0 	call	202fb5c <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 20304b4:	01400044 	movi	r5,1
 20304b8:	e13ff517 	ldw	r4,-44(fp)
 20304bc:	202fdb00 	call	202fdb0 <alt_tse_phy_set_adv_10>
 20304c0:	00002206 	br	203054c <alt_tse_phy_set_common_speed+0x2cc>
        }
        else if(common_speed == TSE_PHY_SPEED_100) {
 20304c4:	e0bffd17 	ldw	r2,-12(fp)
 20304c8:	10800058 	cmpnei	r2,r2,1
 20304cc:	10000a1e 	bne	r2,zero,20304f8 <alt_tse_phy_set_common_speed+0x278>
            alt_tse_phy_set_adv_1000(pphy, 0);
 20304d0:	000b883a 	mov	r5,zero
 20304d4:	e13ff517 	ldw	r4,-44(fp)
 20304d8:	202f9980 	call	202f998 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 1);
 20304dc:	01400044 	movi	r5,1
 20304e0:	e13ff517 	ldw	r4,-44(fp)
 20304e4:	202fb5c0 	call	202fb5c <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 20304e8:	01400044 	movi	r5,1
 20304ec:	e13ff517 	ldw	r4,-44(fp)
 20304f0:	202fdb00 	call	202fdb0 <alt_tse_phy_set_adv_10>
 20304f4:	00001506 	br	203054c <alt_tse_phy_set_common_speed+0x2cc>
        }    
        else if(common_speed == TSE_PHY_SPEED_10) {
 20304f8:	e0bffd17 	ldw	r2,-12(fp)
 20304fc:	10000a1e 	bne	r2,zero,2030528 <alt_tse_phy_set_common_speed+0x2a8>
            alt_tse_phy_set_adv_1000(pphy, 0);
 2030500:	000b883a 	mov	r5,zero
 2030504:	e13ff517 	ldw	r4,-44(fp)
 2030508:	202f9980 	call	202f998 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 203050c:	000b883a 	mov	r5,zero
 2030510:	e13ff517 	ldw	r4,-44(fp)
 2030514:	202fb5c0 	call	202fb5c <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 1);
 2030518:	01400044 	movi	r5,1
 203051c:	e13ff517 	ldw	r4,-44(fp)
 2030520:	202fdb00 	call	202fdb0 <alt_tse_phy_set_adv_10>
 2030524:	00000906 	br	203054c <alt_tse_phy_set_common_speed+0x2cc>
        }
        else {
            alt_tse_phy_set_adv_1000(pphy, 0);
 2030528:	000b883a 	mov	r5,zero
 203052c:	e13ff517 	ldw	r4,-44(fp)
 2030530:	202f9980 	call	202f998 <alt_tse_phy_set_adv_1000>
            alt_tse_phy_set_adv_100(pphy, 0);
 2030534:	000b883a 	mov	r5,zero
 2030538:	e13ff517 	ldw	r4,-44(fp)
 203053c:	202fb5c0 	call	202fb5c <alt_tse_phy_set_adv_100>
            alt_tse_phy_set_adv_10(pphy, 0);
 2030540:	000b883a 	mov	r5,zero
 2030544:	e13ff517 	ldw	r4,-44(fp)
 2030548:	202fdb00 	call	202fdb0 <alt_tse_phy_set_adv_10>
        }
        
        /* if PHY Auto-Negotiation is completed */
        if(alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, TSE_PHY_MDIO_STATUS_AN_COMPLETE, 1) == 1) {
 203054c:	01c00044 	movi	r7,1
 2030550:	01800144 	movi	r6,5
 2030554:	01400044 	movi	r5,1
 2030558:	e13ff517 	ldw	r4,-44(fp)
 203055c:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 2030560:	10800058 	cmpnei	r2,r2,1
 2030564:	10003a1e 	bne	r2,zero,2030650 <alt_tse_phy_set_common_speed+0x3d0>
            
            /* read both msb and lsb of speed bits if PHY support 1000 Mbps */
            if(gb_capable) {
 2030568:	e0bffb03 	ldbu	r2,-20(fp)
 203056c:	10000f26 	beq	r2,zero,20305ac <alt_tse_phy_set_common_speed+0x32c>
        
                /* get speed information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 2);
 2030570:	e0bff517 	ldw	r2,-44(fp)
 2030574:	10800517 	ldw	r2,20(r2)
 2030578:	10801583 	ldbu	r2,86(r2)
 203057c:	10c03fcc 	andi	r3,r2,255
 2030580:	e0bff517 	ldw	r2,-44(fp)
 2030584:	10800517 	ldw	r2,20(r2)
 2030588:	108015c3 	ldbu	r2,87(r2)
 203058c:	10803fcc 	andi	r2,r2,255
 2030590:	01c00084 	movi	r7,2
 2030594:	100d883a 	mov	r6,r2
 2030598:	180b883a 	mov	r5,r3
 203059c:	e13ff517 	ldw	r4,-44(fp)
 20305a0:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 20305a4:	e0bff405 	stb	r2,-48(fp)
 20305a8:	00000e06 	br	20305e4 <alt_tse_phy_set_common_speed+0x364>
            }
            
            /* read lsb of speed only if PHY support only 10/100 Mbps */
            else {
                /* get speed and link information after Auto-Negotiation */
                speed = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->speed_lsb_location, 1);
 20305ac:	e0bff517 	ldw	r2,-44(fp)
 20305b0:	10800517 	ldw	r2,20(r2)
 20305b4:	10801583 	ldbu	r2,86(r2)
 20305b8:	10c03fcc 	andi	r3,r2,255
 20305bc:	e0bff517 	ldw	r2,-44(fp)
 20305c0:	10800517 	ldw	r2,20(r2)
 20305c4:	108015c3 	ldbu	r2,87(r2)
 20305c8:	10803fcc 	andi	r2,r2,255
 20305cc:	01c00044 	movi	r7,1
 20305d0:	100d883a 	mov	r6,r2
 20305d4:	180b883a 	mov	r5,r3
 20305d8:	e13ff517 	ldw	r4,-44(fp)
 20305dc:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 20305e0:	e0bff405 	stb	r2,-48(fp)
            }
            
            /* if current speed != common speed, then restart Auto-Negotiation */
            if(speed != common_speed) {
 20305e4:	e0fff403 	ldbu	r3,-48(fp)
 20305e8:	e0bffd17 	ldw	r2,-12(fp)
 20305ec:	18800326 	beq	r3,r2,20305fc <alt_tse_phy_set_common_speed+0x37c>
                alt_tse_phy_restart_an(pphy, ALTERA_AUTONEG_TIMEOUT_THRESHOLD);
 20305f0:	017e0034 	movhi	r5,63488
 20305f4:	e13ff517 	ldw	r4,-44(fp)
 20305f8:	202f0e80 	call	202f0e8 <alt_tse_phy_restart_an>
            }
            
            /* get speed information after Auto-Negotiation */
            duplex = alt_tse_phy_rd_mdio_reg(pphy, pphy->pphy_profile->status_reg_location, pphy->pphy_profile->duplex_bit_location, 1);
 20305fc:	e0bff517 	ldw	r2,-44(fp)
 2030600:	10800517 	ldw	r2,20(r2)
 2030604:	10801583 	ldbu	r2,86(r2)
 2030608:	10c03fcc 	andi	r3,r2,255
 203060c:	e0bff517 	ldw	r2,-44(fp)
 2030610:	10800517 	ldw	r2,20(r2)
 2030614:	10801603 	ldbu	r2,88(r2)
 2030618:	10803fcc 	andi	r2,r2,255
 203061c:	01c00044 	movi	r7,1
 2030620:	100d883a 	mov	r6,r2
 2030624:	180b883a 	mov	r5,r3
 2030628:	e13ff517 	ldw	r4,-44(fp)
 203062c:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 2030630:	e0bffb45 	stb	r2,-19(fp)
            
            /* Set MAC duplex register */
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
 2030634:	e0bff717 	ldw	r2,-36(fp)
 2030638:	10800017 	ldw	r2,0(r2)
 203063c:	1007883a 	mov	r3,r2
 2030640:	e0bffb43 	ldbu	r2,-19(fp)
 2030644:	100b883a 	mov	r5,r2
 2030648:	1809883a 	mov	r4,r3
 203064c:	202cf500 	call	202cf50 <alt_tse_mac_set_duplex>
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
 2030650:	e43ff847 	ldb	r16,-31(fp)
 2030654:	e47ff807 	ldb	r17,-32(fp)
 2030658:	01c00404 	movi	r7,16
 203065c:	000d883a 	mov	r6,zero
 2030660:	01400044 	movi	r5,1
 2030664:	e13ff517 	ldw	r4,-44(fp)
 2030668:	202dc200 	call	202dc20 <alt_tse_phy_rd_mdio_reg>
 203066c:	100f883a 	mov	r7,r2
 2030670:	880d883a 	mov	r6,r17
 2030674:	800b883a 	mov	r5,r16
 2030678:	01008134 	movhi	r4,516
 203067c:	210cbb04 	addi	r4,r4,13036
 2030680:	20009e40 	call	20009e4 <printf>
 2030684:	00000106 	br	203068c <alt_tse_phy_set_common_speed+0x40c>

        pphy = pmac_info->pphy_info;
        
        /* if no PHY connected */
        if(!pphy) {
            continue;
 2030688:	0001883a 	nop
		IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
        return TSE_PHY_SPEED_NO_COMMON;
    }
    
    /* loop through every PHY connected */
    for(i = 0; i < pmac_group->channel; i++) {
 203068c:	e0bff317 	ldw	r2,-52(fp)
 2030690:	10800044 	addi	r2,r2,1
 2030694:	e0bff315 	stw	r2,-52(fp)
 2030698:	e0bffc17 	ldw	r2,-16(fp)
 203069c:	10800003 	ldbu	r2,0(r2)
 20306a0:	10803fcc 	andi	r2,r2,255
 20306a4:	e0fff317 	ldw	r3,-52(fp)
 20306a8:	18bf2016 	blt	r3,r2,203032c <__alt_mem_mem_0+0xfd01032c>
            alt_tse_mac_set_duplex((np_tse_mac *)psys->tse_mac_base, duplex);
            
        }
        tse_dprintf(5, "INFO    : PHY[%d.%d] - PHY STATUS = 0x%04x\n\n", mac_group_index, mac_info_index, (int) alt_tse_phy_rd_mdio_reg(pphy, TSE_PHY_MDIO_STATUS, 0, 16));        
    }
    tse_dprintf(5, "INFO    : MAC Group[%d] - All PHYs set to common speed : %d Mbps\n", mac_group_index, (common_speed == TSE_PHY_SPEED_1000) ? 1000 : ((common_speed == TSE_PHY_SPEED_100) ? 100 : 10));
 20306ac:	e0fff847 	ldb	r3,-31(fp)
 20306b0:	e0bffd17 	ldw	r2,-12(fp)
 20306b4:	108000a0 	cmpeqi	r2,r2,2
 20306b8:	1000071e 	bne	r2,zero,20306d8 <alt_tse_phy_set_common_speed+0x458>
 20306bc:	e0bffd17 	ldw	r2,-12(fp)
 20306c0:	10800058 	cmpnei	r2,r2,1
 20306c4:	1000021e 	bne	r2,zero,20306d0 <alt_tse_phy_set_common_speed+0x450>
 20306c8:	00801904 	movi	r2,100
 20306cc:	00000306 	br	20306dc <alt_tse_phy_set_common_speed+0x45c>
 20306d0:	00800284 	movi	r2,10
 20306d4:	00000106 	br	20306dc <alt_tse_phy_set_common_speed+0x45c>
 20306d8:	0080fa04 	movi	r2,1000
 20306dc:	100d883a 	mov	r6,r2
 20306e0:	180b883a 	mov	r5,r3
 20306e4:	01008134 	movhi	r4,516
 20306e8:	210cc704 	addi	r4,r4,13084
 20306ec:	20009e40 	call	20009e4 <printf>

    /* Set MAC speed register */
    alt_tse_mac_set_speed(pmac_group_base, common_speed);
 20306f0:	e0bffd17 	ldw	r2,-12(fp)
 20306f4:	10803fcc 	andi	r2,r2,255
 20306f8:	100b883a 	mov	r5,r2
 20306fc:	e13ff917 	ldw	r4,-28(fp)
 2030700:	202ce700 	call	202ce70 <alt_tse_mac_set_speed>
    
    /* Restore previous MDIO address */
    IOWR(&pmac_group_base->MDIO_ADDR1, 0, mdioadd_prev);
 2030704:	e0bff917 	ldw	r2,-28(fp)
 2030708:	10801004 	addi	r2,r2,64
 203070c:	e0fffa17 	ldw	r3,-24(fp)
 2030710:	10c00035 	stwio	r3,0(r2)
        
    return common_speed;
 2030714:	e0bffd17 	ldw	r2,-12(fp)
}
 2030718:	e6fffe04 	addi	sp,fp,-8
 203071c:	dfc00317 	ldw	ra,12(sp)
 2030720:	df000217 	ldw	fp,8(sp)
 2030724:	dc400117 	ldw	r17,4(sp)
 2030728:	dc000017 	ldw	r16,0(sp)
 203072c:	dec00404 	addi	sp,sp,16
 2030730:	f800283a 	ret

02030734 <marvell_phy_cfg>:

/* @Function Description: Additional configuration for Marvell PHY
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address of MAC group
 */
alt_32 marvell_phy_cfg(np_tse_mac *pmac) {
 2030734:	defffc04 	addi	sp,sp,-16
 2030738:	dfc00315 	stw	ra,12(sp)
 203073c:	df000215 	stw	fp,8(sp)
 2030740:	df000204 	addi	fp,sp,8
 2030744:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat;
    
    /* If there is no link yet, we enable auto crossover and reset the PHY */
    if((IORD(&pmac->mdio1.STATUS, 0) & 1<<5) == 0) {
 2030748:	e0bfff17 	ldw	r2,-4(fp)
 203074c:	1080a104 	addi	r2,r2,644
 2030750:	10800037 	ldwio	r2,0(r2)
 2030754:	1080080c 	andi	r2,r2,32
 2030758:	1000161e 	bne	r2,zero,20307b4 <marvell_phy_cfg+0x80>
        tse_dprintf(5, "MARVELL : Enabling auto crossover\n");
 203075c:	01008134 	movhi	r4,516
 2030760:	210cd804 	addi	r4,r4,13152
 2030764:	203cd600 	call	203cd60 <puts>
        IOWR(&pmac->mdio1.CONTROL, 16, 0x0078);
 2030768:	e0bfff17 	ldw	r2,-4(fp)
 203076c:	1080a004 	addi	r2,r2,640
 2030770:	10801004 	addi	r2,r2,64
 2030774:	00c01e04 	movi	r3,120
 2030778:	10c00035 	stwio	r3,0(r2)
        tse_dprintf(5, "MARVELL : PHY reset\n");
 203077c:	01008134 	movhi	r4,516
 2030780:	210ce104 	addi	r4,r4,13188
 2030784:	203cd600 	call	203cd60 <puts>
        dat = IORD(&pmac->mdio1.CONTROL, 0); 
 2030788:	e0bfff17 	ldw	r2,-4(fp)
 203078c:	1080a004 	addi	r2,r2,640
 2030790:	10800037 	ldwio	r2,0(r2)
 2030794:	e0bffe0d 	sth	r2,-8(fp)
        IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);        
 2030798:	e0bfff17 	ldw	r2,-4(fp)
 203079c:	1080a004 	addi	r2,r2,640
 20307a0:	e13ffe0b 	ldhu	r4,-8(fp)
 20307a4:	00e00004 	movi	r3,-32768
 20307a8:	20c6b03a 	or	r3,r4,r3
 20307ac:	18ffffcc 	andi	r3,r3,65535
 20307b0:	10c00035 	stwio	r3,0(r2)
    }
    
    return 0;
 20307b4:	0005883a 	mov	r2,zero
}
 20307b8:	e037883a 	mov	sp,fp
 20307bc:	dfc00117 	ldw	ra,4(sp)
 20307c0:	df000017 	ldw	fp,0(sp)
 20307c4:	dec00204 	addi	sp,sp,8
 20307c8:	f800283a 	ret

020307cc <marvell_cfg_gmii>:

/* @Function Description: Change operating mode of Marvell PHY to GMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_gmii(np_tse_mac *pmac) {
 20307cc:	defffc04 	addi	sp,sp,-16
 20307d0:	dfc00315 	stw	ra,12(sp)
 20307d4:	df000215 	stw	fp,8(sp)
 20307d8:	df000204 	addi	fp,sp,8
 20307dc:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 20307e0:	e0bfff17 	ldw	r2,-4(fp)
 20307e4:	1080bb04 	addi	r2,r2,748
 20307e8:	10800037 	ldwio	r2,0(r2)
 20307ec:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 20307f0:	e0fffe0b 	ldhu	r3,-8(fp)
 20307f4:	00bffc04 	movi	r2,-16
 20307f8:	1884703a 	and	r2,r3,r2
 20307fc:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to GMII to copper mode\n");
 2030800:	01008134 	movhi	r4,516
 2030804:	210ce604 	addi	r4,r4,13208
 2030808:	203cd600 	call	203cd60 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xf);
 203080c:	e0bfff17 	ldw	r2,-4(fp)
 2030810:	1080bb04 	addi	r2,r2,748
 2030814:	e0fffe0b 	ldhu	r3,-8(fp)
 2030818:	18c003d4 	ori	r3,r3,15
 203081c:	18ffffcc 	andi	r3,r3,65535
 2030820:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 2030824:	01008134 	movhi	r4,516
 2030828:	210cf204 	addi	r4,r4,13256
 203082c:	203cd600 	call	203cd60 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 2030830:	e0bfff17 	ldw	r2,-4(fp)
 2030834:	1080b404 	addi	r2,r2,720
 2030838:	10800037 	ldwio	r2,0(r2)
 203083c:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 2030840:	e0fffe0b 	ldhu	r3,-8(fp)
 2030844:	00bfdf44 	movi	r2,-131
 2030848:	1884703a 	and	r2,r3,r2
 203084c:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 2030850:	e0bfff17 	ldw	r2,-4(fp)
 2030854:	1080b404 	addi	r2,r2,720
 2030858:	e0fffe0b 	ldhu	r3,-8(fp)
 203085c:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 2030860:	01008134 	movhi	r4,516
 2030864:	210ce104 	addi	r4,r4,13188
 2030868:	203cd600 	call	203cd60 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 203086c:	e0bfff17 	ldw	r2,-4(fp)
 2030870:	1080a004 	addi	r2,r2,640
 2030874:	10800037 	ldwio	r2,0(r2)
 2030878:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);
 203087c:	e0bfff17 	ldw	r2,-4(fp)
 2030880:	1080a004 	addi	r2,r2,640
 2030884:	e13ffe0b 	ldhu	r4,-8(fp)
 2030888:	00e00004 	movi	r3,-32768
 203088c:	20c6b03a 	or	r3,r4,r3
 2030890:	18ffffcc 	andi	r3,r3,65535
 2030894:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 2030898:	00800044 	movi	r2,1
}
 203089c:	e037883a 	mov	sp,fp
 20308a0:	dfc00117 	ldw	ra,4(sp)
 20308a4:	df000017 	ldw	fp,0(sp)
 20308a8:	dec00204 	addi	sp,sp,8
 20308ac:	f800283a 	ret

020308b0 <marvell_cfg_sgmii>:

/* @Function Description: Change operating mode of Marvell PHY to SGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_sgmii(np_tse_mac *pmac) {
 20308b0:	defffc04 	addi	sp,sp,-16
 20308b4:	dfc00315 	stw	ra,12(sp)
 20308b8:	df000215 	stw	fp,8(sp)
 20308bc:	df000204 	addi	fp,sp,8
 20308c0:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 20308c4:	e0bfff17 	ldw	r2,-4(fp)
 20308c8:	1080bb04 	addi	r2,r2,748
 20308cc:	10800037 	ldwio	r2,0(r2)
 20308d0:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 20308d4:	e0fffe0b 	ldhu	r3,-8(fp)
 20308d8:	00bffc04 	movi	r2,-16
 20308dc:	1884703a 	and	r2,r3,r2
 20308e0:	e0bffe0d 	sth	r2,-8(fp)

    tse_dprintf(5, "MARVELL : Mode changed to SGMII without clock with SGMII Auto-Neg to copper mode\n");
 20308e4:	01008134 	movhi	r4,516
 20308e8:	210cfc04 	addi	r4,r4,13296
 20308ec:	203cd600 	call	203cd60 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0x4);
 20308f0:	e0bfff17 	ldw	r2,-4(fp)
 20308f4:	1080bb04 	addi	r2,r2,748
 20308f8:	e0fffe0b 	ldhu	r3,-8(fp)
 20308fc:	18c00114 	ori	r3,r3,4
 2030900:	18ffffcc 	andi	r3,r3,65535
 2030904:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Disable RGMII Timing Control\n");
 2030908:	01008134 	movhi	r4,516
 203090c:	210cf204 	addi	r4,r4,13256
 2030910:	203cd600 	call	203cd60 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0); 
 2030914:	e0bfff17 	ldw	r2,-4(fp)
 2030918:	1080b404 	addi	r2,r2,720
 203091c:	10800037 	ldwio	r2,0(r2)
 2030920:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 2030924:	e0fffe0b 	ldhu	r3,-8(fp)
 2030928:	00bfdf44 	movi	r2,-131
 203092c:	1884703a 	and	r2,r3,r2
 2030930:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);
 2030934:	e0bfff17 	ldw	r2,-4(fp)
 2030938:	1080b404 	addi	r2,r2,720
 203093c:	e0fffe0b 	ldhu	r3,-8(fp)
 2030940:	10c00035 	stwio	r3,0(r2)

    tse_dprintf(5, "MARVELL : PHY reset\n");
 2030944:	01008134 	movhi	r4,516
 2030948:	210ce104 	addi	r4,r4,13188
 203094c:	203cd600 	call	203cd60 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 2030950:	e0bfff17 	ldw	r2,-4(fp)
 2030954:	1080a004 	addi	r2,r2,640
 2030958:	10800037 	ldwio	r2,0(r2)
 203095c:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);
 2030960:	e0bfff17 	ldw	r2,-4(fp)
 2030964:	1080a004 	addi	r2,r2,640
 2030968:	e13ffe0b 	ldhu	r4,-8(fp)
 203096c:	00e00004 	movi	r3,-32768
 2030970:	20c6b03a 	or	r3,r4,r3
 2030974:	18ffffcc 	andi	r3,r3,65535
 2030978:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 203097c:	00800044 	movi	r2,1
}
 2030980:	e037883a 	mov	sp,fp
 2030984:	dfc00117 	ldw	ra,4(sp)
 2030988:	df000017 	ldw	fp,0(sp)
 203098c:	dec00204 	addi	sp,sp,8
 2030990:	f800283a 	ret

02030994 <marvell_cfg_rgmii>:

/* @Function Description: Change operating mode of Marvell PHY to RGMII
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_32 marvell_cfg_rgmii(np_tse_mac *pmac) {
 2030994:	defffc04 	addi	sp,sp,-16
 2030998:	dfc00315 	stw	ra,12(sp)
 203099c:	df000215 	stw	fp,8(sp)
 20309a0:	df000204 	addi	fp,sp,8
 20309a4:	e13fff15 	stw	r4,-4(fp)
    
	alt_u16 dat = IORD(&pmac->mdio1.reg1b, 0);
 20309a8:	e0bfff17 	ldw	r2,-4(fp)
 20309ac:	1080bb04 	addi	r2,r2,748
 20309b0:	10800037 	ldwio	r2,0(r2)
 20309b4:	e0bffe0d 	sth	r2,-8(fp)
    dat &= 0xfff0;
 20309b8:	e0fffe0b 	ldhu	r3,-8(fp)
 20309bc:	00bffc04 	movi	r2,-16
 20309c0:	1884703a 	and	r2,r3,r2
 20309c4:	e0bffe0d 	sth	r2,-8(fp)
    
    tse_dprintf(5, "MARVELL : Mode changed to RGMII/Modified MII to Copper mode\n");
 20309c8:	01008134 	movhi	r4,516
 20309cc:	210d1104 	addi	r4,r4,13380
 20309d0:	203cd600 	call	203cd60 <puts>
    IOWR(&pmac->mdio1.reg1b, 0, dat | 0xb);
 20309d4:	e0bfff17 	ldw	r2,-4(fp)
 20309d8:	1080bb04 	addi	r2,r2,748
 20309dc:	e0fffe0b 	ldhu	r3,-8(fp)
 20309e0:	18c002d4 	ori	r3,r3,11
 20309e4:	18ffffcc 	andi	r3,r3,65535
 20309e8:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : Enable RGMII Timing Control\n");
 20309ec:	01008134 	movhi	r4,516
 20309f0:	210d2004 	addi	r4,r4,13440
 20309f4:	203cd600 	call	203cd60 <puts>
    dat = IORD(&pmac->mdio1.reg14, 0);
 20309f8:	e0bfff17 	ldw	r2,-4(fp)
 20309fc:	1080b404 	addi	r2,r2,720
 2030a00:	10800037 	ldwio	r2,0(r2)
 2030a04:	e0bffe0d 	sth	r2,-8(fp)
    dat &= ~0x82;
 2030a08:	e0fffe0b 	ldhu	r3,-8(fp)
 2030a0c:	00bfdf44 	movi	r2,-131
 2030a10:	1884703a 	and	r2,r3,r2
 2030a14:	e0bffe0d 	sth	r2,-8(fp)
    dat |= 0x82;
 2030a18:	e0bffe0b 	ldhu	r2,-8(fp)
 2030a1c:	10802094 	ori	r2,r2,130
 2030a20:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.reg14, 0, dat);    
 2030a24:	e0bfff17 	ldw	r2,-4(fp)
 2030a28:	1080b404 	addi	r2,r2,720
 2030a2c:	e0fffe0b 	ldhu	r3,-8(fp)
 2030a30:	10c00035 	stwio	r3,0(r2)
    
    tse_dprintf(5, "MARVELL : PHY reset\n");
 2030a34:	01008134 	movhi	r4,516
 2030a38:	210ce104 	addi	r4,r4,13188
 2030a3c:	203cd600 	call	203cd60 <puts>
    dat = IORD(&pmac->mdio1.CONTROL, 0); 
 2030a40:	e0bfff17 	ldw	r2,-4(fp)
 2030a44:	1080a004 	addi	r2,r2,640
 2030a48:	10800037 	ldwio	r2,0(r2)
 2030a4c:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(&pmac->mdio1.CONTROL, 0, dat | 1<<15);
 2030a50:	e0bfff17 	ldw	r2,-4(fp)
 2030a54:	1080a004 	addi	r2,r2,640
 2030a58:	e13ffe0b 	ldhu	r4,-8(fp)
 2030a5c:	00e00004 	movi	r3,-32768
 2030a60:	20c6b03a 	or	r3,r4,r3
 2030a64:	18ffffcc 	andi	r3,r3,65535
 2030a68:	10c00035 	stwio	r3,0(r2)
    
    return 1;
 2030a6c:	00800044 	movi	r2,1
    
}
 2030a70:	e037883a 	mov	sp,fp
 2030a74:	dfc00117 	ldw	ra,4(sp)
 2030a78:	df000017 	ldw	fp,0(sp)
 2030a7c:	dec00204 	addi	sp,sp,8
 2030a80:	f800283a 	ret

02030a84 <DP83848C_link_status_read>:

/* @Function Description: Read link status from PHY specific status register of DP83848C
 * @API Type:   Internal
 * @param pmac  Pointer to the first TSE MAC Control Interface Base address within MAC group
 */
alt_u32 DP83848C_link_status_read(np_tse_mac *pmac) {
 2030a84:	defffc04 	addi	sp,sp,-16
 2030a88:	df000315 	stw	fp,12(sp)
 2030a8c:	df000304 	addi	fp,sp,12
 2030a90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 link_status = 0;
 2030a94:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 reg_status = IORD(&pmac->mdio1.reg10, 0);
 2030a98:	e0bfff17 	ldw	r2,-4(fp)
 2030a9c:	1080b004 	addi	r2,r2,704
 2030aa0:	10800037 	ldwio	r2,0(r2)
 2030aa4:	e0bffe15 	stw	r2,-8(fp)
	
	/* If speed == 10 Mbps */
	if(reg_status & 0x2) {
 2030aa8:	e0bffe17 	ldw	r2,-8(fp)
 2030aac:	1080008c 	andi	r2,r2,2
 2030ab0:	10000426 	beq	r2,zero,2030ac4 <DP83848C_link_status_read+0x40>
		link_status |= 0x8;
 2030ab4:	e0bffd17 	ldw	r2,-12(fp)
 2030ab8:	10800214 	ori	r2,r2,8
 2030abc:	e0bffd15 	stw	r2,-12(fp)
 2030ac0:	00000306 	br	2030ad0 <DP83848C_link_status_read+0x4c>
	}
	/* Else speed = 100 Mbps */
	else {
		link_status |= 0x4;
 2030ac4:	e0bffd17 	ldw	r2,-12(fp)
 2030ac8:	10800114 	ori	r2,r2,4
 2030acc:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* If duplex == Full */
	if(reg_status & 0x4) {
 2030ad0:	e0bffe17 	ldw	r2,-8(fp)
 2030ad4:	1080010c 	andi	r2,r2,4
 2030ad8:	10000326 	beq	r2,zero,2030ae8 <DP83848C_link_status_read+0x64>
		link_status |= 0x1;
 2030adc:	e0bffd17 	ldw	r2,-12(fp)
 2030ae0:	10800054 	ori	r2,r2,1
 2030ae4:	e0bffd15 	stw	r2,-12(fp)
	}
	
	return link_status;
 2030ae8:	e0bffd17 	ldw	r2,-12(fp)
}
 2030aec:	e037883a 	mov	sp,fp
 2030af0:	df000017 	ldw	fp,0(sp)
 2030af4:	dec00104 	addi	sp,sp,4
 2030af8:	f800283a 	ret

02030afc <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
 2030afc:	defffe04 	addi	sp,sp,-8
 2030b00:	dfc00115 	stw	ra,4(sp)
 2030b04:	df000015 	stw	fp,0(sp)
 2030b08:	d839883a 	mov	fp,sp
  /* Modules initialization */
  stats_init();
 2030b0c:	201b7e80 	call	201b7e8 <stats_init>
#if !NO_SYS
  sys_init();
 2030b10:	2014c400 	call	2014c40 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 2030b14:	20190a00 	call	20190a0 <mem_init>
  memp_init();
 2030b18:	203411c0 	call	203411c <memp_init>
  pbuf_init();
  netif_init();
 2030b1c:	20199140 	call	2019914 <netif_init>
#if LWIP_SOCKET
  lwip_socket_init();
 2030b20:	20281a80 	call	20281a8 <lwip_socket_init>
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 2030b24:	20219740 	call	2021974 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 2030b28:	201b8080 	call	201b808 <tcp_init>
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
 2030b2c:	20215780 	call	2021578 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 2030b30:	0001883a 	nop
 2030b34:	e037883a 	mov	sp,fp
 2030b38:	dfc00117 	ldw	ra,4(sp)
 2030b3c:	df000017 	ldw	fp,0(sp)
 2030b40:	dec00204 	addi	sp,sp,8
 2030b44:	f800283a 	ret

02030b48 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 2030b48:	defff304 	addi	sp,sp,-52
 2030b4c:	dfc00c15 	stw	ra,48(sp)
 2030b50:	df000b15 	stw	fp,44(sp)
 2030b54:	df000b04 	addi	fp,sp,44
 2030b58:	e13ffe15 	stw	r4,-8(fp)
 2030b5c:	e17fff15 	stw	r5,-4(fp)
#endif /* LWIP_DEBUG */
  struct icmp_echo_hdr *iecho;
  struct ip_hdr *iphdr;
  s16_t hlen;

  ICMP_STATS_INC(icmp.recv);
 2030b60:	008085f4 	movhi	r2,535
 2030b64:	10a86704 	addi	r2,r2,-24164
 2030b68:	10803117 	ldw	r2,196(r2)
 2030b6c:	10c00044 	addi	r3,r2,1
 2030b70:	008085f4 	movhi	r2,535
 2030b74:	10a86704 	addi	r2,r2,-24164
 2030b78:	10c03115 	stw	r3,196(r2)
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
 2030b7c:	e0bffe17 	ldw	r2,-8(fp)
 2030b80:	10800117 	ldw	r2,4(r2)
 2030b84:	e0bff815 	stw	r2,-32(fp)
  hlen = IPH_HL(iphdr) * 4;
 2030b88:	e0bff817 	ldw	r2,-32(fp)
 2030b8c:	10800003 	ldbu	r2,0(r2)
 2030b90:	10803fcc 	andi	r2,r2,255
 2030b94:	108003cc 	andi	r2,r2,15
 2030b98:	1085883a 	add	r2,r2,r2
 2030b9c:	1085883a 	add	r2,r2,r2
 2030ba0:	e0bffa0d 	sth	r2,-24(fp)
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 2030ba4:	e0bffa0b 	ldhu	r2,-24(fp)
 2030ba8:	0085c83a 	sub	r2,zero,r2
 2030bac:	10bfffcc 	andi	r2,r2,65535
 2030bb0:	10a0001c 	xori	r2,r2,32768
 2030bb4:	10a00004 	addi	r2,r2,-32768
 2030bb8:	100b883a 	mov	r5,r2
 2030bbc:	e13ffe17 	ldw	r4,-8(fp)
 2030bc0:	201a8700 	call	201a870 <pbuf_header>
 2030bc4:	10803fcc 	andi	r2,r2,255
 2030bc8:	10013c1e 	bne	r2,zero,20310bc <icmp_input+0x574>
 2030bcc:	e0bffe17 	ldw	r2,-8(fp)
 2030bd0:	1080020b 	ldhu	r2,8(r2)
 2030bd4:	10bfffcc 	andi	r2,r2,65535
 2030bd8:	10800130 	cmpltui	r2,r2,4
 2030bdc:	1001371e 	bne	r2,zero,20310bc <icmp_input+0x574>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 2030be0:	e0bffe17 	ldw	r2,-8(fp)
 2030be4:	10800117 	ldw	r2,4(r2)
 2030be8:	10800003 	ldbu	r2,0(r2)
 2030bec:	e0bffa85 	stb	r2,-22(fp)
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 2030bf0:	e0bffa83 	ldbu	r2,-22(fp)
 2030bf4:	10012a26 	beq	r2,zero,20310a0 <icmp_input+0x558>
 2030bf8:	10800220 	cmpeqi	r2,r2,8
 2030bfc:	10011926 	beq	r2,zero,2031064 <icmp_input+0x51c>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
 2030c00:	00800044 	movi	r2,1
 2030c04:	e0bff915 	stw	r2,-28(fp)
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
 2030c08:	d0a81417 	ldw	r2,-24496(gp)
 2030c0c:	10803c0c 	andi	r2,r2,240
 2030c10:	10803818 	cmpnei	r2,r2,224
 2030c14:	1000011e 	bne	r2,zero,2030c1c <icmp_input+0xd4>
        accepted = 0;
 2030c18:	e03ff915 	stw	zero,-28(fp)
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 2030c1c:	d0a81417 	ldw	r2,-24496(gp)
 2030c20:	e17fff17 	ldw	r5,-4(fp)
 2030c24:	1009883a 	mov	r4,r2
 2030c28:	20187dc0 	call	20187dc <ip4_addr_isbroadcast>
 2030c2c:	10803fcc 	andi	r2,r2,255
 2030c30:	10000126 	beq	r2,zero,2030c38 <icmp_input+0xf0>
        accepted = 0;
 2030c34:	e03ff915 	stw	zero,-28(fp)
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
 2030c38:	e0bff917 	ldw	r2,-28(fp)
 2030c3c:	10000a1e 	bne	r2,zero,2030c68 <icmp_input+0x120>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
 2030c40:	008085f4 	movhi	r2,535
 2030c44:	10a86704 	addi	r2,r2,-24164
 2030c48:	10803a17 	ldw	r2,232(r2)
 2030c4c:	10c00044 	addi	r3,r2,1
 2030c50:	008085f4 	movhi	r2,535
 2030c54:	10a86704 	addi	r2,r2,-24164
 2030c58:	10c03a15 	stw	r3,232(r2)
        pbuf_free(p);
 2030c5c:	e13ffe17 	ldw	r4,-8(fp)
 2030c60:	201aa200 	call	201aa20 <pbuf_free>
        return;
 2030c64:	00013206 	br	2031130 <icmp_input+0x5e8>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 2030c68:	e0bffe17 	ldw	r2,-8(fp)
 2030c6c:	1080020b 	ldhu	r2,8(r2)
 2030c70:	10bfffcc 	andi	r2,r2,65535
 2030c74:	10800228 	cmpgeui	r2,r2,8
 2030c78:	10010f26 	beq	r2,zero,20310b8 <icmp_input+0x570>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
 2030c7c:	e13ffe17 	ldw	r4,-8(fp)
 2030c80:	2031a640 	call	2031a64 <inet_chksum_pbuf>
 2030c84:	10bfffcc 	andi	r2,r2,65535
 2030c88:	10000a26 	beq	r2,zero,2030cb4 <icmp_input+0x16c>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
 2030c8c:	e13ffe17 	ldw	r4,-8(fp)
 2030c90:	201aa200 	call	201aa20 <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
 2030c94:	008085f4 	movhi	r2,535
 2030c98:	10a86704 	addi	r2,r2,-24164
 2030c9c:	10803417 	ldw	r2,208(r2)
 2030ca0:	10c00044 	addi	r3,r2,1
 2030ca4:	008085f4 	movhi	r2,535
 2030ca8:	10a86704 	addi	r2,r2,-24164
 2030cac:	10c03415 	stw	r3,208(r2)
      snmp_inc_icmpinerrors();
      return;
 2030cb0:	00011f06 	br	2031130 <icmp_input+0x5e8>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 2030cb4:	01400904 	movi	r5,36
 2030cb8:	e13ffe17 	ldw	r4,-8(fp)
 2030cbc:	201a8700 	call	201a870 <pbuf_header>
 2030cc0:	10803fcc 	andi	r2,r2,255
 2030cc4:	10002926 	beq	r2,zero,2030d6c <icmp_input+0x224>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
 2030cc8:	e0bffa0f 	ldh	r2,-24(fp)
 2030ccc:	100b883a 	mov	r5,r2
 2030cd0:	e13ffe17 	ldw	r4,-8(fp)
 2030cd4:	201a8700 	call	201a870 <pbuf_header>
 2030cd8:	10803fcc 	andi	r2,r2,255
 2030cdc:	1001011e 	bne	r2,zero,20310e4 <icmp_input+0x59c>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 2030ce0:	e0bffe17 	ldw	r2,-8(fp)
 2030ce4:	1080020b 	ldhu	r2,8(r2)
 2030ce8:	10bfffcc 	andi	r2,r2,65535
 2030cec:	000d883a 	mov	r6,zero
 2030cf0:	100b883a 	mov	r5,r2
 2030cf4:	01000084 	movi	r4,2
 2030cf8:	201a2640 	call	201a264 <pbuf_alloc>
 2030cfc:	e0bffb15 	stw	r2,-20(fp)
      if (r == NULL) {
 2030d00:	e0bffb17 	ldw	r2,-20(fp)
 2030d04:	1000f926 	beq	r2,zero,20310ec <icmp_input+0x5a4>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 2030d08:	e17ffe17 	ldw	r5,-8(fp)
 2030d0c:	e13ffb17 	ldw	r4,-20(fp)
 2030d10:	201adc80 	call	201adc8 <pbuf_copy>
 2030d14:	10803fcc 	andi	r2,r2,255
 2030d18:	1080201c 	xori	r2,r2,128
 2030d1c:	10bfe004 	addi	r2,r2,-128
 2030d20:	1000f41e 	bne	r2,zero,20310f4 <icmp_input+0x5ac>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
 2030d24:	e0bffb17 	ldw	r2,-20(fp)
 2030d28:	10800117 	ldw	r2,4(r2)
 2030d2c:	e0bff815 	stw	r2,-32(fp)
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 2030d30:	e0bffa0b 	ldhu	r2,-24(fp)
 2030d34:	0085c83a 	sub	r2,zero,r2
 2030d38:	10bfffcc 	andi	r2,r2,65535
 2030d3c:	10a0001c 	xori	r2,r2,32768
 2030d40:	10a00004 	addi	r2,r2,-32768
 2030d44:	100b883a 	mov	r5,r2
 2030d48:	e13ffb17 	ldw	r4,-20(fp)
 2030d4c:	201a8700 	call	201a870 <pbuf_header>
 2030d50:	10803fcc 	andi	r2,r2,255
 2030d54:	1000e91e 	bne	r2,zero,20310fc <icmp_input+0x5b4>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
 2030d58:	e13ffe17 	ldw	r4,-8(fp)
 2030d5c:	201aa200 	call	201aa20 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 2030d60:	e0bffb17 	ldw	r2,-20(fp)
 2030d64:	e0bffe15 	stw	r2,-8(fp)
 2030d68:	00000506 	br	2030d80 <icmp_input+0x238>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 2030d6c:	017ff704 	movi	r5,-36
 2030d70:	e13ffe17 	ldw	r4,-8(fp)
 2030d74:	201a8700 	call	201a870 <pbuf_header>
 2030d78:	10803fcc 	andi	r2,r2,255
 2030d7c:	1000e11e 	bne	r2,zero,2031104 <icmp_input+0x5bc>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 2030d80:	e0bffe17 	ldw	r2,-8(fp)
 2030d84:	10800117 	ldw	r2,4(r2)
 2030d88:	e0bffc15 	stw	r2,-16(fp)
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 2030d8c:	d0e81417 	ldw	r3,-24496(gp)
 2030d90:	e0bff817 	ldw	r2,-32(fp)
 2030d94:	19803fcc 	andi	r6,r3,255
 2030d98:	11000303 	ldbu	r4,12(r2)
 2030d9c:	2008703a 	and	r4,r4,zero
 2030da0:	200b883a 	mov	r5,r4
 2030da4:	3009883a 	mov	r4,r6
 2030da8:	2908b03a 	or	r4,r5,r4
 2030dac:	11000305 	stb	r4,12(r2)
 2030db0:	1808d23a 	srli	r4,r3,8
 2030db4:	21803fcc 	andi	r6,r4,255
 2030db8:	11000343 	ldbu	r4,13(r2)
 2030dbc:	2008703a 	and	r4,r4,zero
 2030dc0:	200b883a 	mov	r5,r4
 2030dc4:	3009883a 	mov	r4,r6
 2030dc8:	2908b03a 	or	r4,r5,r4
 2030dcc:	11000345 	stb	r4,13(r2)
 2030dd0:	1808d43a 	srli	r4,r3,16
 2030dd4:	21803fcc 	andi	r6,r4,255
 2030dd8:	11000383 	ldbu	r4,14(r2)
 2030ddc:	2008703a 	and	r4,r4,zero
 2030de0:	200b883a 	mov	r5,r4
 2030de4:	3009883a 	mov	r4,r6
 2030de8:	2908b03a 	or	r4,r5,r4
 2030dec:	11000385 	stb	r4,14(r2)
 2030df0:	180ad63a 	srli	r5,r3,24
 2030df4:	10c003c3 	ldbu	r3,15(r2)
 2030df8:	1806703a 	and	r3,r3,zero
 2030dfc:	1809883a 	mov	r4,r3
 2030e00:	2807883a 	mov	r3,r5
 2030e04:	20c6b03a 	or	r3,r4,r3
 2030e08:	10c003c5 	stb	r3,15(r2)
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
 2030e0c:	d0e81217 	ldw	r3,-24504(gp)
 2030e10:	e0bff817 	ldw	r2,-32(fp)
 2030e14:	19803fcc 	andi	r6,r3,255
 2030e18:	11000403 	ldbu	r4,16(r2)
 2030e1c:	2008703a 	and	r4,r4,zero
 2030e20:	200b883a 	mov	r5,r4
 2030e24:	3009883a 	mov	r4,r6
 2030e28:	2908b03a 	or	r4,r5,r4
 2030e2c:	11000405 	stb	r4,16(r2)
 2030e30:	1808d23a 	srli	r4,r3,8
 2030e34:	21803fcc 	andi	r6,r4,255
 2030e38:	11000443 	ldbu	r4,17(r2)
 2030e3c:	2008703a 	and	r4,r4,zero
 2030e40:	200b883a 	mov	r5,r4
 2030e44:	3009883a 	mov	r4,r6
 2030e48:	2908b03a 	or	r4,r5,r4
 2030e4c:	11000445 	stb	r4,17(r2)
 2030e50:	1808d43a 	srli	r4,r3,16
 2030e54:	21803fcc 	andi	r6,r4,255
 2030e58:	11000483 	ldbu	r4,18(r2)
 2030e5c:	2008703a 	and	r4,r4,zero
 2030e60:	200b883a 	mov	r5,r4
 2030e64:	3009883a 	mov	r4,r6
 2030e68:	2908b03a 	or	r4,r5,r4
 2030e6c:	11000485 	stb	r4,18(r2)
 2030e70:	180ad63a 	srli	r5,r3,24
 2030e74:	10c004c3 	ldbu	r3,19(r2)
 2030e78:	1806703a 	and	r3,r3,zero
 2030e7c:	1809883a 	mov	r4,r3
 2030e80:	2807883a 	mov	r3,r5
 2030e84:	20c6b03a 	or	r3,r4,r3
 2030e88:	10c004c5 	stb	r3,19(r2)
    ICMPH_TYPE_SET(iecho, ICMP_ER);
 2030e8c:	e0bffc17 	ldw	r2,-16(fp)
 2030e90:	10000005 	stb	zero,0(r2)
#if CHECKSUM_GEN_ICMP
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 2030e94:	e0bffc17 	ldw	r2,-16(fp)
 2030e98:	10c00083 	ldbu	r3,2(r2)
 2030e9c:	108000c3 	ldbu	r2,3(r2)
 2030ea0:	1004923a 	slli	r2,r2,8
 2030ea4:	10c4b03a 	or	r2,r2,r3
 2030ea8:	10bfffcc 	andi	r2,r2,65535
 2030eac:	10bffdf0 	cmpltui	r2,r2,65527
 2030eb0:	10001a1e 	bne	r2,zero,2030f1c <icmp_input+0x3d4>
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 2030eb4:	e0bffc17 	ldw	r2,-16(fp)
 2030eb8:	10c00083 	ldbu	r3,2(r2)
 2030ebc:	108000c3 	ldbu	r2,3(r2)
 2030ec0:	1004923a 	slli	r2,r2,8
 2030ec4:	10c4b03a 	or	r2,r2,r3
 2030ec8:	10800244 	addi	r2,r2,9
 2030ecc:	100d883a 	mov	r6,r2
 2030ed0:	e0bffc17 	ldw	r2,-16(fp)
 2030ed4:	30ffffcc 	andi	r3,r6,65535
 2030ed8:	19403fcc 	andi	r5,r3,255
 2030edc:	10c00083 	ldbu	r3,2(r2)
 2030ee0:	1806703a 	and	r3,r3,zero
 2030ee4:	1809883a 	mov	r4,r3
 2030ee8:	2807883a 	mov	r3,r5
 2030eec:	20c6b03a 	or	r3,r4,r3
 2030ef0:	10c00085 	stb	r3,2(r2)
 2030ef4:	30ffffcc 	andi	r3,r6,65535
 2030ef8:	1806d23a 	srli	r3,r3,8
 2030efc:	197fffcc 	andi	r5,r3,65535
 2030f00:	10c000c3 	ldbu	r3,3(r2)
 2030f04:	1806703a 	and	r3,r3,zero
 2030f08:	1809883a 	mov	r4,r3
 2030f0c:	2807883a 	mov	r3,r5
 2030f10:	20c6b03a 	or	r3,r4,r3
 2030f14:	10c000c5 	stb	r3,3(r2)
 2030f18:	00001906 	br	2030f80 <icmp_input+0x438>
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 2030f1c:	e0bffc17 	ldw	r2,-16(fp)
 2030f20:	10c00083 	ldbu	r3,2(r2)
 2030f24:	108000c3 	ldbu	r2,3(r2)
 2030f28:	1004923a 	slli	r2,r2,8
 2030f2c:	10c4b03a 	or	r2,r2,r3
 2030f30:	10800204 	addi	r2,r2,8
 2030f34:	100d883a 	mov	r6,r2
 2030f38:	e0bffc17 	ldw	r2,-16(fp)
 2030f3c:	30ffffcc 	andi	r3,r6,65535
 2030f40:	19403fcc 	andi	r5,r3,255
 2030f44:	10c00083 	ldbu	r3,2(r2)
 2030f48:	1806703a 	and	r3,r3,zero
 2030f4c:	1809883a 	mov	r4,r3
 2030f50:	2807883a 	mov	r3,r5
 2030f54:	20c6b03a 	or	r3,r4,r3
 2030f58:	10c00085 	stb	r3,2(r2)
 2030f5c:	30ffffcc 	andi	r3,r6,65535
 2030f60:	1806d23a 	srli	r3,r3,8
 2030f64:	197fffcc 	andi	r5,r3,65535
 2030f68:	10c000c3 	ldbu	r3,3(r2)
 2030f6c:	1806703a 	and	r3,r3,zero
 2030f70:	1809883a 	mov	r4,r3
 2030f74:	2807883a 	mov	r3,r5
 2030f78:	20c6b03a 	or	r3,r4,r3
 2030f7c:	10c000c5 	stb	r3,3(r2)
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
 2030f80:	e0bff817 	ldw	r2,-32(fp)
 2030f84:	00c01004 	movi	r3,64
 2030f88:	10c00205 	stb	r3,8(r2)
    IPH_CHKSUM_SET(iphdr, 0);
 2030f8c:	e0bff817 	ldw	r2,-32(fp)
 2030f90:	10c00283 	ldbu	r3,10(r2)
 2030f94:	1806703a 	and	r3,r3,zero
 2030f98:	10c00285 	stb	r3,10(r2)
 2030f9c:	10c002c3 	ldbu	r3,11(r2)
 2030fa0:	1806703a 	and	r3,r3,zero
 2030fa4:	10c002c5 	stb	r3,11(r2)
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 2030fa8:	01400504 	movi	r5,20
 2030fac:	e13ff817 	ldw	r4,-32(fp)
 2030fb0:	2031a200 	call	2031a20 <inet_chksum>
 2030fb4:	100d883a 	mov	r6,r2
 2030fb8:	e0bff817 	ldw	r2,-32(fp)
 2030fbc:	30ffffcc 	andi	r3,r6,65535
 2030fc0:	19403fcc 	andi	r5,r3,255
 2030fc4:	10c00283 	ldbu	r3,10(r2)
 2030fc8:	1806703a 	and	r3,r3,zero
 2030fcc:	1809883a 	mov	r4,r3
 2030fd0:	2807883a 	mov	r3,r5
 2030fd4:	20c6b03a 	or	r3,r4,r3
 2030fd8:	10c00285 	stb	r3,10(r2)
 2030fdc:	30ffffcc 	andi	r3,r6,65535
 2030fe0:	1806d23a 	srli	r3,r3,8
 2030fe4:	197fffcc 	andi	r5,r3,65535
 2030fe8:	10c002c3 	ldbu	r3,11(r2)
 2030fec:	1806703a 	and	r3,r3,zero
 2030ff0:	1809883a 	mov	r4,r3
 2030ff4:	2807883a 	mov	r3,r5
 2030ff8:	20c6b03a 	or	r3,r4,r3
 2030ffc:	10c002c5 	stb	r3,11(r2)
#endif /* CHECKSUM_GEN_IP */

    ICMP_STATS_INC(icmp.xmit);
 2031000:	008085f4 	movhi	r2,535
 2031004:	10a86704 	addi	r2,r2,-24164
 2031008:	10803017 	ldw	r2,192(r2)
 203100c:	10c00044 	addi	r3,r2,1
 2031010:	008085f4 	movhi	r2,535
 2031014:	10a86704 	addi	r2,r2,-24164
 2031018:	10c03015 	stw	r3,192(r2)
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
 203101c:	e0bffa0f 	ldh	r2,-24(fp)
 2031020:	100b883a 	mov	r5,r2
 2031024:	e13ffe17 	ldw	r4,-8(fp)
 2031028:	201a8700 	call	201a870 <pbuf_header>
 203102c:	10803fcc 	andi	r2,r2,255
 2031030:	10001d1e 	bne	r2,zero,20310a8 <icmp_input+0x560>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
 2031034:	e0bfff17 	ldw	r2,-4(fp)
 2031038:	d8800215 	stw	r2,8(sp)
 203103c:	00800044 	movi	r2,1
 2031040:	d8800115 	stw	r2,4(sp)
 2031044:	d8000015 	stw	zero,0(sp)
 2031048:	01c01004 	movi	r7,64
 203104c:	000d883a 	mov	r6,zero
 2031050:	d1681404 	addi	r5,gp,-24496
 2031054:	e13ffe17 	ldw	r4,-8(fp)
 2031058:	20321f40 	call	20321f4 <ip_output_if>
 203105c:	e0bffd05 	stb	r2,-12(fp)
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
 2031060:	00001106 	br	20310a8 <icmp_input+0x560>
  default:
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 2031064:	008085f4 	movhi	r2,535
 2031068:	10a86704 	addi	r2,r2,-24164
 203106c:	10803817 	ldw	r2,224(r2)
 2031070:	10c00044 	addi	r3,r2,1
 2031074:	008085f4 	movhi	r2,535
 2031078:	10a86704 	addi	r2,r2,-24164
 203107c:	10c03815 	stw	r3,224(r2)
    ICMP_STATS_INC(icmp.drop);
 2031080:	008085f4 	movhi	r2,535
 2031084:	10a86704 	addi	r2,r2,-24164
 2031088:	10803317 	ldw	r2,204(r2)
 203108c:	10c00044 	addi	r3,r2,1
 2031090:	008085f4 	movhi	r2,535
 2031094:	10a86704 	addi	r2,r2,-24164
 2031098:	10c03315 	stw	r3,204(r2)
 203109c:	00000306 	br	20310ac <icmp_input+0x564>
#endif /* LWIP_DEBUG */
  switch (type) {
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    break; 
 20310a0:	0001883a 	nop
 20310a4:	00000106 	br	20310ac <icmp_input+0x564>
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
 20310a8:	0001883a 	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 20310ac:	e13ffe17 	ldw	r4,-8(fp)
 20310b0:	201aa200 	call	201aa20 <pbuf_free>
  return;
 20310b4:	00001e06 	br	2031130 <icmp_input+0x5e8>
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
 20310b8:	0001883a 	nop
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  return;
lenerr:
  pbuf_free(p);
 20310bc:	e13ffe17 	ldw	r4,-8(fp)
 20310c0:	201aa200 	call	201aa20 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 20310c4:	008085f4 	movhi	r2,535
 20310c8:	10a86704 	addi	r2,r2,-24164
 20310cc:	10803517 	ldw	r2,212(r2)
 20310d0:	10c00044 	addi	r3,r2,1
 20310d4:	008085f4 	movhi	r2,535
 20310d8:	10a86704 	addi	r2,r2,-24164
 20310dc:	10c03515 	stw	r3,212(r2)
  snmp_inc_icmpinerrors();
  return;
 20310e0:	00001306 	br	2031130 <icmp_input+0x5e8>
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
 20310e4:	0001883a 	nop
 20310e8:	00000706 	br	2031108 <icmp_input+0x5c0>
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
      if (r == NULL) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
 20310ec:	0001883a 	nop
 20310f0:	00000506 	br	2031108 <icmp_input+0x5c0>
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
 20310f4:	0001883a 	nop
 20310f8:	00000306 	br	2031108 <icmp_input+0x5c0>
      }
      iphdr = (struct ip_hdr *)r->payload;
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 20310fc:	0001883a 	nop
 2031100:	00000106 	br	2031108 <icmp_input+0x5c0>
      p = r;
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 2031104:	0001883a 	nop
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
 2031108:	e13ffe17 	ldw	r4,-8(fp)
 203110c:	201aa200 	call	201aa20 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 2031110:	008085f4 	movhi	r2,535
 2031114:	10a86704 	addi	r2,r2,-24164
 2031118:	10803a17 	ldw	r2,232(r2)
 203111c:	10c00044 	addi	r3,r2,1
 2031120:	008085f4 	movhi	r2,535
 2031124:	10a86704 	addi	r2,r2,-24164
 2031128:	10c03a15 	stw	r3,232(r2)
  snmp_inc_icmpinerrors();
  return;
 203112c:	0001883a 	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
 2031130:	e037883a 	mov	sp,fp
 2031134:	dfc00117 	ldw	ra,4(sp)
 2031138:	df000017 	ldw	fp,0(sp)
 203113c:	dec00204 	addi	sp,sp,8
 2031140:	f800283a 	ret

02031144 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 2031144:	defffc04 	addi	sp,sp,-16
 2031148:	dfc00315 	stw	ra,12(sp)
 203114c:	df000215 	stw	fp,8(sp)
 2031150:	df000204 	addi	fp,sp,8
 2031154:	e13ffe15 	stw	r4,-8(fp)
 2031158:	e17fff15 	stw	r5,-4(fp)
  icmp_send_response(p, ICMP_DUR, t);
 203115c:	e0bfff17 	ldw	r2,-4(fp)
 2031160:	10803fcc 	andi	r2,r2,255
 2031164:	100d883a 	mov	r6,r2
 2031168:	014000c4 	movi	r5,3
 203116c:	e13ffe17 	ldw	r4,-8(fp)
 2031170:	20311d40 	call	20311d4 <icmp_send_response>
}
 2031174:	0001883a 	nop
 2031178:	e037883a 	mov	sp,fp
 203117c:	dfc00117 	ldw	ra,4(sp)
 2031180:	df000017 	ldw	fp,0(sp)
 2031184:	dec00204 	addi	sp,sp,8
 2031188:	f800283a 	ret

0203118c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 203118c:	defffc04 	addi	sp,sp,-16
 2031190:	dfc00315 	stw	ra,12(sp)
 2031194:	df000215 	stw	fp,8(sp)
 2031198:	df000204 	addi	fp,sp,8
 203119c:	e13ffe15 	stw	r4,-8(fp)
 20311a0:	e17fff15 	stw	r5,-4(fp)
  icmp_send_response(p, ICMP_TE, t);
 20311a4:	e0bfff17 	ldw	r2,-4(fp)
 20311a8:	10803fcc 	andi	r2,r2,255
 20311ac:	100d883a 	mov	r6,r2
 20311b0:	014002c4 	movi	r5,11
 20311b4:	e13ffe17 	ldw	r4,-8(fp)
 20311b8:	20311d40 	call	20311d4 <icmp_send_response>
}
 20311bc:	0001883a 	nop
 20311c0:	e037883a 	mov	sp,fp
 20311c4:	dfc00117 	ldw	ra,4(sp)
 20311c8:	df000017 	ldw	fp,0(sp)
 20311cc:	dec00204 	addi	sp,sp,8
 20311d0:	f800283a 	ret

020311d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 20311d4:	defff504 	addi	sp,sp,-44
 20311d8:	dfc00a15 	stw	ra,40(sp)
 20311dc:	df000915 	stw	fp,36(sp)
 20311e0:	df000904 	addi	fp,sp,36
 20311e4:	e13ffd15 	stw	r4,-12(fp)
 20311e8:	2807883a 	mov	r3,r5
 20311ec:	3005883a 	mov	r2,r6
 20311f0:	e0fffe05 	stb	r3,-8(fp)
 20311f4:	e0bfff05 	stb	r2,-4(fp)
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 20311f8:	000d883a 	mov	r6,zero
 20311fc:	01400904 	movi	r5,36
 2031200:	01000044 	movi	r4,1
 2031204:	201a2640 	call	201a264 <pbuf_alloc>
 2031208:	e0bff915 	stw	r2,-28(fp)
                 PBUF_RAM);
  if (q == NULL) {
 203120c:	e0bff917 	ldw	r2,-28(fp)
 2031210:	10006226 	beq	r2,zero,203139c <icmp_send_response+0x1c8>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 2031214:	e0bffd17 	ldw	r2,-12(fp)
 2031218:	10800117 	ldw	r2,4(r2)
 203121c:	e0bffa15 	stw	r2,-24(fp)
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 2031220:	e0bff917 	ldw	r2,-28(fp)
 2031224:	10800117 	ldw	r2,4(r2)
 2031228:	e0bffb15 	stw	r2,-20(fp)
  icmphdr->type = type;
 203122c:	e0bffb17 	ldw	r2,-20(fp)
 2031230:	e0fffe03 	ldbu	r3,-8(fp)
 2031234:	10c00005 	stb	r3,0(r2)
  icmphdr->code = code;
 2031238:	e0bffb17 	ldw	r2,-20(fp)
 203123c:	e0ffff03 	ldbu	r3,-4(fp)
 2031240:	10c00045 	stb	r3,1(r2)
  icmphdr->id = 0;
 2031244:	e0bffb17 	ldw	r2,-20(fp)
 2031248:	10c00103 	ldbu	r3,4(r2)
 203124c:	1806703a 	and	r3,r3,zero
 2031250:	10c00105 	stb	r3,4(r2)
 2031254:	10c00143 	ldbu	r3,5(r2)
 2031258:	1806703a 	and	r3,r3,zero
 203125c:	10c00145 	stb	r3,5(r2)
  icmphdr->seqno = 0;
 2031260:	e0bffb17 	ldw	r2,-20(fp)
 2031264:	10c00183 	ldbu	r3,6(r2)
 2031268:	1806703a 	and	r3,r3,zero
 203126c:	10c00185 	stb	r3,6(r2)
 2031270:	10c001c3 	ldbu	r3,7(r2)
 2031274:	1806703a 	and	r3,r3,zero
 2031278:	10c001c5 	stb	r3,7(r2)

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 203127c:	e0bff917 	ldw	r2,-28(fp)
 2031280:	10800117 	ldw	r2,4(r2)
 2031284:	10c00204 	addi	r3,r2,8
 2031288:	e0bffd17 	ldw	r2,-12(fp)
 203128c:	10800117 	ldw	r2,4(r2)
 2031290:	01800704 	movi	r6,28
 2031294:	100b883a 	mov	r5,r2
 2031298:	1809883a 	mov	r4,r3
 203129c:	2005e580 	call	2005e58 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
 20312a0:	e0bffb17 	ldw	r2,-20(fp)
 20312a4:	10c00083 	ldbu	r3,2(r2)
 20312a8:	1806703a 	and	r3,r3,zero
 20312ac:	10c00085 	stb	r3,2(r2)
 20312b0:	10c000c3 	ldbu	r3,3(r2)
 20312b4:	1806703a 	and	r3,r3,zero
 20312b8:	10c000c5 	stb	r3,3(r2)
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 20312bc:	e0bff917 	ldw	r2,-28(fp)
 20312c0:	1080028b 	ldhu	r2,10(r2)
 20312c4:	10bfffcc 	andi	r2,r2,65535
 20312c8:	100b883a 	mov	r5,r2
 20312cc:	e13ffb17 	ldw	r4,-20(fp)
 20312d0:	2031a200 	call	2031a20 <inet_chksum>
 20312d4:	100d883a 	mov	r6,r2
 20312d8:	e0bffb17 	ldw	r2,-20(fp)
 20312dc:	30ffffcc 	andi	r3,r6,65535
 20312e0:	19403fcc 	andi	r5,r3,255
 20312e4:	10c00083 	ldbu	r3,2(r2)
 20312e8:	1806703a 	and	r3,r3,zero
 20312ec:	1809883a 	mov	r4,r3
 20312f0:	2807883a 	mov	r3,r5
 20312f4:	20c6b03a 	or	r3,r4,r3
 20312f8:	10c00085 	stb	r3,2(r2)
 20312fc:	30ffffcc 	andi	r3,r6,65535
 2031300:	1806d23a 	srli	r3,r3,8
 2031304:	197fffcc 	andi	r5,r3,65535
 2031308:	10c000c3 	ldbu	r3,3(r2)
 203130c:	1806703a 	and	r3,r3,zero
 2031310:	1809883a 	mov	r4,r3
 2031314:	2807883a 	mov	r3,r5
 2031318:	20c6b03a 	or	r3,r4,r3
 203131c:	10c000c5 	stb	r3,3(r2)
  ICMP_STATS_INC(icmp.xmit);
 2031320:	008085f4 	movhi	r2,535
 2031324:	10a86704 	addi	r2,r2,-24164
 2031328:	10803017 	ldw	r2,192(r2)
 203132c:	10c00044 	addi	r3,r2,1
 2031330:	008085f4 	movhi	r2,535
 2031334:	10a86704 	addi	r2,r2,-24164
 2031338:	10c03015 	stw	r3,192(r2)
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
 203133c:	e0bffa17 	ldw	r2,-24(fp)
 2031340:	10c00303 	ldbu	r3,12(r2)
 2031344:	11000343 	ldbu	r4,13(r2)
 2031348:	2008923a 	slli	r4,r4,8
 203134c:	20c6b03a 	or	r3,r4,r3
 2031350:	11000383 	ldbu	r4,14(r2)
 2031354:	2008943a 	slli	r4,r4,16
 2031358:	20c6b03a 	or	r3,r4,r3
 203135c:	108003c3 	ldbu	r2,15(r2)
 2031360:	1004963a 	slli	r2,r2,24
 2031364:	10c4b03a 	or	r2,r2,r3
 2031368:	e0bffc15 	stw	r2,-16(fp)
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
 203136c:	e0fffc04 	addi	r3,fp,-16
 2031370:	00800044 	movi	r2,1
 2031374:	d8800115 	stw	r2,4(sp)
 2031378:	d8000015 	stw	zero,0(sp)
 203137c:	01c01004 	movi	r7,64
 2031380:	180d883a 	mov	r6,r3
 2031384:	000b883a 	mov	r5,zero
 2031388:	e13ff917 	ldw	r4,-28(fp)
 203138c:	20328400 	call	2032840 <ip_output>
  pbuf_free(q);
 2031390:	e13ff917 	ldw	r4,-28(fp)
 2031394:	201aa200 	call	201aa20 <pbuf_free>
 2031398:	00000106 	br	20313a0 <icmp_send_response+0x1cc>
  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
                 PBUF_RAM);
  if (q == NULL) {
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    return;
 203139c:	0001883a 	nop
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  pbuf_free(q);
}
 20313a0:	e037883a 	mov	sp,fp
 20313a4:	dfc00117 	ldw	ra,4(sp)
 20313a8:	df000017 	ldw	fp,0(sp)
 20313ac:	dec00204 	addi	sp,sp,8
 20313b0:	f800283a 	ret

020313b4 <lwip_standard_chksum>:
 * by Curt McDowell, Broadcom Corp. December 8th, 2005
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
 20313b4:	defff604 	addi	sp,sp,-40
 20313b8:	df000915 	stw	fp,36(sp)
 20313bc:	df000904 	addi	fp,sp,36
 20313c0:	e13ffe15 	stw	r4,-8(fp)
 20313c4:	e17fff15 	stw	r5,-4(fp)
  u8_t *pb = (u8_t *)dataptr;
 20313c8:	e0bffe17 	ldw	r2,-8(fp)
 20313cc:	e0bff715 	stw	r2,-36(fp)
  u16_t *ps, t = 0;
 20313d0:	e03ffd0d 	sth	zero,-12(fp)
  u32_t *pl;
  u32_t sum = 0, tmp;
 20313d4:	e03ffa15 	stw	zero,-24(fp)
  /* starts at odd byte address? */
  int odd = ((mem_ptr_t)pb & 1);
 20313d8:	e0bff717 	ldw	r2,-36(fp)
 20313dc:	1080004c 	andi	r2,r2,1
 20313e0:	e0bffc15 	stw	r2,-16(fp)

  if (odd && len > 0) {
 20313e4:	e0bffc17 	ldw	r2,-16(fp)
 20313e8:	10000c26 	beq	r2,zero,203141c <lwip_standard_chksum+0x68>
 20313ec:	e0bfff17 	ldw	r2,-4(fp)
 20313f0:	00800a0e 	bge	zero,r2,203141c <lwip_standard_chksum+0x68>
    ((u8_t *)&t)[1] = *pb++;
 20313f4:	e0bffd04 	addi	r2,fp,-12
 20313f8:	10800044 	addi	r2,r2,1
 20313fc:	e0fff717 	ldw	r3,-36(fp)
 2031400:	19000044 	addi	r4,r3,1
 2031404:	e13ff715 	stw	r4,-36(fp)
 2031408:	18c00003 	ldbu	r3,0(r3)
 203140c:	10c00005 	stb	r3,0(r2)
    len--;
 2031410:	e0bfff17 	ldw	r2,-4(fp)
 2031414:	10bfffc4 	addi	r2,r2,-1
 2031418:	e0bfff15 	stw	r2,-4(fp)
  }

  ps = (u16_t *)pb;
 203141c:	e0bff717 	ldw	r2,-36(fp)
 2031420:	e0bff815 	stw	r2,-32(fp)

  if (((mem_ptr_t)ps & 3) && len > 1) {
 2031424:	e0bff817 	ldw	r2,-32(fp)
 2031428:	108000cc 	andi	r2,r2,3
 203142c:	10000e26 	beq	r2,zero,2031468 <lwip_standard_chksum+0xb4>
 2031430:	e0bfff17 	ldw	r2,-4(fp)
 2031434:	10800090 	cmplti	r2,r2,2
 2031438:	10000b1e 	bne	r2,zero,2031468 <lwip_standard_chksum+0xb4>
    sum += *ps++;
 203143c:	e0bff817 	ldw	r2,-32(fp)
 2031440:	10c00084 	addi	r3,r2,2
 2031444:	e0fff815 	stw	r3,-32(fp)
 2031448:	1080000b 	ldhu	r2,0(r2)
 203144c:	10bfffcc 	andi	r2,r2,65535
 2031450:	e0fffa17 	ldw	r3,-24(fp)
 2031454:	1885883a 	add	r2,r3,r2
 2031458:	e0bffa15 	stw	r2,-24(fp)
    len -= 2;
 203145c:	e0bfff17 	ldw	r2,-4(fp)
 2031460:	10bfff84 	addi	r2,r2,-2
 2031464:	e0bfff15 	stw	r2,-4(fp)
  }

  pl = (u32_t *)ps;
 2031468:	e0bff817 	ldw	r2,-32(fp)
 203146c:	e0bff915 	stw	r2,-28(fp)

  while (len > 7)  {
 2031470:	00001d06 	br	20314e8 <lwip_standard_chksum+0x134>
    tmp = sum + *pl++;          /* ping */
 2031474:	e0bff917 	ldw	r2,-28(fp)
 2031478:	10c00104 	addi	r3,r2,4
 203147c:	e0fff915 	stw	r3,-28(fp)
 2031480:	10c00017 	ldw	r3,0(r2)
 2031484:	e0bffa17 	ldw	r2,-24(fp)
 2031488:	1885883a 	add	r2,r3,r2
 203148c:	e0bffb15 	stw	r2,-20(fp)
    if (tmp < sum) {
 2031490:	e0fffb17 	ldw	r3,-20(fp)
 2031494:	e0bffa17 	ldw	r2,-24(fp)
 2031498:	1880032e 	bgeu	r3,r2,20314a8 <lwip_standard_chksum+0xf4>
      tmp++;                    /* add back carry */
 203149c:	e0bffb17 	ldw	r2,-20(fp)
 20314a0:	10800044 	addi	r2,r2,1
 20314a4:	e0bffb15 	stw	r2,-20(fp)
    }

    sum = tmp + *pl++;          /* pong */
 20314a8:	e0bff917 	ldw	r2,-28(fp)
 20314ac:	10c00104 	addi	r3,r2,4
 20314b0:	e0fff915 	stw	r3,-28(fp)
 20314b4:	10c00017 	ldw	r3,0(r2)
 20314b8:	e0bffb17 	ldw	r2,-20(fp)
 20314bc:	1885883a 	add	r2,r3,r2
 20314c0:	e0bffa15 	stw	r2,-24(fp)
    if (sum < tmp) {
 20314c4:	e0fffa17 	ldw	r3,-24(fp)
 20314c8:	e0bffb17 	ldw	r2,-20(fp)
 20314cc:	1880032e 	bgeu	r3,r2,20314dc <lwip_standard_chksum+0x128>
      sum++;                    /* add back carry */
 20314d0:	e0bffa17 	ldw	r2,-24(fp)
 20314d4:	10800044 	addi	r2,r2,1
 20314d8:	e0bffa15 	stw	r2,-24(fp)
    }

    len -= 8;
 20314dc:	e0bfff17 	ldw	r2,-4(fp)
 20314e0:	10bffe04 	addi	r2,r2,-8
 20314e4:	e0bfff15 	stw	r2,-4(fp)
    len -= 2;
  }

  pl = (u32_t *)ps;

  while (len > 7)  {
 20314e8:	e0bfff17 	ldw	r2,-4(fp)
 20314ec:	10800208 	cmpgei	r2,r2,8
 20314f0:	103fe01e 	bne	r2,zero,2031474 <__alt_mem_mem_0+0xfd011474>

    len -= 8;
  }

  /* make room in upper bits */
  sum = FOLD_U32T(sum);
 20314f4:	e0bffa17 	ldw	r2,-24(fp)
 20314f8:	1006d43a 	srli	r3,r2,16
 20314fc:	e0bffa17 	ldw	r2,-24(fp)
 2031500:	10bfffcc 	andi	r2,r2,65535
 2031504:	1885883a 	add	r2,r3,r2
 2031508:	e0bffa15 	stw	r2,-24(fp)

  ps = (u16_t *)pl;
 203150c:	e0bff917 	ldw	r2,-28(fp)
 2031510:	e0bff815 	stw	r2,-32(fp)

  /* 16-bit aligned word remaining? */
  while (len > 1) {
 2031514:	00000b06 	br	2031544 <lwip_standard_chksum+0x190>
    sum += *ps++;
 2031518:	e0bff817 	ldw	r2,-32(fp)
 203151c:	10c00084 	addi	r3,r2,2
 2031520:	e0fff815 	stw	r3,-32(fp)
 2031524:	1080000b 	ldhu	r2,0(r2)
 2031528:	10bfffcc 	andi	r2,r2,65535
 203152c:	e0fffa17 	ldw	r3,-24(fp)
 2031530:	1885883a 	add	r2,r3,r2
 2031534:	e0bffa15 	stw	r2,-24(fp)
    len -= 2;
 2031538:	e0bfff17 	ldw	r2,-4(fp)
 203153c:	10bfff84 	addi	r2,r2,-2
 2031540:	e0bfff15 	stw	r2,-4(fp)
  sum = FOLD_U32T(sum);

  ps = (u16_t *)pl;

  /* 16-bit aligned word remaining? */
  while (len > 1) {
 2031544:	e0bfff17 	ldw	r2,-4(fp)
 2031548:	10800088 	cmpgei	r2,r2,2
 203154c:	103ff21e 	bne	r2,zero,2031518 <__alt_mem_mem_0+0xfd011518>
    sum += *ps++;
    len -= 2;
  }

  /* dangling tail byte remaining? */
  if (len > 0) {                /* include odd byte */
 2031550:	e0bfff17 	ldw	r2,-4(fp)
 2031554:	0080040e 	bge	zero,r2,2031568 <lwip_standard_chksum+0x1b4>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
 2031558:	e0bffd04 	addi	r2,fp,-12
 203155c:	e0fff817 	ldw	r3,-32(fp)
 2031560:	18c00003 	ldbu	r3,0(r3)
 2031564:	10c00005 	stb	r3,0(r2)
  }

  sum += t;                     /* add end bytes */
 2031568:	e0bffd0b 	ldhu	r2,-12(fp)
 203156c:	10bfffcc 	andi	r2,r2,65535
 2031570:	e0fffa17 	ldw	r3,-24(fp)
 2031574:	1885883a 	add	r2,r3,r2
 2031578:	e0bffa15 	stw	r2,-24(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
 203157c:	e0bffa17 	ldw	r2,-24(fp)
 2031580:	1006d43a 	srli	r3,r2,16
 2031584:	e0bffa17 	ldw	r2,-24(fp)
 2031588:	10bfffcc 	andi	r2,r2,65535
 203158c:	1885883a 	add	r2,r3,r2
 2031590:	e0bffa15 	stw	r2,-24(fp)
  sum = FOLD_U32T(sum);
 2031594:	e0bffa17 	ldw	r2,-24(fp)
 2031598:	1006d43a 	srli	r3,r2,16
 203159c:	e0bffa17 	ldw	r2,-24(fp)
 20315a0:	10bfffcc 	andi	r2,r2,65535
 20315a4:	1885883a 	add	r2,r3,r2
 20315a8:	e0bffa15 	stw	r2,-24(fp)

  if (odd) {
 20315ac:	e0bffc17 	ldw	r2,-16(fp)
 20315b0:	10000826 	beq	r2,zero,20315d4 <lwip_standard_chksum+0x220>
    sum = SWAP_BYTES_IN_WORD(sum);
 20315b4:	e0bffa17 	ldw	r2,-24(fp)
 20315b8:	10bfc00c 	andi	r2,r2,65280
 20315bc:	1006d23a 	srli	r3,r2,8
 20315c0:	e0bffa17 	ldw	r2,-24(fp)
 20315c4:	1004923a 	slli	r2,r2,8
 20315c8:	10bfffcc 	andi	r2,r2,65535
 20315cc:	1884b03a 	or	r2,r3,r2
 20315d0:	e0bffa15 	stw	r2,-24(fp)
  }

  return (u16_t)sum;
 20315d4:	e0bffa17 	ldw	r2,-24(fp)
}
 20315d8:	e037883a 	mov	sp,fp
 20315dc:	df000017 	ldw	fp,0(sp)
 20315e0:	dec00104 	addi	sp,sp,4
 20315e4:	f800283a 	ret

020315e8 <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
 20315e8:	defff504 	addi	sp,sp,-44
 20315ec:	dfc00a15 	stw	ra,40(sp)
 20315f0:	df000915 	stw	fp,36(sp)
 20315f4:	df000904 	addi	fp,sp,36
 20315f8:	e13ffb15 	stw	r4,-20(fp)
 20315fc:	e17ffc15 	stw	r5,-16(fp)
 2031600:	e1bffd15 	stw	r6,-12(fp)
 2031604:	3807883a 	mov	r3,r7
 2031608:	e0800217 	ldw	r2,8(fp)
 203160c:	e0fffe05 	stb	r3,-8(fp)
 2031610:	e0bfff0d 	sth	r2,-4(fp)
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 2031614:	e03ff715 	stw	zero,-36(fp)
  swapped = 0;
 2031618:	e03ff905 	stb	zero,-28(fp)
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
 203161c:	e0bffb17 	ldw	r2,-20(fp)
 2031620:	e0bff815 	stw	r2,-32(fp)
 2031624:	00002606 	br	20316c0 <inet_chksum_pseudo+0xd8>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 2031628:	e0bff817 	ldw	r2,-32(fp)
 203162c:	10c00117 	ldw	r3,4(r2)
 2031630:	e0bff817 	ldw	r2,-32(fp)
 2031634:	1080028b 	ldhu	r2,10(r2)
 2031638:	10bfffcc 	andi	r2,r2,65535
 203163c:	100b883a 	mov	r5,r2
 2031640:	1809883a 	mov	r4,r3
 2031644:	20313b40 	call	20313b4 <lwip_standard_chksum>
 2031648:	10bfffcc 	andi	r2,r2,65535
 203164c:	e0fff717 	ldw	r3,-36(fp)
 2031650:	1885883a 	add	r2,r3,r2
 2031654:	e0bff715 	stw	r2,-36(fp)
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 2031658:	e0bff717 	ldw	r2,-36(fp)
 203165c:	1006d43a 	srli	r3,r2,16
 2031660:	e0bff717 	ldw	r2,-36(fp)
 2031664:	10bfffcc 	andi	r2,r2,65535
 2031668:	1885883a 	add	r2,r3,r2
 203166c:	e0bff715 	stw	r2,-36(fp)
    if (q->len % 2 != 0) {
 2031670:	e0bff817 	ldw	r2,-32(fp)
 2031674:	1080028b 	ldhu	r2,10(r2)
 2031678:	1080004c 	andi	r2,r2,1
 203167c:	10bfffcc 	andi	r2,r2,65535
 2031680:	10000c26 	beq	r2,zero,20316b4 <inet_chksum_pseudo+0xcc>
      swapped = 1 - swapped;
 2031684:	e0bff903 	ldbu	r2,-28(fp)
 2031688:	00c00044 	movi	r3,1
 203168c:	1885c83a 	sub	r2,r3,r2
 2031690:	e0bff905 	stb	r2,-28(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
 2031694:	e0bff717 	ldw	r2,-36(fp)
 2031698:	10bfc00c 	andi	r2,r2,65280
 203169c:	1006d23a 	srli	r3,r2,8
 20316a0:	e0bff717 	ldw	r2,-36(fp)
 20316a4:	1004923a 	slli	r2,r2,8
 20316a8:	10bfffcc 	andi	r2,r2,65535
 20316ac:	1884b03a 	or	r2,r3,r2
 20316b0:	e0bff715 	stw	r2,-36(fp)
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
 20316b4:	e0bff817 	ldw	r2,-32(fp)
 20316b8:	10800017 	ldw	r2,0(r2)
 20316bc:	e0bff815 	stw	r2,-32(fp)
 20316c0:	e0bff817 	ldw	r2,-32(fp)
 20316c4:	103fd81e 	bne	r2,zero,2031628 <__alt_mem_mem_0+0xfd011628>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 20316c8:	e0bff903 	ldbu	r2,-28(fp)
 20316cc:	10000826 	beq	r2,zero,20316f0 <inet_chksum_pseudo+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
 20316d0:	e0bff717 	ldw	r2,-36(fp)
 20316d4:	10bfc00c 	andi	r2,r2,65280
 20316d8:	1006d23a 	srli	r3,r2,8
 20316dc:	e0bff717 	ldw	r2,-36(fp)
 20316e0:	1004923a 	slli	r2,r2,8
 20316e4:	10bfffcc 	andi	r2,r2,65535
 20316e8:	1884b03a 	or	r2,r3,r2
 20316ec:	e0bff715 	stw	r2,-36(fp)
  }
  addr = ip4_addr_get_u32(src);
 20316f0:	e0bffc17 	ldw	r2,-16(fp)
 20316f4:	10800017 	ldw	r2,0(r2)
 20316f8:	e0bffa15 	stw	r2,-24(fp)
  acc += (addr & 0xffffUL);
 20316fc:	e0bffa17 	ldw	r2,-24(fp)
 2031700:	10bfffcc 	andi	r2,r2,65535
 2031704:	e0fff717 	ldw	r3,-36(fp)
 2031708:	1885883a 	add	r2,r3,r2
 203170c:	e0bff715 	stw	r2,-36(fp)
  acc += ((addr >> 16) & 0xffffUL);
 2031710:	e0bffa17 	ldw	r2,-24(fp)
 2031714:	1004d43a 	srli	r2,r2,16
 2031718:	e0fff717 	ldw	r3,-36(fp)
 203171c:	1885883a 	add	r2,r3,r2
 2031720:	e0bff715 	stw	r2,-36(fp)
  addr = ip4_addr_get_u32(dest);
 2031724:	e0bffd17 	ldw	r2,-12(fp)
 2031728:	10800017 	ldw	r2,0(r2)
 203172c:	e0bffa15 	stw	r2,-24(fp)
  acc += (addr & 0xffffUL);
 2031730:	e0bffa17 	ldw	r2,-24(fp)
 2031734:	10bfffcc 	andi	r2,r2,65535
 2031738:	e0fff717 	ldw	r3,-36(fp)
 203173c:	1885883a 	add	r2,r3,r2
 2031740:	e0bff715 	stw	r2,-36(fp)
  acc += ((addr >> 16) & 0xffffUL);
 2031744:	e0bffa17 	ldw	r2,-24(fp)
 2031748:	1004d43a 	srli	r2,r2,16
 203174c:	e0fff717 	ldw	r3,-36(fp)
 2031750:	1885883a 	add	r2,r3,r2
 2031754:	e0bff715 	stw	r2,-36(fp)
  acc += (u32_t)htons((u16_t)proto);
 2031758:	e0bffe03 	ldbu	r2,-8(fp)
 203175c:	1004923a 	slli	r2,r2,8
 2031760:	1007883a 	mov	r3,r2
 2031764:	e0bff717 	ldw	r2,-36(fp)
 2031768:	10c5883a 	add	r2,r2,r3
 203176c:	e0bff715 	stw	r2,-36(fp)
  acc += (u32_t)htons(proto_len);
 2031770:	e0bfff0b 	ldhu	r2,-4(fp)
 2031774:	1004d23a 	srli	r2,r2,8
 2031778:	10ffffcc 	andi	r3,r2,65535
 203177c:	e0bfff0b 	ldhu	r2,-4(fp)
 2031780:	1004923a 	slli	r2,r2,8
 2031784:	10bfffcc 	andi	r2,r2,65535
 2031788:	1884b03a 	or	r2,r3,r2
 203178c:	1007883a 	mov	r3,r2
 2031790:	e0bff717 	ldw	r2,-36(fp)
 2031794:	10c5883a 	add	r2,r2,r3
 2031798:	e0bff715 	stw	r2,-36(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
 203179c:	e0bff717 	ldw	r2,-36(fp)
 20317a0:	1006d43a 	srli	r3,r2,16
 20317a4:	e0bff717 	ldw	r2,-36(fp)
 20317a8:	10bfffcc 	andi	r2,r2,65535
 20317ac:	1885883a 	add	r2,r3,r2
 20317b0:	e0bff715 	stw	r2,-36(fp)
  acc = FOLD_U32T(acc);
 20317b4:	e0bff717 	ldw	r2,-36(fp)
 20317b8:	1006d43a 	srli	r3,r2,16
 20317bc:	e0bff717 	ldw	r2,-36(fp)
 20317c0:	10bfffcc 	andi	r2,r2,65535
 20317c4:	1885883a 	add	r2,r3,r2
 20317c8:	e0bff715 	stw	r2,-36(fp)
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 20317cc:	e0bff717 	ldw	r2,-36(fp)
 20317d0:	0084303a 	nor	r2,zero,r2
}
 20317d4:	e037883a 	mov	sp,fp
 20317d8:	dfc00117 	ldw	ra,4(sp)
 20317dc:	df000017 	ldw	fp,0(sp)
 20317e0:	dec00204 	addi	sp,sp,8
 20317e4:	f800283a 	ret

020317e8 <inet_chksum_pseudo_partial>:
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len, u16_t chksum_len)
{
 20317e8:	defff404 	addi	sp,sp,-48
 20317ec:	dfc00b15 	stw	ra,44(sp)
 20317f0:	df000a15 	stw	fp,40(sp)
 20317f4:	df000a04 	addi	fp,sp,40
 20317f8:	e13ffa15 	stw	r4,-24(fp)
 20317fc:	e17ffb15 	stw	r5,-20(fp)
 2031800:	e1bffc15 	stw	r6,-16(fp)
 2031804:	3809883a 	mov	r4,r7
 2031808:	e0c00217 	ldw	r3,8(fp)
 203180c:	e0800317 	ldw	r2,12(fp)
 2031810:	e13ffd05 	stb	r4,-12(fp)
 2031814:	e0fffe0d 	sth	r3,-8(fp)
 2031818:	e0bfff0d 	sth	r2,-4(fp)
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;
  u16_t chklen;

  acc = 0;
 203181c:	e03ff615 	stw	zero,-40(fp)
  swapped = 0;
 2031820:	e03ff805 	stb	zero,-32(fp)
  /* iterate through all pbuf in chain */
  for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
 2031824:	e0bffa17 	ldw	r2,-24(fp)
 2031828:	e0bff715 	stw	r2,-36(fp)
 203182c:	00003006 	br	20318f0 <inet_chksum_pseudo_partial+0x108>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
 2031830:	e0bff717 	ldw	r2,-36(fp)
 2031834:	1080028b 	ldhu	r2,10(r2)
 2031838:	e0bff88d 	sth	r2,-30(fp)
    if (chklen > chksum_len) {
 203183c:	e0bff88b 	ldhu	r2,-30(fp)
 2031840:	e0ffff0b 	ldhu	r3,-4(fp)
 2031844:	1880022e 	bgeu	r3,r2,2031850 <inet_chksum_pseudo_partial+0x68>
      chklen = chksum_len;
 2031848:	e0bfff0b 	ldhu	r2,-4(fp)
 203184c:	e0bff88d 	sth	r2,-30(fp)
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
 2031850:	e0bff717 	ldw	r2,-36(fp)
 2031854:	10800117 	ldw	r2,4(r2)
 2031858:	e0fff88b 	ldhu	r3,-30(fp)
 203185c:	180b883a 	mov	r5,r3
 2031860:	1009883a 	mov	r4,r2
 2031864:	20313b40 	call	20313b4 <lwip_standard_chksum>
 2031868:	10bfffcc 	andi	r2,r2,65535
 203186c:	e0fff617 	ldw	r3,-40(fp)
 2031870:	1885883a 	add	r2,r3,r2
 2031874:	e0bff615 	stw	r2,-40(fp)
    chksum_len -= chklen;
 2031878:	e0ffff0b 	ldhu	r3,-4(fp)
 203187c:	e0bff88b 	ldhu	r2,-30(fp)
 2031880:	1885c83a 	sub	r2,r3,r2
 2031884:	e0bfff0d 	sth	r2,-4(fp)
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
 2031888:	e0bff617 	ldw	r2,-40(fp)
 203188c:	1006d43a 	srli	r3,r2,16
 2031890:	e0bff617 	ldw	r2,-40(fp)
 2031894:	10bfffcc 	andi	r2,r2,65535
 2031898:	1885883a 	add	r2,r3,r2
 203189c:	e0bff615 	stw	r2,-40(fp)
    if (q->len % 2 != 0) {
 20318a0:	e0bff717 	ldw	r2,-36(fp)
 20318a4:	1080028b 	ldhu	r2,10(r2)
 20318a8:	1080004c 	andi	r2,r2,1
 20318ac:	10bfffcc 	andi	r2,r2,65535
 20318b0:	10000c26 	beq	r2,zero,20318e4 <inet_chksum_pseudo_partial+0xfc>
      swapped = 1 - swapped;
 20318b4:	e0bff803 	ldbu	r2,-32(fp)
 20318b8:	00c00044 	movi	r3,1
 20318bc:	1885c83a 	sub	r2,r3,r2
 20318c0:	e0bff805 	stb	r2,-32(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
 20318c4:	e0bff617 	ldw	r2,-40(fp)
 20318c8:	10bfc00c 	andi	r2,r2,65280
 20318cc:	1006d23a 	srli	r3,r2,8
 20318d0:	e0bff617 	ldw	r2,-40(fp)
 20318d4:	1004923a 	slli	r2,r2,8
 20318d8:	10bfffcc 	andi	r2,r2,65535
 20318dc:	1884b03a 	or	r2,r3,r2
 20318e0:	e0bff615 	stw	r2,-40(fp)
  u16_t chklen;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
 20318e4:	e0bff717 	ldw	r2,-36(fp)
 20318e8:	10800017 	ldw	r2,0(r2)
 20318ec:	e0bff715 	stw	r2,-36(fp)
 20318f0:	e0bff717 	ldw	r2,-36(fp)
 20318f4:	10000226 	beq	r2,zero,2031900 <inet_chksum_pseudo_partial+0x118>
 20318f8:	e0bfff0b 	ldhu	r2,-4(fp)
 20318fc:	103fcc1e 	bne	r2,zero,2031830 <__alt_mem_mem_0+0xfd011830>
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 2031900:	e0bff803 	ldbu	r2,-32(fp)
 2031904:	10000826 	beq	r2,zero,2031928 <inet_chksum_pseudo_partial+0x140>
    acc = SWAP_BYTES_IN_WORD(acc);
 2031908:	e0bff617 	ldw	r2,-40(fp)
 203190c:	10bfc00c 	andi	r2,r2,65280
 2031910:	1006d23a 	srli	r3,r2,8
 2031914:	e0bff617 	ldw	r2,-40(fp)
 2031918:	1004923a 	slli	r2,r2,8
 203191c:	10bfffcc 	andi	r2,r2,65535
 2031920:	1884b03a 	or	r2,r3,r2
 2031924:	e0bff615 	stw	r2,-40(fp)
  }
  addr = ip4_addr_get_u32(src);
 2031928:	e0bffb17 	ldw	r2,-20(fp)
 203192c:	10800017 	ldw	r2,0(r2)
 2031930:	e0bff915 	stw	r2,-28(fp)
  acc += (addr & 0xffffUL);
 2031934:	e0bff917 	ldw	r2,-28(fp)
 2031938:	10bfffcc 	andi	r2,r2,65535
 203193c:	e0fff617 	ldw	r3,-40(fp)
 2031940:	1885883a 	add	r2,r3,r2
 2031944:	e0bff615 	stw	r2,-40(fp)
  acc += ((addr >> 16) & 0xffffUL);
 2031948:	e0bff917 	ldw	r2,-28(fp)
 203194c:	1004d43a 	srli	r2,r2,16
 2031950:	e0fff617 	ldw	r3,-40(fp)
 2031954:	1885883a 	add	r2,r3,r2
 2031958:	e0bff615 	stw	r2,-40(fp)
  addr = ip4_addr_get_u32(dest);
 203195c:	e0bffc17 	ldw	r2,-16(fp)
 2031960:	10800017 	ldw	r2,0(r2)
 2031964:	e0bff915 	stw	r2,-28(fp)
  acc += (addr & 0xffffUL);
 2031968:	e0bff917 	ldw	r2,-28(fp)
 203196c:	10bfffcc 	andi	r2,r2,65535
 2031970:	e0fff617 	ldw	r3,-40(fp)
 2031974:	1885883a 	add	r2,r3,r2
 2031978:	e0bff615 	stw	r2,-40(fp)
  acc += ((addr >> 16) & 0xffffUL);
 203197c:	e0bff917 	ldw	r2,-28(fp)
 2031980:	1004d43a 	srli	r2,r2,16
 2031984:	e0fff617 	ldw	r3,-40(fp)
 2031988:	1885883a 	add	r2,r3,r2
 203198c:	e0bff615 	stw	r2,-40(fp)
  acc += (u32_t)htons((u16_t)proto);
 2031990:	e0bffd03 	ldbu	r2,-12(fp)
 2031994:	1004923a 	slli	r2,r2,8
 2031998:	1007883a 	mov	r3,r2
 203199c:	e0bff617 	ldw	r2,-40(fp)
 20319a0:	10c5883a 	add	r2,r2,r3
 20319a4:	e0bff615 	stw	r2,-40(fp)
  acc += (u32_t)htons(proto_len);
 20319a8:	e0bffe0b 	ldhu	r2,-8(fp)
 20319ac:	1004d23a 	srli	r2,r2,8
 20319b0:	10ffffcc 	andi	r3,r2,65535
 20319b4:	e0bffe0b 	ldhu	r2,-8(fp)
 20319b8:	1004923a 	slli	r2,r2,8
 20319bc:	10bfffcc 	andi	r2,r2,65535
 20319c0:	1884b03a 	or	r2,r3,r2
 20319c4:	1007883a 	mov	r3,r2
 20319c8:	e0bff617 	ldw	r2,-40(fp)
 20319cc:	10c5883a 	add	r2,r2,r3
 20319d0:	e0bff615 	stw	r2,-40(fp)

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
 20319d4:	e0bff617 	ldw	r2,-40(fp)
 20319d8:	1006d43a 	srli	r3,r2,16
 20319dc:	e0bff617 	ldw	r2,-40(fp)
 20319e0:	10bfffcc 	andi	r2,r2,65535
 20319e4:	1885883a 	add	r2,r3,r2
 20319e8:	e0bff615 	stw	r2,-40(fp)
  acc = FOLD_U32T(acc);
 20319ec:	e0bff617 	ldw	r2,-40(fp)
 20319f0:	1006d43a 	srli	r3,r2,16
 20319f4:	e0bff617 	ldw	r2,-40(fp)
 20319f8:	10bfffcc 	andi	r2,r2,65535
 20319fc:	1885883a 	add	r2,r3,r2
 2031a00:	e0bff615 	stw	r2,-40(fp)
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 2031a04:	e0bff617 	ldw	r2,-40(fp)
 2031a08:	0084303a 	nor	r2,zero,r2
}
 2031a0c:	e037883a 	mov	sp,fp
 2031a10:	dfc00117 	ldw	ra,4(sp)
 2031a14:	df000017 	ldw	fp,0(sp)
 2031a18:	dec00204 	addi	sp,sp,8
 2031a1c:	f800283a 	ret

02031a20 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
 2031a20:	defffc04 	addi	sp,sp,-16
 2031a24:	dfc00315 	stw	ra,12(sp)
 2031a28:	df000215 	stw	fp,8(sp)
 2031a2c:	df000204 	addi	fp,sp,8
 2031a30:	e13ffe15 	stw	r4,-8(fp)
 2031a34:	2805883a 	mov	r2,r5
 2031a38:	e0bfff0d 	sth	r2,-4(fp)
  return ~LWIP_CHKSUM(dataptr, len);
 2031a3c:	e0bfff0b 	ldhu	r2,-4(fp)
 2031a40:	100b883a 	mov	r5,r2
 2031a44:	e13ffe17 	ldw	r4,-8(fp)
 2031a48:	20313b40 	call	20313b4 <lwip_standard_chksum>
 2031a4c:	0084303a 	nor	r2,zero,r2
}
 2031a50:	e037883a 	mov	sp,fp
 2031a54:	dfc00117 	ldw	ra,4(sp)
 2031a58:	df000017 	ldw	fp,0(sp)
 2031a5c:	dec00204 	addi	sp,sp,8
 2031a60:	f800283a 	ret

02031a64 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 2031a64:	defffa04 	addi	sp,sp,-24
 2031a68:	dfc00515 	stw	ra,20(sp)
 2031a6c:	df000415 	stw	fp,16(sp)
 2031a70:	df000404 	addi	fp,sp,16
 2031a74:	e13fff15 	stw	r4,-4(fp)
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 2031a78:	e03ffc15 	stw	zero,-16(fp)
  swapped = 0;
 2031a7c:	e03ffe05 	stb	zero,-8(fp)
  for(q = p; q != NULL; q = q->next) {
 2031a80:	e0bfff17 	ldw	r2,-4(fp)
 2031a84:	e0bffd15 	stw	r2,-12(fp)
 2031a88:	00002606 	br	2031b24 <inet_chksum_pbuf+0xc0>
    acc += LWIP_CHKSUM(q->payload, q->len);
 2031a8c:	e0bffd17 	ldw	r2,-12(fp)
 2031a90:	10c00117 	ldw	r3,4(r2)
 2031a94:	e0bffd17 	ldw	r2,-12(fp)
 2031a98:	1080028b 	ldhu	r2,10(r2)
 2031a9c:	10bfffcc 	andi	r2,r2,65535
 2031aa0:	100b883a 	mov	r5,r2
 2031aa4:	1809883a 	mov	r4,r3
 2031aa8:	20313b40 	call	20313b4 <lwip_standard_chksum>
 2031aac:	10bfffcc 	andi	r2,r2,65535
 2031ab0:	e0fffc17 	ldw	r3,-16(fp)
 2031ab4:	1885883a 	add	r2,r3,r2
 2031ab8:	e0bffc15 	stw	r2,-16(fp)
    acc = FOLD_U32T(acc);
 2031abc:	e0bffc17 	ldw	r2,-16(fp)
 2031ac0:	1006d43a 	srli	r3,r2,16
 2031ac4:	e0bffc17 	ldw	r2,-16(fp)
 2031ac8:	10bfffcc 	andi	r2,r2,65535
 2031acc:	1885883a 	add	r2,r3,r2
 2031ad0:	e0bffc15 	stw	r2,-16(fp)
    if (q->len % 2 != 0) {
 2031ad4:	e0bffd17 	ldw	r2,-12(fp)
 2031ad8:	1080028b 	ldhu	r2,10(r2)
 2031adc:	1080004c 	andi	r2,r2,1
 2031ae0:	10bfffcc 	andi	r2,r2,65535
 2031ae4:	10000c26 	beq	r2,zero,2031b18 <inet_chksum_pbuf+0xb4>
      swapped = 1 - swapped;
 2031ae8:	e0bffe03 	ldbu	r2,-8(fp)
 2031aec:	00c00044 	movi	r3,1
 2031af0:	1885c83a 	sub	r2,r3,r2
 2031af4:	e0bffe05 	stb	r2,-8(fp)
      acc = SWAP_BYTES_IN_WORD(acc);
 2031af8:	e0bffc17 	ldw	r2,-16(fp)
 2031afc:	10bfc00c 	andi	r2,r2,65280
 2031b00:	1006d23a 	srli	r3,r2,8
 2031b04:	e0bffc17 	ldw	r2,-16(fp)
 2031b08:	1004923a 	slli	r2,r2,8
 2031b0c:	10bfffcc 	andi	r2,r2,65535
 2031b10:	1884b03a 	or	r2,r3,r2
 2031b14:	e0bffc15 	stw	r2,-16(fp)
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
 2031b18:	e0bffd17 	ldw	r2,-12(fp)
 2031b1c:	10800017 	ldw	r2,0(r2)
 2031b20:	e0bffd15 	stw	r2,-12(fp)
 2031b24:	e0bffd17 	ldw	r2,-12(fp)
 2031b28:	103fd81e 	bne	r2,zero,2031a8c <__alt_mem_mem_0+0xfd011a8c>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 2031b2c:	e0bffe03 	ldbu	r2,-8(fp)
 2031b30:	10000826 	beq	r2,zero,2031b54 <inet_chksum_pbuf+0xf0>
    acc = SWAP_BYTES_IN_WORD(acc);
 2031b34:	e0bffc17 	ldw	r2,-16(fp)
 2031b38:	10bfc00c 	andi	r2,r2,65280
 2031b3c:	1006d23a 	srli	r3,r2,8
 2031b40:	e0bffc17 	ldw	r2,-16(fp)
 2031b44:	1004923a 	slli	r2,r2,8
 2031b48:	10bfffcc 	andi	r2,r2,65535
 2031b4c:	1884b03a 	or	r2,r3,r2
 2031b50:	e0bffc15 	stw	r2,-16(fp)
  }
  return (u16_t)~(acc & 0xffffUL);
 2031b54:	e0bffc17 	ldw	r2,-16(fp)
 2031b58:	0084303a 	nor	r2,zero,r2
}
 2031b5c:	e037883a 	mov	sp,fp
 2031b60:	dfc00117 	ldw	ra,4(sp)
 2031b64:	df000017 	ldw	fp,0(sp)
 2031b68:	dec00204 	addi	sp,sp,8
 2031b6c:	f800283a 	ret

02031b70 <lwip_chksum_copy>:
 * For architectures with big caches, data might still be in cache when
 * generating the checksum after copying.
 */
u16_t
lwip_chksum_copy(void *dst, const void *src, u16_t len)
{
 2031b70:	defffb04 	addi	sp,sp,-20
 2031b74:	dfc00415 	stw	ra,16(sp)
 2031b78:	df000315 	stw	fp,12(sp)
 2031b7c:	df000304 	addi	fp,sp,12
 2031b80:	e13ffd15 	stw	r4,-12(fp)
 2031b84:	e17ffe15 	stw	r5,-8(fp)
 2031b88:	3005883a 	mov	r2,r6
 2031b8c:	e0bfff0d 	sth	r2,-4(fp)
  MEMCPY(dst, src, len);
 2031b90:	e0bfff0b 	ldhu	r2,-4(fp)
 2031b94:	100d883a 	mov	r6,r2
 2031b98:	e17ffe17 	ldw	r5,-8(fp)
 2031b9c:	e13ffd17 	ldw	r4,-12(fp)
 2031ba0:	2005e580 	call	2005e58 <memcpy>
  return LWIP_CHKSUM(dst, len);
 2031ba4:	e0bfff0b 	ldhu	r2,-4(fp)
 2031ba8:	100b883a 	mov	r5,r2
 2031bac:	e13ffd17 	ldw	r4,-12(fp)
 2031bb0:	20313b40 	call	20313b4 <lwip_standard_chksum>
}
 2031bb4:	e037883a 	mov	sp,fp
 2031bb8:	dfc00117 	ldw	ra,4(sp)
 2031bbc:	df000017 	ldw	fp,0(sp)
 2031bc0:	dec00204 	addi	sp,sp,8
 2031bc4:	f800283a 	ret

02031bc8 <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *src, ip_addr_t *dest)
{
 2031bc8:	defffc04 	addi	sp,sp,-16
 2031bcc:	df000315 	stw	fp,12(sp)
 2031bd0:	df000304 	addi	fp,sp,12
 2031bd4:	e13ffe15 	stw	r4,-8(fp)
 2031bd8:	e17fff15 	stw	r5,-4(fp)
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 2031bdc:	d0a7f317 	ldw	r2,-24628(gp)
 2031be0:	e0bffd15 	stw	r2,-12(fp)
 2031be4:	00001d06 	br	2031c5c <ip_route+0x94>
    /* network mask matches? */
    if (netif_is_up(netif)) {
 2031be8:	e0bffd17 	ldw	r2,-12(fp)
 2031bec:	10800e43 	ldbu	r2,57(r2)
 2031bf0:	10803fcc 	andi	r2,r2,255
 2031bf4:	1080004c 	andi	r2,r2,1
 2031bf8:	10001526 	beq	r2,zero,2031c50 <ip_route+0x88>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
 2031bfc:	e0bfff17 	ldw	r2,-4(fp)
 2031c00:	10c00017 	ldw	r3,0(r2)
 2031c04:	e0bffd17 	ldw	r2,-12(fp)
 2031c08:	10800117 	ldw	r2,4(r2)
 2031c0c:	1886f03a 	xor	r3,r3,r2
 2031c10:	e0bffd17 	ldw	r2,-12(fp)
 2031c14:	10800217 	ldw	r2,8(r2)
 2031c18:	1884703a 	and	r2,r3,r2
 2031c1c:	10000c1e 	bne	r2,zero,2031c50 <ip_route+0x88>
        if (!src || !src->addr || ip_addr_cmp(src, &(netif->ip_addr))) {
 2031c20:	e0bffe17 	ldw	r2,-8(fp)
 2031c24:	10000826 	beq	r2,zero,2031c48 <ip_route+0x80>
 2031c28:	e0bffe17 	ldw	r2,-8(fp)
 2031c2c:	10800017 	ldw	r2,0(r2)
 2031c30:	10000526 	beq	r2,zero,2031c48 <ip_route+0x80>
 2031c34:	e0bffe17 	ldw	r2,-8(fp)
 2031c38:	10c00017 	ldw	r3,0(r2)
 2031c3c:	e0bffd17 	ldw	r2,-12(fp)
 2031c40:	10800117 	ldw	r2,4(r2)
 2031c44:	1880021e 	bne	r3,r2,2031c50 <ip_route+0x88>
        /* return netif on which to forward IP packet */
        return netif;
 2031c48:	e0bffd17 	ldw	r2,-12(fp)
 2031c4c:	00001606 	br	2031ca8 <ip_route+0xe0>
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 2031c50:	e0bffd17 	ldw	r2,-12(fp)
 2031c54:	10800017 	ldw	r2,0(r2)
 2031c58:	e0bffd15 	stw	r2,-12(fp)
 2031c5c:	e0bffd17 	ldw	r2,-12(fp)
 2031c60:	103fe11e 	bne	r2,zero,2031be8 <__alt_mem_mem_0+0xfd011be8>
        return netif;
      }
    }
  }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
 2031c64:	d0a7f417 	ldw	r2,-24624(gp)
 2031c68:	10000526 	beq	r2,zero,2031c80 <ip_route+0xb8>
 2031c6c:	d0a7f417 	ldw	r2,-24624(gp)
 2031c70:	10800e43 	ldbu	r2,57(r2)
 2031c74:	10803fcc 	andi	r2,r2,255
 2031c78:	1080004c 	andi	r2,r2,1
 2031c7c:	1000091e 	bne	r2,zero,2031ca4 <ip_route+0xdc>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 2031c80:	008085f4 	movhi	r2,535
 2031c84:	10a86704 	addi	r2,r2,-24164
 2031c88:	10802b17 	ldw	r2,172(r2)
 2031c8c:	10c00044 	addi	r3,r2,1
 2031c90:	008085f4 	movhi	r2,535
 2031c94:	10a86704 	addi	r2,r2,-24164
 2031c98:	10c02b15 	stw	r3,172(r2)
    snmp_inc_ipoutnoroutes();
    return NULL;
 2031c9c:	0005883a 	mov	r2,zero
 2031ca0:	00000106 	br	2031ca8 <ip_route+0xe0>
  }
  /* no matching netif found, use default netif */
  return netif_default;
 2031ca4:	d0a7f417 	ldw	r2,-24624(gp)
}
 2031ca8:	e037883a 	mov	sp,fp
 2031cac:	df000017 	ldw	fp,0(sp)
 2031cb0:	dec00104 	addi	sp,sp,4
 2031cb4:	f800283a 	ret

02031cb8 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
 2031cb8:	defff604 	addi	sp,sp,-40
 2031cbc:	dfc00915 	stw	ra,36(sp)
 2031cc0:	df000815 	stw	fp,32(sp)
 2031cc4:	df000804 	addi	fp,sp,32
 2031cc8:	e13ffe15 	stw	r4,-8(fp)
 2031ccc:	e17fff15 	stw	r5,-4(fp)
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
 2031cd0:	00800044 	movi	r2,1
 2031cd4:	e0bffa15 	stw	r2,-24(fp)
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  IP_STATS_INC(ip.recv);
 2031cd8:	008085f4 	movhi	r2,535
 2031cdc:	10a86704 	addi	r2,r2,-24164
 2031ce0:	10802517 	ldw	r2,148(r2)
 2031ce4:	10c00044 	addi	r3,r2,1
 2031ce8:	008085f4 	movhi	r2,535
 2031cec:	10a86704 	addi	r2,r2,-24164
 2031cf0:	10c02515 	stw	r3,148(r2)
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 2031cf4:	e0bffe17 	ldw	r2,-8(fp)
 2031cf8:	10800117 	ldw	r2,4(r2)
 2031cfc:	e0bff815 	stw	r2,-32(fp)
  if (IPH_V(iphdr) != 4) {
 2031d00:	e0bff817 	ldw	r2,-32(fp)
 2031d04:	10800003 	ldbu	r2,0(r2)
 2031d08:	10803fcc 	andi	r2,r2,255
 2031d0c:	1004d13a 	srli	r2,r2,4
 2031d10:	10803fcc 	andi	r2,r2,255
 2031d14:	10800120 	cmpeqi	r2,r2,4
 2031d18:	1000121e 	bne	r2,zero,2031d64 <ip_input+0xac>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
 2031d1c:	e13ffe17 	ldw	r4,-8(fp)
 2031d20:	201aa200 	call	201aa20 <pbuf_free>
    IP_STATS_INC(ip.err);
 2031d24:	008085f4 	movhi	r2,535
 2031d28:	10a86704 	addi	r2,r2,-24164
 2031d2c:	10802e17 	ldw	r2,184(r2)
 2031d30:	10c00044 	addi	r3,r2,1
 2031d34:	008085f4 	movhi	r2,535
 2031d38:	10a86704 	addi	r2,r2,-24164
 2031d3c:	10c02e15 	stw	r3,184(r2)
    IP_STATS_INC(ip.drop);
 2031d40:	008085f4 	movhi	r2,535
 2031d44:	10a86704 	addi	r2,r2,-24164
 2031d48:	10802717 	ldw	r2,156(r2)
 2031d4c:	10c00044 	addi	r3,r2,1
 2031d50:	008085f4 	movhi	r2,535
 2031d54:	10a86704 	addi	r2,r2,-24164
 2031d58:	10c02715 	stw	r3,156(r2)
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 2031d5c:	0005883a 	mov	r2,zero
 2031d60:	00011f06 	br	20321e0 <ip_input+0x528>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 2031d64:	e0bff817 	ldw	r2,-32(fp)
 2031d68:	10800003 	ldbu	r2,0(r2)
 2031d6c:	10803fcc 	andi	r2,r2,255
 2031d70:	108003cc 	andi	r2,r2,15
 2031d74:	e0bffc0d 	sth	r2,-16(fp)
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 2031d78:	e0bffc0b 	ldhu	r2,-16(fp)
 2031d7c:	1085883a 	add	r2,r2,r2
 2031d80:	1085883a 	add	r2,r2,r2
 2031d84:	e0bffc0d 	sth	r2,-16(fp)
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 2031d88:	e0bff817 	ldw	r2,-32(fp)
 2031d8c:	10c00083 	ldbu	r3,2(r2)
 2031d90:	108000c3 	ldbu	r2,3(r2)
 2031d94:	1004923a 	slli	r2,r2,8
 2031d98:	10c4b03a 	or	r2,r2,r3
 2031d9c:	10bfffcc 	andi	r2,r2,65535
 2031da0:	1004d23a 	srli	r2,r2,8
 2031da4:	1009883a 	mov	r4,r2
 2031da8:	e0bff817 	ldw	r2,-32(fp)
 2031dac:	10c00083 	ldbu	r3,2(r2)
 2031db0:	108000c3 	ldbu	r2,3(r2)
 2031db4:	1004923a 	slli	r2,r2,8
 2031db8:	10c4b03a 	or	r2,r2,r3
 2031dbc:	10bfffcc 	andi	r2,r2,65535
 2031dc0:	1004923a 	slli	r2,r2,8
 2031dc4:	2084b03a 	or	r2,r4,r2
 2031dc8:	e0bffc8d 	sth	r2,-14(fp)

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 2031dcc:	e0bffe17 	ldw	r2,-8(fp)
 2031dd0:	1080028b 	ldhu	r2,10(r2)
 2031dd4:	10ffffcc 	andi	r3,r2,65535
 2031dd8:	e0bffc0b 	ldhu	r2,-16(fp)
 2031ddc:	18800536 	bltu	r3,r2,2031df4 <ip_input+0x13c>
 2031de0:	e0bffe17 	ldw	r2,-8(fp)
 2031de4:	1080020b 	ldhu	r2,8(r2)
 2031de8:	10ffffcc 	andi	r3,r2,65535
 2031dec:	e0bffc8b 	ldhu	r2,-14(fp)
 2031df0:	1880122e 	bgeu	r3,r2,2031e3c <ip_input+0x184>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 2031df4:	e13ffe17 	ldw	r4,-8(fp)
 2031df8:	201aa200 	call	201aa20 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 2031dfc:	008085f4 	movhi	r2,535
 2031e00:	10a86704 	addi	r2,r2,-24164
 2031e04:	10802917 	ldw	r2,164(r2)
 2031e08:	10c00044 	addi	r3,r2,1
 2031e0c:	008085f4 	movhi	r2,535
 2031e10:	10a86704 	addi	r2,r2,-24164
 2031e14:	10c02915 	stw	r3,164(r2)
    IP_STATS_INC(ip.drop);
 2031e18:	008085f4 	movhi	r2,535
 2031e1c:	10a86704 	addi	r2,r2,-24164
 2031e20:	10802717 	ldw	r2,156(r2)
 2031e24:	10c00044 	addi	r3,r2,1
 2031e28:	008085f4 	movhi	r2,535
 2031e2c:	10a86704 	addi	r2,r2,-24164
 2031e30:	10c02715 	stw	r3,156(r2)
    snmp_inc_ipindiscards();
    return ERR_OK;
 2031e34:	0005883a 	mov	r2,zero
 2031e38:	0000e906 	br	20321e0 <ip_input+0x528>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 2031e3c:	e0bffc0b 	ldhu	r2,-16(fp)
 2031e40:	100b883a 	mov	r5,r2
 2031e44:	e13ff817 	ldw	r4,-32(fp)
 2031e48:	2031a200 	call	2031a20 <inet_chksum>
 2031e4c:	10bfffcc 	andi	r2,r2,65535
 2031e50:	10001226 	beq	r2,zero,2031e9c <ip_input+0x1e4>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
 2031e54:	e13ffe17 	ldw	r4,-8(fp)
 2031e58:	201aa200 	call	201aa20 <pbuf_free>
    IP_STATS_INC(ip.chkerr);
 2031e5c:	008085f4 	movhi	r2,535
 2031e60:	10a86704 	addi	r2,r2,-24164
 2031e64:	10802817 	ldw	r2,160(r2)
 2031e68:	10c00044 	addi	r3,r2,1
 2031e6c:	008085f4 	movhi	r2,535
 2031e70:	10a86704 	addi	r2,r2,-24164
 2031e74:	10c02815 	stw	r3,160(r2)
    IP_STATS_INC(ip.drop);
 2031e78:	008085f4 	movhi	r2,535
 2031e7c:	10a86704 	addi	r2,r2,-24164
 2031e80:	10802717 	ldw	r2,156(r2)
 2031e84:	10c00044 	addi	r3,r2,1
 2031e88:	008085f4 	movhi	r2,535
 2031e8c:	10a86704 	addi	r2,r2,-24164
 2031e90:	10c02715 	stw	r3,156(r2)
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 2031e94:	0005883a 	mov	r2,zero
 2031e98:	0000d106 	br	20321e0 <ip_input+0x528>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
 2031e9c:	e0bffc8b 	ldhu	r2,-14(fp)
 2031ea0:	100b883a 	mov	r5,r2
 2031ea4:	e13ffe17 	ldw	r4,-8(fp)
 2031ea8:	201a7100 	call	201a710 <pbuf_realloc>

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
 2031eac:	e0bff817 	ldw	r2,-32(fp)
 2031eb0:	10c00403 	ldbu	r3,16(r2)
 2031eb4:	11000443 	ldbu	r4,17(r2)
 2031eb8:	2008923a 	slli	r4,r4,8
 2031ebc:	20c6b03a 	or	r3,r4,r3
 2031ec0:	11000483 	ldbu	r4,18(r2)
 2031ec4:	2008943a 	slli	r4,r4,16
 2031ec8:	20c6b03a 	or	r3,r4,r3
 2031ecc:	108004c3 	ldbu	r2,19(r2)
 2031ed0:	1004963a 	slli	r2,r2,24
 2031ed4:	10c4b03a 	or	r2,r2,r3
 2031ed8:	d0a81415 	stw	r2,-24496(gp)
  ip_addr_copy(current_iphdr_src, iphdr->src);
 2031edc:	e0bff817 	ldw	r2,-32(fp)
 2031ee0:	10c00303 	ldbu	r3,12(r2)
 2031ee4:	11000343 	ldbu	r4,13(r2)
 2031ee8:	2008923a 	slli	r4,r4,8
 2031eec:	20c6b03a 	or	r3,r4,r3
 2031ef0:	11000383 	ldbu	r4,14(r2)
 2031ef4:	2008943a 	slli	r4,r4,16
 2031ef8:	20c6b03a 	or	r3,r4,r3
 2031efc:	108003c3 	ldbu	r2,15(r2)
 2031f00:	1004963a 	slli	r2,r2,24
 2031f04:	10c4b03a 	or	r2,r2,r3
 2031f08:	d0a81215 	stw	r2,-24504(gp)
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 2031f0c:	00800044 	movi	r2,1
 2031f10:	e0bffb15 	stw	r2,-20(fp)
    netif = inp;
 2031f14:	e0bfff17 	ldw	r2,-4(fp)
 2031f18:	e0bff915 	stw	r2,-28(fp)
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 2031f1c:	e0bff917 	ldw	r2,-28(fp)
 2031f20:	10800e43 	ldbu	r2,57(r2)
 2031f24:	10803fcc 	andi	r2,r2,255
 2031f28:	1080004c 	andi	r2,r2,1
 2031f2c:	10001026 	beq	r2,zero,2031f70 <ip_input+0x2b8>
 2031f30:	e0bff917 	ldw	r2,-28(fp)
 2031f34:	10800104 	addi	r2,r2,4
 2031f38:	10000d26 	beq	r2,zero,2031f70 <ip_input+0x2b8>
 2031f3c:	e0bff917 	ldw	r2,-28(fp)
 2031f40:	10800117 	ldw	r2,4(r2)
 2031f44:	10000a26 	beq	r2,zero,2031f70 <ip_input+0x2b8>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 2031f48:	d0e81417 	ldw	r3,-24496(gp)
 2031f4c:	e0bff917 	ldw	r2,-28(fp)
 2031f50:	10800117 	ldw	r2,4(r2)
 2031f54:	18801726 	beq	r3,r2,2031fb4 <ip_input+0x2fc>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
 2031f58:	d0a81417 	ldw	r2,-24496(gp)
 2031f5c:	e17ff917 	ldw	r5,-28(fp)
 2031f60:	1009883a 	mov	r4,r2
 2031f64:	20187dc0 	call	20187dc <ip4_addr_isbroadcast>
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 2031f68:	10803fcc 	andi	r2,r2,255
 2031f6c:	1000111e 	bne	r2,zero,2031fb4 <ip_input+0x2fc>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 2031f70:	e0bffb17 	ldw	r2,-20(fp)
 2031f74:	10000426 	beq	r2,zero,2031f88 <ip_input+0x2d0>
        first = 0;
 2031f78:	e03ffb15 	stw	zero,-20(fp)
        netif = netif_list;
 2031f7c:	d0a7f317 	ldw	r2,-24628(gp)
 2031f80:	e0bff915 	stw	r2,-28(fp)
 2031f84:	00000306 	br	2031f94 <ip_input+0x2dc>
      } else {
        netif = netif->next;
 2031f88:	e0bff917 	ldw	r2,-28(fp)
 2031f8c:	10800017 	ldw	r2,0(r2)
 2031f90:	e0bff915 	stw	r2,-28(fp)
      }
      if (netif == inp) {
 2031f94:	e0fff917 	ldw	r3,-28(fp)
 2031f98:	e0bfff17 	ldw	r2,-4(fp)
 2031f9c:	1880031e 	bne	r3,r2,2031fac <ip_input+0x2f4>
        netif = netif->next;
 2031fa0:	e0bff917 	ldw	r2,-28(fp)
 2031fa4:	10800017 	ldw	r2,0(r2)
 2031fa8:	e0bff915 	stw	r2,-28(fp)
      }
    } while(netif != NULL);
 2031fac:	e0bff917 	ldw	r2,-28(fp)
 2031fb0:	103fda1e 	bne	r2,zero,2031f1c <__alt_mem_mem_0+0xfd011f1c>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 2031fb4:	e0bff917 	ldw	r2,-28(fp)
 2031fb8:	1000141e 	bne	r2,zero,203200c <ip_input+0x354>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 2031fbc:	e0bff817 	ldw	r2,-32(fp)
 2031fc0:	10800243 	ldbu	r2,9(r2)
 2031fc4:	10803fcc 	andi	r2,r2,255
 2031fc8:	10800458 	cmpnei	r2,r2,17
 2031fcc:	10000f1e 	bne	r2,zero,203200c <ip_input+0x354>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 2031fd0:	e0bffc0b 	ldhu	r2,-16(fp)
 2031fd4:	e0fff817 	ldw	r3,-32(fp)
 2031fd8:	1885883a 	add	r2,r3,r2
 2031fdc:	e0bffd15 	stw	r2,-12(fp)
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 2031fe0:	e0bffd17 	ldw	r2,-12(fp)
 2031fe4:	10c00083 	ldbu	r3,2(r2)
 2031fe8:	108000c3 	ldbu	r2,3(r2)
 2031fec:	1004923a 	slli	r2,r2,8
 2031ff0:	10c4b03a 	or	r2,r2,r3
 2031ff4:	10bfffcc 	andi	r2,r2,65535
 2031ff8:	10910018 	cmpnei	r2,r2,17408
 2031ffc:	1000031e 	bne	r2,zero,203200c <ip_input+0x354>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
        netif = inp;
 2032000:	e0bfff17 	ldw	r2,-4(fp)
 2032004:	e0bff915 	stw	r2,-28(fp)
        check_ip_src = 0;
 2032008:	e03ffa15 	stw	zero,-24(fp)
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
 203200c:	e0bffa17 	ldw	r2,-24(fp)
 2032010:	10001726 	beq	r2,zero,2032070 <ip_input+0x3b8>
 2032014:	d0a81217 	ldw	r2,-24504(gp)
 2032018:	10001526 	beq	r2,zero,2032070 <ip_input+0x3b8>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 203201c:	d0a81217 	ldw	r2,-24504(gp)
 2032020:	e17fff17 	ldw	r5,-4(fp)
 2032024:	1009883a 	mov	r4,r2
 2032028:	20187dc0 	call	20187dc <ip4_addr_isbroadcast>
 203202c:	10803fcc 	andi	r2,r2,255
 2032030:	1000041e 	bne	r2,zero,2032044 <ip_input+0x38c>
         (ip_addr_ismulticast(&current_iphdr_src))) {
 2032034:	d0a81217 	ldw	r2,-24504(gp)
 2032038:	10803c0c 	andi	r2,r2,240
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 203203c:	10803818 	cmpnei	r2,r2,224
 2032040:	10000b1e 	bne	r2,zero,2032070 <ip_input+0x3b8>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 2032044:	e13ffe17 	ldw	r4,-8(fp)
 2032048:	201aa200 	call	201aa20 <pbuf_free>
      IP_STATS_INC(ip.drop);
 203204c:	008085f4 	movhi	r2,535
 2032050:	10a86704 	addi	r2,r2,-24164
 2032054:	10802717 	ldw	r2,156(r2)
 2032058:	10c00044 	addi	r3,r2,1
 203205c:	008085f4 	movhi	r2,535
 2032060:	10a86704 	addi	r2,r2,-24164
 2032064:	10c02715 	stw	r3,156(r2)
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
 2032068:	0005883a 	mov	r2,zero
 203206c:	00005c06 	br	20321e0 <ip_input+0x528>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 2032070:	e0bff917 	ldw	r2,-28(fp)
 2032074:	1000041e 	bne	r2,zero,2032088 <ip_input+0x3d0>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
 2032078:	e13ffe17 	ldw	r4,-8(fp)
 203207c:	201aa200 	call	201aa20 <pbuf_free>
    return ERR_OK;
 2032080:	0005883a 	mov	r2,zero
 2032084:	00005606 	br	20321e0 <ip_input+0x528>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 2032088:	e0bff817 	ldw	r2,-32(fp)
 203208c:	10c00183 	ldbu	r3,6(r2)
 2032090:	108001c3 	ldbu	r2,7(r2)
 2032094:	1004923a 	slli	r2,r2,8
 2032098:	10c4b03a 	or	r2,r2,r3
 203209c:	10bfffcc 	andi	r2,r2,65535
 20320a0:	10bfcfcc 	andi	r2,r2,65343
 20320a4:	10000a26 	beq	r2,zero,20320d0 <ip_input+0x418>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
 20320a8:	e13ffe17 	ldw	r4,-8(fp)
 20320ac:	20335c80 	call	20335c8 <ip_reass>
 20320b0:	e0bffe15 	stw	r2,-8(fp)
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 20320b4:	e0bffe17 	ldw	r2,-8(fp)
 20320b8:	1000021e 	bne	r2,zero,20320c4 <ip_input+0x40c>
      return ERR_OK;
 20320bc:	0005883a 	mov	r2,zero
 20320c0:	00004706 	br	20321e0 <ip_input+0x528>
    }
    iphdr = (struct ip_hdr *)p->payload;
 20320c4:	e0bffe17 	ldw	r2,-8(fp)
 20320c8:	10800117 	ldw	r2,4(r2)
 20320cc:	e0bff815 	stw	r2,-32(fp)
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 20320d0:	e0bfff17 	ldw	r2,-4(fp)
 20320d4:	d0a81315 	stw	r2,-24500(gp)
  current_header = iphdr;
 20320d8:	e0bff817 	ldw	r2,-32(fp)
 20320dc:	d0a81515 	stw	r2,-24492(gp)

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 20320e0:	e17fff17 	ldw	r5,-4(fp)
 20320e4:	e13ffe17 	ldw	r4,-8(fp)
 20320e8:	20345940 	call	2034594 <raw_input>
 20320ec:	10803fcc 	andi	r2,r2,255
 20320f0:	1000361e 	bne	r2,zero,20321cc <ip_input+0x514>
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
 20320f4:	e0bff817 	ldw	r2,-32(fp)
 20320f8:	10800243 	ldbu	r2,9(r2)
 20320fc:	10803fcc 	andi	r2,r2,255
 2032100:	10c001a0 	cmpeqi	r3,r2,6
 2032104:	1800091e 	bne	r3,zero,203212c <ip_input+0x474>
 2032108:	10c00460 	cmpeqi	r3,r2,17
 203210c:	1800031e 	bne	r3,zero,203211c <ip_input+0x464>
 2032110:	10800060 	cmpeqi	r2,r2,1
 2032114:	1000091e 	bne	r2,zero,203213c <ip_input+0x484>
 2032118:	00000c06 	br	203214c <ip_input+0x494>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
 203211c:	e17fff17 	ldw	r5,-4(fp)
 2032120:	e13ffe17 	ldw	r4,-8(fp)
 2032124:	2021a300 	call	2021a30 <udp_input>
      break;
 2032128:	00002806 	br	20321cc <ip_input+0x514>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
 203212c:	e17fff17 	ldw	r5,-4(fp)
 2032130:	e13ffe17 	ldw	r4,-8(fp)
 2032134:	2034a800 	call	2034a80 <tcp_input>
      break;
 2032138:	00002406 	br	20321cc <ip_input+0x514>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
 203213c:	e17fff17 	ldw	r5,-4(fp)
 2032140:	e13ffe17 	ldw	r4,-8(fp)
 2032144:	2030b480 	call	2030b48 <icmp_input>
      break;
 2032148:	00002006 	br	20321cc <ip_input+0x514>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 203214c:	d0a81417 	ldw	r2,-24496(gp)
 2032150:	e17fff17 	ldw	r5,-4(fp)
 2032154:	1009883a 	mov	r4,r2
 2032158:	20187dc0 	call	20187dc <ip4_addr_isbroadcast>
 203215c:	10803fcc 	andi	r2,r2,255
 2032160:	10000a1e 	bne	r2,zero,203218c <ip_input+0x4d4>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 2032164:	d0a81417 	ldw	r2,-24496(gp)
 2032168:	10803c0c 	andi	r2,r2,240
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 203216c:	10803820 	cmpeqi	r2,r2,224
 2032170:	1000061e 	bne	r2,zero,203218c <ip_input+0x4d4>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
 2032174:	e0bffe17 	ldw	r2,-8(fp)
 2032178:	e0fff817 	ldw	r3,-32(fp)
 203217c:	10c00115 	stw	r3,4(r2)
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 2032180:	01400084 	movi	r5,2
 2032184:	e13ffe17 	ldw	r4,-8(fp)
 2032188:	20311440 	call	2031144 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 203218c:	e13ffe17 	ldw	r4,-8(fp)
 2032190:	201aa200 	call	201aa20 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 2032194:	008085f4 	movhi	r2,535
 2032198:	10a86704 	addi	r2,r2,-24164
 203219c:	10802c17 	ldw	r2,176(r2)
 20321a0:	10c00044 	addi	r3,r2,1
 20321a4:	008085f4 	movhi	r2,535
 20321a8:	10a86704 	addi	r2,r2,-24164
 20321ac:	10c02c15 	stw	r3,176(r2)
      IP_STATS_INC(ip.drop);
 20321b0:	008085f4 	movhi	r2,535
 20321b4:	10a86704 	addi	r2,r2,-24164
 20321b8:	10802717 	ldw	r2,156(r2)
 20321bc:	10c00044 	addi	r3,r2,1
 20321c0:	008085f4 	movhi	r2,535
 20321c4:	10a86704 	addi	r2,r2,-24164
 20321c8:	10c02715 	stw	r3,156(r2)
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
 20321cc:	d0281315 	stw	zero,-24500(gp)
  current_header = NULL;
 20321d0:	d0281515 	stw	zero,-24492(gp)
  ip_addr_set_any(&current_iphdr_src);
 20321d4:	d0281215 	stw	zero,-24504(gp)
  ip_addr_set_any(&current_iphdr_dest);
 20321d8:	d0281415 	stw	zero,-24496(gp)

  return ERR_OK;
 20321dc:	0005883a 	mov	r2,zero
}
 20321e0:	e037883a 	mov	sp,fp
 20321e4:	dfc00117 	ldw	ra,4(sp)
 20321e8:	df000017 	ldw	fp,0(sp)
 20321ec:	dec00204 	addi	sp,sp,8
 20321f0:	f800283a 	ret

020321f4 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 20321f4:	defff404 	addi	sp,sp,-48
 20321f8:	dfc00b15 	stw	ra,44(sp)
 20321fc:	df000a15 	stw	fp,40(sp)
 2032200:	df000a04 	addi	fp,sp,40
 2032204:	e13ffa15 	stw	r4,-24(fp)
 2032208:	e17ffb15 	stw	r5,-20(fp)
 203220c:	e1bffc15 	stw	r6,-16(fp)
 2032210:	3809883a 	mov	r4,r7
 2032214:	e0c00217 	ldw	r3,8(fp)
 2032218:	e0800317 	ldw	r2,12(fp)
 203221c:	e13ffd05 	stb	r4,-12(fp)
 2032220:	e0fffe05 	stb	r3,-8(fp)
 2032224:	e0bfff05 	stb	r2,-4(fp)
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 2032228:	e03ff615 	stw	zero,-40(fp)
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 203222c:	e0bffc17 	ldw	r2,-16(fp)
 2032230:	10015026 	beq	r2,zero,2032774 <ip_output_if+0x580>
    u16_t ip_hlen = IP_HLEN;
 2032234:	00800504 	movi	r2,20
 2032238:	e0bff70d 	sth	r2,-36(fp)
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 203223c:	01400504 	movi	r5,20
 2032240:	e13ffa17 	ldw	r4,-24(fp)
 2032244:	201a8700 	call	201a870 <pbuf_header>
 2032248:	10803fcc 	andi	r2,r2,255
 203224c:	10000926 	beq	r2,zero,2032274 <ip_output_if+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 2032250:	008085f4 	movhi	r2,535
 2032254:	10a86704 	addi	r2,r2,-24164
 2032258:	10802e17 	ldw	r2,184(r2)
 203225c:	10c00044 	addi	r3,r2,1
 2032260:	008085f4 	movhi	r2,535
 2032264:	10a86704 	addi	r2,r2,-24164
 2032268:	10c02e15 	stw	r3,184(r2)
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
 203226c:	00bfff84 	movi	r2,-2
 2032270:	00016e06 	br	203282c <ip_output_if+0x638>
    }

    iphdr = (struct ip_hdr *)p->payload;
 2032274:	e0bffa17 	ldw	r2,-24(fp)
 2032278:	10800117 	ldw	r2,4(r2)
 203227c:	e0bff815 	stw	r2,-32(fp)
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 2032280:	e0bff817 	ldw	r2,-32(fp)
 2032284:	e0fffd03 	ldbu	r3,-12(fp)
 2032288:	10c00205 	stb	r3,8(r2)
    IPH_PROTO_SET(iphdr, proto);
 203228c:	e0bff817 	ldw	r2,-32(fp)
 2032290:	e0ffff03 	ldbu	r3,-4(fp)
 2032294:	10c00245 	stb	r3,9(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
 2032298:	e0bfff03 	ldbu	r2,-4(fp)
 203229c:	1006923a 	slli	r3,r2,8
 20322a0:	e0bffd03 	ldbu	r2,-12(fp)
 20322a4:	1884b03a 	or	r2,r3,r2
 20322a8:	1007883a 	mov	r3,r2
 20322ac:	e0bff617 	ldw	r2,-40(fp)
 20322b0:	10c5883a 	add	r2,r2,r3
 20322b4:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
 20322b8:	e0bffc17 	ldw	r2,-16(fp)
 20322bc:	10c00017 	ldw	r3,0(r2)
 20322c0:	e0bff817 	ldw	r2,-32(fp)
 20322c4:	19803fcc 	andi	r6,r3,255
 20322c8:	11000403 	ldbu	r4,16(r2)
 20322cc:	2008703a 	and	r4,r4,zero
 20322d0:	200b883a 	mov	r5,r4
 20322d4:	3009883a 	mov	r4,r6
 20322d8:	2908b03a 	or	r4,r5,r4
 20322dc:	11000405 	stb	r4,16(r2)
 20322e0:	1808d23a 	srli	r4,r3,8
 20322e4:	21803fcc 	andi	r6,r4,255
 20322e8:	11000443 	ldbu	r4,17(r2)
 20322ec:	2008703a 	and	r4,r4,zero
 20322f0:	200b883a 	mov	r5,r4
 20322f4:	3009883a 	mov	r4,r6
 20322f8:	2908b03a 	or	r4,r5,r4
 20322fc:	11000445 	stb	r4,17(r2)
 2032300:	1808d43a 	srli	r4,r3,16
 2032304:	21803fcc 	andi	r6,r4,255
 2032308:	11000483 	ldbu	r4,18(r2)
 203230c:	2008703a 	and	r4,r4,zero
 2032310:	200b883a 	mov	r5,r4
 2032314:	3009883a 	mov	r4,r6
 2032318:	2908b03a 	or	r4,r5,r4
 203231c:	11000485 	stb	r4,18(r2)
 2032320:	180ad63a 	srli	r5,r3,24
 2032324:	10c004c3 	ldbu	r3,19(r2)
 2032328:	1806703a 	and	r3,r3,zero
 203232c:	1809883a 	mov	r4,r3
 2032330:	2807883a 	mov	r3,r5
 2032334:	20c6b03a 	or	r3,r4,r3
 2032338:	10c004c5 	stb	r3,19(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 203233c:	e0bff817 	ldw	r2,-32(fp)
 2032340:	10c00403 	ldbu	r3,16(r2)
 2032344:	11000443 	ldbu	r4,17(r2)
 2032348:	2008923a 	slli	r4,r4,8
 203234c:	20c6b03a 	or	r3,r4,r3
 2032350:	11000483 	ldbu	r4,18(r2)
 2032354:	2008943a 	slli	r4,r4,16
 2032358:	20c6b03a 	or	r3,r4,r3
 203235c:	108004c3 	ldbu	r2,19(r2)
 2032360:	1004963a 	slli	r2,r2,24
 2032364:	10c4b03a 	or	r2,r2,r3
 2032368:	10bfffcc 	andi	r2,r2,65535
 203236c:	e0fff617 	ldw	r3,-40(fp)
 2032370:	1885883a 	add	r2,r3,r2
 2032374:	e0bff615 	stw	r2,-40(fp)
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 2032378:	e0bff817 	ldw	r2,-32(fp)
 203237c:	10c00403 	ldbu	r3,16(r2)
 2032380:	11000443 	ldbu	r4,17(r2)
 2032384:	2008923a 	slli	r4,r4,8
 2032388:	20c6b03a 	or	r3,r4,r3
 203238c:	11000483 	ldbu	r4,18(r2)
 2032390:	2008943a 	slli	r4,r4,16
 2032394:	20c6b03a 	or	r3,r4,r3
 2032398:	108004c3 	ldbu	r2,19(r2)
 203239c:	1004963a 	slli	r2,r2,24
 20323a0:	10c4b03a 	or	r2,r2,r3
 20323a4:	1004d43a 	srli	r2,r2,16
 20323a8:	e0fff617 	ldw	r3,-40(fp)
 20323ac:	1885883a 	add	r2,r3,r2
 20323b0:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 20323b4:	e0bff70b 	ldhu	r2,-36(fp)
 20323b8:	1004d0ba 	srli	r2,r2,2
 20323bc:	10801014 	ori	r2,r2,64
 20323c0:	1007883a 	mov	r3,r2
 20323c4:	e0bff817 	ldw	r2,-32(fp)
 20323c8:	10c00005 	stb	r3,0(r2)
    IPH_TOS_SET(iphdr, tos);
 20323cc:	e0bff817 	ldw	r2,-32(fp)
 20323d0:	e0fffe03 	ldbu	r3,-8(fp)
 20323d4:	10c00045 	stb	r3,1(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
 20323d8:	e0bffe03 	ldbu	r2,-8(fp)
 20323dc:	1006923a 	slli	r3,r2,8
 20323e0:	e0bff817 	ldw	r2,-32(fp)
 20323e4:	10800003 	ldbu	r2,0(r2)
 20323e8:	10803fcc 	andi	r2,r2,255
 20323ec:	1884b03a 	or	r2,r3,r2
 20323f0:	1007883a 	mov	r3,r2
 20323f4:	e0bff617 	ldw	r2,-40(fp)
 20323f8:	10c5883a 	add	r2,r2,r3
 20323fc:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 2032400:	e0bffa17 	ldw	r2,-24(fp)
 2032404:	1080020b 	ldhu	r2,8(r2)
 2032408:	10bfffcc 	andi	r2,r2,65535
 203240c:	1004d23a 	srli	r2,r2,8
 2032410:	1007883a 	mov	r3,r2
 2032414:	e0bffa17 	ldw	r2,-24(fp)
 2032418:	1080020b 	ldhu	r2,8(r2)
 203241c:	10bfffcc 	andi	r2,r2,65535
 2032420:	1004923a 	slli	r2,r2,8
 2032424:	1884b03a 	or	r2,r3,r2
 2032428:	100d883a 	mov	r6,r2
 203242c:	e0bff817 	ldw	r2,-32(fp)
 2032430:	30ffffcc 	andi	r3,r6,65535
 2032434:	19403fcc 	andi	r5,r3,255
 2032438:	10c00083 	ldbu	r3,2(r2)
 203243c:	1806703a 	and	r3,r3,zero
 2032440:	1809883a 	mov	r4,r3
 2032444:	2807883a 	mov	r3,r5
 2032448:	20c6b03a 	or	r3,r4,r3
 203244c:	10c00085 	stb	r3,2(r2)
 2032450:	30ffffcc 	andi	r3,r6,65535
 2032454:	1806d23a 	srli	r3,r3,8
 2032458:	197fffcc 	andi	r5,r3,65535
 203245c:	10c000c3 	ldbu	r3,3(r2)
 2032460:	1806703a 	and	r3,r3,zero
 2032464:	1809883a 	mov	r4,r3
 2032468:	2807883a 	mov	r3,r5
 203246c:	20c6b03a 	or	r3,r4,r3
 2032470:	10c000c5 	stb	r3,3(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 2032474:	e0bff817 	ldw	r2,-32(fp)
 2032478:	10c00083 	ldbu	r3,2(r2)
 203247c:	108000c3 	ldbu	r2,3(r2)
 2032480:	1004923a 	slli	r2,r2,8
 2032484:	10c4b03a 	or	r2,r2,r3
 2032488:	10bfffcc 	andi	r2,r2,65535
 203248c:	e0fff617 	ldw	r3,-40(fp)
 2032490:	1885883a 	add	r2,r3,r2
 2032494:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 2032498:	e0bff817 	ldw	r2,-32(fp)
 203249c:	10c00183 	ldbu	r3,6(r2)
 20324a0:	1806703a 	and	r3,r3,zero
 20324a4:	10c00185 	stb	r3,6(r2)
 20324a8:	10c001c3 	ldbu	r3,7(r2)
 20324ac:	1806703a 	and	r3,r3,zero
 20324b0:	10c001c5 	stb	r3,7(r2)
    IPH_ID_SET(iphdr, htons(ip_id));
 20324b4:	d0a8110b 	ldhu	r2,-24508(gp)
 20324b8:	10bfffcc 	andi	r2,r2,65535
 20324bc:	1004d23a 	srli	r2,r2,8
 20324c0:	1007883a 	mov	r3,r2
 20324c4:	d0a8110b 	ldhu	r2,-24508(gp)
 20324c8:	10bfffcc 	andi	r2,r2,65535
 20324cc:	1004923a 	slli	r2,r2,8
 20324d0:	1884b03a 	or	r2,r3,r2
 20324d4:	100d883a 	mov	r6,r2
 20324d8:	e0bff817 	ldw	r2,-32(fp)
 20324dc:	30ffffcc 	andi	r3,r6,65535
 20324e0:	19403fcc 	andi	r5,r3,255
 20324e4:	10c00103 	ldbu	r3,4(r2)
 20324e8:	1806703a 	and	r3,r3,zero
 20324ec:	1809883a 	mov	r4,r3
 20324f0:	2807883a 	mov	r3,r5
 20324f4:	20c6b03a 	or	r3,r4,r3
 20324f8:	10c00105 	stb	r3,4(r2)
 20324fc:	30ffffcc 	andi	r3,r6,65535
 2032500:	1806d23a 	srli	r3,r3,8
 2032504:	197fffcc 	andi	r5,r3,65535
 2032508:	10c00143 	ldbu	r3,5(r2)
 203250c:	1806703a 	and	r3,r3,zero
 2032510:	1809883a 	mov	r4,r3
 2032514:	2807883a 	mov	r3,r5
 2032518:	20c6b03a 	or	r3,r4,r3
 203251c:	10c00145 	stb	r3,5(r2)
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 2032520:	e0bff817 	ldw	r2,-32(fp)
 2032524:	10c00103 	ldbu	r3,4(r2)
 2032528:	10800143 	ldbu	r2,5(r2)
 203252c:	1004923a 	slli	r2,r2,8
 2032530:	10c4b03a 	or	r2,r2,r3
 2032534:	10bfffcc 	andi	r2,r2,65535
 2032538:	e0fff617 	ldw	r3,-40(fp)
 203253c:	1885883a 	add	r2,r3,r2
 2032540:	e0bff615 	stw	r2,-40(fp)
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 2032544:	d0a8110b 	ldhu	r2,-24508(gp)
 2032548:	10800044 	addi	r2,r2,1
 203254c:	d0a8110d 	sth	r2,-24508(gp)

    if (ip_addr_isany(src)) {
 2032550:	e0bffb17 	ldw	r2,-20(fp)
 2032554:	10000326 	beq	r2,zero,2032564 <ip_output_if+0x370>
 2032558:	e0bffb17 	ldw	r2,-20(fp)
 203255c:	10800017 	ldw	r2,0(r2)
 2032560:	1000221e 	bne	r2,zero,20325ec <ip_output_if+0x3f8>
      ip_addr_copy(iphdr->src, netif->ip_addr);
 2032564:	e0800417 	ldw	r2,16(fp)
 2032568:	10c00117 	ldw	r3,4(r2)
 203256c:	e0bff817 	ldw	r2,-32(fp)
 2032570:	19803fcc 	andi	r6,r3,255
 2032574:	11000303 	ldbu	r4,12(r2)
 2032578:	2008703a 	and	r4,r4,zero
 203257c:	200b883a 	mov	r5,r4
 2032580:	3009883a 	mov	r4,r6
 2032584:	2908b03a 	or	r4,r5,r4
 2032588:	11000305 	stb	r4,12(r2)
 203258c:	1808d23a 	srli	r4,r3,8
 2032590:	21803fcc 	andi	r6,r4,255
 2032594:	11000343 	ldbu	r4,13(r2)
 2032598:	2008703a 	and	r4,r4,zero
 203259c:	200b883a 	mov	r5,r4
 20325a0:	3009883a 	mov	r4,r6
 20325a4:	2908b03a 	or	r4,r5,r4
 20325a8:	11000345 	stb	r4,13(r2)
 20325ac:	1808d43a 	srli	r4,r3,16
 20325b0:	21803fcc 	andi	r6,r4,255
 20325b4:	11000383 	ldbu	r4,14(r2)
 20325b8:	2008703a 	and	r4,r4,zero
 20325bc:	200b883a 	mov	r5,r4
 20325c0:	3009883a 	mov	r4,r6
 20325c4:	2908b03a 	or	r4,r5,r4
 20325c8:	11000385 	stb	r4,14(r2)
 20325cc:	180ad63a 	srli	r5,r3,24
 20325d0:	10c003c3 	ldbu	r3,15(r2)
 20325d4:	1806703a 	and	r3,r3,zero
 20325d8:	1809883a 	mov	r4,r3
 20325dc:	2807883a 	mov	r3,r5
 20325e0:	20c6b03a 	or	r3,r4,r3
 20325e4:	10c003c5 	stb	r3,15(r2)
 20325e8:	00002106 	br	2032670 <ip_output_if+0x47c>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
 20325ec:	e0bffb17 	ldw	r2,-20(fp)
 20325f0:	10c00017 	ldw	r3,0(r2)
 20325f4:	e0bff817 	ldw	r2,-32(fp)
 20325f8:	19803fcc 	andi	r6,r3,255
 20325fc:	11000303 	ldbu	r4,12(r2)
 2032600:	2008703a 	and	r4,r4,zero
 2032604:	200b883a 	mov	r5,r4
 2032608:	3009883a 	mov	r4,r6
 203260c:	2908b03a 	or	r4,r5,r4
 2032610:	11000305 	stb	r4,12(r2)
 2032614:	1808d23a 	srli	r4,r3,8
 2032618:	21803fcc 	andi	r6,r4,255
 203261c:	11000343 	ldbu	r4,13(r2)
 2032620:	2008703a 	and	r4,r4,zero
 2032624:	200b883a 	mov	r5,r4
 2032628:	3009883a 	mov	r4,r6
 203262c:	2908b03a 	or	r4,r5,r4
 2032630:	11000345 	stb	r4,13(r2)
 2032634:	1808d43a 	srli	r4,r3,16
 2032638:	21803fcc 	andi	r6,r4,255
 203263c:	11000383 	ldbu	r4,14(r2)
 2032640:	2008703a 	and	r4,r4,zero
 2032644:	200b883a 	mov	r5,r4
 2032648:	3009883a 	mov	r4,r6
 203264c:	2908b03a 	or	r4,r5,r4
 2032650:	11000385 	stb	r4,14(r2)
 2032654:	180ad63a 	srli	r5,r3,24
 2032658:	10c003c3 	ldbu	r3,15(r2)
 203265c:	1806703a 	and	r3,r3,zero
 2032660:	1809883a 	mov	r4,r3
 2032664:	2807883a 	mov	r3,r5
 2032668:	20c6b03a 	or	r3,r4,r3
 203266c:	10c003c5 	stb	r3,15(r2)
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 2032670:	e0bff817 	ldw	r2,-32(fp)
 2032674:	10c00303 	ldbu	r3,12(r2)
 2032678:	11000343 	ldbu	r4,13(r2)
 203267c:	2008923a 	slli	r4,r4,8
 2032680:	20c6b03a 	or	r3,r4,r3
 2032684:	11000383 	ldbu	r4,14(r2)
 2032688:	2008943a 	slli	r4,r4,16
 203268c:	20c6b03a 	or	r3,r4,r3
 2032690:	108003c3 	ldbu	r2,15(r2)
 2032694:	1004963a 	slli	r2,r2,24
 2032698:	10c4b03a 	or	r2,r2,r3
 203269c:	10bfffcc 	andi	r2,r2,65535
 20326a0:	e0fff617 	ldw	r3,-40(fp)
 20326a4:	1885883a 	add	r2,r3,r2
 20326a8:	e0bff615 	stw	r2,-40(fp)
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 20326ac:	e0bff817 	ldw	r2,-32(fp)
 20326b0:	10c00303 	ldbu	r3,12(r2)
 20326b4:	11000343 	ldbu	r4,13(r2)
 20326b8:	2008923a 	slli	r4,r4,8
 20326bc:	20c6b03a 	or	r3,r4,r3
 20326c0:	11000383 	ldbu	r4,14(r2)
 20326c4:	2008943a 	slli	r4,r4,16
 20326c8:	20c6b03a 	or	r3,r4,r3
 20326cc:	108003c3 	ldbu	r2,15(r2)
 20326d0:	1004963a 	slli	r2,r2,24
 20326d4:	10c4b03a 	or	r2,r2,r3
 20326d8:	1004d43a 	srli	r2,r2,16
 20326dc:	e0fff617 	ldw	r3,-40(fp)
 20326e0:	1885883a 	add	r2,r3,r2
 20326e4:	e0bff615 	stw	r2,-40(fp)
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 20326e8:	e0bff617 	ldw	r2,-40(fp)
 20326ec:	1006d43a 	srli	r3,r2,16
 20326f0:	e0bff617 	ldw	r2,-40(fp)
 20326f4:	10bfffcc 	andi	r2,r2,65535
 20326f8:	1885883a 	add	r2,r3,r2
 20326fc:	e0bff615 	stw	r2,-40(fp)
    chk_sum = (chk_sum >> 16) + chk_sum;
 2032700:	e0bff617 	ldw	r2,-40(fp)
 2032704:	1004d43a 	srli	r2,r2,16
 2032708:	e0fff617 	ldw	r3,-40(fp)
 203270c:	1885883a 	add	r2,r3,r2
 2032710:	e0bff615 	stw	r2,-40(fp)
    chk_sum = ~chk_sum;
 2032714:	e0bff617 	ldw	r2,-40(fp)
 2032718:	0084303a 	nor	r2,zero,r2
 203271c:	e0bff615 	stw	r2,-40(fp)
    iphdr->_chksum = chk_sum; /* network order */
 2032720:	e0bff617 	ldw	r2,-40(fp)
 2032724:	100d883a 	mov	r6,r2
 2032728:	e0bff817 	ldw	r2,-32(fp)
 203272c:	30ffffcc 	andi	r3,r6,65535
 2032730:	19403fcc 	andi	r5,r3,255
 2032734:	10c00283 	ldbu	r3,10(r2)
 2032738:	1806703a 	and	r3,r3,zero
 203273c:	1809883a 	mov	r4,r3
 2032740:	2807883a 	mov	r3,r5
 2032744:	20c6b03a 	or	r3,r4,r3
 2032748:	10c00285 	stb	r3,10(r2)
 203274c:	30ffffcc 	andi	r3,r6,65535
 2032750:	1806d23a 	srli	r3,r3,8
 2032754:	197fffcc 	andi	r5,r3,65535
 2032758:	10c002c3 	ldbu	r3,11(r2)
 203275c:	1806703a 	and	r3,r3,zero
 2032760:	1809883a 	mov	r4,r3
 2032764:	2807883a 	mov	r3,r5
 2032768:	20c6b03a 	or	r3,r4,r3
 203276c:	10c002c5 	stb	r3,11(r2)
 2032770:	00001106 	br	20327b8 <ip_output_if+0x5c4>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 2032774:	e0bffa17 	ldw	r2,-24(fp)
 2032778:	10800117 	ldw	r2,4(r2)
 203277c:	e0bff815 	stw	r2,-32(fp)
    ip_addr_copy(dest_addr, iphdr->dest);
 2032780:	e0bff817 	ldw	r2,-32(fp)
 2032784:	10c00403 	ldbu	r3,16(r2)
 2032788:	11000443 	ldbu	r4,17(r2)
 203278c:	2008923a 	slli	r4,r4,8
 2032790:	20c6b03a 	or	r3,r4,r3
 2032794:	11000483 	ldbu	r4,18(r2)
 2032798:	2008943a 	slli	r4,r4,16
 203279c:	20c6b03a 	or	r3,r4,r3
 20327a0:	108004c3 	ldbu	r2,19(r2)
 20327a4:	1004963a 	slli	r2,r2,24
 20327a8:	10c4b03a 	or	r2,r2,r3
 20327ac:	e0bff915 	stw	r2,-28(fp)
    dest = &dest_addr;
 20327b0:	e0bff904 	addi	r2,fp,-28
 20327b4:	e0bffc15 	stw	r2,-16(fp)
  }

  IP_STATS_INC(ip.xmit);
 20327b8:	008085f4 	movhi	r2,535
 20327bc:	10a86704 	addi	r2,r2,-24164
 20327c0:	10802417 	ldw	r2,144(r2)
 20327c4:	10c00044 	addi	r3,r2,1
 20327c8:	008085f4 	movhi	r2,535
 20327cc:	10a86704 	addi	r2,r2,-24164
 20327d0:	10c02415 	stw	r3,144(r2)
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 20327d4:	e0800417 	ldw	r2,16(fp)
 20327d8:	10800c0b 	ldhu	r2,48(r2)
 20327dc:	10bfffcc 	andi	r2,r2,65535
 20327e0:	10000c26 	beq	r2,zero,2032814 <ip_output_if+0x620>
 20327e4:	e0bffa17 	ldw	r2,-24(fp)
 20327e8:	1100020b 	ldhu	r4,8(r2)
 20327ec:	e0800417 	ldw	r2,16(fp)
 20327f0:	10c00c0b 	ldhu	r3,48(r2)
 20327f4:	20bfffcc 	andi	r2,r4,65535
 20327f8:	18ffffcc 	andi	r3,r3,65535
 20327fc:	1880052e 	bgeu	r3,r2,2032814 <ip_output_if+0x620>
    return ip_frag(p, netif, dest);
 2032800:	e1bffc17 	ldw	r6,-16(fp)
 2032804:	e1400417 	ldw	r5,16(fp)
 2032808:	e13ffa17 	ldw	r4,-24(fp)
 203280c:	2033c900 	call	2033c90 <ip_frag>
 2032810:	00000606 	br	203282c <ip_output_if+0x638>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
 2032814:	e0800417 	ldw	r2,16(fp)
 2032818:	10800517 	ldw	r2,20(r2)
 203281c:	e1bffc17 	ldw	r6,-16(fp)
 2032820:	e17ffa17 	ldw	r5,-24(fp)
 2032824:	e1000417 	ldw	r4,16(fp)
 2032828:	103ee83a 	callr	r2
}
 203282c:	e037883a 	mov	sp,fp
 2032830:	dfc00117 	ldw	ra,4(sp)
 2032834:	df000017 	ldw	fp,0(sp)
 2032838:	dec00204 	addi	sp,sp,8
 203283c:	f800283a 	ret

02032840 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
 2032840:	defff404 	addi	sp,sp,-48
 2032844:	dfc00b15 	stw	ra,44(sp)
 2032848:	df000a15 	stw	fp,40(sp)
 203284c:	df000a04 	addi	fp,sp,40
 2032850:	e13ffa15 	stw	r4,-24(fp)
 2032854:	e17ffb15 	stw	r5,-20(fp)
 2032858:	e1bffc15 	stw	r6,-16(fp)
 203285c:	3809883a 	mov	r4,r7
 2032860:	e0c00217 	ldw	r3,8(fp)
 2032864:	e0800317 	ldw	r2,12(fp)
 2032868:	e13ffd05 	stb	r4,-12(fp)
 203286c:	e0fffe05 	stb	r3,-8(fp)
 2032870:	e0bfff05 	stb	r2,-4(fp)

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(src, dest)) == NULL) {
 2032874:	e17ffc17 	ldw	r5,-16(fp)
 2032878:	e13ffb17 	ldw	r4,-20(fp)
 203287c:	2031bc80 	call	2031bc8 <ip_route>
 2032880:	e0bff915 	stw	r2,-28(fp)
 2032884:	e0bff917 	ldw	r2,-28(fp)
 2032888:	1000091e 	bne	r2,zero,20328b0 <ip_output+0x70>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 203288c:	008085f4 	movhi	r2,535
 2032890:	10a86704 	addi	r2,r2,-24164
 2032894:	10802b17 	ldw	r2,172(r2)
 2032898:	10c00044 	addi	r3,r2,1
 203289c:	008085f4 	movhi	r2,535
 20328a0:	10a86704 	addi	r2,r2,-24164
 20328a4:	10c02b15 	stw	r3,172(r2)
    return ERR_RTE;
 20328a8:	00bfff04 	movi	r2,-4
 20328ac:	00000c06 	br	20328e0 <ip_output+0xa0>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
 20328b0:	e17ffd03 	ldbu	r5,-12(fp)
 20328b4:	e0bffe03 	ldbu	r2,-8(fp)
 20328b8:	e0ffff03 	ldbu	r3,-4(fp)
 20328bc:	e13ff917 	ldw	r4,-28(fp)
 20328c0:	d9000215 	stw	r4,8(sp)
 20328c4:	d8c00115 	stw	r3,4(sp)
 20328c8:	d8800015 	stw	r2,0(sp)
 20328cc:	280f883a 	mov	r7,r5
 20328d0:	e1bffc17 	ldw	r6,-16(fp)
 20328d4:	e17ffb17 	ldw	r5,-20(fp)
 20328d8:	e13ffa17 	ldw	r4,-24(fp)
 20328dc:	20321f40 	call	20321f4 <ip_output_if>
}
 20328e0:	e037883a 	mov	sp,fp
 20328e4:	dfc00117 	ldw	ra,4(sp)
 20328e8:	df000017 	ldw	fp,0(sp)
 20328ec:	dec00204 	addi	sp,sp,8
 20328f0:	f800283a 	ret

020328f4 <ip_output_hinted>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output_hinted(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto, u8_t *addr_hint)
{
 20328f4:	defff304 	addi	sp,sp,-52
 20328f8:	dfc00c15 	stw	ra,48(sp)
 20328fc:	df000b15 	stw	fp,44(sp)
 2032900:	df000b04 	addi	fp,sp,44
 2032904:	e13ffa15 	stw	r4,-24(fp)
 2032908:	e17ffb15 	stw	r5,-20(fp)
 203290c:	e1bffc15 	stw	r6,-16(fp)
 2032910:	3809883a 	mov	r4,r7
 2032914:	e0c00217 	ldw	r3,8(fp)
 2032918:	e0800317 	ldw	r2,12(fp)
 203291c:	e13ffd05 	stb	r4,-12(fp)
 2032920:	e0fffe05 	stb	r3,-8(fp)
 2032924:	e0bfff05 	stb	r2,-4(fp)

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(src, dest)) == NULL) {
 2032928:	e17ffc17 	ldw	r5,-16(fp)
 203292c:	e13ffb17 	ldw	r4,-20(fp)
 2032930:	2031bc80 	call	2031bc8 <ip_route>
 2032934:	e0bff815 	stw	r2,-32(fp)
 2032938:	e0bff817 	ldw	r2,-32(fp)
 203293c:	1000091e 	bne	r2,zero,2032964 <ip_output_hinted+0x70>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 2032940:	008085f4 	movhi	r2,535
 2032944:	10a86704 	addi	r2,r2,-24164
 2032948:	10802b17 	ldw	r2,172(r2)
 203294c:	10c00044 	addi	r3,r2,1
 2032950:	008085f4 	movhi	r2,535
 2032954:	10a86704 	addi	r2,r2,-24164
 2032958:	10c02b15 	stw	r3,172(r2)
    return ERR_RTE;
 203295c:	00bfff04 	movi	r2,-4
 2032960:	00001306 	br	20329b0 <ip_output_hinted+0xbc>
  }


  NETIF_SET_HWADDRHINT(netif, addr_hint);
 2032964:	e0bff817 	ldw	r2,-32(fp)
 2032968:	e0c00417 	ldw	r3,16(fp)
 203296c:	10c01015 	stw	r3,64(r2)
  err = ip_output_if(p, src, dest, ttl, tos, proto, netif);
 2032970:	e17ffd03 	ldbu	r5,-12(fp)
 2032974:	e0bffe03 	ldbu	r2,-8(fp)
 2032978:	e0ffff03 	ldbu	r3,-4(fp)
 203297c:	e13ff817 	ldw	r4,-32(fp)
 2032980:	d9000215 	stw	r4,8(sp)
 2032984:	d8c00115 	stw	r3,4(sp)
 2032988:	d8800015 	stw	r2,0(sp)
 203298c:	280f883a 	mov	r7,r5
 2032990:	e1bffc17 	ldw	r6,-16(fp)
 2032994:	e17ffb17 	ldw	r5,-20(fp)
 2032998:	e13ffa17 	ldw	r4,-24(fp)
 203299c:	20321f40 	call	20321f4 <ip_output_if>
 20329a0:	e0bff905 	stb	r2,-28(fp)
  NETIF_SET_HWADDRHINT(netif, NULL);
 20329a4:	e0bff817 	ldw	r2,-32(fp)
 20329a8:	10001015 	stw	zero,64(r2)

  return err;
 20329ac:	e0bff903 	ldbu	r2,-28(fp)
}
 20329b0:	e037883a 	mov	sp,fp
 20329b4:	dfc00117 	ldw	ra,4(sp)
 20329b8:	df000017 	ldw	fp,0(sp)
 20329bc:	dec00204 	addi	sp,sp,8
 20329c0:	f800283a 	ret

020329c4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 20329c4:	defffb04 	addi	sp,sp,-20
 20329c8:	dfc00415 	stw	ra,16(sp)
 20329cc:	df000315 	stw	fp,12(sp)
 20329d0:	df000304 	addi	fp,sp,12
  struct ip_reassdata *r, *prev = NULL;
 20329d4:	e03ffe15 	stw	zero,-8(fp)

  r = reassdatagrams;
 20329d8:	d0a81617 	ldw	r2,-24488(gp)
 20329dc:	e0bffd15 	stw	r2,-12(fp)
  while (r != NULL) {
 20329e0:	00001806 	br	2032a44 <ip_reass_tmr+0x80>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 20329e4:	e0bffd17 	ldw	r2,-12(fp)
 20329e8:	108007c3 	ldbu	r2,31(r2)
 20329ec:	10803fcc 	andi	r2,r2,255
 20329f0:	10000c26 	beq	r2,zero,2032a24 <ip_reass_tmr+0x60>
      r->timer--;
 20329f4:	e0bffd17 	ldw	r2,-12(fp)
 20329f8:	108007c3 	ldbu	r2,31(r2)
 20329fc:	10bfffc4 	addi	r2,r2,-1
 2032a00:	1007883a 	mov	r3,r2
 2032a04:	e0bffd17 	ldw	r2,-12(fp)
 2032a08:	10c007c5 	stb	r3,31(r2)
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 2032a0c:	e0bffd17 	ldw	r2,-12(fp)
 2032a10:	e0bffe15 	stw	r2,-8(fp)
      r = r->next;
 2032a14:	e0bffd17 	ldw	r2,-12(fp)
 2032a18:	10800017 	ldw	r2,0(r2)
 2032a1c:	e0bffd15 	stw	r2,-12(fp)
 2032a20:	00000806 	br	2032a44 <ip_reass_tmr+0x80>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 2032a24:	e0bffd17 	ldw	r2,-12(fp)
 2032a28:	e0bfff15 	stw	r2,-4(fp)
      /* get the next pointer before freeing */
      r = r->next;
 2032a2c:	e0bffd17 	ldw	r2,-12(fp)
 2032a30:	10800017 	ldw	r2,0(r2)
 2032a34:	e0bffd15 	stw	r2,-12(fp)
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 2032a38:	e17ffe17 	ldw	r5,-8(fp)
 2032a3c:	e13fff17 	ldw	r4,-4(fp)
 2032a40:	2032a640 	call	2032a64 <ip_reass_free_complete_datagram>
ip_reass_tmr(void)
{
  struct ip_reassdata *r, *prev = NULL;

  r = reassdatagrams;
  while (r != NULL) {
 2032a44:	e0bffd17 	ldw	r2,-12(fp)
 2032a48:	103fe61e 	bne	r2,zero,20329e4 <__alt_mem_mem_0+0xfd0129e4>
      r = r->next;
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
     }
   }
}
 2032a4c:	0001883a 	nop
 2032a50:	e037883a 	mov	sp,fp
 2032a54:	dfc00117 	ldw	ra,4(sp)
 2032a58:	df000017 	ldw	fp,0(sp)
 2032a5c:	dec00204 	addi	sp,sp,8
 2032a60:	f800283a 	ret

02032a64 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 2032a64:	defff704 	addi	sp,sp,-36
 2032a68:	dfc00815 	stw	ra,32(sp)
 2032a6c:	df000715 	stw	fp,28(sp)
 2032a70:	df000704 	addi	fp,sp,28
 2032a74:	e13ffe15 	stw	r4,-8(fp)
 2032a78:	e17fff15 	stw	r5,-4(fp)
  u16_t pbufs_freed = 0;
 2032a7c:	e03ff90d 	sth	zero,-28(fp)
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 2032a80:	e0bffe17 	ldw	r2,-8(fp)
 2032a84:	10800117 	ldw	r2,4(r2)
 2032a88:	10800117 	ldw	r2,4(r2)
 2032a8c:	e0bffb15 	stw	r2,-20(fp)
  if (iprh->start == 0) {
 2032a90:	e0bffb17 	ldw	r2,-20(fp)
 2032a94:	10c00103 	ldbu	r3,4(r2)
 2032a98:	10800143 	ldbu	r2,5(r2)
 2032a9c:	1004923a 	slli	r2,r2,8
 2032aa0:	10c4b03a 	or	r2,r2,r3
 2032aa4:	10bfffcc 	andi	r2,r2,65535
 2032aa8:	1000251e 	bne	r2,zero,2032b40 <ip_reass_free_complete_datagram+0xdc>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 2032aac:	e0bffe17 	ldw	r2,-8(fp)
 2032ab0:	10800117 	ldw	r2,4(r2)
 2032ab4:	e0bffa15 	stw	r2,-24(fp)
    ipr->p = iprh->next_pbuf;
 2032ab8:	e0bffb17 	ldw	r2,-20(fp)
 2032abc:	10c00003 	ldbu	r3,0(r2)
 2032ac0:	11000043 	ldbu	r4,1(r2)
 2032ac4:	2008923a 	slli	r4,r4,8
 2032ac8:	20c6b03a 	or	r3,r4,r3
 2032acc:	11000083 	ldbu	r4,2(r2)
 2032ad0:	2008943a 	slli	r4,r4,16
 2032ad4:	20c6b03a 	or	r3,r4,r3
 2032ad8:	108000c3 	ldbu	r2,3(r2)
 2032adc:	1004963a 	slli	r2,r2,24
 2032ae0:	10c4b03a 	or	r2,r2,r3
 2032ae4:	1007883a 	mov	r3,r2
 2032ae8:	e0bffe17 	ldw	r2,-8(fp)
 2032aec:	10c00115 	stw	r3,4(r2)
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 2032af0:	e0bffa17 	ldw	r2,-24(fp)
 2032af4:	10c00117 	ldw	r3,4(r2)
 2032af8:	e0bffe17 	ldw	r2,-8(fp)
 2032afc:	10800204 	addi	r2,r2,8
 2032b00:	01800504 	movi	r6,20
 2032b04:	100b883a 	mov	r5,r2
 2032b08:	1809883a 	mov	r4,r3
 2032b0c:	2005e580 	call	2005e58 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 2032b10:	01400044 	movi	r5,1
 2032b14:	e13ffa17 	ldw	r4,-24(fp)
 2032b18:	203118c0 	call	203118c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 2032b1c:	e13ffa17 	ldw	r4,-24(fp)
 2032b20:	201ab640 	call	201ab64 <pbuf_clen>
 2032b24:	e0bffc05 	stb	r2,-16(fp)
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 2032b28:	e0fffc03 	ldbu	r3,-16(fp)
 2032b2c:	e0bff90b 	ldhu	r2,-28(fp)
 2032b30:	1885883a 	add	r2,r3,r2
 2032b34:	e0bff90d 	sth	r2,-28(fp)
    pbuf_free(p);
 2032b38:	e13ffa17 	ldw	r4,-24(fp)
 2032b3c:	201aa200 	call	201aa20 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
 2032b40:	e0bffe17 	ldw	r2,-8(fp)
 2032b44:	10800117 	ldw	r2,4(r2)
 2032b48:	e0bffa15 	stw	r2,-24(fp)
  while (p != NULL) {
 2032b4c:	00001a06 	br	2032bb8 <ip_reass_free_complete_datagram+0x154>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 2032b50:	e0bffa17 	ldw	r2,-24(fp)
 2032b54:	10800117 	ldw	r2,4(r2)
 2032b58:	e0bffb15 	stw	r2,-20(fp)
    pcur = p;
 2032b5c:	e0bffa17 	ldw	r2,-24(fp)
 2032b60:	e0bffd15 	stw	r2,-12(fp)
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 2032b64:	e0bffb17 	ldw	r2,-20(fp)
 2032b68:	10c00003 	ldbu	r3,0(r2)
 2032b6c:	11000043 	ldbu	r4,1(r2)
 2032b70:	2008923a 	slli	r4,r4,8
 2032b74:	20c6b03a 	or	r3,r4,r3
 2032b78:	11000083 	ldbu	r4,2(r2)
 2032b7c:	2008943a 	slli	r4,r4,16
 2032b80:	20c6b03a 	or	r3,r4,r3
 2032b84:	108000c3 	ldbu	r2,3(r2)
 2032b88:	1004963a 	slli	r2,r2,24
 2032b8c:	10c4b03a 	or	r2,r2,r3
 2032b90:	e0bffa15 	stw	r2,-24(fp)
    clen = pbuf_clen(pcur);
 2032b94:	e13ffd17 	ldw	r4,-12(fp)
 2032b98:	201ab640 	call	201ab64 <pbuf_clen>
 2032b9c:	e0bffc05 	stb	r2,-16(fp)
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
 2032ba0:	e0fffc03 	ldbu	r3,-16(fp)
 2032ba4:	e0bff90b 	ldhu	r2,-28(fp)
 2032ba8:	1885883a 	add	r2,r3,r2
 2032bac:	e0bff90d 	sth	r2,-28(fp)
    pbuf_free(pcur);
 2032bb0:	e13ffd17 	ldw	r4,-12(fp)
 2032bb4:	201aa200 	call	201aa20 <pbuf_free>
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  while (p != NULL) {
 2032bb8:	e0bffa17 	ldw	r2,-24(fp)
 2032bbc:	103fe41e 	bne	r2,zero,2032b50 <__alt_mem_mem_0+0xfd012b50>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
    pbuf_free(pcur);
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 2032bc0:	e17fff17 	ldw	r5,-4(fp)
 2032bc4:	e13ffe17 	ldw	r4,-8(fp)
 2032bc8:	2032e600 	call	2032e60 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
 2032bcc:	d0e8170b 	ldhu	r3,-24484(gp)
 2032bd0:	e0bff90b 	ldhu	r2,-28(fp)
 2032bd4:	1885c83a 	sub	r2,r3,r2
 2032bd8:	d0a8170d 	sth	r2,-24484(gp)

  return pbufs_freed;
 2032bdc:	e0bff90b 	ldhu	r2,-28(fp)
}
 2032be0:	e037883a 	mov	sp,fp
 2032be4:	dfc00117 	ldw	ra,4(sp)
 2032be8:	df000017 	ldw	fp,0(sp)
 2032bec:	dec00204 	addi	sp,sp,8
 2032bf0:	f800283a 	ret

02032bf4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 2032bf4:	defff604 	addi	sp,sp,-40
 2032bf8:	dfc00915 	stw	ra,36(sp)
 2032bfc:	df000815 	stw	fp,32(sp)
 2032c00:	df000804 	addi	fp,sp,32
 2032c04:	e13ffe15 	stw	r4,-8(fp)
 2032c08:	e17fff15 	stw	r5,-4(fp)
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
 2032c0c:	e03ffb15 	stw	zero,-20(fp)
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 2032c10:	e03ff915 	stw	zero,-28(fp)
    prev = NULL;
 2032c14:	e03ffa15 	stw	zero,-24(fp)
    other_datagrams = 0;
 2032c18:	e03ffc15 	stw	zero,-16(fp)
    r = reassdatagrams;
 2032c1c:	d0a81617 	ldw	r2,-24488(gp)
 2032c20:	e0bff815 	stw	r2,-32(fp)
    while (r != NULL) {
 2032c24:	00003f06 	br	2032d24 <ip_reass_remove_oldest_datagram+0x130>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 2032c28:	e0bff817 	ldw	r2,-32(fp)
 2032c2c:	10c00517 	ldw	r3,20(r2)
 2032c30:	e0bffe17 	ldw	r2,-8(fp)
 2032c34:	11000303 	ldbu	r4,12(r2)
 2032c38:	11400343 	ldbu	r5,13(r2)
 2032c3c:	280a923a 	slli	r5,r5,8
 2032c40:	2908b03a 	or	r4,r5,r4
 2032c44:	11400383 	ldbu	r5,14(r2)
 2032c48:	280a943a 	slli	r5,r5,16
 2032c4c:	2908b03a 	or	r4,r5,r4
 2032c50:	108003c3 	ldbu	r2,15(r2)
 2032c54:	1004963a 	slli	r2,r2,24
 2032c58:	1104b03a 	or	r2,r2,r4
 2032c5c:	1880181e 	bne	r3,r2,2032cc0 <ip_reass_remove_oldest_datagram+0xcc>
 2032c60:	e0bff817 	ldw	r2,-32(fp)
 2032c64:	10c00617 	ldw	r3,24(r2)
 2032c68:	e0bffe17 	ldw	r2,-8(fp)
 2032c6c:	11000403 	ldbu	r4,16(r2)
 2032c70:	11400443 	ldbu	r5,17(r2)
 2032c74:	280a923a 	slli	r5,r5,8
 2032c78:	2908b03a 	or	r4,r5,r4
 2032c7c:	11400483 	ldbu	r5,18(r2)
 2032c80:	280a943a 	slli	r5,r5,16
 2032c84:	2908b03a 	or	r4,r5,r4
 2032c88:	108004c3 	ldbu	r2,19(r2)
 2032c8c:	1004963a 	slli	r2,r2,24
 2032c90:	1104b03a 	or	r2,r2,r4
 2032c94:	18800a1e 	bne	r3,r2,2032cc0 <ip_reass_remove_oldest_datagram+0xcc>
 2032c98:	e0bff817 	ldw	r2,-32(fp)
 2032c9c:	1100030b 	ldhu	r4,12(r2)
 2032ca0:	e0bffe17 	ldw	r2,-8(fp)
 2032ca4:	10c00103 	ldbu	r3,4(r2)
 2032ca8:	10800143 	ldbu	r2,5(r2)
 2032cac:	1004923a 	slli	r2,r2,8
 2032cb0:	10c4b03a 	or	r2,r2,r3
 2032cb4:	20ffffcc 	andi	r3,r4,65535
 2032cb8:	10bfffcc 	andi	r2,r2,65535
 2032cbc:	18801126 	beq	r3,r2,2032d04 <ip_reass_remove_oldest_datagram+0x110>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 2032cc0:	e0bffc17 	ldw	r2,-16(fp)
 2032cc4:	10800044 	addi	r2,r2,1
 2032cc8:	e0bffc15 	stw	r2,-16(fp)
        if (oldest == NULL) {
 2032ccc:	e0bff917 	ldw	r2,-28(fp)
 2032cd0:	1000031e 	bne	r2,zero,2032ce0 <ip_reass_remove_oldest_datagram+0xec>
          oldest = r;
 2032cd4:	e0bff817 	ldw	r2,-32(fp)
 2032cd8:	e0bff915 	stw	r2,-28(fp)
 2032cdc:	00000906 	br	2032d04 <ip_reass_remove_oldest_datagram+0x110>
        } else if (r->timer <= oldest->timer) {
 2032ce0:	e0bff817 	ldw	r2,-32(fp)
 2032ce4:	110007c3 	ldbu	r4,31(r2)
 2032ce8:	e0bff917 	ldw	r2,-28(fp)
 2032cec:	10c007c3 	ldbu	r3,31(r2)
 2032cf0:	20803fcc 	andi	r2,r4,255
 2032cf4:	18c03fcc 	andi	r3,r3,255
 2032cf8:	18800236 	bltu	r3,r2,2032d04 <ip_reass_remove_oldest_datagram+0x110>
          /* older than the previous oldest */
          oldest = r;
 2032cfc:	e0bff817 	ldw	r2,-32(fp)
 2032d00:	e0bff915 	stw	r2,-28(fp)
        }
      }
      if (r->next != NULL) {
 2032d04:	e0bff817 	ldw	r2,-32(fp)
 2032d08:	10800017 	ldw	r2,0(r2)
 2032d0c:	10000226 	beq	r2,zero,2032d18 <ip_reass_remove_oldest_datagram+0x124>
        prev = r;
 2032d10:	e0bff817 	ldw	r2,-32(fp)
 2032d14:	e0bffa15 	stw	r2,-24(fp)
      }
      r = r->next;
 2032d18:	e0bff817 	ldw	r2,-32(fp)
 2032d1c:	10800017 	ldw	r2,0(r2)
 2032d20:	e0bff815 	stw	r2,-32(fp)
  do {
    oldest = NULL;
    prev = NULL;
    other_datagrams = 0;
    r = reassdatagrams;
    while (r != NULL) {
 2032d24:	e0bff817 	ldw	r2,-32(fp)
 2032d28:	103fbf1e 	bne	r2,zero,2032c28 <__alt_mem_mem_0+0xfd012c28>
      if (r->next != NULL) {
        prev = r;
      }
      r = r->next;
    }
    if (oldest != NULL) {
 2032d2c:	e0bff917 	ldw	r2,-28(fp)
 2032d30:	10000826 	beq	r2,zero,2032d54 <ip_reass_remove_oldest_datagram+0x160>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
 2032d34:	e17ffa17 	ldw	r5,-24(fp)
 2032d38:	e13ff917 	ldw	r4,-28(fp)
 2032d3c:	2032a640 	call	2032a64 <ip_reass_free_complete_datagram>
 2032d40:	e0bffd15 	stw	r2,-12(fp)
      pbufs_freed += pbufs_freed_current;
 2032d44:	e0fffb17 	ldw	r3,-20(fp)
 2032d48:	e0bffd17 	ldw	r2,-12(fp)
 2032d4c:	1885883a 	add	r2,r3,r2
 2032d50:	e0bffb15 	stw	r2,-20(fp)
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 2032d54:	e0fffb17 	ldw	r3,-20(fp)
 2032d58:	e0bfff17 	ldw	r2,-4(fp)
 2032d5c:	1880030e 	bge	r3,r2,2032d6c <ip_reass_remove_oldest_datagram+0x178>
 2032d60:	e0bffc17 	ldw	r2,-16(fp)
 2032d64:	10800088 	cmpgei	r2,r2,2
 2032d68:	103fa91e 	bne	r2,zero,2032c10 <__alt_mem_mem_0+0xfd012c10>
  return pbufs_freed;
 2032d6c:	e0bffb17 	ldw	r2,-20(fp)
}
 2032d70:	e037883a 	mov	sp,fp
 2032d74:	dfc00117 	ldw	ra,4(sp)
 2032d78:	df000017 	ldw	fp,0(sp)
 2032d7c:	dec00204 	addi	sp,sp,8
 2032d80:	f800283a 	ret

02032d84 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 2032d84:	defffb04 	addi	sp,sp,-20
 2032d88:	dfc00415 	stw	ra,16(sp)
 2032d8c:	df000315 	stw	fp,12(sp)
 2032d90:	df000304 	addi	fp,sp,12
 2032d94:	e13ffe15 	stw	r4,-8(fp)
 2032d98:	e17fff15 	stw	r5,-4(fp)
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 2032d9c:	01000144 	movi	r4,5
 2032da0:	20342e00 	call	20342e0 <memp_malloc>
 2032da4:	e0bffd15 	stw	r2,-12(fp)
  if (ipr == NULL) {
 2032da8:	e0bffd17 	ldw	r2,-12(fp)
 2032dac:	1000141e 	bne	r2,zero,2032e00 <ip_reass_enqueue_new_datagram+0x7c>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 2032db0:	e17fff17 	ldw	r5,-4(fp)
 2032db4:	e13ffe17 	ldw	r4,-8(fp)
 2032db8:	2032bf40 	call	2032bf4 <ip_reass_remove_oldest_datagram>
 2032dbc:	1007883a 	mov	r3,r2
 2032dc0:	e0bfff17 	ldw	r2,-4(fp)
 2032dc4:	18800316 	blt	r3,r2,2032dd4 <ip_reass_enqueue_new_datagram+0x50>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 2032dc8:	01000144 	movi	r4,5
 2032dcc:	20342e00 	call	20342e0 <memp_malloc>
 2032dd0:	e0bffd15 	stw	r2,-12(fp)
    }
    if (ipr == NULL)
 2032dd4:	e0bffd17 	ldw	r2,-12(fp)
 2032dd8:	1000091e 	bne	r2,zero,2032e00 <ip_reass_enqueue_new_datagram+0x7c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 2032ddc:	008085f4 	movhi	r2,535
 2032de0:	10a86704 	addi	r2,r2,-24164
 2032de4:	10801e17 	ldw	r2,120(r2)
 2032de8:	10c00044 	addi	r3,r2,1
 2032dec:	008085f4 	movhi	r2,535
 2032df0:	10a86704 	addi	r2,r2,-24164
 2032df4:	10c01e15 	stw	r3,120(r2)
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 2032df8:	0005883a 	mov	r2,zero
 2032dfc:	00001306 	br	2032e4c <ip_reass_enqueue_new_datagram+0xc8>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 2032e00:	01800804 	movi	r6,32
 2032e04:	000b883a 	mov	r5,zero
 2032e08:	e13ffd17 	ldw	r4,-12(fp)
 2032e0c:	2005fa00 	call	2005fa0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 2032e10:	e0bffd17 	ldw	r2,-12(fp)
 2032e14:	00c000c4 	movi	r3,3
 2032e18:	10c007c5 	stb	r3,31(r2)

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 2032e1c:	d0e81617 	ldw	r3,-24488(gp)
 2032e20:	e0bffd17 	ldw	r2,-12(fp)
 2032e24:	10c00015 	stw	r3,0(r2)
  reassdatagrams = ipr;
 2032e28:	e0bffd17 	ldw	r2,-12(fp)
 2032e2c:	d0a81615 	stw	r2,-24488(gp)
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 2032e30:	e0bffd17 	ldw	r2,-12(fp)
 2032e34:	10800204 	addi	r2,r2,8
 2032e38:	01800504 	movi	r6,20
 2032e3c:	e17ffe17 	ldw	r5,-8(fp)
 2032e40:	1009883a 	mov	r4,r2
 2032e44:	2005e580 	call	2005e58 <memcpy>
  return ipr;
 2032e48:	e0bffd17 	ldw	r2,-12(fp)
}
 2032e4c:	e037883a 	mov	sp,fp
 2032e50:	dfc00117 	ldw	ra,4(sp)
 2032e54:	df000017 	ldw	fp,0(sp)
 2032e58:	dec00204 	addi	sp,sp,8
 2032e5c:	f800283a 	ret

02032e60 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 2032e60:	defffc04 	addi	sp,sp,-16
 2032e64:	dfc00315 	stw	ra,12(sp)
 2032e68:	df000215 	stw	fp,8(sp)
 2032e6c:	df000204 	addi	fp,sp,8
 2032e70:	e13ffe15 	stw	r4,-8(fp)
 2032e74:	e17fff15 	stw	r5,-4(fp)
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 2032e78:	d0e81617 	ldw	r3,-24488(gp)
 2032e7c:	e0bffe17 	ldw	r2,-8(fp)
 2032e80:	1880041e 	bne	r3,r2,2032e94 <ip_reass_dequeue_datagram+0x34>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 2032e84:	e0bffe17 	ldw	r2,-8(fp)
 2032e88:	10800017 	ldw	r2,0(r2)
 2032e8c:	d0a81615 	stw	r2,-24488(gp)
 2032e90:	00000406 	br	2032ea4 <ip_reass_dequeue_datagram+0x44>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
 2032e94:	e0bffe17 	ldw	r2,-8(fp)
 2032e98:	10c00017 	ldw	r3,0(r2)
 2032e9c:	e0bfff17 	ldw	r2,-4(fp)
 2032ea0:	10c00015 	stw	r3,0(r2)
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
 2032ea4:	e17ffe17 	ldw	r5,-8(fp)
 2032ea8:	01000144 	movi	r4,5
 2032eac:	20344ac0 	call	20344ac <memp_free>
}
 2032eb0:	0001883a 	nop
 2032eb4:	e037883a 	mov	sp,fp
 2032eb8:	dfc00117 	ldw	ra,4(sp)
 2032ebc:	df000017 	ldw	fp,0(sp)
 2032ec0:	dec00204 	addi	sp,sp,8
 2032ec4:	f800283a 	ret

02032ec8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
 2032ec8:	defff504 	addi	sp,sp,-44
 2032ecc:	dfc00a15 	stw	ra,40(sp)
 2032ed0:	df000915 	stw	fp,36(sp)
 2032ed4:	df000904 	addi	fp,sp,36
 2032ed8:	e13ffe15 	stw	r4,-8(fp)
 2032edc:	e17fff15 	stw	r5,-4(fp)
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 2032ee0:	e03ff715 	stw	zero,-36(fp)
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 2032ee4:	00800044 	movi	r2,1
 2032ee8:	e0bff915 	stw	r2,-28(fp)

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
 2032eec:	e0bfff17 	ldw	r2,-4(fp)
 2032ef0:	10800117 	ldw	r2,4(r2)
 2032ef4:	e0bffa15 	stw	r2,-24(fp)
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 2032ef8:	e0bffa17 	ldw	r2,-24(fp)
 2032efc:	10c00083 	ldbu	r3,2(r2)
 2032f00:	108000c3 	ldbu	r2,3(r2)
 2032f04:	1004923a 	slli	r2,r2,8
 2032f08:	10c4b03a 	or	r2,r2,r3
 2032f0c:	10bfffcc 	andi	r2,r2,65535
 2032f10:	1004d23a 	srli	r2,r2,8
 2032f14:	1009883a 	mov	r4,r2
 2032f18:	e0bffa17 	ldw	r2,-24(fp)
 2032f1c:	10c00083 	ldbu	r3,2(r2)
 2032f20:	108000c3 	ldbu	r2,3(r2)
 2032f24:	1004923a 	slli	r2,r2,8
 2032f28:	10c4b03a 	or	r2,r2,r3
 2032f2c:	10bfffcc 	andi	r2,r2,65535
 2032f30:	1004923a 	slli	r2,r2,8
 2032f34:	2084b03a 	or	r2,r4,r2
 2032f38:	1007883a 	mov	r3,r2
 2032f3c:	e0bffa17 	ldw	r2,-24(fp)
 2032f40:	10800003 	ldbu	r2,0(r2)
 2032f44:	10803fcc 	andi	r2,r2,255
 2032f48:	108003cc 	andi	r2,r2,15
 2032f4c:	1085883a 	add	r2,r2,r2
 2032f50:	1085883a 	add	r2,r2,r2
 2032f54:	1885c83a 	sub	r2,r3,r2
 2032f58:	e0bffb0d 	sth	r2,-20(fp)
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 2032f5c:	e0bffa17 	ldw	r2,-24(fp)
 2032f60:	10c00183 	ldbu	r3,6(r2)
 2032f64:	108001c3 	ldbu	r2,7(r2)
 2032f68:	1004923a 	slli	r2,r2,8
 2032f6c:	10c4b03a 	or	r2,r2,r3
 2032f70:	10bfffcc 	andi	r2,r2,65535
 2032f74:	1004d23a 	srli	r2,r2,8
 2032f78:	10ffffcc 	andi	r3,r2,65535
 2032f7c:	e0bffa17 	ldw	r2,-24(fp)
 2032f80:	11000183 	ldbu	r4,6(r2)
 2032f84:	108001c3 	ldbu	r2,7(r2)
 2032f88:	1004923a 	slli	r2,r2,8
 2032f8c:	1104b03a 	or	r2,r2,r4
 2032f90:	10bfffcc 	andi	r2,r2,65535
 2032f94:	1004923a 	slli	r2,r2,8
 2032f98:	10bfffcc 	andi	r2,r2,65535
 2032f9c:	1884b03a 	or	r2,r3,r2
 2032fa0:	1087ffcc 	andi	r2,r2,8191
 2032fa4:	100490fa 	slli	r2,r2,3
 2032fa8:	e0bffb8d 	sth	r2,-18(fp)
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 2032fac:	e0bfff17 	ldw	r2,-4(fp)
 2032fb0:	10800117 	ldw	r2,4(r2)
 2032fb4:	e0bffc15 	stw	r2,-16(fp)
  iprh->next_pbuf = NULL;
 2032fb8:	e0bffc17 	ldw	r2,-16(fp)
 2032fbc:	10c00003 	ldbu	r3,0(r2)
 2032fc0:	1806703a 	and	r3,r3,zero
 2032fc4:	10c00005 	stb	r3,0(r2)
 2032fc8:	10c00043 	ldbu	r3,1(r2)
 2032fcc:	1806703a 	and	r3,r3,zero
 2032fd0:	10c00045 	stb	r3,1(r2)
 2032fd4:	10c00083 	ldbu	r3,2(r2)
 2032fd8:	1806703a 	and	r3,r3,zero
 2032fdc:	10c00085 	stb	r3,2(r2)
 2032fe0:	10c000c3 	ldbu	r3,3(r2)
 2032fe4:	1806703a 	and	r3,r3,zero
 2032fe8:	10c000c5 	stb	r3,3(r2)
  iprh->start = offset;
 2032fec:	e0bffc17 	ldw	r2,-16(fp)
 2032ff0:	e0fffb8b 	ldhu	r3,-18(fp)
 2032ff4:	19403fcc 	andi	r5,r3,255
 2032ff8:	10c00103 	ldbu	r3,4(r2)
 2032ffc:	1806703a 	and	r3,r3,zero
 2033000:	1809883a 	mov	r4,r3
 2033004:	2807883a 	mov	r3,r5
 2033008:	20c6b03a 	or	r3,r4,r3
 203300c:	10c00105 	stb	r3,4(r2)
 2033010:	e0fffb8b 	ldhu	r3,-18(fp)
 2033014:	1806d23a 	srli	r3,r3,8
 2033018:	197fffcc 	andi	r5,r3,65535
 203301c:	10c00143 	ldbu	r3,5(r2)
 2033020:	1806703a 	and	r3,r3,zero
 2033024:	1809883a 	mov	r4,r3
 2033028:	2807883a 	mov	r3,r5
 203302c:	20c6b03a 	or	r3,r4,r3
 2033030:	10c00145 	stb	r3,5(r2)
  iprh->end = offset + len;
 2033034:	e0fffb8b 	ldhu	r3,-18(fp)
 2033038:	e0bffb0b 	ldhu	r2,-20(fp)
 203303c:	1885883a 	add	r2,r3,r2
 2033040:	100d883a 	mov	r6,r2
 2033044:	e0bffc17 	ldw	r2,-16(fp)
 2033048:	30ffffcc 	andi	r3,r6,65535
 203304c:	19403fcc 	andi	r5,r3,255
 2033050:	10c00183 	ldbu	r3,6(r2)
 2033054:	1806703a 	and	r3,r3,zero
 2033058:	1809883a 	mov	r4,r3
 203305c:	2807883a 	mov	r3,r5
 2033060:	20c6b03a 	or	r3,r4,r3
 2033064:	10c00185 	stb	r3,6(r2)
 2033068:	30ffffcc 	andi	r3,r6,65535
 203306c:	1806d23a 	srli	r3,r3,8
 2033070:	197fffcc 	andi	r5,r3,65535
 2033074:	10c001c3 	ldbu	r3,7(r2)
 2033078:	1806703a 	and	r3,r3,zero
 203307c:	1809883a 	mov	r4,r3
 2033080:	2807883a 	mov	r3,r5
 2033084:	20c6b03a 	or	r3,r4,r3
 2033088:	10c001c5 	stb	r3,7(r2)

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 203308c:	e0bffe17 	ldw	r2,-8(fp)
 2033090:	10800117 	ldw	r2,4(r2)
 2033094:	e0bff815 	stw	r2,-32(fp)
 2033098:	0000b606 	br	2033374 <ip_reass_chain_frag_into_datagram_and_validate+0x4ac>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 203309c:	e0bff817 	ldw	r2,-32(fp)
 20330a0:	10800117 	ldw	r2,4(r2)
 20330a4:	e0bffd15 	stw	r2,-12(fp)
    if (iprh->start < iprh_tmp->start) {
 20330a8:	e0bffc17 	ldw	r2,-16(fp)
 20330ac:	10c00103 	ldbu	r3,4(r2)
 20330b0:	10800143 	ldbu	r2,5(r2)
 20330b4:	1004923a 	slli	r2,r2,8
 20330b8:	10c4b03a 	or	r2,r2,r3
 20330bc:	1009883a 	mov	r4,r2
 20330c0:	e0bffd17 	ldw	r2,-12(fp)
 20330c4:	10c00103 	ldbu	r3,4(r2)
 20330c8:	10800143 	ldbu	r2,5(r2)
 20330cc:	1004923a 	slli	r2,r2,8
 20330d0:	10c4b03a 	or	r2,r2,r3
 20330d4:	20ffffcc 	andi	r3,r4,65535
 20330d8:	10bfffcc 	andi	r2,r2,65535
 20330dc:	18806a2e 	bgeu	r3,r2,2033288 <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 20330e0:	e0bffc17 	ldw	r2,-16(fp)
 20330e4:	e0fff817 	ldw	r3,-32(fp)
 20330e8:	19403fcc 	andi	r5,r3,255
 20330ec:	10c00003 	ldbu	r3,0(r2)
 20330f0:	1806703a 	and	r3,r3,zero
 20330f4:	1809883a 	mov	r4,r3
 20330f8:	2807883a 	mov	r3,r5
 20330fc:	20c6b03a 	or	r3,r4,r3
 2033100:	10c00005 	stb	r3,0(r2)
 2033104:	e0fff817 	ldw	r3,-32(fp)
 2033108:	1806d23a 	srli	r3,r3,8
 203310c:	19403fcc 	andi	r5,r3,255
 2033110:	10c00043 	ldbu	r3,1(r2)
 2033114:	1806703a 	and	r3,r3,zero
 2033118:	1809883a 	mov	r4,r3
 203311c:	2807883a 	mov	r3,r5
 2033120:	20c6b03a 	or	r3,r4,r3
 2033124:	10c00045 	stb	r3,1(r2)
 2033128:	e0fff817 	ldw	r3,-32(fp)
 203312c:	1806d43a 	srli	r3,r3,16
 2033130:	19403fcc 	andi	r5,r3,255
 2033134:	10c00083 	ldbu	r3,2(r2)
 2033138:	1806703a 	and	r3,r3,zero
 203313c:	1809883a 	mov	r4,r3
 2033140:	2807883a 	mov	r3,r5
 2033144:	20c6b03a 	or	r3,r4,r3
 2033148:	10c00085 	stb	r3,2(r2)
 203314c:	e0fff817 	ldw	r3,-32(fp)
 2033150:	180ad63a 	srli	r5,r3,24
 2033154:	10c000c3 	ldbu	r3,3(r2)
 2033158:	1806703a 	and	r3,r3,zero
 203315c:	1809883a 	mov	r4,r3
 2033160:	2807883a 	mov	r3,r5
 2033164:	20c6b03a 	or	r3,r4,r3
 2033168:	10c000c5 	stb	r3,3(r2)
      if (iprh_prev != NULL) {
 203316c:	e0bff717 	ldw	r2,-36(fp)
 2033170:	10004126 	beq	r2,zero,2033278 <ip_reass_chain_frag_into_datagram_and_validate+0x3b0>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 2033174:	e0bffc17 	ldw	r2,-16(fp)
 2033178:	10c00103 	ldbu	r3,4(r2)
 203317c:	10800143 	ldbu	r2,5(r2)
 2033180:	1004923a 	slli	r2,r2,8
 2033184:	10c4b03a 	or	r2,r2,r3
 2033188:	1009883a 	mov	r4,r2
 203318c:	e0bff717 	ldw	r2,-36(fp)
 2033190:	10c00183 	ldbu	r3,6(r2)
 2033194:	108001c3 	ldbu	r2,7(r2)
 2033198:	1004923a 	slli	r2,r2,8
 203319c:	10c4b03a 	or	r2,r2,r3
 20331a0:	20ffffcc 	andi	r3,r4,65535
 20331a4:	10bfffcc 	andi	r2,r2,65535
 20331a8:	1880f936 	bltu	r3,r2,2033590 <ip_reass_chain_frag_into_datagram_and_validate+0x6c8>
 20331ac:	e0bffc17 	ldw	r2,-16(fp)
 20331b0:	10c00183 	ldbu	r3,6(r2)
 20331b4:	108001c3 	ldbu	r2,7(r2)
 20331b8:	1004923a 	slli	r2,r2,8
 20331bc:	10c4b03a 	or	r2,r2,r3
 20331c0:	1009883a 	mov	r4,r2
 20331c4:	e0bffd17 	ldw	r2,-12(fp)
 20331c8:	10c00103 	ldbu	r3,4(r2)
 20331cc:	10800143 	ldbu	r2,5(r2)
 20331d0:	1004923a 	slli	r2,r2,8
 20331d4:	10c4b03a 	or	r2,r2,r3
 20331d8:	1007883a 	mov	r3,r2
 20331dc:	20bfffcc 	andi	r2,r4,65535
 20331e0:	18ffffcc 	andi	r3,r3,65535
 20331e4:	1880ea36 	bltu	r3,r2,2033590 <ip_reass_chain_frag_into_datagram_and_validate+0x6c8>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 20331e8:	e0bff717 	ldw	r2,-36(fp)
 20331ec:	e0ffff17 	ldw	r3,-4(fp)
 20331f0:	19403fcc 	andi	r5,r3,255
 20331f4:	10c00003 	ldbu	r3,0(r2)
 20331f8:	1806703a 	and	r3,r3,zero
 20331fc:	1809883a 	mov	r4,r3
 2033200:	2807883a 	mov	r3,r5
 2033204:	20c6b03a 	or	r3,r4,r3
 2033208:	10c00005 	stb	r3,0(r2)
 203320c:	e0ffff17 	ldw	r3,-4(fp)
 2033210:	1806d23a 	srli	r3,r3,8
 2033214:	19403fcc 	andi	r5,r3,255
 2033218:	10c00043 	ldbu	r3,1(r2)
 203321c:	1806703a 	and	r3,r3,zero
 2033220:	1809883a 	mov	r4,r3
 2033224:	2807883a 	mov	r3,r5
 2033228:	20c6b03a 	or	r3,r4,r3
 203322c:	10c00045 	stb	r3,1(r2)
 2033230:	e0ffff17 	ldw	r3,-4(fp)
 2033234:	1806d43a 	srli	r3,r3,16
 2033238:	19403fcc 	andi	r5,r3,255
 203323c:	10c00083 	ldbu	r3,2(r2)
 2033240:	1806703a 	and	r3,r3,zero
 2033244:	1809883a 	mov	r4,r3
 2033248:	2807883a 	mov	r3,r5
 203324c:	20c6b03a 	or	r3,r4,r3
 2033250:	10c00085 	stb	r3,2(r2)
 2033254:	e0ffff17 	ldw	r3,-4(fp)
 2033258:	180ad63a 	srli	r5,r3,24
 203325c:	10c000c3 	ldbu	r3,3(r2)
 2033260:	1806703a 	and	r3,r3,zero
 2033264:	1809883a 	mov	r4,r3
 2033268:	2807883a 	mov	r3,r5
 203326c:	20c6b03a 	or	r3,r4,r3
 2033270:	10c000c5 	stb	r3,3(r2)
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 2033274:	00004106 	br	203337c <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
 2033278:	e0bffe17 	ldw	r2,-8(fp)
 203327c:	e0ffff17 	ldw	r3,-4(fp)
 2033280:	10c00115 	stw	r3,4(r2)
      }
      break;
 2033284:	00003d06 	br	203337c <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
    } else if(iprh->start == iprh_tmp->start) {
 2033288:	e0bffc17 	ldw	r2,-16(fp)
 203328c:	10c00103 	ldbu	r3,4(r2)
 2033290:	10800143 	ldbu	r2,5(r2)
 2033294:	1004923a 	slli	r2,r2,8
 2033298:	10c4b03a 	or	r2,r2,r3
 203329c:	1009883a 	mov	r4,r2
 20332a0:	e0bffd17 	ldw	r2,-12(fp)
 20332a4:	10c00103 	ldbu	r3,4(r2)
 20332a8:	10800143 	ldbu	r2,5(r2)
 20332ac:	1004923a 	slli	r2,r2,8
 20332b0:	10c4b03a 	or	r2,r2,r3
 20332b4:	20ffffcc 	andi	r3,r4,65535
 20332b8:	10bfffcc 	andi	r2,r2,65535
 20332bc:	1880b126 	beq	r3,r2,2033584 <ip_reass_chain_frag_into_datagram_and_validate+0x6bc>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
 20332c0:	e0bffc17 	ldw	r2,-16(fp)
 20332c4:	10c00103 	ldbu	r3,4(r2)
 20332c8:	10800143 	ldbu	r2,5(r2)
 20332cc:	1004923a 	slli	r2,r2,8
 20332d0:	10c4b03a 	or	r2,r2,r3
 20332d4:	1009883a 	mov	r4,r2
 20332d8:	e0bffd17 	ldw	r2,-12(fp)
 20332dc:	10c00183 	ldbu	r3,6(r2)
 20332e0:	108001c3 	ldbu	r2,7(r2)
 20332e4:	1004923a 	slli	r2,r2,8
 20332e8:	10c4b03a 	or	r2,r2,r3
 20332ec:	20ffffcc 	andi	r3,r4,65535
 20332f0:	10bfffcc 	andi	r2,r2,65535
 20332f4:	1880a536 	bltu	r3,r2,203358c <ip_reass_chain_frag_into_datagram_and_validate+0x6c4>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
 20332f8:	e0bff717 	ldw	r2,-36(fp)
 20332fc:	10000f26 	beq	r2,zero,203333c <ip_reass_chain_frag_into_datagram_and_validate+0x474>
        if (iprh_prev->end != iprh_tmp->start) {
 2033300:	e0bff717 	ldw	r2,-36(fp)
 2033304:	10c00183 	ldbu	r3,6(r2)
 2033308:	108001c3 	ldbu	r2,7(r2)
 203330c:	1004923a 	slli	r2,r2,8
 2033310:	10c4b03a 	or	r2,r2,r3
 2033314:	1009883a 	mov	r4,r2
 2033318:	e0bffd17 	ldw	r2,-12(fp)
 203331c:	10c00103 	ldbu	r3,4(r2)
 2033320:	10800143 	ldbu	r2,5(r2)
 2033324:	1004923a 	slli	r2,r2,8
 2033328:	10c4b03a 	or	r2,r2,r3
 203332c:	20ffffcc 	andi	r3,r4,65535
 2033330:	10bfffcc 	andi	r2,r2,65535
 2033334:	18800126 	beq	r3,r2,203333c <ip_reass_chain_frag_into_datagram_and_validate+0x474>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 2033338:	e03ff915 	stw	zero,-28(fp)
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 203333c:	e0bffd17 	ldw	r2,-12(fp)
 2033340:	10c00003 	ldbu	r3,0(r2)
 2033344:	11000043 	ldbu	r4,1(r2)
 2033348:	2008923a 	slli	r4,r4,8
 203334c:	20c6b03a 	or	r3,r4,r3
 2033350:	11000083 	ldbu	r4,2(r2)
 2033354:	2008943a 	slli	r4,r4,16
 2033358:	20c6b03a 	or	r3,r4,r3
 203335c:	108000c3 	ldbu	r2,3(r2)
 2033360:	1004963a 	slli	r2,r2,24
 2033364:	10c4b03a 	or	r2,r2,r3
 2033368:	e0bff815 	stw	r2,-32(fp)
    iprh_prev = iprh_tmp;
 203336c:	e0bffd17 	ldw	r2,-12(fp)
 2033370:	e0bff715 	stw	r2,-36(fp)
  iprh->start = offset;
  iprh->end = offset + len;

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 2033374:	e0bff817 	ldw	r2,-32(fp)
 2033378:	103f481e 	bne	r2,zero,203309c <__alt_mem_mem_0+0xfd01309c>
    q = iprh_tmp->next_pbuf;
    iprh_prev = iprh_tmp;
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 203337c:	e0bff817 	ldw	r2,-32(fp)
 2033380:	1000381e 	bne	r2,zero,2033464 <ip_reass_chain_frag_into_datagram_and_validate+0x59c>
    if (iprh_prev != NULL) {
 2033384:	e0bff717 	ldw	r2,-36(fp)
 2033388:	10003326 	beq	r2,zero,2033458 <ip_reass_chain_frag_into_datagram_and_validate+0x590>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 203338c:	e0bff717 	ldw	r2,-36(fp)
 2033390:	e0ffff17 	ldw	r3,-4(fp)
 2033394:	19403fcc 	andi	r5,r3,255
 2033398:	10c00003 	ldbu	r3,0(r2)
 203339c:	1806703a 	and	r3,r3,zero
 20333a0:	1809883a 	mov	r4,r3
 20333a4:	2807883a 	mov	r3,r5
 20333a8:	20c6b03a 	or	r3,r4,r3
 20333ac:	10c00005 	stb	r3,0(r2)
 20333b0:	e0ffff17 	ldw	r3,-4(fp)
 20333b4:	1806d23a 	srli	r3,r3,8
 20333b8:	19403fcc 	andi	r5,r3,255
 20333bc:	10c00043 	ldbu	r3,1(r2)
 20333c0:	1806703a 	and	r3,r3,zero
 20333c4:	1809883a 	mov	r4,r3
 20333c8:	2807883a 	mov	r3,r5
 20333cc:	20c6b03a 	or	r3,r4,r3
 20333d0:	10c00045 	stb	r3,1(r2)
 20333d4:	e0ffff17 	ldw	r3,-4(fp)
 20333d8:	1806d43a 	srli	r3,r3,16
 20333dc:	19403fcc 	andi	r5,r3,255
 20333e0:	10c00083 	ldbu	r3,2(r2)
 20333e4:	1806703a 	and	r3,r3,zero
 20333e8:	1809883a 	mov	r4,r3
 20333ec:	2807883a 	mov	r3,r5
 20333f0:	20c6b03a 	or	r3,r4,r3
 20333f4:	10c00085 	stb	r3,2(r2)
 20333f8:	e0ffff17 	ldw	r3,-4(fp)
 20333fc:	180ad63a 	srli	r5,r3,24
 2033400:	10c000c3 	ldbu	r3,3(r2)
 2033404:	1806703a 	and	r3,r3,zero
 2033408:	1809883a 	mov	r4,r3
 203340c:	2807883a 	mov	r3,r5
 2033410:	20c6b03a 	or	r3,r4,r3
 2033414:	10c000c5 	stb	r3,3(r2)
      if (iprh_prev->end != iprh->start) {
 2033418:	e0bff717 	ldw	r2,-36(fp)
 203341c:	10c00183 	ldbu	r3,6(r2)
 2033420:	108001c3 	ldbu	r2,7(r2)
 2033424:	1004923a 	slli	r2,r2,8
 2033428:	10c4b03a 	or	r2,r2,r3
 203342c:	1009883a 	mov	r4,r2
 2033430:	e0bffc17 	ldw	r2,-16(fp)
 2033434:	10c00103 	ldbu	r3,4(r2)
 2033438:	10800143 	ldbu	r2,5(r2)
 203343c:	1004923a 	slli	r2,r2,8
 2033440:	10c4b03a 	or	r2,r2,r3
 2033444:	20ffffcc 	andi	r3,r4,65535
 2033448:	10bfffcc 	andi	r2,r2,65535
 203344c:	18800526 	beq	r3,r2,2033464 <ip_reass_chain_frag_into_datagram_and_validate+0x59c>
        valid = 0;
 2033450:	e03ff915 	stw	zero,-28(fp)
 2033454:	00000306 	br	2033464 <ip_reass_chain_frag_into_datagram_and_validate+0x59c>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 2033458:	e0bffe17 	ldw	r2,-8(fp)
 203345c:	e0ffff17 	ldw	r3,-4(fp)
 2033460:	10c00115 	stw	r3,4(r2)
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 2033464:	e0bffe17 	ldw	r2,-8(fp)
 2033468:	10800783 	ldbu	r2,30(r2)
 203346c:	10803fcc 	andi	r2,r2,255
 2033470:	1080004c 	andi	r2,r2,1
 2033474:	10004126 	beq	r2,zero,203357c <ip_reass_chain_frag_into_datagram_and_validate+0x6b4>
    /* and had no wholes so far */
    if (valid) {
 2033478:	e0bff917 	ldw	r2,-28(fp)
 203347c:	10003d26 	beq	r2,zero,2033574 <ip_reass_chain_frag_into_datagram_and_validate+0x6ac>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
 2033480:	e0bffe17 	ldw	r2,-8(fp)
 2033484:	10800117 	ldw	r2,4(r2)
 2033488:	10800117 	ldw	r2,4(r2)
 203348c:	10c00103 	ldbu	r3,4(r2)
 2033490:	10800143 	ldbu	r2,5(r2)
 2033494:	1004923a 	slli	r2,r2,8
 2033498:	10c4b03a 	or	r2,r2,r3
 203349c:	10bfffcc 	andi	r2,r2,65535
 20334a0:	10000226 	beq	r2,zero,20334ac <ip_reass_chain_frag_into_datagram_and_validate+0x5e4>
        valid = 0;
 20334a4:	e03ff915 	stw	zero,-28(fp)
 20334a8:	00003206 	br	2033574 <ip_reass_chain_frag_into_datagram_and_validate+0x6ac>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
 20334ac:	e0bffc17 	ldw	r2,-16(fp)
 20334b0:	e0bff715 	stw	r2,-36(fp)
        q = iprh->next_pbuf;
 20334b4:	e0bffc17 	ldw	r2,-16(fp)
 20334b8:	10c00003 	ldbu	r3,0(r2)
 20334bc:	11000043 	ldbu	r4,1(r2)
 20334c0:	2008923a 	slli	r4,r4,8
 20334c4:	20c6b03a 	or	r3,r4,r3
 20334c8:	11000083 	ldbu	r4,2(r2)
 20334cc:	2008943a 	slli	r4,r4,16
 20334d0:	20c6b03a 	or	r3,r4,r3
 20334d4:	108000c3 	ldbu	r2,3(r2)
 20334d8:	1004963a 	slli	r2,r2,24
 20334dc:	10c4b03a 	or	r2,r2,r3
 20334e0:	e0bff815 	stw	r2,-32(fp)
        while (q != NULL) {
 20334e4:	00002106 	br	203356c <ip_reass_chain_frag_into_datagram_and_validate+0x6a4>
          iprh = (struct ip_reass_helper*)q->payload;
 20334e8:	e0bff817 	ldw	r2,-32(fp)
 20334ec:	10800117 	ldw	r2,4(r2)
 20334f0:	e0bffc15 	stw	r2,-16(fp)
          if (iprh_prev->end != iprh->start) {
 20334f4:	e0bff717 	ldw	r2,-36(fp)
 20334f8:	10c00183 	ldbu	r3,6(r2)
 20334fc:	108001c3 	ldbu	r2,7(r2)
 2033500:	1004923a 	slli	r2,r2,8
 2033504:	10c4b03a 	or	r2,r2,r3
 2033508:	1009883a 	mov	r4,r2
 203350c:	e0bffc17 	ldw	r2,-16(fp)
 2033510:	10c00103 	ldbu	r3,4(r2)
 2033514:	10800143 	ldbu	r2,5(r2)
 2033518:	1004923a 	slli	r2,r2,8
 203351c:	10c4b03a 	or	r2,r2,r3
 2033520:	20ffffcc 	andi	r3,r4,65535
 2033524:	10bfffcc 	andi	r2,r2,65535
 2033528:	18800226 	beq	r3,r2,2033534 <ip_reass_chain_frag_into_datagram_and_validate+0x66c>
            valid = 0;
 203352c:	e03ff915 	stw	zero,-28(fp)
            break;
 2033530:	00001006 	br	2033574 <ip_reass_chain_frag_into_datagram_and_validate+0x6ac>
          }
          iprh_prev = iprh;
 2033534:	e0bffc17 	ldw	r2,-16(fp)
 2033538:	e0bff715 	stw	r2,-36(fp)
          q = iprh->next_pbuf;
 203353c:	e0bffc17 	ldw	r2,-16(fp)
 2033540:	10c00003 	ldbu	r3,0(r2)
 2033544:	11000043 	ldbu	r4,1(r2)
 2033548:	2008923a 	slli	r4,r4,8
 203354c:	20c6b03a 	or	r3,r4,r3
 2033550:	11000083 	ldbu	r4,2(r2)
 2033554:	2008943a 	slli	r4,r4,16
 2033558:	20c6b03a 	or	r3,r4,r3
 203355c:	108000c3 	ldbu	r2,3(r2)
 2033560:	1004963a 	slli	r2,r2,24
 2033564:	10c4b03a 	or	r2,r2,r3
 2033568:	e0bff815 	stw	r2,-32(fp)
        valid = 0;
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
        q = iprh->next_pbuf;
        while (q != NULL) {
 203356c:	e0bff817 	ldw	r2,-32(fp)
 2033570:	103fdd1e 	bne	r2,zero,20334e8 <__alt_mem_mem_0+0xfd0134e8>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
 2033574:	e0bff917 	ldw	r2,-28(fp)
 2033578:	00000e06 	br	20335b4 <ip_reass_chain_frag_into_datagram_and_validate+0x6ec>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
 203357c:	0005883a 	mov	r2,zero
 2033580:	00000c06 	br	20335b4 <ip_reass_chain_frag_into_datagram_and_validate+0x6ec>
        ipr->p = new_p;
      }
      break;
    } else if(iprh->start == iprh_tmp->start) {
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
 2033584:	0001883a 	nop
 2033588:	00000106 	br	2033590 <ip_reass_chain_frag_into_datagram_and_validate+0x6c8>
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
 203358c:	0001883a 	nop
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 2033590:	e13fff17 	ldw	r4,-4(fp)
 2033594:	201ab640 	call	201ab64 <pbuf_clen>
 2033598:	d0e8170b 	ldhu	r3,-24484(gp)
 203359c:	10803fcc 	andi	r2,r2,255
 20335a0:	1885c83a 	sub	r2,r3,r2
 20335a4:	d0a8170d 	sth	r2,-24484(gp)
  pbuf_free(new_p);
 20335a8:	e13fff17 	ldw	r4,-4(fp)
 20335ac:	201aa200 	call	201aa20 <pbuf_free>
  return 0;
 20335b0:	0005883a 	mov	r2,zero
#endif /* IP_REASS_CHECK_OVERLAP */
}
 20335b4:	e037883a 	mov	sp,fp
 20335b8:	dfc00117 	ldw	ra,4(sp)
 20335bc:	df000017 	ldw	fp,0(sp)
 20335c0:	dec00204 	addi	sp,sp,8
 20335c4:	f800283a 	ret

020335c8 <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
 20335c8:	defff604 	addi	sp,sp,-40
 20335cc:	dfc00915 	stw	ra,36(sp)
 20335d0:	df000815 	stw	fp,32(sp)
 20335d4:	df000804 	addi	fp,sp,32
 20335d8:	e13fff15 	stw	r4,-4(fp)
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
 20335dc:	e03ffa15 	stw	zero,-24(fp)

  IPFRAG_STATS_INC(ip_frag.recv);
 20335e0:	008085f4 	movhi	r2,535
 20335e4:	10a86704 	addi	r2,r2,-24164
 20335e8:	10801917 	ldw	r2,100(r2)
 20335ec:	10c00044 	addi	r3,r2,1
 20335f0:	008085f4 	movhi	r2,535
 20335f4:	10a86704 	addi	r2,r2,-24164
 20335f8:	10c01915 	stw	r3,100(r2)
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
 20335fc:	e0bfff17 	ldw	r2,-4(fp)
 2033600:	10800117 	ldw	r2,4(r2)
 2033604:	e0bffb15 	stw	r2,-20(fp)

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 2033608:	e0bffb17 	ldw	r2,-20(fp)
 203360c:	10800003 	ldbu	r2,0(r2)
 2033610:	10803fcc 	andi	r2,r2,255
 2033614:	108003cc 	andi	r2,r2,15
 2033618:	1085883a 	add	r2,r2,r2
 203361c:	1085883a 	add	r2,r2,r2
 2033620:	10800520 	cmpeqi	r2,r2,20
 2033624:	1000081e 	bne	r2,zero,2033648 <ip_reass+0x80>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 2033628:	008085f4 	movhi	r2,535
 203362c:	10a86704 	addi	r2,r2,-24164
 2033630:	10802217 	ldw	r2,136(r2)
 2033634:	10c00044 	addi	r3,r2,1
 2033638:	008085f4 	movhi	r2,535
 203363c:	10a86704 	addi	r2,r2,-24164
 2033640:	10c02215 	stw	r3,136(r2)
    goto nullreturn;
 2033644:	00015406 	br	2033b98 <ip_reass+0x5d0>
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 2033648:	e0bffb17 	ldw	r2,-20(fp)
 203364c:	10c00183 	ldbu	r3,6(r2)
 2033650:	108001c3 	ldbu	r2,7(r2)
 2033654:	1004923a 	slli	r2,r2,8
 2033658:	10c4b03a 	or	r2,r2,r3
 203365c:	10bfffcc 	andi	r2,r2,65535
 2033660:	1004d23a 	srli	r2,r2,8
 2033664:	10ffffcc 	andi	r3,r2,65535
 2033668:	e0bffb17 	ldw	r2,-20(fp)
 203366c:	11000183 	ldbu	r4,6(r2)
 2033670:	108001c3 	ldbu	r2,7(r2)
 2033674:	1004923a 	slli	r2,r2,8
 2033678:	1104b03a 	or	r2,r2,r4
 203367c:	10bfffcc 	andi	r2,r2,65535
 2033680:	1004923a 	slli	r2,r2,8
 2033684:	10bfffcc 	andi	r2,r2,65535
 2033688:	1884b03a 	or	r2,r3,r2
 203368c:	1087ffcc 	andi	r2,r2,8191
 2033690:	100490fa 	slli	r2,r2,3
 2033694:	e0bffc0d 	sth	r2,-16(fp)
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 2033698:	e0bffb17 	ldw	r2,-20(fp)
 203369c:	10c00083 	ldbu	r3,2(r2)
 20336a0:	108000c3 	ldbu	r2,3(r2)
 20336a4:	1004923a 	slli	r2,r2,8
 20336a8:	10c4b03a 	or	r2,r2,r3
 20336ac:	10bfffcc 	andi	r2,r2,65535
 20336b0:	1004d23a 	srli	r2,r2,8
 20336b4:	1009883a 	mov	r4,r2
 20336b8:	e0bffb17 	ldw	r2,-20(fp)
 20336bc:	10c00083 	ldbu	r3,2(r2)
 20336c0:	108000c3 	ldbu	r2,3(r2)
 20336c4:	1004923a 	slli	r2,r2,8
 20336c8:	10c4b03a 	or	r2,r2,r3
 20336cc:	10bfffcc 	andi	r2,r2,65535
 20336d0:	1004923a 	slli	r2,r2,8
 20336d4:	2084b03a 	or	r2,r4,r2
 20336d8:	1007883a 	mov	r3,r2
 20336dc:	e0bffb17 	ldw	r2,-20(fp)
 20336e0:	10800003 	ldbu	r2,0(r2)
 20336e4:	10803fcc 	andi	r2,r2,255
 20336e8:	108003cc 	andi	r2,r2,15
 20336ec:	1085883a 	add	r2,r2,r2
 20336f0:	1085883a 	add	r2,r2,r2
 20336f4:	1885c83a 	sub	r2,r3,r2
 20336f8:	e0bffc8d 	sth	r2,-14(fp)

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 20336fc:	e13fff17 	ldw	r4,-4(fp)
 2033700:	201ab640 	call	201ab64 <pbuf_clen>
 2033704:	e0bffd05 	stb	r2,-12(fp)
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 2033708:	d0a8170b 	ldhu	r2,-24484(gp)
 203370c:	10ffffcc 	andi	r3,r2,65535
 2033710:	e0bffd03 	ldbu	r2,-12(fp)
 2033714:	1885883a 	add	r2,r3,r2
 2033718:	108002d0 	cmplti	r2,r2,11
 203371c:	1000131e 	bne	r2,zero,203376c <ip_reass+0x1a4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 2033720:	e0bffd03 	ldbu	r2,-12(fp)
 2033724:	100b883a 	mov	r5,r2
 2033728:	e13ffb17 	ldw	r4,-20(fp)
 203372c:	2032bf40 	call	2032bf4 <ip_reass_remove_oldest_datagram>
 2033730:	10000626 	beq	r2,zero,203374c <ip_reass+0x184>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 2033734:	d0a8170b 	ldhu	r2,-24484(gp)
 2033738:	10ffffcc 	andi	r3,r2,65535
 203373c:	e0bffd03 	ldbu	r2,-12(fp)
 2033740:	1885883a 	add	r2,r3,r2

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 2033744:	108002d0 	cmplti	r2,r2,11
 2033748:	1000081e 	bne	r2,zero,203376c <ip_reass+0x1a4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 203374c:	008085f4 	movhi	r2,535
 2033750:	10a86704 	addi	r2,r2,-24164
 2033754:	10801e17 	ldw	r2,120(r2)
 2033758:	10c00044 	addi	r3,r2,1
 203375c:	008085f4 	movhi	r2,535
 2033760:	10a86704 	addi	r2,r2,-24164
 2033764:	10c01e15 	stw	r3,120(r2)
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 2033768:	00010b06 	br	2033b98 <ip_reass+0x5d0>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 203376c:	d0a81617 	ldw	r2,-24488(gp)
 2033770:	e0bff915 	stw	r2,-28(fp)
 2033774:	00003306 	br	2033844 <ip_reass+0x27c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 2033778:	e0bff917 	ldw	r2,-28(fp)
 203377c:	10c00517 	ldw	r3,20(r2)
 2033780:	e0bffb17 	ldw	r2,-20(fp)
 2033784:	11000303 	ldbu	r4,12(r2)
 2033788:	11400343 	ldbu	r5,13(r2)
 203378c:	280a923a 	slli	r5,r5,8
 2033790:	2908b03a 	or	r4,r5,r4
 2033794:	11400383 	ldbu	r5,14(r2)
 2033798:	280a943a 	slli	r5,r5,16
 203379c:	2908b03a 	or	r4,r5,r4
 20337a0:	108003c3 	ldbu	r2,15(r2)
 20337a4:	1004963a 	slli	r2,r2,24
 20337a8:	1104b03a 	or	r2,r2,r4
 20337ac:	1880201e 	bne	r3,r2,2033830 <ip_reass+0x268>
 20337b0:	e0bff917 	ldw	r2,-28(fp)
 20337b4:	10c00617 	ldw	r3,24(r2)
 20337b8:	e0bffb17 	ldw	r2,-20(fp)
 20337bc:	11000403 	ldbu	r4,16(r2)
 20337c0:	11400443 	ldbu	r5,17(r2)
 20337c4:	280a923a 	slli	r5,r5,8
 20337c8:	2908b03a 	or	r4,r5,r4
 20337cc:	11400483 	ldbu	r5,18(r2)
 20337d0:	280a943a 	slli	r5,r5,16
 20337d4:	2908b03a 	or	r4,r5,r4
 20337d8:	108004c3 	ldbu	r2,19(r2)
 20337dc:	1004963a 	slli	r2,r2,24
 20337e0:	1104b03a 	or	r2,r2,r4
 20337e4:	1880121e 	bne	r3,r2,2033830 <ip_reass+0x268>
 20337e8:	e0bff917 	ldw	r2,-28(fp)
 20337ec:	1100030b 	ldhu	r4,12(r2)
 20337f0:	e0bffb17 	ldw	r2,-20(fp)
 20337f4:	10c00103 	ldbu	r3,4(r2)
 20337f8:	10800143 	ldbu	r2,5(r2)
 20337fc:	1004923a 	slli	r2,r2,8
 2033800:	10c4b03a 	or	r2,r2,r3
 2033804:	20ffffcc 	andi	r3,r4,65535
 2033808:	10bfffcc 	andi	r2,r2,65535
 203380c:	1880081e 	bne	r3,r2,2033830 <ip_reass+0x268>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 2033810:	008085f4 	movhi	r2,535
 2033814:	10a86704 	addi	r2,r2,-24164
 2033818:	10802317 	ldw	r2,140(r2)
 203381c:	10c00044 	addi	r3,r2,1
 2033820:	008085f4 	movhi	r2,535
 2033824:	10a86704 	addi	r2,r2,-24164
 2033828:	10c02315 	stw	r3,140(r2)
      break;
 203382c:	00000706 	br	203384c <ip_reass+0x284>
    }
    ipr_prev = ipr;
 2033830:	e0bff917 	ldw	r2,-28(fp)
 2033834:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 2033838:	e0bff917 	ldw	r2,-28(fp)
 203383c:	10800017 	ldw	r2,0(r2)
 2033840:	e0bff915 	stw	r2,-28(fp)
 2033844:	e0bff917 	ldw	r2,-28(fp)
 2033848:	103fcb1e 	bne	r2,zero,2033778 <__alt_mem_mem_0+0xfd013778>
      break;
    }
    ipr_prev = ipr;
  }

  if (ipr == NULL) {
 203384c:	e0bff917 	ldw	r2,-28(fp)
 2033850:	1000081e 	bne	r2,zero,2033874 <ip_reass+0x2ac>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 2033854:	e0bffd03 	ldbu	r2,-12(fp)
 2033858:	100b883a 	mov	r5,r2
 203385c:	e13ffb17 	ldw	r4,-20(fp)
 2033860:	2032d840 	call	2032d84 <ip_reass_enqueue_new_datagram>
 2033864:	e0bff915 	stw	r2,-28(fp)
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
 2033868:	e0bff917 	ldw	r2,-28(fp)
 203386c:	1000271e 	bne	r2,zero,203390c <ip_reass+0x344>
      goto nullreturn;
 2033870:	0000c906 	br	2033b98 <ip_reass+0x5d0>
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 2033874:	e0bffb17 	ldw	r2,-20(fp)
 2033878:	10c00183 	ldbu	r3,6(r2)
 203387c:	108001c3 	ldbu	r2,7(r2)
 2033880:	1004923a 	slli	r2,r2,8
 2033884:	10c4b03a 	or	r2,r2,r3
 2033888:	10bfffcc 	andi	r2,r2,65535
 203388c:	1004d23a 	srli	r2,r2,8
 2033890:	10ffffcc 	andi	r3,r2,65535
 2033894:	e0bffb17 	ldw	r2,-20(fp)
 2033898:	11000183 	ldbu	r4,6(r2)
 203389c:	108001c3 	ldbu	r2,7(r2)
 20338a0:	1004923a 	slli	r2,r2,8
 20338a4:	1104b03a 	or	r2,r2,r4
 20338a8:	10bfffcc 	andi	r2,r2,65535
 20338ac:	1004923a 	slli	r2,r2,8
 20338b0:	10bfffcc 	andi	r2,r2,65535
 20338b4:	1884b03a 	or	r2,r3,r2
 20338b8:	1087ffcc 	andi	r2,r2,8191
 20338bc:	1000131e 	bne	r2,zero,203390c <ip_reass+0x344>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 20338c0:	e0bff917 	ldw	r2,-28(fp)
 20338c4:	1080038b 	ldhu	r2,14(r2)
 20338c8:	10bfffcc 	andi	r2,r2,65535
 20338cc:	1004d23a 	srli	r2,r2,8
 20338d0:	10ffffcc 	andi	r3,r2,65535
 20338d4:	e0bff917 	ldw	r2,-28(fp)
 20338d8:	1080038b 	ldhu	r2,14(r2)
 20338dc:	10bfffcc 	andi	r2,r2,65535
 20338e0:	1004923a 	slli	r2,r2,8
 20338e4:	10bfffcc 	andi	r2,r2,65535
 20338e8:	1884b03a 	or	r2,r3,r2
 20338ec:	1087ffcc 	andi	r2,r2,8191
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
      goto nullreturn;
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 20338f0:	10000626 	beq	r2,zero,203390c <ip_reass+0x344>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 20338f4:	e0bff917 	ldw	r2,-28(fp)
 20338f8:	10800204 	addi	r2,r2,8
 20338fc:	01800504 	movi	r6,20
 2033900:	e17ffb17 	ldw	r5,-20(fp)
 2033904:	1009883a 	mov	r4,r2
 2033908:	2005e580 	call	2005e58 <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
 203390c:	e0fffd03 	ldbu	r3,-12(fp)
 2033910:	d0a8170b 	ldhu	r2,-24484(gp)
 2033914:	1885883a 	add	r2,r3,r2
 2033918:	d0a8170d 	sth	r2,-24484(gp)

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
 203391c:	e0bffb17 	ldw	r2,-20(fp)
 2033920:	10c00183 	ldbu	r3,6(r2)
 2033924:	108001c3 	ldbu	r2,7(r2)
 2033928:	1004923a 	slli	r2,r2,8
 203392c:	10c4b03a 	or	r2,r2,r3
 2033930:	10bfffcc 	andi	r2,r2,65535
 2033934:	1080080c 	andi	r2,r2,32
 2033938:	10000c1e 	bne	r2,zero,203396c <ip_reass+0x3a4>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 203393c:	e0bff917 	ldw	r2,-28(fp)
 2033940:	10800783 	ldbu	r2,30(r2)
 2033944:	10800054 	ori	r2,r2,1
 2033948:	1007883a 	mov	r3,r2
 203394c:	e0bff917 	ldw	r2,-28(fp)
 2033950:	10c00785 	stb	r3,30(r2)
    ipr->datagram_len = offset + len;
 2033954:	e0fffc0b 	ldhu	r3,-16(fp)
 2033958:	e0bffc8b 	ldhu	r2,-14(fp)
 203395c:	1885883a 	add	r2,r3,r2
 2033960:	1007883a 	mov	r3,r2
 2033964:	e0bff917 	ldw	r2,-28(fp)
 2033968:	10c0070d 	sth	r3,28(r2)
     ("ip_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
 203396c:	e17fff17 	ldw	r5,-4(fp)
 2033970:	e13ff917 	ldw	r4,-28(fp)
 2033974:	2032ec80 	call	2032ec8 <ip_reass_chain_frag_into_datagram_and_validate>
 2033978:	10008526 	beq	r2,zero,2033b90 <ip_reass+0x5c8>
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 203397c:	e0bff917 	ldw	r2,-28(fp)
 2033980:	1080070b 	ldhu	r2,28(r2)
 2033984:	10800504 	addi	r2,r2,20
 2033988:	1007883a 	mov	r3,r2
 203398c:	e0bff917 	ldw	r2,-28(fp)
 2033990:	10c0070d 	sth	r3,28(r2)

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 2033994:	e0bff917 	ldw	r2,-28(fp)
 2033998:	10800117 	ldw	r2,4(r2)
 203399c:	10800117 	ldw	r2,4(r2)
 20339a0:	10c00003 	ldbu	r3,0(r2)
 20339a4:	11000043 	ldbu	r4,1(r2)
 20339a8:	2008923a 	slli	r4,r4,8
 20339ac:	20c6b03a 	or	r3,r4,r3
 20339b0:	11000083 	ldbu	r4,2(r2)
 20339b4:	2008943a 	slli	r4,r4,16
 20339b8:	20c6b03a 	or	r3,r4,r3
 20339bc:	108000c3 	ldbu	r2,3(r2)
 20339c0:	1004963a 	slli	r2,r2,24
 20339c4:	10c4b03a 	or	r2,r2,r3
 20339c8:	e0bff815 	stw	r2,-32(fp)

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 20339cc:	e0bff917 	ldw	r2,-28(fp)
 20339d0:	10800117 	ldw	r2,4(r2)
 20339d4:	10800117 	ldw	r2,4(r2)
 20339d8:	e0bffb15 	stw	r2,-20(fp)
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 20339dc:	e0bff917 	ldw	r2,-28(fp)
 20339e0:	10800204 	addi	r2,r2,8
 20339e4:	01800504 	movi	r6,20
 20339e8:	100b883a 	mov	r5,r2
 20339ec:	e13ffb17 	ldw	r4,-20(fp)
 20339f0:	2005e580 	call	2005e58 <memcpy>
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 20339f4:	e0bff917 	ldw	r2,-28(fp)
 20339f8:	1080070b 	ldhu	r2,28(r2)
 20339fc:	10bfffcc 	andi	r2,r2,65535
 2033a00:	1004d23a 	srli	r2,r2,8
 2033a04:	1007883a 	mov	r3,r2
 2033a08:	e0bff917 	ldw	r2,-28(fp)
 2033a0c:	1080070b 	ldhu	r2,28(r2)
 2033a10:	10bfffcc 	andi	r2,r2,65535
 2033a14:	1004923a 	slli	r2,r2,8
 2033a18:	1884b03a 	or	r2,r3,r2
 2033a1c:	100d883a 	mov	r6,r2
 2033a20:	e0bffb17 	ldw	r2,-20(fp)
 2033a24:	30ffffcc 	andi	r3,r6,65535
 2033a28:	19403fcc 	andi	r5,r3,255
 2033a2c:	10c00083 	ldbu	r3,2(r2)
 2033a30:	1806703a 	and	r3,r3,zero
 2033a34:	1809883a 	mov	r4,r3
 2033a38:	2807883a 	mov	r3,r5
 2033a3c:	20c6b03a 	or	r3,r4,r3
 2033a40:	10c00085 	stb	r3,2(r2)
 2033a44:	30ffffcc 	andi	r3,r6,65535
 2033a48:	1806d23a 	srli	r3,r3,8
 2033a4c:	197fffcc 	andi	r5,r3,65535
 2033a50:	10c000c3 	ldbu	r3,3(r2)
 2033a54:	1806703a 	and	r3,r3,zero
 2033a58:	1809883a 	mov	r4,r3
 2033a5c:	2807883a 	mov	r3,r5
 2033a60:	20c6b03a 	or	r3,r4,r3
 2033a64:	10c000c5 	stb	r3,3(r2)
    IPH_OFFSET_SET(fraghdr, 0);
 2033a68:	e0bffb17 	ldw	r2,-20(fp)
 2033a6c:	10c00183 	ldbu	r3,6(r2)
 2033a70:	1806703a 	and	r3,r3,zero
 2033a74:	10c00185 	stb	r3,6(r2)
 2033a78:	10c001c3 	ldbu	r3,7(r2)
 2033a7c:	1806703a 	and	r3,r3,zero
 2033a80:	10c001c5 	stb	r3,7(r2)
    IPH_CHKSUM_SET(fraghdr, 0);
 2033a84:	e0bffb17 	ldw	r2,-20(fp)
 2033a88:	10c00283 	ldbu	r3,10(r2)
 2033a8c:	1806703a 	and	r3,r3,zero
 2033a90:	10c00285 	stb	r3,10(r2)
 2033a94:	10c002c3 	ldbu	r3,11(r2)
 2033a98:	1806703a 	and	r3,r3,zero
 2033a9c:	10c002c5 	stb	r3,11(r2)
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 2033aa0:	01400504 	movi	r5,20
 2033aa4:	e13ffb17 	ldw	r4,-20(fp)
 2033aa8:	2031a200 	call	2031a20 <inet_chksum>
 2033aac:	100d883a 	mov	r6,r2
 2033ab0:	e0bffb17 	ldw	r2,-20(fp)
 2033ab4:	30ffffcc 	andi	r3,r6,65535
 2033ab8:	19403fcc 	andi	r5,r3,255
 2033abc:	10c00283 	ldbu	r3,10(r2)
 2033ac0:	1806703a 	and	r3,r3,zero
 2033ac4:	1809883a 	mov	r4,r3
 2033ac8:	2807883a 	mov	r3,r5
 2033acc:	20c6b03a 	or	r3,r4,r3
 2033ad0:	10c00285 	stb	r3,10(r2)
 2033ad4:	30ffffcc 	andi	r3,r6,65535
 2033ad8:	1806d23a 	srli	r3,r3,8
 2033adc:	197fffcc 	andi	r5,r3,65535
 2033ae0:	10c002c3 	ldbu	r3,11(r2)
 2033ae4:	1806703a 	and	r3,r3,zero
 2033ae8:	1809883a 	mov	r4,r3
 2033aec:	2807883a 	mov	r3,r5
 2033af0:	20c6b03a 	or	r3,r4,r3
 2033af4:	10c002c5 	stb	r3,11(r2)

    p = ipr->p;
 2033af8:	e0bff917 	ldw	r2,-28(fp)
 2033afc:	10800117 	ldw	r2,4(r2)
 2033b00:	e0bfff15 	stw	r2,-4(fp)

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
 2033b04:	00001506 	br	2033b5c <ip_reass+0x594>
      iprh = (struct ip_reass_helper*)r->payload;
 2033b08:	e0bff817 	ldw	r2,-32(fp)
 2033b0c:	10800117 	ldw	r2,4(r2)
 2033b10:	e0bffe15 	stw	r2,-8(fp)

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
 2033b14:	017ffb04 	movi	r5,-20
 2033b18:	e13ff817 	ldw	r4,-32(fp)
 2033b1c:	201a8700 	call	201a870 <pbuf_header>
      pbuf_cat(p, r);
 2033b20:	e17ff817 	ldw	r5,-32(fp)
 2033b24:	e13fff17 	ldw	r4,-4(fp)
 2033b28:	201ac140 	call	201ac14 <pbuf_cat>
      r = iprh->next_pbuf;
 2033b2c:	e0bffe17 	ldw	r2,-8(fp)
 2033b30:	10c00003 	ldbu	r3,0(r2)
 2033b34:	11000043 	ldbu	r4,1(r2)
 2033b38:	2008923a 	slli	r4,r4,8
 2033b3c:	20c6b03a 	or	r3,r4,r3
 2033b40:	11000083 	ldbu	r4,2(r2)
 2033b44:	2008943a 	slli	r4,r4,16
 2033b48:	20c6b03a 	or	r3,r4,r3
 2033b4c:	108000c3 	ldbu	r2,3(r2)
 2033b50:	1004963a 	slli	r2,r2,24
 2033b54:	10c4b03a 	or	r2,r2,r3
 2033b58:	e0bff815 	stw	r2,-32(fp)
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));

    p = ipr->p;

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
 2033b5c:	e0bff817 	ldw	r2,-32(fp)
 2033b60:	103fe91e 	bne	r2,zero,2033b08 <__alt_mem_mem_0+0xfd013b08>
      pbuf_header(r, -IP_HLEN);
      pbuf_cat(p, r);
      r = iprh->next_pbuf;
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 2033b64:	e17ffa17 	ldw	r5,-24(fp)
 2033b68:	e13ff917 	ldw	r4,-28(fp)
 2033b6c:	2032e600 	call	2032e60 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 2033b70:	e13fff17 	ldw	r4,-4(fp)
 2033b74:	201ab640 	call	201ab64 <pbuf_clen>
 2033b78:	d0e8170b 	ldhu	r3,-24484(gp)
 2033b7c:	10803fcc 	andi	r2,r2,255
 2033b80:	1885c83a 	sub	r2,r3,r2
 2033b84:	d0a8170d 	sth	r2,-24484(gp)

    /* Return the pbuf chain */
    return p;
 2033b88:	e0bfff17 	ldw	r2,-4(fp)
 2033b8c:	00000c06 	br	2033bc0 <ip_reass+0x5f8>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 2033b90:	0005883a 	mov	r2,zero
 2033b94:	00000a06 	br	2033bc0 <ip_reass+0x5f8>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 2033b98:	008085f4 	movhi	r2,535
 2033b9c:	10a86704 	addi	r2,r2,-24164
 2033ba0:	10801b17 	ldw	r2,108(r2)
 2033ba4:	10c00044 	addi	r3,r2,1
 2033ba8:	008085f4 	movhi	r2,535
 2033bac:	10a86704 	addi	r2,r2,-24164
 2033bb0:	10c01b15 	stw	r3,108(r2)
  pbuf_free(p);
 2033bb4:	e13fff17 	ldw	r4,-4(fp)
 2033bb8:	201aa200 	call	201aa20 <pbuf_free>
  return NULL;
 2033bbc:	0005883a 	mov	r2,zero
}
 2033bc0:	e037883a 	mov	sp,fp
 2033bc4:	dfc00117 	ldw	ra,4(sp)
 2033bc8:	df000017 	ldw	fp,0(sp)
 2033bcc:	dec00204 	addi	sp,sp,8
 2033bd0:	f800283a 	ret

02033bd4 <ip_frag_alloc_pbuf_custom_ref>:

#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 2033bd4:	defffe04 	addi	sp,sp,-8
 2033bd8:	dfc00115 	stw	ra,4(sp)
 2033bdc:	df000015 	stw	fp,0(sp)
 2033be0:	d839883a 	mov	fp,sp
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 2033be4:	01000184 	movi	r4,6
 2033be8:	20342e00 	call	20342e0 <memp_malloc>
}
 2033bec:	e037883a 	mov	sp,fp
 2033bf0:	dfc00117 	ldw	ra,4(sp)
 2033bf4:	df000017 	ldw	fp,0(sp)
 2033bf8:	dec00204 	addi	sp,sp,8
 2033bfc:	f800283a 	ret

02033c00 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 2033c00:	defffd04 	addi	sp,sp,-12
 2033c04:	dfc00215 	stw	ra,8(sp)
 2033c08:	df000115 	stw	fp,4(sp)
 2033c0c:	df000104 	addi	fp,sp,4
 2033c10:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("p != NULL", p != NULL);
  memp_free(MEMP_FRAG_PBUF, p);
 2033c14:	e17fff17 	ldw	r5,-4(fp)
 2033c18:	01000184 	movi	r4,6
 2033c1c:	20344ac0 	call	20344ac <memp_free>
}
 2033c20:	0001883a 	nop
 2033c24:	e037883a 	mov	sp,fp
 2033c28:	dfc00117 	ldw	ra,4(sp)
 2033c2c:	df000017 	ldw	fp,0(sp)
 2033c30:	dec00204 	addi	sp,sp,8
 2033c34:	f800283a 	ret

02033c38 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 2033c38:	defffc04 	addi	sp,sp,-16
 2033c3c:	dfc00315 	stw	ra,12(sp)
 2033c40:	df000215 	stw	fp,8(sp)
 2033c44:	df000204 	addi	fp,sp,8
 2033c48:	e13fff15 	stw	r4,-4(fp)
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 2033c4c:	e0bfff17 	ldw	r2,-4(fp)
 2033c50:	e0bffe15 	stw	r2,-8(fp)
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 2033c54:	e0bffe17 	ldw	r2,-8(fp)
 2033c58:	10800517 	ldw	r2,20(r2)
 2033c5c:	10000426 	beq	r2,zero,2033c70 <ipfrag_free_pbuf_custom+0x38>
    pbuf_free(pcr->original);
 2033c60:	e0bffe17 	ldw	r2,-8(fp)
 2033c64:	10800517 	ldw	r2,20(r2)
 2033c68:	1009883a 	mov	r4,r2
 2033c6c:	201aa200 	call	201aa20 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 2033c70:	e13ffe17 	ldw	r4,-8(fp)
 2033c74:	2033c000 	call	2033c00 <ip_frag_free_pbuf_custom_ref>
}
 2033c78:	0001883a 	nop
 2033c7c:	e037883a 	mov	sp,fp
 2033c80:	dfc00117 	ldw	ra,4(sp)
 2033c84:	df000017 	ldw	fp,0(sp)
 2033c88:	dec00204 	addi	sp,sp,8
 2033c8c:	f800283a 	ret

02033c90 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
 2033c90:	deffee04 	addi	sp,sp,-72
 2033c94:	dfc01115 	stw	ra,68(sp)
 2033c98:	df001015 	stw	fp,64(sp)
 2033c9c:	df001004 	addi	fp,sp,64
 2033ca0:	e13ffd15 	stw	r4,-12(fp)
 2033ca4:	e17ffe15 	stw	r5,-8(fp)
 2033ca8:	e1bfff15 	stw	r6,-4(fp)
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
 2033cac:	e0bffe17 	ldw	r2,-8(fp)
 2033cb0:	10800c0b 	ldhu	r2,48(r2)
 2033cb4:	e0bff50d 	sth	r2,-44(fp)
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
 2033cb8:	00800504 	movi	r2,20
 2033cbc:	e0bff30d 	sth	r2,-52(fp)
  u16_t tmp;
#if !IP_FRAG_USES_STATIC_BUF && !LWIP_NETIF_TX_SINGLE_PBUF
  u16_t newpbuflen = 0;
 2033cc0:	e03ff40d 	sth	zero,-48(fp)

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
 2033cc4:	e0bffd17 	ldw	r2,-12(fp)
 2033cc8:	10800117 	ldw	r2,4(r2)
 2033ccc:	e0bff615 	stw	r2,-40(fp)
  iphdr = original_iphdr;
 2033cd0:	e0bff617 	ldw	r2,-40(fp)
 2033cd4:	e0bff715 	stw	r2,-36(fp)
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
 2033cd8:	e0bff717 	ldw	r2,-36(fp)
 2033cdc:	10c00183 	ldbu	r3,6(r2)
 2033ce0:	108001c3 	ldbu	r2,7(r2)
 2033ce4:	1004923a 	slli	r2,r2,8
 2033ce8:	10c4b03a 	or	r2,r2,r3
 2033cec:	10bfffcc 	andi	r2,r2,65535
 2033cf0:	1004d23a 	srli	r2,r2,8
 2033cf4:	1009883a 	mov	r4,r2
 2033cf8:	e0bff717 	ldw	r2,-36(fp)
 2033cfc:	10c00183 	ldbu	r3,6(r2)
 2033d00:	108001c3 	ldbu	r2,7(r2)
 2033d04:	1004923a 	slli	r2,r2,8
 2033d08:	10c4b03a 	or	r2,r2,r3
 2033d0c:	10bfffcc 	andi	r2,r2,65535
 2033d10:	1004923a 	slli	r2,r2,8
 2033d14:	2084b03a 	or	r2,r4,r2
 2033d18:	e0bff38d 	sth	r2,-50(fp)
  ofo = tmp & IP_OFFMASK;
 2033d1c:	e0bff38b 	ldhu	r2,-50(fp)
 2033d20:	1087ffcc 	andi	r2,r2,8191
 2033d24:	e0bff28d 	sth	r2,-54(fp)
  omf = tmp & IP_MF;
 2033d28:	e0bff38b 	ldhu	r2,-50(fp)
 2033d2c:	1088000c 	andi	r2,r2,8192
 2033d30:	e0bff80d 	sth	r2,-32(fp)

  left = p->tot_len - IP_HLEN;
 2033d34:	e0bffd17 	ldw	r2,-12(fp)
 2033d38:	1080020b 	ldhu	r2,8(r2)
 2033d3c:	10bffb04 	addi	r2,r2,-20
 2033d40:	e0bff20d 	sth	r2,-56(fp)

  nfb = (mtu - IP_HLEN) / 8;
 2033d44:	e0bff50b 	ldhu	r2,-44(fp)
 2033d48:	10bffb04 	addi	r2,r2,-20
 2033d4c:	1000010e 	bge	r2,zero,2033d54 <ip_frag+0xc4>
 2033d50:	108001c4 	addi	r2,r2,7
 2033d54:	1005d0fa 	srai	r2,r2,3
 2033d58:	e0bff88d 	sth	r2,-30(fp)

  while (left) {
 2033d5c:	0000e706 	br	20340fc <ip_frag+0x46c>
    last = (left <= mtu - IP_HLEN);
 2033d60:	e0bff20b 	ldhu	r2,-56(fp)
 2033d64:	e0fff50b 	ldhu	r3,-44(fp)
 2033d68:	18fffb04 	addi	r3,r3,-20
 2033d6c:	1884403a 	cmpge	r2,r3,r2
 2033d70:	10803fcc 	andi	r2,r2,255
 2033d74:	e0bff90d 	sth	r2,-28(fp)

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
 2033d78:	e0bff28b 	ldhu	r2,-54(fp)
 2033d7c:	1087ffcc 	andi	r2,r2,8191
 2033d80:	1007883a 	mov	r3,r2
 2033d84:	e0bff80b 	ldhu	r2,-32(fp)
 2033d88:	1884b03a 	or	r2,r3,r2
 2033d8c:	e0bff38d 	sth	r2,-50(fp)
    if (!last) {
 2033d90:	e0bff90b 	ldhu	r2,-28(fp)
 2033d94:	1000031e 	bne	r2,zero,2033da4 <ip_frag+0x114>
      tmp = tmp | IP_MF;
 2033d98:	e0bff38b 	ldhu	r2,-50(fp)
 2033d9c:	10880014 	ori	r2,r2,8192
 2033da0:	e0bff38d 	sth	r2,-50(fp)
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
 2033da4:	e0bff90b 	ldhu	r2,-28(fp)
 2033da8:	1000031e 	bne	r2,zero,2033db8 <ip_frag+0x128>
 2033dac:	e0bff88b 	ldhu	r2,-30(fp)
 2033db0:	100490fa 	slli	r2,r2,3
 2033db4:	00000106 	br	2033dbc <ip_frag+0x12c>
 2033db8:	e0bff20b 	ldhu	r2,-56(fp)
 2033dbc:	e0bff98d 	sth	r2,-26(fp)
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 2033dc0:	000d883a 	mov	r6,zero
 2033dc4:	01400504 	movi	r5,20
 2033dc8:	01000084 	movi	r4,2
 2033dcc:	201a2640 	call	201a264 <pbuf_alloc>
 2033dd0:	e0bffa15 	stw	r2,-24(fp)
    if (rambuf == NULL) {
 2033dd4:	e0bffa17 	ldw	r2,-24(fp)
 2033dd8:	1000021e 	bne	r2,zero,2033de4 <ip_frag+0x154>
      return ERR_MEM;
 2033ddc:	00bfffc4 	movi	r2,-1
 2033de0:	0000c906 	br	2034108 <ip_frag+0x478>
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 2033de4:	e0bffa17 	ldw	r2,-24(fp)
 2033de8:	10800117 	ldw	r2,4(r2)
 2033dec:	01800504 	movi	r6,20
 2033df0:	e17ff617 	ldw	r5,-40(fp)
 2033df4:	1009883a 	mov	r4,r2
 2033df8:	2005e580 	call	2005e58 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 2033dfc:	e0bffa17 	ldw	r2,-24(fp)
 2033e00:	10800117 	ldw	r2,4(r2)
 2033e04:	e0bff715 	stw	r2,-36(fp)

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 2033e08:	e0bffd17 	ldw	r2,-12(fp)
 2033e0c:	10c00117 	ldw	r3,4(r2)
 2033e10:	e0bff30b 	ldhu	r2,-52(fp)
 2033e14:	1887883a 	add	r3,r3,r2
 2033e18:	e0bffd17 	ldw	r2,-12(fp)
 2033e1c:	10c00115 	stw	r3,4(r2)
    p->len -= poff;
 2033e20:	e0bffd17 	ldw	r2,-12(fp)
 2033e24:	10c0028b 	ldhu	r3,10(r2)
 2033e28:	e0bff30b 	ldhu	r2,-52(fp)
 2033e2c:	1885c83a 	sub	r2,r3,r2
 2033e30:	1007883a 	mov	r3,r2
 2033e34:	e0bffd17 	ldw	r2,-12(fp)
 2033e38:	10c0028d 	sth	r3,10(r2)

    left_to_copy = cop;
 2033e3c:	e0bff98b 	ldhu	r2,-26(fp)
 2033e40:	e0bff48d 	sth	r2,-46(fp)
    while (left_to_copy) {
 2033e44:	00004006 	br	2033f48 <ip_frag+0x2b8>
      struct pbuf_custom_ref *pcr;
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 2033e48:	e0bffd17 	ldw	r2,-12(fp)
 2033e4c:	1080028b 	ldhu	r2,10(r2)
 2033e50:	e17ff48b 	ldhu	r5,-46(fp)
 2033e54:	10ffffcc 	andi	r3,r2,65535
 2033e58:	293fffcc 	andi	r4,r5,65535
 2033e5c:	20c0012e 	bgeu	r4,r3,2033e64 <ip_frag+0x1d4>
 2033e60:	2805883a 	mov	r2,r5
 2033e64:	e0bff40d 	sth	r2,-48(fp)
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 2033e68:	e0bff40b 	ldhu	r2,-48(fp)
 2033e6c:	1000041e 	bne	r2,zero,2033e80 <ip_frag+0x1f0>
        p = p->next;
 2033e70:	e0bffd17 	ldw	r2,-12(fp)
 2033e74:	10800017 	ldw	r2,0(r2)
 2033e78:	e0bffd15 	stw	r2,-12(fp)
        continue;
 2033e7c:	00003206 	br	2033f48 <ip_frag+0x2b8>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 2033e80:	2033bd40 	call	2033bd4 <ip_frag_alloc_pbuf_custom_ref>
 2033e84:	e0bffb15 	stw	r2,-20(fp)
      if (pcr == NULL) {
 2033e88:	e0bffb17 	ldw	r2,-20(fp)
 2033e8c:	1000041e 	bne	r2,zero,2033ea0 <ip_frag+0x210>
        pbuf_free(rambuf);
 2033e90:	e13ffa17 	ldw	r4,-24(fp)
 2033e94:	201aa200 	call	201aa20 <pbuf_free>
        return ERR_MEM;
 2033e98:	00bfffc4 	movi	r2,-1
 2033e9c:	00009a06 	br	2034108 <ip_frag+0x478>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 2033ea0:	e13ff40b 	ldhu	r4,-48(fp)
 2033ea4:	e17ffb17 	ldw	r5,-20(fp)
 2033ea8:	e0bffd17 	ldw	r2,-12(fp)
 2033eac:	10800117 	ldw	r2,4(r2)
 2033eb0:	e0fff40b 	ldhu	r3,-48(fp)
 2033eb4:	d8c00115 	stw	r3,4(sp)
 2033eb8:	d8800015 	stw	r2,0(sp)
 2033ebc:	280f883a 	mov	r7,r5
 2033ec0:	01800084 	movi	r6,2
 2033ec4:	200b883a 	mov	r5,r4
 2033ec8:	010000c4 	movi	r4,3
 2033ecc:	201a5d00 	call	201a5d0 <pbuf_alloced_custom>
 2033ed0:	e0bffc15 	stw	r2,-16(fp)
      if (newpbuf == NULL) {
 2033ed4:	e0bffc17 	ldw	r2,-16(fp)
 2033ed8:	1000061e 	bne	r2,zero,2033ef4 <ip_frag+0x264>
        ip_frag_free_pbuf_custom_ref(pcr);
 2033edc:	e13ffb17 	ldw	r4,-20(fp)
 2033ee0:	2033c000 	call	2033c00 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 2033ee4:	e13ffa17 	ldw	r4,-24(fp)
 2033ee8:	201aa200 	call	201aa20 <pbuf_free>
        return ERR_MEM;
 2033eec:	00bfffc4 	movi	r2,-1
 2033ef0:	00008506 	br	2034108 <ip_frag+0x478>
      }
      pbuf_ref(p);
 2033ef4:	e13ffd17 	ldw	r4,-12(fp)
 2033ef8:	201abb00 	call	201abb0 <pbuf_ref>
      pcr->original = p;
 2033efc:	e0bffb17 	ldw	r2,-20(fp)
 2033f00:	e0fffd17 	ldw	r3,-12(fp)
 2033f04:	10c00515 	stw	r3,20(r2)
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 2033f08:	e0fffb17 	ldw	r3,-20(fp)
 2033f0c:	008080f4 	movhi	r2,515
 2033f10:	108f0e04 	addi	r2,r2,15416
 2033f14:	18800415 	stw	r2,16(r3)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 2033f18:	e17ffc17 	ldw	r5,-16(fp)
 2033f1c:	e13ffa17 	ldw	r4,-24(fp)
 2033f20:	201ac140 	call	201ac14 <pbuf_cat>
      left_to_copy -= newpbuflen;
 2033f24:	e0fff48b 	ldhu	r3,-46(fp)
 2033f28:	e0bff40b 	ldhu	r2,-48(fp)
 2033f2c:	1885c83a 	sub	r2,r3,r2
 2033f30:	e0bff48d 	sth	r2,-46(fp)
      if (left_to_copy) {
 2033f34:	e0bff48b 	ldhu	r2,-46(fp)
 2033f38:	10000326 	beq	r2,zero,2033f48 <ip_frag+0x2b8>
        p = p->next;
 2033f3c:	e0bffd17 	ldw	r2,-12(fp)
 2033f40:	10800017 	ldw	r2,0(r2)
 2033f44:	e0bffd15 	stw	r2,-12(fp)
    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
    p->len -= poff;

    left_to_copy = cop;
    while (left_to_copy) {
 2033f48:	e0bff48b 	ldhu	r2,-46(fp)
 2033f4c:	103fbe1e 	bne	r2,zero,2033e48 <__alt_mem_mem_0+0xfd013e48>
      left_to_copy -= newpbuflen;
      if (left_to_copy) {
        p = p->next;
      }
    }
    poff = newpbuflen;
 2033f50:	e0bff40b 	ldhu	r2,-48(fp)
 2033f54:	e0bff30d 	sth	r2,-52(fp)
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
 2033f58:	e0bff38b 	ldhu	r2,-50(fp)
 2033f5c:	1004d23a 	srli	r2,r2,8
 2033f60:	1007883a 	mov	r3,r2
 2033f64:	e0bff38b 	ldhu	r2,-50(fp)
 2033f68:	1004923a 	slli	r2,r2,8
 2033f6c:	1884b03a 	or	r2,r3,r2
 2033f70:	100d883a 	mov	r6,r2
 2033f74:	e0bff717 	ldw	r2,-36(fp)
 2033f78:	30ffffcc 	andi	r3,r6,65535
 2033f7c:	19403fcc 	andi	r5,r3,255
 2033f80:	10c00183 	ldbu	r3,6(r2)
 2033f84:	1806703a 	and	r3,r3,zero
 2033f88:	1809883a 	mov	r4,r3
 2033f8c:	2807883a 	mov	r3,r5
 2033f90:	20c6b03a 	or	r3,r4,r3
 2033f94:	10c00185 	stb	r3,6(r2)
 2033f98:	30ffffcc 	andi	r3,r6,65535
 2033f9c:	1806d23a 	srli	r3,r3,8
 2033fa0:	197fffcc 	andi	r5,r3,65535
 2033fa4:	10c001c3 	ldbu	r3,7(r2)
 2033fa8:	1806703a 	and	r3,r3,zero
 2033fac:	1809883a 	mov	r4,r3
 2033fb0:	2807883a 	mov	r3,r5
 2033fb4:	20c6b03a 	or	r3,r4,r3
 2033fb8:	10c001c5 	stb	r3,7(r2)
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 2033fbc:	e0bff98b 	ldhu	r2,-26(fp)
 2033fc0:	10800504 	addi	r2,r2,20
 2033fc4:	10bfc00c 	andi	r2,r2,65280
 2033fc8:	1005d23a 	srai	r2,r2,8
 2033fcc:	1007883a 	mov	r3,r2
 2033fd0:	e0bff98b 	ldhu	r2,-26(fp)
 2033fd4:	10800504 	addi	r2,r2,20
 2033fd8:	1004923a 	slli	r2,r2,8
 2033fdc:	1884b03a 	or	r2,r3,r2
 2033fe0:	100d883a 	mov	r6,r2
 2033fe4:	e0bff717 	ldw	r2,-36(fp)
 2033fe8:	30ffffcc 	andi	r3,r6,65535
 2033fec:	19403fcc 	andi	r5,r3,255
 2033ff0:	10c00083 	ldbu	r3,2(r2)
 2033ff4:	1806703a 	and	r3,r3,zero
 2033ff8:	1809883a 	mov	r4,r3
 2033ffc:	2807883a 	mov	r3,r5
 2034000:	20c6b03a 	or	r3,r4,r3
 2034004:	10c00085 	stb	r3,2(r2)
 2034008:	30ffffcc 	andi	r3,r6,65535
 203400c:	1806d23a 	srli	r3,r3,8
 2034010:	197fffcc 	andi	r5,r3,65535
 2034014:	10c000c3 	ldbu	r3,3(r2)
 2034018:	1806703a 	and	r3,r3,zero
 203401c:	1809883a 	mov	r4,r3
 2034020:	2807883a 	mov	r3,r5
 2034024:	20c6b03a 	or	r3,r4,r3
 2034028:	10c000c5 	stb	r3,3(r2)
    IPH_CHKSUM_SET(iphdr, 0);
 203402c:	e0bff717 	ldw	r2,-36(fp)
 2034030:	10c00283 	ldbu	r3,10(r2)
 2034034:	1806703a 	and	r3,r3,zero
 2034038:	10c00285 	stb	r3,10(r2)
 203403c:	10c002c3 	ldbu	r3,11(r2)
 2034040:	1806703a 	and	r3,r3,zero
 2034044:	10c002c5 	stb	r3,11(r2)
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 2034048:	01400504 	movi	r5,20
 203404c:	e13ff717 	ldw	r4,-36(fp)
 2034050:	2031a200 	call	2031a20 <inet_chksum>
 2034054:	100d883a 	mov	r6,r2
 2034058:	e0bff717 	ldw	r2,-36(fp)
 203405c:	30ffffcc 	andi	r3,r6,65535
 2034060:	19403fcc 	andi	r5,r3,255
 2034064:	10c00283 	ldbu	r3,10(r2)
 2034068:	1806703a 	and	r3,r3,zero
 203406c:	1809883a 	mov	r4,r3
 2034070:	2807883a 	mov	r3,r5
 2034074:	20c6b03a 	or	r3,r4,r3
 2034078:	10c00285 	stb	r3,10(r2)
 203407c:	30ffffcc 	andi	r3,r6,65535
 2034080:	1806d23a 	srli	r3,r3,8
 2034084:	197fffcc 	andi	r5,r3,65535
 2034088:	10c002c3 	ldbu	r3,11(r2)
 203408c:	1806703a 	and	r3,r3,zero
 2034090:	1809883a 	mov	r4,r3
 2034094:	2807883a 	mov	r3,r5
 2034098:	20c6b03a 	or	r3,r4,r3
 203409c:	10c002c5 	stb	r3,11(r2)
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 20340a0:	e0bffe17 	ldw	r2,-8(fp)
 20340a4:	10800517 	ldw	r2,20(r2)
 20340a8:	e1bfff17 	ldw	r6,-4(fp)
 20340ac:	e17ffa17 	ldw	r5,-24(fp)
 20340b0:	e13ffe17 	ldw	r4,-8(fp)
 20340b4:	103ee83a 	callr	r2
    IPFRAG_STATS_INC(ip_frag.xmit);
 20340b8:	008085f4 	movhi	r2,535
 20340bc:	10a86704 	addi	r2,r2,-24164
 20340c0:	10801817 	ldw	r2,96(r2)
 20340c4:	10c00044 	addi	r3,r2,1
 20340c8:	008085f4 	movhi	r2,535
 20340cc:	10a86704 	addi	r2,r2,-24164
 20340d0:	10c01815 	stw	r3,96(r2)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
 20340d4:	e13ffa17 	ldw	r4,-24(fp)
 20340d8:	201aa200 	call	201aa20 <pbuf_free>
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
 20340dc:	e0fff20b 	ldhu	r3,-56(fp)
 20340e0:	e0bff98b 	ldhu	r2,-26(fp)
 20340e4:	1885c83a 	sub	r2,r3,r2
 20340e8:	e0bff20d 	sth	r2,-56(fp)
    ofo += nfb;
 20340ec:	e0fff28b 	ldhu	r3,-54(fp)
 20340f0:	e0bff88b 	ldhu	r2,-30(fp)
 20340f4:	1885883a 	add	r2,r3,r2
 20340f8:	e0bff28d 	sth	r2,-54(fp)

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;

  while (left) {
 20340fc:	e0bff20b 	ldhu	r2,-56(fp)
 2034100:	103f171e 	bne	r2,zero,2033d60 <__alt_mem_mem_0+0xfd013d60>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
 2034104:	0005883a 	mov	r2,zero
}
 2034108:	e037883a 	mov	sp,fp
 203410c:	dfc00117 	ldw	ra,4(sp)
 2034110:	df000017 	ldw	fp,0(sp)
 2034114:	dec00204 	addi	sp,sp,8
 2034118:	f800283a 	ret

0203411c <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 203411c:	defffd04 	addi	sp,sp,-12
 2034120:	df000215 	stw	fp,8(sp)
 2034124:	df000204 	addi	fp,sp,8
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
 2034128:	e03fff0d 	sth	zero,-4(fp)
 203412c:	00002606 	br	20341c8 <memp_init+0xac>
    MEMP_STATS_AVAIL(used, i, 0);
 2034130:	e0ffff0b 	ldhu	r3,-4(fp)
 2034134:	008085f4 	movhi	r2,535
 2034138:	10a86704 	addi	r2,r2,-24164
 203413c:	18c00584 	addi	r3,r3,22
 2034140:	1806913a 	slli	r3,r3,4
 2034144:	10c5883a 	add	r2,r2,r3
 2034148:	10800084 	addi	r2,r2,2
 203414c:	1000000d 	sth	zero,0(r2)
    MEMP_STATS_AVAIL(max, i, 0);
 2034150:	e0ffff0b 	ldhu	r3,-4(fp)
 2034154:	008085f4 	movhi	r2,535
 2034158:	10a86704 	addi	r2,r2,-24164
 203415c:	1806913a 	slli	r3,r3,4
 2034160:	10c5883a 	add	r2,r2,r3
 2034164:	10805904 	addi	r2,r2,356
 2034168:	1000000d 	sth	zero,0(r2)
    MEMP_STATS_AVAIL(err, i, 0);
 203416c:	e0ffff0b 	ldhu	r3,-4(fp)
 2034170:	008085f4 	movhi	r2,535
 2034174:	10a86704 	addi	r2,r2,-24164
 2034178:	1806913a 	slli	r3,r3,4
 203417c:	10c5883a 	add	r2,r2,r3
 2034180:	10805a04 	addi	r2,r2,360
 2034184:	10000015 	stw	zero,0(r2)
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
 2034188:	e13fff0b 	ldhu	r4,-4(fp)
 203418c:	e0ffff0b 	ldhu	r3,-4(fp)
 2034190:	00808134 	movhi	r2,516
 2034194:	108d3184 	addi	r2,r2,13510
 2034198:	18c7883a 	add	r3,r3,r3
 203419c:	10c5883a 	add	r2,r2,r3
 20341a0:	10c0000b 	ldhu	r3,0(r2)
 20341a4:	008085f4 	movhi	r2,535
 20341a8:	10a86704 	addi	r2,r2,-24164
 20341ac:	21000584 	addi	r4,r4,22
 20341b0:	2008913a 	slli	r4,r4,4
 20341b4:	1105883a 	add	r2,r2,r4
 20341b8:	10c0000d 	sth	r3,0(r2)
memp_init(void)
{
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
 20341bc:	e0bfff0b 	ldhu	r2,-4(fp)
 20341c0:	10800044 	addi	r2,r2,1
 20341c4:	e0bfff0d 	sth	r2,-4(fp)
 20341c8:	e0bfff0b 	ldhu	r2,-4(fp)
 20341cc:	108003f0 	cmpltui	r2,r2,15
 20341d0:	103fd71e 	bne	r2,zero,2034130 <__alt_mem_mem_0+0xfd014130>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 20341d4:	00808534 	movhi	r2,532
 20341d8:	109fda04 	addi	r2,r2,32616
 20341dc:	10c000c4 	addi	r3,r2,3
 20341e0:	00bfff04 	movi	r2,-4
 20341e4:	1884703a 	and	r2,r3,r2
 20341e8:	e0bffe15 	stw	r2,-8(fp)
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 20341ec:	e03fff0d 	sth	zero,-4(fp)
 20341f0:	00003306 	br	20342c0 <memp_init+0x1a4>
    memp_tab[i] = NULL;
 20341f4:	e0ffff0b 	ldhu	r3,-4(fp)
 20341f8:	00808534 	movhi	r2,532
 20341fc:	109fcb04 	addi	r2,r2,32556
 2034200:	18c7883a 	add	r3,r3,r3
 2034204:	18c7883a 	add	r3,r3,r3
 2034208:	10c5883a 	add	r2,r2,r3
 203420c:	10000015 	stw	zero,0(r2)
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 2034210:	e03fff8d 	sth	zero,-2(fp)
 2034214:	00001e06 	br	2034290 <memp_init+0x174>
      memp->next = memp_tab[i];
 2034218:	e0ffff0b 	ldhu	r3,-4(fp)
 203421c:	00808534 	movhi	r2,532
 2034220:	109fcb04 	addi	r2,r2,32556
 2034224:	18c7883a 	add	r3,r3,r3
 2034228:	18c7883a 	add	r3,r3,r3
 203422c:	10c5883a 	add	r2,r2,r3
 2034230:	10c00017 	ldw	r3,0(r2)
 2034234:	e0bffe17 	ldw	r2,-8(fp)
 2034238:	10c00015 	stw	r3,0(r2)
      memp_tab[i] = memp;
 203423c:	e0ffff0b 	ldhu	r3,-4(fp)
 2034240:	00808534 	movhi	r2,532
 2034244:	109fcb04 	addi	r2,r2,32556
 2034248:	18c7883a 	add	r3,r3,r3
 203424c:	18c7883a 	add	r3,r3,r3
 2034250:	10c5883a 	add	r2,r2,r3
 2034254:	e0fffe17 	ldw	r3,-8(fp)
 2034258:	10c00015 	stw	r3,0(r2)
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 203425c:	e0ffff0b 	ldhu	r3,-4(fp)
 2034260:	00808134 	movhi	r2,516
 2034264:	108d2a04 	addi	r2,r2,13480
 2034268:	18c7883a 	add	r3,r3,r3
 203426c:	10c5883a 	add	r2,r2,r3
 2034270:	1080000b 	ldhu	r2,0(r2)
 2034274:	10bfffcc 	andi	r2,r2,65535
 2034278:	e0fffe17 	ldw	r3,-8(fp)
 203427c:	1885883a 	add	r2,r3,r2
 2034280:	e0bffe15 	stw	r2,-8(fp)
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 2034284:	e0bfff8b 	ldhu	r2,-2(fp)
 2034288:	10800044 	addi	r2,r2,1
 203428c:	e0bfff8d 	sth	r2,-2(fp)
 2034290:	e0ffff0b 	ldhu	r3,-4(fp)
 2034294:	00808134 	movhi	r2,516
 2034298:	108d3184 	addi	r2,r2,13510
 203429c:	18c7883a 	add	r3,r3,r3
 20342a0:	10c5883a 	add	r2,r2,r3
 20342a4:	1080000b 	ldhu	r2,0(r2)
 20342a8:	10bfffcc 	andi	r2,r2,65535
 20342ac:	e0ffff8b 	ldhu	r3,-2(fp)
 20342b0:	18bfd936 	bltu	r3,r2,2034218 <__alt_mem_mem_0+0xfd014218>

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 20342b4:	e0bfff0b 	ldhu	r2,-4(fp)
 20342b8:	10800044 	addi	r2,r2,1
 20342bc:	e0bfff0d 	sth	r2,-4(fp)
 20342c0:	e0bfff0b 	ldhu	r2,-4(fp)
 20342c4:	108003f0 	cmpltui	r2,r2,15
 20342c8:	103fca1e 	bne	r2,zero,20341f4 <__alt_mem_mem_0+0xfd0141f4>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
 20342cc:	0001883a 	nop
 20342d0:	e037883a 	mov	sp,fp
 20342d4:	df000017 	ldw	fp,0(sp)
 20342d8:	dec00104 	addi	sp,sp,4
 20342dc:	f800283a 	ret

020342e0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 20342e0:	defffc04 	addi	sp,sp,-16
 20342e4:	dfc00315 	stw	ra,12(sp)
 20342e8:	df000215 	stw	fp,8(sp)
 20342ec:	df000204 	addi	fp,sp,8
 20342f0:	e13fff15 	stw	r4,-4(fp)
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 20342f4:	e0bfff17 	ldw	r2,-4(fp)
 20342f8:	108003f0 	cmpltui	r2,r2,15
 20342fc:	1000091e 	bne	r2,zero,2034324 <memp_malloc+0x44>
 2034300:	01c08134 	movhi	r7,516
 2034304:	39cd3904 	addi	r7,r7,13540
 2034308:	01806384 	movi	r6,398
 203430c:	01408134 	movhi	r5,516
 2034310:	294d3f04 	addi	r5,r5,13564
 2034314:	01008134 	movhi	r4,516
 2034318:	210d4704 	addi	r4,r4,13596
 203431c:	20009e40 	call	20009e4 <printf>
 2034320:	003fff06 	br	2034320 <__alt_mem_mem_0+0xfd014320>

  SYS_ARCH_PROTECT(old_level);
 2034324:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2034328:	10000126 	beq	r2,zero,2034330 <memp_malloc+0x50>
 203432c:	2010de80 	call	2010de8 <vTaskEnterCritical>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
 2034330:	00808534 	movhi	r2,532
 2034334:	109fcb04 	addi	r2,r2,32556
 2034338:	e0ffff17 	ldw	r3,-4(fp)
 203433c:	18c7883a 	add	r3,r3,r3
 2034340:	18c7883a 	add	r3,r3,r3
 2034344:	10c5883a 	add	r2,r2,r3
 2034348:	10800017 	ldw	r2,0(r2)
 203434c:	e0bffe15 	stw	r2,-8(fp)
  
  if (memp != NULL) {
 2034350:	e0bffe17 	ldw	r2,-8(fp)
 2034354:	10003d26 	beq	r2,zero,203444c <memp_malloc+0x16c>
    memp_tab[type] = memp->next;
 2034358:	e0bffe17 	ldw	r2,-8(fp)
 203435c:	11000017 	ldw	r4,0(r2)
 2034360:	00808534 	movhi	r2,532
 2034364:	109fcb04 	addi	r2,r2,32556
 2034368:	e0ffff17 	ldw	r3,-4(fp)
 203436c:	18c7883a 	add	r3,r3,r3
 2034370:	18c7883a 	add	r3,r3,r3
 2034374:	10c5883a 	add	r2,r2,r3
 2034378:	11000015 	stw	r4,0(r2)
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
    memp->file = file;
    memp->line = line;
#endif /* MEMP_OVERFLOW_CHECK */
    MEMP_STATS_INC_USED(used, type);
 203437c:	008085f4 	movhi	r2,535
 2034380:	10a86704 	addi	r2,r2,-24164
 2034384:	e0ffff17 	ldw	r3,-4(fp)
 2034388:	18c00584 	addi	r3,r3,22
 203438c:	1806913a 	slli	r3,r3,4
 2034390:	10c5883a 	add	r2,r2,r3
 2034394:	10800084 	addi	r2,r2,2
 2034398:	1080000b 	ldhu	r2,0(r2)
 203439c:	10800044 	addi	r2,r2,1
 20343a0:	1009883a 	mov	r4,r2
 20343a4:	008085f4 	movhi	r2,535
 20343a8:	10a86704 	addi	r2,r2,-24164
 20343ac:	e0ffff17 	ldw	r3,-4(fp)
 20343b0:	18c00584 	addi	r3,r3,22
 20343b4:	1806913a 	slli	r3,r3,4
 20343b8:	10c5883a 	add	r2,r2,r3
 20343bc:	10800084 	addi	r2,r2,2
 20343c0:	1100000d 	sth	r4,0(r2)
 20343c4:	008085f4 	movhi	r2,535
 20343c8:	10a86704 	addi	r2,r2,-24164
 20343cc:	e0ffff17 	ldw	r3,-4(fp)
 20343d0:	1806913a 	slli	r3,r3,4
 20343d4:	10c5883a 	add	r2,r2,r3
 20343d8:	10805904 	addi	r2,r2,356
 20343dc:	1100000b 	ldhu	r4,0(r2)
 20343e0:	008085f4 	movhi	r2,535
 20343e4:	10a86704 	addi	r2,r2,-24164
 20343e8:	e0ffff17 	ldw	r3,-4(fp)
 20343ec:	18c00584 	addi	r3,r3,22
 20343f0:	1806913a 	slli	r3,r3,4
 20343f4:	10c5883a 	add	r2,r2,r3
 20343f8:	10800084 	addi	r2,r2,2
 20343fc:	1080000b 	ldhu	r2,0(r2)
 2034400:	20ffffcc 	andi	r3,r4,65535
 2034404:	10bfffcc 	andi	r2,r2,65535
 2034408:	18801f2e 	bgeu	r3,r2,2034488 <memp_malloc+0x1a8>
 203440c:	008085f4 	movhi	r2,535
 2034410:	10a86704 	addi	r2,r2,-24164
 2034414:	e0ffff17 	ldw	r3,-4(fp)
 2034418:	18c00584 	addi	r3,r3,22
 203441c:	1806913a 	slli	r3,r3,4
 2034420:	10c5883a 	add	r2,r2,r3
 2034424:	10800084 	addi	r2,r2,2
 2034428:	10c0000b 	ldhu	r3,0(r2)
 203442c:	008085f4 	movhi	r2,535
 2034430:	10a86704 	addi	r2,r2,-24164
 2034434:	e13fff17 	ldw	r4,-4(fp)
 2034438:	2008913a 	slli	r4,r4,4
 203443c:	1105883a 	add	r2,r2,r4
 2034440:	10805904 	addi	r2,r2,356
 2034444:	10c0000d 	sth	r3,0(r2)
 2034448:	00000f06 	br	2034488 <memp_malloc+0x1a8>
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
    memp = (struct memp*)(void *)((u8_t*)memp + MEMP_SIZE);
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", memp_desc[type]));
    MEMP_STATS_INC(err, type);
 203444c:	008085f4 	movhi	r2,535
 2034450:	10a86704 	addi	r2,r2,-24164
 2034454:	e0ffff17 	ldw	r3,-4(fp)
 2034458:	1806913a 	slli	r3,r3,4
 203445c:	10c5883a 	add	r2,r2,r3
 2034460:	10805a04 	addi	r2,r2,360
 2034464:	10800017 	ldw	r2,0(r2)
 2034468:	10c00044 	addi	r3,r2,1
 203446c:	008085f4 	movhi	r2,535
 2034470:	10a86704 	addi	r2,r2,-24164
 2034474:	e13fff17 	ldw	r4,-4(fp)
 2034478:	2008913a 	slli	r4,r4,4
 203447c:	1105883a 	add	r2,r2,r4
 2034480:	10805a04 	addi	r2,r2,360
 2034484:	10c00015 	stw	r3,0(r2)
  }

  SYS_ARCH_UNPROTECT(old_level);
 2034488:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 203448c:	10000126 	beq	r2,zero,2034494 <memp_malloc+0x1b4>
 2034490:	2010e300 	call	2010e30 <vTaskExitCritical>

  return memp;
 2034494:	e0bffe17 	ldw	r2,-8(fp)
}
 2034498:	e037883a 	mov	sp,fp
 203449c:	dfc00117 	ldw	ra,4(sp)
 20344a0:	df000017 	ldw	fp,0(sp)
 20344a4:	dec00204 	addi	sp,sp,8
 20344a8:	f800283a 	ret

020344ac <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 20344ac:	defffb04 	addi	sp,sp,-20
 20344b0:	dfc00415 	stw	ra,16(sp)
 20344b4:	df000315 	stw	fp,12(sp)
 20344b8:	df000304 	addi	fp,sp,12
 20344bc:	e13ffe15 	stw	r4,-8(fp)
 20344c0:	e17fff15 	stw	r5,-4(fp)
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
 20344c4:	e0bfff17 	ldw	r2,-4(fp)
 20344c8:	10002c26 	beq	r2,zero,203457c <memp_free+0xd0>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 20344cc:	e0bfff17 	ldw	r2,-4(fp)
 20344d0:	e0bffd15 	stw	r2,-12(fp)

  SYS_ARCH_PROTECT(old_level);
 20344d4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20344d8:	10000126 	beq	r2,zero,20344e0 <memp_free+0x34>
 20344dc:	2010de80 	call	2010de8 <vTaskEnterCritical>
  memp_overflow_check_element_overflow(memp, type);
  memp_overflow_check_element_underflow(memp, type);
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
 20344e0:	008085f4 	movhi	r2,535
 20344e4:	10a86704 	addi	r2,r2,-24164
 20344e8:	e0fffe17 	ldw	r3,-8(fp)
 20344ec:	18c00584 	addi	r3,r3,22
 20344f0:	1806913a 	slli	r3,r3,4
 20344f4:	10c5883a 	add	r2,r2,r3
 20344f8:	10800084 	addi	r2,r2,2
 20344fc:	1080000b 	ldhu	r2,0(r2)
 2034500:	10bfffc4 	addi	r2,r2,-1
 2034504:	1009883a 	mov	r4,r2
 2034508:	008085f4 	movhi	r2,535
 203450c:	10a86704 	addi	r2,r2,-24164
 2034510:	e0fffe17 	ldw	r3,-8(fp)
 2034514:	18c00584 	addi	r3,r3,22
 2034518:	1806913a 	slli	r3,r3,4
 203451c:	10c5883a 	add	r2,r2,r3
 2034520:	10800084 	addi	r2,r2,2
 2034524:	1100000d 	sth	r4,0(r2)
  
  memp->next = memp_tab[type]; 
 2034528:	00808534 	movhi	r2,532
 203452c:	109fcb04 	addi	r2,r2,32556
 2034530:	e0fffe17 	ldw	r3,-8(fp)
 2034534:	18c7883a 	add	r3,r3,r3
 2034538:	18c7883a 	add	r3,r3,r3
 203453c:	10c5883a 	add	r2,r2,r3
 2034540:	10c00017 	ldw	r3,0(r2)
 2034544:	e0bffd17 	ldw	r2,-12(fp)
 2034548:	10c00015 	stw	r3,0(r2)
  memp_tab[type] = memp;
 203454c:	00808534 	movhi	r2,532
 2034550:	109fcb04 	addi	r2,r2,32556
 2034554:	e0fffe17 	ldw	r3,-8(fp)
 2034558:	18c7883a 	add	r3,r3,r3
 203455c:	18c7883a 	add	r3,r3,r3
 2034560:	10c5883a 	add	r2,r2,r3
 2034564:	e0fffd17 	ldw	r3,-12(fp)
 2034568:	10c00015 	stw	r3,0(r2)

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 203456c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2034570:	10000326 	beq	r2,zero,2034580 <memp_free+0xd4>
 2034574:	2010e300 	call	2010e30 <vTaskExitCritical>
 2034578:	00000106 	br	2034580 <memp_free+0xd4>
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
    return;
 203457c:	0001883a 	nop
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
 2034580:	e037883a 	mov	sp,fp
 2034584:	dfc00117 	ldw	ra,4(sp)
 2034588:	df000017 	ldw	fp,0(sp)
 203458c:	dec00204 	addi	sp,sp,8
 2034590:	f800283a 	ret

02034594 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 2034594:	defff704 	addi	sp,sp,-36
 2034598:	dfc00815 	stw	ra,32(sp)
 203459c:	df000715 	stw	fp,28(sp)
 20345a0:	df000704 	addi	fp,sp,28
 20345a4:	e13ffe15 	stw	r4,-8(fp)
 20345a8:	e17fff15 	stw	r5,-4(fp)
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
 20345ac:	e03ffb05 	stb	zero,-20(fp)

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
 20345b0:	e0bffe17 	ldw	r2,-8(fp)
 20345b4:	10800117 	ldw	r2,4(r2)
 20345b8:	e0bffc15 	stw	r2,-16(fp)
  proto = IPH_PROTO(iphdr);
 20345bc:	e0bffc17 	ldw	r2,-16(fp)
 20345c0:	10800243 	ldbu	r2,9(r2)
 20345c4:	10803fcc 	andi	r2,r2,255
 20345c8:	e0bffd0d 	sth	r2,-12(fp)

  prev = NULL;
 20345cc:	e03ffa15 	stw	zero,-24(fp)
  pcb = raw_pcbs;
 20345d0:	d0a81817 	ldw	r2,-24480(gp)
 20345d4:	e0bff915 	stw	r2,-28(fp)
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 20345d8:	00002f06 	br	2034698 <raw_input+0x104>
    if ((pcb->protocol == proto) &&
 20345dc:	e0bff917 	ldw	r2,-28(fp)
 20345e0:	10800403 	ldbu	r2,16(r2)
 20345e4:	10c03fcc 	andi	r3,r2,255
 20345e8:	e0bffd0f 	ldh	r2,-12(fp)
 20345ec:	1880251e 	bne	r3,r2,2034684 <raw_input+0xf0>
        (ip_addr_isany(&pcb->local_ip) ||
 20345f0:	e0bff917 	ldw	r2,-28(fp)
  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
 20345f4:	10000726 	beq	r2,zero,2034614 <raw_input+0x80>
        (ip_addr_isany(&pcb->local_ip) ||
 20345f8:	e0bff917 	ldw	r2,-28(fp)
 20345fc:	10800017 	ldw	r2,0(r2)
 2034600:	10000426 	beq	r2,zero,2034614 <raw_input+0x80>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
 2034604:	e0bff917 	ldw	r2,-28(fp)
 2034608:	10c00017 	ldw	r3,0(r2)
 203460c:	d0a81417 	ldw	r2,-24496(gp)
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
        (ip_addr_isany(&pcb->local_ip) ||
 2034610:	18801c1e 	bne	r3,r2,2034684 <raw_input+0xf0>
      /* broadcast filter? */
      if (ip_get_option(pcb, SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
 2034614:	e0bff917 	ldw	r2,-28(fp)
 2034618:	10800517 	ldw	r2,20(r2)
 203461c:	10001926 	beq	r2,zero,2034684 <raw_input+0xf0>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
 2034620:	e0bff917 	ldw	r2,-28(fp)
 2034624:	10800517 	ldw	r2,20(r2)
 2034628:	e0fff917 	ldw	r3,-28(fp)
 203462c:	18c00617 	ldw	r3,24(r3)
 2034630:	d1e81204 	addi	r7,gp,-24504
 2034634:	e1bffe17 	ldw	r6,-8(fp)
 2034638:	e17ff917 	ldw	r5,-28(fp)
 203463c:	1809883a 	mov	r4,r3
 2034640:	103ee83a 	callr	r2
 2034644:	10803fcc 	andi	r2,r2,255
 2034648:	10000e26 	beq	r2,zero,2034684 <raw_input+0xf0>
            /* receive function ate the packet */
            p = NULL;
 203464c:	e03ffe15 	stw	zero,-8(fp)
            eaten = 1;
 2034650:	00800044 	movi	r2,1
 2034654:	e0bffb05 	stb	r2,-20(fp)
            if (prev != NULL) {
 2034658:	e0bffa17 	ldw	r2,-24(fp)
 203465c:	10000926 	beq	r2,zero,2034684 <raw_input+0xf0>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
 2034660:	e0bff917 	ldw	r2,-28(fp)
 2034664:	10c00317 	ldw	r3,12(r2)
 2034668:	e0bffa17 	ldw	r2,-24(fp)
 203466c:	10c00315 	stw	r3,12(r2)
              pcb->next = raw_pcbs;
 2034670:	d0e81817 	ldw	r3,-24480(gp)
 2034674:	e0bff917 	ldw	r2,-28(fp)
 2034678:	10c00315 	stw	r3,12(r2)
              raw_pcbs = pcb;
 203467c:	e0bff917 	ldw	r2,-28(fp)
 2034680:	d0a81815 	stw	r2,-24480(gp)
        }
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
 2034684:	e0bff917 	ldw	r2,-28(fp)
 2034688:	e0bffa15 	stw	r2,-24(fp)
    pcb = pcb->next;
 203468c:	e0bff917 	ldw	r2,-28(fp)
 2034690:	10800317 	ldw	r2,12(r2)
 2034694:	e0bff915 	stw	r2,-28(fp)

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 2034698:	e0bffb03 	ldbu	r2,-20(fp)
 203469c:	1000021e 	bne	r2,zero,20346a8 <raw_input+0x114>
 20346a0:	e0bff917 	ldw	r2,-28(fp)
 20346a4:	103fcd1e 	bne	r2,zero,20345dc <__alt_mem_mem_0+0xfd0145dc>
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
 20346a8:	e0bffb03 	ldbu	r2,-20(fp)
}
 20346ac:	e037883a 	mov	sp,fp
 20346b0:	dfc00117 	ldw	ra,4(sp)
 20346b4:	df000017 	ldw	fp,0(sp)
 20346b8:	dec00204 	addi	sp,sp,8
 20346bc:	f800283a 	ret

020346c0 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, ip_addr_t *ipaddr)
{
 20346c0:	defffd04 	addi	sp,sp,-12
 20346c4:	df000215 	stw	fp,8(sp)
 20346c8:	df000204 	addi	fp,sp,8
 20346cc:	e13ffe15 	stw	r4,-8(fp)
 20346d0:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&pcb->local_ip, ipaddr);
 20346d4:	e0bfff17 	ldw	r2,-4(fp)
 20346d8:	10000326 	beq	r2,zero,20346e8 <raw_bind+0x28>
 20346dc:	e0bfff17 	ldw	r2,-4(fp)
 20346e0:	10800017 	ldw	r2,0(r2)
 20346e4:	00000106 	br	20346ec <raw_bind+0x2c>
 20346e8:	0005883a 	mov	r2,zero
 20346ec:	e0fffe17 	ldw	r3,-8(fp)
 20346f0:	18800015 	stw	r2,0(r3)
  return ERR_OK;
 20346f4:	0005883a 	mov	r2,zero
}
 20346f8:	e037883a 	mov	sp,fp
 20346fc:	df000017 	ldw	fp,0(sp)
 2034700:	dec00104 	addi	sp,sp,4
 2034704:	f800283a 	ret

02034708 <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, ip_addr_t *ipaddr)
{
 2034708:	defffd04 	addi	sp,sp,-12
 203470c:	df000215 	stw	fp,8(sp)
 2034710:	df000204 	addi	fp,sp,8
 2034714:	e13ffe15 	stw	r4,-8(fp)
 2034718:	e17fff15 	stw	r5,-4(fp)
  ip_addr_set(&pcb->remote_ip, ipaddr);
 203471c:	e0bfff17 	ldw	r2,-4(fp)
 2034720:	10000326 	beq	r2,zero,2034730 <raw_connect+0x28>
 2034724:	e0bfff17 	ldw	r2,-4(fp)
 2034728:	10800017 	ldw	r2,0(r2)
 203472c:	00000106 	br	2034734 <raw_connect+0x2c>
 2034730:	0005883a 	mov	r2,zero
 2034734:	e0fffe17 	ldw	r3,-8(fp)
 2034738:	18800115 	stw	r2,4(r3)
  return ERR_OK;
 203473c:	0005883a 	mov	r2,zero
}
 2034740:	e037883a 	mov	sp,fp
 2034744:	df000017 	ldw	fp,0(sp)
 2034748:	dec00104 	addi	sp,sp,4
 203474c:	f800283a 	ret

02034750 <raw_recv>:
 * @return non-zero if the packet was free()d, zero if the packet remains
 * available for others.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
 2034750:	defffc04 	addi	sp,sp,-16
 2034754:	df000315 	stw	fp,12(sp)
 2034758:	df000304 	addi	fp,sp,12
 203475c:	e13ffd15 	stw	r4,-12(fp)
 2034760:	e17ffe15 	stw	r5,-8(fp)
 2034764:	e1bfff15 	stw	r6,-4(fp)
  /* remember recv() callback and user data */
  pcb->recv = recv;
 2034768:	e0bffd17 	ldw	r2,-12(fp)
 203476c:	e0fffe17 	ldw	r3,-8(fp)
 2034770:	10c00515 	stw	r3,20(r2)
  pcb->recv_arg = recv_arg;
 2034774:	e0bffd17 	ldw	r2,-12(fp)
 2034778:	e0ffff17 	ldw	r3,-4(fp)
 203477c:	10c00615 	stw	r3,24(r2)
}
 2034780:	0001883a 	nop
 2034784:	e037883a 	mov	sp,fp
 2034788:	df000017 	ldw	fp,0(sp)
 203478c:	dec00104 	addi	sp,sp,4
 2034790:	f800283a 	ret

02034794 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, ip_addr_t *ipaddr)
{
 2034794:	defff404 	addi	sp,sp,-48
 2034798:	dfc00b15 	stw	ra,44(sp)
 203479c:	df000a15 	stw	fp,40(sp)
 20347a0:	df000a04 	addi	fp,sp,40
 20347a4:	e13ffd15 	stw	r4,-12(fp)
 20347a8:	e17ffe15 	stw	r5,-8(fp)
 20347ac:	e1bfff15 	stw	r6,-4(fp)
  struct pbuf *q; /* q will be sent down the stack */
  
  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));
  
  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, IP_HLEN)) {
 20347b0:	01400504 	movi	r5,20
 20347b4:	e13ffe17 	ldw	r4,-8(fp)
 20347b8:	201a8700 	call	201a870 <pbuf_header>
 20347bc:	10803fcc 	andi	r2,r2,255
 20347c0:	10001126 	beq	r2,zero,2034808 <raw_sendto+0x74>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
 20347c4:	000d883a 	mov	r6,zero
 20347c8:	000b883a 	mov	r5,zero
 20347cc:	01000044 	movi	r4,1
 20347d0:	201a2640 	call	201a264 <pbuf_alloc>
 20347d4:	e0bffa15 	stw	r2,-24(fp)
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 20347d8:	e0bffa17 	ldw	r2,-24(fp)
 20347dc:	1000021e 	bne	r2,zero,20347e8 <raw_sendto+0x54>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
 20347e0:	00bfffc4 	movi	r2,-1
 20347e4:	00004806 	br	2034908 <raw_sendto+0x174>
    }
    if (p->tot_len != 0) {
 20347e8:	e0bffe17 	ldw	r2,-8(fp)
 20347ec:	1080020b 	ldhu	r2,8(r2)
 20347f0:	10bfffcc 	andi	r2,r2,65535
 20347f4:	10000d26 	beq	r2,zero,203482c <raw_sendto+0x98>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
 20347f8:	e17ffe17 	ldw	r5,-8(fp)
 20347fc:	e13ffa17 	ldw	r4,-24(fp)
 2034800:	201ace80 	call	201ace8 <pbuf_chain>
 2034804:	00000906 	br	203482c <raw_sendto+0x98>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  }  else {
    /* first pbuf q equals given pbuf */
    q = p;
 2034808:	e0bffe17 	ldw	r2,-8(fp)
 203480c:	e0bffa15 	stw	r2,-24(fp)
    if(pbuf_header(q, -IP_HLEN)) {
 2034810:	017ffb04 	movi	r5,-20
 2034814:	e13ffa17 	ldw	r4,-24(fp)
 2034818:	201a8700 	call	201a870 <pbuf_header>
 203481c:	10803fcc 	andi	r2,r2,255
 2034820:	10000226 	beq	r2,zero,203482c <raw_sendto+0x98>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
      return ERR_MEM;
 2034824:	00bfffc4 	movi	r2,-1
 2034828:	00003706 	br	2034908 <raw_sendto+0x174>
    }
  }

  if ((netif = ip_route((struct ip_pcb*)pcb, ipaddr)) == NULL) {
 203482c:	e17fff17 	ldw	r5,-4(fp)
 2034830:	e13ffd17 	ldw	r4,-12(fp)
 2034834:	2031bc80 	call	2031bc8 <ip_route>
 2034838:	e0bffb15 	stw	r2,-20(fp)
 203483c:	e0bffb17 	ldw	r2,-20(fp)
 2034840:	1000071e 	bne	r2,zero,2034860 <raw_sendto+0xcc>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr)));
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
 2034844:	e0fffa17 	ldw	r3,-24(fp)
 2034848:	e0bffe17 	ldw	r2,-8(fp)
 203484c:	18800226 	beq	r3,r2,2034858 <raw_sendto+0xc4>
      pbuf_free(q);
 2034850:	e13ffa17 	ldw	r4,-24(fp)
 2034854:	201aa200 	call	201aa20 <pbuf_free>
    }
    return ERR_RTE;
 2034858:	00bfff04 	movi	r2,-4
 203485c:	00002a06 	br	2034908 <raw_sendto+0x174>
    }
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
 2034860:	e0bffd17 	ldw	r2,-12(fp)
 2034864:	10000326 	beq	r2,zero,2034874 <raw_sendto+0xe0>
 2034868:	e0bffd17 	ldw	r2,-12(fp)
 203486c:	10800017 	ldw	r2,0(r2)
 2034870:	1000041e 	bne	r2,zero,2034884 <raw_sendto+0xf0>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 2034874:	e0bffb17 	ldw	r2,-20(fp)
 2034878:	10800104 	addi	r2,r2,4
 203487c:	e0bff915 	stw	r2,-28(fp)
 2034880:	00000206 	br	203488c <raw_sendto+0xf8>
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
 2034884:	e0bffd17 	ldw	r2,-12(fp)
 2034888:	e0bff915 	stw	r2,-28(fp)
  }

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
 203488c:	e0bffd17 	ldw	r2,-12(fp)
 2034890:	10c002c4 	addi	r3,r2,11
 2034894:	e0bffb17 	ldw	r2,-20(fp)
 2034898:	10c01015 	stw	r3,64(r2)
  err = ip_output_if (q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
 203489c:	e0bffd17 	ldw	r2,-12(fp)
 20348a0:	10800283 	ldbu	r2,10(r2)
 20348a4:	11403fcc 	andi	r5,r2,255
 20348a8:	e0bffd17 	ldw	r2,-12(fp)
 20348ac:	10800243 	ldbu	r2,9(r2)
 20348b0:	10803fcc 	andi	r2,r2,255
 20348b4:	e0fffd17 	ldw	r3,-12(fp)
 20348b8:	18c00403 	ldbu	r3,16(r3)
 20348bc:	18c03fcc 	andi	r3,r3,255
 20348c0:	e13ffb17 	ldw	r4,-20(fp)
 20348c4:	d9000215 	stw	r4,8(sp)
 20348c8:	d8c00115 	stw	r3,4(sp)
 20348cc:	d8800015 	stw	r2,0(sp)
 20348d0:	280f883a 	mov	r7,r5
 20348d4:	e1bfff17 	ldw	r6,-4(fp)
 20348d8:	e17ff917 	ldw	r5,-28(fp)
 20348dc:	e13ffa17 	ldw	r4,-24(fp)
 20348e0:	20321f40 	call	20321f4 <ip_output_if>
 20348e4:	e0bffc05 	stb	r2,-16(fp)
  NETIF_SET_HWADDRHINT(netif, NULL);
 20348e8:	e0bffb17 	ldw	r2,-20(fp)
 20348ec:	10001015 	stw	zero,64(r2)

  /* did we chain a header earlier? */
  if (q != p) {
 20348f0:	e0fffa17 	ldw	r3,-24(fp)
 20348f4:	e0bffe17 	ldw	r2,-8(fp)
 20348f8:	18800226 	beq	r3,r2,2034904 <raw_sendto+0x170>
    /* free the header */
    pbuf_free(q);
 20348fc:	e13ffa17 	ldw	r4,-24(fp)
 2034900:	201aa200 	call	201aa20 <pbuf_free>
  }
  return err;
 2034904:	e0bffc03 	ldbu	r2,-16(fp)
}
 2034908:	e037883a 	mov	sp,fp
 203490c:	dfc00117 	ldw	ra,4(sp)
 2034910:	df000017 	ldw	fp,0(sp)
 2034914:	dec00204 	addi	sp,sp,8
 2034918:	f800283a 	ret

0203491c <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
 203491c:	defffc04 	addi	sp,sp,-16
 2034920:	dfc00315 	stw	ra,12(sp)
 2034924:	df000215 	stw	fp,8(sp)
 2034928:	df000204 	addi	fp,sp,8
 203492c:	e13ffe15 	stw	r4,-8(fp)
 2034930:	e17fff15 	stw	r5,-4(fp)
  return raw_sendto(pcb, p, &pcb->remote_ip);
 2034934:	e0bffe17 	ldw	r2,-8(fp)
 2034938:	10800104 	addi	r2,r2,4
 203493c:	100d883a 	mov	r6,r2
 2034940:	e17fff17 	ldw	r5,-4(fp)
 2034944:	e13ffe17 	ldw	r4,-8(fp)
 2034948:	20347940 	call	2034794 <raw_sendto>
}
 203494c:	e037883a 	mov	sp,fp
 2034950:	dfc00117 	ldw	ra,4(sp)
 2034954:	df000017 	ldw	fp,0(sp)
 2034958:	dec00204 	addi	sp,sp,8
 203495c:	f800283a 	ret

02034960 <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
 2034960:	defffc04 	addi	sp,sp,-16
 2034964:	dfc00315 	stw	ra,12(sp)
 2034968:	df000215 	stw	fp,8(sp)
 203496c:	df000204 	addi	fp,sp,8
 2034970:	e13fff15 	stw	r4,-4(fp)
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
 2034974:	d0e81817 	ldw	r3,-24480(gp)
 2034978:	e0bfff17 	ldw	r2,-4(fp)
 203497c:	1880041e 	bne	r3,r2,2034990 <raw_remove+0x30>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
 2034980:	d0a81817 	ldw	r2,-24480(gp)
 2034984:	10800317 	ldw	r2,12(r2)
 2034988:	d0a81815 	stw	r2,-24480(gp)
 203498c:	00001306 	br	20349dc <raw_remove+0x7c>
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 2034990:	d0a81817 	ldw	r2,-24480(gp)
 2034994:	e0bffe15 	stw	r2,-8(fp)
 2034998:	00000e06 	br	20349d4 <raw_remove+0x74>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 203499c:	e0bffe17 	ldw	r2,-8(fp)
 20349a0:	10800317 	ldw	r2,12(r2)
 20349a4:	10000826 	beq	r2,zero,20349c8 <raw_remove+0x68>
 20349a8:	e0bffe17 	ldw	r2,-8(fp)
 20349ac:	10c00317 	ldw	r3,12(r2)
 20349b0:	e0bfff17 	ldw	r2,-4(fp)
 20349b4:	1880041e 	bne	r3,r2,20349c8 <raw_remove+0x68>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 20349b8:	e0bfff17 	ldw	r2,-4(fp)
 20349bc:	10c00317 	ldw	r3,12(r2)
 20349c0:	e0bffe17 	ldw	r2,-8(fp)
 20349c4:	10c00315 	stw	r3,12(r2)
  if (raw_pcbs == pcb) {
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 20349c8:	e0bffe17 	ldw	r2,-8(fp)
 20349cc:	10800317 	ldw	r2,12(r2)
 20349d0:	e0bffe15 	stw	r2,-8(fp)
 20349d4:	e0bffe17 	ldw	r2,-8(fp)
 20349d8:	103ff01e 	bne	r2,zero,203499c <__alt_mem_mem_0+0xfd01499c>
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
 20349dc:	e17fff17 	ldw	r5,-4(fp)
 20349e0:	0009883a 	mov	r4,zero
 20349e4:	20344ac0 	call	20344ac <memp_free>
}
 20349e8:	0001883a 	nop
 20349ec:	e037883a 	mov	sp,fp
 20349f0:	dfc00117 	ldw	ra,4(sp)
 20349f4:	df000017 	ldw	fp,0(sp)
 20349f8:	dec00204 	addi	sp,sp,8
 20349fc:	f800283a 	ret

02034a00 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
 2034a00:	defffc04 	addi	sp,sp,-16
 2034a04:	dfc00315 	stw	ra,12(sp)
 2034a08:	df000215 	stw	fp,8(sp)
 2034a0c:	df000204 	addi	fp,sp,8
 2034a10:	2005883a 	mov	r2,r4
 2034a14:	e0bfff05 	stb	r2,-4(fp)
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
 2034a18:	0009883a 	mov	r4,zero
 2034a1c:	20342e00 	call	20342e0 <memp_malloc>
 2034a20:	e0bffe15 	stw	r2,-8(fp)
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
 2034a24:	e0bffe17 	ldw	r2,-8(fp)
 2034a28:	10000f26 	beq	r2,zero,2034a68 <raw_new+0x68>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
 2034a2c:	01800704 	movi	r6,28
 2034a30:	000b883a 	mov	r5,zero
 2034a34:	e13ffe17 	ldw	r4,-8(fp)
 2034a38:	2005fa00 	call	2005fa0 <memset>
    pcb->protocol = proto;
 2034a3c:	e0bffe17 	ldw	r2,-8(fp)
 2034a40:	e0ffff03 	ldbu	r3,-4(fp)
 2034a44:	10c00405 	stb	r3,16(r2)
    pcb->ttl = RAW_TTL;
 2034a48:	e0bffe17 	ldw	r2,-8(fp)
 2034a4c:	00c01004 	movi	r3,64
 2034a50:	10c00285 	stb	r3,10(r2)
    pcb->next = raw_pcbs;
 2034a54:	d0e81817 	ldw	r3,-24480(gp)
 2034a58:	e0bffe17 	ldw	r2,-8(fp)
 2034a5c:	10c00315 	stw	r3,12(r2)
    raw_pcbs = pcb;
 2034a60:	e0bffe17 	ldw	r2,-8(fp)
 2034a64:	d0a81815 	stw	r2,-24480(gp)
  }
  return pcb;
 2034a68:	e0bffe17 	ldw	r2,-8(fp)
}
 2034a6c:	e037883a 	mov	sp,fp
 2034a70:	dfc00117 	ldw	ra,4(sp)
 2034a74:	df000017 	ldw	fp,0(sp)
 2034a78:	dec00204 	addi	sp,sp,8
 2034a7c:	f800283a 	ret

02034a80 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 2034a80:	defff404 	addi	sp,sp,-48
 2034a84:	dfc00b15 	stw	ra,44(sp)
 2034a88:	df000a15 	stw	fp,40(sp)
 2034a8c:	df000a04 	addi	fp,sp,40
 2034a90:	e13ffe15 	stw	r4,-8(fp)
 2034a94:	e17fff15 	stw	r5,-4(fp)
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
 2034a98:	e03ffb15 	stw	zero,-20(fp)
  struct tcp_pcb_listen *lpcb_any = NULL;
 2034a9c:	e03ffc15 	stw	zero,-16(fp)
  u8_t hdrlen;
  err_t err;

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 2034aa0:	008085f4 	movhi	r2,535
 2034aa4:	10a86704 	addi	r2,r2,-24164
 2034aa8:	10804917 	ldw	r2,292(r2)
 2034aac:	10c00044 	addi	r3,r2,1
 2034ab0:	008085f4 	movhi	r2,535
 2034ab4:	10a86704 	addi	r2,r2,-24164
 2034ab8:	10c04915 	stw	r3,292(r2)
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
 2034abc:	e0bffe17 	ldw	r2,-8(fp)
 2034ac0:	10800117 	ldw	r2,4(r2)
 2034ac4:	d0a81a15 	stw	r2,-24472(gp)
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
 2034ac8:	e0bffe17 	ldw	r2,-8(fp)
 2034acc:	10c00117 	ldw	r3,4(r2)
 2034ad0:	d0a81a17 	ldw	r2,-24472(gp)
 2034ad4:	10800003 	ldbu	r2,0(r2)
 2034ad8:	10803fcc 	andi	r2,r2,255
 2034adc:	108003cc 	andi	r2,r2,15
 2034ae0:	1085883a 	add	r2,r2,r2
 2034ae4:	1085883a 	add	r2,r2,r2
 2034ae8:	1885883a 	add	r2,r3,r2
 2034aec:	d0a81915 	stw	r2,-24476(gp)
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
 2034af0:	d0a81a17 	ldw	r2,-24472(gp)
 2034af4:	10800003 	ldbu	r2,0(r2)
 2034af8:	10803fcc 	andi	r2,r2,255
 2034afc:	108003cc 	andi	r2,r2,15
 2034b00:	1085883a 	add	r2,r2,r2
 2034b04:	1085883a 	add	r2,r2,r2
 2034b08:	0085c83a 	sub	r2,zero,r2
 2034b0c:	10bfffcc 	andi	r2,r2,65535
 2034b10:	10a0001c 	xori	r2,r2,32768
 2034b14:	10a00004 	addi	r2,r2,-32768
 2034b18:	100b883a 	mov	r5,r2
 2034b1c:	e13ffe17 	ldw	r4,-8(fp)
 2034b20:	201a8700 	call	201a870 <pbuf_header>
 2034b24:	10803fcc 	andi	r2,r2,255
 2034b28:	1000051e 	bne	r2,zero,2034b40 <tcp_input+0xc0>
 2034b2c:	e0bffe17 	ldw	r2,-8(fp)
 2034b30:	1080020b 	ldhu	r2,8(r2)
 2034b34:	10bfffcc 	andi	r2,r2,65535
 2034b38:	10800528 	cmpgeui	r2,r2,20
 2034b3c:	1000081e 	bne	r2,zero,2034b60 <tcp_input+0xe0>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 2034b40:	008085f4 	movhi	r2,535
 2034b44:	10a86704 	addi	r2,r2,-24164
 2034b48:	10804d17 	ldw	r2,308(r2)
 2034b4c:	10c00044 	addi	r3,r2,1
 2034b50:	008085f4 	movhi	r2,535
 2034b54:	10a86704 	addi	r2,r2,-24164
 2034b58:	10c04d15 	stw	r3,308(r2)
    goto dropped;
 2034b5c:	00035706 	br	20358bc <tcp_input+0xe3c>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 2034b60:	d0a81417 	ldw	r2,-24496(gp)
 2034b64:	e17fff17 	ldw	r5,-4(fp)
 2034b68:	1009883a 	mov	r4,r2
 2034b6c:	20187dc0 	call	20187dc <ip4_addr_isbroadcast>
 2034b70:	10803fcc 	andi	r2,r2,255
 2034b74:	1000041e 	bne	r2,zero,2034b88 <tcp_input+0x108>
      ip_addr_ismulticast(&current_iphdr_dest)) {
 2034b78:	d0a81417 	ldw	r2,-24496(gp)
 2034b7c:	10803c0c 	andi	r2,r2,240
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 2034b80:	10803818 	cmpnei	r2,r2,224
 2034b84:	1000081e 	bne	r2,zero,2034ba8 <tcp_input+0x128>
      ip_addr_ismulticast(&current_iphdr_dest)) {
    TCP_STATS_INC(tcp.proterr);
 2034b88:	008085f4 	movhi	r2,535
 2034b8c:	10a86704 	addi	r2,r2,-24164
 2034b90:	10805017 	ldw	r2,320(r2)
 2034b94:	10c00044 	addi	r3,r2,1
 2034b98:	008085f4 	movhi	r2,535
 2034b9c:	10a86704 	addi	r2,r2,-24164
 2034ba0:	10c05015 	stw	r3,320(r2)
    goto dropped;
 2034ba4:	00034506 	br	20358bc <tcp_input+0xe3c>
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len) != 0) {
 2034ba8:	e0bffe17 	ldw	r2,-8(fp)
 2034bac:	1080020b 	ldhu	r2,8(r2)
    goto dropped;
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 2034bb0:	10bfffcc 	andi	r2,r2,65535
 2034bb4:	d8800015 	stw	r2,0(sp)
 2034bb8:	01c00184 	movi	r7,6
 2034bbc:	d1a81404 	addi	r6,gp,-24496
 2034bc0:	d1681204 	addi	r5,gp,-24504
 2034bc4:	e13ffe17 	ldw	r4,-8(fp)
 2034bc8:	20315e80 	call	20315e8 <inet_chksum_pseudo>
 2034bcc:	10bfffcc 	andi	r2,r2,65535
 2034bd0:	10000826 	beq	r2,zero,2034bf4 <tcp_input+0x174>
        inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
      IP_PROTO_TCP, p->tot_len)));
#if TCP_DEBUG
    tcp_debug_print(tcphdr);
#endif /* TCP_DEBUG */
    TCP_STATS_INC(tcp.chkerr);
 2034bd4:	008085f4 	movhi	r2,535
 2034bd8:	10a86704 	addi	r2,r2,-24164
 2034bdc:	10804c17 	ldw	r2,304(r2)
 2034be0:	10c00044 	addi	r3,r2,1
 2034be4:	008085f4 	movhi	r2,535
 2034be8:	10a86704 	addi	r2,r2,-24164
 2034bec:	10c04c15 	stw	r3,304(r2)
    goto dropped;
 2034bf0:	00033206 	br	20358bc <tcp_input+0xe3c>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
 2034bf4:	d0a81917 	ldw	r2,-24476(gp)
 2034bf8:	10c00303 	ldbu	r3,12(r2)
 2034bfc:	10800343 	ldbu	r2,13(r2)
 2034c00:	1004923a 	slli	r2,r2,8
 2034c04:	10c4b03a 	or	r2,r2,r3
 2034c08:	10bfffcc 	andi	r2,r2,65535
 2034c0c:	1004d23a 	srli	r2,r2,8
 2034c10:	10ffffcc 	andi	r3,r2,65535
 2034c14:	d0a81917 	ldw	r2,-24476(gp)
 2034c18:	11000303 	ldbu	r4,12(r2)
 2034c1c:	10800343 	ldbu	r2,13(r2)
 2034c20:	1004923a 	slli	r2,r2,8
 2034c24:	1104b03a 	or	r2,r2,r4
 2034c28:	10bfffcc 	andi	r2,r2,65535
 2034c2c:	1004923a 	slli	r2,r2,8
 2034c30:	10bfffcc 	andi	r2,r2,65535
 2034c34:	1884b03a 	or	r2,r3,r2
 2034c38:	1005d33a 	srai	r2,r2,12
 2034c3c:	e0bffd45 	stb	r2,-11(fp)
  if(pbuf_header(p, -(hdrlen * 4))){
 2034c40:	e0bffd43 	ldbu	r2,-11(fp)
 2034c44:	10bfff24 	muli	r2,r2,-4
 2034c48:	10bfffcc 	andi	r2,r2,65535
 2034c4c:	10a0001c 	xori	r2,r2,32768
 2034c50:	10a00004 	addi	r2,r2,-32768
 2034c54:	100b883a 	mov	r5,r2
 2034c58:	e13ffe17 	ldw	r4,-8(fp)
 2034c5c:	201a8700 	call	201a870 <pbuf_header>
 2034c60:	10803fcc 	andi	r2,r2,255
 2034c64:	10000826 	beq	r2,zero,2034c88 <tcp_input+0x208>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
    TCP_STATS_INC(tcp.lenerr);
 2034c68:	008085f4 	movhi	r2,535
 2034c6c:	10a86704 	addi	r2,r2,-24164
 2034c70:	10804d17 	ldw	r2,308(r2)
 2034c74:	10c00044 	addi	r3,r2,1
 2034c78:	008085f4 	movhi	r2,535
 2034c7c:	10a86704 	addi	r2,r2,-24164
 2034c80:	10c04d15 	stw	r3,308(r2)
    goto dropped;
 2034c84:	00030d06 	br	20358bc <tcp_input+0xe3c>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 2034c88:	d0a81917 	ldw	r2,-24476(gp)
 2034c8c:	d0e81917 	ldw	r3,-24476(gp)
 2034c90:	19000003 	ldbu	r4,0(r3)
 2034c94:	18c00043 	ldbu	r3,1(r3)
 2034c98:	1806923a 	slli	r3,r3,8
 2034c9c:	1906b03a 	or	r3,r3,r4
 2034ca0:	18ffffcc 	andi	r3,r3,65535
 2034ca4:	1806d23a 	srli	r3,r3,8
 2034ca8:	180b883a 	mov	r5,r3
 2034cac:	d0e81917 	ldw	r3,-24476(gp)
 2034cb0:	19000003 	ldbu	r4,0(r3)
 2034cb4:	18c00043 	ldbu	r3,1(r3)
 2034cb8:	1806923a 	slli	r3,r3,8
 2034cbc:	1906b03a 	or	r3,r3,r4
 2034cc0:	18ffffcc 	andi	r3,r3,65535
 2034cc4:	1806923a 	slli	r3,r3,8
 2034cc8:	28c6b03a 	or	r3,r5,r3
 2034ccc:	180d883a 	mov	r6,r3
 2034cd0:	30ffffcc 	andi	r3,r6,65535
 2034cd4:	19403fcc 	andi	r5,r3,255
 2034cd8:	10c00003 	ldbu	r3,0(r2)
 2034cdc:	1806703a 	and	r3,r3,zero
 2034ce0:	1809883a 	mov	r4,r3
 2034ce4:	2807883a 	mov	r3,r5
 2034ce8:	20c6b03a 	or	r3,r4,r3
 2034cec:	10c00005 	stb	r3,0(r2)
 2034cf0:	30ffffcc 	andi	r3,r6,65535
 2034cf4:	1806d23a 	srli	r3,r3,8
 2034cf8:	197fffcc 	andi	r5,r3,65535
 2034cfc:	10c00043 	ldbu	r3,1(r2)
 2034d00:	1806703a 	and	r3,r3,zero
 2034d04:	1809883a 	mov	r4,r3
 2034d08:	2807883a 	mov	r3,r5
 2034d0c:	20c6b03a 	or	r3,r4,r3
 2034d10:	10c00045 	stb	r3,1(r2)
  tcphdr->dest = ntohs(tcphdr->dest);
 2034d14:	d0a81917 	ldw	r2,-24476(gp)
 2034d18:	d0e81917 	ldw	r3,-24476(gp)
 2034d1c:	19000083 	ldbu	r4,2(r3)
 2034d20:	18c000c3 	ldbu	r3,3(r3)
 2034d24:	1806923a 	slli	r3,r3,8
 2034d28:	1906b03a 	or	r3,r3,r4
 2034d2c:	18ffffcc 	andi	r3,r3,65535
 2034d30:	1806d23a 	srli	r3,r3,8
 2034d34:	180b883a 	mov	r5,r3
 2034d38:	d0e81917 	ldw	r3,-24476(gp)
 2034d3c:	19000083 	ldbu	r4,2(r3)
 2034d40:	18c000c3 	ldbu	r3,3(r3)
 2034d44:	1806923a 	slli	r3,r3,8
 2034d48:	1906b03a 	or	r3,r3,r4
 2034d4c:	18ffffcc 	andi	r3,r3,65535
 2034d50:	1806923a 	slli	r3,r3,8
 2034d54:	28c6b03a 	or	r3,r5,r3
 2034d58:	180d883a 	mov	r6,r3
 2034d5c:	30ffffcc 	andi	r3,r6,65535
 2034d60:	19403fcc 	andi	r5,r3,255
 2034d64:	10c00083 	ldbu	r3,2(r2)
 2034d68:	1806703a 	and	r3,r3,zero
 2034d6c:	1809883a 	mov	r4,r3
 2034d70:	2807883a 	mov	r3,r5
 2034d74:	20c6b03a 	or	r3,r4,r3
 2034d78:	10c00085 	stb	r3,2(r2)
 2034d7c:	30ffffcc 	andi	r3,r6,65535
 2034d80:	1806d23a 	srli	r3,r3,8
 2034d84:	197fffcc 	andi	r5,r3,65535
 2034d88:	10c000c3 	ldbu	r3,3(r2)
 2034d8c:	1806703a 	and	r3,r3,zero
 2034d90:	1809883a 	mov	r4,r3
 2034d94:	2807883a 	mov	r3,r5
 2034d98:	20c6b03a 	or	r3,r4,r3
 2034d9c:	10c000c5 	stb	r3,3(r2)
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 2034da0:	d0a81917 	ldw	r2,-24476(gp)
 2034da4:	d0e81917 	ldw	r3,-24476(gp)
 2034da8:	19000103 	ldbu	r4,4(r3)
 2034dac:	19400143 	ldbu	r5,5(r3)
 2034db0:	280a923a 	slli	r5,r5,8
 2034db4:	2908b03a 	or	r4,r5,r4
 2034db8:	19400183 	ldbu	r5,6(r3)
 2034dbc:	280a943a 	slli	r5,r5,16
 2034dc0:	2908b03a 	or	r4,r5,r4
 2034dc4:	18c001c3 	ldbu	r3,7(r3)
 2034dc8:	1806963a 	slli	r3,r3,24
 2034dcc:	1906b03a 	or	r3,r3,r4
 2034dd0:	1808d63a 	srli	r4,r3,24
 2034dd4:	d0e81917 	ldw	r3,-24476(gp)
 2034dd8:	19400103 	ldbu	r5,4(r3)
 2034ddc:	19800143 	ldbu	r6,5(r3)
 2034de0:	300c923a 	slli	r6,r6,8
 2034de4:	314ab03a 	or	r5,r6,r5
 2034de8:	19800183 	ldbu	r6,6(r3)
 2034dec:	300c943a 	slli	r6,r6,16
 2034df0:	314ab03a 	or	r5,r6,r5
 2034df4:	18c001c3 	ldbu	r3,7(r3)
 2034df8:	1806963a 	slli	r3,r3,24
 2034dfc:	1946b03a 	or	r3,r3,r5
 2034e00:	1806d23a 	srli	r3,r3,8
 2034e04:	18ffc00c 	andi	r3,r3,65280
 2034e08:	20c8b03a 	or	r4,r4,r3
 2034e0c:	d0e81917 	ldw	r3,-24476(gp)
 2034e10:	19400103 	ldbu	r5,4(r3)
 2034e14:	19800143 	ldbu	r6,5(r3)
 2034e18:	300c923a 	slli	r6,r6,8
 2034e1c:	314ab03a 	or	r5,r6,r5
 2034e20:	19800183 	ldbu	r6,6(r3)
 2034e24:	300c943a 	slli	r6,r6,16
 2034e28:	314ab03a 	or	r5,r6,r5
 2034e2c:	18c001c3 	ldbu	r3,7(r3)
 2034e30:	1806963a 	slli	r3,r3,24
 2034e34:	1946b03a 	or	r3,r3,r5
 2034e38:	18ffc00c 	andi	r3,r3,65280
 2034e3c:	1806923a 	slli	r3,r3,8
 2034e40:	20c8b03a 	or	r4,r4,r3
 2034e44:	d0e81917 	ldw	r3,-24476(gp)
 2034e48:	19400103 	ldbu	r5,4(r3)
 2034e4c:	19800143 	ldbu	r6,5(r3)
 2034e50:	300c923a 	slli	r6,r6,8
 2034e54:	314ab03a 	or	r5,r6,r5
 2034e58:	19800183 	ldbu	r6,6(r3)
 2034e5c:	300c943a 	slli	r6,r6,16
 2034e60:	314ab03a 	or	r5,r6,r5
 2034e64:	18c001c3 	ldbu	r3,7(r3)
 2034e68:	1806963a 	slli	r3,r3,24
 2034e6c:	1946b03a 	or	r3,r3,r5
 2034e70:	1806963a 	slli	r3,r3,24
 2034e74:	20c6b03a 	or	r3,r4,r3
 2034e78:	19803fcc 	andi	r6,r3,255
 2034e7c:	11000103 	ldbu	r4,4(r2)
 2034e80:	2008703a 	and	r4,r4,zero
 2034e84:	200b883a 	mov	r5,r4
 2034e88:	3009883a 	mov	r4,r6
 2034e8c:	2908b03a 	or	r4,r5,r4
 2034e90:	11000105 	stb	r4,4(r2)
 2034e94:	1808d23a 	srli	r4,r3,8
 2034e98:	21803fcc 	andi	r6,r4,255
 2034e9c:	11000143 	ldbu	r4,5(r2)
 2034ea0:	2008703a 	and	r4,r4,zero
 2034ea4:	200b883a 	mov	r5,r4
 2034ea8:	3009883a 	mov	r4,r6
 2034eac:	2908b03a 	or	r4,r5,r4
 2034eb0:	11000145 	stb	r4,5(r2)
 2034eb4:	1808d43a 	srli	r4,r3,16
 2034eb8:	21803fcc 	andi	r6,r4,255
 2034ebc:	11000183 	ldbu	r4,6(r2)
 2034ec0:	2008703a 	and	r4,r4,zero
 2034ec4:	200b883a 	mov	r5,r4
 2034ec8:	3009883a 	mov	r4,r6
 2034ecc:	2908b03a 	or	r4,r5,r4
 2034ed0:	11000185 	stb	r4,6(r2)
 2034ed4:	180ad63a 	srli	r5,r3,24
 2034ed8:	10c001c3 	ldbu	r3,7(r2)
 2034edc:	1806703a 	and	r3,r3,zero
 2034ee0:	1809883a 	mov	r4,r3
 2034ee4:	2807883a 	mov	r3,r5
 2034ee8:	20c6b03a 	or	r3,r4,r3
 2034eec:	10c001c5 	stb	r3,7(r2)
 2034ef0:	10c00103 	ldbu	r3,4(r2)
 2034ef4:	11000143 	ldbu	r4,5(r2)
 2034ef8:	2008923a 	slli	r4,r4,8
 2034efc:	20c6b03a 	or	r3,r4,r3
 2034f00:	11000183 	ldbu	r4,6(r2)
 2034f04:	2008943a 	slli	r4,r4,16
 2034f08:	20c6b03a 	or	r3,r4,r3
 2034f0c:	108001c3 	ldbu	r2,7(r2)
 2034f10:	1004963a 	slli	r2,r2,24
 2034f14:	10c4b03a 	or	r2,r2,r3
 2034f18:	d0a81b15 	stw	r2,-24468(gp)
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 2034f1c:	d0a81917 	ldw	r2,-24476(gp)
 2034f20:	d0e81917 	ldw	r3,-24476(gp)
 2034f24:	19000203 	ldbu	r4,8(r3)
 2034f28:	19400243 	ldbu	r5,9(r3)
 2034f2c:	280a923a 	slli	r5,r5,8
 2034f30:	2908b03a 	or	r4,r5,r4
 2034f34:	19400283 	ldbu	r5,10(r3)
 2034f38:	280a943a 	slli	r5,r5,16
 2034f3c:	2908b03a 	or	r4,r5,r4
 2034f40:	18c002c3 	ldbu	r3,11(r3)
 2034f44:	1806963a 	slli	r3,r3,24
 2034f48:	1906b03a 	or	r3,r3,r4
 2034f4c:	1808d63a 	srli	r4,r3,24
 2034f50:	d0e81917 	ldw	r3,-24476(gp)
 2034f54:	19400203 	ldbu	r5,8(r3)
 2034f58:	19800243 	ldbu	r6,9(r3)
 2034f5c:	300c923a 	slli	r6,r6,8
 2034f60:	314ab03a 	or	r5,r6,r5
 2034f64:	19800283 	ldbu	r6,10(r3)
 2034f68:	300c943a 	slli	r6,r6,16
 2034f6c:	314ab03a 	or	r5,r6,r5
 2034f70:	18c002c3 	ldbu	r3,11(r3)
 2034f74:	1806963a 	slli	r3,r3,24
 2034f78:	1946b03a 	or	r3,r3,r5
 2034f7c:	1806d23a 	srli	r3,r3,8
 2034f80:	18ffc00c 	andi	r3,r3,65280
 2034f84:	20c8b03a 	or	r4,r4,r3
 2034f88:	d0e81917 	ldw	r3,-24476(gp)
 2034f8c:	19400203 	ldbu	r5,8(r3)
 2034f90:	19800243 	ldbu	r6,9(r3)
 2034f94:	300c923a 	slli	r6,r6,8
 2034f98:	314ab03a 	or	r5,r6,r5
 2034f9c:	19800283 	ldbu	r6,10(r3)
 2034fa0:	300c943a 	slli	r6,r6,16
 2034fa4:	314ab03a 	or	r5,r6,r5
 2034fa8:	18c002c3 	ldbu	r3,11(r3)
 2034fac:	1806963a 	slli	r3,r3,24
 2034fb0:	1946b03a 	or	r3,r3,r5
 2034fb4:	18ffc00c 	andi	r3,r3,65280
 2034fb8:	1806923a 	slli	r3,r3,8
 2034fbc:	20c8b03a 	or	r4,r4,r3
 2034fc0:	d0e81917 	ldw	r3,-24476(gp)
 2034fc4:	19400203 	ldbu	r5,8(r3)
 2034fc8:	19800243 	ldbu	r6,9(r3)
 2034fcc:	300c923a 	slli	r6,r6,8
 2034fd0:	314ab03a 	or	r5,r6,r5
 2034fd4:	19800283 	ldbu	r6,10(r3)
 2034fd8:	300c943a 	slli	r6,r6,16
 2034fdc:	314ab03a 	or	r5,r6,r5
 2034fe0:	18c002c3 	ldbu	r3,11(r3)
 2034fe4:	1806963a 	slli	r3,r3,24
 2034fe8:	1946b03a 	or	r3,r3,r5
 2034fec:	1806963a 	slli	r3,r3,24
 2034ff0:	20c6b03a 	or	r3,r4,r3
 2034ff4:	19803fcc 	andi	r6,r3,255
 2034ff8:	11000203 	ldbu	r4,8(r2)
 2034ffc:	2008703a 	and	r4,r4,zero
 2035000:	200b883a 	mov	r5,r4
 2035004:	3009883a 	mov	r4,r6
 2035008:	2908b03a 	or	r4,r5,r4
 203500c:	11000205 	stb	r4,8(r2)
 2035010:	1808d23a 	srli	r4,r3,8
 2035014:	21803fcc 	andi	r6,r4,255
 2035018:	11000243 	ldbu	r4,9(r2)
 203501c:	2008703a 	and	r4,r4,zero
 2035020:	200b883a 	mov	r5,r4
 2035024:	3009883a 	mov	r4,r6
 2035028:	2908b03a 	or	r4,r5,r4
 203502c:	11000245 	stb	r4,9(r2)
 2035030:	1808d43a 	srli	r4,r3,16
 2035034:	21803fcc 	andi	r6,r4,255
 2035038:	11000283 	ldbu	r4,10(r2)
 203503c:	2008703a 	and	r4,r4,zero
 2035040:	200b883a 	mov	r5,r4
 2035044:	3009883a 	mov	r4,r6
 2035048:	2908b03a 	or	r4,r5,r4
 203504c:	11000285 	stb	r4,10(r2)
 2035050:	180ad63a 	srli	r5,r3,24
 2035054:	10c002c3 	ldbu	r3,11(r2)
 2035058:	1806703a 	and	r3,r3,zero
 203505c:	1809883a 	mov	r4,r3
 2035060:	2807883a 	mov	r3,r5
 2035064:	20c6b03a 	or	r3,r4,r3
 2035068:	10c002c5 	stb	r3,11(r2)
 203506c:	10c00203 	ldbu	r3,8(r2)
 2035070:	11000243 	ldbu	r4,9(r2)
 2035074:	2008923a 	slli	r4,r4,8
 2035078:	20c6b03a 	or	r3,r4,r3
 203507c:	11000283 	ldbu	r4,10(r2)
 2035080:	2008943a 	slli	r4,r4,16
 2035084:	20c6b03a 	or	r3,r4,r3
 2035088:	108002c3 	ldbu	r2,11(r2)
 203508c:	1004963a 	slli	r2,r2,24
 2035090:	10c4b03a 	or	r2,r2,r3
 2035094:	d0a81c15 	stw	r2,-24464(gp)
  tcphdr->wnd = ntohs(tcphdr->wnd);
 2035098:	d0a81917 	ldw	r2,-24476(gp)
 203509c:	d0e81917 	ldw	r3,-24476(gp)
 20350a0:	19000383 	ldbu	r4,14(r3)
 20350a4:	18c003c3 	ldbu	r3,15(r3)
 20350a8:	1806923a 	slli	r3,r3,8
 20350ac:	1906b03a 	or	r3,r3,r4
 20350b0:	18ffffcc 	andi	r3,r3,65535
 20350b4:	1806d23a 	srli	r3,r3,8
 20350b8:	180b883a 	mov	r5,r3
 20350bc:	d0e81917 	ldw	r3,-24476(gp)
 20350c0:	19000383 	ldbu	r4,14(r3)
 20350c4:	18c003c3 	ldbu	r3,15(r3)
 20350c8:	1806923a 	slli	r3,r3,8
 20350cc:	1906b03a 	or	r3,r3,r4
 20350d0:	18ffffcc 	andi	r3,r3,65535
 20350d4:	1806923a 	slli	r3,r3,8
 20350d8:	28c6b03a 	or	r3,r5,r3
 20350dc:	180d883a 	mov	r6,r3
 20350e0:	30ffffcc 	andi	r3,r6,65535
 20350e4:	19403fcc 	andi	r5,r3,255
 20350e8:	10c00383 	ldbu	r3,14(r2)
 20350ec:	1806703a 	and	r3,r3,zero
 20350f0:	1809883a 	mov	r4,r3
 20350f4:	2807883a 	mov	r3,r5
 20350f8:	20c6b03a 	or	r3,r4,r3
 20350fc:	10c00385 	stb	r3,14(r2)
 2035100:	30ffffcc 	andi	r3,r6,65535
 2035104:	1806d23a 	srli	r3,r3,8
 2035108:	197fffcc 	andi	r5,r3,65535
 203510c:	10c003c3 	ldbu	r3,15(r2)
 2035110:	1806703a 	and	r3,r3,zero
 2035114:	1809883a 	mov	r4,r3
 2035118:	2807883a 	mov	r3,r5
 203511c:	20c6b03a 	or	r3,r4,r3
 2035120:	10c003c5 	stb	r3,15(r2)

  flags = TCPH_FLAGS(tcphdr);
 2035124:	d0a81917 	ldw	r2,-24476(gp)
 2035128:	10c00303 	ldbu	r3,12(r2)
 203512c:	10800343 	ldbu	r2,13(r2)
 2035130:	1004923a 	slli	r2,r2,8
 2035134:	10c4b03a 	or	r2,r2,r3
 2035138:	10bfffcc 	andi	r2,r2,65535
 203513c:	1004d23a 	srli	r2,r2,8
 2035140:	1009883a 	mov	r4,r2
 2035144:	d0a81917 	ldw	r2,-24476(gp)
 2035148:	10c00303 	ldbu	r3,12(r2)
 203514c:	10800343 	ldbu	r2,13(r2)
 2035150:	1004923a 	slli	r2,r2,8
 2035154:	10c4b03a 	or	r2,r2,r3
 2035158:	10bfffcc 	andi	r2,r2,65535
 203515c:	1004923a 	slli	r2,r2,8
 2035160:	2084b03a 	or	r2,r4,r2
 2035164:	10800fcc 	andi	r2,r2,63
 2035168:	d0a81d05 	stb	r2,-24460(gp)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 203516c:	e0bffe17 	ldw	r2,-8(fp)
 2035170:	10c0020b 	ldhu	r3,8(r2)
 2035174:	d0a81d03 	ldbu	r2,-24460(gp)
 2035178:	10803fcc 	andi	r2,r2,255
 203517c:	108000cc 	andi	r2,r2,3
 2035180:	1004c03a 	cmpne	r2,r2,zero
 2035184:	10803fcc 	andi	r2,r2,255
 2035188:	1885883a 	add	r2,r3,r2
 203518c:	d0a81d8d 	sth	r2,-24458(gp)

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 2035190:	e03ff915 	stw	zero,-28(fp)

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 2035194:	d0a7f717 	ldw	r2,-24612(gp)
 2035198:	e0bff815 	stw	r2,-32(fp)
 203519c:	00002d06 	br	2035254 <tcp_input+0x7d4>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 20351a0:	e0bff817 	ldw	r2,-32(fp)
 20351a4:	1100080b 	ldhu	r4,32(r2)
 20351a8:	d0a81917 	ldw	r2,-24476(gp)
 20351ac:	10c00003 	ldbu	r3,0(r2)
 20351b0:	10800043 	ldbu	r2,1(r2)
 20351b4:	1004923a 	slli	r2,r2,8
 20351b8:	10c4b03a 	or	r2,r2,r3
 20351bc:	20ffffcc 	andi	r3,r4,65535
 20351c0:	10bfffcc 	andi	r2,r2,65535
 20351c4:	18801e1e 	bne	r3,r2,2035240 <tcp_input+0x7c0>
       pcb->local_port == tcphdr->dest &&
 20351c8:	e0bff817 	ldw	r2,-32(fp)
 20351cc:	1100078b 	ldhu	r4,30(r2)
 20351d0:	d0a81917 	ldw	r2,-24476(gp)
 20351d4:	10c00083 	ldbu	r3,2(r2)
 20351d8:	108000c3 	ldbu	r2,3(r2)
 20351dc:	1004923a 	slli	r2,r2,8
 20351e0:	10c4b03a 	or	r2,r2,r3
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 20351e4:	20ffffcc 	andi	r3,r4,65535
 20351e8:	10bfffcc 	andi	r2,r2,65535
 20351ec:	1880141e 	bne	r3,r2,2035240 <tcp_input+0x7c0>
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 20351f0:	e0bff817 	ldw	r2,-32(fp)
 20351f4:	10c00117 	ldw	r3,4(r2)
 20351f8:	d0a81217 	ldw	r2,-24504(gp)
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
 20351fc:	1880101e 	bne	r3,r2,2035240 <tcp_input+0x7c0>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 2035200:	e0bff817 	ldw	r2,-32(fp)
 2035204:	10c00017 	ldw	r3,0(r2)
 2035208:	d0a81417 	ldw	r2,-24496(gp)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
       pcb->local_port == tcphdr->dest &&
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 203520c:	18800c1e 	bne	r3,r2,2035240 <tcp_input+0x7c0>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 2035210:	e0bff917 	ldw	r2,-28(fp)
 2035214:	10001226 	beq	r2,zero,2035260 <tcp_input+0x7e0>
        prev->next = pcb->next;
 2035218:	e0bff817 	ldw	r2,-32(fp)
 203521c:	10c00317 	ldw	r3,12(r2)
 2035220:	e0bff917 	ldw	r2,-28(fp)
 2035224:	10c00315 	stw	r3,12(r2)
        pcb->next = tcp_active_pcbs;
 2035228:	d0e7f717 	ldw	r3,-24612(gp)
 203522c:	e0bff817 	ldw	r2,-32(fp)
 2035230:	10c00315 	stw	r3,12(r2)
        tcp_active_pcbs = pcb;
 2035234:	e0bff817 	ldw	r2,-32(fp)
 2035238:	d0a7f715 	stw	r2,-24612(gp)
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 203523c:	00000806 	br	2035260 <tcp_input+0x7e0>
    }
    prev = pcb;
 2035240:	e0bff817 	ldw	r2,-32(fp)
 2035244:	e0bff915 	stw	r2,-28(fp)
  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 2035248:	e0bff817 	ldw	r2,-32(fp)
 203524c:	10800317 	ldw	r2,12(r2)
 2035250:	e0bff815 	stw	r2,-32(fp)
 2035254:	e0bff817 	ldw	r2,-32(fp)
 2035258:	103fd11e 	bne	r2,zero,20351a0 <__alt_mem_mem_0+0xfd0151a0>
 203525c:	00000106 	br	2035264 <tcp_input+0x7e4>
        prev->next = pcb->next;
        pcb->next = tcp_active_pcbs;
        tcp_active_pcbs = pcb;
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
 2035260:	0001883a 	nop
    }
    prev = pcb;
  }

  if (pcb == NULL) {
 2035264:	e0bff817 	ldw	r2,-32(fp)
 2035268:	1000651e 	bne	r2,zero,2035400 <tcp_input+0x980>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 203526c:	d0a7fc17 	ldw	r2,-24592(gp)
 2035270:	e0bff815 	stw	r2,-32(fp)
 2035274:	00002406 	br	2035308 <tcp_input+0x888>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 2035278:	e0bff817 	ldw	r2,-32(fp)
 203527c:	1100080b 	ldhu	r4,32(r2)
 2035280:	d0a81917 	ldw	r2,-24476(gp)
 2035284:	10c00003 	ldbu	r3,0(r2)
 2035288:	10800043 	ldbu	r2,1(r2)
 203528c:	1004923a 	slli	r2,r2,8
 2035290:	10c4b03a 	or	r2,r2,r3
 2035294:	20ffffcc 	andi	r3,r4,65535
 2035298:	10bfffcc 	andi	r2,r2,65535
 203529c:	1880171e 	bne	r3,r2,20352fc <tcp_input+0x87c>
         pcb->local_port == tcphdr->dest &&
 20352a0:	e0bff817 	ldw	r2,-32(fp)
 20352a4:	1100078b 	ldhu	r4,30(r2)
 20352a8:	d0a81917 	ldw	r2,-24476(gp)
 20352ac:	10c00083 	ldbu	r3,2(r2)
 20352b0:	108000c3 	ldbu	r2,3(r2)
 20352b4:	1004923a 	slli	r2,r2,8
 20352b8:	10c4b03a 	or	r2,r2,r3
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 20352bc:	20ffffcc 	andi	r3,r4,65535
 20352c0:	10bfffcc 	andi	r2,r2,65535
 20352c4:	18800d1e 	bne	r3,r2,20352fc <tcp_input+0x87c>
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 20352c8:	e0bff817 	ldw	r2,-32(fp)
 20352cc:	10c00117 	ldw	r3,4(r2)
 20352d0:	d0a81217 	ldw	r2,-24504(gp)
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
 20352d4:	1880091e 	bne	r3,r2,20352fc <tcp_input+0x87c>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 20352d8:	e0bff817 	ldw	r2,-32(fp)
 20352dc:	10c00017 	ldw	r3,0(r2)
 20352e0:	d0a81417 	ldw	r2,-24496(gp)
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
         pcb->local_port == tcphdr->dest &&
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 20352e4:	1880051e 	bne	r3,r2,20352fc <tcp_input+0x87c>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 20352e8:	e13ff817 	ldw	r4,-32(fp)
 20352ec:	2035be40 	call	2035be4 <tcp_timewait_input>
        pbuf_free(p);
 20352f0:	e13ffe17 	ldw	r4,-8(fp)
 20352f4:	201aa200 	call	201aa20 <pbuf_free>
        return;
 20352f8:	00017b06 	br	20358e8 <tcp_input+0xe68>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 20352fc:	e0bff817 	ldw	r2,-32(fp)
 2035300:	10800317 	ldw	r2,12(r2)
 2035304:	e0bff815 	stw	r2,-32(fp)
 2035308:	e0bff817 	ldw	r2,-32(fp)
 203530c:	103fda1e 	bne	r2,zero,2035278 <__alt_mem_mem_0+0xfd015278>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 2035310:	e03ff915 	stw	zero,-28(fp)
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 2035314:	d0a7f917 	ldw	r2,-24604(gp)
 2035318:	e0bffa15 	stw	r2,-24(fp)
 203531c:	00001c06 	br	2035390 <tcp_input+0x910>
      if (lpcb->local_port == tcphdr->dest) {
 2035320:	e0bffa17 	ldw	r2,-24(fp)
 2035324:	1100078b 	ldhu	r4,30(r2)
 2035328:	d0a81917 	ldw	r2,-24476(gp)
 203532c:	10c00083 	ldbu	r3,2(r2)
 2035330:	108000c3 	ldbu	r2,3(r2)
 2035334:	1004923a 	slli	r2,r2,8
 2035338:	10c4b03a 	or	r2,r2,r3
 203533c:	20ffffcc 	andi	r3,r4,65535
 2035340:	10bfffcc 	andi	r2,r2,65535
 2035344:	18800d1e 	bne	r3,r2,203537c <tcp_input+0x8fc>
#if SO_REUSE
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest)) {
 2035348:	e0bffa17 	ldw	r2,-24(fp)
 203534c:	10c00017 	ldw	r3,0(r2)
 2035350:	d0a81417 	ldw	r2,-24496(gp)
 2035354:	18801126 	beq	r3,r2,203539c <tcp_input+0x91c>
          /* found an exact match */
          break;
        } else if(ip_addr_isany(&(lpcb->local_ip))) {
 2035358:	e0bffa17 	ldw	r2,-24(fp)
 203535c:	10000326 	beq	r2,zero,203536c <tcp_input+0x8ec>
 2035360:	e0bffa17 	ldw	r2,-24(fp)
 2035364:	10800017 	ldw	r2,0(r2)
 2035368:	1000041e 	bne	r2,zero,203537c <tcp_input+0x8fc>
          /* found an ANY-match */
          lpcb_any = lpcb;
 203536c:	e0bffa17 	ldw	r2,-24(fp)
 2035370:	e0bffc15 	stw	r2,-16(fp)
          lpcb_prev = prev;
 2035374:	e0bff917 	ldw	r2,-28(fp)
 2035378:	e0bffb15 	stw	r2,-20(fp)
          /* found a match */
          break;
        }
#endif /* SO_REUSE */
      }
      prev = (struct tcp_pcb *)lpcb;
 203537c:	e0bffa17 	ldw	r2,-24(fp)
 2035380:	e0bff915 	stw	r2,-28(fp)
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 2035384:	e0bffa17 	ldw	r2,-24(fp)
 2035388:	10800317 	ldw	r2,12(r2)
 203538c:	e0bffa15 	stw	r2,-24(fp)
 2035390:	e0bffa17 	ldw	r2,-24(fp)
 2035394:	103fe21e 	bne	r2,zero,2035320 <__alt_mem_mem_0+0xfd015320>
 2035398:	00000106 	br	20353a0 <tcp_input+0x920>
      if (lpcb->local_port == tcphdr->dest) {
#if SO_REUSE
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest)) {
          /* found an exact match */
          break;
 203539c:	0001883a 	nop
      }
      prev = (struct tcp_pcb *)lpcb;
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
 20353a0:	e0bffa17 	ldw	r2,-24(fp)
 20353a4:	1000041e 	bne	r2,zero,20353b8 <tcp_input+0x938>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
 20353a8:	e0bffc17 	ldw	r2,-16(fp)
 20353ac:	e0bffa15 	stw	r2,-24(fp)
      prev = lpcb_prev;
 20353b0:	e0bffb17 	ldw	r2,-20(fp)
 20353b4:	e0bff915 	stw	r2,-28(fp)
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 20353b8:	e0bffa17 	ldw	r2,-24(fp)
 20353bc:	10001026 	beq	r2,zero,2035400 <tcp_input+0x980>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 20353c0:	e0bff917 	ldw	r2,-28(fp)
 20353c4:	10000926 	beq	r2,zero,20353ec <tcp_input+0x96c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 20353c8:	e0bffa17 	ldw	r2,-24(fp)
 20353cc:	10c00317 	ldw	r3,12(r2)
 20353d0:	e0bff917 	ldw	r2,-28(fp)
 20353d4:	10c00315 	stw	r3,12(r2)
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 20353d8:	d0e7f917 	ldw	r3,-24604(gp)
 20353dc:	e0bffa17 	ldw	r2,-24(fp)
 20353e0:	10c00315 	stw	r3,12(r2)
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 20353e4:	e0bffa17 	ldw	r2,-24(fp)
 20353e8:	d0a7f915 	stw	r2,-24604(gp)
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 20353ec:	e13ffa17 	ldw	r4,-24(fp)
 20353f0:	20358fc0 	call	20358fc <tcp_listen_input>
      pbuf_free(p);
 20353f4:	e13ffe17 	ldw	r4,-8(fp)
 20353f8:	201aa200 	call	201aa20 <pbuf_free>
      return;
 20353fc:	00013a06 	br	20358e8 <tcp_input+0xe68>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 2035400:	e0bff817 	ldw	r2,-32(fp)
 2035404:	1000f226 	beq	r2,zero,20357d0 <tcp_input+0xd50>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 2035408:	008085b4 	movhi	r2,534
 203540c:	10883604 	addi	r2,r2,8408
 2035410:	10000015 	stw	zero,0(r2)
    inseg.len = p->tot_len;
 2035414:	e0bffe17 	ldw	r2,-8(fp)
 2035418:	10c0020b 	ldhu	r3,8(r2)
 203541c:	008085b4 	movhi	r2,534
 2035420:	10883604 	addi	r2,r2,8408
 2035424:	10c0020d 	sth	r3,8(r2)
    inseg.p = p;
 2035428:	008085b4 	movhi	r2,534
 203542c:	10883604 	addi	r2,r2,8408
 2035430:	e0fffe17 	ldw	r3,-8(fp)
 2035434:	10c00115 	stw	r3,4(r2)
    inseg.tcphdr = tcphdr;
 2035438:	d0e81917 	ldw	r3,-24476(gp)
 203543c:	008085b4 	movhi	r2,534
 2035440:	10883604 	addi	r2,r2,8408
 2035444:	10c00415 	stw	r3,16(r2)

    recv_data = NULL;
 2035448:	d0281f15 	stw	zero,-24452(gp)
    recv_flags = 0;
 203544c:	d0281e05 	stb	zero,-24456(gp)

    if (flags & TCP_PSH) {
 2035450:	d0a81d03 	ldbu	r2,-24460(gp)
 2035454:	10803fcc 	andi	r2,r2,255
 2035458:	1080020c 	andi	r2,r2,8
 203545c:	10000626 	beq	r2,zero,2035478 <tcp_input+0x9f8>
      p->flags |= PBUF_FLAG_PUSH;
 2035460:	e0bffe17 	ldw	r2,-8(fp)
 2035464:	10800343 	ldbu	r2,13(r2)
 2035468:	10800054 	ori	r2,r2,1
 203546c:	1007883a 	mov	r3,r2
 2035470:	e0bffe17 	ldw	r2,-8(fp)
 2035474:	10c00345 	stb	r3,13(r2)
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 2035478:	e0bff817 	ldw	r2,-32(fp)
 203547c:	10801f17 	ldw	r2,124(r2)
 2035480:	10001526 	beq	r2,zero,20354d8 <tcp_input+0xa58>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 2035484:	e13ff817 	ldw	r4,-32(fp)
 2035488:	201d1440 	call	201d144 <tcp_process_refused_data>
 203548c:	10803fcc 	andi	r2,r2,255
 2035490:	1080201c 	xori	r2,r2,128
 2035494:	10bfe004 	addi	r2,r2,-128
 2035498:	10bffda0 	cmpeqi	r2,r2,-10
 203549c:	1000061e 	bne	r2,zero,20354b8 <tcp_input+0xa38>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 20354a0:	e0bff817 	ldw	r2,-32(fp)
 20354a4:	10801f17 	ldw	r2,124(r2)
      p->flags |= PBUF_FLAG_PUSH;
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 20354a8:	10000b26 	beq	r2,zero,20354d8 <tcp_input+0xa58>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 20354ac:	d0a81d8b 	ldhu	r2,-24458(gp)
 20354b0:	10bfffcc 	andi	r2,r2,65535
 20354b4:	10000826 	beq	r2,zero,20354d8 <tcp_input+0xa58>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        TCP_STATS_INC(tcp.drop);
 20354b8:	008085f4 	movhi	r2,535
 20354bc:	10a86704 	addi	r2,r2,-24164
 20354c0:	10804b17 	ldw	r2,300(r2)
 20354c4:	10c00044 	addi	r3,r2,1
 20354c8:	008085f4 	movhi	r2,535
 20354cc:	10a86704 	addi	r2,r2,-24164
 20354d0:	10c04b15 	stw	r3,300(r2)
        snmp_inc_tcpinerrs();
        goto aborted;
 20354d4:	0000af06 	br	2035794 <tcp_input+0xd14>
      }
    }
    tcp_input_pcb = pcb;
 20354d8:	e0bff817 	ldw	r2,-32(fp)
 20354dc:	d0a82015 	stw	r2,-24448(gp)
    err = tcp_process(pcb);
 20354e0:	e13ff817 	ldw	r4,-32(fp)
 20354e4:	2035d200 	call	2035d20 <tcp_process>
 20354e8:	e0bffd05 	stb	r2,-12(fp)
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 20354ec:	e0bffd07 	ldb	r2,-12(fp)
 20354f0:	10bffda0 	cmpeqi	r2,r2,-10
 20354f4:	1000a71e 	bne	r2,zero,2035794 <tcp_input+0xd14>
      if (recv_flags & TF_RESET) {
 20354f8:	d0a81e03 	ldbu	r2,-24456(gp)
 20354fc:	10803fcc 	andi	r2,r2,255
 2035500:	1080020c 	andi	r2,r2,8
 2035504:	10001126 	beq	r2,zero,203554c <tcp_input+0xacc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 2035508:	e0bff817 	ldw	r2,-32(fp)
 203550c:	10802417 	ldw	r2,144(r2)
 2035510:	10000726 	beq	r2,zero,2035530 <tcp_input+0xab0>
 2035514:	e0bff817 	ldw	r2,-32(fp)
 2035518:	10802417 	ldw	r2,144(r2)
 203551c:	e0fff817 	ldw	r3,-32(fp)
 2035520:	18c00417 	ldw	r3,16(r3)
 2035524:	017ffd44 	movi	r5,-11
 2035528:	1809883a 	mov	r4,r3
 203552c:	103ee83a 	callr	r2
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 2035530:	e17ff817 	ldw	r5,-32(fp)
 2035534:	d127f704 	addi	r4,gp,-24612
 2035538:	201dab40 	call	201dab4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 203553c:	e17ff817 	ldw	r5,-32(fp)
 2035540:	01000084 	movi	r4,2
 2035544:	20344ac0 	call	20344ac <memp_free>
 2035548:	00009206 	br	2035794 <tcp_input+0xd14>
      } else if (recv_flags & TF_CLOSED) {
 203554c:	d0a81e03 	ldbu	r2,-24456(gp)
 2035550:	10803fcc 	andi	r2,r2,255
 2035554:	1080040c 	andi	r2,r2,16
 2035558:	10001626 	beq	r2,zero,20355b4 <tcp_input+0xb34>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
 203555c:	e0bff817 	ldw	r2,-32(fp)
 2035560:	10800883 	ldbu	r2,34(r2)
 2035564:	10803fcc 	andi	r2,r2,255
 2035568:	1080040c 	andi	r2,r2,16
 203556c:	10000a1e 	bne	r2,zero,2035598 <tcp_input+0xb18>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 2035570:	e0bff817 	ldw	r2,-32(fp)
 2035574:	10802417 	ldw	r2,144(r2)
 2035578:	10000726 	beq	r2,zero,2035598 <tcp_input+0xb18>
 203557c:	e0bff817 	ldw	r2,-32(fp)
 2035580:	10802417 	ldw	r2,144(r2)
 2035584:	e0fff817 	ldw	r3,-32(fp)
 2035588:	18c00417 	ldw	r3,16(r3)
 203558c:	017ffd04 	movi	r5,-12
 2035590:	1809883a 	mov	r4,r3
 2035594:	103ee83a 	callr	r2
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 2035598:	e17ff817 	ldw	r5,-32(fp)
 203559c:	d127f704 	addi	r4,gp,-24612
 20355a0:	201dab40 	call	201dab4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 20355a4:	e17ff817 	ldw	r5,-32(fp)
 20355a8:	01000084 	movi	r4,2
 20355ac:	20344ac0 	call	20344ac <memp_free>
 20355b0:	00007806 	br	2035794 <tcp_input+0xd14>
      } else {
        err = ERR_OK;
 20355b4:	e03ffd05 	stb	zero,-12(fp)
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
 20355b8:	e0bff817 	ldw	r2,-32(fp)
 20355bc:	10801a0b 	ldhu	r2,104(r2)
 20355c0:	10bfffcc 	andi	r2,r2,65535
 20355c4:	10001326 	beq	r2,zero,2035614 <tcp_input+0xb94>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
 20355c8:	e0bff817 	ldw	r2,-32(fp)
 20355cc:	10802017 	ldw	r2,128(r2)
 20355d0:	10000c26 	beq	r2,zero,2035604 <tcp_input+0xb84>
 20355d4:	e0bff817 	ldw	r2,-32(fp)
 20355d8:	10802017 	ldw	r2,128(r2)
 20355dc:	e0fff817 	ldw	r3,-32(fp)
 20355e0:	19000417 	ldw	r4,16(r3)
 20355e4:	e0fff817 	ldw	r3,-32(fp)
 20355e8:	18c01a0b 	ldhu	r3,104(r3)
 20355ec:	18ffffcc 	andi	r3,r3,65535
 20355f0:	180d883a 	mov	r6,r3
 20355f4:	e17ff817 	ldw	r5,-32(fp)
 20355f8:	103ee83a 	callr	r2
 20355fc:	e0bffd05 	stb	r2,-12(fp)
 2035600:	00000106 	br	2035608 <tcp_input+0xb88>
 2035604:	e03ffd05 	stb	zero,-12(fp)
          if (err == ERR_ABRT) {
 2035608:	e0bffd07 	ldb	r2,-12(fp)
 203560c:	10bffd98 	cmpnei	r2,r2,-10
 2035610:	10005b26 	beq	r2,zero,2035780 <tcp_input+0xd00>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
 2035614:	d0a81f17 	ldw	r2,-24452(gp)
 2035618:	10002926 	beq	r2,zero,20356c0 <tcp_input+0xc40>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 203561c:	e0bff817 	ldw	r2,-32(fp)
 2035620:	10800883 	ldbu	r2,34(r2)
 2035624:	10803fcc 	andi	r2,r2,255
 2035628:	1080040c 	andi	r2,r2,16
 203562c:	10000626 	beq	r2,zero,2035648 <tcp_input+0xbc8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 2035630:	d0a81f17 	ldw	r2,-24452(gp)
 2035634:	1009883a 	mov	r4,r2
 2035638:	201aa200 	call	201aa20 <pbuf_free>
            tcp_abort(pcb);
 203563c:	e13ff817 	ldw	r4,-32(fp)
 2035640:	201be6c0 	call	201be6c <tcp_abort>
            goto aborted;
 2035644:	00005306 	br	2035794 <tcp_input+0xd14>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 2035648:	e0bff817 	ldw	r2,-32(fp)
 203564c:	10802117 	ldw	r2,132(r2)
 2035650:	10000c26 	beq	r2,zero,2035684 <tcp_input+0xc04>
 2035654:	e0bff817 	ldw	r2,-32(fp)
 2035658:	10802117 	ldw	r2,132(r2)
 203565c:	e0fff817 	ldw	r3,-32(fp)
 2035660:	18c00417 	ldw	r3,16(r3)
 2035664:	d1281f17 	ldw	r4,-24452(gp)
 2035668:	000f883a 	mov	r7,zero
 203566c:	200d883a 	mov	r6,r4
 2035670:	e17ff817 	ldw	r5,-32(fp)
 2035674:	1809883a 	mov	r4,r3
 2035678:	103ee83a 	callr	r2
 203567c:	e0bffd05 	stb	r2,-12(fp)
 2035680:	00000706 	br	20356a0 <tcp_input+0xc20>
 2035684:	d0a81f17 	ldw	r2,-24452(gp)
 2035688:	000f883a 	mov	r7,zero
 203568c:	100d883a 	mov	r6,r2
 2035690:	e17ff817 	ldw	r5,-32(fp)
 2035694:	0009883a 	mov	r4,zero
 2035698:	201d3e40 	call	201d3e4 <tcp_recv_null>
 203569c:	e0bffd05 	stb	r2,-12(fp)
          if (err == ERR_ABRT) {
 20356a0:	e0bffd07 	ldb	r2,-12(fp)
 20356a4:	10bffd98 	cmpnei	r2,r2,-10
 20356a8:	10003726 	beq	r2,zero,2035788 <tcp_input+0xd08>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 20356ac:	e0bffd07 	ldb	r2,-12(fp)
 20356b0:	10000326 	beq	r2,zero,20356c0 <tcp_input+0xc40>
            pcb->refused_data = recv_data;
 20356b4:	d0e81f17 	ldw	r3,-24452(gp)
 20356b8:	e0bff817 	ldw	r2,-32(fp)
 20356bc:	10c01f15 	stw	r3,124(r2)
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 20356c0:	d0a81e03 	ldbu	r2,-24456(gp)
 20356c4:	10803fcc 	andi	r2,r2,255
 20356c8:	1080080c 	andi	r2,r2,32
 20356cc:	10002826 	beq	r2,zero,2035770 <tcp_input+0xcf0>
          if (pcb->refused_data != NULL) {
 20356d0:	e0bff817 	ldw	r2,-32(fp)
 20356d4:	10801f17 	ldw	r2,124(r2)
 20356d8:	10000826 	beq	r2,zero,20356fc <tcp_input+0xc7c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 20356dc:	e0bff817 	ldw	r2,-32(fp)
 20356e0:	10801f17 	ldw	r2,124(r2)
 20356e4:	e0fff817 	ldw	r3,-32(fp)
 20356e8:	18c01f17 	ldw	r3,124(r3)
 20356ec:	18c00343 	ldbu	r3,13(r3)
 20356f0:	18c00814 	ori	r3,r3,32
 20356f4:	10c00345 	stb	r3,13(r2)
 20356f8:	00001d06 	br	2035770 <tcp_input+0xcf0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
 20356fc:	e0bff817 	ldw	r2,-32(fp)
 2035700:	10800c0b 	ldhu	r2,48(r2)
 2035704:	10bfffcc 	andi	r2,r2,65535
 2035708:	10880020 	cmpeqi	r2,r2,8192
 203570c:	1000061e 	bne	r2,zero,2035728 <tcp_input+0xca8>
              pcb->rcv_wnd++;
 2035710:	e0bff817 	ldw	r2,-32(fp)
 2035714:	10800c0b 	ldhu	r2,48(r2)
 2035718:	10800044 	addi	r2,r2,1
 203571c:	1007883a 	mov	r3,r2
 2035720:	e0bff817 	ldw	r2,-32(fp)
 2035724:	10c00c0d 	sth	r3,48(r2)
            }
            TCP_EVENT_CLOSED(pcb, err);
 2035728:	e0bff817 	ldw	r2,-32(fp)
 203572c:	10802117 	ldw	r2,132(r2)
 2035730:	10000b26 	beq	r2,zero,2035760 <tcp_input+0xce0>
 2035734:	e0bff817 	ldw	r2,-32(fp)
 2035738:	10802117 	ldw	r2,132(r2)
 203573c:	e0fff817 	ldw	r3,-32(fp)
 2035740:	18c00417 	ldw	r3,16(r3)
 2035744:	000f883a 	mov	r7,zero
 2035748:	000d883a 	mov	r6,zero
 203574c:	e17ff817 	ldw	r5,-32(fp)
 2035750:	1809883a 	mov	r4,r3
 2035754:	103ee83a 	callr	r2
 2035758:	e0bffd05 	stb	r2,-12(fp)
 203575c:	00000106 	br	2035764 <tcp_input+0xce4>
 2035760:	e03ffd05 	stb	zero,-12(fp)
            if (err == ERR_ABRT) {
 2035764:	e0bffd07 	ldb	r2,-12(fp)
 2035768:	10bffd98 	cmpnei	r2,r2,-10
 203576c:	10000826 	beq	r2,zero,2035790 <tcp_input+0xd10>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 2035770:	d0282015 	stw	zero,-24448(gp)
        /* Try to send something out. */
        tcp_output(pcb);
 2035774:	e13ff817 	ldw	r4,-32(fp)
 2035778:	201f6380 	call	201f638 <tcp_output>
 203577c:	00000506 	br	2035794 <tcp_input+0xd14>
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
          TCP_EVENT_SENT(pcb, pcb->acked, err);
          if (err == ERR_ABRT) {
            goto aborted;
 2035780:	0001883a 	nop
 2035784:	00000306 	br	2035794 <tcp_input+0xd14>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
          if (err == ERR_ABRT) {
            goto aborted;
 2035788:	0001883a 	nop
 203578c:	00000106 	br	2035794 <tcp_input+0xd14>
            if (pcb->rcv_wnd != TCP_WND) {
              pcb->rcv_wnd++;
            }
            TCP_EVENT_CLOSED(pcb, err);
            if (err == ERR_ABRT) {
              goto aborted;
 2035790:	0001883a 	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 2035794:	d0282015 	stw	zero,-24448(gp)
    recv_data = NULL;
 2035798:	d0281f15 	stw	zero,-24452(gp)

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 203579c:	008085b4 	movhi	r2,534
 20357a0:	10883604 	addi	r2,r2,8408
 20357a4:	10800117 	ldw	r2,4(r2)
 20357a8:	10004e26 	beq	r2,zero,20358e4 <tcp_input+0xe64>
    {
      pbuf_free(inseg.p);
 20357ac:	008085b4 	movhi	r2,534
 20357b0:	10883604 	addi	r2,r2,8408
 20357b4:	10800117 	ldw	r2,4(r2)
 20357b8:	1009883a 	mov	r4,r2
 20357bc:	201aa200 	call	201aa20 <pbuf_free>
      inseg.p = NULL;
 20357c0:	008085b4 	movhi	r2,534
 20357c4:	10883604 	addi	r2,r2,8408
 20357c8:	10000115 	stw	zero,4(r2)
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 20357cc:	00004506 	br	20358e4 <tcp_input+0xe64>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 20357d0:	d0a81917 	ldw	r2,-24476(gp)
 20357d4:	10c00303 	ldbu	r3,12(r2)
 20357d8:	10800343 	ldbu	r2,13(r2)
 20357dc:	1004923a 	slli	r2,r2,8
 20357e0:	10c4b03a 	or	r2,r2,r3
 20357e4:	10bfffcc 	andi	r2,r2,65535
 20357e8:	1004d23a 	srli	r2,r2,8
 20357ec:	10ffffcc 	andi	r3,r2,65535
 20357f0:	d0a81917 	ldw	r2,-24476(gp)
 20357f4:	11000303 	ldbu	r4,12(r2)
 20357f8:	10800343 	ldbu	r2,13(r2)
 20357fc:	1004923a 	slli	r2,r2,8
 2035800:	1104b03a 	or	r2,r2,r4
 2035804:	10bfffcc 	andi	r2,r2,65535
 2035808:	1004923a 	slli	r2,r2,8
 203580c:	10bfffcc 	andi	r2,r2,65535
 2035810:	1884b03a 	or	r2,r3,r2
 2035814:	1080010c 	andi	r2,r2,4
 2035818:	1000251e 	bne	r2,zero,20358b0 <tcp_input+0xe30>
      TCP_STATS_INC(tcp.proterr);
 203581c:	008085f4 	movhi	r2,535
 2035820:	10a86704 	addi	r2,r2,-24164
 2035824:	10805017 	ldw	r2,320(r2)
 2035828:	10c00044 	addi	r3,r2,1
 203582c:	008085f4 	movhi	r2,535
 2035830:	10a86704 	addi	r2,r2,-24164
 2035834:	10c05015 	stw	r3,320(r2)
      TCP_STATS_INC(tcp.drop);
 2035838:	008085f4 	movhi	r2,535
 203583c:	10a86704 	addi	r2,r2,-24164
 2035840:	10804b17 	ldw	r2,300(r2)
 2035844:	10c00044 	addi	r3,r2,1
 2035848:	008085f4 	movhi	r2,535
 203584c:	10a86704 	addi	r2,r2,-24164
 2035850:	10c04b15 	stw	r3,300(r2)
      tcp_rst(ackno, seqno + tcplen,
 2035854:	d2281c17 	ldw	r8,-24464(gp)
 2035858:	d0a81d8b 	ldhu	r2,-24458(gp)
 203585c:	10ffffcc 	andi	r3,r2,65535
 2035860:	d0a81b17 	ldw	r2,-24468(gp)
 2035864:	188b883a 	add	r5,r3,r2
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
 2035868:	d0a81917 	ldw	r2,-24476(gp)
 203586c:	10c00083 	ldbu	r3,2(r2)
 2035870:	108000c3 	ldbu	r2,3(r2)
 2035874:	1004923a 	slli	r2,r2,8
 2035878:	10c4b03a 	or	r2,r2,r3
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
 203587c:	10ffffcc 	andi	r3,r2,65535
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
 2035880:	d0a81917 	ldw	r2,-24476(gp)
 2035884:	11000003 	ldbu	r4,0(r2)
 2035888:	10800043 	ldbu	r2,1(r2)
 203588c:	1004923a 	slli	r2,r2,8
 2035890:	1104b03a 	or	r2,r2,r4
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen,
 2035894:	10bfffcc 	andi	r2,r2,65535
 2035898:	d8800115 	stw	r2,4(sp)
 203589c:	d8c00015 	stw	r3,0(sp)
 20358a0:	d1e81204 	addi	r7,gp,-24504
 20358a4:	d1a81404 	addi	r6,gp,-24496
 20358a8:	4009883a 	mov	r4,r8
 20358ac:	20206e40 	call	20206e4 <tcp_rst>
        ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    pbuf_free(p);
 20358b0:	e13ffe17 	ldw	r4,-8(fp)
 20358b4:	201aa200 	call	201aa20 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 20358b8:	00000a06 	br	20358e4 <tcp_input+0xe64>
dropped:
  TCP_STATS_INC(tcp.drop);
 20358bc:	008085f4 	movhi	r2,535
 20358c0:	10a86704 	addi	r2,r2,-24164
 20358c4:	10804b17 	ldw	r2,300(r2)
 20358c8:	10c00044 	addi	r3,r2,1
 20358cc:	008085f4 	movhi	r2,535
 20358d0:	10a86704 	addi	r2,r2,-24164
 20358d4:	10c04b15 	stw	r3,300(r2)
  snmp_inc_tcpinerrs();
  pbuf_free(p);
 20358d8:	e13ffe17 	ldw	r4,-8(fp)
 20358dc:	201aa200 	call	201aa20 <pbuf_free>
 20358e0:	00000106 	br	20358e8 <tcp_input+0xe68>
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 20358e4:	0001883a 	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
}
 20358e8:	e037883a 	mov	sp,fp
 20358ec:	dfc00117 	ldw	ra,4(sp)
 20358f0:	df000017 	ldw	fp,0(sp)
 20358f4:	dec00204 	addi	sp,sp,8
 20358f8:	f800283a 	ret

020358fc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 20358fc:	defff904 	addi	sp,sp,-28
 2035900:	dfc00615 	stw	ra,24(sp)
 2035904:	df000515 	stw	fp,20(sp)
 2035908:	df000504 	addi	fp,sp,20
 203590c:	e13fff15 	stw	r4,-4(fp)
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
 2035910:	d0a81d03 	ldbu	r2,-24460(gp)
 2035914:	10803fcc 	andi	r2,r2,255
 2035918:	1080010c 	andi	r2,r2,4
 203591c:	10000226 	beq	r2,zero,2035928 <tcp_listen_input+0x2c>
    /* An incoming RST should be ignored. Return. */
    return ERR_OK;
 2035920:	0005883a 	mov	r2,zero
 2035924:	0000aa06 	br	2035bd0 <tcp_listen_input+0x2d4>
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 2035928:	d0a81d03 	ldbu	r2,-24460(gp)
 203592c:	10803fcc 	andi	r2,r2,255
 2035930:	1080040c 	andi	r2,r2,16
 2035934:	10001826 	beq	r2,zero,2035998 <tcp_listen_input+0x9c>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 2035938:	d2281c17 	ldw	r8,-24464(gp)
 203593c:	d0a81d8b 	ldhu	r2,-24458(gp)
 2035940:	10ffffcc 	andi	r3,r2,65535
 2035944:	d0a81b17 	ldw	r2,-24468(gp)
 2035948:	188b883a 	add	r5,r3,r2
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 203594c:	d0a81917 	ldw	r2,-24476(gp)
 2035950:	10c00083 	ldbu	r3,2(r2)
 2035954:	108000c3 	ldbu	r2,3(r2)
 2035958:	1004923a 	slli	r2,r2,8
 203595c:	10c4b03a 	or	r2,r2,r3
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 2035960:	10ffffcc 	andi	r3,r2,65535
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 2035964:	d0a81917 	ldw	r2,-24476(gp)
 2035968:	11000003 	ldbu	r4,0(r2)
 203596c:	10800043 	ldbu	r2,1(r2)
 2035970:	1004923a 	slli	r2,r2,8
 2035974:	1104b03a 	or	r2,r2,r4
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 2035978:	10bfffcc 	andi	r2,r2,65535
 203597c:	d8800115 	stw	r2,4(sp)
 2035980:	d8c00015 	stw	r3,0(sp)
 2035984:	d1e81204 	addi	r7,gp,-24504
 2035988:	d1a81404 	addi	r6,gp,-24496
 203598c:	4009883a 	mov	r4,r8
 2035990:	20206e40 	call	20206e4 <tcp_rst>
 2035994:	00008d06 	br	2035bcc <tcp_listen_input+0x2d0>
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
 2035998:	d0a81d03 	ldbu	r2,-24460(gp)
 203599c:	10803fcc 	andi	r2,r2,255
 20359a0:	1080008c 	andi	r2,r2,2
 20359a4:	10008926 	beq	r2,zero,2035bcc <tcp_listen_input+0x2d0>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
#if TCP_LISTEN_BACKLOG
    if (pcb->accepts_pending >= pcb->backlog) {
 20359a8:	e0bfff17 	ldw	r2,-4(fp)
 20359ac:	10c00843 	ldbu	r3,33(r2)
 20359b0:	e0bfff17 	ldw	r2,-4(fp)
 20359b4:	10800803 	ldbu	r2,32(r2)
 20359b8:	18c03fcc 	andi	r3,r3,255
 20359bc:	10803fcc 	andi	r2,r2,255
 20359c0:	18800236 	bltu	r3,r2,20359cc <tcp_listen_input+0xd0>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
 20359c4:	00bffd84 	movi	r2,-10
 20359c8:	00008106 	br	2035bd0 <tcp_listen_input+0x2d4>
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
 20359cc:	e0bfff17 	ldw	r2,-4(fp)
 20359d0:	10800703 	ldbu	r2,28(r2)
 20359d4:	10803fcc 	andi	r2,r2,255
 20359d8:	1009883a 	mov	r4,r2
 20359dc:	201d5cc0 	call	201d5cc <tcp_alloc>
 20359e0:	e0bffd15 	stw	r2,-12(fp)
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
 20359e4:	e0bffd17 	ldw	r2,-12(fp)
 20359e8:	1000091e 	bne	r2,zero,2035a10 <tcp_listen_input+0x114>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
 20359ec:	008085f4 	movhi	r2,535
 20359f0:	10a86704 	addi	r2,r2,-24164
 20359f4:	10804e17 	ldw	r2,312(r2)
 20359f8:	10c00044 	addi	r3,r2,1
 20359fc:	008085f4 	movhi	r2,535
 2035a00:	10a86704 	addi	r2,r2,-24164
 2035a04:	10c04e15 	stw	r3,312(r2)
      return ERR_MEM;
 2035a08:	00bfffc4 	movi	r2,-1
 2035a0c:	00007006 	br	2035bd0 <tcp_listen_input+0x2d4>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
 2035a10:	e0bfff17 	ldw	r2,-4(fp)
 2035a14:	10800843 	ldbu	r2,33(r2)
 2035a18:	10800044 	addi	r2,r2,1
 2035a1c:	1007883a 	mov	r3,r2
 2035a20:	e0bfff17 	ldw	r2,-4(fp)
 2035a24:	10c00845 	stb	r3,33(r2)
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
 2035a28:	d0e81417 	ldw	r3,-24496(gp)
 2035a2c:	e0bffd17 	ldw	r2,-12(fp)
 2035a30:	10c00015 	stw	r3,0(r2)
    npcb->local_port = pcb->local_port;
 2035a34:	e0bfff17 	ldw	r2,-4(fp)
 2035a38:	10c0078b 	ldhu	r3,30(r2)
 2035a3c:	e0bffd17 	ldw	r2,-12(fp)
 2035a40:	10c0078d 	sth	r3,30(r2)
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
 2035a44:	d0e81217 	ldw	r3,-24504(gp)
 2035a48:	e0bffd17 	ldw	r2,-12(fp)
 2035a4c:	10c00115 	stw	r3,4(r2)
    npcb->remote_port = tcphdr->src;
 2035a50:	d0a81917 	ldw	r2,-24476(gp)
 2035a54:	10c00003 	ldbu	r3,0(r2)
 2035a58:	10800043 	ldbu	r2,1(r2)
 2035a5c:	1004923a 	slli	r2,r2,8
 2035a60:	10c4b03a 	or	r2,r2,r3
 2035a64:	1007883a 	mov	r3,r2
 2035a68:	e0bffd17 	ldw	r2,-12(fp)
 2035a6c:	10c0080d 	sth	r3,32(r2)
    npcb->state = SYN_RCVD;
 2035a70:	e0bffd17 	ldw	r2,-12(fp)
 2035a74:	00c000c4 	movi	r3,3
 2035a78:	10c00615 	stw	r3,24(r2)
    npcb->rcv_nxt = seqno + 1;
 2035a7c:	d0a81b17 	ldw	r2,-24468(gp)
 2035a80:	10c00044 	addi	r3,r2,1
 2035a84:	e0bffd17 	ldw	r2,-12(fp)
 2035a88:	10c00b15 	stw	r3,44(r2)
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 2035a8c:	e0bffd17 	ldw	r2,-12(fp)
 2035a90:	10c00b17 	ldw	r3,44(r2)
 2035a94:	e0bffd17 	ldw	r2,-12(fp)
 2035a98:	10c00d15 	stw	r3,52(r2)
    npcb->snd_wnd = tcphdr->wnd;
 2035a9c:	d0a81917 	ldw	r2,-24476(gp)
 2035aa0:	10c00383 	ldbu	r3,14(r2)
 2035aa4:	108003c3 	ldbu	r2,15(r2)
 2035aa8:	1004923a 	slli	r2,r2,8
 2035aac:	10c4b03a 	or	r2,r2,r3
 2035ab0:	1007883a 	mov	r3,r2
 2035ab4:	e0bffd17 	ldw	r2,-12(fp)
 2035ab8:	10c0190d 	sth	r3,100(r2)
    npcb->snd_wnd_max = tcphdr->wnd;
 2035abc:	d0a81917 	ldw	r2,-24476(gp)
 2035ac0:	10c00383 	ldbu	r3,14(r2)
 2035ac4:	108003c3 	ldbu	r2,15(r2)
 2035ac8:	1004923a 	slli	r2,r2,8
 2035acc:	10c4b03a 	or	r2,r2,r3
 2035ad0:	1007883a 	mov	r3,r2
 2035ad4:	e0bffd17 	ldw	r2,-12(fp)
 2035ad8:	10c0198d 	sth	r3,102(r2)
    npcb->ssthresh = npcb->snd_wnd;
 2035adc:	e0bffd17 	ldw	r2,-12(fp)
 2035ae0:	10c0190b 	ldhu	r3,100(r2)
 2035ae4:	e0bffd17 	ldw	r2,-12(fp)
 2035ae8:	10c0148d 	sth	r3,82(r2)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 2035aec:	d0a81b17 	ldw	r2,-24468(gp)
 2035af0:	10ffffc4 	addi	r3,r2,-1
 2035af4:	e0bffd17 	ldw	r2,-12(fp)
 2035af8:	10c01615 	stw	r3,88(r2)
    npcb->callback_arg = pcb->callback_arg;
 2035afc:	e0bfff17 	ldw	r2,-4(fp)
 2035b00:	10c00417 	ldw	r3,16(r2)
 2035b04:	e0bffd17 	ldw	r2,-12(fp)
 2035b08:	10c00415 	stw	r3,16(r2)
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
 2035b0c:	e0bfff17 	ldw	r2,-4(fp)
 2035b10:	10c00517 	ldw	r3,20(r2)
 2035b14:	e0bffd17 	ldw	r2,-12(fp)
 2035b18:	10c00515 	stw	r3,20(r2)
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 2035b1c:	e0bfff17 	ldw	r2,-4(fp)
 2035b20:	10c00203 	ldbu	r3,8(r2)
 2035b24:	00bfe304 	movi	r2,-116
 2035b28:	1884703a 	and	r2,r3,r2
 2035b2c:	1007883a 	mov	r3,r2
 2035b30:	e0bffd17 	ldw	r2,-12(fp)
 2035b34:	10c00205 	stb	r3,8(r2)
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 2035b38:	d0e7f717 	ldw	r3,-24612(gp)
 2035b3c:	e0bffd17 	ldw	r2,-12(fp)
 2035b40:	10c00315 	stw	r3,12(r2)
 2035b44:	e0bffd17 	ldw	r2,-12(fp)
 2035b48:	d0a7f715 	stw	r2,-24612(gp)
 2035b4c:	202140c0 	call	202140c <tcp_timer_needed>
 2035b50:	00800044 	movi	r2,1
 2035b54:	d0a7f685 	stb	r2,-24614(gp)

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 2035b58:	e13ffd17 	ldw	r4,-12(fp)
 2035b5c:	2038a680 	call	2038a68 <tcp_parseopt>
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->local_ip), &(npcb->remote_ip));
 2035b60:	e0bffd17 	ldw	r2,-12(fp)
 2035b64:	10800e8b 	ldhu	r2,58(r2)
 2035b68:	10ffffcc 	andi	r3,r2,65535
 2035b6c:	e13ffd17 	ldw	r4,-12(fp)
 2035b70:	e0bffd17 	ldw	r2,-12(fp)
 2035b74:	10800104 	addi	r2,r2,4
 2035b78:	100d883a 	mov	r6,r2
 2035b7c:	200b883a 	mov	r5,r4
 2035b80:	1809883a 	mov	r4,r3
 2035b84:	201dbf00 	call	201dbf0 <tcp_eff_send_mss>
 2035b88:	1007883a 	mov	r3,r2
 2035b8c:	e0bffd17 	ldw	r2,-12(fp)
 2035b90:	10c00e8d 	sth	r3,58(r2)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 2035b94:	01400484 	movi	r5,18
 2035b98:	e13ffd17 	ldw	r4,-12(fp)
 2035b9c:	201f1b40 	call	201f1b4 <tcp_enqueue_flags>
 2035ba0:	e0bffe05 	stb	r2,-8(fp)
    if (rc != ERR_OK) {
 2035ba4:	e0bffe07 	ldb	r2,-8(fp)
 2035ba8:	10000526 	beq	r2,zero,2035bc0 <tcp_listen_input+0x2c4>
      tcp_abandon(npcb, 0);
 2035bac:	000b883a 	mov	r5,zero
 2035bb0:	e13ffd17 	ldw	r4,-12(fp)
 2035bb4:	201bd0c0 	call	201bd0c <tcp_abandon>
      return rc;
 2035bb8:	e0bffe03 	ldbu	r2,-8(fp)
 2035bbc:	00000406 	br	2035bd0 <tcp_listen_input+0x2d4>
    }
    return tcp_output(npcb);
 2035bc0:	e13ffd17 	ldw	r4,-12(fp)
 2035bc4:	201f6380 	call	201f638 <tcp_output>
 2035bc8:	00000106 	br	2035bd0 <tcp_listen_input+0x2d4>
  }
  return ERR_OK;
 2035bcc:	0005883a 	mov	r2,zero
}
 2035bd0:	e037883a 	mov	sp,fp
 2035bd4:	dfc00117 	ldw	ra,4(sp)
 2035bd8:	df000017 	ldw	fp,0(sp)
 2035bdc:	dec00204 	addi	sp,sp,8
 2035be0:	f800283a 	ret

02035be4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_timewait_input(struct tcp_pcb *pcb)
{
 2035be4:	defffb04 	addi	sp,sp,-20
 2035be8:	dfc00415 	stw	ra,16(sp)
 2035bec:	df000315 	stw	fp,12(sp)
 2035bf0:	df000304 	addi	fp,sp,12
 2035bf4:	e13fff15 	stw	r4,-4(fp)
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
 2035bf8:	d0a81d03 	ldbu	r2,-24460(gp)
 2035bfc:	10803fcc 	andi	r2,r2,255
 2035c00:	1080010c 	andi	r2,r2,4
 2035c04:	10000226 	beq	r2,zero,2035c10 <tcp_timewait_input+0x2c>
    return ERR_OK;
 2035c08:	0005883a 	mov	r2,zero
 2035c0c:	00003f06 	br	2035d0c <tcp_timewait_input+0x128>
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 2035c10:	d0a81d03 	ldbu	r2,-24460(gp)
 2035c14:	10803fcc 	andi	r2,r2,255
 2035c18:	1080008c 	andi	r2,r2,2
 2035c1c:	10002726 	beq	r2,zero,2035cbc <tcp_timewait_input+0xd8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
 2035c20:	d0e81b17 	ldw	r3,-24468(gp)
 2035c24:	e0bfff17 	ldw	r2,-4(fp)
 2035c28:	10800b17 	ldw	r2,44(r2)
 2035c2c:	1885c83a 	sub	r2,r3,r2
 2035c30:	10002916 	blt	r2,zero,2035cd8 <tcp_timewait_input+0xf4>
 2035c34:	d0e81b17 	ldw	r3,-24468(gp)
 2035c38:	e0bfff17 	ldw	r2,-4(fp)
 2035c3c:	11000b17 	ldw	r4,44(r2)
 2035c40:	e0bfff17 	ldw	r2,-4(fp)
 2035c44:	10800c0b 	ldhu	r2,48(r2)
 2035c48:	10bfffcc 	andi	r2,r2,65535
 2035c4c:	2085883a 	add	r2,r4,r2
 2035c50:	1885c83a 	sub	r2,r3,r2
 2035c54:	00802016 	blt	zero,r2,2035cd8 <tcp_timewait_input+0xf4>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 2035c58:	d2281c17 	ldw	r8,-24464(gp)
 2035c5c:	d0a81d8b 	ldhu	r2,-24458(gp)
 2035c60:	10ffffcc 	andi	r3,r2,65535
 2035c64:	d0a81b17 	ldw	r2,-24468(gp)
 2035c68:	188b883a 	add	r5,r3,r2
        tcphdr->dest, tcphdr->src);
 2035c6c:	d0a81917 	ldw	r2,-24476(gp)
 2035c70:	10c00083 	ldbu	r3,2(r2)
 2035c74:	108000c3 	ldbu	r2,3(r2)
 2035c78:	1004923a 	slli	r2,r2,8
 2035c7c:	10c4b03a 	or	r2,r2,r3
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 2035c80:	10ffffcc 	andi	r3,r2,65535
        tcphdr->dest, tcphdr->src);
 2035c84:	d0a81917 	ldw	r2,-24476(gp)
 2035c88:	11000003 	ldbu	r4,0(r2)
 2035c8c:	10800043 	ldbu	r2,1(r2)
 2035c90:	1004923a 	slli	r2,r2,8
 2035c94:	1104b03a 	or	r2,r2,r4
  if (flags & TCP_SYN) {
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 2035c98:	10bfffcc 	andi	r2,r2,65535
 2035c9c:	d8800115 	stw	r2,4(sp)
 2035ca0:	d8c00015 	stw	r3,0(sp)
 2035ca4:	d1e81204 	addi	r7,gp,-24504
 2035ca8:	d1a81404 	addi	r6,gp,-24496
 2035cac:	4009883a 	mov	r4,r8
 2035cb0:	20206e40 	call	20206e4 <tcp_rst>
        tcphdr->dest, tcphdr->src);
      return ERR_OK;
 2035cb4:	0005883a 	mov	r2,zero
 2035cb8:	00001406 	br	2035d0c <tcp_timewait_input+0x128>
    }
  } else if (flags & TCP_FIN) {
 2035cbc:	d0a81d03 	ldbu	r2,-24460(gp)
 2035cc0:	10803fcc 	andi	r2,r2,255
 2035cc4:	1080004c 	andi	r2,r2,1
 2035cc8:	10000326 	beq	r2,zero,2035cd8 <tcp_timewait_input+0xf4>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 2035ccc:	d0e7f817 	ldw	r3,-24608(gp)
 2035cd0:	e0bfff17 	ldw	r2,-4(fp)
 2035cd4:	10c00a15 	stw	r3,40(r2)
  }

  if ((tcplen > 0))  {
 2035cd8:	d0a81d8b 	ldhu	r2,-24458(gp)
 2035cdc:	10bfffcc 	andi	r2,r2,65535
 2035ce0:	10000926 	beq	r2,zero,2035d08 <tcp_timewait_input+0x124>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 2035ce4:	e0bfff17 	ldw	r2,-4(fp)
 2035ce8:	10800883 	ldbu	r2,34(r2)
 2035cec:	10800094 	ori	r2,r2,2
 2035cf0:	1007883a 	mov	r3,r2
 2035cf4:	e0bfff17 	ldw	r2,-4(fp)
 2035cf8:	10c00885 	stb	r3,34(r2)
    return tcp_output(pcb);
 2035cfc:	e13fff17 	ldw	r4,-4(fp)
 2035d00:	201f6380 	call	201f638 <tcp_output>
 2035d04:	00000106 	br	2035d0c <tcp_timewait_input+0x128>
  }
  return ERR_OK;
 2035d08:	0005883a 	mov	r2,zero
}
 2035d0c:	e037883a 	mov	sp,fp
 2035d10:	dfc00117 	ldw	ra,4(sp)
 2035d14:	df000017 	ldw	fp,0(sp)
 2035d18:	dec00204 	addi	sp,sp,8
 2035d1c:	f800283a 	ret

02035d20 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 2035d20:	defff804 	addi	sp,sp,-32
 2035d24:	dfc00715 	stw	ra,28(sp)
 2035d28:	df000615 	stw	fp,24(sp)
 2035d2c:	df000604 	addi	fp,sp,24
 2035d30:	e13fff15 	stw	r4,-4(fp)
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 2035d34:	e03ffc05 	stb	zero,-16(fp)
  err_t err;

  err = ERR_OK;
 2035d38:	e03ffc45 	stb	zero,-15(fp)

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 2035d3c:	d0a81d03 	ldbu	r2,-24460(gp)
 2035d40:	10803fcc 	andi	r2,r2,255
 2035d44:	1080010c 	andi	r2,r2,4
 2035d48:	10002b26 	beq	r2,zero,2035df8 <tcp_process+0xd8>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 2035d4c:	e0bfff17 	ldw	r2,-4(fp)
 2035d50:	10800617 	ldw	r2,24(r2)
 2035d54:	10800098 	cmpnei	r2,r2,2
 2035d58:	1000071e 	bne	r2,zero,2035d78 <tcp_process+0x58>
      if (ackno == pcb->snd_nxt) {
 2035d5c:	e0bfff17 	ldw	r2,-4(fp)
 2035d60:	10c01517 	ldw	r3,84(r2)
 2035d64:	d0a81c17 	ldw	r2,-24464(gp)
 2035d68:	1880131e 	bne	r3,r2,2035db8 <tcp_process+0x98>
        acceptable = 1;
 2035d6c:	00800044 	movi	r2,1
 2035d70:	e0bffc05 	stb	r2,-16(fp)
 2035d74:	00001006 	br	2035db8 <tcp_process+0x98>
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 2035d78:	d0e81b17 	ldw	r3,-24468(gp)
 2035d7c:	e0bfff17 	ldw	r2,-4(fp)
 2035d80:	10800b17 	ldw	r2,44(r2)
 2035d84:	1885c83a 	sub	r2,r3,r2
 2035d88:	10000b16 	blt	r2,zero,2035db8 <tcp_process+0x98>
 2035d8c:	d0e81b17 	ldw	r3,-24468(gp)
 2035d90:	e0bfff17 	ldw	r2,-4(fp)
 2035d94:	11000b17 	ldw	r4,44(r2)
 2035d98:	e0bfff17 	ldw	r2,-4(fp)
 2035d9c:	10800c0b 	ldhu	r2,48(r2)
 2035da0:	10bfffcc 	andi	r2,r2,65535
 2035da4:	2085883a 	add	r2,r4,r2
 2035da8:	1885c83a 	sub	r2,r3,r2
 2035dac:	00800216 	blt	zero,r2,2035db8 <tcp_process+0x98>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
 2035db0:	00800044 	movi	r2,1
 2035db4:	e0bffc05 	stb	r2,-16(fp)
      }
    }

    if (acceptable) {
 2035db8:	e0bffc03 	ldbu	r2,-16(fp)
 2035dbc:	10000c26 	beq	r2,zero,2035df0 <tcp_process+0xd0>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 2035dc0:	d0a81e03 	ldbu	r2,-24456(gp)
 2035dc4:	10800214 	ori	r2,r2,8
 2035dc8:	d0a81e05 	stb	r2,-24456(gp)
      pcb->flags &= ~TF_ACK_DELAY;
 2035dcc:	e0bfff17 	ldw	r2,-4(fp)
 2035dd0:	10c00883 	ldbu	r3,34(r2)
 2035dd4:	00bfff84 	movi	r2,-2
 2035dd8:	1884703a 	and	r2,r3,r2
 2035ddc:	1007883a 	mov	r3,r2
 2035de0:	e0bfff17 	ldw	r2,-4(fp)
 2035de4:	10c00885 	stb	r3,34(r2)
      return ERR_RST;
 2035de8:	00bffd44 	movi	r2,-11
 2035dec:	00027406 	br	20367c0 <tcp_process+0xaa0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 2035df0:	0005883a 	mov	r2,zero
 2035df4:	00027206 	br	20367c0 <tcp_process+0xaa0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
 2035df8:	d0a81d03 	ldbu	r2,-24460(gp)
 2035dfc:	10803fcc 	andi	r2,r2,255
 2035e00:	1080008c 	andi	r2,r2,2
 2035e04:	10001026 	beq	r2,zero,2035e48 <tcp_process+0x128>
 2035e08:	e0bfff17 	ldw	r2,-4(fp)
 2035e0c:	10800617 	ldw	r2,24(r2)
 2035e10:	108000a0 	cmpeqi	r2,r2,2
 2035e14:	10000c1e 	bne	r2,zero,2035e48 <tcp_process+0x128>
 2035e18:	e0bfff17 	ldw	r2,-4(fp)
 2035e1c:	10800617 	ldw	r2,24(r2)
 2035e20:	108000e0 	cmpeqi	r2,r2,3
 2035e24:	1000081e 	bne	r2,zero,2035e48 <tcp_process+0x128>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 2035e28:	e0bfff17 	ldw	r2,-4(fp)
 2035e2c:	10800883 	ldbu	r2,34(r2)
 2035e30:	10800094 	ori	r2,r2,2
 2035e34:	1007883a 	mov	r3,r2
 2035e38:	e0bfff17 	ldw	r2,-4(fp)
 2035e3c:	10c00885 	stb	r3,34(r2)
    return ERR_OK;
 2035e40:	0005883a 	mov	r2,zero
 2035e44:	00025e06 	br	20367c0 <tcp_process+0xaa0>
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 2035e48:	e0bfff17 	ldw	r2,-4(fp)
 2035e4c:	10800883 	ldbu	r2,34(r2)
 2035e50:	10803fcc 	andi	r2,r2,255
 2035e54:	1080040c 	andi	r2,r2,16
 2035e58:	1000031e 	bne	r2,zero,2035e68 <tcp_process+0x148>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 2035e5c:	d0e7f817 	ldw	r3,-24608(gp)
 2035e60:	e0bfff17 	ldw	r2,-4(fp)
 2035e64:	10c00a15 	stw	r3,40(r2)
  }
  pcb->keep_cnt_sent = 0;
 2035e68:	e0bfff17 	ldw	r2,-4(fp)
 2035e6c:	10002885 	stb	zero,162(r2)

  tcp_parseopt(pcb);
 2035e70:	e13fff17 	ldw	r4,-4(fp)
 2035e74:	2038a680 	call	2038a68 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 2035e78:	e0bfff17 	ldw	r2,-4(fp)
 2035e7c:	10800617 	ldw	r2,24(r2)
 2035e80:	10c002a8 	cmpgeui	r3,r2,10
 2035e84:	18023e1e 	bne	r3,zero,2036780 <tcp_process+0xa60>
 2035e88:	100690ba 	slli	r3,r2,2
 2035e8c:	008080f4 	movhi	r2,515
 2035e90:	1097a804 	addi	r2,r2,24224
 2035e94:	1885883a 	add	r2,r3,r2
 2035e98:	10800017 	ldw	r2,0(r2)
 2035e9c:	1000683a 	jmp	r2
 2035ea0:	02036780 	call	203678 <__alt_mem_sdram_controller_0-0x1dfc988>
 2035ea4:	02036780 	call	203678 <__alt_mem_sdram_controller_0-0x1dfc988>
 2035ea8:	02035ec8 	cmpgei	r8,zero,3451
 2035eac:	02036248 	cmpgei	r8,zero,3465
 2035eb0:	02036428 	cmpgeui	r8,zero,3472
 2035eb4:	02036468 	cmpgeui	r8,zero,3473
 2035eb8:	020365b0 	cmpltui	r8,zero,3478
 2035ebc:	02036428 	cmpgeui	r8,zero,3472
 2035ec0:	02036680 	call	203668 <__alt_mem_sdram_controller_0-0x1dfc998>
 2035ec4:	02036748 	cmpgei	r8,zero,3485
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 2035ec8:	d0a81d03 	ldbu	r2,-24460(gp)
 2035ecc:	10803fcc 	andi	r2,r2,255
 2035ed0:	1080040c 	andi	r2,r2,16
 2035ed4:	1000c026 	beq	r2,zero,20361d8 <tcp_process+0x4b8>
 2035ed8:	d0a81d03 	ldbu	r2,-24460(gp)
 2035edc:	10803fcc 	andi	r2,r2,255
 2035ee0:	1080008c 	andi	r2,r2,2
 2035ee4:	1000bc26 	beq	r2,zero,20361d8 <tcp_process+0x4b8>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 2035ee8:	e0bfff17 	ldw	r2,-4(fp)
 2035eec:	10801d17 	ldw	r2,116(r2)
 2035ef0:	10800417 	ldw	r2,16(r2)
 2035ef4:	10c00103 	ldbu	r3,4(r2)
 2035ef8:	11000143 	ldbu	r4,5(r2)
 2035efc:	2008923a 	slli	r4,r4,8
 2035f00:	20c6b03a 	or	r3,r4,r3
 2035f04:	11000183 	ldbu	r4,6(r2)
 2035f08:	2008943a 	slli	r4,r4,16
 2035f0c:	20c6b03a 	or	r3,r4,r3
 2035f10:	108001c3 	ldbu	r2,7(r2)
 2035f14:	1004963a 	slli	r2,r2,24
 2035f18:	10c4b03a 	or	r2,r2,r3
 2035f1c:	1006d63a 	srli	r3,r2,24
 2035f20:	e0bfff17 	ldw	r2,-4(fp)
 2035f24:	10801d17 	ldw	r2,116(r2)
 2035f28:	10800417 	ldw	r2,16(r2)
 2035f2c:	11000103 	ldbu	r4,4(r2)
 2035f30:	11400143 	ldbu	r5,5(r2)
 2035f34:	280a923a 	slli	r5,r5,8
 2035f38:	2908b03a 	or	r4,r5,r4
 2035f3c:	11400183 	ldbu	r5,6(r2)
 2035f40:	280a943a 	slli	r5,r5,16
 2035f44:	2908b03a 	or	r4,r5,r4
 2035f48:	108001c3 	ldbu	r2,7(r2)
 2035f4c:	1004963a 	slli	r2,r2,24
 2035f50:	1104b03a 	or	r2,r2,r4
 2035f54:	1004d23a 	srli	r2,r2,8
 2035f58:	10bfc00c 	andi	r2,r2,65280
 2035f5c:	1886b03a 	or	r3,r3,r2
 2035f60:	e0bfff17 	ldw	r2,-4(fp)
 2035f64:	10801d17 	ldw	r2,116(r2)
 2035f68:	10800417 	ldw	r2,16(r2)
 2035f6c:	11000103 	ldbu	r4,4(r2)
 2035f70:	11400143 	ldbu	r5,5(r2)
 2035f74:	280a923a 	slli	r5,r5,8
 2035f78:	2908b03a 	or	r4,r5,r4
 2035f7c:	11400183 	ldbu	r5,6(r2)
 2035f80:	280a943a 	slli	r5,r5,16
 2035f84:	2908b03a 	or	r4,r5,r4
 2035f88:	108001c3 	ldbu	r2,7(r2)
 2035f8c:	1004963a 	slli	r2,r2,24
 2035f90:	1104b03a 	or	r2,r2,r4
 2035f94:	10bfc00c 	andi	r2,r2,65280
 2035f98:	1004923a 	slli	r2,r2,8
 2035f9c:	1886b03a 	or	r3,r3,r2
 2035fa0:	e0bfff17 	ldw	r2,-4(fp)
 2035fa4:	10801d17 	ldw	r2,116(r2)
 2035fa8:	10800417 	ldw	r2,16(r2)
 2035fac:	11000103 	ldbu	r4,4(r2)
 2035fb0:	11400143 	ldbu	r5,5(r2)
 2035fb4:	280a923a 	slli	r5,r5,8
 2035fb8:	2908b03a 	or	r4,r5,r4
 2035fbc:	11400183 	ldbu	r5,6(r2)
 2035fc0:	280a943a 	slli	r5,r5,16
 2035fc4:	2908b03a 	or	r4,r5,r4
 2035fc8:	108001c3 	ldbu	r2,7(r2)
 2035fcc:	1004963a 	slli	r2,r2,24
 2035fd0:	1104b03a 	or	r2,r2,r4
 2035fd4:	1004963a 	slli	r2,r2,24
 2035fd8:	1884b03a 	or	r2,r3,r2
 2035fdc:	10c00044 	addi	r3,r2,1
 2035fe0:	d0a81c17 	ldw	r2,-24464(gp)
 2035fe4:	18807c1e 	bne	r3,r2,20361d8 <tcp_process+0x4b8>
      pcb->snd_buf++;
 2035fe8:	e0bfff17 	ldw	r2,-4(fp)
 2035fec:	10801a8b 	ldhu	r2,106(r2)
 2035ff0:	10800044 	addi	r2,r2,1
 2035ff4:	1007883a 	mov	r3,r2
 2035ff8:	e0bfff17 	ldw	r2,-4(fp)
 2035ffc:	10c01a8d 	sth	r3,106(r2)
      pcb->rcv_nxt = seqno + 1;
 2036000:	d0a81b17 	ldw	r2,-24468(gp)
 2036004:	10c00044 	addi	r3,r2,1
 2036008:	e0bfff17 	ldw	r2,-4(fp)
 203600c:	10c00b15 	stw	r3,44(r2)
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 2036010:	e0bfff17 	ldw	r2,-4(fp)
 2036014:	10c00b17 	ldw	r3,44(r2)
 2036018:	e0bfff17 	ldw	r2,-4(fp)
 203601c:	10c00d15 	stw	r3,52(r2)
      pcb->lastack = ackno;
 2036020:	d0e81c17 	ldw	r3,-24464(gp)
 2036024:	e0bfff17 	ldw	r2,-4(fp)
 2036028:	10c01315 	stw	r3,76(r2)
      pcb->snd_wnd = tcphdr->wnd;
 203602c:	d0a81917 	ldw	r2,-24476(gp)
 2036030:	10c00383 	ldbu	r3,14(r2)
 2036034:	108003c3 	ldbu	r2,15(r2)
 2036038:	1004923a 	slli	r2,r2,8
 203603c:	10c4b03a 	or	r2,r2,r3
 2036040:	1007883a 	mov	r3,r2
 2036044:	e0bfff17 	ldw	r2,-4(fp)
 2036048:	10c0190d 	sth	r3,100(r2)
      pcb->snd_wnd_max = tcphdr->wnd;
 203604c:	d0a81917 	ldw	r2,-24476(gp)
 2036050:	10c00383 	ldbu	r3,14(r2)
 2036054:	108003c3 	ldbu	r2,15(r2)
 2036058:	1004923a 	slli	r2,r2,8
 203605c:	10c4b03a 	or	r2,r2,r3
 2036060:	1007883a 	mov	r3,r2
 2036064:	e0bfff17 	ldw	r2,-4(fp)
 2036068:	10c0198d 	sth	r3,102(r2)
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 203606c:	d0a81b17 	ldw	r2,-24468(gp)
 2036070:	10ffffc4 	addi	r3,r2,-1
 2036074:	e0bfff17 	ldw	r2,-4(fp)
 2036078:	10c01615 	stw	r3,88(r2)
      pcb->state = ESTABLISHED;
 203607c:	e0bfff17 	ldw	r2,-4(fp)
 2036080:	00c00104 	movi	r3,4
 2036084:	10c00615 	stw	r3,24(r2)

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->local_ip), &(pcb->remote_ip));
 2036088:	e0bfff17 	ldw	r2,-4(fp)
 203608c:	10800e8b 	ldhu	r2,58(r2)
 2036090:	10ffffcc 	andi	r3,r2,65535
 2036094:	e13fff17 	ldw	r4,-4(fp)
 2036098:	e0bfff17 	ldw	r2,-4(fp)
 203609c:	10800104 	addi	r2,r2,4
 20360a0:	100d883a 	mov	r6,r2
 20360a4:	200b883a 	mov	r5,r4
 20360a8:	1809883a 	mov	r4,r3
 20360ac:	201dbf00 	call	201dbf0 <tcp_eff_send_mss>
 20360b0:	1007883a 	mov	r3,r2
 20360b4:	e0bfff17 	ldw	r2,-4(fp)
 20360b8:	10c00e8d 	sth	r3,58(r2)
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
 20360bc:	e0bfff17 	ldw	r2,-4(fp)
 20360c0:	10800e8b 	ldhu	r2,58(r2)
 20360c4:	108002a4 	muli	r2,r2,10
 20360c8:	1007883a 	mov	r3,r2
 20360cc:	e0bfff17 	ldw	r2,-4(fp)
 20360d0:	10c0148d 	sth	r3,82(r2)

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 20360d4:	e0bfff17 	ldw	r2,-4(fp)
 20360d8:	1080140b 	ldhu	r2,80(r2)
 20360dc:	10bfffcc 	andi	r2,r2,65535
 20360e0:	10800058 	cmpnei	r2,r2,1
 20360e4:	1000041e 	bne	r2,zero,20360f8 <tcp_process+0x3d8>
 20360e8:	e0bfff17 	ldw	r2,-4(fp)
 20360ec:	10800e8b 	ldhu	r2,58(r2)
 20360f0:	1085883a 	add	r2,r2,r2
 20360f4:	00000206 	br	2036100 <tcp_process+0x3e0>
 20360f8:	e0bfff17 	ldw	r2,-4(fp)
 20360fc:	10800e8b 	ldhu	r2,58(r2)
 2036100:	e0ffff17 	ldw	r3,-4(fp)
 2036104:	1880140d 	sth	r2,80(r3)
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 2036108:	e0bfff17 	ldw	r2,-4(fp)
 203610c:	10801b0b 	ldhu	r2,108(r2)
 2036110:	10bfffc4 	addi	r2,r2,-1
 2036114:	1007883a 	mov	r3,r2
 2036118:	e0bfff17 	ldw	r2,-4(fp)
 203611c:	10c01b0d 	sth	r3,108(r2)
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 2036120:	e0bfff17 	ldw	r2,-4(fp)
 2036124:	10801d17 	ldw	r2,116(r2)
 2036128:	e0bffd15 	stw	r2,-12(fp)
      pcb->unacked = rseg->next;
 203612c:	e0bffd17 	ldw	r2,-12(fp)
 2036130:	10c00017 	ldw	r3,0(r2)
 2036134:	e0bfff17 	ldw	r2,-4(fp)
 2036138:	10c01d15 	stw	r3,116(r2)
      tcp_seg_free(rseg);
 203613c:	e13ffd17 	ldw	r4,-12(fp)
 2036140:	201d2e80 	call	201d2e8 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 2036144:	e0bfff17 	ldw	r2,-4(fp)
 2036148:	10801d17 	ldw	r2,116(r2)
 203614c:	1000041e 	bne	r2,zero,2036160 <tcp_process+0x440>
        pcb->rtime = -1;
 2036150:	e0bfff17 	ldw	r2,-4(fp)
 2036154:	00ffffc4 	movi	r3,-1
 2036158:	10c00e0d 	sth	r3,56(r2)
 203615c:	00000406 	br	2036170 <tcp_process+0x450>
      else {
        pcb->rtime = 0;
 2036160:	e0bfff17 	ldw	r2,-4(fp)
 2036164:	10000e0d 	sth	zero,56(r2)
        pcb->nrtx = 0;
 2036168:	e0bfff17 	ldw	r2,-4(fp)
 203616c:	10001285 	stb	zero,74(r2)
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 2036170:	e0bfff17 	ldw	r2,-4(fp)
 2036174:	10802217 	ldw	r2,136(r2)
 2036178:	10000a26 	beq	r2,zero,20361a4 <tcp_process+0x484>
 203617c:	e0bfff17 	ldw	r2,-4(fp)
 2036180:	10802217 	ldw	r2,136(r2)
 2036184:	e0ffff17 	ldw	r3,-4(fp)
 2036188:	18c00417 	ldw	r3,16(r3)
 203618c:	000d883a 	mov	r6,zero
 2036190:	e17fff17 	ldw	r5,-4(fp)
 2036194:	1809883a 	mov	r4,r3
 2036198:	103ee83a 	callr	r2
 203619c:	e0bffc45 	stb	r2,-15(fp)
 20361a0:	00000106 	br	20361a8 <tcp_process+0x488>
 20361a4:	e03ffc45 	stb	zero,-15(fp)
      if (err == ERR_ABRT) {
 20361a8:	e0bffc47 	ldb	r2,-15(fp)
 20361ac:	10bffd98 	cmpnei	r2,r2,-10
 20361b0:	1000021e 	bne	r2,zero,20361bc <tcp_process+0x49c>
        return ERR_ABRT;
 20361b4:	00bffd84 	movi	r2,-10
 20361b8:	00018106 	br	20367c0 <tcp_process+0xaa0>
      }
      tcp_ack_now(pcb);
 20361bc:	e0bfff17 	ldw	r2,-4(fp)
 20361c0:	10800883 	ldbu	r2,34(r2)
 20361c4:	10800094 	ori	r2,r2,2
 20361c8:	1007883a 	mov	r3,r2
 20361cc:	e0bfff17 	ldw	r2,-4(fp)
 20361d0:	10c00885 	stb	r3,34(r2)
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
 20361d4:	00016c06 	br	2036788 <tcp_process+0xa68>
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
 20361d8:	d0a81d03 	ldbu	r2,-24460(gp)
 20361dc:	10803fcc 	andi	r2,r2,255
 20361e0:	1080040c 	andi	r2,r2,16
 20361e4:	10016826 	beq	r2,zero,2036788 <tcp_process+0xa68>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 20361e8:	d2281c17 	ldw	r8,-24464(gp)
 20361ec:	d0a81d8b 	ldhu	r2,-24458(gp)
 20361f0:	10ffffcc 	andi	r3,r2,65535
 20361f4:	d0a81b17 	ldw	r2,-24468(gp)
 20361f8:	188b883a 	add	r5,r3,r2
        tcphdr->dest, tcphdr->src);
 20361fc:	d0a81917 	ldw	r2,-24476(gp)
 2036200:	10c00083 	ldbu	r3,2(r2)
 2036204:	108000c3 	ldbu	r2,3(r2)
 2036208:	1004923a 	slli	r2,r2,8
 203620c:	10c4b03a 	or	r2,r2,r3
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 2036210:	10ffffcc 	andi	r3,r2,65535
        tcphdr->dest, tcphdr->src);
 2036214:	d0a81917 	ldw	r2,-24476(gp)
 2036218:	11000003 	ldbu	r4,0(r2)
 203621c:	10800043 	ldbu	r2,1(r2)
 2036220:	1004923a 	slli	r2,r2,8
 2036224:	1104b03a 	or	r2,r2,r4
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 2036228:	10bfffcc 	andi	r2,r2,65535
 203622c:	d8800115 	stw	r2,4(sp)
 2036230:	d8c00015 	stw	r3,0(sp)
 2036234:	d1e81204 	addi	r7,gp,-24504
 2036238:	d1a81404 	addi	r6,gp,-24496
 203623c:	4009883a 	mov	r4,r8
 2036240:	20206e40 	call	20206e4 <tcp_rst>
        tcphdr->dest, tcphdr->src);
    }
    break;
 2036244:	00015006 	br	2036788 <tcp_process+0xa68>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 2036248:	d0a81d03 	ldbu	r2,-24460(gp)
 203624c:	10803fcc 	andi	r2,r2,255
 2036250:	1080040c 	andi	r2,r2,16
 2036254:	10006626 	beq	r2,zero,20363f0 <tcp_process+0x6d0>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 2036258:	d0e81c17 	ldw	r3,-24464(gp)
 203625c:	e0bfff17 	ldw	r2,-4(fp)
 2036260:	10801317 	ldw	r2,76(r2)
 2036264:	1885c83a 	sub	r2,r3,r2
 2036268:	10bfffc4 	addi	r2,r2,-1
 203626c:	10004816 	blt	r2,zero,2036390 <tcp_process+0x670>
 2036270:	d0e81c17 	ldw	r3,-24464(gp)
 2036274:	e0bfff17 	ldw	r2,-4(fp)
 2036278:	10801517 	ldw	r2,84(r2)
 203627c:	1885c83a 	sub	r2,r3,r2
 2036280:	00804316 	blt	zero,r2,2036390 <tcp_process+0x670>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
 2036284:	e0bfff17 	ldw	r2,-4(fp)
 2036288:	00c00104 	movi	r3,4
 203628c:	10c00615 	stw	r3,24(r2)
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 2036290:	e0bfff17 	ldw	r2,-4(fp)
 2036294:	10800517 	ldw	r2,20(r2)
 2036298:	10000a26 	beq	r2,zero,20362c4 <tcp_process+0x5a4>
 203629c:	e0bfff17 	ldw	r2,-4(fp)
 20362a0:	10800517 	ldw	r2,20(r2)
 20362a4:	e0ffff17 	ldw	r3,-4(fp)
 20362a8:	18c00417 	ldw	r3,16(r3)
 20362ac:	000d883a 	mov	r6,zero
 20362b0:	e17fff17 	ldw	r5,-4(fp)
 20362b4:	1809883a 	mov	r4,r3
 20362b8:	103ee83a 	callr	r2
 20362bc:	e0bffc45 	stb	r2,-15(fp)
 20362c0:	00000206 	br	20362cc <tcp_process+0x5ac>
 20362c4:	00bffc84 	movi	r2,-14
 20362c8:	e0bffc45 	stb	r2,-15(fp)
        if (err != ERR_OK) {
 20362cc:	e0bffc47 	ldb	r2,-15(fp)
 20362d0:	10000726 	beq	r2,zero,20362f0 <tcp_process+0x5d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 20362d4:	e0bffc47 	ldb	r2,-15(fp)
 20362d8:	10bffda0 	cmpeqi	r2,r2,-10
 20362dc:	1000021e 	bne	r2,zero,20362e8 <tcp_process+0x5c8>
            tcp_abort(pcb);
 20362e0:	e13fff17 	ldw	r4,-4(fp)
 20362e4:	201be6c0 	call	201be6c <tcp_abort>
          }
          return ERR_ABRT;
 20362e8:	00bffd84 	movi	r2,-10
 20362ec:	00013406 	br	20367c0 <tcp_process+0xaa0>
        }
        old_cwnd = pcb->cwnd;
 20362f0:	e0bfff17 	ldw	r2,-4(fp)
 20362f4:	1080140b 	ldhu	r2,80(r2)
 20362f8:	e0bffe0d 	sth	r2,-8(fp)
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 20362fc:	e13fff17 	ldw	r4,-4(fp)
 2036300:	2036a740 	call	2036a74 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
 2036304:	e0bfff17 	ldw	r2,-4(fp)
 2036308:	10801a0b 	ldhu	r2,104(r2)
 203630c:	10bfffcc 	andi	r2,r2,65535
 2036310:	10000626 	beq	r2,zero,203632c <tcp_process+0x60c>
          pcb->acked--;
 2036314:	e0bfff17 	ldw	r2,-4(fp)
 2036318:	10801a0b 	ldhu	r2,104(r2)
 203631c:	10bfffc4 	addi	r2,r2,-1
 2036320:	1007883a 	mov	r3,r2
 2036324:	e0bfff17 	ldw	r2,-4(fp)
 2036328:	10c01a0d 	sth	r3,104(r2)
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 203632c:	e0bffe0b 	ldhu	r2,-8(fp)
 2036330:	10800058 	cmpnei	r2,r2,1
 2036334:	1000041e 	bne	r2,zero,2036348 <tcp_process+0x628>
 2036338:	e0bfff17 	ldw	r2,-4(fp)
 203633c:	10800e8b 	ldhu	r2,58(r2)
 2036340:	1085883a 	add	r2,r2,r2
 2036344:	00000206 	br	2036350 <tcp_process+0x630>
 2036348:	e0bfff17 	ldw	r2,-4(fp)
 203634c:	10800e8b 	ldhu	r2,58(r2)
 2036350:	e0ffff17 	ldw	r3,-4(fp)
 2036354:	1880140d 	sth	r2,80(r3)

        if (recv_flags & TF_GOT_FIN) {
 2036358:	d0a81e03 	ldbu	r2,-24456(gp)
 203635c:	10803fcc 	andi	r2,r2,255
 2036360:	1080080c 	andi	r2,r2,32
 2036364:	10002e26 	beq	r2,zero,2036420 <tcp_process+0x700>
          tcp_ack_now(pcb);
 2036368:	e0bfff17 	ldw	r2,-4(fp)
 203636c:	10800883 	ldbu	r2,34(r2)
 2036370:	10800094 	ori	r2,r2,2
 2036374:	1007883a 	mov	r3,r2
 2036378:	e0bfff17 	ldw	r2,-4(fp)
 203637c:	10c00885 	stb	r3,34(r2)
          pcb->state = CLOSE_WAIT;
 2036380:	e0bfff17 	ldw	r2,-4(fp)
 2036384:	00c001c4 	movi	r3,7
 2036388:	10c00615 	stw	r3,24(r2)
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 203638c:	00002406 	br	2036420 <tcp_process+0x700>
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 2036390:	d2281c17 	ldw	r8,-24464(gp)
 2036394:	d0a81d8b 	ldhu	r2,-24458(gp)
 2036398:	10ffffcc 	andi	r3,r2,65535
 203639c:	d0a81b17 	ldw	r2,-24468(gp)
 20363a0:	188b883a 	add	r5,r3,r2
                tcphdr->dest, tcphdr->src);
 20363a4:	d0a81917 	ldw	r2,-24476(gp)
 20363a8:	10c00083 	ldbu	r3,2(r2)
 20363ac:	108000c3 	ldbu	r2,3(r2)
 20363b0:	1004923a 	slli	r2,r2,8
 20363b4:	10c4b03a 	or	r2,r2,r3
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 20363b8:	10ffffcc 	andi	r3,r2,65535
                tcphdr->dest, tcphdr->src);
 20363bc:	d0a81917 	ldw	r2,-24476(gp)
 20363c0:	11000003 	ldbu	r4,0(r2)
 20363c4:	10800043 	ldbu	r2,1(r2)
 20363c8:	1004923a 	slli	r2,r2,8
 20363cc:	1104b03a 	or	r2,r2,r4
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 20363d0:	10bfffcc 	andi	r2,r2,65535
 20363d4:	d8800115 	stw	r2,4(sp)
 20363d8:	d8c00015 	stw	r3,0(sp)
 20363dc:	d1e81204 	addi	r7,gp,-24504
 20363e0:	d1a81404 	addi	r6,gp,-24496
 20363e4:	4009883a 	mov	r4,r8
 20363e8:	20206e40 	call	20206e4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 20363ec:	0000e806 	br	2036790 <tcp_process+0xa70>
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
                tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 20363f0:	d0a81d03 	ldbu	r2,-24460(gp)
 20363f4:	10803fcc 	andi	r2,r2,255
 20363f8:	1080008c 	andi	r2,r2,2
 20363fc:	1000e426 	beq	r2,zero,2036790 <tcp_process+0xa70>
 2036400:	e0bfff17 	ldw	r2,-4(fp)
 2036404:	10800b17 	ldw	r2,44(r2)
 2036408:	10ffffc4 	addi	r3,r2,-1
 203640c:	d0a81b17 	ldw	r2,-24468(gp)
 2036410:	1880df1e 	bne	r3,r2,2036790 <tcp_process+0xa70>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
 2036414:	e13fff17 	ldw	r4,-4(fp)
 2036418:	2020b640 	call	2020b64 <tcp_rexmit>
    }
    break;
 203641c:	0000dc06 	br	2036790 <tcp_process+0xa70>
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 2036420:	0001883a 	nop
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 2036424:	0000da06 	br	2036790 <tcp_process+0xa70>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 2036428:	e13fff17 	ldw	r4,-4(fp)
 203642c:	2036a740 	call	2036a74 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 2036430:	d0a81e03 	ldbu	r2,-24456(gp)
 2036434:	10803fcc 	andi	r2,r2,255
 2036438:	1080080c 	andi	r2,r2,32
 203643c:	1000d626 	beq	r2,zero,2036798 <tcp_process+0xa78>
      tcp_ack_now(pcb);
 2036440:	e0bfff17 	ldw	r2,-4(fp)
 2036444:	10800883 	ldbu	r2,34(r2)
 2036448:	10800094 	ori	r2,r2,2
 203644c:	1007883a 	mov	r3,r2
 2036450:	e0bfff17 	ldw	r2,-4(fp)
 2036454:	10c00885 	stb	r3,34(r2)
      pcb->state = CLOSE_WAIT;
 2036458:	e0bfff17 	ldw	r2,-4(fp)
 203645c:	00c001c4 	movi	r3,7
 2036460:	10c00615 	stw	r3,24(r2)
    }
    break;
 2036464:	0000cc06 	br	2036798 <tcp_process+0xa78>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 2036468:	e13fff17 	ldw	r4,-4(fp)
 203646c:	2036a740 	call	2036a74 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 2036470:	d0a81e03 	ldbu	r2,-24456(gp)
 2036474:	10803fcc 	andi	r2,r2,255
 2036478:	1080080c 	andi	r2,r2,32
 203647c:	10004026 	beq	r2,zero,2036580 <tcp_process+0x860>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 2036480:	d0a81d03 	ldbu	r2,-24460(gp)
 2036484:	10803fcc 	andi	r2,r2,255
 2036488:	1080040c 	andi	r2,r2,16
 203648c:	10003226 	beq	r2,zero,2036558 <tcp_process+0x838>
 2036490:	e0bfff17 	ldw	r2,-4(fp)
 2036494:	10c01517 	ldw	r3,84(r2)
 2036498:	d0a81c17 	ldw	r2,-24464(gp)
 203649c:	18802e1e 	bne	r3,r2,2036558 <tcp_process+0x838>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 20364a0:	e0bfff17 	ldw	r2,-4(fp)
 20364a4:	10800883 	ldbu	r2,34(r2)
 20364a8:	10800094 	ori	r2,r2,2
 20364ac:	1007883a 	mov	r3,r2
 20364b0:	e0bfff17 	ldw	r2,-4(fp)
 20364b4:	10c00885 	stb	r3,34(r2)
        tcp_pcb_purge(pcb);
 20364b8:	e13fff17 	ldw	r4,-4(fp)
 20364bc:	201d9440 	call	201d944 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 20364c0:	d0e7f717 	ldw	r3,-24612(gp)
 20364c4:	e0bfff17 	ldw	r2,-4(fp)
 20364c8:	1880041e 	bne	r3,r2,20364dc <tcp_process+0x7bc>
 20364cc:	d0a7f717 	ldw	r2,-24612(gp)
 20364d0:	10800317 	ldw	r2,12(r2)
 20364d4:	d0a7f715 	stw	r2,-24612(gp)
 20364d8:	00001106 	br	2036520 <tcp_process+0x800>
 20364dc:	d0a7f717 	ldw	r2,-24612(gp)
 20364e0:	d0a7fa15 	stw	r2,-24600(gp)
 20364e4:	00000c06 	br	2036518 <tcp_process+0x7f8>
 20364e8:	d0a7fa17 	ldw	r2,-24600(gp)
 20364ec:	10c00317 	ldw	r3,12(r2)
 20364f0:	e0bfff17 	ldw	r2,-4(fp)
 20364f4:	1880051e 	bne	r3,r2,203650c <tcp_process+0x7ec>
 20364f8:	d0a7fa17 	ldw	r2,-24600(gp)
 20364fc:	e0ffff17 	ldw	r3,-4(fp)
 2036500:	18c00317 	ldw	r3,12(r3)
 2036504:	10c00315 	stw	r3,12(r2)
 2036508:	00000506 	br	2036520 <tcp_process+0x800>
 203650c:	d0a7fa17 	ldw	r2,-24600(gp)
 2036510:	10800317 	ldw	r2,12(r2)
 2036514:	d0a7fa15 	stw	r2,-24600(gp)
 2036518:	d0a7fa17 	ldw	r2,-24600(gp)
 203651c:	103ff21e 	bne	r2,zero,20364e8 <__alt_mem_mem_0+0xfd0164e8>
 2036520:	e0bfff17 	ldw	r2,-4(fp)
 2036524:	10000315 	stw	zero,12(r2)
 2036528:	00800044 	movi	r2,1
 203652c:	d0a7f685 	stb	r2,-24614(gp)
        pcb->state = TIME_WAIT;
 2036530:	e0bfff17 	ldw	r2,-4(fp)
 2036534:	00c00284 	movi	r3,10
 2036538:	10c00615 	stw	r3,24(r2)
        TCP_REG(&tcp_tw_pcbs, pcb);
 203653c:	d0e7fc17 	ldw	r3,-24592(gp)
 2036540:	e0bfff17 	ldw	r2,-4(fp)
 2036544:	10c00315 	stw	r3,12(r2)
 2036548:	e0bfff17 	ldw	r2,-4(fp)
 203654c:	d0a7fc15 	stw	r2,-24592(gp)
 2036550:	202140c0 	call	202140c <tcp_timer_needed>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 2036554:	00009206 	br	20367a0 <tcp_process+0xa80>
        tcp_pcb_purge(pcb);
        TCP_RMV_ACTIVE(pcb);
        pcb->state = TIME_WAIT;
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
 2036558:	e0bfff17 	ldw	r2,-4(fp)
 203655c:	10800883 	ldbu	r2,34(r2)
 2036560:	10800094 	ori	r2,r2,2
 2036564:	1007883a 	mov	r3,r2
 2036568:	e0bfff17 	ldw	r2,-4(fp)
 203656c:	10c00885 	stb	r3,34(r2)
        pcb->state = CLOSING;
 2036570:	e0bfff17 	ldw	r2,-4(fp)
 2036574:	00c00204 	movi	r3,8
 2036578:	10c00615 	stw	r3,24(r2)
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 203657c:	00008806 	br	20367a0 <tcp_process+0xa80>
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 2036580:	d0a81d03 	ldbu	r2,-24460(gp)
 2036584:	10803fcc 	andi	r2,r2,255
 2036588:	1080040c 	andi	r2,r2,16
 203658c:	10008426 	beq	r2,zero,20367a0 <tcp_process+0xa80>
 2036590:	e0bfff17 	ldw	r2,-4(fp)
 2036594:	10c01517 	ldw	r3,84(r2)
 2036598:	d0a81c17 	ldw	r2,-24464(gp)
 203659c:	1880801e 	bne	r3,r2,20367a0 <tcp_process+0xa80>
      pcb->state = FIN_WAIT_2;
 20365a0:	e0bfff17 	ldw	r2,-4(fp)
 20365a4:	00c00184 	movi	r3,6
 20365a8:	10c00615 	stw	r3,24(r2)
    }
    break;
 20365ac:	00007c06 	br	20367a0 <tcp_process+0xa80>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 20365b0:	e13fff17 	ldw	r4,-4(fp)
 20365b4:	2036a740 	call	2036a74 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 20365b8:	d0a81e03 	ldbu	r2,-24456(gp)
 20365bc:	10803fcc 	andi	r2,r2,255
 20365c0:	1080080c 	andi	r2,r2,32
 20365c4:	10007826 	beq	r2,zero,20367a8 <tcp_process+0xa88>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 20365c8:	e0bfff17 	ldw	r2,-4(fp)
 20365cc:	10800883 	ldbu	r2,34(r2)
 20365d0:	10800094 	ori	r2,r2,2
 20365d4:	1007883a 	mov	r3,r2
 20365d8:	e0bfff17 	ldw	r2,-4(fp)
 20365dc:	10c00885 	stb	r3,34(r2)
      tcp_pcb_purge(pcb);
 20365e0:	e13fff17 	ldw	r4,-4(fp)
 20365e4:	201d9440 	call	201d944 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 20365e8:	d0e7f717 	ldw	r3,-24612(gp)
 20365ec:	e0bfff17 	ldw	r2,-4(fp)
 20365f0:	1880041e 	bne	r3,r2,2036604 <tcp_process+0x8e4>
 20365f4:	d0a7f717 	ldw	r2,-24612(gp)
 20365f8:	10800317 	ldw	r2,12(r2)
 20365fc:	d0a7f715 	stw	r2,-24612(gp)
 2036600:	00001106 	br	2036648 <tcp_process+0x928>
 2036604:	d0a7f717 	ldw	r2,-24612(gp)
 2036608:	d0a7fa15 	stw	r2,-24600(gp)
 203660c:	00000c06 	br	2036640 <tcp_process+0x920>
 2036610:	d0a7fa17 	ldw	r2,-24600(gp)
 2036614:	10c00317 	ldw	r3,12(r2)
 2036618:	e0bfff17 	ldw	r2,-4(fp)
 203661c:	1880051e 	bne	r3,r2,2036634 <tcp_process+0x914>
 2036620:	d0a7fa17 	ldw	r2,-24600(gp)
 2036624:	e0ffff17 	ldw	r3,-4(fp)
 2036628:	18c00317 	ldw	r3,12(r3)
 203662c:	10c00315 	stw	r3,12(r2)
 2036630:	00000506 	br	2036648 <tcp_process+0x928>
 2036634:	d0a7fa17 	ldw	r2,-24600(gp)
 2036638:	10800317 	ldw	r2,12(r2)
 203663c:	d0a7fa15 	stw	r2,-24600(gp)
 2036640:	d0a7fa17 	ldw	r2,-24600(gp)
 2036644:	103ff21e 	bne	r2,zero,2036610 <__alt_mem_mem_0+0xfd016610>
 2036648:	e0bfff17 	ldw	r2,-4(fp)
 203664c:	10000315 	stw	zero,12(r2)
 2036650:	00800044 	movi	r2,1
 2036654:	d0a7f685 	stb	r2,-24614(gp)
      pcb->state = TIME_WAIT;
 2036658:	e0bfff17 	ldw	r2,-4(fp)
 203665c:	00c00284 	movi	r3,10
 2036660:	10c00615 	stw	r3,24(r2)
      TCP_REG(&tcp_tw_pcbs, pcb);
 2036664:	d0e7fc17 	ldw	r3,-24592(gp)
 2036668:	e0bfff17 	ldw	r2,-4(fp)
 203666c:	10c00315 	stw	r3,12(r2)
 2036670:	e0bfff17 	ldw	r2,-4(fp)
 2036674:	d0a7fc15 	stw	r2,-24592(gp)
 2036678:	202140c0 	call	202140c <tcp_timer_needed>
    }
    break;
 203667c:	00004a06 	br	20367a8 <tcp_process+0xa88>
  case CLOSING:
    tcp_receive(pcb);
 2036680:	e13fff17 	ldw	r4,-4(fp)
 2036684:	2036a740 	call	2036a74 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 2036688:	d0a81d03 	ldbu	r2,-24460(gp)
 203668c:	10803fcc 	andi	r2,r2,255
 2036690:	1080040c 	andi	r2,r2,16
 2036694:	10004626 	beq	r2,zero,20367b0 <tcp_process+0xa90>
 2036698:	e0bfff17 	ldw	r2,-4(fp)
 203669c:	10c01517 	ldw	r3,84(r2)
 20366a0:	d0a81c17 	ldw	r2,-24464(gp)
 20366a4:	1880421e 	bne	r3,r2,20367b0 <tcp_process+0xa90>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 20366a8:	e13fff17 	ldw	r4,-4(fp)
 20366ac:	201d9440 	call	201d944 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 20366b0:	d0e7f717 	ldw	r3,-24612(gp)
 20366b4:	e0bfff17 	ldw	r2,-4(fp)
 20366b8:	1880041e 	bne	r3,r2,20366cc <tcp_process+0x9ac>
 20366bc:	d0a7f717 	ldw	r2,-24612(gp)
 20366c0:	10800317 	ldw	r2,12(r2)
 20366c4:	d0a7f715 	stw	r2,-24612(gp)
 20366c8:	00001106 	br	2036710 <tcp_process+0x9f0>
 20366cc:	d0a7f717 	ldw	r2,-24612(gp)
 20366d0:	d0a7fa15 	stw	r2,-24600(gp)
 20366d4:	00000c06 	br	2036708 <tcp_process+0x9e8>
 20366d8:	d0a7fa17 	ldw	r2,-24600(gp)
 20366dc:	10c00317 	ldw	r3,12(r2)
 20366e0:	e0bfff17 	ldw	r2,-4(fp)
 20366e4:	1880051e 	bne	r3,r2,20366fc <tcp_process+0x9dc>
 20366e8:	d0a7fa17 	ldw	r2,-24600(gp)
 20366ec:	e0ffff17 	ldw	r3,-4(fp)
 20366f0:	18c00317 	ldw	r3,12(r3)
 20366f4:	10c00315 	stw	r3,12(r2)
 20366f8:	00000506 	br	2036710 <tcp_process+0x9f0>
 20366fc:	d0a7fa17 	ldw	r2,-24600(gp)
 2036700:	10800317 	ldw	r2,12(r2)
 2036704:	d0a7fa15 	stw	r2,-24600(gp)
 2036708:	d0a7fa17 	ldw	r2,-24600(gp)
 203670c:	103ff21e 	bne	r2,zero,20366d8 <__alt_mem_mem_0+0xfd0166d8>
 2036710:	e0bfff17 	ldw	r2,-4(fp)
 2036714:	10000315 	stw	zero,12(r2)
 2036718:	00800044 	movi	r2,1
 203671c:	d0a7f685 	stb	r2,-24614(gp)
      pcb->state = TIME_WAIT;
 2036720:	e0bfff17 	ldw	r2,-4(fp)
 2036724:	00c00284 	movi	r3,10
 2036728:	10c00615 	stw	r3,24(r2)
      TCP_REG(&tcp_tw_pcbs, pcb);
 203672c:	d0e7fc17 	ldw	r3,-24592(gp)
 2036730:	e0bfff17 	ldw	r2,-4(fp)
 2036734:	10c00315 	stw	r3,12(r2)
 2036738:	e0bfff17 	ldw	r2,-4(fp)
 203673c:	d0a7fc15 	stw	r2,-24592(gp)
 2036740:	202140c0 	call	202140c <tcp_timer_needed>
    }
    break;
 2036744:	00001a06 	br	20367b0 <tcp_process+0xa90>
  case LAST_ACK:
    tcp_receive(pcb);
 2036748:	e13fff17 	ldw	r4,-4(fp)
 203674c:	2036a740 	call	2036a74 <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 2036750:	d0a81d03 	ldbu	r2,-24460(gp)
 2036754:	10803fcc 	andi	r2,r2,255
 2036758:	1080040c 	andi	r2,r2,16
 203675c:	10001626 	beq	r2,zero,20367b8 <tcp_process+0xa98>
 2036760:	e0bfff17 	ldw	r2,-4(fp)
 2036764:	10c01517 	ldw	r3,84(r2)
 2036768:	d0a81c17 	ldw	r2,-24464(gp)
 203676c:	1880121e 	bne	r3,r2,20367b8 <tcp_process+0xa98>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 2036770:	d0a81e03 	ldbu	r2,-24456(gp)
 2036774:	10800414 	ori	r2,r2,16
 2036778:	d0a81e05 	stb	r2,-24456(gp)
    }
    break;
 203677c:	00000e06 	br	20367b8 <tcp_process+0xa98>
  default:
    break;
 2036780:	0001883a 	nop
 2036784:	00000d06 	br	20367bc <tcp_process+0xa9c>
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
 2036788:	0001883a 	nop
 203678c:	00000b06 	br	20367bc <tcp_process+0xa9c>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 2036790:	0001883a 	nop
 2036794:	00000906 	br	20367bc <tcp_process+0xa9c>
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) { /* passive close */
      tcp_ack_now(pcb);
      pcb->state = CLOSE_WAIT;
    }
    break;
 2036798:	0001883a 	nop
 203679c:	00000706 	br	20367bc <tcp_process+0xa9c>
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 20367a0:	0001883a 	nop
 20367a4:	00000506 	br	20367bc <tcp_process+0xa9c>
      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
 20367a8:	0001883a 	nop
 20367ac:	00000306 	br	20367bc <tcp_process+0xa9c>
      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
 20367b0:	0001883a 	nop
 20367b4:	00000106 	br	20367bc <tcp_process+0xa9c>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
    }
    break;
 20367b8:	0001883a 	nop
  default:
    break;
  }
  return ERR_OK;
 20367bc:	0005883a 	mov	r2,zero
}
 20367c0:	e037883a 	mov	sp,fp
 20367c4:	dfc00117 	ldw	ra,4(sp)
 20367c8:	df000017 	ldw	fp,0(sp)
 20367cc:	dec00204 	addi	sp,sp,8
 20367d0:	f800283a 	ret

020367d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 20367d4:	defffb04 	addi	sp,sp,-20
 20367d8:	dfc00415 	stw	ra,16(sp)
 20367dc:	df000315 	stw	fp,12(sp)
 20367e0:	df000304 	addi	fp,sp,12
 20367e4:	e13ffe15 	stw	r4,-8(fp)
 20367e8:	e17fff15 	stw	r5,-4(fp)
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 20367ec:	e0bffe17 	ldw	r2,-8(fp)
 20367f0:	10800417 	ldw	r2,16(r2)
 20367f4:	10c00303 	ldbu	r3,12(r2)
 20367f8:	10800343 	ldbu	r2,13(r2)
 20367fc:	1004923a 	slli	r2,r2,8
 2036800:	10c4b03a 	or	r2,r2,r3
 2036804:	10bfffcc 	andi	r2,r2,65535
 2036808:	1004d23a 	srli	r2,r2,8
 203680c:	10ffffcc 	andi	r3,r2,65535
 2036810:	e0bffe17 	ldw	r2,-8(fp)
 2036814:	10800417 	ldw	r2,16(r2)
 2036818:	11000303 	ldbu	r4,12(r2)
 203681c:	10800343 	ldbu	r2,13(r2)
 2036820:	1004923a 	slli	r2,r2,8
 2036824:	1104b03a 	or	r2,r2,r4
 2036828:	10bfffcc 	andi	r2,r2,65535
 203682c:	1004923a 	slli	r2,r2,8
 2036830:	10bfffcc 	andi	r2,r2,65535
 2036834:	1884b03a 	or	r2,r3,r2
 2036838:	1080004c 	andi	r2,r2,1
 203683c:	10003b26 	beq	r2,zero,203692c <tcp_oos_insert_segment+0x158>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 2036840:	e13fff17 	ldw	r4,-4(fp)
 2036844:	201d2940 	call	201d294 <tcp_segs_free>
    next = NULL;
 2036848:	e03fff15 	stw	zero,-4(fp)
 203684c:	00008006 	br	2036a50 <tcp_oos_insert_segment+0x27c>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 2036850:	e0bfff17 	ldw	r2,-4(fp)
 2036854:	10800417 	ldw	r2,16(r2)
 2036858:	10c00303 	ldbu	r3,12(r2)
 203685c:	10800343 	ldbu	r2,13(r2)
 2036860:	1004923a 	slli	r2,r2,8
 2036864:	10c4b03a 	or	r2,r2,r3
 2036868:	10bfffcc 	andi	r2,r2,65535
 203686c:	1004d23a 	srli	r2,r2,8
 2036870:	10ffffcc 	andi	r3,r2,65535
 2036874:	e0bfff17 	ldw	r2,-4(fp)
 2036878:	10800417 	ldw	r2,16(r2)
 203687c:	11000303 	ldbu	r4,12(r2)
 2036880:	10800343 	ldbu	r2,13(r2)
 2036884:	1004923a 	slli	r2,r2,8
 2036888:	1104b03a 	or	r2,r2,r4
 203688c:	10bfffcc 	andi	r2,r2,65535
 2036890:	1004923a 	slli	r2,r2,8
 2036894:	10bfffcc 	andi	r2,r2,65535
 2036898:	1884b03a 	or	r2,r3,r2
 203689c:	1080004c 	andi	r2,r2,1
 20368a0:	10001b26 	beq	r2,zero,2036910 <tcp_oos_insert_segment+0x13c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 20368a4:	e0bffe17 	ldw	r2,-8(fp)
 20368a8:	10800417 	ldw	r2,16(r2)
 20368ac:	e0fffe17 	ldw	r3,-8(fp)
 20368b0:	18c00417 	ldw	r3,16(r3)
 20368b4:	19000303 	ldbu	r4,12(r3)
 20368b8:	18c00343 	ldbu	r3,13(r3)
 20368bc:	1806923a 	slli	r3,r3,8
 20368c0:	1906b03a 	or	r3,r3,r4
 20368c4:	18c04014 	ori	r3,r3,256
 20368c8:	180d883a 	mov	r6,r3
 20368cc:	30ffffcc 	andi	r3,r6,65535
 20368d0:	19403fcc 	andi	r5,r3,255
 20368d4:	10c00303 	ldbu	r3,12(r2)
 20368d8:	1806703a 	and	r3,r3,zero
 20368dc:	1809883a 	mov	r4,r3
 20368e0:	2807883a 	mov	r3,r5
 20368e4:	20c6b03a 	or	r3,r4,r3
 20368e8:	10c00305 	stb	r3,12(r2)
 20368ec:	30ffffcc 	andi	r3,r6,65535
 20368f0:	1806d23a 	srli	r3,r3,8
 20368f4:	197fffcc 	andi	r5,r3,65535
 20368f8:	10c00343 	ldbu	r3,13(r2)
 20368fc:	1806703a 	and	r3,r3,zero
 2036900:	1809883a 	mov	r4,r3
 2036904:	2807883a 	mov	r3,r5
 2036908:	20c6b03a 	or	r3,r4,r3
 203690c:	10c00345 	stb	r3,13(r2)
      }
      old_seg = next;
 2036910:	e0bfff17 	ldw	r2,-4(fp)
 2036914:	e0bffd15 	stw	r2,-12(fp)
      next = next->next;
 2036918:	e0bfff17 	ldw	r2,-4(fp)
 203691c:	10800017 	ldw	r2,0(r2)
 2036920:	e0bfff15 	stw	r2,-4(fp)
      tcp_seg_free(old_seg);
 2036924:	e13ffd17 	ldw	r4,-12(fp)
 2036928:	201d2e80 	call	201d2e8 <tcp_seg_free>
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 203692c:	e0bfff17 	ldw	r2,-4(fp)
 2036930:	10001826 	beq	r2,zero,2036994 <tcp_oos_insert_segment+0x1c0>
           TCP_SEQ_GEQ((seqno + cseg->len),
 2036934:	e0bffe17 	ldw	r2,-8(fp)
 2036938:	1080020b 	ldhu	r2,8(r2)
 203693c:	10ffffcc 	andi	r3,r2,65535
 2036940:	d0a81b17 	ldw	r2,-24468(gp)
 2036944:	1887883a 	add	r3,r3,r2
 2036948:	e0bfff17 	ldw	r2,-4(fp)
 203694c:	10800417 	ldw	r2,16(r2)
 2036950:	11000103 	ldbu	r4,4(r2)
 2036954:	11400143 	ldbu	r5,5(r2)
 2036958:	280a923a 	slli	r5,r5,8
 203695c:	2908b03a 	or	r4,r5,r4
 2036960:	11400183 	ldbu	r5,6(r2)
 2036964:	280a943a 	slli	r5,r5,16
 2036968:	2908b03a 	or	r4,r5,r4
 203696c:	108001c3 	ldbu	r2,7(r2)
 2036970:	1004963a 	slli	r2,r2,24
 2036974:	1104b03a 	or	r2,r2,r4
 2036978:	1009883a 	mov	r4,r2
 203697c:	e0bfff17 	ldw	r2,-4(fp)
 2036980:	1080020b 	ldhu	r2,8(r2)
 2036984:	10bfffcc 	andi	r2,r2,65535
 2036988:	2085883a 	add	r2,r4,r2
 203698c:	1885c83a 	sub	r2,r3,r2
    next = NULL;
  }
  else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
 2036990:	103faf0e 	bge	r2,zero,2036850 <__alt_mem_mem_0+0xfd016850>
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
 2036994:	e0bfff17 	ldw	r2,-4(fp)
 2036998:	10002d26 	beq	r2,zero,2036a50 <tcp_oos_insert_segment+0x27c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 203699c:	e0bffe17 	ldw	r2,-8(fp)
 20369a0:	1080020b 	ldhu	r2,8(r2)
 20369a4:	10ffffcc 	andi	r3,r2,65535
 20369a8:	d0a81b17 	ldw	r2,-24468(gp)
 20369ac:	1887883a 	add	r3,r3,r2
 20369b0:	e0bfff17 	ldw	r2,-4(fp)
 20369b4:	10800417 	ldw	r2,16(r2)
 20369b8:	11000103 	ldbu	r4,4(r2)
 20369bc:	11400143 	ldbu	r5,5(r2)
 20369c0:	280a923a 	slli	r5,r5,8
 20369c4:	2908b03a 	or	r4,r5,r4
 20369c8:	11400183 	ldbu	r5,6(r2)
 20369cc:	280a943a 	slli	r5,r5,16
 20369d0:	2908b03a 	or	r4,r5,r4
 20369d4:	108001c3 	ldbu	r2,7(r2)
 20369d8:	1004963a 	slli	r2,r2,24
 20369dc:	1104b03a 	or	r2,r2,r4
 20369e0:	1885c83a 	sub	r2,r3,r2
      }
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
 20369e4:	00801a0e 	bge	zero,r2,2036a50 <tcp_oos_insert_segment+0x27c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 20369e8:	e0bfff17 	ldw	r2,-4(fp)
 20369ec:	10800417 	ldw	r2,16(r2)
 20369f0:	10c00103 	ldbu	r3,4(r2)
 20369f4:	11000143 	ldbu	r4,5(r2)
 20369f8:	2008923a 	slli	r4,r4,8
 20369fc:	20c6b03a 	or	r3,r4,r3
 2036a00:	11000183 	ldbu	r4,6(r2)
 2036a04:	2008943a 	slli	r4,r4,16
 2036a08:	20c6b03a 	or	r3,r4,r3
 2036a0c:	108001c3 	ldbu	r2,7(r2)
 2036a10:	1004963a 	slli	r2,r2,24
 2036a14:	10c4b03a 	or	r2,r2,r3
 2036a18:	1007883a 	mov	r3,r2
 2036a1c:	d0a81b17 	ldw	r2,-24468(gp)
 2036a20:	1885c83a 	sub	r2,r3,r2
 2036a24:	1007883a 	mov	r3,r2
 2036a28:	e0bffe17 	ldw	r2,-8(fp)
 2036a2c:	10c0020d 	sth	r3,8(r2)
      pbuf_realloc(cseg->p, cseg->len);
 2036a30:	e0bffe17 	ldw	r2,-8(fp)
 2036a34:	10c00117 	ldw	r3,4(r2)
 2036a38:	e0bffe17 	ldw	r2,-8(fp)
 2036a3c:	1080020b 	ldhu	r2,8(r2)
 2036a40:	10bfffcc 	andi	r2,r2,65535
 2036a44:	100b883a 	mov	r5,r2
 2036a48:	1809883a 	mov	r4,r3
 2036a4c:	201a7100 	call	201a710 <pbuf_realloc>
    }
  }
  cseg->next = next;
 2036a50:	e0bffe17 	ldw	r2,-8(fp)
 2036a54:	e0ffff17 	ldw	r3,-4(fp)
 2036a58:	10c00015 	stw	r3,0(r2)
}
 2036a5c:	0001883a 	nop
 2036a60:	e037883a 	mov	sp,fp
 2036a64:	dfc00117 	ldw	ra,4(sp)
 2036a68:	df000017 	ldw	fp,0(sp)
 2036a6c:	dec00204 	addi	sp,sp,8
 2036a70:	f800283a 	ret

02036a74 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 2036a74:	defff204 	addi	sp,sp,-56
 2036a78:	dfc00d15 	stw	ra,52(sp)
 2036a7c:	df000c15 	stw	fp,48(sp)
 2036a80:	dc000b15 	stw	r16,44(sp)
 2036a84:	df000c04 	addi	fp,sp,48
 2036a88:	e13ffe15 	stw	r4,-8(fp)
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 2036a8c:	e03ff915 	stw	zero,-28(fp)
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 2036a90:	d0a81d03 	ldbu	r2,-24460(gp)
 2036a94:	10803fcc 	andi	r2,r2,255
 2036a98:	1080040c 	andi	r2,r2,16
 2036a9c:	1002ab26 	beq	r2,zero,203754c <tcp_receive+0xad8>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 2036aa0:	e0bffe17 	ldw	r2,-8(fp)
 2036aa4:	1080190b 	ldhu	r2,100(r2)
 2036aa8:	10ffffcc 	andi	r3,r2,65535
 2036aac:	e0bffe17 	ldw	r2,-8(fp)
 2036ab0:	10801717 	ldw	r2,92(r2)
 2036ab4:	1885883a 	add	r2,r3,r2
 2036ab8:	e0bffa15 	stw	r2,-24(fp)

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 2036abc:	e0bffe17 	ldw	r2,-8(fp)
 2036ac0:	10c01617 	ldw	r3,88(r2)
 2036ac4:	d0a81b17 	ldw	r2,-24468(gp)
 2036ac8:	1885c83a 	sub	r2,r3,r2
 2036acc:	10001816 	blt	r2,zero,2036b30 <tcp_receive+0xbc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 2036ad0:	e0bffe17 	ldw	r2,-8(fp)
 2036ad4:	10c01617 	ldw	r3,88(r2)
 2036ad8:	d0a81b17 	ldw	r2,-24468(gp)

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 2036adc:	1880051e 	bne	r3,r2,2036af4 <tcp_receive+0x80>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 2036ae0:	e0bffe17 	ldw	r2,-8(fp)
 2036ae4:	10c01717 	ldw	r3,92(r2)
 2036ae8:	d0a81c17 	ldw	r2,-24464(gp)
 2036aec:	1885c83a 	sub	r2,r3,r2
 2036af0:	10000f16 	blt	r2,zero,2036b30 <tcp_receive+0xbc>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 2036af4:	e0bffe17 	ldw	r2,-8(fp)
 2036af8:	10c01717 	ldw	r3,92(r2)
 2036afc:	d0a81c17 	ldw	r2,-24464(gp)
  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 2036b00:	18803f1e 	bne	r3,r2,2036c00 <tcp_receive+0x18c>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 2036b04:	d0a81917 	ldw	r2,-24476(gp)
 2036b08:	10c00383 	ldbu	r3,14(r2)
 2036b0c:	108003c3 	ldbu	r2,15(r2)
 2036b10:	1004923a 	slli	r2,r2,8
 2036b14:	10c4b03a 	or	r2,r2,r3
 2036b18:	1009883a 	mov	r4,r2
 2036b1c:	e0bffe17 	ldw	r2,-8(fp)
 2036b20:	10c0190b 	ldhu	r3,100(r2)
 2036b24:	20bfffcc 	andi	r2,r4,65535
 2036b28:	18ffffcc 	andi	r3,r3,65535
 2036b2c:	1880342e 	bgeu	r3,r2,2036c00 <tcp_receive+0x18c>
      pcb->snd_wnd = tcphdr->wnd;
 2036b30:	d0a81917 	ldw	r2,-24476(gp)
 2036b34:	10c00383 	ldbu	r3,14(r2)
 2036b38:	108003c3 	ldbu	r2,15(r2)
 2036b3c:	1004923a 	slli	r2,r2,8
 2036b40:	10c4b03a 	or	r2,r2,r3
 2036b44:	1007883a 	mov	r3,r2
 2036b48:	e0bffe17 	ldw	r2,-8(fp)
 2036b4c:	10c0190d 	sth	r3,100(r2)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
 2036b50:	e0bffe17 	ldw	r2,-8(fp)
 2036b54:	1100198b 	ldhu	r4,102(r2)
 2036b58:	d0a81917 	ldw	r2,-24476(gp)
 2036b5c:	10c00383 	ldbu	r3,14(r2)
 2036b60:	108003c3 	ldbu	r2,15(r2)
 2036b64:	1004923a 	slli	r2,r2,8
 2036b68:	10c4b03a 	or	r2,r2,r3
 2036b6c:	20ffffcc 	andi	r3,r4,65535
 2036b70:	10bfffcc 	andi	r2,r2,65535
 2036b74:	1880082e 	bgeu	r3,r2,2036b98 <tcp_receive+0x124>
        pcb->snd_wnd_max = tcphdr->wnd;
 2036b78:	d0a81917 	ldw	r2,-24476(gp)
 2036b7c:	10c00383 	ldbu	r3,14(r2)
 2036b80:	108003c3 	ldbu	r2,15(r2)
 2036b84:	1004923a 	slli	r2,r2,8
 2036b88:	10c4b03a 	or	r2,r2,r3
 2036b8c:	1007883a 	mov	r3,r2
 2036b90:	e0bffe17 	ldw	r2,-8(fp)
 2036b94:	10c0198d 	sth	r3,102(r2)
      }
      pcb->snd_wl1 = seqno;
 2036b98:	d0e81b17 	ldw	r3,-24468(gp)
 2036b9c:	e0bffe17 	ldw	r2,-8(fp)
 2036ba0:	10c01615 	stw	r3,88(r2)
      pcb->snd_wl2 = ackno;
 2036ba4:	d0e81c17 	ldw	r3,-24464(gp)
 2036ba8:	e0bffe17 	ldw	r2,-8(fp)
 2036bac:	10c01715 	stw	r3,92(r2)
      if (pcb->snd_wnd == 0) {
 2036bb0:	e0bffe17 	ldw	r2,-8(fp)
 2036bb4:	1080190b 	ldhu	r2,100(r2)
 2036bb8:	10bfffcc 	andi	r2,r2,65535
 2036bbc:	10000a1e 	bne	r2,zero,2036be8 <tcp_receive+0x174>
        if (pcb->persist_backoff == 0) {
 2036bc0:	e0bffe17 	ldw	r2,-8(fp)
 2036bc4:	10802843 	ldbu	r2,161(r2)
 2036bc8:	10803fcc 	andi	r2,r2,255
 2036bcc:	10000c1e 	bne	r2,zero,2036c00 <tcp_receive+0x18c>
          /* start persist timer */
          pcb->persist_cnt = 0;
 2036bd0:	e0bffe17 	ldw	r2,-8(fp)
 2036bd4:	10002805 	stb	zero,160(r2)
          pcb->persist_backoff = 1;
 2036bd8:	e0bffe17 	ldw	r2,-8(fp)
 2036bdc:	00c00044 	movi	r3,1
 2036be0:	10c02845 	stb	r3,161(r2)
 2036be4:	00000606 	br	2036c00 <tcp_receive+0x18c>
        }
      } else if (pcb->persist_backoff > 0) {
 2036be8:	e0bffe17 	ldw	r2,-8(fp)
 2036bec:	10802843 	ldbu	r2,161(r2)
 2036bf0:	10803fcc 	andi	r2,r2,255
 2036bf4:	10000226 	beq	r2,zero,2036c00 <tcp_receive+0x18c>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 2036bf8:	e0bffe17 	ldw	r2,-8(fp)
 2036bfc:	10002845 	stb	zero,161(r2)
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 2036c00:	d0e81c17 	ldw	r3,-24464(gp)
 2036c04:	e0bffe17 	ldw	r2,-8(fp)
 2036c08:	10801317 	ldw	r2,76(r2)
 2036c0c:	1885c83a 	sub	r2,r3,r2
 2036c10:	00804d16 	blt	zero,r2,2036d48 <tcp_receive+0x2d4>
      pcb->acked = 0;
 2036c14:	e0bffe17 	ldw	r2,-8(fp)
 2036c18:	10001a0d 	sth	zero,104(r2)
      /* Clause 2 */
      if (tcplen == 0) {
 2036c1c:	d0a81d8b 	ldhu	r2,-24458(gp)
 2036c20:	10bfffcc 	andi	r2,r2,65535
 2036c24:	1000431e 	bne	r2,zero,2036d34 <tcp_receive+0x2c0>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
 2036c28:	e0bffe17 	ldw	r2,-8(fp)
 2036c2c:	10c01717 	ldw	r3,92(r2)
 2036c30:	e0bffe17 	ldw	r2,-8(fp)
 2036c34:	1080190b 	ldhu	r2,100(r2)
 2036c38:	10bfffcc 	andi	r2,r2,65535
 2036c3c:	1887883a 	add	r3,r3,r2
 2036c40:	e0bffa17 	ldw	r2,-24(fp)
 2036c44:	18803b1e 	bne	r3,r2,2036d34 <tcp_receive+0x2c0>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 2036c48:	e0bffe17 	ldw	r2,-8(fp)
 2036c4c:	10800e0b 	ldhu	r2,56(r2)
 2036c50:	10bfffcc 	andi	r2,r2,65535
 2036c54:	10a0001c 	xori	r2,r2,32768
 2036c58:	10a00004 	addi	r2,r2,-32768
 2036c5c:	10003516 	blt	r2,zero,2036d34 <tcp_receive+0x2c0>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 2036c60:	e0bffe17 	ldw	r2,-8(fp)
 2036c64:	10c01317 	ldw	r3,76(r2)
 2036c68:	d0a81c17 	ldw	r2,-24464(gp)
 2036c6c:	1880311e 	bne	r3,r2,2036d34 <tcp_receive+0x2c0>
              found_dupack = 1;
 2036c70:	00800044 	movi	r2,1
 2036c74:	e0bff915 	stw	r2,-28(fp)
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 2036c78:	e0bffe17 	ldw	r2,-8(fp)
 2036c7c:	108012c3 	ldbu	r2,75(r2)
 2036c80:	10800044 	addi	r2,r2,1
 2036c84:	1009883a 	mov	r4,r2
 2036c88:	e0bffe17 	ldw	r2,-8(fp)
 2036c8c:	10c012c3 	ldbu	r3,75(r2)
 2036c90:	20803fcc 	andi	r2,r4,255
 2036c94:	18c03fcc 	andi	r3,r3,255
 2036c98:	1880062e 	bgeu	r3,r2,2036cb4 <tcp_receive+0x240>
                ++pcb->dupacks;
 2036c9c:	e0bffe17 	ldw	r2,-8(fp)
 2036ca0:	108012c3 	ldbu	r2,75(r2)
 2036ca4:	10800044 	addi	r2,r2,1
 2036ca8:	1007883a 	mov	r3,r2
 2036cac:	e0bffe17 	ldw	r2,-8(fp)
 2036cb0:	10c012c5 	stb	r3,75(r2)
              }
              if (pcb->dupacks > 3) {
 2036cb4:	e0bffe17 	ldw	r2,-8(fp)
 2036cb8:	108012c3 	ldbu	r2,75(r2)
 2036cbc:	10803fcc 	andi	r2,r2,255
 2036cc0:	10800130 	cmpltui	r2,r2,4
 2036cc4:	1000141e 	bne	r2,zero,2036d18 <tcp_receive+0x2a4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 2036cc8:	e0bffe17 	ldw	r2,-8(fp)
 2036ccc:	10c0140b 	ldhu	r3,80(r2)
 2036cd0:	e0bffe17 	ldw	r2,-8(fp)
 2036cd4:	10800e8b 	ldhu	r2,58(r2)
 2036cd8:	1885883a 	add	r2,r3,r2
 2036cdc:	1009883a 	mov	r4,r2
 2036ce0:	e0bffe17 	ldw	r2,-8(fp)
 2036ce4:	10c0140b 	ldhu	r3,80(r2)
 2036ce8:	20bfffcc 	andi	r2,r4,65535
 2036cec:	18ffffcc 	andi	r3,r3,65535
 2036cf0:	1880102e 	bgeu	r3,r2,2036d34 <tcp_receive+0x2c0>
                  pcb->cwnd += pcb->mss;
 2036cf4:	e0bffe17 	ldw	r2,-8(fp)
 2036cf8:	10c0140b 	ldhu	r3,80(r2)
 2036cfc:	e0bffe17 	ldw	r2,-8(fp)
 2036d00:	10800e8b 	ldhu	r2,58(r2)
 2036d04:	1885883a 	add	r2,r3,r2
 2036d08:	1007883a 	mov	r3,r2
 2036d0c:	e0bffe17 	ldw	r2,-8(fp)
 2036d10:	10c0140d 	sth	r3,80(r2)
 2036d14:	00000706 	br	2036d34 <tcp_receive+0x2c0>
                }
              } else if (pcb->dupacks == 3) {
 2036d18:	e0bffe17 	ldw	r2,-8(fp)
 2036d1c:	108012c3 	ldbu	r2,75(r2)
 2036d20:	10803fcc 	andi	r2,r2,255
 2036d24:	108000d8 	cmpnei	r2,r2,3
 2036d28:	1000021e 	bne	r2,zero,2036d34 <tcp_receive+0x2c0>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 2036d2c:	e13ffe17 	ldw	r4,-8(fp)
 2036d30:	2020e0c0 	call	2020e0c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 2036d34:	e0bff917 	ldw	r2,-28(fp)
 2036d38:	10015a1e 	bne	r2,zero,20372a4 <tcp_receive+0x830>
        pcb->dupacks = 0;
 2036d3c:	e0bffe17 	ldw	r2,-8(fp)
 2036d40:	100012c5 	stb	zero,75(r2)
 2036d44:	00015706 	br	20372a4 <tcp_receive+0x830>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
 2036d48:	d0e81c17 	ldw	r3,-24464(gp)
 2036d4c:	e0bffe17 	ldw	r2,-8(fp)
 2036d50:	10801317 	ldw	r2,76(r2)
 2036d54:	1885c83a 	sub	r2,r3,r2
 2036d58:	10bfffc4 	addi	r2,r2,-1
 2036d5c:	10011416 	blt	r2,zero,20371b0 <tcp_receive+0x73c>
 2036d60:	d0e81c17 	ldw	r3,-24464(gp)
 2036d64:	e0bffe17 	ldw	r2,-8(fp)
 2036d68:	10801517 	ldw	r2,84(r2)
 2036d6c:	1885c83a 	sub	r2,r3,r2
 2036d70:	00810f16 	blt	zero,r2,20371b0 <tcp_receive+0x73c>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 2036d74:	e0bffe17 	ldw	r2,-8(fp)
 2036d78:	10800883 	ldbu	r2,34(r2)
 2036d7c:	10803fcc 	andi	r2,r2,255
 2036d80:	1080010c 	andi	r2,r2,4
 2036d84:	10000b26 	beq	r2,zero,2036db4 <tcp_receive+0x340>
        pcb->flags &= ~TF_INFR;
 2036d88:	e0bffe17 	ldw	r2,-8(fp)
 2036d8c:	10c00883 	ldbu	r3,34(r2)
 2036d90:	00bffec4 	movi	r2,-5
 2036d94:	1884703a 	and	r2,r3,r2
 2036d98:	1007883a 	mov	r3,r2
 2036d9c:	e0bffe17 	ldw	r2,-8(fp)
 2036da0:	10c00885 	stb	r3,34(r2)
        pcb->cwnd = pcb->ssthresh;
 2036da4:	e0bffe17 	ldw	r2,-8(fp)
 2036da8:	10c0148b 	ldhu	r3,82(r2)
 2036dac:	e0bffe17 	ldw	r2,-8(fp)
 2036db0:	10c0140d 	sth	r3,80(r2)
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 2036db4:	e0bffe17 	ldw	r2,-8(fp)
 2036db8:	10001285 	stb	zero,74(r2)

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 2036dbc:	e0bffe17 	ldw	r2,-8(fp)
 2036dc0:	1080110b 	ldhu	r2,68(r2)
 2036dc4:	10bfffcc 	andi	r2,r2,65535
 2036dc8:	10a0001c 	xori	r2,r2,32768
 2036dcc:	10a00004 	addi	r2,r2,-32768
 2036dd0:	1005d0fa 	srai	r2,r2,3
 2036dd4:	1007883a 	mov	r3,r2
 2036dd8:	e0bffe17 	ldw	r2,-8(fp)
 2036ddc:	1080118b 	ldhu	r2,70(r2)
 2036de0:	1885883a 	add	r2,r3,r2
 2036de4:	1007883a 	mov	r3,r2
 2036de8:	e0bffe17 	ldw	r2,-8(fp)
 2036dec:	10c0120d 	sth	r3,72(r2)

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
 2036df0:	d0a81c17 	ldw	r2,-24464(gp)
 2036df4:	1007883a 	mov	r3,r2
 2036df8:	e0bffe17 	ldw	r2,-8(fp)
 2036dfc:	10801317 	ldw	r2,76(r2)
 2036e00:	1885c83a 	sub	r2,r3,r2
 2036e04:	1007883a 	mov	r3,r2
 2036e08:	e0bffe17 	ldw	r2,-8(fp)
 2036e0c:	10c01a0d 	sth	r3,104(r2)

      pcb->snd_buf += pcb->acked;
 2036e10:	e0bffe17 	ldw	r2,-8(fp)
 2036e14:	10c01a8b 	ldhu	r3,106(r2)
 2036e18:	e0bffe17 	ldw	r2,-8(fp)
 2036e1c:	10801a0b 	ldhu	r2,104(r2)
 2036e20:	1885883a 	add	r2,r3,r2
 2036e24:	1007883a 	mov	r3,r2
 2036e28:	e0bffe17 	ldw	r2,-8(fp)
 2036e2c:	10c01a8d 	sth	r3,106(r2)

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 2036e30:	e0bffe17 	ldw	r2,-8(fp)
 2036e34:	100012c5 	stb	zero,75(r2)
      pcb->lastack = ackno;
 2036e38:	d0e81c17 	ldw	r3,-24464(gp)
 2036e3c:	e0bffe17 	ldw	r2,-8(fp)
 2036e40:	10c01315 	stw	r3,76(r2)

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 2036e44:	e0bffe17 	ldw	r2,-8(fp)
 2036e48:	10800617 	ldw	r2,24(r2)
 2036e4c:	10800130 	cmpltui	r2,r2,4
 2036e50:	10006a1e 	bne	r2,zero,2036ffc <tcp_receive+0x588>
        if (pcb->cwnd < pcb->ssthresh) {
 2036e54:	e0bffe17 	ldw	r2,-8(fp)
 2036e58:	10c0140b 	ldhu	r3,80(r2)
 2036e5c:	e0bffe17 	ldw	r2,-8(fp)
 2036e60:	1080148b 	ldhu	r2,82(r2)
 2036e64:	18ffffcc 	andi	r3,r3,65535
 2036e68:	10bfffcc 	andi	r2,r2,65535
 2036e6c:	1880142e 	bgeu	r3,r2,2036ec0 <tcp_receive+0x44c>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 2036e70:	e0bffe17 	ldw	r2,-8(fp)
 2036e74:	10c0140b 	ldhu	r3,80(r2)
 2036e78:	e0bffe17 	ldw	r2,-8(fp)
 2036e7c:	10800e8b 	ldhu	r2,58(r2)
 2036e80:	1885883a 	add	r2,r3,r2
 2036e84:	1009883a 	mov	r4,r2
 2036e88:	e0bffe17 	ldw	r2,-8(fp)
 2036e8c:	10c0140b 	ldhu	r3,80(r2)
 2036e90:	20bfffcc 	andi	r2,r4,65535
 2036e94:	18ffffcc 	andi	r3,r3,65535
 2036e98:	1880582e 	bgeu	r3,r2,2036ffc <tcp_receive+0x588>
            pcb->cwnd += pcb->mss;
 2036e9c:	e0bffe17 	ldw	r2,-8(fp)
 2036ea0:	10c0140b 	ldhu	r3,80(r2)
 2036ea4:	e0bffe17 	ldw	r2,-8(fp)
 2036ea8:	10800e8b 	ldhu	r2,58(r2)
 2036eac:	1885883a 	add	r2,r3,r2
 2036eb0:	1007883a 	mov	r3,r2
 2036eb4:	e0bffe17 	ldw	r2,-8(fp)
 2036eb8:	10c0140d 	sth	r3,80(r2)
 2036ebc:	00004f06 	br	2036ffc <tcp_receive+0x588>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 2036ec0:	e0bffe17 	ldw	r2,-8(fp)
 2036ec4:	1400140b 	ldhu	r16,80(r2)
 2036ec8:	e0bffe17 	ldw	r2,-8(fp)
 2036ecc:	10800e8b 	ldhu	r2,58(r2)
 2036ed0:	10ffffcc 	andi	r3,r2,65535
 2036ed4:	e0bffe17 	ldw	r2,-8(fp)
 2036ed8:	10800e8b 	ldhu	r2,58(r2)
 2036edc:	10bfffcc 	andi	r2,r2,65535
 2036ee0:	1887383a 	mul	r3,r3,r2
 2036ee4:	e0bffe17 	ldw	r2,-8(fp)
 2036ee8:	1080140b 	ldhu	r2,80(r2)
 2036eec:	10bfffcc 	andi	r2,r2,65535
 2036ef0:	100b883a 	mov	r5,r2
 2036ef4:	1809883a 	mov	r4,r3
 2036ef8:	200a9e40 	call	200a9e4 <__divsi3>
 2036efc:	8085883a 	add	r2,r16,r2
 2036f00:	e0bffb0d 	sth	r2,-20(fp)
          if (new_cwnd > pcb->cwnd) {
 2036f04:	e0bffe17 	ldw	r2,-8(fp)
 2036f08:	1080140b 	ldhu	r2,80(r2)
 2036f0c:	10ffffcc 	andi	r3,r2,65535
 2036f10:	e0bffb0b 	ldhu	r2,-20(fp)
 2036f14:	1880392e 	bgeu	r3,r2,2036ffc <tcp_receive+0x588>
            pcb->cwnd = new_cwnd;
 2036f18:	e0bffe17 	ldw	r2,-8(fp)
 2036f1c:	e0fffb0b 	ldhu	r3,-20(fp)
 2036f20:	10c0140d 	sth	r3,80(r2)
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 2036f24:	00003506 	br	2036ffc <tcp_receive+0x588>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 2036f28:	e0bffe17 	ldw	r2,-8(fp)
 2036f2c:	10801d17 	ldw	r2,116(r2)
 2036f30:	e0bff415 	stw	r2,-48(fp)
        pcb->unacked = pcb->unacked->next;
 2036f34:	e0bffe17 	ldw	r2,-8(fp)
 2036f38:	10801d17 	ldw	r2,116(r2)
 2036f3c:	10c00017 	ldw	r3,0(r2)
 2036f40:	e0bffe17 	ldw	r2,-8(fp)
 2036f44:	10c01d15 	stw	r3,116(r2)

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 2036f48:	e0bffe17 	ldw	r2,-8(fp)
 2036f4c:	10801a0b 	ldhu	r2,104(r2)
 2036f50:	10bfffcc 	andi	r2,r2,65535
 2036f54:	10001b26 	beq	r2,zero,2036fc4 <tcp_receive+0x550>
 2036f58:	e0bff417 	ldw	r2,-48(fp)
 2036f5c:	10800417 	ldw	r2,16(r2)
 2036f60:	10c00303 	ldbu	r3,12(r2)
 2036f64:	10800343 	ldbu	r2,13(r2)
 2036f68:	1004923a 	slli	r2,r2,8
 2036f6c:	10c4b03a 	or	r2,r2,r3
 2036f70:	10bfffcc 	andi	r2,r2,65535
 2036f74:	1004d23a 	srli	r2,r2,8
 2036f78:	10ffffcc 	andi	r3,r2,65535
 2036f7c:	e0bff417 	ldw	r2,-48(fp)
 2036f80:	10800417 	ldw	r2,16(r2)
 2036f84:	11000303 	ldbu	r4,12(r2)
 2036f88:	10800343 	ldbu	r2,13(r2)
 2036f8c:	1004923a 	slli	r2,r2,8
 2036f90:	1104b03a 	or	r2,r2,r4
 2036f94:	10bfffcc 	andi	r2,r2,65535
 2036f98:	1004923a 	slli	r2,r2,8
 2036f9c:	10bfffcc 	andi	r2,r2,65535
 2036fa0:	1884b03a 	or	r2,r3,r2
 2036fa4:	1080004c 	andi	r2,r2,1
 2036fa8:	10000626 	beq	r2,zero,2036fc4 <tcp_receive+0x550>
          pcb->acked--;
 2036fac:	e0bffe17 	ldw	r2,-8(fp)
 2036fb0:	10801a0b 	ldhu	r2,104(r2)
 2036fb4:	10bfffc4 	addi	r2,r2,-1
 2036fb8:	1007883a 	mov	r3,r2
 2036fbc:	e0bffe17 	ldw	r2,-8(fp)
 2036fc0:	10c01a0d 	sth	r3,104(r2)
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
 2036fc4:	e0bff417 	ldw	r2,-48(fp)
 2036fc8:	10800117 	ldw	r2,4(r2)
 2036fcc:	1009883a 	mov	r4,r2
 2036fd0:	201ab640 	call	201ab64 <pbuf_clen>
 2036fd4:	1009883a 	mov	r4,r2
 2036fd8:	e0bffe17 	ldw	r2,-8(fp)
 2036fdc:	10c01b0b 	ldhu	r3,108(r2)
 2036fe0:	20803fcc 	andi	r2,r4,255
 2036fe4:	1885c83a 	sub	r2,r3,r2
 2036fe8:	1007883a 	mov	r3,r2
 2036fec:	e0bffe17 	ldw	r2,-8(fp)
 2036ff0:	10c01b0d 	sth	r3,108(r2)
        tcp_seg_free(next);
 2036ff4:	e13ff417 	ldw	r4,-48(fp)
 2036ff8:	201d2e80 	call	201d2e8 <tcp_seg_free>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 2036ffc:	e0bffe17 	ldw	r2,-8(fp)
 2037000:	10801d17 	ldw	r2,116(r2)
 2037004:	10005e26 	beq	r2,zero,2037180 <tcp_receive+0x70c>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 2037008:	e0bffe17 	ldw	r2,-8(fp)
 203700c:	10801d17 	ldw	r2,116(r2)
 2037010:	10800417 	ldw	r2,16(r2)
 2037014:	10c00103 	ldbu	r3,4(r2)
 2037018:	11000143 	ldbu	r4,5(r2)
 203701c:	2008923a 	slli	r4,r4,8
 2037020:	20c6b03a 	or	r3,r4,r3
 2037024:	11000183 	ldbu	r4,6(r2)
 2037028:	2008943a 	slli	r4,r4,16
 203702c:	20c6b03a 	or	r3,r4,r3
 2037030:	108001c3 	ldbu	r2,7(r2)
 2037034:	1004963a 	slli	r2,r2,24
 2037038:	10c4b03a 	or	r2,r2,r3
 203703c:	1006d63a 	srli	r3,r2,24
 2037040:	e0bffe17 	ldw	r2,-8(fp)
 2037044:	10801d17 	ldw	r2,116(r2)
 2037048:	10800417 	ldw	r2,16(r2)
 203704c:	11000103 	ldbu	r4,4(r2)
 2037050:	11400143 	ldbu	r5,5(r2)
 2037054:	280a923a 	slli	r5,r5,8
 2037058:	2908b03a 	or	r4,r5,r4
 203705c:	11400183 	ldbu	r5,6(r2)
 2037060:	280a943a 	slli	r5,r5,16
 2037064:	2908b03a 	or	r4,r5,r4
 2037068:	108001c3 	ldbu	r2,7(r2)
 203706c:	1004963a 	slli	r2,r2,24
 2037070:	1104b03a 	or	r2,r2,r4
 2037074:	1004d23a 	srli	r2,r2,8
 2037078:	10bfc00c 	andi	r2,r2,65280
 203707c:	1886b03a 	or	r3,r3,r2
 2037080:	e0bffe17 	ldw	r2,-8(fp)
 2037084:	10801d17 	ldw	r2,116(r2)
 2037088:	10800417 	ldw	r2,16(r2)
 203708c:	11000103 	ldbu	r4,4(r2)
 2037090:	11400143 	ldbu	r5,5(r2)
 2037094:	280a923a 	slli	r5,r5,8
 2037098:	2908b03a 	or	r4,r5,r4
 203709c:	11400183 	ldbu	r5,6(r2)
 20370a0:	280a943a 	slli	r5,r5,16
 20370a4:	2908b03a 	or	r4,r5,r4
 20370a8:	108001c3 	ldbu	r2,7(r2)
 20370ac:	1004963a 	slli	r2,r2,24
 20370b0:	1104b03a 	or	r2,r2,r4
 20370b4:	10bfc00c 	andi	r2,r2,65280
 20370b8:	1004923a 	slli	r2,r2,8
 20370bc:	1886b03a 	or	r3,r3,r2
 20370c0:	e0bffe17 	ldw	r2,-8(fp)
 20370c4:	10801d17 	ldw	r2,116(r2)
 20370c8:	10800417 	ldw	r2,16(r2)
 20370cc:	11000103 	ldbu	r4,4(r2)
 20370d0:	11400143 	ldbu	r5,5(r2)
 20370d4:	280a923a 	slli	r5,r5,8
 20370d8:	2908b03a 	or	r4,r5,r4
 20370dc:	11400183 	ldbu	r5,6(r2)
 20370e0:	280a943a 	slli	r5,r5,16
 20370e4:	2908b03a 	or	r4,r5,r4
 20370e8:	108001c3 	ldbu	r2,7(r2)
 20370ec:	1004963a 	slli	r2,r2,24
 20370f0:	1104b03a 	or	r2,r2,r4
 20370f4:	1004963a 	slli	r2,r2,24
 20370f8:	1886b03a 	or	r3,r3,r2
 20370fc:	e0bffe17 	ldw	r2,-8(fp)
 2037100:	10801d17 	ldw	r2,116(r2)
 2037104:	1080020b 	ldhu	r2,8(r2)
 2037108:	113fffcc 	andi	r4,r2,65535
 203710c:	e0bffe17 	ldw	r2,-8(fp)
 2037110:	10801d17 	ldw	r2,116(r2)
 2037114:	10800417 	ldw	r2,16(r2)
 2037118:	11400303 	ldbu	r5,12(r2)
 203711c:	10800343 	ldbu	r2,13(r2)
 2037120:	1004923a 	slli	r2,r2,8
 2037124:	1144b03a 	or	r2,r2,r5
 2037128:	10bfffcc 	andi	r2,r2,65535
 203712c:	1004d23a 	srli	r2,r2,8
 2037130:	117fffcc 	andi	r5,r2,65535
 2037134:	e0bffe17 	ldw	r2,-8(fp)
 2037138:	10801d17 	ldw	r2,116(r2)
 203713c:	10800417 	ldw	r2,16(r2)
 2037140:	11800303 	ldbu	r6,12(r2)
 2037144:	10800343 	ldbu	r2,13(r2)
 2037148:	1004923a 	slli	r2,r2,8
 203714c:	1184b03a 	or	r2,r2,r6
 2037150:	10bfffcc 	andi	r2,r2,65535
 2037154:	1004923a 	slli	r2,r2,8
 2037158:	10bfffcc 	andi	r2,r2,65535
 203715c:	2884b03a 	or	r2,r5,r2
 2037160:	108000cc 	andi	r2,r2,3
 2037164:	1004c03a 	cmpne	r2,r2,zero
 2037168:	10803fcc 	andi	r2,r2,255
 203716c:	2085883a 	add	r2,r4,r2
 2037170:	1887883a 	add	r3,r3,r2
 2037174:	d0a81c17 	ldw	r2,-24464(gp)
 2037178:	1885c83a 	sub	r2,r3,r2
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
 203717c:	00bf6a0e 	bge	zero,r2,2036f28 <__alt_mem_mem_0+0xfd016f28>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
 2037180:	e0bffe17 	ldw	r2,-8(fp)
 2037184:	10801d17 	ldw	r2,116(r2)
 2037188:	1000041e 	bne	r2,zero,203719c <tcp_receive+0x728>
        pcb->rtime = -1;
 203718c:	e0bffe17 	ldw	r2,-8(fp)
 2037190:	00ffffc4 	movi	r3,-1
 2037194:	10c00e0d 	sth	r3,56(r2)
 2037198:	00000206 	br	20371a4 <tcp_receive+0x730>
      else
        pcb->rtime = 0;
 203719c:	e0bffe17 	ldw	r2,-8(fp)
 20371a0:	10000e0d 	sth	zero,56(r2)

      pcb->polltmr = 0;
 20371a4:	e0bffe17 	ldw	r2,-8(fp)
 20371a8:	100008c5 	stb	zero,35(r2)
 20371ac:	00000206 	br	20371b8 <tcp_receive+0x744>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
 20371b0:	e0bffe17 	ldw	r2,-8(fp)
 20371b4:	10001a0d 	sth	zero,104(r2)
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 20371b8:	00003a06 	br	20372a4 <tcp_receive+0x830>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 20371bc:	e0bffe17 	ldw	r2,-8(fp)
 20371c0:	10801c17 	ldw	r2,112(r2)
 20371c4:	e0bff415 	stw	r2,-48(fp)
      pcb->unsent = pcb->unsent->next;
 20371c8:	e0bffe17 	ldw	r2,-8(fp)
 20371cc:	10801c17 	ldw	r2,112(r2)
 20371d0:	10c00017 	ldw	r3,0(r2)
 20371d4:	e0bffe17 	ldw	r2,-8(fp)
 20371d8:	10c01c15 	stw	r3,112(r2)
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 20371dc:	e0bffe17 	ldw	r2,-8(fp)
 20371e0:	10801c17 	ldw	r2,112(r2)
 20371e4:	1000021e 	bne	r2,zero,20371f0 <tcp_receive+0x77c>
        pcb->unsent_oversize = 0;
 20371e8:	e0bffe17 	ldw	r2,-8(fp)
 20371ec:	10001b8d 	sth	zero,110(r2)
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 20371f0:	e0bffe17 	ldw	r2,-8(fp)
 20371f4:	10801a0b 	ldhu	r2,104(r2)
 20371f8:	10bfffcc 	andi	r2,r2,65535
 20371fc:	10001b26 	beq	r2,zero,203726c <tcp_receive+0x7f8>
 2037200:	e0bff417 	ldw	r2,-48(fp)
 2037204:	10800417 	ldw	r2,16(r2)
 2037208:	10c00303 	ldbu	r3,12(r2)
 203720c:	10800343 	ldbu	r2,13(r2)
 2037210:	1004923a 	slli	r2,r2,8
 2037214:	10c4b03a 	or	r2,r2,r3
 2037218:	10bfffcc 	andi	r2,r2,65535
 203721c:	1004d23a 	srli	r2,r2,8
 2037220:	10ffffcc 	andi	r3,r2,65535
 2037224:	e0bff417 	ldw	r2,-48(fp)
 2037228:	10800417 	ldw	r2,16(r2)
 203722c:	11000303 	ldbu	r4,12(r2)
 2037230:	10800343 	ldbu	r2,13(r2)
 2037234:	1004923a 	slli	r2,r2,8
 2037238:	1104b03a 	or	r2,r2,r4
 203723c:	10bfffcc 	andi	r2,r2,65535
 2037240:	1004923a 	slli	r2,r2,8
 2037244:	10bfffcc 	andi	r2,r2,65535
 2037248:	1884b03a 	or	r2,r3,r2
 203724c:	1080004c 	andi	r2,r2,1
 2037250:	10000626 	beq	r2,zero,203726c <tcp_receive+0x7f8>
        pcb->acked--;
 2037254:	e0bffe17 	ldw	r2,-8(fp)
 2037258:	10801a0b 	ldhu	r2,104(r2)
 203725c:	10bfffc4 	addi	r2,r2,-1
 2037260:	1007883a 	mov	r3,r2
 2037264:	e0bffe17 	ldw	r2,-8(fp)
 2037268:	10c01a0d 	sth	r3,104(r2)
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
 203726c:	e0bff417 	ldw	r2,-48(fp)
 2037270:	10800117 	ldw	r2,4(r2)
 2037274:	1009883a 	mov	r4,r2
 2037278:	201ab640 	call	201ab64 <pbuf_clen>
 203727c:	1009883a 	mov	r4,r2
 2037280:	e0bffe17 	ldw	r2,-8(fp)
 2037284:	10c01b0b 	ldhu	r3,108(r2)
 2037288:	20803fcc 	andi	r2,r4,255
 203728c:	1885c83a 	sub	r2,r3,r2
 2037290:	1007883a 	mov	r3,r2
 2037294:	e0bffe17 	ldw	r2,-8(fp)
 2037298:	10c01b0d 	sth	r3,108(r2)
      tcp_seg_free(next);
 203729c:	e13ff417 	ldw	r4,-48(fp)
 20372a0:	201d2e80 	call	201d2e8 <tcp_seg_free>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 20372a4:	e0bffe17 	ldw	r2,-8(fp)
 20372a8:	10801c17 	ldw	r2,112(r2)
 20372ac:	10006326 	beq	r2,zero,203743c <tcp_receive+0x9c8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 20372b0:	d0e81c17 	ldw	r3,-24464(gp)
 20372b4:	e0bffe17 	ldw	r2,-8(fp)
 20372b8:	10801c17 	ldw	r2,112(r2)
 20372bc:	10800417 	ldw	r2,16(r2)
 20372c0:	11000103 	ldbu	r4,4(r2)
 20372c4:	11400143 	ldbu	r5,5(r2)
 20372c8:	280a923a 	slli	r5,r5,8
 20372cc:	2908b03a 	or	r4,r5,r4
 20372d0:	11400183 	ldbu	r5,6(r2)
 20372d4:	280a943a 	slli	r5,r5,16
 20372d8:	2908b03a 	or	r4,r5,r4
 20372dc:	108001c3 	ldbu	r2,7(r2)
 20372e0:	1004963a 	slli	r2,r2,24
 20372e4:	1104b03a 	or	r2,r2,r4
 20372e8:	1008d63a 	srli	r4,r2,24
 20372ec:	e0bffe17 	ldw	r2,-8(fp)
 20372f0:	10801c17 	ldw	r2,112(r2)
 20372f4:	10800417 	ldw	r2,16(r2)
 20372f8:	11400103 	ldbu	r5,4(r2)
 20372fc:	11800143 	ldbu	r6,5(r2)
 2037300:	300c923a 	slli	r6,r6,8
 2037304:	314ab03a 	or	r5,r6,r5
 2037308:	11800183 	ldbu	r6,6(r2)
 203730c:	300c943a 	slli	r6,r6,16
 2037310:	314ab03a 	or	r5,r6,r5
 2037314:	108001c3 	ldbu	r2,7(r2)
 2037318:	1004963a 	slli	r2,r2,24
 203731c:	1144b03a 	or	r2,r2,r5
 2037320:	1004d23a 	srli	r2,r2,8
 2037324:	10bfc00c 	andi	r2,r2,65280
 2037328:	2088b03a 	or	r4,r4,r2
 203732c:	e0bffe17 	ldw	r2,-8(fp)
 2037330:	10801c17 	ldw	r2,112(r2)
 2037334:	10800417 	ldw	r2,16(r2)
 2037338:	11400103 	ldbu	r5,4(r2)
 203733c:	11800143 	ldbu	r6,5(r2)
 2037340:	300c923a 	slli	r6,r6,8
 2037344:	314ab03a 	or	r5,r6,r5
 2037348:	11800183 	ldbu	r6,6(r2)
 203734c:	300c943a 	slli	r6,r6,16
 2037350:	314ab03a 	or	r5,r6,r5
 2037354:	108001c3 	ldbu	r2,7(r2)
 2037358:	1004963a 	slli	r2,r2,24
 203735c:	1144b03a 	or	r2,r2,r5
 2037360:	10bfc00c 	andi	r2,r2,65280
 2037364:	1004923a 	slli	r2,r2,8
 2037368:	2088b03a 	or	r4,r4,r2
 203736c:	e0bffe17 	ldw	r2,-8(fp)
 2037370:	10801c17 	ldw	r2,112(r2)
 2037374:	10800417 	ldw	r2,16(r2)
 2037378:	11400103 	ldbu	r5,4(r2)
 203737c:	11800143 	ldbu	r6,5(r2)
 2037380:	300c923a 	slli	r6,r6,8
 2037384:	314ab03a 	or	r5,r6,r5
 2037388:	11800183 	ldbu	r6,6(r2)
 203738c:	300c943a 	slli	r6,r6,16
 2037390:	314ab03a 	or	r5,r6,r5
 2037394:	108001c3 	ldbu	r2,7(r2)
 2037398:	1004963a 	slli	r2,r2,24
 203739c:	1144b03a 	or	r2,r2,r5
 20373a0:	1004963a 	slli	r2,r2,24
 20373a4:	2088b03a 	or	r4,r4,r2
 20373a8:	e0bffe17 	ldw	r2,-8(fp)
 20373ac:	10801c17 	ldw	r2,112(r2)
 20373b0:	1080020b 	ldhu	r2,8(r2)
 20373b4:	117fffcc 	andi	r5,r2,65535
 20373b8:	e0bffe17 	ldw	r2,-8(fp)
 20373bc:	10801c17 	ldw	r2,112(r2)
 20373c0:	10800417 	ldw	r2,16(r2)
 20373c4:	11800303 	ldbu	r6,12(r2)
 20373c8:	10800343 	ldbu	r2,13(r2)
 20373cc:	1004923a 	slli	r2,r2,8
 20373d0:	1184b03a 	or	r2,r2,r6
 20373d4:	10bfffcc 	andi	r2,r2,65535
 20373d8:	1004d23a 	srli	r2,r2,8
 20373dc:	11bfffcc 	andi	r6,r2,65535
 20373e0:	e0bffe17 	ldw	r2,-8(fp)
 20373e4:	10801c17 	ldw	r2,112(r2)
 20373e8:	10800417 	ldw	r2,16(r2)
 20373ec:	11c00303 	ldbu	r7,12(r2)
 20373f0:	10800343 	ldbu	r2,13(r2)
 20373f4:	1004923a 	slli	r2,r2,8
 20373f8:	11c4b03a 	or	r2,r2,r7
 20373fc:	10bfffcc 	andi	r2,r2,65535
 2037400:	1004923a 	slli	r2,r2,8
 2037404:	10bfffcc 	andi	r2,r2,65535
 2037408:	3084b03a 	or	r2,r6,r2
 203740c:	108000cc 	andi	r2,r2,3
 2037410:	1004c03a 	cmpne	r2,r2,zero
 2037414:	10803fcc 	andi	r2,r2,255
 2037418:	2885883a 	add	r2,r5,r2
 203741c:	2085883a 	add	r2,r4,r2
 2037420:	1885c83a 	sub	r2,r3,r2
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 2037424:	10000516 	blt	r2,zero,203743c <tcp_receive+0x9c8>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 2037428:	d0e81c17 	ldw	r3,-24464(gp)
 203742c:	e0bffe17 	ldw	r2,-8(fp)
 2037430:	10801517 	ldw	r2,84(r2)
 2037434:	1885c83a 	sub	r2,r3,r2
 2037438:	00bf600e 	bge	zero,r2,20371bc <__alt_mem_mem_0+0xfd0171bc>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 203743c:	e0bffe17 	ldw	r2,-8(fp)
 2037440:	10800f17 	ldw	r2,60(r2)
 2037444:	10004126 	beq	r2,zero,203754c <tcp_receive+0xad8>
 2037448:	e0bffe17 	ldw	r2,-8(fp)
 203744c:	10c01017 	ldw	r3,64(r2)
 2037450:	d0a81c17 	ldw	r2,-24464(gp)
 2037454:	1885c83a 	sub	r2,r3,r2
 2037458:	10003c0e 	bge	r2,zero,203754c <tcp_receive+0xad8>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 203745c:	d0a7f817 	ldw	r2,-24608(gp)
 2037460:	1007883a 	mov	r3,r2
 2037464:	e0bffe17 	ldw	r2,-8(fp)
 2037468:	10800f17 	ldw	r2,60(r2)
 203746c:	1885c83a 	sub	r2,r3,r2
 2037470:	e0bff80d 	sth	r2,-32(fp)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 2037474:	e0bff80b 	ldhu	r2,-32(fp)
 2037478:	e0fffe17 	ldw	r3,-8(fp)
 203747c:	18c0110b 	ldhu	r3,68(r3)
 2037480:	18ffffcc 	andi	r3,r3,65535
 2037484:	18e0001c 	xori	r3,r3,32768
 2037488:	18e00004 	addi	r3,r3,-32768
 203748c:	1807d0fa 	srai	r3,r3,3
 2037490:	10c5c83a 	sub	r2,r2,r3
 2037494:	e0bff80d 	sth	r2,-32(fp)
      pcb->sa += m;
 2037498:	e0bffe17 	ldw	r2,-8(fp)
 203749c:	1080110b 	ldhu	r2,68(r2)
 20374a0:	1007883a 	mov	r3,r2
 20374a4:	e0bff80b 	ldhu	r2,-32(fp)
 20374a8:	1885883a 	add	r2,r3,r2
 20374ac:	1007883a 	mov	r3,r2
 20374b0:	e0bffe17 	ldw	r2,-8(fp)
 20374b4:	10c0110d 	sth	r3,68(r2)
      if (m < 0) {
 20374b8:	e0bff80f 	ldh	r2,-32(fp)
 20374bc:	1000030e 	bge	r2,zero,20374cc <tcp_receive+0xa58>
        m = -m;
 20374c0:	e0bff80b 	ldhu	r2,-32(fp)
 20374c4:	0085c83a 	sub	r2,zero,r2
 20374c8:	e0bff80d 	sth	r2,-32(fp)
      }
      m = m - (pcb->sv >> 2);
 20374cc:	e0bff80b 	ldhu	r2,-32(fp)
 20374d0:	e0fffe17 	ldw	r3,-8(fp)
 20374d4:	18c0118b 	ldhu	r3,70(r3)
 20374d8:	18ffffcc 	andi	r3,r3,65535
 20374dc:	18e0001c 	xori	r3,r3,32768
 20374e0:	18e00004 	addi	r3,r3,-32768
 20374e4:	1807d0ba 	srai	r3,r3,2
 20374e8:	10c5c83a 	sub	r2,r2,r3
 20374ec:	e0bff80d 	sth	r2,-32(fp)
      pcb->sv += m;
 20374f0:	e0bffe17 	ldw	r2,-8(fp)
 20374f4:	1080118b 	ldhu	r2,70(r2)
 20374f8:	1007883a 	mov	r3,r2
 20374fc:	e0bff80b 	ldhu	r2,-32(fp)
 2037500:	1885883a 	add	r2,r3,r2
 2037504:	1007883a 	mov	r3,r2
 2037508:	e0bffe17 	ldw	r2,-8(fp)
 203750c:	10c0118d 	sth	r3,70(r2)
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 2037510:	e0bffe17 	ldw	r2,-8(fp)
 2037514:	1080110b 	ldhu	r2,68(r2)
 2037518:	10bfffcc 	andi	r2,r2,65535
 203751c:	10a0001c 	xori	r2,r2,32768
 2037520:	10a00004 	addi	r2,r2,-32768
 2037524:	1005d0fa 	srai	r2,r2,3
 2037528:	1007883a 	mov	r3,r2
 203752c:	e0bffe17 	ldw	r2,-8(fp)
 2037530:	1080118b 	ldhu	r2,70(r2)
 2037534:	1885883a 	add	r2,r3,r2
 2037538:	1007883a 	mov	r3,r2
 203753c:	e0bffe17 	ldw	r2,-8(fp)
 2037540:	10c0120d 	sth	r3,72(r2)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
 2037544:	e0bffe17 	ldw	r2,-8(fp)
 2037548:	10000f15 	stw	zero,60(r2)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 203754c:	d0a81d8b 	ldhu	r2,-24458(gp)
 2037550:	10bfffcc 	andi	r2,r2,65535
 2037554:	10052726 	beq	r2,zero,20389f4 <tcp_receive+0x1f80>
 2037558:	e0bffe17 	ldw	r2,-8(fp)
 203755c:	10800617 	ldw	r2,24(r2)
 2037560:	108001e8 	cmpgeui	r2,r2,7
 2037564:	1005231e 	bne	r2,zero,20389f4 <tcp_receive+0x1f80>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
 2037568:	e0bffe17 	ldw	r2,-8(fp)
 203756c:	10c00b17 	ldw	r3,44(r2)
 2037570:	d0a81b17 	ldw	r2,-24468(gp)
 2037574:	1885c83a 	sub	r2,r3,r2
 2037578:	10bfffc4 	addi	r2,r2,-1
 203757c:	10007b16 	blt	r2,zero,203776c <tcp_receive+0xcf8>
 2037580:	e0bffe17 	ldw	r2,-8(fp)
 2037584:	10c00b17 	ldw	r3,44(r2)
 2037588:	d0a81d8b 	ldhu	r2,-24458(gp)
 203758c:	113fffcc 	andi	r4,r2,65535
 2037590:	d0a81b17 	ldw	r2,-24468(gp)
 2037594:	2085883a 	add	r2,r4,r2
 2037598:	1885c83a 	sub	r2,r3,r2
 203759c:	10800044 	addi	r2,r2,1
 20375a0:	00807216 	blt	zero,r2,203776c <tcp_receive+0xcf8>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
 20375a4:	e0bffe17 	ldw	r2,-8(fp)
 20375a8:	10c00b17 	ldw	r3,44(r2)
 20375ac:	d0a81b17 	ldw	r2,-24468(gp)
 20375b0:	1885c83a 	sub	r2,r3,r2
 20375b4:	e0bff715 	stw	r2,-36(fp)
      p = inseg.p;
 20375b8:	008085b4 	movhi	r2,534
 20375bc:	10883604 	addi	r2,r2,8408
 20375c0:	10800117 	ldw	r2,4(r2)
 20375c4:	e0bff615 	stw	r2,-40(fp)
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 20375c8:	008085b4 	movhi	r2,534
 20375cc:	10883604 	addi	r2,r2,8408
 20375d0:	10800117 	ldw	r2,4(r2)
 20375d4:	1080028b 	ldhu	r2,10(r2)
 20375d8:	10ffffcc 	andi	r3,r2,65535
 20375dc:	e0bff717 	ldw	r2,-36(fp)
 20375e0:	1880240e 	bge	r3,r2,2037674 <tcp_receive+0xc00>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 20375e4:	008085b4 	movhi	r2,534
 20375e8:	10883604 	addi	r2,r2,8408
 20375ec:	10800117 	ldw	r2,4(r2)
 20375f0:	1080020b 	ldhu	r2,8(r2)
 20375f4:	e0fff717 	ldw	r3,-36(fp)
 20375f8:	10c5c83a 	sub	r2,r2,r3
 20375fc:	e0bffb8d 	sth	r2,-18(fp)
        while (p->len < off) {
 2037600:	00000e06 	br	203763c <tcp_receive+0xbc8>
          off -= p->len;
 2037604:	e0bff617 	ldw	r2,-40(fp)
 2037608:	1080028b 	ldhu	r2,10(r2)
 203760c:	10bfffcc 	andi	r2,r2,65535
 2037610:	e0fff717 	ldw	r3,-36(fp)
 2037614:	1885c83a 	sub	r2,r3,r2
 2037618:	e0bff715 	stw	r2,-36(fp)
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 203761c:	e0bff617 	ldw	r2,-40(fp)
 2037620:	e0fffb8b 	ldhu	r3,-18(fp)
 2037624:	10c0020d 	sth	r3,8(r2)
          p->len = 0;
 2037628:	e0bff617 	ldw	r2,-40(fp)
 203762c:	1000028d 	sth	zero,10(r2)
          p = p->next;
 2037630:	e0bff617 	ldw	r2,-40(fp)
 2037634:	10800017 	ldw	r2,0(r2)
 2037638:	e0bff615 	stw	r2,-40(fp)
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
 203763c:	e0bff617 	ldw	r2,-40(fp)
 2037640:	1080028b 	ldhu	r2,10(r2)
 2037644:	10ffffcc 	andi	r3,r2,65535
 2037648:	e0bff717 	ldw	r2,-36(fp)
 203764c:	18bfed16 	blt	r3,r2,2037604 <__alt_mem_mem_0+0xfd017604>
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
          p = p->next;
        }
        if(pbuf_header(p, (s16_t)-off)) {
 2037650:	e0bff717 	ldw	r2,-36(fp)
 2037654:	0085c83a 	sub	r2,zero,r2
 2037658:	10bfffcc 	andi	r2,r2,65535
 203765c:	10a0001c 	xori	r2,r2,32768
 2037660:	10a00004 	addi	r2,r2,-32768
 2037664:	100b883a 	mov	r5,r2
 2037668:	e13ff617 	ldw	r4,-40(fp)
 203766c:	201a8700 	call	201a870 <pbuf_header>
 2037670:	00000b06 	br	20376a0 <tcp_receive+0xc2c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
 2037674:	008085b4 	movhi	r2,534
 2037678:	10883604 	addi	r2,r2,8408
 203767c:	10800117 	ldw	r2,4(r2)
 2037680:	e0fff717 	ldw	r3,-36(fp)
 2037684:	00c7c83a 	sub	r3,zero,r3
 2037688:	18ffffcc 	andi	r3,r3,65535
 203768c:	18e0001c 	xori	r3,r3,32768
 2037690:	18e00004 	addi	r3,r3,-32768
 2037694:	180b883a 	mov	r5,r3
 2037698:	1009883a 	mov	r4,r2
 203769c:	201a8700 	call	201a870 <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 20376a0:	008085b4 	movhi	r2,534
 20376a4:	10883604 	addi	r2,r2,8408
 20376a8:	1080020b 	ldhu	r2,8(r2)
 20376ac:	d0e81b17 	ldw	r3,-24468(gp)
 20376b0:	1809883a 	mov	r4,r3
 20376b4:	e0fffe17 	ldw	r3,-8(fp)
 20376b8:	18c00b17 	ldw	r3,44(r3)
 20376bc:	20c7c83a 	sub	r3,r4,r3
 20376c0:	10c5883a 	add	r2,r2,r3
 20376c4:	1007883a 	mov	r3,r2
 20376c8:	008085b4 	movhi	r2,534
 20376cc:	10883604 	addi	r2,r2,8408
 20376d0:	10c0020d 	sth	r3,8(r2)
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 20376d4:	008085b4 	movhi	r2,534
 20376d8:	10883604 	addi	r2,r2,8408
 20376dc:	10800417 	ldw	r2,16(r2)
 20376e0:	e0fffe17 	ldw	r3,-8(fp)
 20376e4:	18c00b17 	ldw	r3,44(r3)
 20376e8:	d0e81b15 	stw	r3,-24468(gp)
 20376ec:	d0e81b17 	ldw	r3,-24468(gp)
 20376f0:	19803fcc 	andi	r6,r3,255
 20376f4:	11000103 	ldbu	r4,4(r2)
 20376f8:	2008703a 	and	r4,r4,zero
 20376fc:	200b883a 	mov	r5,r4
 2037700:	3009883a 	mov	r4,r6
 2037704:	2908b03a 	or	r4,r5,r4
 2037708:	11000105 	stb	r4,4(r2)
 203770c:	1808d23a 	srli	r4,r3,8
 2037710:	21803fcc 	andi	r6,r4,255
 2037714:	11000143 	ldbu	r4,5(r2)
 2037718:	2008703a 	and	r4,r4,zero
 203771c:	200b883a 	mov	r5,r4
 2037720:	3009883a 	mov	r4,r6
 2037724:	2908b03a 	or	r4,r5,r4
 2037728:	11000145 	stb	r4,5(r2)
 203772c:	1808d43a 	srli	r4,r3,16
 2037730:	21803fcc 	andi	r6,r4,255
 2037734:	11000183 	ldbu	r4,6(r2)
 2037738:	2008703a 	and	r4,r4,zero
 203773c:	200b883a 	mov	r5,r4
 2037740:	3009883a 	mov	r4,r6
 2037744:	2908b03a 	or	r4,r5,r4
 2037748:	11000185 	stb	r4,6(r2)
 203774c:	180ad63a 	srli	r5,r3,24
 2037750:	10c001c3 	ldbu	r3,7(r2)
 2037754:	1806703a 	and	r3,r3,zero
 2037758:	1809883a 	mov	r4,r3
 203775c:	2807883a 	mov	r3,r5
 2037760:	20c6b03a 	or	r3,r4,r3
 2037764:	10c001c5 	stb	r3,7(r2)
 2037768:	00000b06 	br	2037798 <tcp_receive+0xd24>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
 203776c:	d0e81b17 	ldw	r3,-24468(gp)
 2037770:	e0bffe17 	ldw	r2,-8(fp)
 2037774:	10800b17 	ldw	r2,44(r2)
 2037778:	1885c83a 	sub	r2,r3,r2
 203777c:	1000060e 	bge	r2,zero,2037798 <tcp_receive+0xd24>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 2037780:	e0bffe17 	ldw	r2,-8(fp)
 2037784:	10800883 	ldbu	r2,34(r2)
 2037788:	10800094 	ori	r2,r2,2
 203778c:	1007883a 	mov	r3,r2
 2037790:	e0bffe17 	ldw	r2,-8(fp)
 2037794:	10c00885 	stb	r3,34(r2)
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 2037798:	d0e81b17 	ldw	r3,-24468(gp)
 203779c:	e0bffe17 	ldw	r2,-8(fp)
 20377a0:	10800b17 	ldw	r2,44(r2)
 20377a4:	1885c83a 	sub	r2,r3,r2
 20377a8:	10048e16 	blt	r2,zero,20389e4 <tcp_receive+0x1f70>
 20377ac:	d0e81b17 	ldw	r3,-24468(gp)
 20377b0:	e0bffe17 	ldw	r2,-8(fp)
 20377b4:	11000b17 	ldw	r4,44(r2)
 20377b8:	e0bffe17 	ldw	r2,-8(fp)
 20377bc:	10800c0b 	ldhu	r2,48(r2)
 20377c0:	10bfffcc 	andi	r2,r2,65535
 20377c4:	2085883a 	add	r2,r4,r2
 20377c8:	1885c83a 	sub	r2,r3,r2
 20377cc:	10800044 	addi	r2,r2,1
 20377d0:	00848416 	blt	zero,r2,20389e4 <tcp_receive+0x1f70>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 20377d4:	e0bffe17 	ldw	r2,-8(fp)
 20377d8:	10c00b17 	ldw	r3,44(r2)
 20377dc:	d0a81b17 	ldw	r2,-24468(gp)
 20377e0:	1882cd1e 	bne	r3,r2,2038318 <tcp_receive+0x18a4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 20377e4:	008085b4 	movhi	r2,534
 20377e8:	10883604 	addi	r2,r2,8408
 20377ec:	10c0020b 	ldhu	r3,8(r2)
 20377f0:	008085b4 	movhi	r2,534
 20377f4:	10883604 	addi	r2,r2,8408
 20377f8:	10800417 	ldw	r2,16(r2)
 20377fc:	11000303 	ldbu	r4,12(r2)
 2037800:	10800343 	ldbu	r2,13(r2)
 2037804:	1004923a 	slli	r2,r2,8
 2037808:	1104b03a 	or	r2,r2,r4
 203780c:	10bfffcc 	andi	r2,r2,65535
 2037810:	1004d23a 	srli	r2,r2,8
 2037814:	113fffcc 	andi	r4,r2,65535
 2037818:	008085b4 	movhi	r2,534
 203781c:	10883604 	addi	r2,r2,8408
 2037820:	10800417 	ldw	r2,16(r2)
 2037824:	11400303 	ldbu	r5,12(r2)
 2037828:	10800343 	ldbu	r2,13(r2)
 203782c:	1004923a 	slli	r2,r2,8
 2037830:	1144b03a 	or	r2,r2,r5
 2037834:	10bfffcc 	andi	r2,r2,65535
 2037838:	1004923a 	slli	r2,r2,8
 203783c:	10bfffcc 	andi	r2,r2,65535
 2037840:	2084b03a 	or	r2,r4,r2
 2037844:	108000cc 	andi	r2,r2,3
 2037848:	1004c03a 	cmpne	r2,r2,zero
 203784c:	10803fcc 	andi	r2,r2,255
 2037850:	1885883a 	add	r2,r3,r2
 2037854:	d0a81d8d 	sth	r2,-24458(gp)

        if (tcplen > pcb->rcv_wnd) {
 2037858:	e0bffe17 	ldw	r2,-8(fp)
 203785c:	10c00c0b 	ldhu	r3,48(r2)
 2037860:	d0a81d8b 	ldhu	r2,-24458(gp)
 2037864:	18ffffcc 	andi	r3,r3,65535
 2037868:	10bfffcc 	andi	r2,r2,65535
 203786c:	1880992e 	bgeu	r3,r2,2037ad4 <tcp_receive+0x1060>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 2037870:	008085b4 	movhi	r2,534
 2037874:	10883604 	addi	r2,r2,8408
 2037878:	10800417 	ldw	r2,16(r2)
 203787c:	10c00303 	ldbu	r3,12(r2)
 2037880:	10800343 	ldbu	r2,13(r2)
 2037884:	1004923a 	slli	r2,r2,8
 2037888:	10c4b03a 	or	r2,r2,r3
 203788c:	10bfffcc 	andi	r2,r2,65535
 2037890:	1004d23a 	srli	r2,r2,8
 2037894:	10ffffcc 	andi	r3,r2,65535
 2037898:	008085b4 	movhi	r2,534
 203789c:	10883604 	addi	r2,r2,8408
 20378a0:	10800417 	ldw	r2,16(r2)
 20378a4:	11000303 	ldbu	r4,12(r2)
 20378a8:	10800343 	ldbu	r2,13(r2)
 20378ac:	1004923a 	slli	r2,r2,8
 20378b0:	1104b03a 	or	r2,r2,r4
 20378b4:	10bfffcc 	andi	r2,r2,65535
 20378b8:	1004923a 	slli	r2,r2,8
 20378bc:	10bfffcc 	andi	r2,r2,65535
 20378c0:	1884b03a 	or	r2,r3,r2
 20378c4:	1080004c 	andi	r2,r2,1
 20378c8:	10003726 	beq	r2,zero,20379a8 <tcp_receive+0xf34>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
 20378cc:	008085b4 	movhi	r2,534
 20378d0:	10883604 	addi	r2,r2,8408
 20378d4:	10800417 	ldw	r2,16(r2)
 20378d8:	00c085b4 	movhi	r3,534
 20378dc:	18c83604 	addi	r3,r3,8408
 20378e0:	18c00417 	ldw	r3,16(r3)
 20378e4:	19000303 	ldbu	r4,12(r3)
 20378e8:	18c00343 	ldbu	r3,13(r3)
 20378ec:	1806923a 	slli	r3,r3,8
 20378f0:	1906b03a 	or	r3,r3,r4
 20378f4:	1809883a 	mov	r4,r3
 20378f8:	00f03fc4 	movi	r3,-16129
 20378fc:	20c6703a 	and	r3,r4,r3
 2037900:	180b883a 	mov	r5,r3
 2037904:	00c085b4 	movhi	r3,534
 2037908:	18c83604 	addi	r3,r3,8408
 203790c:	18c00417 	ldw	r3,16(r3)
 2037910:	19000303 	ldbu	r4,12(r3)
 2037914:	18c00343 	ldbu	r3,13(r3)
 2037918:	1806923a 	slli	r3,r3,8
 203791c:	1906b03a 	or	r3,r3,r4
 2037920:	18ffffcc 	andi	r3,r3,65535
 2037924:	1806d23a 	srli	r3,r3,8
 2037928:	180d883a 	mov	r6,r3
 203792c:	00c085b4 	movhi	r3,534
 2037930:	18c83604 	addi	r3,r3,8408
 2037934:	18c00417 	ldw	r3,16(r3)
 2037938:	19000303 	ldbu	r4,12(r3)
 203793c:	18c00343 	ldbu	r3,13(r3)
 2037940:	1806923a 	slli	r3,r3,8
 2037944:	1906b03a 	or	r3,r3,r4
 2037948:	18ffffcc 	andi	r3,r3,65535
 203794c:	1806923a 	slli	r3,r3,8
 2037950:	30c6b03a 	or	r3,r6,r3
 2037954:	18c00f8c 	andi	r3,r3,62
 2037958:	1806923a 	slli	r3,r3,8
 203795c:	28c6b03a 	or	r3,r5,r3
 2037960:	180d883a 	mov	r6,r3
 2037964:	30ffffcc 	andi	r3,r6,65535
 2037968:	19403fcc 	andi	r5,r3,255
 203796c:	10c00303 	ldbu	r3,12(r2)
 2037970:	1806703a 	and	r3,r3,zero
 2037974:	1809883a 	mov	r4,r3
 2037978:	2807883a 	mov	r3,r5
 203797c:	20c6b03a 	or	r3,r4,r3
 2037980:	10c00305 	stb	r3,12(r2)
 2037984:	30ffffcc 	andi	r3,r6,65535
 2037988:	1806d23a 	srli	r3,r3,8
 203798c:	197fffcc 	andi	r5,r3,65535
 2037990:	10c00343 	ldbu	r3,13(r2)
 2037994:	1806703a 	and	r3,r3,zero
 2037998:	1809883a 	mov	r4,r3
 203799c:	2807883a 	mov	r3,r5
 20379a0:	20c6b03a 	or	r3,r4,r3
 20379a4:	10c00345 	stb	r3,13(r2)
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
 20379a8:	e0bffe17 	ldw	r2,-8(fp)
 20379ac:	10c00c0b 	ldhu	r3,48(r2)
 20379b0:	008085b4 	movhi	r2,534
 20379b4:	10883604 	addi	r2,r2,8408
 20379b8:	10c0020d 	sth	r3,8(r2)
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 20379bc:	008085b4 	movhi	r2,534
 20379c0:	10883604 	addi	r2,r2,8408
 20379c4:	10800417 	ldw	r2,16(r2)
 20379c8:	10c00303 	ldbu	r3,12(r2)
 20379cc:	10800343 	ldbu	r2,13(r2)
 20379d0:	1004923a 	slli	r2,r2,8
 20379d4:	10c4b03a 	or	r2,r2,r3
 20379d8:	10bfffcc 	andi	r2,r2,65535
 20379dc:	1004d23a 	srli	r2,r2,8
 20379e0:	10ffffcc 	andi	r3,r2,65535
 20379e4:	008085b4 	movhi	r2,534
 20379e8:	10883604 	addi	r2,r2,8408
 20379ec:	10800417 	ldw	r2,16(r2)
 20379f0:	11000303 	ldbu	r4,12(r2)
 20379f4:	10800343 	ldbu	r2,13(r2)
 20379f8:	1004923a 	slli	r2,r2,8
 20379fc:	1104b03a 	or	r2,r2,r4
 2037a00:	10bfffcc 	andi	r2,r2,65535
 2037a04:	1004923a 	slli	r2,r2,8
 2037a08:	10bfffcc 	andi	r2,r2,65535
 2037a0c:	1884b03a 	or	r2,r3,r2
 2037a10:	1080008c 	andi	r2,r2,2
 2037a14:	10000826 	beq	r2,zero,2037a38 <tcp_receive+0xfc4>
            inseg.len -= 1;
 2037a18:	008085b4 	movhi	r2,534
 2037a1c:	10883604 	addi	r2,r2,8408
 2037a20:	1080020b 	ldhu	r2,8(r2)
 2037a24:	10bfffc4 	addi	r2,r2,-1
 2037a28:	1007883a 	mov	r3,r2
 2037a2c:	008085b4 	movhi	r2,534
 2037a30:	10883604 	addi	r2,r2,8408
 2037a34:	10c0020d 	sth	r3,8(r2)
          }
          pbuf_realloc(inseg.p, inseg.len);
 2037a38:	008085b4 	movhi	r2,534
 2037a3c:	10883604 	addi	r2,r2,8408
 2037a40:	10c00117 	ldw	r3,4(r2)
 2037a44:	008085b4 	movhi	r2,534
 2037a48:	10883604 	addi	r2,r2,8408
 2037a4c:	1080020b 	ldhu	r2,8(r2)
 2037a50:	10bfffcc 	andi	r2,r2,65535
 2037a54:	100b883a 	mov	r5,r2
 2037a58:	1809883a 	mov	r4,r3
 2037a5c:	201a7100 	call	201a710 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 2037a60:	008085b4 	movhi	r2,534
 2037a64:	10883604 	addi	r2,r2,8408
 2037a68:	10c0020b 	ldhu	r3,8(r2)
 2037a6c:	008085b4 	movhi	r2,534
 2037a70:	10883604 	addi	r2,r2,8408
 2037a74:	10800417 	ldw	r2,16(r2)
 2037a78:	11000303 	ldbu	r4,12(r2)
 2037a7c:	10800343 	ldbu	r2,13(r2)
 2037a80:	1004923a 	slli	r2,r2,8
 2037a84:	1104b03a 	or	r2,r2,r4
 2037a88:	10bfffcc 	andi	r2,r2,65535
 2037a8c:	1004d23a 	srli	r2,r2,8
 2037a90:	113fffcc 	andi	r4,r2,65535
 2037a94:	008085b4 	movhi	r2,534
 2037a98:	10883604 	addi	r2,r2,8408
 2037a9c:	10800417 	ldw	r2,16(r2)
 2037aa0:	11400303 	ldbu	r5,12(r2)
 2037aa4:	10800343 	ldbu	r2,13(r2)
 2037aa8:	1004923a 	slli	r2,r2,8
 2037aac:	1144b03a 	or	r2,r2,r5
 2037ab0:	10bfffcc 	andi	r2,r2,65535
 2037ab4:	1004923a 	slli	r2,r2,8
 2037ab8:	10bfffcc 	andi	r2,r2,65535
 2037abc:	2084b03a 	or	r2,r4,r2
 2037ac0:	108000cc 	andi	r2,r2,3
 2037ac4:	1004c03a 	cmpne	r2,r2,zero
 2037ac8:	10803fcc 	andi	r2,r2,255
 2037acc:	1885883a 	add	r2,r3,r2
 2037ad0:	d0a81d8d 	sth	r2,-24458(gp)
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 2037ad4:	e0bffe17 	ldw	r2,-8(fp)
 2037ad8:	10801e17 	ldw	r2,120(r2)
 2037adc:	10012026 	beq	r2,zero,2037f60 <tcp_receive+0x14ec>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 2037ae0:	008085b4 	movhi	r2,534
 2037ae4:	10883604 	addi	r2,r2,8408
 2037ae8:	10800417 	ldw	r2,16(r2)
 2037aec:	10c00303 	ldbu	r3,12(r2)
 2037af0:	10800343 	ldbu	r2,13(r2)
 2037af4:	1004923a 	slli	r2,r2,8
 2037af8:	10c4b03a 	or	r2,r2,r3
 2037afc:	10bfffcc 	andi	r2,r2,65535
 2037b00:	1004d23a 	srli	r2,r2,8
 2037b04:	10ffffcc 	andi	r3,r2,65535
 2037b08:	008085b4 	movhi	r2,534
 2037b0c:	10883604 	addi	r2,r2,8408
 2037b10:	10800417 	ldw	r2,16(r2)
 2037b14:	11000303 	ldbu	r4,12(r2)
 2037b18:	10800343 	ldbu	r2,13(r2)
 2037b1c:	1004923a 	slli	r2,r2,8
 2037b20:	1104b03a 	or	r2,r2,r4
 2037b24:	10bfffcc 	andi	r2,r2,65535
 2037b28:	1004923a 	slli	r2,r2,8
 2037b2c:	10bfffcc 	andi	r2,r2,65535
 2037b30:	1884b03a 	or	r2,r3,r2
 2037b34:	1080004c 	andi	r2,r2,1
 2037b38:	10000f26 	beq	r2,zero,2037b78 <tcp_receive+0x1104>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 2037b3c:	00000a06 	br	2037b68 <tcp_receive+0x10f4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 2037b40:	e0bffe17 	ldw	r2,-8(fp)
 2037b44:	10801e17 	ldw	r2,120(r2)
 2037b48:	e0bffc15 	stw	r2,-16(fp)
              pcb->ooseq = pcb->ooseq->next;
 2037b4c:	e0bffe17 	ldw	r2,-8(fp)
 2037b50:	10801e17 	ldw	r2,120(r2)
 2037b54:	10c00017 	ldw	r3,0(r2)
 2037b58:	e0bffe17 	ldw	r2,-8(fp)
 2037b5c:	10c01e15 	stw	r3,120(r2)
              tcp_seg_free(old_ooseq);
 2037b60:	e13ffc17 	ldw	r4,-16(fp)
 2037b64:	201d2e80 	call	201d2e8 <tcp_seg_free>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 2037b68:	e0bffe17 	ldw	r2,-8(fp)
 2037b6c:	10801e17 	ldw	r2,120(r2)
 2037b70:	103ff31e 	bne	r2,zero,2037b40 <__alt_mem_mem_0+0xfd017b40>
 2037b74:	0000fa06 	br	2037f60 <tcp_receive+0x14ec>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 2037b78:	e0bffe17 	ldw	r2,-8(fp)
 2037b7c:	10801e17 	ldw	r2,120(r2)
 2037b80:	e0bff415 	stw	r2,-48(fp)
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 2037b84:	00006d06 	br	2037d3c <tcp_receive+0x12c8>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 2037b88:	e0bff417 	ldw	r2,-48(fp)
 2037b8c:	10800417 	ldw	r2,16(r2)
 2037b90:	10c00303 	ldbu	r3,12(r2)
 2037b94:	10800343 	ldbu	r2,13(r2)
 2037b98:	1004923a 	slli	r2,r2,8
 2037b9c:	10c4b03a 	or	r2,r2,r3
 2037ba0:	10bfffcc 	andi	r2,r2,65535
 2037ba4:	1004d23a 	srli	r2,r2,8
 2037ba8:	10ffffcc 	andi	r3,r2,65535
 2037bac:	e0bff417 	ldw	r2,-48(fp)
 2037bb0:	10800417 	ldw	r2,16(r2)
 2037bb4:	11000303 	ldbu	r4,12(r2)
 2037bb8:	10800343 	ldbu	r2,13(r2)
 2037bbc:	1004923a 	slli	r2,r2,8
 2037bc0:	1104b03a 	or	r2,r2,r4
 2037bc4:	10bfffcc 	andi	r2,r2,65535
 2037bc8:	1004923a 	slli	r2,r2,8
 2037bcc:	10bfffcc 	andi	r2,r2,65535
 2037bd0:	1884b03a 	or	r2,r3,r2
 2037bd4:	1080004c 	andi	r2,r2,1
 2037bd8:	10005126 	beq	r2,zero,2037d20 <tcp_receive+0x12ac>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 2037bdc:	008085b4 	movhi	r2,534
 2037be0:	10883604 	addi	r2,r2,8408
 2037be4:	10800417 	ldw	r2,16(r2)
 2037be8:	10c00303 	ldbu	r3,12(r2)
 2037bec:	10800343 	ldbu	r2,13(r2)
 2037bf0:	1004923a 	slli	r2,r2,8
 2037bf4:	10c4b03a 	or	r2,r2,r3
 2037bf8:	10bfffcc 	andi	r2,r2,65535
 2037bfc:	1004d23a 	srli	r2,r2,8
 2037c00:	10ffffcc 	andi	r3,r2,65535
 2037c04:	008085b4 	movhi	r2,534
 2037c08:	10883604 	addi	r2,r2,8408
 2037c0c:	10800417 	ldw	r2,16(r2)
 2037c10:	11000303 	ldbu	r4,12(r2)
 2037c14:	10800343 	ldbu	r2,13(r2)
 2037c18:	1004923a 	slli	r2,r2,8
 2037c1c:	1104b03a 	or	r2,r2,r4
 2037c20:	10bfffcc 	andi	r2,r2,65535
 2037c24:	1004923a 	slli	r2,r2,8
 2037c28:	10bfffcc 	andi	r2,r2,65535
 2037c2c:	1884b03a 	or	r2,r3,r2
 2037c30:	1080008c 	andi	r2,r2,2
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 2037c34:	10003a1e 	bne	r2,zero,2037d20 <tcp_receive+0x12ac>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 2037c38:	008085b4 	movhi	r2,534
 2037c3c:	10883604 	addi	r2,r2,8408
 2037c40:	10800417 	ldw	r2,16(r2)
 2037c44:	00c085b4 	movhi	r3,534
 2037c48:	18c83604 	addi	r3,r3,8408
 2037c4c:	18c00417 	ldw	r3,16(r3)
 2037c50:	19000303 	ldbu	r4,12(r3)
 2037c54:	18c00343 	ldbu	r3,13(r3)
 2037c58:	1806923a 	slli	r3,r3,8
 2037c5c:	1906b03a 	or	r3,r3,r4
 2037c60:	18c04014 	ori	r3,r3,256
 2037c64:	180d883a 	mov	r6,r3
 2037c68:	30ffffcc 	andi	r3,r6,65535
 2037c6c:	19403fcc 	andi	r5,r3,255
 2037c70:	10c00303 	ldbu	r3,12(r2)
 2037c74:	1806703a 	and	r3,r3,zero
 2037c78:	1809883a 	mov	r4,r3
 2037c7c:	2807883a 	mov	r3,r5
 2037c80:	20c6b03a 	or	r3,r4,r3
 2037c84:	10c00305 	stb	r3,12(r2)
 2037c88:	30ffffcc 	andi	r3,r6,65535
 2037c8c:	1806d23a 	srli	r3,r3,8
 2037c90:	197fffcc 	andi	r5,r3,65535
 2037c94:	10c00343 	ldbu	r3,13(r2)
 2037c98:	1806703a 	and	r3,r3,zero
 2037c9c:	1809883a 	mov	r4,r3
 2037ca0:	2807883a 	mov	r3,r5
 2037ca4:	20c6b03a 	or	r3,r4,r3
 2037ca8:	10c00345 	stb	r3,13(r2)
                tcplen = TCP_TCPLEN(&inseg);
 2037cac:	008085b4 	movhi	r2,534
 2037cb0:	10883604 	addi	r2,r2,8408
 2037cb4:	10c0020b 	ldhu	r3,8(r2)
 2037cb8:	008085b4 	movhi	r2,534
 2037cbc:	10883604 	addi	r2,r2,8408
 2037cc0:	10800417 	ldw	r2,16(r2)
 2037cc4:	11000303 	ldbu	r4,12(r2)
 2037cc8:	10800343 	ldbu	r2,13(r2)
 2037ccc:	1004923a 	slli	r2,r2,8
 2037cd0:	1104b03a 	or	r2,r2,r4
 2037cd4:	10bfffcc 	andi	r2,r2,65535
 2037cd8:	1004d23a 	srli	r2,r2,8
 2037cdc:	113fffcc 	andi	r4,r2,65535
 2037ce0:	008085b4 	movhi	r2,534
 2037ce4:	10883604 	addi	r2,r2,8408
 2037ce8:	10800417 	ldw	r2,16(r2)
 2037cec:	11400303 	ldbu	r5,12(r2)
 2037cf0:	10800343 	ldbu	r2,13(r2)
 2037cf4:	1004923a 	slli	r2,r2,8
 2037cf8:	1144b03a 	or	r2,r2,r5
 2037cfc:	10bfffcc 	andi	r2,r2,65535
 2037d00:	1004923a 	slli	r2,r2,8
 2037d04:	10bfffcc 	andi	r2,r2,65535
 2037d08:	2084b03a 	or	r2,r4,r2
 2037d0c:	108000cc 	andi	r2,r2,3
 2037d10:	1004c03a 	cmpne	r2,r2,zero
 2037d14:	10803fcc 	andi	r2,r2,255
 2037d18:	1885883a 	add	r2,r3,r2
 2037d1c:	d0a81d8d 	sth	r2,-24458(gp)
              }
              prev = next;
 2037d20:	e0bff417 	ldw	r2,-48(fp)
 2037d24:	e0bff515 	stw	r2,-44(fp)
              next = next->next;
 2037d28:	e0bff417 	ldw	r2,-48(fp)
 2037d2c:	10800017 	ldw	r2,0(r2)
 2037d30:	e0bff415 	stw	r2,-48(fp)
              tcp_seg_free(prev);
 2037d34:	e13ff517 	ldw	r4,-44(fp)
 2037d38:	201d2e80 	call	201d2e8 <tcp_seg_free>
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 2037d3c:	e0bff417 	ldw	r2,-48(fp)
 2037d40:	10001726 	beq	r2,zero,2037da0 <tcp_receive+0x132c>
                   TCP_SEQ_GEQ(seqno + tcplen,
 2037d44:	d0a81d8b 	ldhu	r2,-24458(gp)
 2037d48:	10ffffcc 	andi	r3,r2,65535
 2037d4c:	d0a81b17 	ldw	r2,-24468(gp)
 2037d50:	1887883a 	add	r3,r3,r2
 2037d54:	e0bff417 	ldw	r2,-48(fp)
 2037d58:	10800417 	ldw	r2,16(r2)
 2037d5c:	11000103 	ldbu	r4,4(r2)
 2037d60:	11400143 	ldbu	r5,5(r2)
 2037d64:	280a923a 	slli	r5,r5,8
 2037d68:	2908b03a 	or	r4,r5,r4
 2037d6c:	11400183 	ldbu	r5,6(r2)
 2037d70:	280a943a 	slli	r5,r5,16
 2037d74:	2908b03a 	or	r4,r5,r4
 2037d78:	108001c3 	ldbu	r2,7(r2)
 2037d7c:	1004963a 	slli	r2,r2,24
 2037d80:	1104b03a 	or	r2,r2,r4
 2037d84:	1009883a 	mov	r4,r2
 2037d88:	e0bff417 	ldw	r2,-48(fp)
 2037d8c:	1080020b 	ldhu	r2,8(r2)
 2037d90:	10bfffcc 	andi	r2,r2,65535
 2037d94:	2085883a 	add	r2,r4,r2
 2037d98:	1885c83a 	sub	r2,r3,r2
            }
          } else {
            next = pcb->ooseq;
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 2037d9c:	103f7a0e 	bge	r2,zero,2037b88 <__alt_mem_mem_0+0xfd017b88>
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 2037da0:	e0bff417 	ldw	r2,-48(fp)
 2037da4:	10006b26 	beq	r2,zero,2037f54 <tcp_receive+0x14e0>
                TCP_SEQ_GT(seqno + tcplen,
 2037da8:	d0a81d8b 	ldhu	r2,-24458(gp)
 2037dac:	10ffffcc 	andi	r3,r2,65535
 2037db0:	d0a81b17 	ldw	r2,-24468(gp)
 2037db4:	1887883a 	add	r3,r3,r2
 2037db8:	e0bff417 	ldw	r2,-48(fp)
 2037dbc:	10800417 	ldw	r2,16(r2)
 2037dc0:	11000103 	ldbu	r4,4(r2)
 2037dc4:	11400143 	ldbu	r5,5(r2)
 2037dc8:	280a923a 	slli	r5,r5,8
 2037dcc:	2908b03a 	or	r4,r5,r4
 2037dd0:	11400183 	ldbu	r5,6(r2)
 2037dd4:	280a943a 	slli	r5,r5,16
 2037dd8:	2908b03a 	or	r4,r5,r4
 2037ddc:	108001c3 	ldbu	r2,7(r2)
 2037de0:	1004963a 	slli	r2,r2,24
 2037de4:	1104b03a 	or	r2,r2,r4
 2037de8:	1885c83a 	sub	r2,r3,r2
              next = next->next;
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 2037dec:	0080590e 	bge	zero,r2,2037f54 <tcp_receive+0x14e0>
                TCP_SEQ_GT(seqno + tcplen,
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 2037df0:	e0bff417 	ldw	r2,-48(fp)
 2037df4:	10800417 	ldw	r2,16(r2)
 2037df8:	10c00103 	ldbu	r3,4(r2)
 2037dfc:	11000143 	ldbu	r4,5(r2)
 2037e00:	2008923a 	slli	r4,r4,8
 2037e04:	20c6b03a 	or	r3,r4,r3
 2037e08:	11000183 	ldbu	r4,6(r2)
 2037e0c:	2008943a 	slli	r4,r4,16
 2037e10:	20c6b03a 	or	r3,r4,r3
 2037e14:	108001c3 	ldbu	r2,7(r2)
 2037e18:	1004963a 	slli	r2,r2,24
 2037e1c:	10c4b03a 	or	r2,r2,r3
 2037e20:	1007883a 	mov	r3,r2
 2037e24:	d0a81b17 	ldw	r2,-24468(gp)
 2037e28:	1885c83a 	sub	r2,r3,r2
 2037e2c:	1007883a 	mov	r3,r2
 2037e30:	008085b4 	movhi	r2,534
 2037e34:	10883604 	addi	r2,r2,8408
 2037e38:	10c0020d 	sth	r3,8(r2)
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 2037e3c:	008085b4 	movhi	r2,534
 2037e40:	10883604 	addi	r2,r2,8408
 2037e44:	10800417 	ldw	r2,16(r2)
 2037e48:	10c00303 	ldbu	r3,12(r2)
 2037e4c:	10800343 	ldbu	r2,13(r2)
 2037e50:	1004923a 	slli	r2,r2,8
 2037e54:	10c4b03a 	or	r2,r2,r3
 2037e58:	10bfffcc 	andi	r2,r2,65535
 2037e5c:	1004d23a 	srli	r2,r2,8
 2037e60:	10ffffcc 	andi	r3,r2,65535
 2037e64:	008085b4 	movhi	r2,534
 2037e68:	10883604 	addi	r2,r2,8408
 2037e6c:	10800417 	ldw	r2,16(r2)
 2037e70:	11000303 	ldbu	r4,12(r2)
 2037e74:	10800343 	ldbu	r2,13(r2)
 2037e78:	1004923a 	slli	r2,r2,8
 2037e7c:	1104b03a 	or	r2,r2,r4
 2037e80:	10bfffcc 	andi	r2,r2,65535
 2037e84:	1004923a 	slli	r2,r2,8
 2037e88:	10bfffcc 	andi	r2,r2,65535
 2037e8c:	1884b03a 	or	r2,r3,r2
 2037e90:	1080008c 	andi	r2,r2,2
 2037e94:	10000826 	beq	r2,zero,2037eb8 <tcp_receive+0x1444>
                inseg.len -= 1;
 2037e98:	008085b4 	movhi	r2,534
 2037e9c:	10883604 	addi	r2,r2,8408
 2037ea0:	1080020b 	ldhu	r2,8(r2)
 2037ea4:	10bfffc4 	addi	r2,r2,-1
 2037ea8:	1007883a 	mov	r3,r2
 2037eac:	008085b4 	movhi	r2,534
 2037eb0:	10883604 	addi	r2,r2,8408
 2037eb4:	10c0020d 	sth	r3,8(r2)
              }
              pbuf_realloc(inseg.p, inseg.len);
 2037eb8:	008085b4 	movhi	r2,534
 2037ebc:	10883604 	addi	r2,r2,8408
 2037ec0:	10c00117 	ldw	r3,4(r2)
 2037ec4:	008085b4 	movhi	r2,534
 2037ec8:	10883604 	addi	r2,r2,8408
 2037ecc:	1080020b 	ldhu	r2,8(r2)
 2037ed0:	10bfffcc 	andi	r2,r2,65535
 2037ed4:	100b883a 	mov	r5,r2
 2037ed8:	1809883a 	mov	r4,r3
 2037edc:	201a7100 	call	201a710 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 2037ee0:	008085b4 	movhi	r2,534
 2037ee4:	10883604 	addi	r2,r2,8408
 2037ee8:	10c0020b 	ldhu	r3,8(r2)
 2037eec:	008085b4 	movhi	r2,534
 2037ef0:	10883604 	addi	r2,r2,8408
 2037ef4:	10800417 	ldw	r2,16(r2)
 2037ef8:	11000303 	ldbu	r4,12(r2)
 2037efc:	10800343 	ldbu	r2,13(r2)
 2037f00:	1004923a 	slli	r2,r2,8
 2037f04:	1104b03a 	or	r2,r2,r4
 2037f08:	10bfffcc 	andi	r2,r2,65535
 2037f0c:	1004d23a 	srli	r2,r2,8
 2037f10:	113fffcc 	andi	r4,r2,65535
 2037f14:	008085b4 	movhi	r2,534
 2037f18:	10883604 	addi	r2,r2,8408
 2037f1c:	10800417 	ldw	r2,16(r2)
 2037f20:	11400303 	ldbu	r5,12(r2)
 2037f24:	10800343 	ldbu	r2,13(r2)
 2037f28:	1004923a 	slli	r2,r2,8
 2037f2c:	1144b03a 	or	r2,r2,r5
 2037f30:	10bfffcc 	andi	r2,r2,65535
 2037f34:	1004923a 	slli	r2,r2,8
 2037f38:	10bfffcc 	andi	r2,r2,65535
 2037f3c:	2084b03a 	or	r2,r4,r2
 2037f40:	108000cc 	andi	r2,r2,3
 2037f44:	1004c03a 	cmpne	r2,r2,zero
 2037f48:	10803fcc 	andi	r2,r2,255
 2037f4c:	1885883a 	add	r2,r3,r2
 2037f50:	d0a81d8d 	sth	r2,-24458(gp)
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 2037f54:	e0bffe17 	ldw	r2,-8(fp)
 2037f58:	e0fff417 	ldw	r3,-48(fp)
 2037f5c:	10c01e15 	stw	r3,120(r2)
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 2037f60:	d0a81d8b 	ldhu	r2,-24458(gp)
 2037f64:	10ffffcc 	andi	r3,r2,65535
 2037f68:	d0a81b17 	ldw	r2,-24468(gp)
 2037f6c:	1887883a 	add	r3,r3,r2
 2037f70:	e0bffe17 	ldw	r2,-8(fp)
 2037f74:	10c00b15 	stw	r3,44(r2)

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 2037f78:	e0bffe17 	ldw	r2,-8(fp)
 2037f7c:	10c00c0b 	ldhu	r3,48(r2)
 2037f80:	d0a81d8b 	ldhu	r2,-24458(gp)
 2037f84:	1885c83a 	sub	r2,r3,r2
 2037f88:	1007883a 	mov	r3,r2
 2037f8c:	e0bffe17 	ldw	r2,-8(fp)
 2037f90:	10c00c0d 	sth	r3,48(r2)

        tcp_update_rcv_ann_wnd(pcb);
 2037f94:	e13ffe17 	ldw	r4,-8(fp)
 2037f98:	201c30c0 	call	201c30c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 2037f9c:	008085b4 	movhi	r2,534
 2037fa0:	10883604 	addi	r2,r2,8408
 2037fa4:	10800117 	ldw	r2,4(r2)
 2037fa8:	1080020b 	ldhu	r2,8(r2)
 2037fac:	10bfffcc 	andi	r2,r2,65535
 2037fb0:	10000726 	beq	r2,zero,2037fd0 <tcp_receive+0x155c>
          recv_data = inseg.p;
 2037fb4:	008085b4 	movhi	r2,534
 2037fb8:	10883604 	addi	r2,r2,8408
 2037fbc:	10800117 	ldw	r2,4(r2)
 2037fc0:	d0a81f15 	stw	r2,-24452(gp)
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 2037fc4:	008085b4 	movhi	r2,534
 2037fc8:	10883604 	addi	r2,r2,8408
 2037fcc:	10000115 	stw	zero,4(r2)
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 2037fd0:	008085b4 	movhi	r2,534
 2037fd4:	10883604 	addi	r2,r2,8408
 2037fd8:	10800417 	ldw	r2,16(r2)
 2037fdc:	10c00303 	ldbu	r3,12(r2)
 2037fe0:	10800343 	ldbu	r2,13(r2)
 2037fe4:	1004923a 	slli	r2,r2,8
 2037fe8:	10c4b03a 	or	r2,r2,r3
 2037fec:	10bfffcc 	andi	r2,r2,65535
 2037ff0:	1004d23a 	srli	r2,r2,8
 2037ff4:	10ffffcc 	andi	r3,r2,65535
 2037ff8:	008085b4 	movhi	r2,534
 2037ffc:	10883604 	addi	r2,r2,8408
 2038000:	10800417 	ldw	r2,16(r2)
 2038004:	11000303 	ldbu	r4,12(r2)
 2038008:	10800343 	ldbu	r2,13(r2)
 203800c:	1004923a 	slli	r2,r2,8
 2038010:	1104b03a 	or	r2,r2,r4
 2038014:	10bfffcc 	andi	r2,r2,65535
 2038018:	1004923a 	slli	r2,r2,8
 203801c:	10bfffcc 	andi	r2,r2,65535
 2038020:	1884b03a 	or	r2,r3,r2
 2038024:	1080004c 	andi	r2,r2,1
 2038028:	10008d26 	beq	r2,zero,2038260 <tcp_receive+0x17ec>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 203802c:	d0a81e03 	ldbu	r2,-24456(gp)
 2038030:	10800814 	ori	r2,r2,32
 2038034:	d0a81e05 	stb	r2,-24456(gp)
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 2038038:	00008906 	br	2038260 <tcp_receive+0x17ec>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 203803c:	e0bffe17 	ldw	r2,-8(fp)
 2038040:	10801e17 	ldw	r2,120(r2)
 2038044:	e0bffd15 	stw	r2,-12(fp)
          seqno = pcb->ooseq->tcphdr->seqno;
 2038048:	e0bffe17 	ldw	r2,-8(fp)
 203804c:	10801e17 	ldw	r2,120(r2)
 2038050:	10800417 	ldw	r2,16(r2)
 2038054:	10c00103 	ldbu	r3,4(r2)
 2038058:	11000143 	ldbu	r4,5(r2)
 203805c:	2008923a 	slli	r4,r4,8
 2038060:	20c6b03a 	or	r3,r4,r3
 2038064:	11000183 	ldbu	r4,6(r2)
 2038068:	2008943a 	slli	r4,r4,16
 203806c:	20c6b03a 	or	r3,r4,r3
 2038070:	108001c3 	ldbu	r2,7(r2)
 2038074:	1004963a 	slli	r2,r2,24
 2038078:	10c4b03a 	or	r2,r2,r3
 203807c:	d0a81b15 	stw	r2,-24468(gp)

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 2038080:	e0bffe17 	ldw	r2,-8(fp)
 2038084:	10c00b17 	ldw	r3,44(r2)
 2038088:	e0bffd17 	ldw	r2,-12(fp)
 203808c:	1080020b 	ldhu	r2,8(r2)
 2038090:	113fffcc 	andi	r4,r2,65535
 2038094:	e0bffd17 	ldw	r2,-12(fp)
 2038098:	10800417 	ldw	r2,16(r2)
 203809c:	11400303 	ldbu	r5,12(r2)
 20380a0:	10800343 	ldbu	r2,13(r2)
 20380a4:	1004923a 	slli	r2,r2,8
 20380a8:	1144b03a 	or	r2,r2,r5
 20380ac:	10bfffcc 	andi	r2,r2,65535
 20380b0:	1004d23a 	srli	r2,r2,8
 20380b4:	117fffcc 	andi	r5,r2,65535
 20380b8:	e0bffd17 	ldw	r2,-12(fp)
 20380bc:	10800417 	ldw	r2,16(r2)
 20380c0:	11800303 	ldbu	r6,12(r2)
 20380c4:	10800343 	ldbu	r2,13(r2)
 20380c8:	1004923a 	slli	r2,r2,8
 20380cc:	1184b03a 	or	r2,r2,r6
 20380d0:	10bfffcc 	andi	r2,r2,65535
 20380d4:	1004923a 	slli	r2,r2,8
 20380d8:	10bfffcc 	andi	r2,r2,65535
 20380dc:	2884b03a 	or	r2,r5,r2
 20380e0:	108000cc 	andi	r2,r2,3
 20380e4:	1004c03a 	cmpne	r2,r2,zero
 20380e8:	10803fcc 	andi	r2,r2,255
 20380ec:	2085883a 	add	r2,r4,r2
 20380f0:	1887883a 	add	r3,r3,r2
 20380f4:	e0bffe17 	ldw	r2,-8(fp)
 20380f8:	10c00b15 	stw	r3,44(r2)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 20380fc:	e0bffe17 	ldw	r2,-8(fp)
 2038100:	10c00c0b 	ldhu	r3,48(r2)
 2038104:	e0bffd17 	ldw	r2,-12(fp)
 2038108:	1100020b 	ldhu	r4,8(r2)
 203810c:	e0bffd17 	ldw	r2,-12(fp)
 2038110:	10800417 	ldw	r2,16(r2)
 2038114:	11400303 	ldbu	r5,12(r2)
 2038118:	10800343 	ldbu	r2,13(r2)
 203811c:	1004923a 	slli	r2,r2,8
 2038120:	1144b03a 	or	r2,r2,r5
 2038124:	10bfffcc 	andi	r2,r2,65535
 2038128:	1004d23a 	srli	r2,r2,8
 203812c:	117fffcc 	andi	r5,r2,65535
 2038130:	e0bffd17 	ldw	r2,-12(fp)
 2038134:	10800417 	ldw	r2,16(r2)
 2038138:	11800303 	ldbu	r6,12(r2)
 203813c:	10800343 	ldbu	r2,13(r2)
 2038140:	1004923a 	slli	r2,r2,8
 2038144:	1184b03a 	or	r2,r2,r6
 2038148:	10bfffcc 	andi	r2,r2,65535
 203814c:	1004923a 	slli	r2,r2,8
 2038150:	10bfffcc 	andi	r2,r2,65535
 2038154:	2884b03a 	or	r2,r5,r2
 2038158:	108000cc 	andi	r2,r2,3
 203815c:	1004c03a 	cmpne	r2,r2,zero
 2038160:	10803fcc 	andi	r2,r2,255
 2038164:	2085883a 	add	r2,r4,r2
 2038168:	1885c83a 	sub	r2,r3,r2
 203816c:	1007883a 	mov	r3,r2
 2038170:	e0bffe17 	ldw	r2,-8(fp)
 2038174:	10c00c0d 	sth	r3,48(r2)

          tcp_update_rcv_ann_wnd(pcb);
 2038178:	e13ffe17 	ldw	r4,-8(fp)
 203817c:	201c30c0 	call	201c30c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 2038180:	e0bffd17 	ldw	r2,-12(fp)
 2038184:	10800117 	ldw	r2,4(r2)
 2038188:	1080020b 	ldhu	r2,8(r2)
 203818c:	10bfffcc 	andi	r2,r2,65535
 2038190:	10000e26 	beq	r2,zero,20381cc <tcp_receive+0x1758>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
 2038194:	d0a81f17 	ldw	r2,-24452(gp)
 2038198:	10000726 	beq	r2,zero,20381b8 <tcp_receive+0x1744>
              pbuf_cat(recv_data, cseg->p);
 203819c:	d0e81f17 	ldw	r3,-24452(gp)
 20381a0:	e0bffd17 	ldw	r2,-12(fp)
 20381a4:	10800117 	ldw	r2,4(r2)
 20381a8:	100b883a 	mov	r5,r2
 20381ac:	1809883a 	mov	r4,r3
 20381b0:	201ac140 	call	201ac14 <pbuf_cat>
 20381b4:	00000306 	br	20381c4 <tcp_receive+0x1750>
            } else {
              recv_data = cseg->p;
 20381b8:	e0bffd17 	ldw	r2,-12(fp)
 20381bc:	10800117 	ldw	r2,4(r2)
 20381c0:	d0a81f15 	stw	r2,-24452(gp)
            }
            cseg->p = NULL;
 20381c4:	e0bffd17 	ldw	r2,-12(fp)
 20381c8:	10000115 	stw	zero,4(r2)
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 20381cc:	e0bffd17 	ldw	r2,-12(fp)
 20381d0:	10800417 	ldw	r2,16(r2)
 20381d4:	10c00303 	ldbu	r3,12(r2)
 20381d8:	10800343 	ldbu	r2,13(r2)
 20381dc:	1004923a 	slli	r2,r2,8
 20381e0:	10c4b03a 	or	r2,r2,r3
 20381e4:	10bfffcc 	andi	r2,r2,65535
 20381e8:	1004d23a 	srli	r2,r2,8
 20381ec:	10ffffcc 	andi	r3,r2,65535
 20381f0:	e0bffd17 	ldw	r2,-12(fp)
 20381f4:	10800417 	ldw	r2,16(r2)
 20381f8:	11000303 	ldbu	r4,12(r2)
 20381fc:	10800343 	ldbu	r2,13(r2)
 2038200:	1004923a 	slli	r2,r2,8
 2038204:	1104b03a 	or	r2,r2,r4
 2038208:	10bfffcc 	andi	r2,r2,65535
 203820c:	1004923a 	slli	r2,r2,8
 2038210:	10bfffcc 	andi	r2,r2,65535
 2038214:	1884b03a 	or	r2,r3,r2
 2038218:	1080004c 	andi	r2,r2,1
 203821c:	10000a26 	beq	r2,zero,2038248 <tcp_receive+0x17d4>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 2038220:	d0a81e03 	ldbu	r2,-24456(gp)
 2038224:	10800814 	ori	r2,r2,32
 2038228:	d0a81e05 	stb	r2,-24456(gp)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 203822c:	e0bffe17 	ldw	r2,-8(fp)
 2038230:	10800617 	ldw	r2,24(r2)
 2038234:	10800118 	cmpnei	r2,r2,4
 2038238:	1000031e 	bne	r2,zero,2038248 <tcp_receive+0x17d4>
              pcb->state = CLOSE_WAIT;
 203823c:	e0bffe17 	ldw	r2,-8(fp)
 2038240:	00c001c4 	movi	r3,7
 2038244:	10c00615 	stw	r3,24(r2)
            } 
          }

          pcb->ooseq = cseg->next;
 2038248:	e0bffd17 	ldw	r2,-12(fp)
 203824c:	10c00017 	ldw	r3,0(r2)
 2038250:	e0bffe17 	ldw	r2,-8(fp)
 2038254:	10c01e15 	stw	r3,120(r2)
          tcp_seg_free(cseg);
 2038258:	e13ffd17 	ldw	r4,-12(fp)
 203825c:	201d2e80 	call	201d2e8 <tcp_seg_free>
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 2038260:	e0bffe17 	ldw	r2,-8(fp)
 2038264:	10801e17 	ldw	r2,120(r2)
 2038268:	10001126 	beq	r2,zero,20382b0 <tcp_receive+0x183c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 203826c:	e0bffe17 	ldw	r2,-8(fp)
 2038270:	10801e17 	ldw	r2,120(r2)
 2038274:	10800417 	ldw	r2,16(r2)
 2038278:	10c00103 	ldbu	r3,4(r2)
 203827c:	11000143 	ldbu	r4,5(r2)
 2038280:	2008923a 	slli	r4,r4,8
 2038284:	20c6b03a 	or	r3,r4,r3
 2038288:	11000183 	ldbu	r4,6(r2)
 203828c:	2008943a 	slli	r4,r4,16
 2038290:	20c6b03a 	or	r3,r4,r3
 2038294:	108001c3 	ldbu	r2,7(r2)
 2038298:	1004963a 	slli	r2,r2,24
 203829c:	10c4b03a 	or	r2,r2,r3
 20382a0:	1007883a 	mov	r3,r2
 20382a4:	e0bffe17 	ldw	r2,-8(fp)
 20382a8:	10800b17 	ldw	r2,44(r2)
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 20382ac:	18bf6326 	beq	r3,r2,203803c <__alt_mem_mem_0+0xfd01803c>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 20382b0:	e0bffe17 	ldw	r2,-8(fp)
 20382b4:	10800883 	ldbu	r2,34(r2)
 20382b8:	10803fcc 	andi	r2,r2,255
 20382bc:	1080004c 	andi	r2,r2,1
 20382c0:	10000e26 	beq	r2,zero,20382fc <tcp_receive+0x1888>
 20382c4:	e0bffe17 	ldw	r2,-8(fp)
 20382c8:	10c00883 	ldbu	r3,34(r2)
 20382cc:	00bfff84 	movi	r2,-2
 20382d0:	1884703a 	and	r2,r3,r2
 20382d4:	1007883a 	mov	r3,r2
 20382d8:	e0bffe17 	ldw	r2,-8(fp)
 20382dc:	10c00885 	stb	r3,34(r2)
 20382e0:	e0bffe17 	ldw	r2,-8(fp)
 20382e4:	10800883 	ldbu	r2,34(r2)
 20382e8:	10800094 	ori	r2,r2,2
 20382ec:	1007883a 	mov	r3,r2
 20382f0:	e0bffe17 	ldw	r2,-8(fp)
 20382f4:	10c00885 	stb	r3,34(r2)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 20382f8:	0001bd06 	br	20389f0 <tcp_receive+0x1f7c>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 20382fc:	e0bffe17 	ldw	r2,-8(fp)
 2038300:	10800883 	ldbu	r2,34(r2)
 2038304:	10800054 	ori	r2,r2,1
 2038308:	1007883a 	mov	r3,r2
 203830c:	e0bffe17 	ldw	r2,-8(fp)
 2038310:	10c00885 	stb	r3,34(r2)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 2038314:	0001b606 	br	20389f0 <tcp_receive+0x1f7c>
        /* Acknowledge the segment(s). */
        tcp_ack(pcb);

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 2038318:	e13ffe17 	ldw	r4,-8(fp)
 203831c:	201f49c0 	call	201f49c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 2038320:	e0bffe17 	ldw	r2,-8(fp)
 2038324:	10801e17 	ldw	r2,120(r2)
 2038328:	1000071e 	bne	r2,zero,2038348 <tcp_receive+0x18d4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 203832c:	010085b4 	movhi	r4,534
 2038330:	21083604 	addi	r4,r4,8408
 2038334:	201d37c0 	call	201d37c <tcp_seg_copy>
 2038338:	1007883a 	mov	r3,r2
 203833c:	e0bffe17 	ldw	r2,-8(fp)
 2038340:	10c01e15 	stw	r3,120(r2)
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 2038344:	0001aa06 	br	20389f0 <tcp_receive+0x1f7c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 2038348:	e03ff515 	stw	zero,-44(fp)
          for(next = pcb->ooseq; next != NULL; next = next->next) {
 203834c:	e0bffe17 	ldw	r2,-8(fp)
 2038350:	10801e17 	ldw	r2,120(r2)
 2038354:	e0bff415 	stw	r2,-48(fp)
 2038358:	00019306 	br	20389a8 <tcp_receive+0x1f34>
            if (seqno == next->tcphdr->seqno) {
 203835c:	e0bff417 	ldw	r2,-48(fp)
 2038360:	10800417 	ldw	r2,16(r2)
 2038364:	10c00103 	ldbu	r3,4(r2)
 2038368:	11000143 	ldbu	r4,5(r2)
 203836c:	2008923a 	slli	r4,r4,8
 2038370:	20c6b03a 	or	r3,r4,r3
 2038374:	11000183 	ldbu	r4,6(r2)
 2038378:	2008943a 	slli	r4,r4,16
 203837c:	20c6b03a 	or	r3,r4,r3
 2038380:	108001c3 	ldbu	r2,7(r2)
 2038384:	1004963a 	slli	r2,r2,24
 2038388:	10c4b03a 	or	r2,r2,r3
 203838c:	1007883a 	mov	r3,r2
 2038390:	d0a81b17 	ldw	r2,-24468(gp)
 2038394:	18801b1e 	bne	r3,r2,2038404 <tcp_receive+0x1990>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 2038398:	008085b4 	movhi	r2,534
 203839c:	10883604 	addi	r2,r2,8408
 20383a0:	1100020b 	ldhu	r4,8(r2)
 20383a4:	e0bff417 	ldw	r2,-48(fp)
 20383a8:	10c0020b 	ldhu	r3,8(r2)
 20383ac:	20bfffcc 	andi	r2,r4,65535
 20383b0:	18ffffcc 	andi	r3,r3,65535
 20383b4:	18817f2e 	bgeu	r3,r2,20389b4 <tcp_receive+0x1f40>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 20383b8:	010085b4 	movhi	r4,534
 20383bc:	21083604 	addi	r4,r4,8408
 20383c0:	201d37c0 	call	201d37c <tcp_seg_copy>
 20383c4:	e0bffd15 	stw	r2,-12(fp)
                if (cseg != NULL) {
 20383c8:	e0bffd17 	ldw	r2,-12(fp)
 20383cc:	10017b26 	beq	r2,zero,20389bc <tcp_receive+0x1f48>
                  if (prev != NULL) {
 20383d0:	e0bff517 	ldw	r2,-44(fp)
 20383d4:	10000426 	beq	r2,zero,20383e8 <tcp_receive+0x1974>
                    prev->next = cseg;
 20383d8:	e0bff517 	ldw	r2,-44(fp)
 20383dc:	e0fffd17 	ldw	r3,-12(fp)
 20383e0:	10c00015 	stw	r3,0(r2)
 20383e4:	00000306 	br	20383f4 <tcp_receive+0x1980>
                  } else {
                    pcb->ooseq = cseg;
 20383e8:	e0bffe17 	ldw	r2,-8(fp)
 20383ec:	e0fffd17 	ldw	r3,-12(fp)
 20383f0:	10c01e15 	stw	r3,120(r2)
                  }
                  tcp_oos_insert_segment(cseg, next);
 20383f4:	e17ff417 	ldw	r5,-48(fp)
 20383f8:	e13ffd17 	ldw	r4,-12(fp)
 20383fc:	20367d40 	call	20367d4 <tcp_oos_insert_segment>
                }
                break;
 2038400:	00016e06 	br	20389bc <tcp_receive+0x1f48>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 2038404:	e0bff517 	ldw	r2,-44(fp)
 2038408:	10001c1e 	bne	r2,zero,203847c <tcp_receive+0x1a08>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 203840c:	d0e81b17 	ldw	r3,-24468(gp)
 2038410:	e0bff417 	ldw	r2,-48(fp)
 2038414:	10800417 	ldw	r2,16(r2)
 2038418:	11000103 	ldbu	r4,4(r2)
 203841c:	11400143 	ldbu	r5,5(r2)
 2038420:	280a923a 	slli	r5,r5,8
 2038424:	2908b03a 	or	r4,r5,r4
 2038428:	11400183 	ldbu	r5,6(r2)
 203842c:	280a943a 	slli	r5,r5,16
 2038430:	2908b03a 	or	r4,r5,r4
 2038434:	108001c3 	ldbu	r2,7(r2)
 2038438:	1004963a 	slli	r2,r2,24
 203843c:	1104b03a 	or	r2,r2,r4
 2038440:	1885c83a 	sub	r2,r3,r2
 2038444:	1000680e 	bge	r2,zero,20385e8 <tcp_receive+0x1b74>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 2038448:	010085b4 	movhi	r4,534
 203844c:	21083604 	addi	r4,r4,8408
 2038450:	201d37c0 	call	201d37c <tcp_seg_copy>
 2038454:	e0bffd15 	stw	r2,-12(fp)
                  if (cseg != NULL) {
 2038458:	e0bffd17 	ldw	r2,-12(fp)
 203845c:	10015926 	beq	r2,zero,20389c4 <tcp_receive+0x1f50>
                    pcb->ooseq = cseg;
 2038460:	e0bffe17 	ldw	r2,-8(fp)
 2038464:	e0fffd17 	ldw	r3,-12(fp)
 2038468:	10c01e15 	stw	r3,120(r2)
                    tcp_oos_insert_segment(cseg, next);
 203846c:	e17ff417 	ldw	r5,-48(fp)
 2038470:	e13ffd17 	ldw	r4,-12(fp)
 2038474:	20367d40 	call	20367d4 <tcp_oos_insert_segment>
                  }
                  break;
 2038478:	00015206 	br	20389c4 <tcp_receive+0x1f50>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 203847c:	d0e81b17 	ldw	r3,-24468(gp)
 2038480:	e0bff517 	ldw	r2,-44(fp)
 2038484:	10800417 	ldw	r2,16(r2)
 2038488:	11000103 	ldbu	r4,4(r2)
 203848c:	11400143 	ldbu	r5,5(r2)
 2038490:	280a923a 	slli	r5,r5,8
 2038494:	2908b03a 	or	r4,r5,r4
 2038498:	11400183 	ldbu	r5,6(r2)
 203849c:	280a943a 	slli	r5,r5,16
 20384a0:	2908b03a 	or	r4,r5,r4
 20384a4:	108001c3 	ldbu	r2,7(r2)
 20384a8:	1004963a 	slli	r2,r2,24
 20384ac:	1104b03a 	or	r2,r2,r4
 20384b0:	1885c83a 	sub	r2,r3,r2
 20384b4:	10bfffc4 	addi	r2,r2,-1
 20384b8:	10004b16 	blt	r2,zero,20385e8 <tcp_receive+0x1b74>
 20384bc:	d0e81b17 	ldw	r3,-24468(gp)
 20384c0:	e0bff417 	ldw	r2,-48(fp)
 20384c4:	10800417 	ldw	r2,16(r2)
 20384c8:	11000103 	ldbu	r4,4(r2)
 20384cc:	11400143 	ldbu	r5,5(r2)
 20384d0:	280a923a 	slli	r5,r5,8
 20384d4:	2908b03a 	or	r4,r5,r4
 20384d8:	11400183 	ldbu	r5,6(r2)
 20384dc:	280a943a 	slli	r5,r5,16
 20384e0:	2908b03a 	or	r4,r5,r4
 20384e4:	108001c3 	ldbu	r2,7(r2)
 20384e8:	1004963a 	slli	r2,r2,24
 20384ec:	1104b03a 	or	r2,r2,r4
 20384f0:	1885c83a 	sub	r2,r3,r2
 20384f4:	10800044 	addi	r2,r2,1
 20384f8:	00803b16 	blt	zero,r2,20385e8 <tcp_receive+0x1b74>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 20384fc:	010085b4 	movhi	r4,534
 2038500:	21083604 	addi	r4,r4,8408
 2038504:	201d37c0 	call	201d37c <tcp_seg_copy>
 2038508:	e0bffd15 	stw	r2,-12(fp)
                  if (cseg != NULL) {
 203850c:	e0bffd17 	ldw	r2,-12(fp)
 2038510:	10012e26 	beq	r2,zero,20389cc <tcp_receive+0x1f58>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 2038514:	e0bff517 	ldw	r2,-44(fp)
 2038518:	10800417 	ldw	r2,16(r2)
 203851c:	10c00103 	ldbu	r3,4(r2)
 2038520:	11000143 	ldbu	r4,5(r2)
 2038524:	2008923a 	slli	r4,r4,8
 2038528:	20c6b03a 	or	r3,r4,r3
 203852c:	11000183 	ldbu	r4,6(r2)
 2038530:	2008943a 	slli	r4,r4,16
 2038534:	20c6b03a 	or	r3,r4,r3
 2038538:	108001c3 	ldbu	r2,7(r2)
 203853c:	1004963a 	slli	r2,r2,24
 2038540:	10c4b03a 	or	r2,r2,r3
 2038544:	1007883a 	mov	r3,r2
 2038548:	e0bff517 	ldw	r2,-44(fp)
 203854c:	1080020b 	ldhu	r2,8(r2)
 2038550:	10bfffcc 	andi	r2,r2,65535
 2038554:	1887883a 	add	r3,r3,r2
 2038558:	d0a81b17 	ldw	r2,-24468(gp)
 203855c:	1885c83a 	sub	r2,r3,r2
 2038560:	00801a0e 	bge	zero,r2,20385cc <tcp_receive+0x1b58>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 2038564:	d0a81b17 	ldw	r2,-24468(gp)
 2038568:	100b883a 	mov	r5,r2
 203856c:	e0bff517 	ldw	r2,-44(fp)
 2038570:	10800417 	ldw	r2,16(r2)
 2038574:	10c00103 	ldbu	r3,4(r2)
 2038578:	11000143 	ldbu	r4,5(r2)
 203857c:	2008923a 	slli	r4,r4,8
 2038580:	20c6b03a 	or	r3,r4,r3
 2038584:	11000183 	ldbu	r4,6(r2)
 2038588:	2008943a 	slli	r4,r4,16
 203858c:	20c6b03a 	or	r3,r4,r3
 2038590:	108001c3 	ldbu	r2,7(r2)
 2038594:	1004963a 	slli	r2,r2,24
 2038598:	10c4b03a 	or	r2,r2,r3
 203859c:	2885c83a 	sub	r2,r5,r2
 20385a0:	1007883a 	mov	r3,r2
 20385a4:	e0bff517 	ldw	r2,-44(fp)
 20385a8:	10c0020d 	sth	r3,8(r2)
                      pbuf_realloc(prev->p, prev->len);
 20385ac:	e0bff517 	ldw	r2,-44(fp)
 20385b0:	10c00117 	ldw	r3,4(r2)
 20385b4:	e0bff517 	ldw	r2,-44(fp)
 20385b8:	1080020b 	ldhu	r2,8(r2)
 20385bc:	10bfffcc 	andi	r2,r2,65535
 20385c0:	100b883a 	mov	r5,r2
 20385c4:	1809883a 	mov	r4,r3
 20385c8:	201a7100 	call	201a710 <pbuf_realloc>
                    }
                    prev->next = cseg;
 20385cc:	e0bff517 	ldw	r2,-44(fp)
 20385d0:	e0fffd17 	ldw	r3,-12(fp)
 20385d4:	10c00015 	stw	r3,0(r2)
                    tcp_oos_insert_segment(cseg, next);
 20385d8:	e17ff417 	ldw	r5,-48(fp)
 20385dc:	e13ffd17 	ldw	r4,-12(fp)
 20385e0:	20367d40 	call	20367d4 <tcp_oos_insert_segment>
                  }
                  break;
 20385e4:	0000f906 	br	20389cc <tcp_receive+0x1f58>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 20385e8:	e0bff417 	ldw	r2,-48(fp)
 20385ec:	10800017 	ldw	r2,0(r2)
 20385f0:	1000e81e 	bne	r2,zero,2038994 <tcp_receive+0x1f20>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 20385f4:	d0e81b17 	ldw	r3,-24468(gp)
 20385f8:	e0bff417 	ldw	r2,-48(fp)
 20385fc:	10800417 	ldw	r2,16(r2)
 2038600:	11000103 	ldbu	r4,4(r2)
 2038604:	11400143 	ldbu	r5,5(r2)
 2038608:	280a923a 	slli	r5,r5,8
 203860c:	2908b03a 	or	r4,r5,r4
 2038610:	11400183 	ldbu	r5,6(r2)
 2038614:	280a943a 	slli	r5,r5,16
 2038618:	2908b03a 	or	r4,r5,r4
 203861c:	108001c3 	ldbu	r2,7(r2)
 2038620:	1004963a 	slli	r2,r2,24
 2038624:	1104b03a 	or	r2,r2,r4
 2038628:	1885c83a 	sub	r2,r3,r2
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 203862c:	0080d90e 	bge	zero,r2,2038994 <tcp_receive+0x1f20>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 2038630:	e0bff417 	ldw	r2,-48(fp)
 2038634:	10800417 	ldw	r2,16(r2)
 2038638:	10c00303 	ldbu	r3,12(r2)
 203863c:	10800343 	ldbu	r2,13(r2)
 2038640:	1004923a 	slli	r2,r2,8
 2038644:	10c4b03a 	or	r2,r2,r3
 2038648:	10bfffcc 	andi	r2,r2,65535
 203864c:	1004d23a 	srli	r2,r2,8
 2038650:	10ffffcc 	andi	r3,r2,65535
 2038654:	e0bff417 	ldw	r2,-48(fp)
 2038658:	10800417 	ldw	r2,16(r2)
 203865c:	11000303 	ldbu	r4,12(r2)
 2038660:	10800343 	ldbu	r2,13(r2)
 2038664:	1004923a 	slli	r2,r2,8
 2038668:	1104b03a 	or	r2,r2,r4
 203866c:	10bfffcc 	andi	r2,r2,65535
 2038670:	1004923a 	slli	r2,r2,8
 2038674:	10bfffcc 	andi	r2,r2,65535
 2038678:	1884b03a 	or	r2,r3,r2
 203867c:	1080004c 	andi	r2,r2,1
 2038680:	1000d41e 	bne	r2,zero,20389d4 <tcp_receive+0x1f60>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 2038684:	010085b4 	movhi	r4,534
 2038688:	21083604 	addi	r4,r4,8408
 203868c:	201d37c0 	call	201d37c <tcp_seg_copy>
 2038690:	1007883a 	mov	r3,r2
 2038694:	e0bff417 	ldw	r2,-48(fp)
 2038698:	10c00015 	stw	r3,0(r2)
                if (next->next != NULL) {
 203869c:	e0bff417 	ldw	r2,-48(fp)
 20386a0:	10800017 	ldw	r2,0(r2)
 20386a4:	1000cd26 	beq	r2,zero,20389dc <tcp_receive+0x1f68>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 20386a8:	e0bff417 	ldw	r2,-48(fp)
 20386ac:	10800417 	ldw	r2,16(r2)
 20386b0:	10c00103 	ldbu	r3,4(r2)
 20386b4:	11000143 	ldbu	r4,5(r2)
 20386b8:	2008923a 	slli	r4,r4,8
 20386bc:	20c6b03a 	or	r3,r4,r3
 20386c0:	11000183 	ldbu	r4,6(r2)
 20386c4:	2008943a 	slli	r4,r4,16
 20386c8:	20c6b03a 	or	r3,r4,r3
 20386cc:	108001c3 	ldbu	r2,7(r2)
 20386d0:	1004963a 	slli	r2,r2,24
 20386d4:	10c4b03a 	or	r2,r2,r3
 20386d8:	1007883a 	mov	r3,r2
 20386dc:	e0bff417 	ldw	r2,-48(fp)
 20386e0:	1080020b 	ldhu	r2,8(r2)
 20386e4:	10bfffcc 	andi	r2,r2,65535
 20386e8:	1887883a 	add	r3,r3,r2
 20386ec:	d0a81b17 	ldw	r2,-24468(gp)
 20386f0:	1885c83a 	sub	r2,r3,r2
 20386f4:	00801a0e 	bge	zero,r2,2038760 <tcp_receive+0x1cec>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 20386f8:	d0a81b17 	ldw	r2,-24468(gp)
 20386fc:	100b883a 	mov	r5,r2
 2038700:	e0bff417 	ldw	r2,-48(fp)
 2038704:	10800417 	ldw	r2,16(r2)
 2038708:	10c00103 	ldbu	r3,4(r2)
 203870c:	11000143 	ldbu	r4,5(r2)
 2038710:	2008923a 	slli	r4,r4,8
 2038714:	20c6b03a 	or	r3,r4,r3
 2038718:	11000183 	ldbu	r4,6(r2)
 203871c:	2008943a 	slli	r4,r4,16
 2038720:	20c6b03a 	or	r3,r4,r3
 2038724:	108001c3 	ldbu	r2,7(r2)
 2038728:	1004963a 	slli	r2,r2,24
 203872c:	10c4b03a 	or	r2,r2,r3
 2038730:	2885c83a 	sub	r2,r5,r2
 2038734:	1007883a 	mov	r3,r2
 2038738:	e0bff417 	ldw	r2,-48(fp)
 203873c:	10c0020d 	sth	r3,8(r2)
                    pbuf_realloc(next->p, next->len);
 2038740:	e0bff417 	ldw	r2,-48(fp)
 2038744:	10c00117 	ldw	r3,4(r2)
 2038748:	e0bff417 	ldw	r2,-48(fp)
 203874c:	1080020b 	ldhu	r2,8(r2)
 2038750:	10bfffcc 	andi	r2,r2,65535
 2038754:	100b883a 	mov	r5,r2
 2038758:	1809883a 	mov	r4,r3
 203875c:	201a7100 	call	201a710 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
 2038760:	d0a81d8b 	ldhu	r2,-24458(gp)
 2038764:	10ffffcc 	andi	r3,r2,65535
 2038768:	d0a81b17 	ldw	r2,-24468(gp)
 203876c:	1885883a 	add	r2,r3,r2
 2038770:	e0fffe17 	ldw	r3,-8(fp)
 2038774:	19000b17 	ldw	r4,44(r3)
 2038778:	e0fffe17 	ldw	r3,-8(fp)
 203877c:	18c00c0b 	ldhu	r3,48(r3)
 2038780:	18ffffcc 	andi	r3,r3,65535
 2038784:	20c7883a 	add	r3,r4,r3
 2038788:	1880942e 	bgeu	r3,r2,20389dc <tcp_receive+0x1f68>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 203878c:	e0bff417 	ldw	r2,-48(fp)
 2038790:	10800017 	ldw	r2,0(r2)
 2038794:	10800417 	ldw	r2,16(r2)
 2038798:	10c00303 	ldbu	r3,12(r2)
 203879c:	10800343 	ldbu	r2,13(r2)
 20387a0:	1004923a 	slli	r2,r2,8
 20387a4:	10c4b03a 	or	r2,r2,r3
 20387a8:	10bfffcc 	andi	r2,r2,65535
 20387ac:	1004d23a 	srli	r2,r2,8
 20387b0:	10ffffcc 	andi	r3,r2,65535
 20387b4:	e0bff417 	ldw	r2,-48(fp)
 20387b8:	10800017 	ldw	r2,0(r2)
 20387bc:	10800417 	ldw	r2,16(r2)
 20387c0:	11000303 	ldbu	r4,12(r2)
 20387c4:	10800343 	ldbu	r2,13(r2)
 20387c8:	1004923a 	slli	r2,r2,8
 20387cc:	1104b03a 	or	r2,r2,r4
 20387d0:	10bfffcc 	andi	r2,r2,65535
 20387d4:	1004923a 	slli	r2,r2,8
 20387d8:	10bfffcc 	andi	r2,r2,65535
 20387dc:	1884b03a 	or	r2,r3,r2
 20387e0:	1080004c 	andi	r2,r2,1
 20387e4:	10003726 	beq	r2,zero,20388c4 <tcp_receive+0x1e50>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
 20387e8:	e0bff417 	ldw	r2,-48(fp)
 20387ec:	10800017 	ldw	r2,0(r2)
 20387f0:	10800417 	ldw	r2,16(r2)
 20387f4:	e0fff417 	ldw	r3,-48(fp)
 20387f8:	18c00017 	ldw	r3,0(r3)
 20387fc:	18c00417 	ldw	r3,16(r3)
 2038800:	19000303 	ldbu	r4,12(r3)
 2038804:	18c00343 	ldbu	r3,13(r3)
 2038808:	1806923a 	slli	r3,r3,8
 203880c:	1906b03a 	or	r3,r3,r4
 2038810:	1809883a 	mov	r4,r3
 2038814:	00f03fc4 	movi	r3,-16129
 2038818:	20c6703a 	and	r3,r4,r3
 203881c:	180b883a 	mov	r5,r3
 2038820:	e0fff417 	ldw	r3,-48(fp)
 2038824:	18c00017 	ldw	r3,0(r3)
 2038828:	18c00417 	ldw	r3,16(r3)
 203882c:	19000303 	ldbu	r4,12(r3)
 2038830:	18c00343 	ldbu	r3,13(r3)
 2038834:	1806923a 	slli	r3,r3,8
 2038838:	1906b03a 	or	r3,r3,r4
 203883c:	18ffffcc 	andi	r3,r3,65535
 2038840:	1806d23a 	srli	r3,r3,8
 2038844:	180d883a 	mov	r6,r3
 2038848:	e0fff417 	ldw	r3,-48(fp)
 203884c:	18c00017 	ldw	r3,0(r3)
 2038850:	18c00417 	ldw	r3,16(r3)
 2038854:	19000303 	ldbu	r4,12(r3)
 2038858:	18c00343 	ldbu	r3,13(r3)
 203885c:	1806923a 	slli	r3,r3,8
 2038860:	1906b03a 	or	r3,r3,r4
 2038864:	18ffffcc 	andi	r3,r3,65535
 2038868:	1806923a 	slli	r3,r3,8
 203886c:	30c6b03a 	or	r3,r6,r3
 2038870:	18c00f8c 	andi	r3,r3,62
 2038874:	1806923a 	slli	r3,r3,8
 2038878:	28c6b03a 	or	r3,r5,r3
 203887c:	180d883a 	mov	r6,r3
 2038880:	30ffffcc 	andi	r3,r6,65535
 2038884:	19403fcc 	andi	r5,r3,255
 2038888:	10c00303 	ldbu	r3,12(r2)
 203888c:	1806703a 	and	r3,r3,zero
 2038890:	1809883a 	mov	r4,r3
 2038894:	2807883a 	mov	r3,r5
 2038898:	20c6b03a 	or	r3,r4,r3
 203889c:	10c00305 	stb	r3,12(r2)
 20388a0:	30ffffcc 	andi	r3,r6,65535
 20388a4:	1806d23a 	srli	r3,r3,8
 20388a8:	197fffcc 	andi	r5,r3,65535
 20388ac:	10c00343 	ldbu	r3,13(r2)
 20388b0:	1806703a 	and	r3,r3,zero
 20388b4:	1809883a 	mov	r4,r3
 20388b8:	2807883a 	mov	r3,r5
 20388bc:	20c6b03a 	or	r3,r4,r3
 20388c0:	10c00345 	stb	r3,13(r2)
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
 20388c4:	e0bff417 	ldw	r2,-48(fp)
 20388c8:	10800017 	ldw	r2,0(r2)
 20388cc:	e0fffe17 	ldw	r3,-8(fp)
 20388d0:	18c00b17 	ldw	r3,44(r3)
 20388d4:	1809883a 	mov	r4,r3
 20388d8:	e0fffe17 	ldw	r3,-8(fp)
 20388dc:	18c00c0b 	ldhu	r3,48(r3)
 20388e0:	20c7883a 	add	r3,r4,r3
 20388e4:	1809883a 	mov	r4,r3
 20388e8:	d0e81b17 	ldw	r3,-24468(gp)
 20388ec:	20c7c83a 	sub	r3,r4,r3
 20388f0:	10c0020d 	sth	r3,8(r2)
                    pbuf_realloc(next->next->p, next->next->len);
 20388f4:	e0bff417 	ldw	r2,-48(fp)
 20388f8:	10800017 	ldw	r2,0(r2)
 20388fc:	10c00117 	ldw	r3,4(r2)
 2038900:	e0bff417 	ldw	r2,-48(fp)
 2038904:	10800017 	ldw	r2,0(r2)
 2038908:	1080020b 	ldhu	r2,8(r2)
 203890c:	10bfffcc 	andi	r2,r2,65535
 2038910:	100b883a 	mov	r5,r2
 2038914:	1809883a 	mov	r4,r3
 2038918:	201a7100 	call	201a710 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 203891c:	e0bff417 	ldw	r2,-48(fp)
 2038920:	10800017 	ldw	r2,0(r2)
 2038924:	10c0020b 	ldhu	r3,8(r2)
 2038928:	e0bff417 	ldw	r2,-48(fp)
 203892c:	10800017 	ldw	r2,0(r2)
 2038930:	10800417 	ldw	r2,16(r2)
 2038934:	11000303 	ldbu	r4,12(r2)
 2038938:	10800343 	ldbu	r2,13(r2)
 203893c:	1004923a 	slli	r2,r2,8
 2038940:	1104b03a 	or	r2,r2,r4
 2038944:	10bfffcc 	andi	r2,r2,65535
 2038948:	1004d23a 	srli	r2,r2,8
 203894c:	113fffcc 	andi	r4,r2,65535
 2038950:	e0bff417 	ldw	r2,-48(fp)
 2038954:	10800017 	ldw	r2,0(r2)
 2038958:	10800417 	ldw	r2,16(r2)
 203895c:	11400303 	ldbu	r5,12(r2)
 2038960:	10800343 	ldbu	r2,13(r2)
 2038964:	1004923a 	slli	r2,r2,8
 2038968:	1144b03a 	or	r2,r2,r5
 203896c:	10bfffcc 	andi	r2,r2,65535
 2038970:	1004923a 	slli	r2,r2,8
 2038974:	10bfffcc 	andi	r2,r2,65535
 2038978:	2084b03a 	or	r2,r4,r2
 203897c:	108000cc 	andi	r2,r2,3
 2038980:	1004c03a 	cmpne	r2,r2,zero
 2038984:	10803fcc 	andi	r2,r2,255
 2038988:	1885883a 	add	r2,r3,r2
 203898c:	d0a81d8d 	sth	r2,-24458(gp)
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 2038990:	00001206 	br	20389dc <tcp_receive+0x1f68>
              }
            }
            prev = next;
 2038994:	e0bff417 	ldw	r2,-48(fp)
 2038998:	e0bff515 	stw	r2,-44(fp)
             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
          for(next = pcb->ooseq; next != NULL; next = next->next) {
 203899c:	e0bff417 	ldw	r2,-48(fp)
 20389a0:	10800017 	ldw	r2,0(r2)
 20389a4:	e0bff415 	stw	r2,-48(fp)
 20389a8:	e0bff417 	ldw	r2,-48(fp)
 20389ac:	103e6b1e 	bne	r2,zero,203835c <__alt_mem_mem_0+0xfd01835c>
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 20389b0:	00000f06 	br	20389f0 <tcp_receive+0x1f7c>
                break;
              } else {
                /* Either the lenghts are the same or the incoming
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
 20389b4:	0001883a 	nop
 20389b8:	00000d06 	br	20389f0 <tcp_receive+0x1f7c>
                  } else {
                    pcb->ooseq = cseg;
                  }
                  tcp_oos_insert_segment(cseg, next);
                }
                break;
 20389bc:	0001883a 	nop
 20389c0:	00000b06 	br	20389f0 <tcp_receive+0x1f7c>
                  cseg = tcp_seg_copy(&inseg);
                  if (cseg != NULL) {
                    pcb->ooseq = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
 20389c4:	0001883a 	nop
 20389c8:	00000906 	br	20389f0 <tcp_receive+0x1f7c>
                      pbuf_realloc(prev->p, prev->len);
                    }
                    prev->next = cseg;
                    tcp_oos_insert_segment(cseg, next);
                  }
                  break;
 20389cc:	0001883a 	nop
 20389d0:	00000706 	br	20389f0 <tcp_receive+0x1f7c>
                 of the list. */
              if (next->next == NULL &&
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
                  /* segment "next" already contains all data */
                  break;
 20389d4:	0001883a 	nop
 20389d8:	00000506 	br	20389f0 <tcp_receive+0x1f7c>
                    tcplen = TCP_TCPLEN(next->next);
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 20389dc:	0001883a 	nop
    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
 20389e0:	00000306 	br	20389f0 <tcp_receive+0x1f7c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
 20389e4:	e13ffe17 	ldw	r4,-8(fp)
 20389e8:	201f49c0 	call	201f49c <tcp_send_empty_ack>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 20389ec:	00001706 	br	2038a4c <tcp_receive+0x1fd8>
 20389f0:	00001606 	br	2038a4c <tcp_receive+0x1fd8>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
 20389f4:	d0e81b17 	ldw	r3,-24468(gp)
 20389f8:	e0bffe17 	ldw	r2,-8(fp)
 20389fc:	10800b17 	ldw	r2,44(r2)
 2038a00:	1885c83a 	sub	r2,r3,r2
 2038a04:	10000a16 	blt	r2,zero,2038a30 <tcp_receive+0x1fbc>
 2038a08:	d0e81b17 	ldw	r3,-24468(gp)
 2038a0c:	e0bffe17 	ldw	r2,-8(fp)
 2038a10:	11000b17 	ldw	r4,44(r2)
 2038a14:	e0bffe17 	ldw	r2,-8(fp)
 2038a18:	10800c0b 	ldhu	r2,48(r2)
 2038a1c:	10bfffcc 	andi	r2,r2,65535
 2038a20:	2085883a 	add	r2,r4,r2
 2038a24:	1885c83a 	sub	r2,r3,r2
 2038a28:	10800044 	addi	r2,r2,1
 2038a2c:	0080070e 	bge	zero,r2,2038a4c <tcp_receive+0x1fd8>
      tcp_ack_now(pcb);
 2038a30:	e0bffe17 	ldw	r2,-8(fp)
 2038a34:	10800883 	ldbu	r2,34(r2)
 2038a38:	10800094 	ori	r2,r2,2
 2038a3c:	1007883a 	mov	r3,r2
 2038a40:	e0bffe17 	ldw	r2,-8(fp)
 2038a44:	10c00885 	stb	r3,34(r2)
    }
  }
}
 2038a48:	00000006 	br	2038a4c <tcp_receive+0x1fd8>
 2038a4c:	0001883a 	nop
 2038a50:	e6ffff04 	addi	sp,fp,-4
 2038a54:	dfc00217 	ldw	ra,8(sp)
 2038a58:	df000117 	ldw	fp,4(sp)
 2038a5c:	dc000017 	ldw	r16,0(sp)
 2038a60:	dec00304 	addi	sp,sp,12
 2038a64:	f800283a 	ret

02038a68 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 2038a68:	defffa04 	addi	sp,sp,-24
 2038a6c:	df000515 	stw	fp,20(sp)
 2038a70:	df000504 	addi	fp,sp,20
 2038a74:	e13fff15 	stw	r4,-4(fp)
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
 2038a78:	d0a81917 	ldw	r2,-24476(gp)
 2038a7c:	10800504 	addi	r2,r2,20
 2038a80:	e0bffc15 	stw	r2,-16(fp)

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
 2038a84:	d0a81917 	ldw	r2,-24476(gp)
 2038a88:	10c00303 	ldbu	r3,12(r2)
 2038a8c:	10800343 	ldbu	r2,13(r2)
 2038a90:	1004923a 	slli	r2,r2,8
 2038a94:	10c4b03a 	or	r2,r2,r3
 2038a98:	10bfffcc 	andi	r2,r2,65535
 2038a9c:	1004d23a 	srli	r2,r2,8
 2038aa0:	10ffffcc 	andi	r3,r2,65535
 2038aa4:	d0a81917 	ldw	r2,-24476(gp)
 2038aa8:	11000303 	ldbu	r4,12(r2)
 2038aac:	10800343 	ldbu	r2,13(r2)
 2038ab0:	1004923a 	slli	r2,r2,8
 2038ab4:	1104b03a 	or	r2,r2,r4
 2038ab8:	10bfffcc 	andi	r2,r2,65535
 2038abc:	1004923a 	slli	r2,r2,8
 2038ac0:	10bfffcc 	andi	r2,r2,65535
 2038ac4:	1884b03a 	or	r2,r3,r2
 2038ac8:	1005d33a 	srai	r2,r2,12
 2038acc:	10800190 	cmplti	r2,r2,6
 2038ad0:	10006b1e 	bne	r2,zero,2038c80 <tcp_parseopt+0x218>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 2038ad4:	d0a81917 	ldw	r2,-24476(gp)
 2038ad8:	10c00303 	ldbu	r3,12(r2)
 2038adc:	10800343 	ldbu	r2,13(r2)
 2038ae0:	1004923a 	slli	r2,r2,8
 2038ae4:	10c4b03a 	or	r2,r2,r3
 2038ae8:	10bfffcc 	andi	r2,r2,65535
 2038aec:	1004d23a 	srli	r2,r2,8
 2038af0:	10ffffcc 	andi	r3,r2,65535
 2038af4:	d0a81917 	ldw	r2,-24476(gp)
 2038af8:	11000303 	ldbu	r4,12(r2)
 2038afc:	10800343 	ldbu	r2,13(r2)
 2038b00:	1004923a 	slli	r2,r2,8
 2038b04:	1104b03a 	or	r2,r2,r4
 2038b08:	10bfffcc 	andi	r2,r2,65535
 2038b0c:	1004923a 	slli	r2,r2,8
 2038b10:	10bfffcc 	andi	r2,r2,65535
 2038b14:	1884b03a 	or	r2,r3,r2
 2038b18:	1005d33a 	srai	r2,r2,12
 2038b1c:	10bffec4 	addi	r2,r2,-5
 2038b20:	1085883a 	add	r2,r2,r2
 2038b24:	1085883a 	add	r2,r2,r2
 2038b28:	e0bffd0d 	sth	r2,-12(fp)
    for (c = 0; c < max_c; ) {
 2038b2c:	e03ffb0d 	sth	zero,-20(fp)
 2038b30:	00004a06 	br	2038c5c <tcp_parseopt+0x1f4>
      opt = opts[c];
 2038b34:	e0bffb0b 	ldhu	r2,-20(fp)
 2038b38:	e0fffc17 	ldw	r3,-16(fp)
 2038b3c:	1885883a 	add	r2,r3,r2
 2038b40:	10800003 	ldbu	r2,0(r2)
 2038b44:	e0bffd85 	stb	r2,-10(fp)
      switch (opt) {
 2038b48:	e0bffd83 	ldbu	r2,-10(fp)
 2038b4c:	10c00060 	cmpeqi	r3,r2,1
 2038b50:	1800041e 	bne	r3,zero,2038b64 <tcp_parseopt+0xfc>
 2038b54:	10c000a0 	cmpeqi	r3,r2,2
 2038b58:	1800061e 	bne	r3,zero,2038b74 <tcp_parseopt+0x10c>
 2038b5c:	10004326 	beq	r2,zero,2038c6c <tcp_parseopt+0x204>
 2038b60:	00002e06 	br	2038c1c <tcp_parseopt+0x1b4>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
 2038b64:	e0bffb0b 	ldhu	r2,-20(fp)
 2038b68:	10800044 	addi	r2,r2,1
 2038b6c:	e0bffb0d 	sth	r2,-20(fp)
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 2038b70:	00003a06 	br	2038c5c <tcp_parseopt+0x1f4>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
 2038b74:	e0bffb0b 	ldhu	r2,-20(fp)
 2038b78:	10800044 	addi	r2,r2,1
 2038b7c:	e0fffc17 	ldw	r3,-16(fp)
 2038b80:	1885883a 	add	r2,r3,r2
 2038b84:	10800003 	ldbu	r2,0(r2)
 2038b88:	10803fcc 	andi	r2,r2,255
 2038b8c:	10800118 	cmpnei	r2,r2,4
 2038b90:	1000381e 	bne	r2,zero,2038c74 <tcp_parseopt+0x20c>
 2038b94:	e0bffb0b 	ldhu	r2,-20(fp)
 2038b98:	10800104 	addi	r2,r2,4
 2038b9c:	e0fffd0b 	ldhu	r3,-12(fp)
 2038ba0:	18803416 	blt	r3,r2,2038c74 <tcp_parseopt+0x20c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
 2038ba4:	e0bffb0b 	ldhu	r2,-20(fp)
 2038ba8:	10800084 	addi	r2,r2,2
 2038bac:	e0fffc17 	ldw	r3,-16(fp)
 2038bb0:	1885883a 	add	r2,r3,r2
 2038bb4:	10800003 	ldbu	r2,0(r2)
 2038bb8:	10803fcc 	andi	r2,r2,255
 2038bbc:	1004923a 	slli	r2,r2,8
 2038bc0:	1009883a 	mov	r4,r2
 2038bc4:	e0bffb0b 	ldhu	r2,-20(fp)
 2038bc8:	108000c4 	addi	r2,r2,3
 2038bcc:	e0fffc17 	ldw	r3,-16(fp)
 2038bd0:	1885883a 	add	r2,r3,r2
 2038bd4:	10800003 	ldbu	r2,0(r2)
 2038bd8:	10803fcc 	andi	r2,r2,255
 2038bdc:	2084b03a 	or	r2,r4,r2
 2038be0:	e0bffe0d 	sth	r2,-8(fp)
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 2038be4:	e0bffe0b 	ldhu	r2,-8(fp)
 2038be8:	10816d68 	cmpgeui	r2,r2,1461
 2038bec:	1000041e 	bne	r2,zero,2038c00 <tcp_parseopt+0x198>
 2038bf0:	e0bffe0b 	ldhu	r2,-8(fp)
 2038bf4:	10000226 	beq	r2,zero,2038c00 <tcp_parseopt+0x198>
 2038bf8:	e0bffe0b 	ldhu	r2,-8(fp)
 2038bfc:	00000106 	br	2038c04 <tcp_parseopt+0x19c>
 2038c00:	00816d04 	movi	r2,1460
 2038c04:	e0ffff17 	ldw	r3,-4(fp)
 2038c08:	18800e8d 	sth	r2,58(r3)
        /* Advance to next option */
        c += 0x04;
 2038c0c:	e0bffb0b 	ldhu	r2,-20(fp)
 2038c10:	10800104 	addi	r2,r2,4
 2038c14:	e0bffb0d 	sth	r2,-20(fp)
        break;
 2038c18:	00001006 	br	2038c5c <tcp_parseopt+0x1f4>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
 2038c1c:	e0bffb0b 	ldhu	r2,-20(fp)
 2038c20:	10800044 	addi	r2,r2,1
 2038c24:	e0fffc17 	ldw	r3,-16(fp)
 2038c28:	1885883a 	add	r2,r3,r2
 2038c2c:	10800003 	ldbu	r2,0(r2)
 2038c30:	10803fcc 	andi	r2,r2,255
 2038c34:	10001126 	beq	r2,zero,2038c7c <tcp_parseopt+0x214>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
 2038c38:	e0bffb0b 	ldhu	r2,-20(fp)
 2038c3c:	10800044 	addi	r2,r2,1
 2038c40:	e0fffc17 	ldw	r3,-16(fp)
 2038c44:	1885883a 	add	r2,r3,r2
 2038c48:	10800003 	ldbu	r2,0(r2)
 2038c4c:	10c03fcc 	andi	r3,r2,255
 2038c50:	e0bffb0b 	ldhu	r2,-20(fp)
 2038c54:	1885883a 	add	r2,r3,r2
 2038c58:	e0bffb0d 	sth	r2,-20(fp)
  opts = (u8_t *)tcphdr + TCP_HLEN;

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (c = 0; c < max_c; ) {
 2038c5c:	e0fffb0b 	ldhu	r3,-20(fp)
 2038c60:	e0bffd0b 	ldhu	r2,-12(fp)
 2038c64:	18bfb336 	bltu	r3,r2,2038b34 <__alt_mem_mem_0+0xfd018b34>
 2038c68:	00000506 	br	2038c80 <tcp_parseopt+0x218>
      opt = opts[c];
      switch (opt) {
      case 0x00:
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
 2038c6c:	0001883a 	nop
 2038c70:	00000306 	br	2038c80 <tcp_parseopt+0x218>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
 2038c74:	0001883a 	nop
 2038c78:	00000106 	br	2038c80 <tcp_parseopt+0x218>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          /* If the length field is zero, the options are malformed
             and we don't process them further. */
          return;
 2038c7c:	0001883a 	nop
           can skip past them. */
        c += opts[c + 1];
      }
    }
  }
}
 2038c80:	e037883a 	mov	sp,fp
 2038c84:	df000017 	ldw	fp,0(sp)
 2038c88:	dec00104 	addi	sp,sp,4
 2038c8c:	f800283a 	ret

02038c90 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2038c90:	defffa04 	addi	sp,sp,-24
 2038c94:	dfc00515 	stw	ra,20(sp)
 2038c98:	df000415 	stw	fp,16(sp)
 2038c9c:	df000404 	addi	fp,sp,16
 2038ca0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 2038ca4:	008000c4 	movi	r2,3
 2038ca8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 2038cac:	e0fffd17 	ldw	r3,-12(fp)
 2038cb0:	008003f4 	movhi	r2,15
 2038cb4:	10909004 	addi	r2,r2,16960
 2038cb8:	1885383a 	mul	r2,r3,r2
 2038cbc:	100b883a 	mov	r5,r2
 2038cc0:	01017db4 	movhi	r4,1526
 2038cc4:	21384004 	addi	r4,r4,-7936
 2038cc8:	200aadc0 	call	200aadc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2038ccc:	100b883a 	mov	r5,r2
 2038cd0:	01200034 	movhi	r4,32768
 2038cd4:	213fffc4 	addi	r4,r4,-1
 2038cd8:	200aadc0 	call	200aadc <__udivsi3>
 2038cdc:	100b883a 	mov	r5,r2
 2038ce0:	e13fff17 	ldw	r4,-4(fp)
 2038ce4:	200aadc0 	call	200aadc <__udivsi3>
 2038ce8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2038cec:	e0bffe17 	ldw	r2,-8(fp)
 2038cf0:	10002a26 	beq	r2,zero,2038d9c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 2038cf4:	e03ffc15 	stw	zero,-16(fp)
 2038cf8:	00001706 	br	2038d58 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2038cfc:	00a00034 	movhi	r2,32768
 2038d00:	10bfffc4 	addi	r2,r2,-1
 2038d04:	10bfffc4 	addi	r2,r2,-1
 2038d08:	103ffe1e 	bne	r2,zero,2038d04 <__alt_mem_mem_0+0xfd018d04>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 2038d0c:	e0fffd17 	ldw	r3,-12(fp)
 2038d10:	008003f4 	movhi	r2,15
 2038d14:	10909004 	addi	r2,r2,16960
 2038d18:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2038d1c:	100b883a 	mov	r5,r2
 2038d20:	01017db4 	movhi	r4,1526
 2038d24:	21384004 	addi	r4,r4,-7936
 2038d28:	200aadc0 	call	200aadc <__udivsi3>
 2038d2c:	100b883a 	mov	r5,r2
 2038d30:	01200034 	movhi	r4,32768
 2038d34:	213fffc4 	addi	r4,r4,-1
 2038d38:	200aadc0 	call	200aadc <__udivsi3>
 2038d3c:	1007883a 	mov	r3,r2
 2038d40:	e0bfff17 	ldw	r2,-4(fp)
 2038d44:	10c5c83a 	sub	r2,r2,r3
 2038d48:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2038d4c:	e0bffc17 	ldw	r2,-16(fp)
 2038d50:	10800044 	addi	r2,r2,1
 2038d54:	e0bffc15 	stw	r2,-16(fp)
 2038d58:	e0fffc17 	ldw	r3,-16(fp)
 2038d5c:	e0bffe17 	ldw	r2,-8(fp)
 2038d60:	18bfe616 	blt	r3,r2,2038cfc <__alt_mem_mem_0+0xfd018cfc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 2038d64:	e0fffd17 	ldw	r3,-12(fp)
 2038d68:	008003f4 	movhi	r2,15
 2038d6c:	10909004 	addi	r2,r2,16960
 2038d70:	1885383a 	mul	r2,r3,r2
 2038d74:	100b883a 	mov	r5,r2
 2038d78:	01017db4 	movhi	r4,1526
 2038d7c:	21384004 	addi	r4,r4,-7936
 2038d80:	200aadc0 	call	200aadc <__udivsi3>
 2038d84:	1007883a 	mov	r3,r2
 2038d88:	e0bfff17 	ldw	r2,-4(fp)
 2038d8c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2038d90:	10bfffc4 	addi	r2,r2,-1
 2038d94:	103ffe1e 	bne	r2,zero,2038d90 <__alt_mem_mem_0+0xfd018d90>
 2038d98:	00000d06 	br	2038dd0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 2038d9c:	e0fffd17 	ldw	r3,-12(fp)
 2038da0:	008003f4 	movhi	r2,15
 2038da4:	10909004 	addi	r2,r2,16960
 2038da8:	1885383a 	mul	r2,r3,r2
 2038dac:	100b883a 	mov	r5,r2
 2038db0:	01017db4 	movhi	r4,1526
 2038db4:	21384004 	addi	r4,r4,-7936
 2038db8:	200aadc0 	call	200aadc <__udivsi3>
 2038dbc:	1007883a 	mov	r3,r2
 2038dc0:	e0bfff17 	ldw	r2,-4(fp)
 2038dc4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2038dc8:	10bfffc4 	addi	r2,r2,-1
 2038dcc:	00bffe16 	blt	zero,r2,2038dc8 <__alt_mem_mem_0+0xfd018dc8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 2038dd0:	0005883a 	mov	r2,zero
}
 2038dd4:	e037883a 	mov	sp,fp
 2038dd8:	dfc00117 	ldw	ra,4(sp)
 2038ddc:	df000017 	ldw	fp,0(sp)
 2038de0:	dec00204 	addi	sp,sp,8
 2038de4:	f800283a 	ret

02038de8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2038de8:	defffb04 	addi	sp,sp,-20
 2038dec:	df000415 	stw	fp,16(sp)
 2038df0:	df000404 	addi	fp,sp,16
 2038df4:	e13ffe15 	stw	r4,-8(fp)
 2038df8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2038dfc:	e0bfff17 	ldw	r2,-4(fp)
 2038e00:	10900070 	cmpltui	r2,r2,16385
 2038e04:	1000021e 	bne	r2,zero,2038e10 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2038e08:	00900004 	movi	r2,16384
 2038e0c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 2038e10:	e0fffe17 	ldw	r3,-8(fp)
 2038e14:	e0bfff17 	ldw	r2,-4(fp)
 2038e18:	1885883a 	add	r2,r3,r2
 2038e1c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2038e20:	e0bffe17 	ldw	r2,-8(fp)
 2038e24:	e0bffc15 	stw	r2,-16(fp)
 2038e28:	00000506 	br	2038e40 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 2038e2c:	e0bffc17 	ldw	r2,-16(fp)
 2038e30:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2038e34:	e0bffc17 	ldw	r2,-16(fp)
 2038e38:	10800804 	addi	r2,r2,32
 2038e3c:	e0bffc15 	stw	r2,-16(fp)
 2038e40:	e0fffc17 	ldw	r3,-16(fp)
 2038e44:	e0bffd17 	ldw	r2,-12(fp)
 2038e48:	18bff836 	bltu	r3,r2,2038e2c <__alt_mem_mem_0+0xfd018e2c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 2038e4c:	e0bffe17 	ldw	r2,-8(fp)
 2038e50:	108007cc 	andi	r2,r2,31
 2038e54:	10000226 	beq	r2,zero,2038e60 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 2038e58:	e0bffc17 	ldw	r2,-16(fp)
 2038e5c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 2038e60:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 2038e64:	0001883a 	nop
 2038e68:	e037883a 	mov	sp,fp
 2038e6c:	df000017 	ldw	fp,0(sp)
 2038e70:	dec00104 	addi	sp,sp,4
 2038e74:	f800283a 	ret

02038e78 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 2038e78:	defff404 	addi	sp,sp,-48
 2038e7c:	dfc00b15 	stw	ra,44(sp)
 2038e80:	df000a15 	stw	fp,40(sp)
 2038e84:	df000a04 	addi	fp,sp,40
 2038e88:	e13ffd15 	stw	r4,-12(fp)
 2038e8c:	2805883a 	mov	r2,r5
 2038e90:	e1bfff15 	stw	r6,-4(fp)
 2038e94:	e0bffe05 	stb	r2,-8(fp)
  struct netconn *conn;
  struct api_msg msg;

  conn = netconn_alloc(t, callback);
 2038e98:	e17fff17 	ldw	r5,-4(fp)
 2038e9c:	e13ffd17 	ldw	r4,-12(fp)
 2038ea0:	203ab040 	call	203ab04 <netconn_alloc>
 2038ea4:	e0bff615 	stw	r2,-40(fp)
  if (conn != NULL) {
 2038ea8:	e0bff617 	ldw	r2,-40(fp)
 2038eac:	10001b26 	beq	r2,zero,2038f1c <netconn_new_with_proto_and_callback+0xa4>
    msg.function = do_newconn;
 2038eb0:	00808134 	movhi	r2,516
 2038eb4:	10aaa904 	addi	r2,r2,-21852
 2038eb8:	e0bff715 	stw	r2,-36(fp)
    msg.msg.msg.n.proto = proto;
 2038ebc:	e0bffe03 	ldbu	r2,-8(fp)
 2038ec0:	e0bffa05 	stb	r2,-24(fp)
    msg.msg.conn = conn;
 2038ec4:	e0bff617 	ldw	r2,-40(fp)
 2038ec8:	e0bff815 	stw	r2,-32(fp)
    if (TCPIP_APIMSG(&msg) != ERR_OK) {
 2038ecc:	e0bff704 	addi	r2,fp,-36
 2038ed0:	1009883a 	mov	r4,r2
 2038ed4:	202b89c0 	call	202b89c <tcpip_apimsg>
 2038ed8:	10803fcc 	andi	r2,r2,255
 2038edc:	1080201c 	xori	r2,r2,128
 2038ee0:	10bfe004 	addi	r2,r2,-128
 2038ee4:	10000d26 	beq	r2,zero,2038f1c <netconn_new_with_proto_and_callback+0xa4>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */
      sys_sem_free(&conn->op_completed);
 2038ee8:	e0bff617 	ldw	r2,-40(fp)
 2038eec:	10800404 	addi	r2,r2,16
 2038ef0:	1009883a 	mov	r4,r2
 2038ef4:	2014d980 	call	2014d98 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 2038ef8:	e0bff617 	ldw	r2,-40(fp)
 2038efc:	10800504 	addi	r2,r2,20
 2038f00:	1009883a 	mov	r4,r2
 2038f04:	20151900 	call	2015190 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 2038f08:	e17ff617 	ldw	r5,-40(fp)
 2038f0c:	01000204 	movi	r4,8
 2038f10:	20344ac0 	call	20344ac <memp_free>
      return NULL;
 2038f14:	0005883a 	mov	r2,zero
 2038f18:	00000106 	br	2038f20 <netconn_new_with_proto_and_callback+0xa8>
    }
  }
  return conn;
 2038f1c:	e0bff617 	ldw	r2,-40(fp)
}
 2038f20:	e037883a 	mov	sp,fp
 2038f24:	dfc00117 	ldw	ra,4(sp)
 2038f28:	df000017 	ldw	fp,0(sp)
 2038f2c:	dec00204 	addi	sp,sp,8
 2038f30:	f800283a 	ret

02038f34 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 2038f34:	defff704 	addi	sp,sp,-36
 2038f38:	dfc00815 	stw	ra,32(sp)
 2038f3c:	df000715 	stw	fp,28(sp)
 2038f40:	df000704 	addi	fp,sp,28
 2038f44:	e13fff15 	stw	r4,-4(fp)
  struct api_msg msg;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 2038f48:	e0bfff17 	ldw	r2,-4(fp)
 2038f4c:	1000021e 	bne	r2,zero,2038f58 <netconn_delete+0x24>
    return ERR_OK;
 2038f50:	0005883a 	mov	r2,zero
 2038f54:	00000a06 	br	2038f80 <netconn_delete+0x4c>
  }

  msg.function = do_delconn;
 2038f58:	00808134 	movhi	r2,516
 2038f5c:	10ac2304 	addi	r2,r2,-20340
 2038f60:	e0bff915 	stw	r2,-28(fp)
  msg.msg.conn = conn;
 2038f64:	e0bfff17 	ldw	r2,-4(fp)
 2038f68:	e0bffa15 	stw	r2,-24(fp)
  tcpip_apimsg(&msg);
 2038f6c:	e13ff904 	addi	r4,fp,-28
 2038f70:	202b89c0 	call	202b89c <tcpip_apimsg>

  netconn_free(conn);
 2038f74:	e13fff17 	ldw	r4,-4(fp)
 2038f78:	203ac300 	call	203ac30 <netconn_free>

  /* don't care for return value of do_delconn since it only calls void functions */

  return ERR_OK;
 2038f7c:	0005883a 	mov	r2,zero
}
 2038f80:	e037883a 	mov	sp,fp
 2038f84:	dfc00117 	ldw	ra,4(sp)
 2038f88:	df000017 	ldw	fp,0(sp)
 2038f8c:	dec00204 	addi	sp,sp,8
 2038f90:	f800283a 	ret

02038f94 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 2038f94:	defff304 	addi	sp,sp,-52
 2038f98:	dfc00c15 	stw	ra,48(sp)
 2038f9c:	df000b15 	stw	fp,44(sp)
 2038fa0:	df000b04 	addi	fp,sp,44
 2038fa4:	e13ffc15 	stw	r4,-16(fp)
 2038fa8:	e17ffd15 	stw	r5,-12(fp)
 2038fac:	e1bffe15 	stw	r6,-8(fp)
 2038fb0:	3805883a 	mov	r2,r7
 2038fb4:	e0bfff05 	stb	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 2038fb8:	e0bffc17 	ldw	r2,-16(fp)
 2038fbc:	1000091e 	bne	r2,zero,2038fe4 <netconn_getaddr+0x50>
 2038fc0:	01c08134 	movhi	r7,516
 2038fc4:	39cd5304 	addi	r7,r7,13644
 2038fc8:	01802304 	movi	r6,140
 2038fcc:	01408134 	movhi	r5,516
 2038fd0:	294d5904 	addi	r5,r5,13668
 2038fd4:	01008134 	movhi	r4,516
 2038fd8:	210d6104 	addi	r4,r4,13700
 2038fdc:	20009e40 	call	20009e4 <printf>
 2038fe0:	003fff06 	br	2038fe0 <__alt_mem_mem_0+0xfd018fe0>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 2038fe4:	e0bffd17 	ldw	r2,-12(fp)
 2038fe8:	1000091e 	bne	r2,zero,2039010 <netconn_getaddr+0x7c>
 2038fec:	01c08134 	movhi	r7,516
 2038ff0:	39cd5304 	addi	r7,r7,13644
 2038ff4:	01802344 	movi	r6,141
 2038ff8:	01408134 	movhi	r5,516
 2038ffc:	294d6d04 	addi	r5,r5,13748
 2039000:	01008134 	movhi	r4,516
 2039004:	210d6104 	addi	r4,r4,13700
 2039008:	20009e40 	call	20009e4 <printf>
 203900c:	003fff06 	br	203900c <__alt_mem_mem_0+0xfd01900c>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 2039010:	e0bffe17 	ldw	r2,-8(fp)
 2039014:	1000091e 	bne	r2,zero,203903c <netconn_getaddr+0xa8>
 2039018:	01c08134 	movhi	r7,516
 203901c:	39cd5304 	addi	r7,r7,13644
 2039020:	01802384 	movi	r6,142
 2039024:	01408134 	movhi	r5,516
 2039028:	294d7504 	addi	r5,r5,13780
 203902c:	01008134 	movhi	r4,516
 2039030:	210d6104 	addi	r4,r4,13700
 2039034:	20009e40 	call	20009e4 <printf>
 2039038:	003fff06 	br	2039038 <__alt_mem_mem_0+0xfd019038>

  msg.function = do_getaddr;
 203903c:	00808134 	movhi	r2,516
 2039040:	10b05504 	addi	r2,r2,-16044
 2039044:	e0bff615 	stw	r2,-40(fp)
  msg.msg.conn = conn;
 2039048:	e0bffc17 	ldw	r2,-16(fp)
 203904c:	e0bff715 	stw	r2,-36(fp)
  msg.msg.msg.ad.ipaddr = addr;
 2039050:	e0bffd17 	ldw	r2,-12(fp)
 2039054:	e0bff915 	stw	r2,-28(fp)
  msg.msg.msg.ad.port = port;
 2039058:	e0bffe17 	ldw	r2,-8(fp)
 203905c:	e0bffa15 	stw	r2,-24(fp)
  msg.msg.msg.ad.local = local;
 2039060:	e0bfff03 	ldbu	r2,-4(fp)
 2039064:	e0bffb05 	stb	r2,-20(fp)
  err = TCPIP_APIMSG(&msg);
 2039068:	e0bff604 	addi	r2,fp,-40
 203906c:	1009883a 	mov	r4,r2
 2039070:	202b89c0 	call	202b89c <tcpip_apimsg>
 2039074:	e0bff505 	stb	r2,-44(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 2039078:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 203907c:	10000126 	beq	r2,zero,2039084 <netconn_getaddr+0xf0>
 2039080:	2010de80 	call	2010de8 <vTaskEnterCritical>
 2039084:	e0bffc17 	ldw	r2,-16(fp)
 2039088:	10800303 	ldbu	r2,12(r2)
 203908c:	10803fcc 	andi	r2,r2,255
 2039090:	1080201c 	xori	r2,r2,128
 2039094:	10bfe004 	addi	r2,r2,-128
 2039098:	10bffdd0 	cmplti	r2,r2,-9
 203909c:	1000031e 	bne	r2,zero,20390ac <netconn_getaddr+0x118>
 20390a0:	e0bffc17 	ldw	r2,-16(fp)
 20390a4:	e0fff503 	ldbu	r3,-44(fp)
 20390a8:	10c00305 	stb	r3,12(r2)
 20390ac:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20390b0:	10000126 	beq	r2,zero,20390b8 <netconn_getaddr+0x124>
 20390b4:	2010e300 	call	2010e30 <vTaskExitCritical>
  return err;
 20390b8:	e0bff503 	ldbu	r2,-44(fp)
}
 20390bc:	e037883a 	mov	sp,fp
 20390c0:	dfc00117 	ldw	ra,4(sp)
 20390c4:	df000017 	ldw	fp,0(sp)
 20390c8:	dec00204 	addi	sp,sp,8
 20390cc:	f800283a 	ret

020390d0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, ip_addr_t *addr, u16_t port)
{
 20390d0:	defff404 	addi	sp,sp,-48
 20390d4:	dfc00b15 	stw	ra,44(sp)
 20390d8:	df000a15 	stw	fp,40(sp)
 20390dc:	df000a04 	addi	fp,sp,40
 20390e0:	e13ffd15 	stw	r4,-12(fp)
 20390e4:	e17ffe15 	stw	r5,-8(fp)
 20390e8:	3005883a 	mov	r2,r6
 20390ec:	e0bfff0d 	sth	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 20390f0:	e0bffd17 	ldw	r2,-12(fp)
 20390f4:	1000091e 	bne	r2,zero,203911c <netconn_bind+0x4c>
 20390f8:	01c08134 	movhi	r7,516
 20390fc:	39cd5304 	addi	r7,r7,13644
 2039100:	01802ac4 	movi	r6,171
 2039104:	01408134 	movhi	r5,516
 2039108:	294d7d04 	addi	r5,r5,13812
 203910c:	01008134 	movhi	r4,516
 2039110:	210d6104 	addi	r4,r4,13700
 2039114:	20009e40 	call	20009e4 <printf>
 2039118:	003fff06 	br	2039118 <__alt_mem_mem_0+0xfd019118>

  msg.function = do_bind;
 203911c:	00808134 	movhi	r2,516
 2039120:	10ac9804 	addi	r2,r2,-19872
 2039124:	e0bff715 	stw	r2,-36(fp)
  msg.msg.conn = conn;
 2039128:	e0bffd17 	ldw	r2,-12(fp)
 203912c:	e0bff815 	stw	r2,-32(fp)
  msg.msg.msg.bc.ipaddr = addr;
 2039130:	e0bffe17 	ldw	r2,-8(fp)
 2039134:	e0bffa15 	stw	r2,-24(fp)
  msg.msg.msg.bc.port = port;
 2039138:	e0bfff0b 	ldhu	r2,-4(fp)
 203913c:	e0bffb0d 	sth	r2,-20(fp)
  err = TCPIP_APIMSG(&msg);
 2039140:	e0bff704 	addi	r2,fp,-36
 2039144:	1009883a 	mov	r4,r2
 2039148:	202b89c0 	call	202b89c <tcpip_apimsg>
 203914c:	e0bff605 	stb	r2,-40(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 2039150:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039154:	10000126 	beq	r2,zero,203915c <netconn_bind+0x8c>
 2039158:	2010de80 	call	2010de8 <vTaskEnterCritical>
 203915c:	e0bffd17 	ldw	r2,-12(fp)
 2039160:	10800303 	ldbu	r2,12(r2)
 2039164:	10803fcc 	andi	r2,r2,255
 2039168:	1080201c 	xori	r2,r2,128
 203916c:	10bfe004 	addi	r2,r2,-128
 2039170:	10bffdd0 	cmplti	r2,r2,-9
 2039174:	1000031e 	bne	r2,zero,2039184 <netconn_bind+0xb4>
 2039178:	e0bffd17 	ldw	r2,-12(fp)
 203917c:	e0fff603 	ldbu	r3,-40(fp)
 2039180:	10c00305 	stb	r3,12(r2)
 2039184:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039188:	10000126 	beq	r2,zero,2039190 <netconn_bind+0xc0>
 203918c:	2010e300 	call	2010e30 <vTaskExitCritical>
  return err;
 2039190:	e0bff603 	ldbu	r2,-40(fp)
}
 2039194:	e037883a 	mov	sp,fp
 2039198:	dfc00117 	ldw	ra,4(sp)
 203919c:	df000017 	ldw	fp,0(sp)
 20391a0:	dec00204 	addi	sp,sp,8
 20391a4:	f800283a 	ret

020391a8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, ip_addr_t *addr, u16_t port)
{
 20391a8:	defff404 	addi	sp,sp,-48
 20391ac:	dfc00b15 	stw	ra,44(sp)
 20391b0:	df000a15 	stw	fp,40(sp)
 20391b4:	df000a04 	addi	fp,sp,40
 20391b8:	e13ffd15 	stw	r4,-12(fp)
 20391bc:	e17ffe15 	stw	r5,-8(fp)
 20391c0:	3005883a 	mov	r2,r6
 20391c4:	e0bfff0d 	sth	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 20391c8:	e0bffd17 	ldw	r2,-12(fp)
 20391cc:	1000091e 	bne	r2,zero,20391f4 <netconn_connect+0x4c>
 20391d0:	01c08134 	movhi	r7,516
 20391d4:	39cd5304 	addi	r7,r7,13644
 20391d8:	01803144 	movi	r6,197
 20391dc:	01408134 	movhi	r5,516
 20391e0:	294d8404 	addi	r5,r5,13840
 20391e4:	01008134 	movhi	r4,516
 20391e8:	210d6104 	addi	r4,r4,13700
 20391ec:	20009e40 	call	20009e4 <printf>
 20391f0:	003fff06 	br	20391f0 <__alt_mem_mem_0+0xfd0191f0>

  msg.function = do_connect;
 20391f4:	00808134 	movhi	r2,516
 20391f8:	10ad4904 	addi	r2,r2,-19164
 20391fc:	e0bff715 	stw	r2,-36(fp)
  msg.msg.conn = conn;
 2039200:	e0bffd17 	ldw	r2,-12(fp)
 2039204:	e0bff815 	stw	r2,-32(fp)
  msg.msg.msg.bc.ipaddr = addr;
 2039208:	e0bffe17 	ldw	r2,-8(fp)
 203920c:	e0bffa15 	stw	r2,-24(fp)
  msg.msg.msg.bc.port = port;
 2039210:	e0bfff0b 	ldhu	r2,-4(fp)
 2039214:	e0bffb0d 	sth	r2,-20(fp)
  /* This is the only function which need to not block tcpip_thread */
  err = tcpip_apimsg(&msg);
 2039218:	e0bff704 	addi	r2,fp,-36
 203921c:	1009883a 	mov	r4,r2
 2039220:	202b89c0 	call	202b89c <tcpip_apimsg>
 2039224:	e0bff605 	stb	r2,-40(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 2039228:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 203922c:	10000126 	beq	r2,zero,2039234 <netconn_connect+0x8c>
 2039230:	2010de80 	call	2010de8 <vTaskEnterCritical>
 2039234:	e0bffd17 	ldw	r2,-12(fp)
 2039238:	10800303 	ldbu	r2,12(r2)
 203923c:	10803fcc 	andi	r2,r2,255
 2039240:	1080201c 	xori	r2,r2,128
 2039244:	10bfe004 	addi	r2,r2,-128
 2039248:	10bffdd0 	cmplti	r2,r2,-9
 203924c:	1000031e 	bne	r2,zero,203925c <netconn_connect+0xb4>
 2039250:	e0bffd17 	ldw	r2,-12(fp)
 2039254:	e0fff603 	ldbu	r3,-40(fp)
 2039258:	10c00305 	stb	r3,12(r2)
 203925c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039260:	10000126 	beq	r2,zero,2039268 <netconn_connect+0xc0>
 2039264:	2010e300 	call	2010e30 <vTaskExitCritical>
  return err;
 2039268:	e0bff603 	ldbu	r2,-40(fp)
}
 203926c:	e037883a 	mov	sp,fp
 2039270:	dfc00117 	ldw	ra,4(sp)
 2039274:	df000017 	ldw	fp,0(sp)
 2039278:	dec00204 	addi	sp,sp,8
 203927c:	f800283a 	ret

02039280 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return TODO: return value is not set here...
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 2039280:	defff604 	addi	sp,sp,-40
 2039284:	dfc00915 	stw	ra,36(sp)
 2039288:	df000815 	stw	fp,32(sp)
 203928c:	df000804 	addi	fp,sp,32
 2039290:	e13fff15 	stw	r4,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 2039294:	e0bfff17 	ldw	r2,-4(fp)
 2039298:	1000091e 	bne	r2,zero,20392c0 <netconn_disconnect+0x40>
 203929c:	01c08134 	movhi	r7,516
 20392a0:	39cd5304 	addi	r7,r7,13644
 20392a4:	01803784 	movi	r6,222
 20392a8:	01408134 	movhi	r5,516
 20392ac:	294d8c04 	addi	r5,r5,13872
 20392b0:	01008134 	movhi	r4,516
 20392b4:	210d6104 	addi	r4,r4,13700
 20392b8:	20009e40 	call	20009e4 <printf>
 20392bc:	003fff06 	br	20392bc <__alt_mem_mem_0+0xfd0192bc>

  msg.function = do_disconnect;
 20392c0:	00808134 	movhi	r2,516
 20392c4:	10addc04 	addi	r2,r2,-18576
 20392c8:	e0bff915 	stw	r2,-28(fp)
  msg.msg.conn = conn;
 20392cc:	e0bfff17 	ldw	r2,-4(fp)
 20392d0:	e0bffa15 	stw	r2,-24(fp)
  err = TCPIP_APIMSG(&msg);
 20392d4:	e0bff904 	addi	r2,fp,-28
 20392d8:	1009883a 	mov	r4,r2
 20392dc:	202b89c0 	call	202b89c <tcpip_apimsg>
 20392e0:	e0bff805 	stb	r2,-32(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 20392e4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20392e8:	10000126 	beq	r2,zero,20392f0 <netconn_disconnect+0x70>
 20392ec:	2010de80 	call	2010de8 <vTaskEnterCritical>
 20392f0:	e0bfff17 	ldw	r2,-4(fp)
 20392f4:	10800303 	ldbu	r2,12(r2)
 20392f8:	10803fcc 	andi	r2,r2,255
 20392fc:	1080201c 	xori	r2,r2,128
 2039300:	10bfe004 	addi	r2,r2,-128
 2039304:	10bffdd0 	cmplti	r2,r2,-9
 2039308:	1000031e 	bne	r2,zero,2039318 <netconn_disconnect+0x98>
 203930c:	e0bfff17 	ldw	r2,-4(fp)
 2039310:	e0fff803 	ldbu	r3,-32(fp)
 2039314:	10c00305 	stb	r3,12(r2)
 2039318:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 203931c:	10000126 	beq	r2,zero,2039324 <netconn_disconnect+0xa4>
 2039320:	2010e300 	call	2010e30 <vTaskExitCritical>
  return err;
 2039324:	e0bff803 	ldbu	r2,-32(fp)
}
 2039328:	e037883a 	mov	sp,fp
 203932c:	dfc00117 	ldw	ra,4(sp)
 2039330:	df000017 	ldw	fp,0(sp)
 2039334:	dec00204 	addi	sp,sp,8
 2039338:	f800283a 	ret

0203933c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 203933c:	defff504 	addi	sp,sp,-44
 2039340:	dfc00a15 	stw	ra,40(sp)
 2039344:	df000915 	stw	fp,36(sp)
 2039348:	df000904 	addi	fp,sp,36
 203934c:	e13ffe15 	stw	r4,-8(fp)
 2039350:	2805883a 	mov	r2,r5
 2039354:	e0bfff05 	stb	r2,-4(fp)
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 2039358:	e0bffe17 	ldw	r2,-8(fp)
 203935c:	1000091e 	bne	r2,zero,2039384 <netconn_listen_with_backlog+0x48>
 2039360:	01c08134 	movhi	r7,516
 2039364:	39cd5304 	addi	r7,r7,13644
 2039368:	01803e84 	movi	r6,250
 203936c:	01408134 	movhi	r5,516
 2039370:	294d9504 	addi	r5,r5,13908
 2039374:	01008134 	movhi	r4,516
 2039378:	210d6104 	addi	r4,r4,13700
 203937c:	20009e40 	call	20009e4 <printf>
 2039380:	003fff06 	br	2039380 <__alt_mem_mem_0+0xfd019380>

  msg.function = do_listen;
 2039384:	00808134 	movhi	r2,516
 2039388:	10adfd04 	addi	r2,r2,-18444
 203938c:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 2039390:	e0bffe17 	ldw	r2,-8(fp)
 2039394:	e0bff915 	stw	r2,-28(fp)
#if TCP_LISTEN_BACKLOG
  msg.msg.msg.lb.backlog = backlog;
 2039398:	e0bfff03 	ldbu	r2,-4(fp)
 203939c:	e0bffb05 	stb	r2,-20(fp)
#endif /* TCP_LISTEN_BACKLOG */
  err = TCPIP_APIMSG(&msg);
 20393a0:	e0bff804 	addi	r2,fp,-32
 20393a4:	1009883a 	mov	r4,r2
 20393a8:	202b89c0 	call	202b89c <tcpip_apimsg>
 20393ac:	e0bff705 	stb	r2,-36(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 20393b0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20393b4:	10000126 	beq	r2,zero,20393bc <netconn_listen_with_backlog+0x80>
 20393b8:	2010de80 	call	2010de8 <vTaskEnterCritical>
 20393bc:	e0bffe17 	ldw	r2,-8(fp)
 20393c0:	10800303 	ldbu	r2,12(r2)
 20393c4:	10803fcc 	andi	r2,r2,255
 20393c8:	1080201c 	xori	r2,r2,128
 20393cc:	10bfe004 	addi	r2,r2,-128
 20393d0:	10bffdd0 	cmplti	r2,r2,-9
 20393d4:	1000031e 	bne	r2,zero,20393e4 <netconn_listen_with_backlog+0xa8>
 20393d8:	e0bffe17 	ldw	r2,-8(fp)
 20393dc:	e0fff703 	ldbu	r3,-36(fp)
 20393e0:	10c00305 	stb	r3,12(r2)
 20393e4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20393e8:	10000126 	beq	r2,zero,20393f0 <netconn_listen_with_backlog+0xb4>
 20393ec:	2010e300 	call	2010e30 <vTaskExitCritical>
  return err;
 20393f0:	e0bff703 	ldbu	r2,-36(fp)
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 20393f4:	e037883a 	mov	sp,fp
 20393f8:	dfc00117 	ldw	ra,4(sp)
 20393fc:	df000017 	ldw	fp,0(sp)
 2039400:	dec00204 	addi	sp,sp,8
 2039404:	f800283a 	ret

02039408 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 2039408:	defff404 	addi	sp,sp,-48
 203940c:	dfc00b15 	stw	ra,44(sp)
 2039410:	df000a15 	stw	fp,40(sp)
 2039414:	df000a04 	addi	fp,sp,40
 2039418:	e13ffe15 	stw	r4,-8(fp)
 203941c:	e17fff15 	stw	r5,-4(fp)
  err_t err;
#if TCP_LISTEN_BACKLOG
  struct api_msg msg;
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 2039420:	e0bfff17 	ldw	r2,-4(fp)
 2039424:	1000091e 	bne	r2,zero,203944c <netconn_accept+0x44>
 2039428:	01c08134 	movhi	r7,516
 203942c:	39cd5304 	addi	r7,r7,13644
 2039430:	01804784 	movi	r6,286
 2039434:	01408134 	movhi	r5,516
 2039438:	294d9d04 	addi	r5,r5,13940
 203943c:	01008134 	movhi	r4,516
 2039440:	210d6104 	addi	r4,r4,13700
 2039444:	20009e40 	call	20009e4 <printf>
 2039448:	003fff06 	br	2039448 <__alt_mem_mem_0+0xfd019448>
  *new_conn = NULL;
 203944c:	e0bfff17 	ldw	r2,-4(fp)
 2039450:	10000015 	stw	zero,0(r2)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 2039454:	e0bffe17 	ldw	r2,-8(fp)
 2039458:	1000091e 	bne	r2,zero,2039480 <netconn_accept+0x78>
 203945c:	01c08134 	movhi	r7,516
 2039460:	39cd5304 	addi	r7,r7,13644
 2039464:	01804804 	movi	r6,288
 2039468:	01408134 	movhi	r5,516
 203946c:	294da504 	addi	r5,r5,13972
 2039470:	01008134 	movhi	r4,516
 2039474:	210d6104 	addi	r4,r4,13700
 2039478:	20009e40 	call	20009e4 <printf>
 203947c:	003fff06 	br	203947c <__alt_mem_mem_0+0xfd01947c>
  LWIP_ERROR("netconn_accept: invalid acceptmbox", sys_mbox_valid(&conn->acceptmbox),   return ERR_ARG;);
 2039480:	e0bffe17 	ldw	r2,-8(fp)
 2039484:	10800617 	ldw	r2,24(r2)
 2039488:	1000091e 	bne	r2,zero,20394b0 <netconn_accept+0xa8>
 203948c:	01c08134 	movhi	r7,516
 2039490:	39cd5304 	addi	r7,r7,13644
 2039494:	01804844 	movi	r6,289
 2039498:	01408134 	movhi	r5,516
 203949c:	294dad04 	addi	r5,r5,14004
 20394a0:	01008134 	movhi	r4,516
 20394a4:	210d6104 	addi	r4,r4,13700
 20394a8:	20009e40 	call	20009e4 <printf>
 20394ac:	003fff06 	br	20394ac <__alt_mem_mem_0+0xfd0194ac>

  err = conn->last_err;
 20394b0:	e0bffe17 	ldw	r2,-8(fp)
 20394b4:	10800303 	ldbu	r2,12(r2)
 20394b8:	e0bff605 	stb	r2,-40(fp)
  if (ERR_IS_FATAL(err)) {
 20394bc:	e0bff607 	ldb	r2,-40(fp)
 20394c0:	10bffdc8 	cmpgei	r2,r2,-9
 20394c4:	1000021e 	bne	r2,zero,20394d0 <netconn_accept+0xc8>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return err;
 20394c8:	e0bff603 	ldbu	r2,-40(fp)
 20394cc:	00004706 	br	20395ec <netconn_accept+0x1e4>
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 20394d0:	e0bffe17 	ldw	r2,-8(fp)
 20394d4:	10c00604 	addi	r3,r2,24
 20394d8:	e0bffe17 	ldw	r2,-8(fp)
 20394dc:	10800817 	ldw	r2,32(r2)
 20394e0:	1009883a 	mov	r4,r2
 20394e4:	e0bff704 	addi	r2,fp,-36
 20394e8:	200d883a 	mov	r6,r4
 20394ec:	100b883a 	mov	r5,r2
 20394f0:	1809883a 	mov	r4,r3
 20394f4:	20152b00 	call	20152b0 <sys_arch_mbox_fetch>
 20394f8:	10bfffd8 	cmpnei	r2,r2,-1
 20394fc:	1000121e 	bne	r2,zero,2039548 <netconn_accept+0x140>
    NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
 2039500:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039504:	10000126 	beq	r2,zero,203950c <netconn_accept+0x104>
 2039508:	2010de80 	call	2010de8 <vTaskEnterCritical>
 203950c:	e0bffe17 	ldw	r2,-8(fp)
 2039510:	10800303 	ldbu	r2,12(r2)
 2039514:	10803fcc 	andi	r2,r2,255
 2039518:	1080201c 	xori	r2,r2,128
 203951c:	10bfe004 	addi	r2,r2,-128
 2039520:	10bffdd0 	cmplti	r2,r2,-9
 2039524:	1000031e 	bne	r2,zero,2039534 <netconn_accept+0x12c>
 2039528:	e0bffe17 	ldw	r2,-8(fp)
 203952c:	00ffff44 	movi	r3,-3
 2039530:	10c00305 	stb	r3,12(r2)
 2039534:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039538:	10000126 	beq	r2,zero,2039540 <netconn_accept+0x138>
 203953c:	2010e300 	call	2010e30 <vTaskExitCritical>
    return ERR_TIMEOUT;
 2039540:	00bfff44 	movi	r2,-3
 2039544:	00002906 	br	20395ec <netconn_accept+0x1e4>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 2039548:	e0bffe17 	ldw	r2,-8(fp)
 203954c:	10800c17 	ldw	r2,48(r2)
 2039550:	10000626 	beq	r2,zero,203956c <netconn_accept+0x164>
 2039554:	e0bffe17 	ldw	r2,-8(fp)
 2039558:	10800c17 	ldw	r2,48(r2)
 203955c:	000d883a 	mov	r6,zero
 2039560:	01400044 	movi	r5,1
 2039564:	e13ffe17 	ldw	r4,-8(fp)
 2039568:	103ee83a 	callr	r2

  if (newconn == NULL) {
 203956c:	e0bff717 	ldw	r2,-36(fp)
 2039570:	1000121e 	bne	r2,zero,20395bc <netconn_accept+0x1b4>
    /* connection has been aborted */
    NETCONN_SET_SAFE_ERR(conn, ERR_ABRT);
 2039574:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039578:	10000126 	beq	r2,zero,2039580 <netconn_accept+0x178>
 203957c:	2010de80 	call	2010de8 <vTaskEnterCritical>
 2039580:	e0bffe17 	ldw	r2,-8(fp)
 2039584:	10800303 	ldbu	r2,12(r2)
 2039588:	10803fcc 	andi	r2,r2,255
 203958c:	1080201c 	xori	r2,r2,128
 2039590:	10bfe004 	addi	r2,r2,-128
 2039594:	10bffdd0 	cmplti	r2,r2,-9
 2039598:	1000031e 	bne	r2,zero,20395a8 <netconn_accept+0x1a0>
 203959c:	e0bffe17 	ldw	r2,-8(fp)
 20395a0:	00fffd84 	movi	r3,-10
 20395a4:	10c00305 	stb	r3,12(r2)
 20395a8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20395ac:	10000126 	beq	r2,zero,20395b4 <netconn_accept+0x1ac>
 20395b0:	2010e300 	call	2010e30 <vTaskExitCritical>
    return ERR_ABRT;
 20395b4:	00bffd84 	movi	r2,-10
 20395b8:	00000c06 	br	20395ec <netconn_accept+0x1e4>
  }
#if TCP_LISTEN_BACKLOG
  /* Let the stack know that we have accepted the connection. */
  msg.function = do_recv;
 20395bc:	00808134 	movhi	r2,516
 20395c0:	10af0e04 	addi	r2,r2,-17352
 20395c4:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 20395c8:	e0bffe17 	ldw	r2,-8(fp)
 20395cc:	e0bff915 	stw	r2,-28(fp)
  /* don't care for the return value of do_recv */
  TCPIP_APIMSG(&msg);
 20395d0:	e0bff804 	addi	r2,fp,-32
 20395d4:	1009883a 	mov	r4,r2
 20395d8:	202b89c0 	call	202b89c <tcpip_apimsg>
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 20395dc:	e0fff717 	ldw	r3,-36(fp)
 20395e0:	e0bfff17 	ldw	r2,-4(fp)
 20395e4:	10c00015 	stw	r3,0(r2)
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 20395e8:	0005883a 	mov	r2,zero
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 20395ec:	e037883a 	mov	sp,fp
 20395f0:	dfc00117 	ldw	ra,4(sp)
 20395f4:	df000017 	ldw	fp,0(sp)
 20395f8:	dec00204 	addi	sp,sp,8
 20395fc:	f800283a 	ret

02039600 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 2039600:	defff404 	addi	sp,sp,-48
 2039604:	dfc00b15 	stw	ra,44(sp)
 2039608:	df000a15 	stw	fp,40(sp)
 203960c:	df000a04 	addi	fp,sp,40
 2039610:	e13ffe15 	stw	r4,-8(fp)
 2039614:	e17fff15 	stw	r5,-4(fp)
  void *buf = NULL;
 2039618:	e03ff715 	stw	zero,-36(fp)
  err_t err;
#if LWIP_TCP
  struct api_msg msg;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 203961c:	e0bfff17 	ldw	r2,-4(fp)
 2039620:	1000091e 	bne	r2,zero,2039648 <netconn_recv_data+0x48>
 2039624:	01c08134 	movhi	r7,516
 2039628:	39cd5304 	addi	r7,r7,13644
 203962c:	018057c4 	movi	r6,351
 2039630:	01408134 	movhi	r5,516
 2039634:	294db604 	addi	r5,r5,14040
 2039638:	01008134 	movhi	r4,516
 203963c:	210d6104 	addi	r4,r4,13700
 2039640:	20009e40 	call	20009e4 <printf>
 2039644:	003fff06 	br	2039644 <__alt_mem_mem_0+0xfd019644>
  *new_buf = NULL;
 2039648:	e0bfff17 	ldw	r2,-4(fp)
 203964c:	10000015 	stw	zero,0(r2)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 2039650:	e0bffe17 	ldw	r2,-8(fp)
 2039654:	1000091e 	bne	r2,zero,203967c <netconn_recv_data+0x7c>
 2039658:	01c08134 	movhi	r7,516
 203965c:	39cd5304 	addi	r7,r7,13644
 2039660:	01805844 	movi	r6,353
 2039664:	01408134 	movhi	r5,516
 2039668:	294dbe04 	addi	r5,r5,14072
 203966c:	01008134 	movhi	r4,516
 2039670:	210d6104 	addi	r4,r4,13700
 2039674:	20009e40 	call	20009e4 <printf>
 2039678:	003fff06 	br	2039678 <__alt_mem_mem_0+0xfd019678>
  LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 203967c:	e0bffe17 	ldw	r2,-8(fp)
 2039680:	10800517 	ldw	r2,20(r2)
 2039684:	1000091e 	bne	r2,zero,20396ac <netconn_recv_data+0xac>
 2039688:	01c08134 	movhi	r7,516
 203968c:	39cd5304 	addi	r7,r7,13644
 2039690:	01805884 	movi	r6,354
 2039694:	01408134 	movhi	r5,516
 2039698:	294dc504 	addi	r5,r5,14100
 203969c:	01008134 	movhi	r4,516
 20396a0:	210d6104 	addi	r4,r4,13700
 20396a4:	20009e40 	call	20009e4 <printf>
 20396a8:	003fff06 	br	20396a8 <__alt_mem_mem_0+0xfd0196a8>

  err = conn->last_err;
 20396ac:	e0bffe17 	ldw	r2,-8(fp)
 20396b0:	10800303 	ldbu	r2,12(r2)
 20396b4:	e0bff685 	stb	r2,-38(fp)
  if (ERR_IS_FATAL(err)) {
 20396b8:	e0bff687 	ldb	r2,-38(fp)
 20396bc:	10bffdc8 	cmpgei	r2,r2,-9
 20396c0:	1000021e 	bne	r2,zero,20396cc <netconn_recv_data+0xcc>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return err;
 20396c4:	e0bff683 	ldbu	r2,-38(fp)
 20396c8:	00006d06 	br	2039880 <netconn_recv_data+0x280>
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 20396cc:	e0bffe17 	ldw	r2,-8(fp)
 20396d0:	10c00504 	addi	r3,r2,20
 20396d4:	e0bffe17 	ldw	r2,-8(fp)
 20396d8:	10800817 	ldw	r2,32(r2)
 20396dc:	1009883a 	mov	r4,r2
 20396e0:	e0bff704 	addi	r2,fp,-36
 20396e4:	200d883a 	mov	r6,r4
 20396e8:	100b883a 	mov	r5,r2
 20396ec:	1809883a 	mov	r4,r3
 20396f0:	20152b00 	call	20152b0 <sys_arch_mbox_fetch>
 20396f4:	10bfffd8 	cmpnei	r2,r2,-1
 20396f8:	1000121e 	bne	r2,zero,2039744 <netconn_recv_data+0x144>
    NETCONN_SET_SAFE_ERR(conn, ERR_TIMEOUT);
 20396fc:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039700:	10000126 	beq	r2,zero,2039708 <netconn_recv_data+0x108>
 2039704:	2010de80 	call	2010de8 <vTaskEnterCritical>
 2039708:	e0bffe17 	ldw	r2,-8(fp)
 203970c:	10800303 	ldbu	r2,12(r2)
 2039710:	10803fcc 	andi	r2,r2,255
 2039714:	1080201c 	xori	r2,r2,128
 2039718:	10bfe004 	addi	r2,r2,-128
 203971c:	10bffdd0 	cmplti	r2,r2,-9
 2039720:	1000031e 	bne	r2,zero,2039730 <netconn_recv_data+0x130>
 2039724:	e0bffe17 	ldw	r2,-8(fp)
 2039728:	00ffff44 	movi	r3,-3
 203972c:	10c00305 	stb	r3,12(r2)
 2039730:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039734:	10000126 	beq	r2,zero,203973c <netconn_recv_data+0x13c>
 2039738:	2010e300 	call	2010e30 <vTaskExitCritical>
    return ERR_TIMEOUT;
 203973c:	00bfff44 	movi	r2,-3
 2039740:	00004f06 	br	2039880 <netconn_recv_data+0x280>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (conn->type == NETCONN_TCP)
 2039744:	e0bffe17 	ldw	r2,-8(fp)
 2039748:	10800017 	ldw	r2,0(r2)
 203974c:	10800418 	cmpnei	r2,r2,16
 2039750:	1000391e 	bne	r2,zero,2039838 <netconn_recv_data+0x238>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!netconn_get_noautorecved(conn) || (buf == NULL)) {
 2039754:	e0bffe17 	ldw	r2,-8(fp)
 2039758:	10800903 	ldbu	r2,36(r2)
 203975c:	10803fcc 	andi	r2,r2,255
 2039760:	1080020c 	andi	r2,r2,8
 2039764:	10000226 	beq	r2,zero,2039770 <netconn_recv_data+0x170>
 2039768:	e0bff717 	ldw	r2,-36(fp)
 203976c:	1000111e 	bne	r2,zero,20397b4 <netconn_recv_data+0x1b4>
      /* Let the stack know that we have taken the data. */
      /* TODO: Speedup: Don't block and wait for the answer here
         (to prevent multiple thread-switches). */
      msg.function = do_recv;
 2039770:	00808134 	movhi	r2,516
 2039774:	10af0e04 	addi	r2,r2,-17352
 2039778:	e0bff815 	stw	r2,-32(fp)
      msg.msg.conn = conn;
 203977c:	e0bffe17 	ldw	r2,-8(fp)
 2039780:	e0bff915 	stw	r2,-28(fp)
      if (buf != NULL) {
 2039784:	e0bff717 	ldw	r2,-36(fp)
 2039788:	10000526 	beq	r2,zero,20397a0 <netconn_recv_data+0x1a0>
        msg.msg.msg.r.len = ((struct pbuf *)buf)->tot_len;
 203978c:	e0bff717 	ldw	r2,-36(fp)
 2039790:	1080020b 	ldhu	r2,8(r2)
 2039794:	10bfffcc 	andi	r2,r2,65535
 2039798:	e0bffb15 	stw	r2,-20(fp)
 203979c:	00000206 	br	20397a8 <netconn_recv_data+0x1a8>
      } else {
        msg.msg.msg.r.len = 1;
 20397a0:	00800044 	movi	r2,1
 20397a4:	e0bffb15 	stw	r2,-20(fp)
      }
      /* don't care for the return value of do_recv */
      TCPIP_APIMSG(&msg);
 20397a8:	e0bff804 	addi	r2,fp,-32
 20397ac:	1009883a 	mov	r4,r2
 20397b0:	202b89c0 	call	202b89c <tcpip_apimsg>
    }

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 20397b4:	e0bff717 	ldw	r2,-36(fp)
 20397b8:	10001b1e 	bne	r2,zero,2039828 <netconn_recv_data+0x228>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 20397bc:	e0bffe17 	ldw	r2,-8(fp)
 20397c0:	10800c17 	ldw	r2,48(r2)
 20397c4:	10000626 	beq	r2,zero,20397e0 <netconn_recv_data+0x1e0>
 20397c8:	e0bffe17 	ldw	r2,-8(fp)
 20397cc:	10800c17 	ldw	r2,48(r2)
 20397d0:	000d883a 	mov	r6,zero
 20397d4:	01400044 	movi	r5,1
 20397d8:	e13ffe17 	ldw	r4,-8(fp)
 20397dc:	103ee83a 	callr	r2
      /* Avoid to lose any previous error code */
      NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 20397e0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20397e4:	10000126 	beq	r2,zero,20397ec <netconn_recv_data+0x1ec>
 20397e8:	2010de80 	call	2010de8 <vTaskEnterCritical>
 20397ec:	e0bffe17 	ldw	r2,-8(fp)
 20397f0:	10800303 	ldbu	r2,12(r2)
 20397f4:	10803fcc 	andi	r2,r2,255
 20397f8:	1080201c 	xori	r2,r2,128
 20397fc:	10bfe004 	addi	r2,r2,-128
 2039800:	10bffdd0 	cmplti	r2,r2,-9
 2039804:	1000031e 	bne	r2,zero,2039814 <netconn_recv_data+0x214>
 2039808:	e0bffe17 	ldw	r2,-8(fp)
 203980c:	00fffd04 	movi	r3,-12
 2039810:	10c00305 	stb	r3,12(r2)
 2039814:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039818:	10000126 	beq	r2,zero,2039820 <netconn_recv_data+0x220>
 203981c:	2010e300 	call	2010e30 <vTaskExitCritical>
      return ERR_CLSD;
 2039820:	00bffd04 	movi	r2,-12
 2039824:	00001606 	br	2039880 <netconn_recv_data+0x280>
    }
    len = ((struct pbuf *)buf)->tot_len;
 2039828:	e0bff717 	ldw	r2,-36(fp)
 203982c:	1080020b 	ldhu	r2,8(r2)
 2039830:	e0bff60d 	sth	r2,-40(fp)
 2039834:	00000406 	br	2039848 <netconn_recv_data+0x248>
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
    len = netbuf_len((struct netbuf *)buf);
 2039838:	e0bff717 	ldw	r2,-36(fp)
 203983c:	10800017 	ldw	r2,0(r2)
 2039840:	1080020b 	ldhu	r2,8(r2)
 2039844:	e0bff60d 	sth	r2,-40(fp)

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 2039848:	e0bffe17 	ldw	r2,-8(fp)
 203984c:	10800c17 	ldw	r2,48(r2)
 2039850:	10000726 	beq	r2,zero,2039870 <netconn_recv_data+0x270>
 2039854:	e0bffe17 	ldw	r2,-8(fp)
 2039858:	10800c17 	ldw	r2,48(r2)
 203985c:	e0fff60b 	ldhu	r3,-40(fp)
 2039860:	180d883a 	mov	r6,r3
 2039864:	01400044 	movi	r5,1
 2039868:	e13ffe17 	ldw	r4,-8(fp)
 203986c:	103ee83a 	callr	r2

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 2039870:	e0fff717 	ldw	r3,-36(fp)
 2039874:	e0bfff17 	ldw	r2,-4(fp)
 2039878:	10c00015 	stw	r3,0(r2)
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 203987c:	0005883a 	mov	r2,zero
}
 2039880:	e037883a 	mov	sp,fp
 2039884:	dfc00117 	ldw	ra,4(sp)
 2039888:	df000017 	ldw	fp,0(sp)
 203988c:	dec00204 	addi	sp,sp,8
 2039890:	f800283a 	ret

02039894 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
 2039894:	defffc04 	addi	sp,sp,-16
 2039898:	dfc00315 	stw	ra,12(sp)
 203989c:	df000215 	stw	fp,8(sp)
 20398a0:	df000204 	addi	fp,sp,8
 20398a4:	e13ffe15 	stw	r4,-8(fp)
 20398a8:	e17fff15 	stw	r5,-4(fp)
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 20398ac:	e0bffe17 	ldw	r2,-8(fp)
 20398b0:	10000426 	beq	r2,zero,20398c4 <netconn_recv_tcp_pbuf+0x30>
 20398b4:	e0bffe17 	ldw	r2,-8(fp)
 20398b8:	10800017 	ldw	r2,0(r2)
 20398bc:	10800420 	cmpeqi	r2,r2,16
 20398c0:	1000091e 	bne	r2,zero,20398e8 <netconn_recv_tcp_pbuf+0x54>
 20398c4:	01c08134 	movhi	r7,516
 20398c8:	39cd5304 	addi	r7,r7,13644
 20398cc:	01806e04 	movi	r6,440
 20398d0:	01408134 	movhi	r5,516
 20398d4:	294dbe04 	addi	r5,r5,14072
 20398d8:	01008134 	movhi	r4,516
 20398dc:	210d6104 	addi	r4,r4,13700
 20398e0:	20009e40 	call	20009e4 <printf>
 20398e4:	003fff06 	br	20398e4 <__alt_mem_mem_0+0xfd0198e4>
             netconn_type(conn) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
 20398e8:	e17fff17 	ldw	r5,-4(fp)
 20398ec:	e13ffe17 	ldw	r4,-8(fp)
 20398f0:	20396000 	call	2039600 <netconn_recv_data>
}
 20398f4:	e037883a 	mov	sp,fp
 20398f8:	dfc00117 	ldw	ra,4(sp)
 20398fc:	df000017 	ldw	fp,0(sp)
 2039900:	dec00204 	addi	sp,sp,8
 2039904:	f800283a 	ret

02039908 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 2039908:	defff904 	addi	sp,sp,-28
 203990c:	dfc00615 	stw	ra,24(sp)
 2039910:	df000515 	stw	fp,20(sp)
 2039914:	df000504 	addi	fp,sp,20
 2039918:	e13ffe15 	stw	r4,-8(fp)
 203991c:	e17fff15 	stw	r5,-4(fp)
#if LWIP_TCP
  struct netbuf *buf = NULL;
 2039920:	e03ffb15 	stw	zero,-20(fp)
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 2039924:	e0bfff17 	ldw	r2,-4(fp)
 2039928:	1000091e 	bne	r2,zero,2039950 <netconn_recv+0x48>
 203992c:	01c08134 	movhi	r7,516
 2039930:	39cd5304 	addi	r7,r7,13644
 2039934:	01807344 	movi	r6,461
 2039938:	01408134 	movhi	r5,516
 203993c:	294db604 	addi	r5,r5,14040
 2039940:	01008134 	movhi	r4,516
 2039944:	210d6104 	addi	r4,r4,13700
 2039948:	20009e40 	call	20009e4 <printf>
 203994c:	003fff06 	br	203994c <__alt_mem_mem_0+0xfd01994c>
  *new_buf = NULL;
 2039950:	e0bfff17 	ldw	r2,-4(fp)
 2039954:	10000015 	stw	zero,0(r2)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 2039958:	e0bffe17 	ldw	r2,-8(fp)
 203995c:	1000091e 	bne	r2,zero,2039984 <netconn_recv+0x7c>
 2039960:	01c08134 	movhi	r7,516
 2039964:	39cd5304 	addi	r7,r7,13644
 2039968:	018073c4 	movi	r6,463
 203996c:	01408134 	movhi	r5,516
 2039970:	294dbe04 	addi	r5,r5,14072
 2039974:	01008134 	movhi	r4,516
 2039978:	210d6104 	addi	r4,r4,13700
 203997c:	20009e40 	call	20009e4 <printf>
 2039980:	003fff06 	br	2039980 <__alt_mem_mem_0+0xfd019980>
  LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 2039984:	e0bffe17 	ldw	r2,-8(fp)
 2039988:	10800517 	ldw	r2,20(r2)
 203998c:	1000091e 	bne	r2,zero,20399b4 <netconn_recv+0xac>
 2039990:	01c08134 	movhi	r7,516
 2039994:	39cd5304 	addi	r7,r7,13644
 2039998:	01807404 	movi	r6,464
 203999c:	01408134 	movhi	r5,516
 20399a0:	294dc504 	addi	r5,r5,14100
 20399a4:	01008134 	movhi	r4,516
 20399a8:	210d6104 	addi	r4,r4,13700
 20399ac:	20009e40 	call	20009e4 <printf>
 20399b0:	003fff06 	br	20399b0 <__alt_mem_mem_0+0xfd0199b0>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (conn->type == NETCONN_TCP)
 20399b4:	e0bffe17 	ldw	r2,-8(fp)
 20399b8:	10800017 	ldw	r2,0(r2)
 20399bc:	10800418 	cmpnei	r2,r2,16
 20399c0:	1000331e 	bne	r2,zero,2039a90 <netconn_recv+0x188>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 20399c4:	e03ffd15 	stw	zero,-12(fp)
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 20399c8:	010001c4 	movi	r4,7
 20399cc:	20342e00 	call	20342e0 <memp_malloc>
 20399d0:	e0bffb15 	stw	r2,-20(fp)
    if (buf == NULL) {
 20399d4:	e0bffb17 	ldw	r2,-20(fp)
 20399d8:	1000121e 	bne	r2,zero,2039a24 <netconn_recv+0x11c>
      NETCONN_SET_SAFE_ERR(conn, ERR_MEM);
 20399dc:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 20399e0:	10000126 	beq	r2,zero,20399e8 <netconn_recv+0xe0>
 20399e4:	2010de80 	call	2010de8 <vTaskEnterCritical>
 20399e8:	e0bffe17 	ldw	r2,-8(fp)
 20399ec:	10800303 	ldbu	r2,12(r2)
 20399f0:	10803fcc 	andi	r2,r2,255
 20399f4:	1080201c 	xori	r2,r2,128
 20399f8:	10bfe004 	addi	r2,r2,-128
 20399fc:	10bffdd0 	cmplti	r2,r2,-9
 2039a00:	1000031e 	bne	r2,zero,2039a10 <netconn_recv+0x108>
 2039a04:	e0bffe17 	ldw	r2,-8(fp)
 2039a08:	00ffffc4 	movi	r3,-1
 2039a0c:	10c00305 	stb	r3,12(r2)
 2039a10:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039a14:	10000126 	beq	r2,zero,2039a1c <netconn_recv+0x114>
 2039a18:	2010e300 	call	2010e30 <vTaskExitCritical>
      return ERR_MEM;
 2039a1c:	00bfffc4 	movi	r2,-1
 2039a20:	00001e06 	br	2039a9c <netconn_recv+0x194>
    }

    err = netconn_recv_data(conn, (void **)&p);
 2039a24:	e0bffd04 	addi	r2,fp,-12
 2039a28:	100b883a 	mov	r5,r2
 2039a2c:	e13ffe17 	ldw	r4,-8(fp)
 2039a30:	20396000 	call	2039600 <netconn_recv_data>
 2039a34:	e0bffc05 	stb	r2,-16(fp)
    if (err != ERR_OK) {
 2039a38:	e0bffc07 	ldb	r2,-16(fp)
 2039a3c:	10000526 	beq	r2,zero,2039a54 <netconn_recv+0x14c>
      memp_free(MEMP_NETBUF, buf);
 2039a40:	e17ffb17 	ldw	r5,-20(fp)
 2039a44:	010001c4 	movi	r4,7
 2039a48:	20344ac0 	call	20344ac <memp_free>
      return err;
 2039a4c:	e0bffc03 	ldbu	r2,-16(fp)
 2039a50:	00001206 	br	2039a9c <netconn_recv+0x194>
    }
    LWIP_ASSERT("p != NULL", p != NULL);

    buf->p = p;
 2039a54:	e0fffd17 	ldw	r3,-12(fp)
 2039a58:	e0bffb17 	ldw	r2,-20(fp)
 2039a5c:	10c00015 	stw	r3,0(r2)
    buf->ptr = p;
 2039a60:	e0fffd17 	ldw	r3,-12(fp)
 2039a64:	e0bffb17 	ldw	r2,-20(fp)
 2039a68:	10c00115 	stw	r3,4(r2)
    buf->port = 0;
 2039a6c:	e0bffb17 	ldw	r2,-20(fp)
 2039a70:	1000030d 	sth	zero,12(r2)
    ip_addr_set_any(&buf->addr);
 2039a74:	e0bffb17 	ldw	r2,-20(fp)
 2039a78:	10000215 	stw	zero,8(r2)
    *new_buf = buf;
 2039a7c:	e0bfff17 	ldw	r2,-4(fp)
 2039a80:	e0fffb17 	ldw	r3,-20(fp)
 2039a84:	10c00015 	stw	r3,0(r2)
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 2039a88:	0005883a 	mov	r2,zero
 2039a8c:	00000306 	br	2039a9c <netconn_recv+0x194>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 2039a90:	e17fff17 	ldw	r5,-4(fp)
 2039a94:	e13ffe17 	ldw	r4,-8(fp)
 2039a98:	20396000 	call	2039600 <netconn_recv_data>
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 2039a9c:	e037883a 	mov	sp,fp
 2039aa0:	dfc00117 	ldw	ra,4(sp)
 2039aa4:	df000017 	ldw	fp,0(sp)
 2039aa8:	dec00204 	addi	sp,sp,8
 2039aac:	f800283a 	ret

02039ab0 <netconn_recved>:
 * @param conn the netconn for which to update the receive window
 * @param length amount of data processed (ATTENTION: this must be accurate!)
 */
void
netconn_recved(struct netconn *conn, u32_t length)
{
 2039ab0:	defff604 	addi	sp,sp,-40
 2039ab4:	dfc00915 	stw	ra,36(sp)
 2039ab8:	df000815 	stw	fp,32(sp)
 2039abc:	df000804 	addi	fp,sp,32
 2039ac0:	e13ffe15 	stw	r4,-8(fp)
 2039ac4:	e17fff15 	stw	r5,-4(fp)
#if LWIP_TCP
  if ((conn != NULL) && (conn->type == NETCONN_TCP) &&
 2039ac8:	e0bffe17 	ldw	r2,-8(fp)
 2039acc:	10001226 	beq	r2,zero,2039b18 <netconn_recved+0x68>
 2039ad0:	e0bffe17 	ldw	r2,-8(fp)
 2039ad4:	10800017 	ldw	r2,0(r2)
 2039ad8:	10800418 	cmpnei	r2,r2,16
 2039adc:	10000e1e 	bne	r2,zero,2039b18 <netconn_recved+0x68>
      (netconn_get_noautorecved(conn))) {
 2039ae0:	e0bffe17 	ldw	r2,-8(fp)
 2039ae4:	10800903 	ldbu	r2,36(r2)
 2039ae8:	10803fcc 	andi	r2,r2,255
 2039aec:	1080020c 	andi	r2,r2,8
 */
void
netconn_recved(struct netconn *conn, u32_t length)
{
#if LWIP_TCP
  if ((conn != NULL) && (conn->type == NETCONN_TCP) &&
 2039af0:	10000926 	beq	r2,zero,2039b18 <netconn_recved+0x68>
      (netconn_get_noautorecved(conn))) {
    struct api_msg msg;
    /* Let the stack know that we have taken the data. */
    /* TODO: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    msg.function = do_recv;
 2039af4:	00808134 	movhi	r2,516
 2039af8:	10af0e04 	addi	r2,r2,-17352
 2039afc:	e0bff815 	stw	r2,-32(fp)
    msg.msg.conn = conn;
 2039b00:	e0bffe17 	ldw	r2,-8(fp)
 2039b04:	e0bff915 	stw	r2,-28(fp)
    msg.msg.msg.r.len = length;
 2039b08:	e0bfff17 	ldw	r2,-4(fp)
 2039b0c:	e0bffb15 	stw	r2,-20(fp)
    /* don't care for the return value of do_recv */
    TCPIP_APIMSG(&msg);
 2039b10:	e13ff804 	addi	r4,fp,-32
 2039b14:	202b89c0 	call	202b89c <tcpip_apimsg>
  }
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(length);
#endif /* LWIP_TCP */
}
 2039b18:	0001883a 	nop
 2039b1c:	e037883a 	mov	sp,fp
 2039b20:	dfc00117 	ldw	ra,4(sp)
 2039b24:	df000017 	ldw	fp,0(sp)
 2039b28:	dec00204 	addi	sp,sp,8
 2039b2c:	f800283a 	ret

02039b30 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, ip_addr_t *addr, u16_t port)
{
 2039b30:	defffa04 	addi	sp,sp,-24
 2039b34:	dfc00515 	stw	ra,20(sp)
 2039b38:	df000415 	stw	fp,16(sp)
 2039b3c:	df000404 	addi	fp,sp,16
 2039b40:	e13ffc15 	stw	r4,-16(fp)
 2039b44:	e17ffd15 	stw	r5,-12(fp)
 2039b48:	e1bffe15 	stw	r6,-8(fp)
 2039b4c:	3805883a 	mov	r2,r7
 2039b50:	e0bfff0d 	sth	r2,-4(fp)
  if (buf != NULL) {
 2039b54:	e0bffd17 	ldw	r2,-12(fp)
 2039b58:	10000f26 	beq	r2,zero,2039b98 <netconn_sendto+0x68>
    ip_addr_set(&buf->addr, addr);
 2039b5c:	e0bffe17 	ldw	r2,-8(fp)
 2039b60:	10000326 	beq	r2,zero,2039b70 <netconn_sendto+0x40>
 2039b64:	e0bffe17 	ldw	r2,-8(fp)
 2039b68:	10800017 	ldw	r2,0(r2)
 2039b6c:	00000106 	br	2039b74 <netconn_sendto+0x44>
 2039b70:	0005883a 	mov	r2,zero
 2039b74:	e0fffd17 	ldw	r3,-12(fp)
 2039b78:	18800215 	stw	r2,8(r3)
    buf->port = port;
 2039b7c:	e0bffd17 	ldw	r2,-12(fp)
 2039b80:	e0ffff0b 	ldhu	r3,-4(fp)
 2039b84:	10c0030d 	sth	r3,12(r2)
    return netconn_send(conn, buf);
 2039b88:	e17ffd17 	ldw	r5,-12(fp)
 2039b8c:	e13ffc17 	ldw	r4,-16(fp)
 2039b90:	2039bb00 	call	2039bb0 <netconn_send>
 2039b94:	00000106 	br	2039b9c <netconn_sendto+0x6c>
  }
  return ERR_VAL;
 2039b98:	00bffe84 	movi	r2,-6
}
 2039b9c:	e037883a 	mov	sp,fp
 2039ba0:	dfc00117 	ldw	ra,4(sp)
 2039ba4:	df000017 	ldw	fp,0(sp)
 2039ba8:	dec00204 	addi	sp,sp,8
 2039bac:	f800283a 	ret

02039bb0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 2039bb0:	defff504 	addi	sp,sp,-44
 2039bb4:	dfc00a15 	stw	ra,40(sp)
 2039bb8:	df000915 	stw	fp,36(sp)
 2039bbc:	df000904 	addi	fp,sp,36
 2039bc0:	e13ffe15 	stw	r4,-8(fp)
 2039bc4:	e17fff15 	stw	r5,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 2039bc8:	e0bffe17 	ldw	r2,-8(fp)
 2039bcc:	1000091e 	bne	r2,zero,2039bf4 <netconn_send+0x44>
 2039bd0:	01c08134 	movhi	r7,516
 2039bd4:	39cd5304 	addi	r7,r7,13644
 2039bd8:	01808f04 	movi	r6,572
 2039bdc:	01408134 	movhi	r5,516
 2039be0:	294dce04 	addi	r5,r5,14136
 2039be4:	01008134 	movhi	r4,516
 2039be8:	210d6104 	addi	r4,r4,13700
 2039bec:	20009e40 	call	20009e4 <printf>
 2039bf0:	003fff06 	br	2039bf0 <__alt_mem_mem_0+0xfd019bf0>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));
  msg.function = do_send;
 2039bf4:	00808134 	movhi	r2,516
 2039bf8:	10ae7d04 	addi	r2,r2,-17932
 2039bfc:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 2039c00:	e0bffe17 	ldw	r2,-8(fp)
 2039c04:	e0bff915 	stw	r2,-28(fp)
  msg.msg.msg.b = buf;
 2039c08:	e0bfff17 	ldw	r2,-4(fp)
 2039c0c:	e0bffb15 	stw	r2,-20(fp)
  err = TCPIP_APIMSG(&msg);
 2039c10:	e0bff804 	addi	r2,fp,-32
 2039c14:	1009883a 	mov	r4,r2
 2039c18:	202b89c0 	call	202b89c <tcpip_apimsg>
 2039c1c:	e0bff705 	stb	r2,-36(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 2039c20:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039c24:	10000126 	beq	r2,zero,2039c2c <netconn_send+0x7c>
 2039c28:	2010de80 	call	2010de8 <vTaskEnterCritical>
 2039c2c:	e0bffe17 	ldw	r2,-8(fp)
 2039c30:	10800303 	ldbu	r2,12(r2)
 2039c34:	10803fcc 	andi	r2,r2,255
 2039c38:	1080201c 	xori	r2,r2,128
 2039c3c:	10bfe004 	addi	r2,r2,-128
 2039c40:	10bffdd0 	cmplti	r2,r2,-9
 2039c44:	1000031e 	bne	r2,zero,2039c54 <netconn_send+0xa4>
 2039c48:	e0bffe17 	ldw	r2,-8(fp)
 2039c4c:	e0fff703 	ldbu	r3,-36(fp)
 2039c50:	10c00305 	stb	r3,12(r2)
 2039c54:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039c58:	10000126 	beq	r2,zero,2039c60 <netconn_send+0xb0>
 2039c5c:	2010e300 	call	2010e30 <vTaskExitCritical>
  return err;
 2039c60:	e0bff703 	ldbu	r2,-36(fp)
}
 2039c64:	e037883a 	mov	sp,fp
 2039c68:	dfc00117 	ldw	ra,4(sp)
 2039c6c:	df000017 	ldw	fp,0(sp)
 2039c70:	dec00204 	addi	sp,sp,8
 2039c74:	f800283a 	ret

02039c78 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 2039c78:	defff304 	addi	sp,sp,-52
 2039c7c:	dfc00c15 	stw	ra,48(sp)
 2039c80:	df000b15 	stw	fp,44(sp)
 2039c84:	df000b04 	addi	fp,sp,44
 2039c88:	e13ffc15 	stw	r4,-16(fp)
 2039c8c:	e17ffd15 	stw	r5,-12(fp)
 2039c90:	e1bffe15 	stw	r6,-8(fp)
 2039c94:	3805883a 	mov	r2,r7
 2039c98:	e0bfff05 	stb	r2,-4(fp)
  struct api_msg msg;
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 2039c9c:	e0bffc17 	ldw	r2,-16(fp)
 2039ca0:	1000091e 	bne	r2,zero,2039cc8 <netconn_write_partly+0x50>
 2039ca4:	01c08134 	movhi	r7,516
 2039ca8:	39cd5304 	addi	r7,r7,13644
 2039cac:	01809744 	movi	r6,605
 2039cb0:	01408134 	movhi	r5,516
 2039cb4:	294dd504 	addi	r5,r5,14164
 2039cb8:	01008134 	movhi	r4,516
 2039cbc:	210d6104 	addi	r4,r4,13700
 2039cc0:	20009e40 	call	20009e4 <printf>
 2039cc4:	003fff06 	br	2039cc4 <__alt_mem_mem_0+0xfd019cc4>
  LWIP_ERROR("netconn_write: invalid conn->type",  (conn->type == NETCONN_TCP), return ERR_VAL;);
 2039cc8:	e0bffc17 	ldw	r2,-16(fp)
 2039ccc:	10800017 	ldw	r2,0(r2)
 2039cd0:	10800420 	cmpeqi	r2,r2,16
 2039cd4:	1000091e 	bne	r2,zero,2039cfc <netconn_write_partly+0x84>
 2039cd8:	01c08134 	movhi	r7,516
 2039cdc:	39cd5304 	addi	r7,r7,13644
 2039ce0:	01809784 	movi	r6,606
 2039ce4:	01408134 	movhi	r5,516
 2039ce8:	294ddc04 	addi	r5,r5,14192
 2039cec:	01008134 	movhi	r4,516
 2039cf0:	210d6104 	addi	r4,r4,13700
 2039cf4:	20009e40 	call	20009e4 <printf>
 2039cf8:	003fff06 	br	2039cf8 <__alt_mem_mem_0+0xfd019cf8>
  if (size == 0) {
 2039cfc:	e0bffe17 	ldw	r2,-8(fp)
 2039d00:	1000021e 	bne	r2,zero,2039d0c <netconn_write_partly+0x94>
    return ERR_OK;
 2039d04:	0005883a 	mov	r2,zero
 2039d08:	00003f06 	br	2039e08 <netconn_write_partly+0x190>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 2039d0c:	e0bffc17 	ldw	r2,-16(fp)
 2039d10:	10800903 	ldbu	r2,36(r2)
 2039d14:	10803fcc 	andi	r2,r2,255
 2039d18:	1080008c 	andi	r2,r2,2
 2039d1c:	1000031e 	bne	r2,zero,2039d2c <netconn_write_partly+0xb4>
 2039d20:	e0bfff03 	ldbu	r2,-4(fp)
 2039d24:	1080010c 	andi	r2,r2,4
 2039d28:	10000226 	beq	r2,zero,2039d34 <netconn_write_partly+0xbc>
 2039d2c:	00800044 	movi	r2,1
 2039d30:	00000106 	br	2039d38 <netconn_write_partly+0xc0>
 2039d34:	0005883a 	mov	r2,zero
 2039d38:	e0bff505 	stb	r2,-44(fp)
  if (dontblock && !bytes_written) {
 2039d3c:	e0bff503 	ldbu	r2,-44(fp)
 2039d40:	10000426 	beq	r2,zero,2039d54 <netconn_write_partly+0xdc>
 2039d44:	e0800217 	ldw	r2,8(fp)
 2039d48:	1000021e 	bne	r2,zero,2039d54 <netconn_write_partly+0xdc>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 2039d4c:	00bffe84 	movi	r2,-6
 2039d50:	00002d06 	br	2039e08 <netconn_write_partly+0x190>
  }

  /* non-blocking write sends as much  */
  msg.function = do_write;
 2039d54:	00808134 	movhi	r2,516
 2039d58:	10b01004 	addi	r2,r2,-16320
 2039d5c:	e0bff615 	stw	r2,-40(fp)
  msg.msg.conn = conn;
 2039d60:	e0bffc17 	ldw	r2,-16(fp)
 2039d64:	e0bff715 	stw	r2,-36(fp)
  msg.msg.msg.w.dataptr = dataptr;
 2039d68:	e0bffd17 	ldw	r2,-12(fp)
 2039d6c:	e0bff915 	stw	r2,-28(fp)
  msg.msg.msg.w.apiflags = apiflags;
 2039d70:	e0bfff03 	ldbu	r2,-4(fp)
 2039d74:	e0bffb05 	stb	r2,-20(fp)
  msg.msg.msg.w.len = size;
 2039d78:	e0bffe17 	ldw	r2,-8(fp)
 2039d7c:	e0bffa15 	stw	r2,-24(fp)
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = TCPIP_APIMSG(&msg);
 2039d80:	e0bff604 	addi	r2,fp,-40
 2039d84:	1009883a 	mov	r4,r2
 2039d88:	202b89c0 	call	202b89c <tcpip_apimsg>
 2039d8c:	e0bff545 	stb	r2,-43(fp)
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 2039d90:	e0bff547 	ldb	r2,-43(fp)
 2039d94:	10000b1e 	bne	r2,zero,2039dc4 <netconn_write_partly+0x14c>
 2039d98:	e0800217 	ldw	r2,8(fp)
 2039d9c:	10000926 	beq	r2,zero,2039dc4 <netconn_write_partly+0x14c>
    if (dontblock
 2039da0:	e0bff503 	ldbu	r2,-44(fp)
 2039da4:	10000426 	beq	r2,zero,2039db8 <netconn_write_partly+0x140>
#if LWIP_SO_SNDTIMEO
        || (conn->send_timeout != 0)
#endif /* LWIP_SO_SNDTIMEO */
       ) {
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = msg.msg.msg.w.len;
 2039da8:	e0fffa17 	ldw	r3,-24(fp)
 2039dac:	e0800217 	ldw	r2,8(fp)
 2039db0:	10c00015 	stw	r3,0(r2)
 2039db4:	00000306 	br	2039dc4 <netconn_write_partly+0x14c>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 2039db8:	e0800217 	ldw	r2,8(fp)
 2039dbc:	e0fffe17 	ldw	r3,-8(fp)
 2039dc0:	10c00015 	stw	r3,0(r2)
    }
  }

  NETCONN_SET_SAFE_ERR(conn, err);
 2039dc4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039dc8:	10000126 	beq	r2,zero,2039dd0 <netconn_write_partly+0x158>
 2039dcc:	2010de80 	call	2010de8 <vTaskEnterCritical>
 2039dd0:	e0bffc17 	ldw	r2,-16(fp)
 2039dd4:	10800303 	ldbu	r2,12(r2)
 2039dd8:	10803fcc 	andi	r2,r2,255
 2039ddc:	1080201c 	xori	r2,r2,128
 2039de0:	10bfe004 	addi	r2,r2,-128
 2039de4:	10bffdd0 	cmplti	r2,r2,-9
 2039de8:	1000031e 	bne	r2,zero,2039df8 <netconn_write_partly+0x180>
 2039dec:	e0bffc17 	ldw	r2,-16(fp)
 2039df0:	e0fff543 	ldbu	r3,-43(fp)
 2039df4:	10c00305 	stb	r3,12(r2)
 2039df8:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039dfc:	10000126 	beq	r2,zero,2039e04 <netconn_write_partly+0x18c>
 2039e00:	2010e300 	call	2010e30 <vTaskExitCritical>
  return err;
 2039e04:	e0bff543 	ldbu	r2,-43(fp)
}
 2039e08:	e037883a 	mov	sp,fp
 2039e0c:	dfc00117 	ldw	ra,4(sp)
 2039e10:	df000017 	ldw	fp,0(sp)
 2039e14:	dec00204 	addi	sp,sp,8
 2039e18:	f800283a 	ret

02039e1c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 2039e1c:	defff504 	addi	sp,sp,-44
 2039e20:	dfc00a15 	stw	ra,40(sp)
 2039e24:	df000915 	stw	fp,36(sp)
 2039e28:	df000904 	addi	fp,sp,36
 2039e2c:	e13ffe15 	stw	r4,-8(fp)
 2039e30:	2805883a 	mov	r2,r5
 2039e34:	e0bfff05 	stb	r2,-4(fp)
  struct api_msg msg;
  err_t err;

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 2039e38:	e0bffe17 	ldw	r2,-8(fp)
 2039e3c:	1000091e 	bne	r2,zero,2039e64 <netconn_close_shutdown+0x48>
 2039e40:	01c08134 	movhi	r7,516
 2039e44:	39cd5304 	addi	r7,r7,13644
 2039e48:	0180a704 	movi	r6,668
 2039e4c:	01408134 	movhi	r5,516
 2039e50:	294de504 	addi	r5,r5,14228
 2039e54:	01008134 	movhi	r4,516
 2039e58:	210d6104 	addi	r4,r4,13700
 2039e5c:	20009e40 	call	20009e4 <printf>
 2039e60:	003fff06 	br	2039e60 <__alt_mem_mem_0+0xfd019e60>

  msg.function = do_close;
 2039e64:	00808134 	movhi	r2,516
 2039e68:	10b0cb04 	addi	r2,r2,-15572
 2039e6c:	e0bff815 	stw	r2,-32(fp)
  msg.msg.conn = conn;
 2039e70:	e0bffe17 	ldw	r2,-8(fp)
 2039e74:	e0bff915 	stw	r2,-28(fp)
  /* shutting down both ends is the same as closing */
  msg.msg.msg.sd.shut = how;
 2039e78:	e0bfff03 	ldbu	r2,-4(fp)
 2039e7c:	e0bffb05 	stb	r2,-20(fp)
  /* because of the LWIP_TCPIP_CORE_LOCKING implementation of do_close,
     don't use TCPIP_APIMSG here */
  err = tcpip_apimsg(&msg);
 2039e80:	e0bff804 	addi	r2,fp,-32
 2039e84:	1009883a 	mov	r4,r2
 2039e88:	202b89c0 	call	202b89c <tcpip_apimsg>
 2039e8c:	e0bff705 	stb	r2,-36(fp)

  NETCONN_SET_SAFE_ERR(conn, err);
 2039e90:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039e94:	10000126 	beq	r2,zero,2039e9c <netconn_close_shutdown+0x80>
 2039e98:	2010de80 	call	2010de8 <vTaskEnterCritical>
 2039e9c:	e0bffe17 	ldw	r2,-8(fp)
 2039ea0:	10800303 	ldbu	r2,12(r2)
 2039ea4:	10803fcc 	andi	r2,r2,255
 2039ea8:	1080201c 	xori	r2,r2,128
 2039eac:	10bfe004 	addi	r2,r2,-128
 2039eb0:	10bffdd0 	cmplti	r2,r2,-9
 2039eb4:	1000031e 	bne	r2,zero,2039ec4 <netconn_close_shutdown+0xa8>
 2039eb8:	e0bffe17 	ldw	r2,-8(fp)
 2039ebc:	e0fff703 	ldbu	r3,-36(fp)
 2039ec0:	10c00305 	stb	r3,12(r2)
 2039ec4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 2039ec8:	10000126 	beq	r2,zero,2039ed0 <netconn_close_shutdown+0xb4>
 2039ecc:	2010e300 	call	2010e30 <vTaskExitCritical>
  return err;
 2039ed0:	e0bff703 	ldbu	r2,-36(fp)
}
 2039ed4:	e037883a 	mov	sp,fp
 2039ed8:	dfc00117 	ldw	ra,4(sp)
 2039edc:	df000017 	ldw	fp,0(sp)
 2039ee0:	dec00204 	addi	sp,sp,8
 2039ee4:	f800283a 	ret

02039ee8 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 2039ee8:	defffd04 	addi	sp,sp,-12
 2039eec:	dfc00215 	stw	ra,8(sp)
 2039ef0:	df000115 	stw	fp,4(sp)
 2039ef4:	df000104 	addi	fp,sp,4
 2039ef8:	e13fff15 	stw	r4,-4(fp)
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 2039efc:	014000c4 	movi	r5,3
 2039f00:	e13fff17 	ldw	r4,-4(fp)
 2039f04:	2039e1c0 	call	2039e1c <netconn_close_shutdown>
}
 2039f08:	e037883a 	mov	sp,fp
 2039f0c:	dfc00117 	ldw	ra,4(sp)
 2039f10:	df000017 	ldw	fp,0(sp)
 2039f14:	dec00204 	addi	sp,sp,8
 2039f18:	f800283a 	ret

02039f1c <netconn_shutdown>:
 * @param conn the TCP netconn to shut down
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
 2039f1c:	defffb04 	addi	sp,sp,-20
 2039f20:	dfc00415 	stw	ra,16(sp)
 2039f24:	df000315 	stw	fp,12(sp)
 2039f28:	df000304 	addi	fp,sp,12
 2039f2c:	e13ffd15 	stw	r4,-12(fp)
 2039f30:	2807883a 	mov	r3,r5
 2039f34:	3005883a 	mov	r2,r6
 2039f38:	e0fffe05 	stb	r3,-8(fp)
 2039f3c:	e0bfff05 	stb	r2,-4(fp)
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
 2039f40:	e0bffe03 	ldbu	r2,-8(fp)
 2039f44:	1004c03a 	cmpne	r2,r2,zero
 2039f48:	1007883a 	mov	r3,r2
 2039f4c:	e0bfff03 	ldbu	r2,-4(fp)
 2039f50:	10000226 	beq	r2,zero,2039f5c <netconn_shutdown+0x40>
 2039f54:	00800084 	movi	r2,2
 2039f58:	00000106 	br	2039f60 <netconn_shutdown+0x44>
 2039f5c:	0005883a 	mov	r2,zero
 2039f60:	1884b03a 	or	r2,r3,r2
 2039f64:	10803fcc 	andi	r2,r2,255
 2039f68:	100b883a 	mov	r5,r2
 2039f6c:	e13ffd17 	ldw	r4,-12(fp)
 2039f70:	2039e1c0 	call	2039e1c <netconn_close_shutdown>
}
 2039f74:	e037883a 	mov	sp,fp
 2039f78:	dfc00117 	ldw	ra,4(sp)
 2039f7c:	df000017 	ldw	fp,0(sp)
 2039f80:	dec00204 	addi	sp,sp,8
 2039f84:	f800283a 	ret

02039f88 <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    ip_addr_t *addr)
{
 2039f88:	defff604 	addi	sp,sp,-40
 2039f8c:	dfc00915 	stw	ra,36(sp)
 2039f90:	df000815 	stw	fp,32(sp)
 2039f94:	df000804 	addi	fp,sp,32
 2039f98:	e13ffc15 	stw	r4,-16(fp)
 2039f9c:	e17ffd15 	stw	r5,-12(fp)
 2039fa0:	e1bffe15 	stw	r6,-8(fp)
 2039fa4:	e1ffff15 	stw	r7,-4(fp)
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
 2039fa8:	e0bffc17 	ldw	r2,-16(fp)
 2039fac:	e0bff915 	stw	r2,-28(fp)

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
 2039fb0:	e0bff917 	ldw	r2,-28(fp)
 2039fb4:	10004a26 	beq	r2,zero,203a0e0 <recv_raw+0x158>
 2039fb8:	e0bff917 	ldw	r2,-28(fp)
 2039fbc:	10800517 	ldw	r2,20(r2)
 2039fc0:	10004726 	beq	r2,zero,203a0e0 <recv_raw+0x158>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
      return 0;
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 2039fc4:	e0bffe17 	ldw	r2,-8(fp)
 2039fc8:	1080020b 	ldhu	r2,8(r2)
 2039fcc:	10bfffcc 	andi	r2,r2,65535
 2039fd0:	000d883a 	mov	r6,zero
 2039fd4:	100b883a 	mov	r5,r2
 2039fd8:	010000c4 	movi	r4,3
 2039fdc:	201a2640 	call	201a264 <pbuf_alloc>
 2039fe0:	e0bff815 	stw	r2,-32(fp)
    if(q != NULL) {
 2039fe4:	e0bff817 	ldw	r2,-32(fp)
 2039fe8:	10000a26 	beq	r2,zero,203a014 <recv_raw+0x8c>
      if (pbuf_copy(q, p) != ERR_OK) {
 2039fec:	e17ffe17 	ldw	r5,-8(fp)
 2039ff0:	e13ff817 	ldw	r4,-32(fp)
 2039ff4:	201adc80 	call	201adc8 <pbuf_copy>
 2039ff8:	10803fcc 	andi	r2,r2,255
 2039ffc:	1080201c 	xori	r2,r2,128
 203a000:	10bfe004 	addi	r2,r2,-128
 203a004:	10000326 	beq	r2,zero,203a014 <recv_raw+0x8c>
        pbuf_free(q);
 203a008:	e13ff817 	ldw	r4,-32(fp)
 203a00c:	201aa200 	call	201aa20 <pbuf_free>
        q = NULL;
 203a010:	e03ff815 	stw	zero,-32(fp)
      }
    }

    if (q != NULL) {
 203a014:	e0bff817 	ldw	r2,-32(fp)
 203a018:	10003126 	beq	r2,zero,203a0e0 <recv_raw+0x158>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 203a01c:	010001c4 	movi	r4,7
 203a020:	20342e00 	call	20342e0 <memp_malloc>
 203a024:	e0bffa15 	stw	r2,-24(fp)
      if (buf == NULL) {
 203a028:	e0bffa17 	ldw	r2,-24(fp)
 203a02c:	1000041e 	bne	r2,zero,203a040 <recv_raw+0xb8>
        pbuf_free(q);
 203a030:	e13ff817 	ldw	r4,-32(fp)
 203a034:	201aa200 	call	201aa20 <pbuf_free>
        return 0;
 203a038:	0005883a 	mov	r2,zero
 203a03c:	00002906 	br	203a0e4 <recv_raw+0x15c>
      }

      buf->p = q;
 203a040:	e0bffa17 	ldw	r2,-24(fp)
 203a044:	e0fff817 	ldw	r3,-32(fp)
 203a048:	10c00015 	stw	r3,0(r2)
      buf->ptr = q;
 203a04c:	e0bffa17 	ldw	r2,-24(fp)
 203a050:	e0fff817 	ldw	r3,-32(fp)
 203a054:	10c00115 	stw	r3,4(r2)
      ip_addr_copy(buf->addr, *ip_current_src_addr());
 203a058:	d0e81217 	ldw	r3,-24504(gp)
 203a05c:	e0bffa17 	ldw	r2,-24(fp)
 203a060:	10c00215 	stw	r3,8(r2)
      buf->port = pcb->protocol;
 203a064:	e0bffd17 	ldw	r2,-12(fp)
 203a068:	10800403 	ldbu	r2,16(r2)
 203a06c:	10c03fcc 	andi	r3,r2,255
 203a070:	e0bffa17 	ldw	r2,-24(fp)
 203a074:	10c0030d 	sth	r3,12(r2)

      len = q->tot_len;
 203a078:	e0bff817 	ldw	r2,-32(fp)
 203a07c:	1080020b 	ldhu	r2,8(r2)
 203a080:	e0bffb0d 	sth	r2,-20(fp)
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 203a084:	e0bff917 	ldw	r2,-28(fp)
 203a088:	10800504 	addi	r2,r2,20
 203a08c:	e17ffa17 	ldw	r5,-24(fp)
 203a090:	1009883a 	mov	r4,r2
 203a094:	20152500 	call	2015250 <sys_mbox_trypost>
 203a098:	10803fcc 	andi	r2,r2,255
 203a09c:	1080201c 	xori	r2,r2,128
 203a0a0:	10bfe004 	addi	r2,r2,-128
 203a0a4:	10000426 	beq	r2,zero,203a0b8 <recv_raw+0x130>
        netbuf_delete(buf);
 203a0a8:	e13ffa17 	ldw	r4,-24(fp)
 203a0ac:	203c4d00 	call	203c4d0 <netbuf_delete>
        return 0;
 203a0b0:	0005883a 	mov	r2,zero
 203a0b4:	00000b06 	br	203a0e4 <recv_raw+0x15c>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 203a0b8:	e0bff917 	ldw	r2,-28(fp)
 203a0bc:	10800c17 	ldw	r2,48(r2)
 203a0c0:	10000726 	beq	r2,zero,203a0e0 <recv_raw+0x158>
 203a0c4:	e0bff917 	ldw	r2,-28(fp)
 203a0c8:	10800c17 	ldw	r2,48(r2)
 203a0cc:	e0fffb0b 	ldhu	r3,-20(fp)
 203a0d0:	180d883a 	mov	r6,r3
 203a0d4:	000b883a 	mov	r5,zero
 203a0d8:	e13ff917 	ldw	r4,-28(fp)
 203a0dc:	103ee83a 	callr	r2
      }
    }
  }

  return 0; /* do not eat the packet */
 203a0e0:	0005883a 	mov	r2,zero
}
 203a0e4:	e037883a 	mov	sp,fp
 203a0e8:	dfc00117 	ldw	ra,4(sp)
 203a0ec:	df000017 	ldw	fp,0(sp)
 203a0f0:	dec00204 	addi	sp,sp,8
 203a0f4:	f800283a 	ret

0203a0f8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   ip_addr_t *addr, u16_t port)
{
 203a0f8:	defff604 	addi	sp,sp,-40
 203a0fc:	dfc00915 	stw	ra,36(sp)
 203a100:	df000815 	stw	fp,32(sp)
 203a104:	df000804 	addi	fp,sp,32
 203a108:	e13ffb15 	stw	r4,-20(fp)
 203a10c:	e17ffc15 	stw	r5,-16(fp)
 203a110:	e1bffd15 	stw	r6,-12(fp)
 203a114:	e1fffe15 	stw	r7,-8(fp)
 203a118:	e0800217 	ldw	r2,8(fp)
 203a11c:	e0bfff0d 	sth	r2,-4(fp)
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  conn = (struct netconn *)arg;
 203a120:	e0bffb17 	ldw	r2,-20(fp)
 203a124:	e0bff815 	stw	r2,-32(fp)
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
 203a128:	e0bff817 	ldw	r2,-32(fp)
 203a12c:	10000326 	beq	r2,zero,203a13c <recv_udp+0x44>
 203a130:	e0bff817 	ldw	r2,-32(fp)
 203a134:	10800517 	ldw	r2,20(r2)
 203a138:	1000031e 	bne	r2,zero,203a148 <recv_udp+0x50>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 203a13c:	e13ffd17 	ldw	r4,-12(fp)
 203a140:	201aa200 	call	201aa20 <pbuf_free>
    return;
 203a144:	00003206 	br	203a210 <recv_udp+0x118>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 203a148:	010001c4 	movi	r4,7
 203a14c:	20342e00 	call	20342e0 <memp_malloc>
 203a150:	e0bff915 	stw	r2,-28(fp)
  if (buf == NULL) {
 203a154:	e0bff917 	ldw	r2,-28(fp)
 203a158:	1000031e 	bne	r2,zero,203a168 <recv_udp+0x70>
    pbuf_free(p);
 203a15c:	e13ffd17 	ldw	r4,-12(fp)
 203a160:	201aa200 	call	201aa20 <pbuf_free>
    return;
 203a164:	00002a06 	br	203a210 <recv_udp+0x118>
  } else {
    buf->p = p;
 203a168:	e0bff917 	ldw	r2,-28(fp)
 203a16c:	e0fffd17 	ldw	r3,-12(fp)
 203a170:	10c00015 	stw	r3,0(r2)
    buf->ptr = p;
 203a174:	e0bff917 	ldw	r2,-28(fp)
 203a178:	e0fffd17 	ldw	r3,-12(fp)
 203a17c:	10c00115 	stw	r3,4(r2)
    ip_addr_set(&buf->addr, addr);
 203a180:	e0bffe17 	ldw	r2,-8(fp)
 203a184:	10000326 	beq	r2,zero,203a194 <recv_udp+0x9c>
 203a188:	e0bffe17 	ldw	r2,-8(fp)
 203a18c:	10800017 	ldw	r2,0(r2)
 203a190:	00000106 	br	203a198 <recv_udp+0xa0>
 203a194:	0005883a 	mov	r2,zero
 203a198:	e0fff917 	ldw	r3,-28(fp)
 203a19c:	18800215 	stw	r2,8(r3)
    buf->port = port;
 203a1a0:	e0bff917 	ldw	r2,-28(fp)
 203a1a4:	e0ffff0b 	ldhu	r3,-4(fp)
 203a1a8:	10c0030d 	sth	r3,12(r2)
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 203a1ac:	e0bffd17 	ldw	r2,-12(fp)
 203a1b0:	1080020b 	ldhu	r2,8(r2)
 203a1b4:	e0bffa0d 	sth	r2,-24(fp)
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 203a1b8:	e0bff817 	ldw	r2,-32(fp)
 203a1bc:	10800504 	addi	r2,r2,20
 203a1c0:	e17ff917 	ldw	r5,-28(fp)
 203a1c4:	1009883a 	mov	r4,r2
 203a1c8:	20152500 	call	2015250 <sys_mbox_trypost>
 203a1cc:	10803fcc 	andi	r2,r2,255
 203a1d0:	1080201c 	xori	r2,r2,128
 203a1d4:	10bfe004 	addi	r2,r2,-128
 203a1d8:	10000326 	beq	r2,zero,203a1e8 <recv_udp+0xf0>
    netbuf_delete(buf);
 203a1dc:	e13ff917 	ldw	r4,-28(fp)
 203a1e0:	203c4d00 	call	203c4d0 <netbuf_delete>
    return;
 203a1e4:	00000a06 	br	203a210 <recv_udp+0x118>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 203a1e8:	e0bff817 	ldw	r2,-32(fp)
 203a1ec:	10800c17 	ldw	r2,48(r2)
 203a1f0:	10000726 	beq	r2,zero,203a210 <recv_udp+0x118>
 203a1f4:	e0bff817 	ldw	r2,-32(fp)
 203a1f8:	10800c17 	ldw	r2,48(r2)
 203a1fc:	e0fffa0b 	ldhu	r3,-24(fp)
 203a200:	180d883a 	mov	r6,r3
 203a204:	000b883a 	mov	r5,zero
 203a208:	e13ff817 	ldw	r4,-32(fp)
 203a20c:	103ee83a 	callr	r2
  }
}
 203a210:	e037883a 	mov	sp,fp
 203a214:	dfc00117 	ldw	ra,4(sp)
 203a218:	df000017 	ldw	fp,0(sp)
 203a21c:	dec00204 	addi	sp,sp,8
 203a220:	f800283a 	ret

0203a224 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 203a224:	defff804 	addi	sp,sp,-32
 203a228:	dfc00715 	stw	ra,28(sp)
 203a22c:	df000615 	stw	fp,24(sp)
 203a230:	df000604 	addi	fp,sp,24
 203a234:	e13ffc15 	stw	r4,-16(fp)
 203a238:	e17ffd15 	stw	r5,-12(fp)
 203a23c:	e1bffe15 	stw	r6,-8(fp)
 203a240:	3805883a 	mov	r2,r7
 203a244:	e0bfff05 	stb	r2,-4(fp)
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  conn = (struct netconn *)arg;
 203a248:	e0bffc17 	ldw	r2,-16(fp)
 203a24c:	e0bffb15 	stw	r2,-20(fp)

  if (conn == NULL) {
 203a250:	e0bffb17 	ldw	r2,-20(fp)
 203a254:	1000021e 	bne	r2,zero,203a260 <recv_tcp+0x3c>
    return ERR_VAL;
 203a258:	00bffe84 	movi	r2,-6
 203a25c:	00003c06 	br	203a350 <recv_tcp+0x12c>
  }

  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);

  if (!sys_mbox_valid(&conn->recvmbox)) {
 203a260:	e0bffb17 	ldw	r2,-20(fp)
 203a264:	10800517 	ldw	r2,20(r2)
 203a268:	10000c1e 	bne	r2,zero,203a29c <recv_tcp+0x78>
    /* recvmbox already deleted */
    if (p != NULL) {
 203a26c:	e0bffe17 	ldw	r2,-8(fp)
 203a270:	10000826 	beq	r2,zero,203a294 <recv_tcp+0x70>
      tcp_recved(pcb, p->tot_len);
 203a274:	e0bffe17 	ldw	r2,-8(fp)
 203a278:	1080020b 	ldhu	r2,8(r2)
 203a27c:	10bfffcc 	andi	r2,r2,65535
 203a280:	100b883a 	mov	r5,r2
 203a284:	e13ffd17 	ldw	r4,-12(fp)
 203a288:	201c3fc0 	call	201c3fc <tcp_recved>
      pbuf_free(p);
 203a28c:	e13ffe17 	ldw	r4,-8(fp)
 203a290:	201aa200 	call	201aa20 <pbuf_free>
    }
    return ERR_OK;
 203a294:	0005883a 	mov	r2,zero
 203a298:	00002d06 	br	203a350 <recv_tcp+0x12c>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  NETCONN_SET_SAFE_ERR(conn, err);
 203a29c:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 203a2a0:	10000126 	beq	r2,zero,203a2a8 <recv_tcp+0x84>
 203a2a4:	2010de80 	call	2010de8 <vTaskEnterCritical>
 203a2a8:	e0bffb17 	ldw	r2,-20(fp)
 203a2ac:	10800303 	ldbu	r2,12(r2)
 203a2b0:	10803fcc 	andi	r2,r2,255
 203a2b4:	1080201c 	xori	r2,r2,128
 203a2b8:	10bfe004 	addi	r2,r2,-128
 203a2bc:	10bffdd0 	cmplti	r2,r2,-9
 203a2c0:	1000031e 	bne	r2,zero,203a2d0 <recv_tcp+0xac>
 203a2c4:	e0bffb17 	ldw	r2,-20(fp)
 203a2c8:	e0ffff03 	ldbu	r3,-4(fp)
 203a2cc:	10c00305 	stb	r3,12(r2)
 203a2d0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 203a2d4:	10000126 	beq	r2,zero,203a2dc <recv_tcp+0xb8>
 203a2d8:	2010e300 	call	2010e30 <vTaskExitCritical>

  if (p != NULL) {
 203a2dc:	e0bffe17 	ldw	r2,-8(fp)
 203a2e0:	10000426 	beq	r2,zero,203a2f4 <recv_tcp+0xd0>
    len = p->tot_len;
 203a2e4:	e0bffe17 	ldw	r2,-8(fp)
 203a2e8:	1080020b 	ldhu	r2,8(r2)
 203a2ec:	e0bffa0d 	sth	r2,-24(fp)
 203a2f0:	00000106 	br	203a2f8 <recv_tcp+0xd4>
  } else {
    len = 0;
 203a2f4:	e03ffa0d 	sth	zero,-24(fp)
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 203a2f8:	e0bffb17 	ldw	r2,-20(fp)
 203a2fc:	10800504 	addi	r2,r2,20
 203a300:	e17ffe17 	ldw	r5,-8(fp)
 203a304:	1009883a 	mov	r4,r2
 203a308:	20152500 	call	2015250 <sys_mbox_trypost>
 203a30c:	10803fcc 	andi	r2,r2,255
 203a310:	1080201c 	xori	r2,r2,128
 203a314:	10bfe004 	addi	r2,r2,-128
 203a318:	10000226 	beq	r2,zero,203a324 <recv_tcp+0x100>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 203a31c:	00bfffc4 	movi	r2,-1
 203a320:	00000b06 	br	203a350 <recv_tcp+0x12c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 203a324:	e0bffb17 	ldw	r2,-20(fp)
 203a328:	10800c17 	ldw	r2,48(r2)
 203a32c:	10000726 	beq	r2,zero,203a34c <recv_tcp+0x128>
 203a330:	e0bffb17 	ldw	r2,-20(fp)
 203a334:	10800c17 	ldw	r2,48(r2)
 203a338:	e0fffa0b 	ldhu	r3,-24(fp)
 203a33c:	180d883a 	mov	r6,r3
 203a340:	000b883a 	mov	r5,zero
 203a344:	e13ffb17 	ldw	r4,-20(fp)
 203a348:	103ee83a 	callr	r2
  }

  return ERR_OK;
 203a34c:	0005883a 	mov	r2,zero
}
 203a350:	e037883a 	mov	sp,fp
 203a354:	dfc00117 	ldw	ra,4(sp)
 203a358:	df000017 	ldw	fp,0(sp)
 203a35c:	dec00204 	addi	sp,sp,8
 203a360:	f800283a 	ret

0203a364 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 203a364:	defffb04 	addi	sp,sp,-20
 203a368:	dfc00415 	stw	ra,16(sp)
 203a36c:	df000315 	stw	fp,12(sp)
 203a370:	df000304 	addi	fp,sp,12
 203a374:	e13ffe15 	stw	r4,-8(fp)
 203a378:	e17fff15 	stw	r5,-4(fp)
  struct netconn *conn = (struct netconn *)arg;
 203a37c:	e0bffe17 	ldw	r2,-8(fp)
 203a380:	e0bffd15 	stw	r2,-12(fp)

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn->state == NETCONN_WRITE) {
 203a384:	e0bffd17 	ldw	r2,-12(fp)
 203a388:	10800117 	ldw	r2,4(r2)
 203a38c:	10800058 	cmpnei	r2,r2,1
 203a390:	1000031e 	bne	r2,zero,203a3a0 <poll_tcp+0x3c>
    do_writemore(conn);
 203a394:	e13ffd17 	ldw	r4,-12(fp)
 203a398:	203bd340 	call	203bd34 <do_writemore>
 203a39c:	00000606 	br	203a3b8 <poll_tcp+0x54>
  } else if (conn->state == NETCONN_CLOSE) {
 203a3a0:	e0bffd17 	ldw	r2,-12(fp)
 203a3a4:	10800117 	ldw	r2,4(r2)
 203a3a8:	10800118 	cmpnei	r2,r2,4
 203a3ac:	1000021e 	bne	r2,zero,203a3b8 <poll_tcp+0x54>
    do_close_internal(conn);
 203a3b0:	e13ffd17 	ldw	r4,-12(fp)
 203a3b4:	203adfc0 	call	203adfc <do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 203a3b8:	e0bffd17 	ldw	r2,-12(fp)
 203a3bc:	10800903 	ldbu	r2,36(r2)
 203a3c0:	10803fcc 	andi	r2,r2,255
 203a3c4:	1080040c 	andi	r2,r2,16
 203a3c8:	10001f26 	beq	r2,zero,203a448 <poll_tcp+0xe4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 203a3cc:	e0bffd17 	ldw	r2,-12(fp)
 203a3d0:	10800217 	ldw	r2,8(r2)
 203a3d4:	10001c26 	beq	r2,zero,203a448 <poll_tcp+0xe4>
 203a3d8:	e0bffd17 	ldw	r2,-12(fp)
 203a3dc:	10800217 	ldw	r2,8(r2)
 203a3e0:	10801a8b 	ldhu	r2,106(r2)
 203a3e4:	10bfffcc 	andi	r2,r2,65535
 203a3e8:	10816d70 	cmpltui	r2,r2,1461
 203a3ec:	1000161e 	bne	r2,zero,203a448 <poll_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 203a3f0:	e0bffd17 	ldw	r2,-12(fp)
 203a3f4:	10800217 	ldw	r2,8(r2)
 203a3f8:	10801b0b 	ldhu	r2,108(r2)

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 203a3fc:	10bfffcc 	andi	r2,r2,65535
 203a400:	10800128 	cmpgeui	r2,r2,4
 203a404:	1000101e 	bne	r2,zero,203a448 <poll_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 203a408:	e0bffd17 	ldw	r2,-12(fp)
 203a40c:	10c00903 	ldbu	r3,36(r2)
 203a410:	00bffbc4 	movi	r2,-17
 203a414:	1884703a 	and	r2,r3,r2
 203a418:	1007883a 	mov	r3,r2
 203a41c:	e0bffd17 	ldw	r2,-12(fp)
 203a420:	10c00905 	stb	r3,36(r2)
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 203a424:	e0bffd17 	ldw	r2,-12(fp)
 203a428:	10800c17 	ldw	r2,48(r2)
 203a42c:	10000626 	beq	r2,zero,203a448 <poll_tcp+0xe4>
 203a430:	e0bffd17 	ldw	r2,-12(fp)
 203a434:	10800c17 	ldw	r2,48(r2)
 203a438:	000d883a 	mov	r6,zero
 203a43c:	01400084 	movi	r5,2
 203a440:	e13ffd17 	ldw	r4,-12(fp)
 203a444:	103ee83a 	callr	r2
    }
  }

  return ERR_OK;
 203a448:	0005883a 	mov	r2,zero
}
 203a44c:	e037883a 	mov	sp,fp
 203a450:	dfc00117 	ldw	ra,4(sp)
 203a454:	df000017 	ldw	fp,0(sp)
 203a458:	dec00204 	addi	sp,sp,8
 203a45c:	f800283a 	ret

0203a460 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 203a460:	defffa04 	addi	sp,sp,-24
 203a464:	dfc00515 	stw	ra,20(sp)
 203a468:	df000415 	stw	fp,16(sp)
 203a46c:	df000404 	addi	fp,sp,16
 203a470:	e13ffd15 	stw	r4,-12(fp)
 203a474:	e17ffe15 	stw	r5,-8(fp)
 203a478:	3005883a 	mov	r2,r6
 203a47c:	e0bfff0d 	sth	r2,-4(fp)
  struct netconn *conn = (struct netconn *)arg;
 203a480:	e0bffd17 	ldw	r2,-12(fp)
 203a484:	e0bffc15 	stw	r2,-16(fp)

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn) {
 203a488:	e0bffc17 	ldw	r2,-16(fp)
 203a48c:	10002d26 	beq	r2,zero,203a544 <sent_tcp+0xe4>
  if (conn->state == NETCONN_WRITE) {
 203a490:	e0bffc17 	ldw	r2,-16(fp)
 203a494:	10800117 	ldw	r2,4(r2)
 203a498:	10800058 	cmpnei	r2,r2,1
 203a49c:	1000031e 	bne	r2,zero,203a4ac <sent_tcp+0x4c>
    do_writemore(conn);
 203a4a0:	e13ffc17 	ldw	r4,-16(fp)
 203a4a4:	203bd340 	call	203bd34 <do_writemore>
 203a4a8:	00000606 	br	203a4c4 <sent_tcp+0x64>
  } else if (conn->state == NETCONN_CLOSE) {
 203a4ac:	e0bffc17 	ldw	r2,-16(fp)
 203a4b0:	10800117 	ldw	r2,4(r2)
 203a4b4:	10800118 	cmpnei	r2,r2,4
 203a4b8:	1000021e 	bne	r2,zero,203a4c4 <sent_tcp+0x64>
    do_close_internal(conn);
 203a4bc:	e13ffc17 	ldw	r4,-16(fp)
 203a4c0:	203adfc0 	call	203adfc <do_close_internal>
  }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 203a4c4:	e0bffc17 	ldw	r2,-16(fp)
 203a4c8:	10800217 	ldw	r2,8(r2)
 203a4cc:	10001d26 	beq	r2,zero,203a544 <sent_tcp+0xe4>
 203a4d0:	e0bffc17 	ldw	r2,-16(fp)
 203a4d4:	10800217 	ldw	r2,8(r2)
 203a4d8:	10801a8b 	ldhu	r2,106(r2)
 203a4dc:	10bfffcc 	andi	r2,r2,65535
 203a4e0:	10816d70 	cmpltui	r2,r2,1461
 203a4e4:	1000171e 	bne	r2,zero,203a544 <sent_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 203a4e8:	e0bffc17 	ldw	r2,-16(fp)
 203a4ec:	10800217 	ldw	r2,8(r2)
 203a4f0:	10801b0b 	ldhu	r2,108(r2)
    do_close_internal(conn);
  }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 203a4f4:	10bfffcc 	andi	r2,r2,65535
 203a4f8:	10800128 	cmpgeui	r2,r2,4
 203a4fc:	1000111e 	bne	r2,zero,203a544 <sent_tcp+0xe4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 203a500:	e0bffc17 	ldw	r2,-16(fp)
 203a504:	10c00903 	ldbu	r3,36(r2)
 203a508:	00bffbc4 	movi	r2,-17
 203a50c:	1884703a 	and	r2,r3,r2
 203a510:	1007883a 	mov	r3,r2
 203a514:	e0bffc17 	ldw	r2,-16(fp)
 203a518:	10c00905 	stb	r3,36(r2)
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 203a51c:	e0bffc17 	ldw	r2,-16(fp)
 203a520:	10800c17 	ldw	r2,48(r2)
 203a524:	10000726 	beq	r2,zero,203a544 <sent_tcp+0xe4>
 203a528:	e0bffc17 	ldw	r2,-16(fp)
 203a52c:	10800c17 	ldw	r2,48(r2)
 203a530:	e0ffff0b 	ldhu	r3,-4(fp)
 203a534:	180d883a 	mov	r6,r3
 203a538:	01400084 	movi	r5,2
 203a53c:	e13ffc17 	ldw	r4,-16(fp)
 203a540:	103ee83a 	callr	r2
    }
  }
  
  return ERR_OK;
 203a544:	0005883a 	mov	r2,zero
}
 203a548:	e037883a 	mov	sp,fp
 203a54c:	dfc00117 	ldw	ra,4(sp)
 203a550:	df000017 	ldw	fp,0(sp)
 203a554:	dec00204 	addi	sp,sp,8
 203a558:	f800283a 	ret

0203a55c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 203a55c:	defff904 	addi	sp,sp,-28
 203a560:	dfc00615 	stw	ra,24(sp)
 203a564:	df000515 	stw	fp,20(sp)
 203a568:	df000504 	addi	fp,sp,20
 203a56c:	e13ffe15 	stw	r4,-8(fp)
 203a570:	2805883a 	mov	r2,r5
 203a574:	e0bfff05 	stb	r2,-4(fp)
  struct netconn *conn;
  enum netconn_state old_state;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 203a578:	e0bffe17 	ldw	r2,-8(fp)
 203a57c:	e0bffb15 	stw	r2,-20(fp)
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  conn->pcb.tcp = NULL;
 203a580:	e0bffb17 	ldw	r2,-20(fp)
 203a584:	10000215 	stw	zero,8(r2)

  /* no check since this is always fatal! */
  SYS_ARCH_PROTECT(lev);
 203a588:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 203a58c:	10000126 	beq	r2,zero,203a594 <err_tcp+0x38>
 203a590:	2010de80 	call	2010de8 <vTaskEnterCritical>
  conn->last_err = err;
 203a594:	e0bffb17 	ldw	r2,-20(fp)
 203a598:	e0ffff03 	ldbu	r3,-4(fp)
 203a59c:	10c00305 	stb	r3,12(r2)
  SYS_ARCH_UNPROTECT(lev);
 203a5a0:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 203a5a4:	10000126 	beq	r2,zero,203a5ac <err_tcp+0x50>
 203a5a8:	2010e300 	call	2010e30 <vTaskExitCritical>

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 203a5ac:	e0bffb17 	ldw	r2,-20(fp)
 203a5b0:	10800117 	ldw	r2,4(r2)
 203a5b4:	e0bffc15 	stw	r2,-16(fp)
  conn->state = NETCONN_NONE;
 203a5b8:	e0bffb17 	ldw	r2,-20(fp)
 203a5bc:	10000115 	stw	zero,4(r2)

  /* Notify the user layer about a connection error. Used to signal
     select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 203a5c0:	e0bffb17 	ldw	r2,-20(fp)
 203a5c4:	10800c17 	ldw	r2,48(r2)
 203a5c8:	10000626 	beq	r2,zero,203a5e4 <err_tcp+0x88>
 203a5cc:	e0bffb17 	ldw	r2,-20(fp)
 203a5d0:	10800c17 	ldw	r2,48(r2)
 203a5d4:	000d883a 	mov	r6,zero
 203a5d8:	01400104 	movi	r5,4
 203a5dc:	e13ffb17 	ldw	r4,-20(fp)
 203a5e0:	103ee83a 	callr	r2
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 203a5e4:	e0bffb17 	ldw	r2,-20(fp)
 203a5e8:	10800c17 	ldw	r2,48(r2)
 203a5ec:	10000626 	beq	r2,zero,203a608 <err_tcp+0xac>
 203a5f0:	e0bffb17 	ldw	r2,-20(fp)
 203a5f4:	10800c17 	ldw	r2,48(r2)
 203a5f8:	000d883a 	mov	r6,zero
 203a5fc:	000b883a 	mov	r5,zero
 203a600:	e13ffb17 	ldw	r4,-20(fp)
 203a604:	103ee83a 	callr	r2
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 203a608:	e0bffb17 	ldw	r2,-20(fp)
 203a60c:	10800c17 	ldw	r2,48(r2)
 203a610:	10000626 	beq	r2,zero,203a62c <err_tcp+0xd0>
 203a614:	e0bffb17 	ldw	r2,-20(fp)
 203a618:	10800c17 	ldw	r2,48(r2)
 203a61c:	000d883a 	mov	r6,zero
 203a620:	01400084 	movi	r5,2
 203a624:	e13ffb17 	ldw	r4,-20(fp)
 203a628:	103ee83a 	callr	r2

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 203a62c:	e0bffb17 	ldw	r2,-20(fp)
 203a630:	10800517 	ldw	r2,20(r2)
 203a634:	10000526 	beq	r2,zero,203a64c <err_tcp+0xf0>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 203a638:	e0bffb17 	ldw	r2,-20(fp)
 203a63c:	10800504 	addi	r2,r2,20
 203a640:	000b883a 	mov	r5,zero
 203a644:	1009883a 	mov	r4,r2
 203a648:	20152500 	call	2015250 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 203a64c:	e0bffb17 	ldw	r2,-20(fp)
 203a650:	10800617 	ldw	r2,24(r2)
 203a654:	10000526 	beq	r2,zero,203a66c <err_tcp+0x110>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 203a658:	e0bffb17 	ldw	r2,-20(fp)
 203a65c:	10800604 	addi	r2,r2,24
 203a660:	000b883a 	mov	r5,zero
 203a664:	1009883a 	mov	r4,r2
 203a668:	20152500 	call	2015250 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 203a66c:	e0bffc17 	ldw	r2,-16(fp)
 203a670:	10800060 	cmpeqi	r2,r2,1
 203a674:	1000061e 	bne	r2,zero,203a690 <err_tcp+0x134>
 203a678:	e0bffc17 	ldw	r2,-16(fp)
 203a67c:	10800120 	cmpeqi	r2,r2,4
 203a680:	1000031e 	bne	r2,zero,203a690 <err_tcp+0x134>
 203a684:	e0bffc17 	ldw	r2,-16(fp)
 203a688:	108000d8 	cmpnei	r2,r2,3
 203a68c:	10001a1e 	bne	r2,zero,203a6f8 <err_tcp+0x19c>
      (old_state == NETCONN_CONNECT)) {
    /* calling do_writemore/do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 203a690:	e0bffb17 	ldw	r2,-20(fp)
 203a694:	10800903 	ldbu	r2,36(r2)
 203a698:	10803fcc 	andi	r2,r2,255
 203a69c:	1080010c 	andi	r2,r2,4
 203a6a0:	1004c03a 	cmpne	r2,r2,zero
 203a6a4:	10803fcc 	andi	r2,r2,255
 203a6a8:	e0bffd15 	stw	r2,-12(fp)
    SET_NONBLOCKING_CONNECT(conn, 0);
 203a6ac:	e0bffb17 	ldw	r2,-20(fp)
 203a6b0:	10c00903 	ldbu	r3,36(r2)
 203a6b4:	00bffec4 	movi	r2,-5
 203a6b8:	1884703a 	and	r2,r3,r2
 203a6bc:	1007883a 	mov	r3,r2
 203a6c0:	e0bffb17 	ldw	r2,-20(fp)
 203a6c4:	10c00905 	stb	r3,36(r2)

    if (!was_nonblocking_connect) {
 203a6c8:	e0bffd17 	ldw	r2,-12(fp)
 203a6cc:	10000a1e 	bne	r2,zero,203a6f8 <err_tcp+0x19c>
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
      conn->current_msg->err = err;
 203a6d0:	e0bffb17 	ldw	r2,-20(fp)
 203a6d4:	10800b17 	ldw	r2,44(r2)
 203a6d8:	e0ffff03 	ldbu	r3,-4(fp)
 203a6dc:	10c00105 	stb	r3,4(r2)
      conn->current_msg = NULL;
 203a6e0:	e0bffb17 	ldw	r2,-20(fp)
 203a6e4:	10000b15 	stw	zero,44(r2)
      /* wake up the waiting task */
      sys_sem_signal(&conn->op_completed);
 203a6e8:	e0bffb17 	ldw	r2,-20(fp)
 203a6ec:	10800404 	addi	r2,r2,16
 203a6f0:	1009883a 	mov	r4,r2
 203a6f4:	2014df00 	call	2014df0 <sys_sem_signal>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  }
}
 203a6f8:	0001883a 	nop
 203a6fc:	e037883a 	mov	sp,fp
 203a700:	dfc00117 	ldw	ra,4(sp)
 203a704:	df000017 	ldw	fp,0(sp)
 203a708:	dec00204 	addi	sp,sp,8
 203a70c:	f800283a 	ret

0203a710 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 203a710:	defffc04 	addi	sp,sp,-16
 203a714:	dfc00315 	stw	ra,12(sp)
 203a718:	df000215 	stw	fp,8(sp)
 203a71c:	df000204 	addi	fp,sp,8
 203a720:	e13fff15 	stw	r4,-4(fp)
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 203a724:	e0bfff17 	ldw	r2,-4(fp)
 203a728:	10800217 	ldw	r2,8(r2)
 203a72c:	e0bffe15 	stw	r2,-8(fp)
  tcp_arg(pcb, conn);
 203a730:	e17fff17 	ldw	r5,-4(fp)
 203a734:	e13ffe17 	ldw	r4,-8(fp)
 203a738:	201d7f80 	call	201d7f8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 203a73c:	01408134 	movhi	r5,516
 203a740:	29688904 	addi	r5,r5,-24028
 203a744:	e13ffe17 	ldw	r4,-8(fp)
 203a748:	201d82c0 	call	201d82c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 203a74c:	01408134 	movhi	r5,516
 203a750:	29691804 	addi	r5,r5,-23456
 203a754:	e13ffe17 	ldw	r4,-8(fp)
 203a758:	201d8600 	call	201d860 <tcp_sent>
  tcp_poll(pcb, poll_tcp, 4);
 203a75c:	01800104 	movi	r6,4
 203a760:	01408134 	movhi	r5,516
 203a764:	2968d904 	addi	r5,r5,-23708
 203a768:	e13ffe17 	ldw	r4,-8(fp)
 203a76c:	201d8fc0 	call	201d8fc <tcp_poll>
  tcp_err(pcb, err_tcp);
 203a770:	01408134 	movhi	r5,516
 203a774:	29695704 	addi	r5,r5,-23204
 203a778:	e13ffe17 	ldw	r4,-8(fp)
 203a77c:	201d8940 	call	201d894 <tcp_err>
}
 203a780:	0001883a 	nop
 203a784:	e037883a 	mov	sp,fp
 203a788:	dfc00117 	ldw	ra,4(sp)
 203a78c:	df000017 	ldw	fp,0(sp)
 203a790:	dec00204 	addi	sp,sp,8
 203a794:	f800283a 	ret

0203a798 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 203a798:	defff804 	addi	sp,sp,-32
 203a79c:	dfc00715 	stw	ra,28(sp)
 203a7a0:	df000615 	stw	fp,24(sp)
 203a7a4:	df000604 	addi	fp,sp,24
 203a7a8:	e13ffd15 	stw	r4,-12(fp)
 203a7ac:	e17ffe15 	stw	r5,-8(fp)
 203a7b0:	3005883a 	mov	r2,r6
 203a7b4:	e0bfff05 	stb	r2,-4(fp)
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 203a7b8:	e0bffd17 	ldw	r2,-12(fp)
 203a7bc:	e0bffa15 	stw	r2,-24(fp)

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (!sys_mbox_valid(&conn->acceptmbox)) {
 203a7c0:	e0bffa17 	ldw	r2,-24(fp)
 203a7c4:	10800617 	ldw	r2,24(r2)
 203a7c8:	1000021e 	bne	r2,zero,203a7d4 <accept_function+0x3c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 203a7cc:	00bffe84 	movi	r2,-6
 203a7d0:	00004606 	br	203a8ec <accept_function+0x154>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. conn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 203a7d4:	e0bffa17 	ldw	r2,-24(fp)
 203a7d8:	10c00017 	ldw	r3,0(r2)
 203a7dc:	e0bffa17 	ldw	r2,-24(fp)
 203a7e0:	10800c17 	ldw	r2,48(r2)
 203a7e4:	100b883a 	mov	r5,r2
 203a7e8:	1809883a 	mov	r4,r3
 203a7ec:	203ab040 	call	203ab04 <netconn_alloc>
 203a7f0:	e0bffb15 	stw	r2,-20(fp)
  if (newconn == NULL) {
 203a7f4:	e0bffb17 	ldw	r2,-20(fp)
 203a7f8:	1000021e 	bne	r2,zero,203a804 <accept_function+0x6c>
    return ERR_MEM;
 203a7fc:	00bfffc4 	movi	r2,-1
 203a800:	00003a06 	br	203a8ec <accept_function+0x154>
  }
  newconn->pcb.tcp = newpcb;
 203a804:	e0bffb17 	ldw	r2,-20(fp)
 203a808:	e0fffe17 	ldw	r3,-8(fp)
 203a80c:	10c00215 	stw	r3,8(r2)
  setup_tcp(newconn);
 203a810:	e13ffb17 	ldw	r4,-20(fp)
 203a814:	203a7100 	call	203a710 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 203a818:	e0bffb17 	ldw	r2,-20(fp)
 203a81c:	e0ffff03 	ldbu	r3,-4(fp)
 203a820:	10c00305 	stb	r3,12(r2)

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 203a824:	e0bffa17 	ldw	r2,-24(fp)
 203a828:	10800604 	addi	r2,r2,24
 203a82c:	e17ffb17 	ldw	r5,-20(fp)
 203a830:	1009883a 	mov	r4,r2
 203a834:	20152500 	call	2015250 <sys_mbox_trypost>
 203a838:	10803fcc 	andi	r2,r2,255
 203a83c:	1080201c 	xori	r2,r2,128
 203a840:	10bfe004 	addi	r2,r2,-128
 203a844:	10001f26 	beq	r2,zero,203a8c4 <accept_function+0x12c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 203a848:	e0bffb17 	ldw	r2,-20(fp)
 203a84c:	10800217 	ldw	r2,8(r2)
 203a850:	e0bffc15 	stw	r2,-16(fp)
    tcp_arg(pcb, NULL);
 203a854:	000b883a 	mov	r5,zero
 203a858:	e13ffc17 	ldw	r4,-16(fp)
 203a85c:	201d7f80 	call	201d7f8 <tcp_arg>
    tcp_recv(pcb, NULL);
 203a860:	000b883a 	mov	r5,zero
 203a864:	e13ffc17 	ldw	r4,-16(fp)
 203a868:	201d82c0 	call	201d82c <tcp_recv>
    tcp_sent(pcb, NULL);
 203a86c:	000b883a 	mov	r5,zero
 203a870:	e13ffc17 	ldw	r4,-16(fp)
 203a874:	201d8600 	call	201d860 <tcp_sent>
    tcp_poll(pcb, NULL, 4);
 203a878:	01800104 	movi	r6,4
 203a87c:	000b883a 	mov	r5,zero
 203a880:	e13ffc17 	ldw	r4,-16(fp)
 203a884:	201d8fc0 	call	201d8fc <tcp_poll>
    tcp_err(pcb, NULL);
 203a888:	000b883a 	mov	r5,zero
 203a88c:	e13ffc17 	ldw	r4,-16(fp)
 203a890:	201d8940 	call	201d894 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 203a894:	e0bffb17 	ldw	r2,-20(fp)
 203a898:	10000215 	stw	zero,8(r2)
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 203a89c:	e0bffb17 	ldw	r2,-20(fp)
 203a8a0:	10800504 	addi	r2,r2,20
 203a8a4:	1009883a 	mov	r4,r2
 203a8a8:	20151900 	call	2015190 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 203a8ac:	e0bffb17 	ldw	r2,-20(fp)
 203a8b0:	10000515 	stw	zero,20(r2)
    netconn_free(newconn);
 203a8b4:	e13ffb17 	ldw	r4,-20(fp)
 203a8b8:	203ac300 	call	203ac30 <netconn_free>
    return ERR_MEM;
 203a8bc:	00bfffc4 	movi	r2,-1
 203a8c0:	00000a06 	br	203a8ec <accept_function+0x154>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 203a8c4:	e0bffa17 	ldw	r2,-24(fp)
 203a8c8:	10800c17 	ldw	r2,48(r2)
 203a8cc:	10000626 	beq	r2,zero,203a8e8 <accept_function+0x150>
 203a8d0:	e0bffa17 	ldw	r2,-24(fp)
 203a8d4:	10800c17 	ldw	r2,48(r2)
 203a8d8:	000d883a 	mov	r6,zero
 203a8dc:	000b883a 	mov	r5,zero
 203a8e0:	e13ffa17 	ldw	r4,-24(fp)
 203a8e4:	103ee83a 	callr	r2
  }

  return ERR_OK;
 203a8e8:	0005883a 	mov	r2,zero
}
 203a8ec:	e037883a 	mov	sp,fp
 203a8f0:	dfc00117 	ldw	ra,4(sp)
 203a8f4:	df000017 	ldw	fp,0(sp)
 203a8f8:	dec00204 	addi	sp,sp,8
 203a8fc:	f800283a 	ret

0203a900 <pcb_new>:
 * @param msg the api_msg_msg describing the connection type
 * @return msg->conn->err, but the return value is currently ignored
 */
static void
pcb_new(struct api_msg_msg *msg)
{
 203a900:	defffc04 	addi	sp,sp,-16
 203a904:	dfc00315 	stw	ra,12(sp)
 203a908:	df000215 	stw	fp,8(sp)
 203a90c:	dc000115 	stw	r16,4(sp)
 203a910:	df000204 	addi	fp,sp,8
 203a914:	e13ffe15 	stw	r4,-8(fp)
  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 203a918:	e0bffe17 	ldw	r2,-8(fp)
 203a91c:	10800017 	ldw	r2,0(r2)
 203a920:	10800017 	ldw	r2,0(r2)
 203a924:	10803c0c 	andi	r2,r2,240
 203a928:	10c00820 	cmpeqi	r3,r2,32
 203a92c:	1800201e 	bne	r3,zero,203a9b0 <pcb_new+0xb0>
 203a930:	10c01020 	cmpeqi	r3,r2,64
 203a934:	1800031e 	bne	r3,zero,203a944 <pcb_new+0x44>
 203a938:	10800420 	cmpeqi	r2,r2,16
 203a93c:	10003d1e 	bne	r2,zero,203aa34 <pcb_new+0x134>
 203a940:	00004d06 	br	203aa78 <pcb_new+0x178>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new(msg->msg.n.proto);
 203a944:	e0bffe17 	ldw	r2,-8(fp)
 203a948:	14000017 	ldw	r16,0(r2)
 203a94c:	e0bffe17 	ldw	r2,-8(fp)
 203a950:	10800203 	ldbu	r2,8(r2)
 203a954:	10803fcc 	andi	r2,r2,255
 203a958:	1009883a 	mov	r4,r2
 203a95c:	2034a000 	call	2034a00 <raw_new>
 203a960:	80800215 	stw	r2,8(r16)
    if(msg->conn->pcb.raw == NULL) {
 203a964:	e0bffe17 	ldw	r2,-8(fp)
 203a968:	10800017 	ldw	r2,0(r2)
 203a96c:	10800217 	ldw	r2,8(r2)
 203a970:	1000041e 	bne	r2,zero,203a984 <pcb_new+0x84>
      msg->err = ERR_MEM;
 203a974:	e0bffe17 	ldw	r2,-8(fp)
 203a978:	00ffffc4 	movi	r3,-1
 203a97c:	10c00105 	stb	r3,4(r2)
      break;
 203a980:	00004106 	br	203aa88 <pcb_new+0x188>
    }
    raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
 203a984:	e0bffe17 	ldw	r2,-8(fp)
 203a988:	10800017 	ldw	r2,0(r2)
 203a98c:	10c00217 	ldw	r3,8(r2)
 203a990:	e0bffe17 	ldw	r2,-8(fp)
 203a994:	10800017 	ldw	r2,0(r2)
 203a998:	100d883a 	mov	r6,r2
 203a99c:	01408134 	movhi	r5,516
 203a9a0:	2967e204 	addi	r5,r5,-24696
 203a9a4:	1809883a 	mov	r4,r3
 203a9a8:	20347500 	call	2034750 <raw_recv>
    break;
 203a9ac:	00003606 	br	203aa88 <pcb_new+0x188>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new();
 203a9b0:	e0bffe17 	ldw	r2,-8(fp)
 203a9b4:	14000017 	ldw	r16,0(r2)
 203a9b8:	20229d40 	call	20229d4 <udp_new>
 203a9bc:	80800215 	stw	r2,8(r16)
    if(msg->conn->pcb.udp == NULL) {
 203a9c0:	e0bffe17 	ldw	r2,-8(fp)
 203a9c4:	10800017 	ldw	r2,0(r2)
 203a9c8:	10800217 	ldw	r2,8(r2)
 203a9cc:	1000041e 	bne	r2,zero,203a9e0 <pcb_new+0xe0>
      msg->err = ERR_MEM;
 203a9d0:	e0bffe17 	ldw	r2,-8(fp)
 203a9d4:	00ffffc4 	movi	r3,-1
 203a9d8:	10c00105 	stb	r3,4(r2)
      break;
 203a9dc:	00002a06 	br	203aa88 <pcb_new+0x188>
#if LWIP_UDPLITE
    if (msg->conn->type==NETCONN_UDPLITE) {
      udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
    }
#endif /* LWIP_UDPLITE */
    if (msg->conn->type==NETCONN_UDPNOCHKSUM) {
 203a9e0:	e0bffe17 	ldw	r2,-8(fp)
 203a9e4:	10800017 	ldw	r2,0(r2)
 203a9e8:	10800017 	ldw	r2,0(r2)
 203a9ec:	10800898 	cmpnei	r2,r2,34
 203a9f0:	1000051e 	bne	r2,zero,203aa08 <pcb_new+0x108>
      udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 203a9f4:	e0bffe17 	ldw	r2,-8(fp)
 203a9f8:	10800017 	ldw	r2,0(r2)
 203a9fc:	10800217 	ldw	r2,8(r2)
 203aa00:	00c00044 	movi	r3,1
 203aa04:	10c00405 	stb	r3,16(r2)
    }
    udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 203aa08:	e0bffe17 	ldw	r2,-8(fp)
 203aa0c:	10800017 	ldw	r2,0(r2)
 203aa10:	10c00217 	ldw	r3,8(r2)
 203aa14:	e0bffe17 	ldw	r2,-8(fp)
 203aa18:	10800017 	ldw	r2,0(r2)
 203aa1c:	100d883a 	mov	r6,r2
 203aa20:	01408134 	movhi	r5,516
 203aa24:	29683e04 	addi	r5,r5,-24328
 203aa28:	1809883a 	mov	r4,r3
 203aa2c:	20228f00 	call	20228f0 <udp_recv>
    break;
 203aa30:	00001506 	br	203aa88 <pcb_new+0x188>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new();
 203aa34:	e0bffe17 	ldw	r2,-8(fp)
 203aa38:	14000017 	ldw	r16,0(r2)
 203aa3c:	201d7cc0 	call	201d7cc <tcp_new>
 203aa40:	80800215 	stw	r2,8(r16)
    if(msg->conn->pcb.tcp == NULL) {
 203aa44:	e0bffe17 	ldw	r2,-8(fp)
 203aa48:	10800017 	ldw	r2,0(r2)
 203aa4c:	10800217 	ldw	r2,8(r2)
 203aa50:	1000041e 	bne	r2,zero,203aa64 <pcb_new+0x164>
      msg->err = ERR_MEM;
 203aa54:	e0bffe17 	ldw	r2,-8(fp)
 203aa58:	00ffffc4 	movi	r3,-1
 203aa5c:	10c00105 	stb	r3,4(r2)
      break;
 203aa60:	00000906 	br	203aa88 <pcb_new+0x188>
    }
    setup_tcp(msg->conn);
 203aa64:	e0bffe17 	ldw	r2,-8(fp)
 203aa68:	10800017 	ldw	r2,0(r2)
 203aa6c:	1009883a 	mov	r4,r2
 203aa70:	203a7100 	call	203a710 <setup_tcp>
    break;
 203aa74:	00000406 	br	203aa88 <pcb_new+0x188>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 203aa78:	e0bffe17 	ldw	r2,-8(fp)
 203aa7c:	00fffe84 	movi	r3,-6
 203aa80:	10c00105 	stb	r3,4(r2)
    break;
 203aa84:	0001883a 	nop
  }
}
 203aa88:	0001883a 	nop
 203aa8c:	e6ffff04 	addi	sp,fp,-4
 203aa90:	dfc00217 	ldw	ra,8(sp)
 203aa94:	df000117 	ldw	fp,4(sp)
 203aa98:	dc000017 	ldw	r16,0(sp)
 203aa9c:	dec00304 	addi	sp,sp,12
 203aaa0:	f800283a 	ret

0203aaa4 <do_newconn>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
void
do_newconn(struct api_msg_msg *msg)
{
 203aaa4:	defffd04 	addi	sp,sp,-12
 203aaa8:	dfc00215 	stw	ra,8(sp)
 203aaac:	df000115 	stw	fp,4(sp)
 203aab0:	df000104 	addi	fp,sp,4
 203aab4:	e13fff15 	stw	r4,-4(fp)
  msg->err = ERR_OK;
 203aab8:	e0bfff17 	ldw	r2,-4(fp)
 203aabc:	10000105 	stb	zero,4(r2)
  if(msg->conn->pcb.tcp == NULL) {
 203aac0:	e0bfff17 	ldw	r2,-4(fp)
 203aac4:	10800017 	ldw	r2,0(r2)
 203aac8:	10800217 	ldw	r2,8(r2)
 203aacc:	1000021e 	bne	r2,zero,203aad8 <do_newconn+0x34>
    pcb_new(msg);
 203aad0:	e13fff17 	ldw	r4,-4(fp)
 203aad4:	203a9000 	call	203a900 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 203aad8:	e0bfff17 	ldw	r2,-4(fp)
 203aadc:	10800017 	ldw	r2,0(r2)
 203aae0:	10800404 	addi	r2,r2,16
 203aae4:	1009883a 	mov	r4,r2
 203aae8:	2014df00 	call	2014df0 <sys_sem_signal>
}
 203aaec:	0001883a 	nop
 203aaf0:	e037883a 	mov	sp,fp
 203aaf4:	dfc00117 	ldw	ra,4(sp)
 203aaf8:	df000017 	ldw	fp,0(sp)
 203aafc:	dec00204 	addi	sp,sp,8
 203ab00:	f800283a 	ret

0203ab04 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 203ab04:	defffa04 	addi	sp,sp,-24
 203ab08:	dfc00515 	stw	ra,20(sp)
 203ab0c:	df000415 	stw	fp,16(sp)
 203ab10:	df000404 	addi	fp,sp,16
 203ab14:	e13ffe15 	stw	r4,-8(fp)
 203ab18:	e17fff15 	stw	r5,-4(fp)
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 203ab1c:	01000204 	movi	r4,8
 203ab20:	20342e00 	call	20342e0 <memp_malloc>
 203ab24:	e0bffc15 	stw	r2,-16(fp)
  if (conn == NULL) {
 203ab28:	e0bffc17 	ldw	r2,-16(fp)
 203ab2c:	1000021e 	bne	r2,zero,203ab38 <netconn_alloc+0x34>
    return NULL;
 203ab30:	0005883a 	mov	r2,zero
 203ab34:	00003906 	br	203ac1c <netconn_alloc+0x118>
  }

  conn->last_err = ERR_OK;
 203ab38:	e0bffc17 	ldw	r2,-16(fp)
 203ab3c:	10000305 	stb	zero,12(r2)
  conn->type = t;
 203ab40:	e0bffc17 	ldw	r2,-16(fp)
 203ab44:	e0fffe17 	ldw	r3,-8(fp)
 203ab48:	10c00015 	stw	r3,0(r2)
  conn->pcb.tcp = NULL;
 203ab4c:	e0bffc17 	ldw	r2,-16(fp)
 203ab50:	10000215 	stw	zero,8(r2)

#if (DEFAULT_RAW_RECVMBOX_SIZE == DEFAULT_UDP_RECVMBOX_SIZE) && \
    (DEFAULT_RAW_RECVMBOX_SIZE == DEFAULT_TCP_RECVMBOX_SIZE)
  size = DEFAULT_RAW_RECVMBOX_SIZE;
 203ab54:	00840004 	movi	r2,4096
 203ab58:	e0bffd15 	stw	r2,-12(fp)
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
    goto free_and_return;
  }
#endif

  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 203ab5c:	e0bffc17 	ldw	r2,-16(fp)
 203ab60:	10800404 	addi	r2,r2,16
 203ab64:	000b883a 	mov	r5,zero
 203ab68:	1009883a 	mov	r4,r2
 203ab6c:	2014cb40 	call	2014cb4 <sys_sem_new>
 203ab70:	10803fcc 	andi	r2,r2,255
 203ab74:	1080201c 	xori	r2,r2,128
 203ab78:	10bfe004 	addi	r2,r2,-128
 203ab7c:	1000221e 	bne	r2,zero,203ac08 <netconn_alloc+0x104>
    goto free_and_return;
  }
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 203ab80:	e0bffc17 	ldw	r2,-16(fp)
 203ab84:	10800504 	addi	r2,r2,20
 203ab88:	e17ffd17 	ldw	r5,-12(fp)
 203ab8c:	1009883a 	mov	r4,r2
 203ab90:	20150c00 	call	20150c0 <sys_mbox_new>
 203ab94:	10803fcc 	andi	r2,r2,255
 203ab98:	1080201c 	xori	r2,r2,128
 203ab9c:	10bfe004 	addi	r2,r2,-128
 203aba0:	10000526 	beq	r2,zero,203abb8 <netconn_alloc+0xb4>
    sys_sem_free(&conn->op_completed);
 203aba4:	e0bffc17 	ldw	r2,-16(fp)
 203aba8:	10800404 	addi	r2,r2,16
 203abac:	1009883a 	mov	r4,r2
 203abb0:	2014d980 	call	2014d98 <sys_sem_free>
    goto free_and_return;
 203abb4:	00001506 	br	203ac0c <netconn_alloc+0x108>
  }

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 203abb8:	e0bffc17 	ldw	r2,-16(fp)
 203abbc:	10000615 	stw	zero,24(r2)
#endif
  conn->state        = NETCONN_NONE;
 203abc0:	e0bffc17 	ldw	r2,-16(fp)
 203abc4:	10000115 	stw	zero,4(r2)
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 203abc8:	e0bffc17 	ldw	r2,-16(fp)
 203abcc:	00ffffc4 	movi	r3,-1
 203abd0:	10c00715 	stw	r3,28(r2)
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 203abd4:	e0bffc17 	ldw	r2,-16(fp)
 203abd8:	e0ffff17 	ldw	r3,-4(fp)
 203abdc:	10c00c15 	stw	r3,48(r2)
#if LWIP_TCP
  conn->current_msg  = NULL;
 203abe0:	e0bffc17 	ldw	r2,-16(fp)
 203abe4:	10000b15 	stw	zero,44(r2)
  conn->write_offset = 0;
 203abe8:	e0bffc17 	ldw	r2,-16(fp)
 203abec:	10000a15 	stw	zero,40(r2)
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 203abf0:	e0bffc17 	ldw	r2,-16(fp)
 203abf4:	10000815 	stw	zero,32(r2)
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
  conn->flags = 0;
 203abf8:	e0bffc17 	ldw	r2,-16(fp)
 203abfc:	10000905 	stb	zero,36(r2)
  return conn;
 203ac00:	e0bffc17 	ldw	r2,-16(fp)
 203ac04:	00000506 	br	203ac1c <netconn_alloc+0x118>
    goto free_and_return;
  }
#endif

  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
    goto free_and_return;
 203ac08:	0001883a 	nop
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
  conn->flags = 0;
  return conn;
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 203ac0c:	e17ffc17 	ldw	r5,-16(fp)
 203ac10:	01000204 	movi	r4,8
 203ac14:	20344ac0 	call	20344ac <memp_free>
  return NULL;
 203ac18:	0005883a 	mov	r2,zero
}
 203ac1c:	e037883a 	mov	sp,fp
 203ac20:	dfc00117 	ldw	ra,4(sp)
 203ac24:	df000017 	ldw	fp,0(sp)
 203ac28:	dec00204 	addi	sp,sp,8
 203ac2c:	f800283a 	ret

0203ac30 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 203ac30:	defffd04 	addi	sp,sp,-12
 203ac34:	dfc00215 	stw	ra,8(sp)
 203ac38:	df000115 	stw	fp,4(sp)
 203ac3c:	df000104 	addi	fp,sp,4
 203ac40:	e13fff15 	stw	r4,-4(fp)
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

  sys_sem_free(&conn->op_completed);
 203ac44:	e0bfff17 	ldw	r2,-4(fp)
 203ac48:	10800404 	addi	r2,r2,16
 203ac4c:	1009883a 	mov	r4,r2
 203ac50:	2014d980 	call	2014d98 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 203ac54:	e0bfff17 	ldw	r2,-4(fp)
 203ac58:	10000415 	stw	zero,16(r2)

  memp_free(MEMP_NETCONN, conn);
 203ac5c:	e17fff17 	ldw	r5,-4(fp)
 203ac60:	01000204 	movi	r4,8
 203ac64:	20344ac0 	call	20344ac <memp_free>
}
 203ac68:	0001883a 	nop
 203ac6c:	e037883a 	mov	sp,fp
 203ac70:	dfc00117 	ldw	ra,4(sp)
 203ac74:	df000017 	ldw	fp,0(sp)
 203ac78:	dec00204 	addi	sp,sp,8
 203ac7c:	f800283a 	ret

0203ac80 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 203ac80:	defffa04 	addi	sp,sp,-24
 203ac84:	dfc00515 	stw	ra,20(sp)
 203ac88:	df000415 	stw	fp,16(sp)
 203ac8c:	df000404 	addi	fp,sp,16
 203ac90:	e13fff15 	stw	r4,-4(fp)
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 203ac94:	e0bfff17 	ldw	r2,-4(fp)
 203ac98:	10800517 	ldw	r2,20(r2)
 203ac9c:	10002826 	beq	r2,zero,203ad40 <netconn_drain+0xc0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 203aca0:	00001906 	br	203ad08 <netconn_drain+0x88>
#if LWIP_TCP
      if (conn->type == NETCONN_TCP) {
 203aca4:	e0bfff17 	ldw	r2,-4(fp)
 203aca8:	10800017 	ldw	r2,0(r2)
 203acac:	10800418 	cmpnei	r2,r2,16
 203acb0:	1000121e 	bne	r2,zero,203acfc <netconn_drain+0x7c>
        if(mem != NULL) {
 203acb4:	e0bffe17 	ldw	r2,-8(fp)
 203acb8:	10001326 	beq	r2,zero,203ad08 <netconn_drain+0x88>
          p = (struct pbuf*)mem;
 203acbc:	e0bffe17 	ldw	r2,-8(fp)
 203acc0:	e0bffc15 	stw	r2,-16(fp)
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 203acc4:	e0bfff17 	ldw	r2,-4(fp)
 203acc8:	10800217 	ldw	r2,8(r2)
 203accc:	10000826 	beq	r2,zero,203acf0 <netconn_drain+0x70>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 203acd0:	e0bfff17 	ldw	r2,-4(fp)
 203acd4:	10c00217 	ldw	r3,8(r2)
 203acd8:	e0bffc17 	ldw	r2,-16(fp)
 203acdc:	1080020b 	ldhu	r2,8(r2)
 203ace0:	10bfffcc 	andi	r2,r2,65535
 203ace4:	100b883a 	mov	r5,r2
 203ace8:	1809883a 	mov	r4,r3
 203acec:	201c3fc0 	call	201c3fc <tcp_recved>
          }
          pbuf_free(p);
 203acf0:	e13ffc17 	ldw	r4,-16(fp)
 203acf4:	201aa200 	call	201aa20 <pbuf_free>
 203acf8:	00000306 	br	203ad08 <netconn_drain+0x88>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 203acfc:	e0bffe17 	ldw	r2,-8(fp)
 203ad00:	1009883a 	mov	r4,r2
 203ad04:	203c4d00 	call	203c4d0 <netbuf_delete>

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 203ad08:	e0bfff17 	ldw	r2,-4(fp)
 203ad0c:	10800504 	addi	r2,r2,20
 203ad10:	e0fffe04 	addi	r3,fp,-8
 203ad14:	180b883a 	mov	r5,r3
 203ad18:	1009883a 	mov	r4,r2
 203ad1c:	20153b00 	call	20153b0 <sys_arch_mbox_tryfetch>
 203ad20:	10bfffd8 	cmpnei	r2,r2,-1
 203ad24:	103fdf1e 	bne	r2,zero,203aca4 <__alt_mem_mem_0+0xfd01aca4>
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
      }
    }
    sys_mbox_free(&conn->recvmbox);
 203ad28:	e0bfff17 	ldw	r2,-4(fp)
 203ad2c:	10800504 	addi	r2,r2,20
 203ad30:	1009883a 	mov	r4,r2
 203ad34:	20151900 	call	2015190 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 203ad38:	e0bfff17 	ldw	r2,-4(fp)
 203ad3c:	10000515 	stw	zero,20(r2)
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 203ad40:	e0bfff17 	ldw	r2,-4(fp)
 203ad44:	10800617 	ldw	r2,24(r2)
 203ad48:	10002626 	beq	r2,zero,203ade4 <netconn_drain+0x164>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 203ad4c:	00001706 	br	203adac <netconn_drain+0x12c>
      struct netconn *newconn = (struct netconn *)mem;
 203ad50:	e0bffe17 	ldw	r2,-8(fp)
 203ad54:	e0bffd15 	stw	r2,-12(fp)
      /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
      /* pcb might be set to NULL already by err_tcp() */
      if (conn->pcb.tcp != NULL) {
 203ad58:	e0bfff17 	ldw	r2,-4(fp)
 203ad5c:	10800217 	ldw	r2,8(r2)
 203ad60:	10000526 	beq	r2,zero,203ad78 <netconn_drain+0xf8>
        tcp_accepted(conn->pcb.tcp);
 203ad64:	e0bfff17 	ldw	r2,-4(fp)
 203ad68:	10800217 	ldw	r2,8(r2)
 203ad6c:	10c00843 	ldbu	r3,33(r2)
 203ad70:	18ffffc4 	addi	r3,r3,-1
 203ad74:	10c00845 	stb	r3,33(r2)
      }
      /* drain recvmbox */
      netconn_drain(newconn);
 203ad78:	e13ffd17 	ldw	r4,-12(fp)
 203ad7c:	203ac800 	call	203ac80 <netconn_drain>
      if (newconn->pcb.tcp != NULL) {
 203ad80:	e0bffd17 	ldw	r2,-12(fp)
 203ad84:	10800217 	ldw	r2,8(r2)
 203ad88:	10000626 	beq	r2,zero,203ada4 <netconn_drain+0x124>
        tcp_abort(newconn->pcb.tcp);
 203ad8c:	e0bffd17 	ldw	r2,-12(fp)
 203ad90:	10800217 	ldw	r2,8(r2)
 203ad94:	1009883a 	mov	r4,r2
 203ad98:	201be6c0 	call	201be6c <tcp_abort>
        newconn->pcb.tcp = NULL;
 203ad9c:	e0bffd17 	ldw	r2,-12(fp)
 203ada0:	10000215 	stw	zero,8(r2)
      }
      netconn_free(newconn);
 203ada4:	e13ffd17 	ldw	r4,-12(fp)
 203ada8:	203ac300 	call	203ac30 <netconn_free>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 203adac:	e0bfff17 	ldw	r2,-4(fp)
 203adb0:	10800604 	addi	r2,r2,24
 203adb4:	e0fffe04 	addi	r3,fp,-8
 203adb8:	180b883a 	mov	r5,r3
 203adbc:	1009883a 	mov	r4,r2
 203adc0:	20153b00 	call	20153b0 <sys_arch_mbox_tryfetch>
 203adc4:	10bfffd8 	cmpnei	r2,r2,-1
 203adc8:	103fe11e 	bne	r2,zero,203ad50 <__alt_mem_mem_0+0xfd01ad50>
        tcp_abort(newconn->pcb.tcp);
        newconn->pcb.tcp = NULL;
      }
      netconn_free(newconn);
    }
    sys_mbox_free(&conn->acceptmbox);
 203adcc:	e0bfff17 	ldw	r2,-4(fp)
 203add0:	10800604 	addi	r2,r2,24
 203add4:	1009883a 	mov	r4,r2
 203add8:	20151900 	call	2015190 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 203addc:	e0bfff17 	ldw	r2,-4(fp)
 203ade0:	10000615 	stw	zero,24(r2)
  }
#endif /* LWIP_TCP */
}
 203ade4:	0001883a 	nop
 203ade8:	e037883a 	mov	sp,fp
 203adec:	dfc00117 	ldw	ra,4(sp)
 203adf0:	df000017 	ldw	fp,0(sp)
 203adf4:	dec00204 	addi	sp,sp,8
 203adf8:	f800283a 	ret

0203adfc <do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static void
do_close_internal(struct netconn *conn)
{
 203adfc:	defffb04 	addi	sp,sp,-20
 203ae00:	dfc00415 	stw	ra,16(sp)
 203ae04:	df000315 	stw	fp,12(sp)
 203ae08:	df000304 	addi	fp,sp,12
 203ae0c:	e13fff15 	stw	r4,-4(fp)
  LWIP_ASSERT("this is for tcp netconns only", (conn->type == NETCONN_TCP));
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);

  shut = conn->current_msg->msg.sd.shut;
 203ae10:	e0bfff17 	ldw	r2,-4(fp)
 203ae14:	10800b17 	ldw	r2,44(r2)
 203ae18:	10800203 	ldbu	r2,8(r2)
 203ae1c:	e0bffd45 	stb	r2,-11(fp)
  shut_rx = shut & NETCONN_SHUT_RD;
 203ae20:	e0bffd43 	ldbu	r2,-11(fp)
 203ae24:	1080004c 	andi	r2,r2,1
 203ae28:	e0bffd85 	stb	r2,-10(fp)
  shut_tx = shut & NETCONN_SHUT_WR;
 203ae2c:	e0bffd43 	ldbu	r2,-11(fp)
 203ae30:	1080008c 	andi	r2,r2,2
 203ae34:	e0bffdc5 	stb	r2,-9(fp)
  /* shutting down both ends is the same as closing */
  close = shut == NETCONN_SHUT_RDWR;
 203ae38:	e0bffd43 	ldbu	r2,-11(fp)
 203ae3c:	108000e0 	cmpeqi	r2,r2,3
 203ae40:	e0bffe05 	stb	r2,-8(fp)

  /* Set back some callback pointers */
  if (close) {
 203ae44:	e0bffe03 	ldbu	r2,-8(fp)
 203ae48:	10000526 	beq	r2,zero,203ae60 <do_close_internal+0x64>
    tcp_arg(conn->pcb.tcp, NULL);
 203ae4c:	e0bfff17 	ldw	r2,-4(fp)
 203ae50:	10800217 	ldw	r2,8(r2)
 203ae54:	000b883a 	mov	r5,zero
 203ae58:	1009883a 	mov	r4,r2
 203ae5c:	201d7f80 	call	201d7f8 <tcp_arg>
  }
  if (conn->pcb.tcp->state == LISTEN) {
 203ae60:	e0bfff17 	ldw	r2,-4(fp)
 203ae64:	10800217 	ldw	r2,8(r2)
 203ae68:	10800617 	ldw	r2,24(r2)
 203ae6c:	10800058 	cmpnei	r2,r2,1
 203ae70:	1000061e 	bne	r2,zero,203ae8c <do_close_internal+0x90>
    tcp_accept(conn->pcb.tcp, NULL);
 203ae74:	e0bfff17 	ldw	r2,-4(fp)
 203ae78:	10800217 	ldw	r2,8(r2)
 203ae7c:	000b883a 	mov	r5,zero
 203ae80:	1009883a 	mov	r4,r2
 203ae84:	201d8c80 	call	201d8c8 <tcp_accept>
 203ae88:	00002006 	br	203af0c <do_close_internal+0x110>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 203ae8c:	e0bffd83 	ldbu	r2,-10(fp)
 203ae90:	10000a26 	beq	r2,zero,203aebc <do_close_internal+0xc0>
      tcp_recv(conn->pcb.tcp, NULL);
 203ae94:	e0bfff17 	ldw	r2,-4(fp)
 203ae98:	10800217 	ldw	r2,8(r2)
 203ae9c:	000b883a 	mov	r5,zero
 203aea0:	1009883a 	mov	r4,r2
 203aea4:	201d82c0 	call	201d82c <tcp_recv>
      tcp_accept(conn->pcb.tcp, NULL);
 203aea8:	e0bfff17 	ldw	r2,-4(fp)
 203aeac:	10800217 	ldw	r2,8(r2)
 203aeb0:	000b883a 	mov	r5,zero
 203aeb4:	1009883a 	mov	r4,r2
 203aeb8:	201d8c80 	call	201d8c8 <tcp_accept>
    }
    if (shut_tx) {
 203aebc:	e0bffdc3 	ldbu	r2,-9(fp)
 203aec0:	10000526 	beq	r2,zero,203aed8 <do_close_internal+0xdc>
      tcp_sent(conn->pcb.tcp, NULL);
 203aec4:	e0bfff17 	ldw	r2,-4(fp)
 203aec8:	10800217 	ldw	r2,8(r2)
 203aecc:	000b883a 	mov	r5,zero
 203aed0:	1009883a 	mov	r4,r2
 203aed4:	201d8600 	call	201d860 <tcp_sent>
    }
    if (close) {
 203aed8:	e0bffe03 	ldbu	r2,-8(fp)
 203aedc:	10000b26 	beq	r2,zero,203af0c <do_close_internal+0x110>
      tcp_poll(conn->pcb.tcp, NULL, 4);
 203aee0:	e0bfff17 	ldw	r2,-4(fp)
 203aee4:	10800217 	ldw	r2,8(r2)
 203aee8:	01800104 	movi	r6,4
 203aeec:	000b883a 	mov	r5,zero
 203aef0:	1009883a 	mov	r4,r2
 203aef4:	201d8fc0 	call	201d8fc <tcp_poll>
      tcp_err(conn->pcb.tcp, NULL);
 203aef8:	e0bfff17 	ldw	r2,-4(fp)
 203aefc:	10800217 	ldw	r2,8(r2)
 203af00:	000b883a 	mov	r5,zero
 203af04:	1009883a 	mov	r4,r2
 203af08:	201d8940 	call	201d894 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 203af0c:	e0bffe03 	ldbu	r2,-8(fp)
 203af10:	10000626 	beq	r2,zero,203af2c <do_close_internal+0x130>
    err = tcp_close(conn->pcb.tcp);
 203af14:	e0bfff17 	ldw	r2,-4(fp)
 203af18:	10800217 	ldw	r2,8(r2)
 203af1c:	1009883a 	mov	r4,r2
 203af20:	201bbc00 	call	201bbc0 <tcp_close>
 203af24:	e0bffd05 	stb	r2,-12(fp)
 203af28:	00000906 	br	203af50 <do_close_internal+0x154>
  } else {
    err = tcp_shutdown(conn->pcb.tcp, shut_rx, shut_tx);
 203af2c:	e0bfff17 	ldw	r2,-4(fp)
 203af30:	10800217 	ldw	r2,8(r2)
 203af34:	e0fffd83 	ldbu	r3,-10(fp)
 203af38:	e13ffdc3 	ldbu	r4,-9(fp)
 203af3c:	200d883a 	mov	r6,r4
 203af40:	180b883a 	mov	r5,r3
 203af44:	1009883a 	mov	r4,r2
 203af48:	201bc1c0 	call	201bc1c <tcp_shutdown>
 203af4c:	e0bffd05 	stb	r2,-12(fp)
  }
  if (err == ERR_OK) {
 203af50:	e0bffd07 	ldb	r2,-12(fp)
 203af54:	10002f1e 	bne	r2,zero,203b014 <do_close_internal+0x218>
    /* Closing succeeded */
    conn->current_msg->err = ERR_OK;
 203af58:	e0bfff17 	ldw	r2,-4(fp)
 203af5c:	10800b17 	ldw	r2,44(r2)
 203af60:	10000105 	stb	zero,4(r2)
    conn->current_msg = NULL;
 203af64:	e0bfff17 	ldw	r2,-4(fp)
 203af68:	10000b15 	stw	zero,44(r2)
    conn->state = NETCONN_NONE;
 203af6c:	e0bfff17 	ldw	r2,-4(fp)
 203af70:	10000115 	stw	zero,4(r2)
    if (close) {
 203af74:	e0bffe03 	ldbu	r2,-8(fp)
 203af78:	10000b26 	beq	r2,zero,203afa8 <do_close_internal+0x1ac>
      /* Set back some callback pointers as conn is going away */
      conn->pcb.tcp = NULL;
 203af7c:	e0bfff17 	ldw	r2,-4(fp)
 203af80:	10000215 	stw	zero,8(r2)
      /* Trigger select() in socket layer. Make sure everybody notices activity
       on the connection, error first! */
      API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 203af84:	e0bfff17 	ldw	r2,-4(fp)
 203af88:	10800c17 	ldw	r2,48(r2)
 203af8c:	10000626 	beq	r2,zero,203afa8 <do_close_internal+0x1ac>
 203af90:	e0bfff17 	ldw	r2,-4(fp)
 203af94:	10800c17 	ldw	r2,48(r2)
 203af98:	000d883a 	mov	r6,zero
 203af9c:	01400104 	movi	r5,4
 203afa0:	e13fff17 	ldw	r4,-4(fp)
 203afa4:	103ee83a 	callr	r2
    }
    if (shut_rx) {
 203afa8:	e0bffd83 	ldbu	r2,-10(fp)
 203afac:	10000926 	beq	r2,zero,203afd4 <do_close_internal+0x1d8>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 203afb0:	e0bfff17 	ldw	r2,-4(fp)
 203afb4:	10800c17 	ldw	r2,48(r2)
 203afb8:	10000626 	beq	r2,zero,203afd4 <do_close_internal+0x1d8>
 203afbc:	e0bfff17 	ldw	r2,-4(fp)
 203afc0:	10800c17 	ldw	r2,48(r2)
 203afc4:	000d883a 	mov	r6,zero
 203afc8:	000b883a 	mov	r5,zero
 203afcc:	e13fff17 	ldw	r4,-4(fp)
 203afd0:	103ee83a 	callr	r2
    }
    if (shut_tx) {
 203afd4:	e0bffdc3 	ldbu	r2,-9(fp)
 203afd8:	10000926 	beq	r2,zero,203b000 <do_close_internal+0x204>
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 203afdc:	e0bfff17 	ldw	r2,-4(fp)
 203afe0:	10800c17 	ldw	r2,48(r2)
 203afe4:	10000626 	beq	r2,zero,203b000 <do_close_internal+0x204>
 203afe8:	e0bfff17 	ldw	r2,-4(fp)
 203afec:	10800c17 	ldw	r2,48(r2)
 203aff0:	000d883a 	mov	r6,zero
 203aff4:	01400084 	movi	r5,2
 203aff8:	e13fff17 	ldw	r4,-4(fp)
 203affc:	103ee83a 	callr	r2
    }
    /* wake up the application task */
    sys_sem_signal(&conn->op_completed);
 203b000:	e0bfff17 	ldw	r2,-4(fp)
 203b004:	10800404 	addi	r2,r2,16
 203b008:	1009883a 	mov	r4,r2
 203b00c:	2014df00 	call	2014df0 <sys_sem_signal>
    tcp_arg(conn->pcb.tcp, conn);
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
}
 203b010:	00001806 	br	203b074 <do_close_internal+0x278>
    sys_sem_signal(&conn->op_completed);
  } else {
    /* Closing failed, restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (conn->pcb.tcp->state != LISTEN));
    tcp_sent(conn->pcb.tcp, sent_tcp);
 203b014:	e0bfff17 	ldw	r2,-4(fp)
 203b018:	10800217 	ldw	r2,8(r2)
 203b01c:	01408134 	movhi	r5,516
 203b020:	29691804 	addi	r5,r5,-23456
 203b024:	1009883a 	mov	r4,r2
 203b028:	201d8600 	call	201d860 <tcp_sent>
    tcp_poll(conn->pcb.tcp, poll_tcp, 4);
 203b02c:	e0bfff17 	ldw	r2,-4(fp)
 203b030:	10800217 	ldw	r2,8(r2)
 203b034:	01800104 	movi	r6,4
 203b038:	01408134 	movhi	r5,516
 203b03c:	2968d904 	addi	r5,r5,-23708
 203b040:	1009883a 	mov	r4,r2
 203b044:	201d8fc0 	call	201d8fc <tcp_poll>
    tcp_err(conn->pcb.tcp, err_tcp);
 203b048:	e0bfff17 	ldw	r2,-4(fp)
 203b04c:	10800217 	ldw	r2,8(r2)
 203b050:	01408134 	movhi	r5,516
 203b054:	29695704 	addi	r5,r5,-23204
 203b058:	1009883a 	mov	r4,r2
 203b05c:	201d8940 	call	201d894 <tcp_err>
    tcp_arg(conn->pcb.tcp, conn);
 203b060:	e0bfff17 	ldw	r2,-4(fp)
 203b064:	10800217 	ldw	r2,8(r2)
 203b068:	e17fff17 	ldw	r5,-4(fp)
 203b06c:	1009883a 	mov	r4,r2
 203b070:	201d7f80 	call	201d7f8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
}
 203b074:	0001883a 	nop
 203b078:	e037883a 	mov	sp,fp
 203b07c:	dfc00117 	ldw	ra,4(sp)
 203b080:	df000017 	ldw	fp,0(sp)
 203b084:	dec00204 	addi	sp,sp,8
 203b088:	f800283a 	ret

0203b08c <do_delconn>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_delconn(struct api_msg_msg *msg)
{
 203b08c:	defffd04 	addi	sp,sp,-12
 203b090:	dfc00215 	stw	ra,8(sp)
 203b094:	df000115 	stw	fp,4(sp)
 203b098:	df000104 	addi	fp,sp,4
 203b09c:	e13fff15 	stw	r4,-4(fp)
  /* @todo TCP: abort running write/connect? */
 if ((msg->conn->state != NETCONN_NONE) &&
 203b0a0:	e0bfff17 	ldw	r2,-4(fp)
 203b0a4:	10800017 	ldw	r2,0(r2)
 203b0a8:	10800117 	ldw	r2,4(r2)
 203b0ac:	10000e26 	beq	r2,zero,203b0e8 <do_delconn+0x5c>
     (msg->conn->state != NETCONN_LISTEN) &&
 203b0b0:	e0bfff17 	ldw	r2,-4(fp)
 203b0b4:	10800017 	ldw	r2,0(r2)
 203b0b8:	10800117 	ldw	r2,4(r2)
 */
void
do_delconn(struct api_msg_msg *msg)
{
  /* @todo TCP: abort running write/connect? */
 if ((msg->conn->state != NETCONN_NONE) &&
 203b0bc:	108000a0 	cmpeqi	r2,r2,2
 203b0c0:	1000091e 	bne	r2,zero,203b0e8 <do_delconn+0x5c>
     (msg->conn->state != NETCONN_LISTEN) &&
     (msg->conn->state != NETCONN_CONNECT)) {
 203b0c4:	e0bfff17 	ldw	r2,-4(fp)
 203b0c8:	10800017 	ldw	r2,0(r2)
 203b0cc:	10800117 	ldw	r2,4(r2)
void
do_delconn(struct api_msg_msg *msg)
{
  /* @todo TCP: abort running write/connect? */
 if ((msg->conn->state != NETCONN_NONE) &&
     (msg->conn->state != NETCONN_LISTEN) &&
 203b0d0:	108000e0 	cmpeqi	r2,r2,3
 203b0d4:	1000041e 	bne	r2,zero,203b0e8 <do_delconn+0x5c>
     (msg->conn->state != NETCONN_CONNECT)) {
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
    msg->err = ERR_INPROGRESS;
 203b0d8:	e0bfff17 	ldw	r2,-4(fp)
 203b0dc:	00fffec4 	movi	r3,-5
 203b0e0:	10c00105 	stb	r3,4(r2)
 203b0e4:	00005006 	br	203b228 <do_delconn+0x19c>
  } else {
    LWIP_ASSERT("blocking connect in progress",
      (msg->conn->state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 203b0e8:	e0bfff17 	ldw	r2,-4(fp)
 203b0ec:	10800017 	ldw	r2,0(r2)
 203b0f0:	1009883a 	mov	r4,r2
 203b0f4:	203ac800 	call	203ac80 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 203b0f8:	e0bfff17 	ldw	r2,-4(fp)
 203b0fc:	10800017 	ldw	r2,0(r2)
 203b100:	10800217 	ldw	r2,8(r2)
 203b104:	10002e26 	beq	r2,zero,203b1c0 <do_delconn+0x134>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 203b108:	e0bfff17 	ldw	r2,-4(fp)
 203b10c:	10800017 	ldw	r2,0(r2)
 203b110:	10800017 	ldw	r2,0(r2)
 203b114:	10803c0c 	andi	r2,r2,240
 203b118:	10c00820 	cmpeqi	r3,r2,32
 203b11c:	18000b1e 	bne	r3,zero,203b14c <do_delconn+0xc0>
 203b120:	10c01020 	cmpeqi	r3,r2,64
 203b124:	1800031e 	bne	r3,zero,203b134 <do_delconn+0xa8>
 203b128:	10800420 	cmpeqi	r2,r2,16
 203b12c:	1000111e 	bne	r2,zero,203b174 <do_delconn+0xe8>
        /* API_EVENT is called inside do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 203b130:	00002006 	br	203b1b4 <do_delconn+0x128>
    if (msg->conn->pcb.tcp != NULL) {

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
      case NETCONN_RAW:
        raw_remove(msg->conn->pcb.raw);
 203b134:	e0bfff17 	ldw	r2,-4(fp)
 203b138:	10800017 	ldw	r2,0(r2)
 203b13c:	10800217 	ldw	r2,8(r2)
 203b140:	1009883a 	mov	r4,r2
 203b144:	20349600 	call	2034960 <raw_remove>
        break;
 203b148:	00001a06 	br	203b1b4 <do_delconn+0x128>
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->pcb.udp->recv_arg = NULL;
 203b14c:	e0bfff17 	ldw	r2,-4(fp)
 203b150:	10800017 	ldw	r2,0(r2)
 203b154:	10800217 	ldw	r2,8(r2)
 203b158:	10000715 	stw	zero,28(r2)
        udp_remove(msg->conn->pcb.udp);
 203b15c:	e0bfff17 	ldw	r2,-4(fp)
 203b160:	10800017 	ldw	r2,0(r2)
 203b164:	10800217 	ldw	r2,8(r2)
 203b168:	1009883a 	mov	r4,r2
 203b16c:	20229340 	call	2022934 <udp_remove>
        break;
 203b170:	00001006 	br	203b1b4 <do_delconn+0x128>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
          msg->conn->write_offset == 0);
        msg->conn->state = NETCONN_CLOSE;
 203b174:	e0bfff17 	ldw	r2,-4(fp)
 203b178:	10800017 	ldw	r2,0(r2)
 203b17c:	00c00104 	movi	r3,4
 203b180:	10c00115 	stw	r3,4(r2)
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 203b184:	e0bfff17 	ldw	r2,-4(fp)
 203b188:	00c000c4 	movi	r3,3
 203b18c:	10c00205 	stb	r3,8(r2)
        msg->conn->current_msg = msg;
 203b190:	e0bfff17 	ldw	r2,-4(fp)
 203b194:	10800017 	ldw	r2,0(r2)
 203b198:	e0ffff17 	ldw	r3,-4(fp)
 203b19c:	10c00b15 	stw	r3,44(r2)
        do_close_internal(msg->conn);
 203b1a0:	e0bfff17 	ldw	r2,-4(fp)
 203b1a4:	10800017 	ldw	r2,0(r2)
 203b1a8:	1009883a 	mov	r4,r2
 203b1ac:	203adfc0 	call	203adfc <do_close_internal>
        /* API_EVENT is called inside do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
 203b1b0:	00002606 	br	203b24c <do_delconn+0x1c0>
#endif /* LWIP_TCP */
      default:
        break;
      }
      msg->conn->pcb.tcp = NULL;
 203b1b4:	e0bfff17 	ldw	r2,-4(fp)
 203b1b8:	10800017 	ldw	r2,0(r2)
 203b1bc:	10000215 	stw	zero,8(r2)
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 203b1c0:	e0bfff17 	ldw	r2,-4(fp)
 203b1c4:	10800017 	ldw	r2,0(r2)
 203b1c8:	10800c17 	ldw	r2,48(r2)
 203b1cc:	10000926 	beq	r2,zero,203b1f4 <do_delconn+0x168>
 203b1d0:	e0bfff17 	ldw	r2,-4(fp)
 203b1d4:	10800017 	ldw	r2,0(r2)
 203b1d8:	10800c17 	ldw	r2,48(r2)
 203b1dc:	e0ffff17 	ldw	r3,-4(fp)
 203b1e0:	18c00017 	ldw	r3,0(r3)
 203b1e4:	000d883a 	mov	r6,zero
 203b1e8:	000b883a 	mov	r5,zero
 203b1ec:	1809883a 	mov	r4,r3
 203b1f0:	103ee83a 	callr	r2
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 203b1f4:	e0bfff17 	ldw	r2,-4(fp)
 203b1f8:	10800017 	ldw	r2,0(r2)
 203b1fc:	10800c17 	ldw	r2,48(r2)
 203b200:	10000926 	beq	r2,zero,203b228 <do_delconn+0x19c>
 203b204:	e0bfff17 	ldw	r2,-4(fp)
 203b208:	10800017 	ldw	r2,0(r2)
 203b20c:	10800c17 	ldw	r2,48(r2)
 203b210:	e0ffff17 	ldw	r3,-4(fp)
 203b214:	18c00017 	ldw	r3,0(r3)
 203b218:	000d883a 	mov	r6,zero
 203b21c:	01400084 	movi	r5,2
 203b220:	1809883a 	mov	r4,r3
 203b224:	103ee83a 	callr	r2
  }
  if (sys_sem_valid(&msg->conn->op_completed)) {
 203b228:	e0bfff17 	ldw	r2,-4(fp)
 203b22c:	10800017 	ldw	r2,0(r2)
 203b230:	10800417 	ldw	r2,16(r2)
 203b234:	10000526 	beq	r2,zero,203b24c <do_delconn+0x1c0>
    sys_sem_signal(&msg->conn->op_completed);
 203b238:	e0bfff17 	ldw	r2,-4(fp)
 203b23c:	10800017 	ldw	r2,0(r2)
 203b240:	10800404 	addi	r2,r2,16
 203b244:	1009883a 	mov	r4,r2
 203b248:	2014df00 	call	2014df0 <sys_sem_signal>
  }
}
 203b24c:	e037883a 	mov	sp,fp
 203b250:	dfc00117 	ldw	ra,4(sp)
 203b254:	df000017 	ldw	fp,0(sp)
 203b258:	dec00204 	addi	sp,sp,8
 203b25c:	f800283a 	ret

0203b260 <do_bind>:
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to bind to
 */
void
do_bind(struct api_msg_msg *msg)
{
 203b260:	defffd04 	addi	sp,sp,-12
 203b264:	dfc00215 	stw	ra,8(sp)
 203b268:	df000115 	stw	fp,4(sp)
 203b26c:	df000104 	addi	fp,sp,4
 203b270:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 203b274:	e0bfff17 	ldw	r2,-4(fp)
 203b278:	10800017 	ldw	r2,0(r2)
 203b27c:	10800303 	ldbu	r2,12(r2)
 203b280:	10803fcc 	andi	r2,r2,255
 203b284:	1080201c 	xori	r2,r2,128
 203b288:	10bfe004 	addi	r2,r2,-128
 203b28c:	10bffdc8 	cmpgei	r2,r2,-9
 203b290:	1000061e 	bne	r2,zero,203b2ac <do_bind+0x4c>
    msg->err = msg->conn->last_err;
 203b294:	e0bfff17 	ldw	r2,-4(fp)
 203b298:	10800017 	ldw	r2,0(r2)
 203b29c:	10c00303 	ldbu	r3,12(r2)
 203b2a0:	e0bfff17 	ldw	r2,-4(fp)
 203b2a4:	10c00105 	stb	r3,4(r2)
 203b2a8:	00003e06 	br	203b3a4 <do_bind+0x144>
  } else {
    msg->err = ERR_VAL;
 203b2ac:	e0bfff17 	ldw	r2,-4(fp)
 203b2b0:	00fffe84 	movi	r3,-6
 203b2b4:	10c00105 	stb	r3,4(r2)
    if (msg->conn->pcb.tcp != NULL) {
 203b2b8:	e0bfff17 	ldw	r2,-4(fp)
 203b2bc:	10800017 	ldw	r2,0(r2)
 203b2c0:	10800217 	ldw	r2,8(r2)
 203b2c4:	10003726 	beq	r2,zero,203b3a4 <do_bind+0x144>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 203b2c8:	e0bfff17 	ldw	r2,-4(fp)
 203b2cc:	10800017 	ldw	r2,0(r2)
 203b2d0:	10800017 	ldw	r2,0(r2)
 203b2d4:	10803c0c 	andi	r2,r2,240
 203b2d8:	10c00820 	cmpeqi	r3,r2,32
 203b2dc:	1800111e 	bne	r3,zero,203b324 <do_bind+0xc4>
 203b2e0:	10c01020 	cmpeqi	r3,r2,64
 203b2e4:	1800031e 	bne	r3,zero,203b2f4 <do_bind+0x94>
 203b2e8:	10800420 	cmpeqi	r2,r2,16
 203b2ec:	10001d1e 	bne	r2,zero,203b364 <do_bind+0x104>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, msg->msg.bc.ipaddr, msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 203b2f0:	00002c06 	br	203b3a4 <do_bind+0x144>
    msg->err = ERR_VAL;
    if (msg->conn->pcb.tcp != NULL) {
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
      case NETCONN_RAW:
        msg->err = raw_bind(msg->conn->pcb.raw, msg->msg.bc.ipaddr);
 203b2f4:	e0bfff17 	ldw	r2,-4(fp)
 203b2f8:	10800017 	ldw	r2,0(r2)
 203b2fc:	10c00217 	ldw	r3,8(r2)
 203b300:	e0bfff17 	ldw	r2,-4(fp)
 203b304:	10800217 	ldw	r2,8(r2)
 203b308:	100b883a 	mov	r5,r2
 203b30c:	1809883a 	mov	r4,r3
 203b310:	20346c00 	call	20346c0 <raw_bind>
 203b314:	1007883a 	mov	r3,r2
 203b318:	e0bfff17 	ldw	r2,-4(fp)
 203b31c:	10c00105 	stb	r3,4(r2)
        break;
 203b320:	00002006 	br	203b3a4 <do_bind+0x144>
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->err = udp_bind(msg->conn->pcb.udp, msg->msg.bc.ipaddr, msg->msg.bc.port);
 203b324:	e0bfff17 	ldw	r2,-4(fp)
 203b328:	10800017 	ldw	r2,0(r2)
 203b32c:	10c00217 	ldw	r3,8(r2)
 203b330:	e0bfff17 	ldw	r2,-4(fp)
 203b334:	11000217 	ldw	r4,8(r2)
 203b338:	e0bfff17 	ldw	r2,-4(fp)
 203b33c:	1080030b 	ldhu	r2,12(r2)
 203b340:	10bfffcc 	andi	r2,r2,65535
 203b344:	100d883a 	mov	r6,r2
 203b348:	200b883a 	mov	r5,r4
 203b34c:	1809883a 	mov	r4,r3
 203b350:	202263c0 	call	202263c <udp_bind>
 203b354:	1007883a 	mov	r3,r2
 203b358:	e0bfff17 	ldw	r2,-4(fp)
 203b35c:	10c00105 	stb	r3,4(r2)
        break;
 203b360:	00001006 	br	203b3a4 <do_bind+0x144>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, msg->msg.bc.ipaddr, msg->msg.bc.port);
 203b364:	e0bfff17 	ldw	r2,-4(fp)
 203b368:	10800017 	ldw	r2,0(r2)
 203b36c:	10c00217 	ldw	r3,8(r2)
 203b370:	e0bfff17 	ldw	r2,-4(fp)
 203b374:	11000217 	ldw	r4,8(r2)
 203b378:	e0bfff17 	ldw	r2,-4(fp)
 203b37c:	1080030b 	ldhu	r2,12(r2)
 203b380:	10bfffcc 	andi	r2,r2,65535
 203b384:	100d883a 	mov	r6,r2
 203b388:	200b883a 	mov	r5,r4
 203b38c:	1809883a 	mov	r4,r3
 203b390:	201bea40 	call	201bea4 <tcp_bind>
 203b394:	1007883a 	mov	r3,r2
 203b398:	e0bfff17 	ldw	r2,-4(fp)
 203b39c:	10c00105 	stb	r3,4(r2)
        break;
 203b3a0:	0001883a 	nop
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 203b3a4:	e0bfff17 	ldw	r2,-4(fp)
 203b3a8:	10800017 	ldw	r2,0(r2)
 203b3ac:	10800404 	addi	r2,r2,16
 203b3b0:	1009883a 	mov	r4,r2
 203b3b4:	2014df00 	call	2014df0 <sys_sem_signal>
}
 203b3b8:	0001883a 	nop
 203b3bc:	e037883a 	mov	sp,fp
 203b3c0:	dfc00117 	ldw	ra,4(sp)
 203b3c4:	df000017 	ldw	fp,0(sp)
 203b3c8:	dec00204 	addi	sp,sp,8
 203b3cc:	f800283a 	ret

0203b3d0 <do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 203b3d0:	defff904 	addi	sp,sp,-28
 203b3d4:	dfc00615 	stw	ra,24(sp)
 203b3d8:	df000515 	stw	fp,20(sp)
 203b3dc:	df000504 	addi	fp,sp,20
 203b3e0:	e13ffd15 	stw	r4,-12(fp)
 203b3e4:	e17ffe15 	stw	r5,-8(fp)
 203b3e8:	3005883a 	mov	r2,r6
 203b3ec:	e0bfff05 	stb	r2,-4(fp)
  struct netconn *conn;
  int was_blocking;

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 203b3f0:	e0bffd17 	ldw	r2,-12(fp)
 203b3f4:	e0bffb15 	stw	r2,-20(fp)

  if (conn == NULL) {
 203b3f8:	e0bffb17 	ldw	r2,-20(fp)
 203b3fc:	1000021e 	bne	r2,zero,203b408 <do_connected+0x38>
    return ERR_VAL;
 203b400:	00bffe84 	movi	r2,-6
 203b404:	00004206 	br	203b510 <do_connected+0x140>

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 203b408:	e0bffb17 	ldw	r2,-20(fp)
 203b40c:	10800b17 	ldw	r2,44(r2)
 203b410:	10000426 	beq	r2,zero,203b424 <do_connected+0x54>
    conn->current_msg->err = err;
 203b414:	e0bffb17 	ldw	r2,-20(fp)
 203b418:	10800b17 	ldw	r2,44(r2)
 203b41c:	e0ffff03 	ldbu	r3,-4(fp)
 203b420:	10c00105 	stb	r3,4(r2)
  }
  if ((conn->type == NETCONN_TCP) && (err == ERR_OK)) {
 203b424:	e0bffb17 	ldw	r2,-20(fp)
 203b428:	10800017 	ldw	r2,0(r2)
 203b42c:	10800418 	cmpnei	r2,r2,16
 203b430:	1000041e 	bne	r2,zero,203b444 <do_connected+0x74>
 203b434:	e0bfff07 	ldb	r2,-4(fp)
 203b438:	1000021e 	bne	r2,zero,203b444 <do_connected+0x74>
    setup_tcp(conn);
 203b43c:	e13ffb17 	ldw	r4,-20(fp)
 203b440:	203a7100 	call	203a710 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 203b444:	e0bffb17 	ldw	r2,-20(fp)
 203b448:	10800903 	ldbu	r2,36(r2)
 203b44c:	10803fcc 	andi	r2,r2,255
 203b450:	1080010c 	andi	r2,r2,4
 203b454:	1005003a 	cmpeq	r2,r2,zero
 203b458:	10803fcc 	andi	r2,r2,255
 203b45c:	e0bffc15 	stw	r2,-16(fp)
  SET_NONBLOCKING_CONNECT(conn, 0);
 203b460:	e0bffb17 	ldw	r2,-20(fp)
 203b464:	10c00903 	ldbu	r3,36(r2)
 203b468:	00bffec4 	movi	r2,-5
 203b46c:	1884703a 	and	r2,r3,r2
 203b470:	1007883a 	mov	r3,r2
 203b474:	e0bffb17 	ldw	r2,-20(fp)
 203b478:	10c00905 	stb	r3,36(r2)
  conn->current_msg = NULL;
 203b47c:	e0bffb17 	ldw	r2,-20(fp)
 203b480:	10000b15 	stw	zero,44(r2)
  conn->state = NETCONN_NONE;
 203b484:	e0bffb17 	ldw	r2,-20(fp)
 203b488:	10000115 	stw	zero,4(r2)
  if (!was_blocking) {
 203b48c:	e0bffc17 	ldw	r2,-16(fp)
 203b490:	10000f1e 	bne	r2,zero,203b4d0 <do_connected+0x100>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 203b494:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 203b498:	10000126 	beq	r2,zero,203b4a0 <do_connected+0xd0>
 203b49c:	2010de80 	call	2010de8 <vTaskEnterCritical>
 203b4a0:	e0bffb17 	ldw	r2,-20(fp)
 203b4a4:	10800303 	ldbu	r2,12(r2)
 203b4a8:	10803fcc 	andi	r2,r2,255
 203b4ac:	1080201c 	xori	r2,r2,128
 203b4b0:	10bfe004 	addi	r2,r2,-128
 203b4b4:	10bffdd0 	cmplti	r2,r2,-9
 203b4b8:	1000021e 	bne	r2,zero,203b4c4 <do_connected+0xf4>
 203b4bc:	e0bffb17 	ldw	r2,-20(fp)
 203b4c0:	10000305 	stb	zero,12(r2)
 203b4c4:	2010a200 	call	2010a20 <xTaskGetSchedulerState>
 203b4c8:	10000126 	beq	r2,zero,203b4d0 <do_connected+0x100>
 203b4cc:	2010e300 	call	2010e30 <vTaskExitCritical>
  }
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 203b4d0:	e0bffb17 	ldw	r2,-20(fp)
 203b4d4:	10800c17 	ldw	r2,48(r2)
 203b4d8:	10000626 	beq	r2,zero,203b4f4 <do_connected+0x124>
 203b4dc:	e0bffb17 	ldw	r2,-20(fp)
 203b4e0:	10800c17 	ldw	r2,48(r2)
 203b4e4:	000d883a 	mov	r6,zero
 203b4e8:	01400084 	movi	r5,2
 203b4ec:	e13ffb17 	ldw	r4,-20(fp)
 203b4f0:	103ee83a 	callr	r2

  if (was_blocking) {
 203b4f4:	e0bffc17 	ldw	r2,-16(fp)
 203b4f8:	10000426 	beq	r2,zero,203b50c <do_connected+0x13c>
    sys_sem_signal(&conn->op_completed);
 203b4fc:	e0bffb17 	ldw	r2,-20(fp)
 203b500:	10800404 	addi	r2,r2,16
 203b504:	1009883a 	mov	r4,r2
 203b508:	2014df00 	call	2014df0 <sys_sem_signal>
  }
  return ERR_OK;
 203b50c:	0005883a 	mov	r2,zero
}
 203b510:	e037883a 	mov	sp,fp
 203b514:	dfc00117 	ldw	ra,4(sp)
 203b518:	df000017 	ldw	fp,0(sp)
 203b51c:	dec00204 	addi	sp,sp,8
 203b520:	f800283a 	ret

0203b524 <do_connect>:
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to connect to
 */
void
do_connect(struct api_msg_msg *msg)
{
 203b524:	defffc04 	addi	sp,sp,-16
 203b528:	dfc00315 	stw	ra,12(sp)
 203b52c:	df000215 	stw	fp,8(sp)
 203b530:	df000204 	addi	fp,sp,8
 203b534:	e13fff15 	stw	r4,-4(fp)
  if (msg->conn->pcb.tcp == NULL) {
 203b538:	e0bfff17 	ldw	r2,-4(fp)
 203b53c:	10800017 	ldw	r2,0(r2)
 203b540:	10800217 	ldw	r2,8(r2)
 203b544:	1000041e 	bne	r2,zero,203b558 <do_connect+0x34>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 203b548:	e0bfff17 	ldw	r2,-4(fp)
 203b54c:	00fffd04 	movi	r3,-12
 203b550:	10c00105 	stb	r3,4(r2)
 203b554:	00007c06 	br	203b748 <do_connect+0x224>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 203b558:	e0bfff17 	ldw	r2,-4(fp)
 203b55c:	10800017 	ldw	r2,0(r2)
 203b560:	10800017 	ldw	r2,0(r2)
 203b564:	10803c0c 	andi	r2,r2,240
 203b568:	10c00820 	cmpeqi	r3,r2,32
 203b56c:	1800111e 	bne	r3,zero,203b5b4 <do_connect+0x90>
 203b570:	10c01020 	cmpeqi	r3,r2,64
 203b574:	1800031e 	bne	r3,zero,203b584 <do_connect+0x60>
 203b578:	10800420 	cmpeqi	r2,r2,16
 203b57c:	10001d1e 	bne	r2,zero,203b5f4 <do_connect+0xd0>
 203b580:	00006706 	br	203b720 <do_connect+0x1fc>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->err = raw_connect(msg->conn->pcb.raw, msg->msg.bc.ipaddr);
 203b584:	e0bfff17 	ldw	r2,-4(fp)
 203b588:	10800017 	ldw	r2,0(r2)
 203b58c:	10c00217 	ldw	r3,8(r2)
 203b590:	e0bfff17 	ldw	r2,-4(fp)
 203b594:	10800217 	ldw	r2,8(r2)
 203b598:	100b883a 	mov	r5,r2
 203b59c:	1809883a 	mov	r4,r3
 203b5a0:	20347080 	call	2034708 <raw_connect>
 203b5a4:	1007883a 	mov	r3,r2
 203b5a8:	e0bfff17 	ldw	r2,-4(fp)
 203b5ac:	10c00105 	stb	r3,4(r2)
    break;
 203b5b0:	00006506 	br	203b748 <do_connect+0x224>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->err = udp_connect(msg->conn->pcb.udp, msg->msg.bc.ipaddr, msg->msg.bc.port);
 203b5b4:	e0bfff17 	ldw	r2,-4(fp)
 203b5b8:	10800017 	ldw	r2,0(r2)
 203b5bc:	10c00217 	ldw	r3,8(r2)
 203b5c0:	e0bfff17 	ldw	r2,-4(fp)
 203b5c4:	11000217 	ldw	r4,8(r2)
 203b5c8:	e0bfff17 	ldw	r2,-4(fp)
 203b5cc:	1080030b 	ldhu	r2,12(r2)
 203b5d0:	10bfffcc 	andi	r2,r2,65535
 203b5d4:	100d883a 	mov	r6,r2
 203b5d8:	200b883a 	mov	r5,r4
 203b5dc:	1809883a 	mov	r4,r3
 203b5e0:	20227980 	call	2022798 <udp_connect>
 203b5e4:	1007883a 	mov	r3,r2
 203b5e8:	e0bfff17 	ldw	r2,-4(fp)
 203b5ec:	10c00105 	stb	r3,4(r2)
    break;
 203b5f0:	00005506 	br	203b748 <do_connect+0x224>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    /* Prevent connect while doing any other action. */
    if (msg->conn->state != NETCONN_NONE) {
 203b5f4:	e0bfff17 	ldw	r2,-4(fp)
 203b5f8:	10800017 	ldw	r2,0(r2)
 203b5fc:	10800117 	ldw	r2,4(r2)
 203b600:	10000426 	beq	r2,zero,203b614 <do_connect+0xf0>
      msg->err = ERR_ISCONN;
 203b604:	e0bfff17 	ldw	r2,-4(fp)
 203b608:	00fffdc4 	movi	r3,-9
 203b60c:	10c00105 	stb	r3,4(r2)
          * when the connection is established! */
          return;
        }
      }
    }
    break;
 203b610:	00004c06 	br	203b744 <do_connect+0x220>
  case NETCONN_TCP:
    /* Prevent connect while doing any other action. */
    if (msg->conn->state != NETCONN_NONE) {
      msg->err = ERR_ISCONN;
    } else {
      setup_tcp(msg->conn);
 203b614:	e0bfff17 	ldw	r2,-4(fp)
 203b618:	10800017 	ldw	r2,0(r2)
 203b61c:	1009883a 	mov	r4,r2
 203b620:	203a7100 	call	203a710 <setup_tcp>
      msg->err = tcp_connect(msg->conn->pcb.tcp, msg->msg.bc.ipaddr,
 203b624:	e0bfff17 	ldw	r2,-4(fp)
 203b628:	10800017 	ldw	r2,0(r2)
 203b62c:	10c00217 	ldw	r3,8(r2)
 203b630:	e0bfff17 	ldw	r2,-4(fp)
 203b634:	11000217 	ldw	r4,8(r2)
        msg->msg.bc.port, do_connected);
 203b638:	e0bfff17 	ldw	r2,-4(fp)
 203b63c:	1080030b 	ldhu	r2,12(r2)
    /* Prevent connect while doing any other action. */
    if (msg->conn->state != NETCONN_NONE) {
      msg->err = ERR_ISCONN;
    } else {
      setup_tcp(msg->conn);
      msg->err = tcp_connect(msg->conn->pcb.tcp, msg->msg.bc.ipaddr,
 203b640:	10bfffcc 	andi	r2,r2,65535
 203b644:	01c08134 	movhi	r7,516
 203b648:	39ecf404 	addi	r7,r7,-19504
 203b64c:	100d883a 	mov	r6,r2
 203b650:	200b883a 	mov	r5,r4
 203b654:	1809883a 	mov	r4,r3
 203b658:	201c57c0 	call	201c57c <tcp_connect>
 203b65c:	1007883a 	mov	r3,r2
 203b660:	e0bfff17 	ldw	r2,-4(fp)
 203b664:	10c00105 	stb	r3,4(r2)
        msg->msg.bc.port, do_connected);
      if (msg->err == ERR_OK) {
 203b668:	e0bfff17 	ldw	r2,-4(fp)
 203b66c:	10800103 	ldbu	r2,4(r2)
 203b670:	10803fcc 	andi	r2,r2,255
 203b674:	1080201c 	xori	r2,r2,128
 203b678:	10bfe004 	addi	r2,r2,-128
 203b67c:	1000311e 	bne	r2,zero,203b744 <do_connect+0x220>
        u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 203b680:	e0bfff17 	ldw	r2,-4(fp)
 203b684:	10800017 	ldw	r2,0(r2)
 203b688:	10800903 	ldbu	r2,36(r2)
 203b68c:	10803fcc 	andi	r2,r2,255
 203b690:	1080008c 	andi	r2,r2,2
 203b694:	1004c03a 	cmpne	r2,r2,zero
 203b698:	e0bffe05 	stb	r2,-8(fp)
        msg->conn->state = NETCONN_CONNECT;
 203b69c:	e0bfff17 	ldw	r2,-4(fp)
 203b6a0:	10800017 	ldw	r2,0(r2)
 203b6a4:	00c000c4 	movi	r3,3
 203b6a8:	10c00115 	stw	r3,4(r2)
        SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 203b6ac:	e0bffe03 	ldbu	r2,-8(fp)
 203b6b0:	10000826 	beq	r2,zero,203b6d4 <do_connect+0x1b0>
 203b6b4:	e0bfff17 	ldw	r2,-4(fp)
 203b6b8:	10800017 	ldw	r2,0(r2)
 203b6bc:	e0ffff17 	ldw	r3,-4(fp)
 203b6c0:	18c00017 	ldw	r3,0(r3)
 203b6c4:	18c00903 	ldbu	r3,36(r3)
 203b6c8:	18c00114 	ori	r3,r3,4
 203b6cc:	10c00905 	stb	r3,36(r2)
 203b6d0:	00000806 	br	203b6f4 <do_connect+0x1d0>
 203b6d4:	e0bfff17 	ldw	r2,-4(fp)
 203b6d8:	10800017 	ldw	r2,0(r2)
 203b6dc:	e0ffff17 	ldw	r3,-4(fp)
 203b6e0:	18c00017 	ldw	r3,0(r3)
 203b6e4:	19000903 	ldbu	r4,36(r3)
 203b6e8:	00fffec4 	movi	r3,-5
 203b6ec:	20c6703a 	and	r3,r4,r3
 203b6f0:	10c00905 	stb	r3,36(r2)
        if (non_blocking) {
 203b6f4:	e0bffe03 	ldbu	r2,-8(fp)
 203b6f8:	10000426 	beq	r2,zero,203b70c <do_connect+0x1e8>
          msg->err = ERR_INPROGRESS;
 203b6fc:	e0bfff17 	ldw	r2,-4(fp)
 203b700:	00fffec4 	movi	r3,-5
 203b704:	10c00105 	stb	r3,4(r2)
          * when the connection is established! */
          return;
        }
      }
    }
    break;
 203b708:	00000e06 	br	203b744 <do_connect+0x220>
        msg->conn->state = NETCONN_CONNECT;
        SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
        if (non_blocking) {
          msg->err = ERR_INPROGRESS;
        } else {
          msg->conn->current_msg = msg;
 203b70c:	e0bfff17 	ldw	r2,-4(fp)
 203b710:	10800017 	ldw	r2,0(r2)
 203b714:	e0ffff17 	ldw	r3,-4(fp)
 203b718:	10c00b15 	stw	r3,44(r2)
          /* sys_sem_signal() is called from do_connected (or err_tcp()),
          * when the connection is established! */
          return;
 203b71c:	00000f06 	br	203b75c <do_connect+0x238>
      }
    }
    break;
#endif /* LWIP_TCP */
  default:
    LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 203b720:	01c08134 	movhi	r7,516
 203b724:	39cdec04 	addi	r7,r7,14256
 203b728:	01810144 	movi	r6,1029
 203b72c:	01408134 	movhi	r5,516
 203b730:	294df204 	addi	r5,r5,14280
 203b734:	01008134 	movhi	r4,516
 203b738:	210df804 	addi	r4,r4,14304
 203b73c:	20009e40 	call	20009e4 <printf>
 203b740:	003fff06 	br	203b740 <__alt_mem_mem_0+0xfd01b740>
          * when the connection is established! */
          return;
        }
      }
    }
    break;
 203b744:	0001883a 	nop
  default:
    LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
    break;
    }
  }
  sys_sem_signal(&msg->conn->op_completed);
 203b748:	e0bfff17 	ldw	r2,-4(fp)
 203b74c:	10800017 	ldw	r2,0(r2)
 203b750:	10800404 	addi	r2,r2,16
 203b754:	1009883a 	mov	r4,r2
 203b758:	2014df00 	call	2014df0 <sys_sem_signal>
}
 203b75c:	e037883a 	mov	sp,fp
 203b760:	dfc00117 	ldw	ra,4(sp)
 203b764:	df000017 	ldw	fp,0(sp)
 203b768:	dec00204 	addi	sp,sp,8
 203b76c:	f800283a 	ret

0203b770 <do_disconnect>:
 *
 * @param msg the api_msg_msg pointing to the connection to disconnect
 */
void
do_disconnect(struct api_msg_msg *msg)
{
 203b770:	defffd04 	addi	sp,sp,-12
 203b774:	dfc00215 	stw	ra,8(sp)
 203b778:	df000115 	stw	fp,4(sp)
 203b77c:	df000104 	addi	fp,sp,4
 203b780:	e13fff15 	stw	r4,-4(fp)
#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 203b784:	e0bfff17 	ldw	r2,-4(fp)
 203b788:	10800017 	ldw	r2,0(r2)
 203b78c:	10800017 	ldw	r2,0(r2)
 203b790:	10803c0c 	andi	r2,r2,240
 203b794:	10800818 	cmpnei	r2,r2,32
 203b798:	1000081e 	bne	r2,zero,203b7bc <do_disconnect+0x4c>
    udp_disconnect(msg->conn->pcb.udp);
 203b79c:	e0bfff17 	ldw	r2,-4(fp)
 203b7a0:	10800017 	ldw	r2,0(r2)
 203b7a4:	10800217 	ldw	r2,8(r2)
 203b7a8:	1009883a 	mov	r4,r2
 203b7ac:	20228a00 	call	20228a0 <udp_disconnect>
    msg->err = ERR_OK;
 203b7b0:	e0bfff17 	ldw	r2,-4(fp)
 203b7b4:	10000105 	stb	zero,4(r2)
 203b7b8:	00000306 	br	203b7c8 <do_disconnect+0x58>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
 203b7bc:	e0bfff17 	ldw	r2,-4(fp)
 203b7c0:	00fffe84 	movi	r3,-6
 203b7c4:	10c00105 	stb	r3,4(r2)
  }
  TCPIP_APIMSG_ACK(msg);
 203b7c8:	e0bfff17 	ldw	r2,-4(fp)
 203b7cc:	10800017 	ldw	r2,0(r2)
 203b7d0:	10800404 	addi	r2,r2,16
 203b7d4:	1009883a 	mov	r4,r2
 203b7d8:	2014df00 	call	2014df0 <sys_sem_signal>
}
 203b7dc:	0001883a 	nop
 203b7e0:	e037883a 	mov	sp,fp
 203b7e4:	dfc00117 	ldw	ra,4(sp)
 203b7e8:	df000017 	ldw	fp,0(sp)
 203b7ec:	dec00204 	addi	sp,sp,8
 203b7f0:	f800283a 	ret

0203b7f4 <do_listen>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_listen(struct api_msg_msg *msg)
{
 203b7f4:	defffc04 	addi	sp,sp,-16
 203b7f8:	dfc00315 	stw	ra,12(sp)
 203b7fc:	df000215 	stw	fp,8(sp)
 203b800:	df000204 	addi	fp,sp,8
 203b804:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 203b808:	e0bfff17 	ldw	r2,-4(fp)
 203b80c:	10800017 	ldw	r2,0(r2)
 203b810:	10800303 	ldbu	r2,12(r2)
 203b814:	10803fcc 	andi	r2,r2,255
 203b818:	1080201c 	xori	r2,r2,128
 203b81c:	10bfe004 	addi	r2,r2,-128
 203b820:	10bffdc8 	cmpgei	r2,r2,-9
 203b824:	1000061e 	bne	r2,zero,203b840 <do_listen+0x4c>
    msg->err = msg->conn->last_err;
 203b828:	e0bfff17 	ldw	r2,-4(fp)
 203b82c:	10800017 	ldw	r2,0(r2)
 203b830:	10c00303 	ldbu	r3,12(r2)
 203b834:	e0bfff17 	ldw	r2,-4(fp)
 203b838:	10c00105 	stb	r3,4(r2)
 203b83c:	00006206 	br	203b9c8 <do_listen+0x1d4>
  } else {
    msg->err = ERR_CONN;
 203b840:	e0bfff17 	ldw	r2,-4(fp)
 203b844:	00fffcc4 	movi	r3,-13
 203b848:	10c00105 	stb	r3,4(r2)
    if (msg->conn->pcb.tcp != NULL) {
 203b84c:	e0bfff17 	ldw	r2,-4(fp)
 203b850:	10800017 	ldw	r2,0(r2)
 203b854:	10800217 	ldw	r2,8(r2)
 203b858:	10005b26 	beq	r2,zero,203b9c8 <do_listen+0x1d4>
      if (msg->conn->type == NETCONN_TCP) {
 203b85c:	e0bfff17 	ldw	r2,-4(fp)
 203b860:	10800017 	ldw	r2,0(r2)
 203b864:	10800017 	ldw	r2,0(r2)
 203b868:	10800418 	cmpnei	r2,r2,16
 203b86c:	1000531e 	bne	r2,zero,203b9bc <do_listen+0x1c8>
        if (msg->conn->state == NETCONN_NONE) {
 203b870:	e0bfff17 	ldw	r2,-4(fp)
 203b874:	10800017 	ldw	r2,0(r2)
 203b878:	10800117 	ldw	r2,4(r2)
 203b87c:	1000521e 	bne	r2,zero,203b9c8 <do_listen+0x1d4>
#if TCP_LISTEN_BACKLOG
          struct tcp_pcb* lpcb = tcp_listen_with_backlog(msg->conn->pcb.tcp, msg->msg.lb.backlog);
 203b880:	e0bfff17 	ldw	r2,-4(fp)
 203b884:	10800017 	ldw	r2,0(r2)
 203b888:	10c00217 	ldw	r3,8(r2)
 203b88c:	e0bfff17 	ldw	r2,-4(fp)
 203b890:	10800203 	ldbu	r2,8(r2)
 203b894:	10803fcc 	andi	r2,r2,255
 203b898:	100b883a 	mov	r5,r2
 203b89c:	1809883a 	mov	r4,r3
 203b8a0:	201c0a40 	call	201c0a4 <tcp_listen_with_backlog>
 203b8a4:	e0bffe15 	stw	r2,-8(fp)
#else  /* TCP_LISTEN_BACKLOG */
          struct tcp_pcb* lpcb = tcp_listen(msg->conn->pcb.tcp);
#endif /* TCP_LISTEN_BACKLOG */
          if (lpcb == NULL) {
 203b8a8:	e0bffe17 	ldw	r2,-8(fp)
 203b8ac:	1000041e 	bne	r2,zero,203b8c0 <do_listen+0xcc>
            /* in this case, the old pcb is still allocated */
            msg->err = ERR_MEM;
 203b8b0:	e0bfff17 	ldw	r2,-4(fp)
 203b8b4:	00ffffc4 	movi	r3,-1
 203b8b8:	10c00105 	stb	r3,4(r2)
 203b8bc:	00004206 	br	203b9c8 <do_listen+0x1d4>
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 203b8c0:	e0bfff17 	ldw	r2,-4(fp)
 203b8c4:	10800017 	ldw	r2,0(r2)
 203b8c8:	10800517 	ldw	r2,20(r2)
 203b8cc:	10000826 	beq	r2,zero,203b8f0 <do_listen+0xfc>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 203b8d0:	e0bfff17 	ldw	r2,-4(fp)
 203b8d4:	10800017 	ldw	r2,0(r2)
 203b8d8:	10800504 	addi	r2,r2,20
 203b8dc:	1009883a 	mov	r4,r2
 203b8e0:	20151900 	call	2015190 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 203b8e4:	e0bfff17 	ldw	r2,-4(fp)
 203b8e8:	10800017 	ldw	r2,0(r2)
 203b8ec:	10000515 	stw	zero,20(r2)
            }
            msg->err = ERR_OK;
 203b8f0:	e0bfff17 	ldw	r2,-4(fp)
 203b8f4:	10000105 	stb	zero,4(r2)
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 203b8f8:	e0bfff17 	ldw	r2,-4(fp)
 203b8fc:	10800017 	ldw	r2,0(r2)
 203b900:	10800617 	ldw	r2,24(r2)
 203b904:	1000091e 	bne	r2,zero,203b92c <do_listen+0x138>
              msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 203b908:	e0bfff17 	ldw	r2,-4(fp)
 203b90c:	10800017 	ldw	r2,0(r2)
 203b910:	10800604 	addi	r2,r2,24
 203b914:	01420004 	movi	r5,2048
 203b918:	1009883a 	mov	r4,r2
 203b91c:	20150c00 	call	20150c0 <sys_mbox_new>
 203b920:	1007883a 	mov	r3,r2
 203b924:	e0bfff17 	ldw	r2,-4(fp)
 203b928:	10c00105 	stb	r3,4(r2)
            }
            if (msg->err == ERR_OK) {
 203b92c:	e0bfff17 	ldw	r2,-4(fp)
 203b930:	10800103 	ldbu	r2,4(r2)
 203b934:	10803fcc 	andi	r2,r2,255
 203b938:	1080201c 	xori	r2,r2,128
 203b93c:	10bfe004 	addi	r2,r2,-128
 203b940:	1000181e 	bne	r2,zero,203b9a4 <do_listen+0x1b0>
              msg->conn->state = NETCONN_LISTEN;
 203b944:	e0bfff17 	ldw	r2,-4(fp)
 203b948:	10800017 	ldw	r2,0(r2)
 203b94c:	00c00084 	movi	r3,2
 203b950:	10c00115 	stw	r3,4(r2)
              msg->conn->pcb.tcp = lpcb;
 203b954:	e0bfff17 	ldw	r2,-4(fp)
 203b958:	10800017 	ldw	r2,0(r2)
 203b95c:	e0fffe17 	ldw	r3,-8(fp)
 203b960:	10c00215 	stw	r3,8(r2)
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 203b964:	e0bfff17 	ldw	r2,-4(fp)
 203b968:	10800017 	ldw	r2,0(r2)
 203b96c:	10c00217 	ldw	r3,8(r2)
 203b970:	e0bfff17 	ldw	r2,-4(fp)
 203b974:	10800017 	ldw	r2,0(r2)
 203b978:	100b883a 	mov	r5,r2
 203b97c:	1809883a 	mov	r4,r3
 203b980:	201d7f80 	call	201d7f8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 203b984:	e0bfff17 	ldw	r2,-4(fp)
 203b988:	10800017 	ldw	r2,0(r2)
 203b98c:	10800217 	ldw	r2,8(r2)
 203b990:	01408134 	movhi	r5,516
 203b994:	2969e604 	addi	r5,r5,-22632
 203b998:	1009883a 	mov	r4,r2
 203b99c:	201d8c80 	call	201d8c8 <tcp_accept>
 203b9a0:	00000906 	br	203b9c8 <do_listen+0x1d4>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 203b9a4:	e13ffe17 	ldw	r4,-8(fp)
 203b9a8:	201bbc00 	call	201bbc0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 203b9ac:	e0bfff17 	ldw	r2,-4(fp)
 203b9b0:	10800017 	ldw	r2,0(r2)
 203b9b4:	10000215 	stw	zero,8(r2)
 203b9b8:	00000306 	br	203b9c8 <do_listen+0x1d4>
            }
          }
        }
      } else {
        msg->err = ERR_ARG;
 203b9bc:	e0bfff17 	ldw	r2,-4(fp)
 203b9c0:	00fffc84 	movi	r3,-14
 203b9c4:	10c00105 	stb	r3,4(r2)
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 203b9c8:	e0bfff17 	ldw	r2,-4(fp)
 203b9cc:	10800017 	ldw	r2,0(r2)
 203b9d0:	10800404 	addi	r2,r2,16
 203b9d4:	1009883a 	mov	r4,r2
 203b9d8:	2014df00 	call	2014df0 <sys_sem_signal>
}
 203b9dc:	0001883a 	nop
 203b9e0:	e037883a 	mov	sp,fp
 203b9e4:	dfc00117 	ldw	ra,4(sp)
 203b9e8:	df000017 	ldw	fp,0(sp)
 203b9ec:	dec00204 	addi	sp,sp,8
 203b9f0:	f800283a 	ret

0203b9f4 <do_send>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_send(struct api_msg_msg *msg)
{
 203b9f4:	defffb04 	addi	sp,sp,-20
 203b9f8:	dfc00415 	stw	ra,16(sp)
 203b9fc:	df000315 	stw	fp,12(sp)
 203ba00:	df000304 	addi	fp,sp,12
 203ba04:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 203ba08:	e0bfff17 	ldw	r2,-4(fp)
 203ba0c:	10800017 	ldw	r2,0(r2)
 203ba10:	10800303 	ldbu	r2,12(r2)
 203ba14:	10803fcc 	andi	r2,r2,255
 203ba18:	1080201c 	xori	r2,r2,128
 203ba1c:	10bfe004 	addi	r2,r2,-128
 203ba20:	10bffdc8 	cmpgei	r2,r2,-9
 203ba24:	1000061e 	bne	r2,zero,203ba40 <do_send+0x4c>
    msg->err = msg->conn->last_err;
 203ba28:	e0bfff17 	ldw	r2,-4(fp)
 203ba2c:	10800017 	ldw	r2,0(r2)
 203ba30:	10c00303 	ldbu	r3,12(r2)
 203ba34:	e0bfff17 	ldw	r2,-4(fp)
 203ba38:	10c00105 	stb	r3,4(r2)
 203ba3c:	00007306 	br	203bc0c <do_send+0x218>
  } else {
    msg->err = ERR_CONN;
 203ba40:	e0bfff17 	ldw	r2,-4(fp)
 203ba44:	00fffcc4 	movi	r3,-13
 203ba48:	10c00105 	stb	r3,4(r2)
    if (msg->conn->pcb.tcp != NULL) {
 203ba4c:	e0bfff17 	ldw	r2,-4(fp)
 203ba50:	10800017 	ldw	r2,0(r2)
 203ba54:	10800217 	ldw	r2,8(r2)
 203ba58:	10006c26 	beq	r2,zero,203bc0c <do_send+0x218>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 203ba5c:	e0bfff17 	ldw	r2,-4(fp)
 203ba60:	10800017 	ldw	r2,0(r2)
 203ba64:	10800017 	ldw	r2,0(r2)
 203ba68:	10803c0c 	andi	r2,r2,240
 203ba6c:	10c00820 	cmpeqi	r3,r2,32
 203ba70:	1800291e 	bne	r3,zero,203bb18 <do_send+0x124>
 203ba74:	10801020 	cmpeqi	r2,r2,64
 203ba78:	1000011e 	bne	r2,zero,203ba80 <do_send+0x8c>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
 203ba7c:	00006306 	br	203bc0c <do_send+0x218>
    msg->err = ERR_CONN;
    if (msg->conn->pcb.tcp != NULL) {
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
      case NETCONN_RAW:
        if (ip_addr_isany(&msg->msg.b->addr)) {
 203ba80:	e0bfff17 	ldw	r2,-4(fp)
 203ba84:	10800217 	ldw	r2,8(r2)
 203ba88:	10800204 	addi	r2,r2,8
 203ba8c:	10000426 	beq	r2,zero,203baa0 <do_send+0xac>
 203ba90:	e0bfff17 	ldw	r2,-4(fp)
 203ba94:	10800217 	ldw	r2,8(r2)
 203ba98:	10800217 	ldw	r2,8(r2)
 203ba9c:	10000d1e 	bne	r2,zero,203bad4 <do_send+0xe0>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
 203baa0:	e0bfff17 	ldw	r2,-4(fp)
 203baa4:	10800017 	ldw	r2,0(r2)
 203baa8:	10c00217 	ldw	r3,8(r2)
 203baac:	e0bfff17 	ldw	r2,-4(fp)
 203bab0:	10800217 	ldw	r2,8(r2)
 203bab4:	10800017 	ldw	r2,0(r2)
 203bab8:	100b883a 	mov	r5,r2
 203babc:	1809883a 	mov	r4,r3
 203bac0:	203491c0 	call	203491c <raw_send>
 203bac4:	1007883a 	mov	r3,r2
 203bac8:	e0bfff17 	ldw	r2,-4(fp)
 203bacc:	10c00105 	stb	r3,4(r2)
        } else {
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
        }
        break;
 203bad0:	00004e06 	br	203bc0c <do_send+0x218>
#if LWIP_RAW
      case NETCONN_RAW:
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
        } else {
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
 203bad4:	e0bfff17 	ldw	r2,-4(fp)
 203bad8:	10800017 	ldw	r2,0(r2)
 203badc:	10c00217 	ldw	r3,8(r2)
 203bae0:	e0bfff17 	ldw	r2,-4(fp)
 203bae4:	10800217 	ldw	r2,8(r2)
 203bae8:	11000017 	ldw	r4,0(r2)
 203baec:	e0bfff17 	ldw	r2,-4(fp)
 203baf0:	10800217 	ldw	r2,8(r2)
 203baf4:	10800204 	addi	r2,r2,8
 203baf8:	100d883a 	mov	r6,r2
 203bafc:	200b883a 	mov	r5,r4
 203bb00:	1809883a 	mov	r4,r3
 203bb04:	20347940 	call	2034794 <raw_sendto>
 203bb08:	1007883a 	mov	r3,r2
 203bb0c:	e0bfff17 	ldw	r2,-4(fp)
 203bb10:	10c00105 	stb	r3,4(r2)
        }
        break;
 203bb14:	00003d06 	br	203bc0c <do_send+0x218>
#endif
#if LWIP_UDP
      case NETCONN_UDP:
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
 203bb18:	e0bfff17 	ldw	r2,-4(fp)
 203bb1c:	10800217 	ldw	r2,8(r2)
 203bb20:	10800204 	addi	r2,r2,8
 203bb24:	10000426 	beq	r2,zero,203bb38 <do_send+0x144>
 203bb28:	e0bfff17 	ldw	r2,-4(fp)
 203bb2c:	10800217 	ldw	r2,8(r2)
 203bb30:	10800217 	ldw	r2,8(r2)
 203bb34:	1000181e 	bne	r2,zero,203bb98 <do_send+0x1a4>
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 203bb38:	e0bfff17 	ldw	r2,-4(fp)
 203bb3c:	10800017 	ldw	r2,0(r2)
 203bb40:	10c00217 	ldw	r3,8(r2)
 203bb44:	e0bfff17 	ldw	r2,-4(fp)
 203bb48:	10800217 	ldw	r2,8(r2)
 203bb4c:	11000017 	ldw	r4,0(r2)
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 203bb50:	e0bfff17 	ldw	r2,-4(fp)
 203bb54:	10800217 	ldw	r2,8(r2)
 203bb58:	10800383 	ldbu	r2,14(r2)
#endif
#if LWIP_UDP
      case NETCONN_UDP:
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 203bb5c:	10803fcc 	andi	r2,r2,255
 203bb60:	1140008c 	andi	r5,r2,2
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 203bb64:	e0bfff17 	ldw	r2,-4(fp)
 203bb68:	10800217 	ldw	r2,8(r2)
 203bb6c:	1080040b 	ldhu	r2,16(r2)
#endif
#if LWIP_UDP
      case NETCONN_UDP:
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 203bb70:	10bfffcc 	andi	r2,r2,65535
 203bb74:	100f883a 	mov	r7,r2
 203bb78:	280d883a 	mov	r6,r5
 203bb7c:	200b883a 	mov	r5,r4
 203bb80:	1809883a 	mov	r4,r3
 203bb84:	20220040 	call	2022004 <udp_send_chksum>
 203bb88:	1007883a 	mov	r3,r2
 203bb8c:	e0bfff17 	ldw	r2,-4(fp)
 203bb90:	10c00105 	stb	r3,4(r2)
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
        } else {
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
 203bb94:	00001c06 	br	203bc08 <do_send+0x214>
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 203bb98:	e0bfff17 	ldw	r2,-4(fp)
 203bb9c:	10800017 	ldw	r2,0(r2)
 203bba0:	11000217 	ldw	r4,8(r2)
 203bba4:	e0bfff17 	ldw	r2,-4(fp)
 203bba8:	10800217 	ldw	r2,8(r2)
 203bbac:	11400017 	ldw	r5,0(r2)
            &msg->msg.b->addr, msg->msg.b->port,
 203bbb0:	e0bfff17 	ldw	r2,-4(fp)
 203bbb4:	10800217 	ldw	r2,8(r2)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 203bbb8:	11800204 	addi	r6,r2,8
            &msg->msg.b->addr, msg->msg.b->port,
 203bbbc:	e0bfff17 	ldw	r2,-4(fp)
 203bbc0:	10800217 	ldw	r2,8(r2)
 203bbc4:	1080030b 	ldhu	r2,12(r2)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 203bbc8:	11ffffcc 	andi	r7,r2,65535
            &msg->msg.b->addr, msg->msg.b->port,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 203bbcc:	e0bfff17 	ldw	r2,-4(fp)
 203bbd0:	10800217 	ldw	r2,8(r2)
 203bbd4:	10800383 	ldbu	r2,14(r2)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 203bbd8:	10803fcc 	andi	r2,r2,255
 203bbdc:	1080008c 	andi	r2,r2,2
            &msg->msg.b->addr, msg->msg.b->port,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
 203bbe0:	e0ffff17 	ldw	r3,-4(fp)
 203bbe4:	18c00217 	ldw	r3,8(r3)
 203bbe8:	18c0040b 	ldhu	r3,16(r3)
#if LWIP_CHECKSUM_ON_COPY
        if (ip_addr_isany(&msg->msg.b->addr)) {
          msg->err = udp_send_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        } else {
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
 203bbec:	18ffffcc 	andi	r3,r3,65535
 203bbf0:	d8c00115 	stw	r3,4(sp)
 203bbf4:	d8800015 	stw	r2,0(sp)
 203bbf8:	20220d00 	call	20220d0 <udp_sendto_chksum>
 203bbfc:	1007883a 	mov	r3,r2
 203bc00:	e0bfff17 	ldw	r2,-4(fp)
 203bc04:	10c00105 	stb	r3,4(r2)
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
        } else {
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
 203bc08:	0001883a 	nop
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 203bc0c:	e0bfff17 	ldw	r2,-4(fp)
 203bc10:	10800017 	ldw	r2,0(r2)
 203bc14:	10800404 	addi	r2,r2,16
 203bc18:	1009883a 	mov	r4,r2
 203bc1c:	2014df00 	call	2014df0 <sys_sem_signal>
}
 203bc20:	0001883a 	nop
 203bc24:	e037883a 	mov	sp,fp
 203bc28:	dfc00117 	ldw	ra,4(sp)
 203bc2c:	df000017 	ldw	fp,0(sp)
 203bc30:	dec00204 	addi	sp,sp,8
 203bc34:	f800283a 	ret

0203bc38 <do_recv>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_recv(struct api_msg_msg *msg)
{
 203bc38:	defffb04 	addi	sp,sp,-20
 203bc3c:	dfc00415 	stw	ra,16(sp)
 203bc40:	df000315 	stw	fp,12(sp)
 203bc44:	df000304 	addi	fp,sp,12
 203bc48:	e13fff15 	stw	r4,-4(fp)
  msg->err = ERR_OK;
 203bc4c:	e0bfff17 	ldw	r2,-4(fp)
 203bc50:	10000105 	stb	zero,4(r2)
  if (msg->conn->pcb.tcp != NULL) {
 203bc54:	e0bfff17 	ldw	r2,-4(fp)
 203bc58:	10800017 	ldw	r2,0(r2)
 203bc5c:	10800217 	ldw	r2,8(r2)
 203bc60:	10002926 	beq	r2,zero,203bd08 <do_recv+0xd0>
    if (msg->conn->type == NETCONN_TCP) {
 203bc64:	e0bfff17 	ldw	r2,-4(fp)
 203bc68:	10800017 	ldw	r2,0(r2)
 203bc6c:	10800017 	ldw	r2,0(r2)
 203bc70:	10800418 	cmpnei	r2,r2,16
 203bc74:	1000241e 	bne	r2,zero,203bd08 <do_recv+0xd0>
#if TCP_LISTEN_BACKLOG
      if (msg->conn->pcb.tcp->state == LISTEN) {
 203bc78:	e0bfff17 	ldw	r2,-4(fp)
 203bc7c:	10800017 	ldw	r2,0(r2)
 203bc80:	10800217 	ldw	r2,8(r2)
 203bc84:	10800617 	ldw	r2,24(r2)
 203bc88:	10800058 	cmpnei	r2,r2,1
 203bc8c:	1000071e 	bne	r2,zero,203bcac <do_recv+0x74>
        tcp_accepted(msg->conn->pcb.tcp);
 203bc90:	e0bfff17 	ldw	r2,-4(fp)
 203bc94:	10800017 	ldw	r2,0(r2)
 203bc98:	10800217 	ldw	r2,8(r2)
 203bc9c:	10c00843 	ldbu	r3,33(r2)
 203bca0:	18ffffc4 	addi	r3,r3,-1
 203bca4:	10c00845 	stb	r3,33(r2)
 203bca8:	00001706 	br	203bd08 <do_recv+0xd0>
      } else
#endif /* TCP_LISTEN_BACKLOG */
      {
        u32_t remaining = msg->msg.r.len;
 203bcac:	e0bfff17 	ldw	r2,-4(fp)
 203bcb0:	10800217 	ldw	r2,8(r2)
 203bcb4:	e0bffd15 	stw	r2,-12(fp)
        do {
          u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 203bcb8:	e0bffd17 	ldw	r2,-12(fp)
 203bcbc:	00ffffd4 	movui	r3,65535
 203bcc0:	18800236 	bltu	r3,r2,203bccc <do_recv+0x94>
 203bcc4:	e0bffd17 	ldw	r2,-12(fp)
 203bcc8:	00000106 	br	203bcd0 <do_recv+0x98>
 203bccc:	00bfffc4 	movi	r2,-1
 203bcd0:	e0bffe0d 	sth	r2,-8(fp)
          tcp_recved(msg->conn->pcb.tcp, recved);
 203bcd4:	e0bfff17 	ldw	r2,-4(fp)
 203bcd8:	10800017 	ldw	r2,0(r2)
 203bcdc:	10800217 	ldw	r2,8(r2)
 203bce0:	e0fffe0b 	ldhu	r3,-8(fp)
 203bce4:	180b883a 	mov	r5,r3
 203bce8:	1009883a 	mov	r4,r2
 203bcec:	201c3fc0 	call	201c3fc <tcp_recved>
          remaining -= recved;
 203bcf0:	e0bffe0b 	ldhu	r2,-8(fp)
 203bcf4:	e0fffd17 	ldw	r3,-12(fp)
 203bcf8:	1885c83a 	sub	r2,r3,r2
 203bcfc:	e0bffd15 	stw	r2,-12(fp)
        }while(remaining != 0);
 203bd00:	e0bffd17 	ldw	r2,-12(fp)
 203bd04:	103fec1e 	bne	r2,zero,203bcb8 <__alt_mem_mem_0+0xfd01bcb8>
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 203bd08:	e0bfff17 	ldw	r2,-4(fp)
 203bd0c:	10800017 	ldw	r2,0(r2)
 203bd10:	10800404 	addi	r2,r2,16
 203bd14:	1009883a 	mov	r4,r2
 203bd18:	2014df00 	call	2014df0 <sys_sem_signal>
}
 203bd1c:	0001883a 	nop
 203bd20:	e037883a 	mov	sp,fp
 203bd24:	dfc00117 	ldw	ra,4(sp)
 203bd28:	df000017 	ldw	fp,0(sp)
 203bd2c:	dec00204 	addi	sp,sp,8
 203bd30:	f800283a 	ret

0203bd34 <do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
do_writemore(struct netconn *conn)
{
 203bd34:	defff804 	addi	sp,sp,-32
 203bd38:	dfc00715 	stw	ra,28(sp)
 203bd3c:	df000615 	stw	fp,24(sp)
 203bd40:	df000604 	addi	fp,sp,24
 203bd44:	e13fff15 	stw	r4,-4(fp)
  err_t err;
  void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 203bd48:	e03ffb05 	stb	zero,-20(fp)
  size_t diff;
  u8_t dontblock = netconn_is_nonblocking(conn) ||
 203bd4c:	e0bfff17 	ldw	r2,-4(fp)
 203bd50:	10800903 	ldbu	r2,36(r2)
 203bd54:	10803fcc 	andi	r2,r2,255
 203bd58:	1080008c 	andi	r2,r2,2
 203bd5c:	1000061e 	bne	r2,zero,203bd78 <do_writemore+0x44>
       (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
 203bd60:	e0bfff17 	ldw	r2,-4(fp)
 203bd64:	10800b17 	ldw	r2,44(r2)
 203bd68:	10800403 	ldbu	r2,16(r2)
 203bd6c:	10803fcc 	andi	r2,r2,255
 203bd70:	1080010c 	andi	r2,r2,4
  err_t err;
  void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock = netconn_is_nonblocking(conn) ||
 203bd74:	10000226 	beq	r2,zero,203bd80 <do_writemore+0x4c>
 203bd78:	00800044 	movi	r2,1
 203bd7c:	00000106 	br	203bd84 <do_writemore+0x50>
 203bd80:	0005883a 	mov	r2,zero
 203bd84:	e0bffb85 	stb	r2,-18(fp)
       (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
  u8_t apiflags = conn->current_msg->msg.w.apiflags;
 203bd88:	e0bfff17 	ldw	r2,-4(fp)
 203bd8c:	10800b17 	ldw	r2,44(r2)
 203bd90:	10800403 	ldbu	r2,16(r2)
 203bd94:	e0bffb45 	stb	r2,-19(fp)
      conn->current_msg->msg.w.len = conn->write_offset;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 203bd98:	e0bfff17 	ldw	r2,-4(fp)
 203bd9c:	10800b17 	ldw	r2,44(r2)
 203bda0:	10c00217 	ldw	r3,8(r2)
 203bda4:	e0bfff17 	ldw	r2,-4(fp)
 203bda8:	10800a17 	ldw	r2,40(r2)
 203bdac:	1885883a 	add	r2,r3,r2
 203bdb0:	e0bffc15 	stw	r2,-16(fp)
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 203bdb4:	e0bfff17 	ldw	r2,-4(fp)
 203bdb8:	10800b17 	ldw	r2,44(r2)
 203bdbc:	10c00317 	ldw	r3,12(r2)
 203bdc0:	e0bfff17 	ldw	r2,-4(fp)
 203bdc4:	10800a17 	ldw	r2,40(r2)
 203bdc8:	1885c83a 	sub	r2,r3,r2
 203bdcc:	e0bffd15 	stw	r2,-12(fp)
    if (diff > 0xffffUL) { /* max_u16_t */
 203bdd0:	e0bffd17 	ldw	r2,-12(fp)
 203bdd4:	00ffffd4 	movui	r3,65535
 203bdd8:	1880062e 	bgeu	r3,r2,203bdf4 <do_writemore+0xc0>
      len = 0xffff;
 203bddc:	00bfffc4 	movi	r2,-1
 203bde0:	e0bffa8d 	sth	r2,-22(fp)
#if LWIP_TCPIP_CORE_LOCKING
      conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
      apiflags |= TCP_WRITE_FLAG_MORE;
 203bde4:	e0bffb43 	ldbu	r2,-19(fp)
 203bde8:	10800094 	ori	r2,r2,2
 203bdec:	e0bffb45 	stb	r2,-19(fp)
 203bdf0:	00000206 	br	203bdfc <do_writemore+0xc8>
    } else {
      len = (u16_t)diff;
 203bdf4:	e0bffd17 	ldw	r2,-12(fp)
 203bdf8:	e0bffa8d 	sth	r2,-22(fp)
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 203bdfc:	e0bfff17 	ldw	r2,-4(fp)
 203be00:	10800217 	ldw	r2,8(r2)
 203be04:	10801a8b 	ldhu	r2,106(r2)
 203be08:	e0bffe0d 	sth	r2,-8(fp)
    if (available < len) {
 203be0c:	e0fffe0b 	ldhu	r3,-8(fp)
 203be10:	e0bffa8b 	ldhu	r2,-22(fp)
 203be14:	18800c2e 	bgeu	r3,r2,203be48 <do_writemore+0x114>
      /* don't try to write more than sendbuf */
      len = available;
 203be18:	e0bffe0b 	ldhu	r2,-8(fp)
 203be1c:	e0bffa8d 	sth	r2,-22(fp)
      if (dontblock){ 
 203be20:	e0bffb83 	ldbu	r2,-18(fp)
 203be24:	10000526 	beq	r2,zero,203be3c <do_writemore+0x108>
        if (!len) {
 203be28:	e0bffa8b 	ldhu	r2,-22(fp)
 203be2c:	1000061e 	bne	r2,zero,203be48 <do_writemore+0x114>
          err = ERR_WOULDBLOCK;
 203be30:	00bffe44 	movi	r2,-7
 203be34:	e0bffa05 	stb	r2,-24(fp)
          goto err_mem;
 203be38:	00001206 	br	203be84 <do_writemore+0x150>
        }
      } else {
#if LWIP_TCPIP_CORE_LOCKING
        conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
        apiflags |= TCP_WRITE_FLAG_MORE;
 203be3c:	e0bffb43 	ldbu	r2,-19(fp)
 203be40:	10800094 	ori	r2,r2,2
 203be44:	e0bffb45 	stb	r2,-19(fp)
      }
    }
    LWIP_ASSERT("do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 203be48:	e0bfff17 	ldw	r2,-4(fp)
 203be4c:	10800217 	ldw	r2,8(r2)
 203be50:	e0fffa8b 	ldhu	r3,-22(fp)
 203be54:	e13ffb43 	ldbu	r4,-19(fp)
 203be58:	200f883a 	mov	r7,r4
 203be5c:	180d883a 	mov	r6,r3
 203be60:	e17ffc17 	ldw	r5,-16(fp)
 203be64:	1009883a 	mov	r4,r2
 203be68:	201e8840 	call	201e884 <tcp_write>
 203be6c:	e0bffa05 	stb	r2,-24(fp)
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 203be70:	e0bffa07 	ldb	r2,-24(fp)
 203be74:	10000326 	beq	r2,zero,203be84 <do_writemore+0x150>
 203be78:	e0bffa07 	ldb	r2,-24(fp)
 203be7c:	10bfffd8 	cmpnei	r2,r2,-1
 203be80:	10002e1e 	bne	r2,zero,203bf3c <do_writemore+0x208>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 203be84:	e0bffb83 	ldbu	r2,-18(fp)
 203be88:	10001626 	beq	r2,zero,203bee4 <do_writemore+0x1b0>
 203be8c:	e0fffa8b 	ldhu	r3,-22(fp)
 203be90:	e0bfff17 	ldw	r2,-4(fp)
 203be94:	10800b17 	ldw	r2,44(r2)
 203be98:	10800317 	ldw	r2,12(r2)
 203be9c:	1880112e 	bgeu	r3,r2,203bee4 <do_writemore+0x1b0>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 203bea0:	e0bfff17 	ldw	r2,-4(fp)
 203bea4:	10800c17 	ldw	r2,48(r2)
 203bea8:	10000726 	beq	r2,zero,203bec8 <do_writemore+0x194>
 203beac:	e0bfff17 	ldw	r2,-4(fp)
 203beb0:	10800c17 	ldw	r2,48(r2)
 203beb4:	e0fffa8b 	ldhu	r3,-22(fp)
 203beb8:	180d883a 	mov	r6,r3
 203bebc:	014000c4 	movi	r5,3
 203bec0:	e13fff17 	ldw	r4,-4(fp)
 203bec4:	103ee83a 	callr	r2
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 203bec8:	e0bfff17 	ldw	r2,-4(fp)
 203becc:	10800903 	ldbu	r2,36(r2)
 203bed0:	10800414 	ori	r2,r2,16
 203bed4:	1007883a 	mov	r3,r2
 203bed8:	e0bfff17 	ldw	r2,-4(fp)
 203bedc:	10c00905 	stb	r3,36(r2)
 203bee0:	00001606 	br	203bf3c <do_writemore+0x208>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 203bee4:	e0bfff17 	ldw	r2,-4(fp)
 203bee8:	10800217 	ldw	r2,8(r2)
 203beec:	10801a8b 	ldhu	r2,106(r2)
 203bef0:	10bfffcc 	andi	r2,r2,65535
 203bef4:	10816d70 	cmpltui	r2,r2,1461
 203bef8:	1000061e 	bne	r2,zero,203bf14 <do_writemore+0x1e0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 203befc:	e0bfff17 	ldw	r2,-4(fp)
 203bf00:	10800217 	ldw	r2,8(r2)
 203bf04:	10801b0b 	ldhu	r2,108(r2)
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 203bf08:	10bfffcc 	andi	r2,r2,65535
 203bf0c:	10800130 	cmpltui	r2,r2,4
 203bf10:	10000a1e 	bne	r2,zero,203bf3c <do_writemore+0x208>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 203bf14:	e0bfff17 	ldw	r2,-4(fp)
 203bf18:	10800c17 	ldw	r2,48(r2)
 203bf1c:	10000726 	beq	r2,zero,203bf3c <do_writemore+0x208>
 203bf20:	e0bfff17 	ldw	r2,-4(fp)
 203bf24:	10800c17 	ldw	r2,48(r2)
 203bf28:	e0fffa8b 	ldhu	r3,-22(fp)
 203bf2c:	180d883a 	mov	r6,r3
 203bf30:	014000c4 	movi	r5,3
 203bf34:	e13fff17 	ldw	r4,-4(fp)
 203bf38:	103ee83a 	callr	r2
      }
    }

    if (err == ERR_OK) {
 203bf3c:	e0bffa07 	ldb	r2,-24(fp)
 203bf40:	10001c1e 	bne	r2,zero,203bfb4 <do_writemore+0x280>
      conn->write_offset += len;
 203bf44:	e0bfff17 	ldw	r2,-4(fp)
 203bf48:	10c00a17 	ldw	r3,40(r2)
 203bf4c:	e0bffa8b 	ldhu	r2,-22(fp)
 203bf50:	1887883a 	add	r3,r3,r2
 203bf54:	e0bfff17 	ldw	r2,-4(fp)
 203bf58:	10c00a15 	stw	r3,40(r2)
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 203bf5c:	e0bfff17 	ldw	r2,-4(fp)
 203bf60:	10c00a17 	ldw	r3,40(r2)
 203bf64:	e0bfff17 	ldw	r2,-4(fp)
 203bf68:	10800b17 	ldw	r2,44(r2)
 203bf6c:	10800317 	ldw	r2,12(r2)
 203bf70:	18800226 	beq	r3,r2,203bf7c <do_writemore+0x248>
 203bf74:	e0bffb83 	ldbu	r2,-18(fp)
 203bf78:	10000926 	beq	r2,zero,203bfa0 <do_writemore+0x26c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 203bf7c:	e0bfff17 	ldw	r2,-4(fp)
 203bf80:	10800b17 	ldw	r2,44(r2)
 203bf84:	e0ffff17 	ldw	r3,-4(fp)
 203bf88:	18c00a17 	ldw	r3,40(r3)
 203bf8c:	10c00315 	stw	r3,12(r2)
        /* everything was written */
        write_finished = 1;
 203bf90:	00800044 	movi	r2,1
 203bf94:	e0bffb05 	stb	r2,-20(fp)
        conn->write_offset = 0;
 203bf98:	e0bfff17 	ldw	r2,-4(fp)
 203bf9c:	10000a15 	stw	zero,40(r2)
      }
      tcp_output(conn->pcb.tcp);
 203bfa0:	e0bfff17 	ldw	r2,-4(fp)
 203bfa4:	10800217 	ldw	r2,8(r2)
 203bfa8:	1009883a 	mov	r4,r2
 203bfac:	201f6380 	call	201f638 <tcp_output>
 203bfb0:	00000f06 	br	203bff0 <do_writemore+0x2bc>
    } else if ((err == ERR_MEM) && !dontblock) {
 203bfb4:	e0bffa07 	ldb	r2,-24(fp)
 203bfb8:	10bfffd8 	cmpnei	r2,r2,-1
 203bfbc:	1000071e 	bne	r2,zero,203bfdc <do_writemore+0x2a8>
 203bfc0:	e0bffb83 	ldbu	r2,-18(fp)
 203bfc4:	1000051e 	bne	r2,zero,203bfdc <do_writemore+0x2a8>
      /* If ERR_MEM, we wait for sent_tcp or poll_tcp to be called
         we do NOT return to the application thread, since ERR_MEM is
         only a temporary error! */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      tcp_output(conn->pcb.tcp);
 203bfc8:	e0bfff17 	ldw	r2,-4(fp)
 203bfcc:	10800217 	ldw	r2,8(r2)
 203bfd0:	1009883a 	mov	r4,r2
 203bfd4:	201f6380 	call	201f638 <tcp_output>
 203bfd8:	00000506 	br	203bff0 <do_writemore+0x2bc>
      conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 203bfdc:	00800044 	movi	r2,1
 203bfe0:	e0bffb05 	stb	r2,-20(fp)
      conn->current_msg->msg.w.len = 0;
 203bfe4:	e0bfff17 	ldw	r2,-4(fp)
 203bfe8:	10800b17 	ldw	r2,44(r2)
 203bfec:	10000315 	stw	zero,12(r2)
    }
  }
  if (write_finished) {
 203bff0:	e0bffb03 	ldbu	r2,-20(fp)
 203bff4:	10000c26 	beq	r2,zero,203c028 <do_writemore+0x2f4>
    /* everything was written: set back connection state
       and back to application task */
    conn->current_msg->err = err;
 203bff8:	e0bfff17 	ldw	r2,-4(fp)
 203bffc:	10800b17 	ldw	r2,44(r2)
 203c000:	e0fffa03 	ldbu	r3,-24(fp)
 203c004:	10c00105 	stb	r3,4(r2)
    conn->current_msg = NULL;
 203c008:	e0bfff17 	ldw	r2,-4(fp)
 203c00c:	10000b15 	stw	zero,44(r2)
    conn->state = NETCONN_NONE;
 203c010:	e0bfff17 	ldw	r2,-4(fp)
 203c014:	10000115 	stw	zero,4(r2)
#if LWIP_TCPIP_CORE_LOCKING
    if ((conn->flags & NETCONN_FLAG_WRITE_DELAYED) != 0)
#endif
    {
      sys_sem_signal(&conn->op_completed);
 203c018:	e0bfff17 	ldw	r2,-4(fp)
 203c01c:	10800404 	addi	r2,r2,16
 203c020:	1009883a 	mov	r4,r2
 203c024:	2014df00 	call	2014df0 <sys_sem_signal>
  }
#if LWIP_TCPIP_CORE_LOCKING
  else
    return ERR_MEM;
#endif
  return ERR_OK;
 203c028:	0005883a 	mov	r2,zero
}
 203c02c:	e037883a 	mov	sp,fp
 203c030:	dfc00117 	ldw	ra,4(sp)
 203c034:	df000017 	ldw	fp,0(sp)
 203c038:	dec00204 	addi	sp,sp,8
 203c03c:	f800283a 	ret

0203c040 <do_write>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_write(struct api_msg_msg *msg)
{
 203c040:	defffd04 	addi	sp,sp,-12
 203c044:	dfc00215 	stw	ra,8(sp)
 203c048:	df000115 	stw	fp,4(sp)
 203c04c:	df000104 	addi	fp,sp,4
 203c050:	e13fff15 	stw	r4,-4(fp)
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 203c054:	e0bfff17 	ldw	r2,-4(fp)
 203c058:	10800017 	ldw	r2,0(r2)
 203c05c:	10800303 	ldbu	r2,12(r2)
 203c060:	10803fcc 	andi	r2,r2,255
 203c064:	1080201c 	xori	r2,r2,128
 203c068:	10bfe004 	addi	r2,r2,-128
 203c06c:	10bffdc8 	cmpgei	r2,r2,-9
 203c070:	1000061e 	bne	r2,zero,203c08c <do_write+0x4c>
    msg->err = msg->conn->last_err;
 203c074:	e0bfff17 	ldw	r2,-4(fp)
 203c078:	10800017 	ldw	r2,0(r2)
 203c07c:	10c00303 	ldbu	r3,12(r2)
 203c080:	e0bfff17 	ldw	r2,-4(fp)
 203c084:	10c00105 	stb	r3,4(r2)
 203c088:	00002806 	br	203c12c <do_write+0xec>
  } else {
    if (msg->conn->type == NETCONN_TCP) {
 203c08c:	e0bfff17 	ldw	r2,-4(fp)
 203c090:	10800017 	ldw	r2,0(r2)
 203c094:	10800017 	ldw	r2,0(r2)
 203c098:	10800418 	cmpnei	r2,r2,16
 203c09c:	1000201e 	bne	r2,zero,203c120 <do_write+0xe0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 203c0a0:	e0bfff17 	ldw	r2,-4(fp)
 203c0a4:	10800017 	ldw	r2,0(r2)
 203c0a8:	10800117 	ldw	r2,4(r2)
 203c0ac:	10000426 	beq	r2,zero,203c0c0 <do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 203c0b0:	e0bfff17 	ldw	r2,-4(fp)
 203c0b4:	00fffec4 	movi	r3,-5
 203c0b8:	10c00105 	stb	r3,4(r2)
 203c0bc:	00001b06 	br	203c12c <do_write+0xec>
      } else if (msg->conn->pcb.tcp != NULL) {
 203c0c0:	e0bfff17 	ldw	r2,-4(fp)
 203c0c4:	10800017 	ldw	r2,0(r2)
 203c0c8:	10800217 	ldw	r2,8(r2)
 203c0cc:	10001026 	beq	r2,zero,203c110 <do_write+0xd0>
        msg->conn->state = NETCONN_WRITE;
 203c0d0:	e0bfff17 	ldw	r2,-4(fp)
 203c0d4:	10800017 	ldw	r2,0(r2)
 203c0d8:	00c00044 	movi	r3,1
 203c0dc:	10c00115 	stw	r3,4(r2)
        /* set all the variables used by do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
        msg->conn->current_msg = msg;
 203c0e0:	e0bfff17 	ldw	r2,-4(fp)
 203c0e4:	10800017 	ldw	r2,0(r2)
 203c0e8:	e0ffff17 	ldw	r3,-4(fp)
 203c0ec:	10c00b15 	stw	r3,44(r2)
        msg->conn->write_offset = 0;
 203c0f0:	e0bfff17 	ldw	r2,-4(fp)
 203c0f4:	10800017 	ldw	r2,0(r2)
 203c0f8:	10000a15 	stw	zero,40(r2)
          sys_arch_sem_wait(&msg->conn->op_completed, 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        do_writemore(msg->conn);
 203c0fc:	e0bfff17 	ldw	r2,-4(fp)
 203c100:	10800017 	ldw	r2,0(r2)
 203c104:	1009883a 	mov	r4,r2
 203c108:	203bd340 	call	203bd34 <do_writemore>
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if do_writemore was called, don't ACK the APIMSG
           since do_writemore ACKs it! */
        return;
 203c10c:	00000c06 	br	203c140 <do_write+0x100>
      } else {
        msg->err = ERR_CONN;
 203c110:	e0bfff17 	ldw	r2,-4(fp)
 203c114:	00fffcc4 	movi	r3,-13
 203c118:	10c00105 	stb	r3,4(r2)
 203c11c:	00000306 	br	203c12c <do_write+0xec>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 203c120:	e0bfff17 	ldw	r2,-4(fp)
 203c124:	00fffe84 	movi	r3,-6
 203c128:	10c00105 	stb	r3,4(r2)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 203c12c:	e0bfff17 	ldw	r2,-4(fp)
 203c130:	10800017 	ldw	r2,0(r2)
 203c134:	10800404 	addi	r2,r2,16
 203c138:	1009883a 	mov	r4,r2
 203c13c:	2014df00 	call	2014df0 <sys_sem_signal>
}
 203c140:	e037883a 	mov	sp,fp
 203c144:	dfc00117 	ldw	ra,4(sp)
 203c148:	df000017 	ldw	fp,0(sp)
 203c14c:	dec00204 	addi	sp,sp,8
 203c150:	f800283a 	ret

0203c154 <do_getaddr>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_getaddr(struct api_msg_msg *msg)
{
 203c154:	defffd04 	addi	sp,sp,-12
 203c158:	dfc00215 	stw	ra,8(sp)
 203c15c:	df000115 	stw	fp,4(sp)
 203c160:	df000104 	addi	fp,sp,4
 203c164:	e13fff15 	stw	r4,-4(fp)
  if (msg->conn->pcb.ip != NULL) {
 203c168:	e0bfff17 	ldw	r2,-4(fp)
 203c16c:	10800017 	ldw	r2,0(r2)
 203c170:	10800217 	ldw	r2,8(r2)
 203c174:	10005f26 	beq	r2,zero,203c2f4 <do_getaddr+0x1a0>
    *(msg->msg.ad.ipaddr) = (msg->msg.ad.local ? msg->conn->pcb.ip->local_ip :
 203c178:	e0bfff17 	ldw	r2,-4(fp)
 203c17c:	10800217 	ldw	r2,8(r2)
 203c180:	e0ffff17 	ldw	r3,-4(fp)
 203c184:	18c00403 	ldbu	r3,16(r3)
 203c188:	18c03fcc 	andi	r3,r3,255
 203c18c:	18000626 	beq	r3,zero,203c1a8 <do_getaddr+0x54>
 203c190:	e0ffff17 	ldw	r3,-4(fp)
 203c194:	18c00017 	ldw	r3,0(r3)
 203c198:	18c00217 	ldw	r3,8(r3)
 203c19c:	18c00017 	ldw	r3,0(r3)
 203c1a0:	10c00015 	stw	r3,0(r2)
 203c1a4:	00000506 	br	203c1bc <do_getaddr+0x68>
                             msg->conn->pcb.ip->remote_ip);
 203c1a8:	e0ffff17 	ldw	r3,-4(fp)
 203c1ac:	18c00017 	ldw	r3,0(r3)
 203c1b0:	18c00217 	ldw	r3,8(r3)
 */
void
do_getaddr(struct api_msg_msg *msg)
{
  if (msg->conn->pcb.ip != NULL) {
    *(msg->msg.ad.ipaddr) = (msg->msg.ad.local ? msg->conn->pcb.ip->local_ip :
 203c1b4:	18c00117 	ldw	r3,4(r3)
 203c1b8:	10c00015 	stw	r3,0(r2)
                             msg->conn->pcb.ip->remote_ip);

    msg->err = ERR_OK;
 203c1bc:	e0bfff17 	ldw	r2,-4(fp)
 203c1c0:	10000105 	stb	zero,4(r2)
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 203c1c4:	e0bfff17 	ldw	r2,-4(fp)
 203c1c8:	10800017 	ldw	r2,0(r2)
 203c1cc:	10800017 	ldw	r2,0(r2)
 203c1d0:	10803c0c 	andi	r2,r2,240
 203c1d4:	10c00820 	cmpeqi	r3,r2,32
 203c1d8:	1800161e 	bne	r3,zero,203c234 <do_getaddr+0xe0>
 203c1dc:	10c01020 	cmpeqi	r3,r2,64
 203c1e0:	1800031e 	bne	r3,zero,203c1f0 <do_getaddr+0x9c>
 203c1e4:	10800420 	cmpeqi	r2,r2,16
 203c1e8:	1000311e 	bne	r2,zero,203c2b0 <do_getaddr+0x15c>
      *(msg->msg.ad.port) = (msg->msg.ad.local?msg->conn->pcb.tcp->local_port:msg->conn->pcb.tcp->remote_port);
      break;
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
      break;
 203c1ec:	00004406 	br	203c300 <do_getaddr+0x1ac>

    msg->err = ERR_OK;
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
 203c1f0:	e0bfff17 	ldw	r2,-4(fp)
 203c1f4:	10800403 	ldbu	r2,16(r2)
 203c1f8:	10803fcc 	andi	r2,r2,255
 203c1fc:	10000926 	beq	r2,zero,203c224 <do_getaddr+0xd0>
        *(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
 203c200:	e0bfff17 	ldw	r2,-4(fp)
 203c204:	10800317 	ldw	r2,12(r2)
 203c208:	e0ffff17 	ldw	r3,-4(fp)
 203c20c:	18c00017 	ldw	r3,0(r3)
 203c210:	18c00217 	ldw	r3,8(r3)
 203c214:	18c00403 	ldbu	r3,16(r3)
 203c218:	18c03fcc 	andi	r3,r3,255
 203c21c:	10c0000d 	sth	r3,0(r2)
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
 203c220:	00003706 	br	203c300 <do_getaddr+0x1ac>
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
        *(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
 203c224:	e0bfff17 	ldw	r2,-4(fp)
 203c228:	00fffcc4 	movi	r3,-13
 203c22c:	10c00105 	stb	r3,4(r2)
      }
      break;
 203c230:	00003306 	br	203c300 <do_getaddr+0x1ac>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
 203c234:	e0bfff17 	ldw	r2,-4(fp)
 203c238:	10800403 	ldbu	r2,16(r2)
 203c23c:	10803fcc 	andi	r2,r2,255
 203c240:	10000826 	beq	r2,zero,203c264 <do_getaddr+0x110>
        *(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 203c244:	e0bfff17 	ldw	r2,-4(fp)
 203c248:	10800317 	ldw	r2,12(r2)
 203c24c:	e0ffff17 	ldw	r3,-4(fp)
 203c250:	18c00017 	ldw	r3,0(r3)
 203c254:	18c00217 	ldw	r3,8(r3)
 203c258:	18c0048b 	ldhu	r3,18(r3)
 203c25c:	10c0000d 	sth	r3,0(r2)
          msg->err = ERR_CONN;
        } else {
          *(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 203c260:	00002706 	br	203c300 <do_getaddr+0x1ac>
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
        *(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
      } else {
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 203c264:	e0bfff17 	ldw	r2,-4(fp)
 203c268:	10800017 	ldw	r2,0(r2)
 203c26c:	10800217 	ldw	r2,8(r2)
 203c270:	10800403 	ldbu	r2,16(r2)
 203c274:	10803fcc 	andi	r2,r2,255
 203c278:	1080010c 	andi	r2,r2,4
 203c27c:	1000041e 	bne	r2,zero,203c290 <do_getaddr+0x13c>
          msg->err = ERR_CONN;
 203c280:	e0bfff17 	ldw	r2,-4(fp)
 203c284:	00fffcc4 	movi	r3,-13
 203c288:	10c00105 	stb	r3,4(r2)
        } else {
          *(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 203c28c:	00001c06 	br	203c300 <do_getaddr+0x1ac>
        *(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
      } else {
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
          msg->err = ERR_CONN;
        } else {
          *(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 203c290:	e0bfff17 	ldw	r2,-4(fp)
 203c294:	10800317 	ldw	r2,12(r2)
 203c298:	e0ffff17 	ldw	r3,-4(fp)
 203c29c:	18c00017 	ldw	r3,0(r3)
 203c2a0:	18c00217 	ldw	r3,8(r3)
 203c2a4:	18c0050b 	ldhu	r3,20(r3)
 203c2a8:	10c0000d 	sth	r3,0(r2)
        }
      }
      break;
 203c2ac:	00001406 	br	203c300 <do_getaddr+0x1ac>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      *(msg->msg.ad.port) = (msg->msg.ad.local?msg->conn->pcb.tcp->local_port:msg->conn->pcb.tcp->remote_port);
 203c2b0:	e0bfff17 	ldw	r2,-4(fp)
 203c2b4:	10c00317 	ldw	r3,12(r2)
 203c2b8:	e0bfff17 	ldw	r2,-4(fp)
 203c2bc:	10800403 	ldbu	r2,16(r2)
 203c2c0:	10803fcc 	andi	r2,r2,255
 203c2c4:	10000526 	beq	r2,zero,203c2dc <do_getaddr+0x188>
 203c2c8:	e0bfff17 	ldw	r2,-4(fp)
 203c2cc:	10800017 	ldw	r2,0(r2)
 203c2d0:	10800217 	ldw	r2,8(r2)
 203c2d4:	1080078b 	ldhu	r2,30(r2)
 203c2d8:	00000406 	br	203c2ec <do_getaddr+0x198>
 203c2dc:	e0bfff17 	ldw	r2,-4(fp)
 203c2e0:	10800017 	ldw	r2,0(r2)
 203c2e4:	10800217 	ldw	r2,8(r2)
 203c2e8:	1080080b 	ldhu	r2,32(r2)
 203c2ec:	1880000d 	sth	r2,0(r3)
      break;
 203c2f0:	00000306 	br	203c300 <do_getaddr+0x1ac>
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
      break;
    }
  } else {
    msg->err = ERR_CONN;
 203c2f4:	e0bfff17 	ldw	r2,-4(fp)
 203c2f8:	00fffcc4 	movi	r3,-13
 203c2fc:	10c00105 	stb	r3,4(r2)
  }
  TCPIP_APIMSG_ACK(msg);
 203c300:	e0bfff17 	ldw	r2,-4(fp)
 203c304:	10800017 	ldw	r2,0(r2)
 203c308:	10800404 	addi	r2,r2,16
 203c30c:	1009883a 	mov	r4,r2
 203c310:	2014df00 	call	2014df0 <sys_sem_signal>
}
 203c314:	0001883a 	nop
 203c318:	e037883a 	mov	sp,fp
 203c31c:	dfc00117 	ldw	ra,4(sp)
 203c320:	df000017 	ldw	fp,0(sp)
 203c324:	dec00204 	addi	sp,sp,8
 203c328:	f800283a 	ret

0203c32c <do_close>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_close(struct api_msg_msg *msg)
{
 203c32c:	defffd04 	addi	sp,sp,-12
 203c330:	dfc00215 	stw	ra,8(sp)
 203c334:	df000115 	stw	fp,4(sp)
 203c338:	df000104 	addi	fp,sp,4
 203c33c:	e13fff15 	stw	r4,-4(fp)
#if LWIP_TCP
  /* @todo: abort running write/connect? */
  if ((msg->conn->state != NETCONN_NONE) && (msg->conn->state != NETCONN_LISTEN)) {
 203c340:	e0bfff17 	ldw	r2,-4(fp)
 203c344:	10800017 	ldw	r2,0(r2)
 203c348:	10800117 	ldw	r2,4(r2)
 203c34c:	10000926 	beq	r2,zero,203c374 <do_close+0x48>
 203c350:	e0bfff17 	ldw	r2,-4(fp)
 203c354:	10800017 	ldw	r2,0(r2)
 203c358:	10800117 	ldw	r2,4(r2)
 203c35c:	108000a0 	cmpeqi	r2,r2,2
 203c360:	1000041e 	bne	r2,zero,203c374 <do_close+0x48>
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
    msg->err = ERR_INPROGRESS;
 203c364:	e0bfff17 	ldw	r2,-4(fp)
 203c368:	00fffec4 	movi	r3,-5
 203c36c:	10c00105 	stb	r3,4(r2)
 203c370:	00003006 	br	203c434 <do_close+0x108>
  } else if ((msg->conn->pcb.tcp != NULL) && (msg->conn->type == NETCONN_TCP)) {
 203c374:	e0bfff17 	ldw	r2,-4(fp)
 203c378:	10800017 	ldw	r2,0(r2)
 203c37c:	10800217 	ldw	r2,8(r2)
 203c380:	10002926 	beq	r2,zero,203c428 <do_close+0xfc>
 203c384:	e0bfff17 	ldw	r2,-4(fp)
 203c388:	10800017 	ldw	r2,0(r2)
 203c38c:	10800017 	ldw	r2,0(r2)
 203c390:	10800418 	cmpnei	r2,r2,16
 203c394:	1000241e 	bne	r2,zero,203c428 <do_close+0xfc>
    if ((msg->msg.sd.shut != NETCONN_SHUT_RDWR) && (msg->conn->state == NETCONN_LISTEN)) {
 203c398:	e0bfff17 	ldw	r2,-4(fp)
 203c39c:	10800203 	ldbu	r2,8(r2)
 203c3a0:	10803fcc 	andi	r2,r2,255
 203c3a4:	108000e0 	cmpeqi	r2,r2,3
 203c3a8:	1000091e 	bne	r2,zero,203c3d0 <do_close+0xa4>
 203c3ac:	e0bfff17 	ldw	r2,-4(fp)
 203c3b0:	10800017 	ldw	r2,0(r2)
 203c3b4:	10800117 	ldw	r2,4(r2)
 203c3b8:	10800098 	cmpnei	r2,r2,2
 203c3bc:	1000041e 	bne	r2,zero,203c3d0 <do_close+0xa4>
      /* LISTEN doesn't support half shutdown */
      msg->err = ERR_CONN;
 203c3c0:	e0bfff17 	ldw	r2,-4(fp)
 203c3c4:	00fffcc4 	movi	r3,-13
 203c3c8:	10c00105 	stb	r3,4(r2)
  if ((msg->conn->state != NETCONN_NONE) && (msg->conn->state != NETCONN_LISTEN)) {
    /* this only happens for TCP netconns */
    LWIP_ASSERT("msg->conn->type == NETCONN_TCP", msg->conn->type == NETCONN_TCP);
    msg->err = ERR_INPROGRESS;
  } else if ((msg->conn->pcb.tcp != NULL) && (msg->conn->type == NETCONN_TCP)) {
    if ((msg->msg.sd.shut != NETCONN_SHUT_RDWR) && (msg->conn->state == NETCONN_LISTEN)) {
 203c3cc:	00001906 	br	203c434 <do_close+0x108>
      /* LISTEN doesn't support half shutdown */
      msg->err = ERR_CONN;
    } else {
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 203c3d0:	e0bfff17 	ldw	r2,-4(fp)
 203c3d4:	10800203 	ldbu	r2,8(r2)
 203c3d8:	10803fcc 	andi	r2,r2,255
 203c3dc:	1080004c 	andi	r2,r2,1
 203c3e0:	10000426 	beq	r2,zero,203c3f4 <do_close+0xc8>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 203c3e4:	e0bfff17 	ldw	r2,-4(fp)
 203c3e8:	10800017 	ldw	r2,0(r2)
 203c3ec:	1009883a 	mov	r4,r2
 203c3f0:	203ac800 	call	203ac80 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 203c3f4:	e0bfff17 	ldw	r2,-4(fp)
 203c3f8:	10800017 	ldw	r2,0(r2)
 203c3fc:	00c00104 	movi	r3,4
 203c400:	10c00115 	stw	r3,4(r2)
      msg->conn->current_msg = msg;
 203c404:	e0bfff17 	ldw	r2,-4(fp)
 203c408:	10800017 	ldw	r2,0(r2)
 203c40c:	e0ffff17 	ldw	r3,-4(fp)
 203c410:	10c00b15 	stw	r3,44(r2)
      do_close_internal(msg->conn);
 203c414:	e0bfff17 	ldw	r2,-4(fp)
 203c418:	10800017 	ldw	r2,0(r2)
 203c41c:	1009883a 	mov	r4,r2
 203c420:	203adfc0 	call	203adfc <do_close_internal>
      /* for tcp netconns, do_close_internal ACKs the message */
      return;
 203c424:	00000806 	br	203c448 <do_close+0x11c>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_VAL;
 203c428:	e0bfff17 	ldw	r2,-4(fp)
 203c42c:	00fffe84 	movi	r3,-6
 203c430:	10c00105 	stb	r3,4(r2)
  }
  sys_sem_signal(&msg->conn->op_completed);
 203c434:	e0bfff17 	ldw	r2,-4(fp)
 203c438:	10800017 	ldw	r2,0(r2)
 203c43c:	10800404 	addi	r2,r2,16
 203c440:	1009883a 	mov	r4,r2
 203c444:	2014df00 	call	2014df0 <sys_sem_signal>
}
 203c448:	e037883a 	mov	sp,fp
 203c44c:	dfc00117 	ldw	ra,4(sp)
 203c450:	df000017 	ldw	fp,0(sp)
 203c454:	dec00204 	addi	sp,sp,8
 203c458:	f800283a 	ret

0203c45c <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 203c45c:	defffd04 	addi	sp,sp,-12
 203c460:	dfc00215 	stw	ra,8(sp)
 203c464:	df000115 	stw	fp,4(sp)
 203c468:	df000104 	addi	fp,sp,4
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 203c46c:	010001c4 	movi	r4,7
 203c470:	20342e00 	call	20342e0 <memp_malloc>
 203c474:	e0bfff15 	stw	r2,-4(fp)
  if (buf != NULL) {
 203c478:	e0bfff17 	ldw	r2,-4(fp)
 203c47c:	10000e26 	beq	r2,zero,203c4b8 <netbuf_new+0x5c>
    buf->p = NULL;
 203c480:	e0bfff17 	ldw	r2,-4(fp)
 203c484:	10000015 	stw	zero,0(r2)
    buf->ptr = NULL;
 203c488:	e0bfff17 	ldw	r2,-4(fp)
 203c48c:	10000115 	stw	zero,4(r2)
    ip_addr_set_any(&buf->addr);
 203c490:	e0bfff17 	ldw	r2,-4(fp)
 203c494:	10000215 	stw	zero,8(r2)
    buf->port = 0;
 203c498:	e0bfff17 	ldw	r2,-4(fp)
 203c49c:	1000030d 	sth	zero,12(r2)
#if LWIP_NETBUF_RECVINFO || LWIP_CHECKSUM_ON_COPY
#if LWIP_CHECKSUM_ON_COPY
    buf->flags = 0;
 203c4a0:	e0bfff17 	ldw	r2,-4(fp)
 203c4a4:	10000385 	stb	zero,14(r2)
#endif /* LWIP_CHECKSUM_ON_COPY */
    buf->toport_chksum = 0;
 203c4a8:	e0bfff17 	ldw	r2,-4(fp)
 203c4ac:	1000040d 	sth	zero,16(r2)
#if LWIP_NETBUF_RECVINFO
    ip_addr_set_any(&buf->toaddr);
#endif /* LWIP_NETBUF_RECVINFO */
#endif /* LWIP_NETBUF_RECVINFO || LWIP_CHECKSUM_ON_COPY */
    return buf;
 203c4b0:	e0bfff17 	ldw	r2,-4(fp)
 203c4b4:	00000106 	br	203c4bc <netbuf_new+0x60>
  } else {
    return NULL;
 203c4b8:	0005883a 	mov	r2,zero
  }
}
 203c4bc:	e037883a 	mov	sp,fp
 203c4c0:	dfc00117 	ldw	ra,4(sp)
 203c4c4:	df000017 	ldw	fp,0(sp)
 203c4c8:	dec00204 	addi	sp,sp,8
 203c4cc:	f800283a 	ret

0203c4d0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 203c4d0:	defffd04 	addi	sp,sp,-12
 203c4d4:	dfc00215 	stw	ra,8(sp)
 203c4d8:	df000115 	stw	fp,4(sp)
 203c4dc:	df000104 	addi	fp,sp,4
 203c4e0:	e13fff15 	stw	r4,-4(fp)
  if (buf != NULL) {
 203c4e4:	e0bfff17 	ldw	r2,-4(fp)
 203c4e8:	10001026 	beq	r2,zero,203c52c <netbuf_delete+0x5c>
    if (buf->p != NULL) {
 203c4ec:	e0bfff17 	ldw	r2,-4(fp)
 203c4f0:	10800017 	ldw	r2,0(r2)
 203c4f4:	10000a26 	beq	r2,zero,203c520 <netbuf_delete+0x50>
      pbuf_free(buf->p);
 203c4f8:	e0bfff17 	ldw	r2,-4(fp)
 203c4fc:	10800017 	ldw	r2,0(r2)
 203c500:	1009883a 	mov	r4,r2
 203c504:	201aa200 	call	201aa20 <pbuf_free>
      buf->p = buf->ptr = NULL;
 203c508:	e0bfff17 	ldw	r2,-4(fp)
 203c50c:	10000115 	stw	zero,4(r2)
 203c510:	e0bfff17 	ldw	r2,-4(fp)
 203c514:	10c00117 	ldw	r3,4(r2)
 203c518:	e0bfff17 	ldw	r2,-4(fp)
 203c51c:	10c00015 	stw	r3,0(r2)
    }
    memp_free(MEMP_NETBUF, buf);
 203c520:	e17fff17 	ldw	r5,-4(fp)
 203c524:	010001c4 	movi	r4,7
 203c528:	20344ac0 	call	20344ac <memp_free>
  }
}
 203c52c:	0001883a 	nop
 203c530:	e037883a 	mov	sp,fp
 203c534:	dfc00117 	ldw	ra,4(sp)
 203c538:	df000017 	ldw	fp,0(sp)
 203c53c:	dec00204 	addi	sp,sp,8
 203c540:	f800283a 	ret

0203c544 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 203c544:	defffc04 	addi	sp,sp,-16
 203c548:	dfc00315 	stw	ra,12(sp)
 203c54c:	df000215 	stw	fp,8(sp)
 203c550:	df000204 	addi	fp,sp,8
 203c554:	e13ffe15 	stw	r4,-8(fp)
 203c558:	2805883a 	mov	r2,r5
 203c55c:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 203c560:	e0bffe17 	ldw	r2,-8(fp)
 203c564:	1000091e 	bne	r2,zero,203c58c <netbuf_alloc+0x48>
 203c568:	01c08134 	movhi	r7,516
 203c56c:	39ce0404 	addi	r7,r7,14352
 203c570:	01801b44 	movi	r6,109
 203c574:	01408134 	movhi	r5,516
 203c578:	294e0a04 	addi	r5,r5,14376
 203c57c:	01008134 	movhi	r4,516
 203c580:	210e1104 	addi	r4,r4,14404
 203c584:	20009e40 	call	20009e4 <printf>
 203c588:	003fff06 	br	203c588 <__alt_mem_mem_0+0xfd01c588>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 203c58c:	e0bffe17 	ldw	r2,-8(fp)
 203c590:	10800017 	ldw	r2,0(r2)
 203c594:	10000426 	beq	r2,zero,203c5a8 <netbuf_alloc+0x64>
    pbuf_free(buf->p);
 203c598:	e0bffe17 	ldw	r2,-8(fp)
 203c59c:	10800017 	ldw	r2,0(r2)
 203c5a0:	1009883a 	mov	r4,r2
 203c5a4:	201aa200 	call	201aa20 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 203c5a8:	e0bfff0b 	ldhu	r2,-4(fp)
 203c5ac:	000d883a 	mov	r6,zero
 203c5b0:	100b883a 	mov	r5,r2
 203c5b4:	0009883a 	mov	r4,zero
 203c5b8:	201a2640 	call	201a264 <pbuf_alloc>
 203c5bc:	1007883a 	mov	r3,r2
 203c5c0:	e0bffe17 	ldw	r2,-8(fp)
 203c5c4:	10c00015 	stw	r3,0(r2)
  if (buf->p == NULL) {
 203c5c8:	e0bffe17 	ldw	r2,-8(fp)
 203c5cc:	10800017 	ldw	r2,0(r2)
 203c5d0:	1000021e 	bne	r2,zero,203c5dc <netbuf_alloc+0x98>
     return NULL;
 203c5d4:	0005883a 	mov	r2,zero
 203c5d8:	00000706 	br	203c5f8 <netbuf_alloc+0xb4>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
             (buf->p->len >= size));
  buf->ptr = buf->p;
 203c5dc:	e0bffe17 	ldw	r2,-8(fp)
 203c5e0:	10c00017 	ldw	r3,0(r2)
 203c5e4:	e0bffe17 	ldw	r2,-8(fp)
 203c5e8:	10c00115 	stw	r3,4(r2)
  return buf->p->payload;
 203c5ec:	e0bffe17 	ldw	r2,-8(fp)
 203c5f0:	10800017 	ldw	r2,0(r2)
 203c5f4:	10800117 	ldw	r2,4(r2)
}
 203c5f8:	e037883a 	mov	sp,fp
 203c5fc:	dfc00117 	ldw	ra,4(sp)
 203c600:	df000017 	ldw	fp,0(sp)
 203c604:	dec00204 	addi	sp,sp,8
 203c608:	f800283a 	ret

0203c60c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 203c60c:	defffd04 	addi	sp,sp,-12
 203c610:	dfc00215 	stw	ra,8(sp)
 203c614:	df000115 	stw	fp,4(sp)
 203c618:	df000104 	addi	fp,sp,4
 203c61c:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 203c620:	e0bfff17 	ldw	r2,-4(fp)
 203c624:	1000091e 	bne	r2,zero,203c64c <netbuf_free+0x40>
 203c628:	01c08134 	movhi	r7,516
 203c62c:	39ce0404 	addi	r7,r7,14352
 203c630:	01802144 	movi	r6,133
 203c634:	01408134 	movhi	r5,516
 203c638:	294e1d04 	addi	r5,r5,14452
 203c63c:	01008134 	movhi	r4,516
 203c640:	210e1104 	addi	r4,r4,14404
 203c644:	20009e40 	call	20009e4 <printf>
 203c648:	003fff06 	br	203c648 <__alt_mem_mem_0+0xfd01c648>
  if (buf->p != NULL) {
 203c64c:	e0bfff17 	ldw	r2,-4(fp)
 203c650:	10800017 	ldw	r2,0(r2)
 203c654:	10000426 	beq	r2,zero,203c668 <netbuf_free+0x5c>
    pbuf_free(buf->p);
 203c658:	e0bfff17 	ldw	r2,-4(fp)
 203c65c:	10800017 	ldw	r2,0(r2)
 203c660:	1009883a 	mov	r4,r2
 203c664:	201aa200 	call	201aa20 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 203c668:	e0bfff17 	ldw	r2,-4(fp)
 203c66c:	10000115 	stw	zero,4(r2)
 203c670:	e0bfff17 	ldw	r2,-4(fp)
 203c674:	10c00117 	ldw	r3,4(r2)
 203c678:	e0bfff17 	ldw	r2,-4(fp)
 203c67c:	10c00015 	stw	r3,0(r2)
}
 203c680:	0001883a 	nop
 203c684:	e037883a 	mov	sp,fp
 203c688:	dfc00117 	ldw	ra,4(sp)
 203c68c:	df000017 	ldw	fp,0(sp)
 203c690:	dec00204 	addi	sp,sp,8
 203c694:	f800283a 	ret

0203c698 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 203c698:	defffb04 	addi	sp,sp,-20
 203c69c:	dfc00415 	stw	ra,16(sp)
 203c6a0:	df000315 	stw	fp,12(sp)
 203c6a4:	df000304 	addi	fp,sp,12
 203c6a8:	e13ffd15 	stw	r4,-12(fp)
 203c6ac:	e17ffe15 	stw	r5,-8(fp)
 203c6b0:	3005883a 	mov	r2,r6
 203c6b4:	e0bfff0d 	sth	r2,-4(fp)
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 203c6b8:	e0bffd17 	ldw	r2,-12(fp)
 203c6bc:	1000091e 	bne	r2,zero,203c6e4 <netbuf_ref+0x4c>
 203c6c0:	01c08134 	movhi	r7,516
 203c6c4:	39ce0404 	addi	r7,r7,14352
 203c6c8:	01802604 	movi	r6,152
 203c6cc:	01408134 	movhi	r5,516
 203c6d0:	294e2404 	addi	r5,r5,14480
 203c6d4:	01008134 	movhi	r4,516
 203c6d8:	210e1104 	addi	r4,r4,14404
 203c6dc:	20009e40 	call	20009e4 <printf>
 203c6e0:	003fff06 	br	203c6e0 <__alt_mem_mem_0+0xfd01c6e0>
  if (buf->p != NULL) {
 203c6e4:	e0bffd17 	ldw	r2,-12(fp)
 203c6e8:	10800017 	ldw	r2,0(r2)
 203c6ec:	10000426 	beq	r2,zero,203c700 <netbuf_ref+0x68>
    pbuf_free(buf->p);
 203c6f0:	e0bffd17 	ldw	r2,-12(fp)
 203c6f4:	10800017 	ldw	r2,0(r2)
 203c6f8:	1009883a 	mov	r4,r2
 203c6fc:	201aa200 	call	201aa20 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 203c700:	01800084 	movi	r6,2
 203c704:	000b883a 	mov	r5,zero
 203c708:	0009883a 	mov	r4,zero
 203c70c:	201a2640 	call	201a264 <pbuf_alloc>
 203c710:	1007883a 	mov	r3,r2
 203c714:	e0bffd17 	ldw	r2,-12(fp)
 203c718:	10c00015 	stw	r3,0(r2)
  if (buf->p == NULL) {
 203c71c:	e0bffd17 	ldw	r2,-12(fp)
 203c720:	10800017 	ldw	r2,0(r2)
 203c724:	1000041e 	bne	r2,zero,203c738 <netbuf_ref+0xa0>
    buf->ptr = NULL;
 203c728:	e0bffd17 	ldw	r2,-12(fp)
 203c72c:	10000115 	stw	zero,4(r2)
    return ERR_MEM;
 203c730:	00bfffc4 	movi	r2,-1
 203c734:	00001106 	br	203c77c <netbuf_ref+0xe4>
  }
  buf->p->payload = (void*)dataptr;
 203c738:	e0bffd17 	ldw	r2,-12(fp)
 203c73c:	10800017 	ldw	r2,0(r2)
 203c740:	e0fffe17 	ldw	r3,-8(fp)
 203c744:	10c00115 	stw	r3,4(r2)
  buf->p->len = buf->p->tot_len = size;
 203c748:	e0bffd17 	ldw	r2,-12(fp)
 203c74c:	10c00017 	ldw	r3,0(r2)
 203c750:	e0bffd17 	ldw	r2,-12(fp)
 203c754:	10800017 	ldw	r2,0(r2)
 203c758:	e13fff0b 	ldhu	r4,-4(fp)
 203c75c:	1100020d 	sth	r4,8(r2)
 203c760:	1080020b 	ldhu	r2,8(r2)
 203c764:	1880028d 	sth	r2,10(r3)
  buf->ptr = buf->p;
 203c768:	e0bffd17 	ldw	r2,-12(fp)
 203c76c:	10c00017 	ldw	r3,0(r2)
 203c770:	e0bffd17 	ldw	r2,-12(fp)
 203c774:	10c00115 	stw	r3,4(r2)
  return ERR_OK;
 203c778:	0005883a 	mov	r2,zero
}
 203c77c:	e037883a 	mov	sp,fp
 203c780:	dfc00117 	ldw	ra,4(sp)
 203c784:	df000017 	ldw	fp,0(sp)
 203c788:	dec00204 	addi	sp,sp,8
 203c78c:	f800283a 	ret

0203c790 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
 203c790:	defffc04 	addi	sp,sp,-16
 203c794:	dfc00315 	stw	ra,12(sp)
 203c798:	df000215 	stw	fp,8(sp)
 203c79c:	df000204 	addi	fp,sp,8
 203c7a0:	e13ffe15 	stw	r4,-8(fp)
 203c7a4:	e17fff15 	stw	r5,-4(fp)
  LWIP_ERROR("netbuf_ref: invalid head", (head != NULL), return;);
 203c7a8:	e0bffe17 	ldw	r2,-8(fp)
 203c7ac:	1000091e 	bne	r2,zero,203c7d4 <netbuf_chain+0x44>
 203c7b0:	01c08134 	movhi	r7,516
 203c7b4:	39ce0404 	addi	r7,r7,14352
 203c7b8:	01802c04 	movi	r6,176
 203c7bc:	01408134 	movhi	r5,516
 203c7c0:	294e2a04 	addi	r5,r5,14504
 203c7c4:	01008134 	movhi	r4,516
 203c7c8:	210e1104 	addi	r4,r4,14404
 203c7cc:	20009e40 	call	20009e4 <printf>
 203c7d0:	003fff06 	br	203c7d0 <__alt_mem_mem_0+0xfd01c7d0>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
 203c7d4:	e0bfff17 	ldw	r2,-4(fp)
 203c7d8:	1000091e 	bne	r2,zero,203c800 <netbuf_chain+0x70>
 203c7dc:	01c08134 	movhi	r7,516
 203c7e0:	39ce0404 	addi	r7,r7,14352
 203c7e4:	01802c44 	movi	r6,177
 203c7e8:	01408134 	movhi	r5,516
 203c7ec:	294e3104 	addi	r5,r5,14532
 203c7f0:	01008134 	movhi	r4,516
 203c7f4:	210e1104 	addi	r4,r4,14404
 203c7f8:	20009e40 	call	20009e4 <printf>
 203c7fc:	003fff06 	br	203c7fc <__alt_mem_mem_0+0xfd01c7fc>
  pbuf_cat(head->p, tail->p);
 203c800:	e0bffe17 	ldw	r2,-8(fp)
 203c804:	10c00017 	ldw	r3,0(r2)
 203c808:	e0bfff17 	ldw	r2,-4(fp)
 203c80c:	10800017 	ldw	r2,0(r2)
 203c810:	100b883a 	mov	r5,r2
 203c814:	1809883a 	mov	r4,r3
 203c818:	201ac140 	call	201ac14 <pbuf_cat>
  head->ptr = head->p;
 203c81c:	e0bffe17 	ldw	r2,-8(fp)
 203c820:	10c00017 	ldw	r3,0(r2)
 203c824:	e0bffe17 	ldw	r2,-8(fp)
 203c828:	10c00115 	stw	r3,4(r2)
  memp_free(MEMP_NETBUF, tail);
 203c82c:	e17fff17 	ldw	r5,-4(fp)
 203c830:	010001c4 	movi	r4,7
 203c834:	20344ac0 	call	20344ac <memp_free>
}
 203c838:	0001883a 	nop
 203c83c:	e037883a 	mov	sp,fp
 203c840:	dfc00117 	ldw	ra,4(sp)
 203c844:	df000017 	ldw	fp,0(sp)
 203c848:	dec00204 	addi	sp,sp,8
 203c84c:	f800283a 	ret

0203c850 <netbuf_data>:
 * @return ERR_OK if the information was retreived,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 203c850:	defffb04 	addi	sp,sp,-20
 203c854:	dfc00415 	stw	ra,16(sp)
 203c858:	df000315 	stw	fp,12(sp)
 203c85c:	df000304 	addi	fp,sp,12
 203c860:	e13ffd15 	stw	r4,-12(fp)
 203c864:	e17ffe15 	stw	r5,-8(fp)
 203c868:	e1bfff15 	stw	r6,-4(fp)
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 203c86c:	e0bffd17 	ldw	r2,-12(fp)
 203c870:	1000091e 	bne	r2,zero,203c898 <netbuf_data+0x48>
 203c874:	01c08134 	movhi	r7,516
 203c878:	39ce0404 	addi	r7,r7,14352
 203c87c:	018030c4 	movi	r6,195
 203c880:	01408134 	movhi	r5,516
 203c884:	294e3804 	addi	r5,r5,14560
 203c888:	01008134 	movhi	r4,516
 203c88c:	210e1104 	addi	r4,r4,14404
 203c890:	20009e40 	call	20009e4 <printf>
 203c894:	003fff06 	br	203c894 <__alt_mem_mem_0+0xfd01c894>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 203c898:	e0bffe17 	ldw	r2,-8(fp)
 203c89c:	1000091e 	bne	r2,zero,203c8c4 <netbuf_data+0x74>
 203c8a0:	01c08134 	movhi	r7,516
 203c8a4:	39ce0404 	addi	r7,r7,14352
 203c8a8:	01803104 	movi	r6,196
 203c8ac:	01408134 	movhi	r5,516
 203c8b0:	294e3f04 	addi	r5,r5,14588
 203c8b4:	01008134 	movhi	r4,516
 203c8b8:	210e1104 	addi	r4,r4,14404
 203c8bc:	20009e40 	call	20009e4 <printf>
 203c8c0:	003fff06 	br	203c8c0 <__alt_mem_mem_0+0xfd01c8c0>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 203c8c4:	e0bfff17 	ldw	r2,-4(fp)
 203c8c8:	1000091e 	bne	r2,zero,203c8f0 <netbuf_data+0xa0>
 203c8cc:	01c08134 	movhi	r7,516
 203c8d0:	39ce0404 	addi	r7,r7,14352
 203c8d4:	01803144 	movi	r6,197
 203c8d8:	01408134 	movhi	r5,516
 203c8dc:	294e4704 	addi	r5,r5,14620
 203c8e0:	01008134 	movhi	r4,516
 203c8e4:	210e1104 	addi	r4,r4,14404
 203c8e8:	20009e40 	call	20009e4 <printf>
 203c8ec:	003fff06 	br	203c8ec <__alt_mem_mem_0+0xfd01c8ec>

  if (buf->ptr == NULL) {
 203c8f0:	e0bffd17 	ldw	r2,-12(fp)
 203c8f4:	10800117 	ldw	r2,4(r2)
 203c8f8:	1000021e 	bne	r2,zero,203c904 <netbuf_data+0xb4>
    return ERR_BUF;
 203c8fc:	00bfff84 	movi	r2,-2
 203c900:	00000b06 	br	203c930 <netbuf_data+0xe0>
  }
  *dataptr = buf->ptr->payload;
 203c904:	e0bffd17 	ldw	r2,-12(fp)
 203c908:	10800117 	ldw	r2,4(r2)
 203c90c:	10c00117 	ldw	r3,4(r2)
 203c910:	e0bffe17 	ldw	r2,-8(fp)
 203c914:	10c00015 	stw	r3,0(r2)
  *len = buf->ptr->len;
 203c918:	e0bffd17 	ldw	r2,-12(fp)
 203c91c:	10800117 	ldw	r2,4(r2)
 203c920:	10c0028b 	ldhu	r3,10(r2)
 203c924:	e0bfff17 	ldw	r2,-4(fp)
 203c928:	10c0000d 	sth	r3,0(r2)
  return ERR_OK;
 203c92c:	0005883a 	mov	r2,zero
}
 203c930:	e037883a 	mov	sp,fp
 203c934:	dfc00117 	ldw	ra,4(sp)
 203c938:	df000017 	ldw	fp,0(sp)
 203c93c:	dec00204 	addi	sp,sp,8
 203c940:	f800283a 	ret

0203c944 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 203c944:	defffd04 	addi	sp,sp,-12
 203c948:	dfc00215 	stw	ra,8(sp)
 203c94c:	df000115 	stw	fp,4(sp)
 203c950:	df000104 	addi	fp,sp,4
 203c954:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return -1;);
 203c958:	e0bfff17 	ldw	r2,-4(fp)
 203c95c:	1000091e 	bne	r2,zero,203c984 <netbuf_next+0x40>
 203c960:	01c08134 	movhi	r7,516
 203c964:	39ce0404 	addi	r7,r7,14352
 203c968:	01803704 	movi	r6,220
 203c96c:	01408134 	movhi	r5,516
 203c970:	294e1d04 	addi	r5,r5,14452
 203c974:	01008134 	movhi	r4,516
 203c978:	210e1104 	addi	r4,r4,14404
 203c97c:	20009e40 	call	20009e4 <printf>
 203c980:	003fff06 	br	203c980 <__alt_mem_mem_0+0xfd01c980>
  if (buf->ptr->next == NULL) {
 203c984:	e0bfff17 	ldw	r2,-4(fp)
 203c988:	10800117 	ldw	r2,4(r2)
 203c98c:	10800017 	ldw	r2,0(r2)
 203c990:	1000021e 	bne	r2,zero,203c99c <netbuf_next+0x58>
    return -1;
 203c994:	00bfffc4 	movi	r2,-1
 203c998:	00000c06 	br	203c9cc <netbuf_next+0x88>
  }
  buf->ptr = buf->ptr->next;
 203c99c:	e0bfff17 	ldw	r2,-4(fp)
 203c9a0:	10800117 	ldw	r2,4(r2)
 203c9a4:	10c00017 	ldw	r3,0(r2)
 203c9a8:	e0bfff17 	ldw	r2,-4(fp)
 203c9ac:	10c00115 	stw	r3,4(r2)
  if (buf->ptr->next == NULL) {
 203c9b0:	e0bfff17 	ldw	r2,-4(fp)
 203c9b4:	10800117 	ldw	r2,4(r2)
 203c9b8:	10800017 	ldw	r2,0(r2)
 203c9bc:	1000021e 	bne	r2,zero,203c9c8 <netbuf_next+0x84>
    return 1;
 203c9c0:	00800044 	movi	r2,1
 203c9c4:	00000106 	br	203c9cc <netbuf_next+0x88>
  }
  return 0;
 203c9c8:	0005883a 	mov	r2,zero
}
 203c9cc:	e037883a 	mov	sp,fp
 203c9d0:	dfc00117 	ldw	ra,4(sp)
 203c9d4:	df000017 	ldw	fp,0(sp)
 203c9d8:	dec00204 	addi	sp,sp,8
 203c9dc:	f800283a 	ret

0203c9e0 <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
 203c9e0:	defffd04 	addi	sp,sp,-12
 203c9e4:	dfc00215 	stw	ra,8(sp)
 203c9e8:	df000115 	stw	fp,4(sp)
 203c9ec:	df000104 	addi	fp,sp,4
 203c9f0:	e13fff15 	stw	r4,-4(fp)
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 203c9f4:	e0bfff17 	ldw	r2,-4(fp)
 203c9f8:	1000091e 	bne	r2,zero,203ca20 <netbuf_first+0x40>
 203c9fc:	01c08134 	movhi	r7,516
 203ca00:	39ce0404 	addi	r7,r7,14352
 203ca04:	01803c44 	movi	r6,241
 203ca08:	01408134 	movhi	r5,516
 203ca0c:	294e1d04 	addi	r5,r5,14452
 203ca10:	01008134 	movhi	r4,516
 203ca14:	210e1104 	addi	r4,r4,14404
 203ca18:	20009e40 	call	20009e4 <printf>
 203ca1c:	003fff06 	br	203ca1c <__alt_mem_mem_0+0xfd01ca1c>
  buf->ptr = buf->p;
 203ca20:	e0bfff17 	ldw	r2,-4(fp)
 203ca24:	10c00017 	ldw	r3,0(r2)
 203ca28:	e0bfff17 	ldw	r2,-4(fp)
 203ca2c:	10c00115 	stw	r3,4(r2)
}
 203ca30:	0001883a 	nop
 203ca34:	e037883a 	mov	sp,fp
 203ca38:	dfc00117 	ldw	ra,4(sp)
 203ca3c:	df000017 	ldw	fp,0(sp)
 203ca40:	dec00204 	addi	sp,sp,8
 203ca44:	f800283a 	ret

0203ca48 <atexit>:
 203ca48:	200b883a 	mov	r5,r4
 203ca4c:	000f883a 	mov	r7,zero
 203ca50:	000d883a 	mov	r6,zero
 203ca54:	0009883a 	mov	r4,zero
 203ca58:	203f1981 	jmpi	203f198 <__register_exitproc>

0203ca5c <exit>:
 203ca5c:	defffe04 	addi	sp,sp,-8
 203ca60:	000b883a 	mov	r5,zero
 203ca64:	dc000015 	stw	r16,0(sp)
 203ca68:	dfc00115 	stw	ra,4(sp)
 203ca6c:	2021883a 	mov	r16,r4
 203ca70:	203f2b00 	call	203f2b0 <__call_exitprocs>
 203ca74:	00808134 	movhi	r2,516
 203ca78:	1095e704 	addi	r2,r2,22428
 203ca7c:	11000017 	ldw	r4,0(r2)
 203ca80:	20800f17 	ldw	r2,60(r4)
 203ca84:	10000126 	beq	r2,zero,203ca8c <exit+0x30>
 203ca88:	103ee83a 	callr	r2
 203ca8c:	8009883a 	mov	r4,r16
 203ca90:	204089c0 	call	204089c <_exit>

0203ca94 <malloc>:
 203ca94:	00808134 	movhi	r2,516
 203ca98:	1095e804 	addi	r2,r2,22432
 203ca9c:	200b883a 	mov	r5,r4
 203caa0:	11000017 	ldw	r4,0(r2)
 203caa4:	20055681 	jmpi	2005568 <_malloc_r>

0203caa8 <free>:
 203caa8:	00808134 	movhi	r2,516
 203caac:	1095e804 	addi	r2,r2,22432
 203cab0:	200b883a 	mov	r5,r4
 203cab4:	11000017 	ldw	r4,0(r2)
 203cab8:	2004e381 	jmpi	2004e38 <_free_r>

0203cabc <memcmp>:
 203cabc:	01c000c4 	movi	r7,3
 203cac0:	3980192e 	bgeu	r7,r6,203cb28 <memcmp+0x6c>
 203cac4:	2144b03a 	or	r2,r4,r5
 203cac8:	11c4703a 	and	r2,r2,r7
 203cacc:	10000f26 	beq	r2,zero,203cb0c <memcmp+0x50>
 203cad0:	20800003 	ldbu	r2,0(r4)
 203cad4:	28c00003 	ldbu	r3,0(r5)
 203cad8:	10c0151e 	bne	r2,r3,203cb30 <memcmp+0x74>
 203cadc:	31bfff84 	addi	r6,r6,-2
 203cae0:	01ffffc4 	movi	r7,-1
 203cae4:	00000406 	br	203caf8 <memcmp+0x3c>
 203cae8:	20800003 	ldbu	r2,0(r4)
 203caec:	28c00003 	ldbu	r3,0(r5)
 203caf0:	31bfffc4 	addi	r6,r6,-1
 203caf4:	10c00e1e 	bne	r2,r3,203cb30 <memcmp+0x74>
 203caf8:	21000044 	addi	r4,r4,1
 203cafc:	29400044 	addi	r5,r5,1
 203cb00:	31fff91e 	bne	r6,r7,203cae8 <__alt_mem_mem_0+0xfd01cae8>
 203cb04:	0005883a 	mov	r2,zero
 203cb08:	f800283a 	ret
 203cb0c:	20c00017 	ldw	r3,0(r4)
 203cb10:	28800017 	ldw	r2,0(r5)
 203cb14:	18bfee1e 	bne	r3,r2,203cad0 <__alt_mem_mem_0+0xfd01cad0>
 203cb18:	31bfff04 	addi	r6,r6,-4
 203cb1c:	21000104 	addi	r4,r4,4
 203cb20:	29400104 	addi	r5,r5,4
 203cb24:	39bff936 	bltu	r7,r6,203cb0c <__alt_mem_mem_0+0xfd01cb0c>
 203cb28:	303fe91e 	bne	r6,zero,203cad0 <__alt_mem_mem_0+0xfd01cad0>
 203cb2c:	003ff506 	br	203cb04 <__alt_mem_mem_0+0xfd01cb04>
 203cb30:	10c5c83a 	sub	r2,r2,r3
 203cb34:	f800283a 	ret

0203cb38 <_putc_r>:
 203cb38:	defffc04 	addi	sp,sp,-16
 203cb3c:	dc000215 	stw	r16,8(sp)
 203cb40:	dfc00315 	stw	ra,12(sp)
 203cb44:	2021883a 	mov	r16,r4
 203cb48:	20000226 	beq	r4,zero,203cb54 <_putc_r+0x1c>
 203cb4c:	20800e17 	ldw	r2,56(r4)
 203cb50:	10001b26 	beq	r2,zero,203cbc0 <_putc_r+0x88>
 203cb54:	30800217 	ldw	r2,8(r6)
 203cb58:	10bfffc4 	addi	r2,r2,-1
 203cb5c:	30800215 	stw	r2,8(r6)
 203cb60:	10000a16 	blt	r2,zero,203cb8c <_putc_r+0x54>
 203cb64:	30800017 	ldw	r2,0(r6)
 203cb68:	11400005 	stb	r5,0(r2)
 203cb6c:	30800017 	ldw	r2,0(r6)
 203cb70:	10c00044 	addi	r3,r2,1
 203cb74:	30c00015 	stw	r3,0(r6)
 203cb78:	10800003 	ldbu	r2,0(r2)
 203cb7c:	dfc00317 	ldw	ra,12(sp)
 203cb80:	dc000217 	ldw	r16,8(sp)
 203cb84:	dec00404 	addi	sp,sp,16
 203cb88:	f800283a 	ret
 203cb8c:	30c00617 	ldw	r3,24(r6)
 203cb90:	10c00616 	blt	r2,r3,203cbac <_putc_r+0x74>
 203cb94:	30800017 	ldw	r2,0(r6)
 203cb98:	00c00284 	movi	r3,10
 203cb9c:	11400005 	stb	r5,0(r2)
 203cba0:	30800017 	ldw	r2,0(r6)
 203cba4:	11400003 	ldbu	r5,0(r2)
 203cba8:	28fff11e 	bne	r5,r3,203cb70 <__alt_mem_mem_0+0xfd01cb70>
 203cbac:	8009883a 	mov	r4,r16
 203cbb0:	dfc00317 	ldw	ra,12(sp)
 203cbb4:	dc000217 	ldw	r16,8(sp)
 203cbb8:	dec00404 	addi	sp,sp,16
 203cbbc:	2009bf41 	jmpi	2009bf4 <__swbuf_r>
 203cbc0:	d9400015 	stw	r5,0(sp)
 203cbc4:	d9800115 	stw	r6,4(sp)
 203cbc8:	2004cc40 	call	2004cc4 <__sinit>
 203cbcc:	d9800117 	ldw	r6,4(sp)
 203cbd0:	d9400017 	ldw	r5,0(sp)
 203cbd4:	003fdf06 	br	203cb54 <__alt_mem_mem_0+0xfd01cb54>

0203cbd8 <putc>:
 203cbd8:	00808134 	movhi	r2,516
 203cbdc:	defffc04 	addi	sp,sp,-16
 203cbe0:	1095e804 	addi	r2,r2,22432
 203cbe4:	dc000115 	stw	r16,4(sp)
 203cbe8:	14000017 	ldw	r16,0(r2)
 203cbec:	dc400215 	stw	r17,8(sp)
 203cbf0:	dfc00315 	stw	ra,12(sp)
 203cbf4:	2023883a 	mov	r17,r4
 203cbf8:	80000226 	beq	r16,zero,203cc04 <putc+0x2c>
 203cbfc:	80800e17 	ldw	r2,56(r16)
 203cc00:	10001a26 	beq	r2,zero,203cc6c <putc+0x94>
 203cc04:	28800217 	ldw	r2,8(r5)
 203cc08:	10bfffc4 	addi	r2,r2,-1
 203cc0c:	28800215 	stw	r2,8(r5)
 203cc10:	10000b16 	blt	r2,zero,203cc40 <putc+0x68>
 203cc14:	28800017 	ldw	r2,0(r5)
 203cc18:	14400005 	stb	r17,0(r2)
 203cc1c:	28800017 	ldw	r2,0(r5)
 203cc20:	10c00044 	addi	r3,r2,1
 203cc24:	28c00015 	stw	r3,0(r5)
 203cc28:	10800003 	ldbu	r2,0(r2)
 203cc2c:	dfc00317 	ldw	ra,12(sp)
 203cc30:	dc400217 	ldw	r17,8(sp)
 203cc34:	dc000117 	ldw	r16,4(sp)
 203cc38:	dec00404 	addi	sp,sp,16
 203cc3c:	f800283a 	ret
 203cc40:	28c00617 	ldw	r3,24(r5)
 203cc44:	10c00e16 	blt	r2,r3,203cc80 <putc+0xa8>
 203cc48:	28800017 	ldw	r2,0(r5)
 203cc4c:	01000284 	movi	r4,10
 203cc50:	14400005 	stb	r17,0(r2)
 203cc54:	28800017 	ldw	r2,0(r5)
 203cc58:	10c00003 	ldbu	r3,0(r2)
 203cc5c:	193ff01e 	bne	r3,r4,203cc20 <__alt_mem_mem_0+0xfd01cc20>
 203cc60:	280d883a 	mov	r6,r5
 203cc64:	180b883a 	mov	r5,r3
 203cc68:	00000706 	br	203cc88 <putc+0xb0>
 203cc6c:	8009883a 	mov	r4,r16
 203cc70:	d9400015 	stw	r5,0(sp)
 203cc74:	2004cc40 	call	2004cc4 <__sinit>
 203cc78:	d9400017 	ldw	r5,0(sp)
 203cc7c:	003fe106 	br	203cc04 <__alt_mem_mem_0+0xfd01cc04>
 203cc80:	280d883a 	mov	r6,r5
 203cc84:	880b883a 	mov	r5,r17
 203cc88:	8009883a 	mov	r4,r16
 203cc8c:	dfc00317 	ldw	ra,12(sp)
 203cc90:	dc400217 	ldw	r17,8(sp)
 203cc94:	dc000117 	ldw	r16,4(sp)
 203cc98:	dec00404 	addi	sp,sp,16
 203cc9c:	2009bf41 	jmpi	2009bf4 <__swbuf_r>

0203cca0 <_puts_r>:
 203cca0:	defff604 	addi	sp,sp,-40
 203cca4:	dc000715 	stw	r16,28(sp)
 203cca8:	2021883a 	mov	r16,r4
 203ccac:	2809883a 	mov	r4,r5
 203ccb0:	dc400815 	stw	r17,32(sp)
 203ccb4:	dfc00915 	stw	ra,36(sp)
 203ccb8:	2823883a 	mov	r17,r5
 203ccbc:	20073a40 	call	20073a4 <strlen>
 203ccc0:	10c00044 	addi	r3,r2,1
 203ccc4:	d8800115 	stw	r2,4(sp)
 203ccc8:	00808134 	movhi	r2,516
 203cccc:	108e4e04 	addi	r2,r2,14648
 203ccd0:	d8800215 	stw	r2,8(sp)
 203ccd4:	00800044 	movi	r2,1
 203ccd8:	d8800315 	stw	r2,12(sp)
 203ccdc:	00800084 	movi	r2,2
 203cce0:	dc400015 	stw	r17,0(sp)
 203cce4:	d8c00615 	stw	r3,24(sp)
 203cce8:	dec00415 	stw	sp,16(sp)
 203ccec:	d8800515 	stw	r2,20(sp)
 203ccf0:	80000226 	beq	r16,zero,203ccfc <_puts_r+0x5c>
 203ccf4:	80800e17 	ldw	r2,56(r16)
 203ccf8:	10001426 	beq	r2,zero,203cd4c <_puts_r+0xac>
 203ccfc:	81400217 	ldw	r5,8(r16)
 203cd00:	2880030b 	ldhu	r2,12(r5)
 203cd04:	10c8000c 	andi	r3,r2,8192
 203cd08:	1800061e 	bne	r3,zero,203cd24 <_puts_r+0x84>
 203cd0c:	29001917 	ldw	r4,100(r5)
 203cd10:	00f7ffc4 	movi	r3,-8193
 203cd14:	10880014 	ori	r2,r2,8192
 203cd18:	20c6703a 	and	r3,r4,r3
 203cd1c:	2880030d 	sth	r2,12(r5)
 203cd20:	28c01915 	stw	r3,100(r5)
 203cd24:	d9800404 	addi	r6,sp,16
 203cd28:	8009883a 	mov	r4,r16
 203cd2c:	2008f640 	call	2008f64 <__sfvwrite_r>
 203cd30:	1000091e 	bne	r2,zero,203cd58 <_puts_r+0xb8>
 203cd34:	00800284 	movi	r2,10
 203cd38:	dfc00917 	ldw	ra,36(sp)
 203cd3c:	dc400817 	ldw	r17,32(sp)
 203cd40:	dc000717 	ldw	r16,28(sp)
 203cd44:	dec00a04 	addi	sp,sp,40
 203cd48:	f800283a 	ret
 203cd4c:	8009883a 	mov	r4,r16
 203cd50:	2004cc40 	call	2004cc4 <__sinit>
 203cd54:	003fe906 	br	203ccfc <__alt_mem_mem_0+0xfd01ccfc>
 203cd58:	00bfffc4 	movi	r2,-1
 203cd5c:	003ff606 	br	203cd38 <__alt_mem_mem_0+0xfd01cd38>

0203cd60 <puts>:
 203cd60:	00808134 	movhi	r2,516
 203cd64:	1095e804 	addi	r2,r2,22432
 203cd68:	200b883a 	mov	r5,r4
 203cd6c:	11000017 	ldw	r4,0(r2)
 203cd70:	203cca01 	jmpi	203cca0 <_puts_r>

0203cd74 <_snprintf_r>:
 203cd74:	30003116 	blt	r6,zero,203ce3c <_snprintf_r+0xc8>
 203cd78:	deffe404 	addi	sp,sp,-112
 203cd7c:	00c08204 	movi	r3,520
 203cd80:	dc001a15 	stw	r16,104(sp)
 203cd84:	3005883a 	mov	r2,r6
 203cd88:	dfc01b15 	stw	ra,108(sp)
 203cd8c:	d8c0030d 	sth	r3,12(sp)
 203cd90:	d9400015 	stw	r5,0(sp)
 203cd94:	d9400415 	stw	r5,16(sp)
 203cd98:	380d883a 	mov	r6,r7
 203cd9c:	2021883a 	mov	r16,r4
 203cda0:	10001026 	beq	r2,zero,203cde4 <_snprintf_r+0x70>
 203cda4:	10bfffc4 	addi	r2,r2,-1
 203cda8:	d8800215 	stw	r2,8(sp)
 203cdac:	d8800515 	stw	r2,20(sp)
 203cdb0:	d9c01c04 	addi	r7,sp,112
 203cdb4:	00bfffc4 	movi	r2,-1
 203cdb8:	d80b883a 	mov	r5,sp
 203cdbc:	d880038d 	sth	r2,14(sp)
 203cdc0:	203cfc00 	call	203cfc0 <___svfprintf_internal_r>
 203cdc4:	00ffffc4 	movi	r3,-1
 203cdc8:	10c01316 	blt	r2,r3,203ce18 <_snprintf_r+0xa4>
 203cdcc:	d8c00017 	ldw	r3,0(sp)
 203cdd0:	18000005 	stb	zero,0(r3)
 203cdd4:	dfc01b17 	ldw	ra,108(sp)
 203cdd8:	dc001a17 	ldw	r16,104(sp)
 203cddc:	dec01c04 	addi	sp,sp,112
 203cde0:	f800283a 	ret
 203cde4:	00bfffc4 	movi	r2,-1
 203cde8:	d9c01c04 	addi	r7,sp,112
 203cdec:	d80b883a 	mov	r5,sp
 203cdf0:	d8000215 	stw	zero,8(sp)
 203cdf4:	d8000515 	stw	zero,20(sp)
 203cdf8:	d880038d 	sth	r2,14(sp)
 203cdfc:	203cfc00 	call	203cfc0 <___svfprintf_internal_r>
 203ce00:	00ffffc4 	movi	r3,-1
 203ce04:	10c00716 	blt	r2,r3,203ce24 <_snprintf_r+0xb0>
 203ce08:	dfc01b17 	ldw	ra,108(sp)
 203ce0c:	dc001a17 	ldw	r16,104(sp)
 203ce10:	dec01c04 	addi	sp,sp,112
 203ce14:	f800283a 	ret
 203ce18:	00c022c4 	movi	r3,139
 203ce1c:	80c00015 	stw	r3,0(r16)
 203ce20:	003fea06 	br	203cdcc <__alt_mem_mem_0+0xfd01cdcc>
 203ce24:	00c022c4 	movi	r3,139
 203ce28:	80c00015 	stw	r3,0(r16)
 203ce2c:	dfc01b17 	ldw	ra,108(sp)
 203ce30:	dc001a17 	ldw	r16,104(sp)
 203ce34:	dec01c04 	addi	sp,sp,112
 203ce38:	f800283a 	ret
 203ce3c:	008022c4 	movi	r2,139
 203ce40:	20800015 	stw	r2,0(r4)
 203ce44:	00bfffc4 	movi	r2,-1
 203ce48:	f800283a 	ret

0203ce4c <snprintf>:
 203ce4c:	deffe304 	addi	sp,sp,-116
 203ce50:	dfc01b15 	stw	ra,108(sp)
 203ce54:	dc001a15 	stw	r16,104(sp)
 203ce58:	d9c01c15 	stw	r7,112(sp)
 203ce5c:	00808134 	movhi	r2,516
 203ce60:	1095e804 	addi	r2,r2,22432
 203ce64:	14000017 	ldw	r16,0(r2)
 203ce68:	28002d16 	blt	r5,zero,203cf20 <snprintf+0xd4>
 203ce6c:	00808204 	movi	r2,520
 203ce70:	d880030d 	sth	r2,12(sp)
 203ce74:	d9000015 	stw	r4,0(sp)
 203ce78:	d9000415 	stw	r4,16(sp)
 203ce7c:	28001126 	beq	r5,zero,203cec4 <snprintf+0x78>
 203ce80:	28bfffc4 	addi	r2,r5,-1
 203ce84:	d8800215 	stw	r2,8(sp)
 203ce88:	d8800515 	stw	r2,20(sp)
 203ce8c:	d9c01c04 	addi	r7,sp,112
 203ce90:	00bfffc4 	movi	r2,-1
 203ce94:	d80b883a 	mov	r5,sp
 203ce98:	8009883a 	mov	r4,r16
 203ce9c:	d880038d 	sth	r2,14(sp)
 203cea0:	203cfc00 	call	203cfc0 <___svfprintf_internal_r>
 203cea4:	00ffffc4 	movi	r3,-1
 203cea8:	10c01416 	blt	r2,r3,203cefc <snprintf+0xb0>
 203ceac:	d8c00017 	ldw	r3,0(sp)
 203ceb0:	18000005 	stb	zero,0(r3)
 203ceb4:	dfc01b17 	ldw	ra,108(sp)
 203ceb8:	dc001a17 	ldw	r16,104(sp)
 203cebc:	dec01d04 	addi	sp,sp,116
 203cec0:	f800283a 	ret
 203cec4:	00bfffc4 	movi	r2,-1
 203cec8:	d9c01c04 	addi	r7,sp,112
 203cecc:	d80b883a 	mov	r5,sp
 203ced0:	8009883a 	mov	r4,r16
 203ced4:	d8000215 	stw	zero,8(sp)
 203ced8:	d8000515 	stw	zero,20(sp)
 203cedc:	d880038d 	sth	r2,14(sp)
 203cee0:	203cfc00 	call	203cfc0 <___svfprintf_internal_r>
 203cee4:	00ffffc4 	movi	r3,-1
 203cee8:	10c00716 	blt	r2,r3,203cf08 <snprintf+0xbc>
 203ceec:	dfc01b17 	ldw	ra,108(sp)
 203cef0:	dc001a17 	ldw	r16,104(sp)
 203cef4:	dec01d04 	addi	sp,sp,116
 203cef8:	f800283a 	ret
 203cefc:	00c022c4 	movi	r3,139
 203cf00:	80c00015 	stw	r3,0(r16)
 203cf04:	003fe906 	br	203ceac <__alt_mem_mem_0+0xfd01ceac>
 203cf08:	00c022c4 	movi	r3,139
 203cf0c:	80c00015 	stw	r3,0(r16)
 203cf10:	dfc01b17 	ldw	ra,108(sp)
 203cf14:	dc001a17 	ldw	r16,104(sp)
 203cf18:	dec01d04 	addi	sp,sp,116
 203cf1c:	f800283a 	ret
 203cf20:	008022c4 	movi	r2,139
 203cf24:	80800015 	stw	r2,0(r16)
 203cf28:	00bfffc4 	movi	r2,-1
 203cf2c:	003fef06 	br	203ceec <__alt_mem_mem_0+0xfd01ceec>

0203cf30 <strcpy>:
 203cf30:	2906b03a 	or	r3,r5,r4
 203cf34:	18c000cc 	andi	r3,r3,3
 203cf38:	2005883a 	mov	r2,r4
 203cf3c:	1800161e 	bne	r3,zero,203cf98 <strcpy+0x68>
 203cf40:	29c00017 	ldw	r7,0(r5)
 203cf44:	02ffbff4 	movhi	r11,65279
 203cf48:	5affbfc4 	addi	r11,r11,-257
 203cf4c:	02a02074 	movhi	r10,32897
 203cf50:	01c6303a 	nor	r3,zero,r7
 203cf54:	3ac9883a 	add	r4,r7,r11
 203cf58:	52a02004 	addi	r10,r10,-32640
 203cf5c:	20c6703a 	and	r3,r4,r3
 203cf60:	1a86703a 	and	r3,r3,r10
 203cf64:	18000c1e 	bne	r3,zero,203cf98 <strcpy+0x68>
 203cf68:	1011883a 	mov	r8,r2
 203cf6c:	41c00015 	stw	r7,0(r8)
 203cf70:	29400104 	addi	r5,r5,4
 203cf74:	29c00017 	ldw	r7,0(r5)
 203cf78:	41800104 	addi	r6,r8,4
 203cf7c:	3011883a 	mov	r8,r6
 203cf80:	3ad3883a 	add	r9,r7,r11
 203cf84:	01c6303a 	nor	r3,zero,r7
 203cf88:	48c6703a 	and	r3,r9,r3
 203cf8c:	1a86703a 	and	r3,r3,r10
 203cf90:	183ff626 	beq	r3,zero,203cf6c <__alt_mem_mem_0+0xfd01cf6c>
 203cf94:	00000106 	br	203cf9c <strcpy+0x6c>
 203cf98:	100d883a 	mov	r6,r2
 203cf9c:	28c00003 	ldbu	r3,0(r5)
 203cfa0:	31800044 	addi	r6,r6,1
 203cfa4:	29400044 	addi	r5,r5,1
 203cfa8:	30ffffc5 	stb	r3,-1(r6)
 203cfac:	18c03fcc 	andi	r3,r3,255
 203cfb0:	18c0201c 	xori	r3,r3,128
 203cfb4:	18ffe004 	addi	r3,r3,-128
 203cfb8:	183ff81e 	bne	r3,zero,203cf9c <__alt_mem_mem_0+0xfd01cf9c>
 203cfbc:	f800283a 	ret

0203cfc0 <___svfprintf_internal_r>:
 203cfc0:	deffb704 	addi	sp,sp,-292
 203cfc4:	dfc04815 	stw	ra,288(sp)
 203cfc8:	ddc04615 	stw	r23,280(sp)
 203cfcc:	d9402c15 	stw	r5,176(sp)
 203cfd0:	d9003915 	stw	r4,228(sp)
 203cfd4:	302f883a 	mov	r23,r6
 203cfd8:	d9c02d15 	stw	r7,180(sp)
 203cfdc:	df004715 	stw	fp,284(sp)
 203cfe0:	dd804515 	stw	r22,276(sp)
 203cfe4:	dd404415 	stw	r21,272(sp)
 203cfe8:	dd004315 	stw	r20,268(sp)
 203cfec:	dcc04215 	stw	r19,264(sp)
 203cff0:	dc804115 	stw	r18,260(sp)
 203cff4:	dc404015 	stw	r17,256(sp)
 203cff8:	dc003f15 	stw	r16,252(sp)
 203cffc:	200537c0 	call	200537c <_localeconv_r>
 203d000:	10800017 	ldw	r2,0(r2)
 203d004:	1009883a 	mov	r4,r2
 203d008:	d8803415 	stw	r2,208(sp)
 203d00c:	20073a40 	call	20073a4 <strlen>
 203d010:	d8c02c17 	ldw	r3,176(sp)
 203d014:	d8803815 	stw	r2,224(sp)
 203d018:	1880030b 	ldhu	r2,12(r3)
 203d01c:	1080200c 	andi	r2,r2,128
 203d020:	10000226 	beq	r2,zero,203d02c <___svfprintf_internal_r+0x6c>
 203d024:	18800417 	ldw	r2,16(r3)
 203d028:	10067f26 	beq	r2,zero,203ea28 <___svfprintf_internal_r+0x1a68>
 203d02c:	dcc03917 	ldw	r19,228(sp)
 203d030:	d8c00404 	addi	r3,sp,16
 203d034:	05408134 	movhi	r21,516
 203d038:	d9001e04 	addi	r4,sp,120
 203d03c:	ad4e4f04 	addi	r21,r21,14652
 203d040:	d8c01e15 	stw	r3,120(sp)
 203d044:	d8002015 	stw	zero,128(sp)
 203d048:	d8001f15 	stw	zero,124(sp)
 203d04c:	d8003315 	stw	zero,204(sp)
 203d050:	d8003615 	stw	zero,216(sp)
 203d054:	d8003715 	stw	zero,220(sp)
 203d058:	1811883a 	mov	r8,r3
 203d05c:	d8003a15 	stw	zero,232(sp)
 203d060:	d8003b15 	stw	zero,236(sp)
 203d064:	d8002f15 	stw	zero,188(sp)
 203d068:	d9002815 	stw	r4,160(sp)
 203d06c:	b8800007 	ldb	r2,0(r23)
 203d070:	10026726 	beq	r2,zero,203da10 <___svfprintf_internal_r+0xa50>
 203d074:	00c00944 	movi	r3,37
 203d078:	b821883a 	mov	r16,r23
 203d07c:	10c0021e 	bne	r2,r3,203d088 <___svfprintf_internal_r+0xc8>
 203d080:	00001406 	br	203d0d4 <___svfprintf_internal_r+0x114>
 203d084:	10c00326 	beq	r2,r3,203d094 <___svfprintf_internal_r+0xd4>
 203d088:	84000044 	addi	r16,r16,1
 203d08c:	80800007 	ldb	r2,0(r16)
 203d090:	103ffc1e 	bne	r2,zero,203d084 <__alt_mem_mem_0+0xfd01d084>
 203d094:	85e3c83a 	sub	r17,r16,r23
 203d098:	88000e26 	beq	r17,zero,203d0d4 <___svfprintf_internal_r+0x114>
 203d09c:	d8c02017 	ldw	r3,128(sp)
 203d0a0:	d8801f17 	ldw	r2,124(sp)
 203d0a4:	45c00015 	stw	r23,0(r8)
 203d0a8:	1c47883a 	add	r3,r3,r17
 203d0ac:	10800044 	addi	r2,r2,1
 203d0b0:	d8c02015 	stw	r3,128(sp)
 203d0b4:	44400115 	stw	r17,4(r8)
 203d0b8:	d8801f15 	stw	r2,124(sp)
 203d0bc:	00c001c4 	movi	r3,7
 203d0c0:	18809716 	blt	r3,r2,203d320 <___svfprintf_internal_r+0x360>
 203d0c4:	42000204 	addi	r8,r8,8
 203d0c8:	d9402f17 	ldw	r5,188(sp)
 203d0cc:	2c4b883a 	add	r5,r5,r17
 203d0d0:	d9402f15 	stw	r5,188(sp)
 203d0d4:	80800007 	ldb	r2,0(r16)
 203d0d8:	10009826 	beq	r2,zero,203d33c <___svfprintf_internal_r+0x37c>
 203d0dc:	84400047 	ldb	r17,1(r16)
 203d0e0:	00bfffc4 	movi	r2,-1
 203d0e4:	85c00044 	addi	r23,r16,1
 203d0e8:	d8002785 	stb	zero,158(sp)
 203d0ec:	0007883a 	mov	r3,zero
 203d0f0:	000f883a 	mov	r7,zero
 203d0f4:	d8802915 	stw	r2,164(sp)
 203d0f8:	d8003115 	stw	zero,196(sp)
 203d0fc:	0025883a 	mov	r18,zero
 203d100:	01401604 	movi	r5,88
 203d104:	01800244 	movi	r6,9
 203d108:	02800a84 	movi	r10,42
 203d10c:	02401b04 	movi	r9,108
 203d110:	bdc00044 	addi	r23,r23,1
 203d114:	88bff804 	addi	r2,r17,-32
 203d118:	2882f036 	bltu	r5,r2,203dcdc <___svfprintf_internal_r+0xd1c>
 203d11c:	100490ba 	slli	r2,r2,2
 203d120:	01008134 	movhi	r4,516
 203d124:	21344d04 	addi	r4,r4,-11980
 203d128:	1105883a 	add	r2,r2,r4
 203d12c:	10800017 	ldw	r2,0(r2)
 203d130:	1000683a 	jmp	r2
 203d134:	0203dc44 	movi	r8,3953
 203d138:	0203dcdc 	xori	r8,zero,3955
 203d13c:	0203dcdc 	xori	r8,zero,3955
 203d140:	0203dc38 	rdprs	r8,zero,3952
 203d144:	0203dcdc 	xori	r8,zero,3955
 203d148:	0203dcdc 	xori	r8,zero,3955
 203d14c:	0203dcdc 	xori	r8,zero,3955
 203d150:	0203dcdc 	xori	r8,zero,3955
 203d154:	0203dcdc 	xori	r8,zero,3955
 203d158:	0203dcdc 	xori	r8,zero,3955
 203d15c:	0203d398 	cmpnei	r8,zero,3918
 203d160:	0203db74 	movhi	r8,3949
 203d164:	0203dcdc 	xori	r8,zero,3955
 203d168:	0203d2a8 	cmpgeui	r8,zero,3914
 203d16c:	0203d3c0 	call	203d3c <__alt_mem_sdram_controller_0-0x1dfc2c4>
 203d170:	0203dcdc 	xori	r8,zero,3955
 203d174:	0203d434 	movhi	r8,3920
 203d178:	0203d400 	call	203d40 <__alt_mem_sdram_controller_0-0x1dfc2c0>
 203d17c:	0203d400 	call	203d40 <__alt_mem_sdram_controller_0-0x1dfc2c0>
 203d180:	0203d400 	call	203d40 <__alt_mem_sdram_controller_0-0x1dfc2c0>
 203d184:	0203d400 	call	203d40 <__alt_mem_sdram_controller_0-0x1dfc2c0>
 203d188:	0203d400 	call	203d40 <__alt_mem_sdram_controller_0-0x1dfc2c0>
 203d18c:	0203d400 	call	203d40 <__alt_mem_sdram_controller_0-0x1dfc2c0>
 203d190:	0203d400 	call	203d40 <__alt_mem_sdram_controller_0-0x1dfc2c0>
 203d194:	0203d400 	call	203d40 <__alt_mem_sdram_controller_0-0x1dfc2c0>
 203d198:	0203d400 	call	203d40 <__alt_mem_sdram_controller_0-0x1dfc2c0>
 203d19c:	0203dcdc 	xori	r8,zero,3955
 203d1a0:	0203dcdc 	xori	r8,zero,3955
 203d1a4:	0203dcdc 	xori	r8,zero,3955
 203d1a8:	0203dcdc 	xori	r8,zero,3955
 203d1ac:	0203dcdc 	xori	r8,zero,3955
 203d1b0:	0203dcdc 	xori	r8,zero,3955
 203d1b4:	0203dcdc 	xori	r8,zero,3955
 203d1b8:	0203dcdc 	xori	r8,zero,3955
 203d1bc:	0203dcdc 	xori	r8,zero,3955
 203d1c0:	0203dcdc 	xori	r8,zero,3955
 203d1c4:	0203d4ec 	andhi	r8,zero,3923
 203d1c8:	0203d440 	call	203d44 <__alt_mem_sdram_controller_0-0x1dfc2bc>
 203d1cc:	0203dcdc 	xori	r8,zero,3955
 203d1d0:	0203d440 	call	203d44 <__alt_mem_sdram_controller_0-0x1dfc2bc>
 203d1d4:	0203dcdc 	xori	r8,zero,3955
 203d1d8:	0203dcdc 	xori	r8,zero,3955
 203d1dc:	0203dcdc 	xori	r8,zero,3955
 203d1e0:	0203dcdc 	xori	r8,zero,3955
 203d1e4:	0203d4e0 	cmpeqi	r8,zero,3923
 203d1e8:	0203dcdc 	xori	r8,zero,3955
 203d1ec:	0203dcdc 	xori	r8,zero,3955
 203d1f0:	0203d5a8 	cmpgeui	r8,zero,3926
 203d1f4:	0203dcdc 	xori	r8,zero,3955
 203d1f8:	0203dcdc 	xori	r8,zero,3955
 203d1fc:	0203dcdc 	xori	r8,zero,3955
 203d200:	0203dcdc 	xori	r8,zero,3955
 203d204:	0203dcdc 	xori	r8,zero,3955
 203d208:	0203da18 	cmpnei	r8,zero,3944
 203d20c:	0203dcdc 	xori	r8,zero,3955
 203d210:	0203dcdc 	xori	r8,zero,3955
 203d214:	0203da78 	rdprs	r8,zero,3945
 203d218:	0203dcdc 	xori	r8,zero,3955
 203d21c:	0203dcdc 	xori	r8,zero,3955
 203d220:	0203dcdc 	xori	r8,zero,3955
 203d224:	0203dcdc 	xori	r8,zero,3955
 203d228:	0203dcdc 	xori	r8,zero,3955
 203d22c:	0203dcdc 	xori	r8,zero,3955
 203d230:	0203dcdc 	xori	r8,zero,3955
 203d234:	0203dcdc 	xori	r8,zero,3955
 203d238:	0203dcdc 	xori	r8,zero,3955
 203d23c:	0203dcdc 	xori	r8,zero,3955
 203d240:	0203db28 	cmpgeui	r8,zero,3948
 203d244:	0203dc64 	muli	r8,zero,3953
 203d248:	0203d440 	call	203d44 <__alt_mem_sdram_controller_0-0x1dfc2bc>
 203d24c:	0203d440 	call	203d44 <__alt_mem_sdram_controller_0-0x1dfc2bc>
 203d250:	0203d440 	call	203d44 <__alt_mem_sdram_controller_0-0x1dfc2bc>
 203d254:	0203dcb8 	rdprs	r8,zero,3954
 203d258:	0203dc64 	muli	r8,zero,3953
 203d25c:	0203dcdc 	xori	r8,zero,3955
 203d260:	0203dcdc 	xori	r8,zero,3955
 203d264:	0203dc74 	movhi	r8,3953
 203d268:	0203dcdc 	xori	r8,zero,3955
 203d26c:	0203dc84 	movi	r8,3954
 203d270:	0203db64 	muli	r8,zero,3949
 203d274:	0203d2b4 	movhi	r8,3914
 203d278:	0203db84 	movi	r8,3950
 203d27c:	0203dcdc 	xori	r8,zero,3955
 203d280:	0203db90 	cmplti	r8,zero,3950
 203d284:	0203dcdc 	xori	r8,zero,3955
 203d288:	0203dbec 	andhi	r8,zero,3951
 203d28c:	0203dcdc 	xori	r8,zero,3955
 203d290:	0203dcdc 	xori	r8,zero,3955
 203d294:	0203dbfc 	xorhi	r8,zero,3951
 203d298:	d9003117 	ldw	r4,196(sp)
 203d29c:	d8802d15 	stw	r2,180(sp)
 203d2a0:	0109c83a 	sub	r4,zero,r4
 203d2a4:	d9003115 	stw	r4,196(sp)
 203d2a8:	94800114 	ori	r18,r18,4
 203d2ac:	bc400007 	ldb	r17,0(r23)
 203d2b0:	003f9706 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203d2b4:	00800c04 	movi	r2,48
 203d2b8:	d9002d17 	ldw	r4,180(sp)
 203d2bc:	d9402917 	ldw	r5,164(sp)
 203d2c0:	d8802705 	stb	r2,156(sp)
 203d2c4:	00801e04 	movi	r2,120
 203d2c8:	d8802745 	stb	r2,157(sp)
 203d2cc:	d8002785 	stb	zero,158(sp)
 203d2d0:	20c00104 	addi	r3,r4,4
 203d2d4:	25000017 	ldw	r20,0(r4)
 203d2d8:	002d883a 	mov	r22,zero
 203d2dc:	90800094 	ori	r2,r18,2
 203d2e0:	28028616 	blt	r5,zero,203dcfc <___svfprintf_internal_r+0xd3c>
 203d2e4:	00bfdfc4 	movi	r2,-129
 203d2e8:	90a4703a 	and	r18,r18,r2
 203d2ec:	d8c02d15 	stw	r3,180(sp)
 203d2f0:	94800094 	ori	r18,r18,2
 203d2f4:	a002731e 	bne	r20,zero,203dcc4 <___svfprintf_internal_r+0xd04>
 203d2f8:	00808134 	movhi	r2,516
 203d2fc:	10837904 	addi	r2,r2,3556
 203d300:	d8803a15 	stw	r2,232(sp)
 203d304:	04401e04 	movi	r17,120
 203d308:	d8c02917 	ldw	r3,164(sp)
 203d30c:	0039883a 	mov	fp,zero
 203d310:	1801d526 	beq	r3,zero,203da68 <___svfprintf_internal_r+0xaa8>
 203d314:	0029883a 	mov	r20,zero
 203d318:	002d883a 	mov	r22,zero
 203d31c:	0001f106 	br	203dae4 <___svfprintf_internal_r+0xb24>
 203d320:	d9402c17 	ldw	r5,176(sp)
 203d324:	d9801e04 	addi	r6,sp,120
 203d328:	9809883a 	mov	r4,r19
 203d32c:	203f4300 	call	203f430 <__ssprint_r>
 203d330:	1000081e 	bne	r2,zero,203d354 <___svfprintf_internal_r+0x394>
 203d334:	da000404 	addi	r8,sp,16
 203d338:	003f6306 	br	203d0c8 <__alt_mem_mem_0+0xfd01d0c8>
 203d33c:	d8802017 	ldw	r2,128(sp)
 203d340:	10000426 	beq	r2,zero,203d354 <___svfprintf_internal_r+0x394>
 203d344:	d9402c17 	ldw	r5,176(sp)
 203d348:	d9003917 	ldw	r4,228(sp)
 203d34c:	d9801e04 	addi	r6,sp,120
 203d350:	203f4300 	call	203f430 <__ssprint_r>
 203d354:	d8802c17 	ldw	r2,176(sp)
 203d358:	10c0030b 	ldhu	r3,12(r2)
 203d35c:	d8802f17 	ldw	r2,188(sp)
 203d360:	18c0100c 	andi	r3,r3,64
 203d364:	1805f51e 	bne	r3,zero,203eb3c <___svfprintf_internal_r+0x1b7c>
 203d368:	dfc04817 	ldw	ra,288(sp)
 203d36c:	df004717 	ldw	fp,284(sp)
 203d370:	ddc04617 	ldw	r23,280(sp)
 203d374:	dd804517 	ldw	r22,276(sp)
 203d378:	dd404417 	ldw	r21,272(sp)
 203d37c:	dd004317 	ldw	r20,268(sp)
 203d380:	dcc04217 	ldw	r19,264(sp)
 203d384:	dc804117 	ldw	r18,260(sp)
 203d388:	dc404017 	ldw	r17,256(sp)
 203d38c:	dc003f17 	ldw	r16,252(sp)
 203d390:	dec04904 	addi	sp,sp,292
 203d394:	f800283a 	ret
 203d398:	d8802d17 	ldw	r2,180(sp)
 203d39c:	d9002d17 	ldw	r4,180(sp)
 203d3a0:	10800017 	ldw	r2,0(r2)
 203d3a4:	d8803115 	stw	r2,196(sp)
 203d3a8:	20800104 	addi	r2,r4,4
 203d3ac:	d9003117 	ldw	r4,196(sp)
 203d3b0:	203fb916 	blt	r4,zero,203d298 <__alt_mem_mem_0+0xfd01d298>
 203d3b4:	d8802d15 	stw	r2,180(sp)
 203d3b8:	bc400007 	ldb	r17,0(r23)
 203d3bc:	003f5406 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203d3c0:	bc400007 	ldb	r17,0(r23)
 203d3c4:	bac00044 	addi	r11,r23,1
 203d3c8:	8a873926 	beq	r17,r10,203f0b0 <___svfprintf_internal_r+0x20f0>
 203d3cc:	88bff404 	addi	r2,r17,-48
 203d3d0:	0009883a 	mov	r4,zero
 203d3d4:	30868836 	bltu	r6,r2,203edf8 <___svfprintf_internal_r+0x1e38>
 203d3d8:	5c400007 	ldb	r17,0(r11)
 203d3dc:	210002a4 	muli	r4,r4,10
 203d3e0:	5dc00044 	addi	r23,r11,1
 203d3e4:	b817883a 	mov	r11,r23
 203d3e8:	2089883a 	add	r4,r4,r2
 203d3ec:	88bff404 	addi	r2,r17,-48
 203d3f0:	30bff92e 	bgeu	r6,r2,203d3d8 <__alt_mem_mem_0+0xfd01d3d8>
 203d3f4:	2005d716 	blt	r4,zero,203eb54 <___svfprintf_internal_r+0x1b94>
 203d3f8:	d9002915 	stw	r4,164(sp)
 203d3fc:	003f4506 	br	203d114 <__alt_mem_mem_0+0xfd01d114>
 203d400:	b809883a 	mov	r4,r23
 203d404:	d8003115 	stw	zero,196(sp)
 203d408:	88bff404 	addi	r2,r17,-48
 203d40c:	0017883a 	mov	r11,zero
 203d410:	24400007 	ldb	r17,0(r4)
 203d414:	5ac002a4 	muli	r11,r11,10
 203d418:	bdc00044 	addi	r23,r23,1
 203d41c:	b809883a 	mov	r4,r23
 203d420:	12d7883a 	add	r11,r2,r11
 203d424:	88bff404 	addi	r2,r17,-48
 203d428:	30bff92e 	bgeu	r6,r2,203d410 <__alt_mem_mem_0+0xfd01d410>
 203d42c:	dac03115 	stw	r11,196(sp)
 203d430:	003f3806 	br	203d114 <__alt_mem_mem_0+0xfd01d114>
 203d434:	94802014 	ori	r18,r18,128
 203d438:	bc400007 	ldb	r17,0(r23)
 203d43c:	003f3406 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203d440:	18c03fcc 	andi	r3,r3,255
 203d444:	1807471e 	bne	r3,zero,203f164 <___svfprintf_internal_r+0x21a4>
 203d448:	9080020c 	andi	r2,r18,8
 203d44c:	10047d26 	beq	r2,zero,203e644 <___svfprintf_internal_r+0x1684>
 203d450:	d8c02d17 	ldw	r3,180(sp)
 203d454:	d9002d17 	ldw	r4,180(sp)
 203d458:	d9402d17 	ldw	r5,180(sp)
 203d45c:	18c00017 	ldw	r3,0(r3)
 203d460:	21000117 	ldw	r4,4(r4)
 203d464:	29400204 	addi	r5,r5,8
 203d468:	d8c03615 	stw	r3,216(sp)
 203d46c:	d9003715 	stw	r4,220(sp)
 203d470:	d9402d15 	stw	r5,180(sp)
 203d474:	d9003617 	ldw	r4,216(sp)
 203d478:	d9403717 	ldw	r5,220(sp)
 203d47c:	da003e15 	stw	r8,248(sp)
 203d480:	04000044 	movi	r16,1
 203d484:	20070c40 	call	20070c4 <__fpclassifyd>
 203d488:	da003e17 	ldw	r8,248(sp)
 203d48c:	14044b1e 	bne	r2,r16,203e5bc <___svfprintf_internal_r+0x15fc>
 203d490:	d9003617 	ldw	r4,216(sp)
 203d494:	d9403717 	ldw	r5,220(sp)
 203d498:	000d883a 	mov	r6,zero
 203d49c:	000f883a 	mov	r7,zero
 203d4a0:	200be900 	call	200be90 <__ledf2>
 203d4a4:	da003e17 	ldw	r8,248(sp)
 203d4a8:	1005f316 	blt	r2,zero,203ec78 <___svfprintf_internal_r+0x1cb8>
 203d4ac:	df002783 	ldbu	fp,158(sp)
 203d4b0:	008011c4 	movi	r2,71
 203d4b4:	1445590e 	bge	r2,r17,203ea1c <___svfprintf_internal_r+0x1a5c>
 203d4b8:	04008134 	movhi	r16,516
 203d4bc:	84037104 	addi	r16,r16,3524
 203d4c0:	00c000c4 	movi	r3,3
 203d4c4:	00bfdfc4 	movi	r2,-129
 203d4c8:	d8c02a15 	stw	r3,168(sp)
 203d4cc:	90a4703a 	and	r18,r18,r2
 203d4d0:	d8c02e15 	stw	r3,184(sp)
 203d4d4:	d8002915 	stw	zero,164(sp)
 203d4d8:	d8003215 	stw	zero,200(sp)
 203d4dc:	00006606 	br	203d678 <___svfprintf_internal_r+0x6b8>
 203d4e0:	94800214 	ori	r18,r18,8
 203d4e4:	bc400007 	ldb	r17,0(r23)
 203d4e8:	003f0906 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203d4ec:	18c03fcc 	andi	r3,r3,255
 203d4f0:	1807181e 	bne	r3,zero,203f154 <___svfprintf_internal_r+0x2194>
 203d4f4:	94800414 	ori	r18,r18,16
 203d4f8:	9080080c 	andi	r2,r18,32
 203d4fc:	10039626 	beq	r2,zero,203e358 <___svfprintf_internal_r+0x1398>
 203d500:	d9402d17 	ldw	r5,180(sp)
 203d504:	28800117 	ldw	r2,4(r5)
 203d508:	2d000017 	ldw	r20,0(r5)
 203d50c:	29400204 	addi	r5,r5,8
 203d510:	d9402d15 	stw	r5,180(sp)
 203d514:	102d883a 	mov	r22,r2
 203d518:	10039816 	blt	r2,zero,203e37c <___svfprintf_internal_r+0x13bc>
 203d51c:	d9402917 	ldw	r5,164(sp)
 203d520:	df002783 	ldbu	fp,158(sp)
 203d524:	2803ab16 	blt	r5,zero,203e3d4 <___svfprintf_internal_r+0x1414>
 203d528:	00ffdfc4 	movi	r3,-129
 203d52c:	a584b03a 	or	r2,r20,r22
 203d530:	90e4703a 	and	r18,r18,r3
 203d534:	10014a26 	beq	r2,zero,203da60 <___svfprintf_internal_r+0xaa0>
 203d538:	b0034b26 	beq	r22,zero,203e268 <___svfprintf_internal_r+0x12a8>
 203d53c:	dc402a15 	stw	r17,168(sp)
 203d540:	dc001e04 	addi	r16,sp,120
 203d544:	b023883a 	mov	r17,r22
 203d548:	402d883a 	mov	r22,r8
 203d54c:	a009883a 	mov	r4,r20
 203d550:	880b883a 	mov	r5,r17
 203d554:	01800284 	movi	r6,10
 203d558:	000f883a 	mov	r7,zero
 203d55c:	200a4ac0 	call	200a4ac <__umoddi3>
 203d560:	10800c04 	addi	r2,r2,48
 203d564:	843fffc4 	addi	r16,r16,-1
 203d568:	a009883a 	mov	r4,r20
 203d56c:	880b883a 	mov	r5,r17
 203d570:	80800005 	stb	r2,0(r16)
 203d574:	01800284 	movi	r6,10
 203d578:	000f883a 	mov	r7,zero
 203d57c:	2009f340 	call	2009f34 <__udivdi3>
 203d580:	1029883a 	mov	r20,r2
 203d584:	10c4b03a 	or	r2,r2,r3
 203d588:	1823883a 	mov	r17,r3
 203d58c:	103fef1e 	bne	r2,zero,203d54c <__alt_mem_mem_0+0xfd01d54c>
 203d590:	d8c02817 	ldw	r3,160(sp)
 203d594:	dc402a17 	ldw	r17,168(sp)
 203d598:	b011883a 	mov	r8,r22
 203d59c:	1c07c83a 	sub	r3,r3,r16
 203d5a0:	d8c02e15 	stw	r3,184(sp)
 203d5a4:	00002e06 	br	203d660 <___svfprintf_internal_r+0x6a0>
 203d5a8:	18c03fcc 	andi	r3,r3,255
 203d5ac:	1806e71e 	bne	r3,zero,203f14c <___svfprintf_internal_r+0x218c>
 203d5b0:	94800414 	ori	r18,r18,16
 203d5b4:	9080080c 	andi	r2,r18,32
 203d5b8:	1002d426 	beq	r2,zero,203e10c <___svfprintf_internal_r+0x114c>
 203d5bc:	d9402d17 	ldw	r5,180(sp)
 203d5c0:	d8c02917 	ldw	r3,164(sp)
 203d5c4:	d8002785 	stb	zero,158(sp)
 203d5c8:	28800204 	addi	r2,r5,8
 203d5cc:	2d000017 	ldw	r20,0(r5)
 203d5d0:	2d800117 	ldw	r22,4(r5)
 203d5d4:	18041516 	blt	r3,zero,203e62c <___svfprintf_internal_r+0x166c>
 203d5d8:	013fdfc4 	movi	r4,-129
 203d5dc:	a586b03a 	or	r3,r20,r22
 203d5e0:	d8802d15 	stw	r2,180(sp)
 203d5e4:	9124703a 	and	r18,r18,r4
 203d5e8:	1802d51e 	bne	r3,zero,203e140 <___svfprintf_internal_r+0x1180>
 203d5ec:	d9402917 	ldw	r5,164(sp)
 203d5f0:	0039883a 	mov	fp,zero
 203d5f4:	2806be26 	beq	r5,zero,203f0f0 <___svfprintf_internal_r+0x2130>
 203d5f8:	0029883a 	mov	r20,zero
 203d5fc:	002d883a 	mov	r22,zero
 203d600:	dc001e04 	addi	r16,sp,120
 203d604:	a006d0fa 	srli	r3,r20,3
 203d608:	b008977a 	slli	r4,r22,29
 203d60c:	b02cd0fa 	srli	r22,r22,3
 203d610:	a50001cc 	andi	r20,r20,7
 203d614:	a0800c04 	addi	r2,r20,48
 203d618:	843fffc4 	addi	r16,r16,-1
 203d61c:	20e8b03a 	or	r20,r4,r3
 203d620:	80800005 	stb	r2,0(r16)
 203d624:	a586b03a 	or	r3,r20,r22
 203d628:	183ff61e 	bne	r3,zero,203d604 <__alt_mem_mem_0+0xfd01d604>
 203d62c:	90c0004c 	andi	r3,r18,1
 203d630:	18013926 	beq	r3,zero,203db18 <___svfprintf_internal_r+0xb58>
 203d634:	10803fcc 	andi	r2,r2,255
 203d638:	1080201c 	xori	r2,r2,128
 203d63c:	10bfe004 	addi	r2,r2,-128
 203d640:	00c00c04 	movi	r3,48
 203d644:	10c13426 	beq	r2,r3,203db18 <___svfprintf_internal_r+0xb58>
 203d648:	80ffffc5 	stb	r3,-1(r16)
 203d64c:	d8c02817 	ldw	r3,160(sp)
 203d650:	80bfffc4 	addi	r2,r16,-1
 203d654:	1021883a 	mov	r16,r2
 203d658:	1887c83a 	sub	r3,r3,r2
 203d65c:	d8c02e15 	stw	r3,184(sp)
 203d660:	d8802e17 	ldw	r2,184(sp)
 203d664:	d9002917 	ldw	r4,164(sp)
 203d668:	1100010e 	bge	r2,r4,203d670 <___svfprintf_internal_r+0x6b0>
 203d66c:	2005883a 	mov	r2,r4
 203d670:	d8802a15 	stw	r2,168(sp)
 203d674:	d8003215 	stw	zero,200(sp)
 203d678:	e7003fcc 	andi	fp,fp,255
 203d67c:	e700201c 	xori	fp,fp,128
 203d680:	e73fe004 	addi	fp,fp,-128
 203d684:	e0000326 	beq	fp,zero,203d694 <___svfprintf_internal_r+0x6d4>
 203d688:	d8c02a17 	ldw	r3,168(sp)
 203d68c:	18c00044 	addi	r3,r3,1
 203d690:	d8c02a15 	stw	r3,168(sp)
 203d694:	90c0008c 	andi	r3,r18,2
 203d698:	d8c02b15 	stw	r3,172(sp)
 203d69c:	18000326 	beq	r3,zero,203d6ac <___svfprintf_internal_r+0x6ec>
 203d6a0:	d8c02a17 	ldw	r3,168(sp)
 203d6a4:	18c00084 	addi	r3,r3,2
 203d6a8:	d8c02a15 	stw	r3,168(sp)
 203d6ac:	90c0210c 	andi	r3,r18,132
 203d6b0:	d8c03015 	stw	r3,192(sp)
 203d6b4:	1801a11e 	bne	r3,zero,203dd3c <___svfprintf_internal_r+0xd7c>
 203d6b8:	d9003117 	ldw	r4,196(sp)
 203d6bc:	d8c02a17 	ldw	r3,168(sp)
 203d6c0:	20e9c83a 	sub	r20,r4,r3
 203d6c4:	05019d0e 	bge	zero,r20,203dd3c <___svfprintf_internal_r+0xd7c>
 203d6c8:	02400404 	movi	r9,16
 203d6cc:	d8c02017 	ldw	r3,128(sp)
 203d6d0:	d8801f17 	ldw	r2,124(sp)
 203d6d4:	4d051b0e 	bge	r9,r20,203eb44 <___svfprintf_internal_r+0x1b84>
 203d6d8:	01408134 	movhi	r5,516
 203d6dc:	294e5304 	addi	r5,r5,14668
 203d6e0:	dc403c15 	stw	r17,240(sp)
 203d6e4:	d9403515 	stw	r5,212(sp)
 203d6e8:	a023883a 	mov	r17,r20
 203d6ec:	482d883a 	mov	r22,r9
 203d6f0:	9029883a 	mov	r20,r18
 203d6f4:	070001c4 	movi	fp,7
 203d6f8:	8025883a 	mov	r18,r16
 203d6fc:	dc002c17 	ldw	r16,176(sp)
 203d700:	00000306 	br	203d710 <___svfprintf_internal_r+0x750>
 203d704:	8c7ffc04 	addi	r17,r17,-16
 203d708:	42000204 	addi	r8,r8,8
 203d70c:	b440130e 	bge	r22,r17,203d75c <___svfprintf_internal_r+0x79c>
 203d710:	01008134 	movhi	r4,516
 203d714:	18c00404 	addi	r3,r3,16
 203d718:	10800044 	addi	r2,r2,1
 203d71c:	210e5304 	addi	r4,r4,14668
 203d720:	41000015 	stw	r4,0(r8)
 203d724:	45800115 	stw	r22,4(r8)
 203d728:	d8c02015 	stw	r3,128(sp)
 203d72c:	d8801f15 	stw	r2,124(sp)
 203d730:	e0bff40e 	bge	fp,r2,203d704 <__alt_mem_mem_0+0xfd01d704>
 203d734:	d9801e04 	addi	r6,sp,120
 203d738:	800b883a 	mov	r5,r16
 203d73c:	9809883a 	mov	r4,r19
 203d740:	203f4300 	call	203f430 <__ssprint_r>
 203d744:	103f031e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203d748:	8c7ffc04 	addi	r17,r17,-16
 203d74c:	d8c02017 	ldw	r3,128(sp)
 203d750:	d8801f17 	ldw	r2,124(sp)
 203d754:	da000404 	addi	r8,sp,16
 203d758:	b47fed16 	blt	r22,r17,203d710 <__alt_mem_mem_0+0xfd01d710>
 203d75c:	9021883a 	mov	r16,r18
 203d760:	a025883a 	mov	r18,r20
 203d764:	8829883a 	mov	r20,r17
 203d768:	dc403c17 	ldw	r17,240(sp)
 203d76c:	d9403517 	ldw	r5,212(sp)
 203d770:	a0c7883a 	add	r3,r20,r3
 203d774:	10800044 	addi	r2,r2,1
 203d778:	41400015 	stw	r5,0(r8)
 203d77c:	45000115 	stw	r20,4(r8)
 203d780:	d8c02015 	stw	r3,128(sp)
 203d784:	d8801f15 	stw	r2,124(sp)
 203d788:	010001c4 	movi	r4,7
 203d78c:	20829f16 	blt	r4,r2,203e20c <___svfprintf_internal_r+0x124c>
 203d790:	df002787 	ldb	fp,158(sp)
 203d794:	42000204 	addi	r8,r8,8
 203d798:	e0000c26 	beq	fp,zero,203d7cc <___svfprintf_internal_r+0x80c>
 203d79c:	d8801f17 	ldw	r2,124(sp)
 203d7a0:	d9002784 	addi	r4,sp,158
 203d7a4:	18c00044 	addi	r3,r3,1
 203d7a8:	10800044 	addi	r2,r2,1
 203d7ac:	41000015 	stw	r4,0(r8)
 203d7b0:	01000044 	movi	r4,1
 203d7b4:	41000115 	stw	r4,4(r8)
 203d7b8:	d8c02015 	stw	r3,128(sp)
 203d7bc:	d8801f15 	stw	r2,124(sp)
 203d7c0:	010001c4 	movi	r4,7
 203d7c4:	20823816 	blt	r4,r2,203e0a8 <___svfprintf_internal_r+0x10e8>
 203d7c8:	42000204 	addi	r8,r8,8
 203d7cc:	d8802b17 	ldw	r2,172(sp)
 203d7d0:	10000c26 	beq	r2,zero,203d804 <___svfprintf_internal_r+0x844>
 203d7d4:	d8801f17 	ldw	r2,124(sp)
 203d7d8:	d9002704 	addi	r4,sp,156
 203d7dc:	18c00084 	addi	r3,r3,2
 203d7e0:	10800044 	addi	r2,r2,1
 203d7e4:	41000015 	stw	r4,0(r8)
 203d7e8:	01000084 	movi	r4,2
 203d7ec:	41000115 	stw	r4,4(r8)
 203d7f0:	d8c02015 	stw	r3,128(sp)
 203d7f4:	d8801f15 	stw	r2,124(sp)
 203d7f8:	010001c4 	movi	r4,7
 203d7fc:	20823216 	blt	r4,r2,203e0c8 <___svfprintf_internal_r+0x1108>
 203d800:	42000204 	addi	r8,r8,8
 203d804:	d9003017 	ldw	r4,192(sp)
 203d808:	00802004 	movi	r2,128
 203d80c:	20819726 	beq	r4,r2,203de6c <___svfprintf_internal_r+0xeac>
 203d810:	d9402917 	ldw	r5,164(sp)
 203d814:	d8802e17 	ldw	r2,184(sp)
 203d818:	28adc83a 	sub	r22,r5,r2
 203d81c:	05802f0e 	bge	zero,r22,203d8dc <___svfprintf_internal_r+0x91c>
 203d820:	07000404 	movi	fp,16
 203d824:	d8801f17 	ldw	r2,124(sp)
 203d828:	e583c00e 	bge	fp,r22,203e72c <___svfprintf_internal_r+0x176c>
 203d82c:	01408134 	movhi	r5,516
 203d830:	294e4f04 	addi	r5,r5,14652
 203d834:	dc402915 	stw	r17,164(sp)
 203d838:	d9402b15 	stw	r5,172(sp)
 203d83c:	b023883a 	mov	r17,r22
 203d840:	050001c4 	movi	r20,7
 203d844:	902d883a 	mov	r22,r18
 203d848:	8025883a 	mov	r18,r16
 203d84c:	dc002c17 	ldw	r16,176(sp)
 203d850:	00000306 	br	203d860 <___svfprintf_internal_r+0x8a0>
 203d854:	8c7ffc04 	addi	r17,r17,-16
 203d858:	42000204 	addi	r8,r8,8
 203d85c:	e440110e 	bge	fp,r17,203d8a4 <___svfprintf_internal_r+0x8e4>
 203d860:	18c00404 	addi	r3,r3,16
 203d864:	10800044 	addi	r2,r2,1
 203d868:	45400015 	stw	r21,0(r8)
 203d86c:	47000115 	stw	fp,4(r8)
 203d870:	d8c02015 	stw	r3,128(sp)
 203d874:	d8801f15 	stw	r2,124(sp)
 203d878:	a0bff60e 	bge	r20,r2,203d854 <__alt_mem_mem_0+0xfd01d854>
 203d87c:	d9801e04 	addi	r6,sp,120
 203d880:	800b883a 	mov	r5,r16
 203d884:	9809883a 	mov	r4,r19
 203d888:	203f4300 	call	203f430 <__ssprint_r>
 203d88c:	103eb11e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203d890:	8c7ffc04 	addi	r17,r17,-16
 203d894:	d8c02017 	ldw	r3,128(sp)
 203d898:	d8801f17 	ldw	r2,124(sp)
 203d89c:	da000404 	addi	r8,sp,16
 203d8a0:	e47fef16 	blt	fp,r17,203d860 <__alt_mem_mem_0+0xfd01d860>
 203d8a4:	9021883a 	mov	r16,r18
 203d8a8:	b025883a 	mov	r18,r22
 203d8ac:	882d883a 	mov	r22,r17
 203d8b0:	dc402917 	ldw	r17,164(sp)
 203d8b4:	d9002b17 	ldw	r4,172(sp)
 203d8b8:	1d87883a 	add	r3,r3,r22
 203d8bc:	10800044 	addi	r2,r2,1
 203d8c0:	41000015 	stw	r4,0(r8)
 203d8c4:	45800115 	stw	r22,4(r8)
 203d8c8:	d8c02015 	stw	r3,128(sp)
 203d8cc:	d8801f15 	stw	r2,124(sp)
 203d8d0:	010001c4 	movi	r4,7
 203d8d4:	2081ec16 	blt	r4,r2,203e088 <___svfprintf_internal_r+0x10c8>
 203d8d8:	42000204 	addi	r8,r8,8
 203d8dc:	9080400c 	andi	r2,r18,256
 203d8e0:	1001181e 	bne	r2,zero,203dd44 <___svfprintf_internal_r+0xd84>
 203d8e4:	d9402e17 	ldw	r5,184(sp)
 203d8e8:	d8801f17 	ldw	r2,124(sp)
 203d8ec:	44000015 	stw	r16,0(r8)
 203d8f0:	1947883a 	add	r3,r3,r5
 203d8f4:	10800044 	addi	r2,r2,1
 203d8f8:	41400115 	stw	r5,4(r8)
 203d8fc:	d8c02015 	stw	r3,128(sp)
 203d900:	d8801f15 	stw	r2,124(sp)
 203d904:	010001c4 	movi	r4,7
 203d908:	2081d116 	blt	r4,r2,203e050 <___svfprintf_internal_r+0x1090>
 203d90c:	42000204 	addi	r8,r8,8
 203d910:	9480010c 	andi	r18,r18,4
 203d914:	90003226 	beq	r18,zero,203d9e0 <___svfprintf_internal_r+0xa20>
 203d918:	d9403117 	ldw	r5,196(sp)
 203d91c:	d8802a17 	ldw	r2,168(sp)
 203d920:	28a1c83a 	sub	r16,r5,r2
 203d924:	04002e0e 	bge	zero,r16,203d9e0 <___svfprintf_internal_r+0xa20>
 203d928:	04400404 	movi	r17,16
 203d92c:	d8801f17 	ldw	r2,124(sp)
 203d930:	8c04b90e 	bge	r17,r16,203ec18 <___svfprintf_internal_r+0x1c58>
 203d934:	01408134 	movhi	r5,516
 203d938:	294e5304 	addi	r5,r5,14668
 203d93c:	d9403515 	stw	r5,212(sp)
 203d940:	048001c4 	movi	r18,7
 203d944:	dd002c17 	ldw	r20,176(sp)
 203d948:	00000306 	br	203d958 <___svfprintf_internal_r+0x998>
 203d94c:	843ffc04 	addi	r16,r16,-16
 203d950:	42000204 	addi	r8,r8,8
 203d954:	8c00130e 	bge	r17,r16,203d9a4 <___svfprintf_internal_r+0x9e4>
 203d958:	01008134 	movhi	r4,516
 203d95c:	18c00404 	addi	r3,r3,16
 203d960:	10800044 	addi	r2,r2,1
 203d964:	210e5304 	addi	r4,r4,14668
 203d968:	41000015 	stw	r4,0(r8)
 203d96c:	44400115 	stw	r17,4(r8)
 203d970:	d8c02015 	stw	r3,128(sp)
 203d974:	d8801f15 	stw	r2,124(sp)
 203d978:	90bff40e 	bge	r18,r2,203d94c <__alt_mem_mem_0+0xfd01d94c>
 203d97c:	d9801e04 	addi	r6,sp,120
 203d980:	a00b883a 	mov	r5,r20
 203d984:	9809883a 	mov	r4,r19
 203d988:	203f4300 	call	203f430 <__ssprint_r>
 203d98c:	103e711e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203d990:	843ffc04 	addi	r16,r16,-16
 203d994:	d8c02017 	ldw	r3,128(sp)
 203d998:	d8801f17 	ldw	r2,124(sp)
 203d99c:	da000404 	addi	r8,sp,16
 203d9a0:	8c3fed16 	blt	r17,r16,203d958 <__alt_mem_mem_0+0xfd01d958>
 203d9a4:	d9403517 	ldw	r5,212(sp)
 203d9a8:	1c07883a 	add	r3,r3,r16
 203d9ac:	10800044 	addi	r2,r2,1
 203d9b0:	41400015 	stw	r5,0(r8)
 203d9b4:	44000115 	stw	r16,4(r8)
 203d9b8:	d8c02015 	stw	r3,128(sp)
 203d9bc:	d8801f15 	stw	r2,124(sp)
 203d9c0:	010001c4 	movi	r4,7
 203d9c4:	2080060e 	bge	r4,r2,203d9e0 <___svfprintf_internal_r+0xa20>
 203d9c8:	d9402c17 	ldw	r5,176(sp)
 203d9cc:	d9801e04 	addi	r6,sp,120
 203d9d0:	9809883a 	mov	r4,r19
 203d9d4:	203f4300 	call	203f430 <__ssprint_r>
 203d9d8:	103e5e1e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203d9dc:	d8c02017 	ldw	r3,128(sp)
 203d9e0:	d8803117 	ldw	r2,196(sp)
 203d9e4:	d9002a17 	ldw	r4,168(sp)
 203d9e8:	1100010e 	bge	r2,r4,203d9f0 <___svfprintf_internal_r+0xa30>
 203d9ec:	2005883a 	mov	r2,r4
 203d9f0:	d9402f17 	ldw	r5,188(sp)
 203d9f4:	288b883a 	add	r5,r5,r2
 203d9f8:	d9402f15 	stw	r5,188(sp)
 203d9fc:	18019c1e 	bne	r3,zero,203e070 <___svfprintf_internal_r+0x10b0>
 203da00:	b8800007 	ldb	r2,0(r23)
 203da04:	d8001f15 	stw	zero,124(sp)
 203da08:	da000404 	addi	r8,sp,16
 203da0c:	103d991e 	bne	r2,zero,203d074 <__alt_mem_mem_0+0xfd01d074>
 203da10:	b821883a 	mov	r16,r23
 203da14:	003daf06 	br	203d0d4 <__alt_mem_mem_0+0xfd01d0d4>
 203da18:	18c03fcc 	andi	r3,r3,255
 203da1c:	1805c71e 	bne	r3,zero,203f13c <___svfprintf_internal_r+0x217c>
 203da20:	94800414 	ori	r18,r18,16
 203da24:	9080080c 	andi	r2,r18,32
 203da28:	10020126 	beq	r2,zero,203e230 <___svfprintf_internal_r+0x1270>
 203da2c:	d8802d17 	ldw	r2,180(sp)
 203da30:	d9002917 	ldw	r4,164(sp)
 203da34:	d8002785 	stb	zero,158(sp)
 203da38:	10c00204 	addi	r3,r2,8
 203da3c:	15000017 	ldw	r20,0(r2)
 203da40:	15800117 	ldw	r22,4(r2)
 203da44:	20038e16 	blt	r4,zero,203e880 <___svfprintf_internal_r+0x18c0>
 203da48:	013fdfc4 	movi	r4,-129
 203da4c:	a584b03a 	or	r2,r20,r22
 203da50:	d8c02d15 	stw	r3,180(sp)
 203da54:	9124703a 	and	r18,r18,r4
 203da58:	0039883a 	mov	fp,zero
 203da5c:	103eb61e 	bne	r2,zero,203d538 <__alt_mem_mem_0+0xfd01d538>
 203da60:	d8802917 	ldw	r2,164(sp)
 203da64:	1002c81e 	bne	r2,zero,203e588 <___svfprintf_internal_r+0x15c8>
 203da68:	d8002915 	stw	zero,164(sp)
 203da6c:	d8002e15 	stw	zero,184(sp)
 203da70:	dc001e04 	addi	r16,sp,120
 203da74:	003efa06 	br	203d660 <__alt_mem_mem_0+0xfd01d660>
 203da78:	18c03fcc 	andi	r3,r3,255
 203da7c:	1805ad1e 	bne	r3,zero,203f134 <___svfprintf_internal_r+0x2174>
 203da80:	01408134 	movhi	r5,516
 203da84:	29437404 	addi	r5,r5,3536
 203da88:	d9403a15 	stw	r5,232(sp)
 203da8c:	9080080c 	andi	r2,r18,32
 203da90:	10006126 	beq	r2,zero,203dc18 <___svfprintf_internal_r+0xc58>
 203da94:	d8802d17 	ldw	r2,180(sp)
 203da98:	15000017 	ldw	r20,0(r2)
 203da9c:	15800117 	ldw	r22,4(r2)
 203daa0:	10800204 	addi	r2,r2,8
 203daa4:	d8802d15 	stw	r2,180(sp)
 203daa8:	9080004c 	andi	r2,r18,1
 203daac:	10018e26 	beq	r2,zero,203e0e8 <___svfprintf_internal_r+0x1128>
 203dab0:	a584b03a 	or	r2,r20,r22
 203dab4:	10030926 	beq	r2,zero,203e6dc <___svfprintf_internal_r+0x171c>
 203dab8:	d8c02917 	ldw	r3,164(sp)
 203dabc:	00800c04 	movi	r2,48
 203dac0:	d8802705 	stb	r2,156(sp)
 203dac4:	dc402745 	stb	r17,157(sp)
 203dac8:	d8002785 	stb	zero,158(sp)
 203dacc:	90800094 	ori	r2,r18,2
 203dad0:	18048716 	blt	r3,zero,203ecf0 <___svfprintf_internal_r+0x1d30>
 203dad4:	00bfdfc4 	movi	r2,-129
 203dad8:	90a4703a 	and	r18,r18,r2
 203dadc:	94800094 	ori	r18,r18,2
 203dae0:	0039883a 	mov	fp,zero
 203dae4:	d9003a17 	ldw	r4,232(sp)
 203dae8:	dc001e04 	addi	r16,sp,120
 203daec:	a08003cc 	andi	r2,r20,15
 203daf0:	b006973a 	slli	r3,r22,28
 203daf4:	2085883a 	add	r2,r4,r2
 203daf8:	a028d13a 	srli	r20,r20,4
 203dafc:	10800003 	ldbu	r2,0(r2)
 203db00:	b02cd13a 	srli	r22,r22,4
 203db04:	843fffc4 	addi	r16,r16,-1
 203db08:	1d28b03a 	or	r20,r3,r20
 203db0c:	80800005 	stb	r2,0(r16)
 203db10:	a584b03a 	or	r2,r20,r22
 203db14:	103ff51e 	bne	r2,zero,203daec <__alt_mem_mem_0+0xfd01daec>
 203db18:	d8c02817 	ldw	r3,160(sp)
 203db1c:	1c07c83a 	sub	r3,r3,r16
 203db20:	d8c02e15 	stw	r3,184(sp)
 203db24:	003ece06 	br	203d660 <__alt_mem_mem_0+0xfd01d660>
 203db28:	d8c02d17 	ldw	r3,180(sp)
 203db2c:	d9002d17 	ldw	r4,180(sp)
 203db30:	d8002785 	stb	zero,158(sp)
 203db34:	18800017 	ldw	r2,0(r3)
 203db38:	21000104 	addi	r4,r4,4
 203db3c:	00c00044 	movi	r3,1
 203db40:	d8c02a15 	stw	r3,168(sp)
 203db44:	d8801405 	stb	r2,80(sp)
 203db48:	d9002d15 	stw	r4,180(sp)
 203db4c:	d8c02e15 	stw	r3,184(sp)
 203db50:	d8002915 	stw	zero,164(sp)
 203db54:	d8003215 	stw	zero,200(sp)
 203db58:	dc001404 	addi	r16,sp,80
 203db5c:	0039883a 	mov	fp,zero
 203db60:	003ecc06 	br	203d694 <__alt_mem_mem_0+0xfd01d694>
 203db64:	18c03fcc 	andi	r3,r3,255
 203db68:	183e9226 	beq	r3,zero,203d5b4 <__alt_mem_mem_0+0xfd01d5b4>
 203db6c:	d9c02785 	stb	r7,158(sp)
 203db70:	003e9006 	br	203d5b4 <__alt_mem_mem_0+0xfd01d5b4>
 203db74:	00c00044 	movi	r3,1
 203db78:	01c00ac4 	movi	r7,43
 203db7c:	bc400007 	ldb	r17,0(r23)
 203db80:	003d6306 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203db84:	94800814 	ori	r18,r18,32
 203db88:	bc400007 	ldb	r17,0(r23)
 203db8c:	003d6006 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203db90:	d8c02d17 	ldw	r3,180(sp)
 203db94:	d8002785 	stb	zero,158(sp)
 203db98:	1c000017 	ldw	r16,0(r3)
 203db9c:	1d000104 	addi	r20,r3,4
 203dba0:	80040f26 	beq	r16,zero,203ebe0 <___svfprintf_internal_r+0x1c20>
 203dba4:	d9002917 	ldw	r4,164(sp)
 203dba8:	2003dc16 	blt	r4,zero,203eb1c <___svfprintf_internal_r+0x1b5c>
 203dbac:	200d883a 	mov	r6,r4
 203dbb0:	000b883a 	mov	r5,zero
 203dbb4:	8009883a 	mov	r4,r16
 203dbb8:	da003e15 	stw	r8,248(sp)
 203dbbc:	2005d740 	call	2005d74 <memchr>
 203dbc0:	da003e17 	ldw	r8,248(sp)
 203dbc4:	10045826 	beq	r2,zero,203ed28 <___svfprintf_internal_r+0x1d68>
 203dbc8:	1405c83a 	sub	r2,r2,r16
 203dbcc:	d8802e15 	stw	r2,184(sp)
 203dbd0:	1003d816 	blt	r2,zero,203eb34 <___svfprintf_internal_r+0x1b74>
 203dbd4:	df002783 	ldbu	fp,158(sp)
 203dbd8:	d8802a15 	stw	r2,168(sp)
 203dbdc:	dd002d15 	stw	r20,180(sp)
 203dbe0:	d8002915 	stw	zero,164(sp)
 203dbe4:	d8003215 	stw	zero,200(sp)
 203dbe8:	003ea306 	br	203d678 <__alt_mem_mem_0+0xfd01d678>
 203dbec:	18c03fcc 	andi	r3,r3,255
 203dbf0:	183f8c26 	beq	r3,zero,203da24 <__alt_mem_mem_0+0xfd01da24>
 203dbf4:	d9c02785 	stb	r7,158(sp)
 203dbf8:	003f8a06 	br	203da24 <__alt_mem_mem_0+0xfd01da24>
 203dbfc:	18c03fcc 	andi	r3,r3,255
 203dc00:	1805631e 	bne	r3,zero,203f190 <___svfprintf_internal_r+0x21d0>
 203dc04:	01408134 	movhi	r5,516
 203dc08:	29437904 	addi	r5,r5,3556
 203dc0c:	d9403a15 	stw	r5,232(sp)
 203dc10:	9080080c 	andi	r2,r18,32
 203dc14:	103f9f1e 	bne	r2,zero,203da94 <__alt_mem_mem_0+0xfd01da94>
 203dc18:	9080040c 	andi	r2,r18,16
 203dc1c:	10029c26 	beq	r2,zero,203e690 <___svfprintf_internal_r+0x16d0>
 203dc20:	d8c02d17 	ldw	r3,180(sp)
 203dc24:	002d883a 	mov	r22,zero
 203dc28:	1d000017 	ldw	r20,0(r3)
 203dc2c:	18c00104 	addi	r3,r3,4
 203dc30:	d8c02d15 	stw	r3,180(sp)
 203dc34:	003f9c06 	br	203daa8 <__alt_mem_mem_0+0xfd01daa8>
 203dc38:	94800054 	ori	r18,r18,1
 203dc3c:	bc400007 	ldb	r17,0(r23)
 203dc40:	003d3306 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203dc44:	38803fcc 	andi	r2,r7,255
 203dc48:	1080201c 	xori	r2,r2,128
 203dc4c:	10bfe004 	addi	r2,r2,-128
 203dc50:	1002971e 	bne	r2,zero,203e6b0 <___svfprintf_internal_r+0x16f0>
 203dc54:	00c00044 	movi	r3,1
 203dc58:	01c00804 	movi	r7,32
 203dc5c:	bc400007 	ldb	r17,0(r23)
 203dc60:	003d2b06 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203dc64:	18c03fcc 	andi	r3,r3,255
 203dc68:	183e2326 	beq	r3,zero,203d4f8 <__alt_mem_mem_0+0xfd01d4f8>
 203dc6c:	d9c02785 	stb	r7,158(sp)
 203dc70:	003e2106 	br	203d4f8 <__alt_mem_mem_0+0xfd01d4f8>
 203dc74:	bc400007 	ldb	r17,0(r23)
 203dc78:	8a430426 	beq	r17,r9,203e88c <___svfprintf_internal_r+0x18cc>
 203dc7c:	94800414 	ori	r18,r18,16
 203dc80:	003d2306 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203dc84:	18c03fcc 	andi	r3,r3,255
 203dc88:	18053f1e 	bne	r3,zero,203f188 <___svfprintf_internal_r+0x21c8>
 203dc8c:	9080080c 	andi	r2,r18,32
 203dc90:	10028926 	beq	r2,zero,203e6b8 <___svfprintf_internal_r+0x16f8>
 203dc94:	d9402d17 	ldw	r5,180(sp)
 203dc98:	d9002f17 	ldw	r4,188(sp)
 203dc9c:	28800017 	ldw	r2,0(r5)
 203dca0:	2007d7fa 	srai	r3,r4,31
 203dca4:	29400104 	addi	r5,r5,4
 203dca8:	d9402d15 	stw	r5,180(sp)
 203dcac:	11000015 	stw	r4,0(r2)
 203dcb0:	10c00115 	stw	r3,4(r2)
 203dcb4:	003ced06 	br	203d06c <__alt_mem_mem_0+0xfd01d06c>
 203dcb8:	94801014 	ori	r18,r18,64
 203dcbc:	bc400007 	ldb	r17,0(r23)
 203dcc0:	003d1306 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203dcc4:	01008134 	movhi	r4,516
 203dcc8:	21037904 	addi	r4,r4,3556
 203dccc:	0039883a 	mov	fp,zero
 203dcd0:	d9003a15 	stw	r4,232(sp)
 203dcd4:	04401e04 	movi	r17,120
 203dcd8:	003f8206 	br	203dae4 <__alt_mem_mem_0+0xfd01dae4>
 203dcdc:	18c03fcc 	andi	r3,r3,255
 203dce0:	1805221e 	bne	r3,zero,203f16c <___svfprintf_internal_r+0x21ac>
 203dce4:	883d9526 	beq	r17,zero,203d33c <__alt_mem_mem_0+0xfd01d33c>
 203dce8:	00c00044 	movi	r3,1
 203dcec:	d8c02a15 	stw	r3,168(sp)
 203dcf0:	dc401405 	stb	r17,80(sp)
 203dcf4:	d8002785 	stb	zero,158(sp)
 203dcf8:	003f9406 	br	203db4c <__alt_mem_mem_0+0xfd01db4c>
 203dcfc:	01008134 	movhi	r4,516
 203dd00:	21037904 	addi	r4,r4,3556
 203dd04:	d9003a15 	stw	r4,232(sp)
 203dd08:	d8c02d15 	stw	r3,180(sp)
 203dd0c:	1025883a 	mov	r18,r2
 203dd10:	04401e04 	movi	r17,120
 203dd14:	a584b03a 	or	r2,r20,r22
 203dd18:	1000fa1e 	bne	r2,zero,203e104 <___svfprintf_internal_r+0x1144>
 203dd1c:	0039883a 	mov	fp,zero
 203dd20:	00800084 	movi	r2,2
 203dd24:	10803fcc 	andi	r2,r2,255
 203dd28:	00c00044 	movi	r3,1
 203dd2c:	10c21626 	beq	r2,r3,203e588 <___svfprintf_internal_r+0x15c8>
 203dd30:	00c00084 	movi	r3,2
 203dd34:	10fe301e 	bne	r2,r3,203d5f8 <__alt_mem_mem_0+0xfd01d5f8>
 203dd38:	003d7606 	br	203d314 <__alt_mem_mem_0+0xfd01d314>
 203dd3c:	d8c02017 	ldw	r3,128(sp)
 203dd40:	003e9506 	br	203d798 <__alt_mem_mem_0+0xfd01d798>
 203dd44:	00801944 	movi	r2,101
 203dd48:	14407c0e 	bge	r2,r17,203df3c <___svfprintf_internal_r+0xf7c>
 203dd4c:	d9003617 	ldw	r4,216(sp)
 203dd50:	d9403717 	ldw	r5,220(sp)
 203dd54:	000d883a 	mov	r6,zero
 203dd58:	000f883a 	mov	r7,zero
 203dd5c:	d8c03d15 	stw	r3,244(sp)
 203dd60:	da003e15 	stw	r8,248(sp)
 203dd64:	200bd2c0 	call	200bd2c <__eqdf2>
 203dd68:	d8c03d17 	ldw	r3,244(sp)
 203dd6c:	da003e17 	ldw	r8,248(sp)
 203dd70:	1000f51e 	bne	r2,zero,203e148 <___svfprintf_internal_r+0x1188>
 203dd74:	d8801f17 	ldw	r2,124(sp)
 203dd78:	01008134 	movhi	r4,516
 203dd7c:	21038004 	addi	r4,r4,3584
 203dd80:	18c00044 	addi	r3,r3,1
 203dd84:	10800044 	addi	r2,r2,1
 203dd88:	41000015 	stw	r4,0(r8)
 203dd8c:	01000044 	movi	r4,1
 203dd90:	41000115 	stw	r4,4(r8)
 203dd94:	d8c02015 	stw	r3,128(sp)
 203dd98:	d8801f15 	stw	r2,124(sp)
 203dd9c:	010001c4 	movi	r4,7
 203dda0:	20826616 	blt	r4,r2,203e73c <___svfprintf_internal_r+0x177c>
 203dda4:	42000204 	addi	r8,r8,8
 203dda8:	d8802617 	ldw	r2,152(sp)
 203ddac:	d9403317 	ldw	r5,204(sp)
 203ddb0:	11400216 	blt	r2,r5,203ddbc <___svfprintf_internal_r+0xdfc>
 203ddb4:	9080004c 	andi	r2,r18,1
 203ddb8:	103ed526 	beq	r2,zero,203d910 <__alt_mem_mem_0+0xfd01d910>
 203ddbc:	d8803817 	ldw	r2,224(sp)
 203ddc0:	d9003417 	ldw	r4,208(sp)
 203ddc4:	d9403817 	ldw	r5,224(sp)
 203ddc8:	1887883a 	add	r3,r3,r2
 203ddcc:	d8801f17 	ldw	r2,124(sp)
 203ddd0:	41000015 	stw	r4,0(r8)
 203ddd4:	41400115 	stw	r5,4(r8)
 203ddd8:	10800044 	addi	r2,r2,1
 203dddc:	d8c02015 	stw	r3,128(sp)
 203dde0:	d8801f15 	stw	r2,124(sp)
 203dde4:	010001c4 	movi	r4,7
 203dde8:	2082af16 	blt	r4,r2,203e8a8 <___svfprintf_internal_r+0x18e8>
 203ddec:	42000204 	addi	r8,r8,8
 203ddf0:	d8803317 	ldw	r2,204(sp)
 203ddf4:	143fffc4 	addi	r16,r2,-1
 203ddf8:	043ec50e 	bge	zero,r16,203d910 <__alt_mem_mem_0+0xfd01d910>
 203ddfc:	04400404 	movi	r17,16
 203de00:	d8801f17 	ldw	r2,124(sp)
 203de04:	8c00860e 	bge	r17,r16,203e020 <___svfprintf_internal_r+0x1060>
 203de08:	01408134 	movhi	r5,516
 203de0c:	294e4f04 	addi	r5,r5,14652
 203de10:	d9402b15 	stw	r5,172(sp)
 203de14:	058001c4 	movi	r22,7
 203de18:	dd002c17 	ldw	r20,176(sp)
 203de1c:	00000306 	br	203de2c <___svfprintf_internal_r+0xe6c>
 203de20:	42000204 	addi	r8,r8,8
 203de24:	843ffc04 	addi	r16,r16,-16
 203de28:	8c00800e 	bge	r17,r16,203e02c <___svfprintf_internal_r+0x106c>
 203de2c:	18c00404 	addi	r3,r3,16
 203de30:	10800044 	addi	r2,r2,1
 203de34:	45400015 	stw	r21,0(r8)
 203de38:	44400115 	stw	r17,4(r8)
 203de3c:	d8c02015 	stw	r3,128(sp)
 203de40:	d8801f15 	stw	r2,124(sp)
 203de44:	b0bff60e 	bge	r22,r2,203de20 <__alt_mem_mem_0+0xfd01de20>
 203de48:	d9801e04 	addi	r6,sp,120
 203de4c:	a00b883a 	mov	r5,r20
 203de50:	9809883a 	mov	r4,r19
 203de54:	203f4300 	call	203f430 <__ssprint_r>
 203de58:	103d3e1e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203de5c:	d8c02017 	ldw	r3,128(sp)
 203de60:	d8801f17 	ldw	r2,124(sp)
 203de64:	da000404 	addi	r8,sp,16
 203de68:	003fee06 	br	203de24 <__alt_mem_mem_0+0xfd01de24>
 203de6c:	d9403117 	ldw	r5,196(sp)
 203de70:	d8802a17 	ldw	r2,168(sp)
 203de74:	28adc83a 	sub	r22,r5,r2
 203de78:	05be650e 	bge	zero,r22,203d810 <__alt_mem_mem_0+0xfd01d810>
 203de7c:	07000404 	movi	fp,16
 203de80:	d8801f17 	ldw	r2,124(sp)
 203de84:	e583a20e 	bge	fp,r22,203ed10 <___svfprintf_internal_r+0x1d50>
 203de88:	01408134 	movhi	r5,516
 203de8c:	294e4f04 	addi	r5,r5,14652
 203de90:	dc403015 	stw	r17,192(sp)
 203de94:	d9402b15 	stw	r5,172(sp)
 203de98:	b023883a 	mov	r17,r22
 203de9c:	050001c4 	movi	r20,7
 203dea0:	902d883a 	mov	r22,r18
 203dea4:	8025883a 	mov	r18,r16
 203dea8:	dc002c17 	ldw	r16,176(sp)
 203deac:	00000306 	br	203debc <___svfprintf_internal_r+0xefc>
 203deb0:	8c7ffc04 	addi	r17,r17,-16
 203deb4:	42000204 	addi	r8,r8,8
 203deb8:	e440110e 	bge	fp,r17,203df00 <___svfprintf_internal_r+0xf40>
 203debc:	18c00404 	addi	r3,r3,16
 203dec0:	10800044 	addi	r2,r2,1
 203dec4:	45400015 	stw	r21,0(r8)
 203dec8:	47000115 	stw	fp,4(r8)
 203decc:	d8c02015 	stw	r3,128(sp)
 203ded0:	d8801f15 	stw	r2,124(sp)
 203ded4:	a0bff60e 	bge	r20,r2,203deb0 <__alt_mem_mem_0+0xfd01deb0>
 203ded8:	d9801e04 	addi	r6,sp,120
 203dedc:	800b883a 	mov	r5,r16
 203dee0:	9809883a 	mov	r4,r19
 203dee4:	203f4300 	call	203f430 <__ssprint_r>
 203dee8:	103d1a1e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203deec:	8c7ffc04 	addi	r17,r17,-16
 203def0:	d8c02017 	ldw	r3,128(sp)
 203def4:	d8801f17 	ldw	r2,124(sp)
 203def8:	da000404 	addi	r8,sp,16
 203defc:	e47fef16 	blt	fp,r17,203debc <__alt_mem_mem_0+0xfd01debc>
 203df00:	9021883a 	mov	r16,r18
 203df04:	b025883a 	mov	r18,r22
 203df08:	882d883a 	mov	r22,r17
 203df0c:	dc403017 	ldw	r17,192(sp)
 203df10:	d9002b17 	ldw	r4,172(sp)
 203df14:	1d87883a 	add	r3,r3,r22
 203df18:	10800044 	addi	r2,r2,1
 203df1c:	41000015 	stw	r4,0(r8)
 203df20:	45800115 	stw	r22,4(r8)
 203df24:	d8c02015 	stw	r3,128(sp)
 203df28:	d8801f15 	stw	r2,124(sp)
 203df2c:	010001c4 	movi	r4,7
 203df30:	20819a16 	blt	r4,r2,203e59c <___svfprintf_internal_r+0x15dc>
 203df34:	42000204 	addi	r8,r8,8
 203df38:	003e3506 	br	203d810 <__alt_mem_mem_0+0xfd01d810>
 203df3c:	d9403317 	ldw	r5,204(sp)
 203df40:	00800044 	movi	r2,1
 203df44:	18c00044 	addi	r3,r3,1
 203df48:	1141710e 	bge	r2,r5,203e510 <___svfprintf_internal_r+0x1550>
 203df4c:	dc401f17 	ldw	r17,124(sp)
 203df50:	00800044 	movi	r2,1
 203df54:	40800115 	stw	r2,4(r8)
 203df58:	8c400044 	addi	r17,r17,1
 203df5c:	44000015 	stw	r16,0(r8)
 203df60:	d8c02015 	stw	r3,128(sp)
 203df64:	dc401f15 	stw	r17,124(sp)
 203df68:	008001c4 	movi	r2,7
 203df6c:	14417416 	blt	r2,r17,203e540 <___svfprintf_internal_r+0x1580>
 203df70:	42000204 	addi	r8,r8,8
 203df74:	d8803817 	ldw	r2,224(sp)
 203df78:	d9003417 	ldw	r4,208(sp)
 203df7c:	8c400044 	addi	r17,r17,1
 203df80:	10c7883a 	add	r3,r2,r3
 203df84:	40800115 	stw	r2,4(r8)
 203df88:	41000015 	stw	r4,0(r8)
 203df8c:	d8c02015 	stw	r3,128(sp)
 203df90:	dc401f15 	stw	r17,124(sp)
 203df94:	008001c4 	movi	r2,7
 203df98:	14417216 	blt	r2,r17,203e564 <___svfprintf_internal_r+0x15a4>
 203df9c:	45800204 	addi	r22,r8,8
 203dfa0:	d9003617 	ldw	r4,216(sp)
 203dfa4:	d9403717 	ldw	r5,220(sp)
 203dfa8:	000d883a 	mov	r6,zero
 203dfac:	000f883a 	mov	r7,zero
 203dfb0:	d8c03d15 	stw	r3,244(sp)
 203dfb4:	200bd2c0 	call	200bd2c <__eqdf2>
 203dfb8:	d8c03d17 	ldw	r3,244(sp)
 203dfbc:	1000b326 	beq	r2,zero,203e28c <___svfprintf_internal_r+0x12cc>
 203dfc0:	d9403317 	ldw	r5,204(sp)
 203dfc4:	84000044 	addi	r16,r16,1
 203dfc8:	8c400044 	addi	r17,r17,1
 203dfcc:	28bfffc4 	addi	r2,r5,-1
 203dfd0:	1887883a 	add	r3,r3,r2
 203dfd4:	b0800115 	stw	r2,4(r22)
 203dfd8:	b4000015 	stw	r16,0(r22)
 203dfdc:	d8c02015 	stw	r3,128(sp)
 203dfe0:	dc401f15 	stw	r17,124(sp)
 203dfe4:	008001c4 	movi	r2,7
 203dfe8:	1440d216 	blt	r2,r17,203e334 <___svfprintf_internal_r+0x1374>
 203dfec:	b5800204 	addi	r22,r22,8
 203dff0:	d9003b17 	ldw	r4,236(sp)
 203dff4:	df0022c4 	addi	fp,sp,139
 203dff8:	8c400044 	addi	r17,r17,1
 203dffc:	20c7883a 	add	r3,r4,r3
 203e000:	b7000015 	stw	fp,0(r22)
 203e004:	b1000115 	stw	r4,4(r22)
 203e008:	d8c02015 	stw	r3,128(sp)
 203e00c:	dc401f15 	stw	r17,124(sp)
 203e010:	008001c4 	movi	r2,7
 203e014:	14400e16 	blt	r2,r17,203e050 <___svfprintf_internal_r+0x1090>
 203e018:	b2000204 	addi	r8,r22,8
 203e01c:	003e3c06 	br	203d910 <__alt_mem_mem_0+0xfd01d910>
 203e020:	01008134 	movhi	r4,516
 203e024:	210e4f04 	addi	r4,r4,14652
 203e028:	d9002b15 	stw	r4,172(sp)
 203e02c:	d9002b17 	ldw	r4,172(sp)
 203e030:	1c07883a 	add	r3,r3,r16
 203e034:	44000115 	stw	r16,4(r8)
 203e038:	41000015 	stw	r4,0(r8)
 203e03c:	10800044 	addi	r2,r2,1
 203e040:	d8c02015 	stw	r3,128(sp)
 203e044:	d8801f15 	stw	r2,124(sp)
 203e048:	010001c4 	movi	r4,7
 203e04c:	20be2f0e 	bge	r4,r2,203d90c <__alt_mem_mem_0+0xfd01d90c>
 203e050:	d9402c17 	ldw	r5,176(sp)
 203e054:	d9801e04 	addi	r6,sp,120
 203e058:	9809883a 	mov	r4,r19
 203e05c:	203f4300 	call	203f430 <__ssprint_r>
 203e060:	103cbc1e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e064:	d8c02017 	ldw	r3,128(sp)
 203e068:	da000404 	addi	r8,sp,16
 203e06c:	003e2806 	br	203d910 <__alt_mem_mem_0+0xfd01d910>
 203e070:	d9402c17 	ldw	r5,176(sp)
 203e074:	d9801e04 	addi	r6,sp,120
 203e078:	9809883a 	mov	r4,r19
 203e07c:	203f4300 	call	203f430 <__ssprint_r>
 203e080:	103e5f26 	beq	r2,zero,203da00 <__alt_mem_mem_0+0xfd01da00>
 203e084:	003cb306 	br	203d354 <__alt_mem_mem_0+0xfd01d354>
 203e088:	d9402c17 	ldw	r5,176(sp)
 203e08c:	d9801e04 	addi	r6,sp,120
 203e090:	9809883a 	mov	r4,r19
 203e094:	203f4300 	call	203f430 <__ssprint_r>
 203e098:	103cae1e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e09c:	d8c02017 	ldw	r3,128(sp)
 203e0a0:	da000404 	addi	r8,sp,16
 203e0a4:	003e0d06 	br	203d8dc <__alt_mem_mem_0+0xfd01d8dc>
 203e0a8:	d9402c17 	ldw	r5,176(sp)
 203e0ac:	d9801e04 	addi	r6,sp,120
 203e0b0:	9809883a 	mov	r4,r19
 203e0b4:	203f4300 	call	203f430 <__ssprint_r>
 203e0b8:	103ca61e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e0bc:	d8c02017 	ldw	r3,128(sp)
 203e0c0:	da000404 	addi	r8,sp,16
 203e0c4:	003dc106 	br	203d7cc <__alt_mem_mem_0+0xfd01d7cc>
 203e0c8:	d9402c17 	ldw	r5,176(sp)
 203e0cc:	d9801e04 	addi	r6,sp,120
 203e0d0:	9809883a 	mov	r4,r19
 203e0d4:	203f4300 	call	203f430 <__ssprint_r>
 203e0d8:	103c9e1e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e0dc:	d8c02017 	ldw	r3,128(sp)
 203e0e0:	da000404 	addi	r8,sp,16
 203e0e4:	003dc706 	br	203d804 <__alt_mem_mem_0+0xfd01d804>
 203e0e8:	d8802917 	ldw	r2,164(sp)
 203e0ec:	d8002785 	stb	zero,158(sp)
 203e0f0:	103f0816 	blt	r2,zero,203dd14 <__alt_mem_mem_0+0xfd01dd14>
 203e0f4:	00ffdfc4 	movi	r3,-129
 203e0f8:	a584b03a 	or	r2,r20,r22
 203e0fc:	90e4703a 	and	r18,r18,r3
 203e100:	103c8126 	beq	r2,zero,203d308 <__alt_mem_mem_0+0xfd01d308>
 203e104:	0039883a 	mov	fp,zero
 203e108:	003e7606 	br	203dae4 <__alt_mem_mem_0+0xfd01dae4>
 203e10c:	9080040c 	andi	r2,r18,16
 203e110:	10013d26 	beq	r2,zero,203e608 <___svfprintf_internal_r+0x1648>
 203e114:	d9002d17 	ldw	r4,180(sp)
 203e118:	d9402917 	ldw	r5,164(sp)
 203e11c:	d8002785 	stb	zero,158(sp)
 203e120:	20800104 	addi	r2,r4,4
 203e124:	25000017 	ldw	r20,0(r4)
 203e128:	002d883a 	mov	r22,zero
 203e12c:	28013f16 	blt	r5,zero,203e62c <___svfprintf_internal_r+0x166c>
 203e130:	00ffdfc4 	movi	r3,-129
 203e134:	d8802d15 	stw	r2,180(sp)
 203e138:	90e4703a 	and	r18,r18,r3
 203e13c:	a03d2b26 	beq	r20,zero,203d5ec <__alt_mem_mem_0+0xfd01d5ec>
 203e140:	0039883a 	mov	fp,zero
 203e144:	003d2e06 	br	203d600 <__alt_mem_mem_0+0xfd01d600>
 203e148:	dc402617 	ldw	r17,152(sp)
 203e14c:	0441830e 	bge	zero,r17,203e75c <___svfprintf_internal_r+0x179c>
 203e150:	dc403217 	ldw	r17,200(sp)
 203e154:	d8803317 	ldw	r2,204(sp)
 203e158:	1440010e 	bge	r2,r17,203e160 <___svfprintf_internal_r+0x11a0>
 203e15c:	1023883a 	mov	r17,r2
 203e160:	04400a0e 	bge	zero,r17,203e18c <___svfprintf_internal_r+0x11cc>
 203e164:	d8801f17 	ldw	r2,124(sp)
 203e168:	1c47883a 	add	r3,r3,r17
 203e16c:	44000015 	stw	r16,0(r8)
 203e170:	10800044 	addi	r2,r2,1
 203e174:	44400115 	stw	r17,4(r8)
 203e178:	d8c02015 	stw	r3,128(sp)
 203e17c:	d8801f15 	stw	r2,124(sp)
 203e180:	010001c4 	movi	r4,7
 203e184:	20827516 	blt	r4,r2,203eb5c <___svfprintf_internal_r+0x1b9c>
 203e188:	42000204 	addi	r8,r8,8
 203e18c:	88027b16 	blt	r17,zero,203eb7c <___svfprintf_internal_r+0x1bbc>
 203e190:	d9003217 	ldw	r4,200(sp)
 203e194:	2463c83a 	sub	r17,r4,r17
 203e198:	0440990e 	bge	zero,r17,203e400 <___svfprintf_internal_r+0x1440>
 203e19c:	05800404 	movi	r22,16
 203e1a0:	d8801f17 	ldw	r2,124(sp)
 203e1a4:	b441530e 	bge	r22,r17,203e6f4 <___svfprintf_internal_r+0x1734>
 203e1a8:	01008134 	movhi	r4,516
 203e1ac:	210e4f04 	addi	r4,r4,14652
 203e1b0:	d9002b15 	stw	r4,172(sp)
 203e1b4:	070001c4 	movi	fp,7
 203e1b8:	dd002c17 	ldw	r20,176(sp)
 203e1bc:	00000306 	br	203e1cc <___svfprintf_internal_r+0x120c>
 203e1c0:	42000204 	addi	r8,r8,8
 203e1c4:	8c7ffc04 	addi	r17,r17,-16
 203e1c8:	b4414d0e 	bge	r22,r17,203e700 <___svfprintf_internal_r+0x1740>
 203e1cc:	18c00404 	addi	r3,r3,16
 203e1d0:	10800044 	addi	r2,r2,1
 203e1d4:	45400015 	stw	r21,0(r8)
 203e1d8:	45800115 	stw	r22,4(r8)
 203e1dc:	d8c02015 	stw	r3,128(sp)
 203e1e0:	d8801f15 	stw	r2,124(sp)
 203e1e4:	e0bff60e 	bge	fp,r2,203e1c0 <__alt_mem_mem_0+0xfd01e1c0>
 203e1e8:	d9801e04 	addi	r6,sp,120
 203e1ec:	a00b883a 	mov	r5,r20
 203e1f0:	9809883a 	mov	r4,r19
 203e1f4:	203f4300 	call	203f430 <__ssprint_r>
 203e1f8:	103c561e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e1fc:	d8c02017 	ldw	r3,128(sp)
 203e200:	d8801f17 	ldw	r2,124(sp)
 203e204:	da000404 	addi	r8,sp,16
 203e208:	003fee06 	br	203e1c4 <__alt_mem_mem_0+0xfd01e1c4>
 203e20c:	d9402c17 	ldw	r5,176(sp)
 203e210:	d9801e04 	addi	r6,sp,120
 203e214:	9809883a 	mov	r4,r19
 203e218:	203f4300 	call	203f430 <__ssprint_r>
 203e21c:	103c4d1e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e220:	d8c02017 	ldw	r3,128(sp)
 203e224:	df002787 	ldb	fp,158(sp)
 203e228:	da000404 	addi	r8,sp,16
 203e22c:	003d5a06 	br	203d798 <__alt_mem_mem_0+0xfd01d798>
 203e230:	9080040c 	andi	r2,r18,16
 203e234:	10005c26 	beq	r2,zero,203e3a8 <___svfprintf_internal_r+0x13e8>
 203e238:	d9402d17 	ldw	r5,180(sp)
 203e23c:	d8c02917 	ldw	r3,164(sp)
 203e240:	d8002785 	stb	zero,158(sp)
 203e244:	28800104 	addi	r2,r5,4
 203e248:	2d000017 	ldw	r20,0(r5)
 203e24c:	002d883a 	mov	r22,zero
 203e250:	18005e16 	blt	r3,zero,203e3cc <___svfprintf_internal_r+0x140c>
 203e254:	00ffdfc4 	movi	r3,-129
 203e258:	d8802d15 	stw	r2,180(sp)
 203e25c:	90e4703a 	and	r18,r18,r3
 203e260:	0039883a 	mov	fp,zero
 203e264:	a03dfe26 	beq	r20,zero,203da60 <__alt_mem_mem_0+0xfd01da60>
 203e268:	00800244 	movi	r2,9
 203e26c:	153cb336 	bltu	r2,r20,203d53c <__alt_mem_mem_0+0xfd01d53c>
 203e270:	a5000c04 	addi	r20,r20,48
 203e274:	dc001dc4 	addi	r16,sp,119
 203e278:	dd001dc5 	stb	r20,119(sp)
 203e27c:	d8c02817 	ldw	r3,160(sp)
 203e280:	1c07c83a 	sub	r3,r3,r16
 203e284:	d8c02e15 	stw	r3,184(sp)
 203e288:	003cf506 	br	203d660 <__alt_mem_mem_0+0xfd01d660>
 203e28c:	d8803317 	ldw	r2,204(sp)
 203e290:	143fffc4 	addi	r16,r2,-1
 203e294:	043f560e 	bge	zero,r16,203dff0 <__alt_mem_mem_0+0xfd01dff0>
 203e298:	07000404 	movi	fp,16
 203e29c:	e403530e 	bge	fp,r16,203efec <___svfprintf_internal_r+0x202c>
 203e2a0:	01408134 	movhi	r5,516
 203e2a4:	294e4f04 	addi	r5,r5,14652
 203e2a8:	d9402b15 	stw	r5,172(sp)
 203e2ac:	01c001c4 	movi	r7,7
 203e2b0:	dd002c17 	ldw	r20,176(sp)
 203e2b4:	00000306 	br	203e2c4 <___svfprintf_internal_r+0x1304>
 203e2b8:	843ffc04 	addi	r16,r16,-16
 203e2bc:	b5800204 	addi	r22,r22,8
 203e2c0:	e400130e 	bge	fp,r16,203e310 <___svfprintf_internal_r+0x1350>
 203e2c4:	18c00404 	addi	r3,r3,16
 203e2c8:	8c400044 	addi	r17,r17,1
 203e2cc:	b5400015 	stw	r21,0(r22)
 203e2d0:	b7000115 	stw	fp,4(r22)
 203e2d4:	d8c02015 	stw	r3,128(sp)
 203e2d8:	dc401f15 	stw	r17,124(sp)
 203e2dc:	3c7ff60e 	bge	r7,r17,203e2b8 <__alt_mem_mem_0+0xfd01e2b8>
 203e2e0:	d9801e04 	addi	r6,sp,120
 203e2e4:	a00b883a 	mov	r5,r20
 203e2e8:	9809883a 	mov	r4,r19
 203e2ec:	d9c03d15 	stw	r7,244(sp)
 203e2f0:	203f4300 	call	203f430 <__ssprint_r>
 203e2f4:	d9c03d17 	ldw	r7,244(sp)
 203e2f8:	103c161e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e2fc:	843ffc04 	addi	r16,r16,-16
 203e300:	d8c02017 	ldw	r3,128(sp)
 203e304:	dc401f17 	ldw	r17,124(sp)
 203e308:	dd800404 	addi	r22,sp,16
 203e30c:	e43fed16 	blt	fp,r16,203e2c4 <__alt_mem_mem_0+0xfd01e2c4>
 203e310:	d8802b17 	ldw	r2,172(sp)
 203e314:	1c07883a 	add	r3,r3,r16
 203e318:	8c400044 	addi	r17,r17,1
 203e31c:	b0800015 	stw	r2,0(r22)
 203e320:	b4000115 	stw	r16,4(r22)
 203e324:	d8c02015 	stw	r3,128(sp)
 203e328:	dc401f15 	stw	r17,124(sp)
 203e32c:	008001c4 	movi	r2,7
 203e330:	147f2e0e 	bge	r2,r17,203dfec <__alt_mem_mem_0+0xfd01dfec>
 203e334:	d9402c17 	ldw	r5,176(sp)
 203e338:	d9801e04 	addi	r6,sp,120
 203e33c:	9809883a 	mov	r4,r19
 203e340:	203f4300 	call	203f430 <__ssprint_r>
 203e344:	103c031e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e348:	d8c02017 	ldw	r3,128(sp)
 203e34c:	dc401f17 	ldw	r17,124(sp)
 203e350:	dd800404 	addi	r22,sp,16
 203e354:	003f2606 	br	203dff0 <__alt_mem_mem_0+0xfd01dff0>
 203e358:	9080040c 	andi	r2,r18,16
 203e35c:	1000c326 	beq	r2,zero,203e66c <___svfprintf_internal_r+0x16ac>
 203e360:	d8802d17 	ldw	r2,180(sp)
 203e364:	15000017 	ldw	r20,0(r2)
 203e368:	10800104 	addi	r2,r2,4
 203e36c:	d8802d15 	stw	r2,180(sp)
 203e370:	a02dd7fa 	srai	r22,r20,31
 203e374:	b005883a 	mov	r2,r22
 203e378:	103c680e 	bge	r2,zero,203d51c <__alt_mem_mem_0+0xfd01d51c>
 203e37c:	0529c83a 	sub	r20,zero,r20
 203e380:	a004c03a 	cmpne	r2,r20,zero
 203e384:	05adc83a 	sub	r22,zero,r22
 203e388:	b0adc83a 	sub	r22,r22,r2
 203e38c:	d8802917 	ldw	r2,164(sp)
 203e390:	07000b44 	movi	fp,45
 203e394:	df002785 	stb	fp,158(sp)
 203e398:	10022e16 	blt	r2,zero,203ec54 <___svfprintf_internal_r+0x1c94>
 203e39c:	00bfdfc4 	movi	r2,-129
 203e3a0:	90a4703a 	and	r18,r18,r2
 203e3a4:	003c6406 	br	203d538 <__alt_mem_mem_0+0xfd01d538>
 203e3a8:	9080100c 	andi	r2,r18,64
 203e3ac:	d8002785 	stb	zero,158(sp)
 203e3b0:	10012526 	beq	r2,zero,203e848 <___svfprintf_internal_r+0x1888>
 203e3b4:	d9002d17 	ldw	r4,180(sp)
 203e3b8:	d9402917 	ldw	r5,164(sp)
 203e3bc:	002d883a 	mov	r22,zero
 203e3c0:	20800104 	addi	r2,r4,4
 203e3c4:	2500000b 	ldhu	r20,0(r4)
 203e3c8:	283fa20e 	bge	r5,zero,203e254 <__alt_mem_mem_0+0xfd01e254>
 203e3cc:	d8802d15 	stw	r2,180(sp)
 203e3d0:	0039883a 	mov	fp,zero
 203e3d4:	a584b03a 	or	r2,r20,r22
 203e3d8:	103c571e 	bne	r2,zero,203d538 <__alt_mem_mem_0+0xfd01d538>
 203e3dc:	00800044 	movi	r2,1
 203e3e0:	003e5006 	br	203dd24 <__alt_mem_mem_0+0xfd01dd24>
 203e3e4:	d9402c17 	ldw	r5,176(sp)
 203e3e8:	d9801e04 	addi	r6,sp,120
 203e3ec:	9809883a 	mov	r4,r19
 203e3f0:	203f4300 	call	203f430 <__ssprint_r>
 203e3f4:	103bd71e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e3f8:	d8c02017 	ldw	r3,128(sp)
 203e3fc:	da000404 	addi	r8,sp,16
 203e400:	d9003217 	ldw	r4,200(sp)
 203e404:	d8802617 	ldw	r2,152(sp)
 203e408:	d9403317 	ldw	r5,204(sp)
 203e40c:	8123883a 	add	r17,r16,r4
 203e410:	11400216 	blt	r2,r5,203e41c <___svfprintf_internal_r+0x145c>
 203e414:	9100004c 	andi	r4,r18,1
 203e418:	20000d26 	beq	r4,zero,203e450 <___svfprintf_internal_r+0x1490>
 203e41c:	d9003817 	ldw	r4,224(sp)
 203e420:	d9403417 	ldw	r5,208(sp)
 203e424:	1907883a 	add	r3,r3,r4
 203e428:	d9001f17 	ldw	r4,124(sp)
 203e42c:	41400015 	stw	r5,0(r8)
 203e430:	d9403817 	ldw	r5,224(sp)
 203e434:	21000044 	addi	r4,r4,1
 203e438:	d8c02015 	stw	r3,128(sp)
 203e43c:	41400115 	stw	r5,4(r8)
 203e440:	d9001f15 	stw	r4,124(sp)
 203e444:	014001c4 	movi	r5,7
 203e448:	2901dc16 	blt	r5,r4,203ebbc <___svfprintf_internal_r+0x1bfc>
 203e44c:	42000204 	addi	r8,r8,8
 203e450:	d9003317 	ldw	r4,204(sp)
 203e454:	8121883a 	add	r16,r16,r4
 203e458:	2085c83a 	sub	r2,r4,r2
 203e45c:	8461c83a 	sub	r16,r16,r17
 203e460:	1400010e 	bge	r2,r16,203e468 <___svfprintf_internal_r+0x14a8>
 203e464:	1021883a 	mov	r16,r2
 203e468:	04000a0e 	bge	zero,r16,203e494 <___svfprintf_internal_r+0x14d4>
 203e46c:	d9001f17 	ldw	r4,124(sp)
 203e470:	1c07883a 	add	r3,r3,r16
 203e474:	44400015 	stw	r17,0(r8)
 203e478:	21000044 	addi	r4,r4,1
 203e47c:	44000115 	stw	r16,4(r8)
 203e480:	d8c02015 	stw	r3,128(sp)
 203e484:	d9001f15 	stw	r4,124(sp)
 203e488:	014001c4 	movi	r5,7
 203e48c:	2901e616 	blt	r5,r4,203ec28 <___svfprintf_internal_r+0x1c68>
 203e490:	42000204 	addi	r8,r8,8
 203e494:	8001f616 	blt	r16,zero,203ec70 <___svfprintf_internal_r+0x1cb0>
 203e498:	1421c83a 	sub	r16,r2,r16
 203e49c:	043d1c0e 	bge	zero,r16,203d910 <__alt_mem_mem_0+0xfd01d910>
 203e4a0:	04400404 	movi	r17,16
 203e4a4:	d8801f17 	ldw	r2,124(sp)
 203e4a8:	8c3edd0e 	bge	r17,r16,203e020 <__alt_mem_mem_0+0xfd01e020>
 203e4ac:	01408134 	movhi	r5,516
 203e4b0:	294e4f04 	addi	r5,r5,14652
 203e4b4:	d9402b15 	stw	r5,172(sp)
 203e4b8:	058001c4 	movi	r22,7
 203e4bc:	dd002c17 	ldw	r20,176(sp)
 203e4c0:	00000306 	br	203e4d0 <___svfprintf_internal_r+0x1510>
 203e4c4:	42000204 	addi	r8,r8,8
 203e4c8:	843ffc04 	addi	r16,r16,-16
 203e4cc:	8c3ed70e 	bge	r17,r16,203e02c <__alt_mem_mem_0+0xfd01e02c>
 203e4d0:	18c00404 	addi	r3,r3,16
 203e4d4:	10800044 	addi	r2,r2,1
 203e4d8:	45400015 	stw	r21,0(r8)
 203e4dc:	44400115 	stw	r17,4(r8)
 203e4e0:	d8c02015 	stw	r3,128(sp)
 203e4e4:	d8801f15 	stw	r2,124(sp)
 203e4e8:	b0bff60e 	bge	r22,r2,203e4c4 <__alt_mem_mem_0+0xfd01e4c4>
 203e4ec:	d9801e04 	addi	r6,sp,120
 203e4f0:	a00b883a 	mov	r5,r20
 203e4f4:	9809883a 	mov	r4,r19
 203e4f8:	203f4300 	call	203f430 <__ssprint_r>
 203e4fc:	103b951e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e500:	d8c02017 	ldw	r3,128(sp)
 203e504:	d8801f17 	ldw	r2,124(sp)
 203e508:	da000404 	addi	r8,sp,16
 203e50c:	003fee06 	br	203e4c8 <__alt_mem_mem_0+0xfd01e4c8>
 203e510:	9088703a 	and	r4,r18,r2
 203e514:	203e8d1e 	bne	r4,zero,203df4c <__alt_mem_mem_0+0xfd01df4c>
 203e518:	dc401f17 	ldw	r17,124(sp)
 203e51c:	40800115 	stw	r2,4(r8)
 203e520:	44000015 	stw	r16,0(r8)
 203e524:	8c400044 	addi	r17,r17,1
 203e528:	d8c02015 	stw	r3,128(sp)
 203e52c:	dc401f15 	stw	r17,124(sp)
 203e530:	008001c4 	movi	r2,7
 203e534:	147f7f16 	blt	r2,r17,203e334 <__alt_mem_mem_0+0xfd01e334>
 203e538:	45800204 	addi	r22,r8,8
 203e53c:	003eac06 	br	203dff0 <__alt_mem_mem_0+0xfd01dff0>
 203e540:	d9402c17 	ldw	r5,176(sp)
 203e544:	d9801e04 	addi	r6,sp,120
 203e548:	9809883a 	mov	r4,r19
 203e54c:	203f4300 	call	203f430 <__ssprint_r>
 203e550:	103b801e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e554:	d8c02017 	ldw	r3,128(sp)
 203e558:	dc401f17 	ldw	r17,124(sp)
 203e55c:	da000404 	addi	r8,sp,16
 203e560:	003e8406 	br	203df74 <__alt_mem_mem_0+0xfd01df74>
 203e564:	d9402c17 	ldw	r5,176(sp)
 203e568:	d9801e04 	addi	r6,sp,120
 203e56c:	9809883a 	mov	r4,r19
 203e570:	203f4300 	call	203f430 <__ssprint_r>
 203e574:	103b771e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e578:	d8c02017 	ldw	r3,128(sp)
 203e57c:	dc401f17 	ldw	r17,124(sp)
 203e580:	dd800404 	addi	r22,sp,16
 203e584:	003e8606 	br	203dfa0 <__alt_mem_mem_0+0xfd01dfa0>
 203e588:	0029883a 	mov	r20,zero
 203e58c:	a5000c04 	addi	r20,r20,48
 203e590:	dc001dc4 	addi	r16,sp,119
 203e594:	dd001dc5 	stb	r20,119(sp)
 203e598:	003f3806 	br	203e27c <__alt_mem_mem_0+0xfd01e27c>
 203e59c:	d9402c17 	ldw	r5,176(sp)
 203e5a0:	d9801e04 	addi	r6,sp,120
 203e5a4:	9809883a 	mov	r4,r19
 203e5a8:	203f4300 	call	203f430 <__ssprint_r>
 203e5ac:	103b691e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e5b0:	d8c02017 	ldw	r3,128(sp)
 203e5b4:	da000404 	addi	r8,sp,16
 203e5b8:	003c9506 	br	203d810 <__alt_mem_mem_0+0xfd01d810>
 203e5bc:	d9003617 	ldw	r4,216(sp)
 203e5c0:	d9403717 	ldw	r5,220(sp)
 203e5c4:	da003e15 	stw	r8,248(sp)
 203e5c8:	20070c40 	call	20070c4 <__fpclassifyd>
 203e5cc:	da003e17 	ldw	r8,248(sp)
 203e5d0:	1000bd1e 	bne	r2,zero,203e8c8 <___svfprintf_internal_r+0x1908>
 203e5d4:	008011c4 	movi	r2,71
 203e5d8:	14411e0e 	bge	r2,r17,203ea54 <___svfprintf_internal_r+0x1a94>
 203e5dc:	04008134 	movhi	r16,516
 203e5e0:	84037304 	addi	r16,r16,3532
 203e5e4:	00c000c4 	movi	r3,3
 203e5e8:	00bfdfc4 	movi	r2,-129
 203e5ec:	d8c02a15 	stw	r3,168(sp)
 203e5f0:	90a4703a 	and	r18,r18,r2
 203e5f4:	df002783 	ldbu	fp,158(sp)
 203e5f8:	d8c02e15 	stw	r3,184(sp)
 203e5fc:	d8002915 	stw	zero,164(sp)
 203e600:	d8003215 	stw	zero,200(sp)
 203e604:	003c1c06 	br	203d678 <__alt_mem_mem_0+0xfd01d678>
 203e608:	9080100c 	andi	r2,r18,64
 203e60c:	d8002785 	stb	zero,158(sp)
 203e610:	10009426 	beq	r2,zero,203e864 <___svfprintf_internal_r+0x18a4>
 203e614:	d8c02d17 	ldw	r3,180(sp)
 203e618:	d9002917 	ldw	r4,164(sp)
 203e61c:	002d883a 	mov	r22,zero
 203e620:	18800104 	addi	r2,r3,4
 203e624:	1d00000b 	ldhu	r20,0(r3)
 203e628:	203ec10e 	bge	r4,zero,203e130 <__alt_mem_mem_0+0xfd01e130>
 203e62c:	a586b03a 	or	r3,r20,r22
 203e630:	d8802d15 	stw	r2,180(sp)
 203e634:	183ec21e 	bne	r3,zero,203e140 <__alt_mem_mem_0+0xfd01e140>
 203e638:	0039883a 	mov	fp,zero
 203e63c:	0005883a 	mov	r2,zero
 203e640:	003db806 	br	203dd24 <__alt_mem_mem_0+0xfd01dd24>
 203e644:	d8802d17 	ldw	r2,180(sp)
 203e648:	d8c02d17 	ldw	r3,180(sp)
 203e64c:	d9002d17 	ldw	r4,180(sp)
 203e650:	10800017 	ldw	r2,0(r2)
 203e654:	18c00117 	ldw	r3,4(r3)
 203e658:	21000204 	addi	r4,r4,8
 203e65c:	d8803615 	stw	r2,216(sp)
 203e660:	d8c03715 	stw	r3,220(sp)
 203e664:	d9002d15 	stw	r4,180(sp)
 203e668:	003b8206 	br	203d474 <__alt_mem_mem_0+0xfd01d474>
 203e66c:	9080100c 	andi	r2,r18,64
 203e670:	10010726 	beq	r2,zero,203ea90 <___svfprintf_internal_r+0x1ad0>
 203e674:	d8c02d17 	ldw	r3,180(sp)
 203e678:	1d00000f 	ldh	r20,0(r3)
 203e67c:	18c00104 	addi	r3,r3,4
 203e680:	d8c02d15 	stw	r3,180(sp)
 203e684:	a02dd7fa 	srai	r22,r20,31
 203e688:	b005883a 	mov	r2,r22
 203e68c:	003ba206 	br	203d518 <__alt_mem_mem_0+0xfd01d518>
 203e690:	9080100c 	andi	r2,r18,64
 203e694:	10010526 	beq	r2,zero,203eaac <___svfprintf_internal_r+0x1aec>
 203e698:	d9002d17 	ldw	r4,180(sp)
 203e69c:	002d883a 	mov	r22,zero
 203e6a0:	2500000b 	ldhu	r20,0(r4)
 203e6a4:	21000104 	addi	r4,r4,4
 203e6a8:	d9002d15 	stw	r4,180(sp)
 203e6ac:	003cfe06 	br	203daa8 <__alt_mem_mem_0+0xfd01daa8>
 203e6b0:	bc400007 	ldb	r17,0(r23)
 203e6b4:	003a9606 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203e6b8:	9080040c 	andi	r2,r18,16
 203e6bc:	10010126 	beq	r2,zero,203eac4 <___svfprintf_internal_r+0x1b04>
 203e6c0:	d9402d17 	ldw	r5,180(sp)
 203e6c4:	d8c02f17 	ldw	r3,188(sp)
 203e6c8:	28800017 	ldw	r2,0(r5)
 203e6cc:	29400104 	addi	r5,r5,4
 203e6d0:	d9402d15 	stw	r5,180(sp)
 203e6d4:	10c00015 	stw	r3,0(r2)
 203e6d8:	003a6406 	br	203d06c <__alt_mem_mem_0+0xfd01d06c>
 203e6dc:	d9002917 	ldw	r4,164(sp)
 203e6e0:	d8002785 	stb	zero,158(sp)
 203e6e4:	203d8d16 	blt	r4,zero,203dd1c <__alt_mem_mem_0+0xfd01dd1c>
 203e6e8:	00bfdfc4 	movi	r2,-129
 203e6ec:	90a4703a 	and	r18,r18,r2
 203e6f0:	003b0506 	br	203d308 <__alt_mem_mem_0+0xfd01d308>
 203e6f4:	01408134 	movhi	r5,516
 203e6f8:	294e4f04 	addi	r5,r5,14652
 203e6fc:	d9402b15 	stw	r5,172(sp)
 203e700:	d9402b17 	ldw	r5,172(sp)
 203e704:	1c47883a 	add	r3,r3,r17
 203e708:	10800044 	addi	r2,r2,1
 203e70c:	41400015 	stw	r5,0(r8)
 203e710:	44400115 	stw	r17,4(r8)
 203e714:	d8c02015 	stw	r3,128(sp)
 203e718:	d8801f15 	stw	r2,124(sp)
 203e71c:	010001c4 	movi	r4,7
 203e720:	20bf3016 	blt	r4,r2,203e3e4 <__alt_mem_mem_0+0xfd01e3e4>
 203e724:	42000204 	addi	r8,r8,8
 203e728:	003f3506 	br	203e400 <__alt_mem_mem_0+0xfd01e400>
 203e72c:	01008134 	movhi	r4,516
 203e730:	210e4f04 	addi	r4,r4,14652
 203e734:	d9002b15 	stw	r4,172(sp)
 203e738:	003c5e06 	br	203d8b4 <__alt_mem_mem_0+0xfd01d8b4>
 203e73c:	d9402c17 	ldw	r5,176(sp)
 203e740:	d9801e04 	addi	r6,sp,120
 203e744:	9809883a 	mov	r4,r19
 203e748:	203f4300 	call	203f430 <__ssprint_r>
 203e74c:	103b011e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e750:	d8c02017 	ldw	r3,128(sp)
 203e754:	da000404 	addi	r8,sp,16
 203e758:	003d9306 	br	203dda8 <__alt_mem_mem_0+0xfd01dda8>
 203e75c:	d8801f17 	ldw	r2,124(sp)
 203e760:	01408134 	movhi	r5,516
 203e764:	01000044 	movi	r4,1
 203e768:	18c00044 	addi	r3,r3,1
 203e76c:	10800044 	addi	r2,r2,1
 203e770:	29438004 	addi	r5,r5,3584
 203e774:	41000115 	stw	r4,4(r8)
 203e778:	41400015 	stw	r5,0(r8)
 203e77c:	d8c02015 	stw	r3,128(sp)
 203e780:	d8801f15 	stw	r2,124(sp)
 203e784:	010001c4 	movi	r4,7
 203e788:	2080b516 	blt	r4,r2,203ea60 <___svfprintf_internal_r+0x1aa0>
 203e78c:	42000204 	addi	r8,r8,8
 203e790:	8800041e 	bne	r17,zero,203e7a4 <___svfprintf_internal_r+0x17e4>
 203e794:	d8803317 	ldw	r2,204(sp)
 203e798:	1000021e 	bne	r2,zero,203e7a4 <___svfprintf_internal_r+0x17e4>
 203e79c:	9080004c 	andi	r2,r18,1
 203e7a0:	103c5b26 	beq	r2,zero,203d910 <__alt_mem_mem_0+0xfd01d910>
 203e7a4:	d9003817 	ldw	r4,224(sp)
 203e7a8:	d8801f17 	ldw	r2,124(sp)
 203e7ac:	d9403417 	ldw	r5,208(sp)
 203e7b0:	20c7883a 	add	r3,r4,r3
 203e7b4:	10800044 	addi	r2,r2,1
 203e7b8:	41000115 	stw	r4,4(r8)
 203e7bc:	41400015 	stw	r5,0(r8)
 203e7c0:	d8c02015 	stw	r3,128(sp)
 203e7c4:	d8801f15 	stw	r2,124(sp)
 203e7c8:	010001c4 	movi	r4,7
 203e7cc:	20818016 	blt	r4,r2,203edd0 <___svfprintf_internal_r+0x1e10>
 203e7d0:	42000204 	addi	r8,r8,8
 203e7d4:	0463c83a 	sub	r17,zero,r17
 203e7d8:	0440cb0e 	bge	zero,r17,203eb08 <___svfprintf_internal_r+0x1b48>
 203e7dc:	05800404 	movi	r22,16
 203e7e0:	b440e80e 	bge	r22,r17,203eb84 <___svfprintf_internal_r+0x1bc4>
 203e7e4:	01408134 	movhi	r5,516
 203e7e8:	294e4f04 	addi	r5,r5,14652
 203e7ec:	d9402b15 	stw	r5,172(sp)
 203e7f0:	070001c4 	movi	fp,7
 203e7f4:	dd002c17 	ldw	r20,176(sp)
 203e7f8:	00000306 	br	203e808 <___svfprintf_internal_r+0x1848>
 203e7fc:	42000204 	addi	r8,r8,8
 203e800:	8c7ffc04 	addi	r17,r17,-16
 203e804:	b440e20e 	bge	r22,r17,203eb90 <___svfprintf_internal_r+0x1bd0>
 203e808:	18c00404 	addi	r3,r3,16
 203e80c:	10800044 	addi	r2,r2,1
 203e810:	45400015 	stw	r21,0(r8)
 203e814:	45800115 	stw	r22,4(r8)
 203e818:	d8c02015 	stw	r3,128(sp)
 203e81c:	d8801f15 	stw	r2,124(sp)
 203e820:	e0bff60e 	bge	fp,r2,203e7fc <__alt_mem_mem_0+0xfd01e7fc>
 203e824:	d9801e04 	addi	r6,sp,120
 203e828:	a00b883a 	mov	r5,r20
 203e82c:	9809883a 	mov	r4,r19
 203e830:	203f4300 	call	203f430 <__ssprint_r>
 203e834:	103ac71e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e838:	d8c02017 	ldw	r3,128(sp)
 203e83c:	d8801f17 	ldw	r2,124(sp)
 203e840:	da000404 	addi	r8,sp,16
 203e844:	003fee06 	br	203e800 <__alt_mem_mem_0+0xfd01e800>
 203e848:	d8c02d17 	ldw	r3,180(sp)
 203e84c:	d9002917 	ldw	r4,164(sp)
 203e850:	002d883a 	mov	r22,zero
 203e854:	18800104 	addi	r2,r3,4
 203e858:	1d000017 	ldw	r20,0(r3)
 203e85c:	203e7d0e 	bge	r4,zero,203e254 <__alt_mem_mem_0+0xfd01e254>
 203e860:	003eda06 	br	203e3cc <__alt_mem_mem_0+0xfd01e3cc>
 203e864:	d9402d17 	ldw	r5,180(sp)
 203e868:	d8c02917 	ldw	r3,164(sp)
 203e86c:	002d883a 	mov	r22,zero
 203e870:	28800104 	addi	r2,r5,4
 203e874:	2d000017 	ldw	r20,0(r5)
 203e878:	183e2d0e 	bge	r3,zero,203e130 <__alt_mem_mem_0+0xfd01e130>
 203e87c:	003f6b06 	br	203e62c <__alt_mem_mem_0+0xfd01e62c>
 203e880:	d8c02d15 	stw	r3,180(sp)
 203e884:	0039883a 	mov	fp,zero
 203e888:	003ed206 	br	203e3d4 <__alt_mem_mem_0+0xfd01e3d4>
 203e88c:	bc400043 	ldbu	r17,1(r23)
 203e890:	94800814 	ori	r18,r18,32
 203e894:	bdc00044 	addi	r23,r23,1
 203e898:	8c403fcc 	andi	r17,r17,255
 203e89c:	8c40201c 	xori	r17,r17,128
 203e8a0:	8c7fe004 	addi	r17,r17,-128
 203e8a4:	003a1a06 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203e8a8:	d9402c17 	ldw	r5,176(sp)
 203e8ac:	d9801e04 	addi	r6,sp,120
 203e8b0:	9809883a 	mov	r4,r19
 203e8b4:	203f4300 	call	203f430 <__ssprint_r>
 203e8b8:	103aa61e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203e8bc:	d8c02017 	ldw	r3,128(sp)
 203e8c0:	da000404 	addi	r8,sp,16
 203e8c4:	003d4a06 	br	203ddf0 <__alt_mem_mem_0+0xfd01ddf0>
 203e8c8:	d9002917 	ldw	r4,164(sp)
 203e8cc:	05bff7c4 	movi	r22,-33
 203e8d0:	00bfffc4 	movi	r2,-1
 203e8d4:	8dac703a 	and	r22,r17,r22
 203e8d8:	20806a26 	beq	r4,r2,203ea84 <___svfprintf_internal_r+0x1ac4>
 203e8dc:	008011c4 	movi	r2,71
 203e8e0:	b0813726 	beq	r22,r2,203edc0 <___svfprintf_internal_r+0x1e00>
 203e8e4:	d9003717 	ldw	r4,220(sp)
 203e8e8:	90c04014 	ori	r3,r18,256
 203e8ec:	d8c02b15 	stw	r3,172(sp)
 203e8f0:	20015d16 	blt	r4,zero,203ee68 <___svfprintf_internal_r+0x1ea8>
 203e8f4:	dd003717 	ldw	r20,220(sp)
 203e8f8:	d8002a05 	stb	zero,168(sp)
 203e8fc:	00801984 	movi	r2,102
 203e900:	88814026 	beq	r17,r2,203ee04 <___svfprintf_internal_r+0x1e44>
 203e904:	00801184 	movi	r2,70
 203e908:	88817126 	beq	r17,r2,203eed0 <___svfprintf_internal_r+0x1f10>
 203e90c:	00801144 	movi	r2,69
 203e910:	b0816226 	beq	r22,r2,203ee9c <___svfprintf_internal_r+0x1edc>
 203e914:	d8c02917 	ldw	r3,164(sp)
 203e918:	d8802104 	addi	r2,sp,132
 203e91c:	d8800315 	stw	r2,12(sp)
 203e920:	d9403617 	ldw	r5,216(sp)
 203e924:	d8802504 	addi	r2,sp,148
 203e928:	d8800215 	stw	r2,8(sp)
 203e92c:	d8802604 	addi	r2,sp,152
 203e930:	d8c00015 	stw	r3,0(sp)
 203e934:	d8800115 	stw	r2,4(sp)
 203e938:	01c00084 	movi	r7,2
 203e93c:	a00d883a 	mov	r6,r20
 203e940:	9809883a 	mov	r4,r19
 203e944:	d8c03d15 	stw	r3,244(sp)
 203e948:	da003e15 	stw	r8,248(sp)
 203e94c:	20030440 	call	2003044 <_dtoa_r>
 203e950:	1021883a 	mov	r16,r2
 203e954:	008019c4 	movi	r2,103
 203e958:	d8c03d17 	ldw	r3,244(sp)
 203e95c:	da003e17 	ldw	r8,248(sp)
 203e960:	8880e726 	beq	r17,r2,203ed00 <___svfprintf_internal_r+0x1d40>
 203e964:	008011c4 	movi	r2,71
 203e968:	8880d426 	beq	r17,r2,203ecbc <___svfprintf_internal_r+0x1cfc>
 203e96c:	80f9883a 	add	fp,r16,r3
 203e970:	d9003617 	ldw	r4,216(sp)
 203e974:	000d883a 	mov	r6,zero
 203e978:	000f883a 	mov	r7,zero
 203e97c:	a00b883a 	mov	r5,r20
 203e980:	da003e15 	stw	r8,248(sp)
 203e984:	200bd2c0 	call	200bd2c <__eqdf2>
 203e988:	da003e17 	ldw	r8,248(sp)
 203e98c:	1000e426 	beq	r2,zero,203ed20 <___svfprintf_internal_r+0x1d60>
 203e990:	d8802117 	ldw	r2,132(sp)
 203e994:	1700062e 	bgeu	r2,fp,203e9b0 <___svfprintf_internal_r+0x19f0>
 203e998:	01000c04 	movi	r4,48
 203e99c:	10c00044 	addi	r3,r2,1
 203e9a0:	d8c02115 	stw	r3,132(sp)
 203e9a4:	11000005 	stb	r4,0(r2)
 203e9a8:	d8802117 	ldw	r2,132(sp)
 203e9ac:	173ffb36 	bltu	r2,fp,203e99c <__alt_mem_mem_0+0xfd01e99c>
 203e9b0:	1405c83a 	sub	r2,r2,r16
 203e9b4:	d8803315 	stw	r2,204(sp)
 203e9b8:	008011c4 	movi	r2,71
 203e9bc:	b080c526 	beq	r22,r2,203ecd4 <___svfprintf_internal_r+0x1d14>
 203e9c0:	00801944 	movi	r2,101
 203e9c4:	1441d90e 	bge	r2,r17,203f12c <___svfprintf_internal_r+0x216c>
 203e9c8:	d8c02617 	ldw	r3,152(sp)
 203e9cc:	00801984 	movi	r2,102
 203e9d0:	d8c03215 	stw	r3,200(sp)
 203e9d4:	88813426 	beq	r17,r2,203eea8 <___svfprintf_internal_r+0x1ee8>
 203e9d8:	d8c03217 	ldw	r3,200(sp)
 203e9dc:	d9003317 	ldw	r4,204(sp)
 203e9e0:	19012516 	blt	r3,r4,203ee78 <___svfprintf_internal_r+0x1eb8>
 203e9e4:	9480004c 	andi	r18,r18,1
 203e9e8:	9001841e 	bne	r18,zero,203effc <___svfprintf_internal_r+0x203c>
 203e9ec:	1805883a 	mov	r2,r3
 203e9f0:	1801cc16 	blt	r3,zero,203f124 <___svfprintf_internal_r+0x2164>
 203e9f4:	d8c03217 	ldw	r3,200(sp)
 203e9f8:	044019c4 	movi	r17,103
 203e9fc:	d8c02e15 	stw	r3,184(sp)
 203ea00:	df002a07 	ldb	fp,168(sp)
 203ea04:	e000a61e 	bne	fp,zero,203eca0 <___svfprintf_internal_r+0x1ce0>
 203ea08:	df002783 	ldbu	fp,158(sp)
 203ea0c:	d8802a15 	stw	r2,168(sp)
 203ea10:	dc802b17 	ldw	r18,172(sp)
 203ea14:	d8002915 	stw	zero,164(sp)
 203ea18:	003b1706 	br	203d678 <__alt_mem_mem_0+0xfd01d678>
 203ea1c:	04008134 	movhi	r16,516
 203ea20:	84037004 	addi	r16,r16,3520
 203ea24:	003aa606 	br	203d4c0 <__alt_mem_mem_0+0xfd01d4c0>
 203ea28:	d9003917 	ldw	r4,228(sp)
 203ea2c:	04001004 	movi	r16,64
 203ea30:	800b883a 	mov	r5,r16
 203ea34:	20055680 	call	2005568 <_malloc_r>
 203ea38:	d9002c17 	ldw	r4,176(sp)
 203ea3c:	20800015 	stw	r2,0(r4)
 203ea40:	20800415 	stw	r2,16(r4)
 203ea44:	1001cb26 	beq	r2,zero,203f174 <___svfprintf_internal_r+0x21b4>
 203ea48:	d8802c17 	ldw	r2,176(sp)
 203ea4c:	14000515 	stw	r16,20(r2)
 203ea50:	00397606 	br	203d02c <__alt_mem_mem_0+0xfd01d02c>
 203ea54:	04008134 	movhi	r16,516
 203ea58:	84037204 	addi	r16,r16,3528
 203ea5c:	003ee106 	br	203e5e4 <__alt_mem_mem_0+0xfd01e5e4>
 203ea60:	d9402c17 	ldw	r5,176(sp)
 203ea64:	d9801e04 	addi	r6,sp,120
 203ea68:	9809883a 	mov	r4,r19
 203ea6c:	203f4300 	call	203f430 <__ssprint_r>
 203ea70:	103a381e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203ea74:	dc402617 	ldw	r17,152(sp)
 203ea78:	d8c02017 	ldw	r3,128(sp)
 203ea7c:	da000404 	addi	r8,sp,16
 203ea80:	003f4306 	br	203e790 <__alt_mem_mem_0+0xfd01e790>
 203ea84:	01400184 	movi	r5,6
 203ea88:	d9402915 	stw	r5,164(sp)
 203ea8c:	003f9506 	br	203e8e4 <__alt_mem_mem_0+0xfd01e8e4>
 203ea90:	d9002d17 	ldw	r4,180(sp)
 203ea94:	25000017 	ldw	r20,0(r4)
 203ea98:	21000104 	addi	r4,r4,4
 203ea9c:	d9002d15 	stw	r4,180(sp)
 203eaa0:	a02dd7fa 	srai	r22,r20,31
 203eaa4:	b005883a 	mov	r2,r22
 203eaa8:	003a9b06 	br	203d518 <__alt_mem_mem_0+0xfd01d518>
 203eaac:	d9402d17 	ldw	r5,180(sp)
 203eab0:	002d883a 	mov	r22,zero
 203eab4:	2d000017 	ldw	r20,0(r5)
 203eab8:	29400104 	addi	r5,r5,4
 203eabc:	d9402d15 	stw	r5,180(sp)
 203eac0:	003bf906 	br	203daa8 <__alt_mem_mem_0+0xfd01daa8>
 203eac4:	9480100c 	andi	r18,r18,64
 203eac8:	90006e26 	beq	r18,zero,203ec84 <___svfprintf_internal_r+0x1cc4>
 203eacc:	d9002d17 	ldw	r4,180(sp)
 203ead0:	d9402f17 	ldw	r5,188(sp)
 203ead4:	20800017 	ldw	r2,0(r4)
 203ead8:	21000104 	addi	r4,r4,4
 203eadc:	d9002d15 	stw	r4,180(sp)
 203eae0:	1140000d 	sth	r5,0(r2)
 203eae4:	00396106 	br	203d06c <__alt_mem_mem_0+0xfd01d06c>
 203eae8:	d9402c17 	ldw	r5,176(sp)
 203eaec:	d9801e04 	addi	r6,sp,120
 203eaf0:	9809883a 	mov	r4,r19
 203eaf4:	203f4300 	call	203f430 <__ssprint_r>
 203eaf8:	103a161e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203eafc:	d8c02017 	ldw	r3,128(sp)
 203eb00:	d8801f17 	ldw	r2,124(sp)
 203eb04:	da000404 	addi	r8,sp,16
 203eb08:	d9403317 	ldw	r5,204(sp)
 203eb0c:	10800044 	addi	r2,r2,1
 203eb10:	44000015 	stw	r16,0(r8)
 203eb14:	28c7883a 	add	r3,r5,r3
 203eb18:	003b7706 	br	203d8f8 <__alt_mem_mem_0+0xfd01d8f8>
 203eb1c:	8009883a 	mov	r4,r16
 203eb20:	da003e15 	stw	r8,248(sp)
 203eb24:	20073a40 	call	20073a4 <strlen>
 203eb28:	d8802e15 	stw	r2,184(sp)
 203eb2c:	da003e17 	ldw	r8,248(sp)
 203eb30:	103c280e 	bge	r2,zero,203dbd4 <__alt_mem_mem_0+0xfd01dbd4>
 203eb34:	0005883a 	mov	r2,zero
 203eb38:	003c2606 	br	203dbd4 <__alt_mem_mem_0+0xfd01dbd4>
 203eb3c:	00bfffc4 	movi	r2,-1
 203eb40:	003a0906 	br	203d368 <__alt_mem_mem_0+0xfd01d368>
 203eb44:	01008134 	movhi	r4,516
 203eb48:	210e5304 	addi	r4,r4,14668
 203eb4c:	d9003515 	stw	r4,212(sp)
 203eb50:	003b0606 	br	203d76c <__alt_mem_mem_0+0xfd01d76c>
 203eb54:	013fffc4 	movi	r4,-1
 203eb58:	003a2706 	br	203d3f8 <__alt_mem_mem_0+0xfd01d3f8>
 203eb5c:	d9402c17 	ldw	r5,176(sp)
 203eb60:	d9801e04 	addi	r6,sp,120
 203eb64:	9809883a 	mov	r4,r19
 203eb68:	203f4300 	call	203f430 <__ssprint_r>
 203eb6c:	1039f91e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203eb70:	d8c02017 	ldw	r3,128(sp)
 203eb74:	da000404 	addi	r8,sp,16
 203eb78:	003d8406 	br	203e18c <__alt_mem_mem_0+0xfd01e18c>
 203eb7c:	0023883a 	mov	r17,zero
 203eb80:	003d8306 	br	203e190 <__alt_mem_mem_0+0xfd01e190>
 203eb84:	01008134 	movhi	r4,516
 203eb88:	210e4f04 	addi	r4,r4,14652
 203eb8c:	d9002b15 	stw	r4,172(sp)
 203eb90:	d9002b17 	ldw	r4,172(sp)
 203eb94:	1c47883a 	add	r3,r3,r17
 203eb98:	10800044 	addi	r2,r2,1
 203eb9c:	41000015 	stw	r4,0(r8)
 203eba0:	44400115 	stw	r17,4(r8)
 203eba4:	d8c02015 	stw	r3,128(sp)
 203eba8:	d8801f15 	stw	r2,124(sp)
 203ebac:	010001c4 	movi	r4,7
 203ebb0:	20bfcd16 	blt	r4,r2,203eae8 <__alt_mem_mem_0+0xfd01eae8>
 203ebb4:	42000204 	addi	r8,r8,8
 203ebb8:	003fd306 	br	203eb08 <__alt_mem_mem_0+0xfd01eb08>
 203ebbc:	d9402c17 	ldw	r5,176(sp)
 203ebc0:	d9801e04 	addi	r6,sp,120
 203ebc4:	9809883a 	mov	r4,r19
 203ebc8:	203f4300 	call	203f430 <__ssprint_r>
 203ebcc:	1039e11e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203ebd0:	d8802617 	ldw	r2,152(sp)
 203ebd4:	d8c02017 	ldw	r3,128(sp)
 203ebd8:	da000404 	addi	r8,sp,16
 203ebdc:	003e1c06 	br	203e450 <__alt_mem_mem_0+0xfd01e450>
 203ebe0:	d8802917 	ldw	r2,164(sp)
 203ebe4:	00c00184 	movi	r3,6
 203ebe8:	1880012e 	bgeu	r3,r2,203ebf0 <___svfprintf_internal_r+0x1c30>
 203ebec:	1805883a 	mov	r2,r3
 203ebf0:	d8802e15 	stw	r2,184(sp)
 203ebf4:	1000f316 	blt	r2,zero,203efc4 <___svfprintf_internal_r+0x2004>
 203ebf8:	04008134 	movhi	r16,516
 203ebfc:	d8802a15 	stw	r2,168(sp)
 203ec00:	dd002d15 	stw	r20,180(sp)
 203ec04:	d8002915 	stw	zero,164(sp)
 203ec08:	d8003215 	stw	zero,200(sp)
 203ec0c:	84037e04 	addi	r16,r16,3576
 203ec10:	0039883a 	mov	fp,zero
 203ec14:	003a9f06 	br	203d694 <__alt_mem_mem_0+0xfd01d694>
 203ec18:	01008134 	movhi	r4,516
 203ec1c:	210e5304 	addi	r4,r4,14668
 203ec20:	d9003515 	stw	r4,212(sp)
 203ec24:	003b5f06 	br	203d9a4 <__alt_mem_mem_0+0xfd01d9a4>
 203ec28:	d9402c17 	ldw	r5,176(sp)
 203ec2c:	d9801e04 	addi	r6,sp,120
 203ec30:	9809883a 	mov	r4,r19
 203ec34:	203f4300 	call	203f430 <__ssprint_r>
 203ec38:	1039c61e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203ec3c:	d8802617 	ldw	r2,152(sp)
 203ec40:	d9403317 	ldw	r5,204(sp)
 203ec44:	d8c02017 	ldw	r3,128(sp)
 203ec48:	da000404 	addi	r8,sp,16
 203ec4c:	2885c83a 	sub	r2,r5,r2
 203ec50:	003e1006 	br	203e494 <__alt_mem_mem_0+0xfd01e494>
 203ec54:	00800044 	movi	r2,1
 203ec58:	10803fcc 	andi	r2,r2,255
 203ec5c:	00c00044 	movi	r3,1
 203ec60:	10fa3526 	beq	r2,r3,203d538 <__alt_mem_mem_0+0xfd01d538>
 203ec64:	00c00084 	movi	r3,2
 203ec68:	10fb9e26 	beq	r2,r3,203dae4 <__alt_mem_mem_0+0xfd01dae4>
 203ec6c:	003a6406 	br	203d600 <__alt_mem_mem_0+0xfd01d600>
 203ec70:	0021883a 	mov	r16,zero
 203ec74:	003e0806 	br	203e498 <__alt_mem_mem_0+0xfd01e498>
 203ec78:	07000b44 	movi	fp,45
 203ec7c:	df002785 	stb	fp,158(sp)
 203ec80:	003a0b06 	br	203d4b0 <__alt_mem_mem_0+0xfd01d4b0>
 203ec84:	d8c02d17 	ldw	r3,180(sp)
 203ec88:	d9002f17 	ldw	r4,188(sp)
 203ec8c:	18800017 	ldw	r2,0(r3)
 203ec90:	18c00104 	addi	r3,r3,4
 203ec94:	d8c02d15 	stw	r3,180(sp)
 203ec98:	11000015 	stw	r4,0(r2)
 203ec9c:	0038f306 	br	203d06c <__alt_mem_mem_0+0xfd01d06c>
 203eca0:	00c00b44 	movi	r3,45
 203eca4:	d8c02785 	stb	r3,158(sp)
 203eca8:	d8802a15 	stw	r2,168(sp)
 203ecac:	dc802b17 	ldw	r18,172(sp)
 203ecb0:	d8002915 	stw	zero,164(sp)
 203ecb4:	07000b44 	movi	fp,45
 203ecb8:	003a7306 	br	203d688 <__alt_mem_mem_0+0xfd01d688>
 203ecbc:	9080004c 	andi	r2,r18,1
 203ecc0:	1000941e 	bne	r2,zero,203ef14 <___svfprintf_internal_r+0x1f54>
 203ecc4:	d8802117 	ldw	r2,132(sp)
 203ecc8:	1405c83a 	sub	r2,r2,r16
 203eccc:	d8803315 	stw	r2,204(sp)
 203ecd0:	b441161e 	bne	r22,r17,203f12c <___svfprintf_internal_r+0x216c>
 203ecd4:	dd802617 	ldw	r22,152(sp)
 203ecd8:	00bfff44 	movi	r2,-3
 203ecdc:	b0801a16 	blt	r22,r2,203ed48 <___svfprintf_internal_r+0x1d88>
 203ece0:	d9402917 	ldw	r5,164(sp)
 203ece4:	2d801816 	blt	r5,r22,203ed48 <___svfprintf_internal_r+0x1d88>
 203ece8:	dd803215 	stw	r22,200(sp)
 203ecec:	003f3a06 	br	203e9d8 <__alt_mem_mem_0+0xfd01e9d8>
 203ecf0:	1025883a 	mov	r18,r2
 203ecf4:	0039883a 	mov	fp,zero
 203ecf8:	00800084 	movi	r2,2
 203ecfc:	003fd606 	br	203ec58 <__alt_mem_mem_0+0xfd01ec58>
 203ed00:	9080004c 	andi	r2,r18,1
 203ed04:	103f191e 	bne	r2,zero,203e96c <__alt_mem_mem_0+0xfd01e96c>
 203ed08:	d8802117 	ldw	r2,132(sp)
 203ed0c:	003f2806 	br	203e9b0 <__alt_mem_mem_0+0xfd01e9b0>
 203ed10:	01008134 	movhi	r4,516
 203ed14:	210e4f04 	addi	r4,r4,14652
 203ed18:	d9002b15 	stw	r4,172(sp)
 203ed1c:	003c7c06 	br	203df10 <__alt_mem_mem_0+0xfd01df10>
 203ed20:	e005883a 	mov	r2,fp
 203ed24:	003f2206 	br	203e9b0 <__alt_mem_mem_0+0xfd01e9b0>
 203ed28:	d9402917 	ldw	r5,164(sp)
 203ed2c:	df002783 	ldbu	fp,158(sp)
 203ed30:	dd002d15 	stw	r20,180(sp)
 203ed34:	d9402a15 	stw	r5,168(sp)
 203ed38:	d9402e15 	stw	r5,184(sp)
 203ed3c:	d8002915 	stw	zero,164(sp)
 203ed40:	d8003215 	stw	zero,200(sp)
 203ed44:	003a4c06 	br	203d678 <__alt_mem_mem_0+0xfd01d678>
 203ed48:	8c7fff84 	addi	r17,r17,-2
 203ed4c:	b5bfffc4 	addi	r22,r22,-1
 203ed50:	dd802615 	stw	r22,152(sp)
 203ed54:	dc4022c5 	stb	r17,139(sp)
 203ed58:	b000c316 	blt	r22,zero,203f068 <___svfprintf_internal_r+0x20a8>
 203ed5c:	00800ac4 	movi	r2,43
 203ed60:	d8802305 	stb	r2,140(sp)
 203ed64:	00800244 	movi	r2,9
 203ed68:	15806e16 	blt	r2,r22,203ef24 <___svfprintf_internal_r+0x1f64>
 203ed6c:	00800c04 	movi	r2,48
 203ed70:	b5800c04 	addi	r22,r22,48
 203ed74:	d8802345 	stb	r2,141(sp)
 203ed78:	dd802385 	stb	r22,142(sp)
 203ed7c:	d88023c4 	addi	r2,sp,143
 203ed80:	df0022c4 	addi	fp,sp,139
 203ed84:	d8c03317 	ldw	r3,204(sp)
 203ed88:	1739c83a 	sub	fp,r2,fp
 203ed8c:	d9003317 	ldw	r4,204(sp)
 203ed90:	e0c7883a 	add	r3,fp,r3
 203ed94:	df003b15 	stw	fp,236(sp)
 203ed98:	d8c02e15 	stw	r3,184(sp)
 203ed9c:	00800044 	movi	r2,1
 203eda0:	1100b70e 	bge	r2,r4,203f080 <___svfprintf_internal_r+0x20c0>
 203eda4:	d8c02e17 	ldw	r3,184(sp)
 203eda8:	18c00044 	addi	r3,r3,1
 203edac:	d8c02e15 	stw	r3,184(sp)
 203edb0:	1805883a 	mov	r2,r3
 203edb4:	1800b016 	blt	r3,zero,203f078 <___svfprintf_internal_r+0x20b8>
 203edb8:	d8003215 	stw	zero,200(sp)
 203edbc:	003f1006 	br	203ea00 <__alt_mem_mem_0+0xfd01ea00>
 203edc0:	d8802917 	ldw	r2,164(sp)
 203edc4:	103ec71e 	bne	r2,zero,203e8e4 <__alt_mem_mem_0+0xfd01e8e4>
 203edc8:	dc002915 	stw	r16,164(sp)
 203edcc:	003ec506 	br	203e8e4 <__alt_mem_mem_0+0xfd01e8e4>
 203edd0:	d9402c17 	ldw	r5,176(sp)
 203edd4:	d9801e04 	addi	r6,sp,120
 203edd8:	9809883a 	mov	r4,r19
 203eddc:	203f4300 	call	203f430 <__ssprint_r>
 203ede0:	10395c1e 	bne	r2,zero,203d354 <__alt_mem_mem_0+0xfd01d354>
 203ede4:	dc402617 	ldw	r17,152(sp)
 203ede8:	d8c02017 	ldw	r3,128(sp)
 203edec:	d8801f17 	ldw	r2,124(sp)
 203edf0:	da000404 	addi	r8,sp,16
 203edf4:	003e7706 	br	203e7d4 <__alt_mem_mem_0+0xfd01e7d4>
 203edf8:	582f883a 	mov	r23,r11
 203edfc:	d8002915 	stw	zero,164(sp)
 203ee00:	0038c406 	br	203d114 <__alt_mem_mem_0+0xfd01d114>
 203ee04:	d8c02917 	ldw	r3,164(sp)
 203ee08:	d8802104 	addi	r2,sp,132
 203ee0c:	d8800315 	stw	r2,12(sp)
 203ee10:	d9403617 	ldw	r5,216(sp)
 203ee14:	d8802504 	addi	r2,sp,148
 203ee18:	d8800215 	stw	r2,8(sp)
 203ee1c:	d8802604 	addi	r2,sp,152
 203ee20:	d8c00015 	stw	r3,0(sp)
 203ee24:	9809883a 	mov	r4,r19
 203ee28:	d8800115 	stw	r2,4(sp)
 203ee2c:	01c000c4 	movi	r7,3
 203ee30:	a00d883a 	mov	r6,r20
 203ee34:	da003e15 	stw	r8,248(sp)
 203ee38:	20030440 	call	2003044 <_dtoa_r>
 203ee3c:	d9002917 	ldw	r4,164(sp)
 203ee40:	da003e17 	ldw	r8,248(sp)
 203ee44:	1021883a 	mov	r16,r2
 203ee48:	1139883a 	add	fp,r2,r4
 203ee4c:	2007883a 	mov	r3,r4
 203ee50:	81000007 	ldb	r4,0(r16)
 203ee54:	00800c04 	movi	r2,48
 203ee58:	20806f26 	beq	r4,r2,203f018 <___svfprintf_internal_r+0x2058>
 203ee5c:	d8c02617 	ldw	r3,152(sp)
 203ee60:	e0f9883a 	add	fp,fp,r3
 203ee64:	003ec206 	br	203e970 <__alt_mem_mem_0+0xfd01e970>
 203ee68:	00c00b44 	movi	r3,45
 203ee6c:	2520003c 	xorhi	r20,r4,32768
 203ee70:	d8c02a05 	stb	r3,168(sp)
 203ee74:	003ea106 	br	203e8fc <__alt_mem_mem_0+0xfd01e8fc>
 203ee78:	d8c03217 	ldw	r3,200(sp)
 203ee7c:	00c0890e 	bge	zero,r3,203f0a4 <___svfprintf_internal_r+0x20e4>
 203ee80:	00800044 	movi	r2,1
 203ee84:	d9003317 	ldw	r4,204(sp)
 203ee88:	1105883a 	add	r2,r2,r4
 203ee8c:	d8802e15 	stw	r2,184(sp)
 203ee90:	10005f16 	blt	r2,zero,203f010 <___svfprintf_internal_r+0x2050>
 203ee94:	044019c4 	movi	r17,103
 203ee98:	003ed906 	br	203ea00 <__alt_mem_mem_0+0xfd01ea00>
 203ee9c:	d9002917 	ldw	r4,164(sp)
 203eea0:	20c00044 	addi	r3,r4,1
 203eea4:	003e9c06 	br	203e918 <__alt_mem_mem_0+0xfd01e918>
 203eea8:	d9002917 	ldw	r4,164(sp)
 203eeac:	00c0680e 	bge	zero,r3,203f050 <___svfprintf_internal_r+0x2090>
 203eeb0:	2000461e 	bne	r4,zero,203efcc <___svfprintf_internal_r+0x200c>
 203eeb4:	9480004c 	andi	r18,r18,1
 203eeb8:	9000441e 	bne	r18,zero,203efcc <___svfprintf_internal_r+0x200c>
 203eebc:	1805883a 	mov	r2,r3
 203eec0:	1800a016 	blt	r3,zero,203f144 <___svfprintf_internal_r+0x2184>
 203eec4:	d8c03217 	ldw	r3,200(sp)
 203eec8:	d8c02e15 	stw	r3,184(sp)
 203eecc:	003ecc06 	br	203ea00 <__alt_mem_mem_0+0xfd01ea00>
 203eed0:	d9402917 	ldw	r5,164(sp)
 203eed4:	d8802104 	addi	r2,sp,132
 203eed8:	d8800315 	stw	r2,12(sp)
 203eedc:	d9400015 	stw	r5,0(sp)
 203eee0:	d8802504 	addi	r2,sp,148
 203eee4:	d9403617 	ldw	r5,216(sp)
 203eee8:	d8800215 	stw	r2,8(sp)
 203eeec:	d8802604 	addi	r2,sp,152
 203eef0:	d8800115 	stw	r2,4(sp)
 203eef4:	01c000c4 	movi	r7,3
 203eef8:	a00d883a 	mov	r6,r20
 203eefc:	9809883a 	mov	r4,r19
 203ef00:	da003e15 	stw	r8,248(sp)
 203ef04:	20030440 	call	2003044 <_dtoa_r>
 203ef08:	d8c02917 	ldw	r3,164(sp)
 203ef0c:	da003e17 	ldw	r8,248(sp)
 203ef10:	1021883a 	mov	r16,r2
 203ef14:	00801184 	movi	r2,70
 203ef18:	80f9883a 	add	fp,r16,r3
 203ef1c:	88bfcc26 	beq	r17,r2,203ee50 <__alt_mem_mem_0+0xfd01ee50>
 203ef20:	003e9306 	br	203e970 <__alt_mem_mem_0+0xfd01e970>
 203ef24:	df0022c4 	addi	fp,sp,139
 203ef28:	dc002915 	stw	r16,164(sp)
 203ef2c:	9829883a 	mov	r20,r19
 203ef30:	e021883a 	mov	r16,fp
 203ef34:	4027883a 	mov	r19,r8
 203ef38:	b009883a 	mov	r4,r22
 203ef3c:	01400284 	movi	r5,10
 203ef40:	200aa680 	call	200aa68 <__modsi3>
 203ef44:	10800c04 	addi	r2,r2,48
 203ef48:	843fffc4 	addi	r16,r16,-1
 203ef4c:	b009883a 	mov	r4,r22
 203ef50:	01400284 	movi	r5,10
 203ef54:	80800005 	stb	r2,0(r16)
 203ef58:	200a9e40 	call	200a9e4 <__divsi3>
 203ef5c:	102d883a 	mov	r22,r2
 203ef60:	00800244 	movi	r2,9
 203ef64:	15bff416 	blt	r2,r22,203ef38 <__alt_mem_mem_0+0xfd01ef38>
 203ef68:	9811883a 	mov	r8,r19
 203ef6c:	b0800c04 	addi	r2,r22,48
 203ef70:	a027883a 	mov	r19,r20
 203ef74:	8029883a 	mov	r20,r16
 203ef78:	a17fffc4 	addi	r5,r20,-1
 203ef7c:	a0bfffc5 	stb	r2,-1(r20)
 203ef80:	dc002917 	ldw	r16,164(sp)
 203ef84:	2f00752e 	bgeu	r5,fp,203f15c <___svfprintf_internal_r+0x219c>
 203ef88:	d9c02384 	addi	r7,sp,142
 203ef8c:	3d0fc83a 	sub	r7,r7,r20
 203ef90:	d9002344 	addi	r4,sp,141
 203ef94:	e1cf883a 	add	r7,fp,r7
 203ef98:	00000106 	br	203efa0 <___svfprintf_internal_r+0x1fe0>
 203ef9c:	28800003 	ldbu	r2,0(r5)
 203efa0:	20800005 	stb	r2,0(r4)
 203efa4:	21000044 	addi	r4,r4,1
 203efa8:	29400044 	addi	r5,r5,1
 203efac:	21fffb1e 	bne	r4,r7,203ef9c <__alt_mem_mem_0+0xfd01ef9c>
 203efb0:	d8802304 	addi	r2,sp,140
 203efb4:	1505c83a 	sub	r2,r2,r20
 203efb8:	d8c02344 	addi	r3,sp,141
 203efbc:	1885883a 	add	r2,r3,r2
 203efc0:	003f7006 	br	203ed84 <__alt_mem_mem_0+0xfd01ed84>
 203efc4:	0005883a 	mov	r2,zero
 203efc8:	003f0b06 	br	203ebf8 <__alt_mem_mem_0+0xfd01ebf8>
 203efcc:	d9002917 	ldw	r4,164(sp)
 203efd0:	d8c03217 	ldw	r3,200(sp)
 203efd4:	20800044 	addi	r2,r4,1
 203efd8:	1885883a 	add	r2,r3,r2
 203efdc:	d8802e15 	stw	r2,184(sp)
 203efe0:	103e870e 	bge	r2,zero,203ea00 <__alt_mem_mem_0+0xfd01ea00>
 203efe4:	0005883a 	mov	r2,zero
 203efe8:	003e8506 	br	203ea00 <__alt_mem_mem_0+0xfd01ea00>
 203efec:	01008134 	movhi	r4,516
 203eff0:	210e4f04 	addi	r4,r4,14652
 203eff4:	d9002b15 	stw	r4,172(sp)
 203eff8:	003cc506 	br	203e310 <__alt_mem_mem_0+0xfd01e310>
 203effc:	d8c03217 	ldw	r3,200(sp)
 203f000:	18c00044 	addi	r3,r3,1
 203f004:	d8c02e15 	stw	r3,184(sp)
 203f008:	1805883a 	mov	r2,r3
 203f00c:	183fa10e 	bge	r3,zero,203ee94 <__alt_mem_mem_0+0xfd01ee94>
 203f010:	0005883a 	mov	r2,zero
 203f014:	003f9f06 	br	203ee94 <__alt_mem_mem_0+0xfd01ee94>
 203f018:	d9003617 	ldw	r4,216(sp)
 203f01c:	000d883a 	mov	r6,zero
 203f020:	000f883a 	mov	r7,zero
 203f024:	a00b883a 	mov	r5,r20
 203f028:	d8c03d15 	stw	r3,244(sp)
 203f02c:	da003e15 	stw	r8,248(sp)
 203f030:	200bd2c0 	call	200bd2c <__eqdf2>
 203f034:	d8c03d17 	ldw	r3,244(sp)
 203f038:	da003e17 	ldw	r8,248(sp)
 203f03c:	103f8726 	beq	r2,zero,203ee5c <__alt_mem_mem_0+0xfd01ee5c>
 203f040:	00800044 	movi	r2,1
 203f044:	10c7c83a 	sub	r3,r2,r3
 203f048:	d8c02615 	stw	r3,152(sp)
 203f04c:	003f8406 	br	203ee60 <__alt_mem_mem_0+0xfd01ee60>
 203f050:	20000e1e 	bne	r4,zero,203f08c <___svfprintf_internal_r+0x20cc>
 203f054:	9480004c 	andi	r18,r18,1
 203f058:	90000c1e 	bne	r18,zero,203f08c <___svfprintf_internal_r+0x20cc>
 203f05c:	00800044 	movi	r2,1
 203f060:	d8802e15 	stw	r2,184(sp)
 203f064:	003e6606 	br	203ea00 <__alt_mem_mem_0+0xfd01ea00>
 203f068:	00800b44 	movi	r2,45
 203f06c:	05adc83a 	sub	r22,zero,r22
 203f070:	d8802305 	stb	r2,140(sp)
 203f074:	003f3b06 	br	203ed64 <__alt_mem_mem_0+0xfd01ed64>
 203f078:	0005883a 	mov	r2,zero
 203f07c:	003f4e06 	br	203edb8 <__alt_mem_mem_0+0xfd01edb8>
 203f080:	90a4703a 	and	r18,r18,r2
 203f084:	903f4a26 	beq	r18,zero,203edb0 <__alt_mem_mem_0+0xfd01edb0>
 203f088:	003f4606 	br	203eda4 <__alt_mem_mem_0+0xfd01eda4>
 203f08c:	d8c02917 	ldw	r3,164(sp)
 203f090:	18c00084 	addi	r3,r3,2
 203f094:	d8c02e15 	stw	r3,184(sp)
 203f098:	1805883a 	mov	r2,r3
 203f09c:	183e580e 	bge	r3,zero,203ea00 <__alt_mem_mem_0+0xfd01ea00>
 203f0a0:	003fd006 	br	203efe4 <__alt_mem_mem_0+0xfd01efe4>
 203f0a4:	00800084 	movi	r2,2
 203f0a8:	10c5c83a 	sub	r2,r2,r3
 203f0ac:	003f7506 	br	203ee84 <__alt_mem_mem_0+0xfd01ee84>
 203f0b0:	d8802d17 	ldw	r2,180(sp)
 203f0b4:	d9002d17 	ldw	r4,180(sp)
 203f0b8:	bc400043 	ldbu	r17,1(r23)
 203f0bc:	10800017 	ldw	r2,0(r2)
 203f0c0:	582f883a 	mov	r23,r11
 203f0c4:	d8802915 	stw	r2,164(sp)
 203f0c8:	20800104 	addi	r2,r4,4
 203f0cc:	d9002917 	ldw	r4,164(sp)
 203f0d0:	d8802d15 	stw	r2,180(sp)
 203f0d4:	203df00e 	bge	r4,zero,203e898 <__alt_mem_mem_0+0xfd01e898>
 203f0d8:	8c403fcc 	andi	r17,r17,255
 203f0dc:	00bfffc4 	movi	r2,-1
 203f0e0:	8c40201c 	xori	r17,r17,128
 203f0e4:	d8802915 	stw	r2,164(sp)
 203f0e8:	8c7fe004 	addi	r17,r17,-128
 203f0ec:	00380806 	br	203d110 <__alt_mem_mem_0+0xfd01d110>
 203f0f0:	9080004c 	andi	r2,r18,1
 203f0f4:	0039883a 	mov	fp,zero
 203f0f8:	10000726 	beq	r2,zero,203f118 <___svfprintf_internal_r+0x2158>
 203f0fc:	d8c02817 	ldw	r3,160(sp)
 203f100:	dc001dc4 	addi	r16,sp,119
 203f104:	00800c04 	movi	r2,48
 203f108:	1c07c83a 	sub	r3,r3,r16
 203f10c:	d8801dc5 	stb	r2,119(sp)
 203f110:	d8c02e15 	stw	r3,184(sp)
 203f114:	00395206 	br	203d660 <__alt_mem_mem_0+0xfd01d660>
 203f118:	d8002e15 	stw	zero,184(sp)
 203f11c:	dc001e04 	addi	r16,sp,120
 203f120:	00394f06 	br	203d660 <__alt_mem_mem_0+0xfd01d660>
 203f124:	0005883a 	mov	r2,zero
 203f128:	003e3206 	br	203e9f4 <__alt_mem_mem_0+0xfd01e9f4>
 203f12c:	dd802617 	ldw	r22,152(sp)
 203f130:	003f0606 	br	203ed4c <__alt_mem_mem_0+0xfd01ed4c>
 203f134:	d9c02785 	stb	r7,158(sp)
 203f138:	003a5106 	br	203da80 <__alt_mem_mem_0+0xfd01da80>
 203f13c:	d9c02785 	stb	r7,158(sp)
 203f140:	003a3706 	br	203da20 <__alt_mem_mem_0+0xfd01da20>
 203f144:	0005883a 	mov	r2,zero
 203f148:	003f5e06 	br	203eec4 <__alt_mem_mem_0+0xfd01eec4>
 203f14c:	d9c02785 	stb	r7,158(sp)
 203f150:	00391706 	br	203d5b0 <__alt_mem_mem_0+0xfd01d5b0>
 203f154:	d9c02785 	stb	r7,158(sp)
 203f158:	0038e606 	br	203d4f4 <__alt_mem_mem_0+0xfd01d4f4>
 203f15c:	d8802344 	addi	r2,sp,141
 203f160:	003f0806 	br	203ed84 <__alt_mem_mem_0+0xfd01ed84>
 203f164:	d9c02785 	stb	r7,158(sp)
 203f168:	0038b706 	br	203d448 <__alt_mem_mem_0+0xfd01d448>
 203f16c:	d9c02785 	stb	r7,158(sp)
 203f170:	003adc06 	br	203dce4 <__alt_mem_mem_0+0xfd01dce4>
 203f174:	d9403917 	ldw	r5,228(sp)
 203f178:	00800304 	movi	r2,12
 203f17c:	28800015 	stw	r2,0(r5)
 203f180:	00bfffc4 	movi	r2,-1
 203f184:	00387806 	br	203d368 <__alt_mem_mem_0+0xfd01d368>
 203f188:	d9c02785 	stb	r7,158(sp)
 203f18c:	003abf06 	br	203dc8c <__alt_mem_mem_0+0xfd01dc8c>
 203f190:	d9c02785 	stb	r7,158(sp)
 203f194:	003a9b06 	br	203dc04 <__alt_mem_mem_0+0xfd01dc04>

0203f198 <__register_exitproc>:
 203f198:	defffa04 	addi	sp,sp,-24
 203f19c:	dc000315 	stw	r16,12(sp)
 203f1a0:	04008134 	movhi	r16,516
 203f1a4:	8415e704 	addi	r16,r16,22428
 203f1a8:	80c00017 	ldw	r3,0(r16)
 203f1ac:	dc400415 	stw	r17,16(sp)
 203f1b0:	dfc00515 	stw	ra,20(sp)
 203f1b4:	18805217 	ldw	r2,328(r3)
 203f1b8:	2023883a 	mov	r17,r4
 203f1bc:	10003726 	beq	r2,zero,203f29c <__register_exitproc+0x104>
 203f1c0:	10c00117 	ldw	r3,4(r2)
 203f1c4:	010007c4 	movi	r4,31
 203f1c8:	20c00e16 	blt	r4,r3,203f204 <__register_exitproc+0x6c>
 203f1cc:	1a000044 	addi	r8,r3,1
 203f1d0:	8800221e 	bne	r17,zero,203f25c <__register_exitproc+0xc4>
 203f1d4:	18c00084 	addi	r3,r3,2
 203f1d8:	18c7883a 	add	r3,r3,r3
 203f1dc:	18c7883a 	add	r3,r3,r3
 203f1e0:	12000115 	stw	r8,4(r2)
 203f1e4:	10c7883a 	add	r3,r2,r3
 203f1e8:	19400015 	stw	r5,0(r3)
 203f1ec:	0005883a 	mov	r2,zero
 203f1f0:	dfc00517 	ldw	ra,20(sp)
 203f1f4:	dc400417 	ldw	r17,16(sp)
 203f1f8:	dc000317 	ldw	r16,12(sp)
 203f1fc:	dec00604 	addi	sp,sp,24
 203f200:	f800283a 	ret
 203f204:	00808134 	movhi	r2,516
 203f208:	10b2a504 	addi	r2,r2,-13676
 203f20c:	10002626 	beq	r2,zero,203f2a8 <__register_exitproc+0x110>
 203f210:	01006404 	movi	r4,400
 203f214:	d9400015 	stw	r5,0(sp)
 203f218:	d9800115 	stw	r6,4(sp)
 203f21c:	d9c00215 	stw	r7,8(sp)
 203f220:	203ca940 	call	203ca94 <malloc>
 203f224:	d9400017 	ldw	r5,0(sp)
 203f228:	d9800117 	ldw	r6,4(sp)
 203f22c:	d9c00217 	ldw	r7,8(sp)
 203f230:	10001d26 	beq	r2,zero,203f2a8 <__register_exitproc+0x110>
 203f234:	81000017 	ldw	r4,0(r16)
 203f238:	10000115 	stw	zero,4(r2)
 203f23c:	02000044 	movi	r8,1
 203f240:	22405217 	ldw	r9,328(r4)
 203f244:	0007883a 	mov	r3,zero
 203f248:	12400015 	stw	r9,0(r2)
 203f24c:	20805215 	stw	r2,328(r4)
 203f250:	10006215 	stw	zero,392(r2)
 203f254:	10006315 	stw	zero,396(r2)
 203f258:	883fde26 	beq	r17,zero,203f1d4 <__alt_mem_mem_0+0xfd01f1d4>
 203f25c:	18c9883a 	add	r4,r3,r3
 203f260:	2109883a 	add	r4,r4,r4
 203f264:	1109883a 	add	r4,r2,r4
 203f268:	21802215 	stw	r6,136(r4)
 203f26c:	01800044 	movi	r6,1
 203f270:	12406217 	ldw	r9,392(r2)
 203f274:	30cc983a 	sll	r6,r6,r3
 203f278:	4992b03a 	or	r9,r9,r6
 203f27c:	12406215 	stw	r9,392(r2)
 203f280:	21c04215 	stw	r7,264(r4)
 203f284:	01000084 	movi	r4,2
 203f288:	893fd21e 	bne	r17,r4,203f1d4 <__alt_mem_mem_0+0xfd01f1d4>
 203f28c:	11006317 	ldw	r4,396(r2)
 203f290:	218cb03a 	or	r6,r4,r6
 203f294:	11806315 	stw	r6,396(r2)
 203f298:	003fce06 	br	203f1d4 <__alt_mem_mem_0+0xfd01f1d4>
 203f29c:	18805304 	addi	r2,r3,332
 203f2a0:	18805215 	stw	r2,328(r3)
 203f2a4:	003fc606 	br	203f1c0 <__alt_mem_mem_0+0xfd01f1c0>
 203f2a8:	00bfffc4 	movi	r2,-1
 203f2ac:	003fd006 	br	203f1f0 <__alt_mem_mem_0+0xfd01f1f0>

0203f2b0 <__call_exitprocs>:
 203f2b0:	defff504 	addi	sp,sp,-44
 203f2b4:	df000915 	stw	fp,36(sp)
 203f2b8:	dd400615 	stw	r21,24(sp)
 203f2bc:	dc800315 	stw	r18,12(sp)
 203f2c0:	dfc00a15 	stw	ra,40(sp)
 203f2c4:	ddc00815 	stw	r23,32(sp)
 203f2c8:	dd800715 	stw	r22,28(sp)
 203f2cc:	dd000515 	stw	r20,20(sp)
 203f2d0:	dcc00415 	stw	r19,16(sp)
 203f2d4:	dc400215 	stw	r17,8(sp)
 203f2d8:	dc000115 	stw	r16,4(sp)
 203f2dc:	d9000015 	stw	r4,0(sp)
 203f2e0:	2839883a 	mov	fp,r5
 203f2e4:	04800044 	movi	r18,1
 203f2e8:	057fffc4 	movi	r21,-1
 203f2ec:	00808134 	movhi	r2,516
 203f2f0:	1095e704 	addi	r2,r2,22428
 203f2f4:	12000017 	ldw	r8,0(r2)
 203f2f8:	45005217 	ldw	r20,328(r8)
 203f2fc:	44c05204 	addi	r19,r8,328
 203f300:	a0001c26 	beq	r20,zero,203f374 <__call_exitprocs+0xc4>
 203f304:	a0800117 	ldw	r2,4(r20)
 203f308:	15ffffc4 	addi	r23,r2,-1
 203f30c:	b8000d16 	blt	r23,zero,203f344 <__call_exitprocs+0x94>
 203f310:	14000044 	addi	r16,r2,1
 203f314:	8421883a 	add	r16,r16,r16
 203f318:	8421883a 	add	r16,r16,r16
 203f31c:	84402004 	addi	r17,r16,128
 203f320:	a463883a 	add	r17,r20,r17
 203f324:	a421883a 	add	r16,r20,r16
 203f328:	e0001e26 	beq	fp,zero,203f3a4 <__call_exitprocs+0xf4>
 203f32c:	80804017 	ldw	r2,256(r16)
 203f330:	e0801c26 	beq	fp,r2,203f3a4 <__call_exitprocs+0xf4>
 203f334:	bdffffc4 	addi	r23,r23,-1
 203f338:	843fff04 	addi	r16,r16,-4
 203f33c:	8c7fff04 	addi	r17,r17,-4
 203f340:	bd7ff91e 	bne	r23,r21,203f328 <__alt_mem_mem_0+0xfd01f328>
 203f344:	00808134 	movhi	r2,516
 203f348:	10b2aa04 	addi	r2,r2,-13656
 203f34c:	10000926 	beq	r2,zero,203f374 <__call_exitprocs+0xc4>
 203f350:	a0800117 	ldw	r2,4(r20)
 203f354:	1000301e 	bne	r2,zero,203f418 <__call_exitprocs+0x168>
 203f358:	a0800017 	ldw	r2,0(r20)
 203f35c:	10003226 	beq	r2,zero,203f428 <__call_exitprocs+0x178>
 203f360:	a009883a 	mov	r4,r20
 203f364:	98800015 	stw	r2,0(r19)
 203f368:	203caa80 	call	203caa8 <free>
 203f36c:	9d000017 	ldw	r20,0(r19)
 203f370:	a03fe41e 	bne	r20,zero,203f304 <__alt_mem_mem_0+0xfd01f304>
 203f374:	dfc00a17 	ldw	ra,40(sp)
 203f378:	df000917 	ldw	fp,36(sp)
 203f37c:	ddc00817 	ldw	r23,32(sp)
 203f380:	dd800717 	ldw	r22,28(sp)
 203f384:	dd400617 	ldw	r21,24(sp)
 203f388:	dd000517 	ldw	r20,20(sp)
 203f38c:	dcc00417 	ldw	r19,16(sp)
 203f390:	dc800317 	ldw	r18,12(sp)
 203f394:	dc400217 	ldw	r17,8(sp)
 203f398:	dc000117 	ldw	r16,4(sp)
 203f39c:	dec00b04 	addi	sp,sp,44
 203f3a0:	f800283a 	ret
 203f3a4:	a0800117 	ldw	r2,4(r20)
 203f3a8:	80c00017 	ldw	r3,0(r16)
 203f3ac:	10bfffc4 	addi	r2,r2,-1
 203f3b0:	15c01426 	beq	r2,r23,203f404 <__call_exitprocs+0x154>
 203f3b4:	80000015 	stw	zero,0(r16)
 203f3b8:	183fde26 	beq	r3,zero,203f334 <__alt_mem_mem_0+0xfd01f334>
 203f3bc:	95c8983a 	sll	r4,r18,r23
 203f3c0:	a0806217 	ldw	r2,392(r20)
 203f3c4:	a5800117 	ldw	r22,4(r20)
 203f3c8:	2084703a 	and	r2,r4,r2
 203f3cc:	10000b26 	beq	r2,zero,203f3fc <__call_exitprocs+0x14c>
 203f3d0:	a0806317 	ldw	r2,396(r20)
 203f3d4:	2088703a 	and	r4,r4,r2
 203f3d8:	20000c1e 	bne	r4,zero,203f40c <__call_exitprocs+0x15c>
 203f3dc:	89400017 	ldw	r5,0(r17)
 203f3e0:	d9000017 	ldw	r4,0(sp)
 203f3e4:	183ee83a 	callr	r3
 203f3e8:	a0800117 	ldw	r2,4(r20)
 203f3ec:	15bfbf1e 	bne	r2,r22,203f2ec <__alt_mem_mem_0+0xfd01f2ec>
 203f3f0:	98800017 	ldw	r2,0(r19)
 203f3f4:	153fcf26 	beq	r2,r20,203f334 <__alt_mem_mem_0+0xfd01f334>
 203f3f8:	003fbc06 	br	203f2ec <__alt_mem_mem_0+0xfd01f2ec>
 203f3fc:	183ee83a 	callr	r3
 203f400:	003ff906 	br	203f3e8 <__alt_mem_mem_0+0xfd01f3e8>
 203f404:	a5c00115 	stw	r23,4(r20)
 203f408:	003feb06 	br	203f3b8 <__alt_mem_mem_0+0xfd01f3b8>
 203f40c:	89000017 	ldw	r4,0(r17)
 203f410:	183ee83a 	callr	r3
 203f414:	003ff406 	br	203f3e8 <__alt_mem_mem_0+0xfd01f3e8>
 203f418:	a0800017 	ldw	r2,0(r20)
 203f41c:	a027883a 	mov	r19,r20
 203f420:	1029883a 	mov	r20,r2
 203f424:	003fb606 	br	203f300 <__alt_mem_mem_0+0xfd01f300>
 203f428:	0005883a 	mov	r2,zero
 203f42c:	003ffb06 	br	203f41c <__alt_mem_mem_0+0xfd01f41c>

0203f430 <__ssprint_r>:
 203f430:	30800217 	ldw	r2,8(r6)
 203f434:	defff604 	addi	sp,sp,-40
 203f438:	dc800215 	stw	r18,8(sp)
 203f43c:	dfc00915 	stw	ra,36(sp)
 203f440:	df000815 	stw	fp,32(sp)
 203f444:	ddc00715 	stw	r23,28(sp)
 203f448:	dd800615 	stw	r22,24(sp)
 203f44c:	dd400515 	stw	r21,20(sp)
 203f450:	dd000415 	stw	r20,16(sp)
 203f454:	dcc00315 	stw	r19,12(sp)
 203f458:	dc400115 	stw	r17,4(sp)
 203f45c:	dc000015 	stw	r16,0(sp)
 203f460:	3025883a 	mov	r18,r6
 203f464:	10005826 	beq	r2,zero,203f5c8 <__ssprint_r+0x198>
 203f468:	2027883a 	mov	r19,r4
 203f46c:	35c00017 	ldw	r23,0(r6)
 203f470:	29000017 	ldw	r4,0(r5)
 203f474:	28800217 	ldw	r2,8(r5)
 203f478:	2823883a 	mov	r17,r5
 203f47c:	0039883a 	mov	fp,zero
 203f480:	0021883a 	mov	r16,zero
 203f484:	80003926 	beq	r16,zero,203f56c <__ssprint_r+0x13c>
 203f488:	102b883a 	mov	r21,r2
 203f48c:	102d883a 	mov	r22,r2
 203f490:	80803a36 	bltu	r16,r2,203f57c <__ssprint_r+0x14c>
 203f494:	88c0030b 	ldhu	r3,12(r17)
 203f498:	1881200c 	andi	r2,r3,1152
 203f49c:	10002626 	beq	r2,zero,203f538 <__ssprint_r+0x108>
 203f4a0:	88800517 	ldw	r2,20(r17)
 203f4a4:	89400417 	ldw	r5,16(r17)
 203f4a8:	81800044 	addi	r6,r16,1
 203f4ac:	108f883a 	add	r7,r2,r2
 203f4b0:	3885883a 	add	r2,r7,r2
 203f4b4:	100ed7fa 	srli	r7,r2,31
 203f4b8:	216dc83a 	sub	r22,r4,r5
 203f4bc:	3589883a 	add	r4,r6,r22
 203f4c0:	3885883a 	add	r2,r7,r2
 203f4c4:	102bd07a 	srai	r21,r2,1
 203f4c8:	a80d883a 	mov	r6,r21
 203f4cc:	a900022e 	bgeu	r21,r4,203f4d8 <__ssprint_r+0xa8>
 203f4d0:	202b883a 	mov	r21,r4
 203f4d4:	200d883a 	mov	r6,r4
 203f4d8:	18c1000c 	andi	r3,r3,1024
 203f4dc:	18002a26 	beq	r3,zero,203f588 <__ssprint_r+0x158>
 203f4e0:	300b883a 	mov	r5,r6
 203f4e4:	9809883a 	mov	r4,r19
 203f4e8:	20055680 	call	2005568 <_malloc_r>
 203f4ec:	1029883a 	mov	r20,r2
 203f4f0:	10002c26 	beq	r2,zero,203f5a4 <__ssprint_r+0x174>
 203f4f4:	89400417 	ldw	r5,16(r17)
 203f4f8:	b00d883a 	mov	r6,r22
 203f4fc:	1009883a 	mov	r4,r2
 203f500:	2005e580 	call	2005e58 <memcpy>
 203f504:	8880030b 	ldhu	r2,12(r17)
 203f508:	00fedfc4 	movi	r3,-1153
 203f50c:	10c4703a 	and	r2,r2,r3
 203f510:	10802014 	ori	r2,r2,128
 203f514:	8880030d 	sth	r2,12(r17)
 203f518:	a589883a 	add	r4,r20,r22
 203f51c:	adadc83a 	sub	r22,r21,r22
 203f520:	8d400515 	stw	r21,20(r17)
 203f524:	8d800215 	stw	r22,8(r17)
 203f528:	8d000415 	stw	r20,16(r17)
 203f52c:	89000015 	stw	r4,0(r17)
 203f530:	802b883a 	mov	r21,r16
 203f534:	802d883a 	mov	r22,r16
 203f538:	b00d883a 	mov	r6,r22
 203f53c:	e00b883a 	mov	r5,fp
 203f540:	20094d40 	call	20094d4 <memmove>
 203f544:	88800217 	ldw	r2,8(r17)
 203f548:	89000017 	ldw	r4,0(r17)
 203f54c:	90c00217 	ldw	r3,8(r18)
 203f550:	1545c83a 	sub	r2,r2,r21
 203f554:	2589883a 	add	r4,r4,r22
 203f558:	88800215 	stw	r2,8(r17)
 203f55c:	89000015 	stw	r4,0(r17)
 203f560:	1c21c83a 	sub	r16,r3,r16
 203f564:	94000215 	stw	r16,8(r18)
 203f568:	80001726 	beq	r16,zero,203f5c8 <__ssprint_r+0x198>
 203f56c:	bf000017 	ldw	fp,0(r23)
 203f570:	bc000117 	ldw	r16,4(r23)
 203f574:	bdc00204 	addi	r23,r23,8
 203f578:	003fc206 	br	203f484 <__alt_mem_mem_0+0xfd01f484>
 203f57c:	802b883a 	mov	r21,r16
 203f580:	802d883a 	mov	r22,r16
 203f584:	003fec06 	br	203f538 <__alt_mem_mem_0+0xfd01f538>
 203f588:	9809883a 	mov	r4,r19
 203f58c:	20096900 	call	2009690 <_realloc_r>
 203f590:	1029883a 	mov	r20,r2
 203f594:	103fe01e 	bne	r2,zero,203f518 <__alt_mem_mem_0+0xfd01f518>
 203f598:	89400417 	ldw	r5,16(r17)
 203f59c:	9809883a 	mov	r4,r19
 203f5a0:	2004e380 	call	2004e38 <_free_r>
 203f5a4:	88c0030b 	ldhu	r3,12(r17)
 203f5a8:	00800304 	movi	r2,12
 203f5ac:	98800015 	stw	r2,0(r19)
 203f5b0:	18c01014 	ori	r3,r3,64
 203f5b4:	88c0030d 	sth	r3,12(r17)
 203f5b8:	00bfffc4 	movi	r2,-1
 203f5bc:	90000215 	stw	zero,8(r18)
 203f5c0:	90000115 	stw	zero,4(r18)
 203f5c4:	00000206 	br	203f5d0 <__ssprint_r+0x1a0>
 203f5c8:	90000115 	stw	zero,4(r18)
 203f5cc:	0005883a 	mov	r2,zero
 203f5d0:	dfc00917 	ldw	ra,36(sp)
 203f5d4:	df000817 	ldw	fp,32(sp)
 203f5d8:	ddc00717 	ldw	r23,28(sp)
 203f5dc:	dd800617 	ldw	r22,24(sp)
 203f5e0:	dd400517 	ldw	r21,20(sp)
 203f5e4:	dd000417 	ldw	r20,16(sp)
 203f5e8:	dcc00317 	ldw	r19,12(sp)
 203f5ec:	dc800217 	ldw	r18,8(sp)
 203f5f0:	dc400117 	ldw	r17,4(sp)
 203f5f4:	dc000017 	ldw	r16,0(sp)
 203f5f8:	dec00a04 	addi	sp,sp,40
 203f5fc:	f800283a 	ret

0203f600 <___svfiprintf_internal_r>:
 203f600:	2880030b 	ldhu	r2,12(r5)
 203f604:	deffc804 	addi	sp,sp,-224
 203f608:	dcc03115 	stw	r19,196(sp)
 203f60c:	dfc03715 	stw	ra,220(sp)
 203f610:	df003615 	stw	fp,216(sp)
 203f614:	ddc03515 	stw	r23,212(sp)
 203f618:	dd803415 	stw	r22,208(sp)
 203f61c:	dd403315 	stw	r21,204(sp)
 203f620:	dd003215 	stw	r20,200(sp)
 203f624:	dc803015 	stw	r18,192(sp)
 203f628:	dc402f15 	stw	r17,188(sp)
 203f62c:	dc002e15 	stw	r16,184(sp)
 203f630:	d9402715 	stw	r5,156(sp)
 203f634:	d9002a15 	stw	r4,168(sp)
 203f638:	1080200c 	andi	r2,r2,128
 203f63c:	d9c02315 	stw	r7,140(sp)
 203f640:	3027883a 	mov	r19,r6
 203f644:	10000226 	beq	r2,zero,203f650 <___svfiprintf_internal_r+0x50>
 203f648:	28800417 	ldw	r2,16(r5)
 203f64c:	10041d26 	beq	r2,zero,20406c4 <___svfiprintf_internal_r+0x10c4>
 203f650:	dac01a04 	addi	r11,sp,104
 203f654:	dac01e15 	stw	r11,120(sp)
 203f658:	d8801e17 	ldw	r2,120(sp)
 203f65c:	dac019c4 	addi	r11,sp,103
 203f660:	dd402a17 	ldw	r21,168(sp)
 203f664:	ddc02717 	ldw	r23,156(sp)
 203f668:	05808134 	movhi	r22,516
 203f66c:	05008134 	movhi	r20,516
 203f670:	dac01f15 	stw	r11,124(sp)
 203f674:	12d7c83a 	sub	r11,r2,r11
 203f678:	b58e5b04 	addi	r22,r22,14700
 203f67c:	a50e5704 	addi	r20,r20,14684
 203f680:	dec01a15 	stw	sp,104(sp)
 203f684:	d8001c15 	stw	zero,112(sp)
 203f688:	d8001b15 	stw	zero,108(sp)
 203f68c:	d811883a 	mov	r8,sp
 203f690:	d8002915 	stw	zero,164(sp)
 203f694:	d8002515 	stw	zero,148(sp)
 203f698:	dac02b15 	stw	r11,172(sp)
 203f69c:	98800007 	ldb	r2,0(r19)
 203f6a0:	1002dd26 	beq	r2,zero,2040218 <___svfiprintf_internal_r+0xc18>
 203f6a4:	00c00944 	movi	r3,37
 203f6a8:	9823883a 	mov	r17,r19
 203f6ac:	10c0021e 	bne	r2,r3,203f6b8 <___svfiprintf_internal_r+0xb8>
 203f6b0:	00001406 	br	203f704 <___svfiprintf_internal_r+0x104>
 203f6b4:	10c00326 	beq	r2,r3,203f6c4 <___svfiprintf_internal_r+0xc4>
 203f6b8:	8c400044 	addi	r17,r17,1
 203f6bc:	88800007 	ldb	r2,0(r17)
 203f6c0:	103ffc1e 	bne	r2,zero,203f6b4 <__alt_mem_mem_0+0xfd01f6b4>
 203f6c4:	8ce1c83a 	sub	r16,r17,r19
 203f6c8:	80000e26 	beq	r16,zero,203f704 <___svfiprintf_internal_r+0x104>
 203f6cc:	d8c01c17 	ldw	r3,112(sp)
 203f6d0:	d8801b17 	ldw	r2,108(sp)
 203f6d4:	44c00015 	stw	r19,0(r8)
 203f6d8:	1c07883a 	add	r3,r3,r16
 203f6dc:	10800044 	addi	r2,r2,1
 203f6e0:	d8c01c15 	stw	r3,112(sp)
 203f6e4:	44000115 	stw	r16,4(r8)
 203f6e8:	d8801b15 	stw	r2,108(sp)
 203f6ec:	00c001c4 	movi	r3,7
 203f6f0:	18831e16 	blt	r3,r2,204036c <___svfiprintf_internal_r+0xd6c>
 203f6f4:	42000204 	addi	r8,r8,8
 203f6f8:	dac02517 	ldw	r11,148(sp)
 203f6fc:	5c17883a 	add	r11,r11,r16
 203f700:	dac02515 	stw	r11,148(sp)
 203f704:	88800007 	ldb	r2,0(r17)
 203f708:	1002c526 	beq	r2,zero,2040220 <___svfiprintf_internal_r+0xc20>
 203f70c:	88c00047 	ldb	r3,1(r17)
 203f710:	8cc00044 	addi	r19,r17,1
 203f714:	d8001d85 	stb	zero,118(sp)
 203f718:	0009883a 	mov	r4,zero
 203f71c:	000f883a 	mov	r7,zero
 203f720:	043fffc4 	movi	r16,-1
 203f724:	d8002415 	stw	zero,144(sp)
 203f728:	0025883a 	mov	r18,zero
 203f72c:	01401604 	movi	r5,88
 203f730:	01800244 	movi	r6,9
 203f734:	02800a84 	movi	r10,42
 203f738:	02401b04 	movi	r9,108
 203f73c:	9cc00044 	addi	r19,r19,1
 203f740:	18bff804 	addi	r2,r3,-32
 203f744:	2881dd36 	bltu	r5,r2,203febc <___svfiprintf_internal_r+0x8bc>
 203f748:	100490ba 	slli	r2,r2,2
 203f74c:	02c08134 	movhi	r11,516
 203f750:	5afdd804 	addi	r11,r11,-2208
 203f754:	12c5883a 	add	r2,r2,r11
 203f758:	10800017 	ldw	r2,0(r2)
 203f75c:	1000683a 	jmp	r2
 203f760:	0203f95c 	xori	r8,zero,4069
 203f764:	0203febc 	xorhi	r8,zero,4090
 203f768:	0203febc 	xorhi	r8,zero,4090
 203f76c:	0203f950 	cmplti	r8,zero,4069
 203f770:	0203febc 	xorhi	r8,zero,4090
 203f774:	0203febc 	xorhi	r8,zero,4090
 203f778:	0203febc 	xorhi	r8,zero,4090
 203f77c:	0203febc 	xorhi	r8,zero,4090
 203f780:	0203febc 	xorhi	r8,zero,4090
 203f784:	0203febc 	xorhi	r8,zero,4090
 203f788:	0203f8c4 	movi	r8,4067
 203f78c:	0203faa0 	cmpeqi	r8,zero,4074
 203f790:	0203febc 	xorhi	r8,zero,4090
 203f794:	0203f8f0 	cmpltui	r8,zero,4067
 203f798:	0203fef0 	cmpltui	r8,zero,4091
 203f79c:	0203febc 	xorhi	r8,zero,4090
 203f7a0:	0203fee4 	muli	r8,zero,4091
 203f7a4:	0203fe84 	movi	r8,4090
 203f7a8:	0203fe84 	movi	r8,4090
 203f7ac:	0203fe84 	movi	r8,4090
 203f7b0:	0203fe84 	movi	r8,4090
 203f7b4:	0203fe84 	movi	r8,4090
 203f7b8:	0203fe84 	movi	r8,4090
 203f7bc:	0203fe84 	movi	r8,4090
 203f7c0:	0203fe84 	movi	r8,4090
 203f7c4:	0203fe84 	movi	r8,4090
 203f7c8:	0203febc 	xorhi	r8,zero,4090
 203f7cc:	0203febc 	xorhi	r8,zero,4090
 203f7d0:	0203febc 	xorhi	r8,zero,4090
 203f7d4:	0203febc 	xorhi	r8,zero,4090
 203f7d8:	0203febc 	xorhi	r8,zero,4090
 203f7dc:	0203febc 	xorhi	r8,zero,4090
 203f7e0:	0203febc 	xorhi	r8,zero,4090
 203f7e4:	0203febc 	xorhi	r8,zero,4090
 203f7e8:	0203febc 	xorhi	r8,zero,4090
 203f7ec:	0203febc 	xorhi	r8,zero,4090
 203f7f0:	0203fe20 	cmpeqi	r8,zero,4088
 203f7f4:	0203febc 	xorhi	r8,zero,4090
 203f7f8:	0203febc 	xorhi	r8,zero,4090
 203f7fc:	0203febc 	xorhi	r8,zero,4090
 203f800:	0203febc 	xorhi	r8,zero,4090
 203f804:	0203febc 	xorhi	r8,zero,4090
 203f808:	0203febc 	xorhi	r8,zero,4090
 203f80c:	0203febc 	xorhi	r8,zero,4090
 203f810:	0203febc 	xorhi	r8,zero,4090
 203f814:	0203febc 	xorhi	r8,zero,4090
 203f818:	0203febc 	xorhi	r8,zero,4090
 203f81c:	0203ff98 	cmpnei	r8,zero,4094
 203f820:	0203febc 	xorhi	r8,zero,4090
 203f824:	0203febc 	xorhi	r8,zero,4090
 203f828:	0203febc 	xorhi	r8,zero,4090
 203f82c:	0203febc 	xorhi	r8,zero,4090
 203f830:	0203febc 	xorhi	r8,zero,4090
 203f834:	0203ff30 	cmpltui	r8,zero,4092
 203f838:	0203febc 	xorhi	r8,zero,4090
 203f83c:	0203febc 	xorhi	r8,zero,4090
 203f840:	0203fc64 	muli	r8,zero,4081
 203f844:	0203febc 	xorhi	r8,zero,4090
 203f848:	0203febc 	xorhi	r8,zero,4090
 203f84c:	0203febc 	xorhi	r8,zero,4090
 203f850:	0203febc 	xorhi	r8,zero,4090
 203f854:	0203febc 	xorhi	r8,zero,4090
 203f858:	0203febc 	xorhi	r8,zero,4090
 203f85c:	0203febc 	xorhi	r8,zero,4090
 203f860:	0203febc 	xorhi	r8,zero,4090
 203f864:	0203febc 	xorhi	r8,zero,4090
 203f868:	0203febc 	xorhi	r8,zero,4090
 203f86c:	0203fb54 	movui	r8,4077
 203f870:	0203fd00 	call	203fd0 <__alt_mem_sdram_controller_0-0x1dfc030>
 203f874:	0203febc 	xorhi	r8,zero,4090
 203f878:	0203febc 	xorhi	r8,zero,4090
 203f87c:	0203febc 	xorhi	r8,zero,4090
 203f880:	0203fcf4 	movhi	r8,4083
 203f884:	0203fd00 	call	203fd0 <__alt_mem_sdram_controller_0-0x1dfc030>
 203f888:	0203febc 	xorhi	r8,zero,4090
 203f88c:	0203febc 	xorhi	r8,zero,4090
 203f890:	0203fce4 	muli	r8,zero,4083
 203f894:	0203febc 	xorhi	r8,zero,4090
 203f898:	0203fca8 	cmpgeui	r8,zero,4082
 203f89c:	0203fab0 	cmpltui	r8,zero,4074
 203f8a0:	0203f8fc 	xorhi	r8,zero,4067
 203f8a4:	0203fe14 	movui	r8,4088
 203f8a8:	0203febc 	xorhi	r8,zero,4090
 203f8ac:	0203fdc8 	cmpgei	r8,zero,4087
 203f8b0:	0203febc 	xorhi	r8,zero,4090
 203f8b4:	0203fa20 	cmpeqi	r8,zero,4072
 203f8b8:	0203febc 	xorhi	r8,zero,4090
 203f8bc:	0203febc 	xorhi	r8,zero,4090
 203f8c0:	0203f97c 	xorhi	r8,zero,4069
 203f8c4:	dac02317 	ldw	r11,140(sp)
 203f8c8:	5ac00017 	ldw	r11,0(r11)
 203f8cc:	dac02415 	stw	r11,144(sp)
 203f8d0:	dac02317 	ldw	r11,140(sp)
 203f8d4:	58800104 	addi	r2,r11,4
 203f8d8:	dac02417 	ldw	r11,144(sp)
 203f8dc:	5802e90e 	bge	r11,zero,2040484 <___svfiprintf_internal_r+0xe84>
 203f8e0:	dac02417 	ldw	r11,144(sp)
 203f8e4:	d8802315 	stw	r2,140(sp)
 203f8e8:	02d7c83a 	sub	r11,zero,r11
 203f8ec:	dac02415 	stw	r11,144(sp)
 203f8f0:	94800114 	ori	r18,r18,4
 203f8f4:	98c00007 	ldb	r3,0(r19)
 203f8f8:	003f9006 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 203f8fc:	00800c04 	movi	r2,48
 203f900:	dac02317 	ldw	r11,140(sp)
 203f904:	d8801d05 	stb	r2,116(sp)
 203f908:	00801e04 	movi	r2,120
 203f90c:	d8801d45 	stb	r2,117(sp)
 203f910:	d8001d85 	stb	zero,118(sp)
 203f914:	58c00104 	addi	r3,r11,4
 203f918:	5f000017 	ldw	fp,0(r11)
 203f91c:	0013883a 	mov	r9,zero
 203f920:	90800094 	ori	r2,r18,2
 203f924:	80032b16 	blt	r16,zero,20405d4 <___svfiprintf_internal_r+0xfd4>
 203f928:	00bfdfc4 	movi	r2,-129
 203f92c:	90a4703a 	and	r18,r18,r2
 203f930:	d8c02315 	stw	r3,140(sp)
 203f934:	94800094 	ori	r18,r18,2
 203f938:	e002dc26 	beq	fp,zero,20404ac <___svfiprintf_internal_r+0xeac>
 203f93c:	01008134 	movhi	r4,516
 203f940:	21037904 	addi	r4,r4,3556
 203f944:	0015883a 	mov	r10,zero
 203f948:	d9002915 	stw	r4,164(sp)
 203f94c:	00002306 	br	203f9dc <___svfiprintf_internal_r+0x3dc>
 203f950:	94800054 	ori	r18,r18,1
 203f954:	98c00007 	ldb	r3,0(r19)
 203f958:	003f7806 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 203f95c:	38803fcc 	andi	r2,r7,255
 203f960:	1080201c 	xori	r2,r2,128
 203f964:	10bfe004 	addi	r2,r2,-128
 203f968:	1002f31e 	bne	r2,zero,2040538 <___svfiprintf_internal_r+0xf38>
 203f96c:	01000044 	movi	r4,1
 203f970:	01c00804 	movi	r7,32
 203f974:	98c00007 	ldb	r3,0(r19)
 203f978:	003f7006 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 203f97c:	21003fcc 	andi	r4,r4,255
 203f980:	2003aa1e 	bne	r4,zero,204082c <___svfiprintf_internal_r+0x122c>
 203f984:	00808134 	movhi	r2,516
 203f988:	10837904 	addi	r2,r2,3556
 203f98c:	d8802915 	stw	r2,164(sp)
 203f990:	9080080c 	andi	r2,r18,32
 203f994:	1000ba26 	beq	r2,zero,203fc80 <___svfiprintf_internal_r+0x680>
 203f998:	dac02317 	ldw	r11,140(sp)
 203f99c:	5f000017 	ldw	fp,0(r11)
 203f9a0:	5a400117 	ldw	r9,4(r11)
 203f9a4:	5ac00204 	addi	r11,r11,8
 203f9a8:	dac02315 	stw	r11,140(sp)
 203f9ac:	9080004c 	andi	r2,r18,1
 203f9b0:	10029026 	beq	r2,zero,20403f4 <___svfiprintf_internal_r+0xdf4>
 203f9b4:	e244b03a 	or	r2,fp,r9
 203f9b8:	1002d41e 	bne	r2,zero,204050c <___svfiprintf_internal_r+0xf0c>
 203f9bc:	d8001d85 	stb	zero,118(sp)
 203f9c0:	80030b16 	blt	r16,zero,20405f0 <___svfiprintf_internal_r+0xff0>
 203f9c4:	00bfdfc4 	movi	r2,-129
 203f9c8:	90a4703a 	and	r18,r18,r2
 203f9cc:	0015883a 	mov	r10,zero
 203f9d0:	80002426 	beq	r16,zero,203fa64 <___svfiprintf_internal_r+0x464>
 203f9d4:	0039883a 	mov	fp,zero
 203f9d8:	0013883a 	mov	r9,zero
 203f9dc:	d9002917 	ldw	r4,164(sp)
 203f9e0:	dc401a04 	addi	r17,sp,104
 203f9e4:	e08003cc 	andi	r2,fp,15
 203f9e8:	4806973a 	slli	r3,r9,28
 203f9ec:	2085883a 	add	r2,r4,r2
 203f9f0:	e038d13a 	srli	fp,fp,4
 203f9f4:	10800003 	ldbu	r2,0(r2)
 203f9f8:	4812d13a 	srli	r9,r9,4
 203f9fc:	8c7fffc4 	addi	r17,r17,-1
 203fa00:	1f38b03a 	or	fp,r3,fp
 203fa04:	88800005 	stb	r2,0(r17)
 203fa08:	e244b03a 	or	r2,fp,r9
 203fa0c:	103ff51e 	bne	r2,zero,203f9e4 <__alt_mem_mem_0+0xfd01f9e4>
 203fa10:	dac01e17 	ldw	r11,120(sp)
 203fa14:	5c57c83a 	sub	r11,r11,r17
 203fa18:	dac02115 	stw	r11,132(sp)
 203fa1c:	00001406 	br	203fa70 <___svfiprintf_internal_r+0x470>
 203fa20:	21003fcc 	andi	r4,r4,255
 203fa24:	2003741e 	bne	r4,zero,20407f8 <___svfiprintf_internal_r+0x11f8>
 203fa28:	9080080c 	andi	r2,r18,32
 203fa2c:	10014526 	beq	r2,zero,203ff44 <___svfiprintf_internal_r+0x944>
 203fa30:	dac02317 	ldw	r11,140(sp)
 203fa34:	d8001d85 	stb	zero,118(sp)
 203fa38:	58c00204 	addi	r3,r11,8
 203fa3c:	5f000017 	ldw	fp,0(r11)
 203fa40:	5a400117 	ldw	r9,4(r11)
 203fa44:	8002d916 	blt	r16,zero,20405ac <___svfiprintf_internal_r+0xfac>
 203fa48:	013fdfc4 	movi	r4,-129
 203fa4c:	e244b03a 	or	r2,fp,r9
 203fa50:	d8c02315 	stw	r3,140(sp)
 203fa54:	9124703a 	and	r18,r18,r4
 203fa58:	0015883a 	mov	r10,zero
 203fa5c:	1000b91e 	bne	r2,zero,203fd44 <___svfiprintf_internal_r+0x744>
 203fa60:	8002e61e 	bne	r16,zero,20405fc <___svfiprintf_internal_r+0xffc>
 203fa64:	0021883a 	mov	r16,zero
 203fa68:	d8002115 	stw	zero,132(sp)
 203fa6c:	dc401a04 	addi	r17,sp,104
 203fa70:	d8c02117 	ldw	r3,132(sp)
 203fa74:	dc002015 	stw	r16,128(sp)
 203fa78:	80c0010e 	bge	r16,r3,203fa80 <___svfiprintf_internal_r+0x480>
 203fa7c:	d8c02015 	stw	r3,128(sp)
 203fa80:	52803fcc 	andi	r10,r10,255
 203fa84:	5280201c 	xori	r10,r10,128
 203fa88:	52bfe004 	addi	r10,r10,-128
 203fa8c:	50003c26 	beq	r10,zero,203fb80 <___svfiprintf_internal_r+0x580>
 203fa90:	dac02017 	ldw	r11,128(sp)
 203fa94:	5ac00044 	addi	r11,r11,1
 203fa98:	dac02015 	stw	r11,128(sp)
 203fa9c:	00003806 	br	203fb80 <___svfiprintf_internal_r+0x580>
 203faa0:	01000044 	movi	r4,1
 203faa4:	01c00ac4 	movi	r7,43
 203faa8:	98c00007 	ldb	r3,0(r19)
 203faac:	003f2306 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 203fab0:	21003fcc 	andi	r4,r4,255
 203fab4:	2003481e 	bne	r4,zero,20407d8 <___svfiprintf_internal_r+0x11d8>
 203fab8:	9080080c 	andi	r2,r18,32
 203fabc:	10013b26 	beq	r2,zero,203ffac <___svfiprintf_internal_r+0x9ac>
 203fac0:	dac02317 	ldw	r11,140(sp)
 203fac4:	d8001d85 	stb	zero,118(sp)
 203fac8:	58800204 	addi	r2,r11,8
 203facc:	5f000017 	ldw	fp,0(r11)
 203fad0:	5a400117 	ldw	r9,4(r11)
 203fad4:	8002a816 	blt	r16,zero,2040578 <___svfiprintf_internal_r+0xf78>
 203fad8:	013fdfc4 	movi	r4,-129
 203fadc:	e246b03a 	or	r3,fp,r9
 203fae0:	d8802315 	stw	r2,140(sp)
 203fae4:	9124703a 	and	r18,r18,r4
 203fae8:	18013c26 	beq	r3,zero,203ffdc <___svfiprintf_internal_r+0x9dc>
 203faec:	0015883a 	mov	r10,zero
 203faf0:	dc401a04 	addi	r17,sp,104
 203faf4:	e006d0fa 	srli	r3,fp,3
 203faf8:	4808977a 	slli	r4,r9,29
 203fafc:	4812d0fa 	srli	r9,r9,3
 203fb00:	e70001cc 	andi	fp,fp,7
 203fb04:	e0800c04 	addi	r2,fp,48
 203fb08:	8c7fffc4 	addi	r17,r17,-1
 203fb0c:	20f8b03a 	or	fp,r4,r3
 203fb10:	88800005 	stb	r2,0(r17)
 203fb14:	e246b03a 	or	r3,fp,r9
 203fb18:	183ff61e 	bne	r3,zero,203faf4 <__alt_mem_mem_0+0xfd01faf4>
 203fb1c:	90c0004c 	andi	r3,r18,1
 203fb20:	1800a526 	beq	r3,zero,203fdb8 <___svfiprintf_internal_r+0x7b8>
 203fb24:	10803fcc 	andi	r2,r2,255
 203fb28:	1080201c 	xori	r2,r2,128
 203fb2c:	10bfe004 	addi	r2,r2,-128
 203fb30:	00c00c04 	movi	r3,48
 203fb34:	10ffb626 	beq	r2,r3,203fa10 <__alt_mem_mem_0+0xfd01fa10>
 203fb38:	88ffffc5 	stb	r3,-1(r17)
 203fb3c:	d8c01e17 	ldw	r3,120(sp)
 203fb40:	88bfffc4 	addi	r2,r17,-1
 203fb44:	1023883a 	mov	r17,r2
 203fb48:	1887c83a 	sub	r3,r3,r2
 203fb4c:	d8c02115 	stw	r3,132(sp)
 203fb50:	003fc706 	br	203fa70 <__alt_mem_mem_0+0xfd01fa70>
 203fb54:	dac02317 	ldw	r11,140(sp)
 203fb58:	00c00044 	movi	r3,1
 203fb5c:	d8c02015 	stw	r3,128(sp)
 203fb60:	58800017 	ldw	r2,0(r11)
 203fb64:	5ac00104 	addi	r11,r11,4
 203fb68:	d8001d85 	stb	zero,118(sp)
 203fb6c:	d8801005 	stb	r2,64(sp)
 203fb70:	dac02315 	stw	r11,140(sp)
 203fb74:	d8c02115 	stw	r3,132(sp)
 203fb78:	dc401004 	addi	r17,sp,64
 203fb7c:	0021883a 	mov	r16,zero
 203fb80:	90c0008c 	andi	r3,r18,2
 203fb84:	d8c02215 	stw	r3,136(sp)
 203fb88:	18000326 	beq	r3,zero,203fb98 <___svfiprintf_internal_r+0x598>
 203fb8c:	dac02017 	ldw	r11,128(sp)
 203fb90:	5ac00084 	addi	r11,r11,2
 203fb94:	dac02015 	stw	r11,128(sp)
 203fb98:	90c0210c 	andi	r3,r18,132
 203fb9c:	d8c02615 	stw	r3,152(sp)
 203fba0:	1801131e 	bne	r3,zero,203fff0 <___svfiprintf_internal_r+0x9f0>
 203fba4:	dac02417 	ldw	r11,144(sp)
 203fba8:	d8c02017 	ldw	r3,128(sp)
 203fbac:	58f9c83a 	sub	fp,r11,r3
 203fbb0:	07010f0e 	bge	zero,fp,203fff0 <___svfiprintf_internal_r+0x9f0>
 203fbb4:	02400404 	movi	r9,16
 203fbb8:	d8c01c17 	ldw	r3,112(sp)
 203fbbc:	d8801b17 	ldw	r2,108(sp)
 203fbc0:	4f02d60e 	bge	r9,fp,204071c <___svfiprintf_internal_r+0x111c>
 203fbc4:	01408134 	movhi	r5,516
 203fbc8:	294e5b04 	addi	r5,r5,14700
 203fbcc:	d9402815 	stw	r5,160(sp)
 203fbd0:	028001c4 	movi	r10,7
 203fbd4:	00000306 	br	203fbe4 <___svfiprintf_internal_r+0x5e4>
 203fbd8:	e73ffc04 	addi	fp,fp,-16
 203fbdc:	42000204 	addi	r8,r8,8
 203fbe0:	4f00150e 	bge	r9,fp,203fc38 <___svfiprintf_internal_r+0x638>
 203fbe4:	18c00404 	addi	r3,r3,16
 203fbe8:	10800044 	addi	r2,r2,1
 203fbec:	45800015 	stw	r22,0(r8)
 203fbf0:	42400115 	stw	r9,4(r8)
 203fbf4:	d8c01c15 	stw	r3,112(sp)
 203fbf8:	d8801b15 	stw	r2,108(sp)
 203fbfc:	50bff60e 	bge	r10,r2,203fbd8 <__alt_mem_mem_0+0xfd01fbd8>
 203fc00:	d9801a04 	addi	r6,sp,104
 203fc04:	b80b883a 	mov	r5,r23
 203fc08:	a809883a 	mov	r4,r21
 203fc0c:	da402c15 	stw	r9,176(sp)
 203fc10:	da802d15 	stw	r10,180(sp)
 203fc14:	203f4300 	call	203f430 <__ssprint_r>
 203fc18:	da402c17 	ldw	r9,176(sp)
 203fc1c:	da802d17 	ldw	r10,180(sp)
 203fc20:	1001851e 	bne	r2,zero,2040238 <___svfiprintf_internal_r+0xc38>
 203fc24:	e73ffc04 	addi	fp,fp,-16
 203fc28:	d8c01c17 	ldw	r3,112(sp)
 203fc2c:	d8801b17 	ldw	r2,108(sp)
 203fc30:	d811883a 	mov	r8,sp
 203fc34:	4f3feb16 	blt	r9,fp,203fbe4 <__alt_mem_mem_0+0xfd01fbe4>
 203fc38:	dac02817 	ldw	r11,160(sp)
 203fc3c:	e0c7883a 	add	r3,fp,r3
 203fc40:	10800044 	addi	r2,r2,1
 203fc44:	42c00015 	stw	r11,0(r8)
 203fc48:	47000115 	stw	fp,4(r8)
 203fc4c:	d8c01c15 	stw	r3,112(sp)
 203fc50:	d8801b15 	stw	r2,108(sp)
 203fc54:	010001c4 	movi	r4,7
 203fc58:	2081ee16 	blt	r4,r2,2040414 <___svfiprintf_internal_r+0xe14>
 203fc5c:	42000204 	addi	r8,r8,8
 203fc60:	0000e506 	br	203fff8 <___svfiprintf_internal_r+0x9f8>
 203fc64:	21003fcc 	andi	r4,r4,255
 203fc68:	2002dd1e 	bne	r4,zero,20407e0 <___svfiprintf_internal_r+0x11e0>
 203fc6c:	00808134 	movhi	r2,516
 203fc70:	10837404 	addi	r2,r2,3536
 203fc74:	d8802915 	stw	r2,164(sp)
 203fc78:	9080080c 	andi	r2,r18,32
 203fc7c:	103f461e 	bne	r2,zero,203f998 <__alt_mem_mem_0+0xfd01f998>
 203fc80:	9080040c 	andi	r2,r18,16
 203fc84:	10022e1e 	bne	r2,zero,2040540 <___svfiprintf_internal_r+0xf40>
 203fc88:	9080100c 	andi	r2,r18,64
 203fc8c:	dac02317 	ldw	r11,140(sp)
 203fc90:	10027326 	beq	r2,zero,2040660 <___svfiprintf_internal_r+0x1060>
 203fc94:	5f00000b 	ldhu	fp,0(r11)
 203fc98:	5ac00104 	addi	r11,r11,4
 203fc9c:	0013883a 	mov	r9,zero
 203fca0:	dac02315 	stw	r11,140(sp)
 203fca4:	003f4106 	br	203f9ac <__alt_mem_mem_0+0xfd01f9ac>
 203fca8:	21003fcc 	andi	r4,r4,255
 203fcac:	2002e11e 	bne	r4,zero,2040834 <___svfiprintf_internal_r+0x1234>
 203fcb0:	9080080c 	andi	r2,r18,32
 203fcb4:	1002011e 	bne	r2,zero,20404bc <___svfiprintf_internal_r+0xebc>
 203fcb8:	9080040c 	andi	r2,r18,16
 203fcbc:	10023e1e 	bne	r2,zero,20405b8 <___svfiprintf_internal_r+0xfb8>
 203fcc0:	9480100c 	andi	r18,r18,64
 203fcc4:	90023c26 	beq	r18,zero,20405b8 <___svfiprintf_internal_r+0xfb8>
 203fcc8:	dac02317 	ldw	r11,140(sp)
 203fccc:	58800017 	ldw	r2,0(r11)
 203fcd0:	5ac00104 	addi	r11,r11,4
 203fcd4:	dac02315 	stw	r11,140(sp)
 203fcd8:	dac02517 	ldw	r11,148(sp)
 203fcdc:	12c0000d 	sth	r11,0(r2)
 203fce0:	003e6e06 	br	203f69c <__alt_mem_mem_0+0xfd01f69c>
 203fce4:	98c00007 	ldb	r3,0(r19)
 203fce8:	1a422926 	beq	r3,r9,2040590 <___svfiprintf_internal_r+0xf90>
 203fcec:	94800414 	ori	r18,r18,16
 203fcf0:	003e9206 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 203fcf4:	94801014 	ori	r18,r18,64
 203fcf8:	98c00007 	ldb	r3,0(r19)
 203fcfc:	003e8f06 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 203fd00:	21003fcc 	andi	r4,r4,255
 203fd04:	2002c71e 	bne	r4,zero,2040824 <___svfiprintf_internal_r+0x1224>
 203fd08:	9080080c 	andi	r2,r18,32
 203fd0c:	10004926 	beq	r2,zero,203fe34 <___svfiprintf_internal_r+0x834>
 203fd10:	dac02317 	ldw	r11,140(sp)
 203fd14:	58800117 	ldw	r2,4(r11)
 203fd18:	5f000017 	ldw	fp,0(r11)
 203fd1c:	5ac00204 	addi	r11,r11,8
 203fd20:	dac02315 	stw	r11,140(sp)
 203fd24:	1013883a 	mov	r9,r2
 203fd28:	10004b16 	blt	r2,zero,203fe58 <___svfiprintf_internal_r+0x858>
 203fd2c:	da801d83 	ldbu	r10,118(sp)
 203fd30:	8001cb16 	blt	r16,zero,2040460 <___svfiprintf_internal_r+0xe60>
 203fd34:	00ffdfc4 	movi	r3,-129
 203fd38:	e244b03a 	or	r2,fp,r9
 203fd3c:	90e4703a 	and	r18,r18,r3
 203fd40:	103f4726 	beq	r2,zero,203fa60 <__alt_mem_mem_0+0xfd01fa60>
 203fd44:	48008c26 	beq	r9,zero,203ff78 <___svfiprintf_internal_r+0x978>
 203fd48:	dc802015 	stw	r18,128(sp)
 203fd4c:	dc002115 	stw	r16,132(sp)
 203fd50:	dc401a04 	addi	r17,sp,104
 203fd54:	e021883a 	mov	r16,fp
 203fd58:	da002215 	stw	r8,136(sp)
 203fd5c:	5039883a 	mov	fp,r10
 203fd60:	4825883a 	mov	r18,r9
 203fd64:	8009883a 	mov	r4,r16
 203fd68:	900b883a 	mov	r5,r18
 203fd6c:	01800284 	movi	r6,10
 203fd70:	000f883a 	mov	r7,zero
 203fd74:	200a4ac0 	call	200a4ac <__umoddi3>
 203fd78:	10800c04 	addi	r2,r2,48
 203fd7c:	8c7fffc4 	addi	r17,r17,-1
 203fd80:	8009883a 	mov	r4,r16
 203fd84:	900b883a 	mov	r5,r18
 203fd88:	88800005 	stb	r2,0(r17)
 203fd8c:	01800284 	movi	r6,10
 203fd90:	000f883a 	mov	r7,zero
 203fd94:	2009f340 	call	2009f34 <__udivdi3>
 203fd98:	1021883a 	mov	r16,r2
 203fd9c:	10c4b03a 	or	r2,r2,r3
 203fda0:	1825883a 	mov	r18,r3
 203fda4:	103fef1e 	bne	r2,zero,203fd64 <__alt_mem_mem_0+0xfd01fd64>
 203fda8:	dc802017 	ldw	r18,128(sp)
 203fdac:	dc002117 	ldw	r16,132(sp)
 203fdb0:	da002217 	ldw	r8,136(sp)
 203fdb4:	e015883a 	mov	r10,fp
 203fdb8:	d8c01e17 	ldw	r3,120(sp)
 203fdbc:	1c47c83a 	sub	r3,r3,r17
 203fdc0:	d8c02115 	stw	r3,132(sp)
 203fdc4:	003f2a06 	br	203fa70 <__alt_mem_mem_0+0xfd01fa70>
 203fdc8:	dac02317 	ldw	r11,140(sp)
 203fdcc:	d8001d85 	stb	zero,118(sp)
 203fdd0:	5c400017 	ldw	r17,0(r11)
 203fdd4:	5f000104 	addi	fp,r11,4
 203fdd8:	88022f26 	beq	r17,zero,2040698 <___svfiprintf_internal_r+0x1098>
 203fddc:	80022516 	blt	r16,zero,2040674 <___svfiprintf_internal_r+0x1074>
 203fde0:	800d883a 	mov	r6,r16
 203fde4:	000b883a 	mov	r5,zero
 203fde8:	8809883a 	mov	r4,r17
 203fdec:	da002c15 	stw	r8,176(sp)
 203fdf0:	2005d740 	call	2005d74 <memchr>
 203fdf4:	da002c17 	ldw	r8,176(sp)
 203fdf8:	10026426 	beq	r2,zero,204078c <___svfiprintf_internal_r+0x118c>
 203fdfc:	1445c83a 	sub	r2,r2,r17
 203fe00:	d8802115 	stw	r2,132(sp)
 203fe04:	da801d83 	ldbu	r10,118(sp)
 203fe08:	df002315 	stw	fp,140(sp)
 203fe0c:	0021883a 	mov	r16,zero
 203fe10:	003f1706 	br	203fa70 <__alt_mem_mem_0+0xfd01fa70>
 203fe14:	94800814 	ori	r18,r18,32
 203fe18:	98c00007 	ldb	r3,0(r19)
 203fe1c:	003e4706 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 203fe20:	21003fcc 	andi	r4,r4,255
 203fe24:	2002701e 	bne	r4,zero,20407e8 <___svfiprintf_internal_r+0x11e8>
 203fe28:	94800414 	ori	r18,r18,16
 203fe2c:	9080080c 	andi	r2,r18,32
 203fe30:	103fb71e 	bne	r2,zero,203fd10 <__alt_mem_mem_0+0xfd01fd10>
 203fe34:	9080040c 	andi	r2,r18,16
 203fe38:	1001ab26 	beq	r2,zero,20404e8 <___svfiprintf_internal_r+0xee8>
 203fe3c:	dac02317 	ldw	r11,140(sp)
 203fe40:	5f000017 	ldw	fp,0(r11)
 203fe44:	5ac00104 	addi	r11,r11,4
 203fe48:	dac02315 	stw	r11,140(sp)
 203fe4c:	e013d7fa 	srai	r9,fp,31
 203fe50:	4805883a 	mov	r2,r9
 203fe54:	103fb50e 	bge	r2,zero,203fd2c <__alt_mem_mem_0+0xfd01fd2c>
 203fe58:	0739c83a 	sub	fp,zero,fp
 203fe5c:	02800b44 	movi	r10,45
 203fe60:	e004c03a 	cmpne	r2,fp,zero
 203fe64:	0253c83a 	sub	r9,zero,r9
 203fe68:	da801d85 	stb	r10,118(sp)
 203fe6c:	4893c83a 	sub	r9,r9,r2
 203fe70:	80023016 	blt	r16,zero,2040734 <___svfiprintf_internal_r+0x1134>
 203fe74:	00bfdfc4 	movi	r2,-129
 203fe78:	90a4703a 	and	r18,r18,r2
 203fe7c:	483fb21e 	bne	r9,zero,203fd48 <__alt_mem_mem_0+0xfd01fd48>
 203fe80:	00003d06 	br	203ff78 <___svfiprintf_internal_r+0x978>
 203fe84:	9817883a 	mov	r11,r19
 203fe88:	d8002415 	stw	zero,144(sp)
 203fe8c:	18bff404 	addi	r2,r3,-48
 203fe90:	0019883a 	mov	r12,zero
 203fe94:	58c00007 	ldb	r3,0(r11)
 203fe98:	630002a4 	muli	r12,r12,10
 203fe9c:	9cc00044 	addi	r19,r19,1
 203fea0:	9817883a 	mov	r11,r19
 203fea4:	1319883a 	add	r12,r2,r12
 203fea8:	18bff404 	addi	r2,r3,-48
 203feac:	30bff92e 	bgeu	r6,r2,203fe94 <__alt_mem_mem_0+0xfd01fe94>
 203feb0:	db002415 	stw	r12,144(sp)
 203feb4:	18bff804 	addi	r2,r3,-32
 203feb8:	28be232e 	bgeu	r5,r2,203f748 <__alt_mem_mem_0+0xfd01f748>
 203febc:	21003fcc 	andi	r4,r4,255
 203fec0:	20024b1e 	bne	r4,zero,20407f0 <___svfiprintf_internal_r+0x11f0>
 203fec4:	1800d626 	beq	r3,zero,2040220 <___svfiprintf_internal_r+0xc20>
 203fec8:	02c00044 	movi	r11,1
 203fecc:	dac02015 	stw	r11,128(sp)
 203fed0:	d8c01005 	stb	r3,64(sp)
 203fed4:	d8001d85 	stb	zero,118(sp)
 203fed8:	dac02115 	stw	r11,132(sp)
 203fedc:	dc401004 	addi	r17,sp,64
 203fee0:	003f2606 	br	203fb7c <__alt_mem_mem_0+0xfd01fb7c>
 203fee4:	94802014 	ori	r18,r18,128
 203fee8:	98c00007 	ldb	r3,0(r19)
 203feec:	003e1306 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 203fef0:	98c00007 	ldb	r3,0(r19)
 203fef4:	9ac00044 	addi	r11,r19,1
 203fef8:	1a822b26 	beq	r3,r10,20407a8 <___svfiprintf_internal_r+0x11a8>
 203fefc:	18bff404 	addi	r2,r3,-48
 203ff00:	0021883a 	mov	r16,zero
 203ff04:	30821e36 	bltu	r6,r2,2040780 <___svfiprintf_internal_r+0x1180>
 203ff08:	58c00007 	ldb	r3,0(r11)
 203ff0c:	840002a4 	muli	r16,r16,10
 203ff10:	5cc00044 	addi	r19,r11,1
 203ff14:	9817883a 	mov	r11,r19
 203ff18:	80a1883a 	add	r16,r16,r2
 203ff1c:	18bff404 	addi	r2,r3,-48
 203ff20:	30bff92e 	bgeu	r6,r2,203ff08 <__alt_mem_mem_0+0xfd01ff08>
 203ff24:	803e060e 	bge	r16,zero,203f740 <__alt_mem_mem_0+0xfd01f740>
 203ff28:	043fffc4 	movi	r16,-1
 203ff2c:	003e0406 	br	203f740 <__alt_mem_mem_0+0xfd01f740>
 203ff30:	21003fcc 	andi	r4,r4,255
 203ff34:	2002371e 	bne	r4,zero,2040814 <___svfiprintf_internal_r+0x1214>
 203ff38:	94800414 	ori	r18,r18,16
 203ff3c:	9080080c 	andi	r2,r18,32
 203ff40:	103ebb1e 	bne	r2,zero,203fa30 <__alt_mem_mem_0+0xfd01fa30>
 203ff44:	9080040c 	andi	r2,r18,16
 203ff48:	10013b26 	beq	r2,zero,2040438 <___svfiprintf_internal_r+0xe38>
 203ff4c:	dac02317 	ldw	r11,140(sp)
 203ff50:	d8001d85 	stb	zero,118(sp)
 203ff54:	0013883a 	mov	r9,zero
 203ff58:	58800104 	addi	r2,r11,4
 203ff5c:	5f000017 	ldw	fp,0(r11)
 203ff60:	80013d16 	blt	r16,zero,2040458 <___svfiprintf_internal_r+0xe58>
 203ff64:	00ffdfc4 	movi	r3,-129
 203ff68:	d8802315 	stw	r2,140(sp)
 203ff6c:	90e4703a 	and	r18,r18,r3
 203ff70:	0015883a 	mov	r10,zero
 203ff74:	e03eba26 	beq	fp,zero,203fa60 <__alt_mem_mem_0+0xfd01fa60>
 203ff78:	00800244 	movi	r2,9
 203ff7c:	173f7236 	bltu	r2,fp,203fd48 <__alt_mem_mem_0+0xfd01fd48>
 203ff80:	dac02b17 	ldw	r11,172(sp)
 203ff84:	e7000c04 	addi	fp,fp,48
 203ff88:	df0019c5 	stb	fp,103(sp)
 203ff8c:	dac02115 	stw	r11,132(sp)
 203ff90:	dc4019c4 	addi	r17,sp,103
 203ff94:	003eb606 	br	203fa70 <__alt_mem_mem_0+0xfd01fa70>
 203ff98:	21003fcc 	andi	r4,r4,255
 203ff9c:	20021f1e 	bne	r4,zero,204081c <___svfiprintf_internal_r+0x121c>
 203ffa0:	94800414 	ori	r18,r18,16
 203ffa4:	9080080c 	andi	r2,r18,32
 203ffa8:	103ec51e 	bne	r2,zero,203fac0 <__alt_mem_mem_0+0xfd01fac0>
 203ffac:	9080040c 	andi	r2,r18,16
 203ffb0:	10016926 	beq	r2,zero,2040558 <___svfiprintf_internal_r+0xf58>
 203ffb4:	dac02317 	ldw	r11,140(sp)
 203ffb8:	d8001d85 	stb	zero,118(sp)
 203ffbc:	0013883a 	mov	r9,zero
 203ffc0:	58800104 	addi	r2,r11,4
 203ffc4:	5f000017 	ldw	fp,0(r11)
 203ffc8:	80016b16 	blt	r16,zero,2040578 <___svfiprintf_internal_r+0xf78>
 203ffcc:	00ffdfc4 	movi	r3,-129
 203ffd0:	d8802315 	stw	r2,140(sp)
 203ffd4:	90e4703a 	and	r18,r18,r3
 203ffd8:	e03ec41e 	bne	fp,zero,203faec <__alt_mem_mem_0+0xfd01faec>
 203ffdc:	0015883a 	mov	r10,zero
 203ffe0:	8001c226 	beq	r16,zero,20406ec <___svfiprintf_internal_r+0x10ec>
 203ffe4:	0039883a 	mov	fp,zero
 203ffe8:	0013883a 	mov	r9,zero
 203ffec:	003ec006 	br	203faf0 <__alt_mem_mem_0+0xfd01faf0>
 203fff0:	d8c01c17 	ldw	r3,112(sp)
 203fff4:	d8801b17 	ldw	r2,108(sp)
 203fff8:	d9001d87 	ldb	r4,118(sp)
 203fffc:	20000b26 	beq	r4,zero,204002c <___svfiprintf_internal_r+0xa2c>
 2040000:	d9001d84 	addi	r4,sp,118
 2040004:	18c00044 	addi	r3,r3,1
 2040008:	10800044 	addi	r2,r2,1
 204000c:	41000015 	stw	r4,0(r8)
 2040010:	01000044 	movi	r4,1
 2040014:	41000115 	stw	r4,4(r8)
 2040018:	d8c01c15 	stw	r3,112(sp)
 204001c:	d8801b15 	stw	r2,108(sp)
 2040020:	010001c4 	movi	r4,7
 2040024:	2080e116 	blt	r4,r2,20403ac <___svfiprintf_internal_r+0xdac>
 2040028:	42000204 	addi	r8,r8,8
 204002c:	dac02217 	ldw	r11,136(sp)
 2040030:	58000b26 	beq	r11,zero,2040060 <___svfiprintf_internal_r+0xa60>
 2040034:	d9001d04 	addi	r4,sp,116
 2040038:	18c00084 	addi	r3,r3,2
 204003c:	10800044 	addi	r2,r2,1
 2040040:	41000015 	stw	r4,0(r8)
 2040044:	01000084 	movi	r4,2
 2040048:	41000115 	stw	r4,4(r8)
 204004c:	d8c01c15 	stw	r3,112(sp)
 2040050:	d8801b15 	stw	r2,108(sp)
 2040054:	010001c4 	movi	r4,7
 2040058:	2080dd16 	blt	r4,r2,20403d0 <___svfiprintf_internal_r+0xdd0>
 204005c:	42000204 	addi	r8,r8,8
 2040060:	dac02617 	ldw	r11,152(sp)
 2040064:	01002004 	movi	r4,128
 2040068:	59008426 	beq	r11,r4,204027c <___svfiprintf_internal_r+0xc7c>
 204006c:	dac02117 	ldw	r11,132(sp)
 2040070:	82e1c83a 	sub	r16,r16,r11
 2040074:	0400270e 	bge	zero,r16,2040114 <___svfiprintf_internal_r+0xb14>
 2040078:	01c00404 	movi	r7,16
 204007c:	3c016a0e 	bge	r7,r16,2040628 <___svfiprintf_internal_r+0x1028>
 2040080:	01408134 	movhi	r5,516
 2040084:	294e5704 	addi	r5,r5,14684
 2040088:	d9402215 	stw	r5,136(sp)
 204008c:	070001c4 	movi	fp,7
 2040090:	00000306 	br	20400a0 <___svfiprintf_internal_r+0xaa0>
 2040094:	843ffc04 	addi	r16,r16,-16
 2040098:	42000204 	addi	r8,r8,8
 204009c:	3c00130e 	bge	r7,r16,20400ec <___svfiprintf_internal_r+0xaec>
 20400a0:	18c00404 	addi	r3,r3,16
 20400a4:	10800044 	addi	r2,r2,1
 20400a8:	45000015 	stw	r20,0(r8)
 20400ac:	41c00115 	stw	r7,4(r8)
 20400b0:	d8c01c15 	stw	r3,112(sp)
 20400b4:	d8801b15 	stw	r2,108(sp)
 20400b8:	e0bff60e 	bge	fp,r2,2040094 <__alt_mem_mem_0+0xfd020094>
 20400bc:	d9801a04 	addi	r6,sp,104
 20400c0:	b80b883a 	mov	r5,r23
 20400c4:	a809883a 	mov	r4,r21
 20400c8:	d9c02c15 	stw	r7,176(sp)
 20400cc:	203f4300 	call	203f430 <__ssprint_r>
 20400d0:	d9c02c17 	ldw	r7,176(sp)
 20400d4:	1000581e 	bne	r2,zero,2040238 <___svfiprintf_internal_r+0xc38>
 20400d8:	843ffc04 	addi	r16,r16,-16
 20400dc:	d8c01c17 	ldw	r3,112(sp)
 20400e0:	d8801b17 	ldw	r2,108(sp)
 20400e4:	d811883a 	mov	r8,sp
 20400e8:	3c3fed16 	blt	r7,r16,20400a0 <__alt_mem_mem_0+0xfd0200a0>
 20400ec:	dac02217 	ldw	r11,136(sp)
 20400f0:	1c07883a 	add	r3,r3,r16
 20400f4:	10800044 	addi	r2,r2,1
 20400f8:	42c00015 	stw	r11,0(r8)
 20400fc:	44000115 	stw	r16,4(r8)
 2040100:	d8c01c15 	stw	r3,112(sp)
 2040104:	d8801b15 	stw	r2,108(sp)
 2040108:	010001c4 	movi	r4,7
 204010c:	20809e16 	blt	r4,r2,2040388 <___svfiprintf_internal_r+0xd88>
 2040110:	42000204 	addi	r8,r8,8
 2040114:	dac02117 	ldw	r11,132(sp)
 2040118:	10800044 	addi	r2,r2,1
 204011c:	44400015 	stw	r17,0(r8)
 2040120:	58c7883a 	add	r3,r11,r3
 2040124:	42c00115 	stw	r11,4(r8)
 2040128:	d8c01c15 	stw	r3,112(sp)
 204012c:	d8801b15 	stw	r2,108(sp)
 2040130:	010001c4 	movi	r4,7
 2040134:	20807f16 	blt	r4,r2,2040334 <___svfiprintf_internal_r+0xd34>
 2040138:	42000204 	addi	r8,r8,8
 204013c:	9480010c 	andi	r18,r18,4
 2040140:	90002926 	beq	r18,zero,20401e8 <___svfiprintf_internal_r+0xbe8>
 2040144:	dac02417 	ldw	r11,144(sp)
 2040148:	d8802017 	ldw	r2,128(sp)
 204014c:	58a1c83a 	sub	r16,r11,r2
 2040150:	0400250e 	bge	zero,r16,20401e8 <___svfiprintf_internal_r+0xbe8>
 2040154:	04400404 	movi	r17,16
 2040158:	d8801b17 	ldw	r2,108(sp)
 204015c:	8c017c0e 	bge	r17,r16,2040750 <___svfiprintf_internal_r+0x1150>
 2040160:	01408134 	movhi	r5,516
 2040164:	294e5b04 	addi	r5,r5,14700
 2040168:	d9402815 	stw	r5,160(sp)
 204016c:	048001c4 	movi	r18,7
 2040170:	00000306 	br	2040180 <___svfiprintf_internal_r+0xb80>
 2040174:	843ffc04 	addi	r16,r16,-16
 2040178:	42000204 	addi	r8,r8,8
 204017c:	8c00110e 	bge	r17,r16,20401c4 <___svfiprintf_internal_r+0xbc4>
 2040180:	18c00404 	addi	r3,r3,16
 2040184:	10800044 	addi	r2,r2,1
 2040188:	45800015 	stw	r22,0(r8)
 204018c:	44400115 	stw	r17,4(r8)
 2040190:	d8c01c15 	stw	r3,112(sp)
 2040194:	d8801b15 	stw	r2,108(sp)
 2040198:	90bff60e 	bge	r18,r2,2040174 <__alt_mem_mem_0+0xfd020174>
 204019c:	d9801a04 	addi	r6,sp,104
 20401a0:	b80b883a 	mov	r5,r23
 20401a4:	a809883a 	mov	r4,r21
 20401a8:	203f4300 	call	203f430 <__ssprint_r>
 20401ac:	1000221e 	bne	r2,zero,2040238 <___svfiprintf_internal_r+0xc38>
 20401b0:	843ffc04 	addi	r16,r16,-16
 20401b4:	d8c01c17 	ldw	r3,112(sp)
 20401b8:	d8801b17 	ldw	r2,108(sp)
 20401bc:	d811883a 	mov	r8,sp
 20401c0:	8c3fef16 	blt	r17,r16,2040180 <__alt_mem_mem_0+0xfd020180>
 20401c4:	dac02817 	ldw	r11,160(sp)
 20401c8:	1c07883a 	add	r3,r3,r16
 20401cc:	10800044 	addi	r2,r2,1
 20401d0:	42c00015 	stw	r11,0(r8)
 20401d4:	44000115 	stw	r16,4(r8)
 20401d8:	d8c01c15 	stw	r3,112(sp)
 20401dc:	d8801b15 	stw	r2,108(sp)
 20401e0:	010001c4 	movi	r4,7
 20401e4:	2080aa16 	blt	r4,r2,2040490 <___svfiprintf_internal_r+0xe90>
 20401e8:	d8802417 	ldw	r2,144(sp)
 20401ec:	dac02017 	ldw	r11,128(sp)
 20401f0:	12c0010e 	bge	r2,r11,20401f8 <___svfiprintf_internal_r+0xbf8>
 20401f4:	5805883a 	mov	r2,r11
 20401f8:	dac02517 	ldw	r11,148(sp)
 20401fc:	5897883a 	add	r11,r11,r2
 2040200:	dac02515 	stw	r11,148(sp)
 2040204:	1800531e 	bne	r3,zero,2040354 <___svfiprintf_internal_r+0xd54>
 2040208:	98800007 	ldb	r2,0(r19)
 204020c:	d8001b15 	stw	zero,108(sp)
 2040210:	d811883a 	mov	r8,sp
 2040214:	103d231e 	bne	r2,zero,203f6a4 <__alt_mem_mem_0+0xfd01f6a4>
 2040218:	9823883a 	mov	r17,r19
 204021c:	003d3906 	br	203f704 <__alt_mem_mem_0+0xfd01f704>
 2040220:	d8801c17 	ldw	r2,112(sp)
 2040224:	10000426 	beq	r2,zero,2040238 <___svfiprintf_internal_r+0xc38>
 2040228:	d9402717 	ldw	r5,156(sp)
 204022c:	d9002a17 	ldw	r4,168(sp)
 2040230:	d9801a04 	addi	r6,sp,104
 2040234:	203f4300 	call	203f430 <__ssprint_r>
 2040238:	dac02717 	ldw	r11,156(sp)
 204023c:	d8802517 	ldw	r2,148(sp)
 2040240:	58c0030b 	ldhu	r3,12(r11)
 2040244:	18c0100c 	andi	r3,r3,64
 2040248:	1801381e 	bne	r3,zero,204072c <___svfiprintf_internal_r+0x112c>
 204024c:	dfc03717 	ldw	ra,220(sp)
 2040250:	df003617 	ldw	fp,216(sp)
 2040254:	ddc03517 	ldw	r23,212(sp)
 2040258:	dd803417 	ldw	r22,208(sp)
 204025c:	dd403317 	ldw	r21,204(sp)
 2040260:	dd003217 	ldw	r20,200(sp)
 2040264:	dcc03117 	ldw	r19,196(sp)
 2040268:	dc803017 	ldw	r18,192(sp)
 204026c:	dc402f17 	ldw	r17,188(sp)
 2040270:	dc002e17 	ldw	r16,184(sp)
 2040274:	dec03804 	addi	sp,sp,224
 2040278:	f800283a 	ret
 204027c:	dac02417 	ldw	r11,144(sp)
 2040280:	d9002017 	ldw	r4,128(sp)
 2040284:	5939c83a 	sub	fp,r11,r4
 2040288:	073f780e 	bge	zero,fp,204006c <__alt_mem_mem_0+0xfd02006c>
 204028c:	02400404 	movi	r9,16
 2040290:	4f01370e 	bge	r9,fp,2040770 <___svfiprintf_internal_r+0x1170>
 2040294:	02c08134 	movhi	r11,516
 2040298:	5ace5704 	addi	r11,r11,14684
 204029c:	dac02215 	stw	r11,136(sp)
 20402a0:	028001c4 	movi	r10,7
 20402a4:	00000306 	br	20402b4 <___svfiprintf_internal_r+0xcb4>
 20402a8:	e73ffc04 	addi	fp,fp,-16
 20402ac:	42000204 	addi	r8,r8,8
 20402b0:	4f00150e 	bge	r9,fp,2040308 <___svfiprintf_internal_r+0xd08>
 20402b4:	18c00404 	addi	r3,r3,16
 20402b8:	10800044 	addi	r2,r2,1
 20402bc:	45000015 	stw	r20,0(r8)
 20402c0:	42400115 	stw	r9,4(r8)
 20402c4:	d8c01c15 	stw	r3,112(sp)
 20402c8:	d8801b15 	stw	r2,108(sp)
 20402cc:	50bff60e 	bge	r10,r2,20402a8 <__alt_mem_mem_0+0xfd0202a8>
 20402d0:	d9801a04 	addi	r6,sp,104
 20402d4:	b80b883a 	mov	r5,r23
 20402d8:	a809883a 	mov	r4,r21
 20402dc:	da402c15 	stw	r9,176(sp)
 20402e0:	da802d15 	stw	r10,180(sp)
 20402e4:	203f4300 	call	203f430 <__ssprint_r>
 20402e8:	da402c17 	ldw	r9,176(sp)
 20402ec:	da802d17 	ldw	r10,180(sp)
 20402f0:	103fd11e 	bne	r2,zero,2040238 <__alt_mem_mem_0+0xfd020238>
 20402f4:	e73ffc04 	addi	fp,fp,-16
 20402f8:	d8c01c17 	ldw	r3,112(sp)
 20402fc:	d8801b17 	ldw	r2,108(sp)
 2040300:	d811883a 	mov	r8,sp
 2040304:	4f3feb16 	blt	r9,fp,20402b4 <__alt_mem_mem_0+0xfd0202b4>
 2040308:	dac02217 	ldw	r11,136(sp)
 204030c:	1f07883a 	add	r3,r3,fp
 2040310:	10800044 	addi	r2,r2,1
 2040314:	42c00015 	stw	r11,0(r8)
 2040318:	47000115 	stw	fp,4(r8)
 204031c:	d8c01c15 	stw	r3,112(sp)
 2040320:	d8801b15 	stw	r2,108(sp)
 2040324:	010001c4 	movi	r4,7
 2040328:	2080b616 	blt	r4,r2,2040604 <___svfiprintf_internal_r+0x1004>
 204032c:	42000204 	addi	r8,r8,8
 2040330:	003f4e06 	br	204006c <__alt_mem_mem_0+0xfd02006c>
 2040334:	d9801a04 	addi	r6,sp,104
 2040338:	b80b883a 	mov	r5,r23
 204033c:	a809883a 	mov	r4,r21
 2040340:	203f4300 	call	203f430 <__ssprint_r>
 2040344:	103fbc1e 	bne	r2,zero,2040238 <__alt_mem_mem_0+0xfd020238>
 2040348:	d8c01c17 	ldw	r3,112(sp)
 204034c:	d811883a 	mov	r8,sp
 2040350:	003f7a06 	br	204013c <__alt_mem_mem_0+0xfd02013c>
 2040354:	d9801a04 	addi	r6,sp,104
 2040358:	b80b883a 	mov	r5,r23
 204035c:	a809883a 	mov	r4,r21
 2040360:	203f4300 	call	203f430 <__ssprint_r>
 2040364:	103fa826 	beq	r2,zero,2040208 <__alt_mem_mem_0+0xfd020208>
 2040368:	003fb306 	br	2040238 <__alt_mem_mem_0+0xfd020238>
 204036c:	d9801a04 	addi	r6,sp,104
 2040370:	b80b883a 	mov	r5,r23
 2040374:	a809883a 	mov	r4,r21
 2040378:	203f4300 	call	203f430 <__ssprint_r>
 204037c:	103fae1e 	bne	r2,zero,2040238 <__alt_mem_mem_0+0xfd020238>
 2040380:	d811883a 	mov	r8,sp
 2040384:	003cdc06 	br	203f6f8 <__alt_mem_mem_0+0xfd01f6f8>
 2040388:	d9801a04 	addi	r6,sp,104
 204038c:	b80b883a 	mov	r5,r23
 2040390:	a809883a 	mov	r4,r21
 2040394:	203f4300 	call	203f430 <__ssprint_r>
 2040398:	103fa71e 	bne	r2,zero,2040238 <__alt_mem_mem_0+0xfd020238>
 204039c:	d8c01c17 	ldw	r3,112(sp)
 20403a0:	d8801b17 	ldw	r2,108(sp)
 20403a4:	d811883a 	mov	r8,sp
 20403a8:	003f5a06 	br	2040114 <__alt_mem_mem_0+0xfd020114>
 20403ac:	d9801a04 	addi	r6,sp,104
 20403b0:	b80b883a 	mov	r5,r23
 20403b4:	a809883a 	mov	r4,r21
 20403b8:	203f4300 	call	203f430 <__ssprint_r>
 20403bc:	103f9e1e 	bne	r2,zero,2040238 <__alt_mem_mem_0+0xfd020238>
 20403c0:	d8c01c17 	ldw	r3,112(sp)
 20403c4:	d8801b17 	ldw	r2,108(sp)
 20403c8:	d811883a 	mov	r8,sp
 20403cc:	003f1706 	br	204002c <__alt_mem_mem_0+0xfd02002c>
 20403d0:	d9801a04 	addi	r6,sp,104
 20403d4:	b80b883a 	mov	r5,r23
 20403d8:	a809883a 	mov	r4,r21
 20403dc:	203f4300 	call	203f430 <__ssprint_r>
 20403e0:	103f951e 	bne	r2,zero,2040238 <__alt_mem_mem_0+0xfd020238>
 20403e4:	d8c01c17 	ldw	r3,112(sp)
 20403e8:	d8801b17 	ldw	r2,108(sp)
 20403ec:	d811883a 	mov	r8,sp
 20403f0:	003f1b06 	br	2040060 <__alt_mem_mem_0+0xfd020060>
 20403f4:	d8001d85 	stb	zero,118(sp)
 20403f8:	80007b16 	blt	r16,zero,20405e8 <___svfiprintf_internal_r+0xfe8>
 20403fc:	00ffdfc4 	movi	r3,-129
 2040400:	e244b03a 	or	r2,fp,r9
 2040404:	90e4703a 	and	r18,r18,r3
 2040408:	103d7026 	beq	r2,zero,203f9cc <__alt_mem_mem_0+0xfd01f9cc>
 204040c:	0015883a 	mov	r10,zero
 2040410:	003d7206 	br	203f9dc <__alt_mem_mem_0+0xfd01f9dc>
 2040414:	d9801a04 	addi	r6,sp,104
 2040418:	b80b883a 	mov	r5,r23
 204041c:	a809883a 	mov	r4,r21
 2040420:	203f4300 	call	203f430 <__ssprint_r>
 2040424:	103f841e 	bne	r2,zero,2040238 <__alt_mem_mem_0+0xfd020238>
 2040428:	d8c01c17 	ldw	r3,112(sp)
 204042c:	d8801b17 	ldw	r2,108(sp)
 2040430:	d811883a 	mov	r8,sp
 2040434:	003ef006 	br	203fff8 <__alt_mem_mem_0+0xfd01fff8>
 2040438:	9080100c 	andi	r2,r18,64
 204043c:	d8001d85 	stb	zero,118(sp)
 2040440:	dac02317 	ldw	r11,140(sp)
 2040444:	10008126 	beq	r2,zero,204064c <___svfiprintf_internal_r+0x104c>
 2040448:	58800104 	addi	r2,r11,4
 204044c:	5f00000b 	ldhu	fp,0(r11)
 2040450:	0013883a 	mov	r9,zero
 2040454:	803ec30e 	bge	r16,zero,203ff64 <__alt_mem_mem_0+0xfd01ff64>
 2040458:	d8802315 	stw	r2,140(sp)
 204045c:	0015883a 	mov	r10,zero
 2040460:	e244b03a 	or	r2,fp,r9
 2040464:	103e371e 	bne	r2,zero,203fd44 <__alt_mem_mem_0+0xfd01fd44>
 2040468:	00800044 	movi	r2,1
 204046c:	10803fcc 	andi	r2,r2,255
 2040470:	00c00044 	movi	r3,1
 2040474:	10c06126 	beq	r2,r3,20405fc <___svfiprintf_internal_r+0xffc>
 2040478:	00c00084 	movi	r3,2
 204047c:	10fd5526 	beq	r2,r3,203f9d4 <__alt_mem_mem_0+0xfd01f9d4>
 2040480:	003ed806 	br	203ffe4 <__alt_mem_mem_0+0xfd01ffe4>
 2040484:	d8802315 	stw	r2,140(sp)
 2040488:	98c00007 	ldb	r3,0(r19)
 204048c:	003cab06 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 2040490:	d9801a04 	addi	r6,sp,104
 2040494:	b80b883a 	mov	r5,r23
 2040498:	a809883a 	mov	r4,r21
 204049c:	203f4300 	call	203f430 <__ssprint_r>
 20404a0:	103f651e 	bne	r2,zero,2040238 <__alt_mem_mem_0+0xfd020238>
 20404a4:	d8c01c17 	ldw	r3,112(sp)
 20404a8:	003f4f06 	br	20401e8 <__alt_mem_mem_0+0xfd0201e8>
 20404ac:	00808134 	movhi	r2,516
 20404b0:	10837904 	addi	r2,r2,3556
 20404b4:	d8802915 	stw	r2,164(sp)
 20404b8:	003d4406 	br	203f9cc <__alt_mem_mem_0+0xfd01f9cc>
 20404bc:	dac02317 	ldw	r11,140(sp)
 20404c0:	58800017 	ldw	r2,0(r11)
 20404c4:	dac02517 	ldw	r11,148(sp)
 20404c8:	5807d7fa 	srai	r3,r11,31
 20404cc:	dac02317 	ldw	r11,140(sp)
 20404d0:	10c00115 	stw	r3,4(r2)
 20404d4:	5ac00104 	addi	r11,r11,4
 20404d8:	dac02315 	stw	r11,140(sp)
 20404dc:	dac02517 	ldw	r11,148(sp)
 20404e0:	12c00015 	stw	r11,0(r2)
 20404e4:	003c6d06 	br	203f69c <__alt_mem_mem_0+0xfd01f69c>
 20404e8:	9080100c 	andi	r2,r18,64
 20404ec:	dac02317 	ldw	r11,140(sp)
 20404f0:	103e5326 	beq	r2,zero,203fe40 <__alt_mem_mem_0+0xfd01fe40>
 20404f4:	5f00000f 	ldh	fp,0(r11)
 20404f8:	5ac00104 	addi	r11,r11,4
 20404fc:	dac02315 	stw	r11,140(sp)
 2040500:	e013d7fa 	srai	r9,fp,31
 2040504:	4805883a 	mov	r2,r9
 2040508:	003e0706 	br	203fd28 <__alt_mem_mem_0+0xfd01fd28>
 204050c:	00800c04 	movi	r2,48
 2040510:	d8801d05 	stb	r2,116(sp)
 2040514:	d8c01d45 	stb	r3,117(sp)
 2040518:	d8001d85 	stb	zero,118(sp)
 204051c:	90800094 	ori	r2,r18,2
 2040520:	80008f16 	blt	r16,zero,2040760 <___svfiprintf_internal_r+0x1160>
 2040524:	00bfdfc4 	movi	r2,-129
 2040528:	90a4703a 	and	r18,r18,r2
 204052c:	94800094 	ori	r18,r18,2
 2040530:	0015883a 	mov	r10,zero
 2040534:	003d2906 	br	203f9dc <__alt_mem_mem_0+0xfd01f9dc>
 2040538:	98c00007 	ldb	r3,0(r19)
 204053c:	003c7f06 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 2040540:	dac02317 	ldw	r11,140(sp)
 2040544:	0013883a 	mov	r9,zero
 2040548:	5f000017 	ldw	fp,0(r11)
 204054c:	5ac00104 	addi	r11,r11,4
 2040550:	dac02315 	stw	r11,140(sp)
 2040554:	003d1506 	br	203f9ac <__alt_mem_mem_0+0xfd01f9ac>
 2040558:	9080100c 	andi	r2,r18,64
 204055c:	d8001d85 	stb	zero,118(sp)
 2040560:	dac02317 	ldw	r11,140(sp)
 2040564:	10003426 	beq	r2,zero,2040638 <___svfiprintf_internal_r+0x1038>
 2040568:	58800104 	addi	r2,r11,4
 204056c:	5f00000b 	ldhu	fp,0(r11)
 2040570:	0013883a 	mov	r9,zero
 2040574:	803e950e 	bge	r16,zero,203ffcc <__alt_mem_mem_0+0xfd01ffcc>
 2040578:	e246b03a 	or	r3,fp,r9
 204057c:	d8802315 	stw	r2,140(sp)
 2040580:	183d5a1e 	bne	r3,zero,203faec <__alt_mem_mem_0+0xfd01faec>
 2040584:	0015883a 	mov	r10,zero
 2040588:	0005883a 	mov	r2,zero
 204058c:	003fb706 	br	204046c <__alt_mem_mem_0+0xfd02046c>
 2040590:	98c00043 	ldbu	r3,1(r19)
 2040594:	94800814 	ori	r18,r18,32
 2040598:	9cc00044 	addi	r19,r19,1
 204059c:	18c03fcc 	andi	r3,r3,255
 20405a0:	18c0201c 	xori	r3,r3,128
 20405a4:	18ffe004 	addi	r3,r3,-128
 20405a8:	003c6406 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 20405ac:	d8c02315 	stw	r3,140(sp)
 20405b0:	0015883a 	mov	r10,zero
 20405b4:	003faa06 	br	2040460 <__alt_mem_mem_0+0xfd020460>
 20405b8:	dac02317 	ldw	r11,140(sp)
 20405bc:	58800017 	ldw	r2,0(r11)
 20405c0:	5ac00104 	addi	r11,r11,4
 20405c4:	dac02315 	stw	r11,140(sp)
 20405c8:	dac02517 	ldw	r11,148(sp)
 20405cc:	12c00015 	stw	r11,0(r2)
 20405d0:	003c3206 	br	203f69c <__alt_mem_mem_0+0xfd01f69c>
 20405d4:	01008134 	movhi	r4,516
 20405d8:	21037904 	addi	r4,r4,3556
 20405dc:	d9002915 	stw	r4,164(sp)
 20405e0:	d8c02315 	stw	r3,140(sp)
 20405e4:	1025883a 	mov	r18,r2
 20405e8:	e244b03a 	or	r2,fp,r9
 20405ec:	103f871e 	bne	r2,zero,204040c <__alt_mem_mem_0+0xfd02040c>
 20405f0:	0015883a 	mov	r10,zero
 20405f4:	00800084 	movi	r2,2
 20405f8:	003f9c06 	br	204046c <__alt_mem_mem_0+0xfd02046c>
 20405fc:	0039883a 	mov	fp,zero
 2040600:	003e5f06 	br	203ff80 <__alt_mem_mem_0+0xfd01ff80>
 2040604:	d9801a04 	addi	r6,sp,104
 2040608:	b80b883a 	mov	r5,r23
 204060c:	a809883a 	mov	r4,r21
 2040610:	203f4300 	call	203f430 <__ssprint_r>
 2040614:	103f081e 	bne	r2,zero,2040238 <__alt_mem_mem_0+0xfd020238>
 2040618:	d8c01c17 	ldw	r3,112(sp)
 204061c:	d8801b17 	ldw	r2,108(sp)
 2040620:	d811883a 	mov	r8,sp
 2040624:	003e9106 	br	204006c <__alt_mem_mem_0+0xfd02006c>
 2040628:	01008134 	movhi	r4,516
 204062c:	210e5704 	addi	r4,r4,14684
 2040630:	d9002215 	stw	r4,136(sp)
 2040634:	003ead06 	br	20400ec <__alt_mem_mem_0+0xfd0200ec>
 2040638:	58800104 	addi	r2,r11,4
 204063c:	5f000017 	ldw	fp,0(r11)
 2040640:	0013883a 	mov	r9,zero
 2040644:	803e610e 	bge	r16,zero,203ffcc <__alt_mem_mem_0+0xfd01ffcc>
 2040648:	003fcb06 	br	2040578 <__alt_mem_mem_0+0xfd020578>
 204064c:	58800104 	addi	r2,r11,4
 2040650:	5f000017 	ldw	fp,0(r11)
 2040654:	0013883a 	mov	r9,zero
 2040658:	803e420e 	bge	r16,zero,203ff64 <__alt_mem_mem_0+0xfd01ff64>
 204065c:	003f7e06 	br	2040458 <__alt_mem_mem_0+0xfd020458>
 2040660:	5f000017 	ldw	fp,0(r11)
 2040664:	5ac00104 	addi	r11,r11,4
 2040668:	0013883a 	mov	r9,zero
 204066c:	dac02315 	stw	r11,140(sp)
 2040670:	003cce06 	br	203f9ac <__alt_mem_mem_0+0xfd01f9ac>
 2040674:	8809883a 	mov	r4,r17
 2040678:	da002c15 	stw	r8,176(sp)
 204067c:	20073a40 	call	20073a4 <strlen>
 2040680:	d8802115 	stw	r2,132(sp)
 2040684:	da801d83 	ldbu	r10,118(sp)
 2040688:	df002315 	stw	fp,140(sp)
 204068c:	0021883a 	mov	r16,zero
 2040690:	da002c17 	ldw	r8,176(sp)
 2040694:	003cf606 	br	203fa70 <__alt_mem_mem_0+0xfd01fa70>
 2040698:	00800184 	movi	r2,6
 204069c:	1400012e 	bgeu	r2,r16,20406a4 <___svfiprintf_internal_r+0x10a4>
 20406a0:	1021883a 	mov	r16,r2
 20406a4:	dc002115 	stw	r16,132(sp)
 20406a8:	8005883a 	mov	r2,r16
 20406ac:	80003c16 	blt	r16,zero,20407a0 <___svfiprintf_internal_r+0x11a0>
 20406b0:	04408134 	movhi	r17,516
 20406b4:	d8802015 	stw	r2,128(sp)
 20406b8:	df002315 	stw	fp,140(sp)
 20406bc:	8c437e04 	addi	r17,r17,3576
 20406c0:	003d2e06 	br	203fb7c <__alt_mem_mem_0+0xfd01fb7c>
 20406c4:	04001004 	movi	r16,64
 20406c8:	800b883a 	mov	r5,r16
 20406cc:	20055680 	call	2005568 <_malloc_r>
 20406d0:	dac02717 	ldw	r11,156(sp)
 20406d4:	58800015 	stw	r2,0(r11)
 20406d8:	58800415 	stw	r2,16(r11)
 20406dc:	10004826 	beq	r2,zero,2040800 <___svfiprintf_internal_r+0x1200>
 20406e0:	dac02717 	ldw	r11,156(sp)
 20406e4:	5c000515 	stw	r16,20(r11)
 20406e8:	003bd906 	br	203f650 <__alt_mem_mem_0+0xfd01f650>
 20406ec:	9080004c 	andi	r2,r18,1
 20406f0:	0015883a 	mov	r10,zero
 20406f4:	10000626 	beq	r2,zero,2040710 <___svfiprintf_internal_r+0x1110>
 20406f8:	dac02b17 	ldw	r11,172(sp)
 20406fc:	00800c04 	movi	r2,48
 2040700:	d88019c5 	stb	r2,103(sp)
 2040704:	dac02115 	stw	r11,132(sp)
 2040708:	dc4019c4 	addi	r17,sp,103
 204070c:	003cd806 	br	203fa70 <__alt_mem_mem_0+0xfd01fa70>
 2040710:	d8002115 	stw	zero,132(sp)
 2040714:	dc401a04 	addi	r17,sp,104
 2040718:	003cd506 	br	203fa70 <__alt_mem_mem_0+0xfd01fa70>
 204071c:	01008134 	movhi	r4,516
 2040720:	210e5b04 	addi	r4,r4,14700
 2040724:	d9002815 	stw	r4,160(sp)
 2040728:	003d4306 	br	203fc38 <__alt_mem_mem_0+0xfd01fc38>
 204072c:	00bfffc4 	movi	r2,-1
 2040730:	003ec606 	br	204024c <__alt_mem_mem_0+0xfd02024c>
 2040734:	00800044 	movi	r2,1
 2040738:	10803fcc 	andi	r2,r2,255
 204073c:	00c00044 	movi	r3,1
 2040740:	10fd8026 	beq	r2,r3,203fd44 <__alt_mem_mem_0+0xfd01fd44>
 2040744:	00c00084 	movi	r3,2
 2040748:	10fca426 	beq	r2,r3,203f9dc <__alt_mem_mem_0+0xfd01f9dc>
 204074c:	003ce806 	br	203faf0 <__alt_mem_mem_0+0xfd01faf0>
 2040750:	01008134 	movhi	r4,516
 2040754:	210e5b04 	addi	r4,r4,14700
 2040758:	d9002815 	stw	r4,160(sp)
 204075c:	003e9906 	br	20401c4 <__alt_mem_mem_0+0xfd0201c4>
 2040760:	1025883a 	mov	r18,r2
 2040764:	0015883a 	mov	r10,zero
 2040768:	00800084 	movi	r2,2
 204076c:	003ff206 	br	2040738 <__alt_mem_mem_0+0xfd020738>
 2040770:	01408134 	movhi	r5,516
 2040774:	294e5704 	addi	r5,r5,14684
 2040778:	d9402215 	stw	r5,136(sp)
 204077c:	003ee206 	br	2040308 <__alt_mem_mem_0+0xfd020308>
 2040780:	5827883a 	mov	r19,r11
 2040784:	0021883a 	mov	r16,zero
 2040788:	003bed06 	br	203f740 <__alt_mem_mem_0+0xfd01f740>
 204078c:	dc002115 	stw	r16,132(sp)
 2040790:	da801d83 	ldbu	r10,118(sp)
 2040794:	df002315 	stw	fp,140(sp)
 2040798:	0021883a 	mov	r16,zero
 204079c:	003cb406 	br	203fa70 <__alt_mem_mem_0+0xfd01fa70>
 20407a0:	0005883a 	mov	r2,zero
 20407a4:	003fc206 	br	20406b0 <__alt_mem_mem_0+0xfd0206b0>
 20407a8:	d8802317 	ldw	r2,140(sp)
 20407ac:	98c00043 	ldbu	r3,1(r19)
 20407b0:	5827883a 	mov	r19,r11
 20407b4:	14000017 	ldw	r16,0(r2)
 20407b8:	10800104 	addi	r2,r2,4
 20407bc:	d8802315 	stw	r2,140(sp)
 20407c0:	803f760e 	bge	r16,zero,204059c <__alt_mem_mem_0+0xfd02059c>
 20407c4:	18c03fcc 	andi	r3,r3,255
 20407c8:	18c0201c 	xori	r3,r3,128
 20407cc:	043fffc4 	movi	r16,-1
 20407d0:	18ffe004 	addi	r3,r3,-128
 20407d4:	003bd906 	br	203f73c <__alt_mem_mem_0+0xfd01f73c>
 20407d8:	d9c01d85 	stb	r7,118(sp)
 20407dc:	003cb606 	br	203fab8 <__alt_mem_mem_0+0xfd01fab8>
 20407e0:	d9c01d85 	stb	r7,118(sp)
 20407e4:	003d2106 	br	203fc6c <__alt_mem_mem_0+0xfd01fc6c>
 20407e8:	d9c01d85 	stb	r7,118(sp)
 20407ec:	003d8e06 	br	203fe28 <__alt_mem_mem_0+0xfd01fe28>
 20407f0:	d9c01d85 	stb	r7,118(sp)
 20407f4:	003db306 	br	203fec4 <__alt_mem_mem_0+0xfd01fec4>
 20407f8:	d9c01d85 	stb	r7,118(sp)
 20407fc:	003c8a06 	br	203fa28 <__alt_mem_mem_0+0xfd01fa28>
 2040800:	dac02a17 	ldw	r11,168(sp)
 2040804:	00800304 	movi	r2,12
 2040808:	58800015 	stw	r2,0(r11)
 204080c:	00bfffc4 	movi	r2,-1
 2040810:	003e8e06 	br	204024c <__alt_mem_mem_0+0xfd02024c>
 2040814:	d9c01d85 	stb	r7,118(sp)
 2040818:	003dc706 	br	203ff38 <__alt_mem_mem_0+0xfd01ff38>
 204081c:	d9c01d85 	stb	r7,118(sp)
 2040820:	003ddf06 	br	203ffa0 <__alt_mem_mem_0+0xfd01ffa0>
 2040824:	d9c01d85 	stb	r7,118(sp)
 2040828:	003d3706 	br	203fd08 <__alt_mem_mem_0+0xfd01fd08>
 204082c:	d9c01d85 	stb	r7,118(sp)
 2040830:	003c5406 	br	203f984 <__alt_mem_mem_0+0xfd01f984>
 2040834:	d9c01d85 	stb	r7,118(sp)
 2040838:	003d1d06 	br	203fcb0 <__alt_mem_mem_0+0xfd01fcb0>

0204083c <__muldi3>:
 204083c:	223fffcc 	andi	r8,r4,65535
 2040840:	2006d43a 	srli	r3,r4,16
 2040844:	32bfffcc 	andi	r10,r6,65535
 2040848:	3012d43a 	srli	r9,r6,16
 204084c:	4297383a 	mul	r11,r8,r10
 2040850:	1a95383a 	mul	r10,r3,r10
 2040854:	4251383a 	mul	r8,r8,r9
 2040858:	5804d43a 	srli	r2,r11,16
 204085c:	4291883a 	add	r8,r8,r10
 2040860:	1205883a 	add	r2,r2,r8
 2040864:	1a51383a 	mul	r8,r3,r9
 2040868:	1280022e 	bgeu	r2,r10,2040874 <__muldi3+0x38>
 204086c:	00c00074 	movhi	r3,1
 2040870:	40d1883a 	add	r8,r8,r3
 2040874:	1006d43a 	srli	r3,r2,16
 2040878:	21cf383a 	mul	r7,r4,r7
 204087c:	314b383a 	mul	r5,r6,r5
 2040880:	1004943a 	slli	r2,r2,16
 2040884:	1a11883a 	add	r8,r3,r8
 2040888:	5affffcc 	andi	r11,r11,65535
 204088c:	3947883a 	add	r3,r7,r5
 2040890:	12c5883a 	add	r2,r2,r11
 2040894:	1a07883a 	add	r3,r3,r8
 2040898:	f800283a 	ret

0204089c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 204089c:	defffd04 	addi	sp,sp,-12
 20408a0:	df000215 	stw	fp,8(sp)
 20408a4:	df000204 	addi	fp,sp,8
 20408a8:	e13fff15 	stw	r4,-4(fp)
 20408ac:	e0bfff17 	ldw	r2,-4(fp)
 20408b0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 20408b4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20408b8:	10000226 	beq	r2,zero,20408c4 <_exit+0x28>
    ALT_SIM_FAIL();
 20408bc:	002af070 	cmpltui	zero,zero,43969
 20408c0:	00000106 	br	20408c8 <_exit+0x2c>
  } else {
    ALT_SIM_PASS();
 20408c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 20408c8:	003fff06 	br	20408c8 <__alt_mem_mem_0+0xfd0208c8>
